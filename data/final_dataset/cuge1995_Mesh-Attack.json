{"home.repos.pwc.inspect_result.cuge1995_Mesh-Attack.None.mesh_data.PointCloudData.__init__": [[33, 47], ["mesh_data.PointCloudData.classes.keys", "os.listdir", "sorted", "os.path.isdir", "enumerate", "file.endswith", "os.listdir", "pathlib.Path", "mesh_data.PointCloudData.files.append"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root_dir", ",", "valid", "=", "False", ",", "folder", "=", "\"train\"", ")", ":", "\n", "        ", "self", ".", "root_dir", "=", "root_dir", "\n", "folders", "=", "[", "directory", "for", "directory", "in", "sorted", "(", "os", ".", "listdir", "(", "root_dir", ")", ")", "if", "os", ".", "path", ".", "isdir", "(", "root_dir", "/", "directory", ")", "]", "\n", "self", ".", "classes", "=", "{", "folder", ":", "i", "for", "i", ",", "folder", "in", "enumerate", "(", "folders", ")", "}", "\n", "self", ".", "valid", "=", "valid", "\n", "self", ".", "files", "=", "[", "]", "\n", "for", "category", "in", "self", ".", "classes", ".", "keys", "(", ")", ":", "\n", "            ", "new_dir", "=", "root_dir", "/", "Path", "(", "category", ")", "/", "folder", "\n", "for", "file", "in", "os", ".", "listdir", "(", "new_dir", ")", ":", "\n", "                ", "if", "file", ".", "endswith", "(", "'.obj'", ")", ":", "\n", "                    ", "sample", "=", "{", "}", "\n", "sample", "[", "'mesh_path'", "]", "=", "new_dir", "/", "file", "\n", "sample", "[", "'category'", "]", "=", "category", "\n", "self", ".", "files", ".", "append", "(", "sample", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cuge1995_Mesh-Attack.None.mesh_data.PointCloudData.__iter__": [[48, 50], ["prefetch_generator.BackgroundGenerator", "torch.utils.data.Dataset.__iter__"], "methods", ["home.repos.pwc.inspect_result.cuge1995_Mesh-Attack.None.mesh_data.PointCloudData.__iter__"], ["", "", "", "", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "BackgroundGenerator", "(", "super", "(", ")", ".", "__iter__", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cuge1995_Mesh-Attack.None.mesh_data.PointCloudData.__len__": [[51, 53], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "files", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cuge1995_Mesh-Attack.None.mesh_data.PointCloudData.__preproc__": [[54, 73], ["trimesh.load", "torch.from_numpy().float.mean", "torch.from_numpy().float.mean", "torch.from_numpy().float.mean", "torch.from_numpy().float.mean", "max", "open3d.geometry.TriangleMesh", "mesh.subdivide_loop.subdivide_loop.subdivide_loop", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "pytorch3d.structures.Meshes", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "verts.abs().max", "open3d.utility.Vector3dVector", "open3d.utility.Vector3iVector", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "verts.abs"], "methods", ["None"], ["", "def", "__preproc__", "(", "self", ",", "file", ")", ":", "\n", "        ", "mesh", "=", "trimesh", ".", "load", "(", "file", ")", "\n", "v", ",", "f", "=", "torch", ".", "from_numpy", "(", "mesh", ".", "vertices", ")", ".", "float", "(", ")", ",", "torch", ".", "from_numpy", "(", "mesh", ".", "faces", ")", ".", "long", "(", ")", "\n", "\n", "# normalize", "\n", "center", "=", "v", ".", "mean", "(", "0", ")", "\n", "verts", "=", "v", "-", "center", "\n", "scale", "=", "max", "(", "verts", ".", "abs", "(", ")", ".", "max", "(", "0", ")", "[", "0", "]", ")", "\n", "v", "=", "verts", "/", "scale", "\n", "\n", "mesh", "=", "o3d", ".", "geometry", ".", "TriangleMesh", "(", "\n", "vertices", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "v", ")", ",", "\n", "triangles", "=", "o3d", ".", "utility", ".", "Vector3iVector", "(", "f", ")", ")", "\n", "mesh", "=", "mesh", ".", "subdivide_loop", "(", "number_of_iterations", "=", "1", ")", "\n", "v", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "mesh", ".", "vertices", ")", ")", ".", "float", "(", ")", "\n", "f", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "mesh", ".", "triangles", ")", ")", ".", "long", "(", ")", "\n", "\n", "trg_mesh", "=", "Meshes", "(", "verts", "=", "[", "v", "]", ",", "faces", "=", "[", "f", "]", ")", "\n", "return", "trg_mesh", "\n", "\n"]], "home.repos.pwc.inspect_result.cuge1995_Mesh-Attack.None.mesh_data.PointCloudData.__getitem__": [[74, 79], ["mesh_data.PointCloudData.__preproc__"], "methods", ["home.repos.pwc.inspect_result.cuge1995_Mesh-Attack.None.mesh_data.PointCloudData.__preproc__"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "pcd_path", "=", "self", ".", "files", "[", "idx", "]", "[", "'mesh_path'", "]", "\n", "category", "=", "self", ".", "files", "[", "idx", "]", "[", "'category'", "]", "\n", "g_mesh", "=", "self", ".", "__preproc__", "(", "pcd_path", ")", "\n", "return", "g_mesh", ",", "self", ".", "classes", "[", "category", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cuge1995_Mesh-Attack.None.mesh_attack.CrossEntropyAdvLoss.__init__": [[45, 49], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.cuge1995_Mesh-Attack.models.pointnet.PointNetDenseCls.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Adversarial function on output probabilities.\n        \"\"\"", "\n", "super", "(", "CrossEntropyAdvLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cuge1995_Mesh-Attack.None.mesh_attack.CrossEntropyAdvLoss.forward": [[50, 59], ["torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "logits", ",", "targets", ")", ":", "\n", "        ", "\"\"\"Adversarial loss function using cross entropy.\n\n        Args:\n            logits (torch.FloatTensor): output logits from network, [B, K]\n            targets (torch.LongTensor): attack target class\n        \"\"\"", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "logits", ",", "targets", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.cuge1995_Mesh-Attack.None.mesh_attack.ClipMeshv_Linf.__init__": [[70, 79], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.cuge1995_Mesh-Attack.models.pointnet.PointNetDenseCls.__init__"], ["    ", "def", "__init__", "(", "self", ",", "budget", ")", ":", "\n", "        ", "\"\"\"Clip mesh vertices with a given l_inf budget.\n\n        Args:\n            budget (float): perturbation budget\n        \"\"\"", "\n", "super", "(", "ClipMeshv_Linf", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "budget", "=", "budget", "\n", "\n"]], "home.repos.pwc.inspect_result.cuge1995_Mesh-Attack.None.mesh_attack.ClipMeshv_Linf.forward": [[80, 95], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "vt", ",", "ori_vt", ")", ":", "\n", "        ", "\"\"\"Clipping every vertice in a mesh.\n\n        Args:\n            vt (torch.FloatTensor): batch vt, [B, 3, K]\n            ori_vt (torch.FloatTensor): original point cloud\n        \"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "diff", "=", "vt", "-", "ori_vt", "# [B, 3, K]", "\n", "norm", "=", "torch", ".", "sum", "(", "diff", "**", "2", ",", "dim", "=", "1", ")", "**", "0.5", "# [B, K]", "\n", "scale_factor", "=", "self", ".", "budget", "/", "(", "norm", "+", "1e-9", ")", "# [B, K]", "\n", "scale_factor", "=", "torch", ".", "clamp", "(", "scale_factor", ",", "max", "=", "1.", ")", "# [B, K]", "\n", "diff", "=", "diff", "*", "scale_factor", "[", ":", ",", "None", "]", "\n", "vt", "=", "ori_vt", "+", "diff", "\n", "", "return", "vt", "\n", "\n"]], "home.repos.pwc.inspect_result.cuge1995_Mesh-Attack.None.mesh_attack.MeshAttack.__init__": [[101, 125], ["model.cuda", "mesh_attack.MeshAttack.model.eval", "mesh_attack.ClipMeshv_Linf"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "model", ",", "adv_func", ",", "attack_lr", "=", "1e-2", ",", "\n", "init_weight", "=", "10.", ",", "max_weight", "=", "80.", ",", "binary_step", "=", "10", ",", "num_iter", "=", "1500", ")", ":", "\n", "        ", "\"\"\"Mesh attack by perturbing vertice.\n\n        Args:\n            model (torch.nn.Module): victim model\n            adv_func (function): adversarial loss function\n            attack_lr (float, optional): lr for optimization. Defaults to 1e-2.\n            init_weight (float, optional): weight factor init. Defaults to 10.\n            max_weight (float, optional): max weight factor. Defaults to 80.\n            binary_step (int, optional): binary search step. Defaults to 10.\n            num_iter (int, optional): max iter num in every search step. Defaults to 500.\n        \"\"\"", "\n", "\n", "self", ".", "model", "=", "model", ".", "cuda", "(", ")", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n", "self", ".", "adv_func", "=", "adv_func", "\n", "self", ".", "attack_lr", "=", "attack_lr", "\n", "self", ".", "init_weight", "=", "init_weight", "\n", "self", ".", "max_weight", "=", "max_weight", "\n", "self", ".", "binary_step", "=", "binary_step", "\n", "self", ".", "num_iter", "=", "num_iter", "\n", "self", ".", "clip", "=", "ClipMeshv_Linf", "(", "budget", "=", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cuge1995_Mesh-Attack.None.mesh_attack.MeshAttack.attack": [[126, 274], ["data.cuda.cuda.cuda", "target.detach().cpu().numpy", "label.long().cuda().detach.long().cuda().detach.long().cuda().detach", "label.long().cuda().detach.long().cuda().detach.detach().cpu().numpy", "data.cuda.cuda.clone", "numpy.zeros", "numpy.array", "numpy.array", "numpy.zeros", "range", "data.cuda.clone.offset_verts", "range", "print", "len", "numpy.ones", "numpy.ones", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full.detach().clone", "torch.full.detach().clone", "torch.full.detach().clone", "torch.full.detach().clone", "torch.full.detach().clone", "torch.full.detach().clone", "numpy.array", "numpy.array", "torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "range", "enumerate", "data.clone.offset_verts.get_mesh_verts_faces", "os.path.join", "pytorch3d.io.save_obj", "numpy.zeros.transpose", "target.detach().cpu", "label.long().cuda().detach.long().cuda().detach.long().cuda", "label.long().cuda().detach.long().cuda().detach.detach().cpu", "time.time", "torch.Adam.zero_grad", "data.cuda.clone.offset_verts", "pytorch3d.ops.sample_points_from_meshes", "pytorch3d.ops.sample_points_from_meshes", "pytorch3d.ops.sample_points_from_meshes.transpose().contiguous", "mesh_attack.MeshAttack.model", "isinstance", "time.time", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.sqrt().detach().cpu().numpy", "torch.sqrt().detach().cpu().numpy", "torch.sqrt().detach().cpu().numpy", "torch.sqrt().detach().cpu().numpy", "torch.sqrt().detach().cpu().numpy", "torch.sqrt().detach().cpu().numpy", "torch.sqrt().detach().cpu().numpy", "torch.sqrt().detach().cpu().numpy", "torch.sqrt().detach().cpu().numpy", "torch.sqrt().detach().cpu().numpy", "torch.sqrt().detach().cpu().numpy", "torch.sqrt().detach().cpu().numpy", "torch.sqrt().detach().cpu().numpy", "torch.sqrt().detach().cpu().numpy", "torch.sqrt().detach().cpu().numpy", "torch.sqrt().detach().cpu().numpy", "torch.sqrt().detach().cpu().numpy", "torch.sqrt().detach().cpu().numpy", "torch.sqrt().detach().cpu().numpy", "torch.sqrt().detach().cpu().numpy", "torch.sqrt().detach().cpu().numpy", "torch.sqrt().detach().cpu().numpy", "torch.sqrt().detach().cpu().numpy", "torch.sqrt().detach().cpu().numpy", "torch.sqrt().detach().cpu().numpy", "torch.sqrt().detach().cpu().numpy", "torch.sqrt().detach().cpu().numpy", "torch.sqrt().detach().cpu().numpy", "torch.sqrt().detach().cpu().numpy", "torch.sqrt().detach().cpu().numpy", "torch.sqrt().detach().cpu().numpy", "torch.sqrt().detach().cpu().numpy", "torch.sqrt().detach().cpu().numpy", "torch.sqrt().detach().cpu().numpy", "torch.sqrt().detach().cpu().numpy", "torch.sqrt().detach().cpu().numpy", "torch.argmax.detach().cpu().numpy", "torch.argmax.detach().cpu().numpy", "torch.argmax.detach().cpu().numpy", "torch.argmax.detach().cpu().numpy", "torch.argmax.detach().cpu().numpy", "torch.argmax.detach().cpu().numpy", "pytorch3d.ops.sample_points_from_meshes.transpose().contiguous.detach().cpu().numpy", "enumerate", "time.time", "mesh_attack.MeshAttack.adv_func().mean", "pytorch3d.loss.chamfer_distance", "pytorch3d.loss.mesh_edge_loss", "pytorch3d.loss.mesh_laplacian_smoothing", "loss.backward", "torch.Adam.step", "mesh_attack.MeshAttack.clip", "time.time", "data.cuda.clone.verts_packed", "torch.full.detach", "torch.full.detach", "torch.full.detach", "torch.full.detach", "torch.full.detach", "torch.full.detach", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "print", "zip", "torch.full.clone().detach", "torch.full.clone().detach", "torch.full.clone().detach", "torch.full.clone().detach", "torch.full.clone().detach", "torch.full.clone().detach", "print", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "max", "min", "target.detach", "label.long().cuda().detach.long().cuda().detach.long", "label.long().cuda().detach.long().cuda().detach.detach", "pytorch3d.ops.sample_points_from_meshes.transpose", "torch.sqrt().detach().cpu", "torch.sqrt().detach().cpu", "torch.sqrt().detach().cpu", "torch.sqrt().detach().cpu", "torch.sqrt().detach().cpu", "torch.sqrt().detach().cpu", "torch.sqrt().detach().cpu", "torch.sqrt().detach().cpu", "torch.sqrt().detach().cpu", "torch.sqrt().detach().cpu", "torch.sqrt().detach().cpu", "torch.sqrt().detach().cpu", "torch.sqrt().detach().cpu", "torch.sqrt().detach().cpu", "torch.sqrt().detach().cpu", "torch.sqrt().detach().cpu", "torch.sqrt().detach().cpu", "torch.sqrt().detach().cpu", "torch.sqrt().detach().cpu", "torch.sqrt().detach().cpu", "torch.sqrt().detach().cpu", "torch.sqrt().detach().cpu", "torch.sqrt().detach().cpu", "torch.sqrt().detach().cpu", "torch.sqrt().detach().cpu", "torch.sqrt().detach().cpu", "torch.sqrt().detach().cpu", "torch.sqrt().detach().cpu", "torch.sqrt().detach().cpu", "torch.sqrt().detach().cpu", "torch.sqrt().detach().cpu", "torch.sqrt().detach().cpu", "torch.sqrt().detach().cpu", "torch.sqrt().detach().cpu", "torch.sqrt().detach().cpu", "torch.sqrt().detach().cpu", "torch.argmax.detach().cpu", "torch.argmax.detach().cpu", "torch.argmax.detach().cpu", "torch.argmax.detach().cpu", "torch.argmax.detach().cpu", "torch.argmax.detach().cpu", "pytorch3d.ops.sample_points_from_meshes.transpose().contiguous.detach().cpu", "mesh_attack.MeshAttack.adv_func", "torch.from_numpy().mean", "torch.from_numpy().mean", "torch.from_numpy().mean", "torch.from_numpy().mean", "torch.from_numpy().mean", "torch.from_numpy().mean", "torch.from_numpy().mean", "torch.from_numpy().mean", "torch.from_numpy().mean", "torch.from_numpy().mean", "torch.from_numpy().mean", "torch.from_numpy().mean", "torch.from_numpy().mean", "torch.from_numpy().mean", "torch.from_numpy().mean", "torch.from_numpy().mean", "torch.from_numpy().mean", "torch.from_numpy().mean", "torch.from_numpy().mean", "torch.from_numpy().mean", "torch.from_numpy().mean", "torch.from_numpy().mean", "torch.from_numpy().mean", "torch.from_numpy().mean", "torch.from_numpy().mean", "torch.from_numpy().mean", "torch.from_numpy().mean", "torch.from_numpy().mean", "torch.from_numpy().mean", "torch.from_numpy().mean", "torch.from_numpy().mean", "torch.from_numpy().mean", "torch.from_numpy().mean", "torch.from_numpy().mean", "torch.from_numpy().mean", "torch.from_numpy().mean", "torch.from_numpy().mean", "torch.from_numpy().mean", "torch.from_numpy().mean", "torch.from_numpy().mean", "torch.from_numpy().mean", "torch.from_numpy().mean", "torch.from_numpy().mean", "torch.from_numpy().mean", "torch.from_numpy().mean", "torch.from_numpy().mean", "torch.from_numpy().mean", "torch.from_numpy().mean", "torch.from_numpy().mean", "torch.from_numpy().mean", "torch.from_numpy().mean", "torch.from_numpy().mean", "torch.from_numpy().mean", "torch.from_numpy().mean", "torch.from_numpy().mean", "torch.from_numpy().mean", "torch.from_numpy().mean", "torch.from_numpy().mean", "torch.from_numpy().mean", "torch.from_numpy().mean", "torch.from_numpy().mean", "torch.from_numpy().mean", "torch.from_numpy().mean", "torch.from_numpy().mean", "torch.from_numpy().mean", "torch.from_numpy().mean", "torch.from_numpy().mean", "torch.from_numpy().mean", "torch.from_numpy().mean", "torch.from_numpy().mean", "torch.from_numpy().mean", "torch.from_numpy().mean", "mesh_attack.MeshAttack.item", "torch.full.clone", "torch.full.clone", "torch.full.clone", "torch.full.clone", "torch.full.clone", "torch.full.clone", "torch.sqrt().detach", "torch.sqrt().detach", "torch.sqrt().detach", "torch.sqrt().detach", "torch.sqrt().detach", "torch.sqrt().detach", "torch.sqrt().detach", "torch.sqrt().detach", "torch.sqrt().detach", "torch.sqrt().detach", "torch.sqrt().detach", "torch.sqrt().detach", "torch.sqrt().detach", "torch.sqrt().detach", "torch.sqrt().detach", "torch.sqrt().detach", "torch.sqrt().detach", "torch.sqrt().detach", "torch.sqrt().detach", "torch.sqrt().detach", "torch.sqrt().detach", "torch.sqrt().detach", "torch.sqrt().detach", "torch.sqrt().detach", "torch.sqrt().detach", "torch.sqrt().detach", "torch.sqrt().detach", "torch.sqrt().detach", "torch.sqrt().detach", "torch.sqrt().detach", "torch.sqrt().detach", "torch.sqrt().detach", "torch.sqrt().detach", "torch.sqrt().detach", "torch.sqrt().detach", "torch.sqrt().detach", "torch.argmax.detach", "torch.argmax.detach", "torch.argmax.detach", "torch.argmax.detach", "torch.argmax.detach", "torch.argmax.detach", "pytorch3d.ops.sample_points_from_meshes.transpose().contiguous.detach", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "attack", "(", "self", ",", "data", ",", "target", ",", "label", ")", ":", "\n", "        ", "\"\"\"Attack on given data to target.\n\n        Args:\n            data (torch.FloatTensor): victim data, [B, num_vertices, 3]\n            target (torch.LongTensor): target output, [B]\n        \"\"\"", "\n", "B", ",", "K", "=", "len", "(", "data", ")", ",", "1024", "\n", "global", "bas", "\n", "data", "=", "data", ".", "cuda", "(", ")", "\n", "label_val", "=", "target", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "# [B]", "\n", "\n", "label", "=", "label", ".", "long", "(", ")", ".", "cuda", "(", ")", ".", "detach", "(", ")", "\n", "label_true", "=", "label", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "deform_ori", "=", "data", ".", "clone", "(", ")", "\n", "\n", "# weight factor for budget regularization", "\n", "lower_bound", "=", "np", ".", "zeros", "(", "(", "B", ",", ")", ")", "\n", "upper_bound", "=", "np", ".", "ones", "(", "(", "B", ",", ")", ")", "*", "self", ".", "max_weight", "\n", "current_weight", "=", "np", ".", "ones", "(", "(", "B", ",", ")", ")", "*", "self", ".", "init_weight", "\n", "\n", "# record best results in binary search", "\n", "o_bestdist", "=", "np", ".", "array", "(", "[", "1e10", "]", "*", "B", ")", "\n", "o_bestscore", "=", "np", ".", "array", "(", "[", "-", "1", "]", "*", "B", ")", "\n", "o_bestattack", "=", "np", ".", "zeros", "(", "(", "B", ",", "3", ",", "K", ")", ")", "\n", "# Weight for the chamfer loss", "\n", "w_chamfer", "=", "1.0", "\n", "# Weight for mesh edge loss", "\n", "w_edge", "=", "0.2", "\n", "# Weight for mesh laplacian smoothing", "\n", "w_laplacian", "=", "0.5", "\n", "\n", "# perform binary search", "\n", "for", "binary_step", "in", "range", "(", "self", ".", "binary_step", ")", ":", "\n", "            ", "deform_verts", "=", "torch", ".", "full", "(", "deform_ori", ".", "verts_packed", "(", ")", ".", "shape", ",", "0.000001", ",", "device", "=", "'cuda:%s'", "%", "args", ".", "local_rank", ",", "requires_grad", "=", "True", ")", "\n", "ori_def", "=", "deform_verts", ".", "detach", "(", ")", ".", "clone", "(", ")", "\n", "\n", "bestdist", "=", "np", ".", "array", "(", "[", "1e10", "]", "*", "B", ")", "\n", "bestscore", "=", "np", ".", "array", "(", "[", "-", "1", "]", "*", "B", ")", "\n", "dist_val", "=", "0", "\n", "opt", "=", "optim", ".", "Adam", "(", "[", "deform_verts", "]", ",", "lr", "=", "self", ".", "attack_lr", ",", "weight_decay", "=", "0.", ")", "\n", "# opt = optim.SGD([deform_verts], lr=1.0, momentum=0.9) #optim.Adam([deform_verts], lr=self.attack_lr, weight_decay=0.)", "\n", "\n", "adv_loss", "=", "torch", ".", "tensor", "(", "0.", ")", ".", "cuda", "(", ")", "\n", "dist_loss", "=", "torch", ".", "tensor", "(", "0.", ")", ".", "cuda", "(", ")", "\n", "\n", "total_time", "=", "0.", "\n", "forward_time", "=", "0.", "\n", "backward_time", "=", "0.", "\n", "update_time", "=", "0.", "\n", "\n", "# one step in binary search", "\n", "for", "iteration", "in", "range", "(", "self", ".", "num_iter", ")", ":", "\n", "                ", "t1", "=", "time", ".", "time", "(", ")", "\n", "opt", ".", "zero_grad", "(", ")", "\n", "new_defrom_mesh", "=", "deform_ori", ".", "offset_verts", "(", "deform_verts", ")", "\n", "\n", "# forward passing", "\n", "ori_data", "=", "sample_points_from_meshes", "(", "data", ",", "1024", ")", "\n", "adv_pl", "=", "sample_points_from_meshes", "(", "new_defrom_mesh", ",", "1024", ")", "\n", "adv_pl1", "=", "adv_pl", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "logits", "=", "self", ".", "model", "(", "adv_pl1", ")", "# [B, num_classes]", "\n", "if", "isinstance", "(", "logits", ",", "tuple", ")", ":", "# PointNet", "\n", "                    ", "logits", "=", "logits", "[", "0", "]", "\n", "\n", "", "t2", "=", "time", ".", "time", "(", ")", "\n", "forward_time", "+=", "t2", "-", "t1", "\n", "\n", "pred", "=", "torch", ".", "argmax", "(", "logits", ",", "dim", "=", "1", ")", "# [B]", "\n", "success_num", "=", "(", "pred", "==", "target", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "if", "iteration", "%", "(", "self", ".", "num_iter", "//", "5", ")", "==", "0", ":", "\n", "                    ", "print", "(", "'Step {}, iteration {}, current_c {},success {}/{}\\n'", "\n", "'adv_loss: {:.4f}'", ".", "\n", "format", "(", "binary_step", ",", "iteration", ",", "torch", ".", "from_numpy", "(", "current_weight", ")", ".", "mean", "(", ")", ",", "success_num", ",", "B", ",", "\n", "adv_loss", ".", "item", "(", ")", ")", ")", "\n", "", "dist_val", "=", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "\n", "(", "adv_pl", "-", "ori_data", ")", "**", "2", ",", "dim", "=", "[", "1", ",", "2", "]", ")", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "# [B]", "\n", "pred_val", "=", "pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "# [B]", "\n", "input_val", "=", "adv_pl1", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "# [B, 3, K]", "\n", "\n", "# update", "\n", "for", "e", ",", "(", "dist", ",", "pred", ",", "label", ",", "ii", ")", "in", "enumerate", "(", "zip", "(", "dist_val", ",", "pred_val", ",", "label_val", ",", "input_val", ")", ")", ":", "\n", "                    ", "if", "dist", "<", "bestdist", "[", "e", "]", "and", "pred", "==", "label", ":", "\n", "                        ", "bestdist", "[", "e", "]", "=", "dist", "\n", "bestscore", "[", "e", "]", "=", "pred", "\n", "", "if", "dist", "<", "o_bestdist", "[", "e", "]", "and", "pred", "==", "label", ":", "\n", "                        ", "o_bestdist", "[", "e", "]", "=", "dist", "\n", "o_bestscore", "[", "e", "]", "=", "pred", "\n", "o_bestattack", "[", "e", "]", "=", "ii", "\n", "\n", "", "", "t3", "=", "time", ".", "time", "(", ")", "\n", "# compute loss and backward", "\n", "adv_loss", "=", "self", ".", "adv_func", "(", "logits", ",", "target", ")", ".", "mean", "(", ")", "\n", "loss_chamfer", ",", "_", "=", "chamfer_distance", "(", "ori_data", ",", "adv_pl", ")", "\n", "loss_edge", "=", "mesh_edge_loss", "(", "new_defrom_mesh", ")", "\n", "loss_laplacian", "=", "mesh_laplacian_smoothing", "(", "new_defrom_mesh", ",", "method", "=", "\"uniform\"", ")", "\n", "\n", "loss", "=", "adv_loss", "+", "torch", ".", "from_numpy", "(", "current_weight", ")", ".", "mean", "(", ")", "*", "(", "loss_chamfer", "*", "w_chamfer", "+", "loss_edge", "*", "w_edge", "+", "loss_laplacian", "*", "w_laplacian", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "opt", ".", "step", "(", ")", "\n", "\n", "deform_verts", ".", "data", "=", "self", ".", "clip", "(", "deform_verts", ".", "clone", "(", ")", ".", "detach", "(", ")", ",", "\n", "ori_def", ")", "\n", "\n", "t4", "=", "time", ".", "time", "(", ")", "\n", "backward_time", "+=", "t4", "-", "t3", "\n", "total_time", "+=", "t4", "-", "t1", "\n", "\n", "if", "iteration", "%", "100", "==", "0", ":", "\n", "                    ", "print", "(", "'total time: {:.2f}, for: {:.2f}, '", "\n", "'back: {:.6f}, update: {:.2f}, total loss: {:.6f}, chamfer loss: {:.6f}'", ".", "\n", "format", "(", "total_time", ",", "forward_time", ",", "\n", "backward_time", ",", "update_time", ",", "loss", ",", "loss_chamfer", ")", ")", "\n", "total_time", "=", "0.", "\n", "forward_time", "=", "0.", "\n", "backward_time", "=", "0.", "\n", "update_time", "=", "0.", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n", "# adjust weight factor", "\n", "", "", "for", "e", ",", "label", "in", "enumerate", "(", "label_val", ")", ":", "\n", "                ", "if", "bestscore", "[", "e", "]", "==", "label", "and", "bestscore", "[", "e", "]", "!=", "-", "1", "and", "bestdist", "[", "e", "]", "<=", "o_bestdist", "[", "e", "]", ":", "\n", "# success", "\n", "                    ", "lower_bound", "[", "e", "]", "=", "max", "(", "lower_bound", "[", "e", "]", ",", "current_weight", "[", "e", "]", ")", "\n", "current_weight", "[", "e", "]", "=", "(", "lower_bound", "[", "e", "]", "+", "upper_bound", "[", "e", "]", ")", "/", "2.", "\n", "", "else", ":", "\n", "# failure", "\n", "                    ", "upper_bound", "[", "e", "]", "=", "min", "(", "upper_bound", "[", "e", "]", ",", "current_weight", "[", "e", "]", ")", "\n", "current_weight", "[", "e", "]", "=", "(", "lower_bound", "[", "e", "]", "+", "upper_bound", "[", "e", "]", ")", "/", "2.", "\n", "\n", "", "", "", "bas", "+=", "1", "\n", "## save the mesh", "\n", "new_defrom_mesh", "=", "deform_ori", ".", "offset_verts", "(", "deform_verts", ")", "\n", "for", "e1", "in", "range", "(", "B", ")", ":", "\n", "            ", "final_verts", ",", "final_faces", "=", "new_defrom_mesh", ".", "get_mesh_verts_faces", "(", "e1", ")", "\n", "final_obj", "=", "os", ".", "path", ".", "join", "(", "'./p1_manifold_random_target01'", ",", "'result_model%s_%s_%s_%s.obj'", "%", "(", "bas", ",", "e1", ",", "label_val", "[", "e1", "]", ",", "label_true", "[", "e1", "]", ")", ")", "\n", "save_obj", "(", "final_obj", ",", "final_verts", ",", "final_faces", ")", "\n", "\n", "", "fail_idx", "=", "(", "lower_bound", "==", "0.", ")", "\n", "o_bestattack", "[", "fail_idx", "]", "=", "input_val", "[", "fail_idx", "]", "\n", "\n", "# return final results", "\n", "success_num", "=", "(", "lower_bound", ">", "0.", ")", ".", "sum", "(", ")", "\n", "print", "(", "'Successfully attack {}/{}'", ".", "format", "(", "success_num", ",", "B", ")", ")", "\n", "return", "o_bestdist", ",", "o_bestattack", ".", "transpose", "(", "(", "0", ",", "2", ",", "1", ")", ")", ",", "success_num", "\n", "\n"]], "home.repos.pwc.inspect_result.cuge1995_Mesh-Attack.None.mesh_attack.my_collate": [[61, 67], ["zip", "pytorch3d.structures.join_meshes_as_batch", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "function", ["None"], ["", "", "def", "my_collate", "(", "batch", ")", ":", "\n", "## load unregular mesh within a batch", "\n", "    ", "meshes", ",", "label", "=", "zip", "(", "*", "batch", ")", "\n", "meshes", "=", "join_meshes_as_batch", "(", "meshes", ",", "include_textures", "=", "False", ")", "\n", "label", "=", "torch", ".", "tensor", "(", "label", ")", "\n", "return", "[", "meshes", ",", "label", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cuge1995_Mesh-Attack.None.mesh_attack.get_random_labels": [[277, 283], ["range", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "len", "random.choice", "ret.append", "numpy.array", "range"], "function", ["None"], ["", "", "def", "get_random_labels", "(", "label", ")", ":", "\n", "    ", "ret", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "len", "(", "label", ")", ")", ":", "\n", "        ", "random_taget", "=", "choice", "(", "[", "i", "for", "i", "in", "range", "(", "0", ",", "40", ")", "if", "i", "not", "in", "[", "label", "[", "j", "]", "]", "]", ")", "\n", "ret", ".", "append", "(", "random_taget", ")", "\n", "", "return", "torch", ".", "Tensor", "(", "np", ".", "array", "(", "ret", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cuge1995_Mesh-Attack.None.mesh_attack.attack": [[285, 311], ["model.eval", "tqdm.tqdm", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "get_random_labels().long().cuda", "label.long().cuda.long().cuda", "attacker.attack", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "label.long().cuda.detach().cpu().numpy", "get_random_labels().long().cuda.detach().cpu().numpy", "get_random_labels().long", "label.long().cuda.long", "label.long().cuda.detach().cpu", "get_random_labels().long().cuda.detach().cpu", "mesh_attack.get_random_labels", "label.long().cuda.detach", "get_random_labels().long().cuda.detach"], "function", ["home.repos.pwc.inspect_result.cuge1995_Mesh-Attack.None.mesh_attack.attack", "home.repos.pwc.inspect_result.cuge1995_Mesh-Attack.None.mesh_attack.get_random_labels"], ["", "def", "attack", "(", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "all_adv_pc", "=", "[", "]", "\n", "all_real_lbl", "=", "[", "]", "\n", "all_target_lbl", "=", "[", "]", "\n", "global", "bas", "\n", "bas", "=", "0", "\n", "num", "=", "0", "\n", "for", "mesh", ",", "label", "in", "tqdm", "(", "test_loader", ")", ":", "\n", "        ", "target_label", "=", "get_random_labels", "(", "label", ")", ".", "long", "(", ")", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "label", "=", "label", ".", "long", "(", ")", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "\n", "# attack!", "\n", "_", ",", "best_pc", ",", "success_num", "=", "attacker", ".", "attack", "(", "mesh", ",", "target_label", ",", "label", ")", "\n", "# results", "\n", "num", "+=", "success_num", "\n", "all_adv_pc", ".", "append", "(", "best_pc", ")", "\n", "all_real_lbl", ".", "append", "(", "label", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "all_target_lbl", ".", "append", "(", "target_label", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "# accumulate results", "\n", "", "all_adv_pc", "=", "np", ".", "concatenate", "(", "all_adv_pc", ",", "axis", "=", "0", ")", "# [num_data, K, 3]", "\n", "all_real_lbl", "=", "np", ".", "concatenate", "(", "all_real_lbl", ",", "axis", "=", "0", ")", "# [num_data]", "\n", "all_target_lbl", "=", "np", ".", "concatenate", "(", "all_target_lbl", ",", "axis", "=", "0", ")", "# [num_data]", "\n", "return", "all_adv_pc", ",", "all_real_lbl", ",", "all_target_lbl", ",", "num", "\n", "\n"]], "home.repos.pwc.inspect_result.cuge1995_Mesh-Attack.models.pointnet_util.PointNetSetAbstraction.__init__": [[161, 174], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "pointnet_util.PointNetSetAbstraction.mlp_convs.append", "pointnet_util.PointNetSetAbstraction.mlp_bns.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.cuge1995_Mesh-Attack.models.pointnet.PointNetDenseCls.__init__"], ["    ", "def", "__init__", "(", "self", ",", "npoint", ",", "radius", ",", "nsample", ",", "in_channel", ",", "mlp", ",", "group_all", ")", ":", "\n", "        ", "super", "(", "PointNetSetAbstraction", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "npoint", "=", "npoint", "\n", "self", ".", "radius", "=", "radius", "\n", "self", ".", "nsample", "=", "nsample", "\n", "self", ".", "mlp_convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "mlp_bns", "=", "nn", ".", "ModuleList", "(", ")", "\n", "last_channel", "=", "in_channel", "\n", "for", "out_channel", "in", "mlp", ":", "\n", "            ", "self", ".", "mlp_convs", ".", "append", "(", "nn", ".", "Conv2d", "(", "last_channel", ",", "out_channel", ",", "1", ")", ")", "\n", "self", ".", "mlp_bns", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "out_channel", ")", ")", "\n", "last_channel", "=", "out_channel", "\n", "", "self", ".", "group_all", "=", "group_all", "\n", "\n"]], "home.repos.pwc.inspect_result.cuge1995_Mesh-Attack.models.pointnet_util.PointNetSetAbstraction.forward": [[175, 202], ["xyz.permute.permute.permute", "torch.relu.permute", "enumerate", "new_xyz.permute.permute.permute", "points.permute.permute.permute", "pointnet_util.sample_and_group_all", "pointnet_util.sample_and_group", "torch.relu", "torch.relu", "torch.relu", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "bn", "conv"], "methods", ["home.repos.pwc.inspect_result.cuge1995_Mesh-Attack.models.pointnet_util.sample_and_group_all", "home.repos.pwc.inspect_result.cuge1995_Mesh-Attack.models.pointnet_util.sample_and_group"], ["", "def", "forward", "(", "self", ",", "xyz", ",", "points", ")", ":", "\n", "        ", "\"\"\"\n        Input:\n            xyz: input points position data, [B, C, N]\n            points: input points data, [B, D, N]\n        Return:\n            new_xyz: sampled points position data, [B, C, S]\n            new_points_concat: sample points feature data, [B, D', S]\n        \"\"\"", "\n", "xyz", "=", "xyz", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "if", "points", "is", "not", "None", ":", "\n", "            ", "points", "=", "points", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "\n", "", "if", "self", ".", "group_all", ":", "\n", "            ", "new_xyz", ",", "new_points", "=", "sample_and_group_all", "(", "xyz", ",", "points", ")", "\n", "", "else", ":", "\n", "            ", "new_xyz", ",", "new_points", "=", "sample_and_group", "(", "self", ".", "npoint", ",", "self", ".", "radius", ",", "self", ".", "nsample", ",", "xyz", ",", "points", ")", "\n", "# new_xyz: sampled points position data, [B, npoint, C]", "\n", "# new_points: sampled points data, [B, npoint, nsample, C+D]", "\n", "", "new_points", "=", "new_points", ".", "permute", "(", "0", ",", "3", ",", "2", ",", "1", ")", "# [B, C+D, nsample,npoint]", "\n", "for", "i", ",", "conv", "in", "enumerate", "(", "self", ".", "mlp_convs", ")", ":", "\n", "            ", "bn", "=", "self", ".", "mlp_bns", "[", "i", "]", "\n", "new_points", "=", "F", ".", "relu", "(", "bn", "(", "conv", "(", "new_points", ")", ")", ")", "\n", "\n", "", "new_points", "=", "torch", ".", "max", "(", "new_points", ",", "2", ")", "[", "0", "]", "\n", "new_xyz", "=", "new_xyz", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "return", "new_xyz", ",", "new_points", "\n", "\n"]], "home.repos.pwc.inspect_result.cuge1995_Mesh-Attack.models.pointnet_util.PointNetSetAbstractionMsg.__init__": [[205, 222], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "len", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "pointnet_util.PointNetSetAbstractionMsg.conv_blocks.append", "pointnet_util.PointNetSetAbstractionMsg.bn_blocks.append", "torch.ModuleList.append", "torch.ModuleList.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.cuge1995_Mesh-Attack.models.pointnet.PointNetDenseCls.__init__"], ["    ", "def", "__init__", "(", "self", ",", "npoint", ",", "radius_list", ",", "nsample_list", ",", "in_channel", ",", "mlp_list", ")", ":", "\n", "        ", "super", "(", "PointNetSetAbstractionMsg", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "npoint", "=", "npoint", "\n", "self", ".", "radius_list", "=", "radius_list", "\n", "self", ".", "nsample_list", "=", "nsample_list", "\n", "self", ".", "conv_blocks", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "bn_blocks", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "mlp_list", ")", ")", ":", "\n", "            ", "convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "bns", "=", "nn", ".", "ModuleList", "(", ")", "\n", "last_channel", "=", "in_channel", "+", "3", "\n", "for", "out_channel", "in", "mlp_list", "[", "i", "]", ":", "\n", "                ", "convs", ".", "append", "(", "nn", ".", "Conv2d", "(", "last_channel", ",", "out_channel", ",", "1", ")", ")", "\n", "bns", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "out_channel", ")", ")", "\n", "last_channel", "=", "out_channel", "\n", "", "self", ".", "conv_blocks", ".", "append", "(", "convs", ")", "\n", "self", ".", "bn_blocks", ".", "append", "(", "bns", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cuge1995_Mesh-Attack.models.pointnet_util.PointNetSetAbstractionMsg.forward": [[223, 262], ["xyz.permute.permute.permute", "pointnet_util.index_points", "enumerate", "new_xyz.permute.permute.permute", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "points.permute.permute.permute", "pointnet_util.farthest_point_sample", "pointnet_util.query_ball_point", "pointnet_util.index_points", "new_xyz.permute.permute.view", "torch.relu.permute", "range", "new_points_list.append", "pointnet_util.index_points", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "torch.relu", "torch.relu", "torch.relu", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "bn", "conv"], "methods", ["home.repos.pwc.inspect_result.cuge1995_Mesh-Attack.models.pointnet_util.index_points", "home.repos.pwc.inspect_result.cuge1995_Mesh-Attack.models.pointnet_util.farthest_point_sample", "home.repos.pwc.inspect_result.cuge1995_Mesh-Attack.models.pointnet_util.query_ball_point", "home.repos.pwc.inspect_result.cuge1995_Mesh-Attack.models.pointnet_util.index_points", "home.repos.pwc.inspect_result.cuge1995_Mesh-Attack.models.pointnet_util.index_points"], ["", "", "def", "forward", "(", "self", ",", "xyz", ",", "points", ")", ":", "\n", "        ", "\"\"\"\n        Input:\n            xyz: input points position data, [B, C, N]\n            points: input points data, [B, D, N]\n        Return:\n            new_xyz: sampled points position data, [B, C, S]\n            new_points_concat: sample points feature data, [B, D', S]\n        \"\"\"", "\n", "xyz", "=", "xyz", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "if", "points", "is", "not", "None", ":", "\n", "            ", "points", "=", "points", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "\n", "", "B", ",", "N", ",", "C", "=", "xyz", ".", "shape", "\n", "S", "=", "self", ".", "npoint", "\n", "new_xyz", "=", "index_points", "(", "xyz", ",", "farthest_point_sample", "(", "xyz", ",", "S", ")", ")", "\n", "new_points_list", "=", "[", "]", "\n", "for", "i", ",", "radius", "in", "enumerate", "(", "self", ".", "radius_list", ")", ":", "\n", "            ", "K", "=", "self", ".", "nsample_list", "[", "i", "]", "\n", "group_idx", "=", "query_ball_point", "(", "radius", ",", "K", ",", "xyz", ",", "new_xyz", ")", "\n", "grouped_xyz", "=", "index_points", "(", "xyz", ",", "group_idx", ")", "\n", "grouped_xyz", "-=", "new_xyz", ".", "view", "(", "B", ",", "S", ",", "1", ",", "C", ")", "\n", "if", "points", "is", "not", "None", ":", "\n", "                ", "grouped_points", "=", "index_points", "(", "points", ",", "group_idx", ")", "\n", "grouped_points", "=", "torch", ".", "cat", "(", "[", "grouped_points", ",", "grouped_xyz", "]", ",", "dim", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "                ", "grouped_points", "=", "grouped_xyz", "\n", "\n", "", "grouped_points", "=", "grouped_points", ".", "permute", "(", "0", ",", "3", ",", "2", ",", "1", ")", "# [B, D, K, S]", "\n", "for", "j", "in", "range", "(", "len", "(", "self", ".", "conv_blocks", "[", "i", "]", ")", ")", ":", "\n", "                ", "conv", "=", "self", ".", "conv_blocks", "[", "i", "]", "[", "j", "]", "\n", "bn", "=", "self", ".", "bn_blocks", "[", "i", "]", "[", "j", "]", "\n", "grouped_points", "=", "F", ".", "relu", "(", "bn", "(", "conv", "(", "grouped_points", ")", ")", ")", "\n", "", "new_points", "=", "torch", ".", "max", "(", "grouped_points", ",", "2", ")", "[", "0", "]", "# [B, D', S]", "\n", "new_points_list", ".", "append", "(", "new_points", ")", "\n", "\n", "", "new_xyz", "=", "new_xyz", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "new_points_concat", "=", "torch", ".", "cat", "(", "new_points_list", ",", "dim", "=", "1", ")", "\n", "return", "new_xyz", ",", "new_points_concat", "\n", "\n"]], "home.repos.pwc.inspect_result.cuge1995_Mesh-Attack.models.pointnet_util.PointNetFeaturePropagation.__init__": [[265, 274], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "pointnet_util.PointNetFeaturePropagation.mlp_convs.append", "pointnet_util.PointNetFeaturePropagation.mlp_bns.append", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.cuge1995_Mesh-Attack.models.pointnet.PointNetDenseCls.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channel", ",", "mlp", ")", ":", "\n", "        ", "super", "(", "PointNetFeaturePropagation", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mlp_convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "mlp_bns", "=", "nn", ".", "ModuleList", "(", ")", "\n", "last_channel", "=", "in_channel", "\n", "for", "out_channel", "in", "mlp", ":", "\n", "            ", "self", ".", "mlp_convs", ".", "append", "(", "nn", ".", "Conv1d", "(", "last_channel", ",", "out_channel", ",", "1", ")", ")", "\n", "self", ".", "mlp_bns", ".", "append", "(", "nn", ".", "BatchNorm1d", "(", "out_channel", ")", ")", "\n", "last_channel", "=", "out_channel", "\n", "\n"]], "home.repos.pwc.inspect_result.cuge1995_Mesh-Attack.models.pointnet_util.PointNetFeaturePropagation.forward": [[275, 314], ["xyz1.permute.permute.permute", "xyz2.permute.permute.permute", "points2.permute.permute.permute", "torch.relu.permute", "enumerate", "points2.permute.permute.repeat", "pointnet_util.square_distance", "square_distance.sort", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "points1.permute.permute.permute", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "bn", "pointnet_util.index_points", "weight.view", "conv", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["home.repos.pwc.inspect_result.cuge1995_Mesh-Attack.models.pointnet_util.square_distance", "home.repos.pwc.inspect_result.cuge1995_Mesh-Attack.models.pointnet_util.index_points"], ["", "", "def", "forward", "(", "self", ",", "xyz1", ",", "xyz2", ",", "points1", ",", "points2", ")", ":", "\n", "        ", "\"\"\"\n        Input:\n            xyz1: input points position data, [B, C, N]\n            xyz2: sampled input points position data, [B, C, S]\n            points1: input points data, [B, D, N]\n            points2: input points data, [B, D, S]\n        Return:\n            new_points: upsampled points data, [B, D', N]\n        \"\"\"", "\n", "xyz1", "=", "xyz1", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "xyz2", "=", "xyz2", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "\n", "points2", "=", "points2", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "B", ",", "N", ",", "C", "=", "xyz1", ".", "shape", "\n", "_", ",", "S", ",", "_", "=", "xyz2", ".", "shape", "\n", "\n", "if", "S", "==", "1", ":", "\n", "            ", "interpolated_points", "=", "points2", ".", "repeat", "(", "1", ",", "N", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "dists", "=", "square_distance", "(", "xyz1", ",", "xyz2", ")", "\n", "dists", ",", "idx", "=", "dists", ".", "sort", "(", "dim", "=", "-", "1", ")", "\n", "dists", ",", "idx", "=", "dists", "[", ":", ",", ":", ",", ":", "3", "]", ",", "idx", "[", ":", ",", ":", ",", ":", "3", "]", "# [B, N, 3]", "\n", "dists", "[", "dists", "<", "1e-10", "]", "=", "1e-10", "\n", "weight", "=", "1.0", "/", "dists", "# [B, N, 3]", "\n", "weight", "=", "weight", "/", "torch", ".", "sum", "(", "weight", ",", "dim", "=", "-", "1", ")", ".", "view", "(", "B", ",", "N", ",", "1", ")", "# [B, N, 3]", "\n", "interpolated_points", "=", "torch", ".", "sum", "(", "index_points", "(", "points2", ",", "idx", ")", "*", "weight", ".", "view", "(", "B", ",", "N", ",", "3", ",", "1", ")", ",", "dim", "=", "2", ")", "\n", "\n", "", "if", "points1", "is", "not", "None", ":", "\n", "            ", "points1", "=", "points1", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "new_points", "=", "torch", ".", "cat", "(", "[", "points1", ",", "interpolated_points", "]", ",", "dim", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "new_points", "=", "interpolated_points", "\n", "\n", "", "new_points", "=", "new_points", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "for", "i", ",", "conv", "in", "enumerate", "(", "self", ".", "mlp_convs", ")", ":", "\n", "            ", "bn", "=", "self", ".", "mlp_bns", "[", "i", "]", "\n", "new_points", "=", "F", ".", "relu", "(", "bn", "(", "conv", "(", "new_points", ")", ")", ")", "\n", "", "return", "new_points", "\n", "\n"]], "home.repos.pwc.inspect_result.cuge1995_Mesh-Attack.models.pointnet_util.timeit": [[7, 10], ["print", "time.time", "time.time"], "function", ["None"], ["def", "timeit", "(", "tag", ",", "t", ")", ":", "\n", "    ", "print", "(", "\"{}: {}s\"", ".", "format", "(", "tag", ",", "time", "(", ")", "-", "t", ")", ")", "\n", "return", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cuge1995_Mesh-Attack.models.pointnet_util.pc_normalize": [[11, 18], ["numpy.mean", "numpy.max", "numpy.sqrt", "numpy.sum"], "function", ["None"], ["", "def", "pc_normalize", "(", "pc", ")", ":", "\n", "    ", "l", "=", "pc", ".", "shape", "[", "0", "]", "\n", "centroid", "=", "np", ".", "mean", "(", "pc", ",", "axis", "=", "0", ")", "\n", "pc", "=", "pc", "-", "centroid", "\n", "m", "=", "np", ".", "max", "(", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "pc", "**", "2", ",", "axis", "=", "1", ")", ")", ")", "\n", "pc", "=", "pc", "/", "m", "\n", "return", "pc", "\n", "\n"]], "home.repos.pwc.inspect_result.cuge1995_Mesh-Attack.models.pointnet_util.square_distance": [[19, 41], ["torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.matmul", "torch.matmul", "torch.matmul", "dst.permute", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "function", ["None"], ["", "def", "square_distance", "(", "src", ",", "dst", ")", ":", "\n", "    ", "\"\"\"\n    Calculate Euclid distance between each two points.\n\n    src^T * dst = xn * xm + yn * ym + zn * zm\uff1b\n    sum(src^2, dim=-1) = xn*xn + yn*yn + zn*zn;\n    sum(dst^2, dim=-1) = xm*xm + ym*ym + zm*zm;\n    dist = (xn - xm)^2 + (yn - ym)^2 + (zn - zm)^2\n         = sum(src**2,dim=-1)+sum(dst**2,dim=-1)-2*src^T*dst\n\n    Input:\n        src: source points, [B, N, C]\n        dst: target points, [B, M, C]\n    Output:\n        dist: per-point square distance, [B, N, M]\n    \"\"\"", "\n", "B", ",", "N", ",", "_", "=", "src", ".", "shape", "\n", "_", ",", "M", ",", "_", "=", "dst", ".", "shape", "\n", "dist", "=", "-", "2", "*", "torch", ".", "matmul", "(", "src", ",", "dst", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", "\n", "dist", "+=", "torch", ".", "sum", "(", "src", "**", "2", ",", "-", "1", ")", ".", "view", "(", "B", ",", "N", ",", "1", ")", "\n", "dist", "+=", "torch", ".", "sum", "(", "dst", "**", "2", ",", "-", "1", ")", ".", "view", "(", "B", ",", "1", ",", "M", ")", "\n", "return", "dist", "\n", "\n"]], "home.repos.pwc.inspect_result.cuge1995_Mesh-Attack.models.pointnet_util.index_points": [[43, 61], ["list", "list", "torch.arange().to().view().repeat", "torch.arange().to().view().repeat", "torch.arange().to().view().repeat", "len", "torch.arange().to().view", "torch.arange().to().view", "torch.arange().to().view", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange", "torch.arange", "torch.arange"], "function", ["None"], ["", "def", "index_points", "(", "points", ",", "idx", ")", ":", "\n", "    ", "\"\"\"\n\n    Input:\n        points: input points data, [B, N, C]\n        idx: sample index data, [B, S]\n    Return:\n        new_points:, indexed points data, [B, S, C]\n    \"\"\"", "\n", "device", "=", "points", ".", "device", "\n", "B", "=", "points", ".", "shape", "[", "0", "]", "\n", "view_shape", "=", "list", "(", "idx", ".", "shape", ")", "\n", "view_shape", "[", "1", ":", "]", "=", "[", "1", "]", "*", "(", "len", "(", "view_shape", ")", "-", "1", ")", "\n", "repeat_shape", "=", "list", "(", "idx", ".", "shape", ")", "\n", "repeat_shape", "[", "0", "]", "=", "1", "\n", "batch_indices", "=", "torch", ".", "arange", "(", "B", ",", "dtype", "=", "torch", ".", "long", ")", ".", "to", "(", "device", ")", ".", "view", "(", "view_shape", ")", ".", "repeat", "(", "repeat_shape", ")", "\n", "new_points", "=", "points", "[", "batch_indices", ",", "idx", ",", ":", "]", "\n", "return", "new_points", "\n", "\n"]], "home.repos.pwc.inspect_result.cuge1995_Mesh-Attack.models.pointnet_util.farthest_point_sample": [[63, 85], ["torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.randint().to", "torch.randint().to", "torch.randint().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "range", "torch.ones().to", "torch.ones().to", "torch.ones().to", "xyz[].view", "torch.sum", "torch.sum", "torch.sum", "torch.zeros", "torch.zeros", "torch.zeros", "torch.randint", "torch.randint", "torch.randint", "torch.arange", "torch.arange", "torch.arange", "torch.max", "torch.max", "torch.max", "torch.ones", "torch.ones", "torch.ones"], "function", ["None"], ["", "def", "farthest_point_sample", "(", "xyz", ",", "npoint", ")", ":", "\n", "    ", "\"\"\"\n    Input:\n        xyz: pointcloud data, [B, N, C]\n        npoint: number of samples\n    Return:\n        centroids: sampled pointcloud index, [B, npoint]\n    \"\"\"", "\n", "device", "=", "xyz", ".", "device", "\n", "B", ",", "N", ",", "C", "=", "xyz", ".", "shape", "\n", "centroids", "=", "torch", ".", "zeros", "(", "B", ",", "npoint", ",", "dtype", "=", "torch", ".", "long", ")", ".", "to", "(", "device", ")", "\n", "distance", "=", "torch", ".", "ones", "(", "B", ",", "N", ")", ".", "to", "(", "device", ")", "*", "1e10", "\n", "farthest", "=", "torch", ".", "randint", "(", "0", ",", "N", ",", "(", "B", ",", ")", ",", "dtype", "=", "torch", ".", "long", ")", ".", "to", "(", "device", ")", "\n", "batch_indices", "=", "torch", ".", "arange", "(", "B", ",", "dtype", "=", "torch", ".", "long", ")", ".", "to", "(", "device", ")", "\n", "for", "i", "in", "range", "(", "npoint", ")", ":", "\n", "        ", "centroids", "[", ":", ",", "i", "]", "=", "farthest", "\n", "centroid", "=", "xyz", "[", "batch_indices", ",", "farthest", ",", ":", "]", ".", "view", "(", "B", ",", "1", ",", "3", ")", "\n", "dist", "=", "torch", ".", "sum", "(", "(", "xyz", "-", "centroid", ")", "**", "2", ",", "-", "1", ")", "\n", "mask", "=", "dist", "<", "distance", "\n", "distance", "[", "mask", "]", "=", "dist", "[", "mask", "]", "\n", "farthest", "=", "torch", ".", "max", "(", "distance", ",", "-", "1", ")", "[", "1", "]", "\n", "", "return", "centroids", "\n", "\n"]], "home.repos.pwc.inspect_result.cuge1995_Mesh-Attack.models.pointnet_util.query_ball_point": [[87, 108], ["torch.arange().to().view().repeat", "torch.arange().to().view().repeat", "torch.arange().to().view().repeat", "pointnet_util.square_distance", "group_idx[].view().repeat", "torch.arange().to().view", "torch.arange().to().view", "torch.arange().to().view", "torch.arange().to().view().repeat.sort", "group_idx[].view", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange", "torch.arange", "torch.arange"], "function", ["home.repos.pwc.inspect_result.cuge1995_Mesh-Attack.models.pointnet_util.square_distance"], ["", "def", "query_ball_point", "(", "radius", ",", "nsample", ",", "xyz", ",", "new_xyz", ")", ":", "\n", "    ", "\"\"\"\n    Input:\n        radius: local region radius\n        nsample: max sample number in local region\n        xyz: all points, [B, N, C]\n        new_xyz: query points, [B, S, C]\n    Return:\n        group_idx: grouped points index, [B, S, nsample]\n    \"\"\"", "\n", "device", "=", "xyz", ".", "device", "\n", "B", ",", "N", ",", "C", "=", "xyz", ".", "shape", "\n", "_", ",", "S", ",", "_", "=", "new_xyz", ".", "shape", "\n", "group_idx", "=", "torch", ".", "arange", "(", "N", ",", "dtype", "=", "torch", ".", "long", ")", ".", "to", "(", "device", ")", ".", "view", "(", "1", ",", "1", ",", "N", ")", ".", "repeat", "(", "[", "B", ",", "S", ",", "1", "]", ")", "\n", "sqrdists", "=", "square_distance", "(", "new_xyz", ",", "xyz", ")", "\n", "group_idx", "[", "sqrdists", ">", "radius", "**", "2", "]", "=", "N", "\n", "group_idx", "=", "group_idx", ".", "sort", "(", "dim", "=", "-", "1", ")", "[", "0", "]", "[", ":", ",", ":", ",", ":", "nsample", "]", "\n", "group_first", "=", "group_idx", "[", ":", ",", ":", ",", "0", "]", ".", "view", "(", "B", ",", "S", ",", "1", ")", ".", "repeat", "(", "[", "1", ",", "1", ",", "nsample", "]", ")", "\n", "mask", "=", "group_idx", "==", "N", "\n", "group_idx", "[", "mask", "]", "=", "group_first", "[", "mask", "]", "\n", "return", "group_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.cuge1995_Mesh-Attack.models.pointnet_util.sample_and_group": [[110, 138], ["pointnet_util.farthest_point_sample", "pointnet_util.index_points", "pointnet_util.query_ball_point", "pointnet_util.index_points", "index_points.view", "pointnet_util.index_points", "torch.cat", "torch.cat", "torch.cat"], "function", ["home.repos.pwc.inspect_result.cuge1995_Mesh-Attack.models.pointnet_util.farthest_point_sample", "home.repos.pwc.inspect_result.cuge1995_Mesh-Attack.models.pointnet_util.index_points", "home.repos.pwc.inspect_result.cuge1995_Mesh-Attack.models.pointnet_util.query_ball_point", "home.repos.pwc.inspect_result.cuge1995_Mesh-Attack.models.pointnet_util.index_points", "home.repos.pwc.inspect_result.cuge1995_Mesh-Attack.models.pointnet_util.index_points"], ["", "def", "sample_and_group", "(", "npoint", ",", "radius", ",", "nsample", ",", "xyz", ",", "points", ",", "returnfps", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Input:\n        npoint:\n        radius:\n        nsample:\n        xyz: input points position data, [B, N, C]\n        points: input points data, [B, N, D]\n    Return:\n        new_xyz: sampled points position data, [B, 1, C]\n        new_points: sampled points data, [B, 1, N, C+D]\n    \"\"\"", "\n", "B", ",", "N", ",", "C", "=", "xyz", ".", "shape", "\n", "S", "=", "npoint", "\n", "fps_idx", "=", "farthest_point_sample", "(", "xyz", ",", "npoint", ")", "# [B, npoint, C]", "\n", "new_xyz", "=", "index_points", "(", "xyz", ",", "fps_idx", ")", "\n", "idx", "=", "query_ball_point", "(", "radius", ",", "nsample", ",", "xyz", ",", "new_xyz", ")", "\n", "grouped_xyz", "=", "index_points", "(", "xyz", ",", "idx", ")", "# [B, npoint, nsample, C]", "\n", "grouped_xyz_norm", "=", "grouped_xyz", "-", "new_xyz", ".", "view", "(", "B", ",", "S", ",", "1", ",", "C", ")", "\n", "if", "points", "is", "not", "None", ":", "\n", "        ", "grouped_points", "=", "index_points", "(", "points", ",", "idx", ")", "\n", "new_points", "=", "torch", ".", "cat", "(", "[", "grouped_xyz_norm", ",", "grouped_points", "]", ",", "dim", "=", "-", "1", ")", "# [B, npoint, nsample, C+D]", "\n", "", "else", ":", "\n", "        ", "new_points", "=", "grouped_xyz_norm", "\n", "", "if", "returnfps", ":", "\n", "        ", "return", "new_xyz", ",", "new_points", ",", "grouped_xyz", ",", "fps_idx", "\n", "", "else", ":", "\n", "        ", "return", "new_xyz", ",", "new_points", "\n", "\n"]], "home.repos.pwc.inspect_result.cuge1995_Mesh-Attack.models.pointnet_util.sample_and_group_all": [[140, 158], ["torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "xyz.view", "torch.cat", "torch.cat", "torch.cat", "torch.zeros", "torch.zeros", "torch.zeros", "points.view"], "function", ["None"], ["", "", "def", "sample_and_group_all", "(", "xyz", ",", "points", ")", ":", "\n", "    ", "\"\"\"\n    Input:\n        xyz: input points position data, [B, N, C]\n        points: input points data, [B, N, D]\n    Return:\n        new_xyz: sampled points position data, [B, 1, C]\n        new_points: sampled points data, [B, 1, N, C+D]\n    \"\"\"", "\n", "device", "=", "xyz", ".", "device", "\n", "B", ",", "N", ",", "C", "=", "xyz", ".", "shape", "\n", "new_xyz", "=", "torch", ".", "zeros", "(", "B", ",", "1", ",", "C", ")", ".", "to", "(", "device", ")", "\n", "grouped_xyz", "=", "xyz", ".", "view", "(", "B", ",", "1", ",", "N", ",", "C", ")", "\n", "if", "points", "is", "not", "None", ":", "\n", "        ", "new_points", "=", "torch", ".", "cat", "(", "[", "grouped_xyz", ",", "points", ".", "view", "(", "B", ",", "1", ",", "N", ",", "-", "1", ")", "]", ",", "dim", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "        ", "new_points", "=", "grouped_xyz", "\n", "", "return", "new_xyz", ",", "new_points", "\n", "\n"]], "home.repos.pwc.inspect_result.cuge1995_Mesh-Attack.models.pointnet.STNkd.__init__": [[13, 30], ["torch.Module.__init__", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.cuge1995_Mesh-Attack.models.pointnet.PointNetDenseCls.__init__"], ["    ", "def", "__init__", "(", "self", ",", "k", "=", "64", ")", ":", "\n", "        ", "super", "(", "STNkd", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "torch", ".", "nn", ".", "Conv1d", "(", "k", ",", "64", ",", "1", ")", "\n", "self", ".", "conv2", "=", "torch", ".", "nn", ".", "Conv1d", "(", "64", ",", "128", ",", "1", ")", "\n", "self", ".", "conv3", "=", "torch", ".", "nn", ".", "Conv1d", "(", "128", ",", "1024", ",", "1", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "1024", ",", "512", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "512", ",", "256", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "256", ",", "k", "*", "k", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm1d", "(", "64", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm1d", "(", "128", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm1d", "(", "1024", ")", "\n", "self", ".", "bn4", "=", "nn", ".", "BatchNorm1d", "(", "512", ")", "\n", "self", ".", "bn5", "=", "nn", ".", "BatchNorm1d", "(", "256", ")", "\n", "\n", "self", ".", "k", "=", "k", "\n", "\n"]], "home.repos.pwc.inspect_result.cuge1995_Mesh-Attack.models.pointnet.STNkd.forward": [[31, 49], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "x.view.view.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "pointnet.STNkd.fc3", "torch.autograd.Variable().view().repeat", "torch.autograd.Variable().view().repeat", "torch.autograd.Variable().view().repeat", "torch.autograd.Variable().view().repeat", "torch.autograd.Variable().view().repeat", "x.view.view.view", "x.view.view.size", "pointnet.STNkd.bn1", "pointnet.STNkd.bn2", "pointnet.STNkd.bn3", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "pointnet.STNkd.bn4", "pointnet.STNkd.bn5", "iden.cuda.cuda.cuda", "pointnet.STNkd.conv1", "pointnet.STNkd.conv2", "pointnet.STNkd.conv3", "pointnet.STNkd.fc1", "pointnet.STNkd.fc2", "torch.autograd.Variable().view", "torch.autograd.Variable().view", "torch.autograd.Variable().view", "torch.autograd.Variable().view", "torch.autograd.Variable().view", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.eye().flatten().astype", "numpy.eye().flatten", "numpy.eye"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "batchsize", "=", "x", ".", "size", "(", ")", "[", "0", "]", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "x", ")", ")", ")", "\n", "x", "=", "torch", ".", "max", "(", "x", ",", "2", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "1024", ")", "\n", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn4", "(", "self", ".", "fc1", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn5", "(", "self", ".", "fc2", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "fc3", "(", "x", ")", "\n", "\n", "iden", "=", "Variable", "(", "torch", ".", "from_numpy", "(", "np", ".", "eye", "(", "self", ".", "k", ")", ".", "flatten", "(", ")", ".", "astype", "(", "np", ".", "float32", ")", ")", ")", ".", "view", "(", "1", ",", "self", ".", "k", "*", "self", ".", "k", ")", ".", "repeat", "(", "batchsize", ",", "1", ")", "\n", "if", "x", ".", "is_cuda", ":", "\n", "            ", "iden", "=", "iden", ".", "cuda", "(", ")", "\n", "", "x", "=", "x", "+", "iden", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "self", ".", "k", ",", "self", ".", "k", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cuge1995_Mesh-Attack.models.pointnet.PointNetfeat.__init__": [[51, 64], ["torch.Module.__init__", "pointnet.STNkd", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "pointnet.STNkd"], "methods", ["home.repos.pwc.inspect_result.cuge1995_Mesh-Attack.models.pointnet.PointNetDenseCls.__init__"], ["    ", "def", "__init__", "(", "self", ",", "global_feat", "=", "True", ",", "feature_transform", "=", "True", ")", ":", "\n", "        ", "super", "(", "PointNetfeat", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stn", "=", "STNkd", "(", "k", "=", "3", ")", "\n", "self", ".", "conv1", "=", "torch", ".", "nn", ".", "Conv1d", "(", "3", ",", "64", ",", "1", ")", "\n", "self", ".", "conv2", "=", "torch", ".", "nn", ".", "Conv1d", "(", "64", ",", "128", ",", "1", ")", "\n", "self", ".", "conv3", "=", "torch", ".", "nn", ".", "Conv1d", "(", "128", ",", "1024", ",", "1", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm1d", "(", "64", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm1d", "(", "128", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm1d", "(", "1024", ")", "\n", "self", ".", "global_feat", "=", "global_feat", "\n", "self", ".", "feature_transform", "=", "feature_transform", "\n", "if", "self", ".", "feature_transform", ":", "\n", "            ", "self", ".", "fstn", "=", "STNkd", "(", "k", "=", "64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cuge1995_Mesh-Attack.models.pointnet.PointNetfeat.forward": [[65, 91], ["pointnet.PointNetfeat.stn", "x.view().repeat.view().repeat.transpose", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "x.view().repeat.view().repeat.transpose", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "pointnet.PointNetfeat.bn3", "x.view().repeat.view().repeat.view", "x.view().repeat.view().repeat.size", "pointnet.PointNetfeat.bn1", "pointnet.PointNetfeat.fstn", "x.view().repeat.view().repeat.transpose", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "x.view().repeat.view().repeat.transpose", "pointnet.PointNetfeat.bn2", "pointnet.PointNetfeat.conv3", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "x.view().repeat.view().repeat.view().repeat", "pointnet.PointNetfeat.conv1", "pointnet.PointNetfeat.conv2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "x.view().repeat.view().repeat.view"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "n_pts", "=", "x", ".", "size", "(", ")", "[", "2", "]", "\n", "trans", "=", "self", ".", "stn", "(", "x", ")", "\n", "x", "=", "x", ".", "transpose", "(", "2", ",", "1", ")", "\n", "x", "=", "torch", ".", "bmm", "(", "x", ",", "trans", ")", "\n", "x", "=", "x", ".", "transpose", "(", "2", ",", "1", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "\n", "if", "self", ".", "feature_transform", ":", "\n", "            ", "trans_feat", "=", "self", ".", "fstn", "(", "x", ")", "\n", "x", "=", "x", ".", "transpose", "(", "2", ",", "1", ")", "\n", "x", "=", "torch", ".", "bmm", "(", "x", ",", "trans_feat", ")", "\n", "x", "=", "x", ".", "transpose", "(", "2", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "trans_feat", "=", "None", "\n", "\n", "", "pointfeat", "=", "x", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "x", ")", ")", "\n", "x", "=", "torch", ".", "max", "(", "x", ",", "2", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "1024", ")", "\n", "if", "self", ".", "global_feat", ":", "\n", "            ", "return", "x", ",", "trans", ",", "trans_feat", "\n", "", "else", ":", "\n", "            ", "x", "=", "x", ".", "view", "(", "-", "1", ",", "1024", ",", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "n_pts", ")", "\n", "return", "torch", ".", "cat", "(", "[", "x", ",", "pointfeat", "]", ",", "1", ")", ",", "trans", ",", "trans_feat", "\n", "\n"]], "home.repos.pwc.inspect_result.cuge1995_Mesh-Attack.models.pointnet.PointNetCls.__init__": [[93, 104], ["torch.Module.__init__", "pointnet.PointNetfeat", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.cuge1995_Mesh-Attack.models.pointnet.PointNetDenseCls.__init__"], ["    ", "def", "__init__", "(", "self", ",", "k", "=", "40", ",", "feature_transform", "=", "True", ")", ":", "\n", "        ", "super", "(", "PointNetCls", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "feature_transform", "=", "feature_transform", "\n", "self", ".", "feat", "=", "PointNetfeat", "(", "global_feat", "=", "True", ",", "feature_transform", "=", "feature_transform", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "1024", ",", "512", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "512", ",", "256", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "256", ",", "k", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "0.3", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm1d", "(", "512", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm1d", "(", "256", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cuge1995_Mesh-Attack.models.pointnet.PointNetCls.forward": [[105, 112], ["pointnet.PointNetCls.feat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "pointnet.PointNetCls.fc3", "pointnet.PointNetCls.bn1", "pointnet.PointNetCls.bn2", "pointnet.PointNetCls.fc1", "pointnet.PointNetCls.dropout", "pointnet.PointNetCls.fc2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", ",", "trans", ",", "trans_feat", "=", "self", ".", "feat", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "fc1", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "dropout", "(", "self", ".", "fc2", "(", "x", ")", ")", ")", ")", "\n", "x", "=", "self", ".", "fc3", "(", "x", ")", "\n", "#x = F.log_softmax(x, dim=1)", "\n", "return", "x", ",", "trans_feat", "\n", "\n"]], "home.repos.pwc.inspect_result.cuge1995_Mesh-Attack.models.pointnet.PointNetDenseCls.__init__": [[115, 127], ["torch.Module.__init__", "pointnet.PointNetfeat", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.cuge1995_Mesh-Attack.models.pointnet.PointNetDenseCls.__init__"], ["    ", "def", "__init__", "(", "self", ",", "k", "=", "40", ",", "feature_transform", "=", "True", ")", ":", "\n", "        ", "super", "(", "PointNetDenseCls", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "k", "=", "k", "\n", "self", ".", "feature_transform", "=", "feature_transform", "\n", "self", ".", "feat", "=", "PointNetfeat", "(", "global_feat", "=", "True", ",", "feature_transform", "=", "feature_transform", ")", "\n", "self", ".", "conv1", "=", "torch", ".", "nn", ".", "Conv1d", "(", "1088", ",", "512", ",", "1", ")", "\n", "self", ".", "conv2", "=", "torch", ".", "nn", ".", "Conv1d", "(", "512", ",", "256", ",", "1", ")", "\n", "self", ".", "conv3", "=", "torch", ".", "nn", ".", "Conv1d", "(", "256", ",", "128", ",", "1", ")", "\n", "self", ".", "conv4", "=", "torch", ".", "nn", ".", "Conv1d", "(", "128", ",", "self", ".", "k", ",", "1", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm1d", "(", "512", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm1d", "(", "256", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm1d", "(", "128", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cuge1995_Mesh-Attack.models.pointnet.PointNetDenseCls.forward": [[128, 140], ["pointnet.PointNetDenseCls.feat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "pointnet.PointNetDenseCls.conv4", "x.view.view.transpose().contiguous", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "x.view.view.view", "x.view.view.size", "x.view.view.size", "pointnet.PointNetDenseCls.bn1", "pointnet.PointNetDenseCls.bn2", "pointnet.PointNetDenseCls.bn3", "x.view.view.view", "pointnet.PointNetDenseCls.conv1", "pointnet.PointNetDenseCls.conv2", "pointnet.PointNetDenseCls.conv3", "x.view.view.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "batchsize", "=", "x", ".", "size", "(", ")", "[", "0", "]", "\n", "n_pts", "=", "x", ".", "size", "(", ")", "[", "2", "]", "\n", "x", ",", "trans", ",", "trans_feat", "=", "self", ".", "feat", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "conv4", "(", "x", ")", "\n", "x", "=", "x", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "x", "=", "F", ".", "log_softmax", "(", "x", ".", "view", "(", "-", "1", ",", "self", ".", "k", ")", ",", "dim", "=", "-", "1", ")", "\n", "x", "=", "x", ".", "view", "(", "batchsize", ",", "n_pts", ",", "self", ".", "k", ")", "\n", "return", "x", ",", "trans", ",", "trans_feat", "\n", "\n"]], "home.repos.pwc.inspect_result.cuge1995_Mesh-Attack.models.pointnet.feature_transform_regularizer": [[141, 149], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "trans.size", "trans.size", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "I.cuda.cuda", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "trans.transpose"], "function", ["None"], ["", "", "def", "feature_transform_regularizer", "(", "trans", ")", ":", "\n", "    ", "d", "=", "trans", ".", "size", "(", ")", "[", "1", "]", "\n", "batchsize", "=", "trans", ".", "size", "(", ")", "[", "0", "]", "\n", "I", "=", "torch", ".", "eye", "(", "d", ")", "[", "None", ",", ":", ",", ":", "]", "\n", "if", "trans", ".", "is_cuda", ":", "\n", "        ", "I", "=", "I", ".", "cuda", "(", ")", "\n", "", "loss", "=", "torch", ".", "mean", "(", "torch", ".", "norm", "(", "torch", ".", "bmm", "(", "trans", ",", "trans", ".", "transpose", "(", "2", ",", "1", ")", ")", "-", "I", ",", "dim", "=", "(", "1", ",", "2", ")", ")", ")", "\n", "return", "loss", "\n", "\n"]]}