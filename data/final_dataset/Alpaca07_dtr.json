{"home.repos.pwc.inspect_result.Alpaca07_dtr.None.eval.val": [[39, 87], ["print", "network.parameters", "network.eval", "torch.utils.data.DataLoader", "iter", "len", "range", "converter.decode", "zip", "open", "iter.next", "cpu_images.size", "utils.loadData", "converter.encode", "utils.loadData", "utils.loadData", "network", "torch.autograd.Variable", "preds.transpose().contiguous().view.max", "preds.transpose().contiguous().view.transpose().contiguous().view", "converter.decode", "zip", "open.close", "print", "float", "int", "torch.IntTensor", "preds.transpose().contiguous().view.transpose().contiguous", "open.write", "target.lower", "preds.transpose().contiguous().view.size", "preds.transpose().contiguous().view.transpose"], "function", ["home.repos.pwc.inspect_result.Alpaca07_dtr.None.utils.strLabelConverter.decode", "home.repos.pwc.inspect_result.Alpaca07_dtr.None.utils.loadData", "home.repos.pwc.inspect_result.Alpaca07_dtr.None.utils.strLabelConverter.encode", "home.repos.pwc.inspect_result.Alpaca07_dtr.None.utils.loadData", "home.repos.pwc.inspect_result.Alpaca07_dtr.None.utils.loadData", "home.repos.pwc.inspect_result.Alpaca07_dtr.None.utils.strLabelConverter.decode"], ["", "", "def", "val", "(", "network", ",", "dataset", ",", "dataset_name", ")", ":", "\n", "    ", "print", "(", "'Starting val of '", "+", "dataset_name", "+", "' ...'", ")", "\n", "\n", "for", "p", "in", "network", ".", "parameters", "(", ")", ":", "\n", "        ", "p", ".", "requires_grad", "=", "False", "\n", "\n", "", "network", ".", "eval", "(", ")", "\n", "data_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "shuffle", "=", "True", ",", "batch_size", "=", "_batch_size", ",", "num_workers", "=", "int", "(", "workers", ")", ")", "\n", "val_iter", "=", "iter", "(", "data_loader", ")", "\n", "\n", "n_correct", "=", "0", "\n", "\n", "max_iter", "=", "len", "(", "data_loader", ")", "\n", "\n", "if", "generate_txt_file", ":", "\n", "        ", "result_txt_file", "=", "open", "(", "'./test_results/'", "+", "dataset_name", "+", "'_results.txt'", ",", "'w+'", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "max_iter", ")", ":", "\n", "        ", "data", "=", "val_iter", ".", "next", "(", ")", "\n", "i", "+=", "1", "\n", "cpu_images", ",", "cpu_texts", ",", "image_name", "=", "data", "\n", "batch_size", "=", "cpu_images", ".", "size", "(", "0", ")", "\n", "utils", ".", "loadData", "(", "image", ",", "cpu_images", ")", "\n", "t", ",", "le", "=", "converter", ".", "encode", "(", "cpu_texts", ")", "\n", "utils", ".", "loadData", "(", "text", ",", "t", ")", "\n", "utils", ".", "loadData", "(", "length", ",", "le", ")", "\n", "\n", "preds", "=", "network", "(", "image", ")", "\n", "preds_size", "=", "Variable", "(", "torch", ".", "IntTensor", "(", "[", "preds", ".", "size", "(", "0", ")", "]", "*", "batch_size", ")", ")", "\n", "\n", "_", ",", "preds", "=", "preds", ".", "max", "(", "2", ")", "\n", "preds", "=", "preds", ".", "transpose", "(", "1", ",", "0", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "sim_preds", "=", "converter", ".", "decode", "(", "preds", ".", "data", ",", "preds_size", ".", "data", ",", "raw", "=", "False", ")", "\n", "for", "pred", ",", "target", ",", "im_name", "in", "zip", "(", "sim_preds", ",", "cpu_texts", ",", "image_name", ")", ":", "\n", "            ", "if", "generate_txt_file", ":", "\n", "                ", "result_txt_file", ".", "write", "(", "im_name", "+", "', \"'", "+", "pred", "+", "'\"\\r\\n'", ")", "\n", "", "if", "pred", "==", "target", ".", "lower", "(", ")", ":", "\n", "                ", "n_correct", "+=", "1", "\n", "\n", "", "", "", "if", "generate_txt_file", ":", "\n", "        ", "result_txt_file", ".", "close", "(", ")", "\n", "\n", "", "raw_preds", "=", "converter", ".", "decode", "(", "preds", ".", "data", ",", "preds_size", ".", "data", ",", "raw", "=", "True", ")", "\n", "for", "raw_pred", ",", "pred", ",", "gt", "in", "zip", "(", "raw_preds", ",", "sim_preds", ",", "cpu_texts", ")", ":", "\n", "        ", "print", "(", "'%-20s => %-20s, gt: %-20s'", "%", "(", "raw_pred", ",", "pred", ",", "gt", ")", ")", "\n", "\n", "", "accuracy", "=", "n_correct", "/", "float", "(", "max_iter", "*", "_batch_size", ")", "\n", "return", "accuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.Alpaca07_dtr.None.train.weights_init": [[90, 97], ["classname.find", "m.weight.data.normal_", "classname.find", "m.weight.data.normal_", "m.bias.data.fill_"], "function", ["None"], ["def", "weights_init", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0.0", ",", "0.02", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "1.0", ",", "0.02", ")", "\n", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Alpaca07_dtr.None.train.val": [[128, 177], ["print", "models.parameters", "net.eval", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "iter", "utils.averager", "min", "range", "zip", "print", "print", "len", "iter.next", "cpu_images.size", "utils.loadData", "converter.encode", "utils.loadData", "utils.loadData", "models", "torch.autograd.Variable", "utils.averager.add", "preds.transpose().contiguous().view.max", "preds.transpose().contiguous().view.transpose().contiguous().view", "converter.decode", "zip", "converter.decode", "print", "float", "int", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "criterion", "preds.transpose().contiguous().view.transpose().contiguous", "target.lower", "loss_avg.val", "preds.transpose().contiguous().view.size", "preds.transpose().contiguous().view.transpose"], "function", ["home.repos.pwc.inspect_result.Alpaca07_dtr.None.utils.loadData", "home.repos.pwc.inspect_result.Alpaca07_dtr.None.utils.strLabelConverter.encode", "home.repos.pwc.inspect_result.Alpaca07_dtr.None.utils.loadData", "home.repos.pwc.inspect_result.Alpaca07_dtr.None.utils.loadData", "home.repos.pwc.inspect_result.Alpaca07_dtr.None.utils.averager.add", "home.repos.pwc.inspect_result.Alpaca07_dtr.None.utils.strLabelConverter.decode", "home.repos.pwc.inspect_result.Alpaca07_dtr.None.utils.strLabelConverter.decode", "home.repos.pwc.inspect_result.Alpaca07_dtr.None.utils.averager.val"], ["def", "val", "(", "net", ",", "dataset", ",", "criterion", ",", "best_accuracy", ",", "epoch", ",", "i", ",", "best_epoch", ",", "best_i", ",", "max_iter", "=", "100", ")", ":", "\n", "    ", "print", "(", "'Validating...'", ")", "\n", "\n", "for", "para", "in", "crnn", ".", "parameters", "(", ")", ":", "\n", "        ", "para", ".", "requires_grad", "=", "False", "\n", "\n", "", "net", ".", "eval", "(", ")", "\n", "data_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset", ",", "shuffle", "=", "True", ",", "batch_size", "=", "opt", ".", "batch_size", ",", "num_workers", "=", "int", "(", "opt", ".", "workers", ")", ")", "\n", "val_iter", "=", "iter", "(", "data_loader", ")", "\n", "\n", "n_correct", "=", "0", "\n", "loss_avg_", "=", "utils", ".", "averager", "(", ")", "\n", "\n", "max_iter", "=", "min", "(", "max_iter", ",", "len", "(", "data_loader", ")", ")", "\n", "for", "j", "in", "range", "(", "max_iter", ")", ":", "\n", "        ", "data", "=", "val_iter", ".", "next", "(", ")", "\n", "j", "+=", "1", "\n", "cpu_images", ",", "cpu_texts", ",", "_", "=", "data", "\n", "batch_size", "=", "cpu_images", ".", "size", "(", "0", ")", "\n", "utils", ".", "loadData", "(", "image", ",", "cpu_images", ")", "\n", "t", ",", "length_", "=", "converter", ".", "encode", "(", "cpu_texts", ")", "\n", "utils", ".", "loadData", "(", "text", ",", "t", ")", "\n", "utils", ".", "loadData", "(", "length", ",", "length_", ")", "\n", "\n", "preds", "=", "crnn", "(", "image", ")", "\n", "preds_size", "=", "Variable", "(", "torch", ".", "IntTensor", "(", "[", "preds", ".", "size", "(", "0", ")", "]", "*", "batch_size", ")", ")", "\n", "cost_", "=", "criterion", "(", "preds", ",", "text", ",", "preds_size", ",", "length", ")", "/", "batch_size", "\n", "loss_avg_", ".", "add", "(", "cost_", ")", "\n", "\n", "_", ",", "preds", "=", "preds", ".", "max", "(", "2", ")", "\n", "preds", "=", "preds", ".", "transpose", "(", "1", ",", "0", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "sim_preds", "=", "converter", ".", "decode", "(", "preds", ".", "data", ",", "preds_size", ".", "data", ",", "raw", "=", "False", ")", "\n", "for", "pred", ",", "target", "in", "zip", "(", "sim_preds", ",", "cpu_texts", ")", ":", "\n", "            ", "if", "pred", "==", "target", ".", "lower", "(", ")", ":", "\n", "                ", "n_correct", "+=", "1", "\n", "\n", "", "", "", "raw_preds", "=", "converter", ".", "decode", "(", "preds", ".", "data", ",", "preds_size", ".", "data", ",", "raw", "=", "True", ")", "[", ":", "opt", ".", "test_display_number", "]", "\n", "for", "raw_pred", ",", "pred", ",", "gt", "in", "zip", "(", "raw_preds", ",", "sim_preds", ",", "cpu_texts", ")", ":", "\n", "        ", "print", "(", "'%-20s => %-20s, gt: %-20s'", "%", "(", "raw_pred", ",", "pred", ",", "gt", ")", ")", "\n", "\n", "", "accuracy", "=", "n_correct", "/", "float", "(", "max_iter", "*", "opt", ".", "batch_size", ")", "\n", "print", "(", "'Test loss: %f, accuray: %f'", "%", "(", "loss_avg", ".", "val", "(", ")", ",", "accuracy", ")", ")", "\n", "if", "accuracy", ">", "best_accuracy", ":", "\n", "        ", "best_accuracy", "=", "accuracy", "\n", "best_epoch", "=", "epoch", "\n", "best_i", "=", "i", "\n", "", "print", "(", "'Best accuracy: '", ",", "best_accuracy", ",", "' from ecpoch '", ",", "best_epoch", ",", "', iteration '", ",", "best_i", ")", "\n", "return", "best_accuracy", ",", "best_epoch", ",", "best_i", "\n", "\n"]], "home.repos.pwc.inspect_result.Alpaca07_dtr.None.train.train_batch": [[179, 195], ["train_iter.next", "cpu_images.size", "utils.loadData", "converter.encode", "utils.loadData", "utils.loadData", "model", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "models.zero_grad", "loss.backward", "optimizer.step", "criterion", "model.size"], "function", ["home.repos.pwc.inspect_result.Alpaca07_dtr.None.utils.loadData", "home.repos.pwc.inspect_result.Alpaca07_dtr.None.utils.strLabelConverter.encode", "home.repos.pwc.inspect_result.Alpaca07_dtr.None.utils.loadData", "home.repos.pwc.inspect_result.Alpaca07_dtr.None.utils.loadData"], ["", "def", "train_batch", "(", "model", ",", "criterion", ",", "optimizer", ")", ":", "\n", "    ", "data", "=", "train_iter", ".", "next", "(", ")", "\n", "cpu_images", ",", "cpu_texts", "=", "data", "\n", "batch_size", "=", "cpu_images", ".", "size", "(", "0", ")", "\n", "utils", ".", "loadData", "(", "image", ",", "cpu_images", ")", "\n", "t", ",", "length_", "=", "converter", ".", "encode", "(", "cpu_texts", ")", "\n", "utils", ".", "loadData", "(", "text", ",", "t", ")", "\n", "utils", ".", "loadData", "(", "length", ",", "length_", ")", "\n", "\n", "preds", "=", "model", "(", "image", ")", "\n", "preds_size", "=", "torch", ".", "IntTensor", "(", "[", "preds", ".", "size", "(", "0", ")", "]", "*", "batch_size", ")", "\n", "loss", "=", "criterion", "(", "preds", ",", "text", ",", "preds_size", ",", "length", ")", "/", "batch_size", "\n", "crnn", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.Alpaca07_dtr.None.dataset.TestDataset.__init__": [[11, 24], ["os.path.exists", "dataset.TestDataset._load_image_list", "dataset.TestDataset._list_file.rindex"], "methods", ["home.repos.pwc.inspect_result.Alpaca07_dtr.None.dataset.TestDataset._load_image_list"], ["    ", "def", "__init__", "(", "self", ",", "list_file", "=", "None", ",", "alphabet", "=", "None", ",", "case_senstive", "=", "False", ",", "\n", "colored", "=", "False", ",", "transform", "=", "None", ",", "target_transform", "=", "None", ")", ":", "\n", "        ", "self", ".", "_list_file", "=", "list_file", "\n", "self", ".", "_root_dir", "=", "self", ".", "_list_file", "[", "0", ":", "self", ".", "_list_file", ".", "rindex", "(", "'/'", ")", "]", "\n", "self", ".", "_alphabet", "=", "alphabet", "\n", "self", ".", "_case_senstive", "=", "case_senstive", "\n", "self", ".", "_colored", "=", "colored", "\n", "self", ".", "_transform", "=", "transform", "\n", "self", ".", "_target_transform", "=", "target_transform", "\n", "\n", "assert", "os", ".", "path", ".", "exists", "(", "list_file", ")", ",", "'List file does not exist: {}'", ".", "format", "(", "list_file", ")", "\n", "\n", "self", ".", "_ims_list", "=", "self", ".", "_load_image_list", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Alpaca07_dtr.None.dataset.TestDataset.__len__": [[25, 27], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_ims_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Alpaca07_dtr.None.dataset.TestDataset.__getitem__": [[28, 42], ["os.path.join", "PIL.Image.open().convert", "PIL.Image.open().convert", "dataset.TestDataset._transform", "dataset.TestDataset._target_transform", "PIL.Image.open", "PIL.Image.open"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "im_name", ",", "label", "=", "self", ".", "_ims_list", "[", "index", "]", "\n", "im_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_root_dir", ",", "im_name", ")", "\n", "if", "not", "self", ".", "_colored", ":", "\n", "            ", "im", "=", "Image", ".", "open", "(", "im_path", ")", ".", "convert", "(", "'L'", ")", "\n", "", "else", ":", "\n", "            ", "im", "=", "Image", ".", "open", "(", "im_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n", "", "if", "self", ".", "_transform", "is", "not", "None", ":", "\n", "            ", "im", "=", "self", ".", "_transform", "(", "im", ")", "\n", "", "if", "self", ".", "_target_transform", "is", "not", "None", ":", "\n", "            ", "label", "=", "self", ".", "_target_transform", "(", "label", ")", "\n", "", "data", "=", "(", "im", ",", "label", ",", "im_name", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.Alpaca07_dtr.None.dataset.TestDataset._load_image_list": [[43, 59], ["os.path.exists", "open", "f.readlines", "dataset.TestDataset._extra_items", "dataset.TestDataset._label_filter", "ims_list.append", "len", "line.strip"], "methods", ["home.repos.pwc.inspect_result.Alpaca07_dtr.None.dataset.TestDataset._extra_items", "home.repos.pwc.inspect_result.Alpaca07_dtr.None.dataset.TestDataset._label_filter"], ["", "def", "_load_image_list", "(", "self", ")", ":", "\n", "        ", "assert", "os", ".", "path", ".", "exists", "(", "self", ".", "_list_file", ")", ",", "'Path does not exist: {}'", ".", "format", "(", "self", ".", "_list_file", ")", "\n", "ims_list", "=", "[", "]", "\n", "with", "open", "(", "self", ".", "_list_file", ")", "as", "f", ":", "\n", "            ", "n", "=", "0", "\n", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "\n", "                ", "n", "+=", "1", "\n", "if", "not", "len", "(", "line", ".", "strip", "(", ")", ")", ":", "\n", "                    ", "continue", "\n", "", "name", ",", "label", "=", "self", ".", "_extra_items", "(", "line", ")", "\n", "label", "=", "self", ".", "_label_filter", "(", "label", ")", "\n", "if", "not", "label", ":", "\n", "                    ", "continue", "\n", "", "ims_list", ".", "append", "(", "[", "name", ",", "label", "]", ")", "\n", "\n", "", "", "return", "ims_list", "\n", "\n"]], "home.repos.pwc.inspect_result.Alpaca07_dtr.None.dataset.TestDataset._extra_items": [[60, 68], ["str_.split", "dataset.TestDataset._label_filter", "im_name[].isalnum"], "methods", ["home.repos.pwc.inspect_result.Alpaca07_dtr.None.dataset.TestDataset._label_filter"], ["", "def", "_extra_items", "(", "self", ",", "str_", ")", ":", "\n", "        ", "items", "=", "str_", ".", "split", "(", "' '", ")", "\n", "im_name", ",", "label", "=", "items", "[", "0", "]", ",", "items", "[", "1", "]", "\n", "im_name", "=", "im_name", "if", "im_name", "[", "-", "1", "]", ".", "isalnum", "(", ")", "else", "im_name", "[", ":", "-", "1", "]", "\n", "label", "=", "label", "[", "1", ":", "-", "2", "]", "\n", "\n", "label", "=", "self", ".", "_label_filter", "(", "label", ")", "\n", "return", "im_name", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.Alpaca07_dtr.None.dataset.TestDataset._label_filter": [[69, 75], ["isinstance", "label.lower.lower.lower"], "methods", ["None"], ["", "def", "_label_filter", "(", "self", ",", "label", ")", ":", "\n", "        ", "assert", "isinstance", "(", "label", ",", "str", ")", ",", "'Label is not a String.'", "\n", "if", "not", "self", ".", "_case_senstive", ":", "\n", "            ", "label", "=", "label", ".", "lower", "(", ")", "\n", "", "label", "=", "''", ".", "join", "(", "[", "x", "for", "x", "in", "label", "if", "x", "in", "self", ".", "_alphabet", "]", ")", "\n", "return", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.Alpaca07_dtr.None.dataset.LMDBDataset.__init__": [[79, 98], ["lmdb.open", "print", "sys.exit", "dataset.LMDBDataset.env.begin", "int", "txn.get"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root", "=", "None", ",", "transform", "=", "None", ",", "target_transform", "=", "None", ")", ":", "\n", "        ", "self", ".", "env", "=", "lmdb", ".", "open", "(", "\n", "root", ",", "\n", "max_readers", "=", "1", ",", "\n", "readonly", "=", "True", ",", "\n", "lock", "=", "False", ",", "\n", "readahead", "=", "False", ",", "\n", "meminit", "=", "False", ")", "\n", "\n", "if", "not", "self", ".", "env", ":", "\n", "            ", "print", "(", "'cannot creat lmdb from %s'", "%", "root", ")", "\n", "sys", ".", "exit", "(", "0", ")", "\n", "\n", "", "with", "self", ".", "env", ".", "begin", "(", "write", "=", "False", ")", "as", "txn", ":", "\n", "            ", "samples", "=", "int", "(", "txn", ".", "get", "(", "'num-samples'", ".", "encode", "(", ")", ")", ")", "\n", "self", ".", "nSamples", "=", "samples", "\n", "\n", "", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "\n"]], "home.repos.pwc.inspect_result.Alpaca07_dtr.None.dataset.LMDBDataset.__len__": [[99, 101], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "nSamples", "\n", "\n"]], "home.repos.pwc.inspect_result.Alpaca07_dtr.None.dataset.LMDBDataset.__getitem__": [[102, 137], ["len", "dataset.LMDBDataset.env.begin", "txn.get", "six.BytesIO", "six.BytesIO.write", "six.BytesIO.seek", "str", "img_key.encode", "PIL.Image.open().convert", "dataset.LMDBDataset.transform", "txn.get", "c.isalnum", "dataset.LMDBDataset.target_transform", "print", "label_key.encode", "PIL.Image.open"], "methods", ["home.repos.pwc.inspect_result.Alpaca07_dtr.None.utils.strLabelConverter.encode", "home.repos.pwc.inspect_result.Alpaca07_dtr.None.utils.strLabelConverter.encode"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "assert", "index", "<=", "len", "(", "self", ")", ",", "'index range error'", "\n", "index", "+=", "1", "\n", "with", "self", ".", "env", ".", "begin", "(", "write", "=", "False", ")", "as", "txn", ":", "\n", "            ", "img_key", "=", "'image-%09d'", "%", "index", "\n", "imgbuf", "=", "txn", ".", "get", "(", "img_key", ".", "encode", "(", ")", ")", "\n", "\n", "buf", "=", "six", ".", "BytesIO", "(", ")", "\n", "buf", ".", "write", "(", "imgbuf", ")", "\n", "buf", ".", "seek", "(", "0", ")", "\n", "try", ":", "\n", "                ", "img", "=", "Image", ".", "open", "(", "buf", ")", ".", "convert", "(", "'L'", ")", "\n", "", "except", "IOError", ":", "\n", "                ", "print", "(", "'Corrupted image for %d'", "%", "index", ")", "\n", "return", "self", "[", "index", "+", "1", "]", "\n", "\n", "", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "                ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "label_key", "=", "'label-%09d'", "%", "index", "\n", "label", "=", "str", "(", "txn", ".", "get", "(", "label_key", ".", "encode", "(", ")", ")", ")", "\n", "\n", "label", "=", "label", "[", "2", ":", "-", "1", "]", "\n", "label_new", "=", "''", "\n", "for", "c", "in", "label", ":", "\n", "                ", "if", "c", ".", "isalnum", "(", ")", ":", "\n", "                    ", "label_new", "+=", "c", "\n", "\n", "", "", "label", "=", "label_new", "\n", "\n", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "                ", "label", "=", "self", ".", "target_transform", "(", "label", ")", "\n", "\n", "", "", "data", "=", "(", "img", ",", "label", ")", "\n", "return", "data", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Alpaca07_dtr.None.utils.ResizeNormalize.__init__": [[11, 16], ["torchvision.ToTensor"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "colored", "=", "False", ",", "interpolation", "=", "Image", ".", "BILINEAR", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "self", ".", "colored", "=", "colored", "\n", "self", ".", "interpolation", "=", "interpolation", "\n", "self", ".", "toTensor", "=", "transforms", ".", "ToTensor", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Alpaca07_dtr.None.utils.ResizeNormalize.__call__": [[17, 25], ["utils.ResizeNormalize.resize", "utils.ResizeNormalize.toTensor", "utils.ResizeNormalize.sub_().div_", "utils.ResizeNormalize.sub_"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "img", "=", "img", ".", "resize", "(", "self", ".", "size", ",", "self", ".", "interpolation", ")", "\n", "img", "=", "self", ".", "toTensor", "(", "img", ")", "\n", "if", "not", "self", ".", "colored", ":", "\n", "            ", "img", ".", "sub_", "(", "0.5", ")", ".", "div_", "(", "0.5", ")", "\n", "", "else", ":", "\n", "            ", "pass", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.Alpaca07_dtr.None.utils.AlignCollate.__init__": [[29, 34], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "im_h", "=", "32", ",", "im_w", "=", "100", ",", "keep_ratio", "=", "False", ",", "min_ratio", "=", "1", ")", ":", "\n", "        ", "self", ".", "im_h", "=", "im_h", "\n", "self", ".", "im_w", "=", "im_w", "\n", "self", ".", "keep_ratio", "=", "keep_ratio", "\n", "self", ".", "min_ratio", "=", "min_ratio", "\n", "\n"]], "home.repos.pwc.inspect_result.Alpaca07_dtr.None.utils.AlignCollate.__call__": [[35, 55], ["zip", "utils.ResizeNormalize", "torch.cat", "ratios.sort", "int", "max", "ResizeNormalize.", "ratios.append", "numpy.floor", "t.unsqueeze", "float"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "batch", ")", ":", "\n", "        ", "images", ",", "labels", "=", "zip", "(", "*", "batch", ")", "\n", "\n", "im_h", "=", "self", ".", "im_h", "\n", "im_w", "=", "self", ".", "im_w", "\n", "if", "self", ".", "keep_ratio", ":", "\n", "            ", "ratios", "=", "[", "]", "\n", "for", "image", "in", "images", ":", "\n", "                ", "w", ",", "h", "=", "image", ".", "size", "\n", "ratios", ".", "append", "(", "w", "/", "float", "(", "h", ")", ")", "\n", "", "ratios", ".", "sort", "(", ")", "\n", "max_ratio", "=", "ratios", "[", "-", "1", "]", "\n", "im_w", "=", "int", "(", "np", ".", "floor", "(", "max_ratio", "*", "im_h", ")", ")", "\n", "im_w", "=", "max", "(", "im_h", "*", "self", ".", "min_ratio", ",", "im_w", ")", "\n", "\n", "", "transform", "=", "ResizeNormalize", "(", "size", "=", "(", "im_w", ",", "im_h", ")", ")", "\n", "images", "=", "[", "transform", "(", "image", ")", "for", "image", "in", "images", "]", "\n", "images", "=", "torch", ".", "cat", "(", "[", "t", ".", "unsqueeze", "(", "0", ")", "for", "t", "in", "images", "]", ",", "0", ")", "\n", "\n", "return", "images", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.Alpaca07_dtr.None.utils.strLabelConverter.__init__": [[68, 78], ["enumerate", "alphabet.lower.lower.lower"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "alphabet", ",", "ignore_case", "=", "True", ")", ":", "\n", "        ", "self", ".", "_ignore_case", "=", "ignore_case", "\n", "if", "self", ".", "_ignore_case", ":", "\n", "            ", "alphabet", "=", "alphabet", ".", "lower", "(", ")", "\n", "", "self", ".", "alphabet", "=", "alphabet", "+", "'-'", "# for `-1` index", "\n", "\n", "self", ".", "dict", "=", "{", "}", "\n", "for", "i", ",", "char", "in", "enumerate", "(", "alphabet", ")", ":", "\n", "# NOTE: 0 is reserved for 'blank' required by wrap_ctc", "\n", "            ", "self", ".", "dict", "[", "char", "]", "=", "i", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.Alpaca07_dtr.None.utils.strLabelConverter.encode": [[79, 109], ["isinstance", "isinstance", "torch.IntTensor", "torch.IntTensor", "len", "utils.strLabelConverter.encode", "len", "char.lower"], "methods", ["home.repos.pwc.inspect_result.Alpaca07_dtr.None.utils.strLabelConverter.encode"], ["", "", "def", "encode", "(", "self", ",", "text", ")", ":", "\n", "        ", "\"\"\"Support batch or single str.\n\n        Args:\n            text (str or list of str): texts to convert.\n\n        Returns:\n            torch.IntTensor [length_0 + length_1 + ... length_{n - 1}]: encoded texts.\n            torch.IntTensor [n]: length of each text.\n        \"\"\"", "\n", "if", "isinstance", "(", "text", ",", "str", ")", ":", "\n", "# print(text)", "\n", "            ", "text_new", "=", "text", "\n", "# flag = False", "\n", "# for c in text:", "\n", "#     if flag and c != '\\'':", "\n", "#         text_new += c", "\n", "#     if c == '\\'':", "\n", "#         flag = not flag", "\n", "# print(text_new)", "\n", "text", "=", "[", "\n", "self", ".", "dict", "[", "char", ".", "lower", "(", ")", "if", "self", ".", "_ignore_case", "else", "char", "]", "\n", "for", "char", "in", "text_new", "\n", "]", "\n", "length", "=", "[", "len", "(", "text", ")", "]", "\n", "", "elif", "isinstance", "(", "text", ",", "collections", ".", "Iterable", ")", ":", "\n", "            ", "length", "=", "[", "len", "(", "s", ")", "for", "s", "in", "text", "]", "\n", "text", "=", "''", ".", "join", "(", "text", ")", "\n", "text", ",", "_", "=", "self", ".", "encode", "(", "text", ")", "\n", "", "return", "(", "torch", ".", "IntTensor", "(", "text", ")", ",", "torch", ".", "IntTensor", "(", "length", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Alpaca07_dtr.None.utils.strLabelConverter.decode": [[110, 146], ["length.numel", "range", "t.numel", "t.numel", "range", "t.numel", "length.sum", "t.numel", "length.sum", "length.numel", "texts.append", "utils.strLabelConverter.decode", "char_list.append", "torch.IntTensor"], "methods", ["home.repos.pwc.inspect_result.Alpaca07_dtr.None.utils.strLabelConverter.decode"], ["", "def", "decode", "(", "self", ",", "t", ",", "length", ",", "raw", "=", "False", ")", ":", "\n", "        ", "\"\"\"Decode encoded texts back into strs.\n\n        Args:\n            torch.IntTensor [length_0 + length_1 + ... length_{n - 1}]: encoded texts.\n            torch.IntTensor [n]: length of each text.\n\n        Raises:\n            AssertionError: when the texts and its length does not match.\n\n        Returns:\n            text (str or list of str): texts to convert.\n        \"\"\"", "\n", "if", "length", ".", "numel", "(", ")", "==", "1", ":", "\n", "            ", "length", "=", "length", "[", "0", "]", "\n", "assert", "t", ".", "numel", "(", ")", "==", "length", ",", "\"text with length: {} does not match declared length: {}\"", ".", "format", "(", "t", ".", "numel", "(", ")", ",", "length", ")", "\n", "if", "raw", ":", "\n", "                ", "return", "''", ".", "join", "(", "[", "self", ".", "alphabet", "[", "i", "-", "1", "]", "for", "i", "in", "t", "]", ")", "\n", "", "else", ":", "\n", "                ", "char_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "length", ")", ":", "\n", "                    ", "if", "t", "[", "i", "]", "!=", "0", "and", "(", "not", "(", "i", ">", "0", "and", "t", "[", "i", "-", "1", "]", "==", "t", "[", "i", "]", ")", ")", ":", "\n", "                        ", "char_list", ".", "append", "(", "self", ".", "alphabet", "[", "t", "[", "i", "]", "-", "1", "]", ")", "\n", "", "", "return", "''", ".", "join", "(", "char_list", ")", "\n", "", "", "else", ":", "\n", "# batch mode", "\n", "            ", "assert", "t", ".", "numel", "(", ")", "==", "length", ".", "sum", "(", ")", ",", "\"texts with length: {} does not match declared length: {}\"", ".", "format", "(", "t", ".", "numel", "(", ")", ",", "length", ".", "sum", "(", ")", ")", "\n", "texts", "=", "[", "]", "\n", "index", "=", "0", "\n", "for", "i", "in", "range", "(", "length", ".", "numel", "(", ")", ")", ":", "\n", "                ", "l", "=", "length", "[", "i", "]", "\n", "texts", ".", "append", "(", "\n", "self", ".", "decode", "(", "\n", "t", "[", "index", ":", "index", "+", "l", "]", ",", "torch", ".", "IntTensor", "(", "[", "l", "]", ")", ",", "raw", "=", "raw", ")", ")", "\n", "index", "+=", "l", "\n", "", "return", "texts", "\n", "\n"]], "home.repos.pwc.inspect_result.Alpaca07_dtr.None.utils.averager.__init__": [[151, 153], ["utils.averager.reset"], "methods", ["home.repos.pwc.inspect_result.Alpaca07_dtr.None.utils.averager.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Alpaca07_dtr.None.utils.averager.add": [[154, 164], ["isinstance", "v.sum.sum.data.numel", "v.sum.sum.data.sum", "isinstance", "v.sum.sum.numel", "v.sum.sum.sum"], "methods", ["None"], ["", "def", "add", "(", "self", ",", "v", ")", ":", "\n", "        ", "if", "isinstance", "(", "v", ",", "Variable", ")", ":", "\n", "            ", "count", "=", "v", ".", "data", ".", "numel", "(", ")", "\n", "v", "=", "v", ".", "data", ".", "sum", "(", ")", "\n", "", "elif", "isinstance", "(", "v", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "count", "=", "v", ".", "numel", "(", ")", "\n", "v", "=", "v", ".", "sum", "(", ")", "\n", "\n", "", "self", ".", "n_count", "+=", "count", "\n", "self", ".", "sum", "+=", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.Alpaca07_dtr.None.utils.averager.reset": [[165, 168], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "n_count", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.Alpaca07_dtr.None.utils.averager.val": [[169, 174], ["float"], "methods", ["None"], ["", "def", "val", "(", "self", ")", ":", "\n", "        ", "res", "=", "0", "\n", "if", "self", ".", "n_count", "!=", "0", ":", "\n", "            ", "res", "=", "self", ".", "sum", "/", "float", "(", "self", ".", "n_count", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.Alpaca07_dtr.None.utils.loadData": [[176, 178], ["v.resize_().copy_", "v.resize_", "data.size"], "function", ["None"], ["", "", "def", "loadData", "(", "v", ",", "data", ")", ":", "\n", "    ", "v", ".", "resize_", "(", "data", ".", "size", "(", ")", ")", ".", "copy_", "(", "data", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Alpaca07_dtr.torch_deform_conv.deform_conv.th_flatten": [[10, 13], ["a.contiguous().view", "a.nelement", "a.contiguous"], "function", ["None"], ["def", "th_flatten", "(", "a", ")", ":", "\n", "    ", "\"\"\"Flatten tensor\"\"\"", "\n", "return", "a", ".", "contiguous", "(", ")", ".", "view", "(", "a", ".", "nelement", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Alpaca07_dtr.torch_deform_conv.deform_conv.th_repeat": [[15, 19], ["deform_conv.th_flatten", "len", "torch.transpose", "a.size", "a.repeat"], "function", ["home.repos.pwc.inspect_result.Alpaca07_dtr.torch_deform_conv.deform_conv.th_flatten"], ["", "def", "th_repeat", "(", "a", ",", "repeats", ",", "axis", "=", "0", ")", ":", "\n", "    ", "\"\"\"Torch version of np.repeat for 1D\"\"\"", "\n", "assert", "len", "(", "a", ".", "size", "(", ")", ")", "==", "1", "\n", "return", "th_flatten", "(", "torch", ".", "transpose", "(", "a", ".", "repeat", "(", "repeats", ",", "1", ")", ",", "0", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Alpaca07_dtr.torch_deform_conv.deform_conv.np_repeat_2d": [[21, 28], ["numpy.expand_dims", "numpy.tile", "len"], "function", ["None"], ["", "def", "np_repeat_2d", "(", "a", ",", "repeats", ")", ":", "\n", "    ", "\"\"\"Tensorflow version of np.repeat for 2D\"\"\"", "\n", "\n", "assert", "len", "(", "a", ".", "shape", ")", "==", "2", "\n", "a", "=", "np", ".", "expand_dims", "(", "a", ",", "0", ")", "\n", "a", "=", "np", ".", "tile", "(", "a", ",", "[", "repeats", ",", "1", ",", "1", "]", ")", "\n", "return", "a", "\n", "\n"]], "home.repos.pwc.inspect_result.Alpaca07_dtr.torch_deform_conv.deform_conv.th_gather_2d": [[30, 34], ["torch.index_select", "torch.index_select.view", "deform_conv.th_flatten", "coords.size", "input.size"], "function", ["home.repos.pwc.inspect_result.Alpaca07_dtr.torch_deform_conv.deform_conv.th_flatten"], ["", "def", "th_gather_2d", "(", "input", ",", "coords", ")", ":", "\n", "    ", "inds", "=", "coords", "[", ":", ",", "0", "]", "*", "input", ".", "size", "(", "1", ")", "+", "coords", "[", ":", ",", "1", "]", "\n", "x", "=", "torch", ".", "index_select", "(", "th_flatten", "(", "input", ")", ",", "0", ",", "inds", ")", "\n", "return", "x", ".", "view", "(", "coords", ".", "size", "(", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Alpaca07_dtr.torch_deform_conv.deform_conv.th_map_coordinates": [[36, 65], ["input.size", "torch.clamp", "torch.clamp.floor().long", "torch.clamp.ceil().long", "torch.stack", "torch.stack", "deform_conv.th_gather_2d", "deform_conv.th_gather_2d", "deform_conv.th_gather_2d", "deform_conv.th_gather_2d", "coords.floor().long.detach", "coords.ceil().long.detach", "torch.stack.detach", "torch.stack.detach", "coords.floor().long.type", "torch.clamp.floor", "torch.clamp.ceil", "torch.clamp.data.type"], "function", ["home.repos.pwc.inspect_result.Alpaca07_dtr.torch_deform_conv.deform_conv.th_gather_2d", "home.repos.pwc.inspect_result.Alpaca07_dtr.torch_deform_conv.deform_conv.th_gather_2d", "home.repos.pwc.inspect_result.Alpaca07_dtr.torch_deform_conv.deform_conv.th_gather_2d", "home.repos.pwc.inspect_result.Alpaca07_dtr.torch_deform_conv.deform_conv.th_gather_2d"], ["", "def", "th_map_coordinates", "(", "input", ",", "coords", ",", "order", "=", "1", ")", ":", "\n", "    ", "\"\"\"Tensorflow verion of scipy.ndimage.map_coordinates\n    Note that coords is transposed and only 2D is supported\n    Parameters\n    ----------\n    input : tf.Tensor. shape = (s, s)\n    coords : tf.Tensor. shape = (n_points, 2)\n    \"\"\"", "\n", "\n", "assert", "order", "==", "1", "\n", "input_size", "=", "input", ".", "size", "(", "0", ")", "\n", "\n", "coords", "=", "torch", ".", "clamp", "(", "coords", ",", "0", ",", "input_size", "-", "1", ")", "\n", "coords_lt", "=", "coords", ".", "floor", "(", ")", ".", "long", "(", ")", "\n", "coords_rb", "=", "coords", ".", "ceil", "(", ")", ".", "long", "(", ")", "\n", "coords_lb", "=", "torch", ".", "stack", "(", "[", "coords_lt", "[", ":", ",", "0", "]", ",", "coords_rb", "[", ":", ",", "1", "]", "]", ",", "1", ")", "\n", "coords_rt", "=", "torch", ".", "stack", "(", "[", "coords_rb", "[", ":", ",", "0", "]", ",", "coords_lt", "[", ":", ",", "1", "]", "]", ",", "1", ")", "\n", "\n", "vals_lt", "=", "th_gather_2d", "(", "input", ",", "coords_lt", ".", "detach", "(", ")", ")", "\n", "vals_rb", "=", "th_gather_2d", "(", "input", ",", "coords_rb", ".", "detach", "(", ")", ")", "\n", "vals_lb", "=", "th_gather_2d", "(", "input", ",", "coords_lb", ".", "detach", "(", ")", ")", "\n", "vals_rt", "=", "th_gather_2d", "(", "input", ",", "coords_rt", ".", "detach", "(", ")", ")", "\n", "\n", "coords_offset_lt", "=", "coords", "-", "coords_lt", ".", "type", "(", "coords", ".", "data", ".", "type", "(", ")", ")", "\n", "\n", "vals_t", "=", "vals_lt", "+", "(", "vals_rt", "-", "vals_lt", ")", "*", "coords_offset_lt", "[", ":", ",", "0", "]", "\n", "vals_b", "=", "vals_lb", "+", "(", "vals_rb", "-", "vals_lb", ")", "*", "coords_offset_lt", "[", ":", ",", "0", "]", "\n", "mapped_vals", "=", "vals_t", "+", "(", "vals_b", "-", "vals_t", ")", "*", "coords_offset_lt", "[", ":", ",", "1", "]", "\n", "return", "mapped_vals", "\n", "\n"]], "home.repos.pwc.inspect_result.Alpaca07_dtr.torch_deform_conv.deform_conv.sp_batch_map_coordinates": [[67, 81], ["coords[].clip", "coords[].clip", "numpy.concatenate", "numpy.array", "numpy.expand_dims", "numpy.expand_dims", "scipy.ndimage.interpolation.map_coordinates", "zip"], "function", ["None"], ["", "def", "sp_batch_map_coordinates", "(", "inputs", ",", "coords", ")", ":", "\n", "    ", "\"\"\"Reference implementation for batch_map_coordinates\"\"\"", "\n", "# coords = coords.clip(0, inputs.shape[1] - 1)", "\n", "\n", "assert", "(", "coords", ".", "shape", "[", "2", "]", "==", "2", ")", "\n", "height", "=", "coords", "[", ":", ",", ":", ",", "0", "]", ".", "clip", "(", "0", ",", "inputs", ".", "shape", "[", "1", "]", "-", "1", ")", "\n", "width", "=", "coords", "[", ":", ",", ":", ",", "1", "]", ".", "clip", "(", "0", ",", "inputs", ".", "shape", "[", "2", "]", "-", "1", ")", "\n", "np", ".", "concatenate", "(", "(", "np", ".", "expand_dims", "(", "height", ",", "axis", "=", "2", ")", ",", "np", ".", "expand_dims", "(", "width", ",", "axis", "=", "2", ")", ")", ",", "2", ")", "\n", "\n", "mapped_vals", "=", "np", ".", "array", "(", "[", "\n", "sp_map_coordinates", "(", "input", ",", "coord", ".", "T", ",", "mode", "=", "'nearest'", ",", "order", "=", "1", ")", "\n", "for", "input", ",", "coord", "in", "zip", "(", "inputs", ",", "coords", ")", "\n", "]", ")", "\n", "return", "mapped_vals", "\n", "\n"]], "home.repos.pwc.inspect_result.Alpaca07_dtr.torch_deform_conv.deform_conv.th_batch_map_coordinates": [[83, 136], ["input.size", "input.size", "input.size", "torch.cat.size", "torch.cat", "torch.cat.floor().long", "torch.cat.ceil().long", "torch.stack", "torch.stack", "th_repeat().long", "torch.autograd.Variable", "deform_conv.th_batch_map_coordinates._get_vals_by_coords"], "function", ["None"], ["", "def", "th_batch_map_coordinates", "(", "input", ",", "coords", ",", "order", "=", "1", ")", ":", "\n", "    ", "\"\"\"Batch version of th_map_coordinates\n    Only supports 2D feature maps\n    Parameters\n    ----------\n    input : tf.Tensor. shape = (b, s, s)\n    coords : tf.Tensor. shape = (b, n_points, 2)\n    Returns\n    -------\n    tf.Tensor. shape = (b, s, s)\n    \"\"\"", "\n", "\n", "batch_size", "=", "input", ".", "size", "(", "0", ")", "\n", "input_height", "=", "input", ".", "size", "(", "1", ")", "\n", "input_width", "=", "input", ".", "size", "(", "2", ")", "\n", "\n", "n_coords", "=", "coords", ".", "size", "(", "1", ")", "\n", "\n", "# coords = torch.clamp(coords, 0, input_size - 1)", "\n", "\n", "coords", "=", "torch", ".", "cat", "(", "(", "torch", ".", "clamp", "(", "coords", ".", "narrow", "(", "2", ",", "0", ",", "1", ")", ",", "0", ",", "input_height", "-", "1", ")", ",", "torch", ".", "clamp", "(", "coords", ".", "narrow", "(", "2", ",", "1", ",", "1", ")", ",", "0", ",", "input_width", "-", "1", ")", ")", ",", "2", ")", "\n", "\n", "assert", "(", "coords", ".", "size", "(", "1", ")", "==", "n_coords", ")", "\n", "\n", "coords_lt", "=", "coords", ".", "floor", "(", ")", ".", "long", "(", ")", "\n", "coords_rb", "=", "coords", ".", "ceil", "(", ")", ".", "long", "(", ")", "\n", "coords_lb", "=", "torch", ".", "stack", "(", "[", "coords_lt", "[", "...", ",", "0", "]", ",", "coords_rb", "[", "...", ",", "1", "]", "]", ",", "2", ")", "\n", "coords_rt", "=", "torch", ".", "stack", "(", "[", "coords_rb", "[", "...", ",", "0", "]", ",", "coords_lt", "[", "...", ",", "1", "]", "]", ",", "2", ")", "\n", "\n", "idx", "=", "th_repeat", "(", "torch", ".", "arange", "(", "0", ",", "batch_size", ")", ",", "n_coords", ")", ".", "long", "(", ")", "\n", "idx", "=", "Variable", "(", "idx", ",", "requires_grad", "=", "False", ")", "\n", "if", "input", ".", "is_cuda", ":", "\n", "        ", "idx", "=", "idx", ".", "cuda", "(", ")", "\n", "\n", "", "def", "_get_vals_by_coords", "(", "input", ",", "coords", ")", ":", "\n", "        ", "indices", "=", "torch", ".", "stack", "(", "[", "\n", "idx", ",", "th_flatten", "(", "coords", "[", "...", ",", "0", "]", ")", ",", "th_flatten", "(", "coords", "[", "...", ",", "1", "]", ")", "\n", "]", ",", "1", ")", "\n", "inds", "=", "indices", "[", ":", ",", "0", "]", "*", "input", ".", "size", "(", "1", ")", "*", "input", ".", "size", "(", "2", ")", "+", "indices", "[", ":", ",", "1", "]", "*", "input", ".", "size", "(", "2", ")", "+", "indices", "[", ":", ",", "2", "]", "\n", "vals", "=", "th_flatten", "(", "input", ")", ".", "index_select", "(", "0", ",", "inds", ")", "\n", "vals", "=", "vals", ".", "view", "(", "batch_size", ",", "n_coords", ")", "\n", "return", "vals", "\n", "\n", "", "vals_lt", "=", "_get_vals_by_coords", "(", "input", ",", "coords_lt", ".", "detach", "(", ")", ")", "\n", "vals_rb", "=", "_get_vals_by_coords", "(", "input", ",", "coords_rb", ".", "detach", "(", ")", ")", "\n", "vals_lb", "=", "_get_vals_by_coords", "(", "input", ",", "coords_lb", ".", "detach", "(", ")", ")", "\n", "vals_rt", "=", "_get_vals_by_coords", "(", "input", ",", "coords_rt", ".", "detach", "(", ")", ")", "\n", "\n", "coords_offset_lt", "=", "coords", "-", "coords_lt", ".", "type", "(", "coords", ".", "data", ".", "type", "(", ")", ")", "\n", "vals_t", "=", "coords_offset_lt", "[", "...", ",", "0", "]", "*", "(", "vals_rt", "-", "vals_lt", ")", "+", "vals_lt", "\n", "vals_b", "=", "coords_offset_lt", "[", "...", ",", "0", "]", "*", "(", "vals_rb", "-", "vals_lb", ")", "+", "vals_lb", "\n", "mapped_vals", "=", "coords_offset_lt", "[", "...", ",", "1", "]", "*", "(", "vals_b", "-", "vals_t", ")", "+", "vals_t", "\n", "return", "mapped_vals", "\n", "\n"]], "home.repos.pwc.inspect_result.Alpaca07_dtr.torch_deform_conv.deform_conv.sp_batch_map_offsets": [[138, 153], ["offsets.reshape.reshape", "numpy.stack().reshape", "numpy.repeat", "deform_conv.sp_batch_map_coordinates", "numpy.stack"], "function", ["home.repos.pwc.inspect_result.Alpaca07_dtr.torch_deform_conv.deform_conv.sp_batch_map_coordinates"], ["", "def", "sp_batch_map_offsets", "(", "input", ",", "offsets", ")", ":", "\n", "    ", "\"\"\"Reference implementation for tf_batch_map_offsets\"\"\"", "\n", "\n", "batch_size", "=", "input", ".", "shape", "[", "0", "]", "\n", "input_height", "=", "input", ".", "shape", "[", "1", "]", "\n", "input_width", "=", "input", ".", "shape", "[", "2", "]", "\n", "\n", "offsets", "=", "offsets", ".", "reshape", "(", "batch_size", ",", "-", "1", ",", "2", ")", "\n", "grid", "=", "np", ".", "stack", "(", "np", ".", "mgrid", "[", ":", "input_height", ",", ":", "input_width", "]", ",", "-", "1", ")", ".", "reshape", "(", "-", "1", ",", "2", ")", "\n", "grid", "=", "np", ".", "repeat", "(", "[", "grid", "]", ",", "batch_size", ",", "axis", "=", "0", ")", "\n", "coords", "=", "offsets", "+", "grid", "\n", "# coords = coords.clip(0, input_size - 1)", "\n", "\n", "mapped_vals", "=", "sp_batch_map_coordinates", "(", "input", ",", "coords", ")", "\n", "return", "mapped_vals", "\n", "\n"]], "home.repos.pwc.inspect_result.Alpaca07_dtr.torch_deform_conv.deform_conv.th_generate_grid": [[155, 167], ["numpy.meshgrid", "numpy.stack", "grid.cuda.reshape", "deform_conv.np_repeat_2d", "torch.from_numpy().type", "torch.autograd.Variable", "range", "range", "grid.cuda.cuda", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.Alpaca07_dtr.torch_deform_conv.deform_conv.np_repeat_2d"], ["", "def", "th_generate_grid", "(", "batch_size", ",", "input_height", ",", "input_width", ",", "dtype", ",", "cuda", ")", ":", "\n", "    ", "grid", "=", "np", ".", "meshgrid", "(", "\n", "range", "(", "input_height", ")", ",", "range", "(", "input_width", ")", ",", "indexing", "=", "'ij'", "\n", ")", "\n", "grid", "=", "np", ".", "stack", "(", "grid", ",", "axis", "=", "-", "1", ")", "\n", "grid", "=", "grid", ".", "reshape", "(", "-", "1", ",", "2", ")", "\n", "\n", "grid", "=", "np_repeat_2d", "(", "grid", ",", "batch_size", ")", "\n", "grid", "=", "torch", ".", "from_numpy", "(", "grid", ")", ".", "type", "(", "dtype", ")", "\n", "if", "cuda", ":", "\n", "        ", "grid", "=", "grid", ".", "cuda", "(", ")", "\n", "", "return", "Variable", "(", "grid", ",", "requires_grad", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Alpaca07_dtr.torch_deform_conv.deform_conv.th_batch_map_offsets": [[169, 191], ["input.size", "input.size", "input.size", "offsets.view.view", "deform_conv.th_batch_map_coordinates", "deform_conv.th_generate_grid", "offsets.view.data.type"], "function", ["home.repos.pwc.inspect_result.Alpaca07_dtr.torch_deform_conv.deform_conv.th_batch_map_coordinates", "home.repos.pwc.inspect_result.Alpaca07_dtr.torch_deform_conv.deform_conv.th_generate_grid"], ["", "def", "th_batch_map_offsets", "(", "input", ",", "offsets", ",", "grid", "=", "None", ",", "order", "=", "1", ")", ":", "\n", "    ", "\"\"\"Batch map offsets into input\n    Parameters\n    ---------\n    input : torch.Tensor. shape = (b, s, s)\n    offsets: torch.Tensor. shape = (b, s, s, 2)\n    Returns\n    -------\n    torch.Tensor. shape = (b, s, s)\n    \"\"\"", "\n", "batch_size", "=", "input", ".", "size", "(", "0", ")", "\n", "input_height", "=", "input", ".", "size", "(", "1", ")", "\n", "input_width", "=", "input", ".", "size", "(", "2", ")", "\n", "\n", "offsets", "=", "offsets", ".", "view", "(", "batch_size", ",", "-", "1", ",", "2", ")", "\n", "if", "grid", "is", "None", ":", "\n", "        ", "grid", "=", "th_generate_grid", "(", "batch_size", ",", "input_height", ",", "input_width", ",", "offsets", ".", "data", ".", "type", "(", ")", ",", "offsets", ".", "data", ".", "is_cuda", ")", "\n", "\n", "", "coords", "=", "offsets", "+", "grid", "\n", "\n", "mapped_vals", "=", "th_batch_map_coordinates", "(", "input", ",", "coords", ")", "\n", "return", "mapped_vals", "\n", "", ""]], "home.repos.pwc.inspect_result.Alpaca07_dtr.torch_deform_conv.layers.ConvOffset2D.__init__": [[19, 36], ["torch.Conv2d.__init__", "layers.ConvOffset2D.weight.data.copy_", "layers.ConvOffset2D._init_weights"], "methods", ["home.repos.pwc.inspect_result.Alpaca07_dtr.models.deformable_crnn.ResidualBlock.__init__", "home.repos.pwc.inspect_result.Alpaca07_dtr.torch_deform_conv.layers.ConvOffset2D._init_weights"], ["def", "__init__", "(", "self", ",", "filters", ",", "out_multi_number", ",", "init_normal_stddev", "=", "0.01", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Init\n\n        Parameters\n        ----------\n        filters : int\n            Number of channel of the input feature map\n        init_normal_stddev : float\n            Normal kernel initialization\n        **kwargs:\n            Pass to superclass. See Con2d layer in pytorch\n        \"\"\"", "\n", "self", ".", "filters", "=", "filters", "\n", "self", ".", "_grid_param", "=", "None", "\n", "super", "(", "ConvOffset2D", ",", "self", ")", ".", "__init__", "(", "self", ".", "filters", ",", "self", ".", "filters", "*", "2", ",", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ",", "**", "kwargs", ")", "\n", "self", ".", "weight", ".", "data", ".", "copy_", "(", "self", ".", "_init_weights", "(", "self", ".", "weight", ",", "init_normal_stddev", ")", ")", "\n", "self", ".", "out_multi_number", "=", "out_multi_number", "\n", "\n"]], "home.repos.pwc.inspect_result.Alpaca07_dtr.torch_deform_conv.layers.ConvOffset2D.forward": [[37, 55], ["layers.ConvOffset2D.size", "super().forward", "layers.ConvOffset2D._to_bc_h_w_2", "layers.ConvOffset2D._to_bc_h_w", "torch_deform_conv.deform_conv.th_batch_map_offsets", "layers.ConvOffset2D._to_b_c_h_w", "layers.ConvOffset2D._get_grid"], "methods", ["home.repos.pwc.inspect_result.Alpaca07_dtr.models.deformable_crnn.ResidualBlock.forward", "home.repos.pwc.inspect_result.Alpaca07_dtr.torch_deform_conv.layers.ConvOffset2D._to_bc_h_w_2", "home.repos.pwc.inspect_result.Alpaca07_dtr.torch_deform_conv.layers.ConvOffset2D._to_bc_h_w", "home.repos.pwc.inspect_result.Alpaca07_dtr.torch_deform_conv.deform_conv.th_batch_map_offsets", "home.repos.pwc.inspect_result.Alpaca07_dtr.torch_deform_conv.layers.ConvOffset2D._to_b_c_h_w", "home.repos.pwc.inspect_result.Alpaca07_dtr.torch_deform_conv.layers.ConvOffset2D._get_grid"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"Return the deformed featured map\"\"\"", "\n", "x_shape", "=", "x", ".", "size", "(", ")", "\n", "offsets", "=", "super", "(", "ConvOffset2D", ",", "self", ")", ".", "forward", "(", "x", ")", "\n", "\n", "# offsets: (b*c, h, w, 2)", "\n", "offsets", "=", "self", ".", "_to_bc_h_w_2", "(", "offsets", ",", "x_shape", ")", "\n", "\n", "# x: (b*c, h, w)", "\n", "x", "=", "self", ".", "_to_bc_h_w", "(", "x", ",", "x_shape", ")", "\n", "\n", "# X_offset: (b*c, h, w)", "\n", "x_offset", "=", "th_batch_map_offsets", "(", "x", ",", "offsets", ",", "grid", "=", "self", ".", "_get_grid", "(", "self", ",", "x", ")", ")", "\n", "\n", "# x_offset: (b, h, w, c)", "\n", "x_offset", "=", "self", ".", "_to_b_c_h_w", "(", "x_offset", ",", "x_shape", ",", "self", ".", "out_multi_number", ")", "\n", "\n", "return", "x_offset", "\n", "\n"]], "home.repos.pwc.inspect_result.Alpaca07_dtr.torch_deform_conv.layers.ConvOffset2D._get_grid": [[56, 65], ["torch_deform_conv.deform_conv.th_generate_grid", "x.size", "x.size", "x.size", "x.data.type"], "methods", ["home.repos.pwc.inspect_result.Alpaca07_dtr.torch_deform_conv.deform_conv.th_generate_grid"], ["", "@", "staticmethod", "\n", "def", "_get_grid", "(", "self", ",", "x", ")", ":", "\n", "        ", "batch_size", ",", "input_height", ",", "input_width", "=", "x", ".", "size", "(", "0", ")", ",", "x", ".", "size", "(", "1", ")", ",", "x", ".", "size", "(", "2", ")", "\n", "dtype", ",", "cuda", "=", "x", ".", "data", ".", "type", "(", ")", ",", "x", ".", "data", ".", "is_cuda", "\n", "if", "self", ".", "_grid_param", "==", "(", "batch_size", ",", "input_height", ",", "input_width", ",", "dtype", ",", "cuda", ")", ":", "\n", "            ", "return", "self", ".", "_grid", "\n", "", "self", ".", "_grid_param", "=", "(", "batch_size", ",", "input_height", ",", "input_width", ",", "dtype", ",", "cuda", ")", "\n", "self", ".", "_grid", "=", "th_generate_grid", "(", "batch_size", ",", "input_height", ",", "input_width", ",", "dtype", ",", "cuda", ")", "\n", "return", "self", ".", "_grid", "\n", "\n"]], "home.repos.pwc.inspect_result.Alpaca07_dtr.torch_deform_conv.layers.ConvOffset2D._init_weights": [[66, 72], ["weights.size", "numpy.random.normal", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "weights.size", "numpy.random.normal.reshape", "weights.size", "weights.size", "weights.size"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_init_weights", "(", "weights", ",", "std", ")", ":", "\n", "        ", "fan_out", "=", "weights", ".", "size", "(", "0", ")", "\n", "fan_in", "=", "weights", ".", "size", "(", "1", ")", "*", "weights", ".", "size", "(", "2", ")", "*", "weights", ".", "size", "(", "3", ")", "\n", "w", "=", "np", ".", "random", ".", "normal", "(", "0.0", ",", "std", ",", "(", "fan_out", ",", "fan_in", ")", ")", "\n", "return", "torch", ".", "from_numpy", "(", "w", ".", "reshape", "(", "weights", ".", "size", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Alpaca07_dtr.torch_deform_conv.layers.ConvOffset2D._to_bc_h_w_2": [[73, 78], ["x.contiguous().view.contiguous().view.contiguous().view", "int", "int", "x.contiguous().view.contiguous().view.contiguous"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_to_bc_h_w_2", "(", "x", ",", "x_shape", ")", ":", "\n", "        ", "\"\"\"(b, 2c, h, w) -> (b*c, h, w, 2)\"\"\"", "\n", "x", "=", "x", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "int", "(", "x_shape", "[", "2", "]", ")", ",", "int", "(", "x_shape", "[", "3", "]", ")", ",", "2", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Alpaca07_dtr.torch_deform_conv.layers.ConvOffset2D._to_bc_h_w": [[79, 84], ["x.contiguous().view.contiguous().view.contiguous().view", "int", "int", "x.contiguous().view.contiguous().view.contiguous"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_to_bc_h_w", "(", "x", ",", "x_shape", ")", ":", "\n", "        ", "\"\"\"(b, c, h, w) -> (b*c, h, w)\"\"\"", "\n", "x", "=", "x", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "int", "(", "x_shape", "[", "2", "]", ")", ",", "int", "(", "x_shape", "[", "3", "]", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Alpaca07_dtr.torch_deform_conv.layers.ConvOffset2D._to_b_c_h_w": [[85, 90], ["x.contiguous().view.contiguous().view.contiguous().view", "int", "int", "int", "x.contiguous().view.contiguous().view.contiguous"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_to_b_c_h_w", "(", "x", ",", "x_shape", ",", "out_multi_number", ")", ":", "\n", "        ", "\"\"\"(b*c, h, w) -> (b, c, h, w)\"\"\"", "\n", "x", "=", "x", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "int", "(", "x_shape", "[", "1", "]", "*", "out_multi_number", ")", ",", "int", "(", "x_shape", "[", "2", "]", ")", ",", "int", "(", "x_shape", "[", "3", "]", ")", ")", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Alpaca07_dtr.models.deformable_crnn.BidirectionalLSTM.__init__": [[7, 12], ["torch.Module.__init__", "torch.LSTM", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.Alpaca07_dtr.models.deformable_crnn.ResidualBlock.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nIn", ",", "nHidden", ",", "nOut", ")", ":", "\n", "        ", "super", "(", "BidirectionalLSTM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "rnn", "=", "nn", ".", "LSTM", "(", "nIn", ",", "nHidden", ",", "bidirectional", "=", "True", ")", "\n", "self", ".", "embedding", "=", "nn", ".", "Linear", "(", "nHidden", "*", "2", ",", "nOut", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Alpaca07_dtr.models.deformable_crnn.BidirectionalLSTM.forward": [[13, 22], ["deformable_crnn.BidirectionalLSTM.rnn", "recurrent.size", "recurrent.view", "deformable_crnn.BidirectionalLSTM.embedding", "output.view.view.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "recurrent", ",", "_", "=", "self", ".", "rnn", "(", "input", ")", "\n", "T", ",", "b", ",", "h", "=", "recurrent", ".", "size", "(", ")", "\n", "t_rec", "=", "recurrent", ".", "view", "(", "T", "*", "b", ",", "h", ")", "\n", "\n", "output", "=", "self", ".", "embedding", "(", "t_rec", ")", "# [T * b, nOut]", "\n", "output", "=", "output", ".", "view", "(", "T", ",", "b", ",", "-", "1", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.Alpaca07_dtr.models.deformable_crnn.DeformableCRNN.__init__": [[25, 61], ["torch.Module.__init__", "torch.Conv2d", "torch.AdaptiveMaxPool2d", "torch.Conv2d", "torch.AdaptiveMaxPool2d", "torch.Conv2d", "torch.BatchNorm2d", "torch_deform_conv.layers.ConvOffset2D", "torch.Conv2d", "torch.AdaptiveMaxPool2d", "deformable_crnn.ResidualBlock", "deformable_crnn.ResidualBlock", "deformable_crnn.ResidualBlock", "deformable_crnn.ResidualBlock", "torch_deform_conv.layers.ConvOffset2D", "torch.Conv2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.AdaptiveMaxPool2d", "torch.Conv2d", "torch.AdaptiveMaxPool2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU", "torch.PReLU", "torch.Sequential", "deformable_crnn.BidirectionalLSTM", "deformable_crnn.BidirectionalLSTM"], "methods", ["home.repos.pwc.inspect_result.Alpaca07_dtr.models.deformable_crnn.ResidualBlock.__init__"], ["    ", "def", "__init__", "(", "self", ",", "imgH", ",", "nc", ",", "nclass", ",", "nh", "=", "256", ")", ":", "\n", "        ", "super", "(", "DeformableCRNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "imgH", "%", "16", "==", "0", ",", "'imgH has to be a multiple of 16'", "\n", "\n", "self", ".", "conv0", "=", "nn", ".", "Conv2d", "(", "nc", ",", "64", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "pooling0", "=", "nn", ".", "AdaptiveMaxPool2d", "(", "output_size", "=", "(", "32", ",", "100", ")", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "pooling1", "=", "nn", ".", "AdaptiveMaxPool2d", "(", "output_size", "=", "(", "16", ",", "50", ")", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "128", ",", "256", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "256", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.1", ",", "affine", "=", "True", ")", "\n", "self", ".", "deconv3", "=", "ConvOffset2D", "(", "256", ",", "1", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "pooling2", "=", "nn", ".", "AdaptiveMaxPool2d", "(", "output_size", "=", "(", "8", ",", "25", ")", ")", "\n", "\n", "self", ".", "resblock1", "=", "ResidualBlock", "(", "256", ")", "\n", "self", ".", "resblock2", "=", "ResidualBlock", "(", "256", ")", "\n", "self", ".", "resblock3", "=", "ResidualBlock", "(", "256", ")", "\n", "self", ".", "resblock4", "=", "ResidualBlock", "(", "256", ")", "\n", "\n", "self", ".", "deconv4", "=", "ConvOffset2D", "(", "256", ",", "1", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "256", ",", "512", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "bn4", "=", "nn", ".", "BatchNorm2d", "(", "512", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.1", ",", "affine", "=", "True", ")", "\n", "self", ".", "conv5", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "pooling3", "=", "nn", ".", "AdaptiveMaxPool2d", "(", "output_size", "=", "(", "4", ",", "26", ")", ")", "\n", "self", ".", "conv6", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "pooling4", "=", "nn", ".", "AdaptiveMaxPool2d", "(", "output_size", "=", "(", "2", ",", "27", ")", ")", "\n", "\n", "self", ".", "conv7", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "(", "2", ",", "2", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "bn6", "=", "nn", ".", "BatchNorm2d", "(", "512", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.1", ",", "affine", "=", "True", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "True", ")", "\n", "self", ".", "p_relu", "=", "nn", ".", "PReLU", "(", ")", "\n", "\n", "self", ".", "rnn", "=", "nn", ".", "Sequential", "(", "\n", "BidirectionalLSTM", "(", "512", ",", "nh", ",", "nh", ")", ",", "\n", "BidirectionalLSTM", "(", "nh", ",", "nh", ",", "nclass", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Alpaca07_dtr.models.deformable_crnn.DeformableCRNN.forward": [[62, 83], ["deformable_crnn.DeformableCRNN.pooling0", "deformable_crnn.DeformableCRNN.pooling1", "deformable_crnn.DeformableCRNN.relu", "deformable_crnn.DeformableCRNN.pooling2", "deformable_crnn.DeformableCRNN.resblock4", "deformable_crnn.DeformableCRNN.relu", "deformable_crnn.DeformableCRNN.pooling3", "deformable_crnn.DeformableCRNN.pooling4", "deformable_crnn.DeformableCRNN.relu", "e8.permute.permute.size", "e8.permute.permute.squeeze", "e8.permute.permute.permute", "deformable_crnn.DeformableCRNN.rnn", "deformable_crnn.DeformableCRNN.relu", "deformable_crnn.DeformableCRNN.relu", "deformable_crnn.DeformableCRNN.bn2", "deformable_crnn.DeformableCRNN.relu", "deformable_crnn.DeformableCRNN.resblock3", "deformable_crnn.DeformableCRNN.bn4", "deformable_crnn.DeformableCRNN.relu", "deformable_crnn.DeformableCRNN.relu", "deformable_crnn.DeformableCRNN.bn6", "deformable_crnn.DeformableCRNN.conv0", "deformable_crnn.DeformableCRNN.conv1", "deformable_crnn.DeformableCRNN.conv2", "deformable_crnn.DeformableCRNN.conv3", "deformable_crnn.DeformableCRNN.resblock2", "deformable_crnn.DeformableCRNN.conv4", "deformable_crnn.DeformableCRNN.conv5", "deformable_crnn.DeformableCRNN.conv6", "deformable_crnn.DeformableCRNN.conv7", "deformable_crnn.DeformableCRNN.deconv3", "deformable_crnn.DeformableCRNN.resblock1", "deformable_crnn.DeformableCRNN.deconv4"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_", ")", ":", "\n", "        ", "e1", "=", "self", ".", "pooling0", "(", "self", ".", "relu", "(", "self", ".", "conv0", "(", "input_", ")", ")", ")", "\n", "e2", "=", "self", ".", "pooling1", "(", "self", ".", "relu", "(", "self", ".", "conv1", "(", "e1", ")", ")", ")", "\n", "e3", "=", "self", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "e2", ")", ")", ")", "\n", "e4_", "=", "self", ".", "pooling2", "(", "self", ".", "relu", "(", "self", ".", "conv3", "(", "self", ".", "deconv3", "(", "e3", ")", ")", ")", ")", "\n", "\n", "e4", "=", "self", ".", "resblock4", "(", "self", ".", "resblock3", "(", "self", ".", "resblock2", "(", "self", ".", "resblock1", "(", "e4_", ")", ")", ")", ")", "\n", "\n", "e5", "=", "self", ".", "relu", "(", "self", ".", "bn4", "(", "self", ".", "conv4", "(", "self", ".", "deconv4", "(", "e4", ")", ")", ")", ")", "\n", "e6", "=", "self", ".", "pooling3", "(", "self", ".", "relu", "(", "self", ".", "conv5", "(", "e5", ")", ")", ")", "\n", "e7", "=", "self", ".", "pooling4", "(", "self", ".", "relu", "(", "self", ".", "conv6", "(", "e6", ")", ")", ")", "\n", "e8", "=", "self", ".", "relu", "(", "self", ".", "bn6", "(", "self", ".", "conv7", "(", "e7", ")", ")", ")", "\n", "\n", "b", ",", "c", ",", "h", ",", "w", "=", "e8", ".", "size", "(", ")", "\n", "assert", "h", "==", "1", ",", "\"the height of conv must be 1\"", "\n", "e8", "=", "e8", ".", "squeeze", "(", "2", ")", "\n", "e8", "=", "e8", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "# [w, b, c]", "\n", "# rnn features", "\n", "output", "=", "self", ".", "rnn", "(", "e8", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.Alpaca07_dtr.models.deformable_crnn.ResidualBlock.__init__": [[86, 93], ["torch.Module.__init__", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU", "torch.Conv2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.Alpaca07_dtr.models.deformable_crnn.ResidualBlock.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channels", ")", ":", "\n", "        ", "super", "(", "ResidualBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "rconv1", "=", "nn", ".", "Conv2d", "(", "channels", ",", "channels", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "channels", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "rconv2", "=", "nn", ".", "Conv2d", "(", "channels", ",", "channels", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Alpaca07_dtr.models.deformable_crnn.ResidualBlock.forward": [[94, 102], ["deformable_crnn.ResidualBlock.rconv1", "deformable_crnn.ResidualBlock.bn1", "deformable_crnn.ResidualBlock.relu", "deformable_crnn.ResidualBlock.rconv2", "deformable_crnn.ResidualBlock.bn2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "self", ".", "rconv1", "(", "x", ")", "\n", "residual", "=", "self", ".", "bn1", "(", "residual", ")", "\n", "residual", "=", "self", ".", "relu", "(", "residual", ")", "\n", "residual", "=", "self", ".", "rconv2", "(", "residual", ")", "\n", "residual", "=", "self", ".", "bn2", "(", "residual", ")", "\n", "\n", "return", "x", "+", "residual", "\n", "", "", ""]]}