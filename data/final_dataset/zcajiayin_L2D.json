{"home.repos.pwc.inspect_result.zcajiayin_L2D.None.test_learned.test": [[70, 118], ["time.time", "enumerate", "time.time", "print", "open", "open.write", "numpy.save", "env.reset", "print", "result.append", "str", "numpy.array", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "env.step", "str", "torch.no_grad", "ppo.policy", "agent_utils.greedy_select_action", "str", "len", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "str", "str", "torch.from_numpy().to.unsqueeze", "torch.from_numpy().to.unsqueeze", "str", "str", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.zcajiayin_L2D.None.JSSP_Env.SJSSP.reset", "home.repos.pwc.inspect_result.zcajiayin_L2D.None.JSSP_Env.SJSSP.step", "home.repos.pwc.inspect_result.zcajiayin_L2D.None.agent_utils.greedy_select_action"], ["", "def", "test", "(", "dataset", ")", ":", "\n", "    ", "result", "=", "[", "]", "\n", "# torch.cuda.synchronize()", "\n", "t1", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "dataset", ")", ":", "\n", "        ", "adj", ",", "fea", ",", "candidate", ",", "mask", "=", "env", ".", "reset", "(", "data", ")", "\n", "ep_reward", "=", "-", "env", ".", "max_endTime", "\n", "# delta_t = []", "\n", "# t5 = time.time()", "\n", "while", "True", ":", "\n", "# t3 = time.time()", "\n", "            ", "fea_tensor", "=", "torch", ".", "from_numpy", "(", "fea", ")", ".", "to", "(", "device", ")", "\n", "adj_tensor", "=", "torch", ".", "from_numpy", "(", "adj", ")", ".", "to", "(", "device", ")", "\n", "candidate_tensor", "=", "torch", ".", "from_numpy", "(", "candidate", ")", ".", "to", "(", "device", ")", "\n", "mask_tensor", "=", "torch", ".", "from_numpy", "(", "mask", ")", ".", "to", "(", "device", ")", "\n", "# t4 = time.time()", "\n", "# delta_t.append(t4 - t3)", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "pi", ",", "_", "=", "ppo", ".", "policy", "(", "x", "=", "fea_tensor", ",", "\n", "graph_pool", "=", "g_pool_step", ",", "\n", "padded_nei", "=", "None", ",", "\n", "adj", "=", "adj_tensor", ",", "\n", "candidate", "=", "candidate_tensor", ".", "unsqueeze", "(", "0", ")", ",", "\n", "mask", "=", "mask_tensor", ".", "unsqueeze", "(", "0", ")", ")", "\n", "# action = sample_select_action(pi, omega)", "\n", "action", "=", "greedy_select_action", "(", "pi", ",", "candidate", ")", "\n", "\n", "", "adj", ",", "fea", ",", "reward", ",", "done", ",", "candidate", ",", "mask", "=", "env", ".", "step", "(", "action", ")", "\n", "ep_reward", "+=", "reward", "\n", "\n", "if", "done", ":", "\n", "                ", "break", "\n", "# t6 = time.time()", "\n", "# print(t6 - t5)", "\n", "# print(max(env.end_time))", "\n", "", "", "print", "(", "'Instance'", "+", "str", "(", "i", "+", "1", ")", "+", "' makespan:'", ",", "-", "ep_reward", "+", "env", ".", "posRewards", ")", "\n", "result", ".", "append", "(", "-", "ep_reward", "+", "env", ".", "posRewards", ")", "\n", "# print(sum(delta_t))", "\n", "# torch.cuda.synchronize()", "\n", "", "t2", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "t2", "-", "t1", ")", "\n", "file_writing_obj", "=", "open", "(", "'./'", "+", "'drltime_'", "+", "str", "(", "N_JOBS_N", ")", "+", "'x'", "+", "str", "(", "N_MACHINES_N", ")", "+", "'_'", "+", "str", "(", "N_JOBS_P", ")", "+", "'x'", "+", "str", "(", "N_MACHINES_P", ")", "+", "'.txt'", ",", "'w'", ")", "\n", "file_writing_obj", ".", "write", "(", "str", "(", "(", "t2", "-", "t1", ")", "/", "len", "(", "dataset", ")", ")", ")", "\n", "\n", "# print(result)", "\n", "# print(np.array(result, dtype=np.single).mean())", "\n", "np", ".", "save", "(", "'drlResult_'", "+", "str", "(", "N_JOBS_N", ")", "+", "'x'", "+", "str", "(", "N_MACHINES_N", ")", "+", "'_'", "+", "str", "(", "N_JOBS_P", ")", "+", "'x'", "+", "str", "(", "N_MACHINES_P", ")", "+", "'_Seed'", "+", "str", "(", "SEED", ")", ",", "np", ".", "array", "(", "result", ",", "dtype", "=", "np", ".", "single", ")", ")", "\n", "# print(np.array(result, dtype=np.single).mean())", "\n"]], "home.repos.pwc.inspect_result.zcajiayin_L2D.None.PPO_jssp_multiInstances.Memory.__init__": [[17, 26], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "adj_mb", "=", "[", "]", "\n", "self", ".", "fea_mb", "=", "[", "]", "\n", "self", ".", "candidate_mb", "=", "[", "]", "\n", "self", ".", "mask_mb", "=", "[", "]", "\n", "self", ".", "a_mb", "=", "[", "]", "\n", "self", ".", "r_mb", "=", "[", "]", "\n", "self", ".", "done_mb", "=", "[", "]", "\n", "self", ".", "logprobs", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zcajiayin_L2D.None.PPO_jssp_multiInstances.Memory.clear_memory": [[27, 36], ["None"], "methods", ["None"], ["", "def", "clear_memory", "(", "self", ")", ":", "\n", "        ", "del", "self", ".", "adj_mb", "[", ":", "]", "\n", "del", "self", ".", "fea_mb", "[", ":", "]", "\n", "del", "self", ".", "candidate_mb", "[", ":", "]", "\n", "del", "self", ".", "mask_mb", "[", ":", "]", "\n", "del", "self", ".", "a_mb", "[", ":", "]", "\n", "del", "self", ".", "r_mb", "[", ":", "]", "\n", "del", "self", ".", "done_mb", "[", ":", "]", "\n", "del", "self", ".", "logprobs", "[", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zcajiayin_L2D.None.PPO_jssp_multiInstances.PPO.__init__": [[39, 86], ["models.actor_critic.ActorCritic", "copy.deepcopy", "PPO_jssp_multiInstances.PPO.policy_old.load_state_dict", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.MSELoss", "torch.MSELoss", "PPO_jssp_multiInstances.PPO.policy.state_dict", "PPO_jssp_multiInstances.PPO.policy.parameters"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "lr", ",", "\n", "gamma", ",", "\n", "k_epochs", ",", "\n", "eps_clip", ",", "\n", "n_j", ",", "\n", "n_m", ",", "\n", "num_layers", ",", "\n", "neighbor_pooling_type", ",", "\n", "input_dim", ",", "\n", "hidden_dim", ",", "\n", "num_mlp_layers_feature_extract", ",", "\n", "num_mlp_layers_actor", ",", "\n", "hidden_dim_actor", ",", "\n", "num_mlp_layers_critic", ",", "\n", "hidden_dim_critic", ",", "\n", ")", ":", "\n", "        ", "self", ".", "lr", "=", "lr", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "eps_clip", "=", "eps_clip", "\n", "self", ".", "k_epochs", "=", "k_epochs", "\n", "\n", "self", ".", "policy", "=", "ActorCritic", "(", "n_j", "=", "n_j", ",", "\n", "n_m", "=", "n_m", ",", "\n", "num_layers", "=", "num_layers", ",", "\n", "learn_eps", "=", "False", ",", "\n", "neighbor_pooling_type", "=", "neighbor_pooling_type", ",", "\n", "input_dim", "=", "input_dim", ",", "\n", "hidden_dim", "=", "hidden_dim", ",", "\n", "num_mlp_layers_feature_extract", "=", "num_mlp_layers_feature_extract", ",", "\n", "num_mlp_layers_actor", "=", "num_mlp_layers_actor", ",", "\n", "hidden_dim_actor", "=", "hidden_dim_actor", ",", "\n", "num_mlp_layers_critic", "=", "num_mlp_layers_critic", ",", "\n", "hidden_dim_critic", "=", "hidden_dim_critic", ",", "\n", "device", "=", "device", ")", "\n", "self", ".", "policy_old", "=", "deepcopy", "(", "self", ".", "policy", ")", "\n", "\n", "'''self.policy.load_state_dict(\n            torch.load(path='./{}.pth'.format(str(n_j) + '_' + str(n_m) + '_' + str(1) + '_' + str(99))))'''", "\n", "\n", "self", ".", "policy_old", ".", "load_state_dict", "(", "self", ".", "policy", ".", "state_dict", "(", ")", ")", "\n", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "policy", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ")", "\n", "self", ".", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "StepLR", "(", "self", ".", "optimizer", ",", "\n", "step_size", "=", "configs", ".", "decay_step_size", ",", "\n", "gamma", "=", "configs", ".", "decay_ratio", ")", "\n", "\n", "self", ".", "V_loss_2", "=", "nn", ".", "MSELoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zcajiayin_L2D.None.PPO_jssp_multiInstances.PPO.update": [[87, 156], ["range", "mb_agg.g_pool_cal", "range", "PPO_jssp_multiInstances.PPO.policy_old.load_state_dict", "len", "zip", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "rewards_all_env.append", "adj_mb_t_all_env.append", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "fea_mb_t.reshape.reshape.reshape", "fea_mb_t_all_env.append", "candidate_mb_t_all_env.append", "mask_mb_t_all_env.append", "a_mb_t_all_env.append", "old_logprobs_mb_t_all_env.append", "range", "PPO_jssp_multiInstances.PPO.optimizer.zero_grad", "loss_sum.mean().backward", "PPO_jssp_multiInstances.PPO.optimizer.step", "PPO_jssp_multiInstances.PPO.policy.state_dict", "PPO_jssp_multiInstances.PPO.scheduler.step", "loss_sum.mean().item", "vloss_sum.mean().item", "reversed", "reversed", "torch.tensor().to.insert", "torch.tensor().to.insert", "mb_agg.aggr_obs", "fea_mb_t.reshape.reshape.size", "torch.stack().to().squeeze", "torch.stack().to().squeeze", "torch.stack().to().squeeze", "torch.stack().to().squeeze", "torch.stack().to().squeeze", "torch.stack().to().squeeze", "torch.stack().to().squeeze", "torch.stack().to().squeeze", "torch.stack().to().squeeze", "torch.stack().to().squeeze", "torch.stack().to().squeeze", "torch.stack().to().squeeze", "torch.stack().to().squeeze().detach", "torch.stack().to().squeeze().detach", "torch.stack().to().squeeze().detach", "torch.stack().to().squeeze().detach", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "len", "PPO_jssp_multiInstances.PPO.policy", "agent_utils.eval_actions", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "PPO_jssp_multiInstances.PPO.V_loss_2", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor().to.mean", "torch.tensor().to.mean", "torch.tensor().to.std", "torch.tensor().to.std", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "pis.squeeze", "vals.view().detach", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "vals.squeeze", "torch.min().mean", "torch.min().mean", "torch.min().mean", "torch.min().mean", "ent_loss.clone", "loss_sum.mean", "loss_sum.mean", "vloss_sum.mean", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to().squeeze", "torch.stack().to().squeeze", "torch.stack().to().squeeze", "torch.stack().to().squeeze", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "old_logprobs_mb_t_all_env[].detach", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "vals.view", "torch.min", "torch.min", "torch.min", "torch.min", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "Params.configs.graph_pool_type"], "methods", ["home.repos.pwc.inspect_result.zcajiayin_L2D.None.mb_agg.g_pool_cal", "home.repos.pwc.inspect_result.zcajiayin_L2D.None.JSSP_Env.SJSSP.step", "home.repos.pwc.inspect_result.zcajiayin_L2D.None.JSSP_Env.SJSSP.step", "home.repos.pwc.inspect_result.zcajiayin_L2D.None.mb_agg.aggr_obs", "home.repos.pwc.inspect_result.zcajiayin_L2D.None.agent_utils.eval_actions"], ["", "def", "update", "(", "self", ",", "memories", ",", "n_tasks", ",", "g_pool", ")", ":", "\n", "\n", "        ", "vloss_coef", "=", "configs", ".", "vloss_coef", "\n", "ploss_coef", "=", "configs", ".", "ploss_coef", "\n", "entloss_coef", "=", "configs", ".", "entloss_coef", "\n", "\n", "rewards_all_env", "=", "[", "]", "\n", "adj_mb_t_all_env", "=", "[", "]", "\n", "fea_mb_t_all_env", "=", "[", "]", "\n", "candidate_mb_t_all_env", "=", "[", "]", "\n", "mask_mb_t_all_env", "=", "[", "]", "\n", "a_mb_t_all_env", "=", "[", "]", "\n", "old_logprobs_mb_t_all_env", "=", "[", "]", "\n", "# store data for all env", "\n", "for", "i", "in", "range", "(", "len", "(", "memories", ")", ")", ":", "\n", "            ", "rewards", "=", "[", "]", "\n", "discounted_reward", "=", "0", "\n", "for", "reward", ",", "is_terminal", "in", "zip", "(", "reversed", "(", "memories", "[", "i", "]", ".", "r_mb", ")", ",", "reversed", "(", "memories", "[", "i", "]", ".", "done_mb", ")", ")", ":", "\n", "                ", "if", "is_terminal", ":", "\n", "                    ", "discounted_reward", "=", "0", "\n", "", "discounted_reward", "=", "reward", "+", "(", "self", ".", "gamma", "*", "discounted_reward", ")", "\n", "rewards", ".", "insert", "(", "0", ",", "discounted_reward", ")", "\n", "", "rewards", "=", "torch", ".", "tensor", "(", "rewards", ",", "dtype", "=", "torch", ".", "float", ")", ".", "to", "(", "device", ")", "\n", "rewards", "=", "(", "rewards", "-", "rewards", ".", "mean", "(", ")", ")", "/", "(", "rewards", ".", "std", "(", ")", "+", "1e-5", ")", "\n", "rewards_all_env", ".", "append", "(", "rewards", ")", "\n", "# process each env data", "\n", "adj_mb_t_all_env", ".", "append", "(", "aggr_obs", "(", "torch", ".", "stack", "(", "memories", "[", "i", "]", ".", "adj_mb", ")", ".", "to", "(", "device", ")", ",", "n_tasks", ")", ")", "\n", "fea_mb_t", "=", "torch", ".", "stack", "(", "memories", "[", "i", "]", ".", "fea_mb", ")", ".", "to", "(", "device", ")", "\n", "fea_mb_t", "=", "fea_mb_t", ".", "reshape", "(", "-", "1", ",", "fea_mb_t", ".", "size", "(", "-", "1", ")", ")", "\n", "fea_mb_t_all_env", ".", "append", "(", "fea_mb_t", ")", "\n", "candidate_mb_t_all_env", ".", "append", "(", "torch", ".", "stack", "(", "memories", "[", "i", "]", ".", "candidate_mb", ")", ".", "to", "(", "device", ")", ".", "squeeze", "(", ")", ")", "\n", "mask_mb_t_all_env", ".", "append", "(", "torch", ".", "stack", "(", "memories", "[", "i", "]", ".", "mask_mb", ")", ".", "to", "(", "device", ")", ".", "squeeze", "(", ")", ")", "\n", "a_mb_t_all_env", ".", "append", "(", "torch", ".", "stack", "(", "memories", "[", "i", "]", ".", "a_mb", ")", ".", "to", "(", "device", ")", ".", "squeeze", "(", ")", ")", "\n", "old_logprobs_mb_t_all_env", ".", "append", "(", "torch", ".", "stack", "(", "memories", "[", "i", "]", ".", "logprobs", ")", ".", "to", "(", "device", ")", ".", "squeeze", "(", ")", ".", "detach", "(", ")", ")", "\n", "\n", "# get batch argument for net forwarding: mb_g_pool is same for all env", "\n", "", "mb_g_pool", "=", "g_pool_cal", "(", "g_pool", ",", "torch", ".", "stack", "(", "memories", "[", "0", "]", ".", "adj_mb", ")", ".", "to", "(", "device", ")", ".", "shape", ",", "n_tasks", ",", "device", ")", "\n", "\n", "# Optimize policy for K epochs:", "\n", "for", "_", "in", "range", "(", "self", ".", "k_epochs", ")", ":", "\n", "            ", "loss_sum", "=", "0", "\n", "vloss_sum", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "memories", ")", ")", ":", "\n", "                ", "pis", ",", "vals", "=", "self", ".", "policy", "(", "x", "=", "fea_mb_t_all_env", "[", "i", "]", ",", "\n", "graph_pool", "=", "mb_g_pool", ",", "\n", "adj", "=", "adj_mb_t_all_env", "[", "i", "]", ",", "\n", "candidate", "=", "candidate_mb_t_all_env", "[", "i", "]", ",", "\n", "mask", "=", "mask_mb_t_all_env", "[", "i", "]", ",", "\n", "padded_nei", "=", "None", ")", "\n", "logprobs", ",", "ent_loss", "=", "eval_actions", "(", "pis", ".", "squeeze", "(", ")", ",", "a_mb_t_all_env", "[", "i", "]", ")", "\n", "ratios", "=", "torch", ".", "exp", "(", "logprobs", "-", "old_logprobs_mb_t_all_env", "[", "i", "]", ".", "detach", "(", ")", ")", "\n", "advantages", "=", "rewards_all_env", "[", "i", "]", "-", "vals", ".", "view", "(", "-", "1", ")", ".", "detach", "(", ")", "\n", "surr1", "=", "ratios", "*", "advantages", "\n", "surr2", "=", "torch", ".", "clamp", "(", "ratios", ",", "1", "-", "self", ".", "eps_clip", ",", "1", "+", "self", ".", "eps_clip", ")", "*", "advantages", "\n", "v_loss", "=", "self", ".", "V_loss_2", "(", "vals", ".", "squeeze", "(", ")", ",", "rewards_all_env", "[", "i", "]", ")", "\n", "p_loss", "=", "-", "torch", ".", "min", "(", "surr1", ",", "surr2", ")", ".", "mean", "(", ")", "\n", "ent_loss", "=", "-", "ent_loss", ".", "clone", "(", ")", "\n", "loss", "=", "vloss_coef", "*", "v_loss", "+", "ploss_coef", "*", "p_loss", "+", "entloss_coef", "*", "ent_loss", "\n", "loss_sum", "+=", "loss", "\n", "vloss_sum", "+=", "v_loss", "\n", "", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss_sum", ".", "mean", "(", ")", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "# Copy new weights into old policy:", "\n", "", "self", ".", "policy_old", ".", "load_state_dict", "(", "self", ".", "policy", ".", "state_dict", "(", ")", ")", "\n", "if", "configs", ".", "decayflag", ":", "\n", "            ", "self", ".", "scheduler", ".", "step", "(", ")", "\n", "", "return", "loss_sum", ".", "mean", "(", ")", ".", "item", "(", ")", ",", "vloss_sum", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zcajiayin_L2D.None.PPO_jssp_multiInstances.main": [[158, 291], ["numpy.load", "range", "torch.manual_seed", "torch.manual_seed", "torch.cuda.is_available", "torch.cuda.is_available", "numpy.random.seed", "PPO_jssp_multiInstances.PPO", "mb_agg.g_pool_cal", "range", "SJSSP", "vali_data.append", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "PPO_jssp_multiInstances.Memory", "time.time", "enumerate", "range", "PPO_jssp_multiInstances.PPO.update", "log.append", "print", "time.time", "time.time", "range", "range", "torch.Size", "torch.Size", "env.reset", "adj_envs.append", "fea_envs.append", "candidate_envs.append", "mask_envs.append", "range", "envs[].done", "memory.clear_memory", "sum", "len", "open", "open.write", "validation_log.append", "print", "open", "open.write", "str", "range", "data_generator", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to().to_sparse", "torch.from_numpy().to().to_sparse", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.no_grad", "torch.no_grad", "range", "memories[].adj_mb.append", "memories[].fea_mb.append", "memories[].candidate_mb.append", "memories[].mask_mb.append", "memories[].a_mb.append", "envs[].step", "adj_envs.append", "fea_envs.append", "candidate_envs.append", "mask_envs.append", "memories[].r_mb.append", "memories[].done_mb.append", "str", "validation.validate().mean", "torch.save", "torch.save", "str", "PPO.policy_old", "agent_utils.select_action", "action_envs.append", "a_idx_envs.append", "action_envs[].item", "PPO.policy.state_dict", "str", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "str", "validation.validate", "str", "numpy.copy", "numpy.copy", "numpy.copy", "candidate_tensor_envs[].unsqueeze", "mask_tensor_envs[].unsqueeze", "str", "str", "torch.from_numpy", "torch.from_numpy", "str", "str", "numpy.copy", "str", "str", "str", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.zcajiayin_L2D.None.mb_agg.g_pool_cal", "home.repos.pwc.inspect_result.zcajiayin_L2D.None.PPO_jssp_multiInstances.PPO.update", "home.repos.pwc.inspect_result.zcajiayin_L2D.None.JSSP_Env.SJSSP.reset", "home.repos.pwc.inspect_result.zcajiayin_L2D.None.JSSP_Env.SJSSP.done", "home.repos.pwc.inspect_result.zcajiayin_L2D.None.PPO_jssp_multiInstances.Memory.clear_memory", "home.repos.pwc.inspect_result.zcajiayin_L2D.None.JSSP_Env.SJSSP.step", "home.repos.pwc.inspect_result.zcajiayin_L2D.None.agent_utils.select_action", "home.repos.pwc.inspect_result.zcajiayin_L2D.None.validation.validate"], ["", "", "def", "main", "(", ")", ":", "\n", "\n", "    ", "from", "JSSP_Env", "import", "SJSSP", "\n", "envs", "=", "[", "SJSSP", "(", "n_j", "=", "configs", ".", "n_j", ",", "n_m", "=", "configs", ".", "n_m", ")", "for", "_", "in", "range", "(", "configs", ".", "num_envs", ")", "]", "\n", "\n", "from", "uniform_instance_gen", "import", "uni_instance_gen", "\n", "data_generator", "=", "uni_instance_gen", "\n", "\n", "dataLoaded", "=", "np", ".", "load", "(", "'./DataGen/generatedData'", "+", "str", "(", "configs", ".", "n_j", ")", "+", "'_'", "+", "str", "(", "configs", ".", "n_m", ")", "+", "'_Seed'", "+", "str", "(", "configs", ".", "np_seed_validation", ")", "+", "'.npy'", ")", "\n", "vali_data", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "dataLoaded", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "vali_data", ".", "append", "(", "(", "dataLoaded", "[", "i", "]", "[", "0", "]", ",", "dataLoaded", "[", "i", "]", "[", "1", "]", ")", ")", "\n", "\n", "", "torch", ".", "manual_seed", "(", "configs", ".", "torch_seed", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "torch", ".", "cuda", ".", "manual_seed_all", "(", "configs", ".", "torch_seed", ")", "\n", "", "np", ".", "random", ".", "seed", "(", "configs", ".", "np_seed_train", ")", "\n", "\n", "memories", "=", "[", "Memory", "(", ")", "for", "_", "in", "range", "(", "configs", ".", "num_envs", ")", "]", "\n", "\n", "ppo", "=", "PPO", "(", "configs", ".", "lr", ",", "configs", ".", "gamma", ",", "configs", ".", "k_epochs", ",", "configs", ".", "eps_clip", ",", "\n", "n_j", "=", "configs", ".", "n_j", ",", "\n", "n_m", "=", "configs", ".", "n_m", ",", "\n", "num_layers", "=", "configs", ".", "num_layers", ",", "\n", "neighbor_pooling_type", "=", "configs", ".", "neighbor_pooling_type", ",", "\n", "input_dim", "=", "configs", ".", "input_dim", ",", "\n", "hidden_dim", "=", "configs", ".", "hidden_dim", ",", "\n", "num_mlp_layers_feature_extract", "=", "configs", ".", "num_mlp_layers_feature_extract", ",", "\n", "num_mlp_layers_actor", "=", "configs", ".", "num_mlp_layers_actor", ",", "\n", "hidden_dim_actor", "=", "configs", ".", "hidden_dim_actor", ",", "\n", "num_mlp_layers_critic", "=", "configs", ".", "num_mlp_layers_critic", ",", "\n", "hidden_dim_critic", "=", "configs", ".", "hidden_dim_critic", ")", "\n", "\n", "g_pool_step", "=", "g_pool_cal", "(", "graph_pool_type", "=", "configs", ".", "graph_pool_type", ",", "\n", "batch_size", "=", "torch", ".", "Size", "(", "[", "1", ",", "configs", ".", "n_j", "*", "configs", ".", "n_m", ",", "configs", ".", "n_j", "*", "configs", ".", "n_m", "]", ")", ",", "\n", "n_nodes", "=", "configs", ".", "n_j", "*", "configs", ".", "n_m", ",", "\n", "device", "=", "device", ")", "\n", "# training loop", "\n", "log", "=", "[", "]", "\n", "validation_log", "=", "[", "]", "\n", "optimal_gaps", "=", "[", "]", "\n", "optimal_gap", "=", "1", "\n", "record", "=", "100000", "\n", "for", "i_update", "in", "range", "(", "configs", ".", "max_updates", ")", ":", "\n", "\n", "        ", "t3", "=", "time", ".", "time", "(", ")", "\n", "\n", "ep_rewards", "=", "[", "0", "for", "_", "in", "range", "(", "configs", ".", "num_envs", ")", "]", "\n", "adj_envs", "=", "[", "]", "\n", "fea_envs", "=", "[", "]", "\n", "candidate_envs", "=", "[", "]", "\n", "mask_envs", "=", "[", "]", "\n", "\n", "for", "i", ",", "env", "in", "enumerate", "(", "envs", ")", ":", "\n", "            ", "adj", ",", "fea", ",", "candidate", ",", "mask", "=", "env", ".", "reset", "(", "data_generator", "(", "n_j", "=", "configs", ".", "n_j", ",", "n_m", "=", "configs", ".", "n_m", ",", "low", "=", "configs", ".", "low", ",", "high", "=", "configs", ".", "high", ")", ")", "\n", "adj_envs", ".", "append", "(", "adj", ")", "\n", "fea_envs", ".", "append", "(", "fea", ")", "\n", "candidate_envs", ".", "append", "(", "candidate", ")", "\n", "mask_envs", ".", "append", "(", "mask", ")", "\n", "ep_rewards", "[", "i", "]", "=", "-", "env", ".", "initQuality", "\n", "# rollout the env", "\n", "", "while", "True", ":", "\n", "            ", "fea_tensor_envs", "=", "[", "torch", ".", "from_numpy", "(", "np", ".", "copy", "(", "fea", ")", ")", ".", "to", "(", "device", ")", "for", "fea", "in", "fea_envs", "]", "\n", "adj_tensor_envs", "=", "[", "torch", ".", "from_numpy", "(", "np", ".", "copy", "(", "adj", ")", ")", ".", "to", "(", "device", ")", ".", "to_sparse", "(", ")", "for", "adj", "in", "adj_envs", "]", "\n", "candidate_tensor_envs", "=", "[", "torch", ".", "from_numpy", "(", "np", ".", "copy", "(", "candidate", ")", ")", ".", "to", "(", "device", ")", "for", "candidate", "in", "candidate_envs", "]", "\n", "mask_tensor_envs", "=", "[", "torch", ".", "from_numpy", "(", "np", ".", "copy", "(", "mask", ")", ")", ".", "to", "(", "device", ")", "for", "mask", "in", "mask_envs", "]", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "action_envs", "=", "[", "]", "\n", "a_idx_envs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "configs", ".", "num_envs", ")", ":", "\n", "                    ", "pi", ",", "_", "=", "ppo", ".", "policy_old", "(", "x", "=", "fea_tensor_envs", "[", "i", "]", ",", "\n", "graph_pool", "=", "g_pool_step", ",", "\n", "padded_nei", "=", "None", ",", "\n", "adj", "=", "adj_tensor_envs", "[", "i", "]", ",", "\n", "candidate", "=", "candidate_tensor_envs", "[", "i", "]", ".", "unsqueeze", "(", "0", ")", ",", "\n", "mask", "=", "mask_tensor_envs", "[", "i", "]", ".", "unsqueeze", "(", "0", ")", ")", "\n", "action", ",", "a_idx", "=", "select_action", "(", "pi", ",", "candidate_envs", "[", "i", "]", ",", "memories", "[", "i", "]", ")", "\n", "action_envs", ".", "append", "(", "action", ")", "\n", "a_idx_envs", ".", "append", "(", "a_idx", ")", "\n", "\n", "", "", "adj_envs", "=", "[", "]", "\n", "fea_envs", "=", "[", "]", "\n", "candidate_envs", "=", "[", "]", "\n", "mask_envs", "=", "[", "]", "\n", "# Saving episode data", "\n", "for", "i", "in", "range", "(", "configs", ".", "num_envs", ")", ":", "\n", "                ", "memories", "[", "i", "]", ".", "adj_mb", ".", "append", "(", "adj_tensor_envs", "[", "i", "]", ")", "\n", "memories", "[", "i", "]", ".", "fea_mb", ".", "append", "(", "fea_tensor_envs", "[", "i", "]", ")", "\n", "memories", "[", "i", "]", ".", "candidate_mb", ".", "append", "(", "candidate_tensor_envs", "[", "i", "]", ")", "\n", "memories", "[", "i", "]", ".", "mask_mb", ".", "append", "(", "mask_tensor_envs", "[", "i", "]", ")", "\n", "memories", "[", "i", "]", ".", "a_mb", ".", "append", "(", "a_idx_envs", "[", "i", "]", ")", "\n", "\n", "adj", ",", "fea", ",", "reward", ",", "done", ",", "candidate", ",", "mask", "=", "envs", "[", "i", "]", ".", "step", "(", "action_envs", "[", "i", "]", ".", "item", "(", ")", ")", "\n", "adj_envs", ".", "append", "(", "adj", ")", "\n", "fea_envs", ".", "append", "(", "fea", ")", "\n", "candidate_envs", ".", "append", "(", "candidate", ")", "\n", "mask_envs", ".", "append", "(", "mask", ")", "\n", "ep_rewards", "[", "i", "]", "+=", "reward", "\n", "memories", "[", "i", "]", ".", "r_mb", ".", "append", "(", "reward", ")", "\n", "memories", "[", "i", "]", ".", "done_mb", ".", "append", "(", "done", ")", "\n", "", "if", "envs", "[", "0", "]", ".", "done", "(", ")", ":", "\n", "                ", "break", "\n", "", "", "for", "j", "in", "range", "(", "configs", ".", "num_envs", ")", ":", "\n", "            ", "ep_rewards", "[", "j", "]", "-=", "envs", "[", "j", "]", ".", "posRewards", "\n", "\n", "", "loss", ",", "v_loss", "=", "ppo", ".", "update", "(", "memories", ",", "configs", ".", "n_j", "*", "configs", ".", "n_m", ",", "configs", ".", "graph_pool_type", ")", "\n", "for", "memory", "in", "memories", ":", "\n", "            ", "memory", ".", "clear_memory", "(", ")", "\n", "", "mean_rewards_all_env", "=", "sum", "(", "ep_rewards", ")", "/", "len", "(", "ep_rewards", ")", "\n", "log", ".", "append", "(", "[", "i_update", ",", "mean_rewards_all_env", "]", ")", "\n", "if", "(", "i_update", "+", "1", ")", "%", "100", "==", "0", ":", "\n", "            ", "file_writing_obj", "=", "open", "(", "'./'", "+", "'log_'", "+", "str", "(", "configs", ".", "n_j", ")", "+", "'_'", "+", "str", "(", "configs", ".", "n_m", ")", "+", "'_'", "+", "str", "(", "configs", ".", "low", ")", "+", "'_'", "+", "str", "(", "configs", ".", "high", ")", "+", "'.txt'", ",", "'w'", ")", "\n", "file_writing_obj", ".", "write", "(", "str", "(", "log", ")", ")", "\n", "\n", "# log results", "\n", "", "print", "(", "'Episode {}\\t Last reward: {:.2f}\\t Mean_Vloss: {:.8f}'", ".", "format", "(", "\n", "i_update", "+", "1", ",", "mean_rewards_all_env", ",", "v_loss", ")", ")", "\n", "\n", "# validate and save use mean performance", "\n", "t4", "=", "time", ".", "time", "(", ")", "\n", "if", "(", "i_update", "+", "1", ")", "%", "100", "==", "0", ":", "\n", "            ", "vali_result", "=", "-", "validate", "(", "vali_data", ",", "ppo", ".", "policy", ")", ".", "mean", "(", ")", "\n", "validation_log", ".", "append", "(", "vali_result", ")", "\n", "if", "vali_result", "<", "record", ":", "\n", "                ", "torch", ".", "save", "(", "ppo", ".", "policy", ".", "state_dict", "(", ")", ",", "'./{}.pth'", ".", "format", "(", "\n", "str", "(", "configs", ".", "n_j", ")", "+", "'_'", "+", "str", "(", "configs", ".", "n_m", ")", "+", "'_'", "+", "str", "(", "configs", ".", "low", ")", "+", "'_'", "+", "str", "(", "configs", ".", "high", ")", ")", ")", "\n", "record", "=", "vali_result", "\n", "", "print", "(", "'The validation quality is:'", ",", "vali_result", ")", "\n", "file_writing_obj1", "=", "open", "(", "\n", "'./'", "+", "'vali_'", "+", "str", "(", "configs", ".", "n_j", ")", "+", "'_'", "+", "str", "(", "configs", ".", "n_m", ")", "+", "'_'", "+", "str", "(", "configs", ".", "low", ")", "+", "'_'", "+", "str", "(", "configs", ".", "high", ")", "+", "'.txt'", ",", "'w'", ")", "\n", "file_writing_obj1", ".", "write", "(", "str", "(", "validation_log", ")", ")", "\n", "", "t5", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zcajiayin_L2D.None.permissibleLS.permissibleLeftShift": [[5, 26], ["permissibleLS.calJobAndMchRdyTimeOfa", "numpy.take", "numpy.take", "numpy.where", "len", "permissibleLS.putInTheEnd", "permissibleLS.calLegalPos", "len", "permissibleLS.putInTheEnd", "permissibleLS.putInBetween"], "function", ["home.repos.pwc.inspect_result.zcajiayin_L2D.None.permissibleLS.calJobAndMchRdyTimeOfa", "home.repos.pwc.inspect_result.zcajiayin_L2D.None.permissibleLS.putInTheEnd", "home.repos.pwc.inspect_result.zcajiayin_L2D.None.permissibleLS.calLegalPos", "home.repos.pwc.inspect_result.zcajiayin_L2D.None.permissibleLS.putInTheEnd", "home.repos.pwc.inspect_result.zcajiayin_L2D.None.permissibleLS.putInBetween"], ["def", "permissibleLeftShift", "(", "a", ",", "durMat", ",", "mchMat", ",", "mchsStartTimes", ",", "opIDsOnMchs", ")", ":", "\n", "    ", "jobRdyTime_a", ",", "mchRdyTime_a", "=", "calJobAndMchRdyTimeOfa", "(", "a", ",", "mchMat", ",", "durMat", ",", "mchsStartTimes", ",", "opIDsOnMchs", ")", "\n", "dur_a", "=", "np", ".", "take", "(", "durMat", ",", "a", ")", "\n", "mch_a", "=", "np", ".", "take", "(", "mchMat", ",", "a", ")", "-", "1", "\n", "startTimesForMchOfa", "=", "mchsStartTimes", "[", "mch_a", "]", "\n", "opsIDsForMchOfa", "=", "opIDsOnMchs", "[", "mch_a", "]", "\n", "flag", "=", "False", "\n", "\n", "possiblePos", "=", "np", ".", "where", "(", "jobRdyTime_a", "<", "startTimesForMchOfa", ")", "[", "0", "]", "\n", "# print('possiblePos:', possiblePos)", "\n", "if", "len", "(", "possiblePos", ")", "==", "0", ":", "\n", "        ", "startTime_a", "=", "putInTheEnd", "(", "a", ",", "jobRdyTime_a", ",", "mchRdyTime_a", ",", "startTimesForMchOfa", ",", "opsIDsForMchOfa", ")", "\n", "", "else", ":", "\n", "        ", "idxLegalPos", ",", "legalPos", ",", "endTimesForPossiblePos", "=", "calLegalPos", "(", "dur_a", ",", "jobRdyTime_a", ",", "durMat", ",", "possiblePos", ",", "startTimesForMchOfa", ",", "opsIDsForMchOfa", ")", "\n", "# print('legalPos:', legalPos)", "\n", "if", "len", "(", "legalPos", ")", "==", "0", ":", "\n", "            ", "startTime_a", "=", "putInTheEnd", "(", "a", ",", "jobRdyTime_a", ",", "mchRdyTime_a", ",", "startTimesForMchOfa", ",", "opsIDsForMchOfa", ")", "\n", "", "else", ":", "\n", "            ", "flag", "=", "True", "\n", "startTime_a", "=", "putInBetween", "(", "a", ",", "idxLegalPos", ",", "legalPos", ",", "endTimesForPossiblePos", ",", "startTimesForMchOfa", ",", "opsIDsForMchOfa", ")", "\n", "", "", "return", "startTime_a", ",", "flag", "\n", "\n"]], "home.repos.pwc.inspect_result.zcajiayin_L2D.None.permissibleLS.putInTheEnd": [[28, 36], ["max", "numpy.where"], "function", ["None"], ["", "def", "putInTheEnd", "(", "a", ",", "jobRdyTime_a", ",", "mchRdyTime_a", ",", "startTimesForMchOfa", ",", "opsIDsForMchOfa", ")", ":", "\n", "# index = first position of -config.high in startTimesForMchOfa", "\n", "# print('Yes!OK!')", "\n", "    ", "index", "=", "np", ".", "where", "(", "startTimesForMchOfa", "==", "-", "configs", ".", "high", ")", "[", "0", "]", "[", "0", "]", "\n", "startTime_a", "=", "max", "(", "jobRdyTime_a", ",", "mchRdyTime_a", ")", "\n", "startTimesForMchOfa", "[", "index", "]", "=", "startTime_a", "\n", "opsIDsForMchOfa", "[", "index", "]", "=", "a", "\n", "return", "startTime_a", "\n", "\n"]], "home.repos.pwc.inspect_result.zcajiayin_L2D.None.permissibleLS.calLegalPos": [[38, 47], ["numpy.take", "max", "numpy.take", "numpy.append", "numpy.where", "numpy.take"], "function", ["None"], ["", "def", "calLegalPos", "(", "dur_a", ",", "jobRdyTime_a", ",", "durMat", ",", "possiblePos", ",", "startTimesForMchOfa", ",", "opsIDsForMchOfa", ")", ":", "\n", "    ", "startTimesOfPossiblePos", "=", "startTimesForMchOfa", "[", "possiblePos", "]", "\n", "durOfPossiblePos", "=", "np", ".", "take", "(", "durMat", ",", "opsIDsForMchOfa", "[", "possiblePos", "]", ")", "\n", "startTimeEarlst", "=", "max", "(", "jobRdyTime_a", ",", "startTimesForMchOfa", "[", "possiblePos", "[", "0", "]", "-", "1", "]", "+", "np", ".", "take", "(", "durMat", ",", "[", "opsIDsForMchOfa", "[", "possiblePos", "[", "0", "]", "-", "1", "]", "]", ")", ")", "\n", "endTimesForPossiblePos", "=", "np", ".", "append", "(", "startTimeEarlst", ",", "(", "startTimesOfPossiblePos", "+", "durOfPossiblePos", ")", ")", "[", ":", "-", "1", "]", "# end time for last ops don't care", "\n", "possibleGaps", "=", "startTimesOfPossiblePos", "-", "endTimesForPossiblePos", "\n", "idxLegalPos", "=", "np", ".", "where", "(", "dur_a", "<=", "possibleGaps", ")", "[", "0", "]", "\n", "legalPos", "=", "np", ".", "take", "(", "possiblePos", ",", "idxLegalPos", ")", "\n", "return", "idxLegalPos", ",", "legalPos", ",", "endTimesForPossiblePos", "\n", "\n"]], "home.repos.pwc.inspect_result.zcajiayin_L2D.None.permissibleLS.putInBetween": [[49, 58], ["numpy.insert", "numpy.insert"], "function", ["None"], ["", "def", "putInBetween", "(", "a", ",", "idxLegalPos", ",", "legalPos", ",", "endTimesForPossiblePos", ",", "startTimesForMchOfa", ",", "opsIDsForMchOfa", ")", ":", "\n", "    ", "earlstIdx", "=", "idxLegalPos", "[", "0", "]", "\n", "# print('idxLegalPos:', idxLegalPos)", "\n", "earlstPos", "=", "legalPos", "[", "0", "]", "\n", "startTime_a", "=", "endTimesForPossiblePos", "[", "earlstIdx", "]", "\n", "# print('endTimesForPossiblePos:', endTimesForPossiblePos)", "\n", "startTimesForMchOfa", "[", ":", "]", "=", "np", ".", "insert", "(", "startTimesForMchOfa", ",", "earlstPos", ",", "startTime_a", ")", "[", ":", "-", "1", "]", "\n", "opsIDsForMchOfa", "[", ":", "]", "=", "np", ".", "insert", "(", "opsIDsForMchOfa", ",", "earlstPos", ",", "a", ")", "[", ":", "-", "1", "]", "\n", "return", "startTime_a", "\n", "\n"]], "home.repos.pwc.inspect_result.zcajiayin_L2D.None.permissibleLS.calJobAndMchRdyTimeOfa": [[60, 79], ["numpy.take", "numpy.take", "numpy.take", "numpy.take", "len", "numpy.where", "numpy.where", "numpy.where", "numpy.where"], "function", ["None"], ["", "def", "calJobAndMchRdyTimeOfa", "(", "a", ",", "mchMat", ",", "durMat", ",", "mchsStartTimes", ",", "opIDsOnMchs", ")", ":", "\n", "    ", "mch_a", "=", "np", ".", "take", "(", "mchMat", ",", "a", ")", "-", "1", "\n", "# cal jobRdyTime_a", "\n", "jobPredecessor", "=", "a", "-", "1", "if", "a", "%", "mchMat", ".", "shape", "[", "1", "]", "!=", "0", "else", "None", "\n", "if", "jobPredecessor", "is", "not", "None", ":", "\n", "        ", "durJobPredecessor", "=", "np", ".", "take", "(", "durMat", ",", "jobPredecessor", ")", "\n", "mchJobPredecessor", "=", "np", ".", "take", "(", "mchMat", ",", "jobPredecessor", ")", "-", "1", "\n", "jobRdyTime_a", "=", "(", "mchsStartTimes", "[", "mchJobPredecessor", "]", "[", "np", ".", "where", "(", "opIDsOnMchs", "[", "mchJobPredecessor", "]", "==", "jobPredecessor", ")", "]", "+", "durJobPredecessor", ")", ".", "item", "(", ")", "\n", "", "else", ":", "\n", "        ", "jobRdyTime_a", "=", "0", "\n", "# cal mchRdyTime_a", "\n", "", "mchPredecessor", "=", "opIDsOnMchs", "[", "mch_a", "]", "[", "np", ".", "where", "(", "opIDsOnMchs", "[", "mch_a", "]", ">=", "0", ")", "]", "[", "-", "1", "]", "if", "len", "(", "np", ".", "where", "(", "opIDsOnMchs", "[", "mch_a", "]", ">=", "0", ")", "[", "0", "]", ")", "!=", "0", "else", "None", "\n", "if", "mchPredecessor", "is", "not", "None", ":", "\n", "        ", "durMchPredecessor", "=", "np", ".", "take", "(", "durMat", ",", "mchPredecessor", ")", "\n", "mchRdyTime_a", "=", "(", "mchsStartTimes", "[", "mch_a", "]", "[", "np", ".", "where", "(", "mchsStartTimes", "[", "mch_a", "]", ">=", "0", ")", "]", "[", "-", "1", "]", "+", "durMchPredecessor", ")", ".", "item", "(", ")", "\n", "", "else", ":", "\n", "        ", "mchRdyTime_a", "=", "0", "\n", "\n", "", "return", "jobRdyTime_a", ",", "mchRdyTime_a", "\n", "\n"]], "home.repos.pwc.inspect_result.zcajiayin_L2D.None.updateEntTimeLB.lastNonZero": [[4, 12], ["numpy.where", "numpy.arange", "mask.any", "numpy.flip().argmax", "numpy.flip"], "function", ["None"], ["def", "lastNonZero", "(", "arr", ",", "axis", ",", "invalid_val", "=", "-", "1", ")", ":", "\n", "    ", "mask", "=", "arr", "!=", "0", "\n", "val", "=", "arr", ".", "shape", "[", "axis", "]", "-", "np", ".", "flip", "(", "mask", ",", "axis", "=", "axis", ")", ".", "argmax", "(", "axis", "=", "axis", ")", "-", "1", "\n", "yAxis", "=", "np", ".", "where", "(", "mask", ".", "any", "(", "axis", "=", "axis", ")", ",", "val", ",", "invalid_val", ")", "\n", "xAxis", "=", "np", ".", "arange", "(", "arr", ".", "shape", "[", "0", "]", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "xRet", "=", "xAxis", "[", "yAxis", ">=", "0", "]", "\n", "yRet", "=", "yAxis", "[", "yAxis", ">=", "0", "]", "\n", "return", "xRet", ",", "yRet", "\n", "\n"]], "home.repos.pwc.inspect_result.zcajiayin_L2D.None.updateEntTimeLB.calEndTimeLB": [[14, 22], ["updateEntTimeLB.lastNonZero", "numpy.cumsum", "numpy.where", "numpy.where"], "function", ["home.repos.pwc.inspect_result.zcajiayin_L2D.None.updateEntTimeLB.lastNonZero"], ["", "def", "calEndTimeLB", "(", "temp1", ",", "dur_cp", ")", ":", "\n", "    ", "x", ",", "y", "=", "lastNonZero", "(", "temp1", ",", "1", ",", "invalid_val", "=", "-", "1", ")", "\n", "dur_cp", "[", "np", ".", "where", "(", "temp1", "!=", "0", ")", "]", "=", "0", "\n", "dur_cp", "[", "x", ",", "y", "]", "=", "temp1", "[", "x", ",", "y", "]", "\n", "temp2", "=", "np", ".", "cumsum", "(", "dur_cp", ",", "axis", "=", "1", ")", "\n", "temp2", "[", "np", ".", "where", "(", "temp1", "!=", "0", ")", "]", "=", "0", "\n", "ret", "=", "temp1", "+", "temp2", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.zcajiayin_L2D.None.mb_agg.aggr_obs": [[4, 19], ["obs_mb.coalesce().indices", "obs_mb.coalesce().values", "torch.stack", "torch.sparse.FloatTensor().to", "obs_mb.coalesce", "obs_mb.coalesce", "torch.sparse.FloatTensor", "torch.Size"], "function", ["None"], ["def", "aggr_obs", "(", "obs_mb", ",", "n_node", ")", ":", "\n", "# obs_mb is [m, n_nodes_each_state, fea_dim], m is number of nodes in batch", "\n", "    ", "idxs", "=", "obs_mb", ".", "coalesce", "(", ")", ".", "indices", "(", ")", "\n", "vals", "=", "obs_mb", ".", "coalesce", "(", ")", ".", "values", "(", ")", "\n", "new_idx_row", "=", "idxs", "[", "1", "]", "+", "idxs", "[", "0", "]", "*", "n_node", "\n", "new_idx_col", "=", "idxs", "[", "2", "]", "+", "idxs", "[", "0", "]", "*", "n_node", "\n", "idx_mb", "=", "torch", ".", "stack", "(", "(", "new_idx_row", ",", "new_idx_col", ")", ")", "\n", "# print(idx_mb)", "\n", "# print(obs_mb.shape[0])", "\n", "adj_batch", "=", "torch", ".", "sparse", ".", "FloatTensor", "(", "indices", "=", "idx_mb", ",", "\n", "values", "=", "vals", ",", "\n", "size", "=", "torch", ".", "Size", "(", "[", "obs_mb", ".", "shape", "[", "0", "]", "*", "n_node", ",", "\n", "obs_mb", ".", "shape", "[", "0", "]", "*", "n_node", "]", ")", ",", "\n", ")", ".", "to", "(", "obs_mb", ".", "device", ")", "\n", "return", "adj_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.zcajiayin_L2D.None.mb_agg.g_pool_cal": [[21, 50], ["torch.arange", "idx_0.repeat().t().reshape().squeeze.repeat().t().reshape().squeeze", "torch.arange", "torch.stack", "torch.sparse.FloatTensor().to", "torch.full().view", "torch.full().view", "idx_0.repeat().t().reshape().squeeze.repeat().t().reshape", "torch.sparse.FloatTensor", "torch.full", "torch.full", "torch.Size", "idx_0.repeat().t().reshape().squeeze.repeat().t", "idx_0.repeat().t().reshape().squeeze.repeat"], "function", ["None"], ["", "def", "g_pool_cal", "(", "graph_pool_type", ",", "batch_size", ",", "n_nodes", ",", "device", ")", ":", "\n", "# batch_size is the shape of batch", "\n", "# for graph pool sparse matrix", "\n", "    ", "if", "graph_pool_type", "==", "'average'", ":", "\n", "        ", "elem", "=", "torch", ".", "full", "(", "size", "=", "(", "batch_size", "[", "0", "]", "*", "n_nodes", ",", "1", ")", ",", "\n", "fill_value", "=", "1", "/", "n_nodes", ",", "\n", "dtype", "=", "torch", ".", "float32", ",", "\n", "device", "=", "device", ")", ".", "view", "(", "-", "1", ")", "\n", "", "else", ":", "\n", "        ", "elem", "=", "torch", ".", "full", "(", "size", "=", "(", "batch_size", "[", "0", "]", "*", "n_nodes", ",", "1", ")", ",", "\n", "fill_value", "=", "1", ",", "\n", "dtype", "=", "torch", ".", "float32", ",", "\n", "device", "=", "device", ")", ".", "view", "(", "-", "1", ")", "\n", "", "idx_0", "=", "torch", ".", "arange", "(", "start", "=", "0", ",", "end", "=", "batch_size", "[", "0", "]", ",", "\n", "device", "=", "device", ",", "\n", "dtype", "=", "torch", ".", "long", ")", "\n", "# print(idx_0)", "\n", "idx_0", "=", "idx_0", ".", "repeat", "(", "n_nodes", ",", "1", ")", ".", "t", "(", ")", ".", "reshape", "(", "(", "batch_size", "[", "0", "]", "*", "n_nodes", ",", "1", ")", ")", ".", "squeeze", "(", ")", "\n", "\n", "idx_1", "=", "torch", ".", "arange", "(", "start", "=", "0", ",", "end", "=", "n_nodes", "*", "batch_size", "[", "0", "]", ",", "\n", "device", "=", "device", ",", "\n", "dtype", "=", "torch", ".", "long", ")", "\n", "idx", "=", "torch", ".", "stack", "(", "(", "idx_0", ",", "idx_1", ")", ")", "\n", "graph_pool", "=", "torch", ".", "sparse", ".", "FloatTensor", "(", "idx", ",", "elem", ",", "\n", "torch", ".", "Size", "(", "[", "batch_size", "[", "0", "]", ",", "\n", "n_nodes", "*", "batch_size", "[", "0", "]", "]", ")", "\n", ")", ".", "to", "(", "device", ")", "\n", "\n", "return", "graph_pool", "\n", "\n"]], "home.repos.pwc.inspect_result.zcajiayin_L2D.None.JSSP_Env.SJSSP.__init__": [[12, 27], ["gym.utils.EzPickle.__init__", "numpy.arange().reshape", "numpy.arange().reshape", "numpy.arange", "numpy.arange"], "methods", ["home.repos.pwc.inspect_result.zcajiayin_L2D.models.actor_critic.ActorCritic.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "n_j", ",", "\n", "n_m", ")", ":", "\n", "        ", "EzPickle", ".", "__init__", "(", "self", ")", "\n", "\n", "self", ".", "step_count", "=", "0", "\n", "self", ".", "number_of_jobs", "=", "n_j", "\n", "self", ".", "number_of_machines", "=", "n_m", "\n", "self", ".", "number_of_tasks", "=", "self", ".", "number_of_jobs", "*", "self", ".", "number_of_machines", "\n", "# the task id for first column", "\n", "self", ".", "first_col", "=", "np", ".", "arange", "(", "start", "=", "0", ",", "stop", "=", "self", ".", "number_of_tasks", ",", "step", "=", "1", ")", ".", "reshape", "(", "self", ".", "number_of_jobs", ",", "-", "1", ")", "[", ":", ",", "0", "]", "\n", "# the task id for last column", "\n", "self", ".", "last_col", "=", "np", ".", "arange", "(", "start", "=", "0", ",", "stop", "=", "self", ".", "number_of_tasks", ",", "step", "=", "1", ")", ".", "reshape", "(", "self", ".", "number_of_jobs", ",", "-", "1", ")", "[", ":", ",", "-", "1", "]", "\n", "self", ".", "getEndTimeLB", "=", "calEndTimeLB", "\n", "self", ".", "getNghbs", "=", "getActionNbghs", "\n", "\n"]], "home.repos.pwc.inspect_result.zcajiayin_L2D.None.JSSP_Env.SJSSP.done": [[28, 32], ["len"], "methods", ["None"], ["", "def", "done", "(", "self", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "partial_sol_sequeence", ")", "==", "self", ".", "number_of_tasks", ":", "\n", "            ", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.zcajiayin_L2D.None.JSSP_Env.SJSSP.step": [[33, 82], ["numpy.concatenate", "JSSP_Env.SJSSP.LBs.max", "JSSP_Env.SJSSP.partial_sol_sequeence.append", "permissibleLS.permissibleLeftShift", "JSSP_Env.SJSSP.flags.append", "updateEntTimeLB.calEndTimeLB", "JSSP_Env.SJSSP.getNghbs", "JSSP_Env.SJSSP.done", "JSSP_Env.SJSSP.finished_mark.reshape", "JSSP_Env.SJSSP.LBs.max", "JSSP_Env.SJSSP.LBs.reshape"], "methods", ["home.repos.pwc.inspect_result.zcajiayin_L2D.None.permissibleLS.permissibleLeftShift", "home.repos.pwc.inspect_result.zcajiayin_L2D.None.updateEntTimeLB.calEndTimeLB", "home.repos.pwc.inspect_result.zcajiayin_L2D.None.JSSP_Env.SJSSP.done"], ["", "@", "override", "\n", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "# action is a int 0 - 224 for 15x15 for example", "\n", "# redundant action makes no effect", "\n", "        ", "if", "action", "not", "in", "self", ".", "partial_sol_sequeence", ":", "\n", "\n", "# UPDATE BASIC INFO:", "\n", "            ", "row", "=", "action", "//", "self", ".", "number_of_machines", "\n", "col", "=", "action", "%", "self", ".", "number_of_machines", "\n", "self", ".", "step_count", "+=", "1", "\n", "self", ".", "finished_mark", "[", "row", ",", "col", "]", "=", "1", "\n", "dur_a", "=", "self", ".", "dur", "[", "row", ",", "col", "]", "\n", "self", ".", "partial_sol_sequeence", ".", "append", "(", "action", ")", "\n", "\n", "# UPDATE STATE:", "\n", "# permissible left shift", "\n", "startTime_a", ",", "flag", "=", "permissibleLeftShift", "(", "a", "=", "action", ",", "durMat", "=", "self", ".", "dur", ",", "mchMat", "=", "self", ".", "m", ",", "mchsStartTimes", "=", "self", ".", "mchsStartTimes", ",", "opIDsOnMchs", "=", "self", ".", "opIDsOnMchs", ")", "\n", "self", ".", "flags", ".", "append", "(", "flag", ")", "\n", "# update omega or mask", "\n", "if", "action", "not", "in", "self", ".", "last_col", ":", "\n", "                ", "self", ".", "omega", "[", "action", "//", "self", ".", "number_of_machines", "]", "+=", "1", "\n", "", "else", ":", "\n", "                ", "self", ".", "mask", "[", "action", "//", "self", ".", "number_of_machines", "]", "=", "1", "\n", "\n", "", "self", ".", "temp1", "[", "row", ",", "col", "]", "=", "startTime_a", "+", "dur_a", "\n", "\n", "self", ".", "LBs", "=", "calEndTimeLB", "(", "self", ".", "temp1", ",", "self", ".", "dur_cp", ")", "\n", "\n", "# adj matrix", "\n", "precd", ",", "succd", "=", "self", ".", "getNghbs", "(", "action", ",", "self", ".", "opIDsOnMchs", ")", "\n", "self", ".", "adj", "[", "action", "]", "=", "0", "\n", "self", ".", "adj", "[", "action", ",", "action", "]", "=", "1", "\n", "if", "action", "not", "in", "self", ".", "first_col", ":", "\n", "                ", "self", ".", "adj", "[", "action", ",", "action", "-", "1", "]", "=", "1", "\n", "", "self", ".", "adj", "[", "action", ",", "precd", "]", "=", "1", "\n", "self", ".", "adj", "[", "succd", ",", "action", "]", "=", "1", "\n", "if", "flag", "and", "precd", "!=", "action", "and", "succd", "!=", "action", ":", "# Remove the old arc when a new operation inserts between two operations", "\n", "                ", "self", ".", "adj", "[", "succd", ",", "precd", "]", "=", "0", "\n", "\n", "# prepare for return", "\n", "", "", "fea", "=", "np", ".", "concatenate", "(", "(", "self", ".", "LBs", ".", "reshape", "(", "-", "1", ",", "1", ")", "/", "configs", ".", "et_normalize_coef", ",", "\n", "self", ".", "finished_mark", ".", "reshape", "(", "-", "1", ",", "1", ")", ")", ",", "axis", "=", "1", ")", "\n", "reward", "=", "-", "(", "self", ".", "LBs", ".", "max", "(", ")", "-", "self", ".", "max_endTime", ")", "\n", "if", "reward", "==", "0", ":", "\n", "            ", "reward", "=", "configs", ".", "rewardscale", "\n", "self", ".", "posRewards", "+=", "reward", "\n", "", "self", ".", "max_endTime", "=", "self", ".", "LBs", ".", "max", "(", ")", "\n", "\n", "return", "self", ".", "adj", ",", "fea", ",", "reward", ",", "self", ".", "done", "(", ")", ",", "self", ".", "omega", ",", "self", ".", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.zcajiayin_L2D.None.JSSP_Env.SJSSP.reset": [[83, 129], ["data[].astype", "numpy.copy", "numpy.eye", "numpy.eye", "numpy.eye", "numpy.cumsum", "numpy.zeros_like", "numpy.concatenate", "JSSP_Env.SJSSP.first_col.astype", "numpy.full", "numpy.zeros_like", "JSSP_Env.SJSSP.LBs.max", "numpy.ones_like", "numpy.ones_like", "JSSP_Env.SJSSP.finished_mark.reshape", "JSSP_Env.SJSSP.dur.transpose", "JSSP_Env.SJSSP.dur.transpose", "JSSP_Env.SJSSP.LBs.reshape"], "methods", ["None"], ["", "@", "override", "\n", "def", "reset", "(", "self", ",", "data", ")", ":", "\n", "\n", "        ", "self", ".", "step_count", "=", "0", "\n", "self", ".", "m", "=", "data", "[", "-", "1", "]", "\n", "self", ".", "dur", "=", "data", "[", "0", "]", ".", "astype", "(", "np", ".", "single", ")", "\n", "self", ".", "dur_cp", "=", "np", ".", "copy", "(", "self", ".", "dur", ")", "\n", "# record action history", "\n", "self", ".", "partial_sol_sequeence", "=", "[", "]", "\n", "self", ".", "flags", "=", "[", "]", "\n", "self", ".", "posRewards", "=", "0", "\n", "\n", "# initialize adj matrix", "\n", "conj_nei_up_stream", "=", "np", ".", "eye", "(", "self", ".", "number_of_tasks", ",", "k", "=", "-", "1", ",", "dtype", "=", "np", ".", "single", ")", "\n", "conj_nei_low_stream", "=", "np", ".", "eye", "(", "self", ".", "number_of_tasks", ",", "k", "=", "1", ",", "dtype", "=", "np", ".", "single", ")", "\n", "# first column does not have upper stream conj_nei", "\n", "conj_nei_up_stream", "[", "self", ".", "first_col", "]", "=", "0", "\n", "# last column does not have lower stream conj_nei", "\n", "conj_nei_low_stream", "[", "self", ".", "last_col", "]", "=", "0", "\n", "self_as_nei", "=", "np", ".", "eye", "(", "self", ".", "number_of_tasks", ",", "dtype", "=", "np", ".", "single", ")", "\n", "self", ".", "adj", "=", "self_as_nei", "+", "conj_nei_up_stream", "\n", "\n", "# initialize features", "\n", "self", ".", "LBs", "=", "np", ".", "cumsum", "(", "self", ".", "dur", ",", "axis", "=", "1", ",", "dtype", "=", "np", ".", "single", ")", "\n", "self", ".", "initQuality", "=", "self", ".", "LBs", ".", "max", "(", ")", "if", "not", "configs", ".", "init_quality_flag", "else", "0", "\n", "self", ".", "max_endTime", "=", "self", ".", "initQuality", "\n", "self", ".", "finished_mark", "=", "np", ".", "zeros_like", "(", "self", ".", "m", ",", "dtype", "=", "np", ".", "single", ")", "\n", "\n", "fea", "=", "np", ".", "concatenate", "(", "(", "self", ".", "LBs", ".", "reshape", "(", "-", "1", ",", "1", ")", "/", "configs", ".", "et_normalize_coef", ",", "\n", "# self.dur.reshape(-1, 1)/configs.high,", "\n", "# wkr.reshape(-1, 1)/configs.wkr_normalize_coef,", "\n", "self", ".", "finished_mark", ".", "reshape", "(", "-", "1", ",", "1", ")", ")", ",", "axis", "=", "1", ")", "\n", "# initialize feasible omega", "\n", "self", ".", "omega", "=", "self", ".", "first_col", ".", "astype", "(", "np", ".", "int64", ")", "\n", "\n", "# initialize mask", "\n", "self", ".", "mask", "=", "np", ".", "full", "(", "shape", "=", "self", ".", "number_of_jobs", ",", "fill_value", "=", "0", ",", "dtype", "=", "bool", ")", "\n", "\n", "# start time of operations on machines", "\n", "self", ".", "mchsStartTimes", "=", "-", "configs", ".", "high", "*", "np", ".", "ones_like", "(", "self", ".", "dur", ".", "transpose", "(", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "# Ops ID on machines", "\n", "self", ".", "opIDsOnMchs", "=", "-", "self", ".", "number_of_jobs", "*", "np", ".", "ones_like", "(", "self", ".", "dur", ".", "transpose", "(", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "self", ".", "temp1", "=", "np", ".", "zeros_like", "(", "self", ".", "dur", ",", "dtype", "=", "np", ".", "single", ")", "\n", "\n", "return", "self", ".", "adj", ",", "fea", ",", "self", ".", "omega", ",", "self", ".", "mask", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zcajiayin_L2D.None.agent_utils.select_action": [[4, 9], ["torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical.sample", "p.squeeze", "memory.logprobs.append", "torch.distributions.categorical.Categorical.log_prob"], "function", ["None"], ["def", "select_action", "(", "p", ",", "cadidate", ",", "memory", ")", ":", "\n", "    ", "dist", "=", "Categorical", "(", "p", ".", "squeeze", "(", ")", ")", "\n", "s", "=", "dist", ".", "sample", "(", ")", "\n", "if", "memory", "is", "not", "None", ":", "memory", ".", "logprobs", ".", "append", "(", "dist", ".", "log_prob", "(", "s", ")", ")", "\n", "return", "cadidate", "[", "s", "]", ",", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.zcajiayin_L2D.None.agent_utils.eval_actions": [[12, 17], ["torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical.log_prob().reshape", "torch.distributions.categorical.Categorical.entropy().mean", "torch.distributions.categorical.Categorical.log_prob", "torch.distributions.categorical.Categorical.entropy"], "function", ["None"], ["", "def", "eval_actions", "(", "p", ",", "actions", ")", ":", "\n", "    ", "softmax_dist", "=", "Categorical", "(", "p", ")", "\n", "ret", "=", "softmax_dist", ".", "log_prob", "(", "actions", ")", ".", "reshape", "(", "-", "1", ")", "\n", "entropy", "=", "softmax_dist", ".", "entropy", "(", ")", ".", "mean", "(", ")", "\n", "return", "ret", ",", "entropy", "\n", "\n"]], "home.repos.pwc.inspect_result.zcajiayin_L2D.None.agent_utils.greedy_select_action": [[20, 24], ["p.squeeze().max", "p.squeeze"], "function", ["None"], ["", "def", "greedy_select_action", "(", "p", ",", "candidate", ")", ":", "\n", "    ", "_", ",", "index", "=", "p", ".", "squeeze", "(", ")", ".", "max", "(", "0", ")", "\n", "action", "=", "candidate", "[", "index", "]", "\n", "return", "action", "\n", "\n"]], "home.repos.pwc.inspect_result.zcajiayin_L2D.None.agent_utils.sample_select_action": [[27, 31], ["torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical.sample", "p.squeeze"], "function", ["None"], ["", "def", "sample_select_action", "(", "p", ",", "candidate", ")", ":", "\n", "    ", "dist", "=", "Categorical", "(", "p", ".", "squeeze", "(", ")", ")", "\n", "s", "=", "dist", ".", "sample", "(", ")", "\n", "return", "candidate", "[", "s", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.zcajiayin_L2D.None.validation.validate": [[1, 44], ["SJSSP", "torch.device", "g_pool_cal", "np.array", "SJSSP.reset", "make_spans.append", "torch.Size", "torch.from_numpy().to", "torch.from_numpy().to().to_sparse", "torch.from_numpy().to", "torch.from_numpy().to", "greedy_select_action", "SJSSP.step", "torch.no_grad", "model", "greedy_select_action.item", "torch.from_numpy", "torch.from_numpy().to", "torch.from_numpy", "torch.from_numpy", "np.copy", "np.copy", "np.copy", "torch.from_numpy().to.unsqueeze", "torch.from_numpy().to.unsqueeze", "torch.from_numpy", "np.copy"], "function", ["home.repos.pwc.inspect_result.zcajiayin_L2D.None.mb_agg.g_pool_cal", "home.repos.pwc.inspect_result.zcajiayin_L2D.None.JSSP_Env.SJSSP.reset", "home.repos.pwc.inspect_result.zcajiayin_L2D.None.agent_utils.greedy_select_action", "home.repos.pwc.inspect_result.zcajiayin_L2D.None.JSSP_Env.SJSSP.step"], ["def", "validate", "(", "vali_set", ",", "model", ")", ":", "\n", "    ", "N_JOBS", "=", "vali_set", "[", "0", "]", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "N_MACHINES", "=", "vali_set", "[", "0", "]", "[", "0", "]", ".", "shape", "[", "1", "]", "\n", "\n", "from", "JSSP_Env", "import", "SJSSP", "\n", "from", "mb_agg", "import", "g_pool_cal", "\n", "from", "agent_utils", "import", "sample_select_action", "\n", "from", "agent_utils", "import", "greedy_select_action", "\n", "import", "numpy", "as", "np", "\n", "import", "torch", "\n", "from", "Params", "import", "configs", "\n", "env", "=", "SJSSP", "(", "n_j", "=", "N_JOBS", ",", "n_m", "=", "N_MACHINES", ")", "\n", "device", "=", "torch", ".", "device", "(", "configs", ".", "device", ")", "\n", "g_pool_step", "=", "g_pool_cal", "(", "graph_pool_type", "=", "configs", ".", "graph_pool_type", ",", "\n", "batch_size", "=", "torch", ".", "Size", "(", "[", "1", ",", "env", ".", "number_of_tasks", ",", "env", ".", "number_of_tasks", "]", ")", ",", "\n", "n_nodes", "=", "env", ".", "number_of_tasks", ",", "\n", "device", "=", "device", ")", "\n", "make_spans", "=", "[", "]", "\n", "# rollout using model", "\n", "for", "data", "in", "vali_set", ":", "\n", "        ", "adj", ",", "fea", ",", "candidate", ",", "mask", "=", "env", ".", "reset", "(", "data", ")", "\n", "rewards", "=", "-", "env", ".", "initQuality", "\n", "while", "True", ":", "\n", "            ", "fea_tensor", "=", "torch", ".", "from_numpy", "(", "np", ".", "copy", "(", "fea", ")", ")", ".", "to", "(", "device", ")", "\n", "adj_tensor", "=", "torch", ".", "from_numpy", "(", "np", ".", "copy", "(", "adj", ")", ")", ".", "to", "(", "device", ")", ".", "to_sparse", "(", ")", "\n", "candidate_tensor", "=", "torch", ".", "from_numpy", "(", "np", ".", "copy", "(", "candidate", ")", ")", ".", "to", "(", "device", ")", "\n", "mask_tensor", "=", "torch", ".", "from_numpy", "(", "np", ".", "copy", "(", "mask", ")", ")", ".", "to", "(", "device", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "pi", ",", "_", "=", "model", "(", "x", "=", "fea_tensor", ",", "\n", "graph_pool", "=", "g_pool_step", ",", "\n", "padded_nei", "=", "None", ",", "\n", "adj", "=", "adj_tensor", ",", "\n", "candidate", "=", "candidate_tensor", ".", "unsqueeze", "(", "0", ")", ",", "\n", "mask", "=", "mask_tensor", ".", "unsqueeze", "(", "0", ")", ")", "\n", "# action = sample_select_action(pi, candidate)", "\n", "", "action", "=", "greedy_select_action", "(", "pi", ",", "candidate", ")", "\n", "adj", ",", "fea", ",", "reward", ",", "done", ",", "candidate", ",", "mask", "=", "env", ".", "step", "(", "action", ".", "item", "(", ")", ")", "\n", "rewards", "+=", "reward", "\n", "if", "done", ":", "\n", "                ", "break", "\n", "", "", "make_spans", ".", "append", "(", "rewards", "-", "env", ".", "posRewards", ")", "\n", "# print(rewards - env.posRewards)", "\n", "", "return", "np", ".", "array", "(", "make_spans", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zcajiayin_L2D.None.updateAdjMat.getActionNbghs": [[5, 15], ["numpy.where", "opIDsOnMchs[].item", "opIDsOnMchs[].item", "coordAction[].item", "coordAction[].item"], "function", ["None"], ["def", "getActionNbghs", "(", "action", ",", "opIDsOnMchs", ")", ":", "\n", "    ", "coordAction", "=", "np", ".", "where", "(", "opIDsOnMchs", "==", "action", ")", "\n", "precd", "=", "opIDsOnMchs", "[", "coordAction", "[", "0", "]", ",", "coordAction", "[", "1", "]", "-", "1", "if", "coordAction", "[", "1", "]", ".", "item", "(", ")", ">", "0", "else", "coordAction", "[", "1", "]", "]", ".", "item", "(", ")", "\n", "succdTemp", "=", "opIDsOnMchs", "[", "coordAction", "[", "0", "]", ",", "coordAction", "[", "1", "]", "+", "1", "if", "coordAction", "[", "1", "]", ".", "item", "(", ")", "+", "1", "<", "opIDsOnMchs", ".", "shape", "[", "-", "1", "]", "else", "coordAction", "[", "1", "]", "]", ".", "item", "(", ")", "\n", "succd", "=", "action", "if", "succdTemp", "<", "0", "else", "succdTemp", "\n", "# precedX = coordAction[0]", "\n", "# precedY = coordAction[1] - 1 if coordAction[1].item() > 0 else coordAction[1]", "\n", "# succdX = coordAction[0]", "\n", "# succdY = coordAction[1] + 1 if coordAction[1].item()+1 < opIDsOnMchs.shape[-1] else coordAction[1]", "\n", "return", "precd", ",", "succd", "\n", "\n"]], "home.repos.pwc.inspect_result.zcajiayin_L2D.None.uniform_instance_gen.permute_rows": [[4, 11], ["numpy.random.sample().argsort", "numpy.tile", "numpy.arange", "numpy.random.sample"], "function", ["None"], ["def", "permute_rows", "(", "x", ")", ":", "\n", "    ", "'''\n    x is a np array\n    '''", "\n", "ix_i", "=", "np", ".", "tile", "(", "np", ".", "arange", "(", "x", ".", "shape", "[", "0", "]", ")", ",", "(", "x", ".", "shape", "[", "1", "]", ",", "1", ")", ")", ".", "T", "\n", "ix_j", "=", "np", ".", "random", ".", "sample", "(", "x", ".", "shape", ")", ".", "argsort", "(", "axis", "=", "1", ")", "\n", "return", "x", "[", "ix_i", ",", "ix_j", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zcajiayin_L2D.None.uniform_instance_gen.uni_instance_gen": [[13, 18], ["numpy.random.randint", "numpy.expand_dims().repeat", "uniform_instance_gen.permute_rows", "numpy.expand_dims", "numpy.arange"], "function", ["home.repos.pwc.inspect_result.zcajiayin_L2D.None.uniform_instance_gen.permute_rows"], ["", "def", "uni_instance_gen", "(", "n_j", ",", "n_m", ",", "low", ",", "high", ")", ":", "\n", "    ", "times", "=", "np", ".", "random", ".", "randint", "(", "low", "=", "low", ",", "high", "=", "high", ",", "size", "=", "(", "n_j", ",", "n_m", ")", ")", "\n", "machines", "=", "np", ".", "expand_dims", "(", "np", ".", "arange", "(", "1", ",", "n_m", "+", "1", ")", ",", "axis", "=", "0", ")", ".", "repeat", "(", "repeats", "=", "n_j", ",", "axis", "=", "0", ")", "\n", "machines", "=", "permute_rows", "(", "machines", ")", "\n", "return", "times", ",", "machines", "\n", "\n"]], "home.repos.pwc.inspect_result.zcajiayin_L2D.None.uniform_instance_gen.override": [[20, 25], ["None"], "function", ["None"], ["", "def", "override", "(", "fn", ")", ":", "\n", "    ", "\"\"\"\n    override decorator\n    \"\"\"", "\n", "return", "fn", "\n", "\n"]], "home.repos.pwc.inspect_result.zcajiayin_L2D.models.graphcnn_congForSJSSP.GraphCNN.__init__": [[22, 68], ["torch.Module.__init__", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "range", "graphcnn_congForSJSSP.GraphCNN.batch_norms.append", "graphcnn_congForSJSSP.GraphCNN.mlps.append", "graphcnn_congForSJSSP.GraphCNN.mlps.append", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "models.mlp.MLP", "models.mlp.MLP"], "methods", ["home.repos.pwc.inspect_result.zcajiayin_L2D.models.actor_critic.ActorCritic.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "num_layers", ",", "\n", "num_mlp_layers", ",", "\n", "input_dim", ",", "\n", "hidden_dim", ",", "\n", "# final_dropout,", "\n", "learn_eps", ",", "\n", "neighbor_pooling_type", ",", "\n", "device", ")", ":", "\n", "        ", "'''\n        num_layers: number of layers in the neural networks (INCLUDING the input layer)\n        num_mlp_layers: number of layers in mlps (EXCLUDING the input layer)\n        input_dim: dimensionality of input features\n        hidden_dim: dimensionality of hidden units at ALL layers\n        output_dim: number of classes for prediction\n        final_dropout: dropout ratio on the final linear layer\n        learn_eps: If True, learn epsilon to distinguish center nodes from neighboring nodes. If False, aggregate neighbors and center nodes altogether.\n        neighbor_pooling_type: how to aggregate neighbors (mean, average, or max)\n        device: which device to use\n        '''", "\n", "\n", "super", "(", "GraphCNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# self.final_dropout = final_dropout", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "neighbor_pooling_type", "=", "neighbor_pooling_type", "\n", "self", ".", "learn_eps", "=", "learn_eps", "\n", "# common out the eps if you do not need to use it, otherwise the it will cause", "\n", "# error \"not in the computational graph\"", "\n", "# if self.learn_eps:", "\n", "#     self.eps = nn.Parameter(torch.zeros(self.num_layers - 1))", "\n", "\n", "# List of MLPs", "\n", "self", ".", "mlps", "=", "torch", ".", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "# List of batchnorms applied to the output of MLP (input of the final prediction linear layer)", "\n", "self", ".", "batch_norms", "=", "torch", ".", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "for", "layer", "in", "range", "(", "self", ".", "num_layers", "-", "1", ")", ":", "\n", "            ", "if", "layer", "==", "0", ":", "\n", "                ", "self", ".", "mlps", ".", "append", "(", "MLP", "(", "num_mlp_layers", ",", "input_dim", ",", "hidden_dim", ",", "hidden_dim", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "mlps", ".", "append", "(", "MLP", "(", "num_mlp_layers", ",", "hidden_dim", ",", "hidden_dim", ",", "hidden_dim", ")", ")", "\n", "\n", "", "self", ".", "batch_norms", ".", "append", "(", "nn", ".", "BatchNorm1d", "(", "hidden_dim", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zcajiayin_L2D.models.graphcnn_congForSJSSP.GraphCNN.next_layer_eps": [[69, 91], ["torch.relu", "torch.relu", "torch.relu", "graphcnn_congForSJSSP.GraphCNN.maxpool", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["None"], ["", "", "def", "next_layer_eps", "(", "self", ",", "h", ",", "layer", ",", "padded_neighbor_list", "=", "None", ",", "Adj_block", "=", "None", ")", ":", "\n", "# pooling neighboring nodes and center nodes separately by epsilon reweighting.", "\n", "\n", "        ", "if", "self", ".", "neighbor_pooling_type", "==", "\"max\"", ":", "\n", "# If max pooling", "\n", "            ", "pooled", "=", "self", ".", "maxpool", "(", "h", ",", "padded_neighbor_list", ")", "\n", "", "else", ":", "\n", "# If sum or average pooling", "\n", "            ", "pooled", "=", "torch", ".", "mm", "(", "Adj_block", ",", "h", ")", "\n", "if", "self", ".", "neighbor_pooling_type", "==", "\"average\"", ":", "\n", "# If average pooling", "\n", "                ", "degree", "=", "torch", ".", "mm", "(", "Adj_block", ",", "torch", ".", "ones", "(", "(", "Adj_block", ".", "shape", "[", "0", "]", ",", "1", ")", ")", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "pooled", "=", "pooled", "/", "degree", "\n", "\n", "# Reweights the center node representation when aggregating it with its neighbors", "\n", "", "", "pooled", "=", "pooled", "+", "(", "1", "+", "self", ".", "eps", "[", "layer", "]", ")", "*", "h", "\n", "pooled_rep", "=", "self", ".", "mlps", "[", "layer", "]", "(", "pooled", ")", "\n", "h", "=", "self", ".", "batch_norms", "[", "layer", "]", "(", "pooled_rep", ")", "\n", "\n", "# non-linearity", "\n", "h", "=", "F", ".", "relu", "(", "h", ")", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.zcajiayin_L2D.models.graphcnn_congForSJSSP.GraphCNN.next_layer": [[92, 114], ["torch.relu", "torch.relu", "torch.relu", "graphcnn_congForSJSSP.GraphCNN.maxpool", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["None"], ["", "def", "next_layer", "(", "self", ",", "h", ",", "layer", ",", "padded_neighbor_list", "=", "None", ",", "Adj_block", "=", "None", ")", ":", "\n", "\n", "# pooling neighboring nodes and center nodes altogether", "\n", "        ", "if", "self", ".", "neighbor_pooling_type", "==", "\"max\"", ":", "\n", "# If max pooling", "\n", "            ", "pooled", "=", "self", ".", "maxpool", "(", "h", ",", "padded_neighbor_list", ")", "\n", "", "else", ":", "\n", "# If sum or average pooling", "\n", "# print(Adj_block.dtype)", "\n", "# print(h.dtype)", "\n", "            ", "pooled", "=", "torch", ".", "mm", "(", "Adj_block", ",", "h", ")", "\n", "if", "self", ".", "neighbor_pooling_type", "==", "\"average\"", ":", "\n", "# If average pooling", "\n", "                ", "degree", "=", "torch", ".", "mm", "(", "Adj_block", ",", "torch", ".", "ones", "(", "(", "Adj_block", ".", "shape", "[", "0", "]", ",", "1", ")", ")", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "pooled", "=", "pooled", "/", "degree", "\n", "# representation of neighboring and center nodes", "\n", "", "", "pooled_rep", "=", "self", ".", "mlps", "[", "layer", "]", "(", "pooled", ")", "\n", "h", "=", "self", ".", "batch_norms", "[", "layer", "]", "(", "pooled_rep", ")", "\n", "\n", "# non-linearity", "\n", "h", "=", "F", ".", "relu", "(", "h", ")", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.zcajiayin_L2D.models.graphcnn_congForSJSSP.GraphCNN.forward": [[115, 148], ["range", "graphcnn_congForSJSSP.GraphCNN.clone", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "graphcnn_congForSJSSP.GraphCNN.next_layer_eps", "graphcnn_congForSJSSP.GraphCNN.next_layer_eps", "graphcnn_congForSJSSP.GraphCNN.next_layer", "graphcnn_congForSJSSP.GraphCNN.next_layer"], "methods", ["home.repos.pwc.inspect_result.zcajiayin_L2D.models.graphcnn_congForSJSSP.GraphCNN.next_layer_eps", "home.repos.pwc.inspect_result.zcajiayin_L2D.models.graphcnn_congForSJSSP.GraphCNN.next_layer_eps", "home.repos.pwc.inspect_result.zcajiayin_L2D.models.graphcnn_congForSJSSP.GraphCNN.next_layer", "home.repos.pwc.inspect_result.zcajiayin_L2D.models.graphcnn_congForSJSSP.GraphCNN.next_layer"], ["", "def", "forward", "(", "self", ",", "\n", "x", ",", "\n", "graph_pool", ",", "\n", "padded_nei", ",", "\n", "adj", ")", ":", "\n", "\n", "        ", "x_concat", "=", "x", "\n", "graph_pool", "=", "graph_pool", "\n", "\n", "if", "self", ".", "neighbor_pooling_type", "==", "\"max\"", ":", "\n", "            ", "padded_neighbor_list", "=", "padded_nei", "\n", "", "else", ":", "\n", "            ", "Adj_block", "=", "adj", "\n", "\n", "# list of hidden representation at each layer (including input)", "\n", "", "h", "=", "x_concat", "\n", "\n", "for", "layer", "in", "range", "(", "self", ".", "num_layers", "-", "1", ")", ":", "\n", "            ", "if", "self", ".", "neighbor_pooling_type", "==", "\"max\"", "and", "self", ".", "learn_eps", ":", "\n", "                ", "h", "=", "self", ".", "next_layer_eps", "(", "h", ",", "layer", ",", "padded_neighbor_list", "=", "padded_neighbor_list", ")", "\n", "", "elif", "not", "self", ".", "neighbor_pooling_type", "==", "\"max\"", "and", "self", ".", "learn_eps", ":", "\n", "                ", "h", "=", "self", ".", "next_layer_eps", "(", "h", ",", "layer", ",", "Adj_block", "=", "Adj_block", ")", "\n", "", "elif", "self", ".", "neighbor_pooling_type", "==", "\"max\"", "and", "not", "self", ".", "learn_eps", ":", "\n", "                ", "h", "=", "self", ".", "next_layer", "(", "h", ",", "layer", ",", "padded_neighbor_list", "=", "padded_neighbor_list", ")", "\n", "", "elif", "not", "self", ".", "neighbor_pooling_type", "==", "\"max\"", "and", "not", "self", ".", "learn_eps", ":", "\n", "                ", "h", "=", "self", ".", "next_layer", "(", "h", ",", "layer", ",", "Adj_block", "=", "Adj_block", ")", "\n", "\n", "", "", "h_nodes", "=", "h", ".", "clone", "(", ")", "\n", "# print(graph_pool.shape, h.shape)", "\n", "pooled_h", "=", "torch", ".", "sparse", ".", "mm", "(", "graph_pool", ",", "h", ")", "\n", "# pooled_h = graph_pool.spmm(h)", "\n", "\n", "return", "pooled_h", ",", "h_nodes", "\n", "\n"]], "home.repos.pwc.inspect_result.zcajiayin_L2D.models.mlp.MLP.__init__": [[8, 40], ["torch.Module.__init__", "ValueError", "torch.Linear", "torch.Linear", "torch.Linear", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "mlp.MLP.linears.append", "range", "mlp.MLP.linears.append", "range", "torch.Linear", "torch.Linear", "torch.Linear", "mlp.MLP.linears.append", "torch.Linear", "torch.Linear", "torch.Linear", "mlp.MLP.batch_norms.append", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.zcajiayin_L2D.models.actor_critic.ActorCritic.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_layers", ",", "input_dim", ",", "hidden_dim", ",", "output_dim", ")", ":", "\n", "        ", "'''\n            num_layers: number of layers in the neural networks (EXCLUDING the input layer). If num_layers=1, this reduces to linear model.\n            input_dim: dimensionality of input features\n            hidden_dim: dimensionality of hidden units at ALL layers\n            output_dim: number of classes for prediction\n            device: which device to use\n        '''", "\n", "\n", "super", "(", "MLP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "linear_or_not", "=", "True", "# default is linear model", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "\n", "if", "num_layers", "<", "1", ":", "\n", "            ", "raise", "ValueError", "(", "\"number of layers should be positive!\"", ")", "\n", "", "elif", "num_layers", "==", "1", ":", "\n", "# Linear model", "\n", "            ", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "input_dim", ",", "output_dim", ")", "\n", "", "else", ":", "\n", "# Multi-layer model", "\n", "            ", "self", ".", "linear_or_not", "=", "False", "\n", "self", ".", "linears", "=", "torch", ".", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "batch_norms", "=", "torch", ".", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "self", ".", "linears", ".", "append", "(", "nn", ".", "Linear", "(", "input_dim", ",", "hidden_dim", ")", ")", "\n", "for", "layer", "in", "range", "(", "num_layers", "-", "2", ")", ":", "\n", "                ", "self", ".", "linears", ".", "append", "(", "nn", ".", "Linear", "(", "hidden_dim", ",", "hidden_dim", ")", ")", "\n", "", "self", ".", "linears", ".", "append", "(", "nn", ".", "Linear", "(", "hidden_dim", ",", "output_dim", ")", ")", "\n", "\n", "for", "layer", "in", "range", "(", "num_layers", "-", "1", ")", ":", "\n", "                ", "self", ".", "batch_norms", ".", "append", "(", "nn", ".", "BatchNorm1d", "(", "(", "hidden_dim", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zcajiayin_L2D.models.mlp.MLP.forward": [[41, 51], ["mlp.MLP.linear", "range", "torch.relu", "torch.relu", "torch.relu"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "linear_or_not", ":", "\n", "# If linear model", "\n", "            ", "return", "self", ".", "linear", "(", "x", ")", "\n", "", "else", ":", "\n", "# If MLP", "\n", "            ", "h", "=", "x", "\n", "for", "layer", "in", "range", "(", "self", ".", "num_layers", "-", "1", ")", ":", "\n", "                ", "h", "=", "F", ".", "relu", "(", "self", ".", "batch_norms", "[", "layer", "]", "(", "self", ".", "linears", "[", "layer", "]", "(", "h", ")", ")", ")", "\n", "", "return", "self", ".", "linears", "[", "self", ".", "num_layers", "-", "1", "]", "(", "h", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zcajiayin_L2D.models.mlp.MLPActor.__init__": [[54, 89], ["torch.Module.__init__", "ValueError", "torch.Linear", "torch.Linear", "torch.Linear", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "mlp.MLPActor.linears.append", "range", "mlp.MLPActor.linears.append", "torch.Linear", "torch.Linear", "torch.Linear", "mlp.MLPActor.linears.append", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.zcajiayin_L2D.models.actor_critic.ActorCritic.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_layers", ",", "input_dim", ",", "hidden_dim", ",", "output_dim", ")", ":", "\n", "        ", "'''\n            num_layers: number of layers in the neural networks (EXCLUDING the input layer). If num_layers=1, this reduces to linear model.\n            input_dim: dimensionality of input features\n            hidden_dim: dimensionality of hidden units at ALL layers\n            output_dim: number of classes for prediction\n            device: which device to use\n        '''", "\n", "\n", "super", "(", "MLPActor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "linear_or_not", "=", "True", "# default is linear model", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "\n", "if", "num_layers", "<", "1", ":", "\n", "            ", "raise", "ValueError", "(", "\"number of layers should be positive!\"", ")", "\n", "", "elif", "num_layers", "==", "1", ":", "\n", "# Linear model", "\n", "            ", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "input_dim", ",", "output_dim", ")", "\n", "", "else", ":", "\n", "# Multi-layer model", "\n", "            ", "self", ".", "linear_or_not", "=", "False", "\n", "self", ".", "linears", "=", "torch", ".", "nn", ".", "ModuleList", "(", ")", "\n", "'''\n            self.batch_norms = torch.nn.ModuleList()\n            '''", "\n", "\n", "self", ".", "linears", ".", "append", "(", "nn", ".", "Linear", "(", "input_dim", ",", "hidden_dim", ")", ")", "\n", "for", "layer", "in", "range", "(", "num_layers", "-", "2", ")", ":", "\n", "                ", "self", ".", "linears", ".", "append", "(", "nn", ".", "Linear", "(", "hidden_dim", ",", "hidden_dim", ")", ")", "\n", "", "self", ".", "linears", ".", "append", "(", "nn", ".", "Linear", "(", "hidden_dim", ",", "output_dim", ")", ")", "\n", "'''\n            for layer in range(num_layers - 1):\n                self.batch_norms.append(nn.BatchNorm1d((hidden_dim)))\n            '''", "\n", "\n"]], "home.repos.pwc.inspect_result.zcajiayin_L2D.models.mlp.MLPActor.forward": [[90, 104], ["mlp.MLPActor.linear", "range", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "linear_or_not", ":", "\n", "# If linear model", "\n", "            ", "return", "self", ".", "linear", "(", "x", ")", "\n", "", "else", ":", "\n", "# If MLP", "\n", "            ", "h", "=", "x", "\n", "for", "layer", "in", "range", "(", "self", ".", "num_layers", "-", "1", ")", ":", "\n", "                ", "'''\n                h = F.relu(self.batch_norms[layer](self.linears[layer](h)))\n                '''", "\n", "h", "=", "torch", ".", "tanh", "(", "self", ".", "linears", "[", "layer", "]", "(", "h", ")", ")", "\n", "# h = F.relu(self.linears[layer](h))", "\n", "", "return", "self", ".", "linears", "[", "self", ".", "num_layers", "-", "1", "]", "(", "h", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zcajiayin_L2D.models.mlp.MLPCritic.__init__": [[107, 142], ["torch.Module.__init__", "ValueError", "torch.Linear", "torch.Linear", "torch.Linear", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "mlp.MLPCritic.linears.append", "range", "mlp.MLPCritic.linears.append", "torch.Linear", "torch.Linear", "torch.Linear", "mlp.MLPCritic.linears.append", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.zcajiayin_L2D.models.actor_critic.ActorCritic.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_layers", ",", "input_dim", ",", "hidden_dim", ",", "output_dim", ")", ":", "\n", "        ", "'''\n            num_layers: number of layers in the neural networks (EXCLUDING the input layer). If num_layers=1, this reduces to linear model.\n            input_dim: dimensionality of input features\n            hidden_dim: dimensionality of hidden units at ALL layers\n            output_dim: number of classes for prediction\n            device: which device to use\n        '''", "\n", "\n", "super", "(", "MLPCritic", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "linear_or_not", "=", "True", "# default is linear model", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "\n", "if", "num_layers", "<", "1", ":", "\n", "            ", "raise", "ValueError", "(", "\"number of layers should be positive!\"", ")", "\n", "", "elif", "num_layers", "==", "1", ":", "\n", "# Linear model", "\n", "            ", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "input_dim", ",", "output_dim", ")", "\n", "", "else", ":", "\n", "# Multi-layer model", "\n", "            ", "self", ".", "linear_or_not", "=", "False", "\n", "self", ".", "linears", "=", "torch", ".", "nn", ".", "ModuleList", "(", ")", "\n", "'''\n            self.batch_norms = torch.nn.ModuleList()\n            '''", "\n", "\n", "self", ".", "linears", ".", "append", "(", "nn", ".", "Linear", "(", "input_dim", ",", "hidden_dim", ")", ")", "\n", "for", "layer", "in", "range", "(", "num_layers", "-", "2", ")", ":", "\n", "                ", "self", ".", "linears", ".", "append", "(", "nn", ".", "Linear", "(", "hidden_dim", ",", "hidden_dim", ")", ")", "\n", "", "self", ".", "linears", ".", "append", "(", "nn", ".", "Linear", "(", "hidden_dim", ",", "output_dim", ")", ")", "\n", "'''\n            for layer in range(num_layers - 1):\n                self.batch_norms.append(nn.BatchNorm1d((hidden_dim)))\n            '''", "\n", "\n"]], "home.repos.pwc.inspect_result.zcajiayin_L2D.models.mlp.MLPCritic.forward": [[143, 157], ["mlp.MLPCritic.linear", "range", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "linear_or_not", ":", "\n", "# If linear model", "\n", "            ", "return", "self", ".", "linear", "(", "x", ")", "\n", "", "else", ":", "\n", "# If MLP", "\n", "            ", "h", "=", "x", "\n", "for", "layer", "in", "range", "(", "self", ".", "num_layers", "-", "1", ")", ":", "\n", "                ", "'''\n                h = F.relu(self.batch_norms[layer](self.linears[layer](h)))\n                '''", "\n", "h", "=", "torch", ".", "tanh", "(", "self", ".", "linears", "[", "layer", "]", "(", "h", ")", ")", "\n", "# h = F.relu(self.linears[layer](h))", "\n", "", "return", "self", ".", "linears", "[", "self", ".", "num_layers", "-", "1", "]", "(", "h", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.zcajiayin_L2D.models.actor_critic.ActorCritic.__init__": [[10, 47], ["torch.Module.__init__", "models.graphcnn_congForSJSSP.GraphCNN().to", "models.mlp.MLPActor().to", "models.mlp.MLPCritic().to", "models.graphcnn_congForSJSSP.GraphCNN", "models.mlp.MLPActor", "models.mlp.MLPCritic"], "methods", ["home.repos.pwc.inspect_result.zcajiayin_L2D.models.actor_critic.ActorCritic.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "n_j", ",", "\n", "n_m", ",", "\n", "# feature extraction net unique attributes:", "\n", "num_layers", ",", "\n", "learn_eps", ",", "\n", "neighbor_pooling_type", ",", "\n", "input_dim", ",", "\n", "hidden_dim", ",", "\n", "# feature extraction net MLP attributes:", "\n", "num_mlp_layers_feature_extract", ",", "\n", "# actor net MLP attributes:", "\n", "num_mlp_layers_actor", ",", "\n", "hidden_dim_actor", ",", "\n", "# actor net MLP attributes:", "\n", "num_mlp_layers_critic", ",", "\n", "hidden_dim_critic", ",", "\n", "# actor/critic/feature_extraction shared attribute", "\n", "device", "\n", ")", ":", "\n", "        ", "super", "(", "ActorCritic", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# job size for problems, no business with network", "\n", "self", ".", "n_j", "=", "n_j", "\n", "# machine size for problems, no business with network", "\n", "self", ".", "n_m", "=", "n_m", "\n", "self", ".", "n_ops_perjob", "=", "n_m", "\n", "self", ".", "device", "=", "device", "\n", "\n", "self", ".", "feature_extract", "=", "GraphCNN", "(", "num_layers", "=", "num_layers", ",", "\n", "num_mlp_layers", "=", "num_mlp_layers_feature_extract", ",", "\n", "input_dim", "=", "input_dim", ",", "\n", "hidden_dim", "=", "hidden_dim", ",", "\n", "learn_eps", "=", "learn_eps", ",", "\n", "neighbor_pooling_type", "=", "neighbor_pooling_type", ",", "\n", "device", "=", "device", ")", ".", "to", "(", "device", ")", "\n", "self", ".", "actor", "=", "MLPActor", "(", "num_mlp_layers_actor", ",", "hidden_dim", "*", "2", ",", "hidden_dim_actor", ",", "1", ")", ".", "to", "(", "device", ")", "\n", "self", ".", "critic", "=", "MLPCritic", "(", "num_mlp_layers_critic", ",", "hidden_dim", ",", "hidden_dim_critic", ",", "1", ")", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zcajiayin_L2D.models.actor_critic.ActorCritic.forward": [[48, 86], ["actor_critic.ActorCritic.feature_extract", "candidate.unsqueeze().expand", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "h_pooled.unsqueeze().expand_as", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "actor_critic.ActorCritic.actor", "mask.reshape", "float", "torch.softmax", "torch.softmax", "torch.softmax", "actor_critic.ActorCritic.critic", "h_nodes.size", "h_nodes.reshape", "actor_critic.ActorCritic.size", "candidate.unsqueeze", "candidate.unsqueeze().expand.size", "candidate.unsqueeze().expand.size", "h_pooled.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "\n", "x", ",", "\n", "graph_pool", ",", "\n", "padded_nei", ",", "\n", "adj", ",", "\n", "candidate", ",", "\n", "mask", ",", "\n", ")", ":", "\n", "\n", "        ", "h_pooled", ",", "h_nodes", "=", "self", ".", "feature_extract", "(", "x", "=", "x", ",", "\n", "graph_pool", "=", "graph_pool", ",", "\n", "padded_nei", "=", "padded_nei", ",", "\n", "adj", "=", "adj", ")", "\n", "# prepare policy feature: concat omega feature with global feature", "\n", "dummy", "=", "candidate", ".", "unsqueeze", "(", "-", "1", ")", ".", "expand", "(", "-", "1", ",", "self", ".", "n_j", ",", "h_nodes", ".", "size", "(", "-", "1", ")", ")", "\n", "candidate_feature", "=", "torch", ".", "gather", "(", "h_nodes", ".", "reshape", "(", "dummy", ".", "size", "(", "0", ")", ",", "-", "1", ",", "dummy", ".", "size", "(", "-", "1", ")", ")", ",", "1", ",", "dummy", ")", "\n", "h_pooled_repeated", "=", "h_pooled", ".", "unsqueeze", "(", "1", ")", ".", "expand_as", "(", "candidate_feature", ")", "\n", "\n", "'''# prepare policy feature: concat row work remaining feature\n        durfea2mat = x[:, 1].reshape(shape=(-1, self.n_j, self.n_m))\n        mask_right_half = torch.zeros_like(durfea2mat)\n        mask_right_half.put_(omega, torch.ones_like(omega, dtype=torch.float))\n        mask_right_half = torch.cumsum(mask_right_half, dim=-1)\n        # calculate work remaining and normalize it with job size\n        wkr = (mask_right_half * durfea2mat).sum(dim=-1, keepdim=True)/self.n_ops_perjob'''", "\n", "\n", "# concatenate feature", "\n", "# concateFea = torch.cat((wkr, candidate_feature, h_pooled_repeated), dim=-1)", "\n", "concateFea", "=", "torch", ".", "cat", "(", "(", "candidate_feature", ",", "h_pooled_repeated", ")", ",", "dim", "=", "-", "1", ")", "\n", "candidate_scores", "=", "self", ".", "actor", "(", "concateFea", ")", "\n", "\n", "# perform mask", "\n", "mask_reshape", "=", "mask", ".", "reshape", "(", "candidate_scores", ".", "size", "(", ")", ")", "\n", "candidate_scores", "[", "mask_reshape", "]", "=", "float", "(", "'-inf'", ")", "\n", "\n", "pi", "=", "F", ".", "softmax", "(", "candidate_scores", ",", "dim", "=", "1", ")", "\n", "v", "=", "self", ".", "critic", "(", "h_pooled", ")", "\n", "return", "pi", ",", "v", "\n", "\n"]]}