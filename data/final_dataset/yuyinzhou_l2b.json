{"home.repos.pwc.inspect_result.yuyinzhou_l2b.None.main.main": [[79, 203], ["time.time", "time.strftime", "os.path.join", "ResNet18.cuda", "torch.SGD", "range", "ultils.is_main_process", "time.localtime", "ultils.is_main_process", "os.mkdir", "time.strftime.strip().replace", "ultils.is_main_process", "os.mkdir", "tensorboardX.SummaryWriter", "print", "print", "print", "ResNet50().cuda", "ResNet18.state_dict", "dict.items", "print", "ResNet18.load_state_dict", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "print", "torch.CrossEntropyLoss().cuda", "torch.CrossEntropyLoss().cuda", "ResNet18.parameters", "torch.Adam", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "os.path.exists", "ultils.is_main_process", "os.remove", "print", "ultils.prepare_dataloder", "ultils.prepare_dataloder", "main.val", "print", "print", "print", "print", "main.train", "main.val", "torch.optim.lr_scheduler.MultiStepLR.step", "ultils.is_main_process", "time.strftime", "time.time", "print", "os.path.exists", "os.path.join", "os.path.exists", "os.path.join", "print", "PreActResNet18().cuda", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "k.replace.replace", "len", "ResNet18.parameters", "torch.SGD", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "ultils.is_main_process", "print", "print", "print", "print", "print", "time.localtime", "str", "os.path.join", "time.strftime.strip", "os.path.join", "os.path.join", "ResNet50", "wrn28_10().cuda", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "ResNet18.parameters", "int", "ultils.prepare_dataloder", "ultils.is_main_process", "prepare_dataloder_clothing1m", "print", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "PreActResNet18", "ResNet18", "print", "ResNet18.state_dict", "os.path.isdir", "os.mkdir", "wrn28_10", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.yuyinzhou_l2b.data_loader.ISIC_dataset.is_main_process", "home.repos.pwc.inspect_result.yuyinzhou_l2b.data_loader.ISIC_dataset.is_main_process", "home.repos.pwc.inspect_result.yuyinzhou_l2b.data_loader.ISIC_dataset.is_main_process", "home.repos.pwc.inspect_result.yuyinzhou_l2b.data_loader.ISIC_dataset.is_main_process", "home.repos.pwc.inspect_result.yuyinzhou_l2b.None.ultils.prepare_dataloder", "home.repos.pwc.inspect_result.yuyinzhou_l2b.None.ultils.prepare_dataloder", "home.repos.pwc.inspect_result.yuyinzhou_l2b.None.main.val", "home.repos.pwc.inspect_result.yuyinzhou_l2b.None.main.train", "home.repos.pwc.inspect_result.yuyinzhou_l2b.None.main.val", "home.repos.pwc.inspect_result.yuyinzhou_l2b.data_loader.ISIC_dataset.is_main_process", "home.repos.pwc.inspect_result.yuyinzhou_l2b.data_loader.ISIC_dataset.is_main_process", "home.repos.pwc.inspect_result.yuyinzhou_l2b.None.ultils.prepare_dataloder", "home.repos.pwc.inspect_result.yuyinzhou_l2b.data_loader.ISIC_dataset.is_main_process", "home.repos.pwc.inspect_result.yuyinzhou_l2b.models.PreResNet.PreActResNet18", "home.repos.pwc.inspect_result.yuyinzhou_l2b.models.wide_resnet.wrn28_10"], ["def", "main", "(", "args", ")", ":", "\n", "      ", "global", "best_acc", "\n", "best_acc", "=", "0", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "current_time", "=", "time", ".", "strftime", "(", "\"%Y-%m-%d %H:%M:%S\"", ",", "time", ".", "localtime", "(", ")", ")", "\n", "exp", "=", "args", ".", "arch", "+", "'_'", "+", "'temperature_'", "+", "str", "(", "args", ".", "temperature", ")", "+", "'_'", "+", "'corruption_'", "+", "str", "(", "args", ".", "corruption_prob", ")", "+", "'_'", "+", "'epochs_'", "+", "str", "(", "args", ".", "num_epochs", ")", "+", "'_'", "+", "'dataset_'", "+", "str", "(", "args", ".", "dataset", ")", "+", "'_'", "+", "args", ".", "exp", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "'checkpoint'", ",", "exp", ")", ")", "and", "is_main_process", "(", ")", ":", "\n", "           ", "os", ".", "mkdir", "(", "os", ".", "path", ".", "join", "(", "'checkpoint'", ",", "exp", ")", ")", "\n", "", "exp", "=", "os", ".", "path", ".", "join", "(", "exp", ",", "current_time", ".", "strip", "(", ")", ".", "replace", "(", "' '", ",", "'-'", ")", ")", "\n", "writer", "=", "None", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "'checkpoint'", ",", "exp", ")", ")", "and", "is_main_process", "(", ")", ":", "\n", "          ", "os", ".", "mkdir", "(", "os", ".", "path", ".", "join", "(", "'checkpoint'", ",", "exp", ")", ")", "\n", "writer", "=", "SummaryWriter", "(", "log_dir", "=", "os", ".", "path", ".", "join", "(", "'logs/'", ",", "exp", ")", ")", "\n", "print", "(", "'Experiments is conducted on:'", ",", "exp", ")", "\n", "print", "(", "'==> Preparing data..'", ")", "\n", "", "if", "args", ".", "local_rank", "==", "0", ":", "\n", "          ", "print", "(", "args", ")", "\n", "if", "args", ".", "mixup", ":", "\n", "              ", "print", "(", "'Using Mixup For training'", ")", "\n", "\n", "", "", "if", "args", ".", "arch", "==", "'res50'", ":", "\n", "          ", "net", "=", "ResNet50", "(", "num_classes", "=", "args", ".", "num_classes", ")", ".", "cuda", "(", "device", "=", "args", ".", "gpuid", ")", "\n", "\n", "", "elif", "args", ".", "arch", "==", "'res18'", ":", "\n", "          ", "net", "=", "PreActResNet18", "(", "num_classes", "=", "args", ".", "num_classes", ")", ".", "cuda", "(", "device", "=", "args", ".", "gpuid", ")", "\n", "", "elif", "args", ".", "arch", "==", "'wrn28_10'", ":", "\n", "          ", "net", "=", "wrn28_10", "(", "num_classes", "=", "args", ".", "num_classes", ")", ".", "cuda", "(", "device", "=", "args", ".", "gpuid", ")", "\n", "", "elif", "args", ".", "arch", "==", "'res18_224'", ":", "\n", "          ", "net", "=", "ResNet18", "(", "num_classes", "=", "args", ".", "num_classes", ")", "\n", "", "if", "args", ".", "resume", ":", "\n", "          ", "path", "=", "args", ".", "resume", "\n", "dict", "=", "torch", ".", "load", "(", "path", ",", "map_location", "=", "'cpu'", ")", "[", "'net'", "]", "\n", "net_dict", "=", "net", ".", "state_dict", "(", ")", "\n", "idy", "=", "0", "\n", "for", "k", ",", "v", "in", "dict", ".", "items", "(", ")", ":", "\n", "              ", "k", "=", "k", ".", "replace", "(", "'module.'", ",", "''", ")", "\n", "if", "k", "in", "net_dict", ":", "\n", "                  ", "net_dict", "[", "k", "]", "=", "v", "\n", "idy", "+=", "1", "\n", "", "", "print", "(", "len", "(", "net_dict", ")", ",", "idy", ",", "'update state dict already'", ")", "\n", "net", ".", "load_state_dict", "(", "net_dict", ")", "\n", "", "net", "=", "net", ".", "cuda", "(", "device", "=", "args", ".", "gpuid", ")", "\n", "\n", "if", "args", ".", "distribute", ":", "\n", "          ", "net", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "net", ",", "device_ids", "=", "[", "args", ".", "gpuid", "]", ")", "\n", "\n", "", "if", "args", ".", "baseline", ":", "\n", "          ", "print", "(", "'using the norm CE loss'", ")", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "          ", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", "reduction", "=", "\"none\"", ")", ".", "cuda", "(", "args", ".", "gpuid", ")", "\n", "\n", "", "optimizer", "=", "optim", ".", "SGD", "(", "net", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "momentum", "=", "0.9", ",", "weight_decay", "=", "args", ".", "wd", ")", "\n", "\n", "if", "args", ".", "meta_opt", "==", "'adam'", ":", "\n", "          ", "optimizer_meta", "=", "optim", ".", "Adam", "(", "net", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "meta_lr", ",", "weight_decay", "=", "0", ",", "\n", "# args.wdecay, # meta should have wdecay or not??", "\n", "amsgrad", "=", "True", ",", "eps", "=", "1e-8", ")", "\n", "\n", "", "elif", "args", ".", "meta_opt", "==", "'sgd'", ":", "\n", "          ", "optimizer_meta", "=", "optim", ".", "SGD", "(", "net", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "meta_lr", ",", "momentum", "=", "0.9", ",", "weight_decay", "=", "0", ")", "\n", "", "if", "args", ".", "scheduler", "==", "'cos'", ":", "\n", "          ", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "optimizer", ",", "T_max", "=", "args", ".", "num_epochs", ")", "\n", "", "elif", "args", ".", "scheduler", "==", "'step'", ":", "\n", "          ", "args", ".", "milestone", "=", "[", "int", "(", "step", ")", "for", "step", "in", "args", ".", "milestone", "]", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "optimizer", ",", "milestones", "=", "args", ".", "milestone", ",", "gamma", "=", "0.1", ")", "\n", "\n", "", "args", ".", "temp_label", "=", "args", ".", "dataset", "+", "'label.txt'", "\n", "if", "os", ".", "path", ".", "exists", "(", "args", ".", "temp_label", ")", "and", "is_main_process", "(", ")", ":", "\n", "          ", "os", ".", "remove", "(", "args", ".", "temp_label", ")", "\n", "print", "(", "'remove the temp label file already'", ")", "\n", "", "if", "not", "args", ".", "dataset", "==", "'clothing1m'", ":", "\n", "          ", "trainloader", ",", "testloader", ",", "metaloader", ",", "train_sampler", ",", "test_sampler", ",", "meta_sampler", "=", "prepare_dataloder", "(", "args", ")", "\n", "\n", "", "if", "args", ".", "eval", ":", "\n", "          ", "trainloader", ",", "testloader", ",", "metaloader", ",", "train_sampler", ",", "test_sampler", ",", "meta_sampler", "=", "prepare_dataloder", "(", "args", ")", "\n", "acc", ",", "test_loss", "=", "val", "(", "0", ",", "testloader", ",", "net", ",", "writer", ",", "args", ")", "\n", "print", "(", "'-----------------------------------------------------'", ")", "\n", "print", "(", "' CURRENT loss: {:.4f}'", ".", "format", "(", "test_loss", ".", "avg", ")", ")", "\n", "print", "(", "' BEST accuracy: {:.4f}'", ".", "format", "(", "acc", ")", ")", "\n", "print", "(", "'-----------------------------------------------------'", ")", "\n", "return", "\n", "\n", "", "for", "epoch", "in", "range", "(", "args", ".", "num_epochs", ")", ":", "\n", "          ", "if", "args", ".", "dataset", "==", "'clothing1m'", ":", "\n", "              ", "if", "not", "args", ".", "no_val_data", ":", "\n", "                  ", "trainloader", ",", "testloader", ",", "metaloader", ",", "train_sampler", ",", "test_sampler", ",", "meta_sampler", "=", "prepare_dataloder", "(", "args", ")", "\n", "\n", "", "else", ":", "\n", "                  ", "if", "is_main_process", "(", ")", ":", "\n", "                      ", "print", "(", "'using pseudo labeled training subset for training'", ")", "\n", "", "trainloader", ",", "testloader", ",", "metaloader", ",", "train_sampler", ",", "test_sampler", ",", "meta_sampler", "=", "prepare_dataloder_clothing1m", "(", "args", ")", "\n", "", "", "train", "(", "epoch", ",", "trainloader", ",", "metaloader", ",", "train_sampler", ",", "net", ",", "meta_sampler", ",", "test_sampler", ",", "\n", "optimizer", ",", "optimizer_meta", ",", "criterion", ",", "writer", ",", "args", ")", "\n", "acc", ",", "test_loss", "=", "val", "(", "epoch", ",", "testloader", ",", "net", ",", "writer", ",", "args", ")", "\n", "\n", "scheduler", ".", "step", "(", ")", "\n", "if", "acc", ">", "best_acc", ":", "\n", "              ", "if", "is_main_process", "(", ")", ":", "\n", "                 ", "print", "(", "'Saving..'", ")", "\n", "state", "=", "{", "\n", "'net'", ":", "net", ".", "state_dict", "(", ")", ",", "\n", "'acc'", ":", "acc", ",", "\n", "'epoch'", ":", "epoch", ",", "\n", "}", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "'checkpoint'", ")", ":", "\n", "                     ", "os", ".", "mkdir", "(", "'checkpoint'", ")", "\n", "", "torch", ".", "save", "(", "state", ",", "'./checkpoint/{}_ckpt.pth'", ".", "format", "(", "exp", ")", ")", "\n", "best_acc", "=", "acc", "\n", "\n", "", "", "if", "is_main_process", "(", ")", ":", "\n", "              ", "print", "(", "'-----------------------------------------------------'", ")", "\n", "print", "(", "'At epoch: {:03d} CURRENT loss: {:.4f}'", ".", "format", "(", "epoch", ",", "test_loss", ".", "avg", ")", ")", "\n", "print", "(", "'At epoch: {:03d} BEST accuracy: {:.4f}'", ".", "format", "(", "epoch", ",", "best_acc", ")", ")", "\n", "print", "(", "'At epoch: {:03d} CURRENT accuracy: {:.4f}'", ".", "format", "(", "epoch", ",", "acc", ")", ")", "\n", "print", "(", "'-----------------------------------------------------'", ")", "\n", "", "", "if", "is_main_process", "(", ")", ":", "\n", "          ", "current_time", "=", "time", ".", "strftime", "(", "\"%Y-%m-%d %H:%M:%S\"", ",", "time", ".", "localtime", "(", ")", ")", "\n", "end_time", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "current_time", ",", "end_time", "-", "start_time", ")", "\n", "", "return", "best_acc", "\n", "\n"]], "home.repos.pwc.inspect_result.yuyinzhou_l2b.None.main.train": [[208, 376], ["net.train", "ultils.AverageMeter", "ultils.AverageMeter", "enumerate", "train_sampler.set_epoch", "test_sampler.set_epoch", "image.cuda.cuda", "labels.cuda.cuda", "optimizer.zero_grad", "criterion_warm.backward", "optimizer.step", "ultils.AverageMeter.update", "ultils.AverageMeter.update", "ultils.AverageMeter.synchronize_between_processes", "ultils.AverageMeter.synchronize_between_processes", "ultils.is_main_process", "writer.add_scalar", "writer.add_scalar", "print", "print", "meta_sampler.set_epoch", "np.random.beta", "np.random.permutation", "net", "ultils.accuracy", "torch.utils.clip_grad_norm_", "criterion_warm.item", "image.cuda.size", "prec1.item", "image.cuda.size", "ultils.is_main_process", "print", "writer.add_scalar", "writer.add_scalar", "print", "print", "image.cuda.size", "criterion", "net", "torch.CrossEntropyLoss().cuda", "ultils.accuracy", "net", "meta_net.max", "ultils.accuracy", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "net.parameters", "nn.CrossEntropyLoss().cuda.", "higher.innerloop_ctx", "range", "next", "val_data.cuda.cuda", "val_labels.cuda.cuda", "meta_net", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "[].detach", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp.view", "sigmoid.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "criterion", "criterion", "torch.CrossEntropyLoss", "meta_net", "meta_net.max", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "eps.requires_grad_.requires_grad_", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "meta_optimizer.step", "iter", "criterion", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.softmax", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "criterion", "criterion", "criterion", "criterion", "nn.CrossEntropyLoss().cuda.", "nn.CrossEntropyLoss().cuda.", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "criterion.unsqueeze", "criterion.unsqueeze", "criterion", "criterion", "criterion", "criterion", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.softmax", "criterion", "criterion", "criterion", "criterion", "criterion.unsqueeze", "criterion.unsqueeze", "criterion.size", "torch.Sigmoid", "nn.Sigmoid.", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "criterion", "criterion", "criterion", "criterion"], "function", ["home.repos.pwc.inspect_result.yuyinzhou_l2b.None.main.train", "home.repos.pwc.inspect_result.yuyinzhou_l2b.None.ultils.AverageMeter.update", "home.repos.pwc.inspect_result.yuyinzhou_l2b.None.ultils.AverageMeter.update", "home.repos.pwc.inspect_result.yuyinzhou_l2b.None.ultils.AverageMeter.synchronize_between_processes", "home.repos.pwc.inspect_result.yuyinzhou_l2b.None.ultils.AverageMeter.synchronize_between_processes", "home.repos.pwc.inspect_result.yuyinzhou_l2b.data_loader.ISIC_dataset.is_main_process", "home.repos.pwc.inspect_result.yuyinzhou_l2b.None.ultils.accuracy", "home.repos.pwc.inspect_result.yuyinzhou_l2b.data_loader.ISIC_dataset.is_main_process", "home.repos.pwc.inspect_result.yuyinzhou_l2b.None.ultils.accuracy", "home.repos.pwc.inspect_result.yuyinzhou_l2b.None.ultils.accuracy"], ["", "def", "train", "(", "epoch", ",", "trainloader", ",", "metaloader", ",", "train_sampler", ",", "net", ",", "meta_sampler", ",", "test_sampler", ",", "\n", "optimizer", ",", "optimizer_meta", ",", "criterion", ",", "writer", ",", "args", ")", ":", "\n", "\n", "    ", "if", "args", ".", "distribute", ":", "\n", "        ", "train_sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "if", "not", "args", ".", "baseline", ":", "\n", "            ", "meta_sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "", "test_sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "", "net", ".", "train", "(", ")", "\n", "train_loss", "=", "AverageMeter", "(", ")", "\n", "train_top1", "=", "AverageMeter", "(", ")", "\n", "\n", "for", "i", ",", "(", "image", ",", "labels", ")", "in", "enumerate", "(", "trainloader", ")", ":", "\n", "        ", "image", "=", "image", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "labels", "=", "labels", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "org_label", "=", "labels", "\n", "\n", "if", "args", ".", "mixup", ":", "\n", "            ", "lam", "=", "np", ".", "random", ".", "beta", "(", "32.0", ",", "32.0", ")", "\n", "indices", "=", "np", ".", "random", ".", "permutation", "(", "image", ".", "size", "(", "0", ")", ")", "\n", "image", "=", "image", "*", "lam", "+", "image", "[", "indices", "]", "*", "(", "1", "-", "lam", ")", "\n", "labels_shuffel", "=", "labels", "[", "indices", "]", "\n", "\n", "", "if", "args", ".", "baseline", ":", "\n", "            ", "outputs", "=", "net", "(", "image", ")", "\n", "if", "args", ".", "mixup", ":", "\n", "                ", "l_f", "=", "criterion", "(", "outputs", ",", "labels", ")", "*", "lam", "+", "criterion", "(", "outputs", ",", "labels_shuffel", ")", "*", "(", "1", "-", "lam", ")", "\n", "", "else", ":", "\n", "                ", "l_f", "=", "criterion", "(", "outputs", ",", "labels", ")", "\n", "", "prec1", ",", "prec5", "=", "accuracy", "(", "outputs", ",", "org_label", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "", "else", ":", "\n", "\n", "            ", "if", "epoch", "<=", "(", "args", ".", "warm_up", "-", "1", ")", ":", "\n", "                ", "outputs", "=", "net", "(", "image", ")", "\n", "\n", "criterion_warm", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "cuda", "(", ")", "\n", "if", "args", ".", "mixup", ":", "\n", "                    ", "l_f", "=", "criterion_warm", "(", "outputs", ",", "labels", ")", "*", "lam", "+", "criterion_warm", "(", "outputs", ",", "labels_shuffel", ")", "*", "(", "1", "-", "lam", ")", "\n", "", "else", ":", "\n", "                    ", "l_f", "=", "criterion_warm", "(", "outputs", ",", "labels", ")", "\n", "\n", "", "prec1", ",", "prec5", "=", "accuracy", "(", "outputs", ",", "org_label", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "\n", "", "else", ":", "\n", "                ", "with", "higher", ".", "innerloop_ctx", "(", "net", ",", "optimizer", ")", "as", "(", "meta_net", ",", "meta_optimizer", ")", ":", "\n", "                    ", "for", "s", "in", "range", "(", "args", ".", "meta_step", ")", ":", "\n", "                        ", "y_f_hat", "=", "meta_net", "(", "image", ")", "\n", "_", ",", "pesudo_labels", "=", "y_f_hat", ".", "max", "(", "1", ")", "\n", "if", "args", ".", "reweight_label", ":", "\n", "                            ", "if", "args", ".", "mixup", ":", "\n", "                                ", "cost1", "=", "criterion", "(", "y_f_hat", ",", "labels", ")", "*", "lam", "+", "criterion", "(", "y_f_hat", ",", "labels_shuffel", ")", "*", "(", "1", "-", "lam", ")", "\n", "cost2", "=", "criterion", "(", "y_f_hat", ",", "pesudo_labels", ")", "\n", "\n", "", "else", ":", "\n", "                                ", "cost1", "=", "criterion", "(", "y_f_hat", ",", "labels", ")", "\n", "cost2", "=", "criterion", "(", "y_f_hat", ",", "pesudo_labels", ")", "\n", "", "cost", "=", "torch", ".", "cat", "(", "(", "cost1", ".", "unsqueeze", "(", "0", ")", ",", "cost2", ".", "unsqueeze", "(", "0", ")", ")", ",", "dim", "=", "0", ")", "\n", "", "else", ":", "\n", "\n", "                            ", "if", "args", ".", "mixup", ":", "\n", "                                ", "cost", "=", "criterion", "(", "y_f_hat", ",", "labels", ")", "*", "lam", "+", "criterion", "(", "y_f_hat", ",", "labels_shuffel", ")", "*", "(", "1", "-", "lam", ")", "\n", "", "else", ":", "\n", "                                ", "cost", "=", "criterion", "(", "y_f_hat", ",", "labels", ")", "\n", "\n", "", "", "eps", "=", "torch", ".", "zeros", "(", "cost", ".", "size", "(", ")", ")", ".", "cuda", "(", ")", "\n", "eps", "=", "eps", ".", "requires_grad_", "(", ")", "\n", "\n", "l_f_meta", "=", "torch", ".", "sum", "(", "cost", "*", "eps", ")", "\n", "\n", "meta_optimizer", ".", "step", "(", "l_f_meta", ")", "\n", "\n", "\n", "", "val_data", ",", "val_labels", "=", "next", "(", "iter", "(", "metaloader", ")", ")", "\n", "val_data", "=", "val_data", ".", "cuda", "(", ")", "\n", "val_labels", "=", "val_labels", ".", "cuda", "(", ")", "\n", "\n", "y_g_hat", "=", "meta_net", "(", "val_data", ")", "\n", "l_g_meta", "=", "torch", ".", "mean", "(", "criterion", "(", "y_g_hat", ",", "val_labels", ")", ")", "\n", "\n", "grad_eps", "=", "torch", ".", "autograd", ".", "grad", "(", "l_g_meta", ",", "eps", ",", "only_inputs", "=", "True", ",", "allow_unused", "=", "True", ")", "[", "0", "]", ".", "detach", "(", ")", "\n", "\n", "", "if", "not", "args", ".", "reweight_label", ":", "\n", "                    ", "w_tilde", "=", "torch", ".", "clamp", "(", "-", "grad_eps", ",", "min", "=", "0", ")", "\n", "if", "args", ".", "dataset", "==", "'ISIC'", ":", "\n", "                        ", "w_tilde", "=", "torch", ".", "sigmoid", "(", "w_tilde", ")", "\n", "", "norm_c", "=", "torch", ".", "sum", "(", "w_tilde", ")", "+", "1e-10", "\n", "\n", "if", "norm_c", "!=", "0", ":", "\n", "                        ", "weight", "=", "w_tilde", "/", "norm_c", "\n", "", "else", ":", "\n", "                        ", "weight", "=", "w_tilde", "\n", "", "", "else", ":", "\n", "                    ", "w_tilde", "=", "-", "grad_eps", "\n", "w_tilde", "=", "w_tilde", ".", "view", "(", "-", "1", ")", "\n", "\n", "if", "args", ".", "hard_weight", ":", "\n", "                        ", "w_tilde", "=", "F", ".", "softmax", "(", "w_tilde", ",", "dim", "=", "-", "1", ")", "\n", "zeros", "=", "torch", ".", "zeros_like", "(", "w_tilde", ")", ".", "cuda", "(", ")", "\n", "weight", "=", "torch", ".", "where", "(", "w_tilde", "<=", "args", ".", "temperature", ",", "zeros", ",", "w_tilde", ")", "\n", "", "else", ":", "\n", "\n", "# $weight = F.softmax(w_tilde/args.temperature, dim=-1)", "\n", "                       ", "if", "args", ".", "norm_type", "==", "'org'", ":", "\n", "                            ", "w_tilde", "=", "torch", ".", "clamp", "(", "w_tilde", ",", "min", "=", "0", ")", "\n", "#if args.dataset == 'ISIC':", "\n", "#    w_tilde = torch.sigmoid(w_tilde)", "\n", "norm_c", "=", "torch", ".", "sum", "(", "w_tilde", ")", "+", "1e-10", "\n", "\n", "if", "norm_c", "!=", "0", ":", "\n", "                                ", "weight", "=", "w_tilde", "/", "norm_c", "\n", "", "else", ":", "\n", "                                ", "weight", "=", "w_tilde", "\n", "", "", "elif", "args", ".", "norm_type", "==", "'softmax'", ":", "\n", "                             ", "weight", "=", "F", ".", "softmax", "(", "w_tilde", "/", "args", ".", "temperature", ",", "dim", "=", "-", "1", ")", "\n", "", "elif", "args", ".", "norm_type", "==", "'sigmoid'", ":", "\n", "                             ", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "weight", "=", "sigmoid", "(", "w_tilde", ")", "\n", "weight", "/=", "torch", ".", "sum", "(", "weight", ")", "\n", "\n", "\n", "", "", "weight", "=", "weight", ".", "view", "(", "2", ",", "-", "1", ")", "\n", "\n", "", "y_f_hat", "=", "net", "(", "image", ")", "\n", "_", ",", "pesudo_labels", "=", "y_f_hat", ".", "max", "(", "1", ")", "\n", "prec1", ",", "prec5", "=", "accuracy", "(", "y_f_hat", ",", "org_label", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "\n", "if", "args", ".", "reweight_label", ":", "\n", "                    ", "if", "args", ".", "mixup", ":", "\n", "                        ", "cost1", "=", "criterion", "(", "y_f_hat", ",", "labels", ")", "*", "lam", "+", "criterion", "(", "y_f_hat", ",", "labels_shuffel", ")", "*", "(", "1", "-", "lam", ")", "\n", "cost2", "=", "criterion", "(", "y_f_hat", ",", "pesudo_labels", ")", "\n", "", "else", ":", "\n", "                        ", "cost1", "=", "criterion", "(", "y_f_hat", ",", "labels", ")", "\n", "cost2", "=", "criterion", "(", "y_f_hat", ",", "pesudo_labels", ")", "\n", "\n", "", "cost", "=", "torch", ".", "cat", "(", "(", "cost1", ".", "unsqueeze", "(", "0", ")", ",", "cost2", ".", "unsqueeze", "(", "0", ")", ")", ",", "dim", "=", "0", ")", "\n", "\n", "", "else", ":", "\n", "                    ", "if", "args", ".", "mixup", ":", "\n", "                        ", "cost", "=", "criterion", "(", "y_f_hat", ",", "labels", ")", "*", "lam", "+", "criterion", "(", "y_f_hat", ",", "labels_shuffel", ")", "*", "(", "1", "-", "lam", ")", "\n", "", "else", ":", "\n", "                        ", "cost", "=", "criterion", "(", "y_f_hat", ",", "labels", ")", "\n", "\n", "", "", "l_f", "=", "torch", ".", "sum", "(", "cost", "*", "weight", ")", "\n", "", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "l_f", ".", "backward", "(", ")", "\n", "if", "args", ".", "clipping_norm", ">", "0", ":", "\n", "            ", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "net", ".", "parameters", "(", ")", ",", "args", ".", "clipping_norm", ",", "norm_type", "=", "2", ")", "\n", "", "optimizer", ".", "step", "(", ")", "\n", "train_loss", ".", "update", "(", "l_f", ".", "item", "(", ")", ",", "image", ".", "size", "(", "0", ")", ")", "\n", "train_top1", ".", "update", "(", "prec1", ".", "item", "(", ")", ",", "image", ".", "size", "(", "0", ")", ")", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", "and", "is_main_process", "(", ")", ":", "\n", "            ", "print", "(", "'At epoch: {:03d} Step: {:03d}/{:03d} AVERAGE Acc: {:.4f} AVERAGE TRAIN loss : {:.4f}'", ".", "\n", "format", "(", "epoch", ",", "i", ",", "len", "(", "trainloader", ")", ",", "train_top1", ".", "avg", ",", "train_loss", ".", "val", ")", ")", "\n", "", "", "if", "args", ".", "distribute", ":", "\n", "        ", "train_loss", ".", "synchronize_between_processes", "(", ")", "\n", "train_top1", ".", "synchronize_between_processes", "(", ")", "\n", "\n", "if", "is_main_process", "(", ")", ":", "\n", "            ", "writer", ".", "add_scalar", "(", "'Train/loss'", ",", "train_loss", ".", "avg", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'Train/lr'", ",", "optimizer", ".", "param_groups", "[", "-", "1", "]", "[", "'lr'", "]", ",", "epoch", ")", "\n", "print", "(", "'At epoch: {:03d} the learning rate is : {:.4f}'", ".", "format", "(", "epoch", ",", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ")", ")", "\n", "print", "(", "'At epoch: {:03d} AVERAGE TRAIN loss : {:.4f}'", ".", "format", "(", "epoch", ",", "train_loss", ".", "avg", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "writer", ".", "add_scalar", "(", "'Train/loss'", ",", "train_loss", ".", "avg", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'Train/lr'", ",", "optimizer", ".", "param_groups", "[", "-", "1", "]", "[", "'lr'", "]", ",", "epoch", ")", "\n", "print", "(", "'At epoch: {:03d} the learning rate is : {:.4f}'", ".", "format", "(", "epoch", ",", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ")", ")", "\n", "print", "(", "'At epoch: {:03d} AVERAGE TRAIN loss : {:.4f}'", ".", "format", "(", "epoch", ",", "train_loss", ".", "avg", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuyinzhou_l2b.None.main.val": [[378, 415], ["net.eval", "ultils.AverageMeter", "ultils.AverageMeter", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "ultils.AverageMeter.synchronize_between_processes", "ultils.AverageMeter.synchronize_between_processes", "ultils.is_main_process", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "net", "torch.CrossEntropyLoss().cuda", "nn.CrossEntropyLoss().cuda.", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "ultils.accuracy", "ultils.AverageMeter.update", "ultils.AverageMeter.update", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "test_loss_criterion.item", "torch.autograd.Variable.size", "prec1.item", "torch.autograd.Variable.size", "torch.CrossEntropyLoss"], "function", ["home.repos.pwc.inspect_result.yuyinzhou_l2b.None.ultils.AverageMeter.synchronize_between_processes", "home.repos.pwc.inspect_result.yuyinzhou_l2b.None.ultils.AverageMeter.synchronize_between_processes", "home.repos.pwc.inspect_result.yuyinzhou_l2b.data_loader.ISIC_dataset.is_main_process", "home.repos.pwc.inspect_result.yuyinzhou_l2b.None.ultils.accuracy", "home.repos.pwc.inspect_result.yuyinzhou_l2b.None.ultils.AverageMeter.update", "home.repos.pwc.inspect_result.yuyinzhou_l2b.None.ultils.AverageMeter.update"], ["", "", "def", "val", "(", "epoch", ",", "testloader", ",", "net", ",", "writer", ",", "args", ")", ":", "\n", "    ", "net", ".", "eval", "(", ")", "\n", "test_loss", "=", "AverageMeter", "(", ")", "\n", "top1", "=", "AverageMeter", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "i", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "testloader", ")", ":", "\n", "            ", "inputs", "=", "torch", ".", "autograd", ".", "Variable", "(", "inputs", ".", "cuda", "(", ")", ")", "\n", "targets", "=", "torch", ".", "autograd", ".", "Variable", "(", "targets", ".", "cuda", "(", ")", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "outputs", "=", "net", "(", "inputs", ")", "\n", "test_loss_criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "cuda", "(", ")", "\n", "loss", "=", "test_loss_criterion", "(", "outputs", ",", "targets", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "\n", "prec1", ",", "prec5", "=", "accuracy", "(", "outputs", ",", "targets", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "\n", "test_loss", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "\n", "\n", "", "", "if", "args", ".", "distribute", ":", "\n", "\n", "        ", "top1", ".", "synchronize_between_processes", "(", ")", "\n", "test_loss", ".", "synchronize_between_processes", "(", ")", "\n", "\n", "if", "is_main_process", "(", ")", ":", "\n", "            ", "writer", ".", "add_scalar", "(", "'Test/loss'", ",", "test_loss", ".", "avg", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'Test/acc'", ",", "top1", ".", "avg", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'Test/best_acc'", ",", "best_acc", ",", "epoch", ")", "\n", "\n", "\n", "", "", "else", ":", "\n", "\n", "        ", "writer", ".", "add_scalar", "(", "'Test/loss'", ",", "test_loss", ".", "avg", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'Test/acc'", ",", "top1", ".", "avg", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'Test/best_acc'", ",", "best_acc", ",", "epoch", ")", "\n", "", "return", "top1", ".", "avg", ",", "test_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.yuyinzhou_l2b.None.ultils.AverageMeter.__init__": [[58, 60], ["ultils.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.yuyinzhou_l2b.None.ultils.AverageMeter.reset"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuyinzhou_l2b.None.ultils.AverageMeter.reset": [[61, 66], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.yuyinzhou_l2b.None.ultils.AverageMeter.update": [[67, 72], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.yuyinzhou_l2b.None.ultils.AverageMeter.synchronize_between_processes": [[73, 86], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.barrier", "torch.barrier", "torch.barrier", "torch.all_reduce", "torch.all_reduce", "torch.all_reduce", "t.tolist.tolist.tolist", "int", "ultils.is_dist_avail_and_initialized"], "methods", ["home.repos.pwc.inspect_result.yuyinzhou_l2b.data_loader.ISIC_dataset.is_dist_avail_and_initialized"], ["", "def", "synchronize_between_processes", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Warning: does not synchronize the deque!\n        \"\"\"", "\n", "if", "not", "is_dist_avail_and_initialized", "(", ")", ":", "\n", "            ", "return", "\n", "", "t", "=", "torch", ".", "tensor", "(", "[", "self", ".", "count", ",", "self", ".", "sum", "]", ",", "dtype", "=", "torch", ".", "float64", ",", "device", "=", "'cuda'", ")", "\n", "dist", ".", "barrier", "(", ")", "\n", "dist", ".", "all_reduce", "(", "t", ")", "\n", "t", "=", "t", ".", "tolist", "(", ")", "\n", "self", ".", "count", "=", "int", "(", "t", "[", "0", "]", ")", "\n", "self", ".", "sum", "=", "t", "[", "1", "]", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "(", "self", ".", "count", "+", "1e-5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuyinzhou_l2b.None.ultils.is_dist_avail_and_initialized": [[13, 19], ["torch.is_available", "torch.is_initialized"], "function", ["None"], ["def", "is_dist_avail_and_initialized", "(", ")", ":", "\n", "    ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "False", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "False", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.yuyinzhou_l2b.None.ultils.get_world_size": [[21, 25], ["torch.get_world_size", "ultils.is_dist_avail_and_initialized"], "function", ["home.repos.pwc.inspect_result.yuyinzhou_l2b.None.ultils.get_world_size", "home.repos.pwc.inspect_result.yuyinzhou_l2b.data_loader.ISIC_dataset.is_dist_avail_and_initialized"], ["", "def", "get_world_size", "(", ")", ":", "\n", "    ", "if", "not", "is_dist_avail_and_initialized", "(", ")", ":", "\n", "        ", "return", "1", "\n", "", "return", "dist", ".", "get_world_size", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuyinzhou_l2b.None.ultils.get_rank": [[27, 31], ["torch.get_rank", "ultils.is_dist_avail_and_initialized"], "function", ["home.repos.pwc.inspect_result.yuyinzhou_l2b.data_loader.ISIC_dataset.get_rank", "home.repos.pwc.inspect_result.yuyinzhou_l2b.data_loader.ISIC_dataset.is_dist_avail_and_initialized"], ["", "def", "get_rank", "(", ")", ":", "\n", "    ", "if", "not", "is_dist_avail_and_initialized", "(", ")", ":", "\n", "        ", "return", "0", "\n", "", "return", "dist", ".", "get_rank", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuyinzhou_l2b.None.ultils.is_main_process": [[34, 36], ["ultils.get_rank"], "function", ["home.repos.pwc.inspect_result.yuyinzhou_l2b.data_loader.ISIC_dataset.get_rank"], ["", "def", "is_main_process", "(", ")", ":", "\n", "    ", "return", "get_rank", "(", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.yuyinzhou_l2b.None.ultils.soft_cross_entropy": [[38, 48], ["loss.mean", "loss.sum", "NotImplementedError", "torch.log_softmax"], "function", ["None"], ["", "def", "soft_cross_entropy", "(", "logit", ",", "pseudo_target", ",", "reduction", "=", "'none'", ")", ":", "\n", "    ", "loss", "=", "-", "(", "pseudo_target", "*", "F", ".", "log_softmax", "(", "logit", ",", "-", "1", ")", ")", ".", "sum", "(", "-", "1", ")", "\n", "if", "reduction", "==", "'mean'", ":", "\n", "        ", "return", "loss", ".", "mean", "(", ")", "\n", "", "elif", "reduction", "==", "'none'", ":", "\n", "        ", "return", "loss", "\n", "", "elif", "reduction", "==", "'sum'", ":", "\n", "        ", "return", "loss", ".", "sum", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'Invalid reduction: %s'", "%", "reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuyinzhou_l2b.None.ultils.to_one_hot": [[50, 55], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros.scatter_", "inp.unsqueeze", "inp.size"], "function", ["None"], ["", "", "def", "to_one_hot", "(", "inp", ",", "num_classes", ",", "device", "=", "'cuda'", ")", ":", "\n", "    ", "'''one-hot label'''", "\n", "y_onehot", "=", "torch", ".", "zeros", "(", "(", "inp", ".", "size", "(", "0", ")", ",", "num_classes", ")", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", ")", "\n", "y_onehot", ".", "scatter_", "(", "1", ",", "inp", ".", "unsqueeze", "(", "1", ")", ",", "1", ")", "\n", "return", "y_onehot", "\n", "\n"]], "home.repos.pwc.inspect_result.yuyinzhou_l2b.None.ultils.accuracy": [[88, 102], ["max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.reshape().expand_as", "correct[].reshape().float().sum", "res.append", "correct[].reshape().float().sum.mul_", "target.reshape", "correct[].reshape().float", "correct[].reshape"], "function", ["None"], ["", "", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the precision@k for the specified values of k\"\"\"", "\n", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "reshape", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "        ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "reshape", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.yuyinzhou_l2b.None.ultils.prepare_set": [[103, 200], ["torchvision.Compose", "torchvision.Compose", "clothing_dataset", "clothing_dataset", "clothing_dataset", "clothing_dataset", "ultils.is_main_process", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "CIFAR10", "CIFAR10", "CIFAR10", "CIFAR100", "CIFAR100", "CIFAR100", "ISIC2019", "ISIC2019", "ISIC2019", "print", "torchvision.Resize", "torchvision.RandomCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Resize", "torchvision.CenterCrop", "torchvision.ToTensor", "torchvision.Normalize", "len", "torchvision.RandomHorizontalFlip", "torchvision.RandomRotation", "torchvision.RandomResizedCrop", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Resize", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.RandomCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.ToTensor", "torchvision.Normalize"], "function", ["home.repos.pwc.inspect_result.yuyinzhou_l2b.data_loader.ISIC_dataset.is_main_process"], ["", "def", "prepare_set", "(", "args", ")", ":", "\n", "    ", "if", "args", ".", "dataset", "==", "'clothing1m'", ":", "\n", "        ", "transform_train", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "transforms", ".", "RandomCrop", "(", "224", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.6959", ",", "0.6537", ",", "0.6371", ")", ",", "(", "0.3113", ",", "0.3192", ",", "0.3214", ")", ")", ",", "\n", "]", ")", "\n", "transform_test", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.6959", ",", "0.6537", ",", "0.6371", ")", ",", "(", "0.3113", ",", "0.3192", ",", "0.3214", ")", ")", ",", "\n", "]", ")", "\n", "trainset", "=", "clothing_dataset", "(", "args", ".", "data_path", ",", "transform", "=", "transform_train", ",", "mode", "=", "'all'", ",", "num_samples", "=", "args", ".", "num_batch", "*", "args", ".", "train_batch_size", ")", "\n", "metaset", "=", "clothing_dataset", "(", "args", ".", "data_path", ",", "transform", "=", "transform_test", ",", "mode", "=", "'val'", ",", "num_meta", "=", "args", ".", "num_meta", ")", "\n", "valset", "=", "clothing_dataset", "(", "args", ".", "data_path", ",", "transform", "=", "transform_test", ",", "mode", "=", "'val'", ")", "\n", "testset", "=", "clothing_dataset", "(", "args", ".", "data_path", ",", "transform", "=", "transform_test", ",", "mode", "=", "'test'", ")", "\n", "args", ".", "num_classes", "=", "14", "\n", "if", "is_main_process", "(", ")", ":", "\n", "            ", "print", "(", "len", "(", "metaset", ")", ")", "\n", "", "return", "trainset", ",", "metaset", ",", "valset", ",", "testset", ",", "args", ".", "num_classes", "\n", "\n", "", "if", "args", ".", "dataset", "==", "'ISIC'", ":", "\n", "        ", "transform_train", "=", "transforms", ".", "Compose", "(", "[", "\n", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "RandomRotation", "(", "degrees", "=", "180", ")", ",", "\n", "\n", "transforms", ".", "RandomResizedCrop", "(", "size", "=", "224", ",", "scale", "=", "(", "0.3", ",", "1.0", ")", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "]", ")", "\n", "\n", "transform_test", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "(", "224", ",", "224", ")", ")", ",", "\n", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.485", ",", "0.456", ",", "0.406", ")", ",", "\n", "(", "0.229", ",", "0.224", ",", "0.225", ")", ")", "]", ")", "\n", "", "else", ":", "\n", "        ", "transform_train", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.4914", ",", "0.4822", ",", "0.4465", ")", ",", "(", "0.2023", ",", "0.1994", ",", "0.2010", ")", ")", ",", "\n", "]", ")", "\n", "\n", "transform_test", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.4914", ",", "0.4822", ",", "0.4465", ")", ",", "(", "0.2023", ",", "0.1994", ",", "0.2010", ")", ")", ",", "\n", "]", ")", "\n", "\n", "", "if", "args", ".", "dataset", "==", "\"cifar10\"", ":", "\n", "        ", "trainset", "=", "CIFAR10", "(", "\n", "root", "=", "args", ".", "data_path", ",", "train", "=", "True", ",", "meta", "=", "False", ",", "num_meta", "=", "args", ".", "num_meta", ",", "corruption_prob", "=", "args", ".", "corruption_prob", ",", "\n", "corruption_type", "=", "args", ".", "corruption_type", ",", "transform", "=", "transform_train", ",", "\n", "download", "=", "True", ",", "seed", "=", "args", ".", "seed", ",", "local_rank", "=", "args", ".", "local_rank", ",", "\n", "temporal_label_file", "=", "args", ".", "temp_label", ")", "\n", "\n", "metaset", "=", "CIFAR10", "(", "\n", "root", "=", "args", ".", "data_path", ",", "train", "=", "True", ",", "meta", "=", "True", ",", "num_meta", "=", "args", ".", "num_meta", ",", "corruption_prob", "=", "args", ".", "corruption_prob", ",", "\n", "corruption_type", "=", "args", ".", "corruption_type", ",", "transform", "=", "transform_train", ",", "download", "=", "True", ",", "seed", "=", "args", ".", "seed", ")", "\n", "\n", "testset", "=", "CIFAR10", "(", "root", "=", "args", ".", "data_path", ",", "train", "=", "False", ",", "transform", "=", "transform_test", ",", "download", "=", "True", ",", "seed", "=", "args", ".", "seed", ")", "\n", "\n", "", "if", "args", ".", "dataset", "==", "\"cifar100\"", ":", "\n", "        ", "trainset", "=", "CIFAR100", "(", "\n", "root", "=", "args", ".", "data_path", ",", "train", "=", "True", ",", "meta", "=", "False", ",", "num_meta", "=", "args", ".", "num_meta", ",", "corruption_prob", "=", "args", ".", "corruption_prob", ",", "\n", "corruption_type", "=", "args", ".", "corruption_type", ",", "transform", "=", "transform_train", ",", "download", "=", "True", ",", "seed", "=", "args", ".", "seed", ",", "\n", "local_rank", "=", "args", ".", "local_rank", ",", "\n", "temporal_label_file", "=", "args", ".", "temp_label", "\n", ")", "\n", "\n", "metaset", "=", "CIFAR100", "(", "\n", "root", "=", "args", ".", "data_path", ",", "train", "=", "True", ",", "meta", "=", "True", ",", "num_meta", "=", "args", ".", "num_meta", ",", "corruption_prob", "=", "args", ".", "corruption_prob", ",", "\n", "corruption_type", "=", "args", ".", "corruption_type", ",", "transform", "=", "transform_train", ",", "download", "=", "True", ",", "seed", "=", "args", ".", "seed", ")", "\n", "\n", "testset", "=", "CIFAR100", "(", "root", "=", "args", ".", "data_path", ",", "train", "=", "False", ",", "transform", "=", "transform_test", ",", "download", "=", "True", ",", "seed", "=", "args", ".", "seed", ")", "\n", "\n", "", "if", "args", ".", "dataset", "==", "'ISIC'", ":", "\n", "        ", "trainset", "=", "ISIC2019", "(", "\n", "root", "=", "args", ".", "data_path", ",", "train", "=", "True", ",", "meta", "=", "False", ",", "split", "=", "'ISIC/train.lst'", ",", "\n", "num_classes", "=", "args", ".", "num_classes", ",", "groundtruth_file", "=", "'ISIC/ISIC_2019_Training_GroundTruth.csv'", ",", "\n", "corruption_prob", "=", "args", ".", "corruption_prob", ",", "corruption_type", "=", "args", ".", "corruption_type", ",", "transform", "=", "transform_train", ",", "seed", "=", "args", ".", "seed", ",", "\n", "local_rank", "=", "args", ".", "local_rank", ",", "\n", "temporal_label_file", "=", "args", ".", "temp_label", "\n", ")", "\n", "metaset", "=", "ISIC2019", "(", "\n", "root", "=", "args", ".", "data_path", ",", "train", "=", "True", ",", "meta", "=", "True", ",", "split", "=", "'ISIC/val.lst'", ",", "\n", "num_classes", "=", "args", ".", "num_classes", ",", "groundtruth_file", "=", "'ISIC/ISIC_2019_Training_GroundTruth.csv'", ",", "\n", "corruption_prob", "=", "args", ".", "corruption_prob", ",", "corruption_type", "=", "args", ".", "corruption_type", ",", "transform", "=", "transform_train", ",", "seed", "=", "args", ".", "seed", ")", "\n", "\n", "testset", "=", "ISIC2019", "(", "root", "=", "args", ".", "data_path", ",", "train", "=", "False", ",", "split", "=", "'ISIC/test.lst'", ",", "\n", "transform", "=", "transform_test", ",", "seed", "=", "args", ".", "seed", ")", "\n", "", "return", "trainset", ",", "metaset", ",", "testset", "\n", "\n"]], "home.repos.pwc.inspect_result.yuyinzhou_l2b.None.ultils.prepare_dataloder": [[201, 254], ["torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "ultils.prepare_set", "ultils.prepare_set", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size"], "function", ["home.repos.pwc.inspect_result.yuyinzhou_l2b.None.ultils.prepare_set", "home.repos.pwc.inspect_result.yuyinzhou_l2b.None.ultils.prepare_set", "home.repos.pwc.inspect_result.yuyinzhou_l2b.None.ultils.get_world_size", "home.repos.pwc.inspect_result.yuyinzhou_l2b.None.ultils.get_world_size", "home.repos.pwc.inspect_result.yuyinzhou_l2b.None.ultils.get_world_size", "home.repos.pwc.inspect_result.yuyinzhou_l2b.None.ultils.get_world_size", "home.repos.pwc.inspect_result.yuyinzhou_l2b.None.ultils.get_world_size", "home.repos.pwc.inspect_result.yuyinzhou_l2b.None.ultils.get_world_size", "home.repos.pwc.inspect_result.yuyinzhou_l2b.None.ultils.get_world_size", "home.repos.pwc.inspect_result.yuyinzhou_l2b.None.ultils.get_world_size", "home.repos.pwc.inspect_result.yuyinzhou_l2b.None.ultils.get_world_size", "home.repos.pwc.inspect_result.yuyinzhou_l2b.None.ultils.get_world_size", "home.repos.pwc.inspect_result.yuyinzhou_l2b.None.ultils.get_world_size", "home.repos.pwc.inspect_result.yuyinzhou_l2b.None.ultils.get_world_size", "home.repos.pwc.inspect_result.yuyinzhou_l2b.None.ultils.get_world_size", "home.repos.pwc.inspect_result.yuyinzhou_l2b.None.ultils.get_world_size", "home.repos.pwc.inspect_result.yuyinzhou_l2b.None.ultils.get_world_size"], ["", "def", "prepare_dataloder", "(", "args", ")", ":", "\n", "    ", "if", "args", ".", "dataset", "==", "'clothing1m'", ":", "\n", "        ", "trainset", ",", "metaset", ",", "valset", ",", "testset", ",", "args", ".", "num_classes", "=", "prepare_set", "(", "args", ")", "\n", "", "else", ":", "\n", "        ", "trainset", ",", "metaset", ",", "testset", "=", "prepare_set", "(", "args", ")", "\n", "\n", "", "if", "args", ".", "distribute", ":", "\n", "        ", "train_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "trainset", ",", "shuffle", "=", "True", ",", "\n", "num_replicas", "=", "torch", ".", "distributed", ".", "get_world_size", "(", ")", ",", "\n", "rank", "=", "args", ".", "local_rank", ")", "\n", "if", "not", "args", ".", "baseline", ":", "\n", "            ", "meta_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "metaset", ",", "shuffle", "=", "True", ",", "\n", "num_replicas", "=", "torch", ".", "distributed", ".", "get_world_size", "(", ")", ",", "\n", "rank", "=", "args", ".", "local_rank", ")", "\n", "", "else", ":", "\n", "            ", "meta_sampler", "=", "None", "\n", "", "test_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "testset", ",", "shuffle", "=", "False", ",", "\n", "num_replicas", "=", "torch", ".", "distributed", ".", "get_world_size", "(", ")", ",", "\n", "rank", "=", "args", ".", "local_rank", ")", "\n", "eval_batch_size", "=", "args", ".", "eval_batch_size", "//", "torch", ".", "distributed", ".", "get_world_size", "(", ")", "\n", "train_batch_size", "=", "args", ".", "train_batch_size", "//", "torch", ".", "distributed", ".", "get_world_size", "(", ")", "\n", "\n", "", "else", ":", "\n", "        ", "train_sampler", "=", "None", "\n", "meta_sampler", "=", "None", "\n", "test_sampler", "=", "None", "\n", "eval_batch_size", "=", "args", ".", "eval_batch_size", "\n", "train_batch_size", "=", "args", ".", "train_batch_size", "\n", "\n", "", "trainloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "trainset", ",", "\n", "shuffle", "=", "not", "args", ".", "distribute", ",", "\n", "batch_size", "=", "train_batch_size", ",", "\n", "num_workers", "=", "4", ",", "\n", "sampler", "=", "train_sampler", ",", "\n", "pin_memory", "=", "True", ")", "\n", "if", "not", "args", ".", "baseline", ":", "\n", "        ", "metaloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "metaset", ",", "\n", "shuffle", "=", "not", "args", ".", "distribute", ",", "\n", "batch_size", "=", "train_batch_size", ",", "\n", "num_workers", "=", "0", ",", "\n", "sampler", "=", "meta_sampler", ",", "\n", "pin_memory", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "metaloader", "=", "None", "\n", "\n", "", "testloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "testset", ",", "\n", "shuffle", "=", "False", ",", "\n", "batch_size", "=", "eval_batch_size", ",", "\n", "num_workers", "=", "4", ",", "\n", "sampler", "=", "test_sampler", ",", "\n", "pin_memory", "=", "True", ")", "\n", "\n", "return", "trainloader", ",", "testloader", ",", "metaloader", ",", "train_sampler", ",", "test_sampler", ",", "meta_sampler", "\n", "\n"]], "home.repos.pwc.inspect_result.yuyinzhou_l2b.models.Resnet50.ResNet50.__init__": [[6, 17], ["torch.Module.__init__", "torchvision.models.resnet50", "torch.Identity", "torch.Identity", "torch.Identity", "torch.Linear", "torch.Linear", "torch.Linear", "Resnet50.ResNet50.init_weights"], "methods", ["home.repos.pwc.inspect_result.yuyinzhou_l2b.data_loader.ISIC_dataset.ISIC2019.__init__", "home.repos.pwc.inspect_result.yuyinzhou_l2b.models.Resnet50.ResNet18.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "import", "torchvision", "\n", "import", "os", "\n", "\n", "os", ".", "environ", "[", "'TORCH_HOME'", "]", "=", "'cache'", "# hacky workaround to set model dir", "\n", "self", ".", "resnet50", "=", "torchvision", ".", "models", ".", "resnet50", "(", "pretrained", "=", "True", ")", "\n", "self", ".", "resnet50", ".", "fc", "=", "nn", ".", "Identity", "(", ")", "# remote last fc", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "2048", ",", "num_classes", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuyinzhou_l2b.models.Resnet50.ResNet50.init_weights": [[18, 21], ["torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "Resnet50.ResNet50.fc.bias.data.zero_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "fc", ".", "weight", ")", "\n", "self", ".", "fc", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuyinzhou_l2b.models.Resnet50.ResNet50.forward": [[22, 29], ["Resnet50.ResNet50.resnet50", "Resnet50.ResNet50.fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "return_h", "=", "False", ")", ":", "# (bs, C, H, W)", "\n", "        ", "pooled_output", "=", "self", ".", "resnet50", "(", "x", ")", "\n", "logit", "=", "self", ".", "fc", "(", "pooled_output", ")", "\n", "if", "return_h", ":", "\n", "            ", "return", "logit", ",", "pooled_output", "\n", "", "else", ":", "\n", "            ", "return", "logit", "\n", "\n"]], "home.repos.pwc.inspect_result.yuyinzhou_l2b.models.Resnet50.ResNet18.__init__": [[32, 43], ["torch.Module.__init__", "torchvision.models.resnet18", "torch.Identity", "torch.Identity", "torch.Identity", "torch.Linear", "torch.Linear", "torch.Linear", "Resnet50.ResNet18.init_weights"], "methods", ["home.repos.pwc.inspect_result.yuyinzhou_l2b.data_loader.ISIC_dataset.ISIC2019.__init__", "home.repos.pwc.inspect_result.yuyinzhou_l2b.models.Resnet50.ResNet18.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "import", "torchvision", "\n", "import", "os", "\n", "\n", "os", ".", "environ", "[", "'TORCH_HOME'", "]", "=", "'cache'", "# hacky workaround to set model dir", "\n", "self", ".", "resnet18", "=", "torchvision", ".", "models", ".", "resnet18", "(", "pretrained", "=", "True", ")", "\n", "self", ".", "resnet18", ".", "fc", "=", "nn", ".", "Identity", "(", ")", "# remote last fc", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", ",", "num_classes", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuyinzhou_l2b.models.Resnet50.ResNet18.init_weights": [[44, 47], ["torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "Resnet50.ResNet18.fc.bias.data.zero_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "fc", ".", "weight", ")", "\n", "self", ".", "fc", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuyinzhou_l2b.models.Resnet50.ResNet18.forward": [[48, 55], ["Resnet50.ResNet18.resnet18", "Resnet50.ResNet18.fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "return_h", "=", "False", ")", ":", "# (bs, C, H, W)", "\n", "        ", "pooled_output", "=", "self", ".", "resnet18", "(", "x", ")", "\n", "logit", "=", "self", ".", "fc", "(", "pooled_output", ")", "\n", "if", "return_h", ":", "\n", "            ", "return", "logit", ",", "pooled_output", "\n", "", "else", ":", "\n", "            ", "return", "logit", "", "", "", "", ""]], "home.repos.pwc.inspect_result.yuyinzhou_l2b.models.wide_resnet.wide_basic.__init__": [[32, 43], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.yuyinzhou_l2b.data_loader.ISIC_dataset.ISIC2019.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "wide_basic", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "True", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.yuyinzhou_l2b.models.wide_resnet.wide_basic.forward": [[45, 51], ["wide_resnet.wide_basic.conv1", "wide_resnet.wide_basic.conv2", "wide_resnet.wide_basic.shortcut", "act", "act", "wide_resnet.wide_basic.bn1", "wide_resnet.wide_basic.bn2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "act", "(", "self", ".", "bn1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "conv2", "(", "act", "(", "self", ".", "bn2", "(", "out", ")", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.yuyinzhou_l2b.models.wide_resnet.Wide_ResNet.__init__": [[54, 72], ["torch.Module.__init__", "int", "print", "wide_resnet.conv3x3", "wide_resnet.Wide_ResNet._wide_layer", "wide_resnet.Wide_ResNet._wide_layer", "wide_resnet.Wide_ResNet._wide_layer", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.yuyinzhou_l2b.data_loader.ISIC_dataset.ISIC2019.__init__", "home.repos.pwc.inspect_result.yuyinzhou_l2b.models.wide_resnet.conv3x3", "home.repos.pwc.inspect_result.yuyinzhou_l2b.models.wide_resnet.Wide_ResNet._wide_layer", "home.repos.pwc.inspect_result.yuyinzhou_l2b.models.wide_resnet.Wide_ResNet._wide_layer", "home.repos.pwc.inspect_result.yuyinzhou_l2b.models.wide_resnet.Wide_ResNet._wide_layer"], ["    ", "def", "__init__", "(", "self", ",", "depth", ",", "widen_factor", ",", "num_classes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "Wide_ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "in_planes", "=", "16", "\n", "\n", "assert", "(", "(", "depth", "-", "4", ")", "%", "6", "==", "0", ")", ",", "'Wide-resnet_v2 depth should be 6n+4'", "\n", "n", "=", "int", "(", "(", "depth", "-", "4", ")", "/", "6", ")", "\n", "k", "=", "widen_factor", "\n", "\n", "print", "(", "'| Wide-Resnet %dx%d'", "%", "(", "depth", ",", "k", ")", ")", "\n", "nStages", "=", "[", "16", ",", "16", "*", "k", ",", "32", "*", "k", ",", "64", "*", "k", "]", "\n", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "3", ",", "nStages", "[", "0", "]", ",", "stride", "=", "stride", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_wide_layer", "(", "wide_basic", ",", "nStages", "[", "1", "]", ",", "n", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_wide_layer", "(", "wide_basic", ",", "nStages", "[", "2", "]", ",", "n", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_wide_layer", "(", "wide_basic", ",", "nStages", "[", "3", "]", ",", "n", ",", "stride", "=", "2", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "nStages", "[", "3", "]", ",", "momentum", "=", "0.9", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "nStages", "[", "3", "]", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuyinzhou_l2b.models.wide_resnet.Wide_ResNet._wide_layer": [[73, 82], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_wide_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuyinzhou_l2b.models.wide_resnet.Wide_ResNet.forward": [[83, 107], ["wide_resnet.Wide_ResNet.conv1", "wide_resnet.Wide_ResNet.layer1", "wide_resnet.Wide_ResNet.layer2", "wide_resnet.Wide_ResNet.layer3", "act", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "wide_resnet.Wide_ResNet.reshape", "wide_resnet.Wide_ResNet.linear", "wide_resnet.Wide_ResNet.bn1", "wide_resnet.Wide_ResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "out", "=", "x", "\n", "\n", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "\n", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "\n", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "\n", "\n", "\n", "out", "=", "act", "(", "self", ".", "bn1", "(", "out", ")", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "8", ")", "\n", "out", "=", "out", ".", "reshape", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.yuyinzhou_l2b.models.wide_resnet.conv3x3": [[17, 19], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuyinzhou_l2b.models.wide_resnet.conv_init": [[21, 29], ["classname.find", "torch.xavier_uniform", "torch.constant", "classname.find", "torch.constant", "torch.constant", "numpy.sqrt"], "function", ["None"], ["", "def", "conv_init", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "xavier_uniform", "(", "m", ".", "weight", ",", "gain", "=", "np", ".", "sqrt", "(", "2", ")", ")", "\n", "init", ".", "constant", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "constant", "(", "m", ".", "weight", ",", "1", ")", "\n", "init", ".", "constant", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuyinzhou_l2b.models.wide_resnet.wrn28_10": [[109, 113], ["wide_resnet.Wide_ResNet"], "function", ["None"], ["", "", "def", "wrn28_10", "(", "num_classes", "=", "10", ",", "dropout", "=", "False", ",", "stride", "=", "1", ")", ":", "\n", "# print ('this')", "\n", "    ", "model", "=", "Wide_ResNet", "(", "depth", "=", "28", ",", "widen_factor", "=", "10", ",", "num_classes", "=", "num_classes", ",", "stride", "=", "stride", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.yuyinzhou_l2b.models.wide_resnet.wrn28_2": [[115, 119], ["wide_resnet.Wide_ResNet"], "function", ["None"], ["", "def", "wrn28_2", "(", "num_classes", "=", "10", ",", "dropout", "=", "False", ",", "stride", "=", "1", ")", ":", "\n", "# print ('this')", "\n", "    ", "model", "=", "Wide_ResNet", "(", "depth", "=", "28", ",", "widen_factor", "=", "2", ",", "num_classes", "=", "num_classes", ",", "stride", "=", "stride", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.yuyinzhou_l2b.models.PreResNet.PreActBlock.__init__": [[10, 20], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.yuyinzhou_l2b.data_loader.ISIC_dataset.ISIC2019.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "PreActBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.yuyinzhou_l2b.models.PreResNet.PreActBlock.forward": [[22, 29], ["torch.relu", "torch.relu", "torch.relu", "PreResNet.PreActBlock.conv1", "PreResNet.PreActBlock.conv2", "PreResNet.PreActBlock.bn1", "hasattr", "PreResNet.PreActBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "PreResNet.PreActBlock.bn2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "shortcut", "=", "self", ".", "shortcut", "(", "out", ")", "if", "hasattr", "(", "self", ",", "'shortcut'", ")", "else", "x", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "out", ")", ")", ")", "\n", "out", "+=", "shortcut", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.yuyinzhou_l2b.models.PreResNet.PreActBottleneck.__init__": [[35, 47], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.yuyinzhou_l2b.data_loader.ISIC_dataset.ISIC2019.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "PreActBottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.yuyinzhou_l2b.models.PreResNet.PreActBottleneck.forward": [[49, 57], ["torch.relu", "torch.relu", "torch.relu", "PreResNet.PreActBottleneck.conv1", "PreResNet.PreActBottleneck.conv2", "PreResNet.PreActBottleneck.conv3", "PreResNet.PreActBottleneck.bn1", "hasattr", "PreResNet.PreActBottleneck.shortcut", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "PreResNet.PreActBottleneck.bn2", "PreResNet.PreActBottleneck.bn3"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "shortcut", "=", "self", ".", "shortcut", "(", "out", ")", "if", "hasattr", "(", "self", ",", "'shortcut'", ")", "else", "x", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "conv3", "(", "F", ".", "relu", "(", "self", ".", "bn3", "(", "out", ")", ")", ")", "\n", "out", "+=", "shortcut", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.yuyinzhou_l2b.models.PreResNet.PreActResNet.__init__": [[60, 70], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "PreResNet.PreActResNet._make_layer", "PreResNet.PreActResNet._make_layer", "PreResNet.PreActResNet._make_layer", "PreResNet.PreActResNet._make_layer", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.yuyinzhou_l2b.data_loader.ISIC_dataset.ISIC2019.__init__", "home.repos.pwc.inspect_result.yuyinzhou_l2b.models.PreResNet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.yuyinzhou_l2b.models.PreResNet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.yuyinzhou_l2b.models.PreResNet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.yuyinzhou_l2b.models.PreResNet.PreActResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "PreActResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "64", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "num_blocks", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuyinzhou_l2b.models.PreResNet.PreActResNet._make_layer": [[71, 78], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuyinzhou_l2b.models.PreResNet.PreActResNet.forward": [[79, 89], ["PreResNet.PreActResNet.conv1", "PreResNet.PreActResNet.layer1", "PreResNet.PreActResNet.layer2", "PreResNet.PreActResNet.layer3", "PreResNet.PreActResNet.layer4", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "PreResNet.PreActResNet.view", "PreResNet.PreActResNet.linear", "PreResNet.PreActResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.yuyinzhou_l2b.models.PreResNet.PreActResNet18": [[90, 92], ["PreResNet.PreActResNet"], "function", ["None"], ["", "", "def", "PreActResNet18", "(", "num_classes", "=", "10", ")", ":", "\n", "    ", "return", "PreActResNet", "(", "PreActBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "num_classes", "=", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuyinzhou_l2b.models.PreResNet.PreActResNet34": [[93, 95], ["PreResNet.PreActResNet"], "function", ["None"], ["", "def", "PreActResNet34", "(", "num_classes", "=", "10", ")", ":", "\n", "    ", "return", "PreActResNet", "(", "PreActBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "num_classes", "=", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuyinzhou_l2b.models.PreResNet.PreActResNet50": [[96, 98], ["PreResNet.PreActResNet"], "function", ["None"], ["", "def", "PreActResNet50", "(", "num_classes", "=", "10", ")", ":", "\n", "    ", "return", "PreActResNet", "(", "PreActBottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "num_classes", "=", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuyinzhou_l2b.models.PreResNet.PreActResNet101": [[99, 101], ["PreResNet.PreActResNet"], "function", ["None"], ["", "def", "PreActResNet101", "(", "num_classes", "=", "10", ")", ":", "\n", "    ", "return", "PreActResNet", "(", "PreActBottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "num_classes", "=", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuyinzhou_l2b.models.PreResNet.PreActResNet152": [[102, 104], ["PreResNet.PreActResNet"], "function", ["None"], ["", "def", "PreActResNet152", "(", "num_classes", "=", "10", ")", ":", "\n", "    ", "return", "PreActResNet", "(", "PreActBottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "num_classes", "=", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuyinzhou_l2b.models.PreResNet.test": [[106, 110], ["PreResNet.PreActResNet18", "PreActResNet18.", "print", "torch.randn", "torch.randn", "torch.randn", "net.size"], "function", ["home.repos.pwc.inspect_result.yuyinzhou_l2b.models.PreResNet.PreActResNet18"], ["", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "PreActResNet18", "(", ")", "\n", "y", "=", "net", "(", "(", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", ")", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuyinzhou_l2b.data_loader.Clothing1M_dataset.clothing_dataset.__init__": [[10, 70], ["open", "f.read().splitlines", "open", "f.read().splitlines", "random.shuffle", "torch.zeros", "random.shuffle", "l.split", "int", "l.split", "int", "open", "f.read().splitlines", "f.read", "f.read", "train_imgs.append", "Clothing1M_dataset.clothing_dataset.train_imgs.append", "open", "f.read().splitlines", "torch.zeros", "f.read", "len", "Clothing1M_dataset.clothing_dataset.test_imgs.append", "open", "f.read().splitlines", "f.read", "f.read", "Clothing1M_dataset.clothing_dataset.val_imgs.append", "Clothing1M_dataset.clothing_dataset.val_imgs.append", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "transform", ",", "mode", ",", "num_samples", "=", "0", ",", "num_class", "=", "14", ",", "num_meta", "=", "14313", ")", ":", "\n", "\n", "        ", "self", ".", "root", "=", "root", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "train_labels", "=", "{", "}", "\n", "self", ".", "test_labels", "=", "{", "}", "\n", "self", ".", "val_labels", "=", "{", "}", "\n", "\n", "with", "open", "(", "'%s/noisy_label_kv.txt'", "%", "self", ".", "root", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "lines", "=", "f", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "for", "l", "in", "lines", ":", "\n", "                ", "entry", "=", "l", ".", "split", "(", ")", "\n", "img_path", "=", "'%s/images/'", "%", "self", ".", "root", "+", "entry", "[", "0", "]", "[", "7", ":", "]", "\n", "self", ".", "train_labels", "[", "img_path", "]", "=", "int", "(", "entry", "[", "1", "]", ")", "\n", "", "", "with", "open", "(", "'%s/clean_label_kv.txt'", "%", "self", ".", "root", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "lines", "=", "f", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "for", "l", "in", "lines", ":", "\n", "                ", "entry", "=", "l", ".", "split", "(", ")", "\n", "img_path", "=", "'%s/images/'", "%", "self", ".", "root", "+", "entry", "[", "0", "]", "[", "7", ":", "]", "\n", "self", ".", "test_labels", "[", "img_path", "]", "=", "int", "(", "entry", "[", "1", "]", ")", "\n", "\n", "", "", "if", "mode", "==", "'all'", ":", "\n", "            ", "train_imgs", "=", "[", "]", "\n", "with", "open", "(", "'%s/noisy_train_key_list.txt'", "%", "self", ".", "root", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "lines", "=", "f", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "for", "l", "in", "lines", ":", "\n", "                    ", "img_path", "=", "'%s/images/'", "%", "self", ".", "root", "+", "l", "[", "7", ":", "]", "\n", "train_imgs", ".", "append", "(", "img_path", ")", "\n", "", "", "random", ".", "shuffle", "(", "train_imgs", ")", "\n", "class_num", "=", "torch", ".", "zeros", "(", "num_class", ")", "\n", "self", ".", "train_imgs", "=", "[", "]", "\n", "for", "impath", "in", "train_imgs", ":", "\n", "                ", "label", "=", "self", ".", "train_labels", "[", "impath", "]", "\n", "if", "class_num", "[", "label", "]", "<", "(", "num_samples", "/", "14", ")", "and", "len", "(", "self", ".", "train_imgs", ")", "<", "num_samples", ":", "\n", "                    ", "self", ".", "train_imgs", ".", "append", "(", "impath", ")", "\n", "class_num", "[", "label", "]", "+=", "1", "\n", "", "", "random", ".", "shuffle", "(", "self", ".", "train_imgs", ")", "\n", "\n", "", "elif", "mode", "==", "'test'", ":", "\n", "            ", "self", ".", "test_imgs", "=", "[", "]", "\n", "with", "open", "(", "'%s/clean_test_key_list.txt'", "%", "self", ".", "root", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "lines", "=", "f", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "for", "l", "in", "lines", ":", "\n", "                    ", "img_path", "=", "'%s/images/'", "%", "self", ".", "root", "+", "l", "[", "7", ":", "]", "\n", "self", ".", "test_imgs", ".", "append", "(", "img_path", ")", "\n", "", "", "", "elif", "mode", "==", "'val'", ":", "\n", "            ", "self", ".", "val_imgs", "=", "[", "]", "\n", "class_num", "=", "torch", ".", "zeros", "(", "num_class", ")", "\n", "with", "open", "(", "'%s/clean_val_key_list.txt'", "%", "self", ".", "root", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "lines", "=", "f", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "for", "l", "in", "lines", ":", "\n", "                    ", "img_path", "=", "'%s/images/'", "%", "self", ".", "root", "+", "l", "[", "7", ":", "]", "\n", "label", "=", "self", ".", "test_labels", "[", "img_path", "]", "\n", "if", "num_meta", "!=", "14313", ":", "\n", "                        ", "if", "class_num", "[", "label", "]", "<", "(", "num_meta", "/", "14", ")", "and", "len", "(", "self", ".", "val_imgs", ")", "<", "num_meta", ":", "\n", "                             ", "self", ".", "val_imgs", ".", "append", "(", "img_path", ")", "\n", "class_num", "[", "label", "]", "+=", "1", "\n", "", "", "else", ":", "\n", "                        ", "self", ".", "val_imgs", ".", "append", "(", "img_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuyinzhou_l2b.data_loader.Clothing1M_dataset.clothing_dataset.__getitem__": [[71, 91], ["PIL.Image.open().convert", "Clothing1M_dataset.clothing_dataset.transform", "PIL.Image.open().convert", "Clothing1M_dataset.clothing_dataset.transform", "PIL.Image.open", "PIL.Image.open().convert", "Clothing1M_dataset.clothing_dataset.transform", "PIL.Image.open", "PIL.Image.open"], "methods", ["None"], ["", "", "", "", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "\n", "        ", "if", "self", ".", "mode", "==", "'all'", ":", "\n", "            ", "img_path", "=", "self", ".", "train_imgs", "[", "index", "]", "\n", "target", "=", "self", ".", "train_labels", "[", "img_path", "]", "\n", "image", "=", "Image", ".", "open", "(", "img_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "img", "=", "self", ".", "transform", "(", "image", ")", "\n", "return", "img", ",", "target", "\n", "", "elif", "self", ".", "mode", "==", "'test'", ":", "\n", "            ", "img_path", "=", "self", ".", "test_imgs", "[", "index", "]", "\n", "target", "=", "self", ".", "test_labels", "[", "img_path", "]", "\n", "image", "=", "Image", ".", "open", "(", "img_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "img", "=", "self", ".", "transform", "(", "image", ")", "\n", "return", "img", ",", "target", "\n", "", "elif", "self", ".", "mode", "==", "'val'", ":", "\n", "            ", "img_path", "=", "self", ".", "val_imgs", "[", "index", "]", "\n", "target", "=", "self", ".", "test_labels", "[", "img_path", "]", "\n", "image", "=", "Image", ".", "open", "(", "img_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "img", "=", "self", ".", "transform", "(", "image", ")", "\n", "return", "img", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.yuyinzhou_l2b.data_loader.Clothing1M_dataset.clothing_dataset.__len__": [[92, 99], ["len", "len", "len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "mode", "==", "'test'", ":", "\n", "            ", "return", "len", "(", "self", ".", "test_imgs", ")", "\n", "", "if", "self", ".", "mode", "==", "'val'", ":", "\n", "            ", "return", "len", "(", "self", ".", "val_imgs", ")", "\n", "", "else", ":", "\n", "            ", "return", "len", "(", "self", ".", "train_imgs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuyinzhou_l2b.data_loader.Cifar_dataset.CIFAR10.__init__": [[87, 263], ["Cifar_dataset.is_main_process", "Cifar_dataset.CIFAR10.download", "Cifar_dataset.CIFAR10._check_integrity", "RuntimeError", "numpy.concatenate", "Cifar_dataset.CIFAR10.train_data.reshape", "Cifar_dataset.CIFAR10.train_data.transpose", "range", "numpy.random.seed", "data_list_val.items", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "open", "open.close", "Cifar_dataset.CIFAR10.test_data.reshape", "Cifar_dataset.CIFAR10.test_data.transpose", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "open", "Cifar_dataset.CIFAR10.train_data.append", "open.close", "numpy.random.shuffle", "idx_to_meta.extend", "idx_to_train.extend", "list", "list", "pickle.load", "pickle.load", "pickle.load", "pickle.load", "list", "Cifar_dataset.uniform_mix_C", "Cifar_dataset.is_main_process", "print", "int", "range", "print", "open", "open.close", "print", "time.sleep", "print", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "print", "print", "print", "enumerate", "int", "numpy.array", "numpy.array", "Cifar_dataset.flip_labels_C", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "len", "open.write", "open", "int", "int", "numpy.array", "Cifar_dataset.flip_labels_C_two", "len", "numpy.random.choice", "Cifar_dataset.CIFAR10.noisy_or_not.append", "Cifar_dataset.CIFAR10.noisy_or_not.append", "str", "int", "str", "range", "range", "range", "range", "numpy.random.choice", "str", "Cifar_dataset.CIFAR10.noisy_or_not.append", "Cifar_dataset.CIFAR10.noisy_or_not.append", "coarse_fine.append", "len", "coarse_fine[].add", "list", "numpy.eye", "numpy.copy", "range", "len", "len", "set", "len", "numpy.delete", "Cifar_dataset.CIFAR10.noisy_or_not.count", "Cifar_dataset.CIFAR10.noisy_or_not.count", "numpy.copy", "len"], "methods", ["home.repos.pwc.inspect_result.yuyinzhou_l2b.data_loader.ISIC_dataset.is_main_process", "home.repos.pwc.inspect_result.yuyinzhou_l2b.data_loader.Cifar_dataset.CIFAR10.download", "home.repos.pwc.inspect_result.yuyinzhou_l2b.data_loader.Cifar_dataset.CIFAR10._check_integrity", "home.repos.pwc.inspect_result.yuyinzhou_l2b.data_loader.ISIC_dataset.uniform_mix_C", "home.repos.pwc.inspect_result.yuyinzhou_l2b.data_loader.ISIC_dataset.is_main_process", "home.repos.pwc.inspect_result.yuyinzhou_l2b.data_loader.ISIC_dataset.flip_labels_C", "home.repos.pwc.inspect_result.yuyinzhou_l2b.data_loader.ISIC_dataset.flip_labels_C_two"], ["def", "__init__", "(", "self", ",", "root", "=", "''", ",", "train", "=", "True", ",", "meta", "=", "True", ",", "num_meta", "=", "1000", ",", "\n", "corruption_prob", "=", "0", ",", "corruption_type", "=", "'unif'", ",", "transform", "=", "None", ",", "target_transform", "=", "None", ",", "\n", "download", "=", "False", ",", "seed", "=", "1", ",", "local_rank", "=", "0", ",", "temporal_label_file", "=", "'label_cifar.txt'", ")", ":", "\n", "        ", "self", ".", "root", "=", "root", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "self", ".", "train", "=", "train", "# training set or test set", "\n", "self", ".", "meta", "=", "meta", "\n", "self", ".", "corruption_prob", "=", "corruption_prob", "\n", "self", ".", "num_meta", "=", "num_meta", "\n", "self", ".", "path", "=", "temporal_label_file", "\n", "\n", "if", "download", "and", "is_main_process", "(", ")", ":", "\n", "            ", "self", ".", "download", "(", ")", "\n", "\n", "", "if", "not", "self", ".", "_check_integrity", "(", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "'Dataset not found or corrupted.'", "+", "\n", "' You can use download=True to download it'", ")", "\n", "\n", "# now load the picked numpy arrays", "\n", "", "if", "self", ".", "train", ":", "\n", "            ", "self", ".", "train_data", "=", "[", "]", "\n", "self", ".", "train_labels", "=", "[", "]", "\n", "self", ".", "noisy_or_not", "=", "[", "]", "\n", "self", ".", "train_coarse_labels", "=", "[", "]", "\n", "for", "fentry", "in", "self", ".", "train_list", ":", "\n", "                ", "f", "=", "fentry", "[", "0", "]", "\n", "file", "=", "os", ".", "path", ".", "join", "(", "root", ",", "self", ".", "base_folder", ",", "f", ")", "\n", "fo", "=", "open", "(", "file", ",", "'rb'", ")", "\n", "if", "sys", ".", "version_info", "[", "0", "]", "==", "2", ":", "\n", "                    ", "entry", "=", "pickle", ".", "load", "(", "fo", ")", "\n", "", "else", ":", "\n", "                    ", "entry", "=", "pickle", ".", "load", "(", "fo", ",", "encoding", "=", "'latin1'", ")", "\n", "", "self", ".", "train_data", ".", "append", "(", "entry", "[", "'data'", "]", ")", "\n", "if", "'labels'", "in", "entry", ":", "\n", "                    ", "self", ".", "train_labels", "+=", "entry", "[", "'labels'", "]", "\n", "img_num_list", "=", "[", "int", "(", "self", ".", "num_meta", "/", "10", ")", "]", "*", "10", "\n", "self", ".", "num_classes", "=", "10", "\n", "", "else", ":", "\n", "                    ", "self", ".", "train_labels", "+=", "entry", "[", "'fine_labels'", "]", "\n", "self", ".", "train_coarse_labels", "+=", "entry", "[", "'coarse_labels'", "]", "\n", "img_num_list", "=", "[", "int", "(", "self", ".", "num_meta", "/", "100", ")", "]", "*", "100", "\n", "self", ".", "num_classes", "=", "100", "\n", "", "fo", ".", "close", "(", ")", "\n", "\n", "", "self", ".", "train_data", "=", "np", ".", "concatenate", "(", "self", ".", "train_data", ")", "\n", "self", ".", "train_data", "=", "self", ".", "train_data", ".", "reshape", "(", "(", "50000", ",", "3", ",", "32", ",", "32", ")", ")", "\n", "self", ".", "train_data", "=", "self", ".", "train_data", ".", "transpose", "(", "(", "0", ",", "2", ",", "3", ",", "1", ")", ")", "# convert to HWC", "\n", "\n", "data_list_val", "=", "{", "}", "\n", "for", "j", "in", "range", "(", "self", ".", "num_classes", ")", ":", "\n", "                ", "data_list_val", "[", "j", "]", "=", "[", "i", "for", "i", ",", "label", "in", "enumerate", "(", "self", ".", "train_labels", ")", "if", "label", "==", "j", "]", "\n", "\n", "", "idx_to_meta", "=", "[", "]", "\n", "idx_to_train", "=", "[", "]", "\n", "#if local_rank == 0:", "\n", "#    print(img_num_list)", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "for", "cls_idx", ",", "img_id_list", "in", "data_list_val", ".", "items", "(", ")", ":", "\n", "                ", "np", ".", "random", ".", "shuffle", "(", "img_id_list", ")", "\n", "img_num", "=", "img_num_list", "[", "int", "(", "cls_idx", ")", "]", "\n", "idx_to_meta", ".", "extend", "(", "img_id_list", "[", ":", "img_num", "]", ")", "\n", "idx_to_train", ".", "extend", "(", "img_id_list", "[", "img_num", ":", "]", ")", "\n", "#if local_rank == 0:", "\n", "#   print(len(idx_to_meta), len(idx_to_train))", "\n", "", "self", ".", "train_idx", "=", "idx_to_train", "\n", "\n", "if", "meta", "is", "True", ":", "\n", "                ", "self", ".", "train_data", "=", "self", ".", "train_data", "[", "idx_to_meta", "]", "\n", "self", ".", "train_labels", "=", "list", "(", "np", ".", "array", "(", "self", ".", "train_labels", ")", "[", "idx_to_meta", "]", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "train_data", "=", "self", ".", "train_data", "[", "idx_to_train", "]", "\n", "self", ".", "train_labels", "=", "list", "(", "np", ".", "array", "(", "self", ".", "train_labels", ")", "[", "idx_to_train", "]", ")", "\n", "if", "corruption_type", "==", "'hierarchical'", ":", "\n", "                    ", "self", ".", "train_coarse_labels", "=", "list", "(", "np", ".", "array", "(", "self", ".", "train_coarse_labels", ")", "[", "idx_to_meta", "]", ")", "\n", "\n", "", "if", "corruption_type", "==", "'unif'", ":", "\n", "                    ", "C", "=", "uniform_mix_C", "(", "self", ".", "corruption_prob", ",", "self", ".", "num_classes", ")", "\n", "#if local_rank == 0:", "\n", "#    print(C)", "\n", "self", ".", "C", "=", "C", "\n", "", "elif", "corruption_type", "==", "'flip'", ":", "\n", "                    ", "C", "=", "flip_labels_C", "(", "self", ".", "corruption_prob", ",", "self", ".", "num_classes", ")", "\n", "#if local_rank == 0:", "\n", "#    print(C)", "\n", "self", ".", "C", "=", "C", "\n", "", "elif", "corruption_type", "==", "'flip2'", ":", "\n", "                    ", "C", "=", "flip_labels_C_two", "(", "self", ".", "corruption_prob", ",", "self", ".", "num_classes", ")", "\n", "#if local_rank == 0:", "\n", "#    print(C)", "\n", "self", ".", "C", "=", "C", "\n", "", "elif", "corruption_type", "==", "'hierarchical'", ":", "\n", "                    ", "assert", "num_classes", "==", "100", ",", "'You must use CIFAR-100 with the hierarchical corruption.'", "\n", "coarse_fine", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "20", ")", ":", "\n", "                        ", "coarse_fine", ".", "append", "(", "set", "(", ")", ")", "\n", "", "for", "i", "in", "range", "(", "len", "(", "self", ".", "train_labels", ")", ")", ":", "\n", "                        ", "coarse_fine", "[", "self", ".", "train_coarse_labels", "[", "i", "]", "]", ".", "add", "(", "self", ".", "train_labels", "[", "i", "]", ")", "\n", "", "for", "i", "in", "range", "(", "20", ")", ":", "\n", "                        ", "coarse_fine", "[", "i", "]", "=", "list", "(", "coarse_fine", "[", "i", "]", ")", "\n", "\n", "", "C", "=", "np", ".", "eye", "(", "num_classes", ")", "*", "(", "1", "-", "corruption_prob", ")", "\n", "\n", "for", "i", "in", "range", "(", "20", ")", ":", "\n", "                        ", "tmp", "=", "np", ".", "copy", "(", "coarse_fine", "[", "i", "]", ")", "\n", "for", "j", "in", "range", "(", "len", "(", "tmp", ")", ")", ":", "\n", "                            ", "tmp2", "=", "np", ".", "delete", "(", "np", ".", "copy", "(", "tmp", ")", ",", "j", ")", "\n", "C", "[", "tmp", "[", "j", "]", ",", "tmp2", "]", "+=", "corruption_prob", "*", "1", "/", "len", "(", "tmp2", ")", "\n", "", "", "self", ".", "C", "=", "C", "\n", "#print(C)", "\n", "", "else", ":", "\n", "                    ", "assert", "False", ",", "\"Invalid corruption type '{}' given. Must be in {'unif', 'flip', 'hierarchical'}\"", ".", "format", "(", "\n", "corruption_type", ")", "\n", "\n", "", "if", "is_main_process", "(", ")", "and", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "path", ")", ":", "\n", "                    ", "print", "(", "self", ".", "train_idx", "[", ":", "10", "]", ")", "\n", "\n", "num_noise", "=", "int", "(", "self", ".", "corruption_prob", "*", "len", "(", "idx_to_train", ")", ")", "\n", "noise_idx", "=", "idx_to_train", "[", ":", "num_noise", "]", "\n", "#print(len(noise_idx))", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "train_labels", ")", ")", ":", "\n", "                        ", "original_label", "=", "self", ".", "train_labels", "[", "i", "]", "\n", "if", "corruption_type", "==", "'unif'", ":", "\n", "#if i in noise_idx:", "\n", "# if corruption_type == 'unif':", "\n", "# self.train_labels[i] = np.random.randint(0, self.num_classes - 1)", "\n", "                            ", "self", ".", "train_labels", "[", "i", "]", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "num_classes", ",", "p", "=", "C", "[", "self", ".", "train_labels", "[", "i", "]", "]", ")", "\n", "\n", "", "elif", "corruption_type", "==", "'flip'", ":", "\n", "                            ", "self", ".", "train_labels", "[", "i", "]", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "num_classes", ",", "p", "=", "C", "[", "self", ".", "train_labels", "[", "i", "]", "]", ")", "\n", "", "if", "original_label", "!=", "self", ".", "train_labels", "[", "i", "]", ":", "\n", "                            ", "self", ".", "noisy_or_not", ".", "append", "(", "1.0", ")", "\n", "", "else", ":", "\n", "                            ", "self", ".", "noisy_or_not", ".", "append", "(", "0.0", ")", "\n", "", "", "print", "(", "self", ".", "train_labels", "[", ":", "10", "]", ")", "\n", "file", "=", "open", "(", "self", ".", "path", ",", "'w'", ")", "\n", "for", "l", "in", "self", ".", "train_labels", ":", "\n", "                        ", "file", ".", "write", "(", "str", "(", "l", ")", "+", "'\\n'", ")", "\n", "", "file", ".", "close", "(", ")", "\n", "print", "(", "str", "(", "100", "*", "self", ".", "noisy_or_not", ".", "count", "(", "1.0", ")", "/", "len", "(", "self", ".", "noisy_or_not", ")", ")", "+", "'% data havs noise'", ")", "\n", "", "else", ":", "\n", "                    ", "time", ".", "sleep", "(", "20", ")", "\n", "print", "(", "'using the same noisy label'", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "self", ".", "path", ")", ":", "\n", "                        ", "idx", "=", "0", "\n", "for", "i", "in", "open", "(", "self", ".", "path", ")", ":", "\n", "                            ", "original_label", "=", "self", ".", "train_labels", "[", "idx", "]", "\n", "\n", "self", ".", "train_labels", "[", "idx", "]", "=", "int", "(", "i", ")", "\n", "\n", "if", "original_label", "!=", "self", ".", "train_labels", "[", "idx", "]", ":", "\n", "                                ", "self", ".", "noisy_or_not", ".", "append", "(", "1.0", ")", "\n", "", "else", ":", "\n", "                                ", "self", ".", "noisy_or_not", ".", "append", "(", "0.0", ")", "\n", "", "idx", "+=", "1", "\n", "", "", "print", "(", "self", ".", "train_idx", "[", ":", "10", "]", ")", "\n", "print", "(", "self", ".", "train_labels", "[", ":", "10", "]", ")", "\n", "print", "(", "str", "(", "100", "*", "self", ".", "noisy_or_not", ".", "count", "(", "1.0", ")", "/", "len", "(", "self", ".", "noisy_or_not", ")", ")", "+", "'% data havs noise'", ")", "\n", "\n", "", "self", ".", "corruption_matrix", "=", "C", "\n", "", "", "else", ":", "\n", "            ", "f", "=", "self", ".", "test_list", "[", "0", "]", "[", "0", "]", "\n", "file", "=", "os", ".", "path", ".", "join", "(", "root", ",", "self", ".", "base_folder", ",", "f", ")", "\n", "fo", "=", "open", "(", "file", ",", "'rb'", ")", "\n", "if", "sys", ".", "version_info", "[", "0", "]", "==", "2", ":", "\n", "                ", "entry", "=", "pickle", ".", "load", "(", "fo", ")", "\n", "", "else", ":", "\n", "                ", "entry", "=", "pickle", ".", "load", "(", "fo", ",", "encoding", "=", "'latin1'", ")", "\n", "", "self", ".", "test_data", "=", "entry", "[", "'data'", "]", "\n", "if", "'labels'", "in", "entry", ":", "\n", "                ", "self", ".", "test_labels", "=", "entry", "[", "'labels'", "]", "\n", "", "else", ":", "\n", "                ", "self", ".", "test_labels", "=", "entry", "[", "'fine_labels'", "]", "\n", "", "fo", ".", "close", "(", ")", "\n", "self", ".", "test_data", "=", "self", ".", "test_data", ".", "reshape", "(", "(", "10000", ",", "3", ",", "32", ",", "32", ")", ")", "\n", "self", ".", "test_data", "=", "self", ".", "test_data", ".", "transpose", "(", "(", "0", ",", "2", ",", "3", ",", "1", ")", ")", "# convert to HWC", "\n", "\n"]], "home.repos.pwc.inspect_result.yuyinzhou_l2b.data_loader.Cifar_dataset.CIFAR10.__getitem__": [[264, 286], ["PIL.Image.fromarray", "Cifar_dataset.CIFAR10.transform", "Cifar_dataset.CIFAR10.target_transform"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "if", "not", "self", ".", "meta", "and", "self", ".", "train", ":", "\n", "            ", "img", ",", "target", ",", "noisy_or_not", "=", "self", ".", "train_data", "[", "index", "]", ",", "self", ".", "train_labels", "[", "index", "]", ",", "self", ".", "noisy_or_not", "[", "index", "]", "\n", "", "elif", "self", ".", "meta", "and", "self", ".", "train", ":", "\n", "            ", "img", ",", "target", "=", "self", ".", "train_data", "[", "index", "]", ",", "self", ".", "train_labels", "[", "index", "]", "\n", "", "else", ":", "\n", "            ", "img", ",", "target", "=", "self", ".", "test_data", "[", "index", "]", ",", "self", ".", "test_labels", "[", "index", "]", "\n", "\n", "# doing this so that it is consistent with all other datasets", "\n", "# to return a PIL Image", "\n", "", "img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "\n", "", "if", "not", "self", ".", "meta", "and", "self", ".", "train", ":", "\n", "            ", "return", "img", ",", "target", "#, self.train_idx[index], self.noisy_or_not[index]", "\n", "", "else", ":", "\n", "            ", "return", "img", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.yuyinzhou_l2b.data_loader.Cifar_dataset.CIFAR10.__len__": [[287, 295], ["None"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "train", ":", "\n", "            ", "if", "self", ".", "meta", "is", "True", ":", "\n", "                ", "return", "self", ".", "num_meta", "\n", "", "else", ":", "\n", "                ", "return", "50000", "-", "self", ".", "num_meta", "\n", "", "", "else", ":", "\n", "            ", "return", "10000", "\n", "\n"]], "home.repos.pwc.inspect_result.yuyinzhou_l2b.data_loader.Cifar_dataset.CIFAR10._check_integrity": [[296, 304], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "torchvision.datasets.utils.check_integrity"], "methods", ["None"], ["", "", "def", "_check_integrity", "(", "self", ")", ":", "\n", "        ", "root", "=", "self", ".", "root", "\n", "for", "fentry", "in", "(", "self", ".", "train_list", "+", "self", ".", "test_list", ")", ":", "\n", "            ", "filename", ",", "md5", "=", "fentry", "[", "0", "]", ",", "fentry", "[", "1", "]", "\n", "fpath", "=", "os", ".", "path", ".", "join", "(", "root", ",", "self", ".", "base_folder", ",", "filename", ")", "\n", "if", "not", "check_integrity", "(", "fpath", ",", "md5", ")", ":", "\n", "                ", "return", "False", "\n", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.yuyinzhou_l2b.data_loader.Cifar_dataset.CIFAR10.download": [[305, 323], ["Cifar_dataset.CIFAR10._check_integrity", "torchvision.datasets.utils.download_url", "os.getcwd", "os.getcwd", "os.getcwd", "os.getcwd", "tarfile.open", "os.chdir", "os.chdir", "os.chdir", "os.chdir", "tarfile.open.extractall", "tarfile.open.close", "os.chdir", "os.chdir", "os.chdir", "os.chdir", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.yuyinzhou_l2b.data_loader.Cifar_dataset.CIFAR10._check_integrity"], ["", "def", "download", "(", "self", ")", ":", "\n", "        ", "import", "tarfile", "\n", "\n", "if", "self", ".", "_check_integrity", "(", ")", ":", "\n", "            ", "return", "\n", "#print('Files already downloaded and verified')", "\n", "#return", "\n", "\n", "", "root", "=", "self", ".", "root", "\n", "download_url", "(", "self", ".", "url", ",", "root", ",", "self", ".", "filename", ",", "self", ".", "tgz_md5", ")", "\n", "\n", "# extract file", "\n", "cwd", "=", "os", ".", "getcwd", "(", ")", "\n", "tar", "=", "tarfile", ".", "open", "(", "os", ".", "path", ".", "join", "(", "root", ",", "self", ".", "filename", ")", ",", "\"r:gz\"", ")", "\n", "os", ".", "chdir", "(", "root", ")", "\n", "tar", ".", "extractall", "(", ")", "\n", "tar", ".", "close", "(", ")", "\n", "os", ".", "chdir", "(", "cwd", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuyinzhou_l2b.data_loader.Cifar_dataset.is_dist_avail_and_initialized": [[20, 26], ["torch.is_available", "torch.is_initialized"], "function", ["None"], ["def", "is_dist_avail_and_initialized", "(", ")", ":", "\n", "    ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "False", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "False", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.yuyinzhou_l2b.data_loader.Cifar_dataset.get_rank": [[27, 31], ["torch.get_rank", "Cifar_dataset.is_dist_avail_and_initialized"], "function", ["home.repos.pwc.inspect_result.yuyinzhou_l2b.data_loader.ISIC_dataset.get_rank", "home.repos.pwc.inspect_result.yuyinzhou_l2b.data_loader.ISIC_dataset.is_dist_avail_and_initialized"], ["", "def", "get_rank", "(", ")", ":", "\n", "    ", "if", "not", "is_dist_avail_and_initialized", "(", ")", ":", "\n", "        ", "return", "0", "\n", "", "return", "dist", ".", "get_rank", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuyinzhou_l2b.data_loader.Cifar_dataset.is_main_process": [[33, 35], ["Cifar_dataset.get_rank"], "function", ["home.repos.pwc.inspect_result.yuyinzhou_l2b.data_loader.ISIC_dataset.get_rank"], ["", "def", "is_main_process", "(", ")", ":", "\n", "    ", "return", "get_rank", "(", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.yuyinzhou_l2b.data_loader.Cifar_dataset.uniform_mix_C": [[36, 42], ["numpy.full", "numpy.eye"], "function", ["None"], ["", "def", "uniform_mix_C", "(", "mixing_ratio", ",", "num_classes", ")", ":", "\n", "    ", "'''\n    returns a linear interpolation of a uniform matrix and an identity matrix\n    '''", "\n", "return", "mixing_ratio", "*", "np", ".", "full", "(", "(", "num_classes", ",", "num_classes", ")", ",", "1", "/", "num_classes", ")", "+", "(", "1", "-", "mixing_ratio", ")", "*", "np", ".", "eye", "(", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuyinzhou_l2b.data_loader.Cifar_dataset.flip_labels_C": [[44, 55], ["numpy.random.seed", "numpy.arange", "range", "numpy.eye", "numpy.random.choice"], "function", ["None"], ["", "def", "flip_labels_C", "(", "corruption_prob", ",", "num_classes", ",", "seed", "=", "1", ")", ":", "\n", "    ", "'''\n    returns a matrix with (1 - corruption_prob) on the diagonals, and corruption_prob\n    concentrated in only one other entry for each row\n    '''", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "C", "=", "np", ".", "eye", "(", "num_classes", ")", "*", "(", "1", "-", "corruption_prob", ")", "\n", "row_indices", "=", "np", ".", "arange", "(", "num_classes", ")", "\n", "for", "i", "in", "range", "(", "num_classes", ")", ":", "\n", "        ", "C", "[", "i", "]", "[", "np", ".", "random", ".", "choice", "(", "row_indices", "[", "row_indices", "!=", "i", "]", ")", "]", "=", "corruption_prob", "\n", "", "return", "C", "\n", "\n"]], "home.repos.pwc.inspect_result.yuyinzhou_l2b.data_loader.Cifar_dataset.flip_labels_C_two": [[57, 68], ["numpy.random.seed", "numpy.arange", "range", "numpy.eye", "numpy.random.choice"], "function", ["None"], ["", "def", "flip_labels_C_two", "(", "corruption_prob", ",", "num_classes", ",", "seed", "=", "1", ")", ":", "\n", "    ", "'''\n    returns a matrix with (1 - corruption_prob) on the diagonals, and corruption_prob\n    concentrated in only one other entry for each row\n    '''", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "C", "=", "np", ".", "eye", "(", "num_classes", ")", "*", "(", "1", "-", "corruption_prob", ")", "\n", "row_indices", "=", "np", ".", "arange", "(", "num_classes", ")", "\n", "for", "i", "in", "range", "(", "num_classes", ")", ":", "\n", "        ", "C", "[", "i", "]", "[", "np", ".", "random", ".", "choice", "(", "row_indices", "[", "row_indices", "!=", "i", "]", ",", "2", ",", "replace", "=", "False", ")", "]", "=", "corruption_prob", "/", "2", "\n", "", "return", "C", "\n", "\n"]], "home.repos.pwc.inspect_result.yuyinzhou_l2b.data_loader.ISIC_dataset.ISIC2019.__init__": [[64, 154], ["open().read().splitlines", "len", "open().read", "open", "csv.reader", "ISIC_dataset.is_main_process", "print", "open", "csv.reader", "ISIC_dataset.uniform_mix_C", "numpy.random.seed", "range", "open", "open.close", "time.sleep", "print", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "open", "ISIC_dataset.flip_labels_C", "len", "numpy.random.choice", "open.write", "open", "str", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "ISIC_dataset.flip_labels_C_two", "ISIC_dataset.ISIC2019.noisy_or_not.append", "ISIC_dataset.ISIC2019.noisy_or_not.append", "int", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "row.index", "str", "ISIC_dataset.ISIC2019.noisy_or_not.append", "ISIC_dataset.ISIC2019.noisy_or_not.append", "len", "row.index", "ISIC_dataset.ISIC2019.noisy_or_not.count"], "methods", ["home.repos.pwc.inspect_result.yuyinzhou_l2b.data_loader.ISIC_dataset.is_main_process", "home.repos.pwc.inspect_result.yuyinzhou_l2b.data_loader.ISIC_dataset.uniform_mix_C", "home.repos.pwc.inspect_result.yuyinzhou_l2b.data_loader.ISIC_dataset.flip_labels_C", "home.repos.pwc.inspect_result.yuyinzhou_l2b.data_loader.ISIC_dataset.flip_labels_C_two"], ["    ", "def", "__init__", "(", "self", ",", "root", "=", "''", ",", "train", "=", "True", ",", "meta", "=", "True", ",", "split", "=", "'ISIC/train.lst'", ",", "num_classes", "=", "8", ",", "\n", "groundtruth_file", "=", "'ISIC/ISIC_2019_Training_GroundTruth.csv'", ",", "\n", "corruption_prob", "=", "0", ",", "corruption_type", "=", "'unif'", ",", "transform", "=", "None", ",", "seed", "=", "1", ",", "\n", "local_rank", "=", "0", ",", "temporal_label_file", "=", "'label_isic.txt'", ")", ":", "\n", "        ", "self", ".", "root", "=", "root", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "train", "=", "train", "\n", "self", ".", "meta", "=", "meta", "\n", "self", ".", "data_list", "=", "open", "(", "split", ")", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "self", ".", "corruption_prob", "=", "corruption_prob", "\n", "self", ".", "num", "=", "len", "(", "self", ".", "data_list", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "path", "=", "temporal_label_file", "\n", "\n", "\n", "# now load the picked numpy arrays", "\n", "if", "train", ":", "\n", "            ", "self", ".", "train_data", "=", "[", "]", "\n", "self", ".", "train_labels", "=", "[", "]", "\n", "self", ".", "noisy_or_not", "=", "[", "]", "\n", "\n", "with", "open", "(", "groundtruth_file", ")", "as", "csv_file", ":", "\n", "                ", "csv_reader", "=", "csv", ".", "reader", "(", "csv_file", ",", "delimiter", "=", "','", ")", "\n", "for", "row", "in", "csv_reader", ":", "\n", "                    ", "if", "row", "[", "0", "]", "in", "self", ".", "data_list", ":", "\n", "                        ", "self", ".", "train_data", "+=", "[", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "row", "[", "0", "]", "+", "'.jpg'", ")", "]", "\n", "self", ".", "train_labels", "+=", "[", "row", ".", "index", "(", "\"1.0\"", ")", "-", "1", "]", "\n", "\n", "", "", "", "if", "not", "meta", ":", "\n", "                ", "if", "corruption_type", "==", "'unif'", ":", "\n", "                    ", "C", "=", "uniform_mix_C", "(", "self", ".", "corruption_prob", ",", "self", ".", "num_classes", ")", "\n", "# if local_rank == 0:", "\n", "#     print(C)", "\n", "self", ".", "C", "=", "C", "\n", "", "elif", "corruption_type", "==", "'flip'", ":", "\n", "                    ", "C", "=", "flip_labels_C", "(", "self", ".", "corruption_prob", ",", "self", ".", "num_classes", ")", "\n", "# if local_rank == 0:", "\n", "#     print(C)", "\n", "self", ".", "C", "=", "C", "\n", "", "elif", "corruption_type", "==", "'flip2'", ":", "\n", "                    ", "C", "=", "flip_labels_C_two", "(", "self", ".", "corruption_prob", ",", "self", ".", "num_classes", ")", "\n", "# if local_rank == 0:", "\n", "#    print(C)", "\n", "self", ".", "C", "=", "C", "\n", "", "else", ":", "\n", "                    ", "assert", "False", ",", "\"Invalid corruption type '{}' given. Must be in {'unif', 'flip', 'hierarchical'}\"", ".", "format", "(", "corruption_type", ")", "\n", "\n", "", "if", "is_main_process", "(", ")", ":", "\n", "                    ", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "train_labels", ")", ")", ":", "\n", "                        ", "original_label", "=", "self", ".", "train_labels", "[", "i", "]", "\n", "\n", "self", ".", "train_labels", "[", "i", "]", "=", "np", ".", "random", ".", "choice", "(", "num_classes", ",", "p", "=", "C", "[", "self", ".", "train_labels", "[", "i", "]", "]", ")", "\n", "\n", "if", "original_label", "!=", "self", ".", "train_labels", "[", "i", "]", ":", "\n", "                            ", "self", ".", "noisy_or_not", ".", "append", "(", "1.0", ")", "\n", "", "else", ":", "\n", "                            ", "self", ".", "noisy_or_not", ".", "append", "(", "0.0", ")", "\n", "", "", "file", "=", "open", "(", "self", ".", "path", ",", "'w'", ")", "\n", "for", "l", "in", "self", ".", "train_labels", ":", "\n", "                        ", "file", ".", "write", "(", "str", "(", "l", ")", "+", "'\\n'", ")", "\n", "", "file", ".", "close", "(", ")", "\n", "", "else", ":", "\n", "                    ", "import", "time", "\n", "time", ".", "sleep", "(", "20", ")", "\n", "print", "(", "'using the same noisy label'", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "self", ".", "path", ")", ":", "\n", "                        ", "idx", "=", "0", "\n", "for", "i", "in", "open", "(", "self", ".", "path", ")", ":", "\n", "                            ", "original_label", "=", "self", ".", "train_labels", "[", "idx", "]", "\n", "self", ".", "train_labels", "[", "idx", "]", "=", "int", "(", "i", ")", "\n", "\n", "if", "original_label", "!=", "self", ".", "train_labels", "[", "idx", "]", ":", "\n", "                                ", "self", ".", "noisy_or_not", ".", "append", "(", "1.0", ")", "\n", "", "else", ":", "\n", "                                ", "self", ".", "noisy_or_not", ".", "append", "(", "0.0", ")", "\n", "", "idx", "+=", "1", "\n", "", "", "", "self", ".", "corruption_matrix", "=", "C", "\n", "print", "(", "str", "(", "100", "*", "self", ".", "noisy_or_not", ".", "count", "(", "1.0", ")", "/", "len", "(", "self", ".", "noisy_or_not", ")", ")", "+", "'% data havs noise'", ")", "\n", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "test_data", "=", "[", "]", "\n", "self", ".", "test_labels", "=", "[", "]", "\n", "with", "open", "(", "groundtruth_file", ")", "as", "csv_file", ":", "\n", "                ", "csv_reader", "=", "csv", ".", "reader", "(", "csv_file", ",", "delimiter", "=", "','", ")", "\n", "\n", "for", "row", "in", "csv_reader", ":", "\n", "                    ", "if", "row", "[", "0", "]", "in", "self", ".", "data_list", ":", "\n", "                        ", "self", ".", "test_data", "+=", "[", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "row", "[", "0", "]", "+", "'.jpg'", ")", "]", "\n", "self", ".", "test_labels", "+=", "[", "row", ".", "index", "(", "\"1.0\"", ")", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yuyinzhou_l2b.data_loader.ISIC_dataset.ISIC2019.__getitem__": [[155, 172], ["PIL.Image.open().convert", "ISIC_dataset.ISIC2019.transform", "PIL.Image.open"], "methods", ["None"], ["", "", "", "", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "if", "not", "self", ".", "meta", "and", "self", ".", "train", ":", "\n", "            ", "image_path", ",", "target", ",", "noisy_or_not", "=", "self", ".", "train_data", "[", "index", "]", ",", "self", ".", "train_labels", "[", "index", "]", ",", "self", ".", "noisy_or_not", "[", "index", "]", "\n", "", "elif", "self", ".", "meta", "and", "self", ".", "train", ":", "\n", "            ", "image_path", ",", "target", "=", "self", ".", "train_data", "[", "index", "]", ",", "self", ".", "train_labels", "[", "index", "]", "\n", "", "else", ":", "\n", "            ", "image_path", ",", "target", "=", "self", ".", "test_data", "[", "index", "]", ",", "self", ".", "test_labels", "[", "index", "]", "\n", "\n", "", "img", "=", "Image", ".", "open", "(", "image_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "if", "not", "self", ".", "meta", "and", "self", ".", "train", ":", "\n", "            ", "return", "img", ",", "target", "\n", "", "else", ":", "\n", "            ", "return", "img", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.yuyinzhou_l2b.data_loader.ISIC_dataset.ISIC2019.__len__": [[174, 176], ["None"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yuyinzhou_l2b.data_loader.ISIC_dataset.is_dist_avail_and_initialized": [[14, 20], ["torch.is_available", "torch.is_initialized"], "function", ["None"], ["def", "is_dist_avail_and_initialized", "(", ")", ":", "\n", "    ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "False", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "False", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.yuyinzhou_l2b.data_loader.ISIC_dataset.get_rank": [[21, 25], ["torch.get_rank", "ISIC_dataset.is_dist_avail_and_initialized"], "function", ["home.repos.pwc.inspect_result.yuyinzhou_l2b.data_loader.ISIC_dataset.get_rank", "home.repos.pwc.inspect_result.yuyinzhou_l2b.data_loader.ISIC_dataset.is_dist_avail_and_initialized"], ["", "def", "get_rank", "(", ")", ":", "\n", "    ", "if", "not", "is_dist_avail_and_initialized", "(", ")", ":", "\n", "        ", "return", "0", "\n", "", "return", "dist", ".", "get_rank", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuyinzhou_l2b.data_loader.ISIC_dataset.is_main_process": [[27, 29], ["ISIC_dataset.get_rank"], "function", ["home.repos.pwc.inspect_result.yuyinzhou_l2b.data_loader.ISIC_dataset.get_rank"], ["", "def", "is_main_process", "(", ")", ":", "\n", "    ", "return", "get_rank", "(", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.yuyinzhou_l2b.data_loader.ISIC_dataset.uniform_mix_C": [[30, 36], ["numpy.full", "numpy.eye"], "function", ["None"], ["", "def", "uniform_mix_C", "(", "mixing_ratio", ",", "num_classes", ")", ":", "\n", "    ", "'''\n    returns a linear interpolation of a uniform matrix and an identity matrix\n    '''", "\n", "return", "mixing_ratio", "*", "np", ".", "full", "(", "(", "num_classes", ",", "num_classes", ")", ",", "1", "/", "num_classes", ")", "+", "(", "1", "-", "mixing_ratio", ")", "*", "np", ".", "eye", "(", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuyinzhou_l2b.data_loader.ISIC_dataset.flip_labels_C": [[37, 48], ["numpy.random.seed", "numpy.arange", "range", "numpy.eye", "numpy.random.choice"], "function", ["None"], ["", "def", "flip_labels_C", "(", "corruption_prob", ",", "num_classes", ",", "seed", "=", "1", ")", ":", "\n", "    ", "'''\n    returns a matrix with (1 - corruption_prob) on the diagonals, and corruption_prob\n    concentrated in only one other entry for each row\n    '''", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "C", "=", "np", ".", "eye", "(", "num_classes", ")", "*", "(", "1", "-", "corruption_prob", ")", "\n", "row_indices", "=", "np", ".", "arange", "(", "num_classes", ")", "\n", "for", "i", "in", "range", "(", "num_classes", ")", ":", "\n", "        ", "C", "[", "i", "]", "[", "np", ".", "random", ".", "choice", "(", "row_indices", "[", "row_indices", "!=", "i", "]", ")", "]", "=", "corruption_prob", "\n", "", "return", "C", "\n", "\n"]], "home.repos.pwc.inspect_result.yuyinzhou_l2b.data_loader.ISIC_dataset.flip_labels_C_two": [[49, 60], ["numpy.random.seed", "numpy.arange", "range", "numpy.eye", "numpy.random.choice"], "function", ["None"], ["", "def", "flip_labels_C_two", "(", "corruption_prob", ",", "num_classes", ",", "seed", "=", "1", ")", ":", "\n", "    ", "'''\n    returns a matrix with (1 - corruption_prob) on the diagonals, and corruption_prob\n    concentrated in only one other entry for each row\n    '''", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "C", "=", "np", ".", "eye", "(", "num_classes", ")", "*", "(", "1", "-", "corruption_prob", ")", "\n", "row_indices", "=", "np", ".", "arange", "(", "num_classes", ")", "\n", "for", "i", "in", "range", "(", "num_classes", ")", ":", "\n", "        ", "C", "[", "i", "]", "[", "np", ".", "random", ".", "choice", "(", "row_indices", "[", "row_indices", "!=", "i", "]", ",", "2", ",", "replace", "=", "False", ")", "]", "=", "corruption_prob", "/", "2", "\n", "", "return", "C", "\n", "\n"]]}