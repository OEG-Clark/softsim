{"home.repos.pwc.inspect_result.BrunoSauvalle_AST.None.MF_stats.reindex": [[16, 25], ["reindex_tensor.view", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "reindex_tensor.view.expand_as", "tensor.dim", "reindex_tensor.dim"], "function", ["None"], ["def", "reindex", "(", "tensor", ",", "reindex_tensor", ",", "dim", "=", "1", ")", ":", "\n", "    ", "\"\"\"\n    Reindexes tensor along <dim> using reindex_tensor.\n    Effectivelly permutes <dim> for each dimensions <dim based on values in reindex_tensor\n    \"\"\"", "\n", "# add dims at the end to match tensor dims.", "\n", "alignment_index", "=", "reindex_tensor", ".", "view", "(", "*", "reindex_tensor", ".", "shape", ",", "\n", "*", "(", "[", "1", "]", "*", "(", "tensor", ".", "dim", "(", ")", "-", "reindex_tensor", ".", "dim", "(", ")", ")", ")", ")", "\n", "return", "torch", ".", "gather", "(", "tensor", ",", "dim", ",", "alignment_index", ".", "expand_as", "(", "tensor", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BrunoSauvalle_AST.None.MF_stats.ious_alignment": [[27, 67], ["dict", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "true_masks.to.sum", "pred_masks.to.sum", "pred_masks.to.to", "true_masks.to.to", "range", "range", "torch.nan_to_num", "torch.nan_to_num", "torch.nan_to_num", "torch.nan_to_num", "torch.nan_to_num.cpu().detach().numpy", "numpy.zeros", "numpy.zeros", "range", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "scipy.optimize.linear_sum_assignment", "cost_matrix[].T[].argmax", "torch.nan_to_num.cpu().detach", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.nan_to_num.cpu"], "function", ["None"], ["", "def", "ious_alignment", "(", "pred_masks", ",", "true_masks", ")", ":", "\n", "    ", "tspec", "=", "dict", "(", "device", "=", "pred_masks", ".", "device", ")", "\n", "iou_matrix", "=", "torch", ".", "zeros", "(", "pred_masks", ".", "shape", "[", "0", "]", ",", "pred_masks", ".", "shape", "[", "1", "]", ",", "true_masks", ".", "shape", "[", "1", "]", ",", "**", "tspec", ")", "\n", "\n", "true_masks_sums", "=", "true_masks", ".", "sum", "(", "(", "-", "1", ",", "-", "2", ",", "-", "3", ")", ")", "\n", "pred_masks_sums", "=", "pred_masks", ".", "sum", "(", "(", "-", "1", ",", "-", "2", ",", "-", "3", ")", ")", "\n", "\n", "pred_masks", "=", "pred_masks", ".", "to", "(", "torch", ".", "bool", ")", "\n", "true_masks", "=", "true_masks", ".", "to", "(", "torch", ".", "bool", ")", "\n", "\n", "# Fill IoU row-wise", "\n", "for", "pi", "in", "range", "(", "pred_masks", ".", "shape", "[", "1", "]", ")", ":", "\n", "# Intersection against all cols", "\n", "# pandt = (pred_masks[:, pi:pi + 1] * true_masks).sum((-1, -2, -3))", "\n", "        ", "pandt", "=", "(", "pred_masks", "[", ":", ",", "pi", ":", "pi", "+", "1", "]", "&", "true_masks", ")", ".", "to", "(", "torch", ".", "float", ")", ".", "sum", "(", "(", "-", "1", ",", "-", "2", ",", "-", "3", ")", ")", "\n", "# Union against all colls", "\n", "# port = pred_masks_sums[:, pi:pi + 1] + true_masks_sums", "\n", "port", "=", "(", "pred_masks", "[", ":", ",", "pi", ":", "pi", "+", "1", "]", "|", "true_masks", ")", ".", "to", "(", "torch", ".", "float", ")", ".", "sum", "(", "(", "-", "1", ",", "-", "2", ",", "-", "3", ")", ")", "\n", "iou_matrix", "[", ":", ",", "pi", "]", "=", "pandt", "/", "port", "\n", "iou_matrix", "[", "pred_masks_sums", "[", ":", ",", "pi", "]", "==", "0.", ",", "pi", "]", "=", "0.", "\n", "\n", "", "for", "ti", "in", "range", "(", "true_masks", ".", "shape", "[", "1", "]", ")", ":", "\n", "        ", "iou_matrix", "[", "true_masks_sums", "[", ":", ",", "ti", "]", "==", "0.", ",", ":", ",", "ti", "]", "=", "0.", "\n", "\n", "# NaNs, Inf might come from empty masks (sums are 0, such as on empty masks)", "\n", "# Set them to 0. as there are no intersections here and we should not reindex", "\n", "", "iou_matrix", "=", "torch", ".", "nan_to_num", "(", "iou_matrix", ",", "nan", "=", "0.", ",", "posinf", "=", "0.", ",", "neginf", "=", "0.", ")", "\n", "\n", "cost_matrix", "=", "iou_matrix", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "ious", "=", "np", ".", "zeros", "(", "pred_masks", ".", "shape", "[", ":", "2", "]", ")", "\n", "pred_inds", "=", "np", ".", "zeros", "(", "pred_masks", ".", "shape", "[", ":", "2", "]", ",", "dtype", "=", "int", ")", "\n", "for", "bi", "in", "range", "(", "cost_matrix", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "true_ind", ",", "pred_ind", "=", "linear_sum_assignment", "(", "cost_matrix", "[", "bi", "]", ".", "T", ",", "maximize", "=", "True", ")", "\n", "cost_matrix", "[", "bi", "]", ".", "T", "[", ":", ",", "pred_ind", "]", ".", "argmax", "(", "1", ")", "# Gives which true mask is best for EACH predicted", "\n", "ious", "[", "bi", "]", "=", "cost_matrix", "[", "bi", "]", ".", "T", "[", "true_ind", ",", "pred_ind", "]", "\n", "pred_inds", "[", "bi", "]", "=", "pred_ind", "\n", "\n", "", "ious", "=", "torch", ".", "from_numpy", "(", "ious", ")", ".", "to", "(", "pred_masks", ".", "device", ")", "\n", "pred_inds", "=", "torch", ".", "from_numpy", "(", "pred_inds", ")", ".", "to", "(", "pred_masks", ".", "device", ")", "\n", "return", "pred_inds", ",", "ious", ",", "iou_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.BrunoSauvalle_AST.None.MF_stats.compute_ari": [[68, 85], ["pred_mask.argmax().squeeze().view().cpu().detach().numpy", "true_mask.argmax().squeeze().view().cpu().detach().numpy", "range", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "sklearn.metrics.adjusted_rand_score", "torch.tensor.append", "numpy.array", "pred_mask.argmax().squeeze().view().cpu().detach", "true_mask.argmax().squeeze().view().cpu().detach", "print", "pred_mask.argmax().squeeze().view().cpu", "true_mask.argmax().squeeze().view().cpu", "pred_mask.argmax().squeeze().view", "true_mask.argmax().squeeze().view", "pred_mask.argmax().squeeze", "true_mask.argmax().squeeze", "pred_mask.argmax", "true_mask.argmax"], "function", ["None"], ["", "def", "compute_ari", "(", "pred_mask", ",", "true_mask", ",", "skip_0", "=", "False", ")", ":", "\n", "        ", "B", "=", "pred_mask", ".", "shape", "[", "0", "]", "\n", "pm", "=", "pred_mask", ".", "argmax", "(", "axis", "=", "1", ")", ".", "squeeze", "(", ")", ".", "view", "(", "B", ",", "-", "1", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "tm", "=", "true_mask", ".", "argmax", "(", "axis", "=", "1", ")", ".", "squeeze", "(", ")", ".", "view", "(", "B", ",", "-", "1", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "aris", "=", "[", "]", "\n", "for", "bi", "in", "range", "(", "B", ")", ":", "\n", "            ", "t", "=", "tm", "[", "bi", "]", "\n", "p", "=", "pm", "[", "bi", "]", "\n", "if", "skip_0", ":", "\n", "                ", "p", "=", "p", "[", "t", ">", "0", "]", "\n", "t", "=", "t", "[", "t", ">", "0", "]", "\n", "", "ari_score", "=", "adjusted_rand_score", "(", "t", ",", "p", ")", "\n", "if", "ari_score", "!=", "ari_score", ":", "\n", "                ", "print", "(", "f'NaN at bi'", ")", "\n", "", "aris", ".", "append", "(", "ari_score", ")", "\n", "", "aris", "=", "torch", ".", "tensor", "(", "np", ".", "array", "(", "aris", ")", ",", "device", "=", "pred_mask", ".", "device", ")", "\n", "return", "aris", "\n", "\n"]], "home.repos.pwc.inspect_result.BrunoSauvalle_AST.None.MF_stats.iou_binary": [[89, 99], ["torch.where", "torch.where", "torch.where", "torch.where", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "intersection.float", "union.float"], "function", ["None"], ["", "def", "iou_binary", "(", "mask_A", ",", "mask_B", ",", "debug", "=", "False", ")", ":", "\n", "    ", "if", "debug", ":", "\n", "        ", "assert", "mask_A", ".", "shape", "==", "mask_B", ".", "shape", "\n", "assert", "mask_A", ".", "dtype", "==", "torch", ".", "bool", "\n", "assert", "mask_B", ".", "dtype", "==", "torch", ".", "bool", "\n", "", "intersection", "=", "(", "mask_A", "*", "mask_B", ")", ".", "sum", "(", "(", "1", ",", "2", ",", "3", ")", ")", "\n", "union", "=", "(", "mask_A", "+", "mask_B", ")", ".", "sum", "(", "(", "1", ",", "2", ",", "3", ")", ")", "\n", "# Return -100 if union is zero, else return IOU", "\n", "return", "torch", ".", "where", "(", "union", "==", "0", ",", "torch", ".", "tensor", "(", "-", "100.0", ")", ",", "\n", "intersection", ".", "float", "(", ")", "/", "union", ".", "float", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BrunoSauvalle_AST.None.MF_stats.average_segcover": [[100, 164], ["GT_mask_index.reshape().cpu", "mask_index.reshape().cpu", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.unique().tolist", "torch.unique().tolist", "torch.unique().tolist", "torch.unique().tolist", "torch.unique().tolist", "torch.unique().tolist", "torch.unique().tolist", "torch.unique().tolist", "torch.unique().tolist", "torch.unique().tolist", "torch.unique().tolist", "torch.unique().tolist", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.where", "torch.where", "torch.where", "torch.where", "binaryA.sum", "torch.max().float", "torch.max().float", "torch.max().float", "torch.max().float", "torch.max().float", "torch.max().float", "torch.max().float", "torch.max().float", "GT_mask_index.reshape", "mask_index.reshape", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "binaryA.any", "MF_stats.iou_binary", "torch.where", "torch.where", "torch.where", "torch.where", "binaryA.sum().float", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "binaryB.any", "binaryA.sum", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "binaryA.sum", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "nonignore.sum", "nonignore.sum"], "function", ["home.repos.pwc.inspect_result.BrunoSauvalle_AST.None.MF_stats.iou_binary"], ["", "def", "average_segcover", "(", "mask_index", ",", "GT_mask_index", ",", "ignore_background", "=", "False", ")", ":", "\n", "\n", "    ", "batch_size", ",", "_", ",", "_", ",", "h", ",", "w", "=", "mask_index", ".", "shape", "\n", "segA", "=", "GT_mask_index", ".", "reshape", "(", "batch_size", ",", "1", ",", "h", ",", "w", ")", ".", "cpu", "(", ")", "\n", "segB", "=", "mask_index", ".", "reshape", "(", "batch_size", ",", "1", ",", "h", ",", "w", ")", ".", "cpu", "(", ")", "\n", "\"\"\"\n    Covering of segA by segB\n    segA.shape = [batch size, 1, img_dim1, img_dim2]\n    segB.shape = [batch size, 1, img_dim1, img_dim2]\n    scale: If true, take weighted mean over IOU values proportional to the\n           the number of pixels of the mask being covered.\n    Assumes labels in segA and segB are non-negative integers.\n    Negative labels will be ignored.\n    \"\"\"", "\n", "\n", "assert", "segA", ".", "shape", "==", "segB", ".", "shape", ",", "f\"{segA.shape} - {segB.shape}\"", "\n", "assert", "segA", ".", "shape", "[", "1", "]", "==", "1", "and", "segB", ".", "shape", "[", "1", "]", "==", "1", "\n", "bsz", "=", "segA", ".", "shape", "[", "0", "]", "\n", "nonignore", "=", "(", "segA", ">=", "0", ")", "\n", "\n", "mean_scores", "=", "torch", ".", "tensor", "(", "bsz", "*", "[", "0.0", "]", ")", "\n", "N", "=", "torch", ".", "tensor", "(", "bsz", "*", "[", "0", "]", ")", "\n", "scaled_scores", "=", "torch", ".", "tensor", "(", "bsz", "*", "[", "0.0", "]", ")", "\n", "scaling_sum", "=", "torch", ".", "tensor", "(", "bsz", "*", "[", "0", "]", ")", "\n", "\n", "# Find unique label indices to iterate over", "\n", "if", "ignore_background", ":", "\n", "        ", "iter_segA", "=", "torch", ".", "unique", "(", "segA", "[", "segA", ">", "0", "]", ")", ".", "tolist", "(", ")", "\n", "", "else", ":", "\n", "        ", "iter_segA", "=", "torch", ".", "unique", "(", "segA", "[", "segA", ">=", "0", "]", ")", ".", "tolist", "(", ")", "\n", "", "iter_segB", "=", "torch", ".", "unique", "(", "segB", "[", "segB", ">=", "0", "]", ")", ".", "tolist", "(", ")", "\n", "# Loop over segA", "\n", "for", "i", "in", "iter_segA", ":", "\n", "        ", "binaryA", "=", "segA", "==", "i", "\n", "if", "not", "binaryA", ".", "any", "(", ")", ":", "\n", "            ", "continue", "\n", "", "max_iou", "=", "torch", ".", "tensor", "(", "bsz", "*", "[", "0.0", "]", ")", "\n", "# Loop over segB to find max IOU", "\n", "for", "j", "in", "iter_segB", ":", "\n", "# Do not penalise pixels that are in ignore regions", "\n", "            ", "binaryB", "=", "(", "segB", "==", "j", ")", "*", "nonignore", "\n", "if", "not", "binaryB", ".", "any", "(", ")", ":", "\n", "                ", "continue", "\n", "", "iou", "=", "iou_binary", "(", "binaryA", ",", "binaryB", ")", "\n", "max_iou", "=", "torch", ".", "where", "(", "iou", ">", "max_iou", ",", "iou", ",", "max_iou", ")", "\n", "# Accumulate scores", "\n", "", "mean_scores", "+=", "max_iou", "\n", "N", "=", "torch", ".", "where", "(", "binaryA", ".", "sum", "(", "(", "1", ",", "2", ",", "3", ")", ")", ">", "0", ",", "N", "+", "1", ",", "N", ")", "\n", "scaled_scores", "+=", "binaryA", ".", "sum", "(", "(", "1", ",", "2", ",", "3", ")", ")", ".", "float", "(", ")", "*", "max_iou", "\n", "scaling_sum", "+=", "binaryA", ".", "sum", "(", "(", "1", ",", "2", ",", "3", ")", ")", "\n", "\n", "# Compute coverage", "\n", "", "mean_sc", "=", "mean_scores", "/", "torch", ".", "max", "(", "N", ",", "torch", ".", "tensor", "(", "1", ")", ")", ".", "float", "(", ")", "\n", "scaled_sc", "=", "scaled_scores", "/", "torch", ".", "max", "(", "scaling_sum", ",", "torch", ".", "tensor", "(", "1", ")", ")", ".", "float", "(", ")", "\n", "\n", "# Sanity check", "\n", "assert", "(", "mean_sc", ">=", "0", ")", ".", "all", "(", ")", "and", "(", "mean_sc", "<=", "1", ")", ".", "all", "(", ")", ",", "mean_sc", "\n", "assert", "(", "scaled_sc", ">=", "0", ")", ".", "all", "(", ")", "and", "(", "scaled_sc", "<=", "1", ")", ".", "all", "(", ")", ",", "scaled_sc", "\n", "assert", "(", "mean_scores", "[", "N", "==", "0", "]", "==", "0", ")", ".", "all", "(", ")", "\n", "assert", "(", "mean_scores", "[", "nonignore", ".", "sum", "(", "(", "1", ",", "2", ",", "3", ")", ")", "==", "0", "]", "==", "0", ")", ".", "all", "(", ")", "\n", "assert", "(", "scaled_scores", "[", "N", "==", "0", "]", "==", "0", ")", ".", "all", "(", ")", "\n", "assert", "(", "scaled_scores", "[", "nonignore", ".", "sum", "(", "(", "1", ",", "2", ",", "3", ")", ")", "==", "0", "]", "==", "0", ")", ".", "all", "(", ")", "\n", "\n", "return", "mean_sc", ",", "scaled_sc", "\n", "\n"]], "home.repos.pwc.inspect_result.BrunoSauvalle_AST.None.MF_stats.evaluate": [[165, 248], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "netE.eval", "netG.eval", "input_images.type().to.type().to", "background_images_with_error_prediction.type().to.type().to", "netG", "torch.amax", "torch.amax", "torch.amax", "torch.amax", "torch.amax", "torch.amax", "torch.amax", "torch.amax", "torch.functional.mse_loss().sum", "GT_masks.type().to.type().to", "activation_layers.reshape.reshape", "torch.argmax().expand().reshape", "torch.argmax().expand().reshape", "torch.argmax().expand().reshape", "torch.argmax().expand().reshape", "GT_masks.type().to.reshape", "MF_stats.ious_alignment", "MF_stats.reindex", "true_masks.any().any().any", "reindex.any().any().any", "vism.to().sum", "MF_stats.average_segcover", "MF_stats.average_segcover", "MF_stats.compute_ari", "MF_stats.compute_ari", "netE", "torch.sum().float", "torch.sum().float", "torch.sum().float", "torch.sum().float", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "ious.sum", "netE.train", "netG.train", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "input_images.type().to.type", "background_images_with_error_prediction.type().to.type", "torch.sum().float", "torch.sum().float", "torch.sum().float", "torch.sum().float", "torch.functional.mse_loss", "netE.train", "netG.train", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "GT_masks.type().to.type", "torch.argmax().expand", "torch.argmax().expand", "torch.argmax().expand", "torch.argmax().expand", "true_masks.any().any", "reindex.any().any", "vism.to", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.ge", "torch.ge", "torch.ge", "torch.ge", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "true_masks.any", "reindex.any", "torch.ge", "torch.ge", "torch.ge", "torch.ge", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "function", ["home.repos.pwc.inspect_result.BrunoSauvalle_AST.None.MF_stats.ious_alignment", "home.repos.pwc.inspect_result.BrunoSauvalle_AST.None.MF_stats.reindex", "home.repos.pwc.inspect_result.BrunoSauvalle_AST.None.MF_stats.average_segcover", "home.repos.pwc.inspect_result.BrunoSauvalle_AST.None.MF_stats.average_segcover", "home.repos.pwc.inspect_result.BrunoSauvalle_AST.None.MF_stats.compute_ari", "home.repos.pwc.inspect_result.BrunoSauvalle_AST.None.MF_stats.compute_ari"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "evaluate", "(", "data", ",", "netE", ",", "netG", ",", "reduction", "=", "True", ")", ":", "\n", "    ", "h", "=", "args", ".", "image_height", "\n", "w", "=", "args", ".", "image_width", "\n", "training_mode", "=", "netE", ".", "training", "\n", "assert", "training_mode", "==", "netG", ".", "training", "\n", "\n", "netE", ".", "eval", "(", ")", "\n", "netG", ".", "eval", "(", ")", "\n", "\n", "input_images", ",", "background_images_with_error_prediction", ",", "GT_masks", "=", "data", "\n", "\n", "input_images", "=", "input_images", ".", "type", "(", "torch", ".", "cuda", ".", "FloatTensor", ")", ".", "to", "(", "0", ")", "\n", "background_images_with_error_prediction", "=", "background_images_with_error_prediction", ".", "type", "(", "torch", ".", "cuda", ".", "FloatTensor", ")", ".", "to", "(", "\n", "args", ".", "device", ")", "\n", "\n", "background_images", "=", "background_images_with_error_prediction", "[", ":", ",", ":", "3", ",", ":", ",", ":", "]", "\n", "latents", ",", "weights", "=", "netE", "(", "input_images", ")", "[", ":", "2", "]", "\n", "rgb_images", ",", "foreground_masks", ",", "image_layers", ",", "activation_layers", "=", "netG", "(", "latents", ",", "background_images", ")", "\n", "\n", "batch_size", "=", "input_images", ".", "shape", "[", "0", "]", "\n", "max_set_size", "=", "args", ".", "max_set_size", "\n", "\n", "# number of active heads", "\n", "max_activation_per_layer_on_minibatch", "=", "torch", ".", "amax", "(", "activation_layers", ",", "(", "1", ",", "2", ",", "3", ",", "4", ")", ")", "# (K+1)", "\n", "number_of_active_heads", "=", "torch", ".", "sum", "(", "torch", ".", "ge", "(", "max_activation_per_layer_on_minibatch", ",", "1e-3", ")", ",", "dim", "=", "0", ")", ".", "float", "(", ")", "-", "1", "# -1 is for background", "\n", "\n", "max_activation_per_layer_on_sample", "=", "torch", ".", "amax", "(", "activation_layers", ",", "(", "2", ",", "3", ",", "4", ")", ")", "# (K+1)N", "\n", "average_number_of_activated_heads", "=", "torch", ".", "mean", "(", "torch", ".", "sum", "(", "torch", ".", "ge", "(", "max_activation_per_layer_on_sample", ",", "1e-3", ")", ",", "dim", "=", "0", ")", ".", "float", "(", ")", ")", "-", "1", "\n", "\n", "#mse_loss", "\n", "mse_loss", "=", "nn", ".", "functional", ".", "mse_loss", "(", "input_images", ",", "rgb_images", ",", "reduction", "=", "'none'", ")", ".", "sum", "(", "(", "1", ",", "2", ",", "3", ")", ")", "\n", "\n", "if", "torch", ".", "sum", "(", "GT_masks", ")", "==", "0", ":", "# no GT masks, only mse loss can be computed and returned", "\n", "        ", "if", "training_mode", ":", "\n", "            ", "netE", ".", "train", "(", ")", "\n", "netG", ".", "train", "(", ")", "\n", "", "return", "torch", ".", "mean", "(", "mse_loss", ")", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "number_of_active_heads", ",", "average_number_of_activated_heads", "\n", "\n", "", "GT_masks", "=", "GT_masks", ".", "type", "(", "torch", ".", "cuda", ".", "FloatTensor", ")", ".", "to", "(", "\n", "args", ".", "device", ")", "\n", "activation_layers", "=", "activation_layers", ".", "reshape", "(", "max_set_size", "+", "1", ",", "batch_size", ",", "1", ",", "h", ",", "w", ")", "# K, N , H, W", "\n", "mask_index", "=", "torch", ".", "argmax", "(", "activation_layers", ",", "0", ")", ".", "expand", "(", "batch_size", ",", "1", ",", "h", ",", "w", ")", ".", "reshape", "(", "batch_size", ",", "1", ",", "1", ",", "h", ",", "w", ")", "# n,1,1,H,W", "\n", "GT_mask_index", "=", "GT_masks", ".", "reshape", "(", "batch_size", ",", "1", ",", "1", ",", "h", ",", "w", ")", "\n", "pred_masks", "=", "(", "mask_index", "==", "torch", ".", "arange", "(", "max_set_size", "+", "1", ",", "device", "=", "args", ".", "device", ")", ".", "view", "(", "1", ",", "max_set_size", "+", "1", ",", "1", ",", "1", ",", "1", ")", ")", ".", "to", "(", "\n", "torch", ".", "float", ")", "\n", "true_masks", "=", "(", "GT_mask_index", "==", "torch", ".", "arange", "(", "max_set_size", "+", "1", ",", "device", "=", "args", ".", "device", ")", ".", "view", "(", "1", ",", "max_set_size", "+", "1", ",", "1", ",", "1", ",", "1", ")", ")", ".", "to", "(", "\n", "torch", ".", "float", ")", "\n", "\n", "pred_reindex", ",", "ious", ",", "_", "=", "ious_alignment", "(", "pred_masks", ",", "true_masks", ")", "\n", "pred_masks", "=", "reindex", "(", "pred_masks", ",", "pred_reindex", ",", "dim", "=", "1", ")", "\n", "truem", "=", "true_masks", ".", "any", "(", "-", "1", ")", ".", "any", "(", "-", "1", ")", ".", "any", "(", "-", "1", ")", "\n", "predm", "=", "pred_masks", ".", "any", "(", "-", "1", ")", ".", "any", "(", "-", "1", ")", ".", "any", "(", "-", "1", ")", "\n", "vism", "=", "truem", "|", "predm", "\n", "num_pairs", "=", "vism", ".", "to", "(", "torch", ".", "float", ")", ".", "sum", "(", "-", "1", ")", "\n", "\n", "# mIoU", "\n", "mIoU", "=", "ious", ".", "sum", "(", "-", "1", ")", "/", "num_pairs", "\n", "\n", "#msc", "\n", "msc", ",", "scaled_sc", "=", "average_segcover", "(", "mask_index", ",", "GT_mask_index", ",", "ignore_background", "=", "False", ")", "\n", "msc_fg", ",", "scaled_sc_fg", "=", "average_segcover", "(", "mask_index", ",", "GT_mask_index", ",", "ignore_background", "=", "True", ")", "\n", "\n", "#ari", "\n", "ari", "=", "compute_ari", "(", "pred_masks", ",", "true_masks", ")", "\n", "ari_fg", "=", "compute_ari", "(", "pred_masks", ",", "true_masks", ",", "skip_0", "=", "True", ")", "\n", "\n", "\n", "if", "training_mode", ":", "\n", "        ", "netE", ".", "train", "(", ")", "\n", "netG", ".", "train", "(", ")", "\n", "\n", "", "if", "reduction", ":", "\n", "        ", "mse_loss", "=", "torch", ".", "mean", "(", "mse_loss", ")", "\n", "mIoU", "=", "torch", ".", "mean", "(", "mIoU", ")", "\n", "msc", "=", "torch", ".", "mean", "(", "msc", ")", "\n", "scaled_sc", "=", "torch", ".", "mean", "(", "scaled_sc", ")", "\n", "msc_fg", "=", "torch", ".", "mean", "(", "msc_fg", ")", "\n", "scaled_sc_fg", "=", "torch", ".", "mean", "(", "scaled_sc_fg", ")", "\n", "ari", "=", "torch", ".", "mean", "(", "ari", ")", "\n", "ari_fg", "=", "torch", ".", "mean", "(", "ari_fg", ")", "\n", "\n", "", "return", "mse_loss", ",", "mIoU", ",", "msc", ",", "scaled_sc", ",", "msc_fg", ",", "scaled_sc_fg", ",", "ari", ",", "ari_fg", ",", "number_of_active_heads", ",", "average_number_of_activated_heads", "\n", "", ""]], "home.repos.pwc.inspect_result.BrunoSauvalle_AST.None.MF_config.Foreground_training_configuration_data.__init__": [[7, 78], ["torch.device", "torch.device", "torch.device", "torch.device", "kwargs.items", "hasattr", "setattr"], "methods", ["None"], ["        ", "def", "__init__", "(", "self", ",", "dataset_name", ",", "kwargs", ")", ":", "\n", "\n", "            ", "self", ".", "dataset_name", "=", "dataset_name", "# dataset name", "\n", "\n", "## dataset and checkpoint Paths", "\n", "self", ".", "test_dataset_input_path", "=", "None", "# Path to the frames sequence directory used for testing", "\n", "self", ".", "test_dataset_background_path", "=", "None", "\n", "self", ".", "test_dataset_target_path", "=", "None", "# Path to the frames sequence directory used for testing", "\n", "self", ".", "test_dataset_GT_mask_path", "=", "None", "# Path to the ground truth masks directory used for evaluation during testing", "\n", "self", ".", "train_dataset_input_path", "=", "None", "# Path to the frames sequence directory used for testing", "\n", "self", ".", "train_dataset_background_path", "=", "None", "\n", "self", ".", "train_dataset_target_path", "=", "None", "# Path to the frames sequence directory used for testing", "\n", "self", ".", "train_dataset_GT_mask_path", "=", "None", "# Path to the ground truth masks directory used for evaluation during testing", "\n", "self", ".", "object_model_checkpoint_path", "=", "None", "\n", "self", ".", "object_model_checkpoint_path_alt1", "=", "None", "\n", "self", ".", "object_model_checkpoint_path_alt2", "=", "None", "\n", "self", ".", "results_dir_path", "=", "None", "\n", "\n", "## videos descriptors", "\n", "self", ".", "max_set_size", "=", "None", "\n", "self", ".", "image_height", "=", "None", "\n", "self", ".", "image_width", "=", "None", "\n", "self", ".", "real_world_video", "=", "None", "\n", "self", ".", "fixed_background", "=", "None", "\n", "\n", "# model parameters", "\n", "self", ".", "isotropic_scaling", "=", "None", "\n", "self", ".", "transformer_dim", "=", "256", "# dimension of inputs and outputs of the transformer encoder", "\n", "self", ".", "transformer_nhead", "=", "8", "# number of heads of  transformer encoder", "\n", "self", ".", "transformer_nlayers", "=", "6", "# number of layers of the transformer encoder", "\n", "self", ".", "transformer_dim_feedforward", "=", "512", "# number of layers of  transformer", "\n", "self", ".", "initial_background_activation_logit", "=", "11", "\n", "self", ".", "variable_background_activation", "=", "False", "\n", "self", ".", "z_what_dim", "=", "None", "\n", "self", ".", "eps_mask", "=", "1e-5", "\n", "self", ".", "max_scaling_factor", "=", "None", "\n", "self", ".", "min_scaling_factor", "=", "1.3", "\n", "\n", "# loss function parameters", "\n", "self", ".", "threshold_for_fixed_backgrounds", "=", "0.02", "\n", "self", ".", "threshold_for_dynamic_backgrounds", "=", "0.21", "\n", "self", ".", "threshold_for_real_world_videos", "=", "0.10", "\n", "self", ".", "pixel_entropy_loss_weight", "=", "1e-2", "\n", "self", ".", "objects_entropy_loss_weight", "=", "3e-4", "\n", "\n", "# training parameters", "\n", "self", ".", "batch_size", "=", "None", "\n", "self", ".", "learning_rate", "=", "None", "\n", "self", ".", "number_of_training_steps", "=", "None", "\n", "self", ".", "warmup", "=", "None", "\n", "self", ".", "evaluation_step", "=", "None", "\n", "self", ".", "pixel_entropy_loss_full_activation_step", "=", "None", "\n", "self", ".", "objects_entropy_loss_full_activation_step", "=", "None", "\n", "self", ".", "detection_threshold", "=", "1e-5", "# training will be aborted and restarted if pixel entropy loss is below detection threshold at the end of the warmup phase", "\n", "self", ".", "workers", "=", "4", "#number of workers for data loading per process", "\n", "self", ".", "object_detection_weight_decay", "=", "0", "\n", "self", ".", "use_trained_model", "=", "False", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "0", ")", "\n", "\n", "# user interface parameters", "\n", "self", ".", "training_images_output_directory", "=", "'/workspace/PycharmProjects/SCOD/MOS/MF/MF_outputs'", "\n", "self", ".", "n_images_to_show", "=", "60", "#10 # number of images to show during training", "\n", "self", ".", "message_time", "=", "15", "# time between two training status message", "\n", "self", ".", "show_time", "=", "60", "# time between images saving (sec)", "\n", "self", ".", "save_time", "=", "300", "# time between model saving", "\n", "self", ".", "color_palette", "=", "None", "# default or seaborn", "\n", "\n", "# override default values with provided arguments:", "\n", "for", "attr", ",", "value", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "                ", "assert", "hasattr", "(", "self", ",", "attr", ")", ",", "f'wrong attribute name {attr}'", "\n", "setattr", "(", "self", ",", "attr", ",", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BrunoSauvalle_AST.None.MF_train.Training_state.__init__": [[52, 58], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "step", "=", "0", "\n", "self", ".", "last_step", "=", "0", "\n", "self", ".", "rate", "=", "0", "\n", "self", ".", "number_of_training_steps", "=", "args", ".", "number_of_training_steps", "\n", "self", ".", "epoch", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.BrunoSauvalle_AST.None.MF_train.Training_state.state_dict": [[59, 61], ["MF_train.Training_state.__dict__.items"], "methods", ["None"], ["", "def", "state_dict", "(", "self", ")", ":", "\n", "        ", "return", "{", "key", ":", "value", "for", "key", ",", "value", "in", "self", ".", "__dict__", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.BrunoSauvalle_AST.None.MF_train.Training_state.load_state_dict": [[62, 64], ["MF_train.Training_state.__dict__.update"], "methods", ["home.repos.pwc.inspect_result.BrunoSauvalle_AST.None.MF_evaluate_on_test_dataset.RunningMean.update"], ["", "def", "load_state_dict", "(", "self", ",", "state_dict", ")", ":", "\n", "        ", "self", ".", "__dict__", ".", "update", "(", "state_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BrunoSauvalle_AST.None.MF_train.Training_state.rate_update": [[65, 73], ["min"], "methods", ["None"], ["", "def", "rate_update", "(", "self", ")", ":", "\n", "        ", "step", "=", "self", ".", "step", "\n", "if", "step", "<", "args", ".", "warmup", ":", "\n", "            ", "return", "args", ".", "learning_rate", "*", "min", "(", "1", ",", "(", "step", "/", "args", ".", "warmup", ")", "**", "2", ")", "\n", "", "elif", "step", "<", "self", ".", "number_of_training_steps", "*", "(", "0.90", ")", ":", "\n", "            ", "return", "args", ".", "learning_rate", "\n", "", "else", ":", "\n", "            ", "return", "args", ".", "learning_rate", "*", "0.1", "\n", "\n"]], "home.repos.pwc.inspect_result.BrunoSauvalle_AST.None.MF_train.Training_state.update": [[74, 82], ["MF_train.Training_state.rate_update"], "methods", ["home.repos.pwc.inspect_result.BrunoSauvalle_AST.None.MF_train.Training_state.rate_update"], ["", "", "def", "update", "(", "self", ",", "optimizer", ")", ":", "\n", "        ", "\"Update parameters and rate\"", "\n", "self", ".", "step", "+=", "1", "\n", "rate", "=", "self", ".", "rate_update", "(", ")", "\n", "if", "rate", "!=", "self", ".", "rate", ":", "\n", "            ", "for", "p", "in", "optimizer", ".", "param_groups", ":", "\n", "                    ", "p", "[", "'lr'", "]", "=", "rate", "\n", "", "", "self", ".", "rate", "=", "rate", "\n", "\n"]], "home.repos.pwc.inspect_result.BrunoSauvalle_AST.None.MF_train.losses": [[24, 48], ["activation_layers.reshape.reshape", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log"], "function", ["None"], ["def", "losses", "(", "reconstructed_images", ",", "input_images", ",", "backgrounds_with_error_predictions", ",", "activation_layers", ")", ":", "\n", "# input images should be torch tensor range 0-1 NCHW", "\n", "\n", "    ", "n", ",", "nc", ",", "h", ",", "w", "=", "backgrounds_with_error_predictions", ".", "shape", "\n", "activation_layers", "=", "activation_layers", ".", "reshape", "(", "1", "+", "args", ".", "max_set_size", ",", "n", ",", "h", ",", "w", ")", "\n", "\n", "if", "args", ".", "real_world_video", ":", "\n", "        ", "threshold", "=", "args", ".", "threshold_for_real_world_videos", "\n", "\n", "", "else", ":", "\n", "        ", "if", "args", ".", "fixed_background", ":", "\n", "            ", "threshold", "=", "args", ".", "threshold_for_fixed_backgrounds", "\n", "", "else", ":", "\n", "            ", "threshold", "=", "args", ".", "threshold_for_dynamic_backgrounds", "\n", "\n", "", "", "pixel_reconstruction_errors", "=", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "reconstructed_images", "-", "input_images", ")", ",", "dim", "=", "1", ")", "# NHW range 0-3", "\n", "reconstruction_loss", "=", "torch", ".", "mean", "(", "torch", ".", "square", "(", "torch", ".", "relu", "(", "pixel_reconstruction_errors", "-", "threshold", ")", ")", ")", "# scalar", "\n", "\n", "pixel_entropy_loss", "=", "torch", ".", "mean", "(", "torch", ".", "square", "(", "torch", ".", "sum", "(", "activation_layers", "*", "torch", ".", "log", "(", "activation_layers", "+", "1e-20", ")", ",", "dim", "=", "0", ")", ")", ")", "\n", "\n", "average_layer_activation_per_image", "=", "torch", ".", "mean", "(", "activation_layers", ",", "dim", "=", "(", "2", ",", "3", ")", ")", "\n", "object_entropy_loss", "=", "torch", ".", "mean", "(", "torch", ".", "square", "(", "torch", ".", "sum", "(", "average_layer_activation_per_image", "*", "torch", ".", "log", "(", "average_layer_activation_per_image", "+", "1e-20", ")", ",", "dim", "=", "0", ")", ")", ")", "\n", "\n", "return", "reconstruction_loss", ",", "pixel_entropy_loss", ",", "object_entropy_loss", "#mask_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.BrunoSauvalle_AST.None.MF_train.object_train": [[83, 211], ["torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "MF_data.get_train_dataset_and_dataloader", "MF_models_encoder.Encoder().to", "MF_models_renderer.Renderer().to", "MF_train.Training_state", "torch.Adam", "torch.utils.tensorboard.SummaryWriter", "time.time", "MF_models_encoder.Encoder().to.train", "MF_models_renderer.Renderer().to.train", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "MF_models_encoder.Encoder().to.load_state_dict", "MF_models_renderer.Renderer().to.load_state_dict", "print", "optim.Adam.load_state_dict", "print", "MF_train.Training_state.load_state_dict", "print", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "enumerate", "MF_models_encoder.Encoder", "MF_models_renderer.Renderer", "input_images.type().to.type().to", "background_images_with_error_prediction.type().to.type().to", "MF_models_encoder.Encoder().to.zero_grad", "MF_models_renderer.Renderer().to.zero_grad", "MF_models_renderer.Renderer().to.", "MF_train.losses", "loss.backward", "MF_train.Training_state.update", "optim.Adam.step", "torch.utils.tensorboard.SummaryWriter.add_scalar", "MF_models_renderer.Renderer().to.parameters", "MF_models_encoder.Encoder().to.parameters", "MF_models_encoder.Encoder().to.", "min", "min", "time.time", "MF_stats.evaluate", "print", "print", "print", "torch.utils.tensorboard.SummaryWriter.add_scalar", "torch.utils.tensorboard.SummaryWriter.add_scalar", "torch.utils.tensorboard.SummaryWriter.add_scalar", "torch.utils.tensorboard.SummaryWriter.add_scalar", "torch.utils.tensorboard.SummaryWriter.add_scalar", "torch.utils.tensorboard.SummaryWriter.add_scalar", "torch.utils.tensorboard.SummaryWriter.add_scalar", "torch.utils.tensorboard.SummaryWriter.add_scalar", "torch.utils.tensorboard.SummaryWriter.add_scalar", "time.time", "time.time", "time.time", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "print", "MF_utils.build_train_images", "min", "torchvision.save_image", "time.time", "time.time", "print", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "print", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "print", "print", "MF_train.Training_state.state_dict", "input_images.type().to.type", "background_images_with_error_prediction.type().to.type", "time.time", "MF_models_encoder.Encoder().to.state_dict", "MF_models_renderer.Renderer().to.state_dict", "MF_train.Training_state.state_dict", "optim.Adam.state_dict", "MF_models_encoder.Encoder().to.state_dict", "MF_models_renderer.Renderer().to.state_dict", "MF_train.Training_state.state_dict", "optim.Adam.state_dict"], "function", ["home.repos.pwc.inspect_result.BrunoSauvalle_AST.None.MF_data.get_train_dataset_and_dataloader", "home.repos.pwc.inspect_result.BrunoSauvalle_AST.None.MF_train.Training_state.load_state_dict", "home.repos.pwc.inspect_result.BrunoSauvalle_AST.None.MF_train.Training_state.load_state_dict", "home.repos.pwc.inspect_result.BrunoSauvalle_AST.None.MF_train.Training_state.load_state_dict", "home.repos.pwc.inspect_result.BrunoSauvalle_AST.None.MF_train.Training_state.load_state_dict", "home.repos.pwc.inspect_result.BrunoSauvalle_AST.None.MF_train.losses", "home.repos.pwc.inspect_result.BrunoSauvalle_AST.None.MF_evaluate_on_test_dataset.RunningMean.update", "home.repos.pwc.inspect_result.BrunoSauvalle_AST.None.MF_stats.evaluate", "home.repos.pwc.inspect_result.BrunoSauvalle_AST.None.MF_utils.build_train_images", "home.repos.pwc.inspect_result.BrunoSauvalle_AST.None.MF_train.Training_state.state_dict", "home.repos.pwc.inspect_result.BrunoSauvalle_AST.None.MF_train.Training_state.state_dict", "home.repos.pwc.inspect_result.BrunoSauvalle_AST.None.MF_train.Training_state.state_dict", "home.repos.pwc.inspect_result.BrunoSauvalle_AST.None.MF_train.Training_state.state_dict", "home.repos.pwc.inspect_result.BrunoSauvalle_AST.None.MF_train.Training_state.state_dict", "home.repos.pwc.inspect_result.BrunoSauvalle_AST.None.MF_train.Training_state.state_dict", "home.repos.pwc.inspect_result.BrunoSauvalle_AST.None.MF_train.Training_state.state_dict", "home.repos.pwc.inspect_result.BrunoSauvalle_AST.None.MF_train.Training_state.state_dict", "home.repos.pwc.inspect_result.BrunoSauvalle_AST.None.MF_train.Training_state.state_dict"], ["", "", "def", "object_train", "(", "archive_path", ")", ":", "\n", "\n", "    ", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "train_dataset", ",", "train_dataloader", "=", "MF_data", ".", "get_train_dataset_and_dataloader", "(", ")", "\n", "\n", "netE", "=", "MF_models_encoder", ".", "Encoder", "(", "args", ")", ".", "to", "(", "args", ".", "device", ")", "\n", "netG", "=", "MF_models_renderer", ".", "Renderer", "(", "args", ")", ".", "to", "(", "args", ".", "device", ")", "\n", "\n", "if", "args", ".", "use_trained_model", "==", "True", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "object_model_checkpoint_path", ")", "\n", "netE", ".", "load_state_dict", "(", "checkpoint", "[", "'encoder_state_dict'", "]", ")", "\n", "netG", ".", "load_state_dict", "(", "checkpoint", "[", "'generator_state_dict'", "]", ")", "\n", "\n", "", "trainer", "=", "Training_state", "(", ")", "\n", "\n", "optimizer", "=", "optim", ".", "Adam", "(", "[", "{", "'params'", ":", "netG", ".", "parameters", "(", ")", "}", ",", "{", "'params'", ":", "netE", ".", "parameters", "(", ")", "}", "]", ",", "lr", "=", "trainer", ".", "rate", ",", "\n", "betas", "=", "(", "0.90", ",", "0.98", ")", ",", "eps", "=", "1e-9", ",", "weight_decay", "=", "args", ".", "object_detection_weight_decay", ")", "\n", "\n", "if", "args", ".", "use_trained_model", "==", "True", ":", "\n", "        ", "print", "(", "'loading optimizer state'", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer_state_dict'", "]", ")", "\n", "print", "(", "'loading training state'", ")", "\n", "trainer", ".", "load_state_dict", "(", "checkpoint", "[", "'trainer_state_dict'", "]", ")", "\n", "print", "(", "f'training state {trainer.state_dict()}'", ")", "\n", "\n", "", "writer", "=", "SummaryWriter", "(", ")", "\n", "last_showtime", "=", "0", "\n", "last_savetime", "=", "0", "\n", "last_message_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "netE", ".", "train", "(", ")", "\n", "netG", ".", "train", "(", ")", "\n", "\n", "print", "(", "'starting object detection training loop'", ")", "\n", "\n", "while", "True", ":", "\n", "\n", "        ", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n", "for", "j", ",", "data", "in", "enumerate", "(", "train_dataloader", ")", ":", "\n", "\n", "            ", "input_images", ",", "background_images_with_error_prediction", "=", "data", "[", ":", "2", "]", "\n", "batch_size", "=", "input_images", ".", "shape", "[", "0", "]", "\n", "input_images", "=", "input_images", ".", "type", "(", "torch", ".", "cuda", ".", "FloatTensor", ")", ".", "to", "(", "args", ".", "device", ")", "\n", "background_images_with_error_prediction", "=", "background_images_with_error_prediction", ".", "type", "(", "torch", ".", "cuda", ".", "FloatTensor", ")", ".", "to", "(", "args", ".", "device", ")", "\n", "background_images", "=", "background_images_with_error_prediction", "[", ":", ",", ":", "3", ",", ":", ",", ":", "]", "\n", "\n", "netE", ".", "zero_grad", "(", ")", "\n", "netG", ".", "zero_grad", "(", ")", "\n", "\n", "latents", ",", "weights", "=", "netE", "(", "input_images", ")", "[", ":", "2", "]", "\n", "reconstructed_images", ",", "foreground_masks", ",", "warped_images", ",", "activation_layers", "=", "netG", "(", "latents", ",", "background_images", ")", "\n", "reconstruction_loss", ",", "pixel_entropy_loss", ",", "objects_entropy_loss", "=", "losses", "(", "reconstructed_images", ",", "input_images", ",", "background_images_with_error_prediction", ",", "activation_layers", ")", "\n", "\n", "pixel_entropy_loss_warmup_ratio", "=", "min", "(", "1", ",", "trainer", ".", "step", "/", "args", ".", "pixel_entropy_loss_full_activation_step", ")", "**", "2", "\n", "\n", "objects_entropy_loss_warmup_ratio", "=", "min", "(", "1", ",", "trainer", ".", "step", "/", "args", ".", "objects_entropy_loss_full_activation_step", ")", "**", "2", "\n", "\n", "loss", "=", "reconstruction_loss", "+", "pixel_entropy_loss", "*", "args", ".", "pixel_entropy_loss_weight", "*", "pixel_entropy_loss_warmup_ratio", "+", "objects_entropy_loss", "*", "args", ".", "objects_entropy_loss_weight", "*", "objects_entropy_loss_warmup_ratio", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "trainer", ".", "update", "(", "optimizer", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "writer", ".", "add_scalar", "(", "'loss'", ",", "loss", ",", "global_step", "=", "trainer", ".", "step", ")", "\n", "\n", "if", "time", ".", "time", "(", ")", ">", "last_message_time", "+", "args", ".", "message_time", ":", "\n", "\n", "                ", "its", "=", "(", "trainer", ".", "step", "-", "trainer", ".", "last_step", ")", "/", "(", "time", ".", "time", "(", ")", "-", "last_message_time", ")", "\n", "lr", "=", "trainer", ".", "rate", "\n", "\n", "mse_loss", ",", "mIoU", ",", "msc", ",", "scaled_sc", ",", "msc_fg", ",", "scaled_sc_fg", ",", "ari", ",", "ari_fg", ",", "number_of_active_heads", ",", "average_number_of_activated_heads", "=", "MF_stats", ".", "evaluate", "(", "data", ",", "netE", ",", "netG", ")", "\n", "\n", "print", "(", "f'[dataset {args.dataset_name} ] [ archive path {archive_path}]'", ")", "\n", "print", "(", "'[ep %d][stp %d/%d its %.2f ] [lr %.2e ] [ loss: %.2e rec_l %.2e, pixel_l %.2e objects_l %.2e ] [active heads %.2f avg activated heads %.2f] '", "\n", "%", "(", "trainer", ".", "epoch", ",", "trainer", ".", "step", ",", "args", ".", "number_of_training_steps", ",", "its", ",", "lr", ",", "\n", "loss", ",", "reconstruction_loss", ",", "pixel_entropy_loss", ",", "objects_entropy_loss", ",", "number_of_active_heads", ",", "average_number_of_activated_heads", ")", ")", "\n", "print", "(", "f'[mIoU %.3f  msc_fg %.3f  ari_fg %.3f mse %2.f]'", "%", "(", "mIoU", ",", "msc_fg", ",", "ari_fg", ",", "mse_loss", ")", ")", "\n", "writer", ".", "add_scalar", "(", "'mse_loss'", ",", "mse_loss", ",", "global_step", "=", "trainer", ".", "step", ")", "\n", "writer", ".", "add_scalar", "(", "'mIoU'", ",", "mIoU", ",", "global_step", "=", "trainer", ".", "step", ")", "\n", "writer", ".", "add_scalar", "(", "'msc_fg'", ",", "msc_fg", ",", "global_step", "=", "trainer", ".", "step", ")", "\n", "writer", ".", "add_scalar", "(", "'ari_fg'", ",", "ari_fg", ",", "global_step", "=", "trainer", ".", "step", ")", "\n", "writer", ".", "add_scalar", "(", "'pixel entropy loss'", ",", "pixel_entropy_loss", ",", "global_step", "=", "trainer", ".", "step", ")", "\n", "writer", ".", "add_scalar", "(", "'objects entropy loss'", ",", "objects_entropy_loss", ",", "global_step", "=", "trainer", ".", "step", ")", "\n", "writer", ".", "add_scalar", "(", "'active heads'", ",", "number_of_active_heads", ",", "global_step", "=", "trainer", ".", "step", ")", "\n", "writer", ".", "add_scalar", "(", "'average_number_of_activated_heads'", ",", "average_number_of_activated_heads", ",", "global_step", "=", "trainer", ".", "step", ")", "\n", "writer", ".", "add_scalar", "(", "'reconstruction_loss'", ",", "reconstruction_loss", ",", "global_step", "=", "trainer", ".", "step", ")", "\n", "\n", "trainer", ".", "last_step", "=", "trainer", ".", "step", "\n", "last_message_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "\n", "", "if", "time", ".", "time", "(", ")", ">", "last_showtime", "+", "args", ".", "show_time", ":", "\n", "                ", "last_showtime", "=", "time", ".", "time", "(", ")", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "print", "(", "'saving images'", ")", "\n", "train_images", "=", "MF_utils", ".", "build_train_images", "(", "data", ",", "netE", ",", "netG", ")", "\n", "n_images", "=", "min", "(", "batch_size", ",", "args", ".", "n_images_to_show", ")", "\n", "vutils", ".", "save_image", "(", "train_images", ",", "\n", "'%s/comparison_train_set_%01d.png'", "%", "(", "archive_path", ",", "trainer", ".", "epoch", ")", ",", "nrow", "=", "n_images", ",", "\n", "pad_value", "=", "1", ")", "\n", "\n", "", "if", "time", ".", "time", "(", ")", ">", "last_savetime", "+", "args", ".", "save_time", ":", "\n", "                ", "last_savetime", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "'saving networks'", ")", "\n", "torch", ".", "save", "(", "{", "\n", "'encoder_state_dict'", ":", "netE", ".", "state_dict", "(", ")", ",", "\n", "'generator_state_dict'", ":", "netG", ".", "state_dict", "(", ")", ",", "\n", "'trainer_state_dict'", ":", "trainer", ".", "state_dict", "(", ")", ",", "\n", "'optimizer_state_dict'", ":", "optimizer", ".", "state_dict", "(", ")", "\n", "}", ",", "'%s/checkpoint_%d.pth'", "%", "(", "archive_path", ",", "trainer", ".", "epoch", "%", "2", ")", ")", "\n", "\n", "", "if", "trainer", ".", "step", "==", "args", ".", "number_of_training_steps", ":", "\n", "                ", "print", "(", "'end of training'", ")", "\n", "torch", ".", "save", "(", "{", "\n", "'encoder_state_dict'", ":", "netE", ".", "state_dict", "(", ")", ",", "\n", "'generator_state_dict'", ":", "netG", ".", "state_dict", "(", ")", ",", "\n", "'trainer_state_dict'", ":", "trainer", ".", "state_dict", "(", ")", ",", "\n", "'optimizer_state_dict'", ":", "optimizer", ".", "state_dict", "(", ")", "\n", "}", ",", "'%s/checkpoint_final_%d_epochs.pth'", "%", "(", "archive_path", ",", "trainer", ".", "epoch", ")", ")", "\n", "print", "(", "'model saved in %s/checkpoint_final_%d_epochs.pth'", "%", "(", "archive_path", ",", "trainer", ".", "epoch", ")", ")", "\n", "return", "True", "\n", "\n", "", "if", "trainer", ".", "step", "==", "args", ".", "evaluation_step", "and", "pixel_entropy_loss", "<", "args", ".", "detection_threshold", ":", "\n", "                ", "print", "(", "'detection process initialization failed, new initialization of detection process....  '", ")", "\n", "return", "False", "\n", "\n", "", "", "trainer", ".", "epoch", "=", "trainer", ".", "epoch", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.BrunoSauvalle_AST.None.MF_utils.setup_object_models": [[17, 29], ["MF_models_encoder.Encoder().to", "MF_models_renderer.Renderer().to", "MF_models_encoder.Encoder().to.", "print", "print", "MF_models_renderer.Renderer().to.", "print", "print", "torch.ones().to", "torch.ones().to", "pytorch_model_summary.summary", "pytorch_model_summary.summary", "MF_models_encoder.Encoder", "MF_models_renderer.Renderer", "torch.ones", "torch.ones"], "function", ["None"], ["def", "setup_object_models", "(", ")", ":", "\n", "\n", "        ", "netE", "=", "MF_models_encoder", ".", "Encoder", "(", "args", ")", ".", "to", "(", "args", ".", "device", ")", "\n", "netG", "=", "MF_models_renderer", ".", "Renderer", "(", "args", ")", ".", "to", "(", "args", ".", "device", ")", "\n", "test_image", "=", "0.5", "*", "torch", ".", "ones", "(", "(", "args", ".", "batch_size", ",", "3", ",", "args", ".", "image_height", ",", "args", ".", "image_width", ")", ")", ".", "to", "(", "args", ".", "device", ")", "\n", "encoder_output", "=", "netE", "(", "test_image", ")", "\n", "print", "(", "\"netE test ok\"", ")", "\n", "print", "(", "summary", "(", "netE", ",", "test_image", ",", "show_input", "=", "False", ")", ")", "\n", "generator_output", "=", "netG", "(", "encoder_output", "[", "0", "]", ",", "test_image", ")", "\n", "print", "(", "summary", "(", "netG", ",", "encoder_output", "[", "0", "]", ",", "test_image", ",", "show_input", "=", "False", ")", ")", "\n", "print", "(", "\"netG test ok\"", ")", "\n", "return", "netE", ",", "netG", "\n", "\n"]], "home.repos.pwc.inspect_result.BrunoSauvalle_AST.None.MF_utils.load_final_checkpoint": [[30, 36], ["print", "torch.load", "torch.load", "netE.load_state_dict", "netG.load_state_dict", "print"], "function", ["home.repos.pwc.inspect_result.BrunoSauvalle_AST.None.MF_train.Training_state.load_state_dict", "home.repos.pwc.inspect_result.BrunoSauvalle_AST.None.MF_train.Training_state.load_state_dict"], ["", "def", "load_final_checkpoint", "(", "netE", ",", "netG", ",", "object_model_checkpoint_path", "=", "args", ".", "object_model_checkpoint_path", ")", ":", "\n", "    ", "print", "(", "f'loading objects checkpoint from checkpoint {object_model_checkpoint_path}'", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "object_model_checkpoint_path", ")", "\n", "netE", ".", "load_state_dict", "(", "checkpoint", "[", "'encoder_state_dict'", "]", ")", "\n", "netG", ".", "load_state_dict", "(", "checkpoint", "[", "'generator_state_dict'", "]", ")", "\n", "print", "(", "'objects detection final checkpoint loaded'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BrunoSauvalle_AST.None.MF_utils.get_trained_model": [[37, 41], ["MF_utils.setup_object_models", "MF_utils.load_final_checkpoint"], "function", ["home.repos.pwc.inspect_result.BrunoSauvalle_AST.None.MF_utils.setup_object_models", "home.repos.pwc.inspect_result.BrunoSauvalle_AST.None.MF_utils.load_final_checkpoint"], ["", "def", "get_trained_model", "(", ")", ":", "\n", "    ", "netE", ",", "netG", "=", "setup_object_models", "(", ")", "\n", "load_final_checkpoint", "(", "netE", ",", "netG", ")", "\n", "return", "netE", ",", "netG", "\n", "\n"]], "home.repos.pwc.inspect_result.BrunoSauvalle_AST.None.MF_utils.normalize": [[42, 47], ["x.min", "y.max"], "function", ["None"], ["", "def", "normalize", "(", "x", ")", ":", "\n", "# rescale the heatmaps between 0 and 255", "\n", "    ", "y", "=", "x", "-", "x", ".", "min", "(", ")", "\n", "z", "=", "y", "/", "y", ".", "max", "(", ")", "\n", "return", "z", "*", "255", "\n", "\n"]], "home.repos.pwc.inspect_result.BrunoSauvalle_AST.None.MF_utils.normalize_1": [[48, 53], ["x.min", "y.max"], "function", ["None"], ["", "def", "normalize_1", "(", "x", ")", ":", "\n", "# rescale the heatmaps between 0 and 1", "\n", "    ", "y", "=", "x", "-", "x", ".", "min", "(", ")", "\n", "z", "=", "y", "/", "y", ".", "max", "(", ")", "\n", "return", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.BrunoSauvalle_AST.None.MF_utils.build_train_images": [[54, 184], ["torch.no_grad", "torch.no_grad", "netE.eval", "netG.eval", "min", "background_images_with_error_prediction.type().to.type().to", "netG", "input_images.cpu.cpu", "foreground_masks.repeat.cpu", "rgb_images.cpu.cpu", "activation_layers.cpu.cpu", "foreground_masks.repeat.repeat", "activation_layers.cpu.reshape().expand", "torch.argmax().expand().clone().cpu", "torch.argmax().expand().clone().cpu", "torch.gather", "torch.gather", "input_images.cpu.type().to", "torch.sum", "torch.sum", "netE", "GT_masks.cpu.cpu", "torch.tensor", "torch.tensor", "torch.gather", "torch.gather", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "netE.train", "netG.train", "torch.cat", "torch.cat", "torch.device", "torch.device", "background_images_with_error_prediction.type().to.type", "activation_layers.cpu.reshape", "torch.tensor.reshape().expand", "seaborn.color_palette", "torch.tensor().reshape().expand", "torch.tensor().reshape().expand", "torch.cat", "torch.cat", "print", "exit", "torch.argmax().expand().clone", "torch.argmax().expand().clone", "GT_masks.cpu.repeat().type", "input_images.cpu.type", "torch.ones", "torch.ones", "torch.tensor.reshape", "torch.tensor().reshape", "torch.tensor().reshape", "torch.zeros", "torch.zeros", "torch.argmax().expand", "torch.argmax().expand", "GT_masks.cpu.repeat", "torch.tensor", "torch.tensor", "torch.argmax", "torch.argmax"], "function", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "build_train_images", "(", "data", ",", "netE", ",", "netG", ")", ":", "\n", "\n", "    ", "training_mode", "=", "netE", ".", "training", "\n", "assert", "training_mode", "==", "netG", ".", "training", "\n", "netE", ".", "eval", "(", ")", "\n", "netG", ".", "eval", "(", ")", "\n", "\n", "\n", "input_images", ",", "background_images_with_error_prediction", ",", "GT_masks", "=", "data", "\n", "batch_size", "=", "input_images", ".", "shape", "[", "0", "]", "\n", "n_images", "=", "min", "(", "batch_size", ",", "args", ".", "n_images_to_show", ")", "\n", "input_images", "=", "input_images", ".", "type", "(", "torch", ".", "cuda", ".", "FloatTensor", ")", ".", "to", "(", "torch", ".", "device", "(", "0", ")", ")", "[", ":", "n_images", "]", "\n", "background_images_with_error_prediction", "=", "background_images_with_error_prediction", ".", "type", "(", "torch", ".", "cuda", ".", "FloatTensor", ")", ".", "to", "(", "args", ".", "device", ")", "\n", "\n", "h", "=", "args", ".", "image_height", "\n", "w", "=", "args", ".", "image_width", "\n", "nc", "=", "3", "\n", "max_set_size", "=", "args", ".", "max_set_size", "\n", "\n", "\n", "background_images_with_error_prediction", "=", "background_images_with_error_prediction", "[", ":", "n_images", "]", "\n", "background_images", "=", "background_images_with_error_prediction", "[", ":", ",", ":", "nc", ",", ":", ",", ":", "]", "\n", "\n", "if", "torch", ".", "sum", "(", "GT_masks", ")", "==", "0", ":", "\n", "        ", "GT_masks_available", "=", "False", "\n", "", "else", ":", "\n", "        ", "GT_masks_available", "=", "True", "\n", "GT_masks", "=", "GT_masks", "[", ":", "n_images", "]", "\n", "\n", "# model inference", "\n", "", "latents", ",", "attentions_and_feature_maps", "=", "netE", "(", "input_images", ")", "[", ":", "2", "]", "\n", "rgb_images", ",", "foreground_masks", ",", "image_layers", ",", "activation_layers", "=", "netG", "(", "latents", ",", "background_images", ")", "\n", "\n", "input_images", "=", "input_images", ".", "cpu", "(", ")", "\n", "foreground_masks", "=", "foreground_masks", ".", "cpu", "(", ")", "\n", "rgb_images", "=", "rgb_images", ".", "cpu", "(", ")", "\n", "activation_layers", "=", "activation_layers", ".", "cpu", "(", ")", "\n", "\n", "if", "GT_masks", "is", "not", "None", ":", "\n", "        ", "GT_masks", "=", "GT_masks", ".", "cpu", "(", ")", "\n", "\n", "", "batch_size", "=", "input_images", ".", "shape", "[", "0", "]", "\n", "assert", "batch_size", "==", "n_images", "\n", "\n", "foreground_masks", "=", "foreground_masks", ".", "repeat", "(", "1", ",", "nc", ",", "1", ",", "1", ")", "\n", "\n", "expanded_activation_layers", "=", "activation_layers", ".", "reshape", "(", "max_set_size", "+", "1", ",", "n_images", ",", "1", ",", "h", ",", "w", ")", ".", "expand", "(", "\n", "max_set_size", "+", "1", ",", "n_images", ",", "nc", ",", "h", ",", "w", ")", "\n", "if", "args", ".", "color_palette", "==", "'default'", ":", "\n", "        ", "CMAP", "=", "torch", ".", "tensor", "(", "[", "\n", "[", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "255", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "128", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "255", "]", ",", "\n", "[", "255", ",", "255", ",", "0", "]", ",", "\n", "[", "141", ",", "211", ",", "199", "]", ",", "\n", "[", "255", ",", "255", ",", "179", "]", ",", "\n", "[", "190", ",", "186", ",", "218", "]", ",", "\n", "[", "251", ",", "128", ",", "114", "]", ",", "\n", "[", "128", ",", "177", ",", "211", "]", ",", "\n", "[", "253", ",", "180", ",", "98", "]", ",", "\n", "[", "179", ",", "222", ",", "105", "]", ",", "\n", "[", "252", ",", "205", ",", "229", "]", ",", "\n", "[", "217", ",", "217", ",", "217", "]", ",", "\n", "[", "255", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "128", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "255", "]", ",", "\n", "[", "255", ",", "255", ",", "0", "]", ",", "\n", "[", "141", ",", "211", ",", "199", "]", ",", "\n", "[", "255", ",", "255", ",", "179", "]", ",", "\n", "[", "190", ",", "186", ",", "218", "]", ",", "\n", "[", "251", ",", "128", ",", "114", "]", ",", "\n", "[", "128", ",", "177", ",", "211", "]", ",", "\n", "[", "253", ",", "180", ",", "98", "]", ",", "\n", "[", "179", ",", "222", ",", "105", "]", ",", "\n", "[", "252", ",", "205", ",", "229", "]", ",", "\n", "[", "217", ",", "217", ",", "217", "]", ",", "\n", "[", "255", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "128", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "255", "]", ",", "\n", "[", "255", ",", "255", ",", "0", "]", ",", "\n", "[", "141", ",", "211", ",", "199", "]", ",", "\n", "[", "255", ",", "255", ",", "179", "]", ",", "\n", "[", "190", ",", "186", ",", "218", "]", ",", "\n", "[", "251", ",", "128", ",", "114", "]", ",", "\n", "[", "128", ",", "177", ",", "211", "]", ",", "\n", "[", "253", ",", "180", ",", "98", "]", ",", "\n", "[", "179", ",", "222", ",", "105", "]", ",", "\n", "[", "252", ",", "205", ",", "229", "]", ",", "\n", "[", "217", ",", "217", ",", "217", "]", "\n", "]", ")", "\n", "\n", "colors", "=", "CMAP", ".", "reshape", "(", "40", ",", "3", ",", "1", ",", "1", ")", ".", "expand", "(", "40", ",", "3", ",", "h", ",", "w", ")", "/", "255", "\n", "colors", "=", "colors", "[", ":", "max_set_size", "+", "1", "]", "# +1 is for background", "\n", "", "elif", "args", ".", "color_palette", "==", "'seaborn'", ":", "\n", "        ", "palette", "=", "seaborn", ".", "color_palette", "(", "palette", "=", "'hls'", ",", "n_colors", "=", "max_set_size", ")", "\n", "colors", "=", "torch", ".", "tensor", "(", "palette", ")", ".", "reshape", "(", "max_set_size", ",", "3", ",", "1", ",", "1", ")", ".", "expand", "(", "max_set_size", ",", "3", ",", "h", ",", "w", ")", "\n", "colors", "=", "torch", ".", "cat", "(", "[", "torch", ".", "zeros", "(", "1", ",", "3", ",", "h", ",", "w", ")", ",", "colors", "]", ",", "dim", "=", "0", ")", "# background should be black", "\n", "", "else", ":", "\n", "        ", "print", "(", "f'color palette {args.color_palette} not implemented'", ")", "\n", "exit", "(", "0", ")", "\n", "\n", "", "color_index", "=", "torch", ".", "argmax", "(", "expanded_activation_layers", ",", "0", ")", ".", "expand", "(", "n_images", ",", "3", ",", "h", ",", "w", ")", ".", "clone", "(", ")", ".", "cpu", "(", ")", "# n,nc,H,W", "\n", "\n", "if", "GT_masks_available", ":", "\n", "        ", "GT_segmentation", "=", "torch", ".", "gather", "(", "colors", ",", "0", ",", "GT_masks", ".", "repeat", "(", "1", ",", "3", ",", "1", ",", "1", ")", ".", "type", "(", "torch", ".", "int64", ")", ")", "\n", "\n", "", "segmentation", "=", "torch", ".", "gather", "(", "colors", ",", "0", ",", "color_index", ")", "# BS, 3, h, w", "\n", "\n", "if", "GT_masks_available", ":", "\n", "        ", "images", "=", "torch", ".", "cat", "(", "[", "input_images", ",", "\n", "GT_segmentation", ",", "\n", "rgb_images", ",", "\n", "segmentation", "\n", "]", ")", "\n", "", "else", ":", "\n", "        ", "images", "=", "torch", ".", "cat", "(", "[", "input_images", ",", "\n", "rgb_images", ",", "\n", "segmentation", "\n", "]", ")", "\n", "\n", "", "if", "training_mode", ":", "\n", "        ", "images", "=", "torch", ".", "cat", "(", "[", "images", ",", "foreground_masks", "]", ")", "\n", "netE", ".", "train", "(", ")", "\n", "netG", ".", "train", "(", ")", "\n", "", "else", ":", "\n", "        ", "images", "=", "torch", ".", "cat", "(", "[", "images", ",", "torch", ".", "ones", "(", "batch_size", ",", "3", ",", "h", ",", "w", ")", "]", ")", "\n", "\n", "", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.BrunoSauvalle_AST.None.MF_utils.setup_archive": [[185, 206], ["datetime.datetime.now", "now.isoformat.isoformat", "os.path.join", "os.makedirs", "dataset_path[].replace", "print"], "function", ["None"], ["", "def", "setup_archive", "(", "dataset_path", ")", ":", "\n", "\n", "#project_root = '/workspace/PycharmProjects/SCOD/MOS/MF'", "\n", "    ", "root_arch", "=", "args", ".", "training_images_output_directory", "\n", "now", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "now", "=", "now", ".", "isoformat", "(", ")", "\n", "outf", "=", "os", ".", "path", ".", "join", "(", "root_arch", ",", "now", "+", "dataset_path", "[", "-", "20", ":", "]", ".", "replace", "(", "'/'", ",", "''", ")", ")", "\n", "try", ":", "\n", "        ", "os", ".", "makedirs", "(", "outf", ")", "\n", "", "except", "OSError", ":", "\n", "        ", "print", "(", "f'warning : cannot create directory {outf}'", ")", "\n", "pass", "\n", "# autosave", "\n", "#shutil.copyfile(os.path.join(project_root, 'MF_models_encoder.py'), os.path.join(outf, 'MF_models_encoder-arch.py'))", "\n", "#shutil.copyfile(os.path.join(project_root, 'MF_models_renderer.py'), os.path.join(outf, 'MF_models_renderer-arch.py'))", "\n", "#shutil.copyfile(os.path.join(project_root, 'MF_data.py'), os.path.join(outf, 'MF_data-arch.py'))", "\n", "#shutil.copyfile(os.path.join(project_root, 'MF_train.py'), os.path.join(outf, 'MF_train-arch.py'))", "\n", "#shutil.copyfile(os.path.join(project_root, 'MF_utils.py'), os.path.join(outf, 'MF_utils-arch.py'))", "\n", "#shutil.copyfile(os.path.join(project_root, 'MF_config.py'), os.path.join(outf, 'MF_config-arch.py'))", "\n", "\n", "", "return", "outf", ",", "now", "\n", "\n"]], "home.repos.pwc.inspect_result.BrunoSauvalle_AST.None.MF_evaluate_on_test_dataset.RunningMean.__init__": [[16, 19], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "v", "=", "0.", "\n", "self", ".", "n", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.BrunoSauvalle_AST.None.MF_evaluate_on_test_dataset.RunningMean.update": [[20, 23], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "v", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "v", "+=", "v", "*", "n", "\n", "self", ".", "n", "+=", "n", "\n", "\n"]], "home.repos.pwc.inspect_result.BrunoSauvalle_AST.None.MF_evaluate_on_test_dataset.RunningMean.value": [[24, 29], ["float"], "methods", ["None"], ["", "def", "value", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "n", ":", "\n", "            ", "return", "self", ".", "v", "/", "(", "self", ".", "n", ")", "\n", "", "else", ":", "\n", "            ", "return", "float", "(", "'nan'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BrunoSauvalle_AST.None.MF_evaluate_on_test_dataset.RunningMean.__str__": [[30, 32], ["str", "MF_evaluate_on_test_dataset.RunningMean.value"], "methods", ["home.repos.pwc.inspect_result.BrunoSauvalle_AST.None.MF_evaluate_on_test_dataset.RunningMean.value"], ["", "", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "str", "(", "self", ".", "value", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BrunoSauvalle_AST.None.MF_evaluate_on_test_dataset.add_statistic": [[36, 47], ["isinstance", "stats[].update", "tags.items", "torch.mean.cpu().detach", "len", "torch.mean.item", "[].update", "torch.mean", "torch.mean", "torch.mean.cpu"], "function", ["home.repos.pwc.inspect_result.BrunoSauvalle_AST.None.MF_evaluate_on_test_dataset.RunningMean.update", "home.repos.pwc.inspect_result.BrunoSauvalle_AST.None.MF_evaluate_on_test_dataset.RunningMean.update"], ["def", "add_statistic", "(", "name", ",", "value", ",", "**", "tags", ")", ":", "\n", "    ", "n", "=", "1", "\n", "if", "isinstance", "(", "value", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "value", "=", "value", ".", "cpu", "(", ")", ".", "detach", "(", ")", "\n", "if", "len", "(", "value", ".", "shape", ")", ":", "\n", "            ", "n", "=", "value", ".", "shape", "[", "0", "]", "\n", "value", "=", "torch", ".", "mean", "(", "value", ")", "\n", "", "value", "=", "value", ".", "item", "(", ")", "\n", "", "stats", "[", "name", "]", ".", "update", "(", "value", ",", "n", ")", "\n", "for", "k", ",", "v", "in", "tags", ".", "items", "(", ")", ":", "\n", "        ", "tags", "[", "name", "]", "[", "k", "]", "[", "v", "]", ".", "update", "(", "value", ",", "n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BrunoSauvalle_AST.None.MF_evaluate_on_test_dataset.statistic": [[49, 55], ["sorted", "stats[].value", "rm.value", "[].items"], "function", ["home.repos.pwc.inspect_result.BrunoSauvalle_AST.None.MF_evaluate_on_test_dataset.RunningMean.value", "home.repos.pwc.inspect_result.BrunoSauvalle_AST.None.MF_evaluate_on_test_dataset.RunningMean.value"], ["", "", "def", "statistic", "(", "name", ",", "tag", "=", "None", ")", ":", "\n", "    ", "if", "tag", "is", "None", ":", "\n", "        ", "return", "stats", "[", "name", "]", ".", "value", "(", ")", "\n", "", "r", "=", "[", "(", "k", ",", "rm", ".", "value", "(", ")", ")", "for", "k", ",", "rm", "in", "tags", "[", "name", "]", "[", "tag", "]", ".", "items", "(", ")", "]", "\n", "r", "=", "sorted", "(", "r", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "\n", "return", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.BrunoSauvalle_AST.None.MF_data.Dual_Image_dataset.__init__": [[60, 120], ["os.path.exists", "os.path.exists", "natsort.natsorted", "natsort.natsorted", "len", "print", "print", "print", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.exists", "natsort.natsorted", "len", "os.path.join", "os.path.join", "os.listdir", "os.path.isfile", "os.listdir", "os.path.isfile", "len", "len", "os.path.join", "os.path.join", "os.listdir", "os.path.isfile", "len", "len", "os.path.join"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "input_dataset_path", ",", "background_dataset_path", ",", "GT_mask_dataset_path", "=", "None", ",", "input_nc", "=", "3", ",", "target_nc", "=", "3", ")", ":", "\n", "\n", "        ", "if", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "input_dataset_path", ",", "'input'", ")", ")", ":", "\n", "            ", "self", ".", "input_dir", "=", "os", ".", "path", ".", "join", "(", "input_dataset_path", ",", "'input'", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "input_dir", "=", "input_dataset_path", "\n", "\n", "", "if", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "background_dataset_path", ",", "'input'", ")", ")", ":", "\n", "            ", "self", ".", "background_dir", "=", "os", ".", "path", ".", "join", "(", "background_dataset_path", ",", "'input'", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "background_dir", "=", "background_dataset_path", "\n", "\n", "", "if", "GT_mask_dataset_path", "is", "not", "None", ":", "\n", "            ", "if", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "GT_mask_dataset_path", ",", "'input'", ")", ")", ":", "\n", "                ", "self", ".", "GT_mask_dir", "=", "os", ".", "path", ".", "join", "(", "GT_mask_dataset_path", ",", "'input'", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "GT_mask_dir", "=", "GT_mask_dataset_path", "\n", "\n", "", "", "input_image_names", "=", "[", "item", "for", "item", "in", "os", ".", "listdir", "(", "self", ".", "input_dir", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "os", ".", "path", ".", "join", "(", "self", ".", "input_dir", ",", "item", ")", ")", "]", "\n", "input_image_names", "=", "natsort", ".", "natsorted", "(", "input_image_names", ")", "\n", "\n", "background_image_names", "=", "[", "item", "for", "item", "in", "os", ".", "listdir", "(", "self", ".", "background_dir", ")", "if", "\n", "os", ".", "path", ".", "isfile", "(", "os", ".", "path", ".", "join", "(", "self", ".", "background_dir", ",", "item", ")", ")", "]", "\n", "background_image_names", "=", "natsort", ".", "natsorted", "(", "background_image_names", ")", "\n", "self", ".", "background_image_names", "=", "background_image_names", "\n", "\n", "if", "GT_mask_dataset_path", "==", "None", ":", "\n", "            ", "self", ".", "GT_available", "=", "False", "\n", "", "else", ":", "\n", "            ", "self", ".", "GT_available", "=", "True", "\n", "\n", "GT_mask_image_names", "=", "[", "item", "for", "item", "in", "os", ".", "listdir", "(", "self", ".", "GT_mask_dir", ")", "if", "\n", "os", ".", "path", ".", "isfile", "(", "os", ".", "path", ".", "join", "(", "self", ".", "GT_mask_dir", ",", "item", ")", ")", "]", "\n", "GT_mask_image_names", "=", "natsort", ".", "natsorted", "(", "GT_mask_image_names", ")", "\n", "self", ".", "GT_mask_image_names", "=", "GT_mask_image_names", "\n", "\n", "", "self", ".", "dataset_length", "=", "len", "(", "input_image_names", ")", "\n", "assert", "self", ".", "dataset_length", ">", "1", ",", "'input dataset is empty'", "\n", "self", ".", "input_image_names", "=", "input_image_names", "\n", "\n", "assert", "len", "(", "background_image_names", ")", "==", "self", ".", "dataset_length", ",", "f'error input dataset has length {self.dataset_length} but background dataset lenght is {len(background_image_names)}'", "\n", "\n", "if", "self", ".", "GT_available", ":", "\n", "            ", "assert", "len", "(", "\n", "GT_mask_image_names", ")", "==", "self", ".", "dataset_length", ",", "f'error input dataset has length {self.dataset_length} but GT mask dataset lenght is {len(GT_mask_image_names)}'", "\n", "\n", "", "print", "(", "f'dataset lenght {len(background_image_names)}'", ")", "\n", "self", ".", "input_nc", "=", "input_nc", "\n", "self", ".", "target_nc", "=", "target_nc", "\n", "\n", "first_input_image", ",", "first_target_image", ",", "first_GT_mask_image", "=", "self", "[", "0", "]", "\n", "\n", "input_nc", ",", "self", ".", "image_height", ",", "self", ".", "image_width", "=", "first_input_image", ".", "shape", "\n", "target_nc", ",", "target_image_height", ",", "target_image_width", "=", "first_target_image", ".", "shape", "\n", "\n", "assert", "target_image_height", "==", "self", ".", "image_height", "\n", "assert", "target_image_width", "==", "self", ".", "image_width", "\n", "print", "(", "f'finput dataset has {self.input_nc} channels, target dataset has {self.target_nc} channels'", ")", "\n", "print", "(", "f'dataset initialized  w = {self.image_width},h = {self.image_height} number of frames {self.dataset_length}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BrunoSauvalle_AST.None.MF_data.Dual_Image_dataset.__len__": [[121, 123], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "dataset_length", "\n", "\n"]], "home.repos.pwc.inspect_result.BrunoSauvalle_AST.None.MF_data.Dual_Image_dataset.__getitem__": [[124, 146], ["os.path.join", "cv2.imread", "cv2.cvtColor", "numpy.asarray", "numpy.transpose", "os.path.join", "cv2.imread", "cv2.cvtColor", "numpy.asarray", "numpy.transpose", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "os.path.join", "PIL.Image.open", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.array"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "            ", "input_image_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "input_dir", ",", "self", ".", "input_image_names", "[", "idx", "]", ")", "\n", "input_opencv_image", "=", "cv2", ".", "imread", "(", "input_image_path", ",", "cv2", ".", "IMREAD_UNCHANGED", ")", "# 0-255 HWC BGR", "\n", "input_opencv_image", "=", "cv2", ".", "cvtColor", "(", "input_opencv_image", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "input_np_image", "=", "np", ".", "asarray", "(", "input_opencv_image", ")", "\n", "input_np_image", "=", "np", ".", "transpose", "(", "input_np_image", ",", "(", "2", ",", "0", ",", "1", ")", ")", "# 0-255 CHW RGB", "\n", "input_tensor_image", "=", "torch", ".", "from_numpy", "(", "input_np_image", ")", ".", "type", "(", "torch", ".", "FloatTensor", ")", "/", "255", "# RGBA", "\n", "\n", "background_image_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "background_dir", ",", "self", ".", "background_image_names", "[", "idx", "]", ")", "\n", "background_opencv_image", "=", "cv2", ".", "imread", "(", "background_image_path", ",", "cv2", ".", "IMREAD_UNCHANGED", ")", "# 0-255 HWC BGR", "\n", "background_rgb_image", "=", "cv2", ".", "cvtColor", "(", "background_opencv_image", ",", "cv2", ".", "COLOR_BGRA2RGBA", ")", "\n", "background_np_image", "=", "np", ".", "asarray", "(", "background_rgb_image", ")", "\n", "background_np_image", "=", "np", ".", "transpose", "(", "background_np_image", ",", "(", "2", ",", "0", ",", "1", ")", ")", "# 0-255 CHW RGB or RGBA", "\n", "background_tensor_image", "=", "torch", ".", "from_numpy", "(", "background_np_image", ")", ".", "type", "(", "torch", ".", "FloatTensor", ")", "/", "255", "\n", "\n", "if", "self", ".", "GT_available", ":", "\n", "                ", "GT_mask_image_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "GT_mask_dir", ",", "self", ".", "GT_mask_image_names", "[", "idx", "]", ")", "\n", "GT_mask_opencv_image", "=", "Image", ".", "open", "(", "GT_mask_image_path", ")", "\n", "GT_mask_tensor_image", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "GT_mask_opencv_image", ")", ")", "[", "None", "]", "\n", "", "else", ":", "\n", "                ", "GT_mask_tensor_image", "=", "0", "\n", "", "return", "input_tensor_image", ",", "background_tensor_image", ",", "GT_mask_tensor_image", "# RGB, RGBA, 2D range 0-1", "\n", "\n"]], "home.repos.pwc.inspect_result.BrunoSauvalle_AST.None.MF_data.get_loader": [[13, 21], ["torch.utils.data.DataLoader", "torch.utils.data.DataLoader"], "function", ["None"], ["def", "get_loader", "(", "dataset", ",", "batch_size", ",", "num_workers", "=", "8", ",", "shuffle", "=", "True", ")", ":", "\n", "    ", "return", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset", ",", "\n", "shuffle", "=", "shuffle", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "pin_memory", "=", "True", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "drop_last", "=", "True", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.BrunoSauvalle_AST.None.MF_data.get_train_dataset_and_dataloader": [[148, 162], ["print", "MF_data.Dual_Image_dataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader"], "function", ["None"], ["", "", "def", "get_train_dataset_and_dataloader", "(", ")", ":", "\n", "\n", "        ", "print", "(", "\n", "f'creating train dataset using directories {args.train_dataset_input_path},{args.train_dataset_background_path},{args.train_dataset_GT_mask_path}'", ")", "\n", "\n", "train_dataset", "=", "Dual_Image_dataset", "(", "args", ".", "train_dataset_input_path", ",", "args", ".", "train_dataset_background_path", ",", "\n", "args", ".", "train_dataset_GT_mask_path", ")", "\n", "\n", "train_dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "train_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "num_workers", "=", "args", ".", "workers", ",", "\n", "drop_last", "=", "True", ",", "pin_memory", "=", "True", ",", "\n", "persistent_workers", "=", "True", ")", "\n", "\n", "return", "train_dataset", ",", "train_dataloader", "\n", "\n"]], "home.repos.pwc.inspect_result.BrunoSauvalle_AST.None.MF_data.get_test_dataset_and_dataloader": [[164, 176], ["print", "MF_data.Dual_Image_dataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader"], "function", ["None"], ["", "def", "get_test_dataset_and_dataloader", "(", "batch_size", "=", "args", ".", "batch_size", ")", ":", "\n", "    ", "print", "(", "\n", "f'creating test dataset using directories {args.test_dataset_input_path},{args.test_dataset_background_path},{args.test_dataset_GT_mask_path}'", ")", "\n", "\n", "test_dataset", "=", "Dual_Image_dataset", "(", "args", ".", "test_dataset_input_path", ",", "args", ".", "test_dataset_background_path", ",", "\n", "args", ".", "test_dataset_GT_mask_path", ")", "\n", "test_dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "test_dataset", ",", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "num_workers", "=", "args", ".", "workers", ",", "\n", "drop_last", "=", "True", ",", "pin_memory", "=", "True", ",", "\n", "persistent_workers", "=", "True", ")", "\n", "\n", "return", "test_dataset", ",", "test_dataloader", "\n", "\n"]], "home.repos.pwc.inspect_result.BrunoSauvalle_AST.None.MF_models_encoder.Downsample_and_Conv.__init__": [[40, 50], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.CELU", "torch.CELU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.CELU", "torch.CELU"], "methods", ["home.repos.pwc.inspect_result.BrunoSauvalle_AST.background.dataset.CLEVRTEX.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bloc1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ",", "\n", "nn", ".", "CELU", "(", ")", ")", "\n", "self", ".", "bloc2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "out_channels", ",", "out_channels", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ",", "\n", "nn", ".", "CELU", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BrunoSauvalle_AST.None.MF_models_encoder.Downsample_and_Conv.forward": [[51, 55], ["MF_models_encoder.Downsample_and_Conv.bloc1", "MF_models_encoder.Downsample_and_Conv.bloc2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "bloc1", "(", "x", ")", "\n", "x", "=", "self", ".", "bloc2", "(", "x", ")", "+", "x", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.BrunoSauvalle_AST.None.MF_models_encoder.Conv_and_Upsample.__init__": [[58, 68], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.CELU", "torch.CELU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.CELU", "torch.CELU"], "methods", ["home.repos.pwc.inspect_result.BrunoSauvalle_AST.background.dataset.CLEVRTEX.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "output_padding", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bloc1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "in_channels", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "in_channels", ")", ",", "\n", "nn", ".", "CELU", "(", ")", ")", "\n", "self", ".", "bloc2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "in_channels", ",", "out_channels", ",", "4", ",", "2", ",", "1", ",", "output_padding", "=", "output_padding", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ",", "\n", "nn", ".", "CELU", "(", ")", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.BrunoSauvalle_AST.None.MF_models_encoder.Conv_and_Upsample.forward": [[68, 72], ["MF_models_encoder.Conv_and_Upsample.bloc2", "MF_models_encoder.Conv_and_Upsample.bloc1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "bloc1", "(", "x", ")", "+", "x", "\n", "x", "=", "self", ".", "bloc2", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.BrunoSauvalle_AST.None.MF_models_encoder.Unet.__init__": [[75, 114], ["torch.Module.__init__", "print", "MF_models_encoder.compute_output_paddings", "print", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.CELU", "torch.CELU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.CELU", "torch.CELU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.CELU", "torch.CELU", "MF_models_encoder.Downsample_and_Conv", "MF_models_encoder.Conv_and_Upsample", "range", "range"], "methods", ["home.repos.pwc.inspect_result.BrunoSauvalle_AST.background.dataset.CLEVRTEX.__init__", "home.repos.pwc.inspect_result.BrunoSauvalle_AST.None.MF_models_encoder.compute_output_paddings"], ["    ", "def", "__init__", "(", "self", ",", "image_height", ",", "image_width", ",", "nch_in", ",", "nch_out", ")", ":", "\n", "        ", "super", "(", "Unet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "nch_out", "=", "nch_out", "\n", "\n", "if", "image_height", "<", "200", "and", "image_width", "<", "200", ":", "\n", "            ", "nlayers", "=", "5", "\n", "nch", "=", "[", "80", ",", "128", ",", "192", ",", "256", ",", "256", ",", "256", "]", "\n", "", "else", ":", "\n", "            ", "nlayers", "=", "6", "\n", "nch", "=", "[", "48", ",", "64", ",", "96", ",", "128", ",", "128", ",", "256", ",", "256", "]", "\n", "", "print", "(", "f'using Unet with {nlayers} layers'", ")", "\n", "\n", "self", ".", "nlayers", "=", "nlayers", "\n", "\n", "output_paddings", "=", "compute_output_paddings", "(", "image_height", ",", "image_width", ",", "nlayers", ")", "\n", "print", "(", "f'output_paddings = {output_paddings}'", ")", "\n", "\n", "self", ".", "first_feature_map", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "nch_in", ",", "nch", "[", "0", "]", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "nch", "[", "0", "]", ")", ",", "\n", "nn", ".", "CELU", "(", ")", ")", "\n", "\n", "self", ".", "downsample_blocks", "=", "nn", ".", "ModuleList", "(", "[", "Downsample_and_Conv", "(", "nch", "[", "i", "]", ",", "nch", "[", "i", "+", "1", "]", ")", "for", "i", "in", "range", "(", "nlayers", ")", "]", ")", "\n", "\n", "self", ".", "center_block", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "nch", "[", "nlayers", "]", ",", "nch", "[", "nlayers", "]", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "nch", "[", "nlayers", "]", ")", ",", "\n", "nn", ".", "CELU", "(", ")", ")", "\n", "\n", "self", ".", "upsample_blocks", "=", "nn", ".", "ModuleList", "(", "[", "Conv_and_Upsample", "(", "2", "*", "nch", "[", "i", "+", "1", "]", ",", "nch", "[", "i", "]", ",", "output_paddings", "[", "i", "]", ")", "\n", "for", "i", "in", "range", "(", "nlayers", ")", "]", ")", "\n", "\n", "\n", "self", ".", "last_skip_layer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "2", "*", "nch", "[", "0", "]", ",", "nch_out", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "nch_out", ")", ",", "\n", "nn", ".", "CELU", "(", ")", ")", "\n", "self", ".", "last_residual_layer", "=", "nn", ".", "Conv2d", "(", "nch_out", ",", "nch_out", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv1x1", "=", "nn", ".", "Conv2d", "(", "nch_out", ",", "nch_out", ",", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BrunoSauvalle_AST.None.MF_models_encoder.Unet.forward": [[115, 133], ["MF_models_encoder.Unet.first_feature_map", "feature_maps.append", "range", "MF_models_encoder.Unet.center_block", "reversed", "MF_models_encoder.Unet.last_skip_layer", "MF_models_encoder.Unet.conv1x1", "feature_maps.append", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "MF_models_encoder.Unet.last_residual_layer", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "            ", "feature_maps", "=", "[", "]", "\n", "x", "=", "self", ".", "first_feature_map", "(", "x", ")", "\n", "feature_maps", ".", "append", "(", "x", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "nlayers", ")", ":", "\n", "                ", "x", "=", "self", ".", "downsample_blocks", "[", "i", "]", "(", "x", ")", "\n", "feature_maps", ".", "append", "(", "x", ")", "\n", "", "x", "=", "self", ".", "center_block", "(", "x", ")", "\n", "\n", "for", "i", "in", "reversed", "(", "range", "(", "0", ",", "self", ".", "nlayers", ")", ")", ":", "\n", "                ", "x", "=", "self", ".", "upsample_blocks", "[", "i", "]", "(", "torch", ".", "cat", "(", "[", "x", ",", "feature_maps", "[", "i", "+", "1", "]", "]", ",", "dim", "=", "1", ")", ")", "\n", "\n", "", "x", "=", "self", ".", "last_skip_layer", "(", "torch", ".", "cat", "(", "[", "x", ",", "feature_maps", "[", "0", "]", "]", ",", "dim", "=", "1", ")", ")", "\n", "x", "=", "self", ".", "last_residual_layer", "(", "x", ")", "+", "x", "\n", "x", "=", "self", ".", "conv1x1", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.BrunoSauvalle_AST.None.MF_models_encoder.Encoder.__init__": [[136, 168], ["torch.Module.__init__", "MF_models_encoder.Unet", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "torch.Parameter", "torch.Parameter", "torch.Linear", "torch.Linear", "torch.TransformerEncoderLayer", "torch.TransformerEncoderLayer", "torch.TransformerEncoder", "torch.TransformerEncoder", "torch.Linear", "torch.Linear", "print", "range", "torch.zeros.reshape", "torch.zeros.reshape"], "methods", ["home.repos.pwc.inspect_result.BrunoSauvalle_AST.background.dataset.CLEVRTEX.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "Encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "args", "=", "args", "\n", "h", "=", "args", ".", "image_height", "\n", "w", "=", "args", ".", "image_width", "\n", "\n", "self", ".", "scaling_dim", "=", "1", "if", "args", ".", "isotropic_scaling", "else", "2", "\n", "\n", "feature_and_attention_map_dim", "=", "self", ".", "args", ".", "max_set_size", "+", "self", ".", "args", ".", "z_what_dim", "+", "1", "+", "self", ".", "scaling_dim", "# +1 is for activation", "\n", "\n", "self", ".", "feature_and_attention_map_generator", "=", "Unet", "(", "args", ".", "image_height", ",", "args", ".", "image_width", ",", "3", ",", "feature_and_attention_map_dim", ")", "\n", "\n", "# position encoding for position latents, range normalized on [-1,1]", "\n", "position_map", "=", "torch", ".", "zeros", "(", "(", "2", ",", "h", ",", "w", ")", ")", "\n", "for", "x", "in", "range", "(", "w", ")", ":", "\n", "            ", "for", "y", "in", "range", "(", "h", ")", ":", "\n", "                ", "position_map", "[", "0", ",", "y", ",", "x", "]", "=", "2", "*", "(", "x", "/", "(", "w", "-", "1", ")", "-", "0.5", ")", "\n", "position_map", "[", "1", ",", "y", ",", "x", "]", "=", "2", "*", "(", "y", "/", "(", "h", "-", "1", ")", "-", "0.5", ")", "\n", "", "", "self", ".", "position_map", "=", "nn", ".", "Parameter", "(", "position_map", ".", "reshape", "(", "1", ",", "2", ",", "h", ",", "w", ")", ",", "requires_grad", "=", "False", ")", "\n", "\n", "self", ".", "feature_vector_embedding", "=", "nn", ".", "Linear", "(", "self", ".", "args", ".", "z_what_dim", "+", "3", "+", "self", ".", "scaling_dim", ",", "args", ".", "transformer_dim", ")", "# K,x,y,alpha, scale", "\n", "\n", "transformer_encoder_layer", "=", "nn", ".", "TransformerEncoderLayer", "(", "d_model", "=", "args", ".", "transformer_dim", ",", "nhead", "=", "args", ".", "transformer_nhead", ",", "\n", "dim_feedforward", "=", "args", ".", "transformer_dim_feedforward", "\n", ")", "\n", "\n", "self", ".", "transformer", "=", "nn", ".", "TransformerEncoder", "(", "transformer_encoder_layer", ",", "num_layers", "=", "args", ".", "transformer_nlayers", ")", "\n", "\n", "self", ".", "latents_projection", "=", "nn", ".", "Linear", "(", "args", ".", "transformer_dim", ",", "self", ".", "args", ".", "z_what_dim", "+", "3", "+", "self", ".", "scaling_dim", ")", "# 3 is for  x,y,  activation", "\n", "\n", "print", "(", "'encoder network created'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BrunoSauvalle_AST.None.MF_models_encoder.Encoder.forward": [[169, 202], ["MF_models_encoder.Encoder.feature_and_attention_map_generator", "torch.softmax().reshape", "torch.softmax().reshape", "torch.softmax().reshape", "torch.softmax().reshape", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.unsqueeze().expand", "torch.cat.unsqueeze().expand", "torch.softmax().reshape.unsqueeze().expand", "torch.softmax().reshape.unsqueeze().expand", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "position_and_feature_latents.permute.permute.permute", "MF_models_encoder.Encoder.feature_vector_embedding", "MF_models_encoder.Encoder.latents_projection", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "MF_models_encoder.Encoder.transformer", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "MF_models_encoder.Encoder.position_map.expand", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.softmax().reshape.unsqueeze", "torch.softmax().reshape.unsqueeze", "attention_logits.reshape"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_images", ")", ":", "\n", "\n", "# input shape  is N3HW", "\n", "            ", "n", "=", "input_images", ".", "shape", "[", "0", "]", "\n", "k", "=", "self", ".", "args", ".", "max_set_size", "\n", "h", "=", "self", ".", "args", ".", "image_height", "\n", "w", "=", "self", ".", "args", ".", "image_width", "\n", "\n", "\n", "feature_and_attention_map", "=", "self", ".", "feature_and_attention_map_generator", "(", "input_images", ")", "\n", "\n", "attention_logits", "=", "feature_and_attention_map", "[", ":", ",", ":", "k", ",", ":", ",", ":", "]", "\n", "\n", "attention_weights", "=", "torch", ".", "softmax", "(", "attention_logits", ".", "reshape", "(", "n", ",", "k", ",", "h", "*", "w", ")", ",", "dim", "=", "2", ")", ".", "reshape", "(", "n", ",", "k", ",", "h", ",", "w", ")", "\n", "\n", "position_and_feature_maps", "=", "torch", ".", "cat", "(", "[", "self", ".", "position_map", ".", "expand", "(", "n", ",", "-", "1", ",", "-", "1", ",", "-", "1", ")", ",", "feature_and_attention_map", "[", ":", ",", "k", ":", ",", ":", ",", ":", "]", "]", ",", "dim", "=", "1", ")", "# BS, 5+f, h, w", "\n", "\n", "expanded_position_and_feature_maps", "=", "position_and_feature_maps", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "-", "1", ",", "k", ",", "-", "1", ",", "-", "1", ",", "-", "1", ")", "\n", "\n", "expanded_attention_weights", "=", "attention_weights", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "self", ".", "args", ".", "z_what_dim", "+", "3", "+", "self", ".", "scaling_dim", ",", "-", "1", ",", "-", "1", ")", "\n", "\n", "position_and_feature_latents", "=", "torch", ".", "sum", "(", "expanded_position_and_feature_maps", "*", "expanded_attention_weights", ",", "dim", "=", "(", "3", ",", "4", ")", ")", "#  batch_size,max_set_size,feature_dim+4", "\n", "\n", "position_and_feature_latents", "=", "position_and_feature_latents", ".", "permute", "(", "1", ",", "0", ",", "2", ")", "# K, N, f+5", "\n", "\n", "# latents update with transformer encoder", "\n", "\n", "transformer_input", "=", "self", ".", "feature_vector_embedding", "(", "position_and_feature_latents", ")", "\n", "updated_position_and_feature_latents", "=", "self", ".", "latents_projection", "(", "self", ".", "transformer", "(", "transformer_input", ")", ")", "\n", "\n", "feature_and_attention_maps", "=", "torch", ".", "cat", "(", "[", "attention_weights", ",", "position_and_feature_maps", "]", ",", "dim", "=", "1", ")", "\n", "\n", "return", "updated_position_and_feature_latents", ",", "feature_and_attention_maps", "\n", "# shape of latents : max_set_size, batch_size, feature_dim+4/5 # 2 channels positions+ 1/2 channel scale + 1 activation + featuure dim channels", "\n"]], "home.repos.pwc.inspect_result.BrunoSauvalle_AST.None.MF_models_encoder.compute_output_paddings": [[6, 35], ["range", "output_paddings.append"], "function", ["None"], ["def", "compute_output_paddings", "(", "image_height", ",", "image_width", ",", "n_layers", ")", ":", "\n", "\n", "    ", "output_paddings", "=", "[", "]", "# output paddings value for transpose convolutions", "\n", "\n", "current_w", "=", "image_width", "\n", "current_h", "=", "image_height", "\n", "\n", "for", "i", "in", "range", "(", "n_layers", ")", ":", "\n", "\n", "        ", "pad_w", "=", "1", "\n", "pad_h", "=", "1", "\n", "str_w", "=", "2", "\n", "str_h", "=", "2", "\n", "ker_w", "=", "4", "\n", "ker_h", "=", "4", "\n", "\n", "new_w", "=", "1", "+", "(", "current_w", "+", "2", "*", "pad_w", "-", "ker_w", ")", "//", "str_w", "\n", "output_pad_w", "=", "(", "current_w", "+", "2", "*", "pad_w", "-", "ker_w", ")", "%", "str_w", "\n", "\n", "new_h", "=", "1", "+", "(", "current_h", "+", "2", "*", "pad_h", "-", "ker_h", ")", "//", "str_h", "\n", "output_pad_h", "=", "(", "current_h", "+", "2", "*", "pad_h", "-", "ker_h", ")", "%", "str_h", "\n", "\n", "output_paddings", ".", "append", "(", "(", "output_pad_h", ",", "output_pad_w", ")", ")", "\n", "\n", "current_h", "=", "new_h", "\n", "current_w", "=", "new_w", "\n", "\n", "\n", "", "return", "output_paddings", "\n", "\n"]], "home.repos.pwc.inspect_result.BrunoSauvalle_AST.None.MF_models_renderer.Renderer.__init__": [[63, 75], ["torch.Module.__init__", "MF_models_renderer.get_object_generator", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "print", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.BrunoSauvalle_AST.background.dataset.CLEVRTEX.__init__", "home.repos.pwc.inspect_result.BrunoSauvalle_AST.None.MF_models_renderer.get_object_generator"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "glimpse_generator", "=", "get_object_generator", "(", ")", "\n", "self", ".", "scaling_dim", "=", "1", "if", "args", ".", "isotropic_scaling", "else", "2", "\n", "self", ".", "background_activation_logit", "=", "nn", ".", "Parameter", "(", "args", ".", "initial_background_activation_logit", "*", "torch", ".", "ones", "(", "1", ",", "1", ")", ",", "requires_grad", "=", "True", ")", "\n", "if", "args", ".", "variable_background_activation", ":", "\n", "            ", "self", ".", "local_background_activation_logit", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "1", ",", "1", ",", "args", ".", "image_height", ",", "args", ".", "image_width", ")", ",", "requires_grad", "=", "True", ")", "\n", "", "self", ".", "background_mask_logit", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "1", ",", "1", ",", "1", ",", "1", ")", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "background_mask", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "1", ",", "1", ",", "1", ",", "1", ",", "1", ")", ",", "requires_grad", "=", "False", ")", "\n", "print", "(", "'Generator created'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BrunoSauvalle_AST.None.MF_models_renderer.Renderer.forward": [[76, 138], ["latents.reshape.reshape.reshape", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "MF_models_renderer.Renderer.glimpse_generator", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.nn.functional.affine_grid", "torch.nn.functional.affine_grid", "torch.nn.functional.affine_grid", "torch.nn.functional.affine_grid", "torch.nn.functional.affine_grid", "torch.nn.functional.affine_grid", "torch.nn.functional.affine_grid", "torch.nn.functional.affine_grid", "torch.nn.functional.affine_grid", "torch.nn.functional.grid_sample().reshape", "torch.nn.functional.grid_sample().reshape", "torch.nn.functional.grid_sample().reshape", "torch.nn.functional.grid_sample().reshape", "torch.nn.functional.grid_sample().reshape", "torch.nn.functional.grid_sample().reshape", "torch.nn.functional.grid_sample().reshape", "torch.nn.functional.grid_sample().reshape", "torch.nn.functional.grid_sample().reshape", "torch.exp().reshape().expand", "torch.exp().reshape().expand", "torch.exp().reshape().expand", "torch.exp().reshape().expand", "torch.exp().reshape().expand", "torch.exp().reshape().expand", "torch.exp().reshape().expand", "torch.exp().reshape().expand", "torch.exp().reshape().expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.reciprocal().expand", "torch.reciprocal().expand", "torch.reciprocal().expand", "torch.reciprocal().expand", "torch.reciprocal().expand", "torch.reciprocal().expand", "torch.reciprocal().expand", "torch.reciprocal().expand", "torch.reciprocal().expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "z_whats.reshape", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "warped_rgba_images[].unsqueeze", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "normalized_weights.expand", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.nn.functional.grid_sample", "torch.nn.functional.grid_sample", "torch.nn.functional.grid_sample", "torch.nn.functional.grid_sample", "torch.nn.functional.grid_sample", "torch.nn.functional.grid_sample", "torch.nn.functional.grid_sample", "torch.nn.functional.grid_sample", "torch.nn.functional.grid_sample", "torch.exp().reshape", "torch.exp().reshape", "torch.exp().reshape", "torch.exp().reshape", "torch.exp().reshape", "torch.exp().reshape", "torch.exp().reshape", "torch.exp().reshape", "torch.exp().reshape", "MF_models_renderer.Renderer.background_activation_logit.reshape().expand", "MF_models_renderer.Renderer.background_mask.expand", "torch.reciprocal", "torch.reciprocal", "torch.reciprocal", "torch.reciprocal", "torch.reciprocal", "torch.reciprocal", "torch.reciprocal", "torch.reciprocal", "torch.reciprocal", "backgrounds.reshape", "MF_models_renderer.Renderer.background_activation_logit.reshape().expand", "MF_models_renderer.Renderer.local_background_activation_logit.expand", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "MF_models_renderer.Renderer.background_activation_logit.reshape", "MF_models_renderer.Renderer.background_activation_logit.reshape"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "latents", ",", "backgrounds", ")", ":", "\n", "# computes scene using reconstructed background and obkect latents", "\n", "# latents shape should be batch_size x number of objects in batch x 2+(1 or 2)+1+z_what_dim", "\n", "# latents structure : 2d : position latents", "\n", "#                     1d or 2d : scaling factor logit", "\n", "#                     1d  : activation logit", "\n", "#                     z_what_dim d : z_what", "\n", "# backgrounds shape should be batch_size x 3 x h x w", "\n", "\n", "        ", "args", "=", "self", ".", "args", "\n", "\n", "h", "=", "args", ".", "image_height", "\n", "w", "=", "args", ".", "image_width", "\n", "z_what_dim", "=", "args", ".", "z_what_dim", "\n", "k", "=", "args", ".", "max_set_size", "\n", "n", "=", "latents", ".", "shape", "[", "1", "]", "\n", "\n", "query_activation_logit", "=", "latents", "[", ":", ",", ":", ",", "4", "]", "\n", "\n", "n_objects", "=", "n", "*", "k", "\n", "latents", "=", "latents", ".", "reshape", "(", "n_objects", ",", "z_what_dim", "+", "3", "+", "self", ".", "scaling_dim", ")", "\n", "position_latents", "=", "torch", ".", "clamp", "(", "latents", "[", ":", ",", "0", ":", "2", "]", ",", "min", "=", "-", "1", ",", "max", "=", "1", ")", "\n", "scaling_factors", "=", "args", ".", "min_scaling_factor", "+", "(", "args", ".", "max_scaling_factor", "-", "args", ".", "min_scaling_factor", ")", "*", "torch", ".", "sigmoid", "(", "latents", "[", ":", ",", "2", ":", "2", "+", "self", ".", "scaling_dim", "]", ")", "\n", "z_whats", "=", "latents", "[", ":", ",", "3", "+", "self", ".", "scaling_dim", ":", "]", "\n", "\n", "# computation of object images  using the position latents", "\n", "object_images_with_masks", "=", "self", ".", "glimpse_generator", "(", "z_whats", ".", "reshape", "(", "n_objects", ",", "z_what_dim", ",", "1", ",", "1", ")", ")", "\n", "\n", "# preparation of affine matrix theta for spatial transformer network", "\n", "theta", "=", "torch", ".", "zeros", "(", "n_objects", ",", "2", ",", "3", ",", "device", "=", "self", ".", "args", ".", "device", ")", "\n", "theta", "[", ":", ",", "0", ",", "0", "]", "=", "scaling_factors", "[", ":", ",", "0", "]", "\n", "theta", "[", ":", ",", "1", ",", "1", "]", "=", "scaling_factors", "[", ":", ",", "0", "]", "if", "args", ".", "isotropic_scaling", "else", "scaling_factors", "[", ":", ",", "1", "]", "\n", "theta", "[", ":", ",", ":", ",", "2", "]", "=", "-", "position_latents", "*", "scaling_factors", "\n", "\n", "#### computation of warped images using STN", "\n", "grid", "=", "torch", ".", "nn", ".", "functional", ".", "affine_grid", "(", "theta", ",", "torch", ".", "Size", "(", "(", "n_objects", ",", "4", ",", "h", ",", "w", ")", ")", ")", "\n", "warped_rgba_images", "=", "torch", ".", "nn", ".", "functional", ".", "grid_sample", "(", "object_images_with_masks", ",", "grid", ")", ".", "reshape", "(", "k", ",", "n", ",", "4", ",", "h", ",", "w", ")", "\n", "\n", "#### computation of complete images", "\n", "warped_rgb_images", "=", "warped_rgba_images", "[", ":", ",", ":", ",", ":", "3", ",", ":", ",", ":", "]", "\n", "warped_masks", "=", "warped_rgba_images", "[", ":", ",", ":", ",", "3", ",", ":", ",", ":", "]", ".", "unsqueeze", "(", "2", ")", "+", "args", ".", "eps_mask", "\n", "\n", "query_activations", "=", "torch", ".", "exp", "(", "query_activation_logit", ")", ".", "reshape", "(", "k", ",", "n", ",", "1", ",", "1", ",", "1", ")", ".", "expand", "(", "k", ",", "n", ",", "\n", "1", ",", "h", ",", "w", ")", "\n", "if", "args", ".", "variable_background_activation", ":", "\n", "            ", "background_activations", "=", "torch", ".", "exp", "(", "self", ".", "background_activation_logit", ".", "reshape", "(", "1", ",", "1", ",", "1", ",", "1", ",", "1", ")", ".", "expand", "(", "1", ",", "n", ",", "1", ",", "h", ",", "w", ")", "+", "self", ".", "local_background_activation_logit", ".", "expand", "(", "1", ",", "n", ",", "1", ",", "h", ",", "w", ")", ")", "\n", "", "else", ":", "\n", "            ", "background_activations", "=", "torch", ".", "exp", "(", "\n", "self", ".", "background_activation_logit", ".", "reshape", "(", "1", ",", "1", ",", "1", ",", "1", ",", "1", ")", ".", "expand", "(", "1", ",", "n", ",", "1", ",", "h", ",", "w", ")", ")", "\n", "\n", "", "activations", "=", "torch", ".", "cat", "(", "[", "background_activations", ",", "query_activations", "]", ",", "dim", "=", "0", ")", "\n", "\n", "warped_masks_including_background", "=", "torch", ".", "cat", "(", "[", "self", ".", "background_mask", ".", "expand", "(", "1", ",", "n", ",", "1", ",", "h", ",", "w", ")", ",", "warped_masks", "]", ",", "dim", "=", "0", ")", "# K+1, BS, 1, h, w", "\n", "weights", "=", "activations", "*", "warped_masks_including_background", "# K+1, BS, 1, h, w", "\n", "inverse_normalization_factor", "=", "torch", ".", "reciprocal", "(", "torch", ".", "sum", "(", "weights", ",", "dim", "=", "0", ",", "keepdim", "=", "True", ")", ")", ".", "expand", "(", "k", "+", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ")", "\n", "normalized_weights", "=", "weights", "*", "inverse_normalization_factor", "\n", "foreground_masks", "=", "1", "-", "normalized_weights", "[", "0", "]", "# the complement of background mask is foreground mask", "\n", "image_layers_including_background", "=", "torch", ".", "cat", "(", "[", "backgrounds", ".", "reshape", "(", "1", ",", "n", ",", "3", ",", "h", ",", "w", ")", ",", "warped_rgb_images", "]", ",", "dim", "=", "0", ")", "# K+1, BS,3,H,W", "\n", "weighted_image_layers", "=", "image_layers_including_background", "*", "normalized_weights", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "3", ",", "-", "1", ",", "-", "1", ")", "\n", "reconstructed_images", "=", "torch", ".", "sum", "(", "weighted_image_layers", ",", "dim", "=", "0", ")", "# BS,3,H,W", "\n", "\n", "return", "reconstructed_images", ",", "foreground_masks", ",", "weighted_image_layers", ",", "normalized_weights", "\n", "#  batch_size,nc_output,h,w ;  max_set_size, batch_size,nc_output,h,w ;", "\n"]], "home.repos.pwc.inspect_result.BrunoSauvalle_AST.None.MF_models_renderer.get_object_generator": [[11, 57], ["print", "torch.Sequential", "print", "torch.Sequential", "torch.ConvTranspose2d", "torch.GroupNorm", "torch.CELU", "torch.ConvTranspose2d", "torch.GroupNorm", "torch.CELU", "torch.ConvTranspose2d", "torch.GroupNorm", "torch.CELU", "torch.ConvTranspose2d", "torch.GroupNorm", "torch.CELU", "torch.ConvTranspose2d", "torch.Sigmoid", "torch.ConvTranspose2d", "torch.GroupNorm", "torch.CELU", "torch.ConvTranspose2d", "torch.GroupNorm", "torch.CELU", "torch.ConvTranspose2d", "torch.GroupNorm", "torch.CELU", "torch.ConvTranspose2d", "torch.GroupNorm", "torch.CELU", "torch.ConvTranspose2d", "torch.GroupNorm", "torch.CELU", "torch.ConvTranspose2d", "torch.Sigmoid"], "function", ["None"], ["def", "get_object_generator", "(", ")", ":", "\n", "    ", "if", "args", ".", "image_width", "<=", "64", "and", "args", ".", "image_height", "<=", "64", ":", "\n", "        ", "print", "(", "'object generator produces 32x32 images'", ")", "\n", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "args", ".", "z_what_dim", ",", "64", ",", "2", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "# 2x2", "\n", "nn", ".", "GroupNorm", "(", "4", ",", "64", ")", ",", "nn", ".", "CELU", "(", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "64", ",", "32", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "# 4x4", "\n", "nn", ".", "GroupNorm", "(", "2", ",", "32", ")", ",", "nn", ".", "CELU", "(", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "32", ",", "16", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "# 8x8", "\n", "nn", ".", "GroupNorm", "(", "1", ",", "16", ")", ",", "nn", ".", "CELU", "(", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "16", ",", "8", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "# 16x16", "\n", "nn", ".", "GroupNorm", "(", "1", ",", "8", ")", ",", "nn", ".", "CELU", "(", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "8", ",", "4", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "True", ")", ",", "\n", "# 32x32", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n", "", "else", ":", "\n", "\n", "        ", "print", "(", "'object generator produces 64x64 images'", ")", "\n", "\n", "return", "nn", ".", "Sequential", "(", "\n", "# input is z, going into a convolution", "\n", "# input shape bachsize x nzf", "\n", "nn", ".", "ConvTranspose2d", "(", "args", ".", "z_what_dim", ",", "128", ",", "2", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "# 2x2", "\n", "nn", ".", "GroupNorm", "(", "8", ",", "128", ")", ",", "nn", ".", "CELU", "(", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "128", ",", "64", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "# 4x4", "\n", "nn", ".", "GroupNorm", "(", "4", ",", "64", ")", ",", "nn", ".", "CELU", "(", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "64", ",", "32", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "# 8x8", "\n", "# state size. (ncg*2) x 4 x 4", "\n", "nn", ".", "GroupNorm", "(", "2", ",", "32", ")", ",", "nn", ".", "CELU", "(", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "32", ",", "16", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "# 16x16", "\n", "nn", ".", "GroupNorm", "(", "1", ",", "16", ")", ",", "nn", ".", "CELU", "(", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "16", ",", "8", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "# 32x32", "\n", "nn", ".", "GroupNorm", "(", "1", ",", "8", ")", ",", "nn", ".", "CELU", "(", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "8", ",", "4", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "True", ")", ",", "\n", "# 64x64", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.BrunoSauvalle_AST.background.models.upsample_convolutional_block.__init__": [[22, 36], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Parameter", "torch.Parameter", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "module_list.append", "module_list.append", "models.get_positional_encoding", "torch.GroupNorm", "torch.GroupNorm", "torch.CELU", "torch.CELU"], "methods", ["home.repos.pwc.inspect_result.BrunoSauvalle_AST.background.dataset.CLEVRTEX.__init__", "home.repos.pwc.inspect_result.BrunoSauvalle_AST.background.models.get_positional_encoding"], ["def", "__init__", "(", "self", ",", "image_shape", ",", "n_channel_in", ",", "n_channel_out", ",", "n_group_out", ",", "kernel_size", ",", "stride", ",", "\n", "padding", "=", "(", "0", ",", "0", ")", ",", "final_layer", "=", "False", ",", "bias", "=", "False", ",", "output_padding", "=", "(", "0", ",", "0", ")", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "module_list", "=", "[", "nn", ".", "ConvTranspose2d", "(", "n_channel_in", "+", "2", ",", "n_channel_out", ",", "kernel_size", ",", "stride", ",", "\n", "padding", "=", "padding", ",", "bias", "=", "bias", ",", "output_padding", "=", "output_padding", ")", "]", "\n", "\n", "if", "final_layer", "==", "False", ":", "\n", "            ", "module_list", ".", "append", "(", "nn", ".", "GroupNorm", "(", "n_group_out", ",", "n_channel_out", ")", ")", "\n", "module_list", ".", "append", "(", "nn", ".", "CELU", "(", ")", ")", "\n", "\n", "", "self", ".", "upsample", "=", "nn", ".", "Sequential", "(", "*", "module_list", ")", "\n", "self", ".", "positional_encoding", "=", "nn", ".", "Parameter", "(", "get_positional_encoding", "(", "image_shape", "[", "0", "]", ",", "image_shape", "[", "1", "]", ")", ",", "requires_grad", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BrunoSauvalle_AST.background.models.upsample_convolutional_block.forward": [[37, 41], ["models.upsample_convolutional_block.positional_encoding.expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "models.upsample_convolutional_block.upsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "            ", "expanded_positional_encoding", "=", "self", ".", "positional_encoding", ".", "expand", "(", "input", ".", "shape", "[", "0", "]", ",", "2", ",", "input", ".", "shape", "[", "2", "]", ",", "input", ".", "shape", "[", "3", "]", ")", "\n", "full_input", "=", "torch", ".", "cat", "(", "[", "input", ",", "expanded_positional_encoding", "]", ",", "dim", "=", "1", ")", "\n", "return", "self", ".", "upsample", "(", "full_input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BrunoSauvalle_AST.background.models.downsample_convolutional_block.__init__": [[45, 60], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Parameter", "torch.Parameter", "torch.Conv2d", "torch.Conv2d", "module_list.append", "module_list.append", "models.get_positional_encoding", "torch.GroupNorm", "torch.GroupNorm", "torch.CELU", "torch.CELU"], "methods", ["home.repos.pwc.inspect_result.BrunoSauvalle_AST.background.dataset.CLEVRTEX.__init__", "home.repos.pwc.inspect_result.BrunoSauvalle_AST.background.models.get_positional_encoding"], ["def", "__init__", "(", "self", ",", "image_shape", ",", "n_channel_in", ",", "n_channel_out", ",", "n_group_out", ",", "kernel_size", ",", "stride", ",", "\n", "bias", "=", "True", ",", "padding", "=", "(", "0", ",", "0", ")", ",", "final_layer", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "module_list", "=", "[", "nn", ".", "Conv2d", "(", "n_channel_in", "+", "2", ",", "n_channel_out", ",", "kernel_size", ",", "stride", ",", "\n", "padding", "=", "padding", ",", "bias", "=", "bias", ")", "]", "\n", "\n", "if", "final_layer", "==", "False", ":", "\n", "            ", "module_list", ".", "append", "(", "nn", ".", "GroupNorm", "(", "n_group_out", ",", "n_channel_out", ")", ")", "\n", "module_list", ".", "append", "(", "nn", ".", "CELU", "(", ")", ")", "\n", "\n", "\n", "", "self", ".", "downsample", "=", "nn", ".", "Sequential", "(", "*", "module_list", ")", "\n", "\n", "self", ".", "positional_encoding", "=", "nn", ".", "Parameter", "(", "get_positional_encoding", "(", "image_shape", "[", "0", "]", ",", "image_shape", "[", "1", "]", ")", ",", "requires_grad", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BrunoSauvalle_AST.background.models.downsample_convolutional_block.forward": [[61, 65], ["models.downsample_convolutional_block.positional_encoding.expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "models.downsample_convolutional_block.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "            ", "expanded_positional_encoding", "=", "self", ".", "positional_encoding", ".", "expand", "(", "input", ".", "shape", "[", "0", "]", ",", "2", ",", "input", ".", "shape", "[", "2", "]", ",", "input", ".", "shape", "[", "3", "]", ")", "\n", "full_input", "=", "torch", ".", "cat", "(", "[", "input", ",", "expanded_positional_encoding", "]", ",", "dim", "=", "1", ")", "\n", "return", "self", ".", "downsample", "(", "full_input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BrunoSauvalle_AST.background.models.Background_Encoder.__init__": [[68, 186], ["torch.Module.__init__", "max", "torch.Sequential", "torch.Sequential", "image_shapes.append", "kers.append", "strs.append", "pads.append", "final_layers.append", "max", "range", "print", "exit", "models.downsample_convolutional_block", "range"], "methods", ["home.repos.pwc.inspect_result.BrunoSauvalle_AST.background.dataset.CLEVRTEX.__init__"], ["    ", "def", "__init__", "(", "self", ",", "image_height", ",", "image_width", ",", "complexity", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "complexity", "=", "complexity", "\n", "self", ".", "h", "=", "image_height", "\n", "self", ".", "w", "=", "image_width", "\n", "nz", "=", "16", "\n", "\n", "self", ".", "nz", "=", "nz", "\n", "\n", "max_dim", "=", "max", "(", "image_height", ",", "image_width", ")", "\n", "if", "max_dim", "<", "200", ":", "\n", "            ", "small_image", "=", "True", "\n", "", "else", ":", "\n", "            ", "small_image", "=", "False", "\n", "\n", "\n", "", "image_shapes", "=", "[", "(", "image_height", ",", "image_width", ")", "]", "# list of image shapes for all layers of the encoder", "\n", "kers", "=", "[", "]", "# list  of kernel sizes for all layers", "\n", "strs", "=", "[", "]", "# list of strides for all layers", "\n", "pads", "=", "[", "]", "# list of paddings for all layers", "\n", "final_layers", "=", "[", "False", "]", "\n", "current_w", "=", "image_width", "\n", "current_h", "=", "image_height", "\n", "\n", "n_blocks", "=", "0", "\n", "\n", "# dynamically computes number of blocks, kernels, strides and paddings from the values of h and w", "\n", "\n", "while", "current_w", ">", "1", "or", "current_h", ">", "1", ":", "# a new block is necessary", "\n", "\n", "            ", "n_blocks", "+=", "1", "\n", "\n", "if", "current_w", ">", "5", ":", "\n", "                ", "if", "small_image", ":", "\n", "                    ", "ker_w", "=", "5", "\n", "str_w", "=", "2", "\n", "pad_w", "=", "2", "\n", "", "else", ":", "\n", "                    ", "ker_w", "=", "5", "\n", "str_w", "=", "3", "\n", "pad_w", "=", "2", "\n", "", "", "elif", "current_w", ">", "3", "and", "small_image", ":", "\n", "                ", "ker_w", "=", "4", "\n", "str_w", "=", "2", "\n", "pad_w", "=", "1", "\n", "", "else", ":", "\n", "                ", "ker_w", "=", "current_w", "\n", "str_w", "=", "1", "\n", "pad_w", "=", "0", "\n", "\n", "", "if", "current_h", ">", "5", ":", "\n", "                ", "if", "small_image", ":", "\n", "                    ", "ker_h", "=", "5", "\n", "str_h", "=", "2", "\n", "pad_h", "=", "2", "\n", "", "else", ":", "\n", "                    ", "ker_h", "=", "5", "\n", "str_h", "=", "3", "\n", "pad_h", "=", "2", "\n", "", "", "elif", "current_h", ">", "3", "and", "small_image", ":", "\n", "                ", "ker_h", "=", "4", "\n", "str_h", "=", "2", "\n", "pad_h", "=", "1", "\n", "", "else", ":", "\n", "                ", "ker_h", "=", "current_h", "\n", "str_h", "=", "1", "\n", "pad_h", "=", "0", "\n", "\n", "", "new_w", "=", "1", "+", "(", "current_w", "+", "2", "*", "pad_w", "-", "ker_w", ")", "//", "str_w", "\n", "new_h", "=", "1", "+", "(", "current_h", "+", "2", "*", "pad_h", "-", "ker_h", ")", "//", "str_h", "\n", "\n", "\n", "\n", "image_shapes", ".", "append", "(", "(", "new_h", ",", "new_w", ")", ")", "\n", "kers", ".", "append", "(", "(", "ker_h", ",", "ker_w", ")", ")", "\n", "strs", ".", "append", "(", "(", "str_h", ",", "str_w", ")", ")", "\n", "pads", ".", "append", "(", "(", "pad_h", ",", "pad_w", ")", ")", "\n", "final_layers", ".", "append", "(", "False", ")", "\n", "\n", "current_h", "=", "new_h", "\n", "current_w", "=", "new_w", "\n", "\n", "\n", "\n", "# sets channel schedule according to complexity and number of blocks of the encoder", "\n", "\n", "\n", "", "if", "n_blocks", "==", "5", ":", "\n", "                ", "if", "complexity", "==", "False", ":", "\n", "                    ", "nchs", "=", "[", "3", ",", "64", ",", "160", ",", "160", ",", "32", ",", "nz", "]", "\n", "", "else", ":", "\n", "                    ", "nchs", "=", "[", "3", ",", "64", ",", "160", ",", "160", ",", "16", ",", "nz", "]", "\n", "\n", "", "", "elif", "n_blocks", "==", "6", ":", "\n", "\n", "            ", "if", "complexity", "==", "False", ":", "\n", "                ", "nchs", "=", "[", "3", ",", "64", ",", "160", ",", "320", ",", "160", ",", "32", ",", "nz", "]", "\n", "", "else", ":", "\n", "                ", "nchs", "=", "[", "3", ",", "64", ",", "160", ",", "320", ",", "160", ",", "16", ",", "nz", "]", "\n", "\n", "", "", "elif", "n_blocks", "==", "7", ":", "\n", "\n", "            ", "if", "complexity", "==", "False", ":", "\n", "                ", "nchs", "=", "[", "3", ",", "64", ",", "160", ",", "320", ",", "160", ",", "160", ",", "32", ",", "nz", "]", "\n", "", "else", ":", "\n", "                ", "nchs", "=", "[", "3", ",", "64", ",", "320", ",", "640", ",", "640", ",", "320", ",", "16", ",", "nz", "]", "\n", "", "", "else", ":", "\n", "            ", "print", "(", "f'{n_blocks} blocks required in encoder : not implemented in this model'", ")", "\n", "exit", "(", "0", ")", "\n", "\n", "", "ngs", "=", "[", "max", "(", "1", ",", "nchs", "[", "i", "]", "//", "16", ")", "for", "i", "in", "range", "(", "n_blocks", "+", "1", ")", "]", "# number of groups for group normalization", "\n", "\n", "\n", "self", ".", "background_encoder", "=", "nn", ".", "Sequential", "(", "*", "[", "downsample_convolutional_block", "(", "image_shapes", "[", "i", "]", ",", "nchs", "[", "i", "]", ",", "\n", "nchs", "[", "i", "+", "1", "]", ",", "ngs", "[", "i", "+", "1", "]", ",", "kers", "[", "i", "]", ",", "\n", "strs", "[", "i", "]", ",", "bias", "=", "False", ",", "final_layer", "=", "final_layers", "[", "i", "]", ",", "padding", "=", "pads", "[", "i", "]", ")", "\n", "for", "i", "in", "range", "(", "n_blocks", ")", "]", ")", "\n", "", "def", "forward", "(", "self", ",", "images", ")", ":", "\n"]], "home.repos.pwc.inspect_result.BrunoSauvalle_AST.background.models.Background_Encoder.forward": [[186, 190], ["models.Background_Encoder.background_encoder", "models.Background_Encoder.reshape"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "images", ")", ":", "\n", "        ", "batch_size", "=", "images", ".", "shape", "[", "0", "]", "\n", "background_latents", "=", "self", ".", "background_encoder", "(", "images", ")", "\n", "return", "background_latents", ".", "reshape", "(", "batch_size", ",", "self", ".", "nz", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BrunoSauvalle_AST.background.models.Background_Generator.__init__": [[193, 308], ["torch.Module.__init__", "max", "torch.Sequential", "torch.Sequential", "image_shapes.append", "kers.append", "strs.append", "pads.append", "output_pads.append", "final_layers.append", "max", "range", "print", "exit", "models.upsample_convolutional_block", "reversed", "range"], "methods", ["home.repos.pwc.inspect_result.BrunoSauvalle_AST.background.dataset.CLEVRTEX.__init__"], ["    ", "def", "__init__", "(", "self", ",", "image_height", ",", "image_width", ",", "complexity", "=", "False", ",", "type", "=", "\"deterministic\"", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "complexity", "=", "complexity", "\n", "self", ".", "h", "=", "image_height", "\n", "self", ".", "w", "=", "image_width", "\n", "self", ".", "type", "=", "type", "\n", "\n", "image_shapes", "=", "[", "(", "image_height", ",", "image_width", ")", "]", "\n", "n_blocks", "=", "0", "# number of blocks", "\n", "kers", "=", "[", "]", "# kernel sizes", "\n", "strs", "=", "[", "]", "# strides", "\n", "pads", "=", "[", "]", "# paddings value", "\n", "output_pads", "=", "[", "]", "# output paddings value for transpose convolutions", "\n", "final_layers", "=", "[", "True", "]", "\n", "current_w", "=", "image_width", "\n", "current_h", "=", "image_height", "\n", "\n", "max_dim", "=", "max", "(", "image_height", ",", "image_width", ")", "\n", "if", "max_dim", "<", "200", ":", "\n", "            ", "small_image", "=", "True", "\n", "", "else", ":", "\n", "            ", "small_image", "=", "False", "\n", "\n", "", "while", "current_w", ">", "1", "or", "current_h", ">", "1", ":", "\n", "\n", "            ", "n_blocks", "+=", "1", "\n", "\n", "if", "current_w", ">", "5", ":", "\n", "                ", "if", "small_image", ":", "\n", "                    ", "ker_w", "=", "5", "\n", "str_w", "=", "2", "\n", "pad_w", "=", "2", "\n", "", "else", ":", "\n", "                    ", "ker_w", "=", "5", "\n", "str_w", "=", "3", "\n", "pad_w", "=", "2", "\n", "\n", "", "", "elif", "current_h", ">", "3", "and", "small_image", ":", "\n", "                ", "ker_w", "=", "4", "\n", "str_w", "=", "2", "\n", "pad_w", "=", "1", "\n", "", "else", ":", "\n", "                ", "ker_w", "=", "current_w", "\n", "str_w", "=", "1", "\n", "pad_w", "=", "0", "\n", "\n", "", "if", "current_h", ">", "5", ":", "\n", "                ", "if", "small_image", ":", "\n", "                    ", "ker_h", "=", "5", "\n", "str_h", "=", "2", "\n", "pad_h", "=", "2", "\n", "", "else", ":", "\n", "                    ", "ker_h", "=", "5", "\n", "str_h", "=", "3", "\n", "pad_h", "=", "2", "\n", "\n", "", "", "elif", "current_h", ">", "3", "and", "small_image", ":", "\n", "                ", "ker_h", "=", "4", "\n", "str_h", "=", "2", "\n", "pad_h", "=", "1", "\n", "", "else", ":", "\n", "                ", "ker_h", "=", "current_h", "\n", "str_h", "=", "1", "\n", "pad_h", "=", "0", "\n", "\n", "", "new_w", "=", "1", "+", "(", "current_w", "+", "2", "*", "pad_w", "-", "ker_w", ")", "//", "str_w", "\n", "output_pad_w", "=", "(", "current_w", "+", "2", "*", "pad_w", "-", "ker_w", ")", "%", "str_w", "\n", "\n", "new_h", "=", "1", "+", "(", "current_h", "+", "2", "*", "pad_h", "-", "ker_h", ")", "//", "str_h", "\n", "output_pad_h", "=", "(", "current_h", "+", "2", "*", "pad_h", "-", "ker_h", ")", "%", "str_h", "\n", "\n", "image_shapes", ".", "append", "(", "(", "new_h", ",", "new_w", ")", ")", "\n", "kers", ".", "append", "(", "(", "ker_h", ",", "ker_w", ")", ")", "\n", "strs", ".", "append", "(", "(", "str_h", ",", "str_w", ")", ")", "\n", "pads", ".", "append", "(", "(", "pad_h", ",", "pad_w", ")", ")", "\n", "output_pads", ".", "append", "(", "(", "output_pad_h", ",", "output_pad_w", ")", ")", "\n", "\n", "current_h", "=", "new_h", "\n", "current_w", "=", "new_w", "\n", "final_layers", ".", "append", "(", "False", ")", "\n", "\n", "# channel schedules for generator", "\n", "\n", "\n", "", "if", "n_blocks", "==", "5", ":", "\n", "            ", "if", "complexity", "==", "False", ":", "\n", "                ", "nchs", "=", "[", "4", ",", "144", ",", "256", ",", "256", ",", "32", ",", "16", "]", "\n", "", "else", ":", "\n", "                ", "nchs", "=", "[", "4", ",", "144", ",", "640", ",", "640", ",", "16", ",", "16", "]", "\n", "\n", "\n", "", "", "elif", "n_blocks", "==", "6", ":", "\n", "            ", "if", "complexity", "==", "False", ":", "\n", "                ", "nchs", "=", "[", "4", ",", "144", ",", "256", ",", "512", ",", "256", ",", "32", ",", "16", "]", "\n", "", "else", ":", "\n", "                ", "nchs", "=", "[", "4", ",", "144", ",", "640", ",", "1280", ",", "640", ",", "16", ",", "16", "]", "\n", "\n", "", "", "elif", "n_blocks", "==", "7", ":", "\n", "            ", "if", "complexity", "==", "False", ":", "\n", "                ", "nchs", "=", "[", "4", ",", "144", ",", "256", ",", "512", ",", "256", ",", "256", ",", "32", ",", "16", "]", "\n", "", "else", ":", "\n", "                ", "nchs", "=", "[", "4", ",", "144", ",", "640", ",", "1280", ",", "640", ",", "320", ",", "16", ",", "16", "]", "\n", "", "", "else", ":", "\n", "            ", "print", "(", "f'{n_blocks} blocks required : image size not implemented in this model'", ")", "\n", "exit", "(", "0", ")", "\n", "\n", "\n", "", "ngs", "=", "[", "max", "(", "1", ",", "nchs", "[", "i", "]", "//", "16", ")", "for", "i", "in", "range", "(", "n_blocks", "+", "1", ")", "]", "# number of groups for group norm", "\n", "\n", "self", ".", "background_generator", "=", "nn", ".", "Sequential", "(", "*", "[", "upsample_convolutional_block", "(", "image_shapes", "[", "i", "+", "1", "]", ",", "nchs", "[", "i", "+", "1", "]", ",", "\n", "nchs", "[", "i", "]", ",", "ngs", "[", "i", "]", ",", "kers", "[", "i", "]", ",", "strs", "[", "i", "]", ",", "padding", "=", "pads", "[", "i", "]", ",", "\n", "final_layer", "=", "final_layers", "[", "i", "]", ",", "output_padding", "=", "output_pads", "[", "i", "]", "\n", ")", "for", "i", "in", "reversed", "(", "range", "(", "n_blocks", ")", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.BrunoSauvalle_AST.background.models.Background_Generator.forward": [[310, 316], ["models.Background_Generator.background_generator", "background_latents.reshape", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "background_latents", ")", ":", "\n", "\n", "            ", "batch_size", "=", "background_latents", ".", "shape", "[", "0", "]", "\n", "x", "=", "self", ".", "background_generator", "(", "background_latents", ".", "reshape", "(", "batch_size", ",", "16", ",", "1", ",", "1", ")", ")", "# output shape bs x 4 x h x w", "\n", "background_images", "=", "torch", ".", "sigmoid", "(", "x", ")", "*", "255", "\n", "return", "background_images", "# range 0-255", "\n", "\n"]], "home.repos.pwc.inspect_result.BrunoSauvalle_AST.background.models.Background_Generator.generate": [[317, 326], ["latents.to.to.to", "models.Background_Generator.background_generator", "latents.to.to.unsqueeze", "latents.to.to.reshape", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "next", "models.Background_Generator.parameters"], "methods", ["None"], ["", "def", "generate", "(", "self", ",", "latents", ")", ":", "\n", "        ", "if", "latents", ".", "dim", "==", "1", ":", "\n", "            ", "latents", ".", "unsqueeze", "(", "0", ")", "\n", "", "batch_size", "=", "latents", ".", "shape", "[", "0", "]", "\n", "assert", "latents", ".", "shape", "==", "(", "batch_size", ",", "16", ")", "\n", "latents", "=", "latents", ".", "to", "(", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "device", ")", "\n", "x", "=", "self", ".", "background_generator", "(", "latents", ".", "reshape", "(", "batch_size", ",", "16", ",", "1", ",", "1", ")", ")", "# output shape bs x 4 x h x w", "\n", "background_images", "=", "torch", ".", "sigmoid", "(", "x", ")", "[", ":", ",", ":", "3", ",", ":", ",", ":", "]", "\n", "return", "background_images", "# range 0-1", "\n", "\n"]], "home.repos.pwc.inspect_result.BrunoSauvalle_AST.background.models.get_positional_encoding": [[6, 19], ["torch.zeros", "torch.zeros", "range", "range"], "function", ["None"], ["def", "get_positional_encoding", "(", "h", ",", "w", ")", ":", "\n", "    ", "positional_encoding", "=", "torch", ".", "zeros", "(", "1", ",", "2", ",", "h", ",", "w", ")", "\n", "for", "i", "in", "range", "(", "h", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "w", ")", ":", "\n", "                ", "if", "h", ">", "1", ":", "\n", "                    ", "positional_encoding", "[", "0", ",", "0", ",", "i", ",", "j", "]", "=", "i", "/", "(", "h", "-", "1", ")", "-", "0.5", "\n", "", "else", ":", "\n", "                    ", "positional_encoding", "[", "0", ",", "0", ",", "i", ",", "j", "]", "=", "1", "\n", "", "if", "w", ">", "1", ":", "\n", "                    ", "positional_encoding", "[", "0", ",", "1", ",", "i", ",", "j", "]", "=", "j", "/", "(", "w", "-", "1", ")", "-", "0.5", "\n", "", "else", ":", "\n", "                    ", "positional_encoding", "[", "0", ",", "1", ",", "i", ",", "j", "]", "=", "1", "\n", "", "", "", "return", "positional_encoding", "\n", "\n"]], "home.repos.pwc.inspect_result.BrunoSauvalle_AST.background.config.Background_training_configuration_data.__init__": [[9, 46], ["torch.device", "kwargs.items", "hasattr", "setattr"], "methods", ["None"], ["        ", "def", "__init__", "(", "self", ",", "dataset_name", ",", "kwargs", ")", ":", "\n", "\n", "            ", "self", ".", "dataset_name", "=", "dataset_name", "\n", "self", ".", "image_height", "=", "None", "\n", "self", ".", "image_width", "=", "None", "\n", "self", ".", "full_dataset_path", "=", "None", "\n", "self", ".", "train_dataset_path", "=", "None", "\n", "self", ".", "test_dataset_path", "=", "None", "\n", "self", ".", "GT_train_dataset_path", "=", "None", "# ground truth masks path", "\n", "self", ".", "GT_test_dataset_path", "=", "None", "\n", "self", ".", "results_dir_path", "=", "None", "\n", "self", ".", "use_trained_model", "=", "False", "\n", "self", ".", "saved_model_path", "=", "None", "\n", "self", ".", "unsupervised_mode", "=", "False", "# the number of iterations has to be set manually", "\n", "self", ".", "n_iterations", "=", "None", "\n", "self", ".", "background_complexity", "=", "True", "\n", "self", ".", "train_model", "=", "True", "\n", "self", ".", "learning_rate", "=", "2e-3", "\n", "self", ".", "weight_decay", "=", "0", "\n", "self", ".", "batch_size", "=", "None", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "0", ")", "\n", "\n", "# path where temporary training samples are stored during training", "\n", "self", ".", "training_images_output_directory", "=", "'/workspace/PycharmProjects/SCOD/MOS/MF/background/background_outputs'", "\n", "\n", "# standard AE-NE hyperparameters", "\n", "self", ".", "beta", "=", "6", "\n", "self", ".", "r", "=", "75", "\n", "self", ".", "tau_0", "=", "0.24", "\n", "self", ".", "tau_1", "=", "0.25", "\n", "self", ".", "alpha_1", "=", "96", "/", "255", "\n", "self", ".", "alpha_2", "=", "7.0", "\n", "\n", "# override default values with arguments provided at init:", "\n", "for", "attr", ",", "value", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "                ", "assert", "hasattr", "(", "self", ",", "attr", ")", ",", "f'wrong attribute name {attr}'", "\n", "setattr", "(", "self", ",", "attr", ",", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BrunoSauvalle_AST.background.create_objects_room_dataset.feature_descriptions": [[46, 59], ["tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature"], "function", ["None"], ["def", "feature_descriptions", "(", "max_num_entities", ")", ":", "\n", "  ", "\"\"\"Create a dictionary describing the dataset features.\n  Args:\n    max_num_entities: int. The maximum number of foreground and background\n      entities in each image. This corresponds to the number of segmentation\n      masks returned per scene.\n  Returns:\n    A dictionary which maps feature names to `tf.Example`-compatible shape and\n    data type descriptors.\n  \"\"\"", "\n", "return", "{", "\n", "'image'", ":", "tf", ".", "FixedLenFeature", "(", "IMAGE_SIZE", "+", "[", "3", "]", ",", "tf", ".", "string", ")", ",", "\n", "'mask'", ":", "tf", ".", "FixedLenFeature", "(", "[", "max_num_entities", "]", "+", "IMAGE_SIZE", "+", "[", "1", "]", ",", "tf", ".", "string", ")", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.BrunoSauvalle_AST.background.create_objects_room_dataset._decode": [[62, 69], ["tensorflow.parse_single_example", "tensorflow.squeeze", "tensorflow.decode_raw"], "function", ["None"], ["", "def", "_decode", "(", "example_proto", ",", "features", ")", ":", "\n", "# Parse the input `tf.Example` proto using a feature description dictionary.", "\n", "  ", "single_example", "=", "tf", ".", "parse_single_example", "(", "example_proto", ",", "features", ")", "\n", "for", "k", "in", "BYTE_FEATURES", ":", "\n", "    ", "single_example", "[", "k", "]", "=", "tf", ".", "squeeze", "(", "tf", ".", "decode_raw", "(", "single_example", "[", "k", "]", ",", "tf", ".", "uint8", ")", ",", "\n", "axis", "=", "-", "1", ")", "\n", "", "return", "single_example", "\n", "\n"]], "home.repos.pwc.inspect_result.BrunoSauvalle_AST.background.create_objects_room_dataset.dataset": [[71, 98], ["tensorflow.data.TFRecordDataset", "create_objects_room_dataset.feature_descriptions", "functools.partial", "tf.data.TFRecordDataset.map", "ValueError", "list", "MAX_NUM_ENTITIES.keys"], "function", ["home.repos.pwc.inspect_result.BrunoSauvalle_AST.background.create_objects_room_dataset.feature_descriptions"], ["", "def", "dataset", "(", "tfrecords_path", ",", "dataset_variant", ",", "read_buffer_size", "=", "None", ",", "\n", "map_parallel_calls", "=", "None", ")", ":", "\n", "  ", "\"\"\"Read, decompress, and parse the TFRecords file.\n  Args:\n    tfrecords_path: str. Path to the dataset file.\n    dataset_variant: str. One of ['train', 'six_objects', 'empty_room',\n      'identical_color']. This is used to identify the maximum number of\n      entities in each scene. If an incorrect identifier is passed in, the\n      TFRecords file will not be read correctly.\n    read_buffer_size: int. Number of bytes in the read buffer. See documentation\n      for `tf.data.TFRecordDataset.__init__`.\n    map_parallel_calls: int. Number of elements decoded asynchronously in\n      parallel. See documentation for `tf.data.Dataset.map`.\n  Returns:\n    An unbatched `tf.data.TFRecordDataset`.\n  \"\"\"", "\n", "if", "dataset_variant", "not", "in", "MAX_NUM_ENTITIES", ":", "\n", "    ", "raise", "ValueError", "(", "'Invalid `dataset_variant` provided. The supported values'", "\n", "' are: {}'", ".", "format", "(", "list", "(", "MAX_NUM_ENTITIES", ".", "keys", "(", ")", ")", ")", ")", "\n", "", "max_num_entities", "=", "MAX_NUM_ENTITIES", "[", "dataset_variant", "]", "\n", "raw_dataset", "=", "tf", ".", "data", ".", "TFRecordDataset", "(", "\n", "tfrecords_path", ",", "compression_type", "=", "COMPRESSION_TYPE", ",", "\n", "buffer_size", "=", "read_buffer_size", ")", "\n", "features", "=", "feature_descriptions", "(", "max_num_entities", ")", "\n", "partial_decode_fn", "=", "functools", ".", "partial", "(", "_decode", ",", "features", "=", "features", ")", "\n", "return", "raw_dataset", ".", "map", "(", "partial_decode_fn", ",", "\n", "num_parallel_calls", "=", "map_parallel_calls", ")", "\n", "# The following path should be updated with the path to downladed objects_room_objects_room_train.tfrecords in your filesystem", "\n"]], "home.repos.pwc.inspect_result.BrunoSauvalle_AST.background.train.background_loss": [[16, 38], ["real_images.size", "torch.nn.functional.smooth_l1_loss", "torch.nn.functional.smooth_l1_loss", "torch.nn.functional.smooth_l1_loss", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.tanh", "torch.tanh", "torch.tanh", "torch.nn.functional.smooth_l1_loss", "torch.nn.functional.smooth_l1_loss", "torch.nn.functional.smooth_l1_loss", "pixel_errors.detach", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.exp", "torch.exp", "torch.exp"], "function", ["None"], ["def", "background_loss", "(", "real_images", ",", "backgrounds_with_error_prediction", ")", ":", "\n", "    ", "\"\"\" background loss used during training\n        input images format : tensor shape N,3,H,W range 0-255\"\"\"", "\n", "\n", "bs", ",", "nc", ",", "h", ",", "w", "=", "real_images", ".", "size", "(", ")", "\n", "\n", "backgrounds", "=", "backgrounds_with_error_prediction", "[", ":", ",", "0", ":", "3", ",", ":", ",", ":", "]", "\n", "pixel_errors", "=", "torch", ".", "sum", "(", "torch", ".", "nn", ".", "functional", ".", "smooth_l1_loss", "(", "real_images", ",", "backgrounds", ",", "reduction", "=", "'none'", ",", "beta", "=", "3.0", ")", ",", "dim", "=", "1", ")", "*", "(", "1", "/", "255.0", ")", "# range 0-3", "\n", "\n", "error_prediction", "=", "backgrounds_with_error_prediction", "[", ":", ",", "3", ",", ":", ",", ":", "]", "*", "(", "1", "/", "255", ")", "# range 0-1", "\n", "error_prediction_error", "=", "torch", ".", "nn", ".", "functional", ".", "smooth_l1_loss", "(", "error_prediction", ",", "pixel_errors", ".", "detach", "(", ")", "*", "(", "1", "/", "3", ")", ",", "reduction", "=", "'none'", ",", "beta", "=", "3.0", "/", "255", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "#  weights computation do not require gradient", "\n", "\n", "        ", "soft_masks", "=", "torch", ".", "tanh", "(", "pixel_errors", "*", "(", "1", "/", "env", ".", "tau_1", ")", ")", "# range 0-1", "\n", "weight_logit", "=", "-", "env", ".", "beta", "*", "torch", ".", "nn", ".", "functional", ".", "avg_pool2d", "(", "soft_masks", ",", "2", "*", "(", "w", "//", "env", ".", "r", ")", "+", "1", ",", "\n", "stride", "=", "1", ",", "padding", "=", "w", "//", "env", ".", "r", ",", "count_include_pad", "=", "False", ")", "# range 0-1 BSxHxW", "\n", "normalized_pixel_weights", "=", "torch", ".", "exp", "(", "weight_logit", ")", "*", "(", "1", "/", "(", "h", "*", "w", "*", "bs", ")", ")", "\n", "\n", "", "loss", "=", "torch", ".", "sum", "(", "(", "pixel_errors", "+", "error_prediction_error", ")", "*", "normalized_pixel_weights", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.BrunoSauvalle_AST.background.train.evaluate_background_complexity_using_trained_model": [[40, 84], ["iter", "torch.zeros", "torch.zeros", "torch.zeros", "netBE.eval", "netBG.eval", "[].expand_as", "torch.tanh", "torch.tanh", "torch.tanh", "torch.mean", "torch.mean", "torch.mean", "netBE.train", "netBG.train", "dataset.get_datasets", "len", "torch.no_grad", "torch.no_grad", "torch.no_grad", "range", "torch.sum", "torch.sum", "torch.sum", "len", "[].type", "netBG", "torch.nn.functional.l1_loss", "torch.nn.functional.l1_loss", "torch.nn.functional.l1_loss", "netBE", "torch.median", "torch.median", "torch.median", "next"], "function", ["home.repos.pwc.inspect_result.BrunoSauvalle_AST.background.dataset.get_datasets"], ["", "def", "evaluate_background_complexity_using_trained_model", "(", "netBE", ",", "netBG", ")", ":", "\n", "    ", "\"\"\"evaluates whether the background changes are simple or complex using partially trained model\"\"\"", "\n", "\n", "batch_size", "=", "env", ".", "batch_size", "\n", "\n", "dataset", ",", "dataloader", "=", "get_datasets", "(", ")", "[", ":", "2", "]", "\n", "\n", "dataloader_iterator", "=", "iter", "(", "dataloader", ")", "\n", "if", "len", "(", "dataset", ")", ">", "batch_size", "*", "15", ":", "\n", "        ", "number_of_batchs", "=", "15", "\n", "", "else", ":", "# if number of frames <= 480, limit to one epoch", "\n", "        ", "number_of_batchs", "=", "len", "(", "dataset", ")", "//", "batch_size", "\n", "\n", "# placeholder for reconstructed backgrounds", "\n", "", "backgrounds_big_batch", "=", "torch", ".", "zeros", "(", "batch_size", "*", "number_of_batchs", ",", "3", ",", "dataset", ".", "image_height", ",", "dataset", ".", "image_width", ")", "\n", "\n", "netBE", ".", "eval", "(", ")", "\n", "netBG", ".", "eval", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "number_of_batchs", ")", ":", "\n", "            ", "data", "=", "next", "(", "dataloader_iterator", ")", "[", "1", "]", ".", "type", "(", "torch", ".", "cuda", ".", "FloatTensor", ")", "\n", "real_images", "=", "data", "\n", "backgrounds_with_error_predictions", "=", "netBG", "(", "netBE", "(", "real_images", ")", ")", "\n", "backgrounds_big_batch", "[", "i", "*", "batch_size", ":", "(", "i", "+", "1", ")", "*", "batch_size", ",", ":", ",", ":", ",", ":", "]", "=", "backgrounds_with_error_predictions", "[", ":", ",", "0", ":", "3", ",", "\n", ":", ",", ":", "]", "\n", "\n", "", "", "median_background", "=", "torch", ".", "median", "(", "backgrounds_big_batch", ",", "dim", "=", "0", ",", "keepdim", "=", "True", ")", "[", "0", "]", ".", "expand_as", "(", "backgrounds_big_batch", ")", "\n", "\n", "pixel_errors", "=", "(", "1", "/", "255", ")", "*", "torch", ".", "sum", "(", "\n", "torch", ".", "nn", ".", "functional", ".", "l1_loss", "(", "backgrounds_big_batch", ",", "median_background", ",", "reduction", "=", "'none'", ")", ",", "dim", "=", "1", ")", "\n", "\n", "soft_masks", "=", "torch", ".", "tanh", "(", "pixel_errors", "*", "(", "1", "/", "env", ".", "tau_1", ")", ")", "\n", "average_mask_background_error", "=", "torch", ".", "mean", "(", "soft_masks", ")", "\n", "\n", "netBE", ".", "train", "(", ")", "\n", "netBG", ".", "train", "(", ")", "\n", "\n", "if", "average_mask_background_error", ">", "env", ".", "tau_0", ":", "\n", "        ", "complex_background", "=", "True", "\n", "", "else", ":", "\n", "        ", "complex_background", "=", "False", "\n", "\n", "", "return", "complex_background", "\n", "\n"]], "home.repos.pwc.inspect_result.BrunoSauvalle_AST.background.train.background_training_loop": [[85, 219], ["torch.utils.tensorboard.SummaryWriter", "os.path.isdir", "os.path.join", "print", "netBE.train", "netBG.train", "torch.optim.lr_scheduler.MultiplicativeLR", "torch.optim.lr_scheduler.MultiplicativeLR", "torch.optim.lr_scheduler.MultiplicativeLR", "time.time", "time.time", "os.path.isdir", "print", "os.mkdir", "enumerate", "images.to.to", "masks.to.to", "optimizer.zero_grad", "netBE", "netBG", "train.background_loss", "background_loss.backward", "optimizer.step", "torch.utils.tensorboard.SummaryWriter.add_scalar", "print", "torch.utils.tensorboard.SummaryWriter.add_scalar", "time.time", "print", "print", "time.time", "train.evaluate_background_complexity_using_trained_model", "os.path.join", "utils.save_trained_model", "utils.save_trained_model", "os.path.join", "utils.save_trained_model", "utils.save_trained_model", "print", "print", "torch.optim.lr_scheduler.MultiplicativeLR.step", "print", "time.time", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.mean", "torch.mean", "torch.mean", "time.time", "torch.no_grad", "torch.no_grad", "torch.no_grad", "generate_background_dataset.compute_background_and_mask_using_trained_model", "torch.cat", "torch.cat", "torch.cat", "torchvision.save_image", "torch.mean", "torch.mean", "torch.mean", "print", "torch.utils.tensorboard.SummaryWriter.add_scalar", "print", "print", "torch.square", "torch.square", "torch.square", "time.time", "torch.square", "torch.square", "torch.square", "torch.from_numpy().to().unsqueeze().repeat", "torch.from_numpy().to().unsqueeze().repeat", "torch.from_numpy().to().unsqueeze().repeat", "background_masks[].repeat", "background_masks.cpu", "torch.from_numpy().to().unsqueeze", "torch.from_numpy().to().unsqueeze", "torch.from_numpy().to().unsqueeze", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().cpu", "torch.from_numpy().cpu", "torch.from_numpy().cpu", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.BrunoSauvalle_AST.background.train.background_loss", "home.repos.pwc.inspect_result.BrunoSauvalle_AST.background.train.evaluate_background_complexity_using_trained_model", "home.repos.pwc.inspect_result.BrunoSauvalle_AST.background.utils.save_trained_model", "home.repos.pwc.inspect_result.BrunoSauvalle_AST.background.utils.save_trained_model", "home.repos.pwc.inspect_result.BrunoSauvalle_AST.background.utils.save_trained_model", "home.repos.pwc.inspect_result.BrunoSauvalle_AST.background.utils.save_trained_model", "home.repos.pwc.inspect_result.BrunoSauvalle_AST.background.generate_background_dataset.compute_background_and_mask_using_trained_model"], ["", "def", "background_training_loop", "(", "outf", ",", "netBE", ",", "netBG", ",", "train_dataloader", ",", "optimizer", ",", "\n", "number_of_steps", ",", "evaluation_step", ")", ":", "\n", "\n", "\n", "    ", "writer", "=", "SummaryWriter", "(", ")", "\n", "writetime", "=", "0", "\n", "complexity", "=", "True", "\n", "\n", "assert", "os", ".", "path", ".", "isdir", "(", "env", ".", "results_dir_path", ")", ",", "f' directory {env.results_dir_path} does not exist'", "\n", "\n", "\n", "models_path", "=", "os", ".", "path", ".", "join", "(", "env", ".", "results_dir_path", ",", "\"models\"", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "models_path", ")", ":", "\n", "        ", "print", "(", "f'warning : models path {models_path} is not a directory, creating directory'", ")", "\n", "os", ".", "mkdir", "(", "models_path", ")", "\n", "", "print", "(", "f'starting autoencoder training loop'", ")", "\n", "\n", "netBE", ".", "train", "(", ")", "\n", "netBG", ".", "train", "(", ")", "\n", "\n", "saved_network", "=", "False", "\n", "save_network", "=", "False", "\n", "complex_background", "=", "False", "\n", "\n", "learning_rate_reduction_step", "=", "(", "4", "*", "number_of_steps", ")", "//", "5", "\n", "learning_rate_is_reduced", "=", "False", "\n", "\n", "def", "lmbda", "(", "epoch", ")", ":", "\n", "        ", "return", "0.1", "\n", "", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "MultiplicativeLR", "(", "optimizer", ",", "lr_lambda", "=", "lmbda", ")", "\n", "\n", "last_message_time", "=", "time", ".", "time", "(", ")", "\n", "last_image_save_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "step", "=", "0", "\n", "last_step", "=", "0", "\n", "epoch", "=", "0", "\n", "\n", "\n", "while", "True", ":", "\n", "\n", "        ", "for", "j", ",", "data", "in", "enumerate", "(", "train_dataloader", ",", "0", ")", ":", "\n", "\n", "            ", "indices", ",", "images", ",", "masks", "=", "data", "# indices : integer, images : NCHW 0-255, masks : NHW integer", "\n", "\n", "images", "=", "images", ".", "to", "(", "env", ".", "device", ")", "\n", "masks", "=", "masks", ".", "to", "(", "env", ".", "device", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "encoder_latents", "=", "netBE", "(", "images", ")", "\n", "backgrounds_with_error_prediction", "=", "netBG", "(", "encoder_latents", ")", "# range 0-255", "\n", "loss", "=", "background_loss", "(", "images", ",", "backgrounds_with_error_prediction", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "writer", ".", "add_scalar", "(", "'background_loss'", ",", "loss", ",", "global_step", "=", "writetime", ")", "\n", "\n", "writetime", "=", "writetime", "+", "1", "\n", "\n", "if", "step", ">", "number_of_steps", "and", "saved_network", "==", "False", ":", "\n", "                ", "save_network", "=", "True", "\n", "\n", "", "if", "saved_network", "==", "True", ":", "\n", "                ", "print", "(", "f'training finished '", ")", "\n", "return", "netBE", ",", "netBG", ",", "complex_background", "\n", "\n", "", "if", "time", ".", "time", "(", ")", "-", "last_message_time", ">", "15", ":", "\n", "                ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "background_masks", "=", "(", "masks", "==", "0", ")", ".", "to", "(", "int", ")", "\n", "masked_differences", "=", "background_masks", "*", "(", "\n", "images", "-", "backgrounds_with_error_prediction", "[", ":", ",", "0", ":", "3", ",", ":", ",", ":", "]", ")", "/", "255", "\n", "L2_masked_error", "=", "torch", ".", "mean", "(", "torch", ".", "square", "(", "masked_differences", ")", ")", "\n", "", "writer", ".", "add_scalar", "(", "'L2_masked_error'", ",", "L2_masked_error", ",", "global_step", "=", "writetime", ")", "\n", "\n", "its", "=", "(", "step", "-", "last_step", ")", "/", "(", "time", ".", "time", "(", ")", "-", "last_message_time", ")", "\n", "last_message_time", "=", "time", ".", "time", "(", ")", "\n", "last_step", "=", "step", "\n", "\n", "print", "(", "'[dataset %s][epoch %d][step %d/%d it/s %.3f]  [loss: %.6f   L2 error on background segment %.6f]'", "\n", "%", "(", "env", ".", "dataset_name", ",", "epoch", ",", "step", ",", "number_of_steps", ",", "its", ",", "\n", "loss", ",", "L2_masked_error", ")", ")", "\n", "", "if", "time", ".", "time", "(", ")", "-", "last_image_save_time", ">", "120", ":", "\n", "                ", "print", "(", "f'saving training images in directory {outf}'", ")", "\n", "last_image_save_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "output_images", "=", "compute_background_and_mask_using_trained_model", "(", "netBE", ",", "netBG", ",", "images", ")", "\n", "\n", "predicted_foreground_masks", "=", "output_images", "[", "'masks'", "]", "/", "255", "# numpy array", "\n", "background_masks", "=", "(", "masks", "==", "0", ")", ".", "to", "(", "int", ")", "\n", "concatenated_images", "=", "torch", ".", "cat", "(", "[", "images", "[", "0", ":", "8", "]", "/", "255", ",", "backgrounds_with_error_prediction", "[", "0", ":", "8", ",", "0", ":", "3", ",", ":", ",", ":", "]", "/", "255", ",", "\n", "1", "-", "background_masks", "[", "0", ":", "8", "]", ".", "repeat", "(", "1", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "torch", ".", "from_numpy", "(", "predicted_foreground_masks", "[", "0", ":", "8", "]", ")", ".", "to", "(", "env", ".", "device", ")", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "3", ",", "1", ",", "1", ")", "]", ")", "\n", "vutils", ".", "save_image", "(", "concatenated_images", ",", "\n", "'%s/result_%d.png'", "%", "(", "outf", ",", "epoch", ")", ",", "nrow", "=", "8", ")", "\n", "\n", "mask_error", "=", "torch", ".", "mean", "(", "torch", ".", "square", "(", "background_masks", ".", "cpu", "(", ")", "\n", "-", "(", "1", "-", "torch", ".", "from_numpy", "(", "predicted_foreground_masks", ")", ".", "cpu", "(", ")", ")", ".", "unsqueeze", "(", "1", ")", ")", ")", "\n", "print", "(", "f'mask error : {mask_error}'", ")", "\n", "writer", ".", "add_scalar", "(", "'mask_error'", ",", "mask_error", ",", "global_step", "=", "writetime", ")", "\n", "", "", "step", "+=", "1", "\n", "\n", "if", "step", "==", "evaluation_step", "and", "env", ".", "unsupervised_mode", ":", "\n", "\n", "                ", "complex_background", "=", "evaluate_background_complexity_using_trained_model", "(", "netBE", ",", "netBG", ")", "\n", "\n", "if", "complex_background", ":", "\n", "                    ", "print", "(", "'complex background detected, aborting current training and starting new training with updated model '", ")", "\n", "return", "netBE", ",", "netBG", ",", "complex_background", "\n", "", "else", ":", "\n", "                    ", "print", "(", "'simple background, finishing training'", ")", "\n", "\n", "", "", "if", "(", "step", "==", "1000", "or", "step", "%", "20000", "==", "0", ")", ":", "\n", "                ", "model_path", "=", "os", ".", "path", ".", "join", "(", "models_path", ",", "f'trained_model_{step}.pth'", ")", "\n", "utils", ".", "save_trained_model", "(", "netBE", ",", "netBG", ",", "optimizer", ",", "complexity", ",", "model_path", ")", "\n", "utils", ".", "save_trained_model", "(", "netBE", ",", "netBG", ",", "optimizer", ",", "complexity", ",", "'%s/model_%d.pth'", "%", "(", "outf", ",", "epoch", "%", "2", ")", ")", "\n", "\n", "", "if", "save_network", "==", "True", ":", "\n", "                ", "model_path", "=", "os", ".", "path", ".", "join", "(", "models_path", ",", "'trained_model.pth'", ")", "\n", "utils", ".", "save_trained_model", "(", "netBE", ",", "netBG", ",", "optimizer", ",", "complexity", ",", "model_path", ")", "\n", "utils", ".", "save_trained_model", "(", "netBE", ",", "netBG", ",", "optimizer", ",", "complexity", ",", "'%s/model_final.pth'", "%", "outf", ")", "\n", "print", "(", "'final model saved as : '", ")", "\n", "print", "(", "'%s/model_final.pth'", "%", "outf", ")", "\n", "saved_network", "=", "True", "\n", "\n", "", "if", "step", ">=", "learning_rate_reduction_step", "and", "learning_rate_is_reduced", "==", "False", ":", "\n", "                ", "scheduler", ".", "step", "(", ")", "\n", "print", "(", "f'learning rate is now reduced (step {step})'", ")", "\n", "learning_rate_is_reduced", "=", "True", "\n", "\n", "", "", "epoch", "=", "epoch", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.BrunoSauvalle_AST.background.train.train_dynamic_background_model": [[221, 279], ["utils.setup_background_models", "torch.AdamW", "train.background_training_loop", "dataset.get_datasets", "print", "torch.load", "torch.load", "torch.load", "netBE.load_state_dict", "netBG.load_state_dict", "optim.AdamW.load_state_dict", "print", "print", "max", "print", "utils.setup_background_models", "torch.AdamW", "train.background_training_loop", "netBG.parameters", "netBE.parameters", "len", "netBG.parameters", "netBE.parameters"], "function", ["home.repos.pwc.inspect_result.BrunoSauvalle_AST.background.utils.setup_background_models", "home.repos.pwc.inspect_result.BrunoSauvalle_AST.background.train.background_training_loop", "home.repos.pwc.inspect_result.BrunoSauvalle_AST.background.dataset.get_datasets", "home.repos.pwc.inspect_result.BrunoSauvalle_AST.None.MF_train.Training_state.load_state_dict", "home.repos.pwc.inspect_result.BrunoSauvalle_AST.None.MF_train.Training_state.load_state_dict", "home.repos.pwc.inspect_result.BrunoSauvalle_AST.None.MF_train.Training_state.load_state_dict", "home.repos.pwc.inspect_result.BrunoSauvalle_AST.background.utils.setup_background_models", "home.repos.pwc.inspect_result.BrunoSauvalle_AST.background.train.background_training_loop"], ["", "", "def", "train_dynamic_background_model", "(", "outf", ")", ":", "\n", "    ", "\"\"\" training function for dynamic background\"\"\"", "\n", "\n", "if", "env", ".", "unsupervised_mode", ":", "\n", "        ", "number_of_steps", "=", "env", ".", "n_simple", "\n", "evaluation_step", "=", "env", ".", "n_eval", "\n", "prior_complexity", "=", "False", "\n", "", "else", ":", "\n", "        ", "number_of_steps", "=", "env", ".", "n_iterations", "\n", "prior_complexity", "=", "env", ".", "background_complexity", "\n", "evaluation_step", "=", "1e10", "# no evaluation in supervised mode", "\n", "\n", "", "train_dataset", ",", "train_dataloader", "=", "get_datasets", "(", ")", "[", ":", "2", "]", "\n", "\n", "netBE", ",", "netBG", "=", "utils", ".", "setup_background_models", "(", "env", ".", "image_height", ",", "env", ".", "image_width", ",", "prior_complexity", ")", "\n", "\n", "\n", "optimizer", "=", "optim", ".", "AdamW", "(", "[", "{", "'params'", ":", "netBG", ".", "parameters", "(", ")", "}", ",", "{", "'params'", ":", "netBE", ".", "parameters", "(", ")", "}", "]", ",", "\n", "lr", "=", "env", ".", "learning_rate", ",", "betas", "=", "(", "0.90", ",", "0.999", ")", ",", "weight_decay", "=", "env", ".", "weight_decay", ")", "\n", "\n", "\n", "if", "env", ".", "use_trained_model", ":", "\n", "\n", "        ", "print", "(", "f'loading saved models from {env.saved_model_path}'", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "env", ".", "saved_model_path", ")", "\n", "encoder_state_dict", "=", "checkpoint", "[", "'encoder_state_dict'", "]", "\n", "generator_state_dict", "=", "checkpoint", "[", "'generator_state_dict'", "]", "\n", "optimizer_state_dict", "=", "checkpoint", "[", "'optimizer_state_dict'", "]", "\n", "saved_model_complexity", "=", "checkpoint", "[", "'complexity'", "]", "\n", "assert", "saved_model_complexity", "==", "prior_complexity", "\n", "\n", "netBE", ".", "load_state_dict", "(", "encoder_state_dict", ")", "\n", "netBG", ".", "load_state_dict", "(", "generator_state_dict", ")", "\n", "optimizer", ".", "load_state_dict", "(", "optimizer_state_dict", ")", "\n", "print", "(", "'model succesfully loaded'", ")", "\n", "\n", "", "else", ":", "\n", "        ", "print", "(", "'starting training from zero'", ")", "\n", "\n", "\n", "", "netBE", ",", "netBG", ",", "complex_background", "=", "background_training_loop", "(", "outf", ",", "netBE", ",", "netBG", ",", "train_dataloader", ",", "optimizer", ",", "\n", "number_of_steps", ",", "evaluation_step", ")", "\n", "\n", "if", "env", ".", "unsupervised_mode", "and", "complex_background", ":", "# if the background is complex, start new training with more complex model", "\n", "\n", "        ", "number_of_steps", "=", "max", "(", "env", ".", "n_complex", ",", "(", "len", "(", "train_dataset", ")", "//", "env", ".", "batch_size", ")", "*", "env", ".", "e_complex", ")", "\n", "print", "(", "f'number of steps will be {number_of_steps}'", ")", "\n", "evaluation_step", "=", "1e10", "# no evaluation", "\n", "\n", "netBE", ",", "netBG", "=", "utils", ".", "setup_background_models", "(", "env", ".", "image_height", ",", "env", ".", "image_width", ",", "complex_background", ",", "\n", ")", "\n", "\n", "optimizer", "=", "optim", ".", "AdamW", "(", "[", "{", "'params'", ":", "netBG", ".", "parameters", "(", ")", "}", ",", "{", "'params'", ":", "netBE", ".", "parameters", "(", ")", "}", "]", ",", "\n", "lr", "=", "env", ".", "learning_rate", ",", "betas", "=", "(", "0.90", ",", "0.999", ")", ",", "weight_decay", "=", "env", ".", "weight_decay", ")", "\n", "\n", "netBE", ",", "netBG", ",", "_", "=", "background_training_loop", "(", "outf", ",", "netBE", ",", "netBG", ",", "train_dataloader", ",", "optimizer", ",", "number_of_steps", ",", "evaluation_step", ")", "\n", "\n", "", "return", "netBE", ",", "netBG", "\n", "\n"]], "home.repos.pwc.inspect_result.BrunoSauvalle_AST.background.dataset.Image_dataset.__init__": [[31, 71], ["os.walk", "natsort.natsorted", "len", "print", "natsort.natsorted", "os.path.join", "len", "os.listdir", "os.path.isfile", "len", "os.path.join"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "input_dataset_path", ",", "GT_mask_dataset_path", "=", "None", ")", ":", "\n", "\n", "        ", "self", ".", "input_dir", "=", "input_dataset_path", "\n", "\n", "if", "GT_mask_dataset_path", "==", "None", ":", "\n", "            ", "self", ".", "with_GT_masks", "=", "False", "\n", "", "else", ":", "\n", "            ", "self", ".", "with_GT_masks", "=", "True", "\n", "\n", "", "input_image_names", "=", "[", "]", "\n", "for", "root", ",", "dirs", ",", "files", "in", "os", ".", "walk", "(", "self", ".", "input_dir", ",", "topdown", "=", "False", ")", ":", "\n", "                ", "input_image_names", "+=", "[", "os", ".", "path", ".", "join", "(", "root", ",", "file", ")", "for", "file", "in", "files", "]", "\n", "\n", "", "input_image_names", "=", "natsort", ".", "natsorted", "(", "input_image_names", ")", "\n", "\n", "self", ".", "dataset_length", "=", "len", "(", "input_image_names", ")", "\n", "assert", "self", ".", "dataset_length", ">", "1", ",", "'input dataset is empty'", "\n", "self", ".", "input_image_names", "=", "input_image_names", "\n", "\n", "if", "self", ".", "with_GT_masks", ":", "\n", "            ", "self", ".", "GT_mask_dir", "=", "GT_mask_dataset_path", "\n", "\n", "GT_mask_image_names", "=", "[", "item", "for", "item", "in", "os", ".", "listdir", "(", "self", ".", "GT_mask_dir", ")", "if", "\n", "os", ".", "path", ".", "isfile", "(", "os", ".", "path", ".", "join", "(", "self", ".", "GT_mask_dir", ",", "item", ")", ")", "]", "\n", "GT_mask_image_names", "=", "natsort", ".", "natsorted", "(", "GT_mask_image_names", ")", "\n", "\n", "self", ".", "GT_mask_image_names", "=", "GT_mask_image_names", "\n", "\n", "assert", "len", "(", "\n", "GT_mask_image_names", ")", "==", "self", ".", "dataset_length", ",", "f'error input dataset has length {self.dataset_length} but GT mask dataset lenght is {len(GT_mask_image_names)}'", "\n", "\n", "", "_", ",", "first_input_image", ",", "first_GT_mask_image", "=", "self", "[", "0", "]", "\n", "\n", "input_nc", ",", "self", ".", "image_height", ",", "self", ".", "image_width", "=", "first_input_image", ".", "shape", "\n", "_", ",", "GT_mask_image_height", ",", "GT_mask_image_width", "=", "first_GT_mask_image", ".", "shape", "\n", "\n", "assert", "GT_mask_image_height", "==", "self", ".", "image_height", "\n", "assert", "GT_mask_image_width", "==", "self", ".", "image_width", "\n", "\n", "print", "(", "f'dataset initialized  w = {self.image_width},h = {self.image_height} number of frames {self.dataset_length}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BrunoSauvalle_AST.background.dataset.Image_dataset.__len__": [[72, 74], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "dataset_length", "\n", "\n"]], "home.repos.pwc.inspect_result.BrunoSauvalle_AST.background.dataset.Image_dataset.__getitem__": [[75, 90], ["os.path.join", "cv2.imread", "cv2.cvtColor", "numpy.asarray", "numpy.transpose", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "os.path.join", "PIL.Image.open", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.array"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "            ", "input_image_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "input_dir", ",", "self", ".", "input_image_names", "[", "idx", "]", ")", "\n", "input_opencv_image", "=", "cv2", ".", "imread", "(", "input_image_path", ",", "cv2", ".", "IMREAD_UNCHANGED", ")", "# 0-255 HWC BGR", "\n", "input_opencv_image", "=", "cv2", ".", "cvtColor", "(", "input_opencv_image", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "input_np_image", "=", "np", ".", "asarray", "(", "input_opencv_image", ")", "\n", "input_np_image", "=", "np", ".", "transpose", "(", "input_np_image", ",", "(", "2", ",", "0", ",", "1", ")", ")", "# 0-255 CHW RGB", "\n", "input_tensor_image", "=", "torch", ".", "from_numpy", "(", "input_np_image", ")", ".", "type", "(", "torch", ".", "FloatTensor", ")", "#", "\n", "if", "self", ".", "with_GT_masks", ":", "\n", "                ", "GT_mask_image_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "GT_mask_dir", ",", "self", ".", "GT_mask_image_names", "[", "idx", "]", ")", "\n", "GT_mask_PIL_image", "=", "Image", ".", "open", "(", "GT_mask_image_path", ")", "\n", "GT_mask_tensor_image", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "GT_mask_PIL_image", ")", ")", "[", "None", "]", "\n", "", "else", ":", "\n", "                ", "c", ",", "h", ",", "w", "=", "input_tensor_image", ".", "shape", "\n", "GT_mask_tensor_image", "=", "torch", ".", "zeros", "(", "(", "1", ",", "h", ",", "w", ")", ")", "\n", "", "return", "idx", ",", "input_tensor_image", ",", "GT_mask_tensor_image", "# scalar RGB,  2D", "\n", "\n"]], "home.repos.pwc.inspect_result.BrunoSauvalle_AST.background.dataset.CLEVRTEX._index_with_bias_and_limit": [[107, 117], ["IndexError", "IndexError"], "methods", ["None"], ["def", "_index_with_bias_and_limit", "(", "self", ",", "idx", ")", ":", "\n", "        ", "if", "idx", ">=", "0", ":", "\n", "            ", "idx", "+=", "self", ".", "bias", "\n", "if", "idx", ">=", "self", ".", "limit", ":", "\n", "                ", "raise", "IndexError", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "idx", "=", "self", ".", "limit", "+", "idx", "\n", "if", "idx", "<", "self", ".", "bias", ":", "\n", "                ", "raise", "IndexError", "(", ")", "\n", "", "", "return", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.BrunoSauvalle_AST.background.dataset.CLEVRTEX._reindex": [[118, 169], ["print", "dataset.CLEVRTEX.basepath.glob", "print", "img_path.name.replace().replace", "img_path.name.replace().replace.lstrip", "len", "dataset.DatasetReadError", "dataset.DatasetReadError", "int", "msk_path.exists", "dataset.DatasetReadError", "dataset.DatasetReadError", "range", "img_path.name.replace", "met_path.exists", "dataset.DatasetReadError"], "methods", ["None"], ["", "def", "_reindex", "(", "self", ")", ":", "\n", "        ", "print", "(", "f'Indexing {self.basepath}'", ")", "\n", "\n", "img_index", "=", "{", "}", "\n", "msk_index", "=", "{", "}", "\n", "met_index", "=", "{", "}", "\n", "if", "env", ".", "dataset_name", "==", "\"clevrtex\"", ":", "\n", "            ", "print", "(", "'using CLEVRTEX prefix '", ")", "\n", "prefix", "=", "f\"CLEVRTEX_{self.dataset_variant}_\"", "\n", "", "elif", "env", ".", "dataset_name", "==", "\"clevr\"", ":", "\n", "            ", "prefix", "=", "f\"CLEVR_{self.dataset_variant}_\"", "\n", "\n", "", "img_suffix", "=", "\".png\"", "\n", "msk_suffix", "=", "\"_flat.png\"", "\n", "met_suffix", "=", "\".json\"", "\n", "\n", "_max", "=", "0", "\n", "for", "img_path", "in", "self", ".", "basepath", ".", "glob", "(", "f'**/{prefix}??????{img_suffix}'", ")", ":", "\n", "            ", "indstr", "=", "img_path", ".", "name", ".", "replace", "(", "prefix", ",", "''", ")", ".", "replace", "(", "img_suffix", ",", "''", ")", "\n", "msk_path", "=", "img_path", ".", "parent", "/", "f\"{prefix}{indstr}{msk_suffix}\"", "\n", "met_path", "=", "img_path", ".", "parent", "/", "f\"{prefix}{indstr}{met_suffix}\"", "\n", "indstr_stripped", "=", "indstr", ".", "lstrip", "(", "'0'", ")", "\n", "if", "indstr_stripped", ":", "\n", "                ", "ind", "=", "int", "(", "indstr", ")", "\n", "", "else", ":", "\n", "                ", "ind", "=", "0", "\n", "", "if", "ind", ">", "_max", ":", "\n", "                ", "_max", "=", "ind", "\n", "\n", "", "if", "not", "msk_path", ".", "exists", "(", ")", ":", "\n", "                ", "raise", "DatasetReadError", "(", "f\"Missing {msk_suffix.name}\"", ")", "\n", "\n", "", "if", "ind", "in", "img_index", ":", "\n", "                ", "raise", "DatasetReadError", "(", "f\"Duplica {ind}\"", ")", "\n", "\n", "", "img_index", "[", "ind", "]", "=", "img_path", "\n", "msk_index", "[", "ind", "]", "=", "msk_path", "\n", "if", "self", ".", "return_metadata", ":", "\n", "                ", "if", "not", "met_path", ".", "exists", "(", ")", ":", "\n", "                    ", "raise", "DatasetReadError", "(", "f\"Missing {met_path.name}\"", ")", "\n", "", "met_index", "[", "ind", "]", "=", "met_path", "\n", "", "else", ":", "\n", "                ", "met_index", "[", "ind", "]", "=", "None", "\n", "\n", "", "", "if", "len", "(", "img_index", ")", "==", "0", ":", "\n", "            ", "raise", "DatasetReadError", "(", "f\"No values found\"", ")", "\n", "", "missing", "=", "[", "i", "for", "i", "in", "range", "(", "0", ",", "_max", ")", "if", "i", "not", "in", "img_index", "]", "\n", "if", "missing", ":", "\n", "            ", "raise", "DatasetReadError", "(", "f\"Missing images numbers {missing}\"", ")", "\n", "\n", "", "return", "img_index", ",", "msk_index", ",", "met_index", "\n", "\n"]], "home.repos.pwc.inspect_result.BrunoSauvalle_AST.background.dataset.CLEVRTEX._variant_subfolder": [[170, 179], ["print", "print", "exit", "dataset.CLEVRTEX.dataset_variant.lower", "dataset.CLEVRTEX.dataset_variant.lower"], "methods", ["None"], ["", "def", "_variant_subfolder", "(", "self", ")", ":", "\n", "        ", "if", "env", ".", "dataset_name", "==", "'clevrtex'", ":", "\n", "            ", "print", "(", "'using clevrtex variant suffix'", ")", "\n", "return", "f\"clevrtex_{self.dataset_variant.lower()}\"", "\n", "", "elif", "env", ".", "dataset_name", "==", "'clevr'", ":", "\n", "            ", "return", "f\"clevr_{self.dataset_variant.lower()}\"", "\n", "", "else", ":", "\n", "            ", "print", "(", "'dataset name error - dataset.py line 170'", ")", "\n", "exit", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BrunoSauvalle_AST.background.dataset.CLEVRTEX.__init__": [[180, 225], ["print", "pathlib.Path", "dataset.CLEVRTEX._variant_subfolder", "dataset.CLEVRTEX._reindex", "print", "dataset.CLEVRTEX.splits.get", "isinstance", "isinstance", "dataset.DatasetReadError", "dataset.DatasetReadError", "dataset.CLEVRTEX.basepath.exists", "dataset.DatasetReadError", "int", "int", "len", "len"], "methods", ["home.repos.pwc.inspect_result.BrunoSauvalle_AST.background.dataset.CLEVRTEX._variant_subfolder", "home.repos.pwc.inspect_result.BrunoSauvalle_AST.background.dataset.CLEVRTEX._reindex"], ["", "", "def", "__init__", "(", "self", ",", "\n", "path", ",", "\n", "dataset_variant", "=", "'full'", ",", "\n", "split", "=", "'train'", ",", "\n", "crop", "=", "True", ",", "\n", "resize", "=", "(", "128", ",", "128", ")", ",", "\n", "return_metadata", "=", "True", ")", ":", "\n", "        ", "self", ".", "return_metadata", "=", "return_metadata", "\n", "self", ".", "crop", "=", "crop", "\n", "self", ".", "resize", "=", "resize", "\n", "self", ".", "image_height", "=", "resize", "[", "0", "]", "\n", "self", ".", "image_width", "=", "resize", "[", "1", "]", "\n", "if", "dataset_variant", "not", "in", "self", ".", "variants", ":", "\n", "            ", "raise", "DatasetReadError", "(", "f\"Unknown variant {dataset_variant}; [{', '.join(self.variants)}] available \"", ")", "\n", "\n", "", "if", "split", "not", "in", "self", ".", "splits", ":", "\n", "            ", "raise", "DatasetReadError", "(", "f\"Unknown split {split}; [{', '.join(self.splits)}] available \"", ")", "\n", "", "if", "dataset_variant", "==", "'outd'", ":", "\n", "# No dataset splits in", "\n", "            ", "split", "=", "None", "\n", "\n", "", "self", ".", "dataset_variant", "=", "dataset_variant", "\n", "self", ".", "split", "=", "split", "\n", "print", "(", "f'path to dataset is {path}'", ")", "\n", "self", ".", "basepath", "=", "Path", "(", "path", ")", "\n", "if", "not", "self", ".", "basepath", ".", "exists", "(", ")", ":", "\n", "            ", "raise", "DatasetReadError", "(", ")", "\n", "", "sub_fold", "=", "self", ".", "_variant_subfolder", "(", ")", "\n", "if", "self", ".", "basepath", ".", "name", "!=", "sub_fold", ":", "\n", "            ", "self", ".", "basepath", "=", "self", ".", "basepath", "/", "sub_fold", "\n", "#         try:", "\n", "#             with (self.basepath / 'manifest_ind.json').open('r') as inf:", "\n", "#                 self.index = json.load(inf)", "\n", "#         except (json.JSONDecodeError, IOError, FileNotFoundError):", "\n", "", "self", ".", "index", ",", "self", ".", "mask_index", ",", "self", ".", "metadata_index", "=", "self", ".", "_reindex", "(", ")", "\n", "\n", "print", "(", "f\"Sourced {dataset_variant} ({split}) from {self.basepath}\"", ")", "\n", "\n", "bias", ",", "limit", "=", "self", ".", "splits", ".", "get", "(", "split", ",", "(", "0.", ",", "1.", ")", ")", "\n", "if", "isinstance", "(", "bias", ",", "float", ")", ":", "\n", "            ", "bias", "=", "int", "(", "bias", "*", "len", "(", "self", ".", "index", ")", ")", "\n", "", "if", "isinstance", "(", "limit", ",", "float", ")", ":", "\n", "            ", "limit", "=", "int", "(", "limit", "*", "len", "(", "self", ".", "index", ")", ")", "\n", "", "self", ".", "limit", "=", "limit", "\n", "self", ".", "bias", "=", "bias", "\n", "\n"]], "home.repos.pwc.inspect_result.BrunoSauvalle_AST.background.dataset.CLEVRTEX._format_metadata": [[226, 247], ["objs.append"], "methods", ["None"], ["", "def", "_format_metadata", "(", "self", ",", "meta", ")", ":", "\n", "        ", "\"\"\"\n        Drop unimportanat, unsued or incorrect data from metadata.\n        Data may become incorrect due to transformations,\n        such as cropping and resizing would make pixel coordinates incorrect.\n        Furthermore, only VBG dataset has color assigned to objects, we delete the value for others.\n        \"\"\"", "\n", "objs", "=", "[", "]", "\n", "for", "obj", "in", "meta", "[", "'objects'", "]", ":", "\n", "            ", "o", "=", "{", "\n", "'material'", ":", "obj", "[", "'material'", "]", ",", "\n", "'shape'", ":", "obj", "[", "'shape'", "]", ",", "\n", "'size'", ":", "obj", "[", "'size'", "]", ",", "\n", "'rotation'", ":", "obj", "[", "'rotation'", "]", ",", "\n", "}", "\n", "if", "self", ".", "dataset_variant", "==", "'vbg'", ":", "\n", "                ", "o", "[", "'color'", "]", "=", "obj", "[", "'color'", "]", "\n", "", "objs", ".", "append", "(", "o", ")", "\n", "", "return", "{", "\n", "'ground_material'", ":", "meta", "[", "'ground_material'", "]", ",", "\n", "'objects'", ":", "objs", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.BrunoSauvalle_AST.background.dataset.CLEVRTEX.__len__": [[249, 251], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "limit", "-", "self", ".", "bias", "\n", "\n"]], "home.repos.pwc.inspect_result.BrunoSauvalle_AST.background.dataset.CLEVRTEX.__getitem__": [[252, 285], ["dataset.CLEVRTEX._index_with_bias_and_limit", "PIL.Image.open", "PIL.Image.open", "torchvision.to_tensor", "int", "img.resize.resize.crop", "msk.resize.resize.crop", "img.resize.resize.resize", "msk.resize.resize.resize", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.array", "numpy.array", "dataset.CLEVRTEX.metadata_index[].open", "json.load", "dataset.CLEVRTEX._format_metadata", "float", "min"], "methods", ["home.repos.pwc.inspect_result.BrunoSauvalle_AST.background.dataset.CLEVRTEX._index_with_bias_and_limit", "home.repos.pwc.inspect_result.BrunoSauvalle_AST.background.dataset.CLEVRTEX._format_metadata"], ["", "def", "__getitem__", "(", "self", ",", "ind", ")", ":", "\n", "        ", "ind", "=", "self", ".", "_index_with_bias_and_limit", "(", "ind", ")", "\n", "\n", "img", "=", "Image", ".", "open", "(", "self", ".", "index", "[", "ind", "]", ")", "\n", "msk", "=", "Image", ".", "open", "(", "self", ".", "mask_index", "[", "ind", "]", ")", "\n", "\n", "if", "self", ".", "crop", ":", "\n", "            ", "crop_size", "=", "int", "(", "0.8", "*", "float", "(", "min", "(", "img", ".", "width", ",", "img", ".", "height", ")", ")", ")", "\n", "img", "=", "img", ".", "crop", "(", "(", "(", "img", ".", "width", "-", "crop_size", ")", "//", "2", ",", "\n", "(", "img", ".", "height", "-", "crop_size", ")", "//", "2", ",", "\n", "(", "img", ".", "width", "+", "crop_size", ")", "//", "2", ",", "\n", "(", "img", ".", "height", "+", "crop_size", ")", "//", "2", ")", ")", "\n", "msk", "=", "msk", ".", "crop", "(", "(", "(", "msk", ".", "width", "-", "crop_size", ")", "//", "2", ",", "\n", "(", "msk", ".", "height", "-", "crop_size", ")", "//", "2", ",", "\n", "(", "msk", ".", "width", "+", "crop_size", ")", "//", "2", ",", "\n", "(", "msk", ".", "height", "+", "crop_size", ")", "//", "2", ")", ")", "\n", "", "if", "self", ".", "resize", ":", "\n", "            ", "img", "=", "img", ".", "resize", "(", "self", ".", "resize", ",", "resample", "=", "Image", ".", "BILINEAR", ")", "\n", "msk", "=", "msk", ".", "resize", "(", "self", ".", "resize", ",", "resample", "=", "Image", ".", "NEAREST", ")", "\n", "\n", "", "img", "=", "Ft", ".", "to_tensor", "(", "np", ".", "array", "(", "img", ")", "[", "...", ",", ":", "3", "]", ")", "\n", "msk", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "msk", ")", ")", "[", "None", "]", "\n", "# added 255* because background model uses 0-255 inputs", "\n", "ret", "=", "(", "ind", ",", "255.0", "*", "img", ",", "msk", ")", "\n", "\n", "if", "self", ".", "return_metadata", ":", "\n", "\n", "            ", "with", "self", ".", "metadata_index", "[", "ind", "]", ".", "open", "(", "'r'", ")", "as", "inf", ":", "\n", "                ", "meta", "=", "json", ".", "load", "(", "inf", ")", "\n", "# added 255* because background model uses 0-255 inputs", "\n", "", "ret", "=", "(", "ind", ",", "255.0", "*", "img", ",", "msk", ",", "self", ".", "_format_metadata", "(", "meta", ")", ")", "\n", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.BrunoSauvalle_AST.background.dataset.collate_fn": [[287, 291], ["torch.utils.data._utils.collate.default_collate", "torch.utils.data._utils.collate.default_collate"], "function", ["None"], ["", "", "def", "collate_fn", "(", "batch", ")", ":", "\n", "    ", "return", "(", "\n", "#  *torch.utils.data._utils.collate.default_collate([(b[0], b[1], b[2]) for b in batch]), [b[3] for b in batch])", "\n", "*", "torch", ".", "utils", ".", "data", ".", "_utils", ".", "collate", ".", "default_collate", "(", "[", "(", "b", "[", "0", "]", ",", "b", "[", "1", "]", ",", "b", "[", "2", "]", ")", "for", "b", "in", "batch", "]", ")", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BrunoSauvalle_AST.background.dataset.get_datasets": [[293, 353], ["dataset.CLEVRTEX", "dataset.CLEVRTEX", "print", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "ShapeStacksDataset", "ShapeStacksDataset", "dataset.Image_dataset", "dataset.Image_dataset", "dataset.Image_dataset", "print", "dataset.Image_dataset"], "function", ["None"], ["", "def", "get_datasets", "(", "batch_size", "=", "env", ".", "batch_size", ")", ":", "\n", "\n", "    ", "if", "env", ".", "dataset_name", "==", "\"clevrtex\"", "or", "env", ".", "dataset_name", "==", "'clevr'", ":", "\n", "\n", "        ", "train_dataset", "=", "CLEVRTEX", "(", "env", ".", "full_dataset_path", ",", "# Untar'ed", "\n", "dataset_variant", "=", "'full'", ",", "# 'full' for main CLEVRTEX, 'outd' for OOD, 'pbg','vbg','grassbg','camo' for variants.", "\n", "split", "=", "'train'", ",", "\n", "crop", "=", "True", ",", "\n", "resize", "=", "(", "env", ".", "image_height", ",", "env", ".", "image_width", ")", ",", "\n", "return_metadata", "=", "False", "# Useful only for evaluation, wastes time on I/O otherwise", "\n", ")", "\n", "\n", "test_dataset", "=", "CLEVRTEX", "(", "env", ".", "full_dataset_path", ",", "# Untar'ed", "\n", "dataset_variant", "=", "'full'", ",", "\n", "# 'full' for main CLEVRTEX, 'outd' for OOD, 'pbg','vbg','grassbg','camo' for variants.", "\n", "# split='test',", "\n", "split", "=", "'test'", ",", "\n", "crop", "=", "True", ",", "\n", "resize", "=", "(", "env", ".", "image_height", ",", "env", ".", "image_width", ")", ",", "\n", "return_metadata", "=", "False", "# Useful only for evaluation, wastes time on I/O otherwise", "\n", ")", "\n", "", "elif", "env", ".", "dataset_name", "==", "'shapestacks'", ":", "\n", "        ", "train_dataset", "=", "ShapeStacksDataset", "(", "mode", "=", "'train'", ",", "img_size", "=", "env", ".", "image_height", ")", "\n", "test_dataset", "=", "ShapeStacksDataset", "(", "mode", "=", "'test'", ",", "img_size", "=", "env", ".", "image_height", ")", "\n", "\n", "", "elif", "env", ".", "dataset_name", "==", "'objects_room'", ":", "\n", "        ", "train_dataset", "=", "Image_dataset", "(", "env", ".", "train_dataset_path", ",", "env", ".", "GT_train_dataset_path", ")", "\n", "test_dataset", "=", "Image_dataset", "(", "env", ".", "test_dataset_path", ",", "env", ".", "GT_test_dataset_path", ")", "\n", "\n", "", "else", ":", "\n", "        ", "assert", "env", ".", "train_dataset_path", "is", "not", "None", ",", "'dataset path not defined'", "\n", "train_dataset", "=", "Image_dataset", "(", "env", ".", "train_dataset_path", ",", "env", ".", "GT_train_dataset_path", ")", "\n", "if", "env", ".", "test_dataset_path", "is", "None", ":", "\n", "            ", "print", "(", "'warning : test dataset not defined, will use train dataset for tests'", ")", "\n", "test_dataset", "=", "train_dataset", "\n", "", "else", ":", "\n", "            ", "test_dataset", "=", "Image_dataset", "(", "env", ".", "test_dataset_path", ",", "env", ".", "GT_test_dataset_path", ")", "\n", "\n", "", "", "if", "env", ".", "dataset_name", "in", "[", "\"clevrtex\"", "]", ":", "\n", "        ", "print", "(", "'using collate_fn'", ")", "\n", "train_dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "train_dataset", ",", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "num_workers", "=", "4", ",", "\n", "drop_last", "=", "True", ",", "pin_memory", "=", "True", ",", "persistent_workers", "=", "True", ",", "\n", "collate_fn", "=", "collate_fn", ")", "\n", "test_dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "test_dataset", ",", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "num_workers", "=", "4", ",", "\n", "drop_last", "=", "True", ",", "pin_memory", "=", "True", ",", "persistent_workers", "=", "True", ",", "\n", "collate_fn", "=", "collate_fn", ")", "\n", "\n", "", "else", ":", "\n", "        ", "train_dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "train_dataset", ",", "batch_size", "=", "env", ".", "batch_size", ",", "\n", "num_workers", "=", "4", ",", "shuffle", "=", "True", ",", "\n", "drop_last", "=", "True", ",", "pin_memory", "=", "True", ",", "persistent_workers", "=", "True", ",", "\n", ")", "\n", "test_dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "test_dataset", ",", "batch_size", "=", "env", ".", "batch_size", ",", "\n", "num_workers", "=", "4", ",", "shuffle", "=", "True", ",", "\n", "drop_last", "=", "True", ",", "pin_memory", "=", "True", ",", "persistent_workers", "=", "True", ",", "\n", ")", "\n", "\n", "", "return", "train_dataset", ",", "train_dataloader", ",", "test_dataset", ",", "test_dataloader", "\n", "\n"]], "home.repos.pwc.inspect_result.BrunoSauvalle_AST.background.create_clevr_dataset._decode": [[61, 68], ["tensorflow.parse_single_example", "tensorflow.squeeze", "tensorflow.decode_raw"], "function", ["None"], ["def", "_decode", "(", "example_proto", ")", ":", "\n", "# Parse the input `tf.Example` proto using the feature description dict above.", "\n", "  ", "single_example", "=", "tf", ".", "parse_single_example", "(", "example_proto", ",", "features", ")", "\n", "for", "k", "in", "BYTE_FEATURES", ":", "\n", "    ", "single_example", "[", "k", "]", "=", "tf", ".", "squeeze", "(", "tf", ".", "decode_raw", "(", "single_example", "[", "k", "]", ",", "tf", ".", "uint8", ")", ",", "\n", "axis", "=", "-", "1", ")", "\n", "", "return", "single_example", "\n", "\n"]], "home.repos.pwc.inspect_result.BrunoSauvalle_AST.background.create_clevr_dataset.dataset": [[70, 85], ["tensorflow.data.TFRecordDataset", "tf.data.TFRecordDataset.map"], "function", ["None"], ["", "def", "dataset", "(", "tfrecords_path", ",", "read_buffer_size", "=", "None", ",", "map_parallel_calls", "=", "None", ")", ":", "\n", "  ", "\"\"\"Read, decompress, and parse the TFRecords file.\n  Args:\n    tfrecords_path: str. Path to the dataset file.\n    read_buffer_size: int. Number of bytes in the read buffer. See documentation\n      for `tf.data.TFRecordDataset.__init__`.\n    map_parallel_calls: int. Number of elements decoded asynchronously in\n      parallel. See documentation for `tf.data.Dataset.map`.\n  Returns:\n    An unbatched `tf.data.TFRecordDataset`.\n  \"\"\"", "\n", "raw_dataset", "=", "tf", ".", "data", ".", "TFRecordDataset", "(", "\n", "tfrecords_path", ",", "compression_type", "=", "COMPRESSION_TYPE", ",", "\n", "buffer_size", "=", "read_buffer_size", ")", "\n", "return", "raw_dataset", ".", "map", "(", "_decode", ",", "num_parallel_calls", "=", "map_parallel_calls", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BrunoSauvalle_AST.background.generate_background_dataset.compute_background_and_mask_using_trained_model": [[24, 79], ["data.to().type", "netBG", "torch.abs().permute().cpu().detach().numpy", "torch.abs().permute().cpu().detach().numpy", "error_predictions.cpu().detach().numpy().astype.cpu().detach().numpy().astype", "netBG.permute().cpu().detach().numpy().astype", "backgrounds.permute().cpu().detach().numpy().astype", "numpy.zeros", "numpy.zeros", "range", "netBE", "data.to().type.permute().cpu().detach().numpy().astype", "numpy.maximum", "data.to", "torch.abs().permute().cpu().detach", "torch.abs().permute().cpu().detach", "error_predictions.cpu().detach().numpy().astype.cpu().detach().numpy", "netBG.permute().cpu().detach().numpy", "backgrounds.permute().cpu().detach().numpy", "numpy.greater().astype", "numpy.ones", "cv2.morphologyEx", "numpy.ones", "cv2.morphologyEx", "numpy.sum", "data.to().type.permute().cpu().detach().numpy", "l1_errors[].astype", "torch.abs().permute().cpu", "torch.abs().permute().cpu", "error_predictions.cpu().detach().numpy().astype.cpu().detach", "netBG.permute().cpu().detach", "backgrounds.permute().cpu().detach", "error_predictions[].astype", "numpy.greater", "data.to().type.permute().cpu().detach", "torch.abs().permute", "torch.abs().permute", "error_predictions.cpu().detach().numpy().astype.cpu", "netBG.permute().cpu", "backgrounds.permute().cpu", "data.to().type.permute().cpu", "torch.abs", "torch.abs", "netBG.permute", "backgrounds.permute", "torch.sum", "torch.sum", "data.to().type.permute"], "function", ["None"], ["def", "compute_background_and_mask_using_trained_model", "(", "netBE", ",", "netBG", ",", "data", ")", ":", "\n", "    ", "\"\"\" compute  backgrounds and masks from a batch of images using trained model\n    data should be a batch of sample range 0-255\"\"\"", "\n", "\n", "images", "=", "{", "}", "\n", "real_images", "=", "data", ".", "to", "(", "env", ".", "device", ")", ".", "type", "(", "torch", ".", "cuda", ".", "FloatTensor", ")", "# range 0-255 Nx3xHxW RGB", "\n", "backgrounds_with_error_predictions", "=", "netBG", "(", "netBE", "(", "real_images", ")", ")", "# range 0-255 shape Nx4xHxW RGB+error pr\u00e9diction", "\n", "backgrounds", "=", "backgrounds_with_error_predictions", "[", ":", ",", "0", ":", "3", ",", ":", ",", ":", "]", "\n", "error_predictions", "=", "backgrounds_with_error_predictions", "[", ":", ",", "3", ",", ":", ",", ":", "]", "# NHW  0-255 float", "\n", "\n", "batch_size", "=", "data", ".", "shape", "[", "0", "]", "\n", "\n", "diffs", "=", "(", "torch", ".", "abs", "(", "(", "real_images", "-", "backgrounds", ")", ")", ")", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "# NHW3 RGB", "\n", "l1_errors", "=", "(", "0.333", "*", "np", ".", "sum", "(", "diffs", ",", "axis", "=", "3", ")", ")", ".", "astype", "(", "'uint8'", ")", "# NHW range 0-255", "\n", "images", "[", "'l_1'", "]", "=", "l1_errors", "\n", "\n", "error_predictions", "=", "error_predictions", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "'uint8'", ")", "# NHW 0-255", "\n", "images", "[", "'noise'", "]", "=", "error_predictions", "\n", "\n", "NWC_backgrounds_with_error_predictions", "=", "backgrounds_with_error_predictions", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "'uint8'", ")", "\n", "\n", "images", "[", "'backgrounds_with_error_prediction'", "]", "=", "NWC_backgrounds_with_error_predictions", "\n", "\n", "NWC_backgrounds", "=", "backgrounds", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "'uint8'", ")", "# NHW3 RGB", "\n", "backgrounds_opencv_format", "=", "NWC_backgrounds", "[", ":", ",", ":", ",", ":", ",", ":", ":", "-", "1", "]", "# NHWC BGR", "\n", "images", "[", "'backgrounds'", "]", "=", "backgrounds_opencv_format", "\n", "images", "[", "'real'", "]", "=", "real_images", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "'uint8'", ")", "[", ":", ",", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "\n", "# placeholders for masks", "\n", "masks_before_post_processing", "=", "np", ".", "zeros", "(", "(", "batch_size", ",", "env", ".", "image_height", ",", "env", ".", "image_width", ")", ")", "\n", "masks", "=", "np", ".", "zeros", "(", "(", "batch_size", ",", "env", ".", "image_height", ",", "env", ".", "image_width", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "\n", "        ", "corrected_dif", "=", "(", "np", ".", "maximum", "(", "0", ",", "l1_errors", "[", "i", "]", ".", "astype", "(", "'int16'", ")", "-", "env", ".", "alpha_2", "*", "error_predictions", "[", "i", "]", ".", "astype", "(", "'int16'", ")", ")", ")", "\n", "\n", "background_illumination", "=", "(", "torch", ".", "sum", "(", "backgrounds", "[", "i", "]", ")", "/", "(", "3", "*", "env", ".", "image_height", "*", "env", ".", "image_width", ")", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "# range 0-255", "\n", "\n", "mask_before_post_processing", "=", "255", "*", "np", ".", "greater", "(", "3", "*", "corrected_dif", ",", "env", ".", "alpha_1", "*", "background_illumination", ")", ".", "astype", "(", "'uint8'", ")", "\n", "\n", "masks_before_post_processing", "[", "i", ",", ":", ",", ":", "]", "=", "mask_before_post_processing", "\n", "\n", "if", "env", ".", "image_height", "<", "400", "and", "env", ".", "image_width", "<", "400", ":", "# no postprocessing on small images", "\n", "            ", "mask", "=", "mask_before_post_processing", "\n", "", "else", ":", "\n", "            ", "close_kernel", "=", "np", ".", "ones", "(", "(", "5", ",", "5", ")", ",", "np", ".", "uint8", ")", "\n", "mask", "=", "cv2", ".", "morphologyEx", "(", "mask_before_post_processing", ",", "cv2", ".", "MORPH_CLOSE", ",", "close_kernel", ")", "\n", "open_kernel", "=", "np", ".", "ones", "(", "(", "7", ",", "7", ")", ",", "np", ".", "uint8", ")", "\n", "mask", "=", "cv2", ".", "morphologyEx", "(", "mask", ",", "cv2", ".", "MORPH_OPEN", ",", "open_kernel", ")", "\n", "\n", "", "masks", "[", "i", ",", ":", ",", ":", "]", "=", "mask", "\n", "\n", "", "images", "[", "'thresholded'", "]", "=", "masks_before_post_processing", "\n", "images", "[", "'masks'", "]", "=", "masks", "\n", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.BrunoSauvalle_AST.background.generate_background_dataset.generate_images": [[81, 133], ["print", "numpy.array", "PIL.Image.new", "Image.new.putpalette", "enumerate", "tqdm.tqdm", "generate_background_dataset.compute_background_and_mask_using_trained_model", "range", "np.array.flatten().tolist", "cv2.imwrite", "cv2.cvtColor", "cv2.imwrite", "cv2.imwrite", "cv2.imwrite", "Image.fromarray.reshape().detach().numpy().astype", "PIL.Image.fromarray", "Image.fromarray.putpalette", "Image.fromarray.save", "np.array.flatten", "Image.fromarray.reshape().detach().numpy", "np.array.flatten().tolist", "Image.fromarray.reshape().detach", "np.array.flatten", "Image.fromarray.reshape"], "function", ["home.repos.pwc.inspect_result.BrunoSauvalle_AST.background.generate_background_dataset.compute_background_and_mask_using_trained_model"], ["", "def", "generate_images", "(", "dataloader", ",", "video_paths", ",", "netBE", ",", "netBG", ")", ":", "\n", "\n", "                ", "print", "(", "f\"generating images...\"", ")", "\n", "CMAP", "=", "np", ".", "array", "(", "[", "\n", "[", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "255", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "128", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "255", "]", ",", "\n", "[", "255", ",", "255", ",", "0", "]", ",", "\n", "[", "141", ",", "211", ",", "199", "]", ",", "\n", "[", "255", ",", "255", ",", "179", "]", ",", "\n", "[", "190", ",", "186", ",", "218", "]", ",", "\n", "[", "251", ",", "128", ",", "114", "]", ",", "\n", "[", "128", ",", "177", ",", "211", "]", ",", "\n", "[", "253", ",", "180", ",", "98", "]", ",", "\n", "[", "179", ",", "222", ",", "105", "]", ",", "\n", "[", "252", ",", "205", ",", "229", "]", ",", "\n", "[", "217", ",", "217", ",", "217", "]", "]", ")", "\n", "\n", "PALIMG", "=", "Image", ".", "new", "(", "'P'", ",", "(", "16", ",", "16", ")", ")", "\n", "PALIMG", ".", "putpalette", "(", "CMAP", ".", "flatten", "(", ")", ".", "tolist", "(", ")", "*", "4", ")", "\n", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "tqdm", "(", "dataloader", ")", ")", ":", "\n", "\n", "                        ", "indices", ",", "test_images", ",", "GT_masks", "=", "data", "\n", "images", "=", "compute_background_and_mask_using_trained_model", "(", "netBE", ",", "netBG", ",", "test_images", ")", "\n", "\n", "for", "j", "in", "range", "(", "test_images", ".", "shape", "[", "0", "]", ")", ":", "\n", "                            ", "index", "=", "1", "+", "i", "*", "env", ".", "batch_size", "+", "j", "\n", "\n", "if", "GT_masks", "is", "not", "None", ":", "\n", "                                ", "GT_mask", "=", "GT_masks", "[", "j", "]", "\n", "\n", "", "real_image", "=", "images", "[", "'real'", "]", "[", "j", "]", "\n", "cv2", ".", "imwrite", "(", "'%s/input_image_%06d.png'", "%", "(", "video_paths", "[", "'input_images'", "]", ",", "index", ")", ",", "\n", "real_image", ")", "\n", "\n", "background_with_error_prediction", "=", "images", "[", "'backgrounds_with_error_prediction'", "]", "[", "j", "]", "\n", "background_with_error_prediction", "=", "cv2", ".", "cvtColor", "(", "\n", "background_with_error_prediction", ",", "cv2", ".", "COLOR_RGBA2BGRA", ")", "\n", "cv2", ".", "imwrite", "(", "'%s/background_%06d.png'", "%", "(", "video_paths", "[", "'backgrounds_with_error_prediction'", "]", ",", "index", ")", ",", "\n", "background_with_error_prediction", ")", "\n", "\n", "if", "GT_masks", "is", "not", "None", ":", "\n", "                                ", "GT_mask", "=", "GT_mask", ".", "reshape", "(", "env", ".", "image_height", ",", "env", ".", "image_width", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "'uint8'", ")", "\n", "GT_mask", "=", "Image", ".", "fromarray", "(", "GT_mask", ",", "mode", "=", "'P'", ")", "\n", "GT_mask", ".", "putpalette", "(", "CMAP", ".", "flatten", "(", ")", ".", "tolist", "(", ")", "*", "4", ")", "\n", "GT_mask", ".", "save", "(", "'%s/GT_mask_%06d.png'", "%", "(", "video_paths", "[", "'GT_masks'", "]", ",", "index", ")", ")", "\n", "\n", "", "cv2", ".", "imwrite", "(", "'%s/background_%06d.png'", "%", "(", "video_paths", "[", "'backgrounds'", "]", ",", "index", ")", ",", "\n", "images", "[", "'backgrounds'", "]", "[", "j", "]", ")", "\n", "cv2", ".", "imwrite", "(", "'%s/bin%06d.png'", "%", "(", "video_paths", "[", "'masks'", "]", ",", "index", ")", ",", "images", "[", "'masks'", "]", "[", "j", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BrunoSauvalle_AST.background.generate_background_dataset.generate_images_using_trained_model": [[134, 179], ["dataset.get_datasets", "print", "torch.load", "torch.load", "print", "utils.setup_background_models", "netBE.load_state_dict", "netBG.load_state_dict", "print", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "video_paths.items", "print", "generate_background_dataset.generate_images", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "video_paths.items", "print", "generate_background_dataset.generate_images", "os.path.isdir", "os.mkdir", "os.path.isdir", "os.mkdir"], "function", ["home.repos.pwc.inspect_result.BrunoSauvalle_AST.background.dataset.get_datasets", "home.repos.pwc.inspect_result.BrunoSauvalle_AST.background.utils.setup_background_models", "home.repos.pwc.inspect_result.BrunoSauvalle_AST.None.MF_train.Training_state.load_state_dict", "home.repos.pwc.inspect_result.BrunoSauvalle_AST.None.MF_train.Training_state.load_state_dict", "home.repos.pwc.inspect_result.BrunoSauvalle_AST.background.generate_background_dataset.generate_images", "home.repos.pwc.inspect_result.BrunoSauvalle_AST.background.generate_background_dataset.generate_images"], ["", "", "", "def", "generate_images_using_trained_model", "(", ")", ":", "\n", "    ", "video_paths", "=", "{", "}", "\n", "results_path", "=", "env", ".", "results_dir_path", "\n", "train_dataset", ",", "train_dataloader", ",", "test_dataset", ",", "test_dataloader", "=", "dataset", ".", "get_datasets", "(", ")", "\n", "model_path", "=", "env", ".", "saved_model_path", "\n", "print", "(", "f'loading saved models from {model_path}'", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "model_path", ")", "\n", "encoder_state_dict", "=", "checkpoint", "[", "'encoder_state_dict'", "]", "\n", "generator_state_dict", "=", "checkpoint", "[", "'generator_state_dict'", "]", "\n", "if", "\"complexity \"", "in", "checkpoint", ":", "\n", "        ", "complexity", "=", "checkpoint", "[", "'complexity'", "]", "\n", "", "else", ":", "\n", "        ", "complexity", "=", "True", "\n", "\n", "", "print", "(", "f'complexity = {complexity}'", ")", "\n", "\n", "netBE", ",", "netBG", "=", "utils", ".", "setup_background_models", "(", "test_dataset", ".", "image_height", ",", "test_dataset", ".", "image_width", ",", "\n", "complexity", ")", "\n", "netBE", ".", "load_state_dict", "(", "encoder_state_dict", ")", "\n", "netBG", ".", "load_state_dict", "(", "generator_state_dict", ")", "\n", "print", "(", "'models succesfully loaded'", ")", "\n", "\n", "video_paths", "[", "'GT_masks'", "]", "=", "os", ".", "path", ".", "join", "(", "results_path", ",", "'GT_masks_train'", ")", "\n", "video_paths", "[", "'masks'", "]", "=", "os", ".", "path", ".", "join", "(", "results_path", ",", "'masks_train'", ")", "\n", "video_paths", "[", "'input_images'", "]", "=", "os", ".", "path", ".", "join", "(", "results_path", ",", "'input_images_train'", ")", "\n", "video_paths", "[", "'backgrounds'", "]", "=", "os", ".", "path", ".", "join", "(", "results_path", ",", "'background_images_train'", ")", "\n", "video_paths", "[", "'backgrounds_with_error_prediction'", "]", "=", "os", ".", "path", ".", "join", "(", "results_path", ",", "'backgrounds_rgba_train'", ")", "\n", "\n", "for", "k", ",", "dir_path", "in", "video_paths", ".", "items", "(", ")", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "isdir", "(", "dir_path", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "dir_path", ")", "\n", "", "", "print", "(", "'starting background dataset generation on train dataset'", ")", "\n", "generate_images", "(", "train_dataloader", ",", "video_paths", ",", "netBE", ",", "netBG", ")", "\n", "\n", "video_paths", "[", "'GT_masks'", "]", "=", "os", ".", "path", ".", "join", "(", "results_path", ",", "'GT_masks_test'", ")", "\n", "video_paths", "[", "'masks'", "]", "=", "os", ".", "path", ".", "join", "(", "results_path", ",", "'masks_test'", ")", "\n", "video_paths", "[", "'input_images'", "]", "=", "os", ".", "path", ".", "join", "(", "results_path", ",", "'input_images_test'", ")", "\n", "video_paths", "[", "'backgrounds'", "]", "=", "os", ".", "path", ".", "join", "(", "results_path", ",", "'background_images_test'", ")", "\n", "video_paths", "[", "'backgrounds_with_error_prediction'", "]", "=", "os", ".", "path", ".", "join", "(", "results_path", ",", "\n", "'backgrounds_rgba_test'", ")", "\n", "for", "k", ",", "dir_path", "in", "video_paths", ".", "items", "(", ")", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "isdir", "(", "dir_path", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "dir_path", ")", "\n", "", "", "print", "(", "'starting background dataset generation on test dataset'", ")", "\n", "generate_images", "(", "test_dataloader", ",", "video_paths", ",", "netBE", ",", "netBG", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BrunoSauvalle_AST.background.stats.compute_confusion_matrix": [[9, 48], ["numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "print", "numpy.logical_and", "numpy.logical_and", "numpy.logical_and", "numpy.logical_and", "numpy.logical_and().astype", "numpy.logical_and().astype", "numpy.logical_and().astype", "numpy.logical_and().astype", "numpy.sum().astype().astype", "numpy.amax", "print", "exit", "numpy.logical_and", "numpy.logical_and", "numpy.logical_and", "numpy.logical_and", "numpy.sum().astype", "numpy.amax", "numpy.sum", "numpy.sum", "np.amax.astype"], "function", ["None"], ["def", "compute_confusion_matrix", "(", "dataset_name", ",", "foreground_mask", ",", "ground_truth_input", ",", "use_roi", "=", "False", ",", "roi_mask", "=", "None", ")", ":", "\n", "\n", "    ", "if", "dataset_name", "in", "[", "\"clevrtex\"", ",", "\"shapestacks\"", ",", "\"objects_room\"", "]", ":", "\n", "        ", "ground_truth_input", "=", "np", ".", "sum", "(", "ground_truth_input", ".", "astype", "(", "'int16'", ")", ",", "axis", "=", "2", ")", ".", "astype", "(", "bool", ")", ".", "astype", "(", "int", ")", "*", "255", "\n", "\n", "", "elif", "dataset_name", "==", "'LASIESTA'", ":", "\n", "# cf definition of ground_truth_inputs on LASIESTA website", "\n", "# conversion to format 255=foreground, 0=background 128 = undefined", "\n", "        ", "max_ground_truth_input", "=", "np", ".", "amax", "(", "ground_truth_input", ",", "axis", "=", "2", ")", "\n", "undefined_class_mask", "=", "(", "np", ".", "sum", "(", "ground_truth_input", ",", "axis", "=", "2", ")", "==", "765", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "ground_truth_input", "=", "undefined_class_mask", "*", "128", "+", "(", "1", "-", "undefined_class_mask", ")", "*", "max_ground_truth_input", "\n", "", "elif", "dataset_name", "==", "\"CDnet\"", ":", "\n", "        ", "if", "ground_truth_input", ".", "ndim", "==", "3", ":", "\n", "            ", "ground_truth_input", "=", "np", ".", "amax", "(", "ground_truth_input", ",", "axis", "=", "2", ")", "\n", "", "if", "roi_mask", ".", "shape", "!=", "ground_truth_input", ".", "shape", ":", "# roi shape for \"traffic\" video has wrong shape", "\n", "            ", "use_roi", "=", "False", "\n", "", "", "else", ":", "\n", "        ", "print", "(", "'dataset name not recognized _ exit from stats.py'", ")", "\n", "exit", "(", "0", ")", "\n", "\n", "", "true_mask", "=", "(", "foreground_mask", "==", "255", ")", "\n", "false_mask", "=", "(", "foreground_mask", "==", "0", ")", "\n", "true_GT", "=", "(", "ground_truth_input", "==", "255", ")", "\n", "false_GT", "=", "(", "ground_truth_input", "==", "0", ")", "\n", "\n", "if", "use_roi", ":", "\n", "        ", "true_mask", "=", "np", ".", "logical_and", "(", "true_mask", ",", "roi_mask", ")", "\n", "false_mask", "=", "np", ".", "logical_and", "(", "false_mask", ",", "roi_mask", ")", "\n", "true_GT", "=", "np", ".", "logical_and", "(", "true_GT", ",", "roi_mask", ")", "\n", "false_GT", "=", "np", ".", "logical_and", "(", "false_GT", ",", "roi_mask", ")", "\n", "\n", "", "tp", "=", "np", ".", "sum", "(", "np", ".", "logical_and", "(", "true_mask", ",", "true_GT", ")", ".", "astype", "(", "np", ".", "int", ")", ")", "\n", "fp", "=", "np", ".", "sum", "(", "np", ".", "logical_and", "(", "true_mask", ",", "false_GT", ")", ".", "astype", "(", "np", ".", "int", ")", ")", "\n", "tn", "=", "np", ".", "sum", "(", "np", ".", "logical_and", "(", "false_mask", ",", "false_GT", ")", ".", "astype", "(", "np", ".", "int", ")", ")", "\n", "fn", "=", "np", ".", "sum", "(", "np", ".", "logical_and", "(", "false_mask", ",", "true_GT", ")", ".", "astype", "(", "np", ".", "int", ")", ")", "\n", "\n", "print", "(", "f'tp = {tp} tn = {tn} fp = {fp} fn = {fn}'", ")", "\n", "\n", "return", "tp", ",", "tn", ",", "fp", ",", "fn", "\n", "\n"]], "home.repos.pwc.inspect_result.BrunoSauvalle_AST.background.stats.compute_statistics": [[49, 102], ["natsort.natsorted", "natsort.natsorted", "tqdm.tqdm", "os.listdir", "os.listdir", "os.path.isfile", "open", "open.readline().split", "int", "int", "open.close", "os.path.isfile", "print", "cv2.imread", "numpy.asarray", "zip", "os.path.join", "os.path.join", "cv2.imread", "cv2.imread", "stats.compute_confusion_matrix", "print", "open.readline"], "function", ["home.repos.pwc.inspect_result.BrunoSauvalle_AST.background.stats.compute_confusion_matrix"], ["", "def", "compute_statistics", "(", "dataset_name", ",", "video_name", ",", "masks_path", ",", "GTs_path", ",", "roi_path", "=", "None", ",", "temporal_roi_path", "=", "None", ")", ":", "\n", "\n", "            ", "mask_ids", "=", "natsort", ".", "natsorted", "(", "os", ".", "listdir", "(", "masks_path", ")", ")", "\n", "GT_ids", "=", "natsort", ".", "natsorted", "(", "os", ".", "listdir", "(", "GTs_path", ")", ")", "\n", "\n", "roi_mask", "=", "None", "\n", "use_roi", "=", "False", "\n", "\n", "if", "temporal_roi_path", "!=", "None", ":", "# for CDnet , which uses temporal roi", "\n", "\n", "                ", "assert", "os", ".", "path", ".", "isfile", "(", "temporal_roi_path", ")", ",", "f\"error, no temporal roi at {temporal_roi_path}\"", "\n", "f", "=", "open", "(", "temporal_roi_path", ",", "\"r\"", ")", "\n", "start_idx", ",", "end_idx", "=", "f", ".", "readline", "(", ")", ".", "split", "(", ")", "\n", "start_idx", "=", "int", "(", "start_idx", ")", "\n", "end_idx", "=", "int", "(", "end_idx", ")", "\n", "f", ".", "close", "(", ")", "\n", "mask_ids", "=", "mask_ids", "[", "start_idx", ":", "end_idx", "+", "1", "]", "\n", "GT_ids", "=", "GT_ids", "[", "start_idx", ":", "end_idx", "+", "1", "]", "\n", "\n", "", "if", "roi_path", "!=", "None", ":", "# for CDnet , which uses spatial roi", "\n", "                ", "assert", "os", ".", "path", ".", "isfile", "(", "roi_path", ")", ",", "f\"error, no roi found at {roi_path}\"", "\n", "print", "(", "'using roi'", ")", "\n", "roi", "=", "cv2", ".", "imread", "(", "roi_path", ",", "cv2", ".", "IMREAD_UNCHANGED", ")", "\n", "roi", "=", "np", ".", "asarray", "(", "roi", ")", "\n", "roi_mask", "=", "(", "roi", "==", "255", ")", "\n", "use_roi", "=", "True", "\n", "\n", "", "TP", "=", "0", "\n", "TN", "=", "0", "\n", "FP", "=", "0", "\n", "FN", "=", "0", "\n", "\n", "for", "mask_id", ",", "GT_id", "in", "tqdm", "(", "zip", "(", "mask_ids", ",", "GT_ids", ")", ")", ":", "\n", "                ", "mask_path", "=", "os", ".", "path", ".", "join", "(", "masks_path", ",", "mask_id", ")", "\n", "GT_path", "=", "os", ".", "path", ".", "join", "(", "GTs_path", ",", "GT_id", ")", "\n", "mask", "=", "cv2", ".", "imread", "(", "mask_path", ",", "cv2", ".", "IMREAD_UNCHANGED", ")", "\n", "ground_truth_input", "=", "cv2", ".", "imread", "(", "GT_path", ",", "cv2", ".", "IMREAD_UNCHANGED", ")", "# HWC", "\n", "\n", "tp", ",", "tn", ",", "fp", ",", "fn", "=", "compute_confusion_matrix", "(", "dataset_name", ",", "mask", ",", "ground_truth_input", ",", "use_roi", ",", "roi_mask", ")", "\n", "TP", "+=", "tp", "\n", "TN", "+=", "tn", "\n", "FP", "+=", "fp", "\n", "FN", "+=", "fn", "\n", "\n", "", "if", "TP", "+", "FP", "+", "FN", ">", "0", ":", "\n", "                ", "FM", "=", "TP", "/", "(", "TP", "+", "0.5", "*", "(", "FP", "+", "FN", ")", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "'warning : no foreground object in sequence, 100% true negatives !'", ")", "\n", "FM", "=", "1", "\n", "", "recall", "=", "TP", "/", "(", "TP", "+", "FN", ")", "\n", "precision", "=", "TP", "/", "(", "TP", "+", "FP", ")", "\n", "statistics", "=", "f'video {video_name} :  FM={FM}, precision = {precision} recall = {recall} TP = {TP} TN = {TN} FP= {FP},FN= {FN} '", "\n", "return", "statistics", "\n", "", ""]], "home.repos.pwc.inspect_result.BrunoSauvalle_AST.background.utils.setup_archive": [[13, 37], ["datetime.datetime.now", "now.isoformat.isoformat", "os.path.join", "os.makedirs", "print", "print"], "function", ["None"], ["def", "setup_archive", "(", ")", ":", "\n", "#project_root = '/workspace/PycharmProjects/SCOD/MOS/MF/background'", "\n", "#root_arch = '/workspace/PycharmProjects/SCOD/MOS/MF/background/background_outputs'", "\n", "#root_arch = env.training_images_output_directory", "\n", "    ", "now", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "now", "=", "now", ".", "isoformat", "(", ")", "\n", "outf", "=", "os", ".", "path", ".", "join", "(", "env", ".", "training_images_output_directory", ",", "now", ")", "\n", "\n", "try", ":", "\n", "        ", "os", ".", "makedirs", "(", "outf", ")", "\n", "print", "(", "f'training images are stored in directory {outf}'", ")", "\n", "", "except", "OSError", ":", "\n", "        ", "print", "(", "f'warning : cannot create directory {outf}'", ")", "\n", "pass", "\n", "\n", "# autosave", "\n", "#shutil.copyfile(os.path.join(project_root, 'dataset.py'), os.path.join(outf, 'dataset-arch.py'))", "\n", "#shutil.copyfile(os.path.join(project_root, 'generate_background_dataset.py'), os.path.join(outf, 'generate_images-arch.py'))", "\n", "#shutil.copyfile(os.path.join(project_root, 'train.py'), os.path.join(outf, 'train-arch.py'))", "\n", "#shutil.copyfile(os.path.join(project_root, 'utils.py'), os.path.join(outf, 'utils-arch.py'))", "\n", "#shutil.copyfile(os.path.join(project_root, 'models.py'), os.path.join(outf, 'models-arch.py'))", "\n", "#shutil.copyfile(os.path.join(project_root, 'config.py'), os.path.join(outf, 'config-arch.py'))", "\n", "\n", "", "return", "outf", ",", "now", "\n", "\n"]], "home.repos.pwc.inspect_result.BrunoSauvalle_AST.background.utils.setup_background_models": [[38, 64], ["models.Background_Encoder", "models.Background_Generator", "models.Background_Encoder.eval", "models.Background_Generator.eval", "print", "models.Background_Encoder.to", "models.Background_Generator.to", "torch.zeros().to", "models.Background_Encoder.", "models.Background_Generator.", "print", "print", "print", "models.Background_Encoder.", "print", "pytorch_model_summary.summary", "torch.zeros().to.to", "pytorch_model_summary.summary", "torch.zeros", "torch.zeros().to.to", "config.env.image_height", "config.env.image_width"], "function", ["None"], ["", "def", "setup_background_models", "(", "image_height", ",", "image_width", ",", "complexity", "=", "False", ",", "test_model", "=", "True", ")", ":", "\n", "    ", "\"\"\"creates, tests and return background model before training  \"\"\"", "\n", "\n", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "netBE", "=", "models", ".", "Background_Encoder", "(", "image_height", ",", "image_width", ",", "complexity", ")", "\n", "netBG", "=", "models", ".", "Background_Generator", "(", "image_height", ",", "image_width", ",", "complexity", ")", "\n", "\n", "netBE", ".", "eval", "(", ")", "\n", "netBG", ".", "eval", "(", ")", "\n", "print", "(", "f'pushing models on device {env.device}'", ")", "\n", "netBE", ".", "to", "(", "env", ".", "device", ")", "\n", "netBG", ".", "to", "(", "env", ".", "device", ")", "\n", "\n", "if", "test_model", ":", "\n", "        ", "test_image", "=", "torch", ".", "zeros", "(", "(", "1", ",", "3", ",", "image_height", ",", "image_width", ")", ")", ".", "to", "(", "env", ".", "device", ")", "\n", "background_latents", "=", "netBE", "(", "test_image", ")", "\n", "background_test", "=", "netBG", "(", "background_latents", ")", "\n", "print", "(", "f'description background encoder'", ")", "\n", "print", "(", "summary", "(", "netBE", ",", "test_image", ".", "to", "(", "env", ".", "device", ")", ",", "show_input", "=", "False", ")", ")", "\n", "print", "(", "f'description background generator'", ")", "\n", "background_latents", "=", "netBE", "(", "test_image", ".", "to", "(", "env", ".", "device", ")", ")", "\n", "print", "(", "summary", "(", "netBG", ",", "background_latents", ",", "show_input", "=", "False", ")", ")", "\n", "\n", "", "return", "netBE", ",", "netBG", "\n", "\n"]], "home.repos.pwc.inspect_result.BrunoSauvalle_AST.background.utils.save_trained_model": [[65, 69], ["torch.save", "optimizer.state_dict", "netBE.state_dict", "netBG.state_dict"], "function", ["home.repos.pwc.inspect_result.BrunoSauvalle_AST.None.MF_train.Training_state.state_dict", "home.repos.pwc.inspect_result.BrunoSauvalle_AST.None.MF_train.Training_state.state_dict", "home.repos.pwc.inspect_result.BrunoSauvalle_AST.None.MF_train.Training_state.state_dict"], ["", "def", "save_trained_model", "(", "netBE", ",", "netBG", ",", "optimizer", ",", "complexity", ",", "model_path", ")", ":", "\n", "    ", "torch", ".", "save", "(", "{", "'optimizer_state_dict'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "'encoder_state_dict'", ":", "netBE", ".", "state_dict", "(", ")", ",", "\n", "'generator_state_dict'", ":", "netBG", ".", "state_dict", "(", ")", ",", "'complexity'", ":", "complexity", "\n", "}", ",", "model_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BrunoSauvalle_AST.background.utils.get_trained_model": [[70, 86], ["torch.load", "utils.setup_background_models", "print", "netBG.load_state_dict", "netBE.load_state_dict", "print"], "function", ["home.repos.pwc.inspect_result.BrunoSauvalle_AST.background.utils.setup_background_models", "home.repos.pwc.inspect_result.BrunoSauvalle_AST.None.MF_train.Training_state.load_state_dict", "home.repos.pwc.inspect_result.BrunoSauvalle_AST.None.MF_train.Training_state.load_state_dict"], ["", "def", "get_trained_model", "(", ")", ":", "\n", "\n", "        ", "model_path", "=", "env", ".", "saved_model_path", "\n", "checkpoint", "=", "torch", ".", "load", "(", "model_path", ")", "\n", "complexity", "=", "checkpoint", "[", "'complexity'", "]", "\n", "netBE", ",", "netBG", "=", "setup_background_models", "(", "env", ".", "image_height", ",", "env", ".", "image_width", ",", "\n", "complexity", ")", "\n", "print", "(", "f'loading saved models from {model_path}'", ")", "\n", "\n", "generator_state_dict", "=", "checkpoint", "[", "'generator_state_dict'", "]", "\n", "encoder_state_dict", "=", "checkpoint", "[", "'encoder_state_dict'", "]", "\n", "netBG", ".", "load_state_dict", "(", "generator_state_dict", ")", "\n", "netBE", ".", "load_state_dict", "(", "encoder_state_dict", ")", "\n", "print", "(", "'models succesfully loaded'", ")", "\n", "\n", "return", "netBE", ",", "netBG", "\n", "\n"]]}