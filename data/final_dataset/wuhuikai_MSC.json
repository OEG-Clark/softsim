{"home.repos.pwc.inspect_result.wuhuikai_MSC.parse_replay.replay2global_features.process_replay": [[27, 115], ["zip", "list", "list", "len", "states.append", "[].append", "feat.reverse_action", "func_name.split"], "function", ["None"], ["def", "process_replay", "(", "sampled_action", ",", "actions", ",", "observations", ",", "feat", ",", "units_info", ",", "reward", ")", ":", "\n", "    ", "states", "=", "[", "]", "\n", "\n", "for", "frame_id", ",", "action", ",", "obs", "in", "zip", "(", "sampled_action", ",", "actions", ",", "observations", ")", ":", "\n", "        ", "state", "=", "{", "}", "\n", "# actions", "\n", "state", "[", "'action'", "]", "=", "None", "\n", "if", "action", "is", "not", "None", ":", "\n", "            ", "try", ":", "\n", "                ", "func_id", "=", "feat", ".", "reverse_action", "(", "action", ")", ".", "function", "\n", "func_name", "=", "FUNCTIONS", "[", "func_id", "]", ".", "name", "\n", "if", "func_name", ".", "split", "(", "'_'", ")", "[", "0", "]", "in", "{", "'Build'", ",", "'Train'", ",", "'Research'", ",", "'Morph'", ",", "'Cancel'", ",", "'Halt'", ",", "'Stop'", "}", ":", "\n", "                    ", "state", "[", "'action'", "]", "=", "(", "func_id", ",", "func_name", ")", "\n", "", "", "except", "ValueError", ":", "\n", "                ", "pass", "\n", "\n", "", "", "observation", "=", "obs", ".", "observation", "\n", "#####################################################", "\n", "# frame_id", "\n", "assert", "frame_id", "==", "observation", ".", "game_loop", "-", "1", "\n", "state", "[", "'frame_id'", "]", "=", "frame_id", "\n", "# reward", "\n", "state", "[", "'reward'", "]", "=", "reward", "\n", "\n", "state", "[", "'score_cumulative'", "]", "=", "[", "\n", "observation", ".", "score", ".", "score", ",", "\n", "observation", ".", "score", ".", "score_details", ".", "idle_production_time", ",", "\n", "observation", ".", "score", ".", "score_details", ".", "idle_worker_time", ",", "\n", "observation", ".", "score", ".", "score_details", ".", "total_value_units", ",", "\n", "observation", ".", "score", ".", "score_details", ".", "total_value_structures", ",", "\n", "observation", ".", "score", ".", "score_details", ".", "killed_value_units", ",", "\n", "observation", ".", "score", ".", "score_details", ".", "killed_value_structures", ",", "\n", "observation", ".", "score", ".", "score_details", ".", "collected_minerals", ",", "\n", "observation", ".", "score", ".", "score_details", ".", "collected_vespene", ",", "\n", "observation", ".", "score", ".", "score_details", ".", "collection_rate_minerals", ",", "\n", "observation", ".", "score", ".", "score_details", ".", "collection_rate_vespene", ",", "\n", "observation", ".", "score", ".", "score_details", ".", "spent_minerals", ",", "\n", "observation", ".", "score", ".", "score_details", ".", "spent_vespene", ",", "\n", "]", "\n", "# resources", "\n", "resources", "=", "observation", ".", "player_common", "\n", "state", "[", "'minerals'", "]", "=", "resources", ".", "minerals", "\n", "state", "[", "'vespene'", "]", "=", "resources", ".", "vespene", "\n", "state", "[", "'food_cap'", "]", "=", "resources", ".", "food_cap", "\n", "state", "[", "'food_used'", "]", "=", "resources", ".", "food_used", "\n", "state", "[", "'food_army'", "]", "=", "resources", ".", "food_army", "\n", "state", "[", "'food_workers'", "]", "=", "resources", ".", "food_workers", "\n", "state", "[", "'idle_worker_count'", "]", "=", "resources", ".", "idle_worker_count", "\n", "state", "[", "'army_count'", "]", "=", "resources", ".", "army_count", "\n", "state", "[", "'warp_gate_count'", "]", "=", "resources", ".", "warp_gate_count", "\n", "state", "[", "'larva_count'", "]", "=", "resources", ".", "larva_count", "\n", "#####################################################", "\n", "# alert", "\n", "state", "[", "'alert'", "]", "=", "list", "(", "observation", ".", "alerts", ")", "\n", "\n", "#####################################################", "\n", "### raw data", "\n", "raw_data", "=", "observation", ".", "raw_data", "\n", "## player", "\n", "player", "=", "raw_data", ".", "player", "\n", "# upgrades", "\n", "state", "[", "'upgrades'", "]", "=", "list", "(", "player", ".", "upgrade_ids", ")", "\n", "# power", "\n", "state", "[", "'n_power_source'", "]", "=", "len", "(", "player", ".", "power_sources", ")", "\n", "#####################################################", "\n", "## units", "\n", "state", "[", "'friendly_units'", "]", "=", "{", "}", "\n", "state", "[", "'enemy_units'", "]", "=", "{", "}", "\n", "for", "unit", "in", "raw_data", ".", "units", ":", "\n", "            ", "if", "unit", ".", "display_type", "==", "3", ":", "\n", "                ", "continue", "\n", "", "if", "unit", ".", "alliance", "!=", "1", "and", "unit", ".", "alliance", "!=", "4", ":", "\n", "                ", "continue", "\n", "# Friendly or Enemy", "\n", "", "units", "=", "state", "[", "'friendly_units'", "]", "if", "unit", ".", "alliance", "==", "1", "else", "state", "[", "'enemy_units'", "]", "\n", "# Already have this unit_type ?", "\n", "unit_type", "=", "unit", ".", "unit_type", "\n", "if", "unit_type", "not", "in", "units", ":", "\n", "                ", "units", "[", "unit_type", "]", "=", "{", "'units'", ":", "[", "]", ",", "'name'", ":", "units_info", "[", "unit_type", "]", "}", "\n", "# Basic info", "\n", "", "unit_info", "=", "{", "'tag'", ":", "unit", ".", "tag", ",", "\n", "'build_progress'", ":", "unit", ".", "build_progress", "}", "\n", "\n", "units", "[", "unit_type", "]", "[", "'units'", "]", ".", "append", "(", "unit_info", ")", "\n", "\n", "", "states", ".", "append", "(", "state", ")", "\n", "\n", "", "return", "states", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_MSC.parse_replay.replay2global_features.parse_replay": [[116, 147], ["os.path.isfile", "pysc2.lib.features.Features", "replay2global_features.process_replay", "os.path.join", "open", "json.load", "pysc2.lib.static_data.StaticData", "google.protobuf.json_format.Parse", "open", "json.load", "open", "json.load", "len", "len", "len", "len", "open", "json.dump", "os.path.join", "google.protobuf.json_format.Parse", "s2clientprotocol.sc2api_pb2.ResponseGameInfo", "os.path.join", "google.protobuf.json_format.Parse", "stream.parse", "os.path.join", "s2clientprotocol.sc2api_pb2.ResponseData", "len", "s2clientprotocol.sc2api_pb2.Action", "os.path.join"], "function", ["home.repos.pwc.inspect_result.wuhuikai_MSC.parse_replay.parse_replay.ReplayProcessor.process_replay"], ["", "def", "parse_replay", "(", "replay_player_path", ",", "sampled_action_path", ",", "reward", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "isfile", "(", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "parsed_replay_path", ",", "'GlobalFeatures'", ",", "replay_player_path", ")", ")", ":", "\n", "        ", "return", "\n", "\n", "# Global Info", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "parsed_replay_path", ",", "'GlobalInfos'", ",", "replay_player_path", ")", ")", "as", "f", ":", "\n", "        ", "global_info", "=", "json", ".", "load", "(", "f", ")", "\n", "", "units_info", "=", "static_data", ".", "StaticData", "(", "Parse", "(", "global_info", "[", "'data_raw'", "]", ",", "sc_pb", ".", "ResponseData", "(", ")", ")", ")", ".", "units", "\n", "feat", "=", "features", ".", "Features", "(", "Parse", "(", "global_info", "[", "'game_info'", "]", ",", "sc_pb", ".", "ResponseGameInfo", "(", ")", ")", ")", "\n", "\n", "# Sampled Actions", "\n", "with", "open", "(", "sampled_action_path", ")", "as", "f", ":", "\n", "        ", "sampled_action", "=", "json", ".", "load", "(", "f", ")", "\n", "", "sampled_action_id", "=", "[", "id", "//", "FLAGS", ".", "step_mul", "+", "1", "for", "id", "in", "sampled_action", "]", "\n", "\n", "# Actions", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "parsed_replay_path", ",", "'Actions'", ",", "replay_player_path", ")", ")", "as", "f", ":", "\n", "        ", "actions", "=", "json", ".", "load", "(", "f", ")", "\n", "", "actions", "=", "[", "None", "if", "len", "(", "actions", "[", "idx", "]", ")", "==", "0", "else", "Parse", "(", "actions", "[", "idx", "]", "[", "0", "]", ",", "sc_pb", ".", "Action", "(", ")", ")", "\n", "for", "idx", "in", "sampled_action_id", "]", "\n", "\n", "# Observations", "\n", "observations", "=", "[", "obs", "for", "obs", "in", "stream", ".", "parse", "(", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "parsed_replay_path", ",", "\n", "'SampledObservations'", ",", "replay_player_path", ")", ",", "sc_pb", ".", "ResponseObservation", ")", "]", "\n", "\n", "assert", "len", "(", "sampled_action", ")", "==", "len", "(", "sampled_action_id", ")", "==", "len", "(", "actions", ")", "==", "len", "(", "observations", ")", "\n", "\n", "states", "=", "process_replay", "(", "sampled_action", ",", "actions", ",", "observations", ",", "feat", ",", "units_info", ",", "reward", ")", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "parsed_replay_path", ",", "'GlobalFeatures'", ",", "replay_player_path", ")", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "states", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_MSC.parse_replay.replay2global_features.main": [[148, 176], ["os.path.join", "set", "tqdm.tqdm", "open", "sorted", "os.path.basename().split", "race_vs_race.split", "os.path.join", "google.protobuf.json_format.Parse", "os.path.basename", "os.path.join", "tqdm.tqdm.update", "json.load", "os.path.isdir", "os.makedirs", "len", "open", "json.load", "s2clientprotocol.sc2api_pb2.ResponseReplayInfo", "s2clientprotocol.sc2api_pb2.Race.Name", "os.path.join", "replay2global_features.parse_replay", "os.path.basename"], "function", ["home.repos.pwc.inspect_result.wuhuikai_MSC.extract_features.game_state.GameState.update", "home.repos.pwc.inspect_result.wuhuikai_MSC.extract_features.global_feature_vector.parse_replay"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "with", "open", "(", "FLAGS", ".", "hq_replay_set", ")", "as", "f", ":", "\n", "        ", "replay_list", "=", "sorted", "(", "json", ".", "load", "(", "f", ")", ")", "\n", "\n", "", "race_vs_race", "=", "os", ".", "path", ".", "basename", "(", "FLAGS", ".", "hq_replay_set", ")", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "global_feature_path", "=", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "parsed_replay_path", ",", "'GlobalFeatures'", ",", "race_vs_race", ")", "\n", "for", "race", "in", "set", "(", "race_vs_race", ".", "split", "(", "'_vs_'", ")", ")", ":", "\n", "        ", "path", "=", "os", ".", "path", ".", "join", "(", "global_feature_path", ",", "race", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "path", ")", "\n", "\n", "", "", "pbar", "=", "tqdm", "(", "total", "=", "len", "(", "replay_list", ")", ",", "desc", "=", "'#Replay'", ")", "\n", "for", "replay_path", ",", "replay_info_path", "in", "replay_list", ":", "\n", "        ", "with", "open", "(", "replay_info_path", ")", "as", "f", ":", "\n", "            ", "info", "=", "json", ".", "load", "(", "f", ")", "\n", "", "info", "=", "Parse", "(", "info", "[", "'info'", "]", ",", "sc_pb", ".", "ResponseReplayInfo", "(", ")", ")", "\n", "\n", "replay_name", "=", "os", ".", "path", ".", "basename", "(", "replay_path", ")", "\n", "sampled_action_path", "=", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "parsed_replay_path", ",", "'SampledActions'", ",", "race_vs_race", ",", "replay_name", ")", "\n", "for", "player_info", "in", "info", ".", "player_info", ":", "\n", "            ", "race", "=", "sc_pb", ".", "Race", ".", "Name", "(", "player_info", ".", "player_info", ".", "race_actual", ")", "\n", "player_id", "=", "player_info", ".", "player_info", ".", "player_id", "\n", "reward", "=", "player_info", ".", "player_result", ".", "result", "\n", "\n", "replay_player_path", "=", "os", ".", "path", ".", "join", "(", "race_vs_race", ",", "race", ",", "'{}@{}'", ".", "format", "(", "player_id", ",", "replay_name", ")", ")", "\n", "parse_replay", "(", "replay_player_path", ",", "sampled_action_path", ",", "reward", ")", "\n", "\n", "", "pbar", ".", "update", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_MSC.parse_replay.extract_actions.ReplayProcessor.__init__": [[48, 54], ["multiprocessing.Process.__init__"], "methods", ["home.repos.pwc.inspect_result.wuhuikai_MSC.extract_features.game_state.GameState.__init__"], ["def", "__init__", "(", "self", ",", "run_config", ",", "replay_queue", ",", "counter", ",", "total_num", ")", ":", "\n", "        ", "super", "(", "ReplayProcessor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "run_config", "=", "run_config", "\n", "self", ".", "replay_queue", "=", "replay_queue", "\n", "self", ".", "counter", "=", "counter", "\n", "self", ".", "total_num", "=", "total_num", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_MSC.parse_replay.extract_actions.ReplayProcessor.run": [[55, 90], ["signal.signal", "sys.exit", "extract_actions.ReplayProcessor.run_config.start", "future.builtins.range", "extract_actions.ReplayProcessor.replay_queue.get", "extract_actions.ReplayProcessor.run_config.replay_data", "controller.replay_info", "extract_actions.ReplayProcessor.replay_queue.task_done", "extract_actions.ReplayProcessor.counter.get_lock", "print", "extract_actions.ReplayProcessor.run_config.map_data", "s2clientprotocol.sc2api_pb2.Race.Name", "os.path.isfile", "extract_actions.ReplayProcessor.process_replay", "print", "os.path.join", "os.path.basename"], "methods", ["home.repos.pwc.inspect_result.wuhuikai_MSC.parse_replay.parse_replay.ReplayProcessor.process_replay"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "signal", ".", "signal", "(", "signal", ".", "SIGTERM", ",", "lambda", "a", ",", "b", ":", "sys", ".", "exit", "(", ")", ")", "# Exit quietly.", "\n", "while", "True", ":", "\n", "            ", "with", "self", ".", "run_config", ".", "start", "(", ")", "as", "controller", ":", "\n", "                ", "for", "_", "in", "range", "(", "FLAGS", ".", "batch_size", ")", ":", "\n", "                    ", "try", ":", "\n", "                        ", "replay_path", "=", "self", ".", "replay_queue", ".", "get", "(", ")", "\n", "", "except", "Queue", ".", "Empty", ":", "\n", "                        ", "return", "\n", "\n", "", "try", ":", "\n", "                        ", "with", "self", ".", "counter", ".", "get_lock", "(", ")", ":", "\n", "                            ", "self", ".", "counter", ".", "value", "+=", "1", "\n", "print", "(", "'Processing {}/{} ...'", ".", "format", "(", "self", ".", "counter", ".", "value", ",", "self", ".", "total_num", ")", ")", "\n", "\n", "", "replay_data", "=", "self", ".", "run_config", ".", "replay_data", "(", "replay_path", ")", "\n", "info", "=", "controller", ".", "replay_info", "(", "replay_data", ")", "\n", "map_data", "=", "None", "\n", "if", "info", ".", "local_map_path", ":", "\n", "                            ", "map_data", "=", "self", ".", "run_config", ".", "map_data", "(", "info", ".", "local_map_path", ")", "\n", "\n", "", "for", "player_info", "in", "info", ".", "player_info", ":", "\n", "                            ", "race", "=", "sc_pb", ".", "Race", ".", "Name", "(", "player_info", ".", "player_info", ".", "race_actual", ")", "\n", "player_id", "=", "player_info", ".", "player_info", ".", "player_id", "\n", "\n", "if", "os", ".", "path", ".", "isfile", "(", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "save_path", ",", "race", ",", "\n", "'{}@{}'", ".", "format", "(", "player_id", ",", "os", ".", "path", ".", "basename", "(", "replay_path", ")", ")", ")", ")", ":", "\n", "                                ", "continue", "\n", "\n", "", "self", ".", "process_replay", "(", "controller", ",", "replay_data", ",", "map_data", ",", "player_id", ",", "race", ",", "replay_path", ")", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "                        ", "print", "(", "e", ")", "\n", "break", "\n", "", "finally", ":", "\n", "                        ", "self", ".", "replay_queue", ".", "task_done", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_MSC.parse_replay.extract_actions.ReplayProcessor.process_replay": [[91, 111], ["controller.start_replay", "os.path.join", "controller.step", "s2clientprotocol.sc2api_pb2.RequestStartReplay", "controller.observe", "actions.append", "controller.step", "google.protobuf.json_format.MessageToJson", "open", "json.dump", "os.path.join", "os.path.basename"], "methods", ["home.repos.pwc.inspect_result.wuhuikai_MSC.data_loader.BatchEnv.BatchEnv.step", "home.repos.pwc.inspect_result.wuhuikai_MSC.data_loader.BatchEnv.BatchEnv.step"], ["", "", "", "", "", "def", "process_replay", "(", "self", ",", "controller", ",", "replay_data", ",", "map_data", ",", "player_id", ",", "race", ",", "replay_path", ")", ":", "\n", "        ", "controller", ".", "start_replay", "(", "sc_pb", ".", "RequestStartReplay", "(", "\n", "replay_data", "=", "replay_data", ",", "\n", "map_data", "=", "map_data", ",", "\n", "options", "=", "interface", ",", "\n", "observed_player_id", "=", "player_id", ")", ")", "\n", "\n", "save_folder", "=", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "save_path", ",", "race", ")", "\n", "actions", "=", "[", "]", "\n", "controller", ".", "step", "(", ")", "\n", "while", "True", ":", "\n", "            ", "obs", "=", "controller", ".", "observe", "(", ")", "\n", "actions", ".", "append", "(", "[", "MessageToJson", "(", "a", ")", "for", "a", "in", "obs", ".", "actions", "]", ")", "\n", "\n", "if", "obs", ".", "player_result", ":", "\n", "                ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "save_folder", ",", "'{}@{}'", ".", "format", "(", "\n", "player_id", ",", "os", ".", "path", ".", "basename", "(", "replay_path", ")", ")", ")", ",", "'w'", ")", "as", "f", ":", "\n", "                    ", "json", ".", "dump", "(", "actions", ",", "f", ")", "\n", "", "return", "\n", "", "controller", ".", "step", "(", "FLAGS", ".", "step_mul", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_MSC.parse_replay.extract_actions.replay_queue_filler": [[112, 116], ["replay_queue.put"], "function", ["None"], ["", "", "", "def", "replay_queue_filler", "(", "replay_queue", ",", "replay_list", ")", ":", "\n", "    ", "\"\"\"A thread that fills the replay_queue with replay filenames.\"\"\"", "\n", "for", "replay_path", "in", "replay_list", ":", "\n", "        ", "replay_queue", ".", "put", "(", "replay_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_MSC.parse_replay.extract_actions.main": [[117, 148], ["os.path.join", "set", "pysc2.run_configs.get", "os.path.basename().split", "race_vs_race.split", "os.path.join", "sorted", "multiprocessing.JoinableQueue", "threading.Thread", "threading.Thread.start", "multiprocessing.Value", "future.builtins.range", "multiprocessing.JoinableQueue.join", "os.path.isdir", "os.makedirs", "open", "json.load", "extract_actions.ReplayProcessor", "ReplayProcessor.start", "time.sleep", "print", "os.path.basename", "len"], "function", ["None"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "race_vs_race", "=", "os", ".", "path", ".", "basename", "(", "FLAGS", ".", "hq_replay_set", ")", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "FLAGS", ".", "save_path", "=", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "save_path", ",", "'Actions'", ",", "race_vs_race", ")", "\n", "\n", "for", "race", "in", "set", "(", "race_vs_race", ".", "split", "(", "'_vs_'", ")", ")", ":", "\n", "        ", "path", "=", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "save_path", ",", "race", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "path", ")", "\n", "\n", "", "", "run_config", "=", "run_configs", ".", "get", "(", ")", "\n", "try", ":", "\n", "        ", "with", "open", "(", "FLAGS", ".", "hq_replay_set", ")", "as", "f", ":", "\n", "            ", "replay_list", "=", "json", ".", "load", "(", "f", ")", "\n", "", "replay_list", "=", "sorted", "(", "[", "p", "for", "p", ",", "_", "in", "replay_list", "]", ")", "\n", "\n", "replay_queue", "=", "multiprocessing", ".", "JoinableQueue", "(", "FLAGS", ".", "n_instance", "*", "10", ")", "\n", "replay_queue_thread", "=", "threading", ".", "Thread", "(", "target", "=", "replay_queue_filler", ",", "\n", "args", "=", "(", "replay_queue", ",", "replay_list", ")", ")", "\n", "replay_queue_thread", ".", "daemon", "=", "True", "\n", "replay_queue_thread", ".", "start", "(", ")", "\n", "\n", "counter", "=", "multiprocessing", ".", "Value", "(", "'i'", ",", "0", ")", "\n", "for", "i", "in", "range", "(", "FLAGS", ".", "n_instance", ")", ":", "\n", "            ", "p", "=", "ReplayProcessor", "(", "run_config", ",", "replay_queue", ",", "counter", ",", "len", "(", "replay_list", ")", ")", "\n", "p", ".", "daemon", "=", "True", "\n", "p", ".", "start", "(", ")", "\n", "time", ".", "sleep", "(", "1", ")", "# Stagger startups, otherwise they seem to conflict somehow", "\n", "\n", "", "replay_queue", ".", "join", "(", ")", "# Wait for the queue to empty.", "\n", "", "except", "KeyboardInterrupt", ":", "\n", "        ", "print", "(", "\"Caught KeyboardInterrupt, exiting.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_MSC.parse_replay.sample_actions.sample_action_from_player": [[28, 53], ["pysc2.lib.features.Features", "open", "json.load", "google.protobuf.json_format.Parse", "result_frames.append", "s2clientprotocol.sc2api_pb2.Action", "features.Features.reverse_action", "func_name.split"], "function", ["None"], ["def", "sample_action_from_player", "(", "action_path", ")", ":", "\n", "    ", "feat", "=", "features", ".", "Features", "(", "screen_size_px", "=", "(", "1", ",", "1", ")", ",", "minimap_size_px", "=", "(", "1", ",", "1", ")", ")", "\n", "with", "open", "(", "action_path", ")", "as", "f", ":", "\n", "        ", "actions", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "frame_id", "=", "0", "\n", "result_frames", "=", "[", "]", "\n", "for", "action_strs", "in", "actions", ":", "\n", "        ", "action_name", "=", "None", "\n", "for", "action_str", "in", "action_strs", ":", "\n", "            ", "action", "=", "Parse", "(", "action_str", ",", "sc_pb", ".", "Action", "(", ")", ")", "\n", "try", ":", "\n", "                ", "func_id", "=", "feat", ".", "reverse_action", "(", "action", ")", ".", "function", "\n", "func_name", "=", "FUNCTIONS", "[", "func_id", "]", ".", "name", "\n", "if", "func_name", ".", "split", "(", "'_'", ")", "[", "0", "]", "in", "{", "'Build'", ",", "'Train'", ",", "'Research'", ",", "'Morph'", ",", "'Cancel'", ",", "'Halt'", ",", "'Stop'", "}", ":", "\n", "                    ", "action_name", "=", "func_name", "\n", "break", "\n", "", "", "except", ":", "\n", "                ", "pass", "\n", "", "", "if", "frame_id", ">", "0", "and", "(", "action_name", "is", "not", "None", "or", "frame_id", "%", "FLAGS", ".", "skip", "==", "0", ")", ":", "\n", "            ", "result_frames", ".", "append", "(", "frame_id", "-", "FLAGS", ".", "step_mul", ")", "\n", "\n", "", "frame_id", "+=", "FLAGS", ".", "step_mul", "\n", "\n", "", "return", "result_frames", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_MSC.parse_replay.sample_actions.sample_action": [[54, 78], ["os.path.join", "google.protobuf.json_format.Parse", "sorted", "os.path.isfile", "open", "json.load", "s2clientprotocol.sc2api_pb2.ResponseReplayInfo", "s2clientprotocol.sc2api_pb2.Race.Name", "os.path.join", "result.append", "len", "open", "json.dump", "os.path.isfile", "sample_actions.sample_action_from_player", "set", "set", "os.path.join"], "function", ["home.repos.pwc.inspect_result.wuhuikai_MSC.parse_replay.sample_actions.sample_action_from_player"], ["", "def", "sample_action", "(", "replay_path", ",", "action_path", ",", "sampled_path", ")", ":", "\n", "    ", "replay_info", "=", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "infos_path", ",", "replay_path", ")", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "replay_info", ")", ":", "\n", "        ", "return", "\n", "", "with", "open", "(", "replay_info", ")", "as", "f", ":", "\n", "        ", "info", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "result", "=", "[", "]", "\n", "proto", "=", "Parse", "(", "info", "[", "'info'", "]", ",", "sc_pb", ".", "ResponseReplayInfo", "(", ")", ")", "\n", "for", "p", "in", "proto", ".", "player_info", ":", "\n", "        ", "player_id", "=", "p", ".", "player_info", ".", "player_id", "\n", "race", "=", "sc_pb", ".", "Race", ".", "Name", "(", "p", ".", "player_info", ".", "race_actual", ")", "\n", "\n", "action_file", "=", "os", ".", "path", ".", "join", "(", "action_path", ",", "race", ",", "'{}@{}'", ".", "format", "(", "player_id", ",", "replay_path", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "action_file", ")", ":", "\n", "            ", "return", "\n", "\n", "", "result", ".", "append", "(", "sample_action_from_player", "(", "action_file", ")", ")", "\n", "\n", "", "assert", "len", "(", "result", ")", "==", "2", "\n", "sampled_actions", "=", "sorted", "(", "set", "(", "result", "[", "0", "]", ")", "|", "set", "(", "result", "[", "1", "]", ")", ")", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "sampled_path", ",", "replay_path", ")", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "sampled_actions", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_MSC.parse_replay.sample_actions.main": [[79, 94], ["sorted", "os.path.join", "os.path.join", "tqdm.tqdm", "open", "json.load", "os.path.basename().split", "os.path.isdir", "os.makedirs", "sample_actions.sample_action", "tqdm.tqdm.update", "len", "os.path.basename", "os.path.basename"], "function", ["home.repos.pwc.inspect_result.wuhuikai_MSC.parse_replay.sample_actions.sample_action", "home.repos.pwc.inspect_result.wuhuikai_MSC.extract_features.game_state.GameState.update"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "with", "open", "(", "FLAGS", ".", "hq_replay_set", ")", "as", "f", ":", "\n", "        ", "replay_list", "=", "json", ".", "load", "(", "f", ")", "\n", "", "replay_list", "=", "sorted", "(", "[", "p", "for", "p", ",", "_", "in", "replay_list", "]", ")", "\n", "\n", "race_vs_race", "=", "os", ".", "path", ".", "basename", "(", "FLAGS", ".", "hq_replay_set", ")", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "sampled_path", "=", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "parsed_replays", ",", "'SampledActions'", ",", "race_vs_race", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "sampled_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "sampled_path", ")", "\n", "", "action_path", "=", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "parsed_replays", ",", "'Actions'", ",", "race_vs_race", ")", "\n", "\n", "pbar", "=", "tqdm", "(", "total", "=", "len", "(", "replay_list", ")", ",", "desc", "=", "'#Replay'", ")", "\n", "for", "replay_path", "in", "replay_list", ":", "\n", "        ", "sample_action", "(", "os", ".", "path", ".", "basename", "(", "replay_path", ")", ",", "action_path", ",", "sampled_path", ")", "\n", "pbar", ".", "update", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_MSC.parse_replay.parse_replay.ReplayProcessor.__init__": [[49, 55], ["multiprocessing.Process.__init__"], "methods", ["home.repos.pwc.inspect_result.wuhuikai_MSC.extract_features.game_state.GameState.__init__"], ["def", "__init__", "(", "self", ",", "run_config", ",", "replay_queue", ",", "counter", ",", "total_num", ")", ":", "\n", "        ", "super", "(", "ReplayProcessor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "run_config", "=", "run_config", "\n", "self", ".", "replay_queue", "=", "replay_queue", "\n", "self", ".", "counter", "=", "counter", "\n", "self", ".", "total_num", "=", "total_num", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_MSC.parse_replay.parse_replay.ReplayProcessor.run": [[56, 115], ["signal.signal", "sys.exit", "parse_replay.ReplayProcessor.run_config.start", "future.builtins.range", "parse_replay.ReplayProcessor.replay_queue.get", "os.path.join", "json.load.insert", "parse_replay.ReplayProcessor.run_config.replay_data", "controller.replay_info", "parse_replay.ReplayProcessor.replay_queue.task_done", "parse_replay.ReplayProcessor.counter.get_lock", "print", "FLAGS.save_path.replace", "os.path.basename", "os.path.isfile", "open", "json.load", "parse_replay.ReplayProcessor.run_config.map_data", "s2clientprotocol.sc2api_pb2.Race.Name", "os.path.join", "os.path.join.replace", "stream.open", "parse_replay.ReplayProcessor.process_replay", "stream.open.close", "print", "os.path.isfile", "os.path.isfile", "stream.open.close", "os.path.isfile", "os.path.isfile", "os.path.basename", "os.remove", "os.remove"], "methods", ["home.repos.pwc.inspect_result.wuhuikai_MSC.parse_replay.parse_replay.ReplayProcessor.process_replay", "home.repos.pwc.inspect_result.wuhuikai_MSC.data_loader.BatchEnv.BatchEnv.close", "home.repos.pwc.inspect_result.wuhuikai_MSC.data_loader.BatchEnv.BatchEnv.close"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "signal", ".", "signal", "(", "signal", ".", "SIGTERM", ",", "lambda", "a", ",", "b", ":", "sys", ".", "exit", "(", ")", ")", "# Exit quietly.", "\n", "while", "True", ":", "\n", "            ", "with", "self", ".", "run_config", ".", "start", "(", ")", "as", "controller", ":", "\n", "                ", "for", "_", "in", "range", "(", "FLAGS", ".", "batch_size", ")", ":", "\n", "                    ", "try", ":", "\n", "                        ", "replay_path", "=", "self", ".", "replay_queue", ".", "get", "(", ")", "\n", "", "except", "Queue", ".", "Empty", ":", "\n", "                        ", "return", "\n", "", "try", ":", "\n", "                        ", "with", "self", ".", "counter", ".", "get_lock", "(", ")", ":", "\n", "                            ", "self", ".", "counter", ".", "value", "+=", "1", "\n", "print", "(", "'Processing {}/{} ...'", ".", "format", "(", "self", ".", "counter", ".", "value", ",", "self", ".", "total_num", ")", ")", "\n", "\n", "", "sampled_action_path", "=", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "save_path", ".", "replace", "(", "\n", "'SampledObservations'", ",", "'SampledActions'", ")", ",", "os", ".", "path", ".", "basename", "(", "replay_path", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "sampled_action_path", ")", ":", "\n", "                            ", "return", "\n", "\n", "", "with", "open", "(", "sampled_action_path", ")", "as", "f", ":", "\n", "                            ", "actions", "=", "json", ".", "load", "(", "f", ")", "\n", "", "actions", ".", "insert", "(", "0", ",", "0", ")", "\n", "\n", "replay_data", "=", "self", ".", "run_config", ".", "replay_data", "(", "replay_path", ")", "\n", "info", "=", "controller", ".", "replay_info", "(", "replay_data", ")", "\n", "map_data", "=", "None", "\n", "if", "info", ".", "local_map_path", ":", "\n", "                            ", "map_data", "=", "self", ".", "run_config", ".", "map_data", "(", "info", ".", "local_map_path", ")", "\n", "\n", "", "for", "player_info", "in", "info", ".", "player_info", ":", "\n", "                            ", "race", "=", "sc_pb", ".", "Race", ".", "Name", "(", "player_info", ".", "player_info", ".", "race_actual", ")", "\n", "player_id", "=", "player_info", ".", "player_info", ".", "player_id", "\n", "\n", "observation_path", "=", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "save_path", ",", "race", ",", "\n", "'{}@{}'", ".", "format", "(", "player_id", ",", "os", ".", "path", ".", "basename", "(", "replay_path", ")", ")", ")", "\n", "global_info_path", "=", "observation_path", ".", "replace", "(", "'SampledObservations'", ",", "'GlobalInfos'", ")", "\n", "\n", "if", "os", ".", "path", ".", "isfile", "(", "observation_path", ")", "and", "os", ".", "path", ".", "isfile", "(", "global_info_path", ")", ":", "\n", "                                ", "continue", "\n", "\n", "", "ostream", "=", "stream", ".", "open", "(", "observation_path", ",", "'wb'", ",", "buffer_size", "=", "1000", ")", "\n", "self", ".", "process_replay", "(", "controller", ",", "replay_data", ",", "map_data", ",", "player_id", ",", "actions", ",", "\n", "ostream", ",", "global_info_path", ")", "\n", "ostream", ".", "close", "(", ")", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "                        ", "try", ":", "\n", "                            ", "ostream", ".", "close", "(", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "observation_path", ")", ":", "\n", "                                ", "os", ".", "remove", "(", "observation_path", ")", "\n", "\n", "", "if", "os", ".", "path", ".", "isfile", "(", "global_info_path", ")", ":", "\n", "                                ", "os", ".", "remove", "(", "global_info_path", ")", "\n", "", "", "except", ":", "\n", "                            ", "pass", "\n", "\n", "", "print", "(", "e", ")", "\n", "break", "\n", "", "finally", ":", "\n", "                        ", "self", ".", "replay_queue", ".", "task_done", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_MSC.parse_replay.parse_replay.ReplayProcessor.process_replay": [[116, 133], ["controller.start_replay", "controller.step", "zip", "s2clientprotocol.sc2api_pb2.RequestStartReplay", "controller.game_info", "controller.data_raw", "open", "json.dump", "controller.step", "controller.observe", "ostream.write", "google.protobuf.json_format.MessageToJson", "global_info.items"], "methods", ["home.repos.pwc.inspect_result.wuhuikai_MSC.data_loader.BatchEnv.BatchEnv.step", "home.repos.pwc.inspect_result.wuhuikai_MSC.data_loader.BatchEnv.BatchEnv.step"], ["", "", "", "", "", "def", "process_replay", "(", "self", ",", "controller", ",", "replay_data", ",", "map_data", ",", "player_id", ",", "actions", ",", "ostream", ",", "global_info_path", ")", ":", "\n", "        ", "controller", ".", "start_replay", "(", "sc_pb", ".", "RequestStartReplay", "(", "\n", "replay_data", "=", "replay_data", ",", "\n", "map_data", "=", "map_data", ",", "\n", "options", "=", "interface", ",", "\n", "observed_player_id", "=", "player_id", ")", ")", "\n", "\n", "global_info", "=", "{", "'game_info'", ":", "controller", ".", "game_info", "(", ")", ",", "\n", "'data_raw'", ":", "controller", ".", "data_raw", "(", ")", "}", "\n", "with", "open", "(", "global_info_path", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "{", "k", ":", "MessageToJson", "(", "v", ")", "for", "k", ",", "v", "in", "global_info", ".", "items", "(", ")", "}", ",", "f", ")", "\n", "\n", "", "controller", ".", "step", "(", ")", "\n", "for", "pre_id", ",", "id", "in", "zip", "(", "actions", "[", ":", "-", "1", "]", ",", "actions", "[", "1", ":", "]", ")", ":", "\n", "            ", "controller", ".", "step", "(", "id", "-", "pre_id", ")", "\n", "obs", "=", "controller", ".", "observe", "(", ")", "\n", "ostream", ".", "write", "(", "obs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_MSC.parse_replay.parse_replay.replay_queue_filler": [[134, 138], ["replay_queue.put"], "function", ["None"], ["", "", "", "def", "replay_queue_filler", "(", "replay_queue", ",", "replay_list", ")", ":", "\n", "    ", "\"\"\"A thread that fills the replay_queue with replay filenames.\"\"\"", "\n", "for", "replay_path", "in", "replay_list", ":", "\n", "        ", "replay_queue", ".", "put", "(", "replay_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_MSC.parse_replay.parse_replay.main": [[139, 174], ["os.path.join", "set", "pysc2.run_configs.get", "os.path.basename().split", "race_vs_race.split", "os.path.join", "path.replace.replace", "sorted", "multiprocessing.JoinableQueue", "threading.Thread", "threading.Thread.start", "multiprocessing.Value", "future.builtins.range", "multiprocessing.JoinableQueue.join", "os.path.isdir", "os.makedirs", "os.path.isdir", "os.makedirs", "open", "json.load", "parse_replay.ReplayProcessor", "ReplayProcessor.start", "time.sleep", "print", "os.path.basename", "len"], "function", ["None"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "race_vs_race", "=", "os", ".", "path", ".", "basename", "(", "FLAGS", ".", "hq_replay_set", ")", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "FLAGS", ".", "save_path", "=", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "save_path", ",", "'SampledObservations'", ",", "race_vs_race", ")", "\n", "\n", "for", "race", "in", "set", "(", "race_vs_race", ".", "split", "(", "'_vs_'", ")", ")", ":", "\n", "        ", "path", "=", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "save_path", ",", "race", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "path", ")", "\n", "\n", "", "path", "=", "path", ".", "replace", "(", "'SampledObservations'", ",", "'GlobalInfos'", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "path", ")", "\n", "\n", "", "", "run_config", "=", "run_configs", ".", "get", "(", ")", "\n", "try", ":", "\n", "        ", "with", "open", "(", "FLAGS", ".", "hq_replay_set", ")", "as", "f", ":", "\n", "            ", "replay_list", "=", "json", ".", "load", "(", "f", ")", "\n", "", "replay_list", "=", "sorted", "(", "[", "p", "for", "p", ",", "_", "in", "replay_list", "]", ")", "\n", "\n", "replay_queue", "=", "multiprocessing", ".", "JoinableQueue", "(", "FLAGS", ".", "n_instance", "*", "10", ")", "\n", "replay_queue_thread", "=", "threading", ".", "Thread", "(", "target", "=", "replay_queue_filler", ",", "\n", "args", "=", "(", "replay_queue", ",", "replay_list", ")", ")", "\n", "replay_queue_thread", ".", "daemon", "=", "True", "\n", "replay_queue_thread", ".", "start", "(", ")", "\n", "\n", "counter", "=", "multiprocessing", ".", "Value", "(", "'i'", ",", "0", ")", "\n", "for", "i", "in", "range", "(", "FLAGS", ".", "n_instance", ")", ":", "\n", "            ", "p", "=", "ReplayProcessor", "(", "run_config", ",", "replay_queue", ",", "counter", ",", "len", "(", "replay_list", ")", ")", "\n", "p", ".", "daemon", "=", "True", "\n", "p", ".", "start", "(", ")", "\n", "time", ".", "sleep", "(", "1", ")", "# Stagger startups, otherwise they seem to conflict somehow", "\n", "\n", "", "replay_queue", ".", "join", "(", ")", "# Wait for the queue to empty.", "\n", "", "except", "KeyboardInterrupt", ":", "\n", "        ", "print", "(", "\"Caught KeyboardInterrupt, exiting.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_MSC.BuildOrderPrediction.train_spatial.BuildOrderGRU.__init__": [[24, 38], ["super().__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.GRUCell", "torch.GRUCell", "torch.GRUCell", "torch.GRUCell", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.wuhuikai_MSC.extract_features.game_state.GameState.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_channels", ",", "n_features", ",", "n_actions", ")", ":", "\n", "        ", "super", "(", "BuildOrderGRU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "n_channels", ",", "16", ",", "8", ",", "stride", "=", "4", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "16", ",", "32", ",", "4", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "linear_g", "=", "nn", ".", "Linear", "(", "n_features", ",", "128", ")", "\n", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "1280", ",", "512", ")", "\n", "self", ".", "rnn", "=", "nn", ".", "GRUCell", "(", "input_size", "=", "512", ",", "hidden_size", "=", "128", ")", "\n", "\n", "self", ".", "actor_linear", "=", "nn", ".", "Linear", "(", "128", ",", "n_actions", ")", "\n", "\n", "self", ".", "h", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_MSC.BuildOrderPrediction.train_spatial.BuildOrderGRU.forward": [[39, 68], ["states_S.size", "enumerate", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "zip", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "x_s.view.view.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "train_spatial.BuildOrderGRU.rnn", "values.append", "states_S.data.new().resize_().zero_", "enumerate", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "train_spatial.BuildOrderGRU.conv1", "train_spatial.BuildOrderGRU.conv2", "train_spatial.BuildOrderGRU.linear_g", "train_spatial.BuildOrderGRU.linear", "train_spatial.BuildOrderGRU.actor_linear", "states_S.data.new().resize_", "h[].zero_", "states_S.data.new"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "states_S", ",", "states_G", ",", "require_init", ")", ":", "\n", "        ", "batch", "=", "states_S", ".", "size", "(", "1", ")", "\n", "if", "self", ".", "h", "is", "None", ":", "\n", "            ", "self", ".", "h", "=", "Variable", "(", "states_S", ".", "data", ".", "new", "(", ")", ".", "resize_", "(", "(", "batch", ",", "128", ")", ")", ".", "zero_", "(", ")", ")", "\n", "", "elif", "True", "in", "require_init", ":", "\n", "            ", "h", "=", "self", ".", "h", ".", "data", "\n", "for", "idx", ",", "init", "in", "enumerate", "(", "require_init", ")", ":", "\n", "                ", "if", "init", ":", "\n", "                    ", "h", "[", "idx", "]", ".", "zero_", "(", ")", "\n", "", "", "self", ".", "h", "=", "Variable", "(", "h", ")", "\n", "", "else", ":", "\n", "            ", "pass", "\n", "\n", "", "values", "=", "[", "]", "\n", "for", "idx", ",", "(", "state_S", ",", "state_G", ")", "in", "enumerate", "(", "zip", "(", "states_S", ",", "states_G", ")", ")", ":", "\n", "            ", "x_s", "=", "F", ".", "relu", "(", "self", ".", "conv1", "(", "state_S", ")", ")", "\n", "x_s", "=", "F", ".", "relu", "(", "self", ".", "conv2", "(", "x_s", ")", ")", "\n", "x_s", "=", "x_s", ".", "view", "(", "-", "1", ",", "1152", ")", "\n", "\n", "x_g", "=", "F", ".", "relu", "(", "self", ".", "linear_g", "(", "state_G", ")", ")", "\n", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x_s", ",", "x_g", ")", ",", "1", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "linear", "(", "x", ")", ")", "\n", "\n", "self", ".", "h", "=", "self", ".", "rnn", "(", "x", ",", "self", ".", "h", ")", "\n", "\n", "values", ".", "append", "(", "self", ".", "actor_linear", "(", "self", ".", "h", ")", ")", "\n", "\n", "", "return", "values", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_MSC.BuildOrderPrediction.train_spatial.BuildOrderGRU.detach": [[69, 72], ["train_spatial.BuildOrderGRU.h.detach_"], "methods", ["None"], ["", "def", "detach", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "h", "is", "not", "None", ":", "\n", "            ", "self", ".", "h", ".", "detach_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_MSC.BuildOrderPrediction.train_spatial.train": [[73, 190], ["visdom.Visdom", "visdom.Visdom.line", "visdom.Visdom.line", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "model.train", "torch.Adam", "env.step", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "model.parameters", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().long().squeeze", "torch.from_numpy().long().squeeze", "torch.from_numpy().long().squeeze", "torch.from_numpy().long().squeeze", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "model", "zip", "model.zero_grad", "action_loss.backward", "optim.Adam.step", "model.detach", "visdom.Visdom.updateTrace", "numpy.swapaxes", "numpy.swapaxes", "enumerate", "env.step", "range", "range", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "model.cuda", "states_S.copy_.cuda", "states_G.copy_.cuda", "actions_gt.copy_.cuda", "weight.cuda.cuda", "torch.autograd.Variable", "torch.autograd.Variable", "len", "numpy.asarray", "actions_gt.copy_.cpu().numpy", "zip", "pre_per_replay[].append", "gt_per_replay[].append", "states_S.copy_.copy_", "states_G.copy_.copy_", "actions_gt.copy_.copy_", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "env.close", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.cross_entropy", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().long().squeeze", "torch.from_numpy().long().squeeze", "torch.from_numpy().long().squeeze", "torch.from_numpy().long().squeeze", "env.step_count", "env.step_count", "model.state_dict", "os.path.join", "model.state_dict", "os.path.join", "torch.autograd.Variable", "action_loss.data.cpu().numpy", "numpy.argmax", "actions_gt.copy_.cpu", "len", "len", "range", "numpy.asarray", "range", "visdom.Visdom.updateTrace", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "env.step_count", "action.data.cpu().numpy", "np.asarray.append", "visdom.Visdom.updateTrace", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "env.step_count", "action_loss.data.cpu", "numpy.mean", "numpy.asarray", "numpy.asarray", "action.data.cpu", "numpy.asarray", "numpy.asarray", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "env.step_count", "numpy.mean", "env.step_count"], "function", ["home.repos.pwc.inspect_result.wuhuikai_MSC.GlobalStateEvaluation.train.train", "home.repos.pwc.inspect_result.wuhuikai_MSC.data_loader.BatchEnv.BatchEnv.step", "home.repos.pwc.inspect_result.wuhuikai_MSC.data_loader.BatchEnv.BatchEnv.step", "home.repos.pwc.inspect_result.wuhuikai_MSC.GlobalStateEvaluation.train.StateEvaluationGRU.detach", "home.repos.pwc.inspect_result.wuhuikai_MSC.data_loader.BatchEnv.BatchEnv.step", "home.repos.pwc.inspect_result.wuhuikai_MSC.extract_features.split.save", "home.repos.pwc.inspect_result.wuhuikai_MSC.extract_features.split.save", "home.repos.pwc.inspect_result.wuhuikai_MSC.extract_features.split.save", "home.repos.pwc.inspect_result.wuhuikai_MSC.extract_features.split.save", "home.repos.pwc.inspect_result.wuhuikai_MSC.extract_features.split.save", "home.repos.pwc.inspect_result.wuhuikai_MSC.extract_features.split.save", "home.repos.pwc.inspect_result.wuhuikai_MSC.extract_features.split.save", "home.repos.pwc.inspect_result.wuhuikai_MSC.extract_features.split.save", "home.repos.pwc.inspect_result.wuhuikai_MSC.data_loader.BatchEnv.BatchEnv.close", "home.repos.pwc.inspect_result.wuhuikai_MSC.data_loader.BatchEnv.BatchEnv.step_count", "home.repos.pwc.inspect_result.wuhuikai_MSC.data_loader.BatchEnv.BatchEnv.step_count", "home.repos.pwc.inspect_result.wuhuikai_MSC.data_loader.BatchEnv.BatchEnv.step_count", "home.repos.pwc.inspect_result.wuhuikai_MSC.data_loader.BatchEnv.BatchEnv.step_count", "home.repos.pwc.inspect_result.wuhuikai_MSC.data_loader.BatchEnv.BatchEnv.step_count", "home.repos.pwc.inspect_result.wuhuikai_MSC.data_loader.BatchEnv.BatchEnv.step_count"], ["", "", "", "def", "train", "(", "model", ",", "env", ",", "args", ")", ":", "\n", "#################################### PLOT ###################################################", "\n", "    ", "STEPS", "=", "10", "\n", "LAMBDA", "=", "0.99", "\n", "vis", "=", "visdom", ".", "Visdom", "(", "env", "=", "args", ".", "name", "+", "'[{}]'", ".", "format", "(", "args", ".", "phrase", ")", ")", "\n", "pre_per_replay", "=", "[", "[", "]", "for", "_", "in", "range", "(", "args", ".", "n_replays", ")", "]", "\n", "gt_per_replay", "=", "[", "[", "]", "for", "_", "in", "range", "(", "args", ".", "n_replays", ")", "]", "\n", "acc", "=", "None", "\n", "win", "=", "vis", ".", "line", "(", "X", "=", "np", ".", "zeros", "(", "1", ")", ",", "Y", "=", "np", ".", "zeros", "(", "1", ")", ")", "\n", "loss_win", "=", "vis", ".", "line", "(", "X", "=", "np", ".", "zeros", "(", "1", ")", ",", "Y", "=", "np", ".", "zeros", "(", "1", ")", ")", "\n", "\n", "#################################### TRAIN ######################################################", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "\n", "gpu_id", "=", "args", ".", "gpu_id", "\n", "with", "torch", ".", "cuda", ".", "device", "(", "gpu_id", ")", ":", "\n", "        ", "model", "=", "model", ".", "cuda", "(", ")", "if", "gpu_id", ">=", "0", "else", "model", "\n", "", "model", ".", "train", "(", ")", "\n", "optimizer", "=", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ")", "\n", "\n", "epoch", "=", "0", "\n", "save", "=", "args", ".", "save_intervel", "\n", "env_return", "=", "env", ".", "step", "(", "reward", "=", "False", ",", "action", "=", "True", ")", "\n", "if", "env_return", "is", "not", "None", ":", "\n", "        ", "(", "states_S", ",", "states_G", ",", "actions_gt", ")", ",", "require_init", "=", "env_return", "\n", "", "with", "torch", ".", "cuda", ".", "device", "(", "gpu_id", ")", ":", "\n", "        ", "states_S", "=", "torch", ".", "from_numpy", "(", "states_S", ")", ".", "float", "(", ")", "\n", "states_G", "=", "torch", ".", "from_numpy", "(", "states_G", ")", ".", "float", "(", ")", "\n", "actions_gt", "=", "torch", ".", "from_numpy", "(", "actions_gt", ")", ".", "long", "(", ")", ".", "squeeze", "(", ")", "\n", "weight", "=", "torch", ".", "ones", "(", "(", "env", ".", "n_actions", ",", ")", ")", "\n", "weight", "[", "-", "1", "]", "=", "0.05", "\n", "if", "gpu_id", ">=", "0", ":", "\n", "            ", "states_S", "=", "states_S", ".", "cuda", "(", ")", "\n", "states_G", "=", "states_G", ".", "cuda", "(", ")", "\n", "actions_gt", "=", "actions_gt", ".", "cuda", "(", ")", "\n", "weight", "=", "weight", ".", "cuda", "(", ")", "\n", "\n", "", "", "while", "True", ":", "\n", "        ", "actions", "=", "model", "(", "Variable", "(", "states_S", ")", ",", "Variable", "(", "states_G", ")", ",", "require_init", ")", "\n", "action_loss", "=", "0", "\n", "for", "action", ",", "action_gt", "in", "zip", "(", "actions", ",", "actions_gt", ")", ":", "\n", "            ", "action_loss", "=", "action_loss", "+", "F", ".", "cross_entropy", "(", "action", ",", "Variable", "(", "action_gt", ")", ",", "weight", "=", "weight", ")", "\n", "", "action_loss", "=", "action_loss", "/", "len", "(", "actions_gt", ")", "\n", "\n", "model", ".", "zero_grad", "(", ")", "\n", "action_loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "model", ".", "detach", "(", ")", "\n", "\n", "if", "env", ".", "epoch", ">", "epoch", ":", "\n", "            ", "epoch", "=", "env", ".", "epoch", "\n", "for", "p", "in", "optimizer", ".", "param_groups", ":", "\n", "                ", "p", "[", "'lr'", "]", "*=", "0.5", "\n", "\n", "############################ PLOT ##########################################", "\n", "", "", "vis", ".", "updateTrace", "(", "X", "=", "np", ".", "asarray", "(", "[", "env", ".", "step_count", "(", ")", "]", ")", ",", "\n", "Y", "=", "np", ".", "asarray", "(", "action_loss", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ",", "\n", "win", "=", "loss_win", ",", "\n", "name", "=", "'action'", ")", "\n", "\n", "actions_np", "=", "np", ".", "swapaxes", "(", "np", ".", "asarray", "(", "[", "np", ".", "argmax", "(", "action", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "axis", "=", "1", ")", "for", "action", "in", "actions", "]", ")", ",", "0", ",", "1", ")", "\n", "actions_gt_np", "=", "np", ".", "swapaxes", "(", "actions_gt", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "0", ",", "1", ")", "\n", "\n", "for", "idx", ",", "(", "action", ",", "action_gt", ",", "init", ")", "in", "enumerate", "(", "zip", "(", "actions_np", ",", "actions_gt_np", ",", "require_init", ")", ")", ":", "\n", "            ", "if", "init", "and", "len", "(", "pre_per_replay", "[", "idx", "]", ")", ">", "0", ":", "\n", "                ", "pre_per_replay", "[", "idx", "]", "=", "np", ".", "asarray", "(", "pre_per_replay", "[", "idx", "]", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "gt_per_replay", "[", "idx", "]", "=", "np", ".", "asarray", "(", "gt_per_replay", "[", "idx", "]", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "step", "=", "len", "(", "pre_per_replay", "[", "idx", "]", ")", "//", "STEPS", "\n", "if", "step", ">", "0", ":", "\n", "                    ", "acc_tmp", "=", "[", "]", "\n", "for", "s", "in", "range", "(", "STEPS", ")", ":", "\n", "                        ", "action_pre", "=", "pre_per_replay", "[", "idx", "]", "[", "s", "*", "step", ":", "(", "s", "+", "1", ")", "*", "step", "]", "\n", "action_gt", "=", "gt_per_replay", "[", "idx", "]", "[", "s", "*", "step", ":", "(", "s", "+", "1", ")", "*", "step", "]", "\n", "acc_tmp", ".", "append", "(", "np", ".", "mean", "(", "action_pre", "==", "action_gt", ")", ")", "\n", "\n", "", "acc_tmp", "=", "np", ".", "asarray", "(", "acc_tmp", ")", "\n", "if", "acc", "is", "None", ":", "\n", "                        ", "acc", "=", "acc_tmp", "\n", "", "else", ":", "\n", "                        ", "acc", "=", "LAMBDA", "*", "acc", "+", "(", "1", "-", "LAMBDA", ")", "*", "acc_tmp", "\n", "\n", "", "if", "acc", "is", "None", ":", "\n", "                        ", "continue", "\n", "", "for", "s", "in", "range", "(", "STEPS", ")", ":", "\n", "                        ", "vis", ".", "updateTrace", "(", "X", "=", "np", ".", "asarray", "(", "[", "env", ".", "step_count", "(", ")", "]", ")", ",", "\n", "Y", "=", "np", ".", "asarray", "(", "[", "acc", "[", "s", "]", "]", ")", ",", "\n", "win", "=", "win", ",", "\n", "name", "=", "'{}[{}%~{}%]'", ".", "format", "(", "'action'", ",", "s", "*", "10", ",", "(", "s", "+", "1", ")", "*", "10", ")", ")", "\n", "", "vis", ".", "updateTrace", "(", "X", "=", "np", ".", "asarray", "(", "[", "env", ".", "step_count", "(", ")", "]", ")", ",", "\n", "Y", "=", "np", ".", "asarray", "(", "[", "np", ".", "mean", "(", "acc", ")", "]", ")", ",", "\n", "win", "=", "win", ",", "\n", "name", "=", "'action[TOTAL]'", ")", "\n", "\n", "", "pre_per_replay", "[", "idx", "]", "=", "[", "]", "\n", "gt_per_replay", "[", "idx", "]", "=", "[", "]", "\n", "\n", "", "pre_per_replay", "[", "idx", "]", ".", "append", "(", "action", "[", "-", "1", "]", ")", "\n", "gt_per_replay", "[", "idx", "]", ".", "append", "(", "action_gt", "[", "-", "1", "]", ")", "\n", "\n", "####################### NEXT BATCH ###################################", "\n", "", "env_return", "=", "env", ".", "step", "(", "reward", "=", "False", ",", "action", "=", "True", ")", "\n", "if", "env_return", "is", "not", "None", ":", "\n", "            ", "(", "raw_states_S", ",", "raw_states_G", ",", "raw_rewards", ")", ",", "require_init", "=", "env_return", "\n", "states_S", "=", "states_S", ".", "copy_", "(", "torch", ".", "from_numpy", "(", "raw_states_S", ")", ".", "float", "(", ")", ")", "\n", "states_G", "=", "states_G", ".", "copy_", "(", "torch", ".", "from_numpy", "(", "raw_states_G", ")", ".", "float", "(", ")", ")", "\n", "actions_gt", "=", "actions_gt", ".", "copy_", "(", "torch", ".", "from_numpy", "(", "raw_rewards", ")", ".", "long", "(", ")", ".", "squeeze", "(", ")", ")", "\n", "\n", "", "if", "env", ".", "step_count", "(", ")", ">", "save", "or", "env_return", "is", "None", ":", "\n", "            ", "save", "=", "env", ".", "step_count", "(", ")", "+", "args", ".", "save_intervel", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "args", ".", "model_path", ",", "'model_iter_{}.pth'", ".", "format", "(", "env", ".", "step_count", "(", ")", ")", ")", ")", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "args", ".", "model_path", ",", "'model_latest.pth'", ")", ")", "\n", "", "if", "env_return", "is", "None", ":", "\n", "            ", "env", ".", "close", "(", ")", "\n", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_MSC.BuildOrderPrediction.train_spatial.test": [[191, 247], ["torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "model.eval", "env.step", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "model", "numpy.squeeze", "numpy.squeeze", "action_pre_per_replay[].append", "action_gt_per_replay[].append", "env.step", "model.cuda", "states_S.copy_.cuda", "states_G.copy_.cuda", "actions_gt.copy_.cuda", "torch.autograd.Variable", "torch.autograd.Variable", "numpy.vstack", "actions_gt.copy_.cpu().numpy", "numpy.ravel", "numpy.ravel", "action_pre_per_replay.append", "action_gt_per_replay.append", "states_S.copy_.copy_", "states_G.copy_.copy_", "actions_gt.copy_.copy_", "numpy.ravel", "numpy.ravel", "env.close", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "len", "numpy.hstack", "numpy.hstack", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "numpy.hstack", "numpy.hstack", "numpy.argmax", "actions_gt.copy_.cpu", "action.data.cpu().numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "action.data.cpu"], "function", ["home.repos.pwc.inspect_result.wuhuikai_MSC.data_loader.BatchEnv.BatchEnv.step", "home.repos.pwc.inspect_result.wuhuikai_MSC.data_loader.BatchEnv.BatchEnv.step", "home.repos.pwc.inspect_result.wuhuikai_MSC.data_loader.BatchEnv.BatchEnv.close"], ["", "", "", "def", "test", "(", "model", ",", "env", ",", "args", ")", ":", "\n", "######################### SAVE RESULT ############################", "\n", "    ", "action_pre_per_replay", "=", "[", "[", "]", "]", "\n", "action_gt_per_replay", "=", "[", "[", "]", "]", "\n", "\n", "######################### TEST ###################################", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "\n", "gpu_id", "=", "args", ".", "gpu_id", "\n", "with", "torch", ".", "cuda", ".", "device", "(", "gpu_id", ")", ":", "\n", "        ", "model", "=", "model", ".", "cuda", "(", ")", "if", "gpu_id", ">=", "0", "else", "model", "\n", "", "model", ".", "eval", "(", ")", "\n", "\n", "env_return", "=", "env", ".", "step", "(", "reward", "=", "False", ",", "action", "=", "True", ")", "\n", "if", "env_return", "is", "not", "None", ":", "\n", "        ", "(", "states_S", ",", "states_G", ",", "actions_gt", ")", ",", "require_init", "=", "env_return", "\n", "", "with", "torch", ".", "cuda", ".", "device", "(", "gpu_id", ")", ":", "\n", "        ", "states_S", "=", "torch", ".", "from_numpy", "(", "states_S", ")", ".", "float", "(", ")", "\n", "states_G", "=", "torch", ".", "from_numpy", "(", "states_G", ")", ".", "float", "(", ")", "\n", "actions_gt", "=", "torch", ".", "from_numpy", "(", "actions_gt", ")", ".", "float", "(", ")", "\n", "if", "gpu_id", ">=", "0", ":", "\n", "            ", "states_S", "=", "states_S", ".", "cuda", "(", ")", "\n", "states_G", "=", "states_G", ".", "cuda", "(", ")", "\n", "actions_gt", "=", "actions_gt", ".", "cuda", "(", ")", "\n", "\n", "", "", "while", "True", ":", "\n", "        ", "actions", "=", "model", "(", "Variable", "(", "states_S", ")", ",", "Variable", "(", "states_G", ")", ",", "require_init", ")", "\n", "############################ PLOT ##########################################", "\n", "actions_np", "=", "np", ".", "squeeze", "(", "np", ".", "vstack", "(", "[", "np", ".", "argmax", "(", "action", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "axis", "=", "1", ")", "for", "action", "in", "actions", "]", ")", ")", "\n", "actions_gt_np", "=", "np", ".", "squeeze", "(", "actions_gt", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "if", "require_init", "[", "-", "1", "]", "and", "len", "(", "action_gt_per_replay", "[", "-", "1", "]", ")", ">", "0", ":", "\n", "            ", "action_pre_per_replay", "[", "-", "1", "]", "=", "np", ".", "ravel", "(", "np", ".", "hstack", "(", "action_pre_per_replay", "[", "-", "1", "]", ")", ")", "\n", "action_gt_per_replay", "[", "-", "1", "]", "=", "np", ".", "ravel", "(", "np", ".", "hstack", "(", "action_gt_per_replay", "[", "-", "1", "]", ")", ")", "\n", "\n", "action_pre_per_replay", ".", "append", "(", "[", "]", ")", "\n", "action_gt_per_replay", ".", "append", "(", "[", "]", ")", "\n", "\n", "", "action_pre_per_replay", "[", "-", "1", "]", ".", "append", "(", "actions_np", ")", "\n", "action_gt_per_replay", "[", "-", "1", "]", ".", "append", "(", "actions_gt_np", ")", "\n", "########################### NEXT BATCH #############################################", "\n", "env_return", "=", "env", ".", "step", "(", "reward", "=", "False", ",", "action", "=", "True", ")", "\n", "if", "env_return", "is", "not", "None", ":", "\n", "            ", "(", "raw_states_S", ",", "raw_states_G", ",", "raw_actions", ")", ",", "require_init", "=", "env_return", "\n", "states_S", "=", "states_S", ".", "copy_", "(", "torch", ".", "from_numpy", "(", "raw_states_S", ")", ".", "float", "(", ")", ")", "\n", "states_G", "=", "states_G", ".", "copy_", "(", "torch", ".", "from_numpy", "(", "raw_states_G", ")", ".", "float", "(", ")", ")", "\n", "actions_gt", "=", "actions_gt", ".", "copy_", "(", "torch", ".", "from_numpy", "(", "raw_actions", ")", ".", "float", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "action_pre_per_replay", "[", "-", "1", "]", "=", "np", ".", "ravel", "(", "np", ".", "hstack", "(", "action_pre_per_replay", "[", "-", "1", "]", ")", ")", "\n", "action_gt_per_replay", "[", "-", "1", "]", "=", "np", ".", "ravel", "(", "np", ".", "hstack", "(", "action_gt_per_replay", "[", "-", "1", "]", ")", ")", "\n", "\n", "env", ".", "close", "(", ")", "\n", "break", "\n", "\n", "", "", "return", "action_pre_per_replay", ",", "action_gt_per_replay", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_MSC.BuildOrderPrediction.train_spatial.next_path": [[248, 258], ["sorted", "paths.add", "os.path.join", "int", "len", "os.listdir", "[].split", "os.path.basename().split", "os.path.basename"], "function", ["None"], ["", "def", "next_path", "(", "model_folder", ",", "paths", ")", ":", "\n", "    ", "models", "=", "{", "int", "(", "os", ".", "path", ".", "basename", "(", "model", ")", ".", "split", "(", "'.'", ")", "[", "0", "]", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", ")", "\n", "for", "model", "in", "os", ".", "listdir", "(", "model_folder", ")", "if", "'latest'", "not", "in", "model", "}", "\n", "models_not_process", "=", "models", "-", "paths", "\n", "if", "len", "(", "models_not_process", ")", "==", "0", ":", "\n", "        ", "return", "None", "\n", "", "models_not_process", "=", "sorted", "(", "models_not_process", ")", "\n", "paths", ".", "add", "(", "models_not_process", "[", "0", "]", ")", "\n", "\n", "return", "os", ".", "path", ".", "join", "(", "model_folder", ",", "'model_iter_{}.pth'", ".", "format", "(", "models_not_process", "[", "0", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_MSC.BuildOrderPrediction.train_spatial.main": [[259, 329], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "os.path.join", "os.path.join", "print", "sorted", "print", "vars().items", "print", "data_loader.BatchEnv.BatchSpatialEnv", "data_loader.BatchEnv.BatchSpatialEnv.init", "train_spatial.BuildOrderGRU", "train_spatial.train", "os.path.isdir", "os.makedirs", "os.path.isdir", "os.makedirs", "open", "f.write", "os.path.join", "os.path.join", "set", "vars", "os.path.join", "json.dumps", "os.path.isdir", "os.makedirs", "train_spatial.next_path", "vars", "print", "data_loader.BatchEnv.BatchSpatialEnv", "data_loader.BatchEnv.BatchSpatialEnv.init", "train_spatial.BuildOrderGRU", "BuildOrderGRU.load_state_dict", "train_spatial.test", "Baselines.GlobalStateEvaluation.test.show_test_result", "time.sleep", "os.path.join", "torch.load", "torch.load", "torch.load", "torch.load", "open", "pickle.dump", "len", "os.path.join", "os.path.basename", "len"], "function", ["home.repos.pwc.inspect_result.wuhuikai_MSC.data_loader.BatchEnv.BatchEnv.init", "home.repos.pwc.inspect_result.wuhuikai_MSC.GlobalStateEvaluation.train.train", "home.repos.pwc.inspect_result.wuhuikai_MSC.GlobalStateEvaluation.train.next_path", "home.repos.pwc.inspect_result.wuhuikai_MSC.data_loader.BatchEnv.BatchEnv.init", "home.repos.pwc.inspect_result.wuhuikai_MSC.GlobalStateEvaluation.train.test", "home.repos.pwc.inspect_result.wuhuikai_MSC.GlobalStateEvaluation.test.show_test_result"], ["", "def", "main", "(", ")", ":", "\n", "# Training settings", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Global State Evaluation : StarCraft II'", ")", "\n", "parser", ".", "add_argument", "(", "'--name'", ",", "type", "=", "str", ",", "default", "=", "'StarCraft II:TvT[BuildOrder:Spatial]'", ",", "\n", "help", "=", "'Experiment name. All outputs will be stored in checkpoints/[name]/'", ")", "\n", "parser", ".", "add_argument", "(", "'--replays_path'", ",", "default", "=", "'train_val_test/Terran_vs_Terran'", ",", "\n", "help", "=", "'Path for training, validation and test set (default: train_val_test/Terran_vs_Terran)'", ")", "\n", "parser", ".", "add_argument", "(", "'--race'", ",", "default", "=", "'Terran'", ",", "help", "=", "'Which race? (default: Terran)'", ")", "\n", "parser", ".", "add_argument", "(", "'--enemy_race'", ",", "default", "=", "'Terran'", ",", "help", "=", "'Which the enemy race? (default: Terran)'", ")", "\n", "parser", ".", "add_argument", "(", "'--phrase'", ",", "type", "=", "str", ",", "default", "=", "'train'", ",", "\n", "help", "=", "'train|val|test (default: train)'", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu_id'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "help", "=", "'Which GPU to use [-1 indicate CPU] (default: 0)'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.001", ",", "help", "=", "'Learning rate (default: 0.001)'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'Random seed (default: 1)'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--n_steps'", ",", "type", "=", "int", ",", "default", "=", "20", ",", "help", "=", "'# of forward steps (default: 20)'", ")", "\n", "parser", ".", "add_argument", "(", "'--n_replays'", ",", "type", "=", "int", ",", "default", "=", "32", ",", "help", "=", "'# of replays (default: 32)'", ")", "\n", "parser", ".", "add_argument", "(", "'--n_epoch'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "help", "=", "'# of epoches (default: 10)'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--save_intervel'", ",", "type", "=", "int", ",", "default", "=", "1000000", ",", "\n", "help", "=", "'Frequency of model saving (default: 1000000)'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "args", ".", "save_path", "=", "os", ".", "path", ".", "join", "(", "'checkpoints'", ",", "args", ".", "name", ")", "\n", "args", ".", "model_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save_path", ",", "'snapshots'", ")", "\n", "\n", "print", "(", "'------------ Options -------------'", ")", "\n", "for", "k", ",", "v", "in", "sorted", "(", "vars", "(", "args", ")", ".", "items", "(", ")", ")", ":", "\n", "        ", "print", "(", "'{}: {}'", ".", "format", "(", "k", ",", "v", ")", ")", "\n", "", "print", "(", "'-------------- End ----------------'", ")", "\n", "\n", "if", "args", ".", "phrase", "==", "'train'", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "isdir", "(", "args", ".", "save_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "args", ".", "save_path", ")", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "args", ".", "model_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "args", ".", "model_path", ")", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "save_path", ",", "'config'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "json", ".", "dumps", "(", "vars", "(", "args", ")", ")", ")", "\n", "\n", "", "env", "=", "BatchSpatialEnv", "(", ")", "\n", "env", ".", "init", "(", "os", ".", "path", ".", "join", "(", "args", ".", "replays_path", ",", "'{}.json'", ".", "format", "(", "args", ".", "phrase", ")", ")", ",", "\n", "'./'", ",", "args", ".", "race", ",", "args", ".", "enemy_race", ",", "n_steps", "=", "args", ".", "n_steps", ",", "seed", "=", "args", ".", "seed", ",", "\n", "n_replays", "=", "args", ".", "n_replays", ",", "epochs", "=", "args", ".", "n_epoch", ")", "\n", "model", "=", "BuildOrderGRU", "(", "env", ".", "n_channels", ",", "env", ".", "n_features", ",", "env", ".", "n_actions", ")", "\n", "train", "(", "model", ",", "env", ",", "args", ")", "\n", "", "elif", "'val'", "in", "args", ".", "phrase", "or", "'test'", "in", "args", ".", "phrase", ":", "\n", "        ", "test_result_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save_path", ",", "args", ".", "phrase", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "test_result_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "test_result_path", ")", "\n", "\n", "", "dataset_path", "=", "'test.json'", "if", "'test'", "in", "args", ".", "phrase", "else", "'val.json'", "\n", "paths", "=", "set", "(", ")", "\n", "while", "True", ":", "\n", "            ", "path", "=", "next_path", "(", "args", ".", "model_path", ",", "paths", ")", "\n", "if", "path", "is", "not", "None", ":", "\n", "                ", "print", "(", "'[{}]Testing {} ...'", ".", "format", "(", "len", "(", "paths", ")", ",", "path", ")", ")", "\n", "\n", "env", "=", "BatchSpatialEnv", "(", ")", "\n", "env", ".", "init", "(", "os", ".", "path", ".", "join", "(", "args", ".", "replays_path", ",", "dataset_path", ")", ",", "\n", "'./'", ",", "args", ".", "race", ",", "args", ".", "enemy_race", ",", "n_steps", "=", "args", ".", "n_steps", ",", "\n", "seed", "=", "args", ".", "seed", ",", "n_replays", "=", "1", ",", "epochs", "=", "1", ")", "\n", "model", "=", "BuildOrderGRU", "(", "env", ".", "n_channels", ",", "env", ".", "n_features", ",", "env", ".", "n_actions", ")", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "path", ")", ")", "\n", "result", "=", "test", "(", "model", ",", "env", ",", "args", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "test_result_path", ",", "os", ".", "path", ".", "basename", "(", "path", ")", ")", ",", "'wb'", ")", "as", "f", ":", "\n", "                    ", "pickle", ".", "dump", "(", "result", ",", "f", ")", "\n", "", "show_test_result", "(", "args", ".", "name", ",", "args", ".", "phrase", ",", "result", ",", "title", "=", "len", "(", "paths", ")", "-", "1", ")", "\n", "", "else", ":", "\n", "                ", "time", ".", "sleep", "(", "60", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_MSC.BuildOrderPrediction.train.BuildOrderGRU.__init__": [[24, 35], ["super().__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.GRUCell", "torch.GRUCell", "torch.GRUCell", "torch.GRUCell", "torch.GRUCell", "torch.GRUCell", "torch.GRUCell", "torch.GRUCell", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.wuhuikai_MSC.extract_features.game_state.GameState.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_inputs", ",", "num_outputs", ")", ":", "\n", "        ", "super", "(", "BuildOrderGRU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "linear1", "=", "nn", ".", "Linear", "(", "num_inputs", ",", "1024", ")", "\n", "self", ".", "linear2", "=", "nn", ".", "Linear", "(", "1024", ",", "2048", ")", "\n", "\n", "self", ".", "rnn1", "=", "nn", ".", "GRUCell", "(", "input_size", "=", "2048", ",", "hidden_size", "=", "2048", ")", "\n", "self", ".", "rnn2", "=", "nn", ".", "GRUCell", "(", "input_size", "=", "2048", ",", "hidden_size", "=", "512", ")", "\n", "\n", "self", ".", "actor_linear", "=", "nn", ".", "Linear", "(", "512", ",", "num_outputs", ")", "\n", "\n", "self", ".", "h1", ",", "self", ".", "h2", "=", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_MSC.BuildOrderPrediction.train.BuildOrderGRU.forward": [[36, 61], ["states.size", "enumerate", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "train.BuildOrderGRU.rnn1", "train.BuildOrderGRU.rnn2", "values.append", "states.data.new().resize_().zero_", "states.data.new().resize_().zero_", "enumerate", "train.BuildOrderGRU.linear1", "train.BuildOrderGRU.linear2", "train.BuildOrderGRU.actor_linear", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "states.data.new().resize_", "states.data.new().resize_", "h1[].zero_", "h2[].zero_", "states.data.new", "states.data.new"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "states", ",", "require_init", ")", ":", "\n", "        ", "batch", "=", "states", ".", "size", "(", "1", ")", "\n", "if", "self", ".", "h1", "is", "None", "or", "self", ".", "h2", "is", "None", ":", "\n", "            ", "self", ".", "h1", "=", "Variable", "(", "states", ".", "data", ".", "new", "(", ")", ".", "resize_", "(", "(", "batch", ",", "2048", ")", ")", ".", "zero_", "(", ")", ")", "\n", "self", ".", "h2", "=", "Variable", "(", "states", ".", "data", ".", "new", "(", ")", ".", "resize_", "(", "(", "batch", ",", "512", ")", ")", ".", "zero_", "(", ")", ")", "\n", "", "elif", "True", "in", "require_init", ":", "\n", "            ", "h1", ",", "h2", "=", "self", ".", "h1", ".", "data", ",", "self", ".", "h2", ".", "data", "\n", "for", "idx", ",", "init", "in", "enumerate", "(", "require_init", ")", ":", "\n", "                ", "if", "init", ":", "\n", "                    ", "h1", "[", "idx", "]", ".", "zero_", "(", ")", "\n", "h2", "[", "idx", "]", ".", "zero_", "(", ")", "\n", "", "", "self", ".", "h1", ",", "self", ".", "h2", "=", "Variable", "(", "h1", ")", ",", "Variable", "(", "h2", ")", "\n", "", "else", ":", "\n", "            ", "pass", "\n", "\n", "", "values", "=", "[", "]", "\n", "for", "idx", ",", "state", "in", "enumerate", "(", "states", ")", ":", "\n", "            ", "x", "=", "F", ".", "relu", "(", "self", ".", "linear1", "(", "state", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "linear2", "(", "x", ")", ")", "\n", "self", ".", "h1", "=", "self", ".", "rnn1", "(", "x", ",", "self", ".", "h1", ")", "\n", "self", ".", "h2", "=", "self", ".", "rnn2", "(", "self", ".", "h1", ",", "self", ".", "h2", ")", "\n", "\n", "values", ".", "append", "(", "self", ".", "actor_linear", "(", "self", ".", "h2", ")", ")", "\n", "\n", "", "return", "values", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_MSC.BuildOrderPrediction.train.BuildOrderGRU.detach": [[62, 67], ["train.BuildOrderGRU.h1.detach_", "train.BuildOrderGRU.h2.detach_"], "methods", ["None"], ["", "def", "detach", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "h1", "is", "not", "None", ":", "\n", "            ", "self", ".", "h1", ".", "detach_", "(", ")", "\n", "", "if", "self", ".", "h2", "is", "not", "None", ":", "\n", "            ", "self", ".", "h2", ".", "detach_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_MSC.BuildOrderPrediction.train.train": [[68, 183], ["visdom.Visdom", "visdom.Visdom.line", "visdom.Visdom.line", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "model.train", "torch.Adam", "env.step", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "model.parameters", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().long().squeeze", "torch.from_numpy().long().squeeze", "torch.from_numpy().long().squeeze", "torch.from_numpy().long().squeeze", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "model", "zip", "model.zero_grad", "action_loss.backward", "optim.Adam.step", "model.detach", "visdom.Visdom.updateTrace", "numpy.swapaxes", "numpy.swapaxes", "enumerate", "env.step", "range", "range", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "model.cuda", "states.copy_.cuda", "actions_gt.copy_.cuda", "weight.cuda.cuda", "torch.autograd.Variable", "len", "numpy.asarray", "actions_gt.copy_.cpu().numpy", "zip", "pre_per_replay[].append", "gt_per_replay[].append", "states.copy_.copy_", "actions_gt.copy_.copy_", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "env.close", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.cross_entropy", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().long().squeeze", "torch.from_numpy().long().squeeze", "torch.from_numpy().long().squeeze", "torch.from_numpy().long().squeeze", "env.step_count", "env.step_count", "model.state_dict", "os.path.join", "model.state_dict", "os.path.join", "torch.autograd.Variable", "action_loss.data.cpu().numpy", "numpy.argmax", "actions_gt.copy_.cpu", "len", "len", "range", "numpy.asarray", "range", "visdom.Visdom.updateTrace", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "env.step_count", "action.data.cpu().numpy", "np.asarray.append", "visdom.Visdom.updateTrace", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "env.step_count", "action_loss.data.cpu", "numpy.mean", "numpy.asarray", "numpy.asarray", "action.data.cpu", "numpy.asarray", "numpy.asarray", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "env.step_count", "numpy.mean", "env.step_count"], "function", ["home.repos.pwc.inspect_result.wuhuikai_MSC.GlobalStateEvaluation.train.train", "home.repos.pwc.inspect_result.wuhuikai_MSC.data_loader.BatchEnv.BatchEnv.step", "home.repos.pwc.inspect_result.wuhuikai_MSC.data_loader.BatchEnv.BatchEnv.step", "home.repos.pwc.inspect_result.wuhuikai_MSC.GlobalStateEvaluation.train.StateEvaluationGRU.detach", "home.repos.pwc.inspect_result.wuhuikai_MSC.data_loader.BatchEnv.BatchEnv.step", "home.repos.pwc.inspect_result.wuhuikai_MSC.extract_features.split.save", "home.repos.pwc.inspect_result.wuhuikai_MSC.extract_features.split.save", "home.repos.pwc.inspect_result.wuhuikai_MSC.extract_features.split.save", "home.repos.pwc.inspect_result.wuhuikai_MSC.extract_features.split.save", "home.repos.pwc.inspect_result.wuhuikai_MSC.extract_features.split.save", "home.repos.pwc.inspect_result.wuhuikai_MSC.extract_features.split.save", "home.repos.pwc.inspect_result.wuhuikai_MSC.extract_features.split.save", "home.repos.pwc.inspect_result.wuhuikai_MSC.extract_features.split.save", "home.repos.pwc.inspect_result.wuhuikai_MSC.data_loader.BatchEnv.BatchEnv.close", "home.repos.pwc.inspect_result.wuhuikai_MSC.data_loader.BatchEnv.BatchEnv.step_count", "home.repos.pwc.inspect_result.wuhuikai_MSC.data_loader.BatchEnv.BatchEnv.step_count", "home.repos.pwc.inspect_result.wuhuikai_MSC.data_loader.BatchEnv.BatchEnv.step_count", "home.repos.pwc.inspect_result.wuhuikai_MSC.data_loader.BatchEnv.BatchEnv.step_count", "home.repos.pwc.inspect_result.wuhuikai_MSC.data_loader.BatchEnv.BatchEnv.step_count", "home.repos.pwc.inspect_result.wuhuikai_MSC.data_loader.BatchEnv.BatchEnv.step_count"], ["", "", "", "def", "train", "(", "model", ",", "env", ",", "args", ")", ":", "\n", "#################################### PLOT ###################################################", "\n", "    ", "STEPS", "=", "10", "\n", "LAMBDA", "=", "0.99", "\n", "vis", "=", "visdom", ".", "Visdom", "(", "env", "=", "args", ".", "name", "+", "'[{}]'", ".", "format", "(", "args", ".", "phrase", ")", ")", "\n", "pre_per_replay", "=", "[", "[", "]", "for", "_", "in", "range", "(", "args", ".", "n_replays", ")", "]", "\n", "gt_per_replay", "=", "[", "[", "]", "for", "_", "in", "range", "(", "args", ".", "n_replays", ")", "]", "\n", "acc", "=", "None", "\n", "win", "=", "vis", ".", "line", "(", "X", "=", "np", ".", "zeros", "(", "1", ")", ",", "Y", "=", "np", ".", "zeros", "(", "1", ")", ")", "\n", "loss_win", "=", "vis", ".", "line", "(", "X", "=", "np", ".", "zeros", "(", "1", ")", ",", "Y", "=", "np", ".", "zeros", "(", "1", ")", ")", "\n", "\n", "#################################### TRAIN ######################################################", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "\n", "gpu_id", "=", "args", ".", "gpu_id", "\n", "with", "torch", ".", "cuda", ".", "device", "(", "gpu_id", ")", ":", "\n", "        ", "model", "=", "model", ".", "cuda", "(", ")", "if", "gpu_id", ">=", "0", "else", "model", "\n", "", "model", ".", "train", "(", ")", "\n", "optimizer", "=", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ")", "\n", "\n", "epoch", "=", "0", "\n", "save", "=", "args", ".", "save_intervel", "\n", "env_return", "=", "env", ".", "step", "(", "reward", "=", "False", ",", "action", "=", "True", ")", "\n", "if", "env_return", "is", "not", "None", ":", "\n", "        ", "(", "states", ",", "actions_gt", ")", ",", "require_init", "=", "env_return", "\n", "", "with", "torch", ".", "cuda", ".", "device", "(", "gpu_id", ")", ":", "\n", "        ", "states", "=", "torch", ".", "from_numpy", "(", "states", ")", ".", "float", "(", ")", "\n", "actions_gt", "=", "torch", ".", "from_numpy", "(", "actions_gt", ")", ".", "long", "(", ")", ".", "squeeze", "(", ")", "\n", "weight", "=", "torch", ".", "ones", "(", "(", "env", ".", "n_actions", ",", ")", ")", "\n", "weight", "[", "-", "1", "]", "=", "0.05", "\n", "if", "gpu_id", ">=", "0", ":", "\n", "            ", "states", "=", "states", ".", "cuda", "(", ")", "\n", "actions_gt", "=", "actions_gt", ".", "cuda", "(", ")", "\n", "weight", "=", "weight", ".", "cuda", "(", ")", "\n", "\n", "", "", "while", "True", ":", "\n", "        ", "actions", "=", "model", "(", "Variable", "(", "states", ")", ",", "require_init", ")", "\n", "\n", "action_loss", "=", "0", "\n", "for", "action", ",", "action_gt", "in", "zip", "(", "actions", ",", "actions_gt", ")", ":", "\n", "            ", "action_loss", "=", "action_loss", "+", "F", ".", "cross_entropy", "(", "action", ",", "Variable", "(", "action_gt", ")", ",", "weight", "=", "weight", ")", "\n", "", "action_loss", "=", "action_loss", "/", "len", "(", "actions", ")", "\n", "\n", "model", ".", "zero_grad", "(", ")", "\n", "action_loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "model", ".", "detach", "(", ")", "\n", "\n", "if", "env", ".", "epoch", ">", "epoch", ":", "\n", "            ", "epoch", "=", "env", ".", "epoch", "\n", "for", "p", "in", "optimizer", ".", "param_groups", ":", "\n", "                ", "p", "[", "'lr'", "]", "*=", "0.1", "\n", "\n", "############################ PLOT ##########################################", "\n", "", "", "vis", ".", "updateTrace", "(", "X", "=", "np", ".", "asarray", "(", "[", "env", ".", "step_count", "(", ")", "]", ")", ",", "\n", "Y", "=", "np", ".", "asarray", "(", "action_loss", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ",", "\n", "win", "=", "loss_win", ",", "\n", "name", "=", "'action'", ")", "\n", "\n", "actions_np", "=", "np", ".", "swapaxes", "(", "np", ".", "asarray", "(", "[", "np", ".", "argmax", "(", "action", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "axis", "=", "1", ")", "for", "action", "in", "actions", "]", ")", ",", "0", ",", "1", ")", "\n", "actions_gt_np", "=", "np", ".", "swapaxes", "(", "actions_gt", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "0", ",", "1", ")", "\n", "\n", "for", "idx", ",", "(", "action", ",", "action_gt", ",", "init", ")", "in", "enumerate", "(", "zip", "(", "actions_np", ",", "actions_gt_np", ",", "require_init", ")", ")", ":", "\n", "            ", "if", "init", "and", "len", "(", "pre_per_replay", "[", "idx", "]", ")", ">", "0", ":", "\n", "                ", "pre_per_replay", "[", "idx", "]", "=", "np", ".", "asarray", "(", "pre_per_replay", "[", "idx", "]", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "gt_per_replay", "[", "idx", "]", "=", "np", ".", "asarray", "(", "gt_per_replay", "[", "idx", "]", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "step", "=", "len", "(", "pre_per_replay", "[", "idx", "]", ")", "//", "STEPS", "\n", "if", "step", ">", "0", ":", "\n", "                    ", "acc_tmp", "=", "[", "]", "\n", "for", "s", "in", "range", "(", "STEPS", ")", ":", "\n", "                        ", "action_pre", "=", "pre_per_replay", "[", "idx", "]", "[", "s", "*", "step", ":", "(", "s", "+", "1", ")", "*", "step", "]", "\n", "action_gt", "=", "gt_per_replay", "[", "idx", "]", "[", "s", "*", "step", ":", "(", "s", "+", "1", ")", "*", "step", "]", "\n", "acc_tmp", ".", "append", "(", "np", ".", "mean", "(", "action_pre", "==", "action_gt", ")", ")", "\n", "\n", "", "acc_tmp", "=", "np", ".", "asarray", "(", "acc_tmp", ")", "\n", "if", "acc", "is", "None", ":", "\n", "                        ", "acc", "=", "acc_tmp", "\n", "", "else", ":", "\n", "                        ", "acc", "=", "LAMBDA", "*", "acc", "+", "(", "1", "-", "LAMBDA", ")", "*", "acc_tmp", "\n", "\n", "", "if", "acc", "is", "None", ":", "\n", "                        ", "continue", "\n", "", "for", "s", "in", "range", "(", "STEPS", ")", ":", "\n", "                        ", "vis", ".", "updateTrace", "(", "X", "=", "np", ".", "asarray", "(", "[", "env", ".", "step_count", "(", ")", "]", ")", ",", "\n", "Y", "=", "np", ".", "asarray", "(", "[", "acc", "[", "s", "]", "]", ")", ",", "\n", "win", "=", "win", ",", "\n", "name", "=", "'{}[{}%~{}%]'", ".", "format", "(", "'action'", ",", "s", "*", "10", ",", "(", "s", "+", "1", ")", "*", "10", ")", ")", "\n", "", "vis", ".", "updateTrace", "(", "X", "=", "np", ".", "asarray", "(", "[", "env", ".", "step_count", "(", ")", "]", ")", ",", "\n", "Y", "=", "np", ".", "asarray", "(", "[", "np", ".", "mean", "(", "acc", ")", "]", ")", ",", "\n", "win", "=", "win", ",", "\n", "name", "=", "'action[TOTAL]'", ")", "\n", "\n", "", "pre_per_replay", "[", "idx", "]", "=", "[", "]", "\n", "gt_per_replay", "[", "idx", "]", "=", "[", "]", "\n", "\n", "", "pre_per_replay", "[", "idx", "]", ".", "append", "(", "action", "[", "-", "1", "]", ")", "\n", "gt_per_replay", "[", "idx", "]", ".", "append", "(", "action_gt", "[", "-", "1", "]", ")", "\n", "\n", "####################### NEXT BATCH ###################################", "\n", "", "env_return", "=", "env", ".", "step", "(", "reward", "=", "False", ",", "action", "=", "True", ")", "\n", "if", "env_return", "is", "not", "None", ":", "\n", "            ", "(", "raw_states", ",", "raw_actions_gt", ")", ",", "require_init", "=", "env_return", "\n", "states", "=", "states", ".", "copy_", "(", "torch", ".", "from_numpy", "(", "raw_states", ")", ".", "float", "(", ")", ")", "\n", "actions_gt", "=", "actions_gt", ".", "copy_", "(", "torch", ".", "from_numpy", "(", "raw_actions_gt", ")", ".", "long", "(", ")", ".", "squeeze", "(", ")", ")", "\n", "\n", "", "if", "env", ".", "step_count", "(", ")", ">", "save", "or", "env_return", "is", "None", ":", "\n", "            ", "save", "=", "env", ".", "step_count", "(", ")", "+", "args", ".", "save_intervel", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "args", ".", "model_path", ",", "'model_iter_{}.pth'", ".", "format", "(", "env", ".", "step_count", "(", ")", ")", ")", ")", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "args", ".", "model_path", ",", "'model_latest.pth'", ")", ")", "\n", "", "if", "env_return", "is", "None", ":", "\n", "            ", "env", ".", "close", "(", ")", "\n", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_MSC.BuildOrderPrediction.train.test": [[184, 237], ["torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "model.eval", "env.step", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().long().squeeze", "torch.from_numpy().long().squeeze", "torch.from_numpy().long().squeeze", "torch.from_numpy().long().squeeze", "model", "numpy.squeeze", "numpy.squeeze", "action_pre_per_replay[].append", "action_gt_per_replay[].append", "env.step", "model.cuda", "states.copy_.cuda", "actions_gt.copy_.cuda", "torch.autograd.Variable", "numpy.vstack", "actions_gt.copy_.cpu().numpy", "numpy.ravel", "numpy.ravel", "action_pre_per_replay.append", "action_gt_per_replay.append", "states.copy_.copy_", "actions_gt.copy_.copy_", "numpy.ravel", "numpy.ravel", "env.close", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "len", "numpy.hstack", "numpy.hstack", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().long().squeeze", "torch.from_numpy().long().squeeze", "torch.from_numpy().long().squeeze", "torch.from_numpy().long().squeeze", "numpy.hstack", "numpy.hstack", "numpy.argmax", "actions_gt.copy_.cpu", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "action.data.cpu().numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "action.data.cpu", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.wuhuikai_MSC.data_loader.BatchEnv.BatchEnv.step", "home.repos.pwc.inspect_result.wuhuikai_MSC.data_loader.BatchEnv.BatchEnv.step", "home.repos.pwc.inspect_result.wuhuikai_MSC.data_loader.BatchEnv.BatchEnv.close"], ["", "", "", "def", "test", "(", "model", ",", "env", ",", "args", ")", ":", "\n", "######################### SAVE RESULT ############################", "\n", "    ", "action_pre_per_replay", "=", "[", "[", "]", "]", "\n", "action_gt_per_replay", "=", "[", "[", "]", "]", "\n", "\n", "######################### TEST ###################################", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "\n", "gpu_id", "=", "args", ".", "gpu_id", "\n", "with", "torch", ".", "cuda", ".", "device", "(", "gpu_id", ")", ":", "\n", "        ", "model", "=", "model", ".", "cuda", "(", ")", "if", "gpu_id", ">=", "0", "else", "model", "\n", "", "model", ".", "eval", "(", ")", "\n", "\n", "env_return", "=", "env", ".", "step", "(", "reward", "=", "False", ",", "action", "=", "True", ")", "\n", "if", "env_return", "is", "not", "None", ":", "\n", "        ", "(", "states", ",", "actions_gt", ")", ",", "require_init", "=", "env_return", "\n", "", "with", "torch", ".", "cuda", ".", "device", "(", "gpu_id", ")", ":", "\n", "        ", "states", "=", "torch", ".", "from_numpy", "(", "states", ")", ".", "float", "(", ")", "\n", "actions_gt", "=", "torch", ".", "from_numpy", "(", "actions_gt", ")", ".", "long", "(", ")", ".", "squeeze", "(", ")", "\n", "if", "gpu_id", ">=", "0", ":", "\n", "            ", "states", "=", "states", ".", "cuda", "(", ")", "\n", "actions_gt", "=", "actions_gt", ".", "cuda", "(", ")", "\n", "\n", "", "", "while", "True", ":", "\n", "        ", "actions", "=", "model", "(", "Variable", "(", "states", ")", ",", "require_init", ")", "\n", "############################ PLOT ##########################################", "\n", "actions_np", "=", "np", ".", "squeeze", "(", "np", ".", "vstack", "(", "[", "np", ".", "argmax", "(", "action", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "axis", "=", "1", ")", "for", "action", "in", "actions", "]", ")", ")", "\n", "actions_gt_np", "=", "np", ".", "squeeze", "(", "actions_gt", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "if", "require_init", "[", "-", "1", "]", "and", "len", "(", "action_gt_per_replay", "[", "-", "1", "]", ")", ">", "0", ":", "\n", "            ", "action_pre_per_replay", "[", "-", "1", "]", "=", "np", ".", "ravel", "(", "np", ".", "hstack", "(", "action_pre_per_replay", "[", "-", "1", "]", ")", ")", "\n", "action_gt_per_replay", "[", "-", "1", "]", "=", "np", ".", "ravel", "(", "np", ".", "hstack", "(", "action_gt_per_replay", "[", "-", "1", "]", ")", ")", "\n", "\n", "action_pre_per_replay", ".", "append", "(", "[", "]", ")", "\n", "action_gt_per_replay", ".", "append", "(", "[", "]", ")", "\n", "\n", "", "action_pre_per_replay", "[", "-", "1", "]", ".", "append", "(", "actions_np", ")", "\n", "action_gt_per_replay", "[", "-", "1", "]", ".", "append", "(", "actions_gt_np", ")", "\n", "########################### NEXT BATCH #############################################", "\n", "env_return", "=", "env", ".", "step", "(", "reward", "=", "False", ",", "action", "=", "True", ")", "\n", "if", "env_return", "is", "not", "None", ":", "\n", "            ", "(", "raw_states", ",", "raw_actions", ")", ",", "require_init", "=", "env_return", "\n", "states", "=", "states", ".", "copy_", "(", "torch", ".", "from_numpy", "(", "raw_states", ")", ".", "float", "(", ")", ")", "\n", "actions_gt", "=", "actions_gt", ".", "copy_", "(", "torch", ".", "from_numpy", "(", "raw_actions", ")", ".", "long", "(", ")", ".", "squeeze", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "action_pre_per_replay", "[", "-", "1", "]", "=", "np", ".", "ravel", "(", "np", ".", "hstack", "(", "action_pre_per_replay", "[", "-", "1", "]", ")", ")", "\n", "action_gt_per_replay", "[", "-", "1", "]", "=", "np", ".", "ravel", "(", "np", ".", "hstack", "(", "action_gt_per_replay", "[", "-", "1", "]", ")", ")", "\n", "\n", "env", ".", "close", "(", ")", "\n", "break", "\n", "\n", "", "", "return", "action_pre_per_replay", ",", "action_gt_per_replay", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_MSC.BuildOrderPrediction.train.next_path": [[238, 248], ["sorted", "paths.add", "os.path.join", "int", "len", "os.listdir", "[].split", "os.path.basename().split", "os.path.basename"], "function", ["None"], ["", "def", "next_path", "(", "model_folder", ",", "paths", ")", ":", "\n", "    ", "models", "=", "{", "int", "(", "os", ".", "path", ".", "basename", "(", "model", ")", ".", "split", "(", "'.'", ")", "[", "0", "]", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", ")", "\n", "for", "model", "in", "os", ".", "listdir", "(", "model_folder", ")", "if", "'latest'", "not", "in", "model", "}", "\n", "models_not_process", "=", "models", "-", "paths", "\n", "if", "len", "(", "models_not_process", ")", "==", "0", ":", "\n", "        ", "return", "None", "\n", "", "models_not_process", "=", "sorted", "(", "models_not_process", ")", "\n", "paths", ".", "add", "(", "models_not_process", "[", "0", "]", ")", "\n", "\n", "return", "os", ".", "path", ".", "join", "(", "model_folder", ",", "'model_iter_{}.pth'", ".", "format", "(", "models_not_process", "[", "0", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_MSC.BuildOrderPrediction.train.main": [[249, 319], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "os.path.join", "os.path.join", "print", "sorted", "print", "vars().items", "print", "data_loader.BatchEnv.BatchGlobalFeatureEnv", "data_loader.BatchEnv.BatchGlobalFeatureEnv.init", "train.BuildOrderGRU", "train.train", "os.path.isdir", "os.makedirs", "os.path.isdir", "os.makedirs", "open", "f.write", "os.path.join", "os.path.join", "set", "vars", "os.path.join", "json.dumps", "os.path.isdir", "os.makedirs", "train.next_path", "vars", "print", "data_loader.BatchEnv.BatchGlobalFeatureEnv", "data_loader.BatchEnv.BatchGlobalFeatureEnv.init", "train.BuildOrderGRU", "BuildOrderGRU.load_state_dict", "train.test", "Baselines.GlobalStateEvaluation.test.show_test_result", "time.sleep", "os.path.join", "torch.load", "torch.load", "torch.load", "torch.load", "open", "pickle.dump", "len", "os.path.join", "os.path.basename", "len"], "function", ["home.repos.pwc.inspect_result.wuhuikai_MSC.data_loader.BatchEnv.BatchEnv.init", "home.repos.pwc.inspect_result.wuhuikai_MSC.GlobalStateEvaluation.train.train", "home.repos.pwc.inspect_result.wuhuikai_MSC.GlobalStateEvaluation.train.next_path", "home.repos.pwc.inspect_result.wuhuikai_MSC.data_loader.BatchEnv.BatchEnv.init", "home.repos.pwc.inspect_result.wuhuikai_MSC.GlobalStateEvaluation.train.test", "home.repos.pwc.inspect_result.wuhuikai_MSC.GlobalStateEvaluation.test.show_test_result"], ["", "def", "main", "(", ")", ":", "\n", "# Training settings", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Global State Evaluation : StarCraft II'", ")", "\n", "parser", ".", "add_argument", "(", "'--name'", ",", "type", "=", "str", ",", "default", "=", "'StarCraft II:TvT[BuildOrder]'", ",", "\n", "help", "=", "'Experiment name. All outputs will be stored in checkpoints/[name]/'", ")", "\n", "parser", ".", "add_argument", "(", "'--replays_path'", ",", "default", "=", "'train_val_test/Terran_vs_Terran'", ",", "\n", "help", "=", "'Path for training, validation and test set (default: train_val_test/Terran_vs_Terran)'", ")", "\n", "parser", ".", "add_argument", "(", "'--race'", ",", "default", "=", "'Terran'", ",", "help", "=", "'Which race? (default: Terran)'", ")", "\n", "parser", ".", "add_argument", "(", "'--enemy_race'", ",", "default", "=", "'Terran'", ",", "help", "=", "'Which the enemy race? (default: Terran)'", ")", "\n", "parser", ".", "add_argument", "(", "'--phrase'", ",", "type", "=", "str", ",", "default", "=", "'train'", ",", "\n", "help", "=", "'train|val|test (default: train)'", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu_id'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "help", "=", "'Which GPU to use [-1 indicate CPU] (default: 0)'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.001", ",", "help", "=", "'Learning rate (default: 0.001)'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'Random seed (default: 1)'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--n_steps'", ",", "type", "=", "int", ",", "default", "=", "20", ",", "help", "=", "'# of forward steps (default: 20)'", ")", "\n", "parser", ".", "add_argument", "(", "'--n_replays'", ",", "type", "=", "int", ",", "default", "=", "256", ",", "help", "=", "'# of replays (default: 256)'", ")", "\n", "parser", ".", "add_argument", "(", "'--n_epoch'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "help", "=", "'# of epoches (default: 10)'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--save_intervel'", ",", "type", "=", "int", ",", "default", "=", "1000000", ",", "\n", "help", "=", "'Frequency of model saving (default: 1000000)'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "args", ".", "save_path", "=", "os", ".", "path", ".", "join", "(", "'checkpoints'", ",", "args", ".", "name", ")", "\n", "args", ".", "model_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save_path", ",", "'snapshots'", ")", "\n", "\n", "print", "(", "'------------ Options -------------'", ")", "\n", "for", "k", ",", "v", "in", "sorted", "(", "vars", "(", "args", ")", ".", "items", "(", ")", ")", ":", "\n", "        ", "print", "(", "'{}: {}'", ".", "format", "(", "k", ",", "v", ")", ")", "\n", "", "print", "(", "'-------------- End ----------------'", ")", "\n", "\n", "if", "args", ".", "phrase", "==", "'train'", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "isdir", "(", "args", ".", "save_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "args", ".", "save_path", ")", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "args", ".", "model_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "args", ".", "model_path", ")", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "save_path", ",", "'config'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "json", ".", "dumps", "(", "vars", "(", "args", ")", ")", ")", "\n", "\n", "", "env", "=", "BatchGlobalFeatureEnv", "(", ")", "\n", "env", ".", "init", "(", "os", ".", "path", ".", "join", "(", "args", ".", "replays_path", ",", "'{}.json'", ".", "format", "(", "args", ".", "phrase", ")", ")", ",", "\n", "'./'", ",", "args", ".", "race", ",", "args", ".", "enemy_race", ",", "n_steps", "=", "args", ".", "n_steps", ",", "seed", "=", "args", ".", "seed", ",", "\n", "n_replays", "=", "args", ".", "n_replays", ",", "epochs", "=", "args", ".", "n_epoch", ")", "\n", "model", "=", "BuildOrderGRU", "(", "env", ".", "n_features", ",", "env", ".", "n_actions", ")", "\n", "train", "(", "model", ",", "env", ",", "args", ")", "\n", "", "elif", "'val'", "in", "args", ".", "phrase", "or", "'test'", "in", "args", ".", "phrase", ":", "\n", "        ", "test_result_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save_path", ",", "args", ".", "phrase", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "test_result_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "test_result_path", ")", "\n", "\n", "", "dataset_path", "=", "'test.json'", "if", "'test'", "in", "args", ".", "phrase", "else", "'val.json'", "\n", "paths", "=", "set", "(", ")", "\n", "while", "True", ":", "\n", "            ", "path", "=", "next_path", "(", "args", ".", "model_path", ",", "paths", ")", "\n", "if", "path", "is", "not", "None", ":", "\n", "                ", "print", "(", "'[{}]Testing {} ...'", ".", "format", "(", "len", "(", "paths", ")", ",", "path", ")", ")", "\n", "\n", "env", "=", "BatchGlobalFeatureEnv", "(", ")", "\n", "env", ".", "init", "(", "os", ".", "path", ".", "join", "(", "args", ".", "replays_path", ",", "dataset_path", ")", ",", "\n", "'./'", ",", "args", ".", "race", ",", "args", ".", "enemy_race", ",", "n_steps", "=", "args", ".", "n_steps", ",", "\n", "seed", "=", "args", ".", "seed", ",", "n_replays", "=", "1", ",", "epochs", "=", "1", ")", "\n", "model", "=", "BuildOrderGRU", "(", "env", ".", "n_features", ",", "env", ".", "n_actions", ")", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "path", ")", ")", "\n", "result", "=", "test", "(", "model", ",", "env", ",", "args", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "test_result_path", ",", "os", ".", "path", ".", "basename", "(", "path", ")", ")", ",", "'wb'", ")", "as", "f", ":", "\n", "                    ", "pickle", ".", "dump", "(", "result", ",", "f", ")", "\n", "", "show_test_result", "(", "args", ".", "name", ",", "args", ".", "phrase", ",", "result", ",", "title", "=", "len", "(", "paths", ")", "-", "1", ")", "\n", "", "else", ":", "\n", "                ", "time", ".", "sleep", "(", "60", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_MSC.BuildOrderPrediction.test.calc_action_acc": [[10, 12], ["numpy.mean"], "function", ["None"], ["def", "calc_action_acc", "(", "action_pre", ",", "action_gt", ")", ":", "\n", "    ", "return", "np", ".", "mean", "(", "action_pre", "==", "action_gt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_MSC.BuildOrderPrediction.test.calc_weighted_action_acc": [[13, 15], ["numpy.sum", "numpy.sum", "numpy.abs", "numpy.abs"], "function", ["None"], ["", "def", "calc_weighted_action_acc", "(", "action_pre", ",", "action_gt", ",", "weight", ")", ":", "\n", "    ", "return", "np", ".", "sum", "(", "(", "action_pre", "==", "action_gt", ")", "*", "np", ".", "abs", "(", "weight", ")", ")", "/", "np", ".", "sum", "(", "np", ".", "abs", "(", "weight", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_MSC.BuildOrderPrediction.test.show_test_result": [[16, 59], ["numpy.hstack", "numpy.hstack", "numpy.hstack", "test.calc_action_acc", "test.calc_weighted_action_acc", "print", "visdom.Visdom", "zip", "numpy.repeat().reshape", "numpy.zeros", "enumerate", "visdom.Visdom.line", "range", "zip", "numpy.hstack", "numpy.hstack", "numpy.hstack", "test.calc_action_acc", "test.calc_weighted_action_acc", "range", "len", "len", "action_pre_result[].append", "action_gt_result[].append", "weight_result[].append", "numpy.repeat", "len", "dict", "numpy.arange", "range", "range", "numpy.arange", "len", "len"], "function", ["home.repos.pwc.inspect_result.wuhuikai_MSC.BuildOrderPrediction.test.calc_action_acc", "home.repos.pwc.inspect_result.wuhuikai_MSC.BuildOrderPrediction.test.calc_weighted_action_acc", "home.repos.pwc.inspect_result.wuhuikai_MSC.BuildOrderPrediction.test.calc_action_acc", "home.repos.pwc.inspect_result.wuhuikai_MSC.BuildOrderPrediction.test.calc_weighted_action_acc"], ["", "def", "show_test_result", "(", "name", ",", "phrase", ",", "result", ",", "steps", "=", "10", ",", "title", "=", "''", ")", ":", "\n", "    ", "action_pres", ",", "action_gts", "=", "result", "\n", "\n", "################################## Calc Acc #########################################", "\n", "weights", "=", "[", "(", "action_gt", "[", "0", "]", "*", "2", "-", "1", ")", "*", "LAMBDA", "**", "np", ".", "arange", "(", "len", "(", "action_gt", ")", "-", "1", ",", "-", "1", ",", "-", "1", ")", "for", "action_gt", "in", "action_gts", "]", "\n", "\n", "action_pres_np", "=", "np", ".", "hstack", "(", "action_pres", ")", "\n", "action_gts_np", "=", "np", ".", "hstack", "(", "action_gts", ")", "\n", "weights_np", "=", "np", ".", "hstack", "(", "weights", ")", "\n", "\n", "action_acc", "=", "calc_action_acc", "(", "action_pres_np", ",", "action_gts_np", ")", "\n", "weighted_action_acc", "=", "calc_weighted_action_acc", "(", "action_pres_np", ",", "action_gts_np", ",", "weights_np", ")", "\n", "print", "(", "'\\tAction Accuracy: {}%\\tWeighted Action Accuracy: {}%'", ".", "format", "(", "action_acc", "*", "100", ",", "weighted_action_acc", "*", "100", ")", ")", "\n", "################################### Plot ###################################################", "\n", "vis", "=", "visdom", ".", "Visdom", "(", "env", "=", "name", "+", "'[{}]'", ".", "format", "(", "phrase", ")", ")", "\n", "\n", "action_pre_result", ",", "action_gt_result", "=", "[", "[", "]", "for", "_", "in", "range", "(", "steps", ")", "]", ",", "[", "[", "]", "for", "_", "in", "range", "(", "steps", ")", "]", "\n", "weight_result", "=", "[", "[", "]", "for", "_", "in", "range", "(", "steps", ")", "]", "\n", "for", "action_pre", ",", "action_gt", ",", "weight", "in", "zip", "(", "action_pres", ",", "action_gts", ",", "weights", ")", ":", "\n", "        ", "if", "len", "(", "action_pre", ")", "<", "steps", ":", "\n", "            ", "continue", "\n", "\n", "", "step", "=", "len", "(", "action_pre", ")", "//", "steps", "\n", "for", "s", "in", "range", "(", "steps", ")", ":", "\n", "            ", "action_pre_result", "[", "s", "]", ".", "append", "(", "action_pre", "[", "s", "*", "step", ":", "(", "s", "+", "1", ")", "*", "step", "]", ")", "\n", "action_gt_result", "[", "s", "]", ".", "append", "(", "action_gt", "[", "s", "*", "step", ":", "(", "s", "+", "1", ")", "*", "step", "]", ")", "\n", "weight_result", "[", "s", "]", ".", "append", "(", "weight", "[", "s", "*", "step", ":", "(", "s", "+", "1", ")", "*", "step", "]", ")", "\n", "\n", "", "", "legend", "=", "[", "'Action'", ",", "'Weighted Action'", "]", "\n", "X", "=", "np", ".", "repeat", "(", "np", ".", "arange", "(", "steps", ")", ",", "len", "(", "legend", ")", ",", "axis", "=", "0", ")", ".", "reshape", "(", "steps", ",", "-", "1", ")", "\n", "Y", "=", "np", ".", "zeros", "(", "(", "steps", ",", "len", "(", "legend", ")", ")", ")", "\n", "for", "idx", ",", "(", "action_pres", ",", "action_gts", ",", "weights", ")", "in", "enumerate", "(", "\n", "zip", "(", "action_pre_result", ",", "action_gt_result", ",", "weight_result", ")", ")", ":", "\n", "\n", "        ", "action_pres_np", "=", "np", ".", "hstack", "(", "action_pres", ")", "\n", "action_gts_np", "=", "np", ".", "hstack", "(", "action_gts", ")", "\n", "weights_np", "=", "np", ".", "hstack", "(", "weights", ")", "\n", "\n", "Y", "[", "idx", ",", "0", "]", "=", "calc_action_acc", "(", "action_pres_np", ",", "action_gts_np", ")", "\n", "Y", "[", "idx", ",", "1", "]", "=", "calc_weighted_action_acc", "(", "action_pres_np", ",", "action_gts_np", ",", "weights_np", ")", "\n", "\n", "", "vis", ".", "line", "(", "X", "=", "X", ",", "Y", "=", "Y", ",", "\n", "opts", "=", "dict", "(", "title", "=", "'Acc[{}]'", ".", "format", "(", "title", ")", ",", "legend", "=", "legend", ")", ",", "win", "=", "title", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_MSC.GlobalStateEvaluation.train_spatial.StateEvaluationGRU.__init__": [[24, 38], ["super().__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.GRUCell", "torch.GRUCell", "torch.GRUCell", "torch.GRUCell", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.wuhuikai_MSC.extract_features.game_state.GameState.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_channels", ",", "n_features", ",", "n_actions", ")", ":", "\n", "        ", "super", "(", "BuildOrderGRU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "n_channels", ",", "16", ",", "8", ",", "stride", "=", "4", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "16", ",", "32", ",", "4", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "linear_g", "=", "nn", ".", "Linear", "(", "n_features", ",", "128", ")", "\n", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "1280", ",", "512", ")", "\n", "self", ".", "rnn", "=", "nn", ".", "GRUCell", "(", "input_size", "=", "512", ",", "hidden_size", "=", "128", ")", "\n", "\n", "self", ".", "actor_linear", "=", "nn", ".", "Linear", "(", "128", ",", "n_actions", ")", "\n", "\n", "self", ".", "h", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_MSC.GlobalStateEvaluation.train_spatial.StateEvaluationGRU.forward": [[39, 68], ["states_S.size", "enumerate", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "zip", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "x_s.view.view.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "train_spatial.StateEvaluationGRU.rnn", "values.append", "states_S.data.new().resize_().zero_", "enumerate", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "train_spatial.StateEvaluationGRU.conv1", "train_spatial.StateEvaluationGRU.conv2", "train_spatial.StateEvaluationGRU.linear_g", "train_spatial.StateEvaluationGRU.linear", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "train_spatial.StateEvaluationGRU.critic_linear", "states_S.data.new().resize_", "h[].zero_", "states_S.data.new"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "states_S", ",", "states_G", ",", "require_init", ")", ":", "\n", "        ", "batch", "=", "states_S", ".", "size", "(", "1", ")", "\n", "if", "self", ".", "h", "is", "None", ":", "\n", "            ", "self", ".", "h", "=", "Variable", "(", "states_S", ".", "data", ".", "new", "(", ")", ".", "resize_", "(", "(", "batch", ",", "128", ")", ")", ".", "zero_", "(", ")", ")", "\n", "", "elif", "True", "in", "require_init", ":", "\n", "            ", "h", "=", "self", ".", "h", ".", "data", "\n", "for", "idx", ",", "init", "in", "enumerate", "(", "require_init", ")", ":", "\n", "                ", "if", "init", ":", "\n", "                    ", "h", "[", "idx", "]", ".", "zero_", "(", ")", "\n", "", "", "self", ".", "h", "=", "Variable", "(", "h", ")", "\n", "", "else", ":", "\n", "            ", "pass", "\n", "\n", "", "values", "=", "[", "]", "\n", "for", "idx", ",", "(", "state_S", ",", "state_G", ")", "in", "enumerate", "(", "zip", "(", "states_S", ",", "states_G", ")", ")", ":", "\n", "            ", "x_s", "=", "F", ".", "relu", "(", "self", ".", "conv1", "(", "state_S", ")", ")", "\n", "x_s", "=", "F", ".", "relu", "(", "self", ".", "conv2", "(", "x_s", ")", ")", "\n", "x_s", "=", "x_s", ".", "view", "(", "-", "1", ",", "1152", ")", "\n", "\n", "x_g", "=", "F", ".", "relu", "(", "self", ".", "linear_g", "(", "state_G", ")", ")", "\n", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x_s", ",", "x_g", ")", ",", "1", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "linear", "(", "x", ")", ")", "\n", "\n", "self", ".", "h", "=", "self", ".", "rnn", "(", "x", ",", "self", ".", "h", ")", "\n", "\n", "values", ".", "append", "(", "self", ".", "actor_linear", "(", "self", ".", "h", ")", ")", "\n", "\n", "", "return", "values", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_MSC.GlobalStateEvaluation.train_spatial.StateEvaluationGRU.detach": [[69, 72], ["train_spatial.StateEvaluationGRU.h.detach_"], "methods", ["None"], ["", "def", "detach", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "h", "is", "not", "None", ":", "\n", "            ", "self", ".", "h", ".", "detach_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_MSC.GlobalStateEvaluation.train_spatial.train": [[73, 187], ["visdom.Visdom", "visdom.Visdom.line", "visdom.Visdom.line", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "model.train", "torch.Adam", "env.step", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "model.parameters", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "model", "zip", "model.zero_grad", "value_loss.backward", "optim.Adam.step", "model.detach", "visdom.Visdom.updateTrace", "numpy.swapaxes", "numpy.swapaxes", "enumerate", "env.step", "range", "range", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "model.cuda", "states_S.copy_.cuda", "states_G.copy_.cuda", "rewards.copy_.cuda", "torch.autograd.Variable", "torch.autograd.Variable", "numpy.asarray", "rewards.copy_.cpu().numpy", "zip", "pre_per_replay[].append", "gt_per_replay[].append", "states_S.copy_.copy_", "states_G.copy_.copy_", "rewards.copy_.copy_", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "env.close", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.binary_cross_entropy", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "int", "int", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "env.step_count", "env.step_count", "model.state_dict", "os.path.join", "model.state_dict", "os.path.join", "torch.autograd.Variable", "value_loss.data.cpu().numpy", "value.data.cpu().numpy", "rewards.copy_.cpu", "len", "len", "range", "numpy.asarray", "range", "visdom.Visdom.updateTrace", "env.step_count", "np.asarray.append", "visdom.Visdom.updateTrace", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "env.step_count", "value_loss.data.cpu", "value.data.cpu", "numpy.mean", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "env.step_count", "numpy.mean", "env.step_count"], "function", ["home.repos.pwc.inspect_result.wuhuikai_MSC.GlobalStateEvaluation.train.train", "home.repos.pwc.inspect_result.wuhuikai_MSC.data_loader.BatchEnv.BatchEnv.step", "home.repos.pwc.inspect_result.wuhuikai_MSC.data_loader.BatchEnv.BatchEnv.step", "home.repos.pwc.inspect_result.wuhuikai_MSC.GlobalStateEvaluation.train.StateEvaluationGRU.detach", "home.repos.pwc.inspect_result.wuhuikai_MSC.data_loader.BatchEnv.BatchEnv.step", "home.repos.pwc.inspect_result.wuhuikai_MSC.extract_features.split.save", "home.repos.pwc.inspect_result.wuhuikai_MSC.extract_features.split.save", "home.repos.pwc.inspect_result.wuhuikai_MSC.extract_features.split.save", "home.repos.pwc.inspect_result.wuhuikai_MSC.extract_features.split.save", "home.repos.pwc.inspect_result.wuhuikai_MSC.extract_features.split.save", "home.repos.pwc.inspect_result.wuhuikai_MSC.extract_features.split.save", "home.repos.pwc.inspect_result.wuhuikai_MSC.extract_features.split.save", "home.repos.pwc.inspect_result.wuhuikai_MSC.extract_features.split.save", "home.repos.pwc.inspect_result.wuhuikai_MSC.data_loader.BatchEnv.BatchEnv.close", "home.repos.pwc.inspect_result.wuhuikai_MSC.data_loader.BatchEnv.BatchEnv.step_count", "home.repos.pwc.inspect_result.wuhuikai_MSC.data_loader.BatchEnv.BatchEnv.step_count", "home.repos.pwc.inspect_result.wuhuikai_MSC.data_loader.BatchEnv.BatchEnv.step_count", "home.repos.pwc.inspect_result.wuhuikai_MSC.data_loader.BatchEnv.BatchEnv.step_count", "home.repos.pwc.inspect_result.wuhuikai_MSC.data_loader.BatchEnv.BatchEnv.step_count", "home.repos.pwc.inspect_result.wuhuikai_MSC.data_loader.BatchEnv.BatchEnv.step_count"], ["", "", "", "def", "train", "(", "model", ",", "env", ",", "args", ")", ":", "\n", "#################################### PLOT ###################################################", "\n", "    ", "STEPS", "=", "10", "\n", "LAMBDA", "=", "0.99", "\n", "vis", "=", "visdom", ".", "Visdom", "(", "env", "=", "args", ".", "name", "+", "'[{}]'", ".", "format", "(", "args", ".", "phrase", ")", ")", "\n", "pre_per_replay", "=", "[", "[", "]", "for", "_", "in", "range", "(", "args", ".", "n_replays", ")", "]", "\n", "gt_per_replay", "=", "[", "[", "]", "for", "_", "in", "range", "(", "args", ".", "n_replays", ")", "]", "\n", "acc", "=", "None", "\n", "win", "=", "vis", ".", "line", "(", "X", "=", "np", ".", "zeros", "(", "1", ")", ",", "Y", "=", "np", ".", "zeros", "(", "1", ")", ")", "\n", "loss_win", "=", "vis", ".", "line", "(", "X", "=", "np", ".", "zeros", "(", "1", ")", ",", "Y", "=", "np", ".", "zeros", "(", "1", ")", ")", "\n", "\n", "#################################### TRAIN ######################################################", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "\n", "gpu_id", "=", "args", ".", "gpu_id", "\n", "with", "torch", ".", "cuda", ".", "device", "(", "gpu_id", ")", ":", "\n", "        ", "model", "=", "model", ".", "cuda", "(", ")", "if", "gpu_id", ">=", "0", "else", "model", "\n", "", "model", ".", "train", "(", ")", "\n", "optimizer", "=", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ")", "\n", "\n", "epoch", "=", "0", "\n", "save", "=", "args", ".", "save_intervel", "\n", "env_return", "=", "env", ".", "step", "(", "reward", "=", "False", ",", "action", "=", "True", ")", "\n", "if", "env_return", "is", "not", "None", ":", "\n", "        ", "(", "states_S", ",", "states_G", ",", "actions_gt", ")", ",", "require_init", "=", "env_return", "\n", "", "with", "torch", ".", "cuda", ".", "device", "(", "gpu_id", ")", ":", "\n", "        ", "states_S", "=", "torch", ".", "from_numpy", "(", "states_S", ")", ".", "float", "(", ")", "\n", "states_G", "=", "torch", ".", "from_numpy", "(", "states_G", ")", ".", "float", "(", ")", "\n", "actions_gt", "=", "torch", ".", "from_numpy", "(", "actions_gt", ")", ".", "long", "(", ")", ".", "squeeze", "(", ")", "\n", "weight", "=", "torch", ".", "ones", "(", "(", "env", ".", "n_actions", ",", ")", ")", "\n", "weight", "[", "-", "1", "]", "=", "0.05", "\n", "if", "gpu_id", ">=", "0", ":", "\n", "            ", "states_S", "=", "states_S", ".", "cuda", "(", ")", "\n", "states_G", "=", "states_G", ".", "cuda", "(", ")", "\n", "actions_gt", "=", "actions_gt", ".", "cuda", "(", ")", "\n", "weight", "=", "weight", ".", "cuda", "(", ")", "\n", "\n", "", "", "while", "True", ":", "\n", "        ", "actions", "=", "model", "(", "Variable", "(", "states_S", ")", ",", "Variable", "(", "states_G", ")", ",", "require_init", ")", "\n", "action_loss", "=", "0", "\n", "for", "action", ",", "action_gt", "in", "zip", "(", "actions", ",", "actions_gt", ")", ":", "\n", "            ", "action_loss", "=", "action_loss", "+", "F", ".", "cross_entropy", "(", "action", ",", "Variable", "(", "action_gt", ")", ",", "weight", "=", "weight", ")", "\n", "", "action_loss", "=", "action_loss", "/", "len", "(", "actions_gt", ")", "\n", "\n", "model", ".", "zero_grad", "(", ")", "\n", "action_loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "model", ".", "detach", "(", ")", "\n", "\n", "if", "env", ".", "epoch", ">", "epoch", ":", "\n", "            ", "epoch", "=", "env", ".", "epoch", "\n", "for", "p", "in", "optimizer", ".", "param_groups", ":", "\n", "                ", "p", "[", "'lr'", "]", "*=", "0.5", "\n", "\n", "############################ PLOT ##########################################", "\n", "", "", "vis", ".", "updateTrace", "(", "X", "=", "np", ".", "asarray", "(", "[", "env", ".", "step_count", "(", ")", "]", ")", ",", "\n", "Y", "=", "np", ".", "asarray", "(", "action_loss", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ",", "\n", "win", "=", "loss_win", ",", "\n", "name", "=", "'action'", ")", "\n", "\n", "actions_np", "=", "np", ".", "swapaxes", "(", "np", ".", "asarray", "(", "[", "np", ".", "argmax", "(", "action", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "axis", "=", "1", ")", "for", "action", "in", "actions", "]", ")", ",", "0", ",", "1", ")", "\n", "actions_gt_np", "=", "np", ".", "swapaxes", "(", "actions_gt", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "0", ",", "1", ")", "\n", "\n", "for", "idx", ",", "(", "action", ",", "action_gt", ",", "init", ")", "in", "enumerate", "(", "zip", "(", "actions_np", ",", "actions_gt_np", ",", "require_init", ")", ")", ":", "\n", "            ", "if", "init", "and", "len", "(", "pre_per_replay", "[", "idx", "]", ")", ">", "0", ":", "\n", "                ", "pre_per_replay", "[", "idx", "]", "=", "np", ".", "asarray", "(", "pre_per_replay", "[", "idx", "]", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "gt_per_replay", "[", "idx", "]", "=", "np", ".", "asarray", "(", "gt_per_replay", "[", "idx", "]", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "step", "=", "len", "(", "pre_per_replay", "[", "idx", "]", ")", "//", "STEPS", "\n", "if", "step", ">", "0", ":", "\n", "                    ", "acc_tmp", "=", "[", "]", "\n", "for", "s", "in", "range", "(", "STEPS", ")", ":", "\n", "                        ", "action_pre", "=", "pre_per_replay", "[", "idx", "]", "[", "s", "*", "step", ":", "(", "s", "+", "1", ")", "*", "step", "]", "\n", "action_gt", "=", "gt_per_replay", "[", "idx", "]", "[", "s", "*", "step", ":", "(", "s", "+", "1", ")", "*", "step", "]", "\n", "acc_tmp", ".", "append", "(", "np", ".", "mean", "(", "action_pre", "==", "action_gt", ")", ")", "\n", "\n", "", "acc_tmp", "=", "np", ".", "asarray", "(", "acc_tmp", ")", "\n", "if", "acc", "is", "None", ":", "\n", "                        ", "acc", "=", "acc_tmp", "\n", "", "else", ":", "\n", "                        ", "acc", "=", "LAMBDA", "*", "acc", "+", "(", "1", "-", "LAMBDA", ")", "*", "acc_tmp", "\n", "\n", "", "if", "acc", "is", "None", ":", "\n", "                        ", "continue", "\n", "", "for", "s", "in", "range", "(", "STEPS", ")", ":", "\n", "                        ", "vis", ".", "updateTrace", "(", "X", "=", "np", ".", "asarray", "(", "[", "env", ".", "step_count", "(", ")", "]", ")", ",", "\n", "Y", "=", "np", ".", "asarray", "(", "[", "acc", "[", "s", "]", "]", ")", ",", "\n", "win", "=", "win", ",", "\n", "name", "=", "'{}[{}%~{}%]'", ".", "format", "(", "'action'", ",", "s", "*", "10", ",", "(", "s", "+", "1", ")", "*", "10", ")", ")", "\n", "", "vis", ".", "updateTrace", "(", "X", "=", "np", ".", "asarray", "(", "[", "env", ".", "step_count", "(", ")", "]", ")", ",", "\n", "Y", "=", "np", ".", "asarray", "(", "[", "np", ".", "mean", "(", "acc", ")", "]", ")", ",", "\n", "win", "=", "win", ",", "\n", "name", "=", "'action[TOTAL]'", ")", "\n", "\n", "", "pre_per_replay", "[", "idx", "]", "=", "[", "]", "\n", "gt_per_replay", "[", "idx", "]", "=", "[", "]", "\n", "\n", "", "pre_per_replay", "[", "idx", "]", ".", "append", "(", "action", "[", "-", "1", "]", ")", "\n", "gt_per_replay", "[", "idx", "]", ".", "append", "(", "action_gt", "[", "-", "1", "]", ")", "\n", "\n", "####################### NEXT BATCH ###################################", "\n", "", "env_return", "=", "env", ".", "step", "(", "reward", "=", "False", ",", "action", "=", "True", ")", "\n", "if", "env_return", "is", "not", "None", ":", "\n", "            ", "(", "raw_states_S", ",", "raw_states_G", ",", "raw_rewards", ")", ",", "require_init", "=", "env_return", "\n", "states_S", "=", "states_S", ".", "copy_", "(", "torch", ".", "from_numpy", "(", "raw_states_S", ")", ".", "float", "(", ")", ")", "\n", "states_G", "=", "states_G", ".", "copy_", "(", "torch", ".", "from_numpy", "(", "raw_states_G", ")", ".", "float", "(", ")", ")", "\n", "actions_gt", "=", "actions_gt", ".", "copy_", "(", "torch", ".", "from_numpy", "(", "raw_rewards", ")", ".", "long", "(", ")", ".", "squeeze", "(", ")", ")", "\n", "\n", "", "if", "env", ".", "step_count", "(", ")", ">", "save", "or", "env_return", "is", "None", ":", "\n", "            ", "save", "=", "env", ".", "step_count", "(", ")", "+", "args", ".", "save_intervel", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "args", ".", "model_path", ",", "'model_iter_{}.pth'", ".", "format", "(", "env", ".", "step_count", "(", ")", ")", ")", ")", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "args", ".", "model_path", ",", "'model_latest.pth'", ")", ")", "\n", "", "if", "env_return", "is", "None", ":", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_MSC.GlobalStateEvaluation.train_spatial.test": [[188, 245], ["torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "model.eval", "env.step", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "model", "numpy.squeeze", "numpy.squeeze", "value_pre_per_replay[].append", "value_gt_per_replay[].append", "env.step", "model.cuda", "states_S.copy_.cuda", "states_G.copy_.cuda", "rewards.copy_.cuda", "torch.autograd.Variable", "torch.autograd.Variable", "numpy.vstack", "rewards.copy_.cpu().numpy", "numpy.ravel", "numpy.ravel", "value_pre_per_replay.append", "value_gt_per_replay.append", "states_S.copy_.copy_", "states_G.copy_.copy_", "rewards.copy_.copy_", "numpy.ravel", "numpy.ravel", "env.close", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "len", "numpy.hstack", "numpy.hstack", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "numpy.hstack", "numpy.hstack", "value.data.cpu().numpy", "rewards.copy_.cpu", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "value.data.cpu"], "function", ["home.repos.pwc.inspect_result.wuhuikai_MSC.data_loader.BatchEnv.BatchEnv.step", "home.repos.pwc.inspect_result.wuhuikai_MSC.data_loader.BatchEnv.BatchEnv.step", "home.repos.pwc.inspect_result.wuhuikai_MSC.data_loader.BatchEnv.BatchEnv.close"], ["            ", "env", ".", "close", "(", ")", "\n", "break", "\n", "\n", "", "", "", "def", "test", "(", "model", ",", "env", ",", "args", ")", ":", "\n", "######################### SAVE RESULT ############################", "\n", "    ", "action_pre_per_replay", "=", "[", "[", "]", "]", "\n", "action_gt_per_replay", "=", "[", "[", "]", "]", "\n", "\n", "######################### TEST ###################################", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "\n", "gpu_id", "=", "args", ".", "gpu_id", "\n", "with", "torch", ".", "cuda", ".", "device", "(", "gpu_id", ")", ":", "\n", "        ", "model", "=", "model", ".", "cuda", "(", ")", "if", "gpu_id", ">=", "0", "else", "model", "\n", "", "model", ".", "eval", "(", ")", "\n", "\n", "env_return", "=", "env", ".", "step", "(", "reward", "=", "False", ",", "action", "=", "True", ")", "\n", "if", "env_return", "is", "not", "None", ":", "\n", "        ", "(", "states_S", ",", "states_G", ",", "actions_gt", ")", ",", "require_init", "=", "env_return", "\n", "", "with", "torch", ".", "cuda", ".", "device", "(", "gpu_id", ")", ":", "\n", "        ", "states_S", "=", "torch", ".", "from_numpy", "(", "states_S", ")", ".", "float", "(", ")", "\n", "states_G", "=", "torch", ".", "from_numpy", "(", "states_G", ")", ".", "float", "(", ")", "\n", "actions_gt", "=", "torch", ".", "from_numpy", "(", "actions_gt", ")", ".", "float", "(", ")", "\n", "if", "gpu_id", ">=", "0", ":", "\n", "            ", "states_S", "=", "states_S", ".", "cuda", "(", ")", "\n", "states_G", "=", "states_G", ".", "cuda", "(", ")", "\n", "actions_gt", "=", "actions_gt", ".", "cuda", "(", ")", "\n", "\n", "", "", "while", "True", ":", "\n", "        ", "actions", "=", "model", "(", "Variable", "(", "states_S", ")", ",", "Variable", "(", "states_G", ")", ",", "require_init", ")", "\n", "############################ PLOT ##########################################", "\n", "actions_np", "=", "np", ".", "squeeze", "(", "np", ".", "vstack", "(", "[", "np", ".", "argmax", "(", "action", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "axis", "=", "1", ")", "for", "action", "in", "actions", "]", ")", ")", "\n", "actions_gt_np", "=", "np", ".", "squeeze", "(", "actions_gt", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "if", "require_init", "[", "-", "1", "]", "and", "len", "(", "action_gt_per_replay", "[", "-", "1", "]", ")", ">", "0", ":", "\n", "            ", "action_pre_per_replay", "[", "-", "1", "]", "=", "np", ".", "ravel", "(", "np", ".", "hstack", "(", "action_pre_per_replay", "[", "-", "1", "]", ")", ")", "\n", "action_gt_per_replay", "[", "-", "1", "]", "=", "np", ".", "ravel", "(", "np", ".", "hstack", "(", "action_gt_per_replay", "[", "-", "1", "]", ")", ")", "\n", "\n", "action_pre_per_replay", ".", "append", "(", "[", "]", ")", "\n", "action_gt_per_replay", ".", "append", "(", "[", "]", ")", "\n", "\n", "", "action_pre_per_replay", "[", "-", "1", "]", ".", "append", "(", "actions_np", ")", "\n", "action_gt_per_replay", "[", "-", "1", "]", ".", "append", "(", "actions_gt_np", ")", "\n", "########################### NEXT BATCH #############################################", "\n", "env_return", "=", "env", ".", "step", "(", "reward", "=", "False", ",", "action", "=", "True", ")", "\n", "if", "env_return", "is", "not", "None", ":", "\n", "            ", "(", "raw_states_S", ",", "raw_states_G", ",", "raw_actions", ")", ",", "require_init", "=", "env_return", "\n", "states_S", "=", "states_S", ".", "copy_", "(", "torch", ".", "from_numpy", "(", "raw_states_S", ")", ".", "float", "(", ")", ")", "\n", "states_G", "=", "states_G", ".", "copy_", "(", "torch", ".", "from_numpy", "(", "raw_states_G", ")", ".", "float", "(", ")", ")", "\n", "actions_gt", "=", "actions_gt", ".", "copy_", "(", "torch", ".", "from_numpy", "(", "raw_actions", ")", ".", "float", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "action_pre_per_replay", "[", "-", "1", "]", "=", "np", ".", "ravel", "(", "np", ".", "hstack", "(", "action_pre_per_replay", "[", "-", "1", "]", ")", ")", "\n", "action_gt_per_replay", "[", "-", "1", "]", "=", "np", ".", "ravel", "(", "np", ".", "hstack", "(", "action_gt_per_replay", "[", "-", "1", "]", ")", ")", "\n", "\n", "env", ".", "close", "(", ")", "\n", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_MSC.GlobalStateEvaluation.train_spatial.next_path": [[246, 256], ["sorted", "paths.add", "os.path.join", "int", "len", "os.listdir", "[].split", "os.path.basename().split", "os.path.basename"], "function", ["None"], ["", "", "return", "action_pre_per_replay", ",", "action_gt_per_replay", "\n", "\n", "", "def", "next_path", "(", "model_folder", ",", "paths", ")", ":", "\n", "    ", "models", "=", "{", "int", "(", "os", ".", "path", ".", "basename", "(", "model", ")", ".", "split", "(", "'.'", ")", "[", "0", "]", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", ")", "\n", "for", "model", "in", "os", ".", "listdir", "(", "model_folder", ")", "if", "'latest'", "not", "in", "model", "}", "\n", "models_not_process", "=", "models", "-", "paths", "\n", "if", "len", "(", "models_not_process", ")", "==", "0", ":", "\n", "        ", "return", "None", "\n", "", "models_not_process", "=", "sorted", "(", "models_not_process", ")", "\n", "paths", ".", "add", "(", "models_not_process", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_MSC.GlobalStateEvaluation.train_spatial.main": [[257, 327], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "os.path.join", "os.path.join", "print", "sorted", "print", "vars().items", "print", "data_loader.BatchEnv.BatchSpatialEnv", "data_loader.BatchEnv.BatchSpatialEnv.init", "train_spatial.StateEvaluationGRU", "train_spatial.train", "os.path.isdir", "os.makedirs", "os.path.isdir", "os.makedirs", "open", "f.write", "os.path.join", "os.path.join", "set", "vars", "os.path.join", "json.dumps", "os.path.isdir", "os.makedirs", "train_spatial.next_path", "vars", "print", "data_loader.BatchEnv.BatchSpatialEnv", "data_loader.BatchEnv.BatchSpatialEnv.init", "train_spatial.StateEvaluationGRU", "StateEvaluationGRU.load_state_dict", "train_spatial.test", "Baselines.GlobalStateEvaluation.test.show_test_result", "time.sleep", "os.path.join", "torch.load", "torch.load", "torch.load", "torch.load", "open", "pickle.dump", "len", "os.path.join", "os.path.basename", "len"], "function", ["home.repos.pwc.inspect_result.wuhuikai_MSC.data_loader.BatchEnv.BatchEnv.init", "home.repos.pwc.inspect_result.wuhuikai_MSC.GlobalStateEvaluation.train.train", "home.repos.pwc.inspect_result.wuhuikai_MSC.GlobalStateEvaluation.train.next_path", "home.repos.pwc.inspect_result.wuhuikai_MSC.data_loader.BatchEnv.BatchEnv.init", "home.repos.pwc.inspect_result.wuhuikai_MSC.GlobalStateEvaluation.train.test", "home.repos.pwc.inspect_result.wuhuikai_MSC.GlobalStateEvaluation.test.show_test_result"], ["return", "os", ".", "path", ".", "join", "(", "model_folder", ",", "'model_iter_{}.pth'", ".", "format", "(", "models_not_process", "[", "0", "]", ")", ")", "\n", "\n", "", "def", "main", "(", ")", ":", "\n", "# Training settings", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Global State Evaluation : StarCraft II'", ")", "\n", "parser", ".", "add_argument", "(", "'--name'", ",", "type", "=", "str", ",", "default", "=", "'StarCraft II:TvT[BuildOrder:Spatial]'", ",", "\n", "help", "=", "'Experiment name. All outputs will be stored in checkpoints/[name]/'", ")", "\n", "parser", ".", "add_argument", "(", "'--replays_path'", ",", "default", "=", "'train_val_test/Terran_vs_Terran'", ",", "\n", "help", "=", "'Path for training, validation and test set (default: train_val_test/Terran_vs_Terran)'", ")", "\n", "parser", ".", "add_argument", "(", "'--race'", ",", "default", "=", "'Terran'", ",", "help", "=", "'Which race? (default: Terran)'", ")", "\n", "parser", ".", "add_argument", "(", "'--enemy_race'", ",", "default", "=", "'Terran'", ",", "help", "=", "'Which the enemy race? (default: Terran)'", ")", "\n", "parser", ".", "add_argument", "(", "'--phrase'", ",", "type", "=", "str", ",", "default", "=", "'train'", ",", "\n", "help", "=", "'train|val|test (default: train)'", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu_id'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "help", "=", "'Which GPU to use [-1 indicate CPU] (default: 0)'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.001", ",", "help", "=", "'Learning rate (default: 0.001)'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'Random seed (default: 1)'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--n_steps'", ",", "type", "=", "int", ",", "default", "=", "20", ",", "help", "=", "'# of forward steps (default: 20)'", ")", "\n", "parser", ".", "add_argument", "(", "'--n_replays'", ",", "type", "=", "int", ",", "default", "=", "32", ",", "help", "=", "'# of replays (default: 32)'", ")", "\n", "parser", ".", "add_argument", "(", "'--n_epoch'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "help", "=", "'# of epoches (default: 10)'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--save_intervel'", ",", "type", "=", "int", ",", "default", "=", "1000000", ",", "\n", "help", "=", "'Frequency of model saving (default: 1000000)'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "args", ".", "save_path", "=", "os", ".", "path", ".", "join", "(", "'checkpoints'", ",", "args", ".", "name", ")", "\n", "args", ".", "model_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save_path", ",", "'snapshots'", ")", "\n", "\n", "print", "(", "'------------ Options -------------'", ")", "\n", "for", "k", ",", "v", "in", "sorted", "(", "vars", "(", "args", ")", ".", "items", "(", ")", ")", ":", "\n", "        ", "print", "(", "'{}: {}'", ".", "format", "(", "k", ",", "v", ")", ")", "\n", "", "print", "(", "'-------------- End ----------------'", ")", "\n", "\n", "if", "args", ".", "phrase", "==", "'train'", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "isdir", "(", "args", ".", "save_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "args", ".", "save_path", ")", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "args", ".", "model_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "args", ".", "model_path", ")", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "save_path", ",", "'config'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "json", ".", "dumps", "(", "vars", "(", "args", ")", ")", ")", "\n", "\n", "", "env", "=", "BatchSpatialEnv", "(", ")", "\n", "env", ".", "init", "(", "os", ".", "path", ".", "join", "(", "args", ".", "replays_path", ",", "'{}.json'", ".", "format", "(", "args", ".", "phrase", ")", ")", ",", "\n", "'./'", ",", "args", ".", "race", ",", "args", ".", "enemy_race", ",", "n_steps", "=", "args", ".", "n_steps", ",", "seed", "=", "args", ".", "seed", ",", "\n", "n_replays", "=", "args", ".", "n_replays", ",", "epochs", "=", "args", ".", "n_epoch", ")", "\n", "model", "=", "BuildOrderGRU", "(", "env", ".", "n_channels", ",", "env", ".", "n_features", ",", "env", ".", "n_actions", ")", "\n", "train", "(", "model", ",", "env", ",", "args", ")", "\n", "", "elif", "'val'", "in", "args", ".", "phrase", "or", "'test'", "in", "args", ".", "phrase", ":", "\n", "        ", "test_result_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save_path", ",", "args", ".", "phrase", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "test_result_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "test_result_path", ")", "\n", "\n", "", "dataset_path", "=", "'test.json'", "if", "'test'", "in", "args", ".", "phrase", "else", "'val.json'", "\n", "paths", "=", "set", "(", ")", "\n", "while", "True", ":", "\n", "            ", "path", "=", "next_path", "(", "args", ".", "model_path", ",", "paths", ")", "\n", "if", "path", "is", "not", "None", ":", "\n", "                ", "print", "(", "'[{}]Testing {} ...'", ".", "format", "(", "len", "(", "paths", ")", ",", "path", ")", ")", "\n", "\n", "env", "=", "BatchSpatialEnv", "(", ")", "\n", "env", ".", "init", "(", "os", ".", "path", ".", "join", "(", "args", ".", "replays_path", ",", "dataset_path", ")", ",", "\n", "'./'", ",", "args", ".", "race", ",", "args", ".", "enemy_race", ",", "n_steps", "=", "args", ".", "n_steps", ",", "\n", "seed", "=", "args", ".", "seed", ",", "n_replays", "=", "1", ",", "epochs", "=", "1", ")", "\n", "model", "=", "BuildOrderGRU", "(", "env", ".", "n_channels", ",", "env", ".", "n_features", ",", "env", ".", "n_actions", ")", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "path", ")", ")", "\n", "result", "=", "test", "(", "model", ",", "env", ",", "args", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "test_result_path", ",", "os", ".", "path", ".", "basename", "(", "path", ")", ")", ",", "'wb'", ")", "as", "f", ":", "\n", "                    ", "pickle", ".", "dump", "(", "result", ",", "f", ")", "\n", "", "show_test_result", "(", "args", ".", "name", ",", "args", ".", "phrase", ",", "result", ",", "title", "=", "len", "(", "paths", ")", "-", "1", ")", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_MSC.GlobalStateEvaluation.train.StateEvaluationGRU.__init__": [[24, 35], ["super().__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.GRUCell", "torch.GRUCell", "torch.GRUCell", "torch.GRUCell", "torch.GRUCell", "torch.GRUCell", "torch.GRUCell", "torch.GRUCell", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.wuhuikai_MSC.extract_features.game_state.GameState.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_inputs", ",", "num_outputs", ")", ":", "\n", "        ", "super", "(", "BuildOrderGRU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "linear1", "=", "nn", ".", "Linear", "(", "num_inputs", ",", "1024", ")", "\n", "self", ".", "linear2", "=", "nn", ".", "Linear", "(", "1024", ",", "2048", ")", "\n", "\n", "self", ".", "rnn1", "=", "nn", ".", "GRUCell", "(", "input_size", "=", "2048", ",", "hidden_size", "=", "2048", ")", "\n", "self", ".", "rnn2", "=", "nn", ".", "GRUCell", "(", "input_size", "=", "2048", ",", "hidden_size", "=", "512", ")", "\n", "\n", "self", ".", "actor_linear", "=", "nn", ".", "Linear", "(", "512", ",", "num_outputs", ")", "\n", "\n", "self", ".", "h1", ",", "self", ".", "h2", "=", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_MSC.GlobalStateEvaluation.train.StateEvaluationGRU.forward": [[36, 61], ["states.size", "enumerate", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "train.StateEvaluationGRU.rnn1", "train.StateEvaluationGRU.rnn2", "values.append", "states.data.new().resize_().zero_", "states.data.new().resize_().zero_", "enumerate", "train.StateEvaluationGRU.linear1", "train.StateEvaluationGRU.linear2", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "train.StateEvaluationGRU.critic_linear", "states.data.new().resize_", "states.data.new().resize_", "h1[].zero_", "h2[].zero_", "states.data.new", "states.data.new"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "states", ",", "require_init", ")", ":", "\n", "        ", "batch", "=", "states", ".", "size", "(", "1", ")", "\n", "if", "self", ".", "h1", "is", "None", "or", "self", ".", "h2", "is", "None", ":", "\n", "            ", "self", ".", "h1", "=", "Variable", "(", "states", ".", "data", ".", "new", "(", ")", ".", "resize_", "(", "(", "batch", ",", "2048", ")", ")", ".", "zero_", "(", ")", ")", "\n", "self", ".", "h2", "=", "Variable", "(", "states", ".", "data", ".", "new", "(", ")", ".", "resize_", "(", "(", "batch", ",", "512", ")", ")", ".", "zero_", "(", ")", ")", "\n", "", "elif", "True", "in", "require_init", ":", "\n", "            ", "h1", ",", "h2", "=", "self", ".", "h1", ".", "data", ",", "self", ".", "h2", ".", "data", "\n", "for", "idx", ",", "init", "in", "enumerate", "(", "require_init", ")", ":", "\n", "                ", "if", "init", ":", "\n", "                    ", "h1", "[", "idx", "]", ".", "zero_", "(", ")", "\n", "h2", "[", "idx", "]", ".", "zero_", "(", ")", "\n", "", "", "self", ".", "h1", ",", "self", ".", "h2", "=", "Variable", "(", "h1", ")", ",", "Variable", "(", "h2", ")", "\n", "", "else", ":", "\n", "            ", "pass", "\n", "\n", "", "values", "=", "[", "]", "\n", "for", "idx", ",", "state", "in", "enumerate", "(", "states", ")", ":", "\n", "            ", "x", "=", "F", ".", "relu", "(", "self", ".", "linear1", "(", "state", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "linear2", "(", "x", ")", ")", "\n", "self", ".", "h1", "=", "self", ".", "rnn1", "(", "x", ",", "self", ".", "h1", ")", "\n", "self", ".", "h2", "=", "self", ".", "rnn2", "(", "self", ".", "h1", ",", "self", ".", "h2", ")", "\n", "\n", "values", ".", "append", "(", "self", ".", "actor_linear", "(", "self", ".", "h2", ")", ")", "\n", "\n", "", "return", "values", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_MSC.GlobalStateEvaluation.train.StateEvaluationGRU.detach": [[62, 67], ["train.StateEvaluationGRU.h1.detach_", "train.StateEvaluationGRU.h2.detach_"], "methods", ["None"], ["", "def", "detach", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "h1", "is", "not", "None", ":", "\n", "            ", "self", ".", "h1", ".", "detach_", "(", ")", "\n", "", "if", "self", ".", "h2", "is", "not", "None", ":", "\n", "            ", "self", ".", "h2", ".", "detach_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_MSC.GlobalStateEvaluation.train.train": [[68, 179], ["visdom.Visdom", "visdom.Visdom.line", "visdom.Visdom.line", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "model.train", "torch.Adam", "env.step", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "model.parameters", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "model", "zip", "model.zero_grad", "value_loss.backward", "optim.Adam.step", "model.detach", "visdom.Visdom.updateTrace", "numpy.swapaxes", "numpy.swapaxes", "enumerate", "env.step", "range", "range", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "model.cuda", "states.copy_.cuda", "rewards.copy_.cuda", "torch.autograd.Variable", "numpy.asarray", "rewards.copy_.cpu().numpy", "zip", "pre_per_replay[].append", "gt_per_replay[].append", "states.copy_.copy_", "rewards.copy_.copy_", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "env.close", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.binary_cross_entropy", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "int", "int", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "env.step_count", "env.step_count", "model.state_dict", "os.path.join", "model.state_dict", "os.path.join", "torch.autograd.Variable", "value_loss.data.cpu().numpy", "value.data.cpu().numpy", "rewards.copy_.cpu", "len", "len", "range", "numpy.asarray", "range", "visdom.Visdom.updateTrace", "env.step_count", "np.asarray.append", "visdom.Visdom.updateTrace", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "env.step_count", "value_loss.data.cpu", "value.data.cpu", "numpy.mean", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "env.step_count", "numpy.mean", "env.step_count"], "function", ["home.repos.pwc.inspect_result.wuhuikai_MSC.GlobalStateEvaluation.train.train", "home.repos.pwc.inspect_result.wuhuikai_MSC.data_loader.BatchEnv.BatchEnv.step", "home.repos.pwc.inspect_result.wuhuikai_MSC.data_loader.BatchEnv.BatchEnv.step", "home.repos.pwc.inspect_result.wuhuikai_MSC.GlobalStateEvaluation.train.StateEvaluationGRU.detach", "home.repos.pwc.inspect_result.wuhuikai_MSC.data_loader.BatchEnv.BatchEnv.step", "home.repos.pwc.inspect_result.wuhuikai_MSC.extract_features.split.save", "home.repos.pwc.inspect_result.wuhuikai_MSC.extract_features.split.save", "home.repos.pwc.inspect_result.wuhuikai_MSC.extract_features.split.save", "home.repos.pwc.inspect_result.wuhuikai_MSC.extract_features.split.save", "home.repos.pwc.inspect_result.wuhuikai_MSC.extract_features.split.save", "home.repos.pwc.inspect_result.wuhuikai_MSC.extract_features.split.save", "home.repos.pwc.inspect_result.wuhuikai_MSC.extract_features.split.save", "home.repos.pwc.inspect_result.wuhuikai_MSC.extract_features.split.save", "home.repos.pwc.inspect_result.wuhuikai_MSC.data_loader.BatchEnv.BatchEnv.close", "home.repos.pwc.inspect_result.wuhuikai_MSC.data_loader.BatchEnv.BatchEnv.step_count", "home.repos.pwc.inspect_result.wuhuikai_MSC.data_loader.BatchEnv.BatchEnv.step_count", "home.repos.pwc.inspect_result.wuhuikai_MSC.data_loader.BatchEnv.BatchEnv.step_count", "home.repos.pwc.inspect_result.wuhuikai_MSC.data_loader.BatchEnv.BatchEnv.step_count", "home.repos.pwc.inspect_result.wuhuikai_MSC.data_loader.BatchEnv.BatchEnv.step_count", "home.repos.pwc.inspect_result.wuhuikai_MSC.data_loader.BatchEnv.BatchEnv.step_count"], ["", "", "", "def", "train", "(", "model", ",", "env", ",", "args", ")", ":", "\n", "#################################### PLOT ###################################################", "\n", "    ", "STEPS", "=", "10", "\n", "LAMBDA", "=", "0.99", "\n", "vis", "=", "visdom", ".", "Visdom", "(", "env", "=", "args", ".", "name", "+", "'[{}]'", ".", "format", "(", "args", ".", "phrase", ")", ")", "\n", "pre_per_replay", "=", "[", "[", "]", "for", "_", "in", "range", "(", "args", ".", "n_replays", ")", "]", "\n", "gt_per_replay", "=", "[", "[", "]", "for", "_", "in", "range", "(", "args", ".", "n_replays", ")", "]", "\n", "acc", "=", "None", "\n", "win", "=", "vis", ".", "line", "(", "X", "=", "np", ".", "zeros", "(", "1", ")", ",", "Y", "=", "np", ".", "zeros", "(", "1", ")", ")", "\n", "loss_win", "=", "vis", ".", "line", "(", "X", "=", "np", ".", "zeros", "(", "1", ")", ",", "Y", "=", "np", ".", "zeros", "(", "1", ")", ")", "\n", "\n", "#################################### TRAIN ######################################################", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "\n", "gpu_id", "=", "args", ".", "gpu_id", "\n", "with", "torch", ".", "cuda", ".", "device", "(", "gpu_id", ")", ":", "\n", "        ", "model", "=", "model", ".", "cuda", "(", ")", "if", "gpu_id", ">=", "0", "else", "model", "\n", "", "model", ".", "train", "(", ")", "\n", "optimizer", "=", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ")", "\n", "\n", "epoch", "=", "0", "\n", "save", "=", "args", ".", "save_intervel", "\n", "env_return", "=", "env", ".", "step", "(", "reward", "=", "False", ",", "action", "=", "True", ")", "\n", "if", "env_return", "is", "not", "None", ":", "\n", "        ", "(", "states", ",", "actions_gt", ")", ",", "require_init", "=", "env_return", "\n", "", "with", "torch", ".", "cuda", ".", "device", "(", "gpu_id", ")", ":", "\n", "        ", "states", "=", "torch", ".", "from_numpy", "(", "states", ")", ".", "float", "(", ")", "\n", "actions_gt", "=", "torch", ".", "from_numpy", "(", "actions_gt", ")", ".", "long", "(", ")", ".", "squeeze", "(", ")", "\n", "weight", "=", "torch", ".", "ones", "(", "(", "env", ".", "n_actions", ",", ")", ")", "\n", "weight", "[", "-", "1", "]", "=", "0.05", "\n", "if", "gpu_id", ">=", "0", ":", "\n", "            ", "states", "=", "states", ".", "cuda", "(", ")", "\n", "actions_gt", "=", "actions_gt", ".", "cuda", "(", ")", "\n", "weight", "=", "weight", ".", "cuda", "(", ")", "\n", "\n", "", "", "while", "True", ":", "\n", "        ", "actions", "=", "model", "(", "Variable", "(", "states", ")", ",", "require_init", ")", "\n", "\n", "action_loss", "=", "0", "\n", "for", "action", ",", "action_gt", "in", "zip", "(", "actions", ",", "actions_gt", ")", ":", "\n", "            ", "action_loss", "=", "action_loss", "+", "F", ".", "cross_entropy", "(", "action", ",", "Variable", "(", "action_gt", ")", ",", "weight", "=", "weight", ")", "\n", "", "action_loss", "=", "action_loss", "/", "len", "(", "actions", ")", "\n", "\n", "model", ".", "zero_grad", "(", ")", "\n", "action_loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "model", ".", "detach", "(", ")", "\n", "\n", "if", "env", ".", "epoch", ">", "epoch", ":", "\n", "            ", "epoch", "=", "env", ".", "epoch", "\n", "for", "p", "in", "optimizer", ".", "param_groups", ":", "\n", "                ", "p", "[", "'lr'", "]", "*=", "0.1", "\n", "\n", "############################ PLOT ##########################################", "\n", "", "", "vis", ".", "updateTrace", "(", "X", "=", "np", ".", "asarray", "(", "[", "env", ".", "step_count", "(", ")", "]", ")", ",", "\n", "Y", "=", "np", ".", "asarray", "(", "action_loss", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ",", "\n", "win", "=", "loss_win", ",", "\n", "name", "=", "'action'", ")", "\n", "\n", "actions_np", "=", "np", ".", "swapaxes", "(", "np", ".", "asarray", "(", "[", "np", ".", "argmax", "(", "action", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "axis", "=", "1", ")", "for", "action", "in", "actions", "]", ")", ",", "0", ",", "1", ")", "\n", "actions_gt_np", "=", "np", ".", "swapaxes", "(", "actions_gt", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "0", ",", "1", ")", "\n", "\n", "for", "idx", ",", "(", "action", ",", "action_gt", ",", "init", ")", "in", "enumerate", "(", "zip", "(", "actions_np", ",", "actions_gt_np", ",", "require_init", ")", ")", ":", "\n", "            ", "if", "init", "and", "len", "(", "pre_per_replay", "[", "idx", "]", ")", ">", "0", ":", "\n", "                ", "pre_per_replay", "[", "idx", "]", "=", "np", ".", "asarray", "(", "pre_per_replay", "[", "idx", "]", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "gt_per_replay", "[", "idx", "]", "=", "np", ".", "asarray", "(", "gt_per_replay", "[", "idx", "]", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "step", "=", "len", "(", "pre_per_replay", "[", "idx", "]", ")", "//", "STEPS", "\n", "if", "step", ">", "0", ":", "\n", "                    ", "acc_tmp", "=", "[", "]", "\n", "for", "s", "in", "range", "(", "STEPS", ")", ":", "\n", "                        ", "action_pre", "=", "pre_per_replay", "[", "idx", "]", "[", "s", "*", "step", ":", "(", "s", "+", "1", ")", "*", "step", "]", "\n", "action_gt", "=", "gt_per_replay", "[", "idx", "]", "[", "s", "*", "step", ":", "(", "s", "+", "1", ")", "*", "step", "]", "\n", "acc_tmp", ".", "append", "(", "np", ".", "mean", "(", "action_pre", "==", "action_gt", ")", ")", "\n", "\n", "", "acc_tmp", "=", "np", ".", "asarray", "(", "acc_tmp", ")", "\n", "if", "acc", "is", "None", ":", "\n", "                        ", "acc", "=", "acc_tmp", "\n", "", "else", ":", "\n", "                        ", "acc", "=", "LAMBDA", "*", "acc", "+", "(", "1", "-", "LAMBDA", ")", "*", "acc_tmp", "\n", "\n", "", "if", "acc", "is", "None", ":", "\n", "                        ", "continue", "\n", "", "for", "s", "in", "range", "(", "STEPS", ")", ":", "\n", "                        ", "vis", ".", "updateTrace", "(", "X", "=", "np", ".", "asarray", "(", "[", "env", ".", "step_count", "(", ")", "]", ")", ",", "\n", "Y", "=", "np", ".", "asarray", "(", "[", "acc", "[", "s", "]", "]", ")", ",", "\n", "win", "=", "win", ",", "\n", "name", "=", "'{}[{}%~{}%]'", ".", "format", "(", "'action'", ",", "s", "*", "10", ",", "(", "s", "+", "1", ")", "*", "10", ")", ")", "\n", "", "vis", ".", "updateTrace", "(", "X", "=", "np", ".", "asarray", "(", "[", "env", ".", "step_count", "(", ")", "]", ")", ",", "\n", "Y", "=", "np", ".", "asarray", "(", "[", "np", ".", "mean", "(", "acc", ")", "]", ")", ",", "\n", "win", "=", "win", ",", "\n", "name", "=", "'action[TOTAL]'", ")", "\n", "\n", "", "pre_per_replay", "[", "idx", "]", "=", "[", "]", "\n", "gt_per_replay", "[", "idx", "]", "=", "[", "]", "\n", "\n", "", "pre_per_replay", "[", "idx", "]", ".", "append", "(", "action", "[", "-", "1", "]", ")", "\n", "gt_per_replay", "[", "idx", "]", ".", "append", "(", "action_gt", "[", "-", "1", "]", ")", "\n", "\n", "####################### NEXT BATCH ###################################", "\n", "", "env_return", "=", "env", ".", "step", "(", "reward", "=", "False", ",", "action", "=", "True", ")", "\n", "if", "env_return", "is", "not", "None", ":", "\n", "            ", "(", "raw_states", ",", "raw_actions_gt", ")", ",", "require_init", "=", "env_return", "\n", "states", "=", "states", ".", "copy_", "(", "torch", ".", "from_numpy", "(", "raw_states", ")", ".", "float", "(", ")", ")", "\n", "actions_gt", "=", "actions_gt", ".", "copy_", "(", "torch", ".", "from_numpy", "(", "raw_actions_gt", ")", ".", "long", "(", ")", ".", "squeeze", "(", ")", ")", "\n", "\n", "", "if", "env", ".", "step_count", "(", ")", ">", "save", "or", "env_return", "is", "None", ":", "\n", "            ", "save", "=", "env", ".", "step_count", "(", ")", "+", "args", ".", "save_intervel", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "args", ".", "model_path", ",", "'model_iter_{}.pth'", ".", "format", "(", "env", ".", "step_count", "(", ")", ")", ")", ")", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "args", ".", "model_path", ",", "'model_latest.pth'", ")", ")", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_MSC.GlobalStateEvaluation.train.test": [[180, 234], ["torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "model.eval", "env.step", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "model", "numpy.squeeze", "numpy.squeeze", "value_pre_per_replay[].append", "value_gt_per_replay[].append", "env.step", "model.cuda", "states.copy_.cuda", "rewards.copy_.cuda", "torch.autograd.Variable", "numpy.vstack", "rewards.copy_.cpu().numpy", "numpy.ravel", "numpy.ravel", "value_pre_per_replay.append", "value_gt_per_replay.append", "states.copy_.copy_", "rewards.copy_.copy_", "numpy.ravel", "numpy.ravel", "env.close", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "len", "numpy.hstack", "numpy.hstack", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "numpy.hstack", "numpy.hstack", "value.data.cpu().numpy", "rewards.copy_.cpu", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "value.data.cpu"], "function", ["home.repos.pwc.inspect_result.wuhuikai_MSC.data_loader.BatchEnv.BatchEnv.step", "home.repos.pwc.inspect_result.wuhuikai_MSC.data_loader.BatchEnv.BatchEnv.step", "home.repos.pwc.inspect_result.wuhuikai_MSC.data_loader.BatchEnv.BatchEnv.close"], ["", "if", "env_return", "is", "None", ":", "\n", "            ", "env", ".", "close", "(", ")", "\n", "break", "\n", "\n", "", "", "", "def", "test", "(", "model", ",", "env", ",", "args", ")", ":", "\n", "######################### SAVE RESULT ############################", "\n", "    ", "action_pre_per_replay", "=", "[", "[", "]", "]", "\n", "action_gt_per_replay", "=", "[", "[", "]", "]", "\n", "\n", "######################### TEST ###################################", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "\n", "gpu_id", "=", "args", ".", "gpu_id", "\n", "with", "torch", ".", "cuda", ".", "device", "(", "gpu_id", ")", ":", "\n", "        ", "model", "=", "model", ".", "cuda", "(", ")", "if", "gpu_id", ">=", "0", "else", "model", "\n", "", "model", ".", "eval", "(", ")", "\n", "\n", "env_return", "=", "env", ".", "step", "(", "reward", "=", "False", ",", "action", "=", "True", ")", "\n", "if", "env_return", "is", "not", "None", ":", "\n", "        ", "(", "states", ",", "actions_gt", ")", ",", "require_init", "=", "env_return", "\n", "", "with", "torch", ".", "cuda", ".", "device", "(", "gpu_id", ")", ":", "\n", "        ", "states", "=", "torch", ".", "from_numpy", "(", "states", ")", ".", "float", "(", ")", "\n", "actions_gt", "=", "torch", ".", "from_numpy", "(", "actions_gt", ")", ".", "long", "(", ")", ".", "squeeze", "(", ")", "\n", "if", "gpu_id", ">=", "0", ":", "\n", "            ", "states", "=", "states", ".", "cuda", "(", ")", "\n", "actions_gt", "=", "actions_gt", ".", "cuda", "(", ")", "\n", "\n", "", "", "while", "True", ":", "\n", "        ", "actions", "=", "model", "(", "Variable", "(", "states", ")", ",", "require_init", ")", "\n", "############################ PLOT ##########################################", "\n", "actions_np", "=", "np", ".", "squeeze", "(", "np", ".", "vstack", "(", "[", "np", ".", "argmax", "(", "action", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "axis", "=", "1", ")", "for", "action", "in", "actions", "]", ")", ")", "\n", "actions_gt_np", "=", "np", ".", "squeeze", "(", "actions_gt", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "if", "require_init", "[", "-", "1", "]", "and", "len", "(", "action_gt_per_replay", "[", "-", "1", "]", ")", ">", "0", ":", "\n", "            ", "action_pre_per_replay", "[", "-", "1", "]", "=", "np", ".", "ravel", "(", "np", ".", "hstack", "(", "action_pre_per_replay", "[", "-", "1", "]", ")", ")", "\n", "action_gt_per_replay", "[", "-", "1", "]", "=", "np", ".", "ravel", "(", "np", ".", "hstack", "(", "action_gt_per_replay", "[", "-", "1", "]", ")", ")", "\n", "\n", "action_pre_per_replay", ".", "append", "(", "[", "]", ")", "\n", "action_gt_per_replay", ".", "append", "(", "[", "]", ")", "\n", "\n", "", "action_pre_per_replay", "[", "-", "1", "]", ".", "append", "(", "actions_np", ")", "\n", "action_gt_per_replay", "[", "-", "1", "]", ".", "append", "(", "actions_gt_np", ")", "\n", "########################### NEXT BATCH #############################################", "\n", "env_return", "=", "env", ".", "step", "(", "reward", "=", "False", ",", "action", "=", "True", ")", "\n", "if", "env_return", "is", "not", "None", ":", "\n", "            ", "(", "raw_states", ",", "raw_actions", ")", ",", "require_init", "=", "env_return", "\n", "states", "=", "states", ".", "copy_", "(", "torch", ".", "from_numpy", "(", "raw_states", ")", ".", "float", "(", ")", ")", "\n", "actions_gt", "=", "actions_gt", ".", "copy_", "(", "torch", ".", "from_numpy", "(", "raw_actions", ")", ".", "long", "(", ")", ".", "squeeze", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "action_pre_per_replay", "[", "-", "1", "]", "=", "np", ".", "ravel", "(", "np", ".", "hstack", "(", "action_pre_per_replay", "[", "-", "1", "]", ")", ")", "\n", "action_gt_per_replay", "[", "-", "1", "]", "=", "np", ".", "ravel", "(", "np", ".", "hstack", "(", "action_gt_per_replay", "[", "-", "1", "]", ")", ")", "\n", "\n", "env", ".", "close", "(", ")", "\n", "break", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_MSC.GlobalStateEvaluation.train.next_path": [[235, 245], ["sorted", "paths.add", "os.path.join", "int", "len", "os.listdir", "[].split", "os.path.basename().split", "os.path.basename"], "function", ["None"], ["\n", "", "", "return", "action_pre_per_replay", ",", "action_gt_per_replay", "\n", "\n", "", "def", "next_path", "(", "model_folder", ",", "paths", ")", ":", "\n", "    ", "models", "=", "{", "int", "(", "os", ".", "path", ".", "basename", "(", "model", ")", ".", "split", "(", "'.'", ")", "[", "0", "]", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", ")", "\n", "for", "model", "in", "os", ".", "listdir", "(", "model_folder", ")", "if", "'latest'", "not", "in", "model", "}", "\n", "models_not_process", "=", "models", "-", "paths", "\n", "if", "len", "(", "models_not_process", ")", "==", "0", ":", "\n", "        ", "return", "None", "\n", "", "models_not_process", "=", "sorted", "(", "models_not_process", ")", "\n", "paths", ".", "add", "(", "models_not_process", "[", "0", "]", ")", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_MSC.GlobalStateEvaluation.train.main": [[246, 316], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "os.path.join", "os.path.join", "print", "sorted", "print", "vars().items", "print", "data_loader.BatchEnv.BatchGlobalFeatureEnv", "data_loader.BatchEnv.BatchGlobalFeatureEnv.init", "train.StateEvaluationGRU", "train.train", "os.path.isdir", "os.makedirs", "os.path.isdir", "os.makedirs", "open", "f.write", "os.path.join", "os.path.join", "set", "vars", "os.path.join", "json.dumps", "os.path.isdir", "os.makedirs", "train.next_path", "vars", "print", "data_loader.BatchEnv.BatchGlobalFeatureEnv", "data_loader.BatchEnv.BatchGlobalFeatureEnv.init", "train.StateEvaluationGRU", "StateEvaluationGRU.load_state_dict", "train.test", "Baselines.GlobalStateEvaluation.test.show_test_result", "time.sleep", "os.path.join", "torch.load", "torch.load", "torch.load", "torch.load", "open", "pickle.dump", "len", "os.path.join", "os.path.basename", "len"], "function", ["home.repos.pwc.inspect_result.wuhuikai_MSC.data_loader.BatchEnv.BatchEnv.init", "home.repos.pwc.inspect_result.wuhuikai_MSC.GlobalStateEvaluation.train.train", "home.repos.pwc.inspect_result.wuhuikai_MSC.GlobalStateEvaluation.train.next_path", "home.repos.pwc.inspect_result.wuhuikai_MSC.data_loader.BatchEnv.BatchEnv.init", "home.repos.pwc.inspect_result.wuhuikai_MSC.GlobalStateEvaluation.train.test", "home.repos.pwc.inspect_result.wuhuikai_MSC.GlobalStateEvaluation.test.show_test_result"], ["\n", "return", "os", ".", "path", ".", "join", "(", "model_folder", ",", "'model_iter_{}.pth'", ".", "format", "(", "models_not_process", "[", "0", "]", ")", ")", "\n", "\n", "", "def", "main", "(", ")", ":", "\n", "# Training settings", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Global State Evaluation : StarCraft II'", ")", "\n", "parser", ".", "add_argument", "(", "'--name'", ",", "type", "=", "str", ",", "default", "=", "'StarCraft II:TvT[BuildOrder]'", ",", "\n", "help", "=", "'Experiment name. All outputs will be stored in checkpoints/[name]/'", ")", "\n", "parser", ".", "add_argument", "(", "'--replays_path'", ",", "default", "=", "'train_val_test/Terran_vs_Terran'", ",", "\n", "help", "=", "'Path for training, validation and test set (default: train_val_test/Terran_vs_Terran)'", ")", "\n", "parser", ".", "add_argument", "(", "'--race'", ",", "default", "=", "'Terran'", ",", "help", "=", "'Which race? (default: Terran)'", ")", "\n", "parser", ".", "add_argument", "(", "'--enemy_race'", ",", "default", "=", "'Terran'", ",", "help", "=", "'Which the enemy race? (default: Terran)'", ")", "\n", "parser", ".", "add_argument", "(", "'--phrase'", ",", "type", "=", "str", ",", "default", "=", "'train'", ",", "\n", "help", "=", "'train|val|test (default: train)'", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu_id'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "help", "=", "'Which GPU to use [-1 indicate CPU] (default: 0)'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.001", ",", "help", "=", "'Learning rate (default: 0.001)'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'Random seed (default: 1)'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--n_steps'", ",", "type", "=", "int", ",", "default", "=", "20", ",", "help", "=", "'# of forward steps (default: 20)'", ")", "\n", "parser", ".", "add_argument", "(", "'--n_replays'", ",", "type", "=", "int", ",", "default", "=", "256", ",", "help", "=", "'# of replays (default: 256)'", ")", "\n", "parser", ".", "add_argument", "(", "'--n_epoch'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "help", "=", "'# of epoches (default: 10)'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--save_intervel'", ",", "type", "=", "int", ",", "default", "=", "1000000", ",", "\n", "help", "=", "'Frequency of model saving (default: 1000000)'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "args", ".", "save_path", "=", "os", ".", "path", ".", "join", "(", "'checkpoints'", ",", "args", ".", "name", ")", "\n", "args", ".", "model_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save_path", ",", "'snapshots'", ")", "\n", "\n", "print", "(", "'------------ Options -------------'", ")", "\n", "for", "k", ",", "v", "in", "sorted", "(", "vars", "(", "args", ")", ".", "items", "(", ")", ")", ":", "\n", "        ", "print", "(", "'{}: {}'", ".", "format", "(", "k", ",", "v", ")", ")", "\n", "", "print", "(", "'-------------- End ----------------'", ")", "\n", "\n", "if", "args", ".", "phrase", "==", "'train'", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "isdir", "(", "args", ".", "save_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "args", ".", "save_path", ")", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "args", ".", "model_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "args", ".", "model_path", ")", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "save_path", ",", "'config'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "json", ".", "dumps", "(", "vars", "(", "args", ")", ")", ")", "\n", "\n", "", "env", "=", "BatchGlobalFeatureEnv", "(", ")", "\n", "env", ".", "init", "(", "os", ".", "path", ".", "join", "(", "args", ".", "replays_path", ",", "'{}.json'", ".", "format", "(", "args", ".", "phrase", ")", ")", ",", "\n", "'./'", ",", "args", ".", "race", ",", "args", ".", "enemy_race", ",", "n_steps", "=", "args", ".", "n_steps", ",", "seed", "=", "args", ".", "seed", ",", "\n", "n_replays", "=", "args", ".", "n_replays", ",", "epochs", "=", "args", ".", "n_epoch", ")", "\n", "model", "=", "BuildOrderGRU", "(", "env", ".", "n_features", ",", "env", ".", "n_actions", ")", "\n", "train", "(", "model", ",", "env", ",", "args", ")", "\n", "", "elif", "'val'", "in", "args", ".", "phrase", "or", "'test'", "in", "args", ".", "phrase", ":", "\n", "        ", "test_result_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save_path", ",", "args", ".", "phrase", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "test_result_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "test_result_path", ")", "\n", "\n", "", "dataset_path", "=", "'test.json'", "if", "'test'", "in", "args", ".", "phrase", "else", "'val.json'", "\n", "paths", "=", "set", "(", ")", "\n", "while", "True", ":", "\n", "            ", "path", "=", "next_path", "(", "args", ".", "model_path", ",", "paths", ")", "\n", "if", "path", "is", "not", "None", ":", "\n", "                ", "print", "(", "'[{}]Testing {} ...'", ".", "format", "(", "len", "(", "paths", ")", ",", "path", ")", ")", "\n", "\n", "env", "=", "BatchGlobalFeatureEnv", "(", ")", "\n", "env", ".", "init", "(", "os", ".", "path", ".", "join", "(", "args", ".", "replays_path", ",", "dataset_path", ")", ",", "\n", "'./'", ",", "args", ".", "race", ",", "args", ".", "enemy_race", ",", "n_steps", "=", "args", ".", "n_steps", ",", "\n", "seed", "=", "args", ".", "seed", ",", "n_replays", "=", "1", ",", "epochs", "=", "1", ")", "\n", "model", "=", "BuildOrderGRU", "(", "env", ".", "n_features", ",", "env", ".", "n_actions", ")", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "path", ")", ")", "\n", "result", "=", "test", "(", "model", ",", "env", ",", "args", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "test_result_path", ",", "os", ".", "path", ".", "basename", "(", "path", ")", ")", ",", "'wb'", ")", "as", "f", ":", "\n", "                    ", "pickle", ".", "dump", "(", "result", ",", "f", ")", "\n", "", "show_test_result", "(", "args", ".", "name", ",", "args", ".", "phrase", ",", "result", ",", "title", "=", "len", "(", "paths", ")", "-", "1", ")", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_MSC.GlobalStateEvaluation.test.calc_value_acc": [[10, 12], ["numpy.mean"], "function", ["None"], ["def", "calc_action_acc", "(", "action_pre", ",", "action_gt", ")", ":", "\n", "    ", "return", "np", ".", "mean", "(", "action_pre", "==", "action_gt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_MSC.GlobalStateEvaluation.test.calc_weighted_value_acc": [[13, 15], ["numpy.sum", "numpy.sum", "numpy.abs", "numpy.abs"], "function", ["None"], ["", "def", "calc_weighted_action_acc", "(", "action_pre", ",", "action_gt", ",", "weight", ")", ":", "\n", "    ", "return", "np", ".", "sum", "(", "(", "action_pre", "==", "action_gt", ")", "*", "np", ".", "abs", "(", "weight", ")", ")", "/", "np", ".", "sum", "(", "np", ".", "abs", "(", "weight", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_MSC.GlobalStateEvaluation.test.show_test_result": [[16, 59], ["numpy.hstack", "numpy.hstack", "numpy.hstack", "test.calc_value_acc", "test.calc_weighted_value_acc", "print", "visdom.Visdom", "zip", "numpy.repeat().reshape", "numpy.zeros", "enumerate", "visdom.Visdom.line", "range", "zip", "numpy.hstack", "numpy.hstack", "numpy.hstack", "test.calc_value_acc", "test.calc_weighted_value_acc", "range", "len", "len", "value_pre_result[].append", "value_gt_result[].append", "weight_result[].append", "numpy.repeat", "len", "dict", "numpy.arange", "range", "range", "numpy.arange", "len", "len"], "function", ["home.repos.pwc.inspect_result.wuhuikai_MSC.GlobalStateEvaluation.test.calc_value_acc", "home.repos.pwc.inspect_result.wuhuikai_MSC.GlobalStateEvaluation.test.calc_weighted_value_acc", "home.repos.pwc.inspect_result.wuhuikai_MSC.GlobalStateEvaluation.test.calc_value_acc", "home.repos.pwc.inspect_result.wuhuikai_MSC.GlobalStateEvaluation.test.calc_weighted_value_acc"], ["", "def", "show_test_result", "(", "name", ",", "phrase", ",", "result", ",", "steps", "=", "10", ",", "title", "=", "''", ")", ":", "\n", "    ", "action_pres", ",", "action_gts", "=", "result", "\n", "\n", "################################## Calc Acc #########################################", "\n", "weights", "=", "[", "(", "action_gt", "[", "0", "]", "*", "2", "-", "1", ")", "*", "LAMBDA", "**", "np", ".", "arange", "(", "len", "(", "action_gt", ")", "-", "1", ",", "-", "1", ",", "-", "1", ")", "for", "action_gt", "in", "action_gts", "]", "\n", "\n", "action_pres_np", "=", "np", ".", "hstack", "(", "action_pres", ")", "\n", "action_gts_np", "=", "np", ".", "hstack", "(", "action_gts", ")", "\n", "weights_np", "=", "np", ".", "hstack", "(", "weights", ")", "\n", "\n", "action_acc", "=", "calc_action_acc", "(", "action_pres_np", ",", "action_gts_np", ")", "\n", "weighted_action_acc", "=", "calc_weighted_action_acc", "(", "action_pres_np", ",", "action_gts_np", ",", "weights_np", ")", "\n", "print", "(", "'\\tAction Accuracy: {}%\\tWeighted Action Accuracy: {}%'", ".", "format", "(", "action_acc", "*", "100", ",", "weighted_action_acc", "*", "100", ")", ")", "\n", "################################### Plot ###################################################", "\n", "vis", "=", "visdom", ".", "Visdom", "(", "env", "=", "name", "+", "'[{}]'", ".", "format", "(", "phrase", ")", ")", "\n", "\n", "action_pre_result", ",", "action_gt_result", "=", "[", "[", "]", "for", "_", "in", "range", "(", "steps", ")", "]", ",", "[", "[", "]", "for", "_", "in", "range", "(", "steps", ")", "]", "\n", "weight_result", "=", "[", "[", "]", "for", "_", "in", "range", "(", "steps", ")", "]", "\n", "for", "action_pre", ",", "action_gt", ",", "weight", "in", "zip", "(", "action_pres", ",", "action_gts", ",", "weights", ")", ":", "\n", "        ", "if", "len", "(", "action_pre", ")", "<", "steps", ":", "\n", "            ", "continue", "\n", "\n", "", "step", "=", "len", "(", "action_pre", ")", "//", "steps", "\n", "for", "s", "in", "range", "(", "steps", ")", ":", "\n", "            ", "action_pre_result", "[", "s", "]", ".", "append", "(", "action_pre", "[", "s", "*", "step", ":", "(", "s", "+", "1", ")", "*", "step", "]", ")", "\n", "action_gt_result", "[", "s", "]", ".", "append", "(", "action_gt", "[", "s", "*", "step", ":", "(", "s", "+", "1", ")", "*", "step", "]", ")", "\n", "weight_result", "[", "s", "]", ".", "append", "(", "weight", "[", "s", "*", "step", ":", "(", "s", "+", "1", ")", "*", "step", "]", ")", "\n", "\n", "", "", "legend", "=", "[", "'Action'", ",", "'Weighted Action'", "]", "\n", "X", "=", "np", ".", "repeat", "(", "np", ".", "arange", "(", "steps", ")", ",", "len", "(", "legend", ")", ",", "axis", "=", "0", ")", ".", "reshape", "(", "steps", ",", "-", "1", ")", "\n", "Y", "=", "np", ".", "zeros", "(", "(", "steps", ",", "len", "(", "legend", ")", ")", ")", "\n", "for", "idx", ",", "(", "action_pres", ",", "action_gts", ",", "weights", ")", "in", "enumerate", "(", "\n", "zip", "(", "action_pre_result", ",", "action_gt_result", ",", "weight_result", ")", ")", ":", "\n", "\n", "        ", "action_pres_np", "=", "np", ".", "hstack", "(", "action_pres", ")", "\n", "action_gts_np", "=", "np", ".", "hstack", "(", "action_gts", ")", "\n", "weights_np", "=", "np", ".", "hstack", "(", "weights", ")", "\n", "\n", "Y", "[", "idx", ",", "0", "]", "=", "calc_action_acc", "(", "action_pres_np", ",", "action_gts_np", ")", "\n", "Y", "[", "idx", ",", "1", "]", "=", "calc_weighted_action_acc", "(", "action_pres_np", ",", "action_gts_np", ",", "weights_np", ")", "\n", "\n", "", "vis", ".", "line", "(", "X", "=", "X", ",", "Y", "=", "Y", ",", "\n", "opts", "=", "dict", "(", "title", "=", "'Acc[{}]'", ".", "format", "(", "title", ")", ",", "legend", "=", "legend", ")", ",", "win", "=", "title", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_MSC.data_loader.BatchEnv.BatchEnv.__init__": [[11, 13], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_MSC.data_loader.BatchEnv.BatchEnv.init": [[14, 41], ["numpy.random.seed", "BatchEnv.BatchEnv.__generate_replay_list__", "tqdm.tqdm.tqdm", "BatchEnv.BatchEnv.__post_init__", "open", "json.load", "range"], "methods", ["home.repos.pwc.inspect_result.wuhuikai_MSC.data_loader.BatchEnv.BatchSpatialEnv.__generate_replay_list__", "home.repos.pwc.inspect_result.wuhuikai_MSC.data_loader.BatchEnv.BatchSpatialEnv.__post_init__"], ["", "def", "init", "(", "self", ",", "path", ",", "root", ",", "race", ",", "enemy_race", ",", "step_mul", "=", "8", ",", "n_replays", "=", "4", ",", "n_steps", "=", "5", ",", "epochs", "=", "10", ",", "seed", "=", "None", ")", ":", "\n", "        ", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "\n", "with", "open", "(", "path", ")", "as", "f", ":", "\n", "            ", "replays", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "self", ".", "replays", "=", "self", ".", "__generate_replay_list__", "(", "replays", ",", "root", ",", "race", ")", "\n", "\n", "self", ".", "race", "=", "race", "\n", "self", ".", "enemy_race", "=", "enemy_race", "\n", "\n", "self", ".", "step_mul", "=", "step_mul", "\n", "self", ".", "n_replays", "=", "n_replays", "\n", "self", ".", "n_steps", "=", "n_steps", "\n", "\n", "self", ".", "epochs", "=", "epochs", "\n", "self", ".", "epoch", "=", "-", "1", "\n", "self", ".", "steps", "=", "0", "\n", "\n", "self", ".", "replay_idx", "=", "-", "1", "\n", "self", ".", "replay_list", "=", "[", "None", "for", "_", "in", "range", "(", "self", ".", "n_replays", ")", "]", "\n", "\n", "## Display Progress Bar", "\n", "self", ".", "epoch_pbar", "=", "tqdm", "(", "total", "=", "self", ".", "epochs", ",", "desc", "=", "'Epoch'", ")", "\n", "self", ".", "replay_pbar", "=", "None", "\n", "\n", "self", ".", "__post_init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_MSC.data_loader.BatchEnv.BatchEnv.__generate_replay_list__": [[42, 44], ["None"], "methods", ["None"], ["", "def", "__generate_replay_list__", "(", "self", ",", "replays", ",", "race", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_MSC.data_loader.BatchEnv.BatchEnv.__init_epoch__": [[45, 58], ["numpy.random.shuffle", "tqdm.tqdm.tqdm", "BatchEnv.BatchEnv.epoch_pbar.update", "BatchEnv.BatchEnv.replay_pbar.close", "len"], "methods", ["home.repos.pwc.inspect_result.wuhuikai_MSC.extract_features.game_state.GameState.update", "home.repos.pwc.inspect_result.wuhuikai_MSC.data_loader.BatchEnv.BatchEnv.close"], ["", "def", "__init_epoch__", "(", "self", ")", ":", "\n", "        ", "self", ".", "epoch", "+=", "1", "\n", "if", "self", ".", "epoch", ">", "0", ":", "\n", "            ", "self", ".", "epoch_pbar", ".", "update", "(", "1", ")", "\n", "", "if", "self", ".", "epoch", "==", "self", ".", "epochs", ":", "\n", "            ", "return", "False", "\n", "\n", "", "np", ".", "random", ".", "shuffle", "(", "self", ".", "replays", ")", "\n", "## Display Progress Bar", "\n", "if", "self", ".", "replay_pbar", "is", "not", "None", ":", "\n", "            ", "self", ".", "replay_pbar", ".", "close", "(", ")", "\n", "", "self", ".", "replay_pbar", "=", "tqdm", "(", "total", "=", "len", "(", "self", ".", "replays", ")", ",", "desc", "=", "'  Replays'", ")", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_MSC.data_loader.BatchEnv.BatchEnv.__reset__": [[59, 69], ["BatchEnv.BatchEnv.__load_replay__", "BatchEnv.BatchEnv.__init_epoch__", "len", "len"], "methods", ["home.repos.pwc.inspect_result.wuhuikai_MSC.data_loader.BatchEnv.BatchSpatialEnv.__load_replay__", "home.repos.pwc.inspect_result.wuhuikai_MSC.data_loader.BatchEnv.BatchEnv.__init_epoch__"], ["", "def", "__reset__", "(", "self", ")", ":", "\n", "        ", "self", ".", "replay_idx", "+=", "1", "\n", "if", "self", ".", "replay_idx", "%", "len", "(", "self", ".", "replays", ")", "==", "0", ":", "\n", "            ", "has_more", "=", "self", ".", "__init_epoch__", "(", ")", "\n", "if", "not", "has_more", ":", "\n", "                ", "return", "None", "\n", "\n", "", "", "path", "=", "self", ".", "replays", "[", "self", ".", "replay_idx", "%", "len", "(", "self", ".", "replays", ")", "]", "\n", "\n", "return", "self", ".", "__load_replay__", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_MSC.data_loader.BatchEnv.BatchEnv.__load_replay__": [[70, 72], ["None"], "methods", ["None"], ["", "def", "__load_replay__", "(", "self", ",", "path", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_MSC.data_loader.BatchEnv.BatchEnv.step": [[73, 99], ["range", "range", "range", "result.append", "BatchEnv.BatchEnv.__post_process__", "range", "BatchEnv.BatchEnv.__reset__", "BatchEnv.BatchEnv.__one_step__", "result_per_step.append", "set", "BatchEnv.BatchEnv.replay_list[].keys"], "methods", ["home.repos.pwc.inspect_result.wuhuikai_MSC.data_loader.BatchEnv.BatchSpatialEnv.__post_process__", "home.repos.pwc.inspect_result.wuhuikai_MSC.data_loader.BatchEnv.BatchEnv.__reset__", "home.repos.pwc.inspect_result.wuhuikai_MSC.data_loader.BatchEnv.BatchSpatialEnv.__one_step__"], ["", "def", "step", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "require_init", "=", "[", "False", "for", "_", "in", "range", "(", "self", ".", "n_replays", ")", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "n_replays", ")", ":", "\n", "            ", "if", "self", ".", "replay_list", "[", "i", "]", "is", "None", "or", "self", ".", "replay_list", "[", "i", "]", "[", "'done'", "]", ":", "\n", "                ", "if", "self", ".", "replay_list", "[", "i", "]", "is", "not", "None", ":", "\n", "                    ", "keys", "=", "set", "(", "self", ".", "replay_list", "[", "i", "]", ".", "keys", "(", ")", ")", "\n", "for", "k", "in", "keys", ":", "\n", "                        ", "del", "self", ".", "replay_list", "[", "i", "]", "[", "k", "]", "\n", "", "", "self", ".", "replay_list", "[", "i", "]", "=", "self", ".", "__reset__", "(", ")", "\n", "require_init", "[", "i", "]", "=", "True", "\n", "", "if", "self", ".", "replay_list", "[", "i", "]", "is", "None", ":", "\n", "                ", "return", "None", "\n", "\n", "", "", "result", "=", "[", "]", "\n", "for", "step", "in", "range", "(", "self", ".", "n_steps", ")", ":", "\n", "            ", "result_per_step", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "n_replays", ")", ":", "\n", "                ", "replay_dict", "=", "self", ".", "replay_list", "[", "i", "]", "\n", "\n", "features", "=", "self", ".", "__one_step__", "(", "replay_dict", ",", "replay_dict", "[", "'done'", "]", ")", "\n", "\n", "result_per_step", ".", "append", "(", "features", ")", "\n", "\n", "", "result", ".", "append", "(", "result_per_step", ")", "\n", "\n", "", "return", "self", ".", "__post_process__", "(", "result", ",", "**", "kwargs", ")", ",", "require_init", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_MSC.data_loader.BatchEnv.BatchEnv.__one_step__": [[100, 102], ["None"], "methods", ["None"], ["", "def", "__one_step__", "(", "self", ",", "replay_dict", ",", "done", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_MSC.data_loader.BatchEnv.BatchEnv.__post_process__": [[103, 105], ["None"], "methods", ["None"], ["", "def", "__post_process__", "(", "self", ",", "result", ",", "**", "kwargs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_MSC.data_loader.BatchEnv.BatchEnv.step_count": [[106, 108], ["None"], "methods", ["None"], ["", "def", "step_count", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "steps", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_MSC.data_loader.BatchEnv.BatchEnv.close": [[109, 114], ["BatchEnv.BatchEnv.epoch_pbar.close", "BatchEnv.BatchEnv.replay_pbar.close"], "methods", ["home.repos.pwc.inspect_result.wuhuikai_MSC.data_loader.BatchEnv.BatchEnv.close", "home.repos.pwc.inspect_result.wuhuikai_MSC.data_loader.BatchEnv.BatchEnv.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "epoch_pbar", "is", "not", "None", ":", "\n", "            ", "self", ".", "epoch_pbar", ".", "close", "(", ")", "\n", "", "if", "self", ".", "replay_pbar", "is", "not", "None", ":", "\n", "            ", "self", ".", "replay_pbar", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_MSC.data_loader.BatchEnv.BatchGlobalFeatureEnv.__post_init__": [[121, 124], ["None"], "methods", ["None"], ["def", "__post_init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "n_features", "=", "self", ".", "n_features_dic", "[", "self", ".", "race", "]", "[", "self", ".", "enemy_race", "]", "\n", "self", ".", "n_actions", "=", "self", ".", "n_actions_dic", "[", "self", ".", "race", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_MSC.data_loader.BatchEnv.BatchGlobalFeatureEnv.__generate_replay_list__": [[125, 132], ["result.append", "os.path.join"], "methods", ["None"], ["", "def", "__generate_replay_list__", "(", "self", ",", "replays", ",", "root", ",", "race", ")", ":", "\n", "        ", "result", "=", "[", "]", "\n", "for", "path_dict", "in", "replays", ":", "\n", "            ", "for", "player_path", "in", "path_dict", "[", "race", "]", ":", "\n", "                ", "result", ".", "append", "(", "os", ".", "path", ".", "join", "(", "root", ",", "player_path", "[", "'global_path'", "]", ")", ")", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_MSC.data_loader.BatchEnv.BatchGlobalFeatureEnv.__load_replay__": [[133, 140], ["numpy.asarray", "scipy.sparse.load_npz().todense", "scipy.sparse.load_npz"], "methods", ["None"], ["", "def", "__load_replay__", "(", "self", ",", "path", ")", ":", "\n", "        ", "replay_dict", "=", "{", "}", "\n", "replay_dict", "[", "'ptr'", "]", "=", "0", "\n", "replay_dict", "[", "'done'", "]", "=", "False", "\n", "replay_dict", "[", "'states'", "]", "=", "np", ".", "asarray", "(", "sparse", ".", "load_npz", "(", "path", ")", ".", "todense", "(", ")", ")", "\n", "\n", "return", "replay_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_MSC.data_loader.BatchEnv.BatchGlobalFeatureEnv.__one_step__": [[141, 155], ["numpy.zeros", "BatchEnv.BatchGlobalFeatureEnv.replay_pbar.update"], "methods", ["home.repos.pwc.inspect_result.wuhuikai_MSC.extract_features.game_state.GameState.update"], ["", "def", "__one_step__", "(", "self", ",", "replay_dict", ",", "done", ")", ":", "\n", "        ", "states", "=", "replay_dict", "[", "'states'", "]", "\n", "feature_shape", "=", "states", ".", "shape", "[", "1", ":", "]", "\n", "if", "done", ":", "\n", "            ", "return", "np", ".", "zeros", "(", "feature_shape", ")", "\n", "\n", "", "self", ".", "steps", "+=", "1", "\n", "state", "=", "states", "[", "replay_dict", "[", "'ptr'", "]", "]", "\n", "replay_dict", "[", "'ptr'", "]", "+=", "1", "\n", "if", "replay_dict", "[", "'ptr'", "]", "==", "states", ".", "shape", "[", "0", "]", ":", "\n", "            ", "self", ".", "replay_pbar", ".", "update", "(", "1", ")", "\n", "replay_dict", "[", "'done'", "]", "=", "True", "\n", "\n", "", "return", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_MSC.data_loader.BatchEnv.BatchGlobalFeatureEnv.__post_process__": [[156, 168], ["numpy.asarray", "result_return.append", "result_return.append", "result_return.append"], "methods", ["None"], ["", "def", "__post_process__", "(", "self", ",", "result", ",", "reward", "=", "True", ",", "action", "=", "False", ",", "score", "=", "False", ")", ":", "\n", "        ", "result", "=", "np", ".", "asarray", "(", "result", ")", "\n", "\n", "result_return", "=", "[", "result", "[", ":", ",", ":", ",", "15", ":", "]", "]", "\n", "if", "reward", ":", "\n", "            ", "result_return", ".", "append", "(", "result", "[", ":", ",", ":", ",", "0", ":", "1", "]", ")", "\n", "", "if", "action", ":", "\n", "            ", "result_return", ".", "append", "(", "result", "[", ":", ",", ":", ",", "1", ":", "2", "]", ")", "\n", "", "if", "score", ":", "\n", "            ", "result_return", ".", "append", "(", "result", "[", ":", ",", ":", ",", "2", ":", "15", "]", ")", "\n", "\n", "", "return", "result_return", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_MSC.data_loader.BatchEnv.BatchSpatialEnv.__post_init__": [[175, 177], ["None"], "methods", ["None"], ["def", "__post_init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "n_actions", "=", "self", ".", "n_actions_dic", "[", "self", ".", "race", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_MSC.data_loader.BatchEnv.BatchSpatialEnv.__generate_replay_list__": [[178, 185], ["result.append", "os.path.join", "os.path.join"], "methods", ["None"], ["", "def", "__generate_replay_list__", "(", "self", ",", "replays", ",", "root", ",", "race", ")", ":", "\n", "        ", "result", "=", "[", "]", "\n", "for", "path_dict", "in", "replays", ":", "\n", "            ", "for", "player_path", "in", "path_dict", "[", "race", "]", ":", "\n", "                ", "result", ".", "append", "(", "[", "os", ".", "path", ".", "join", "(", "root", ",", "player_path", "[", "'spatial_path_S'", "]", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "root", ",", "player_path", "[", "'spatial_path_G'", "]", ")", "]", ")", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_MSC.data_loader.BatchEnv.BatchSpatialEnv.__load_replay__": [[186, 194], ["numpy.asarray().reshape", "numpy.asarray", "scipy.sparse.load_npz().todense", "numpy.asarray", "scipy.sparse.load_npz().todense", "scipy.sparse.load_npz", "scipy.sparse.load_npz"], "methods", ["None"], ["", "def", "__load_replay__", "(", "self", ",", "path", ")", ":", "\n", "        ", "replay_dict", "=", "{", "}", "\n", "replay_dict", "[", "'ptr'", "]", "=", "0", "\n", "replay_dict", "[", "'done'", "]", "=", "False", "\n", "replay_dict", "[", "'states_S'", "]", "=", "np", ".", "asarray", "(", "sparse", ".", "load_npz", "(", "path", "[", "0", "]", ")", ".", "todense", "(", ")", ")", ".", "reshape", "(", "[", "-", "1", ",", "13", ",", "64", ",", "64", "]", ")", "\n", "replay_dict", "[", "'states_G'", "]", "=", "np", ".", "asarray", "(", "sparse", ".", "load_npz", "(", "path", "[", "1", "]", ")", ".", "todense", "(", ")", ")", "\n", "\n", "return", "replay_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_MSC.data_loader.BatchEnv.BatchSpatialEnv.__one_step__": [[195, 212], ["BatchEnv.BatchSpatialEnv.Feature", "BatchEnv.BatchSpatialEnv.Feature", "BatchEnv.BatchSpatialEnv.replay_pbar.update", "numpy.zeros", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.wuhuikai_MSC.extract_features.game_state.GameState.update"], ["", "def", "__one_step__", "(", "self", ",", "replay_dict", ",", "done", ")", ":", "\n", "        ", "states_S", "=", "replay_dict", "[", "'states_S'", "]", "\n", "states_G", "=", "replay_dict", "[", "'states_G'", "]", "\n", "feature_shape_S", "=", "states_S", ".", "shape", "[", "1", ":", "]", "\n", "feature_shape_G", "=", "states_G", ".", "shape", "[", "1", ":", "]", "\n", "if", "done", ":", "\n", "            ", "return", "self", ".", "Feature", "(", "np", ".", "zeros", "(", "feature_shape_S", ")", ",", "np", ".", "zeros", "(", "feature_shape_G", ")", ")", "\n", "\n", "", "self", ".", "steps", "+=", "1", "\n", "state_S", "=", "states_S", "[", "replay_dict", "[", "'ptr'", "]", "]", "\n", "state_G", "=", "states_G", "[", "replay_dict", "[", "'ptr'", "]", "]", "\n", "replay_dict", "[", "'ptr'", "]", "+=", "1", "\n", "if", "replay_dict", "[", "'ptr'", "]", "==", "states_S", ".", "shape", "[", "0", "]", ":", "\n", "            ", "self", ".", "replay_pbar", ".", "update", "(", "1", ")", "\n", "replay_dict", "[", "'done'", "]", "=", "True", "\n", "\n", "", "return", "self", ".", "Feature", "(", "state_S", ",", "state_G", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_MSC.data_loader.BatchEnv.BatchSpatialEnv.__post_process__": [[213, 228], ["BatchEnv.BatchSpatialEnv.Feature", "numpy.asarray", "numpy.asarray", "result_return.append", "result_return.append", "result_return.append", "zip", "BatchEnv.BatchSpatialEnv.Feature", "zip"], "methods", ["None"], ["", "def", "__post_process__", "(", "self", ",", "result", ",", "reward", "=", "True", ",", "action", "=", "False", ",", "score", "=", "False", ")", ":", "\n", "        ", "result", "=", "self", ".", "Feature", "(", "*", "zip", "(", "*", "[", "self", ".", "Feature", "(", "*", "zip", "(", "*", "result_per_step", ")", ")", "for", "result_per_step", "in", "result", "]", ")", ")", "\n", "\n", "S", "=", "np", ".", "asarray", "(", "result", ".", "S", ")", "\n", "G", "=", "np", ".", "asarray", "(", "result", ".", "G", ")", "\n", "\n", "result_return", "=", "[", "S", "[", ":", ",", ":", ",", "8", ":", "13", ",", ":", ",", ":", "]", ",", "G", "[", ":", ",", ":", ",", ":", "11", "]", "]", "\n", "if", "reward", ":", "\n", "            ", "result_return", ".", "append", "(", "G", "[", ":", ",", ":", ",", "24", ":", "25", "]", ")", "\n", "", "if", "action", ":", "\n", "            ", "result_return", ".", "append", "(", "G", "[", ":", ",", ":", ",", "25", ":", "26", "]", ")", "\n", "", "if", "score", ":", "\n", "            ", "result_return", ".", "append", "(", "G", "[", ":", ",", ":", ",", "11", ":", "24", "]", ")", "\n", "\n", "", "return", "result_return", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_MSC.preprocess.parse_replay_info.ReplayProcessor.__init__": [[33, 39], ["multiprocessing.Process.__init__"], "methods", ["home.repos.pwc.inspect_result.wuhuikai_MSC.extract_features.game_state.GameState.__init__"], ["def", "__init__", "(", "self", ",", "run_config", ",", "replay_queue", ",", "counter", ",", "total_num", ")", ":", "\n", "        ", "super", "(", "ReplayProcessor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "run_config", "=", "run_config", "\n", "self", ".", "replay_queue", "=", "replay_queue", "\n", "self", ".", "counter", "=", "counter", "\n", "self", ".", "total_num", "=", "total_num", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_MSC.preprocess.parse_replay_info.ReplayProcessor.run": [[40, 61], ["signal.signal", "sys.exit", "parse_replay_info.ReplayProcessor.run_config.start", "future.builtins.range", "parse_replay_info.ReplayProcessor.replay_queue.get", "parse_replay_info.ReplayProcessor.run_config.replay_data", "controller.replay_info", "google.protobuf.json_format.MessageToJson", "parse_replay_info.ReplayProcessor.replay_queue.task_done", "open", "json.dump", "parse_replay_info.ReplayProcessor.counter.get_lock", "print", "os.path.join", "os.path.basename"], "methods", ["None"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "signal", ".", "signal", "(", "signal", ".", "SIGTERM", ",", "lambda", "a", ",", "b", ":", "sys", ".", "exit", "(", ")", ")", "# Exit quietly.", "\n", "while", "True", ":", "\n", "            ", "with", "self", ".", "run_config", ".", "start", "(", ")", "as", "controller", ":", "\n", "                ", "for", "_", "in", "range", "(", "FLAGS", ".", "batch_size", ")", ":", "\n", "                    ", "try", ":", "\n", "                        ", "replay_path", "=", "self", ".", "replay_queue", ".", "get", "(", ")", "\n", "", "except", "Queue", ".", "Empty", ":", "\n", "                        ", "return", "\n", "", "try", ":", "\n", "                        ", "replay_data", "=", "self", ".", "run_config", ".", "replay_data", "(", "replay_path", ")", "\n", "info", "=", "controller", ".", "replay_info", "(", "replay_data", ")", "\n", "\n", "info_json", "=", "MessageToJson", "(", "info", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "save_path", ",", "os", ".", "path", ".", "basename", "(", "replay_path", ")", ")", ",", "'w'", ")", "as", "f", ":", "\n", "                            ", "json", ".", "dump", "(", "{", "'info'", ":", "info_json", ",", "'path'", ":", "replay_path", "}", ",", "f", ")", "\n", "", "with", "self", ".", "counter", ".", "get_lock", "(", ")", ":", "\n", "                            ", "self", ".", "counter", ".", "value", "+=", "1", "\n", "print", "(", "'Processing {}/{} ...'", ".", "format", "(", "self", ".", "counter", ".", "value", ",", "self", ".", "total_num", ")", ")", "\n", "", "", "finally", ":", "\n", "                        ", "self", ".", "replay_queue", ".", "task_done", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_MSC.preprocess.parse_replay_info.replay_queue_filler": [[62, 66], ["replay_queue.put"], "function", ["None"], ["", "", "", "", "", "", "def", "replay_queue_filler", "(", "replay_queue", ",", "replay_list", ")", ":", "\n", "    ", "\"\"\"A thread that fills the replay_queue with replay paths.\"\"\"", "\n", "for", "replay_path", "in", "replay_list", ":", "\n", "        ", "replay_queue", ".", "put", "(", "replay_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_MSC.preprocess.parse_replay_info.main": [[67, 93], ["pysc2.run_configs.get", "os.path.isdir", "os.makedirs", "sorted", "multiprocessing.JoinableQueue", "threading.Thread", "threading.Thread.start", "multiprocessing.Value", "future.builtins.range", "multiprocessing.JoinableQueue.join", "itertools.chain", "parse_replay_info.ReplayProcessor", "ReplayProcessor.start", "time.sleep", "print", "len", "run_configs.get.replay_paths", "FLAGS.replays_paths.split", "len", "path.strip"], "function", ["None"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "isdir", "(", "FLAGS", ".", "save_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "FLAGS", ".", "save_path", ")", "\n", "\n", "", "run_config", "=", "run_configs", ".", "get", "(", ")", "\n", "\n", "try", ":", "\n", "        ", "replay_list", "=", "sorted", "(", "chain", "(", "*", "[", "run_config", ".", "replay_paths", "(", "path", ")", "\n", "for", "path", "in", "FLAGS", ".", "replays_paths", ".", "split", "(", "';'", ")", "\n", "if", "len", "(", "path", ".", "strip", "(", ")", ")", ">", "0", "]", ")", ")", "\n", "replay_queue", "=", "multiprocessing", ".", "JoinableQueue", "(", "FLAGS", ".", "n_instance", "*", "10", ")", "\n", "replay_queue_thread", "=", "threading", ".", "Thread", "(", "target", "=", "replay_queue_filler", ",", "\n", "args", "=", "(", "replay_queue", ",", "replay_list", ")", ")", "\n", "replay_queue_thread", ".", "daemon", "=", "True", "\n", "replay_queue_thread", ".", "start", "(", ")", "\n", "\n", "counter", "=", "multiprocessing", ".", "Value", "(", "'i'", ",", "0", ")", "\n", "for", "i", "in", "range", "(", "FLAGS", ".", "n_instance", ")", ":", "\n", "            ", "p", "=", "ReplayProcessor", "(", "run_config", ",", "replay_queue", ",", "counter", ",", "len", "(", "replay_list", ")", ")", "\n", "p", ".", "daemon", "=", "True", "\n", "p", ".", "start", "(", ")", "\n", "time", ".", "sleep", "(", "1", ")", "# Stagger startups, otherwise they seem to conflict somehow", "\n", "\n", "", "replay_queue", ".", "join", "(", ")", "# Wait for the queue to empty.", "\n", "", "except", "KeyboardInterrupt", ":", "\n", "        ", "print", "(", "\"Caught KeyboardInterrupt, exiting.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_MSC.preprocess.preprocess.valid_replay": [[31, 53], ["info.HasField", "len"], "function", ["None"], ["def", "valid_replay", "(", "info", ",", "ping", ")", ":", "\n", "    ", "\"\"\"Make sure the replay isn't corrupt, and is worth looking at.\"\"\"", "\n", "if", "info", ".", "HasField", "(", "\"error\"", ")", ":", "\n", "        ", "return", "False", "\n", "", "if", "info", ".", "base_build", "!=", "ping", ".", "base_build", ":", "\n", "        ", "return", "False", "\n", "", "if", "info", ".", "game_duration_loops", "<", "FLAGS", ".", "min_duration", ":", "\n", "        ", "return", "False", "\n", "", "if", "FLAGS", ".", "max_duration", "is", "not", "None", "and", "info", ".", "game_duration_loops", ">", "FLAGS", ".", "max_duration", ":", "\n", "        ", "return", "False", "\n", "", "if", "len", "(", "info", ".", "player_info", ")", "!=", "2", ":", "\n", "        ", "return", "False", "\n", "\n", "", "for", "p", "in", "info", ".", "player_info", ":", "\n", "        ", "if", "p", ".", "player_apm", "<", "FLAGS", ".", "min_apm", "or", "p", ".", "player_mmr", "<", "FLAGS", ".", "min_mmr", ":", "\n", "# Low APM = player just standing around.", "\n", "# Low MMR = corrupt replay or player who is weak.", "\n", "            ", "return", "False", "\n", "", "if", "p", ".", "player_result", ".", "result", "not", "in", "{", "1", ",", "2", "}", ":", "\n", "            ", "return", "False", "\n", "\n", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_MSC.preprocess.preprocess.main": [[54, 82], ["glob.glob", "pysc2.run_configs.get", "tqdm.tqdm", "result.items", "os.path.isdir", "os.makedirs", "os.path.join", "run_configs.get.start", "controller.ping", "google.protobuf.json_format.Parse", "preprocess.valid_replay", "tqdm.tqdm.update", "len", "open", "json.load", "s2clientprotocol.sc2api_pb2.ResponseReplayInfo", "result[].append", "open", "json.dump", "sorted", "os.path.join", "s2clientprotocol.sc2api_pb2.Race.Name"], "function", ["home.repos.pwc.inspect_result.wuhuikai_MSC.preprocess.preprocess.valid_replay", "home.repos.pwc.inspect_result.wuhuikai_MSC.extract_features.game_state.GameState.update"], ["", "def", "main", "(", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "isdir", "(", "FLAGS", ".", "save_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "FLAGS", ".", "save_path", ")", "\n", "", "replay_infos", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "infos_path", ",", "'*.SC2Replay'", ")", ")", "\n", "\n", "run_config", "=", "run_configs", ".", "get", "(", ")", "\n", "with", "run_config", ".", "start", "(", ")", "as", "controller", ":", "\n", "        ", "ping", "=", "controller", ".", "ping", "(", ")", "\n", "\n", "", "result", "=", "{", "}", "\n", "pbar", "=", "tqdm", "(", "total", "=", "len", "(", "replay_infos", ")", ",", "desc", "=", "'#Replay'", ")", "\n", "for", "info_path", "in", "replay_infos", ":", "\n", "        ", "with", "open", "(", "info_path", ")", "as", "f", ":", "\n", "            ", "info", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "proto", "=", "Parse", "(", "info", "[", "'info'", "]", ",", "sc_pb", ".", "ResponseReplayInfo", "(", ")", ")", "\n", "if", "valid_replay", "(", "proto", ",", "ping", ")", ":", "\n", "            ", "players_info", "=", "proto", ".", "player_info", "\n", "races", "=", "'_vs_'", ".", "join", "(", "sorted", "(", "sc_pb", ".", "Race", ".", "Name", "(", "player_info", ".", "player_info", ".", "race_actual", ")", "\n", "for", "player_info", "in", "players_info", ")", ")", "\n", "if", "races", "not", "in", "result", ":", "\n", "                ", "result", "[", "races", "]", "=", "[", "]", "\n", "", "result", "[", "races", "]", ".", "append", "(", "(", "info", "[", "'path'", "]", ",", "info_path", ")", ")", "\n", "", "pbar", ".", "update", "(", ")", "\n", "\n", "", "for", "k", ",", "v", "in", "result", ".", "items", "(", ")", ":", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "save_path", ",", "k", "+", "'.json'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "v", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_MSC.extract_features.replay_stat.update": [[29, 64], ["open", "json.load", "max", "units.items", "stat[].add", "name.startswith", "len", "max", "max", "stat[].update", "stat[].add", "max", "stat[].add", "max", "set", "len", "research_count.values"], "function", ["home.repos.pwc.inspect_result.wuhuikai_MSC.extract_features.game_state.GameState.update"], ["def", "update", "(", "replay_path", ",", "stat", ")", ":", "\n", "    ", "with", "open", "(", "replay_path", ")", "as", "f", ":", "\n", "        ", "states", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "research_count", "=", "{", "}", "\n", "for", "state", "in", "states", ":", "\n", "# MAX stat", "\n", "        ", "for", "key", "in", "max_keys", ":", "\n", "            ", "stat", "[", "'max_'", "+", "key", "]", "=", "max", "(", "state", "[", "key", "]", ",", "stat", "[", "'max_'", "+", "key", "]", ")", "\n", "# SET stat", "\n", "", "for", "key", "in", "set_keys", ":", "\n", "            ", "stat", "[", "key", "]", ".", "update", "(", "set", "(", "state", "[", "key", "]", ")", ")", "\n", "# max_score_cumulative", "\n", "", "stat", "[", "'max_score_cumulative'", "]", "=", "max", "(", "stat", "[", "'max_score_cumulative'", "]", ",", "state", "[", "'score_cumulative'", "]", "[", "0", "]", ")", "\n", "## Units stat", "\n", "units", "=", "state", "[", "'friendly_units'", "]", "\n", "for", "unit_type", ",", "unit", "in", "units", ".", "items", "(", ")", ":", "\n", "            ", "stat", "[", "'units_type'", "]", ".", "add", "(", "unit_type", ")", "\n", "stat", "[", "'units_name'", "]", "[", "unit_type", "]", "=", "unit", "[", "'name'", "]", "\n", "stat", "[", "'max_unit_num'", "]", "=", "max", "(", "stat", "[", "'max_unit_num'", "]", ",", "len", "(", "unit", "[", "'units'", "]", ")", ")", "\n", "## Actions", "\n", "", "if", "state", "[", "'action'", "]", "is", "None", ":", "\n", "            ", "continue", "\n", "\n", "", "id", ",", "name", "=", "state", "[", "'action'", "]", "\n", "stat", "[", "'action_id'", "]", ".", "add", "(", "id", ")", "\n", "stat", "[", "'action_name'", "]", "[", "id", "]", "=", "name", "\n", "\n", "if", "name", ".", "startswith", "(", "'Research_'", ")", ":", "\n", "            ", "stat", "[", "'research_id'", "]", ".", "add", "(", "id", ")", "\n", "if", "id", "not", "in", "research_count", ":", "\n", "                ", "research_count", "[", "id", "]", "=", "0", "\n", "", "research_count", "[", "id", "]", "+=", "1", "\n", "", "", "if", "len", "(", "research_count", ")", ">", "0", ":", "\n", "        ", "stat", "[", "'max_research_num'", "]", "=", "max", "(", "stat", "[", "'max_research_num'", "]", ",", "max", "(", "research_count", ".", "values", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_MSC.extract_features.replay_stat.post_process": [[65, 79], ["replay_stat.post_process.dict_key_to_str"], "function", ["None"], ["", "", "def", "post_process", "(", "stat", ")", ":", "\n", "    ", "for", "key", "in", "set_keys", "|", "{", "'action_id'", ",", "'research_id'", ",", "'units_type'", "}", ":", "\n", "        ", "values", "=", "np", ".", "asarray", "(", "list", "(", "stat", "[", "key", "]", ")", ")", "\n", "idx", "=", "np", ".", "argsort", "(", "values", ")", "\n", "values", "=", "values", "[", "idx", "]", "\n", "stat", "[", "key", "]", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "zip", "(", "values", ",", "idx", ")", "}", "\n", "\n", "# Turn all keys into str", "\n", "", "def", "dict_key_to_str", "(", "obj", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "obj", ",", "dict", ")", ":", "\n", "            ", "return", "str", "(", "obj", ")", "\n", "", "return", "{", "str", "(", "k", ")", ":", "dict_key_to_str", "(", "v", ")", "for", "k", ",", "v", "in", "obj", ".", "items", "(", ")", "}", "\n", "\n", "", "return", "dict_key_to_str", "(", "stat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_MSC.extract_features.replay_stat.main": [[80, 125], ["sorted", "os.path.join", "set", "set", "set", "tqdm.tqdm", "replay_stat.post_process", "glob.glob", "os.path.isdir", "os.makedirs", "set", "glob.glob", "tqdm.tqdm", "tqdm.tqdm.update", "open", "f.write", "open", "json.dump", "os.path.join", "len", "os.path.basename().split", "os.path.join", "replay_stat.update", "tqdm.tqdm.update", "os.path.join", "pprint.pformat", "os.path.join", "len", "os.path.basename"], "function", ["home.repos.pwc.inspect_result.wuhuikai_MSC.extract_features.replay_stat.post_process", "home.repos.pwc.inspect_result.wuhuikai_MSC.extract_features.game_state.GameState.update", "home.repos.pwc.inspect_result.wuhuikai_MSC.extract_features.game_state.GameState.update", "home.repos.pwc.inspect_result.wuhuikai_MSC.extract_features.game_state.GameState.update"], ["", "def", "main", "(", ")", ":", "\n", "    ", "replay_lists", "=", "sorted", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "hq_replay_path", ",", "'*{}*.json'", ".", "format", "(", "FLAGS", ".", "race", ")", ")", ")", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "parsed_replay_path", ",", "'Stat'", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "save_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_path", ")", "\n", "\n", "## Init Stat Dict", "\n", "", "stat", "=", "{", "}", "\n", "# MAX stat", "\n", "for", "key", "in", "max_keys", ":", "\n", "        ", "stat", "[", "'max_'", "+", "key", "]", "=", "0", "\n", "# SET stat", "\n", "", "for", "key", "in", "set_keys", ":", "\n", "        ", "stat", "[", "key", "]", "=", "set", "(", ")", "\n", "# score_cumulative", "\n", "", "stat", "[", "'max_score_cumulative'", "]", "=", "0", "\n", "## Units stat", "\n", "stat", "[", "'units_type'", "]", "=", "set", "(", ")", "\n", "stat", "[", "'units_name'", "]", "=", "{", "}", "\n", "stat", "[", "'max_unit_num'", "]", "=", "0", "\n", "## Actions", "\n", "stat", "[", "'action_id'", "]", "=", "set", "(", ")", "\n", "stat", "[", "'action_name'", "]", "=", "{", "}", "\n", "stat", "[", "'research_id'", "]", "=", "set", "(", ")", "\n", "stat", "[", "'max_research_num'", "]", "=", "0", "\n", "\n", "set_bar", "=", "tqdm", "(", "total", "=", "len", "(", "replay_lists", ")", ",", "desc", "=", "'#SET'", ")", "\n", "for", "replay_list_path", "in", "replay_lists", ":", "\n", "        ", "race_vs_race", "=", "os", ".", "path", ".", "basename", "(", "replay_list_path", ")", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "replays", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "parsed_replay_path", ",", "'GlobalFeatures'", ",", "\n", "race_vs_race", ",", "FLAGS", ".", "race", ",", "'*.SC2Replay'", ")", ")", "\n", "\n", "pbar", "=", "tqdm", "(", "total", "=", "len", "(", "replays", ")", ",", "desc", "=", "'\\t#Replay'", ")", "\n", "for", "replay", "in", "replays", ":", "\n", "            ", "update", "(", "replay", ",", "stat", ")", "\n", "pbar", ".", "update", "(", ")", "\n", "\n", "", "set_bar", ".", "update", "(", ")", "\n", "\n", "", "stat", "=", "post_process", "(", "stat", ")", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "save_path", ",", "'{}_human.json'", ".", "format", "(", "FLAGS", ".", "race", ")", ")", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "pprint", ".", "pformat", "(", "stat", ")", ")", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "save_path", ",", "'{}.json'", ".", "format", "(", "FLAGS", ".", "race", ")", ")", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "stat", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_MSC.extract_features.spatial_feature_tensor.Parser.__init__": [[82, 86], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "race_vs_race", ",", "races", ",", "stats", ")", ":", "\n", "        ", "self", ".", "race_vs_race", "=", "race_vs_race", "\n", "self", ".", "races", "=", "races", "\n", "self", ".", "stats", "=", "stats", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_MSC.extract_features.spatial_feature_tensor.Parser.__call__": [[87, 103], ["google.protobuf.json_format.Parse", "os.path.basename", "os.path.join", "open", "json.load", "s2clientprotocol.sc2api_pb2.ResponseReplayInfo", "s2clientprotocol.sc2api_pb2.Race.Name", "os.path.join", "spatial_feature_tensor.parse_replay", "len", "list"], "methods", ["home.repos.pwc.inspect_result.wuhuikai_MSC.extract_features.global_feature_vector.parse_replay"], ["", "def", "__call__", "(", "self", ",", "line", ")", ":", "\n", "        ", "replay_path", ",", "replay_info_path", "=", "line", "\n", "with", "open", "(", "replay_info_path", ")", "as", "f", ":", "\n", "            ", "info", "=", "json", ".", "load", "(", "f", ")", "\n", "", "info", "=", "Parse", "(", "info", "[", "'info'", "]", ",", "sc_pb", ".", "ResponseReplayInfo", "(", ")", ")", "\n", "\n", "replay_name", "=", "os", ".", "path", ".", "basename", "(", "replay_path", ")", "\n", "sampled_action_path", "=", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "parsed_replay_path", ",", "'SampledActions'", ",", "self", ".", "race_vs_race", ",", "replay_name", ")", "\n", "for", "player_info", "in", "info", ".", "player_info", ":", "\n", "            ", "race", "=", "sc_pb", ".", "Race", ".", "Name", "(", "player_info", ".", "player_info", ".", "race_actual", ")", "\n", "player_id", "=", "player_info", ".", "player_info", ".", "player_id", "\n", "reward", "=", "2", "-", "player_info", ".", "player_result", ".", "result", "\n", "\n", "replay_player_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "race_vs_race", ",", "race", ",", "'{}@{}'", ".", "format", "(", "player_id", ",", "replay_name", ")", ")", "\n", "parse_replay", "(", "replay_player_path", ",", "sampled_action_path", ",", "reward", ",", "race", ",", "\n", "race", "if", "len", "(", "self", ".", "races", ")", "==", "1", "else", "list", "(", "self", ".", "races", "-", "{", "race", "}", ")", "[", "0", "]", ",", "self", ".", "stats", "[", "race", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_MSC.extract_features.spatial_feature_tensor.parse_replay": [[34, 80], ["SpatialFeatures.SpatialFeatures", "zip", "numpy.asarray", "numpy.asarray", "spatial_states_np.reshape.reshape", "scipy.sparse.save_npz", "scipy.sparse.save_npz", "open", "json.load", "google.protobuf.json_format.Parse", "open", "json.load", "open", "json.load", "len", "len", "SpatialFeatures.SpatialFeatures.transform_obs", "spatial_states_np.reshape.append", "np.asarray.append", "os.path.join", "scipy.sparse.csc_matrix", "os.path.join", "scipy.sparse.csc_matrix", "os.path.join", "s2clientprotocol.sc2api_pb2.ResponseGameInfo", "stream.parse", "os.path.join", "google.protobuf.json_format.Parse", "numpy.concatenate", "numpy.hstack", "len", "os.path.join", "len", "s2clientprotocol.sc2api_pb2.Action", "SpatialFeatures.SpatialFeatures.reverse_action", "func_name.split"], "function", ["home.repos.pwc.inspect_result.wuhuikai_MSC.extract_features.SpatialFeatures.SpatialFeatures.transform_obs"], ["def", "parse_replay", "(", "replay_player_path", ",", "sampled_action_path", ",", "reward", ",", "race", ",", "enemy_race", ",", "stat", ")", ":", "\n", "    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "parsed_replay_path", ",", "'GlobalInfos'", ",", "replay_player_path", ")", ")", "as", "f", ":", "\n", "        ", "global_info", "=", "json", ".", "load", "(", "f", ")", "\n", "", "feat", "=", "SpatialFeatures", "(", "Parse", "(", "global_info", "[", "'game_info'", "]", ",", "sc_pb", ".", "ResponseGameInfo", "(", ")", ")", ")", "\n", "\n", "states", "=", "[", "obs", "for", "obs", "in", "stream", ".", "parse", "(", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "parsed_replay_path", ",", "\n", "'SampledObservations'", ",", "replay_player_path", ")", ",", "sc_pb", ".", "ResponseObservation", ")", "]", "\n", "\n", "# Sampled Actions", "\n", "with", "open", "(", "sampled_action_path", ")", "as", "f", ":", "\n", "        ", "sampled_action", "=", "json", ".", "load", "(", "f", ")", "\n", "", "sampled_action_id", "=", "[", "id", "//", "FLAGS", ".", "step_mul", "+", "1", "for", "id", "in", "sampled_action", "]", "\n", "# Actions", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "parsed_replay_path", ",", "'Actions'", ",", "replay_player_path", ")", ")", "as", "f", ":", "\n", "        ", "actions", "=", "json", ".", "load", "(", "f", ")", "\n", "", "actions", "=", "[", "None", "if", "len", "(", "actions", "[", "idx", "]", ")", "==", "0", "else", "Parse", "(", "actions", "[", "idx", "]", "[", "0", "]", ",", "sc_pb", ".", "Action", "(", ")", ")", "\n", "for", "idx", "in", "sampled_action_id", "]", "\n", "\n", "assert", "len", "(", "states", ")", "==", "len", "(", "actions", ")", "\n", "\n", "spatial_states_np", ",", "global_states_np", "=", "[", "]", ",", "[", "]", "\n", "for", "state", ",", "action", "in", "zip", "(", "states", ",", "actions", ")", ":", "\n", "        ", "action_id", "=", "-", "1", "\n", "if", "action", "is", "not", "None", ":", "\n", "            ", "try", ":", "\n", "                ", "func_id", "=", "feat", ".", "reverse_action", "(", "action", ")", ".", "function", "\n", "func_name", "=", "FUNCTIONS", "[", "func_id", "]", ".", "name", "\n", "if", "func_name", ".", "split", "(", "'_'", ")", "[", "0", "]", "in", "{", "'Build'", ",", "'Train'", ",", "'Research'", ",", "'Morph'", ",", "'Cancel'", ",", "'Halt'", ",", "'Stop'", "}", ":", "\n", "                    ", "action_id", "=", "func_id", "\n", "", "", "except", ":", "\n", "                ", "pass", "\n", "\n", "", "", "obs", "=", "feat", ".", "transform_obs", "(", "state", ".", "observation", ")", "\n", "spatial_states_np", ".", "append", "(", "np", ".", "concatenate", "(", "[", "obs", "[", "'screen'", "]", ",", "obs", "[", "'minimap'", "]", "]", ",", "axis", "=", "0", ")", ")", "\n", "\n", "global_states_np", ".", "append", "(", "np", ".", "hstack", "(", "[", "obs", "[", "'player'", "]", "/", "(", "stat", "[", "'max'", "]", "+", "1e-5", ")", ",", "obs", "[", "'score'", "]", ",", "[", "reward", "]", ",", "\n", "[", "stat", "[", "'action_id'", "]", "[", "action_id", "]", "]", "]", ")", ")", "\n", "\n", "", "spatial_states_np", "=", "np", ".", "asarray", "(", "spatial_states_np", ")", "\n", "global_states_np", "=", "np", ".", "asarray", "(", "global_states_np", ")", "\n", "\n", "spatial_states_np", "=", "spatial_states_np", ".", "reshape", "(", "[", "len", "(", "states", ")", ",", "-", "1", "]", ")", "\n", "sparse", ".", "save_npz", "(", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "parsed_replay_path", ",", "'SpatialFeatureTensor'", ",", "\n", "replay_player_path", "+", "'@S'", ")", ",", "sparse", ".", "csc_matrix", "(", "spatial_states_np", ")", ")", "\n", "sparse", ".", "save_npz", "(", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "parsed_replay_path", ",", "'SpatialFeatureTensor'", ",", "\n", "replay_player_path", "+", "'@G'", ")", ",", "sparse", ".", "csc_matrix", "(", "global_states_np", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_MSC.extract_features.spatial_feature_tensor.main": [[108, 129], ["os.path.join", "set", "tqdm.tqdm", "open", "sorted", "os.path.basename().split", "race_vs_race.split", "os.path.join", "game_state.load_stat", "multiprocessing.Pool", "p.imap", "json.load", "os.path.isdir", "os.makedirs", "os.path.join", "numpy.asarray", "len", "spatial_feature_tensor.Parser", "tqdm.tqdm.update", "os.path.basename"], "function", ["home.repos.pwc.inspect_result.wuhuikai_MSC.extract_features.game_state.load_stat", "home.repos.pwc.inspect_result.wuhuikai_MSC.extract_features.game_state.GameState.update"], ["def", "main", "(", ")", ":", "\n", "    ", "with", "open", "(", "FLAGS", ".", "hq_replay_set", ")", "as", "f", ":", "\n", "        ", "replay_list", "=", "sorted", "(", "json", ".", "load", "(", "f", ")", ")", "\n", "\n", "", "race_vs_race", "=", "os", ".", "path", ".", "basename", "(", "FLAGS", ".", "hq_replay_set", ")", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "global_feature_vec_path", "=", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "parsed_replay_path", ",", "'SpatialFeatureTensor'", ",", "race_vs_race", ")", "\n", "races", "=", "set", "(", "race_vs_race", ".", "split", "(", "'_vs_'", ")", ")", "\n", "stats", "=", "{", "}", "\n", "for", "race", "in", "races", ":", "\n", "        ", "path", "=", "os", ".", "path", ".", "join", "(", "global_feature_vec_path", ",", "race", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "path", ")", "\n", "\n", "", "stat", "=", "load_stat", "(", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "parsed_replay_path", ",", "'Stat'", ",", "'{}.json'", ".", "format", "(", "race", ")", ")", ")", "\n", "stats", "[", "race", "]", "=", "{", "'max'", ":", "np", ".", "asarray", "(", "[", "stat", "[", "'max_'", "+", "k", "]", "for", "k", "in", "max_keys", "]", ")", ",", "\n", "'action_id'", ":", "stat", "[", "'action_id'", "]", "}", "\n", "\n", "", "pbar", "=", "tqdm", "(", "total", "=", "len", "(", "replay_list", ")", ",", "desc", "=", "'#Replay'", ")", "\n", "with", "Pool", "(", "FLAGS", ".", "n_workers", ")", "as", "p", ":", "\n", "        ", "for", "_", "in", "p", ".", "imap", "(", "Parser", "(", "race_vs_race", ",", "races", ",", "stats", ")", ",", "replay_list", ")", ":", "\n", "            ", "pbar", ".", "update", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_MSC.extract_features.SpatialFeatures.ScreenFeatures.__new__": [[11, 24], ["six.iteritems", "super().__new__", "Feature", "ScreenFeatures._fields.index", "callable", "palette"], "methods", ["home.repos.pwc.inspect_result.wuhuikai_MSC.extract_features.SpatialFeatures.MinimapFeatures.__new__"], ["def", "__new__", "(", "cls", ",", "**", "kwargs", ")", ":", "\n", "    ", "feats", "=", "{", "}", "\n", "for", "name", ",", "(", "scale", ",", "type_", ",", "palette", ",", "clip", ")", "in", "six", ".", "iteritems", "(", "kwargs", ")", ":", "\n", "      ", "feats", "[", "name", "]", "=", "Feature", "(", "\n", "index", "=", "ScreenFeatures", ".", "_fields", ".", "index", "(", "name", ")", ",", "\n", "name", "=", "name", ",", "\n", "layer_set", "=", "\"renders\"", ",", "\n", "full_name", "=", "\"screen \"", "+", "name", ",", "\n", "scale", "=", "scale", ",", "\n", "type", "=", "type_", ",", "\n", "palette", "=", "palette", "(", "scale", ")", "if", "callable", "(", "palette", ")", "else", "palette", ",", "\n", "clip", "=", "clip", ")", "\n", "", "return", "super", "(", "ScreenFeatures", ",", "cls", ")", ".", "__new__", "(", "cls", ",", "**", "feats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_MSC.extract_features.SpatialFeatures.MinimapFeatures.__new__": [[31, 44], ["six.iteritems", "super().__new__", "Feature", "MinimapFeatures._fields.index", "callable", "palette"], "methods", ["home.repos.pwc.inspect_result.wuhuikai_MSC.extract_features.SpatialFeatures.MinimapFeatures.__new__"], ["def", "__new__", "(", "cls", ",", "**", "kwargs", ")", ":", "\n", "    ", "feats", "=", "{", "}", "\n", "for", "name", ",", "(", "scale", ",", "type_", ",", "palette", ")", "in", "six", ".", "iteritems", "(", "kwargs", ")", ":", "\n", "      ", "feats", "[", "name", "]", "=", "Feature", "(", "\n", "index", "=", "MinimapFeatures", ".", "_fields", ".", "index", "(", "name", ")", ",", "\n", "name", "=", "name", ",", "\n", "layer_set", "=", "\"minimap_renders\"", ",", "\n", "full_name", "=", "\"minimap \"", "+", "name", ",", "\n", "scale", "=", "scale", ",", "\n", "type", "=", "type_", ",", "\n", "palette", "=", "palette", "(", "scale", ")", "if", "callable", "(", "palette", ")", "else", "palette", ",", "\n", "clip", "=", "False", ")", "\n", "", "return", "super", "(", "MinimapFeatures", ",", "cls", ")", ".", "__new__", "(", "cls", ",", "**", "feats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_MSC.extract_features.SpatialFeatures.SpatialFeatures.observation_spec": [[68, 84], ["len", "len"], "methods", ["None"], ["    ", "def", "observation_spec", "(", "self", ")", ":", "\n", "        ", "\"\"\"The observation spec for the SC2 environment.\n        Returns:\n          The dict of observation names to their tensor shapes. Shapes with a 0 can\n          vary in length, for example the number of valid actions depends on which\n          units you have selected.\n        \"\"\"", "\n", "return", "{", "\n", "\"screen\"", ":", "(", "len", "(", "SCREEN_FEATURES", ")", ",", "\n", "self", ".", "_screen_size_px", ".", "y", ",", "\n", "self", ".", "_screen_size_px", ".", "x", ")", ",", "\n", "\"minimap\"", ":", "(", "len", "(", "MINIMAP_FEATURES", ")", ",", "\n", "self", ".", "_minimap_size_px", ".", "y", ",", "\n", "self", ".", "_minimap_size_px", ".", "x", ")", ",", "\n", "\"player\"", ":", "(", "11", ",", ")", ",", "\n", "\"score\"", ":", "(", "13", ",", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_MSC.extract_features.SpatialFeatures.SpatialFeatures.transform_obs": [[86, 128], ["np.array", "np.array", "sw", "np.stack().astype", "np.stack().astype", "np.stack", "np.stack", "f.unpack", "f.unpack"], "methods", ["None"], ["", "@", "sw", ".", "decorate", "\n", "def", "transform_obs", "(", "self", ",", "obs", ")", ":", "\n", "        ", "\"\"\"Render some SC2 observations into something an agent can handle.\"\"\"", "\n", "out", "=", "{", "}", "\n", "\n", "with", "sw", "(", "\"feature_layers\"", ")", ":", "\n", "            ", "out", "[", "\"screen\"", "]", "=", "np", ".", "stack", "(", "\n", "f", ".", "unpack", "(", "obs", ")", "/", "f", ".", "scale", "for", "f", "in", "SCREEN_FEATURES", ")", ".", "astype", "(", "np", ".", "float32", ",", "copy", "=", "False", ")", "\n", "out", "[", "\"minimap\"", "]", "=", "np", ".", "stack", "(", "\n", "f", ".", "unpack", "(", "obs", ")", "/", "f", ".", "scale", "for", "f", "in", "MINIMAP_FEATURES", ")", ".", "astype", "(", "np", ".", "float32", ",", "copy", "=", "False", ")", "\n", "\n", "", "out", "[", "\"player\"", "]", "=", "np", ".", "array", "(", "[", "\n", "obs", ".", "game_loop", "-", "1", ",", "\n", "obs", ".", "player_common", ".", "minerals", ",", "\n", "obs", ".", "player_common", ".", "vespene", ",", "\n", "obs", ".", "player_common", ".", "food_used", ",", "\n", "obs", ".", "player_common", ".", "food_cap", ",", "\n", "obs", ".", "player_common", ".", "food_army", ",", "\n", "obs", ".", "player_common", ".", "food_workers", ",", "\n", "obs", ".", "player_common", ".", "idle_worker_count", ",", "\n", "obs", ".", "player_common", ".", "army_count", ",", "\n", "obs", ".", "player_common", ".", "warp_gate_count", ",", "\n", "obs", ".", "player_common", ".", "larva_count", ",", "\n", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "out", "[", "\"score\"", "]", "=", "np", ".", "array", "(", "[", "\n", "obs", ".", "score", ".", "score", ",", "\n", "obs", ".", "score", ".", "score_details", ".", "idle_production_time", ",", "\n", "obs", ".", "score", ".", "score_details", ".", "idle_worker_time", ",", "\n", "obs", ".", "score", ".", "score_details", ".", "total_value_units", ",", "\n", "obs", ".", "score", ".", "score_details", ".", "total_value_structures", ",", "\n", "obs", ".", "score", ".", "score_details", ".", "killed_value_units", ",", "\n", "obs", ".", "score", ".", "score_details", ".", "killed_value_structures", ",", "\n", "obs", ".", "score", ".", "score_details", ".", "collected_minerals", ",", "\n", "obs", ".", "score", ".", "score_details", ".", "collected_vespene", ",", "\n", "obs", ".", "score", ".", "score_details", ".", "collection_rate_minerals", ",", "\n", "obs", ".", "score", ".", "score_details", ".", "collection_rate_vespene", ",", "\n", "obs", ".", "score", ".", "score_details", ".", "spent_minerals", ",", "\n", "obs", ".", "score", ".", "score_details", ".", "spent_vespene", ",", "\n", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "return", "out", "", "", "", ""]], "home.repos.pwc.inspect_result.wuhuikai_MSC.extract_features.split.save": [[23, 27], ["print", "open", "json.dump", "len", "os.path.join"], "function", ["None"], ["def", "save", "(", "replays", ",", "prefix", ",", "folder", ")", ":", "\n", "    ", "print", "(", "'{}/{}: {}'", ".", "format", "(", "folder", ",", "prefix", ",", "len", "(", "replays", ")", ")", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "folder", ",", "prefix", "+", "'.json'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "replays", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_MSC.extract_features.split.main": [[28, 89], ["numpy.random.seed", "numpy.asarray", "numpy.sum", "os.path.join", "int", "int", "numpy.random.shuffle", "split.save", "split.save", "split.save", "os.path.isdir", "os.makedirs", "open", "json.load", "os.path.basename().split", "os.path.basename", "set", "google.protobuf.json_format.Parse", "result.append", "os.path.isdir", "os.makedirs", "float", "race_vs_race.split", "open", "json.load", "s2clientprotocol.sc2api_pb2.ResponseReplayInfo", "s2clientprotocol.sc2api_pb2.Race.Name", "os.path.join", "os.path.isfile", "os.path.join", "os.path.isfile", "os.path.join", "os.path.isfile", "replay_path_dict[].append", "len", "len", "FLAGS.ratio.split", "os.path.basename", "os.path.join", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.wuhuikai_MSC.extract_features.split.save", "home.repos.pwc.inspect_result.wuhuikai_MSC.extract_features.split.save", "home.repos.pwc.inspect_result.wuhuikai_MSC.extract_features.split.save"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "FLAGS", ".", "seed", ")", "\n", "ratio", "=", "np", ".", "asarray", "(", "[", "float", "(", "i", ")", "for", "i", "in", "FLAGS", ".", "ratio", ".", "split", "(", "':'", ")", "]", ")", "\n", "ratio", "/=", "np", ".", "sum", "(", "ratio", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "FLAGS", ".", "save_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "FLAGS", ".", "save_path", ")", "\n", "\n", "", "with", "open", "(", "FLAGS", ".", "hq_replay_set", ")", "as", "f", ":", "\n", "        ", "replays_list", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "result", "=", "[", "]", "\n", "race_vs_race", "=", "os", ".", "path", ".", "basename", "(", "FLAGS", ".", "hq_replay_set", ")", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "for", "replay_path", ",", "info_path", "in", "replays_list", ":", "\n", "        ", "replay_path_dict", "=", "{", "}", "\n", "replay_name", "=", "os", ".", "path", ".", "basename", "(", "replay_path", ")", "\n", "\n", "## Parsed Replay", "\n", "for", "race", "in", "set", "(", "race_vs_race", ".", "split", "(", "'_vs_'", ")", ")", ":", "\n", "            ", "replay_path_dict", "[", "race", "]", "=", "[", "]", "\n", "\n", "", "with", "open", "(", "info_path", ")", "as", "f", ":", "\n", "            ", "info", "=", "json", ".", "load", "(", "f", ")", "\n", "", "proto", "=", "Parse", "(", "info", "[", "'info'", "]", ",", "sc_pb", ".", "ResponseReplayInfo", "(", ")", ")", "\n", "for", "p", "in", "proto", ".", "player_info", ":", "\n", "            ", "player_id", "=", "p", ".", "player_info", ".", "player_id", "\n", "race", "=", "sc_pb", ".", "Race", ".", "Name", "(", "p", ".", "player_info", ".", "race_actual", ")", "\n", "\n", "parsed_replays_info", "=", "{", "}", "\n", "## Global Feature", "\n", "global_path", "=", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "parsed_replay_path", ",", "'GlobalFeatureVector'", ",", "race_vs_race", ",", "race", ",", "\n", "'{}@{}.npz'", ".", "format", "(", "player_id", ",", "replay_name", ")", ")", "\n", "\n", "if", "os", ".", "path", ".", "isfile", "(", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "root", ",", "global_path", ")", ")", ":", "\n", "                ", "parsed_replays_info", "[", "'global_path'", "]", "=", "global_path", "\n", "## Spatial Feature", "\n", "", "spatial_path_S", "=", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "parsed_replay_path", ",", "'SpatialFeatureTensor'", ",", "race_vs_race", ",", "race", ",", "\n", "'{}@{}@S.npz'", ".", "format", "(", "player_id", ",", "replay_name", ")", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "root", ",", "spatial_path_S", ")", ")", ":", "\n", "                ", "parsed_replays_info", "[", "'spatial_path_S'", "]", "=", "spatial_path_S", "\n", "\n", "", "spatial_path_G", "=", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "parsed_replay_path", ",", "'SpatialFeatureTensor'", ",", "race_vs_race", ",", "race", ",", "\n", "'{}@{}@G.npz'", ".", "format", "(", "player_id", ",", "replay_name", ")", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "root", ",", "spatial_path_G", ")", ")", ":", "\n", "                ", "parsed_replays_info", "[", "'spatial_path_G'", "]", "=", "spatial_path_G", "\n", "\n", "", "replay_path_dict", "[", "race", "]", ".", "append", "(", "parsed_replays_info", ")", "\n", "\n", "", "result", ".", "append", "(", "replay_path_dict", ")", "\n", "\n", "", "FLAGS", ".", "save_path", "=", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "save_path", ",", "race_vs_race", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "FLAGS", ".", "save_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "FLAGS", ".", "save_path", ")", "\n", "\n", "", "train_end", "=", "int", "(", "len", "(", "result", ")", "*", "ratio", "[", "0", "]", ")", "\n", "val_end", "=", "int", "(", "len", "(", "result", ")", "*", "(", "ratio", "[", "0", "]", "+", "ratio", "[", "1", "]", ")", ")", "\n", "\n", "np", ".", "random", ".", "shuffle", "(", "result", ")", "\n", "save", "(", "result", "[", ":", "train_end", "]", ",", "'train'", ",", "FLAGS", ".", "save_path", ")", "\n", "save", "(", "result", "[", "train_end", ":", "val_end", "]", ",", "'val'", ",", "FLAGS", ".", "save_path", ")", "\n", "save", "(", "result", "[", "val_end", ":", "]", ",", "'test'", ",", "FLAGS", ".", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_MSC.extract_features.global_feature_vector.parse_replay": [[26, 41], ["game_state.GameState", "numpy.asarray", "scipy.sparse.save_npz", "open", "json.load", "os.path.join", "os.path.join", "game_state.GameState.update", "np.asarray.append", "os.path.join", "scipy.sparse.csc_matrix", "os.path.join", "numpy.hstack", "game_state.GameState.get_action", "game_state.GameState.to_vector"], "function", ["home.repos.pwc.inspect_result.wuhuikai_MSC.extract_features.game_state.GameState.update", "home.repos.pwc.inspect_result.wuhuikai_MSC.extract_features.game_state.GameState.get_action", "home.repos.pwc.inspect_result.wuhuikai_MSC.extract_features.game_state.GameState.to_vector"], ["def", "parse_replay", "(", "replay_player_path", ",", "reward", ",", "race", ",", "enemy_race", ")", ":", "\n", "    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "parsed_replay_path", ",", "'GlobalFeatures'", ",", "replay_player_path", ")", ")", "as", "f", ":", "\n", "        ", "states", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "states_np", "=", "[", "]", "\n", "game_state", "=", "GameState", "(", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "parsed_replay_path", ",", "'Stat'", ",", "'{}.json'", ".", "format", "(", "race", ")", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "parsed_replay_path", ",", "'Stat'", ",", "'{}.json'", ".", "format", "(", "enemy_race", ")", ")", ")", "\n", "for", "state", "in", "states", ":", "\n", "        ", "game_state", ".", "update", "(", "state", ")", "\n", "states_np", ".", "append", "(", "np", ".", "hstack", "(", "[", "game_state", ".", "reward", ",", "game_state", ".", "get_action", "(", ")", ",", "\n", "game_state", ".", "score", ",", "game_state", ".", "to_vector", "(", ")", "]", ")", ")", "\n", "", "states_np", "=", "np", ".", "asarray", "(", "states_np", ")", "\n", "\n", "sparse", ".", "save_npz", "(", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "parsed_replay_path", ",", "'GlobalFeatureVector'", ",", "\n", "replay_player_path", ")", ",", "sparse", ".", "csc_matrix", "(", "states_np", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_MSC.extract_features.global_feature_vector.main": [[42, 70], ["os.path.join", "set", "tqdm.tqdm", "open", "sorted", "os.path.basename().split", "race_vs_race.split", "os.path.join", "google.protobuf.json_format.Parse", "os.path.basename", "tqdm.tqdm.update", "json.load", "os.path.isdir", "os.makedirs", "len", "open", "json.load", "s2clientprotocol.sc2api_pb2.ResponseReplayInfo", "s2clientprotocol.sc2api_pb2.Race.Name", "os.path.join", "global_feature_vector.parse_replay", "os.path.basename", "len", "list"], "function", ["home.repos.pwc.inspect_result.wuhuikai_MSC.extract_features.game_state.GameState.update", "home.repos.pwc.inspect_result.wuhuikai_MSC.extract_features.global_feature_vector.parse_replay"], ["", "def", "main", "(", ")", ":", "\n", "    ", "with", "open", "(", "FLAGS", ".", "hq_replay_set", ")", "as", "f", ":", "\n", "        ", "replay_list", "=", "sorted", "(", "json", ".", "load", "(", "f", ")", ")", "\n", "\n", "", "race_vs_race", "=", "os", ".", "path", ".", "basename", "(", "FLAGS", ".", "hq_replay_set", ")", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "global_feature_vec_path", "=", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "parsed_replay_path", ",", "'GlobalFeatureVector'", ",", "race_vs_race", ")", "\n", "races", "=", "set", "(", "race_vs_race", ".", "split", "(", "'_vs_'", ")", ")", "\n", "for", "race", "in", "races", ":", "\n", "        ", "path", "=", "os", ".", "path", ".", "join", "(", "global_feature_vec_path", ",", "race", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "path", ")", "\n", "\n", "", "", "pbar", "=", "tqdm", "(", "total", "=", "len", "(", "replay_list", ")", ",", "desc", "=", "'#Replay'", ")", "\n", "for", "replay_path", ",", "replay_info_path", "in", "replay_list", ":", "\n", "        ", "with", "open", "(", "replay_info_path", ")", "as", "f", ":", "\n", "            ", "info", "=", "json", ".", "load", "(", "f", ")", "\n", "", "info", "=", "Parse", "(", "info", "[", "'info'", "]", ",", "sc_pb", ".", "ResponseReplayInfo", "(", ")", ")", "\n", "\n", "replay_name", "=", "os", ".", "path", ".", "basename", "(", "replay_path", ")", "\n", "for", "player_info", "in", "info", ".", "player_info", ":", "\n", "            ", "race", "=", "sc_pb", ".", "Race", ".", "Name", "(", "player_info", ".", "player_info", ".", "race_actual", ")", "\n", "player_id", "=", "player_info", ".", "player_info", ".", "player_id", "\n", "reward", "=", "player_info", ".", "player_result", ".", "result", "\n", "\n", "replay_player_path", "=", "os", ".", "path", ".", "join", "(", "race_vs_race", ",", "race", ",", "'{}@{}'", ".", "format", "(", "player_id", ",", "replay_name", ")", ")", "\n", "parse_replay", "(", "replay_player_path", ",", "reward", ",", "race", ",", "race", "if", "len", "(", "races", ")", "==", "1", "else", "list", "(", "races", "-", "{", "race", "}", ")", "[", "0", "]", ")", "\n", "\n", "", "pbar", ".", "update", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_MSC.extract_features.game_state.GameState.__init__": [[42, 65], ["set", "set", "game_state.load_stat", "game_state.load_stat", "setattr", "os.path.samefile", "os.path.samefile"], "methods", ["home.repos.pwc.inspect_result.wuhuikai_MSC.extract_features.game_state.load_stat", "home.repos.pwc.inspect_result.wuhuikai_MSC.extract_features.game_state.load_stat"], ["def", "__init__", "(", "self", ",", "stat_path", ",", "enemy_stat_path", ")", ":", "\n", "        ", "if", "self", ".", "stat_path", "is", "None", "or", "not", "os", ".", "path", ".", "samefile", "(", "self", ".", "stat_path", ",", "stat_path", ")", ":", "\n", "            ", "self", ".", "stat_path", "=", "stat_path", "\n", "self", ".", "stat", "=", "load_stat", "(", "stat_path", ")", "\n", "", "if", "self", ".", "enemy_stat_path", "is", "None", "or", "not", "os", ".", "path", ".", "samefile", "(", "self", ".", "enemy_stat_path", ",", "enemy_stat_path", ")", ":", "\n", "            ", "self", ".", "enemy_stat_path", "=", "enemy_stat_path", "\n", "self", ".", "enemy_stat", "=", "load_stat", "(", "enemy_stat_path", ")", "\n", "\n", "", "for", "k", "in", "self", ".", "int_vars", ":", "\n", "            ", "setattr", "(", "self", ",", "k", ",", "-", "1", ")", "\n", "# Reward", "\n", "", "self", ".", "reward", "=", "-", "1", "\n", "self", ".", "score", "=", "None", "\n", "# Alerts", "\n", "self", ".", "alert", "=", "set", "(", ")", "\n", "# Upgrades", "\n", "self", ".", "upgrades", "=", "set", "(", ")", "\n", "# Actions", "\n", "self", ".", "action", "=", "-", "1", "\n", "self", ".", "research", "=", "{", "}", "\n", "# Units", "\n", "self", ".", "friendly_units", "=", "{", "}", "\n", "self", ".", "enemy_units", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_MSC.extract_features.game_state.GameState.update": [[66, 83], ["set", "set", "game_state.GameState.__set_action__", "game_state.GameState.__set_units__", "game_state.GameState.__set_units__", "setattr"], "methods", ["home.repos.pwc.inspect_result.wuhuikai_MSC.extract_features.game_state.GameState.__set_action__", "home.repos.pwc.inspect_result.wuhuikai_MSC.extract_features.game_state.GameState.__set_units__", "home.repos.pwc.inspect_result.wuhuikai_MSC.extract_features.game_state.GameState.__set_units__"], ["", "def", "update", "(", "self", ",", "state", ")", ":", "\n", "        ", "for", "k", "in", "self", ".", "int_vars", ":", "\n", "            ", "setattr", "(", "self", ",", "k", ",", "state", "[", "k", "]", ")", "\n", "# Reward", "\n", "", "self", ".", "reward", "=", "2", "-", "state", "[", "'reward'", "]", "\n", "self", ".", "score", "=", "state", "[", "'score_cumulative'", "]", "\n", "# Alert", "\n", "self", ".", "alert", "=", "set", "(", "state", "[", "'alert'", "]", ")", "\n", "# Upgrades", "\n", "self", ".", "upgrades", "=", "set", "(", "state", "[", "'upgrades'", "]", ")", "\n", "# Actions", "\n", "self", ".", "__set_action__", "(", "-", "1", "if", "state", "[", "'action'", "]", "is", "None", "else", "state", "[", "'action'", "]", "[", "0", "]", ")", "\n", "## Units", "\n", "# Friendly units", "\n", "self", ".", "friendly_units", "=", "self", ".", "__set_units__", "(", "state", "[", "'friendly_units'", "]", ")", "\n", "# Enemy units", "\n", "self", ".", "enemy_units", "=", "self", ".", "__set_units__", "(", "state", "[", "'enemy_units'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_MSC.extract_features.game_state.GameState.get_action": [[84, 86], ["None"], "methods", ["None"], ["", "def", "get_action", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "stat", "[", "'action_id'", "]", "[", "self", ".", "action", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_MSC.extract_features.game_state.GameState.__set_units__": [[87, 99], ["units.items", "int", "[].append", "[].append"], "methods", ["None"], ["", "def", "__set_units__", "(", "self", ",", "units", ")", ":", "\n", "        ", "results", "=", "{", "}", "\n", "for", "unit_type_id", ",", "unit", "in", "units", ".", "items", "(", ")", ":", "\n", "            ", "unit_type_id", "=", "int", "(", "unit_type_id", ")", "\n", "if", "unit_type_id", "not", "in", "results", ":", "\n", "                ", "results", "[", "unit_type_id", "]", "=", "{", "'built'", ":", "[", "]", ",", "'building'", ":", "[", "]", "}", "\n", "", "for", "unit_instance", "in", "unit", "[", "'units'", "]", ":", "\n", "                ", "if", "unit_instance", "[", "'build_progress'", "]", ">=", "1", ":", "\n", "                    ", "results", "[", "unit_type_id", "]", "[", "'built'", "]", ".", "append", "(", "unit_instance", ")", "\n", "", "else", ":", "\n", "                    ", "results", "[", "unit_type_id", "]", "[", "'building'", "]", ".", "append", "(", "unit_instance", ")", "\n", "", "", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_MSC.extract_features.game_state.GameState.__set_action__": [[100, 108], ["[].startswith"], "methods", ["None"], ["", "def", "__set_action__", "(", "self", ",", "action", ")", ":", "\n", "        ", "self", ".", "action", "=", "action", "\n", "if", "action", "==", "-", "1", ":", "\n", "            ", "return", "\n", "", "if", "self", ".", "stat", "[", "'action_name'", "]", "[", "action", "]", ".", "startswith", "(", "'Research'", ")", ":", "\n", "            ", "if", "action", "not", "in", "self", ".", "research", ":", "\n", "                ", "self", ".", "research", "[", "action", "]", "=", "0", "\n", "", "self", ".", "research", "[", "action", "]", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_MSC.extract_features.game_state.GameState.__units2vec__": [[109, 144], ["numpy.zeros", "units.items", "len", "len", "len", "len", "len", "len", "len", "max", "min"], "methods", ["None"], ["", "", "def", "__units2vec__", "(", "self", ",", "units", ",", "stat", ")", ":", "\n", "        ", "name2id", "=", "{", "'total_num'", ":", "0", ",", "'finished_num'", ":", "1", ",", "'building_num'", ":", "2", ",", "\n", "'max_building_progress'", ":", "3", ",", "'min_building_progress'", ":", "4", ",", "\n", "'avg_building_progress'", ":", "5", "}", "\n", "units_stat", "=", "stat", "[", "'units_type'", "]", "\n", "\n", "result", "=", "np", ".", "zeros", "(", "len", "(", "units_stat", ")", "*", "len", "(", "name2id", ")", ")", "\n", "for", "k", ",", "unit", "in", "units", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", "not", "in", "units_stat", ":", "\n", "                ", "continue", "\n", "", "start", "=", "units_stat", "[", "k", "]", "*", "len", "(", "name2id", ")", "\n", "result", "[", "start", "+", "name2id", "[", "'total_num'", "]", "]", "=", "len", "(", "unit", "[", "'built'", "]", ")", "+", "len", "(", "unit", "[", "'building'", "]", ")", "\n", "if", "result", "[", "start", "+", "name2id", "[", "'total_num'", "]", "]", "==", "0", ":", "\n", "                ", "continue", "\n", "\n", "", "result", "[", "start", "+", "name2id", "[", "'finished_num'", "]", "]", "=", "len", "(", "unit", "[", "'built'", "]", ")", "\n", "result", "[", "start", "+", "name2id", "[", "'building_num'", "]", "]", "=", "len", "(", "unit", "[", "'building'", "]", ")", "\n", "\n", "if", "result", "[", "start", "+", "name2id", "[", "'building_num'", "]", "]", ">", "0", ":", "\n", "## Init min value", "\n", "                ", "result", "[", "start", "+", "name2id", "[", "'min_building_progress'", "]", "]", "=", "1.0", "\n", "\n", "for", "u", "in", "unit", "[", "'building'", "]", ":", "\n", "                    ", "result", "[", "start", "+", "name2id", "[", "'max_building_progress'", "]", "]", "=", "max", "(", "result", "[", "start", "+", "name2id", "[", "'max_building_progress'", "]", "]", ",", "u", "[", "'build_progress'", "]", ")", "\n", "result", "[", "start", "+", "name2id", "[", "'min_building_progress'", "]", "]", "=", "min", "(", "result", "[", "start", "+", "name2id", "[", "'min_building_progress'", "]", "]", ",", "u", "[", "'build_progress'", "]", ")", "\n", "result", "[", "start", "+", "name2id", "[", "'avg_building_progress'", "]", "]", "+=", "u", "[", "'build_progress'", "]", "\n", "\n", "", "result", "[", "start", "+", "name2id", "[", "'avg_building_progress'", "]", "]", "/=", "result", "[", "start", "+", "name2id", "[", "'building_num'", "]", "]", "\n", "\n", "", "for", "name", "in", "{", "'total_num'", ",", "'finished_num'", ",", "'building_num'", "}", ":", "\n", "                ", "result", "[", "start", "+", "name2id", "[", "name", "]", "]", "/=", "stat", "[", "'max_unit_num'", "]", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_MSC.extract_features.game_state.GameState.__set_to_array__": [[145, 150], ["numpy.zeros", "len"], "methods", ["None"], ["", "def", "__set_to_array__", "(", "self", ",", "set_var", ",", "key2id", ")", ":", "\n", "        ", "result", "=", "np", ".", "zeros", "(", "len", "(", "key2id", ")", ")", "\n", "for", "key", "in", "set_var", ":", "\n", "            ", "result", "[", "key2id", "[", "key", "]", "]", "=", "1", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_MSC.extract_features.game_state.GameState.__dict_to_array__": [[151, 156], ["numpy.zeros", "dict_var.items", "len"], "methods", ["None"], ["", "def", "__dict_to_array__", "(", "self", ",", "dict_var", ",", "key2id", ",", "scale", "=", "1", ")", ":", "\n", "        ", "result", "=", "np", ".", "zeros", "(", "len", "(", "key2id", ")", ")", "\n", "for", "key", ",", "value", "in", "dict_var", ".", "items", "(", ")", ":", "\n", "            ", "result", "[", "key2id", "[", "key", "]", "]", "=", "value", "/", "scale", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_MSC.extract_features.game_state.GameState.to_vector": [[157, 176], ["zip", "result.append", "result.append", "result.append", "result.append", "result.append", "result.append", "numpy.hstack", "max_result.append", "game_state.GameState.__set_to_array__", "game_state.GameState.__set_to_array__", "game_state.GameState.__dict_to_array__", "game_state.GameState.__units2vec__", "game_state.GameState.__units2vec__"], "methods", ["home.repos.pwc.inspect_result.wuhuikai_MSC.extract_features.game_state.GameState.__set_to_array__", "home.repos.pwc.inspect_result.wuhuikai_MSC.extract_features.game_state.GameState.__set_to_array__", "home.repos.pwc.inspect_result.wuhuikai_MSC.extract_features.game_state.GameState.__dict_to_array__", "home.repos.pwc.inspect_result.wuhuikai_MSC.extract_features.game_state.GameState.__units2vec__", "home.repos.pwc.inspect_result.wuhuikai_MSC.extract_features.game_state.GameState.__units2vec__"], ["", "def", "to_vector", "(", "self", ")", ":", "\n", "        ", "result", "=", "[", "]", "\n", "# Frame_id; Resources", "\n", "max_result", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "zip", "(", "self", ".", "max_keys", ",", "self", ".", "max_vars", ")", ":", "\n", "            ", "max_result", ".", "append", "(", "self", ".", "__dict__", "[", "v", "]", "/", "(", "self", ".", "stat", "[", "'max_'", "+", "k", "]", "+", "self", ".", "eps", ")", ")", "\n", "", "result", ".", "append", "(", "max_result", ")", "\n", "# Alerts", "\n", "result", ".", "append", "(", "self", ".", "__set_to_array__", "(", "self", ".", "alert", ",", "self", ".", "stat", "[", "'alert'", "]", ")", ")", "\n", "# Upgrades", "\n", "result", ".", "append", "(", "self", ".", "__set_to_array__", "(", "self", ".", "upgrades", ",", "self", ".", "stat", "[", "'upgrades'", "]", ")", ")", "\n", "# Research", "\n", "result", ".", "append", "(", "self", ".", "__dict_to_array__", "(", "self", ".", "research", ",", "self", ".", "stat", "[", "'research_id'", "]", ",", "\n", "self", ".", "stat", "[", "'max_research_num'", "]", ")", ")", "\n", "## Units", "\n", "result", ".", "append", "(", "self", ".", "__units2vec__", "(", "self", ".", "friendly_units", ",", "self", ".", "stat", ")", ")", "\n", "result", ".", "append", "(", "self", ".", "__units2vec__", "(", "self", ".", "enemy_units", ",", "self", ".", "enemy_stat", ")", ")", "\n", "\n", "return", "np", ".", "hstack", "(", "result", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_MSC.extract_features.game_state.GameState.__str__": [[177, 179], ["pprint.pformat"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "pprint", ".", "pformat", "(", "self", ".", "__dict__", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wuhuikai_MSC.extract_features.game_state.load_stat": [[6, 25], ["game_state.load_stat.dict_key_to_int"], "function", ["None"], ["def", "load_stat", "(", "path", ")", ":", "\n", "    ", "def", "dict_key_to_int", "(", "obj", ")", ":", "\n", "        ", "def", "str2int", "(", "s", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "return", "int", "(", "s", ")", "\n", "", "except", ":", "\n", "                ", "return", "s", "\n", "\n", "", "", "if", "not", "isinstance", "(", "obj", ",", "dict", ")", ":", "\n", "            ", "return", "str2int", "(", "obj", ")", "\n", "\n", "", "return", "{", "str2int", "(", "k", ")", ":", "dict_key_to_int", "(", "v", ")", "for", "k", ",", "v", "in", "obj", ".", "items", "(", ")", "}", "\n", "\n", "", "with", "open", "(", "path", ")", "as", "f", ":", "\n", "        ", "stat", "=", "json", ".", "load", "(", "f", ")", "\n", "", "stat", "=", "dict_key_to_int", "(", "stat", ")", "\n", "stat", "[", "'action_id'", "]", "[", "-", "1", "]", "=", "len", "(", "stat", "[", "'action_id'", "]", ")", "\n", "\n", "return", "stat", "\n", "\n"]]}