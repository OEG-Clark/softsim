{"home.repos.pwc.inspect_result.oravus_DeltaDescriptors.src.ops.transformPCAEx": [[5, 14], ["numpy.dot", "pc.transpose"], "function", ["None"], ["def", "transformPCAEx", "(", "ftIn", ",", "pca", ")", ":", "\n", "    ", "\"\"\"\n    Explicit transformation to optionally disable data centering\n    \"\"\"", "\n", "pm", "=", "pca", ".", "mean_", "\n", "pc", "=", "pca", ".", "components_", "\n", "diff", "=", "ftIn", "-", "pm", "[", "None", ",", ":", "]", "\n", "tfm", "=", "np", ".", "dot", "(", "diff", ",", "pc", ".", "transpose", "(", ")", ")", "\n", "return", "tfm", "\n", "\n"]], "home.repos.pwc.inspect_result.oravus_DeltaDescriptors.src.ops.performOps": [[15, 74], ["sklearn.decomposition.PCA.fit_transform", "ops.transformPCAEx", "f1.copy", "f2.copy", "sklearn.decomposition.PCA", "sklearn.decomposition.PCA", "ft.copy", "tqdm.tqdm", "ftAll.append", "range", "numpy.convolve", "numpy.vstack", "ftAll.append", "numpy.vstack", "ftAll.append", "numpy.ones", "float", "tqdm.tqdm", "numpy.array().transpose", "numpy.array", "ftAll.append", "numpy.ones", "range", "np.array.append", "numpy.convolve", "numpy.array", "enumerate", "f.sum"], "function", ["home.repos.pwc.inspect_result.oravus_DeltaDescriptors.src.ops.transformPCAEx"], ["", "def", "performOps", "(", "data", ",", "opName", ",", "winL", "=", "None", ",", "pcaComp", "=", "None", ")", ":", "\n", "\n", "    ", "if", "opName", "==", "\"pca\"", ":", "\n", "        ", "f1", ",", "f2", "=", "data", "\n", "ft1", ",", "ft2", "=", "f1", ".", "copy", "(", ")", ",", "f2", ".", "copy", "(", ")", "\n", "if", "pcaComp", "is", "None", ":", "\n", "            ", "pca", "=", "PCA", "(", ")", "\n", "", "else", ":", "\n", "            ", "pca", "=", "PCA", "(", "pcaComp", ")", "\n", "\n", "", "ft1P", "=", "pca", ".", "fit_transform", "(", "ft1", ")", "\n", "ft2P", "=", "transformPCAEx", "(", "ft2", ",", "pca", ")", "#pca.transform(ft2)", "\n", "return", "ft1P", ",", "ft2P", "\n", "\n", "", "elif", "opName", "==", "\"smooth\"", ":", "\n", "        ", "ftAll", "=", "[", "]", "\n", "for", "ft", "in", "data", ":", "\n", "            ", "ft1A", "=", "ft", ".", "copy", "(", ")", "\n", "for", "i1", "in", "tqdm", "(", "range", "(", "ft", ".", "shape", "[", "1", "]", ")", ")", ":", "\n", "                ", "ft1A", "[", ":", ",", "i1", "]", "=", "np", ".", "convolve", "(", "ft", "[", ":", ",", "i1", "]", ",", "np", ".", "ones", "(", "winL", ")", "/", "float", "(", "winL", ")", ",", "\"same\"", ")", "\n", "", "ftAll", ".", "append", "(", "ft1A", ")", "\n", "", "return", "ftAll", "\n", "\n", "", "elif", "opName", "==", "\"adjDiff\"", ":", "\n", "        ", "ftAll", "=", "[", "]", "\n", "for", "ft", "in", "data", ":", "\n", "            ", "ft1D", "=", "ft", "[", "1", ":", "]", "-", "ft", "[", ":", "-", "1", "]", "\n", "ft1D", "=", "np", ".", "vstack", "(", "[", "ft1D", "[", "0", "]", ",", "ft1D", "]", ")", "\n", "ftAll", ".", "append", "(", "ft1D", ")", "\n", "", "return", "ftAll", "\n", "\n", "", "elif", "opName", "==", "\"winDiff\"", ":", "\n", "        ", "ftAll", "=", "[", "]", "\n", "for", "ft", "in", "data", ":", "\n", "            ", "ft1D", "=", "ft", "[", "winL", ":", "]", "-", "ft", "[", ":", "-", "winL", "]", "\n", "ft1D", "=", "np", ".", "vstack", "(", "[", "ft1D", "[", ":", "winL", "//", "2", "]", ",", "ft1D", ",", "ft1D", "[", "-", "winL", "//", "2", ":", "]", "]", ")", "\n", "ftAll", ".", "append", "(", "ft1D", ")", "\n", "", "return", "ftAll", "\n", "\n", "", "elif", "opName", "==", "\"delta\"", ":", "\n", "        ", "v", "=", "(", "-", "1.0", "*", "np", ".", "ones", "(", "winL", ")", ")", "/", "(", "winL", "/", "2.0", ")", "\n", "v", "[", ":", "winL", "//", "2", "]", "*=", "-", "1", "\n", "\n", "ftAll", "=", "[", "]", "\n", "for", "ft", "in", "data", ":", "\n", "            ", "ftC", "=", "[", "]", "#ft1.copy(), ft2.copy()", "\n", "# note that np.convolve flips the v vector hence sign is inverted above", "\n", "for", "i1", "in", "tqdm", "(", "range", "(", "ft", ".", "shape", "[", "1", "]", ")", ")", ":", "\n", "                ", "ftC", ".", "append", "(", "np", ".", "convolve", "(", "ft", "[", ":", ",", "i1", "]", ",", "v", ",", "\"same\"", ")", ")", "\n", "", "ftC", "=", "np", ".", "array", "(", "ftC", ")", ".", "transpose", "(", ")", "\n", "\n", "# a forced fix for zero-sum delta descs -> use the raw descriptor (could otherwise skip frames)", "\n", "ftC", "=", "np", ".", "array", "(", "[", "ft", "[", "j", "]", "if", "f", ".", "sum", "(", ")", "==", "0", "else", "f", "for", "j", ",", "f", "in", "enumerate", "(", "ftC", ")", "]", ")", "\n", "\n", "ftAll", ".", "append", "(", "ftC", ")", "\n", "\n", "", "return", "ftAll", "\n", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.oravus_DeltaDescriptors.src.ops.performOpsMulti": [[75, 79], ["ops.performOps"], "function", ["home.repos.pwc.inspect_result.oravus_DeltaDescriptors.src.ops.performOps"], ["", "def", "performOpsMulti", "(", "data", ",", "opList", ",", "winL", "=", "None", ",", "pcaComp", "=", "None", ")", ":", "\n", "    ", "for", "opName", "in", "opList", ":", "\n", "        ", "data", "=", "performOps", "(", "data", ",", "opName", ",", "winL", ",", "pcaComp", ")", "\n", "", "return", "data", "", "", ""]], "home.repos.pwc.inspect_result.oravus_DeltaDescriptors.src.main.getFN": [[28, 30], ["os.path.splitext", "os.path.basename"], "function", ["None"], ["def", "getFN", "(", "fullPath", ")", ":", "\n", "    ", "return", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "fullPath", ")", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.oravus_DeltaDescriptors.src.main.main": [[31, 82], ["parser.parse_args", "print", "time.strftime", "os.path.join", "Exception", "time.localtime", "os.path.exists", "os.makedirs", "print", "numpy.load", "print", "ops.performOps", "numpy.save", "print", "scipy.spatial.distance.cdist", "print", "numpy.argmin", "numpy.savez", "outFuncs.saveDistMat", "outFuncs.evaluate", "numpy.load", "os.path.join", "numpy.save", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "numpy.arange", "main.getFN", "len", "main.getFN"], "function", ["home.repos.pwc.inspect_result.oravus_DeltaDescriptors.src.ops.performOps", "home.repos.pwc.inspect_result.oravus_DeltaDescriptors.src.outFuncs.saveDistMat", "home.repos.pwc.inspect_result.oravus_DeltaDescriptors.src.outFuncs.evaluate", "home.repos.pwc.inspect_result.oravus_DeltaDescriptors.src.main.getFN", "home.repos.pwc.inspect_result.oravus_DeltaDescriptors.src.main.getFN"], ["", "def", "main", "(", ")", ":", "\n", "    ", "opt", "=", "parser", ".", "parse_args", "(", ")", "\n", "print", "(", "opt", ")", "\n", "\n", "if", "opt", ".", "genMatch", "and", "opt", ".", "descFullPath2", "is", "None", ":", "\n", "        ", "raise", "Exception", "(", "\"For generating distance matrix, provide path to query descriptors as well.\"", ")", "\n", "\n", "", "timeStamp", "=", "time", ".", "strftime", "(", "\"%Y-%m-%d-%H-%M-%S\"", ",", "time", ".", "localtime", "(", ")", ")", "\n", "outDir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "outPath", ",", "\"results_{}/\"", ".", "format", "(", "timeStamp", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "outDir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "outDir", ")", "\n", "print", "(", "\"Created output directory: \"", ",", "outDir", ")", "\n", "\n", "", "if", "opt", ".", "genDesc", "or", "opt", ".", "genMatch", ":", "\n", "        ", "descData", "=", "[", "]", "\n", "descR", "=", "np", ".", "load", "(", "opt", ".", "descFullPath1", ")", "\n", "descData", "+=", "[", "descR", "]", "\n", "if", "opt", ".", "genMatch", ":", "\n", "            ", "descQ", "=", "np", ".", "load", "(", "opt", ".", "descFullPath2", ")", "\n", "descData", "+=", "[", "descQ", "]", "\n", "\n", "", "", "if", "opt", ".", "genDesc", ":", "\n", "        ", "print", "(", "\"Computing Descriptors...\"", ")", "\n", "descData", "=", "ops", ".", "performOps", "(", "descData", ",", "opt", ".", "descOpType", ",", "opt", ".", "seqLength", ")", "\n", "\n", "# store descriptors", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "outDir", ",", "getFN", "(", "opt", ".", "descFullPath1", ")", "+", "\"_\"", "+", "opt", ".", "descOpType", ")", ",", "descData", "[", "0", "]", ")", "\n", "if", "opt", ".", "genMatch", ":", "\n", "            ", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "outDir", ",", "getFN", "(", "opt", ".", "descFullPath2", ")", "+", "\"_\"", "+", "opt", ".", "descOpType", ")", ",", "descData", "[", "1", "]", ")", "\n", "\n", "", "", "if", "opt", ".", "genMatch", ":", "\n", "        ", "print", "(", "\"Generating Matches...\"", ")", "\n", "dMat", "=", "cdist", "(", "descData", "[", "0", "]", ",", "descData", "[", "1", "]", ",", "\"cosine\"", ")", "\n", "\n", "print", "(", "\"Distance Matrix Shape: \"", ",", "dMat", ".", "shape", ")", "\n", "\n", "mInds", "=", "np", ".", "argmin", "(", "dMat", ",", "axis", "=", "0", ")", "\n", "mDists", "=", "dMat", "[", "mInds", ",", "np", ".", "arange", "(", "len", "(", "mInds", ")", ")", "]", "\n", "\n", "# store match output ", "\n", "np", ".", "savez", "(", "os", ".", "path", ".", "join", "(", "outDir", ",", "\"matchOutput.npz\"", ")", ",", "matchInds", "=", "mInds", ",", "matchDists", "=", "mDists", ")", "\n", "outFuncs", ".", "saveDistMat", "(", "dMat", ",", "mInds", ",", "os", ".", "path", ".", "join", "(", "outDir", ",", "\"matchMat.jpg\"", ")", ")", "\n", "\n", "", "if", "opt", ".", "eval", ":", "\n", "        ", "if", "opt", ".", "genMatch", ":", "\n", "            ", "resPath", "=", "os", ".", "path", ".", "join", "(", "outDir", ",", "\"matchOutput.npz\"", ")", "\n", "", "else", ":", "\n", "            ", "resPath", "=", "opt", ".", "matchOutputPath", "\n", "", "pAt100R", "=", "outFuncs", ".", "evaluate", "(", "resPath", ",", "opt", ".", "cordsPath1", ",", "opt", ".", "cordsPath2", ")", "\n", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.oravus_DeltaDescriptors.src.outFuncs.saveDistMat": [[4, 11], ["matplotlib.imshow", "matplotlib.colorbar", "matplotlib.plot", "matplotlib.savefig", "matplotlib.close"], "function", ["None"], ["def", "saveDistMat", "(", "dMat", ",", "mInds", ",", "outPath", ")", ":", "\n", "    ", "plt", ".", "imshow", "(", "dMat", ")", "\n", "plt", ".", "colorbar", "(", ")", "\n", "plt", ".", "plot", "(", "mInds", ",", "'.'", ",", "c", "=", "'tab:orange'", ")", "\n", "plt", ".", "savefig", "(", "outPath", ")", "\n", "plt", ".", "close", "(", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.oravus_DeltaDescriptors.src.outFuncs.getPR": [[12, 32], ["numpy.sum", "numpy.sum", "numpy.argwhere", "len", "numpy.argwhere", "len", "len", "float", "float"], "function", ["None"], ["", "def", "getPR", "(", "mInds", ",", "gt", ",", "locRad", ")", ":", "\n", "\n", "    ", "positives", "=", "np", ".", "argwhere", "(", "mInds", "!=", "-", "1", ")", "[", ":", ",", "0", "]", "\n", "tp", "=", "np", ".", "sum", "(", "gt", "[", "positives", "]", "<=", "locRad", ")", "\n", "fp", "=", "len", "(", "positives", ")", "-", "tp", "\n", "\n", "negatives", "=", "np", ".", "argwhere", "(", "mInds", "==", "-", "1", ")", "[", ":", ",", "0", "]", "\n", "tn", "=", "np", ".", "sum", "(", "gt", "[", "negatives", "]", ">", "locRad", ")", "\n", "fn", "=", "len", "(", "negatives", ")", "-", "tn", "\n", "\n", "assert", "(", "tp", "+", "tn", "+", "fp", "+", "fn", "==", "len", "(", "gt", ")", ")", "\n", "\n", "if", "tp", "==", "0", ":", "\n", "        ", "return", "0", ",", "0", ",", "0", "# what else?", "\n", "\n", "", "prec", "=", "tp", "/", "float", "(", "tp", "+", "fp", ")", "\n", "recall", "=", "tp", "/", "float", "(", "tp", "+", "fn", ")", "\n", "fscore", "=", "2", "*", "prec", "*", "recall", "/", "(", "prec", "+", "recall", ")", "\n", "\n", "return", "prec", ",", "recall", ",", "fscore", "\n", "\n"]], "home.repos.pwc.inspect_result.oravus_DeltaDescriptors.src.outFuncs.getPRCurve": [[33, 46], ["numpy.arange", "numpy.array", "mDists.min", "mDists.max", "mInds.copy", "outFuncs.getPR", "prfData.append"], "function", ["home.repos.pwc.inspect_result.oravus_DeltaDescriptors.src.outFuncs.getPR"], ["", "def", "getPRCurve", "(", "mInds", ",", "mDists", ",", "gt", ",", "locRad", ")", ":", "\n", "\n", "    ", "prfData", "=", "[", "]", "\n", "lb", ",", "ub", "=", "mDists", ".", "min", "(", ")", ",", "mDists", ".", "max", "(", ")", "\n", "step", "=", "(", "ub", "-", "lb", ")", "/", "100.0", "\n", "for", "thresh", "in", "np", ".", "arange", "(", "lb", ",", "ub", "+", "step", ",", "step", ")", ":", "\n", "        ", "matchFlags", "=", "mDists", "<=", "thresh", "\n", "outVals", "=", "mInds", ".", "copy", "(", ")", "\n", "outVals", "[", "~", "matchFlags", "]", "=", "-", "1", "\n", "\n", "p", ",", "r", ",", "f", "=", "getPR", "(", "outVals", ",", "gt", ",", "locRad", ")", "\n", "prfData", ".", "append", "(", "[", "p", ",", "r", ",", "f", "]", ")", "\n", "", "return", "np", ".", "array", "(", "prfData", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oravus_DeltaDescriptors.src.outFuncs.getPAt100R": [[47, 53], ["range", "pAt100R.append", "numpy.array", "float", "len", "numpy.sum"], "function", ["None"], ["", "def", "getPAt100R", "(", "dists", ",", "maxLocRad", ")", ":", "\n", "    ", "pAt100R", "=", "[", "]", "\n", "for", "i1", "in", "range", "(", "maxLocRad", ")", ":", "\n", "        ", "pAt100R", ".", "append", "(", "[", "np", ".", "sum", "(", "dists", "<=", "i1", ")", "]", ")", "\n", "", "pAt100R", "=", "np", ".", "array", "(", "pAt100R", ")", "/", "float", "(", "len", "(", "dists", ")", ")", "\n", "return", "pAt100R", "\n", "\n"]], "home.repos.pwc.inspect_result.oravus_DeltaDescriptors.src.outFuncs.evaluate": [[54, 72], ["numpy.load", "outFuncs.getPAt100R", "print", "numpy.arange", "numpy.arange", "abs", "len", "len"], "function", ["home.repos.pwc.inspect_result.oravus_DeltaDescriptors.src.outFuncs.getPAt100R"], ["", "def", "evaluate", "(", "resPath", ",", "insPath1", "=", "None", ",", "insPath2", "=", "None", ",", "maxLocRad", "=", "50", ")", ":", "\n", "    ", "res", "=", "np", ".", "load", "(", "resPath", ")", "\n", "mInds", "=", "res", "[", "\"matchInds\"", "]", "\n", "mDists", "=", "res", "[", "\"matchDists\"", "]", "\n", "\n", "if", "insPath1", "is", "None", "or", "insPath2", "is", "None", ":", "\n", "# assume 1-to-1 frame correspondence with frame indices as co-ords", "\n", "        ", "rCords", "=", "np", ".", "arange", "(", "len", "(", "mInds", ")", ")", "\n", "qCords", "=", "np", ".", "arange", "(", "len", "(", "mInds", ")", ")", "\n", "mrCords", "=", "rCords", "[", "mInds", "]", "\n", "dists", "=", "abs", "(", "qCords", "-", "mrCords", ")", "\n", "", "else", ":", "\n", "        ", "pass", "#TODO", "\n", "\n", "", "pAt100R", "=", "getPAt100R", "(", "dists", ",", "maxLocRad", ")", "\n", "\n", "print", "(", "pAt100R", "[", "[", "1", ",", "5", ",", "10", ",", "20", "]", "]", ")", "\n", "return", "pAt100R", "", "", ""]], "home.repos.pwc.inspect_result.oravus_DeltaDescriptors.thirdparty.extract_netvlad.argParser": [[12, 26], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "len", "print", "sys.exit", "argparse.ArgumentParser.format_help"], "function", ["None"], ["def", "argParser", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"NetVLAD Feature Extractor\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--imPath\"", ",", "\"-i\"", ",", "help", "=", "\"Path to image directory\"", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\"--outPath\"", ",", "\"-o\"", ",", "default", "=", "\"../out/\"", ",", "help", "=", "\"Full path to store output descriptor npy\"", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\"--batchSize\"", ",", "\"-b\"", ",", "default", "=", "8", ",", "help", "=", "\"Batch Size\"", ",", "type", "=", "int", ")", "\n", "\n", "if", "len", "(", "sys", ".", "argv", ")", "<", "2", ":", "\n", "        ", "print", "(", "parser", ".", "format_help", "(", ")", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.oravus_DeltaDescriptors.thirdparty.extract_netvlad.getSessVars": [[27, 40], ["tensorflow.reset_default_graph", "tensorflow.placeholder", "netvlad_tf.vgg16NetvladPca", "tensorflow.train.Saver", "tensorflow.Session", "tf.train.Saver.restore", "netvlad_tf.defaultCheckpoint"], "function", ["None"], ["", "def", "getSessVars", "(", ")", ":", "\n", "    ", "tf", ".", "reset_default_graph", "(", ")", "\n", "\n", "image_batch", "=", "tf", ".", "placeholder", "(", "\n", "dtype", "=", "tf", ".", "float32", ",", "shape", "=", "[", "None", ",", "None", ",", "None", ",", "3", "]", ")", "\n", "\n", "net_out", "=", "nets", ".", "vgg16NetvladPca", "(", "image_batch", ")", "\n", "saver", "=", "tf", ".", "train", ".", "Saver", "(", ")", "\n", "\n", "sess", "=", "tf", ".", "Session", "(", ")", "\n", "saver", ".", "restore", "(", "sess", ",", "nets", ".", "defaultCheckpoint", "(", ")", ")", "\n", "\n", "return", "sess", ",", "net_out", ",", "image_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.oravus_DeltaDescriptors.thirdparty.extract_netvlad.extractFeat": [[42, 63], ["tqdm.tqdm", "numpy.concatenate", "enumerate", "ims.append", "print", "cv2.imread", "sess.run", "np.concatenate.append", "os.path.join", "len", "print", "len", "numpy.array"], "function", ["None"], ["", "def", "extractFeat", "(", "sessVars", ",", "batchSize", ",", "imPath", ",", "imList", ",", "verbose", "=", "True", ")", ":", "\n", "\n", "    ", "sess", ",", "net_out", ",", "image_batch", "=", "sessVars", "\n", "\n", "ims", ",", "fOuts", "=", "[", "]", ",", "[", "]", "\n", "for", "i1", ",", "name", "in", "tqdm", "(", "enumerate", "(", "imList", ")", ")", ":", "\n", "        ", "im", "=", "cv2", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "imPath", ",", "name", ")", ")", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "ims", ".", "append", "(", "im", ")", "\n", "\n", "if", "len", "(", "ims", ")", "==", "batchSize", "or", "i1", "==", "len", "(", "imList", ")", "-", "1", ":", "\n", "            ", "fOut", "=", "sess", ".", "run", "(", "net_out", ",", "feed_dict", "=", "{", "image_batch", ":", "np", ".", "array", "(", "ims", ")", "}", ")", "\n", "ims", "=", "[", "]", "\n", "fOuts", ".", "append", "(", "fOut", ")", "\n", "\n", "if", "verbose", ":", "\n", "                ", "print", "(", "\"Processed \"", ",", "i1", ")", "\n", "\n", "", "", "", "fOuts", "=", "np", ".", "concatenate", "(", "fOuts", ")", "\n", "if", "verbose", ":", "\n", "        ", "print", "(", "\"Descriptor matrix shape: \"", ",", "fOuts", ".", "shape", ")", "\n", "", "return", "fOuts", "\n", "\n"]], "home.repos.pwc.inspect_result.oravus_DeltaDescriptors.thirdparty.extract_netvlad.process": [[64, 80], ["numpy.sort", "extract_netvlad.getSessVars", "extract_netvlad.extractFeat", "os.listdir", "datetime.datetime.now().strftime", "os.path.join", "numpy.save", "print", "os.path.exists", "os.makedirs", "datetime.datetime.now"], "function", ["home.repos.pwc.inspect_result.oravus_DeltaDescriptors.thirdparty.extract_netvlad.getSessVars", "home.repos.pwc.inspect_result.oravus_DeltaDescriptors.thirdparty.extract_netvlad.extractFeat"], ["", "def", "process", "(", "imPath", ",", "batchSize", "=", "8", ",", "outPath", "=", "None", ")", ":", "\n", "\n", "    ", "imList", "=", "np", ".", "sort", "(", "os", ".", "listdir", "(", "imPath", ")", ")", "\n", "sessVars", "=", "getSessVars", "(", ")", "\n", "\n", "nvFt", "=", "extractFeat", "(", "sessVars", ",", "batchSize", ",", "imPath", ",", "imList", ")", "\n", "\n", "if", "outPath", "is", "not", "None", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "outPath", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "outPath", ")", "\n", "", "uniqueTS", "=", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%Y-%m-%d-%H-%M-%S\"", ")", "\n", "saveFullName", "=", "os", ".", "path", ".", "join", "(", "outPath", ",", "\"{}_nvFt\"", ".", "format", "(", "uniqueTS", ")", ")", "\n", "np", ".", "save", "(", "saveFullName", ",", "nvFt", ")", "\n", "print", "(", "\"Stored at: \"", ",", "saveFullName", ")", "\n", "\n", "", "return", "nvFt", "\n", "\n"]]}