{"home.repos.pwc.inspect_result.mbhenaff_EEN.None.models.LatentResidualModel3Layer.__init__": [[16, 111], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "models.LatentResidualModel3Layer.intype", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d"], "methods", ["home.repos.pwc.inspect_result.mbhenaff_EEN.dataloaders.data_atari.ImageLoader.__init__", "home.repos.pwc.inspect_result.mbhenaff_EEN.None.models.BaselineModel3Layer.intype"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", "LatentResidualModel3Layer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "opt", "=", "opt", "\n", "\n", "# deterministic network", "\n", "self", ".", "g_network_encoder", "=", "nn", ".", "Sequential", "(", "\n", "# layer 1", "\n", "nn", ".", "Conv2d", "(", "opt", ".", "n_in", ",", "opt", ".", "nfeature", ",", "7", ",", "2", ",", "3", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "opt", ".", "nfeature", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "# layer 2", "\n", "nn", ".", "Conv2d", "(", "opt", ".", "nfeature", ",", "opt", ".", "nfeature", ",", "5", ",", "2", ",", "2", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "opt", ".", "nfeature", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "# layer 3", "\n", "nn", ".", "Conv2d", "(", "opt", ".", "nfeature", ",", "opt", ".", "nfeature", ",", "5", ",", "2", ",", "2", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "opt", ".", "nfeature", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "\n", ")", "\n", "\n", "\n", "k", "=", "4", "\n", "if", "opt", ".", "task", "==", "'breakout'", "or", "opt", ".", "task", "==", "'seaquest'", ":", "\n", "# need this for output to be the right size", "\n", "            ", "k", "=", "3", "\n", "\n", "", "self", ".", "g_network_decoder", "=", "nn", ".", "Sequential", "(", "\n", "# layer 4", "\n", "nn", ".", "ConvTranspose2d", "(", "opt", ".", "nfeature", ",", "opt", ".", "nfeature", ",", "k", ",", "2", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "opt", ".", "nfeature", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "# layer 5", "\n", "nn", ".", "ConvTranspose2d", "(", "opt", ".", "nfeature", ",", "opt", ".", "nfeature", ",", "4", ",", "2", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "opt", ".", "nfeature", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "# layer 6", "\n", "nn", ".", "ConvTranspose2d", "(", "opt", ".", "nfeature", ",", "opt", ".", "n_out", ",", "4", ",", "2", ",", "1", ")", "\n", ")", "\n", "\n", "self", ".", "phi_network_conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "opt", ".", "n_out", ",", "opt", ".", "nfeature", ",", "7", ",", "2", ",", "3", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "opt", ".", "nfeature", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "opt", ".", "nfeature", ",", "opt", ".", "nfeature", ",", "5", ",", "2", ",", "2", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "opt", ".", "nfeature", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "opt", ".", "nfeature", ",", "opt", ".", "nfeature", ",", "5", ",", "2", ",", "2", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "opt", ".", "nfeature", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "opt", ".", "nfeature", ",", "opt", ".", "nfeature", ",", "5", ",", "2", ",", "2", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "opt", ".", "nfeature", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "\n", ")", "\n", "self", ".", "phi_network_fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "opt", ".", "nfeature", "*", "opt", ".", "phi_fc_size", ",", "1000", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "1000", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "1000", ",", "1000", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "1000", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "1000", ",", "opt", ".", "n_latent", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", ")", "\n", "\n", "# conditional network", "\n", "self", ".", "f_network_encoder", "=", "nn", ".", "Sequential", "(", "\n", "# layer 1", "\n", "nn", ".", "Conv2d", "(", "opt", ".", "n_in", ",", "opt", ".", "nfeature", ",", "7", ",", "2", ",", "3", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "opt", ".", "nfeature", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "# layer 2 ", "\n", "nn", ".", "Conv2d", "(", "opt", ".", "nfeature", ",", "opt", ".", "nfeature", ",", "5", ",", "2", ",", "2", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "opt", ".", "nfeature", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "# layer 3", "\n", "nn", ".", "Conv2d", "(", "opt", ".", "nfeature", ",", "opt", ".", "nfeature", ",", "5", ",", "2", ",", "2", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "opt", ".", "nfeature", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "\n", ")", "\n", "\n", "self", ".", "encoder_latent", "=", "nn", ".", "Linear", "(", "opt", ".", "n_latent", ",", "opt", ".", "nfeature", ")", "\n", "\n", "self", ".", "f_network_decoder", "=", "nn", ".", "Sequential", "(", "\n", "# layer 1", "\n", "nn", ".", "ConvTranspose2d", "(", "opt", ".", "nfeature", ",", "opt", ".", "nfeature", ",", "k", ",", "2", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "opt", ".", "nfeature", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "# layer 2", "\n", "nn", ".", "ConvTranspose2d", "(", "opt", ".", "nfeature", ",", "opt", ".", "nfeature", ",", "4", ",", "2", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "opt", ".", "nfeature", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "# layer 3", "\n", "nn", ".", "ConvTranspose2d", "(", "opt", ".", "nfeature", ",", "opt", ".", "n_out", ",", "4", ",", "2", ",", "1", ")", "\n", ")", "\n", "self", ".", "intype", "(", "\"gpu\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mbhenaff_EEN.None.models.LatentResidualModel3Layer.forward": [[114, 130], ["input.view.view.view", "target.view.view.view", "models.LatentResidualModel3Layer.g_network_decoder", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "models.LatentResidualModel3Layer.phi_network_fc", "z.view.view.view", "models.LatentResidualModel3Layer.encoder_latent().view", "models.LatentResidualModel3Layer.f_network_encoder", "models.LatentResidualModel3Layer.f_network_decoder", "models.LatentResidualModel3Layer.g_network_encoder", "models.LatentResidualModel3Layer.phi_network_conv().view", "input.view.view.size", "models.LatentResidualModel3Layer.view().expand", "models.LatentResidualModel3Layer.encoder_latent", "models.LatentResidualModel3Layer.size", "models.LatentResidualModel3Layer.phi_network_conv", "models.LatentResidualModel3Layer.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "input", "=", "input", ".", "view", "(", "self", ".", "opt", ".", "batch_size", ",", "self", ".", "opt", ".", "ncond", "*", "self", ".", "opt", ".", "nc", ",", "\n", "self", ".", "opt", ".", "height", ",", "self", ".", "opt", ".", "width", ")", "\n", "target", "=", "target", ".", "view", "(", "self", ".", "opt", ".", "batch_size", ",", "self", ".", "opt", ".", "npred", "*", "self", ".", "opt", ".", "nc", ",", "\n", "self", ".", "opt", ".", "height", ",", "self", ".", "opt", ".", "width", ")", "\n", "g_pred", "=", "self", ".", "g_network_decoder", "(", "self", ".", "g_network_encoder", "(", "input", ")", ")", "\n", "# don't pass gradients to g from phi", "\n", "g_pred_v", "=", "Variable", "(", "g_pred", ".", "data", ")", "\n", "r", "=", "target", "-", "g_pred_v", "\n", "z", "=", "self", ".", "phi_network_fc", "(", "self", ".", "phi_network_conv", "(", "r", ")", ".", "view", "(", "self", ".", "opt", ".", "batch_size", ",", "-", "1", ")", ")", "\n", "z", "=", "z", ".", "view", "(", "self", ".", "opt", ".", "batch_size", ",", "self", ".", "opt", ".", "n_latent", ")", "\n", "z_emb", "=", "self", ".", "encoder_latent", "(", "z", ")", ".", "view", "(", "input", ".", "size", "(", "0", ")", ",", "self", ".", "opt", ".", "nfeature", ")", "\n", "s", "=", "self", ".", "f_network_encoder", "(", "input", ")", "\n", "h", "=", "s", "+", "z_emb", ".", "view", "(", "self", ".", "opt", ".", "batch_size", ",", "self", ".", "opt", ".", "nfeature", ",", "1", ",", "1", ")", ".", "expand", "(", "s", ".", "size", "(", ")", ")", "\n", "pred_f", "=", "self", ".", "f_network_decoder", "(", "h", ")", "\n", "return", "pred_f", ",", "g_pred", ",", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.mbhenaff_EEN.None.models.LatentResidualModel3Layer.decode": [[134, 142], ["input.view.view.view", "models.LatentResidualModel3Layer.encoder_latent().view", "models.LatentResidualModel3Layer.f_network_encoder", "models.LatentResidualModel3Layer.f_network_decoder", "input.view.view.size", "models.LatentResidualModel3Layer.view().expand", "models.LatentResidualModel3Layer.encoder_latent", "models.LatentResidualModel3Layer.size", "models.LatentResidualModel3Layer.view"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "input", ",", "z", ")", ":", "\n", "        ", "input", "=", "input", ".", "view", "(", "self", ".", "opt", ".", "batch_size", ",", "self", ".", "opt", ".", "ncond", "*", "self", ".", "opt", ".", "nc", ",", "\n", "self", ".", "opt", ".", "height", ",", "self", ".", "opt", ".", "width", ")", "\n", "z_emb", "=", "self", ".", "encoder_latent", "(", "z", ")", ".", "view", "(", "input", ".", "size", "(", "0", ")", ",", "self", ".", "opt", ".", "nfeature", ")", "\n", "s", "=", "self", ".", "f_network_encoder", "(", "input", ")", "\n", "h", "=", "s", "+", "z_emb", ".", "view", "(", "self", ".", "opt", ".", "batch_size", ",", "self", ".", "opt", ".", "nfeature", ",", "1", ",", "1", ")", ".", "expand", "(", "s", ".", "size", "(", ")", ")", "\n", "pred", "=", "self", ".", "f_network_decoder", "(", "h", ")", "\n", "return", "pred", "\n", "\n"]], "home.repos.pwc.inspect_result.mbhenaff_EEN.None.models.LatentResidualModel3Layer.intype": [[146, 165], ["models.LatentResidualModel3Layer.f_network_encoder.cuda", "models.LatentResidualModel3Layer.f_network_decoder.cuda", "models.LatentResidualModel3Layer.encoder_latent.cuda", "models.LatentResidualModel3Layer.g_network_encoder.cuda", "models.LatentResidualModel3Layer.g_network_decoder.cuda", "models.LatentResidualModel3Layer.phi_network_conv.cuda", "models.LatentResidualModel3Layer.phi_network_fc.cuda", "models.LatentResidualModel3Layer.f_network_encoder.cpu", "models.LatentResidualModel3Layer.f_network_decoder.cpu", "models.LatentResidualModel3Layer.encoder_latent.cpu", "models.LatentResidualModel3Layer.g_network_encoder.cpu", "models.LatentResidualModel3Layer.g_network_decoder.cpu", "models.LatentResidualModel3Layer.phi_network_conv.cpu", "models.LatentResidualModel3Layer.phi_network_fc.cpu"], "methods", ["None"], ["", "def", "intype", "(", "self", ",", "typ", ")", ":", "\n", "        ", "if", "typ", "==", "\"gpu\"", ":", "\n", "            ", "self", ".", "f_network_encoder", ".", "cuda", "(", ")", "\n", "self", ".", "f_network_decoder", ".", "cuda", "(", ")", "\n", "self", ".", "encoder_latent", ".", "cuda", "(", ")", "\n", "self", ".", "g_network_encoder", ".", "cuda", "(", ")", "\n", "self", ".", "g_network_decoder", ".", "cuda", "(", ")", "\n", "self", ".", "phi_network_conv", ".", "cuda", "(", ")", "\n", "self", ".", "phi_network_fc", ".", "cuda", "(", ")", "\n", "", "elif", "typ", "==", "\"cpu\"", ":", "\n", "            ", "self", ".", "f_network_encoder", ".", "cpu", "(", ")", "\n", "self", ".", "f_network_decoder", ".", "cpu", "(", ")", "\n", "self", ".", "encoder_latent", ".", "cpu", "(", ")", "\n", "self", ".", "g_network_encoder", ".", "cpu", "(", ")", "\n", "self", ".", "g_network_decoder", ".", "cpu", "(", ")", "\n", "self", ".", "phi_network_conv", ".", "cpu", "(", ")", "\n", "self", ".", "phi_network_fc", ".", "cpu", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "\n", "\n"]], "home.repos.pwc.inspect_result.mbhenaff_EEN.None.models.VAE.__init__": [[170, 235], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "models.VAE.intype", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d"], "methods", ["home.repos.pwc.inspect_result.mbhenaff_EEN.dataloaders.data_atari.ImageLoader.__init__", "home.repos.pwc.inspect_result.mbhenaff_EEN.None.models.BaselineModel3Layer.intype"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", "VAE", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "opt", "=", "opt", "\n", "k", "=", "4", "\n", "if", "opt", ".", "task", "==", "'breakout'", "or", "opt", ".", "task", "==", "'seaquest'", ":", "\n", "# need this for output to be the right size", "\n", "            ", "k", "=", "3", "\n", "\n", "", "self", ".", "q_network_conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "opt", ".", "n_out", ",", "opt", ".", "nfeature", ",", "7", ",", "2", ",", "3", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "opt", ".", "nfeature", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "opt", ".", "nfeature", ",", "opt", ".", "nfeature", ",", "5", ",", "2", ",", "2", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "opt", ".", "nfeature", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "opt", ".", "nfeature", ",", "opt", ".", "nfeature", ",", "5", ",", "2", ",", "2", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "opt", ".", "nfeature", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "opt", ".", "nfeature", ",", "opt", ".", "nfeature", ",", "5", ",", "2", ",", "2", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "opt", ".", "nfeature", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "\n", ")", "\n", "self", ".", "q_network_fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "opt", ".", "nfeature", "*", "opt", ".", "phi_fc_size", ",", "1000", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "1000", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "1000", ",", "1000", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "1000", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "1000", ",", "1000", ")", "\n", ")", "\n", "self", ".", "mu_layer", "=", "nn", ".", "Linear", "(", "1000", ",", "opt", ".", "n_latent", ")", "\n", "self", ".", "logvar_layer", "=", "nn", ".", "Linear", "(", "1000", ",", "opt", ".", "n_latent", ")", "\n", "\n", "# conditional network", "\n", "self", ".", "f_network_encoder", "=", "nn", ".", "Sequential", "(", "\n", "# layer 1", "\n", "nn", ".", "Conv2d", "(", "opt", ".", "n_in", ",", "opt", ".", "nfeature", ",", "7", ",", "2", ",", "3", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "opt", ".", "nfeature", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "# layer 2 ", "\n", "nn", ".", "Conv2d", "(", "opt", ".", "nfeature", ",", "opt", ".", "nfeature", ",", "5", ",", "2", ",", "2", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "opt", ".", "nfeature", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "# layer 3", "\n", "nn", ".", "Conv2d", "(", "opt", ".", "nfeature", ",", "opt", ".", "nfeature", ",", "5", ",", "2", ",", "2", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "opt", ".", "nfeature", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "\n", ")", "\n", "\n", "self", ".", "encoder_latent", "=", "nn", ".", "Linear", "(", "opt", ".", "n_latent", ",", "opt", ".", "nfeature", ")", "\n", "\n", "self", ".", "f_network_decoder", "=", "nn", ".", "Sequential", "(", "\n", "# layer 1", "\n", "nn", ".", "ConvTranspose2d", "(", "opt", ".", "nfeature", ",", "opt", ".", "nfeature", ",", "k", ",", "2", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "opt", ".", "nfeature", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "# layer 2", "\n", "nn", ".", "ConvTranspose2d", "(", "opt", ".", "nfeature", ",", "opt", ".", "nfeature", ",", "4", ",", "2", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "opt", ".", "nfeature", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "# layer 3", "\n", "nn", ".", "ConvTranspose2d", "(", "opt", ".", "nfeature", ",", "opt", ".", "n_out", ",", "4", ",", "2", ",", "1", ")", "\n", ")", "\n", "self", ".", "intype", "(", "\"gpu\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mbhenaff_EEN.None.models.VAE.encode": [[236, 242], ["models.VAE.q_network_fc", "q.view.view.view", "models.VAE.mu_layer", "models.VAE.logvar_layer", "models.VAE.q_network_conv().view", "models.VAE.q_network_conv"], "methods", ["None"], ["", "def", "encode", "(", "self", ",", "x", ")", ":", "\n", "        ", "q", "=", "self", ".", "q_network_fc", "(", "self", ".", "q_network_conv", "(", "x", ")", ".", "view", "(", "self", ".", "opt", ".", "batch_size", ",", "-", "1", ")", ")", "\n", "q", "=", "q", ".", "view", "(", "self", ".", "opt", ".", "batch_size", ",", "-", "1", ")", "\n", "mu", "=", "self", ".", "mu_layer", "(", "q", ")", "\n", "logvar", "=", "self", ".", "logvar_layer", "(", "q", ")", "\n", "return", "mu", ",", "logvar", "\n", "\n"]], "home.repos.pwc.inspect_result.mbhenaff_EEN.None.models.VAE.reparamaterize": [[243, 250], ["logvar.mul().exp_", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable.mul().add_", "torch.autograd.Variable.mul().add_", "torch.autograd.Variable.mul().add_", "torch.autograd.Variable.mul().add_", "logvar.mul().exp_.data.new().normal_", "logvar.mul", "torch.autograd.Variable.mul", "torch.autograd.Variable.mul", "torch.autograd.Variable.mul", "torch.autograd.Variable.mul", "logvar.mul().exp_.data.new", "logvar.mul().exp_.size"], "methods", ["None"], ["", "def", "reparamaterize", "(", "self", ",", "mu", ",", "logvar", ")", ":", "\n", "      ", "if", "self", ".", "training", ":", "\n", "          ", "std", "=", "logvar", ".", "mul", "(", "0.5", ")", ".", "exp_", "(", ")", "\n", "eps", "=", "Variable", "(", "std", ".", "data", ".", "new", "(", "std", ".", "size", "(", ")", ")", ".", "normal_", "(", ")", ")", "\n", "return", "eps", ".", "mul", "(", "std", ")", ".", "add_", "(", "mu", ")", "\n", "", "else", ":", "\n", "          ", "return", "mu", "\n", "\n"]], "home.repos.pwc.inspect_result.mbhenaff_EEN.None.models.VAE.forward": [[253, 266], ["input.view.view.view", "target.view.view.view", "models.VAE.encode", "models.VAE.reparamaterize", "models.VAE.encoder_latent().view", "models.VAE.f_network_encoder", "models.VAE.f_network_decoder", "input.view.view.size", "models.VAE.view().expand", "models.VAE.encoder_latent", "models.VAE.size", "models.VAE.view"], "methods", ["home.repos.pwc.inspect_result.mbhenaff_EEN.None.models.VAE2.encode", "home.repos.pwc.inspect_result.mbhenaff_EEN.None.models.VAE2.reparamaterize"], ["", "", "def", "forward", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "input", "=", "input", ".", "view", "(", "self", ".", "opt", ".", "batch_size", ",", "self", ".", "opt", ".", "ncond", "*", "self", ".", "opt", ".", "nc", ",", "\n", "self", ".", "opt", ".", "height", ",", "self", ".", "opt", ".", "width", ")", "\n", "target", "=", "target", ".", "view", "(", "self", ".", "opt", ".", "batch_size", ",", "self", ".", "opt", ".", "npred", "*", "self", ".", "opt", ".", "nc", ",", "\n", "self", ".", "opt", ".", "height", ",", "self", ".", "opt", ".", "width", ")", "\n", "\n", "mu", ",", "logvar", "=", "self", ".", "encode", "(", "target", ")", "\n", "z", "=", "self", ".", "reparamaterize", "(", "mu", ",", "logvar", ")", "\n", "z_emb", "=", "self", ".", "encoder_latent", "(", "z", ")", ".", "view", "(", "input", ".", "size", "(", "0", ")", ",", "self", ".", "opt", ".", "nfeature", ")", "\n", "s", "=", "self", ".", "f_network_encoder", "(", "input", ")", "\n", "h", "=", "s", "+", "z_emb", ".", "view", "(", "self", ".", "opt", ".", "batch_size", ",", "self", ".", "opt", ".", "nfeature", ",", "1", ",", "1", ")", ".", "expand", "(", "s", ".", "size", "(", ")", ")", "\n", "pred_f", "=", "self", ".", "f_network_decoder", "(", "h", ")", "\n", "return", "pred_f", ",", "mu", ",", "logvar", "\n", "\n"]], "home.repos.pwc.inspect_result.mbhenaff_EEN.None.models.VAE.decode": [[270, 278], ["input.view.view.view", "models.VAE.encoder_latent().view", "models.VAE.f_network_encoder", "models.VAE.f_network_decoder", "input.view.view.size", "models.VAE.view().expand", "models.VAE.encoder_latent", "models.VAE.size", "models.VAE.view"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "input", ",", "z", ")", ":", "\n", "        ", "input", "=", "input", ".", "view", "(", "self", ".", "opt", ".", "batch_size", ",", "self", ".", "opt", ".", "ncond", "*", "self", ".", "opt", ".", "nc", ",", "\n", "self", ".", "opt", ".", "height", ",", "self", ".", "opt", ".", "width", ")", "\n", "z_emb", "=", "self", ".", "encoder_latent", "(", "z", ")", ".", "view", "(", "input", ".", "size", "(", "0", ")", ",", "self", ".", "opt", ".", "nfeature", ")", "\n", "s", "=", "self", ".", "f_network_encoder", "(", "input", ")", "\n", "h", "=", "s", "+", "z_emb", ".", "view", "(", "self", ".", "opt", ".", "batch_size", ",", "self", ".", "opt", ".", "nfeature", ",", "1", ",", "1", ")", ".", "expand", "(", "s", ".", "size", "(", ")", ")", "\n", "pred", "=", "self", ".", "f_network_decoder", "(", "h", ")", "\n", "return", "pred", "\n", "\n"]], "home.repos.pwc.inspect_result.mbhenaff_EEN.None.models.VAE.intype": [[282, 301], ["models.VAE.f_network_encoder.cuda", "models.VAE.f_network_decoder.cuda", "models.VAE.encoder_latent.cuda", "models.VAE.q_network_conv.cuda", "models.VAE.q_network_fc.cuda", "models.VAE.mu_layer.cuda", "models.VAE.logvar_layer.cuda", "models.VAE.f_network_encoder.cpu", "models.VAE.f_network_decoder.cpu", "models.VAE.encoder_latent.cpu", "models.VAE.q_network_conv.cpu", "models.VAE.q_network_fc.cpu", "models.VAE.mu_layer.cpu", "models.VAE.logvar_layer.cpu"], "methods", ["None"], ["", "def", "intype", "(", "self", ",", "typ", ")", ":", "\n", "        ", "if", "typ", "==", "\"gpu\"", ":", "\n", "            ", "self", ".", "f_network_encoder", ".", "cuda", "(", ")", "\n", "self", ".", "f_network_decoder", ".", "cuda", "(", ")", "\n", "self", ".", "encoder_latent", ".", "cuda", "(", ")", "\n", "self", ".", "q_network_conv", ".", "cuda", "(", ")", "\n", "self", ".", "q_network_fc", ".", "cuda", "(", ")", "\n", "self", ".", "mu_layer", ".", "cuda", "(", ")", "\n", "self", ".", "logvar_layer", ".", "cuda", "(", ")", "\n", "", "elif", "typ", "==", "\"cpu\"", ":", "\n", "            ", "self", ".", "f_network_encoder", ".", "cpu", "(", ")", "\n", "self", ".", "f_network_decoder", ".", "cpu", "(", ")", "\n", "self", ".", "encoder_latent", ".", "cpu", "(", ")", "\n", "self", ".", "q_network_conv", ".", "cpu", "(", ")", "\n", "self", ".", "q_network_fc", ".", "cpu", "(", ")", "\n", "self", ".", "mu_layer", ".", "cpu", "(", ")", "\n", "self", ".", "logvar_layer", ".", "cpu", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "\n", "\n"]], "home.repos.pwc.inspect_result.mbhenaff_EEN.None.models.VAE2.__init__": [[307, 372], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "models.VAE2.intype", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d"], "methods", ["home.repos.pwc.inspect_result.mbhenaff_EEN.dataloaders.data_atari.ImageLoader.__init__", "home.repos.pwc.inspect_result.mbhenaff_EEN.None.models.BaselineModel3Layer.intype"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", "VAE2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "opt", "=", "opt", "\n", "k", "=", "4", "\n", "if", "opt", ".", "task", "==", "'breakout'", "or", "opt", ".", "task", "==", "'seaquest'", ":", "\n", "# need this for output to be the right size", "\n", "            ", "k", "=", "3", "\n", "\n", "", "self", ".", "q_network_conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "opt", ".", "n_in", "+", "opt", ".", "n_out", ",", "opt", ".", "nfeature", ",", "7", ",", "2", ",", "3", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "opt", ".", "nfeature", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "opt", ".", "nfeature", ",", "opt", ".", "nfeature", ",", "5", ",", "2", ",", "2", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "opt", ".", "nfeature", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "opt", ".", "nfeature", ",", "opt", ".", "nfeature", ",", "5", ",", "2", ",", "2", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "opt", ".", "nfeature", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "opt", ".", "nfeature", ",", "opt", ".", "nfeature", ",", "5", ",", "2", ",", "2", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "opt", ".", "nfeature", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "\n", ")", "\n", "self", ".", "q_network_fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "opt", ".", "nfeature", "*", "opt", ".", "phi_fc_size", ",", "1000", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "1000", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "1000", ",", "1000", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "1000", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "1000", ",", "1000", ")", "\n", ")", "\n", "self", ".", "mu_layer", "=", "nn", ".", "Linear", "(", "1000", ",", "opt", ".", "n_latent", ")", "\n", "self", ".", "logvar_layer", "=", "nn", ".", "Linear", "(", "1000", ",", "opt", ".", "n_latent", ")", "\n", "\n", "# conditional network", "\n", "self", ".", "f_network_encoder", "=", "nn", ".", "Sequential", "(", "\n", "# layer 1", "\n", "nn", ".", "Conv2d", "(", "opt", ".", "n_in", ",", "opt", ".", "nfeature", ",", "7", ",", "2", ",", "3", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "opt", ".", "nfeature", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "# layer 2 ", "\n", "nn", ".", "Conv2d", "(", "opt", ".", "nfeature", ",", "opt", ".", "nfeature", ",", "5", ",", "2", ",", "2", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "opt", ".", "nfeature", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "# layer 3", "\n", "nn", ".", "Conv2d", "(", "opt", ".", "nfeature", ",", "opt", ".", "nfeature", ",", "5", ",", "2", ",", "2", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "opt", ".", "nfeature", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "\n", ")", "\n", "\n", "self", ".", "encoder_latent", "=", "nn", ".", "Linear", "(", "opt", ".", "n_latent", ",", "opt", ".", "nfeature", ")", "\n", "\n", "self", ".", "f_network_decoder", "=", "nn", ".", "Sequential", "(", "\n", "# layer 1", "\n", "nn", ".", "ConvTranspose2d", "(", "opt", ".", "nfeature", ",", "opt", ".", "nfeature", ",", "k", ",", "2", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "opt", ".", "nfeature", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "# layer 2", "\n", "nn", ".", "ConvTranspose2d", "(", "opt", ".", "nfeature", ",", "opt", ".", "nfeature", ",", "4", ",", "2", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "opt", ".", "nfeature", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "# layer 3", "\n", "nn", ".", "ConvTranspose2d", "(", "opt", ".", "nfeature", ",", "opt", ".", "n_out", ",", "4", ",", "2", ",", "1", ")", "\n", ")", "\n", "self", ".", "intype", "(", "\"gpu\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mbhenaff_EEN.None.models.VAE2.encode": [[373, 379], ["models.VAE2.q_network_fc", "q.view.view.view", "models.VAE2.mu_layer", "models.VAE2.logvar_layer", "models.VAE2.q_network_conv().view", "models.VAE2.q_network_conv"], "methods", ["None"], ["", "def", "encode", "(", "self", ",", "x", ")", ":", "\n", "        ", "q", "=", "self", ".", "q_network_fc", "(", "self", ".", "q_network_conv", "(", "x", ")", ".", "view", "(", "self", ".", "opt", ".", "batch_size", ",", "-", "1", ")", ")", "\n", "q", "=", "q", ".", "view", "(", "self", ".", "opt", ".", "batch_size", ",", "-", "1", ")", "\n", "mu", "=", "self", ".", "mu_layer", "(", "q", ")", "\n", "logvar", "=", "self", ".", "logvar_layer", "(", "q", ")", "\n", "return", "mu", ",", "logvar", "\n", "\n"]], "home.repos.pwc.inspect_result.mbhenaff_EEN.None.models.VAE2.reparamaterize": [[380, 387], ["logvar.mul().exp_", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable.mul().add_", "torch.autograd.Variable.mul().add_", "torch.autograd.Variable.mul().add_", "torch.autograd.Variable.mul().add_", "logvar.mul().exp_.data.new().normal_", "logvar.mul", "torch.autograd.Variable.mul", "torch.autograd.Variable.mul", "torch.autograd.Variable.mul", "torch.autograd.Variable.mul", "logvar.mul().exp_.data.new", "logvar.mul().exp_.size"], "methods", ["None"], ["", "def", "reparamaterize", "(", "self", ",", "mu", ",", "logvar", ")", ":", "\n", "      ", "if", "self", ".", "training", ":", "\n", "          ", "std", "=", "logvar", ".", "mul", "(", "0.5", ")", ".", "exp_", "(", ")", "\n", "eps", "=", "Variable", "(", "std", ".", "data", ".", "new", "(", "std", ".", "size", "(", ")", ")", ".", "normal_", "(", ")", ")", "\n", "return", "eps", ".", "mul", "(", "std", ")", ".", "add_", "(", "mu", ")", "\n", "", "else", ":", "\n", "          ", "return", "mu", "\n", "\n"]], "home.repos.pwc.inspect_result.mbhenaff_EEN.None.models.VAE2.forward": [[390, 403], ["input.view.view.view", "target.view.view.view", "models.VAE2.encode", "models.VAE2.reparamaterize", "models.VAE2.encoder_latent().view", "models.VAE2.f_network_encoder", "models.VAE2.f_network_decoder", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "input.view.view.size", "models.VAE2.view().expand", "models.VAE2.encoder_latent", "models.VAE2.size", "models.VAE2.view"], "methods", ["home.repos.pwc.inspect_result.mbhenaff_EEN.None.models.VAE2.encode", "home.repos.pwc.inspect_result.mbhenaff_EEN.None.models.VAE2.reparamaterize"], ["", "", "def", "forward", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "input", "=", "input", ".", "view", "(", "self", ".", "opt", ".", "batch_size", ",", "self", ".", "opt", ".", "ncond", "*", "self", ".", "opt", ".", "nc", ",", "\n", "self", ".", "opt", ".", "height", ",", "self", ".", "opt", ".", "width", ")", "\n", "target", "=", "target", ".", "view", "(", "self", ".", "opt", ".", "batch_size", ",", "self", ".", "opt", ".", "npred", "*", "self", ".", "opt", ".", "nc", ",", "\n", "self", ".", "opt", ".", "height", ",", "self", ".", "opt", ".", "width", ")", "\n", "\n", "mu", ",", "logvar", "=", "self", ".", "encode", "(", "torch", ".", "cat", "(", "(", "input", ",", "target", ")", ",", "1", ")", ")", "\n", "z", "=", "self", ".", "reparamaterize", "(", "mu", ",", "logvar", ")", "\n", "z_emb", "=", "self", ".", "encoder_latent", "(", "z", ")", ".", "view", "(", "input", ".", "size", "(", "0", ")", ",", "self", ".", "opt", ".", "nfeature", ")", "\n", "s", "=", "self", ".", "f_network_encoder", "(", "input", ")", "\n", "h", "=", "s", "+", "z_emb", ".", "view", "(", "self", ".", "opt", ".", "batch_size", ",", "self", ".", "opt", ".", "nfeature", ",", "1", ",", "1", ")", ".", "expand", "(", "s", ".", "size", "(", ")", ")", "\n", "pred_f", "=", "self", ".", "f_network_decoder", "(", "h", ")", "\n", "return", "pred_f", ",", "mu", ",", "logvar", "\n", "\n"]], "home.repos.pwc.inspect_result.mbhenaff_EEN.None.models.VAE2.decode": [[407, 415], ["input.view.view.view", "models.VAE2.encoder_latent().view", "models.VAE2.f_network_encoder", "models.VAE2.f_network_decoder", "input.view.view.size", "models.VAE2.view().expand", "models.VAE2.encoder_latent", "models.VAE2.size", "models.VAE2.view"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "input", ",", "z", ")", ":", "\n", "        ", "input", "=", "input", ".", "view", "(", "self", ".", "opt", ".", "batch_size", ",", "self", ".", "opt", ".", "ncond", "*", "self", ".", "opt", ".", "nc", ",", "\n", "self", ".", "opt", ".", "height", ",", "self", ".", "opt", ".", "width", ")", "\n", "z_emb", "=", "self", ".", "encoder_latent", "(", "z", ")", ".", "view", "(", "input", ".", "size", "(", "0", ")", ",", "self", ".", "opt", ".", "nfeature", ")", "\n", "s", "=", "self", ".", "f_network_encoder", "(", "input", ")", "\n", "h", "=", "s", "+", "z_emb", ".", "view", "(", "self", ".", "opt", ".", "batch_size", ",", "self", ".", "opt", ".", "nfeature", ",", "1", ",", "1", ")", ".", "expand", "(", "s", ".", "size", "(", ")", ")", "\n", "pred", "=", "self", ".", "f_network_decoder", "(", "h", ")", "\n", "return", "pred", "\n", "\n"]], "home.repos.pwc.inspect_result.mbhenaff_EEN.None.models.VAE2.intype": [[419, 438], ["models.VAE2.f_network_encoder.cuda", "models.VAE2.f_network_decoder.cuda", "models.VAE2.encoder_latent.cuda", "models.VAE2.q_network_conv.cuda", "models.VAE2.q_network_fc.cuda", "models.VAE2.mu_layer.cuda", "models.VAE2.logvar_layer.cuda", "models.VAE2.f_network_encoder.cpu", "models.VAE2.f_network_decoder.cpu", "models.VAE2.encoder_latent.cpu", "models.VAE2.q_network_conv.cpu", "models.VAE2.q_network_fc.cpu", "models.VAE2.mu_layer.cpu", "models.VAE2.logvar_layer.cpu"], "methods", ["None"], ["", "def", "intype", "(", "self", ",", "typ", ")", ":", "\n", "        ", "if", "typ", "==", "\"gpu\"", ":", "\n", "            ", "self", ".", "f_network_encoder", ".", "cuda", "(", ")", "\n", "self", ".", "f_network_decoder", ".", "cuda", "(", ")", "\n", "self", ".", "encoder_latent", ".", "cuda", "(", ")", "\n", "self", ".", "q_network_conv", ".", "cuda", "(", ")", "\n", "self", ".", "q_network_fc", ".", "cuda", "(", ")", "\n", "self", ".", "mu_layer", ".", "cuda", "(", ")", "\n", "self", ".", "logvar_layer", ".", "cuda", "(", ")", "\n", "", "elif", "typ", "==", "\"cpu\"", ":", "\n", "            ", "self", ".", "f_network_encoder", ".", "cpu", "(", ")", "\n", "self", ".", "f_network_decoder", ".", "cpu", "(", ")", "\n", "self", ".", "encoder_latent", ".", "cpu", "(", ")", "\n", "self", ".", "q_network_conv", ".", "cpu", "(", ")", "\n", "self", ".", "q_network_fc", ".", "cpu", "(", ")", "\n", "self", ".", "mu_layer", ".", "cpu", "(", ")", "\n", "self", ".", "logvar_layer", ".", "cpu", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "\n", "\n"]], "home.repos.pwc.inspect_result.mbhenaff_EEN.None.models.BaselineModel3Layer.__init__": [[442, 480], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "models.BaselineModel3Layer.intype", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d"], "methods", ["home.repos.pwc.inspect_result.mbhenaff_EEN.dataloaders.data_atari.ImageLoader.__init__", "home.repos.pwc.inspect_result.mbhenaff_EEN.None.models.BaselineModel3Layer.intype"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", "BaselineModel3Layer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "opt", "=", "opt", "\n", "\n", "# deterministic network", "\n", "self", ".", "f_network_encoder", "=", "nn", ".", "Sequential", "(", "\n", "# layer 1", "\n", "nn", ".", "Conv2d", "(", "opt", ".", "n_in", ",", "opt", ".", "nfeature", ",", "7", ",", "2", ",", "3", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "opt", ".", "nfeature", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "# layer 2", "\n", "nn", ".", "Conv2d", "(", "opt", ".", "nfeature", ",", "opt", ".", "nfeature", ",", "5", ",", "2", ",", "2", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "opt", ".", "nfeature", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "# layer 3", "\n", "nn", ".", "Conv2d", "(", "opt", ".", "nfeature", ",", "opt", ".", "nfeature", ",", "5", ",", "2", ",", "2", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "opt", ".", "nfeature", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "\n", ")", "\n", "\n", "k", "=", "4", "\n", "if", "opt", ".", "task", "==", "'breakout'", "or", "opt", ".", "task", "==", "'seaquest'", ":", "\n", "# need this for output to be the right size", "\n", "            ", "k", "=", "3", "\n", "\n", "", "self", ".", "f_network_decoder", "=", "nn", ".", "Sequential", "(", "\n", "# layer 4", "\n", "nn", ".", "ConvTranspose2d", "(", "opt", ".", "nfeature", ",", "opt", ".", "nfeature", ",", "k", ",", "2", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "opt", ".", "nfeature", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "# layer 5", "\n", "nn", ".", "ConvTranspose2d", "(", "opt", ".", "nfeature", ",", "opt", ".", "nfeature", ",", "4", ",", "2", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "opt", ".", "nfeature", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "# layer 6", "\n", "nn", ".", "ConvTranspose2d", "(", "opt", ".", "nfeature", ",", "opt", ".", "n_out", ",", "4", ",", "2", ",", "1", ")", "\n", ")", "\n", "self", ".", "intype", "(", "\"gpu\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mbhenaff_EEN.None.models.BaselineModel3Layer.forward": [[483, 488], ["input.view.view.view", "models.BaselineModel3Layer.f_network_encoder", "models.BaselineModel3Layer.f_network_decoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "input", "=", "input", ".", "view", "(", "self", ".", "opt", ".", "batch_size", ",", "self", ".", "opt", ".", "n_in", ",", "self", ".", "opt", ".", "height", ",", "self", ".", "opt", ".", "width", ")", "\n", "h", "=", "self", ".", "f_network_encoder", "(", "input", ")", "\n", "pred", "=", "self", ".", "f_network_decoder", "(", "h", ")", "\n", "return", "pred", "\n", "\n"]], "home.repos.pwc.inspect_result.mbhenaff_EEN.None.models.BaselineModel3Layer.intype": [[489, 498], ["models.BaselineModel3Layer.f_network_encoder.cuda", "models.BaselineModel3Layer.f_network_decoder.cuda", "models.BaselineModel3Layer.f_network_encoder.cpu", "models.BaselineModel3Layer.f_network_decoder.cpu"], "methods", ["None"], ["", "def", "intype", "(", "self", ",", "typ", ")", ":", "\n", "        ", "if", "typ", "==", "\"gpu\"", ":", "\n", "            ", "self", ".", "f_network_encoder", ".", "cuda", "(", ")", "\n", "self", ".", "f_network_decoder", ".", "cuda", "(", ")", "\n", "", "elif", "typ", "==", "\"cpu\"", ":", "\n", "            ", "self", ".", "f_network_encoder", ".", "cpu", "(", ")", "\n", "self", ".", "f_network_decoder", ".", "cpu", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "\n", "\n"]], "home.repos.pwc.inspect_result.mbhenaff_EEN.None.train_een_latent.train_epoch": [[55, 74], ["model.train", "range", "optimizer.zero_grad", "model.zero_grad", "dataloader.get_batch", "torch.autograd.Variable", "torch.autograd.Variable", "model", "criterion_f", "criterion_f.backward", "criterion_g", "optimizer.step"], "function", ["home.repos.pwc.inspect_result.mbhenaff_EEN.None.train_een_deterministic.train", "home.repos.pwc.inspect_result.mbhenaff_EEN.dataloaders.data_atari.ImageLoader.get_batch"], ["def", "train_epoch", "(", "nsteps", ")", ":", "\n", "    ", "total_loss_f", ",", "total_loss_g", "=", "0", ",", "0", "\n", "model", ".", "train", "(", ")", "\n", "for", "iter", "in", "range", "(", "0", ",", "nsteps", ")", ":", "\n", "        ", "optimizer", ".", "zero_grad", "(", ")", "\n", "model", ".", "zero_grad", "(", ")", "\n", "cond", ",", "target", ",", "action", "=", "dataloader", ".", "get_batch", "(", "'train'", ")", "\n", "vcond", "=", "Variable", "(", "cond", ")", "\n", "vtarget", "=", "Variable", "(", "target", ")", "\n", "# forward", "\n", "pred_f", ",", "pred_g", ",", "z", "=", "model", "(", "vcond", ",", "vtarget", ")", "\n", "loss_f", "=", "criterion_f", "(", "pred_f", ",", "vtarget", ")", "\n", "total_loss_f", "+=", "loss_f", ".", "data", "[", "0", "]", "\n", "loss_f", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "loss_g", "=", "criterion_g", "(", "pred_g", ",", "vtarget", ")", "\n", "total_loss_g", "+=", "loss_g", ".", "data", "[", "0", "]", "\n", "# optimize", "\n", "optimizer", ".", "step", "(", ")", "\n", "", "return", "total_loss_f", "/", "nsteps", ",", "total_loss_g", "/", "nsteps", "\n", "\n"]], "home.repos.pwc.inspect_result.mbhenaff_EEN.None.train_een_latent.test_epoch": [[76, 91], ["model.eval", "range", "dataloader.get_batch", "torch.autograd.Variable", "torch.autograd.Variable", "model", "criterion_f", "criterion_g"], "function", ["home.repos.pwc.inspect_result.mbhenaff_EEN.dataloaders.data_atari.ImageLoader.get_batch"], ["", "def", "test_epoch", "(", "nsteps", ")", ":", "\n", "    ", "total_loss_f", ",", "total_loss_g", "=", "0", ",", "0", "\n", "model", ".", "eval", "(", ")", "\n", "for", "iter", "in", "range", "(", "0", ",", "nsteps", ")", ":", "\n", "        ", "cond", ",", "target", ",", "action", "=", "dataloader", ".", "get_batch", "(", "'valid'", ")", "\n", "vcond", "=", "Variable", "(", "cond", ")", "\n", "vtarget", "=", "Variable", "(", "target", ")", "\n", "pred_f", ",", "pred_g", ",", "z", "=", "model", "(", "vcond", ",", "vtarget", ")", "\n", "loss_f", "=", "criterion_f", "(", "pred_f", ",", "vtarget", ")", "\n", "total_loss_f", "+=", "loss_f", ".", "data", "[", "0", "]", "\n", "loss_g", "=", "criterion_g", "(", "pred_g", ",", "vtarget", ")", "\n", "total_loss_g", "+=", "loss_g", ".", "data", "[", "0", "]", "\n", "\n", "\n", "", "return", "total_loss_f", "/", "nsteps", ",", "total_loss_g", "/", "nsteps", "\n", "\n"]], "home.repos.pwc.inspect_result.mbhenaff_EEN.None.train_een_latent.train": [[92, 120], ["os.system", "range", "train_een_latent.train_epoch", "train_loss_f.append", "train_loss_g.append", "train_een_latent.test_epoch", "valid_loss_f.append", "valid_loss_g.append", "print", "utils.log", "int", "model.intype", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "model.intype"], "function", ["home.repos.pwc.inspect_result.mbhenaff_EEN.None.train_een_deterministic.train_epoch", "home.repos.pwc.inspect_result.mbhenaff_EEN.None.train_een_deterministic.test_epoch", "home.repos.pwc.inspect_result.mbhenaff_EEN.None.utils.log", "home.repos.pwc.inspect_result.mbhenaff_EEN.None.models.BaselineModel3Layer.intype", "home.repos.pwc.inspect_result.mbhenaff_EEN.None.models.BaselineModel3Layer.intype"], ["", "def", "train", "(", "n_epochs", ")", ":", "\n", "# prepare for saving ", "\n", "    ", "os", ".", "system", "(", "\"mkdir -p \"", "+", "opt", ".", "save_dir", ")", "\n", "# training", "\n", "best_valid_loss_f", "=", "1e6", "\n", "train_loss_f", ",", "train_loss_g", "=", "[", "]", ",", "[", "]", "\n", "valid_loss_f", ",", "valid_loss_g", "=", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "n_epochs", ")", ":", "\n", "        ", "train_loss_epoch_f", ",", "train_loss_epoch_g", "=", "train_epoch", "(", "opt", ".", "epoch_size", ")", "\n", "train_loss_f", ".", "append", "(", "train_loss_epoch_f", ")", "\n", "train_loss_g", ".", "append", "(", "train_loss_epoch_g", ")", "\n", "valid_loss_epoch_f", ",", "valid_loss_epoch_g", "=", "test_epoch", "(", "int", "(", "opt", ".", "epoch_size", "/", "5", ")", ")", "\n", "valid_loss_f", ".", "append", "(", "valid_loss_epoch_f", ")", "\n", "valid_loss_g", ".", "append", "(", "valid_loss_epoch_g", ")", "\n", "\n", "if", "valid_loss_f", "[", "-", "1", "]", "<", "best_valid_loss_f", ":", "\n", "            ", "best_valid_loss_f", "=", "valid_loss_f", "[", "-", "1", "]", "\n", "# save the whole model", "\n", "model", ".", "intype", "(", "\"cpu\"", ")", "\n", "torch", ".", "save", "(", "{", "'i'", ":", "i", ",", "'model'", ":", "model", ",", "'train_loss_f'", ":", "train_loss_f", ",", "'train_loss_g'", ":", "train_loss_g", ",", "'valid_loss_f'", ":", "valid_loss_f", ",", "'valid_loss_g'", ":", "valid_loss_g", "}", ",", "\n", "opt", ".", "model_filename", "+", "'.model'", ")", "\n", "torch", ".", "save", "(", "optimizer", ",", "opt", ".", "model_filename", "+", "'.optim'", ")", "\n", "model", ".", "intype", "(", "\"gpu\"", ")", "\n", "\n", "", "log_string", "=", "(", "'iter: {:d}, train_loss_f: {:0.6f}, train_loss_g: {:0.6f}, valid_loss_f: {:0.6f}, valid_loss_g: {:0.6f}, best_valid_loss_f: {:0.6f}, lr: {:0.5f}'", ")", ".", "format", "(", "\n", "(", "i", "+", "1", ")", "*", "opt", ".", "epoch_size", ",", "train_loss_f", "[", "-", "1", "]", ",", "train_loss_g", "[", "-", "1", "]", ",", "valid_loss_f", "[", "-", "1", "]", ",", "valid_loss_g", "[", "-", "1", "]", ",", "best_valid_loss_f", ",", "opt", ".", "lrt", ")", "\n", "print", "(", "log_string", ")", "\n", "utils", ".", "log", "(", "opt", ".", "model_filename", "+", "'.log'", ",", "log_string", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mbhenaff_EEN.None.train_vae.train_epoch": [[60, 80], ["model.train", "range", "optimizer.zero_grad", "model.zero_grad", "dataloader.get_batch", "torch.autograd.Variable", "torch.autograd.Variable", "model", "criterion_f", "criterion_f.backward", "optimizer.step", "torch.sum", "torch.sum", "torch.sum", "logvar.exp", "mu.pow"], "function", ["home.repos.pwc.inspect_result.mbhenaff_EEN.None.train_een_deterministic.train", "home.repos.pwc.inspect_result.mbhenaff_EEN.dataloaders.data_atari.ImageLoader.get_batch"], ["def", "train_epoch", "(", "nsteps", ")", ":", "\n", "    ", "total_loss_f", ",", "total_loss_kl", "=", "0", ",", "0", "\n", "model", ".", "train", "(", ")", "\n", "for", "iter", "in", "range", "(", "0", ",", "nsteps", ")", ":", "\n", "        ", "optimizer", ".", "zero_grad", "(", ")", "\n", "model", ".", "zero_grad", "(", ")", "\n", "cond", ",", "target", ",", "action", "=", "dataloader", ".", "get_batch", "(", "'train'", ")", "\n", "vcond", "=", "Variable", "(", "cond", ")", "\n", "vtarget", "=", "Variable", "(", "target", ")", "\n", "# forward", "\n", "pred_f", ",", "mu", ",", "logvar", "=", "model", "(", "vcond", ",", "vtarget", ")", "\n", "loss_f", "=", "criterion_f", "(", "pred_f", ",", "vtarget", ")", "\n", "total_loss_f", "+=", "loss_f", ".", "data", "[", "0", "]", "\n", "loss_f", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "loss_kl", "=", "-", "0.5", "*", "torch", ".", "sum", "(", "1", "+", "logvar", "-", "mu", ".", "pow", "(", "2", ")", "-", "logvar", ".", "exp", "(", ")", ")", "\n", "loss_kl", "/=", "opt", ".", "batch_size", "\n", "total_loss_kl", "+=", "loss_kl", ".", "data", "[", "0", "]", "\n", "# optimize", "\n", "optimizer", ".", "step", "(", ")", "\n", "", "return", "total_loss_f", "/", "nsteps", ",", "total_loss_kl", "/", "nsteps", "\n", "\n"]], "home.repos.pwc.inspect_result.mbhenaff_EEN.None.train_vae.test_epoch": [[82, 96], ["model.eval", "range", "dataloader.get_batch", "torch.autograd.Variable", "torch.autograd.Variable", "model", "criterion_f", "torch.sum", "torch.sum", "torch.sum", "logvar.exp", "mu.pow"], "function", ["home.repos.pwc.inspect_result.mbhenaff_EEN.dataloaders.data_atari.ImageLoader.get_batch"], ["", "def", "test_epoch", "(", "nsteps", ")", ":", "\n", "    ", "total_loss_f", ",", "total_loss_kl", "=", "0", ",", "0", "\n", "model", ".", "eval", "(", ")", "\n", "for", "iter", "in", "range", "(", "0", ",", "nsteps", ")", ":", "\n", "        ", "cond", ",", "target", ",", "action", "=", "dataloader", ".", "get_batch", "(", "'valid'", ")", "\n", "vcond", "=", "Variable", "(", "cond", ")", "\n", "vtarget", "=", "Variable", "(", "target", ")", "\n", "pred_f", ",", "mu", ",", "logvar", "=", "model", "(", "vcond", ",", "vtarget", ")", "\n", "loss_f", "=", "criterion_f", "(", "pred_f", ",", "vtarget", ")", "\n", "total_loss_f", "+=", "loss_f", ".", "data", "[", "0", "]", "\n", "loss_kl", "=", "-", "0.5", "*", "torch", ".", "sum", "(", "1", "+", "logvar", "-", "mu", ".", "pow", "(", "2", ")", "-", "logvar", ".", "exp", "(", ")", ")", "\n", "total_loss_kl", "+=", "loss_kl", ".", "data", "[", "0", "]", "\n", "\n", "", "return", "total_loss_f", "/", "nsteps", ",", "total_loss_kl", "/", "nsteps", "\n", "\n"]], "home.repos.pwc.inspect_result.mbhenaff_EEN.None.train_vae.train": [[97, 125], ["os.system", "range", "train_vae.train_epoch", "train_loss_f.append", "train_loss_kl.append", "train_vae.test_epoch", "valid_loss_f.append", "valid_loss_kl.append", "print", "utils.log", "int", "model.intype", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "model.intype"], "function", ["home.repos.pwc.inspect_result.mbhenaff_EEN.None.train_een_deterministic.train_epoch", "home.repos.pwc.inspect_result.mbhenaff_EEN.None.train_een_deterministic.test_epoch", "home.repos.pwc.inspect_result.mbhenaff_EEN.None.utils.log", "home.repos.pwc.inspect_result.mbhenaff_EEN.None.models.BaselineModel3Layer.intype", "home.repos.pwc.inspect_result.mbhenaff_EEN.None.models.BaselineModel3Layer.intype"], ["", "def", "train", "(", "n_epochs", ")", ":", "\n", "# prepare for saving ", "\n", "    ", "os", ".", "system", "(", "\"mkdir -p \"", "+", "opt", ".", "save_dir", ")", "\n", "# training", "\n", "best_valid_loss_f", "=", "1e6", "\n", "train_loss_f", ",", "train_loss_kl", "=", "[", "]", ",", "[", "]", "\n", "valid_loss_f", ",", "valid_loss_kl", "=", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "n_epochs", ")", ":", "\n", "        ", "train_loss_epoch_f", ",", "train_loss_epoch_g", "=", "train_epoch", "(", "opt", ".", "epoch_size", ")", "\n", "train_loss_f", ".", "append", "(", "train_loss_epoch_f", ")", "\n", "train_loss_kl", ".", "append", "(", "train_loss_epoch_g", ")", "\n", "valid_loss_epoch_f", ",", "valid_loss_epoch_g", "=", "test_epoch", "(", "int", "(", "opt", ".", "epoch_size", "/", "5", ")", ")", "\n", "valid_loss_f", ".", "append", "(", "valid_loss_epoch_f", ")", "\n", "valid_loss_kl", ".", "append", "(", "valid_loss_epoch_g", ")", "\n", "\n", "if", "valid_loss_f", "[", "-", "1", "]", "<", "best_valid_loss_f", ":", "\n", "            ", "best_valid_loss_f", "=", "valid_loss_f", "[", "-", "1", "]", "\n", "# save the whole model", "\n", "model", ".", "intype", "(", "\"cpu\"", ")", "\n", "torch", ".", "save", "(", "{", "'i'", ":", "i", ",", "'model'", ":", "model", ",", "'train_loss_f'", ":", "train_loss_f", ",", "'train_loss_kl'", ":", "train_loss_kl", ",", "'valid_loss_f'", ":", "valid_loss_f", ",", "'valid_loss_kl'", ":", "valid_loss_kl", "}", ",", "\n", "opt", ".", "model_filename", "+", "'.model'", ")", "\n", "torch", ".", "save", "(", "optimizer", ",", "opt", ".", "model_filename", "+", "'.optim'", ")", "\n", "model", ".", "intype", "(", "\"gpu\"", ")", "\n", "\n", "", "log_string", "=", "(", "'iter: {:d}, train_loss_f: {:0.6f}, train_loss_kl: {:0.6f}, valid_loss_f: {:0.6f}, valid_loss_kl: {:0.6f}, best_valid_loss_f: {:0.6f}, lr: {:0.5f}'", ")", ".", "format", "(", "\n", "(", "i", "+", "1", ")", "*", "opt", ".", "epoch_size", ",", "train_loss_f", "[", "-", "1", "]", ",", "train_loss_kl", "[", "-", "1", "]", ",", "valid_loss_f", "[", "-", "1", "]", ",", "valid_loss_kl", "[", "-", "1", "]", ",", "best_valid_loss_f", ",", "opt", ".", "lrt", ")", "\n", "print", "(", "log_string", ")", "\n", "utils", ".", "log", "(", "opt", ".", "model_filename", "+", "'.log'", ",", "log_string", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mbhenaff_EEN.None.visualize.load_model": [[40, 45], ["torch.load().get", "torch.load().get", "torch.load().get", "model.cuda.cuda", "model.cuda.eval", "torch.load", "torch.load", "torch.load"], "function", ["None"], ["def", "load_model", "(", "mfile", ")", ":", "\n", "    ", "model", "=", "torch", ".", "load", "(", "mfile", ")", ".", "get", "(", "'model'", ")", "\n", "model", "=", "model", ".", "cuda", "(", ")", "\n", "model", ".", "eval", "(", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.mbhenaff_EEN.None.train_een_deterministic.train_epoch": [[58, 74], ["model.train", "range", "optimizer.zero_grad", "model.zero_grad", "dataloader.get_batch", "torch.autograd.Variable", "torch.autograd.Variable", "model", "criterion", "criterion.backward", "optimizer.step"], "function", ["home.repos.pwc.inspect_result.mbhenaff_EEN.None.train_een_deterministic.train", "home.repos.pwc.inspect_result.mbhenaff_EEN.dataloaders.data_atari.ImageLoader.get_batch"], ["def", "train_epoch", "(", "nsteps", ")", ":", "\n", "    ", "total_loss", "=", "0", "\n", "model", ".", "train", "(", ")", "\n", "for", "iter", "in", "range", "(", "0", ",", "nsteps", ")", ":", "\n", "        ", "optimizer", ".", "zero_grad", "(", ")", "\n", "model", ".", "zero_grad", "(", ")", "\n", "cond", ",", "target", ",", "_", "=", "dataloader", ".", "get_batch", "(", "'train'", ")", "\n", "vcond", "=", "Variable", "(", "cond", ")", "\n", "vtarget", "=", "Variable", "(", "target", ")", "\n", "# forward", "\n", "pred", "=", "model", "(", "vcond", ")", "\n", "loss", "=", "criterion", "(", "pred", ",", "vtarget", ")", "\n", "total_loss", "+=", "loss", ".", "data", "[", "0", "]", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "", "return", "total_loss", "/", "nsteps", "\n", "\n"]], "home.repos.pwc.inspect_result.mbhenaff_EEN.None.train_een_deterministic.test_epoch": [[76, 87], ["model.eval", "range", "dataloader.get_batch", "torch.autograd.Variable", "torch.autograd.Variable", "model", "criterion"], "function", ["home.repos.pwc.inspect_result.mbhenaff_EEN.dataloaders.data_atari.ImageLoader.get_batch"], ["", "def", "test_epoch", "(", "nsteps", ")", ":", "\n", "    ", "total_loss", "=", "0", "\n", "model", ".", "eval", "(", ")", "\n", "for", "iter", "in", "range", "(", "0", ",", "nsteps", ")", ":", "\n", "        ", "cond", ",", "target", ",", "action", "=", "dataloader", ".", "get_batch", "(", "'valid'", ")", "\n", "vcond", "=", "Variable", "(", "cond", ")", "\n", "vtarget", "=", "Variable", "(", "target", ")", "\n", "pred", "=", "model", "(", "vcond", ")", "\n", "loss", "=", "criterion", "(", "pred", ",", "vtarget", ")", "\n", "total_loss", "+=", "loss", ".", "data", "[", "0", "]", "\n", "", "return", "total_loss", "/", "nsteps", "\n", "\n"]], "home.repos.pwc.inspect_result.mbhenaff_EEN.None.train_een_deterministic.train": [[88, 111], ["os.system", "range", "train_loss.append", "valid_loss.append", "print", "utils.log", "train_een_deterministic.train_epoch", "train_een_deterministic.test_epoch", "model.intype", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "model.intype"], "function", ["home.repos.pwc.inspect_result.mbhenaff_EEN.None.utils.log", "home.repos.pwc.inspect_result.mbhenaff_EEN.None.train_een_deterministic.train_epoch", "home.repos.pwc.inspect_result.mbhenaff_EEN.None.train_een_deterministic.test_epoch", "home.repos.pwc.inspect_result.mbhenaff_EEN.None.models.BaselineModel3Layer.intype", "home.repos.pwc.inspect_result.mbhenaff_EEN.None.models.BaselineModel3Layer.intype"], ["", "def", "train", "(", "n_epochs", ")", ":", "\n", "# prepare for saving ", "\n", "    ", "os", ".", "system", "(", "\"mkdir -p \"", "+", "opt", ".", "save_dir", ")", "\n", "# training", "\n", "best_valid_loss", "=", "1e6", "\n", "train_loss", ",", "valid_loss", "=", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "n_epochs", ")", ":", "\n", "        ", "train_loss", ".", "append", "(", "train_epoch", "(", "opt", ".", "epoch_size", ")", ")", "\n", "valid_loss", ".", "append", "(", "test_epoch", "(", "opt", ".", "epoch_size", ")", ")", "\n", "\n", "if", "valid_loss", "[", "-", "1", "]", "<", "best_valid_loss", ":", "\n", "            ", "best_valid_loss", "=", "valid_loss", "[", "-", "1", "]", "\n", "# save ", "\n", "model", ".", "intype", "(", "\"cpu\"", ")", "\n", "torch", ".", "save", "(", "{", "'epoch'", ":", "i", ",", "'model'", ":", "model", ",", "'train_loss'", ":", "train_loss", ",", "'valid_loss'", ":", "valid_loss", "}", ",", "\n", "opt", ".", "model_filename", "+", "'.model'", ")", "\n", "torch", ".", "save", "(", "optimizer", ",", "opt", ".", "model_filename", "+", "'.optim'", ")", "\n", "model", ".", "intype", "(", "\"gpu\"", ")", "\n", "\n", "", "log_string", "=", "(", "'iter: {:d}, train_loss: {:0.6f}, valid_loss: {:0.6f}, best_valid_loss: {:0.6f}, lr: {:0.5f}'", ")", ".", "format", "(", "\n", "(", "i", "+", "1", ")", "*", "opt", ".", "epoch_size", ",", "train_loss", "[", "-", "1", "]", ",", "valid_loss", "[", "-", "1", "]", ",", "best_valid_loss", ",", "opt", ".", "lrt", ")", "\n", "print", "(", "log_string", ")", "\n", "utils", ".", "log", "(", "opt", ".", "model_filename", "+", "'.log'", ",", "log_string", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mbhenaff_EEN.None.utils.one_hot": [[5, 19], ["x.long().cpu.ndimension", "x.long().cpu.long().cpu", "torch.zeros.squeeze", "torch.zeros", "torch.zeros.scatter_", "x.long().cpu.long", "x.long().cpu.size", "x.long().cpu.unsqueeze", "torch.zeros", "torch.zeros.scatter_", "x.long().cpu.size", "x.long().cpu.size", "x.long().cpu.unsqueeze", "torch.zeros", "torch.zeros.scatter_", "x.long().cpu.size", "x.long().cpu.size", "x.long().cpu.size", "x.long().cpu.unsqueeze"], "function", ["None"], ["def", "one_hot", "(", "x", ",", "d", ")", ":", "\n", "    ", "n", "=", "x", ".", "ndimension", "(", ")", "\n", "x", "=", "x", ".", "long", "(", ")", ".", "cpu", "(", ")", "\n", "if", "n", "==", "1", ":", "\n", "        ", "x_onehot", "=", "torch", ".", "zeros", "(", "x", ".", "size", "(", "0", ")", ",", "d", ")", "\n", "x_onehot", ".", "scatter_", "(", "1", ",", "x", ".", "unsqueeze", "(", "1", ")", ",", "1", ")", "\n", "", "elif", "n", "==", "2", ":", "\n", "        ", "x_onehot", "=", "torch", ".", "zeros", "(", "x", ".", "size", "(", "0", ")", ",", "x", ".", "size", "(", "1", ")", ",", "d", ")", "\n", "x_onehot", ".", "scatter_", "(", "2", ",", "x", ".", "unsqueeze", "(", "2", ")", ",", "1", ")", "\n", "", "elif", "n", "==", "3", ":", "\n", "        ", "x_onehot", "=", "torch", ".", "zeros", "(", "x", ".", "size", "(", "0", ")", ",", "x", ".", "size", "(", "1", ")", ",", "x", ".", "size", "(", "2", ")", ",", "d", ")", "\n", "x_onehot", ".", "scatter_", "(", "3", ",", "x", ".", "unsqueeze", "(", "3", ")", ",", "1", ")", "\n", "\n", "", "return", "x_onehot", ".", "squeeze", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mbhenaff_EEN.None.utils.log": [[23, 29], ["open", "open.write", "open.close", "os.path.isdir", "os.system", "os.path.dirname", "os.path.dirname", "str", "datetime.datetime.now"], "function", ["None"], ["", "def", "log", "(", "fname", ",", "s", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "dirname", "(", "fname", ")", ")", ":", "\n", "            ", "os", ".", "system", "(", "\"mkdir -p \"", "+", "os", ".", "path", ".", "dirname", "(", "fname", ")", ")", "\n", "", "f", "=", "open", "(", "fname", ",", "'a'", ")", "\n", "f", ".", "write", "(", "str", "(", "datetime", ".", "now", "(", ")", ")", "+", "': '", "+", "s", "+", "'\\n'", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mbhenaff_EEN.None.utils.read_config": [[31, 35], ["json.load", "open"], "function", ["None"], ["", "def", "read_config", "(", "file_path", ")", ":", "\n", "    ", "\"\"\"Read JSON config.\"\"\"", "\n", "json_object", "=", "json", ".", "load", "(", "open", "(", "file_path", ",", "'r'", ")", ")", "\n", "return", "json_object", "\n", "\n"]], "home.repos.pwc.inspect_result.mbhenaff_EEN.dataloaders.data_bird.ImageLoader.__init__": [[14, 59], ["object.__init__", "arg.get", "arg.get", "arg.get", "arg.get", "arg.get", "arg.get", "arg.get", "print", "os.listdir", "print", "arg.get", "os.path.join", "glob.glob", "data_bird.ImageLoader.datalist.append", "arg.get", "os.path.join", "len", "numpy.load", "arg.get", "len", "sorted", "numpy.transpose", "print", "numpy.save", "scipy.misc.imread", "scipy.misc.imresize", "numpy.transpose.append", "numpy.array", "os.path.join", "glob.glob", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.mbhenaff_EEN.dataloaders.data_atari.ImageLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "arg", ")", ":", "\n", "        ", "super", "(", "ImageLoader", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "arg", "=", "arg", "\n", "self", ".", "datalist", "=", "[", "]", "\n", "\n", "self", ".", "h", "=", "arg", ".", "get", "(", "'height'", ")", "\n", "self", ".", "w", "=", "arg", ".", "get", "(", "'width'", ")", "\n", "self", ".", "nc", "=", "arg", ".", "get", "(", "'nc'", ")", "\n", "self", ".", "ncond", "=", "arg", ".", "get", "(", "'ncond'", ",", "2", ")", "\n", "self", ".", "npred", "=", "arg", ".", "get", "(", "'npred'", ",", "1", ")", "\n", "self", ".", "srate", "=", "arg", ".", "get", "(", "'srate'", ",", "4", ")", "\n", "self", ".", "allow_newpipe", "=", "arg", ".", "get", "(", "'allow_newpipe'", ",", "True", ")", "\n", "\n", "# reading", "\n", "self", ".", "datalist", "=", "[", "]", "\n", "print", "(", "arg", ".", "get", "(", "\"datapath\"", ")", ")", "\n", "for", "fdname", "in", "os", ".", "listdir", "(", "arg", ".", "get", "(", "\"datapath\"", ")", "+", "'/data/'", ")", ":", "\n", "            ", "fd_datalist", "=", "[", "]", "\n", "abs_fdname", "=", "os", ".", "path", ".", "join", "(", "arg", ".", "get", "(", "\"datapath\"", ")", "+", "'/data/'", ",", "fdname", ")", "\n", "presaved_npy", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "abs_fdname", ",", "\"*.npy\"", ")", ")", "\n", "if", "len", "(", "presaved_npy", ")", "==", "1", ":", "\n", "                ", "fd_datalist", "=", "numpy", ".", "load", "(", "presaved_npy", "[", "0", "]", ")", "\n", "", "elif", "len", "(", "presaved_npy", ")", "==", "0", ":", "\n", "                ", "for", "abs_fname", "in", "sorted", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "abs_fdname", ",", "\"*.png\"", ")", ")", "[", ":", "-", "1", "]", ")", ":", "\n", "                    ", "img", "=", "misc", ".", "imread", "(", "abs_fname", ")", "\n", "r_img", "=", "misc", ".", "imresize", "(", "img", ",", "(", "self", ".", "h", ",", "self", ".", "w", ")", ")", "\n", "fd_datalist", ".", "append", "(", "r_img", ")", "\n", "\n", "", "fd_datalist", "=", "numpy", ".", "transpose", "(", "numpy", ".", "array", "(", "fd_datalist", ")", ",", "(", "0", ",", "3", ",", "1", ",", "2", ")", ")", "\n", "print", "(", "'saving images as numpy array: {}'", ".", "format", "(", "os", ".", "path", ".", "join", "(", "abs_fdname", ",", "\"presave.npy\"", ")", ",", "fd_datalist", ")", ")", "\n", "numpy", ".", "save", "(", "os", ".", "path", ".", "join", "(", "abs_fdname", ",", "\"presave.npy\"", ")", ",", "fd_datalist", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "\n", "", "self", ".", "datalist", ".", "append", "(", "fd_datalist", ")", "\n", "\n", "# split", "\n", "", "self", ".", "train_datalist", "=", "self", ".", "datalist", "[", ":", "-", "5", "]", "\n", "self", ".", "valid_datalist", "=", "self", ".", "datalist", "[", "-", "5", ":", "-", "3", "]", "\n", "self", ".", "test_datalist", "=", "self", ".", "datalist", "[", "-", "3", ":", "]", "\n", "\n", "# pointers", "\n", "self", ".", "iter_video_ptr", "=", "0", "\n", "self", ".", "iter_sample_ptr", "=", "self", ".", "ncond", "*", "self", ".", "srate", "\n", "\n", "print", "(", "\"Dataloder for Flappy bird constructed done\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mbhenaff_EEN.dataloaders.data_bird.ImageLoader.reset_ptrs": [[61, 64], ["None"], "methods", ["None"], ["", "def", "reset_ptrs", "(", "self", ")", ":", "\n", "        ", "self", ".", "iter_video_ptr", "=", "0", "\n", "self", ".", "iter_sample_ptr", "=", "self", ".", "ncond", "*", "self", ".", "srate", "\n", "\n"]], "home.repos.pwc.inspect_result.mbhenaff_EEN.dataloaders.data_bird.ImageLoader._parse_file": [[65, 76], ["open", "handler.readlines", "collections.OrderedDict", "elem.split.split.split", "elem[].split", "[].split", "[].split", "int", "int", "elem[].split", "elem[].split"], "methods", ["None"], ["", "def", "_parse_file", "(", "self", ",", "filename", ")", ":", "\n", "        ", "with", "open", "(", "filename", ")", "as", "handler", ":", "\n", "            ", "event_info", "=", "handler", ".", "readlines", "(", ")", "\n", "content", "=", "OrderedDict", "(", ")", "\n", "for", "elem", "in", "event_info", ":", "\n", "                ", "elem", "=", "elem", ".", "split", "(", "','", ")", "\n", "img_id", "=", "elem", "[", "0", "]", ".", "split", "(", ")", "[", "1", "]", "\n", "key", "=", "elem", "[", "1", "]", ".", "split", "(", "':'", ")", "[", "0", "]", ".", "split", "(", ")", "[", "1", "]", "\n", "event", "=", "elem", "[", "1", "]", ".", "split", "(", "':'", ")", "[", "1", "]", ".", "split", "(", ")", "[", "1", "]", "\n", "content", "[", "img_id", "]", "=", "[", "int", "(", "key", ")", ",", "int", "(", "event", ")", "]", "\n", "", "", "return", "content", "\n", "\n"]], "home.repos.pwc.inspect_result.mbhenaff_EEN.dataloaders.data_bird.ImageLoader._sample_time": [[77, 86], ["random.randint"], "methods", ["None"], ["", "def", "_sample_time", "(", "self", ",", "video", ",", "num_cond", ",", "num_pred", ")", ":", "\n", "        ", "start_pos", "=", "random", ".", "randint", "(", "num_cond", "*", "self", ".", "srate", ",", "\n", "video", ".", "shape", "[", "0", "]", "-", "num_pred", "*", "self", ".", "srate", "-", "1", ")", "\n", "cond_interval", "=", "video", "[", "start_pos", "-", "num_cond", "*", "self", ".", "srate", ":", "start_pos", "]", "\n", "pred_interval", "=", "video", "[", "start_pos", ":", "start_pos", "+", "num_pred", "*", "self", ".", "srate", "]", "\n", "# subsample", "\n", "cond_frames", "=", "cond_interval", "[", ":", ":", "self", ".", "srate", "]", "\n", "pred_frames", "=", "pred_interval", "[", ":", ":", "self", ".", "srate", "]", "\n", "return", "cond_frames", ",", "pred_frames", "\n", "\n"]], "home.repos.pwc.inspect_result.mbhenaff_EEN.dataloaders.data_bird.ImageLoader._sample_event_time": [[87, 100], ["random.randint"], "methods", ["None"], ["", "def", "_sample_event_time", "(", "self", ",", "video", ",", "events", ",", "num_cond", ",", "num_pred", ")", ":", "\n", "        ", "start_pos", "=", "random", ".", "randint", "(", "num_cond", "*", "self", ".", "srate", ",", "\n", "video", ".", "shape", "[", "0", "]", "-", "num_pred", "*", "self", ".", "srate", "-", "1", ")", "\n", "\n", "cond_interval", "=", "video", "[", "start_pos", "-", "num_cond", "*", "self", ".", "srate", ":", "start_pos", "]", "\n", "pred_interval", "=", "video", "[", "start_pos", ":", "start_pos", "+", "num_pred", "*", "self", ".", "srate", "]", "\n", "events_interval", "=", "events", "[", "start_pos", "-", "self", ".", "srate", "+", "1", ":", "start_pos", "+", "num_pred", "*", "self", ".", "srate", "]", "\n", "# subsample", "\n", "cond_frames", "=", "cond_interval", "[", ":", ":", "self", ".", "srate", "]", "\n", "pred_frames", "=", "pred_interval", "[", ":", ":", "self", ".", "srate", "]", "\n", "# not sampling the events; only the prediction events", "\n", "events_frames", "=", "events_interval", "[", ":", "-", "(", "self", ".", "srate", "-", "1", ")", "]", "\n", "return", "cond_frames", ",", "pred_frames", ",", "events_frames", "\n", "\n"]], "home.repos.pwc.inspect_result.mbhenaff_EEN.dataloaders.data_bird.ImageLoader._iterate_time": [[101, 111], ["None"], "methods", ["None"], ["", "def", "_iterate_time", "(", "self", ",", "video", ",", "pos", ",", "events", ",", "num_cond", ",", "num_pred", ")", ":", "\n", "        ", "cond_interval", "=", "video", "[", "pos", "-", "num_cond", "*", "self", ".", "srate", ":", "pos", "]", "\n", "pred_interval", "=", "video", "[", "pos", ":", "pos", "+", "num_pred", "*", "self", ".", "srate", "]", "\n", "events_interval", "=", "events", "[", "pos", "-", "self", ".", "srate", "+", "1", ":", "pos", "+", "num_pred", "*", "self", ".", "srate", "]", "\n", "# subsample", "\n", "cond_frames", "=", "cond_interval", "[", ":", ":", "self", ".", "srate", "]", "\n", "pred_frames", "=", "pred_interval", "[", ":", ":", "self", ".", "srate", "]", "\n", "# not sampling the events; only the prediction events", "\n", "events_frames", "=", "events_interval", "[", ":", "-", "(", "self", ".", "srate", "-", "1", ")", "]", "\n", "return", "cond_frames", ",", "pred_frames", ",", "events_frames", "\n", "\n"]], "home.repos.pwc.inspect_result.mbhenaff_EEN.dataloaders.data_bird.ImageLoader.get_batch": [[112, 145], ["torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "data_bird.ImageLoader.arg.get", "random.choice", "numpy.array", "numpy.array", "data_bird.ImageLoader._sample_time", "cond_frames.append", "pred_frames.append", "torch.from_numpy().float", "torch.from_numpy().float", "data_bird.ImageLoader.rule_out_new_pipe", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.mbhenaff_EEN.dataloaders.data_atari.ImageLoader._sample_time", "home.repos.pwc.inspect_result.mbhenaff_EEN.dataloaders.data_bird.ImageLoader.rule_out_new_pipe"], ["", "def", "get_batch", "(", "self", ",", "set", ")", ":", "\n", "        ", "cond_frames", ",", "pred_frames", "=", "[", "]", ",", "[", "]", "\n", "if", "set", "==", "\"train\"", ":", "\n", "            ", "this_set", "=", "self", ".", "train_datalist", "\n", "", "elif", "set", "==", "\"valid\"", ":", "\n", "            ", "this_set", "=", "self", ".", "valid_datalist", "\n", "", "elif", "set", "==", "\"test\"", ":", "\n", "            ", "this_set", "=", "self", ".", "test_datalist", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "\n", "# rolling", "\n", "", "id", "=", "1", "\n", "while", "id", "<=", "self", ".", "arg", ".", "get", "(", "\"batchsize\"", ")", ":", "\n", "            ", "selected_video", "=", "random", ".", "choice", "(", "this_set", ")", "\n", "if", "(", "selected_video", ".", "shape", "[", "0", "]", "-", "self", ".", "npred", "*", "self", ".", "srate", "-", "1", ">", "self", ".", "ncond", "*", "self", ".", "srate", ")", ":", "\n", "                ", "selected_cond_frames", ",", "selected_pred_frames", "=", "self", ".", "_sample_time", "(", "\n", "selected_video", ",", "self", ".", "ncond", ",", "self", ".", "npred", ")", "\n", "if", "self", ".", "allow_newpipe", ":", "\n", "                    ", "pass", "\n", "", "elif", "self", ".", "rule_out_new_pipe", "(", "selected_cond_frames", ",", "selected_pred_frames", ")", ":", "\n", "                    ", "continue", "\n", "", "cond_frames", ".", "append", "(", "selected_cond_frames", ")", "\n", "pred_frames", ".", "append", "(", "selected_pred_frames", ")", "\n", "id", "+=", "1", "\n", "\n", "# processing on the numpy array level ", "\n", "", "", "cond_frames", "=", "numpy", ".", "array", "(", "cond_frames", ",", "dtype", "=", "'float'", ")", "/", "255.0", "\n", "pred_frames", "=", "numpy", ".", "array", "(", "pred_frames", ",", "dtype", "=", "'float'", ")", "/", "255.0", "\n", "\n", "# return tensor", "\n", "cond_frames_ts", "=", "torch", ".", "from_numpy", "(", "cond_frames", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "pred_frames_ts", "=", "torch", ".", "from_numpy", "(", "pred_frames", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "return", "cond_frames_ts", ",", "pred_frames_ts", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.mbhenaff_EEN.dataloaders.data_bird.ImageLoader.get_event_batch": [[146, 186], ["torch.Tensor", "torch.Tensor", "data_bird.ImageLoader.arg.get", "torch.Tensor().view", "data_bird.ImageLoader.arg.get", "random.choice", "numpy.array", "numpy.array", "torch.Tensor().view.squeeze", "zip", "data_bird.ImageLoader._sample_event_time", "cond_frames.append", "pred_frames.append", "events_frames.append", "torch.Tensor", "data_bird.ImageLoader.rule_out_new_pipe", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.mbhenaff_EEN.dataloaders.data_bird.ImageLoader._sample_event_time", "home.repos.pwc.inspect_result.mbhenaff_EEN.dataloaders.data_bird.ImageLoader.rule_out_new_pipe"], ["", "def", "get_event_batch", "(", "self", ",", "set", ")", ":", "\n", "        ", "cond_frames", ",", "pred_frames", ",", "events_frames", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "if", "set", "==", "\"train\"", ":", "\n", "            ", "this_set", "=", "self", ".", "e_train_datalist", "\n", "this_set_events", "=", "self", ".", "e_train_event_datalist", "\n", "", "elif", "set", "==", "\"test\"", ":", "\n", "            ", "this_set", "=", "self", ".", "e_test_datalist", "\n", "this_set_events", "=", "self", ".", "e_test_event_datalist", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "\n", "\n", "\n", "# rolling", "\n", "", "id", "=", "1", "\n", "while", "id", "<=", "self", ".", "arg", ".", "get", "(", "\"batchsize\"", ")", ":", "\n", "            ", "selected_video", ",", "selected_video_events", "=", "random", ".", "choice", "(", "\n", "zip", "(", "this_set", ",", "this_set_events", ")", ")", "\n", "if", "(", "selected_video", ".", "shape", "[", "0", "]", "-", "self", ".", "npred", "*", "self", ".", "srate", "-", "1", ">", "self", ".", "ncond", "*", "self", ".", "srate", ")", ":", "\n", "                ", "selected_cond_frames", ",", "selected_pred_frames", ",", "selected_events_frames", "=", "self", ".", "_sample_event_time", "(", "\n", "selected_video", ",", "selected_video_events", ",", "self", ".", "ncond", ",", "self", ".", "npred", ")", "\n", "if", "self", ".", "allow_newpipe", ":", "\n", "                    ", "pass", "\n", "", "elif", "self", ".", "rule_out_new_pipe", "(", "selected_cond_frames", ",", "selected_pred_frames", ")", ":", "\n", "                    ", "continue", "\n", "", "cond_frames", ".", "append", "(", "selected_cond_frames", ")", "\n", "pred_frames", ".", "append", "(", "selected_pred_frames", ")", "\n", "events_frames", ".", "append", "(", "selected_events_frames", ")", "\n", "id", "+=", "1", "\n", "\n", "# processing on the numpy array level ", "\n", "", "", "cond_frames", "=", "numpy", ".", "array", "(", "cond_frames", ",", "dtype", "=", "'float'", ")", "/", "255.0", "\n", "pred_frames", "=", "numpy", ".", "array", "(", "pred_frames", ",", "dtype", "=", "'float'", ")", "/", "255.0", "\n", "\n", "# return tensor", "\n", "cond_frames_ts", "=", "torch", ".", "Tensor", "(", "cond_frames", ")", "\n", "pred_frames_ts", "=", "torch", ".", "Tensor", "(", "pred_frames", ")", "\n", "self", ".", "batch_size", "=", "self", ".", "arg", ".", "get", "(", "\"batchsize\"", ")", "\n", "events_frames_ts", "=", "torch", ".", "Tensor", "(", "numpy", ".", "array", "(", "events_frames", ")", ")", ".", "view", "(", "self", ".", "batch_size", ",", "self", ".", "npred", ",", "4", ")", "\n", "return", "cond_frames_ts", ",", "pred_frames_ts", ",", "events_frames_ts", ".", "squeeze", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mbhenaff_EEN.dataloaders.data_bird.ImageLoader.get_iterated_batch": [[188, 232], ["torch.Tensor", "torch.Tensor", "data_bird.ImageLoader.arg.get", "data_bird.ImageLoader._iterate_time", "cond_frames.append", "pred_frames.append", "events_frames.append", "numpy.array", "numpy.array", "len", "data_bird.ImageLoader.rule_out_new_pipe"], "methods", ["home.repos.pwc.inspect_result.mbhenaff_EEN.dataloaders.data_atari.ImageLoader._iterate_time", "home.repos.pwc.inspect_result.mbhenaff_EEN.dataloaders.data_bird.ImageLoader.rule_out_new_pipe"], ["", "def", "get_iterated_batch", "(", "self", ",", "set", ")", ":", "\n", "        ", "cond_frames", ",", "pred_frames", ",", "events_frames", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "if", "set", "==", "\"train_event\"", ":", "\n", "            ", "this_set", "=", "self", ".", "e_train_datalist", "\n", "this_set_events", "=", "self", ".", "e_train_event_datalist", "\n", "", "elif", "set", "==", "\"test\"", ":", "\n", "            ", "this_set", "=", "self", ".", "e_test_datalist", "\n", "this_set_events", "=", "self", ".", "e_test_event_datalist", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "\n", "\n", "# iterating through", "\n", "", "id", "=", "1", "\n", "while", "id", "<=", "self", ".", "arg", ".", "get", "(", "\"batchsize\"", ")", ":", "\n", "            ", "if", "self", ".", "iter_video_ptr", "==", "len", "(", "this_set", ")", ":", "\n", "                ", "return", "None", ",", "None", ",", "None", "\n", "", "selected_video", "=", "this_set", "[", "self", ".", "iter_video_ptr", "]", "\n", "selected_video_events", "=", "this_set_events", "[", "self", ".", "iter_video_ptr", "]", "\n", "selected_cond_frames", ",", "selected_pred_frames", ",", "selected_events_frames", "=", "self", ".", "_iterate_time", "(", "selected_video", ",", "self", ".", "iter_sample_ptr", ",", "\n", "selected_video_events", ",", "self", ".", "ncond", ",", "self", ".", "npred", ")", "\n", "# pointers", "\n", "self", ".", "iter_sample_ptr", "+=", "1", "\n", "if", "self", ".", "iter_sample_ptr", "+", "self", ".", "npred", "*", "self", ".", "srate", ">=", "selected_video", ".", "shape", "[", "0", "]", ":", "\n", "                ", "self", ".", "iter_video_ptr", "+=", "1", "\n", "self", ".", "iter_sample_ptr", "=", "self", ".", "ncond", "*", "self", ".", "srate", "\n", "# filter", "\n", "", "if", "self", ".", "allow_newpipe", ":", "\n", "                ", "pass", "\n", "", "elif", "self", ".", "rule_out_new_pipe", "(", "selected_cond_frames", ",", "selected_pred_frames", ")", ":", "\n", "                ", "continue", "\n", "", "cond_frames", ".", "append", "(", "selected_cond_frames", ")", "\n", "pred_frames", ".", "append", "(", "selected_pred_frames", ")", "\n", "events_frames", ".", "append", "(", "selected_events_frames", ")", "\n", "id", "+=", "1", "\n", "\n", "# processing on the numpy array level ", "\n", "", "cond_frames", "=", "numpy", ".", "array", "(", "cond_frames", ",", "dtype", "=", "'float'", ")", "/", "255.0", "\n", "pred_frames", "=", "numpy", ".", "array", "(", "pred_frames", ",", "dtype", "=", "'float'", ")", "/", "255.0", "\n", "\n", "# return tensor", "\n", "cond_frames_ts", "=", "torch", ".", "Tensor", "(", "cond_frames", ")", "\n", "pred_frames_ts", "=", "torch", ".", "Tensor", "(", "pred_frames", ")", "\n", "return", "cond_frames_ts", ",", "pred_frames_ts", ",", "events_frames", "\n", "\n"]], "home.repos.pwc.inspect_result.mbhenaff_EEN.dataloaders.data_bird.ImageLoader.reset_ptr": [[233, 236], ["None"], "methods", ["None"], ["", "def", "reset_ptr", "(", "self", ")", ":", "\n", "        ", "self", ".", "iter_video_ptr", "=", "0", "\n", "self", ".", "iter_sample_ptr", "=", "self", ".", "ncond", "*", "self", ".", "srate", "\n", "\n"]], "home.repos.pwc.inspect_result.mbhenaff_EEN.dataloaders.data_bird.ImageLoader.plot_seq": [[237, 244], ["torch.cat", "cond_pred.view.view.view", "torchvision.utils.make_grid"], "methods", ["None"], ["", "def", "plot_seq", "(", "self", ",", "cond", ",", "pred", ",", "num_pred", "=", "0", ")", ":", "\n", "        ", "if", "num_pred", "==", "0", ":", "\n", "            ", "num_pred", "=", "self", ".", "npred", "\n", "", "cond_pred", "=", "torch", ".", "cat", "(", "(", "cond", ",", "pred", ")", ",", "1", ")", "\n", "cond_pred", "=", "cond_pred", ".", "view", "(", "-", "1", ",", "self", ".", "nc", ",", "self", ".", "h", ",", "self", ".", "w", ")", "\n", "grid", "=", "torchvision", ".", "utils", ".", "make_grid", "(", "cond_pred", ",", "self", ".", "ncond", "+", "num_pred", ")", "\n", "return", "grid", "\n", "\n"]], "home.repos.pwc.inspect_result.mbhenaff_EEN.dataloaders.data_bird.ImageLoader.assign_background": [[245, 247], ["None"], "methods", ["None"], ["", "def", "assign_background", "(", "self", ",", "val", ")", ":", "\n", "        ", "self", ".", "background", "=", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.mbhenaff_EEN.dataloaders.data_bird.ImageLoader.rule_out_new_pipe": [[248, 258], ["[].sum().mean().tolist", "range", "mean_p_list.append", "[].sum().mean", "[].sum().mean().tolist", "[].sum", "[].sum().mean", "[].sum"], "methods", ["None"], ["", "def", "rule_out_new_pipe", "(", "self", ",", "cond", ",", "pred", ")", ":", "\n", "        ", "mean_c", "=", "cond", "[", "self", ".", "ncond", "-", "1", "]", "[", ":", ",", ":", "3", ",", ":", "]", ".", "sum", "(", "0", ")", ".", "mean", "(", "0", ")", ".", "tolist", "(", ")", "\n", "mean_p_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "npred", ")", ":", "\n", "            ", "mean_p_list", ".", "append", "(", "pred", "[", "i", "]", "[", ":", ",", ":", "3", ",", ":", "]", ".", "sum", "(", "0", ")", ".", "mean", "(", "0", ")", ".", "tolist", "(", ")", ")", "\n", "", "if", "mean_c", "[", "-", "1", "]", "in", "self", ".", "background", ":", "\n", "            ", "for", "elem", "in", "mean_p_list", ":", "\n", "                ", "if", "elem", "[", "-", "1", "]", "not", "in", "self", ".", "background", ":", "\n", "                    ", "return", "True", "\n", "", "", "", "return", "False", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mbhenaff_EEN.dataloaders.data_poke.ImageLoader._load_set": [[12, 36], ["print", "os.listdir", "data_poke.ImageLoader.arg.get", "os.path.join", "print", "glob.glob", "numpy.load", "datalist.append", "os.path.join", "len", "numpy.load", "len", "sorted", "numpy.transpose", "numpy.save", "print", "scipy.misc.imread", "scipy.misc.imresize", "numpy.transpose.append", "numpy.array", "os.path.join", "glob.glob", "os.path.join"], "methods", ["None"], ["    ", "def", "_load_set", "(", "self", ",", "split", ")", ":", "\n", "        ", "print", "(", "'loading {} set'", ".", "format", "(", "split", ")", ")", "\n", "datalist", "=", "[", "]", "\n", "datapath", "=", "'{}/{}/'", ".", "format", "(", "self", ".", "arg", ".", "get", "(", "\"datapath\"", ")", ",", "split", ")", "\n", "for", "fdname", "in", "os", ".", "listdir", "(", "datapath", ")", ":", "\n", "            ", "fd_datalist", "=", "[", "]", "\n", "abs_fdname", "=", "os", ".", "path", ".", "join", "(", "datapath", ",", "fdname", ")", "\n", "print", "(", "\"loading {}\"", ".", "format", "(", "abs_fdname", ")", ")", "\n", "presaved_npy", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "abs_fdname", ",", "\"presave.npy\"", ")", ")", "\n", "if", "len", "(", "presaved_npy", ")", "==", "1", ":", "\n", "                ", "fd_datalist", "=", "numpy", ".", "load", "(", "presaved_npy", "[", "0", "]", ")", "\n", "", "elif", "len", "(", "presaved_npy", ")", "==", "0", ":", "\n", "                ", "for", "abs_fname", "in", "sorted", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "abs_fdname", ",", "\"*.jpg\"", ")", ")", "[", ":", "-", "1", "]", ")", ":", "\n", "                    ", "print", "(", "'reading {}'", ".", "format", "(", "abs_fname", ")", ")", "\n", "img", "=", "misc", ".", "imread", "(", "abs_fname", ")", "\n", "r_img", "=", "misc", ".", "imresize", "(", "img", ",", "(", "self", ".", "height", ",", "self", ".", "width", ")", ")", "\n", "fd_datalist", ".", "append", "(", "r_img", ")", "\n", "", "fd_datalist", "=", "numpy", ".", "transpose", "(", "numpy", ".", "array", "(", "fd_datalist", ")", ",", "(", "0", ",", "3", ",", "1", ",", "2", ")", ")", "\n", "numpy", ".", "save", "(", "os", ".", "path", ".", "join", "(", "abs_fdname", ",", "\"presave.npy\"", ")", ",", "fd_datalist", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "\n", "", "actions", "=", "numpy", ".", "load", "(", "abs_fdname", "+", "'/actions.npy'", ")", "\n", "datalist", ".", "append", "(", "{", "'frames'", ":", "fd_datalist", ",", "'actions'", ":", "actions", "}", ")", "\n", "", "return", "datalist", "\n", "\n"]], "home.repos.pwc.inspect_result.mbhenaff_EEN.dataloaders.data_poke.ImageLoader.__init__": [[37, 58], ["object.__init__", "arg.get", "arg.get", "arg.get", "arg.get", "arg.get", "data_poke.ImageLoader._load_set", "data_poke.ImageLoader._load_set", "print"], "methods", ["home.repos.pwc.inspect_result.mbhenaff_EEN.dataloaders.data_atari.ImageLoader.__init__", "home.repos.pwc.inspect_result.mbhenaff_EEN.dataloaders.data_atari.ImageLoader._load_set", "home.repos.pwc.inspect_result.mbhenaff_EEN.dataloaders.data_atari.ImageLoader._load_set"], ["", "def", "__init__", "(", "self", ",", "arg", ")", ":", "\n", "        ", "super", "(", "ImageLoader", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "arg", "=", "arg", "\n", "self", ".", "datalist", "=", "[", "]", "\n", "\n", "self", ".", "height", "=", "arg", ".", "get", "(", "'height'", ")", "\n", "self", ".", "width", "=", "arg", ".", "get", "(", "'width'", ")", "\n", "self", ".", "nc", "=", "arg", ".", "get", "(", "'nc'", ")", "\n", "self", ".", "ncond", "=", "arg", ".", "get", "(", "'ncond'", ",", "1", ")", "\n", "self", ".", "npred", "=", "arg", ".", "get", "(", "'npred'", ",", "1", ")", "\n", "self", ".", "datalist_train", "=", "self", ".", "_load_set", "(", "'train'", ")", "\n", "self", ".", "datalist_test", "=", "self", ".", "_load_set", "(", "'test'", ")", "\n", "\n", "# keep some training data for validation", "\n", "self", ".", "datalist_valid", "=", "self", ".", "datalist_train", "[", "-", "3", ":", "]", "\n", "self", ".", "datalist_train", "=", "self", ".", "datalist_train", "[", ":", "-", "3", "]", "\n", "\n", "# pointers", "\n", "self", ".", "iter_video_ptr", "=", "0", "\n", "self", ".", "iter_sample_ptr", "=", "self", ".", "ncond", "\n", "print", "(", "\"Dataloader constructed done\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mbhenaff_EEN.dataloaders.data_poke.ImageLoader.reset_ptrs": [[60, 63], ["None"], "methods", ["None"], ["", "def", "reset_ptrs", "(", "self", ")", ":", "\n", "        ", "self", ".", "iter_video_ptr", "=", "0", "\n", "self", ".", "iter_sample_ptr", "=", "self", ".", "ncond", "\n", "\n"]], "home.repos.pwc.inspect_result.mbhenaff_EEN.dataloaders.data_poke.ImageLoader._sample_time": [[64, 70], ["random.randint"], "methods", ["None"], ["", "def", "_sample_time", "(", "self", ",", "video", ",", "actions", ",", "num_cond", ",", "num_pred", ")", ":", "\n", "        ", "start_pos", "=", "random", ".", "randint", "(", "0", ",", "video", ".", "shape", "[", "0", "]", "-", "2", ")", "\n", "cond_frames", "=", "video", "[", "start_pos", "]", "\n", "pred_frames", "=", "video", "[", "start_pos", "+", "1", "]", "\n", "actions", "=", "actions", "[", "start_pos", "]", "\n", "return", "cond_frames", ",", "pred_frames", ",", "actions", "\n", "\n"]], "home.repos.pwc.inspect_result.mbhenaff_EEN.dataloaders.data_poke.ImageLoader._iterate_time": [[71, 76], ["None"], "methods", ["None"], ["", "def", "_iterate_time", "(", "self", ",", "video", ",", "start_pos", ",", "actions", ",", "num_cond", ",", "num_pred", ")", ":", "\n", "        ", "cond_frames", "=", "video", "[", "start_pos", "]", "\n", "pred_frames", "=", "video", "[", "start_pos", "+", "1", "]", "\n", "actions", "=", "actions", "[", "start_pos", "]", "\n", "return", "cond_frames", ",", "pred_frames", ",", "actions", "\n", "\n"]], "home.repos.pwc.inspect_result.mbhenaff_EEN.dataloaders.data_poke.ImageLoader.get_batch": [[78, 110], ["numpy.array().squeeze", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "data_poke.ImageLoader.arg.get", "random.choice", "random.choice.get", "random.choice.get", "data_poke.ImageLoader._sample_time", "cond_frames.append", "pred_frames.append", "numpy.array().squeeze.append", "numpy.array", "numpy.array", "len", "numpy.array", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.mbhenaff_EEN.dataloaders.data_atari.ImageLoader._sample_time"], ["", "def", "get_batch", "(", "self", ",", "split", ")", ":", "\n", "        ", "if", "split", "==", "'train'", ":", "\n", "            ", "datalist", "=", "self", ".", "datalist_train", "\n", "", "elif", "split", "==", "'valid'", ":", "\n", "            ", "datalist", "=", "self", ".", "datalist_valid", "\n", "", "elif", "split", "==", "'test'", ":", "\n", "            ", "datalist", "=", "self", ".", "datalist_test", "\n", "\n", "", "cond_frames", ",", "pred_frames", ",", "actions", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "# rolling", "\n", "id", "=", "1", "\n", "while", "id", "<=", "self", ".", "arg", ".", "get", "(", "\"batchsize\"", ")", ":", "\n", "            ", "sample", "=", "random", ".", "choice", "(", "datalist", ")", "\n", "sample_video", "=", "sample", ".", "get", "(", "'frames'", ")", "\n", "sample_actions", "=", "sample", ".", "get", "(", "'actions'", ")", "\n", "selected_cond_frames", ",", "selected_pred_frames", ",", "selected_actions", "=", "self", ".", "_sample_time", "(", "\n", "sample_video", ",", "sample_actions", ",", "self", ".", "ncond", ",", "self", ".", "npred", ")", "\n", "assert", "(", "len", "(", "selected_actions", ")", ">", "0", ")", "\n", "cond_frames", ".", "append", "(", "selected_cond_frames", ")", "\n", "pred_frames", ".", "append", "(", "selected_pred_frames", ")", "\n", "actions", ".", "append", "(", "selected_actions", ")", "\n", "id", "+=", "1", "\n", "\n", "# processing on the numpy array level ", "\n", "", "cond_frames", "=", "numpy", ".", "array", "(", "cond_frames", ",", "dtype", "=", "'float'", ")", "/", "255.0", "\n", "pred_frames", "=", "numpy", ".", "array", "(", "pred_frames", ",", "dtype", "=", "'float'", ")", "/", "255.0", "\n", "actions", "=", "numpy", ".", "array", "(", "actions", ")", ".", "squeeze", "(", ")", "\n", "# return tensor", "\n", "cond_frames_ts", "=", "torch", ".", "from_numpy", "(", "cond_frames", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "pred_frames_ts", "=", "torch", ".", "from_numpy", "(", "pred_frames", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "actions_ts", "=", "torch", ".", "from_numpy", "(", "actions", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "return", "cond_frames_ts", ",", "pred_frames_ts", ",", "actions_ts", "\n", "\n"]], "home.repos.pwc.inspect_result.mbhenaff_EEN.dataloaders.data_poke.ImageLoader.get_iterated_batch": [[113, 152], ["numpy.array().squeeze", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "data_poke.ImageLoader.arg.get", "sample.get", "sample.get", "numpy.array", "numpy.array", "len", "data_poke.ImageLoader._iterate_time", "cond_frames.append", "pred_frames.append", "numpy.array().squeeze.append", "numpy.array", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "len"], "methods", ["home.repos.pwc.inspect_result.mbhenaff_EEN.dataloaders.data_atari.ImageLoader._iterate_time"], ["", "def", "get_iterated_batch", "(", "self", ",", "split", ")", ":", "\n", "        ", "if", "self", ".", "split", "==", "'train'", ":", "\n", "            ", "datalist", "=", "self", ".", "datalist_train", "\n", "", "elif", "self", ".", "split", "==", "'test'", ":", "\n", "            ", "datalist", "=", "self", ".", "datalist_test", "\n", "", "cond_frames", ",", "pred_frames", ",", "actions", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "# rolling", "\n", "id", "=", "1", "\n", "while", "id", "<=", "self", ".", "arg", ".", "get", "(", "\"batchsize\"", ")", ":", "\n", "            ", "if", "self", ".", "iter_video_ptr", "==", "len", "(", "datalist", ")", ":", "\n", "                ", "return", "None", ",", "None", ",", "None", "\n", "", "sample", "=", "self", ".", "datalist", "[", "self", ".", "iter_video_ptr", "]", "\n", "sample_video", "=", "sample", ".", "get", "(", "'frames'", ")", "\n", "sample_actions", "=", "sample", ".", "get", "(", "'actions'", ")", "\n", "if", "self", ".", "iter_sample_ptr", "+", "self", ".", "npred", ">", "sample_video", ".", "shape", "[", "0", "]", ":", "\n", "                ", "self", ".", "iter_video_ptr", "+=", "1", "\n", "self", ".", "iter_sample_ptr", "=", "self", ".", "ncond", "\n", "", "else", ":", "\n", "                ", "selected_cond_frames", ",", "selected_pred_frames", ",", "selected_actions", "=", "self", ".", "_iterate_time", "(", "\n", "sample_video", ",", "self", ".", "iter_sample_ptr", ",", "sample_actions", ",", "self", ".", "ncond", ",", "self", ".", "npred", ")", "\n", "\n", "assert", "(", "len", "(", "selected_actions", ")", ">", "0", ")", "\n", "cond_frames", ".", "append", "(", "selected_cond_frames", ")", "\n", "pred_frames", ".", "append", "(", "selected_pred_frames", ")", "\n", "actions", ".", "append", "(", "selected_actions", ")", "\n", "id", "+=", "1", "\n", "self", ".", "iter_sample_ptr", "+=", "1", "\n", "\n", "\n", "# processing on the numpy array level ", "\n", "", "", "cond_frames", "=", "numpy", ".", "array", "(", "cond_frames", ",", "dtype", "=", "'float'", ")", "/", "255.0", "\n", "pred_frames", "=", "numpy", ".", "array", "(", "pred_frames", ",", "dtype", "=", "'float'", ")", "/", "255.0", "\n", "actions", "=", "numpy", ".", "array", "(", "actions", ")", ".", "squeeze", "(", ")", "\n", "\n", "# return tensor", "\n", "cond_frames_ts", "=", "torch", ".", "from_numpy", "(", "cond_frames", ")", ".", "cuda", "(", ")", "\n", "pred_frames_ts", "=", "torch", ".", "from_numpy", "(", "pred_frames", ")", ".", "cuda", "(", ")", "\n", "actions_ts", "=", "torch", ".", "from_numpy", "(", "actions", ")", ".", "cuda", "(", ")", "\n", "return", "cond_frames_ts", ",", "pred_frames_ts", ",", "actions_ts", "\n", "\n"]], "home.repos.pwc.inspect_result.mbhenaff_EEN.dataloaders.data_poke.ImageLoader.plot_seq": [[153, 158], ["torch.cat", "cond_pred.view.view.view", "torchvision.utils.make_grid"], "methods", ["None"], ["", "def", "plot_seq", "(", "self", ",", "cond", ",", "pred", ")", ":", "\n", "        ", "cond_pred", "=", "torch", ".", "cat", "(", "(", "cond", ",", "pred", ")", ",", "1", ")", "\n", "cond_pred", "=", "cond_pred", ".", "view", "(", "-", "1", ",", "self", ".", "nc", ",", "self", ".", "height", ",", "self", ".", "width", ")", "\n", "grid", "=", "torchvision", ".", "utils", ".", "make_grid", "(", "cond_pred", ",", "self", ".", "ncond", "+", "self", ".", "npred", ",", "pad_value", "=", "1", ")", "\n", "return", "grid", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mbhenaff_EEN.dataloaders.data_driving.ImageLoader.__init__": [[19, 79], ["object.__init__", "arg.get", "arg.get", "arg.get", "arg.get", "arg.get", "print", "numpy.array", "os.path.isfile", "data_driving.ImageLoader.datalist.append", "arg.get", "open", "csv.reader", "map", "arg.get", "print", "numpy.load", "len", "print", "imageio.get_reader", "enumerate", "numpy.array", "numpy.save", "scipy.misc.imresize", "numpy.array.append"], "methods", ["home.repos.pwc.inspect_result.mbhenaff_EEN.dataloaders.data_atari.ImageLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "arg", ")", ":", "\n", "        ", "super", "(", "ImageLoader", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "arg", "=", "arg", "\n", "self", ".", "datalist", "=", "[", "]", "\n", "\n", "self", ".", "h", "=", "arg", ".", "get", "(", "'height'", ")", "\n", "self", ".", "w", "=", "arg", ".", "get", "(", "'width'", ")", "\n", "self", ".", "nc", "=", "arg", ".", "get", "(", "'nc'", ")", "\n", "self", ".", "ncond", "=", "arg", ".", "get", "(", "'ncond'", ",", "1", ")", "\n", "self", ".", "npred", "=", "arg", ".", "get", "(", "'npred'", ",", "1", ")", "\n", "\n", "# reading", "\n", "self", ".", "fnames", "=", "[", "'trace_0'", ",", "\n", "'trace_1'", ",", "\n", "'trace_2'", ",", "\n", "'trace_3'", ",", "\n", "'trace_4'", ",", "\n", "'trace_5'", ",", "\n", "'trace_6'", ",", "\n", "'trace_7'", ",", "\n", "'trace_8'", ",", "\n", "'trace_9'", ",", "\n", "'trace_10'", ",", "\n", "'trace_11'", "]", "\n", "self", ".", "datalist", "=", "[", "]", "\n", "total_frames", "=", "0", "\n", "for", "fname", "in", "self", ".", "fnames", ":", "\n", "            ", "abs_fname_action", "=", "'{}/labels/{}.csv'", ".", "format", "(", "arg", ".", "get", "(", "\"datapath\"", ")", ",", "fname", ")", "\n", "\n", "with", "open", "(", "abs_fname_action", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "reader", "=", "csv", ".", "reader", "(", "f", ")", "\n", "actions", "=", "map", "(", "tuple", ",", "reader", ")", "\n", "", "actions", "=", "numpy", ".", "array", "(", "actions", "[", "1", ":", "]", ")", "\n", "\n", "\n", "abs_fname_video", "=", "'{}/videos/{}'", ".", "format", "(", "arg", ".", "get", "(", "\"datapath\"", ")", ",", "fname", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "abs_fname_video", "+", "'.npy'", ")", ":", "\n", "                ", "print", "(", "'loading presaved numpy array {}'", ".", "format", "(", "abs_fname_video", "+", "'.npy'", ")", ")", "\n", "frames", "=", "numpy", ".", "load", "(", "abs_fname_video", "+", "'.npy'", ")", "\n", "total_frames", "+=", "len", "(", "frames", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "'loading {}'", ".", "format", "(", "abs_fname_video", "+", "'.avi'", ")", ")", "\n", "vid", "=", "imageio", ".", "get_reader", "(", "abs_fname_video", "+", "'.avi'", ",", "'ffmpeg'", ")", "\n", "frames", "=", "[", "]", "\n", "for", "i", ",", "im", "in", "enumerate", "(", "vid", ")", ":", "\n", "                    ", "r_img", "=", "misc", ".", "imresize", "(", "im", ",", "(", "self", ".", "h", ",", "self", ".", "w", ")", ")", "\n", "frames", ".", "append", "(", "r_img", ")", "\n", "", "frames", "=", "numpy", ".", "array", "(", "frames", ")", "\n", "numpy", ".", "save", "(", "abs_fname_video", "+", "'.npy'", ",", "frames", ")", "\n", "\n", "", "self", ".", "datalist", ".", "append", "(", "{", "'frames'", ":", "frames", ",", "'actions'", ":", "actions", "}", ")", "\n", "\n", "# pointers", "\n", "", "self", ".", "iter_video_ptr", "=", "0", "\n", "self", ".", "iter_sample_ptr", "=", "self", ".", "ncond", "\n", "self", ".", "datalist_train", "=", "self", ".", "datalist", "[", ":", "-", "4", "]", "\n", "self", ".", "datalist_valid", "=", "self", ".", "datalist", "[", "-", "4", ":", "-", "3", "]", "\n", "self", ".", "datalist_test", "=", "self", ".", "datalist", "[", "-", "3", ":", "]", "\n", "\n", "print", "(", "\"Dataloader constructed done, {} frames\"", ".", "format", "(", "total_frames", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mbhenaff_EEN.dataloaders.data_driving.ImageLoader.reset_ptrs": [[80, 83], ["None"], "methods", ["None"], ["", "def", "reset_ptrs", "(", "self", ")", ":", "\n", "        ", "self", ".", "iter_video_ptr", "=", "0", "\n", "self", ".", "iter_sample_ptr", "=", "self", ".", "ncond", "\n", "\n"]], "home.repos.pwc.inspect_result.mbhenaff_EEN.dataloaders.data_driving.ImageLoader._sample_time": [[84, 92], ["random.randint"], "methods", ["None"], ["", "def", "_sample_time", "(", "self", ",", "video", ",", "actions", ",", "num_cond", ",", "num_pred", ")", ":", "\n", "        ", "start_pos", "=", "random", ".", "randint", "(", "num_cond", "+", "1", ",", "video", ".", "shape", "[", "0", "]", "-", "num_pred", "-", "2", ")", "\n", "#        actions = actions[start_pos-num_cond:start_pos]", "\n", "cond_frames", "=", "video", "[", "start_pos", "-", "num_cond", ":", "start_pos", "]", "\n", "pred_frames", "=", "video", "[", "start_pos", ":", "start_pos", "+", "num_pred", "]", "\n", "actions", "=", "actions", "[", "(", "start_pos", "-", "1", ")", ":", "(", "start_pos", "-", "1", ")", "+", "num_pred", "]", "\n", "#        actions = actions[(start_pos-0):(start_pos-0)+num_pred]", "\n", "return", "cond_frames", ",", "pred_frames", ",", "actions", "\n", "\n"]], "home.repos.pwc.inspect_result.mbhenaff_EEN.dataloaders.data_driving.ImageLoader._iterate_time": [[93, 98], ["None"], "methods", ["None"], ["", "def", "_iterate_time", "(", "self", ",", "video", ",", "start_pos", ",", "actions", ",", "num_cond", ",", "num_pred", ")", ":", "\n", "        ", "cond_frames", "=", "video", "[", "start_pos", "-", "num_cond", ":", "start_pos", "]", "\n", "pred_frames", "=", "video", "[", "start_pos", ":", "start_pos", "+", "num_pred", "]", "\n", "actions", "=", "actions", "[", "start_pos", ":", "start_pos", "+", "num_pred", "]", "\n", "return", "cond_frames", ",", "pred_frames", ",", "actions", "\n", "\n"]], "home.repos.pwc.inspect_result.mbhenaff_EEN.dataloaders.data_driving.ImageLoader.get_iterated_batch": [[99, 142], ["numpy.array", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "data_driving.ImageLoader.arg.get", "sample.get", "sample.get", "numpy.array", "numpy.array", "torch.from_numpy().float.squeeze", "len", "data_driving.ImageLoader._iterate_time", "cond_frames.append", "pred_frames.append", "numpy.array.append", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "actions_ts[].gt", "len", "numpy.transpose", "numpy.transpose", "numpy.array.astype"], "methods", ["home.repos.pwc.inspect_result.mbhenaff_EEN.dataloaders.data_atari.ImageLoader._iterate_time"], ["", "def", "get_iterated_batch", "(", "self", ",", "set", ")", ":", "\n", "        ", "cond_frames", ",", "pred_frames", ",", "actions", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "assert", "(", "set", "==", "'test'", ")", "\n", "if", "set", "==", "'train'", ":", "\n", "            ", "datalist", "=", "self", ".", "datalist_train", "\n", "", "elif", "set", "==", "'valid'", ":", "\n", "            ", "datalist", "=", "self", ".", "datalist_valid", "\n", "", "elif", "set", "==", "'test'", ":", "\n", "            ", "datalist", "=", "self", ".", "datalist_test", "\n", "\n", "# rolling", "\n", "", "id", "=", "1", "\n", "while", "id", "<=", "self", ".", "arg", ".", "get", "(", "\"batchsize\"", ")", ":", "\n", "            ", "if", "self", ".", "iter_video_ptr", "==", "len", "(", "datalist", ")", ":", "\n", "                ", "return", "None", ",", "None", ",", "None", "\n", "", "sample", "=", "datalist", "[", "self", ".", "iter_video_ptr", "]", "\n", "sample_video", "=", "sample", ".", "get", "(", "'frames'", ")", "\n", "sample_actions", "=", "sample", ".", "get", "(", "'actions'", ")", "\n", "if", "self", ".", "iter_sample_ptr", "+", "self", ".", "npred", ">", "sample_video", ".", "shape", "[", "0", "]", ":", "\n", "                ", "self", ".", "iter_video_ptr", "+=", "1", "\n", "self", ".", "iter_sample_ptr", "=", "self", ".", "ncond", "\n", "", "else", ":", "\n", "                ", "selected_cond_frames", ",", "selected_pred_frames", ",", "selected_actions", "=", "self", ".", "_iterate_time", "(", "\n", "sample_video", ",", "self", ".", "iter_sample_ptr", ",", "sample_actions", ",", "self", ".", "ncond", ",", "self", ".", "npred", ")", "\n", "assert", "(", "len", "(", "selected_actions", ")", ">", "0", ")", "\n", "cond_frames", ".", "append", "(", "selected_cond_frames", ")", "\n", "pred_frames", ".", "append", "(", "selected_pred_frames", ")", "\n", "actions", ".", "append", "(", "selected_actions", ")", "\n", "id", "+=", "1", "\n", "self", ".", "iter_sample_ptr", "+=", "1", "\n", "\n", "\n", "# processing on the numpy array level ", "\n", "", "", "cond_frames", "=", "numpy", ".", "array", "(", "cond_frames", ",", "dtype", "=", "'float'", ")", "/", "255.0", "\n", "pred_frames", "=", "numpy", ".", "array", "(", "pred_frames", ",", "dtype", "=", "'float'", ")", "/", "255.0", "\n", "actions", "=", "numpy", ".", "array", "(", "actions", ")", "\n", "\n", "# return tensor", "\n", "cond_frames_ts", "=", "torch", ".", "from_numpy", "(", "numpy", ".", "transpose", "(", "cond_frames", ",", "(", "0", ",", "1", ",", "4", ",", "2", ",", "3", ")", ")", ")", ".", "float", "(", ")", "\n", "pred_frames_ts", "=", "torch", ".", "from_numpy", "(", "numpy", ".", "transpose", "(", "pred_frames", ",", "(", "0", ",", "1", ",", "4", ",", "2", ",", "3", ")", ")", ")", ".", "float", "(", ")", "\n", "actions_ts", "=", "torch", ".", "from_numpy", "(", "actions", ".", "astype", "(", "'float'", ")", ")", ".", "float", "(", ")", "\n", "actions_ts", "[", ":", ",", ":", ",", "1", "]", "[", "actions_ts", "[", ":", ",", ":", ",", "1", "]", ".", "gt", "(", "0", ")", "]", "=", "1", "\n", "return", "cond_frames_ts", ",", "pred_frames_ts", ",", "actions_ts", ".", "squeeze", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mbhenaff_EEN.dataloaders.data_driving.ImageLoader.get_batch": [[146, 184], ["numpy.array", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "data_driving.ImageLoader.arg.get", "random.choice", "random.choice.get", "random.choice.get", "data_driving.ImageLoader._sample_time", "cond_frames.append", "pred_frames.append", "numpy.array.append", "numpy.array", "numpy.array", "torch.from_numpy().float().cuda.squeeze", "len", "pdb.set_trace", "len", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.transpose", "numpy.transpose", "numpy.array.astype"], "methods", ["home.repos.pwc.inspect_result.mbhenaff_EEN.dataloaders.data_atari.ImageLoader._sample_time"], ["", "def", "get_batch", "(", "self", ",", "set", ")", ":", "\n", "        ", "cond_frames", ",", "pred_frames", ",", "actions", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "if", "set", "==", "'train'", ":", "\n", "            ", "datalist", "=", "self", ".", "datalist_train", "\n", "", "elif", "set", "==", "'valid'", ":", "\n", "            ", "datalist", "=", "self", ".", "datalist_valid", "\n", "", "elif", "set", "==", "'test'", ":", "\n", "            ", "datalist", "=", "self", ".", "datalist_test", "\n", "\n", "# rolling", "\n", "", "id", "=", "1", "\n", "while", "id", "<=", "self", ".", "arg", ".", "get", "(", "\"batchsize\"", ")", ":", "\n", "            ", "sample", "=", "random", ".", "choice", "(", "datalist", ")", "\n", "sample_video", "=", "sample", ".", "get", "(", "'frames'", ")", "\n", "sample_actions", "=", "sample", ".", "get", "(", "'actions'", ")", "\n", "selected_cond_frames", ",", "selected_pred_frames", ",", "selected_actions", "=", "self", ".", "_sample_time", "(", "\n", "sample_video", ",", "sample_actions", ",", "self", ".", "ncond", ",", "self", ".", "npred", ")", "\n", "\n", "if", "len", "(", "selected_actions", ")", "==", "0", ":", "\n", "                ", "pdb", ".", "set_trace", "(", ")", "\n", "", "assert", "(", "len", "(", "selected_actions", ")", ">", "0", ")", "\n", "cond_frames", ".", "append", "(", "selected_cond_frames", ")", "\n", "pred_frames", ".", "append", "(", "selected_pred_frames", ")", "\n", "actions", ".", "append", "(", "selected_actions", ")", "\n", "id", "+=", "1", "\n", "\n", "\n", "# processing on the numpy array level ", "\n", "", "cond_frames", "=", "numpy", ".", "array", "(", "cond_frames", ",", "dtype", "=", "'float'", ")", "/", "255.0", "\n", "pred_frames", "=", "numpy", ".", "array", "(", "pred_frames", ",", "dtype", "=", "'float'", ")", "/", "255.0", "\n", "actions", "=", "numpy", ".", "array", "(", "actions", ")", "\n", "\n", "# return tensor", "\n", "cond_frames_ts", "=", "torch", ".", "from_numpy", "(", "numpy", ".", "transpose", "(", "cond_frames", ",", "(", "0", ",", "1", ",", "4", ",", "2", ",", "3", ")", ")", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "pred_frames_ts", "=", "torch", ".", "from_numpy", "(", "numpy", ".", "transpose", "(", "pred_frames", ",", "(", "0", ",", "1", ",", "4", ",", "2", ",", "3", ")", ")", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "actions_ts", "=", "torch", ".", "from_numpy", "(", "actions", ".", "astype", "(", "'float'", ")", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "return", "cond_frames_ts", ",", "pred_frames_ts", ",", "actions_ts", ".", "squeeze", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mbhenaff_EEN.dataloaders.data_driving.ImageLoader.get_paired_batch": [[185, 197], ["data_driving.ImageLoader.get_batch", "target[].unsqueeze", "torch.cat", "target[].unsqueeze"], "methods", ["home.repos.pwc.inspect_result.mbhenaff_EEN.dataloaders.data_atari.ImageLoader.get_batch"], ["", "def", "get_paired_batch", "(", "self", ",", "split", ")", ":", "\n", "# hardcoded", "\n", "        ", "assert", "(", "self", ".", "npred", "==", "2", ")", "\n", "assert", "(", "self", ".", "ncond", "==", "4", ")", "\n", "cond", ",", "target", ",", "action", "=", "self", ".", "get_batch", "(", "split", ")", "\n", "cond1", "=", "cond", "\n", "target1", "=", "target", "[", ":", ",", "0", "]", ".", "unsqueeze", "(", "1", ")", "\n", "action1", "=", "action", "[", ":", ",", "0", "]", "\n", "cond2", "=", "torch", ".", "cat", "(", "(", "cond", "[", ":", ",", "1", ":", "]", ",", "target1", ")", ",", "1", ")", "\n", "target2", "=", "target", "[", ":", ",", "1", "]", ".", "unsqueeze", "(", "1", ")", "\n", "action2", "=", "action", "[", ":", ",", "1", "]", "\n", "return", "cond1", ",", "target1", ",", "action1", ",", "cond2", ",", "target2", ",", "action2", "\n", "\n"]], "home.repos.pwc.inspect_result.mbhenaff_EEN.dataloaders.data_driving.ImageLoader.plot_seq": [[200, 205], ["torch.cat", "cond_pred.view.view.view", "torchvision.utils.make_grid"], "methods", ["None"], ["", "def", "plot_seq", "(", "self", ",", "cond", ",", "pred", ")", ":", "\n", "        ", "cond_pred", "=", "torch", ".", "cat", "(", "(", "cond", ",", "pred", ")", ",", "1", ")", "\n", "cond_pred", "=", "cond_pred", ".", "view", "(", "-", "1", ",", "self", ".", "nc", ",", "self", ".", "h", ",", "self", ".", "w", ")", "\n", "grid", "=", "torchvision", ".", "utils", ".", "make_grid", "(", "cond_pred", ",", "self", ".", "ncond", "+", "self", ".", "npred", ",", "pad_value", "=", "1", ")", "\n", "return", "grid", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mbhenaff_EEN.dataloaders.data_atari.ImageLoader._load_set": [[9, 37], ["os.listdir", "print", "range", "data_atari.ImageLoader.arg.get", "random.choice", "datalist.append", "numpy.load.close", "gc.collect", "numpy.load", "len", "len", "len", "print"], "methods", ["None"], ["    ", "def", "_load_set", "(", "self", ",", "split", ",", "n_episodes", ")", ":", "\n", "        ", "datalist", "=", "[", "]", "\n", "datapath", "=", "'{}/{}'", ".", "format", "(", "self", ".", "arg", ".", "get", "(", "\"datapath\"", ")", ",", "split", ")", "\n", "flist", "=", "os", ".", "listdir", "(", "datapath", ")", "\n", "print", "(", "'loading {} new episodes for {} set'", ".", "format", "(", "n_episodes", ",", "split", ")", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "n_episodes", ")", ":", "\n", "            ", "if", "split", "==", "'train'", ":", "\n", "                ", "fdname", "=", "random", ".", "choice", "(", "flist", ")", "\n", "", "else", ":", "\n", "                ", "fdname", "=", "flist", "[", "i", "]", "\n", "", "abs_fdname", "=", "'{}/{}'", ".", "format", "(", "datapath", ",", "fdname", ")", "\n", "episode", "=", "None", "\n", "while", "(", "episode", "==", "None", ")", ":", "\n", "#                print('loading {}'.format(abs_fdname))", "\n", "                ", "try", ":", "\n", "                    ", "episode", "=", "numpy", ".", "load", "(", "abs_fdname", ")", "\n", "", "except", ":", "\n", "                    ", "print", "(", "'problem loading {}'", ".", "format", "(", "abs_fdname", ")", ")", "\n", "break", "\n", "\n", "", "states", "=", "episode", "[", "'states'", "]", "\n", "actions", "=", "episode", "[", "'actions'", "]", "\n", "assert", "(", "len", "(", "states", ")", "==", "len", "(", "actions", ")", ")", "\n", "assert", "(", "len", "(", "states", ")", ">", "0", ")", "\n", "datalist", ".", "append", "(", "{", "'states'", ":", "states", ",", "'actions'", ":", "actions", "}", ")", "\n", "episode", ".", "close", "(", ")", "\n", "gc", ".", "collect", "(", ")", "\n", "", "", "return", "datalist", "\n", "\n"]], "home.repos.pwc.inspect_result.mbhenaff_EEN.dataloaders.data_atari.ImageLoader.__init__": [[40, 59], ["object.__init__", "arg.get", "arg.get", "arg.get", "arg.get", "arg.get", "data_atari.ImageLoader._load_set", "data_atari.ImageLoader._load_set", "data_atari.ImageLoader._load_set", "print"], "methods", ["home.repos.pwc.inspect_result.mbhenaff_EEN.dataloaders.data_atari.ImageLoader.__init__", "home.repos.pwc.inspect_result.mbhenaff_EEN.dataloaders.data_atari.ImageLoader._load_set", "home.repos.pwc.inspect_result.mbhenaff_EEN.dataloaders.data_atari.ImageLoader._load_set", "home.repos.pwc.inspect_result.mbhenaff_EEN.dataloaders.data_atari.ImageLoader._load_set"], ["", "def", "__init__", "(", "self", ",", "arg", ")", ":", "\n", "        ", "super", "(", "ImageLoader", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "arg", "=", "arg", "\n", "self", ".", "datalist", "=", "[", "]", "\n", "\n", "self", ".", "h", "=", "arg", ".", "get", "(", "'height'", ")", "\n", "self", ".", "w", "=", "arg", ".", "get", "(", "'width'", ")", "\n", "self", ".", "nc", "=", "arg", ".", "get", "(", "'nc'", ")", "\n", "self", ".", "ncond", "=", "arg", ".", "get", "(", "'ncond'", ",", "4", ")", "\n", "self", ".", "npred", "=", "arg", ".", "get", "(", "'npred'", ",", "4", ")", "\n", "self", ".", "datalist_train", "=", "self", ".", "_load_set", "(", "'train'", ",", "500", ")", "\n", "self", ".", "datalist_valid", "=", "self", ".", "_load_set", "(", "'valid'", ",", "200", ")", "\n", "self", ".", "datalist_test", "=", "self", ".", "_load_set", "(", "'test'", ",", "200", ")", "\n", "\n", "self", ".", "iter_video_ptr", "=", "0", "\n", "self", ".", "iter_sample_ptr", "=", "self", ".", "ncond", "\n", "self", ".", "train_batch_cntr", "=", "0", "\n", "\n", "print", "(", "\"Dataloader for Atari constructed done\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mbhenaff_EEN.dataloaders.data_atari.ImageLoader.reset_ptrs": [[61, 64], ["None"], "methods", ["None"], ["", "def", "reset_ptrs", "(", "self", ")", ":", "\n", "        ", "self", ".", "iter_video_ptr", "=", "0", "\n", "self", ".", "iter_sample_ptr", "=", "self", ".", "ncond", "\n", "\n"]], "home.repos.pwc.inspect_result.mbhenaff_EEN.dataloaders.data_atari.ImageLoader._sample_time": [[65, 71], ["random.randint"], "methods", ["None"], ["", "def", "_sample_time", "(", "self", ",", "video", ",", "actions", ",", "num_cond", ",", "num_pred", ")", ":", "\n", "        ", "start_pos", "=", "random", ".", "randint", "(", "num_cond", "+", "1", ",", "video", ".", "shape", "[", "0", "]", "-", "num_pred", "-", "2", ")", "\n", "cond_frames", "=", "video", "[", "start_pos", "-", "num_cond", ":", "start_pos", "]", "\n", "pred_frames", "=", "video", "[", "start_pos", ":", "start_pos", "+", "num_pred", "]", "\n", "actions", "=", "actions", "[", "start_pos", ":", "start_pos", "+", "num_pred", "]", "\n", "return", "cond_frames", ",", "pred_frames", ",", "actions", "\n", "\n"]], "home.repos.pwc.inspect_result.mbhenaff_EEN.dataloaders.data_atari.ImageLoader._iterate_time": [[72, 77], ["None"], "methods", ["None"], ["", "def", "_iterate_time", "(", "self", ",", "video", ",", "start_pos", ",", "actions", ",", "num_cond", ",", "num_pred", ")", ":", "\n", "        ", "cond_frames", "=", "video", "[", "start_pos", "-", "num_cond", ":", "start_pos", "]", "\n", "pred_frames", "=", "video", "[", "start_pos", ":", "start_pos", "+", "num_pred", "]", "\n", "actions", "=", "actions", "[", "start_pos", ":", "start_pos", "+", "num_pred", "]", "\n", "return", "cond_frames", ",", "pred_frames", ",", "actions", "\n", "\n"]], "home.repos.pwc.inspect_result.mbhenaff_EEN.dataloaders.data_atari.ImageLoader.get_batch": [[79, 119], ["numpy.array", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "data_atari.ImageLoader.arg.get", "random.choice", "random.choice.get", "random.choice.get", "numpy.array", "numpy.array", "torch.from_numpy().float.cuda", "torch.from_numpy().float.cuda", "torch.from_numpy().float.cuda", "data_atari.ImageLoader._load_set", "len", "data_atari.ImageLoader._sample_time", "cond_frames.append", "pred_frames.append", "numpy.array.append", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "len", "numpy.array.squeeze"], "methods", ["home.repos.pwc.inspect_result.mbhenaff_EEN.dataloaders.data_atari.ImageLoader._load_set", "home.repos.pwc.inspect_result.mbhenaff_EEN.dataloaders.data_atari.ImageLoader._sample_time"], ["", "def", "get_batch", "(", "self", ",", "split", ")", ":", "\n", "        ", "cond_frames", ",", "pred_frames", ",", "actions", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "if", "split", "==", "'train'", ":", "\n", "# since the training set is large, we fetch new episodes every so often", "\n", "            ", "if", "self", ".", "train_batch_cntr", "==", "1000", ":", "\n", "                ", "self", ".", "datalist_train", "=", "self", ".", "_load_set", "(", "'train'", ",", "500", ")", "\n", "self", ".", "train_batch_cntr", "=", "0", "\n", "", "else", ":", "\n", "                ", "self", ".", "train_batch_cntr", "+=", "1", "\n", "", "this_set", "=", "self", ".", "datalist_train", "\n", "", "elif", "split", "==", "'valid'", ":", "\n", "            ", "this_set", "=", "self", ".", "datalist_valid", "\n", "", "elif", "split", "==", "'test'", ":", "\n", "            ", "this_set", "=", "self", ".", "datalist_test", "\n", "\n", "# rolling", "\n", "", "id", "=", "1", "\n", "while", "id", "<=", "self", ".", "arg", ".", "get", "(", "\"batchsize\"", ")", ":", "\n", "            ", "sample", "=", "random", ".", "choice", "(", "this_set", ")", "\n", "sample_video", "=", "sample", ".", "get", "(", "'states'", ")", "\n", "sample_actions", "=", "sample", ".", "get", "(", "'actions'", ")", "\n", "if", "len", "(", "sample_actions", ")", ">", "self", ".", "ncond", "+", "self", ".", "npred", "+", "2", ":", "\n", "                ", "selected_cond_frames", ",", "selected_pred_frames", ",", "selected_actions", "=", "self", ".", "_sample_time", "(", "\n", "sample_video", ",", "sample_actions", ",", "self", ".", "ncond", ",", "self", ".", "npred", ")", "\n", "assert", "(", "len", "(", "selected_actions", ")", ">", "0", ")", "\n", "cond_frames", ".", "append", "(", "selected_cond_frames", ")", "\n", "pred_frames", ".", "append", "(", "selected_pred_frames", ")", "\n", "actions", ".", "append", "(", "selected_actions", ")", "\n", "id", "+=", "1", "\n", "\n", "# processing on the numpy array level ", "\n", "", "", "cond_frames", "=", "numpy", ".", "array", "(", "cond_frames", ",", "dtype", "=", "'float'", ")", "/", "255.0", "\n", "pred_frames", "=", "numpy", ".", "array", "(", "pred_frames", ",", "dtype", "=", "'float'", ")", "/", "255.0", "\n", "actions", "=", "numpy", ".", "array", "(", "actions", ",", "dtype", "=", "'float'", ")", "\n", "\n", "# return tensor", "\n", "cond_frames_ts", "=", "torch", ".", "from_numpy", "(", "cond_frames", ")", ".", "float", "(", ")", "\n", "pred_frames_ts", "=", "torch", ".", "from_numpy", "(", "pred_frames", ")", ".", "float", "(", ")", "\n", "actions_ts", "=", "torch", ".", "from_numpy", "(", "actions", ".", "squeeze", "(", ")", ")", ".", "float", "(", ")", "\n", "return", "cond_frames_ts", ".", "cuda", "(", ")", ",", "pred_frames_ts", ".", "cuda", "(", ")", ",", "actions_ts", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mbhenaff_EEN.dataloaders.data_atari.ImageLoader.get_paired_batch": [[122, 134], ["data_atari.ImageLoader.get_batch", "target[].unsqueeze", "torch.cat", "target[].unsqueeze", "cond1.clone", "target[].unsqueeze.clone", "action1.clone", "torch.cat.clone", "target[].unsqueeze.clone", "action2.clone"], "methods", ["home.repos.pwc.inspect_result.mbhenaff_EEN.dataloaders.data_atari.ImageLoader.get_batch"], ["", "def", "get_paired_batch", "(", "self", ",", "split", ")", ":", "\n", "# hardcoded", "\n", "        ", "assert", "(", "self", ".", "npred", "==", "2", ")", "\n", "assert", "(", "self", ".", "ncond", "==", "4", ")", "\n", "cond", ",", "target", ",", "action", "=", "self", ".", "get_batch", "(", "split", ")", "\n", "cond1", "=", "cond", "\n", "target1", "=", "target", "[", ":", ",", "0", "]", ".", "unsqueeze", "(", "1", ")", "\n", "action1", "=", "action", "[", ":", ",", "0", "]", "\n", "cond2", "=", "torch", ".", "cat", "(", "(", "cond", "[", ":", ",", "1", ":", "]", ",", "target1", ")", ",", "1", ")", "\n", "target2", "=", "target", "[", ":", ",", "1", "]", ".", "unsqueeze", "(", "1", ")", "\n", "action2", "=", "action", "[", ":", ",", "1", "]", "\n", "return", "cond1", ".", "clone", "(", ")", ",", "target1", ".", "clone", "(", ")", ",", "action1", ".", "clone", "(", ")", ",", "cond2", ".", "clone", "(", ")", ",", "target2", ".", "clone", "(", ")", ",", "action2", ".", "clone", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mbhenaff_EEN.dataloaders.data_atari.ImageLoader.get_iterated_batch": [[137, 177], ["numpy.array", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "data_atari.ImageLoader.arg.get", "sample.get", "sample.get", "numpy.array", "numpy.array", "torch.from_numpy().float.cuda", "torch.from_numpy().float.cuda", "torch.from_numpy().float.cuda", "len", "data_atari.ImageLoader._iterate_time", "cond_frames.append", "pred_frames.append", "numpy.array.append", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "len", "numpy.array.squeeze"], "methods", ["home.repos.pwc.inspect_result.mbhenaff_EEN.dataloaders.data_atari.ImageLoader._iterate_time"], ["", "def", "get_iterated_batch", "(", "self", ",", "split", ")", ":", "\n", "        ", "if", "split", "==", "'train'", ":", "\n", "            ", "this_set", "=", "self", ".", "datalist_train", "\n", "", "elif", "split", "==", "'valid'", ":", "\n", "            ", "this_set", "=", "self", ".", "datalist_valid", "\n", "", "elif", "split", "==", "'test'", ":", "\n", "            ", "this_set", "=", "self", ".", "datalist_test", "\n", "\n", "", "cond_frames", ",", "pred_frames", ",", "actions", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "# rolling", "\n", "id", "=", "1", "\n", "while", "id", "<=", "self", ".", "arg", ".", "get", "(", "\"batchsize\"", ")", ":", "\n", "            ", "if", "self", ".", "iter_video_ptr", "==", "len", "(", "this_set", ")", ":", "\n", "                ", "return", "None", ",", "None", ",", "None", "\n", "", "sample", "=", "this_set", "[", "self", ".", "iter_video_ptr", "]", "\n", "sample_video", "=", "sample", ".", "get", "(", "'states'", ")", "\n", "sample_actions", "=", "sample", ".", "get", "(", "'actions'", ")", "\n", "if", "self", ".", "iter_sample_ptr", "+", "self", ".", "npred", ">", "sample_video", ".", "shape", "[", "0", "]", ":", "\n", "                ", "self", ".", "iter_video_ptr", "+=", "1", "\n", "self", ".", "iter_sample_ptr", "=", "self", ".", "ncond", "\n", "", "else", ":", "\n", "                ", "selected_cond_frames", ",", "selected_pred_frames", ",", "selected_actions", "=", "self", ".", "_iterate_time", "(", "\n", "sample_video", ",", "self", ".", "iter_sample_ptr", ",", "sample_actions", ",", "self", ".", "ncond", ",", "self", ".", "npred", ")", "\n", "assert", "(", "len", "(", "selected_actions", ")", ">", "0", ")", "\n", "cond_frames", ".", "append", "(", "selected_cond_frames", ")", "\n", "pred_frames", ".", "append", "(", "selected_pred_frames", ")", "\n", "actions", ".", "append", "(", "selected_actions", ")", "\n", "id", "+=", "1", "\n", "self", ".", "iter_sample_ptr", "+=", "10", "\n", "\n", "# processing on the numpy array level ", "\n", "", "", "cond_frames", "=", "numpy", ".", "array", "(", "cond_frames", ",", "dtype", "=", "'float'", ")", "/", "255.0", "\n", "pred_frames", "=", "numpy", ".", "array", "(", "pred_frames", ",", "dtype", "=", "'float'", ")", "/", "255.0", "\n", "actions", "=", "numpy", ".", "array", "(", "actions", ",", "dtype", "=", "'float'", ")", "\n", "\n", "# return tensor", "\n", "cond_frames_ts", "=", "torch", ".", "from_numpy", "(", "cond_frames", ")", ".", "float", "(", ")", "\n", "pred_frames_ts", "=", "torch", ".", "from_numpy", "(", "pred_frames", ")", ".", "float", "(", ")", "\n", "actions_ts", "=", "torch", ".", "from_numpy", "(", "actions", ".", "squeeze", "(", ")", ")", ".", "float", "(", ")", "\n", "return", "cond_frames_ts", ".", "cuda", "(", ")", ",", "pred_frames_ts", ".", "cuda", "(", ")", ",", "actions_ts", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mbhenaff_EEN.dataloaders.data_atari.ImageLoader.plot_seq": [[181, 186], ["torch.cat", "cond_pred.view.view.view", "torchvision.utils.make_grid"], "methods", ["None"], ["", "def", "plot_seq", "(", "self", ",", "cond", ",", "pred", ")", ":", "\n", "        ", "cond_pred", "=", "torch", ".", "cat", "(", "(", "cond", ",", "pred", ")", ",", "1", ")", "\n", "cond_pred", "=", "cond_pred", ".", "view", "(", "-", "1", ",", "self", ".", "nc", ",", "self", ".", "h", ",", "self", ".", "w", ")", "\n", "grid", "=", "torchvision", ".", "utils", ".", "make_grid", "(", "cond_pred", ",", "self", ".", "ncond", "+", "self", ".", "npred", ",", "pad_value", "=", "1", ",", "normalize", "=", "True", ")", "\n", "return", "grid", "\n", "", "", ""]]}