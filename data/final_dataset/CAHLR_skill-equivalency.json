{"home.repos.pwc.inspect_result.CAHLR_skill-equivalency.None.translate.translation_model.__init__": [[35, 38], ["super().__init__", "torch.nn.Linear().to", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.CAHLR_skill-equivalency.None.translate.translation_model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", ",", "out_dim", ",", "device", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "linear", "=", "torch", ".", "nn", ".", "Linear", "(", "in_features", "=", "in_dim", ",", "out_features", "=", "out_dim", ",", "bias", "=", "True", ")", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CAHLR_skill-equivalency.None.translate.translation_model.l2_normalization": [[39, 41], ["torch.div", "torch.sqrt", "torch.mul().sum().unsqueeze", "torch.mul().sum", "torch.mul"], "methods", ["None"], ["", "def", "l2_normalization", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "torch", ".", "div", "(", "x", ",", "torch", ".", "sqrt", "(", "torch", ".", "mul", "(", "x", ",", "x", ")", ".", "sum", "(", "axis", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CAHLR_skill-equivalency.None.translate.translation_model.translate": [[42, 44], ["translate.translation_model.l2_normalization", "translate.translation_model.linear"], "methods", ["home.repos.pwc.inspect_result.CAHLR_skill-equivalency.skill_representations.content2vec.l2_normalization"], ["", "def", "translate", "(", "self", ",", "src", ")", ":", "\n", "        ", "return", "self", ".", "l2_normalization", "(", "self", ".", "linear", "(", "src", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CAHLR_skill-equivalency.None.translate.translation_model.get_cos_similarity": [[45, 51], ["translate.translation_model.l2_normalization", "translate.translation_model.l2_normalization", "translate.translation_model.unsqueeze().repeat", "translate.translation_model.unsqueeze().repeat", "torch.mul().sum", "translate.translation_model.size", "translate.translation_model.size", "translate.translation_model.unsqueeze", "translate.translation_model.unsqueeze", "torch.mul"], "methods", ["home.repos.pwc.inspect_result.CAHLR_skill-equivalency.skill_representations.content2vec.l2_normalization", "home.repos.pwc.inspect_result.CAHLR_skill-equivalency.skill_representations.content2vec.l2_normalization"], ["", "def", "get_cos_similarity", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "x", "=", "self", ".", "l2_normalization", "(", "x", ")", "\n", "y", "=", "self", ".", "l2_normalization", "(", "y", ")", "\n", "new_x", "=", "x", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "y", ".", "size", "(", "0", ")", ",", "1", ")", "\n", "new_y", "=", "y", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", ")", "\n", "return", "torch", ".", "mul", "(", "new_x", ",", "new_y", ")", ".", "sum", "(", "axis", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CAHLR_skill-equivalency.None.translate.string_to_float": [[8, 14], ["float", "zlib.crc32", "string.encode"], "function", ["None"], ["def", "string_to_float", "(", "string", ")", ":", "\n", "    ", "'''\n    Hash function that uniformly maps any string to a random number in (0,1)\n    Used to split training and test sets\n    '''", "\n", "return", "float", "(", "crc32", "(", "string", ".", "encode", "(", "\"utf-8\"", ")", ")", "&", "0xffffffff", ")", "/", "2", "**", "32", "\n", "\n"]], "home.repos.pwc.inspect_result.CAHLR_skill-equivalency.None.translate.split_labels": [[16, 32], ["pandas.read_csv", "labels[].apply", "labels[].drop", "labels[].drop", "labels[].drop.to_csv", "labels[].drop.to_csv"], "function", ["None"], ["", "def", "split_labels", "(", "labels_path", ",", "test_ratio", "=", "0.2", ")", ":", "\n", "    ", "'''\n    Split labels into training and test sets\n    New splits are saved under the same folder as labels_path\n    '''", "\n", "labels", "=", "pd", ".", "read_csv", "(", "labels_path", ")", "\n", "labels", "[", "\"random\"", "]", "=", "labels", "[", "\"source\"", "]", ".", "apply", "(", "string_to_float", ")", "\n", "training_labels", "=", "labels", "[", "labels", "[", "\"random\"", "]", ">", "test_ratio", "]", ".", "drop", "(", "columns", "=", "\"random\"", ")", "\n", "test_labels", "=", "labels", "[", "labels", "[", "\"random\"", "]", "<=", "test_ratio", "]", ".", "drop", "(", "columns", "=", "\"random\"", ")", "\n", "\n", "training_labels_path", "=", "labels_path", "[", ":", "-", "4", "]", "+", "\"_training.csv\"", "\n", "test_labels_path", "=", "labels_path", "[", ":", "-", "4", "]", "+", "\"_test.csv\"", "\n", "\n", "training_labels", ".", "to_csv", "(", "training_labels_path", ",", "index", "=", "False", ")", "\n", "test_labels", ".", "to_csv", "(", "test_labels_path", ",", "index", "=", "False", ")", "\n", "return", "training_labels_path", ",", "test_labels_path", "\n", "\n"]], "home.repos.pwc.inspect_result.CAHLR_skill-equivalency.None.translate.learn_translation_model": [[53, 98], ["labels[].apply", "labels[].apply", "translate.translation_model", "torch.optim.Adam", "torch.tensor().to", "torch.tensor().to", "float", "range", "numpy.random.permutation", "translation_model.parameters", "translation_model.train", "torch.optim.Adam.zero_grad", "translation_model.translate", "translate.translation_model.get_cos_similarity", "torch.sum", "torch.sum.backward", "torch.optim.Adam.step", "torch.sum", "src_vectors.index.tolist().index", "dst_vectors.index.tolist().index", "int", "torch.tensor", "torch.tensor", "copy.deepcopy", "print", "labels.index.isin", "src_vectors.to_numpy", "dst_vectors.to_numpy", "len", "src_vectors.index.tolist", "dst_vectors.index.tolist", "labels.index.isin", "list", "list", "list", "list"], "function", ["home.repos.pwc.inspect_result.CAHLR_skill-equivalency.None.translate.translation_model.translate", "home.repos.pwc.inspect_result.CAHLR_skill-equivalency.None.translate.translation_model.get_cos_similarity"], ["", "", "def", "learn_translation_model", "(", "src_vectors", ",", "dst_vectors", ",", "labels", ",", "device", ",", "\n", "num_epochs", ",", "val_ratio", ",", "max_val_non_decreasing_epochs", ",", "verbose", ")", ":", "\n", "    ", "labels", "[", "\"src_index\"", "]", "=", "labels", "[", "\"source\"", "]", ".", "apply", "(", "lambda", "x", ":", "src_vectors", ".", "index", ".", "tolist", "(", ")", ".", "index", "(", "x", ")", ")", "\n", "labels", "[", "\"dst_index\"", "]", "=", "labels", "[", "\"destination\"", "]", ".", "apply", "(", "lambda", "x", ":", "dst_vectors", ".", "index", ".", "tolist", "(", ")", ".", "index", "(", "x", ")", ")", "\n", "val_index", "=", "np", ".", "random", ".", "permutation", "(", "labels", ".", "shape", "[", "0", "]", ")", "[", ":", "int", "(", "labels", ".", "shape", "[", "0", "]", "*", "val_ratio", ")", "]", "\n", "training_labels", "=", "labels", ".", "loc", "[", "~", "labels", ".", "index", ".", "isin", "(", "val_index", ")", ",", "[", "\"src_index\"", ",", "\"dst_index\"", "]", "]", "\n", "val_labels", "=", "labels", ".", "loc", "[", "labels", ".", "index", ".", "isin", "(", "val_index", ")", ",", "[", "\"src_index\"", ",", "\"dst_index\"", "]", "]", "\n", "\n", "model", "=", "translation_model", "(", "in_dim", "=", "src_vectors", ".", "shape", "[", "1", "]", ",", "out_dim", "=", "dst_vectors", ".", "shape", "[", "1", "]", ",", "device", "=", "device", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "0.001", ")", "\n", "\n", "src", "=", "torch", ".", "tensor", "(", "src_vectors", ".", "to_numpy", "(", ")", ",", "dtype", "=", "torch", ".", "float", ")", ".", "to", "(", "device", ")", "\n", "dst", "=", "torch", ".", "tensor", "(", "dst_vectors", ".", "to_numpy", "(", ")", ",", "dtype", "=", "torch", ".", "float", ")", ".", "to", "(", "device", ")", "\n", "\n", "# train the model", "\n", "best_val_loss", "=", "float", "(", "\"inf\"", ")", "\n", "best_model", "=", "model", "\n", "val_non_decreasing_epochs", "=", "0", "\n", "for", "i", "in", "range", "(", "num_epochs", ")", ":", "\n", "        ", "model", ".", "train", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "src_translated", "=", "model", ".", "translate", "(", "src", ")", "\n", "cos_sim", "=", "model", ".", "get_cos_similarity", "(", "src_translated", ",", "dst", ")", "\n", "\n", "loss", "=", "torch", ".", "sum", "(", "1", "-", "cos_sim", "[", "list", "(", "training_labels", "[", "'src_index'", "]", ")", ",", "list", "(", "training_labels", "[", "'dst_index'", "]", ")", "]", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# check if val loss is decreasing", "\n", "val_loss", "=", "torch", ".", "sum", "(", "1", "-", "cos_sim", "[", "list", "(", "val_labels", "[", "'src_index'", "]", ")", ",", "list", "(", "val_labels", "[", "'dst_index'", "]", ")", "]", ")", "\n", "if", "val_loss", "<", "best_val_loss", ":", "\n", "            ", "best_val_loss", "=", "val_loss", "\n", "best_model", "=", "copy", ".", "deepcopy", "(", "model", ")", "\n", "val_non_decreasing_epochs", "=", "0", "\n", "", "else", ":", "\n", "            ", "val_non_decreasing_epochs", "+=", "1", "\n", "\n", "", "if", "verbose", ":", "\n", "            ", "print", "(", "f\"Epochs {i}, training loss {loss:.4f}, validation loss {val_loss:.4f}, val loss not decreased in last {val_non_decreasing_epochs} epochs\"", ")", "\n", "\n", "", "if", "val_non_decreasing_epochs", ">=", "max_val_non_decreasing_epochs", "and", "len", "(", "val_labels", ")", ">", "0", ":", "\n", "            ", "break", "\n", "\n", "", "", "return", "best_model", "\n", "\n"]], "home.repos.pwc.inspect_result.CAHLR_skill-equivalency.None.translate.generate_translated_source_vectors": [[100, 122], ["pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "translate.learn_translation_model", "learn_translation_model.eval", "torch.tensor().to", "learn_translation_model.translate().detach().cpu().numpy", "pandas.DataFrame", "pd.DataFrame.to_csv", "torch.tensor", "learn_translation_model.translate().detach().cpu", "dst_vectors_path.split", "pd.read_csv.to_numpy", "learn_translation_model.translate().detach", "learn_translation_model.translate"], "function", ["home.repos.pwc.inspect_result.CAHLR_skill-equivalency.None.translate.learn_translation_model", "home.repos.pwc.inspect_result.CAHLR_skill-equivalency.None.translate.translation_model.translate"], ["", "def", "generate_translated_source_vectors", "(", "\n", "src_vectors_path", ",", "dst_vectors_path", ",", "training_labels_path", ",", "device", ",", "\n", "num_epochs", "=", "1000", ",", "val_ratio", "=", "0.2", ",", "max_val_non_decreasing_epochs", "=", "100", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "src_vectors", "=", "pd", ".", "read_csv", "(", "src_vectors_path", ",", "index_col", "=", "0", ")", "\n", "dst_vectors", "=", "pd", ".", "read_csv", "(", "dst_vectors_path", ",", "index_col", "=", "0", ")", "\n", "training_labels", "=", "pd", ".", "read_csv", "(", "training_labels_path", ")", "\n", "\n", "model", "=", "learn_translation_model", "(", "\n", "src_vectors", ",", "dst_vectors", ",", "training_labels", ",", "device", ",", "\n", "num_epochs", ",", "val_ratio", ",", "max_val_non_decreasing_epochs", ",", "verbose", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "src_tensor", "=", "torch", ".", "tensor", "(", "src_vectors", ".", "to_numpy", "(", ")", ",", "dtype", "=", "torch", ".", "float", ")", ".", "to", "(", "device", ")", "\n", "src_translated", "=", "model", ".", "translate", "(", "src_tensor", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "src_translated", "=", "pd", ".", "DataFrame", "(", "src_translated", ",", "index", "=", "src_vectors", ".", "index", ")", "\n", "src_translated", ".", "index", ".", "name", "=", "\"skill\"", "\n", "dst_vectors_name", "=", "dst_vectors_path", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", "[", ":", "-", "4", "]", "\n", "src_translated_path", "=", "src_vectors_path", "[", ":", "-", "4", "]", "+", "f\"_translated_to_{dst_vectors_name}.csv\"", "\n", "\n", "src_translated", ".", "to_csv", "(", "src_translated_path", ")", "\n", "return", "src_translated_path", "\n", "", ""]], "home.repos.pwc.inspect_result.CAHLR_skill-equivalency.None.main.main": [[9, 189], ["arguments.parser", "print", "print", "vars", "print", "os.path.join", "os.path.join", "print", "print", "json.dump", "print", "open", "getattr", "print", "skill_representations.BOW.generate_BOW_vectors_two_taxonomies", "evaluate.evaluate", "print", "translate.split_labels", "translate.generate_translated_source_vectors", "evaluate.evaluate", "os.path.join", "print", "skill_representations.TFIDF.generate_TFIDF_vectors_two_taxonomies", "evaluate.evaluate", "print", "skill_representations.BOW.generate_BOW_vectors_one_taxonomy", "print", "skill_representations.BOW.generate_BOW_vectors_one_taxonomy", "print", "skill_representations.content2vec.generate_content2vec_vectors_two_taxonomies", "evaluate.evaluate", "print", "skill_representations.TFIDF.generate_TFIDF_vectors_one_taxonomy", "print", "skill_representations.TFIDF.generate_TFIDF_vectors_one_taxonomy", "print", "skill_representations.skill2vec.generate_skill2vec_vectors_two_taxonomies", "print", "translate.split_labels", "translate.generate_translated_source_vectors", "evaluate.evaluate", "print", "skill_representations.content2vec.generate_content2vec_vectors_one_taxonomy", "print", "skill_representations.content2vec.generate_content2vec_vectors_one_taxonomy", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "print", "skill_representations.content2vec.generate_content2vec_vectors_two_taxonomies", "print", "skill_representations.skill2vec.generate_skill2vec_vectors_two_taxonomies", "print", "translate.split_labels", "translate.generate_translated_source_vectors", "print", "skill_representations.content2vec_skill2vec.combine_content2vec_and_skill2vec_two_taxonomies", "evaluate.evaluate", "print", "skill_representations.skill2vec.generate_skill2vec_vectors_one_taxonomy", "print", "skill_representations.skill2vec.generate_skill2vec_vectors_one_taxonomy", "os.path.join", "os.path.join", "print", "skill_representations.content2vec.generate_content2vec_vectors_two_taxonomies", "print", "skill_representations.TAMF.generate_TAMF_vectors_two_taxonomies", "print", "translate.split_labels", "translate.generate_translated_source_vectors", "evaluate.evaluate", "os.path.join", "os.path.join", "print", "skill_representations.content2vec.generate_content2vec_vectors_one_taxonomy", "print", "skill_representations.skill2vec.generate_skill2vec_vectors_one_taxonomy", "print", "skill_representations.content2vec_skill2vec.combine_content2vec_and_skill2vec_one_taxonomy", "os.path.join", "os.path.join", "print", "skill_representations.content2vec.generate_content2vec_vectors_one_taxonomy", "print", "skill_representations.skill2vec.generate_skill2vec_vectors_one_taxonomy", "print", "skill_representations.content2vec_skill2vec.combine_content2vec_and_skill2vec_one_taxonomy", "os.path.join", "print", "skill_representations.content2vec.generate_content2vec_vectors_one_taxonomy", "print", "skill_representations.TAMF.generate_TAMF_vectors_one_taxonomy", "os.path.join", "print", "skill_representations.content2vec.generate_content2vec_vectors_one_taxonomy", "print", "skill_representations.TAMF.generate_TAMF_vectors_one_taxonomy"], "function", ["home.repos.pwc.inspect_result.CAHLR_skill-equivalency.None.arguments.parser", "home.repos.pwc.inspect_result.CAHLR_skill-equivalency.skill_representations.BOW.generate_BOW_vectors_two_taxonomies", "home.repos.pwc.inspect_result.CAHLR_skill-equivalency.None.evaluate.evaluate", "home.repos.pwc.inspect_result.CAHLR_skill-equivalency.None.translate.split_labels", "home.repos.pwc.inspect_result.CAHLR_skill-equivalency.None.translate.generate_translated_source_vectors", "home.repos.pwc.inspect_result.CAHLR_skill-equivalency.None.evaluate.evaluate", "home.repos.pwc.inspect_result.CAHLR_skill-equivalency.skill_representations.TFIDF.generate_TFIDF_vectors_two_taxonomies", "home.repos.pwc.inspect_result.CAHLR_skill-equivalency.None.evaluate.evaluate", "home.repos.pwc.inspect_result.CAHLR_skill-equivalency.skill_representations.BOW.generate_BOW_vectors_one_taxonomy", "home.repos.pwc.inspect_result.CAHLR_skill-equivalency.skill_representations.BOW.generate_BOW_vectors_one_taxonomy", "home.repos.pwc.inspect_result.CAHLR_skill-equivalency.skill_representations.content2vec.generate_content2vec_vectors_two_taxonomies", "home.repos.pwc.inspect_result.CAHLR_skill-equivalency.None.evaluate.evaluate", "home.repos.pwc.inspect_result.CAHLR_skill-equivalency.skill_representations.TFIDF.generate_TFIDF_vectors_one_taxonomy", "home.repos.pwc.inspect_result.CAHLR_skill-equivalency.skill_representations.TFIDF.generate_TFIDF_vectors_one_taxonomy", "home.repos.pwc.inspect_result.CAHLR_skill-equivalency.skill_representations.skill2vec.generate_skill2vec_vectors_two_taxonomies", "home.repos.pwc.inspect_result.CAHLR_skill-equivalency.None.translate.split_labels", "home.repos.pwc.inspect_result.CAHLR_skill-equivalency.None.translate.generate_translated_source_vectors", "home.repos.pwc.inspect_result.CAHLR_skill-equivalency.None.evaluate.evaluate", "home.repos.pwc.inspect_result.CAHLR_skill-equivalency.skill_representations.content2vec.generate_content2vec_vectors_one_taxonomy", "home.repos.pwc.inspect_result.CAHLR_skill-equivalency.skill_representations.content2vec.generate_content2vec_vectors_one_taxonomy", "home.repos.pwc.inspect_result.CAHLR_skill-equivalency.skill_representations.content2vec.generate_content2vec_vectors_two_taxonomies", "home.repos.pwc.inspect_result.CAHLR_skill-equivalency.skill_representations.skill2vec.generate_skill2vec_vectors_two_taxonomies", "home.repos.pwc.inspect_result.CAHLR_skill-equivalency.None.translate.split_labels", "home.repos.pwc.inspect_result.CAHLR_skill-equivalency.None.translate.generate_translated_source_vectors", "home.repos.pwc.inspect_result.CAHLR_skill-equivalency.skill_representations.content2vec_skill2vec.combine_content2vec_and_skill2vec_two_taxonomies", "home.repos.pwc.inspect_result.CAHLR_skill-equivalency.None.evaluate.evaluate", "home.repos.pwc.inspect_result.CAHLR_skill-equivalency.skill_representations.skill2vec.generate_skill2vec_vectors_one_taxonomy", "home.repos.pwc.inspect_result.CAHLR_skill-equivalency.skill_representations.skill2vec.generate_skill2vec_vectors_one_taxonomy", "home.repos.pwc.inspect_result.CAHLR_skill-equivalency.skill_representations.content2vec.generate_content2vec_vectors_two_taxonomies", "home.repos.pwc.inspect_result.CAHLR_skill-equivalency.skill_representations.TAMF.generate_TAMF_vectors_two_taxonomies", "home.repos.pwc.inspect_result.CAHLR_skill-equivalency.None.translate.split_labels", "home.repos.pwc.inspect_result.CAHLR_skill-equivalency.None.translate.generate_translated_source_vectors", "home.repos.pwc.inspect_result.CAHLR_skill-equivalency.None.evaluate.evaluate", "home.repos.pwc.inspect_result.CAHLR_skill-equivalency.skill_representations.content2vec.generate_content2vec_vectors_one_taxonomy", "home.repos.pwc.inspect_result.CAHLR_skill-equivalency.skill_representations.skill2vec.generate_skill2vec_vectors_one_taxonomy", "home.repos.pwc.inspect_result.CAHLR_skill-equivalency.skill_representations.content2vec_skill2vec.combine_content2vec_and_skill2vec_one_taxonomy", "home.repos.pwc.inspect_result.CAHLR_skill-equivalency.skill_representations.content2vec.generate_content2vec_vectors_one_taxonomy", "home.repos.pwc.inspect_result.CAHLR_skill-equivalency.skill_representations.skill2vec.generate_skill2vec_vectors_one_taxonomy", "home.repos.pwc.inspect_result.CAHLR_skill-equivalency.skill_representations.content2vec_skill2vec.combine_content2vec_and_skill2vec_one_taxonomy", "home.repos.pwc.inspect_result.CAHLR_skill-equivalency.skill_representations.content2vec.generate_content2vec_vectors_one_taxonomy", "home.repos.pwc.inspect_result.CAHLR_skill-equivalency.skill_representations.TAMF.generate_TAMF_vectors_one_taxonomy", "home.repos.pwc.inspect_result.CAHLR_skill-equivalency.skill_representations.content2vec.generate_content2vec_vectors_one_taxonomy", "home.repos.pwc.inspect_result.CAHLR_skill-equivalency.skill_representations.TAMF.generate_TAMF_vectors_one_taxonomy"], ["def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parser", "(", ")", "\n", "print", "(", "\"=\"", "*", "20", ")", "\n", "print", "(", "\"Experiment parameters:\"", ")", "\n", "for", "arg", "in", "vars", "(", "args", ")", ":", "\n", "        ", "print", "(", "arg", ",", "getattr", "(", "args", ",", "arg", ")", ")", "\n", "", "print", "(", "\"=\"", "*", "20", ")", "\n", "src_repr_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_path", ",", "f\"{args.src_repr_model}_{args.src_name}.csv\"", ")", "\n", "dst_repr_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_path", ",", "f\"{args.dst_repr_model}_{args.dst_name}.csv\"", ")", "\n", "if", "args", ".", "src_repr_model", "==", "args", ".", "dst_repr_model", ":", "\n", "        ", "if", "args", ".", "src_repr_model", "==", "\"BOW\"", ":", "\n", "            ", "print", "(", "\"Generating BOW representations for source and destination\"", ")", "\n", "BOW", ".", "generate_BOW_vectors_two_taxonomies", "(", "\n", "args", ".", "src_problems_path", ",", "args", ".", "dst_problems_path", ",", "\n", "src_repr_path", ",", "dst_repr_path", ")", "\n", "results", "=", "evaluate", ".", "evaluate", "(", "src_repr_path", ",", "dst_repr_path", ",", "args", ".", "labels_path", ",", "args", ".", "recall_at_5", ",", "args", ".", "mrr", ")", "\n", "", "elif", "args", ".", "src_repr_model", "==", "\"TFIDF\"", ":", "\n", "            ", "print", "(", "\"Generating TFIDF representations for source and destination\"", ")", "\n", "TFIDF", ".", "generate_TFIDF_vectors_two_taxonomies", "(", "\n", "args", ".", "src_problems_path", ",", "args", ".", "dst_problems_path", ",", "\n", "src_repr_path", ",", "dst_repr_path", ")", "\n", "results", "=", "evaluate", ".", "evaluate", "(", "src_repr_path", ",", "dst_repr_path", ",", "args", ".", "labels_path", ",", "args", ".", "recall_at_5", ",", "args", ".", "mrr", ")", "\n", "", "elif", "args", ".", "src_repr_model", "==", "\"content2vec\"", ":", "\n", "            ", "print", "(", "\"Generating content2vec representations for source and destination\"", ")", "\n", "content2vec", ".", "generate_content2vec_vectors_two_taxonomies", "(", "\n", "args", ".", "src_problems_path", ",", "args", ".", "dst_problems_path", ",", "\n", "src_repr_path", ",", "dst_repr_path", ",", "\n", "args", ".", "content2vec_size", ",", "args", ".", "content2vec_window", ",", "args", ".", "content2vec_min_count", ")", "\n", "results", "=", "evaluate", ".", "evaluate", "(", "src_repr_path", ",", "dst_repr_path", ",", "args", ".", "labels_path", ",", "args", ".", "recall_at_5", ",", "args", ".", "mrr", ")", "\n", "", "elif", "args", ".", "src_repr_model", "==", "\"skill2vec\"", ":", "\n", "            ", "print", "(", "\"Generating skill2vec representations for source and destination\"", ")", "\n", "skill2vec", ".", "generate_skill2vec_vectors_two_taxonomies", "(", "\n", "args", ".", "src_sequences_path", ",", "args", ".", "src_skill2id_path", ",", "src_repr_path", ",", "\n", "args", ".", "src_skill2vec_size", ",", "args", ".", "src_skill2vec_window", ",", "\n", "args", ".", "dst_sequences_path", ",", "args", ".", "dst_skill2id_path", ",", "dst_repr_path", ",", "\n", "args", ".", "dst_skill2vec_size", ",", "args", ".", "dst_skill2vec_window", ")", "\n", "print", "(", "\"Learning skill translation\"", ")", "\n", "training_labels_path", ",", "test_labels_path", "=", "translate", ".", "split_labels", "(", "args", ".", "labels_path", ")", "\n", "src_translated_path", "=", "translate", ".", "generate_translated_source_vectors", "(", "\n", "src_repr_path", ",", "dst_repr_path", ",", "training_labels_path", ",", "args", ".", "device", ",", "\n", "args", ".", "num_epochs", ",", "args", ".", "val_ratio", ",", "args", ".", "max_val_non_decreasing_epochs", ",", "args", ".", "verbose", ")", "\n", "results", "=", "evaluate", ".", "evaluate", "(", "src_translated_path", ",", "dst_repr_path", ",", "test_labels_path", ",", "args", ".", "recall_at_5", ",", "args", ".", "mrr", ")", "\n", "", "elif", "args", ".", "src_repr_model", "==", "\"content2vec_skill2vec\"", ":", "\n", "            ", "src_content2vec_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_path", ",", "f\"content2vec_{args.src_name}.csv\"", ")", "\n", "src_skill2vec_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_path", ",", "f\"skill2vec_{args.src_name}.csv\"", ")", "\n", "dst_content2vec_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_path", ",", "f\"content2vec_{args.dst_name}.csv\"", ")", "\n", "dst_skill2vec_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_path", ",", "f\"skill2vec_{args.dst_name}.csv\"", ")", "\n", "print", "(", "\"Generating content2vec representations for source and destination\"", ")", "\n", "content2vec", ".", "generate_content2vec_vectors_two_taxonomies", "(", "\n", "args", ".", "src_problems_path", ",", "args", ".", "dst_problems_path", ",", "\n", "src_content2vec_path", ",", "dst_content2vec_path", ",", "\n", "args", ".", "content2vec_size", ",", "args", ".", "content2vec_window", ",", "args", ".", "content2vec_min_count", ")", "\n", "print", "(", "\"Generating skill2vec representations for source and destination\"", ")", "\n", "skill2vec", ".", "generate_skill2vec_vectors_two_taxonomies", "(", "\n", "args", ".", "src_sequences_path", ",", "args", ".", "src_skill2id_path", ",", "src_skill2vec_path", ",", "\n", "args", ".", "src_skill2vec_size", ",", "args", ".", "src_skill2vec_window", ",", "\n", "args", ".", "dst_sequences_path", ",", "args", ".", "dst_skill2id_path", ",", "dst_skill2vec_path", ",", "\n", "args", ".", "dst_skill2vec_size", ",", "args", ".", "dst_skill2vec_window", ")", "\n", "print", "(", "\"Learning skill translation\"", ")", "\n", "training_labels_path", ",", "test_labels_path", "=", "translate", ".", "split_labels", "(", "args", ".", "labels_path", ")", "\n", "src_translated_path", "=", "translate", ".", "generate_translated_source_vectors", "(", "\n", "src_skill2vec_path", ",", "dst_skill2vec_path", ",", "training_labels_path", ",", "args", ".", "device", ",", "\n", "args", ".", "num_epochs", ",", "args", ".", "val_ratio", ",", "args", ".", "max_val_non_decreasing_epochs", ",", "args", ".", "verbose", ")", "\n", "print", "(", "\"Combining content2vec and skill2vec representations for source and destination\"", ")", "\n", "content2vec_skill2vec", ".", "combine_content2vec_and_skill2vec_two_taxonomies", "(", "\n", "src_content2vec_path", ",", "src_translated_path", ",", "src_repr_path", ",", "\n", "dst_content2vec_path", ",", "dst_skill2vec_path", ",", "dst_repr_path", ")", "\n", "results", "=", "evaluate", ".", "evaluate", "(", "src_repr_path", ",", "dst_repr_path", ",", "test_labels_path", ",", "args", ".", "recall_at_5", ",", "args", ".", "mrr", ")", "\n", "", "elif", "args", ".", "src_repr_model", "==", "\"TAMF\"", ":", "\n", "            ", "src_content2vec_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_path", ",", "f\"content2vec_{args.src_name}.csv\"", ")", "\n", "dst_content2vec_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_path", ",", "f\"content2vec_{args.dst_name}.csv\"", ")", "\n", "print", "(", "\"Generating content2vec representations for source and destination\"", ")", "\n", "content2vec", ".", "generate_content2vec_vectors_two_taxonomies", "(", "\n", "args", ".", "src_problems_path", ",", "args", ".", "dst_problems_path", ",", "\n", "src_content2vec_path", ",", "dst_content2vec_path", ",", "\n", "args", ".", "content2vec_size", ",", "args", ".", "content2vec_window", ",", "args", ".", "content2vec_min_count", ")", "\n", "print", "(", "\"Generating TAMF representations for source and destination\"", ")", "\n", "TAMF", ".", "generate_TAMF_vectors_two_taxonomies", "(", "\n", "args", ".", "src_sequences_path", ",", "args", ".", "src_skill2id_path", ",", "src_content2vec_path", ",", "src_repr_path", ",", "\n", "args", ".", "src_TAMF_k", ",", "args", ".", "src_TAMF_lambda", ",", "\n", "args", ".", "dst_sequences_path", ",", "args", ".", "dst_skill2id_path", ",", "dst_content2vec_path", ",", "dst_repr_path", ",", "\n", "args", ".", "dst_TAMF_k", ",", "args", ".", "dst_TAMF_lambda", ")", "\n", "print", "(", "\"Learning skill translation\"", ")", "\n", "training_labels_path", ",", "test_labels_path", "=", "translate", ".", "split_labels", "(", "args", ".", "labels_path", ")", "\n", "src_translated_path", "=", "translate", ".", "generate_translated_source_vectors", "(", "\n", "src_repr_path", ",", "dst_repr_path", ",", "training_labels_path", ",", "args", ".", "device", ",", "\n", "args", ".", "num_epochs", ",", "args", ".", "val_ratio", ",", "args", ".", "max_val_non_decreasing_epochs", ",", "args", ".", "verbose", ")", "\n", "results", "=", "evaluate", ".", "evaluate", "(", "src_translated_path", ",", "dst_repr_path", ",", "test_labels_path", ",", "args", ".", "recall_at_5", ",", "args", ".", "mrr", ")", "\n", "", "", "elif", "args", ".", "src_repr_model", "!=", "args", ".", "dst_repr_model", ":", "\n", "## Source", "\n", "        ", "if", "args", ".", "src_repr_model", "==", "\"BOW\"", ":", "\n", "            ", "print", "(", "\"Generating BOW representations for source\"", ")", "\n", "BOW", ".", "generate_BOW_vectors_one_taxonomy", "(", "args", ".", "src_problems_path", ",", "src_repr_path", ")", "\n", "", "elif", "args", ".", "src_repr_model", "==", "\"TFIDF\"", ":", "\n", "            ", "print", "(", "\"Generating TFIDF representations for source\"", ")", "\n", "TFIDF", ".", "generate_TFIDF_vectors_one_taxonomy", "(", "args", ".", "src_problems_path", ",", "src_repr_path", ")", "\n", "", "elif", "args", ".", "src_repr_model", "==", "\"content2vec\"", ":", "\n", "            ", "print", "(", "\"Generating content2vec representations for source\"", ")", "\n", "content2vec", ".", "generate_content2vec_vectors_one_taxonomy", "(", "\n", "args", ".", "src_problems_path", ",", "src_repr_path", ",", "\n", "args", ".", "src_content2vec_size", ",", "args", ".", "src_content2vec_window", ",", "args", ".", "src_content2vec_min_count", ")", "\n", "", "elif", "args", ".", "src_repr_model", "==", "\"skill2vec\"", ":", "\n", "            ", "print", "(", "\"Generating skill2vec representations for source\"", ")", "\n", "skill2vec", ".", "generate_skill2vec_vectors_one_taxonomy", "(", "\n", "args", ".", "src_sequences_path", ",", "args", ".", "src_skill2id_path", ",", "src_repr_path", ",", "\n", "args", ".", "src_skill2vec_size", ",", "args", ".", "src_skill2vec_window", ")", "\n", "", "elif", "args", ".", "src_repr_model", "==", "\"content2vec_skill2vec\"", ":", "\n", "            ", "src_content2vec_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_path", ",", "f\"content2vec_{args.src_name}.csv\"", ")", "\n", "src_skill2vec_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_path", ",", "f\"skill2vec_{args.src_name}.csv\"", ")", "\n", "print", "(", "\"Generating content2vec representations for source\"", ")", "\n", "content2vec", ".", "generate_content2vec_vectors_one_taxonomy", "(", "\n", "args", ".", "src_problems_path", ",", "src_content2vec_path", ",", "\n", "args", ".", "src_content2vec_size", ",", "args", ".", "src_content2vec_window", ",", "args", ".", "src_content2vec_min_count", ")", "\n", "print", "(", "\"Generating skill2vec representations for source\"", ")", "\n", "skill2vec", ".", "generate_skill2vec_vectors_one_taxonomy", "(", "\n", "args", ".", "src_sequences_path", ",", "args", ".", "src_skill2id_path", ",", "src_skill2vec_path", ",", "\n", "args", ".", "src_skill2vec_size", ",", "args", ".", "src_skill2vec_window", ")", "\n", "print", "(", "\"Combining content2vec and skill2vec representations for source\"", ")", "\n", "content2vec_skill2vec", ".", "combine_content2vec_and_skill2vec_one_taxonomy", "(", "\n", "src_content2vec_path", ",", "src_skill2vec_path", ",", "src_repr_path", ")", "\n", "", "elif", "args", ".", "src_repr_model", "==", "\"TAMF\"", ":", "\n", "            ", "src_content2vec_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_path", ",", "f\"content2vec_{args.src_name}.csv\"", ")", "\n", "print", "(", "\"Generating content2vec representations for source\"", ")", "\n", "content2vec", ".", "generate_content2vec_vectors_one_taxonomy", "(", "\n", "args", ".", "src_problems_path", ",", "src_content2vec_path", ",", "\n", "args", ".", "src_content2vec_size", ",", "args", ".", "src_content2vec_window", ",", "args", ".", "src_content2vec_min_count", ")", "\n", "print", "(", "\"Generating TAMF representations for source\"", ")", "\n", "TAMF", ".", "generate_TAMF_vectors_one_taxonomy", "(", "\n", "args", ".", "src_sequences_path", ",", "args", ".", "src_skill2id_path", ",", "src_content2vec_path", ",", "\n", "src_repr_path", ",", "args", ".", "src_TAMF_k", ",", "args", ".", "src_TAMF_lambda", ")", "\n", "## Destination", "\n", "", "if", "args", ".", "dst_repr_model", "==", "\"BOW\"", ":", "\n", "            ", "print", "(", "\"Generating BOW representations for destination\"", ")", "\n", "BOW", ".", "generate_BOW_vectors_one_taxonomy", "(", "args", ".", "dst_problems_path", ",", "dst_repr_path", ")", "\n", "", "elif", "args", ".", "dst_repr_model", "==", "\"TFIDF\"", ":", "\n", "            ", "print", "(", "\"Generating TFIDF representations for destination\"", ")", "\n", "TFIDF", ".", "generate_TFIDF_vectors_one_taxonomy", "(", "args", ".", "dst_problems_path", ",", "dst_repr_path", ")", "\n", "", "elif", "args", ".", "dst_repr_model", "==", "\"content2vec\"", ":", "\n", "            ", "print", "(", "\"Generating content2vec representations for destination\"", ")", "\n", "content2vec", ".", "generate_content2vec_vectors_one_taxonomy", "(", "\n", "args", ".", "dst_problems_path", ",", "dst_repr_path", ",", "\n", "args", ".", "dst_content2vec_size", ",", "args", ".", "dst_content2vec_window", ",", "args", ".", "dst_content2vec_min_count", ")", "\n", "", "elif", "args", ".", "dst_repr_model", "==", "\"skill2vec\"", ":", "\n", "            ", "print", "(", "\"Generating skill2vec representations for destination\"", ")", "\n", "skill2vec", ".", "generate_skill2vec_vectors_one_taxonomy", "(", "\n", "args", ".", "dst_sequences_path", ",", "args", ".", "dst_skill2id_path", ",", "dst_repr_path", ",", "\n", "args", ".", "dst_skill2vec_size", ",", "args", ".", "dst_skill2vec_window", ")", "\n", "", "elif", "args", ".", "dst_repr_model", "==", "\"content2vec_skill2vec\"", ":", "\n", "            ", "dst_content2vec_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_path", ",", "f\"content2vec_{args.dst_name}.csv\"", ")", "\n", "dst_skill2vec_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_path", ",", "f\"skill2vec_{args.dst_name}.csv\"", ")", "\n", "print", "(", "\"Generating content2vec representations for destination\"", ")", "\n", "content2vec", ".", "generate_content2vec_vectors_one_taxonomy", "(", "\n", "args", ".", "dst_problems_path", ",", "dst_content2vec_path", ",", "\n", "args", ".", "dst_content2vec_size", ",", "args", ".", "dst_content2vec_window", ",", "args", ".", "dst_content2vec_min_count", ")", "\n", "print", "(", "\"Generating skill2vec representations for destination\"", ")", "\n", "skill2vec", ".", "generate_skill2vec_vectors_one_taxonomy", "(", "\n", "args", ".", "dst_sequences_path", ",", "args", ".", "dst_skill2id_path", ",", "dst_skill2vec_path", ",", "\n", "args", ".", "dst_skill2vec_size", ",", "args", ".", "dst_skill2vec_window", ")", "\n", "print", "(", "\"Combining content2vec and skill2vec representations for destination\"", ")", "\n", "content2vec_skill2vec", ".", "combine_content2vec_and_skill2vec_one_taxonomy", "(", "\n", "dst_content2vec_path", ",", "dst_skill2vec_path", ",", "dst_repr_path", ")", "\n", "", "elif", "args", ".", "dst_repr_model", "==", "\"TAMF\"", ":", "\n", "            ", "dst_content2vec_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_path", ",", "f\"content2vec_{args.dst_name}.csv\"", ")", "\n", "print", "(", "\"Generating content2vec representations for destination\"", ")", "\n", "content2vec", ".", "generate_content2vec_vectors_one_taxonomy", "(", "\n", "args", ".", "dst_problems_path", ",", "dst_content2vec_path", ",", "\n", "args", ".", "dst_content2vec_size", ",", "args", ".", "dst_content2vec_window", ",", "args", ".", "dst_content2vec_min_count", ")", "\n", "print", "(", "\"Generating TAMF representations for destination\"", ")", "\n", "TAMF", ".", "generate_TAMF_vectors_one_taxonomy", "(", "\n", "args", ".", "dst_sequences_path", ",", "args", ".", "dst_skill2id_path", ",", "dst_content2vec_path", ",", "\n", "dst_repr_path", ",", "args", ".", "dst_TAMF_k", ",", "args", ".", "dst_TAMF_lambda", ")", "\n", "", "print", "(", "\"Learning skill translation\"", ")", "\n", "training_labels_path", ",", "test_labels_path", "=", "translate", ".", "split_labels", "(", "args", ".", "labels_path", ")", "\n", "src_translated_path", "=", "translate", ".", "generate_translated_source_vectors", "(", "\n", "src_repr_path", ",", "dst_repr_path", ",", "training_labels_path", ",", "args", ".", "device", ",", "\n", "args", ".", "num_epochs", ",", "args", ".", "val_ratio", ",", "args", ".", "max_val_non_decreasing_epochs", ",", "args", ".", "verbose", ")", "\n", "results", "=", "evaluate", ".", "evaluate", "(", "src_translated_path", ",", "dst_repr_path", ",", "test_labels_path", ",", "args", ".", "recall_at_5", ",", "args", ".", "mrr", ")", "\n", "", "print", "(", "\"=\"", "*", "20", ")", "\n", "print", "(", "f\"results {results}\"", ")", "\n", "json", ".", "dump", "(", "results", ",", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "output_path", ",", "\"results.json\"", ")", ",", "\"w\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CAHLR_skill-equivalency.None.evaluate.l2_normalization": [[6, 8], ["numpy.linalg.norm().reshape", "numpy.linalg.norm"], "function", ["None"], ["def", "l2_normalization", "(", "vectors", ")", ":", "\n", "    ", "return", "vectors", "/", "np", ".", "linalg", ".", "norm", "(", "vectors", ",", "ord", "=", "2", ",", "axis", "=", "1", ")", ".", "reshape", "(", "vectors", ".", "shape", "[", "0", "]", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CAHLR_skill-equivalency.None.evaluate.get_rankings": [[10, 21], ["torch.tensor", "torch.tensor", "torch.tensor.unsqueeze().repeat", "torch.tensor.unsqueeze().repeat", "torch.mul().sum", "torch.sort", "range", "src.to_numpy", "dst.to_numpy", "torch.tensor.size", "torch.tensor.size", "len", "torch.tensor.unsqueeze", "torch.tensor.unsqueeze", "torch.mul"], "function", ["None"], ["", "def", "get_rankings", "(", "src", ",", "dst", ")", ":", "\n", "    ", "x", "=", "torch", ".", "tensor", "(", "src", ".", "to_numpy", "(", ")", ",", "dtype", "=", "torch", ".", "double", ")", "\n", "y", "=", "torch", ".", "tensor", "(", "dst", ".", "to_numpy", "(", ")", ",", "dtype", "=", "torch", ".", "double", ")", "\n", "new_x", "=", "x", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "y", ".", "size", "(", "0", ")", ",", "1", ")", "\n", "new_y", "=", "y", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", ")", "\n", "cos_sim", "=", "torch", ".", "mul", "(", "new_x", ",", "new_y", ")", ".", "sum", "(", "axis", "=", "2", ")", "\n", "_", ",", "indices", "=", "torch", ".", "sort", "(", "cos_sim", ",", "descending", "=", "True", ")", "\n", "rankings", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "len", "(", "src", ")", ")", ":", "\n", "        ", "rankings", "[", "src", ".", "index", "[", "i", "]", "]", "=", "[", "dst", ".", "index", "[", "idx", "]", "for", "idx", "in", "indices", "[", "i", "]", "]", "\n", "", "return", "rankings", "\n", "\n"]], "home.repos.pwc.inspect_result.CAHLR_skill-equivalency.None.evaluate.get_recall_at_5": [[23, 31], ["len"], "function", ["None"], ["", "def", "get_recall_at_5", "(", "rankings", ",", "labels", ")", ":", "\n", "    ", "accurate_count", "=", "0", "\n", "labels_tuple", "=", "[", "(", "x", "[", "0", "]", ",", "x", "[", "1", "]", ")", "for", "x", "in", "labels", "[", "[", "\"source\"", ",", "\"destination\"", "]", "]", ".", "values", "]", "\n", "for", "src_skill", "in", "rankings", ":", "\n", "        ", "for", "dst_skill", "in", "rankings", "[", "src_skill", "]", "[", ":", "5", "]", ":", "\n", "            ", "if", "(", "src_skill", ",", "dst_skill", ")", "in", "labels_tuple", ":", "\n", "                ", "accurate_count", "+=", "1", "\n", "", "", "", "return", "accurate_count", "/", "len", "(", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CAHLR_skill-equivalency.None.evaluate.get_mean_reciprocal_rank": [[33, 42], ["numpy.mean", "len", "reciprocal_ranks.append", "numpy.min", "numpy.where", "range", "numpy.array", "len"], "function", ["None"], ["", "def", "get_mean_reciprocal_rank", "(", "rankings", ",", "labels", ")", ":", "\n", "    ", "reciprocal_ranks", "=", "[", "]", "\n", "labels_tuple", "=", "[", "(", "x", "[", "0", "]", ",", "x", "[", "1", "]", ")", "for", "x", "in", "labels", "[", "[", "\"source\"", ",", "\"destination\"", "]", "]", ".", "values", "]", "\n", "for", "src_skill", "in", "rankings", ":", "\n", "        ", "relevant", "=", "[", "x", "[", "1", "]", "for", "x", "in", "labels_tuple", "if", "x", "[", "0", "]", "==", "src_skill", "]", "\n", "if", "len", "(", "relevant", ")", "!=", "0", ":", "\n", "            ", "rank", "=", "np", ".", "min", "(", "[", "np", ".", "where", "(", "np", ".", "array", "(", "rankings", "[", "src_skill", "]", ")", "==", "relevant", "[", "k", "]", ")", "for", "k", "in", "range", "(", "len", "(", "relevant", ")", ")", "]", ")", "+", "1", "\n", "reciprocal_ranks", ".", "append", "(", "1", "/", "rank", ")", "\n", "", "", "return", "np", ".", "mean", "(", "reciprocal_ranks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CAHLR_skill-equivalency.None.evaluate.evaluate": [[44, 67], ["pandas.read_csv", "evaluate.l2_normalization", "pandas.read_csv", "evaluate.l2_normalization", "evaluate.get_rankings", "pandas.read_csv", "evaluate.get_recall_at_5", "evaluate.get_mean_reciprocal_rank"], "function", ["home.repos.pwc.inspect_result.CAHLR_skill-equivalency.skill_representations.content2vec.l2_normalization", "home.repos.pwc.inspect_result.CAHLR_skill-equivalency.skill_representations.content2vec.l2_normalization", "home.repos.pwc.inspect_result.CAHLR_skill-equivalency.None.evaluate.get_rankings", "home.repos.pwc.inspect_result.CAHLR_skill-equivalency.None.evaluate.get_recall_at_5", "home.repos.pwc.inspect_result.CAHLR_skill-equivalency.None.evaluate.get_mean_reciprocal_rank"], ["", "def", "evaluate", "(", "src_vectors_path", ",", "dst_vectors_path", ",", "labels_path", ",", "recall_at_5", "=", "True", ",", "mrr", "=", "True", ")", ":", "\n", "    ", "'''\n    Arguments:\n        src_vectors_path: path to source skill vectors, the first column must be skill names\n        dst_vectors_path: path to destination skill vectors, the first column must be skill names\n        labels_path: path to ground truth labels for evaluation, must contain columns \"source\" and \"destination\"\n        recall_at_5: whether to output recall@5\n        mrr: whether to output mean reciprocal rank\n    Return:\n        dict with specified results\n    '''", "\n", "src_vectors", "=", "pd", ".", "read_csv", "(", "src_vectors_path", ",", "index_col", "=", "0", ")", "\n", "src_vectors", "=", "l2_normalization", "(", "src_vectors", ")", "\n", "dst_vectors", "=", "pd", ".", "read_csv", "(", "dst_vectors_path", ",", "index_col", "=", "0", ")", "\n", "dst_vectors", "=", "l2_normalization", "(", "dst_vectors", ")", "\n", "rankings", "=", "get_rankings", "(", "src_vectors", ",", "dst_vectors", ")", "\n", "labels", "=", "pd", ".", "read_csv", "(", "labels_path", ")", "\n", "results", "=", "{", "}", "\n", "if", "recall_at_5", ":", "\n", "        ", "results", "[", "\"recall_at_5\"", "]", "=", "get_recall_at_5", "(", "rankings", ",", "labels", ")", "\n", "", "if", "mrr", ":", "\n", "        ", "results", "[", "\"mrr\"", "]", "=", "get_mean_reciprocal_rank", "(", "rankings", ",", "labels", ")", "\n", "", "return", "results", "\n", "", ""]], "home.repos.pwc.inspect_result.CAHLR_skill-equivalency.None.arguments.parser": [[6, 65], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "arguments.validate_arguments"], "function", ["home.repos.pwc.inspect_result.CAHLR_skill-equivalency.None.arguments.validate_arguments"], ["def", "parser", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "\n", "# Experiment settings", "\n", "models", "=", "[", "\"BOW\"", ",", "\"TFIDF\"", ",", "\"content2vec\"", ",", "\"skill2vec\"", ",", "\"content2vec_skill2vec\"", ",", "\"TAMF\"", "]", "\n", "parser", ".", "add_argument", "(", "\"--src-name\"", ",", "type", "=", "str", ",", "default", "=", "\"source\"", ",", "help", "=", "\"source platform name\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--dst-name\"", ",", "type", "=", "str", ",", "default", "=", "\"destination\"", ",", "help", "=", "\"destination platform name\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--src-repr-model\"", ",", "type", "=", "str", ",", "choices", "=", "models", ",", "required", "=", "True", ",", "help", "=", "\"source representation model\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--dst-repr-model\"", ",", "type", "=", "str", ",", "choices", "=", "models", ",", "required", "=", "True", ",", "help", "=", "\"destination representation model\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--expr-name\"", ",", "type", "=", "str", ",", "help", "=", "\"a custom experiment name\"", ")", "\n", "\n", "# Input data", "\n", "parser", ".", "add_argument", "(", "\"--labels-path\"", ",", "type", "=", "str", ",", "required", "=", "True", ",", "help", "=", "\"path to ground truth labels\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--src-problems-path\"", ",", "type", "=", "str", ",", "help", "=", "\"path to source problems\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--dst-problems-path\"", ",", "type", "=", "str", ",", "help", "=", "\"path to destination problems\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--src-sequences-path\"", ",", "type", "=", "str", ",", "help", "=", "\"path to source sequences\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--dst-sequences-path\"", ",", "type", "=", "str", ",", "help", "=", "\"path to destination sequences\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--src-skill2id-path\"", ",", "type", "=", "str", ",", "help", "=", "\"path to source skill2id file\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--dst-skill2id-path\"", ",", "type", "=", "str", ",", "help", "=", "\"path to destination skill2id file\"", ")", "\n", "\n", "# Output root dir", "\n", "parser", ".", "add_argument", "(", "\"--output-root\"", ",", "type", "=", "str", ",", "default", "=", "\"./output\"", ",", "help", "=", "\"path to output root directory\"", ")", "\n", "\n", "# Hyperparameters", "\n", "parser", ".", "add_argument", "(", "\"--content2vec-size\"", ",", "type", "=", "int", ",", "default", "=", "50", ",", "help", "=", "\"content2vec vector size, only used when both --src-repr-model and --dst-repr-model are content2vec\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--content2vec-window\"", ",", "type", "=", "int", ",", "default", "=", "20", ",", "help", "=", "\"content2vec window size, only used when both --src-repr-model and --dst-repr-model are content2vec\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--content2vec-min-count\"", ",", "type", "=", "int", ",", "default", "=", "30", ",", "help", "=", "\"content2vec minimum count, only used when both --src-repr-model and --dst-repr-model are content2vec\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--src-content2vec-size\"", ",", "type", "=", "int", ",", "default", "=", "50", ",", "help", "=", "\"source content2vec vector size, used when --src-repr-model is content2vec and --dst-repr-model is not content2vec\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--src-content2vec-window\"", ",", "type", "=", "int", ",", "default", "=", "20", ",", "help", "=", "\"source content2vec window size, used when --src-repr-model is content2vec and --dst-repr-model is not content2vec\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--src-content2vec-min-count\"", ",", "type", "=", "int", ",", "default", "=", "30", ",", "help", "=", "\"source content2vec minimum count, used when --src-repr-model is content2vec and --dst-repr-model is not content2vec\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--dst-content2vec-size\"", ",", "type", "=", "int", ",", "default", "=", "50", ",", "help", "=", "\"destination content2vec vector size, used when --dst-repr-model is content2vec and --src-repr-model is not content2vec\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--dst-content2vec-window\"", ",", "type", "=", "int", ",", "default", "=", "20", ",", "help", "=", "\"destination content2vec window size, used when --dst-repr-model is content2vec and --src-repr-model is not content2vec\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--dst-content2vec-min-count\"", ",", "type", "=", "int", ",", "default", "=", "30", ",", "help", "=", "\"destination content2vec minimum count, used when --dst-repr-model is content2vec and --src-repr-model is not content2vec\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--src-skill2vec-size\"", ",", "type", "=", "int", ",", "default", "=", "50", ",", "help", "=", "\"source skill2vec vector size\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--src-skill2vec-window\"", ",", "type", "=", "int", ",", "default", "=", "20", ",", "help", "=", "\"source skill2vec window size\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--dst-skill2vec-size\"", ",", "type", "=", "int", ",", "default", "=", "50", ",", "help", "=", "\"destination skill2vec vector size\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--dst-skill2vec-window\"", ",", "type", "=", "int", ",", "default", "=", "20", ",", "help", "=", "\"destination skill2vec window size\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--src-TAMF-k\"", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "\"source TAMF half vector size k\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--src-TAMF-lambda\"", ",", "type", "=", "float", ",", "default", "=", "0.1", ",", "help", "=", "\"source TAMF regularization coefficient lambda\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--dst-TAMF-k\"", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "\"destination TAMF half vector size k\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--dst-TAMF-lambda\"", ",", "type", "=", "float", ",", "default", "=", "0.1", ",", "help", "=", "\"destination TAMF regularization coefficient lambda\"", ")", "\n", "\n", "# Translation parameters", "\n", "parser", ".", "add_argument", "(", "\"--device\"", ",", "type", "=", "str", ",", "choices", "=", "[", "\"cpu\"", ",", "\"cuda\"", "]", ",", "default", "=", "\"cuda\"", ",", "help", "=", "\"device to run translation on\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--num-epochs\"", ",", "type", "=", "int", ",", "default", "=", "1000", ",", "help", "=", "\"number of epochs\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--val-ratio\"", ",", "type", "=", "float", ",", "default", "=", "0.2", ",", "help", "=", "\"percentage of validation set\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--max-val-non-decreasing-epochs\"", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "\"early stop if maximum number of epochs without validation loss decrease reached\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--verbose\"", ",", "type", "=", "bool", ",", "default", "=", "False", ")", "\n", "\n", "# Evaluation", "\n", "parser", ".", "add_argument", "(", "\"--recall-at-5\"", ",", "type", "=", "bool", ",", "default", "=", "True", ",", "help", "=", "\"whether to evaluate with recall@5\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--mrr\"", ",", "type", "=", "bool", ",", "default", "=", "True", ",", "help", "=", "\"whether to evaluate with mean reciprocal rank\"", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "validate_arguments", "(", "args", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.CAHLR_skill-equivalency.None.arguments.validate_arguments": [[67, 84], ["os.path.exists", "torch.device", "os.path.join", "os.makedirs", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists"], "function", ["None"], ["", "def", "validate_arguments", "(", "args", ")", ":", "\n", "    ", "assert", "os", ".", "path", ".", "exists", "(", "args", ".", "labels_path", ")", "\n", "if", "args", ".", "src_repr_model", "in", "[", "\"BOW\"", ",", "\"TFIDF\"", ",", "\"content2vec\"", ",", "\"content2vec_skill2vec\"", ",", "\"TAMF\"", "]", ":", "\n", "        ", "assert", "os", ".", "path", ".", "exists", "(", "args", ".", "src_problems_path", ")", "\n", "", "if", "args", ".", "dst_repr_model", "in", "[", "\"BOW\"", ",", "\"TFIDF\"", ",", "\"content2vec\"", ",", "\"content2vec_skill2vec\"", ",", "\"TAMF\"", "]", ":", "\n", "        ", "assert", "os", ".", "path", ".", "exists", "(", "args", ".", "dst_problems_path", ")", "\n", "", "if", "args", ".", "src_repr_model", "in", "[", "\"skill2vec\"", ",", "\"content2vec_skill2vec\"", ",", "\"TAMF\"", "]", ":", "\n", "        ", "assert", "os", ".", "path", ".", "exists", "(", "args", ".", "src_sequences_path", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "args", ".", "src_skill2id_path", ")", "\n", "", "if", "args", ".", "dst_repr_model", "in", "[", "\"skill2vec\"", ",", "\"content2vec_skill2vec\"", ",", "\"TAMF\"", "]", ":", "\n", "        ", "assert", "os", ".", "path", ".", "exists", "(", "args", ".", "dst_sequences_path", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "args", ".", "dst_skill2id_path", ")", "\n", "", "args", ".", "device", "=", "torch", ".", "device", "(", "args", ".", "device", ")", "\n", "if", "not", "args", ".", "expr_name", ":", "\n", "        ", "args", ".", "expr_name", "=", "f\"{args.src_name}_{args.src_repr_model}_to_{args.dst_name}_{args.dst_repr_model}\"", "\n", "", "args", ".", "output_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_root", ",", "args", ".", "expr_name", ")", "\n", "os", ".", "makedirs", "(", "args", ".", "output_path", ",", "exist_ok", "=", "True", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.CAHLR_skill-equivalency.skill_representations.TAMF.l2_normalization": [[9, 11], ["numpy.linalg.norm().reshape", "numpy.linalg.norm"], "function", ["None"], ["def", "l2_normalization", "(", "vectors", ")", ":", "\n", "    ", "return", "vectors", "/", "np", ".", "linalg", ".", "norm", "(", "vectors", ",", "ord", "=", "2", ",", "axis", "=", "1", ")", ".", "reshape", "(", "vectors", ".", "shape", "[", "0", "]", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CAHLR_skill-equivalency.skill_representations.TAMF.count_skill_and_context": [[13, 27], ["collections.Counter", "collections.Counter", "collections.Counter", "range", "len", "range", "len"], "function", ["None"], ["", "def", "count_skill_and_context", "(", "sequences", ",", "window_size", ")", ":", "\n", "    ", "sc_count", "=", "Counter", "(", ")", "\n", "s_count", "=", "Counter", "(", ")", "\n", "c_count", "=", "Counter", "(", ")", "\n", "for", "sequence", "in", "sequences", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "sequence", ")", ")", ":", "\n", "            ", "skill", "=", "sequence", "[", "i", "]", "\n", "for", "j", "in", "range", "(", "-", "window_size", ",", "window_size", "+", "1", ")", ":", "\n", "                ", "if", "i", "+", "j", ">=", "0", "and", "i", "+", "j", "<", "len", "(", "sequence", ")", "and", "j", "!=", "0", ":", "\n", "                    ", "context", "=", "sequence", "[", "i", "+", "j", "]", "\n", "sc_count", "[", "(", "skill", ",", "context", ")", "]", "+=", "1", "\n", "s_count", "[", "skill", "]", "+=", "1", "\n", "c_count", "[", "context", "]", "+=", "1", "\n", "", "", "", "", "return", "sc_count", ",", "s_count", ",", "c_count", "\n", "\n"]], "home.repos.pwc.inspect_result.CAHLR_skill-equivalency.skill_representations.TAMF.build_PPMI_matrix": [[29, 41], ["TAMF.count_skill_and_context", "sum", "sc_count.items", "scipy.sparse.csc_matrix", "scipy.sparse.csc_matrix.toarray", "sc_count.values", "data.append", "rows.append", "cols.append", "math.log2", "int", "int"], "function", ["home.repos.pwc.inspect_result.CAHLR_skill-equivalency.skill_representations.TAMF.count_skill_and_context"], ["", "def", "build_PPMI_matrix", "(", "sequences", ",", "window_size", "=", "5", ")", ":", "\n", "    ", "sc_count", ",", "s_count", ",", "c_count", "=", "count_skill_and_context", "(", "sequences", ",", "window_size", ")", "\n", "data", ",", "rows", ",", "cols", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "total_occurences", "=", "sum", "(", "sc_count", ".", "values", "(", ")", ")", "\n", "for", "(", "s", ",", "c", ")", ",", "n", "in", "sc_count", ".", "items", "(", ")", ":", "\n", "        ", "val", "=", "n", "*", "total_occurences", "/", "(", "s_count", "[", "s", "]", "*", "c_count", "[", "c", "]", ")", "\n", "if", "val", ">", "1", ":", "\n", "            ", "data", ".", "append", "(", "log2", "(", "val", ")", ")", "\n", "rows", ".", "append", "(", "int", "(", "s", ")", ")", "\n", "cols", ".", "append", "(", "int", "(", "c", ")", ")", "\n", "", "", "PPMI", "=", "csc_matrix", "(", "(", "data", ",", "(", "rows", ",", "cols", ")", ")", ")", "\n", "return", "PPMI", ".", "toarray", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CAHLR_skill-equivalency.skill_representations.TAMF.get_loss": [[43, 47], ["W.T.dot().dot", "W.T.dot"], "function", ["None"], ["", "def", "get_loss", "(", "M", ",", "W", ",", "H", ",", "T", ",", "lamb", ")", ":", "\n", "    ", "loss_dist", "=", "(", "(", "M", "-", "W", ".", "T", ".", "dot", "(", "H", ")", ".", "dot", "(", "T", ")", ")", "**", "2", ")", ".", "sum", "(", ")", "\n", "loss_reg", "=", "(", "W", "**", "2", ")", ".", "sum", "(", ")", "+", "(", "H", "**", "2", ")", ".", "sum", "(", ")", "\n", "return", "loss_dist", "+", "(", "lamb", "/", "2", ")", "*", "loss_reg", "\n", "\n"]], "home.repos.pwc.inspect_result.CAHLR_skill-equivalency.skill_representations.TAMF.optimizeW": [[49, 54], ["numpy.linalg.solve", "H.dot().dot", "H.dot().dot().dot", "numpy.eye", "H.dot", "H.dot().dot", "H.dot"], "function", ["None"], ["", "def", "optimizeW", "(", "M", ",", "H", ",", "T", ",", "lamb", ")", ":", "\n", "# 2 * H * T * T.T * H.T * W + lamb * W = 2 * H * T * M.T", "\n", "    ", "a", "=", "2", "*", "H", ".", "dot", "(", "T", ")", ".", "dot", "(", "T", ".", "T", ")", ".", "dot", "(", "H", ".", "T", ")", "+", "lamb", "*", "np", ".", "eye", "(", "H", ".", "shape", "[", "0", "]", ")", "\n", "b", "=", "2", "*", "H", ".", "dot", "(", "T", ")", ".", "dot", "(", "M", ".", "T", ")", "\n", "return", "np", ".", "linalg", ".", "solve", "(", "a", ",", "b", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CAHLR_skill-equivalency.skill_representations.TAMF.optimizeH": [[56, 66], ["T.dot", "numpy.kron", "C.reshape", "numpy.linalg.solve", "np.linalg.solve.reshape", "W.dot", "W.dot().dot", "numpy.eye", "W.dot"], "function", ["None"], ["", "def", "optimizeH", "(", "M", ",", "W", ",", "T", ",", "lamb", ")", ":", "\n", "# 2 * W * W.T * H * T * T.T + lamb * H = 2 * W * M * T.T", "\n", "    ", "A", "=", "2", "/", "lamb", "*", "W", ".", "dot", "(", "W", ".", "T", ")", "\n", "B", "=", "T", ".", "dot", "(", "T", ".", "T", ")", "\n", "C", "=", "2", "/", "lamb", "*", "W", ".", "dot", "(", "M", ")", ".", "dot", "(", "T", ".", "T", ")", "\n", "tensor", "=", "np", ".", "kron", "(", "B", ".", "T", ",", "A", ")", "\n", "a", "=", "tensor", "+", "np", ".", "eye", "(", "tensor", ".", "shape", "[", "0", "]", ")", "\n", "b", "=", "C", ".", "reshape", "(", "-", "1", ",", "1", ",", "order", "=", "'F'", ")", "\n", "x", "=", "np", ".", "linalg", ".", "solve", "(", "a", ",", "b", ")", "\n", "return", "x", ".", "reshape", "(", "W", ".", "shape", "[", "0", "]", ",", "T", ".", "shape", "[", "0", "]", ",", "order", "=", "'F'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CAHLR_skill-equivalency.skill_representations.TAMF.optimize_one_turn": [[68, 72], ["TAMF.optimizeW", "TAMF.optimizeH"], "function", ["home.repos.pwc.inspect_result.CAHLR_skill-equivalency.skill_representations.TAMF.optimizeW", "home.repos.pwc.inspect_result.CAHLR_skill-equivalency.skill_representations.TAMF.optimizeH"], ["", "def", "optimize_one_turn", "(", "M", ",", "W", ",", "H", ",", "T", ",", "lamb", ")", ":", "\n", "    ", "newW", "=", "optimizeW", "(", "M", ",", "H", ",", "T", ",", "lamb", ")", "\n", "newH", "=", "optimizeH", "(", "M", ",", "newW", ",", "T", ",", "lamb", ")", "\n", "return", "newW", ",", "newH", "\n", "\n"]], "home.repos.pwc.inspect_result.CAHLR_skill-equivalency.skill_representations.TAMF.get_W_and_H": [[74, 89], ["numpy.random.rand", "numpy.random.rand", "float", "TAMF.get_loss", "print", "TAMF.optimize_one_turn"], "function", ["home.repos.pwc.inspect_result.CAHLR_skill-equivalency.skill_representations.TAMF.get_loss", "home.repos.pwc.inspect_result.CAHLR_skill-equivalency.skill_representations.TAMF.optimize_one_turn"], ["", "def", "get_W_and_H", "(", "PPMI", ",", "content", ",", "k", ",", "lamb", ",", "stop_criterion", "=", "1", ")", ":", "\n", "    ", "v", "=", "PPMI", ".", "shape", "[", "0", "]", "\n", "f", "=", "content", ".", "T", ".", "shape", "[", "0", "]", "\n", "W", "=", "np", ".", "random", ".", "rand", "(", "k", ",", "v", ")", "\n", "H", "=", "np", ".", "random", ".", "rand", "(", "k", ",", "f", ")", "\n", "prev_loss", "=", "float", "(", "'inf'", ")", "\n", "while", "True", ":", "\n", "        ", "new_loss", "=", "get_loss", "(", "PPMI", ",", "W", ",", "H", ",", "content", ".", "T", ",", "lamb", ")", "\n", "print", "(", "'loss:'", ",", "new_loss", ")", "\n", "if", "prev_loss", "-", "new_loss", "<", "stop_criterion", ":", "\n", "            ", "break", "\n", "", "else", ":", "\n", "            ", "prev_loss", "=", "new_loss", "\n", "", "W", ",", "H", "=", "optimize_one_turn", "(", "PPMI", ",", "W", ",", "H", ",", "content", ".", "T", ",", "lamb", ")", "\n", "", "return", "W", ",", "H", "\n", "\n"]], "home.repos.pwc.inspect_result.CAHLR_skill-equivalency.skill_representations.TAMF.generate_TAMF_vectors_one_taxonomy": [[91, 129], ["pandas.read_csv", "print", "TAMF.build_PPMI_matrix", "pandas.read_csv", "print", "TAMF.get_W_and_H", "H.dot", "pandas.DataFrame", "TAMF.l2_normalization", "l2_normalization.to_csv", "print", "open", "json.load", "open", "json.load", "numpy.vstack", "sorted", "sorted", "json.load.items", "json.load.items", "int", "int"], "function", ["home.repos.pwc.inspect_result.CAHLR_skill-equivalency.skill_representations.TAMF.build_PPMI_matrix", "home.repos.pwc.inspect_result.CAHLR_skill-equivalency.skill_representations.TAMF.get_W_and_H", "home.repos.pwc.inspect_result.CAHLR_skill-equivalency.skill_representations.content2vec.l2_normalization"], ["", "def", "generate_TAMF_vectors_one_taxonomy", "(", "sequences_path", ",", "skill2id_path", ",", "content2vec_path", ",", "output_path", ",", "k", ",", "lamb", ")", ":", "\n", "    ", "'''\n    Generate TAMF vectors for one taxonomy\n    Arguments:\n        sequences_path: path to sequences, list of list of strings, json format\n                        the sequences are in ids instead of skills to reduce file size\n        skill2id_path: path to json file specifying skill-id mapping\n        content2vec_path: path to the content2vec file as input to TAMF\n        output_path: path to store generated TAMF vectors, csv format\n        k: hyperparameter - half vector dimension\n        lamb: hyperparameter - regularization coefficient\n    Return:\n        None, generated vectors are saved to specified output path\n    '''", "\n", "with", "open", "(", "sequences_path", ")", "as", "f", ":", "\n", "        ", "sequences", "=", "json", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "skill2id_path", ")", "as", "f", ":", "\n", "        ", "skill2id", "=", "json", ".", "load", "(", "f", ")", "\n", "", "skills_ordered_by_id", "=", "[", "p", "[", "0", "]", "for", "p", "in", "sorted", "(", "skill2id", ".", "items", "(", ")", ",", "key", "=", "lambda", "x", ":", "int", "(", "x", "[", "1", "]", ")", ")", "]", "\n", "content2vec", "=", "pd", ".", "read_csv", "(", "content2vec_path", ",", "index_col", "=", "0", ")", "\n", "content2vec", "=", "content2vec", ".", "loc", "[", "skills_ordered_by_id", ",", ":", "]", ".", "values", "\n", "\n", "print", "(", "\"Generating PPMI matrix...\"", ")", "\n", "PPMI", "=", "build_PPMI_matrix", "(", "sequences", ")", "\n", "skills_ordered_by_id", "=", "[", "p", "[", "0", "]", "for", "p", "in", "sorted", "(", "skill2id", ".", "items", "(", ")", ",", "key", "=", "lambda", "x", ":", "int", "(", "x", "[", "1", "]", ")", ")", "]", "\n", "content2vec", "=", "pd", ".", "read_csv", "(", "content2vec_path", ",", "index_col", "=", "0", ")", "\n", "content2vec", "=", "content2vec", ".", "loc", "[", "skills_ordered_by_id", ",", ":", "]", ".", "values", "\n", "\n", "print", "(", "\"Optimizing matrix factorization...\"", ")", "\n", "W", ",", "H", "=", "get_W_and_H", "(", "PPMI", ",", "content2vec", ",", "k", ",", "lamb", ",", "10", ")", "\n", "HT", "=", "H", ".", "dot", "(", "content2vec", ".", "T", ")", "\n", "TAMF_vec", "=", "np", ".", "vstack", "(", "[", "W", ",", "HT", "]", ")", ".", "T", "\n", "\n", "TAMF_vec", "=", "pd", ".", "DataFrame", "(", "TAMF_vec", ",", "index", "=", "skills_ordered_by_id", ")", "\n", "TAMF_vec", ".", "index", ".", "name", "=", "\"skill\"", "\n", "TAMF_vec", "=", "l2_normalization", "(", "TAMF_vec", ")", "\n", "TAMF_vec", ".", "to_csv", "(", "output_path", ")", "\n", "print", "(", "\"Complete!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CAHLR_skill-equivalency.skill_representations.TAMF.generate_TAMF_vectors_two_taxonomies": [[131, 154], ["print", "TAMF.generate_TAMF_vectors_one_taxonomy", "print", "TAMF.generate_TAMF_vectors_one_taxonomy"], "function", ["home.repos.pwc.inspect_result.CAHLR_skill-equivalency.skill_representations.TAMF.generate_TAMF_vectors_one_taxonomy", "home.repos.pwc.inspect_result.CAHLR_skill-equivalency.skill_representations.TAMF.generate_TAMF_vectors_one_taxonomy"], ["", "def", "generate_TAMF_vectors_two_taxonomies", "(", "\n", "src_sequences_path", ",", "src_skill2id_path", ",", "src_content2vec_path", ",", "src_output_path", ",", "src_k", ",", "src_lamb", ",", "\n", "dst_sequences_path", ",", "dst_skill2id_path", ",", "dst_content2vec_path", ",", "dst_output_path", ",", "dst_k", ",", "dst_lamb", ")", ":", "\n", "    ", "'''\n    Generate TAMF vectors for two taxonomies, trained separately\n    Arguments:\n        src_sequences_path: path to source sequences, list of list of strings, json format\n                            the sequences are in ids instead of skills to reduce file size\n        src_skill2id_path: path to json file specifying source skill-id mapping\n        src_content2vec_path: path to the source content2vec file as input to TAMF\n        src_output_path: path to store generated source TAMF vectors, csv format\n        src_k: hyperparameter - source half vector dimension\n        src_lamb: hyperparameter - source regularization coefficient\n        dst_******: the same set of arguments for destination\n    Return:\n        None, generated vectors are saved to specified output path\n    '''", "\n", "print", "(", "\"Generating TAMF vectors for source\"", ")", "\n", "generate_TAMF_vectors_one_taxonomy", "(", "\n", "src_sequences_path", ",", "src_skill2id_path", ",", "src_content2vec_path", ",", "src_output_path", ",", "src_k", ",", "src_lamb", ")", "\n", "print", "(", "\"Generating TAMF vectors for destination\"", ")", "\n", "generate_TAMF_vectors_one_taxonomy", "(", "\n", "dst_sequences_path", ",", "dst_skill2id_path", ",", "dst_content2vec_path", ",", "dst_output_path", ",", "dst_k", ",", "dst_lamb", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.CAHLR_skill-equivalency.skill_representations.skill2vec.l2_normalization": [[7, 9], ["numpy.linalg.norm().reshape", "numpy.linalg.norm"], "function", ["None"], ["def", "l2_normalization", "(", "vectors", ")", ":", "\n", "    ", "return", "vectors", "/", "np", ".", "linalg", ".", "norm", "(", "vectors", ",", "ord", "=", "2", ",", "axis", "=", "1", ")", ".", "reshape", "(", "vectors", ".", "shape", "[", "0", "]", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CAHLR_skill-equivalency.skill_representations.skill2vec.generate_skill2vec_vectors_one_taxonomy": [[11, 41], ["gensim.models.Word2Vec", "sorted", "pandas.DataFrame", "l2_normalization.index.map", "skill2vec.l2_normalization", "l2_normalization.to_csv", "open", "json.load", "len", "len", "open", "json.load", "json.load.values", "set", "set", "json.load.items", "json.load.values", "json.load.keys", "int", "str"], "function", ["home.repos.pwc.inspect_result.CAHLR_skill-equivalency.skill_representations.content2vec.l2_normalization"], ["", "def", "generate_skill2vec_vectors_one_taxonomy", "(", "sequences_path", ",", "skill2id_path", ",", "output_path", ",", "size", ",", "window", ")", ":", "\n", "    ", "'''\n    Generate skill2vec vectors for one taxonomy\n    Arguments:\n        sequences_path: path to sequences, list of list of strings, json format\n                        the sequences are in ids instead of skills to reduce file size\n        skill2id_path: path to json file specifying skill-id mapping\n        output_path: path to store generated skill2vec vectors, csv format\n        size: hyperparameter - vector dimension\n        window: hyperparameter - window size\n    Return:\n        None, generated vectors are saved to specified output path\n    '''", "\n", "with", "open", "(", "skill2id_path", ")", "as", "f", ":", "\n", "        ", "skill2id", "=", "json", ".", "load", "(", "f", ")", "\n", "", "assert", "len", "(", "set", "(", "skill2id", ".", "values", "(", ")", ")", ")", "==", "len", "(", "set", "(", "skill2id", ".", "keys", "(", ")", ")", ")", "\n", "id2skill", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "skill2id", ".", "items", "(", ")", "}", "\n", "\n", "with", "open", "(", "sequences_path", ")", "as", "f", ":", "\n", "        ", "sequences", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "model", "=", "gensim", ".", "models", ".", "Word2Vec", "(", "sequences", ",", "size", "=", "size", ",", "window", "=", "window", ",", "min_count", "=", "0", ")", "\n", "\n", "ids", "=", "sorted", "(", "skill2id", ".", "values", "(", ")", ",", "key", "=", "lambda", "x", ":", "int", "(", "x", ")", ")", "\n", "vectors", "=", "pd", ".", "DataFrame", "(", "model", ".", "wv", "[", "ids", "]", ",", "index", "=", "ids", ")", "\n", "vectors", ".", "index", "=", "vectors", ".", "index", ".", "map", "(", "lambda", "x", ":", "id2skill", "[", "str", "(", "x", ")", "]", ")", "\n", "vectors", ".", "index", ".", "name", "=", "\"skill\"", "\n", "vectors", "=", "l2_normalization", "(", "vectors", ")", "\n", "\n", "vectors", ".", "to_csv", "(", "output_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CAHLR_skill-equivalency.skill_representations.skill2vec.generate_skill2vec_vectors_two_taxonomies": [[43, 63], ["skill2vec.generate_skill2vec_vectors_one_taxonomy", "skill2vec.generate_skill2vec_vectors_one_taxonomy"], "function", ["home.repos.pwc.inspect_result.CAHLR_skill-equivalency.skill_representations.skill2vec.generate_skill2vec_vectors_one_taxonomy", "home.repos.pwc.inspect_result.CAHLR_skill-equivalency.skill_representations.skill2vec.generate_skill2vec_vectors_one_taxonomy"], ["", "def", "generate_skill2vec_vectors_two_taxonomies", "(", "\n", "src_sequences_path", ",", "src_skill2id_path", ",", "src_output_path", ",", "src_size", ",", "src_window", ",", "\n", "dst_sequences_path", ",", "dst_skill2id_path", ",", "dst_output_path", ",", "dst_size", ",", "dst_window", ")", ":", "\n", "    ", "'''\n    Generate skill2vec vectors for two taxonomies, trained separately\n    Arguments:\n        src_sequences_path: path to source sequences, list of list of strings, json format\n                            the sequences are in ids instead of skills to reduce file size\n        src_skill2id_path: path to json file specifying source skill-id mapping\n        src_output_path: path to store generated source skill2vec vectors, csv format\n        src_size: hyperparameter - source vector dimension\n        src_window: hyperparameter - source window size\n        dst_******: the same set of arguments for destination\n    Return:\n        None, generated vectors are saved to specified output path\n    '''", "\n", "generate_skill2vec_vectors_one_taxonomy", "(", "\n", "src_sequences_path", ",", "src_skill2id_path", ",", "src_output_path", ",", "src_size", ",", "src_window", ")", "\n", "generate_skill2vec_vectors_one_taxonomy", "(", "\n", "dst_sequences_path", ",", "dst_skill2id_path", ",", "dst_output_path", ",", "dst_size", ",", "dst_window", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.CAHLR_skill-equivalency.skill_representations.TFIDF.generate_TFIDF_vectors_one_taxonomy": [[5, 12], ["pandas.read_csv", "sklearn.feature_extraction.text.TfidfVectorizer().fit", "pandas.DataFrame", "vectors.groupby().mean.groupby().mean", "vectors.groupby().mean.to_csv", "TfidfVectorizer().fit.transform().toarray", "sklearn.feature_extraction.text.TfidfVectorizer", "vectors.groupby().mean.groupby", "TfidfVectorizer().fit.transform"], "function", ["None"], ["def", "generate_TFIDF_vectors_one_taxonomy", "(", "problems_path", ",", "output_path", ")", ":", "\n", "    ", "problems", "=", "pd", ".", "read_csv", "(", "problems_path", ",", "sep", "=", "\"\\t\"", ")", "\n", "bow_model", "=", "TfidfVectorizer", "(", "ngram_range", "=", "(", "1", ",", "1", ")", ")", ".", "fit", "(", "problems", "[", "\"content\"", "]", ")", "\n", "vectors", "=", "pd", ".", "DataFrame", "(", "bow_model", ".", "transform", "(", "problems", "[", "'content'", "]", ")", ".", "toarray", "(", ")", ")", "\n", "vectors", "[", "\"skill\"", "]", "=", "problems", "[", "\"skill\"", "]", "\n", "vectors", "=", "vectors", ".", "groupby", "(", "\"skill\"", ")", ".", "mean", "(", ")", "\n", "vectors", ".", "to_csv", "(", "output_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CAHLR_skill-equivalency.skill_representations.TFIDF.generate_TFIDF_vectors_two_taxonomies": [[14, 31], ["pandas.read_csv", "pandas.read_csv", "sklearn.feature_extraction.text.TfidfVectorizer().fit", "pandas.DataFrame", "src_vectors.groupby().mean.groupby().mean", "src_vectors.groupby().mean.to_csv", "pandas.DataFrame", "dst_vectors.groupby().mean.groupby().mean", "dst_vectors.groupby().mean.to_csv", "src_problems[].tolist", "dst_problems[].tolist", "TfidfVectorizer().fit.transform().toarray", "TfidfVectorizer().fit.transform().toarray", "sklearn.feature_extraction.text.TfidfVectorizer", "src_vectors.groupby().mean.groupby", "dst_vectors.groupby().mean.groupby", "TfidfVectorizer().fit.transform", "TfidfVectorizer().fit.transform"], "function", ["None"], ["", "def", "generate_TFIDF_vectors_two_taxonomies", "(", "src_problems_path", ",", "dst_problems_path", ",", "\n", "src_output_path", ",", "dst_output_path", ")", ":", "\n", "    ", "src_problems", "=", "pd", ".", "read_csv", "(", "src_problems_path", ",", "sep", "=", "\"\\t\"", ")", "\n", "dst_problems", "=", "pd", ".", "read_csv", "(", "dst_problems_path", ",", "sep", "=", "\"\\t\"", ")", "\n", "\n", "combined_problems", "=", "src_problems", "[", "\"content\"", "]", ".", "tolist", "(", ")", "+", "dst_problems", "[", "\"content\"", "]", ".", "tolist", "(", ")", "\n", "bow_model", "=", "TfidfVectorizer", "(", "ngram_range", "=", "(", "1", ",", "1", ")", ")", ".", "fit", "(", "combined_problems", ")", "\n", "\n", "src_vectors", "=", "pd", ".", "DataFrame", "(", "bow_model", ".", "transform", "(", "src_problems", "[", "'content'", "]", ")", ".", "toarray", "(", ")", ")", "\n", "src_vectors", "[", "\"skill\"", "]", "=", "src_problems", "[", "\"skill\"", "]", "\n", "src_vectors", "=", "src_vectors", ".", "groupby", "(", "\"skill\"", ")", ".", "mean", "(", ")", "\n", "src_vectors", ".", "to_csv", "(", "src_output_path", ")", "\n", "\n", "dst_vectors", "=", "pd", ".", "DataFrame", "(", "bow_model", ".", "transform", "(", "dst_problems", "[", "'content'", "]", ")", ".", "toarray", "(", ")", ")", "\n", "dst_vectors", "[", "\"skill\"", "]", "=", "dst_problems", "[", "\"skill\"", "]", "\n", "dst_vectors", "=", "dst_vectors", ".", "groupby", "(", "\"skill\"", ")", ".", "mean", "(", ")", "\n", "dst_vectors", ".", "to_csv", "(", "dst_output_path", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.CAHLR_skill-equivalency.skill_representations.content2vec_skill2vec.l2_normalization": [[5, 7], ["numpy.linalg.norm().reshape", "numpy.linalg.norm"], "function", ["None"], ["def", "l2_normalization", "(", "vectors", ")", ":", "\n", "    ", "return", "vectors", "/", "np", ".", "linalg", ".", "norm", "(", "vectors", ",", "ord", "=", "2", ",", "axis", "=", "1", ")", ".", "reshape", "(", "vectors", ".", "shape", "[", "0", "]", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CAHLR_skill-equivalency.skill_representations.content2vec_skill2vec.combine_content2vec_and_skill2vec_one_taxonomy": [[9, 17], ["pandas.read_csv", "pandas.read_csv", "pandas.merge", "content2vec_skill2vec.l2_normalization", "l2_normalization.to_csv", "str", "range"], "function", ["home.repos.pwc.inspect_result.CAHLR_skill-equivalency.skill_representations.content2vec.l2_normalization"], ["", "def", "combine_content2vec_and_skill2vec_one_taxonomy", "(", "content2vec_path", ",", "skill2vec_path", ",", "output_path", ")", ":", "\n", "    ", "content2vec", "=", "pd", ".", "read_csv", "(", "content2vec_path", ",", "index_col", "=", "0", ")", "\n", "skill2vec", "=", "pd", ".", "read_csv", "(", "skill2vec_path", ",", "index_col", "=", "0", ")", "\n", "combined", "=", "pd", ".", "merge", "(", "content2vec", ",", "skill2vec", ",", "left_index", "=", "True", ",", "right_index", "=", "True", ",", "how", "=", "\"outer\"", ")", "\n", "assert", "combined", ".", "shape", "[", "0", "]", "==", "content2vec", ".", "shape", "[", "0", "]", "==", "skill2vec", ".", "shape", "[", "0", "]", "\n", "combined", ".", "columns", "=", "[", "str", "(", "x", ")", "for", "x", "in", "range", "(", "combined", ".", "shape", "[", "1", "]", ")", "]", "\n", "combined", "=", "l2_normalization", "(", "combined", ")", "\n", "combined", ".", "to_csv", "(", "output_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CAHLR_skill-equivalency.skill_representations.content2vec_skill2vec.combine_content2vec_and_skill2vec_two_taxonomies": [[19, 24], ["content2vec_skill2vec.combine_content2vec_and_skill2vec_one_taxonomy", "content2vec_skill2vec.combine_content2vec_and_skill2vec_one_taxonomy"], "function", ["home.repos.pwc.inspect_result.CAHLR_skill-equivalency.skill_representations.content2vec_skill2vec.combine_content2vec_and_skill2vec_one_taxonomy", "home.repos.pwc.inspect_result.CAHLR_skill-equivalency.skill_representations.content2vec_skill2vec.combine_content2vec_and_skill2vec_one_taxonomy"], ["", "def", "combine_content2vec_and_skill2vec_two_taxonomies", "(", "\n", "src_content2vec_path", ",", "src_skill2vec_path", ",", "src_output_path", ",", "\n", "dst_content2vec_path", ",", "dst_skill2vec_path", ",", "dst_output_path", ")", ":", "\n", "    ", "combine_content2vec_and_skill2vec_one_taxonomy", "(", "src_content2vec_path", ",", "src_skill2vec_path", ",", "src_output_path", ")", "\n", "combine_content2vec_and_skill2vec_one_taxonomy", "(", "dst_content2vec_path", ",", "dst_skill2vec_path", ",", "dst_output_path", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.CAHLR_skill-equivalency.skill_representations.content2vec.l2_normalization": [[6, 8], ["numpy.linalg.norm().reshape", "numpy.linalg.norm"], "function", ["None"], ["def", "l2_normalization", "(", "vectors", ")", ":", "\n", "    ", "return", "vectors", "/", "np", ".", "linalg", ".", "norm", "(", "vectors", ",", "ord", "=", "2", ",", "axis", "=", "1", ")", ".", "reshape", "(", "vectors", ".", "shape", "[", "0", "]", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CAHLR_skill-equivalency.skill_representations.content2vec.get_problem_vector": [[10, 15], ["model.wv[].mean", "len", "numpy.random.rand"], "function", ["None"], ["", "def", "get_problem_vector", "(", "content", ",", "model", ",", "size", ")", ":", "\n", "    ", "content", "=", "[", "word", "for", "word", "in", "content", "if", "word", "in", "model", ".", "wv", "]", "\n", "if", "len", "(", "content", ")", "==", "0", ":", "\n", "        ", "return", "np", ".", "random", ".", "rand", "(", "size", ")", "\n", "", "return", "model", ".", "wv", "[", "content", "]", ".", "mean", "(", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CAHLR_skill-equivalency.skill_representations.content2vec.get_skill_vector": [[17, 19], ["numpy.array().mean", "numpy.array", "group[].tolist"], "function", ["None"], ["", "def", "get_skill_vector", "(", "group", ")", ":", "\n", "    ", "return", "np", ".", "array", "(", "group", "[", "\"vector\"", "]", ".", "tolist", "(", ")", ")", ".", "mean", "(", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CAHLR_skill-equivalency.skill_representations.content2vec.generate_content2vec_vectors_one_taxonomy": [[21, 47], ["pandas.read_csv", "problems[].apply", "problems[].tolist", "gensim.models.Word2Vec", "problems[].apply", "pd.read_csv.groupby().apply", "pandas.DataFrame", "content2vec.l2_normalization", "l2_normalization.to_csv", "l2_normalization.tolist", "x.split", "pd.read_csv.groupby"], "function", ["home.repos.pwc.inspect_result.CAHLR_skill-equivalency.skill_representations.content2vec.l2_normalization"], ["", "def", "generate_content2vec_vectors_one_taxonomy", "(", "\n", "problems_path", ",", "output_path", ",", "\n", "size", ",", "window", ",", "min_count", ")", ":", "\n", "    ", "'''\n    Generate content2vec vectors for one taxonomy\n    Arguments:\n        problems_path: path to problems, must contain columns \"skill\" and \"content\", tsv format\n        output_path: path to store generated content2vec vectors, csv format\n        size: hyperparameter - vector dimension\n        window: hyperparameter - window size\n        min_count: hyperparameter - minimum count\n    Return:\n        None, generated vectors are saved to specified output path\n    '''", "\n", "problems", "=", "pd", ".", "read_csv", "(", "problems_path", ",", "sep", "=", "\"\\t\"", ")", "\n", "problems", "[", "\"content\"", "]", "=", "problems", "[", "\"content\"", "]", ".", "apply", "(", "lambda", "x", ":", "x", ".", "split", "(", ")", ")", "\n", "\n", "corpus", "=", "problems", "[", "\"content\"", "]", ".", "tolist", "(", ")", "\n", "model", "=", "gensim", ".", "models", ".", "Word2Vec", "(", "corpus", ",", "size", "=", "size", ",", "window", "=", "window", ",", "min_count", "=", "min_count", ",", "iter", "=", "50", ")", "\n", "\n", "problems", "[", "\"vector\"", "]", "=", "problems", "[", "\"content\"", "]", ".", "apply", "(", "get_problem_vector", ",", "args", "=", "(", "model", ",", "size", ")", ")", "\n", "skills", "=", "problems", ".", "groupby", "(", "\"skill\"", ")", ".", "apply", "(", "get_skill_vector", ")", "\n", "skills", "=", "pd", ".", "DataFrame", "(", "skills", ".", "tolist", "(", ")", ",", "index", "=", "skills", ".", "index", ")", "\n", "skills", "=", "l2_normalization", "(", "skills", ")", "\n", "\n", "skills", ".", "to_csv", "(", "output_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CAHLR_skill-equivalency.skill_representations.content2vec.generate_content2vec_vectors_two_taxonomies": [[49, 87], ["pandas.read_csv", "src_problems[].apply", "pandas.read_csv", "dst_problems[].apply", "gensim.models.Word2Vec", "src_problems[].apply", "pd.read_csv.groupby().apply", "pandas.DataFrame", "content2vec.l2_normalization", "dst_problems[].apply", "pd.read_csv.groupby().apply", "pandas.DataFrame", "content2vec.l2_normalization", "l2_normalization.to_csv", "l2_normalization.to_csv", "src_problems[].tolist", "dst_problems[].tolist", "l2_normalization.tolist", "l2_normalization.tolist", "x.split", "x.split", "pd.read_csv.groupby", "pd.read_csv.groupby"], "function", ["home.repos.pwc.inspect_result.CAHLR_skill-equivalency.skill_representations.content2vec.l2_normalization", "home.repos.pwc.inspect_result.CAHLR_skill-equivalency.skill_representations.content2vec.l2_normalization"], ["", "def", "generate_content2vec_vectors_two_taxonomies", "(", "\n", "src_problems_path", ",", "dst_problems_path", ",", "\n", "src_output_path", ",", "dst_output_path", ",", "\n", "size", ",", "window", ",", "min_count", ")", ":", "\n", "    ", "'''\n    Generate content2vec vectors for two taxonomies, trained on the joint problem corpus\n    Arguments:\n        src_problems_path: path to source problems, must contain columns \"skill\" and \"content\", tsv format\n        dst_problems_path: path to destination problems, must contain columns \"skill\" and \"content\", tsv format\n        src_output_path: path to store generated source content2vec vectors, csv format\n        dst_output_path: path to store generated destination content2vec vectors, csv format\n        size: hyperparameter - vector dimension\n        window: hyperparameter - window size\n        min_count: hyperparameter - minimum count\n    Return:\n        None, generated vectors are saved to specified output path\n    '''", "\n", "src_problems", "=", "pd", ".", "read_csv", "(", "src_problems_path", ",", "sep", "=", "\"\\t\"", ")", "\n", "src_problems", "[", "\"content\"", "]", "=", "src_problems", "[", "\"content\"", "]", ".", "apply", "(", "lambda", "x", ":", "x", ".", "split", "(", ")", ")", "\n", "\n", "dst_problems", "=", "pd", ".", "read_csv", "(", "dst_problems_path", ",", "sep", "=", "\"\\t\"", ")", "\n", "dst_problems", "[", "\"content\"", "]", "=", "dst_problems", "[", "\"content\"", "]", ".", "apply", "(", "lambda", "x", ":", "x", ".", "split", "(", ")", ")", "\n", "\n", "corpus", "=", "src_problems", "[", "\"content\"", "]", ".", "tolist", "(", ")", "+", "dst_problems", "[", "\"content\"", "]", ".", "tolist", "(", ")", "\n", "model", "=", "gensim", ".", "models", ".", "Word2Vec", "(", "corpus", ",", "size", "=", "size", ",", "window", "=", "window", ",", "min_count", "=", "min_count", ",", "iter", "=", "50", ")", "\n", "\n", "src_problems", "[", "\"vector\"", "]", "=", "src_problems", "[", "\"content\"", "]", ".", "apply", "(", "get_problem_vector", ",", "args", "=", "(", "model", ",", "size", ")", ")", "\n", "src_skills", "=", "src_problems", ".", "groupby", "(", "\"skill\"", ")", ".", "apply", "(", "get_skill_vector", ")", "\n", "src_skills", "=", "pd", ".", "DataFrame", "(", "src_skills", ".", "tolist", "(", ")", ",", "index", "=", "src_skills", ".", "index", ")", "\n", "src_skills", "=", "l2_normalization", "(", "src_skills", ")", "\n", "\n", "dst_problems", "[", "\"vector\"", "]", "=", "dst_problems", "[", "\"content\"", "]", ".", "apply", "(", "get_problem_vector", ",", "args", "=", "(", "model", ",", "size", ")", ")", "\n", "dst_skills", "=", "dst_problems", ".", "groupby", "(", "\"skill\"", ")", ".", "apply", "(", "get_skill_vector", ")", "\n", "dst_skills", "=", "pd", ".", "DataFrame", "(", "dst_skills", ".", "tolist", "(", ")", ",", "index", "=", "dst_skills", ".", "index", ")", "\n", "dst_skills", "=", "l2_normalization", "(", "dst_skills", ")", "\n", "\n", "src_skills", ".", "to_csv", "(", "src_output_path", ")", "\n", "dst_skills", ".", "to_csv", "(", "dst_output_path", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.CAHLR_skill-equivalency.skill_representations.BOW.generate_BOW_vectors_one_taxonomy": [[5, 12], ["pandas.read_csv", "sklearn.feature_extraction.text.CountVectorizer().fit", "pandas.DataFrame", "vectors.groupby().mean.groupby().mean", "vectors.groupby().mean.to_csv", "CountVectorizer().fit.transform().toarray", "sklearn.feature_extraction.text.CountVectorizer", "vectors.groupby().mean.groupby", "CountVectorizer().fit.transform"], "function", ["None"], ["def", "generate_BOW_vectors_one_taxonomy", "(", "problems_path", ",", "output_path", ")", ":", "\n", "    ", "problems", "=", "pd", ".", "read_csv", "(", "problems_path", ",", "sep", "=", "\"\\t\"", ")", "\n", "bow_model", "=", "CountVectorizer", "(", "ngram_range", "=", "(", "1", ",", "1", ")", ")", ".", "fit", "(", "problems", "[", "\"content\"", "]", ")", "\n", "vectors", "=", "pd", ".", "DataFrame", "(", "bow_model", ".", "transform", "(", "problems", "[", "'content'", "]", ")", ".", "toarray", "(", ")", ")", "\n", "vectors", "[", "\"skill\"", "]", "=", "problems", "[", "\"skill\"", "]", "\n", "vectors", "=", "vectors", ".", "groupby", "(", "\"skill\"", ")", ".", "mean", "(", ")", "\n", "vectors", ".", "to_csv", "(", "output_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CAHLR_skill-equivalency.skill_representations.BOW.generate_BOW_vectors_two_taxonomies": [[14, 31], ["pandas.read_csv", "pandas.read_csv", "sklearn.feature_extraction.text.CountVectorizer().fit", "pandas.DataFrame", "src_vectors.groupby().mean.groupby().mean", "src_vectors.groupby().mean.to_csv", "pandas.DataFrame", "dst_vectors.groupby().mean.groupby().mean", "dst_vectors.groupby().mean.to_csv", "src_problems[].tolist", "dst_problems[].tolist", "CountVectorizer().fit.transform().toarray", "CountVectorizer().fit.transform().toarray", "sklearn.feature_extraction.text.CountVectorizer", "src_vectors.groupby().mean.groupby", "dst_vectors.groupby().mean.groupby", "CountVectorizer().fit.transform", "CountVectorizer().fit.transform"], "function", ["None"], ["", "def", "generate_BOW_vectors_two_taxonomies", "(", "src_problems_path", ",", "dst_problems_path", ",", "\n", "src_output_path", ",", "dst_output_path", ")", ":", "\n", "    ", "src_problems", "=", "pd", ".", "read_csv", "(", "src_problems_path", ",", "sep", "=", "\"\\t\"", ")", "\n", "dst_problems", "=", "pd", ".", "read_csv", "(", "dst_problems_path", ",", "sep", "=", "\"\\t\"", ")", "\n", "\n", "combined_problems", "=", "src_problems", "[", "\"content\"", "]", ".", "tolist", "(", ")", "+", "dst_problems", "[", "\"content\"", "]", ".", "tolist", "(", ")", "\n", "bow_model", "=", "CountVectorizer", "(", "ngram_range", "=", "(", "1", ",", "1", ")", ")", ".", "fit", "(", "combined_problems", ")", "\n", "\n", "src_vectors", "=", "pd", ".", "DataFrame", "(", "bow_model", ".", "transform", "(", "src_problems", "[", "'content'", "]", ")", ".", "toarray", "(", ")", ")", "\n", "src_vectors", "[", "\"skill\"", "]", "=", "src_problems", "[", "\"skill\"", "]", "\n", "src_vectors", "=", "src_vectors", ".", "groupby", "(", "\"skill\"", ")", ".", "mean", "(", ")", "\n", "src_vectors", ".", "to_csv", "(", "src_output_path", ")", "\n", "\n", "dst_vectors", "=", "pd", ".", "DataFrame", "(", "bow_model", ".", "transform", "(", "dst_problems", "[", "'content'", "]", ")", ".", "toarray", "(", ")", ")", "\n", "dst_vectors", "[", "\"skill\"", "]", "=", "dst_problems", "[", "\"skill\"", "]", "\n", "dst_vectors", "=", "dst_vectors", ".", "groupby", "(", "\"skill\"", ")", ".", "mean", "(", ")", "\n", "dst_vectors", ".", "to_csv", "(", "dst_output_path", ")", "\n", "", ""]]}