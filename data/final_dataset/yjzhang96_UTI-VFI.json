{"home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.None.test.load_my_state_dict": [[111, 115], ["model.state_dict", "parameter_dict.items", "own_state[].copy_"], "function", ["None"], ["", "def", "load_my_state_dict", "(", "model", ",", "parameter_dict", ")", ":", "\n", "    ", "own_state", "=", "model", ".", "state_dict", "(", ")", "\n", "for", "k", ",", "v", "in", "parameter_dict", ".", "items", "(", ")", ":", "\n", "        ", "own_state", "[", "k", "]", ".", "copy_", "(", "v", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.None.train_deblur.get_lr": [[89, 92], ["None"], "function", ["None"], ["def", "get_lr", "(", "optimizer", ")", ":", "\n", "    ", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "return", "param_group", "[", "'lr'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.None.train_deblur.display_loss": [[110, 115], ["loss.items", "print"], "function", ["None"], ["def", "display_loss", "(", "loss", ",", "epoch", ",", "tot_epoch", ",", "step", ",", "step_per_epoch", ")", ":", "\n", "    ", "loss_writer", "=", "\"\"", "\n", "for", "key", ",", "value", "in", "loss", ".", "items", "(", ")", ":", "\n", "        ", "loss_writer", "+=", "\"%s:%.4f\\t\"", "%", "(", "key", ",", "value", ")", "\n", "", "print", "(", "\"epoch[%d/%d],step[%d/%d]:%s\"", "%", "(", "epoch", ",", "tot_epoch", ",", "step", ",", "step_per_epoch", ",", "loss_writer", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.None.train_deblur.validation": [[117, 136], ["time.time", "print", "enumerate", "print", "print", "os.path.join", "model.set_input", "model.test", "open", "log.write", "time.time"], "function", ["home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.set_input", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.test"], ["", "def", "validation", "(", "epoch", ")", ":", "\n", "    ", "t_psnr", "=", "0", "\n", "cnt", "=", "0", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "'--------validation begin----------'", ")", "\n", "for", "index", ",", "batch_data", "in", "enumerate", "(", "val_dataloader", ")", ":", "\n", "        ", "model", ".", "set_input", "(", "batch_data", ")", "\n", "psnr", "=", "model", ".", "test", "(", "validation", "=", "True", ")", "\n", "t_psnr", "+=", "psnr", "\n", "cnt", "+=", "1", "\n", "if", "index", ">", "400", ":", "\n", "            ", "break", "\n", "", "", "message", "=", "'validation epoch %s PSNR: %.2f'", "%", "(", "epoch", ",", "t_psnr", "/", "cnt", ")", "\n", "print", "(", "message", ")", "\n", "print", "(", "'using time %.3f'", "%", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", ")", "\n", "log_name", "=", "os", ".", "path", ".", "join", "(", "args", ".", "checkpoints", ",", "args", ".", "model_name", ",", "'psnr_log.txt'", ")", "\n", "with", "open", "(", "log_name", ",", "'a'", ")", "as", "log", ":", "\n", "        ", "log", ".", "write", "(", "message", "+", "'\\n'", ")", "\n", "", "return", "t_psnr", "/", "cnt", "\n", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.utils.generate_blur.generate_blur": [[17, 60], ["os.listdir", "sorted", "os.path.exists", "os.mkdir", "print", "os.path.join", "os.path.join", "os.listdir", "sorted", "len", "range", "os.path.exists", "os.mkdir", "cv2.imread", "numpy.zeros", "range", "print", "cv2.imwrite", "os.path.join", "os.path.join", "cv2.imread", "cv2.resize", "os.path.join"], "function", ["None"], ["def", "generate_blur", "(", ")", ":", "\n", "    ", "videos_save_path", "=", "args", ".", "videos_save_path", "\n", "videos_src_path", "=", "args", ".", "videos_src_path", "\n", "num_compose", "=", "args", ".", "num_compose", "\n", "videos", "=", "os", ".", "listdir", "(", "videos_src_path", ")", "\n", "videos", "=", "sorted", "(", "videos", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "videos_save_path", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "videos_save_path", ")", "\n", "", "cnt", "=", "0", "\n", "for", "video", "in", "videos", ":", "\n", "        ", "print", "(", "\"generate low-frame-rate video from video:%s\"", "%", "video", ")", "\n", "cnt", "+=", "1", "\n", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "videos_save_path", ",", "video", ")", "\n", "src_path", "=", "os", ".", "path", ".", "join", "(", "videos_src_path", ",", "video", ")", "\n", "\n", "frames", "=", "os", ".", "listdir", "(", "src_path", ")", "\n", "frames", "=", "sorted", "(", "frames", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_path", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "save_path", ")", "\n", "\n", "", "num_frames", "=", "len", "(", "frames", ")", "\n", "tot_inter_frame", "=", "args", ".", "tot_inter_frame", "\n", "num_batch", "=", "num_frames", "//", "tot_inter_frame", "\n", "\n", "for", "i", "in", "range", "(", "num_batch", ")", ":", "\n", "            ", "frames_to_compose", "=", "frames", "[", "i", "*", "tot_inter_frame", ":", "i", "*", "tot_inter_frame", "+", "num_compose", "]", "\n", "out_frame_name", "=", "\"{:06d}.png\"", ".", "format", "(", "i", "*", "tot_inter_frame", "+", "num_compose", "//", "2", ")", "\n", "\n", "gt_img", "=", "cv2", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "src_path", ",", "frames_to_compose", "[", "0", "]", ")", ")", "\n", "H", ",", "W", ",", "C", "=", "gt_img", ".", "shape", "\n", "\n", "blur_img", "=", "np", ".", "zeros", "(", "(", "H", "//", "2", ",", "W", "//", "2", ",", "C", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "j", "in", "range", "(", "num_compose", ")", ":", "\n", "                ", "frame_name", "=", "os", ".", "path", ".", "join", "(", "src_path", ",", "frames_to_compose", "[", "j", "]", ")", "\n", "frame_j", "=", "cv2", ".", "imread", "(", "frame_name", ")", "\n", "frame_j", "=", "cv2", ".", "resize", "(", "frame_j", ",", "None", ",", "fx", "=", "0.5", ",", "fy", "=", "0.5", ")", "\n", "blur_img", "+=", "frame_j", "\n", "\n", "", "blur_img", "=", "blur_img", "/", "num_compose", "\n", "print", "(", "\"generate blur frame:\"", ",", "out_frame_name", ")", "\n", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "save_path", ",", "out_frame_name", ")", ",", "blur_img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.utils.correlation._FunctionCorrelation.forward": [[281, 335], ["first.new_zeros", "first.new_zeros", "correlation._FunctionCorrelation.save_for_backward", "first.new_zeros", "first.is_contiguous", "second.is_contiguous", "first.size", "first.size", "first.size", "first.size", "first.size", "first.size", "first.size", "first.size", "first.size", "correlation.cupy_launch", "second.size", "second.size", "correlation.cupy_launch", "first.new_zeros.size", "correlation.cupy_launch", "NotImplementedError", "first.size", "first.size", "first.size", "first.size", "correlation.cupy_kernel", "tuple", "tuple", "correlation.cupy_kernel", "tuple", "tuple", "first.new_zeros.size", "first.new_zeros.size", "correlation.cupy_kernel", "tuple", "tuple", "first.data_ptr", "first.new_zeros.data_ptr", "second.data_ptr", "first.new_zeros.data_ptr", "first.size", "first.new_zeros.data_ptr", "first.new_zeros.data_ptr", "first.new_zeros.data_ptr", "int", "first.size", "first.size", "int", "second.size", "second.size", "first.new_zeros.size", "first.new_zeros.size", "first.new_zeros.size"], "methods", ["home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.inter_models.correlation.cupy_launch", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.inter_models.correlation.cupy_launch", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.inter_models.correlation.cupy_launch", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.inter_models.correlation.cupy_kernel", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.inter_models.correlation.cupy_kernel", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.inter_models.correlation.cupy_kernel"], ["\t", "@", "staticmethod", "\n", "def", "forward", "(", "self", ",", "first", ",", "second", ")", ":", "\n", "\t\t", "rbot0", "=", "first", ".", "new_zeros", "(", "[", "first", ".", "size", "(", "0", ")", ",", "first", ".", "size", "(", "2", ")", "+", "8", ",", "first", ".", "size", "(", "3", ")", "+", "8", ",", "first", ".", "size", "(", "1", ")", "]", ")", "\n", "rbot1", "=", "first", ".", "new_zeros", "(", "[", "first", ".", "size", "(", "0", ")", ",", "first", ".", "size", "(", "2", ")", "+", "8", ",", "first", ".", "size", "(", "3", ")", "+", "8", ",", "first", ".", "size", "(", "1", ")", "]", ")", "\n", "\n", "self", ".", "save_for_backward", "(", "first", ",", "second", ",", "rbot0", ",", "rbot1", ")", "\n", "\n", "assert", "(", "first", ".", "is_contiguous", "(", ")", "==", "True", ")", "\n", "assert", "(", "second", ".", "is_contiguous", "(", ")", "==", "True", ")", "\n", "\n", "output", "=", "first", ".", "new_zeros", "(", "[", "first", ".", "size", "(", "0", ")", ",", "81", ",", "first", ".", "size", "(", "2", ")", ",", "first", ".", "size", "(", "3", ")", "]", ")", "\n", "\n", "if", "first", ".", "is_cuda", "==", "True", ":", "\n", "\t\t\t", "n", "=", "first", ".", "size", "(", "2", ")", "*", "first", ".", "size", "(", "3", ")", "\n", "cupy_launch", "(", "'kernel_Correlation_rearrange'", ",", "cupy_kernel", "(", "'kernel_Correlation_rearrange'", ",", "{", "\n", "'input'", ":", "first", ",", "\n", "'output'", ":", "rbot0", "\n", "}", ")", ")", "(", "\n", "grid", "=", "tuple", "(", "[", "int", "(", "(", "n", "+", "16", "-", "1", ")", "/", "16", ")", ",", "first", ".", "size", "(", "1", ")", ",", "first", ".", "size", "(", "0", ")", "]", ")", ",", "\n", "block", "=", "tuple", "(", "[", "16", ",", "1", ",", "1", "]", ")", ",", "\n", "args", "=", "[", "n", ",", "first", ".", "data_ptr", "(", ")", ",", "rbot0", ".", "data_ptr", "(", ")", "]", ",", "\n", "stream", "=", "Stream", "\n", ")", "\n", "\n", "n", "=", "second", ".", "size", "(", "2", ")", "*", "second", ".", "size", "(", "3", ")", "\n", "cupy_launch", "(", "'kernel_Correlation_rearrange'", ",", "cupy_kernel", "(", "'kernel_Correlation_rearrange'", ",", "{", "\n", "'input'", ":", "second", ",", "\n", "'output'", ":", "rbot1", "\n", "}", ")", ")", "(", "\n", "grid", "=", "tuple", "(", "[", "int", "(", "(", "n", "+", "16", "-", "1", ")", "/", "16", ")", ",", "second", ".", "size", "(", "1", ")", ",", "second", ".", "size", "(", "0", ")", "]", ")", ",", "\n", "block", "=", "tuple", "(", "[", "16", ",", "1", ",", "1", "]", ")", ",", "\n", "args", "=", "[", "n", ",", "second", ".", "data_ptr", "(", ")", ",", "rbot1", ".", "data_ptr", "(", ")", "]", ",", "\n", "stream", "=", "Stream", "\n", ")", "\n", "\n", "n", "=", "output", ".", "size", "(", "1", ")", "*", "output", ".", "size", "(", "2", ")", "*", "output", ".", "size", "(", "3", ")", "\n", "cupy_launch", "(", "'kernel_Correlation_updateOutput'", ",", "cupy_kernel", "(", "'kernel_Correlation_updateOutput'", ",", "{", "\n", "'rbot0'", ":", "rbot0", ",", "\n", "'rbot1'", ":", "rbot1", ",", "\n", "'top'", ":", "output", "\n", "}", ")", ")", "(", "\n", "grid", "=", "tuple", "(", "[", "output", ".", "size", "(", "3", ")", ",", "output", ".", "size", "(", "2", ")", ",", "output", ".", "size", "(", "0", ")", "]", ")", ",", "\n", "block", "=", "tuple", "(", "[", "32", ",", "1", ",", "1", "]", ")", ",", "\n", "shared_mem", "=", "first", ".", "size", "(", "1", ")", "*", "4", ",", "\n", "args", "=", "[", "n", ",", "rbot0", ".", "data_ptr", "(", ")", ",", "rbot1", ".", "data_ptr", "(", ")", ",", "output", ".", "data_ptr", "(", ")", "]", ",", "\n", "stream", "=", "Stream", "\n", ")", "\n", "\n", "", "elif", "first", ".", "is_cuda", "==", "False", ":", "\n", "\t\t\t", "raise", "NotImplementedError", "(", ")", "\n", "\n", "# end", "\n", "\n", "", "return", "output", "\n", "# end", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.utils.correlation._FunctionCorrelation.backward": [[337, 389], ["gradOutput.is_contiguous", "first.new_zeros", "first.new_zeros", "range", "range", "NotImplementedError", "first.size", "first.size", "first.size", "first.size", "first.size", "first.size", "first.size", "first.size", "first.size", "first.size", "first.size", "correlation.cupy_launch", "first.size", "correlation.cupy_launch", "first.size", "first.size", "correlation.cupy_kernel", "tuple", "tuple", "first.size", "first.size", "correlation.cupy_kernel", "tuple", "tuple", "rbot0.data_ptr", "rbot1.data_ptr", "gradOutput.data_ptr", "gradFirst.data_ptr", "rbot0.data_ptr", "rbot1.data_ptr", "gradOutput.data_ptr", "gradSecond.data_ptr", "int", "int"], "methods", ["home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.inter_models.correlation.cupy_launch", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.inter_models.correlation.cupy_launch", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.inter_models.correlation.cupy_kernel", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.inter_models.correlation.cupy_kernel"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "self", ",", "gradOutput", ")", ":", "\n", "\t\t", "first", ",", "second", ",", "rbot0", ",", "rbot1", "=", "self", ".", "saved_tensors", "\n", "\n", "assert", "(", "gradOutput", ".", "is_contiguous", "(", ")", "==", "True", ")", "\n", "\n", "gradFirst", "=", "first", ".", "new_zeros", "(", "[", "first", ".", "size", "(", "0", ")", ",", "first", ".", "size", "(", "1", ")", ",", "first", ".", "size", "(", "2", ")", ",", "first", ".", "size", "(", "3", ")", "]", ")", "if", "self", ".", "needs_input_grad", "[", "0", "]", "==", "True", "else", "None", "\n", "gradSecond", "=", "first", ".", "new_zeros", "(", "[", "first", ".", "size", "(", "0", ")", ",", "first", ".", "size", "(", "1", ")", ",", "first", ".", "size", "(", "2", ")", ",", "first", ".", "size", "(", "3", ")", "]", ")", "if", "self", ".", "needs_input_grad", "[", "1", "]", "==", "True", "else", "None", "\n", "\n", "if", "first", ".", "is_cuda", "==", "True", ":", "\n", "\t\t\t", "if", "gradFirst", "is", "not", "None", ":", "\n", "\t\t\t\t", "for", "intSample", "in", "range", "(", "first", ".", "size", "(", "0", ")", ")", ":", "\n", "\t\t\t\t\t", "n", "=", "first", ".", "size", "(", "1", ")", "*", "first", ".", "size", "(", "2", ")", "*", "first", ".", "size", "(", "3", ")", "\n", "cupy_launch", "(", "'kernel_Correlation_updateGradFirst'", ",", "cupy_kernel", "(", "'kernel_Correlation_updateGradFirst'", ",", "{", "\n", "'rbot0'", ":", "rbot0", ",", "\n", "'rbot1'", ":", "rbot1", ",", "\n", "'gradOutput'", ":", "gradOutput", ",", "\n", "'gradFirst'", ":", "gradFirst", ",", "\n", "'gradSecond'", ":", "None", "\n", "}", ")", ")", "(", "\n", "grid", "=", "tuple", "(", "[", "int", "(", "(", "n", "+", "512", "-", "1", ")", "/", "512", ")", ",", "1", ",", "1", "]", ")", ",", "\n", "block", "=", "tuple", "(", "[", "512", ",", "1", ",", "1", "]", ")", ",", "\n", "args", "=", "[", "n", ",", "intSample", ",", "rbot0", ".", "data_ptr", "(", ")", ",", "rbot1", ".", "data_ptr", "(", ")", ",", "gradOutput", ".", "data_ptr", "(", ")", ",", "gradFirst", ".", "data_ptr", "(", ")", ",", "None", "]", ",", "\n", "stream", "=", "Stream", "\n", ")", "\n", "# end", "\n", "# end", "\n", "\n", "", "", "if", "gradSecond", "is", "not", "None", ":", "\n", "\t\t\t\t", "for", "intSample", "in", "range", "(", "first", ".", "size", "(", "0", ")", ")", ":", "\n", "\t\t\t\t\t", "n", "=", "first", ".", "size", "(", "1", ")", "*", "first", ".", "size", "(", "2", ")", "*", "first", ".", "size", "(", "3", ")", "\n", "cupy_launch", "(", "'kernel_Correlation_updateGradSecond'", ",", "cupy_kernel", "(", "'kernel_Correlation_updateGradSecond'", ",", "{", "\n", "'rbot0'", ":", "rbot0", ",", "\n", "'rbot1'", ":", "rbot1", ",", "\n", "'gradOutput'", ":", "gradOutput", ",", "\n", "'gradFirst'", ":", "None", ",", "\n", "'gradSecond'", ":", "gradSecond", "\n", "}", ")", ")", "(", "\n", "grid", "=", "tuple", "(", "[", "int", "(", "(", "n", "+", "512", "-", "1", ")", "/", "512", ")", ",", "1", ",", "1", "]", ")", ",", "\n", "block", "=", "tuple", "(", "[", "512", ",", "1", ",", "1", "]", ")", ",", "\n", "args", "=", "[", "n", ",", "intSample", ",", "rbot0", ".", "data_ptr", "(", ")", ",", "rbot1", ".", "data_ptr", "(", ")", ",", "gradOutput", ".", "data_ptr", "(", ")", ",", "None", ",", "gradSecond", ".", "data_ptr", "(", ")", "]", ",", "\n", "stream", "=", "Stream", "\n", ")", "\n", "# end", "\n", "# end", "\n", "\n", "", "", "", "elif", "first", ".", "is_cuda", "==", "False", ":", "\n", "\t\t\t", "raise", "NotImplementedError", "(", ")", "\n", "\n", "# end", "\n", "\n", "", "return", "gradFirst", ",", "gradSecond", "\n", "# end", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.utils.correlation.ModuleCorrelation.__init__": [[397, 399], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.data.dataloader_4frame.Video.__init__"], ["\t", "def", "__init__", "(", "self", ")", ":", "\n", "\t\t", "super", "(", "ModuleCorrelation", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# end", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.utils.correlation.ModuleCorrelation.forward": [[401, 403], ["_FunctionCorrelation.apply"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "tensorFirst", ",", "tensorSecond", ")", ":", "\n", "\t\t", "return", "_FunctionCorrelation", ".", "apply", "(", "tensorFirst", ",", "tensorSecond", ")", "\n", "# end", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.utils.correlation.cupy_kernel": [[237, 273], ["globals", "re.search", "int", "re.search.group", "objectVariables[].size", "strKernel.replace.replace", "re.search", "int", "re.search.group().split", "objectVariables[].stride", "strKernel.replace.replace", "re.search.group", "re.search.group", "str", "re.search.group", "re.search.group", "re.search.group", "range", "str", "str.join", "strArgs[].replace().replace().strip", "strArgs[].replace().replace", "strArgs[].replace"], "function", ["None"], ["def", "cupy_kernel", "(", "strFunction", ",", "objectVariables", ")", ":", "\n", "\t", "strKernel", "=", "globals", "(", ")", "[", "strFunction", "]", "\n", "\n", "while", "True", ":", "\n", "\t\t", "objectMatch", "=", "re", ".", "search", "(", "'(SIZE_)([0-4])(\\()([^\\)]*)(\\))'", ",", "strKernel", ")", "\n", "\n", "if", "objectMatch", "is", "None", ":", "\n", "\t\t\t", "break", "\n", "# end", "\n", "\n", "", "intArg", "=", "int", "(", "objectMatch", ".", "group", "(", "2", ")", ")", "\n", "\n", "strTensor", "=", "objectMatch", ".", "group", "(", "4", ")", "\n", "intSizes", "=", "objectVariables", "[", "strTensor", "]", ".", "size", "(", ")", "\n", "\n", "strKernel", "=", "strKernel", ".", "replace", "(", "objectMatch", ".", "group", "(", ")", ",", "str", "(", "intSizes", "[", "intArg", "]", ")", ")", "\n", "# end", "\n", "\n", "", "while", "True", ":", "\n", "\t\t", "objectMatch", "=", "re", ".", "search", "(", "'(VALUE_)([0-4])(\\()([^\\)]+)(\\))'", ",", "strKernel", ")", "\n", "\n", "if", "objectMatch", "is", "None", ":", "\n", "\t\t\t", "break", "\n", "# end", "\n", "\n", "", "intArgs", "=", "int", "(", "objectMatch", ".", "group", "(", "2", ")", ")", "\n", "strArgs", "=", "objectMatch", ".", "group", "(", "4", ")", ".", "split", "(", "','", ")", "\n", "\n", "strTensor", "=", "strArgs", "[", "0", "]", "\n", "intStrides", "=", "objectVariables", "[", "strTensor", "]", ".", "stride", "(", ")", "\n", "strIndex", "=", "[", "'(('", "+", "strArgs", "[", "intArg", "+", "1", "]", ".", "replace", "(", "'{'", ",", "'('", ")", ".", "replace", "(", "'}'", ",", "')'", ")", ".", "strip", "(", ")", "+", "')*'", "+", "str", "(", "intStrides", "[", "intArg", "]", ")", "+", "')'", "for", "intArg", "in", "range", "(", "intArgs", ")", "]", "\n", "\n", "strKernel", "=", "strKernel", ".", "replace", "(", "objectMatch", ".", "group", "(", "0", ")", ",", "strTensor", "+", "'['", "+", "str", ".", "join", "(", "'+'", ",", "strIndex", ")", "+", "']'", ")", "\n", "# end", "\n", "\n", "", "return", "strKernel", "\n", "# end", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.utils.correlation.cupy_launch": [[275, 278], ["cupy.util.memoize", "cupy.cuda.compile_with_cache().get_function", "cupy.cuda.compile_with_cache"], "function", ["None"], ["", "@", "cupy", ".", "util", ".", "memoize", "(", "for_each_device", "=", "True", ")", "\n", "def", "cupy_launch", "(", "strFunction", ",", "strKernel", ")", ":", "\n", "\t", "return", "cupy", ".", "cuda", ".", "compile_with_cache", "(", "strKernel", ")", ".", "get_function", "(", "strFunction", ")", "\n", "# end", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.utils.correlation.FunctionCorrelation": [[392, 394], ["_FunctionCorrelation.apply"], "function", ["None"], ["", "", "def", "FunctionCorrelation", "(", "tensorFirst", ",", "tensorSecond", ")", ":", "\n", "\t", "return", "_FunctionCorrelation", ".", "apply", "(", "tensorFirst", ",", "tensorSecond", ")", "\n", "# end", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.utils.utils.tensor2im": [[8, 12], ["image_tensor[].cpu().detach().numpy", "image_tensor[].cpu().detach().numpy.astype", "numpy.clip", "image_tensor[].cpu().detach", "numpy.transpose", "image_tensor[].cpu"], "function", ["None"], ["def", "tensor2im", "(", "image_tensor", ",", "imtype", "=", "np", ".", "uint8", ")", ":", "\n", "    ", "image_numpy", "=", "image_tensor", "[", "0", "]", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "image_numpy", "=", "np", ".", "clip", "(", "np", ".", "transpose", "(", "image_numpy", ",", "(", "1", ",", "2", ",", "0", ")", ")", "+", "0.5", ",", "0", ",", "1", ")", "*", "255.0", "\n", "return", "image_numpy", ".", "astype", "(", "imtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.utils.utils.load_image": [[13, 24], ["PIL.Image.open", "img.resize.unsqueeze", "img.resize.resize", "trans_list", "img.resize.resize", "int", "int"], "function", ["None"], ["", "def", "load_image", "(", "filename", ",", "trans_list", "=", "None", ",", "size", "=", "None", ",", "scale", "=", "None", ")", ":", "\n", "    ", "img", "=", "Image", ".", "open", "(", "filename", ")", "\n", "if", "size", "is", "not", "None", ":", "\n", "        ", "img", "=", "img", ".", "resize", "(", "(", "size", ",", "size", ")", ",", "Image", ".", "ANTIALIAS", ")", "\n", "", "elif", "scale", "is", "not", "None", ":", "\n", "        ", "img", "=", "img", ".", "resize", "(", "(", "int", "(", "img", ".", "size", "[", "0", "]", "/", "scale", ")", ",", "int", "(", "img", ".", "size", "[", "1", "]", "/", "scale", ")", ")", ",", "Image", ".", "ANTIALIAS", ")", "\n", "\n", "", "if", "trans_list", ":", "\n", "        ", "img", "=", "trans_list", "(", "img", ")", "\n", "", "img", "=", "img", ".", "unsqueeze", "(", "0", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.utils.utils.save_image": [[26, 34], ["Image.fromarray.save", "numpy.reshape", "PIL.Image.fromarray", "PIL.Image.fromarray"], "function", ["home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save"], ["", "def", "save_image", "(", "image_numpy", ",", "image_path", ")", ":", "\n", "    ", "image_pil", "=", "None", "\n", "if", "image_numpy", ".", "shape", "[", "2", "]", "==", "1", ":", "\n", "        ", "image_numpy", "=", "np", ".", "reshape", "(", "image_numpy", ",", "(", "image_numpy", ".", "shape", "[", "0", "]", ",", "image_numpy", ".", "shape", "[", "1", "]", ")", ")", "\n", "image_pil", "=", "Image", ".", "fromarray", "(", "image_numpy", ",", "'L'", ")", "\n", "", "else", ":", "\n", "        ", "image_pil", "=", "Image", ".", "fromarray", "(", "image_numpy", ")", "\n", "", "image_pil", ".", "save", "(", "image_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.utils.utils.save_train_sample": [[35, 42], ["os.path.join", "results.items", "os.path.exists", "os.mkdir", "os.path.join", "utils.save_image"], "function", ["home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.utils.utils.save_image"], ["", "def", "save_train_sample", "(", "args", ",", "epoch", ",", "results", ")", ":", "\n", "    ", "save_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "checkpoints", ",", "args", ".", "model_name", ",", "'sample'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_dir", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "save_dir", ")", "\n", "", "for", "label", ",", "image_numpy", "in", "results", ".", "items", "(", ")", ":", "\n", "        ", "save_path", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'epoch%.3d_%s.png'", "%", "(", "epoch", ",", "label", ")", ")", "\n", "save_image", "(", "image_numpy", ",", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.utils.utils.save_test_images": [[43, 69], ["os.path.split", "os.path.join", "int", "int", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "utils.save_image", "utils.save_image", "utils.save_image", "utils.save_image", "os.path.split", "os.path.split", "os.path.exists", "os.mkdir", "B1_name.split", "B2_name.split"], "function", ["home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.utils.utils.save_image", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.utils.utils.save_image", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.utils.utils.save_image", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.utils.utils.save_image"], ["", "", "def", "save_test_images", "(", "args", ",", "save_dir", ",", "results", ",", "image_path", ")", ":", "\n", "    ", "blur_inter", "=", "args", ".", "blur_interval", "\n", "B1_path", "=", "image_path", "[", "'B1_path'", "]", "\n", "B2_path", "=", "image_path", "[", "'B2_path'", "]", "\n", "# import ipdb; ipdb.set_trace()", "\n", "# save_dir = os.path.join(args.result_dir,args.model_name) ", "\n", "others", ",", "B1_name", "=", "os", ".", "path", ".", "split", "(", "B1_path", ")", "\n", "B2_name", "=", "os", ".", "path", ".", "split", "(", "B2_path", ")", "[", "-", "1", "]", "\n", "video_name", "=", "os", ".", "path", ".", "split", "(", "others", ")", "[", "-", "1", "]", "\n", "\n", "video_dir", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "video_name", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "video_dir", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "video_dir", ")", "\n", "\n", "", "frame_index_B1", "=", "int", "(", "B1_name", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", "\n", "frame_index_B2", "=", "int", "(", "B2_name", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", "\n", "\n", "save_B1S_path", "=", "os", ".", "path", ".", "join", "(", "video_dir", ",", "\"%06d.png\"", "%", "(", "frame_index_B1", "-", "blur_inter", "//", "2", ")", ")", "\n", "save_B1E_path", "=", "os", ".", "path", ".", "join", "(", "video_dir", ",", "\"%06d.png\"", "%", "(", "frame_index_B1", "+", "blur_inter", "//", "2", ")", ")", "\n", "save_B2S_path", "=", "os", ".", "path", ".", "join", "(", "video_dir", ",", "\"%06d.png\"", "%", "(", "frame_index_B2", "-", "blur_inter", "//", "2", ")", ")", "\n", "save_B2E_path", "=", "os", ".", "path", ".", "join", "(", "video_dir", ",", "\"%06d.png\"", "%", "(", "frame_index_B2", "+", "blur_inter", "//", "2", ")", ")", "\n", "\n", "save_image", "(", "results", "[", "'B1_S'", "]", ",", "save_B1S_path", ")", "\n", "save_image", "(", "results", "[", "'B1_E'", "]", ",", "save_B1E_path", ")", "\n", "save_image", "(", "results", "[", "'B2_S'", "]", ",", "save_B2S_path", ")", "\n", "save_image", "(", "results", "[", "'B2_E'", "]", ",", "save_B2E_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.utils.utils.save_inter_images": [[71, 78], ["utils.save_image", "utils.tensor2im", "trans_list", "utils.tensor2im"], "function", ["home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.utils.utils.save_image", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.utils.utils.tensor2im", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.utils.utils.tensor2im"], ["", "def", "save_inter_images", "(", "image_tensor", ",", "image_path", ",", "trans_list", "=", "None", ")", ":", "\n", "    ", "if", "trans_list", "==", "None", ":", "\n", "        ", "img", "=", "tensor2im", "(", "image_tensor", ")", "\n", "", "else", ":", "\n", "        ", "img", "=", "trans_list", "(", "image_tensor", ")", "\n", "img", "=", "tensor2im", "(", "img", ")", "\n", "", "save_image", "(", "img", ",", "image_path", ")", "", "", ""]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.model_SEframe_stage2.SEframeNet.__init__": [[13, 33], ["networks.Deblur_2step", "model_SEframe_stage2.SEframeNet.SE_deblur_net.load_state_dict", "print", "model_SEframe_stage2.SEframeNet.SE_deblur_net.to", "torch.L1Loss", "torch.L1Loss", "torch.L1Loss", "torch.L1Loss", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "model_SEframe_stage2.SEframeNet.SE_deblur_net.parameters", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam"], "methods", ["home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "opt", "=", "args", "\n", "if", "args", ".", "gpu", ":", "\n", "            ", "self", ".", "device", "=", "torch", ".", "device", "(", "'cuda:{}'", ".", "format", "(", "args", ".", "gpu", "[", "0", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "\n", "### initial model", "\n", "", "self", ".", "SE_deblur_net", "=", "Deblur_2step", "(", "input_c", "=", "4", "*", "3", ")", "\n", "self", ".", "SE_deblur_net", ".", "load_state_dict", "(", "torch", ".", "load", "(", "'./checkpoints/deblur-SEframe-stage1/SEframe_net_latest.pth'", ")", ")", "\n", "print", "(", "'------------load model stage1-----------'", ")", "\n", "self", ".", "SE_deblur_net", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "###Loss and Optimizer", "\n", "self", ".", "L1_loss", "=", "nn", ".", "L1Loss", "(", ")", "\n", "self", ".", "L2_loss", "=", "nn", ".", "MSELoss", "(", ")", "\n", "\n", "params", "=", "self", ".", "SE_deblur_net", ".", "parameters", "(", ")", "\n", "if", "args", ".", "train", ":", "\n", "            ", "self", ".", "optimizer", "=", "optim", ".", "Adam", "(", "params", ",", "lr", "=", "args", ".", "lr", ",", "betas", "=", "(", "0.9", ",", "0.999", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.model_SEframe_stage2.SEframeNet.set_input": [[35, 46], ["batch_data[].to", "batch_data[].to", "batch_data[].to", "batch_data[].to", "batch_data[].to", "batch_data[].to", "batch_data[].to", "batch_data[].to"], "methods", ["None"], ["", "", "def", "set_input", "(", "self", ",", "batch_data", ")", ":", "\n", "        ", "self", ".", "input_B0", "=", "batch_data", "[", "'B0'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "input_B1", "=", "batch_data", "[", "'B1'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "input_B2", "=", "batch_data", "[", "'B2'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "input_B3", "=", "batch_data", "[", "'B3'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "input_B1_S", "=", "batch_data", "[", "'B1_S'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "input_B1_E", "=", "batch_data", "[", "'B1_E'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "input_B2_S", "=", "batch_data", "[", "'B2_S'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "input_B2_E", "=", "batch_data", "[", "'B2_E'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "B1_path", "=", "batch_data", "[", "'B1_path'", "]", "\n", "self", ".", "B2_path", "=", "batch_data", "[", "'B2_path'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.model_SEframe_stage2.SEframeNet.set_test_input": [[47, 52], ["batch_data[].to", "batch_data[].to", "batch_data[].to", "batch_data[].to"], "methods", ["None"], ["", "def", "set_test_input", "(", "self", ",", "batch_data", ")", ":", "\n", "        ", "self", ".", "input_B0", "=", "batch_data", "[", "0", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "input_B1", "=", "batch_data", "[", "1", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "input_B2", "=", "batch_data", "[", "2", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "input_B3", "=", "batch_data", "[", "3", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.model_SEframe_stage2.SEframeNet.forward": [[53, 75], ["model_SEframe_stage2.SEframeNet.SE_deblur_net", "model_SEframe_stage2.SEframeNet.L1_loss", "model_SEframe_stage2.SEframeNet.L1_loss", "model_SEframe_stage2.SEframeNet.L1_loss", "model_SEframe_stage2.SEframeNet.L1_loss", "model_SEframe_stage2.SEframeNet.L1_loss", "model_SEframe_stage2.SEframeNet.L1_loss", "model_SEframe_stage2.SEframeNet.L1_loss", "model_SEframe_stage2.SEframeNet.L1_loss"], "methods", ["None"], ["", "def", "forward", "(", "self", ")", ":", "\n", "\n", "# get estimated start end frame", "\n", "        ", "out1", ",", "out2", "=", "self", ".", "SE_deblur_net", "(", "self", ".", "input_B0", ",", "self", ".", "input_B1", ",", "self", ".", "input_B2", ",", "self", ".", "input_B3", ")", "\n", "\n", "# loss ", "\n", "self", ".", "tot_loss", "=", "0", "\n", "loss_B1_S", "=", "self", ".", "L1_loss", "(", "self", ".", "input_B1_S", ",", "out1", "[", "0", "]", ")", "\n", "loss_B1_E", "=", "self", ".", "L1_loss", "(", "self", ".", "input_B1_E", ",", "out1", "[", "1", "]", ")", "\n", "loss_B2_S", "=", "self", ".", "L1_loss", "(", "self", ".", "input_B2_S", ",", "out1", "[", "2", "]", ")", "\n", "loss_B2_E", "=", "self", ".", "L1_loss", "(", "self", ".", "input_B2_E", ",", "out1", "[", "3", "]", ")", "\n", "self", ".", "tot_1", "=", "loss_B1_E", "+", "loss_B1_S", "+", "loss_B2_S", "+", "loss_B2_E", "\n", "\n", "loss_B1_S", "=", "self", ".", "L1_loss", "(", "self", ".", "input_B1_S", ",", "out2", "[", "0", "]", ")", "\n", "loss_B1_E", "=", "self", ".", "L1_loss", "(", "self", ".", "input_B1_E", ",", "out2", "[", "1", "]", ")", "\n", "loss_B2_S", "=", "self", ".", "L1_loss", "(", "self", ".", "input_B2_S", ",", "out2", "[", "2", "]", ")", "\n", "loss_B2_E", "=", "self", ".", "L1_loss", "(", "self", ".", "input_B2_E", ",", "out2", "[", "3", "]", ")", "\n", "self", ".", "tot_2", "=", "loss_B1_E", "+", "loss_B1_S", "+", "loss_B2_S", "+", "loss_B2_E", "\n", "\n", "\n", "self", ".", "tot_loss", "=", "0.5", "*", "self", ".", "tot_1", "+", "self", ".", "tot_2", "\n", "self", ".", "output", "=", "{", "'B1_S'", ":", "out2", "[", "0", "]", ",", "'B1_E'", ":", "out2", "[", "1", "]", ",", "'B2_S'", ":", "out2", "[", "2", "]", ",", "'B2_E'", ":", "out2", "[", "3", "]", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.model_SEframe_stage2.SEframeNet.optimize": [[76, 81], ["model_SEframe_stage2.SEframeNet.forward", "model_SEframe_stage2.SEframeNet.optimizer.zero_grad", "model_SEframe_stage2.SEframeNet.tot_loss.backward", "model_SEframe_stage2.SEframeNet.optimizer.step"], "methods", ["home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.inter_models.correlation.ModuleCorrelation.forward", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.inter_models.correlation._FunctionCorrelation.backward"], ["", "def", "optimize", "(", "self", ")", ":", "\n", "        ", "self", ".", "forward", "(", ")", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "self", ".", "tot_loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.model_SEframe_stage2.SEframeNet.get_loss": [[82, 87], ["collections.OrderedDict", "model_SEframe_stage2.SEframeNet.tot_loss.item"], "methods", ["None"], ["", "def", "get_loss", "(", "self", ")", ":", "\n", "\n", "        ", "return", "OrderedDict", "(", "[", "(", "'total_loss'", ",", "self", ".", "tot_loss", ".", "item", "(", ")", ")", ",", "\n", "(", "'step1'", ",", "self", ".", "tot_1", ")", ",", "\n", "(", "'step2'", ",", "self", ".", "tot_2", ")", ",", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.model_SEframe_stage2.SEframeNet.test": [[89, 107], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model_SEframe_stage2.SEframeNet.SE_deblur_net", "model_SEframe_stage2.SEframeNet.L2_loss", "model_SEframe_stage2.SEframeNet.test.PSNR"], "methods", ["None"], ["", "def", "test", "(", "self", ",", "validation", "=", "False", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# get estimated start end frame", "\n", "            ", "out1", ",", "out2", "=", "self", ".", "SE_deblur_net", "(", "self", ".", "input_B0", ",", "self", ".", "input_B1", ",", "self", ".", "input_B2", ",", "self", ".", "input_B3", ")", "\n", "choose_out", "=", "out2", "\n", "self", ".", "output", "=", "{", "'B1_S'", ":", "choose_out", "[", "0", "]", ",", "'B1_E'", ":", "choose_out", "[", "1", "]", ",", "'B2_S'", ":", "choose_out", "[", "2", "]", ",", "'B2_E'", ":", "choose_out", "[", "3", "]", "}", "\n", "# calculate PSNR", "\n", "", "def", "PSNR", "(", "img1", ",", "img2", ")", ":", "\n", "            ", "MSE", "=", "self", ".", "L2_loss", "(", "img1", ",", "img2", ")", "\n", "return", "10", "*", "np", ".", "log10", "(", "1", "/", "MSE", ".", "item", "(", ")", ")", "\n", "\n", "", "if", "validation", ":", "\n", "            ", "psnr", "=", "0", "\n", "psnr", "+=", "PSNR", "(", "self", ".", "input_B1_S", ",", "self", ".", "output", "[", "'B1_S'", "]", ")", "\n", "psnr", "+=", "PSNR", "(", "self", ".", "input_B1_E", ",", "self", ".", "output", "[", "'B1_E'", "]", ")", "\n", "psnr", "+=", "PSNR", "(", "self", ".", "input_B2_S", ",", "self", ".", "output", "[", "'B2_S'", "]", ")", "\n", "psnr", "+=", "PSNR", "(", "self", ".", "input_B2_E", ",", "self", ".", "output", "[", "'B2_E'", "]", ")", "\n", "return", "psnr", "/", "4", "\n", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.model_SEframe_stage2.SEframeNet.save": [[109, 118], ["len", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "model_SEframe_stage2.SEframeNet.SE_deblur_net.to", "model_SEframe_stage2.SEframeNet.SE_deblur_net.cpu().module.state_dict", "model_SEframe_stage2.SEframeNet.SE_deblur_net.cpu().state_dict", "model_SEframe_stage2.SEframeNet.SE_deblur_net.cpu", "model_SEframe_stage2.SEframeNet.SE_deblur_net.cpu"], "methods", ["home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save"], ["", "", "def", "save", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "save_filename", "=", "'SEframe_net_%s.pth'", "%", "epoch", "\n", "save_path", "=", "self", ".", "opt", ".", "checkpoints", "+", "'/'", "+", "self", ".", "opt", ".", "model_name", "+", "'/'", "+", "save_filename", "\n", "if", "len", "(", "self", ".", "opt", ".", "gpu", ")", ">", "1", ":", "\n", "            ", "torch", ".", "save", "(", "self", ".", "SE_deblur_net", ".", "cpu", "(", ")", ".", "module", ".", "state_dict", "(", ")", ",", "save_path", ")", "\n", "", "else", ":", "\n", "            ", "torch", ".", "save", "(", "self", ".", "SE_deblur_net", ".", "cpu", "(", ")", ".", "state_dict", "(", ")", ",", "save_path", ")", "\n", "", "if", "self", ".", "opt", ".", "gpu", ":", "\n", "            ", "self", ".", "SE_deblur_net", ".", "to", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.model_SEframe_stage2.SEframeNet.load": [[119, 124], ["os.path.join", "model_SEframe_stage2.SEframeNet.SE_deblur_net.load_state_dict", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load"], "methods", ["home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load"], ["", "", "def", "load", "(", "self", ",", "args", ")", ":", "\n", "        ", "load_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "checkpoints", ",", "args", ".", "model_name", ")", "\n", "load_file", "=", "load_path", "+", "'/'", "+", "'SEframe_net_%s.pth'", "%", "args", ".", "which_epoch", "\n", "self", ".", "SE_deblur_net", ".", "load_state_dict", "(", "torch", ".", "load", "(", "load_file", ")", ")", "\n", "print", "(", "'--------load model %s success!-------'", "%", "load_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.model_SEframe_stage2.SEframeNet.schedule_lr": [[126, 129], ["model_SEframe_stage2.SEframeNet.get_current_lr_from_epoch"], "methods", ["home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.get_current_lr_from_epoch"], ["", "def", "schedule_lr", "(", "self", ",", "epoch", ",", "tot_epoch", ")", ":", "\n", "        ", "lr", "=", "self", ".", "opt", ".", "lr", "\n", "self", ".", "get_current_lr_from_epoch", "(", "lr", ",", "epoch", ",", "tot_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.model_SEframe_stage2.SEframeNet.get_current_lr_from_epoch": [[130, 139], ["print"], "methods", ["None"], ["", "def", "get_current_lr_from_epoch", "(", "self", ",", "lr", ",", "epoch", ",", "tot_epoch", ")", ":", "\n", "        ", "decrease_step", "=", "5", "\n", "# current_lr = lr * (0.9**(epoch//decrease_step))", "\n", "current_lr", "=", "lr", "*", "(", "1", "-", "epoch", "/", "tot_epoch", ")", "\n", "if", "epoch", ">", "350", ":", "\n", "            ", "current_lr", "=", "0.000001", "\n", "", "for", "param_group", "in", "self", ".", "optimizer", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "current_lr", "\n", "", "print", "(", "\"current learning rate:%.7f\"", "%", "(", "current_lr", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.model_SEframe_stage2.SEframeNet.get_current_visuals": [[140, 149], ["utils.utils.utils.tensor2im", "utils.utils.utils.tensor2im", "utils.utils.utils.tensor2im", "utils.utils.utils.tensor2im", "utils.utils.utils.tensor2im", "utils.utils.utils.tensor2im", "collections.OrderedDict"], "methods", ["home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.utils.utils.tensor2im", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.utils.utils.tensor2im", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.utils.utils.tensor2im", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.utils.utils.tensor2im", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.utils.utils.tensor2im", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.utils.utils.tensor2im"], ["", "def", "get_current_visuals", "(", "self", ")", ":", "\n", "        ", "input_B1", "=", "utils", ".", "tensor2im", "(", "self", ".", "input_B1", ")", "\n", "input_B2", "=", "utils", ".", "tensor2im", "(", "self", ".", "input_B2", ")", "\n", "output_B1_S", "=", "utils", ".", "tensor2im", "(", "self", ".", "output", "[", "'B1_S'", "]", ")", "\n", "output_B1_E", "=", "utils", ".", "tensor2im", "(", "self", ".", "output", "[", "'B1_E'", "]", ")", "\n", "output_B2_S", "=", "utils", ".", "tensor2im", "(", "self", ".", "output", "[", "'B2_S'", "]", ")", "\n", "output_B2_E", "=", "utils", ".", "tensor2im", "(", "self", ".", "output", "[", "'B2_E'", "]", ")", "\n", "return", "OrderedDict", "(", "[", "(", "'B1'", ",", "input_B1", ")", ",", "(", "'B2'", ",", "input_B2", ")", ",", "(", "'B1_S'", ",", "output_B1_S", ")", ",", "\n", "(", "'B1_E'", ",", "output_B1_E", ")", ",", "(", "'B2_S'", ",", "output_B2_S", ")", ",", "(", "'B2_E'", ",", "output_B2_E", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.model_SEframe_stage2.SEframeNet.get_image_path": [[150, 152], ["None"], "methods", ["None"], ["", "def", "get_image_path", "(", "self", ")", ":", "\n", "        ", "return", "{", "'B1_path'", ":", "self", ".", "B1_path", ",", "'B2_path'", ":", "self", ".", "B2_path", "}", "", "", "", ""]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.model_SEframe_stage1.SEframeNet.__init__": [[14, 32], ["networks.Deblur_2step", "model_SEframe_stage1.SEframeNet.SE_deblur_net.to", "torch.L1Loss", "torch.L1Loss", "torch.L1Loss", "torch.L1Loss", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "model_SEframe_stage1.SEframeNet.SE_deblur_net.parameters", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "opt", "=", "args", "\n", "if", "args", ".", "gpu", ":", "\n", "            ", "self", ".", "device", "=", "torch", ".", "device", "(", "'cuda:{}'", ".", "format", "(", "args", ".", "gpu", "[", "0", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "\n", "### initial model", "\n", "", "self", ".", "SE_deblur_net", "=", "Deblur_2step", "(", "input_c", "=", "4", "*", "3", ",", "only_stage1", "=", "True", ")", "\n", "self", ".", "SE_deblur_net", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "###Loss and Optimizer", "\n", "self", ".", "L1_loss", "=", "nn", ".", "L1Loss", "(", ")", "\n", "self", ".", "L2_loss", "=", "nn", ".", "MSELoss", "(", ")", "\n", "\n", "params", "=", "self", ".", "SE_deblur_net", ".", "parameters", "(", ")", "\n", "if", "args", ".", "train", ":", "\n", "            ", "self", ".", "optimizer", "=", "optim", ".", "Adam", "(", "params", ",", "lr", "=", "args", ".", "lr", ",", "betas", "=", "(", "0.9", ",", "0.999", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.model_SEframe_stage1.SEframeNet.set_input": [[34, 46], ["batch_data[].to", "batch_data[].to", "batch_data[].to", "batch_data[].to", "batch_data[].to", "batch_data[].to", "batch_data[].to", "batch_data[].to"], "methods", ["None"], ["", "", "def", "set_input", "(", "self", ",", "batch_data", ")", ":", "\n", "        ", "self", ".", "input_B1", "=", "batch_data", "[", "'B1'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "input_B2", "=", "batch_data", "[", "'B2'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "input_B0", "=", "batch_data", "[", "'B0'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "input_B3", "=", "batch_data", "[", "'B3'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "self", ".", "input_B1_E", "=", "batch_data", "[", "'B1_E'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "input_B1_S", "=", "batch_data", "[", "'B1_S'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "input_B2_E", "=", "batch_data", "[", "'B2_E'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "input_B2_S", "=", "batch_data", "[", "'B2_S'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "B1_path", "=", "batch_data", "[", "'B1_path'", "]", "\n", "self", ".", "B2_path", "=", "batch_data", "[", "'B2_path'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.model_SEframe_stage1.SEframeNet.forward": [[47, 59], ["model_SEframe_stage1.SEframeNet.SE_deblur_net", "model_SEframe_stage1.SEframeNet.L1_loss", "model_SEframe_stage1.SEframeNet.L1_loss", "model_SEframe_stage1.SEframeNet.L1_loss", "model_SEframe_stage1.SEframeNet.L1_loss"], "methods", ["None"], ["", "def", "forward", "(", "self", ")", ":", "\n", "\n", "        ", "out", "=", "self", ".", "SE_deblur_net", "(", "self", ".", "input_B0", ",", "self", ".", "input_B1", ",", "self", ".", "input_B2", ",", "self", ".", "input_B3", ")", "\n", "\n", "# loss ", "\n", "loss_B1_S", "=", "self", ".", "L1_loss", "(", "self", ".", "input_B1_S", ",", "out", "[", "0", "]", ")", "\n", "loss_B1_E", "=", "self", ".", "L1_loss", "(", "self", ".", "input_B1_E", ",", "out", "[", "1", "]", ")", "\n", "loss_B2_S", "=", "self", ".", "L1_loss", "(", "self", ".", "input_B2_S", ",", "out", "[", "2", "]", ")", "\n", "loss_B2_E", "=", "self", ".", "L1_loss", "(", "self", ".", "input_B2_E", ",", "out", "[", "3", "]", ")", "\n", "\n", "self", ".", "output", "=", "{", "'B1_S'", ":", "out", "[", "0", "]", ",", "'B1_E'", ":", "out", "[", "1", "]", ",", "'B2_S'", ":", "out", "[", "2", "]", ",", "'B2_E'", ":", "out", "[", "3", "]", "}", "\n", "self", ".", "tot_loss", "=", "loss_B1_S", "+", "loss_B1_E", "+", "loss_B2_S", "+", "loss_B2_E", "\n", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.model_SEframe_stage1.SEframeNet.optimize": [[60, 65], ["model_SEframe_stage1.SEframeNet.forward", "model_SEframe_stage1.SEframeNet.optimizer.zero_grad", "model_SEframe_stage1.SEframeNet.tot_loss.backward", "model_SEframe_stage1.SEframeNet.optimizer.step"], "methods", ["home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.inter_models.correlation.ModuleCorrelation.forward", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.inter_models.correlation._FunctionCorrelation.backward"], ["", "def", "optimize", "(", "self", ")", ":", "\n", "        ", "self", ".", "forward", "(", ")", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "self", ".", "tot_loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.model_SEframe_stage1.SEframeNet.get_loss": [[66, 69], ["collections.OrderedDict", "model_SEframe_stage1.SEframeNet.tot_loss.item"], "methods", ["None"], ["", "def", "get_loss", "(", "self", ")", ":", "\n", "\n", "        ", "return", "OrderedDict", "(", "[", "(", "'total_loss'", ",", "self", ".", "tot_loss", ".", "item", "(", ")", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.model_SEframe_stage1.SEframeNet.test": [[70, 89], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model_SEframe_stage1.SEframeNet.SE_deblur_net", "model_SEframe_stage1.SEframeNet.L2_loss", "model_SEframe_stage1.SEframeNet.test.PSNR"], "methods", ["None"], ["", "def", "test", "(", "self", ",", "validation", "=", "False", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# flow_1_2 = self.flow_net(self.input_B1,self.input_B2)", "\n", "# get estimated start end frame", "\n", "            ", "out", "=", "self", ".", "SE_deblur_net", "(", "self", ".", "input_B0", ",", "self", ".", "input_B1", ",", "self", ".", "input_B2", ",", "self", ".", "input_B3", ")", "\n", "self", ".", "output", "=", "{", "'B1_S'", ":", "out", "[", "0", "]", ",", "'B1_E'", ":", "out", "[", "1", "]", ",", "'B2_S'", ":", "out", "[", "2", "]", ",", "'B2_E'", ":", "out", "[", "3", "]", "}", "\n", "\n", "# calculate PSNR", "\n", "", "def", "PSNR", "(", "img1", ",", "img2", ")", ":", "\n", "            ", "MSE", "=", "self", ".", "L2_loss", "(", "img1", ",", "img2", ")", "\n", "return", "10", "*", "np", ".", "log10", "(", "1", "/", "MSE", ".", "item", "(", ")", ")", "\n", "\n", "", "if", "validation", ":", "\n", "            ", "psnr", "=", "0", "\n", "psnr", "+=", "PSNR", "(", "self", ".", "input_B1_S", ",", "self", ".", "output", "[", "'B1_S'", "]", ")", "\n", "psnr", "+=", "PSNR", "(", "self", ".", "input_B1_E", ",", "self", ".", "output", "[", "'B1_E'", "]", ")", "\n", "psnr", "+=", "PSNR", "(", "self", ".", "input_B2_S", ",", "self", ".", "output", "[", "'B2_S'", "]", ")", "\n", "psnr", "+=", "PSNR", "(", "self", ".", "input_B2_E", ",", "self", ".", "output", "[", "'B2_E'", "]", ")", "\n", "return", "psnr", "/", "4", "\n", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.model_SEframe_stage1.SEframeNet.save": [[91, 100], ["len", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "model_SEframe_stage1.SEframeNet.SE_deblur_net.to", "model_SEframe_stage1.SEframeNet.SE_deblur_net.cpu().module.state_dict", "model_SEframe_stage1.SEframeNet.SE_deblur_net.cpu().state_dict", "model_SEframe_stage1.SEframeNet.SE_deblur_net.cpu", "model_SEframe_stage1.SEframeNet.SE_deblur_net.cpu"], "methods", ["home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save"], ["", "", "def", "save", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "save_filename", "=", "'SEframe_net_%s.pth'", "%", "epoch", "\n", "save_path", "=", "self", ".", "opt", ".", "checkpoints", "+", "'/'", "+", "self", ".", "opt", ".", "model_name", "+", "'/'", "+", "save_filename", "\n", "if", "len", "(", "self", ".", "opt", ".", "gpu", ")", ">", "1", ":", "\n", "            ", "torch", ".", "save", "(", "self", ".", "SE_deblur_net", ".", "cpu", "(", ")", ".", "module", ".", "state_dict", "(", ")", ",", "save_path", ")", "\n", "", "else", ":", "\n", "            ", "torch", ".", "save", "(", "self", ".", "SE_deblur_net", ".", "cpu", "(", ")", ".", "state_dict", "(", ")", ",", "save_path", ")", "\n", "", "if", "self", ".", "opt", ".", "gpu", ":", "\n", "            ", "self", ".", "SE_deblur_net", ".", "to", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.model_SEframe_stage1.SEframeNet.load": [[101, 106], ["os.path.join", "model_SEframe_stage1.SEframeNet.SE_deblur_net.load_state_dict", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load"], "methods", ["home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load"], ["", "", "def", "load", "(", "self", ",", "args", ")", ":", "\n", "        ", "load_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "checkpoints", ",", "args", ".", "model_name", ")", "\n", "load_file", "=", "load_path", "+", "'/'", "+", "'SEframe_net_%s.pth'", "%", "args", ".", "which_epoch", "\n", "self", ".", "SE_deblur_net", ".", "load_state_dict", "(", "torch", ".", "load", "(", "load_file", ")", ")", "\n", "print", "(", "'--------load model %s success!-------'", "%", "load_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.model_SEframe_stage1.SEframeNet.schedule_lr": [[108, 115], ["model_SEframe_stage1.SEframeNet.get_current_lr_from_epoch"], "methods", ["home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.get_current_lr_from_epoch"], ["", "def", "schedule_lr", "(", "self", ",", "epoch", ",", "tot_epoch", ")", ":", "\n", "# scheduler", "\n", "# print(\"current learning rate:%.7f\"%self.scheduler.get_lr())", "\n", "# self.scheduler.step()", "\n", "\n", "        ", "lr", "=", "self", ".", "opt", ".", "lr", "\n", "self", ".", "get_current_lr_from_epoch", "(", "lr", ",", "epoch", ",", "tot_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.model_SEframe_stage1.SEframeNet.get_current_lr_from_epoch": [[116, 125], ["print"], "methods", ["None"], ["", "def", "get_current_lr_from_epoch", "(", "self", ",", "lr", ",", "epoch", ",", "tot_epoch", ")", ":", "\n", "        ", "decrease_step", "=", "5", "\n", "# current_lr = lr * (0.9**(epoch//decrease_step))", "\n", "current_lr", "=", "lr", "*", "(", "1", "-", "epoch", "/", "tot_epoch", ")", "\n", "if", "epoch", ">", "350", ":", "\n", "            ", "current_lr", "=", "0.000001", "\n", "", "for", "param_group", "in", "self", ".", "optimizer", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "current_lr", "\n", "", "print", "(", "\"current learning rate:%.7f\"", "%", "(", "current_lr", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.model_SEframe_stage1.SEframeNet.get_current_visuals": [[126, 135], ["utils.utils.utils.tensor2im", "utils.utils.utils.tensor2im", "utils.utils.utils.tensor2im", "utils.utils.utils.tensor2im", "utils.utils.utils.tensor2im", "utils.utils.utils.tensor2im", "collections.OrderedDict"], "methods", ["home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.utils.utils.tensor2im", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.utils.utils.tensor2im", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.utils.utils.tensor2im", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.utils.utils.tensor2im", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.utils.utils.tensor2im", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.utils.utils.tensor2im"], ["", "def", "get_current_visuals", "(", "self", ")", ":", "\n", "        ", "input_B1", "=", "utils", ".", "tensor2im", "(", "self", ".", "input_B1", ")", "\n", "input_B2", "=", "utils", ".", "tensor2im", "(", "self", ".", "input_B2", ")", "\n", "output_B1_S", "=", "utils", ".", "tensor2im", "(", "self", ".", "output", "[", "'B1_S'", "]", ")", "\n", "output_B1_E", "=", "utils", ".", "tensor2im", "(", "self", ".", "output", "[", "'B1_E'", "]", ")", "\n", "output_B2_S", "=", "utils", ".", "tensor2im", "(", "self", ".", "output", "[", "'B2_S'", "]", ")", "\n", "output_B2_E", "=", "utils", ".", "tensor2im", "(", "self", ".", "output", "[", "'B2_E'", "]", ")", "\n", "return", "OrderedDict", "(", "[", "(", "'B1'", ",", "input_B1", ")", ",", "(", "'B2'", ",", "input_B2", ")", ",", "(", "'B1_S'", ",", "output_B1_S", ")", ",", "\n", "(", "'B1_E'", ",", "output_B1_E", ")", ",", "(", "'B2_S'", ",", "output_B2_S", ")", ",", "(", "'B2_E'", ",", "output_B2_E", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.model_SEframe_stage1.SEframeNet.get_image_path": [[136, 138], ["None"], "methods", ["None"], ["", "def", "get_image_path", "(", "self", ")", ":", "\n", "        ", "return", "{", "'B1_path'", ":", "self", ".", "B1_path", ",", "'B2_path'", ":", "self", ".", "B2_path", "}", "", "", "", ""]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.networks.RDB_block.__init__": [[59, 66], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.data.dataloader_4frame.Video.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inChannels", ",", "growRate", ",", "kSize", "=", "3", ")", ":", "\n", "        ", "super", "(", "RDB_block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "Cin", "=", "inChannels", "\n", "G", "=", "growRate", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "*", "[", "\n", "nn", ".", "Conv2d", "(", "Cin", ",", "G", ",", "kSize", ",", "padding", "=", "(", "kSize", "-", "1", ")", "//", "2", ",", "stride", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.networks.RDB_block.forward": [[68, 71], ["networks.RDB_block.conv", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv", "(", "x", ")", "\n", "return", "torch", ".", "cat", "(", "(", "x", ",", "out", ")", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.networks.RDB.__init__": [[74, 87], ["torch.Module.__init__", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "convs.append", "networks.RDB_block"], "methods", ["home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.data.dataloader_4frame.Video.__init__"], ["    ", "def", "__init__", "(", "self", ",", "growRate0", ",", "growRate", ",", "nConvLayers", ",", "kSize", "=", "3", ")", ":", "\n", "        ", "super", "(", "RDB", ",", "self", ")", ".", "__init__", "(", ")", "\n", "G0", "=", "growRate0", "\n", "G", "=", "growRate", "\n", "C", "=", "nConvLayers", "\n", "\n", "convs", "=", "[", "]", "\n", "for", "c", "in", "range", "(", "C", ")", ":", "\n", "            ", "convs", ".", "append", "(", "RDB_block", "(", "G0", "+", "c", "*", "G", ",", "G", ")", ")", "\n", "", "self", ".", "convs", "=", "nn", ".", "Sequential", "(", "*", "convs", ")", "\n", "\n", "# Local Feature Fusion", "\n", "self", ".", "LFF", "=", "nn", ".", "Conv2d", "(", "G0", "+", "C", "*", "G", ",", "G0", ",", "1", ",", "padding", "=", "0", ",", "stride", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.networks.RDB.forward": [[88, 90], ["networks.RDB.LFF", "networks.RDB.convs"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "LFF", "(", "self", ".", "convs", "(", "x", ")", ")", "+", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.networks.Residual_Net.__init__": [[92, 124], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "networks.Residual_Net.RDBs.append", "networks.RDB", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.PixelShuffle", "torch.PixelShuffle", "torch.PixelShuffle", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.data.dataloader_4frame.Video.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channel", ",", "out_channel", ",", "n_RDB", ")", ":", "\n", "        ", "super", "(", "Residual_Net", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "G0", "=", "96", "\n", "kSize", "=", "3", "\n", "\n", "# number of RDB blocks, conv layers, out channels", "\n", "self", ".", "D", "=", "n_RDB", "\n", "self", ".", "C", "=", "5", "\n", "self", ".", "G", "=", "48", "\n", "\n", "# Shallow feature extraction net", "\n", "self", ".", "SFENet1", "=", "nn", ".", "Conv2d", "(", "in_channel", "*", "4", ",", "self", ".", "G0", ",", "5", ",", "padding", "=", "2", ",", "stride", "=", "1", ")", "\n", "self", ".", "SFENet2", "=", "nn", ".", "Conv2d", "(", "self", ".", "G0", ",", "self", ".", "G0", ",", "kSize", ",", "padding", "=", "(", "kSize", "-", "1", ")", "//", "2", ",", "stride", "=", "1", ")", "\n", "\n", "# Redidual dense blocks and dense feature fusion", "\n", "self", ".", "RDBs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "D", ")", ":", "\n", "            ", "self", ".", "RDBs", ".", "append", "(", "\n", "RDB", "(", "growRate0", "=", "self", ".", "G0", ",", "growRate", "=", "self", ".", "G", ",", "nConvLayers", "=", "self", ".", "C", ")", "\n", ")", "\n", "\n", "# Global Feature Fusion", "\n", "", "self", ".", "GFF", "=", "nn", ".", "Sequential", "(", "*", "[", "\n", "nn", ".", "Conv2d", "(", "self", ".", "D", "*", "self", ".", "G0", ",", "self", ".", "G0", ",", "1", ",", "padding", "=", "0", ",", "stride", "=", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "self", ".", "G0", ",", "self", ".", "G0", ",", "kSize", ",", "padding", "=", "(", "kSize", "-", "1", ")", "//", "2", ",", "stride", "=", "1", ")", "\n", "]", ")", "\n", "\n", "# Up-sampling net", "\n", "self", ".", "UPNet", "=", "nn", ".", "Sequential", "(", "*", "[", "\n", "nn", ".", "Conv2d", "(", "self", ".", "G0", ",", "256", ",", "kSize", ",", "padding", "=", "(", "kSize", "-", "1", ")", "//", "2", ",", "stride", "=", "1", ")", ",", "\n", "nn", ".", "PixelShuffle", "(", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "out_channel", ",", "kSize", ",", "padding", "=", "(", "kSize", "-", "1", ")", "//", "2", ",", "stride", "=", "1", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.networks.Residual_Net.forward": [[126, 140], ["networks.pixel_reshuffle", "networks.Residual_Net.SFENet1", "networks.Residual_Net.SFENet2", "range", "networks.Residual_Net.GFF", "networks.Residual_Net.UPNet", "RDBs_out.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.networks.pixel_reshuffle"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "B_shuffle", "=", "pixel_reshuffle", "(", "input", ",", "2", ")", "\n", "f__1", "=", "self", ".", "SFENet1", "(", "B_shuffle", ")", "\n", "x", "=", "self", ".", "SFENet2", "(", "f__1", ")", "\n", "RDBs_out", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "D", ")", ":", "\n", "            ", "x", "=", "self", ".", "RDBs", "[", "i", "]", "(", "x", ")", "\n", "RDBs_out", ".", "append", "(", "x", ")", "\n", "", "x", "=", "self", ".", "GFF", "(", "torch", ".", "cat", "(", "RDBs_out", ",", "1", ")", ")", "\n", "x", "+=", "f__1", "\n", "\n", "# residual output", "\n", "Residual", "=", "self", ".", "UPNet", "(", "x", ")", "\n", "return", "Residual", "\n", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.networks.Deblur_2step.__init__": [[142, 147], ["torch.Module.__init__", "networks.Residual_Net", "networks.Residual_Net"], "methods", ["home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.data.dataloader_4frame.Video.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_c", ",", "output_c", "=", "6", ",", "only_stage1", "=", "False", ")", ":", "\n", "        ", "super", "(", "Deblur_2step", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "deblur_net", "=", "Residual_Net", "(", "input_c", ",", "12", ",", "n_RDB", "=", "20", ")", "\n", "self", ".", "refine_net", "=", "Residual_Net", "(", "9", ",", "output_c", ",", "n_RDB", "=", "10", ")", "\n", "self", ".", "only_stage1", "=", "only_stage1", "\n", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.networks.Deblur_2step.forward": [[148, 167], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "networks.Deblur_2step.deblur_net", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "networks.Deblur_2step.deblur_net().detach", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "networks.Deblur_2step.refine_net", "networks.Deblur_2step.refine_net", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "networks.Deblur_2step.deblur_net", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "B0", ",", "B1", ",", "B2", ",", "B3", ")", ":", "\n", "        ", "input1", "=", "torch", ".", "cat", "(", "(", "B0", ",", "B1", ",", "B2", ",", "B3", ")", ",", "1", ")", "\n", "# with torch.no_grad():", "\n", "if", "self", ".", "only_stage1", ":", "\n", "            ", "res1", "=", "self", ".", "deblur_net", "(", "input1", ")", "\n", "deblur_out", "=", "torch", ".", "split", "(", "res1", "+", "torch", ".", "cat", "(", "(", "B1", ",", "B1", ",", "B2", ",", "B2", ")", ",", "1", ")", ",", "3", ",", "1", ")", "\n", "return", "deblur_out", "\n", "", "else", ":", "\n", "            ", "res1", "=", "self", ".", "deblur_net", "(", "input1", ")", ".", "detach", "(", ")", "\n", "deblur_out", "=", "torch", ".", "split", "(", "res1", "+", "torch", ".", "cat", "(", "(", "B1", ",", "B1", ",", "B2", ",", "B2", ")", ",", "1", ")", ",", "3", ",", "1", ")", "\n", "deblur_B1", "=", "torch", ".", "cat", "(", "(", "B1", ",", "deblur_out", "[", "0", "]", ",", "deblur_out", "[", "1", "]", ")", ",", "1", ")", "\n", "deblur_B2", "=", "torch", ".", "cat", "(", "(", "B2", ",", "deblur_out", "[", "2", "]", ",", "deblur_out", "[", "3", "]", ")", ",", "1", ")", "\n", "res2_B1", "=", "self", ".", "refine_net", "(", "deblur_B1", ")", "\n", "res2_B2", "=", "self", ".", "refine_net", "(", "deblur_B2", ")", "\n", "refine_B1", "=", "torch", ".", "split", "(", "res2_B1", "+", "torch", ".", "cat", "(", "(", "deblur_out", "[", "0", "]", ",", "deblur_out", "[", "1", "]", ")", ",", "1", ")", ",", "3", ",", "1", ")", "\n", "refine_B2", "=", "torch", ".", "split", "(", "res2_B2", "+", "torch", ".", "cat", "(", "(", "deblur_out", "[", "2", "]", ",", "deblur_out", "[", "3", "]", ")", ",", "1", ")", ",", "3", ",", "1", ")", "\n", "refine_out", "=", "refine_B1", "+", "refine_B2", "\n", "\n", "return", "deblur_out", ",", "refine_out", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.networks._get_orthogonal_init_weights": [[8, 18], ["weights.size", "numpy.linalg.svd", "weights.size", "numpy.random.normal", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "weights.size", "weights.size", "u.reshape", "v.reshape", "weights.size", "weights.size"], "function", ["None"], ["def", "_get_orthogonal_init_weights", "(", "weights", ")", ":", "\n", "    ", "fan_out", "=", "weights", ".", "size", "(", "0", ")", "\n", "fan_in", "=", "weights", ".", "size", "(", "1", ")", "*", "weights", ".", "size", "(", "2", ")", "*", "weights", ".", "size", "(", "3", ")", "\n", "\n", "u", ",", "_", ",", "v", "=", "svd", "(", "normal", "(", "0.0", ",", "1.0", ",", "(", "fan_out", ",", "fan_in", ")", ")", ",", "full_matrices", "=", "False", ")", "\n", "\n", "if", "u", ".", "shape", "==", "(", "fan_out", ",", "fan_in", ")", ":", "\n", "        ", "return", "torch", ".", "Tensor", "(", "u", ".", "reshape", "(", "weights", ".", "size", "(", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "return", "torch", ".", "Tensor", "(", "v", ".", "reshape", "(", "weights", ".", "size", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.networks.weights_init": [[19, 29], ["classname.find", "torch.init.xavier_uniform_", "hasattr", "m.bias.data.fill_", "classname.find", "m.weight.data.normal_", "m.bias.data.fill_"], "function", ["None"], ["", "", "def", "weights_init", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "# m.weight.data.normal_(0.0, 0.02)", "\n", "        ", "nn", ".", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ".", "data", ")", "\n", "if", "hasattr", "(", "m", ".", "bias", ",", "'data'", ")", ":", "\n", "            ", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "", "", "elif", "classname", ".", "find", "(", "'BatchNorm2d'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "1.0", ",", "0.02", ")", "\n", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.networks.pixel_reshuffle": [[30, 56], ["input.size", "input.contiguous().view", "input.contiguous().view.permute().contiguous", "input_view.permute().contiguous.view", "input.contiguous", "input.contiguous().view.permute"], "function", ["None"], ["", "", "def", "pixel_reshuffle", "(", "input", ",", "upscale_factor", ")", ":", "\n", "    ", "\"\"\"Rearranges elements in a tensor of shape ``[*, C, H, W]`` to a\n\ttensor of shape ``[C*r^2, H/r, W/r]``.\n\n\tSee :class:`~torch.nn.PixelShuffle` for details.\n\n\tArgs:\n\t\tinput (Variable): Input\n\t\tupscale_factor (int): factor to increase spatial resolution by\n\n\tExamples:\n\t\t>>> input = autograd.Variable(torch.Tensor(1, 3, 12, 12))\n\t\t>>> output = pixel_reshuffle(input,2)\n\t\t>>> print(output.size())\n\t\ttorch.Size([1, 12, 6, 6])\n\t\"\"\"", "\n", "batch_size", ",", "channels", ",", "in_height", ",", "in_width", "=", "input", ".", "size", "(", ")", "\n", "\n", "# // division is to keep data type unchanged. In this way, the out_height is still int type", "\n", "out_height", "=", "in_height", "//", "upscale_factor", "\n", "out_width", "=", "in_width", "//", "upscale_factor", "\n", "input_view", "=", "input", ".", "contiguous", "(", ")", ".", "view", "(", "batch_size", ",", "channels", ",", "out_height", ",", "upscale_factor", ",", "out_width", ",", "upscale_factor", ")", "\n", "channels", "=", "channels", "*", "upscale_factor", "*", "upscale_factor", "\n", "\n", "shuffle_out", "=", "input_view", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "5", ",", "2", ",", "4", ")", ".", "contiguous", "(", ")", "\n", "return", "shuffle_out", ".", "view", "(", "batch_size", ",", "channels", ",", "out_height", ",", "out_width", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.model_refineS2.RefineNet.__init__": [[14, 35], ["PWCNetnew.PWCNet", "model_refineS2.RefineNet.flow_net.load_state_dict", "model_refineS2.RefineNet.flow_net.to", "models.inter_models.refine_S2.RefineS2().to", "torch.L1Loss", "torch.L1Loss", "torch.L1Loss", "torch.L1Loss", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "model_refineS2.RefineNet.Refine_net.parameters", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "models.inter_models.refine_S2.RefineS2"], "methods", ["home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "opt", "=", "args", "\n", "if", "args", ".", "gpu", ":", "\n", "            ", "self", ".", "device", "=", "torch", ".", "device", "(", "'cuda:{}'", ".", "format", "(", "args", ".", "gpu", "[", "0", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "\n", "### initial model", "\n", "", "self", ".", "flow_net", "=", "PWCNet", "(", ")", "\n", "self", ".", "flow_net", ".", "load_state_dict", "(", "torch", ".", "load", "(", "args", ".", "pwc_path", ")", ")", "\n", "self", ".", "flow_net", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "self", ".", "Refine_net", "=", "RefineS2", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "###Loss and Optimizer", "\n", "self", ".", "L1_loss", "=", "nn", ".", "L1Loss", "(", ")", "\n", "self", ".", "L2_loss", "=", "nn", ".", "MSELoss", "(", ")", "\n", "\n", "params", "=", "self", ".", "Refine_net", ".", "parameters", "(", ")", "\n", "if", "args", ".", "train", ":", "\n", "            ", "self", ".", "optimizer", "=", "optim", ".", "Adam", "(", "params", ",", "lr", "=", "args", ".", "lr", ",", "betas", "=", "(", "0.9", ",", "0.999", ")", ")", "\n", "# self.scheduler = optim.lr_scheduler.StepLR(self.optimizer, step_size=5, gamma=0.9,last_epoch=args.start_epoch)", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.model_refineS2.RefineNet.set_input": [[38, 46], ["batch_data[].to", "batch_data[].to", "batch_data[].to", "batch_data[].to"], "methods", ["None"], ["", "", "def", "set_input", "(", "self", ",", "batch_data", ")", ":", "\n", "        ", "self", ".", "input_B0", "=", "batch_data", "[", "'B0'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "input_B1", "=", "batch_data", "[", "'B1'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "input_B2", "=", "batch_data", "[", "'B2'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "input_B3", "=", "batch_data", "[", "'B3'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "B1_path", "=", "batch_data", "[", "'B1_path'", "]", "\n", "self", ".", "B2_path", "=", "batch_data", "[", "'B2_path'", "]", "\n", "self", ".", "r", "=", "batch_data", "[", "'r'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.model_refineS2.RefineNet.forward": [[47, 64], ["model_refineS2.RefineNet.r.cuda().float", "r.view.view.view", "model_refineS2.RefineNet.Refine_net", "model_refineS2.RefineNet.L2_loss", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model_refineS2.RefineNet.flow_net().float().detach", "model_refineS2.RefineNet.flow_net().float().detach", "model_refineS2.RefineNet.flow_net().float().detach", "model_refineS2.RefineNet.r.cuda", "model_refineS2.RefineNet.flow_net().float", "model_refineS2.RefineNet.flow_net().float", "model_refineS2.RefineNet.flow_net().float", "model_refineS2.RefineNet.flow_net", "model_refineS2.RefineNet.flow_net", "model_refineS2.RefineNet.flow_net"], "methods", ["None"], ["", "def", "forward", "(", "self", ")", ":", "\n", "# calculate flow ", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "flow_10", "=", "self", ".", "flow_net", "(", "self", ".", "input_B1", ",", "self", ".", "input_B0", ")", ".", "float", "(", ")", ".", "detach", "(", ")", "\n", "flow_12", "=", "self", ".", "flow_net", "(", "self", ".", "input_B1", ",", "self", ".", "input_B2", ")", ".", "float", "(", ")", ".", "detach", "(", ")", "\n", "flow_13", "=", "self", ".", "flow_net", "(", "self", ".", "input_B1", ",", "self", ".", "input_B3", ")", ".", "float", "(", ")", ".", "detach", "(", ")", "\n", "# flow_23 = self.flow_net(self.input_B2,self.input_B3).float().detach()", "\n", "", "flow_23", "=", "flow_13", "-", "flow_12", "\n", "r", "=", "self", ".", "r", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "# import ipdb; ipdb.set_trace()", "\n", "r", "=", "r", ".", "view", "(", "-", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "flow_gt", "=", "2", "*", "flow_12", "/", "r", "+", "flow_10", "\n", "# get estimated start end frame", "\n", "flow_23_refine", "=", "self", ".", "Refine_net", "(", "flow_10", ",", "flow_12", ",", "flow_23", ")", "\n", "\n", "# loss ", "\n", "self", ".", "tot_loss", "=", "self", ".", "L2_loss", "(", "flow_23_refine", ",", "flow_gt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.model_refineS2.RefineNet.optimize": [[68, 73], ["model_refineS2.RefineNet.forward", "model_refineS2.RefineNet.optimizer.zero_grad", "model_refineS2.RefineNet.tot_loss.backward", "model_refineS2.RefineNet.optimizer.step"], "methods", ["home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.inter_models.correlation.ModuleCorrelation.forward", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.inter_models.correlation._FunctionCorrelation.backward"], ["", "def", "optimize", "(", "self", ")", ":", "\n", "        ", "self", ".", "forward", "(", ")", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "self", ".", "tot_loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.model_refineS2.RefineNet.get_loss": [[74, 77], ["collections.OrderedDict", "model_refineS2.RefineNet.tot_loss.item"], "methods", ["None"], ["", "def", "get_loss", "(", "self", ")", ":", "\n", "\n", "        ", "return", "OrderedDict", "(", "[", "(", "'total_loss'", ",", "self", ".", "tot_loss", ".", "item", "(", ")", ")", ",", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.model_refineS2.RefineNet.test": [[79, 97], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model_refineS2.RefineNet.flow_net().float().detach", "model_refineS2.RefineNet.flow_net().float().detach", "model_refineS2.RefineNet.flow_net().float().detach", "model_refineS2.RefineNet.r.cuda().float", "model_refineS2.RefineNet.Refine_net", "model_refineS2.RefineNet.L2_loss", "model_refineS2.RefineNet.flow_net().float", "model_refineS2.RefineNet.flow_net().float", "model_refineS2.RefineNet.flow_net().float", "model_refineS2.RefineNet.r.cuda", "model_refineS2.RefineNet.flow_net", "model_refineS2.RefineNet.flow_net", "model_refineS2.RefineNet.flow_net"], "methods", ["None"], ["", "def", "test", "(", "self", ",", "validation", "=", "False", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "flow_10", "=", "self", ".", "flow_net", "(", "self", ".", "input_B1", ",", "self", ".", "input_B0", ")", ".", "float", "(", ")", ".", "detach", "(", ")", "\n", "flow_12", "=", "self", ".", "flow_net", "(", "self", ".", "input_B1", ",", "self", ".", "input_B2", ")", ".", "float", "(", ")", ".", "detach", "(", ")", "\n", "# flow_23 = self.flow_net(self.input_B2,self.input_B3).float().detach()", "\n", "flow_13", "=", "self", ".", "flow_net", "(", "self", ".", "input_B1", ",", "self", ".", "input_B3", ")", ".", "float", "(", ")", ".", "detach", "(", ")", "\n", "flow_23", "=", "flow_13", "-", "flow_12", "\n", "\n", "\n", "r", "=", "self", ".", "r", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "flow_gt", "=", "2", "*", "flow_12", "/", "r", "+", "flow_10", "\n", "# get estimated start end frame", "\n", "flow_23_refine", "=", "self", ".", "Refine_net", "(", "flow_10", ",", "flow_12", ",", "flow_23", ")", "\n", "\n", "# self.output = {'B1_S':choose_out[0],'B1_E':choose_out[1],'B2_S':choose_out[2],'B2_E':choose_out[3]}", "\n", "", "if", "validation", ":", "\n", "            ", "EPE", "=", "self", ".", "L2_loss", "(", "flow_23_refine", ",", "flow_gt", ")", "\n", "return", "EPE", "\n", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.model_refineS2.RefineNet.save": [[99, 108], ["len", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "model_refineS2.RefineNet.Refine_net.to", "model_refineS2.RefineNet.Refine_net.cpu().module.state_dict", "model_refineS2.RefineNet.Refine_net.cpu().state_dict", "model_refineS2.RefineNet.Refine_net.cpu", "model_refineS2.RefineNet.Refine_net.cpu"], "methods", ["home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save"], ["", "", "def", "save", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "save_filename", "=", "'refine_net_%s.pth'", "%", "epoch", "\n", "save_path", "=", "self", ".", "opt", ".", "checkpoints", "+", "'/'", "+", "self", ".", "opt", ".", "model_name", "+", "'/'", "+", "save_filename", "\n", "if", "len", "(", "self", ".", "opt", ".", "gpu", ")", ">", "1", ":", "\n", "            ", "torch", ".", "save", "(", "self", ".", "Refine_net", ".", "cpu", "(", ")", ".", "module", ".", "state_dict", "(", ")", ",", "save_path", ")", "\n", "", "else", ":", "\n", "            ", "torch", ".", "save", "(", "self", ".", "Refine_net", ".", "cpu", "(", ")", ".", "state_dict", "(", ")", ",", "save_path", ")", "\n", "", "if", "self", ".", "opt", ".", "gpu", ":", "\n", "            ", "self", ".", "Refine_net", ".", "to", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.model_refineS2.RefineNet.load": [[109, 114], ["os.path.join", "model_refineS2.RefineNet.Refine_net.load_state_dict", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load"], "methods", ["home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load"], ["", "", "def", "load", "(", "self", ",", "args", ")", ":", "\n", "        ", "load_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "checkpoints", ",", "args", ".", "model_name", ")", "\n", "load_file", "=", "load_path", "+", "'/'", "+", "'refine_net_%s.pth'", "%", "args", ".", "which_epoch", "\n", "self", ".", "Refine_net", ".", "load_state_dict", "(", "torch", ".", "load", "(", "load_file", ")", ")", "\n", "print", "(", "'--------load model %s success!-------'", "%", "load_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.model_refineS2.RefineNet.schedule_lr": [[116, 123], ["model_refineS2.RefineNet.get_current_lr_from_epoch"], "methods", ["home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.get_current_lr_from_epoch"], ["", "def", "schedule_lr", "(", "self", ",", "epoch", ")", ":", "\n", "# scheduler", "\n", "# print(\"current learning rate:%.7f\"%self.scheduler.get_lr())", "\n", "# self.scheduler.step()", "\n", "\n", "        ", "lr", "=", "self", ".", "opt", ".", "lr", "\n", "self", ".", "get_current_lr_from_epoch", "(", "lr", ",", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.model_refineS2.RefineNet.get_current_lr_from_epoch": [[124, 132], ["print"], "methods", ["None"], ["", "def", "get_current_lr_from_epoch", "(", "self", ",", "lr", ",", "epoch", ")", ":", "\n", "        ", "decrease_step", "=", "5", "\n", "current_lr", "=", "lr", "*", "(", "0.9", "**", "(", "epoch", "//", "decrease_step", ")", ")", "\n", "if", "epoch", ">", "200", ":", "\n", "            ", "current_lr", "=", "0.000001", "\n", "", "for", "param_group", "in", "self", ".", "optimizer", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "current_lr", "\n", "", "print", "(", "\"current learning rate:%.7f\"", "%", "(", "current_lr", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.model_refineS2.RefineNet.get_current_visuals": [[133, 142], ["utils.utils.utils.tensor2im", "utils.utils.utils.tensor2im", "utils.utils.utils.tensor2im", "utils.utils.utils.tensor2im", "utils.utils.utils.tensor2im", "utils.utils.utils.tensor2im", "collections.OrderedDict"], "methods", ["home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.utils.utils.tensor2im", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.utils.utils.tensor2im", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.utils.utils.tensor2im", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.utils.utils.tensor2im", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.utils.utils.tensor2im", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.utils.utils.tensor2im"], ["", "def", "get_current_visuals", "(", "self", ")", ":", "\n", "        ", "input_B1", "=", "utils", ".", "tensor2im", "(", "self", ".", "input_B1", ")", "\n", "input_B2", "=", "utils", ".", "tensor2im", "(", "self", ".", "input_B2", ")", "\n", "output_B1_S", "=", "utils", ".", "tensor2im", "(", "self", ".", "output", "[", "'B1_S'", "]", ")", "\n", "output_B1_E", "=", "utils", ".", "tensor2im", "(", "self", ".", "output", "[", "'B1_E'", "]", ")", "\n", "output_B2_S", "=", "utils", ".", "tensor2im", "(", "self", ".", "output", "[", "'B2_S'", "]", ")", "\n", "output_B2_E", "=", "utils", ".", "tensor2im", "(", "self", ".", "output", "[", "'B2_E'", "]", ")", "\n", "return", "OrderedDict", "(", "[", "(", "'B1'", ",", "input_B1", ")", ",", "(", "'B2'", ",", "input_B2", ")", ",", "(", "'B1_S'", ",", "output_B1_S", ")", ",", "\n", "(", "'B1_E'", ",", "output_B1_E", ")", ",", "(", "'B2_S'", ",", "output_B2_S", ")", ",", "(", "'B2_E'", ",", "output_B2_E", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.model_refineS2.RefineNet.get_image_path": [[143, 145], ["None"], "methods", ["None"], ["", "def", "get_image_path", "(", "self", ")", ":", "\n", "        ", "return", "{", "'B1_path'", ":", "self", ".", "B1_path", ",", "'B2_path'", ":", "self", ".", "B2_path", "}", "", "", "", ""]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.PWCNetnew.PWCNet.__init__": [[14, 226], ["super().__init__", "Extractor", "Decoder", "Decoder", "Decoder", "Decoder", "Decoder", "Refiner", "super().__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "PWCNetnew.PWCNet.moduleOne", "PWCNetnew.PWCNet.moduleTwo", "PWCNetnew.PWCNet.moduleThr", "PWCNetnew.PWCNet.moduleFou", "PWCNetnew.PWCNet.moduleFiv", "PWCNetnew.PWCNet.moduleSix", "super().__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.cat", "torch.cat", "torch.nn.functional.grid_sample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "PWCNetnew.PWCNet.moduleSix", "super().__init__", "torch.nn.Sequential", "PWCNetnew.PWCNet.moduleMain", "torch.nn.Conv2d", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.LeakyReLU", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.Conv2d", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "str", "torch.linspace().view().expand", "torch.linspace().view().expand", "torch.cat().cuda", "str", "PWCNetnew.PWCNet.new_ones", "torch.nn.functional.leaky_relu", "torch.cat", "torch.nn.Conv2d", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "PWCNetnew.PWCNet.size", "PWCNetnew.PWCNet.size", "PWCNetnew.PWCNet.size", "PWCNetnew.PWCNet.size", "PWCNetnew.PWCNet.size", "PWCNetnew.PWCNet.size", "PWCNetnew.PWCNet.moduleUpflow", "PWCNetnew.PWCNet.moduleUpfeat", "torch.nn.functional.leaky_relu", "torch.cat", "PWCNetnew.PWCNet.moduleOne", "PWCNetnew.PWCNet.moduleTwo", "PWCNetnew.PWCNet.moduleThr", "PWCNetnew.PWCNet.moduleFou", "PWCNetnew.PWCNet.moduleFiv", "torch.linspace().view", "torch.linspace().view", "str", "torch.cat", "str", "PWCNetnew.PWCNet.size", "PWCNetnew.PWCNet.size", "PWCNetnew.PWCNet.size", "utils.correlation.FunctionCorrelation", "PWCNetnew.PWCNet.size", "PWCNetnew.PWCNet.size", "PWCNetnew.PWCNet.size", "PWCNetnew.PWCNet.size", "str", "utils.correlation.FunctionCorrelation", "torch.linspace", "torch.linspace", "torch.cat.size", "torch.cat.size", "PWCNetnew.PWCNet.size", "PWCNetnew.PWCNet.size", "PWCNetnew.PWCNet.size", "PWCNetnew.PWCNet.Backward", "str", "PWCNetnew.PWCNet.size"], "methods", ["home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.data.dataloader_4frame.Video.__init__", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.data.dataloader_4frame.Video.__init__", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.data.dataloader_4frame.Video.__init__", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.data.dataloader_4frame.Video.__init__", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.inter_models.correlation.FunctionCorrelation", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.inter_models.correlation.FunctionCorrelation"], ["\t", "def", "__init__", "(", "self", ")", ":", "\n", "\t\t", "super", "(", "PWCNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "class", "Extractor", "(", "torch", ".", "nn", ".", "Module", ")", ":", "\n", "\t\t\t", "def", "__init__", "(", "self", ")", ":", "\n", "\t\t\t\t", "super", "(", "Extractor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "moduleOne", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "in_channels", "=", "3", ",", "out_channels", "=", "16", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "torch", ".", "nn", ".", "LeakyReLU", "(", "inplace", "=", "False", ",", "negative_slope", "=", "0.1", ")", ",", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "in_channels", "=", "16", ",", "out_channels", "=", "16", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "torch", ".", "nn", ".", "LeakyReLU", "(", "inplace", "=", "False", ",", "negative_slope", "=", "0.1", ")", ",", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "in_channels", "=", "16", ",", "out_channels", "=", "16", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "torch", ".", "nn", ".", "LeakyReLU", "(", "inplace", "=", "False", ",", "negative_slope", "=", "0.1", ")", "\n", ")", "\n", "\n", "self", ".", "moduleTwo", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "in_channels", "=", "16", ",", "out_channels", "=", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "torch", ".", "nn", ".", "LeakyReLU", "(", "inplace", "=", "False", ",", "negative_slope", "=", "0.1", ")", ",", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "in_channels", "=", "32", ",", "out_channels", "=", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "torch", ".", "nn", ".", "LeakyReLU", "(", "inplace", "=", "False", ",", "negative_slope", "=", "0.1", ")", ",", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "in_channels", "=", "32", ",", "out_channels", "=", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "torch", ".", "nn", ".", "LeakyReLU", "(", "inplace", "=", "False", ",", "negative_slope", "=", "0.1", ")", "\n", ")", "\n", "\n", "self", ".", "moduleThr", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "in_channels", "=", "32", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "torch", ".", "nn", ".", "LeakyReLU", "(", "inplace", "=", "False", ",", "negative_slope", "=", "0.1", ")", ",", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "torch", ".", "nn", ".", "LeakyReLU", "(", "inplace", "=", "False", ",", "negative_slope", "=", "0.1", ")", ",", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "torch", ".", "nn", ".", "LeakyReLU", "(", "inplace", "=", "False", ",", "negative_slope", "=", "0.1", ")", "\n", ")", "\n", "\n", "self", ".", "moduleFou", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "96", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "torch", ".", "nn", ".", "LeakyReLU", "(", "inplace", "=", "False", ",", "negative_slope", "=", "0.1", ")", ",", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "in_channels", "=", "96", ",", "out_channels", "=", "96", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "torch", ".", "nn", ".", "LeakyReLU", "(", "inplace", "=", "False", ",", "negative_slope", "=", "0.1", ")", ",", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "in_channels", "=", "96", ",", "out_channels", "=", "96", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "torch", ".", "nn", ".", "LeakyReLU", "(", "inplace", "=", "False", ",", "negative_slope", "=", "0.1", ")", "\n", ")", "\n", "\n", "self", ".", "moduleFiv", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "in_channels", "=", "96", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "torch", ".", "nn", ".", "LeakyReLU", "(", "inplace", "=", "False", ",", "negative_slope", "=", "0.1", ")", ",", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "torch", ".", "nn", ".", "LeakyReLU", "(", "inplace", "=", "False", ",", "negative_slope", "=", "0.1", ")", ",", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "torch", ".", "nn", ".", "LeakyReLU", "(", "inplace", "=", "False", ",", "negative_slope", "=", "0.1", ")", "\n", ")", "\n", "\n", "self", ".", "moduleSix", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "196", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "torch", ".", "nn", ".", "LeakyReLU", "(", "inplace", "=", "False", ",", "negative_slope", "=", "0.1", ")", ",", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "in_channels", "=", "196", ",", "out_channels", "=", "196", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "torch", ".", "nn", ".", "LeakyReLU", "(", "inplace", "=", "False", ",", "negative_slope", "=", "0.1", ")", ",", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "in_channels", "=", "196", ",", "out_channels", "=", "196", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "torch", ".", "nn", ".", "LeakyReLU", "(", "inplace", "=", "False", ",", "negative_slope", "=", "0.1", ")", "\n", ")", "\n", "# end", "\n", "\n", "\n", "\n", "", "def", "forward", "(", "self", ",", "tensorInput", ")", ":", "\n", "\n", "\n", "\t\t\t\t", "tensorOne", "=", "self", ".", "moduleOne", "(", "tensorInput", ")", "\n", "tensorTwo", "=", "self", ".", "moduleTwo", "(", "tensorOne", ")", "\n", "tensorThr", "=", "self", ".", "moduleThr", "(", "tensorTwo", ")", "\n", "tensorFou", "=", "self", ".", "moduleFou", "(", "tensorThr", ")", "\n", "tensorFiv", "=", "self", ".", "moduleFiv", "(", "tensorFou", ")", "\n", "tensorSix", "=", "self", ".", "moduleSix", "(", "tensorFiv", ")", "\n", "\n", "return", "[", "tensorOne", ",", "tensorTwo", ",", "tensorThr", ",", "tensorFou", ",", "tensorFiv", ",", "tensorSix", "]", "\n", "# end", "\n", "# end", "\n", "\n", "", "", "class", "Decoder", "(", "torch", ".", "nn", ".", "Module", ")", ":", "\n", "\t\t\t", "def", "__init__", "(", "self", ",", "intLevel", ")", ":", "\n", "\t\t\t\t", "super", "(", "Decoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "intPrevious", "=", "[", "None", ",", "None", ",", "81", "+", "32", "+", "2", "+", "2", ",", "81", "+", "64", "+", "2", "+", "2", ",", "81", "+", "96", "+", "2", "+", "2", ",", "81", "+", "128", "+", "2", "+", "2", ",", "81", ",", "None", "]", "[", "intLevel", "+", "1", "]", "\n", "intCurrent", "=", "[", "None", ",", "None", ",", "81", "+", "32", "+", "2", "+", "2", ",", "81", "+", "64", "+", "2", "+", "2", ",", "81", "+", "96", "+", "2", "+", "2", ",", "81", "+", "128", "+", "2", "+", "2", ",", "81", ",", "None", "]", "[", "intLevel", "+", "0", "]", "\n", "\n", "if", "intLevel", "<", "6", ":", "self", ".", "moduleUpflow", "=", "torch", ".", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "2", ",", "out_channels", "=", "2", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "if", "intLevel", "<", "6", ":", "self", ".", "moduleUpfeat", "=", "torch", ".", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "intPrevious", "+", "128", "+", "128", "+", "96", "+", "64", "+", "32", ",", "out_channels", "=", "2", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "if", "intLevel", "<", "6", ":", "self", ".", "dblBackward", "=", "[", "None", ",", "None", ",", "None", ",", "5.0", ",", "2.5", ",", "1.25", ",", "0.625", ",", "None", "]", "[", "intLevel", "+", "1", "]", "\n", "\n", "self", ".", "moduleOne", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "in_channels", "=", "intCurrent", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "torch", ".", "nn", ".", "LeakyReLU", "(", "inplace", "=", "False", ",", "negative_slope", "=", "0.1", ")", "\n", ")", "\n", "\n", "self", ".", "moduleTwo", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "in_channels", "=", "intCurrent", "+", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "torch", ".", "nn", ".", "LeakyReLU", "(", "inplace", "=", "False", ",", "negative_slope", "=", "0.1", ")", "\n", ")", "\n", "\n", "self", ".", "moduleThr", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "in_channels", "=", "intCurrent", "+", "128", "+", "128", ",", "out_channels", "=", "96", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "torch", ".", "nn", ".", "LeakyReLU", "(", "inplace", "=", "False", ",", "negative_slope", "=", "0.1", ")", "\n", ")", "\n", "\n", "self", ".", "moduleFou", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "in_channels", "=", "intCurrent", "+", "128", "+", "128", "+", "96", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "torch", ".", "nn", ".", "LeakyReLU", "(", "inplace", "=", "False", ",", "negative_slope", "=", "0.1", ")", "\n", ")", "\n", "\n", "self", ".", "moduleFiv", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "in_channels", "=", "intCurrent", "+", "128", "+", "128", "+", "96", "+", "64", ",", "out_channels", "=", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "torch", ".", "nn", ".", "LeakyReLU", "(", "inplace", "=", "False", ",", "negative_slope", "=", "0.1", ")", "\n", ")", "\n", "\n", "self", ".", "moduleSix", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "in_channels", "=", "intCurrent", "+", "128", "+", "128", "+", "96", "+", "64", "+", "32", ",", "out_channels", "=", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", ")", "\n", "# end", "\n", "\n", "", "def", "Backward", "(", "self", ",", "tensorInput", ",", "tensorFlow", ",", "Backward_tensorGrid", ",", "Backward_tensorPartial", ")", ":", "\n", "\t\t\t\t", "if", "str", "(", "tensorFlow", ".", "size", "(", ")", ")", "not", "in", "Backward_tensorGrid", ":", "\n", "\t\t\t\t\t", "tensorHorizontal", "=", "torch", ".", "linspace", "(", "-", "1.0", ",", "1.0", ",", "tensorFlow", ".", "size", "(", "3", ")", ")", ".", "view", "(", "1", ",", "1", ",", "1", ",", "tensorFlow", ".", "size", "(", "3", ")", ")", ".", "expand", "(", "tensorFlow", ".", "size", "(", "0", ")", ",", "-", "1", ",", "tensorFlow", ".", "size", "(", "2", ")", ",", "-", "1", ")", "\n", "tensorVertical", "=", "torch", ".", "linspace", "(", "-", "1.0", ",", "1.0", ",", "tensorFlow", ".", "size", "(", "2", ")", ")", ".", "view", "(", "1", ",", "1", ",", "tensorFlow", ".", "size", "(", "2", ")", ",", "1", ")", ".", "expand", "(", "tensorFlow", ".", "size", "(", "0", ")", ",", "-", "1", ",", "-", "1", ",", "tensorFlow", ".", "size", "(", "3", ")", ")", "\n", "\n", "Backward_tensorGrid", "[", "str", "(", "tensorFlow", ".", "size", "(", ")", ")", "]", "=", "torch", ".", "cat", "(", "[", "tensorHorizontal", ",", "tensorVertical", "]", ",", "1", ")", ".", "cuda", "(", ")", "\n", "# end", "\n", "\n", "", "if", "str", "(", "tensorFlow", ".", "size", "(", ")", ")", "not", "in", "Backward_tensorPartial", ":", "\n", "\t\t\t\t\t", "Backward_tensorPartial", "[", "str", "(", "tensorFlow", ".", "size", "(", ")", ")", "]", "=", "tensorFlow", ".", "new_ones", "(", "[", "tensorFlow", ".", "size", "(", "0", ")", ",", "1", ",", "tensorFlow", ".", "size", "(", "2", ")", ",", "tensorFlow", ".", "size", "(", "3", ")", "]", ")", "\n", "# end", "\n", "\n", "", "tensorFlow", "=", "torch", ".", "cat", "(", "[", "tensorFlow", "[", ":", ",", "0", ":", "1", ",", ":", ",", ":", "]", "/", "(", "(", "tensorInput", ".", "size", "(", "3", ")", "-", "1.0", ")", "/", "2.0", ")", ",", "tensorFlow", "[", ":", ",", "1", ":", "2", ",", ":", ",", ":", "]", "/", "(", "(", "tensorInput", ".", "size", "(", "2", ")", "-", "1.0", ")", "/", "2.0", ")", "]", ",", "1", ")", "\n", "tensorInput", "=", "torch", ".", "cat", "(", "[", "tensorInput", ",", "Backward_tensorPartial", "[", "str", "(", "tensorFlow", ".", "size", "(", ")", ")", "]", "]", ",", "1", ")", "\n", "\n", "tensorOutput", "=", "torch", ".", "nn", ".", "functional", ".", "grid_sample", "(", "input", "=", "tensorInput", ",", "grid", "=", "(", "Backward_tensorGrid", "[", "str", "(", "tensorFlow", ".", "size", "(", ")", ")", "]", "+", "tensorFlow", ")", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ",", "mode", "=", "'bilinear'", ",", "padding_mode", "=", "'zeros'", ")", "\n", "\n", "tensorMask", "=", "tensorOutput", "[", ":", ",", "-", "1", ":", ",", ":", ",", ":", "]", ";", "tensorMask", "[", "tensorMask", ">", "0.999", "]", "=", "1.0", ";", "tensorMask", "[", "tensorMask", "<", "1.0", "]", "=", "0.0", "\n", "\n", "return", "tensorOutput", "[", ":", ",", ":", "-", "1", ",", ":", ",", ":", "]", "*", "tensorMask", "\n", "\n", "", "def", "forward", "(", "self", ",", "tensorFirst", ",", "tensorSecond", ",", "objectPrevious", ",", "Backward_tensorGrid", ",", "Backward_tensorPartial", ")", ":", "\n", "\t\t\t\t", "tensorFlow", "=", "None", "\n", "tensorFeat", "=", "None", "\n", "\n", "if", "objectPrevious", "is", "None", ":", "\n", "\t\t\t\t\t", "tensorFlow", "=", "None", "\n", "tensorFeat", "=", "None", "\n", "\n", "tensorVolume", "=", "torch", ".", "nn", ".", "functional", ".", "leaky_relu", "(", "input", "=", "correlation", ".", "FunctionCorrelation", "(", "tensorFirst", "=", "tensorFirst", ",", "tensorSecond", "=", "tensorSecond", ")", ",", "negative_slope", "=", "0.1", ",", "inplace", "=", "False", ")", "\n", "\n", "tensorFeat", "=", "torch", ".", "cat", "(", "[", "tensorVolume", "]", ",", "1", ")", "\n", "\n", "", "elif", "objectPrevious", "is", "not", "None", ":", "\n", "\t\t\t\t\t", "tensorFlow", "=", "self", ".", "moduleUpflow", "(", "objectPrevious", "[", "'tensorFlow'", "]", ")", "\n", "tensorFeat", "=", "self", ".", "moduleUpfeat", "(", "objectPrevious", "[", "'tensorFeat'", "]", ")", "\n", "\n", "tensorVolume", "=", "torch", ".", "nn", ".", "functional", ".", "leaky_relu", "(", "input", "=", "correlation", ".", "FunctionCorrelation", "(", "tensorFirst", "=", "tensorFirst", ",", "tensorSecond", "=", "self", ".", "Backward", "(", "tensorSecond", ",", "tensorFlow", "*", "self", ".", "dblBackward", ",", "Backward_tensorGrid", ",", "Backward_tensorPartial", ")", ")", ",", "negative_slope", "=", "0.1", ",", "inplace", "=", "False", ")", "\n", "\n", "tensorFeat", "=", "torch", ".", "cat", "(", "[", "tensorVolume", ",", "tensorFirst", ",", "tensorFlow", ",", "tensorFeat", "]", ",", "1", ")", "\n", "\n", "# end", "\n", "\n", "", "tensorFeat", "=", "torch", ".", "cat", "(", "[", "self", ".", "moduleOne", "(", "tensorFeat", ")", ",", "tensorFeat", "]", ",", "1", ")", "\n", "tensorFeat", "=", "torch", ".", "cat", "(", "[", "self", ".", "moduleTwo", "(", "tensorFeat", ")", ",", "tensorFeat", "]", ",", "1", ")", "\n", "tensorFeat", "=", "torch", ".", "cat", "(", "[", "self", ".", "moduleThr", "(", "tensorFeat", ")", ",", "tensorFeat", "]", ",", "1", ")", "\n", "tensorFeat", "=", "torch", ".", "cat", "(", "[", "self", ".", "moduleFou", "(", "tensorFeat", ")", ",", "tensorFeat", "]", ",", "1", ")", "\n", "tensorFeat", "=", "torch", ".", "cat", "(", "[", "self", ".", "moduleFiv", "(", "tensorFeat", ")", ",", "tensorFeat", "]", ",", "1", ")", "\n", "\n", "tensorFlow", "=", "self", ".", "moduleSix", "(", "tensorFeat", ")", "\n", "\n", "return", "{", "\n", "'tensorFlow'", ":", "tensorFlow", ",", "\n", "'tensorFeat'", ":", "tensorFeat", "\n", "}", "\n", "# end", "\n", "# end", "\n", "\n", "", "", "class", "Refiner", "(", "torch", ".", "nn", ".", "Module", ")", ":", "\n", "\t\t\t", "def", "__init__", "(", "self", ")", ":", "\n", "\t\t\t\t", "super", "(", "Refiner", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "moduleMain", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "in_channels", "=", "81", "+", "32", "+", "2", "+", "2", "+", "128", "+", "128", "+", "96", "+", "64", "+", "32", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "dilation", "=", "1", ")", ",", "\n", "torch", ".", "nn", ".", "LeakyReLU", "(", "inplace", "=", "False", ",", "negative_slope", "=", "0.1", ")", ",", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "2", ",", "dilation", "=", "2", ")", ",", "\n", "torch", ".", "nn", ".", "LeakyReLU", "(", "inplace", "=", "False", ",", "negative_slope", "=", "0.1", ")", ",", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "4", ",", "dilation", "=", "4", ")", ",", "\n", "torch", ".", "nn", ".", "LeakyReLU", "(", "inplace", "=", "False", ",", "negative_slope", "=", "0.1", ")", ",", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "96", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "8", ",", "dilation", "=", "8", ")", ",", "\n", "torch", ".", "nn", ".", "LeakyReLU", "(", "inplace", "=", "False", ",", "negative_slope", "=", "0.1", ")", ",", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "in_channels", "=", "96", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "16", ",", "dilation", "=", "16", ")", ",", "\n", "torch", ".", "nn", ".", "LeakyReLU", "(", "inplace", "=", "False", ",", "negative_slope", "=", "0.1", ")", ",", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "dilation", "=", "1", ")", ",", "\n", "torch", ".", "nn", ".", "LeakyReLU", "(", "inplace", "=", "False", ",", "negative_slope", "=", "0.1", ")", ",", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "in_channels", "=", "32", ",", "out_channels", "=", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "dilation", "=", "1", ")", "\n", ")", "\n", "# end", "\n", "\n", "", "def", "forward", "(", "self", ",", "tensorInput", ")", ":", "\n", "\t\t\t\t", "return", "self", ".", "moduleMain", "(", "tensorInput", ")", "\n", "# end", "\n", "# end", "\n", "\n", "", "", "self", ".", "moduleExtractor", "=", "Extractor", "(", ")", "\n", "\n", "self", ".", "moduleTwo", "=", "Decoder", "(", "2", ")", "\n", "self", ".", "moduleThr", "=", "Decoder", "(", "3", ")", "\n", "self", ".", "moduleFou", "=", "Decoder", "(", "4", ")", "\n", "self", ".", "moduleFiv", "=", "Decoder", "(", "5", ")", "\n", "self", ".", "moduleSix", "=", "Decoder", "(", "6", ")", "\n", "\n", "self", ".", "moduleRefiner", "=", "Refiner", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.PWCNetnew.PWCNet.forward": [[229, 254], ["tensorFirst.size", "tensorFirst.size", "int", "int", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "math.floor", "math.floor", "torch.nn.functional.interpolate", "float", "float", "float", "float", "math.ceil", "math.ceil", "PWCNetnew.PWCNet.forward_pre"], "methods", ["home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.inter_models.PWCNetnew.PWCNet.forward_pre"], ["", "def", "forward", "(", "self", ",", "tensorFirst", ",", "tensorSecond", ")", ":", "\n", "# assert(tensorFirst.size(1) == tensorSecond.size(1))", "\n", "# assert(tensorFirst.size(2) == tensorSecond.size(2))", "\n", "# import ipdb; ipdb.set_trace()", "\n", "\t\t", "intWidth", "=", "tensorFirst", ".", "size", "(", "3", ")", "\n", "intHeight", "=", "tensorFirst", ".", "size", "(", "2", ")", "\n", "\n", "# assert(intWidth == 1024) # remember that there is no guarantee for correctness, comment this line out if you acknowledge this and want to continue", "\n", "# assert(intHeight == 436) # remember that there is no guarantee for correctness, comment this line out if you acknowledge this and want to continue", "\n", "\n", "tensorPreprocessedFirst", "=", "tensorFirst", "\n", "tensorPreprocessedSecond", "=", "tensorSecond", "\n", "\n", "intPreprocessedWidth", "=", "int", "(", "math", ".", "floor", "(", "math", ".", "ceil", "(", "intWidth", "/", "64.0", ")", "*", "64.0", ")", ")", "\n", "intPreprocessedHeight", "=", "int", "(", "math", ".", "floor", "(", "math", ".", "ceil", "(", "intHeight", "/", "64.0", ")", "*", "64.0", ")", ")", "\n", "\n", "tensorPreprocessedFirst", "=", "torch", ".", "nn", ".", "functional", ".", "interpolate", "(", "input", "=", "tensorPreprocessedFirst", ",", "size", "=", "(", "intPreprocessedHeight", ",", "intPreprocessedWidth", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "tensorPreprocessedSecond", "=", "torch", ".", "nn", ".", "functional", ".", "interpolate", "(", "input", "=", "tensorPreprocessedSecond", ",", "size", "=", "(", "intPreprocessedHeight", ",", "intPreprocessedWidth", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "\n", "tensorFlow", "=", "20.0", "*", "torch", ".", "nn", ".", "functional", ".", "interpolate", "(", "input", "=", "self", ".", "forward_pre", "(", "tensorPreprocessedFirst", ",", "tensorPreprocessedSecond", ")", ",", "size", "=", "(", "intHeight", ",", "intWidth", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "\n", "tensorFlow", "[", ":", ",", "0", ",", ":", ",", ":", "]", "*=", "float", "(", "intWidth", ")", "/", "float", "(", "intPreprocessedWidth", ")", "\n", "tensorFlow", "[", ":", ",", "1", ",", ":", ",", ":", "]", "*=", "float", "(", "intHeight", ")", "/", "float", "(", "intPreprocessedHeight", ")", "\n", "\n", "return", "tensorFlow", "\n", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.PWCNetnew.PWCNet.forward_pre": [[255, 270], ["PWCNetnew.PWCNet.moduleExtractor", "PWCNetnew.PWCNet.moduleExtractor", "PWCNetnew.PWCNet.moduleSix", "PWCNetnew.PWCNet.moduleFiv", "PWCNetnew.PWCNet.moduleFou", "PWCNetnew.PWCNet.moduleThr", "PWCNetnew.PWCNet.moduleTwo", "PWCNetnew.PWCNet.moduleRefiner"], "methods", ["None"], ["", "def", "forward_pre", "(", "self", ",", "tensorFirst", ",", "tensorSecond", ")", ":", "\n", "\n", "\t\t", "Backward_tensorGrid", "=", "{", "}", "\n", "Backward_tensorPartial", "=", "{", "}", "\n", "\n", "tensorFirst", "=", "self", ".", "moduleExtractor", "(", "tensorFirst", ")", "\n", "tensorSecond", "=", "self", ".", "moduleExtractor", "(", "tensorSecond", ")", "\n", "\n", "objectEstimate", "=", "self", ".", "moduleSix", "(", "tensorFirst", "[", "-", "1", "]", ",", "tensorSecond", "[", "-", "1", "]", ",", "None", ",", "Backward_tensorGrid", ",", "Backward_tensorPartial", ")", "\n", "objectEstimate", "=", "self", ".", "moduleFiv", "(", "tensorFirst", "[", "-", "2", "]", ",", "tensorSecond", "[", "-", "2", "]", ",", "objectEstimate", ",", "Backward_tensorGrid", ",", "Backward_tensorPartial", ")", "\n", "objectEstimate", "=", "self", ".", "moduleFou", "(", "tensorFirst", "[", "-", "3", "]", ",", "tensorSecond", "[", "-", "3", "]", ",", "objectEstimate", ",", "Backward_tensorGrid", ",", "Backward_tensorPartial", ")", "\n", "objectEstimate", "=", "self", ".", "moduleThr", "(", "tensorFirst", "[", "-", "4", "]", ",", "tensorSecond", "[", "-", "4", "]", ",", "objectEstimate", ",", "Backward_tensorGrid", ",", "Backward_tensorPartial", ")", "\n", "objectEstimate", "=", "self", ".", "moduleTwo", "(", "tensorFirst", "[", "-", "5", "]", ",", "tensorSecond", "[", "-", "5", "]", ",", "objectEstimate", ",", "Backward_tensorGrid", ",", "Backward_tensorPartial", ")", "\n", "\n", "return", "objectEstimate", "[", "'tensorFlow'", "]", "+", "self", ".", "moduleRefiner", "(", "objectEstimate", "[", "'tensorFeat'", "]", ")", "\n", "# end", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.__init__": [[13, 34], ["PWCNetnew.PWCNet", "base_model.SEframeNet.flow_net.load_state_dict", "base_model.SEframeNet.flow_net.to", "networks.RDN_residual_deblur", "base_model.SEframeNet.SE_deblur_net.to", "torch.L1Loss", "torch.L1Loss", "torch.L1Loss", "torch.L1Loss", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "base_model.SEframeNet.SE_deblur_net.parameters", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam"], "methods", ["home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "opt", "=", "args", "\n", "if", "args", ".", "gpu", ":", "\n", "            ", "self", ".", "device", "=", "torch", ".", "device", "(", "'cuda:{}'", ".", "format", "(", "args", ".", "gpu", "[", "0", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "\n", "### initial model", "\n", "", "self", ".", "flow_net", "=", "PWCNet", "(", ")", "\n", "# import ipdb; ipdb.set_trace()", "\n", "self", ".", "flow_net", ".", "load_state_dict", "(", "torch", ".", "load", "(", "args", ".", "pwc_path", ")", ")", "\n", "self", ".", "flow_net", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "SE_deblur_net", "=", "RDN_residual_deblur", "(", ")", "\n", "self", ".", "SE_deblur_net", ".", "to", "(", "self", ".", "device", ")", "\n", "###Loss and Optimizer", "\n", "self", ".", "L1_loss", "=", "nn", ".", "L1Loss", "(", ")", "\n", "self", ".", "L2_loss", "=", "nn", ".", "MSELoss", "(", ")", "\n", "\n", "params", "=", "self", ".", "SE_deblur_net", ".", "parameters", "(", ")", "\n", "if", "args", ".", "train", ":", "\n", "            ", "self", ".", "optimizer", "=", "optim", ".", "Adam", "(", "params", ",", "lr", "=", "args", ".", "lr", ",", "betas", "=", "(", "0.9", ",", "0.999", ")", ")", "\n", "# self.scheduler = optim.lr_scheduler.StepLR(self.optimizer, step_size=5, gamma=0.9,last_epoch=args.start_epoch)", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.set_input": [[37, 46], ["batch_data[].to", "batch_data[].to", "batch_data[].to", "batch_data[].to", "batch_data[].to", "batch_data[].to"], "methods", ["None"], ["", "", "def", "set_input", "(", "self", ",", "batch_data", ")", ":", "\n", "        ", "self", ".", "input_B1", "=", "batch_data", "[", "'B1'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "input_B2", "=", "batch_data", "[", "'B2'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "input_B1_S", "=", "batch_data", "[", "'B1_S'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "input_B1_E", "=", "batch_data", "[", "'B1_E'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "input_B2_S", "=", "batch_data", "[", "'B2_S'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "input_B2_E", "=", "batch_data", "[", "'B2_E'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "B1_path", "=", "batch_data", "[", "'B1_path'", "]", "\n", "self", ".", "B2_path", "=", "batch_data", "[", "'B2_path'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.forward": [[47, 61], ["base_model.SEframeNet.flow_net", "base_model.SEframeNet.SE_deblur_net", "base_model.SEframeNet.L1_loss", "base_model.SEframeNet.L1_loss", "base_model.SEframeNet.L1_loss", "base_model.SEframeNet.L1_loss"], "methods", ["None"], ["", "def", "forward", "(", "self", ")", ":", "\n", "# calculate flow ", "\n", "        ", "flow_1_2", "=", "self", ".", "flow_net", "(", "self", ".", "input_B1", ",", "self", ".", "input_B2", ")", "\n", "# get estimated start end frame", "\n", "out_B1_S", ",", "out_B1_E", ",", "out_B2_S", ",", "out_B2_E", "=", "self", ".", "SE_deblur_net", "(", "self", ".", "input_B1", ",", "self", ".", "input_B2", ",", "flow_1_2", ")", "\n", "\n", "\n", "# loss ", "\n", "loss_B1_S", "=", "self", ".", "L1_loss", "(", "self", ".", "input_B1_S", ",", "out_B1_S", ")", "\n", "loss_B1_E", "=", "self", ".", "L1_loss", "(", "self", ".", "input_B1_E", ",", "out_B1_E", ")", "\n", "loss_B2_S", "=", "self", ".", "L1_loss", "(", "self", ".", "input_B2_S", ",", "out_B2_S", ")", "\n", "loss_B2_E", "=", "self", ".", "L1_loss", "(", "self", ".", "input_B2_E", ",", "out_B2_E", ")", "\n", "self", ".", "output", "=", "{", "'B1_S'", ":", "out_B1_S", ",", "'B1_E'", ":", "out_B1_E", ",", "'B2_S'", ":", "out_B2_S", ",", "'B2_E'", ":", "out_B2_E", "}", "\n", "self", ".", "tot_loss", "=", "loss_B1_E", "+", "loss_B1_S", "+", "loss_B2_S", "+", "loss_B2_E", "\n", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.optimize": [[62, 67], ["base_model.SEframeNet.forward", "base_model.SEframeNet.optimizer.zero_grad", "base_model.SEframeNet.tot_loss.backward", "base_model.SEframeNet.optimizer.step"], "methods", ["home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.inter_models.correlation.ModuleCorrelation.forward", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.inter_models.correlation._FunctionCorrelation.backward"], ["", "def", "optimize", "(", "self", ")", ":", "\n", "        ", "self", ".", "forward", "(", ")", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "self", ".", "tot_loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.get_loss": [[68, 71], ["collections.OrderedDict", "base_model.SEframeNet.tot_loss.item"], "methods", ["None"], ["", "def", "get_loss", "(", "self", ")", ":", "\n", "\n", "        ", "return", "OrderedDict", "(", "[", "(", "'total_loss'", ",", "self", ".", "tot_loss", ".", "item", "(", ")", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.test": [[72, 90], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "base_model.SEframeNet.flow_net", "base_model.SEframeNet.SE_deblur_net", "base_model.SEframeNet.L2_loss", "base_model.SEframeNet.L2_loss", "base_model.SEframeNet.L2_loss", "base_model.SEframeNet.L2_loss", "numpy.log10", "numpy.log10", "numpy.log10", "numpy.log10", "base_model.SEframeNet.item", "base_model.SEframeNet.item", "base_model.SEframeNet.item", "base_model.SEframeNet.item"], "methods", ["None"], ["", "def", "test", "(", "self", ",", "validation", "=", "False", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "flow_1_2", "=", "self", ".", "flow_net", "(", "self", ".", "input_B1", ",", "self", ".", "input_B2", ")", "\n", "# get estimated start end frame", "\n", "out_B1_S", ",", "out_B1_E", ",", "out_B2_S", ",", "out_B2_E", "=", "self", ".", "SE_deblur_net", "(", "self", ".", "input_B1", ",", "self", ".", "input_B2", ",", "flow_1_2", ")", "\n", "self", ".", "output", "=", "{", "'B1_S'", ":", "out_B1_S", ",", "'B1_E'", ":", "out_B1_E", ",", "'B2_S'", ":", "out_B2_S", ",", "'B2_E'", ":", "out_B2_E", "}", "\n", "# calculate PSNR", "\n", "", "if", "validation", ":", "\n", "            ", "psnr", "=", "0", "\n", "MSE", "=", "self", ".", "L2_loss", "(", "self", ".", "input_B1_S", ",", "out_B1_S", ")", "\n", "psnr", "+=", "10", "*", "np", ".", "log10", "(", "1", "/", "MSE", ".", "item", "(", ")", ")", "\n", "MSE", "=", "self", ".", "L2_loss", "(", "self", ".", "input_B1_S", ",", "out_B1_S", ")", "\n", "psnr", "+=", "10", "*", "np", ".", "log10", "(", "1", "/", "MSE", ".", "item", "(", ")", ")", "\n", "MSE", "+=", "self", ".", "L2_loss", "(", "self", ".", "input_B1_S", ",", "out_B1_S", ")", "\n", "psnr", "+=", "10", "*", "np", ".", "log10", "(", "1", "/", "MSE", ".", "item", "(", ")", ")", "\n", "MSE", "+=", "self", ".", "L2_loss", "(", "self", ".", "input_B1_S", ",", "out_B1_S", ")", "\n", "psnr", "+=", "10", "*", "np", ".", "log10", "(", "1", "/", "MSE", ".", "item", "(", ")", ")", "\n", "return", "psnr", "/", "4", "\n", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save": [[92, 101], ["len", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "base_model.SEframeNet.SE_deblur_net.to", "base_model.SEframeNet.SE_deblur_net.cpu().module.state_dict", "base_model.SEframeNet.SE_deblur_net.cpu().state_dict", "base_model.SEframeNet.SE_deblur_net.cpu", "base_model.SEframeNet.SE_deblur_net.cpu"], "methods", ["home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.save"], ["", "", "def", "save", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "save_filename", "=", "'SEframe_net_%s.pth'", "%", "epoch", "\n", "save_path", "=", "self", ".", "opt", ".", "checkpoints", "+", "'/'", "+", "self", ".", "opt", ".", "model_name", "+", "'/'", "+", "save_filename", "\n", "if", "len", "(", "self", ".", "opt", ".", "gpu", ")", ">", "1", ":", "\n", "            ", "torch", ".", "save", "(", "self", ".", "SE_deblur_net", ".", "cpu", "(", ")", ".", "module", ".", "state_dict", "(", ")", ",", "save_path", ")", "\n", "", "else", ":", "\n", "            ", "torch", ".", "save", "(", "self", ".", "SE_deblur_net", ".", "cpu", "(", ")", ".", "state_dict", "(", ")", ",", "save_path", ")", "\n", "", "if", "self", ".", "opt", ".", "gpu", ":", "\n", "            ", "self", ".", "SE_deblur_net", ".", "to", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load": [[102, 107], ["os.path.join", "base_model.SEframeNet.SE_deblur_net.load_state_dict", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load"], "methods", ["home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load"], ["", "", "def", "load", "(", "self", ",", "args", ")", ":", "\n", "        ", "load_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "checkpoints", ",", "args", ".", "model_name", ")", "\n", "load_file", "=", "load_path", "+", "'/'", "+", "'SEframe_net_%s.pth'", "%", "args", ".", "which_epoch", "\n", "self", ".", "SE_deblur_net", ".", "load_state_dict", "(", "torch", ".", "load", "(", "load_file", ")", ")", "\n", "print", "(", "'--------load model %s success!-------'", "%", "load_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.schedule_lr": [[109, 116], ["base_model.SEframeNet.get_current_lr_from_epoch"], "methods", ["home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.get_current_lr_from_epoch"], ["", "def", "schedule_lr", "(", "self", ",", "epoch", ")", ":", "\n", "# scheduler", "\n", "# print(\"current learning rate:%.7f\"%self.scheduler.get_lr())", "\n", "# self.scheduler.step()", "\n", "\n", "        ", "lr", "=", "self", ".", "opt", ".", "lr", "\n", "self", ".", "get_current_lr_from_epoch", "(", "lr", ",", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.get_current_lr_from_epoch": [[117, 125], ["print"], "methods", ["None"], ["", "def", "get_current_lr_from_epoch", "(", "self", ",", "lr", ",", "epoch", ")", ":", "\n", "        ", "decrease_step", "=", "5", "\n", "current_lr", "=", "lr", "*", "(", "0.9", "**", "(", "epoch", "//", "decrease_step", ")", ")", "\n", "if", "epoch", ">", "200", ":", "\n", "            ", "current_lr", "=", "0.000001", "\n", "", "for", "param_group", "in", "self", ".", "optimizer", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "current_lr", "\n", "", "print", "(", "\"current learning rate:%.7f\"", "%", "(", "current_lr", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.get_current_visuals": [[126, 135], ["utils.utils.utils.tensor2im", "utils.utils.utils.tensor2im", "utils.utils.utils.tensor2im", "utils.utils.utils.tensor2im", "utils.utils.utils.tensor2im", "utils.utils.utils.tensor2im", "collections.OrderedDict"], "methods", ["home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.utils.utils.tensor2im", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.utils.utils.tensor2im", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.utils.utils.tensor2im", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.utils.utils.tensor2im", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.utils.utils.tensor2im", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.utils.utils.tensor2im"], ["", "def", "get_current_visuals", "(", "self", ")", ":", "\n", "        ", "input_B1", "=", "utils", ".", "tensor2im", "(", "self", ".", "input_B1", ")", "\n", "input_B2", "=", "utils", ".", "tensor2im", "(", "self", ".", "input_B2", ")", "\n", "output_B1_S", "=", "utils", ".", "tensor2im", "(", "self", ".", "output", "[", "'B1_S'", "]", ")", "\n", "output_B1_E", "=", "utils", ".", "tensor2im", "(", "self", ".", "output", "[", "'B1_E'", "]", ")", "\n", "output_B2_S", "=", "utils", ".", "tensor2im", "(", "self", ".", "output", "[", "'B2_S'", "]", ")", "\n", "output_B2_E", "=", "utils", ".", "tensor2im", "(", "self", ".", "output", "[", "'B2_E'", "]", ")", "\n", "return", "OrderedDict", "(", "[", "(", "'B1'", ",", "input_B1", ")", ",", "(", "'B2'", ",", "input_B2", ")", ",", "(", "'B1_S'", ",", "output_B1_S", ")", ",", "\n", "(", "'B1_E'", ",", "output_B1_E", ")", ",", "(", "'B2_S'", ",", "output_B2_S", ")", ",", "(", "'B2_E'", ",", "output_B2_E", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.get_image_path": [[136, 138], ["None"], "methods", ["None"], ["", "def", "get_image_path", "(", "self", ")", ":", "\n", "        ", "return", "{", "'B1_path'", ":", "self", ".", "B1_path", ",", "'B2_path'", ":", "self", ".", "B2_path", "}", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.inter_models.UTI_model.SmallMaskNet.__init__": [[44, 49], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.data.dataloader_4frame.Video.__init__"], ["def", "__init__", "(", "self", ",", "input", ",", "output", ")", ":", "\n", "        ", "super", "(", "SmallMaskNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "input", ",", "32", ",", "5", ",", "padding", "=", "2", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "32", ",", "16", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "16", ",", "output", ",", "3", ",", "padding", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.inter_models.UTI_model.SmallMaskNet.forward": [[50, 55], ["torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "UTI_model.SmallMaskNet.conv3", "UTI_model.SmallMaskNet.conv1", "UTI_model.SmallMaskNet.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "F", ".", "leaky_relu", "(", "self", ".", "conv1", "(", "x", ")", ",", "negative_slope", "=", "0.1", ")", "\n", "x", "=", "F", ".", "leaky_relu", "(", "self", ".", "conv2", "(", "x", ")", ",", "negative_slope", "=", "0.1", ")", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.inter_models.UTI_model.UTI_esti.__init__": [[59, 65], ["torch.Module.__init__", "PWCNetnew.PWCNet", "refine_S2.RefineS2", "UTI_model.UTI_esti.refineS2.load_state_dict", "UTI_model.UTI_esti.flownet.load_state_dict", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load"], "methods", ["home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.data.dataloader_4frame.Video.__init__", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.models.base_model.SEframeNet.load"], ["def", "__init__", "(", "self", ",", "path", "=", "'./utils/network-default.pytorch'", ")", ":", "\n", "        ", "super", "(", "UTI_esti", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "flownet", "=", "PWCNet", "(", ")", "\n", "self", ".", "refineS2", "=", "RefineS2", "(", ")", "\n", "self", ".", "refineS2", ".", "load_state_dict", "(", "torch", ".", "load", "(", "'./pretrain_models/refine_net.pth'", ")", ")", "\n", "self", ".", "flownet", ".", "load_state_dict", "(", "torch", ".", "load", "(", "path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.inter_models.UTI_model.UTI_esti.forward": [[66, 99], ["UTI_model.UTI_esti.flownet().float", "UTI_model.UTI_esti.flownet().float", "UTI_model.UTI_esti.flownet().float", "UTI_model.UTI_esti.flownet().float", "UTI_model.UTI_esti.flownet().float", "UTI_model.UTI_esti.flownet().float", "UTI_model.UTI_esti.refineS2", "UTI_model.UTI_esti.refineS2", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "lambda_f.mean", "print", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "UTI_model.UTI_esti.flownet", "UTI_model.UTI_esti.flownet", "UTI_model.UTI_esti.flownet", "UTI_model.UTI_esti.flownet", "UTI_model.UTI_esti.flownet", "UTI_model.UTI_esti.flownet", "lambda_f.mean.item"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "I0", ",", "I1", ",", "I2", ",", "I3", ")", ":", "\n", "        ", "F10", "=", "self", ".", "flownet", "(", "I1", ",", "I0", ")", ".", "float", "(", ")", "\n", "F12", "=", "self", ".", "flownet", "(", "I1", ",", "I2", ")", ".", "float", "(", ")", "\n", "F21", "=", "self", ".", "flownet", "(", "I2", ",", "I1", ")", ".", "float", "(", ")", "\n", "F20", "=", "self", ".", "flownet", "(", "I2", ",", "I0", ")", ".", "float", "(", ")", "\n", "\n", "F13", "=", "self", ".", "flownet", "(", "I1", ",", "I3", ")", ".", "float", "(", ")", "\n", "F23", "=", "self", ".", "flownet", "(", "I2", ",", "I3", ")", ".", "float", "(", ")", "\n", "\n", "F1_23", "=", "F13", "-", "F12", "\n", "F2_10", "=", "F20", "-", "F21", "\n", "\n", "# refine S23", "\n", "F1_23_refine", "=", "self", ".", "refineS2", "(", "F10", ",", "F12", ",", "F1_23", ")", "\n", "F2_10_refine", "=", "self", ".", "refineS2", "(", "F23", ",", "F21", ",", "F2_10", ")", "\n", "\n", "# forward lambda t1/t0", "\n", "S1_1", "=", "torch", ".", "sqrt", "(", "F12", "[", ":", ",", "0", ",", ":", ",", ":", "]", "**", "2", "+", "F12", "[", ":", ",", "1", ",", ":", ",", ":", "]", "**", "2", ")", "\n", "F1_02", "=", "F1_23_refine", "-", "F10", "\n", "S1_02", "=", "torch", ".", "sqrt", "(", "F1_02", "[", ":", ",", "0", ",", ":", ",", ":", "]", "**", "2", "+", "F1_02", "[", ":", ",", "1", ",", ":", ",", ":", "]", "**", "2", ")", "\n", "lambda_f", "=", "2", "*", "(", "S1_1", ")", "/", "S1_02", "\n", "r_mean", "=", "lambda_f", ".", "mean", "(", ")", "\n", "print", "(", "'lambda:%.02f'", "%", "(", "r_mean", ".", "item", "(", ")", ")", ")", "\n", "\n", "# reverse lambda t1/t0", "\n", "S2_1", "=", "torch", ".", "sqrt", "(", "F21", "[", ":", ",", "0", ",", ":", ",", ":", "]", "**", "2", "+", "F21", "[", ":", ",", "1", ",", ":", ",", ":", "]", "**", "2", ")", "\n", "S2_02", "=", "F2_10_refine", "-", "F23", "\n", "S2_02", "=", "torch", ".", "sqrt", "(", "S2_02", "[", ":", ",", "0", ",", ":", ",", ":", "]", "**", "2", "+", "S2_02", "[", ":", ",", "1", ",", ":", ",", ":", "]", "**", "2", ")", "\n", "lambda_b", "=", "2", "*", "(", "S2_1", ")", "/", "S2_02", "\n", "\n", "flow", "=", "{", "'F10'", ":", "F10", ",", "'F12'", ":", "F12", ",", "'F1_23'", ":", "F1_23_refine", ",", "'F23'", ":", "F23", ",", "'F21'", ":", "F21", ",", "'F2_10'", ":", "F2_10_refine", "}", "\n", "lambda_time_interval", "=", "{", "'forward'", ":", "lambda_f", ",", "'backward'", ":", "lambda_b", "}", "\n", "return", "flow", ",", "lambda_time_interval", "\n", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.inter_models.UTI_model.UTI_interp.__init__": [[104, 112], ["torch.Module.__init__", "PWCNetnew.PWCNet", "acceleration_UTI.AcFusionLayer", "flow_reversal.FlowReversal", "UNet2.UNet2.UNet2", "UTI_model.SmallMaskNet"], "methods", ["home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.data.dataloader_4frame.Video.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "UTI_interp", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "flownet", "=", "PWCNet", "(", ")", "\n", "self", ".", "acc", "=", "Acc_UTI", "(", ")", "\n", "self", ".", "fwarp", "=", "FlowReversal", "(", ")", "\n", "self", ".", "refinenet", "=", "UNet", "(", "20", ",", "8", ")", "\n", "self", ".", "masknet", "=", "SmallMaskNet", "(", "38", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.inter_models.UTI_model.UTI_interp.forward": [[114, 153], ["UTI_model.UTI_interp.acc", "UTI_model.UTI_interp.acc", "UTI_model.UTI_interp.fwarp", "UTI_model.UTI_interp.fwarp", "UTI_model.backwarp", "UTI_model.backwarp", "UTI_model.UTI_interp.refinenet", "UTI_model.backwarp", "UTI_model.backwarp", "torch.sigmoid().repeat", "torch.sigmoid().repeat", "torch.sigmoid().repeat", "torch.sigmoid().repeat", "torch.sigmoid().repeat", "torch.sigmoid().repeat", "torch.sigmoid().repeat", "torch.sigmoid().repeat", "torch.sigmoid().repeat", "norm1[].clone", "norm2[].clone", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "UTI_model.backwarp", "UTI_model.backwarp", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "UTI_model.UTI_interp.masknet", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.inter_models.UTI_model.backwarp", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.inter_models.UTI_model.backwarp", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.inter_models.UTI_model.backwarp", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.inter_models.UTI_model.backwarp", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.inter_models.UTI_model.backwarp", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.inter_models.UTI_model.backwarp"], ["", "def", "forward", "(", "self", ",", "I1", ",", "I2", ",", "flow", ",", "lambda_t", ",", "index_t", ")", ":", "\n", "\n", "        ", "F1ta", "=", "self", ".", "acc", "(", "flow", "[", "'F10'", "]", ",", "flow", "[", "'F12'", "]", ",", "flow", "[", "'F1_23'", "]", ",", "lambda_t", "[", "'forward'", "]", ",", "index_t", ")", "\n", "F2ta", "=", "self", ".", "acc", "(", "flow", "[", "'F23'", "]", ",", "flow", "[", "'F21'", "]", ",", "flow", "[", "'F2_10'", "]", ",", "lambda_t", "[", "'backward'", "]", ",", "1", "-", "index_t", ")", "\n", "F1t", "=", "F1ta", "\n", "F2t", "=", "F2ta", "\n", "\n", "\n", "# Flow Reversal", "\n", "Ft1", ",", "norm1", "=", "self", ".", "fwarp", "(", "F1t", ",", "F1t", ")", "\n", "Ft1", "=", "-", "Ft1", "\n", "Ft2", ",", "norm2", "=", "self", ".", "fwarp", "(", "F2t", ",", "F2t", ")", "\n", "Ft2", "=", "-", "Ft2", "\n", "\n", "Ft1", "[", "norm1", ">", "0", "]", "=", "Ft1", "[", "norm1", ">", "0", "]", "/", "norm1", "[", "norm1", ">", "0", "]", ".", "clone", "(", ")", "\n", "Ft2", "[", "norm2", ">", "0", "]", "=", "Ft2", "[", "norm2", ">", "0", "]", "/", "norm2", "[", "norm2", ">", "0", "]", ".", "clone", "(", ")", "\n", "\n", "\n", "I1t", "=", "backwarp", "(", "I1", ",", "Ft1", ")", "\n", "I2t", "=", "backwarp", "(", "I2", ",", "Ft2", ")", "\n", "\n", "output", ",", "feature", "=", "self", ".", "refinenet", "(", "torch", ".", "cat", "(", "[", "I1", ",", "I2", ",", "I1t", ",", "I2t", ",", "flow", "[", "'F12'", "]", ",", "flow", "[", "'F21'", "]", ",", "Ft1", ",", "Ft2", "]", ",", "dim", "=", "1", ")", ")", "\n", "\n", "# Adaptive filtering", "\n", "Ft1r", "=", "backwarp", "(", "Ft1", ",", "10", "*", "torch", ".", "tanh", "(", "output", "[", ":", ",", "4", ":", "6", "]", ")", ")", "+", "output", "[", ":", ",", ":", "2", "]", "\n", "Ft2r", "=", "backwarp", "(", "Ft2", ",", "10", "*", "torch", ".", "tanh", "(", "output", "[", ":", ",", "6", ":", "8", "]", ")", ")", "+", "output", "[", ":", ",", "2", ":", "4", "]", "\n", "\n", "I1tf", "=", "backwarp", "(", "I1", ",", "Ft1r", ")", "\n", "I2tf", "=", "backwarp", "(", "I2", ",", "Ft2r", ")", "\n", "\n", "M", "=", "torch", ".", "sigmoid", "(", "self", ".", "masknet", "(", "torch", ".", "cat", "(", "[", "I1tf", ",", "I2tf", ",", "feature", "]", ",", "dim", "=", "1", ")", ")", ")", ".", "repeat", "(", "1", ",", "3", ",", "1", ",", "1", ")", "\n", "\n", "# # situation when t_1=1, r=1", "\n", "# It_warp = ((1-t) * M * I1tf + t * (1 - M) * I2tf) / ((1-t) * M + t * (1-M)).clone()", "\n", "# # situation when t_0 + t_1 =1", "\n", "ratio_t_t1", "=", "index_t", "\n", "It_warp", "=", "(", "(", "1", "-", "ratio_t_t1", ")", "*", "M", "*", "I1tf", "+", "ratio_t_t1", "*", "(", "1", "-", "M", ")", "*", "I2tf", ")", "/", "(", "(", "1", "-", "ratio_t_t1", ")", "*", "M", "+", "ratio_t_t1", "*", "(", "1", "-", "M", ")", ")", ".", "clone", "(", ")", "\n", "\n", "return", "It_warp", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.inter_models.UTI_model.backwarp": [[19, 40], ["img.size", "numpy.meshgrid", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.stack", "torch.stack", "torch.stack", "torch.nn.functional.grid_sample", "torch.nn.functional.grid_sample", "torch.nn.functional.grid_sample", "numpy.arange", "numpy.arange", "torch.tensor().cuda.unsqueeze().expand_as().float", "torch.tensor().cuda.unsqueeze().expand_as().float", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor().cuda.unsqueeze().expand_as", "torch.tensor().cuda.unsqueeze().expand_as", "torch.tensor().cuda.unsqueeze", "torch.tensor().cuda.unsqueeze"], "function", ["None"], ["def", "backwarp", "(", "img", ",", "flow", ")", ":", "\n", "    ", "_", ",", "_", ",", "H", ",", "W", "=", "img", ".", "size", "(", ")", "\n", "\n", "u", "=", "flow", "[", ":", ",", "0", ",", ":", ",", ":", "]", "\n", "v", "=", "flow", "[", ":", ",", "1", ",", ":", ",", ":", "]", "\n", "\n", "gridX", ",", "gridY", "=", "np", ".", "meshgrid", "(", "np", ".", "arange", "(", "W", ")", ",", "np", ".", "arange", "(", "H", ")", ")", "\n", "\n", "gridX", "=", "torch", ".", "tensor", "(", "gridX", ",", "requires_grad", "=", "False", ",", ")", ".", "cuda", "(", ")", "\n", "gridY", "=", "torch", ".", "tensor", "(", "gridY", ",", "requires_grad", "=", "False", ",", ")", ".", "cuda", "(", ")", "\n", "x", "=", "gridX", ".", "unsqueeze", "(", "0", ")", ".", "expand_as", "(", "u", ")", ".", "float", "(", ")", "+", "u", "\n", "y", "=", "gridY", ".", "unsqueeze", "(", "0", ")", ".", "expand_as", "(", "v", ")", ".", "float", "(", ")", "+", "v", "\n", "# range -1 to 1", "\n", "x", "=", "2", "*", "(", "x", "/", "W", "-", "0.5", ")", "\n", "y", "=", "2", "*", "(", "y", "/", "H", "-", "0.5", ")", "\n", "# stacking X and Y", "\n", "grid", "=", "torch", ".", "stack", "(", "(", "x", ",", "y", ")", ",", "dim", "=", "3", ")", "\n", "# Sample pixels using bilinear interpolation.", "\n", "imgOut", "=", "torch", ".", "nn", ".", "functional", ".", "grid_sample", "(", "img", ",", "grid", ")", "\n", "\n", "return", "imgOut", "\n", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.inter_models.refine_S2.RefineS2.__init__": [[16, 20], ["torch.Module.__init__", "UNet2.UNet2.UNet2"], "methods", ["home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.data.dataloader_4frame.Video.__init__"], ["def", "__init__", "(", "self", ",", "path", "=", "'./network-default.pytorch'", ")", ":", "\n", "        ", "super", "(", "RefineS2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "refinenet", "=", "UNet", "(", "6", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.inter_models.refine_S2.RefineS2.forward": [[22, 28], ["refine_S2.RefineS2.refinenet", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "S0", ",", "S1", ",", "S2", ")", ":", "\n", "\n", "# Input: S0-S2: (N, C, H, W)", "\n", "# Output: Refined S2", "\n", "        ", "S2", ",", "_", "=", "self", ".", "refinenet", "(", "torch", ".", "cat", "(", "(", "S0", ",", "S1", ",", "S2", ")", ",", "dim", "=", "1", ")", ")", "\n", "return", "S2", "", "", "", ""]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.inter_models.flow_reversal.FlowReversal.__init__": [[10, 12], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.data.dataloader_4frame.Video.__init__"], ["def", "__init__", "(", "self", ",", ")", ":", "\n", "        ", "super", "(", "FlowReversal", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.inter_models.flow_reversal.FlowReversal.forward": [[14, 64], ["img.size", "x.repeat.repeat.repeat", "y.repeat.repeat.repeat", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "flow_reversal.FlowReversal.get_gaussian_weights", "flow_reversal.FlowReversal.sample_one", "flow_reversal.FlowReversal.sample_one", "flow_reversal.FlowReversal.sample_one", "flow_reversal.FlowReversal.sample_one"], "methods", ["home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.inter_models.flow_reversal.FlowReversal.get_gaussian_weights", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.inter_models.flow_reversal.FlowReversal.sample_one", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.inter_models.flow_reversal.FlowReversal.sample_one", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.inter_models.flow_reversal.FlowReversal.sample_one", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.inter_models.flow_reversal.FlowReversal.sample_one"], ["", "def", "forward", "(", "self", ",", "img", ",", "flo", ")", ":", "\n", "        ", "\"\"\"\n            -img: image (N, C, H, W)\n            -flo: optical flow (N, 2, H, W)\n            elements of flo is in [0, H] and [0, W] for dx, dy\n\n        \"\"\"", "\n", "\n", "\n", "# (x1, y1)\t\t(x1, y2)", "\n", "# +---------------+", "\n", "# |\t\t\t\t  |", "\n", "# |\to(x, y) \t  |", "\n", "# |\t\t\t\t  |", "\n", "# |\t\t\t\t  |", "\n", "# |\t\t\t\t  |", "\n", "# |\t\t\t\t  |", "\n", "# +---------------+", "\n", "# (x2, y1)\t\t(x2, y2)", "\n", "\n", "\n", "N", ",", "C", ",", "_", ",", "_", "=", "img", ".", "size", "(", ")", "\n", "\n", "# translate start-point optical flow to end-point optical flow", "\n", "y", "=", "flo", "[", ":", ",", "0", ":", "1", ":", ",", ":", "]", "\n", "x", "=", "flo", "[", ":", ",", "1", ":", "2", ",", ":", ",", ":", "]", "\n", "\n", "x", "=", "x", ".", "repeat", "(", "1", ",", "C", ",", "1", ",", "1", ")", "\n", "y", "=", "y", ".", "repeat", "(", "1", ",", "C", ",", "1", ",", "1", ")", "\n", "\n", "# Four point of square (x1, y1), (x1, y2), (x2, y1), (y2, y2)", "\n", "x1", "=", "torch", ".", "floor", "(", "x", ")", "\n", "x2", "=", "x1", "+", "1", "\n", "y1", "=", "torch", ".", "floor", "(", "y", ")", "\n", "y2", "=", "y1", "+", "1", "\n", "\n", "# firstly, get gaussian weights", "\n", "w11", ",", "w12", ",", "w21", ",", "w22", "=", "self", ".", "get_gaussian_weights", "(", "x", ",", "y", ",", "x1", ",", "x2", ",", "y1", ",", "y2", ")", "\n", "\n", "# secondly, sample each weighted corner", "\n", "img11", ",", "o11", "=", "self", ".", "sample_one", "(", "img", ",", "x1", ",", "y1", ",", "w11", ")", "\n", "img12", ",", "o12", "=", "self", ".", "sample_one", "(", "img", ",", "x1", ",", "y2", ",", "w12", ")", "\n", "img21", ",", "o21", "=", "self", ".", "sample_one", "(", "img", ",", "x2", ",", "y1", ",", "w21", ")", "\n", "img22", ",", "o22", "=", "self", ".", "sample_one", "(", "img", ",", "x2", ",", "y2", ",", "w22", ")", "\n", "\n", "\n", "imgw", "=", "img11", "+", "img12", "+", "img21", "+", "img22", "\n", "o", "=", "o11", "+", "o12", "+", "o21", "+", "o22", "\n", "\n", "return", "imgw", ",", "o", "\n", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.inter_models.flow_reversal.FlowReversal.get_gaussian_weights": [[66, 73], ["torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp"], "methods", ["None"], ["", "def", "get_gaussian_weights", "(", "self", ",", "x", ",", "y", ",", "x1", ",", "x2", ",", "y1", ",", "y2", ")", ":", "\n", "        ", "w11", "=", "torch", ".", "exp", "(", "-", "(", "(", "x", "-", "x1", ")", "**", "2", "+", "(", "y", "-", "y1", ")", "**", "2", ")", ")", "\n", "w12", "=", "torch", ".", "exp", "(", "-", "(", "(", "x", "-", "x1", ")", "**", "2", "+", "(", "y", "-", "y2", ")", "**", "2", ")", ")", "\n", "w21", "=", "torch", ".", "exp", "(", "-", "(", "(", "x", "-", "x2", ")", "**", "2", "+", "(", "y", "-", "y1", ")", "**", "2", ")", ")", "\n", "w22", "=", "torch", ".", "exp", "(", "-", "(", "(", "x", "-", "x2", ")", "**", "2", "+", "(", "y", "-", "y2", ")", "**", "2", ")", ")", "\n", "\n", "return", "w11", ",", "w12", ",", "w21", ",", "w22", "\n", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.inter_models.flow_reversal.FlowReversal.sample_one": [[75, 119], ["img.size", "shiftx.view", "shifty.view", "[].cuda().long().repeat().view", "[].cuda().long().repeat().view", "weight.view", "img.view", "torch.arange().view().long().cuda().repeat().view", "torch.arange().view().long().cuda().repeat().view", "torch.arange().view().long().cuda().repeat().view", "torch.arange().view().long().cuda().repeat().view", "torch.arange().view().long().cuda().repeat().view", "torch.arange().view().long().cuda().repeat().view", "torch.arange().view().long().cuda().repeat().view", "torch.arange().view().long().cuda().repeat().view", "torch.arange().view().long().cuda().repeat().view", "torch.arange().view().long().cuda().repeat().view", "torch.arange().view().long().cuda().repeat().view", "torch.arange().view().long().cuda().repeat().view", "torch.arange().view().long().cuda().repeat().view", "torch.arange().view().long().cuda().repeat().view", "torch.arange().view().long().cuda().repeat().view", "torch.arange().view().long().cuda().repeat().view", "torch.arange().view().long().cuda().repeat().view", "torch.arange().view().long().cuda().repeat().view", "torch.masked_select().clone().cuda", "torch.masked_select().clone().cuda", "torch.masked_select().clone().cuda", "torch.masked_select().clone().cuda", "torch.masked_select().clone().cuda", "torch.masked_select().clone().cuda", "torch.masked_select().clone().cuda", "torch.masked_select().clone().cuda", "torch.masked_select().clone().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda.put_", "torch.zeros().cuda.put_", "torch.zeros().cuda.put_", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda.put_", "torch.zeros().cuda.put_", "torch.zeros().cuda.put_", "shiftx.view.long", "shifty.view.long", "idxy.lt", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.zeros().cuda.view", "torch.zeros().cuda.view", "torch.zeros().cuda.view", "torch.zeros().cuda.view", "torch.zeros().cuda.view", "torch.zeros().cuda.view", "[].cuda().long().repeat", "[].cuda().long().repeat", "torch.arange().view().long().cuda().repeat", "torch.arange().view().long().cuda().repeat", "torch.arange().view().long().cuda().repeat", "torch.arange().view().long().cuda().repeat", "torch.arange().view().long().cuda().repeat", "torch.arange().view().long().cuda().repeat", "torch.arange().view().long().cuda().repeat", "torch.arange().view().long().cuda().repeat", "torch.arange().view().long().cuda().repeat", "torch.arange().view().long().cuda().repeat", "torch.arange().view().long().cuda().repeat", "torch.arange().view().long().cuda().repeat", "torch.arange().view().long().cuda().repeat", "torch.arange().view().long().cuda().repeat", "torch.arange().view().long().cuda().repeat", "torch.arange().view().long().cuda().repeat", "torch.arange().view().long().cuda().repeat", "torch.arange().view().long().cuda().repeat", "idxy.ge", "torch.masked_select().clone", "torch.masked_select().clone", "torch.masked_select().clone", "torch.masked_select().clone", "torch.masked_select().clone", "torch.masked_select().clone", "torch.masked_select().clone", "torch.masked_select().clone", "torch.masked_select().clone", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "idxx.ge", "idxx.lt", "[].cuda().long", "[].cuda().long", "torch.arange().view().long().cuda", "torch.arange().view().long().cuda", "torch.arange().view().long().cuda", "torch.arange().view().long().cuda", "torch.arange().view().long().cuda", "torch.arange().view().long().cuda", "torch.arange().view().long().cuda", "torch.arange().view().long().cuda", "torch.arange().view().long().cuda", "torch.arange().view().long().cuda", "torch.arange().view().long().cuda", "torch.arange().view().long().cuda", "torch.arange().view().long().cuda", "torch.arange().view().long().cuda", "torch.arange().view().long().cuda", "torch.arange().view().long().cuda", "torch.arange().view().long().cuda", "torch.arange().view().long().cuda", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "[].cuda", "[].cuda", "torch.arange().view().long", "torch.arange().view().long", "torch.arange().view().long", "torch.arange().view().long", "torch.arange().view().long", "torch.arange().view().long", "torch.arange().view().long", "torch.arange().view().long", "torch.arange().view().long", "torch.arange().view().long", "torch.arange().view().long", "torch.arange().view().long", "torch.arange().view().long", "torch.arange().view().long", "torch.arange().view().long", "torch.arange().view().long", "torch.arange().view().long", "torch.arange().view().long", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["None"], ["", "def", "sample_one", "(", "self", ",", "img", ",", "shiftx", ",", "shifty", ",", "weight", ")", ":", "\n", "        ", "\"\"\"\n        Input:\n            -img (N, C, H, W)\n            -shiftx, shifty (N, c, H, W)\n        \"\"\"", "\n", "\n", "N", ",", "C", ",", "H", ",", "W", "=", "img", ".", "size", "(", ")", "\n", "\n", "\n", "# flatten all (all restored as Tensors)", "\n", "flat_shiftx", "=", "shiftx", ".", "view", "(", "-", "1", ")", "\n", "flat_shifty", "=", "shifty", ".", "view", "(", "-", "1", ")", "\n", "flat_basex", "=", "torch", ".", "arange", "(", "0", ",", "H", ",", "requires_grad", "=", "False", ")", ".", "view", "(", "-", "1", ",", "1", ")", "[", "None", ",", "None", "]", ".", "cuda", "(", ")", ".", "long", "(", ")", ".", "repeat", "(", "N", ",", "C", ",", "1", ",", "W", ")", ".", "view", "(", "-", "1", ")", "\n", "flat_basey", "=", "torch", ".", "arange", "(", "0", ",", "W", ",", "requires_grad", "=", "False", ")", ".", "view", "(", "1", ",", "-", "1", ")", "[", "None", ",", "None", "]", ".", "cuda", "(", ")", ".", "long", "(", ")", ".", "repeat", "(", "N", ",", "C", ",", "H", ",", "1", ")", ".", "view", "(", "-", "1", ")", "\n", "flat_weight", "=", "weight", ".", "view", "(", "-", "1", ")", "\n", "flat_img", "=", "img", ".", "view", "(", "-", "1", ")", "\n", "\n", "\n", "# The corresponding positions in I1", "\n", "idxn", "=", "torch", ".", "arange", "(", "0", ",", "N", ",", "requires_grad", "=", "False", ")", ".", "view", "(", "N", ",", "1", ",", "1", ",", "1", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", ".", "repeat", "(", "1", ",", "C", ",", "H", ",", "W", ")", ".", "view", "(", "-", "1", ")", "\n", "idxc", "=", "torch", ".", "arange", "(", "0", ",", "C", ",", "requires_grad", "=", "False", ")", ".", "view", "(", "1", ",", "C", ",", "1", ",", "1", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", ".", "repeat", "(", "N", ",", "1", ",", "H", ",", "W", ")", ".", "view", "(", "-", "1", ")", "\n", "# ttype = flat_basex.type()", "\n", "idxx", "=", "flat_shiftx", ".", "long", "(", ")", "+", "flat_basex", "\n", "idxy", "=", "flat_shifty", ".", "long", "(", ")", "+", "flat_basey", "\n", "\n", "\n", "# recording the inside part the shifted", "\n", "mask", "=", "idxx", ".", "ge", "(", "0", ")", "&", "idxx", ".", "lt", "(", "H", ")", "&", "idxy", ".", "ge", "(", "0", ")", "&", "idxy", ".", "lt", "(", "W", ")", "\n", "\n", "# Mask off points out of boundaries", "\n", "ids", "=", "(", "idxn", "*", "C", "*", "H", "*", "W", "+", "idxc", "*", "H", "*", "W", "+", "idxx", "*", "W", "+", "idxy", ")", "\n", "ids_mask", "=", "torch", ".", "masked_select", "(", "ids", ",", "mask", ")", ".", "clone", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "# Note here! accmulate fla must be true for proper bp", "\n", "img_warp", "=", "torch", ".", "zeros", "(", "[", "N", "*", "C", "*", "H", "*", "W", ",", "]", ")", ".", "cuda", "(", ")", "\n", "img_warp", ".", "put_", "(", "ids_mask", ",", "torch", ".", "masked_select", "(", "flat_img", "*", "flat_weight", ",", "mask", ")", ",", "accumulate", "=", "True", ")", "\n", "\n", "one_warp", "=", "torch", ".", "zeros", "(", "[", "N", "*", "C", "*", "H", "*", "W", ",", "]", ")", ".", "cuda", "(", ")", "\n", "one_warp", ".", "put_", "(", "ids_mask", ",", "torch", ".", "masked_select", "(", "flat_weight", ",", "mask", ")", ",", "accumulate", "=", "True", ")", "\n", "\n", "\n", "\n", "return", "img_warp", ".", "view", "(", "N", ",", "C", ",", "H", ",", "W", ")", ",", "one_warp", ".", "view", "(", "N", ",", "C", ",", "H", ",", "W", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.inter_models.PWCNetnew.PWCNet.__init__": [[14, 226], ["super().__init__", "Extractor", "Decoder", "Decoder", "Decoder", "Decoder", "Decoder", "Refiner", "super().__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "PWCNetnew.PWCNet.moduleOne", "PWCNetnew.PWCNet.moduleTwo", "PWCNetnew.PWCNet.moduleThr", "PWCNetnew.PWCNet.moduleFou", "PWCNetnew.PWCNet.moduleFiv", "PWCNetnew.PWCNet.moduleSix", "super().__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.cat", "torch.cat", "torch.nn.functional.grid_sample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "PWCNetnew.PWCNet.moduleSix", "super().__init__", "torch.nn.Sequential", "PWCNetnew.PWCNet.moduleMain", "torch.nn.Conv2d", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.LeakyReLU", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.Conv2d", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "str", "torch.linspace().view().expand", "torch.linspace().view().expand", "torch.cat().cuda", "str", "PWCNetnew.PWCNet.new_ones", "torch.nn.functional.leaky_relu", "torch.cat", "torch.nn.Conv2d", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "PWCNetnew.PWCNet.size", "PWCNetnew.PWCNet.size", "PWCNetnew.PWCNet.size", "PWCNetnew.PWCNet.size", "PWCNetnew.PWCNet.size", "PWCNetnew.PWCNet.size", "PWCNetnew.PWCNet.moduleUpflow", "PWCNetnew.PWCNet.moduleUpfeat", "torch.nn.functional.leaky_relu", "torch.cat", "PWCNetnew.PWCNet.moduleOne", "PWCNetnew.PWCNet.moduleTwo", "PWCNetnew.PWCNet.moduleThr", "PWCNetnew.PWCNet.moduleFou", "PWCNetnew.PWCNet.moduleFiv", "torch.linspace().view", "torch.linspace().view", "str", "torch.cat", "str", "PWCNetnew.PWCNet.size", "PWCNetnew.PWCNet.size", "PWCNetnew.PWCNet.size", "utils.correlation.FunctionCorrelation", "PWCNetnew.PWCNet.size", "PWCNetnew.PWCNet.size", "PWCNetnew.PWCNet.size", "PWCNetnew.PWCNet.size", "str", "utils.correlation.FunctionCorrelation", "torch.linspace", "torch.linspace", "torch.cat.size", "torch.cat.size", "PWCNetnew.PWCNet.size", "PWCNetnew.PWCNet.size", "PWCNetnew.PWCNet.size", "PWCNetnew.PWCNet.Backward", "str", "PWCNetnew.PWCNet.size"], "methods", ["home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.data.dataloader_4frame.Video.__init__", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.data.dataloader_4frame.Video.__init__", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.data.dataloader_4frame.Video.__init__", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.data.dataloader_4frame.Video.__init__", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.inter_models.correlation.FunctionCorrelation", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.inter_models.correlation.FunctionCorrelation"], ["\t", "def", "__init__", "(", "self", ")", ":", "\n", "\t\t", "super", "(", "PWCNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "class", "Extractor", "(", "torch", ".", "nn", ".", "Module", ")", ":", "\n", "\t\t\t", "def", "__init__", "(", "self", ")", ":", "\n", "\t\t\t\t", "super", "(", "Extractor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "moduleOne", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "in_channels", "=", "3", ",", "out_channels", "=", "16", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "torch", ".", "nn", ".", "LeakyReLU", "(", "inplace", "=", "False", ",", "negative_slope", "=", "0.1", ")", ",", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "in_channels", "=", "16", ",", "out_channels", "=", "16", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "torch", ".", "nn", ".", "LeakyReLU", "(", "inplace", "=", "False", ",", "negative_slope", "=", "0.1", ")", ",", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "in_channels", "=", "16", ",", "out_channels", "=", "16", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "torch", ".", "nn", ".", "LeakyReLU", "(", "inplace", "=", "False", ",", "negative_slope", "=", "0.1", ")", "\n", ")", "\n", "\n", "self", ".", "moduleTwo", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "in_channels", "=", "16", ",", "out_channels", "=", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "torch", ".", "nn", ".", "LeakyReLU", "(", "inplace", "=", "False", ",", "negative_slope", "=", "0.1", ")", ",", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "in_channels", "=", "32", ",", "out_channels", "=", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "torch", ".", "nn", ".", "LeakyReLU", "(", "inplace", "=", "False", ",", "negative_slope", "=", "0.1", ")", ",", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "in_channels", "=", "32", ",", "out_channels", "=", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "torch", ".", "nn", ".", "LeakyReLU", "(", "inplace", "=", "False", ",", "negative_slope", "=", "0.1", ")", "\n", ")", "\n", "\n", "self", ".", "moduleThr", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "in_channels", "=", "32", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "torch", ".", "nn", ".", "LeakyReLU", "(", "inplace", "=", "False", ",", "negative_slope", "=", "0.1", ")", ",", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "torch", ".", "nn", ".", "LeakyReLU", "(", "inplace", "=", "False", ",", "negative_slope", "=", "0.1", ")", ",", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "torch", ".", "nn", ".", "LeakyReLU", "(", "inplace", "=", "False", ",", "negative_slope", "=", "0.1", ")", "\n", ")", "\n", "\n", "self", ".", "moduleFou", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "96", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "torch", ".", "nn", ".", "LeakyReLU", "(", "inplace", "=", "False", ",", "negative_slope", "=", "0.1", ")", ",", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "in_channels", "=", "96", ",", "out_channels", "=", "96", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "torch", ".", "nn", ".", "LeakyReLU", "(", "inplace", "=", "False", ",", "negative_slope", "=", "0.1", ")", ",", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "in_channels", "=", "96", ",", "out_channels", "=", "96", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "torch", ".", "nn", ".", "LeakyReLU", "(", "inplace", "=", "False", ",", "negative_slope", "=", "0.1", ")", "\n", ")", "\n", "\n", "self", ".", "moduleFiv", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "in_channels", "=", "96", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "torch", ".", "nn", ".", "LeakyReLU", "(", "inplace", "=", "False", ",", "negative_slope", "=", "0.1", ")", ",", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "torch", ".", "nn", ".", "LeakyReLU", "(", "inplace", "=", "False", ",", "negative_slope", "=", "0.1", ")", ",", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "torch", ".", "nn", ".", "LeakyReLU", "(", "inplace", "=", "False", ",", "negative_slope", "=", "0.1", ")", "\n", ")", "\n", "\n", "self", ".", "moduleSix", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "196", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "torch", ".", "nn", ".", "LeakyReLU", "(", "inplace", "=", "False", ",", "negative_slope", "=", "0.1", ")", ",", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "in_channels", "=", "196", ",", "out_channels", "=", "196", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "torch", ".", "nn", ".", "LeakyReLU", "(", "inplace", "=", "False", ",", "negative_slope", "=", "0.1", ")", ",", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "in_channels", "=", "196", ",", "out_channels", "=", "196", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "torch", ".", "nn", ".", "LeakyReLU", "(", "inplace", "=", "False", ",", "negative_slope", "=", "0.1", ")", "\n", ")", "\n", "# end", "\n", "\n", "\n", "\n", "", "def", "forward", "(", "self", ",", "tensorInput", ")", ":", "\n", "\n", "\n", "\t\t\t\t", "tensorOne", "=", "self", ".", "moduleOne", "(", "tensorInput", ")", "\n", "tensorTwo", "=", "self", ".", "moduleTwo", "(", "tensorOne", ")", "\n", "tensorThr", "=", "self", ".", "moduleThr", "(", "tensorTwo", ")", "\n", "tensorFou", "=", "self", ".", "moduleFou", "(", "tensorThr", ")", "\n", "tensorFiv", "=", "self", ".", "moduleFiv", "(", "tensorFou", ")", "\n", "tensorSix", "=", "self", ".", "moduleSix", "(", "tensorFiv", ")", "\n", "\n", "return", "[", "tensorOne", ",", "tensorTwo", ",", "tensorThr", ",", "tensorFou", ",", "tensorFiv", ",", "tensorSix", "]", "\n", "# end", "\n", "# end", "\n", "\n", "", "", "class", "Decoder", "(", "torch", ".", "nn", ".", "Module", ")", ":", "\n", "\t\t\t", "def", "__init__", "(", "self", ",", "intLevel", ")", ":", "\n", "\t\t\t\t", "super", "(", "Decoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "intPrevious", "=", "[", "None", ",", "None", ",", "81", "+", "32", "+", "2", "+", "2", ",", "81", "+", "64", "+", "2", "+", "2", ",", "81", "+", "96", "+", "2", "+", "2", ",", "81", "+", "128", "+", "2", "+", "2", ",", "81", ",", "None", "]", "[", "intLevel", "+", "1", "]", "\n", "intCurrent", "=", "[", "None", ",", "None", ",", "81", "+", "32", "+", "2", "+", "2", ",", "81", "+", "64", "+", "2", "+", "2", ",", "81", "+", "96", "+", "2", "+", "2", ",", "81", "+", "128", "+", "2", "+", "2", ",", "81", ",", "None", "]", "[", "intLevel", "+", "0", "]", "\n", "\n", "if", "intLevel", "<", "6", ":", "self", ".", "moduleUpflow", "=", "torch", ".", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "2", ",", "out_channels", "=", "2", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "if", "intLevel", "<", "6", ":", "self", ".", "moduleUpfeat", "=", "torch", ".", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "intPrevious", "+", "128", "+", "128", "+", "96", "+", "64", "+", "32", ",", "out_channels", "=", "2", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "if", "intLevel", "<", "6", ":", "self", ".", "dblBackward", "=", "[", "None", ",", "None", ",", "None", ",", "5.0", ",", "2.5", ",", "1.25", ",", "0.625", ",", "None", "]", "[", "intLevel", "+", "1", "]", "\n", "\n", "self", ".", "moduleOne", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "in_channels", "=", "intCurrent", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "torch", ".", "nn", ".", "LeakyReLU", "(", "inplace", "=", "False", ",", "negative_slope", "=", "0.1", ")", "\n", ")", "\n", "\n", "self", ".", "moduleTwo", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "in_channels", "=", "intCurrent", "+", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "torch", ".", "nn", ".", "LeakyReLU", "(", "inplace", "=", "False", ",", "negative_slope", "=", "0.1", ")", "\n", ")", "\n", "\n", "self", ".", "moduleThr", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "in_channels", "=", "intCurrent", "+", "128", "+", "128", ",", "out_channels", "=", "96", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "torch", ".", "nn", ".", "LeakyReLU", "(", "inplace", "=", "False", ",", "negative_slope", "=", "0.1", ")", "\n", ")", "\n", "\n", "self", ".", "moduleFou", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "in_channels", "=", "intCurrent", "+", "128", "+", "128", "+", "96", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "torch", ".", "nn", ".", "LeakyReLU", "(", "inplace", "=", "False", ",", "negative_slope", "=", "0.1", ")", "\n", ")", "\n", "\n", "self", ".", "moduleFiv", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "in_channels", "=", "intCurrent", "+", "128", "+", "128", "+", "96", "+", "64", ",", "out_channels", "=", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "torch", ".", "nn", ".", "LeakyReLU", "(", "inplace", "=", "False", ",", "negative_slope", "=", "0.1", ")", "\n", ")", "\n", "\n", "self", ".", "moduleSix", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "in_channels", "=", "intCurrent", "+", "128", "+", "128", "+", "96", "+", "64", "+", "32", ",", "out_channels", "=", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", ")", "\n", "# end", "\n", "\n", "", "def", "Backward", "(", "self", ",", "tensorInput", ",", "tensorFlow", ",", "Backward_tensorGrid", ",", "Backward_tensorPartial", ")", ":", "\n", "\t\t\t\t", "if", "str", "(", "tensorFlow", ".", "size", "(", ")", ")", "not", "in", "Backward_tensorGrid", ":", "\n", "\t\t\t\t\t", "tensorHorizontal", "=", "torch", ".", "linspace", "(", "-", "1.0", ",", "1.0", ",", "tensorFlow", ".", "size", "(", "3", ")", ")", ".", "view", "(", "1", ",", "1", ",", "1", ",", "tensorFlow", ".", "size", "(", "3", ")", ")", ".", "expand", "(", "tensorFlow", ".", "size", "(", "0", ")", ",", "-", "1", ",", "tensorFlow", ".", "size", "(", "2", ")", ",", "-", "1", ")", "\n", "tensorVertical", "=", "torch", ".", "linspace", "(", "-", "1.0", ",", "1.0", ",", "tensorFlow", ".", "size", "(", "2", ")", ")", ".", "view", "(", "1", ",", "1", ",", "tensorFlow", ".", "size", "(", "2", ")", ",", "1", ")", ".", "expand", "(", "tensorFlow", ".", "size", "(", "0", ")", ",", "-", "1", ",", "-", "1", ",", "tensorFlow", ".", "size", "(", "3", ")", ")", "\n", "\n", "Backward_tensorGrid", "[", "str", "(", "tensorFlow", ".", "size", "(", ")", ")", "]", "=", "torch", ".", "cat", "(", "[", "tensorHorizontal", ",", "tensorVertical", "]", ",", "1", ")", ".", "cuda", "(", ")", "\n", "# end", "\n", "\n", "", "if", "str", "(", "tensorFlow", ".", "size", "(", ")", ")", "not", "in", "Backward_tensorPartial", ":", "\n", "\t\t\t\t\t", "Backward_tensorPartial", "[", "str", "(", "tensorFlow", ".", "size", "(", ")", ")", "]", "=", "tensorFlow", ".", "new_ones", "(", "[", "tensorFlow", ".", "size", "(", "0", ")", ",", "1", ",", "tensorFlow", ".", "size", "(", "2", ")", ",", "tensorFlow", ".", "size", "(", "3", ")", "]", ")", "\n", "# end", "\n", "\n", "", "tensorFlow", "=", "torch", ".", "cat", "(", "[", "tensorFlow", "[", ":", ",", "0", ":", "1", ",", ":", ",", ":", "]", "/", "(", "(", "tensorInput", ".", "size", "(", "3", ")", "-", "1.0", ")", "/", "2.0", ")", ",", "tensorFlow", "[", ":", ",", "1", ":", "2", ",", ":", ",", ":", "]", "/", "(", "(", "tensorInput", ".", "size", "(", "2", ")", "-", "1.0", ")", "/", "2.0", ")", "]", ",", "1", ")", "\n", "tensorInput", "=", "torch", ".", "cat", "(", "[", "tensorInput", ",", "Backward_tensorPartial", "[", "str", "(", "tensorFlow", ".", "size", "(", ")", ")", "]", "]", ",", "1", ")", "\n", "\n", "tensorOutput", "=", "torch", ".", "nn", ".", "functional", ".", "grid_sample", "(", "input", "=", "tensorInput", ",", "grid", "=", "(", "Backward_tensorGrid", "[", "str", "(", "tensorFlow", ".", "size", "(", ")", ")", "]", "+", "tensorFlow", ")", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ",", "mode", "=", "'bilinear'", ",", "padding_mode", "=", "'zeros'", ")", "\n", "\n", "tensorMask", "=", "tensorOutput", "[", ":", ",", "-", "1", ":", ",", ":", ",", ":", "]", ";", "tensorMask", "[", "tensorMask", ">", "0.999", "]", "=", "1.0", ";", "tensorMask", "[", "tensorMask", "<", "1.0", "]", "=", "0.0", "\n", "\n", "return", "tensorOutput", "[", ":", ",", ":", "-", "1", ",", ":", ",", ":", "]", "*", "tensorMask", "\n", "\n", "", "def", "forward", "(", "self", ",", "tensorFirst", ",", "tensorSecond", ",", "objectPrevious", ",", "Backward_tensorGrid", ",", "Backward_tensorPartial", ")", ":", "\n", "\t\t\t\t", "tensorFlow", "=", "None", "\n", "tensorFeat", "=", "None", "\n", "\n", "if", "objectPrevious", "is", "None", ":", "\n", "\t\t\t\t\t", "tensorFlow", "=", "None", "\n", "tensorFeat", "=", "None", "\n", "\n", "tensorVolume", "=", "torch", ".", "nn", ".", "functional", ".", "leaky_relu", "(", "input", "=", "correlation", ".", "FunctionCorrelation", "(", "tensorFirst", "=", "tensorFirst", ",", "tensorSecond", "=", "tensorSecond", ")", ",", "negative_slope", "=", "0.1", ",", "inplace", "=", "False", ")", "\n", "\n", "tensorFeat", "=", "torch", ".", "cat", "(", "[", "tensorVolume", "]", ",", "1", ")", "\n", "\n", "", "elif", "objectPrevious", "is", "not", "None", ":", "\n", "\t\t\t\t\t", "tensorFlow", "=", "self", ".", "moduleUpflow", "(", "objectPrevious", "[", "'tensorFlow'", "]", ")", "\n", "tensorFeat", "=", "self", ".", "moduleUpfeat", "(", "objectPrevious", "[", "'tensorFeat'", "]", ")", "\n", "\n", "tensorVolume", "=", "torch", ".", "nn", ".", "functional", ".", "leaky_relu", "(", "input", "=", "correlation", ".", "FunctionCorrelation", "(", "tensorFirst", "=", "tensorFirst", ",", "tensorSecond", "=", "self", ".", "Backward", "(", "tensorSecond", ",", "tensorFlow", "*", "self", ".", "dblBackward", ",", "Backward_tensorGrid", ",", "Backward_tensorPartial", ")", ")", ",", "negative_slope", "=", "0.1", ",", "inplace", "=", "False", ")", "\n", "\n", "tensorFeat", "=", "torch", ".", "cat", "(", "[", "tensorVolume", ",", "tensorFirst", ",", "tensorFlow", ",", "tensorFeat", "]", ",", "1", ")", "\n", "\n", "# end", "\n", "\n", "", "tensorFeat", "=", "torch", ".", "cat", "(", "[", "self", ".", "moduleOne", "(", "tensorFeat", ")", ",", "tensorFeat", "]", ",", "1", ")", "\n", "tensorFeat", "=", "torch", ".", "cat", "(", "[", "self", ".", "moduleTwo", "(", "tensorFeat", ")", ",", "tensorFeat", "]", ",", "1", ")", "\n", "tensorFeat", "=", "torch", ".", "cat", "(", "[", "self", ".", "moduleThr", "(", "tensorFeat", ")", ",", "tensorFeat", "]", ",", "1", ")", "\n", "tensorFeat", "=", "torch", ".", "cat", "(", "[", "self", ".", "moduleFou", "(", "tensorFeat", ")", ",", "tensorFeat", "]", ",", "1", ")", "\n", "tensorFeat", "=", "torch", ".", "cat", "(", "[", "self", ".", "moduleFiv", "(", "tensorFeat", ")", ",", "tensorFeat", "]", ",", "1", ")", "\n", "\n", "tensorFlow", "=", "self", ".", "moduleSix", "(", "tensorFeat", ")", "\n", "\n", "return", "{", "\n", "'tensorFlow'", ":", "tensorFlow", ",", "\n", "'tensorFeat'", ":", "tensorFeat", "\n", "}", "\n", "# end", "\n", "# end", "\n", "\n", "", "", "class", "Refiner", "(", "torch", ".", "nn", ".", "Module", ")", ":", "\n", "\t\t\t", "def", "__init__", "(", "self", ")", ":", "\n", "\t\t\t\t", "super", "(", "Refiner", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "moduleMain", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "in_channels", "=", "81", "+", "32", "+", "2", "+", "2", "+", "128", "+", "128", "+", "96", "+", "64", "+", "32", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "dilation", "=", "1", ")", ",", "\n", "torch", ".", "nn", ".", "LeakyReLU", "(", "inplace", "=", "False", ",", "negative_slope", "=", "0.1", ")", ",", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "2", ",", "dilation", "=", "2", ")", ",", "\n", "torch", ".", "nn", ".", "LeakyReLU", "(", "inplace", "=", "False", ",", "negative_slope", "=", "0.1", ")", ",", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "4", ",", "dilation", "=", "4", ")", ",", "\n", "torch", ".", "nn", ".", "LeakyReLU", "(", "inplace", "=", "False", ",", "negative_slope", "=", "0.1", ")", ",", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "96", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "8", ",", "dilation", "=", "8", ")", ",", "\n", "torch", ".", "nn", ".", "LeakyReLU", "(", "inplace", "=", "False", ",", "negative_slope", "=", "0.1", ")", ",", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "in_channels", "=", "96", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "16", ",", "dilation", "=", "16", ")", ",", "\n", "torch", ".", "nn", ".", "LeakyReLU", "(", "inplace", "=", "False", ",", "negative_slope", "=", "0.1", ")", ",", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "dilation", "=", "1", ")", ",", "\n", "torch", ".", "nn", ".", "LeakyReLU", "(", "inplace", "=", "False", ",", "negative_slope", "=", "0.1", ")", ",", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "in_channels", "=", "32", ",", "out_channels", "=", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "dilation", "=", "1", ")", "\n", ")", "\n", "# end", "\n", "\n", "", "def", "forward", "(", "self", ",", "tensorInput", ")", ":", "\n", "\t\t\t\t", "return", "self", ".", "moduleMain", "(", "tensorInput", ")", "\n", "# end", "\n", "# end", "\n", "\n", "", "", "self", ".", "moduleExtractor", "=", "Extractor", "(", ")", "\n", "\n", "self", ".", "moduleTwo", "=", "Decoder", "(", "2", ")", "\n", "self", ".", "moduleThr", "=", "Decoder", "(", "3", ")", "\n", "self", ".", "moduleFou", "=", "Decoder", "(", "4", ")", "\n", "self", ".", "moduleFiv", "=", "Decoder", "(", "5", ")", "\n", "self", ".", "moduleSix", "=", "Decoder", "(", "6", ")", "\n", "\n", "self", ".", "moduleRefiner", "=", "Refiner", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.inter_models.PWCNetnew.PWCNet.forward": [[229, 254], ["tensorFirst.size", "tensorFirst.size", "int", "int", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "math.floor", "math.floor", "torch.nn.functional.interpolate", "float", "float", "float", "float", "math.ceil", "math.ceil", "PWCNetnew.PWCNet.forward_pre"], "methods", ["home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.inter_models.PWCNetnew.PWCNet.forward_pre"], ["", "def", "forward", "(", "self", ",", "tensorFirst", ",", "tensorSecond", ")", ":", "\n", "# assert(tensorFirst.size(1) == tensorSecond.size(1))", "\n", "# assert(tensorFirst.size(2) == tensorSecond.size(2))", "\n", "# import ipdb; ipdb.set_trace()", "\n", "\t\t", "intWidth", "=", "tensorFirst", ".", "size", "(", "3", ")", "\n", "intHeight", "=", "tensorFirst", ".", "size", "(", "2", ")", "\n", "\n", "# assert(intWidth == 1024) # remember that there is no guarantee for correctness, comment this line out if you acknowledge this and want to continue", "\n", "# assert(intHeight == 436) # remember that there is no guarantee for correctness, comment this line out if you acknowledge this and want to continue", "\n", "\n", "tensorPreprocessedFirst", "=", "tensorFirst", "\n", "tensorPreprocessedSecond", "=", "tensorSecond", "\n", "\n", "intPreprocessedWidth", "=", "int", "(", "math", ".", "floor", "(", "math", ".", "ceil", "(", "intWidth", "/", "64.0", ")", "*", "64.0", ")", ")", "\n", "intPreprocessedHeight", "=", "int", "(", "math", ".", "floor", "(", "math", ".", "ceil", "(", "intHeight", "/", "64.0", ")", "*", "64.0", ")", ")", "\n", "\n", "tensorPreprocessedFirst", "=", "torch", ".", "nn", ".", "functional", ".", "interpolate", "(", "input", "=", "tensorPreprocessedFirst", ",", "size", "=", "(", "intPreprocessedHeight", ",", "intPreprocessedWidth", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "tensorPreprocessedSecond", "=", "torch", ".", "nn", ".", "functional", ".", "interpolate", "(", "input", "=", "tensorPreprocessedSecond", ",", "size", "=", "(", "intPreprocessedHeight", ",", "intPreprocessedWidth", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "\n", "tensorFlow", "=", "20.0", "*", "torch", ".", "nn", ".", "functional", ".", "interpolate", "(", "input", "=", "self", ".", "forward_pre", "(", "tensorPreprocessedFirst", ",", "tensorPreprocessedSecond", ")", ",", "size", "=", "(", "intHeight", ",", "intWidth", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "\n", "tensorFlow", "[", ":", ",", "0", ",", ":", ",", ":", "]", "*=", "float", "(", "intWidth", ")", "/", "float", "(", "intPreprocessedWidth", ")", "\n", "tensorFlow", "[", ":", ",", "1", ",", ":", ",", ":", "]", "*=", "float", "(", "intHeight", ")", "/", "float", "(", "intPreprocessedHeight", ")", "\n", "\n", "return", "tensorFlow", "\n", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.inter_models.PWCNetnew.PWCNet.forward_pre": [[255, 270], ["PWCNetnew.PWCNet.moduleExtractor", "PWCNetnew.PWCNet.moduleExtractor", "PWCNetnew.PWCNet.moduleSix", "PWCNetnew.PWCNet.moduleFiv", "PWCNetnew.PWCNet.moduleFou", "PWCNetnew.PWCNet.moduleThr", "PWCNetnew.PWCNet.moduleTwo", "PWCNetnew.PWCNet.moduleRefiner"], "methods", ["None"], ["", "def", "forward_pre", "(", "self", ",", "tensorFirst", ",", "tensorSecond", ")", ":", "\n", "\n", "\t\t", "Backward_tensorGrid", "=", "{", "}", "\n", "Backward_tensorPartial", "=", "{", "}", "\n", "\n", "tensorFirst", "=", "self", ".", "moduleExtractor", "(", "tensorFirst", ")", "\n", "tensorSecond", "=", "self", ".", "moduleExtractor", "(", "tensorSecond", ")", "\n", "\n", "objectEstimate", "=", "self", ".", "moduleSix", "(", "tensorFirst", "[", "-", "1", "]", ",", "tensorSecond", "[", "-", "1", "]", ",", "None", ",", "Backward_tensorGrid", ",", "Backward_tensorPartial", ")", "\n", "objectEstimate", "=", "self", ".", "moduleFiv", "(", "tensorFirst", "[", "-", "2", "]", ",", "tensorSecond", "[", "-", "2", "]", ",", "objectEstimate", ",", "Backward_tensorGrid", ",", "Backward_tensorPartial", ")", "\n", "objectEstimate", "=", "self", ".", "moduleFou", "(", "tensorFirst", "[", "-", "3", "]", ",", "tensorSecond", "[", "-", "3", "]", ",", "objectEstimate", ",", "Backward_tensorGrid", ",", "Backward_tensorPartial", ")", "\n", "objectEstimate", "=", "self", ".", "moduleThr", "(", "tensorFirst", "[", "-", "4", "]", ",", "tensorSecond", "[", "-", "4", "]", ",", "objectEstimate", ",", "Backward_tensorGrid", ",", "Backward_tensorPartial", ")", "\n", "objectEstimate", "=", "self", ".", "moduleTwo", "(", "tensorFirst", "[", "-", "5", "]", ",", "tensorSecond", "[", "-", "5", "]", ",", "objectEstimate", ",", "Backward_tensorGrid", ",", "Backward_tensorPartial", ")", "\n", "\n", "return", "objectEstimate", "[", "'tensorFlow'", "]", "+", "self", ".", "moduleRefiner", "(", "objectEstimate", "[", "'tensorFeat'", "]", ")", "\n", "# end", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.inter_models.acceleration_UTI.AcFusionLayer.__init__": [[9, 11], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.data.dataloader_4frame.Video.__init__"], ["def", "__init__", "(", "self", ",", ")", ":", "\n", "\t\t", "super", "(", "AcFusionLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.inter_models.acceleration_UTI.AcFusionLayer.forward": [[12, 26], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "flo10", ",", "flo12", ",", "flo23", ",", "r", ",", "index", ")", ":", "\n", "\t\t", "\"\"\"\n\t\t\t-- input: four flows\n\t\t\t-- output: center shift\n\t\t\"\"\"", "\n", "# # situation when r=1", "\n", "# return 0.5 * ((t + t**2)*flo12 - (t - t**2)*flo10), 0.5 * (((1 - t) + (1 - t)**2)*flo21 - ((1 - t) - (1 - t)**2)*flo23)", "\n", "\n", "# # Uncertain Time Interval", "\n", "t", "=", "r", "/", "(", "r", "+", "1", ")", "*", "index", "\n", "v", "=", "r", "*", "(", "-", "flo10", ")", "+", "(", "flo23", "-", "flo10", ")", "/", "2", "\n", "a", "=", "(", "r", "+", "1", ")", "*", "(", "flo23", "+", "flo10", ")", "\n", "f_1_t", "=", "v", "*", "t", "+", "0.5", "*", "a", "*", "(", "t", "**", "2", ")", "\n", "return", "f_1_t", "", "", "", ""]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.inter_models.UNet2.down.__init__": [[28, 48], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "int", "int"], "methods", ["home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.data.dataloader_4frame.Video.__init__"], ["def", "__init__", "(", "self", ",", "inChannels", ",", "outChannels", ",", "filterSize", ")", ":", "\n", "        ", "\"\"\"\n        Parameters\n        ----------\n            inChannels : int\n                number of input channels for the first convolutional layer.\n            outChannels : int\n                number of output channels for the first convolutional layer.\n                This is also used as input and output channels for the\n                second convolutional layer.\n            filterSize : int\n                filter size for the convolution filter. input N would create\n                a N x N filter.\n        \"\"\"", "\n", "\n", "\n", "super", "(", "down", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Initialize convolutional layers.", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inChannels", ",", "outChannels", ",", "filterSize", ",", "stride", "=", "1", ",", "padding", "=", "int", "(", "(", "filterSize", "-", "1", ")", "/", "2", ")", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "outChannels", ",", "outChannels", ",", "filterSize", ",", "stride", "=", "1", ",", "padding", "=", "int", "(", "(", "filterSize", "-", "1", ")", "/", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.inter_models.UNet2.down.forward": [[49, 73], ["torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "UNet2.down.conv1", "UNet2.down.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        Returns output tensor after passing input `x` to the neural network\n        block.\n\n        Parameters\n        ----------\n            x : tensor\n                input to the NN block.\n\n        Returns\n        -------\n            tensor\n                output of the NN block.\n        \"\"\"", "\n", "\n", "\n", "# Average pooling with kernel size 2 (2 x 2).", "\n", "x", "=", "F", ".", "avg_pool2d", "(", "x", ",", "2", ")", "\n", "# Convolution + Leaky ReLU", "\n", "x", "=", "F", ".", "leaky_relu", "(", "self", ".", "conv1", "(", "x", ")", ",", "negative_slope", "=", "0.1", ")", "\n", "# Convolution + Leaky ReLU", "\n", "x", "=", "F", ".", "leaky_relu", "(", "self", ".", "conv2", "(", "x", ")", ",", "negative_slope", "=", "0.1", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.inter_models.UNet2.up.__init__": [[92, 110], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.data.dataloader_4frame.Video.__init__"], ["def", "__init__", "(", "self", ",", "inChannels", ",", "outChannels", ")", ":", "\n", "        ", "\"\"\"\n        Parameters\n        ----------\n            inChannels : int\n                number of input channels for the first convolutional layer.\n            outChannels : int\n                number of output channels for the first convolutional layer.\n                This is also used for setting input and output channels for\n                the second convolutional layer.\n        \"\"\"", "\n", "\n", "\n", "super", "(", "up", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Initialize convolutional layers.", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inChannels", ",", "outChannels", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "# (2 * outChannels) is used for accommodating skip connection.", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "2", "*", "outChannels", ",", "outChannels", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.inter_models.UNet2.up.forward": [[111, 136], ["torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "UNet2.up.conv1", "UNet2.up.conv2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "skpCn.size", "skpCn.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "skpCn", ")", ":", "\n", "        ", "\"\"\"\n        Returns output tensor after passing input `x` to the neural network\n        block.\n\n        Parameters\n        ----------\n            x : tensor\n                input to the NN block.\n            skpCn : tensor\n                skip connection input to the NN block.\n\n        Returns\n        -------\n            tensor\n                output of the NN block.\n        \"\"\"", "\n", "\n", "# Bilinear interpolation with scaling 2.", "\n", "x", "=", "F", ".", "interpolate", "(", "x", ",", "size", "=", "[", "skpCn", ".", "size", "(", "2", ")", ",", "skpCn", ".", "size", "(", "3", ")", "]", ",", "mode", "=", "'bilinear'", ")", "\n", "# Convolution + Leaky ReLU", "\n", "x", "=", "F", ".", "leaky_relu", "(", "self", ".", "conv1", "(", "x", ")", ",", "negative_slope", "=", "0.1", ")", "\n", "# Convolution + Leaky ReLU on (`x`, `skpCn`)", "\n", "x", "=", "F", ".", "leaky_relu", "(", "self", ".", "conv2", "(", "torch", ".", "cat", "(", "(", "x", ",", "skpCn", ")", ",", "1", ")", ")", ",", "negative_slope", "=", "0.1", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.inter_models.UNet2.UNet2.__init__": [[154, 180], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "UNet2.down", "UNet2.down", "UNet2.down", "UNet2.down", "UNet2.down", "UNet2.up", "UNet2.up", "UNet2.up", "UNet2.up", "UNet2.up", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.data.dataloader_4frame.Video.__init__"], ["def", "__init__", "(", "self", ",", "inChannels", ",", "outChannels", ")", ":", "\n", "        ", "\"\"\"\n        Parameters\n        ----------\n            inChannels : int\n                number of input channels for the UNet.\n            outChannels : int\n                number of output channels for the UNet.\n        \"\"\"", "\n", "\n", "\n", "super", "(", "UNet2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Initialize neural network blocks.", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inChannels", ",", "32", ",", "7", ",", "stride", "=", "1", ",", "padding", "=", "3", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "32", ",", "32", ",", "7", ",", "stride", "=", "1", ",", "padding", "=", "3", ")", "\n", "self", ".", "down1", "=", "down", "(", "32", ",", "64", ",", "5", ")", "\n", "self", ".", "down2", "=", "down", "(", "64", ",", "128", ",", "3", ")", "\n", "self", ".", "down3", "=", "down", "(", "128", ",", "256", ",", "3", ")", "\n", "self", ".", "down4", "=", "down", "(", "256", ",", "512", ",", "3", ")", "\n", "self", ".", "down5", "=", "down", "(", "512", ",", "512", ",", "3", ")", "\n", "self", ".", "up1", "=", "up", "(", "512", ",", "512", ")", "\n", "self", ".", "up2", "=", "up", "(", "512", ",", "256", ")", "\n", "self", ".", "up3", "=", "up", "(", "256", ",", "128", ")", "\n", "self", ".", "up4", "=", "up", "(", "128", ",", "64", ")", "\n", "self", ".", "up5", "=", "up", "(", "64", ",", "32", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "32", ",", "outChannels", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.inter_models.UNet2.UNet2.forward": [[181, 211], ["torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "UNet2.UNet2.down1", "UNet2.UNet2.down2", "UNet2.UNet2.down3", "UNet2.UNet2.down4", "UNet2.UNet2.down5", "UNet2.UNet2.up1", "UNet2.UNet2.up2", "UNet2.UNet2.up3", "UNet2.UNet2.up4", "UNet2.UNet2.up5", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "UNet2.UNet2.conv1", "UNet2.UNet2.conv2", "UNet2.UNet2.conv3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        Returns output tensor after passing input `x` to the neural network.\n\n        Parameters\n        ----------\n            x : tensor\n                input to the UNet.\n\n        Returns\n        -------\n            tensor\n                output of the UNet.\n        \"\"\"", "\n", "\n", "\n", "x", "=", "F", ".", "leaky_relu", "(", "self", ".", "conv1", "(", "x", ")", ",", "negative_slope", "=", "0.1", ")", "\n", "s1", "=", "F", ".", "leaky_relu", "(", "self", ".", "conv2", "(", "x", ")", ",", "negative_slope", "=", "0.1", ")", "\n", "s2", "=", "self", ".", "down1", "(", "s1", ")", "\n", "s3", "=", "self", ".", "down2", "(", "s2", ")", "\n", "s4", "=", "self", ".", "down3", "(", "s3", ")", "\n", "s5", "=", "self", ".", "down4", "(", "s4", ")", "\n", "x", "=", "self", ".", "down5", "(", "s5", ")", "\n", "x", "=", "self", ".", "up1", "(", "x", ",", "s5", ")", "\n", "x", "=", "self", ".", "up2", "(", "x", ",", "s4", ")", "\n", "x", "=", "self", ".", "up3", "(", "x", ",", "s3", ")", "\n", "x", "=", "self", ".", "up4", "(", "x", ",", "s2", ")", "\n", "x1", "=", "self", ".", "up5", "(", "x", ",", "s1", ")", "\n", "x", "=", "F", ".", "leaky_relu", "(", "self", ".", "conv3", "(", "x1", ")", ",", "negative_slope", "=", "0.1", ")", "\n", "return", "x", ",", "x1", "\n", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.inter_models.correlation._FunctionCorrelation.forward": [[281, 335], ["first.new_zeros", "first.new_zeros", "correlation._FunctionCorrelation.save_for_backward", "first.new_zeros", "first.is_contiguous", "second.is_contiguous", "first.size", "first.size", "first.size", "first.size", "first.size", "first.size", "first.size", "first.size", "first.size", "correlation.cupy_launch", "second.size", "second.size", "correlation.cupy_launch", "first.new_zeros.size", "correlation.cupy_launch", "NotImplementedError", "first.size", "first.size", "first.size", "first.size", "correlation.cupy_kernel", "tuple", "tuple", "correlation.cupy_kernel", "tuple", "tuple", "first.new_zeros.size", "first.new_zeros.size", "correlation.cupy_kernel", "tuple", "tuple", "first.data_ptr", "first.new_zeros.data_ptr", "second.data_ptr", "first.new_zeros.data_ptr", "first.size", "first.new_zeros.data_ptr", "first.new_zeros.data_ptr", "first.new_zeros.data_ptr", "int", "first.size", "first.size", "int", "second.size", "second.size", "first.new_zeros.size", "first.new_zeros.size", "first.new_zeros.size"], "methods", ["home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.inter_models.correlation.cupy_launch", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.inter_models.correlation.cupy_launch", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.inter_models.correlation.cupy_launch", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.inter_models.correlation.cupy_kernel", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.inter_models.correlation.cupy_kernel", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.inter_models.correlation.cupy_kernel"], ["\t", "@", "staticmethod", "\n", "def", "forward", "(", "self", ",", "first", ",", "second", ")", ":", "\n", "\t\t", "rbot0", "=", "first", ".", "new_zeros", "(", "[", "first", ".", "size", "(", "0", ")", ",", "first", ".", "size", "(", "2", ")", "+", "8", ",", "first", ".", "size", "(", "3", ")", "+", "8", ",", "first", ".", "size", "(", "1", ")", "]", ")", "\n", "rbot1", "=", "first", ".", "new_zeros", "(", "[", "first", ".", "size", "(", "0", ")", ",", "first", ".", "size", "(", "2", ")", "+", "8", ",", "first", ".", "size", "(", "3", ")", "+", "8", ",", "first", ".", "size", "(", "1", ")", "]", ")", "\n", "\n", "self", ".", "save_for_backward", "(", "first", ",", "second", ",", "rbot0", ",", "rbot1", ")", "\n", "\n", "assert", "(", "first", ".", "is_contiguous", "(", ")", "==", "True", ")", "\n", "assert", "(", "second", ".", "is_contiguous", "(", ")", "==", "True", ")", "\n", "\n", "output", "=", "first", ".", "new_zeros", "(", "[", "first", ".", "size", "(", "0", ")", ",", "81", ",", "first", ".", "size", "(", "2", ")", ",", "first", ".", "size", "(", "3", ")", "]", ")", "\n", "\n", "if", "first", ".", "is_cuda", "==", "True", ":", "\n", "\t\t\t", "n", "=", "first", ".", "size", "(", "2", ")", "*", "first", ".", "size", "(", "3", ")", "\n", "cupy_launch", "(", "'kernel_Correlation_rearrange'", ",", "cupy_kernel", "(", "'kernel_Correlation_rearrange'", ",", "{", "\n", "'input'", ":", "first", ",", "\n", "'output'", ":", "rbot0", "\n", "}", ")", ")", "(", "\n", "grid", "=", "tuple", "(", "[", "int", "(", "(", "n", "+", "16", "-", "1", ")", "/", "16", ")", ",", "first", ".", "size", "(", "1", ")", ",", "first", ".", "size", "(", "0", ")", "]", ")", ",", "\n", "block", "=", "tuple", "(", "[", "16", ",", "1", ",", "1", "]", ")", ",", "\n", "args", "=", "[", "n", ",", "first", ".", "data_ptr", "(", ")", ",", "rbot0", ".", "data_ptr", "(", ")", "]", ",", "\n", "stream", "=", "Stream", "\n", ")", "\n", "\n", "n", "=", "second", ".", "size", "(", "2", ")", "*", "second", ".", "size", "(", "3", ")", "\n", "cupy_launch", "(", "'kernel_Correlation_rearrange'", ",", "cupy_kernel", "(", "'kernel_Correlation_rearrange'", ",", "{", "\n", "'input'", ":", "second", ",", "\n", "'output'", ":", "rbot1", "\n", "}", ")", ")", "(", "\n", "grid", "=", "tuple", "(", "[", "int", "(", "(", "n", "+", "16", "-", "1", ")", "/", "16", ")", ",", "second", ".", "size", "(", "1", ")", ",", "second", ".", "size", "(", "0", ")", "]", ")", ",", "\n", "block", "=", "tuple", "(", "[", "16", ",", "1", ",", "1", "]", ")", ",", "\n", "args", "=", "[", "n", ",", "second", ".", "data_ptr", "(", ")", ",", "rbot1", ".", "data_ptr", "(", ")", "]", ",", "\n", "stream", "=", "Stream", "\n", ")", "\n", "\n", "n", "=", "output", ".", "size", "(", "1", ")", "*", "output", ".", "size", "(", "2", ")", "*", "output", ".", "size", "(", "3", ")", "\n", "cupy_launch", "(", "'kernel_Correlation_updateOutput'", ",", "cupy_kernel", "(", "'kernel_Correlation_updateOutput'", ",", "{", "\n", "'rbot0'", ":", "rbot0", ",", "\n", "'rbot1'", ":", "rbot1", ",", "\n", "'top'", ":", "output", "\n", "}", ")", ")", "(", "\n", "grid", "=", "tuple", "(", "[", "output", ".", "size", "(", "3", ")", ",", "output", ".", "size", "(", "2", ")", ",", "output", ".", "size", "(", "0", ")", "]", ")", ",", "\n", "block", "=", "tuple", "(", "[", "32", ",", "1", ",", "1", "]", ")", ",", "\n", "shared_mem", "=", "first", ".", "size", "(", "1", ")", "*", "4", ",", "\n", "args", "=", "[", "n", ",", "rbot0", ".", "data_ptr", "(", ")", ",", "rbot1", ".", "data_ptr", "(", ")", ",", "output", ".", "data_ptr", "(", ")", "]", ",", "\n", "stream", "=", "Stream", "\n", ")", "\n", "\n", "", "elif", "first", ".", "is_cuda", "==", "False", ":", "\n", "\t\t\t", "raise", "NotImplementedError", "(", ")", "\n", "\n", "# end", "\n", "\n", "", "return", "output", "\n", "# end", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.inter_models.correlation._FunctionCorrelation.backward": [[337, 389], ["gradOutput.is_contiguous", "first.new_zeros", "first.new_zeros", "range", "range", "NotImplementedError", "first.size", "first.size", "first.size", "first.size", "first.size", "first.size", "first.size", "first.size", "first.size", "first.size", "first.size", "correlation.cupy_launch", "first.size", "correlation.cupy_launch", "first.size", "first.size", "correlation.cupy_kernel", "tuple", "tuple", "first.size", "first.size", "correlation.cupy_kernel", "tuple", "tuple", "rbot0.data_ptr", "rbot1.data_ptr", "gradOutput.data_ptr", "gradFirst.data_ptr", "rbot0.data_ptr", "rbot1.data_ptr", "gradOutput.data_ptr", "gradSecond.data_ptr", "int", "int"], "methods", ["home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.inter_models.correlation.cupy_launch", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.inter_models.correlation.cupy_launch", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.inter_models.correlation.cupy_kernel", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.inter_models.correlation.cupy_kernel"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "self", ",", "gradOutput", ")", ":", "\n", "\t\t", "first", ",", "second", ",", "rbot0", ",", "rbot1", "=", "self", ".", "saved_tensors", "\n", "\n", "assert", "(", "gradOutput", ".", "is_contiguous", "(", ")", "==", "True", ")", "\n", "\n", "gradFirst", "=", "first", ".", "new_zeros", "(", "[", "first", ".", "size", "(", "0", ")", ",", "first", ".", "size", "(", "1", ")", ",", "first", ".", "size", "(", "2", ")", ",", "first", ".", "size", "(", "3", ")", "]", ")", "if", "self", ".", "needs_input_grad", "[", "0", "]", "==", "True", "else", "None", "\n", "gradSecond", "=", "first", ".", "new_zeros", "(", "[", "first", ".", "size", "(", "0", ")", ",", "first", ".", "size", "(", "1", ")", ",", "first", ".", "size", "(", "2", ")", ",", "first", ".", "size", "(", "3", ")", "]", ")", "if", "self", ".", "needs_input_grad", "[", "1", "]", "==", "True", "else", "None", "\n", "\n", "if", "first", ".", "is_cuda", "==", "True", ":", "\n", "\t\t\t", "if", "gradFirst", "is", "not", "None", ":", "\n", "\t\t\t\t", "for", "intSample", "in", "range", "(", "first", ".", "size", "(", "0", ")", ")", ":", "\n", "\t\t\t\t\t", "n", "=", "first", ".", "size", "(", "1", ")", "*", "first", ".", "size", "(", "2", ")", "*", "first", ".", "size", "(", "3", ")", "\n", "cupy_launch", "(", "'kernel_Correlation_updateGradFirst'", ",", "cupy_kernel", "(", "'kernel_Correlation_updateGradFirst'", ",", "{", "\n", "'rbot0'", ":", "rbot0", ",", "\n", "'rbot1'", ":", "rbot1", ",", "\n", "'gradOutput'", ":", "gradOutput", ",", "\n", "'gradFirst'", ":", "gradFirst", ",", "\n", "'gradSecond'", ":", "None", "\n", "}", ")", ")", "(", "\n", "grid", "=", "tuple", "(", "[", "int", "(", "(", "n", "+", "512", "-", "1", ")", "/", "512", ")", ",", "1", ",", "1", "]", ")", ",", "\n", "block", "=", "tuple", "(", "[", "512", ",", "1", ",", "1", "]", ")", ",", "\n", "args", "=", "[", "n", ",", "intSample", ",", "rbot0", ".", "data_ptr", "(", ")", ",", "rbot1", ".", "data_ptr", "(", ")", ",", "gradOutput", ".", "data_ptr", "(", ")", ",", "gradFirst", ".", "data_ptr", "(", ")", ",", "None", "]", ",", "\n", "stream", "=", "Stream", "\n", ")", "\n", "# end", "\n", "# end", "\n", "\n", "", "", "if", "gradSecond", "is", "not", "None", ":", "\n", "\t\t\t\t", "for", "intSample", "in", "range", "(", "first", ".", "size", "(", "0", ")", ")", ":", "\n", "\t\t\t\t\t", "n", "=", "first", ".", "size", "(", "1", ")", "*", "first", ".", "size", "(", "2", ")", "*", "first", ".", "size", "(", "3", ")", "\n", "cupy_launch", "(", "'kernel_Correlation_updateGradSecond'", ",", "cupy_kernel", "(", "'kernel_Correlation_updateGradSecond'", ",", "{", "\n", "'rbot0'", ":", "rbot0", ",", "\n", "'rbot1'", ":", "rbot1", ",", "\n", "'gradOutput'", ":", "gradOutput", ",", "\n", "'gradFirst'", ":", "None", ",", "\n", "'gradSecond'", ":", "gradSecond", "\n", "}", ")", ")", "(", "\n", "grid", "=", "tuple", "(", "[", "int", "(", "(", "n", "+", "512", "-", "1", ")", "/", "512", ")", ",", "1", ",", "1", "]", ")", ",", "\n", "block", "=", "tuple", "(", "[", "512", ",", "1", ",", "1", "]", ")", ",", "\n", "args", "=", "[", "n", ",", "intSample", ",", "rbot0", ".", "data_ptr", "(", ")", ",", "rbot1", ".", "data_ptr", "(", ")", ",", "gradOutput", ".", "data_ptr", "(", ")", ",", "None", ",", "gradSecond", ".", "data_ptr", "(", ")", "]", ",", "\n", "stream", "=", "Stream", "\n", ")", "\n", "# end", "\n", "# end", "\n", "\n", "", "", "", "elif", "first", ".", "is_cuda", "==", "False", ":", "\n", "\t\t\t", "raise", "NotImplementedError", "(", ")", "\n", "\n", "# end", "\n", "\n", "", "return", "gradFirst", ",", "gradSecond", "\n", "# end", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.inter_models.correlation.ModuleCorrelation.__init__": [[397, 399], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.data.dataloader_4frame.Video.__init__"], ["\t", "def", "__init__", "(", "self", ")", ":", "\n", "\t\t", "super", "(", "ModuleCorrelation", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# end", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.inter_models.correlation.ModuleCorrelation.forward": [[401, 403], ["_FunctionCorrelation.apply"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "tensorFirst", ",", "tensorSecond", ")", ":", "\n", "\t\t", "return", "_FunctionCorrelation", ".", "apply", "(", "tensorFirst", ",", "tensorSecond", ")", "\n", "# end", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.inter_models.correlation.cupy_kernel": [[237, 273], ["globals", "re.search", "int", "re.search.group", "objectVariables[].size", "strKernel.replace.replace", "re.search", "int", "re.search.group().split", "objectVariables[].stride", "strKernel.replace.replace", "re.search.group", "re.search.group", "str", "re.search.group", "re.search.group", "re.search.group", "range", "str", "str.join", "strArgs[].replace().replace().strip", "strArgs[].replace().replace", "strArgs[].replace"], "function", ["None"], ["def", "cupy_kernel", "(", "strFunction", ",", "objectVariables", ")", ":", "\n", "\t", "strKernel", "=", "globals", "(", ")", "[", "strFunction", "]", "\n", "\n", "while", "True", ":", "\n", "\t\t", "objectMatch", "=", "re", ".", "search", "(", "'(SIZE_)([0-4])(\\()([^\\)]*)(\\))'", ",", "strKernel", ")", "\n", "\n", "if", "objectMatch", "is", "None", ":", "\n", "\t\t\t", "break", "\n", "# end", "\n", "\n", "", "intArg", "=", "int", "(", "objectMatch", ".", "group", "(", "2", ")", ")", "\n", "\n", "strTensor", "=", "objectMatch", ".", "group", "(", "4", ")", "\n", "intSizes", "=", "objectVariables", "[", "strTensor", "]", ".", "size", "(", ")", "\n", "\n", "strKernel", "=", "strKernel", ".", "replace", "(", "objectMatch", ".", "group", "(", ")", ",", "str", "(", "intSizes", "[", "intArg", "]", ")", ")", "\n", "# end", "\n", "\n", "", "while", "True", ":", "\n", "\t\t", "objectMatch", "=", "re", ".", "search", "(", "'(VALUE_)([0-4])(\\()([^\\)]+)(\\))'", ",", "strKernel", ")", "\n", "\n", "if", "objectMatch", "is", "None", ":", "\n", "\t\t\t", "break", "\n", "# end", "\n", "\n", "", "intArgs", "=", "int", "(", "objectMatch", ".", "group", "(", "2", ")", ")", "\n", "strArgs", "=", "objectMatch", ".", "group", "(", "4", ")", ".", "split", "(", "','", ")", "\n", "\n", "strTensor", "=", "strArgs", "[", "0", "]", "\n", "intStrides", "=", "objectVariables", "[", "strTensor", "]", ".", "stride", "(", ")", "\n", "strIndex", "=", "[", "'(('", "+", "strArgs", "[", "intArg", "+", "1", "]", ".", "replace", "(", "'{'", ",", "'('", ")", ".", "replace", "(", "'}'", ",", "')'", ")", ".", "strip", "(", ")", "+", "')*'", "+", "str", "(", "intStrides", "[", "intArg", "]", ")", "+", "')'", "for", "intArg", "in", "range", "(", "intArgs", ")", "]", "\n", "\n", "strKernel", "=", "strKernel", ".", "replace", "(", "objectMatch", ".", "group", "(", "0", ")", ",", "strTensor", "+", "'['", "+", "str", ".", "join", "(", "'+'", ",", "strIndex", ")", "+", "']'", ")", "\n", "# end", "\n", "\n", "", "return", "strKernel", "\n", "# end", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.inter_models.correlation.cupy_launch": [[275, 278], ["cupy.util.memoize", "cupy.cuda.compile_with_cache().get_function", "cupy.cuda.compile_with_cache"], "function", ["None"], ["", "@", "cupy", ".", "util", ".", "memoize", "(", "for_each_device", "=", "True", ")", "\n", "def", "cupy_launch", "(", "strFunction", ",", "strKernel", ")", ":", "\n", "\t", "return", "cupy", ".", "cuda", ".", "compile_with_cache", "(", "strKernel", ")", ".", "get_function", "(", "strFunction", ")", "\n", "# end", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.inter_models.correlation.FunctionCorrelation": [[392, 394], ["_FunctionCorrelation.apply"], "function", ["None"], ["", "", "def", "FunctionCorrelation", "(", "tensorFirst", ",", "tensorSecond", ")", ":", "\n", "\t", "return", "_FunctionCorrelation", ".", "apply", "(", "tensorFirst", ",", "tensorSecond", ")", "\n", "# end", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.data.dataloader_4frame.LFRvideo.__init__": [[163, 217], ["opt.blurry_videos_dir.split", "opt.blur_interval.split", "torchvision.Normalize", "torchvision.Compose", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "range", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "dataloader_4frame._make_dataset", "len", "RuntimeError", "len", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "dataloader_4frame._make_dataset", "int", "torchvision.ToTensor", "int"], "methods", ["home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.data.dataloader_4frame._make_dataset", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.data.dataloader_4frame._make_dataset"], ["def", "__init__", "(", "self", ",", "opt", ",", "train", ")", ":", "\n", "        ", "\"\"\"\n        Parameters\n        ----------\n            root : string\n                Root directory path.\n            transform : callable, optional\n                A function/transform that takes in\n                a sample and returns a transformed version.\n                E.g, ``transforms.RandomCrop`` for images.\n            dim : tuple, optional\n                Dimensions of images in dataset. Default: (640, 360)\n            randomCropSize : tuple, optional\n                Dimensions of random crop to be applied. Default: (352, 352)\n            train : boolean, optional\n                Specifies if the dataset is for training or testing/validation.\n                `True` returns samples with data augmentation like random \n                flipping, random cropping, etc. while `False` returns the\n                samples without randomization. Default: True\n        \"\"\"", "\n", "\n", "\n", "# Populate the list with image paths for all the", "\n", "# frame in `root`.", "\n", "self", ".", "opt", "=", "opt", "\n", "dataset_dir", "=", "opt", ".", "blurry_videos_root", "\n", "videos_mix", "=", "opt", ".", "blurry_videos_dir", ".", "split", "(", "','", ")", "\n", "blur_interval", "=", "opt", ".", "blur_interval", ".", "split", "(", "','", ")", "\n", "if", "train", ":", "\n", "            ", "framesPath", "=", "[", "]", "\n", "self", ".", "sharp_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "sharp_videos", ",", "'train'", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "videos_mix", ")", ")", ":", "\n", "                ", "self", ".", "blurry_dir", "=", "os", ".", "path", ".", "join", "(", "dataset_dir", ",", "videos_mix", "[", "i", "]", ",", "'train'", ")", "\n", "framesPath", "+=", "_make_dataset", "(", "self", ".", "blurry_dir", ",", "self", ".", "sharp_dir", ",", "int", "(", "blur_interval", "[", "i", "]", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "blurry_dir", "=", "os", ".", "path", ".", "join", "(", "dataset_dir", ",", "videos_mix", "[", "-", "1", "]", ",", "'test'", ")", "\n", "self", ".", "sharp_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "sharp_videos", ",", "'test'", ")", "\n", "framesPath", "=", "_make_dataset", "(", "self", ".", "blurry_dir", ",", "self", ".", "sharp_dir", ",", "int", "(", "blur_interval", "[", "-", "1", "]", ")", ")", "\n", "\n", "\n", "# Raise error if no images found in root.", "\n", "", "if", "len", "(", "framesPath", ")", "==", "0", ":", "\n", "            ", "raise", "(", "RuntimeError", "(", "\"Found 0 files in subfolders of: \"", "+", "root", "+", "\"\\n\"", ")", ")", "\n", "\n", "", "dim", "=", "[", "640", ",", "360", "]", "\n", "self", ".", "cropX0", "=", "dim", "[", "0", "]", "-", "opt", ".", "crop_size_X", "\n", "self", ".", "cropY0", "=", "dim", "[", "1", "]", "-", "opt", ".", "crop_size_Y", "\n", "self", ".", "framesPath", "=", "framesPath", "\n", "self", ".", "train", "=", "train", "\n", "mean", "=", "[", "0.5", ",", "0.5", ",", "0.5", "]", "\n", "std", "=", "[", "1", ",", "1", ",", "1", "]", "\n", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "mean", ",", "\n", "std", "=", "std", ")", "\n", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", ",", "normalize", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.data.dataloader_4frame.LFRvideo.__getitem__": [[218, 286], ["dataloader_4frame.LFRvideo.framesPath[].items", "random.randint", "random.randint", "random.randint", "dataloader_4frame._pil_loader", "dataloader_4frame.LFRvideo.transform"], "methods", ["home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.data.dataloader_4frame._pil_loader"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Returns the sample corresponding to `index` from dataset.\n\n        The sample consists of two reference frames - B1 and B2 -\n        and coresponding start and end frame groundtruth B1_S B1_E ... \n\n        Parameters\n        ----------\n            index : int\n                Index\n\n        Returns\n        -------\n            tuple\n                (sample, returnIndex) where sample is \n                [I0, intermediate_frame, I1] and returnIndex is \n                the position of `random_intermediate_frame`. \n                e.g.- `returnIndex` of frame next to I0 would be 0 and\n                frame before I1 would be 6.\n        \"\"\"", "\n", "\n", "\n", "sample", "=", "{", "}", "\n", "\n", "if", "(", "self", ".", "train", ")", ":", "\n", "### Data Augmentation ###", "\n", "# Apply random crop on the input frames", "\n", "            ", "cropX", "=", "random", ".", "randint", "(", "0", ",", "self", ".", "cropX0", ")", "\n", "cropY", "=", "random", ".", "randint", "(", "0", ",", "self", ".", "cropY0", ")", "\n", "cropArea", "=", "(", "cropX", ",", "cropY", ",", "cropX", "+", "self", ".", "opt", ".", "crop_size_X", ",", "cropY", "+", "self", ".", "opt", ".", "crop_size_Y", ")", "\n", "# Random reverse frame", "\n", "# if (random.randint(0, 1)):", "\n", "#     tmp = self.framesPath[index]['B2']", "\n", "#     self.framesPath[index]['B2'] = self.framesPath[index]['B1']", "\n", "#     self.framesPath[index]['B1'] = tmp", "\n", "#     tmp = self.framesPath[index]['B0']", "\n", "#     self.framesPath[index]['B0'] = self.framesPath[index]['B3']", "\n", "#     self.framesPath[index]['B3'] = tmp", "\n", "\n", "# tmp = self.framesPath[index]['B2_S']", "\n", "# self.framesPath[index]['B2_S'] = self.framesPath[index]['B1_E']", "\n", "# self.framesPath[index]['B1_E'] = tmp", "\n", "# tmp = self.framesPath[index]['B2_E']", "\n", "# self.framesPath[index]['B2_E'] = self.framesPath[index]['B1_S']", "\n", "# self.framesPath[index]['B1_S'] = tmp", "\n", "\n", "# Random flip frame", "\n", "randomFrameFlip", "=", "random", ".", "randint", "(", "0", ",", "1", ")", "\n", "", "else", ":", "\n", "# Fixed settings to return same samples every epoch.", "\n", "# For validation/test sets.", "\n", "            ", "cropArea", "=", "None", "\n", "randomFrameFlip", "=", "0", "\n", "\n", "# Loop over for all frames corresponding to the `index`.", "\n", "", "for", "key", ",", "path", "in", "self", ".", "framesPath", "[", "index", "]", ".", "items", "(", ")", ":", "\n", "# Open image using pil and augment the image.", "\n", "            ", "if", "not", "(", "\"r\"", "in", "key", ")", ":", "\n", "                ", "image", "=", "_pil_loader", "(", "path", ",", "cropArea", "=", "cropArea", ",", "frameFlip", "=", "randomFrameFlip", ")", "\n", "# Apply transformation if specified.", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "                    ", "image", "=", "self", ".", "transform", "(", "image", ")", "\n", "", "sample", "[", "key", "]", "=", "image", "\n", "", "", "sample", "[", "'B1_path'", "]", "=", "self", ".", "framesPath", "[", "index", "]", "[", "'B1'", "]", "\n", "sample", "[", "'B2_path'", "]", "=", "self", ".", "framesPath", "[", "index", "]", "[", "'B2'", "]", "\n", "\n", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.data.dataloader_4frame.LFRvideo.__len__": [[288, 300], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Returns the size of dataset. Invoked as len(datasetObj).\n\n        Returns\n        -------\n            int\n                number of samples.\n        \"\"\"", "\n", "\n", "\n", "return", "len", "(", "self", ".", "framesPath", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.data.dataloader_4frame.LFRvideo.__repr__": [[301, 318], ["dataloader_4frame.LFRvideo.__len__", "dataloader_4frame.LFRvideo.transform.__repr__().replace", "dataloader_4frame.LFRvideo.transform.__repr__", "len"], "methods", ["home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.data.dataloader_4frame.Video.__len__", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.data.dataloader_4frame.Video.__repr__"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Returns printable representation of the dataset object.\n\n        Returns\n        -------\n            string\n                info.\n        \"\"\"", "\n", "\n", "\n", "fmt_str", "=", "'Dataset '", "+", "self", ".", "__class__", ".", "__name__", "+", "'\\n'", "\n", "fmt_str", "+=", "'    Number of datapoints: {}\\n'", ".", "format", "(", "self", ".", "__len__", "(", ")", ")", "\n", "fmt_str", "+=", "'    Root Location: {}\\n'", ".", "format", "(", "self", ".", "blurry_dir", ")", "\n", "tmp", "=", "'    Transforms (if any): '", "\n", "fmt_str", "+=", "'{0}{1}\\n'", ".", "format", "(", "tmp", ",", "self", ".", "transform", ".", "__repr__", "(", ")", ".", "replace", "(", "'\\n'", ",", "'\\n'", "+", "' '", "*", "len", "(", "tmp", ")", ")", ")", "\n", "return", "fmt_str", "\n", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.data.dataloader_4frame.UCI101Test.__init__": [[356, 379], ["dataloader_4frame._make_dataset", "len", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.data.dataloader_4frame._make_dataset"], ["def", "__init__", "(", "self", ",", "root", ",", "transform", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Parameters\n        ----------\n            root : string\n                Root directory path.\n            transform : callable, optional\n                A function/transform that takes in\n                a sample and returns a transformed version.\n                E.g, ``transforms.RandomCrop`` for images.\n        \"\"\"", "\n", "\n", "\n", "# Populate the list with image paths for all the", "\n", "# frame in `root`.", "\n", "framesPath", "=", "_make_dataset", "(", "root", ")", "\n", "# Raise error if no images found in root.", "\n", "if", "len", "(", "framesPath", ")", "==", "0", ":", "\n", "            ", "raise", "(", "RuntimeError", "(", "\"Found 0 files in subfolders of: \"", "+", "root", "+", "\"\\n\"", ")", ")", "\n", "\n", "", "self", ".", "root", "=", "root", "\n", "self", ".", "framesPath", "=", "framesPath", "\n", "self", ".", "transform", "=", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.data.dataloader_4frame.UCI101Test.__getitem__": [[380, 414], ["dataloader_4frame._pil_loader", "sample.append", "dataloader_4frame.UCI101Test.transform"], "methods", ["home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.data.dataloader_4frame._pil_loader"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Returns the sample corresponding to `index` from dataset.\n\n        The sample consists of two reference frames - I0 and I1 -\n        and a intermediate frame between I0 and I1.\n\n        Parameters\n        ----------\n            index : int\n                Index\n\n        Returns\n        -------\n            tuple\n                (sample, returnIndex) where sample is \n                [I0, intermediate_frame, I1] and returnIndex is \n                the position of `intermediate_frame`.\n                The returnIndex is always 3 and is being returned\n                to maintain compatibility with the `SuperSloMo`\n                dataloader where 3 corresponds to the middle frame.\n        \"\"\"", "\n", "\n", "\n", "sample", "=", "[", "]", "\n", "# Loop over for all frames corresponding to the `index`.", "\n", "for", "framePath", "in", "self", ".", "framesPath", "[", "index", "]", ":", "\n", "# Open image using pil.", "\n", "            ", "image", "=", "_pil_loader", "(", "framePath", ")", "\n", "# Apply transformation if specified.", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "                ", "image", "=", "self", ".", "transform", "(", "image", ")", "\n", "", "sample", ".", "append", "(", "image", ")", "\n", "", "return", "sample", ",", "3", "\n", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.data.dataloader_4frame.UCI101Test.__len__": [[416, 428], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Returns the size of dataset. Invoked as len(datasetObj).\n\n        Returns\n        -------\n            int\n                number of samples.\n        \"\"\"", "\n", "\n", "\n", "return", "len", "(", "self", ".", "framesPath", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.data.dataloader_4frame.UCI101Test.__repr__": [[429, 446], ["dataloader_4frame.UCI101Test.__len__", "dataloader_4frame.UCI101Test.transform.__repr__().replace", "dataloader_4frame.UCI101Test.transform.__repr__", "len"], "methods", ["home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.data.dataloader_4frame.Video.__len__", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.data.dataloader_4frame.Video.__repr__"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Returns printable representation of the dataset object.\n\n        Returns\n        -------\n            string\n                info.\n        \"\"\"", "\n", "\n", "\n", "fmt_str", "=", "'Dataset '", "+", "self", ".", "__class__", ".", "__name__", "+", "'\\n'", "\n", "fmt_str", "+=", "'    Number of datapoints: {}\\n'", ".", "format", "(", "self", ".", "__len__", "(", ")", ")", "\n", "fmt_str", "+=", "'    Root Location: {}\\n'", ".", "format", "(", "self", ".", "root", ")", "\n", "tmp", "=", "'    Transforms (if any): '", "\n", "fmt_str", "+=", "'{0}{1}\\n'", ".", "format", "(", "tmp", ",", "self", ".", "transform", ".", "__repr__", "(", ")", ".", "replace", "(", "'\\n'", ",", "'\\n'", "+", "' '", "*", "len", "(", "tmp", ")", ")", ")", "\n", "return", "fmt_str", "\n", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.data.dataloader_4frame.Video.__init__": [[479, 508], ["dataloader_4frame._make_video_dataset", "dataloader_4frame._pil_loader", "len", "RuntimeError", "int", "int"], "methods", ["home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.data.dataloader_4frame._make_video_dataset", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.data.dataloader_4frame._pil_loader"], ["def", "__init__", "(", "self", ",", "root", ",", "transform", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Parameters\n        ----------\n            root : string\n                Root directory path.\n            transform : callable, optional\n                A function/transform that takes in\n                a sample and returns a transformed version.\n                E.g, ``transforms.RandomCrop`` for images.\n        \"\"\"", "\n", "\n", "\n", "# Populate the list with image paths for all the", "\n", "# frame in `root`.", "\n", "framesPath", "=", "_make_video_dataset", "(", "root", ")", "\n", "\n", "# Get dimensions of frames", "\n", "frame", "=", "_pil_loader", "(", "framesPath", "[", "0", "]", ")", "\n", "self", ".", "origDim", "=", "frame", ".", "size", "\n", "self", ".", "dim", "=", "int", "(", "self", ".", "origDim", "[", "0", "]", "/", "32", ")", "*", "32", ",", "int", "(", "self", ".", "origDim", "[", "1", "]", "/", "32", ")", "*", "32", "\n", "\n", "# Raise error if no images found in root.", "\n", "if", "len", "(", "framesPath", ")", "==", "0", ":", "\n", "            ", "raise", "(", "RuntimeError", "(", "\"Found 0 files in: \"", "+", "root", "+", "\"\\n\"", ")", ")", "\n", "\n", "", "self", ".", "root", "=", "root", "\n", "self", ".", "framesPath", "=", "framesPath", "\n", "self", ".", "transform", "=", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.data.dataloader_4frame.Video.__getitem__": [[509, 538], ["dataloader_4frame._pil_loader", "sample.append", "dataloader_4frame.Video.transform"], "methods", ["home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.data.dataloader_4frame._pil_loader"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Returns the sample corresponding to `index` from dataset.\n\n        The sample consists of two reference frames - I0 and I1.\n\n        Parameters\n        ----------\n            index : int\n                Index\n\n        Returns\n        -------\n            list\n                sample is [I0, I1] where I0 is the frame with index\n                `index` and I1 is the next frame.\n        \"\"\"", "\n", "\n", "\n", "sample", "=", "[", "]", "\n", "# Loop over for all frames corresponding to the `index`.", "\n", "for", "framePath", "in", "[", "self", ".", "framesPath", "[", "index", "]", ",", "self", ".", "framesPath", "[", "index", "+", "1", "]", "]", ":", "\n", "# Open image using pil.", "\n", "            ", "image", "=", "_pil_loader", "(", "framePath", ",", "resizeDim", "=", "self", ".", "dim", ")", "\n", "# Apply transformation if specified.", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "                ", "image", "=", "self", ".", "transform", "(", "image", ")", "\n", "", "sample", ".", "append", "(", "image", ")", "\n", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.data.dataloader_4frame.Video.__len__": [[540, 555], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Returns the size of dataset. Invoked as len(datasetObj).\n\n        Returns\n        -------\n            int\n                number of samples.\n        \"\"\"", "\n", "\n", "\n", "# Using `-1` so that dataloader accesses only upto", "\n", "# frames [N-1, N] and not [N, N+1] which because frame", "\n", "# N+1 doesn't exist.", "\n", "return", "len", "(", "self", ".", "framesPath", ")", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.data.dataloader_4frame.Video.__repr__": [[556, 573], ["dataloader_4frame.Video.__len__", "dataloader_4frame.Video.transform.__repr__().replace", "dataloader_4frame.Video.transform.__repr__", "len"], "methods", ["home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.data.dataloader_4frame.Video.__len__", "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.data.dataloader_4frame.Video.__repr__"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Returns printable representation of the dataset object.\n\n        Returns\n        -------\n            string\n                info.\n        \"\"\"", "\n", "\n", "\n", "fmt_str", "=", "'Dataset '", "+", "self", ".", "__class__", ".", "__name__", "+", "'\\n'", "\n", "fmt_str", "+=", "'    Number of datapoints: {}\\n'", ".", "format", "(", "self", ".", "__len__", "(", ")", ")", "\n", "fmt_str", "+=", "'    Root Location: {}\\n'", ".", "format", "(", "self", ".", "root", ")", "\n", "tmp", "=", "'    Transforms (if any): '", "\n", "fmt_str", "+=", "'{0}{1}\\n'", ".", "format", "(", "tmp", ",", "self", ".", "transform", ".", "__repr__", "(", ")", ".", "replace", "(", "'\\n'", ",", "'\\n'", "+", "' '", "*", "len", "(", "tmp", ")", ")", ")", "\n", "return", "fmt_str", "", "", "", ""]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.data.dataloader_4frame._make_dataset": [[8, 59], ["enumerate", "sorted", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "sorted", "range", "os.listdir", "os.listdir", "os.path.isdir", "os.path.isdir", "os.listdir", "os.listdir", "framesPath.append", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "int", "int", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "len", "BlurryFramePath[].split", "BlurryFramePath[].split"], "function", ["None"], ["def", "_make_dataset", "(", "blurry_dir", ",", "sharp_dir", ",", "blur_inter", ")", ":", "\n", "    ", "\"\"\"\n    Creates a 2D list of all the frames in N clips containing\n    M frames each.\n\n    2D List Structure:\n    [[frame00, frame01,...frameM]  <-- clip0\n     [frame00, frame01,...frameM]  <-- clip0\n     :\n     [frame00, frame01,...frameM]] <-- clipN\n\n    Parameters\n    ----------\n        dir : string\n            root directory containing clips.\n\n    Returns\n    -------\n        list\n            2D list described above.\n    \"\"\"", "\n", "\n", "\n", "framesPath", "=", "[", "]", "\n", "# Find and loop over all the clips in root `dir`.", "\n", "count", "=", "0", "\n", "for", "index", ",", "folder", "in", "enumerate", "(", "sorted", "(", "os", ".", "listdir", "(", "blurry_dir", ")", ")", ")", ":", "\n", "        ", "BlurryFolderPath", "=", "os", ".", "path", ".", "join", "(", "blurry_dir", ",", "folder", ")", "\n", "SharpFolderPath", "=", "os", ".", "path", ".", "join", "(", "sharp_dir", ",", "folder", ")", "\n", "\n", "# Skip items which are not folders.", "\n", "if", "not", "(", "os", ".", "path", ".", "isdir", "(", "BlurryFolderPath", ")", ")", ":", "\n", "            ", "continue", "\n", "", "BlurryFramePath", "=", "sorted", "(", "os", ".", "listdir", "(", "BlurryFolderPath", ")", ")", "\n", "for", "frame_index", "in", "range", "(", "1", ",", "len", "(", "BlurryFramePath", ")", "-", "2", ")", ":", "\n", "            ", "framesPath", ".", "append", "(", "{", "}", ")", "\n", "framesPath", "[", "count", "]", "[", "'B0'", "]", "=", "os", ".", "path", ".", "join", "(", "BlurryFolderPath", ",", "BlurryFramePath", "[", "frame_index", "-", "1", "]", ")", "\n", "framesPath", "[", "count", "]", "[", "'B1'", "]", "=", "os", ".", "path", ".", "join", "(", "BlurryFolderPath", ",", "BlurryFramePath", "[", "frame_index", "]", ")", "\n", "framesPath", "[", "count", "]", "[", "'B2'", "]", "=", "os", ".", "path", ".", "join", "(", "BlurryFolderPath", ",", "BlurryFramePath", "[", "frame_index", "+", "1", "]", ")", "\n", "framesPath", "[", "count", "]", "[", "'B3'", "]", "=", "os", ".", "path", ".", "join", "(", "BlurryFolderPath", ",", "BlurryFramePath", "[", "frame_index", "+", "2", "]", ")", "\n", "num_frame_B1", "=", "int", "(", "BlurryFramePath", "[", "frame_index", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", "\n", "num_frame_B2", "=", "int", "(", "BlurryFramePath", "[", "frame_index", "+", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", "\n", "\n", "# framesPath[count]['B1_C'] = os.path.join(SharpFolderPath,\"%06d.png\"%(num_frame_B1))", "\n", "framesPath", "[", "count", "]", "[", "'B1_S'", "]", "=", "os", ".", "path", ".", "join", "(", "SharpFolderPath", ",", "\"%06d.png\"", "%", "(", "num_frame_B1", "-", "blur_inter", "//", "2", ")", ")", "\n", "framesPath", "[", "count", "]", "[", "'B1_E'", "]", "=", "os", ".", "path", ".", "join", "(", "SharpFolderPath", ",", "\"%06d.png\"", "%", "(", "num_frame_B1", "+", "blur_inter", "//", "2", ")", ")", "\n", "framesPath", "[", "count", "]", "[", "'B2_S'", "]", "=", "os", ".", "path", ".", "join", "(", "SharpFolderPath", ",", "\"%06d.png\"", "%", "(", "num_frame_B2", "-", "blur_inter", "//", "2", ")", ")", "\n", "framesPath", "[", "count", "]", "[", "'B2_E'", "]", "=", "os", ".", "path", ".", "join", "(", "SharpFolderPath", ",", "\"%06d.png\"", "%", "(", "num_frame_B2", "+", "blur_inter", "//", "2", ")", ")", "\n", "# ", "\n", "count", "+=", "1", "\n", "", "", "return", "framesPath", "\n", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.data.dataloader_4frame._make_video_dataset": [[60, 85], ["sorted", "os.listdir", "os.listdir", "framesPath.append", "os.path.join", "os.path.join"], "function", ["None"], ["", "def", "_make_video_dataset", "(", "dir", ")", ":", "\n", "    ", "\"\"\"\n    Creates a 1D list of all the frames.\n\n    1D List Structure:\n    [frame0, frame1,...frameN]\n\n    Parameters\n    ----------\n        dir : string\n            root directory containing frames.\n\n    Returns\n    -------\n        list\n            1D list described above.\n    \"\"\"", "\n", "\n", "\n", "framesPath", "=", "[", "]", "\n", "# Find and loop over all the frames in root `dir`.", "\n", "for", "image", "in", "sorted", "(", "os", ".", "listdir", "(", "dir", ")", ")", ":", "\n", "# Add path to list.", "\n", "        ", "framesPath", ".", "append", "(", "os", ".", "path", ".", "join", "(", "dir", ",", "image", ")", ")", "\n", "", "return", "framesPath", "\n", "\n"]], "home.repos.pwc.inspect_result.yjzhang96_UTI-VFI.data.dataloader_4frame._pil_loader": [[86, 118], ["open", "PIL.Image.open", "flipped_img.convert", "Image.open.resize", "Image.open.crop", "cropped_img.transpose"], "function", ["None"], ["", "def", "_pil_loader", "(", "path", ",", "cropArea", "=", "None", ",", "resizeDim", "=", "None", ",", "frameFlip", "=", "0", ")", ":", "\n", "    ", "\"\"\"\n    Opens image at `path` using pil and applies data augmentation.\n\n    Parameters\n    ----------\n        path : string\n            path of the image.\n        cropArea : tuple, optional\n            coordinates for cropping image. Default: None\n        resizeDim : tuple, optional\n            dimensions for resizing image. Default: None\n        frameFlip : int, optional\n            Non zero to flip image horizontally. Default: 0\n\n    Returns\n    -------\n        list\n            2D list described above.\n    \"\"\"", "\n", "\n", "\n", "# open path as file to avoid ResourceWarning (https://github.com/python-pillow/Pillow/issues/835)", "\n", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "img", "=", "Image", ".", "open", "(", "f", ")", "\n", "# Resize image if specified.", "\n", "resized_img", "=", "img", ".", "resize", "(", "resizeDim", ",", "Image", ".", "ANTIALIAS", ")", "if", "(", "resizeDim", "!=", "None", ")", "else", "img", "\n", "# Crop image if crop area specified.", "\n", "cropped_img", "=", "img", ".", "crop", "(", "cropArea", ")", "if", "(", "cropArea", "!=", "None", ")", "else", "resized_img", "\n", "# Flip image horizontally if specified.", "\n", "flipped_img", "=", "cropped_img", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "if", "frameFlip", "else", "cropped_img", "\n", "return", "flipped_img", ".", "convert", "(", "'RGB'", ")", "\n", "\n"]]}