{"home.repos.pwc.inspect_result.xmed-lab_rscfed.None.options.args_parser": [[3, 103], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "args_parser", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--root_path'", ",", "type", "=", "str", ",", "default", "=", "'med_classify_dataset/skin'", ",", "\n", "help", "=", "'dataset root dir'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "48", ",", "help", "=", "'batch_size per gpu'", ")", "\n", "parser", ".", "add_argument", "(", "'--drop_rate'", ",", "type", "=", "int", ",", "default", "=", "0.2", ",", "help", "=", "'dropout rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--ema_consistency'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'whether train baseline model'", ")", "\n", "parser", ".", "add_argument", "(", "'--base_lr'", ",", "type", "=", "float", ",", "default", "=", "2e-4", ",", "\n", "help", "=", "'maximum epoch number to train'", ")", "# adam:2e-4 sgd:2e-3 adamw:2e-3?", "\n", "parser", ".", "add_argument", "(", "'--deterministic'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'whether use deterministic training'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "1337", ",", "help", "=", "'random seed'", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu'", ",", "type", "=", "str", ",", "default", "=", "'0,1,2'", ",", "help", "=", "'GPU to use'", ")", "\n", "parser", ".", "add_argument", "(", "'--local_ep'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'local epoch'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_users'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "help", "=", "'local epoch'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_labeled'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'local epoch'", ")", "\n", "parser", ".", "add_argument", "(", "'--rounds'", ",", "type", "=", "int", ",", "default", "=", "200", ",", "help", "=", "'local epoch'", ")", "\n", "parser", ".", "add_argument", "(", "'--log_file_name'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "'The log file name'", ")", "\n", "parser", ".", "add_argument", "(", "'--logdir'", ",", "type", "=", "str", ",", "default", "=", "'logs/'", ",", "help", "=", "'The log file name'", ")", "\n", "parser", ".", "add_argument", "(", "'--opt'", ",", "type", "=", "str", ",", "default", "=", "'sgd'", ",", "help", "=", "'sgd or adam or adamw'", ")", "\n", "parser", ".", "add_argument", "(", "'--beta'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "\n", "help", "=", "'The parameter for the dirichlet distribution for data partitioning'", ")", "\n", "parser", ".", "add_argument", "(", "'--partition'", ",", "type", "=", "str", ",", "default", "=", "'noniid'", ",", "help", "=", "'the data partitioning strategy'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ",", "choices", "=", "[", "'cifar10'", ",", "'skin'", ",", "'SVHN'", ",", "'cifar100'", "]", ",", "default", "=", "'cifar10'", ",", "\n", "help", "=", "'dataset used for training'", ")", "\n", "parser", ".", "add_argument", "(", "'--datadir'", ",", "type", "=", "str", ",", "required", "=", "False", ",", "default", "=", "\"./data/\"", ",", "help", "=", "\"Data directory\"", ")", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "type", "=", "str", ",", "default", "=", "'simple-cnn'", ",", "help", "=", "'neural network used in training'", ")", "\n", "parser", ".", "add_argument", "(", "'--out_dim'", ",", "type", "=", "int", ",", "default", "=", "256", ",", "help", "=", "'the output dimension for the projection layer'", ")", "\n", "### tune", "\n", "parser", ".", "add_argument", "(", "'--resume'", ",", "'-r'", ",", "action", "=", "'store_true'", ",", "help", "=", "'resume from checkpoint'", ")", "\n", "parser", ".", "add_argument", "(", "'--start_epoch'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'start_epoch'", ")", "\n", "#parser.add_argument('--weight_decay', dest=\"weight_decay\", default=0.02, type=float, help='weight decay')", "\n", "\n", "### costs", "\n", "parser", ".", "add_argument", "(", "'--label_uncertainty'", ",", "type", "=", "str", ",", "default", "=", "'U-Ones'", ",", "help", "=", "'label type'", ")", "\n", "parser", ".", "add_argument", "(", "'--ema_decay'", ",", "type", "=", "float", ",", "default", "=", "0.999", ",", "help", "=", "'ema_decay'", ")", "\n", "parser", ".", "add_argument", "(", "'--consistency'", ",", "type", "=", "float", ",", "default", "=", "1", ",", "help", "=", "'consistency'", ")", "\n", "parser", ".", "add_argument", "(", "'--consistency_rampup'", ",", "type", "=", "float", ",", "default", "=", "30", ",", "help", "=", "'consistency_rampup'", ")", "\n", "parser", ".", "add_argument", "(", "'--lambda_u'", ",", "type", "=", "float", ",", "default", "=", "0.02", ",", "help", "=", "'start_epoch'", ")", "\n", "\n", "### unlabeled client training parameters", "\n", "parser", ".", "add_argument", "(", "'--num-warmup-epochs'", ",", "\n", "'--num-warm-up-epochs'", ",", "\n", "dest", "=", "\"num_warmup_epochs\"", ",", "\n", "default", "=", "0", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "'number of warm-up epochs for unsupervised loss ramp-up during training'", "\n", "'set to 0 to disable ramp-up'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--lr-step-size'", ",", "\n", "'--learning-rate-step-size'", ",", "\n", "dest", "=", "\"lr_step_size\"", ",", "\n", "default", "=", "5", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "'step size for step learning rate decay'", ")", "\n", "parser", ".", "add_argument", "(", "\"--max_grad_norm\"", ",", "\n", "dest", "=", "\"max_grad_norm\"", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "5", ",", "\n", "help", "=", "\"max gradient norm allowed (used for gradient clipping)\"", ")", "\n", "### unsupervised loss", "\n", "parser", ".", "add_argument", "(", "'--conf-threshold'", ",", "\n", "'--confidence-threshold'", ",", "\n", "dest", "=", "\"confidence_threshold\"", ",", "\n", "default", "=", "0.9", ",", "\n", "type", "=", "float", ",", "\n", "help", "=", "\"confidence threshold for pair loss and unsupervised loss\"", ")", "\n", "###", "\n", "parser", ".", "add_argument", "(", "'--test'", ",", "action", "=", "'store_true'", ",", "help", "=", "'resume from checkpoint'", ")", "\n", "\n", "### meta", "\n", "parser", ".", "add_argument", "(", "'--meta_round'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'number of sub-consensus groups'", ")", "\n", "parser", ".", "add_argument", "(", "'--meta_client_num'", ",", "type", "=", "int", ",", "default", "=", "5", ",", "help", "=", "'number of clients in each sub-consensus group'", ")", "\n", "parser", ".", "add_argument", "(", "'--from_labeled'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'whether the warm-up checkpoint is trained only on labeled client'", ")", "\n", "parser", ".", "add_argument", "(", "'--w_mul_times'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "'times of amplifying weight of supervised model when aggregating'", ")", "\n", "parser", ".", "add_argument", "(", "'--unsup_lr'", ",", "type", "=", "float", ",", "default", "=", "0.021", ",", "\n", "help", "=", "'lr of unsupervised clients'", ")", "\n", "parser", ".", "add_argument", "(", "'--sup_scale'", ",", "type", "=", "float", "or", "int", ",", "default", "=", "1", ",", "help", "=", "'scale factor for labeled clients when computing model distance'", ")", "\n", "parser", ".", "add_argument", "(", "'--dist_scale'", ",", "type", "=", "float", "or", "int", ",", "default", "=", "1e4", ",", "\n", "help", "=", "'scale factor when computing model distance'", ")", "\n", "parser", ".", "add_argument", "(", "'--input_sz'", ",", "type", "=", "int", ",", "default", "=", "32", ",", "help", "=", "'actual input size'", ")", "\n", "parser", ".", "add_argument", "(", "'--pre_sz'", ",", "type", "=", "int", ",", "default", "=", "40", ",", "help", "=", "'image size for pre-processing'", ")", "\n", "parser", ".", "add_argument", "(", "'--unsup_num'", ",", "type", "=", "int", ",", "default", "=", "9", ",", "help", "=", "'number of unsupervised clients'", ")", "\n", "# parser.add_argument('--record_dist', action='store_true', help='resume from checkpoint')", "\n", "# parser.add_argument('--add_drop', action='store_true', help='resume from checkpoint')", "\n", "# parser.add_argument('--cos_labw', action='store_true', help='resume from checkpoint')", "\n", "# parser.add_argument('--un_dist',default='',type=str,choices=[\"avg\", \"prev\",\"mix\"], help='resume from checkpoint')", "\n", "# parser.add_argument('--un_dist_onlyunsup', action='store_true', help='resume from checkpoint')", "\n", "# parser.add_argument('--same_pred_unsup', action='store_true', help='resume from checkpoint')", "\n", "# parser.add_argument('--inverse', action='store_true', help='resume from checkpoint')", "\n", "# parser.add_argument('--agg_per_meta', action='store_true', help='resume from checkpoint')", "\n", "# parser.add_argument('--lr-cosine-factor', '--learning-rate-cosine-factor', dest=\"lr_cosine_factor\",", "\n", "#                     default=0.49951171875,", "\n", "#                     type=float,", "\n", "#                     help='factor for cosine learning rate decay')", "\n", "# parser.add_argument('--global_step', type=int, default=0, help='global_step')", "\n", "# parser.add_argument('--num_unlabeled', type=int, default=9, help='local epoch')", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "", ""]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.None.train_main.split": [[23, 30], ["int", "range", "set", "list", "len", "numpy.random.choice", "range", "set", "len"], "function", ["None"], ["def", "split", "(", "dataset", ",", "num_users", ")", ":", "\n", "    ", "num_items", "=", "int", "(", "len", "(", "dataset", ")", "/", "num_users", ")", "\n", "dict_users", ",", "all_idxs", "=", "{", "}", ",", "[", "i", "for", "i", "in", "range", "(", "len", "(", "dataset", ")", ")", "]", "\n", "for", "i", "in", "range", "(", "num_users", ")", ":", "\n", "        ", "dict_users", "[", "i", "]", "=", "set", "(", "np", ".", "random", ".", "choice", "(", "all_idxs", ",", "num_items", ",", "replace", "=", "False", ")", ")", "\n", "all_idxs", "=", "list", "(", "set", "(", "all_idxs", ")", "-", "dict_users", "[", "i", "]", ")", "\n", "", "return", "dict_users", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.None.train_main.test": [[32, 54], ["networks.models.ModelFedCon", "torch.nn.DataParallel.cuda", "net.cuda.load_state_dict", "validation.epochVal_metrics_test", "numpy.array().mean", "numpy.array().mean", "len", "torch.nn.DataParallel", "torch.nn.DataParallel", "cifar_load.get_dataloader", "args.gpu.split", "cifar_load.get_dataloader", "numpy.array", "numpy.array", "range", "round", "len"], "function", ["home.repos.pwc.inspect_result.xmed-lab_rscfed.None.ramp.RampUp.load_state_dict", "home.repos.pwc.inspect_result.xmed-lab_rscfed.None.validation.epochVal_metrics_test", "home.repos.pwc.inspect_result.xmed-lab_rscfed.None.cifar_load.get_dataloader", "home.repos.pwc.inspect_result.xmed-lab_rscfed.None.train_main.split", "home.repos.pwc.inspect_result.xmed-lab_rscfed.None.cifar_load.get_dataloader"], ["", "def", "test", "(", "epoch", ",", "checkpoint", ",", "data_test", ",", "label_test", ",", "n_classes", ")", ":", "\n", "\n", "    ", "net", "=", "ModelFedCon", "(", "args", ".", "model", ",", "args", ".", "out_dim", ",", "n_classes", "=", "n_classes", ")", "\n", "if", "len", "(", "args", ".", "gpu", ".", "split", "(", "','", ")", ")", ">", "1", ":", "\n", "        ", "net", "=", "torch", ".", "nn", ".", "DataParallel", "(", "net", ",", "device_ids", "=", "[", "i", "for", "i", "in", "range", "(", "round", "(", "len", "(", "args", ".", "gpu", ")", "/", "2", ")", ")", "]", ")", "\n", "", "model", "=", "net", ".", "cuda", "(", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", ")", "\n", "\n", "if", "args", ".", "dataset", "==", "'SVHN'", "or", "args", ".", "dataset", "==", "'cifar100'", ":", "\n", "        ", "test_dl", ",", "test_ds", "=", "get_dataloader", "(", "args", ",", "data_test", ",", "label_test", ",", "\n", "args", ".", "dataset", ",", "args", ".", "datadir", ",", "args", ".", "batch_size", ",", "\n", "is_labeled", "=", "True", ",", "is_testing", "=", "True", ")", "\n", "", "elif", "args", ".", "dataset", "==", "'skin'", ":", "\n", "        ", "test_dl", ",", "test_ds", "=", "get_dataloader", "(", "args", ",", "data_test", ",", "label_test", ",", "\n", "args", ".", "dataset", ",", "args", ".", "datadir", ",", "args", ".", "batch_size", ",", "\n", "is_labeled", "=", "True", ",", "is_testing", "=", "True", ",", "pre_sz", "=", "args", ".", "pre_sz", ",", "input_sz", "=", "args", ".", "input_sz", ")", "\n", "\n", "", "AUROCs", ",", "Accus", "=", "epochVal_metrics_test", "(", "model", ",", "test_dl", ",", "args", ".", "model", ",", "thresh", "=", "0.4", ",", "n_classes", "=", "n_classes", ")", "\n", "AUROC_avg", "=", "np", ".", "array", "(", "AUROCs", ")", ".", "mean", "(", ")", "\n", "Accus_avg", "=", "np", ".", "array", "(", "Accus", ")", ".", "mean", "(", ")", "\n", "\n", "return", "AUROC_avg", ",", "Accus_avg", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.None.FedAvg.FedAvg": [[4, 22], ["copy.deepcopy", "len", "sum", "range"], "function", ["None"], ["def", "FedAvg", "(", "w", ",", "client_freq", ")", ":", "\n", "    ", "w_avg", "=", "copy", ".", "deepcopy", "(", "w", "[", "0", "]", ")", "\n", "# for k in w_avg.keys():", "\n", "#     for i in range(1, len(w)):", "\n", "#         #print('done')", "\n", "#         w_avg[k] += w[i][k]*client_freq[i]", "\n", "#     w_avg[k] = torch.div(w_avg[k], len(w))", "\n", "num_takepart", "=", "len", "(", "w", ")", "\n", "ratio_takepart", "=", "sum", "(", "client_freq", "[", ":", "num_takepart", "]", ")", "\n", "ratio", "=", "[", "freq", "/", "ratio_takepart", "for", "freq", "in", "client_freq", "[", ":", "num_takepart", "]", "]", "\n", "for", "net_id", "in", "range", "(", "num_takepart", ")", ":", "\n", "        ", "if", "net_id", "==", "0", ":", "\n", "            ", "for", "key", "in", "w", "[", "net_id", "]", ":", "\n", "                ", "w_avg", "[", "key", "]", "=", "w", "[", "net_id", "]", "[", "key", "]", "*", "ratio", "[", "net_id", "]", "\n", "", "", "else", ":", "\n", "            ", "for", "key", "in", "w", "[", "net_id", "]", ":", "\n", "                ", "w_avg", "[", "key", "]", "+=", "w", "[", "net_id", "]", "[", "key", "]", "*", "ratio", "[", "net_id", "]", "\n", "", "", "", "return", "w_avg", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.None.FedAvg.model_dist": [[24, 32], ["torch.zeros().float", "torch.zeros().float.cpu().item", "w_1.keys", "w_2.keys", "torch.norm", "torch.norm.cpu", "torch.zeros", "torch.zeros().float.cpu", "w_1[].cpu", "w_2[].cpu"], "function", ["None"], ["", "def", "model_dist", "(", "w_1", ",", "w_2", ")", ":", "\n", "    ", "assert", "w_1", ".", "keys", "(", ")", "==", "w_2", ".", "keys", "(", ")", ",", "\"Error: cannot compute distance between dict with different keys\"", "\n", "dist_total", "=", "torch", ".", "zeros", "(", "1", ")", ".", "float", "(", ")", "\n", "for", "key", "in", "w_1", ":", "\n", "        ", "dist", "=", "torch", ".", "norm", "(", "w_1", "[", "key", "]", ".", "cpu", "(", ")", "-", "w_2", "[", "key", "]", ".", "cpu", "(", ")", ")", "\n", "dist_total", "+=", "dist", ".", "cpu", "(", ")", "\n", "\n", "", "return", "dist_total", ".", "cpu", "(", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.None.FedAvg.update_global_ema": [[34, 41], ["min", "w.keys", "ema_w.keys", "w[].cpu", "ema_w[].mul_().add_", "ema_w[].mul_"], "function", ["None"], ["", "def", "update_global_ema", "(", "w", ",", "ema_w", ",", "alpha", ",", "global_step", ")", ":", "\n", "    ", "alpha", "=", "min", "(", "1", "-", "1", "/", "(", "global_step", "+", "1", ")", ",", "alpha", ")", "\n", "assert", "w", ".", "keys", "(", ")", "==", "ema_w", ".", "keys", "(", ")", ",", "'Error: aggregating models with different keys'", "\n", "# w_after = copy.deepcopy(w)", "\n", "for", "key", "in", "w", ":", "\n", "        ", "w", "[", "key", "]", "=", "w", "[", "key", "]", ".", "cpu", "(", ")", "\n", "ema_w", "[", "key", "]", ".", "mul_", "(", "alpha", ")", ".", "add_", "(", "w", "[", "key", "]", ",", "alpha", "=", "1", "-", "alpha", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.None.ramp.RampUp.__init__": [[6, 9], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "length", ":", "int", ",", "current", ":", "int", "=", "0", ")", ":", "\n", "        ", "self", ".", "current", "=", "current", "\n", "self", ".", "length", "=", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.None.ramp.RampUp.__call__": [[10, 13], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "__call__", "(", "self", ",", "current", ":", "Optional", "[", "int", "]", "=", "None", ",", "is_step", ":", "bool", "=", "True", ")", "->", "float", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.None.ramp.RampUp.state_dict": [[14, 16], ["dict"], "methods", ["None"], ["", "def", "state_dict", "(", "self", ")", "->", "Dict", "[", "str", ",", "Any", "]", ":", "\n", "        ", "return", "dict", "(", "current", "=", "self", ".", "current", ",", "length", "=", "self", ".", "length", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.None.ramp.RampUp.load_state_dict": [[17, 28], ["ramp.RampUp._verify_state_dict"], "methods", ["home.repos.pwc.inspect_result.xmed-lab_rscfed.None.ramp.RampUp._verify_state_dict"], ["", "def", "load_state_dict", "(", "self", ",", "state_dict", ":", "Dict", "[", "str", ",", "Any", "]", ",", "strict", ":", "bool", "=", "True", ")", ":", "\n", "        ", "if", "strict", ":", "\n", "            ", "is_equal", ",", "incompatible_keys", "=", "self", ".", "_verify_state_dict", "(", "state_dict", ")", "\n", "assert", "is_equal", ",", "f\"loaded state dict contains incompatible keys: {incompatible_keys}\"", "\n", "\n", "# for attr_name, attr_value in state_dict.items():", "\n", "#     if attr_name in self.__dict__:", "\n", "#         self.__dict__[attr_name] = attr_value", "\n", "\n", "", "self", ".", "current", "=", "state_dict", "[", "\"current\"", "]", "\n", "self", ".", "length", "=", "state_dict", "[", "\"length\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.None.ramp.RampUp._verify_state_dict": [[29, 36], ["set", "set", "ramp.RampUp.__dict__.keys", "state_dict.keys", "set.union", "set.intersection", "len"], "methods", ["None"], ["", "def", "_verify_state_dict", "(", "self", ",", "state_dict", ":", "Dict", "[", "str", ",", "Any", "]", ")", "->", "Tuple", "[", "bool", ",", "Set", "[", "str", "]", "]", ":", "\n", "        ", "self_keys", "=", "set", "(", "self", ".", "__dict__", ".", "keys", "(", ")", ")", "\n", "state_dict_keys", "=", "set", "(", "state_dict", ".", "keys", "(", ")", ")", "\n", "incompatible_keys", "=", "self_keys", ".", "union", "(", "state_dict_keys", ")", "-", "self_keys", ".", "intersection", "(", "state_dict_keys", ")", "\n", "is_equal", "=", "(", "len", "(", "incompatible_keys", ")", "==", "0", ")", "\n", "\n", "return", "is_equal", ",", "incompatible_keys", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.None.ramp.RampUp._update_step": [[37, 40], ["None"], "methods", ["None"], ["", "def", "_update_step", "(", "self", ",", "is_step", ":", "bool", ")", ":", "\n", "        ", "if", "is_step", ":", "\n", "            ", "self", ".", "current", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.None.ramp.LinearRampUp.__call__": [[42, 54], ["ramp.LinearRampUp._update_step"], "methods", ["home.repos.pwc.inspect_result.xmed-lab_rscfed.None.ramp.RampUp._update_step"], ["    ", "def", "__call__", "(", "self", ",", "current", ":", "Optional", "[", "int", "]", "=", "None", ",", "is_step", ":", "bool", "=", "True", ")", "->", "float", ":", "\n", "        ", "if", "current", "is", "not", "None", ":", "\n", "            ", "self", ".", "current", "=", "current", "\n", "\n", "", "if", "self", ".", "current", ">=", "self", ".", "length", ":", "\n", "            ", "ramp_up", "=", "1.0", "\n", "", "else", ":", "\n", "            ", "ramp_up", "=", "self", ".", "current", "/", "self", ".", "length", "\n", "\n", "", "self", ".", "_update_step", "(", "is_step", ")", "\n", "\n", "return", "ramp_up", "", "", "", ""]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.None.local_supervised.SupervisedLocalUpdate.__init__": [[15, 29], ["utils.losses.NTXentLoss", "networks.models.ModelFedCon", "torch.nn.DataParallel.cuda", "torch.nn.DataParallel.cuda", "len", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "args.gpu.split", "range", "round", "len"], "methods", ["home.repos.pwc.inspect_result.xmed-lab_rscfed.None.train_main.split"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "idxs", ",", "n_classes", ")", ":", "\n", "        ", "self", ".", "epoch", "=", "0", "\n", "self", ".", "iter_num", "=", "0", "\n", "# self.confuse_matrix = torch.zeros((5, 5)).cuda()", "\n", "self", ".", "base_lr", "=", "args", ".", "base_lr", "\n", "self", ".", "data_idx", "=", "idxs", "\n", "self", ".", "max_grad_norm", "=", "args", ".", "max_grad_norm", "\n", "temperature", "=", "0.1", "# tao in paper", "\n", "self", ".", "cont_loss_func", "=", "losses", ".", "NTXentLoss", "(", "temperature", ")", "\n", "\n", "net", "=", "ModelFedCon", "(", "args", ".", "model", ",", "args", ".", "out_dim", ",", "n_classes", "=", "n_classes", ")", "\n", "if", "len", "(", "args", ".", "gpu", ".", "split", "(", "','", ")", ")", ">", "1", ":", "\n", "            ", "net", "=", "torch", ".", "nn", ".", "DataParallel", "(", "net", ",", "device_ids", "=", "[", "i", "for", "i", "in", "range", "(", "round", "(", "len", "(", "args", ".", "gpu", ")", "/", "2", ")", ")", "]", ")", "\n", "", "self", ".", "model", "=", "net", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.None.local_supervised.SupervisedLocalUpdate.train": [[30, 82], ["local_supervised.SupervisedLocalUpdate.model.load_state_dict", "local_supervised.SupervisedLocalUpdate.model.cuda().train", "local_supervised.SupervisedLocalUpdate.optimizer.load_state_dict", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "logging.info", "range", "local_supervised.SupervisedLocalUpdate.model.cpu", "copy.deepcopy", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "enumerate", "epoch_loss.append", "local_supervised.SupervisedLocalUpdate.model.state_dict", "copy.deepcopy", "local_supervised.SupervisedLocalUpdate.model.cuda", "local_supervised.SupervisedLocalUpdate.model.parameters", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "label_batch.unsqueeze.unsqueeze.long().squeeze", "local_supervised.SupervisedLocalUpdate.model", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "local_supervised.SupervisedLocalUpdate.optimizer.zero_grad", "loss.backward", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "local_supervised.SupervisedLocalUpdate.optimizer.step", "batch_loss.append", "numpy.array().mean", "sum", "len", "local_supervised.SupervisedLocalUpdate.optimizer.state_dict", "local_supervised.SupervisedLocalUpdate.model.parameters", "torch.optim.AdamW", "torch.optim.AdamW", "torch.optim.AdamW", "torch.optim.AdamW", "image_batch.cuda", "label_batch.unsqueeze.unsqueeze.cuda", "len", "label_batch.unsqueeze.unsqueeze.unsqueeze", "len", "outputs.unsqueeze.unsqueeze.unsqueeze", "local_supervised.SupervisedLocalUpdate.model.parameters", "loss.item", "local_supervised.SupervisedLocalUpdate.model.parameters", "label_batch.unsqueeze.unsqueeze.long", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.xmed-lab_rscfed.None.ramp.RampUp.load_state_dict", "home.repos.pwc.inspect_result.xmed-lab_rscfed.None.local_unsupervised.UnsupervisedLocalUpdate.train", "home.repos.pwc.inspect_result.xmed-lab_rscfed.None.ramp.RampUp.load_state_dict", "home.repos.pwc.inspect_result.xmed-lab_rscfed.None.ramp.RampUp.state_dict", "home.repos.pwc.inspect_result.xmed-lab_rscfed.None.ramp.RampUp.state_dict"], ["", "def", "train", "(", "self", ",", "args", ",", "net_w", ",", "op_dict", ",", "dataloader", ",", "n_classes", ")", ":", "\n", "        ", "self", ".", "model", ".", "load_state_dict", "(", "copy", ".", "deepcopy", "(", "net_w", ")", ")", "\n", "self", ".", "model", ".", "cuda", "(", ")", ".", "train", "(", ")", "\n", "if", "args", ".", "opt", "==", "'adam'", ":", "\n", "            ", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "base_lr", ",", "\n", "betas", "=", "(", "0.9", ",", "0.999", ")", ",", "weight_decay", "=", "5e-4", ")", "\n", "", "elif", "args", ".", "opt", "==", "'sgd'", ":", "\n", "            ", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "args", ".", "base_lr", ",", "momentum", "=", "0.9", ",", "\n", "weight_decay", "=", "5e-4", ")", "\n", "", "elif", "args", ".", "opt", "==", "'adamw'", ":", "\n", "            ", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "AdamW", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "base_lr", ",", "\n", "weight_decay", "=", "0.02", ")", "\n", "# SimPLE original paper: lr=0.002, weight_decay=0.02", "\n", "", "self", ".", "optimizer", ".", "load_state_dict", "(", "op_dict", ")", "\n", "\n", "for", "param_group", "in", "self", ".", "optimizer", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "self", ".", "base_lr", "\n", "\n", "", "loss_fn", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "epoch_loss", "=", "[", "]", "\n", "logging", ".", "info", "(", "'Begin supervised training'", ")", "\n", "for", "epoch", "in", "range", "(", "args", ".", "local_ep", ")", ":", "\n", "            ", "batch_loss", "=", "[", "]", "\n", "for", "i", ",", "(", "_", ",", "image_batch", ",", "label_batch", ")", "in", "enumerate", "(", "dataloader", ")", ":", "\n", "\n", "                ", "image_batch", ",", "label_batch", "=", "image_batch", ".", "cuda", "(", ")", ",", "label_batch", ".", "cuda", "(", ")", "\n", "label_batch", "=", "label_batch", ".", "long", "(", ")", ".", "squeeze", "(", ")", "\n", "inputs", "=", "image_batch", "\n", "_", ",", "activations", ",", "outputs", "=", "self", ".", "model", "(", "inputs", ",", "model", "=", "args", ".", "model", ")", "\n", "\n", "if", "len", "(", "label_batch", ".", "shape", ")", "==", "0", ":", "\n", "                    ", "label_batch", "=", "label_batch", ".", "unsqueeze", "(", "dim", "=", "0", ")", "\n", "", "if", "len", "(", "outputs", ".", "shape", ")", "!=", "2", ":", "\n", "                    ", "outputs", "=", "outputs", ".", "unsqueeze", "(", "dim", "=", "0", ")", "\n", "\n", "", "loss_classification", "=", "loss_fn", "(", "outputs", ",", "label_batch", ")", "\n", "loss", "=", "loss_classification", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "\n", "max_norm", "=", "self", ".", "max_grad_norm", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "batch_loss", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "self", ".", "iter_num", "=", "self", ".", "iter_num", "+", "1", "\n", "\n", "", "self", ".", "epoch", "=", "self", ".", "epoch", "+", "1", "\n", "epoch_loss", ".", "append", "(", "np", ".", "array", "(", "batch_loss", ")", ".", "mean", "(", ")", ")", "\n", "\n", "", "self", ".", "model", ".", "cpu", "(", ")", "\n", "return", "self", ".", "model", ".", "state_dict", "(", ")", ",", "sum", "(", "epoch_loss", ")", "/", "len", "(", "epoch_loss", ")", ",", "copy", ".", "deepcopy", "(", "\n", "self", ".", "optimizer", ".", "state_dict", "(", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.None.utils_SimPLE.RandomAugmentation.__init__": [[26, 32], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.xmed-lab_rscfed.loss.loss.UnsupervisedLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "augmentation", ":", "nn", ".", "Module", ",", "p", ":", "float", "=", "0.5", ",", "same_on_batch", ":", "bool", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "prob", "=", "p", "\n", "self", ".", "augmentation", "=", "augmentation", "\n", "self", ".", "same_on_batch", "=", "same_on_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.None.utils_SimPLE.RandomAugmentation.forward": [[33, 50], ["len", "utils_SimPLE.RandomAugmentation.augmentation", "len", "torch.where", "random.random.random", "utils_SimPLE.RandomAugmentation.augmentation", "torch.rand"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "images", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "        ", "is_batch", "=", "len", "(", "images", ")", "<", "4", "\n", "\n", "if", "not", "is_batch", "or", "self", ".", "same_on_batch", ":", "\n", "            ", "if", "random", "(", ")", "<=", "self", ".", "prob", ":", "\n", "                ", "out", "=", "self", ".", "augmentation", "(", "images", ")", "\n", "", "else", ":", "\n", "                ", "out", "=", "images", "\n", "", "", "else", ":", "\n", "            ", "out", "=", "self", ".", "augmentation", "(", "images", ")", "\n", "batch_size", "=", "len", "(", "images", ")", "\n", "\n", "# get the indices of data which shouldn't apply augmentation", "\n", "indices", "=", "torch", ".", "where", "(", "torch", ".", "rand", "(", "batch_size", ")", ">", "self", ".", "prob", ")", "\n", "out", "[", "indices", "]", "=", "images", "[", "indices", "]", "\n", "\n", "", "return", "out", "", "", "", ""]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.None.utils_SimPLE.label_guessing": [[11, 18], ["model.eval", "torch.no_grad", "torch.nn.functional.softmax", "functools.reduce", "len", "model"], "function", ["None"], ["def", "label_guessing", "(", "model", ":", "nn", ".", "Module", ",", "batches_1", ":", "Sequence", "[", "Tensor", "]", ",", "model_type", "=", "None", ")", "->", "Tensor", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "probs", "=", "[", "F", ".", "softmax", "(", "model", "(", "batch", ",", "model", "=", "model_type", ")", "[", "2", "]", ",", "dim", "=", "1", ")", "for", "batch", "in", "batches_1", "]", "\n", "mean_prob", "=", "reduce", "(", "lambda", "x", ",", "y", ":", "x", "+", "y", ",", "probs", ")", "/", "len", "(", "batches_1", ")", "\n", "\n", "", "return", "mean_prob", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.None.utils_SimPLE.sharpen": [[19, 22], ["sharpened_x.sum"], "function", ["None"], ["", "def", "sharpen", "(", "x", ":", "Tensor", ",", "t", "=", "0.5", ")", "->", "Tensor", ":", "\n", "    ", "sharpened_x", "=", "x", "**", "(", "1", "/", "t", ")", "\n", "return", "sharpened_x", "/", "sharpened_x", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.None.local_unsupervised.DatasetSplit.__init__": [[31, 34], ["list"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "idxs", ")", ":", "\n", "        ", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "idxs", "=", "list", "(", "idxs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.None.local_unsupervised.DatasetSplit.__len__": [[35, 37], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "idxs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.None.local_unsupervised.DatasetSplit.__getitem__": [[38, 41], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "items", ",", "index", ",", "weak_aug", ",", "strong_aug", ",", "label", "=", "self", ".", "dataset", "[", "self", ".", "idxs", "[", "item", "]", "]", "\n", "return", "items", ",", "index", ",", "weak_aug", ",", "strong_aug", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.None.local_unsupervised.UnsupervisedLocalUpdate.__init__": [[44, 77], ["networks.models.ModelFedCon", "networks.models.ModelFedCon", "torch.nn.DataParallel.cuda", "torch.nn.DataParallel.cuda", "torch.nn.DataParallel.cuda", "torch.nn.DataParallel.cuda", "torch.nn.DataParallel.cuda", "torch.nn.DataParallel.cuda", "torch.nn.DataParallel.cuda", "torch.nn.DataParallel.cuda", "local_unsupervised.UnsupervisedLocalUpdate.ema_model.parameters", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torchvision.transforms.Normalize", "ramp.LinearRampUp", "len", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "param.detach_", "round", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "round", "args.gpu.split", "local_unsupervised.UnsupervisedLocalUpdate.model.parameters", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "len", "local_unsupervised.UnsupervisedLocalUpdate.model.parameters", "torch.optim.AdamW", "torch.optim.AdamW", "torch.optim.AdamW", "torch.optim.AdamW", "torch.optim.AdamW", "torch.optim.AdamW", "torch.optim.AdamW", "torch.optim.AdamW", "torch.optim.AdamW", "torch.optim.AdamW", "torch.optim.AdamW", "torch.optim.AdamW", "torch.optim.AdamW", "torch.optim.AdamW", "torch.optim.AdamW", "torch.optim.AdamW", "len", "local_unsupervised.UnsupervisedLocalUpdate.model.parameters", "range", "range", "round", "round", "len", "len"], "methods", ["home.repos.pwc.inspect_result.xmed-lab_rscfed.None.train_main.split"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "idxs", ",", "n_classes", ")", ":", "\n", "        ", "net", "=", "ModelFedCon", "(", "args", ".", "model", ",", "args", ".", "out_dim", ",", "n_classes", "=", "n_classes", ")", "\n", "net_ema", "=", "ModelFedCon", "(", "args", ".", "model", ",", "args", ".", "out_dim", ",", "n_classes", "=", "n_classes", ")", "\n", "\n", "if", "len", "(", "args", ".", "gpu", ".", "split", "(", "','", ")", ")", ">", "1", ":", "\n", "            ", "net", "=", "torch", ".", "nn", ".", "DataParallel", "(", "net", ",", "device_ids", "=", "[", "i", "for", "i", "in", "range", "(", "round", "(", "len", "(", "args", ".", "gpu", ")", "/", "2", ")", ")", "]", ")", "\n", "net_ema", "=", "torch", ".", "nn", ".", "DataParallel", "(", "net_ema", ",", "device_ids", "=", "[", "i", "for", "i", "in", "range", "(", "round", "(", "len", "(", "args", ".", "gpu", ")", "/", "2", ")", ")", "]", ")", "\n", "", "self", ".", "ema_model", "=", "net_ema", ".", "cuda", "(", ")", "\n", "self", ".", "model", "=", "net", ".", "cuda", "(", ")", "\n", "\n", "for", "param", "in", "self", ".", "ema_model", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "detach_", "(", ")", "\n", "", "self", ".", "data_idxs", "=", "idxs", "\n", "self", ".", "epoch", "=", "0", "\n", "self", ".", "iter_num", "=", "0", "\n", "self", ".", "flag", "=", "True", "\n", "self", ".", "unsup_lr", "=", "args", ".", "unsup_lr", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", ")", "\n", "self", ".", "max_grad_norm", "=", "args", ".", "max_grad_norm", "\n", "self", ".", "norm", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "\n", "self", ".", "max_step", "=", "args", ".", "rounds", "*", "round", "(", "len", "(", "self", ".", "data_idxs", ")", "/", "args", ".", "batch_size", ")", "\n", "if", "args", ".", "opt", "==", "'adam'", ":", "\n", "            ", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "unsup_lr", ",", "\n", "betas", "=", "(", "0.9", ",", "0.999", ")", ",", "weight_decay", "=", "5e-4", ")", "\n", "", "elif", "args", ".", "opt", "==", "'sgd'", ":", "\n", "            ", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "unsup_lr", ",", "momentum", "=", "0.9", ",", "\n", "weight_decay", "=", "5e-4", ")", "\n", "", "elif", "args", ".", "opt", "==", "'adamw'", ":", "\n", "            ", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "AdamW", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "unsup_lr", ",", "\n", "weight_decay", "=", "0.02", ")", "\n", "", "self", ".", "max_warmup_step", "=", "round", "(", "len", "(", "self", ".", "data_idxs", ")", "/", "args", ".", "batch_size", ")", "*", "args", ".", "num_warmup_epochs", "\n", "self", ".", "ramp_up", "=", "LinearRampUp", "(", "length", "=", "self", ".", "max_warmup_step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.None.local_unsupervised.UnsupervisedLocalUpdate.train": [[78, 153], ["local_unsupervised.UnsupervisedLocalUpdate.model.load_state_dict", "local_unsupervised.UnsupervisedLocalUpdate.model.train", "local_unsupervised.UnsupervisedLocalUpdate.ema_model.eval", "local_unsupervised.UnsupervisedLocalUpdate.model.cuda", "local_unsupervised.UnsupervisedLocalUpdate.ema_model.cuda", "local_unsupervised.UnsupervisedLocalUpdate.optimizer.load_state_dict", "logging.info", "range", "local_unsupervised.UnsupervisedLocalUpdate.model.cpu", "local_unsupervised.UnsupervisedLocalUpdate.ema_model.cpu", "copy.deepcopy", "local_unsupervised.UnsupervisedLocalUpdate.ema_model.load_state_dict", "logging.info", "enumerate", "epoch_loss.append", "local_unsupervised.UnsupervisedLocalUpdate.model.state_dict", "local_unsupervised.UnsupervisedLocalUpdate.ema_model.state_dict", "copy.deepcopy", "train_right.cpu().item", "same_total.cpu().item", "copy.deepcopy", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "label_batch.squeeze", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "len", "sum", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "sum", "local_unsupervised.UnsupervisedLocalUpdate.ramp_up", "local_unsupervised.UnsupervisedLocalUpdate.optimizer.zero_grad", "loss.backward", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "local_unsupervised.UnsupervisedLocalUpdate.optimizer.step", "local_unsupervised.update_ema_variables", "batch_loss.append", "sum", "len", "local_unsupervised.UnsupervisedLocalUpdate.optimizer.state_dict", "weak_aug_batch[].cuda", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "utils_SimPLE.label_guessing", "utils_SimPLE.sharpen", "len", "label.unsqueeze.unsqueeze.unsqueeze", "local_unsupervised.UnsupervisedLocalUpdate.model", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "local_unsupervised.UnsupervisedLocalUpdate.model.parameters", "loss.item", "sum", "len", "train_right.cpu", "same_total.cpu", "range", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "utils.losses.softmax_mse_loss", "len", "pseu[].cpu", "label_batch[].int", "range", "range", "pseu[].cpu", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max"], "methods", ["home.repos.pwc.inspect_result.xmed-lab_rscfed.None.ramp.RampUp.load_state_dict", "home.repos.pwc.inspect_result.xmed-lab_rscfed.None.local_unsupervised.UnsupervisedLocalUpdate.train", "home.repos.pwc.inspect_result.xmed-lab_rscfed.None.ramp.RampUp.load_state_dict", "home.repos.pwc.inspect_result.xmed-lab_rscfed.None.ramp.RampUp.load_state_dict", "home.repos.pwc.inspect_result.xmed-lab_rscfed.None.ramp.RampUp.state_dict", "home.repos.pwc.inspect_result.xmed-lab_rscfed.None.ramp.RampUp.state_dict", "home.repos.pwc.inspect_result.xmed-lab_rscfed.None.local_unsupervised.update_ema_variables", "home.repos.pwc.inspect_result.xmed-lab_rscfed.None.ramp.RampUp.state_dict", "home.repos.pwc.inspect_result.xmed-lab_rscfed.None.utils_SimPLE.label_guessing", "home.repos.pwc.inspect_result.xmed-lab_rscfed.None.utils_SimPLE.sharpen", "home.repos.pwc.inspect_result.xmed-lab_rscfed.utils.losses.softmax_mse_loss"], ["", "def", "train", "(", "self", ",", "args", ",", "net_w", ",", "op_dict", ",", "epoch", ",", "unlabeled_idx", ",", "train_dl_local", ",", "n_classes", ")", ":", "\n", "        ", "self", ".", "model", ".", "load_state_dict", "(", "copy", ".", "deepcopy", "(", "net_w", ")", ")", "\n", "self", ".", "model", ".", "train", "(", ")", "\n", "self", ".", "ema_model", ".", "eval", "(", ")", "\n", "\n", "self", ".", "model", ".", "cuda", "(", ")", "\n", "self", ".", "ema_model", ".", "cuda", "(", ")", "\n", "\n", "self", ".", "optimizer", ".", "load_state_dict", "(", "op_dict", ")", "\n", "\n", "for", "param_group", "in", "self", ".", "optimizer", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "self", ".", "unsup_lr", "\n", "\n", "", "self", ".", "epoch", "=", "epoch", "\n", "if", "self", ".", "flag", ":", "\n", "            ", "self", ".", "ema_model", ".", "load_state_dict", "(", "copy", ".", "deepcopy", "(", "net_w", ")", ")", "\n", "self", ".", "flag", "=", "False", "\n", "logging", ".", "info", "(", "'EMA model initialized'", ")", "\n", "\n", "", "epoch_loss", "=", "[", "]", "\n", "logging", ".", "info", "(", "'Unlabeled client %d begin unsupervised training'", "%", "unlabeled_idx", ")", "\n", "correct_pseu", "=", "0", "\n", "all_pseu", "=", "0", "\n", "test_right", "=", "0", "\n", "test_right_ema", "=", "0", "\n", "train_right", "=", "0", "\n", "same_total", "=", "0", "\n", "for", "epoch", "in", "range", "(", "args", ".", "local_ep", ")", ":", "\n", "            ", "batch_loss", "=", "[", "]", "\n", "\n", "for", "i", ",", "(", "_", ",", "weak_aug_batch", ",", "label_batch", ")", "in", "enumerate", "(", "train_dl_local", ")", ":", "\n", "                ", "weak_aug_batch", "=", "[", "weak_aug_batch", "[", "version", "]", ".", "cuda", "(", ")", "for", "version", "in", "range", "(", "len", "(", "weak_aug_batch", ")", ")", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "guessed", "=", "label_guessing", "(", "self", ".", "ema_model", ",", "[", "weak_aug_batch", "[", "0", "]", "]", ",", "args", ".", "model", ")", "\n", "sharpened", "=", "sharpen", "(", "guessed", ")", "\n", "\n", "", "pseu", "=", "torch", ".", "argmax", "(", "sharpened", ",", "dim", "=", "1", ")", "\n", "label", "=", "label_batch", ".", "squeeze", "(", ")", "\n", "if", "len", "(", "label", ".", "shape", ")", "==", "0", ":", "\n", "                    ", "label", "=", "label", ".", "unsqueeze", "(", "dim", "=", "0", ")", "\n", "\n", "", "correct_pseu", "+=", "torch", ".", "sum", "(", "label", "[", "torch", ".", "max", "(", "sharpened", ",", "dim", "=", "1", ")", "[", "0", "]", ">", "args", ".", "confidence_threshold", "]", "==", "pseu", "[", "\n", "torch", ".", "max", "(", "sharpened", ",", "dim", "=", "1", ")", "[", "0", "]", ">", "args", ".", "confidence_threshold", "]", ".", "cpu", "(", ")", ")", ".", "item", "(", ")", "\n", "all_pseu", "+=", "len", "(", "pseu", "[", "torch", ".", "max", "(", "sharpened", ",", "dim", "=", "1", ")", "[", "0", "]", ">", "args", ".", "confidence_threshold", "]", ")", "\n", "train_right", "+=", "sum", "(", "[", "pseu", "[", "i", "]", ".", "cpu", "(", ")", "==", "label_batch", "[", "i", "]", ".", "int", "(", ")", "for", "i", "in", "range", "(", "label_batch", ".", "shape", "[", "0", "]", ")", "]", ")", "\n", "\n", "logits_str", "=", "self", ".", "model", "(", "weak_aug_batch", "[", "1", "]", ",", "model", "=", "args", ".", "model", ")", "[", "2", "]", "\n", "probs_str", "=", "F", ".", "softmax", "(", "logits_str", ",", "dim", "=", "1", ")", "\n", "pred_label", "=", "torch", ".", "argmax", "(", "logits_str", ",", "dim", "=", "1", ")", "\n", "\n", "same_total", "+=", "sum", "(", "[", "pred_label", "[", "sam", "]", "==", "pseu", "[", "sam", "]", "for", "sam", "in", "range", "(", "logits_str", ".", "shape", "[", "0", "]", ")", "]", ")", "\n", "\n", "loss_u", "=", "torch", ".", "sum", "(", "losses", ".", "softmax_mse_loss", "(", "probs_str", ",", "sharpened", ")", ")", "/", "args", ".", "batch_size", "\n", "\n", "ramp_up_value", "=", "self", ".", "ramp_up", "(", "current", "=", "self", ".", "epoch", ")", "\n", "\n", "loss", "=", "ramp_up_value", "*", "args", ".", "lambda_u", "*", "loss_u", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "\n", "max_norm", "=", "self", ".", "max_grad_norm", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "update_ema_variables", "(", "self", ".", "model", ",", "self", ".", "ema_model", ",", "args", ".", "ema_decay", ",", "self", ".", "iter_num", ")", "\n", "\n", "batch_loss", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "\n", "self", ".", "iter_num", "=", "self", ".", "iter_num", "+", "1", "\n", "\n", "", "epoch_loss", ".", "append", "(", "sum", "(", "batch_loss", ")", "/", "len", "(", "batch_loss", ")", ")", "\n", "self", ".", "epoch", "=", "self", ".", "epoch", "+", "1", "\n", "", "self", ".", "model", ".", "cpu", "(", ")", "\n", "self", ".", "ema_model", ".", "cpu", "(", ")", "\n", "return", "self", ".", "model", ".", "state_dict", "(", ")", ",", "self", ".", "ema_model", ".", "state_dict", "(", ")", ",", "sum", "(", "epoch_loss", ")", "/", "len", "(", "epoch_loss", ")", ",", "copy", ".", "deepcopy", "(", "\n", "self", ".", "optimizer", ".", "state_dict", "(", ")", ")", ",", "ramp_up_value", ",", "correct_pseu", ",", "all_pseu", ",", "test_right", ",", "train_right", ".", "cpu", "(", ")", ".", "item", "(", ")", ",", "test_right_ema", ",", "same_total", ".", "cpu", "(", ")", ".", "item", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.None.local_unsupervised.get_current_consistency_weight": [[19, 21], ["utils.ramps.sigmoid_rampup"], "function", ["home.repos.pwc.inspect_result.xmed-lab_rscfed.utils.ramps.sigmoid_rampup"], ["def", "get_current_consistency_weight", "(", "epoch", ")", ":", "\n", "    ", "return", "args", ".", "consistency", "*", "ramps", ".", "sigmoid_rampup", "(", "epoch", ",", "args", ".", "consistency_rampup", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.None.local_unsupervised.update_ema_variables": [[24, 28], ["min", "zip", "ema_model.parameters", "model.parameters", "ema_param.data.mul_().add_", "ema_param.data.mul_"], "function", ["None"], ["", "def", "update_ema_variables", "(", "model", ",", "ema_model", ",", "alpha", ",", "global_step", ")", ":", "\n", "    ", "alpha", "=", "min", "(", "1", "-", "1", "/", "(", "global_step", "+", "1", ")", ",", "alpha", ")", "\n", "for", "ema_param", ",", "param", "in", "zip", "(", "ema_model", ".", "parameters", "(", ")", ",", "model", ".", "parameters", "(", ")", ")", ":", "\n", "        ", "ema_param", ".", "data", ".", "mul_", "(", "alpha", ")", ".", "add_", "(", "param", ".", "data", ",", "alpha", "=", "1", "-", "alpha", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.None.cifar_load.load_cifar10_data": [[14, 24], ["torchvision.Compose", "datasets.CIFAR10_truncated", "datasets.CIFAR10_truncated", "torchvision.ToTensor"], "function", ["None"], ["def", "load_cifar10_data", "(", "datadir", ")", ":", "\n", "    ", "transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", "]", ")", "\n", "\n", "cifar10_train_ds", "=", "CIFAR10_truncated", "(", "datadir", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "transform", ")", "\n", "cifar10_test_ds", "=", "CIFAR10_truncated", "(", "datadir", ",", "train", "=", "False", ",", "download", "=", "True", ",", "transform", "=", "transform", ")", "\n", "\n", "X_train", ",", "y_train", "=", "cifar10_train_ds", ".", "data", ",", "cifar10_train_ds", ".", "target", "\n", "X_test", ",", "y_test", "=", "cifar10_test_ds", ".", "data", ",", "cifar10_test_ds", ".", "target", "\n", "\n", "return", "(", "X_train", ",", "y_train", ",", "X_test", ",", "y_test", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.None.cifar_load.load_cifar100_data": [[26, 39], ["torchvision.Compose", "datasets.CIFAR100_truncated", "datasets.CIFAR100_truncated", "torchvision.ToTensor"], "function", ["None"], ["", "def", "load_cifar100_data", "(", "datadir", ")", ":", "\n", "    ", "transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", "]", ")", "\n", "\n", "cifar100_train_ds", "=", "CIFAR100_truncated", "(", "datadir", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "transform", ")", "\n", "cifar100_test_ds", "=", "CIFAR100_truncated", "(", "datadir", ",", "train", "=", "False", ",", "download", "=", "True", ",", "transform", "=", "transform", ")", "\n", "\n", "X_train", ",", "y_train", "=", "cifar100_train_ds", ".", "data", ",", "cifar100_train_ds", ".", "target", "\n", "X_test", ",", "y_test", "=", "cifar100_test_ds", ".", "data", ",", "cifar100_test_ds", ".", "target", "\n", "\n", "# y_train = y_train.numpy()", "\n", "# y_test = y_test.numpy()", "\n", "\n", "return", "(", "X_train", ",", "y_train", ",", "X_test", ",", "y_test", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.None.cifar_load.load_SVHN_data": [[41, 51], ["torchvision.Compose", "datasets.SVHN_truncated", "datasets.SVHN_truncated", "torchvision.ToTensor"], "function", ["None"], ["", "def", "load_SVHN_data", "(", "datadir", ")", ":", "\n", "    ", "transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", "]", ")", "\n", "\n", "SVHN_train_ds", "=", "SVHN_truncated", "(", "datadir", ",", "split", "=", "'train'", ",", "download", "=", "True", ",", "transform", "=", "transform", ")", "\n", "SVHN_test_ds", "=", "SVHN_truncated", "(", "datadir", ",", "split", "=", "'test'", ",", "download", "=", "True", ",", "transform", "=", "transform", ")", "\n", "\n", "X_train", ",", "y_train", "=", "SVHN_train_ds", ".", "data", ",", "SVHN_train_ds", ".", "target", "\n", "X_test", ",", "y_test", "=", "SVHN_test_ds", ".", "data", ",", "SVHN_test_ds", ".", "target", "\n", "\n", "return", "(", "X_train", ",", "y_train", ",", "X_test", ",", "y_test", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.None.cifar_load.load_skin_data": [[53, 76], ["pandas.read_csv", "pandas.concat", "[].values.astype().tolist", "[].values.astype", "[].values.astype().tolist", "[].values.astype", "range", "range", "len", "X_train.append", "y_train.append", "len", "X_test.append", "y_test.append", "[].values.astype", "[].values.astype", "CLASS_NAMES.index", "CLASS_NAMES.index"], "function", ["None"], ["", "def", "load_skin_data", "(", "datadir", ",", "train_idxs", ",", "test_idxs", ")", ":", "# idxs\u76f8\u5bf9\u6240\u6709data", "\n", "    ", "CLASS_NAMES", "=", "[", "'akiec'", ",", "'bcc'", ",", "'bkl'", ",", "'df'", ",", "'mel'", ",", "'nv'", ",", "'vasc'", "]", "\n", "all_data_path", "=", "'med_classify_dataset/HAM10000_metadata'", "\n", "all_data_df", "=", "pd", ".", "read_csv", "(", "all_data_path", ")", "\n", "all_data_df", "=", "pd", ".", "concat", "(", "[", "all_data_df", "[", "'image_id'", "]", ",", "all_data_df", "[", "'dx'", "]", "]", ",", "axis", "=", "1", ")", "\n", "\n", "X_train", ",", "y_train", ",", "X_test", ",", "y_test", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "train_df", "=", "all_data_df", ".", "iloc", "[", "train_idxs", "]", "\n", "test_df", "=", "all_data_df", ".", "iloc", "[", "test_idxs", "]", "\n", "\n", "train_names", "=", "all_data_df", ".", "iloc", "[", "train_idxs", "]", "[", "'image_id'", "]", ".", "values", ".", "astype", "(", "str", ")", ".", "tolist", "(", ")", "\n", "train_lab", "=", "all_data_df", ".", "iloc", "[", "train_idxs", "]", "[", "'dx'", "]", ".", "values", ".", "astype", "(", "str", ")", "\n", "test_names", "=", "all_data_df", ".", "iloc", "[", "test_idxs", "]", "[", "'image_id'", "]", ".", "values", ".", "astype", "(", "str", ")", ".", "tolist", "(", ")", "\n", "test_lab", "=", "all_data_df", ".", "iloc", "[", "test_idxs", "]", "[", "'dx'", "]", ".", "values", ".", "astype", "(", "str", ")", "\n", "\n", "for", "idx", "in", "range", "(", "len", "(", "train_idxs", ")", ")", ":", "\n", "        ", "X_train", ".", "append", "(", "datadir", "+", "train_names", "[", "idx", "]", "+", "'.jpg'", ")", "\n", "y_train", ".", "append", "(", "CLASS_NAMES", ".", "index", "(", "train_lab", "[", "idx", "]", ")", ")", "\n", "\n", "", "for", "idx", "in", "range", "(", "len", "(", "test_idxs", ")", ")", ":", "\n", "        ", "X_test", ".", "append", "(", "datadir", "+", "test_names", "[", "idx", "]", "+", "'.jpg'", ")", "\n", "y_test", ".", "append", "(", "CLASS_NAMES", ".", "index", "(", "test_lab", "[", "idx", "]", ")", ")", "\n", "", "return", "X_train", ",", "y_train", ",", "X_test", ",", "y_test", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.None.cifar_load.record_net_data_stats": [[78, 97], ["net_dataidx_map.items", "net_cls_counts.items", "print", "print", "logger.info", "numpy.unique", "torch.items", "data_list.append", "numpy.mean", "numpy.std", "str", "range", "len"], "function", ["None"], ["", "def", "record_net_data_stats", "(", "y_train", ",", "net_dataidx_map", ")", ":", "\n", "    ", "net_cls_counts", "=", "{", "}", "\n", "\n", "for", "net_i", ",", "dataidx", "in", "net_dataidx_map", ".", "items", "(", ")", ":", "\n", "        ", "unq", ",", "unq_cnt", "=", "np", ".", "unique", "(", "y_train", "[", "dataidx", "]", ",", "return_counts", "=", "True", ")", "\n", "tmp", "=", "{", "unq", "[", "i", "]", ":", "unq_cnt", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "unq", ")", ")", "}", "\n", "net_cls_counts", "[", "net_i", "]", "=", "tmp", "\n", "\n", "", "data_list", "=", "[", "]", "\n", "for", "net_id", ",", "data", "in", "net_cls_counts", ".", "items", "(", ")", ":", "\n", "        ", "n_total", "=", "0", "\n", "for", "class_id", ",", "n_data", "in", "data", ".", "items", "(", ")", ":", "\n", "            ", "n_total", "+=", "n_data", "\n", "", "data_list", ".", "append", "(", "n_total", ")", "\n", "", "print", "(", "'mean:'", ",", "np", ".", "mean", "(", "data_list", ")", ")", "\n", "print", "(", "'std:'", ",", "np", ".", "std", "(", "data_list", ")", ")", "\n", "logger", ".", "info", "(", "'Data statistics: %s'", "%", "str", "(", "net_cls_counts", ")", ")", "\n", "\n", "return", "net_cls_counts", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.None.cifar_load.partition_data": [[99, 147], ["numpy.random.get_state", "numpy.random.shuffle", "numpy.random.set_state", "numpy.random.shuffle", "cifar_load.record_net_data_stats", "cifar_load.load_cifar10_data", "numpy.random.permutation", "numpy.array_split", "int", "range", "range", "range", "range", "numpy.random.shuffle", "len", "numpy.random.shuffle", "numpy.random.dirichlet", "numpy.array", "min", "range", "range", "numpy.repeat", "np.array.sum", "numpy.where", "idx.tolist", "zip", "len", "zip", "numpy.split", "len", "numpy.cumsum", "len", "int", "len"], "function", ["home.repos.pwc.inspect_result.xmed-lab_rscfed.None.cifar_load.record_net_data_stats", "home.repos.pwc.inspect_result.xmed-lab_rscfed.None.cifar_load.load_cifar10_data", "home.repos.pwc.inspect_result.xmed-lab_rscfed.None.train_main.split"], ["", "def", "partition_data", "(", "dataset", ",", "datadir", ",", "logdir", ",", "partition", ",", "n_parties", ",", "labeled_num", ",", "beta", "=", "0.4", ")", ":", "\n", "    ", "if", "dataset", "==", "'cifar10'", ":", "\n", "        ", "X_train", ",", "y_train", ",", "X_test", ",", "y_test", "=", "load_cifar10_data", "(", "datadir", ")", "\n", "\n", "", "state", "=", "np", ".", "random", ".", "get_state", "(", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "X_train", ")", "\n", "# print(a)", "\n", "# result:[6 4 5 3 7 2 0 1 8 9]", "\n", "np", ".", "random", ".", "set_state", "(", "state", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "y_train", ")", "\n", "n_train", "=", "y_train", ".", "shape", "[", "0", "]", "\n", "\n", "if", "partition", "==", "\"homo\"", "or", "partition", "==", "\"iid\"", ":", "\n", "        ", "idxs", "=", "np", ".", "random", ".", "permutation", "(", "n_train", ")", "\n", "batch_idxs", "=", "np", ".", "array_split", "(", "idxs", ",", "n_parties", ")", "\n", "net_dataidx_map", "=", "{", "i", ":", "batch_idxs", "[", "i", "]", "for", "i", "in", "range", "(", "n_parties", ")", "}", "\n", "\n", "\n", "", "elif", "partition", "==", "\"noniid-labeldir\"", "or", "partition", "==", "\"noniid\"", ":", "\n", "        ", "min_size", "=", "0", "\n", "min_require_size", "=", "10", "\n", "K", "=", "10", "\n", "# min_require_size = 100", "\n", "sup_size", "=", "int", "(", "len", "(", "y_train", ")", "/", "10", ")", "\n", "N", "=", "y_train", ".", "shape", "[", "0", "]", "-", "sup_size", "\n", "net_dataidx_map", "=", "{", "}", "\n", "for", "sup_i", "in", "range", "(", "labeled_num", ")", ":", "\n", "            ", "net_dataidx_map", "[", "sup_i", "]", "=", "[", "i", "for", "i", "in", "range", "(", "sup_i", "*", "sup_size", ",", "(", "sup_i", "+", "1", ")", "*", "sup_size", ")", "]", "\n", "\n", "", "while", "min_size", "<", "min_require_size", ":", "\n", "            ", "idx_batch", "=", "[", "[", "]", "for", "_", "in", "range", "(", "n_parties", "-", "labeled_num", ")", "]", "\n", "for", "k", "in", "range", "(", "K", ")", ":", "\n", "                ", "idx_k", "=", "np", ".", "where", "(", "y_train", "[", "int", "(", "labeled_num", "*", "len", "(", "y_train", ")", "/", "10", ")", ":", "]", "==", "k", ")", "[", "0", "]", "+", "sup_size", "\n", "np", ".", "random", ".", "shuffle", "(", "idx_k", ")", "\n", "proportions", "=", "np", ".", "random", ".", "dirichlet", "(", "np", ".", "repeat", "(", "beta", ",", "n_parties", ")", ")", "\n", "proportions", "=", "np", ".", "array", "(", "\n", "[", "p", "*", "(", "len", "(", "idx_j", ")", "<", "N", "/", "(", "n_parties", "-", "labeled_num", ")", ")", "for", "p", ",", "idx_j", "in", "zip", "(", "proportions", ",", "idx_batch", ")", "]", ")", "\n", "proportions", "=", "proportions", "/", "proportions", ".", "sum", "(", ")", "\n", "proportions", "=", "(", "np", ".", "cumsum", "(", "proportions", ")", "*", "len", "(", "idx_k", ")", ")", ".", "astype", "(", "int", ")", "[", ":", "-", "1", "]", "\n", "idx_batch", "=", "[", "idx_j", "+", "idx", ".", "tolist", "(", ")", "for", "idx_j", ",", "idx", "in", "zip", "(", "idx_batch", ",", "np", ".", "split", "(", "idx_k", ",", "proportions", ")", ")", "]", "\n", "min_size", "=", "min", "(", "[", "len", "(", "idx_j", ")", "for", "idx_j", "in", "idx_batch", "]", ")", "\n", "\n", "", "", "for", "j", "in", "range", "(", "n_parties", "-", "labeled_num", ")", ":", "\n", "            ", "np", ".", "random", ".", "shuffle", "(", "idx_batch", "[", "j", "]", ")", "\n", "net_dataidx_map", "[", "j", "+", "labeled_num", "]", "=", "idx_batch", "[", "j", "]", "\n", "\n", "", "", "traindata_cls_counts", "=", "record_net_data_stats", "(", "y_train", ",", "net_dataidx_map", ",", "logdir", ")", "\n", "return", "(", "X_train", ",", "y_train", ",", "X_test", ",", "y_test", ",", "net_dataidx_map", ",", "traindata_cls_counts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.None.cifar_load.partition_data_allnoniid": [[149, 197], ["cifar_load.load_cifar10_data", "cifar_load.load_SVHN_data", "numpy.random.permutation", "numpy.array_split", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "cifar_load.load_cifar100_data", "range", "cifar_load.record_net_data_stats", "cifar_load.load_skin_data", "range", "range", "numpy.random.shuffle", "numpy.random.shuffle", "numpy.random.dirichlet", "numpy.array", "min", "range", "numpy.where", "numpy.repeat", "np.array.sum", "idx.tolist", "zip", "len", "zip", "numpy.split", "len", "numpy.cumsum", "len"], "function", ["home.repos.pwc.inspect_result.xmed-lab_rscfed.None.cifar_load.load_cifar10_data", "home.repos.pwc.inspect_result.xmed-lab_rscfed.None.cifar_load.load_SVHN_data", "home.repos.pwc.inspect_result.xmed-lab_rscfed.None.cifar_load.load_cifar100_data", "home.repos.pwc.inspect_result.xmed-lab_rscfed.None.cifar_load.record_net_data_stats", "home.repos.pwc.inspect_result.xmed-lab_rscfed.None.cifar_load.load_skin_data", "home.repos.pwc.inspect_result.xmed-lab_rscfed.None.train_main.split"], ["", "def", "partition_data_allnoniid", "(", "dataset", ",", "datadir", ",", "train_idxs", "=", "None", ",", "test_idxs", "=", "None", ",", "partition", "=", "\"noniid\"", ",", "n_parties", "=", "10", ",", "\n", "beta", "=", "0.4", ")", ":", "\n", "    ", "if", "dataset", "==", "'cifar10'", ":", "\n", "        ", "X_train", ",", "y_train", ",", "X_test", ",", "y_test", "=", "load_cifar10_data", "(", "datadir", ")", "\n", "", "elif", "dataset", "==", "'SVHN'", ":", "\n", "        ", "X_train", ",", "y_train", ",", "X_test", ",", "y_test", "=", "load_SVHN_data", "(", "datadir", ")", "\n", "", "elif", "dataset", "==", "'cifar100'", ":", "\n", "        ", "X_train", ",", "y_train", ",", "X_test", ",", "y_test", "=", "load_cifar100_data", "(", "datadir", ")", "\n", "", "elif", "dataset", "==", "'skin'", ":", "\n", "        ", "X_train", ",", "y_train", ",", "X_test", ",", "y_test", "=", "load_skin_data", "(", "datadir", ",", "train_idxs", ",", "test_idxs", ")", "\n", "\n", "", "if", "dataset", "!=", "'skin'", ":", "\n", "        ", "n_train", "=", "y_train", ".", "shape", "[", "0", "]", "\n", "if", "partition", "==", "\"homo\"", "or", "partition", "==", "\"iid\"", ":", "\n", "            ", "idxs", "=", "np", ".", "random", ".", "permutation", "(", "n_train", ")", "\n", "batch_idxs", "=", "np", ".", "array_split", "(", "idxs", ",", "n_parties", ")", "\n", "net_dataidx_map", "=", "{", "i", ":", "batch_idxs", "[", "i", "]", "for", "i", "in", "range", "(", "n_parties", ")", "}", "\n", "\n", "\n", "", "elif", "partition", "==", "\"noniid-labeldir\"", "or", "partition", "==", "\"noniid\"", ":", "\n", "            ", "min_size", "=", "0", "\n", "min_require_size", "=", "10", "\n", "K", "=", "10", "\n", "\n", "N", "=", "y_train", ".", "shape", "[", "0", "]", "\n", "net_dataidx_map", "=", "{", "}", "\n", "\n", "while", "min_size", "<", "min_require_size", ":", "\n", "                ", "idx_batch", "=", "[", "[", "]", "for", "_", "in", "range", "(", "n_parties", ")", "]", "\n", "for", "k", "in", "range", "(", "K", ")", ":", "\n", "                    ", "idx_k", "=", "np", ".", "where", "(", "y_train", "==", "k", ")", "[", "0", "]", "\n", "np", ".", "random", ".", "shuffle", "(", "idx_k", ")", "\n", "proportions", "=", "np", ".", "random", ".", "dirichlet", "(", "np", ".", "repeat", "(", "beta", ",", "n_parties", ")", ")", "\n", "proportions", "=", "np", ".", "array", "(", "\n", "[", "p", "*", "(", "len", "(", "idx_j", ")", "<", "N", "/", "n_parties", ")", "for", "p", ",", "idx_j", "in", "zip", "(", "proportions", ",", "idx_batch", ")", "]", ")", "\n", "proportions", "=", "proportions", "/", "proportions", ".", "sum", "(", ")", "\n", "proportions", "=", "(", "np", ".", "cumsum", "(", "proportions", ")", "*", "len", "(", "idx_k", ")", ")", ".", "astype", "(", "int", ")", "[", ":", "-", "1", "]", "\n", "idx_batch", "=", "[", "idx_j", "+", "idx", ".", "tolist", "(", ")", "for", "idx_j", ",", "idx", "in", "zip", "(", "idx_batch", ",", "np", ".", "split", "(", "idx_k", ",", "proportions", ")", ")", "]", "\n", "min_size", "=", "min", "(", "[", "len", "(", "idx_j", ")", "for", "idx_j", "in", "idx_batch", "]", ")", "\n", "\n", "", "", "for", "j", "in", "range", "(", "n_parties", ")", ":", "\n", "                ", "np", ".", "random", ".", "shuffle", "(", "idx_batch", "[", "j", "]", ")", "\n", "net_dataidx_map", "[", "j", "]", "=", "idx_batch", "[", "j", "]", "\n", "\n", "", "traindata_cls_counts", "=", "record_net_data_stats", "(", "y_train", ",", "net_dataidx_map", ")", "\n", "", "return", "X_train", ",", "y_train", ",", "X_test", ",", "y_test", ",", "net_dataidx_map", ",", "traindata_cls_counts", "\n", "", "else", ":", "\n", "        ", "return", "np", ".", "array", "(", "X_train", ")", ",", "np", ".", "array", "(", "y_train", ")", ",", "np", ".", "array", "(", "X_test", ")", ",", "np", ".", "array", "(", "y_test", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.None.cifar_load.get_dataloader": [[199, 245], ["torchvision.Normalize", "torch.DataLoader", "dataloaders.dataset.CheXpertDataset", "torch.DataLoader", "torchvision.Normalize", "torchvision.Compose", "dataloaders.dataset.CheXpertDataset", "torchvision.Compose", "dataloaders.dataset.CheXpertDataset", "torchvision.Normalize", "torchvision.Compose", "torchvision.RandomCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.RandomCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "dataloaders.dataset.TransformTwice", "torchvision.ToTensor"], "function", ["None"], ["", "", "def", "get_dataloader", "(", "args", ",", "data_np", ",", "label_np", ",", "dataset_type", ",", "datadir", ",", "train_bs", ",", "is_labeled", "=", "None", ",", "data_idxs", "=", "None", ",", "\n", "is_testing", "=", "False", ",", "pre_sz", "=", "40", ",", "input_sz", "=", "32", ")", ":", "\n", "    ", "if", "dataset_type", "==", "'SVHN'", ":", "\n", "        ", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.4376821", ",", "0.4437697", ",", "0.47280442", "]", ",", "\n", "std", "=", "[", "0.19803012", ",", "0.20101562", ",", "0.19703614", "]", ")", "\n", "assert", "pre_sz", "==", "40", "and", "input_sz", "==", "32", ",", "'Error: Wrong input size for 32*32 dataset'", "\n", "", "elif", "dataset_type", "==", "'cifar100'", ":", "\n", "        ", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.5070751592371323", ",", "0.48654887331495095", ",", "0.4409178433670343", "]", ",", "\n", "std", "=", "[", "0.2673342858792401", ",", "0.2564384629170883", ",", "0.27615047132568404", "]", ")", "\n", "assert", "pre_sz", "==", "40", "and", "input_sz", "==", "32", ",", "'Error: Wrong input size for 32*32 dataset'", "\n", "", "elif", "dataset_type", "==", "'skin'", ":", "\n", "        ", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.7630332", ",", "0.5456457", ",", "0.57004654", "]", ",", "\n", "std", "=", "[", "0.14092809", ",", "0.15261231", ",", "0.16997086", "]", ")", "\n", "\n", "", "if", "not", "is_testing", ":", "\n", "        ", "if", "is_labeled", ":", "\n", "            ", "trans", "=", "transforms", ".", "Compose", "(", "\n", "[", "transforms", ".", "RandomCrop", "(", "size", "=", "(", "input_sz", ",", "input_sz", ")", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", "p", "=", "0.5", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "\n", "]", ")", "\n", "ds", "=", "dataset", ".", "CheXpertDataset", "(", "dataset_type", ",", "data_np", ",", "label_np", ",", "pre_sz", ",", "pre_sz", ",", "lab_trans", "=", "trans", ",", "\n", "is_labeled", "=", "True", ",", "is_testing", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "weak_trans", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomCrop", "(", "size", "=", "(", "input_sz", ",", "input_sz", ")", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", "p", "=", "0.5", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "\n", "]", ")", "\n", "\n", "ds", "=", "dataset", ".", "CheXpertDataset", "(", "dataset_type", ",", "data_np", ",", "label_np", ",", "pre_sz", ",", "pre_sz", ",", "\n", "un_trans_wk", "=", "dataset", ".", "TransformTwice", "(", "weak_trans", ")", ",", "\n", "data_idxs", "=", "data_idxs", ",", "\n", "is_labeled", "=", "False", ",", "\n", "is_testing", "=", "False", ")", "\n", "", "dl", "=", "data", ".", "DataLoader", "(", "dataset", "=", "ds", ",", "batch_size", "=", "train_bs", ",", "drop_last", "=", "False", ",", "shuffle", "=", "True", ",", "num_workers", "=", "8", ")", "\n", "", "else", ":", "\n", "        ", "ds", "=", "dataset", ".", "CheXpertDataset", "(", "dataset_type", ",", "data_np", ",", "label_np", ",", "input_sz", ",", "input_sz", ",", "lab_trans", "=", "transforms", ".", "Compose", "(", "[", "\n", "# K.RandomCrop((224, 224)),", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "\n", "]", ")", ",", "is_labeled", "=", "True", ",", "is_testing", "=", "True", ")", "\n", "dl", "=", "data", ".", "DataLoader", "(", "dataset", "=", "ds", ",", "batch_size", "=", "train_bs", ",", "drop_last", "=", "False", ",", "shuffle", "=", "False", ",", "num_workers", "=", "8", ")", "\n", "", "return", "dl", ",", "ds", "\n", "", ""]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.None.validation.epochVal_metrics_test": [[16, 55], ["model.eval", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "model.train", "torch.no_grad", "enumerate", "utils.metrics.compute_metrics_test", "torch.FloatTensor", "torch.FloatTensor", "model", "study.tolist.tolist", "torch.nn.functional.softmax", "range", "torch.cat", "torch.cat", "image.cuda", "label.cuda", "len", "torch.equal", "torch.max", "studies.append", "gt_study[].view", "pred_study[].view"], "function", ["home.repos.pwc.inspect_result.xmed-lab_rscfed.None.local_unsupervised.UnsupervisedLocalUpdate.train", "home.repos.pwc.inspect_result.xmed-lab_rscfed.utils.metrics.compute_metrics_test"], ["def", "epochVal_metrics_test", "(", "model", ",", "dataLoader", ",", "model_type", ",", "n_classes", ")", ":", "\n", "    ", "training", "=", "model", ".", "training", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "gt", "=", "torch", ".", "FloatTensor", "(", ")", ".", "cuda", "(", ")", "\n", "pred", "=", "torch", ".", "FloatTensor", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "gt_study", "=", "{", "}", "\n", "pred_study", "=", "{", "}", "\n", "studies", "=", "[", "]", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "i", ",", "(", "study", ",", "image", ",", "label", ")", "in", "enumerate", "(", "dataLoader", ")", ":", "\n", "            ", "image", ",", "label", "=", "image", ".", "cuda", "(", ")", ",", "label", ".", "cuda", "(", ")", "\n", "_", ",", "feature", ",", "output", "=", "model", "(", "image", ",", "model", "=", "model_type", ")", "\n", "study", "=", "study", ".", "tolist", "(", ")", "\n", "output", "=", "F", ".", "softmax", "(", "output", ",", "dim", "=", "1", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "study", ")", ")", ":", "\n", "                ", "if", "study", "[", "i", "]", "in", "pred_study", ":", "\n", "                    ", "assert", "torch", ".", "equal", "(", "gt_study", "[", "study", "[", "i", "]", "]", ",", "label", "[", "i", "]", ")", "\n", "pred_study", "[", "study", "[", "i", "]", "]", "=", "torch", ".", "max", "(", "pred_study", "[", "study", "[", "i", "]", "]", ",", "output", "[", "i", "]", ")", "\n", "", "else", ":", "\n", "                    ", "gt_study", "[", "study", "[", "i", "]", "]", "=", "label", "[", "i", "]", "\n", "pred_study", "[", "study", "[", "i", "]", "]", "=", "output", "[", "i", "]", "\n", "studies", ".", "append", "(", "study", "[", "i", "]", ")", "\n", "\n", "\n", "\n", "", "", "", "for", "study", "in", "studies", ":", "\n", "            ", "gt", "=", "torch", ".", "cat", "(", "(", "gt", ",", "gt_study", "[", "study", "]", ".", "view", "(", "1", ",", "-", "1", ")", ")", ",", "0", ")", "\n", "pred", "=", "torch", ".", "cat", "(", "(", "pred", ",", "pred_study", "[", "study", "]", ".", "view", "(", "1", ",", "-", "1", ")", ")", ",", "0", ")", "\n", "#gt=F.one_hot(gt.to(torch.int64).squeeze())", "\n", "#AUROCs, Accus, Senss, Specs, pre, F1 = compute_metrics_test(gt, pred,  thresh=thresh, competition=True)", "\n", "", "AUROCs", ",", "Accus", ",", "Pre", ",", "Recall", "=", "compute_metrics_test", "(", "gt", ",", "pred", ",", "n_classes", "=", "n_classes", ")", "\n", "\n", "", "model", ".", "train", "(", "training", ")", "\n", "\n", "return", "AUROCs", ",", "Accus", ",", "Pre", ",", "Recall", "#,all_features.cpu(),all_labels.cpu()#, Senss, Specs, pre,F1", "\n", "", ""]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.None.datasets.CIFAR10_truncated.__init__": [[28, 38], ["datasets.CIFAR10_truncated.__build_truncated_dataset__"], "methods", ["home.repos.pwc.inspect_result.xmed-lab_rscfed.None.datasets.SVHN_truncated.__build_truncated_dataset__"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "dataidxs", "=", "None", ",", "train", "=", "True", ",", "transform", "=", "None", ",", "target_transform", "=", "None", ",", "download", "=", "False", ",", "is_labeled", "=", "False", ")", ":", "\n", "\n", "        ", "self", ".", "root", "=", "root", "\n", "self", ".", "dataidxs", "=", "dataidxs", "\n", "self", ".", "train", "=", "train", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "self", ".", "download", "=", "download", "\n", "self", ".", "is_labeled", "=", "is_labeled", "\n", "self", ".", "data", ",", "self", ".", "target", "=", "self", ".", "__build_truncated_dataset__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.None.datasets.CIFAR10_truncated.__build_truncated_dataset__": [[39, 57], ["torchvision.datasets.CIFAR10", "numpy.array", "numpy.array", "numpy.array"], "methods", ["None"], ["", "def", "__build_truncated_dataset__", "(", "self", ")", ":", "\n", "\n", "        ", "cifar_dataobj", "=", "CIFAR10", "(", "self", ".", "root", ",", "self", ".", "train", ",", "self", ".", "transform", ",", "self", ".", "target_transform", ",", "self", ".", "download", ")", "\n", "\n", "if", "torchvision", ".", "__version__", "==", "'0.2.1'", ":", "\n", "            ", "if", "self", ".", "train", ":", "\n", "                ", "data", ",", "target", "=", "cifar_dataobj", ".", "train_data", ",", "np", ".", "array", "(", "cifar_dataobj", ".", "train_labels", ")", "\n", "", "else", ":", "\n", "                ", "data", ",", "target", "=", "cifar_dataobj", ".", "test_data", ",", "np", ".", "array", "(", "cifar_dataobj", ".", "test_labels", ")", "\n", "", "", "else", ":", "\n", "            ", "data", "=", "cifar_dataobj", ".", "data", "\n", "target", "=", "np", ".", "array", "(", "cifar_dataobj", ".", "targets", ")", "\n", "\n", "", "if", "self", ".", "dataidxs", "is", "not", "None", ":", "\n", "            ", "data", "=", "data", "[", "self", ".", "dataidxs", "]", "\n", "target", "=", "target", "[", "self", ".", "dataidxs", "]", "\n", "\n", "", "return", "data", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.None.datasets.CIFAR10_truncated.truncate_channel": [[58, 63], ["range"], "methods", ["None"], ["", "def", "truncate_channel", "(", "self", ",", "index", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "index", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "gs_index", "=", "index", "[", "i", "]", "\n", "self", ".", "data", "[", "gs_index", ",", ":", ",", ":", ",", "1", "]", "=", "0.0", "\n", "self", ".", "data", "[", "gs_index", ",", ":", ",", ":", ",", "2", "]", "=", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.None.datasets.CIFAR10_truncated.__getitem__": [[64, 84], ["datasets.CIFAR10_truncated.transform", "datasets.CIFAR10_truncated.target_transform"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            index (int): Index\n\n        Returns:\n            tuple: (image, target) where target is index of the target class.\n        \"\"\"", "\n", "img", ",", "target", "=", "self", ".", "data", "[", "index", "]", ",", "self", ".", "target", "[", "index", "]", "\n", "# img = Image.fromarray(img)", "\n", "# print(\"cifar10 img:\", img)", "\n", "# print(\"cifar10 target:\", target)", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "\n", "", "return", "img", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.None.datasets.CIFAR10_truncated.__len__": [[85, 87], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.None.datasets.CIFAR100_truncated.__init__": [[90, 100], ["datasets.CIFAR100_truncated.__build_truncated_dataset__"], "methods", ["home.repos.pwc.inspect_result.xmed-lab_rscfed.None.datasets.SVHN_truncated.__build_truncated_dataset__"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "dataidxs", "=", "None", ",", "train", "=", "True", ",", "transform", "=", "None", ",", "target_transform", "=", "None", ",", "download", "=", "False", ")", ":", "\n", "\n", "        ", "self", ".", "root", "=", "root", "\n", "self", ".", "dataidxs", "=", "dataidxs", "\n", "self", ".", "train", "=", "train", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "self", ".", "download", "=", "download", "\n", "\n", "self", ".", "data", ",", "self", ".", "target", "=", "self", ".", "__build_truncated_dataset__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.None.datasets.CIFAR100_truncated.__build_truncated_dataset__": [[101, 119], ["torchvision.datasets.CIFAR100", "numpy.array", "numpy.array", "numpy.array"], "methods", ["None"], ["", "def", "__build_truncated_dataset__", "(", "self", ")", ":", "\n", "\n", "        ", "cifar_dataobj", "=", "CIFAR100", "(", "self", ".", "root", ",", "self", ".", "train", ",", "self", ".", "transform", ",", "self", ".", "target_transform", ",", "self", ".", "download", ")", "\n", "\n", "if", "torchvision", ".", "__version__", "==", "'0.2.1'", ":", "\n", "            ", "if", "self", ".", "train", ":", "\n", "                ", "data", ",", "target", "=", "cifar_dataobj", ".", "train_data", ",", "np", ".", "array", "(", "cifar_dataobj", ".", "train_labels", ")", "\n", "", "else", ":", "\n", "                ", "data", ",", "target", "=", "cifar_dataobj", ".", "test_data", ",", "np", ".", "array", "(", "cifar_dataobj", ".", "test_labels", ")", "\n", "", "", "else", ":", "\n", "            ", "data", "=", "cifar_dataobj", ".", "data", "\n", "target", "=", "np", ".", "array", "(", "cifar_dataobj", ".", "targets", ")", "\n", "\n", "", "if", "self", ".", "dataidxs", "is", "not", "None", ":", "\n", "            ", "data", "=", "data", "[", "self", ".", "dataidxs", "]", "\n", "target", "=", "target", "[", "self", ".", "dataidxs", "]", "\n", "\n", "", "return", "data", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.None.datasets.CIFAR100_truncated.__getitem__": [[120, 140], ["PIL.Image.fromarray", "datasets.CIFAR100_truncated.transform", "datasets.CIFAR100_truncated.target_transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            index (int): Index\n\n        Returns:\n            tuple: (image, target) where target is index of the target class.\n        \"\"\"", "\n", "img", ",", "target", "=", "self", ".", "data", "[", "index", "]", ",", "self", ".", "target", "[", "index", "]", "\n", "img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "# print(\"cifar10 img:\", img)", "\n", "# print(\"cifar10 target:\", target)", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "\n", "", "return", "img", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.None.datasets.CIFAR100_truncated.__len__": [[141, 143], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.None.datasets.SVHN_truncated.__init__": [[146, 156], ["datasets.SVHN_truncated.__build_truncated_dataset__"], "methods", ["home.repos.pwc.inspect_result.xmed-lab_rscfed.None.datasets.SVHN_truncated.__build_truncated_dataset__"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "dataidxs", "=", "None", ",", "split", "=", "'train'", ",", "transform", "=", "None", ",", "target_transform", "=", "None", ",", "download", "=", "False", ",", "is_labeled", "=", "False", ")", ":", "\n", "\n", "        ", "self", ".", "root", "=", "root", "\n", "self", ".", "dataidxs", "=", "dataidxs", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "self", ".", "download", "=", "download", "\n", "self", ".", "is_labeled", "=", "is_labeled", "\n", "self", ".", "data", ",", "self", ".", "target", "=", "self", ".", "__build_truncated_dataset__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.None.datasets.SVHN_truncated.__build_truncated_dataset__": [[157, 175], ["torchvision.datasets.SVHN", "numpy.array", "numpy.array", "numpy.array"], "methods", ["None"], ["", "def", "__build_truncated_dataset__", "(", "self", ")", ":", "\n", "\n", "        ", "SVHN_dataobj", "=", "SVHN", "(", "self", ".", "root", ",", "self", ".", "split", ",", "self", ".", "transform", ",", "self", ".", "target_transform", ",", "self", ".", "download", ")", "\n", "\n", "if", "torchvision", ".", "__version__", "==", "'0.2.1'", ":", "\n", "            ", "if", "self", ".", "split", ":", "\n", "                ", "data", ",", "target", "=", "SVHN_dataobj", ".", "train_data", ",", "np", ".", "array", "(", "SVHN_dataobj", ".", "train_labels", ")", "\n", "", "else", ":", "\n", "                ", "data", ",", "target", "=", "SVHN_dataobj", ".", "test_data", ",", "np", ".", "array", "(", "SVHN_dataobj", ".", "test_labels", ")", "\n", "", "", "else", ":", "\n", "            ", "data", "=", "SVHN_dataobj", ".", "data", "\n", "target", "=", "np", ".", "array", "(", "SVHN_dataobj", ".", "labels", ")", "\n", "\n", "", "if", "self", ".", "dataidxs", "is", "not", "None", ":", "\n", "            ", "data", "=", "data", "[", "self", ".", "dataidxs", "]", "\n", "target", "=", "target", "[", "self", ".", "dataidxs", "]", "\n", "\n", "", "return", "data", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.None.datasets.SVHN_truncated.truncate_channel": [[176, 181], ["range"], "methods", ["None"], ["", "def", "truncate_channel", "(", "self", ",", "index", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "index", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "gs_index", "=", "index", "[", "i", "]", "\n", "self", ".", "data", "[", "gs_index", ",", ":", ",", ":", ",", "1", "]", "=", "0.0", "\n", "self", ".", "data", "[", "gs_index", ",", ":", ",", ":", ",", "2", "]", "=", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.None.datasets.SVHN_truncated.__getitem__": [[182, 202], ["datasets.SVHN_truncated.transform", "datasets.SVHN_truncated.target_transform"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            index (int): Index\n\n        Returns:\n            tuple: (image, target) where target is index of the target class.\n        \"\"\"", "\n", "img", ",", "target", "=", "self", ".", "data", "[", "index", "]", ",", "self", ".", "target", "[", "index", "]", "\n", "# img = Image.fromarray(img)", "\n", "# print(\"cifar10 img:\", img)", "\n", "# print(\"cifar10 target:\", target)", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "\n", "", "return", "img", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.None.datasets.SVHN_truncated.__len__": [[203, 205], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.None.datasets.ImageFolder_custom.__init__": [[207, 220], ["torchvision.datasets.ImageFolder", "numpy.array", "numpy.array"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "dataidxs", "=", "None", ",", "train", "=", "True", ",", "transform", "=", "None", ",", "target_transform", "=", "None", ")", ":", "\n", "        ", "self", ".", "root", "=", "root", "\n", "self", ".", "dataidxs", "=", "dataidxs", "\n", "self", ".", "train", "=", "train", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "\n", "imagefolder_obj", "=", "ImageFolder", "(", "self", ".", "root", ",", "self", ".", "transform", ",", "self", ".", "target_transform", ")", "\n", "self", ".", "loader", "=", "imagefolder_obj", ".", "loader", "\n", "if", "self", ".", "dataidxs", "is", "not", "None", ":", "\n", "            ", "self", ".", "samples", "=", "np", ".", "array", "(", "imagefolder_obj", ".", "samples", ")", "[", "self", ".", "dataidxs", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "samples", "=", "np", ".", "array", "(", "imagefolder_obj", ".", "samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.None.datasets.ImageFolder_custom.__getitem__": [[221, 232], ["int", "datasets.ImageFolder_custom.loader", "datasets.ImageFolder_custom.transform", "datasets.ImageFolder_custom.target_transform"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "path", "=", "self", ".", "samples", "[", "index", "]", "[", "0", "]", "\n", "target", "=", "self", ".", "samples", "[", "index", "]", "[", "1", "]", "\n", "target", "=", "int", "(", "target", ")", "\n", "sample", "=", "self", ".", "loader", "(", "path", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "sample", "=", "self", ".", "transform", "(", "sample", ")", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "\n", "", "return", "sample", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.None.datasets.ImageFolder_custom.__len__": [[233, 238], ["len", "len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "dataidxs", "is", "None", ":", "\n", "            ", "return", "len", "(", "self", ".", "samples", ")", "\n", "", "else", ":", "\n", "            ", "return", "len", "(", "self", ".", "dataidxs", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.None.datasets.mkdirs": [[18, 23], ["os.makedirs", "os.makedirs"], "function", ["None"], ["def", "mkdirs", "(", "dirpath", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "os", ".", "makedirs", "(", "dirpath", ")", "\n", "", "except", "Exception", "as", "_", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.utils.metrics.compute_metrics_test": [[14, 38], ["gt.cpu().detach().numpy", "pred.cpu().detach().numpy", "range", "sklearn.metrics._ranking.roc_auc_score", "sklearn.metrics.accuracy_score", "sklearn.metrics.precision_score", "sklearn.metrics.recall_score", "numpy.argmax", "numpy.argmax", "numpy.argmax", "gt.cpu().detach", "pred.cpu().detach", "gt.cpu", "pred.cpu"], "function", ["None"], ["def", "compute_metrics_test", "(", "gt", ",", "pred", ",", "n_classes", "=", "10", ")", ":", "\n", "    ", "\"\"\"\n    Computes accuracy, precision, recall and F1-score from prediction scores.\n    Args:\n        gt: Pytorch tensor on GPU, shape = [n_samples, n_classes]\n          true binary labels.\n        pred: Pytorch tensor on GPU, shape = [n_samples, n_classes]\n          can either be probability estimates of the positive class,\n          confidence values, or binary decisions.\n        competition: whether to use competition tasks. If False,\n          use all tasks\n    Returns:\n        List of AUROCs of all classes.\n    \"\"\"", "\n", "\n", "gt_np", "=", "gt", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "pred_np", "=", "pred", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "indexes", "=", "range", "(", "n_classes", ")", "\n", "\n", "AUROCs", "=", "roc_auc_score", "(", "gt_np", ",", "pred_np", ",", "multi_class", "=", "'ovr'", ")", "\n", "Accus", "=", "accuracy_score", "(", "gt_np", ",", "np", ".", "argmax", "(", "pred_np", ",", "axis", "=", "1", ")", ")", "\n", "Pre", "=", "precision_score", "(", "gt_np", ",", "np", ".", "argmax", "(", "pred_np", ",", "axis", "=", "1", ")", ",", "average", "=", "'macro'", ")", "\n", "Recall", "=", "recall_score", "(", "gt_np", ",", "np", ".", "argmax", "(", "pred_np", ",", "axis", "=", "1", ")", ",", "average", "=", "'macro'", ")", "\n", "return", "AUROCs", ",", "Accus", ",", "Pre", ",", "Recall", "# , Senss, Specs, Pre, F1", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.utils.metrics.compute_pred_matrix": [[40, 45], ["numpy.zeros", "range", "len", "int"], "function", ["None"], ["", "def", "compute_pred_matrix", "(", "gt", ",", "pred", ",", "n_classes", ")", ":", "\n", "    ", "matrix", "=", "np", ".", "zeros", "(", "[", "n_classes", ",", "n_classes", "]", ")", "\n", "for", "idx_gt", "in", "range", "(", "len", "(", "gt", ")", ")", ":", "\n", "        ", "matrix", "[", "int", "(", "gt", "[", "idx_gt", "]", ")", "]", "[", "pred", "[", "idx_gt", "]", "]", "+=", "1", "\n", "", "return", "matrix", "\n", "", ""]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.utils.data_parallel.BalancedDataParallel.__init__": [[53, 56], ["torch.nn.parallel.DataParallel.__init__"], "methods", ["home.repos.pwc.inspect_result.xmed-lab_rscfed.loss.loss.UnsupervisedLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gpu0_bsz", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "gpu0_bsz", "=", "gpu0_bsz", "\n", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.utils.data_parallel.BalancedDataParallel.forward": [[57, 72], ["data_parallel.BalancedDataParallel.scatter", "data_parallel.BalancedDataParallel.replicate", "data_parallel.BalancedDataParallel.parallel_apply", "data_parallel.BalancedDataParallel.gather", "data_parallel.BalancedDataParallel.module", "len", "data_parallel.BalancedDataParallel.module"], "methods", ["home.repos.pwc.inspect_result.xmed-lab_rscfed.utils.data_parallel.scatter", "home.repos.pwc.inspect_result.xmed-lab_rscfed.utils.data_parallel.BalancedDataParallel.parallel_apply"], ["", "def", "forward", "(", "self", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "not", "self", ".", "device_ids", ":", "\n", "            ", "return", "self", ".", "module", "(", "*", "inputs", ",", "**", "kwargs", ")", "\n", "", "if", "self", ".", "gpu0_bsz", "==", "0", ":", "\n", "            ", "device_ids", "=", "self", ".", "device_ids", "[", "1", ":", "]", "\n", "", "else", ":", "\n", "            ", "device_ids", "=", "self", ".", "device_ids", "\n", "", "inputs", ",", "kwargs", "=", "self", ".", "scatter", "(", "inputs", ",", "kwargs", ",", "device_ids", ")", "\n", "if", "len", "(", "self", ".", "device_ids", ")", "==", "1", ":", "\n", "            ", "return", "self", ".", "module", "(", "*", "inputs", "[", "0", "]", ",", "**", "kwargs", "[", "0", "]", ")", "\n", "", "replicas", "=", "self", ".", "replicate", "(", "self", ".", "module", ",", "self", ".", "device_ids", ")", "\n", "if", "self", ".", "gpu0_bsz", "==", "0", ":", "\n", "            ", "replicas", "=", "replicas", "[", "1", ":", "]", "\n", "", "outputs", "=", "self", ".", "parallel_apply", "(", "replicas", ",", "device_ids", ",", "inputs", ",", "kwargs", ")", "\n", "return", "self", ".", "gather", "(", "outputs", ",", "self", ".", "output_device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.utils.data_parallel.BalancedDataParallel.parallel_apply": [[73, 75], ["torch.nn.parallel.parallel_apply.parallel_apply"], "methods", ["home.repos.pwc.inspect_result.xmed-lab_rscfed.utils.data_parallel.BalancedDataParallel.parallel_apply"], ["", "def", "parallel_apply", "(", "self", ",", "replicas", ",", "device_ids", ",", "inputs", ",", "kwargs", ")", ":", "\n", "        ", "return", "parallel_apply", "(", "replicas", ",", "inputs", ",", "kwargs", ",", "device_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.utils.data_parallel.BalancedDataParallel.scatter": [[76, 97], ["inputs[].size", "len", "data_parallel.scatter_kwargs", "range", "super().scatter", "sum"], "methods", ["home.repos.pwc.inspect_result.xmed-lab_rscfed.utils.data_parallel.scatter_kwargs", "home.repos.pwc.inspect_result.xmed-lab_rscfed.utils.data_parallel.scatter"], ["", "def", "scatter", "(", "self", ",", "inputs", ",", "kwargs", ",", "device_ids", ")", ":", "\n", "        ", "bsz", "=", "inputs", "[", "0", "]", ".", "size", "(", "self", ".", "dim", ")", "\n", "num_dev", "=", "len", "(", "self", ".", "device_ids", ")", "\n", "gpu0_bsz", "=", "self", ".", "gpu0_bsz", "\n", "bsz_unit", "=", "(", "bsz", "-", "gpu0_bsz", ")", "//", "(", "num_dev", "-", "1", ")", "\n", "if", "gpu0_bsz", "<", "bsz_unit", ":", "\n", "            ", "chunk_sizes", "=", "[", "gpu0_bsz", "]", "+", "[", "bsz_unit", "]", "*", "(", "num_dev", "-", "1", ")", "\n", "delta", "=", "bsz", "-", "sum", "(", "chunk_sizes", ")", "\n", "for", "i", "in", "range", "(", "delta", ")", ":", "\n", "                ", "chunk_sizes", "[", "i", "+", "1", "]", "+=", "1", "\n", "", "if", "gpu0_bsz", "==", "0", ":", "\n", "                ", "chunk_sizes", "=", "chunk_sizes", "[", "1", ":", "]", "\n", "", "", "else", ":", "\n", "            ", "return", "super", "(", ")", ".", "scatter", "(", "inputs", ",", "kwargs", ",", "device_ids", ")", "\n", "\n", "# print('bsz: ', bsz)", "\n", "# print('num_dev: ', num_dev)", "\n", "# print('gpu0_bsz: ', gpu0_bsz)", "\n", "# print('bsz_unit: ', bsz_unit)", "\n", "# print('chunk_sizes: ', chunk_sizes)", "\n", "", "return", "scatter_kwargs", "(", "inputs", ",", "kwargs", ",", "device_ids", ",", "chunk_sizes", ",", "dim", "=", "self", ".", "dim", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.utils.data_parallel.scatter": [[7, 39], ["isinstance", "data_parallel.scatter.scatter_map"], "function", ["None"], ["def", "scatter", "(", "inputs", ",", "target_gpus", ",", "chunk_sizes", ",", "dim", "=", "0", ")", ":", "\n", "    ", "r\"\"\"\n    Slices tensors into approximately equal chunks and\n    distributes them across given GPUs. Duplicates\n    references to objects that are not tensors.\n    \"\"\"", "\n", "def", "scatter_map", "(", "obj", ")", ":", "\n", "        ", "if", "isinstance", "(", "obj", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "return", "Scatter", ".", "apply", "(", "target_gpus", ",", "chunk_sizes", ",", "dim", ",", "obj", ")", "\n", "", "except", ":", "\n", "                ", "print", "(", "'obj'", ",", "obj", ".", "size", "(", ")", ")", "\n", "print", "(", "'dim'", ",", "dim", ")", "\n", "print", "(", "'chunk_sizes'", ",", "chunk_sizes", ")", "\n", "quit", "(", ")", "\n", "", "", "if", "isinstance", "(", "obj", ",", "tuple", ")", "and", "len", "(", "obj", ")", ">", "0", ":", "\n", "            ", "return", "list", "(", "zip", "(", "*", "map", "(", "scatter_map", ",", "obj", ")", ")", ")", "\n", "", "if", "isinstance", "(", "obj", ",", "list", ")", "and", "len", "(", "obj", ")", ">", "0", ":", "\n", "            ", "return", "list", "(", "map", "(", "list", ",", "zip", "(", "*", "map", "(", "scatter_map", ",", "obj", ")", ")", ")", ")", "\n", "", "if", "isinstance", "(", "obj", ",", "dict", ")", "and", "len", "(", "obj", ")", ">", "0", ":", "\n", "            ", "return", "list", "(", "map", "(", "type", "(", "obj", ")", ",", "zip", "(", "*", "map", "(", "scatter_map", ",", "obj", ".", "items", "(", ")", ")", ")", ")", ")", "\n", "", "return", "[", "obj", "for", "targets", "in", "target_gpus", "]", "\n", "\n", "# After scatter_map is called, a scatter_map cell will exist. This cell", "\n", "# has a reference to the actual function scatter_map, which has references", "\n", "# to a closure that has a reference to the scatter_map cell (because the", "\n", "# fn is recursive). To avoid this reference cycle, we set the function to", "\n", "# None, clearing the cell", "\n", "", "try", ":", "\n", "        ", "return", "scatter_map", "(", "inputs", ")", "\n", "", "finally", ":", "\n", "        ", "scatter_map", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.utils.data_parallel.scatter_kwargs": [[40, 51], ["tuple", "tuple", "data_parallel.scatter", "data_parallel.scatter", "len", "len", "tuple.extend", "len", "len", "tuple.extend", "range", "range", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.xmed-lab_rscfed.utils.data_parallel.scatter", "home.repos.pwc.inspect_result.xmed-lab_rscfed.utils.data_parallel.scatter"], ["", "", "def", "scatter_kwargs", "(", "inputs", ",", "kwargs", ",", "target_gpus", ",", "chunk_sizes", ",", "dim", "=", "0", ")", ":", "\n", "    ", "r\"\"\"Scatter with support for kwargs dictionary\"\"\"", "\n", "inputs", "=", "scatter", "(", "inputs", ",", "target_gpus", ",", "chunk_sizes", ",", "dim", ")", "if", "inputs", "else", "[", "]", "\n", "kwargs", "=", "scatter", "(", "kwargs", ",", "target_gpus", ",", "chunk_sizes", ",", "dim", ")", "if", "kwargs", "else", "[", "]", "\n", "if", "len", "(", "inputs", ")", "<", "len", "(", "kwargs", ")", ":", "\n", "        ", "inputs", ".", "extend", "(", "[", "(", ")", "for", "_", "in", "range", "(", "len", "(", "kwargs", ")", "-", "len", "(", "inputs", ")", ")", "]", ")", "\n", "", "elif", "len", "(", "kwargs", ")", "<", "len", "(", "inputs", ")", ":", "\n", "        ", "kwargs", ".", "extend", "(", "[", "{", "}", "for", "_", "in", "range", "(", "len", "(", "inputs", ")", "-", "len", "(", "kwargs", ")", ")", "]", ")", "\n", "", "inputs", "=", "tuple", "(", "inputs", ")", "\n", "kwargs", "=", "tuple", "(", "kwargs", ")", "\n", "return", "inputs", ",", "kwargs", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.utils.ramps.sigmoid_rampup": [[19, 27], ["numpy.clip", "float", "numpy.exp"], "function", ["None"], ["def", "sigmoid_rampup", "(", "current", ",", "rampup_length", ")", ":", "\n", "    ", "\"\"\"Exponential rampup from https://arxiv.org/abs/1610.02242\"\"\"", "\n", "if", "rampup_length", "==", "0", ":", "\n", "        ", "return", "1.0", "\n", "", "else", ":", "\n", "        ", "current", "=", "np", ".", "clip", "(", "current", ",", "0.0", ",", "rampup_length", ")", "\n", "phase", "=", "1.0", "-", "current", "/", "rampup_length", "\n", "return", "float", "(", "np", ".", "exp", "(", "-", "5.0", "*", "phase", "*", "phase", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.utils.ramps.linear_rampup": [[29, 36], ["None"], "function", ["None"], ["", "", "def", "linear_rampup", "(", "current", ",", "rampup_length", ")", ":", "\n", "    ", "\"\"\"Linear rampup\"\"\"", "\n", "assert", "current", ">=", "0", "and", "rampup_length", ">=", "0", "\n", "if", "current", ">=", "rampup_length", ":", "\n", "        ", "return", "1.0", "\n", "", "else", ":", "\n", "        ", "return", "current", "/", "rampup_length", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.utils.ramps.cosine_rampdown": [[38, 42], ["float", "numpy.cos"], "function", ["None"], ["", "", "def", "cosine_rampdown", "(", "current", ",", "rampdown_length", ")", ":", "\n", "    ", "\"\"\"Cosine rampdown from https://arxiv.org/abs/1608.03983\"\"\"", "\n", "assert", "0", "<=", "current", "<=", "rampdown_length", "\n", "return", "float", "(", ".5", "*", "(", "np", ".", "cos", "(", "np", ".", "pi", "*", "current", "/", "rampdown_length", ")", "+", "1", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.utils.metric_logger.SmoothedValue.__init__": [[13, 18], ["collections.deque"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "window_size", "=", "20", ")", ":", "\n", "        ", "self", ".", "deque", "=", "deque", "(", "maxlen", "=", "window_size", ")", "\n", "self", ".", "series", "=", "[", "]", "\n", "self", ".", "total", "=", "0.0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.utils.metric_logger.SmoothedValue.update": [[19, 24], ["metric_logger.SmoothedValue.deque.append", "metric_logger.SmoothedValue.series.append"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "deque", ".", "append", "(", "value", ")", "\n", "self", ".", "series", ".", "append", "(", "value", ")", "\n", "self", ".", "count", "+=", "1", "\n", "self", ".", "total", "+=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.utils.metric_logger.SmoothedValue.median": [[25, 29], ["torch.tensor", "torch.tensor.median().item", "list", "torch.tensor.median"], "methods", ["home.repos.pwc.inspect_result.xmed-lab_rscfed.utils.metric_logger.SmoothedValue.median"], ["", "@", "property", "\n", "def", "median", "(", "self", ")", ":", "\n", "        ", "d", "=", "torch", ".", "tensor", "(", "list", "(", "self", ".", "deque", ")", ")", "\n", "return", "d", ".", "median", "(", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.utils.metric_logger.SmoothedValue.avg": [[30, 34], ["torch.tensor", "torch.tensor.mean().item", "list", "torch.tensor.mean"], "methods", ["None"], ["", "@", "property", "\n", "def", "avg", "(", "self", ")", ":", "\n", "        ", "d", "=", "torch", ".", "tensor", "(", "list", "(", "self", ".", "deque", ")", ")", "\n", "return", "d", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.utils.metric_logger.SmoothedValue.global_avg": [[35, 38], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "global_avg", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "total", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.utils.metric_logger.MetricLogger.__init__": [[41, 44], ["collections.defaultdict"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "delimiter", "=", "\"\\t\"", ")", ":", "\n", "        ", "self", ".", "meters", "=", "defaultdict", "(", "SmoothedValue", ")", "\n", "self", ".", "delimiter", "=", "delimiter", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.utils.metric_logger.MetricLogger.update": [[45, 51], ["kwargs.items", "isinstance", "isinstance", "metric_logger.MetricLogger.meters[].update", "v.item.item.item"], "methods", ["home.repos.pwc.inspect_result.xmed-lab_rscfed.utils.metric_logger.MetricLogger.update"], ["", "def", "update", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "for", "k", ",", "v", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "v", ",", "torch", ".", "Tensor", ")", ":", "\n", "                ", "v", "=", "v", ".", "item", "(", ")", "\n", "", "assert", "isinstance", "(", "v", ",", "(", "float", ",", "int", ")", ")", "\n", "self", ".", "meters", "[", "k", "]", ".", "update", "(", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.utils.metric_logger.MetricLogger.__getattr__": [[52, 59], ["AttributeError", "type"], "methods", ["None"], ["", "", "def", "__getattr__", "(", "self", ",", "attr", ")", ":", "\n", "        ", "if", "attr", "in", "self", ".", "meters", ":", "\n", "            ", "return", "self", ".", "meters", "[", "attr", "]", "\n", "", "if", "attr", "in", "self", ".", "__dict__", ":", "\n", "            ", "return", "self", ".", "__dict__", "[", "attr", "]", "\n", "", "raise", "AttributeError", "(", "\"'{}' object has no attribute '{}'\"", ".", "format", "(", "\n", "type", "(", "self", ")", ".", "__name__", ",", "attr", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.utils.metric_logger.MetricLogger.__str__": [[60, 67], ["metric_logger.MetricLogger.meters.items", "metric_logger.MetricLogger.delimiter.join", "loss_str.append"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "loss_str", "=", "[", "]", "\n", "for", "name", ",", "meter", "in", "self", ".", "meters", ".", "items", "(", ")", ":", "\n", "            ", "loss_str", ".", "append", "(", "\n", "\"{}: {:.4f} ({:.4f})\"", ".", "format", "(", "name", ",", "meter", ".", "median", ",", "meter", ".", "global_avg", ")", "\n", ")", "\n", "", "return", "self", ".", "delimiter", ".", "join", "(", "loss_str", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.utils.losses.LabelSmoothingCrossEntropy.__init__": [[44, 49], ["torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "epsilon", "=", "0.1", ",", "reduction", "=", "'mean'", ")", ":", "\n", "#super().__init__()", "\n", "        ", "self", ".", "epsilon", "=", "epsilon", "\n", "self", ".", "reduction", "=", "reduction", "\n", "self", ".", "base_loss", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", "reduction", "=", "'mean'", ",", "weight", "=", "CLASS_WEIGHT", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.utils.losses.LabelSmoothingCrossEntropy.__call__": [[50, 60], ["torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "losses.reduce_loss", "torch.nn.functional.nll_loss", "torch.nn.functional.nll_loss", "losses.linear_combination", "preds.size", "torch.argmax.long", "torch.argmax.long", "torch.nn.functional.log_softmax.sum"], "methods", ["home.repos.pwc.inspect_result.xmed-lab_rscfed.utils.losses.reduce_loss", "home.repos.pwc.inspect_result.xmed-lab_rscfed.utils.losses.linear_combination"], ["", "def", "__call__", "(", "self", ",", "preds", ",", "target", ")", ":", "\n", "        ", "target", "=", "torch", ".", "argmax", "(", "target", ",", "dim", "=", "1", ")", "\n", "n", "=", "preds", ".", "size", "(", ")", "[", "-", "1", "]", "\n", "log_preds", "=", "F", ".", "log_softmax", "(", "preds", ",", "dim", "=", "-", "1", ")", "\n", "loss", "=", "reduce_loss", "(", "-", "log_preds", ".", "sum", "(", "dim", "=", "-", "1", ")", ",", "self", ".", "reduction", ")", "\n", "nll", "=", "F", ".", "nll_loss", "(", "log_preds", ",", "target", ".", "long", "(", ")", ",", "reduction", "=", "self", ".", "reduction", ")", "\n", "#output_softmax = F.softmax(preds, dim=1)", "\n", "#target = torch.argmax(target, dim=1)", "\n", "#nll = self.base_loss(output_softmax, target.long())", "\n", "return", "linear_combination", "(", "loss", "/", "n", ",", "nll", ",", "self", ".", "epsilon", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.utils.losses.Loss_Zeros.__init__": [[66, 68], ["torch.nn.BCELoss", "torch.nn.BCELoss", "torch.nn.BCELoss", "torch.nn.BCELoss"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "base_loss", "=", "torch", ".", "nn", ".", "BCELoss", "(", "reduction", "=", "'mean'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.utils.losses.Loss_Zeros.__call__": [[69, 72], ["losses.Loss_Zeros.base_loss"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "output", ",", "target", ")", ":", "\n", "        ", "target", "[", "target", "==", "-", "1", "]", "=", "0", "\n", "return", "self", ".", "base_loss", "(", "output", ",", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.utils.losses.Loss_Ones.__init__": [[78, 80], ["torch.nn.BCEWithLogitsLoss", "torch.nn.BCEWithLogitsLoss", "torch.nn.BCEWithLogitsLoss", "torch.nn.BCEWithLogitsLoss"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "base_loss", "=", "torch", ".", "nn", ".", "BCEWithLogitsLoss", "(", "reduction", "=", "'mean'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.utils.losses.Loss_Ones.__call__": [[81, 84], ["losses.Loss_Ones.base_loss"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "output", ",", "target", ")", ":", "\n", "        ", "target", "[", "target", "==", "-", "1", "]", "=", "1", "\n", "return", "self", ".", "base_loss", "(", "output", ",", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.utils.losses.cross_entropy_loss.__init__": [[90, 92], ["torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "base_loss", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", "reduction", "=", "'mean'", ",", "weight", "=", "CLASS_WEIGHT", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.utils.losses.cross_entropy_loss.__call__": [[93, 98], ["torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "losses.cross_entropy_loss.base_loss", "torch.argmax.long", "torch.argmax.long"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "output", ",", "target", ")", ":", "\n", "# target[target == -1] = 2", "\n", "        ", "output_softmax", "=", "F", ".", "softmax", "(", "output", ",", "dim", "=", "1", ")", "\n", "target", "=", "torch", ".", "argmax", "(", "target", ",", "dim", "=", "1", ")", "\n", "return", "self", ".", "base_loss", "(", "output_softmax", ",", "target", ".", "long", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.utils.losses.mixup": [[21, 34], ["torch.randperm", "torch.randperm", "onehot", "onehot", "torch.FloatTensor", "torch.FloatTensor", "data.size", "numpy.random.beta"], "function", ["None"], ["def", "mixup", "(", "data", ",", "targets", ",", "alpha", ",", "n_classes", ")", ":", "\n", "    ", "indices", "=", "torch", ".", "randperm", "(", "data", ".", "size", "(", "0", ")", ")", "\n", "data2", "=", "data", "[", "indices", "]", "\n", "targets2", "=", "targets", "[", "indices", "]", "\n", "\n", "targets", "=", "onehot", "(", "targets", ",", "n_classes", ")", "\n", "targets2", "=", "onehot", "(", "targets2", ",", "n_classes", ")", "\n", "\n", "lam", "=", "torch", ".", "FloatTensor", "(", "[", "np", ".", "random", ".", "beta", "(", "alpha", ",", "alpha", ")", "]", ")", "\n", "data", "=", "data", "*", "lam", "+", "data2", "*", "(", "1", "-", "lam", ")", "\n", "targets", "=", "targets", "*", "lam", "+", "targets2", "*", "(", "1", "-", "lam", ")", "\n", "\n", "return", "data", ",", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.utils.losses.linear_combination": [[35, 37], ["None"], "function", ["None"], ["", "def", "linear_combination", "(", "x", ",", "y", ",", "epsilon", ")", ":", "\n", "    ", "return", "epsilon", "*", "x", "+", "(", "1", "-", "epsilon", ")", "*", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.utils.losses.reduce_loss": [[39, 41], ["loss.mean", "loss.sum"], "function", ["None"], ["", "def", "reduce_loss", "(", "loss", ",", "reduction", "=", "'mean'", ")", ":", "\n", "    ", "return", "loss", ".", "mean", "(", ")", "if", "reduction", "==", "'mean'", "else", "loss", ".", "sum", "(", ")", "if", "reduction", "==", "'sum'", "else", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.utils.losses.get_UncertaintyLoss": [[114, 125], ["losses.Loss_Zeros", "losses.Loss_Ones", "Loss_MultiClass"], "function", ["None"], ["", "", "def", "get_UncertaintyLoss", "(", "method", ")", ":", "\n", "    ", "assert", "method", "in", "METHODS", "\n", "\n", "if", "method", "==", "'U-Zeros'", ":", "\n", "        ", "return", "Loss_Zeros", "(", ")", "\n", "\n", "", "if", "method", "==", "'U-Ones'", ":", "\n", "        ", "return", "Loss_Ones", "(", ")", "\n", "\n", "", "if", "method", "==", "'U-MultiClass'", ":", "\n", "        ", "return", "Loss_MultiClass", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.utils.losses.dice_loss": [[126, 135], ["target.float.float", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "function", ["None"], ["", "", "def", "dice_loss", "(", "score", ",", "target", ")", ":", "\n", "    ", "target", "=", "target", ".", "float", "(", ")", "\n", "smooth", "=", "1e-5", "\n", "intersect", "=", "torch", ".", "sum", "(", "score", "*", "target", ")", "\n", "y_sum", "=", "torch", ".", "sum", "(", "target", "*", "target", ")", "\n", "z_sum", "=", "torch", ".", "sum", "(", "score", "*", "score", ")", "\n", "loss", "=", "(", "2", "*", "intersect", "+", "smooth", ")", "/", "(", "z_sum", "+", "y_sum", "+", "smooth", ")", "\n", "loss", "=", "1", "-", "loss", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.utils.losses.dice_loss1": [[136, 145], ["target.float.float", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "function", ["None"], ["", "def", "dice_loss1", "(", "score", ",", "target", ")", ":", "\n", "    ", "target", "=", "target", ".", "float", "(", ")", "\n", "smooth", "=", "1e-5", "\n", "intersect", "=", "torch", ".", "sum", "(", "score", "*", "target", ")", "\n", "y_sum", "=", "torch", ".", "sum", "(", "target", ")", "\n", "z_sum", "=", "torch", ".", "sum", "(", "score", ")", "\n", "loss", "=", "(", "2", "*", "intersect", "+", "smooth", ")", "/", "(", "z_sum", "+", "y_sum", "+", "smooth", ")", "\n", "loss", "=", "1", "-", "loss", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.utils.losses.entropy_loss": [[146, 152], ["torch.mean", "torch.mean", "torch.tensor().cuda", "torch.tensor().cuda", "torch.sum", "torch.sum", "torch.tensor", "torch.tensor", "torch.log", "torch.log", "numpy.log"], "function", ["None"], ["", "def", "entropy_loss", "(", "p", ",", "C", "=", "2", ")", ":", "\n", "## p N*C*W*H*D", "\n", "    ", "y1", "=", "-", "1", "*", "torch", ".", "sum", "(", "p", "*", "torch", ".", "log", "(", "p", "+", "1e-6", ")", ",", "dim", "=", "1", ")", "/", "torch", ".", "tensor", "(", "np", ".", "log", "(", "C", ")", ")", ".", "cuda", "(", ")", "\n", "ent", "=", "torch", ".", "mean", "(", "y1", ")", "\n", "\n", "return", "ent", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.utils.losses.softmax_dice_loss": [[153, 171], ["torch.nn.functional.softmax", "torch.nn.functional.softmax", "range", "input_logits.size", "target_logits.size", "losses.dice_loss1"], "function", ["home.repos.pwc.inspect_result.xmed-lab_rscfed.utils.losses.dice_loss1"], ["", "def", "softmax_dice_loss", "(", "input_logits", ",", "target_logits", ")", ":", "\n", "    ", "\"\"\"Takes softmax on both sides and returns MSE loss\n\n    Note:\n    - Returns the sum over all examples. Divide by the batch size afterwards\n      if you want the mean.\n    - Sends gradients to inputs but not the targets.\n    \"\"\"", "\n", "assert", "input_logits", ".", "size", "(", ")", "==", "target_logits", ".", "size", "(", ")", "\n", "input_softmax", "=", "F", ".", "softmax", "(", "input_logits", ",", "dim", "=", "1", ")", "\n", "target_softmax", "=", "F", ".", "softmax", "(", "target_logits", ",", "dim", "=", "1", ")", "\n", "n", "=", "input_logits", ".", "shape", "[", "1", "]", "\n", "dice", "=", "0", "\n", "for", "i", "in", "range", "(", "0", ",", "n", ")", ":", "\n", "        ", "dice", "+=", "dice_loss1", "(", "input_softmax", "[", ":", ",", "i", "]", ",", "target_softmax", "[", ":", ",", "i", "]", ")", "\n", "", "mean_dice", "=", "dice", "/", "n", "\n", "\n", "return", "mean_dice", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.utils.losses.entropy_loss_map": [[173, 176], ["torch.tensor().cuda", "torch.tensor().cuda", "torch.sum", "torch.sum", "torch.tensor", "torch.tensor", "torch.log", "torch.log", "numpy.log"], "function", ["None"], ["", "def", "entropy_loss_map", "(", "p", ",", "C", "=", "2", ")", ":", "\n", "    ", "ent", "=", "-", "1", "*", "torch", ".", "sum", "(", "p", "*", "torch", ".", "log", "(", "p", "+", "1e-6", ")", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "/", "torch", ".", "tensor", "(", "np", ".", "log", "(", "C", ")", ")", ".", "cuda", "(", ")", "\n", "return", "ent", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.utils.losses.softmax_mse_loss": [[177, 191], ["input_logits.size", "target_logits.size"], "function", ["None"], ["", "def", "softmax_mse_loss", "(", "input_logits", ",", "target_logits", ")", ":", "\n", "    ", "\"\"\"Takes softmax on both sides and returns MSE loss\n\n    Note:\n    - Returns the sum over all examples. Divide by the batch size afterwards\n      if you want the mean.\n    - Sends gradients to inputs but not the targets.\n    \"\"\"", "\n", "assert", "input_logits", ".", "size", "(", ")", "==", "target_logits", ".", "size", "(", ")", "\n", "# input_softmax = F.softmax(input_logits, dim=1)", "\n", "# target_softmax = F.softmax(target_logits, dim=1)", "\n", "\n", "mse_loss", "=", "(", "input_logits", "-", "target_logits", ")", "**", "2", "\n", "return", "mse_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.utils.losses.cam_attention_map": [[192, 201], ["activations.permute().mul", "torch.reshape.permute", "torch.sum", "torch.sum", "torch.reshape", "torch.reshape", "activations.permute"], "function", ["None"], ["", "def", "cam_attention_map", "(", "activations", ",", "channel_weight", ")", ":", "\n", "# activations 48*49*1024", "\n", "# channel_weight 48*1024", "\n", "    ", "attention", "=", "activations", ".", "permute", "(", "1", ",", "0", ",", "2", ")", ".", "mul", "(", "channel_weight", ")", "\n", "attention", "=", "attention", ".", "permute", "(", "1", ",", "0", ",", "2", ")", "\n", "attention", "=", "torch", ".", "sum", "(", "attention", ",", "-", "1", ")", "\n", "attention", "=", "torch", ".", "reshape", "(", "attention", ",", "(", "48", ",", "7", ",", "7", ")", ")", "\n", "\n", "return", "attention", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.utils.losses.cam_activation": [[202, 232], ["batch_feature.permute.permute", "torch.reshape", "torch.reshape", "torch.reshape.permute().mul", "F.softmax.permute", "torch.sum", "torch.sum", "torch.nn.functional.softmax", "torch.reshape.permute", "torch.sum", "torch.sum", "activations2.permute.permute", "torch.reshape.permute"], "function", ["None"], ["", "def", "cam_activation", "(", "batch_feature", ",", "channel_weight", ")", ":", "\n", "# batch_feature = batch_feature.permute(0,2,3,1)#48 7 7 1024", "\n", "# activations = torch.reshape(batch_feature, (batch_feature.shape[0], -1, batch_feature.shape[3]))#48*49*1024", "\n", "\n", "# attention = activations.permute(1,0,2)#.mul(channel_weight)#49*48*1024", "\n", "# attention = attention.permute(1,2,0)#48*1024*49", "\n", "# attention = F.softmax(attention, -1)#48*1024*49", "\n", "\n", "# activations2 = activations.permute(0, 2, 1) #48 1024 49", "\n", "# activations2 = activations2 * attention ", "\n", "# activations2 = torch.sum(activations2, -1)#48*1024", "\n", "    ", "batch_feature", "=", "batch_feature", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "#48*49*1024", "\n", "activations", "=", "torch", ".", "reshape", "(", "batch_feature", ",", "(", "batch_feature", ".", "shape", "[", "0", "]", ",", "-", "1", ",", "batch_feature", ".", "shape", "[", "3", "]", ")", ")", "\n", "\n", "#49*48*1024", "\n", "attention", "=", "activations", ".", "permute", "(", "1", ",", "0", ",", "2", ")", ".", "mul", "(", "channel_weight", ")", "\n", "#48*49*1024", "\n", "attention", "=", "attention", ".", "permute", "(", "1", ",", "0", ",", "2", ")", "\n", "#48*49", "\n", "attention", "=", "torch", ".", "sum", "(", "attention", ",", "-", "1", ")", "\n", "attention", "=", "F", ".", "softmax", "(", "attention", ",", "-", "1", ")", "\n", "\n", "activations2", "=", "activations", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "#1024*48*49", "\n", "activations2", "=", "activations2", "*", "attention", "\n", "activations2", "=", "torch", ".", "sum", "(", "activations2", ",", "-", "1", ")", "#1024*48", "\n", "#48 1024 ", "\n", "activations2", "=", "activations2", ".", "permute", "(", "1", ",", "0", ")", "\n", "\n", "return", "activations2", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.utils.losses.relation_mse_loss_cam": [[263, 293], ["label.mm", "losses.cam_activation", "losses.cam_activation", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape.mm", "torch.reshape", "torch.reshape", "torch.reshape.mm", "torch.reshape", "torch.reshape", "torch.reshape.clone", "torch.reshape.clone", "torch.reshape.size", "torch.reshape.size", "torch.reshape.t", "torch.norm", "torch.norm", "torch.reshape.t", "torch.norm", "torch.norm"], "function", ["home.repos.pwc.inspect_result.xmed-lab_rscfed.utils.losses.cam_activation", "home.repos.pwc.inspect_result.xmed-lab_rscfed.utils.losses.cam_activation"], ["", "def", "relation_mse_loss_cam", "(", "activations", ",", "ema_activations", ",", "model", ",", "label", ")", ":", "\n", "    ", "\"\"\"Takes softmax on both sides and returns MSE loss\n\n    Note:\n    - Returns the sum over all examples. Divide by the batch size afterwards\n      if you want the mean.\n    - Sends gradients to inputs but not the targets.\n    \"\"\"", "\n", "weight", "=", "model", ".", "module", ".", "densenet121", ".", "classifier", "[", "0", "]", ".", "weight", "\n", "#48*1024", "\n", "channel_weight", "=", "label", ".", "mm", "(", "weight", ")", "\n", "\n", "activations", "=", "cam_activation", "(", "activations", ".", "clone", "(", ")", ",", "channel_weight", ")", "\n", "ema_activations", "=", "cam_activation", "(", "ema_activations", ".", "clone", "(", ")", ",", "channel_weight", ")", "\n", "\n", "assert", "activations", ".", "size", "(", ")", "==", "ema_activations", ".", "size", "(", ")", "\n", "\n", "activations", "=", "torch", ".", "reshape", "(", "activations", ",", "(", "activations", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ")", "\n", "ema_activations", "=", "torch", ".", "reshape", "(", "ema_activations", ",", "(", "ema_activations", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ")", "\n", "\n", "similarity", "=", "activations", ".", "mm", "(", "activations", ".", "t", "(", ")", ")", "\n", "norm", "=", "torch", ".", "reshape", "(", "torch", ".", "norm", "(", "similarity", ",", "2", ",", "1", ")", ",", "(", "-", "1", ",", "1", ")", ")", "\n", "norm_similarity", "=", "similarity", "/", "norm", "\n", "\n", "ema_similarity", "=", "ema_activations", ".", "mm", "(", "ema_activations", ".", "t", "(", ")", ")", "\n", "ema_norm", "=", "torch", ".", "reshape", "(", "torch", ".", "norm", "(", "ema_similarity", ",", "2", ",", "1", ")", ",", "(", "-", "1", ",", "1", ")", ")", "\n", "ema_norm_similarity", "=", "ema_similarity", "/", "ema_norm", "\n", "\n", "similarity_mse_loss", "=", "(", "norm_similarity", "-", "ema_norm_similarity", ")", "**", "2", "\n", "return", "similarity_mse_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.utils.losses.relation_mse_loss": [[294, 318], ["torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape.mm", "torch.reshape", "torch.reshape", "torch.reshape.mm", "torch.reshape", "torch.reshape", "torch.reshape.size", "torch.reshape.size", "torch.reshape.t", "torch.norm", "torch.norm", "torch.reshape.t", "torch.norm", "torch.norm"], "function", ["None"], ["", "def", "relation_mse_loss", "(", "activations", ",", "ema_activations", ")", ":", "\n", "    ", "\"\"\"Takes softmax on both sides and returns MSE loss\n\n    Note:\n    - Returns the sum over all examples. Divide by the batch size afterwards\n      if you want the mean.\n    - Sends gradients to inputs but not the targets.\n    \"\"\"", "\n", "\n", "assert", "activations", ".", "size", "(", ")", "==", "ema_activations", ".", "size", "(", ")", "\n", "\n", "activations", "=", "torch", ".", "reshape", "(", "activations", ",", "(", "activations", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ")", "\n", "ema_activations", "=", "torch", ".", "reshape", "(", "ema_activations", ",", "(", "ema_activations", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ")", "\n", "\n", "similarity", "=", "activations", ".", "mm", "(", "activations", ".", "t", "(", ")", ")", "\n", "norm", "=", "torch", ".", "reshape", "(", "torch", ".", "norm", "(", "similarity", ",", "2", ",", "1", ")", ",", "(", "-", "1", ",", "1", ")", ")", "\n", "norm_similarity", "=", "similarity", "/", "norm", "\n", "\n", "ema_similarity", "=", "ema_activations", ".", "mm", "(", "ema_activations", ".", "t", "(", ")", ")", "\n", "ema_norm", "=", "torch", ".", "reshape", "(", "torch", ".", "norm", "(", "ema_similarity", ",", "2", ",", "1", ")", ",", "(", "-", "1", ",", "1", ")", ")", "\n", "ema_norm_similarity", "=", "ema_similarity", "/", "ema_norm", "\n", "\n", "similarity_mse_loss", "=", "(", "norm_similarity", "-", "ema_norm_similarity", ")", "**", "2", "\n", "return", "similarity_mse_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.utils.losses.feature_mse_loss": [[320, 344], ["torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape.size", "torch.reshape.size"], "function", ["None"], ["", "def", "feature_mse_loss", "(", "activations", ",", "ema_activations", ")", ":", "\n", "    ", "\"\"\"Takes softmax on both sides and returns MSE loss\n\n    Note:\n    - Returns the sum over all examples. Divide by the batch size afterwards\n      if you want the mean.\n    - Sends gradients to inputs but not the targets.\n    \"\"\"", "\n", "\n", "assert", "activations", ".", "size", "(", ")", "==", "ema_activations", ".", "size", "(", ")", "\n", "\n", "activations", "=", "torch", ".", "reshape", "(", "activations", ",", "(", "activations", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ")", "\n", "ema_activations", "=", "torch", ".", "reshape", "(", "ema_activations", ",", "(", "ema_activations", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ")", "\n", "\n", "# similarity = activations.mm(activations.t())", "\n", "# norm = torch.reshape(torch.norm(similarity, 2, 1), (-1, 1))", "\n", "# norm_similarity = similarity / norm", "\n", "\n", "# ema_similarity = ema_activations.mm(ema_activations.t())", "\n", "# ema_norm = torch.reshape(torch.norm(ema_similarity, 2, 1), (-1, 1))", "\n", "# ema_norm_similarity = ema_similarity / ema_norm", "\n", "\n", "similarity_mse_loss", "=", "(", "activations", "-", "ema_activations", ")", "**", "2", "\n", "return", "similarity_mse_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.utils.losses.sigmoid_mse_loss": [[346, 362], ["torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss.", "input_logits.size", "target_logits.size"], "function", ["None"], ["", "def", "sigmoid_mse_loss", "(", "input_logits", ",", "target_logits", ")", ":", "\n", "    ", "\"\"\"Takes softmax on both sides and returns MSE loss\n\n    Note:\n    - Returns the sum over all examples. Divide by the batch size afterwards\n      if you want the mean.\n    - Sends gradients to inputs but not the targets.\n    \"\"\"", "\n", "assert", "input_logits", ".", "size", "(", ")", "==", "target_logits", ".", "size", "(", ")", "\n", "input_softmax", "=", "torch", ".", "sigmoid", "(", "input_logits", ")", "\n", "target_softmax", "=", "torch", ".", "sigmoid", "(", "target_logits", ")", "\n", "input_softmax", "=", "input_logits", "\n", "target_softmax", "=", "target_logits", "\n", "loss_fn", "=", "torch", ".", "nn", ".", "MSELoss", "(", "reduction", "=", "'none'", ")", "\n", "mse_loss", "=", "loss_fn", "(", "input_softmax", ",", "target_softmax", ")", "\n", "return", "mse_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.utils.losses.softmax_kl_loss": [[363, 379], ["torch.nn.functional.log_softmax", "torch.nn.functional.softmax", "torch.nn.functional.kl_div", "input_logits.size", "target_logits.size"], "function", ["None"], ["", "def", "softmax_kl_loss", "(", "input_logits", ",", "target_logits", ")", ":", "\n", "    ", "\"\"\"Takes softmax on both sides and returns KL divergence\n\n    Note:\n    - Returns the sum over all examples. Divide by the batch size afterwards\n      if you want the mean.\n    - Sends gradients to inputs but not the targets.\n    \"\"\"", "\n", "assert", "input_logits", ".", "size", "(", ")", "==", "target_logits", ".", "size", "(", ")", "\n", "input_log_softmax", "=", "F", ".", "log_softmax", "(", "input_logits", ",", "dim", "=", "1", ")", "\n", "target_softmax", "=", "F", ".", "softmax", "(", "target_logits", ",", "dim", "=", "1", ")", "\n", "\n", "# return F.kl_div(input_log_softmax, target_softmax)", "\n", "kl_div", "=", "F", ".", "kl_div", "(", "input_log_softmax", ",", "target_softmax", ",", "reduction", "=", "'none'", ")", "\n", "# mean_kl_div = torch.mean(0.2*kl_div[:,0,...]+0.8*kl_div[:,1,...])", "\n", "return", "kl_div", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.utils.losses.symmetric_mse_loss": [[380, 390], ["torch.mean", "torch.mean", "input1.size", "input2.size"], "function", ["None"], ["", "def", "symmetric_mse_loss", "(", "input1", ",", "input2", ")", ":", "\n", "    ", "\"\"\"Like F.mse_loss but sends gradients to both directions\n\n    Note:\n    - Returns the sum over all examples. Divide by the batch size afterwards\n      if you want the mean.\n    - Sends gradients to both input1 and input2.\n    \"\"\"", "\n", "assert", "input1", ".", "size", "(", ")", "==", "input2", ".", "size", "(", ")", "\n", "return", "torch", ".", "mean", "(", "(", "input1", "-", "input2", ")", "**", "2", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.networks.models.ModelFedCon.__init__": [[16, 33], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "networks.resnetcifar.ResNet18_cifar10", "torch.Sequential", "torch.Sequential", "models.SimpleCNN_header", "list", "networks.resnetcifar.ResNet18_cifar10.children"], "methods", ["home.repos.pwc.inspect_result.xmed-lab_rscfed.loss.loss.UnsupervisedLoss.__init__", "home.repos.pwc.inspect_result.xmed-lab_rscfed.networks.resnetcifar.ResNet18_cifar10"], ["    ", "def", "__init__", "(", "self", ",", "base_model", ",", "out_dim", ",", "n_classes", ")", ":", "\n", "        ", "super", "(", "ModelFedCon", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "base_model", "==", "\"resnet18-cifar10\"", "or", "base_model", "==", "\"resnet18\"", ":", "\n", "            ", "basemodel", "=", "ResNet18_cifar10", "(", ")", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "basemodel", ".", "children", "(", ")", ")", "[", ":", "-", "1", "]", ")", "\n", "num_ftrs", "=", "basemodel", ".", "fc", ".", "in_features", "\n", "", "else", ":", "\n", "            ", "self", ".", "features", "=", "SimpleCNN_header", "(", "input_dim", "=", "(", "16", "*", "5", "*", "5", ")", ",", "hidden_dims", "=", "[", "120", ",", "84", "]", ",", "output_dim", "=", "n_classes", ")", "\n", "num_ftrs", "=", "84", "\n", "\n", "# projection MLP", "\n", "", "self", ".", "l1", "=", "nn", ".", "Linear", "(", "num_ftrs", ",", "num_ftrs", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "0.5", ")", "\n", "self", ".", "l2", "=", "nn", ".", "Linear", "(", "num_ftrs", ",", "out_dim", ")", "\n", "\n", "# last layer", "\n", "self", ".", "l3", "=", "nn", ".", "Linear", "(", "out_dim", ",", "n_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.networks.models.ModelFedCon._get_basemodel": [[34, 41], ["None"], "methods", ["None"], ["", "def", "_get_basemodel", "(", "self", ",", "model_name", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "model", "=", "self", ".", "model_dict", "[", "model_name", "]", "\n", "# print(\"Feature extractor:\", model_name)", "\n", "return", "model", "\n", "", "except", ":", "\n", "            ", "raise", "(", "\"Invalid model name. Check the config file and pass one of: resnet18 or resnet50\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.networks.models.ModelFedCon.forward": [[42, 60], ["models.ModelFedCon.features", "h.unsqueeze.unsqueeze.squeeze", "models.ModelFedCon.l1", "torch.relu", "torch.relu", "models.ModelFedCon.l2", "models.ModelFedCon.l3", "torch.relu", "torch.relu", "torch.adaptive_avg_pool2d().view", "torch.adaptive_avg_pool2d().view", "len", "h.unsqueeze.unsqueeze.unsqueeze", "h.unsqueeze.unsqueeze.size", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "model", "=", "None", ")", ":", "\n", "        ", "h", "=", "self", ".", "features", "(", "x", ")", "\n", "# print(\"h before:\", h)", "\n", "# print(\"h size:\", h.size())", "\n", "if", "model", "==", "'densenet'", ":", "\n", "            ", "out", "=", "F", ".", "relu", "(", "h", ",", "inplace", "=", "True", ")", "\n", "h", "=", "F", ".", "adaptive_avg_pool2d", "(", "out", ",", "(", "1", ",", "1", ")", ")", ".", "view", "(", "h", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "", "h", "=", "h", ".", "squeeze", "(", ")", "\n", "if", "len", "(", "h", ".", "shape", ")", "==", "1", ":", "\n", "            ", "h", "=", "h", ".", "unsqueeze", "(", "dim", "=", "0", ")", "\n", "# print(\"h after:\", h)", "\n", "", "x", "=", "self", ".", "l1", "(", "h", ")", "\n", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "l2", "(", "x", ")", "\n", "\n", "y", "=", "self", ".", "l3", "(", "x", ")", "\n", "return", "h", ",", "x", ",", "y", "\n", "# base-encoder out, projection out, classifier out (logits)", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.networks.models.SimpleCNN_header.__init__": [[64, 75], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.xmed-lab_rscfed.loss.loss.UnsupervisedLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "hidden_dims", ",", "output_dim", "=", "10", ")", ":", "\n", "        ", "super", "(", "SimpleCNN_header", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "6", ",", "5", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "pool", "=", "nn", ".", "MaxPool2d", "(", "2", ",", "2", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "6", ",", "16", ",", "5", ")", "\n", "\n", "# for now, we hard coded this network", "\n", "# i.e. we fix the number of hidden layers i.e. 2 layers", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "input_dim", ",", "hidden_dims", "[", "0", "]", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "hidden_dims", "[", "0", "]", ",", "hidden_dims", "[", "1", "]", ")", "\n", "# self.fc3 = nn.Linear(hidden_dims[1], output_dim)", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.networks.models.SimpleCNN_header.forward": [[77, 86], ["models.SimpleCNN_header.pool", "models.SimpleCNN_header.pool", "models.SimpleCNN_header.view", "models.SimpleCNN_header.relu", "models.SimpleCNN_header.relu", "models.SimpleCNN_header.relu", "models.SimpleCNN_header.relu", "models.SimpleCNN_header.fc1", "models.SimpleCNN_header.fc2", "models.SimpleCNN_header.conv1", "models.SimpleCNN_header.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "pool", "(", "self", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "pool", "(", "self", ".", "relu", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "16", "*", "5", "*", "5", ")", "\n", "\n", "x", "=", "self", ".", "relu", "(", "self", ".", "fc1", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "relu", "(", "self", ".", "fc2", "(", "x", ")", ")", "\n", "# x = self.fc3(x)", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.networks.resnetcifar.BasicBlock.__init__": [[24, 41], ["torch.Module.__init__", "resnetcifar.conv3x3", "norm_layer", "torch.ReLU", "torch.ReLU", "resnetcifar.conv3x3", "norm_layer", "ValueError", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.xmed-lab_rscfed.loss.loss.UnsupervisedLoss.__init__", "home.repos.pwc.inspect_result.xmed-lab_rscfed.networks.resnetcifar.conv3x3", "home.repos.pwc.inspect_result.xmed-lab_rscfed.networks.resnetcifar.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "groups", "=", "1", ",", "\n", "base_width", "=", "64", ",", "dilation", "=", "1", ",", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "if", "groups", "!=", "1", "or", "base_width", "!=", "64", ":", "\n", "            ", "raise", "ValueError", "(", "'BasicBlock only supports groups=1 and base_width=64'", ")", "\n", "", "if", "dilation", ">", "1", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Dilation > 1 not supported in BasicBlock\"", ")", "\n", "# Both self.conv1 and self.downsample layers downsample the input when stride != 1", "\n", "", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.networks.resnetcifar.BasicBlock.forward": [[42, 59], ["resnetcifar.BasicBlock.conv1", "resnetcifar.BasicBlock.bn1", "resnetcifar.BasicBlock.relu", "resnetcifar.BasicBlock.conv2", "resnetcifar.BasicBlock.bn2", "resnetcifar.BasicBlock.relu", "resnetcifar.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.networks.resnetcifar.Bottleneck.__init__": [[70, 86], ["torch.Module.__init__", "resnetcifar.conv1x1", "norm_layer", "resnetcifar.conv3x3", "norm_layer", "resnetcifar.conv1x1", "norm_layer", "torch.ReLU", "torch.ReLU", "int"], "methods", ["home.repos.pwc.inspect_result.xmed-lab_rscfed.loss.loss.UnsupervisedLoss.__init__", "home.repos.pwc.inspect_result.xmed-lab_rscfed.networks.resnetcifar.conv1x1", "home.repos.pwc.inspect_result.xmed-lab_rscfed.networks.resnetcifar.conv3x3", "home.repos.pwc.inspect_result.xmed-lab_rscfed.networks.resnetcifar.conv1x1"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "groups", "=", "1", ",", "\n", "base_width", "=", "64", ",", "dilation", "=", "1", ",", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "width", "=", "int", "(", "planes", "*", "(", "base_width", "/", "64.", ")", ")", "*", "groups", "\n", "# Both self.conv2 and self.downsample layers downsample the input when stride != 1", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "width", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "width", ",", "width", ",", "stride", ",", "groups", ",", "dilation", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "width", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "norm_layer", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.networks.resnetcifar.Bottleneck.forward": [[87, 108], ["resnetcifar.Bottleneck.conv1", "resnetcifar.Bottleneck.bn1", "resnetcifar.Bottleneck.relu", "resnetcifar.Bottleneck.conv2", "resnetcifar.Bottleneck.bn2", "resnetcifar.Bottleneck.relu", "resnetcifar.Bottleneck.conv3", "resnetcifar.Bottleneck.bn3", "resnetcifar.Bottleneck.relu", "resnetcifar.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.networks.resnetcifar.ResNetCifar10.__init__": [[112, 161], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "resnetcifar.ResNetCifar10._make_layer", "resnetcifar.ResNetCifar10._make_layer", "resnetcifar.ResNetCifar10._make_layer", "resnetcifar.ResNetCifar10._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "resnetcifar.ResNetCifar10.modules", "len", "ValueError", "isinstance", "resnetcifar.ResNetCifar10.modules", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.xmed-lab_rscfed.loss.loss.UnsupervisedLoss.__init__", "home.repos.pwc.inspect_result.xmed-lab_rscfed.networks.resnetcifar.ResNetCifar10._make_layer", "home.repos.pwc.inspect_result.xmed-lab_rscfed.networks.resnetcifar.ResNetCifar10._make_layer", "home.repos.pwc.inspect_result.xmed-lab_rscfed.networks.resnetcifar.ResNetCifar10._make_layer", "home.repos.pwc.inspect_result.xmed-lab_rscfed.networks.resnetcifar.ResNetCifar10._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ",", "zero_init_residual", "=", "False", ",", "\n", "groups", "=", "1", ",", "width_per_group", "=", "64", ",", "replace_stride_with_dilation", "=", "None", ",", "\n", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "ResNetCifar10", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "self", ".", "_norm_layer", "=", "norm_layer", "\n", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "dilation", "=", "1", "\n", "if", "replace_stride_with_dilation", "is", "None", ":", "\n", "# each element in the tuple indicates if we should replace", "\n", "# the 2x2 stride with a dilated convolution instead", "\n", "            ", "replace_stride_with_dilation", "=", "[", "False", ",", "False", ",", "False", "]", "\n", "", "if", "len", "(", "replace_stride_with_dilation", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "\"replace_stride_with_dilation should be None \"", "\n", "\"or a 3-element tuple, got {}\"", ".", "format", "(", "replace_stride_with_dilation", ")", ")", "\n", "", "self", ".", "groups", "=", "groups", "\n", "self", ".", "base_width", "=", "width_per_group", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "self", ".", "inplanes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "0", "]", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "1", "]", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "2", "]", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "# Zero-initialize the last BN in each residual branch,", "\n", "# so that the residual branch starts with zeros, and each residual block behaves like an identity.", "\n", "# This improves the model by 0.2~0.3% according to https://arxiv.org/abs/1706.02677", "\n", "", "", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn3", ".", "weight", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.networks.resnetcifar.ResNetCifar10._make_layer": [[162, 185], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "resnetcifar.conv1x1", "norm_layer", "block"], "methods", ["home.repos.pwc.inspect_result.xmed-lab_rscfed.networks.resnetcifar.conv1x1"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilate", "=", "False", ")", ":", "\n", "        ", "norm_layer", "=", "self", ".", "_norm_layer", "\n", "downsample", "=", "None", "\n", "previous_dilation", "=", "self", ".", "dilation", "\n", "if", "dilate", ":", "\n", "            ", "self", ".", "dilation", "*=", "stride", "\n", "stride", "=", "1", "\n", "", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ",", "\n", "norm_layer", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "self", ".", "groups", ",", "\n", "self", ".", "base_width", ",", "previous_dilation", ",", "norm_layer", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "groups", "=", "self", ".", "groups", ",", "\n", "base_width", "=", "self", ".", "base_width", ",", "dilation", "=", "self", ".", "dilation", ",", "\n", "norm_layer", "=", "norm_layer", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.networks.resnetcifar.ResNetCifar10._forward_impl": [[186, 202], ["resnetcifar.ResNetCifar10.conv1", "resnetcifar.ResNetCifar10.bn1", "resnetcifar.ResNetCifar10.relu", "resnetcifar.ResNetCifar10.layer1", "resnetcifar.ResNetCifar10.layer2", "resnetcifar.ResNetCifar10.layer3", "resnetcifar.ResNetCifar10.layer4", "resnetcifar.ResNetCifar10.avgpool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "resnetcifar.ResNetCifar10.fc"], "methods", ["None"], ["", "def", "_forward_impl", "(", "self", ",", "x", ")", ":", "\n", "# See note [TorchScript super()]", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.networks.resnetcifar.ResNetCifar10.forward": [[203, 205], ["resnetcifar.ResNetCifar10._forward_impl"], "methods", ["home.repos.pwc.inspect_result.xmed-lab_rscfed.networks.resnetcifar.ResNetCifar10._forward_impl"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "_forward_impl", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.networks.resnetcifar.conv3x3": [[10, 14], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "groups", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.networks.resnetcifar.conv1x1": [[16, 19], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.networks.resnetcifar.ResNet18_cifar10": [[207, 216], ["resnetcifar.ResNetCifar10"], "function", ["None"], ["", "", "def", "ResNet18_cifar10", "(", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-18 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "ResNetCifar10", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.networks.resnetcifar.ResNet50_cifar10": [[219, 228], ["resnetcifar.ResNetCifar10"], "function", ["None"], ["", "def", "ResNet50_cifar10", "(", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-50 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "ResNetCifar10", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "", "", ""]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.dataloaders.dataset.CheXpertDataset.__init__": [[13, 42], ["torch.utils.data.Dataset.__init__", "torchvision.transforms.Compose", "print", "torchvision.transforms.Resize", "len", "len"], "methods", ["home.repos.pwc.inspect_result.xmed-lab_rscfed.loss.loss.UnsupervisedLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dataset_type", ",", "data_np", ",", "label_np", ",", "pre_w", ",", "pre_h", ",", "lab_trans", "=", "None", ",", "un_trans_wk", "=", "None", ",", "data_idxs", "=", "None", ",", "\n", "is_labeled", "=", "False", ",", "\n", "is_testing", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            data_dir: path to image directory.\n            csv_file: path to the file containing images\n                with corresponding labels.\n            transform: optional transform to be applied on a sample.\n        \"\"\"", "\n", "super", "(", "CheXpertDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "images", "=", "data_np", "\n", "self", ".", "labels", "=", "label_np", "\n", "self", ".", "is_labeled", "=", "is_labeled", "\n", "self", ".", "dataset_type", "=", "dataset_type", "\n", "self", ".", "is_testing", "=", "is_testing", "\n", "\n", "self", ".", "resize", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "Resize", "(", "(", "pre_w", ",", "pre_h", ")", ")", "]", ")", "\n", "if", "not", "is_testing", ":", "\n", "            ", "if", "is_labeled", "==", "True", ":", "\n", "                ", "self", ".", "transform", "=", "lab_trans", "\n", "", "else", ":", "\n", "                ", "self", ".", "data_idxs", "=", "data_idxs", "\n", "self", ".", "weak_trans", "=", "un_trans_wk", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "transform", "=", "lab_trans", "\n", "\n", "", "print", "(", "'Total # images:{}, labels:{}'", ".", "format", "(", "len", "(", "self", ".", "images", ")", ",", "len", "(", "self", ".", "labels", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.dataloaders.dataset.CheXpertDataset.__getitem__": [[43, 76], ["dataset.CheXpertDataset.resize", "PIL.Image.open().convert", "PIL.Image.fromarray().convert", "dataset.CheXpertDataset.transform", "torch.FloatTensor", "PIL.Image.open", "PIL.Image.fromarray", "dataset.CheXpertDataset.transform().squeeze", "dataset.CheXpertDataset.weak_trans", "range", "torch.FloatTensor", "len", "weak_aug[].squeeze", "torch.FloatTensor", "dataset.CheXpertDataset.transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            index: the index of item\n        Returns:\n            image and its labels\n        \"\"\"", "\n", "if", "self", ".", "dataset_type", "==", "'skin'", ":", "\n", "            ", "img_path", "=", "self", ".", "images", "[", "index", "]", "\n", "image", "=", "Image", ".", "open", "(", "img_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "", "else", ":", "\n", "            ", "image", "=", "Image", ".", "fromarray", "(", "self", ".", "images", "[", "index", "]", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n", "", "image_resized", "=", "self", ".", "resize", "(", "image", ")", "\n", "label", "=", "self", ".", "labels", "[", "index", "]", "\n", "\n", "if", "not", "self", ".", "is_testing", ":", "\n", "            ", "if", "self", ".", "is_labeled", "==", "True", ":", "\n", "                ", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "                    ", "image", "=", "self", ".", "transform", "(", "image_resized", ")", ".", "squeeze", "(", ")", "\n", "# image=image[:,:224,:224]", "\n", "return", "index", ",", "image", ",", "torch", ".", "FloatTensor", "(", "[", "label", "]", ")", "\n", "", "", "else", ":", "\n", "                ", "if", "self", ".", "weak_trans", "and", "self", ".", "data_idxs", "is", "not", "None", ":", "\n", "                    ", "weak_aug", "=", "self", ".", "weak_trans", "(", "image_resized", ")", "\n", "idx_in_all", "=", "self", ".", "data_idxs", "[", "index", "]", "\n", "\n", "for", "idx", "in", "range", "(", "len", "(", "weak_aug", ")", ")", ":", "\n", "                        ", "weak_aug", "[", "idx", "]", "=", "weak_aug", "[", "idx", "]", ".", "squeeze", "(", ")", "\n", "", "return", "index", ",", "weak_aug", ",", "torch", ".", "FloatTensor", "(", "[", "label", "]", ")", "\n", "", "", "", "else", ":", "\n", "            ", "image", "=", "self", ".", "transform", "(", "image_resized", ")", "\n", "return", "index", ",", "image", ",", "torch", ".", "FloatTensor", "(", "[", "label", "]", ")", "\n", "# return index, weak_aug, strong_aug, torch.FloatTensor([label])", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.dataloaders.dataset.CheXpertDataset.__len__": [[78, 80], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.dataloaders.dataset.TransformTwice.__init__": [[83, 85], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "transform", ")", ":", "\n", "        ", "self", ".", "transform", "=", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.dataloaders.dataset.TransformTwice.__call__": [[86, 90], ["dataset.TransformTwice.transform", "dataset.TransformTwice.transform"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "inp", ")", ":", "\n", "        ", "out1", "=", "self", ".", "transform", "(", "inp", ")", "\n", "out2", "=", "self", ".", "transform", "(", "inp", ")", "\n", "return", "[", "out1", ",", "out2", "]", "", "", "", ""]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.loss.loss.PairLoss.__init__": [[57, 73], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "similarity_metric", "=", "bha_coeff", ",", "\n", "distance_loss_metric", "=", "bha_coeff_loss", ",", "\n", "confidence_threshold", ":", "float", "=", "0.", ",", "\n", "similarity_threshold", ":", "float", "=", "0.9", ",", "\n", "distance_use_prob", ":", "bool", "=", "True", ",", "\n", "reduction", ":", "str", "=", "\"mean\"", ")", ":", "\n", "        ", "self", ".", "confidence_threshold", "=", "confidence_threshold", "\n", "self", ".", "similarity_threshold", "=", "similarity_threshold", "\n", "self", ".", "distance_use_prob", "=", "distance_use_prob", "\n", "# self.distance_use_prob =True", "\n", "\n", "self", ".", "reduction", "=", "reduction", "\n", "\n", "self", ".", "get_similarity", "=", "similarity_metric", "\n", "self", ".", "get_distance_loss", "=", "distance_loss_metric", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.loss.loss.PairLoss.__call__": [[74, 132], ["torch.sum.PairLoss.get_similarity", "torch.sum.PairLoss.get_distance_loss", "utils.get_pair_indices", "len", "targets.max", "conf_mask.float", "torch.threshold", "true_targets[].squeeze().numpy", "loss.compute_pred_matrix", "torch.sum", "torch.sum", "true_targets[].squeeze", "range", "loss_mat.detach().cpu().numpy", "loss_mat.detach().cpu", "loss_mat.detach"], "methods", ["home.repos.pwc.inspect_result.xmed-lab_rscfed.loss.utils.get_pair_indices", "home.repos.pwc.inspect_result.xmed-lab_rscfed.loss.loss.compute_pred_matrix"], ["", "def", "__call__", "(", "self", ",", "\n", "logits", ":", "Tensor", ",", "\n", "probs", ":", "Tensor", ",", "\n", "targets", ":", "Tensor", ",", "\n", "true_targets", ":", "Tensor", "=", "None", ",", "\n", "indices", ":", "Optional", "[", "Tensor", "]", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            logits: (batch_size, num_classes) predictions of batch data\n            probs: (batch_size, num_classes) softmax probs logits\n            targets: (batch_size, num_classes) one hot labels\n            true_targets: (batch_size, num_classes) one hot ground truth labels; used for visualization only\n        Returns: None if no pair satisfy the constraints\n        \"\"\"", "\n", "if", "indices", "is", "None", ":", "\n", "            ", "indices", "=", "get_pair_indices", "(", "targets", ",", "ordered_pair", "=", "True", ")", "# [i,j], i=[0:bs], j=[0:bs], i!=j", "\n", "", "total_size", "=", "len", "(", "indices", ")", "//", "2", "\n", "\n", "i_indices", ",", "j_indices", "=", "indices", "[", ":", ",", "0", "]", ",", "indices", "[", ":", ",", "1", "]", "\n", "\n", "logits_j", "=", "logits", "[", "j_indices", "]", "\n", "probs_j", "=", "probs", "[", "j_indices", "]", "\n", "targets_i", "=", "targets", "[", "i_indices", "]", "\n", "targets_j", "=", "targets", "[", "j_indices", "]", "\n", "\n", "targets_max_prob", "=", "targets", ".", "max", "(", "dim", "=", "1", ")", "[", "0", "]", "\n", "targets_i_max_prob", "=", "targets_max_prob", "[", "i_indices", "]", "\n", "\n", "conf_mask", "=", "targets_i_max_prob", ">", "self", ".", "confidence_threshold", "\n", "# \u4e3a\u4ec0\u4e48\u4e0b\u65b9sim\u8981\u8861\u91cftarget\u4e0d\u540c\u7ec4\u5408\u7684\u76f8\u4f3c\u5ea6\uff1f", "\n", "sim", ":", "Tensor", "=", "self", ".", "get_similarity", "(", "targets_i", ",", "targets_j", ",", "dim", "=", "1", ")", "\n", "# \u4fee\u6539\u5982\u4e0b\uff1a", "\n", "# sim: Tensor = self.get_similarity(targets_i, probs_j, dim=1)", "\n", "# \u4fdd\u7559\u7f6e\u4fe1\u5ea6\u9ad8\u7684 sharpened weak aug data output, \u53ca\u4e0e\u5176similaity\u9ad8\u7684strong aug data output", "\n", "factor", "=", "conf_mask", ".", "float", "(", ")", "*", "torch", ".", "threshold", "(", "sim", ",", "self", ".", "similarity_threshold", ",", "0", ")", "\n", "\n", "if", "self", ".", "distance_use_prob", ":", "\n", "            ", "loss_input", "=", "probs_j", "\n", "", "else", ":", "\n", "            ", "loss_input", "=", "logits_j", "\n", "# \u5982\u679c\u7528bha\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u5904\u7406\u4e2d\u81ea\u5e26softmax", "\n", "", "distance_ij", "=", "self", ".", "get_distance_loss", "(", "targets_i", ",", "loss_input", ",", "dim", "=", "1", ",", "reduction", "=", "'none'", ")", "\n", "\n", "loss_mat", "=", "factor", "*", "distance_ij", "\n", "if", "args", ".", "test", ":", "\n", "            ", "selected_pair", "=", "indices", "[", "[", "i", "for", "i", "in", "range", "(", "loss_mat", ".", "shape", "[", "0", "]", ")", "if", "loss_mat", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "i", "]", "!=", "0", "]", "]", "\n", "match_gt", "=", "true_targets", "[", "selected_pair", "]", ".", "squeeze", "(", ")", ".", "numpy", "(", ")", "\n", "match_mat", "=", "compute_pred_matrix", "(", "match_gt", "[", ":", ",", "0", "]", ",", "match_gt", "[", ":", ",", "1", "]", ")", "\n", "\n", "", "if", "self", ".", "reduction", "==", "\"mean\"", ":", "\n", "            ", "loss", "=", "torch", ".", "sum", "(", "loss_mat", ")", "/", "total_size", "\n", "", "elif", "self", ".", "reduction", "==", "\"sum\"", ":", "\n", "            ", "loss", "=", "torch", ".", "sum", "(", "loss_mat", ")", "\n", "\n", "", "if", "args", ".", "test", ":", "\n", "            ", "return", "loss", ",", "match_mat", "\n", "", "else", ":", "\n", "            ", "return", "loss", ",", "{", "\"log\"", ":", "{", "}", ",", "\"plot\"", ":", "{", "}", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.loss.loss.UnsupervisedLoss.__init__": [[135, 150], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "loss_type", ":", "str", ",", "\n", "loss_thresholded", ":", "bool", "=", "False", ",", "\n", "confidence_threshold", ":", "float", "=", "0.", ",", "\n", "reduction", ":", "str", "=", "\"mean\"", ")", ":", "\n", "        ", "if", "loss_type", "in", "[", "\"entropy\"", ",", "\"cross entropy\"", "]", ":", "\n", "            ", "self", ".", "loss_use_prob", "=", "False", "\n", "self", ".", "loss_fn", "=", "softmax_cross_entropy_loss", "\n", "", "else", ":", "\n", "            ", "self", ".", "loss_use_prob", "=", "True", "\n", "self", ".", "loss_fn", "=", "mse_loss", "\n", "\n", "", "self", ".", "loss_thresholded", "=", "loss_thresholded", "\n", "self", ".", "confidence_threshold", "=", "confidence_threshold", "\n", "self", ".", "reduction", "=", "reduction", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.loss.loss.UnsupervisedLoss.__call__": [[151, 170], ["loss.UnsupervisedLoss.UnsupervisedLoss.loss_fn", "utils.reduce_tensor", "targets_mask.view.view.float", "len", "targets_mask.view.view.view", "targets.max"], "methods", ["home.repos.pwc.inspect_result.xmed-lab_rscfed.loss.utils.reduce_tensor"], ["", "def", "__call__", "(", "self", ",", "logits", ":", "Tensor", ",", "probs", ":", "Tensor", ",", "targets", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "        ", "\"\"\"\n               Args:\n                   logits: (unlabeled_batch_size, num_classes) model output for unlabeled data\n                   targets: (unlabeled_batch_size, num_classes) guessed labels distribution for unlabeled data\n        \"\"\"", "\n", "loss_input", "=", "probs", "if", "self", ".", "loss_use_prob", "else", "logits", "\n", "loss", "=", "self", ".", "loss_fn", "(", "loss_input", ",", "targets", ",", "dim", "=", "1", ",", "reduction", "=", "\"none\"", ")", "\n", "\n", "if", "self", ".", "loss_thresholded", ":", "\n", "            ", "targets_mask", "=", "(", "targets", ".", "max", "(", "dim", "=", "1", ")", "[", "0", "]", ">", "self", ".", "confidence_threshold", ")", "\n", "\n", "if", "len", "(", "loss", ".", "shape", ")", ">", "1", ":", "\n", "# mse_loss returns a matrix, need to reshape mask", "\n", "                ", "targets_mask", "=", "targets_mask", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "\n", "", "loss", "*=", "targets_mask", ".", "float", "(", ")", "\n", "\n", "", "return", "reduce_tensor", "(", "loss", ",", "reduction", "=", "self", ".", "reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.loss.loss.softmax_cross_entropy_loss": [[17, 28], ["utils.reduce_tensor", "torch.sum", "torch.nn.functional.log_softmax"], "function", ["home.repos.pwc.inspect_result.xmed-lab_rscfed.loss.utils.reduce_tensor"], ["def", "softmax_cross_entropy_loss", "(", "logits", ":", "Tensor", ",", "targets", ":", "Tensor", ",", "dim", ":", "int", "=", "1", ",", "reduction", ":", "str", "=", "'mean'", ")", "->", "Tensor", ":", "\n", "    ", "\"\"\"\n    :param logits: (labeled_batch_size, num_classes) model output of the labeled data\n    :param targets: (labeled_batch_size, num_classes) labels distribution for the data\n    :param dim: the dimension or dimensions to reduce\n    :param reduction: choose from 'mean', 'sum', and 'none'\n    :return:\n    \"\"\"", "\n", "loss", "=", "-", "torch", ".", "sum", "(", "F", ".", "log_softmax", "(", "logits", ",", "dim", "=", "dim", ")", "*", "targets", ",", "dim", "=", "dim", ")", "\n", "\n", "return", "reduce_tensor", "(", "loss", ",", "reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.loss.loss.mse_loss": [[30, 32], ["torch.nn.functional.mse_loss"], "function", ["home.repos.pwc.inspect_result.xmed-lab_rscfed.loss.loss.mse_loss"], ["", "def", "mse_loss", "(", "prob", ":", "Tensor", ",", "targets", ":", "Tensor", ",", "reduction", ":", "str", "=", "'mean'", ",", "**", "kwargs", ")", "->", "Tensor", ":", "\n", "    ", "return", "F", ".", "mse_loss", "(", "prob", ",", "targets", ",", "reduction", "=", "reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.loss.loss.bha_coeff_loss": [[34, 48], ["torch.nn.functional.log_softmax", "torch.log", "utils.bha_coeff_log_prob"], "function", ["home.repos.pwc.inspect_result.xmed-lab_rscfed.loss.utils.bha_coeff_log_prob"], ["", "def", "bha_coeff_loss", "(", "targets", ":", "Tensor", ",", "logits", ":", "Tensor", ",", "dim", ":", "int", "=", "1", ",", "reduction", ":", "str", "=", "\"none\"", ")", "->", "Tensor", ":", "\n", "    ", "\"\"\"\n    Bhattacharyya coefficient of p and q; the more similar the larger the coefficient\n    :param logits: (batch_size, num_classes) model predictions of the data\n    :param targets: (batch_size, num_classes) label prob distribution\n    :param dim: the dimension or dimensions to reduce\n    :param reduction: reduction method, choose from \"sum\", \"mean\", \"none\n    :return: Bhattacharyya coefficient of p and q, see https://en.wikipedia.org/wiki/Bhattacharyya_distance\n    \"\"\"", "\n", "log_probs", "=", "F", ".", "log_softmax", "(", "logits", ",", "dim", "=", "dim", ")", "\n", "log_targets", "=", "torch", ".", "log", "(", "targets", ")", "\n", "\n", "# since BC(P,Q) is maximized when P and Q are the same, we minimize 1 - B(P,Q)", "\n", "return", "1.", "-", "bha_coeff_log_prob", "(", "log_probs", ",", "log_targets", ",", "dim", "=", "dim", ",", "reduction", "=", "reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.loss.loss.l2_dist_loss": [[50, 54], ["utils.l2_distance", "utils.reduce_tensor"], "function", ["home.repos.pwc.inspect_result.xmed-lab_rscfed.loss.utils.l2_distance", "home.repos.pwc.inspect_result.xmed-lab_rscfed.loss.utils.reduce_tensor"], ["", "def", "l2_dist_loss", "(", "probs", ":", "Tensor", ",", "targets", ":", "Tensor", ",", "dim", ":", "int", "=", "1", ",", "reduction", ":", "str", "=", "\"none\"", ")", "->", "Tensor", ":", "\n", "    ", "loss", "=", "l2_distance", "(", "probs", ",", "targets", ",", "dim", "=", "dim", ")", "\n", "\n", "return", "reduce_tensor", "(", "loss", ",", "reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.loss.loss.get_distance_loss_metric": [[172, 183], ["None"], "function", ["None"], ["", "", "def", "get_distance_loss_metric", "(", "distance_loss_type", ":", "str", ")", ":", "\n", "# other distance loss functions can be added here", "\n", "    ", "if", "distance_loss_type", "==", "\"l2\"", ":", "\n", "        ", "distance_use_prob", "=", "True", "\n", "distance_loss_metric", "=", "l2_dist_loss", "\n", "\n", "", "else", ":", "\n", "        ", "distance_use_prob", "=", "False", "\n", "distance_loss_metric", "=", "bha_coeff_loss", "\n", "\n", "", "return", "distance_loss_metric", ",", "distance_use_prob", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.loss.loss.build_pair_loss": [[185, 196], ["loss.get_distance_loss_metric", "loss.PairLoss"], "function", ["home.repos.pwc.inspect_result.xmed-lab_rscfed.loss.loss.get_distance_loss_metric"], ["", "def", "build_pair_loss", "(", "args", ":", "Namespace", ",", "reduction", ":", "str", "=", "\"mean\"", ")", "->", "PairLoss", ":", "\n", "# similarity_metric = get_similarity_metric(args.similarity_type)", "\n", "    ", "distance_loss_metric", ",", "distance_use_prob", "=", "get_distance_loss_metric", "(", "args", ".", "distance_loss_type", ")", "\n", "\n", "return", "PairLoss", "(", "\n", "similarity_metric", "=", "bha_coeff", ",", "\n", "distance_loss_metric", "=", "distance_loss_metric", ",", "\n", "confidence_threshold", "=", "args", ".", "confidence_threshold", ",", "\n", "similarity_threshold", "=", "args", ".", "similarity_threshold", ",", "\n", "distance_use_prob", "=", "distance_use_prob", ",", "\n", "reduction", "=", "reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.loss.loss.compute_pred_matrix": [[197, 202], ["numpy.zeros", "range", "len", "int", "int"], "function", ["None"], ["", "def", "compute_pred_matrix", "(", "gt", ",", "pred", ")", ":", "\n", "    ", "matrix", "=", "np", ".", "zeros", "(", "[", "10", ",", "10", "]", ")", "\n", "for", "idx_gt", "in", "range", "(", "len", "(", "gt", ")", ")", ":", "\n", "        ", "matrix", "[", "int", "(", "gt", "[", "idx_gt", "]", ")", "]", "[", "int", "(", "pred", "[", "idx_gt", "]", ")", "]", "+=", "1", "\n", "", "return", "matrix", "\n", "", ""]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.loss.utils.reduce_tensor": [[12, 20], ["torch.mean", "torch.sum"], "function", ["None"], ["def", "reduce_tensor", "(", "inputs", ":", "Tensor", ",", "reduction", ":", "str", ")", "->", "Tensor", ":", "\n", "    ", "if", "reduction", "==", "'mean'", ":", "\n", "        ", "return", "torch", ".", "mean", "(", "inputs", ")", "\n", "\n", "", "elif", "reduction", "==", "'sum'", ":", "\n", "        ", "return", "torch", ".", "sum", "(", "inputs", ")", "\n", "\n", "", "return", "inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.loss.utils.to_tensor": [[22, 31], ["torch.tensor"], "function", ["None"], ["", "def", "to_tensor", "(", "data", ":", "Union", "[", "ScalarType", ",", "Sequence", "[", "ScalarType", "]", "]", ",", "\n", "dtype", ":", "Optional", "[", "torch", ".", "dtype", "]", "=", "None", ",", "\n", "device", ":", "Optional", "[", "Union", "[", "torch", ".", "device", ",", "str", "]", "]", "=", "None", ",", "\n", "tensor_like", ":", "Optional", "[", "Tensor", "]", "=", "None", ")", "->", "Tensor", ":", "\n", "    ", "if", "tensor_like", "is", "not", "None", ":", "\n", "        ", "dtype", "=", "tensor_like", ".", "dtype", "if", "dtype", "is", "None", "else", "dtype", "\n", "device", "=", "tensor_like", ".", "device", "if", "device", "is", "None", "else", "device", "\n", "\n", "", "return", "torch", ".", "tensor", "(", "data", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.loss.utils.bha_coeff_log_prob": [[33, 48], ["torch.sum", "utils.reduce_tensor", "torch.exp"], "function", ["home.repos.pwc.inspect_result.xmed-lab_rscfed.loss.utils.reduce_tensor"], ["", "def", "bha_coeff_log_prob", "(", "log_p", ":", "Tensor", ",", "log_q", ":", "Tensor", ",", "dim", ":", "int", "=", "1", ",", "reduction", ":", "str", "=", "\"none\"", ")", "->", "Tensor", ":", "\n", "    ", "\"\"\"\n    Bhattacharyya coefficient of log(p) and log(q); the more similar the larger the coefficient\n    :param log_p: (batch_size, num_classes) first log prob distribution\n    :param log_q: (batch_size, num_classes) second log prob distribution\n    :param dim: the dimension or dimensions to reduce\n    :param reduction: reduction method, choose from \"sum\", \"mean\", \"none\n    :return: Bhattacharyya coefficient of p and q, see https://en.wikipedia.org/wiki/Bhattacharyya_distance\n    \"\"\"", "\n", "# numerical unstable version", "\n", "# coefficient = torch.sum(torch.sqrt(p * q), dim=dim)", "\n", "# numerical stable version", "\n", "coefficient", "=", "torch", ".", "sum", "(", "torch", ".", "exp", "(", "(", "log_p", "+", "log_q", ")", "/", "2", ")", ",", "dim", "=", "dim", ")", "\n", "\n", "return", "reduce_tensor", "(", "coefficient", ",", "reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.loss.utils.bha_coeff": [[50, 63], ["torch.log", "torch.log", "utils.bha_coeff_log_prob"], "function", ["home.repos.pwc.inspect_result.xmed-lab_rscfed.loss.utils.bha_coeff_log_prob"], ["", "def", "bha_coeff", "(", "p", ":", "Tensor", ",", "q", ":", "Tensor", ",", "dim", ":", "int", "=", "1", ",", "reduction", ":", "str", "=", "\"none\"", ")", "->", "Tensor", ":", "\n", "    ", "\"\"\"\n    Bhattacharyya coefficient of p and q; the more similar the larger the coefficient\n    :param p: (batch_size, num_classes) first prob distribution\n    :param q: (batch_size, num_classes) second prob distribution\n    :param dim: the dimension or dimensions to reduce\n    :param reduction: reduction method, choose from \"sum\", \"mean\", \"none\n    :return: Bhattacharyya coefficient of p and q, see https://en.wikipedia.org/wiki/Bhattacharyya_distance\n    \"\"\"", "\n", "log_p", "=", "torch", ".", "log", "(", "p", ")", "\n", "log_q", "=", "torch", ".", "log", "(", "q", ")", "\n", "\n", "return", "bha_coeff_log_prob", "(", "log_p", ",", "log_q", ",", "dim", "=", "dim", ",", "reduction", "=", "reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.loss.utils.bha_coeff_distance": [[65, 75], ["utils.bha_coeff"], "function", ["home.repos.pwc.inspect_result.xmed-lab_rscfed.loss.utils.bha_coeff"], ["", "def", "bha_coeff_distance", "(", "p", ":", "Tensor", ",", "q", ":", "Tensor", ",", "dim", ":", "int", "=", "1", ",", "reduction", ":", "str", "=", "\"none\"", ")", "->", "Tensor", ":", "\n", "    ", "\"\"\"\n    Bhattacharyya coefficient of p and q; the more similar the larger the coefficient\n    :param p: (batch_size, num_classes) model predictions of the data\n    :param q: (batch_size, num_classes) label prob distribution\n    :param dim: the dimension or dimensions to reduce\n    :param reduction: reduction method, choose from \"sum\", \"mean\", \"none\n    :return: Bhattacharyya coefficient of p and q, see https://en.wikipedia.org/wiki/Bhattacharyya_distance\n    \"\"\"", "\n", "return", "1.", "-", "bha_coeff", "(", "p", ",", "q", ",", "dim", "=", "dim", ",", "reduction", "=", "reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.loss.utils.hel_dist": [[77, 90], ["utils.reduce_tensor", "torch.norm", "numpy.sqrt", "torch.sqrt", "torch.sqrt"], "function", ["home.repos.pwc.inspect_result.xmed-lab_rscfed.loss.utils.reduce_tensor"], ["", "def", "hel_dist", "(", "p", ":", "Tensor", ",", "q", ":", "Tensor", ",", "dim", ":", "int", "=", "1", ",", "reduction", ":", "str", "=", "\"none\"", ")", "->", "Tensor", ":", "\n", "    ", "\"\"\"\n    Hellinger distance between p and q; the more similar the smaller the distance\n    :param p: (batch_size, num_classes) first prob distribution\n    :param q: (batch_size, num_classes) second prob distribution\n    :param dim: the dimension or dimensions to reduce\n    :param reduction: reduction method, choose from \"sum\", \"mean\", \"none\n    :return: Hellinger distance between p and q, see https://en.wikipedia.org/wiki/Hellinger_distance\n    \"\"\"", "\n", "# distance = torch.sqrt(torch.sum((torch.sqrt(p) - torch.sqrt(q)) ** 2, dim=dim)) / np.sqrt(2)", "\n", "distance", "=", "torch", ".", "norm", "(", "torch", ".", "sqrt", "(", "p", ")", "-", "torch", ".", "sqrt", "(", "q", ")", ",", "p", "=", "2", ",", "dim", "=", "dim", ")", "/", "np", ".", "sqrt", "(", "2", ")", "\n", "\n", "return", "reduce_tensor", "(", "distance", ",", "reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.loss.utils.l2_distance": [[92, 94], ["torch.norm"], "function", ["None"], ["", "def", "l2_distance", "(", "x", ":", "Tensor", ",", "y", ":", "Tensor", ",", "dim", ":", "int", ",", "**", "kwargs", ")", "->", "Tensor", ":", "\n", "    ", "return", "torch", ".", "norm", "(", "x", "-", "y", ",", "p", "=", "2", ",", "dim", "=", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.loss.utils.pairwise_apply": [[96, 109], ["p.unsqueeze.unsqueeze", "q.T.unsqueeze.T.unsqueeze", "func"], "function", ["None"], ["", "def", "pairwise_apply", "(", "p", ":", "Tensor", ",", "q", ":", "Tensor", ",", "func", ",", "dim", ":", "int", "=", "1", ",", "reduction", ":", "str", "=", "\"none\"", ")", "->", "Tensor", ":", "\n", "    ", "\"\"\"\n    Args:\n        p: (batch_size, num_classes) first prob distribution\n        q: (batch_size, num_classes) second prob distribution\n        func: function to be applied on p and q\n        dim: the dimension or dimensions to reduce\n        reduction: reduction method, choose from \"sum\", \"mean\", \"none\n    Returns: a matrix of pair-wise result between each element of p and q\n    \"\"\"", "\n", "p", "=", "p", ".", "unsqueeze", "(", "-", "1", ")", "\n", "q", "=", "q", ".", "T", ".", "unsqueeze", "(", "0", ")", "\n", "return", "func", "(", "p", ",", "q", ",", "dim", "=", "dim", ",", "reduction", "=", "reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xmed-lab_rscfed.loss.utils.get_pair_indices": [[111, 127], ["torch.combinations", "torch.tensor", "torch.cat", "range", "len"], "function", ["None"], ["", "def", "get_pair_indices", "(", "inputs", ":", "Tensor", ",", "ordered_pair", ":", "bool", "=", "False", ")", "->", "Tensor", ":", "\n", "    ", "\"\"\"\n    Get pair indices between each element in input tensor\n    Args:\n        inputs: input tensor\n        ordered_pair: if True, will return ordered pairs. (e.g. both inputs[i,j] and inputs[j,i] are included)\n    Returns: a tensor of shape (K, 2) where K = choose(len(inputs),2) if ordered_pair is False.\n        Else K = 2 * choose(len(inputs),2). Each row corresponds to two indices in inputs.\n    \"\"\"", "\n", "indices", "=", "torch", ".", "combinations", "(", "torch", ".", "tensor", "(", "range", "(", "len", "(", "inputs", ")", ")", ")", ",", "r", "=", "2", ")", "\n", "\n", "if", "ordered_pair", ":", "\n", "# make pairs ordered (e.g. both (0,1) and (1,0) are included)", "\n", "        ", "indices", "=", "torch", ".", "cat", "(", "(", "indices", ",", "indices", "[", ":", ",", "[", "1", ",", "0", "]", "]", ")", ",", "dim", "=", "0", ")", "\n", "\n", "", "return", "indices", "", "", ""]]}