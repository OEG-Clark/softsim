{"home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.None.data_crop_npy.DataProcessNumpy.__init__": [[12, 25], ["os.path.exists", "os.path.exists"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "data_directory", ",", "save_directory", ")", ":", "\n", "        ", "if", "save_directory", "is", "None", ":", "\n", "            ", "save_directory", "=", "data_directory", "\n", "\n", "", "for", "folder", "in", "[", "data_directory", ",", "save_directory", "]", ":", "\n", "            ", "assert", "os", ".", "path", ".", "exists", "(", "folder", ")", ",", "f\"Path `{folder}` does not exist\"", "\n", "assert", "os", ".", "path", ".", "exists", "(", "folder", ")", ",", "f\"Path `{folder}` does not exist\"", "\n", "\n", "", "self", ".", "data_directory", "=", "data_directory", "\n", "self", ".", "save_directory", "=", "save_directory", "\n", "self", ".", "channels", "=", "[", "'flair_norm'", ",", "'t1_norm'", ",", "'t1ce_norm'", ",", "'t2_norm'", "]", "\n", "self", ".", "weight_mask_channel", "=", "'mask'", "\n", "self", ".", "seg_file_suffix", "=", "'seg'", "\n", "\n"]], "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.None.data_crop_npy.DataProcessNumpy.__get_non_zero_bounding_box": [[26, 37], ["volume.nonzero", "numpy.zeros", "range", "len", "range", "len", "min", "range", "max"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "__get_non_zero_bounding_box", "(", "volume", ")", ":", "\n", "        ", "\"\"\"\n        Return bounding box of non-zero region of input `volume`\n        \"\"\"", "\n", "ind_tuple", "=", "volume", ".", "nonzero", "(", ")", "\n", "ind_limits", "=", "np", ".", "zeros", "(", "(", "len", "(", "volume", ".", "shape", ")", ",", "2", ")", ",", "dtype", "=", "np", ".", "uint16", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "volume", ".", "shape", ")", ")", ":", "\n", "            ", "ind_limits", "[", "i", ",", "0", "]", ",", "ind_limits", "[", "i", ",", "1", "]", "=", "min", "(", "ind_tuple", "[", "i", "]", ")", ",", "max", "(", "ind_tuple", "[", "i", "]", ")", "+", "1", "\n", "", "ind_limits_list", "=", "[", "range", "(", "ind_limits", "[", "i", "]", "[", "0", "]", ",", "ind_limits", "[", "i", "]", "[", "1", "]", ")", "for", "i", "in", "range", "(", "ind_limits", ".", "shape", "[", "0", "]", ")", "]", "\n", "return", "ind_limits_list", "\n", "\n"]], "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.None.data_crop_npy.DataProcessNumpy.__extract_volume": [[38, 44], ["numpy.ix_"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "__extract_volume", "(", "volume", ",", "ind_limits_list", ")", ":", "\n", "        ", "\"\"\"\n        Returns a rectangular crop of the input `volume`\n        \"\"\"", "\n", "return", "volume", "[", "np", ".", "ix_", "(", "*", "ind_limits_list", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.None.data_crop_npy.DataProcessNumpy.process": [[45, 60], ["data_crop_npy.DataProcessNumpy.patients_list", "print", "data_crop_npy.DataProcessNumpy.load_patient", "data_crop_npy.DataProcessNumpy.__get_non_zero_bounding_box", "data_crop_npy.DataProcessNumpy.__extract_volume", "data_crop_npy.DataProcessNumpy.__extract_volume", "data_crop_npy.DataProcessNumpy.__extract_volume", "zip", "data_crop_npy.DataProcessNumpy.save_npy", "print", "range"], "methods", ["home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.data_io.DataIO.patients_list", "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.data_io.DataIO.load_patient", "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.None.data_crop_npy.DataProcessNumpy.__get_non_zero_bounding_box", "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.None.data_crop_npy.DataProcessNumpy.__extract_volume", "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.None.data_crop_npy.DataProcessNumpy.__extract_volume", "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.None.data_crop_npy.DataProcessNumpy.__extract_volume", "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.None.data_crop_npy.DataProcessNumpy.save_npy"], ["", "def", "process", "(", "self", ")", ":", "\n", "        ", "\"\"\"\"\"\"", "\n", "patients", "=", "self", ".", "patients_list", "(", ")", "\n", "for", "p", "in", "patients", ":", "\n", "            ", "print", "(", "'Patient:'", ",", "p", ")", "\n", "data", ",", "weight", ",", "label", "=", "self", ".", "load_patient", "(", "p", ")", "\n", "ind_limits_list", "=", "self", ".", "__get_non_zero_bounding_box", "(", "weight", ")", "\n", "# extract the non-zero bounding box from data, weight, and label.", "\n", "data", "=", "self", ".", "__extract_volume", "(", "data", ",", "[", "range", "(", "0", ",", "4", ")", "]", "+", "ind_limits_list", ")", "\n", "weight", "=", "self", ".", "__extract_volume", "(", "weight", ",", "ind_limits_list", ")", "\n", "label", "=", "self", ".", "__extract_volume", "(", "label", ",", "ind_limits_list", ")", "\n", "# save npy", "\n", "for", "volume", ",", "suffix", "in", "zip", "(", "[", "data", ",", "weight", ",", "label", "]", ",", "[", "'data'", ",", "'weight'", ",", "'label'", "]", ")", ":", "\n", "                ", "self", ".", "save_npy", "(", "volume", ",", "p", ",", "suffix", ")", "\n", "print", "(", "'\\tSaved:'", ",", "suffix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.None.data_crop_npy.DataProcessNumpy.patients_list": [[61, 70], ["os.listdir", "name.lower"], "methods", ["None"], ["", "", "", "def", "patients_list", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Helper for getting list of patients/folders in 'data_directory' folder.\n        Returns:\n            'list' containing names of patients.\n        \"\"\"", "\n", "patients_list", "=", "os", ".", "listdir", "(", "self", ".", "data_directory", ")", "\n", "patients_list", "=", "[", "name", "for", "name", "in", "patients_list", "if", "'brats'", "in", "name", ".", "lower", "(", ")", "]", "\n", "return", "patients_list", "\n", "\n"]], "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.None.data_crop_npy.DataProcessNumpy.load_patient": [[71, 80], ["numpy.stack", "data_crop_npy.DataProcessNumpy.load_volume", "data_crop_npy.DataProcessNumpy.load_volume", "data_crop_npy.DataProcessNumpy.load_volume", "numpy.stack.append"], "methods", ["home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.data_io.DataIO.load_volume", "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.data_io.DataIO.load_volume", "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.data_io.DataIO.load_volume"], ["", "def", "load_patient", "(", "self", ",", "patient_id", ")", ":", "\n", "        ", "data", "=", "[", "]", "\n", "for", "mode", "in", "self", ".", "channels", ":", "\n", "            ", "volume", ",", "affine", ",", "header", "=", "self", ".", "load_volume", "(", "patient_id", ",", "mode", ",", "dtype", "=", "np", ".", "float32", ",", "with_info", "=", "True", ")", "# Modality", "\n", "data", ".", "append", "(", "volume", ")", "\n", "", "data", "=", "np", ".", "stack", "(", "data", ",", "axis", "=", "0", ")", "# One 4D volume (Channels, D, H, W)", "\n", "weight", "=", "self", ".", "load_volume", "(", "patient_id", ",", "self", ".", "weight_mask_channel", ",", "dtype", "=", "np", ".", "bool_", ")", "# Mask (binary)", "\n", "label", "=", "self", ".", "load_volume", "(", "patient_id", ",", "self", ".", "seg_file_suffix", ",", "dtype", "=", "np", ".", "uint8", ")", "# Label", "\n", "return", "data", ",", "weight", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.None.data_crop_npy.DataProcessNumpy.load_volume": [[81, 91], ["os.path.join", "nibabel.load", "nibabel.load.get_fdata().astype", "nibabel.load.uncache", "nibabel.load.get_fdata"], "methods", ["None"], ["", "def", "load_volume", "(", "self", ",", "patient", ",", "mode", ",", "dtype", "=", "np", ".", "float32", ",", "with_info", "=", "False", ")", ":", "\n", "        ", "file_name", "=", "'{0}_{1}.nii.gz'", ".", "format", "(", "patient", ",", "mode", ")", "\n", "file_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_directory", ",", "patient", ",", "file_name", ")", "\n", "image", "=", "nib", ".", "load", "(", "file_path", ")", "\n", "image_array", "=", "image", ".", "get_fdata", "(", ")", ".", "astype", "(", "dtype", ")", "\n", "image", ".", "uncache", "(", ")", "# release cache memory", "\n", "if", "with_info", ":", "\n", "            ", "return", "image_array", ",", "image", ".", "affine", ",", "image", ".", "header", "\n", "", "else", ":", "\n", "            ", "return", "image_array", "\n", "\n"]], "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.None.data_crop_npy.DataProcessNumpy.save_npy": [[92, 99], ["os.path.join", "os.path.join", "numpy.save", "os.path.exists", "os.makedirs"], "methods", ["None"], ["", "", "def", "save_npy", "(", "self", ",", "volume", ",", "patient", ",", "suffix", ")", ":", "\n", "        ", "save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_directory", ",", "patient", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "save_path", ")", "\n", "", "file_name", "=", "'{0}_{1}.npy'", ".", "format", "(", "patient", ",", "suffix", ")", "\n", "file_path", "=", "os", ".", "path", ".", "join", "(", "save_path", ",", "file_name", ")", "\n", "np", ".", "save", "(", "file_path", ",", "volume", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.None.data_preprocess.preprocess_in_directory": [[7, 21], ["os.path.exists", "os.listdir", "print", "os.listdir", "os.path.join", "data_preprocess.load_volume", "data_preprocess.mean_var_norm", "data_preprocess.save_volume", "os.path.join", "data_preprocess.save_volume", "mask.astype"], "function", ["home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.data_io.DataIO.load_volume", "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.None.data_preprocess.mean_var_norm", "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.inferenceloader.DatasetInference3d.save_volume", "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.inferenceloader.DatasetInference3d.save_volume"], ["def", "preprocess_in_directory", "(", "directory", ")", ":", "\n", "    ", "\"\"\" Normalize & save (in the same directory) data and non-zero masks. \"\"\"", "\n", "assert", "os", ".", "path", ".", "exists", "(", "directory", ")", ",", "f\"Path `{directory}` does not exist\"", "\n", "patients", "=", "os", ".", "listdir", "(", "directory", ")", "\n", "\n", "for", "p", "in", "patients", ":", "\n", "        ", "print", "(", "f\"Patient: {p}\"", ")", "\n", "files", "=", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "directory", ",", "p", ")", ")", "\n", "for", "mod", "in", "[", "'flair'", ",", "'t1'", ",", "'t1ce'", ",", "'t2'", "]", ":", "\n", "            ", "img", ",", "affine", "=", "load_volume", "(", "os", ".", "path", ".", "join", "(", "directory", ",", "p", ",", "p", "+", "'_'", "+", "mod", "+", "'.nii.gz'", ")", ")", "\n", "img", ",", "mask", "=", "mean_var_norm", "(", "img", ")", "\n", "save_volume", "(", "img", ",", "affine", ",", "directory", ",", "p", ",", "mod", "+", "'_norm'", ")", "\n", "if", "mod", "==", "'flair'", ":", "\n", "                ", "save_volume", "(", "mask", ".", "astype", "(", "np", ".", "uint8", ")", ",", "affine", ",", "directory", ",", "p", ",", "'mask'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.None.data_preprocess.mean_var_norm": [[23, 31], ["numpy.nanmean", "numpy.nanstd", "numpy.bool_"], "function", ["None"], ["", "", "", "", "def", "mean_var_norm", "(", "volume", ")", ":", "\n", "    ", "mask", "=", "volume", ">", "0", "\n", "pixels", "=", "volume", "[", "mask", "]", "\n", "mean", "=", "np", ".", "nanmean", "(", "pixels", ")", "\n", "std", "=", "np", ".", "nanstd", "(", "pixels", ")", "\n", "volume", "=", "(", "volume", "-", "mean", ")", "/", "std", "\n", "volume", "*=", "mask", "\n", "return", "volume", ",", "np", ".", "bool_", "(", "mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.None.data_preprocess.load_volume": [[33, 38], ["nibabel.load", "nib.load.get_fdata().astype", "nib.load.uncache", "nib.load.get_fdata"], "function", ["None"], ["", "def", "load_volume", "(", "load_file_name", ")", ":", "\n", "    ", "image", "=", "nib", ".", "load", "(", "load_file_name", ")", "\n", "image_array", "=", "image", ".", "get_fdata", "(", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "image", ".", "uncache", "(", ")", "\n", "return", "image_array", ",", "image", ".", "affine", "\n", "\n"]], "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.None.data_preprocess.save_volume": [[40, 44], ["os.path.join", "nibabel.save", "nibabel.Nifti1Image"], "function", ["None"], ["", "def", "save_volume", "(", "volume", ",", "affine", ",", "directory", ",", "patient", ",", "suffix", ")", ":", "\n", "    ", "file_name", "=", "'{0}_{1}.nii.gz'", ".", "format", "(", "patient", ",", "suffix", ")", "\n", "file_path", "=", "os", ".", "path", ".", "join", "(", "directory", ",", "patient", ",", "file_name", ")", "\n", "nib", ".", "save", "(", "nib", ".", "Nifti1Image", "(", "volume", ",", "affine", ")", ",", "file_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.e1d3.train.TrainSession.__init__": [[32, 139], ["print", "print", "print", "config_data.get", "len", "config_net.get", "config_net.get", "config_train.get", "config_train.get", "config_train.get", "config_train.get", "config_train.get", "config_train.get", "config_train.get", "config_val.get", "config_val.get", "config_train.get", "time.strftime", "print", "os.path.join", "os.path.join", "dict", "dict", "utils.enc1_dec3.PrototypeArchitecture3d().cuda", "train.TrainSession.model.apply", "utils.dataloader.DatasetMMEP3d", "utils.dataloader.DatasetMMEP3d", "utils.losses.XEntropyPlusDiceLoss().cuda", "torch.optim.SGD", "torch.optim.lr_scheduler.LambdaLR", "utils.metrics.MetricsPt", "torch.utils.tensorboard.SummaryWriter", "os.path.exists", "utils.parse_yaml.parse_yaml_config", "config_data.get", "utils.data_augment.DataAugmentation", "utils.data_augment.DataAugmentation", "train.TrainSession.model.parameters", "torch.no_grad", "torch.zeros().cuda", "train.TrainSession.writer.add_graph", "utils.enc1_dec3.PrototypeArchitecture3d", "isinstance", "isinstance", "isinstance", "torch.nn.init.kaiming_normal_", "utils.losses.XEntropyPlusDiceLoss", "torch.zeros().cpu().requires_grad_", "torch.zeros().cpu().requires_grad_", "torch.nn.init.constant_", "torch.zeros", "torch.zeros().cpu", "torch.zeros().cpu", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.parse_yaml.parse_yaml_config"], ["def", "__init__", "(", "self", ",", "config", "=", "None", ",", "config_file", "=", "None", ")", ":", "\n", "        ", "print", "(", "'---------------------------------'", ")", "\n", "print", "(", "'> Initializing Training Session <'", ")", "\n", "print", "(", "'---------------------------------'", ")", "\n", "if", "config", "is", "None", ":", "\n", "            ", "assert", "config_file", "is", "not", "None", ",", "f\"`config_file` is needed if `config` not provided.\"", "\n", "assert", "os", ".", "path", ".", "exists", "(", "config_file", ")", ",", "f\"config file {config_file} not found.\"", "\n", "config", "=", "parse_yaml_config", "(", "config_file", ")", "\n", "\n", "", "config_data", "=", "config", "[", "'data'", "]", "\n", "num_classes", "=", "config_data", ".", "get", "(", "'num_classes'", ")", "\n", "num_channels", "=", "len", "(", "config_data", ".", "get", "(", "'channels'", ")", ")", "\n", "\n", "config_net", "=", "config", "[", "'network'", "]", "\n", "models_folder", "=", "config_net", ".", "get", "(", "'model_save_directory'", ")", "\n", "segment_size", "=", "config_net", ".", "get", "(", "'data_shape'", ")", "\n", "\n", "config_train", "=", "config", "[", "'train'", "]", "\n", "self", ".", "total_epochs", "=", "config_train", ".", "get", "(", "'epochs'", ",", "None", ")", "\n", "num_workers", "=", "config_train", ".", "get", "(", "'workers_multithreading'", ")", "\n", "initial_learning_rate", "=", "config_train", ".", "get", "(", "'initial_learning_rate'", ")", "\n", "lr_decay_rate", "=", "config_train", ".", "get", "(", "'poly_decay_rate'", ")", "\n", "train_batch_size", "=", "config_train", ".", "get", "(", "'batch_size'", ")", "\n", "train_augment", "=", "config_train", ".", "get", "(", "'augmentation'", ")", "\n", "train_augment_list", "=", "config_train", ".", "get", "(", "'augmentations_to_do'", ",", "[", "]", ")", "\n", "\n", "config_val", "=", "config", "[", "'validate'", "]", "\n", "val_batch_size", "=", "config_val", ".", "get", "(", "'batch_size'", ")", "\n", "val_augment", "=", "config_val", ".", "get", "(", "'augmentation'", ")", "\n", "val_augment_list", "=", "config_train", ".", "get", "(", "'augmentations_to_do'", ",", "[", "]", ")", "\n", "\n", "run_date_time", "=", "time", ".", "strftime", "(", "'%Y-%m-%d_%H.%M.%S'", ")", "# create folder in models folder", "\n", "print", "(", "'> Session runtime:'", ",", "run_date_time", ")", "\n", "model_checkpoint_format", "=", "'epoch_{epoch:02d}_val_loss_{val_loss:.2f}.pt'", "\n", "self", ".", "model_checkpoint_filepath", "=", "os", ".", "path", ".", "join", "(", "models_folder", ",", "run_date_time", ",", "model_checkpoint_format", ")", "\n", "\n", "tensorboard_log_path", "=", "os", ".", "path", ".", "join", "(", "models_folder", ",", "run_date_time", ")", "\n", "# log_configuration(tensorboard_log_path, config_file)", "\n", "# log_configuration(tensorboard_log_path, 'utils/enc1_dec3.py')", "\n", "\n", "self", ".", "metrics_list_train", "=", "[", "'loss'", ",", "'dice_wt'", ",", "'dice_tc'", ",", "'dice_en'", "]", "\n", "self", ".", "metrics_list_val", "=", "[", "'loss'", ",", "'dice_wt'", ",", "'dice_tc'", ",", "'dice_en'", "]", "\n", "# initialize metrics:", "\n", "self", ".", "train_metrics", "=", "dict", "(", "(", "met", ",", "torch", ".", "zeros", "(", "1", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "cpu", "(", ")", ".", "requires_grad_", "(", "False", ")", ")", "\n", "for", "met", "in", "self", ".", "metrics_list_train", ")", "\n", "self", ".", "val_metrics", "=", "dict", "(", "(", "met", ",", "torch", ".", "zeros", "(", "1", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "cpu", "(", ")", ".", "requires_grad_", "(", "False", ")", ")", "\n", "for", "met", "in", "self", ".", "metrics_list_val", ")", "\n", "\n", "#####################################", "\n", "# network model", "\n", "self", ".", "model", "=", "PrototypeArchitecture3d", "(", "config", ")", ".", "cuda", "(", ")", "\n", "\n", "# initialization:", "\n", "def", "init_weights", "(", "m", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "Conv3d", ")", "or", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "Linear", ")", "or", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "ConvTranspose3d", ")", ":", "\n", "                ", "torch", ".", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ")", "# He-Weights Init", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "torch", ".", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0.1", ")", "# Constant 0.1", "\n", "\n", "", "", "", "self", ".", "model", ".", "apply", "(", "init_weights", ")", "\n", "\n", "#####################################", "\n", "# augmentation object:", "\n", "self", ".", "train_augfn", "=", "DataAugmentation", "(", "aug_list", "=", "train_augment_list", ")", "if", "train_augment", "else", "None", "\n", "self", ".", "val_augfn", "=", "DataAugmentation", "(", "aug_list", "=", "val_augment_list", ")", "if", "val_augment", "else", "None", "\n", "\n", "# train generator:", "\n", "self", ".", "train_gen_params", "=", "{", "\n", "'batch_size'", ":", "train_batch_size", ",", "\n", "'shuffle'", ":", "True", ",", "\n", "'num_workers'", ":", "num_workers", ",", "\n", "'pin_memory'", ":", "True", ",", "\n", "}", "\n", "self", ".", "train_dataset", "=", "DatasetMMEP3d", "(", "config", ",", "'train'", ",", "augment", "=", "self", ".", "train_augfn", ")", "\n", "self", ".", "train_iterations", "=", "self", ".", "train_dataset", ".", "batches_per_epoch", "\n", "\n", "# val generator:", "\n", "self", ".", "val_gen_params", "=", "{", "\n", "'batch_size'", ":", "val_batch_size", ",", "\n", "'shuffle'", ":", "True", ",", "\n", "'num_workers'", ":", "num_workers", ",", "\n", "'pin_memory'", ":", "True", ",", "\n", "}", "\n", "self", ".", "val_dataset", "=", "DatasetMMEP3d", "(", "config", ",", "'validate'", ",", "augment", "=", "self", ".", "val_augfn", ")", "\n", "self", ".", "val_iterations", "=", "self", ".", "val_dataset", ".", "batches_per_epoch", "\n", "\n", "#####################################", "\n", "self", ".", "loss_fn", "=", "XEntropyPlusDiceLoss", "(", "num_classes", "=", "num_classes", ")", ".", "cuda", "(", ")", "\n", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "lr", "=", "initial_learning_rate", ",", "momentum", "=", "0.99", ",", "\n", "weight_decay", "=", "1e-6", ",", "dampening", "=", "0", ",", "nesterov", "=", "True", ")", "\n", "\n", "def", "lr_lambda", "(", "epoch", ")", ":", "\n", "            ", "return", "(", "1", "-", "epoch", "/", "self", ".", "total_epochs", ")", "**", "lr_decay_rate", "\n", "", "self", ".", "scheduler", "=", "lr_scheduler", ".", "LambdaLR", "(", "self", ".", "optimizer", ",", "lr_lambda", ",", "last_epoch", "=", "-", "1", ",", "verbose", "=", "True", ")", "\n", "\n", "self", ".", "metrics_obj", "=", "MetricsPt", "(", ")", "\n", "\n", "#####################################", "\n", "# tensorboard writer:", "\n", "self", ".", "writer", "=", "SummaryWriter", "(", "log_dir", "=", "tensorboard_log_path", ")", "# read from config", "\n", "\n", "# log graph to tensorboard:", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "random_tensor", "=", "torch", ".", "zeros", "(", "train_batch_size", ",", "num_channels", ",", "*", "segment_size", ")", ".", "cuda", "(", ")", "\n", "self", ".", "writer", ".", "add_graph", "(", "self", ".", "model", ",", "random_tensor", ")", "\n", "del", "random_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.e1d3.train.TrainSession.load_model": [[140, 144], ["train.TrainSession.model.load_state_dict", "print", "train.TrainSession.model.eval", "torch.load"], "methods", ["None"], ["", "", "def", "load_model", "(", "self", ",", "path", ")", ":", "\n", "        ", "self", ".", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "path", ")", ")", "# providing a dictionary object", "\n", "print", "(", "'Loaded Model file:'", ",", "path", ")", "\n", "self", ".", "model", ".", "eval", "(", ")", "# setting dropout/batchnorm/etc layers to evaluation mode", "\n", "\n"]], "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.e1d3.train.TrainSession.initialize_generator": [[145, 152], ["torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "Exception"], "methods", ["None"], ["", "def", "initialize_generator", "(", "self", ",", "train_or_val", ")", ":", "\n", "        ", "if", "train_or_val", "==", "'train'", ":", "\n", "            ", "self", ".", "train_generator", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "self", ".", "train_dataset", ",", "**", "self", ".", "train_gen_params", ")", "\n", "", "elif", "train_or_val", "==", "'val'", ":", "\n", "            ", "self", ".", "val_generator", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "self", ".", "val_dataset", ",", "**", "self", ".", "val_gen_params", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'Incorrect mode provided: {}'", ".", "format", "(", "train_or_val", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.e1d3.train.TrainSession.delete_generator": [[153, 160], ["Exception"], "methods", ["None"], ["", "", "def", "delete_generator", "(", "self", ",", "train_or_val", ")", ":", "\n", "        ", "if", "train_or_val", "==", "'train'", ":", "# train generator", "\n", "            ", "del", "self", ".", "train_generator", "\n", "", "elif", "train_or_val", "==", "'val'", ":", "# val generator", "\n", "            ", "del", "self", ".", "val_generator", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'Incorrect mode provided: {}'", ".", "format", "(", "train_or_val", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.e1d3.train.TrainSession.initialize_metrics": [[161, 171], ["torch.no_grad", "train_or_val.lower", "train.TrainSession.train_metrics[].zero_", "train_or_val.lower", "Exception", "train.TrainSession.val_metrics[].zero_"], "methods", ["None"], ["", "", "def", "initialize_metrics", "(", "self", ",", "train_or_val", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "if", "train_or_val", ".", "lower", "(", ")", "==", "'train'", ":", "\n", "                ", "for", "met", "in", "self", ".", "train_metrics", ":", "\n", "                    ", "self", ".", "train_metrics", "[", "met", "]", ".", "zero_", "(", ")", "\n", "", "", "elif", "train_or_val", ".", "lower", "(", ")", "==", "'val'", ":", "\n", "                ", "for", "met", "in", "self", ".", "val_metrics", ":", "\n", "                    ", "self", ".", "val_metrics", "[", "met", "]", ".", "zero_", "(", ")", "\n", "", "", "else", ":", "\n", "                ", "raise", "Exception", "(", "'Incorrect mode provided: {}'", ".", "format", "(", "train_or_val", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.e1d3.train.TrainSession.loop_over_epochs": [[172, 206], ["range", "train.TrainSession.writer.flush", "train.TrainSession.writer.close", "print", "print", "print", "print", "train.TrainSession.log_to_tensorboard", "torch.cuda.synchronize", "datetime.datetime.now", "train.TrainSession.train_epoch", "train.TrainSession.val_epoch", "torch.cuda.synchronize", "datetime.datetime.now", "print", "train.TrainSession.save_model", "train.TrainSession.scheduler.step", "enumerate"], "methods", ["home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.e1d3.train.TrainSession.log_to_tensorboard", "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.e1d3.train.TrainSession.train_epoch", "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.e1d3.train.TrainSession.val_epoch", "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.e1d3.train.TrainSession.save_model"], ["", "", "", "def", "loop_over_epochs", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Epoch = Train -> Validate\n        Training and Validation in alternating fashion\n        Model is saved and Learning rate is updated at the end of epoch\n        \"\"\"", "\n", "for", "epoch", "in", "range", "(", "self", ".", "total_epochs", ")", ":", "\n", "            ", "print", "(", "'\\n'", "+", "(", "'-'", "*", "20", ")", ")", "\n", "print", "(", "'> Epoch {}/{}'", ".", "format", "(", "epoch", "+", "1", ",", "self", ".", "total_epochs", ")", ")", "\n", "print", "(", "(", "'-'", "*", "20", ")", "+", "'\\n'", ")", "\n", "\n", "# read and log learning rate:", "\n", "self", ".", "log_to_tensorboard", "(", "{", "\n", "f\"LR/param_group_{i}\"", ":", "pg", "[", "'lr'", "]", "for", "i", ",", "pg", "in", "enumerate", "(", "self", ".", "optimizer", ".", "param_groups", ")", "\n", "}", ",", "epoch", ")", "\n", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "t0", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "\n", "train_dict", "=", "self", ".", "train_epoch", "(", "epoch", "+", "1", ")", "\n", "val_dict", "=", "self", ".", "val_epoch", "(", "epoch", "+", "1", ")", "\n", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "tn", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "\n", "print", "(", "'--- Epoch Time: {} ---'", ".", "format", "(", "tn", "-", "t0", ")", ")", "\n", "\n", "validation_loss", "=", "val_dict", "[", "'loss/val'", "]", "\n", "self", ".", "save_model", "(", "epoch", "+", "1", ",", "validation_loss", ")", "\n", "self", ".", "scheduler", ".", "step", "(", ")", "\n", "\n", "", "self", ".", "writer", ".", "flush", "(", ")", "\n", "self", ".", "writer", ".", "close", "(", ")", "\n", "print", "(", "'Training Finished!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.e1d3.train.TrainSession.train_epoch": [[207, 265], ["train.TrainSession.model.train", "train.TrainSession.initialize_generator", "train.TrainSession.initialize_metrics", "train.TrainSession.train_dataset.on_epoch_begin", "train.TrainSession.per_epoch_metrics", "train.TrainSession.log_to_tensorboard", "train.TrainSession.delete_generator", "train.TrainSession.optimizer.zero_grad", "loss.backward", "train.TrainSession.optimizer.step", "utils.session_logger.show_progress", "torch.no_grad", "data_tensor.cuda.cuda.cuda", "train.TrainSession.binarize_labels().long().cuda", "train.TrainSession.binarize_labels().long().cuda", "train.TrainSession.binarize_labels().long().cuda", "torch.set_grad_enabled", "train.TrainSession.model", "torch.no_grad", "train.TrainSession.metrics_obj.dice_score", "train.TrainSession.metrics_obj.dice_score", "train.TrainSession.metrics_obj.dice_score", "torch.argmax", "torch.argmax", "torch.argmax", "loss.detach().cpu", "train.TrainSession.cpu", "train.TrainSession.cpu", "train.TrainSession.cpu", "train.TrainSession.binarize_labels().long", "train.TrainSession.binarize_labels().long", "train.TrainSession.binarize_labels().long", "train.TrainSession.loss_fn", "train.TrainSession.train_metrics[].item", "train.TrainSession.loss_fn", "train.TrainSession.loss_fn", "loss.detach", "train.TrainSession.binarize_labels", "train.TrainSession.binarize_labels", "train.TrainSession.binarize_labels", "label_tensor.clone", "label_tensor.clone", "label_tensor.clone"], "methods", ["home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.e1d3.train.TrainSession.initialize_generator", "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.e1d3.train.TrainSession.initialize_metrics", "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.dataloader.DatasetMMEP3d.on_epoch_begin", "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.e1d3.train.TrainSession.per_epoch_metrics", "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.e1d3.train.TrainSession.log_to_tensorboard", "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.e1d3.train.TrainSession.delete_generator", "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.session_logger.show_progress", "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.metrics.MetricsPt.dice_score", "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.metrics.MetricsPt.dice_score", "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.metrics.MetricsPt.dice_score", "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.e1d3.train.TrainSession.binarize_labels", "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.e1d3.train.TrainSession.binarize_labels", "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.e1d3.train.TrainSession.binarize_labels"], ["", "def", "train_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "\"\"\"\"\"\"", "\n", "self", ".", "model", ".", "train", "(", ")", "# model in train mode", "\n", "self", ".", "initialize_generator", "(", "'train'", ")", "\n", "self", ".", "initialize_metrics", "(", "'train'", ")", "\n", "self", ".", "train_dataset", ".", "on_epoch_begin", "(", ")", "# does nothing right now", "\n", "\n", "# training iterations:", "\n", "i", "=", "0", "\n", "for", "data_tensor", ",", "label_tensor", "in", "self", ".", "train_generator", ":", "\n", "            ", "i", "+=", "1", "\n", "\n", "# Binarize Labels:", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "data_tensor", "=", "data_tensor", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "label_tensor_wt", "=", "self", ".", "binarize_labels", "(", "label_tensor", ".", "clone", "(", ")", ",", "'WT'", ")", ".", "long", "(", ")", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "label_tensor_tc", "=", "self", ".", "binarize_labels", "(", "label_tensor", ".", "clone", "(", ")", ",", "'TC'", ")", ".", "long", "(", ")", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "label_tensor_en", "=", "self", ".", "binarize_labels", "(", "label_tensor", ".", "clone", "(", ")", ",", "'EN'", ")", ".", "long", "(", ")", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "del", "label_tensor", "\n", "\n", "", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "# predict", "\n", "with", "torch", ".", "set_grad_enabled", "(", "True", ")", ":", "\n", "                ", "(", "output_tensor_wt", ",", "\n", "output_tensor_tc", ",", "\n", "output_tensor_en", ")", "=", "self", ".", "model", "(", "data_tensor", ")", "\n", "loss", "=", "(", "self", ".", "loss_fn", "(", "output_tensor_wt", ",", "label_tensor_wt", ")", "+", "\n", "self", ".", "loss_fn", "(", "output_tensor_tc", ",", "label_tensor_tc", ")", "+", "\n", "self", ".", "loss_fn", "(", "output_tensor_en", ",", "label_tensor_en", ")", ")", "/", "3.", "\n", "\n", "# backpropagate", "\n", "", "loss", ".", "backward", "(", ")", "\n", "# update", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "# evaluate", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "dice_wt", "=", "self", ".", "metrics_obj", ".", "dice_score", "(", "torch", ".", "argmax", "(", "output_tensor_wt", ",", "dim", "=", "1", ")", ",", "label_tensor_wt", ")", "\n", "dice_tc", "=", "self", ".", "metrics_obj", ".", "dice_score", "(", "torch", ".", "argmax", "(", "output_tensor_tc", ",", "dim", "=", "1", ")", ",", "label_tensor_tc", ")", "\n", "dice_en", "=", "self", ".", "metrics_obj", ".", "dice_score", "(", "torch", ".", "argmax", "(", "output_tensor_en", ",", "dim", "=", "1", ")", ",", "label_tensor_en", ")", "\n", "\n", "metric_dict", "=", "{", "\n", "'loss'", ":", "loss", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "\n", "'dice_wt'", ":", "dice_wt", ".", "cpu", "(", ")", ",", "\n", "'dice_tc'", ":", "dice_tc", ".", "cpu", "(", ")", ",", "\n", "'dice_en'", ":", "dice_en", ".", "cpu", "(", ")", ",", "\n", "}", "\n", "for", "met", "in", "self", ".", "train_metrics", ":", "\n", "                    ", "self", ".", "train_metrics", "[", "met", "]", "+=", "metric_dict", "[", "met", "]", "\n", "\n", "# Print progress:", "\n", "", "", "show_progress", "(", "i", ",", "self", ".", "train_iterations", ",", "'Loss:%.4f'", "%", "(", "self", ".", "train_metrics", "[", "'loss'", "]", ".", "item", "(", ")", "/", "i", ")", ")", "\n", "\n", "", "per_epoch_dict", "=", "self", ".", "per_epoch_metrics", "(", "self", ".", "train_metrics", ",", "i", ",", "'train'", ")", "\n", "self", ".", "log_to_tensorboard", "(", "per_epoch_dict", ",", "epoch", ")", "\n", "self", ".", "delete_generator", "(", "'train'", ")", "\n", "return", "per_epoch_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.e1d3.train.TrainSession.val_epoch": [[266, 316], ["train.TrainSession.model.eval", "train.TrainSession.initialize_generator", "train.TrainSession.initialize_metrics", "train.TrainSession.val_dataset.on_epoch_begin", "train.TrainSession.optimizer.zero_grad", "train.TrainSession.per_epoch_metrics", "train.TrainSession.log_to_tensorboard", "train.TrainSession.delete_generator", "torch.no_grad", "data_tensor.cuda.cuda.cuda", "train.TrainSession.binarize_labels().long().cuda", "train.TrainSession.binarize_labels().long().cuda", "train.TrainSession.binarize_labels().long().cuda", "train.TrainSession.model", "train.TrainSession.metrics_obj.dice_score", "train.TrainSession.metrics_obj.dice_score", "train.TrainSession.metrics_obj.dice_score", "utils.session_logger.show_progress", "torch.argmax", "torch.argmax", "torch.argmax", "loss.detach().cpu", "train.TrainSession.cpu", "train.TrainSession.cpu", "train.TrainSession.cpu", "train.TrainSession.binarize_labels().long", "train.TrainSession.binarize_labels().long", "train.TrainSession.binarize_labels().long", "train.TrainSession.loss_fn", "train.TrainSession.loss_fn", "train.TrainSession.loss_fn", "loss.detach", "train.TrainSession.val_metrics[].item", "train.TrainSession.binarize_labels", "train.TrainSession.binarize_labels", "train.TrainSession.binarize_labels", "label_tensor.clone", "label_tensor.clone", "label_tensor.clone"], "methods", ["home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.e1d3.train.TrainSession.initialize_generator", "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.e1d3.train.TrainSession.initialize_metrics", "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.dataloader.DatasetMMEP3d.on_epoch_begin", "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.e1d3.train.TrainSession.per_epoch_metrics", "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.e1d3.train.TrainSession.log_to_tensorboard", "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.e1d3.train.TrainSession.delete_generator", "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.metrics.MetricsPt.dice_score", "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.metrics.MetricsPt.dice_score", "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.metrics.MetricsPt.dice_score", "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.session_logger.show_progress", "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.e1d3.train.TrainSession.binarize_labels", "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.e1d3.train.TrainSession.binarize_labels", "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.e1d3.train.TrainSession.binarize_labels"], ["", "def", "val_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "\"\"\"\"\"\"", "\n", "self", ".", "model", ".", "eval", "(", ")", "# model in evaluation mode", "\n", "self", ".", "initialize_generator", "(", "'val'", ")", "\n", "self", ".", "initialize_metrics", "(", "'val'", ")", "\n", "self", ".", "val_dataset", ".", "on_epoch_begin", "(", ")", "\n", "\n", "# validation iterations:", "\n", "i", "=", "0", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "# just to be sure!", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "data_tensor", ",", "label_tensor", "in", "self", ".", "val_generator", ":", "\n", "                ", "i", "+=", "1", "\n", "\n", "data_tensor", "=", "data_tensor", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "label_tensor_wt", "=", "self", ".", "binarize_labels", "(", "label_tensor", ".", "clone", "(", ")", ",", "'WT'", ")", ".", "long", "(", ")", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "label_tensor_tc", "=", "self", ".", "binarize_labels", "(", "label_tensor", ".", "clone", "(", ")", ",", "'TC'", ")", ".", "long", "(", ")", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "label_tensor_en", "=", "self", ".", "binarize_labels", "(", "label_tensor", ".", "clone", "(", ")", ",", "'EN'", ")", ".", "long", "(", ")", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "del", "label_tensor", "\n", "\n", "# predict", "\n", "(", "output_tensor_wt", ",", "\n", "output_tensor_tc", ",", "\n", "output_tensor_en", ")", "=", "self", ".", "model", "(", "data_tensor", ")", "\n", "\n", "loss", "=", "(", "self", ".", "loss_fn", "(", "output_tensor_wt", ",", "label_tensor_wt", ")", "+", "\n", "self", ".", "loss_fn", "(", "output_tensor_tc", ",", "label_tensor_tc", ")", "+", "\n", "self", ".", "loss_fn", "(", "output_tensor_en", ",", "label_tensor_en", ")", ")", "/", "3.", "\n", "\n", "dice_wt", "=", "self", ".", "metrics_obj", ".", "dice_score", "(", "torch", ".", "argmax", "(", "output_tensor_wt", ",", "dim", "=", "1", ")", ",", "label_tensor_wt", ")", "\n", "dice_tc", "=", "self", ".", "metrics_obj", ".", "dice_score", "(", "torch", ".", "argmax", "(", "output_tensor_tc", ",", "dim", "=", "1", ")", ",", "label_tensor_tc", ")", "\n", "dice_en", "=", "self", ".", "metrics_obj", ".", "dice_score", "(", "torch", ".", "argmax", "(", "output_tensor_en", ",", "dim", "=", "1", ")", ",", "label_tensor_en", ")", "\n", "\n", "metric_dict", "=", "{", "\n", "'loss'", ":", "loss", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "\n", "'dice_wt'", ":", "dice_wt", ".", "cpu", "(", ")", ",", "\n", "'dice_tc'", ":", "dice_tc", ".", "cpu", "(", ")", ",", "\n", "'dice_en'", ":", "dice_en", ".", "cpu", "(", ")", ",", "\n", "}", "\n", "\n", "for", "met", "in", "self", ".", "val_metrics", ":", "\n", "                    ", "self", ".", "val_metrics", "[", "met", "]", "+=", "metric_dict", "[", "met", "]", "\n", "\n", "# Print progress:", "\n", "", "show_progress", "(", "i", ",", "self", ".", "val_iterations", ",", "'Loss:%.4f'", "%", "(", "self", ".", "val_metrics", "[", "'loss'", "]", ".", "item", "(", ")", "/", "i", ")", ")", "\n", "\n", "", "", "per_epoch_dict", "=", "self", ".", "per_epoch_metrics", "(", "self", ".", "val_metrics", ",", "i", ",", "'val'", ")", "\n", "self", ".", "log_to_tensorboard", "(", "per_epoch_dict", ",", "epoch", ")", "\n", "self", ".", "delete_generator", "(", "'val'", ")", "\n", "return", "per_epoch_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.e1d3.train.TrainSession.binarize_labels": [[317, 331], ["tumor_mode.upper", "tumor_mode.upper", "tumor_mode.upper", "Exception"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "binarize_labels", "(", "volume", ",", "tumor_mode", ")", ":", "\n", "        ", "\"\"\"  Labels are converted for binary segmentation \"\"\"", "\n", "if", "tumor_mode", ".", "upper", "(", ")", "==", "'WT'", ":", "\n", "            ", "volume", "[", "volume", "!=", "0", "]", "=", "1", "\n", "", "elif", "tumor_mode", ".", "upper", "(", ")", "==", "'TC'", ":", "\n", "            ", "volume", "[", "volume", "==", "2", "]", "=", "0", "\n", "volume", "[", "volume", "!=", "0", "]", "=", "1", "\n", "", "elif", "tumor_mode", ".", "upper", "(", ")", "==", "'EN'", ":", "\n", "            ", "volume", "[", "volume", "!=", "4", "]", "=", "0", "\n", "volume", "[", "volume", "==", "4", "]", "=", "1", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "f\"Incorrect Tumor Mode provided: {tumor_mode}\"", ")", "\n", "", "return", "volume", "\n", "\n"]], "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.e1d3.train.TrainSession.per_epoch_metrics": [[332, 341], ["print", "metrics_dict[].item"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "per_epoch_metrics", "(", "metrics_dict", ",", "iterations", ",", "train_or_val", ")", ":", "\n", "        ", "\"\"\"displays and returns per_epoch mean of provided metrics\"\"\"", "\n", "per_epoch_dict", "=", "{", "}", "\n", "for", "key", "in", "metrics_dict", ":", "\n", "            ", "per_epoch_dict", "[", "key", "+", "'/'", "+", "train_or_val", "]", "=", "metrics_dict", "[", "key", "]", ".", "item", "(", ")", "/", "(", "1.", "*", "iterations", ")", "\n", "", "print_list", "=", "[", "'{}:{}'", ".", "format", "(", "key", ",", "'%.4f'", "%", "per_epoch_dict", "[", "key", "]", ")", "for", "key", "in", "per_epoch_dict", "]", "\n", "print", "(", "' | '", ".", "join", "(", "print_list", ")", ")", "\n", "return", "per_epoch_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.e1d3.train.TrainSession.save_model": [[342, 347], ["train.TrainSession.model_checkpoint_filepath.format", "torch.save", "print", "train.TrainSession.model.state_dict"], "methods", ["None"], ["", "def", "save_model", "(", "self", ",", "epoch", ",", "epoch_loss_val", ")", ":", "\n", "        ", "\"\"\"\"\"\"", "\n", "save_path", "=", "self", ".", "model_checkpoint_filepath", ".", "format", "(", "epoch", "=", "epoch", ",", "val_loss", "=", "epoch_loss_val", ")", "\n", "torch", ".", "save", "(", "self", ".", "model", ".", "state_dict", "(", ")", ",", "save_path", ")", "\n", "print", "(", "'> Model Saved: {}'", ".", "format", "(", "save_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.e1d3.train.TrainSession.log_to_tensorboard": [[348, 352], ["train.TrainSession.writer.add_scalar"], "methods", ["None"], ["", "def", "log_to_tensorboard", "(", "self", ",", "scalar_dict", ",", "epoch", ")", ":", "\n", "        ", "\"\"\"routine to log per-epoch metrics to tensorboard\"\"\"", "\n", "for", "key", "in", "scalar_dict", ":", "\n", "            ", "self", ".", "writer", ".", "add_scalar", "(", "key", ",", "scalar_dict", "[", "key", "]", ",", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.e1d3.test.TestSession.__init__": [[28, 56], ["print", "print", "print", "config_data.get", "config_net.get", "config_test.get", "config_test.get", "config_net.get", "config_net.get", "os.path.join", "utils.enc1_dec3.PrototypeArchitecture3d().cuda", "test.TestSession.load_model", "utils.inferenceloader.DatasetInference3d", "os.path.exists", "utils.parse_yaml.parse_yaml_config", "int", "float", "utils.enc1_dec3.PrototypeArchitecture3d"], "methods", ["home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.e1d3.test.TestSession.load_model", "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.parse_yaml.parse_yaml_config"], ["def", "__init__", "(", "self", ",", "config", "=", "None", ",", "config_file", "=", "None", ")", ":", "\n", "        ", "print", "(", "'--------------------------------'", ")", "\n", "print", "(", "'> Initializing Testing Session <'", ")", "\n", "print", "(", "'--------------------------------'", ")", "\n", "if", "config", "is", "None", ":", "\n", "            ", "assert", "config_file", "is", "not", "None", ",", "f\"`config_file` is needed if `config` not provided.\"", "\n", "assert", "os", ".", "path", ".", "exists", "(", "config_file", ")", ",", "f\"config file {config_file} not found.\"", "\n", "config", "=", "parse_yaml_config", "(", "config_file", ")", "\n", "\n", "", "config_data", "=", "config", "[", "'data'", "]", "\n", "self", ".", "num_classes", "=", "config_data", ".", "get", "(", "'num_classes'", ")", "\n", "\n", "config_net", "=", "config", "[", "'network'", "]", "\n", "self", ".", "label_shape", "=", "config_net", ".", "get", "(", "'label_shape'", ")", "\n", "\n", "config_test", "=", "config", "[", "'test'", "]", "\n", "self", ".", "tta", "=", "config_test", ".", "get", "(", "'test_time_aug'", ")", "\n", "self", ".", "save_segmentation", "=", "config_test", ".", "get", "(", "'save_segmentation'", ")", "\n", "\n", "model_load_directory", "=", "config_net", ".", "get", "(", "'model_load_directory'", ")", "\n", "model_load_config", "=", "config_net", ".", "get", "(", "'model_load_config'", ")", "\n", "model_checkpoint_str", "=", "'epoch_{epoch:02d}_val_loss_{val_loss:.2f}.pt'", ".", "format", "(", "\n", "epoch", "=", "int", "(", "model_load_config", "[", "1", "]", ")", ",", "val_loss", "=", "float", "(", "model_load_config", "[", "2", "]", ")", ")", "\n", "model_file", "=", "os", ".", "path", ".", "join", "(", "model_load_directory", ",", "model_load_config", "[", "0", "]", ",", "model_checkpoint_str", ")", "\n", "self", ".", "model", "=", "PrototypeArchitecture3d", "(", "config", "=", "config", ")", ".", "cuda", "(", ")", "\n", "self", ".", "load_model", "(", "model_file", ")", "\n", "\n", "self", ".", "inference_loader_obj", "=", "DatasetInference3d", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.e1d3.test.TestSession.inference_over_all_patients": [[57, 118], ["test.TestSession.inference_loader_obj.get_patients_list", "print", "datetime.datetime.now", "print", "print", "datetime.datetime.now", "print", "print", "print", "datetime.datetime.now", "print", "test.TestSession.inference_loader_obj.get_patient", "test.TestSession.inference_loop", "test.TestSession.label_fusion", "weight.astype", "print", "torch.cuda.memory_stats", "torch.cuda.memory_stats", "torch.cuda.memory_stats", "torch.cuda.memory_stats", "print", "torch.cuda.reset_peak_memory_stats", "torch.cuda.reset_peak_memory_stats", "torch.cuda.reset_peak_memory_stats", "torch.cuda.reset_peak_memory_stats", "datetime.datetime.now", "print", "print", "TestTimeAugmentation.flips.keys", "float", "print", "numpy.uint8", "numpy.uint8", "numpy.uint8", "numpy.unique", "print", "test.TestSession.inference_loader_obj.save_volume", "str", "print", "test.TestTimeAugmentation.flip_op", "test.TestSession.inference_loop", "test.TestTimeAugmentation.flip_op", "test.TestTimeAugmentation.flip_op", "test.TestTimeAugmentation.flip_op", "data.copy", "len", "numpy.argmax", "numpy.argmax", "numpy.argmax", "TestTimeAugmentation.flips.keys"], "methods", ["home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.inferenceloader.DatasetInference3d.get_patients_list", "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.inferenceloader.DatasetInference3d.get_patient", "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.e1d3.test.TestSession.inference_loop", "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.e1d3.test.TestSession.label_fusion", "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.inferenceloader.DatasetInference3d.save_volume", "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.e1d3.test.TestTimeAugmentation.flip_op", "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.e1d3.test.TestSession.inference_loop", "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.e1d3.test.TestTimeAugmentation.flip_op", "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.e1d3.test.TestTimeAugmentation.flip_op", "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.e1d3.test.TestTimeAugmentation.flip_op"], ["", "def", "inference_over_all_patients", "(", "self", ")", ":", "\n", "        ", "\"\"\"\"\"\"", "\n", "all_patients", "=", "self", ".", "inference_loader_obj", ".", "get_patients_list", "(", ")", "\n", "print", "(", "f\"Patients in Directory:\\n{str(all_patients)}\"", ")", "\n", "t0", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "# start time for session", "\n", "print", "(", "'\\n> Starting Clock: {}\\n'", ".", "format", "(", "t0", ")", ")", "\n", "\n", "for", "patient_id", "in", "all_patients", ":", "\n", "            ", "print", "(", "'\\n----------- Testing Patient: [{}] ------------\\n'", ".", "format", "(", "patient_id", ")", ")", "\n", "t0_p", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "# start time for patient", "\n", "print", "(", "'\\n> Starting Clock: {}\\n'", ".", "format", "(", "t0_p", ")", ")", "\n", "\n", "data", ",", "info", ",", "weight", "=", "self", ".", "inference_loader_obj", ".", "get_patient", "(", "patient_id", ")", "\n", "wt_prob_map", ",", "tc_prob_map", ",", "en_prob_map", "=", "self", ".", "inference_loop", "(", "data", ",", "weight", ")", "\n", "\n", "# test-time augmentation (optional):", "\n", "if", "self", ".", "tta", ":", "\n", "                ", "for", "key", "in", "TestTimeAugmentation", ".", "flips", ".", "keys", "(", ")", ":", "\n", "                    ", "print", "(", "'------- TTA dim:'", ",", "key", ",", "'-------'", ")", "\n", "data_tta", "=", "TestTimeAugmentation", ".", "flip_op", "(", "data", ".", "copy", "(", ")", ",", "choice", "=", "key", ")", "\n", "tta_out", "=", "self", ".", "inference_loop", "(", "data_tta", ",", "weight", ")", "\n", "\n", "wt_prob_map", "+=", "TestTimeAugmentation", ".", "flip_op", "(", "tta_out", "[", "0", "]", ",", "choice", "=", "key", ")", "\n", "tc_prob_map", "+=", "TestTimeAugmentation", ".", "flip_op", "(", "tta_out", "[", "1", "]", ",", "choice", "=", "key", ")", "\n", "en_prob_map", "+=", "TestTimeAugmentation", ".", "flip_op", "(", "tta_out", "[", "2", "]", ",", "choice", "=", "key", ")", "\n", "\n", "", "num_infs", "=", "float", "(", "len", "(", "TestTimeAugmentation", ".", "flips", ".", "keys", "(", ")", ")", "+", "1", ")", "\n", "\n", "wt_prob_map", "/=", "num_infs", "\n", "tc_prob_map", "/=", "num_infs", "\n", "en_prob_map", "/=", "num_infs", "\n", "\n", "", "if", "self", ".", "save_segmentation", ":", "\n", "                ", "print", "(", "f\"Saving Probability Map for patient: {patient_id}\"", ")", "\n", "\n", "", "(", "wt_segm_map", ",", "tc_segm_map", ",", "en_segm_map", ")", "=", "(", "np", ".", "uint8", "(", "np", ".", "argmax", "(", "wt_prob_map", ",", "axis", "=", "0", ")", "*", "weight", ")", ",", "\n", "np", ".", "uint8", "(", "np", ".", "argmax", "(", "tc_prob_map", ",", "axis", "=", "0", ")", "*", "weight", ")", ",", "\n", "np", ".", "uint8", "(", "np", ".", "argmax", "(", "en_prob_map", ",", "axis", "=", "0", ")", "*", "weight", ")", ")", "\n", "segm_map", "=", "self", ".", "label_fusion", "(", "wt_segm_map", ",", "tc_segm_map", ",", "en_segm_map", ")", "\n", "segm_map", "*=", "weight", ".", "astype", "(", "segm_map", ".", "dtype", ")", "\n", "print", "(", "'Segmentation Info'", ",", "'| Shape:'", ",", "segm_map", ".", "shape", ",", "\n", "'| Labels:'", ",", "np", ".", "unique", "(", "segm_map", ")", ",", "\n", "'| Data-type:'", ",", "segm_map", ".", "dtype", ")", "\n", "\n", "if", "self", ".", "save_segmentation", ":", "# save combined segmentation", "\n", "                ", "print", "(", "f\"Saving Segmentation Map for patient: {patient_id}\"", ")", "\n", "self", ".", "inference_loader_obj", ".", "save_volume", "(", "segm_map", ",", "info", "[", "0", "]", "[", "0", "]", ",", "patient_id", ",", "volume_type", "=", "'seg'", ")", "\n", "\n", "", "stats", "=", "torch", ".", "cuda", ".", "memory_stats", "(", ")", "\n", "peak_bytes_requirement", "=", "stats", "[", "\"allocated_bytes.all.peak\"", "]", "\n", "print", "(", "'Peak Memory Usage:'", ",", "peak_bytes_requirement", ",", "'(Bytes)'", ")", "\n", "torch", ".", "cuda", ".", "reset_peak_memory_stats", "(", ")", "\n", "\n", "tn_p", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "# end patient time", "\n", "print", "(", "'\\n> Ending Clock: {}\\n'", ".", "format", "(", "tn_p", ")", ")", "\n", "print", "(", "'--- Time Taken: {} ---\\n'", ".", "format", "(", "tn_p", "-", "t0_p", ")", ")", "\n", "\n", "", "print", "(", "'Testing Finished Successfully!'", ")", "\n", "tn", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "print", "(", "'\\n> Ending Clock: {}\\n'", ".", "format", "(", "tn", ")", ")", "\n", "print", "(", "'--- Total Testing Time: {} ---\\n'", ".", "format", "(", "tn", "-", "t0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.e1d3.test.TestSession.inference_loop": [[119, 196], ["test.TestSession.get_non_zero_bounding_box", "test.TestSession.extract_volume", "test.TestSession.extract_volume", "test.TestSession.inference_loader_obj.calculate_number_of_steps", "len", "test.TestSession.inference_loader_obj.generator_function", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.stack().cuda", "torch.stack().cuda", "torch.stack().cuda", "torch.stack().cuda", "torch.stack().cuda", "torch.stack().cuda", "torch.stack().cuda", "torch.stack().cuda", "torch.stack().cuda", "torch.stack().cuda", "torch.stack().cuda", "torch.stack().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "print", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "range", "torch.logical_and().all", "torch.logical_and().all", "torch.logical_and().all", "torch.logical_and().all", "torch.stack().cuda.cpu().numpy", "torch.stack().cuda.cpu().numpy", "torch.stack().cuda.cpu().numpy", "torch.stack().cuda.cpu().numpy", "torch.stack().cuda.cpu().numpy", "torch.stack().cuda.cpu().numpy", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "utils.session_logger.show_progress", "next", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "range", "range", "numpy.ix_", "numpy.ix_", "numpy.ix_", "pmap_x.isnan().any", "pmap_x.isinf().any", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "test.TestSession.model", "len", "torch.logical_and", "torch.logical_and", "torch.logical_and", "torch.logical_and", "torch.stack().cuda.cpu", "torch.stack().cuda.cpu", "torch.stack().cuda.cpu", "torch.stack().cuda.cpu", "torch.stack().cuda.cpu", "torch.stack().cuda.cpu", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "pmap_x.isnan", "pmap_x.isinf", "range", "numpy.ix_", "numpy.ix_", "numpy.ix_", "numpy.ix_", "numpy.ix_", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.ix_", "numpy.ix_", "numpy.ix_", "numpy.ix_", "numpy.ix_", "numpy.ix_"], "methods", ["home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.e1d3.test.TestSession.get_non_zero_bounding_box", "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.e1d3.test.TestSession.extract_volume", "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.e1d3.test.TestSession.extract_volume", "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.inferenceloader.DatasetInference3d.calculate_number_of_steps", "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.inferenceloader.DatasetInference3d.generator_function", "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.session_logger.show_progress"], ["", "def", "inference_loop", "(", "self", ",", "data", ",", "weight", ")", ":", "\n", "        ", "\"\"\"\"\"\"", "\n", "input_shape", "=", "data", ".", "shape", "# original input shape (before non-zero cropping)", "\n", "# read non-zero bounding box of data", "\n", "ind_limits_list", "=", "self", ".", "get_non_zero_bounding_box", "(", "data", ")", "\n", "# extract the non-zero bounding box from data, weight, and label.", "\n", "data", "=", "self", ".", "extract_volume", "(", "data", ",", "ind_limits_list", ")", "\n", "weight", "=", "self", ".", "extract_volume", "(", "weight", ",", "ind_limits_list", "[", "1", ":", "]", ")", "\n", "weight", "[", ":", "]", "=", "1", "\n", "\n", "self", ".", "inference_loader_obj", ".", "calculate_number_of_steps", "(", "weight", ")", "\n", "batches", "=", "len", "(", "self", ".", "inference_loader_obj", ")", "\n", "generator_function", "=", "self", ".", "inference_loader_obj", ".", "generator_function", "(", "data", ")", "\n", "\n", "# maps for extracted non-zero regions:", "\n", "wt_probability_map_", "=", "torch", ".", "zeros", "(", "self", ".", "num_classes", ",", "*", "data", ".", "shape", "[", "1", ":", "]", ")", ".", "cuda", "(", ")", "\n", "tc_probability_map_", "=", "torch", ".", "zeros", "(", "self", ".", "num_classes", ",", "*", "data", ".", "shape", "[", "1", ":", "]", ")", ".", "cuda", "(", ")", "\n", "en_probability_map_", "=", "torch", ".", "zeros", "(", "self", ".", "num_classes", ",", "*", "data", ".", "shape", "[", "1", ":", "]", ")", ".", "cuda", "(", ")", "\n", "weight_map_for_probabilities", "=", "torch", ".", "zeros_like", "(", "wt_probability_map_", ")", ".", "cuda", "(", ")", "\n", "\n", "# maps for actual input volume:", "\n", "wt_probability_map", "=", "torch", ".", "stack", "(", "(", "torch", ".", "ones", "(", "*", "input_shape", "[", "1", ":", "]", ")", ",", "torch", ".", "zeros", "(", "*", "input_shape", "[", "1", ":", "]", ")", ")", ",", "dim", "=", "0", ")", ".", "cuda", "(", ")", "\n", "tc_probability_map", "=", "torch", ".", "stack", "(", "(", "torch", ".", "ones", "(", "*", "input_shape", "[", "1", ":", "]", ")", ",", "torch", ".", "zeros", "(", "*", "input_shape", "[", "1", ":", "]", ")", ")", ",", "dim", "=", "0", ")", ".", "cuda", "(", ")", "\n", "en_probability_map", "=", "torch", ".", "stack", "(", "(", "torch", ".", "ones", "(", "*", "input_shape", "[", "1", ":", "]", ")", ",", "torch", ".", "zeros", "(", "*", "input_shape", "[", "1", ":", "]", ")", ")", ",", "dim", "=", "0", ")", ".", "cuda", "(", ")", "\n", "weight_map_update", "=", "torch", ".", "ones", "(", "self", ".", "num_classes", ",", "*", "self", ".", "label_shape", ")", ".", "cuda", "(", ")", "\n", "\n", "print", "(", "'Total Batches:'", ",", "batches", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "loop", "in", "range", "(", "batches", ")", ":", "\n", "                ", "show_progress", "(", "loop", "+", "1", ",", "batches", ")", "\n", "\n", "# batch extraction:", "\n", "(", "batch_data", ",", "\n", "batch_coords", ",", "\n", "batch_padding", ")", "=", "next", "(", "generator_function", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# prediction:", "\n", "                    ", "(", "output_tensor_wt", ",", "\n", "output_tensor_tc", ",", "\n", "output_tensor_en", ")", "=", "self", ".", "model", "(", "torch", ".", "from_numpy", "(", "batch_data", ")", ".", "cuda", "(", "non_blocking", "=", "True", ")", ")", "\n", "\n", "", "probabilities_wt", "=", "F", ".", "softmax", "(", "output_tensor_wt", ",", "dim", "=", "1", ")", "\n", "probabilities_tc", "=", "F", ".", "softmax", "(", "output_tensor_tc", ",", "dim", "=", "1", ")", "\n", "probabilities_en", "=", "F", ".", "softmax", "(", "output_tensor_en", ",", "dim", "=", "1", ")", "\n", "\n", "for", "subloop", "in", "range", "(", "len", "(", "batch_coords", ")", ")", ":", "\n", "                    ", "coordinates", "=", "batch_coords", "[", "subloop", "]", "\n", "undo_padding", "=", "batch_padding", "[", "subloop", "]", "\n", "\n", "prob_segment_wt", "=", "probabilities_wt", "[", "subloop", ",", "...", "]", "\n", "prob_segment_tc", "=", "probabilities_tc", "[", "subloop", ",", "...", "]", "\n", "prob_segment_en", "=", "probabilities_en", "[", "subloop", ",", "...", "]", "\n", "w_undo_padding", "=", "[", "range", "(", "0", ",", "self", ".", "num_classes", ")", "]", "+", "undo_padding", "[", "1", ":", "]", "\n", "\n", "wt_probability_map_", "[", "np", ".", "ix_", "(", "*", "coordinates", ")", "]", "+=", "prob_segment_wt", "[", "np", ".", "ix_", "(", "*", "undo_padding", ")", "]", "*", "weight_map_update", "[", "np", ".", "ix_", "(", "*", "w_undo_padding", ")", "]", "\n", "tc_probability_map_", "[", "np", ".", "ix_", "(", "*", "coordinates", ")", "]", "+=", "prob_segment_tc", "[", "np", ".", "ix_", "(", "*", "undo_padding", ")", "]", "*", "weight_map_update", "[", "np", ".", "ix_", "(", "*", "w_undo_padding", ")", "]", "\n", "en_probability_map_", "[", "np", ".", "ix_", "(", "*", "coordinates", ")", "]", "+=", "prob_segment_en", "[", "np", ".", "ix_", "(", "*", "undo_padding", ")", "]", "*", "weight_map_update", "[", "np", ".", "ix_", "(", "*", "w_undo_padding", ")", "]", "\n", "\n", "weight_map_for_probabilities", "[", "np", ".", "ix_", "(", "*", "coordinates", ")", "]", "+=", "weight_map_update", "[", "np", ".", "ix_", "(", "*", "w_undo_padding", ")", "]", "\n", "\n", "", "", "", "ind_limits_list", "=", "[", "range", "(", "0", ",", "self", ".", "num_classes", ")", "]", "+", "ind_limits_list", "[", "1", ":", "]", "\n", "\n", "wt_probability_map", "[", "np", ".", "ix_", "(", "*", "ind_limits_list", ")", "]", "=", "wt_probability_map_", "*", "1.", "/", "weight_map_for_probabilities", "\n", "tc_probability_map", "[", "np", ".", "ix_", "(", "*", "ind_limits_list", ")", "]", "=", "tc_probability_map_", "*", "1.", "/", "weight_map_for_probabilities", "\n", "en_probability_map", "[", "np", ".", "ix_", "(", "*", "ind_limits_list", ")", "]", "=", "en_probability_map_", "*", "1.", "/", "weight_map_for_probabilities", "\n", "\n", "# pmap checks:", "\n", "for", "pmap_x", "in", "[", "wt_probability_map", ",", "tc_probability_map", ",", "en_probability_map", "]", ":", "\n", "            ", "assert", "not", "pmap_x", ".", "isnan", "(", ")", ".", "any", "(", ")", ",", "\"[prob maps] check for NaN(s) failed\"", "\n", "assert", "not", "pmap_x", ".", "isinf", "(", ")", ".", "any", "(", ")", ",", "\"[prob maps] check for Inf(s) failed\"", "\n", "assert", "torch", ".", "logical_and", "(", "pmap_x", ">=", "0", ",", "pmap_x", "<=", "1", ")", ".", "all", "(", ")", ",", "\"[prob maps] not in range [0, 1]\"", "\n", "\n", "", "return", "wt_probability_map", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "tc_probability_map", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "en_probability_map", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.e1d3.test.TestSession.label_fusion": [[197, 227], ["scipy.ndimage.generate_binary_structure", "scipy.ndimage.morphology.binary_closing", "scipy.ndimage.morphology.binary_closing", "scipy.ndimage.morphology.binary_closing", "test.TestSession.get_largest_two_component", "scipy.ndimage.morphology.binary_closing", "test.TestSession.get_largest_two_component", "scipy.ndimage.morphology.binary_closing", "test.TestSession.remove_external_core", "numpy.asarray().sum", "segmentation_map.astype", "test.TestSession.copy", "numpy.zeros_like", "numpy.asarray"], "methods", ["home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.e1d3.test.TestSession.get_largest_two_component", "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.e1d3.test.TestSession.get_largest_two_component", "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.e1d3.test.TestSession.remove_external_core"], ["", "def", "label_fusion", "(", "self", ",", "wt_map", ",", "tc_map", ",", "en_map", ")", ":", "\n", "        ", "struct", "=", "ndimage", ".", "generate_binary_structure", "(", "3", ",", "2", ")", "\n", "\n", "wt_map", "=", "ndimage", ".", "morphology", ".", "binary_closing", "(", "wt_map", ",", "structure", "=", "struct", ")", "\n", "tc_map", "=", "ndimage", ".", "morphology", ".", "binary_closing", "(", "tc_map", ",", "structure", "=", "struct", ")", "\n", "en_map", "=", "ndimage", ".", "morphology", ".", "binary_closing", "(", "en_map", ",", "structure", "=", "struct", ")", "\n", "\n", "wt_map", "=", "self", ".", "get_largest_two_component", "(", "wt_map", ".", "copy", "(", ")", ",", "structure", "=", "struct", ",", "print_info", "=", "False", ",", "threshold", "=", "2000", ")", "\n", "wt_mask", "=", "(", "wt_map", "+", "tc_map", "+", "en_map", ")", ">", "0", "\n", "wt_mask", "=", "ndimage", ".", "morphology", ".", "binary_closing", "(", "wt_mask", ",", "structure", "=", "struct", ")", "\n", "wt_mask", "=", "self", ".", "get_largest_two_component", "(", "wt_mask", ",", "structure", "=", "struct", ",", "print_info", "=", "False", ",", "threshold", "=", "2000", ")", "\n", "wt_map", "=", "wt_map", "*", "wt_mask", "\n", "\n", "tc_en_mask", "=", "(", "tc_map", "+", "en_map", ")", ">", "0", "\n", "tc_en_mask", "=", "tc_en_mask", "*", "wt_mask", "\n", "tc_en_mask", "=", "ndimage", ".", "morphology", ".", "binary_closing", "(", "tc_en_mask", ",", "structure", "=", "struct", ")", "\n", "tc_en_mask", "=", "self", ".", "remove_external_core", "(", "wt_map", ",", "tc_en_mask", ",", "s", "=", "struct", ")", "\n", "wt_map", "=", "(", "wt_map", "+", "tc_en_mask", ")", ">", "0", "\n", "tc_map", "=", "tc_en_mask", "\n", "en_map", "=", "tc_map", "*", "en_map", "\n", "\n", "vox_3", "=", "np", ".", "asarray", "(", "en_map", ">", "0", ",", "np", ".", "float32", ")", ".", "sum", "(", ")", "\n", "if", "0", "<", "vox_3", "<", "30", ":", "\n", "            ", "en_map", "=", "np", ".", "zeros_like", "(", "tc_map", ")", "\n", "\n", "", "segmentation_map", "=", "wt_map", "*", "2", "\n", "segmentation_map", "[", "tc_map", ">", "0", "]", "=", "1", "\n", "segmentation_map", "[", "en_map", ">", "0", "]", "=", "4", "\n", "\n", "return", "segmentation_map", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.e1d3.test.TestSession.get_largest_two_component": [[228, 259], ["scipy.ndimage.label", "scipy.ndimage.sum", "sizes_list.sort", "range", "print", "len", "range", "numpy.zeros_like", "len", "numpy.where", "numpy.where", "numpy.where"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_largest_two_component", "(", "img", ",", "structure", ",", "print_info", "=", "False", ",", "threshold", "=", "None", ")", ":", "\n", "        ", "labeled_array", ",", "numpatches", "=", "ndimage", ".", "label", "(", "img", ",", "structure", ")", "# labeling", "\n", "sizes", "=", "ndimage", ".", "sum", "(", "img", ",", "labeled_array", ",", "range", "(", "1", ",", "numpatches", "+", "1", ")", ")", "\n", "sizes_list", "=", "[", "sizes", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "sizes", ")", ")", "]", "\n", "sizes_list", ".", "sort", "(", ")", "\n", "\n", "if", "print_info", ":", "\n", "            ", "print", "(", "'component size'", ",", "sizes_list", ")", "\n", "", "if", "len", "(", "sizes", ")", "==", "1", ":", "\n", "            ", "out_img", "=", "img", "\n", "", "else", ":", "\n", "            ", "if", "threshold", ":", "\n", "                ", "out_img", "=", "np", ".", "zeros_like", "(", "img", ")", "\n", "for", "temp_size", "in", "sizes_list", ":", "\n", "                    ", "if", "temp_size", ">", "threshold", ":", "\n", "                        ", "temp_lab", "=", "np", ".", "where", "(", "sizes", "==", "temp_size", ")", "[", "0", "]", "+", "1", "\n", "temp_cmp", "=", "labeled_array", "==", "temp_lab", "\n", "out_img", "=", "(", "out_img", "+", "temp_cmp", ")", ">", "0", "\n", "", "", "return", "out_img", "\n", "", "else", ":", "\n", "                ", "max_size1", "=", "sizes_list", "[", "-", "1", "]", "\n", "max_size2", "=", "sizes_list", "[", "-", "2", "]", "\n", "max_label1", "=", "np", ".", "where", "(", "sizes", "==", "max_size1", ")", "[", "0", "]", "+", "1", "\n", "max_label2", "=", "np", ".", "where", "(", "sizes", "==", "max_size2", ")", "[", "0", "]", "+", "1", "\n", "component1", "=", "labeled_array", "==", "max_label1", "\n", "component2", "=", "labeled_array", "==", "max_label2", "\n", "if", "max_size2", "*", "10", ">", "max_size1", ":", "\n", "                    ", "component1", "=", "(", "component1", "+", "component2", ")", ">", "0", "\n", "", "out_img", "=", "component1", "\n", "", "", "return", "out_img", "\n", "\n"]], "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.e1d3.test.TestSession.remove_external_core": [[260, 277], ["scipy.ndimage.label", "scipy.ndimage.sum", "numpy.zeros_like", "range", "range", "len", "range", "numpy.maximum", "len", "numpy.where", "overlap.sum"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "remove_external_core", "(", "lab_main", ",", "lab_ext", ",", "s", ")", ":", "\n", "        ", "\"\"\"\n        remove the core region that is outside of whole tumor\n        \"\"\"", "\n", "labeled_array", ",", "numpatches", "=", "ndimage", ".", "label", "(", "lab_ext", ",", "s", ")", "# labeling", "\n", "sizes", "=", "ndimage", ".", "sum", "(", "lab_ext", ",", "labeled_array", ",", "range", "(", "1", ",", "numpatches", "+", "1", ")", ")", "\n", "sizes_list", "=", "[", "sizes", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "sizes", ")", ")", "]", "\n", "new_lab_ext", "=", "np", ".", "zeros_like", "(", "lab_ext", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "sizes", ")", ")", ":", "\n", "            ", "sizei", "=", "sizes_list", "[", "i", "]", "\n", "labeli", "=", "np", ".", "where", "(", "sizes", "==", "sizei", ")", "[", "0", "]", "+", "1", "\n", "componenti", "=", "labeled_array", "==", "labeli", "\n", "overlap", "=", "componenti", "*", "lab_main", "\n", "if", "(", "overlap", ".", "sum", "(", ")", "+", "0.0", ")", "/", "sizei", ">=", "0.5", ":", "\n", "                ", "new_lab_ext", "=", "np", ".", "maximum", "(", "new_lab_ext", ",", "componenti", ")", "\n", "", "", "return", "new_lab_ext", "\n", "\n"]], "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.e1d3.test.TestSession.get_non_zero_bounding_box": [[278, 289], ["volume.nonzero", "numpy.zeros", "range", "len", "range", "len", "min", "range", "max"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_non_zero_bounding_box", "(", "volume", ")", ":", "\n", "        ", "\"\"\"\n        Return bounding box of non-zero region of input `volume`\n        \"\"\"", "\n", "ind_tuple", "=", "volume", ".", "nonzero", "(", ")", "\n", "ind_limits", "=", "np", ".", "zeros", "(", "(", "len", "(", "volume", ".", "shape", ")", ",", "2", ")", ",", "dtype", "=", "np", ".", "uint16", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "volume", ".", "shape", ")", ")", ":", "\n", "            ", "ind_limits", "[", "i", ",", "0", "]", ",", "ind_limits", "[", "i", ",", "1", "]", "=", "min", "(", "ind_tuple", "[", "i", "]", ")", ",", "max", "(", "ind_tuple", "[", "i", "]", ")", "+", "1", "\n", "", "ind_limits_list", "=", "[", "range", "(", "ind_limits", "[", "i", "]", "[", "0", "]", ",", "ind_limits", "[", "i", "]", "[", "1", "]", ")", "for", "i", "in", "range", "(", "ind_limits", ".", "shape", "[", "0", "]", ")", "]", "\n", "return", "ind_limits_list", "\n", "\n"]], "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.e1d3.test.TestSession.extract_volume": [[290, 296], ["numpy.ix_"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "extract_volume", "(", "volume", ",", "ind_limits_list", ")", ":", "\n", "        ", "\"\"\"\n        Returns a rectangular crop of the input `volume`\n        \"\"\"", "\n", "return", "volume", "[", "np", ".", "ix_", "(", "*", "ind_limits_list", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.e1d3.test.TestSession.load_model": [[297, 301], ["test.TestSession.model.load_state_dict", "print", "test.TestSession.model.eval", "torch.load", "torch.load", "torch.load", "torch.load"], "methods", ["None"], ["", "def", "load_model", "(", "self", ",", "path", ")", ":", "\n", "        ", "self", ".", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "path", ")", ")", "# providing a dictionary object", "\n", "print", "(", "'Loaded Model file:'", ",", "path", ")", "\n", "self", ".", "model", ".", "eval", "(", ")", "# setting dropout/batch-norm/etc layers to evaluation mode", "\n", "\n"]], "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.e1d3.test.TestTimeAugmentation.flip_op": [[314, 322], ["cls.flips.get", "numpy.flip", "cls.flips.keys", "numpy.random.randn"], "methods", ["None"], ["@", "classmethod", "\n", "def", "flip_op", "(", "cls", ",", "volume", ",", "choice", ",", "noise_variance", "=", "False", ")", ":", "\n", "        ", "assert", "choice", "in", "cls", ".", "flips", ".", "keys", "(", ")", "\n", "axis", "=", "cls", ".", "flips", ".", "get", "(", "choice", ")", "\n", "volume", "=", "np", ".", "flip", "(", "volume", ",", "axis", ")", "\n", "if", "noise_variance", ":", "\n", "            ", "volume", "+=", "np", ".", "random", ".", "randn", "(", "*", "volume", ".", "shape", ")", "*", "noise_variance", "\n", "", "return", "volume", "\n", "\n"]], "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.data_augment.DataAugmentation.__init__": [[10, 78], ["print", "torchio.transforms.Compose", "torchio.transforms.RandomFlip", "torchio.transforms.RandomAffine", "torchio.transforms.RandomElasticDeformation", "torchio.transforms.Lambda", "torchio.transforms.OneOf", "aug_fns_list.append", "len", "i.lower", "print", "aug_fns_list.append", "aug_fns_list.append", "Exception"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "aug_list", "=", "None", ")", ":", "\n", "        ", "p", "=", "0.5", "# probability that a certain transform is applied", "\n", "flip_prob", "=", "0.5", "# probability", "\n", "scaling", "=", "0.1", "# percentage", "\n", "rot", "=", "10", "# degrees", "\n", "shift", "=", "0.5", "# mm", "\n", "el_ctrl_pts", "=", "5", "\n", "el_max_disp", "=", "4.5", "\n", "self", ".", "gamma_range", "=", "(", "0.8", ",", "1.2", ")", "\n", "\n", "aug_fns", "=", "{", "\n", "'flip'", ":", "torchio", ".", "transforms", ".", "RandomFlip", "(", "\n", "axes", "=", "(", "0", ",", "1", ",", "2", ")", ",", "\n", "flip_probability", "=", "flip_prob", ",", "\n", "p", "=", "p", ",", "\n", ")", ",", "\n", "'affine'", ":", "torchio", ".", "transforms", ".", "RandomAffine", "(", "\n", "scales", "=", "(", "1.", "-", "scaling", ",", "1.", "+", "scaling", ",", "1.", "-", "scaling", ",", "1.", "+", "scaling", ",", "1.", "-", "scaling", ",", "1.", "+", "scaling", ")", ",", "\n", "degrees", "=", "(", "-", "rot", ",", "+", "rot", ",", "-", "rot", ",", "+", "rot", ",", "-", "rot", ",", "+", "rot", ")", ",", "\n", "translation", "=", "(", "-", "shift", ",", "+", "shift", ",", "-", "shift", ",", "+", "shift", ",", "-", "shift", ",", "+", "shift", ")", ",", "\n", "isotropic", "=", "False", ",", "\n", "center", "=", "'image'", ",", "\n", "default_pad_value", "=", "0.", ",", "\n", "image_interpolation", "=", "'bspline'", ",", "\n", "p", "=", "p", ",", "\n", ")", ",", "\n", "'elastic'", ":", "torchio", ".", "transforms", ".", "RandomElasticDeformation", "(", "\n", "num_control_points", "=", "el_ctrl_pts", ",", "\n", "max_displacement", "=", "el_max_disp", ",", "\n", "locked_borders", "=", "2", ",", "\n", "image_interpolation", "=", "'bspline'", ",", "\n", "p", "=", "p", ",", "\n", ")", ",", "\n", "'gamma'", ":", "torchio", ".", "transforms", ".", "Lambda", "(", "\n", "function", "=", "self", ".", "gamma_correction", ",", "\n", "types_to_apply", "=", "[", "torchio", ".", "INTENSITY", "]", ",", "\n", "p", "=", "p", ",", "\n", ")", ",", "\n", "}", "\n", "\n", "if", "aug_list", "is", "None", ":", "\n", "            ", "aug_list", "=", "[", "i", "for", "i", "in", "aug_fns", "]", "\n", "", "else", ":", "\n", "            ", "assert", "len", "(", "aug_list", ")", "!=", "0", ",", "\"Empty list of augmentations provided\"", "\n", "aug_list", "=", "[", "i", ".", "lower", "(", ")", "for", "i", "in", "aug_list", "]", "\n", "", "print", "(", "'Using Augmentations:'", ",", "*", "aug_list", ")", "\n", "\n", "aug_fns_list", "=", "[", "aug_fns", "[", "i", "]", "for", "i", "in", "aug_list", "if", "i", "not", "in", "[", "'gamma'", ",", "'noise'", "]", "]", "\n", "# do either noise or gamma, but never both:", "\n", "if", "(", "'gamma'", "in", "aug_list", ")", "and", "(", "'noise'", "in", "aug_list", ")", ":", "\n", "            ", "one_of", "=", "torchio", ".", "transforms", ".", "OneOf", "(", "{", "\n", "aug_fns", "[", "'gamma'", "]", ":", "0.5", ",", "\n", "aug_fns", "[", "'noise'", "]", ":", "0.5", ",", "\n", "}", ")", "\n", "aug_fns_list", ".", "append", "(", "one_of", ")", "\n", "\n", "", "elif", "(", "'gamma'", "in", "aug_list", ")", "or", "(", "'noise'", "in", "aug_list", ")", ":", "\n", "            ", "if", "'gamma'", "in", "aug_list", ":", "\n", "                ", "aug_fns_list", ".", "append", "(", "aug_fns", "[", "'gamma'", "]", ")", "\n", "", "elif", "'noise'", "in", "aug_list", ":", "\n", "                ", "aug_fns_list", ".", "append", "(", "aug_fns", "[", "'noise'", "]", ")", "\n", "", "else", ":", "\n", "                ", "raise", "Exception", "(", "'Something is not right!'", ")", "\n", "", "", "else", ":", "\n", "            ", "print", "(", "'Neither `gamma` nor `noise` used in augmentation'", ")", "\n", "\n", "", "self", ".", "composed_fns", "=", "torchio", ".", "transforms", ".", "Compose", "(", "aug_fns_list", ")", "\n", "del", "aug_fns", "\n", "\n"]], "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.data_augment.DataAugmentation.__call__": [[79, 86], ["torchio.Subject", "data_augment.DataAugmentation.composed_fns", "torchio.ScalarImage", "torchio.LabelMap"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "data", ",", "label", ")", ":", "\n", "        ", "input_dict", "=", "torchio", ".", "Subject", "(", "\n", "data", "=", "torchio", ".", "ScalarImage", "(", "tensor", "=", "data", ")", ",", "\n", "label", "=", "torchio", ".", "LabelMap", "(", "tensor", "=", "label", ")", ",", "\n", ")", "\n", "output_dict", "=", "self", ".", "composed_fns", "(", "input_dict", ")", "\n", "return", "output_dict", "[", "'data'", "]", ".", "data", ",", "output_dict", "[", "'label'", "]", ".", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.data_augment.DataAugmentation.get_transform": [[87, 89], ["None"], "methods", ["None"], ["", "def", "get_transform", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "composed_fns", "\n", "\n"]], "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.data_augment.DataAugmentation.gamma_correction": [[90, 95], ["numpy.random.uniform", "tensor.min", "tensor.max", "tensor.min", "tensor.min"], "methods", ["None"], ["", "def", "gamma_correction", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "\"\"\" gamma correction code, as implemented in No New Net (Isensee et al.) \"\"\"", "\n", "gamma", "=", "np", ".", "random", ".", "uniform", "(", "*", "self", ".", "gamma_range", ")", "\n", "intensity_range", "=", "(", "tensor", ".", "max", "(", ")", "-", "tensor", ".", "min", "(", ")", ")", ".", "abs", "(", ")", "\n", "return", "(", "(", "(", "tensor", "-", "tensor", ".", "min", "(", ")", ")", "/", "(", "intensity_range", "+", "1e-7", ")", ")", "**", "gamma", ")", "*", "intensity_range", "+", "tensor", ".", "min", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.data_io.DataIO.__init__": [[11, 36], ["switch_dict_dataset.get", "os.path.isdir", "config_data.get", "config_data.get", "config_data.get", "Exception", "config_data.get", "config_data.get", "config_data.get", "config_data.get", "config_network.get"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "config", ",", "train_validate_test", ")", ":", "\n", "        ", "\"\"\"\n        config is a dictionary obtained by parsing a configuration file.\n        Args:\n            config: 'dictionary' containing configuration parameters parsed\n                    from a configuration file.\n            train_validate_test: 'string', one of 'train', 'validate' and 'test'.\n        \"\"\"", "\n", "config_data", "=", "config", "[", "'data'", "]", "\n", "config_network", "=", "config", "[", "'network'", "]", "\n", "if", "train_validate_test", "not", "in", "[", "'train'", ",", "'validate'", ",", "'test'", "]", ":", "\n", "            ", "raise", "Exception", "(", "'Incorrect DataIO mode selected:{}'", ".", "format", "(", "train_validate_test", ")", ")", "\n", "", "switch_dict_dataset", "=", "{", "\n", "'train'", ":", "config_data", ".", "get", "(", "'data_directory_train'", ")", ",", "\n", "'validate'", ":", "config_data", ".", "get", "(", "'data_directory_validate'", ")", ",", "\n", "'test'", ":", "config_data", ".", "get", "(", "'data_directory_test'", ")", "\n", "}", "\n", "self", ".", "data_directory", "=", "switch_dict_dataset", ".", "get", "(", "train_validate_test", ",", "None", ")", "\n", "assert", "(", "os", ".", "path", ".", "isdir", "(", "self", ".", "data_directory", ")", ")", "\n", "self", ".", "channels", "=", "config_data", ".", "get", "(", "'channels'", ")", "\n", "self", ".", "weight_mask_channel", "=", "config_data", ".", "get", "(", "'weight_mask_channel'", ",", "'flair_mask'", ")", "\n", "self", ".", "seg_file_suffix", "=", "config_data", ".", "get", "(", "'seg_file_suffix'", ")", "\n", "if", "train_validate_test", "==", "'test'", ":", "# for testing routine only", "\n", "            ", "self", ".", "save_directory", "=", "config_data", ".", "get", "(", "'save_directory_test'", ",", "None", ")", "\n", "self", ".", "model_run_time", "=", "config_network", ".", "get", "(", "'model_load_config'", ",", "None", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.data_io.DataIO.patients_list": [[37, 46], ["os.listdir", "sorted", "os.path.isdir", "os.path.join"], "methods", ["None"], ["", "", "def", "patients_list", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Helper for geting list of patients/folders in 'data_directory' folder.\n        Returns:\n            'list' containing names of patients.\n        \"\"\"", "\n", "patients_list", "=", "os", ".", "listdir", "(", "self", ".", "data_directory", ")", "\n", "patients_list", "=", "[", "name", "for", "name", "in", "patients_list", "if", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_directory", ",", "name", ")", ")", "]", "\n", "return", "sorted", "(", "patients_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.data_io.DataIO.load_patient": [[47, 65], ["numpy.stack", "data_io.DataIO.load_volume", "data_io.DataIO.load_volume", "data_io.DataIO.load_volume", "numpy.stack.append", "numpy.uint8"], "methods", ["home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.data_io.DataIO.load_volume", "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.data_io.DataIO.load_volume", "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.data_io.DataIO.load_volume"], ["", "def", "load_patient", "(", "self", ",", "patient_id", ")", ":", "\n", "        ", "\"\"\"\n        Loads all volumes (data, label, weight) of one patient.\n        Primary use of this routine is in training/validation.\n        Args:\n            patient_id: Patient Name.\n        Returns:\n            'np.array' of data volumes (all modes), 'np.array' of weight volume,\n            'np.array' of label volume.\n        \"\"\"", "\n", "data", "=", "[", "]", "\n", "for", "mode", "in", "self", ".", "channels", ":", "\n", "            ", "volume", "=", "self", ".", "load_volume", "(", "patient_id", ",", "mode", ",", "with_info", "=", "False", ")", "# Load Modality", "\n", "data", ".", "append", "(", "volume", ")", "\n", "", "data", "=", "np", ".", "stack", "(", "data", ",", "axis", "=", "0", ")", "# One 4D volume (Channels, D, H, W)", "\n", "weight", "=", "self", ".", "load_volume", "(", "patient_id", ",", "self", ".", "weight_mask_channel", ")", "\n", "label", "=", "self", ".", "load_volume", "(", "patient_id", ",", "self", ".", "seg_file_suffix", ")", "# Load Label", "\n", "return", "data", ",", "weight", ",", "np", ".", "uint8", "(", "label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.data_io.DataIO.load_patient_npy": [[66, 81], ["os.path.join", "numpy.load", "numpy.load", "numpy.load", "os.path.join.format", "os.path.join.format", "os.path.join.format"], "methods", ["None"], ["", "def", "load_patient_npy", "(", "self", ",", "patient_id", ")", ":", "\n", "        ", "\"\"\"\n        Loads all volumes (data, label, weight) of one patient.\n        Primary use of this routine is in training/validation.\n        Args:\n            patient_id: Patient Name.\n        Returns:\n            'np.array' of data volumes (all modes), 'np.array' of weight volume,\n            'np.array' of label volume.\n        \"\"\"", "\n", "patient_filepath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_directory", ",", "patient_id", ",", "patient_id", "+", "'_{}.npy'", ")", "\n", "data", "=", "np", ".", "load", "(", "patient_filepath", ".", "format", "(", "'data'", ")", ",", "mmap_mode", "=", "'r'", ")", "\n", "weight", "=", "np", ".", "load", "(", "patient_filepath", ".", "format", "(", "'weight'", ")", ",", "mmap_mode", "=", "'r'", ")", "\n", "label", "=", "np", ".", "load", "(", "patient_filepath", ".", "format", "(", "'label'", ")", ",", "mmap_mode", "=", "'r'", ")", "\n", "return", "data", ",", "weight", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.data_io.DataIO.load_patient_with_info": [[82, 107], ["numpy.stack", "data_io.DataIO.load_volume", "data_io.DataIO.load_volume", "data_io.DataIO.load_volume", "numpy.stack.append", "affines.append", "headers.append", "numpy.uint16"], "methods", ["home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.data_io.DataIO.load_volume", "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.data_io.DataIO.load_volume", "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.data_io.DataIO.load_volume"], ["", "def", "load_patient_with_info", "(", "self", ",", "patient_id", ",", "with_label", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Loads all volumes (data, label, weight) of one patient.\n        (Same as 'load_patient()', plus returns 'affine' and 'header').\n        Primary use of this routine is in testing.\n        Args:\n            patient_id: Patient Name.\n            with_label: flag for returning label volume, default:'False'.\n        Returns:\n            'np.array' of data volume (all modes), 'np.array' of weight volume,\n            'list' of '[affines, headers]' of each data volume,\n            'np.array' of label volume (optional)\n        \"\"\"", "\n", "data", ",", "affines", ",", "headers", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "mode", "in", "self", ".", "channels", ":", "\n", "            ", "volume", ",", "affine", ",", "header", "=", "self", ".", "load_volume", "(", "patient_id", ",", "mode", ",", "with_info", "=", "True", ")", "# Load Modality", "\n", "data", ".", "append", "(", "volume", ")", "\n", "affines", ".", "append", "(", "affine", ")", "\n", "headers", ".", "append", "(", "header", ")", "\n", "", "data", "=", "np", ".", "stack", "(", "data", ",", "axis", "=", "0", ")", "# One 4D volume (Channels, D, H, W)", "\n", "weight", "=", "self", ".", "load_volume", "(", "patient_id", ",", "self", ".", "weight_mask_channel", ")", "\n", "if", "not", "with_label", ":", "\n", "            ", "return", "data", ",", "weight", ",", "[", "affines", ",", "headers", "]", "\n", "", "label", "=", "self", ".", "load_volume", "(", "patient_id", ",", "self", ".", "seg_file_suffix", ")", "# Load Label", "\n", "return", "data", ",", "weight", ",", "[", "affines", ",", "headers", "]", ",", "np", ".", "uint16", "(", "label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.data_io.DataIO.load_volume": [[108, 130], ["os.path.join", "nibabel.load", "nibabel.load.get_data().astype", "nibabel.load.uncache", "nibabel.load.get_data"], "methods", ["None"], ["", "def", "load_volume", "(", "self", ",", "patient", ",", "mode", ",", "with_info", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Loads single '.nii.gz' volume (data/label/...) of one patient.\n        e.g. file_name = 'Brats18_2013_3_1\\\\Brats18_2013_3_1_flair.nii.gz'\n        *NOTE*: loading weight maps is not considered yet.\n        Args:\n            patient: Patient name.\n            mode: Suffix for patient volume file name.\n            with_info: flag for returning 'affine' and 'header' of volume (default:'False')\n        Returns:\n            'np.array' of image volume, 'np.array' of image affine (optional),\n            format-specific image header object\n        \"\"\"", "\n", "file_name", "=", "'{0}_{1}.nii.gz'", ".", "format", "(", "patient", ",", "mode", ")", "# hardcoded format, file name should follow", "\n", "file_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_directory", ",", "patient", ",", "file_name", ")", "\n", "image", "=", "nib", ".", "load", "(", "file_path", ")", "\n", "image_array", "=", "image", ".", "get_data", "(", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "image", ".", "uncache", "(", ")", "# release cache memory", "\n", "if", "with_info", ":", "\n", "            ", "return", "image_array", ",", "image", ".", "affine", ",", "image", ".", "header", "\n", "", "else", ":", "\n", "            ", "return", "image_array", "\n", "\n"]], "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.data_io.DataIO.save_volume": [[131, 152], ["os.path.join", "os.path.join", "nibabel.save", "volume_type.lower", "os.path.exists", "print", "os.makedirs", "volume_type.lower", "nibabel.Nifti1Image"], "methods", ["None"], ["", "", "def", "save_volume", "(", "self", ",", "volume", ",", "affine", ",", "patient", ",", "volume_type", ")", ":", "\n", "        ", "\"\"\"\n        Saves volume at specified directory, with 'affine' provided.\n        Directory is created if it does not exist.\n        Args:\n            volume: Volume to save.\n            affine: Image affine matrix.\n            patient: Patient name.\n            volume_type: one of 'seg' (segmentation map) and 'prob' (probability map).\n        Returns:\n            'None'.\n        \"\"\"", "\n", "assert", "volume_type", ".", "lower", "(", ")", "in", "[", "'seg'", ",", "'prob'", "]", "\n", "# create save directory folder if it does not exist", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_directory", ",", "self", ".", "model_run_time", ",", "patient", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_path", ")", ":", "\n", "            ", "print", "(", "f\"Path {save_path} does not exist. Creating...\"", ")", "\n", "os", ".", "makedirs", "(", "save_path", ")", "\n", "", "file_name", "=", "'{0}_{1}.nii.gz'", ".", "format", "(", "patient", ",", "volume_type", ".", "lower", "(", ")", ")", "\n", "file_path", "=", "os", ".", "path", ".", "join", "(", "save_path", ",", "file_name", ")", "\n", "nib", ".", "save", "(", "nib", ".", "Nifti1Image", "(", "volume", ",", "affine", ")", ",", "file_path", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.metrics.MetricsPt.__init__": [[6, 9], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Training/Validation Metrics\"\"\"", "\n", "self", ".", "_EPS", "=", "1e-7", "\n", "\n"]], "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.metrics.MetricsPt.accuracy": [[10, 16], ["torch.sum().float", "y_true.nelement", "torch.sum"], "methods", ["None"], ["", "def", "accuracy", "(", "self", ",", "y_pred", ",", "y_true", ")", ":", "\n", "        ", "\"\"\"\n        y_pred: (B, H, W, D)    # from argmax\n        y_true: (B, H, W, D)    # no channel dimension\n        \"\"\"", "\n", "return", "torch", ".", "sum", "(", "y_pred", "==", "y_true", ")", ".", "float", "(", ")", "/", "(", "1.", "*", "y_true", ".", "nelement", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.metrics.MetricsPt.dice_score": [[17, 24], ["torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "dice_score", "(", "self", ",", "y_pred_bin", ",", "y_true_bin", ")", ":", "\n", "        ", "\"\"\"\n        y_pred_bin: (B, H, W, D)    # binary volume\n        y_true_bin: (B, H, W, D)    # binary volume\n        \"\"\"", "\n", "return", "(", "2.0", "*", "torch", ".", "sum", "(", "y_true_bin", "*", "y_pred_bin", ")", "+", "self", ".", "_EPS", ")", "/", "(", "torch", ".", "sum", "(", "y_true_bin", ")", "+", "torch", ".", "sum", "(", "y_pred_bin", ")", "+", "self", ".", "_EPS", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.metrics.MetricsPt.get_dice_per_region": [[25, 43], ["torch.gt().float", "torch.gt().float", "metrics.MetricsPt.dice_score", "metrics.MetricsPt.dice_score", "torch.eq().float", "torch.eq().float", "metrics.MetricsPt.dice_score", "torch.gt", "torch.gt", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq"], "methods", ["home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.metrics.MetricsPt.dice_score", "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.metrics.MetricsPt.dice_score", "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.metrics.MetricsPt.dice_score"], ["", "def", "get_dice_per_region", "(", "self", ",", "y_pred", ",", "y_true", ")", ":", "\n", "        ", "\"\"\"\n        y_pred: (B, H, W, D)    # from argmax\n        y_true: (B, H, W, D)    # no channel dimension\n        \"\"\"", "\n", "y_pred_wt", "=", "torch", ".", "gt", "(", "y_pred", ",", "0", ")", ".", "float", "(", ")", "\n", "y_true_wt", "=", "torch", ".", "gt", "(", "y_true", ",", "0", ")", ".", "float", "(", ")", "\n", "dice_wt", "=", "self", ".", "dice_score", "(", "y_pred_wt", ",", "y_true_wt", ")", "\n", "\n", "y_pred_tc", "=", "(", "torch", ".", "eq", "(", "y_pred", ",", "1", ")", "|", "torch", ".", "eq", "(", "y_pred", ",", "3", ")", ")", ".", "float", "(", ")", "\n", "y_true_tc", "=", "(", "torch", ".", "eq", "(", "y_true", ",", "1", ")", "|", "torch", ".", "eq", "(", "y_true", ",", "3", ")", ")", ".", "float", "(", ")", "\n", "dice_tc", "=", "self", ".", "dice_score", "(", "y_pred_tc", ",", "y_true_tc", ")", "\n", "\n", "y_pred_en", "=", "torch", ".", "eq", "(", "y_pred", ",", "3", ")", ".", "float", "(", ")", "\n", "y_true_en", "=", "torch", ".", "eq", "(", "y_true", ",", "3", ")", ".", "float", "(", ")", "\n", "dice_en", "=", "self", ".", "dice_score", "(", "y_pred_en", ",", "y_true_en", ")", "\n", "\n", "return", "dice_wt", ",", "dice_tc", ",", "dice_en", "\n", "\n"]], "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.metrics.MetricsNp.__init__": [[46, 49], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Test Time Metrics\"\"\"", "\n", "self", ".", "_EPSILON", "=", "1e-7", "\n", "\n"]], "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.metrics.MetricsNp.__call__": [[50, 53], ["metrics.MetricsNp.get_dice_per_region"], "methods", ["home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.metrics.MetricsNp.get_dice_per_region"], ["", "def", "__call__", "(", "self", ",", "data", ",", "label", ")", ":", "\n", "        ", "\"\"\"\"\"\"", "\n", "return", "self", ".", "get_dice_per_region", "(", "data", ",", "label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.metrics.MetricsNp.dice_score_binary_np": [[54, 69], ["numpy.sum", "numpy.sum", "numpy.isnan().any", "numpy.isinf().any", "numpy.isnan", "numpy.isinf"], "methods", ["None"], ["", "def", "dice_score_binary_np", "(", "self", ",", "data", ",", "label", ")", ":", "\n", "        ", "\"\"\"\n        f1-score <or> dice score: 2TP / (2TP + FP + FN)\n        Args:\n            label: 'np.array' binary volume.\n            data: 'np.array' binary volume.\n        Returns:\n            dice_score (scalar)\n        \"\"\"", "\n", "numerator", "=", "2", "*", "np", ".", "sum", "(", "label", "*", "data", ")", "\n", "denominator", "=", "np", ".", "sum", "(", "label", "+", "data", ")", "\n", "score", "=", "(", "numerator", "+", "self", ".", "_EPSILON", ")", "/", "(", "denominator", "+", "self", ".", "_EPSILON", ")", "\n", "if", "np", ".", "isnan", "(", "score", ")", ".", "any", "(", ")", "or", "np", ".", "isinf", "(", "score", ")", ".", "any", "(", ")", ":", "\n", "            ", "return", "'NA'", "\n", "", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.metrics.MetricsNp.get_dice_per_region": [[70, 97], ["print", "numpy.unique", "len", "print", "print", "numpy.float32", "numpy.float32", "metrics.MetricsNp.dice_score_binary_np", "numpy.float32", "numpy.float32", "metrics.MetricsNp.dice_score_binary_np", "numpy.float32", "numpy.float32", "metrics.MetricsNp.dice_score_binary_np"], "methods", ["home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.metrics.MetricsNp.dice_score_binary_np", "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.metrics.MetricsNp.dice_score_binary_np", "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.metrics.MetricsNp.dice_score_binary_np"], ["", "def", "get_dice_per_region", "(", "self", ",", "data", ",", "label", ")", ":", "# data = Prediction, label = Ground Truth", "\n", "        ", "\"\"\"\n        Provides region-wise Dice scores of a multi-class prediction simultaneously\n        \"\"\"", "\n", "assert", "data", ".", "shape", "==", "label", ".", "shape", "# Shape check", "\n", "print", "(", "'> Calculating Metrics ...'", ")", "\n", "unique_labels", "=", "np", ".", "unique", "(", "label", ")", "\n", "num_classes", "=", "len", "(", "unique_labels", ")", "\n", "print", "(", "'Total Classes:\\t'", ",", "num_classes", ")", "\n", "print", "(", "'Class Labels:\\t'", ",", "unique_labels", ")", "\n", "\n", "# Whole Tumor:", "\n", "wt_data", "=", "np", ".", "float32", "(", "data", ">", "0", ")", "\n", "wt_label", "=", "np", ".", "float32", "(", "label", ">", "0", ")", "\n", "wt_score", "=", "self", ".", "dice_score_binary_np", "(", "wt_data", ",", "wt_label", ")", "\n", "\n", "# Tumor Core:", "\n", "tc_data", "=", "np", ".", "float32", "(", "(", "data", "==", "1", ")", "|", "(", "data", "==", "4", ")", ")", "\n", "tc_label", "=", "np", ".", "float32", "(", "(", "label", "==", "1", ")", "|", "(", "label", "==", "4", ")", ")", "\n", "tc_score", "=", "self", ".", "dice_score_binary_np", "(", "tc_data", ",", "tc_label", ")", "\n", "\n", "# Enhancing Core:", "\n", "en_data", "=", "np", ".", "float32", "(", "data", "==", "4", ")", "\n", "en_label", "=", "np", ".", "float32", "(", "label", "==", "4", ")", "\n", "en_score", "=", "self", ".", "dice_score_binary_np", "(", "en_data", ",", "en_label", ")", "\n", "\n", "return", "wt_score", ",", "tc_score", ",", "en_score", "\n", "\n"]], "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.session_logger.show_progress": [[5, 27], ["int", "sys.stdout.write", "sys.stdout.flush", "Exception", "round"], "function", ["None"], ["def", "show_progress", "(", "batch_number", ",", "total_batches", ",", "metrics_string", "=", "''", ")", ":", "\n", "    ", "\"\"\"\n        Displays progress of a training/testing loop.\n        Args:\n            batch_number: 'int', current iteration.\n            total_batches: 'int', total iterations.\n            metrics_string: 'str', anything else to print (usually a metric).\n        Reference: https://stackoverflow.com/a/15860757/6597334\n        \"\"\"", "\n", "bar_length", "=", "40", "# modify to change the length of the progress bar", "\n", "status", "=", "\"\"", "\n", "if", "batch_number", ">", "total_batches", ":", "\n", "        ", "raise", "Exception", "(", "'Batch Number exceeds Total Batches'", ")", "\n", "", "elif", "batch_number", "==", "total_batches", ":", "\n", "        ", "status", "=", "\"Done...\\r\\n\"", "\n", "", "progress", "=", "batch_number", "*", "1.0", "/", "total_batches", "\n", "block", "=", "int", "(", "round", "(", "bar_length", "*", "progress", ")", ")", "\n", "text", "=", "\"\\rBatch:{2}/{3}: [{0}] {1}%  {4}  {5}\"", ".", "format", "(", "\n", "\"#\"", "*", "block", "+", "\"-\"", "*", "(", "bar_length", "-", "block", ")", ",", "'%3d'", "%", "(", "progress", "*", "100", ")", ",", "\n", "batch_number", ",", "total_batches", ",", "metrics_string", ",", "status", ")", "\n", "sys", ".", "stdout", ".", "write", "(", "text", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.session_logger.log_configuration": [[29, 39], ["os.path.isdir", "os.mkdir", "open", "txtfile_read.read", "open", "txtfile_write.write", "os.path.join", "os.path.split"], "function", ["None"], ["", "def", "log_configuration", "(", "save_location", ",", "config_file", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "isdir", "(", "save_location", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "save_location", ")", "\n", "\n", "", "with", "open", "(", "config_file", ",", "'r'", ")", "as", "txtfile_read", ":", "\n", "        ", "data", "=", "txtfile_read", ".", "read", "(", ")", "\n", "# print(data)     # print configurations on screen", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "save_location", ",", "os", ".", "path", ".", "split", "(", "config_file", ")", "[", "-", "1", "]", ")", ",", "\n", "'w'", ")", "as", "txtfile_write", ":", "\n", "            ", "txtfile_write", ".", "write", "(", "data", ")", "# write configurations to .txt file", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.inferenceloader.DatasetInference3d.__init__": [[17, 33], ["config_data.get", "config_data.get", "DataIO", "inferenceloader.DatasetInference3d.data_io_obj.patients_list", "len", "config_net.get", "config_net.get", "config_test.get", "config_test.get"], "methods", ["home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.data_io.DataIO.patients_list"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "config_data", "=", "config", "[", "'data'", "]", "\n", "self", ".", "num_classes", "=", "config_data", ".", "get", "(", "'num_classes'", ")", "\n", "self", ".", "channels", "=", "config_data", ".", "get", "(", "'channels'", ",", "None", ")", "\n", "self", ".", "data_io_obj", "=", "DataIO", "(", "config", ",", "'test'", ")", "\n", "self", ".", "patients_list", "=", "self", ".", "data_io_obj", ".", "patients_list", "(", ")", "\n", "self", ".", "num_patients", "=", "len", "(", "self", ".", "patients_list", ")", "\n", "\n", "config_net", "=", "config", "[", "'network'", "]", "\n", "self", ".", "data_shape", "=", "config_net", ".", "get", "(", "'data_shape'", ",", "None", ")", "\n", "self", ".", "label_shape", "=", "config_net", ".", "get", "(", "'label_shape'", ",", "None", ")", "\n", "\n", "config_test", "=", "config", "[", "'test'", "]", "\n", "self", ".", "batch_size", "=", "config_test", ".", "get", "(", "'batch_size'", ")", "\n", "self", ".", "segment_overlap", "=", "config_test", ".", "get", "(", "'segment_overlap'", ",", "None", ")", "\n", "assert", "(", "self", ".", "segment_overlap", ">=", "0", ")", "and", "(", "self", ".", "segment_overlap", "<", "1", ")", "\n", "# the segment stride is the `label_shape` scaled by `(1-segment_overlap)`", "\n"]], "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.inferenceloader.DatasetInference3d.get_patients_list": [[35, 38], ["None"], "methods", ["None"], ["", "def", "get_patients_list", "(", "self", ")", ":", "\n", "        ", "\"\"\"return list of all patients (for main function)\"\"\"", "\n", "return", "self", ".", "patients_list", "\n", "\n"]], "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.inferenceloader.DatasetInference3d.get_patient": [[39, 43], ["inferenceloader.DatasetInference3d.data_io_obj.load_patient_with_info"], "methods", ["home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.data_io.DataIO.load_patient_with_info"], ["", "def", "get_patient", "(", "self", ",", "patient_id", ")", ":", "\n", "        ", "\"\"\"\"\"\"", "\n", "data", ",", "weight", ",", "info", "=", "self", ".", "data_io_obj", ".", "load_patient_with_info", "(", "patient_id", ",", "with_label", "=", "False", ")", "\n", "return", "data", ",", "info", ",", "weight", "\n", "\n"]], "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.inferenceloader.DatasetInference3d.calculate_number_of_steps": [[44, 48], ["inferenceloader.DatasetInference3d.__calculate_segments", "int", "numpy.ceil", "len"], "methods", ["home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.inferenceloader.DatasetInference3d.__calculate_segments"], ["", "def", "calculate_number_of_steps", "(", "self", ",", "weight", ")", ":", "\n", "        ", "\"\"\"also update center coordinates, does not update initial weight matrix\"\"\"", "\n", "self", ".", "center_coords", "=", "self", ".", "__calculate_segments", "(", "weight", ",", "self", ".", "segment_overlap", ")", "\n", "self", ".", "batches_test", "=", "int", "(", "np", ".", "ceil", "(", "len", "(", "self", ".", "center_coords", ")", "/", "self", ".", "batch_size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.inferenceloader.DatasetInference3d.__len__": [[49, 52], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "\"\"\"return number of iterations for current patient\"\"\"", "\n", "return", "self", ".", "batches_test", "\n", "\n"]], "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.inferenceloader.DatasetInference3d.generator_function": [[53, 72], ["range", "inferenceloader.DatasetInference3d.__extract_segment_from_volume", "batch_data.append", "batch_coords.append", "batch_padding.append", "min", "numpy.stack", "len"], "methods", ["home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.dataloader.DatasetMMEP3d.__extract_segment_from_volume"], ["", "def", "generator_function", "(", "self", ",", "data", ")", ":", "\n", "        ", "\"\"\"\n        generate batch of (data segment, center voxel coordinates) pairs on every call\n        \"\"\"", "\n", "for", "i", "in", "range", "(", "self", ".", "batches_test", ")", ":", "\n", "            ", "batch_data", ",", "batch_coords", ",", "batch_padding", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "batch_indices", "=", "self", ".", "center_coords", "[", "i", "*", "self", ".", "batch_size", ":", "min", "(", "(", "i", "+", "1", ")", "*", "self", ".", "batch_size", ",", "\n", "len", "(", "self", ".", "center_coords", ")", ")", "]", "\n", "\n", "for", "center", "in", "batch_indices", ":", "\n", "                ", "segment_data", ",", "indices_list", ",", "padding_list", "=", "self", ".", "__extract_segment_from_volume", "(", "data", ",", "\n", "self", ".", "data_shape", ",", "\n", "self", ".", "label_shape", ",", "\n", "center", ")", "\n", "\n", "batch_data", ".", "append", "(", "segment_data", ")", "\n", "batch_coords", ".", "append", "(", "indices_list", ")", "\n", "batch_padding", ".", "append", "(", "padding_list", ")", "\n", "", "yield", "np", ".", "stack", "(", "batch_data", ",", "axis", "=", "0", ")", ",", "batch_coords", ",", "batch_padding", "\n", "\n"]], "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.inferenceloader.DatasetInference3d.__calculate_segments": [[73, 93], ["range", "len", "int", "int", "numpy.arange", "numpy.floor", "numpy.ceil"], "methods", ["None"], ["", "", "def", "__calculate_segments", "(", "self", ",", "mask_volume", ",", "segment_overlap", ")", ":", "\n", "        ", "\"\"\"\n        calculate center indices for each patch to extract.\n        \"\"\"", "\n", "coordinates_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "mask_volume", ".", "shape", ")", ")", ":", "\n", "# Note: better safe than sorry :)", "\n", "            ", "start_range", "=", "int", "(", "np", ".", "floor", "(", "self", ".", "label_shape", "[", "i", "]", "/", "2", ")", ")", "\n", "stride", "=", "int", "(", "self", ".", "label_shape", "[", "i", "]", "*", "(", "1", "-", "segment_overlap", ")", ")", "\n", "assert", "stride", ">", "0", "\n", "end_range", "=", "stride", "*", "np", ".", "ceil", "(", "mask_volume", ".", "shape", "[", "i", "]", "/", "stride", ")", "\n", "coordinates_i", "=", "np", ".", "arange", "(", "start_range", ",", "end_range", ",", "stride", ")", "\n", "# using int (or flooring) would ensure that no voxel gets missed", "\n", "# rather some voxels may get double counted", "\n", "coordinates_list", "+=", "[", "coordinates_i", "]", "\n", "\n", "", "coordinates_grid", "=", "[", "(", "x", ",", "y", ",", "z", ")", "for", "x", "in", "coordinates_list", "[", "0", "]", "for", "y", "in", "coordinates_list", "[", "1", "]", "for", "z", "in", "coordinates_list", "[", "2", "]", "]", "\n", "return", "coordinates_grid", "# list of (X, Y, Z)", "\n", "\n"]], "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.inferenceloader.DatasetInference3d.__extract_segment_from_volume": [[94, 146], ["numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "numpy.pad", "len", "int", "int", "int", "int", "int", "int", "int", "int", "range", "range", "range", "max", "min", "max", "min", "numpy.abs", "numpy.abs", "range", "numpy.ix_", "range", "range", "len", "len", "len", "len", "min", "max", "min", "max", "numpy.floor", "numpy.floor", "numpy.ceil", "numpy.ceil", "numpy.floor", "numpy.floor", "numpy.floor", "numpy.floor", "numpy.floor", "numpy.floor"], "methods", ["None"], ["", "def", "__extract_segment_from_volume", "(", "self", ",", "volume", ",", "segment_shape", ",", "label_shape", ",", "center", ")", ":", "\n", "        ", "\"\"\"\n        This extraction module is defined for inputs in `channels-first` format\n        `segment_shape` is required to extract the segment for input to the network.\n        `label_shape` is required to calculate indices where prediction from the network\n        is assigned to in the label map.\n        \"\"\"", "\n", "offset", "=", "1", "# I will be extracting data samples only", "\n", "indices_data", "=", "np", ".", "zeros", "(", "(", "len", "(", "segment_shape", ")", "+", "1", ",", "2", ")", ",", "dtype", "=", "np", ".", "uint16", ")", "\n", "paddings_data", "=", "np", ".", "zeros", "(", "(", "len", "(", "segment_shape", ")", "+", "1", ",", "2", ")", ",", "dtype", "=", "np", ".", "int16", ")", "\n", "indices_label", "=", "np", ".", "zeros", "(", "(", "len", "(", "label_shape", ")", "+", "1", ",", "2", ")", ",", "dtype", "=", "np", ".", "uint16", ")", "\n", "paddings_label", "=", "np", ".", "zeros", "(", "(", "len", "(", "label_shape", ")", "+", "1", ",", "2", ")", ",", "dtype", "=", "np", ".", "int16", ")", "\n", "\n", "# specifying fields for channel (first) dimension in data.", "\n", "indices_data", "[", "0", "]", "=", "[", "0", ",", "volume", ".", "shape", "[", "0", "]", "]", "\n", "paddings_data", "[", "0", "]", "=", "[", "0", ",", "0", "]", "# no padding along channel axis", "\n", "indices_label", "[", "0", "]", "=", "[", "0", ",", "self", ".", "num_classes", "]", "\n", "paddings_label", "[", "0", "]", "=", "[", "0", ",", "0", "]", "# no padding along channel axis", "\n", "\n", "# calculate left and right bounds for indices, and corresponding padding", "\n", "for", "i", "in", "range", "(", "len", "(", "segment_shape", ")", ")", ":", "# (H, W, D)", "\n", "            ", "indices_data", "[", "i", "+", "offset", "]", "[", "0", "]", "=", "int", "(", "max", "(", "0", ",", "center", "[", "i", "]", "-", "np", ".", "floor", "(", "segment_shape", "[", "i", "]", "/", "2", ")", ")", ")", "\n", "indices_data", "[", "i", "+", "offset", "]", "[", "1", "]", "=", "int", "(", "min", "(", "volume", ".", "shape", "[", "i", "+", "offset", "]", ",", "center", "[", "i", "]", "-", "np", ".", "floor", "(", "segment_shape", "[", "i", "]", "/", "2", ")", "+", "\n", "segment_shape", "[", "i", "]", ")", ")", "\n", "\n", "indices_label", "[", "i", "+", "offset", "]", "[", "0", "]", "=", "int", "(", "max", "(", "0", ",", "center", "[", "i", "]", "-", "np", ".", "floor", "(", "label_shape", "[", "i", "]", "/", "2", ")", ")", ")", "\n", "indices_label", "[", "i", "+", "offset", "]", "[", "1", "]", "=", "int", "(", "min", "(", "volume", ".", "shape", "[", "i", "+", "offset", "]", ",", "center", "[", "i", "]", "-", "np", ".", "floor", "(", "label_shape", "[", "i", "]", "/", "2", ")", "+", "\n", "label_shape", "[", "i", "]", ")", ")", "\n", "\n", "paddings_data", "[", "i", "+", "offset", "]", "[", "0", "]", "=", "int", "(", "np", ".", "abs", "(", "min", "(", "0", ",", "center", "[", "i", "]", "-", "np", ".", "floor", "(", "segment_shape", "[", "i", "]", "/", "2", ")", ")", ")", ")", "\n", "paddings_data", "[", "i", "+", "offset", "]", "[", "1", "]", "=", "int", "(", "max", "(", "volume", ".", "shape", "[", "i", "+", "offset", "]", ",", "\n", "np", ".", "ceil", "(", "center", "[", "i", "]", "-", "np", ".", "floor", "(", "segment_shape", "[", "i", "]", "/", "2", ")", "+", "\n", "segment_shape", "[", "i", "]", ")", ")", "-", "volume", ".", "shape", "[", "i", "+", "offset", "]", ")", "\n", "\n", "paddings_label", "[", "i", "+", "offset", "]", "[", "0", "]", "=", "int", "(", "np", ".", "abs", "(", "min", "(", "0", ",", "center", "[", "i", "]", "-", "np", ".", "floor", "(", "label_shape", "[", "i", "]", "/", "2", ")", ")", ")", ")", "\n", "paddings_label", "[", "i", "+", "offset", "]", "[", "1", "]", "=", "int", "(", "max", "(", "volume", ".", "shape", "[", "i", "+", "offset", "]", ",", "\n", "np", ".", "ceil", "(", "center", "[", "i", "]", "-", "np", ".", "floor", "(", "label_shape", "[", "i", "]", "/", "2", ")", "+", "\n", "label_shape", "[", "i", "]", ")", ")", "-", "volume", ".", "shape", "[", "i", "+", "offset", "]", ")", "\n", "\n", "# converting to explicit list of coordinates for np.ix_()", "\n", "", "indices_list_data", "=", "[", "range", "(", "indices_data", "[", "i", "]", "[", "0", "]", ",", "indices_data", "[", "i", "]", "[", "1", "]", ")", "for", "i", "in", "range", "(", "indices_data", ".", "shape", "[", "0", "]", ")", "]", "\n", "\n", "volume_to_return", "=", "volume", "[", "np", ".", "ix_", "(", "*", "indices_list_data", ")", "]", "\n", "volume_to_return", "=", "np", ".", "pad", "(", "volume_to_return", ",", "pad_width", "=", "paddings_data", ",", "mode", "=", "'constant'", ",", "constant_values", "=", "0", ")", "\n", "\n", "# coordinates and paddings data for label segment.", "\n", "indices_list_label", "=", "[", "range", "(", "indices_label", "[", "i", "]", "[", "0", "]", ",", "indices_label", "[", "i", "]", "[", "1", "]", ")", "for", "i", "in", "range", "(", "indices_label", ".", "shape", "[", "0", "]", ")", "]", "\n", "label_undo_shape", "=", "[", "self", ".", "num_classes", "]", "+", "label_shape", "\n", "paddings_list_label", "=", "[", "range", "(", "paddings_label", "[", "i", "]", "[", "0", "]", ",", "label_undo_shape", "[", "i", "]", "-", "paddings_label", "[", "i", "]", "[", "1", "]", ")", "\n", "for", "i", "in", "range", "(", "paddings_label", ".", "shape", "[", "0", "]", ")", "]", "\n", "\n", "return", "volume_to_return", ",", "indices_list_label", ",", "paddings_list_label", "\n", "\n"]], "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.inferenceloader.DatasetInference3d.save_volume": [[147, 152], ["inferenceloader.DatasetInference3d.data_io_obj.save_volume"], "methods", ["home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.inferenceloader.DatasetInference3d.save_volume"], ["", "def", "save_volume", "(", "self", ",", "volume", ",", "affine", ",", "patient", ",", "volume_type", ")", ":", "\n", "        ", "\"\"\"\n        call to 'save_volume' function of 'DataIO' class\n        \"\"\"", "\n", "self", ".", "data_io_obj", ".", "save_volume", "(", "volume", ",", "affine", ",", "patient", ",", "volume_type", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.parse_yaml.parse_yaml_config": [[5, 15], ["os.path.exists", "open", "yaml.safe_load", "print"], "function", ["None"], ["def", "parse_yaml_config", "(", "file_path", ")", ":", "\n", "    ", "assert", "'.yaml'", "in", "file_path", "\n", "assert", "os", ".", "path", ".", "exists", "(", "file_path", ")", "\n", "\n", "with", "open", "(", "file_path", ",", "\"r\"", ")", "as", "stream", ":", "\n", "        ", "try", ":", "\n", "            ", "parsed_data", "=", "yaml", ".", "safe_load", "(", "stream", ")", "\n", "", "except", "yaml", ".", "YAMLError", "as", "exc", ":", "\n", "            ", "print", "(", "exc", ")", "\n", "", "", "return", "parsed_data", "\n", "", ""]], "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.enc1_dec3.PrototypeArchitecture3d.__init__": [[16, 127], ["torch.nn.Module.__init__", "enc1_dec3.Conv3dNormAct", "enc1_dec3.Conv3dNormAct", "torch.nn.Conv3d", "enc1_dec3.Conv3dNormAct", "enc1_dec3.Conv3dNormAct", "torch.nn.Conv3d", "enc1_dec3.Conv3dNormAct", "enc1_dec3.Conv3dNormAct", "torch.nn.Conv3d", "enc1_dec3.Conv3dNormAct", "enc1_dec3.Conv3dNormAct", "torch.nn.Conv3d", "enc1_dec3.Conv3dNormAct", "enc1_dec3.Conv3dNormAct", "torch.nn.ConvTranspose3d", "enc1_dec3.Conv3dNormAct", "enc1_dec3.Conv3dNormAct", "torch.nn.ConvTranspose3d", "enc1_dec3.Conv3dNormAct", "enc1_dec3.Conv3dNormAct", "torch.nn.ConvTranspose3d", "enc1_dec3.Conv3dNormAct", "enc1_dec3.Conv3dNormAct", "torch.nn.ConvTranspose3d", "enc1_dec3.Conv3dNormAct", "enc1_dec3.Conv3dNormAct", "torch.nn.Conv3d", "enc1_dec3.Conv3dNormAct", "torch.nn.ConvTranspose3d", "enc1_dec3.Conv3dNormAct", "enc1_dec3.Conv3dNormAct", "torch.nn.ConvTranspose3d", "enc1_dec3.Conv3dNormAct", "enc1_dec3.Conv3dNormAct", "torch.nn.ConvTranspose3d", "enc1_dec3.Conv3dNormAct", "enc1_dec3.Conv3dNormAct", "torch.nn.ConvTranspose3d", "enc1_dec3.Conv3dNormAct", "enc1_dec3.Conv3dNormAct", "torch.nn.Conv3d", "enc1_dec3.Conv3dNormAct", "torch.nn.ConvTranspose3d", "enc1_dec3.Conv3dNormAct", "enc1_dec3.Conv3dNormAct", "torch.nn.ConvTranspose3d", "enc1_dec3.Conv3dNormAct", "enc1_dec3.Conv3dNormAct", "torch.nn.ConvTranspose3d", "enc1_dec3.Conv3dNormAct", "enc1_dec3.Conv3dNormAct", "torch.nn.ConvTranspose3d", "enc1_dec3.Conv3dNormAct", "enc1_dec3.Conv3dNormAct", "torch.nn.Conv3d", "len", "config_data.get"], "methods", ["home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.losses.DiceLoss.__init__"], ["def", "__init__", "(", "self", ",", "config", "=", "None", ")", ":", "\n", "        ", "super", "(", "PrototypeArchitecture3d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "config", "is", "not", "None", ":", "\n", "            ", "config_data", "=", "config", "[", "'data'", "]", "\n", "num_channels", "=", "len", "(", "config_data", ".", "get", "(", "'channels'", ")", ")", "\n", "", "else", ":", "\n", "            ", "num_channels", "=", "4", "\n", "\n", "######################### Encoder:", "\n", "# Level 1", "\n", "", "self", ".", "conv_enc_1_1", "=", "Conv3dNormAct", "(", "num_channels", ",", "30", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv_enc_1_2", "=", "Conv3dNormAct", "(", "30", ",", "30", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "\n", "# Level 2", "\n", "self", ".", "downsampleby2_2", "=", "nn", ".", "Conv3d", "(", "30", ",", "30", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv_enc_2_1", "=", "Conv3dNormAct", "(", "30", ",", "60", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv_enc_2_2", "=", "Conv3dNormAct", "(", "60", ",", "60", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "\n", "# Level 3", "\n", "self", ".", "downsampleby2_3", "=", "nn", ".", "Conv3d", "(", "60", ",", "60", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv_enc_3_1", "=", "Conv3dNormAct", "(", "60", ",", "120", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv_enc_3_2", "=", "Conv3dNormAct", "(", "120", ",", "120", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "\n", "# Level 4", "\n", "self", ".", "downsampleby2_4", "=", "nn", ".", "Conv3d", "(", "120", ",", "120", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv_enc_4_1", "=", "Conv3dNormAct", "(", "120", ",", "240", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv_enc_4_2", "=", "Conv3dNormAct", "(", "240", ",", "240", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "\n", "# Level 5", "\n", "self", ".", "downsampleby2_5", "=", "nn", ".", "Conv3d", "(", "240", ",", "240", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv_enc_5", "=", "Conv3dNormAct", "(", "240", ",", "480", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "\n", "######################### Decoder:", "\n", "\n", "############### Path A", "\n", "# Level 5", "\n", "self", ".", "conv_dec_5_pathA", "=", "Conv3dNormAct", "(", "480", ",", "240", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "\n", "# Level 4", "\n", "self", ".", "upsample_4_pathA", "=", "nn", ".", "ConvTranspose3d", "(", "240", ",", "240", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "conv_dec_4_pathA_1", "=", "Conv3dNormAct", "(", "240", "+", "240", ",", "240", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv_dec_4_pathA_2", "=", "Conv3dNormAct", "(", "240", ",", "120", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "\n", "# Level 3", "\n", "self", ".", "upsample_3_pathA", "=", "nn", ".", "ConvTranspose3d", "(", "120", ",", "120", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "conv_dec_3_pathA_1", "=", "Conv3dNormAct", "(", "120", "+", "120", ",", "120", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv_dec_3_pathA_2", "=", "Conv3dNormAct", "(", "120", ",", "60", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "\n", "# Level 2", "\n", "self", ".", "upsample_2_pathA", "=", "nn", ".", "ConvTranspose3d", "(", "60", ",", "60", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "conv_dec_2_pathA_1", "=", "Conv3dNormAct", "(", "60", "+", "60", ",", "60", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv_dec_2_pathA_2", "=", "Conv3dNormAct", "(", "60", ",", "30", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "\n", "# Level 1", "\n", "self", ".", "upsample_1_pathA", "=", "nn", ".", "ConvTranspose3d", "(", "30", ",", "30", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "conv_dec_1_pathA_1", "=", "Conv3dNormAct", "(", "30", "+", "30", ",", "30", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv_dec_1_pathA_2", "=", "Conv3dNormAct", "(", "30", ",", "15", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "conv_pathA", "=", "nn", ".", "Conv3d", "(", "15", ",", "2", ",", "kernel_size", "=", "1", ")", "\n", "\n", "############### Path B", "\n", "# Level 5", "\n", "self", ".", "conv_dec_5_pathB", "=", "Conv3dNormAct", "(", "480", ",", "240", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "\n", "# Level 4", "\n", "self", ".", "upsample_4_pathB", "=", "nn", ".", "ConvTranspose3d", "(", "240", ",", "240", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "conv_dec_4_pathB_1", "=", "Conv3dNormAct", "(", "240", "+", "240", ",", "240", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv_dec_4_pathB_2", "=", "Conv3dNormAct", "(", "240", ",", "120", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "\n", "# Level 3", "\n", "self", ".", "upsample_3_pathB", "=", "nn", ".", "ConvTranspose3d", "(", "120", ",", "120", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "conv_dec_3_pathB_1", "=", "Conv3dNormAct", "(", "120", "+", "120", ",", "120", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv_dec_3_pathB_2", "=", "Conv3dNormAct", "(", "120", ",", "60", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "\n", "# Level 2", "\n", "self", ".", "upsample_2_pathB", "=", "nn", ".", "ConvTranspose3d", "(", "60", ",", "60", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "conv_dec_2_pathB_1", "=", "Conv3dNormAct", "(", "60", "+", "60", ",", "60", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv_dec_2_pathB_2", "=", "Conv3dNormAct", "(", "60", ",", "30", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "\n", "# Level 1", "\n", "self", ".", "upsample_1_pathB", "=", "nn", ".", "ConvTranspose3d", "(", "30", ",", "30", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "conv_dec_1_pathB_1", "=", "Conv3dNormAct", "(", "30", "+", "30", ",", "30", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv_dec_1_pathB_2", "=", "Conv3dNormAct", "(", "30", ",", "15", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "conv_pathB", "=", "nn", ".", "Conv3d", "(", "15", ",", "2", ",", "kernel_size", "=", "1", ")", "\n", "\n", "############### Path C", "\n", "# Level 5", "\n", "self", ".", "conv_dec_5_pathC", "=", "Conv3dNormAct", "(", "480", ",", "240", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "\n", "# Level 4", "\n", "self", ".", "upsample_4_pathC", "=", "nn", ".", "ConvTranspose3d", "(", "240", ",", "240", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "conv_dec_4_pathC_1", "=", "Conv3dNormAct", "(", "240", "+", "240", ",", "240", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv_dec_4_pathC_2", "=", "Conv3dNormAct", "(", "240", ",", "120", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "\n", "# Level 3", "\n", "self", ".", "upsample_3_pathC", "=", "nn", ".", "ConvTranspose3d", "(", "120", ",", "120", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "conv_dec_3_pathC_1", "=", "Conv3dNormAct", "(", "120", "+", "120", ",", "120", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv_dec_3_pathC_2", "=", "Conv3dNormAct", "(", "120", ",", "60", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "\n", "# Level 2", "\n", "self", ".", "upsample_2_pathC", "=", "nn", ".", "ConvTranspose3d", "(", "60", ",", "60", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "conv_dec_2_pathC_1", "=", "Conv3dNormAct", "(", "60", "+", "60", ",", "60", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv_dec_2_pathC_2", "=", "Conv3dNormAct", "(", "60", ",", "30", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "\n", "# Level 1", "\n", "self", ".", "upsample_1_pathC", "=", "nn", ".", "ConvTranspose3d", "(", "30", ",", "30", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "conv_dec_1_pathC_1", "=", "Conv3dNormAct", "(", "30", "+", "30", ",", "30", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv_dec_1_pathC_2", "=", "Conv3dNormAct", "(", "30", ",", "15", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "conv_pathC", "=", "nn", ".", "Conv3d", "(", "15", ",", "2", ",", "kernel_size", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.enc1_dec3.PrototypeArchitecture3d.forward": [[128, 280], ["enc1_dec3.PrototypeArchitecture3d.conv_enc_1_1", "enc1_dec3.PrototypeArchitecture3d.conv_enc_1_2", "enc1_dec3.PrototypeArchitecture3d.downsampleby2_2", "enc1_dec3.PrototypeArchitecture3d.conv_enc_2_1", "enc1_dec3.PrototypeArchitecture3d.conv_enc_2_2", "enc1_dec3.PrototypeArchitecture3d.downsampleby2_3", "enc1_dec3.PrototypeArchitecture3d.conv_enc_3_1", "enc1_dec3.PrototypeArchitecture3d.conv_enc_3_2", "enc1_dec3.PrototypeArchitecture3d.downsampleby2_4", "enc1_dec3.PrototypeArchitecture3d.conv_enc_4_1", "enc1_dec3.PrototypeArchitecture3d.conv_enc_4_2", "enc1_dec3.PrototypeArchitecture3d.downsampleby2_5", "enc1_dec3.PrototypeArchitecture3d.conv_enc_5", "enc1_dec3.PrototypeArchitecture3d.conv_dec_5_pathA", "enc1_dec3.PrototypeArchitecture3d.conv_dec_5_pathB", "enc1_dec3.PrototypeArchitecture3d.conv_dec_5_pathC", "enc1_dec3.PrototypeArchitecture3d.upsample_4_pathA", "enc1_dec3.PrototypeArchitecture3d.upsample_4_pathB", "enc1_dec3.PrototypeArchitecture3d.upsample_4_pathC", "enc1_dec3.PrototypeArchitecture3d.conv_dec_4_pathA_2", "enc1_dec3.PrototypeArchitecture3d.conv_dec_4_pathB_2", "enc1_dec3.PrototypeArchitecture3d.conv_dec_4_pathC_2", "enc1_dec3.PrototypeArchitecture3d.upsample_3_pathA", "enc1_dec3.PrototypeArchitecture3d.upsample_3_pathB", "enc1_dec3.PrototypeArchitecture3d.upsample_3_pathC", "enc1_dec3.PrototypeArchitecture3d.conv_dec_3_pathA_2", "enc1_dec3.PrototypeArchitecture3d.conv_dec_3_pathB_2", "enc1_dec3.PrototypeArchitecture3d.conv_dec_3_pathC_2", "enc1_dec3.PrototypeArchitecture3d.upsample_2_pathA", "enc1_dec3.PrototypeArchitecture3d.upsample_2_pathB", "enc1_dec3.PrototypeArchitecture3d.upsample_2_pathC", "enc1_dec3.PrototypeArchitecture3d.conv_dec_2_pathA_2", "enc1_dec3.PrototypeArchitecture3d.conv_dec_2_pathB_2", "enc1_dec3.PrototypeArchitecture3d.conv_dec_2_pathC_2", "enc1_dec3.PrototypeArchitecture3d.upsample_1_pathA", "enc1_dec3.PrototypeArchitecture3d.upsample_1_pathB", "enc1_dec3.PrototypeArchitecture3d.upsample_1_pathC", "enc1_dec3.PrototypeArchitecture3d.conv_dec_1_pathA_2", "enc1_dec3.PrototypeArchitecture3d.conv_dec_1_pathB_2", "enc1_dec3.PrototypeArchitecture3d.conv_dec_1_pathC_2", "enc1_dec3.PrototypeArchitecture3d.conv_pathA", "enc1_dec3.PrototypeArchitecture3d.conv_pathB", "enc1_dec3.PrototypeArchitecture3d.conv_pathC", "enc1_dec3.PrototypeArchitecture3d.conv_dec_4_pathA_1", "enc1_dec3.PrototypeArchitecture3d.conv_dec_4_pathB_1", "enc1_dec3.PrototypeArchitecture3d.conv_dec_4_pathC_1", "enc1_dec3.PrototypeArchitecture3d.conv_dec_3_pathA_1", "enc1_dec3.PrototypeArchitecture3d.conv_dec_3_pathB_1", "enc1_dec3.PrototypeArchitecture3d.conv_dec_3_pathC_1", "enc1_dec3.PrototypeArchitecture3d.conv_dec_2_pathA_1", "enc1_dec3.PrototypeArchitecture3d.conv_dec_2_pathB_1", "enc1_dec3.PrototypeArchitecture3d.conv_dec_2_pathC_1", "enc1_dec3.PrototypeArchitecture3d.conv_dec_1_pathA_1", "enc1_dec3.PrototypeArchitecture3d.conv_dec_1_pathB_1", "enc1_dec3.PrototypeArchitecture3d.conv_dec_1_pathC_1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x_1", ")", ":", "\n", "        ", "\"\"\"\"\"\"", "\n", "\n", "######################### Encoder:", "\n", "# Level 1", "\n", "x_1", "=", "self", ".", "conv_enc_1_1", "(", "x_1", ")", "\n", "x_1", "=", "self", ".", "conv_enc_1_2", "(", "x_1", ")", "\n", "\n", "# Level 2", "\n", "x_2", "=", "self", ".", "downsampleby2_2", "(", "x_1", ")", "\n", "x_2", "=", "self", ".", "conv_enc_2_1", "(", "x_2", ")", "\n", "x_2", "=", "self", ".", "conv_enc_2_2", "(", "x_2", ")", "\n", "\n", "# Level 3", "\n", "x_3", "=", "self", ".", "downsampleby2_3", "(", "x_2", ")", "\n", "x_3", "=", "self", ".", "conv_enc_3_1", "(", "x_3", ")", "\n", "x_3", "=", "self", ".", "conv_enc_3_2", "(", "x_3", ")", "\n", "\n", "# Level 4", "\n", "x_4", "=", "self", ".", "downsampleby2_4", "(", "x_3", ")", "\n", "x_4", "=", "self", ".", "conv_enc_4_1", "(", "x_4", ")", "\n", "x_4", "=", "self", ".", "conv_enc_4_2", "(", "x_4", ")", "\n", "\n", "# Level 5", "\n", "x_5", "=", "self", ".", "downsampleby2_5", "(", "x_4", ")", "\n", "x_5", "=", "self", ".", "conv_enc_5", "(", "x_5", ")", "\n", "\n", "######################### Decoder:", "\n", "\n", "############### Level 5", "\n", "x_pathA", "=", "self", ".", "conv_dec_5_pathA", "(", "x_5", ")", "\n", "x_pathB", "=", "self", ".", "conv_dec_5_pathB", "(", "x_5", ")", "\n", "x_pathC", "=", "self", ".", "conv_dec_5_pathC", "(", "x_5", ")", "\n", "\n", "############### Level 4", "\n", "# Upsampling", "\n", "x_pathA", "=", "self", ".", "upsample_4_pathA", "(", "x_pathA", ")", "# Path A", "\n", "x_pathB", "=", "self", ".", "upsample_4_pathB", "(", "x_pathB", ")", "# Path B", "\n", "x_pathC", "=", "self", ".", "upsample_4_pathC", "(", "x_pathC", ")", "# Path C", "\n", "# Concatenation & Processing", "\n", "x_pathA", "=", "self", ".", "conv_dec_4_pathA_2", "(", "\n", "self", ".", "conv_dec_4_pathA_1", "(", "\n", "torch", ".", "cat", "(", "\n", "(", "x_pathA", ",", "x_4", ")", "\n", ",", "dim", "=", "1", ")", "\n", ")", "\n", ")", "# Path A", "\n", "x_pathB", "=", "self", ".", "conv_dec_4_pathB_2", "(", "\n", "self", ".", "conv_dec_4_pathB_1", "(", "\n", "torch", ".", "cat", "(", "\n", "(", "x_pathB", ",", "x_4", ")", "\n", ",", "dim", "=", "1", ")", "\n", ")", "\n", ")", "# Path B", "\n", "x_pathC", "=", "self", ".", "conv_dec_4_pathC_2", "(", "\n", "self", ".", "conv_dec_4_pathC_1", "(", "\n", "torch", ".", "cat", "(", "\n", "(", "x_pathC", ",", "x_4", ")", "\n", ",", "dim", "=", "1", ")", "\n", ")", "\n", ")", "# Path C", "\n", "\n", "############### Level 3", "\n", "# Upsampling", "\n", "x_pathA", "=", "self", ".", "upsample_3_pathA", "(", "x_pathA", ")", "# Path A", "\n", "x_pathB", "=", "self", ".", "upsample_3_pathB", "(", "x_pathB", ")", "# Path B", "\n", "x_pathC", "=", "self", ".", "upsample_3_pathC", "(", "x_pathC", ")", "# Path C", "\n", "# Concatenation & Processing", "\n", "x_pathA", "=", "self", ".", "conv_dec_3_pathA_2", "(", "\n", "self", ".", "conv_dec_3_pathA_1", "(", "\n", "torch", ".", "cat", "(", "\n", "(", "x_pathA", ",", "x_3", ")", "\n", ",", "dim", "=", "1", ")", "\n", ")", "\n", ")", "# Path A", "\n", "x_pathB", "=", "self", ".", "conv_dec_3_pathB_2", "(", "\n", "self", ".", "conv_dec_3_pathB_1", "(", "\n", "torch", ".", "cat", "(", "\n", "(", "x_pathB", ",", "x_3", ")", "\n", ",", "dim", "=", "1", ")", "\n", ")", "\n", ")", "# Path B", "\n", "x_pathC", "=", "self", ".", "conv_dec_3_pathC_2", "(", "\n", "self", ".", "conv_dec_3_pathC_1", "(", "\n", "torch", ".", "cat", "(", "\n", "(", "x_pathC", ",", "x_3", ")", "\n", ",", "dim", "=", "1", ")", "\n", ")", "\n", ")", "# Path C", "\n", "\n", "############### Level 2", "\n", "# Upsampling", "\n", "x_pathA", "=", "self", ".", "upsample_2_pathA", "(", "x_pathA", ")", "# Path A", "\n", "x_pathB", "=", "self", ".", "upsample_2_pathB", "(", "x_pathB", ")", "# Path B", "\n", "x_pathC", "=", "self", ".", "upsample_2_pathC", "(", "x_pathC", ")", "# Path C", "\n", "# Concatenation & Processing", "\n", "x_pathA", "=", "self", ".", "conv_dec_2_pathA_2", "(", "\n", "self", ".", "conv_dec_2_pathA_1", "(", "\n", "torch", ".", "cat", "(", "\n", "(", "x_pathA", ",", "x_2", ")", "\n", ",", "dim", "=", "1", ")", "\n", ")", "\n", ")", "# Path A", "\n", "x_pathB", "=", "self", ".", "conv_dec_2_pathB_2", "(", "\n", "self", ".", "conv_dec_2_pathB_1", "(", "\n", "torch", ".", "cat", "(", "\n", "(", "x_pathB", ",", "x_2", ")", "\n", ",", "dim", "=", "1", ")", "\n", ")", "\n", ")", "# Path B", "\n", "x_pathC", "=", "self", ".", "conv_dec_2_pathC_2", "(", "\n", "self", ".", "conv_dec_2_pathC_1", "(", "\n", "torch", ".", "cat", "(", "\n", "(", "x_pathC", ",", "x_2", ")", "\n", ",", "dim", "=", "1", ")", "\n", ")", "\n", ")", "# Path C", "\n", "\n", "############### Level 1", "\n", "# Upsampling", "\n", "x_pathA", "=", "self", ".", "upsample_1_pathA", "(", "x_pathA", ")", "# Path A", "\n", "x_pathB", "=", "self", ".", "upsample_1_pathB", "(", "x_pathB", ")", "# Path B", "\n", "x_pathC", "=", "self", ".", "upsample_1_pathC", "(", "x_pathC", ")", "# Path C", "\n", "# Concatenation & Processing", "\n", "x_pathA", "=", "self", ".", "conv_dec_1_pathA_2", "(", "\n", "self", ".", "conv_dec_1_pathA_1", "(", "\n", "torch", ".", "cat", "(", "\n", "(", "x_pathA", ",", "x_1", ")", "\n", ",", "dim", "=", "1", ")", "\n", ")", "\n", ")", "# Path A", "\n", "x_pathB", "=", "self", ".", "conv_dec_1_pathB_2", "(", "\n", "self", ".", "conv_dec_1_pathB_1", "(", "\n", "torch", ".", "cat", "(", "\n", "(", "x_pathB", ",", "x_1", ")", "\n", ",", "dim", "=", "1", ")", "\n", ")", "\n", ")", "# Path B", "\n", "x_pathC", "=", "self", ".", "conv_dec_1_pathC_2", "(", "\n", "self", ".", "conv_dec_1_pathC_1", "(", "\n", "torch", ".", "cat", "(", "\n", "(", "x_pathC", ",", "x_1", ")", "\n", ",", "dim", "=", "1", ")", "\n", ")", "\n", ")", "# Path C", "\n", "\n", "# Classification", "\n", "x_pathA", "=", "self", ".", "conv_pathA", "(", "x_pathA", ")", "\n", "x_pathB", "=", "self", ".", "conv_pathB", "(", "x_pathB", ")", "\n", "x_pathC", "=", "self", ".", "conv_pathC", "(", "x_pathC", ")", "\n", "\n", "return", "x_pathA", ",", "x_pathB", ",", "x_pathC", "\n", "\n"]], "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.enc1_dec3.PrototypeArchitecture3d.print_model_parameters": [[281, 286], ["enc1_dec3.PrototypeArchitecture3d.state_dict", "print", "print", "sum", "[].size", "param.numel", "enc1_dec3.PrototypeArchitecture3d.parameters", "enc1_dec3.PrototypeArchitecture3d.state_dict"], "methods", ["None"], ["", "def", "print_model_parameters", "(", "self", ")", ":", "\n", "        ", "\"\"\"Helper to print out model parameters\"\"\"", "\n", "for", "param_tensor", "in", "self", ".", "state_dict", "(", ")", ":", "\n", "            ", "print", "(", "param_tensor", ",", "'\\t'", ",", "self", ".", "state_dict", "(", ")", "[", "param_tensor", "]", ".", "size", "(", ")", ")", "\n", "", "print", "(", "\"Total Parameters:\"", ",", "sum", "(", "param", ".", "numel", "(", ")", "for", "param", "in", "self", ".", "parameters", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.enc1_dec3.Conv3dNormAct.__init__": [[291, 303], ["torch.nn.Module.__init__", "torch.nn.Conv3d", "torch.nn.InstanceNorm3d", "torch.nn.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.losses.DiceLoss.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "(", "1", ",", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ",", "1", ")", ",", "padding", "=", "(", "0", ",", "0", ",", "0", ")", ",", "\n", "dilation", "=", "(", "1", ",", "1", ",", "1", ")", ")", ":", "\n", "        ", "super", "(", "Conv3dNormAct", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "Conv3d", "(", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "dilation", "=", "dilation", ")", "\n", "self", ".", "norm", "=", "torch", ".", "nn", ".", "InstanceNorm3d", "(", "num_features", "=", "out_channels", ",", "affine", "=", "True", ")", "\n", "self", ".", "acti", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.01", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.enc1_dec3.Conv3dNormAct.forward": [[304, 307], ["enc1_dec3.Conv3dNormAct.acti", "enc1_dec3.Conv3dNormAct.norm", "enc1_dec3.Conv3dNormAct.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\"\"\"", "\n", "return", "self", ".", "acti", "(", "self", ".", "norm", "(", "self", ".", "conv", "(", "x", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.dataloader.DatasetMMEP3d.__init__": [[21, 58], ["config[].get", "config_net.get", "config_net.get", "config_data.get", "DataIO", "config_train_or_validate.get", "config_train_or_validate.get", "numpy.ceil", "print", "dataloader.DatasetMMEP3d.data_io_obj.patients_list", "Exception", "len", "len", "len", "int", "train_or_validate.upper"], "methods", ["home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.data_io.DataIO.patients_list"], ["def", "__init__", "(", "self", ",", "config", ",", "train_or_validate", ",", "augment", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            data_array: (np.array)\n            label_array: (np.array)\n            config: (dict) parsed config_file\n            train_or_validate: (str)\n        \"\"\"", "\n", "threads_multi", "=", "config", "[", "'train'", "]", ".", "get", "(", "'workers_multithreading'", ",", "1", ")", "\n", "# Parameters for Training/Validation", "\n", "if", "not", "train_or_validate", "in", "[", "'train'", ",", "'validate'", "]", ":", "\n", "            ", "raise", "Exception", "(", "'Incorrect Generator mode selected:{}'", ".", "format", "(", "\n", "train_or_validate", ")", ")", "\n", "", "config_train_or_validate", "=", "config", "[", "train_or_validate", "]", "\n", "self", ".", "train_or_validate", "=", "train_or_validate", "\n", "# Network parameters", "\n", "config_net", "=", "config", "[", "'network'", "]", "\n", "self", ".", "data_shape", "=", "config_net", ".", "get", "(", "'data_shape'", ",", "None", ")", "# should be list of len 3 (never > 3)", "\n", "self", ".", "label_shape", "=", "config_net", ".", "get", "(", "'label_shape'", ",", "None", ")", "\n", "assert", "len", "(", "self", ".", "data_shape", ")", "==", "len", "(", "self", ".", "label_shape", ")", "\n", "assert", "len", "(", "self", ".", "data_shape", ")", "==", "3", "\n", "\n", "# Data specific parameters", "\n", "config_data", "=", "config", "[", "'data'", "]", "\n", "self", ".", "class_labels", "=", "config_data", ".", "get", "(", "'class_labels'", ",", "None", ")", "\n", "self", ".", "data_io_obj", "=", "DataIO", "(", "config", ",", "train_or_validate", ")", "\n", "\n", "# Training/Validation parameters", "\n", "self", ".", "segments_per_epoch", "=", "config_train_or_validate", ".", "get", "(", "'segments_per_epoch'", ",", "None", ")", "\n", "self", ".", "batch_size", "=", "config_train_or_validate", ".", "get", "(", "'batch_size'", ",", "128", ")", "\n", "self", ".", "batches_per_epoch", "=", "np", ".", "ceil", "(", "self", ".", "segments_per_epoch", "/", "self", ".", "batch_size", ")", "\n", "# ceiling implies one extra smaller mini-batch", "\n", "print", "(", "'Each epoch consists of `{}` batches during {}'", ".", "format", "(", "\n", "int", "(", "self", ".", "batches_per_epoch", ")", ",", "train_or_validate", ".", "upper", "(", ")", ")", ")", "\n", "\n", "self", ".", "patients_list", "=", "self", ".", "data_io_obj", ".", "patients_list", "(", ")", "\n", "self", ".", "augment", "=", "augment", "\n", "\n"]], "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.dataloader.DatasetMMEP3d.__len__": [[59, 62], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "\"\"\"return # of segments to iterate over per epoch (for training/validation loop)\"\"\"", "\n", "return", "self", ".", "segments_per_epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.dataloader.DatasetMMEP3d.on_epoch_begin": [[63, 65], ["None"], "methods", ["None"], ["", "def", "on_epoch_begin", "(", "self", ")", ":", "\n", "        ", "\"\"\"Execute this function before every epoch\"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.dataloader.DatasetMMEP3d.__getitem__": [[66, 87], ["dataloader.DatasetMMEP3d.data_io_obj.load_patient_npy", "dataloader.DatasetMMEP3d.__get_random_sampled_data_label", "dataloader.DatasetMMEP3d.augment", "torch.randn", "label.squeeze().long", "torch.from_numpy", "torch.from_numpy", "len", "data.copy", "numpy.expand_dims", "label.squeeze"], "methods", ["home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.data_io.DataIO.load_patient_npy", "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.dataloader.DatasetMMEP3d.__get_random_sampled_data_label"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        generates a (data, label) pair on every call.\n        The pairs are collated into a batch by a `torch.utils.data.DataLoader`\n        \"\"\"", "\n", "# randomly choose a patient", "\n", "patient_id", "=", "self", ".", "patients_list", "[", "index", "%", "len", "(", "self", ".", "patients_list", ")", "]", "# np.random.choice(self.patients_list) #", "\n", "# read patient volumes", "\n", "data", ",", "weight", ",", "label", "=", "self", ".", "data_io_obj", ".", "load_patient_npy", "(", "patient_id", ")", "\n", "data", ",", "label", "=", "self", ".", "__get_random_sampled_data_label", "(", "data", ",", "weight", ",", "label", ")", "\n", "# perform distortion", "\n", "if", "self", ".", "augment", "and", "(", "torch", ".", "randn", "(", "1", ")", ">", "0", ")", ":", "\n", "# augmentation function returns a pytorch tensor by default", "\n", "# augmentation function requires all inputs to be 4D", "\n", "            ", "data", ",", "label", "=", "self", ".", "augment", "(", "**", "{", "\n", "'data'", ":", "data", ".", "copy", "(", ")", ",", "\n", "'label'", ":", "np", ".", "expand_dims", "(", "label", ",", "0", ")", "\n", "}", ")", "\n", "return", "data", ",", "label", ".", "squeeze", "(", "0", ")", ".", "long", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "from_numpy", "(", "data", ")", ",", "torch", ".", "from_numpy", "(", "label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.dataloader.DatasetMMEP3d.get_patient_volumes": [[88, 91], ["dataloader.DatasetMMEP3d.data_io_obj.load_patient_npy"], "methods", ["home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.data_io.DataIO.load_patient_npy"], ["", "", "def", "get_patient_volumes", "(", "self", ",", "index", ")", ":", "\n", "        ", "patient_id", "=", "self", ".", "patients_list", "[", "index", "]", "\n", "return", "self", ".", "data_io_obj", ".", "load_patient_npy", "(", "patient_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.dataloader.DatasetMMEP3d.__get_random_sampled_data_label": [[92, 106], ["dataloader.DatasetMMEP3d.__get_sampling_mask", "numpy.flatnonzero", "dataloader.DatasetMMEP3d.__extract_data_label_segment", "len", "numpy.random.choice", "numpy.asarray", "numpy.unravel_index"], "methods", ["home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.dataloader.DatasetMMEP3d.__get_sampling_mask", "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.dataloader.DatasetMMEP3d.__extract_data_label_segment"], ["", "def", "__get_random_sampled_data_label", "(", "self", ",", "data", ",", "weight", ",", "label", ")", ":", "\n", "        ", "\"\"\"\"\"\"", "\n", "# get sampling mask from 'FLAIR' volume, with help from weight mask.", "\n", "sampling_mask", "=", "self", ".", "__get_sampling_mask", "(", "weight", ")", "# np.uint8(label>0))", "\n", "# select a center voxel randomly from the sampling mask.", "\n", "valid_centers", "=", "np", ".", "flatnonzero", "(", "sampling_mask", ")", "\n", "if", "len", "(", "valid_centers", ")", ">", "0", ":", "\n", "            ", "selected_center", "=", "np", ".", "random", ".", "choice", "(", "valid_centers", ",", "1", ",", "replace", "=", "False", ")", "\n", "center", "=", "np", ".", "asarray", "(", "np", ".", "unravel_index", "(", "selected_center", "[", "0", "]", ",", "label", ".", "shape", ")", ",", "dtype", "=", "np", ".", "uint16", ")", ".", "T", "\n", "", "else", ":", "# for no candidate voxel (sample from center)", "\n", "            ", "center", "=", "[", "k", "//", "2", "for", "k", "in", "weight", ".", "shape", "]", "\n", "# extract data and label volume around the selected center", "\n", "", "data_segment", ",", "label_segment", "=", "self", ".", "__extract_data_label_segment", "(", "data", ",", "label", ",", "center", ")", "\n", "return", "data_segment", ",", "label_segment", "\n", "\n"]], "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.dataloader.DatasetMMEP3d.__get_sampling_mask": [[107, 119], ["numpy.zeros_like", "int", "int", "int", "int", "int", "int", "numpy.floor", "numpy.floor", "numpy.floor", "numpy.floor", "numpy.floor", "numpy.floor"], "methods", ["None"], ["", "def", "__get_sampling_mask", "(", "self", ",", "weight_mask", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Sampling mask to ensure extracted segment stays inside the input region\n        and covers the desired regions only.\n        \"\"\"", "\n", "sampling_mask", "=", "np", ".", "zeros_like", "(", "weight_mask", ")", "\n", "sampling_mask", "[", "\n", "int", "(", "np", ".", "floor", "(", "self", ".", "label_shape", "[", "0", "]", "/", "2", ")", ")", ":", "int", "(", "sampling_mask", ".", "shape", "[", "0", "]", "-", "np", ".", "floor", "(", "self", ".", "label_shape", "[", "0", "]", "/", "2", ")", ")", ",", "\n", "int", "(", "np", ".", "floor", "(", "self", ".", "label_shape", "[", "1", "]", "/", "2", ")", ")", ":", "int", "(", "sampling_mask", ".", "shape", "[", "1", "]", "-", "np", ".", "floor", "(", "self", ".", "label_shape", "[", "1", "]", "/", "2", ")", ")", ",", "\n", "int", "(", "np", ".", "floor", "(", "self", ".", "label_shape", "[", "2", "]", "/", "2", ")", ")", ":", "int", "(", "sampling_mask", ".", "shape", "[", "2", "]", "-", "np", ".", "floor", "(", "self", ".", "label_shape", "[", "2", "]", "/", "2", ")", ")", "\n", "]", "=", "1", "\n", "return", "sampling_mask", "*", "weight_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.dataloader.DatasetMMEP3d.__extract_data_label_segment": [[120, 134], ["dataloader.DatasetMMEP3d.__extract_segment_from_volume", "dataloader.DatasetMMEP3d.__extract_segment_from_volume", "numpy.uint8"], "methods", ["home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.dataloader.DatasetMMEP3d.__extract_segment_from_volume", "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.dataloader.DatasetMMEP3d.__extract_segment_from_volume"], ["", "def", "__extract_data_label_segment", "(", "self", ",", "data_array", ",", "label_array", ",", "center", ")", ":", "\n", "        ", "\"\"\"\n        return a (data, label) pair of desired shape, centered around the\n        provided `center` pixel.\n        *NOTE*: weight maps not used yet. Returned label should be of type uint8.\n        I tried uint16 and it yielded an error of `unsupported data type`.\n        Format of input arguments is as follows:\n        data_array: (C, H, W, D)\n        label_array: (H, W, D)\n        center = (H, W, D)\n        \"\"\"", "\n", "data", "=", "self", ".", "__extract_segment_from_volume", "(", "data_array", ",", "self", ".", "data_shape", ",", "center", ",", "has_channels", "=", "True", ")", "\n", "label", "=", "self", ".", "__extract_segment_from_volume", "(", "label_array", ",", "self", ".", "label_shape", ",", "center", ",", "has_channels", "=", "False", ")", "\n", "return", "data", ",", "np", ".", "uint8", "(", "label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.dataloader.DatasetMMEP3d.__extract_segment_from_volume": [[135, 166], ["all", "numpy.zeros", "numpy.zeros().tolist", "range", "numpy.pad", "len", "int", "int", "int", "int", "range", "numpy.zeros", "max", "min", "numpy.abs", "range", "numpy.ix_", "range", "len", "min", "max", "len", "numpy.floor", "numpy.ceil", "len", "numpy.floor", "numpy.floor", "numpy.floor"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "__extract_segment_from_volume", "(", "volume", ",", "segment_shape", ",", "center", ",", "has_channels", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        This module extracts a segment centered around `center` and of\n        `segment_shape` from `volume`.\n        if center is provided such that segment-to-extract has regions outside\n        the input volume, appropriate zero-padding will be done to compensate.\n        \"\"\"", "\n", "offset", "=", "1", "if", "has_channels", "else", "0", "# offset to ignore indexing channel dimension", "\n", "assert", "all", "(", "[", "0", "<=", "center", "[", "i", "]", "<", "volume", ".", "shape", "[", "i", "+", "offset", "]", "for", "i", "in", "range", "(", "len", "(", "center", ")", ")", "]", ")", "\n", "# empty arrays to fill later.", "\n", "indices_data", "=", "np", ".", "zeros", "(", "(", "len", "(", "segment_shape", ")", "+", "offset", ",", "2", ")", ",", "dtype", "=", "np", ".", "uint16", ")", "\n", "paddings_data", "=", "np", ".", "zeros", "(", "(", "len", "(", "segment_shape", ")", "+", "offset", ",", "2", ")", ",", "dtype", "=", "np", ".", "uint16", ")", ".", "tolist", "(", ")", "\n", "\n", "if", "has_channels", ":", "\n", "            ", "indices_data", "[", "0", "]", "=", "[", "0", ",", "volume", ".", "shape", "[", "0", "]", "]", "# take all along channel axis", "\n", "paddings_data", "[", "0", "]", "=", "[", "0", ",", "0", "]", "# no padding along channel axis", "\n", "# calculate left and right bounds for indices, and corresponding padding", "\n", "# I usually comment out PADDING for code testing.", "\n", "", "for", "i", "in", "range", "(", "len", "(", "segment_shape", ")", ")", ":", "\n", "            ", "indices_data", "[", "i", "+", "offset", ",", "0", "]", "=", "int", "(", "max", "(", "0", ",", "center", "[", "i", "]", "-", "np", ".", "floor", "(", "segment_shape", "[", "i", "]", "/", "2", ")", ")", ")", "\n", "indices_data", "[", "i", "+", "offset", ",", "1", "]", "=", "int", "(", "min", "(", "volume", ".", "shape", "[", "i", "+", "offset", "]", ",", "center", "[", "i", "]", "-", "np", ".", "floor", "(", "segment_shape", "[", "i", "]", "/", "2", ")", "\n", "+", "segment_shape", "[", "i", "]", ")", ")", "\n", "paddings_data", "[", "i", "+", "offset", "]", "[", "0", "]", "=", "int", "(", "np", ".", "abs", "(", "min", "(", "0", ",", "center", "[", "i", "]", "-", "np", ".", "floor", "(", "segment_shape", "[", "i", "]", "/", "2", ")", ")", ")", ")", "\n", "paddings_data", "[", "i", "+", "offset", "]", "[", "1", "]", "=", "int", "(", "max", "(", "volume", ".", "shape", "[", "i", "+", "offset", "]", ",", "\n", "np", ".", "ceil", "(", "center", "[", "i", "]", "-", "np", ".", "floor", "(", "segment_shape", "[", "i", "]", "/", "2", ")", "+", "\n", "segment_shape", "[", "i", "]", ")", ")", "-", "volume", ".", "shape", "[", "i", "+", "offset", "]", ")", "\n", "", "indices_list_data", "=", "[", "range", "(", "indices_data", "[", "i", "]", "[", "0", "]", ",", "indices_data", "[", "i", "]", "[", "1", "]", ")", "for", "i", "in", "range", "(", "indices_data", ".", "shape", "[", "0", "]", ")", "]", "\n", "volume_to_return", "=", "volume", "[", "np", ".", "ix_", "(", "*", "indices_list_data", ")", "]", "\n", "volume_to_return", "=", "np", ".", "pad", "(", "volume_to_return", ",", "pad_width", "=", "paddings_data", ",", "mode", "=", "'constant'", ",", "constant_values", "=", "0", ")", "\n", "return", "volume_to_return", "\n", "", "", ""]], "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.losses.XEntropyPlusDiceLoss.__init__": [[9, 14], ["torch.nn.Module.__init__", "losses.DiceLoss", "losses.XEntropyLoss", "print"], "methods", ["home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.losses.DiceLoss.__init__"], ["def", "__init__", "(", "self", ",", "num_classes", "=", "5", ",", "reduction_dims", "=", "(", "0", ",", "2", ",", "3", ",", "4", ")", ")", ":", "\n", "        ", "super", "(", "XEntropyPlusDiceLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dice_loss", "=", "DiceLoss", "(", "num_classes", "=", "num_classes", ",", "reduction_dims", "=", "reduction_dims", ")", "\n", "self", ".", "ce_loss", "=", "XEntropyLoss", "(", ")", "\n", "print", "(", "f\"Instantiated: {self.__class__.__name__}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.losses.XEntropyPlusDiceLoss.forward": [[15, 23], ["losses.XEntropyPlusDiceLoss.dice_loss", "losses.XEntropyPlusDiceLoss.ce_loss"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "y_pred", ",", "y_true", ")", ":", "\n", "        ", "\"\"\"\n        y_pred: (B, C, D, H, W), without softmax\n        y_true: (B, D, H, W), dtype='long'\n        \"\"\"", "\n", "dice_loss", "=", "self", ".", "dice_loss", "(", "y_pred", ",", "y_true", ")", "\n", "ce_loss", "=", "self", ".", "ce_loss", "(", "y_pred", ",", "y_true", ")", "\n", "return", "dice_loss", "+", "ce_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.losses.XEntropyLoss.__init__": [[28, 31], ["torch.nn.Module.__init__", "torch.nn.modules.loss.CrossEntropyLoss", "torch.nn.modules.loss.CrossEntropyLoss"], "methods", ["home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.losses.DiceLoss.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "XEntropyLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "crossentropy", "=", "nn", ".", "modules", ".", "loss", ".", "CrossEntropyLoss", "(", "reduction", "=", "'mean'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.losses.XEntropyLoss.forward": [[32, 38], ["losses.XEntropyLoss.crossentropy"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "y_pred", ",", "y_true", ")", ":", "\n", "        ", "\"\"\"\n        y_pred: (B, C, D, H, W), without softmax\n        y_true: (B, D, H, W), dtype='long'\n        \"\"\"", "\n", "return", "self", ".", "crossentropy", "(", "y_pred", ",", "y_true", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.losses.DiceLoss.__init__": [[43, 48], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.losses.DiceLoss.__init__"], ["def", "__init__", "(", "self", ",", "num_classes", "=", "5", ",", "reduction_dims", "=", "(", "0", ",", "2", ",", "3", ",", "4", ")", ")", ":", "\n", "        ", "super", "(", "DiceLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "_REDUCTION_DIMS", "=", "reduction_dims", "\n", "self", ".", "_EPS", "=", "1e-7", "\n", "\n"]], "home.repos.pwc.inspect_result.clinical-and-translational-imaging-lab_brats-e1d3.utils.losses.DiceLoss.forward": [[49, 60], ["torch.one_hot().permute", "torch.one_hot().permute", "torch.softmax", "torch.softmax", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.one_hot", "torch.one_hot"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "y_pred", ",", "y_true", ")", ":", "\n", "        ", "\"\"\"\n        y_pred: (B, C, D, H, W), without softmax\n        y_true: (B, D, H, W), dtype='long'\n        \"\"\"", "\n", "y_true", "=", "F", ".", "one_hot", "(", "y_true", ",", "num_classes", "=", "self", ".", "num_classes", ")", ".", "permute", "(", "0", ",", "4", ",", "1", ",", "2", ",", "3", ")", "\n", "y_pred", "=", "F", ".", "softmax", "(", "y_pred", ",", "dim", "=", "1", ")", "# activate prediction", "\n", "\n", "numerator", "=", "2.0", "*", "torch", ".", "sum", "(", "y_true", "*", "y_pred", ",", "dim", "=", "self", ".", "_REDUCTION_DIMS", ")", "\n", "denominator", "=", "torch", ".", "sum", "(", "y_true", ",", "dim", "=", "self", ".", "_REDUCTION_DIMS", ")", "+", "torch", ".", "sum", "(", "y_pred", ",", "dim", "=", "self", ".", "_REDUCTION_DIMS", ")", "\n", "return", "-", "torch", ".", "mean", "(", "(", "numerator", "+", "self", ".", "_EPS", ")", "/", "(", "denominator", "+", "self", ".", "_EPS", ")", ")", "\n", "", "", ""]]}