{"home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.src.run_nlpcc.getArgs": [[31, 65], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "print", "vars"], "function", ["None"], ["def", "getArgs", "(", ")", ":", "\n", "    ", "parse", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parse", ".", "add_argument", "(", "'--model'", ",", "'-m'", ",", "type", "=", "str", ",", "required", "=", "True", ",", "help", "=", "'model file name in .model/'", ")", "\n", "parse", ".", "add_argument", "(", "'--model_param'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "'model parameters, in form of str(json)'", ")", "\n", "parse", ".", "add_argument", "(", "'--w2v_path'", ",", "type", "=", "str", ",", "help", "=", "'word2vec file path, google w2v form'", ",", "default", "=", "'../data/vectorsw300l20.all'", ")", "\n", "parse", ".", "add_argument", "(", "'--train'", ",", "type", "=", "str", ",", "required", "=", "True", ",", "help", "=", "'train data path'", ")", "\n", "parse", ".", "add_argument", "(", "'--test'", ",", "type", "=", "str", ",", "required", "=", "True", ",", "help", "=", "'test data path'", ")", "\n", "\n", "parse", ".", "add_argument", "(", "'--model_path'", ",", "type", "=", "str", ",", "required", "=", "True", ",", "help", "=", "'model files path'", ")", "\n", "parse", ".", "add_argument", "(", "'--output_path'", ",", "type", "=", "str", ",", "required", "=", "True", ",", "help", "=", "'output files path'", ")", "\n", "parse", ".", "add_argument", "(", "'--log_path'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "'model files path'", ")", "\n", "\n", "parse", ".", "add_argument", "(", "'--train_base_func'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "'train data basic deal function name, a member of CPreprocess, default is lambda x : x'", ")", "\n", "parse", ".", "add_argument", "(", "'--train_deal_func'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "'train data deal function name, a member of CPreprocess, default is lambda x : x'", ")", "\n", "parse", ".", "add_argument", "(", "'--train_pad_func'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "'train data pad function name, a member of CPreprocess, default is lambda x : x'", ")", "\n", "parse", ".", "add_argument", "(", "'--test_base_func'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "'test form, default is the same as train form, basic deal, usually same as train'", ")", "\n", "parse", ".", "add_argument", "(", "'--test_deal_func'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "'test form, default is the same as train form'", ")", "\n", "parse", ".", "add_argument", "(", "'--test_pad_func'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "'test form, default is the same as train form'", ")", "\n", "\n", "parse", ".", "add_argument", "(", "'--need_train'", ",", "type", "=", "str", ",", "default", "=", "'True'", ",", "help", "=", "'need to train'", ")", "\n", "parse", ".", "add_argument", "(", "'--need_test'", ",", "type", "=", "str", ",", "default", "=", "'True'", ",", "help", "=", "'need to test'", ")", "\n", "\n", "parse", ".", "add_argument", "(", "'--recover_func'", ",", "type", "=", "str", ",", "default", "=", "'recover_kbqa'", ",", "help", "=", "'recover function, combine NN results to raw datas, for evaluate and output.'", ")", "\n", "parse", ".", "add_argument", "(", "'--gpu_fraction'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'n=gpu_fraction, then the memory will be 1/n of all. dafault=1'", ")", "\n", "parse", ".", "add_argument", "(", "'--train_data_size'", ",", "type", "=", "int", ",", "default", "=", "8000", ",", "help", "=", "'train data size'", ")", "\n", "parse", ".", "add_argument", "(", "'--train_batch_size'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'train batch size'", ")", "\n", "parse", ".", "add_argument", "(", "'--test_batch_size'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'test batch size'", ")", "\n", "parse", ".", "add_argument", "(", "'--train_epoch_num'", ",", "type", "=", "int", ",", "default", "=", "25", ",", "help", "=", "'train epoch num'", ")", "\n", "parse", ".", "add_argument", "(", "'--start_epoch_num'", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "help", "=", "'train epoch num'", ")", "\n", "\n", "args_ret", "=", "parse", ".", "parse_args", "(", ")", "\n", "print", "(", "args_ret", ")", "\n", "\n", "return", "vars", "(", "args_ret", ")", "\n", "", "if", "__name__", "==", "'__main__'", ":", "\n"]], "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.src.recover_datas.recover_kbqa": [[9, 50], ["int", "list", "sum", "len", "len", "zip", "sorted", "dt[].append", "len", "enumerate"], "function", ["None"], ["def", "recover_kbqa", "(", "data", ",", "predication", ")", ":", "\n", "    ", "pre_key", "=", "'pres'", "\n", "if", "not", "pre_key", "in", "data", "[", "0", "]", ":", "\n", "        ", "pre_key", "=", "'pres_0'", "\n", "", "t", "=", "int", "(", "sum", "(", "[", "len", "(", "t", "[", "pre_key", "]", ")", "for", "t", "in", "data", "]", ")", ")", "\n", "predication", "=", "list", "(", "predication", "[", ":", "t", "]", ")", "\n", "# assert len(predication) == sum([len(t['pres']) for t in data])", "\n", "# predication = predication[:sum([len(t['sents']) for t in data])]", "\n", "\n", "index", "=", "-", "1", "\n", "scores", "=", "{", "'len'", ":", "len", "(", "data", ")", ",", "'len_pre'", ":", "len", "(", "predication", ")", "}", "\n", "other_keys", "=", "[", "'r@1'", ",", "'r@2'", ",", "'r@3'", ",", "'r@5'", ",", "'r@10'", ",", "'MRR'", "]", "\n", "for", "k", "in", "other_keys", ":", "\n", "        ", "scores", "[", "k", "]", "=", "0.", "\n", "\n", "", "for", "dt", "in", "data", ":", "\n", "        ", "dt", "[", "'scores'", "]", "=", "[", "]", "\n", "for", "pre", "in", "dt", "[", "pre_key", "]", ":", "\n", "            ", "index", "+=", "1", "\n", "dt", "[", "'scores'", "]", ".", "append", "(", "predication", "[", "index", "]", "[", "0", "]", ")", "\n", "", "zip_scores", "=", "zip", "(", "dt", "[", "'scores'", "]", ",", "dt", "[", "'labels'", "]", ")", "\n", "zip_scores", "=", "sorted", "(", "zip_scores", ",", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ",", "reverse", "=", "True", ")", "\n", "head_id", "=", "[", "i", "for", "i", ",", "t", "in", "enumerate", "(", "zip_scores", ")", "if", "t", "[", "1", "]", "==", "1", "]", "[", "0", "]", "\n", "\n", "\"\"\"   \u66f4\u65b0\u8bc4\u4ef7\u6307\u6807   \"\"\"", "\n", "if", "head_id", "<", "10", ":", "\n", "            ", "scores", "[", "'r@10'", "]", "+=", "1", "\n", "", "if", "head_id", "<", "5", ":", "\n", "            ", "scores", "[", "'r@5'", "]", "+=", "1", "\n", "", "if", "head_id", "<", "3", ":", "\n", "            ", "scores", "[", "'r@3'", "]", "+=", "1", "\n", "", "if", "head_id", "<", "2", ":", "\n", "            ", "scores", "[", "'r@2'", "]", "+=", "1", "\n", "", "if", "head_id", "<", "1", ":", "\n", "            ", "scores", "[", "'r@1'", "]", "+=", "1", "\n", "", "scores", "[", "'MRR'", "]", "+=", "1.", "/", "(", "head_id", "+", "1", ")", "\n", "\n", "", "for", "k", "in", "other_keys", ":", "\n", "        ", "scores", "[", "k", "]", "/=", "scores", "[", "'len'", "]", "\n", "\n", "", "return", "data", ",", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.src.recover_datas.recover_dbqa": [[51, 89], ["len", "sum", "len", "len", "zip", "sorted", "dt[].append", "sum", "len", "len", "enumerate", "enumerate"], "function", ["None"], ["", "def", "recover_dbqa", "(", "data", ",", "predication", ")", ":", "\n", "    ", "pre_key", "=", "'sents'", "\n", "if", "not", "pre_key", "in", "data", "[", "0", "]", ":", "\n", "        ", "pre_key", "=", "'sents_0'", "\n", "", "assert", "len", "(", "predication", ")", "==", "sum", "(", "[", "len", "(", "t", "[", "pre_key", "]", ")", "for", "t", "in", "data", "]", ")", "\n", "\n", "index", "=", "-", "1", "\n", "scores", "=", "{", "'len'", ":", "len", "(", "data", ")", ",", "'len_sent'", ":", "len", "(", "predication", ")", "}", "\n", "other_keys", "=", "[", "'r@1'", ",", "'r@2'", ",", "'r@3'", ",", "'r@5'", ",", "'MRR'", ",", "'MAP'", "]", "\n", "for", "k", "in", "other_keys", ":", "\n", "        ", "scores", "[", "k", "]", "=", "0.", "\n", "\n", "", "for", "dt", "in", "data", ":", "\n", "        ", "dt", "[", "'scores'", "]", "=", "[", "]", "\n", "for", "pre", "in", "dt", "[", "pre_key", "]", ":", "\n", "            ", "index", "+=", "1", "\n", "dt", "[", "'scores'", "]", ".", "append", "(", "predication", "[", "index", "]", "[", "0", "]", ")", "\n", "", "zip_scores", "=", "zip", "(", "dt", "[", "'scores'", "]", ",", "dt", "[", "'labels'", "]", ")", "\n", "zip_scores", "=", "sorted", "(", "zip_scores", ",", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ",", "reverse", "=", "True", ")", "\n", "head_ids", "=", "[", "i", "for", "i", ",", "t", "in", "enumerate", "(", "zip_scores", ")", "if", "t", "[", "1", "]", "==", "1", "]", "\n", "head_id", "=", "head_ids", "[", "0", "]", "\n", "\n", "\"\"\"   \u66f4\u65b0\u8bc4\u4ef7\u6307\u6807   \"\"\"", "\n", "if", "head_id", "<", "5", ":", "\n", "            ", "scores", "[", "'r@5'", "]", "+=", "1", "\n", "", "if", "head_id", "<", "3", ":", "\n", "            ", "scores", "[", "'r@3'", "]", "+=", "1", "\n", "", "if", "head_id", "<", "2", ":", "\n", "            ", "scores", "[", "'r@2'", "]", "+=", "1", "\n", "", "if", "head_id", "<", "1", ":", "\n", "            ", "scores", "[", "'r@1'", "]", "+=", "1", "\n", "", "scores", "[", "'MRR'", "]", "+=", "1.", "/", "(", "head_id", "+", "1", ")", "\n", "scores", "[", "'MAP'", "]", "+=", "sum", "(", "[", "(", "i", "+", "1.", ")", "/", "(", "t", "+", "1.", ")", "for", "i", ",", "t", "in", "enumerate", "(", "head_ids", ")", "]", ")", "/", "len", "(", "head_ids", ")", "\n", "\n", "", "for", "k", "in", "other_keys", ":", "\n", "        ", "scores", "[", "k", "]", "/=", "scores", "[", "'len'", "]", "\n", "\n", "", "return", "data", ",", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.src.preprocess.CPreprocess.__init__": [[21, 34], ["basic.W2V", "preprocess.CPreprocess.__get_seed", "preprocess.CPreprocess.w2v.addWord", "numpy.random.random", "preprocess.CPreprocess.w2v.getVecLen"], "methods", ["home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.src.preprocess.CPreprocess.__get_seed", "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.src.basic.W2V.addWord", "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.src.basic.W2V.getVecLen"], ["    ", "def", "__init__", "(", "self", ",", "w2v_path", ")", ":", "\n", "        ", "self", ".", "w2v", "=", "W2V", "(", "w2v_path", ")", "\n", "self", ".", "random_seed", "=", "42", "\n", "\n", "self", ".", "__get_seed", "(", "np", ".", "random", ".", "seed", ")", "\n", "vt", "=", "np", ".", "random", ".", "random", "(", "self", ".", "w2v", ".", "getVecLen", "(", ")", ")", "*", "2.", "-", "1.", "\n", "self", ".", "w2v", ".", "addWord", "(", "'<Entity>'", ",", "vt", ")", "\n", "\n", "# \u53ef\u4ee5\u7528\u6765\u5b58\u4e00\u4e9b\u65e5\u5fd7\u7c7b\u4fe1\u606f", "\n", "self", ".", "log_info", "=", "{", "}", "\n", "\n", "# \u53ef\u4ee5\u7528\u6765\u5b58\u4e00\u4e9b\u4fe1\u606f\uff0c\u4e0d\u8fc7\u8c03\u7528\u65f6\u6709\u8fc7\u65f6\u7684\u5371\u9669~", "\n", "self", ".", "pad_info", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.src.preprocess.CPreprocess.__get_seed": [[35, 41], ["func"], "methods", ["None"], ["", "def", "__get_seed", "(", "self", ",", "func", "=", "None", ")", ":", "\n", "        ", "t", "=", "self", ".", "random_seed", "\n", "self", ".", "random_seed", "+=", "1", "\n", "if", "not", "func", "is", "None", ":", "\n", "            ", "func", "(", "t", ")", "\n", "", "return", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.src.preprocess.CPreprocess.get_w2v_matrix": [[42, 44], ["preprocess.CPreprocess.w2v.getMatrix"], "methods", ["home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.src.basic.W2V.getMatrix"], ["", "def", "get_w2v_matrix", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "w2v", ".", "getMatrix", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.src.preprocess.CPreprocess.report": [[45, 49], ["print", "json.dumps"], "methods", ["None"], ["", "def", "report", "(", "self", ",", "verbose", "=", "False", ")", ":", "\n", "        ", "if", "verbose", ":", "\n", "            ", "print", "(", "json", ".", "dumps", "(", "self", ".", "log_info", ",", "indent", "=", "2", ")", ")", "\n", "", "return", "self", ".", "log_info", "\n", "\n"]], "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.src.preprocess.CPreprocess.deal_nlpcckbqa_word_base": [[51, 69], ["get_ids", "get_ids", "preprocess.CPreprocess.w2v.getWordID"], "methods", ["home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.src.basic.W2V.getWordID"], ["def", "deal_nlpcckbqa_word_base", "(", "self", ",", "x", ")", ":", "\n", "        ", "output", "=", "{", "}", "\n", "get_ids", "=", "lambda", "x", ":", "[", "self", ".", "w2v", ".", "getWordID", "(", "t", ")", "for", "t", "in", "x", "]", "\n", "\n", "output", "[", "'qu_ids'", "]", "=", "get_ids", "(", "x", "[", "'qu'", "]", ")", "\n", "output", "[", "'pre_ids'", "]", "=", "[", "get_ids", "(", "t", ")", "for", "t", "in", "x", "[", "'pres'", "]", "]", "\n", "output", "[", "'pre_labels'", "]", "=", "x", "[", "'labels'", "]", "\n", "\n", "\"\"\"\n        print (output['qu_ids'])\n        print (output['pre_ids'])\n        print (output['pre_labels'])\n        [155840, 198, 690, 1, 31, 3, 1457]\n        [[3879], [40353], [29904], [70, 36], [177], [508, 54], [299, 175], [1782], [8], [31], [388, 1555], [51, 54], [4444], [123], [245, 101], [205, 54], [1282], [4119, 225]]\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0]\n        \"\"\"", "\n", "\n", "return", "output", "\n", "", "def", "deal_nlpcckbqa_train", "(", "self", ",", "x_base", ",", "num", "=", "5", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.src.preprocess.CPreprocess.deal_nlpcckbqa_train": [[69, 86], ["len", "preprocess.CPreprocess.__get_seed", "list", "random.shuffle", "range", "range"], "methods", ["home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.src.preprocess.CPreprocess.__get_seed"], ["", "def", "deal_nlpcckbqa_train", "(", "self", ",", "x_base", ",", "num", "=", "5", ")", ":", "\n", "        ", "pre_len", "=", "len", "(", "x_base", "[", "'pre_ids'", "]", ")", "\n", "\n", "self", ".", "__get_seed", "(", "random", ".", "seed", ")", "\n", "index", "=", "list", "(", "range", "(", "pre_len", ")", ")", "\n", "random", ".", "shuffle", "(", "index", ")", "\n", "\n", "true_id", "=", "[", "i", "for", "i", "in", "range", "(", "pre_len", ")", "if", "x_base", "[", "'pre_labels'", "]", "[", "i", "]", "==", "1", "]", "[", "0", "]", "\n", "if", "not", "true_id", "in", "index", "[", ":", "num", "]", ":", "\n", "            ", "index", "=", "[", "true_id", "]", "+", "index", "\n", "", "index", "=", "index", "[", ":", "num", "]", "\n", "output", "=", "[", "{", "'input'", ":", "{", "'qu'", ":", "x_base", "[", "'qu_ids'", "]", ",", "\n", "'pre'", ":", "x_base", "[", "'pre_ids'", "]", "[", "idt", "]", "}", ",", "\n", "'output'", ":", "{", "'label'", ":", "x_base", "[", "'pre_labels'", "]", "[", "idt", "]", "}", "}", "\n", "for", "idt", "in", "index", "]", "\n", "\n", "return", "output", "\n", "", "def", "deal_nlpcckbqa_test", "(", "self", ",", "x_base", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.src.preprocess.CPreprocess.deal_nlpcckbqa_test": [[86, 93], ["range", "len"], "methods", ["None"], ["", "def", "deal_nlpcckbqa_test", "(", "self", ",", "x_base", ")", ":", "\n", "        ", "output", "=", "[", "{", "'input'", ":", "{", "'qu'", ":", "x_base", "[", "'qu_ids'", "]", ",", "\n", "'pre'", ":", "x_base", "[", "'pre_ids'", "]", "[", "idt", "]", "}", ",", "\n", "'output'", ":", "{", "'label'", ":", "x_base", "[", "'pre_labels'", "]", "[", "idt", "]", "}", "}", "\n", "for", "idt", "in", "range", "(", "len", "(", "x_base", "[", "'pre_ids'", "]", ")", ")", "]", "\n", "\n", "return", "output", "\n", "", "def", "padding_nlpcckbqa_word", "(", "self", ",", "xs", ",", "len_qu", "=", "50", ",", "len_pre", "=", "20", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.src.preprocess.CPreprocess.padding_nlpcckbqa_word": [[93, 118], ["outputs[].keys", "inputs[].keys", "numpy.array", "keras.preprocessing.sequence.pad_sequences", "keras.preprocessing.sequence.pad_sequences", "numpy.array", "numpy.array", "list", "enumerate", "numpy.array", "numpy.concatenate"], "methods", ["None"], ["", "def", "padding_nlpcckbqa_word", "(", "self", ",", "xs", ",", "len_qu", "=", "50", ",", "len_pre", "=", "20", ")", ":", "\n", "        ", "\"\"\"   \u8fd4\u56de\u5b57\u5178\u6784\u5efa   \"\"\"", "\n", "outputs", "=", "[", "t", "[", "'output'", "]", "for", "t", "in", "xs", "]", "\n", "inputs", "=", "[", "t", "[", "'input'", "]", "for", "t", "in", "xs", "]", "\n", "output_keys", "=", "outputs", "[", "0", "]", ".", "keys", "(", ")", "\n", "input_keys", "=", "inputs", "[", "0", "]", ".", "keys", "(", ")", "\n", "outputs", "=", "{", "key", ":", "np", ".", "array", "(", "[", "t", "[", "key", "]", "for", "t", "in", "outputs", "]", ")", "\n", "for", "key", "in", "output_keys", "}", "\n", "inputs", "=", "{", "key", ":", "np", ".", "array", "(", "[", "t", "[", "key", "]", "for", "t", "in", "inputs", "]", ")", "\n", "for", "key", "in", "input_keys", "}", "\n", "\n", "\"\"\"   padding   \"\"\"", "\n", "head_words", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "0", ",", "0", "]", ")", "\n", "for", "key", "in", "[", "'qu'", ",", "'pre'", "]", ":", "\n", "            ", "inputs", "[", "key", "]", "=", "list", "(", "inputs", "[", "key", "]", ")", "\n", "matrix", "=", "inputs", "[", "key", "]", "\n", "for", "i", ",", "line", "in", "enumerate", "(", "matrix", ")", ":", "\n", "                ", "line", "=", "np", ".", "array", "(", "line", ")", "\n", "t", "=", "np", ".", "concatenate", "(", "(", "head_words", ",", "line", ")", ")", "\n", "matrix", "[", "i", "]", "=", "t", "\n", "\n", "", "", "inputs", "[", "'qu'", "]", "=", "pad_sequences", "(", "inputs", "[", "'qu'", "]", ",", "maxlen", "=", "len_qu", ",", "padding", "=", "'post'", ",", "truncating", "=", "'post'", ")", "\n", "inputs", "[", "'pre'", "]", "=", "pad_sequences", "(", "inputs", "[", "'pre'", "]", ",", "maxlen", "=", "len_pre", ",", "padding", "=", "'post'", ",", "truncating", "=", "'post'", ")", "\n", "\n", "return", "inputs", ",", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.src.preprocess.CPreprocess.deal_lattice_base": [[120, 211], ["enumerate", "min", "max", "range", "p_head_dict[].append", "p_tail_dict[].append", "t.append"], "methods", ["None"], ["def", "deal_lattice_base", "(", "self", ",", "word_seq", ",", "max_len", ")", ":", "\n", "# print(max_len, word_seq)", "\n", "        ", "\"\"\"\n        \u8fd9\u91cc\u7684base\uff0c\u53ea\u505a\u6700\u57fa\u7840\u7684\u5904\u7406\n            (\u8f6cid\uff0c\u7edf\u8ba1\u6bcf\u4e2a\u8282\u70b9\u7684n-gram\u5217\u8868\uff0c\u751f\u6210n-gram\u7d22\u5f15)\n        \u4e0d\u505apadding\uff0c\u4e0d\u505a\u5206\u5806\uff0c\u4e0d\u505a\u91cd\u6392\u5217\n        \"\"\"", "\n", "\n", "\"\"\"   \u5efa\u7acb\u57fa\u4e8e\u4f4d\u7f6e\u7684\u7d22\u5f15   \"\"\"", "\n", "p_head_dict", "=", "{", "}", "\n", "p_tail_dict", "=", "{", "}", "\n", "for", "t", "in", "word_seq", ":", "\n", "            ", "if", "not", "t", "[", "1", "]", "in", "p_head_dict", ":", "\n", "                ", "p_head_dict", "[", "t", "[", "1", "]", "]", "=", "[", "]", "\n", "", "if", "not", "t", "[", "2", "]", "in", "p_tail_dict", ":", "\n", "                ", "p_tail_dict", "[", "t", "[", "2", "]", "]", "=", "[", "]", "\n", "", "p_head_dict", "[", "t", "[", "1", "]", "]", ".", "append", "(", "t", ")", "\n", "p_tail_dict", "[", "t", "[", "2", "]", "]", ".", "append", "(", "t", ")", "\n", "# \u5b57\u5178\uff0c\u50a8\u5b58\u4e86\u4ee5 k\uff08id\uff09 \u4e3a\u5f00\u5934\u6216\u7ed3\u5c3e\u7684token list", "\n", "# \u9884\u5904\u7406\u4fdd\u8bc1\u4e86\uff0c\u6bcf\u4e2a\u5f00\u5934\u4f4d\u7f6e\u90fd\u6709\u8bcd\u7ed3\u5c3e\uff0c\u6bcf\u4e2a\u7ed3\u5c3e\u4f4d\u7f6e\u90fd\u6709\u8bcd\u5f00\u5934~", "\n", "\n", "", "\"\"\"   idseq, \u4e3a\u539f\u59cb\u5e8f\u5217   \"\"\"", "\n", "# \u6700\u5f00\u59cb\u8981\u8865\u4e00\u4e2a\u96f6\uff0c\u56e0\u4e3a\u8981\u4fdd\u8bc1 idseq[0] \u662fpad\uff0c\u8fd9\u4e2a\u7279\u6027\u540e\u9762\u4f1a\u5229\u7528~", "\n", "idseq", "=", "(", "[", "0", "]", "+", "[", "t", "[", "0", "]", "for", "t", "in", "word_seq", "]", ")", "[", ":", "max_len", "]", "\n", "for", "i", ",", "t", "in", "enumerate", "(", "word_seq", ")", ":", "\n", "            ", "pt", "=", "i", "+", "1", "\n", "t", ".", "append", "(", "pt", ")", "\n", "if", "pt", "<", "max_len", ":", "\n", "                ", "assert", "idseq", "[", "pt", "]", "==", "t", "[", "0", "]", "\n", "", "else", ":", "\n", "# \u5982\u679c\u78b0\u5de7\u8d85\u957f\u4e86\uff0c\u8fd9\u4e2a\u4f4d\u7f6e\u4ee3\u8868\u7684\u8bcd\u4e00\u5f8b\u89c6\u4e3apad\uff0c\u8fd9\u4e2a\u8bcd\u5728\u539f\u5e8f\u5217\u4e2d\u7684\u6240\u5728\u4f4d\u7f6e\u4e5f\u4e00\u5f8b\u89c6\u4e3a0", "\n", "# \u4e0d\u8fc7\u8fd9\u4e2a\u4e3b\u8981\u662f\u4e3a p_head_dict & p_tail_dict \u4e2d\u7684token\u670d\u52a1\u7684\u5427~\u903c\u8fd1word_seq\u662f\u4f1a\u88ab\u526a\u88c1\u7684~", "\n", "\n", "                ", "t", "[", "0", "]", "=", "0", "# \u8fd9\u4e2a\u662f\u8fd9\u4e2a\u8bcd\u7684id", "\n", "t", "[", "-", "1", "]", "=", "0", "# \u8fd9\u4e2a\u662f\u8fd9\u4e2a\u8bcd\u5bf9\u5e94\u5728idseq\u4e2d\u7684\u4f4d\u7f6e~", "\n", "# \u526a\u88c1 word_seq\uff0c\u8003\u8651\u5230\u6211\u4eec\u80fd\u591f\u5904\u7406\u7684token\u53ea\u6709\u5728idseq\u4e2d\u6709\u8868\u793a\uff0c\u4e14\u4e2d\u5fc3\u8bcd\u4e0d\u662fpad\u7684\u4f4d\u7f6e~", "\n", "", "", "word_seq", "=", "[", "t", "for", "t", "in", "word_seq", "if", "not", "t", "[", "-", "1", "]", "==", "0", "]", "\n", "\"\"\"\n        \u4e8b\u5b9e\u4e0a\u53ea\u80fd\u5904\u7406max_len-1\u4e2atoken~\n        idseq:      [0, 155841, 199, 102, 691, 204, 2, 213, 71, 9, 158, 1170, 4, 859, 5506, 49]\n        word_seq:   [[155841, 0, 1, 1], [199, 1, 2, 2], [102, 2, 3, 3], [691, 2, 4, 4], \n            [204, 3, 4, 5], [2, 4, 5, 6], [213, 5, 6, 7], [71, 5, 7, 8], [9, 5, 8, 9], \n            [158, 6, 7, 10], [1170, 7, 8, 11], [4, 8, 9, 12], [859, 9, 10, 13], \n            [5506, 9, 11, 14], [49, 10, 11, 15]]\n        idseq \u4e3a\u8bcdID\u5e8f\u5217\uff0c\u957f\u5ea6\u4e0d\u8d85\u8fc7max_len~\u8fc7\u957f\u5219\u622a\u65ad~\n        word_seq \u4e3alattice\u5e8f\u5217\uff0c\u5185\u5bb9\u4e3a  (\u8bcdid\uff0c\u9996\u4f4d\u7f6e\uff0c\u5c3e\u4f4d\u7f6e\uff0c\u5728idseq\u4e2d\u7684\u4f4d\u7f6e)\n            \u5982\u679c\u8bcd\u5904\u4e8e\u88ab\u622a\u65ad\u7684\u4f4d\u7f6e\uff0c\u5219\u6539\u8bcd\u7684\u8bcdid\u4e3a<pad>\uff0c\u5bf9\u5e94\u5728idseq\u7684\u4f4d\u7f6e\u4e3a0.\n                \uff08\u8fd9\u4e3b\u8981\u53ea\u5bf9p_head_dict & p_tail_dict\u4e24\u4e2a\u5b57\u5178\u751f\u6548\uff0c\u56e0\u4e3a\u5f15\u7528\u4e4b\u7c7b\u7684\uff09\n            \u800cword_seq\u53ea\u4f1a\u4fdd\u7559\u4e2d\u5fc3\u8bcd\u5728idseq\u5f53\u4e2d\u7684\u5185\u5bb9\uff0c\u4e3a\u540e\u7eed\u771f\u5b9e\u7684\u5904\u7406\u4e2d\u5fc3~\n        \u540e\u7eed\u4f1a\u5bf9\u6bcf\u4e2aword_seq\u7684\u8bcd\u8ba1\u7b97\u5468\u8fb9\u7684n-gram\u4fe1\u606f~\n        \"\"\"", "\n", "\n", "\n", "\"\"\"\n        \u5728 head & tail dict \u4e2d\u624b\u5de5\u505apadding~\n        \u5728\u6574\u4e2alattice\u7684\u5f00\u5934\u548c\u7ed3\u5c3e\uff0c\u8865\u4e0a pad_num \u4e2apadding\uff0ctoken id=0, \u5bf9\u5e94idseq\u4e2d\u7684\u4f4d\u7f6e\u4e5f\u662f0\n        \"\"\"", "\n", "min_start", "=", "min", "(", "[", "t", "[", "1", "]", "for", "t", "in", "word_seq", "]", ")", "\n", "max_end", "=", "max", "(", "[", "t", "[", "2", "]", "for", "t", "in", "word_seq", "]", ")", "\n", "pad_num", "=", "2", "\n", "for", "i", "in", "range", "(", "pad_num", ")", ":", "\n", "            ", "p_head_dict", "[", "max_end", "+", "i", "]", "=", "[", "[", "0", ",", "max_end", "+", "i", ",", "max_end", "+", "i", "+", "1", ",", "0", "]", "]", "\n", "p_tail_dict", "[", "min_start", "-", "i", "]", "=", "[", "[", "0", ",", "min_start", "-", "i", "-", "1", ",", "min_start", "-", "i", ",", "0", "]", "]", "\n", "\n", "# word_seq, p_head_dict, p_tail_dict", "\n", "# [[155841, 0, 1, 1], [199, 1, 2, 2], [102, 2, 3, 3], [691, 2, 4, 4], [204, 3, 4, 5], [2, 4, 5, 6], [213, 5, 6, 7], [71, 5, 7, 8], [9, 5, 8, 9], [158, 6, 7, 10], [1170, 7, 8, 11], [4, 8, 9, 12], [859, 9, 10, 13], [5506, 9, 11, 14], [49, 10, 11, 15]]", "\n", "# {0: [[155841, 0, 1, 1]], 1: [[199, 1, 2, 2]], 2: [[102, 2, 3, 3], [691, 2, 4, 4]], 3: [[204, 3, 4, 5]], 4: [[2, 4, 5, 6]], 5: [[213, 5, 6, 7], [71, 5, 7, 8], [9, 5, 8, 9]], 6: [[158, 6, 7, 10]], 7: [[1170, 7, 8, 11]], 8: [[4, 8, 9, 12]], 9: [[859, 9, 10, 13], [5506, 9, 11, 14]], 10: [[49, 10, 11, 15]], 11: [[0, 11, 12, 0]], 12: [[0, 12, 13, 0]]}", "\n", "# {0: [[0, -1, 0, 0]], 1: [[155841, 0, 1, 1]], 2: [[199, 1, 2, 2]], 3: [[102, 2, 3, 3]], 4: [[691, 2, 4, 4], [204, 3, 4, 5]], 5: [[2, 4, 5, 6]], 6: [[213, 5, 6, 7]], 7: [[71, 5, 7, 8], [158, 6, 7, 10]], 8: [[9, 5, 8, 9], [1170, 7, 8, 11]], 9: [[4, 8, 9, 12]], 10: [[859, 9, 10, 13]], 11: [[5506, 9, 11, 14], [49, 10, 11, 15]], -1: [[0, -2, -1, 0]]}", "\n", "\n", "", "\"\"\"   \u751f\u6210n-gram \u7d22\u5f15\u8868   \"\"\"", "\n", "unigrams", "=", "[", "[", "[", "t", "[", "-", "1", "]", "]", "]", "for", "t", "in", "word_seq", "]", "\n", "bigrams", "=", "[", "[", "[", "t", "[", "-", "1", "]", ",", "t1", "[", "-", "1", "]", "]", "for", "t1", "in", "p_head_dict", "[", "t", "[", "2", "]", "]", "]", "for", "t", "in", "word_seq", "]", "\n", "trigrams", "=", "[", "[", "[", "t0", "[", "-", "1", "]", ",", "t", "[", "-", "1", "]", ",", "t1", "[", "-", "1", "]", "]", "for", "t1", "in", "p_head_dict", "[", "t", "[", "2", "]", "]", "for", "t0", "in", "p_tail_dict", "[", "t", "[", "1", "]", "]", "]", "for", "t", "in", "word_seq", "]", "\n", "\n", "# print map(len, [unigrams, bigrams, trigrams])", "\n", "# print map(np.shape, unigrams)", "\n", "# print map(np.shape, bigrams)", "\n", "# print map(np.shape, trigrams)", "\n", "# (15, 1, 1)", "\n", "# [(1, 2), (2, 2), (1, 2), (1, 2), (1, 2), (3, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (2, 2), (1, 2), (1, 2), (1, 2)]", "\n", "# [(1, 3), (2, 3), (1, 3), (1, 3), (1, 3), (6, 3), (1, 3), (1, 3), (1, 3), (1, 3), (2, 3), (4, 3), (1, 3), (1, 3), (1, 3)]", "\n", "\n", "\"\"\"   \u8fd4\u56de\u503c   \"\"\"", "\n", "to_ret", "=", "{", "\n", "'seq'", ":", "idseq", ",", "\n", "'uig'", ":", "unigrams", ",", "\n", "'big'", ":", "bigrams", ",", "\n", "'tig'", ":", "trigrams", ",", "\n", "}", "\n", "\n", "return", "to_ret", "\n", "", "def", "deal_nlpcckbqa_mws_base", "(", "self", ",", "x", ",", "len_qu", "=", "50", ",", "len_pre", "=", "20", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.src.preprocess.CPreprocess.deal_nlpcckbqa_mws_base": [[211, 236], ["get_ids", "preprocess.CPreprocess.deal_lattice_base", "get_ids", "preprocess.CPreprocess.deal_lattice_base", "preprocess.CPreprocess.w2v.getWordID"], "methods", ["home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.src.preprocess.CPreprocess.deal_lattice_base", "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.src.preprocess.CPreprocess.deal_lattice_base", "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.src.basic.W2V.getWordID"], ["", "def", "deal_nlpcckbqa_mws_base", "(", "self", ",", "x", ",", "len_qu", "=", "50", ",", "len_pre", "=", "20", ")", ":", "\n", "        ", "output", "=", "{", "}", "\n", "\"\"\"   \u8f6c\u4e3aID   \"\"\"", "\n", "get_ids", "=", "lambda", "x", ":", "[", "[", "self", ".", "w2v", ".", "getWordID", "(", "t", "[", "0", "]", ")", ",", "t", "[", "1", "]", ",", "t", "[", "2", "]", "]", "for", "t", "in", "x", "]", "\n", "\n", "output", "[", "'qu_ids'", "]", "=", "get_ids", "(", "x", "[", "'qu'", "]", ")", "\n", "output", "[", "'pre_ids'", "]", "=", "[", "get_ids", "(", "t", ")", "for", "t", "in", "x", "[", "'pres'", "]", "]", "\n", "\n", "qu_deals", "=", "self", ".", "deal_lattice_base", "(", "output", "[", "'qu_ids'", "]", ",", "max_len", "=", "len_qu", ")", "\n", "pres_deals", "=", "[", "self", ".", "deal_lattice_base", "(", "t", ",", "max_len", "=", "len_pre", ")", "for", "t", "in", "output", "[", "'pre_ids'", "]", "]", "\n", "output", "[", "'qu_ids'", "]", "=", "qu_deals", "\n", "output", "[", "'pre_ids'", "]", "=", "pres_deals", "\n", "\n", "output", "[", "'pre_labels'", "]", "=", "x", "[", "'labels'", "]", "\n", "\n", "\"\"\"\n        print (output['qu_ids'])\n        print (output['pre_ids'])\n        print (output['pre_labels'])\n        [[155841, 0, 1], [199, 1, 2], [102, 2, 3], [691, 2, 4], [204, 3, 4], [2, 4, 5], [213, 5, 6], [71, 5, 7], [9, 5, 8], [158, 6, 7], [1170, 7, 8], [4, 8, 9], [859, 9, 10], [5506, 9, 11], [49, 10, 11]]\n        [[[1226, 0, 1], [3880, 0, 2], [4223, 1, 2]], [[4885, 0, 1], [21775, 0, 2], [40354, 0, 4], [4276, 1, 2], [62040, 1, 3], [3856, 2, 3], [45976, 2, 4], [3511, 3, 4]], [[60, 0, 1], [29905, 0, 3], [2053, 1, 2], [958, 1, 3], [1050, 2, 3]], [[213, 0, 1], [71, 0, 2], [158, 1, 2], [183, 2, 3], [37, 2, 4], [486, 3, 4]], [[1298, 0, 1], [178, 0, 2], [18368, 1, 2]], [[4962, 0, 1], [509, 0, 2], [204, 1, 2], [1283, 1, 3], [55, 2, 3]], [[300, 0, 1], [176, 1, 2]], [[1225, 0, 1], [1783, 0, 2], [55, 1, 2]], [[213, 0, 1], [71, 0, 2], [9, 0, 3], [158, 1, 2], [1170, 2, 3]], [[395, 0, 1], [32, 0, 2], [226, 1, 2]], [[12543, 0, 1], [389, 0, 2], [360, 1, 2], [571, 2, 3], [1556, 2, 4], [2421, 3, 4]], [[23, 0, 1], [52, 0, 2], [517, 1, 2], [55, 2, 3]], [[608, 0, 1], [4445, 0, 2], [176, 1, 2]], [[244, 0, 1], [124, 0, 2], [1225, 1, 2]], [[246, 0, 1], [32313, 0, 2], [102, 1, 2]], [[131, 0, 1], [206, 0, 2], [2059, 1, 2], [55, 2, 3]], [[204, 0, 1], [1283, 0, 2], [55, 1, 2]], [[163, 0, 1], [4120, 0, 2], [395, 1, 2], [32, 1, 3], [226, 2, 3]]]\n        [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n        \"\"\"", "\n", "\n", "return", "output", "\n", "", "def", "pad_apart", "(", "self", ",", "id_seq", ",", "name", ",", "paras", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.src.preprocess.CPreprocess.pad_apart": [[236, 438], ["enumerate", "numpy.pad", "len", "len", "len", "numpy.zeros", "enumerate", "len", "len", "enumerate", "max", "numpy.zeros", "enumerate", "len", "preprocess.CPreprocess.pad_apart.get_min_id"], "methods", ["None"], ["", "def", "pad_apart", "(", "self", ",", "id_seq", ",", "name", ",", "paras", ")", ":", "\n", "        ", "\"\"\"\n        id_seq :\n        {'seq': [0, 155841, 199, 102, 691, 204, 2, 213, 71, 9, 158, 1170, 4, 859, 5506, 49], \n         'uig': [[[1]], [[2]], [[3]], [[4]], [[5]], [[6]], [[7]], [[8]], [[9]], [[10]], [[11]], [[12]], [[13]], [[14]], [[15]]], \n         'big': [[[1, 2]], [[2, 3], [2, 4]], [[3, 5]], [[4, 6]], [[5, 6]], [[6, 7], [6, 8], [6, 9]], [[7, 10]], [[8, 11]], [[9, 12]], [[10, 11]], [[11, 12]], [[12, 13], [12, 14]], [[13, 15]], [[14, 0]], [[15, 0]]], \n         'tig': [[[0, 1, 2]], [[1, 2, 3], [1, 2, 4]], [[2, 3, 5]], [[2, 4, 6]], [[3, 5, 6]], [[4, 6, 7], [5, 6, 7], [4, 6, 8], [5, 6, 8], [4, 6, 9], [5, 6, 9]], [[6, 7, 10]], [[6, 8, 11]], [[6, 9, 12]], [[7, 10, 11]], [[8, 11, 12], [10, 11, 12]], [[9, 12, 13], [11, 12, 13], [9, 12, 14], [11, 12, 14]], [[12, 13, 15]], [[12, 14, 0]], [[13, 15, 0]]]}\n        model inputs :\n        22\n        qu:0 (?, 50)    pre:0 (?, 20)\n\n        qu_convert1:0 (?, 50, 50)   qu_convert2:0 (?, 76, 50)   qu_convert3:0 (?, 92, 50)\n        pre_convert1:0 (?, 20, 20)  pre_convert2:0 (?, 46, 20)  pre_convert3:0 (?, 62, 20)\n        \n        qu_uig_1:0 (?, 50, 1)\n        qu_big_1:0 (?, 50, 2)   qu_big_3:0 (?, 60, 2)   qu_big_10:0 (?, 60, 2)\n        qu_tig_1:0 (?, 50, 3)   qu_tig_3:0 (?, 90, 3)   qu_tig_10:0 (?, 90, 3)  qu_tig_30:0 (?, 90, 3)\n\n        pre_uig_1:0 (?, 20, 1)  \n        pre_big_1:0 (?, 20, 2)  pre_big_3:0 (?, 60, 2)  pre_big_10:0 (?, 60, 2)\n        pre_tig_1:0 (?, 20, 3)  pre_tig_3:0 (?, 90, 3)  pre_tig_10:0 (?, 90, 3) pre_tig_30:0 (?, 90, 3)\n\n        paras['qu_l']  = 50,\n        paras['pre_l'] = 20,\n        paras['qu_i'] = [\n            [[1,50]], \n            [[1,50], [3,60], [10,60]], \n            [[1,50], [3,90], [10,90], [30,90]], ]\n        paras['pre_i'] = [\n            [[1,20]], \n            [[1,20], [3,60], [10,60]], \n            [[1,20], [3,90], [10,90], [30,90]], ]\n        \"qu_sum1\": 50,      \"qu_sum2\": 76,      \"qu_sum3\": 92,\n        \"pre_sum1\": 20,     \"pre_sum2\": 46,     \"pre_sum3\": 62\n        \"\"\"", "\n", "# \u4e0b\u9762\u8fd9\u4e2a\u957f\u5ea6\u5c31\u662f\u9664\u53bb\u6700\u521dpad\u90a3\u4e00\u4f4d\u4e4b\u540e\u7684\u6240\u6709\u6838\u5fc3\u4f4d\u7f6e~", "\n", "# print(name, (len(id_seq['seq'])-1), len(id_seq['uig']), len(id_seq['big']), len(id_seq['tig']))", "\n", "assert", "(", "len", "(", "id_seq", "[", "'seq'", "]", ")", "-", "1", ")", "==", "len", "(", "id_seq", "[", "'uig'", "]", ")", "==", "len", "(", "id_seq", "[", "'big'", "]", ")", "==", "len", "(", "id_seq", "[", "'tig'", "]", ")", "\n", "\n", "\n", "to_ret", "=", "{", "name", ":", "id_seq", "[", "'seq'", "]", "}", "\n", "\n", "\"\"\"\"\"\"", "\n", "def", "get_min_id", "(", "x", ",", "l", ")", ":", "\n", "            ", "i_list", "=", "[", "t", "for", "t", "in", "l", "if", "t", ">=", "x", "]", "\n", "if", "len", "(", "i_list", ")", "==", "0", ":", "\n", "                ", "\"\"\"   \u5982\u679c\u8981\u770b check_report_infor \u7684\u8bdd\uff0c\u8fd9\u91cc\u4e00\u5b9a\u8981\u62a5\u9519~   \"\"\"", "\n", "return", "-", "1", "\n", "", "return", "i_list", "[", "0", "]", "\n", "", "iinfor", "=", "paras", "[", "'%s_i'", "%", "(", "name", ")", "]", "\n", "i2k", "=", "{", "1", ":", "'uig'", ",", "2", ":", "'big'", ",", "3", ":", "'tig'", "}", "\n", "for", "i", ",", "infor_t", "in", "enumerate", "(", "iinfor", ")", ":", "\n", "# infor_t = [[1,50], [3,90], [10,90], [30,90]], ]", "\n", "            ", "ig_k", "=", "i2k", "[", "i", "+", "1", "]", "# 'tig'", "\n", "igs", "=", "id_seq", "[", "ig_k", "]", "# [[[0, 1, 2]], [[1, 2, 3], [1, 2, 4]], [[2, 3, 5]], [[2, 4, 6]], [[3, 5, 6]], [[4, 6, 7], [5, 6, 7], [4, 6, 8], [5, 6, 8], [4, 6, 9], [5, 6, 9]], [[6, 7, 10]], [[6, 8, 11]], [[6, 9, 12]], [[7, 10, 11]], [[8, 11, 12], [10, 11, 12]], [[9, 12, 13], [11, 12, 13], [9, 12, 14], [11, 12, 14]], [[12, 13, 15]], [[12, 14, 0]], [[13, 15, 0]]]", "\n", "len_list", "=", "[", "t", "[", "0", "]", "for", "t", "in", "infor_t", "]", "# [1, 3, 10, 30]", "\n", "\n", "\n", "convert_name", "=", "'%s_convert%d'", "%", "(", "name", ",", "i", "+", "1", ")", "\n", "to_ret", "[", "convert_name", "]", "=", "[", "-", "1", "]", "*", "(", "len", "(", "igs", ")", "+", "1", ")", "\n", "\n", "temp_base", "=", "0", "# \u5f53\u524d\u7684position\u8fc1\u79fb\u91cf~", "\n", "for", "infor_tt", "in", "infor_t", ":", "\n", "                ", "infor_l", "=", "infor_tt", "[", "0", "]", "\n", "\n", "name_t", "=", "'%s_%s_%d'", "%", "(", "name", ",", "ig_k", ",", "infor_l", ")", "# qu_tig_1 ~ qu_tig_30", "\n", "to_ret", "[", "name_t", "]", "=", "[", "]", "\n", "\n", "for", "j", ",", "token_t", "in", "enumerate", "(", "igs", ")", ":", "\n", "                    ", "position", "=", "j", "+", "1", "# \u8fd9\u662f\u8fd9\u4e2atoken\u5728id_seq\u4e2d\u5bf9\u5e94\u7684\u4f4d\u7f6e~", "\n", "if", "get_min_id", "(", "len", "(", "token_t", ")", ",", "len_list", ")", "==", "infor_l", ":", "\n", "# # padding~ \u7edf\u4e00\u7533\u8bf7\u7a7a\u95f4\u4e4b\u540e\uff0c\u8fd9\u91cc\u4e0d\u7528\u505apadding~", "\n", "# if len(token_t) < infor_l :", "\n", "#     token_t += [[0]*len(token_t[0])]*(infor_l-len(token_t))", "\n", "\n", "                        ", "\"\"\"\n                        \u8fd9\u662f\u4e00\u4e2a\u5f3a\u884c\u526a\u88c1\uff0c\u5f53\u6240\u5c5e\u7684\u8fd9\u4e2ato_ret[name_t]\u6ee1\u4e86\u4ee5\u540e\uff0c\u5c06\u4e0d\u518d\u5f80\u91cc\u9762\u653e\u4e1c\u897f~\n                        \u4e00\u5b9a\u8981\u5c06\u4e0b\u9762\u8fd9\u884cif\u6ce8\u91ca\u6389\u518d\u53bb\u770b check_report_infor \u7684\u7ed3\u679c~\n                        \uff08\u6ce8\u91caif\u8fd9\u884c\uff0c\u8ba9\u4e0b\u4e24\u53e5\u603b\u662f\u6267\u884c\uff1b\u6ce8\u91capad\u6574\u5757\uff0c\u9632\u6b62\u62a5\u9519~\uff1bget_min_id\u51fd\u6570\u4e2d\u5982\u679c\u627e\u4e0d\u5230\uff0c\u4e00\u5b9a\u8981\u62a5\u9519~\uff09\n                        \"\"\"", "\n", "if", "len", "(", "to_ret", "[", "name_t", "]", ")", "==", "infor_tt", "[", "1", "]", "/", "infor_tt", "[", "0", "]", ":", "\n", "                            ", "break", "\n", "", "to_ret", "[", "name_t", "]", ".", "append", "(", "token_t", ")", "\n", "to_ret", "[", "convert_name", "]", "[", "position", "]", "=", "int", "(", "temp_base", "+", "len", "(", "to_ret", "[", "name_t", "]", ")", "-", "1", ")", "\n", "", "", "temp_base", "+=", "infor_tt", "[", "1", "]", "/", "infor_tt", "[", "0", "]", "\n", "\n", "", "", "\"\"\"\n        # print(to_ret)\n        {'qu': [0, 155841, 199, 102, 691, 204, 2, 213, 71, 9, 158, 1170, 4, 859, 5506, 49], \n         'qu_convert1': [-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], \n         'qu_uig_1': [[[1]], [[2]], [[3]], [[4]], [[5]], [[6]], [[7]], [[8]], [[9]], [[10]], [[11]], [[12]], [[13]], [[14]], [[15]]], \n         'qu_convert2': [-1, 0, 50, 1, 2, 3, 51, 4, 5, 6, 7, 8, 52, 9, 10, 11], \n         'qu_big_1': [[[1, 2]], [[3, 5]], [[4, 6]], [[5, 6]], [[7, 10]], [[8, 11]], [[9, 12]], [[10, 11]], [[11, 12]], [[13, 15]], [[14, 0]], [[15, 0]]], \n         'qu_big_3': [[[2, 3], [2, 4]], [[6, 7], [6, 8], [6, 9]], [[12, 13], [12, 14]]], \n         'qu_big_10': [], \n         'qu_convert3': [-1, 0, 50, 1, 2, 3, 80, 4, 5, 6, 7, 51, 81, 8, 9, 10], \n         'qu_tig_1': [[[0, 1, 2]], [[2, 3, 5]], [[2, 4, 6]], [[3, 5, 6]], [[6, 7, 10]], [[6, 8, 11]], [[6, 9, 12]], [[7, 10, 11]], [[12, 13, 15]], [[12, 14, 0]], [[13, 15, 0]]], \n         'qu_tig_3': [[[1, 2, 3], [1, 2, 4]], [[8, 11, 12], [10, 11, 12]]], \n         'qu_tig_10': [[[4, 6, 7], [5, 6, 7], [4, 6, 8], [5, 6, 8], [4, 6, 9], [5, 6, 9]], [[9, 12, 13], [11, 12, 13], [9, 12, 14], [11, 12, 14]]], \n         'qu_tig_30': []}\n\n        padding\u4e4b\u540e\uff1a\n        'qu_uig_1': [[[1]], [[2]], [[3]], [[4]], [[5]], [[6]], [[7]], [[8]], [[9]], [[10]], [[11]], [[12]], [[13]], [[14]], [[15]]], \n        'qu_big_1': [[[1, 2]], [[3, 5]], [[4, 6]], [[5, 6]], [[7, 10]], [[8, 11]], [[9, 12]], [[10, 11]], [[11, 12]], [[13, 15]], [[14, 0]], [[15, 0]]], \n        'qu_big_3': [[[2, 3], [2, 4], [0, 0]], [[6, 7], [6, 8], [6, 9]], [[12, 13], [12, 14], [0, 0]]], \n        'qu_big_10': [], \n        'qu_tig_1': [[[0, 1, 2]], [[2, 3, 5]], [[2, 4, 6]], [[3, 5, 6]], [[6, 7, 10]], [[6, 8, 11]], [[6, 9, 12]], [[7, 10, 11]], [[12, 13, 15]], [[12, 14, 0]], [[13, 15, 0]]], \n        'qu_tig_3': [[[1, 2, 3], [1, 2, 4], [0, 0, 0]], [[8, 11, 12], [10, 11, 12], [0, 0, 0]]], \n        'qu_tig_10': [[[4, 6, 7], [5, 6, 7], [4, 6, 8], [5, 6, 8], [4, 6, 9], [5, 6, 9], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], [[9, 12, 13], [11, 12, 13], [9, 12, 14], [11, 12, 14], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]]], \n        'qu_tig_30': []}\n        # for k in to_ret :\n        #     print(k, np.shape(to_ret[k]))\n        qu (16,)  qu_convert1 (16,)  qu_convert2 (16,)  qu_convert3 (16,)\n        qu_uig_1 (15, 1, 1)\n        qu_big_1 (12, 1, 2)  qu_big_3 (3, 3, 2)  qu_big_10 (0,)\n        qu_tig_1 (11, 1, 3)  qu_tig_3 (2, 3, 3)  qu_tig_10 (2, 10, 3)  qu_tig_30 (0,)\n        \"\"\"", "\n", "\n", "\"\"\"   check_report_infor   \"\"\"", "\n", "# kas = [name]", "\n", "# kbs = ['len']", "\n", "# i2k = {1:'uig', 2:'big', 3:'tig'}", "\n", "# for i, iinfor_t in enumerate(iinfor) :", "\n", "#     for j in range(len(iinfor_t)) :", "\n", "#         kbs.append('%s_%d'%(i2k[i+1], j))", "\n", "# keys = ['%s_%s'%(ka, kb) for ka in kas for kb in kbs]", "\n", "# for k in keys :", "\n", "#     if not k in self.log_info :", "\n", "#         self.log_info[k] = []", "\n", "\n", "# self.log_info['%s_len'%(name)].append(len(to_ret[name]))", "\n", "# for i, iinfor_t in enumerate(iinfor) :", "\n", "#     for j in range(len(iinfor_t)) :", "\n", "#         key_ret = '%s_%s_%d'%(name, i2k[i+1], iinfor_t[j][0])", "\n", "#         key_log = '%s_%s_%d'%(name, i2k[i+1], j)", "\n", "#         self.log_info[key_log].append(len(to_ret[key_ret]))", "\n", "\n", "\"\"\"   pad   \"\"\"", "\n", "for", "i", "in", "[", "1", ",", "2", ",", "3", "]", ":", "\n", "            ", "key", "=", "'%s_convert%d'", "%", "(", "name", ",", "i", ")", "\n", "conver_t", "=", "to_ret", "[", "key", "]", "\n", "to_ret", "[", "key", "]", "=", "np", ".", "zeros", "(", "[", "paras", "[", "'%s_sum%d'", "%", "(", "name", ",", "i", ")", "]", ",", "paras", "[", "'%s_l'", "%", "(", "name", ")", "]", "]", ")", "\n", "for", "i", ",", "t", "in", "enumerate", "(", "conver_t", ")", ":", "\n", "                ", "if", "t", "<", "0", ":", "\n", "                    ", "continue", "\n", "", "to_ret", "[", "key", "]", "[", "t", "]", "[", "i", "]", "=", "1", "\n", "# print(to_ret[key])", "\n", "\n", "", "", "max_len", "=", "paras", "[", "'%s_l'", "%", "(", "name", ")", "]", "\n", "to_ret", "[", "name", "]", "=", "np", ".", "pad", "(", "to_ret", "[", "name", "]", "[", ":", "max_len", "]", ",", "(", "0", ",", "max", "(", "0", ",", "max_len", "-", "len", "(", "to_ret", "[", "name", "]", ")", ")", ")", ",", "'constant'", ")", "\n", "i2k", "=", "{", "1", ":", "'uig'", ",", "2", ":", "'big'", ",", "3", ":", "'tig'", "}", "\n", "for", "i", "in", "[", "1", ",", "2", ",", "3", "]", ":", "\n", "# [[1, 20], [3, 90], [10, 90], [30, 90]]", "\n", "            ", "infort", "=", "iinfor", "[", "i", "-", "1", "]", "\n", "for", "infortt", "in", "infort", ":", "\n", "                ", "key", "=", "'%s_%s_%d'", "%", "(", "name", ",", "i2k", "[", "i", "]", ",", "infortt", "[", "0", "]", ")", "\n", "now_key", "=", "to_ret", "[", "key", "]", "\n", "to_ret", "[", "key", "]", "=", "np", ".", "zeros", "(", "(", "infortt", "[", "1", "]", ",", "i", ")", ")", "\n", "\n", "for", "i0", ",", "t1", "in", "enumerate", "(", "now_key", ")", ":", "\n", "                    ", "to_ret", "[", "key", "]", "[", "i0", "*", "infortt", "[", "0", "]", ":", "i0", "*", "infortt", "[", "0", "]", "+", "len", "(", "t1", ")", "]", "=", "t1", "\n", "\n", "# \u7edf\u4e00\u7533\u8bf7\u7a7a\u95f4\u4e4b\u540e\u4e0d\u7528\u7684\u7248\u672c~", "\n", "# if len(to_ret[key]) == 0 :", "\n", "#     to_ret[key] = np.zeros((infortt[1], i))", "\n", "# else :", "\n", "#     # (2,10,3) -> (20,3)", "\n", "#     t = [t2 for t1 in to_ret[key] for t2 in t1]", "\n", "#     # (20,3)   -> (90,3)", "\n", "#     to_ret[key] = np.pad(t, ((0, infortt[1]-len(t)), (0,0)), 'constant')", "\n", "# for k in to_ret :", "\n", "#     print(k, np.shape(to_ret[k]))", "\n", "", "", "", "\"\"\"\n        qu (50,)    pre (20,)\n\n        qu_convert1 (50, 50)    qu_convert2 (76, 50)    qu_convert3 (92, 50)\n        pre_convert1 (20, 20)   pre_convert2 (46, 20)   pre_convert3 (62, 20)\n\n        qu_uig_1 (50, 1)\n        qu_big_1 (50, 2)    qu_big_3 (60, 2)    qu_big_10 (60, 2)\n        qu_tig_1 (50, 3)    qu_tig_3 (90, 3)    qu_tig_10 (90, 3)   qu_tig_30 (90, 3)\n\n        pre_uig_1 (20, 1)\n        pre_big_1 (20, 2)   pre_big_3 (60, 2)   pre_big_10 (60, 2)\n        pre_tig_1 (20, 3)   pre_tig_3 (90, 3)   pre_tig_10 (90, 3)  pre_tig_30 (90, 3)\n\n\n        qu:0 (?, 50)    pre:0 (?, 20)\n\n        qu_convert1:0 (?, 50, 50)   qu_convert2:0 (?, 76, 50)   qu_convert3:0 (?, 92, 50)\n        pre_convert1:0 (?, 20, 20)  pre_convert2:0 (?, 46, 20)  pre_convert3:0 (?, 62, 20)\n        \n        qu_uig_1:0 (?, 50, 1)\n        qu_big_1:0 (?, 50, 2)   qu_big_3:0 (?, 60, 2)   qu_big_10:0 (?, 60, 2)\n        qu_tig_1:0 (?, 50, 3)   qu_tig_3:0 (?, 90, 3)   qu_tig_10:0 (?, 90, 3)  qu_tig_30:0 (?, 90, 3)\n\n        pre_uig_1:0 (?, 20, 1)  \n        pre_big_1:0 (?, 20, 2)  pre_big_3:0 (?, 60, 2)  pre_big_10:0 (?, 60, 2)\n        pre_tig_1:0 (?, 20, 3)  pre_tig_3:0 (?, 90, 3)  pre_tig_10:0 (?, 90, 3) pre_tig_30:0 (?, 90, 3)\n        \"\"\"", "\n", "\n", "return", "to_ret", "\n", "", "def", "pad_apart_check", "(", "self", ",", "id_seq", ",", "name", ",", "paras", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.src.preprocess.CPreprocess.pad_apart_check": [[438, 516], ["enumerate", "enumerate", "preprocess.CPreprocess.log_info[].append", "enumerate", "len", "len", "len", "range", "len", "range", "len", "len", "enumerate", "len", "kbs.append", "len", "preprocess.CPreprocess.log_info[].append", "len", "len", "preprocess.CPreprocess.pad_apart.get_min_id"], "methods", ["None"], ["", "def", "pad_apart_check", "(", "self", ",", "id_seq", ",", "name", ",", "paras", ")", ":", "\n", "# pad_apart_count", "\n", "# \u4e0b\u9762\u8fd9\u4e2a\u957f\u5ea6\u5c31\u662f\u9664\u53bb\u6700\u521dpad\u90a3\u4e00\u4f4d\u4e4b\u540e\u7684\u6240\u6709\u6838\u5fc3\u4f4d\u7f6e~", "\n", "# print(name, (len(id_seq['seq'])-1), len(id_seq['uig']), len(id_seq['big']), len(id_seq['tig']))", "\n", "        ", "assert", "(", "len", "(", "id_seq", "[", "'seq'", "]", ")", "-", "1", ")", "==", "len", "(", "id_seq", "[", "'uig'", "]", ")", "==", "len", "(", "id_seq", "[", "'big'", "]", ")", "==", "len", "(", "id_seq", "[", "'tig'", "]", ")", "\n", "\n", "\n", "to_ret", "=", "{", "name", ":", "id_seq", "[", "'seq'", "]", "}", "\n", "\n", "\"\"\"\"\"\"", "\n", "def", "get_min_id", "(", "x", ",", "l", ")", ":", "\n", "            ", "i_list", "=", "[", "t", "for", "t", "in", "l", "if", "t", ">=", "x", "]", "\n", "if", "len", "(", "i_list", ")", "==", "0", ":", "\n", "                ", "\"\"\"   \u5982\u679c\u8981\u770b check_report_infor \u7684\u8bdd\uff0c\u8fd9\u91cc\u4e00\u5b9a\u8981\u62a5\u9519~   \"\"\"", "\n", "import", "hao123", "\n", "return", "-", "1", "\n", "", "return", "i_list", "[", "0", "]", "\n", "", "iinfor", "=", "paras", "[", "'%s_i'", "%", "(", "name", ")", "]", "\n", "i2k", "=", "{", "1", ":", "'uig'", ",", "2", ":", "'big'", ",", "3", ":", "'tig'", "}", "\n", "for", "i", ",", "infor_t", "in", "enumerate", "(", "iinfor", ")", ":", "\n", "# infor_t = [[1,50], [3,90], [10,90], [30,90]], ]", "\n", "            ", "ig_k", "=", "i2k", "[", "i", "+", "1", "]", "# 'tig'", "\n", "igs", "=", "id_seq", "[", "ig_k", "]", "# [[[0, 1, 2]], [[1, 2, 3], [1, 2, 4]], [[2, 3, 5]], [[2, 4, 6]], [[3, 5, 6]], [[4, 6, 7], [5, 6, 7], [4, 6, 8], [5, 6, 8], [4, 6, 9], [5, 6, 9]], [[6, 7, 10]], [[6, 8, 11]], [[6, 9, 12]], [[7, 10, 11]], [[8, 11, 12], [10, 11, 12]], [[9, 12, 13], [11, 12, 13], [9, 12, 14], [11, 12, 14]], [[12, 13, 15]], [[12, 14, 0]], [[13, 15, 0]]]", "\n", "len_list", "=", "[", "t", "[", "0", "]", "for", "t", "in", "infor_t", "]", "# [1, 3, 10, 30]", "\n", "\n", "\n", "convert_name", "=", "'%s_convert%d'", "%", "(", "name", ",", "i", "+", "1", ")", "\n", "to_ret", "[", "convert_name", "]", "=", "[", "-", "1", "]", "*", "(", "len", "(", "igs", ")", "+", "1", ")", "\n", "\n", "temp_base", "=", "0", "# \u5f53\u524d\u7684position\u8fc1\u79fb\u91cf~", "\n", "for", "infor_tt", "in", "infor_t", ":", "\n", "                ", "infor_l", "=", "infor_tt", "[", "0", "]", "\n", "\n", "name_t", "=", "'%s_%s_%d'", "%", "(", "name", ",", "ig_k", ",", "infor_l", ")", "# qu_tig_1 ~ qu_tig_30", "\n", "to_ret", "[", "name_t", "]", "=", "[", "]", "\n", "\n", "for", "j", ",", "token_t", "in", "enumerate", "(", "igs", ")", ":", "\n", "                    ", "position", "=", "j", "+", "1", "# \u8fd9\u662f\u8fd9\u4e2atoken\u5728id_seq\u4e2d\u5bf9\u5e94\u7684\u4f4d\u7f6e~", "\n", "if", "get_min_id", "(", "len", "(", "token_t", ")", ",", "len_list", ")", "==", "infor_l", ":", "\n", "# # padding~ \u7edf\u4e00\u7533\u8bf7\u7a7a\u95f4\u4e4b\u540e\uff0c\u8fd9\u91cc\u4e0d\u7528\u505apadding~", "\n", "# if len(token_t) < infor_l :", "\n", "#     token_t += [[0]*len(token_t[0])]*(infor_l-len(token_t))", "\n", "\n", "                        ", "\"\"\"\n                        \u8fd9\u662f\u4e00\u4e2a\u5f3a\u884c\u526a\u88c1\uff0c\u5f53\u6240\u5c5e\u7684\u8fd9\u4e2ato_ret[name_t]\u6ee1\u4e86\u4ee5\u540e\uff0c\u5c06\u4e0d\u518d\u5f80\u91cc\u9762\u653e\u4e1c\u897f~\n                        \u4e00\u5b9a\u8981\u5c06\u4e0b\u9762\u8fd9\u884cif\u6ce8\u91ca\u6389\u518d\u53bb\u770b check_report_infor \u7684\u7ed3\u679c~\n                        \uff08\u6ce8\u91caif\u8fd9\u884c\uff0c\u8ba9\u4e0b\u4e24\u53e5\u603b\u662f\u6267\u884c\uff1b\u6ce8\u91capad\u6574\u5757\uff0c\u9632\u6b62\u62a5\u9519~\uff1bget_min_id\u51fd\u6570\u4e2d\u5982\u679c\u627e\u4e0d\u5230\uff0c\u4e00\u5b9a\u8981\u62a5\u9519~\uff09\n                        \"\"\"", "\n", "# if len(to_ret[name_t]) == infor_tt[1]/infor_tt[0] :", "\n", "#     break", "\n", "to_ret", "[", "name_t", "]", ".", "append", "(", "token_t", ")", "\n", "to_ret", "[", "convert_name", "]", "[", "position", "]", "=", "int", "(", "temp_base", "+", "len", "(", "to_ret", "[", "name_t", "]", ")", "-", "1", ")", "\n", "", "", "temp_base", "+=", "infor_tt", "[", "1", "]", "/", "infor_tt", "[", "0", "]", "\n", "\n", "\n", "\n", "", "", "\"\"\"   check_report_infor   \"\"\"", "\n", "kas", "=", "[", "name", "]", "\n", "kbs", "=", "[", "'len'", "]", "\n", "i2k", "=", "{", "1", ":", "'uig'", ",", "2", ":", "'big'", ",", "3", ":", "'tig'", "}", "\n", "for", "i", ",", "iinfor_t", "in", "enumerate", "(", "iinfor", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "len", "(", "iinfor_t", ")", ")", ":", "\n", "                ", "kbs", ".", "append", "(", "'%s_%d'", "%", "(", "i2k", "[", "i", "+", "1", "]", ",", "j", ")", ")", "\n", "", "", "keys", "=", "[", "'%s_%s'", "%", "(", "ka", ",", "kb", ")", "for", "ka", "in", "kas", "for", "kb", "in", "kbs", "]", "\n", "for", "k", "in", "keys", ":", "\n", "            ", "if", "not", "k", "in", "self", ".", "log_info", ":", "\n", "                ", "self", ".", "log_info", "[", "k", "]", "=", "[", "]", "\n", "\n", "", "", "self", ".", "log_info", "[", "'%s_len'", "%", "(", "name", ")", "]", ".", "append", "(", "len", "(", "to_ret", "[", "name", "]", ")", ")", "\n", "for", "i", ",", "iinfor_t", "in", "enumerate", "(", "iinfor", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "len", "(", "iinfor_t", ")", ")", ":", "\n", "                ", "key_ret", "=", "'%s_%s_%d'", "%", "(", "name", ",", "i2k", "[", "i", "+", "1", "]", ",", "iinfor_t", "[", "j", "]", "[", "0", "]", ")", "\n", "key_log", "=", "'%s_%s_%d'", "%", "(", "name", ",", "i2k", "[", "i", "+", "1", "]", ",", "j", ")", "\n", "self", ".", "log_info", "[", "key_log", "]", ".", "append", "(", "len", "(", "to_ret", "[", "key_ret", "]", ")", ")", "\n", "\n", "\n", "\n", "", "", "return", "to_ret", "\n", "", "def", "padding_nlpcckbqa_mws", "(", "self", ",", "xs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.src.preprocess.CPreprocess.padding_nlpcckbqa_mws": [[516, 570], ["sys.path.append", "get_para", "[].keys", "inputs[].keys", "preprocess.CPreprocess.pad_apart", "preprocess.CPreprocess.update", "inputs.append", "numpy.array", "numpy.array", "preprocess.CPreprocess.pad_apart"], "methods", ["home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.model.model_nlpcc_irqa_cws.get_para", "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.src.preprocess.CPreprocess.pad_apart", "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.src.preprocess.CPreprocess.pad_apart"], ["", "def", "padding_nlpcckbqa_mws", "(", "self", ",", "xs", ")", ":", "\n", "        ", "\"\"\"\n        \u8f93\u5165\u7684xs\u4e2d\u7684\u6bcf\u4e2ax\u7684\u793a\u4f8b~\n        {'input': \n        {'qu': \n          {'seq': [0, 155841, 199, 102, 691, 204, 2, 213, 71, 9, 158, 1170, 4, 859, 5506, 49], \n           'uig': [[[1]], [[2]], [[3]], [[4]], [[5]], [[6]], [[7]], [[8]], [[9]], [[10]], [[11]], [[12]], [[13]], [[14]], [[15]]], \n           'big': [[[1, 2]], [[2, 3], [2, 4]], [[3, 5]], [[4, 6]], [[5, 6]], [[6, 7], [6, 8], [6, 9]], [[7, 10]], [[8, 11]], [[9, 12]], [[10, 11]], [[11, 12]], [[12, 13], [12, 14]], [[13, 15]], [[14, 0]], [[15, 0]]], \n           'tig': [[[0, 1, 2]], [[1, 2, 3], [1, 2, 4]], [[2, 3, 5]], [[2, 4, 6]], [[3, 5, 6]], [[4, 6, 7], [5, 6, 7], [4, 6, 8], [5, 6, 8], [4, 6, 9], [5, 6, 9]], [[6, 7, 10]], [[6, 8, 11]], [[6, 9, 12]], [[7, 10, 11]], [[8, 11, 12], [10, 11, 12]], [[9, 12, 13], [11, 12, 13], [9, 12, 14], [11, 12, 14]], [[12, 13, 15]], [[12, 14, 0]], [[13, 15, 0]]]\n          }, \n         'pre': \n          {'seq': [0, 213, 71, 9, 158, 1170], \n           'uig': [[[1]], [[2]], [[3]], [[4]], [[5]]], \n           'big': [[[1, 4]], [[2, 5]], [[3, 0]], [[4, 5]], [[5, 0]]], \n           'tig': [[[0, 1, 4]], [[0, 2, 5]], [[0, 3, 0]], [[1, 4, 5]], [[2, 5, 0], [4, 5, 0]]]\n          }\n        }, \n         'output': {'label': 1}}\n        \"\"\"", "\n", "\n", "sys", ".", "path", ".", "append", "(", "'model'", ")", "\n", "from", "model_nlpcc_kbre_cws", "import", "get_para", "\n", "paras", "=", "get_para", "(", ")", "\n", "\"\"\"\n        paras['qu_l']  = 50,\n        paras['pre_l'] = 20,\n        paras['qu_i'] = [\n            [[1,50]], \n            [[1,50], [3,60], [10,60]], \n            [[1,50], [3,90], [10,90], [30,90]], ]\n        paras['pre_i'] = [\n            [[1,20]], \n            [[1,20], [3,60], [10,60]], \n            [[1,20], [3,90], [10,90], [30,90]], ]\n        \"qu_sum1\": 50,      \"qu_sum2\": 76,      \"qu_sum3\": 92,\n        \"pre_sum1\": 20,     \"pre_sum2\": 46,     \"pre_sum3\": 62\n        \"\"\"", "\n", "\n", "inputs", "=", "[", "]", "\n", "for", "x", "in", "xs", ":", "\n", "            ", "to_input", "=", "self", ".", "pad_apart", "(", "x", "[", "'input'", "]", "[", "'qu'", "]", ",", "name", "=", "'qu'", ",", "paras", "=", "paras", ")", "\n", "to_input", ".", "update", "(", "self", ".", "pad_apart", "(", "x", "[", "'input'", "]", "[", "'pre'", "]", ",", "name", "=", "'pre'", ",", "paras", "=", "paras", ")", ")", "\n", "inputs", ".", "append", "(", "to_input", ")", "\n", "\n", "", "output_keys", "=", "xs", "[", "0", "]", "[", "'output'", "]", ".", "keys", "(", ")", "\n", "outputs", "=", "{", "key", ":", "np", ".", "array", "(", "[", "x", "[", "'output'", "]", "[", "key", "]", "for", "x", "in", "xs", "]", ")", "\n", "for", "key", "in", "output_keys", "}", "\n", "\n", "input_keys", "=", "inputs", "[", "0", "]", ".", "keys", "(", ")", "\n", "inputs", "=", "{", "key", ":", "np", ".", "array", "(", "[", "x", "[", "key", "]", "for", "x", "in", "inputs", "]", ")", "\n", "for", "key", "in", "input_keys", "}", "\n", "\n", "\n", "return", "inputs", ",", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.src.preprocess.CPreprocess.deal_nlpcckbqa_gcn_base": [[572, 574], ["preprocess.CPreprocess.deal_nlpcckbqa_mws_base"], "methods", ["home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.src.preprocess.CPreprocess.deal_nlpcckbqa_mws_base"], ["def", "deal_nlpcckbqa_gcn_base", "(", "self", ",", "x", ",", "len_qu", "=", "50", ",", "len_pre", "=", "20", ")", ":", "\n", "        ", "return", "self", ".", "deal_nlpcckbqa_mws_base", "(", "x", ",", "len_qu", "=", "len_qu", ",", "len_pre", "=", "len_pre", ")", "\n", "", "def", "deal_dgcn_seq", "(", "self", ",", "id_seq", ",", "lent", ",", "name", ",", "max_pad", "=", "5", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.src.preprocess.CPreprocess.deal_dgcn_seq": [[574, 605], ["keras.preprocessing.sequence.pad_sequences", "keras.preprocessing.sequence.pad_sequences", "numpy.pad", "numpy.pad", "sorted", "reproduce", "reproduce", "list", "set", "len", "len", "len", "len"], "methods", ["None"], ["", "def", "deal_dgcn_seq", "(", "self", ",", "id_seq", ",", "lent", ",", "name", ",", "max_pad", "=", "5", ")", ":", "\n", "        ", "\"\"\"\n        {'seq': [0, 155841, 199, 102, 691, 204, 2, 213, 71, 9, 158, 1170, 4, 859, 5506, 49], \n         'uig': [[[1]], [[2]], [[3]], [[4]], [[5]], [[6]], [[7]], [[8]], [[9]], [[10]], [[11]], [[12]], [[13]], [[14]], [[15]]], \n         'big': [[[1, 2]], [[2, 3], [2, 4]], [[3, 5]], [[4, 6]], [[5, 6]], [[6, 7], [6, 8], [6, 9]], [[7, 10]], [[8, 11]], [[9, 12]], [[10, 11]], [[11, 12]], [[12, 13], [12, 14]], [[13, 15]], [[14, 0]], [[15, 0]]], \n         'tig': [[[0, 1, 2]], [[1, 2, 3], [1, 2, 4]], [[2, 3, 5]], [[2, 4, 6]], [[3, 5, 6]], [[4, 6, 7], [5, 6, 7], [4, 6, 8], [5, 6, 8], [4, 6, 9], [5, 6, 9]], [[6, 7, 10]], [[6, 8, 11]], [[6, 9, 12]], [[7, 10, 11]], [[8, 11, 12], [10, 11, 12]], [[9, 12, 13], [11, 12, 13], [9, 12, 14], [11, 12, 14]], [[12, 13, 15]], [[12, 14, 0]], [[13, 15, 0]]]\n        }\n        \"\"\"", "\n", "reproduce", "=", "lambda", "x", ":", "sorted", "(", "list", "(", "set", "(", "x", ")", ")", ")", "\n", "\n", "seq", "=", "id_seq", "[", "'seq'", "]", "[", ":", "lent", "]", "\n", "seq", "=", "seq", "+", "[", "0", "]", "*", "(", "lent", "-", "len", "(", "seq", ")", ")", "\n", "\n", "tig", "=", "id_seq", "[", "'tig'", "]", "[", ":", "lent", "-", "1", "]", "\n", "mid_ids", "=", "[", "t", "[", "0", "]", "[", "1", "]", "for", "t", "in", "tig", "]", "+", "[", "0", "]", "*", "(", "lent", "-", "len", "(", "tig", ")", ")", "\n", "head_ids", "=", "[", "reproduce", "(", "[", "tt", "[", "0", "]", "for", "tt", "in", "t", "]", ")", "for", "t", "in", "tig", "]", "\n", "tail_ids", "=", "[", "reproduce", "(", "[", "tt", "[", "2", "]", "for", "tt", "in", "t", "]", ")", "for", "t", "in", "tig", "]", "\n", "\n", "head_ids", "=", "pad_sequences", "(", "head_ids", ",", "maxlen", "=", "max_pad", ",", "padding", "=", "'post'", ",", "truncating", "=", "'post'", ")", "\n", "tail_ids", "=", "pad_sequences", "(", "tail_ids", ",", "maxlen", "=", "max_pad", ",", "padding", "=", "'post'", ",", "truncating", "=", "'post'", ")", "\n", "\n", "head_ids", "=", "np", ".", "pad", "(", "head_ids", ",", "(", "(", "0", ",", "lent", "-", "len", "(", "head_ids", ")", ")", ",", "(", "0", ",", "0", ")", ")", ",", "'constant'", ")", "\n", "tail_ids", "=", "np", ".", "pad", "(", "tail_ids", ",", "(", "(", "0", ",", "lent", "-", "len", "(", "tail_ids", ")", ")", ",", "(", "0", ",", "0", ")", ")", ",", "'constant'", ")", "\n", "\n", "to_ret", "=", "{", "\n", "name", ":", "seq", ",", "\n", "'%s_mid'", "%", "(", "name", ")", ":", "mid_ids", ",", "\n", "'%s_head'", "%", "(", "name", ")", ":", "head_ids", ",", "\n", "'%s_tail'", "%", "(", "name", ")", ":", "tail_ids", ",", "\n", "}", "\n", "return", "to_ret", "\n", "", "def", "padding_nlpcckbqa_gcn", "(", "self", ",", "xs", ",", "len_qu", "=", "50", ",", "len_pre", "=", "20", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.src.preprocess.CPreprocess.padding_nlpcckbqa_gcn": [[605, 640], ["[].keys", "inputs[].keys", "preprocess.CPreprocess.deal_dgcn_seq", "preprocess.CPreprocess.update", "inputs.append", "numpy.array", "numpy.array", "preprocess.CPreprocess.deal_dgcn_seq"], "methods", ["home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.src.preprocess.CPreprocess.deal_dgcn_seq", "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.src.preprocess.CPreprocess.deal_dgcn_seq"], ["", "def", "padding_nlpcckbqa_gcn", "(", "self", ",", "xs", ",", "len_qu", "=", "50", ",", "len_pre", "=", "20", ")", ":", "\n", "        ", "\"\"\"\n        \u8f93\u5165\u7684xs\u4e2d\u7684\u6bcf\u4e2ax\u7684\u793a\u4f8b~\n        {'input': \n        {'qu': \n          {'seq': [0, 155841, 199, 102, 691, 204, 2, 213, 71, 9, 158, 1170, 4, 859, 5506, 49], \n           'uig': [[[1]], [[2]], [[3]], [[4]], [[5]], [[6]], [[7]], [[8]], [[9]], [[10]], [[11]], [[12]], [[13]], [[14]], [[15]]], \n           'big': [[[1, 2]], [[2, 3], [2, 4]], [[3, 5]], [[4, 6]], [[5, 6]], [[6, 7], [6, 8], [6, 9]], [[7, 10]], [[8, 11]], [[9, 12]], [[10, 11]], [[11, 12]], [[12, 13], [12, 14]], [[13, 15]], [[14, 0]], [[15, 0]]], \n           'tig': [[[0, 1, 2]], [[1, 2, 3], [1, 2, 4]], [[2, 3, 5]], [[2, 4, 6]], [[3, 5, 6]], [[4, 6, 7], [5, 6, 7], [4, 6, 8], [5, 6, 8], [4, 6, 9], [5, 6, 9]], [[6, 7, 10]], [[6, 8, 11]], [[6, 9, 12]], [[7, 10, 11]], [[8, 11, 12], [10, 11, 12]], [[9, 12, 13], [11, 12, 13], [9, 12, 14], [11, 12, 14]], [[12, 13, 15]], [[12, 14, 0]], [[13, 15, 0]]]\n          }, \n         'pre': \n          {'seq': [0, 213, 71, 9, 158, 1170], \n           'uig': [[[1]], [[2]], [[3]], [[4]], [[5]]], \n           'big': [[[1, 4]], [[2, 5]], [[3, 0]], [[4, 5]], [[5, 0]]], \n           'tig': [[[0, 1, 4]], [[0, 2, 5]], [[0, 3, 0]], [[1, 4, 5]], [[2, 5, 0], [4, 5, 0]]]\n          }\n        }, \n         'output': {'label': 1}}\n        \"\"\"", "\n", "\n", "inputs", "=", "[", "]", "\n", "for", "x", "in", "xs", ":", "\n", "            ", "to_input", "=", "self", ".", "deal_dgcn_seq", "(", "x", "[", "'input'", "]", "[", "'qu'", "]", ",", "len_qu", ",", "name", "=", "'qu'", ")", "\n", "to_input", ".", "update", "(", "self", ".", "deal_dgcn_seq", "(", "x", "[", "'input'", "]", "[", "'pre'", "]", ",", "len_pre", ",", "name", "=", "'pre'", ")", ")", "\n", "inputs", ".", "append", "(", "to_input", ")", "\n", "\n", "", "output_keys", "=", "xs", "[", "0", "]", "[", "'output'", "]", ".", "keys", "(", ")", "\n", "outputs", "=", "{", "key", ":", "np", ".", "array", "(", "[", "x", "[", "'output'", "]", "[", "key", "]", "for", "x", "in", "xs", "]", ")", "\n", "for", "key", "in", "output_keys", "}", "\n", "\n", "input_keys", "=", "inputs", "[", "0", "]", ".", "keys", "(", ")", "\n", "inputs", "=", "{", "key", ":", "np", ".", "array", "(", "[", "x", "[", "key", "]", "for", "x", "in", "inputs", "]", ")", "\n", "for", "key", "in", "input_keys", "}", "\n", "\n", "return", "inputs", ",", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.src.preprocess.CPreprocess.deal_nlpccirqa_word_base": [[642, 665], ["set", "get_ids", "get_features", "get_features", "get_ids", "preprocess.CPreprocess.w2v.getWordID", "set", "set", "all"], "methods", ["home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.src.basic.W2V.getWordID"], ["def", "deal_nlpccirqa_word_base", "(", "self", ",", "x", ")", ":", "\n", "# none_feature_words=set(['<NW_uni>', '<NW_bi>', '<NW_tri>'])", "\n", "        ", "none_feature_words", "=", "set", "(", ")", "\n", "get_features", "=", "lambda", "group", ",", "seq", ":", "[", "1.", "if", "all", "(", "[", "t", "in", "group", ",", "not", "t", "in", "none_feature_words", "]", ")", "else", "0", "for", "t", "in", "seq", "]", "\n", "output", "=", "{", "}", "\n", "get_ids", "=", "lambda", "x", ":", "[", "self", ".", "w2v", ".", "getWordID", "(", "t", ")", "for", "t", "in", "x", "]", "\n", "\n", "output", "[", "'sent_features'", "]", "=", "[", "get_features", "(", "set", "(", "x", "[", "'qu'", "]", ")", ",", "t", ")", "for", "t", "in", "x", "[", "'sents'", "]", "]", "\n", "output", "[", "'qu_features'", "]", "=", "[", "get_features", "(", "set", "(", "t", ")", ",", "x", "[", "'qu'", "]", ")", "for", "t", "in", "x", "[", "'sents'", "]", "]", "\n", "\n", "output", "[", "'qu_ids'", "]", "=", "get_ids", "(", "x", "[", "'qu'", "]", ")", "\n", "output", "[", "'sent_ids'", "]", "=", "[", "get_ids", "(", "t", ")", "for", "t", "in", "x", "[", "'sents'", "]", "]", "\n", "output", "[", "'sent_labels'", "]", "=", "x", "[", "'labels'", "]", "\n", "\"\"\"\n        print (output['qu_ids'])\n        print (output['pre_ids'])\n        print (output['pre_labels'])\n        [155840, 198, 690, 1, 31, 3, 1457]\n        [[3879], [40353], [29904], [70, 36], [177], [508, 54], [299, 175], [1782], [8], [31], [388, 1555], [51, 54], [4444], [123], [245, 101], [205, 54], [1282], [4119, 225]]\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0]\n        \"\"\"", "\n", "\n", "return", "output", "\n", "", "def", "deal_nlpccirqa_train", "(", "self", ",", "x_base", ",", "num", "=", "10", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.src.preprocess.CPreprocess.deal_nlpccirqa_train": [[665, 685], ["len", "preprocess.CPreprocess.__get_seed", "list", "random.shuffle", "range", "range"], "methods", ["home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.src.preprocess.CPreprocess.__get_seed"], ["", "def", "deal_nlpccirqa_train", "(", "self", ",", "x_base", ",", "num", "=", "10", ")", ":", "\n", "        ", "pre_len", "=", "len", "(", "x_base", "[", "'sent_ids'", "]", ")", "\n", "\n", "self", ".", "__get_seed", "(", "random", ".", "seed", ")", "\n", "index", "=", "list", "(", "range", "(", "pre_len", ")", ")", "\n", "random", ".", "shuffle", "(", "index", ")", "\n", "\n", "true_id", "=", "[", "i", "for", "i", "in", "range", "(", "pre_len", ")", "if", "x_base", "[", "'sent_labels'", "]", "[", "i", "]", "==", "1", "]", "[", "0", "]", "\n", "if", "not", "true_id", "in", "index", "[", ":", "num", "]", ":", "\n", "            ", "index", "=", "[", "true_id", "]", "+", "index", "\n", "", "index", "=", "index", "[", ":", "num", "]", "\n", "\n", "output", "=", "[", "{", "'input'", ":", "{", "'qu'", ":", "x_base", "[", "'qu_ids'", "]", ",", "\n", "'sent'", ":", "x_base", "[", "'sent_ids'", "]", "[", "idt", "]", ",", "\n", "'qu_feature'", ":", "x_base", "[", "'qu_features'", "]", "[", "idt", "]", ",", "\n", "'sent_feature'", ":", "x_base", "[", "'sent_features'", "]", "[", "idt", "]", ",", "}", ",", "\n", "'output'", ":", "{", "'label'", ":", "x_base", "[", "'sent_labels'", "]", "[", "idt", "]", "}", "}", "\n", "for", "idt", "in", "index", "]", "\n", "\n", "return", "output", "\n", "", "def", "deal_nlpccirqa_test", "(", "self", ",", "x_base", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.src.preprocess.CPreprocess.deal_nlpccirqa_test": [[685, 693], ["range", "len"], "methods", ["None"], ["", "def", "deal_nlpccirqa_test", "(", "self", ",", "x_base", ")", ":", "\n", "        ", "output", "=", "[", "{", "'input'", ":", "{", "'qu'", ":", "x_base", "[", "'qu_ids'", "]", ",", "\n", "'sent'", ":", "x_base", "[", "'sent_ids'", "]", "[", "idt", "]", ",", "\n", "'qu_feature'", ":", "x_base", "[", "'qu_features'", "]", "[", "idt", "]", ",", "\n", "'sent_feature'", ":", "x_base", "[", "'sent_features'", "]", "[", "idt", "]", ",", "}", ",", "\n", "'output'", ":", "{", "'label'", ":", "x_base", "[", "'sent_labels'", "]", "[", "idt", "]", "}", "}", "\n", "for", "idt", "in", "range", "(", "len", "(", "x_base", "[", "'sent_ids'", "]", ")", ")", "]", "\n", "return", "output", "\n", "", "def", "padding_nlpccirqa_word", "(", "self", ",", "xs", ",", "len_qu", "=", "60", ",", "len_pre", "=", "120", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.src.preprocess.CPreprocess.padding_nlpccirqa_word": [[693, 720], ["outputs[].keys", "inputs[].keys", "numpy.array", "keras.preprocessing.sequence.pad_sequences", "keras.preprocessing.sequence.pad_sequences", "keras.preprocessing.sequence.pad_sequences", "keras.preprocessing.sequence.pad_sequences", "numpy.array", "numpy.array", "list", "enumerate", "numpy.array", "numpy.concatenate"], "methods", ["None"], ["", "def", "padding_nlpccirqa_word", "(", "self", ",", "xs", ",", "len_qu", "=", "60", ",", "len_pre", "=", "120", ")", ":", "\n", "        ", "\"\"\"   \u8fd4\u56de\u5b57\u5178\u6784\u5efa   \"\"\"", "\n", "outputs", "=", "[", "t", "[", "'output'", "]", "for", "t", "in", "xs", "]", "\n", "inputs", "=", "[", "t", "[", "'input'", "]", "for", "t", "in", "xs", "]", "\n", "output_keys", "=", "outputs", "[", "0", "]", ".", "keys", "(", ")", "\n", "input_keys", "=", "inputs", "[", "0", "]", ".", "keys", "(", ")", "\n", "outputs", "=", "{", "key", ":", "np", ".", "array", "(", "[", "t", "[", "key", "]", "for", "t", "in", "outputs", "]", ")", "\n", "for", "key", "in", "output_keys", "}", "\n", "inputs", "=", "{", "key", ":", "np", ".", "array", "(", "[", "t", "[", "key", "]", "for", "t", "in", "inputs", "]", ")", "\n", "for", "key", "in", "input_keys", "}", "\n", "\n", "\"\"\"   padding   \"\"\"", "\n", "head_words", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "0", ",", "0", "]", ")", "\n", "for", "key", "in", "[", "'qu'", ",", "'sent'", ",", "'qu_feature'", ",", "'sent_feature'", "]", ":", "\n", "            ", "inputs", "[", "key", "]", "=", "list", "(", "inputs", "[", "key", "]", ")", "\n", "matrix", "=", "inputs", "[", "key", "]", "\n", "for", "i", ",", "line", "in", "enumerate", "(", "matrix", ")", ":", "\n", "                ", "line", "=", "np", ".", "array", "(", "line", ")", "\n", "t", "=", "np", ".", "concatenate", "(", "(", "head_words", ",", "line", ")", ")", "\n", "matrix", "[", "i", "]", "=", "t", "\n", "\n", "", "", "inputs", "[", "'qu'", "]", "=", "pad_sequences", "(", "inputs", "[", "'qu'", "]", ",", "maxlen", "=", "len_qu", ",", "padding", "=", "'post'", ",", "truncating", "=", "'post'", ")", "\n", "inputs", "[", "'sent'", "]", "=", "pad_sequences", "(", "inputs", "[", "'sent'", "]", ",", "maxlen", "=", "len_pre", ",", "padding", "=", "'post'", ",", "truncating", "=", "'post'", ")", "\n", "inputs", "[", "'qu_feature'", "]", "=", "pad_sequences", "(", "inputs", "[", "'qu_feature'", "]", ",", "maxlen", "=", "len_qu", ",", "padding", "=", "'post'", ",", "truncating", "=", "'post'", ")", "\n", "inputs", "[", "'sent_feature'", "]", "=", "pad_sequences", "(", "inputs", "[", "'sent_feature'", "]", ",", "maxlen", "=", "len_pre", ",", "padding", "=", "'post'", ",", "truncating", "=", "'post'", ")", "\n", "\n", "return", "inputs", ",", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.src.preprocess.CPreprocess.deal_nlpccirqa_mws_base": [[722, 757], ["set", "keras.preprocessing.sequence.pad_sequences", "keras.preprocessing.sequence.pad_sequences", "get_ids", "preprocess.CPreprocess.deal_lattice_base", "get_ids", "preprocess.CPreprocess.deal_lattice_base", "get_features", "get_features", "all", "set", "set", "preprocess.CPreprocess.w2v.getWordID"], "methods", ["home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.src.preprocess.CPreprocess.deal_lattice_base", "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.src.preprocess.CPreprocess.deal_lattice_base", "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.src.basic.W2V.getWordID"], ["def", "deal_nlpccirqa_mws_base", "(", "self", ",", "x", ",", "len_qu", "=", "80", ",", "len_pre", "=", "160", ")", ":", "\n", "        ", "output", "=", "{", "}", "\n", "\"\"\"   \u83b7\u53d6 word-overlap \u7279\u5f81\uff0c\u76ee\u524d\u53ef\u80fd\u8fd8\u6709\u4e9b\u95ee\u9898~   \"\"\"", "\n", "# none_feature_words=set(['<NW_uni>', '<NW_bi>', '<NW_tri>'])", "\n", "none_feature_words", "=", "set", "(", ")", "\n", "get_features", "=", "lambda", "group", ",", "seq", ":", "[", "1.", "if", "all", "(", "[", "t", "[", "0", "]", "in", "group", ",", "not", "t", "[", "0", "]", "in", "none_feature_words", "]", ")", "else", "0.", "for", "t", "in", "seq", "]", "\n", "\n", "output", "[", "'sent_features'", "]", "=", "[", "[", "0.", "]", "+", "get_features", "(", "set", "(", "[", "tt", "[", "0", "]", "for", "tt", "in", "x", "[", "'qu'", "]", "]", ")", ",", "t", ")", "for", "t", "in", "x", "[", "'sents'", "]", "]", "\n", "output", "[", "'qu_features'", "]", "=", "[", "[", "0.", "]", "+", "get_features", "(", "set", "(", "[", "tt", "[", "0", "]", "for", "tt", "in", "t", "]", ")", ",", "x", "[", "'qu'", "]", ")", "for", "t", "in", "x", "[", "'sents'", "]", "]", "\n", "output", "[", "'sent_features'", "]", "=", "pad_sequences", "(", "output", "[", "'sent_features'", "]", ",", "maxlen", "=", "len_pre", ",", "padding", "=", "'post'", ",", "truncating", "=", "'post'", ")", "\n", "output", "[", "'qu_features'", "]", "=", "pad_sequences", "(", "output", "[", "'qu_features'", "]", ",", "maxlen", "=", "len_qu", ",", "padding", "=", "'post'", ",", "truncating", "=", "'post'", ")", "\n", "\n", "\"\"\"   \u8f6c\u4e3aID   \"\"\"", "\n", "get_ids", "=", "lambda", "x", ":", "[", "[", "self", ".", "w2v", ".", "getWordID", "(", "t", "[", "0", "]", ")", ",", "t", "[", "1", "]", ",", "t", "[", "2", "]", "]", "for", "t", "in", "x", "]", "\n", "\n", "output", "[", "'qu_ids'", "]", "=", "get_ids", "(", "x", "[", "'qu'", "]", ")", "\n", "output", "[", "'sent_ids'", "]", "=", "[", "get_ids", "(", "t", ")", "for", "t", "in", "x", "[", "'sents'", "]", "]", "\n", "\n", "qu_deals", "=", "self", ".", "deal_lattice_base", "(", "output", "[", "'qu_ids'", "]", ",", "max_len", "=", "len_qu", ")", "\n", "pres_deals", "=", "[", "self", ".", "deal_lattice_base", "(", "t", ",", "max_len", "=", "len_pre", ")", "for", "t", "in", "output", "[", "'sent_ids'", "]", "]", "\n", "output", "[", "'qu_ids'", "]", "=", "qu_deals", "\n", "output", "[", "'sent_ids'", "]", "=", "pres_deals", "\n", "\n", "output", "[", "'sent_labels'", "]", "=", "x", "[", "'labels'", "]", "\n", "\n", "\"\"\"\n        print (output['qu_ids'])\n        print (output['pre_ids'])\n        print (output['pre_labels'])\n        [[155841, 0, 1], [199, 1, 2], [102, 2, 3], [691, 2, 4], [204, 3, 4], [2, 4, 5], [213, 5, 6], [71, 5, 7], [9, 5, 8], [158, 6, 7], [1170, 7, 8], [4, 8, 9], [859, 9, 10], [5506, 9, 11], [49, 10, 11]]\n        [[[1226, 0, 1], [3880, 0, 2], [4223, 1, 2]], [[4885, 0, 1], [21775, 0, 2], [40354, 0, 4], [4276, 1, 2], [62040, 1, 3], [3856, 2, 3], [45976, 2, 4], [3511, 3, 4]], [[60, 0, 1], [29905, 0, 3], [2053, 1, 2], [958, 1, 3], [1050, 2, 3]], [[213, 0, 1], [71, 0, 2], [158, 1, 2], [183, 2, 3], [37, 2, 4], [486, 3, 4]], [[1298, 0, 1], [178, 0, 2], [18368, 1, 2]], [[4962, 0, 1], [509, 0, 2], [204, 1, 2], [1283, 1, 3], [55, 2, 3]], [[300, 0, 1], [176, 1, 2]], [[1225, 0, 1], [1783, 0, 2], [55, 1, 2]], [[213, 0, 1], [71, 0, 2], [9, 0, 3], [158, 1, 2], [1170, 2, 3]], [[395, 0, 1], [32, 0, 2], [226, 1, 2]], [[12543, 0, 1], [389, 0, 2], [360, 1, 2], [571, 2, 3], [1556, 2, 4], [2421, 3, 4]], [[23, 0, 1], [52, 0, 2], [517, 1, 2], [55, 2, 3]], [[608, 0, 1], [4445, 0, 2], [176, 1, 2]], [[244, 0, 1], [124, 0, 2], [1225, 1, 2]], [[246, 0, 1], [32313, 0, 2], [102, 1, 2]], [[131, 0, 1], [206, 0, 2], [2059, 1, 2], [55, 2, 3]], [[204, 0, 1], [1283, 0, 2], [55, 1, 2]], [[163, 0, 1], [4120, 0, 2], [395, 1, 2], [32, 1, 3], [226, 2, 3]]]\n        [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n        \"\"\"", "\n", "\n", "return", "output", "\n", "", "def", "padding_nlpccirqa_mws", "(", "self", ",", "xs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.src.preprocess.CPreprocess.padding_nlpccirqa_mws": [[757, 824], ["[].keys", "inputs[].keys", "sys.path.append", "get_para", "preprocess.CPreprocess.pad_apart", "preprocess.CPreprocess.update", "inputs.append", "numpy.array", "numpy.concatenate", "preprocess.CPreprocess.pad_apart", "numpy.expand_dims"], "methods", ["home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.model.model_nlpcc_irqa_cws.get_para", "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.src.preprocess.CPreprocess.pad_apart", "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.src.preprocess.CPreprocess.pad_apart"], ["", "def", "padding_nlpccirqa_mws", "(", "self", ",", "xs", ")", ":", "\n", "        ", "\"\"\"\n        \u8f93\u5165\u7684xs\u4e2d\u7684\u6bcf\u4e2ax\u7684\u793a\u4f8b~\n        {'input': \n        {'qu': \n          {'seq': [0, 155841, 199, 102, 691, 204, 2, 213, 71, 9, 158, 1170, 4, 859, 5506, 49], \n           'uig': [[[1]], [[2]], [[3]], [[4]], [[5]], [[6]], [[7]], [[8]], [[9]], [[10]], [[11]], [[12]], [[13]], [[14]], [[15]]], \n           'big': [[[1, 2]], [[2, 3], [2, 4]], [[3, 5]], [[4, 6]], [[5, 6]], [[6, 7], [6, 8], [6, 9]], [[7, 10]], [[8, 11]], [[9, 12]], [[10, 11]], [[11, 12]], [[12, 13], [12, 14]], [[13, 15]], [[14, 0]], [[15, 0]]], \n           'tig': [[[0, 1, 2]], [[1, 2, 3], [1, 2, 4]], [[2, 3, 5]], [[2, 4, 6]], [[3, 5, 6]], [[4, 6, 7], [5, 6, 7], [4, 6, 8], [5, 6, 8], [4, 6, 9], [5, 6, 9]], [[6, 7, 10]], [[6, 8, 11]], [[6, 9, 12]], [[7, 10, 11]], [[8, 11, 12], [10, 11, 12]], [[9, 12, 13], [11, 12, 13], [9, 12, 14], [11, 12, 14]], [[12, 13, 15]], [[12, 14, 0]], [[13, 15, 0]]]\n          }, \n         'pre': \n          {'seq': [0, 213, 71, 9, 158, 1170], \n           'uig': [[[1]], [[2]], [[3]], [[4]], [[5]]], \n           'big': [[[1, 4]], [[2, 5]], [[3, 0]], [[4, 5]], [[5, 0]]], \n           'tig': [[[0, 1, 4]], [[0, 2, 5]], [[0, 3, 0]], [[1, 4, 5]], [[2, 5, 0], [4, 5, 0]]]\n          }\n        }, \n         'output': {'label': 1}}\n        \"\"\"", "\n", "\n", "if", "not", "self", ".", "pad_info", "is", "None", ":", "\n", "            ", "paras", "=", "self", ".", "pad_info", "\n", "", "else", ":", "\n", "            ", "sys", ".", "path", ".", "append", "(", "'model'", ")", "\n", "from", "model_nlpcc_irqa_cws", "import", "get_para", "\n", "paras", "=", "get_para", "(", ")", "\n", "self", ".", "pad_info", "=", "paras", "\n", "\n", "", "\"\"\"\n        paras['qu_l']  = 50,\n        paras['pre_l'] = 20,\n        paras['qu_i'] = [\n            [[1,50]], \n            [[1,50], [3,60], [10,60]], \n            [[1,50], [3,90], [10,90], [30,90]], ]\n        paras['pre_i'] = [\n            [[1,20]], \n            [[1,20], [3,60], [10,60]], \n            [[1,20], [3,90], [10,90], [30,90]], ]\n        \"qu_sum1\": 50,      \"qu_sum2\": 76,      \"qu_sum3\": 92,\n        \"pre_sum1\": 20,     \"pre_sum2\": 46,     \"pre_sum3\": 62\n        \"\"\"", "\n", "\n", "inputs", "=", "[", "]", "\n", "for", "x", "in", "xs", ":", "\n", "            ", "to_input", "=", "self", ".", "pad_apart", "(", "x", "[", "'input'", "]", "[", "'qu'", "]", ",", "name", "=", "'qu'", ",", "paras", "=", "paras", ")", "\n", "to_input", ".", "update", "(", "self", ".", "pad_apart", "(", "x", "[", "'input'", "]", "[", "'sent'", "]", ",", "name", "=", "'sent'", ",", "paras", "=", "paras", ")", ")", "\n", "\n", "# pad feature\uff0c \u6700\u521d\u76840\u662f\u56e0\u4e3aid_seq\u4e2d\u6700\u5f00\u59cb\u6709\u4e00\u4e2apad~ # \u4fee\u6539@1\uff0c\u632a\u5230\u4e86base", "\n", "# to_input['qu_feature']   = pad_sequences([[0]+x['input']['qu_feature']], maxlen=paras['qu_l'], padding='post', truncating='post')[0]", "\n", "# to_input['sent_feature'] = pad_sequences([[0]+x['input']['sent_feature']], maxlen=paras['sent_l'], padding='post', truncating='post')[0]", "\n", "to_input", "[", "'qu_feature'", "]", "=", "x", "[", "'input'", "]", "[", "'qu_feature'", "]", "\n", "to_input", "[", "'sent_feature'", "]", "=", "x", "[", "'input'", "]", "[", "'sent_feature'", "]", "\n", "inputs", ".", "append", "(", "to_input", ")", "\n", "\n", "", "output_keys", "=", "xs", "[", "0", "]", "[", "'output'", "]", ".", "keys", "(", ")", "\n", "outputs", "=", "{", "key", ":", "np", ".", "array", "(", "[", "x", "[", "'output'", "]", "[", "key", "]", "for", "x", "in", "xs", "]", ")", "\n", "for", "key", "in", "output_keys", "}", "\n", "\n", "input_keys", "=", "inputs", "[", "0", "]", ".", "keys", "(", ")", "\n", "# inputs = {key:np.array([x[key] for x in inputs])", "\n", "#     for key in input_keys}", "\n", "inputs", "=", "{", "key", ":", "np", ".", "concatenate", "(", "[", "np", ".", "expand_dims", "(", "x", "[", "key", "]", ",", "0", ")", "for", "x", "in", "inputs", "]", ",", "axis", "=", "0", ")", "\n", "for", "key", "in", "input_keys", "}", "\n", "\n", "\n", "return", "inputs", ",", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.src.preprocess.CPreprocess.deal_nlpccirqa_gcn_base": [[826, 828], ["preprocess.CPreprocess.deal_nlpccirqa_mws_base"], "methods", ["home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.src.preprocess.CPreprocess.deal_nlpccirqa_mws_base"], ["def", "deal_nlpccirqa_gcn_base", "(", "self", ",", "x", ",", "len_qu", "=", "80", ",", "len_pre", "=", "160", ")", ":", "\n", "        ", "return", "self", ".", "deal_nlpccirqa_mws_base", "(", "x", ",", "len_qu", "=", "len_qu", ",", "len_pre", "=", "len_pre", ")", "\n", "", "def", "padding_nlpccirqa_gcn", "(", "self", ",", "xs", ",", "len_qu", "=", "80", ",", "len_pre", "=", "160", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.src.preprocess.CPreprocess.padding_nlpccirqa_gcn": [[828, 865], ["[].keys", "inputs[].keys", "preprocess.CPreprocess.deal_dgcn_seq", "preprocess.CPreprocess.update", "inputs.append", "numpy.array", "numpy.array", "preprocess.CPreprocess.deal_dgcn_seq"], "methods", ["home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.src.preprocess.CPreprocess.deal_dgcn_seq", "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.src.preprocess.CPreprocess.deal_dgcn_seq"], ["", "def", "padding_nlpccirqa_gcn", "(", "self", ",", "xs", ",", "len_qu", "=", "80", ",", "len_pre", "=", "160", ")", ":", "\n", "        ", "\"\"\"\n        \u8f93\u5165\u7684xs\u4e2d\u7684\u6bcf\u4e2ax\u7684\u793a\u4f8b~\n        {'input': \n        {'qu': \n          {'seq': [0, 155841, 199, 102, 691, 204, 2, 213, 71, 9, 158, 1170, 4, 859, 5506, 49], \n           'uig': [[[1]], [[2]], [[3]], [[4]], [[5]], [[6]], [[7]], [[8]], [[9]], [[10]], [[11]], [[12]], [[13]], [[14]], [[15]]], \n           'big': [[[1, 2]], [[2, 3], [2, 4]], [[3, 5]], [[4, 6]], [[5, 6]], [[6, 7], [6, 8], [6, 9]], [[7, 10]], [[8, 11]], [[9, 12]], [[10, 11]], [[11, 12]], [[12, 13], [12, 14]], [[13, 15]], [[14, 0]], [[15, 0]]], \n           'tig': [[[0, 1, 2]], [[1, 2, 3], [1, 2, 4]], [[2, 3, 5]], [[2, 4, 6]], [[3, 5, 6]], [[4, 6, 7], [5, 6, 7], [4, 6, 8], [5, 6, 8], [4, 6, 9], [5, 6, 9]], [[6, 7, 10]], [[6, 8, 11]], [[6, 9, 12]], [[7, 10, 11]], [[8, 11, 12], [10, 11, 12]], [[9, 12, 13], [11, 12, 13], [9, 12, 14], [11, 12, 14]], [[12, 13, 15]], [[12, 14, 0]], [[13, 15, 0]]]\n          }, \n         'pre': \n          {'seq': [0, 213, 71, 9, 158, 1170], \n           'uig': [[[1]], [[2]], [[3]], [[4]], [[5]]], \n           'big': [[[1, 4]], [[2, 5]], [[3, 0]], [[4, 5]], [[5, 0]]], \n           'tig': [[[0, 1, 4]], [[0, 2, 5]], [[0, 3, 0]], [[1, 4, 5]], [[2, 5, 0], [4, 5, 0]]]\n          }\n        }, \n         'output': {'label': 1}}\n        \"\"\"", "\n", "\n", "inputs", "=", "[", "]", "\n", "for", "x", "in", "xs", ":", "\n", "            ", "to_input", "=", "self", ".", "deal_dgcn_seq", "(", "x", "[", "'input'", "]", "[", "'qu'", "]", ",", "len_qu", ",", "name", "=", "'qu'", ")", "\n", "to_input", ".", "update", "(", "self", ".", "deal_dgcn_seq", "(", "x", "[", "'input'", "]", "[", "'sent'", "]", ",", "len_pre", ",", "name", "=", "'sent'", ")", ")", "\n", "to_input", "[", "'qu_feature'", "]", "=", "x", "[", "'input'", "]", "[", "'qu_feature'", "]", "\n", "to_input", "[", "'sent_feature'", "]", "=", "x", "[", "'input'", "]", "[", "'sent_feature'", "]", "\n", "inputs", ".", "append", "(", "to_input", ")", "\n", "\n", "", "output_keys", "=", "xs", "[", "0", "]", "[", "'output'", "]", ".", "keys", "(", ")", "\n", "outputs", "=", "{", "key", ":", "np", ".", "array", "(", "[", "x", "[", "'output'", "]", "[", "key", "]", "for", "x", "in", "xs", "]", ")", "\n", "for", "key", "in", "output_keys", "}", "\n", "\n", "input_keys", "=", "inputs", "[", "0", "]", ".", "keys", "(", ")", "\n", "inputs", "=", "{", "key", ":", "np", ".", "array", "(", "[", "x", "[", "key", "]", "for", "x", "in", "inputs", "]", ")", "\n", "for", "key", "in", "input_keys", "}", "\n", "\n", "return", "inputs", ",", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.src.data_delegate.CData.__init__": [[20, 31], ["type", "json.load", "codecs.open"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data", ",", "default_size", "=", "8000", ")", ":", "\n", "        ", "if", "type", "(", "data", ")", "is", "str", ":", "\n", "            ", "data", "=", "json", ".", "load", "(", "codecs", ".", "open", "(", "data", ",", "'r'", ",", "'utf-8'", ")", ")", "#[:365]", "\n", "", "self", ".", "data", "=", "data", "# \u539f\u59cb\u8bfb\u5165\u6570\u636e", "\n", "\n", "self", ".", "last_deal_base", "=", "None", "# \u4e0a\u6b21\u505abase\u7684function", "\n", "self", ".", "dealed_all_base", "=", "None", "# \u505a\u8fc7base\u4e4b\u540e\u7684data", "\n", "self", ".", "dealed_all", "=", "None", "# \u5904\u7406\u540e\u7684data", "\n", "self", ".", "shuffle_seed", "=", "42", "# \u968f\u673a\u6570\u79cd\u5b50", "\n", "\n", "self", ".", "default_size", "=", "default_size", "# \u9ed8\u8ba4\u7684\u8f93\u51fasize", "\n", "\n"]], "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.src.data_delegate.CData.analisys_report": [[32, 45], ["preprocess.report", "sorted", "preprocess.report.keys", "print", "print", "print", "numpy.percentile", "numpy.percentile", "numpy.percentile", "len", "analisys_large", "range", "range", "range"], "methods", ["home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.src.preprocess.CPreprocess.report"], ["", "@", "staticmethod", "\n", "def", "analisys_report", "(", "preprocess", ")", ":", "\n", "        ", "infor", "=", "preprocess", ".", "report", "(", ")", "\n", "analisys", "=", "lambda", "x", ":", "[", "np", ".", "percentile", "(", "x", ",", "t", ")", "for", "t", "in", "range", "(", "0", ",", "101", ",", "10", ")", "]", "\n", "analisys_large", "=", "lambda", "x", ":", "[", "np", ".", "percentile", "(", "x", ",", "t", ")", "for", "t", "in", "range", "(", "80", ",", "101", ",", "2", ")", "]", "\n", "analisys_small", "=", "lambda", "x", ":", "[", "np", ".", "percentile", "(", "x", ",", "t", ")", "for", "t", "in", "range", "(", "0", ",", "21", ",", "2", ")", "]", "\n", "keys", "=", "sorted", "(", "infor", ".", "keys", "(", ")", ")", "\n", "for", "k", "in", "keys", ":", "\n", "            ", "print", "(", "k", ",", "len", "(", "infor", "[", "k", "]", ")", ")", "\n", "# print(analisys(infor[k]))", "\n", "print", "(", "analisys_large", "(", "infor", "[", "k", "]", ")", ")", "\n", "# print(analisys_small(infor[k]))", "\n", "print", "(", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.src.data_delegate.CData.get_data": [[46, 48], ["None"], "methods", ["None"], ["", "", "def", "get_data", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.src.data_delegate.CData.random_seed": [[49, 55], ["random.seed", "random.seed"], "methods", ["None"], ["", "def", "random_seed", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "if", "seed", "is", "None", ":", "\n", "            ", "self", ".", "shuffle_seed", "+=", "1", "\n", "random", ".", "seed", "(", "self", ".", "shuffle_seed", ")", "\n", "", "else", ":", "\n", "            ", "random", ".", "seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.src.data_delegate.CData.deal_base": [[56, 68], ["any", "list", "tqdm.tqdm.tqdm", "map"], "methods", ["None"], ["", "", "def", "deal_base", "(", "self", ",", "function", "=", "None", ",", "force", "=", "False", ",", "verbose", "=", "True", ")", ":", "\n", "        ", "if", "function", "is", "None", ":", "\n", "            ", "function", "=", "lambda", "x", ":", "x", "\n", "\n", "", "if", "any", "(", "[", "force", ",", "self", ".", "dealed_all_base", "is", "None", ",", "not", "function", "is", "self", ".", "last_deal_base", "]", ")", ":", "\n", "            ", "self", ".", "last_deal_base", "=", "function", "\n", "\n", "to_deal", "=", "self", ".", "data", "\n", "if", "verbose", ":", "\n", "                ", "to_deal", "=", "tqdm", "(", "to_deal", ")", "\n", "\n", "", "self", ".", "dealed_all_base", "=", "list", "(", "map", "(", "function", ",", "to_deal", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.src.data_delegate.CData.get_data_generator": [[69, 147], ["any", "all", "all", "len", "len", "data_delegate.CData.get_data_generator.generator"], "methods", ["None"], ["", "", "def", "get_data_generator", "(", "self", ",", "group_padding_function", ",", "batch_size", ",", "deal_base_func", "=", "None", ",", "deal_function", "=", "None", ",", "size", "=", "None", ",", "\n", "regenerate", "=", "True", ",", "shuffle_seed", "=", "None", ",", "shuffle", "=", "True", ",", "verbose", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        @size : None, \u4f7f\u7528default\u7684\u5927\u5c0f\uff1b False, \u4e0d\u8003\u8651\u5927\u5c0f\uff0c\u76f4\u63a5\u8fd4\u56de\u5168\u90e8\u6570\u636e~\n        @deal_function : \u6570\u636e\u5904\u7406\u7684\u51fd\u6570\uff0c\n            \u8f93\u51fa\u683c\u5f0f\uff1a\n            {'input':{dict field:np.array}, 'output':{dict field:np.array}}\n            \u6216:\n            [list of {'input':{dict field:np.array}, 'output':{dict field:np.array}}]\n            \u4e3a\u4ece\u6bcf\u7ec4\u6570\u636e\u4e2d\u5f97\u5230\u7684\u8bad\u7ec3\u6570\u636e\u3001\u6d4b\u8bd5\u6570\u636e~\uff08\u4ece\u4e00\u4e2a\u6570\u636e\u4e2d\u53ef\u80fd\u5f97\u5230\u591a\u4e2apair\u4e4b\u7c7b\u7684~\uff09\n        @deal_base_func : \u6570\u636e\u57fa\u7840\u5904\u7406\u51fd\u6570\uff0c\u4e00\u822c\u5efa\u8bae\u4e3a\u5f15\u5165\u5916\u90e8\u8d44\u6e90\uff08\u5982\u8bcd\u5411\u91cf\u8868\uff09\u5e76\u5168\u5c40\u4fdd\u6301\u4e0d\u53d8~\n        @group_padding_function : \u5bf9\u5904\u7406\u597d\u7684\u77e9\u9635\u505a\u540e\u5904\u7406padding\u7684\u51fd\u6570~ \u4e3aNone\u5c31\u4e0d\u505a~\n            \u8f93\u5165\u4e00\u4e2alist of dict, \u8f93\u51fa\u662f dict of matrix, \u8fd9\u91cc\u5efa\u8bae\u653e\u4e00\u4e9b\u6bd4\u8f83\u6162\u7684\u64cd\u4f5c~\n        @regenerate : \u5982\u679c\u8be5\u5bf9\u8c61\u4ee5\u524d\u88ab\u9884\u5904\u7406\u8fc7\uff0c\u662f\u5426\u91cd\u65b0\u751f\u6210~\u4f46\u4e0d\u91cd\u65b0\u505adeal_base_func\n            \u5efa\u8bae\u4e3aTrue\uff0c\u8003\u8651\u5230\u751f\u6210\u6570\u636e\u4e2d\u5176\u5b9e\u4e5f\u53ef\u80fd\u6709\u4e00\u4e9b\u91c7\u6837\u76f8\u5173\u7684\u8fc7\u7a0b\uff0c\u800c\u4e14\u4e00\u822c\u5e76\u4e0d\u6162~\u6162\u7684\u4e1c\u897f\u5efa\u8bae\u653e\u5230deal_base_func\u4e2d\n        @shuffle : \u5728size\u4e0d\u4e3afalse\u65f6\uff0c\u5f3a\u70c8\u5efa\u8bae\u5176\u4e3atrue\n                   \u5728size\u4e3afalse\u65f6\uff0c\u4e3a\u4e86\u4fdd\u5e8f\uff0c\u5efa\u8bae\u5176\u4e3afalse\n        @verbose : \u662f\u5426\u663e\u793a\u5904\u7406\u6570\u636e\u7684\u8fdb\u5ea6\u6761~\n\n        \"\"\"", "\n", "if", "size", "is", "None", ":", "\n", "            ", "size", "=", "self", ".", "default_size", "\n", "\n", "", "\"\"\"   \u6570\u636e\u5904\u7406   \"\"\"", "\n", "if", "any", "(", "[", "self", ".", "dealed_all", "is", "None", ",", "regenerate", "is", "True", "]", ")", ":", "\n", "# deal_base", "\n", "            ", "self", ".", "deal_base", "(", "function", "=", "deal_base_func", ",", "force", "=", "False", ",", "verbose", "=", "verbose", ")", "\n", "\n", "# deal function", "\n", "to_deal", "=", "self", ".", "dealed_all_base", "\n", "if", "verbose", ":", "\n", "                ", "to_deal", "=", "tqdm", "(", "to_deal", ")", "\n", "\n", "", "if", "deal_function", "is", "None", ":", "\n", "                ", "deal_function", "=", "lambda", "x", ":", "x", "\n", "\n", "", "self", ".", "dealed_all", "=", "list", "(", "map", "(", "deal_function", ",", "to_deal", ")", ")", "\n", "", "data_all", "=", "[", "t", "for", "t", "in", "self", ".", "dealed_all", "]", "# deep copy", "\n", "\n", "\"\"\"   shuffle \u5904\u7406\uff0c\u5728 size \u4e0d\u4e3afalse\u65f6\u5fc5\u987b\u8fdb\u884c~  \"\"\"", "\n", "if", "all", "(", "[", "not", "size", "is", "False", ",", "shuffle", "is", "False", "]", ")", ":", "\n", "            ", "print", "(", "'warnning!!! size is not full, but shuffle is False!!'", ")", "\n", "", "if", "all", "(", "[", "size", "is", "False", ",", "shuffle", "is", "True", "]", ")", ":", "\n", "            ", "print", "(", "'warnning!!! size is full, but shuffle is True!!'", ")", "\n", "\n", "", "if", "shuffle", ":", "\n", "            ", "self", ".", "random_seed", "(", "shuffle_seed", ")", "\n", "random", ".", "shuffle", "(", "data_all", ")", "\n", "\n", "\n", "", "\"\"\"  \u6570\u91cf\u88c1\u526a  \"\"\"", "\n", "if", "not", "size", "is", "False", ":", "\n", "            ", "data_all", "=", "data_all", "[", ":", "size", "]", "\n", "", "data_to_return", "=", "[", "t", "for", "t", "in", "data_all", "]", "\n", "data_size", "=", "len", "(", "data_to_return", ")", "\n", "\n", "\"\"\"\n        list \u7684\u6253\u7834\n        \u5982\u679cdeal_function\u8fd4\u56de\u7684\u662f\u4e00\u7ec4\u8bad\u7ec3\u6570\u636e\u800c\u4e0d\u662f\u4e00\u4e2a\u7684\u8bdd\uff0c\u5728\u8fd9\u91cc\u8fdb\u884c\u6062\u590d~\n        \"\"\"", "\n", "if", "type", "(", "data_to_return", "[", "0", "]", ")", "is", "list", ":", "\n", "            ", "data_to_return", "=", "[", "t", "for", "tt", "in", "data_to_return", "for", "t", "in", "tt", "]", "\n", "\n", "# # \u5982\u679c\u6253\u7834list\u7684\u8bdd\uff0c\u91cd\u65b0\u505a\u4e00\u6b21shuffle\uff1f", "\n", "# if shuffle :", "\n", "#     self.random_seed(shuffle_seed)", "\n", "#     random.shuffle(data_to_return)", "\n", "\n", "", "self", ".", "it_size", "=", "len", "(", "list", "(", "range", "(", "0", ",", "len", "(", "data_to_return", ")", ",", "batch_size", ")", ")", ")", "\n", "\n", "\"\"\"   generator   \"\"\"", "\n", "def", "generator", "(", "data_to_return", ",", "batch_size", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "0", ",", "len", "(", "data_to_return", ")", ",", "batch_size", ")", ":", "\n", "                ", "data_selected", "=", "data_to_return", "[", "i", ":", "i", "+", "batch_size", "]", "\n", "inputs", ",", "outputs", "=", "group_padding_function", "(", "data_selected", ")", "\n", "yield", "(", "inputs", ",", "outputs", ")", "\n", "\n", "", "", "return", "generator", "(", "data_to_return", ",", "batch_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.src.basic.W2V.__init__": [[18, 60], ["codecs.open", "set", "set", "len", "set", "zip", "tqdm.tqdm.tqdm", "line.strip().split.strip().split.strip().split", "numpy.array", "len", "basic.W2V.w2i.keys", "len", "list", "basic.W2V.addWord", "map", "numpy.zeros", "basic.W2V.wset.add", "len", "sum", "len", "line.strip().split.strip().split.split", "line.strip().split.strip().split.strip", "float", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.src.basic.W2V.addWord"], ["    ", "def", "__init__", "(", "self", ",", "wordVecFile", ",", "split", "=", "' '", ",", "verbose", "=", "False", ")", ":", "\n", "        ", "input_file", "=", "codecs", ".", "open", "(", "wordVecFile", ",", "encoding", "=", "'utf-8'", ")", "\n", "\n", "pad_word", "=", "'<padding>'", "\n", "self", ".", "w2i", "=", "{", "}", "\n", "self", ".", "i2v", "=", "{", "}", "\n", "self", ".", "wset", "=", "set", "(", ")", "\n", "\n", "start", "=", "True", "\n", "if", "verbose", ":", "\n", "            ", "input_file", "=", "tqdm", "(", "input_file", ")", "\n", "", "for", "line", "in", "input_file", ":", "\n", "            ", "if", "start", ":", "\n", "                ", "start", "=", "False", "\n", "p0", ",", "p1", "=", "map", "(", "int", ",", "line", ".", "split", "(", "' '", ")", ")", "# 155837 300", "\n", "self", ".", "w2i", "[", "pad_word", "]", "=", "0", "\n", "self", ".", "i2v", "[", "0", "]", "=", "np", ".", "zeros", "(", "p1", ")", "\n", "self", ".", "wset", ".", "add", "(", "pad_word", ")", "\n", "continue", "\n", "\n", "", "line", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "split", ")", "\n", "word", "=", "line", "[", "0", "]", "\n", "vec", "=", "np", ".", "array", "(", "[", "float", "(", "t", ")", "for", "t", "in", "line", "[", "1", ":", "]", "]", ")", "\n", "\n", "self", ".", "w2i", "[", "word", "]", "=", "len", "(", "self", ".", "w2i", ")", "\n", "self", ".", "i2v", "[", "self", ".", "w2i", "[", "word", "]", "]", "=", "vec", "\n", "", "self", ".", "wset", "=", "set", "(", "self", ".", "w2i", ".", "keys", "(", ")", ")", "\n", "self", ".", "size", "=", "len", "(", "self", ".", "wset", ")", "\n", "\n", "vec_lens", "=", "set", "(", "[", "len", "(", "self", ".", "i2v", "[", "k", "]", ")", "for", "k", "in", "self", ".", "i2v", "]", ")", "\n", "assert", "len", "(", "vec_lens", ")", "==", "1", "\n", "self", ".", "vec_len", "=", "list", "(", "vec_lens", ")", "[", "0", "]", "\n", "\n", "uni_word", "=", "[", "self", ".", "w2i", "[", "t", "]", "for", "t", "in", "self", ".", "wset", "if", "len", "(", "t", ")", "==", "1", "]", "\n", "bi_word", "=", "[", "self", ".", "w2i", "[", "t", "]", "for", "t", "in", "self", ".", "wset", "if", "len", "(", "t", ")", "==", "2", "]", "\n", "tri_word", "=", "[", "self", ".", "w2i", "[", "t", "]", "for", "t", "in", "self", ".", "wset", "if", "len", "(", "t", ")", "==", "3", "]", "\n", "oi_word", "=", "[", "self", ".", "w2i", "[", "t", "]", "for", "t", "in", "self", ".", "wset", "if", "len", "(", "t", ")", ">", "3", "]", "\n", "groups", "=", "[", "uni_word", ",", "bi_word", ",", "tri_word", ",", "oi_word", "]", "\n", "average_vectors", "=", "[", "sum", "(", "[", "self", ".", "i2v", "[", "t", "]", "for", "t", "in", "group", "]", ")", "/", "len", "(", "group", ")", "for", "group", "in", "groups", "]", "\n", "names", "=", "[", "'<NW_uni>'", ",", "'<NW_bi>'", ",", "'<NW_tri>'", ",", "'<NW_oi>'", "]", "\n", "for", "n", ",", "v", "in", "zip", "(", "names", ",", "average_vectors", ")", ":", "\n", "            ", "self", ".", "addWord", "(", "n", ",", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.src.basic.W2V.__len__": [[61, 63], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "wset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.src.basic.W2V.getVecLen": [[64, 66], ["None"], "methods", ["None"], ["", "def", "getVecLen", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "vec_len", "\n", "\n"]], "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.src.basic.W2V.addWord": [[67, 74], ["basic.W2V.wset.add", "len", "len"], "methods", ["None"], ["", "def", "addWord", "(", "self", ",", "word", ",", "npArray", ")", ":", "\n", "        ", "assert", "not", "word", "in", "self", ".", "wset", "\n", "self", ".", "wset", ".", "add", "(", "word", ")", "\n", "self", ".", "size", "=", "len", "(", "self", ".", "wset", ")", "\n", "\n", "self", ".", "w2i", "[", "word", "]", "=", "len", "(", "self", ".", "w2i", ")", "\n", "self", ".", "i2v", "[", "self", ".", "w2i", "[", "word", "]", "]", "=", "npArray", "\n", "\n"]], "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.src.basic.W2V.getWordID": [[75, 85], ["len", "len", "len"], "methods", ["None"], ["", "def", "getWordID", "(", "self", ",", "word", ")", ":", "\n", "        ", "if", "word", "in", "self", ".", "wset", ":", "\n", "            ", "return", "self", ".", "w2i", "[", "word", "]", "\n", "", "if", "len", "(", "word", ")", "==", "1", ":", "\n", "            ", "return", "self", ".", "w2i", "[", "'<NW_uni>'", "]", "\n", "", "if", "len", "(", "word", ")", "==", "2", ":", "\n", "            ", "return", "self", ".", "w2i", "[", "'<NW_bi>'", "]", "\n", "", "if", "len", "(", "word", ")", "==", "3", ":", "\n", "            ", "return", "self", ".", "w2i", "[", "'<NW_tri>'", "]", "\n", "", "return", "self", ".", "w2i", "[", "'<NW_oi>'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.src.basic.W2V.getWordVector": [[86, 92], ["numpy.array", "basic.W2V.getWordID"], "methods", ["home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.src.basic.W2V.getWordID"], ["", "def", "getWordVector", "(", "self", ",", "word", ")", ":", "\n", "        ", "if", "not", "word", "in", "self", ".", "wset", ":", "\n", "            ", "return", "None", "\n", "\n", "", "v", "=", "np", ".", "array", "(", "self", ".", "i2v", "[", "self", ".", "getWordID", "(", "word", ")", "]", ")", "\n", "return", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.src.basic.W2V.getMatrix": [[93, 98], ["range", "numpy.array", "ret.append"], "methods", ["None"], ["", "def", "getMatrix", "(", "self", ")", ":", "\n", "        ", "ret", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "size", ")", ":", "\n", "            ", "ret", ".", "append", "(", "self", ".", "i2v", "[", "i", "]", ")", "\n", "", "return", "np", ".", "array", "(", "ret", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.src.basic.CWS.__init__": [[101, 108], ["type", "codecs.open", "set", "set", "t.strip"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "wordBank", "=", "None", ")", ":", "\n", "        ", "if", "not", "wordBank", "is", "None", ":", "\n", "            ", "if", "type", "(", "wordBank", ")", "is", "str", ":", "\n", "                ", "input_file", "=", "codecs", ".", "open", "(", "wordBank", ",", "'r'", ",", "'utf-8'", ")", "\n", "self", ".", "wordBank", "=", "set", "(", "[", "t", ".", "strip", "(", ")", "for", "t", "in", "input_file", "]", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "wordBank", "=", "set", "(", "wordBank", ")", "\n", "", "", "", "def", "getWordSet", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.src.basic.CWS.getWordSet": [[108, 111], ["None"], "methods", ["None"], ["", "", "", "def", "getWordSet", "(", "self", ")", ":", "\n", "        ", "assert", "not", "self", ".", "wordBank", "is", "None", "\n", "return", "self", ".", "wordBank", "\n", "\n"]], "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.src.basic.CWS.MM": [[113, 133], ["len", "range", "min", "wordList.append", "len", "wordList.append"], "methods", ["None"], ["def", "MM", "(", "self", ",", "sentence", ",", "max_n", "=", "20", ")", ":", "\n", "        ", "assert", "not", "self", ".", "wordBank", "is", "None", "\n", "\n", "start_loc", "=", "0", "\n", "wordList", "=", "[", "]", "\n", "\n", "while", "start_loc", "<", "len", "(", "sentence", ")", ":", "\n", "            ", "mark_have", "=", "False", "\n", "for", "end_loc", "in", "range", "(", "min", "(", "start_loc", "+", "max_n", ",", "len", "(", "sentence", ")", ")", ",", "start_loc", "+", "1", ",", "-", "1", ")", ":", "\n", "                ", "word_t", "=", "sentence", "[", "start_loc", ":", "end_loc", "]", "\n", "if", "word_t", "in", "self", ".", "wordBank", ":", "\n", "                    ", "wordList", ".", "append", "(", "word_t", ")", "\n", "start_loc", "=", "end_loc", "\n", "mark_have", "=", "True", "\n", "break", "\n", "", "", "if", "not", "mark_have", ":", "\n", "                ", "wordList", ".", "append", "(", "sentence", "[", "start_loc", "]", ")", "\n", "start_loc", "+=", "1", "\n", "", "", "wordList", "=", "[", "word", "for", "word", "in", "wordList", "if", "not", "word", "==", "' '", "]", "\n", "return", "wordList", "\n", "", "def", "RMM", "(", "self", ",", "sentence", ",", "max_n", "=", "20", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.src.basic.CWS.RMM": [[133, 155], ["len", "range", "min", "wordList.append", "len", "wordList.append"], "methods", ["None"], ["", "def", "RMM", "(", "self", ",", "sentence", ",", "max_n", "=", "20", ")", ":", "\n", "        ", "assert", "not", "self", ".", "wordBank", "is", "None", "\n", "\n", "start_loc", "=", "0", "\n", "wordList", "=", "[", "]", "\n", "sentence", "=", "sentence", "[", ":", ":", "-", "1", "]", "\n", "\n", "while", "start_loc", "<", "len", "(", "sentence", ")", ":", "\n", "            ", "mark_have", "=", "False", "\n", "for", "end_loc", "in", "range", "(", "min", "(", "start_loc", "+", "max_n", ",", "len", "(", "sentence", ")", ")", ",", "start_loc", "+", "1", ",", "-", "1", ")", ":", "\n", "                ", "word_t", "=", "sentence", "[", "start_loc", ":", "end_loc", "]", "\n", "word_t", "=", "word_t", "[", ":", ":", "-", "1", "]", "\n", "if", "word_t", "in", "self", ".", "wordBank", ":", "\n", "                    ", "wordList", ".", "append", "(", "word_t", ")", "\n", "start_loc", "=", "end_loc", "\n", "mark_have", "=", "True", "\n", "break", "\n", "", "", "if", "not", "mark_have", ":", "\n", "                ", "wordList", ".", "append", "(", "sentence", "[", "start_loc", "]", ")", "\n", "start_loc", "+=", "1", "\n", "", "", "wordList", "=", "[", "word", "for", "word", "in", "wordList", "if", "not", "word", "==", "' '", "]", "\n", "return", "wordList", "[", ":", ":", "-", "1", "]", "\n", "", "def", "MWS", "(", "self", ",", "sentence", ",", "index", "=", "False", ",", "max_len", "=", "20", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.src.basic.CWS.MWS": [[155, 169], ["range", "len", "range", "len", "wordList.append", "wordList.append"], "methods", ["None"], ["", "def", "MWS", "(", "self", ",", "sentence", ",", "index", "=", "False", ",", "max_len", "=", "20", ")", ":", "\n", "        ", "assert", "not", "self", ".", "wordBank", "is", "None", "\n", "wordList", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "sentence", ")", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "i", "+", "1", ",", "len", "(", "sentence", ")", "+", "1", ")", ":", "\n", "                ", "if", "j", "-", "i", ">", "max_len", ":", "\n", "                    ", "break", "\n", "", "word_t", "=", "sentence", "[", "i", ":", "j", "]", "\n", "if", "word_t", "in", "self", ".", "wordBank", ":", "\n", "                    ", "if", "index", ":", "\n", "                        ", "wordList", ".", "append", "(", "[", "word_t", ",", "i", ",", "j", "]", ")", ";", "\n", "", "else", ":", "\n", "                        ", "wordList", ".", "append", "(", "word_t", ")", ";", "\n", "", "", "", "", "return", "wordList", "\n", "\n"]], "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.src.basic.CWS.jieba_cws": [[171, 173], ["jieba.cut"], "methods", ["None"], ["def", "jieba_cws", "(", "self", ",", "sentence", ")", ":", "\n", "        ", "return", "' '", ".", "join", "(", "jieba", ".", "cut", "(", "sentence", ")", ")", ".", "split", "(", "' '", ")", "\n", "", "def", "jieba_postOnly", "(", "self", ",", "sentence", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.src.basic.CWS.jieba_postOnly": [[173, 176], ["type", "jieba.posseg.cut"], "methods", ["None"], ["", "def", "jieba_postOnly", "(", "self", ",", "sentence", ")", ":", "\n", "        ", "assert", "not", "type", "(", "sentence", ")", "is", "list", "\n", "return", "[", "w", "for", "w", ",", "s", "in", "jieba", ".", "posseg", ".", "cut", "(", "sentence", ")", "]", "\n", "", "def", "jieba_PosWod", "(", "self", ",", "sentence", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.src.basic.CWS.jieba_PosWod": [[176, 179], ["type", "jieba.posseg.cut"], "methods", ["None"], ["", "def", "jieba_PosWod", "(", "self", ",", "sentence", ")", ":", "\n", "        ", "assert", "not", "type", "(", "sentence", ")", "is", "list", "\n", "return", "[", "[", "w", ",", "s", "]", "for", "w", ",", "s", "in", "jieba", ".", "posseg", ".", "cut", "(", "sentence", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.src.basic.CWS.jieba_cws2": [[182, 189], ["basic.CWS.MM", "jieba.cut"], "methods", ["home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.src.basic.CWS.MM"], ["def", "jieba_cws2", "(", "self", ",", "sentence", ")", ":", "\n", "        ", "assert", "not", "self", ".", "wordBank", "is", "None", "\n", "result", "=", "[", "]", "\n", "words", "=", "' '", ".", "join", "(", "jieba", ".", "cut", "(", "sentence", ")", ")", ".", "split", "(", "' '", ")", "\n", "for", "word", "in", "words", ":", "\n", "            ", "result", "+=", "self", ".", "MM", "(", "word", ")", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.src.basic.check_unk_seg": [[190, 209], ["print", "codecs_in().readlines", "set", "json_load", "print", "codecs.open", "json.load", "len", "len", "codecs.open", "codecs_in", "t.strip", "len", "len"], "function", ["None"], ["", "", "def", "check_unk_seg", "(", "input_path", ",", "word_bank_path", ")", ":", "\n", "    ", "codecs_in", "=", "lambda", "x", ":", "codecs", ".", "open", "(", "x", ",", "'r'", ",", "'utf-8'", ")", "\n", "json_load", "=", "lambda", "x", ":", "json", ".", "load", "(", "codecs", ".", "open", "(", "x", ",", "'r'", ",", "'utf-8'", ")", ")", "\n", "\n", "print", "(", "word_bank_path", ")", "\n", "word_bank", "=", "codecs_in", "(", "word_bank_path", ")", ".", "readlines", "(", ")", "\n", "word_bank", "=", "set", "(", "[", "t", ".", "strip", "(", ")", "for", "t", "in", "word_bank", "]", ")", "\n", "\n", "can", "=", "'sents'", "\n", "datas", "=", "json_load", "(", "input_path", ")", "\n", "all_words", "=", "0", "\n", "in_words", "=", "0", "\n", "for", "dt", "in", "datas", ":", "\n", "        ", "all_words", "+=", "len", "(", "dt", "[", "'qu'", "]", ")", "\n", "in_words", "+=", "len", "(", "[", "t", "for", "t", "in", "dt", "[", "'qu'", "]", "if", "t", "[", "0", "]", "in", "word_bank", "]", ")", "\n", "for", "sent", "in", "dt", "[", "can", "]", ":", "\n", "            ", "all_words", "+=", "len", "(", "sent", ")", "\n", "in_words", "+=", "len", "(", "[", "t", "for", "t", "in", "sent", "if", "t", "[", "0", "]", "in", "word_bank", "]", ")", "\n", "", "", "print", "(", "100.", "*", "in_words", "/", "all_words", ",", "in_words", ",", "all_words", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.src.basic.norm_embed": [[210, 221], ["codecs_in", "tqdm.tqdm", "codecs.open", "line.strip().split", "line.strip"], "function", ["None"], ["", "def", "norm_embed", "(", "input_path", ",", "output_path", ")", ":", "\n", "    ", "codecs_in", "=", "lambda", "x", ":", "codecs", ".", "open", "(", "x", ",", "'r'", ",", "'utf-8'", ")", "\n", "\n", "input_file", "=", "codecs_in", "(", "input_path", ")", "\n", "head_line", "=", "None", "\n", "for", "line", "in", "tqdm", "(", "input_file", ")", ":", "\n", "        ", "if", "head_line", "is", "None", ":", "\n", "            ", "head_line", "=", "line", "\n", "continue", "\n", "\n", "", "ls", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.model.model_nlpcc_irqa_gcn.get_model": [[29, 151], ["keras.layers.Input", "keras.layers.Input", "keras.layers.Input", "keras.layers.Input", "numpy.shape", "keras.layers.Embedding", "keras.layers.Embedding.", "keras.layers.Embedding.", "keras.layers.Input", "keras.layers.Input", "keras.layers.Input", "keras.layers.Input", "keras.layers.Input", "keras.layers.Input", "keras.layers.Lambda", "keras.layers.Lambda.", "keras.layers.Lambda.", "keras.layers.Dense", "model_nlpcc_kbre_gcn.gcn_layer", "model_nlpcc_kbre_gcn.gcn_layer", "range", "model_base.count_similarity", "keras.models.Model", "keras.models.Model.compile", "keras.layers.Reshape", "keras.layers.Reshape", "keras.layers.Concatenate", "keras.layers.Concatenate", "keras.layers.Dense", "keras.layers.Dense", "keras.layers.Dense", "keras.layers.Dense", "model_nlpcc_kbre_gcn.gcn_layer", "model_nlpcc_kbre_gcn.gcn_layer", "keras.expand_dims", "keras.layers.Dense", "keras.layers.Dense", "keras.layers.Dense", "keras.layers.Dense", "keras.layers.Activation", "keras.layers.Activation", "keras.layers.Dense", "keras.layers.Dense", "keras.layers.Dense", "keras.layers.Add", "keras.layers.Add", "keras.layers.Dense", "keras.layers.Dense", "keras.layers.Dense", "keras.layers.Dense", "keras.layers.Dense", "keras.layers.Dense"], "function", ["home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.model.model_nlpcc_kbre_gcn.gcn_layer", "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.model.model_nlpcc_kbre_gcn.gcn_layer", "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.model.model_base.count_similarity", "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.model.model_nlpcc_kbre_gcn.gcn_layer", "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.model.model_nlpcc_kbre_gcn.gcn_layer"], ["def", "get_model", "(", "wordMatrix", ",", "model_param", "=", "None", ")", ":", "\n", "    ", "if", "model_param", "is", "None", ":", "\n", "        ", "model_param", "=", "{", "'layer_num'", ":", "2", "}", "\n", "", "if", "not", "'pooling_mode'", "in", "model_param", ":", "\n", "        ", "model_param", "[", "'pooling_mode'", "]", "=", "'gcn'", "\n", "", "if", "not", "'if_d'", "in", "model_param", ":", "\n", "        ", "model_param", "[", "'if_d'", "]", "=", "True", "\n", "", "if", "not", "'n_param'", "in", "model_param", ":", "\n", "        ", "model_param", "[", "'n_param'", "]", "=", "1024", "\n", "", "qu_l", "=", "80", "\n", "pre_l", "=", "160", "\n", "pad_l", "=", "5", "\n", "\n", "\"\"\"   inputs   \"\"\"", "\n", "qu_ids", "=", "Input", "(", "shape", "=", "(", "qu_l", ",", ")", ",", "dtype", "=", "'int32'", ",", "name", "=", "'qu'", ")", "\n", "pre_ids", "=", "Input", "(", "shape", "=", "(", "pre_l", ",", ")", ",", "dtype", "=", "'int32'", ",", "name", "=", "'sent'", ")", "\n", "qu_feature", "=", "Input", "(", "shape", "=", "(", "qu_l", ",", ")", ",", "dtype", "=", "'float32'", ",", "name", "=", "'qu_feature'", ")", "\n", "pre_feature", "=", "Input", "(", "shape", "=", "(", "pre_l", ",", ")", ",", "dtype", "=", "'float32'", ",", "name", "=", "'sent_feature'", ")", "\n", "input_layers", "=", "[", "qu_ids", ",", "pre_ids", ",", "qu_feature", ",", "pre_feature", "]", "\n", "# (?, 50) (?, 20)", "\n", "\n", "\"\"\"   embedding   \"\"\"", "\n", "input_dim", ",", "output_dim", "=", "np", ".", "shape", "(", "wordMatrix", ")", "\n", "embedding", "=", "Embedding", "(", "input_dim", ",", "output_dim", ",", "weights", "=", "[", "wordMatrix", "]", ",", "name", "=", "'embedding'", ")", "\n", "\n", "qu_words", "=", "embedding", "(", "qu_ids", ")", "\n", "pre_words", "=", "embedding", "(", "pre_ids", ")", "\n", "# (?, 50, 300) (?, 20, 300)", "\n", "\n", "qu_feature_c", "=", "Reshape", "(", "(", "qu_l", ",", "1", ")", ")", "(", "qu_feature", ")", "\n", "pre_feature_c", "=", "Reshape", "(", "(", "pre_l", ",", "1", ")", ")", "(", "pre_feature", ")", "\n", "qu_words", "=", "Concatenate", "(", ")", "(", "[", "qu_words", ",", "qu_feature_c", "]", ")", "\n", "pre_words", "=", "Concatenate", "(", ")", "(", "[", "pre_words", ",", "pre_feature_c", "]", ")", "\n", "# (?, 60, 301) (?, 120, 301)", "\n", "\n", "\"\"\"   index_inputs   \"\"\"", "\n", "qu_mid_r", "=", "Input", "(", "shape", "=", "(", "qu_l", ",", ")", ",", "dtype", "=", "'int32'", ",", "name", "=", "'qu_mid'", ")", "\n", "qu_head", "=", "Input", "(", "shape", "=", "(", "qu_l", ",", "pad_l", ")", ",", "dtype", "=", "'int32'", ",", "name", "=", "'qu_head'", ")", "\n", "qu_tail", "=", "Input", "(", "shape", "=", "(", "qu_l", ",", "pad_l", ")", ",", "dtype", "=", "'int32'", ",", "name", "=", "'qu_tail'", ")", "\n", "pre_mid_r", "=", "Input", "(", "shape", "=", "(", "pre_l", ",", ")", ",", "dtype", "=", "'int32'", ",", "name", "=", "'sent_mid'", ")", "\n", "pre_head", "=", "Input", "(", "shape", "=", "(", "pre_l", ",", "pad_l", ")", ",", "dtype", "=", "'int32'", ",", "name", "=", "'sent_head'", ")", "\n", "pre_tail", "=", "Input", "(", "shape", "=", "(", "pre_l", ",", "pad_l", ")", ",", "dtype", "=", "'int32'", ",", "name", "=", "'sent_tail'", ")", "\n", "qu_i_ids", "=", "[", "qu_head", ",", "qu_mid_r", ",", "qu_tail", "]", "\n", "pre_i_ids", "=", "[", "pre_head", ",", "pre_mid_r", ",", "pre_tail", "]", "\n", "input_layers", "+=", "[", "qu_head", ",", "qu_mid_r", ",", "qu_tail", ",", "pre_head", ",", "pre_mid_r", ",", "pre_tail", "]", "\n", "\n", "expand_dim", "=", "Lambda", "(", "lambda", "x", ":", "K", ".", "expand_dims", "(", "x", ",", "-", "1", ")", ",", "output_shape", "=", "lambda", "x", ":", "x", "+", "(", "1", ",", ")", ")", "\n", "qu_i_ids", "[", "1", "]", "=", "expand_dim", "(", "qu_i_ids", "[", "1", "]", ")", "\n", "pre_i_ids", "[", "1", "]", "=", "expand_dim", "(", "pre_i_ids", "[", "1", "]", ")", "\n", "\n", "\"\"\"   convolution   \"\"\"", "\n", "n_param", "=", "model_param", "[", "'n_param'", "]", "#1024                                                                                                                       ", "\n", "cnn1_head", "=", "Dense", "(", "n_param", ",", "name", "=", "'cnn1_head'", ")", "\n", "cnn1_mid", "=", "Dense", "(", "n_param", ",", "name", "=", "'cnn1_mid'", ")", "if", "model_param", "[", "'if_d'", "]", "else", "cnn1_head", "\n", "cnn1_tail", "=", "Dense", "(", "n_param", ",", "name", "=", "'cnn1_tail'", ")", "if", "model_param", "[", "'if_d'", "]", "else", "cnn1_head", "\n", "cnn1", "=", "[", "cnn1_head", ",", "cnn1_mid", ",", "cnn1_tail", "]", "\n", "gate_dense", "=", "None", "\n", "if", "model_param", "[", "'pooling_mode'", "]", "==", "'gat'", ":", "\n", "        ", "base_gate", "=", "Dense", "(", "1", ",", "name", "=", "'gate1_head'", ",", "activation", "=", "'sigmoid'", ")", "\n", "gate_dense", "=", "[", "\n", "base_gate", ",", "\n", "Dense", "(", "1", ",", "name", "=", "'gate1_mid'", ",", "activation", "=", "'sigmoid'", ")", "if", "model_param", "[", "'if_d'", "]", "else", "base_gate", ",", "\n", "Dense", "(", "1", ",", "name", "=", "'gate1_tail'", ",", "activation", "=", "'sigmoid'", ")", "if", "model_param", "[", "'if_d'", "]", "else", "base_gate", ",", "\n", "]", "\n", "", "elif", "model_param", "[", "'pooling_mode'", "]", "in", "[", "'gat_n'", ",", "'gat_2'", "]", ":", "\n", "        ", "base_gate", "=", "Dense", "(", "1", ",", "name", "=", "'gate1_head'", ",", "activation", "=", "'sigmoid'", ")", "\n", "gate_dense", "=", "[", "\n", "base_gate", ",", "\n", "Dense", "(", "1", ",", "name", "=", "'gate1_mid'", ",", "activation", "=", "None", ")", "if", "model_param", "[", "'if_d'", "]", "else", "base_gate", ",", "\n", "Dense", "(", "1", ",", "name", "=", "'gate1_tail'", ",", "activation", "=", "None", ")", "if", "model_param", "[", "'if_d'", "]", "else", "base_gate", ",", "\n", "]", "\n", "\n", "", "qu_results", "=", "gcn_layer", "(", "qu_i_ids", ",", "qu_words", ",", "cnn1", ",", "mode", "=", "model_param", "[", "'pooling_mode'", "]", ",", "gate_dense", "=", "gate_dense", ")", "\n", "pre_results", "=", "gcn_layer", "(", "pre_i_ids", ",", "pre_words", ",", "cnn1", ",", "mode", "=", "model_param", "[", "'pooling_mode'", "]", ",", "gate_dense", "=", "gate_dense", ")", "\n", "# (?, 50, 1024)", "\n", "# (?, 20, 1024)", "\n", "\n", "for", "i", "in", "range", "(", "model_param", "[", "'layer_num'", "]", "-", "1", ")", ":", "\n", "        ", "cnn2_head", "=", "Dense", "(", "n_param", ",", "name", "=", "'cnn%d_head'", "%", "(", "i", "+", "2", ")", ")", "\n", "cnn2_mid", "=", "Dense", "(", "n_param", ",", "name", "=", "'cnn%d_mid'", "%", "(", "i", "+", "2", ")", ")", "if", "model_param", "[", "'if_d'", "]", "else", "cnn2_head", "\n", "cnn2_tail", "=", "Dense", "(", "n_param", ",", "name", "=", "'cnn%d_tail'", "%", "(", "i", "+", "2", ")", ")", "if", "model_param", "[", "'if_d'", "]", "else", "cnn2_head", "\n", "cnn2", "=", "[", "cnn2_head", ",", "cnn2_mid", ",", "cnn2_tail", "]", "\n", "gate_dense_2", "=", "None", "\n", "if", "model_param", "[", "'pooling_mode'", "]", "==", "'gat'", ":", "\n", "            ", "base_gate_2", "=", "Dense", "(", "1", ",", "name", "=", "'gate%d_head'", "%", "(", "i", "+", "2", ")", ",", "activation", "=", "'sigmoid'", ")", "\n", "gate_dense_2", "=", "[", "\n", "base_gate_2", ",", "\n", "Dense", "(", "1", ",", "name", "=", "'gate%d_mid'", "%", "(", "i", "+", "2", ")", ",", "activation", "=", "'sigmoid'", ")", "if", "model_param", "[", "'if_d'", "]", "else", "base_gate_2", ",", "\n", "Dense", "(", "1", ",", "name", "=", "'gate%d_tail'", "%", "(", "i", "+", "2", ")", ",", "activation", "=", "'sigmoid'", ")", "if", "model_param", "[", "'if_d'", "]", "else", "base_gate_2", ",", "\n", "]", "\n", "", "elif", "model_param", "[", "'pooling_mode'", "]", "in", "[", "'gat_n'", ",", "'gat_2'", "]", ":", "\n", "            ", "base_gate_2", "=", "Dense", "(", "1", ",", "name", "=", "'gate%d_head'", "%", "(", "i", "+", "2", ")", ",", "activation", "=", "'sigmoid'", ")", "\n", "gate_dense_2", "=", "[", "\n", "base_gate_2", ",", "\n", "Dense", "(", "1", ",", "name", "=", "'gate%d_mid'", "%", "(", "i", "+", "2", ")", ",", "activation", "=", "None", ")", "if", "model_param", "[", "'if_d'", "]", "else", "base_gate_2", ",", "\n", "Dense", "(", "1", ",", "name", "=", "'gate%d_tail'", "%", "(", "i", "+", "2", ")", ",", "activation", "=", "None", ")", "if", "model_param", "[", "'if_d'", "]", "else", "base_gate_2", ",", "\n", "]", "\n", "\n", "\n", "", "qu_results_2", "=", "gcn_layer", "(", "qu_i_ids", ",", "qu_results", ",", "cnn2", ",", "\n", "active", "=", "None", ",", "mode", "=", "model_param", "[", "'pooling_mode'", "]", ",", "gate_dense", "=", "gate_dense_2", ")", "\n", "pre_results_2", "=", "gcn_layer", "(", "pre_i_ids", ",", "pre_results", ",", "cnn2", ",", "\n", "active", "=", "None", ",", "mode", "=", "model_param", "[", "'pooling_mode'", "]", ",", "gate_dense", "=", "gate_dense_2", ")", "\n", "# (?, 80, 1024)", "\n", "# (?, 160, 1024)", "\n", "\n", "qu_results_2", "=", "Activation", "(", "'relu'", ")", "(", "Add", "(", ")", "(", "[", "qu_results", ",", "qu_results_2", "]", ")", ")", "\n", "pre_results_2", "=", "Activation", "(", "'relu'", ")", "(", "Add", "(", ")", "(", "[", "pre_results", ",", "pre_results_2", "]", ")", ")", "\n", "qu_results", "=", "qu_results_2", "\n", "pre_results", "=", "pre_results_2", "\n", "\n", "\n", "", "\"\"\"   merge   \"\"\"", "\n", "label", "=", "count_similarity", "(", "qu_results", ",", "pre_results", ")", "\n", "# (?, 1)", "\n", "\n", "model", "=", "Model", "(", "inputs", "=", "input_layers", ",", "outputs", "=", "[", "label", "]", ")", "\n", "# from keras.utils import multi_gpu_model", "\n", "# model = multi_gpu_model(model, gpus=2)", "\n", "model", ".", "compile", "(", "loss", "=", "{", "'label'", ":", "'binary_crossentropy'", "}", ",", "optimizer", "=", "'adadelta'", ")", "#my_loss_llh adadelta", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.model.model_nlpcc_irqa_word.get_model": [[26, 91], ["keras.layers.Input", "keras.layers.Input", "keras.layers.Input", "keras.layers.Input", "numpy.shape", "keras.layers.Embedding", "keras.layers.Embedding.", "keras.layers.Embedding.", "print", "print", "keras.layers.Conv1D", "keras.layers.Conv1D", "keras.layers.Conv1D", "cnn1", "cnn1", "range", "model_base.count_similarity", "keras.models.Model", "keras.models.Model.compile", "Reshape", "Reshape", "keras.layers.Concatenate", "keras.layers.Concatenate", "keras.layers.Activation", "keras.layers.Activation", "keras.layers.Conv1D", "keras.layers.Conv1D", "keras.layers.Conv1D", "cnn2", "cnn2", "keras.layers.Concatenate", "keras.layers.Activation", "keras.layers.Activation", "cnn_t", "keras.layers.Concatenate", "keras.layers.Add", "keras.layers.Add", "cnn_t"], "function", ["home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.model.model_base.count_similarity"], ["def", "get_model", "(", "wordMatrix", ",", "model_param", "=", "None", ")", ":", "\n", "    ", "if", "model_param", "is", "None", ":", "\n", "        ", "model_param", "=", "{", "'layer_num'", ":", "2", "}", "\n", "", "len_qu", "=", "60", "\n", "len_pre", "=", "120", "\n", "\n", "\"\"\"   inputs   \"\"\"", "\n", "qu_ids", "=", "Input", "(", "shape", "=", "(", "len_qu", ",", ")", ",", "dtype", "=", "'int32'", ",", "name", "=", "'qu'", ")", "\n", "pre_ids", "=", "Input", "(", "shape", "=", "(", "len_pre", ",", ")", ",", "dtype", "=", "'int32'", ",", "name", "=", "'sent'", ")", "\n", "qu_feature", "=", "Input", "(", "shape", "=", "(", "len_qu", ",", ")", ",", "dtype", "=", "'float32'", ",", "name", "=", "'qu_feature'", ")", "\n", "pre_feature", "=", "Input", "(", "shape", "=", "(", "len_pre", ",", ")", ",", "dtype", "=", "'float32'", ",", "name", "=", "'sent_feature'", ")", "\n", "# (?, 50) (?, 20)", "\n", "\n", "\"\"\"   embedding   \"\"\"", "\n", "input_dim", ",", "output_dim", "=", "np", ".", "shape", "(", "wordMatrix", ")", "\n", "embedding", "=", "Embedding", "(", "input_dim", ",", "output_dim", ",", "weights", "=", "[", "wordMatrix", "]", ",", "name", "=", "'embedding'", ")", "\n", "\n", "qu_seq", "=", "embedding", "(", "qu_ids", ")", "\n", "pre_seq", "=", "embedding", "(", "pre_ids", ")", "\n", "# (?, 50, 300) (?, 20, 300)", "\n", "\n", "qu_feature_c", "=", "Reshape", "(", "(", "len_qu", ",", "1", ")", ")", "(", "qu_feature", ")", "\n", "pre_feature_c", "=", "Reshape", "(", "(", "len_pre", ",", "1", ")", ")", "(", "pre_feature", ")", "\n", "qu_seq", "=", "Concatenate", "(", ")", "(", "[", "qu_seq", ",", "qu_feature_c", "]", ")", "\n", "pre_seq", "=", "Concatenate", "(", ")", "(", "[", "pre_seq", ",", "pre_feature_c", "]", ")", "\n", "print", "(", "qu_seq", ".", "shape", ")", "\n", "print", "(", "pre_seq", ".", "shape", ")", "\n", "\n", "\"\"\"   convolution   \"\"\"", "\n", "cnn1_0", "=", "Conv1D", "(", "256", ",", "1", ",", "padding", "=", "'same'", ",", "name", "=", "'cnn1_0'", ")", "\n", "cnn1_1", "=", "Conv1D", "(", "512", ",", "2", ",", "padding", "=", "'same'", ",", "name", "=", "'cnn1_1'", ")", "\n", "cnn1_2", "=", "Conv1D", "(", "256", ",", "3", ",", "padding", "=", "'same'", ",", "name", "=", "'cnn1_2'", ")", "\n", "cnn1", "=", "lambda", "x", ":", "Concatenate", "(", ")", "(", "[", "cnn_t", "(", "x", ")", "for", "cnn_t", "in", "[", "cnn1_0", ",", "cnn1_1", ",", "cnn1_2", "]", "]", ")", "\n", "\n", "qu_seq_1", "=", "cnn1", "(", "qu_seq", ")", "\n", "pre_seq_1", "=", "cnn1", "(", "pre_seq", ")", "\n", "\n", "qu_seq_1", "=", "Activation", "(", "'relu'", ")", "(", "qu_seq_1", ")", "\n", "pre_seq_1", "=", "Activation", "(", "'relu'", ")", "(", "pre_seq_1", ")", "\n", "# (?, 50, 1024) (?, 20, 1024)", "\n", "\n", "for", "i", "in", "range", "(", "model_param", "[", "'layer_num'", "]", "-", "1", ")", ":", "\n", "        ", "cnn2_0", "=", "Conv1D", "(", "256", ",", "1", ",", "padding", "=", "'same'", ",", "name", "=", "'cnn%d_0'", "%", "(", "i", "+", "2", ")", ")", "\n", "cnn2_1", "=", "Conv1D", "(", "512", ",", "2", ",", "padding", "=", "'same'", ",", "name", "=", "'cnn%d_1'", "%", "(", "i", "+", "2", ")", ")", "\n", "cnn2_2", "=", "Conv1D", "(", "256", ",", "3", ",", "padding", "=", "'same'", ",", "name", "=", "'cnn%d_2'", "%", "(", "i", "+", "2", ")", ")", "\n", "cnn2", "=", "lambda", "x", ":", "Concatenate", "(", ")", "(", "[", "cnn_t", "(", "x", ")", "for", "cnn_t", "in", "[", "cnn2_0", ",", "cnn2_1", ",", "cnn2_2", "]", "]", ")", "\n", "\n", "qu_seq_2", "=", "cnn2", "(", "qu_seq_1", ")", "\n", "pre_seq_2", "=", "cnn2", "(", "pre_seq_1", ")", "\n", "# (?, 50, 1024)", "\n", "# (?, 20, 1024)", "\n", "\n", "qu_seq_2", "=", "Activation", "(", "'relu'", ")", "(", "Add", "(", ")", "(", "[", "qu_seq_1", ",", "qu_seq_2", "]", ")", ")", "\n", "pre_seq_2", "=", "Activation", "(", "'relu'", ")", "(", "Add", "(", ")", "(", "[", "pre_seq_1", ",", "pre_seq_2", "]", ")", ")", "\n", "qu_seq_1", "=", "qu_seq_2", "\n", "pre_seq_1", "=", "pre_seq_2", "\n", "\n", "", "\"\"\"   merge   \"\"\"", "\n", "label", "=", "count_similarity", "(", "qu_seq_1", ",", "pre_seq_1", ")", "\n", "# (?, 1)", "\n", "\n", "model", "=", "Model", "(", "inputs", "=", "[", "qu_ids", ",", "pre_ids", ",", "qu_feature", ",", "pre_feature", "]", ",", "outputs", "=", "[", "label", "]", ")", "\n", "model", ".", "compile", "(", "loss", "=", "{", "'label'", ":", "'binary_crossentropy'", "}", ",", "optimizer", "=", "'adadelta'", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.model.model_nlpcc_kbre_cws.get_para": [[28, 60], ["sum", "sum", "sum", "sum", "sum", "sum", "int", "int", "int", "int", "int", "int"], "function", ["None"], ["def", "get_para", "(", ")", ":", "\n", "    ", "paras", "=", "{", "\n", "'qu_l'", ":", "50", ",", "\n", "'pre_l'", ":", "20", ",", "\n", "}", "\n", "paras", "[", "'qu_i'", "]", "=", "[", "\n", "[", "[", "1", ",", "paras", "[", "'qu_l'", "]", "]", "]", ",", "\n", "[", "[", "1", ",", "paras", "[", "'qu_l'", "]", "]", ",", "[", "3", ",", "60", "]", ",", "[", "10", ",", "60", "]", "]", ",", "\n", "[", "[", "1", ",", "paras", "[", "'qu_l'", "]", "]", ",", "[", "3", ",", "90", "]", ",", "[", "10", ",", "90", "]", ",", "[", "30", ",", "90", "]", "]", ",", "\n", "]", "\n", "paras", "[", "'pre_i'", "]", "=", "[", "\n", "[", "[", "1", ",", "paras", "[", "'pre_l'", "]", "]", "]", ",", "\n", "[", "[", "1", ",", "paras", "[", "'pre_l'", "]", "]", ",", "[", "3", ",", "60", "]", ",", "[", "10", ",", "60", "]", "]", ",", "\n", "[", "[", "1", ",", "paras", "[", "'pre_l'", "]", "]", ",", "[", "3", ",", "90", "]", ",", "[", "10", ",", "90", "]", ",", "[", "30", ",", "90", "]", "]", "\n", "]", "\n", "paras", "[", "'qu_sum1'", "]", "=", "sum", "(", "[", "int", "(", "t", "[", "1", "]", "/", "t", "[", "0", "]", ")", "for", "t", "in", "paras", "[", "'qu_i'", "]", "[", "0", "]", "]", ")", "\n", "paras", "[", "'qu_sum2'", "]", "=", "sum", "(", "[", "int", "(", "t", "[", "1", "]", "/", "t", "[", "0", "]", ")", "for", "t", "in", "paras", "[", "'qu_i'", "]", "[", "1", "]", "]", ")", "\n", "paras", "[", "'qu_sum3'", "]", "=", "sum", "(", "[", "int", "(", "t", "[", "1", "]", "/", "t", "[", "0", "]", ")", "for", "t", "in", "paras", "[", "'qu_i'", "]", "[", "2", "]", "]", ")", "\n", "paras", "[", "'pre_sum1'", "]", "=", "sum", "(", "[", "int", "(", "t", "[", "1", "]", "/", "t", "[", "0", "]", ")", "for", "t", "in", "paras", "[", "'pre_i'", "]", "[", "0", "]", "]", ")", "\n", "paras", "[", "'pre_sum2'", "]", "=", "sum", "(", "[", "int", "(", "t", "[", "1", "]", "/", "t", "[", "0", "]", ")", "for", "t", "in", "paras", "[", "'pre_i'", "]", "[", "1", "]", "]", ")", "\n", "paras", "[", "'pre_sum3'", "]", "=", "sum", "(", "[", "int", "(", "t", "[", "1", "]", "/", "t", "[", "0", "]", ")", "for", "t", "in", "paras", "[", "'pre_i'", "]", "[", "2", "]", "]", ")", "\n", "\"\"\"\n    # print (json.dumps(paras, indent=2))\n    \"qu_sum1\": 50,\n    \"qu_sum2\": 76,\n    \"qu_sum3\": 92,\n    \"pre_sum1\": 20,\n    \"pre_sum2\": 46,\n    \"pre_sum3\": 62\n    \"\"\"", "\n", "\n", "return", "paras", "\n", "\n"]], "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.model.model_nlpcc_kbre_cws.get_ig_inputs": [[61, 79], ["enumerate", "keras.layers.Input", "to_ret.append"], "function", ["None"], ["", "def", "get_ig_inputs", "(", "n", ",", "ndfs", ",", "head_name", ")", ":", "\n", "    ", "\"\"\"   \n    \u83b7\u5f97\u4e00\u4e2ainput_list\uff0c\u5982\uff1a\n        get_ig_inputs(2, paras['qu_i'][1], 'qu')\n    \u610f\u4e3aqu\u7684bigram inputs\uff0c\u76f8\u5173\u53c2\u6570\u89c1 paras['qu_i'][1] = [[1,50], [3,60], [10,60]]\n\n    \u8fd4\u56de\u4e00\u4e2aInput list, len = len(ndfs)\n    \"\"\"", "\n", "n_dicts", "=", "{", "1", ":", "'u'", ",", "2", ":", "'b'", ",", "3", ":", "'t'", "}", "\n", "n_gram", "=", "n_dicts", "[", "n", "]", "\n", "to_ret", "=", "[", "]", "\n", "\n", "for", "i", ",", "t", "in", "enumerate", "(", "ndfs", ")", ":", "\n", "        ", "name_t", "=", "'%s_%sig_%d'", "%", "(", "head_name", ",", "n_gram", ",", "t", "[", "0", "]", ")", "\n", "input_t", "=", "Input", "(", "shape", "=", "(", "t", "[", "1", "]", ",", "n", ")", ",", "dtype", "=", "'int32'", ",", "name", "=", "name_t", ")", "\n", "to_ret", ".", "append", "(", "input_t", ")", "\n", "\n", "", "return", "to_ret", "\n", "\n"]], "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.model.model_nlpcc_kbre_cws.get_conv_join": [[80, 316], ["model_nlpcc_kbre_cws.get_conv_join.get_indicator"], "function", ["None"], ["", "def", "get_conv_join", "(", "index", ",", "words", ",", "dense_layer", ",", "ndfs", ",", "active", "=", "'relu'", ",", "pooling_mode", "=", "'max'", ",", "attentive_dense", "=", "None", ")", ":", "\n", "    ", "\"\"\"   \n    \u5bf9\u4e00\u4e2aindex_list\u505aCNN\uff0c\u5176\u4e2d\uff1a\n        index\uff1a \u6307\u793a\uff0c       (?, 50, 3), (?, 90, 3), (?, 90, 3), (?, 90, 3)\n        words\uff1a \u8bcd\u5411\u91cf\uff0c     (?, 50, 300)\n        dense_layer\uff1aCNN\u53c2\u6570~ \u5982256\u4e2afilter\n        ndfs\uff1a index\u7684\u539f\u59cb\u53c2\u6570\uff0c\u5982 [[1,50], [3,90], [10,90], [30,90]], \u7528\u4e8emax_pooling~\n\n    \u8fd4\u56de\u4e00\u4e2atensor\uff0c \u5f62\u5982\uff1a\n    \"\"\"", "\n", "assert", "pooling_mode", "in", "[", "'max'", ",", "'ave'", ",", "'attentive'", ",", "'gated'", "]", "\n", "\n", "len_words", "=", "words", ".", "shape", "[", "1", "]", "\n", "split_ns", "=", "[", "int", "(", "t", ".", "shape", "[", "1", "]", ")", "for", "t", "in", "index", "]", "\n", "# print(', '.join(map(get_shape, index)))", "\n", "# print(split_ns)", "\n", "# print(len_words, words.shape)", "\n", "# (?, 50, 3), (?, 90, 3), (?, 90, 3), (?, 90, 3)", "\n", "# [50, 90, 90, 90]", "\n", "# 50 (?, 50, 300)", "\n", "\n", "index_all", "=", "index", "[", "0", "]", "if", "len", "(", "index", ")", "==", "1", "else", "Concatenate", "(", "axis", "=", "1", ")", "(", "index", ")", "\n", "# (?, 320, 3)", "\n", "\n", "def", "get_indicator", "(", "index_all", ")", ":", "\n", "# index_all # (?, 320, 3)", "\n", "        ", "reduce_index", "=", "tf", ".", "reduce_sum", "(", "index_all", ",", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", "\n", "# (?, 320, 1)", "\n", "reduce_index", "=", "tf", ".", "sign", "(", "tf", ".", "abs", "(", "reduce_index", ")", ")", "\n", "reduce_index", "=", "tf", ".", "cast", "(", "reduce_index", ",", "'float32'", ")", "\n", "# (?, 320, 1)", "\n", "return", "reduce_index", "\n", "", "indicator_all", "=", "get_indicator", "(", "index_all", ")", "\n", "# this is a tf tensor", "\n", "\n", "\"\"\"   embedding   \"\"\"", "\n", "onehot_t", "=", "Lambda", "(", "lambda", "x", ":", "K", ".", "one_hot", "(", "x", ",", "len_words", ")", ",", "\n", "output_shape", "=", "lambda", "input_shape", ":", "tuple", "(", "list", "(", "input_shape", ")", "+", "[", "len_words", "]", ")", ")", "\n", "emb_lookup", "=", "Lambda", "(", "lambda", "x", ":", "tf", ".", "einsum", "(", "'abci,aij->abcj'", ",", "x", "[", "0", "]", ",", "x", "[", "1", "]", ")", ")", "\n", "index_emb", "=", "emb_lookup", "(", "[", "onehot_t", "(", "index_all", ")", ",", "words", "]", ")", "\n", "# print(index_emb.shape)", "\n", "# (?, 320, 3, 300)", "\n", "\n", "\"\"\"   cnn   \"\"\"", "\n", "reshape", "=", "lambda", "x", ":", "Reshape", "(", "[", "int", "(", "t", ")", "for", "t", "in", "list", "(", "x", ".", "shape", "[", "1", ":", "-", "2", "]", ")", "+", "[", "x", ".", "shape", "[", "-", "2", "]", "*", "x", ".", "shape", "[", "-", "1", "]", "]", "]", ")", "(", "x", ")", "\n", "index_cnn", "=", "dense_layer", "(", "reshape", "(", "index_emb", ")", ")", "\n", "# print(index_cnn.shape)", "\n", "# (?, 320, 256)", "\n", "\n", "index_cnn", "=", "Lambda", "(", "lambda", "x", ":", "indicator_all", "*", "x", ")", "(", "index_cnn", ")", "\n", "\n", "def", "pooling_spt", "(", "index_cnn", ",", "_", "=", "None", ")", ":", "\n", "        ", "index_cnn_list", "=", "tf", ".", "split", "(", "index_cnn", ",", "split_ns", ",", "axis", "=", "1", ")", "\n", "# print(', '.join(map(get_shape, index_cnns)))", "\n", "# (?, 50, 256), (?, 90, 256), (?, 90, 256), (?, 90, 256)", "\n", "index_pool", "=", "[", "MaxPooling1D", "(", "pool_size", "=", "ndfs", "[", "i", "]", "[", "0", "]", ")", "(", "t", ")", "for", "i", ",", "t", "in", "enumerate", "(", "index_cnn_list", ")", "]", "\n", "# print(', '.join(map(get_shape, index_pool)))", "\n", "# (?, 50, 256), (?, 30, 256), (?, 9, 256), (?, 3, 256)", "\n", "\n", "if", "len", "(", "index_pool", ")", ">", "1", ":", "\n", "            ", "results", "=", "Concatenate", "(", "axis", "=", "1", ")", "(", "index_pool", ")", "\n", "", "else", ":", "\n", "            ", "results", "=", "index_pool", "[", "0", "]", "\n", "# print(results.shape)", "\n", "# (?, 92, 256)", "\n", "\n", "", "return", "results", "\n", "\n", "", "def", "pooling_spt_ave", "(", "index_cnn", ",", "indicator_all", ")", ":", "\n", "        ", "index_cnn_list", "=", "tf", ".", "split", "(", "index_cnn", ",", "split_ns", ",", "axis", "=", "1", ")", "\n", "indicator_list", "=", "tf", ".", "split", "(", "indicator_all", ",", "split_ns", ",", "axis", "=", "1", ")", "\n", "# print(', '.join(map(get_shape, index_cnn_list)))", "\n", "# print(', '.join(map(get_shape, indicator_list)))", "\n", "# (?, 50, 256), (?, 90, 256), (?, 90, 256), (?, 90, 256)", "\n", "# (?, 50, 1), (?, 90, 1), (?, 90, 1), (?, 90, 1)", "\n", "index_cnn_list", "=", "[", "Reshape", "(", "[", "int", "(", "int", "(", "t", ".", "shape", "[", "-", "2", "]", ")", "/", "ndfs", "[", "i", "]", "[", "0", "]", ")", ",", "ndfs", "[", "i", "]", "[", "0", "]", ",", "t", ".", "shape", "[", "-", "1", "]", "]", ")", "(", "t", ")", "for", "i", ",", "t", "in", "enumerate", "(", "index_cnn_list", ")", "]", "\n", "indicator_list", "=", "[", "Reshape", "(", "[", "int", "(", "int", "(", "t", ".", "shape", "[", "-", "2", "]", ")", "/", "ndfs", "[", "i", "]", "[", "0", "]", ")", ",", "ndfs", "[", "i", "]", "[", "0", "]", ",", "t", ".", "shape", "[", "-", "1", "]", "]", ")", "(", "t", ")", "for", "i", ",", "t", "in", "enumerate", "(", "indicator_list", ")", "]", "\n", "# print(', '.join(map(get_shape, index_cnn_list)))", "\n", "# print(', '.join(map(get_shape, indicator_list)))", "\n", "# (?, 50, 1, 256), (?, 30, 3, 256), (?, 9, 10, 256), (?, 3, 30, 256)", "\n", "# (?, 50, 1, 1), (?, 30, 3, 1), (?, 9, 10, 1), (?, 3, 30, 1)", "\n", "\n", "\n", "index_cnn_sum_list", "=", "[", "tf", ".", "reduce_sum", "(", "t", ",", "axis", "=", "-", "2", ")", "for", "t", "in", "index_cnn_list", "]", "\n", "indicator_sum_list", "=", "[", "tf", ".", "reduce_sum", "(", "t", ",", "axis", "=", "-", "2", ")", "for", "t", "in", "indicator_list", "]", "\n", "indicator_sum_list", "=", "[", "t", "+", "tf", ".", "cast", "(", "tf", ".", "ones_like", "(", "t", ")", ",", "'float32'", ")", "/", "100000.", "for", "t", "in", "indicator_sum_list", "]", "\n", "# print(', '.join(map(get_shape, index_cnn_sum_list)))", "\n", "# print(', '.join(map(get_shape, indicator_sum_list)))", "\n", "# (?, 50, 256), (?, 30, 256), (?, 9, 256), (?, 3, 256)", "\n", "# (?, 50, 1), (?, 30, 1), (?, 9, 1), (?, 3, 1)", "\n", "\n", "index_pool", "=", "[", "t", "/", "indicator_sum_list", "[", "i", "]", "for", "i", ",", "t", "in", "enumerate", "(", "index_cnn_sum_list", ")", "]", "\n", "\n", "# index_pool = [MaxPooling1D(pool_size=ndfs[i][0])(t) for i, t in enumerate(index_cnn_list)]", "\n", "# print(', '.join(map(get_shape, index_pool)))", "\n", "# (?, 50, 256), (?, 30, 256), (?, 9, 256), (?, 3, 256)", "\n", "\n", "if", "len", "(", "index_pool", ")", ">", "1", ":", "\n", "            ", "results", "=", "Concatenate", "(", "axis", "=", "1", ")", "(", "index_pool", ")", "\n", "", "else", ":", "\n", "            ", "results", "=", "index_pool", "[", "0", "]", "\n", "# print(results.shape)", "\n", "# (?, 92, 256)", "\n", "\n", "", "return", "results", "\n", "\n", "", "def", "pooling_spt_gated", "(", "index_cnn", ",", "attention_gate", "=", "None", ",", "indicator_all", "=", "None", ")", ":", "\n", "# index_cnn", "\n", "# (?, 50, 256)", "\n", "# # index_cnn = index_cnn * attention_gate", "\n", "# # (?, 50, 256)", "\n", "        ", "index_cnn_list", "=", "tf", ".", "split", "(", "index_cnn", ",", "split_ns", ",", "axis", "=", "1", ")", "\n", "attention_gate", "=", "attention_gate", "-", "(", "tf", ".", "ones_like", "(", "indicator_all", ")", "-", "indicator_all", ")", "*", "1e6", "\n", "attention_gate_list", "=", "tf", ".", "split", "(", "attention_gate", ",", "split_ns", ",", "axis", "=", "1", ")", "\n", "# print(', '.join(map(get_shape, index_cnn_list)))", "\n", "# print(', '.join(map(get_shape, attention_gate_list)))", "\n", "# (?, 50, 256), (?, 90, 256), (?, 90, 256), (?, 90, 256)", "\n", "# (?, 50, 1), (?, 90, 1), (?, 90, 1), (?, 90, 1)", "\n", "\n", "index_cnn_list", "=", "[", "Reshape", "(", "[", "int", "(", "int", "(", "t", ".", "shape", "[", "-", "2", "]", ")", "/", "ndfs", "[", "i", "]", "[", "0", "]", ")", ",", "ndfs", "[", "i", "]", "[", "0", "]", ",", "t", ".", "shape", "[", "-", "1", "]", "]", ")", "(", "t", ")", "for", "i", ",", "t", "in", "enumerate", "(", "index_cnn_list", ")", "]", "\n", "attention_gate_list", "=", "[", "Reshape", "(", "[", "int", "(", "int", "(", "t", ".", "shape", "[", "-", "2", "]", ")", "/", "ndfs", "[", "i", "]", "[", "0", "]", ")", ",", "ndfs", "[", "i", "]", "[", "0", "]", ",", "t", ".", "shape", "[", "-", "1", "]", "]", ")", "(", "t", ")", "for", "i", ",", "t", "in", "enumerate", "(", "attention_gate_list", ")", "]", "\n", "attention_gate_list", "=", "[", "tf", ".", "nn", ".", "softmax", "(", "t", ",", "axis", "=", "-", "2", ")", "for", "t", "in", "attention_gate_list", "]", "\n", "# print(', '.join(map(get_shape, index_cnn_list)))", "\n", "# print(', '.join(map(get_shape, attention_gate_list)))", "\n", "# (?, 50, 1, 256), (?, 30, 3, 256), (?, 9, 10, 256), (?, 3, 30, 256)", "\n", "# (?, 50, 1, 1), (?, 30, 3, 1), (?, 9, 10, 1), (?, 3, 30, 1)", "\n", "index_cnn_list", "=", "[", "t", "*", "attention_gate_list", "[", "i", "]", "for", "i", ",", "t", "in", "enumerate", "(", "index_cnn_list", ")", "]", "\n", "\n", "index_cnn_sum_list", "=", "[", "tf", ".", "reduce_sum", "(", "t", ",", "axis", "=", "-", "2", ")", "for", "t", "in", "index_cnn_list", "]", "\n", "index_pool", "=", "index_cnn_sum_list", "\n", "# print(', '.join(map(get_shape, index_cnn_sum_list)))", "\n", "# (?, 50, 256), (?, 30, 256), (?, 9, 256), (?, 3, 256)", "\n", "\n", "if", "len", "(", "index_pool", ")", ">", "1", ":", "\n", "            ", "results", "=", "Concatenate", "(", "axis", "=", "1", ")", "(", "index_pool", ")", "\n", "", "else", ":", "\n", "            ", "results", "=", "index_pool", "[", "0", "]", "\n", "# print(results.shape)", "\n", "# (?, 92, 256)", "\n", "\n", "", "return", "results", "\n", "\n", "", "def", "pooling_spt_attentive", "(", "index_cnn", ",", "w_index_cnn", ",", "indicator_all", ",", "mode_tt", "=", "'max'", ")", ":", "\n", "        ", "assert", "mode_tt", "in", "[", "'ave'", ",", "'max'", "]", "\n", "index_cnn_list", "=", "tf", ".", "split", "(", "index_cnn", ",", "split_ns", ",", "axis", "=", "1", ")", "\n", "w_index_cnn_list", "=", "tf", ".", "split", "(", "w_index_cnn", ",", "split_ns", ",", "axis", "=", "1", ")", "\n", "indicator_list", "=", "tf", ".", "split", "(", "indicator_all", ",", "split_ns", ",", "axis", "=", "1", ")", "\n", "# print(', '.join(map(get_shape, index_cnn_list)))", "\n", "# print(', '.join(map(get_shape, w_index_cnn_list)))", "\n", "# print(', '.join(map(get_shape, indicator_list)))", "\n", "# (?, 50, 256), (?, 90, 256), (?, 90, 256), (?, 90, 256)", "\n", "# (?, 50, 256), (?, 90, 256), (?, 90, 256), (?, 90, 256)", "\n", "# (?, 50, 1), (?, 90, 1), (?, 90, 1), (?, 90, 1)", "\n", "\n", "index_cnn_list", "=", "[", "Reshape", "(", "[", "int", "(", "int", "(", "t", ".", "shape", "[", "-", "2", "]", ")", "/", "ndfs", "[", "i", "]", "[", "0", "]", ")", ",", "ndfs", "[", "i", "]", "[", "0", "]", ",", "t", ".", "shape", "[", "-", "1", "]", "]", ")", "(", "t", ")", "for", "i", ",", "t", "in", "enumerate", "(", "index_cnn_list", ")", "]", "\n", "indicator_list", "=", "[", "Reshape", "(", "[", "int", "(", "int", "(", "t", ".", "shape", "[", "-", "2", "]", ")", "/", "ndfs", "[", "i", "]", "[", "0", "]", ")", ",", "ndfs", "[", "i", "]", "[", "0", "]", ",", "t", ".", "shape", "[", "-", "1", "]", "]", ")", "(", "t", ")", "for", "i", ",", "t", "in", "enumerate", "(", "indicator_list", ")", "]", "\n", "w_index_cnn_list", "=", "[", "Reshape", "(", "[", "int", "(", "int", "(", "t", ".", "shape", "[", "-", "2", "]", ")", "/", "ndfs", "[", "i", "]", "[", "0", "]", ")", ",", "ndfs", "[", "i", "]", "[", "0", "]", ",", "t", ".", "shape", "[", "-", "1", "]", "]", ")", "(", "t", ")", "for", "i", ",", "t", "in", "enumerate", "(", "w_index_cnn_list", ")", "]", "\n", "# print(', '.join(map(get_shape, index_cnn_list)))", "\n", "# print(', '.join(map(get_shape, w_index_cnn_list)))", "\n", "# print(', '.join(map(get_shape, indicator_list)))", "\n", "# (?, 50, 1, 256), (?, 30, 3, 256), (?, 9, 10, 256), (?, 3, 30, 256)", "\n", "# (?, 50, 1, 256), (?, 30, 3, 256), (?, 9, 10, 256), (?, 3, 30, 256)", "\n", "# (?, 50, 1, 1), (?, 30, 3, 1), (?, 9, 10, 1), (?, 3, 30, 1)", "\n", "\n", "index_pool", "=", "[", "]", "\n", "for", "i", ",", "t", "in", "enumerate", "(", "w_index_cnn_list", ")", ":", "\n", "            ", "cnn_i", "=", "index_cnn_list", "[", "i", "]", "\n", "weight_i", "=", "t", "\n", "indicator_i", "=", "indicator_list", "[", "i", "]", "# (?, 3, 30, 1)", "\n", "\n", "\n", "weight_i", "=", "K", ".", "batch_dot", "(", "cnn_i", ",", "weight_i", ",", "axes", "=", "[", "3", ",", "3", "]", ")", "\n", "# (?, 3, 30, 30)", "\n", "\"\"\"\u6309\u4f4d\u4e58\uff0c\u5148\u8ba9\u8d85\u51fa\u90e8\u5206\u7684\u5206\u5e03\u53d8\u6210\u5747\u5300\u5206\u5e03\"\"\"", "\n", "# (?, 3, 30, 30) * (?, 3, 30, 1)", "\n", "weight_i", "=", "weight_i", "*", "indicator_i", "\n", "\n", "\"\"\"\u518d\u5bf9\u6bcf\u4e00\u4e2a\u5206\u5e03\u4e2d\u4e0d\u60f3\u8981\u7684\u70b9\uff0c\u51cf\u6cd5\u62b9\u53bb\"\"\"", "\n", "indicator_i_t", "=", "(", "K", ".", "ones_like", "(", "indicator_i", ")", "-", "indicator_i", ")", "*", "1.e8", "\n", "ii_shape", "=", "list", "(", "map", "(", "int", ",", "indicator_i_t", ".", "shape", "[", "1", ":", "]", ")", ")", "\n", "indicator_i_t", "=", "Reshape", "(", "[", "ii_shape", "[", "0", "]", ",", "ii_shape", "[", "2", "]", ",", "ii_shape", "[", "1", "]", "]", ")", "(", "indicator_i_t", ")", "\n", "# (?, 3, 1, 30)", "\n", "weight_i", "=", "K", ".", "softmax", "(", "weight_i", "-", "indicator_i_t", ")", "\n", "# (?, 3, 30, 30)", "\n", "\n", "\"\"\"   \u52a0\u6743\u6c42\u548c\uff0c\u6bcf\u4e2a\u6570\u7684\u91cf\u7eb2\u8fd8\u662f\u4e00\u81f4\u7684\uff0c\u7a7a\u7684\u6570\u6c42\u548c\u65f6\u6ca1\u8003\u8651\uff0c\u4e14\u5bf9\u5e94\u7684\u5411\u91cf\u4e3a\u771f\u00b7\u5747\u503c   \"\"\"", "\n", "# (?, 3, 30, 30), (?, 3, 30, 256)", "\n", "cnn_i_t", "=", "K", ".", "batch_dot", "(", "weight_i", ",", "cnn_i", ",", "axes", "=", "[", "3", ",", "2", "]", ")", "\n", "# (?, 3, 30, 256)", "\n", "\n", "\"\"\"   \u518d\u5bf9self_attention\u7684\u7ed3\u679c\u518d\u505a\u5747\u503c   \"\"\"", "\n", "if", "mode_tt", "==", "'ave'", ":", "\n", "                ", "cnn_i_t", "=", "tf", ".", "reduce_sum", "(", "cnn_i_t", "*", "indicator_i", ",", "axis", "=", "-", "2", ")", "\n", "indicator_sum_i", "=", "tf", ".", "reduce_sum", "(", "indicator_i", ",", "axis", "=", "-", "2", ")", "\n", "# (?, 3, 256), (?, 3, 1)", "\n", "\n", "indicator_sum_i", "=", "indicator_sum_i", "+", "tf", ".", "cast", "(", "tf", ".", "ones_like", "(", "indicator_sum_i", ")", ",", "'float32'", ")", "/", "1.e8", "\n", "cnn_i_t", "=", "cnn_i_t", "/", "indicator_sum_i", "\n", "", "else", ":", "\n", "                ", "cnn_i_t", "=", "tf", ".", "reduce_max", "(", "cnn_i_t", "*", "indicator_i", ",", "axis", "=", "-", "2", ")", "\n", "", "index_pool", ".", "append", "(", "cnn_i_t", ")", "\n", "\n", "# print(', '.join(map(get_shape, index_pool)))", "\n", "# (?, 50, 256), (?, 30, 256), (?, 9, 256), (?, 3, 256)", "\n", "\n", "", "if", "len", "(", "index_pool", ")", ">", "1", ":", "\n", "            ", "results", "=", "Concatenate", "(", "axis", "=", "1", ")", "(", "index_pool", ")", "\n", "", "else", ":", "\n", "            ", "results", "=", "index_pool", "[", "0", "]", "\n", "# print(results.shape)", "\n", "# (?, 92, 256)", "\n", "\n", "", "return", "results", "\n", "\n", "\n", "", "\"\"\"   max_pooling   \"\"\"", "\n", "# pooling_mode in ['max', 'ave', 'attentive']", "\n", "if", "pooling_mode", "==", "'max'", ":", "\n", "        ", "results", "=", "Lambda", "(", "lambda", "x", ":", "pooling_spt", "(", "x", ")", ")", "(", "index_cnn", ")", "\n", "", "elif", "pooling_mode", "==", "'ave'", ":", "\n", "        ", "results", "=", "Lambda", "(", "lambda", "x", ":", "pooling_spt_ave", "(", "x", ",", "indicator_all", ")", ")", "(", "index_cnn", ")", "\n", "", "elif", "pooling_mode", "==", "'attentive'", ":", "\n", "        ", "dense_wt", "=", "attentive_dense", "\n", "w_index_cnn", "=", "dense_wt", "(", "index_cnn", ")", "\n", "# \u4e0a\u9762\u90a3\u4e2a\u662f\u505a\u53cc\u7ebf\u6027\u53d8\u6362\u65f6\u7528\u7684\u53c2\u6570\u3002", "\n", "results", "=", "Lambda", "(", "lambda", "x", ":", "pooling_spt_attentive", "(", "x", "[", "0", "]", ",", "x", "[", "1", "]", ",", "indicator_all", ")", ")", "(", "[", "index_cnn", ",", "w_index_cnn", "]", ")", "\n", "", "elif", "pooling_mode", "==", "'gated'", ":", "\n", "        ", "attention_gate", "=", "attentive_dense", "(", "index_cnn", ")", "\n", "results", "=", "Lambda", "(", "lambda", "x", ":", "pooling_spt_gated", "(", "x", "[", "0", "]", ",", "x", "[", "1", "]", ",", "indicator_all", ")", ")", "(", "[", "index_cnn", ",", "attention_gate", "]", ")", "\n", "\n", "# print(results.shape)", "\n", "# (?, 92, 256)", "\n", "", "if", "not", "active", "is", "None", ":", "\n", "        ", "results", "=", "Activation", "(", "active", ")", "(", "results", ")", "\n", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.model.model_nlpcc_kbre_cws.one_layer": [[317, 343], ["len", "keras.layers.Lambda", "len", "len", "len", "get_conv", "keras.layers.Lambda.", "range", "tensorflow.einsum", "range", "keras.layers.Concatenate", "len"], "function", ["None"], ["", "def", "one_layer", "(", "indexs", ",", "words", ",", "dense_list", ",", "ndfs", ",", "converts", ",", "mode", "=", "'join'", ",", "active", "=", "'relu'", ",", "pooling_mode", "=", "'max'", ",", "attentive_dense", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    \u8fd9\u4e2ajoin\u5e76\u6ca1\u6709\u660e\u663e\u6bd4single\u8981\u5feb\uff0c\u4f30\u8ba1single\u7684\u5e76\u884c\u6027\u5df2\u7ecf\u5dee\u4e0d\u591a\u4e86\u5427~\n    \"\"\"", "\n", "assert", "mode", "==", "'join'", "\n", "get_conv", "=", "get_conv_join", "\n", "\n", "assert", "len", "(", "dense_list", ")", "==", "len", "(", "ndfs", ")", "==", "len", "(", "converts", ")", "\n", "n_cnns", "=", "len", "(", "dense_list", ")", "\n", "\n", "if", "attentive_dense", "is", "None", ":", "\n", "        ", "attentive_dense", "=", "[", "None", "]", "*", "n_cnns", "\n", "\n", "", "temp_results", "=", "[", "get_conv", "(", "indexs", "[", "i", "]", ",", "words", ",", "dense_list", "[", "i", "]", ",", "ndfs", "[", "i", "]", ",", "\n", "active", "=", "active", ",", "pooling_mode", "=", "pooling_mode", ",", "attentive_dense", "=", "attentive_dense", "[", "i", "]", ")", "for", "i", "in", "range", "(", "3", ")", "]", "\n", "# print(', '.join(map(get_shape, temp_results)))", "\n", "# (?, 20, 256), (?, 46, 512), (?, 62, 256)", "\n", "\n", "back_lookup", "=", "Lambda", "(", "lambda", "x", ":", "tf", ".", "einsum", "(", "'aij,aib->ajb'", ",", "x", "[", "0", "]", ",", "x", "[", "1", "]", ")", ")", "\n", "temp_results", "=", "[", "\n", "back_lookup", "(", "[", "converts", "[", "i", "]", ",", "temp_results", "[", "i", "]", "]", ")", "\n", "for", "i", "in", "range", "(", "n_cnns", ")", "]", "\n", "\n", "temp_results", "=", "Concatenate", "(", ")", "(", "temp_results", ")", "if", "not", "len", "(", "temp_results", ")", "==", "1", "else", "temp_results", "[", "0", "]", "\n", "# temp_results = back_lookup([converts[2], temp_results[0]])", "\n", "return", "temp_results", "\n", "\n"]], "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.model.model_nlpcc_kbre_cws.get_model": [[344, 461], ["model_nlpcc_kbre_cws.get_para", "keras.layers.Input", "keras.layers.Input", "numpy.shape", "keras.layers.Embedding", "keras.layers.Embedding.", "keras.layers.Embedding.", "keras.layers.Input", "keras.layers.Input", "keras.layers.Input", "keras.layers.Input", "keras.layers.Input", "keras.layers.Input", "model_nlpcc_kbre_cws.get_ig_inputs", "model_nlpcc_kbre_cws.get_ig_inputs", "model_nlpcc_kbre_cws.get_ig_inputs", "model_nlpcc_kbre_cws.get_ig_inputs", "model_nlpcc_kbre_cws.get_ig_inputs", "model_nlpcc_kbre_cws.get_ig_inputs", "keras.layers.Dense", "keras.layers.Dense", "keras.layers.Dense", "model_nlpcc_kbre_cws.one_layer", "model_nlpcc_kbre_cws.one_layer", "range", "model_base.count_similarity", "keras.models.Model", "keras.models.Model.compile", "keras.layers.Dense", "keras.layers.Dense", "keras.layers.Dense", "model_nlpcc_kbre_cws.one_layer", "model_nlpcc_kbre_cws.one_layer", "keras.layers.Dense", "keras.layers.Activation", "keras.layers.Activation", "enumerate", "keras.layers.Dense", "keras.layers.Dense", "keras.layers.Add", "keras.layers.Add", "enumerate", "enumerate", "keras.layers.Dense", "enumerate"], "function", ["home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.model.model_nlpcc_irqa_cws.get_para", "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.model.model_nlpcc_kbre_cws.get_ig_inputs", "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.model.model_nlpcc_kbre_cws.get_ig_inputs", "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.model.model_nlpcc_kbre_cws.get_ig_inputs", "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.model.model_nlpcc_kbre_cws.get_ig_inputs", "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.model.model_nlpcc_kbre_cws.get_ig_inputs", "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.model.model_nlpcc_kbre_cws.get_ig_inputs", "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.model.model_nlpcc_kbre_cws.one_layer", "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.model.model_nlpcc_kbre_cws.one_layer", "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.model.model_base.count_similarity", "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.model.model_nlpcc_kbre_cws.one_layer", "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.model.model_nlpcc_kbre_cws.one_layer"], ["", "def", "get_model", "(", "wordMatrix", ",", "model_param", "=", "None", ")", ":", "\n", "    ", "if", "model_param", "is", "None", ":", "\n", "        ", "model_param", "=", "{", "'layer_num'", ":", "1", "}", "\n", "", "if", "not", "'pooling_mode'", "in", "model_param", ":", "\n", "        ", "model_param", "[", "'pooling_mode'", "]", "=", "'max'", "#'max'", "\n", "\n", "", "paras", "=", "get_para", "(", ")", "\n", "\n", "\"\"\"   inputs   \"\"\"", "\n", "qu_ids", "=", "Input", "(", "shape", "=", "(", "paras", "[", "'qu_l'", "]", ",", ")", ",", "dtype", "=", "'int32'", ",", "name", "=", "'qu'", ")", "\n", "pre_ids", "=", "Input", "(", "shape", "=", "(", "paras", "[", "'pre_l'", "]", ",", ")", ",", "dtype", "=", "'int32'", ",", "name", "=", "'pre'", ")", "\n", "input_layers", "=", "[", "qu_ids", ",", "pre_ids", "]", "\n", "# (?, 50) (?, 20)", "\n", "\n", "\"\"\"   embedding   \"\"\"", "\n", "input_dim", ",", "output_dim", "=", "np", ".", "shape", "(", "wordMatrix", ")", "\n", "embedding", "=", "Embedding", "(", "input_dim", ",", "output_dim", ",", "weights", "=", "[", "wordMatrix", "]", ",", "name", "=", "'embedding'", ")", "\n", "\n", "qu_words", "=", "embedding", "(", "qu_ids", ")", "\n", "pre_words", "=", "embedding", "(", "pre_ids", ")", "\n", "# (?, 50, 300) (?, 20, 300)", "\n", "\n", "\"\"\"   index_inputs   \"\"\"", "\n", "qu_convert1", "=", "Input", "(", "shape", "=", "(", "paras", "[", "'qu_sum1'", "]", ",", "paras", "[", "'qu_l'", "]", ")", ",", "dtype", "=", "'float32'", ",", "name", "=", "'qu_convert1'", ")", "\n", "qu_convert2", "=", "Input", "(", "shape", "=", "(", "paras", "[", "'qu_sum2'", "]", ",", "paras", "[", "'qu_l'", "]", ")", ",", "dtype", "=", "'float32'", ",", "name", "=", "'qu_convert2'", ")", "\n", "qu_convert3", "=", "Input", "(", "shape", "=", "(", "paras", "[", "'qu_sum3'", "]", ",", "paras", "[", "'qu_l'", "]", ")", ",", "dtype", "=", "'float32'", ",", "name", "=", "'qu_convert3'", ")", "\n", "pre_convert1", "=", "Input", "(", "shape", "=", "(", "paras", "[", "'pre_sum1'", "]", ",", "paras", "[", "'pre_l'", "]", ")", ",", "dtype", "=", "'float32'", ",", "name", "=", "'pre_convert1'", ")", "\n", "pre_convert2", "=", "Input", "(", "shape", "=", "(", "paras", "[", "'pre_sum2'", "]", ",", "paras", "[", "'pre_l'", "]", ")", ",", "dtype", "=", "'float32'", ",", "name", "=", "'pre_convert2'", ")", "\n", "pre_convert3", "=", "Input", "(", "shape", "=", "(", "paras", "[", "'pre_sum3'", "]", ",", "paras", "[", "'pre_l'", "]", ")", ",", "dtype", "=", "'float32'", ",", "name", "=", "'pre_convert3'", ")", "\n", "input_layers", "+=", "[", "qu_convert1", ",", "qu_convert2", ",", "qu_convert3", ",", "pre_convert1", ",", "pre_convert2", ",", "pre_convert3", "]", "# \u8fd9\u91cc\u5199\u6210float\u53ea\u662f\u7b97\u68af\u5ea6\u4ec0\u4e48\u7684\u6bd4\u8f83\u65b9\u4fbf~", "\n", "\n", "qu_uig_group", "=", "get_ig_inputs", "(", "1", ",", "paras", "[", "'qu_i'", "]", "[", "0", "]", ",", "'qu'", ")", "\n", "qu_big_group", "=", "get_ig_inputs", "(", "2", ",", "paras", "[", "'qu_i'", "]", "[", "1", "]", ",", "'qu'", ")", "\n", "qu_tig_group", "=", "get_ig_inputs", "(", "3", ",", "paras", "[", "'qu_i'", "]", "[", "2", "]", ",", "'qu'", ")", "\n", "pre_uig_group", "=", "get_ig_inputs", "(", "1", ",", "paras", "[", "'pre_i'", "]", "[", "0", "]", ",", "'pre'", ")", "\n", "pre_big_group", "=", "get_ig_inputs", "(", "2", ",", "paras", "[", "'pre_i'", "]", "[", "1", "]", ",", "'pre'", ")", "\n", "pre_tig_group", "=", "get_ig_inputs", "(", "3", ",", "paras", "[", "'pre_i'", "]", "[", "2", "]", ",", "'pre'", ")", "\n", "qu_igs", "=", "[", "qu_uig_group", ",", "qu_big_group", ",", "qu_tig_group", "]", "\n", "pre_igs", "=", "[", "pre_uig_group", ",", "pre_big_group", ",", "pre_tig_group", "]", "\n", "\n", "input_layers", "+=", "qu_uig_group", "+", "qu_big_group", "+", "qu_tig_group", "+", "pre_uig_group", "+", "pre_big_group", "+", "pre_tig_group", "\n", "# print(len(input_layers))", "\n", "# for t in input_layers :", "\n", "#     print(t.name, get_shape(t))", "\n", "\"\"\"\n    22\n    qu:0 (?, 50)    pre:0 (?, 20)\n\n    qu_convert1:0 (?, 50, 50)   qu_convert2:0 (?, 76, 50)   qu_convert3:0 (?, 92, 50)\n    pre_convert1:0 (?, 20, 20)  pre_convert2:0 (?, 46, 20)  pre_convert3:0 (?, 62, 20)\n    \n    qu_uig_1:0 (?, 50, 1)\n    qu_big_1:0 (?, 50, 2)   qu_big_3:0 (?, 60, 2)   qu_big_10:0 (?, 60, 2)\n    qu_tig_1:0 (?, 50, 3)   qu_tig_3:0 (?, 90, 3)   qu_tig_10:0 (?, 90, 3)  qu_tig_30:0 (?, 90, 3)\n\n    pre_uig_1:0 (?, 20, 1)  \n    pre_big_1:0 (?, 20, 2)  pre_big_3:0 (?, 60, 2)  pre_big_10:0 (?, 60, 2)\n    pre_tig_1:0 (?, 20, 3)  pre_tig_3:0 (?, 90, 3)  pre_tig_10:0 (?, 90, 3) pre_tig_30:0 (?, 90, 3)\n    \"\"\"", "\n", "\n", "\"\"\"   convolution   \"\"\"", "\n", "cnn1_0", "=", "Dense", "(", "256", ",", "name", "=", "'cnn1_0'", ")", "\n", "cnn1_1", "=", "Dense", "(", "512", ",", "name", "=", "'cnn1_1'", ")", "\n", "cnn1_2", "=", "Dense", "(", "256", ",", "name", "=", "'cnn1_2'", ")", "\n", "cnn1", "=", "[", "cnn1_0", ",", "cnn1_1", ",", "cnn1_2", "]", "\n", "if", "model_param", "[", "'pooling_mode'", "]", "==", "'attentive'", ":", "\n", "        ", "attentive_denses", "=", "[", "Dense", "(", "t", ",", "use_bias", "=", "False", ",", "name", "=", "'a_dense_1_%d'", "%", "(", "i", ")", ")", "\n", "for", "i", ",", "t", "in", "enumerate", "(", "[", "256", ",", "512", ",", "256", "]", ")", "]", "\n", "", "elif", "model_param", "[", "'pooling_mode'", "]", "==", "'gated'", ":", "\n", "        ", "attentive_denses", "=", "[", "Dense", "(", "t", ",", "activation", "=", "None", ",", "name", "=", "'a_dense_1_%d'", "%", "(", "i", ")", ")", "\n", "for", "i", ",", "t", "in", "enumerate", "(", "[", "1", ",", "1", ",", "1", "]", ")", "]", "\n", "", "else", ":", "\n", "        ", "attentive_denses", "=", "None", "\n", "\n", "\n", "", "qu_results", "=", "one_layer", "(", "qu_igs", ",", "qu_words", ",", "cnn1", ",", "paras", "[", "'qu_i'", "]", ",", "converts", "=", "[", "qu_convert1", ",", "qu_convert2", ",", "qu_convert3", "]", ",", "\n", "pooling_mode", "=", "model_param", "[", "'pooling_mode'", "]", ",", "attentive_dense", "=", "attentive_denses", ")", "\n", "pre_results", "=", "one_layer", "(", "pre_igs", ",", "pre_words", ",", "cnn1", ",", "paras", "[", "'pre_i'", "]", ",", "converts", "=", "[", "pre_convert1", ",", "pre_convert2", ",", "pre_convert3", "]", ",", "\n", "pooling_mode", "=", "model_param", "[", "'pooling_mode'", "]", ",", "attentive_dense", "=", "attentive_denses", ")", "\n", "# (?, 80, 1024)", "\n", "# (?, 160, 1024)", "\n", "\n", "for", "i", "in", "range", "(", "model_param", "[", "'layer_num'", "]", "-", "1", ")", ":", "\n", "        ", "cnn2_0", "=", "Dense", "(", "256", ",", "name", "=", "'cnn%d_0'", "%", "(", "i", "+", "2", ")", ")", "\n", "cnn2_1", "=", "Dense", "(", "512", ",", "name", "=", "'cnn%d_1'", "%", "(", "i", "+", "2", ")", ")", "\n", "cnn2_2", "=", "Dense", "(", "256", ",", "name", "=", "'cnn%d_2'", "%", "(", "i", "+", "2", ")", ")", "\n", "cnn2", "=", "[", "cnn2_0", ",", "cnn2_1", ",", "cnn2_2", "]", "\n", "if", "model_param", "[", "'pooling_mode'", "]", "==", "'attentive'", ":", "\n", "            ", "attentive_denses_t", "=", "[", "Dense", "(", "t", ",", "use_bias", "=", "False", ",", "name", "=", "'a_dense_%d_%d'", "%", "(", "i", "+", "2", ",", "j", ")", ")", "\n", "for", "j", ",", "t", "in", "enumerate", "(", "[", "256", ",", "512", ",", "256", "]", ")", "]", "\n", "", "elif", "model_param", "[", "'pooling_mode'", "]", "==", "'gated'", ":", "\n", "            ", "attentive_denses_t", "=", "[", "Dense", "(", "t", ",", "activation", "=", "None", ",", "name", "=", "'a_dense_%d_%d'", "%", "(", "i", "+", "2", ",", "j", ")", ")", "\n", "for", "j", ",", "t", "in", "enumerate", "(", "[", "1", ",", "1", ",", "1", "]", ")", "]", "\n", "", "else", ":", "\n", "            ", "attentive_denses_t", "=", "None", "\n", "\n", "\n", "", "qu_results_2", "=", "one_layer", "(", "qu_igs", ",", "qu_results", ",", "cnn2", ",", "paras", "[", "'qu_i'", "]", ",", "converts", "=", "[", "qu_convert1", ",", "qu_convert2", ",", "qu_convert3", "]", ",", "\n", "active", "=", "None", ",", "pooling_mode", "=", "model_param", "[", "'pooling_mode'", "]", ",", "attentive_dense", "=", "attentive_denses_t", ")", "\n", "pre_results_2", "=", "one_layer", "(", "pre_igs", ",", "pre_results", ",", "cnn2", ",", "paras", "[", "'pre_i'", "]", ",", "converts", "=", "[", "pre_convert1", ",", "pre_convert2", ",", "pre_convert3", "]", ",", "\n", "active", "=", "None", ",", "pooling_mode", "=", "model_param", "[", "'pooling_mode'", "]", ",", "attentive_dense", "=", "attentive_denses_t", ")", "\n", "# (?, 80, 1024)", "\n", "# (?, 160, 1024)", "\n", "\n", "qu_results_2", "=", "Activation", "(", "'relu'", ")", "(", "Add", "(", ")", "(", "[", "qu_results", ",", "qu_results_2", "]", ")", ")", "\n", "pre_results_2", "=", "Activation", "(", "'relu'", ")", "(", "Add", "(", ")", "(", "[", "pre_results", ",", "pre_results_2", "]", ")", ")", "\n", "qu_results", "=", "qu_results_2", "\n", "pre_results", "=", "pre_results_2", "\n", "\n", "", "\"\"\"   merge   \"\"\"", "\n", "label", "=", "count_similarity", "(", "qu_results", ",", "pre_results", ")", "\n", "# (?, 1)", "\n", "\n", "model", "=", "Model", "(", "inputs", "=", "input_layers", ",", "outputs", "=", "[", "label", "]", ")", "\n", "model", ".", "compile", "(", "loss", "=", "{", "'label'", ":", "'binary_crossentropy'", "}", ",", "optimizer", "=", "'adadelta'", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.model.model_nlpcc_irqa_cws.get_para": [[28, 60], ["sum", "sum", "sum", "sum", "sum", "sum", "int", "int", "int", "int", "int", "int"], "function", ["None"], ["def", "get_para", "(", ")", ":", "\n", "    ", "paras", "=", "{", "\n", "'qu_l'", ":", "80", ",", "\n", "'sent_l'", ":", "160", ",", "\n", "}", "\n", "paras", "[", "'qu_i'", "]", "=", "[", "\n", "[", "[", "1", ",", "paras", "[", "'qu_l'", "]", "]", "]", ",", "\n", "[", "[", "1", ",", "paras", "[", "'qu_l'", "]", "]", ",", "[", "2", ",", "100", "]", ",", "[", "3", ",", "60", "]", ",", "[", "6", ",", "60", "]", ",", "[", "12", ",", "60", "]", "]", ",", "\n", "[", "[", "1", ",", "paras", "[", "'qu_l'", "]", "]", ",", "[", "2", ",", "120", "]", ",", "[", "3", ",", "90", "]", ",", "[", "6", ",", "180", "]", ",", "[", "12", ",", "180", "]", ",", "[", "30", ",", "150", "]", "]", ",", "\n", "]", "\n", "paras", "[", "'sent_i'", "]", "=", "[", "\n", "[", "[", "1", ",", "paras", "[", "'sent_l'", "]", "]", "]", ",", "\n", "[", "[", "1", ",", "paras", "[", "'sent_l'", "]", "]", ",", "[", "2", ",", "200", "]", ",", "[", "3", ",", "180", "]", ",", "[", "6", ",", "120", "]", ",", "[", "12", ",", "60", "]", "]", ",", "\n", "[", "[", "1", ",", "paras", "[", "'sent_l'", "]", "]", ",", "[", "2", ",", "240", "]", ",", "[", "3", ",", "180", "]", ",", "[", "6", ",", "360", "]", ",", "[", "12", ",", "360", "]", ",", "[", "30", ",", "150", "]", "]", ",", "\n", "]", "\n", "paras", "[", "'qu_sum1'", "]", "=", "sum", "(", "[", "int", "(", "t", "[", "1", "]", "/", "t", "[", "0", "]", ")", "for", "t", "in", "paras", "[", "'qu_i'", "]", "[", "0", "]", "]", ")", "\n", "paras", "[", "'qu_sum2'", "]", "=", "sum", "(", "[", "int", "(", "t", "[", "1", "]", "/", "t", "[", "0", "]", ")", "for", "t", "in", "paras", "[", "'qu_i'", "]", "[", "1", "]", "]", ")", "\n", "paras", "[", "'qu_sum3'", "]", "=", "sum", "(", "[", "int", "(", "t", "[", "1", "]", "/", "t", "[", "0", "]", ")", "for", "t", "in", "paras", "[", "'qu_i'", "]", "[", "2", "]", "]", ")", "\n", "paras", "[", "'sent_sum1'", "]", "=", "sum", "(", "[", "int", "(", "t", "[", "1", "]", "/", "t", "[", "0", "]", ")", "for", "t", "in", "paras", "[", "'sent_i'", "]", "[", "0", "]", "]", ")", "\n", "paras", "[", "'sent_sum2'", "]", "=", "sum", "(", "[", "int", "(", "t", "[", "1", "]", "/", "t", "[", "0", "]", ")", "for", "t", "in", "paras", "[", "'sent_i'", "]", "[", "1", "]", "]", ")", "\n", "paras", "[", "'sent_sum3'", "]", "=", "sum", "(", "[", "int", "(", "t", "[", "1", "]", "/", "t", "[", "0", "]", ")", "for", "t", "in", "paras", "[", "'sent_i'", "]", "[", "2", "]", "]", ")", "\n", "\"\"\"\n    # print (json.dumps(paras, indent=2))\n    \"qu_sum1\": 80,\n    \"qu_sum2\": 165,\n    \"qu_sum3\": 220,\n    \"sent_sum1\": 160,\n    \"sent_sum2\": 345,\n    \"sent_sum3\": 435\n    \"\"\"", "\n", "# print(paras)", "\n", "return", "paras", "\n", "\n"]], "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.model.model_nlpcc_irqa_cws.get_model": [[61, 188], ["model_nlpcc_irqa_cws.get_para", "keras.layers.Input", "keras.layers.Input", "keras.layers.Input", "keras.layers.Input", "numpy.shape", "keras.layers.Embedding", "keras.layers.Embedding.", "keras.layers.Embedding.", "keras.layers.Input", "keras.layers.Input", "keras.layers.Input", "keras.layers.Input", "keras.layers.Input", "keras.layers.Input", "model_nlpcc_kbre_cws.get_ig_inputs", "model_nlpcc_kbre_cws.get_ig_inputs", "model_nlpcc_kbre_cws.get_ig_inputs", "model_nlpcc_kbre_cws.get_ig_inputs", "model_nlpcc_kbre_cws.get_ig_inputs", "model_nlpcc_kbre_cws.get_ig_inputs", "keras.layers.Dense", "keras.layers.Dense", "keras.layers.Dense", "model_nlpcc_kbre_cws.one_layer", "model_nlpcc_kbre_cws.one_layer", "range", "model_base.count_similarity", "keras.models.Model", "keras.models.Model.compile", "keras.layers.Reshape", "keras.layers.Reshape", "keras.layers.Concatenate", "keras.layers.Concatenate", "keras.layers.Dense", "keras.layers.Dense", "keras.layers.Dense", "model_nlpcc_kbre_cws.one_layer", "model_nlpcc_kbre_cws.one_layer", "keras.layers.Dense", "keras.layers.Activation", "keras.layers.Activation", "enumerate", "keras.layers.Dense", "keras.layers.Dense", "keras.layers.Add", "keras.layers.Add", "enumerate", "enumerate", "keras.layers.Dense", "enumerate"], "function", ["home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.model.model_nlpcc_irqa_cws.get_para", "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.model.model_nlpcc_kbre_cws.get_ig_inputs", "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.model.model_nlpcc_kbre_cws.get_ig_inputs", "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.model.model_nlpcc_kbre_cws.get_ig_inputs", "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.model.model_nlpcc_kbre_cws.get_ig_inputs", "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.model.model_nlpcc_kbre_cws.get_ig_inputs", "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.model.model_nlpcc_kbre_cws.get_ig_inputs", "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.model.model_nlpcc_kbre_cws.one_layer", "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.model.model_nlpcc_kbre_cws.one_layer", "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.model.model_base.count_similarity", "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.model.model_nlpcc_kbre_cws.one_layer", "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.model.model_nlpcc_kbre_cws.one_layer"], ["", "def", "get_model", "(", "wordMatrix", ",", "model_param", "=", "None", ")", ":", "\n", "    ", "if", "model_param", "is", "None", ":", "\n", "        ", "model_param", "=", "{", "'layer_num'", ":", "2", "}", "\n", "", "if", "not", "'pooling_mode'", "in", "model_param", ":", "\n", "        ", "model_param", "[", "'pooling_mode'", "]", "=", "'max'", "\n", "", "paras", "=", "get_para", "(", ")", "\n", "\n", "\"\"\"   inputs   \"\"\"", "\n", "qu_ids", "=", "Input", "(", "shape", "=", "(", "paras", "[", "'qu_l'", "]", ",", ")", ",", "dtype", "=", "'int32'", ",", "name", "=", "'qu'", ")", "\n", "pre_ids", "=", "Input", "(", "shape", "=", "(", "paras", "[", "'sent_l'", "]", ",", ")", ",", "dtype", "=", "'int32'", ",", "name", "=", "'sent'", ")", "\n", "qu_feature", "=", "Input", "(", "shape", "=", "(", "paras", "[", "'qu_l'", "]", ",", ")", ",", "dtype", "=", "'float32'", ",", "name", "=", "'qu_feature'", ")", "\n", "pre_feature", "=", "Input", "(", "shape", "=", "(", "paras", "[", "'sent_l'", "]", ",", ")", ",", "dtype", "=", "'float32'", ",", "name", "=", "'sent_feature'", ")", "\n", "input_layers", "=", "[", "qu_ids", ",", "pre_ids", ",", "qu_feature", ",", "pre_feature", "]", "\n", "# (?, 50) (?, 20)", "\n", "\n", "\"\"\"   embedding   \"\"\"", "\n", "input_dim", ",", "output_dim", "=", "np", ".", "shape", "(", "wordMatrix", ")", "\n", "embedding", "=", "Embedding", "(", "input_dim", ",", "output_dim", ",", "weights", "=", "[", "wordMatrix", "]", ",", "name", "=", "'embedding'", ")", "\n", "\n", "qu_words", "=", "embedding", "(", "qu_ids", ")", "\n", "pre_words", "=", "embedding", "(", "pre_ids", ")", "\n", "# (?, 50, 300) (?, 20, 300)", "\n", "\n", "qu_feature_c", "=", "Reshape", "(", "(", "paras", "[", "'qu_l'", "]", ",", "1", ")", ")", "(", "qu_feature", ")", "\n", "pre_feature_c", "=", "Reshape", "(", "(", "paras", "[", "'sent_l'", "]", ",", "1", ")", ")", "(", "pre_feature", ")", "\n", "qu_words", "=", "Concatenate", "(", ")", "(", "[", "qu_words", ",", "qu_feature_c", "]", ")", "\n", "pre_words", "=", "Concatenate", "(", ")", "(", "[", "pre_words", ",", "pre_feature_c", "]", ")", "\n", "# (?, 60, 301) (?, 120, 301)", "\n", "\n", "\"\"\"   index_inputs   \"\"\"", "\n", "qu_convert1", "=", "Input", "(", "shape", "=", "(", "paras", "[", "'qu_sum1'", "]", ",", "paras", "[", "'qu_l'", "]", ")", ",", "dtype", "=", "'float32'", ",", "name", "=", "'qu_convert1'", ")", "\n", "qu_convert2", "=", "Input", "(", "shape", "=", "(", "paras", "[", "'qu_sum2'", "]", ",", "paras", "[", "'qu_l'", "]", ")", ",", "dtype", "=", "'float32'", ",", "name", "=", "'qu_convert2'", ")", "\n", "qu_convert3", "=", "Input", "(", "shape", "=", "(", "paras", "[", "'qu_sum3'", "]", ",", "paras", "[", "'qu_l'", "]", ")", ",", "dtype", "=", "'float32'", ",", "name", "=", "'qu_convert3'", ")", "\n", "pre_convert1", "=", "Input", "(", "shape", "=", "(", "paras", "[", "'sent_sum1'", "]", ",", "paras", "[", "'sent_l'", "]", ")", ",", "dtype", "=", "'float32'", ",", "name", "=", "'sent_convert1'", ")", "\n", "pre_convert2", "=", "Input", "(", "shape", "=", "(", "paras", "[", "'sent_sum2'", "]", ",", "paras", "[", "'sent_l'", "]", ")", ",", "dtype", "=", "'float32'", ",", "name", "=", "'sent_convert2'", ")", "\n", "pre_convert3", "=", "Input", "(", "shape", "=", "(", "paras", "[", "'sent_sum3'", "]", ",", "paras", "[", "'sent_l'", "]", ")", ",", "dtype", "=", "'float32'", ",", "name", "=", "'sent_convert3'", ")", "\n", "input_layers", "+=", "[", "qu_convert1", ",", "qu_convert2", ",", "qu_convert3", ",", "pre_convert1", ",", "pre_convert2", ",", "pre_convert3", "]", "# \u8fd9\u91cc\u5199\u6210float\u53ea\u662f\u7b97\u68af\u5ea6\u4ec0\u4e48\u7684\u6bd4\u8f83\u65b9\u4fbf~", "\n", "\n", "qu_uig_group", "=", "get_ig_inputs", "(", "1", ",", "paras", "[", "'qu_i'", "]", "[", "0", "]", ",", "'qu'", ")", "\n", "qu_big_group", "=", "get_ig_inputs", "(", "2", ",", "paras", "[", "'qu_i'", "]", "[", "1", "]", ",", "'qu'", ")", "\n", "qu_tig_group", "=", "get_ig_inputs", "(", "3", ",", "paras", "[", "'qu_i'", "]", "[", "2", "]", ",", "'qu'", ")", "\n", "pre_uig_group", "=", "get_ig_inputs", "(", "1", ",", "paras", "[", "'sent_i'", "]", "[", "0", "]", ",", "'sent'", ")", "\n", "pre_big_group", "=", "get_ig_inputs", "(", "2", ",", "paras", "[", "'sent_i'", "]", "[", "1", "]", ",", "'sent'", ")", "\n", "pre_tig_group", "=", "get_ig_inputs", "(", "3", ",", "paras", "[", "'sent_i'", "]", "[", "2", "]", ",", "'sent'", ")", "\n", "qu_igs", "=", "[", "qu_uig_group", ",", "qu_big_group", ",", "qu_tig_group", "]", "\n", "pre_igs", "=", "[", "pre_uig_group", ",", "pre_big_group", ",", "pre_tig_group", "]", "\n", "\n", "input_layers", "+=", "qu_uig_group", "+", "qu_big_group", "+", "qu_tig_group", "+", "pre_uig_group", "+", "pre_big_group", "+", "pre_tig_group", "\n", "# print(len(input_layers))", "\n", "# for t in input_layers :", "\n", "#     print(t.name, get_shape(t))", "\n", "\"\"\"\n    22\n    qu:0 (?, 50)    pre:0 (?, 20)\n\n    qu_convert1:0 (?, 50, 50)   qu_convert2:0 (?, 76, 50)   qu_convert3:0 (?, 92, 50)\n    pre_convert1:0 (?, 20, 20)  pre_convert2:0 (?, 46, 20)  pre_convert3:0 (?, 62, 20)\n    \n    qu_uig_1:0 (?, 50, 1)\n    qu_big_1:0 (?, 50, 2)   qu_big_3:0 (?, 60, 2)   qu_big_10:0 (?, 60, 2)\n    qu_tig_1:0 (?, 50, 3)   qu_tig_3:0 (?, 90, 3)   qu_tig_10:0 (?, 90, 3)  qu_tig_30:0 (?, 90, 3)\n\n    pre_uig_1:0 (?, 20, 1)  \n    pre_big_1:0 (?, 20, 2)  pre_big_3:0 (?, 60, 2)  pre_big_10:0 (?, 60, 2)\n    pre_tig_1:0 (?, 20, 3)  pre_tig_3:0 (?, 90, 3)  pre_tig_10:0 (?, 90, 3) pre_tig_30:0 (?, 90, 3)\n    \"\"\"", "\n", "\n", "\"\"\"   convolution   \"\"\"", "\n", "cnn1_0", "=", "Dense", "(", "256", ",", "name", "=", "'cnn1_0'", ")", "\n", "cnn1_1", "=", "Dense", "(", "512", ",", "name", "=", "'cnn1_1'", ")", "\n", "cnn1_2", "=", "Dense", "(", "256", ",", "name", "=", "'cnn1_2'", ")", "\n", "cnn1", "=", "[", "cnn1_0", ",", "cnn1_1", ",", "cnn1_2", "]", "\n", "if", "model_param", "[", "'pooling_mode'", "]", "==", "'attentive'", ":", "\n", "        ", "attentive_denses", "=", "[", "Dense", "(", "t", ",", "use_bias", "=", "False", ",", "name", "=", "'a_dense_1_%d'", "%", "(", "i", ")", ")", "\n", "for", "i", ",", "t", "in", "enumerate", "(", "[", "256", ",", "512", ",", "256", "]", ")", "]", "\n", "", "elif", "model_param", "[", "'pooling_mode'", "]", "==", "'gated'", ":", "\n", "        ", "attentive_denses", "=", "[", "Dense", "(", "t", ",", "activation", "=", "None", ",", "name", "=", "'a_dense_1_%d'", "%", "(", "i", ")", ")", "\n", "for", "i", ",", "t", "in", "enumerate", "(", "[", "1", ",", "1", ",", "1", "]", ")", "]", "\n", "", "else", ":", "\n", "        ", "attentive_denses", "=", "None", "\n", "\n", "\n", "", "qu_results", "=", "one_layer", "(", "qu_igs", ",", "qu_words", ",", "cnn1", ",", "paras", "[", "'qu_i'", "]", ",", "converts", "=", "[", "qu_convert1", ",", "qu_convert2", ",", "qu_convert3", "]", ",", "\n", "pooling_mode", "=", "model_param", "[", "'pooling_mode'", "]", ",", "attentive_dense", "=", "attentive_denses", ")", "\n", "pre_results", "=", "one_layer", "(", "pre_igs", ",", "pre_words", ",", "cnn1", ",", "paras", "[", "'sent_i'", "]", ",", "converts", "=", "[", "pre_convert1", ",", "pre_convert2", ",", "pre_convert3", "]", ",", "\n", "pooling_mode", "=", "model_param", "[", "'pooling_mode'", "]", ",", "attentive_dense", "=", "attentive_denses", ")", "\n", "# (?, 50, 1024)", "\n", "# (?, 20, 1024)", "\n", "\n", "for", "i", "in", "range", "(", "model_param", "[", "'layer_num'", "]", "-", "1", ")", ":", "\n", "        ", "cnn2_0", "=", "Dense", "(", "256", ",", "name", "=", "'cnn%d_0'", "%", "(", "i", "+", "2", ")", ")", "\n", "cnn2_1", "=", "Dense", "(", "512", ",", "name", "=", "'cnn%d_1'", "%", "(", "i", "+", "2", ")", ")", "\n", "cnn2_2", "=", "Dense", "(", "256", ",", "name", "=", "'cnn%d_2'", "%", "(", "i", "+", "2", ")", ")", "\n", "cnn2", "=", "[", "cnn2_0", ",", "cnn2_1", ",", "cnn2_2", "]", "\n", "if", "model_param", "[", "'pooling_mode'", "]", "==", "'attentive'", ":", "\n", "            ", "attentive_denses_t", "=", "[", "Dense", "(", "t", ",", "use_bias", "=", "False", ",", "name", "=", "'a_dense_%d_%d'", "%", "(", "i", "+", "2", ",", "j", ")", ")", "\n", "for", "j", ",", "t", "in", "enumerate", "(", "[", "256", ",", "512", ",", "256", "]", ")", "]", "\n", "", "elif", "model_param", "[", "'pooling_mode'", "]", "==", "'gated'", ":", "\n", "            ", "attentive_denses_t", "=", "[", "Dense", "(", "t", ",", "activation", "=", "None", ",", "name", "=", "'a_dense_%d_%d'", "%", "(", "i", "+", "2", ",", "j", ")", ")", "\n", "for", "j", ",", "t", "in", "enumerate", "(", "[", "1", ",", "1", ",", "1", "]", ")", "]", "\n", "", "else", ":", "\n", "            ", "attentive_denses_t", "=", "None", "\n", "\n", "\n", "", "qu_results_2", "=", "one_layer", "(", "qu_igs", ",", "qu_results", ",", "cnn2", ",", "paras", "[", "'qu_i'", "]", ",", "converts", "=", "[", "qu_convert1", ",", "qu_convert2", ",", "qu_convert3", "]", ",", "\n", "active", "=", "None", ",", "pooling_mode", "=", "model_param", "[", "'pooling_mode'", "]", ",", "attentive_dense", "=", "attentive_denses_t", ")", "\n", "pre_results_2", "=", "one_layer", "(", "pre_igs", ",", "pre_results", ",", "cnn2", ",", "paras", "[", "'sent_i'", "]", ",", "converts", "=", "[", "pre_convert1", ",", "pre_convert2", ",", "pre_convert3", "]", ",", "\n", "active", "=", "None", ",", "pooling_mode", "=", "model_param", "[", "'pooling_mode'", "]", ",", "attentive_dense", "=", "attentive_denses_t", ")", "\n", "# (?, 50, 1024)", "\n", "# (?, 20, 1024)", "\n", "\n", "qu_results_2", "=", "Activation", "(", "'relu'", ")", "(", "Add", "(", ")", "(", "[", "qu_results", ",", "qu_results_2", "]", ")", ")", "\n", "pre_results_2", "=", "Activation", "(", "'relu'", ")", "(", "Add", "(", ")", "(", "[", "pre_results", ",", "pre_results_2", "]", ")", ")", "\n", "qu_results", "=", "qu_results_2", "\n", "pre_results", "=", "pre_results_2", "\n", "\n", "\n", "", "\"\"\"   merge   \"\"\"", "\n", "label", "=", "count_similarity", "(", "qu_results", ",", "pre_results", ")", "\n", "# (?, 1)", "\n", "\n", "model", "=", "Model", "(", "inputs", "=", "input_layers", ",", "outputs", "=", "[", "label", "]", ")", "\n", "# from keras.utils import multi_gpu_model", "\n", "# model = multi_gpu_model(model, gpus=2)", "\n", "model", ".", "compile", "(", "loss", "=", "{", "'label'", ":", "'binary_crossentropy'", "}", ",", "optimizer", "=", "'adadelta'", ")", "#my_loss_llh adadelta", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.model.model_base.my_loss_llh": [[25, 40], ["keras.clip", "tensorflow.reduce_mean", "keras.epsilon", "keras.epsilon", "tensorflow.log", "tensorflow.log"], "function", ["None"], ["def", "my_loss_llh", "(", "y_true", ",", "y_pred", ")", ":", "\n", "#  y_true.shape : (?, ?) ", "\n", "#  y_pred.shape : (?, 1)", "\n", "    ", "\"\"\"\n    cross_entropy : \n    \u4e5f\u8bb8\u4e5f\u662f\u5bf9\u6570\u4f3c\u7136\uff1f\n    - sum_i ( p_i * log(q_i) ) \u5176\u4e2d\uff0cpi\u4e3a\u771f\u5b9ei\u7c7b\u522b\u6982\u7387\uff0cqi\u4e3a\u9884\u6d4bi\u7c7b\u522b\u6982\u7387~\n    \"\"\"", "\n", "\n", "y_pred", "=", "K", ".", "clip", "(", "y_pred", ",", "K", ".", "epsilon", "(", ")", ",", "1", "-", "K", ".", "epsilon", "(", ")", ")", "\n", "\n", "loss", "=", "-", "(", "y_true", "*", "tf", ".", "log", "(", "y_pred", ")", "+", "(", "1", "-", "y_true", ")", "*", "tf", ".", "log", "(", "1", "-", "y_pred", ")", ")", "\n", "loss", "=", "tf", ".", "reduce_mean", "(", "loss", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.model.model_base.count_similarity": [[41, 64], ["keras.layers.Lambda", "keras.layers.Dense", "keras.layers.Dense", "keras.layers.Dense.", "keras.layers.Dense.", "keras.layers.Lambda.", "keras.layers.Lambda.", "keras.layers.Multiply", "keras.layers.Dropout", "keras.layers.Dropout", "tensorflow.reduce_max"], "function", ["None"], ["", "def", "count_similarity", "(", "qu_seq_1", ",", "pre_seq_1", ",", "pooling_mode", "=", "'max'", ")", ":", "\n", "    ", "myMaxPooling1D", "=", "Lambda", "(", "lambda", "x", ":", "tf", ".", "reduce_max", "(", "x", ",", "1", ")", ")", "\n", "assert", "pooling_mode", "in", "[", "'max'", ",", "'none'", "]", "\n", "if", "pooling_mode", "==", "'max'", ":", "\n", "        ", "qu_vec", "=", "myMaxPooling1D", "(", "qu_seq_1", ")", "\n", "pre_vec", "=", "myMaxPooling1D", "(", "pre_seq_1", ")", "\n", "", "elif", "pooling_mode", "==", "'none'", ":", "\n", "        ", "qu_vec", "=", "qu_seq_1", "\n", "pre_vec", "=", "pre_seq_1", "\n", "# (?, 1024) (?, 1024)", "\n", "", "merge", "=", "Multiply", "(", ")", "(", "[", "qu_vec", ",", "pre_vec", "]", ")", "\n", "# (?, 1024)", "\n", "\n", "dense_merge", "=", "Dense", "(", "1024", ",", "activation", "=", "'relu'", ",", "name", "=", "'dense_merge_1'", ")", "\n", "dense_final", "=", "Dense", "(", "1", ",", "activation", "=", "'sigmoid'", ",", "name", "=", "'label'", ")", "\n", "merge", "=", "Dropout", "(", "0.5", ")", "(", "merge", ")", "\n", "merge", "=", "dense_merge", "(", "merge", ")", "\n", "merge", "=", "Dropout", "(", "0.5", ")", "(", "merge", ")", "\n", "# (?, 1024)", "\n", "\n", "label", "=", "dense_final", "(", "merge", ")", "\n", "# (?, 1)", "\n", "return", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.model.model_base.get_classify": [[65, 81], ["keras.layers.Dense", "keras.layers.Dense", "keras.layers.Lambda", "keras.layers.Lambda.", "keras.layers.Dense.", "keras.layers.Dense.", "type", "keras.layers.Dropout", "keras.layers.Dropout", "tensorflow.reduce_max"], "function", ["None"], ["", "def", "get_classify", "(", "test_seq", ",", "n_class", ")", ":", "\n", "    ", "assert", "type", "(", "n_class", ")", "is", "int", "\n", "\n", "dense_hidden", "=", "Dense", "(", "1024", ",", "activation", "=", "'relu'", ",", "name", "=", "'dense_hidden_1'", ")", "\n", "dense_final", "=", "Dense", "(", "n_class", ",", "activation", "=", "'softmax'", ",", "name", "=", "'label'", ")", "\n", "\n", "myMaxPooling1D", "=", "Lambda", "(", "lambda", "x", ":", "tf", ".", "reduce_max", "(", "x", ",", "1", ")", ")", "\n", "\n", "hidden_layer", "=", "myMaxPooling1D", "(", "test_seq", ")", "\n", "hidden_layer", "=", "Dropout", "(", "0.5", ")", "(", "hidden_layer", ")", "\n", "hidden_layer", "=", "dense_hidden", "(", "hidden_layer", ")", "\n", "hidden_layer", "=", "Dropout", "(", "0.5", ")", "(", "hidden_layer", ")", "\n", "\n", "label", "=", "dense_final", "(", "hidden_layer", ")", "\n", "\n", "return", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.model.model_nlpcc_kbre_gcn.gcn_layer": [[28, 136], ["keras.layers.Lambda", "keras.layers.Lambda", "enumerate", "keras.layers.Lambda.", "index_cnn.append", "tensorflow.sign", "tensorflow.cast", "tensorflow.expand_dims", "model_nlpcc_kbre_gcn.gcn_layer.get_indicator"], "function", ["None"], ["def", "gcn_layer", "(", "indexs", ",", "words", ",", "dense_list", ",", "active", "=", "'relu'", ",", "mode", "=", "'gcn'", ",", "gate_dense", "=", "None", ")", ":", "\n", "    ", "assert", "mode", "in", "[", "'gcn'", ",", "'maxlcn'", ",", "'avelcn'", ",", "'gat_n'", ",", "'gcn_max'", "]", "\n", "len_words", "=", "words", ".", "shape", "[", "1", "]", "\n", "# print(words) (?, 50, 300)", "\n", "\n", "\"\"\"   embedding   \"\"\"", "\n", "onehot_t", "=", "Lambda", "(", "lambda", "x", ":", "K", ".", "one_hot", "(", "x", ",", "len_words", ")", ",", "\n", "output_shape", "=", "lambda", "input_shape", ":", "input_shape", "+", "(", "len_words", ",", ")", ")", "\n", "emb_lookup", "=", "Lambda", "(", "lambda", "x", ":", "tf", ".", "einsum", "(", "'abci,aij->abcj'", ",", "x", "[", "0", "]", ",", "x", "[", "1", "]", ")", ")", "\n", "index_emb", "=", "[", "emb_lookup", "(", "[", "onehot_t", "(", "t", ")", ",", "words", "]", ")", "for", "t", "in", "indexs", "]", "\n", "# print(', '.join(map(get_shape, index_emb)))", "\n", "# (?, 50, 5, 300), (?, 50, 1, 300), (?, 50, 5, 300)", "\n", "\n", "\"\"\"   cnn   \"\"\"", "\n", "index_cnn", "=", "[", "]", "\n", "for", "i", ",", "t", "in", "enumerate", "(", "index_emb", ")", ":", "\n", "        ", "index_cnn", ".", "append", "(", "dense_list", "[", "i", "]", "(", "t", ")", ")", "\n", "# print(', '.join(map(get_shape, index_cnn)))", "\n", "# (?, 50, 5, 1024), (?, 50, 1, 1024), (?, 50, 5, 1024)", "\n", "\n", "", "\"\"\"   combine   \"\"\"", "\n", "def", "get_indicator", "(", "index_all", ")", ":", "\n", "        ", "reduce_index", "=", "tf", ".", "sign", "(", "tf", ".", "abs", "(", "index_all", ")", ")", "\n", "reduce_index", "=", "tf", ".", "cast", "(", "reduce_index", ",", "'float32'", ")", "\n", "reduce_index", "=", "tf", ".", "expand_dims", "(", "reduce_index", ",", "-", "1", ")", "\n", "return", "reduce_index", "\n", "\n", "", "def", "pooling_spt_ave", "(", "cnn_all", ",", "index_all", ")", ":", "\n", "# Tensor(\"concatenate_1/concat:0\", shape=(?, 50, 11), dtype=int32)", "\n", "# Tensor(\"concatenate_2/concat:0\", shape=(?, 50, 11, 1024), dtype=float32)", "\n", "\n", "        ", "indicator_all", "=", "get_indicator", "(", "index_all", ")", "\n", "# Tensor(\"lambda_4/ExpandDims:0\", shape=(?, 50, 11, 1), dtype=float32)", "\n", "cnn_msk", "=", "cnn_all", "*", "indicator_all", "\n", "\n", "cnn_result", "=", "tf", ".", "reduce_sum", "(", "cnn_msk", ",", "axis", "=", "-", "2", ")", "\n", "indicator_sum", "=", "tf", ".", "reduce_sum", "(", "indicator_all", ",", "axis", "=", "-", "2", ")", "\n", "indicator_sum", "=", "indicator_sum", "+", "tf", ".", "cast", "(", "tf", ".", "ones_like", "(", "indicator_sum", ")", ",", "'float32'", ")", "/", "100000.", "\n", "# Tensor(\"lambda_4/Sum:0\", shape=(?, 50, 1024), dtype=float32)", "\n", "# Tensor(\"lambda_4/Sum_1:0\", shape=(?, 50, 1), dtype=float32)", "\n", "cnn_result", "=", "cnn_result", "/", "indicator_sum", "\n", "\n", "return", "cnn_result", "\n", "\n", "", "def", "get_lattice_max", "(", "cnn_all", ")", ":", "\n", "        ", "maxed_cnn_all", "=", "[", "tf", ".", "reduce_max", "(", "t", ",", "axis", "=", "-", "2", ")", "for", "t", "in", "cnn_all", "]", "\n", "result", "=", "Add", "(", ")", "(", "maxed_cnn_all", ")", "\n", "return", "result", "\n", "", "def", "get_lattice_ave", "(", "cnn_all", ",", "index_all", ")", ":", "\n", "# cnn_all : (?, 50, 5, 1024), (?, 50, 1, 1024), (?, 50, 5, 1024)", "\n", "\n", "        ", "indicator_all", "=", "list", "(", "map", "(", "get_indicator", ",", "index_all", ")", ")", "\n", "# tf.Tensor 'lambda_4/ExpandDims:0' shape=(?, 50, 5, 1) dtype=float32", "\n", "# tf.Tensor 'lambda_4/ExpandDims_1:0' shape=(?, 50, 1, 1) dtype=float32", "\n", "# tf.Tensor 'lambda_4/ExpandDims_2:0' shape=(?, 50, 5, 1) dtype=float32", "\n", "indicator_all_sumed", "=", "[", "tf", ".", "reduce_max", "(", "t", ",", "axis", "=", "-", "2", ")", "for", "t", "in", "indicator_all", "]", "\n", "indicator_all_sumed", "=", "[", "t", "+", "tf", ".", "ones_like", "(", "t", ")", "/", "100000.", "for", "t", "in", "indicator_all_sumed", "]", "\n", "# Tensor(\"lambda_4/Max:0\", shape=(?, 50, 1), dtype=float32)", "\n", "# Tensor(\"lambda_4/Max_1:0\", shape=(?, 50, 1), dtype=float32)", "\n", "# Tensor(\"lambda_4/Max_2:0\", shape=(?, 50, 1), dtype=float32)", "\n", "\n", "cnn_all_sumed", "=", "[", "tf", ".", "reduce_sum", "(", "t", "*", "indicator_all", "[", "i", "]", ",", "axis", "=", "-", "2", ")", "/", "indicator_all_sumed", "[", "i", "]", "for", "i", ",", "t", "in", "enumerate", "(", "cnn_all", ")", "]", "\n", "# (?, 50, 1024), (?, 50, 1024), (?, 50, 1024)", "\n", "result", "=", "Add", "(", ")", "(", "cnn_all_sumed", ")", "\n", "return", "result", "\n", "\n", "\n", "", "if", "mode", "==", "'gcn'", ":", "\n", "        ", "index_all", "=", "Concatenate", "(", "axis", "=", "2", ")", "(", "indexs", ")", "\n", "cnn_all", "=", "Concatenate", "(", "axis", "=", "2", ")", "(", "index_cnn", ")", "\n", "# Tensor(\"concatenate_1/concat:0\", shape=(?, 50, 11), dtype=int32)", "\n", "# Tensor(\"concatenate_2/concat:0\", shape=(?, 50, 11, 1024), dtype=float32)", "\n", "\n", "results", "=", "Lambda", "(", "lambda", "x", ":", "pooling_spt_ave", "(", "x", ",", "index_all", ")", ")", "(", "cnn_all", ")", "\n", "", "elif", "mode", "==", "'gcn_max'", ":", "\n", "        ", "cnn_all", "=", "Concatenate", "(", "axis", "=", "2", ")", "(", "index_cnn", ")", "\n", "# Tensor(\"concatenate_1/concat:0\", shape=(?, 50, 11, 1024), dtype=float32)", "\n", "\n", "results", "=", "Lambda", "(", "lambda", "x", ":", "tf", ".", "reduce_max", "(", "x", ",", "axis", "=", "-", "2", ")", ")", "(", "cnn_all", ")", "\n", "", "elif", "mode", "==", "'gat_n'", ":", "\n", "# softmax version", "\n", "        ", "gate_all", "=", "[", "]", "\n", "for", "i", ",", "t", "in", "enumerate", "(", "index_cnn", ")", ":", "\n", "            ", "gate_i", "=", "gate_dense", "[", "i", "]", "(", "t", ")", "\n", "gate_all", ".", "append", "(", "gate_i", ")", "\n", "\n", "", "gate_all", "=", "Concatenate", "(", "axis", "=", "2", ")", "(", "gate_all", ")", "\n", "cnn_all", "=", "Concatenate", "(", "axis", "=", "2", ")", "(", "index_cnn", ")", "\n", "# Tensor(\"concatenate_1/concat:0\", shape=(?, 50, 11, 1), dtype=float32)", "\n", "# Tensor(\"concatenate_2/concat:0\", shape=(?, 50, 11, 1024), dtype=float32)", "\n", "def", "get_weighted_sum", "(", "cnn_all", ",", "gate_all", ")", ":", "\n", "            ", "index_all", "=", "Concatenate", "(", "axis", "=", "2", ")", "(", "indexs", ")", "\n", "indicator_all", "=", "get_indicator", "(", "index_all", ")", "\n", "# Tensor(\"lambda_4/ExpandDims:0\", shape=(?, 50, 11, 1), dtype=float32)", "\n", "\n", "gate_all", "=", "gate_all", "-", "(", "tf", ".", "ones_like", "(", "indicator_all", ")", "-", "indicator_all", ")", "*", "1e6", "\n", "\n", "gate_all", "=", "tf", ".", "nn", ".", "softmax", "(", "gate_all", ",", "axis", "=", "-", "2", ")", "\n", "cnn_all", "=", "cnn_all", "*", "gate_all", "\n", "cnn_all", "=", "tf", ".", "reduce_sum", "(", "cnn_all", ",", "axis", "=", "-", "2", ")", "\n", "return", "cnn_all", "\n", "\n", "", "results", "=", "Lambda", "(", "lambda", "x", ":", "get_weighted_sum", "(", "x", "[", "0", "]", ",", "x", "[", "1", "]", ")", ")", "(", "[", "cnn_all", ",", "gate_all", "]", ")", "\n", "", "elif", "mode", "==", "'maxlcn'", ":", "\n", "        ", "results", "=", "Lambda", "(", "get_lattice_max", ")", "(", "index_cnn", ")", "\n", "", "elif", "mode", "==", "'avelcn'", ":", "\n", "        ", "results", "=", "Lambda", "(", "lambda", "x", ":", "get_lattice_ave", "(", "x", ",", "indexs", ")", ")", "(", "index_cnn", ")", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.model.model_nlpcc_kbre_gcn.get_model": [[137, 251], ["keras.layers.Input", "keras.layers.Input", "keras.layers.Input", "keras.layers.Input", "keras.layers.Input", "keras.layers.Input", "keras.layers.Input", "keras.layers.Input", "keras.layers.Lambda", "keras.layers.Lambda.", "keras.layers.Lambda.", "numpy.shape", "keras.layers.Embedding", "keras.layers.Embedding.", "keras.layers.Embedding.", "keras.layers.Dense", "model_nlpcc_kbre_gcn.gcn_layer", "model_nlpcc_kbre_gcn.gcn_layer", "range", "model_base.count_similarity", "keras.models.Model", "keras.models.Model.compile", "keras.layers.Dense", "keras.layers.Dense", "keras.layers.Dense", "keras.layers.Dense", "model_nlpcc_kbre_gcn.gcn_layer", "model_nlpcc_kbre_gcn.gcn_layer", "keras.expand_dims", "keras.layers.Dense", "keras.layers.Dense", "keras.layers.Dense", "keras.layers.Dense", "keras.layers.Activation", "keras.layers.Activation", "keras.layers.Dense", "keras.layers.Dense", "keras.layers.Dense", "keras.layers.Add", "keras.layers.Add", "keras.layers.Dense", "keras.layers.Dense", "keras.layers.Dense", "keras.layers.Dense", "keras.layers.Dense", "keras.layers.Dense"], "function", ["home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.model.model_nlpcc_kbre_gcn.gcn_layer", "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.model.model_nlpcc_kbre_gcn.gcn_layer", "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.model.model_base.count_similarity", "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.model.model_nlpcc_kbre_gcn.gcn_layer", "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.model.model_nlpcc_kbre_gcn.gcn_layer"], ["", "def", "get_model", "(", "wordMatrix", ",", "model_param", "=", "None", ")", ":", "\n", "    ", "if", "model_param", "is", "None", ":", "\n", "        ", "model_param", "=", "{", "'layer_num'", ":", "1", "}", "\n", "", "if", "not", "'pooling_mode'", "in", "model_param", ":", "\n", "        ", "model_param", "[", "'pooling_mode'", "]", "=", "'gat_2'", "#'gcn'", "\n", "", "if", "not", "'if_d'", "in", "model_param", ":", "\n", "        ", "model_param", "[", "'if_d'", "]", "=", "True", "\n", "", "if", "not", "'n_param'", "in", "model_param", ":", "\n", "        ", "model_param", "[", "'n_param'", "]", "=", "1024", "\n", "# print(json.dumps(model_param))                                                                                                                            ", "\n", "# {\"layer_num\": 1, \"pooling_mode\": \"gcn\", \"if_d\": true}", "\n", "", "qu_l", "=", "50", "\n", "pre_l", "=", "20", "\n", "pad_l", "=", "5", "\n", "\n", "\"\"\"   inputs   \"\"\"", "\n", "qu_ids", "=", "Input", "(", "shape", "=", "(", "qu_l", ",", ")", ",", "dtype", "=", "'int32'", ",", "name", "=", "'qu'", ")", "\n", "pre_ids", "=", "Input", "(", "shape", "=", "(", "pre_l", ",", ")", ",", "dtype", "=", "'int32'", ",", "name", "=", "'pre'", ")", "\n", "input_layers", "=", "[", "qu_ids", ",", "pre_ids", "]", "\n", "# (?, 50) (?, 20)", "\n", "\n", "qu_mid_r", "=", "Input", "(", "shape", "=", "(", "qu_l", ",", ")", ",", "dtype", "=", "'int32'", ",", "name", "=", "'qu_mid'", ")", "\n", "qu_head", "=", "Input", "(", "shape", "=", "(", "qu_l", ",", "pad_l", ")", ",", "dtype", "=", "'int32'", ",", "name", "=", "'qu_head'", ")", "\n", "qu_tail", "=", "Input", "(", "shape", "=", "(", "qu_l", ",", "pad_l", ")", ",", "dtype", "=", "'int32'", ",", "name", "=", "'qu_tail'", ")", "\n", "pre_mid_r", "=", "Input", "(", "shape", "=", "(", "pre_l", ",", ")", ",", "dtype", "=", "'int32'", ",", "name", "=", "'pre_mid'", ")", "\n", "pre_head", "=", "Input", "(", "shape", "=", "(", "pre_l", ",", "pad_l", ")", ",", "dtype", "=", "'int32'", ",", "name", "=", "'pre_head'", ")", "\n", "pre_tail", "=", "Input", "(", "shape", "=", "(", "pre_l", ",", "pad_l", ")", ",", "dtype", "=", "'int32'", ",", "name", "=", "'pre_tail'", ")", "\n", "qu_i_ids", "=", "[", "qu_head", ",", "qu_mid_r", ",", "qu_tail", "]", "\n", "pre_i_ids", "=", "[", "pre_head", ",", "pre_mid_r", ",", "pre_tail", "]", "\n", "input_layers", "+=", "[", "qu_head", ",", "qu_mid_r", ",", "qu_tail", ",", "pre_head", ",", "pre_mid_r", ",", "pre_tail", "]", "\n", "\n", "expand_dim", "=", "Lambda", "(", "lambda", "x", ":", "K", ".", "expand_dims", "(", "x", ",", "-", "1", ")", ",", "output_shape", "=", "lambda", "x", ":", "x", "+", "(", "1", ",", ")", ")", "\n", "qu_i_ids", "[", "1", "]", "=", "expand_dim", "(", "qu_i_ids", "[", "1", "]", ")", "\n", "pre_i_ids", "[", "1", "]", "=", "expand_dim", "(", "pre_i_ids", "[", "1", "]", ")", "\n", "# Tensor(\"lambda_1/ExpandDims:0\", shape=(?, 50, 1), dtype=int32)                                                                                            ", "\n", "# Tensor(\"lambda_1_1/ExpandDims:0\", shape=(?, 20, 1), dtype=int32)", "\n", "\n", "\"\"\"   embedding   \"\"\"", "\n", "input_dim", ",", "output_dim", "=", "np", ".", "shape", "(", "wordMatrix", ")", "\n", "embedding", "=", "Embedding", "(", "input_dim", ",", "output_dim", ",", "weights", "=", "[", "wordMatrix", "]", ",", "name", "=", "'embedding'", ")", "\n", "\n", "qu_words", "=", "embedding", "(", "qu_ids", ")", "\n", "pre_words", "=", "embedding", "(", "pre_ids", ")", "\n", "# (?, 50, 300) (?, 20, 300)", "\n", "\n", "\"\"\"   convolution   \"\"\"", "\n", "n_param", "=", "model_param", "[", "'n_param'", "]", "#1024", "\n", "cnn1_head", "=", "Dense", "(", "n_param", ",", "name", "=", "'cnn1_head'", ")", "\n", "cnn1_mid", "=", "Dense", "(", "n_param", ",", "name", "=", "'cnn1_mid'", ")", "if", "model_param", "[", "'if_d'", "]", "else", "cnn1_head", "\n", "cnn1_tail", "=", "Dense", "(", "n_param", ",", "name", "=", "'cnn1_tail'", ")", "if", "model_param", "[", "'if_d'", "]", "else", "cnn1_head", "\n", "cnn1", "=", "[", "cnn1_head", ",", "cnn1_mid", ",", "cnn1_tail", "]", "\n", "gate_dense", "=", "None", "\n", "if", "model_param", "[", "'pooling_mode'", "]", "==", "'gat'", ":", "\n", "        ", "base_gate", "=", "Dense", "(", "1", ",", "name", "=", "'gate1_head'", ",", "activation", "=", "'sigmoid'", ")", "\n", "gate_dense", "=", "[", "\n", "base_gate", ",", "\n", "Dense", "(", "1", ",", "name", "=", "'gate1_mid'", ",", "activation", "=", "'sigmoid'", ")", "if", "model_param", "[", "'if_d'", "]", "else", "base_gate", ",", "\n", "Dense", "(", "1", ",", "name", "=", "'gate1_tail'", ",", "activation", "=", "'sigmoid'", ")", "if", "model_param", "[", "'if_d'", "]", "else", "base_gate", ",", "\n", "]", "\n", "", "elif", "model_param", "[", "'pooling_mode'", "]", "in", "[", "'gat_n'", ",", "'gat_2'", "]", ":", "\n", "        ", "base_gate", "=", "Dense", "(", "1", ",", "name", "=", "'gate1_head'", ",", "activation", "=", "'sigmoid'", ")", "\n", "gate_dense", "=", "[", "\n", "base_gate", ",", "\n", "Dense", "(", "1", ",", "name", "=", "'gate1_mid'", ",", "activation", "=", "None", ")", "if", "model_param", "[", "'if_d'", "]", "else", "base_gate", ",", "\n", "Dense", "(", "1", ",", "name", "=", "'gate1_tail'", ",", "activation", "=", "None", ")", "if", "model_param", "[", "'if_d'", "]", "else", "base_gate", ",", "\n", "]", "\n", "\n", "", "qu_results", "=", "gcn_layer", "(", "qu_i_ids", ",", "qu_words", ",", "cnn1", ",", "mode", "=", "model_param", "[", "'pooling_mode'", "]", ",", "gate_dense", "=", "gate_dense", ")", "\n", "pre_results", "=", "gcn_layer", "(", "pre_i_ids", ",", "pre_words", ",", "cnn1", ",", "mode", "=", "model_param", "[", "'pooling_mode'", "]", ",", "gate_dense", "=", "gate_dense", ")", "\n", "# (?, 80, 1024)", "\n", "# (?, 160, 1024)", "\n", "\n", "for", "i", "in", "range", "(", "model_param", "[", "'layer_num'", "]", "-", "1", ")", ":", "\n", "        ", "cnn2_head", "=", "Dense", "(", "n_param", ",", "name", "=", "'cnn%d_head'", "%", "(", "i", "+", "2", ")", ")", "\n", "cnn2_mid", "=", "Dense", "(", "n_param", ",", "name", "=", "'cnn%d_mid'", "%", "(", "i", "+", "2", ")", ")", "if", "model_param", "[", "'if_d'", "]", "else", "cnn2_head", "\n", "cnn2_tail", "=", "Dense", "(", "n_param", ",", "name", "=", "'cnn%d_tail'", "%", "(", "i", "+", "2", ")", ")", "if", "model_param", "[", "'if_d'", "]", "else", "cnn2_head", "\n", "cnn2", "=", "[", "cnn2_head", ",", "cnn2_mid", ",", "cnn2_tail", "]", "\n", "gate_dense_2", "=", "None", "\n", "if", "model_param", "[", "'pooling_mode'", "]", "==", "'gat'", ":", "\n", "            ", "base_gate_2", "=", "Dense", "(", "1", ",", "name", "=", "'gate%d_head'", "%", "(", "i", "+", "2", ")", ",", "activation", "=", "'sigmoid'", ")", "\n", "gate_dense_2", "=", "[", "\n", "base_gate_2", ",", "\n", "Dense", "(", "1", ",", "name", "=", "'gate%d_mid'", "%", "(", "i", "+", "2", ")", ",", "activation", "=", "'sigmoid'", ")", "if", "model_param", "[", "'if_d'", "]", "else", "base_gate_2", ",", "\n", "Dense", "(", "1", ",", "name", "=", "'gate%d_tail'", "%", "(", "i", "+", "2", ")", ",", "activation", "=", "'sigmoid'", ")", "if", "model_param", "[", "'if_d'", "]", "else", "base_gate_2", ",", "\n", "]", "\n", "", "elif", "model_param", "[", "'pooling_mode'", "]", "in", "[", "'gat_n'", ",", "'gat_2'", "]", ":", "\n", "            ", "base_gate_2", "=", "Dense", "(", "1", ",", "name", "=", "'gate%d_head'", "%", "(", "i", "+", "2", ")", ",", "activation", "=", "'sigmoid'", ")", "\n", "gate_dense_2", "=", "[", "\n", "base_gate_2", ",", "\n", "Dense", "(", "1", ",", "name", "=", "'gate%d_mid'", "%", "(", "i", "+", "2", ")", ",", "activation", "=", "None", ")", "if", "model_param", "[", "'if_d'", "]", "else", "base_gate_2", ",", "\n", "Dense", "(", "1", ",", "name", "=", "'gate%d_tail'", "%", "(", "i", "+", "2", ")", ",", "activation", "=", "None", ")", "if", "model_param", "[", "'if_d'", "]", "else", "base_gate_2", ",", "\n", "]", "\n", "\n", "\n", "", "qu_results_2", "=", "gcn_layer", "(", "qu_i_ids", ",", "qu_results", ",", "cnn2", ",", "\n", "active", "=", "None", ",", "mode", "=", "model_param", "[", "'pooling_mode'", "]", ",", "gate_dense", "=", "gate_dense_2", ")", "\n", "pre_results_2", "=", "gcn_layer", "(", "pre_i_ids", ",", "pre_results", ",", "cnn2", ",", "\n", "active", "=", "None", ",", "mode", "=", "model_param", "[", "'pooling_mode'", "]", ",", "gate_dense", "=", "gate_dense_2", ")", "\n", "# (?, 80, 1024)", "\n", "# (?, 160, 1024)                                                                                                                                        ", "\n", "\n", "qu_results_2", "=", "Activation", "(", "'relu'", ")", "(", "Add", "(", ")", "(", "[", "qu_results", ",", "qu_results_2", "]", ")", ")", "\n", "pre_results_2", "=", "Activation", "(", "'relu'", ")", "(", "Add", "(", ")", "(", "[", "pre_results", ",", "pre_results_2", "]", ")", ")", "\n", "qu_results", "=", "qu_results_2", "\n", "pre_results", "=", "pre_results_2", "\n", "\n", "", "\"\"\"   merge   \"\"\"", "\n", "label", "=", "count_similarity", "(", "qu_results", ",", "pre_results", ")", "\n", "# (?, 1)", "\n", "\n", "model", "=", "Model", "(", "inputs", "=", "input_layers", ",", "outputs", "=", "[", "label", "]", ")", "\n", "model", ".", "compile", "(", "loss", "=", "{", "'label'", ":", "'binary_crossentropy'", "}", ",", "optimizer", "=", "'adadelta'", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.model.model_nlpcc_kbre_word.get_model": [[26, 81], ["keras.layers.Input", "keras.layers.Input", "numpy.shape", "keras.layers.Embedding", "keras.layers.Embedding.", "keras.layers.Embedding.", "keras.layers.Conv1D", "keras.layers.Conv1D", "keras.layers.Conv1D", "cnn1", "cnn1", "range", "model_base.count_similarity", "keras.models.Model", "keras.models.Model.compile", "keras.layers.Activation", "keras.layers.Activation", "keras.layers.Conv1D", "keras.layers.Conv1D", "keras.layers.Conv1D", "cnn2", "cnn2", "keras.layers.Concatenate", "keras.layers.Activation", "keras.layers.Activation", "cnn_t", "keras.layers.Concatenate", "keras.layers.Add", "keras.layers.Add", "cnn_t"], "function", ["home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.model.model_base.count_similarity"], ["def", "get_model", "(", "wordMatrix", ",", "model_param", "=", "None", ")", ":", "\n", "    ", "if", "model_param", "is", "None", ":", "\n", "        ", "model_param", "=", "{", "'layer_num'", ":", "1", "}", "\n", "", "len_qu", "=", "50", "\n", "len_pre", "=", "20", "\n", "\n", "\"\"\"   inputs   \"\"\"", "\n", "qu_ids", "=", "Input", "(", "shape", "=", "(", "len_qu", ",", ")", ",", "dtype", "=", "'int32'", ",", "name", "=", "'qu'", ")", "\n", "pre_ids", "=", "Input", "(", "shape", "=", "(", "len_pre", ",", ")", ",", "dtype", "=", "'int32'", ",", "name", "=", "'pre'", ")", "\n", "# (?, 50) (?, 20)", "\n", "\n", "\"\"\"   embedding   \"\"\"", "\n", "input_dim", ",", "output_dim", "=", "np", ".", "shape", "(", "wordMatrix", ")", "\n", "embedding", "=", "Embedding", "(", "input_dim", ",", "output_dim", ",", "weights", "=", "[", "wordMatrix", "]", ",", "name", "=", "'embedding'", ")", "\n", "\n", "qu_seq", "=", "embedding", "(", "qu_ids", ")", "\n", "pre_seq", "=", "embedding", "(", "pre_ids", ")", "\n", "# (?, 50, 300) (?, 20, 300)", "\n", "\n", "\"\"\"   convolution   \"\"\"", "\n", "cnn1_0", "=", "Conv1D", "(", "256", ",", "1", ",", "padding", "=", "'same'", ",", "name", "=", "'cnn1_0'", ")", "\n", "cnn1_1", "=", "Conv1D", "(", "512", ",", "2", ",", "padding", "=", "'same'", ",", "name", "=", "'cnn1_1'", ")", "\n", "cnn1_2", "=", "Conv1D", "(", "256", ",", "3", ",", "padding", "=", "'same'", ",", "name", "=", "'cnn1_2'", ")", "\n", "cnn1", "=", "lambda", "x", ":", "Concatenate", "(", ")", "(", "[", "cnn_t", "(", "x", ")", "for", "cnn_t", "in", "[", "cnn1_0", ",", "cnn1_1", ",", "cnn1_2", "]", "]", ")", "\n", "\n", "qu_seq_1", "=", "cnn1", "(", "qu_seq", ")", "\n", "pre_seq_1", "=", "cnn1", "(", "pre_seq", ")", "\n", "qu_seq_1", "=", "Activation", "(", "'relu'", ")", "(", "qu_seq_1", ")", "\n", "pre_seq_1", "=", "Activation", "(", "'relu'", ")", "(", "pre_seq_1", ")", "\n", "# (?, 50, 1024) (?, 20, 1024)", "\n", "\n", "for", "i", "in", "range", "(", "model_param", "[", "'layer_num'", "]", "-", "1", ")", ":", "\n", "        ", "cnn2_0", "=", "Conv1D", "(", "256", ",", "1", ",", "padding", "=", "'same'", ",", "name", "=", "'cnn%d_0'", "%", "(", "i", "+", "2", ")", ")", "\n", "cnn2_1", "=", "Conv1D", "(", "512", ",", "2", ",", "padding", "=", "'same'", ",", "name", "=", "'cnn%d_1'", "%", "(", "i", "+", "2", ")", ")", "\n", "cnn2_2", "=", "Conv1D", "(", "256", ",", "3", ",", "padding", "=", "'same'", ",", "name", "=", "'cnn%d_2'", "%", "(", "i", "+", "2", ")", ")", "\n", "cnn2", "=", "lambda", "x", ":", "Concatenate", "(", ")", "(", "[", "cnn_t", "(", "x", ")", "for", "cnn_t", "in", "[", "cnn2_0", ",", "cnn2_1", ",", "cnn2_2", "]", "]", ")", "\n", "\n", "qu_seq_2", "=", "cnn2", "(", "qu_seq_1", ")", "\n", "pre_seq_2", "=", "cnn2", "(", "pre_seq_1", ")", "\n", "# (?, 50, 1024)", "\n", "# (?, 20, 1024)", "\n", "\n", "qu_seq_2", "=", "Activation", "(", "'relu'", ")", "(", "Add", "(", ")", "(", "[", "qu_seq_1", ",", "qu_seq_2", "]", ")", ")", "\n", "pre_seq_2", "=", "Activation", "(", "'relu'", ")", "(", "Add", "(", ")", "(", "[", "pre_seq_1", ",", "pre_seq_2", "]", ")", ")", "\n", "qu_seq_1", "=", "qu_seq_2", "\n", "pre_seq_1", "=", "pre_seq_2", "\n", "\n", "", "\"\"\"   merge   \"\"\"", "\n", "label", "=", "count_similarity", "(", "qu_seq_1", ",", "pre_seq_1", ")", "\n", "# (?, 1)", "\n", "\n", "model", "=", "Model", "(", "inputs", "=", "[", "qu_ids", ",", "pre_ids", "]", ",", "outputs", "=", "[", "label", "]", ")", "\n", "model", ".", "compile", "(", "loss", "=", "{", "'label'", ":", "'binary_crossentropy'", "}", ",", "optimizer", "=", "'adadelta'", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.data_preprocess.get_nlpccdbqa.get_nlpccdbqa_word": [[31, 46], ["json_load", "json_dump", "tqdm.tqdm", "cws.jieba_cws2", "cws.jieba_cws2"], "function", ["home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.src.basic.CWS.jieba_cws2", "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.src.basic.CWS.jieba_cws2"], ["def", "get_nlpccdbqa_word", "(", "cws", ",", "input_path", ",", "output_path", ",", "verbose", "=", "True", ")", ":", "\n", "    ", "data", "=", "json_load", "(", "input_path", ")", "\n", "\n", "data_all", "=", "data", "\n", "if", "verbose", "is", "True", ":", "\n", "        ", "data_all", "=", "tqdm", "(", "data_all", ")", "\n", "\n", "", "for", "dt", "in", "data_all", ":", "\n", "        ", "qu_words", "=", "cws", ".", "jieba_cws2", "(", "dt", "[", "'qu'", "]", ")", "\n", "sent_words", "=", "[", "cws", ".", "jieba_cws2", "(", "t", ")", "for", "t", "in", "dt", "[", "'sents'", "]", "]", "\n", "\n", "dt", "[", "'sents'", "]", "=", "sent_words", "\n", "dt", "[", "'qu'", "]", "=", "qu_words", "\n", "\n", "", "json_dump", "(", "data", ",", "output_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.data_preprocess.get_nlpccdbqa.analisys_words": [[47, 60], ["tqdm.tqdm", "json_load", "json_load", "counts[].append", "list", "print", "len", "map", "len", "analisys"], "function", ["None"], ["", "def", "analisys_words", "(", ")", ":", "\n", "# analisys = lambda x: [np.percentile(x,t) for t in range(0, 101, 2)] # + [min(x), max(x)]", "\n", "\n", "    ", "data", "=", "json_load", "(", "'../../data/test_dbqa_5997_segword.json'", ")", "+", "json_load", "(", "'../../data/train_dbqa_8768_segword.json'", ")", "\n", "all_keys", "=", "[", "'len_sent'", ",", "'len_qu'", "]", "\n", "counts", "=", "{", "k", ":", "[", "]", "for", "k", "in", "all_keys", "}", "\n", "\n", "for", "dt", "in", "tqdm", "(", "data", ")", ":", "\n", "        ", "counts", "[", "'len_qu'", "]", ".", "append", "(", "len", "(", "dt", "[", "'qu'", "]", ")", ")", "\n", "counts", "[", "'len_sent'", "]", "+=", "list", "(", "map", "(", "len", ",", "dt", "[", "'sents'", "]", ")", ")", "\n", "\n", "", "for", "k", "in", "all_keys", ":", "\n", "        ", "print", "(", "k", ",", "len", "(", "counts", "[", "k", "]", ")", ",", "analisys", "(", "counts", "[", "k", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.data_preprocess.get_nlpccdbqa.get_nlpccdbqa_wordBank": [[65, 90], ["json_load", "enumerate", "json_dump", "tqdm.tqdm", "dt[].strip", "cws.MWS", "get_nlpcckbqa.post_deal", "t.strip", "cws.MWS", "get_nlpcckbqa.post_deal", "enumerate"], "function", ["home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.src.basic.CWS.MWS", "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.data_preprocess.get_nlpcckbqa.post_deal", "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.src.basic.CWS.MWS", "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.data_preprocess.get_nlpcckbqa.post_deal"], ["def", "get_nlpccdbqa_wordBank", "(", "cws", ",", "input_path", ",", "output_path", ",", "verbose", "=", "True", ")", ":", "\n", "    ", "data", "=", "json_load", "(", "input_path", ")", "\n", "\n", "data_all", "=", "data", "\n", "if", "verbose", "is", "True", ":", "\n", "        ", "data_all", "=", "tqdm", "(", "data_all", ")", "\n", "\n", "", "for", "idt", ",", "dt", "in", "enumerate", "(", "data_all", ")", ":", "\n", "        ", "\"\"\"   qu_cut   \"\"\"", "\n", "dt", "[", "'qu'", "]", "=", "dt", "[", "'qu'", "]", ".", "strip", "(", ")", "\n", "dt", "[", "'sents'", "]", "=", "[", "t", ".", "strip", "(", ")", "for", "t", "in", "dt", "[", "'sents'", "]", "]", "\n", "all_qu_words", "=", "cws", ".", "MWS", "(", "dt", "[", "'qu'", "]", ",", "index", "=", "True", ")", "\n", "\n", "\"\"\"   pre_cut   \"\"\"", "\n", "all_sents_words", "=", "[", "cws", ".", "MWS", "(", "t", ",", "index", "=", "True", ")", "for", "t", "in", "dt", "[", "'sents'", "]", "]", "\n", "\n", "\"\"\"   post_deal   \"\"\"", "\n", "all_qu_words", "=", "post_deal", "(", "all_qu_words", ",", "dt", "[", "'qu'", "]", ")", "\n", "all_sents_words", "=", "[", "post_deal", "(", "t", ",", "dt", "[", "'sents'", "]", "[", "i", "]", ")", "for", "i", ",", "t", "in", "enumerate", "(", "all_sents_words", ")", "]", "\n", "\n", "\"\"\"   update   \"\"\"", "\n", "dt", "[", "'sents'", "]", "=", "all_sents_words", "\n", "dt", "[", "'qu'", "]", "=", "all_qu_words", "\n", "\n", "", "json_dump", "(", "data", ",", "output_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.data_preprocess.get_nlpccdbqa.analisys_mws": [[93, 134], ["range", "tqdm.tqdm", "json_load", "json_load", "get_nlpcckbqa.ana_word_seq", "counts[].append", "range", "list", "print", "numpy.percentile", "all_keys.append", "counts[].append", "map", "counts[].append", "range", "len", "analisys", "range", "counts[].append"], "function", ["home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.data_preprocess.get_nlpcckbqa.ana_word_seq"], ["def", "analisys_mws", "(", ")", ":", "\n", "# analisys = lambda x: [np.percentile(x,t) for t in range(0, 101, 10)] ", "\n", "    ", "analisys", "=", "lambda", "x", ":", "[", "np", ".", "percentile", "(", "x", ",", "t", ")", "for", "t", "in", "range", "(", "80", ",", "101", ",", "2", ")", "]", "\n", "\n", "data", "=", "json_load", "(", "'../../data/test_dbqa_5997_segmws.json'", ")", "+", "json_load", "(", "'../../data/train_dbqa_8768_segmws.json'", ")", "\n", "all_keys", "=", "[", "'len_sent'", ",", "'len_qu'", "]", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "        ", "for", "t", "in", "[", "'qu'", ",", "'sent'", "]", ":", "\n", "            ", "all_keys", ".", "append", "(", "'n%d_%s'", "%", "(", "i", "+", "1", ",", "t", ")", ")", "\n", "# 'n1_sent' ~ 'n4_sent', 'n3_qu'...", "\n", "", "", "counts", "=", "{", "k", ":", "[", "]", "for", "k", "in", "all_keys", "}", "\n", "\n", "for", "dt", "in", "tqdm", "(", "data", ")", ":", "\n", "        ", "ana_ret", "=", "ana_word_seq", "(", "dt", "[", "'qu'", "]", ")", "\n", "kt", "=", "'qu'", "\n", "counts", "[", "'len_%s'", "%", "(", "kt", ")", "]", ".", "append", "(", "ana_ret", "[", "'len'", "]", ")", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "            ", "counts", "[", "'n%d_%s'", "%", "(", "i", "+", "1", ",", "kt", ")", "]", ".", "append", "(", "ana_ret", "[", "'len_max%d'", "%", "(", "i", "+", "1", ")", "]", ")", "\n", "\n", "", "kt", "=", "'sent'", "\n", "for", "ana_ret", "in", "list", "(", "map", "(", "ana_word_seq", ",", "dt", "[", "'sents'", "]", ")", ")", ":", "\n", "            ", "counts", "[", "'len_%s'", "%", "(", "kt", ")", "]", ".", "append", "(", "ana_ret", "[", "'len'", "]", ")", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "                ", "counts", "[", "'n%d_%s'", "%", "(", "i", "+", "1", ",", "kt", ")", "]", ".", "append", "(", "ana_ret", "[", "'len_max%d'", "%", "(", "i", "+", "1", ")", "]", ")", "\n", "\n", "", "", "", "for", "k", "in", "all_keys", ":", "\n", "        ", "print", "(", "k", ",", "len", "(", "counts", "[", "k", "]", ")", ",", "analisys", "(", "counts", "[", "k", "]", ")", ")", "\n", "\n", "", "\"\"\"\n    \u8fd9\u4e00\u7ec4\u662f80~100\u5206\u4f4d\u70b9\u4e4b\u95f4\uff0c\u6bcf 2% \u6253\u70b9\u7684\u7ed3\u679c~ \n    len_sent 304293 [83.0, 87.0, 92.0, 98.0, 105.0, 114.0, 124.0, 138.0, 160.0, 200.0, 8630.0]\n    len_qu 14765 [29.0, 29.0, 31.0, 32.0, 33.0, 34.0, 36.0, 38.0, 42.0, 48.0, 106.0]\n    n1_qu 14765 [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]\n    n1_sent 304293 [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]\n    n2_qu 14765 [3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 4.0, 5.0, 6.0]\n    n2_sent 304293 [3.0, 4.0, 4.0, 4.0, 4.0, 4.0, 5.0, 5.0, 5.0, 5.0, 9.0]\n    n3_qu 14765 [4.0, 4.0, 4.0, 5.0, 5.0, 5.0, 5.0, 6.0, 7.0, 9.0, 17.0]\n    n3_sent 304293 [6.0, 7.0, 7.0, 8.0, 8.0, 9.0, 9.0, 10.0, 10.0, 11.0, 81.0]\n    n4_qu 14765 [7.0, 7.0, 7.0, 7.0, 8.0, 8.0, 9.0, 10.0, 11.0, 14.0, 43.0]\n    n4_sent 304293 [10.0, 11.0, 12.0, 12.0, 13.0, 15.0, 16.0, 18.0, 20.0, 25.0, 729.0]\n    \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.data_preprocess.get_nlpccdbqa.convert_word_mws": [[137, 153], ["json_load", "json_dump", "tqdm.tqdm", "deal_seq", "list", "data_used.append", "map", "len", "enumerate"], "function", ["None"], ["def", "convert_word_mws", "(", "input_path", ",", "output_path", ",", "verbose", "=", "True", ")", ":", "\n", "    ", "data", "=", "json_load", "(", "input_path", ")", "\n", "\n", "data_all", "=", "data", "\n", "if", "verbose", "is", "True", ":", "\n", "        ", "data_all", "=", "tqdm", "(", "data_all", ")", "\n", "\n", "", "deal_seq", "=", "lambda", "x", ":", "[", "[", "t", ",", "i", ",", "i", "+", "1", "]", "for", "i", ",", "t", "in", "enumerate", "(", "x", ")", "]", "if", "not", "len", "(", "x", ")", "==", "0", "else", "[", "[", "\"<NW_oi>\"", ",", "0", ",", "4", "]", "]", "\n", "\n", "data_used", "=", "[", "]", "\n", "for", "dt", "in", "data_all", ":", "\n", "        ", "dt", "[", "'qu'", "]", "=", "deal_seq", "(", "dt", "[", "'qu'", "]", ")", "\n", "dt", "[", "'sents'", "]", "=", "list", "(", "map", "(", "deal_seq", ",", "dt", "[", "'sents'", "]", ")", ")", "\n", "data_used", ".", "append", "(", "dt", ")", "\n", "\n", "", "json_dump", "(", "data_used", ",", "output_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.data_preprocess.get_nlpccdbqa.convert_character_real": [[154, 171], ["json_load", "json_dump", "tqdm.tqdm", "deal_seq", "deal_char", "list", "data_used.append", "map", "len", "enumerate"], "function", ["None"], ["", "def", "convert_character_real", "(", "input_path", ",", "output_path", ",", "verbose", "=", "True", ")", ":", "\n", "    ", "data", "=", "json_load", "(", "input_path", ")", "\n", "\n", "data_all", "=", "data", "\n", "if", "verbose", "is", "True", ":", "\n", "        ", "data_all", "=", "tqdm", "(", "data_all", ")", "\n", "\n", "", "deal_seq", "=", "lambda", "x", ":", "[", "[", "t", ",", "i", ",", "i", "+", "1", "]", "for", "i", ",", "t", "in", "enumerate", "(", "x", ")", "]", "if", "not", "len", "(", "x", ")", "==", "0", "else", "[", "[", "\"<NW_oi>\"", ",", "0", ",", "4", "]", "]", "\n", "deal_char", "=", "lambda", "x", ":", "deal_seq", "(", "''", ".", "join", "(", "x", ")", ")", "\n", "\n", "data_used", "=", "[", "]", "\n", "for", "dt", "in", "data_all", ":", "\n", "        ", "dt", "[", "'qu'", "]", "=", "deal_char", "(", "dt", "[", "'qu'", "]", ")", "\n", "dt", "[", "'sents'", "]", "=", "list", "(", "map", "(", "deal_char", ",", "dt", "[", "'sents'", "]", ")", ")", "\n", "data_used", ".", "append", "(", "dt", ")", "\n", "\n", "", "json_dump", "(", "data_used", ",", "output_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.data_preprocess.get_nlpccdbqa.convert_character_mws": [[179, 193], ["json_load", "json_dump", "tqdm.tqdm", "func", "list", "data_used.append", "map"], "function", ["None"], ["def", "convert_character_mws", "(", "input_path", ",", "output_path", ",", "verbose", "=", "True", ",", "func", "=", "get_chatacter", ")", ":", "\n", "    ", "data", "=", "json_load", "(", "input_path", ")", "\n", "\n", "data_all", "=", "data", "\n", "if", "verbose", "is", "True", ":", "\n", "        ", "data_all", "=", "tqdm", "(", "data_all", ")", "\n", "\n", "", "data_used", "=", "[", "]", "\n", "for", "dt", "in", "data_all", ":", "\n", "        ", "dt", "[", "'qu'", "]", "=", "func", "(", "dt", "[", "'qu'", "]", ")", "\n", "dt", "[", "'sents'", "]", "=", "list", "(", "map", "(", "func", ",", "dt", "[", "'sents'", "]", ")", ")", "\n", "data_used", ".", "append", "(", "dt", ")", "\n", "\n", "", "json_dump", "(", "data_used", ",", "output_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.data_preprocess.get_nlpcckbqa.get_nlpcckbqa_word": [[31, 50], ["json_load", "json_dump", "tqdm.tqdm", "cws.MM", "cws.jieba_cws2", "cws.RMM", "len"], "function", ["home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.src.basic.CWS.MM", "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.src.basic.CWS.jieba_cws2", "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.src.basic.CWS.RMM"], ["def", "get_nlpcckbqa_word", "(", "cws", ",", "input_path", ",", "output_path", ",", "verbose", "=", "True", ")", ":", "\n", "    ", "data", "=", "json_load", "(", "input_path", ")", "\n", "\n", "data_all", "=", "data", "\n", "if", "verbose", "is", "True", ":", "\n", "        ", "data_all", "=", "tqdm", "(", "data_all", ")", "\n", "\n", "", "for", "dt", "in", "data_all", ":", "\n", "        ", "qu_preEnt", "=", "dt", "[", "'qu'", "]", "[", ":", "dt", "[", "'men_start'", "]", "]", "\n", "qu_posEnt", "=", "dt", "[", "'qu'", "]", "[", "dt", "[", "'men_start'", "]", "+", "len", "(", "dt", "[", "'sub_men'", "]", ")", ":", "]", "\n", "qu_words", "=", "cws", ".", "RMM", "(", "qu_preEnt", ")", "+", "[", "'<Entity>'", "]", "+", "cws", ".", "MM", "(", "qu_posEnt", ")", "\n", "\n", "pre_words", "=", "[", "cws", ".", "jieba_cws2", "(", "t", ")", "for", "t", "in", "dt", "[", "'pres'", "]", "]", "\n", "\n", "dt", "[", "'labels'", "]", "=", "[", "1", "if", "t", "==", "dt", "[", "'gold_triple'", "]", "[", "1", "]", "else", "0", "for", "t", "in", "dt", "[", "'pres'", "]", "]", "\n", "dt", "[", "'pres'", "]", "=", "pre_words", "\n", "dt", "[", "'qu'", "]", "=", "qu_words", "\n", "\n", "", "json_dump", "(", "data", ",", "output_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.data_preprocess.get_nlpcckbqa.post_deal": [[53, 145], ["len", "set", "set", "min", "max", "len", "all", "set", "set", "range", "all", "any", "word_seq_new.append", "len", "word_seq_new.append", "set", "set", "len", "no_end.pop", "max", "re.match", "len", "no_start.pop", "min", "re.match", "all", "len", "len", "len", "get_unk", "word_seq.append", "len", "get_unk", "word_seq.append", "len", "len", "len", "len"], "function", ["None"], ["def", "post_deal", "(", "word_seq", ",", "str_seq", ")", ":", "\n", "# print(word_seq, str_seq)", "\n", "    ", "t1", "=", "len", "(", "word_seq", ")", "#print(word_seq)", "\n", "if", "len", "(", "word_seq", ")", "==", "0", ":", "\n", "# \u8fd9\u90fd\u662f\u7eaf\u5916\u6587\u8bcd\u6c47\u7684\u6210\u5206\uff0c\u5f53\u6210\u4e2a\u672a\u767b\u5f55\u8bcd\u5427~", "\n", "        ", "return", "[", "[", "'<NW_oi>'", ",", "0", ",", "4", "]", "]", "\n", "\n", "", "start_ls", "=", "set", "(", "[", "t", "[", "1", "]", "for", "t", "in", "word_seq", "]", ")", "\n", "ent_ls", "=", "set", "(", "[", "t", "[", "2", "]", "for", "t", "in", "word_seq", "]", ")", "\n", "start_l", "=", "min", "(", "start_ls", ")", "\n", "end_l", "=", "max", "(", "ent_ls", ")", "\n", "\n", "if", "not", "all", "(", "[", "start_l", "==", "0", ",", "len", "(", "str_seq", ")", "==", "end_l", "]", ")", ":", "\n", "        ", "pass", "\n", "# \u8fd9\u90e8\u5206\u7684\u7279\u4f8b\u89c1\u9644\u5f55\uff0c\u65e0\u89c6\u6389\u5dee\u7684\u5934\u5c3e\uff0c\u76f4\u63a5\u505a\u5427~", "\n", "\n", "\n", "", "\"\"\"   \u5982\u679ca\u548ca+1\u90fd\u662f\u6570\u5b57\u6216\u5b57\u6bcd\uff0c\u4e2d\u95f4\u5c31\u4e0d\u5e94\u8be5\u5206\u5272~   \u4e0d\u8fc7\u5982\u679c\u8bcd\u8868\u4e2d\u6ca1\u8bcd\uff0c\u90a3\u4e5f\u5fc5\u987b\u8981\u5206~   \"\"\"", "\n", "no_split_points", "=", "[", "i", "for", "i", "in", "range", "(", "len", "(", "str_seq", ")", "-", "1", ")", "if", "all", "(", "[", "str_seq", "[", "i", "]", "in", "char_num", ",", "str_seq", "[", "i", "+", "1", "]", "in", "char_num", "]", ")", "]", "\n", "\n", "word_seq_new", "=", "[", "]", "\n", "for", "t", "in", "word_seq", ":", "\n", "        ", "if", "not", "any", "(", "[", "t", "[", "1", "]", "-", "1", "in", "no_split_points", ",", "t", "[", "2", "]", "-", "1", "in", "no_split_points", "]", ")", ":", "\n", "            ", "word_seq_new", ".", "append", "(", "t", ")", "\n", "continue", "\n", "\n", "", "t_cover", "=", "[", "tt", "for", "tt", "in", "word_seq", "if", "all", "(", "[", "tt", "[", "1", "]", "<=", "t", "[", "1", "]", ",", "tt", "[", "2", "]", ">=", "t", "[", "2", "]", ",", "tt", "[", "2", "]", "-", "tt", "[", "1", "]", ">", "t", "[", "2", "]", "-", "t", "[", "1", "]", "]", ")", "]", "\n", "if", "len", "(", "t_cover", ")", "==", "0", ":", "\n", "# print (t_cover, t, str_seq)", "\n", "            ", "word_seq_new", ".", "append", "(", "t", ")", "\n", "\n", "", "", "\"\"\"   \u5904\u7406\u4e2d\u95f4\u6d41\u95f4\u65ad\u7684\u60c5\u51b5\uff0c\u52a0\u5165UNK   \"\"\"", "\n", "unk_dict", "=", "{", "1", ":", "'<NW_uni>'", ",", "2", ":", "'<NW_bi>'", ",", "3", ":", "'<NW_tri>'", "}", "\n", "get_unk", "=", "lambda", "l", ":", "unk_dict", "[", "l", "]", "if", "l", "in", "unk_dict", "else", "'<NW_oi>'", "\n", "mark", "=", "False", "\n", "while", "True", ":", "\n", "        ", "start_ls", "=", "set", "(", "[", "t", "[", "1", "]", "for", "t", "in", "word_seq", "]", ")", "\n", "end_ls", "=", "set", "(", "[", "t", "[", "2", "]", "for", "t", "in", "word_seq", "]", ")", "\n", "# print(start_ls, start_l)", "\n", "# print(end_ls, end_l)", "\n", "\n", "no_end", "=", "start_ls", "-", "end_ls", "-", "set", "(", "[", "start_l", "]", ")", "\n", "no_start", "=", "end_ls", "-", "start_ls", "-", "set", "(", "[", "end_l", "]", ")", "\n", "# print(no_end)", "\n", "# print(no_start)", "\n", "\n", "if", "len", "(", "no_end", ")", "==", "0", "and", "len", "(", "no_start", ")", "==", "0", ":", "\n", "            ", "break", "\n", "", "mark", "=", "True", "\n", "\n", "if", "len", "(", "no_end", ")", ">", "0", ":", "\n", "            ", "t_start", "=", "no_end", ".", "pop", "(", ")", "\n", "last_end", "=", "max", "(", "[", "t", "[", "2", "]", "for", "t", "in", "word_seq", "if", "t", "[", "2", "]", "<", "t_start", "]", "+", "[", "start_l", "]", ")", "\n", "temp_word", "=", "str_seq", "[", "last_end", ":", "t_start", "]", "\n", "if", "re", ".", "match", "(", "' +'", ",", "temp_word", ")", ":", "\n", "                ", "lent", "=", "len", "(", "temp_word", ")", "\n", "str_seq", "=", "str_seq", "[", ":", "last_end", "]", "+", "str_seq", "[", "t_start", ":", "]", "\n", "for", "t", "in", "word_seq", ":", "\n", "                    ", "if", "t", "[", "1", "]", ">", "last_end", ":", "\n", "                        ", "t", "[", "1", "]", "-=", "lent", "\n", "", "if", "t", "[", "2", "]", ">", "last_end", ":", "\n", "                        ", "t", "[", "2", "]", "-=", "lent", "\n", "", "", "end_l", "-=", "lent", "\n", "", "else", ":", "\n", "                ", "unk_word", "=", "get_unk", "(", "len", "(", "temp_word", ")", ")", "\n", "word_seq", ".", "append", "(", "[", "unk_word", ",", "last_end", ",", "t_start", "]", ")", "\n", "", "continue", "\n", "\n", "", "if", "len", "(", "no_start", ")", ">", "0", ":", "\n", "            ", "t_end", "=", "no_start", ".", "pop", "(", ")", "\n", "next_start", "=", "min", "(", "[", "t", "[", "1", "]", "for", "t", "in", "word_seq", "if", "t", "[", "1", "]", ">=", "t_end", "]", "+", "[", "end_l", "]", ")", "\n", "temp_word", "=", "str_seq", "[", "t_end", ":", "next_start", "]", "\n", "if", "re", ".", "match", "(", "' +'", ",", "temp_word", ")", ":", "\n", "                ", "lent", "=", "len", "(", "temp_word", ")", "\n", "str_seq", "=", "str_seq", "[", ":", "t_end", "]", "+", "str_seq", "[", "next_start", ":", "]", "\n", "for", "t", "in", "word_seq", ":", "\n", "                    ", "if", "t", "[", "1", "]", ">", "t_end", ":", "\n", "                        ", "t", "[", "1", "]", "-=", "lent", "\n", "", "if", "t", "[", "2", "]", ">", "t_end", ":", "\n", "                        ", "t", "[", "2", "]", "-=", "lent", "\n", "", "", "end_l", "-=", "lent", "\n", "", "else", ":", "\n", "                ", "unk_word", "=", "get_unk", "(", "len", "(", "temp_word", ")", ")", "\n", "word_seq", ".", "append", "(", "[", "unk_word", ",", "t_end", ",", "next_start", "]", ")", "\n", "", "continue", "\n", "\n", "# if mark :", "\n", "#     for t in str_seq :", "\n", "#         print(t)", "\n", "#     for t in word_seq :", "\n", "#         print(t[0], t[1], t[2])", "\n", "", "", "return", "word_seq", "\n", "\n"]], "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.data_preprocess.get_nlpcckbqa.get_nlpcckbqa_wordBank": [[146, 186], ["json_load", "enumerate", "json_dump", "tqdm.tqdm", "[].strip", "[].strip", "cws.MWS", "cws.MWS", "get_nlpcckbqa.post_deal", "t.strip", "cws.MWS", "get_nlpcckbqa.post_deal", "t.strip", "enumerate", "len"], "function", ["home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.src.basic.CWS.MWS", "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.src.basic.CWS.MWS", "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.data_preprocess.get_nlpcckbqa.post_deal", "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.src.basic.CWS.MWS", "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.data_preprocess.get_nlpcckbqa.post_deal"], ["", "def", "get_nlpcckbqa_wordBank", "(", "cws", ",", "input_path", ",", "output_path", ",", "verbose", "=", "True", ")", ":", "\n", "    ", "data", "=", "json_load", "(", "input_path", ")", "\n", "\n", "data_all", "=", "data", "\n", "if", "verbose", "is", "True", ":", "\n", "        ", "data_all", "=", "tqdm", "(", "data_all", ")", "\n", "\n", "", "for", "idt", ",", "dt", "in", "enumerate", "(", "data_all", ")", ":", "\n", "# if not dt['id'] == 372 :", "\n", "#     continue", "\n", "        ", "\"\"\"   qu_cut   \"\"\"", "\n", "dt", "[", "'pres'", "]", "=", "[", "t", ".", "strip", "(", ")", "for", "t", "in", "dt", "[", "'pres'", "]", "]", "\n", "qu_preEnt", "=", "dt", "[", "'qu'", "]", "[", ":", "dt", "[", "'men_start'", "]", "]", ".", "strip", "(", ")", "\n", "qu_posEnt", "=", "dt", "[", "'qu'", "]", "[", "dt", "[", "'men_start'", "]", "+", "len", "(", "dt", "[", "'sub_men'", "]", ")", ":", "]", ".", "strip", "(", ")", "\n", "qu_noEnt", "=", "qu_preEnt", "+", "' '", "+", "qu_posEnt", "\n", "\n", "qu_preEnt_ws", "=", "cws", ".", "MWS", "(", "qu_preEnt", ",", "index", "=", "True", ")", "\n", "qu_posEnt_ws", "=", "cws", ".", "MWS", "(", "qu_posEnt", ",", "index", "=", "True", ")", "\n", "for", "t", "in", "qu_posEnt_ws", ":", "\n", "            ", "t", "[", "1", "]", "+=", "dt", "[", "'men_start'", "]", "+", "1", "\n", "t", "[", "2", "]", "+=", "dt", "[", "'men_start'", "]", "+", "1", "\n", "\n", "", "all_qu_words", "=", "[", "[", "'<Entity>'", ",", "dt", "[", "'men_start'", "]", ",", "dt", "[", "'men_start'", "]", "+", "1", "]", "]", "\n", "all_qu_words", "+=", "qu_preEnt_ws", "+", "qu_posEnt_ws", "\n", "\n", "\"\"\"   pre_cut   \"\"\"", "\n", "all_pres_words", "=", "[", "cws", ".", "MWS", "(", "t", ".", "strip", "(", ")", ",", "index", "=", "True", ")", "for", "t", "in", "dt", "[", "'pres'", "]", "]", "\n", "\n", "\"\"\"   post_deal   \"\"\"", "\n", "all_qu_words", "=", "post_deal", "(", "all_qu_words", ",", "qu_noEnt", ")", "\n", "all_pres_words", "=", "[", "post_deal", "(", "t", ",", "dt", "[", "'pres'", "]", "[", "i", "]", ")", "for", "i", ",", "t", "in", "enumerate", "(", "all_pres_words", ")", "]", "\n", "\n", "\"\"\"   update   \"\"\"", "\n", "dt", "[", "'labels'", "]", "=", "[", "1", "if", "t", "==", "dt", "[", "'gold_triple'", "]", "[", "1", "]", "else", "0", "for", "t", "in", "dt", "[", "'pres'", "]", "]", "\n", "dt", "[", "'pres'", "]", "=", "all_pres_words", "\n", "dt", "[", "'qu'", "]", "=", "all_qu_words", "\n", "\n", "\n", "\n", "", "json_dump", "(", "data", ",", "output_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.data_preprocess.get_nlpcckbqa.ana_word_seq": [[187, 219], ["len", "set", "sorted", "enumerate", "p_head_dict[].append", "p_tail_dict[].append", "list", "p_head_dict.get", "p_tail_dict.get", "max", "list", "map"], "function", ["None"], ["", "def", "ana_word_seq", "(", "word_seq", ")", ":", "\n", "    ", "ret", "=", "{", "}", "\n", "ret", "[", "'len'", "]", "=", "len", "(", "word_seq", ")", "\n", "\n", "p_head_dict", "=", "{", "}", "\n", "p_tail_dict", "=", "{", "}", "\n", "for", "t", "in", "word_seq", ":", "\n", "        ", "if", "not", "t", "[", "1", "]", "in", "p_head_dict", ":", "\n", "            ", "p_head_dict", "[", "t", "[", "1", "]", "]", "=", "[", "]", "\n", "", "if", "not", "t", "[", "2", "]", "in", "p_tail_dict", ":", "\n", "            ", "p_tail_dict", "[", "t", "[", "2", "]", "]", "=", "[", "]", "\n", "", "p_head_dict", "[", "t", "[", "1", "]", "]", ".", "append", "(", "t", ")", "\n", "p_tail_dict", "[", "t", "[", "2", "]", "]", ".", "append", "(", "t", ")", "\n", "\n", "", "all_node_keys", "=", "set", "(", "[", "tt", "for", "t", "in", "word_seq", "for", "tt", "in", "[", "t", "[", "1", "]", ",", "t", "[", "2", "]", "]", "]", ")", "\n", "all_node_keys", "=", "sorted", "(", "list", "(", "all_node_keys", ")", ")", "\n", "all_node", "=", "{", "idt", ":", "{", "'id'", ":", "idt", "}", "for", "idt", "in", "all_node_keys", "}", "\n", "for", "k", "in", "all_node", ":", "\n", "        ", "t", "=", "all_node", "[", "k", "]", "\n", "t", "[", "'start'", "]", "=", "p_head_dict", ".", "get", "(", "t", "[", "'id'", "]", ",", "[", "]", ")", "\n", "t", "[", "'end'", "]", "=", "p_tail_dict", ".", "get", "(", "t", "[", "'id'", "]", ",", "[", "]", ")", "\n", "\n", "", "head_1_num", "=", "[", "[", "[", "t", "]", "]", "for", "t", "in", "word_seq", "]", "\n", "head_2_num", "=", "[", "[", "tt", "+", "[", "m", "]", "for", "tt", "in", "t", "for", "m", "in", "all_node", "[", "tt", "[", "-", "1", "]", "[", "2", "]", "]", "[", "'start'", "]", "]", "\n", "for", "t", "in", "head_1_num", "]", "\n", "head_3_num", "=", "[", "[", "tt", "+", "[", "m", "]", "for", "tt", "in", "t", "for", "m", "in", "all_node", "[", "tt", "[", "-", "1", "]", "[", "2", "]", "]", "[", "'start'", "]", "]", "\n", "for", "t", "in", "head_2_num", "]", "\n", "head_4_num", "=", "[", "[", "tt", "+", "[", "m", "]", "for", "tt", "in", "t", "for", "m", "in", "all_node", "[", "tt", "[", "-", "1", "]", "[", "2", "]", "]", "[", "'start'", "]", "]", "\n", "for", "t", "in", "head_3_num", "]", "\n", "for", "i", ",", "t", "in", "enumerate", "(", "[", "head_1_num", ",", "head_2_num", ",", "head_3_num", ",", "head_4_num", "]", ")", ":", "\n", "        ", "ret", "[", "'len_max%d'", "%", "(", "i", "+", "1", ")", "]", "=", "max", "(", "list", "(", "map", "(", "len", ",", "t", ")", ")", ")", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.data_preprocess.get_nlpcckbqa.analisys_mws": [[220, 246], ["range", "tqdm.tqdm", "json_load", "json_load", "get_nlpcckbqa.ana_word_seq", "counts[].append", "range", "list", "print", "numpy.percentile", "all_keys.append", "counts[].append", "map", "counts[].append", "range", "len", "analisys", "range", "counts[].append"], "function", ["home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.data_preprocess.get_nlpcckbqa.ana_word_seq"], ["", "def", "analisys_mws", "(", ")", ":", "\n", "    ", "analisys", "=", "lambda", "x", ":", "[", "np", ".", "percentile", "(", "x", ",", "t", ")", "for", "t", "in", "range", "(", "0", ",", "101", ",", "10", ")", "]", "# + [min(x), max(x)]", "\n", "\n", "data", "=", "json_load", "(", "'../../data/test_re_9413_segmws.json'", ")", "+", "json_load", "(", "'../../data/train_re_14262_segmws.json'", ")", "\n", "all_keys", "=", "[", "'len_pre'", ",", "'len_qu'", "]", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "        ", "for", "t", "in", "[", "'qu'", ",", "'pre'", "]", ":", "\n", "            ", "all_keys", ".", "append", "(", "'n%d_%s'", "%", "(", "i", "+", "1", ",", "t", ")", ")", "\n", "# 'n1_pre' ~ 'n4_pre', 'n3_qu'...", "\n", "", "", "counts", "=", "{", "k", ":", "[", "]", "for", "k", "in", "all_keys", "}", "\n", "\n", "for", "dt", "in", "tqdm", "(", "data", ")", ":", "\n", "        ", "ana_ret", "=", "ana_word_seq", "(", "dt", "[", "'qu'", "]", ")", "\n", "kt", "=", "'qu'", "\n", "counts", "[", "'len_%s'", "%", "(", "kt", ")", "]", ".", "append", "(", "ana_ret", "[", "'len'", "]", ")", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "            ", "counts", "[", "'n%d_%s'", "%", "(", "i", "+", "1", ",", "kt", ")", "]", ".", "append", "(", "ana_ret", "[", "'len_max%d'", "%", "(", "i", "+", "1", ")", "]", ")", "\n", "\n", "", "kt", "=", "'pre'", "\n", "for", "ana_ret", "in", "list", "(", "map", "(", "ana_word_seq", ",", "dt", "[", "'pres'", "]", ")", ")", ":", "\n", "            ", "counts", "[", "'len_%s'", "%", "(", "kt", ")", "]", ".", "append", "(", "ana_ret", "[", "'len'", "]", ")", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "                ", "counts", "[", "'n%d_%s'", "%", "(", "i", "+", "1", ",", "kt", ")", "]", ".", "append", "(", "ana_ret", "[", "'len_max%d'", "%", "(", "i", "+", "1", ")", "]", ")", "\n", "\n", "", "", "", "for", "k", "in", "all_keys", ":", "\n", "        ", "print", "(", "k", ",", "len", "(", "counts", "[", "k", "]", ")", ",", "analisys", "(", "counts", "[", "k", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.data_preprocess.get_nlpcckbqa.convert_word_mws": [[249, 265], ["json_load", "json_dump", "tqdm.tqdm", "deal_seq", "list", "data_used.append", "map", "len", "enumerate"], "function", ["None"], ["def", "convert_word_mws", "(", "input_path", ",", "output_path", ",", "verbose", "=", "True", ")", ":", "\n", "    ", "data", "=", "json_load", "(", "input_path", ")", "\n", "\n", "data_all", "=", "data", "\n", "if", "verbose", "is", "True", ":", "\n", "        ", "data_all", "=", "tqdm", "(", "data_all", ")", "\n", "\n", "", "deal_seq", "=", "lambda", "x", ":", "[", "[", "t", ",", "i", ",", "i", "+", "1", "]", "for", "i", ",", "t", "in", "enumerate", "(", "x", ")", "]", "if", "not", "len", "(", "x", ")", "==", "0", "else", "[", "[", "\"<NW_oi>\"", ",", "0", ",", "4", "]", "]", "\n", "\n", "data_used", "=", "[", "]", "\n", "for", "dt", "in", "data_all", ":", "\n", "        ", "dt", "[", "'qu'", "]", "=", "deal_seq", "(", "dt", "[", "'qu'", "]", ")", "\n", "dt", "[", "'pres'", "]", "=", "list", "(", "map", "(", "deal_seq", ",", "dt", "[", "'pres'", "]", ")", ")", "\n", "data_used", ".", "append", "(", "dt", ")", "\n", "\n", "", "json_dump", "(", "data_used", ",", "output_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.data_preprocess.get_nlpcckbqa.convert_character_real": [[266, 287], ["json_load", "json_dump", "tqdm.tqdm", "deal_seq", "deal_seq", "list", "data_used.append", "map", "len", "enumerate"], "function", ["None"], ["", "def", "convert_character_real", "(", "input_path", ",", "output_path", ",", "verbose", "=", "True", ")", ":", "\n", "    ", "data", "=", "json_load", "(", "input_path", ")", "\n", "\n", "data_all", "=", "data", "\n", "if", "verbose", "is", "True", ":", "\n", "        ", "data_all", "=", "tqdm", "(", "data_all", ")", "\n", "\n", "", "deal_seq", "=", "lambda", "x", ":", "[", "[", "t", ",", "i", ",", "i", "+", "1", "]", "for", "i", ",", "t", "in", "enumerate", "(", "x", ")", "]", "if", "not", "len", "(", "x", ")", "==", "0", "else", "[", "[", "\"<NW_oi>\"", ",", "0", ",", "4", "]", "]", "\n", "deal_char", "=", "lambda", "x", ":", "deal_seq", "(", "''", ".", "join", "(", "x", ")", ")", "\n", "\n", "data_used", "=", "[", "]", "\n", "for", "dt", "in", "data_all", ":", "\n", "        ", "dt", "[", "'qu'", "]", "=", "[", "t", "if", "not", "t", "==", "'<Entity>'", "else", "'E'", "for", "t", "in", "dt", "[", "'qu'", "]", "]", "\n", "dt", "[", "'qu'", "]", "=", "deal_seq", "(", "''", ".", "join", "(", "dt", "[", "'qu'", "]", ")", ")", "\n", "for", "token", "in", "dt", "[", "'qu'", "]", ":", "\n", "            ", "if", "token", "[", "0", "]", "==", "'E'", ":", "\n", "                ", "token", "[", "0", "]", "=", "'<Entity>'", "\n", "", "", "dt", "[", "'pres'", "]", "=", "list", "(", "map", "(", "deal_char", ",", "dt", "[", "'pres'", "]", ")", ")", "\n", "data_used", ".", "append", "(", "dt", ")", "\n", "\n", "", "json_dump", "(", "data_used", ",", "output_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.data_preprocess.get_nlpcckbqa.get_p_dict": [[290, 305], ["p_head_dict[].append", "p_tail_dict[].append"], "function", ["None"], ["def", "get_p_dict", "(", "word_seq", ")", ":", "\n", "    ", "\"\"\"   \u5efa\u7acb\u57fa\u4e8e\u4f4d\u7f6e\u7684\u7d22\u5f15   \"\"\"", "\n", "p_head_dict", "=", "{", "}", "\n", "p_tail_dict", "=", "{", "}", "\n", "for", "t", "in", "word_seq", ":", "\n", "        ", "if", "not", "t", "[", "1", "]", "in", "p_head_dict", ":", "\n", "            ", "p_head_dict", "[", "t", "[", "1", "]", "]", "=", "[", "]", "\n", "", "if", "not", "t", "[", "2", "]", "in", "p_tail_dict", ":", "\n", "            ", "p_tail_dict", "[", "t", "[", "2", "]", "]", "=", "[", "]", "\n", "", "p_head_dict", "[", "t", "[", "1", "]", "]", ".", "append", "(", "t", ")", "\n", "p_tail_dict", "[", "t", "[", "2", "]", "]", ".", "append", "(", "t", ")", "\n", "# \u5b57\u5178\uff0c\u50a8\u5b58\u4e86\u4ee5 k\uff08id\uff09 \u4e3a\u5f00\u5934\u6216\u7ed3\u5c3e\u7684token list", "\n", "# \u9884\u5904\u7406\u4fdd\u8bc1\u4e86\uff0c\u6bcf\u4e2a\u5f00\u5934\u4f4d\u7f6e\u90fd\u6709\u8bcd\u7ed3\u5c3e\uff0c\u6bcf\u4e2a\u7ed3\u5c3e\u4f4d\u7f6e\u90fd\u6709\u8bcd\u5f00\u5934~", "\n", "\n", "", "return", "p_head_dict", ",", "p_tail_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.data_preprocess.get_nlpcckbqa.get_chatacter": [[306, 322], ["get_nlpcckbqa.get_p_dict", "min", "max", "p_head_dict.keys", "p_tail_dict.keys", "min", "choose_t.append"], "function", ["home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.data_preprocess.get_nlpcckbqa.get_p_dict"], ["", "def", "get_chatacter", "(", "word_seq", ")", ":", "\n", "    ", "\"\"\"\u8d2a\u5fc3\u6cd5\uff0c\u83b7\u53d6\u6700\u957f\u5b50\u94fe\"\"\"", "\n", "p_head_dict", ",", "p_tail_dict", "=", "get_p_dict", "(", "word_seq", ")", "\n", "\n", "min_head", "=", "min", "(", "p_head_dict", ".", "keys", "(", ")", ")", "\n", "max_tail", "=", "max", "(", "p_tail_dict", ".", "keys", "(", ")", ")", "\n", "temp_tail", "=", "min_head", "\n", "choose_t", "=", "[", "]", "\n", "while", "not", "temp_tail", "==", "max_tail", ":", "\n", "        ", "word_group", "=", "p_head_dict", "[", "temp_tail", "]", "\n", "min_end", "=", "min", "(", "[", "t", "[", "2", "]", "for", "t", "in", "word_group", "]", ")", "\n", "next_word", "=", "[", "t", "for", "t", "in", "word_group", "if", "t", "[", "2", "]", "==", "min_end", "]", "[", "0", "]", "\n", "\n", "choose_t", ".", "append", "(", "next_word", ")", "\n", "temp_tail", "=", "next_word", "[", "2", "]", "\n", "", "return", "choose_t", "\n", "\n"]], "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.data_preprocess.get_nlpcckbqa.get_longest_chain": [[323, 346], ["get_nlpcckbqa.get_p_dict", "sorted", "max", "p_head_dict.keys", "p_tail_dict.keys"], "function", ["home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.data_preprocess.get_nlpcckbqa.get_p_dict"], ["", "def", "get_longest_chain", "(", "word_seq", ")", ":", "\n", "    ", "\"\"\"\u52a8\u6001\u89c4\u5212\uff0c\u83b7\u53d6\u6700\u957f\u5b50\u94fe\"\"\"", "\n", "p_head_dict", ",", "p_tail_dict", "=", "get_p_dict", "(", "word_seq", ")", "\n", "p_head_list", "=", "sorted", "(", "p_head_dict", ".", "keys", "(", ")", ")", "\n", "max_tail", "=", "max", "(", "p_tail_dict", ".", "keys", "(", ")", ")", "\n", "\n", "l_tail", "=", "{", "}", "# [length, [list of [token]]]", "\n", "for", "pt", "in", "p_head_list", ":", "\n", "        ", "if", "not", "pt", "in", "l_tail", ":", "\n", "            ", "prev_len", ",", "prev_list", "=", "0", ",", "[", "[", "]", "]", "\n", "", "else", ":", "\n", "            ", "prev_len", ",", "prev_list", "=", "l_tail", "[", "pt", "]", "\n", "\n", "", "for", "token", "in", "p_head_dict", "[", "pt", "]", ":", "\n", "            ", "tail_pt", "=", "token", "[", "2", "]", "\n", "if", "not", "tail_pt", "in", "l_tail", ":", "\n", "                ", "l_tail", "[", "tail_pt", "]", "=", "[", "prev_len", "+", "1", ",", "[", "t", "+", "[", "token", "]", "for", "t", "in", "prev_list", "]", "]", "\n", "", "elif", "prev_len", "+", "1", "==", "l_tail", "[", "tail_pt", "]", "[", "0", "]", ":", "\n", "                ", "l_tail", "[", "tail_pt", "]", "[", "1", "]", "+=", "[", "t", "+", "[", "token", "]", "for", "t", "in", "prev_list", "]", "\n", "", "elif", "prev_len", "+", "1", ">", "l_tail", "[", "tail_pt", "]", "[", "0", "]", ":", "\n", "                ", "l_tail", "[", "tail_pt", "]", "=", "[", "prev_len", "+", "1", ",", "[", "t", "+", "[", "token", "]", "for", "t", "in", "prev_list", "]", "]", "\n", "\n", "", "", "", "return", "l_tail", "[", "max_tail", "]", "[", "1", "]", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.data_preprocess.get_nlpcckbqa.get_shortest_chain": [[347, 371], ["get_nlpcckbqa.get_p_dict", "sorted", "max", "p_head_dict.keys", "p_tail_dict.keys"], "function", ["home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.data_preprocess.get_nlpcckbqa.get_p_dict"], ["", "def", "get_shortest_chain", "(", "word_seq", ")", ":", "\n", "    ", "\"\"\"\u52a8\u6001\u89c4\u5212\uff0c\u83b7\u53d6\u6700\u77ed\u5b50\u94fe\"\"\"", "\n", "p_head_dict", ",", "p_tail_dict", "=", "get_p_dict", "(", "word_seq", ")", "\n", "p_head_list", "=", "sorted", "(", "p_head_dict", ".", "keys", "(", ")", ")", "\n", "max_tail", "=", "max", "(", "p_tail_dict", ".", "keys", "(", ")", ")", "\n", "\n", "l_tail", "=", "{", "}", "# [length, [list of [token]]]", "\n", "for", "pt", "in", "p_head_list", ":", "\n", "        ", "if", "not", "pt", "in", "l_tail", ":", "\n", "            ", "prev_len", ",", "prev_list", "=", "0", ",", "[", "[", "]", "]", "\n", "", "else", ":", "\n", "            ", "prev_len", ",", "prev_list", "=", "l_tail", "[", "pt", "]", "\n", "", "prev_list", "=", "prev_list", "[", ":", "1", "]", "\n", "\n", "for", "token", "in", "p_head_dict", "[", "pt", "]", ":", "\n", "            ", "tail_pt", "=", "token", "[", "2", "]", "\n", "if", "not", "tail_pt", "in", "l_tail", ":", "\n", "                ", "l_tail", "[", "tail_pt", "]", "=", "[", "prev_len", "+", "1", ",", "[", "t", "+", "[", "token", "]", "for", "t", "in", "prev_list", "]", "]", "\n", "", "elif", "prev_len", "+", "1", "==", "l_tail", "[", "tail_pt", "]", "[", "0", "]", ":", "\n", "                ", "l_tail", "[", "tail_pt", "]", "[", "1", "]", "+=", "[", "t", "+", "[", "token", "]", "for", "t", "in", "prev_list", "]", "\n", "", "elif", "prev_len", "+", "1", "<", "l_tail", "[", "tail_pt", "]", "[", "0", "]", ":", "\n", "                ", "l_tail", "[", "tail_pt", "]", "=", "[", "prev_len", "+", "1", ",", "[", "t", "+", "[", "token", "]", "for", "t", "in", "prev_list", "]", "]", "\n", "\n", "", "", "", "return", "l_tail", "[", "max_tail", "]", "[", "1", "]", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.data_preprocess.get_nlpcckbqa.convert_character_mws": [[372, 386], ["json_load", "json_dump", "tqdm.tqdm", "func", "list", "data_used.append", "map"], "function", ["None"], ["", "def", "convert_character_mws", "(", "input_path", ",", "output_path", ",", "verbose", "=", "True", ",", "func", "=", "get_chatacter", ")", ":", "\n", "    ", "data", "=", "json_load", "(", "input_path", ")", "\n", "\n", "data_all", "=", "data", "\n", "if", "verbose", "is", "True", ":", "\n", "        ", "data_all", "=", "tqdm", "(", "data_all", ")", "\n", "\n", "", "data_used", "=", "[", "]", "\n", "for", "dt", "in", "data_all", ":", "\n", "        ", "dt", "[", "'qu'", "]", "=", "func", "(", "dt", "[", "'qu'", "]", ")", "\n", "dt", "[", "'pres'", "]", "=", "list", "(", "map", "(", "func", ",", "dt", "[", "'pres'", "]", ")", ")", "\n", "data_used", ".", "append", "(", "dt", ")", "\n", "\n", "", "json_dump", "(", "data_used", ",", "output_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.data_preprocess.get_nlpcckbqa.check_word_seq": [[388, 402], ["print", "print"], "function", ["None"], ["", "def", "check_word_seq", "(", "seq1", ",", "seq2", ")", ":", "\n", "# # for t in seq1+seq2 :", "\n", "# for t in seq1:", "\n", "#     if len(t[0]) > 1 and not t[0][0]=='<':", "\n", "#         # print(seq1)", "\n", "#         print(t[0])", "\n", "\n", "    ", "str_1", "=", "' '", ".", "join", "(", "[", "t", "[", "0", "]", "for", "t", "in", "seq1", "]", ")", "\n", "str_2", "=", "' '", ".", "join", "(", "[", "t", "[", "0", "]", "for", "t", "in", "seq2", "]", ")", "\n", "if", "not", "str_1", "==", "str_2", ":", "\n", "        ", "print", "(", "str_1", ")", "\n", "print", "(", "str_2", ")", "\n", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.data_preprocess.get_nlpcckbqa.analisys_chain": [[403, 424], ["json_load", "json_load", "len", "tqdm.tqdm", "len", "len", "list", "range", "print", "get_nlpcckbqa.check_word_seq", "range", "len", "get_nlpcckbqa.check_word_seq"], "function", ["home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.data_preprocess.get_nlpcckbqa.check_word_seq", "home.repos.pwc.inspect_result.Erutan-pku_LCN-for-Chinese-QA.data_preprocess.get_nlpcckbqa.check_word_seq"], ["", "def", "analisys_chain", "(", "input_1", ",", "input_2", ",", "keys", ")", ":", "\n", "    ", "data1", "=", "json_load", "(", "input_1", ")", "\n", "data2", "=", "json_load", "(", "input_2", ")", "\n", "\n", "assert", "len", "(", "data1", ")", "==", "len", "(", "data2", ")", "\n", "lent", "=", "len", "(", "data1", ")", "\n", "for", "i", "in", "tqdm", "(", "list", "(", "range", "(", "lent", ")", ")", ")", ":", "\n", "        ", "dt1", "=", "data1", "[", "i", "]", "\n", "dt2", "=", "data2", "[", "i", "]", "\n", "id_t", "=", "dt1", "[", "'id'", "]", "\n", "\n", "mark", "=", "False", "\n", "for", "key_type", ",", "key", "in", "keys", ":", "\n", "            ", "if", "key_type", "==", "'str'", ":", "\n", "                ", "mark", "|=", "check_word_seq", "(", "dt1", "[", "key", "]", ",", "dt2", "[", "key", "]", ")", "\n", "", "elif", "key_type", "==", "'list'", ":", "\n", "                ", "for", "j", "in", "range", "(", "len", "(", "dt1", "[", "key", "]", ")", ")", ":", "\n", "                    ", "mark", "|=", "check_word_seq", "(", "dt1", "[", "key", "]", "[", "j", "]", ",", "dt2", "[", "key", "]", "[", "j", "]", ")", "\n", "\n", "", "", "", "if", "mark", ":", "\n", "            ", "print", "(", "id_t", "+", "'\\n'", ")", "\n", "\n"]]}