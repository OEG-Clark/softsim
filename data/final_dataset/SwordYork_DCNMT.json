{"home.repos.pwc.inspect_result.SwordYork_DCNMT.None.configurations.get_config": [[1, 143], ["None"], "function", ["None"], ["def", "get_config", "(", ")", ":", "\n", "    ", "config", "=", "{", "}", "\n", "# Where to save model, this corresponds to 'prefix' in groundhog", "\n", "config", "[", "'saveto'", "]", "=", "'dcnmt_en2fr'", "\n", "\n", "# prepare data", "\n", "config", "[", "'source_language'", "]", "=", "'en'", "\n", "config", "[", "'target_language'", "]", "=", "'fr'", "\n", "\n", "# Model related -----------------------------------------------------------", "\n", "\n", "# Sequences longer than this will be discarded", "\n", "config", "[", "'max_src_seq_char_len'", "]", "=", "300", "\n", "config", "[", "'max_src_seq_word_len'", "]", "=", "50", "\n", "config", "[", "'max_trg_seq_char_len'", "]", "=", "300", "\n", "config", "[", "'max_trg_seq_word_len'", "]", "=", "50", "\n", "\n", "# Number of hidden units in encoder/decoder GRU", "\n", "config", "[", "'src_dgru_nhids'", "]", "=", "512", "\n", "config", "[", "'enc_nhids'", "]", "=", "1024", "\n", "config", "[", "'dec_nhids'", "]", "=", "1024", "\n", "config", "[", "'trg_dgru_nhids'", "]", "=", "512", "\n", "config", "[", "'trg_igru_nhids'", "]", "=", "1024", "\n", "\n", "\n", "# Dimension of the word embedding matrix in encoder/decoder", "\n", "config", "[", "'enc_embed'", "]", "=", "64", "\n", "config", "[", "'dec_embed'", "]", "=", "64", "\n", "config", "[", "'src_dgru_depth'", "]", "=", "2", "\n", "config", "[", "'bidir_encoder_depth'", "]", "=", "2", "\n", "config", "[", "'transition_depth'", "]", "=", "1", "\n", "config", "[", "'trg_dgru_depth'", "]", "=", "1", "\n", "config", "[", "'trg_igru_depth'", "]", "=", "1", "\n", "\n", "\n", "# Optimization related ----------------------------------------------------", "\n", "\n", "# Batch size", "\n", "config", "[", "'batch_size'", "]", "=", "80", "\n", "\n", "# This many batches will be read ahead and sorted", "\n", "config", "[", "'sort_k_batches'", "]", "=", "12", "\n", "\n", "# Optimization step rule", "\n", "config", "[", "'step_rule'", "]", "=", "'AdaDelta'", "\n", "\n", "# Gradient clipping threshold", "\n", "config", "[", "'step_clipping'", "]", "=", "1.", "\n", "\n", "# Std of weight initialization", "\n", "config", "[", "'weight_scale'", "]", "=", "0.01", "\n", "\n", "# Vocabulary/dataset related ----------------------------------------------", "\n", "\n", "# Root directory for dataset", "\n", "datadir", "=", "'./data/'", "\n", "\n", "# Module name of the stream that will be used", "\n", "config", "[", "'stream'", "]", "=", "'stream'", "\n", "\n", "# Source and target vocabularies", "\n", "config", "[", "'src_vocab'", "]", "=", "datadir", "+", "'vocab.{}-{}.{}.pkl'", ".", "format", "(", "config", "[", "'source_language'", "]", ",", "config", "[", "'target_language'", "]", ",", "\n", "config", "[", "'source_language'", "]", ")", "\n", "config", "[", "'trg_vocab'", "]", "=", "datadir", "+", "'vocab.{}-{}.{}.pkl'", ".", "format", "(", "config", "[", "'source_language'", "]", ",", "config", "[", "'target_language'", "]", ",", "\n", "config", "[", "'target_language'", "]", ")", "\n", "\n", "# Source and target datasets", "\n", "config", "[", "'src_data'", "]", "=", "datadir", "+", "'all.en-fr.en.tok.shuf'", "\n", "config", "[", "'trg_data'", "]", "=", "datadir", "+", "'all.en-fr.fr.tok.shuf'", "\n", "\n", "# Source and target vocabulary sizes, should include bos, eos, unk tokens", "\n", "config", "[", "'src_vocab_size'", "]", "=", "120", "\n", "config", "[", "'trg_vocab_size'", "]", "=", "120", "\n", "\n", "# Special tokens and indexes", "\n", "config", "[", "'unk_id'", "]", "=", "1", "\n", "config", "[", "'bos_token'", "]", "=", "'<S>'", "\n", "config", "[", "'eos_token'", "]", "=", "'</S>'", "\n", "config", "[", "'unk_token'", "]", "=", "'<UNK>'", "\n", "\n", "# Early stopping based on val related ------------------------------------", "\n", "\n", "# Normalize cost according to sequence length after beam-search", "\n", "config", "[", "'normalized_val'", "]", "=", "True", "\n", "\n", "# Normalize cost according to sequence length after beam-search", "\n", "config", "[", "'normalized_bleu'", "]", "=", "True", "\n", "\n", "# Bleu script that will be used (moses multi-perl in this case)", "\n", "config", "[", "'bleu_script'", "]", "=", "datadir", "+", "'multi-bleu.perl'", "\n", "\n", "# Validation set source file", "\n", "config", "[", "'val_set'", "]", "=", "datadir", "+", "'newstest2013.en.tok'", "\n", "\n", "# Validation set gold file", "\n", "config", "[", "'val_set_grndtruth'", "]", "=", "datadir", "+", "'newstest2013.fr.tok'", "\n", "\n", "# Test set source file", "\n", "config", "[", "'test_set'", "]", "=", "datadir", "+", "'newstest2014.en.tok'", "\n", "\n", "# Test set gold file", "\n", "config", "[", "'test_set_grndtruth'", "]", "=", "datadir", "+", "'newstest2014.fr.tok'", "\n", "\n", "config", "[", "'validate'", "]", "=", "True", "\n", "\n", "# Print validation output to file", "\n", "config", "[", "'output_val_set'", "]", "=", "True", "\n", "\n", "# Validation output file", "\n", "config", "[", "'val_set_out'", "]", "=", "config", "[", "'saveto'", "]", "+", "'/validation_out.txt'", "\n", "\n", "# Validation output file", "\n", "config", "[", "'test_set_out'", "]", "=", "config", "[", "'saveto'", "]", "+", "'/test_out.txt'", "\n", "\n", "# Beam-size", "\n", "config", "[", "'beam_size'", "]", "=", "12", "\n", "\n", "# Timing/monitoring related -----------------------------------------------", "\n", "\n", "# Maximum number of updates", "\n", "config", "[", "'finish_after'", "]", "=", "432000", "\n", "\n", "# Reload model from files if exist", "\n", "config", "[", "'reload'", "]", "=", "True", "\n", "\n", "# Save model after this many updates", "\n", "config", "[", "'save_freq'", "]", "=", "500", "\n", "\n", "# Print training status after this many updates", "\n", "config", "[", "'print_freq'", "]", "=", "10", "\n", "\n", "# Show samples from model after this many updates", "\n", "config", "[", "'sampling_freq'", "]", "=", "30", "\n", "\n", "# Show this many samples at each sampling", "\n", "config", "[", "'hook_samples'", "]", "=", "2", "\n", "\n", "config", "[", "'bleu_val_freq'", "]", "=", "18000", "\n", "# Start validation after this many updates", "\n", "config", "[", "'val_burn_in'", "]", "=", "70000", "\n", "\n", "return", "config", "\n", "", ""]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.DGRU.__init__": [[26, 29], ["blocks.bricks.recurrent.GatedRecurrent.__init__"], "methods", ["home.repos.pwc.inspect_result.SwordYork_DCNMT.None.stream._too_long.__init__"], ["def", "__init__", "(", "self", ",", "dim", ",", "activation", "=", "None", ",", "gate_activation", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "DGRU", ",", "self", ")", ".", "__init__", "(", "dim", ",", "activation", ",", "gate_activation", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.DGRU.apply": [[30, 66], ["blocks.bricks.recurrent.recurrent", "model.DGRU.gate_activation.apply", "model.DGRU.activation.apply", "states.dot", "states_reset.dot", "model.DGRU.initial_states"], "methods", ["home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.UpperIGRU.apply", "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.UpperIGRU.apply", "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.GRUInitialState.initial_states"], ["", "@", "recurrent", "(", "sequences", "=", "[", "'mask'", ",", "'inputs'", ",", "'gate_inputs'", "]", ",", "\n", "states", "=", "[", "'states'", "]", ",", "outputs", "=", "[", "'states'", "]", ",", "contexts", "=", "[", "]", ")", "\n", "def", "apply", "(", "self", ",", "inputs", ",", "gate_inputs", ",", "states", ",", "mask", "=", "None", ")", ":", "\n", "        ", "\"\"\"Apply the gated recurrent transition.\n        Parameters\n        ----------\n        states : :class:`~tensor.TensorVariable`\n            The 2 dimensional matrix of current states in the shape\n            (batch_size, dim). Required for `one_step` usage.\n        inputs : :class:`~tensor.TensorVariable`\n            The 2 dimensional matrix of inputs in the shape (batch_size,\n            dim)\n        gate_inputs : :class:`~tensor.TensorVariable`\n            The 2 dimensional matrix of inputs to the gates in the\n            shape (batch_size, 2 * dim).\n        mask : :class:`~tensor.TensorVariable`\n            A 1D binary array in the shape (batch,) which is 1 if there is\n            the charater available, 0 if there is the delimiter.\n        Returns\n        -------\n        output : :class:`~tensor.TensorVariable`\n            Next states of the network.\n        \"\"\"", "\n", "gate_values", "=", "self", ".", "gate_activation", ".", "apply", "(", "\n", "states", ".", "dot", "(", "self", ".", "state_to_gates", ")", "+", "gate_inputs", ")", "\n", "update_values", "=", "gate_values", "[", ":", ",", ":", "self", ".", "dim", "]", "\n", "reset_values", "=", "gate_values", "[", ":", ",", "self", ".", "dim", ":", "]", "\n", "states_reset", "=", "states", "*", "reset_values", "\n", "next_states", "=", "self", ".", "activation", ".", "apply", "(", "\n", "states_reset", ".", "dot", "(", "self", ".", "state_to_state", ")", "+", "inputs", ")", "\n", "next_states", "=", "(", "next_states", "*", "update_values", "+", "\n", "states", "*", "(", "1", "-", "update_values", ")", ")", "\n", "if", "mask", ":", "\n", "            ", "next_states", "=", "(", "mask", "[", ":", ",", "None", "]", "*", "next_states", "+", "\n", "(", "1", "-", "mask", "[", ":", ",", "None", "]", ")", "*", "self", ".", "initial_states", "(", "mask", ".", "shape", "[", "0", "]", ")", ")", "\n", "", "return", "next_states", "\n", "\n"]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.Decimator.__init__": [[71, 87], ["blocks.bricks.Initializable.__init__", "blocks.bricks.lookup.LookupTable", "blocks.bricks.recurrent.RecurrentStack", "blocks.bricks.parallel.Fork", "model.DGRU", "blocks.bricks.Linear", "range", "blocks.bricks.Tanh"], "methods", ["home.repos.pwc.inspect_result.SwordYork_DCNMT.None.stream._too_long.__init__"], ["def", "__init__", "(", "self", ",", "vocab_size", ",", "embedding_dim", ",", "dgru_state_dim", ",", "dgru_depth", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Decimator", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "vocab_size", "=", "vocab_size", "\n", "self", ".", "embedding_dim", "=", "embedding_dim", "\n", "self", ".", "dgru_state_dim", "=", "dgru_state_dim", "\n", "self", ".", "embedding_dim", "=", "embedding_dim", "\n", "self", ".", "lookup", "=", "LookupTable", "(", "name", "=", "'embeddings'", ")", "\n", "self", ".", "dgru_depth", "=", "dgru_depth", "\n", "self", ".", "dgru", "=", "RecurrentStack", "(", "[", "DGRU", "(", "activation", "=", "Tanh", "(", ")", ",", "dim", "=", "self", ".", "dgru_state_dim", ")", "for", "_", "in", "range", "(", "dgru_depth", ")", "]", ",", "\n", "skip_connections", "=", "True", ")", "\n", "\n", "self", ".", "gru_fork", "=", "Fork", "(", "[", "name", "for", "name", "in", "self", ".", "dgru", ".", "apply", ".", "sequences", "\n", "if", "name", "!=", "'mask'", "]", ",", "prototype", "=", "Linear", "(", ")", ",", "name", "=", "'gru_fork'", ")", "\n", "\n", "self", ".", "children", "=", "[", "self", ".", "lookup", ",", "self", ".", "dgru", ",", "self", ".", "gru_fork", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.Decimator._push_allocation_config": [[88, 95], ["model.Decimator.dgru.get_dim"], "methods", ["home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.SequenceGeneratorDCNMT.get_dim"], ["", "def", "_push_allocation_config", "(", "self", ")", ":", "\n", "        ", "self", ".", "lookup", ".", "length", "=", "self", ".", "vocab_size", "\n", "self", ".", "lookup", ".", "dim", "=", "self", ".", "embedding_dim", "\n", "\n", "self", ".", "gru_fork", ".", "input_dim", "=", "self", ".", "embedding_dim", "\n", "self", ".", "gru_fork", ".", "output_dims", "=", "[", "self", ".", "dgru", ".", "get_dim", "(", "name", ")", "\n", "for", "name", "in", "self", ".", "gru_fork", ".", "output_names", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.Decimator.apply": [[96, 108], ["blocks.bricks.base.application", "model.Decimator.lookup.apply", "model.Decimator.dgru.apply", "theano.tensor.batched_dot", "theano.tensor.batched_dot.dimshuffle", "model.Decimator.dimshuffle", "toolz.merge", "model.Decimator.gru_fork.apply"], "methods", ["home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.UpperIGRU.apply", "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.UpperIGRU.apply", "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.UpperIGRU.apply"], ["", "@", "application", "(", "inputs", "=", "[", "'char_seq'", ",", "'sample_matrix'", ",", "'char_aux'", "]", ",", "\n", "outputs", "=", "[", "'representation'", "]", ")", "\n", "def", "apply", "(", "self", ",", "char_seq", ",", "sample_matrix", ",", "char_aux", ")", ":", "\n", "# Time as first dimension", "\n", "        ", "embeddings", "=", "self", ".", "lookup", ".", "apply", "(", "char_seq", ")", "\n", "gru_out", "=", "self", ".", "dgru", ".", "apply", "(", "\n", "**", "merge", "(", "self", ".", "gru_fork", ".", "apply", "(", "embeddings", ",", "as_dict", "=", "True", ")", ",", "\n", "{", "'mask'", ":", "char_aux", "}", ")", ")", "\n", "if", "self", ".", "dgru_depth", ">", "1", ":", "\n", "            ", "gru_out", "=", "gru_out", "[", "-", "1", "]", "\n", "", "sampled_representation", "=", "tensor", ".", "batched_dot", "(", "sample_matrix", ",", "gru_out", ".", "dimshuffle", "(", "[", "1", ",", "0", ",", "2", "]", ")", ")", "\n", "return", "sampled_representation", ".", "dimshuffle", "(", "[", "1", ",", "0", ",", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.Decimator.single_emit": [[109, 122], ["blocks.bricks.base.application", "model.Decimator.lookup.apply", "range", "model.Decimator.dgru.apply", "model.Decimator.dgru.initial_states", "toolz.merge", "model.Decimator.gru_fork.apply", "str"], "methods", ["home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.UpperIGRU.apply", "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.UpperIGRU.apply", "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.GRUInitialState.initial_states", "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.UpperIGRU.apply"], ["", "@", "application", "(", "inputs", "=", "[", "'target_single_char'", "]", ")", "\n", "def", "single_emit", "(", "self", ",", "target_single_char", ",", "batch_size", ",", "mask", ",", "states", "=", "None", ")", ":", "\n", "# Time as first dimension", "\n", "# only one batch", "\n", "        ", "embeddings", "=", "self", ".", "lookup", ".", "apply", "(", "target_single_char", ")", "\n", "if", "states", "is", "None", ":", "\n", "            ", "states", "=", "self", ".", "dgru", ".", "initial_states", "(", "batch_size", ")", "\n", "", "states_dict", "=", "{", "'states'", ":", "states", "[", "0", "]", "}", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "dgru_depth", ")", ":", "\n", "            ", "states_dict", "[", "'states'", "+", "RECURRENTSTACK_SEPARATOR", "+", "str", "(", "i", ")", "]", "=", "states", "[", "i", "]", "\n", "", "gru_out", "=", "self", ".", "dgru", ".", "apply", "(", "**", "merge", "(", "self", ".", "gru_fork", ".", "apply", "(", "embeddings", ",", "as_dict", "=", "True", ")", ",", "states_dict", ",", "\n", "{", "'mask'", ":", "mask", ",", "'iterate'", ":", "False", "}", ")", ")", "\n", "return", "gru_out", "\n", "\n"]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.Decimator.single_emit_outputs": [[123, 126], ["single_emit.property", "str", "range"], "methods", ["None"], ["", "@", "single_emit", ".", "property", "(", "'outputs'", ")", "\n", "def", "single_emit_outputs", "(", "self", ")", ":", "\n", "        ", "return", "[", "'gru_out'", "+", "RECURRENTSTACK_SEPARATOR", "+", "str", "(", "i", ")", "for", "i", "in", "range", "(", "self", ".", "dgru_depth", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.Decimator.get_dim": [[127, 131], ["super().get_dim"], "methods", ["home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.SequenceGeneratorDCNMT.get_dim"], ["", "def", "get_dim", "(", "self", ",", "name", ")", ":", "\n", "        ", "if", "name", "in", "[", "'output'", ",", "'feedback'", "]", ":", "\n", "            ", "return", "self", ".", "dgru_state_dim", "\n", "", "super", "(", "Decimator", ",", "self", ")", ".", "get_dim", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.RecurrentWithFork.__init__": [[134, 144], ["blocks.bricks.base.lazy", "blocks.bricks.Initializable.__init__", "blocks.bricks.parallel.Fork", "blocks.bricks.Linear"], "methods", ["home.repos.pwc.inspect_result.SwordYork_DCNMT.None.stream._too_long.__init__"], ["    ", "@", "lazy", "(", "allocation", "=", "[", "'input_dim'", "]", ")", "\n", "def", "__init__", "(", "self", ",", "proto", ",", "input_dim", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "RecurrentWithFork", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "recurrent", "=", "proto", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "fork", "=", "Fork", "(", "\n", "[", "name", "for", "name", "in", "self", ".", "recurrent", ".", "apply", ".", "sequences", "\n", "if", "name", "!=", "'mask'", "]", ",", "\n", "prototype", "=", "Linear", "(", ")", ")", "\n", "self", ".", "children", "=", "[", "self", ".", "recurrent", ",", "self", ".", "fork", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.RecurrentWithFork._push_allocation_config": [[145, 149], ["model.RecurrentWithFork.recurrent.get_dim"], "methods", ["home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.SequenceGeneratorDCNMT.get_dim"], ["", "def", "_push_allocation_config", "(", "self", ")", ":", "\n", "        ", "self", ".", "fork", ".", "input_dim", "=", "self", ".", "input_dim", "\n", "self", ".", "fork", ".", "output_dims", "=", "[", "self", ".", "recurrent", ".", "get_dim", "(", "name", ")", "\n", "for", "name", "in", "self", ".", "fork", ".", "output_names", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.RecurrentWithFork.apply": [[150, 155], ["blocks.bricks.base.application", "model.RecurrentWithFork.recurrent.apply", "blocks.utils.dict_union", "model.RecurrentWithFork.fork.apply"], "methods", ["home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.UpperIGRU.apply", "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.UpperIGRU.apply"], ["", "@", "application", "(", "inputs", "=", "[", "'input_'", ",", "'mask'", "]", ")", "\n", "def", "apply", "(", "self", ",", "input_", ",", "mask", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "recurrent", ".", "apply", "(", "\n", "mask", "=", "mask", ",", "**", "dict_union", "(", "self", ".", "fork", ".", "apply", "(", "input_", ",", "as_dict", "=", "True", ")", ",", "\n", "kwargs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.RecurrentWithFork.apply_outputs": [[156, 159], ["apply.property"], "methods", ["None"], ["", "@", "apply", ".", "property", "(", "'outputs'", ")", "\n", "def", "apply_outputs", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "recurrent", ".", "states", "\n", "\n"]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.BidirectionalEncoder.__init__": [[164, 180], ["blocks.bricks.Initializable.__init__", "model.Decimator", "blocks.bricks.recurrent.Bidirectional", "range", "model.RecurrentWithFork", "model.BidirectionalEncoder.children.append", "blocks.bricks.recurrent.GatedRecurrent", "copy.deepcopy", "blocks.bricks.Tanh"], "methods", ["home.repos.pwc.inspect_result.SwordYork_DCNMT.None.stream._too_long.__init__"], ["def", "__init__", "(", "self", ",", "src_vocab_size", ",", "embedding_dim", ",", "dgru_state_dim", ",", "state_dim", ",", "src_dgru_depth", ",", "\n", "bidir_encoder_depth", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "BidirectionalEncoder", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "state_dim", "=", "state_dim", "\n", "self", ".", "dgru_state_dim", "=", "dgru_state_dim", "\n", "self", ".", "decimator", "=", "Decimator", "(", "src_vocab_size", ",", "embedding_dim", ",", "dgru_state_dim", ",", "src_dgru_depth", ")", "\n", "self", ".", "bidir", "=", "Bidirectional", "(", "\n", "RecurrentWithFork", "(", "GatedRecurrent", "(", "activation", "=", "Tanh", "(", ")", ",", "dim", "=", "state_dim", ")", ",", "dgru_state_dim", ",", "name", "=", "'with_fork'", ")", ",", "\n", "name", "=", "'bidir0'", ")", "\n", "\n", "self", ".", "children", "=", "[", "self", ".", "decimator", ",", "self", ".", "bidir", "]", "\n", "for", "layer_n", "in", "range", "(", "1", ",", "bidir_encoder_depth", ")", ":", "\n", "            ", "self", ".", "children", ".", "append", "(", "copy", ".", "deepcopy", "(", "self", ".", "bidir", ")", ")", "\n", "for", "child", "in", "self", ".", "children", "[", "-", "1", "]", ".", "children", ":", "\n", "                ", "child", ".", "input_dim", "=", "2", "*", "state_dim", "\n", "", "self", ".", "children", "[", "-", "1", "]", ".", "name", "=", "'bidir{}'", ".", "format", "(", "layer_n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.BidirectionalEncoder.apply": [[181, 193], ["blocks.bricks.base.application", "model.BidirectionalEncoder.decimator.apply", "bidir.apply"], "methods", ["home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.UpperIGRU.apply", "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.UpperIGRU.apply"], ["", "", "@", "application", "(", "inputs", "=", "[", "'source_char_seq'", ",", "'source_sample_matrix'", ",", "'source_char_aux'", ",", "'source_word_mask'", "]", ",", "\n", "outputs", "=", "[", "'representation'", "]", ")", "\n", "def", "apply", "(", "self", ",", "source_char_seq", ",", "source_sample_matrix", ",", "source_char_aux", ",", "source_word_mask", ")", ":", "\n", "# Time as first dimension", "\n", "        ", "source_char_seq", "=", "source_char_seq", ".", "T", "\n", "source_char_aux", "=", "source_char_aux", ".", "T", "\n", "source_word_mask", "=", "source_word_mask", ".", "T", "\n", "source_word_representation", "=", "self", ".", "decimator", ".", "apply", "(", "source_char_seq", ",", "source_sample_matrix", ",", "source_char_aux", ")", "\n", "representation", "=", "source_word_representation", "\n", "for", "bidir", "in", "self", ".", "children", "[", "1", ":", "]", ":", "\n", "            ", "representation", "=", "bidir", ".", "apply", "(", "representation", ",", "source_word_mask", ")", "\n", "", "return", "representation", "\n", "\n"]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.IGRU.__init__": [[198, 201], ["blocks.bricks.recurrent.GatedRecurrent.__init__"], "methods", ["home.repos.pwc.inspect_result.SwordYork_DCNMT.None.stream._too_long.__init__"], ["def", "__init__", "(", "self", ",", "dim", ",", "activation", "=", "None", ",", "gate_activation", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "IGRU", ",", "self", ")", ".", "__init__", "(", "dim", ",", "activation", ",", "gate_activation", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.IGRU.apply": [[202, 242], ["blocks.bricks.recurrent.recurrent", "model.IGRU.gate_activation.apply", "model.IGRU.activation.apply", "states.dot", "states_reset.dot"], "methods", ["home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.UpperIGRU.apply", "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.UpperIGRU.apply"], ["", "@", "recurrent", "(", "sequences", "=", "[", "'mask'", ",", "'inputs'", ",", "'gate_inputs'", ",", "'input_states'", "]", ",", "\n", "states", "=", "[", "'states'", "]", ",", "outputs", "=", "[", "'states'", "]", ",", "contexts", "=", "[", "]", ")", "\n", "def", "apply", "(", "self", ",", "inputs", ",", "gate_inputs", ",", "states", ",", "input_states", ",", "mask", "=", "None", ")", ":", "\n", "        ", "\"\"\"Apply the gated recurrent transition.\n        Parameters\n        ----------\n        states : :class:`~tensor.TensorVariable`\n            The 2 dimensional matrix of current states in the shape\n            (batch_size, dim). Required for `one_step` usage.\n        inputs : :class:`~tensor.TensorVariable`\n            The 2 dimensional matrix of inputs in the shape (batch_size,\n            dim)\n        gate_inputs : :class:`~tensor.TensorVariable`\n            The 2 dimensional matrix of inputs to the gates in the\n            shape (batch_size, 2 * dim).\n        input_states : :class:`~tensor.TensorVariable`\n            The 2 dimensional matrix of outputs of decoder in the shape\n            (batch_size, dim), which generated by decoder.\n        mask : :class:`~tensor.TensorVariable`\n            A 1D binary array in the shape (batch,) which is 1 if there is\n            the charater available, 0 if there is the delimiter.\n        Returns\n        -------\n        output : :class:`~tensor.TensorVariable`\n            Next states of the network.\n        \"\"\"", "\n", "# put masked states at last may be possible", "\n", "if", "mask", ":", "\n", "            ", "states", "=", "(", "mask", "[", ":", ",", "None", "]", "*", "states", "+", "(", "1", "-", "mask", "[", ":", ",", "None", "]", ")", "*", "input_states", ")", "\n", "", "gate_values", "=", "self", ".", "gate_activation", ".", "apply", "(", "\n", "states", ".", "dot", "(", "self", ".", "state_to_gates", ")", "+", "gate_inputs", ")", "\n", "update_values", "=", "gate_values", "[", ":", ",", ":", "self", ".", "dim", "]", "\n", "reset_values", "=", "gate_values", "[", ":", ",", "self", ".", "dim", ":", "]", "\n", "#states_reset = (states + input_states) * reset_values / 2", "\n", "states_reset", "=", "states", "*", "reset_values", "\n", "next_states", "=", "self", ".", "activation", ".", "apply", "(", "\n", "states_reset", ".", "dot", "(", "self", ".", "state_to_state", ")", "+", "inputs", ")", "\n", "next_states", "=", "(", "next_states", "*", "update_values", "+", "\n", "states", "*", "(", "1", "-", "update_values", ")", ")", "\n", "return", "next_states", "\n", "\n"]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.IGRU._allocate": [[244, 252], ["model.IGRU.parameters.append", "model.IGRU.parameters.append", "range", "blocks.utils.shared_floatx_nans", "blocks.utils.shared_floatx_nans", "blocks.roles.add_role"], "methods", ["None"], ["", "def", "_allocate", "(", "self", ")", ":", "\n", "        ", "self", ".", "parameters", ".", "append", "(", "shared_floatx_nans", "(", "(", "self", ".", "dim", ",", "self", ".", "dim", ")", ",", "\n", "name", "=", "'state_to_state'", ")", ")", "\n", "self", ".", "parameters", ".", "append", "(", "shared_floatx_nans", "(", "(", "self", ".", "dim", ",", "2", "*", "self", ".", "dim", ")", ",", "\n", "name", "=", "'state_to_gates'", ")", ")", "\n", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "            ", "if", "self", ".", "parameters", "[", "i", "]", ":", "\n", "                ", "add_role", "(", "self", ".", "parameters", "[", "i", "]", ",", "WEIGHT", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.IGRU.initial_states": [[253, 256], ["blocks.bricks.base.application", "theano.tensor.zeros"], "methods", ["None"], ["", "", "", "@", "application", "(", "outputs", "=", "apply", ".", "states", ")", "\n", "def", "initial_states", "(", "self", ",", "batch_size", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "tensor", ".", "zeros", "(", "(", "batch_size", ",", "self", ".", "dim", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.UpperIGRU.__init__": [[261, 264], ["blocks.bricks.recurrent.GatedRecurrent.__init__"], "methods", ["home.repos.pwc.inspect_result.SwordYork_DCNMT.None.stream._too_long.__init__"], ["def", "__init__", "(", "self", ",", "dim", ",", "activation", "=", "None", ",", "gate_activation", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "UpperIGRU", ",", "self", ")", ".", "__init__", "(", "dim", ",", "activation", ",", "gate_activation", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.UpperIGRU.apply": [[265, 304], ["blocks.bricks.recurrent.recurrent", "model.UpperIGRU.gate_activation.apply", "model.UpperIGRU.activation.apply", "states.dot", "states_reset.dot", "model.UpperIGRU.initial_states"], "methods", ["home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.UpperIGRU.apply", "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.UpperIGRU.apply", "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.GRUInitialState.initial_states"], ["", "@", "recurrent", "(", "sequences", "=", "[", "'mask'", ",", "'inputs'", ",", "'gate_inputs'", "]", ",", "\n", "states", "=", "[", "'states'", "]", ",", "outputs", "=", "[", "'states'", "]", ",", "contexts", "=", "[", "]", ")", "\n", "def", "apply", "(", "self", ",", "inputs", ",", "gate_inputs", ",", "states", ",", "mask", "=", "None", ")", ":", "\n", "        ", "\"\"\"Apply the gated recurrent transition.\n        Parameters\n        ----------\n        states : :class:`~tensor.TensorVariable`\n            The 2 dimensional matrix of current states in the shape\n            (batch_size, dim). Required for `one_step` usage.\n        inputs : :class:`~tensor.TensorVariable`\n            The 2 dimensional matrix of inputs in the shape (batch_size,\n            dim)\n        gate_inputs : :class:`~tensor.TensorVariable`\n            The 2 dimensional matrix of inputs to the gates in the\n            shape (batch_size, 2 * dim).\n        input_states : :class:`~tensor.TensorVariable`\n            The 2 dimensional matrix of outputs of decoder in the shape\n            (batch_size, dim), which generated by decoder.\n        mask : :class:`~tensor.TensorVariable`\n            A 1D binary array in the shape (batch,) which is 1 if there is\n            the charater available, 0 if there is the delimiter.\n        Returns\n        -------\n        output : :class:`~tensor.TensorVariable`\n            Next states of the network.\n        \"\"\"", "\n", "if", "mask", ":", "\n", "            ", "states", "=", "(", "mask", "[", ":", ",", "None", "]", "*", "states", "+", "(", "1", "-", "mask", "[", ":", ",", "None", "]", ")", "*", "self", ".", "initial_states", "(", "mask", ".", "shape", "[", "0", "]", ")", ")", "\n", "", "gate_values", "=", "self", ".", "gate_activation", ".", "apply", "(", "\n", "states", ".", "dot", "(", "self", ".", "state_to_gates", ")", "+", "gate_inputs", ")", "\n", "update_values", "=", "gate_values", "[", ":", ",", ":", "self", ".", "dim", "]", "\n", "reset_values", "=", "gate_values", "[", ":", ",", "self", ".", "dim", ":", "]", "\n", "states_reset", "=", "states", "*", "reset_values", "\n", "next_states", "=", "self", ".", "activation", ".", "apply", "(", "\n", "states_reset", ".", "dot", "(", "self", ".", "state_to_state", ")", "+", "inputs", ")", "\n", "next_states", "=", "(", "next_states", "*", "update_values", "+", "\n", "states", "*", "(", "1", "-", "update_values", ")", ")", "\n", "\n", "return", "next_states", "\n", "\n"]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.Interpolator.__init__": [[307, 330], ["blocks.bricks.lookup.LookupTable", "blocks.bricks.Linear", "blocks.bricks.parallel.Fork", "blocks.bricks.sequence_generators.Readout.__init__", "model.IGRU", "blocks.bricks.recurrent.RecurrentStack", "blocks.bricks.Linear", "model.IGRU", "model.UpperIGRU", "range", "blocks.bricks.Tanh", "str"], "methods", ["home.repos.pwc.inspect_result.SwordYork_DCNMT.None.stream._too_long.__init__"], ["    ", "def", "__init__", "(", "self", ",", "vocab_size", ",", "embedding_dim", ",", "igru_state_dim", ",", "igru_depth", ",", "trg_dgru_depth", ",", "emitter", "=", "None", ",", "feedback_brick", "=", "None", ",", "\n", "merge", "=", "None", ",", "merge_prototype", "=", "None", ",", "post_merge", "=", "None", ",", "merged_dim", "=", "None", ",", "igru", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "# for compatible", "\n", "        ", "if", "igru_depth", "==", "1", ":", "\n", "            ", "self", ".", "igru", "=", "IGRU", "(", "dim", "=", "igru_state_dim", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "igru", "=", "RecurrentStack", "(", "[", "IGRU", "(", "dim", "=", "igru_state_dim", ",", "name", "=", "'igru'", ")", "]", "+", "\n", "[", "UpperIGRU", "(", "dim", "=", "igru_state_dim", ",", "activation", "=", "Tanh", "(", ")", ",", "name", "=", "'upper_igru'", "+", "str", "(", "i", ")", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "igru_depth", ")", "]", ",", "\n", "skip_connections", "=", "True", ")", "\n", "", "self", ".", "igru_depth", "=", "igru_depth", "\n", "self", ".", "trg_dgru_depth", "=", "trg_dgru_depth", "\n", "self", ".", "lookup", "=", "LookupTable", "(", "name", "=", "'embeddings'", ")", "\n", "self", ".", "vocab_size", "=", "vocab_size", "\n", "self", ".", "igru_state_dim", "=", "igru_state_dim", "\n", "self", ".", "gru_to_softmax", "=", "Linear", "(", "input_dim", "=", "igru_state_dim", ",", "output_dim", "=", "vocab_size", ")", "\n", "self", ".", "embedding_dim", "=", "embedding_dim", "\n", "self", ".", "gru_fork", "=", "Fork", "(", "[", "name", "for", "name", "in", "self", ".", "igru", ".", "apply", ".", "sequences", "\n", "if", "name", "!=", "'mask'", "and", "name", "!=", "'input_states'", "]", ",", "prototype", "=", "Linear", "(", ")", ",", "name", "=", "'gru_fork'", ")", "\n", "kwargs", "[", "'children'", "]", "=", "[", "self", ".", "igru", ",", "self", ".", "lookup", ",", "self", ".", "gru_to_softmax", ",", "self", ".", "gru_fork", "]", "\n", "super", "(", "Interpolator", ",", "self", ")", ".", "__init__", "(", "emitter", "=", "emitter", ",", "feedback_brick", "=", "feedback_brick", ",", "merge", "=", "merge", ",", "\n", "merge_prototype", "=", "merge_prototype", ",", "post_merge", "=", "post_merge", ",", "\n", "merged_dim", "=", "merged_dim", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.Interpolator.initial_igru_outputs": [[331, 334], ["model.Interpolator.igru.initial_states"], "methods", ["home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.GRUInitialState.initial_states"], ["", "@", "application", "\n", "def", "initial_igru_outputs", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "return", "self", ".", "igru", ".", "initial_states", "(", "batch_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.Interpolator._push_allocation_config": [[335, 347], ["model.Interpolator.get_dim", "model.Interpolator.igru.get_dim"], "methods", ["home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.SequenceGeneratorDCNMT.get_dim", "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.SequenceGeneratorDCNMT.get_dim"], ["", "def", "_push_allocation_config", "(", "self", ")", ":", "\n", "        ", "self", ".", "lookup", ".", "length", "=", "self", ".", "vocab_size", "\n", "self", ".", "lookup", ".", "dim", "=", "self", ".", "embedding_dim", "\n", "self", ".", "emitter", ".", "readout_dim", "=", "self", ".", "get_dim", "(", "'readouts'", ")", "\n", "self", ".", "merge", ".", "input_names", "=", "self", ".", "source_names", "\n", "self", ".", "merge", ".", "input_dims", "=", "self", ".", "source_dims", "\n", "self", ".", "merge", ".", "output_dim", "=", "self", ".", "merged_dim", "\n", "self", ".", "post_merge", ".", "input_dim", "=", "self", ".", "merged_dim", "\n", "self", ".", "post_merge", ".", "output_dim", "=", "self", ".", "igru_state_dim", "\n", "self", ".", "gru_fork", ".", "input_dim", "=", "self", ".", "embedding_dim", "\n", "self", ".", "gru_fork", ".", "output_dims", "=", "[", "self", ".", "igru", ".", "get_dim", "(", "name", ")", "\n", "for", "name", "in", "self", ".", "gru_fork", ".", "output_names", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.Interpolator.feedback_apply": [[348, 351], ["blocks.bricks.base.application", "model.Interpolator.feedback_brick.apply"], "methods", ["home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.UpperIGRU.apply"], ["", "@", "application", "(", "outputs", "=", "[", "'feedback'", "]", ")", "\n", "def", "feedback_apply", "(", "self", ",", "target_char_seq", ",", "target_sample_matrix", ",", "target_char_aux", ")", ":", "\n", "        ", "return", "self", ".", "feedback_brick", ".", "apply", "(", "target_char_seq", ",", "target_sample_matrix", ",", "target_char_aux", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.Interpolator.single_feedback": [[352, 355], ["model.Interpolator.feedback_brick.single_emit"], "methods", ["home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.Decimator.single_emit"], ["", "@", "application", "\n", "def", "single_feedback", "(", "self", ",", "target_single_char", ",", "batch_size", ",", "mask", "=", "None", ",", "states", "=", "None", ")", ":", "\n", "        ", "return", "self", ".", "feedback_brick", ".", "single_emit", "(", "target_single_char", ",", "batch_size", ",", "mask", ",", "states", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.Interpolator.single_feedback_outputs": [[356, 359], ["single_feedback.property", "str", "range"], "methods", ["None"], ["", "@", "single_feedback", ".", "property", "(", "'outputs'", ")", "\n", "def", "single_feedback_outputs", "(", "self", ")", ":", "\n", "        ", "return", "[", "'single_feedback'", "+", "RECURRENTSTACK_SEPARATOR", "+", "str", "(", "i", ")", "for", "i", "in", "range", "(", "self", ".", "trg_dgru_depth", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.Interpolator.single_readout_gru": [[360, 376], ["blocks.bricks.base.application", "model.Interpolator.lookup.apply", "model.Interpolator.igru.apply", "range", "model.Interpolator.gru_to_softmax.apply", "model.Interpolator.gru_to_softmax.apply", "toolz.merge", "model.Interpolator.gru_fork.apply", "str"], "methods", ["home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.UpperIGRU.apply", "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.UpperIGRU.apply", "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.UpperIGRU.apply", "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.UpperIGRU.apply", "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.UpperIGRU.apply"], ["", "@", "application", "(", "outputs", "=", "[", "'gru_out'", ",", "'readout_chars'", "]", ")", "\n", "def", "single_readout_gru", "(", "self", ",", "target_prev_char", ",", "target_prev_char_aux", ",", "input_states", ",", "states", ")", ":", "\n", "        ", "embeddings", "=", "self", ".", "lookup", ".", "apply", "(", "target_prev_char", ")", "\n", "states_dict", "=", "{", "'states'", ":", "states", "[", "0", "]", "}", "\n", "if", "self", ".", "igru_depth", ">", "1", ":", "\n", "            ", "for", "i", "in", "range", "(", "1", ",", "self", ".", "igru_depth", ")", ":", "\n", "                ", "states_dict", "[", "'states'", "+", "RECURRENTSTACK_SEPARATOR", "+", "str", "(", "i", ")", "]", "=", "states", "[", "i", "]", "\n", "", "", "gru_out", "=", "self", ".", "igru", ".", "apply", "(", "\n", "**", "merge", "(", "self", ".", "gru_fork", ".", "apply", "(", "embeddings", ",", "as_dict", "=", "True", ")", ",", "states_dict", ",", "\n", "{", "'mask'", ":", "target_prev_char_aux", ",", "'input_states'", ":", "input_states", ",", "\n", "'iterate'", ":", "False", "}", ")", ")", "\n", "if", "self", ".", "igru_depth", ">", "1", ":", "\n", "            ", "readout_chars", "=", "self", ".", "gru_to_softmax", ".", "apply", "(", "gru_out", "[", "-", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "readout_chars", "=", "self", ".", "gru_to_softmax", ".", "apply", "(", "gru_out", ")", "\n", "", "return", "gru_out", ",", "readout_chars", "\n", "\n"]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.Interpolator.readout_gru": [[377, 387], ["blocks.bricks.base.application", "model.Interpolator.lookup.apply", "model.Interpolator.igru.apply", "model.Interpolator.gru_to_softmax.apply", "toolz.merge", "model.Interpolator.gru_fork.apply"], "methods", ["home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.UpperIGRU.apply", "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.UpperIGRU.apply", "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.UpperIGRU.apply", "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.UpperIGRU.apply"], ["", "@", "application", "(", "outputs", "=", "[", "'readout_chars'", "]", ")", "\n", "def", "readout_gru", "(", "self", ",", "target_prev_char_seq", ",", "target_prev_char_aux", ",", "input_states", ")", ":", "\n", "        ", "embeddings", "=", "self", ".", "lookup", ".", "apply", "(", "target_prev_char_seq", ")", "\n", "gru_out", "=", "self", ".", "igru", ".", "apply", "(", "\n", "**", "merge", "(", "self", ".", "gru_fork", ".", "apply", "(", "embeddings", ",", "as_dict", "=", "True", ")", ",", "\n", "{", "'mask'", ":", "target_prev_char_aux", ",", "'input_states'", ":", "input_states", "}", ")", ")", "\n", "if", "self", ".", "igru_depth", ">", "1", ":", "\n", "            ", "gru_out", "=", "gru_out", "[", "-", "1", "]", "\n", "", "readout_chars", "=", "self", ".", "gru_to_softmax", ".", "apply", "(", "gru_out", ")", "\n", "return", "readout_chars", "\n", "\n"]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.SequenceGeneratorDCNMT.__init__": [[392, 409], ["kwargs.setdefault", "blocks.bricks.attention.AttentionRecurrent", "blocks.bricks.sequence_generators.BaseSequenceGenerator.__init__", "blocks.bricks.parallel.Fork", "str", "range", "str", "range"], "methods", ["home.repos.pwc.inspect_result.SwordYork_DCNMT.None.stream._too_long.__init__"], ["def", "__init__", "(", "self", ",", "trg_space_idx", ",", "readout", ",", "transition", ",", "attention", "=", "None", ",", "transition_depth", "=", "1", ",", "igru_depth", "=", "1", ",", "trg_dgru_depth", "=", "1", ",", "\n", "add_contexts", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "trg_space_idx", "=", "trg_space_idx", "\n", "self", ".", "transition_depth", "=", "transition_depth", "\n", "self", ".", "igru_depth", "=", "igru_depth", "\n", "self", ".", "trg_dgru_depth", "=", "trg_dgru_depth", "\n", "self", ".", "igru_states_name", "=", "[", "'igru_states'", "+", "RECURRENTSTACK_SEPARATOR", "+", "str", "(", "i", ")", "for", "i", "in", "range", "(", "self", ".", "igru_depth", ")", "]", "\n", "self", ".", "feedback_name", "=", "[", "'feedback'", "+", "RECURRENTSTACK_SEPARATOR", "+", "str", "(", "i", ")", "for", "i", "in", "range", "(", "self", ".", "trg_dgru_depth", ")", "]", "\n", "\n", "normal_inputs", "=", "[", "name", "for", "name", "in", "transition", ".", "apply", ".", "sequences", "\n", "if", "'mask'", "not", "in", "name", "]", "\n", "kwargs", ".", "setdefault", "(", "'fork'", ",", "Fork", "(", "normal_inputs", ")", ")", "\n", "transition", "=", "AttentionRecurrent", "(", "\n", "transition", ",", "attention", ",", "\n", "add_contexts", "=", "add_contexts", ",", "name", "=", "\"att_trans\"", ")", "\n", "super", "(", "SequenceGeneratorDCNMT", ",", "self", ")", ".", "__init__", "(", "\n", "readout", ",", "transition", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.SequenceGeneratorDCNMT.cost_matrix_nmt": [[410, 474], ["blocks.utils.dict_subset", "blocks.utils.dict_subset", "model.SequenceGeneratorDCNMT.readout.feedback_apply", "model.SequenceGeneratorDCNMT.fork.apply", "model.SequenceGeneratorDCNMT.transition.apply", "theano.tensor.roll", "model.SequenceGeneratorDCNMT.readout.readout", "theano.tensor.batched_dot", "theano.tensor.batched_dot.dimshuffle", "model.SequenceGeneratorDCNMT.readout.readout_gru", "model.SequenceGeneratorDCNMT.readout.cost", "theano.tensor.set_subtensor", "theano.tensor.set_subtensor", "model.SequenceGeneratorDCNMT.dimshuffle", "list", "list", "application_call.add_auxiliary_variable", "application_call.add_auxiliary_variable", "blocks.utils.dict_union", "model.SequenceGeneratorDCNMT.readout.single_feedback", "blocks.utils.dict_union", "glimpses.items", "blocks.utils.dict_subset.items", "variable.copy", "[].copy", "model.SequenceGeneratorDCNMT.readout.initial_outputs", "model.SequenceGeneratorDCNMT.readout.single_feedback", "model.SequenceGeneratorDCNMT.readout.initial_outputs"], "methods", ["home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.Interpolator.feedback_apply", "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.UpperIGRU.apply", "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.UpperIGRU.apply", "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.Interpolator.readout_gru", "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.Decoder.cost", "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.Interpolator.single_feedback", "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.Interpolator.single_feedback"], ["", "@", "application", "\n", "def", "cost_matrix_nmt", "(", "self", ",", "application_call", ",", "target_char_seq", ",", "target_sample_matrix", ",", "target_resample_matrix", ",", "\n", "target_word_mask", ",", "target_char_aux", ",", "target_prev_char_seq", ",", "target_prev_char_aux", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Returns generation costs for output sequences.\n\n        See Also\n        --------\n        :meth:`cost` : Scalar cost.\n\n        \"\"\"", "\n", "# We assume the data has axes (time, batch, features, ...)", "\n", "batch_size", "=", "target_char_seq", ".", "shape", "[", "1", "]", "\n", "\n", "# Prepare input for the iterative part", "\n", "states", "=", "dict_subset", "(", "kwargs", ",", "self", ".", "_state_names", ",", "must_have", "=", "False", ")", "\n", "# masks in context are optional (e.g. `attended_mask`)", "\n", "contexts", "=", "dict_subset", "(", "kwargs", ",", "self", ".", "_context_names", ",", "must_have", "=", "False", ")", "\n", "feedback", "=", "self", ".", "readout", ".", "feedback_apply", "(", "target_char_seq", ",", "target_sample_matrix", ",", "target_char_aux", ")", "\n", "inputs", "=", "self", ".", "fork", ".", "apply", "(", "feedback", ",", "as_dict", "=", "True", ")", "\n", "\n", "# Run the recurrent network", "\n", "results", "=", "self", ".", "transition", ".", "apply", "(", "\n", "mask", "=", "target_word_mask", ",", "return_initial_states", "=", "True", ",", "as_dict", "=", "True", ",", "\n", "**", "dict_union", "(", "inputs", ",", "states", ",", "contexts", ")", ")", "\n", "\n", "# Separate the deliverables. The last states are discarded: they", "\n", "# are not used to predict any output symbol. The initial glimpses", "\n", "# are discarded because they are not used for prediction.", "\n", "# Remember, glimpses are computed _before_ output stage, states are", "\n", "# computed after.", "\n", "states", "=", "{", "name", ":", "results", "[", "name", "]", "[", ":", "-", "1", "]", "for", "name", "in", "self", ".", "_state_names", "}", "\n", "glimpses", "=", "{", "name", ":", "results", "[", "name", "]", "[", "1", ":", "]", "for", "name", "in", "self", ".", "_glimpse_names", "}", "\n", "\n", "feedback", "=", "tensor", ".", "roll", "(", "feedback", ",", "1", ",", "0", ")", "\n", "if", "self", ".", "trg_dgru_depth", "==", "1", ":", "\n", "            ", "feedback", "=", "tensor", ".", "set_subtensor", "(", "\n", "feedback", "[", "0", "]", ",", "\n", "self", ".", "readout", ".", "single_feedback", "(", "self", ".", "readout", ".", "initial_outputs", "(", "batch_size", ")", ",", "batch_size", ")", ")", "\n", "", "else", ":", "\n", "            ", "feedback", "=", "tensor", ".", "set_subtensor", "(", "\n", "feedback", "[", "0", "]", ",", "\n", "self", ".", "readout", ".", "single_feedback", "(", "self", ".", "readout", ".", "initial_outputs", "(", "batch_size", ")", ",", "batch_size", ")", "[", "-", "1", "]", ")", "\n", "\n", "", "decoder_readout_outputs", "=", "self", ".", "readout", ".", "readout", "(", "\n", "feedback", "=", "feedback", ",", "**", "dict_union", "(", "states", ",", "glimpses", ",", "contexts", ")", ")", "\n", "resampled_representation", "=", "tensor", ".", "batched_dot", "(", "target_resample_matrix", ",", "\n", "decoder_readout_outputs", ".", "dimshuffle", "(", "[", "1", ",", "0", ",", "2", "]", ")", ")", "\n", "resampled_readouts", "=", "resampled_representation", ".", "dimshuffle", "(", "[", "1", ",", "0", ",", "2", "]", ")", "\n", "readouts_chars", "=", "self", ".", "readout", ".", "readout_gru", "(", "target_prev_char_seq", ",", "target_prev_char_aux", ",", "resampled_readouts", ")", "\n", "\n", "# Compute the cost", "\n", "costs", "=", "self", ".", "readout", ".", "cost", "(", "readouts_chars", ",", "target_char_seq", ")", "\n", "\n", "for", "name", ",", "variable", "in", "list", "(", "glimpses", ".", "items", "(", ")", ")", "+", "list", "(", "states", ".", "items", "(", ")", ")", ":", "\n", "            ", "application_call", ".", "add_auxiliary_variable", "(", "\n", "variable", ".", "copy", "(", ")", ",", "name", "=", "name", ")", "\n", "\n", "# This variables can be used to initialize the initial states of the", "\n", "# next batch using the last states of the current batch.", "\n", "", "for", "name", "in", "self", ".", "_state_names", "+", "self", ".", "_glimpse_names", ":", "\n", "            ", "application_call", ".", "add_auxiliary_variable", "(", "\n", "results", "[", "name", "]", "[", "-", "1", "]", ".", "copy", "(", ")", ",", "name", "=", "name", "+", "\"_final_value\"", ")", "\n", "\n", "", "return", "costs", "\n", "\n"]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.SequenceGeneratorDCNMT.generate": [[475, 546], ["blocks.utils.dict_subset", "blocks.utils.dict_subset", "blocks.utils.dict_subset", "blocks.utils.dict_subset", "blocks.utils.dict_subset", "model.SequenceGeneratorDCNMT.transition.take_glimpses", "model.SequenceGeneratorDCNMT.readout.readout", "model.SequenceGeneratorDCNMT.readout.single_readout_gru", "model.SequenceGeneratorDCNMT.readout.emit", "model.SequenceGeneratorDCNMT.readout.cost", "theano.tensor.eq", "model.SequenceGeneratorDCNMT.readout.single_feedback", "model.SequenceGeneratorDCNMT.transition.compute_states", "range", "blocks.utils.dict_subset", "theano.tensor.eq", "model.SequenceGeneratorDCNMT.fork.apply", "list", "list", "list", "blocks.utils.dict_union", "blocks.utils.dict_union", "theano.tensor.eq", "blocks.utils.dict_union", "list", "model.SequenceGeneratorDCNMT.values", "range", "range", "str"], "methods", ["home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.Interpolator.single_readout_gru", "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.Decoder.cost", "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.Interpolator.single_feedback", "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.UpperIGRU.apply"], ["", "@", "recurrent", "\n", "def", "generate", "(", "self", ",", "outputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"A sequence generation step.\n\n        Parameters\n        ----------\n        outputs : :class:`~tensor.TensorVariable`\n            The outputs from the previous step.\n\n        Notes\n        -----\n        The contexts, previous states and glimpses are expected as keyword\n        arguments.\n\n        \"\"\"", "\n", "states", "=", "dict_subset", "(", "kwargs", ",", "self", ".", "_state_names", ")", "\n", "# masks in context are optional (e.g. `attended_mask`)", "\n", "contexts", "=", "dict_subset", "(", "kwargs", ",", "self", ".", "_context_names", ",", "must_have", "=", "False", ")", "\n", "glimpses", "=", "dict_subset", "(", "kwargs", ",", "self", ".", "_glimpse_names", ")", "\n", "feedback", "=", "dict_subset", "(", "kwargs", ",", "self", ".", "feedback_name", ")", "\n", "readout_feedback", "=", "dict_subset", "(", "kwargs", ",", "[", "'readout_feedback'", "]", ")", "[", "'readout_feedback'", "]", "\n", "batch_size", "=", "outputs", ".", "shape", "[", "0", "]", "\n", "igru_states", "=", "dict_subset", "(", "kwargs", ",", "self", ".", "igru_states_name", ")", "\n", "\n", "next_glimpses", "=", "self", ".", "transition", ".", "take_glimpses", "(", "\n", "as_dict", "=", "True", ",", "**", "dict_union", "(", "states", ",", "glimpses", ",", "contexts", ")", ")", "\n", "\n", "next_readouts", "=", "self", ".", "readout", ".", "readout", "(", "\n", "feedback", "=", "readout_feedback", ",", "\n", "**", "dict_union", "(", "states", ",", "next_glimpses", ",", "contexts", ")", ")", "\n", "\n", "next_char_aux", "=", "1", "-", "tensor", ".", "eq", "(", "outputs", ",", "0", ")", "-", "tensor", ".", "eq", "(", "outputs", ",", "self", ".", "trg_space_idx", ")", "\n", "next_igru_states", ",", "readout_chars", "=", "self", ".", "readout", ".", "single_readout_gru", "(", "outputs", ",", "next_char_aux", ",", "next_readouts", ",", "\n", "[", "igru_states", "[", "self", ".", "igru_states_name", "[", "i", "]", "]", "for", "i", "in", "range", "(", "self", ".", "igru_depth", ")", "]", ")", "\n", "next_outputs", "=", "self", ".", "readout", ".", "emit", "(", "readout_chars", ")", "\n", "next_costs", "=", "self", ".", "readout", ".", "cost", "(", "readout_chars", ",", "next_outputs", ")", "\n", "\n", "update_next", "=", "tensor", ".", "eq", "(", "next_outputs", ",", "self", ".", "trg_space_idx", ")", "\n", "next_char_mask", "=", "1", "-", "update_next", "\n", "update_next", "=", "update_next", "[", ":", ",", "None", "]", "\n", "next_readout_feedback", "=", "(", "1", "-", "update_next", ")", "*", "readout_feedback", "+", "update_next", "*", "feedback", "[", "self", ".", "feedback_name", "[", "-", "1", "]", "]", "\n", "\n", "next_feedback", "=", "self", ".", "readout", ".", "single_feedback", "(", "next_outputs", ",", "batch_size", ",", "next_char_mask", ",", "\n", "[", "feedback", "[", "self", ".", "feedback_name", "[", "i", "]", "]", "for", "i", "in", "range", "(", "self", ".", "trg_dgru_depth", ")", "]", ")", "\n", "\n", "next_inputs", "=", "(", "self", ".", "fork", ".", "apply", "(", "next_readout_feedback", ",", "as_dict", "=", "True", ")", "\n", "if", "self", ".", "fork", "else", "{", "'feedback'", ":", "next_readout_feedback", "}", ")", "\n", "next_states", "=", "self", ".", "transition", ".", "compute_states", "(", "\n", "as_list", "=", "True", ",", "\n", "**", "dict_union", "(", "next_inputs", ",", "states", ",", "next_glimpses", ",", "contexts", ")", ")", "\n", "\n", "next_states", "[", "0", "]", "=", "update_next", "*", "next_states", "[", "0", "]", "+", "(", "1", "-", "update_next", ")", "*", "states", "[", "'states'", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "transition_depth", ")", ":", "\n", "            ", "next_states", "[", "i", "]", "=", "update_next", "*", "next_states", "[", "i", "]", "+", "(", "1", "-", "update_next", ")", "*", "states", "[", "'states'", "+", "RECURRENTSTACK_SEPARATOR", "+", "str", "(", "i", ")", "]", "\n", "\n", "", "next_glimpses", "[", "'weights'", "]", "=", "update_next", "*", "next_glimpses", "[", "'weights'", "]", "+", "(", "1", "-", "update_next", ")", "*", "glimpses", "[", "'weights'", "]", "\n", "next_glimpses", "[", "'weighted_averages'", "]", "=", "update_next", "*", "next_glimpses", "[", "'weighted_averages'", "]", "+", "(", "1", "-", "update_next", ")", "*", "glimpses", "[", "'weighted_averages'", "]", "\n", "# combine all updates", "\n", "next_all", "=", "list", "(", "next_states", ")", "+", "[", "next_outputs", "]", "+", "list", "(", "next_glimpses", ".", "values", "(", ")", ")", "\n", "if", "self", ".", "trg_dgru_depth", ">", "1", ":", "\n", "            ", "next_all", "+=", "list", "(", "next_feedback", ")", "\n", "", "else", ":", "\n", "            ", "next_all", "+=", "[", "next_feedback", "]", "\n", "", "if", "self", ".", "igru_depth", ">", "1", ":", "\n", "            ", "next_all", "+=", "list", "(", "next_igru_states", ")", "\n", "", "else", ":", "\n", "            ", "next_all", "+=", "[", "next_igru_states", "]", "\n", "", "next_all", "+=", "[", "next_readout_feedback", "]", "+", "[", "next_costs", "]", "\n", "\n", "return", "(", "next_all", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.SequenceGeneratorDCNMT.generate_delegate": [[547, 550], ["None"], "methods", ["None"], ["", "@", "generate", ".", "delegate", "\n", "def", "generate_delegate", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "transition", ".", "apply", "\n", "\n"]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.SequenceGeneratorDCNMT.generate_outputs": [[551, 555], ["generate.property"], "methods", ["None"], ["", "@", "generate", ".", "property", "(", "'outputs'", ")", "\n", "def", "generate_outputs", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_state_names", "+", "[", "'outputs'", "]", "+", "self", ".", "_glimpse_names", "+", "self", ".", "feedback_name", "+", "self", ".", "igru_states_name", "+", "[", "'readout_feedback'", ",", "'cost'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.SequenceGeneratorDCNMT.generate_states": [[556, 560], ["generate.property"], "methods", ["None"], ["", "@", "generate", ".", "property", "(", "'states'", ")", "\n", "def", "generate_states", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_state_names", "+", "[", "'outputs'", "]", "+", "self", ".", "_glimpse_names", "+", "self", ".", "feedback_name", "+", "self", ".", "igru_states_name", "+", "[", "'readout_feedback'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.SequenceGeneratorDCNMT.get_dim": [[561, 567], ["super().get_dim", "model.SequenceGeneratorDCNMT.transition.get_dim", "model.SequenceGeneratorDCNMT.readout.get_dim"], "methods", ["home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.SequenceGeneratorDCNMT.get_dim", "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.SequenceGeneratorDCNMT.get_dim", "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.SequenceGeneratorDCNMT.get_dim"], ["", "def", "get_dim", "(", "self", ",", "name", ")", ":", "\n", "        ", "if", "name", "in", "(", "self", ".", "_state_names", "+", "self", ".", "_context_names", "+", "self", ".", "_glimpse_names", ")", ":", "\n", "            ", "return", "self", ".", "transition", ".", "get_dim", "(", "name", ")", "\n", "", "elif", "name", "==", "'outputs'", "or", "name", "in", "self", ".", "feedback_name", "or", "name", "==", "'readout_feedback'", "or", "name", "in", "self", ".", "igru_states_name", ":", "\n", "            ", "return", "self", ".", "readout", ".", "get_dim", "(", "'outputs'", ")", "\n", "", "return", "super", "(", "BaseSequenceGenerator", ",", "self", ")", ".", "get_dim", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.SequenceGeneratorDCNMT.initial_states": [[568, 595], ["model.SequenceGeneratorDCNMT.readout.initial_igru_outputs", "model.SequenceGeneratorDCNMT.readout.initial_outputs", "model.SequenceGeneratorDCNMT.readout.single_feedback", "dict", "dict.update", "dict.update", "feedback_dict.update", "model.SequenceGeneratorDCNMT.transition.initial_states", "range", "range"], "methods", ["home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.Interpolator.initial_igru_outputs", "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.Interpolator.single_feedback", "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.GRUInitialState.initial_states"], ["", "@", "application", "\n", "def", "initial_states", "(", "self", ",", "batch_size", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "# TODO: support dict of outputs for application methods", "\n", "# to simplify this code.", "\n", "        ", "igru_initial_states", "=", "self", ".", "readout", ".", "initial_igru_outputs", "(", "batch_size", ")", "\n", "if", "self", ".", "igru_depth", "==", "1", ":", "\n", "            ", "igru_initial_states_dict", "=", "{", "self", ".", "igru_states_name", "[", "0", "]", ":", "igru_initial_states", "}", "\n", "", "else", ":", "\n", "            ", "igru_initial_states_dict", "=", "{", "self", ".", "igru_states_name", "[", "i", "]", ":", "igru_initial_states", "[", "i", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "igru_depth", ")", "}", "\n", "\n", "", "initial_outputs", "=", "self", ".", "readout", ".", "initial_outputs", "(", "batch_size", ")", "\n", "feedback", "=", "self", ".", "readout", ".", "single_feedback", "(", "initial_outputs", ",", "batch_size", ")", "\n", "if", "self", ".", "trg_dgru_depth", "==", "1", ":", "\n", "            ", "feedback_dict", "=", "{", "self", ".", "feedback_name", "[", "0", "]", ":", "feedback", ",", "'readout_feedback'", ":", "feedback", "}", "\n", "", "else", ":", "\n", "            ", "feedback_dict", "=", "{", "'readout_feedback'", ":", "feedback", "[", "-", "1", "]", "}", "\n", "feedback_dict", ".", "update", "(", "{", "self", ".", "feedback_name", "[", "i", "]", ":", "feedback", "[", "i", "]", "for", "i", "in", "range", "(", "self", ".", "trg_dgru_depth", ")", "}", ")", "\n", "\n", "", "state_dict", "=", "dict", "(", "\n", "self", ".", "transition", ".", "initial_states", "(", "\n", "batch_size", ",", "as_dict", "=", "True", ",", "*", "args", ",", "**", "kwargs", ")", ",", "\n", "outputs", "=", "initial_outputs", ")", "\n", "state_dict", ".", "update", "(", "feedback_dict", ")", "\n", "state_dict", ".", "update", "(", "igru_initial_states_dict", ")", "\n", "return", "[", "state_dict", "[", "state_name", "]", "\n", "for", "state_name", "in", "self", ".", "generate", ".", "states", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.SequenceGeneratorDCNMT.initial_states_outputs": [[596, 599], ["initial_states.property"], "methods", ["None"], ["", "@", "initial_states", ".", "property", "(", "'outputs'", ")", "\n", "def", "initial_states_outputs", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "generate", ".", "states", "\n", "\n"]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.GRUInitialState.__init__": [[610, 617], ["blocks.bricks.recurrent.GatedRecurrent.__init__", "blocks.bricks.MLP", "model.GRUInitialState.children.append", "blocks.bricks.Tanh"], "methods", ["home.repos.pwc.inspect_result.SwordYork_DCNMT.None.stream._too_long.__init__"], ["def", "__init__", "(", "self", ",", "attended_dim", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "GRUInitialState", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "attended_dim", "=", "attended_dim", "\n", "self", ".", "initial_transformer", "=", "MLP", "(", "activations", "=", "[", "Tanh", "(", ")", "]", ",", "\n", "dims", "=", "[", "attended_dim", ",", "self", ".", "dim", "]", ",", "\n", "name", "=", "'state_initializer'", ")", "\n", "self", ".", "children", ".", "append", "(", "self", ".", "initial_transformer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.GRUInitialState.initial_states": [[618, 624], ["model.GRUInitialState.initial_transformer.apply"], "methods", ["home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.UpperIGRU.apply"], ["", "@", "application", "\n", "def", "initial_states", "(", "self", ",", "batch_size", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "attended", "=", "kwargs", "[", "'attended'", "]", "\n", "initial_state", "=", "self", ".", "initial_transformer", ".", "apply", "(", "\n", "attended", "[", "0", ",", ":", ",", "-", "self", ".", "attended_dim", ":", "]", ")", "\n", "return", "initial_state", "\n", "\n"]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.GRUInitialState._allocate": [[625, 633], ["model.GRUInitialState.parameters.append", "model.GRUInitialState.parameters.append", "range", "blocks.utils.shared_floatx_nans", "blocks.utils.shared_floatx_nans", "blocks.roles.add_role"], "methods", ["None"], ["", "def", "_allocate", "(", "self", ")", ":", "\n", "        ", "self", ".", "parameters", ".", "append", "(", "shared_floatx_nans", "(", "(", "self", ".", "dim", ",", "self", ".", "dim", ")", ",", "\n", "name", "=", "'state_to_state'", ")", ")", "\n", "self", ".", "parameters", ".", "append", "(", "shared_floatx_nans", "(", "(", "self", ".", "dim", ",", "2", "*", "self", ".", "dim", ")", ",", "\n", "name", "=", "'state_to_gates'", ")", ")", "\n", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "            ", "if", "self", ".", "parameters", "[", "i", "]", ":", "\n", "                ", "add_role", "(", "self", ".", "parameters", "[", "i", "]", ",", "WEIGHT", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.Decoder.__init__": [[638, 689], ["blocks.bricks.Initializable.__init__", "blocks.bricks.recurrent.RecurrentStack", "blocks.bricks.attention.SequenceContentAttention", "model.Interpolator", "model.SequenceGeneratorDCNMT", "blocks.bricks.sequence_generators.SoftmaxEmitter", "model.Decimator", "model.InitializableFeedforwardSequence", "blocks.bricks.parallel.Fork", "model.GRUInitialState", "blocks.bricks.recurrent.GatedRecurrent", "range", "blocks.bricks.Linear", "blocks.bricks.Tanh", "blocks.bricks.Tanh", "blocks.bricks.Identity", "str"], "methods", ["home.repos.pwc.inspect_result.SwordYork_DCNMT.None.stream._too_long.__init__"], ["def", "__init__", "(", "self", ",", "vocab_size", ",", "embedding_dim", ",", "dgru_state_dim", ",", "igru_state_dim", ",", "state_dim", ",", "\n", "representation_dim", ",", "transition_depth", ",", "trg_igru_depth", ",", "trg_dgru_depth", ",", "trg_space_idx", ",", "trg_bos", ",", "\n", "theano_seed", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Decoder", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "vocab_size", "=", "vocab_size", "\n", "self", ".", "embedding_dim", "=", "embedding_dim", "\n", "self", ".", "dgru_state_dim", "=", "dgru_state_dim", "\n", "self", ".", "igru_state_dim", "=", "igru_state_dim", "\n", "self", ".", "state_dim", "=", "state_dim", "\n", "self", ".", "trg_space_idx", "=", "trg_space_idx", "\n", "self", ".", "representation_dim", "=", "representation_dim", "\n", "self", ".", "theano_seed", "=", "theano_seed", "\n", "\n", "# Initialize gru with special initial state", "\n", "self", ".", "transition", "=", "RecurrentStack", "(", "\n", "[", "GRUInitialState", "(", "attended_dim", "=", "state_dim", ",", "dim", "=", "state_dim", ",", "activation", "=", "Tanh", "(", ")", ",", "name", "=", "'decoder_gru_withinit'", ")", "]", "+", "\n", "[", "GatedRecurrent", "(", "dim", "=", "state_dim", ",", "activation", "=", "Tanh", "(", ")", ",", "name", "=", "'decoder_gru'", "+", "str", "(", "i", ")", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "transition_depth", ")", "]", ",", "skip_connections", "=", "True", ")", "\n", "\n", "# Initialize the attention mechanism", "\n", "self", ".", "attention", "=", "SequenceContentAttention", "(", "\n", "state_names", "=", "self", ".", "transition", ".", "apply", ".", "states", ",", "\n", "attended_dim", "=", "representation_dim", ",", "\n", "match_dim", "=", "state_dim", ",", "name", "=", "\"attention\"", ")", "\n", "\n", "self", ".", "interpolator", "=", "Interpolator", "(", "\n", "vocab_size", "=", "vocab_size", ",", "\n", "embedding_dim", "=", "embedding_dim", ",", "\n", "igru_state_dim", "=", "igru_state_dim", ",", "\n", "igru_depth", "=", "trg_igru_depth", ",", "\n", "trg_dgru_depth", "=", "trg_dgru_depth", ",", "\n", "source_names", "=", "[", "'states'", ",", "'feedback'", ",", "self", ".", "attention", ".", "take_glimpses", ".", "outputs", "[", "0", "]", "]", ",", "\n", "readout_dim", "=", "self", ".", "vocab_size", ",", "\n", "emitter", "=", "SoftmaxEmitter", "(", "initial_output", "=", "trg_bos", ",", "theano_seed", "=", "theano_seed", ")", ",", "\n", "feedback_brick", "=", "Decimator", "(", "vocab_size", ",", "embedding_dim", ",", "self", ".", "dgru_state_dim", ",", "trg_dgru_depth", ")", ",", "\n", "post_merge", "=", "InitializableFeedforwardSequence", "(", "[", "Identity", "(", ")", ".", "apply", "]", ")", ",", "\n", "merged_dim", "=", "igru_state_dim", ")", "\n", "\n", "# Build sequence generator accordingly", "\n", "self", ".", "sequence_generator", "=", "SequenceGeneratorDCNMT", "(", "\n", "trg_space_idx", "=", "self", ".", "trg_space_idx", ",", "\n", "readout", "=", "self", ".", "interpolator", ",", "\n", "transition", "=", "self", ".", "transition", ",", "\n", "attention", "=", "self", ".", "attention", ",", "\n", "transition_depth", "=", "transition_depth", ",", "\n", "igru_depth", "=", "trg_igru_depth", ",", "\n", "trg_dgru_depth", "=", "trg_dgru_depth", ",", "\n", "fork", "=", "Fork", "(", "[", "name", "for", "name", "in", "self", ".", "transition", ".", "apply", ".", "sequences", "\n", "if", "name", "!=", "'mask'", "]", ",", "prototype", "=", "Linear", "(", ")", ")", "\n", ")", "\n", "self", ".", "children", "=", "[", "self", ".", "sequence_generator", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.Decoder.cost": [[690, 718], ["blocks.bricks.base.application", "model.Decoder.sequence_generator.cost_matrix_nmt"], "methods", ["home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.SequenceGeneratorDCNMT.cost_matrix_nmt"], ["", "@", "application", "(", "inputs", "=", "[", "'representation'", ",", "'source_word_mask'", ",", "'target_char_seq'", ",", "'target_sample_matrix'", ",", "\n", "'target_resample_matrix'", ",", "'target_char_aux'", ",", "'target_char_mask'", ",", "'target_word_mask'", ",", "\n", "'target_prev_char_seq'", ",", "'target_prev_char_aux'", "]", ",", "\n", "outputs", "=", "[", "'cost'", "]", ")", "\n", "def", "cost", "(", "self", ",", "representation", ",", "source_word_mask", ",", "target_char_seq", ",", "target_sample_matrix", ",", "\n", "target_resample_matrix", ",", "target_char_aux", ",", "target_char_mask", ",", "target_word_mask", ",", "\n", "target_prev_char_seq", ",", "target_prev_char_aux", ")", ":", "\n", "        ", "source_word_mask", "=", "source_word_mask", ".", "T", "\n", "target_char_seq", "=", "target_char_seq", ".", "T", "\n", "target_prev_char_seq", "=", "target_prev_char_seq", ".", "T", "\n", "target_char_mask", "=", "target_char_mask", ".", "T", "\n", "target_char_aux", "=", "target_char_aux", ".", "T", "\n", "target_prev_char_aux", "=", "target_prev_char_aux", ".", "T", "\n", "target_word_mask", "=", "target_word_mask", ".", "T", "\n", "\n", "# Get the cost matrix", "\n", "cost", "=", "self", ".", "sequence_generator", ".", "cost_matrix_nmt", "(", "**", "{", "\n", "'target_char_seq'", ":", "target_char_seq", ",", "\n", "'target_sample_matrix'", ":", "target_sample_matrix", ",", "\n", "'target_resample_matrix'", ":", "target_resample_matrix", ",", "\n", "'target_word_mask'", ":", "target_word_mask", ",", "\n", "'target_char_aux'", ":", "target_char_aux", ",", "\n", "'target_prev_char_seq'", ":", "target_prev_char_seq", ",", "\n", "'target_prev_char_aux'", ":", "target_prev_char_aux", ",", "\n", "'attended'", ":", "representation", ",", "\n", "'attended_mask'", ":", "source_word_mask", "}", ")", "\n", "\n", "return", "(", "cost", "*", "target_char_mask", ")", ".", "sum", "(", ")", "/", "target_char_mask", ".", "shape", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.Decoder.generate": [[719, 727], ["model.Decoder.sequence_generator.generate"], "methods", ["home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.Decoder.generate"], ["", "@", "application", "\n", "def", "generate", "(", "self", ",", "representation", ",", "attended_mask", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "sequence_generator", ".", "generate", "(", "\n", "n_steps", "=", "10", "*", "attended_mask", ".", "shape", "[", "1", "]", ",", "\n", "batch_size", "=", "attended_mask", ".", "shape", "[", "0", "]", ",", "\n", "attended", "=", "representation", ",", "\n", "attended_mask", "=", "attended_mask", ".", "T", ",", "\n", "**", "kwargs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.testing.main": [[20, 96], ["logger.info", "theano.tensor.lmatrix", "theano.tensor.tensor3", "theano.tensor.matrix", "theano.tensor.matrix", "theano.tensor.lmatrix", "theano.tensor.matrix", "theano.tensor.matrix", "theano.tensor.tensor3", "theano.tensor.matrix", "theano.tensor.tensor3", "theano.tensor.lmatrix", "theano.tensor.matrix", "logger.info", "model.BidirectionalEncoder", "model.Decoder", "model.BidirectionalEncoder.apply", "model.Decoder.cost", "logger.info", "blocks.model.Model", "logger.info", "logger.info", "blocks.main_loop.MainLoop", "blocks.main_loop.MainLoop._run_extensions", "extensions.append", "logger.info", "model.Decoder.generate", "blocks.model.Model", "logger.info", "extensions.append", "checkpoint.LoadNMT", "blocks.filter.VariableFilter", "blocks.graph.ComputationGraph", "sampling.BleuTester"], "function", ["home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.UpperIGRU.apply", "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.Decoder.cost", "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.Decoder.generate"], ["def", "main", "(", "config", ",", "test_stream", ")", ":", "\n", "# Create Theano variables", "\n", "    ", "logger", ".", "info", "(", "'Creating theano variables'", ")", "\n", "source_char_seq", "=", "tensor", ".", "lmatrix", "(", "'source_char_seq'", ")", "\n", "source_sample_matrix", "=", "tensor", ".", "tensor3", "(", "'source_sample_matrix'", ")", "\n", "source_char_aux", "=", "tensor", ".", "matrix", "(", "'source_char_aux'", ")", "\n", "source_word_mask", "=", "tensor", ".", "matrix", "(", "'source_word_mask'", ")", "\n", "target_char_seq", "=", "tensor", ".", "lmatrix", "(", "'target_char_seq'", ")", "\n", "target_char_aux", "=", "tensor", ".", "matrix", "(", "'target_char_aux'", ")", "\n", "target_char_mask", "=", "tensor", ".", "matrix", "(", "'target_char_mask'", ")", "\n", "target_sample_matrix", "=", "tensor", ".", "tensor3", "(", "'target_sample_matrix'", ")", "\n", "target_word_mask", "=", "tensor", ".", "matrix", "(", "'target_word_mask'", ")", "\n", "target_resample_matrix", "=", "tensor", ".", "tensor3", "(", "'target_resample_matrix'", ")", "\n", "target_prev_char_seq", "=", "tensor", ".", "lmatrix", "(", "'target_prev_char_seq'", ")", "\n", "target_prev_char_aux", "=", "tensor", ".", "matrix", "(", "'target_prev_char_aux'", ")", "\n", "\n", "target_bos_idx", "=", "test_stream", ".", "trg_bos", "\n", "target_space_idx", "=", "test_stream", ".", "space_idx", "[", "'target'", "]", "\n", "\n", "# Construct model", "\n", "logger", ".", "info", "(", "'Building RNN encoder-decoder'", ")", "\n", "\n", "encoder", "=", "BidirectionalEncoder", "(", "config", "[", "'src_vocab_size'", "]", ",", "config", "[", "'enc_embed'", "]", ",", "config", "[", "'src_dgru_nhids'", "]", ",", "\n", "config", "[", "'enc_nhids'", "]", ",", "config", "[", "'src_dgru_depth'", "]", ",", "config", "[", "'bidir_encoder_depth'", "]", ")", "\n", "\n", "decoder", "=", "Decoder", "(", "config", "[", "'trg_vocab_size'", "]", ",", "config", "[", "'dec_embed'", "]", ",", "config", "[", "'trg_dgru_nhids'", "]", ",", "config", "[", "'trg_igru_nhids'", "]", ",", "\n", "config", "[", "'dec_nhids'", "]", ",", "config", "[", "'enc_nhids'", "]", "*", "2", ",", "config", "[", "'transition_depth'", "]", ",", "config", "[", "'trg_igru_depth'", "]", ",", "\n", "config", "[", "'trg_dgru_depth'", "]", ",", "target_space_idx", ",", "target_bos_idx", ")", "\n", "\n", "\n", "representation", "=", "encoder", ".", "apply", "(", "source_char_seq", ",", "source_sample_matrix", ",", "source_char_aux", ",", "\n", "source_word_mask", ")", "\n", "cost", "=", "decoder", ".", "cost", "(", "representation", ",", "source_word_mask", ",", "target_char_seq", ",", "target_sample_matrix", ",", "\n", "target_resample_matrix", ",", "target_char_aux", ",", "target_char_mask", ",", "\n", "target_word_mask", ",", "target_prev_char_seq", ",", "target_prev_char_aux", ")", "\n", "\n", "# Set up training model", "\n", "logger", ".", "info", "(", "\"Building model\"", ")", "\n", "training_model", "=", "Model", "(", "cost", ")", "\n", "\n", "# Set extensions", "\n", "logger", ".", "info", "(", "\"Initializing extensions\"", ")", "\n", "# Extensions", "\n", "extensions", "=", "[", "]", "\n", "# Reload model if necessary", "\n", "if", "config", "[", "'reload'", "]", ":", "\n", "        ", "extensions", ".", "append", "(", "LoadNMT", "(", "config", "[", "'saveto'", "]", ")", ")", "\n", "\n", "# Set up beam search and sampling computation graphs if necessary", "\n", "", "if", "config", "[", "'bleu_script'", "]", "is", "not", "None", ":", "\n", "        ", "logger", ".", "info", "(", "\"Building sampling model\"", ")", "\n", "generated", "=", "decoder", ".", "generate", "(", "representation", ",", "source_word_mask", ")", "\n", "search_model", "=", "Model", "(", "generated", ")", "\n", "_", ",", "samples", "=", "VariableFilter", "(", "\n", "bricks", "=", "[", "decoder", ".", "sequence_generator", "]", ",", "name", "=", "\"outputs\"", ")", "(", "\n", "ComputationGraph", "(", "generated", "[", "config", "[", "'transition_depth'", "]", "]", ")", ")", "# generated[config['transition_depth']] is next_outputs", "\n", "\n", "logger", ".", "info", "(", "\"Building bleu tester\"", ")", "\n", "extensions", ".", "append", "(", "\n", "BleuTester", "(", "source_char_seq", ",", "source_sample_matrix", ",", "source_char_aux", ",", "\n", "source_word_mask", ",", "samples", "=", "samples", ",", "config", "=", "config", ",", "\n", "model", "=", "search_model", ",", "data_stream", "=", "test_stream", ",", "\n", "normalize", "=", "config", "[", "'normalized_bleu'", "]", ")", ")", "\n", "\n", "# Initialize main loop", "\n", "", "logger", ".", "info", "(", "\"Initializing main loop\"", ")", "\n", "main_loop", "=", "MainLoop", "(", "\n", "model", "=", "training_model", ",", "\n", "algorithm", "=", "None", ",", "\n", "data_stream", "=", "None", ",", "\n", "extensions", "=", "extensions", "\n", ")", "\n", "\n", "for", "extension", "in", "main_loop", ".", "extensions", ":", "\n", "        ", "extension", ".", "main_loop", "=", "main_loop", "\n", "", "main_loop", ".", "_run_extensions", "(", "'before_training'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.training.main": [[32, 175], ["logger.info", "theano.tensor.lmatrix", "theano.tensor.btensor3", "theano.tensor.bmatrix", "theano.tensor.bmatrix", "theano.tensor.lmatrix", "theano.tensor.bmatrix", "theano.tensor.bmatrix", "theano.tensor.btensor3", "theano.tensor.bmatrix", "theano.tensor.btensor3", "theano.tensor.lmatrix", "theano.tensor.bmatrix", "logger.info", "model.BidirectionalEncoder", "model.Decoder", "model.BidirectionalEncoder.apply", "model.Decoder.cost", "logger.info", "blocks.graph.ComputationGraph", "logger.info", "blocks.initialization.IsotropicGaussian", "blocks.initialization.Constant", "model.BidirectionalEncoder.push_initialization_config", "model.Decoder.push_initialization_config", "range", "range", "range", "range", "model.BidirectionalEncoder.initialize", "model.Decoder.initialize", "logger.info", "collections.Counter().most_common", "logger.info", "toolz.merge", "logger.info", "toolz.merge.items", "logger.info", "logger.info", "blocks.model.Model", "logger.info", "blocks.algorithms.GradientDescent", "logger.info", "blocks.monitoring.aggregation.mean", "blocks.monitoring.aggregation.mean", "sampling.CostCurve", "logger.info", "blocks.main_loop.MainLoop", "blocks.main_loop.MainLoop.run", "blocks.initialization.Orthogonal", "blocks.initialization.Orthogonal", "blocks.initialization.Orthogonal", "range", "blocks.initialization.Orthogonal", "blocks.initialization.Orthogonal", "logger.info", "blocks.select.Selector().get_parameters", "blocks.select.Selector().get_parameters", "logger.info", "blocks.extensions.Timing", "blocks.extensions.Printing", "blocks.extensions.FinishAfter", "checkpoint.CheckpointNMT", "logger.info", "model.Decoder.generate", "blocks.model.Model", "logger.info", "extensions.append", "logger.info", "extensions.append", "extensions.append", "blocks.initialization.Orthogonal", "param.get_value", "collections.Counter", "len", "len", "blocks.algorithms.CompositeRule", "blocks.filter.VariableFilter", "blocks.graph.ComputationGraph", "sampling.Sampler", "sampling.BleuValidator", "checkpoint.LoadNMT", "str", "blocks.select.Selector", "blocks.select.Selector", "str", "blocks.algorithms.StepClipping", "value.get_value", "eval"], "function", ["home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.UpperIGRU.apply", "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.Decoder.cost", "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.Decoder.generate"], ["def", "main", "(", "config", ",", "tr_stream", ",", "dev_stream", ")", ":", "\n", "# Create Theano variables", "\n", "    ", "logger", ".", "info", "(", "'Creating theano variables'", ")", "\n", "source_char_seq", "=", "tensor", ".", "lmatrix", "(", "'source_char_seq'", ")", "\n", "source_sample_matrix", "=", "tensor", ".", "btensor3", "(", "'source_sample_matrix'", ")", "\n", "source_char_aux", "=", "tensor", ".", "bmatrix", "(", "'source_char_aux'", ")", "\n", "source_word_mask", "=", "tensor", ".", "bmatrix", "(", "'source_word_mask'", ")", "\n", "target_char_seq", "=", "tensor", ".", "lmatrix", "(", "'target_char_seq'", ")", "\n", "target_char_aux", "=", "tensor", ".", "bmatrix", "(", "'target_char_aux'", ")", "\n", "target_char_mask", "=", "tensor", ".", "bmatrix", "(", "'target_char_mask'", ")", "\n", "target_sample_matrix", "=", "tensor", ".", "btensor3", "(", "'target_sample_matrix'", ")", "\n", "target_word_mask", "=", "tensor", ".", "bmatrix", "(", "'target_word_mask'", ")", "\n", "target_resample_matrix", "=", "tensor", ".", "btensor3", "(", "'target_resample_matrix'", ")", "\n", "target_prev_char_seq", "=", "tensor", ".", "lmatrix", "(", "'target_prev_char_seq'", ")", "\n", "target_prev_char_aux", "=", "tensor", ".", "bmatrix", "(", "'target_prev_char_aux'", ")", "\n", "target_bos_idx", "=", "tr_stream", ".", "trg_bos", "\n", "target_space_idx", "=", "tr_stream", ".", "space_idx", "[", "'target'", "]", "\n", "\n", "# Construct model", "\n", "logger", ".", "info", "(", "'Building RNN encoder-decoder'", ")", "\n", "\n", "encoder", "=", "BidirectionalEncoder", "(", "config", "[", "'src_vocab_size'", "]", ",", "config", "[", "'enc_embed'", "]", ",", "config", "[", "'src_dgru_nhids'", "]", ",", "\n", "config", "[", "'enc_nhids'", "]", ",", "config", "[", "'src_dgru_depth'", "]", ",", "config", "[", "'bidir_encoder_depth'", "]", ")", "\n", "\n", "decoder", "=", "Decoder", "(", "config", "[", "'trg_vocab_size'", "]", ",", "config", "[", "'dec_embed'", "]", ",", "config", "[", "'trg_dgru_nhids'", "]", ",", "config", "[", "'trg_igru_nhids'", "]", ",", "\n", "config", "[", "'dec_nhids'", "]", ",", "config", "[", "'enc_nhids'", "]", "*", "2", ",", "config", "[", "'transition_depth'", "]", ",", "config", "[", "'trg_igru_depth'", "]", ",", "\n", "config", "[", "'trg_dgru_depth'", "]", ",", "target_space_idx", ",", "target_bos_idx", ")", "\n", "\n", "representation", "=", "encoder", ".", "apply", "(", "source_char_seq", ",", "source_sample_matrix", ",", "source_char_aux", ",", "\n", "source_word_mask", ")", "\n", "cost", "=", "decoder", ".", "cost", "(", "representation", ",", "source_word_mask", ",", "target_char_seq", ",", "target_sample_matrix", ",", "\n", "target_resample_matrix", ",", "target_char_aux", ",", "target_char_mask", ",", "\n", "target_word_mask", ",", "target_prev_char_seq", ",", "target_prev_char_aux", ")", "\n", "\n", "logger", ".", "info", "(", "'Creating computational graph'", ")", "\n", "cg", "=", "ComputationGraph", "(", "cost", ")", "\n", "\n", "# Initialize model", "\n", "logger", ".", "info", "(", "'Initializing model'", ")", "\n", "encoder", ".", "weights_init", "=", "decoder", ".", "weights_init", "=", "IsotropicGaussian", "(", "\n", "config", "[", "'weight_scale'", "]", ")", "\n", "encoder", ".", "biases_init", "=", "decoder", ".", "biases_init", "=", "Constant", "(", "0", ")", "\n", "encoder", ".", "push_initialization_config", "(", ")", "\n", "decoder", ".", "push_initialization_config", "(", ")", "\n", "for", "layer_n", "in", "range", "(", "config", "[", "'src_dgru_depth'", "]", ")", ":", "\n", "        ", "encoder", ".", "decimator", ".", "dgru", ".", "transitions", "[", "layer_n", "]", ".", "weights_init", "=", "Orthogonal", "(", ")", "\n", "", "for", "layer_n", "in", "range", "(", "config", "[", "'bidir_encoder_depth'", "]", ")", ":", "\n", "        ", "encoder", ".", "children", "[", "1", "+", "layer_n", "]", ".", "prototype", ".", "recurrent", ".", "weights_init", "=", "Orthogonal", "(", ")", "\n", "", "if", "config", "[", "'trg_igru_depth'", "]", "==", "1", ":", "\n", "        ", "decoder", ".", "interpolator", ".", "igru", ".", "weights_init", "=", "Orthogonal", "(", ")", "\n", "", "else", ":", "\n", "        ", "for", "layer_n", "in", "range", "(", "config", "[", "'trg_igru_depth'", "]", ")", ":", "\n", "            ", "decoder", ".", "interpolator", ".", "igru", ".", "transitions", "[", "layer_n", "]", ".", "weights_init", "=", "Orthogonal", "(", ")", "\n", "", "", "for", "layer_n", "in", "range", "(", "config", "[", "'trg_dgru_depth'", "]", ")", ":", "\n", "        ", "decoder", ".", "interpolator", ".", "feedback_brick", ".", "dgru", ".", "transitions", "[", "layer_n", "]", ".", "weights_init", "=", "Orthogonal", "(", ")", "\n", "", "for", "layer_n", "in", "range", "(", "config", "[", "'transition_depth'", "]", ")", ":", "\n", "        ", "decoder", ".", "transition", ".", "transitions", "[", "layer_n", "]", ".", "weights_init", "=", "Orthogonal", "(", ")", "\n", "", "encoder", ".", "initialize", "(", ")", "\n", "decoder", ".", "initialize", "(", ")", "\n", "\n", "\n", "# Print shapes", "\n", "shapes", "=", "[", "param", ".", "get_value", "(", ")", ".", "shape", "for", "param", "in", "cg", ".", "parameters", "]", "\n", "logger", ".", "info", "(", "\"Parameter shapes: \"", ")", "\n", "for", "shape", ",", "count", "in", "Counter", "(", "shapes", ")", ".", "most_common", "(", ")", ":", "\n", "        ", "logger", ".", "info", "(", "'    {:15}: {}'", ".", "format", "(", "str", "(", "shape", ")", ",", "count", ")", ")", "\n", "", "logger", ".", "info", "(", "\"Total number of parameters: {}\"", ".", "format", "(", "len", "(", "shapes", ")", ")", ")", "\n", "\n", "# Print parameter names", "\n", "enc_dec_param_dict", "=", "merge", "(", "Selector", "(", "encoder", ")", ".", "get_parameters", "(", ")", ",", "\n", "Selector", "(", "decoder", ")", ".", "get_parameters", "(", ")", ")", "\n", "logger", ".", "info", "(", "\"Parameter names: \"", ")", "\n", "for", "name", ",", "value", "in", "enc_dec_param_dict", ".", "items", "(", ")", ":", "\n", "        ", "logger", ".", "info", "(", "'    {:15}: {}'", ".", "format", "(", "str", "(", "value", ".", "get_value", "(", ")", ".", "shape", ")", ",", "name", ")", ")", "\n", "", "logger", ".", "info", "(", "\"Total number of parameters: {}\"", "\n", ".", "format", "(", "len", "(", "enc_dec_param_dict", ")", ")", ")", "\n", "\n", "# Set up training model", "\n", "logger", ".", "info", "(", "\"Building model\"", ")", "\n", "training_model", "=", "Model", "(", "cost", ")", "\n", "# Set up training algorithm", "\n", "logger", ".", "info", "(", "\"Initializing training algorithm\"", ")", "\n", "algorithm", "=", "GradientDescent", "(", "\n", "cost", "=", "cost", ",", "parameters", "=", "cg", ".", "parameters", ",", "\n", "step_rule", "=", "CompositeRule", "(", "[", "StepClipping", "(", "config", "[", "'step_clipping'", "]", ")", ",", "\n", "eval", "(", "config", "[", "'step_rule'", "]", ")", "(", ")", "]", ")", "\n", ")", "\n", "\n", "# Set extensions", "\n", "logger", ".", "info", "(", "\"Initializing extensions\"", ")", "\n", "# Extensions", "\n", "gradient_norm", "=", "aggregation", ".", "mean", "(", "algorithm", ".", "total_gradient_norm", ")", "\n", "step_norm", "=", "aggregation", ".", "mean", "(", "algorithm", ".", "total_step_norm", ")", "\n", "train_monitor", "=", "CostCurve", "(", "[", "cost", ",", "gradient_norm", ",", "step_norm", "]", ",", "config", "=", "config", ",", "after_batch", "=", "True", ",", "\n", "before_first_epoch", "=", "True", ",", "prefix", "=", "'tra'", ")", "\n", "extensions", "=", "[", "\n", "train_monitor", ",", "Timing", "(", ")", ",", "\n", "Printing", "(", "every_n_batches", "=", "config", "[", "'print_freq'", "]", ")", ",", "\n", "FinishAfter", "(", "after_n_batches", "=", "config", "[", "'finish_after'", "]", ")", ",", "\n", "CheckpointNMT", "(", "config", "[", "'saveto'", "]", ",", "every_n_batches", "=", "config", "[", "'save_freq'", "]", ")", "]", "\n", "\n", "# Set up beam search and sampling computation graphs if necessary", "\n", "if", "config", "[", "'hook_samples'", "]", ">=", "1", "or", "config", "[", "'bleu_script'", "]", "is", "not", "None", ":", "\n", "        ", "logger", ".", "info", "(", "\"Building sampling model\"", ")", "\n", "generated", "=", "decoder", ".", "generate", "(", "representation", ",", "source_word_mask", ")", "\n", "search_model", "=", "Model", "(", "generated", ")", "\n", "_", ",", "samples", "=", "VariableFilter", "(", "\n", "bricks", "=", "[", "decoder", ".", "sequence_generator", "]", ",", "name", "=", "\"outputs\"", ")", "(", "\n", "ComputationGraph", "(", "generated", "[", "config", "[", "'transition_depth'", "]", "]", ")", ")", "# generated[transition_depth] is next_outputs", "\n", "\n", "# Add sampling", "\n", "", "if", "config", "[", "'hook_samples'", "]", ">=", "1", ":", "\n", "        ", "logger", ".", "info", "(", "\"Building sampler\"", ")", "\n", "extensions", ".", "append", "(", "\n", "Sampler", "(", "model", "=", "search_model", ",", "data_stream", "=", "tr_stream", ",", "\n", "hook_samples", "=", "config", "[", "'hook_samples'", "]", ",", "transition_depth", "=", "config", "[", "'transition_depth'", "]", ",", "\n", "every_n_batches", "=", "config", "[", "'sampling_freq'", "]", ",", "src_vocab_size", "=", "config", "[", "'src_vocab_size'", "]", ")", ")", "\n", "\n", "# Add early stopping based on bleu", "\n", "", "if", "config", "[", "'bleu_script'", "]", "is", "not", "None", ":", "\n", "        ", "logger", ".", "info", "(", "\"Building bleu validator\"", ")", "\n", "extensions", ".", "append", "(", "\n", "BleuValidator", "(", "source_char_seq", ",", "source_sample_matrix", ",", "source_char_aux", ",", "\n", "source_word_mask", ",", "samples", "=", "samples", ",", "config", "=", "config", ",", "\n", "model", "=", "search_model", ",", "data_stream", "=", "dev_stream", ",", "\n", "normalize", "=", "config", "[", "'normalized_bleu'", "]", ",", "\n", "every_n_batches", "=", "config", "[", "'bleu_val_freq'", "]", ")", ")", "\n", "\n", "# Reload model if necessary", "\n", "", "if", "config", "[", "'reload'", "]", ":", "\n", "        ", "extensions", ".", "append", "(", "LoadNMT", "(", "config", "[", "'saveto'", "]", ")", ")", "\n", "\n", "# Initialize main loop", "\n", "", "logger", ".", "info", "(", "\"Initializing main loop\"", ")", "\n", "main_loop", "=", "MainLoop", "(", "\n", "model", "=", "training_model", ",", "\n", "algorithm", "=", "algorithm", ",", "\n", "data_stream", "=", "tr_stream", ",", "\n", "extensions", "=", "extensions", "\n", ")", "\n", "\n", "# Train!", "\n", "main_loop", ".", "run", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.checkpoint.SaveLoadUtils.path_to_folder": [[20, 23], ["None"], "methods", ["None"], ["@", "property", "\n", "def", "path_to_folder", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "folder", "\n", "\n"]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.checkpoint.SaveLoadUtils.path_to_parameters": [[24, 27], ["os.path.join"], "methods", ["None"], ["", "@", "property", "\n", "def", "path_to_parameters", "(", "self", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "self", ".", "folder", ",", "'params.npz'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.checkpoint.SaveLoadUtils.path_to_iteration_state": [[28, 31], ["os.path.join"], "methods", ["None"], ["", "@", "property", "\n", "def", "path_to_iteration_state", "(", "self", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "self", ".", "folder", ",", "'iterations_state.pkl'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.checkpoint.SaveLoadUtils.path_to_log": [[32, 35], ["os.path.join"], "methods", ["None"], ["", "@", "property", "\n", "def", "path_to_log", "(", "self", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "self", ".", "folder", ",", "'log'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.checkpoint.SaveLoadUtils.load_parameter_values": [[36, 46], ["contextlib.closing", "source.items", "numpy.load", "name.replace", "name.replace.startswith"], "methods", ["None"], ["", "def", "load_parameter_values", "(", "self", ",", "path", ")", ":", "\n", "        ", "with", "closing", "(", "numpy", ".", "load", "(", "path", ")", ")", "as", "source", ":", "\n", "            ", "param_values", "=", "{", "}", "\n", "for", "name", ",", "value", "in", "source", ".", "items", "(", ")", ":", "\n", "                ", "if", "name", "!=", "'pkl'", ":", "\n", "                    ", "name_", "=", "name", ".", "replace", "(", "BRICK_DELIMITER", ",", "'/'", ")", "\n", "if", "not", "name_", ".", "startswith", "(", "'/'", ")", ":", "\n", "                        ", "name_", "=", "'/'", "+", "name_", "\n", "", "param_values", "[", "name_", "]", "=", "value", "\n", "", "", "", "return", "param_values", "\n", "\n"]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.checkpoint.SaveLoadUtils.save_parameter_values": [[47, 51], ["numpy.savez", "name.replace", "param_values.items"], "methods", ["None"], ["", "def", "save_parameter_values", "(", "self", ",", "param_values", ",", "path", ")", ":", "\n", "        ", "param_values", "=", "{", "name", ".", "replace", "(", "\"/\"", ",", "BRICK_DELIMITER", ")", ":", "param", "\n", "for", "name", ",", "param", "in", "param_values", ".", "items", "(", ")", "}", "\n", "numpy", ".", "savez", "(", "path", ",", "**", "param_values", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.checkpoint.CheckpointNMT.__init__": [[60, 64], ["kwargs.setdefault", "blocks.extensions.SimpleExtension.__init__"], "methods", ["home.repos.pwc.inspect_result.SwordYork_DCNMT.None.stream._too_long.__init__"], ["def", "__init__", "(", "self", ",", "saveto", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "folder", "=", "saveto", "\n", "kwargs", ".", "setdefault", "(", "\"after_training\"", ",", "True", ")", "\n", "super", "(", "CheckpointNMT", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.checkpoint.CheckpointNMT.dump_parameters": [[65, 69], ["main_loop.model.get_parameter_values", "checkpoint.CheckpointNMT.save_parameter_values"], "methods", ["home.repos.pwc.inspect_result.SwordYork_DCNMT.None.checkpoint.SaveLoadUtils.save_parameter_values"], ["", "def", "dump_parameters", "(", "self", ",", "main_loop", ")", ":", "\n", "        ", "params_to_save", "=", "main_loop", ".", "model", ".", "get_parameter_values", "(", ")", "\n", "self", ".", "save_parameter_values", "(", "params_to_save", ",", "\n", "self", ".", "path_to_parameters", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.checkpoint.CheckpointNMT.dump_iteration_state": [[70, 72], ["blocks.serialization.secure_dump"], "methods", ["None"], ["", "def", "dump_iteration_state", "(", "self", ",", "main_loop", ")", ":", "\n", "        ", "secure_dump", "(", "main_loop", ".", "iteration_state", ",", "self", ".", "path_to_iteration_state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.checkpoint.CheckpointNMT.dump_log": [[73, 75], ["blocks.serialization.secure_dump"], "methods", ["None"], ["", "def", "dump_log", "(", "self", ",", "main_loop", ")", ":", "\n", "        ", "secure_dump", "(", "main_loop", ".", "log", ",", "self", ".", "path_to_log", ",", "cPickle", ".", "dump", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.checkpoint.CheckpointNMT.dump": [[76, 89], ["print", "logger.info", "time.time", "logger.info", "checkpoint.CheckpointNMT.dump_parameters", "logger.info", "checkpoint.CheckpointNMT.dump_iteration_state", "logger.info", "checkpoint.CheckpointNMT.dump_log", "logger.info", "os.path.exists", "os.mkdir", "time.time"], "methods", ["home.repos.pwc.inspect_result.SwordYork_DCNMT.None.checkpoint.CheckpointNMT.dump_parameters", "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.checkpoint.CheckpointNMT.dump_iteration_state", "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.checkpoint.CheckpointNMT.dump_log"], ["", "def", "dump", "(", "self", ",", "main_loop", ")", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "path_to_folder", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "self", ".", "path_to_folder", ")", "\n", "", "print", "(", "\"\"", ")", "\n", "logger", ".", "info", "(", "\" Saving model\"", ")", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "info", "(", "\" ...saving parameters\"", ")", "\n", "self", ".", "dump_parameters", "(", "main_loop", ")", "\n", "logger", ".", "info", "(", "\" ...saving iteration state\"", ")", "\n", "self", ".", "dump_iteration_state", "(", "main_loop", ")", "\n", "logger", ".", "info", "(", "\" ...saving log\"", ")", "\n", "self", ".", "dump_log", "(", "main_loop", ")", "\n", "logger", ".", "info", "(", "\" Model saved, took {} seconds.\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.checkpoint.CheckpointNMT.do": [[90, 100], ["checkpoint.CheckpointNMT.dump", "checkpoint.CheckpointNMT.main_loop.log.current_row.get"], "methods", ["home.repos.pwc.inspect_result.SwordYork_DCNMT.None.checkpoint.CheckpointNMT.dump"], ["", "def", "do", "(", "self", ",", "callback_name", ",", "*", "args", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "self", ".", "dump", "(", "self", ".", "main_loop", ")", "\n", "", "except", "Exception", ":", "\n", "            ", "raise", "\n", "", "finally", ":", "\n", "            ", "already_saved_to", "=", "self", ".", "main_loop", ".", "log", ".", "current_row", ".", "get", "(", "SAVED_TO", ",", "(", ")", ")", "\n", "self", ".", "main_loop", ".", "log", ".", "current_row", "[", "SAVED_TO", "]", "=", "(", "already_saved_to", "+", "\n", "(", "self", ".", "path_to_folder", "+", "\n", "'params.npz'", ",", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.checkpoint.LoadNMT.__init__": [[105, 108], ["blocks.extensions.TrainingExtension.__init__"], "methods", ["home.repos.pwc.inspect_result.SwordYork_DCNMT.None.stream._too_long.__init__"], ["def", "__init__", "(", "self", ",", "saveto", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "folder", "=", "saveto", "\n", "super", "(", "LoadNMT", ",", "self", ")", ".", "__init__", "(", "saveto", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.checkpoint.LoadNMT.before_training": [[109, 120], ["logger.info", "os.path.exists", "logger.info", "checkpoint.LoadNMT.load_to", "blocks.utils.reraise_as"], "methods", ["home.repos.pwc.inspect_result.SwordYork_DCNMT.None.checkpoint.LoadNMT.load_to"], ["", "def", "before_training", "(", "self", ")", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "path_to_folder", ")", ":", "\n", "            ", "logger", ".", "info", "(", "\"No dump found\"", ")", "\n", "return", "\n", "", "logger", ".", "info", "(", "\"Loading the state from {} into the main loop\"", "\n", ".", "format", "(", "self", ".", "path_to_folder", ")", ")", "\n", "try", ":", "\n", "            ", "self", ".", "load_to", "(", "self", ".", "main_loop", ")", "\n", "self", ".", "main_loop", ".", "log", ".", "current_row", "[", "LOADED_FROM", "]", "=", "self", ".", "path_to_folder", "\n", "", "except", "Exception", ":", "\n", "            ", "reraise_as", "(", "\"Failed to load the state\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.checkpoint.LoadNMT.load_parameters": [[121, 123], ["checkpoint.LoadNMT.load_parameter_values"], "methods", ["home.repos.pwc.inspect_result.SwordYork_DCNMT.None.checkpoint.SaveLoadUtils.load_parameter_values"], ["", "", "def", "load_parameters", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "load_parameter_values", "(", "self", ".", "path_to_parameters", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.checkpoint.LoadNMT.load_iteration_state": [[124, 127], ["open", "blocks.serialization.load"], "methods", ["None"], ["", "def", "load_iteration_state", "(", "self", ")", ":", "\n", "        ", "with", "open", "(", "self", ".", "path_to_iteration_state", ",", "\"rb\"", ")", "as", "source", ":", "\n", "            ", "return", "load", "(", "source", ",", "use_cpickle", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.checkpoint.LoadNMT.load_log": [[128, 131], ["open", "six.moves.cPickle.load"], "methods", ["None"], ["", "", "def", "load_log", "(", "self", ")", ":", "\n", "        ", "with", "open", "(", "self", ".", "path_to_log", ",", "\"rb\"", ")", "as", "source", ":", "\n", "            ", "return", "cPickle", ".", "load", "(", "source", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.checkpoint.LoadNMT.load_to": [[132, 172], ["logger.info", "logger.info", "checkpoint.LoadNMT.load_parameters", "main_loop.model.get_parameter_dict", "main_loop.model.get_parameter_dict.keys", "logger.info", "logger.info", "checkpoint.LoadNMT.load_iteration_state", "logger.info", "checkpoint.LoadNMT.load_log", "set", "set", "logger.error", "logger.error", "logger.error", "main_loop.model.get_parameter_dict.keys", "checkpoint.LoadNMT.keys", "params_this[].set_value", "logger.info", "logger.warning", "logger.warning", "len", "len", "str", "str", "str", "params_this[].get_value", "str", "params_this[].get_value"], "methods", ["home.repos.pwc.inspect_result.SwordYork_DCNMT.None.checkpoint.LoadNMT.load_parameters", "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.checkpoint.LoadNMT.load_iteration_state", "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.checkpoint.LoadNMT.load_log"], ["", "", "def", "load_to", "(", "self", ",", "main_loop", ")", ":", "\n", "        ", "\"\"\"Loads the dump from the root folder into the main loop.\"\"\"", "\n", "logger", ".", "info", "(", "\" Reloading model\"", ")", "\n", "try", ":", "\n", "            ", "logger", ".", "info", "(", "\" ...loading model parameters\"", ")", "\n", "params_all", "=", "self", ".", "load_parameters", "(", ")", "\n", "params_this", "=", "main_loop", ".", "model", ".", "get_parameter_dict", "(", ")", "\n", "missing", "=", "set", "(", "params_this", ".", "keys", "(", ")", ")", "-", "set", "(", "params_all", ".", "keys", "(", ")", ")", "\n", "for", "pname", "in", "params_this", ".", "keys", "(", ")", ":", "\n", "                ", "if", "pname", "in", "params_all", ":", "\n", "                    ", "val", "=", "params_all", "[", "pname", "]", "\n", "if", "params_this", "[", "pname", "]", ".", "get_value", "(", ")", ".", "shape", "!=", "val", ".", "shape", ":", "\n", "                        ", "logger", ".", "warning", "(", "\n", "\" Dimension mismatch {}-{} for {}\"", "\n", ".", "format", "(", "params_this", "[", "pname", "]", ".", "get_value", "(", ")", ".", "shape", ",", "\n", "val", ".", "shape", ",", "pname", ")", ")", "\n", "\n", "", "params_this", "[", "pname", "]", ".", "set_value", "(", "val", ")", "\n", "logger", ".", "info", "(", "\" Loaded to CG {:15}: {}\"", "\n", ".", "format", "(", "str", "(", "val", ".", "shape", ")", ",", "pname", ")", ")", "\n", "", "else", ":", "\n", "                    ", "logger", ".", "warning", "(", "\n", "\" Parameter does not exist: {}\"", ".", "format", "(", "pname", ")", ")", "\n", "", "", "logger", ".", "info", "(", "\n", "\" Number of parameters loaded for computation graph: {}\"", "\n", ".", "format", "(", "len", "(", "params_this", ")", "-", "len", "(", "missing", ")", ")", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "logger", ".", "error", "(", "\" Error {0}\"", ".", "format", "(", "str", "(", "e", ")", ")", ")", "\n", "\n", "", "try", ":", "\n", "            ", "logger", ".", "info", "(", "\" Loading iteration state...\"", ")", "\n", "main_loop", ".", "iteration_state", "=", "self", ".", "load_iteration_state", "(", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "logger", ".", "error", "(", "\" Error {0}\"", ".", "format", "(", "str", "(", "e", ")", ")", ")", "\n", "\n", "", "try", ":", "\n", "            ", "logger", ".", "info", "(", "\" Loading log...\"", ")", "\n", "main_loop", ".", "log", "=", "self", ".", "load_log", "(", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "logger", ".", "error", "(", "\" Error {0}\"", ".", "format", "(", "str", "(", "e", ")", ")", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.sampling.SamplingBase._get_attr_rec": [[23, 26], ["hasattr", "sampling.SamplingBase._get_attr_rec", "getattr"], "methods", ["home.repos.pwc.inspect_result.SwordYork_DCNMT.None.sampling.SamplingBase._get_attr_rec"], ["def", "_get_attr_rec", "(", "self", ",", "obj", ",", "attr", ")", ":", "\n", "        ", "return", "self", ".", "_get_attr_rec", "(", "getattr", "(", "obj", ",", "attr", ")", ",", "attr", ")", "if", "hasattr", "(", "obj", ",", "attr", ")", "else", "obj", "\n", "\n"]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.sampling.SamplingBase._get_true_length": [[27, 32], ["seq.tolist().index", "len", "seq.tolist"], "methods", ["None"], ["", "def", "_get_true_length", "(", "self", ",", "seq", ",", "vocab", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "return", "seq", ".", "tolist", "(", ")", ".", "index", "(", "vocab", "[", "'</S>'", "]", ")", "+", "1", "\n", "", "except", "ValueError", ":", "\n", "            ", "return", "len", "(", "seq", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.sampling.SamplingBase._oov_to_unk": [[33, 35], ["None"], "methods", ["None"], ["", "", "def", "_oov_to_unk", "(", "self", ",", "seq", ",", "vocab_size", ",", "unk_idx", ")", ":", "\n", "        ", "return", "[", "x", "if", "x", "<", "vocab_size", "else", "unk_idx", "for", "x", "in", "seq", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.sampling.SamplingBase._idx_to_word": [[36, 38], ["ivocab.get"], "methods", ["None"], ["", "def", "_idx_to_word", "(", "self", ",", "seq", ",", "ivocab", ")", ":", "\n", "        ", "return", "\"\"", ".", "join", "(", "[", "ivocab", ".", "get", "(", "idx", ",", "\"<UNK>\"", ")", "for", "idx", "in", "seq", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.sampling.SamplingBase.build_input_dict": [[39, 57], ["list().count", "numpy.zeros", "numpy.ones", "numpy.ones", "sampling.SamplingBase._get_true_length", "list", "range", "numpy.nonzero"], "methods", ["home.repos.pwc.inspect_result.SwordYork_DCNMT.None.sampling.SamplingBase._get_true_length"], ["", "def", "build_input_dict", "(", "self", ",", "input_", ",", "src_vocab", ")", ":", "\n", "        ", "input_length", "=", "self", ".", "_get_true_length", "(", "input_", ",", "src_vocab", ")", "+", "1", "\n", "input_", "=", "input_", "[", ":", "input_length", "]", "\n", "total_word", "=", "list", "(", "input_", ")", ".", "count", "(", "src_vocab", "[", "' '", "]", ")", "\n", "\n", "source_sample_matrix", "=", "numpy", ".", "zeros", "(", "(", "total_word", ",", "input_length", ")", ",", "dtype", "=", "'int8'", ")", "\n", "source_sample_matrix", "[", "range", "(", "total_word", ")", ",", "numpy", ".", "nonzero", "(", "input_", "==", "src_vocab", "[", "' '", "]", ")", "[", "0", "]", "-", "1", "]", "=", "1", "\n", "\n", "source_word_mask", "=", "numpy", ".", "ones", "(", "total_word", ",", "dtype", "=", "'int8'", ")", "\n", "\n", "source_char_aux", "=", "numpy", ".", "ones", "(", "input_length", ",", "dtype", "=", "'int8'", ")", "\n", "source_char_aux", "[", "input_", "==", "src_vocab", "[", "' '", "]", "]", "=", "0", "\n", "\n", "input_dict", "=", "{", "'source_sample_matrix'", ":", "source_sample_matrix", "[", "None", ",", ":", "]", ",", "\n", "'source_char_aux'", ":", "source_char_aux", "[", "None", ",", ":", "]", ",", "\n", "'source_char_seq'", ":", "input_", "[", "None", ",", ":", "]", ",", "\n", "'source_word_mask'", ":", "source_word_mask", "[", "None", ",", ":", "]", "}", "\n", "return", "input_length", ",", "input_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.sampling.SamplingBase.build_input_dict_tile": [[58, 77], ["list().count", "numpy.zeros", "numpy.ones", "numpy.ones", "sampling.SamplingBase._get_true_length", "numpy.tile", "numpy.tile", "numpy.tile", "numpy.tile", "list", "range", "numpy.nonzero"], "methods", ["home.repos.pwc.inspect_result.SwordYork_DCNMT.None.sampling.SamplingBase._get_true_length"], ["", "def", "build_input_dict_tile", "(", "self", ",", "input_", ",", "src_vocab", ",", "beam_size", ")", ":", "\n", "        ", "input_length", "=", "self", ".", "_get_true_length", "(", "input_", ",", "src_vocab", ")", "+", "1", "\n", "input_", "=", "input_", "[", ":", "input_length", "]", "\n", "total_word", "=", "list", "(", "input_", ")", ".", "count", "(", "src_vocab", "[", "' '", "]", ")", "\n", "\n", "source_sample_matrix", "=", "numpy", ".", "zeros", "(", "(", "total_word", ",", "input_length", ")", ",", "dtype", "=", "'int8'", ")", "\n", "source_sample_matrix", "[", "range", "(", "total_word", ")", ",", "numpy", ".", "nonzero", "(", "input_", "==", "src_vocab", "[", "' '", "]", ")", "[", "0", "]", "-", "1", "]", "=", "1", "\n", "\n", "source_word_mask", "=", "numpy", ".", "ones", "(", "total_word", ",", "dtype", "=", "'int8'", ")", "\n", "\n", "source_char_aux", "=", "numpy", ".", "ones", "(", "input_length", ",", "dtype", "=", "'int8'", ")", "\n", "source_char_aux", "[", "input_", "==", "src_vocab", "[", "' '", "]", "]", "=", "0", "\n", "\n", "input_dict", "=", "{", "'source_sample_matrix'", ":", "numpy", ".", "tile", "(", "source_sample_matrix", ",", "(", "beam_size", ",", "1", ",", "1", ")", ")", ",", "\n", "'source_word_mask'", ":", "numpy", ".", "tile", "(", "source_word_mask", ",", "(", "beam_size", ",", "1", ")", ")", ",", "\n", "'source_char_aux'", ":", "numpy", ".", "tile", "(", "source_char_aux", ",", "(", "beam_size", ",", "1", ")", ")", ",", "\n", "'source_char_seq'", ":", "numpy", ".", "tile", "(", "input_", ",", "(", "beam_size", ",", "1", ")", ")", "}", "\n", "\n", "return", "input_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.sampling.CostCurve.__init__": [[82, 98], ["blocks.extensions.monitoring.TrainingDataMonitoring.__init__", "os.path.exists", "os.makedirs", "numpy.load", "sampling.CostCurve.cost_curve[].tolist", "logger.info", "os.path.join", "logger.info"], "methods", ["home.repos.pwc.inspect_result.SwordYork_DCNMT.None.stream._too_long.__init__"], ["def", "__init__", "(", "self", ",", "variables", ",", "config", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "CostCurve", ",", "self", ")", ".", "__init__", "(", "variables", ",", "**", "kwargs", ")", "\n", "self", ".", "cost_curve", "=", "[", "]", "\n", "self", ".", "config", "=", "config", "\n", "# Create saving directory if it does not exist", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "config", "[", "'saveto'", "]", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "config", "[", "'saveto'", "]", ")", "\n", "\n", "", "if", "self", ".", "config", "[", "'reload'", "]", ":", "\n", "            ", "try", ":", "\n", "                ", "self", ".", "cost_curve", "=", "numpy", ".", "load", "(", "os", ".", "path", ".", "join", "(", "self", ".", "config", "[", "'saveto'", "]", ",", "\n", "'cost_curve.npz'", ")", ")", "\n", "self", ".", "cost_curve", "=", "self", ".", "cost_curve", "[", "'cost_curves'", "]", ".", "tolist", "(", ")", "\n", "logger", ".", "info", "(", "\"Cost Curve Reloaded\"", ")", "\n", "", "except", ":", "\n", "                ", "logger", ".", "info", "(", "\"Cost Curve not Found\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.sampling.CostCurve.do": [[99, 156], ["sampling.CostCurve.parse_args", "sampling.CostCurve.main_loop.algorithm.add_updates", "sampling.CostCurve.main_loop.algorithm.add_updates", "sampling.CostCurve._variables.initialize_aggregators", "sampling.CostCurve._required_for_non_variables.initialize_aggregators", "sampling.CostCurve._non_variables.initialize_quantities", "sampling.CostCurve._variables.get_aggregated_values", "curr_cost[].tolist", "sampling.CostCurve.cost_curve.append", "sampling.CostCurve.add_records", "sampling.CostCurve._variables.initialize_aggregators", "sampling.CostCurve.add_records", "sampling.CostCurve._non_variables.initialize_quantities", "sampling.CostCurve._non_variables.aggregate_quantities", "sampling.CostCurve._required_for_non_variables.initialize_aggregators", "numpy.savez", "sampling.CostCurve._variables.get_aggregated_values().items", "sampling.CostCurve._non_variables.get_aggregated_values().items", "list", "os.path.join", "sampling.CostCurve._required_for_non_variables.get_aggregated_values().values", "sampling.CostCurve._variables.get_aggregated_values", "sampling.CostCurve._non_variables.get_aggregated_values", "sampling.CostCurve._required_for_non_variables.get_aggregated_values"], "methods", ["None"], ["", "", "", "def", "do", "(", "self", ",", "callback_name", ",", "*", "args", ")", ":", "\n", "        ", "\"\"\"Initializes the buffer or commits the values to the log.\n        What this method does depends on from what callback it is called\n        and with which arguments.  When called within `before_training`, it\n        initializes the aggregation buffer and instructs the training\n        algorithm what additional computations should be carried at each\n        step by adding corresponding updates to it. In most_other cases it\n        writes aggregated values of the monitored variables to the log. An\n        exception is when an argument `just_aggregate` is given: in this\n        cases it updates the values of monitored non-Theano quantities, but\n        does not write anything to the log.\n        \"\"\"", "\n", "data", ",", "args", "=", "self", ".", "parse_args", "(", "callback_name", ",", "args", ")", "\n", "if", "callback_name", "==", "'before_training'", ":", "\n", "            ", "self", ".", "main_loop", ".", "algorithm", ".", "add_updates", "(", "\n", "self", ".", "_variables", ".", "accumulation_updates", ")", "\n", "self", ".", "main_loop", ".", "algorithm", ".", "add_updates", "(", "\n", "self", ".", "_required_for_non_variables", ".", "accumulation_updates", ")", "\n", "self", ".", "_variables", ".", "initialize_aggregators", "(", ")", "\n", "self", ".", "_required_for_non_variables", ".", "initialize_aggregators", "(", ")", "\n", "self", ".", "_non_variables", ".", "initialize_quantities", "(", ")", "\n", "", "else", ":", "\n", "# When called first time at any iterations, update", "\n", "# monitored non-Theano quantities", "\n", "            ", "if", "(", "self", ".", "main_loop", ".", "status", "[", "'iterations_done'", "]", ">", "\n", "self", ".", "_last_time_called", ")", ":", "\n", "                ", "self", ".", "_non_variables", ".", "aggregate_quantities", "(", "\n", "list", "(", "self", ".", "_required_for_non_variables", "\n", ".", "get_aggregated_values", "(", ")", ".", "values", "(", ")", ")", ")", "\n", "self", ".", "_required_for_non_variables", ".", "initialize_aggregators", "(", ")", "\n", "self", ".", "_last_time_called", "=", "(", "\n", "self", ".", "main_loop", ".", "status", "[", "'iterations_done'", "]", ")", "\n", "# If only called to update non-Theano quantities,", "\n", "# do just that", "\n", "", "if", "args", "==", "(", "'just_aggregate'", ",", ")", ":", "\n", "                ", "return", "\n", "# Otherwise, also save current values of from the accumulators", "\n", "", "curr_iter", "=", "self", ".", "main_loop", ".", "status", "[", "'iterations_done'", "]", "\n", "if", "curr_iter", "==", "0", ":", "\n", "                ", "return", "\n", "\n", "", "curr_cost", "=", "self", ".", "_variables", ".", "get_aggregated_values", "(", ")", "\n", "curr_cost", "=", "curr_cost", "[", "'decoder_cost_cost'", "]", ".", "tolist", "(", ")", "\n", "self", ".", "cost_curve", ".", "append", "(", "{", "curr_iter", ":", "curr_cost", "}", ")", "\n", "\n", "if", "curr_iter", "%", "100", "==", "0", ":", "\n", "                ", "numpy", ".", "savez", "(", "os", ".", "path", ".", "join", "(", "self", ".", "config", "[", "'saveto'", "]", ",", "'cost_curve.npz'", ")", ",", "\n", "cost_curves", "=", "self", ".", "cost_curve", ")", "\n", "\n", "", "self", ".", "add_records", "(", "\n", "self", ".", "main_loop", ".", "log", ",", "\n", "self", ".", "_variables", ".", "get_aggregated_values", "(", ")", ".", "items", "(", ")", ")", "\n", "self", ".", "_variables", ".", "initialize_aggregators", "(", ")", "\n", "self", ".", "add_records", "(", "\n", "self", ".", "main_loop", ".", "log", ",", "\n", "self", ".", "_non_variables", ".", "get_aggregated_values", "(", ")", ".", "items", "(", ")", ")", "\n", "self", ".", "_non_variables", ".", "initialize_quantities", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.sampling.Sampler.__init__": [[161, 176], ["blocks.extensions.SimpleExtension.__init__", "model.get_theano_function"], "methods", ["home.repos.pwc.inspect_result.SwordYork_DCNMT.None.stream._too_long.__init__"], ["def", "__init__", "(", "self", ",", "model", ",", "data_stream", ",", "hook_samples", "=", "1", ",", "transition_depth", "=", "1", ",", "\n", "src_vocab", "=", "None", ",", "trg_vocab", "=", "None", ",", "src_ivocab", "=", "None", ",", "\n", "trg_ivocab", "=", "None", ",", "src_vocab_size", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Sampler", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "hook_samples", "=", "hook_samples", "\n", "self", ".", "data_stream", "=", "data_stream", "\n", "self", ".", "src_vocab", "=", "src_vocab", "\n", "self", ".", "trg_vocab", "=", "trg_vocab", "\n", "self", ".", "src_ivocab", "=", "src_ivocab", "\n", "self", ".", "transition_depth", "=", "transition_depth", "\n", "self", ".", "trg_ivocab", "=", "trg_ivocab", "\n", "self", ".", "src_vocab_size", "=", "src_vocab_size", "\n", "self", ".", "is_synced", "=", "False", "\n", "self", ".", "sampling_fn", "=", "model", ".", "get_theano_function", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.sampling.Sampler.do": [[177, 231], ["sampling.Sampler._get_attr_rec", "min", "numpy.random.choice", "print", "range", "len", "sampling.Sampler.build_input_dict", "sampling.Sampler.sampling_fn", "outputs.flatten.flatten.flatten", "costs.flatten.flatten.flatten", "sampling.Sampler._get_true_length", "print", "print", "print", "print", "print", "sampling.Sampler._get_true_length", "sampling.Sampler._idx_to_word", "sampling.Sampler._idx_to_word", "sampling.Sampler._idx_to_word", "costs[].mean", "sampling.Sampler.src_vocab.items", "sampling.Sampler.trg_vocab.items"], "methods", ["home.repos.pwc.inspect_result.SwordYork_DCNMT.None.sampling.SamplingBase._get_attr_rec", "home.repos.pwc.inspect_result.SwordYork_DCNMT.visual.embedding.build_input_dict", "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.sampling.SamplingBase._get_true_length", "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.sampling.SamplingBase._get_true_length", "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.sampling.SamplingBase._idx_to_word", "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.sampling.SamplingBase._idx_to_word", "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.sampling.SamplingBase._idx_to_word"], ["", "def", "do", "(", "self", ",", "which_callback", ",", "*", "args", ")", ":", "\n", "\n", "# Get dictionaries, this may not be the practical way", "\n", "        ", "sources", "=", "self", ".", "_get_attr_rec", "(", "self", ".", "main_loop", ",", "'data_stream'", ")", "\n", "\n", "# Load vocabularies and invert if necessary", "\n", "# WARNING: Source and target indices from data stream", "\n", "#  can be different", "\n", "if", "not", "self", ".", "src_vocab", ":", "\n", "            ", "self", ".", "src_vocab", "=", "sources", ".", "data_streams", "[", "0", "]", ".", "dataset", ".", "dictionary", "\n", "", "if", "not", "self", ".", "trg_vocab", ":", "\n", "            ", "self", ".", "trg_vocab", "=", "sources", ".", "data_streams", "[", "1", "]", ".", "dataset", ".", "dictionary", "\n", "", "if", "not", "self", ".", "src_ivocab", ":", "\n", "            ", "self", ".", "src_ivocab", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "self", ".", "src_vocab", ".", "items", "(", ")", "}", "\n", "", "if", "not", "self", ".", "trg_ivocab", ":", "\n", "            ", "self", ".", "trg_ivocab", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "self", ".", "trg_vocab", ".", "items", "(", ")", "}", "\n", "", "if", "not", "self", ".", "src_vocab_size", ":", "\n", "            ", "self", ".", "src_vocab_size", "=", "len", "(", "self", ".", "src_vocab", ")", "\n", "\n", "# Randomly select source samples from the current batch", "\n", "# WARNING: Source and target indices from data stream", "\n", "#  can be different", "\n", "", "batch", "=", "args", "[", "0", "]", "\n", "batch_size", "=", "batch", "[", "'source_char_seq'", "]", ".", "shape", "[", "0", "]", "\n", "hook_samples", "=", "min", "(", "batch_size", ",", "self", ".", "hook_samples", ")", "\n", "\n", "# TODO: this is problematic for boundary conditions, eg. last batch", "\n", "sample_idx", "=", "numpy", ".", "random", ".", "choice", "(", "\n", "batch_size", ",", "hook_samples", ",", "replace", "=", "False", ")", "\n", "src_batch", "=", "batch", "[", "'source_char_seq'", "]", "\n", "trg_batch", "=", "batch", "[", "'target_char_seq'", "]", "\n", "input_", "=", "src_batch", "[", "sample_idx", ",", ":", "]", "\n", "target_", "=", "trg_batch", "[", "sample_idx", ",", ":", "]", "\n", "\n", "# Sample", "\n", "print", "(", ")", "\n", "for", "i", "in", "range", "(", "hook_samples", ")", ":", "\n", "            ", "input_length", ",", "input_dict", "=", "self", ".", "build_input_dict", "(", "input_", "[", "i", "]", ",", "self", ".", "src_vocab", ")", "\n", "target_length", "=", "self", ".", "_get_true_length", "(", "target_", "[", "i", "]", ",", "self", ".", "trg_vocab", ")", "+", "1", "\n", "sfn", "=", "self", ".", "sampling_fn", "(", "**", "input_dict", ")", "\n", "outputs", "=", "sfn", "[", "self", ".", "transition_depth", "]", "\n", "costs", "=", "sfn", "[", "-", "1", "]", "\n", "outputs", "=", "outputs", ".", "flatten", "(", ")", "\n", "costs", "=", "costs", ".", "flatten", "(", ")", "\n", "\n", "sample_length", "=", "self", ".", "_get_true_length", "(", "outputs", ",", "self", ".", "trg_vocab", ")", "\n", "print", "(", "\"Input : \"", ",", "self", ".", "_idx_to_word", "(", "input_", "[", "i", "]", "[", ":", "input_length", "]", ",", "\n", "self", ".", "src_ivocab", ")", ")", "\n", "print", "(", "\"Target: \"", ",", "self", ".", "_idx_to_word", "(", "target_", "[", "i", "]", "[", ":", "target_length", "]", ",", "\n", "self", ".", "trg_ivocab", ")", ")", "\n", "print", "(", "\"Sample: \"", ",", "self", ".", "_idx_to_word", "(", "outputs", "[", ":", "sample_length", "]", ",", "\n", "self", ".", "trg_ivocab", ")", ")", "\n", "print", "(", "\"Sample cost: \"", ",", "costs", "[", ":", "sample_length", "]", ".", "mean", "(", ")", ")", "\n", "print", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.sampling.BleuValidator.__init__": [[237, 286], ["blocks.extensions.SimpleExtension.__init__", "config.get", "blocks.search.BeamSearch", "os.path.exists", "os.makedirs", "sampling.BleuValidator.vocab.items", "numpy.load", "bleu_score[].tolist", "enumerate", "logger.info", "os.path.join", "sorted", "logger.info", "sampling.BleuValidator.best_models.append", "sampling.ModelInfo", "list", "v.values"], "methods", ["home.repos.pwc.inspect_result.SwordYork_DCNMT.None.stream._too_long.__init__"], ["def", "__init__", "(", "self", ",", "source_char_seq", ",", "source_sample_matrix", ",", "source_char_aux", ",", "\n", "source_word_mask", ",", "samples", ",", "model", ",", "data_stream", ",", "\n", "config", ",", "n_best", "=", "1", ",", "track_n_models", "=", "1", ",", "\n", "normalize", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "# TODO: change config structure", "\n", "        ", "super", "(", "BleuValidator", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "source_char_seq", "=", "source_char_seq", "\n", "self", ".", "source_sample_matrix", "=", "source_sample_matrix", "\n", "self", ".", "source_char_aux", "=", "source_char_aux", "\n", "self", ".", "source_word_mask", "=", "source_word_mask", "\n", "self", ".", "samples", "=", "samples", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "data_stream", "=", "data_stream", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "n_best", "=", "n_best", "\n", "self", ".", "track_n_models", "=", "track_n_models", "\n", "self", ".", "normalize", "=", "normalize", "\n", "self", ".", "verbose", "=", "config", ".", "get", "(", "'val_set_out'", ",", "None", ")", "\n", "\n", "# Helpers", "\n", "self", ".", "vocab", "=", "data_stream", ".", "dataset", ".", "dictionary", "\n", "self", ".", "src_ivocab", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "self", ".", "vocab", ".", "items", "(", ")", "}", "\n", "self", ".", "unk_sym", "=", "data_stream", ".", "dataset", ".", "unk_token", "\n", "self", ".", "eos_sym", "=", "data_stream", ".", "dataset", ".", "eos_token", "\n", "self", ".", "unk_idx", "=", "self", ".", "vocab", "[", "self", ".", "unk_sym", "]", "\n", "self", ".", "eos_idx", "=", "self", ".", "vocab", "[", "self", ".", "eos_sym", "]", "\n", "self", ".", "best_models", "=", "[", "]", "\n", "self", ".", "val_bleu_curve", "=", "[", "]", "\n", "self", ".", "beam_search", "=", "BeamSearch", "(", "samples", "=", "samples", ")", "\n", "self", ".", "multibleu_cmd", "=", "[", "'perl'", ",", "self", ".", "config", "[", "'bleu_script'", "]", ",", "\n", "self", ".", "config", "[", "'val_set_grndtruth'", "]", ",", "'<'", "]", "\n", "\n", "# Create saving directory if it does not exist", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "config", "[", "'saveto'", "]", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "config", "[", "'saveto'", "]", ")", "\n", "\n", "", "if", "self", ".", "config", "[", "'reload'", "]", ":", "\n", "            ", "try", ":", "\n", "                ", "bleu_score", "=", "numpy", ".", "load", "(", "os", ".", "path", ".", "join", "(", "self", ".", "config", "[", "'saveto'", "]", ",", "\n", "'val_bleu_scores.npz'", ")", ")", "\n", "self", ".", "val_bleu_curve", "=", "bleu_score", "[", "'bleu_scores'", "]", ".", "tolist", "(", ")", "\n", "# Track n best previous bleu scores", "\n", "for", "i", ",", "bleu", "in", "enumerate", "(", "\n", "sorted", "(", "[", "list", "(", "v", ".", "values", "(", ")", ")", "[", "0", "]", "for", "v", "in", "self", ".", "val_bleu_curve", "]", ",", "reverse", "=", "True", ")", ")", ":", "\n", "                    ", "if", "i", "<", "self", ".", "track_n_models", ":", "\n", "                        ", "self", ".", "best_models", ".", "append", "(", "ModelInfo", "(", "bleu", ",", "self", ".", "config", "[", "'saveto'", "]", ")", ")", "\n", "", "", "logger", ".", "info", "(", "\"BleuScores Reloaded\"", ")", "\n", "", "except", ":", "\n", "                ", "logger", ".", "info", "(", "\"BleuScores not Found\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.sampling.BleuValidator.do": [[287, 296], ["sampling.BleuValidator._save_model", "sampling.BleuValidator._evaluate_model"], "methods", ["home.repos.pwc.inspect_result.SwordYork_DCNMT.None.sampling.BleuValidator._save_model", "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.sampling.BleuTester._evaluate_model"], ["", "", "", "def", "do", "(", "self", ",", "which_callback", ",", "*", "args", ")", ":", "\n", "\n", "# Track validation burn in", "\n", "        ", "if", "self", ".", "main_loop", ".", "status", "[", "'iterations_done'", "]", "<", "self", ".", "config", "[", "'val_burn_in'", "]", ":", "\n", "            ", "return", "\n", "\n", "# Evaluate and save if necessary", "\n", "", "self", ".", "_save_model", "(", "self", ".", "_evaluate_model", "(", "self", ".", "main_loop", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.sampling.BleuValidator._evaluate_model": [[297, 397], ["logger.info", "time.time", "subprocess.Popen", "sampling.BleuValidator._get_attr_rec", "enumerate", "logger.info", "sampling.BleuValidator.data_stream.reset", "subprocess.Popen.stdin.close", "subprocess.Popen.stdout.readline", "logger.info", "re.match", "logger.info", "float", "sampling.BleuValidator.val_bleu_curve.append", "logger.info", "subprocess.Popen.terminate", "open", "sampling.BleuValidator.data_stream.get_epoch_iterator", "sampling.BleuValidator._oov_to_unk", "sampling.BleuValidator.build_input_dict_tile", "sampling.BleuValidator.beam_search.search", "enumerate", "subprocess.Popen.stdin.flush", "open.close", "trg_vocab.items", "numpy.asarray", "numpy.array", "numpy.argsort", "logger.info", "re.match.group", "str", "sampling.BleuValidator._idx_to_word", "print", "print", "print", "print", "print", "print", "float", "len", "len", "sampling.BleuValidator.index", "logger.info", "sampling.BleuValidator._idx_to_word", "print", "len", "time.time"], "methods", ["home.repos.pwc.inspect_result.SwordYork_DCNMT.None.sampling.SamplingBase._get_attr_rec", "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.sampling.SamplingBase._oov_to_unk", "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.sampling.SamplingBase.build_input_dict_tile", "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.sampling.SamplingBase._idx_to_word", "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.sampling.SamplingBase._idx_to_word"], ["", "def", "_evaluate_model", "(", "self", ",", "main_loop", ")", ":", "\n", "        ", "curr_iter", "=", "main_loop", ".", "status", "[", "'iterations_done'", "]", "\n", "logger", ".", "info", "(", "\"Started Validation: \"", ")", "\n", "val_start_time", "=", "time", ".", "time", "(", ")", "\n", "mb_subprocess", "=", "Popen", "(", "self", ".", "multibleu_cmd", ",", "stdin", "=", "PIPE", ",", "stdout", "=", "PIPE", ",", "universal_newlines", "=", "True", ")", "\n", "total_cost", "=", "0.0", "\n", "\n", "# Get target vocabulary", "\n", "sources", "=", "self", ".", "_get_attr_rec", "(", "self", ".", "main_loop", ",", "'data_stream'", ")", "\n", "trg_vocab", "=", "sources", ".", "data_streams", "[", "1", "]", ".", "dataset", ".", "dictionary", "\n", "self", ".", "trg_vocab", "=", "trg_vocab", "\n", "self", ".", "trg_ivocab", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "trg_vocab", ".", "items", "(", ")", "}", "\n", "trg_eos_sym", "=", "sources", ".", "data_streams", "[", "1", "]", ".", "dataset", ".", "eos_token", "\n", "self", ".", "trg_eos_idx", "=", "trg_vocab", "[", "trg_eos_sym", "]", "\n", "\n", "if", "self", ".", "verbose", ":", "\n", "            ", "ftrans", "=", "open", "(", "self", ".", "config", "[", "'val_set_out'", "]", "+", "str", "(", "curr_iter", ")", ",", "'w'", ")", "\n", "\n", "", "for", "i", ",", "line", "in", "enumerate", "(", "self", ".", "data_stream", ".", "get_epoch_iterator", "(", ")", ")", ":", "\n", "            ", "\"\"\"\n            Load the sentence, retrieve the sample, write to file\n            \"\"\"", "\n", "\n", "seq", "=", "self", ".", "_oov_to_unk", "(", "\n", "line", "[", "0", "]", ",", "self", ".", "config", "[", "'src_vocab_size'", "]", ",", "self", ".", "unk_idx", ")", "\n", "input_dict", "=", "self", ".", "build_input_dict_tile", "(", "numpy", ".", "asarray", "(", "seq", ")", ",", "self", ".", "vocab", ",", "self", ".", "config", "[", "'beam_size'", "]", ")", "\n", "\n", "# draw sample, checking to ensure we don't get an empty string back", "\n", "trans", ",", "costs", "=", "self", ".", "beam_search", ".", "search", "(", "\n", "input_values", "=", "{", "self", ".", "source_char_seq", ":", "input_dict", "[", "'source_char_seq'", "]", ",", "\n", "self", ".", "source_sample_matrix", ":", "input_dict", "[", "'source_sample_matrix'", "]", ",", "\n", "self", ".", "source_word_mask", ":", "input_dict", "[", "'source_word_mask'", "]", ",", "\n", "self", ".", "source_char_aux", ":", "input_dict", "[", "'source_char_aux'", "]", "}", ",", "\n", "max_length", "=", "3", "*", "len", "(", "seq", ")", ",", "eol_symbol", "=", "self", ".", "trg_eos_idx", ",", "\n", "ignore_first_eol", "=", "False", ")", "\n", "\n", "# normalize costs according to the sequence lengths", "\n", "if", "self", ".", "normalize", ":", "\n", "                ", "lengths", "=", "numpy", ".", "array", "(", "[", "len", "(", "s", ")", "for", "s", "in", "trans", "]", ")", "\n", "costs", "=", "costs", "/", "lengths", "\n", "\n", "", "nbest_idx", "=", "numpy", ".", "argsort", "(", "costs", ")", "[", ":", "self", ".", "n_best", "]", "\n", "for", "j", ",", "best", "in", "enumerate", "(", "nbest_idx", ")", ":", "\n", "                ", "try", ":", "\n", "                    ", "total_cost", "+=", "costs", "[", "best", "]", "\n", "trans_out", "=", "trans", "[", "best", "]", "\n", "\n", "# convert idx to words", "\n", "try", ":", "\n", "                        ", "sample_length", "=", "trans_out", ".", "index", "(", "self", ".", "trg_vocab", "[", "'</S>'", "]", ")", "\n", "", "except", "ValueError", ":", "\n", "                        ", "sample_length", "=", "len", "(", "seq", ")", "\n", "", "trans_out", "=", "trans_out", "[", ":", "sample_length", "]", "\n", "trans_out", "=", "self", ".", "_idx_to_word", "(", "trans_out", ",", "self", ".", "trg_ivocab", ")", "\n", "\n", "", "except", "ValueError", ":", "\n", "                    ", "logger", ".", "info", "(", "\n", "\"Can NOT find a translation for line: {}\"", ".", "format", "(", "i", "+", "1", ")", ")", "\n", "trans_out", "=", "'<UNK>'", "\n", "\n", "", "if", "j", "==", "0", ":", "\n", "# Write to subprocess and file if it exists", "\n", "                    ", "print", "(", "\"Line:\"", ",", "i", ")", "\n", "print", "(", "\"Input : \"", ",", "self", ".", "_idx_to_word", "(", "line", "[", "0", "]", ",", "self", ".", "src_ivocab", ")", ")", "\n", "print", "(", "\"Sample: \"", ",", "trans_out", ")", "\n", "print", "(", "\"Error:\"", ",", "costs", "[", "best", "]", ")", "\n", "print", "(", ")", "\n", "\n", "print", "(", "trans_out", ",", "file", "=", "mb_subprocess", ".", "stdin", ")", "\n", "if", "self", ".", "verbose", ":", "\n", "                        ", "print", "(", "trans_out", ",", "file", "=", "ftrans", ")", "\n", "\n", "", "", "", "if", "i", "!=", "0", "and", "i", "%", "100", "==", "0", ":", "\n", "                ", "logger", ".", "info", "(", "\n", "\"Translated {} lines of validation set...\"", ".", "format", "(", "i", ")", ")", "\n", "\n", "", "mb_subprocess", ".", "stdin", ".", "flush", "(", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"Total cost of the validation: {}\"", ".", "format", "(", "total_cost", ")", ")", "\n", "self", ".", "data_stream", ".", "reset", "(", ")", "\n", "if", "self", ".", "verbose", ":", "\n", "            ", "ftrans", ".", "close", "(", ")", "\n", "\n", "# send end of file, read output.", "\n", "", "mb_subprocess", ".", "stdin", ".", "close", "(", ")", "\n", "stdout", "=", "mb_subprocess", ".", "stdout", ".", "readline", "(", ")", "\n", "logger", ".", "info", "(", "stdout", ")", "\n", "out_parse", "=", "re", ".", "match", "(", "r'BLEU = [-.0-9]+'", ",", "stdout", ")", "\n", "logger", ".", "info", "(", "\"Validation Took: {} minutes\"", ".", "format", "(", "\n", "float", "(", "time", ".", "time", "(", ")", "-", "val_start_time", ")", "/", "60.", ")", ")", "\n", "assert", "out_parse", "is", "not", "None", "\n", "\n", "# extract the score", "\n", "bleu_score", "=", "float", "(", "out_parse", ".", "group", "(", ")", "[", "6", ":", "]", ")", "\n", "self", ".", "val_bleu_curve", ".", "append", "(", "{", "curr_iter", ":", "bleu_score", "}", ")", "\n", "logger", ".", "info", "(", "bleu_score", ")", "\n", "mb_subprocess", ".", "terminate", "(", ")", "\n", "\n", "return", "bleu_score", "\n", "\n"]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.sampling.BleuValidator._is_valid_to_save": [[398, 403], ["min", "operator.attrgetter"], "methods", ["None"], ["", "def", "_is_valid_to_save", "(", "self", ",", "bleu_score", ")", ":", "\n", "        ", "if", "not", "self", ".", "best_models", "or", "min", "(", "self", ".", "best_models", ",", "\n", "key", "=", "operator", ".", "attrgetter", "(", "'bleu_score'", ")", ")", ".", "bleu_score", "<", "bleu_score", ":", "\n", "            ", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.sampling.BleuValidator._save_model": [[404, 428], ["numpy.savez", "sampling.BleuValidator._is_valid_to_save", "os.path.join", "sampling.ModelInfo", "sampling.BleuValidator.best_models.append", "sampling.BleuValidator.best_models.sort", "signal.signal", "logger.info", "sampling.BleuValidator.main_loop.model.get_parameter_values", "sampling.BleuValidator.save_parameter_values", "signal.signal", "len", "sampling.BleuValidator.best_models.remove", "os.path.isfile", "logger.info", "os.remove", "operator.attrgetter"], "methods", ["home.repos.pwc.inspect_result.SwordYork_DCNMT.None.sampling.BleuValidator._is_valid_to_save", "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.checkpoint.SaveLoadUtils.save_parameter_values"], ["", "def", "_save_model", "(", "self", ",", "bleu_score", ")", ":", "\n", "        ", "numpy", ".", "savez", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "config", "[", "'saveto'", "]", ",", "'val_bleu_scores.npz'", ")", ",", "\n", "bleu_scores", "=", "self", ".", "val_bleu_curve", ")", "\n", "if", "self", ".", "_is_valid_to_save", "(", "bleu_score", ")", ":", "\n", "            ", "model", "=", "ModelInfo", "(", "bleu_score", ",", "self", ".", "config", "[", "'saveto'", "]", ")", "\n", "\n", "# Manage n-best model list first", "\n", "if", "len", "(", "self", ".", "best_models", ")", ">=", "self", ".", "track_n_models", ":", "\n", "                ", "old_model", "=", "self", ".", "best_models", "[", "0", "]", "\n", "if", "old_model", ".", "path", "and", "os", ".", "path", ".", "isfile", "(", "old_model", ".", "path", ")", ":", "\n", "                    ", "logger", ".", "info", "(", "\"Deleting old model %s\"", "%", "old_model", ".", "path", ")", "\n", "os", ".", "remove", "(", "old_model", ".", "path", ")", "\n", "", "self", ".", "best_models", ".", "remove", "(", "old_model", ")", "\n", "\n", "", "self", ".", "best_models", ".", "append", "(", "model", ")", "\n", "self", ".", "best_models", ".", "sort", "(", "key", "=", "operator", ".", "attrgetter", "(", "'bleu_score'", ")", ")", "\n", "\n", "# Save the model here", "\n", "s", "=", "signal", ".", "signal", "(", "signal", ".", "SIGINT", ",", "signal", ".", "SIG_IGN", ")", "\n", "logger", ".", "info", "(", "\"Saving new model {}\"", ".", "format", "(", "model", ".", "path", ")", ")", "\n", "params_to_save", "=", "self", ".", "main_loop", ".", "model", ".", "get_parameter_values", "(", ")", "\n", "self", ".", "save_parameter_values", "(", "params_to_save", ",", "model", ".", "path", ")", "\n", "signal", ".", "signal", "(", "signal", ".", "SIGINT", ",", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.sampling.BleuTester.__init__": [[434, 467], ["blocks.extensions.TrainingExtension.__init__", "blocks.search.BeamSearch", "os.path.exists", "os.makedirs", "sampling.BleuTester.vocab.items"], "methods", ["home.repos.pwc.inspect_result.SwordYork_DCNMT.None.stream._too_long.__init__"], ["def", "__init__", "(", "self", ",", "source_char_seq", ",", "source_sample_matrix", ",", "source_char_aux", ",", "\n", "source_word_mask", ",", "samples", ",", "model", ",", "data_stream", ",", "\n", "config", ",", "n_best", "=", "1", ",", "track_n_models", "=", "1", ",", "\n", "normalize", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "# TODO: change config structure", "\n", "        ", "super", "(", "BleuTester", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "source_char_seq", "=", "source_char_seq", "\n", "self", ".", "source_sample_matrix", "=", "source_sample_matrix", "\n", "self", ".", "source_char_aux", "=", "source_char_aux", "\n", "self", ".", "source_word_mask", "=", "source_word_mask", "\n", "self", ".", "samples", "=", "samples", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "data_stream", "=", "data_stream", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "n_best", "=", "n_best", "\n", "self", ".", "track_n_models", "=", "track_n_models", "\n", "self", ".", "normalize", "=", "normalize", "\n", "self", ".", "verbose", "=", "True", "\n", "\n", "# Helpers", "\n", "self", ".", "vocab", "=", "data_stream", ".", "dataset", ".", "dictionary", "\n", "self", ".", "src_ivocab", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "self", ".", "vocab", ".", "items", "(", ")", "}", "\n", "self", ".", "unk_sym", "=", "data_stream", ".", "dataset", ".", "unk_token", "\n", "self", ".", "eos_sym", "=", "data_stream", ".", "dataset", ".", "eos_token", "\n", "self", ".", "unk_idx", "=", "self", ".", "vocab", "[", "self", ".", "unk_sym", "]", "\n", "self", ".", "eos_idx", "=", "self", ".", "vocab", "[", "self", ".", "eos_sym", "]", "\n", "self", ".", "beam_search", "=", "BeamSearch", "(", "samples", "=", "samples", ")", "\n", "self", ".", "multibleu_cmd", "=", "[", "'perl'", ",", "self", ".", "config", "[", "'bleu_script'", "]", ",", "\n", "self", ".", "config", "[", "'test_set_grndtruth'", "]", ",", "'<'", "]", "\n", "\n", "# Create saving directory if it does not exist", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "config", "[", "'saveto'", "]", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "config", "[", "'saveto'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.sampling.BleuTester.before_training": [[468, 470], ["sampling.BleuTester._evaluate_model"], "methods", ["home.repos.pwc.inspect_result.SwordYork_DCNMT.None.sampling.BleuTester._evaluate_model"], ["", "", "def", "before_training", "(", "self", ")", ":", "\n", "        ", "self", ".", "_evaluate_model", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.sampling.BleuTester._evaluate_model": [[471, 569], ["logger.info", "time.time", "subprocess.Popen", "enumerate", "logger.info", "sampling.BleuTester.data_stream.reset", "subprocess.Popen.stdin.close", "subprocess.Popen.stdout.readline", "logger.info", "re.match", "logger.info", "float", "logger.info", "subprocess.Popen.terminate", "open", "sampling.BleuTester.data_stream.get_epoch_iterator", "sampling.BleuTester._oov_to_unk", "sampling.BleuTester.build_input_dict_tile", "sampling.BleuTester.beam_search.search", "enumerate", "subprocess.Popen.stdin.flush", "open.close", "trg_vocab.items", "numpy.asarray", "numpy.array", "numpy.argsort", "logger.info", "re.match.group", "sampling.BleuTester._idx_to_word", "print", "print", "print", "print", "print", "print", "float", "len", "len", "sampling.BleuTester.index", "logger.info", "sampling.BleuTester._idx_to_word", "print", "len", "time.time"], "methods", ["home.repos.pwc.inspect_result.SwordYork_DCNMT.None.sampling.SamplingBase._oov_to_unk", "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.sampling.SamplingBase.build_input_dict_tile", "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.sampling.SamplingBase._idx_to_word", "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.sampling.SamplingBase._idx_to_word"], ["", "def", "_evaluate_model", "(", "self", ")", ":", "\n", "\n", "        ", "logger", ".", "info", "(", "\"Started Test: \"", ")", "\n", "test_start_time", "=", "time", ".", "time", "(", ")", "\n", "mb_subprocess", "=", "Popen", "(", "self", ".", "multibleu_cmd", ",", "stdin", "=", "PIPE", ",", "stdout", "=", "PIPE", ",", "universal_newlines", "=", "True", ")", "\n", "total_cost", "=", "0.0", "\n", "\n", "# Get target vocabulary", "\n", "trg_vocab", "=", "self", ".", "data_stream", ".", "trg_vocab", "\n", "self", ".", "trg_vocab", "=", "trg_vocab", "\n", "self", ".", "trg_ivocab", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "trg_vocab", ".", "items", "(", ")", "}", "\n", "trg_eos_sym", "=", "self", ".", "data_stream", ".", "eos_token", "\n", "self", ".", "trg_eos_idx", "=", "trg_vocab", "[", "trg_eos_sym", "]", "\n", "\n", "if", "self", ".", "verbose", ":", "\n", "            ", "ftrans", "=", "open", "(", "self", ".", "config", "[", "'test_set_out'", "]", ",", "'w'", ")", "\n", "\n", "", "for", "i", ",", "line", "in", "enumerate", "(", "self", ".", "data_stream", ".", "get_epoch_iterator", "(", ")", ")", ":", "\n", "            ", "\"\"\"\n            Load the sentence, retrieve the sample, write to file\n            \"\"\"", "\n", "\n", "seq", "=", "self", ".", "_oov_to_unk", "(", "\n", "line", "[", "0", "]", ",", "self", ".", "config", "[", "'src_vocab_size'", "]", ",", "self", ".", "unk_idx", ")", "\n", "input_dict", "=", "self", ".", "build_input_dict_tile", "(", "numpy", ".", "asarray", "(", "seq", ")", ",", "self", ".", "vocab", ",", "self", ".", "config", "[", "'beam_size'", "]", ")", "\n", "\n", "# draw sample, checking to ensure we don't get an empty string back", "\n", "trans", ",", "costs", "=", "self", ".", "beam_search", ".", "search", "(", "\n", "input_values", "=", "{", "self", ".", "source_char_seq", ":", "input_dict", "[", "'source_char_seq'", "]", ",", "\n", "self", ".", "source_sample_matrix", ":", "input_dict", "[", "'source_sample_matrix'", "]", ",", "\n", "self", ".", "source_word_mask", ":", "input_dict", "[", "'source_word_mask'", "]", ",", "\n", "self", ".", "source_char_aux", ":", "input_dict", "[", "'source_char_aux'", "]", "}", ",", "\n", "max_length", "=", "3", "*", "len", "(", "seq", ")", ",", "eol_symbol", "=", "self", ".", "trg_eos_idx", ",", "\n", "ignore_first_eol", "=", "False", ")", "\n", "\n", "# normalize costs according to the sequence lengths", "\n", "if", "self", ".", "normalize", ":", "\n", "                ", "lengths", "=", "numpy", ".", "array", "(", "[", "len", "(", "s", ")", "for", "s", "in", "trans", "]", ")", "\n", "costs", "=", "costs", "/", "lengths", "\n", "\n", "", "nbest_idx", "=", "numpy", ".", "argsort", "(", "costs", ")", "[", ":", "self", ".", "n_best", "]", "\n", "for", "j", ",", "best", "in", "enumerate", "(", "nbest_idx", ")", ":", "\n", "                ", "try", ":", "\n", "                    ", "total_cost", "+=", "costs", "[", "best", "]", "\n", "trans_out", "=", "trans", "[", "best", "]", "\n", "\n", "# convert idx to words", "\n", "try", ":", "\n", "                        ", "sample_length", "=", "trans_out", ".", "index", "(", "self", ".", "trg_vocab", "[", "'</S>'", "]", ")", "\n", "", "except", "ValueError", ":", "\n", "                        ", "sample_length", "=", "len", "(", "seq", ")", "\n", "", "trans_out", "=", "trans_out", "[", ":", "sample_length", "]", "\n", "trans_out", "=", "self", ".", "_idx_to_word", "(", "trans_out", ",", "self", ".", "trg_ivocab", ")", "\n", "\n", "", "except", "ValueError", ":", "\n", "                    ", "logger", ".", "info", "(", "\n", "\"Can NOT find a translation for line: {}\"", ".", "format", "(", "i", "+", "1", ")", ")", "\n", "trans_out", "=", "'<UNK>'", "\n", "\n", "", "if", "j", "==", "0", ":", "\n", "# Write to subprocess and file if it exists", "\n", "                    ", "print", "(", "\"Line:\"", ",", "i", ")", "\n", "print", "(", "\"Input : \"", ",", "self", ".", "_idx_to_word", "(", "line", "[", "0", "]", ",", "self", ".", "src_ivocab", ")", ")", "\n", "print", "(", "\"Sample: \"", ",", "trans_out", ")", "\n", "print", "(", "\"Error:\"", ",", "costs", "[", "best", "]", ")", "\n", "print", "(", ")", "\n", "\n", "print", "(", "trans_out", ",", "file", "=", "mb_subprocess", ".", "stdin", ")", "\n", "if", "self", ".", "verbose", ":", "\n", "                        ", "print", "(", "trans_out", ",", "file", "=", "ftrans", ")", "\n", "\n", "", "", "", "if", "i", "!=", "0", "and", "i", "%", "100", "==", "0", ":", "\n", "                ", "logger", ".", "info", "(", "\n", "\"Translated {} lines of test set...\"", ".", "format", "(", "i", ")", ")", "\n", "\n", "", "mb_subprocess", ".", "stdin", ".", "flush", "(", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"Total cost of the test: {}\"", ".", "format", "(", "total_cost", ")", ")", "\n", "self", ".", "data_stream", ".", "reset", "(", ")", "\n", "if", "self", ".", "verbose", ":", "\n", "            ", "ftrans", ".", "close", "(", ")", "\n", "\n", "# send end of file, read output.", "\n", "", "mb_subprocess", ".", "stdin", ".", "close", "(", ")", "\n", "stdout", "=", "mb_subprocess", ".", "stdout", ".", "readline", "(", ")", "\n", "logger", ".", "info", "(", "stdout", ")", "\n", "out_parse", "=", "re", ".", "match", "(", "r'BLEU = [-.0-9]+'", ",", "stdout", ")", "\n", "logger", ".", "info", "(", "\"Test Took: {} minutes\"", ".", "format", "(", "\n", "float", "(", "time", ".", "time", "(", ")", "-", "test_start_time", ")", "/", "60.", ")", ")", "\n", "assert", "out_parse", "is", "not", "None", "\n", "\n", "# extract the score", "\n", "bleu_score", "=", "float", "(", "out_parse", ".", "group", "(", ")", "[", "6", ":", "]", ")", "\n", "logger", ".", "info", "(", "bleu_score", ")", "\n", "mb_subprocess", ".", "terminate", "(", ")", "\n", "\n", "return", "bleu_score", "\n", "\n"]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.sampling.ModelInfo.__init__": [[575, 579], ["sampling.ModelInfo._generate_path"], "methods", ["home.repos.pwc.inspect_result.SwordYork_DCNMT.None.sampling.ModelInfo._generate_path"], ["def", "__init__", "(", "self", ",", "bleu_score", ",", "path", "=", "''", ")", ":", "\n", "        ", "self", ".", "bleu_score", "=", "bleu_score", "\n", "\n", "self", ".", "path", "=", "self", ".", "_generate_path", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.sampling.ModelInfo._generate_path": [[580, 585], ["os.path.join"], "methods", ["None"], ["", "def", "_generate_path", "(", "self", ",", "path", ")", ":", "\n", "        ", "gen_path", "=", "os", ".", "path", ".", "join", "(", "\n", "path", ",", "'best_bleu_params_BLEU%.2f.npz'", "%", "\n", "(", "self", ".", "bleu_score", ")", "if", "path", "else", "None", ")", "\n", "return", "gen_path", "\n", "", "", ""]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.stream.TextFileWithSEOSS.__init__": [[36, 41], ["fuel.datasets.TextFile.__init__"], "methods", ["home.repos.pwc.inspect_result.SwordYork_DCNMT.None.stream._too_long.__init__"], ["def", "__init__", "(", "self", ",", "files", ",", "dictionary", ",", "bos_token", "=", "'<S>'", ",", "eos_token", "=", "'</S>'", ",", "\n", "unk_token", "=", "'<UNK>'", ",", "level", "=", "'word'", ",", "preprocess", "=", "None", ",", "\n", "encoding", "=", "None", ")", ":", "\n", "        ", "super", "(", "TextFileWithSEOSS", ",", "self", ")", ".", "__init__", "(", "files", ",", "dictionary", ",", "bos_token", ",", "eos_token", ",", "\n", "unk_token", ",", "level", ",", "preprocess", ",", "encoding", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.stream.TextFileWithSEOSS.get_data": [[42, 60], ["next", "stream.TextFileWithSEOSS.preprocess", "data.extend", "data.extend", "data.append", "data.append", "data.append", "stream.TextFileWithSEOSS._get_from_dictionary", "stream.TextFileWithSEOSS._get_from_dictionary", "stream.TextFileWithSEOSS.split", "stream.TextFileWithSEOSS.strip"], "methods", ["None"], ["", "def", "get_data", "(", "self", ",", "state", "=", "None", ",", "request", "=", "None", ")", ":", "\n", "        ", "if", "request", "is", "not", "None", ":", "\n", "            ", "raise", "ValueError", "\n", "", "sentence", "=", "next", "(", "state", ")", "\n", "if", "self", ".", "preprocess", "is", "not", "None", ":", "\n", "            ", "sentence", "=", "self", ".", "preprocess", "(", "sentence", ")", "\n", "", "data", "=", "[", "self", ".", "dictionary", "[", "self", ".", "bos_token", "]", "]", "if", "self", ".", "bos_token", "else", "[", "]", "\n", "if", "self", ".", "level", "==", "'word'", ":", "\n", "            ", "data", ".", "extend", "(", "self", ".", "_get_from_dictionary", "(", "word", ")", "\n", "for", "word", "in", "sentence", ".", "split", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "data", ".", "extend", "(", "self", ".", "_get_from_dictionary", "(", "char", ")", "\n", "for", "char", "in", "sentence", ".", "strip", "(", ")", ")", "\n", "", "if", "self", ".", "eos_token", ":", "\n", "            ", "data", ".", "append", "(", "self", ".", "dictionary", "[", "' '", "]", ")", "\n", "data", ".", "append", "(", "self", ".", "dictionary", "[", "self", ".", "eos_token", "]", ")", "\n", "data", ".", "append", "(", "self", ".", "dictionary", "[", "' '", "]", ")", "\n", "", "return", "(", "data", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.stream.PaddingWithEOS.__init__": [[65, 70], ["fuel.transformers.Padding.__init__"], "methods", ["home.repos.pwc.inspect_result.SwordYork_DCNMT.None.stream._too_long.__init__"], ["def", "__init__", "(", "self", ",", "data_stream", ",", "space_idx", ",", "trg_bos", ",", "**", "kwargs", ")", ":", "\n", "        ", "kwargs", "[", "'data_stream'", "]", "=", "data_stream", "\n", "self", ".", "space_idx", "=", "space_idx", "\n", "self", ".", "trg_bos", "=", "trg_bos", "\n", "super", "(", "PaddingWithEOS", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.stream.PaddingWithEOS.sources": [[71, 77], ["tuple"], "methods", ["None"], ["", "@", "property", "\n", "def", "sources", "(", "self", ")", ":", "\n", "        ", "sources", "=", "[", "'source_char_seq'", ",", "'source_sample_matrix'", ",", "'source_char_aux'", ",", "'source_word_mask'", ",", "\n", "'target_char_seq'", ",", "'target_sample_matrix'", ",", "'target_char_aux'", ",", "'target_word_mask'", ",", "\n", "'target_char_mask'", ",", "'target_resample_matrix'", ",", "'target_prev_char_seq'", ",", "'target_prev_char_aux'", "]", "\n", "return", "tuple", "(", "sources", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.stream.PaddingWithEOS.transform_batch": [[78, 154], ["enumerate", "tuple", "zip", "enumerate", "max", "range", "max", "numpy.zeros", "enumerate", "numpy.zeros", "range", "numpy.ones", "numpy.zeros", "enumerate", "batch_with_masks.append", "batch_with_masks.append", "batch_with_masks.append", "batch_with_masks.append", "batch_with_masks.append", "len", "len", "numpy.asarray", "numpy.count_nonzero", "len", "add_space_length.append", "all", "ValueError", "numpy.asarray", "len", "numpy.zeros", "enumerate", "numpy.roll", "numpy.roll", "numpy.zeros", "numpy.where", "range", "batch_with_masks.append", "batch_with_masks.append", "batch_with_masks.append", "batch_with_masks.append", "len", "len", "len", "len", "range", "len", "len", "len", "len", "len", "range", "numpy.where"], "methods", ["None"], ["", "def", "transform_batch", "(", "self", ",", "batch", ")", ":", "\n", "        ", "batch_with_masks", "=", "[", "]", "\n", "for", "k", ",", "(", "source", ",", "source_batch", ")", "in", "enumerate", "(", "zip", "(", "self", ".", "data_stream", ".", "sources", ",", "batch", ")", ")", ":", "\n", "            ", "if", "source", "not", "in", "self", ".", "mask_sources", ":", "\n", "                ", "batch_with_masks", ".", "append", "(", "source_batch", ")", "\n", "continue", "\n", "", "word_shapes", "=", "[", "0", "]", "*", "len", "(", "source_batch", ")", "\n", "shapes", "=", "[", "0", "]", "*", "len", "(", "source_batch", ")", "\n", "for", "i", ",", "sample", "in", "enumerate", "(", "source_batch", ")", ":", "\n", "                ", "np_sample", "=", "numpy", ".", "asarray", "(", "sample", ")", "\n", "word_shapes", "[", "i", "]", "=", "numpy", ".", "count_nonzero", "(", "np_sample", "==", "self", ".", "space_idx", "[", "source", "]", ")", "\n", "shapes", "[", "i", "]", "=", "np_sample", ".", "shape", "\n", "\n", "", "lengths", "=", "[", "shape", "[", "0", "]", "for", "shape", "in", "shapes", "]", "\n", "max_word_len", "=", "max", "(", "word_shapes", ")", "\n", "add_space_length", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "lengths", ")", ")", ":", "\n", "                ", "add_space_length", ".", "append", "(", "lengths", "[", "i", "]", "+", "max_word_len", "-", "word_shapes", "[", "i", "]", ")", "\n", "", "max_char_seq_length", "=", "max", "(", "add_space_length", ")", "\n", "rest_shape", "=", "shapes", "[", "0", "]", "[", "1", ":", "]", "\n", "if", "not", "all", "(", "[", "shape", "[", "1", ":", "]", "==", "rest_shape", "for", "shape", "in", "shapes", "]", ")", ":", "\n", "                ", "raise", "ValueError", "(", "\"All dimensions except length must be equal\"", ")", "\n", "", "dtype", "=", "numpy", ".", "asarray", "(", "source_batch", "[", "0", "]", ")", ".", "dtype", "\n", "\n", "char_seq", "=", "numpy", ".", "zeros", "(", "\n", "(", "len", "(", "source_batch", ")", ",", "max_char_seq_length", ")", "+", "rest_shape", ",", "dtype", "=", "dtype", ")", "\n", "\n", "for", "i", ",", "sample", "in", "enumerate", "(", "source_batch", ")", ":", "\n", "                ", "char_seq", "[", "i", ",", ":", "len", "(", "sample", ")", "]", "=", "sample", "\n", "char_seq", "[", "i", ",", "len", "(", "sample", ")", ":", "add_space_length", "[", "i", "]", "]", "=", "self", ".", "space_idx", "[", "source", "]", "\n", "\n", "", "sample_matrix", "=", "numpy", ".", "zeros", "(", "(", "len", "(", "source_batch", ")", ",", "max_word_len", ",", "max_char_seq_length", ")", ",", "\n", "dtype", "=", "self", ".", "mask_dtype", ")", "\n", "char_seq_space_index", "=", "char_seq", "==", "self", ".", "space_idx", "[", "source", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "source_batch", ")", ")", ":", "\n", "                ", "sample_matrix", "[", "i", ",", "range", "(", "max_word_len", ")", ",", "\n", "numpy", ".", "where", "(", "char_seq_space_index", "[", "i", "]", ")", "[", "0", "]", "-", "1", "]", "=", "1", "\n", "\n", "", "char_aux", "=", "numpy", ".", "ones", "(", "(", "len", "(", "source_batch", ")", ",", "max_char_seq_length", ")", ",", "self", ".", "mask_dtype", ")", "\n", "char_aux", "[", "char_seq_space_index", "]", "=", "0", "\n", "\n", "word_mask", "=", "numpy", ".", "zeros", "(", "(", "len", "(", "source_batch", ")", ",", "max_word_len", ")", ",", "self", ".", "mask_dtype", ")", "\n", "for", "i", ",", "ws", "in", "enumerate", "(", "word_shapes", ")", ":", "\n", "                ", "word_mask", "[", "i", ",", ":", "ws", "]", "=", "1", "\n", "\n", "", "batch_with_masks", ".", "append", "(", "char_seq", ")", "\n", "batch_with_masks", ".", "append", "(", "sample_matrix", ")", "\n", "batch_with_masks", ".", "append", "(", "char_aux", ")", "\n", "batch_with_masks", ".", "append", "(", "word_mask", ")", "\n", "\n", "# target sequence", "\n", "if", "source", "==", "'target'", ":", "\n", "                ", "target_char_mask", "=", "numpy", ".", "zeros", "(", "(", "len", "(", "source_batch", ")", ",", "max_char_seq_length", ")", ",", "self", ".", "mask_dtype", ")", "\n", "for", "i", ",", "sequence_length", "in", "enumerate", "(", "lengths", ")", ":", "\n", "                    ", "target_char_mask", "[", "i", ",", ":", "sequence_length", "]", "=", "1", "\n", "", "target_prev_char_seq", "=", "numpy", ".", "roll", "(", "char_seq", ",", "1", ")", "\n", "target_prev_char_seq", "[", ":", ",", "0", "]", "=", "self", ".", "trg_bos", "\n", "target_prev_char_aux", "=", "numpy", ".", "roll", "(", "char_aux", ",", "1", ")", "\n", "# start of sequence, must be 0", "\n", "target_prev_char_aux", "[", ":", ",", "0", "]", "=", "0", "\n", "target_resample_matrix", "=", "numpy", ".", "zeros", "(", "(", "len", "(", "source_batch", ")", ",", "max_char_seq_length", ",", "max_word_len", ")", ",", "\n", "dtype", "=", "self", ".", "mask_dtype", ")", "\n", "\n", "curr_space_idx", "=", "numpy", ".", "where", "(", "char_seq_space_index", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "source_batch", ")", ")", ":", "\n", "                    ", "pj", "=", "0", "\n", "for", "cj", "in", "range", "(", "max_word_len", ")", ":", "\n", "                        ", "target_resample_matrix", "[", "i", ",", "pj", ":", "curr_space_idx", "[", "1", "]", "[", "i", "*", "max_word_len", "+", "cj", "]", "+", "1", ",", "cj", "]", "=", "1", "\n", "pj", "=", "curr_space_idx", "[", "1", "]", "[", "i", "*", "max_word_len", "+", "cj", "]", "+", "1", "\n", "\n", "", "", "batch_with_masks", ".", "append", "(", "target_char_mask", ")", "\n", "batch_with_masks", ".", "append", "(", "target_resample_matrix", ")", "\n", "batch_with_masks", ".", "append", "(", "target_prev_char_seq", ")", "\n", "batch_with_masks", ".", "append", "(", "target_prev_char_aux", ")", "\n", "", "", "return", "tuple", "(", "batch_with_masks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.stream._oov_to_unk.__init__": [[159, 164], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "src_vocab_size", "=", "120", ",", "trg_vocab_size", "=", "120", ",", "\n", "unk_id", "=", "1", ")", ":", "\n", "        ", "self", ".", "src_vocab_size", "=", "src_vocab_size", "\n", "self", ".", "trg_vocab_size", "=", "trg_vocab_size", "\n", "self", ".", "unk_id", "=", "unk_id", "\n", "\n"]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.stream._oov_to_unk.__call__": [[165, 170], ["None"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sentence_pair", ")", ":", "\n", "        ", "return", "(", "[", "x", "if", "x", "<", "self", ".", "src_vocab_size", "else", "self", ".", "unk_id", "\n", "for", "x", "in", "sentence_pair", "[", "0", "]", "]", ",", "\n", "[", "x", "if", "x", "<", "self", ".", "trg_vocab_size", "else", "self", ".", "unk_id", "\n", "for", "x", "in", "sentence_pair", "[", "1", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.stream._too_long.__init__": [[175, 183], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "unk_id", ",", "space_idx", ",", "max_src_seq_char_len", ",", "max_src_seq_word_len", ",", "\n", "max_trg_seq_char_len", ",", "max_trg_seq_word_len", ")", ":", "\n", "        ", "self", ".", "unk_id", "=", "unk_id", "\n", "self", ".", "max_src_seq_char_len", "=", "max_src_seq_char_len", "\n", "self", ".", "max_src_seq_word_len", "=", "max_src_seq_word_len", "\n", "self", ".", "max_trg_seq_char_len", "=", "max_trg_seq_char_len", "\n", "self", ".", "max_trg_seq_word_len", "=", "max_trg_seq_word_len", "\n", "self", ".", "space_idx", "=", "space_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.stream._too_long.__call__": [[184, 191], ["all", "len", "sentence_pair[].count", "sentence_pair[].count", "len", "sentence_pair[].count", "sentence_pair[].count"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sentence_pair", ")", ":", "\n", "        ", "max_unk", "=", "5", "\n", "return", "all", "(", "\n", "[", "len", "(", "sentence_pair", "[", "0", "]", ")", "<=", "self", ".", "max_src_seq_char_len", "and", "sentence_pair", "[", "0", "]", ".", "count", "(", "self", ".", "unk_id", ")", "<", "max_unk", "and", "\n", "sentence_pair", "[", "0", "]", ".", "count", "(", "self", ".", "space_idx", "[", "0", "]", ")", "<", "self", ".", "max_src_seq_word_len", ",", "\n", "len", "(", "sentence_pair", "[", "1", "]", ")", "<=", "self", ".", "max_trg_seq_char_len", "and", "sentence_pair", "[", "1", "]", ".", "count", "(", "self", ".", "unk_id", ")", "<", "max_unk", "and", "\n", "sentence_pair", "[", "1", "]", ".", "count", "(", "self", ".", "space_idx", "[", "1", "]", ")", "<", "self", ".", "max_trg_seq_word_len", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.stream._ensure_special_tokens": [[13, 26], ["vocab.pop", "vocab.items"], "function", ["None"], ["def", "_ensure_special_tokens", "(", "vocab", ",", "bos_idx", "=", "0", ",", "eos_idx", "=", "0", ",", "unk_idx", "=", "1", ")", ":", "\n", "    ", "\"\"\"Ensures special tokens exist in the dictionary.\"\"\"", "\n", "\n", "# remove tokens if they exist in some other index", "\n", "tokens_to_remove", "=", "[", "k", "for", "k", ",", "v", "in", "vocab", ".", "items", "(", ")", "\n", "if", "v", "in", "[", "bos_idx", ",", "eos_idx", ",", "unk_idx", "]", "]", "\n", "for", "token", "in", "tokens_to_remove", ":", "\n", "        ", "vocab", ".", "pop", "(", "token", ")", "\n", "# put corresponding item", "\n", "", "vocab", "[", "'<S>'", "]", "=", "bos_idx", "\n", "vocab", "[", "'</S>'", "]", "=", "eos_idx", "\n", "vocab", "[", "'<UNK>'", "]", "=", "unk_idx", "\n", "return", "vocab", "\n", "\n"]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.stream._length": [[28, 31], ["len"], "function", ["None"], ["", "def", "_length", "(", "sentence_pair", ")", ":", "\n", "    ", "\"\"\"Assumes target is the last element in the tuple.\"\"\"", "\n", "return", "len", "(", "sentence_pair", "[", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.stream.get_tr_stream": [[193, 249], ["stream._ensure_special_tokens", "stream._ensure_special_tokens", "stream.TextFileWithSEOSS", "stream.TextFileWithSEOSS", "fuel.transformers.Merge", "fuel.transformers.Filter", "fuel.transformers.Mapping", "fuel.transformers.Batch", "fuel.transformers.Mapping", "fuel.transformers.Unpack", "fuel.transformers.Batch", "stream.PaddingWithEOS", "stream._oov_to_unk", "fuel.transformers.SortMapping", "isinstance", "pickle.load", "isinstance", "pickle.load", "TextFileWithSEOSS.get_example_stream", "TextFileWithSEOSS.get_example_stream", "stream._too_long", "fuel.schemes.ConstantScheme", "fuel.schemes.ConstantScheme", "open", "open"], "function", ["home.repos.pwc.inspect_result.SwordYork_DCNMT.None.stream._ensure_special_tokens", "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.stream._ensure_special_tokens", "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.sampling.SamplingBase._oov_to_unk"], ["", "", "def", "get_tr_stream", "(", "src_vocab", ",", "trg_vocab", ",", "src_data", ",", "trg_data", ",", "\n", "src_vocab_size", "=", "120", ",", "trg_vocab_size", "=", "120", ",", "unk_id", "=", "1", ",", "bos_token", "=", "'<S>'", ",", "max_src_seq_char_len", "=", "300", ",", "\n", "max_src_seq_word_len", "=", "50", ",", "max_trg_seq_char_len", "=", "300", ",", "max_trg_seq_word_len", "=", "50", ",", "\n", "batch_size", "=", "80", ",", "sort_k_batches", "=", "12", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Prepares the training data stream.\"\"\"", "\n", "\n", "# Load dictionaries and ensure special tokens exist", "\n", "src_vocab", "=", "_ensure_special_tokens", "(", "\n", "src_vocab", "if", "isinstance", "(", "src_vocab", ",", "dict", ")", "\n", "else", "pickle", ".", "load", "(", "open", "(", "src_vocab", ",", "'rb'", ")", ")", ",", "\n", "bos_idx", "=", "0", ",", "eos_idx", "=", "src_vocab_size", "-", "1", ",", "unk_idx", "=", "unk_id", ")", "\n", "\n", "trg_vocab", "=", "_ensure_special_tokens", "(", "\n", "trg_vocab", "if", "isinstance", "(", "trg_vocab", ",", "dict", ")", "else", "\n", "pickle", ".", "load", "(", "open", "(", "trg_vocab", ",", "'rb'", ")", ")", ",", "\n", "bos_idx", "=", "0", ",", "eos_idx", "=", "trg_vocab_size", "-", "1", ",", "unk_idx", "=", "unk_id", ")", "\n", "\n", "# Get text files from both source and target", "\n", "src_dataset", "=", "TextFileWithSEOSS", "(", "[", "src_data", "]", ",", "src_vocab", ",", "None", ",", "level", "=", "'character'", ")", "\n", "trg_dataset", "=", "TextFileWithSEOSS", "(", "[", "trg_data", "]", ",", "trg_vocab", ",", "None", ",", "level", "=", "'character'", ")", "\n", "\n", "# Merge them to get a source, target pair", "\n", "stream", "=", "Merge", "(", "[", "src_dataset", ".", "get_example_stream", "(", ")", ",", "\n", "trg_dataset", ".", "get_example_stream", "(", ")", "]", ",", "\n", "(", "'source'", ",", "'target'", ")", ")", "\n", "\n", "# Filter sequences that are too long", "\n", "stream", "=", "Filter", "(", "stream", ",", "predicate", "=", "_too_long", "(", "unk_id", ",", "[", "src_vocab", "[", "' '", "]", ",", "trg_vocab", "[", "' '", "]", "]", ",", "\n", "max_src_seq_char_len", ",", "max_src_seq_word_len", ",", "\n", "max_trg_seq_char_len", ",", "max_trg_seq_word_len", ")", ")", "\n", "\n", "# Replace out of vocabulary tokens with unk token", "\n", "stream", "=", "Mapping", "(", "stream", ",", "\n", "_oov_to_unk", "(", "src_vocab_size", "=", "src_vocab_size", ",", "\n", "trg_vocab_size", "=", "trg_vocab_size", ",", "\n", "unk_id", "=", "unk_id", ")", ")", "\n", "\n", "# Build a batched version of stream to read k batches ahead", "\n", "stream", "=", "Batch", "(", "stream", ",", "\n", "iteration_scheme", "=", "ConstantScheme", "(", "\n", "batch_size", "*", "sort_k_batches", ")", ")", "\n", "\n", "# Sort all samples in the read-ahead batch", "\n", "stream", "=", "Mapping", "(", "stream", ",", "SortMapping", "(", "_length", ")", ")", "\n", "\n", "# Convert it into a stream again", "\n", "stream", "=", "Unpack", "(", "stream", ")", "\n", "# Construct batches from the stream with specified batch size", "\n", "stream", "=", "Batch", "(", "\n", "stream", ",", "iteration_scheme", "=", "ConstantScheme", "(", "batch_size", ")", ")", "\n", "\n", "# Pad sequences that are short", "\n", "masked_stream", "=", "PaddingWithEOS", "(", "stream", ",", "{", "'source'", ":", "src_vocab", "[", "' '", "]", ",", "'target'", ":", "trg_vocab", "[", "' '", "]", "}", ",", "trg_vocab", "[", "bos_token", "]", ",", "\n", "mask_dtype", "=", "'int8'", ")", "\n", "\n", "return", "masked_stream", "\n", "\n"]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.stream.get_dev_stream": [[251, 263], ["stream._ensure_special_tokens", "stream.TextFileWithSEOSS", "fuel.streams.DataStream", "isinstance", "pickle.load", "open"], "function", ["home.repos.pwc.inspect_result.SwordYork_DCNMT.None.stream._ensure_special_tokens"], ["", "def", "get_dev_stream", "(", "val_set", "=", "None", ",", "src_vocab", "=", "None", ",", "src_vocab_size", "=", "120", ",", "\n", "unk_id", "=", "1", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Setup development set stream if necessary.\"\"\"", "\n", "dev_stream", "=", "None", "\n", "if", "val_set", "is", "not", "None", "and", "src_vocab", "is", "not", "None", ":", "\n", "        ", "src_vocab", "=", "_ensure_special_tokens", "(", "\n", "src_vocab", "if", "isinstance", "(", "src_vocab", ",", "dict", ")", "else", "\n", "pickle", ".", "load", "(", "open", "(", "src_vocab", ",", "'rb'", ")", ")", ",", "\n", "bos_idx", "=", "0", ",", "eos_idx", "=", "src_vocab_size", "-", "1", ",", "unk_idx", "=", "unk_id", ")", "\n", "dev_src_dataset", "=", "TextFileWithSEOSS", "(", "[", "val_set", "]", ",", "src_vocab", ",", "None", ",", "level", "=", "'character'", ")", "\n", "dev_stream", "=", "DataStream", "(", "dev_src_dataset", ")", "\n", "", "return", "dev_stream", "\n", "\n"]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.stream.get_test_stream": [[265, 288], ["stream._ensure_special_tokens", "stream._ensure_special_tokens", "stream.TextFileWithSEOSS", "fuel.streams.DataStream", "isinstance", "pickle.load", "isinstance", "pickle.load", "open", "open"], "function", ["home.repos.pwc.inspect_result.SwordYork_DCNMT.None.stream._ensure_special_tokens", "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.stream._ensure_special_tokens"], ["", "def", "get_test_stream", "(", "test_set", "=", "None", ",", "src_vocab", "=", "None", ",", "trg_vocab", "=", "None", ",", "src_vocab_size", "=", "120", ",", "trg_vocab_size", "=", "120", ",", "unk_id", "=", "1", ",", "\n", "bos_token", "=", "'<S>'", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Setup development set stream if necessary.\"\"\"", "\n", "test_stream", "=", "None", "\n", "if", "test_set", "is", "not", "None", "and", "src_vocab", "is", "not", "None", "and", "trg_vocab", "is", "not", "None", ":", "\n", "        ", "src_vocab", "=", "_ensure_special_tokens", "(", "\n", "src_vocab", "if", "isinstance", "(", "src_vocab", ",", "dict", ")", "else", "\n", "pickle", ".", "load", "(", "open", "(", "src_vocab", ",", "'rb'", ")", ")", ",", "\n", "bos_idx", "=", "0", ",", "eos_idx", "=", "src_vocab_size", "-", "1", ",", "unk_idx", "=", "unk_id", ")", "\n", "\n", "trg_vocab", "=", "_ensure_special_tokens", "(", "\n", "trg_vocab", "if", "isinstance", "(", "trg_vocab", ",", "dict", ")", "else", "\n", "pickle", ".", "load", "(", "open", "(", "trg_vocab", ",", "'rb'", ")", ")", ",", "\n", "bos_idx", "=", "0", ",", "eos_idx", "=", "trg_vocab_size", "-", "1", ",", "unk_idx", "=", "unk_id", ")", "\n", "\n", "test_src_dataset", "=", "TextFileWithSEOSS", "(", "[", "test_set", "]", ",", "src_vocab", ",", "None", ",", "level", "=", "'character'", ")", "\n", "test_stream", "=", "DataStream", "(", "test_src_dataset", ")", "\n", "test_stream", ".", "space_idx", "=", "{", "'source'", ":", "src_vocab", "[", "' '", "]", ",", "'target'", ":", "trg_vocab", "[", "' '", "]", "}", "\n", "test_stream", ".", "trg_bos", "=", "trg_vocab", "[", "bos_token", "]", "\n", "test_stream", ".", "trg_vocab", "=", "trg_vocab", "\n", "test_stream", ".", "eos_token", "=", "'</S>'", "\n", "\n", "", "return", "test_stream", "\n", "\n"]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.visual.plot_curve.smooth": [[4, 26], ["numpy.convolve", "ValueError", "ValueError", "ValueError", "numpy.ones", "eval", "eval.sum"], "function", ["None"], ["def", "smooth", "(", "x", ",", "window_len", "=", "11", ",", "window", "=", "'hanning'", ")", ":", "\n", "\n", "    ", "if", "x", ".", "ndim", "!=", "1", ":", "\n", "        ", "raise", "ValueError", "(", "\"smooth only accepts 1 dimension arrays.\"", ")", "\n", "\n", "", "if", "x", ".", "size", "<", "window_len", ":", "\n", "        ", "raise", "ValueError", "(", "\"Input vector needs to be bigger than window size.\"", ")", "\n", "\n", "", "if", "window_len", "<", "3", ":", "\n", "        ", "return", "x", "\n", "\n", "", "if", "not", "window", "in", "[", "'flat'", ",", "'hanning'", ",", "'hamming'", ",", "'bartlett'", ",", "'blackman'", "]", ":", "\n", "        ", "raise", "ValueError", "(", "\"Window is on of 'flat', 'hanning', 'hamming', 'bartlett', 'blackman'\"", ")", "\n", "\n", "", "s", "=", "numpy", ".", "r_", "[", "x", "[", "window_len", "-", "1", ":", "0", ":", "-", "1", "]", ",", "x", ",", "x", "[", "-", "1", ":", "-", "window_len", ":", "-", "1", "]", "]", "\n", "if", "window", "==", "'flat'", ":", "#moving average", "\n", "        ", "w", "=", "numpy", ".", "ones", "(", "window_len", ",", "'d'", ")", "\n", "", "else", ":", "\n", "        ", "w", "=", "eval", "(", "'numpy.'", "+", "window", "+", "'(window_len)'", ")", "\n", "\n", "", "y", "=", "numpy", ".", "convolve", "(", "w", "/", "w", ".", "sum", "(", ")", ",", "s", ",", "mode", "=", "'valid'", ")", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.visual.embedding.build_input_dict": [[23, 39], ["len", "numpy.array", "list().count", "numpy.zeros", "numpy.ones", "list", "range", "numpy.nonzero"], "function", ["None"], ["def", "build_input_dict", "(", "input_", ",", "src_vocab", ")", ":", "\n", "    ", "input_length", "=", "len", "(", "input_", ")", "\n", "input_", "=", "numpy", ".", "array", "(", "[", "src_vocab", "[", "i", "]", "for", "i", "in", "input_", "]", ")", "\n", "\n", "total_word", "=", "list", "(", "input_", ")", ".", "count", "(", "src_vocab", "[", "' '", "]", ")", "\n", "\n", "source_sample_matrix", "=", "numpy", ".", "zeros", "(", "(", "total_word", ",", "input_length", ")", ",", "dtype", "=", "'int8'", ")", "\n", "source_sample_matrix", "[", "range", "(", "total_word", ")", ",", "numpy", ".", "nonzero", "(", "input_", "==", "src_vocab", "[", "' '", "]", ")", "[", "0", "]", "-", "1", "]", "=", "1", "\n", "\n", "source_char_aux", "=", "numpy", ".", "ones", "(", "input_length", ",", "dtype", "=", "'int8'", ")", "\n", "source_char_aux", "[", "input_", "==", "src_vocab", "[", "' '", "]", "]", "=", "0", "\n", "\n", "input_dict", "=", "{", "'source_sample_matrix'", ":", "source_sample_matrix", "[", "None", ",", ":", "]", ",", "\n", "'source_char_aux'", ":", "source_char_aux", "[", "None", ",", ":", "]", ",", "\n", "'source_char_seq'", ":", "input_", "[", "None", ",", ":", "]", "}", "\n", "return", "input_length", ",", "input_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.visual.embedding.plot_embedding": [[42, 63], ["matplotlib.figure", "range", "numpy.min", "numpy.max", "matplotlib.xticks", "matplotlib.yticks", "matplotlib.title", "str", "matplotlib.text", "str", "matplotlib.text", "matplotlib.text", "str", "str", "str", "str"], "function", ["None"], ["", "def", "plot_embedding", "(", "X", ",", "Y", ",", "title", "=", "None", ")", ":", "\n", "    ", "x_min", ",", "x_max", "=", "numpy", ".", "min", "(", "X", ",", "0", ")", ",", "numpy", ".", "max", "(", "X", ",", "0", ")", "\n", "X", "=", "(", "X", "-", "x_min", ")", "/", "(", "x_max", "-", "x_min", ")", "\n", "\n", "plt", ".", "figure", "(", ")", "\n", "for", "i", "in", "range", "(", "X", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "if", "str", "(", "Y", "[", "i", "]", ")", "in", "[", "'Sunday '", ",", "'March '", ",", "'June '", ",", "'January '", ",", "'February '", ",", "\n", "'April '", ",", "'May '", ",", "'July '", ",", "'August '", ",", "'September '", ",", "\n", "'October '", ",", "'November '", ",", "'December '", "]", ":", "\n", "            ", "plt", ".", "text", "(", "X", "[", "i", ",", "0", "]", ",", "X", "[", "i", ",", "1", "]", ",", "str", "(", "Y", "[", "i", "]", ")", ",", "\n", "fontdict", "=", "{", "'weight'", ":", "'bold'", ",", "'size'", ":", "18", ",", "'color'", ":", "'blue'", "}", ")", "\n", "", "elif", "str", "(", "Y", "[", "i", "]", ")", "!=", "'exercise '", "and", "str", "(", "Y", "[", "i", "]", ")", "!=", "'exrecise '", ":", "\n", "            ", "plt", ".", "text", "(", "X", "[", "i", ",", "0", "]", ",", "X", "[", "i", ",", "1", "]", ",", "str", "(", "Y", "[", "i", "]", ")", ",", "\n", "fontdict", "=", "{", "'size'", ":", "18", "}", ")", "\n", "", "else", ":", "\n", "            ", "plt", ".", "text", "(", "X", "[", "i", ",", "0", "]", ",", "X", "[", "i", ",", "1", "]", ",", "str", "(", "Y", "[", "i", "]", ")", ",", "\n", "fontdict", "=", "{", "'weight'", ":", "'bold'", ",", "'size'", ":", "18", ",", "'color'", ":", "'red'", "}", ")", "\n", "\n", "", "", "plt", ".", "xticks", "(", "[", "]", ")", ",", "plt", ".", "yticks", "(", "[", "]", ")", "\n", "if", "title", "is", "not", "None", ":", "\n", "        ", "plt", ".", "title", "(", "title", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.visual.embedding.embedding": [[65, 94], ["embedding_model.get_theano_function", "open.read", "f.read.strip().split", "open.close", "numpy.array", "print", "print", "sklearn.manifold.TSNE", "manifold.TSNE.fit_transform", "embedding.plot_embedding", "matplotlib.show", "open", "embedding.build_input_dict", "numpy.array.append", "Y.append", "print", "exit", "f.read.strip", "embedding_model.get_theano_function."], "function", ["home.repos.pwc.inspect_result.SwordYork_DCNMT.visual.embedding.plot_embedding", "home.repos.pwc.inspect_result.SwordYork_DCNMT.visual.embedding.build_input_dict"], ["", "", "def", "embedding", "(", "embedding_model", ",", "src_vocab", ")", ":", "\n", "    ", "sampling_fn", "=", "embedding_model", ".", "get_theano_function", "(", ")", "\n", "try", ":", "\n", "        ", "f", "=", "open", "(", "'wordlist'", ")", "\n", "", "except", "FileNotFoundError", ":", "\n", "        ", "print", "(", "'Please create a file named wordlist, and one word per line in this file'", ")", "\n", "exit", "(", "0", ")", "\n", "", "s", "=", "f", ".", "read", "(", ")", "\n", "core_list", "=", "s", ".", "strip", "(", ")", ".", "split", "(", "'\\n'", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "X", "=", "[", "]", "\n", "Y", "=", "[", "]", "\n", "for", "word", "in", "core_list", ":", "\n", "        ", "word", "+=", "' '", "\n", "_", ",", "input_dict", "=", "build_input_dict", "(", "word", ",", "src_vocab", ")", "\n", "w_v", "=", "sampling_fn", "(", "**", "input_dict", ")", "[", "0", "]", "[", "0", "]", "[", "0", "]", "\n", "X", ".", "append", "(", "w_v", ")", "\n", "Y", ".", "append", "(", "word", ")", "\n", "", "X", "=", "numpy", ".", "array", "(", "X", ")", "\n", "print", "(", "X", ".", "shape", ")", "\n", "\n", "# t-SNE embedding of the digits dataset", "\n", "print", "(", "\"Computing t-SNE embedding\"", ")", "\n", "tsne", "=", "manifold", ".", "TSNE", "(", "n_components", "=", "2", ",", "init", "=", "'pca'", ",", "random_state", "=", "0", ")", "\n", "X_tsne", "=", "tsne", ".", "fit_transform", "(", "X", ")", "\n", "\n", "plot_embedding", "(", "X_tsne", ",", "Y", ",", "\"t-SNE embedding of the words\"", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.visual.embedding.main": [[96, 153], ["logger.info", "theano.tensor.lmatrix", "theano.tensor.btensor3", "theano.tensor.bmatrix", "theano.tensor.bmatrix", "theano.tensor.lmatrix", "theano.tensor.bmatrix", "theano.tensor.bmatrix", "theano.tensor.btensor3", "theano.tensor.bmatrix", "theano.tensor.btensor3", "theano.tensor.lmatrix", "theano.tensor.bmatrix", "pickle.load", "logger.info", "model.BidirectionalEncoder", "model.Decoder", "model.BidirectionalEncoder.apply", "model.Decoder.cost", "logger.info", "blocks.model.Model", "logger.info", "logger.info", "blocks.main_loop.MainLoop", "blocks.main_loop.MainLoop._run_extensions", "model.BidirectionalEncoder.decimator.apply", "embedding.embedding", "open", "checkpoint.LoadNMT", "blocks.model.Model"], "function", ["home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.UpperIGRU.apply", "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.Decoder.cost", "home.repos.pwc.inspect_result.SwordYork_DCNMT.None.model.UpperIGRU.apply", "home.repos.pwc.inspect_result.SwordYork_DCNMT.visual.embedding.embedding"], ["", "def", "main", "(", "config", ",", "tr_stream", ")", ":", "\n", "# Create Theano variables", "\n", "    ", "logger", ".", "info", "(", "'Creating theano variables'", ")", "\n", "source_char_seq", "=", "tensor", ".", "lmatrix", "(", "'source_char_seq'", ")", "\n", "source_sample_matrix", "=", "tensor", ".", "btensor3", "(", "'source_sample_matrix'", ")", "\n", "source_char_aux", "=", "tensor", ".", "bmatrix", "(", "'source_char_aux'", ")", "\n", "source_word_mask", "=", "tensor", ".", "bmatrix", "(", "'source_word_mask'", ")", "\n", "target_char_seq", "=", "tensor", ".", "lmatrix", "(", "'target_char_seq'", ")", "\n", "target_char_aux", "=", "tensor", ".", "bmatrix", "(", "'target_char_aux'", ")", "\n", "target_char_mask", "=", "tensor", ".", "bmatrix", "(", "'target_char_mask'", ")", "\n", "target_sample_matrix", "=", "tensor", ".", "btensor3", "(", "'target_sample_matrix'", ")", "\n", "target_word_mask", "=", "tensor", ".", "bmatrix", "(", "'target_word_mask'", ")", "\n", "target_resample_matrix", "=", "tensor", ".", "btensor3", "(", "'target_resample_matrix'", ")", "\n", "target_prev_char_seq", "=", "tensor", ".", "lmatrix", "(", "'target_prev_char_seq'", ")", "\n", "target_prev_char_aux", "=", "tensor", ".", "bmatrix", "(", "'target_prev_char_aux'", ")", "\n", "target_bos_idx", "=", "tr_stream", ".", "trg_bos", "\n", "target_space_idx", "=", "tr_stream", ".", "space_idx", "[", "'target'", "]", "\n", "src_vocab", "=", "pickle", ".", "load", "(", "open", "(", "config", "[", "'src_vocab'", "]", ",", "'rb'", ")", ")", "\n", "\n", "logger", ".", "info", "(", "'Building RNN encoder-decoder'", ")", "\n", "encoder", "=", "BidirectionalEncoder", "(", "config", "[", "'src_vocab_size'", "]", ",", "config", "[", "'enc_embed'", "]", ",", "config", "[", "'src_dgru_nhids'", "]", ",", "\n", "config", "[", "'enc_nhids'", "]", ",", "config", "[", "'src_dgru_depth'", "]", ",", "config", "[", "'bidir_encoder_depth'", "]", ")", "\n", "\n", "decoder", "=", "Decoder", "(", "config", "[", "'trg_vocab_size'", "]", ",", "config", "[", "'dec_embed'", "]", ",", "config", "[", "'trg_dgru_nhids'", "]", ",", "config", "[", "'trg_igru_nhids'", "]", ",", "\n", "config", "[", "'dec_nhids'", "]", ",", "config", "[", "'enc_nhids'", "]", "*", "2", ",", "config", "[", "'transition_depth'", "]", ",", "config", "[", "'trg_igru_depth'", "]", ",", "\n", "config", "[", "'trg_dgru_depth'", "]", ",", "target_space_idx", ",", "target_bos_idx", ")", "\n", "\n", "representation", "=", "encoder", ".", "apply", "(", "source_char_seq", ",", "source_sample_matrix", ",", "source_char_aux", ",", "\n", "source_word_mask", ")", "\n", "cost", "=", "decoder", ".", "cost", "(", "representation", ",", "source_word_mask", ",", "target_char_seq", ",", "target_sample_matrix", ",", "\n", "target_resample_matrix", ",", "target_char_aux", ",", "target_char_mask", ",", "\n", "target_word_mask", ",", "target_prev_char_seq", ",", "target_prev_char_aux", ")", "\n", "\n", "# Set up model", "\n", "logger", ".", "info", "(", "\"Building model\"", ")", "\n", "training_model", "=", "Model", "(", "cost", ")", "\n", "\n", "# Set extensions", "\n", "logger", ".", "info", "(", "\"Initializing extensions\"", ")", "\n", "# Reload model if necessary", "\n", "extensions", "=", "[", "LoadNMT", "(", "config", "[", "'saveto'", "]", ")", "]", "\n", "\n", "# Initialize main loop", "\n", "logger", ".", "info", "(", "\"Initializing main loop\"", ")", "\n", "main_loop", "=", "MainLoop", "(", "\n", "model", "=", "training_model", ",", "\n", "algorithm", "=", "None", ",", "\n", "data_stream", "=", "None", ",", "\n", "extensions", "=", "extensions", "\n", ")", "\n", "\n", "for", "extension", "in", "main_loop", ".", "extensions", ":", "\n", "        ", "extension", ".", "main_loop", "=", "main_loop", "\n", "", "main_loop", ".", "_run_extensions", "(", "'before_training'", ")", "\n", "\n", "char_embedding", "=", "encoder", ".", "decimator", ".", "apply", "(", "source_char_seq", ".", "T", ",", "source_sample_matrix", ",", "source_char_aux", ".", "T", ")", "\n", "embedding", "(", "Model", "(", "char_embedding", ")", ",", "src_vocab", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.preprocess.shuffle_data.merge_parallel": [[12, 21], ["open", "open", "open", "picklable_itertools.extras.equizip", "final.write"], "function", ["None"], ["def", "merge_parallel", "(", "src_filename", ",", "trg_filename", ",", "merged_filename", ")", ":", "\n", "    ", "total", "=", "0", "\n", "with", "open", "(", "src_filename", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "left", ":", "\n", "        ", "with", "open", "(", "trg_filename", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "right", ":", "\n", "            ", "with", "open", "(", "merged_filename", ",", "'w'", ")", "as", "final", ":", "\n", "                ", "for", "lline", ",", "rline", "in", "equizip", "(", "left", ",", "right", ")", ":", "\n", "                    ", "if", "(", "lline", "!=", "'\\n'", ")", "and", "(", "rline", "!=", "'\\n'", ")", ":", "\n", "                        ", "total", "+=", "1", "\n", "final", ".", "write", "(", "lline", "[", ":", "-", "1", "]", "+", "' ||| '", "+", "rline", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.preprocess.shuffle_data.split_parallel": [[23, 33], ["open", "open", "open", "line.split.split", "left.write", "right.write", "line[].strip", "line[].strip"], "function", ["None"], ["", "", "", "", "", "", "def", "split_parallel", "(", "merged_filename", ",", "src_filename", ",", "trg_filename", ")", ":", "\n", "    ", "total", "=", "0", "\n", "with", "open", "(", "merged_filename", ")", "as", "combined", ":", "\n", "        ", "with", "open", "(", "src_filename", ",", "'w'", ")", "as", "left", ":", "\n", "            ", "with", "open", "(", "trg_filename", ",", "'w'", ")", "as", "right", ":", "\n", "                ", "for", "line", "in", "combined", ":", "\n", "                    ", "total", "+=", "1", "\n", "line", "=", "line", ".", "split", "(", "'|||'", ")", "\n", "left", ".", "write", "(", "line", "[", "0", "]", ".", "strip", "(", ")", "+", "'\\n'", ")", "\n", "right", ".", "write", "(", "line", "[", "1", "]", ".", "strip", "(", ")", "+", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.preprocess.shuffle_data.shuffle_parallel": [[35, 59], ["logger.info", "str", "str", "os.path.exists", "os.path.exists", "uuid.uuid4", "uuid.uuid4", "logger.info", "os.remove", "os.remove", "os.path.exists", "os.path.exists", "shuffle_data.merge_parallel", "subprocess.check_call", "shuffle_data.split_parallel", "logger.info", "logger.error", "str"], "function", ["home.repos.pwc.inspect_result.SwordYork_DCNMT.preprocess.shuffle_data.merge_parallel", "home.repos.pwc.inspect_result.SwordYork_DCNMT.preprocess.shuffle_data.split_parallel"], ["", "", "", "", "", "def", "shuffle_parallel", "(", "src_filename", ",", "trg_filename", ")", ":", "\n", "    ", "logger", ".", "info", "(", "\"Shuffling jointly [{}] and [{}]\"", ".", "format", "(", "src_filename", ",", "\n", "trg_filename", ")", ")", "\n", "out_src", "=", "src_filename", "+", "'.shuf'", "\n", "out_trg", "=", "trg_filename", "+", "'.shuf'", "\n", "merged_filename", "=", "str", "(", "uuid", ".", "uuid4", "(", ")", ")", "\n", "shuffled_filename", "=", "str", "(", "uuid", ".", "uuid4", "(", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "out_src", ")", "or", "not", "os", ".", "path", ".", "exists", "(", "out_trg", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "merge_parallel", "(", "src_filename", ",", "trg_filename", ",", "merged_filename", ")", "\n", "subprocess", ".", "check_call", "(", "\n", "\" shuf {} > {} \"", ".", "format", "(", "merged_filename", ",", "shuffled_filename", ")", ",", "\n", "shell", "=", "True", ")", "\n", "split_parallel", "(", "shuffled_filename", ",", "out_src", ",", "out_trg", ")", "\n", "logger", ".", "info", "(", "\n", "\"...files shuffled [{}] and [{}]\"", ".", "format", "(", "out_src", ",", "out_trg", ")", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "logger", ".", "error", "(", "\"{}\"", ".", "format", "(", "str", "(", "e", ")", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "logger", ".", "info", "(", "\"...files exist [{}] and [{}]\"", ".", "format", "(", "out_src", ",", "out_trg", ")", ")", "\n", "", "if", "os", ".", "path", ".", "exists", "(", "merged_filename", ")", ":", "\n", "        ", "os", ".", "remove", "(", "merged_filename", ")", "\n", "", "if", "os", ".", "path", ".", "exists", "(", "shuffled_filename", ")", ":", "\n", "        ", "os", ".", "remove", "(", "shuffled_filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.preprocess.create_vocab.safe_pickle": [[11, 18], ["os.path.isfile", "logger.info", "logger.info", "open", "pickle.dump"], "function", ["home.repos.pwc.inspect_result.SwordYork_DCNMT.None.checkpoint.CheckpointNMT.dump"], ["def", "safe_pickle", "(", "obj", ",", "filename", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "isfile", "(", "filename", ")", ":", "\n", "        ", "logger", ".", "info", "(", "\"Overwriting %s.\"", "%", "filename", ")", "\n", "", "else", ":", "\n", "        ", "logger", ".", "info", "(", "\"Saving to %s.\"", "%", "filename", ")", "\n", "", "with", "open", "(", "filename", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "obj", ",", "f", ",", "protocol", "=", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.preprocess.create_vocab.create_dictionary": [[20, 52], ["os.path.basename", "logger.info", "collections.Counter", "logger.info", "enumerate", "print", "create_vocab.safe_pickle", "list", "collections.Counter.update", "collections.Counter.most_common", "logger.info", "logger.info", "collections.Counter.most_common", "line.strip", "logger.info", "len", "sum", "len", "collections.Counter.values", "sum", "sum", "collections.Counter.values"], "function", ["home.repos.pwc.inspect_result.SwordYork_DCNMT.preprocess.create_vocab.safe_pickle"], ["", "", "def", "create_dictionary", "(", "input_file", ",", "dictionary_file", ",", "vocab_size", ")", ":", "\n", "    ", "input_filename", "=", "os", ".", "path", ".", "basename", "(", "input_file", ".", "name", ")", "\n", "logger", ".", "info", "(", "\"Counting words in %s\"", "%", "input_filename", ")", "\n", "counter", "=", "Counter", "(", ")", "\n", "sentence_count", "=", "0", "\n", "for", "line", "in", "input_file", ":", "\n", "        ", "words", "=", "list", "(", "line", ".", "strip", "(", ")", ")", "\n", "counter", ".", "update", "(", "words", ")", "\n", "sentence_count", "+=", "1", "\n", "", "logger", ".", "info", "(", "\"%d unique words in %d sentences with a total of %d words.\"", "\n", "%", "(", "len", "(", "counter", ")", ",", "sentence_count", ",", "sum", "(", "counter", ".", "values", "(", ")", ")", ")", ")", "\n", "\n", "if", "vocab_size", "is", "not", "None", ":", "\n", "        ", "if", "vocab_size", "<=", "3", ":", "\n", "            ", "logger", ".", "info", "(", "'Building a dictionary with all unique words'", ")", "\n", "vocab_size", "=", "len", "(", "counter", ")", "+", "3", "\n", "", "vocab_count", "=", "counter", ".", "most_common", "(", "vocab_size", "-", "3", ")", "\n", "logger", ".", "info", "(", "\"Creating dictionary of %s most common words, covering \"", "\n", "\"%2.1f%% of the text.\"", "\n", "%", "(", "vocab_size", ",", "\n", "100.0", "*", "sum", "(", "[", "count", "for", "word", ",", "count", "in", "vocab_count", "]", ")", "/", "\n", "sum", "(", "counter", ".", "values", "(", ")", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "logger", ".", "info", "(", "\"Creating dictionary of all words\"", ")", "\n", "vocab_count", "=", "counter", ".", "most_common", "(", ")", "\n", "\n", "", "vocab", "=", "{", "'UNK'", ":", "1", ",", "'<S>'", ":", "0", ",", "'</S>'", ":", "vocab_size", "-", "1", "}", "\n", "for", "i", ",", "(", "word", ",", "count", ")", "in", "enumerate", "(", "vocab_count", ")", ":", "\n", "        ", "vocab", "[", "word", "]", "=", "i", "+", "2", "\n", "\n", "", "print", "(", "counter", ",", "vocab_count", ")", "\n", "safe_pickle", "(", "vocab", ",", "dictionary_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SwordYork_DCNMT.preprocess.create_vocab.create_vocabularies": [[54, 71], ["logger.info", "logger.info", "os.path.exists", "create_vocab.create_dictionary", "logger.info", "os.path.exists", "create_vocab.create_dictionary", "logger.info", "open", "open"], "function", ["home.repos.pwc.inspect_result.SwordYork_DCNMT.preprocess.create_vocab.create_dictionary", "home.repos.pwc.inspect_result.SwordYork_DCNMT.preprocess.create_vocab.create_dictionary"], ["", "def", "create_vocabularies", "(", "src_file", ",", "trg_file", ",", "config", ")", ":", "\n", "    ", "src_vocab_name", "=", "'vocab.{}-{}.{}.pkl'", ".", "format", "(", "\n", "config", "[", "'source'", "]", ",", "config", "[", "'target'", "]", ",", "config", "[", "'source'", "]", ")", "\n", "trg_vocab_name", "=", "'vocab.{}-{}.{}.pkl'", ".", "format", "(", "\n", "config", "[", "'source'", "]", ",", "config", "[", "'target'", "]", ",", "config", "[", "'target'", "]", ")", "\n", "\n", "logger", ".", "info", "(", "\"Creating source vocabulary [{}]\"", ".", "format", "(", "src_vocab_name", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "src_vocab_name", ")", ":", "\n", "        ", "create_dictionary", "(", "open", "(", "src_file", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", ",", "src_vocab_name", ",", "config", "[", "'src_vocab_size'", "]", ")", "\n", "", "else", ":", "\n", "        ", "logger", ".", "info", "(", "\"...file exists [{}]\"", ".", "format", "(", "src_vocab_name", ")", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"Creating target vocabulary [{}]\"", ".", "format", "(", "trg_vocab_name", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "trg_vocab_name", ")", ":", "\n", "        ", "create_dictionary", "(", "open", "(", "trg_file", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", ",", "trg_vocab_name", ",", "config", "[", "'trg_vocab_size'", "]", ")", "\n", "", "else", ":", "\n", "        ", "logger", ".", "info", "(", "\"...file exists [{}]\"", ".", "format", "(", "trg_vocab_name", ")", ")", "\n", "\n"]]}