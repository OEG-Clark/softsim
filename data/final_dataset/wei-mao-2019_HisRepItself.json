{"home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.None.main_h36m_3d.main": [[16, 110], ["print", "model.AttModel.AttModel", "AttModel.AttModel.cuda", "torch.Adam", "print", "print", "utils.h36motion3d.Datasets", "print", "torch.utils.data.DataLoader", "filter", "print", "torch.load", "torch.load", "torch.load", "AttModel.AttModel.load_state_dict", "print", "utils.h36motion3d.Datasets", "print", "torch.utils.data.DataLoader", "utils.h36motion3d.Datasets", "print", "torch.utils.data.DataLoader", "main_h36m_3d.run_model", "numpy.array", "numpy.array", "run_model.keys", "utils.log.save_csv_log", "range", "AttModel.AttModel.parameters", "datasets.Datasets.__len__", "numpy.append", "numpy.append", "utils.util.lr_decay_mine", "print", "main_h36m_3d.run_model", "print", "main_h36m_3d.run_model", "print", "main_h36m_3d.run_model", "print", "numpy.array", "numpy.array", "run_model.keys", "run_model.keys", "run_model.keys", "utils.log.save_csv_log", "utils.log.save_ckpt", "sum", "datasets.Datasets.__len__", "datasets.Datasets.__len__", "numpy.append", "numpy.append", "numpy.append", "numpy.append", "numpy.append", "numpy.append", "AttModel.AttModel.state_dict", "optim.Adam.state_dict", "p.numel", "AttModel.AttModel.parameters"], "function", ["home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.None.main_h36m_ang.run_model", "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.log.save_csv_log", "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.h36motion3d.Datasets.__len__", "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.util.lr_decay_mine", "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.None.main_h36m_ang.run_model", "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.None.main_h36m_ang.run_model", "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.None.main_h36m_ang.run_model", "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.log.save_csv_log", "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.log.save_ckpt", "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.h36motion3d.Datasets.__len__", "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.h36motion3d.Datasets.__len__"], ["def", "main", "(", "opt", ")", ":", "\n", "    ", "lr_now", "=", "opt", ".", "lr_now", "\n", "start_epoch", "=", "1", "\n", "# opt.is_eval = True", "\n", "print", "(", "'>>> create models'", ")", "\n", "in_features", "=", "opt", ".", "in_features", "# 66", "\n", "d_model", "=", "opt", ".", "d_model", "\n", "kernel_size", "=", "opt", ".", "kernel_size", "\n", "net_pred", "=", "AttModel", ".", "AttModel", "(", "in_features", "=", "in_features", ",", "kernel_size", "=", "kernel_size", ",", "d_model", "=", "d_model", ",", "\n", "num_stage", "=", "opt", ".", "num_stage", ",", "dct_n", "=", "opt", ".", "dct_n", ")", "\n", "net_pred", ".", "cuda", "(", ")", "\n", "\n", "optimizer", "=", "optim", ".", "Adam", "(", "filter", "(", "lambda", "x", ":", "x", ".", "requires_grad", ",", "net_pred", ".", "parameters", "(", ")", ")", ",", "lr", "=", "opt", ".", "lr_now", ")", "\n", "print", "(", "\">>> total params: {:.2f}M\"", ".", "format", "(", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "net_pred", ".", "parameters", "(", ")", ")", "/", "1000000.0", ")", ")", "\n", "\n", "if", "opt", ".", "is_load", "or", "opt", ".", "is_eval", ":", "\n", "        ", "model_path_len", "=", "'./{}/ckpt_best.pth.tar'", ".", "format", "(", "opt", ".", "ckpt", ")", "\n", "print", "(", "\">>> loading ckpt len from '{}'\"", ".", "format", "(", "model_path_len", ")", ")", "\n", "ckpt", "=", "torch", ".", "load", "(", "model_path_len", ")", "\n", "start_epoch", "=", "ckpt", "[", "'epoch'", "]", "+", "1", "\n", "err_best", "=", "ckpt", "[", "'err'", "]", "\n", "lr_now", "=", "ckpt", "[", "'lr'", "]", "\n", "net_pred", ".", "load_state_dict", "(", "ckpt", "[", "'state_dict'", "]", ")", "\n", "# net.load_state_dict(ckpt)", "\n", "# optimizer.load_state_dict(ckpt['optimizer'])", "\n", "# lr_now = util.lr_decay_mine(optimizer, lr_now, 0.2)", "\n", "print", "(", "\">>> ckpt len loaded (epoch: {} | err: {})\"", ".", "format", "(", "ckpt", "[", "'epoch'", "]", ",", "ckpt", "[", "'err'", "]", ")", ")", "\n", "\n", "", "print", "(", "'>>> loading datasets'", ")", "\n", "\n", "if", "not", "opt", ".", "is_eval", ":", "\n", "# dataset = datasets.Datasets(opt, split=0)", "\n", "# actions = [\"walking\", \"eating\", \"smoking\", \"discussion\", \"directions\",", "\n", "#            \"greeting\", \"phoning\", \"posing\", \"purchases\", \"sitting\",", "\n", "#            \"sittingdown\", \"takingphoto\", \"waiting\", \"walkingdog\",", "\n", "#            \"walkingtogether\"]", "\n", "        ", "dataset", "=", "datasets", ".", "Datasets", "(", "opt", ",", "split", "=", "0", ")", "\n", "print", "(", "'>>> Training dataset length: {:d}'", ".", "format", "(", "dataset", ".", "__len__", "(", ")", ")", ")", "\n", "data_loader", "=", "DataLoader", "(", "dataset", ",", "batch_size", "=", "opt", ".", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "0", ",", "pin_memory", "=", "True", ")", "\n", "valid_dataset", "=", "datasets", ".", "Datasets", "(", "opt", ",", "split", "=", "1", ")", "\n", "print", "(", "'>>> Validation dataset length: {:d}'", ".", "format", "(", "valid_dataset", ".", "__len__", "(", ")", ")", ")", "\n", "valid_loader", "=", "DataLoader", "(", "valid_dataset", ",", "batch_size", "=", "opt", ".", "test_batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "0", ",", "\n", "pin_memory", "=", "True", ")", "\n", "\n", "", "test_dataset", "=", "datasets", ".", "Datasets", "(", "opt", ",", "split", "=", "2", ")", "\n", "print", "(", "'>>> Testing dataset length: {:d}'", ".", "format", "(", "test_dataset", ".", "__len__", "(", ")", ")", ")", "\n", "test_loader", "=", "DataLoader", "(", "test_dataset", ",", "batch_size", "=", "opt", ".", "test_batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "0", ",", "\n", "pin_memory", "=", "True", ")", "\n", "\n", "# evaluation", "\n", "if", "opt", ".", "is_eval", ":", "\n", "        ", "ret_test", "=", "run_model", "(", "net_pred", ",", "is_train", "=", "3", ",", "data_loader", "=", "test_loader", ",", "opt", "=", "opt", ")", "\n", "ret_log", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "head", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "for", "k", "in", "ret_test", ".", "keys", "(", ")", ":", "\n", "            ", "ret_log", "=", "np", ".", "append", "(", "ret_log", ",", "[", "ret_test", "[", "k", "]", "]", ")", "\n", "head", "=", "np", ".", "append", "(", "head", ",", "[", "k", "]", ")", "\n", "", "log", ".", "save_csv_log", "(", "opt", ",", "head", ",", "ret_log", ",", "is_create", "=", "True", ",", "file_name", "=", "'test_walking'", ")", "\n", "# print('testing error: {:.3f}'.format(ret_test['m_p3d_h36']))", "\n", "# training", "\n", "", "if", "not", "opt", ".", "is_eval", ":", "\n", "        ", "err_best", "=", "1000", "\n", "for", "epo", "in", "range", "(", "start_epoch", ",", "opt", ".", "epoch", "+", "1", ")", ":", "\n", "            ", "is_best", "=", "False", "\n", "# if epo % opt.lr_decay == 0:", "\n", "lr_now", "=", "util", ".", "lr_decay_mine", "(", "optimizer", ",", "lr_now", ",", "0.1", "**", "(", "1", "/", "opt", ".", "epoch", ")", ")", "\n", "print", "(", "'>>> training epoch: {:d}'", ".", "format", "(", "epo", ")", ")", "\n", "ret_train", "=", "run_model", "(", "net_pred", ",", "optimizer", ",", "is_train", "=", "0", ",", "data_loader", "=", "data_loader", ",", "epo", "=", "epo", ",", "opt", "=", "opt", ")", "\n", "print", "(", "'train error: {:.3f}'", ".", "format", "(", "ret_train", "[", "'m_p3d_h36'", "]", ")", ")", "\n", "ret_valid", "=", "run_model", "(", "net_pred", ",", "is_train", "=", "1", ",", "data_loader", "=", "valid_loader", ",", "opt", "=", "opt", ",", "epo", "=", "epo", ")", "\n", "print", "(", "'validation error: {:.3f}'", ".", "format", "(", "ret_valid", "[", "'m_p3d_h36'", "]", ")", ")", "\n", "ret_test", "=", "run_model", "(", "net_pred", ",", "is_train", "=", "3", ",", "data_loader", "=", "test_loader", ",", "opt", "=", "opt", ",", "epo", "=", "epo", ")", "\n", "print", "(", "'testing error: {:.3f}'", ".", "format", "(", "ret_test", "[", "'#1'", "]", ")", ")", "\n", "ret_log", "=", "np", ".", "array", "(", "[", "epo", ",", "lr_now", "]", ")", "\n", "head", "=", "np", ".", "array", "(", "[", "'epoch'", ",", "'lr'", "]", ")", "\n", "for", "k", "in", "ret_train", ".", "keys", "(", ")", ":", "\n", "                ", "ret_log", "=", "np", ".", "append", "(", "ret_log", ",", "[", "ret_train", "[", "k", "]", "]", ")", "\n", "head", "=", "np", ".", "append", "(", "head", ",", "[", "k", "]", ")", "\n", "", "for", "k", "in", "ret_valid", ".", "keys", "(", ")", ":", "\n", "                ", "ret_log", "=", "np", ".", "append", "(", "ret_log", ",", "[", "ret_valid", "[", "k", "]", "]", ")", "\n", "head", "=", "np", ".", "append", "(", "head", ",", "[", "'valid_'", "+", "k", "]", ")", "\n", "", "for", "k", "in", "ret_test", ".", "keys", "(", ")", ":", "\n", "                ", "ret_log", "=", "np", ".", "append", "(", "ret_log", ",", "[", "ret_test", "[", "k", "]", "]", ")", "\n", "head", "=", "np", ".", "append", "(", "head", ",", "[", "'test_'", "+", "k", "]", ")", "\n", "", "log", ".", "save_csv_log", "(", "opt", ",", "head", ",", "ret_log", ",", "is_create", "=", "(", "epo", "==", "1", ")", ")", "\n", "if", "ret_valid", "[", "'m_p3d_h36'", "]", "<", "err_best", ":", "\n", "                ", "err_best", "=", "ret_valid", "[", "'m_p3d_h36'", "]", "\n", "is_best", "=", "True", "\n", "", "log", ".", "save_ckpt", "(", "{", "'epoch'", ":", "epo", ",", "\n", "'lr'", ":", "lr_now", ",", "\n", "'err'", ":", "ret_valid", "[", "'m_p3d_h36'", "]", ",", "\n", "'state_dict'", ":", "net_pred", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", "}", ",", "\n", "is_best", "=", "is_best", ",", "opt", "=", "opt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.None.main_h36m_3d.run_model": [[112, 197], ["numpy.array", "numpy.array", "numpy.concatenate", "numpy.array", "numpy.concatenate", "time.time", "enumerate", "net_pred.train", "net_pred.eval", "numpy.zeros", "numpy.expand_dims", "time.time", "p3d_h36.reshape.float().cuda", "[].reshape", "net_pred", "p3d_out.reshape.reshape", "p3d_h36.reshape.reshape", "p3d_out_all.reshape.reshape", "range", "numpy.array", "numpy.arange", "numpy.expand_dims", "p3d_h36.reshape.clone", "p3d_h36.reshape.clone", "torch.mean", "torch.mean", "torch.mean", "optimizer.zero_grad", "loss_all.backward", "torch.utils.clip_grad_norm_", "optimizer.step", "torch.mean", "torch.mean", "torch.mean", "torch.sum", "torch.sum", "torch.sum", "torch.sum.cpu().data.numpy", "print", "range", "numpy.arange", "p3d_h36.reshape.float", "torch.norm", "torch.norm", "torch.norm", "list", "torch.mean.cpu().data.numpy", "torch.norm", "torch.norm", "torch.norm", "torch.sum.cpu().data.numpy", "torch.mean", "torch.mean", "torch.mean", "len", "len", "net_pred.parameters", "torch.norm", "torch.norm", "torch.norm", "len", "p3d_h36.reshape.clone", "torch.sum.cpu", "time.time", "time.time", "torch.mean.cpu", "torch.sum.cpu"], "function", ["None"], ["", "", "", "def", "run_model", "(", "net_pred", ",", "optimizer", "=", "None", ",", "is_train", "=", "0", ",", "data_loader", "=", "None", ",", "epo", "=", "1", ",", "opt", "=", "None", ")", ":", "\n", "    ", "if", "is_train", "==", "0", ":", "\n", "        ", "net_pred", ".", "train", "(", ")", "\n", "", "else", ":", "\n", "        ", "net_pred", ".", "eval", "(", ")", "\n", "\n", "", "l_p3d", "=", "0", "\n", "if", "is_train", "<=", "1", ":", "\n", "        ", "m_p3d_h36", "=", "0", "\n", "", "else", ":", "\n", "        ", "titles", "=", "np", ".", "array", "(", "range", "(", "opt", ".", "output_n", ")", ")", "+", "1", "\n", "m_p3d_h36", "=", "np", ".", "zeros", "(", "[", "opt", ".", "output_n", "]", ")", "\n", "", "n", "=", "0", "\n", "in_n", "=", "opt", ".", "input_n", "\n", "out_n", "=", "opt", ".", "output_n", "\n", "dim_used", "=", "np", ".", "array", "(", "[", "6", ",", "7", ",", "8", ",", "9", ",", "10", ",", "11", ",", "12", ",", "13", ",", "14", ",", "15", ",", "16", ",", "17", ",", "21", ",", "22", ",", "23", ",", "24", ",", "25", ",", "\n", "26", ",", "27", ",", "28", ",", "29", ",", "30", ",", "31", ",", "32", ",", "36", ",", "37", ",", "38", ",", "39", ",", "40", ",", "41", ",", "42", ",", "43", ",", "44", ",", "45", ",", "\n", "46", ",", "47", ",", "51", ",", "52", ",", "53", ",", "54", ",", "55", ",", "56", ",", "57", ",", "58", ",", "59", ",", "63", ",", "64", ",", "65", ",", "66", ",", "67", ",", "68", ",", "\n", "75", ",", "76", ",", "77", ",", "78", ",", "79", ",", "80", ",", "81", ",", "82", ",", "83", ",", "87", ",", "88", ",", "89", ",", "90", ",", "91", ",", "92", "]", ")", "\n", "seq_in", "=", "opt", ".", "kernel_size", "\n", "# joints at same loc", "\n", "joint_to_ignore", "=", "np", ".", "array", "(", "[", "16", ",", "20", ",", "23", ",", "24", ",", "28", ",", "31", "]", ")", "\n", "index_to_ignore", "=", "np", ".", "concatenate", "(", "(", "joint_to_ignore", "*", "3", ",", "joint_to_ignore", "*", "3", "+", "1", ",", "joint_to_ignore", "*", "3", "+", "2", ")", ")", "\n", "joint_equal", "=", "np", ".", "array", "(", "[", "13", ",", "19", ",", "22", ",", "13", ",", "27", ",", "30", "]", ")", "\n", "index_to_equal", "=", "np", ".", "concatenate", "(", "(", "joint_equal", "*", "3", ",", "joint_equal", "*", "3", "+", "1", ",", "joint_equal", "*", "3", "+", "2", ")", ")", "\n", "\n", "itera", "=", "1", "\n", "idx", "=", "np", ".", "expand_dims", "(", "np", ".", "arange", "(", "seq_in", "+", "out_n", ")", ",", "axis", "=", "1", ")", "+", "(", "\n", "out_n", "-", "seq_in", "+", "np", ".", "expand_dims", "(", "np", ".", "arange", "(", "itera", ")", ",", "axis", "=", "0", ")", ")", "\n", "st", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "(", "p3d_h36", ")", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "# print(i)", "\n", "        ", "batch_size", ",", "seq_n", ",", "_", "=", "p3d_h36", ".", "shape", "\n", "# when only one sample in this batch", "\n", "if", "batch_size", "==", "1", "and", "is_train", "==", "0", ":", "\n", "            ", "continue", "\n", "", "n", "+=", "batch_size", "\n", "bt", "=", "time", ".", "time", "(", ")", "\n", "p3d_h36", "=", "p3d_h36", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "p3d_sup", "=", "p3d_h36", ".", "clone", "(", ")", "[", ":", ",", ":", ",", "dim_used", "]", "[", ":", ",", "-", "out_n", "-", "seq_in", ":", "]", ".", "reshape", "(", "\n", "[", "-", "1", ",", "seq_in", "+", "out_n", ",", "len", "(", "dim_used", ")", "//", "3", ",", "3", "]", ")", "\n", "p3d_src", "=", "p3d_h36", ".", "clone", "(", ")", "[", ":", ",", ":", ",", "dim_used", "]", "\n", "p3d_out_all", "=", "net_pred", "(", "p3d_src", ",", "input_n", "=", "in_n", ",", "output_n", "=", "out_n", ",", "itera", "=", "itera", ")", "\n", "\n", "p3d_out", "=", "p3d_h36", ".", "clone", "(", ")", "[", ":", ",", "in_n", ":", "in_n", "+", "out_n", "]", "\n", "p3d_out", "[", ":", ",", ":", ",", "dim_used", "]", "=", "p3d_out_all", "[", ":", ",", "seq_in", ":", ",", "0", "]", "\n", "p3d_out", "[", ":", ",", ":", ",", "index_to_ignore", "]", "=", "p3d_out", "[", ":", ",", ":", ",", "index_to_equal", "]", "\n", "p3d_out", "=", "p3d_out", ".", "reshape", "(", "[", "-", "1", ",", "out_n", ",", "32", ",", "3", "]", ")", "\n", "\n", "p3d_h36", "=", "p3d_h36", ".", "reshape", "(", "[", "-", "1", ",", "in_n", "+", "out_n", ",", "32", ",", "3", "]", ")", "\n", "\n", "p3d_out_all", "=", "p3d_out_all", ".", "reshape", "(", "[", "batch_size", ",", "seq_in", "+", "out_n", ",", "itera", ",", "len", "(", "dim_used", ")", "//", "3", ",", "3", "]", ")", "\n", "\n", "# 2d joint loss:", "\n", "grad_norm", "=", "0", "\n", "if", "is_train", "==", "0", ":", "\n", "            ", "loss_p3d", "=", "torch", ".", "mean", "(", "torch", ".", "norm", "(", "p3d_out_all", "[", ":", ",", ":", ",", "0", "]", "-", "p3d_sup", ",", "dim", "=", "3", ")", ")", "\n", "loss_all", "=", "loss_p3d", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss_all", ".", "backward", "(", ")", "\n", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "list", "(", "net_pred", ".", "parameters", "(", ")", ")", ",", "max_norm", "=", "opt", ".", "max_norm", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "# update log values", "\n", "l_p3d", "+=", "loss_p3d", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "*", "batch_size", "\n", "\n", "", "if", "is_train", "<=", "1", ":", "# if is validation or train simply output the overall mean error", "\n", "            ", "mpjpe_p3d_h36", "=", "torch", ".", "mean", "(", "torch", ".", "norm", "(", "p3d_h36", "[", ":", ",", "in_n", ":", "in_n", "+", "out_n", "]", "-", "p3d_out", ",", "dim", "=", "3", ")", ")", "\n", "m_p3d_h36", "+=", "mpjpe_p3d_h36", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "*", "batch_size", "\n", "", "else", ":", "\n", "            ", "mpjpe_p3d_h36", "=", "torch", ".", "sum", "(", "torch", ".", "mean", "(", "torch", ".", "norm", "(", "p3d_h36", "[", ":", ",", "in_n", ":", "]", "-", "p3d_out", ",", "dim", "=", "3", ")", ",", "dim", "=", "2", ")", ",", "dim", "=", "0", ")", "\n", "m_p3d_h36", "+=", "mpjpe_p3d_h36", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "", "if", "i", "%", "1000", "==", "0", ":", "\n", "            ", "print", "(", "'{}/{}|bt {:.3f}s|tt{:.0f}s|gn{}'", ".", "format", "(", "i", "+", "1", ",", "len", "(", "data_loader", ")", ",", "time", ".", "time", "(", ")", "-", "bt", ",", "\n", "time", ".", "time", "(", ")", "-", "st", ",", "grad_norm", ")", ")", "\n", "", "", "ret", "=", "{", "}", "\n", "if", "is_train", "==", "0", ":", "\n", "        ", "ret", "[", "\"l_p3d\"", "]", "=", "l_p3d", "/", "n", "\n", "\n", "", "if", "is_train", "<=", "1", ":", "\n", "        ", "ret", "[", "\"m_p3d_h36\"", "]", "=", "m_p3d_h36", "/", "n", "\n", "", "else", ":", "\n", "        ", "m_p3d_h36", "=", "m_p3d_h36", "/", "n", "\n", "for", "j", "in", "range", "(", "out_n", ")", ":", "\n", "            ", "ret", "[", "\"#{:d}\"", ".", "format", "(", "titles", "[", "j", "]", ")", "]", "=", "m_p3d_h36", "[", "j", "]", "\n", "", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.None.main_h36m_3d_eval.main": [[16, 63], ["print", "model.AttModel.AttModel", "AttModel.AttModel.cuda", "print", "torch.load", "torch.load", "torch.load", "AttModel.AttModel.load_state_dict", "print", "print", "numpy.array", "range", "numpy.zeros", "enumerate", "numpy.mean", "numpy.expand_dims", "numpy.concatenate", "utils.log.save_csv_log", "numpy.append", "utils.h36motion3d.Datasets", "print", "torch.utils.data.DataLoader", "main_h36m_3d_eval.run_model", "print", "numpy.array", "run_model.keys", "numpy.array", "numpy.append", "np.zeros.astype", "len", "datasets.Datasets.__len__"], "function", ["home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.log.save_csv_log", "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.None.main_h36m_ang.run_model", "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.h36motion3d.Datasets.__len__"], ["def", "main", "(", "opt", ")", ":", "\n", "    ", "lr_now", "=", "opt", ".", "lr_now", "\n", "start_epoch", "=", "1", "\n", "# opt.is_eval = True", "\n", "print", "(", "'>>> create models'", ")", "\n", "in_features", "=", "66", "\n", "d_model", "=", "opt", ".", "d_model", "\n", "kernel_size", "=", "opt", ".", "kernel_size", "\n", "net_pred", "=", "AttModel", ".", "AttModel", "(", "in_features", "=", "in_features", ",", "kernel_size", "=", "kernel_size", ",", "d_model", "=", "d_model", ",", "\n", "num_stage", "=", "opt", ".", "num_stage", ",", "dct_n", "=", "opt", ".", "dct_n", ")", "\n", "net_pred", ".", "cuda", "(", ")", "\n", "model_path_len", "=", "'{}/ckpt_best.pth.tar'", ".", "format", "(", "opt", ".", "ckpt", ")", "\n", "print", "(", "\">>> loading ckpt len from '{}'\"", ".", "format", "(", "model_path_len", ")", ")", "\n", "ckpt", "=", "torch", ".", "load", "(", "model_path_len", ")", "\n", "start_epoch", "=", "ckpt", "[", "'epoch'", "]", "+", "1", "\n", "err_best", "=", "ckpt", "[", "'err'", "]", "\n", "lr_now", "=", "ckpt", "[", "'lr'", "]", "\n", "net_pred", ".", "load_state_dict", "(", "ckpt", "[", "'state_dict'", "]", ")", "\n", "print", "(", "\">>> ckpt len loaded (epoch: {} | err: {})\"", ".", "format", "(", "ckpt", "[", "'epoch'", "]", ",", "ckpt", "[", "'err'", "]", ")", ")", "\n", "\n", "print", "(", "'>>> loading datasets'", ")", "\n", "\n", "head", "=", "np", ".", "array", "(", "[", "'act'", "]", ")", "\n", "for", "k", "in", "range", "(", "1", ",", "opt", ".", "output_n", "+", "1", ")", ":", "\n", "        ", "head", "=", "np", ".", "append", "(", "head", ",", "[", "f'#{k}'", "]", ")", "\n", "\n", "", "acts", "=", "[", "\"walking\"", ",", "\"eating\"", ",", "\"smoking\"", ",", "\"discussion\"", ",", "\"directions\"", ",", "\n", "\"greeting\"", ",", "\"phoning\"", ",", "\"posing\"", ",", "\"purchases\"", ",", "\"sitting\"", ",", "\n", "\"sittingdown\"", ",", "\"takingphoto\"", ",", "\"waiting\"", ",", "\"walkingdog\"", ",", "\n", "\"walkingtogether\"", "]", "\n", "errs", "=", "np", ".", "zeros", "(", "[", "len", "(", "acts", ")", "+", "1", ",", "opt", ".", "output_n", "]", ")", "\n", "for", "i", ",", "act", "in", "enumerate", "(", "acts", ")", ":", "\n", "        ", "test_dataset", "=", "datasets", ".", "Datasets", "(", "opt", ",", "split", "=", "2", ",", "actions", "=", "[", "act", "]", ")", "\n", "print", "(", "'>>> Testing dataset length: {:d}'", ".", "format", "(", "test_dataset", ".", "__len__", "(", ")", ")", ")", "\n", "test_loader", "=", "DataLoader", "(", "test_dataset", ",", "batch_size", "=", "opt", ".", "test_batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "0", ",", "\n", "pin_memory", "=", "True", ")", "\n", "\n", "ret_test", "=", "run_model", "(", "net_pred", ",", "is_train", "=", "3", ",", "data_loader", "=", "test_loader", ",", "opt", "=", "opt", ")", "\n", "print", "(", "'testing error: {:.3f}'", ".", "format", "(", "ret_test", "[", "'#1'", "]", ")", ")", "\n", "ret_log", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "for", "k", "in", "ret_test", ".", "keys", "(", ")", ":", "\n", "            ", "ret_log", "=", "np", ".", "append", "(", "ret_log", ",", "[", "ret_test", "[", "k", "]", "]", ")", "\n", "", "errs", "[", "i", "]", "=", "ret_log", "\n", "", "errs", "[", "-", "1", "]", "=", "np", ".", "mean", "(", "errs", "[", ":", "-", "1", "]", ",", "axis", "=", "0", ")", "\n", "acts", "=", "np", ".", "expand_dims", "(", "np", ".", "array", "(", "acts", "+", "[", "\"average\"", "]", ")", ",", "axis", "=", "1", ")", "\n", "value", "=", "np", ".", "concatenate", "(", "[", "acts", ",", "errs", ".", "astype", "(", "np", ".", "str", ")", "]", ",", "axis", "=", "1", ")", "\n", "log", ".", "save_csv_log", "(", "opt", ",", "head", ",", "value", ",", "is_create", "=", "True", ",", "file_name", "=", "'test_pre_action'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.None.main_h36m_3d_eval.run_model": [[65, 118], ["net_pred.eval", "numpy.zeros", "numpy.array", "numpy.array", "numpy.concatenate", "numpy.array", "numpy.concatenate", "enumerate", "range", "numpy.array", "numpy.expand_dims", "time.time", "p3d_h36.reshape.float().cuda", "[].reshape", "net_pred", "p3d_out.reshape.reshape", "p3d_h36.reshape.reshape", "torch.sum", "torch.sum", "torch.sum", "torch.sum.cpu().data.numpy", "range", "numpy.arange", "numpy.expand_dims", "p3d_h36.reshape.clone", "p3d_out_all[].transpose().reshape", "p3d_h36.reshape.clone", "torch.mean", "torch.mean", "torch.mean", "numpy.arange", "p3d_h36.reshape.float", "torch.norm", "torch.norm", "torch.norm", "len", "p3d_out_all[].transpose", "torch.sum.cpu", "p3d_h36.reshape.clone"], "function", ["None"], ["", "def", "run_model", "(", "net_pred", ",", "optimizer", "=", "None", ",", "is_train", "=", "0", ",", "data_loader", "=", "None", ",", "epo", "=", "1", ",", "opt", "=", "None", ")", ":", "\n", "    ", "net_pred", ".", "eval", "(", ")", "\n", "titles", "=", "np", ".", "array", "(", "range", "(", "opt", ".", "output_n", ")", ")", "+", "1", "\n", "m_p3d_h36", "=", "np", ".", "zeros", "(", "[", "opt", ".", "output_n", "]", ")", "\n", "n", "=", "0", "\n", "in_n", "=", "opt", ".", "input_n", "\n", "out_n", "=", "opt", ".", "output_n", "\n", "dim_used", "=", "np", ".", "array", "(", "[", "6", ",", "7", ",", "8", ",", "9", ",", "10", ",", "11", ",", "12", ",", "13", ",", "14", ",", "15", ",", "16", ",", "17", ",", "21", ",", "22", ",", "23", ",", "24", ",", "25", ",", "\n", "26", ",", "27", ",", "28", ",", "29", ",", "30", ",", "31", ",", "32", ",", "36", ",", "37", ",", "38", ",", "39", ",", "40", ",", "41", ",", "42", ",", "43", ",", "44", ",", "45", ",", "\n", "46", ",", "47", ",", "51", ",", "52", ",", "53", ",", "54", ",", "55", ",", "56", ",", "57", ",", "58", ",", "59", ",", "63", ",", "64", ",", "65", ",", "66", ",", "67", ",", "68", ",", "\n", "75", ",", "76", ",", "77", ",", "78", ",", "79", ",", "80", ",", "81", ",", "82", ",", "83", ",", "87", ",", "88", ",", "89", ",", "90", ",", "91", ",", "92", "]", ")", "\n", "seq_in", "=", "opt", ".", "kernel_size", "\n", "# joints at same loc", "\n", "joint_to_ignore", "=", "np", ".", "array", "(", "[", "16", ",", "20", ",", "23", ",", "24", ",", "28", ",", "31", "]", ")", "\n", "index_to_ignore", "=", "np", ".", "concatenate", "(", "(", "joint_to_ignore", "*", "3", ",", "joint_to_ignore", "*", "3", "+", "1", ",", "joint_to_ignore", "*", "3", "+", "2", ")", ")", "\n", "joint_equal", "=", "np", ".", "array", "(", "[", "13", ",", "19", ",", "22", ",", "13", ",", "27", ",", "30", "]", ")", "\n", "index_to_equal", "=", "np", ".", "concatenate", "(", "(", "joint_equal", "*", "3", ",", "joint_equal", "*", "3", "+", "1", ",", "joint_equal", "*", "3", "+", "2", ")", ")", "\n", "\n", "itera", "=", "3", "\n", "idx", "=", "np", ".", "expand_dims", "(", "np", ".", "arange", "(", "seq_in", "+", "out_n", ")", ",", "axis", "=", "1", ")", "+", "(", "\n", "out_n", "-", "seq_in", "+", "np", ".", "expand_dims", "(", "np", ".", "arange", "(", "itera", ")", ",", "axis", "=", "0", ")", ")", "\n", "for", "i", ",", "(", "p3d_h36", ")", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "# print(i)", "\n", "        ", "batch_size", ",", "seq_n", ",", "_", "=", "p3d_h36", ".", "shape", "\n", "# when only one sample in this batch", "\n", "if", "batch_size", "==", "1", "and", "is_train", "==", "0", ":", "\n", "            ", "continue", "\n", "", "n", "+=", "batch_size", "\n", "bt", "=", "time", ".", "time", "(", ")", "\n", "p3d_h36", "=", "p3d_h36", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "p3d_sup", "=", "p3d_h36", ".", "clone", "(", ")", "[", ":", ",", ":", ",", "dim_used", "]", "[", ":", ",", "-", "out_n", "-", "seq_in", ":", "]", ".", "reshape", "(", "\n", "[", "-", "1", ",", "seq_in", "+", "out_n", ",", "len", "(", "dim_used", ")", "//", "3", ",", "3", "]", ")", "\n", "p3d_src", "=", "p3d_h36", ".", "clone", "(", ")", "[", ":", ",", ":", ",", "dim_used", "]", "\n", "# p3d_src = p3d_src.permute(1, 0, 2)  # seq * n * dim", "\n", "# p3d_src = p3d_src[:in_n]", "\n", "p3d_out_all", "=", "net_pred", "(", "p3d_src", ",", "input_n", "=", "in_n", ",", "output_n", "=", "10", ",", "itera", "=", "itera", ")", "\n", "\n", "p3d_out_all", "=", "p3d_out_all", "[", ":", ",", "seq_in", ":", "]", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "[", "batch_size", ",", "10", "*", "itera", ",", "-", "1", "]", ")", "[", ":", ",", ":", "out_n", "]", "\n", "\n", "p3d_out", "=", "p3d_h36", ".", "clone", "(", ")", "[", ":", ",", "in_n", ":", "in_n", "+", "out_n", "]", "\n", "p3d_out", "[", ":", ",", ":", ",", "dim_used", "]", "=", "p3d_out_all", "\n", "p3d_out", "[", ":", ",", ":", ",", "index_to_ignore", "]", "=", "p3d_out", "[", ":", ",", ":", ",", "index_to_equal", "]", "\n", "p3d_out", "=", "p3d_out", ".", "reshape", "(", "[", "-", "1", ",", "out_n", ",", "32", ",", "3", "]", ")", "\n", "\n", "p3d_h36", "=", "p3d_h36", ".", "reshape", "(", "[", "-", "1", ",", "in_n", "+", "out_n", ",", "32", ",", "3", "]", ")", "\n", "\n", "mpjpe_p3d_h36", "=", "torch", ".", "sum", "(", "torch", ".", "mean", "(", "torch", ".", "norm", "(", "p3d_h36", "[", ":", ",", "in_n", ":", "]", "-", "p3d_out", ",", "dim", "=", "3", ")", ",", "dim", "=", "2", ")", ",", "dim", "=", "0", ")", "\n", "m_p3d_h36", "+=", "mpjpe_p3d_h36", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "", "ret", "=", "{", "}", "\n", "m_p3d_h36", "=", "m_p3d_h36", "/", "n", "\n", "for", "j", "in", "range", "(", "out_n", ")", ":", "\n", "        ", "ret", "[", "\"#{:d}\"", ".", "format", "(", "titles", "[", "j", "]", ")", "]", "=", "m_p3d_h36", "[", "j", "]", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.None.main_amass_3d_eval.main": [[21, 55], ["print", "model.AttModel.AttModel", "torch.DataParallel", "nn.DataParallel.cuda", "print", "torch.load", "torch.load", "torch.load", "nn.DataParallel.load_state_dict", "print", "print", "utils.amass3d.Datasets", "print", "torch.utils.data.DataLoader", "main_amass_3d_eval.run_model", "print", "numpy.array", "numpy.array", "run_model.keys", "utils.log.save_csv_log", "numpy.append", "numpy.append", "datasets.Datasets.__len__"], "function", ["home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.None.main_h36m_ang.run_model", "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.log.save_csv_log", "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.h36motion3d.Datasets.__len__"], ["def", "main", "(", "opt", ")", ":", "\n", "    ", "lr_now", "=", "opt", ".", "lr_now", "\n", "start_epoch", "=", "1", "\n", "# opt.is_eval = True", "\n", "print", "(", "'>>> create models'", ")", "\n", "in_features", "=", "opt", ".", "in_features", "# 54", "\n", "d_model", "=", "opt", ".", "d_model", "\n", "kernel_size", "=", "opt", ".", "kernel_size", "\n", "net_pred", "=", "AttModel", ".", "AttModel", "(", "in_features", "=", "in_features", ",", "kernel_size", "=", "kernel_size", ",", "d_model", "=", "d_model", ",", "\n", "num_stage", "=", "opt", ".", "num_stage", ",", "dct_n", "=", "opt", ".", "dct_n", ")", "\n", "net_pred", "=", "nn", ".", "DataParallel", "(", "net_pred", ")", "\n", "net_pred", ".", "cuda", "(", ")", "\n", "\n", "model_path_len", "=", "'{}/ckpt_best.pth.tar'", ".", "format", "(", "opt", ".", "ckpt", ")", "\n", "print", "(", "\">>> loading ckpt len from '{}'\"", ".", "format", "(", "model_path_len", ")", ")", "\n", "ckpt", "=", "torch", ".", "load", "(", "model_path_len", ")", "\n", "net_pred", ".", "load_state_dict", "(", "ckpt", "[", "'state_dict'", "]", ")", "\n", "print", "(", "\">>> ckpt len loaded (epoch: {} | err: {})\"", ".", "format", "(", "ckpt", "[", "'epoch'", "]", ",", "ckpt", "[", "'err'", "]", ")", ")", "\n", "net_pred", "=", "net_pred", ".", "module", "\n", "\n", "print", "(", "'>>> loading datasets'", ")", "\n", "test_dataset", "=", "datasets", ".", "Datasets", "(", "opt", ",", "split", "=", "2", ")", "\n", "print", "(", "'>>> Testing dataset length: {:d}'", ".", "format", "(", "test_dataset", ".", "__len__", "(", ")", ")", ")", "\n", "test_loader", "=", "DataLoader", "(", "test_dataset", ",", "batch_size", "=", "opt", ".", "test_batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "0", ",", "\n", "pin_memory", "=", "False", ")", "\n", "\n", "ret_test", "=", "run_model", "(", "net_pred", ",", "is_train", "=", "2", ",", "data_loader", "=", "test_loader", ",", "opt", "=", "opt", ",", "epo", "=", "0", ")", "\n", "print", "(", "'testing error: {:.3f}'", ".", "format", "(", "ret_test", "[", "'#1'", "]", ")", ")", "\n", "ret_log", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "head", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "for", "k", "in", "ret_test", ".", "keys", "(", ")", ":", "\n", "        ", "ret_log", "=", "np", ".", "append", "(", "ret_log", ",", "[", "ret_test", "[", "k", "]", "]", ")", "\n", "head", "=", "np", ".", "append", "(", "head", ",", "[", "'test_'", "+", "k", "]", ")", "\n", "", "log", ".", "save_csv_log", "(", "opt", ",", "head", ",", "ret_log", ",", "is_create", "=", "True", ",", "file_name", "=", "'test_bml1'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.None.main_amass_3d_eval.run_model": [[57, 101], ["numpy.arange", "time.time", "enumerate", "range", "net_pred.train", "net_pred.eval", "numpy.zeros", "numpy.expand_dims", "numpy.expand_dims", "time.time", "p3d_h36.clone().reshape", "net_pred", "torch.sum", "torch.sum", "torch.sum", "torch.sum.cpu().data.numpy", "numpy.array", "numpy.arange", "numpy.arange", "p3d_h36.clone", "p3d_out_all[].transpose().reshape", "torch.mean", "torch.mean", "torch.mean", "range", "p3d_h36.float().cuda", "p3d_h36.clone", "torch.norm", "torch.norm", "torch.norm", "len", "p3d_out_all[].transpose", "len", "torch.sum.cpu", "p3d_h36.float"], "function", ["None"], ["", "def", "run_model", "(", "net_pred", ",", "optimizer", "=", "None", ",", "is_train", "=", "0", ",", "data_loader", "=", "None", ",", "epo", "=", "1", ",", "opt", "=", "None", ")", ":", "\n", "    ", "if", "is_train", "==", "0", ":", "\n", "        ", "net_pred", ".", "train", "(", ")", "\n", "", "else", ":", "\n", "        ", "net_pred", ".", "eval", "(", ")", "\n", "\n", "", "l_p3d", "=", "0", "\n", "# l_beta = 0", "\n", "# j17to14 = [6, 5, 4, 1, 2, 3, 16, 15, 14, 11, 12, 13, 8, 10]", "\n", "if", "is_train", "<=", "1", ":", "\n", "        ", "m_p3d_h36", "=", "0", "\n", "", "else", ":", "\n", "        ", "titles", "=", "np", ".", "array", "(", "range", "(", "opt", ".", "output_n", ")", ")", "+", "1", "\n", "m_p3d_h36", "=", "np", ".", "zeros", "(", "[", "opt", ".", "output_n", "]", ")", "\n", "", "n", "=", "0", "\n", "itera", "=", "1", "\n", "in_n", "=", "opt", ".", "input_n", "\n", "out_n", "=", "opt", ".", "output_n", "\n", "joint_used", "=", "np", ".", "arange", "(", "4", ",", "22", ")", "\n", "seq_in", "=", "opt", ".", "kernel_size", "\n", "idx", "=", "np", ".", "expand_dims", "(", "np", ".", "arange", "(", "seq_in", "+", "1", ")", ",", "axis", "=", "1", ")", "+", "np", ".", "expand_dims", "(", "np", ".", "arange", "(", "out_n", ")", ",", "axis", "=", "0", ")", "\n", "st", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "(", "p3d_h36", ")", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "        ", "batch_size", ",", "seq_n", ",", "_", ",", "_", "=", "p3d_h36", ".", "shape", "\n", "n", "+=", "batch_size", "\n", "bt", "=", "time", ".", "time", "(", ")", "\n", "p3d_h36", "=", "p3d_h36", ".", "float", "(", ")", ".", "cuda", "(", ")", "[", ":", ",", ":", ",", "joint_used", "]", "*", "1000", "\n", "p3d_sup", "=", "p3d_h36", ".", "clone", "(", ")", "[", ":", ",", "-", "out_n", "-", "seq_in", ":", "]", "\n", "p3d_src", "=", "p3d_h36", ".", "clone", "(", ")", ".", "reshape", "(", "[", "batch_size", ",", "in_n", "+", "out_n", ",", "len", "(", "joint_used", ")", "*", "3", "]", ")", "\n", "\n", "p3d_out_all", "=", "net_pred", "(", "p3d_src", ",", "output_n", "=", "25", ",", "input_n", "=", "in_n", ",", "itera", "=", "itera", ")", "\n", "\n", "p3d_out", "=", "p3d_out_all", "[", ":", ",", "seq_in", ":", "]", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "[", "batch_size", ",", "25", "*", "itera", ",", "len", "(", "joint_used", ")", ",", "3", "]", ")", "[", ":", ",", "\n", ":", "out_n", "]", "\n", "\n", "mpjpe_p3d_h36", "=", "torch", ".", "sum", "(", "torch", ".", "mean", "(", "torch", ".", "norm", "(", "p3d_h36", "[", ":", ",", "in_n", ":", "]", "-", "p3d_out", ",", "dim", "=", "3", ")", ",", "dim", "=", "2", ")", ",", "dim", "=", "0", ")", "\n", "m_p3d_h36", "+=", "mpjpe_p3d_h36", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "\n", "", "ret", "=", "{", "}", "\n", "m_p3d_h36", "=", "m_p3d_h36", "/", "n", "\n", "for", "j", "in", "range", "(", "out_n", ")", ":", "\n", "        ", "ret", "[", "\"#{:d}\"", ".", "format", "(", "titles", "[", "j", "]", ")", "]", "=", "m_p3d_h36", "[", "j", "]", "\n", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.None.main_amass_3d.main": [[20, 109], ["print", "model.AttModel.AttModel", "AttModel.AttModel.cuda", "torch.Adam", "print", "print", "utils.amass3d.Datasets", "print", "torch.utils.data.DataLoader", "filter", "print", "torch.load", "torch.load", "torch.load", "AttModel.AttModel.load_state_dict", "print", "utils.amass3d.Datasets", "print", "torch.utils.data.DataLoader", "utils.amass3d.Datasets", "print", "torch.utils.data.DataLoader", "main_amass_3d.run_model", "numpy.array", "numpy.array", "run_model.keys", "utils.log.save_csv_log", "range", "AttModel.AttModel.parameters", "datasets.Datasets.__len__", "numpy.append", "numpy.append", "utils.util.lr_decay_mine", "print", "main_amass_3d.run_model", "print", "main_amass_3d.run_model", "print", "main_amass_3d.run_model", "print", "numpy.array", "numpy.array", "run_model.keys", "run_model.keys", "run_model.keys", "utils.log.save_csv_log", "utils.log.save_ckpt", "sum", "datasets.Datasets.__len__", "datasets.Datasets.__len__", "numpy.append", "numpy.append", "numpy.append", "numpy.append", "numpy.append", "numpy.append", "AttModel.AttModel.state_dict", "optim.Adam.state_dict", "p.numel", "AttModel.AttModel.parameters"], "function", ["home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.None.main_h36m_ang.run_model", "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.log.save_csv_log", "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.h36motion3d.Datasets.__len__", "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.util.lr_decay_mine", "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.None.main_h36m_ang.run_model", "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.None.main_h36m_ang.run_model", "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.None.main_h36m_ang.run_model", "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.log.save_csv_log", "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.log.save_ckpt", "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.h36motion3d.Datasets.__len__", "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.h36motion3d.Datasets.__len__"], ["def", "main", "(", "opt", ")", ":", "\n", "    ", "lr_now", "=", "opt", ".", "lr_now", "\n", "start_epoch", "=", "1", "\n", "# opt.is_eval = True", "\n", "print", "(", "'>>> create models'", ")", "\n", "in_features", "=", "opt", ".", "in_features", "# 54", "\n", "d_model", "=", "opt", ".", "d_model", "\n", "kernel_size", "=", "opt", ".", "kernel_size", "\n", "net_pred", "=", "AttModel", ".", "AttModel", "(", "in_features", "=", "in_features", ",", "kernel_size", "=", "kernel_size", ",", "d_model", "=", "d_model", ",", "\n", "num_stage", "=", "opt", ".", "num_stage", ",", "dct_n", "=", "opt", ".", "dct_n", ")", "\n", "net_pred", ".", "cuda", "(", ")", "\n", "\n", "optimizer", "=", "optim", ".", "Adam", "(", "filter", "(", "lambda", "x", ":", "x", ".", "requires_grad", ",", "net_pred", ".", "parameters", "(", ")", ")", ",", "lr", "=", "opt", ".", "lr_now", ")", "\n", "print", "(", "\">>> total params: {:.2f}M\"", ".", "format", "(", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "net_pred", ".", "parameters", "(", ")", ")", "/", "1000000.0", ")", ")", "\n", "\n", "if", "opt", ".", "is_load", "or", "opt", ".", "is_eval", ":", "\n", "        ", "model_path_len", "=", "'./{}/ckpt_best.pth.tar'", ".", "format", "(", "opt", ".", "ckpt", ")", "\n", "print", "(", "\">>> loading ckpt len from '{}'\"", ".", "format", "(", "model_path_len", ")", ")", "\n", "ckpt", "=", "torch", ".", "load", "(", "model_path_len", ")", "\n", "start_epoch", "=", "ckpt", "[", "'epoch'", "]", "+", "1", "\n", "err_best", "=", "ckpt", "[", "'err'", "]", "\n", "lr_now", "=", "ckpt", "[", "'lr'", "]", "\n", "net_pred", ".", "load_state_dict", "(", "ckpt", "[", "'state_dict'", "]", ")", "\n", "# net.load_state_dict(ckpt)", "\n", "# optimizer.load_state_dict(ckpt['optimizer'])", "\n", "# lr_now = util.lr_decay_mine(optimizer, lr_now, 0.2)", "\n", "print", "(", "\">>> ckpt len loaded (epoch: {} | err: {})\"", ".", "format", "(", "ckpt", "[", "'epoch'", "]", ",", "ckpt", "[", "'err'", "]", ")", ")", "\n", "\n", "", "print", "(", "'>>> loading datasets'", ")", "\n", "\n", "if", "not", "opt", ".", "is_eval", ":", "\n", "        ", "dataset", "=", "datasets", ".", "Datasets", "(", "opt", ",", "split", "=", "0", ")", "\n", "print", "(", "'>>> Training dataset length: {:d}'", ".", "format", "(", "dataset", ".", "__len__", "(", ")", ")", ")", "\n", "data_loader", "=", "DataLoader", "(", "dataset", ",", "batch_size", "=", "opt", ".", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "0", ",", "pin_memory", "=", "False", ")", "\n", "valid_dataset", "=", "datasets", ".", "Datasets", "(", "opt", ",", "split", "=", "1", ")", "\n", "print", "(", "'>>> Validation dataset length: {:d}'", ".", "format", "(", "valid_dataset", ".", "__len__", "(", ")", ")", ")", "\n", "valid_loader", "=", "DataLoader", "(", "valid_dataset", ",", "batch_size", "=", "opt", ".", "test_batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "0", ",", "\n", "pin_memory", "=", "False", ")", "\n", "\n", "", "test_dataset", "=", "datasets", ".", "Datasets", "(", "opt", ",", "split", "=", "2", ")", "\n", "print", "(", "'>>> Testing dataset length: {:d}'", ".", "format", "(", "test_dataset", ".", "__len__", "(", ")", ")", ")", "\n", "test_loader", "=", "DataLoader", "(", "test_dataset", ",", "batch_size", "=", "opt", ".", "test_batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "0", ",", "\n", "pin_memory", "=", "False", ")", "\n", "\n", "# evaluation", "\n", "if", "opt", ".", "is_eval", ":", "\n", "        ", "ret_test", "=", "run_model", "(", "net_pred", ",", "is_train", "=", "3", ",", "data_loader", "=", "test_loader", ",", "opt", "=", "opt", ",", "epo", "=", "0", ")", "\n", "ret_log", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "head", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "for", "k", "in", "ret_test", ".", "keys", "(", ")", ":", "\n", "            ", "ret_log", "=", "np", ".", "append", "(", "ret_log", ",", "[", "ret_test", "[", "k", "]", "]", ")", "\n", "head", "=", "np", ".", "append", "(", "head", ",", "[", "k", "]", ")", "\n", "", "log", ".", "save_csv_log", "(", "opt", ",", "head", ",", "ret_log", ",", "is_create", "=", "True", ",", "file_name", "=", "'test_walking'", ")", "\n", "# print('testing error: {:.3f}'.format(ret_test['m_p3d_h36']))", "\n", "# training", "\n", "", "if", "not", "opt", ".", "is_eval", ":", "\n", "        ", "err_best", "=", "1000", "\n", "for", "epo", "in", "range", "(", "start_epoch", ",", "opt", ".", "epoch", "+", "1", ")", ":", "\n", "            ", "is_best", "=", "False", "\n", "# if epo % opt.lr_decay == 0:", "\n", "lr_now", "=", "util", ".", "lr_decay_mine", "(", "optimizer", ",", "lr_now", ",", "0.1", "**", "(", "1", "/", "opt", ".", "epoch", ")", ")", "\n", "print", "(", "'>>> training epoch: {:d}'", ".", "format", "(", "epo", ")", ")", "\n", "ret_train", "=", "run_model", "(", "net_pred", ",", "optimizer", ",", "is_train", "=", "0", ",", "data_loader", "=", "data_loader", ",", "epo", "=", "epo", ",", "opt", "=", "opt", ")", "\n", "print", "(", "'train error: {:.3f}'", ".", "format", "(", "ret_train", "[", "'m_p3d_h36'", "]", ")", ")", "\n", "ret_valid", "=", "run_model", "(", "net_pred", ",", "is_train", "=", "1", ",", "data_loader", "=", "valid_loader", ",", "opt", "=", "opt", ",", "epo", "=", "epo", ")", "\n", "print", "(", "'validation error: {:.3f}'", ".", "format", "(", "ret_valid", "[", "'m_p3d_h36'", "]", ")", ")", "\n", "ret_test", "=", "run_model", "(", "net_pred", ",", "is_train", "=", "2", ",", "data_loader", "=", "test_loader", ",", "opt", "=", "opt", ",", "epo", "=", "epo", ")", "\n", "print", "(", "'testing error: {:.3f}'", ".", "format", "(", "ret_test", "[", "'#1'", "]", ")", ")", "\n", "ret_log", "=", "np", ".", "array", "(", "[", "epo", ",", "lr_now", "]", ")", "\n", "head", "=", "np", ".", "array", "(", "[", "'epoch'", ",", "'lr'", "]", ")", "\n", "for", "k", "in", "ret_train", ".", "keys", "(", ")", ":", "\n", "                ", "ret_log", "=", "np", ".", "append", "(", "ret_log", ",", "[", "ret_train", "[", "k", "]", "]", ")", "\n", "head", "=", "np", ".", "append", "(", "head", ",", "[", "k", "]", ")", "\n", "", "for", "k", "in", "ret_valid", ".", "keys", "(", ")", ":", "\n", "                ", "ret_log", "=", "np", ".", "append", "(", "ret_log", ",", "[", "ret_valid", "[", "k", "]", "]", ")", "\n", "head", "=", "np", ".", "append", "(", "head", ",", "[", "'valid_'", "+", "k", "]", ")", "\n", "", "for", "k", "in", "ret_test", ".", "keys", "(", ")", ":", "\n", "                ", "ret_log", "=", "np", ".", "append", "(", "ret_log", ",", "[", "ret_test", "[", "k", "]", "]", ")", "\n", "head", "=", "np", ".", "append", "(", "head", ",", "[", "'test_'", "+", "k", "]", ")", "\n", "", "log", ".", "save_csv_log", "(", "opt", ",", "head", ",", "ret_log", ",", "is_create", "=", "(", "epo", "==", "1", ")", ")", "\n", "if", "ret_valid", "[", "'m_p3d_h36'", "]", "<", "err_best", ":", "\n", "                ", "err_best", "=", "ret_valid", "[", "'m_p3d_h36'", "]", "\n", "is_best", "=", "True", "\n", "", "log", ".", "save_ckpt", "(", "{", "'epoch'", ":", "epo", ",", "\n", "'lr'", ":", "lr_now", ",", "\n", "'err'", ":", "ret_valid", "[", "'m_p3d_h36'", "]", ",", "\n", "'state_dict'", ":", "net_pred", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", "}", ",", "\n", "is_best", "=", "is_best", ",", "opt", "=", "opt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.None.main_amass_3d.run_model": [[111, 184], ["numpy.arange", "time.time", "enumerate", "net_pred.train", "net_pred.eval", "numpy.zeros", "numpy.expand_dims", "numpy.expand_dims", "time.time", "p3d_h36.clone().reshape", "net_pred", "p3d_out_all[].reshape", "p3d_out_all[].reshape", "range", "numpy.array", "numpy.arange", "numpy.arange", "p3d_h36.clone", "torch.mean", "torch.mean", "torch.mean", "optimizer.zero_grad", "loss_all.backward", "torch.utils.clip_grad_norm_", "optimizer.step", "torch.mean", "torch.mean", "torch.mean", "torch.sum", "torch.sum", "torch.sum", "torch.sum.cpu().data.numpy", "print", "range", "p3d_h36.float().cuda", "p3d_h36.clone", "len", "len", "torch.norm", "torch.norm", "torch.norm", "list", "torch.mean.cpu().data.numpy", "torch.norm", "torch.norm", "torch.norm", "torch.sum.cpu().data.numpy", "torch.mean", "torch.mean", "torch.mean", "len", "net_pred.parameters", "torch.norm", "torch.norm", "torch.norm", "len", "p3d_h36.float", "torch.sum.cpu", "time.time", "time.time", "torch.mean.cpu", "torch.sum.cpu"], "function", ["None"], ["", "", "", "def", "run_model", "(", "net_pred", ",", "optimizer", "=", "None", ",", "is_train", "=", "0", ",", "data_loader", "=", "None", ",", "epo", "=", "1", ",", "opt", "=", "None", ")", ":", "\n", "    ", "if", "is_train", "==", "0", ":", "\n", "        ", "net_pred", ".", "train", "(", ")", "\n", "", "else", ":", "\n", "        ", "net_pred", ".", "eval", "(", ")", "\n", "\n", "", "l_p3d", "=", "0", "\n", "# l_beta = 0", "\n", "# j17to14 = [6, 5, 4, 1, 2, 3, 16, 15, 14, 11, 12, 13, 8, 10]", "\n", "if", "is_train", "<=", "1", ":", "\n", "        ", "m_p3d_h36", "=", "0", "\n", "", "else", ":", "\n", "        ", "titles", "=", "np", ".", "array", "(", "range", "(", "opt", ".", "output_n", ")", ")", "+", "1", "\n", "m_p3d_h36", "=", "np", ".", "zeros", "(", "[", "opt", ".", "output_n", "]", ")", "\n", "", "n", "=", "0", "\n", "itera", "=", "1", "\n", "in_n", "=", "opt", ".", "input_n", "\n", "out_n", "=", "opt", ".", "output_n", "\n", "joint_used", "=", "np", ".", "arange", "(", "4", ",", "22", ")", "\n", "seq_in", "=", "opt", ".", "kernel_size", "\n", "idx", "=", "np", ".", "expand_dims", "(", "np", ".", "arange", "(", "seq_in", "+", "1", ")", ",", "axis", "=", "1", ")", "+", "np", ".", "expand_dims", "(", "np", ".", "arange", "(", "out_n", ")", ",", "axis", "=", "0", ")", "\n", "st", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "(", "p3d_h36", ")", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "        ", "batch_size", ",", "seq_n", ",", "_", ",", "_", "=", "p3d_h36", ".", "shape", "\n", "n", "+=", "batch_size", "\n", "bt", "=", "time", ".", "time", "(", ")", "\n", "p3d_h36", "=", "p3d_h36", ".", "float", "(", ")", ".", "cuda", "(", ")", "[", ":", ",", ":", ",", "joint_used", "]", "*", "1000", "\n", "p3d_sup", "=", "p3d_h36", ".", "clone", "(", ")", "[", ":", ",", "-", "out_n", "-", "seq_in", ":", "]", "\n", "p3d_src", "=", "p3d_h36", ".", "clone", "(", ")", ".", "reshape", "(", "[", "batch_size", ",", "in_n", "+", "out_n", ",", "len", "(", "joint_used", ")", "*", "3", "]", ")", "\n", "\n", "p3d_out_all", "=", "net_pred", "(", "p3d_src", ",", "output_n", "=", "out_n", ",", "input_n", "=", "in_n", ",", "itera", "=", "itera", ")", "\n", "\n", "p3d_out", "=", "p3d_out_all", "[", ":", ",", "seq_in", ":", "]", ".", "reshape", "(", "[", "batch_size", ",", "out_n", ",", "len", "(", "joint_used", ")", ",", "3", "]", ")", "\n", "\n", "p3d_out_all", "=", "p3d_out_all", "[", ":", ",", ":", ",", "0", "]", ".", "reshape", "(", "[", "batch_size", ",", "seq_in", "+", "out_n", ",", "len", "(", "joint_used", ")", ",", "3", "]", ")", "\n", "\n", "# 2d joint loss:", "\n", "grad_norm", "=", "0", "\n", "if", "is_train", "==", "0", ":", "\n", "# loss_p3d = torch.mean(torch.sum(torch.abs(p3d_out_all - p3d_sup), dim=4))", "\n", "            ", "loss_p3d", "=", "torch", ".", "mean", "(", "torch", ".", "norm", "(", "p3d_out_all", "-", "p3d_sup", ",", "dim", "=", "3", ")", ")", "\n", "\n", "loss_all", "=", "loss_p3d", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss_all", ".", "backward", "(", ")", "\n", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "list", "(", "net_pred", ".", "parameters", "(", ")", ")", ",", "max_norm", "=", "opt", ".", "max_norm", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "# update log values", "\n", "l_p3d", "+=", "loss_p3d", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "*", "batch_size", "\n", "\n", "", "if", "is_train", "<=", "1", ":", "# if is validation or train simply output the overall mean error", "\n", "            ", "mpjpe_p3d_h36", "=", "torch", ".", "mean", "(", "torch", ".", "norm", "(", "p3d_h36", "[", ":", ",", "in_n", ":", "in_n", "+", "out_n", "]", "-", "p3d_out", ",", "dim", "=", "3", ")", ")", "\n", "m_p3d_h36", "+=", "mpjpe_p3d_h36", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "*", "batch_size", "\n", "", "else", ":", "\n", "            ", "mpjpe_p3d_h36", "=", "torch", ".", "sum", "(", "torch", ".", "mean", "(", "torch", ".", "norm", "(", "p3d_h36", "[", ":", ",", "in_n", ":", "]", "-", "p3d_out", ",", "dim", "=", "3", ")", ",", "dim", "=", "2", ")", ",", "dim", "=", "0", ")", "\n", "m_p3d_h36", "+=", "mpjpe_p3d_h36", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "\n", "", "if", "i", "%", "1000", "==", "0", ":", "\n", "            ", "print", "(", "'{}/{}|bt {:.3f}s|tt{:.0f}s'", ".", "format", "(", "i", "+", "1", ",", "len", "(", "data_loader", ")", ",", "time", ".", "time", "(", ")", "-", "bt", ",", "time", ".", "time", "(", ")", "-", "st", ")", ")", "\n", "\n", "", "", "ret", "=", "{", "}", "\n", "if", "is_train", "==", "0", ":", "\n", "        ", "ret", "[", "\"l_p3d\"", "]", "=", "l_p3d", "/", "n", "\n", "\n", "", "if", "is_train", "<=", "1", ":", "\n", "        ", "ret", "[", "\"m_p3d_h36\"", "]", "=", "m_p3d_h36", "/", "n", "\n", "\n", "", "else", ":", "\n", "        ", "m_p3d_h36", "=", "m_p3d_h36", "/", "n", "\n", "for", "j", "in", "range", "(", "out_n", ")", ":", "\n", "            ", "ret", "[", "\"#{:d}\"", ".", "format", "(", "titles", "[", "j", "]", ")", "]", "=", "m_p3d_h36", "[", "j", "]", "\n", "\n", "", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.None.main_h36m_ang_eval.main": [[16, 64], ["print", "model.AttModel.AttModel", "AttModel.AttModel.cuda", "print", "torch.load", "torch.load", "torch.load", "AttModel.AttModel.load_state_dict", "print", "numpy.array", "range", "numpy.zeros", "enumerate", "numpy.mean", "numpy.expand_dims", "numpy.concatenate", "utils.log.save_csv_log", "numpy.append", "utils.h36motion.Datasets", "print", "torch.utils.data.DataLoader", "main_h36m_ang_eval.run_model", "print", "numpy.array", "run_model.keys", "numpy.array", "numpy.append", "np.zeros.astype", "len", "datasets.Datasets.__len__"], "function", ["home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.log.save_csv_log", "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.None.main_h36m_ang.run_model", "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.h36motion3d.Datasets.__len__"], ["def", "main", "(", "opt", ")", ":", "\n", "    ", "lr_now", "=", "opt", ".", "lr_now", "\n", "start_epoch", "=", "1", "\n", "# opt.is_eval = True", "\n", "print", "(", "'>>> create models'", ")", "\n", "in_features", "=", "48", "\n", "d_model", "=", "opt", ".", "d_model", "\n", "kernel_size", "=", "opt", ".", "kernel_size", "\n", "net_pred", "=", "AttModel", ".", "AttModel", "(", "in_features", "=", "in_features", ",", "kernel_size", "=", "kernel_size", ",", "d_model", "=", "d_model", ",", "\n", "num_stage", "=", "opt", ".", "num_stage", ",", "dct_n", "=", "opt", ".", "dct_n", ")", "\n", "net_pred", ".", "cuda", "(", ")", "\n", "model_path_len", "=", "'{}/ckpt_best.pth.tar'", ".", "format", "(", "opt", ".", "ckpt", ")", "\n", "print", "(", "\">>> loading ckpt len from '{}'\"", ".", "format", "(", "model_path_len", ")", ")", "\n", "ckpt", "=", "torch", ".", "load", "(", "model_path_len", ")", "\n", "start_epoch", "=", "ckpt", "[", "'epoch'", "]", "+", "1", "\n", "err_best", "=", "ckpt", "[", "'err'", "]", "\n", "lr_now", "=", "ckpt", "[", "'lr'", "]", "\n", "net_pred", ".", "load_state_dict", "(", "ckpt", "[", "'state_dict'", "]", ")", "\n", "# net.load_state_dict(ckpt)", "\n", "# optimizer.load_state_dict(ckpt['optimizer'])", "\n", "# lr_now = util.lr_decay_mine(optimizer, lr_now, 0.2)", "\n", "print", "(", "\">>> ckpt len loaded (epoch: {} | err: {})\"", ".", "format", "(", "start_epoch", ",", "err_best", ")", ")", "\n", "\n", "head", "=", "np", ".", "array", "(", "[", "'act'", "]", ")", "\n", "for", "k", "in", "range", "(", "1", ",", "opt", ".", "output_n", "+", "1", ")", ":", "\n", "        ", "head", "=", "np", ".", "append", "(", "head", ",", "[", "f'#{k}'", "]", ")", "\n", "\n", "", "acts", "=", "[", "\"walking\"", ",", "\"eating\"", ",", "\"smoking\"", ",", "\"discussion\"", ",", "\"directions\"", ",", "\n", "\"greeting\"", ",", "\"phoning\"", ",", "\"posing\"", ",", "\"purchases\"", ",", "\"sitting\"", ",", "\n", "\"sittingdown\"", ",", "\"takingphoto\"", ",", "\"waiting\"", ",", "\"walkingdog\"", ",", "\n", "\"walkingtogether\"", "]", "\n", "errs", "=", "np", ".", "zeros", "(", "[", "len", "(", "acts", ")", "+", "1", ",", "opt", ".", "output_n", "]", ")", "\n", "for", "i", ",", "act", "in", "enumerate", "(", "acts", ")", ":", "\n", "        ", "test_dataset", "=", "datasets", ".", "Datasets", "(", "opt", ",", "split", "=", "2", ",", "actions", "=", "[", "act", "]", ")", "\n", "print", "(", "'>>> Testing dataset length: {:d}'", ".", "format", "(", "test_dataset", ".", "__len__", "(", ")", ")", ")", "\n", "test_loader", "=", "DataLoader", "(", "test_dataset", ",", "batch_size", "=", "opt", ".", "test_batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "0", ",", "\n", "pin_memory", "=", "True", ")", "\n", "\n", "ret_test", "=", "run_model", "(", "net_pred", ",", "is_train", "=", "3", ",", "data_loader", "=", "test_loader", ",", "opt", "=", "opt", ")", "\n", "print", "(", "'testing error: {:.3f}'", ".", "format", "(", "ret_test", "[", "'#1'", "]", ")", ")", "\n", "ret_log", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "for", "k", "in", "ret_test", ".", "keys", "(", ")", ":", "\n", "            ", "ret_log", "=", "np", ".", "append", "(", "ret_log", ",", "[", "ret_test", "[", "k", "]", "]", ")", "\n", "", "errs", "[", "i", "]", "=", "ret_log", "\n", "", "errs", "[", "-", "1", "]", "=", "np", ".", "mean", "(", "errs", "[", ":", "-", "1", "]", ",", "axis", "=", "0", ")", "\n", "acts", "=", "np", ".", "expand_dims", "(", "np", ".", "array", "(", "acts", "+", "[", "\"average\"", "]", ")", ",", "axis", "=", "1", ")", "\n", "value", "=", "np", ".", "concatenate", "(", "[", "acts", ",", "errs", ".", "astype", "(", "np", ".", "str", ")", "]", ",", "axis", "=", "1", ")", "\n", "log", ".", "save_csv_log", "(", "opt", ",", "head", ",", "value", ",", "is_create", "=", "True", ",", "file_name", "=", "'test_pre_action_256_seq'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.None.main_h36m_ang_eval.run_model": [[66, 118], ["net_pred.eval", "numpy.zeros", "numpy.array", "enumerate", "range", "numpy.array", "numpy.expand_dims", "time.time", "ang_h36.float().cuda.float().cuda", "net_pred", "ang_out.reshape().reshape", "ang_h36[].reshape().reshape", "data_utils.rotmat2euler_torch", "ang_out_euler.view.view", "data_utils.rotmat2euler_torch", "ang_gt_euler.view.view", "torch.sum", "torch.sum", "torch.sum", "torch.sum.cpu().data.numpy", "range", "numpy.arange", "numpy.expand_dims", "ang_h36.float().cuda.clone", "ang_out_all[].transpose().reshape", "ang_h36.float().cuda.clone", "data_utils.expmap2rotmat_torch", "data_utils.expmap2rotmat_torch", "torch.norm", "torch.norm", "torch.norm", "numpy.arange", "ang_h36.float().cuda.float", "ang_h36.float().cuda.clone", "ang_out.reshape", "ang_h36[].reshape", "ang_out_all[].transpose", "torch.sum.cpu"], "function", ["home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.data_utils.rotmat2euler_torch", "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.data_utils.rotmat2euler_torch", "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.data_utils.expmap2rotmat_torch", "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.data_utils.expmap2rotmat_torch"], ["", "def", "run_model", "(", "net_pred", ",", "optimizer", "=", "None", ",", "is_train", "=", "0", ",", "data_loader", "=", "None", ",", "epo", "=", "1", ",", "opt", "=", "None", ")", ":", "\n", "    ", "net_pred", ".", "eval", "(", ")", "\n", "\n", "titles", "=", "np", ".", "array", "(", "range", "(", "opt", ".", "output_n", ")", ")", "+", "1", "\n", "m_ang_seq", "=", "np", ".", "zeros", "(", "[", "opt", ".", "output_n", "]", ")", "\n", "n", "=", "0", "\n", "in_n", "=", "opt", ".", "input_n", "\n", "out_n", "=", "opt", ".", "output_n", "\n", "dim_used", "=", "np", ".", "array", "(", "[", "6", ",", "7", ",", "8", ",", "9", ",", "12", ",", "13", ",", "14", ",", "15", ",", "21", ",", "22", ",", "23", ",", "24", ",", "27", ",", "28", ",", "29", ",", "30", ",", "36", ",", "37", ",", "38", ",", "39", ",", "40", ",", "41", ",", "42", ",", "\n", "43", ",", "44", ",", "45", ",", "46", ",", "47", ",", "51", ",", "52", ",", "53", ",", "54", ",", "55", ",", "56", ",", "57", ",", "60", ",", "61", ",", "62", ",", "75", ",", "76", ",", "77", ",", "78", ",", "79", ",", "80", ",", "81", ",", "84", ",", "85", ",", "\n", "86", "]", ")", "\n", "seq_in", "=", "opt", ".", "kernel_size", "\n", "\n", "itera", "=", "3", "\n", "idx", "=", "np", ".", "expand_dims", "(", "np", ".", "arange", "(", "seq_in", "+", "out_n", ")", ",", "axis", "=", "1", ")", "+", "(", "\n", "out_n", "-", "seq_in", "+", "np", ".", "expand_dims", "(", "np", ".", "arange", "(", "itera", ")", ",", "axis", "=", "0", ")", ")", "\n", "for", "i", ",", "(", "ang_h36", ")", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "# print(i)", "\n", "        ", "batch_size", ",", "seq_n", ",", "_", "=", "ang_h36", ".", "shape", "\n", "# when only one sample in this batch", "\n", "if", "batch_size", "==", "1", "and", "is_train", "==", "0", ":", "\n", "            ", "continue", "\n", "", "n", "+=", "batch_size", "\n", "bt", "=", "time", ".", "time", "(", ")", "\n", "ang_h36", "=", "ang_h36", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "ang_sup", "=", "ang_h36", ".", "clone", "(", ")", "[", ":", ",", ":", ",", "dim_used", "]", "[", ":", ",", "-", "out_n", "-", "seq_in", ":", "]", "\n", "ang_src", "=", "ang_h36", ".", "clone", "(", ")", "[", ":", ",", ":", ",", "dim_used", "]", "\n", "# ang_src = ang_src.permute(1, 0, 2)  # seq * n * dim", "\n", "# ang_src = ang_src[:in_n]", "\n", "ang_out_all", "=", "net_pred", "(", "ang_src", ",", "output_n", "=", "10", ",", "dct_n", "=", "opt", ".", "dct_n", ",", "\n", "itera", "=", "itera", ",", "input_n", "=", "in_n", ")", "\n", "ang_out_all", "=", "ang_out_all", "[", ":", ",", "seq_in", ":", "]", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "[", "batch_size", ",", "10", "*", "itera", ",", "-", "1", "]", ")", "[", ":", ",", ":", "out_n", "]", "\n", "ang_out", "=", "ang_h36", ".", "clone", "(", ")", "[", ":", ",", "in_n", ":", "in_n", "+", "out_n", "]", "\n", "ang_out", "[", ":", ",", ":", ",", "dim_used", "]", "=", "ang_out_all", "\n", "\n", "ang_out_euler", "=", "ang_out", ".", "reshape", "(", "[", "-", "1", ",", "99", "]", ")", ".", "reshape", "(", "[", "-", "1", ",", "3", "]", ")", "\n", "ang_gt_euler", "=", "ang_h36", "[", ":", ",", "in_n", ":", "in_n", "+", "out_n", "]", ".", "reshape", "(", "[", "-", "1", ",", "99", "]", ")", ".", "reshape", "(", "[", "-", "1", ",", "3", "]", ")", "\n", "\n", "import", "utils", ".", "data_utils", "as", "data_utils", "\n", "ang_out_euler", "=", "data_utils", ".", "rotmat2euler_torch", "(", "data_utils", ".", "expmap2rotmat_torch", "(", "ang_out_euler", ")", ")", "\n", "ang_out_euler", "=", "ang_out_euler", ".", "view", "(", "-", "1", ",", "out_n", ",", "99", ")", "\n", "ang_gt_euler", "=", "data_utils", ".", "rotmat2euler_torch", "(", "data_utils", ".", "expmap2rotmat_torch", "(", "ang_gt_euler", ")", ")", "\n", "ang_gt_euler", "=", "ang_gt_euler", ".", "view", "(", "-", "1", ",", "out_n", ",", "99", ")", "\n", "\n", "eulererr_ang_seq", "=", "torch", ".", "sum", "(", "torch", ".", "norm", "(", "ang_out_euler", "-", "ang_gt_euler", ",", "dim", "=", "2", ")", ",", "dim", "=", "0", ")", "\n", "m_ang_seq", "+=", "eulererr_ang_seq", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "\n", "", "ret", "=", "{", "}", "\n", "m_ang_h36", "=", "m_ang_seq", "/", "n", "\n", "for", "j", "in", "range", "(", "out_n", ")", ":", "\n", "        ", "ret", "[", "\"#{:d}\"", ".", "format", "(", "titles", "[", "j", "]", ")", "]", "=", "m_ang_h36", "[", "j", "]", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.None.main_selected_seq.main": [[14, 70], ["print", "model.AttModel.AttModel", "AttModel.AttModel.cuda", "print", "print", "torch.load", "torch.load", "AttModel.AttModel.load_state_dict", "print", "print", "pandas.read_csv", "range", "numpy.zeros", "numpy.array", "range", "numpy.expand_dims", "numpy.concatenate", "utils.log.save_csv_log", "utils.h36motion3d.Datasets", "print", "torch.utils.data.DataLoader", "main_selected_seq.run_model", "numpy.append", "numpy.array", "sele.keys", "sele[].append", "np.zeros.astype", "sum", "int", "int", "sele.keys", "datasets.Datasets.__len__", "p.numel", "AttModel.AttModel.parameters"], "function", ["home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.log.save_csv_log", "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.None.main_h36m_ang.run_model", "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.h36motion3d.Datasets.__len__"], ["def", "main", "(", "opt", ")", ":", "\n", "    ", "lr_now", "=", "opt", ".", "lr_now", "\n", "start_epoch", "=", "1", "\n", "# opt.is_eval = True", "\n", "ckpt", "=", "'./checkpoint/pretrained/h36m_3d_in50_out10_dctn20/'", "\n", "batch_size", "=", "1", "\n", "opt", ".", "ckpt", "=", "ckpt", "\n", "print", "(", "'>>> create models'", ")", "\n", "net_pred", "=", "AttModel", ".", "AttModel", "(", "in_features", "=", "66", ",", "kernel_size", "=", "10", ",", "d_model", "=", "256", ",", "\n", "num_stage", "=", "12", ",", "dct_n", "=", "20", ")", "\n", "net_pred", ".", "cuda", "(", ")", "\n", "print", "(", "\">>> total params: {:.2f}M\"", ".", "format", "(", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "net_pred", ".", "parameters", "(", ")", ")", "/", "1000000.0", ")", ")", "\n", "\n", "model_path_len", "=", "'./{}/ckpt_best.pth.tar'", ".", "format", "(", "opt", ".", "ckpt", ")", "\n", "print", "(", "\">>> loading ckpt len from '{}'\"", ".", "format", "(", "model_path_len", ")", ")", "\n", "ckpt", "=", "torch", ".", "load", "(", "model_path_len", ")", "\n", "start_epoch", "=", "ckpt", "[", "'epoch'", "]", "\n", "err_best", "=", "ckpt", "[", "'err'", "]", "\n", "net_pred", ".", "load_state_dict", "(", "ckpt", "[", "'state_dict'", "]", ")", "\n", "print", "(", "\">>> ckpt len loaded (epoch: {} | err: {})\"", ".", "format", "(", "start_epoch", ",", "err_best", ")", ")", "\n", "\n", "print", "(", "'>>> loading datasets'", ")", "\n", "\n", "acts", "=", "[", "\"walking\"", ",", "\"eating\"", ",", "\"smoking\"", ",", "\"discussion\"", ",", "\"directions\"", ",", "\n", "\"greeting\"", ",", "\"phoning\"", ",", "\"posing\"", ",", "\"purchases\"", ",", "\"sitting\"", ",", "\n", "\"sittingdown\"", ",", "\"takingphoto\"", ",", "\"waiting\"", ",", "\"walkingdog\"", ",", "\n", "\"walkingtogether\"", "]", "\n", "good_idx", "=", "pd", ".", "read_csv", "(", "'./checkpoint/pretrained/seq_selected.csv'", ")", "\n", "good_idx", "=", "good_idx", ".", "values", "\n", "sele", "=", "{", "}", "\n", "for", "gi", "in", "range", "(", "good_idx", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "if", "good_idx", "[", "gi", ",", "0", "]", "in", "sele", ".", "keys", "(", ")", ":", "\n", "            ", "sele", "[", "good_idx", "[", "gi", ",", "0", "]", "]", ".", "append", "(", "int", "(", "good_idx", "[", "gi", ",", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "sele", "[", "good_idx", "[", "gi", ",", "0", "]", "]", "=", "[", "int", "(", "good_idx", "[", "gi", ",", "1", "]", ")", "]", "\n", "\n", "", "", "err", "=", "np", ".", "zeros", "(", "[", "2", ",", "opt", ".", "output_n", "]", ")", "\n", "n", "=", "0", "\n", "for", "act", "in", "acts", ":", "\n", "        ", "if", "not", "act", "in", "sele", ".", "keys", "(", ")", ":", "\n", "            ", "continue", "\n", "", "test_dataset", "=", "datasets", ".", "Datasets", "(", "opt", ",", "split", "=", "2", ",", "actions", "=", "[", "act", "]", ")", "\n", "print", "(", "'>>> Testing dataset length: {:d}'", ".", "format", "(", "test_dataset", ".", "__len__", "(", ")", ")", ")", "\n", "test_loader", "=", "DataLoader", "(", "test_dataset", ",", "batch_size", "=", "1", ",", "shuffle", "=", "False", ",", "num_workers", "=", "0", ",", "\n", "pin_memory", "=", "True", ")", "\n", "# evaluation", "\n", "ret", ",", "nt", "=", "run_model", "(", "net_pred", ",", "is_train", "=", "3", ",", "data_loader", "=", "test_loader", ",", "opt", "=", "opt", ",", "good_idx", "=", "sele", "[", "act", "]", ")", "\n", "err", "+=", "ret", "\n", "n", "+=", "nt", "\n", "", "err", "=", "err", "/", "n", "\n", "head", "=", "np", ".", "array", "(", "[", "'input_n'", "]", ")", "\n", "for", "k", "in", "range", "(", "1", ",", "opt", ".", "output_n", "+", "1", ")", ":", "\n", "        ", "head", "=", "np", ".", "append", "(", "head", ",", "[", "f'#{k}'", "]", ")", "\n", "", "value", "=", "np", ".", "expand_dims", "(", "np", ".", "array", "(", "[", "'in50'", ",", "'in100'", "]", ")", ",", "axis", "=", "1", ")", "\n", "value", "=", "np", ".", "concatenate", "(", "[", "value", ",", "err", ".", "astype", "(", "np", ".", "str", ")", "]", ",", "axis", "=", "1", ")", "\n", "log", ".", "save_csv_log", "(", "opt", ",", "head", ",", "value", ",", "is_create", "=", "True", ",", "file_name", "=", "'test_in50_in100'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.None.main_selected_seq.run_model": [[72, 129], ["net_pred.eval", "numpy.zeros", "numpy.array", "numpy.array", "numpy.concatenate", "numpy.array", "numpy.concatenate", "enumerate", "numpy.array", "p3d_h36.reshape.float().cuda", "net_pred", "p3d_out_50.reshape.reshape", "net_pred", "p3d_out_100.reshape.reshape", "p3d_h36.reshape.reshape", "torch.sum", "torch.sum", "torch.sum.cpu().data.numpy", "torch.sum", "torch.sum", "torch.sum.cpu().data.numpy", "range", "p3d_h36.reshape.clone", "p3d_h36.reshape.clone", "p3d_out_all[].transpose().reshape", "p3d_h36.reshape.clone", "p3d_h36.reshape.clone", "p3d_out_all[].transpose().reshape", "p3d_h36.reshape.clone", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "p3d_h36.reshape.float", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "p3d_out_all[].transpose", "p3d_out_all[].transpose", "torch.sum.cpu", "torch.sum.cpu"], "function", ["None"], ["", "def", "run_model", "(", "net_pred", ",", "optimizer", "=", "None", ",", "is_train", "=", "0", ",", "data_loader", "=", "None", ",", "epo", "=", "1", ",", "opt", "=", "None", ",", "good_idx", "=", "[", "]", ")", ":", "\n", "    ", "net_pred", ".", "eval", "(", ")", "\n", "titles", "=", "np", ".", "array", "(", "range", "(", "opt", ".", "output_n", ")", ")", "+", "1", "\n", "m_p3d_h36", "=", "np", ".", "zeros", "(", "[", "2", ",", "opt", ".", "output_n", "]", ")", "\n", "n", "=", "0", "\n", "in_n", "=", "opt", ".", "input_n", "\n", "out_n", "=", "opt", ".", "output_n", "\n", "dim_used", "=", "np", ".", "array", "(", "[", "6", ",", "7", ",", "8", ",", "9", ",", "10", ",", "11", ",", "12", ",", "13", ",", "14", ",", "15", ",", "16", ",", "17", ",", "21", ",", "22", ",", "23", ",", "24", ",", "25", ",", "\n", "26", ",", "27", ",", "28", ",", "29", ",", "30", ",", "31", ",", "32", ",", "36", ",", "37", ",", "38", ",", "39", ",", "40", ",", "41", ",", "42", ",", "43", ",", "44", ",", "45", ",", "\n", "46", ",", "47", ",", "51", ",", "52", ",", "53", ",", "54", ",", "55", ",", "56", ",", "57", ",", "58", ",", "59", ",", "63", ",", "64", ",", "65", ",", "66", ",", "67", ",", "68", ",", "\n", "75", ",", "76", ",", "77", ",", "78", ",", "79", ",", "80", ",", "81", ",", "82", ",", "83", ",", "87", ",", "88", ",", "89", ",", "90", ",", "91", ",", "92", "]", ")", "\n", "seq_in", "=", "opt", ".", "kernel_size", "\n", "# joints at same loc", "\n", "joint_to_ignore", "=", "np", ".", "array", "(", "[", "16", ",", "20", ",", "23", ",", "24", ",", "28", ",", "31", "]", ")", "\n", "index_to_ignore", "=", "np", ".", "concatenate", "(", "(", "joint_to_ignore", "*", "3", ",", "joint_to_ignore", "*", "3", "+", "1", ",", "joint_to_ignore", "*", "3", "+", "2", ")", ")", "\n", "joint_equal", "=", "np", ".", "array", "(", "[", "13", ",", "19", ",", "22", ",", "13", ",", "27", ",", "30", "]", ")", "\n", "index_to_equal", "=", "np", ".", "concatenate", "(", "(", "joint_equal", "*", "3", ",", "joint_equal", "*", "3", "+", "1", ",", "joint_equal", "*", "3", "+", "2", ")", ")", "\n", "\n", "itera", "=", "3", "\n", "for", "i", ",", "(", "p3d_h36", ")", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "# print(i)", "\n", "        ", "if", "not", "(", "i", "in", "good_idx", ")", ":", "\n", "            ", "continue", "\n", "", "batch_size", ",", "seq_n", ",", "_", "=", "p3d_h36", ".", "shape", "\n", "# when only one sample in this batch", "\n", "if", "batch_size", "==", "1", "and", "is_train", "==", "0", ":", "\n", "            ", "continue", "\n", "", "n", "+=", "batch_size", "\n", "p3d_h36", "=", "p3d_h36", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "p3d_src", "=", "p3d_h36", ".", "clone", "(", ")", "[", ":", ",", ":", ",", "dim_used", "]", "\n", "\n", "p3d_src_50", "=", "p3d_h36", ".", "clone", "(", ")", "[", ":", ",", "-", "50", "-", "out_n", ":", ",", "dim_used", "]", "\n", "p3d_out_all", "=", "net_pred", "(", "p3d_src_50", ",", "input_n", "=", "50", ",", "output_n", "=", "10", ",", "itera", "=", "itera", ")", "\n", "\n", "p3d_out_all", "=", "p3d_out_all", "[", ":", ",", "10", ":", "]", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "[", "batch_size", ",", "10", "*", "itera", ",", "-", "1", "]", ")", "[", ":", ",", ":", "out_n", "]", "\n", "p3d_out_50", "=", "p3d_h36", ".", "clone", "(", ")", "[", ":", ",", "in_n", ":", "in_n", "+", "out_n", "]", "\n", "p3d_out_50", "[", ":", ",", ":", ",", "dim_used", "]", "=", "p3d_out_all", "\n", "p3d_out_50", "[", ":", ",", ":", ",", "index_to_ignore", "]", "=", "p3d_out_50", "[", ":", ",", ":", ",", "index_to_equal", "]", "\n", "p3d_out_50", "=", "p3d_out_50", ".", "reshape", "(", "[", "-", "1", ",", "out_n", ",", "32", ",", "3", "]", ")", "\n", "\n", "p3d_src_100", "=", "p3d_h36", ".", "clone", "(", ")", "[", ":", ",", ":", ",", "dim_used", "]", "\n", "p3d_out_all", "=", "net_pred", "(", "p3d_src_100", ",", "input_n", "=", "100", ",", "output_n", "=", "10", ",", "itera", "=", "itera", ")", "\n", "\n", "p3d_out_all", "=", "p3d_out_all", "[", ":", ",", "10", ":", "]", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "[", "batch_size", ",", "10", "*", "itera", ",", "-", "1", "]", ")", "[", ":", ",", ":", "out_n", "]", "\n", "p3d_out_100", "=", "p3d_h36", ".", "clone", "(", ")", "[", ":", ",", "in_n", ":", "in_n", "+", "out_n", "]", "\n", "p3d_out_100", "[", ":", ",", ":", ",", "dim_used", "]", "=", "p3d_out_all", "\n", "p3d_out_100", "[", ":", ",", ":", ",", "index_to_ignore", "]", "=", "p3d_out_100", "[", ":", ",", ":", ",", "index_to_equal", "]", "\n", "p3d_out_100", "=", "p3d_out_100", ".", "reshape", "(", "[", "-", "1", ",", "out_n", ",", "32", ",", "3", "]", ")", "\n", "\n", "p3d_h36", "=", "p3d_h36", ".", "reshape", "(", "[", "-", "1", ",", "in_n", "+", "out_n", ",", "32", ",", "3", "]", ")", "\n", "\n", "mpjpe_p3d_h36", "=", "torch", ".", "sum", "(", "torch", ".", "mean", "(", "torch", ".", "norm", "(", "p3d_h36", "[", ":", ",", "in_n", ":", "]", "-", "p3d_out_50", ",", "dim", "=", "3", ")", ",", "dim", "=", "2", ")", ",", "dim", "=", "0", ")", "\n", "m_p3d_h36", "[", "0", "]", "+=", "mpjpe_p3d_h36", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "\n", "mpjpe_p3d_h36", "=", "torch", ".", "sum", "(", "torch", ".", "mean", "(", "torch", ".", "norm", "(", "p3d_h36", "[", ":", ",", "in_n", ":", "]", "-", "p3d_out_100", ",", "dim", "=", "3", ")", ",", "dim", "=", "2", ")", ",", "dim", "=", "0", ")", "\n", "m_p3d_h36", "[", "1", "]", "+=", "mpjpe_p3d_h36", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "", "return", "m_p3d_h36", ",", "n", "\n", "\n"]], "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.None.main_h36m_ang.main": [[16, 112], ["print", "model.AttModel.AttModel", "AttModel.AttModel.cuda", "torch.Adam", "print", "print", "utils.h36motion.Datasets", "print", "torch.utils.data.DataLoader", "filter", "print", "torch.load", "torch.load", "torch.load", "AttModel.AttModel.load_state_dict", "print", "utils.h36motion.Datasets", "print", "torch.utils.data.DataLoader", "utils.h36motion.Datasets", "print", "torch.utils.data.DataLoader", "main_h36m_ang.run_model", "numpy.array", "numpy.array", "run_model.keys", "utils.log.save_csv_log", "range", "AttModel.AttModel.parameters", "datasets.Datasets.__len__", "numpy.append", "numpy.append", "utils.util.lr_decay_mine", "print", "main_h36m_ang.run_model", "print", "main_h36m_ang.run_model", "print", "main_h36m_ang.run_model", "print", "numpy.array", "numpy.array", "run_model.keys", "run_model.keys", "run_model.keys", "utils.log.save_csv_log", "utils.log.save_ckpt", "sum", "datasets.Datasets.__len__", "datasets.Datasets.__len__", "numpy.append", "numpy.append", "numpy.append", "numpy.append", "numpy.append", "numpy.append", "AttModel.AttModel.state_dict", "optim.Adam.state_dict", "p.numel", "AttModel.AttModel.parameters"], "function", ["home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.None.main_h36m_ang.run_model", "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.log.save_csv_log", "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.h36motion3d.Datasets.__len__", "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.util.lr_decay_mine", "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.None.main_h36m_ang.run_model", "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.None.main_h36m_ang.run_model", "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.None.main_h36m_ang.run_model", "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.log.save_csv_log", "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.log.save_ckpt", "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.h36motion3d.Datasets.__len__", "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.h36motion3d.Datasets.__len__"], ["def", "main", "(", "opt", ")", ":", "\n", "    ", "lr_now", "=", "opt", ".", "lr_now", "\n", "start_epoch", "=", "1", "\n", "# opt.is_eval = True", "\n", "print", "(", "'>>> create models'", ")", "\n", "in_features", "=", "opt", ".", "in_features", "# 48", "\n", "d_model", "=", "opt", ".", "d_model", "\n", "kernel_size", "=", "opt", ".", "kernel_size", "\n", "net_pred", "=", "AttModel", ".", "AttModel", "(", "in_features", "=", "in_features", ",", "kernel_size", "=", "kernel_size", ",", "d_model", "=", "d_model", ",", "\n", "num_stage", "=", "opt", ".", "num_stage", ",", "dct_n", "=", "opt", ".", "dct_n", ")", "\n", "net_pred", ".", "cuda", "(", ")", "\n", "\n", "optimizer", "=", "optim", ".", "Adam", "(", "filter", "(", "lambda", "x", ":", "x", ".", "requires_grad", ",", "net_pred", ".", "parameters", "(", ")", ")", ",", "lr", "=", "opt", ".", "lr_now", ")", "\n", "print", "(", "\">>> total params: {:.2f}M\"", ".", "format", "(", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "net_pred", ".", "parameters", "(", ")", ")", "/", "1000000.0", ")", ")", "\n", "\n", "if", "opt", ".", "is_load", "or", "opt", ".", "is_eval", ":", "\n", "        ", "model_path_len", "=", "'./{}/ckpt_best.pth.tar'", ".", "format", "(", "opt", ".", "ckpt", ")", "\n", "print", "(", "\">>> loading ckpt len from '{}'\"", ".", "format", "(", "model_path_len", ")", ")", "\n", "ckpt", "=", "torch", ".", "load", "(", "model_path_len", ")", "\n", "start_epoch", "=", "ckpt", "[", "'epoch'", "]", "+", "1", "\n", "err_best", "=", "ckpt", "[", "'err'", "]", "\n", "lr_now", "=", "ckpt", "[", "'lr'", "]", "\n", "net_pred", ".", "load_state_dict", "(", "ckpt", "[", "'state_dict'", "]", ")", "\n", "# net.load_state_dict(ckpt)", "\n", "# optimizer.load_state_dict(ckpt['optimizer'])", "\n", "# lr_now = util.lr_decay_mine(optimizer, lr_now, 0.2)", "\n", "print", "(", "\">>> ckpt len loaded (epoch: {} | err: {})\"", ".", "format", "(", "start_epoch", ",", "err_best", ")", ")", "\n", "\n", "", "print", "(", "'>>> loading datasets'", ")", "\n", "\n", "if", "not", "opt", ".", "is_eval", ":", "\n", "# dataset = datasets.Datasets(opt, split=0)", "\n", "# actions = [\"walking\", \"eating\", \"smoking\", \"discussion\", \"directions\",", "\n", "#            \"greeting\", \"phoning\", \"posing\", \"purchases\", \"sitting\",", "\n", "#            \"sittingdown\", \"takingphoto\", \"waiting\", \"walkingdog\",", "\n", "#            \"walkingtogether\"]", "\n", "        ", "dataset", "=", "datasets", ".", "Datasets", "(", "opt", ",", "split", "=", "0", ")", "\n", "print", "(", "'>>> Training dataset length: {:d}'", ".", "format", "(", "dataset", ".", "__len__", "(", ")", ")", ")", "\n", "data_loader", "=", "DataLoader", "(", "dataset", ",", "batch_size", "=", "opt", ".", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "0", ",", "pin_memory", "=", "True", ")", "\n", "valid_dataset", "=", "datasets", ".", "Datasets", "(", "opt", ",", "split", "=", "1", ")", "\n", "print", "(", "'>>> Validation dataset length: {:d}'", ".", "format", "(", "valid_dataset", ".", "__len__", "(", ")", ")", ")", "\n", "valid_loader", "=", "DataLoader", "(", "valid_dataset", ",", "batch_size", "=", "opt", ".", "test_batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "0", ",", "\n", "pin_memory", "=", "True", ")", "\n", "\n", "", "test_dataset", "=", "datasets", ".", "Datasets", "(", "opt", ",", "split", "=", "2", ")", "\n", "print", "(", "'>>> Testing dataset length: {:d}'", ".", "format", "(", "test_dataset", ".", "__len__", "(", ")", ")", ")", "\n", "test_loader", "=", "DataLoader", "(", "test_dataset", ",", "batch_size", "=", "opt", ".", "test_batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "0", ",", "\n", "pin_memory", "=", "True", ")", "\n", "\n", "# evaluation", "\n", "if", "opt", ".", "is_eval", ":", "\n", "        ", "ret_test", "=", "run_model", "(", "net_pred", ",", "is_train", "=", "3", ",", "data_loader", "=", "test_loader", ",", "opt", "=", "opt", ")", "\n", "ret_log", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "head", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "for", "k", "in", "ret_test", ".", "keys", "(", ")", ":", "\n", "            ", "ret_log", "=", "np", ".", "append", "(", "ret_log", ",", "[", "ret_test", "[", "k", "]", "]", ")", "\n", "head", "=", "np", ".", "append", "(", "head", ",", "[", "k", "]", ")", "\n", "", "log", ".", "save_csv_log", "(", "opt", ",", "head", ",", "ret_log", ",", "is_create", "=", "True", ",", "file_name", "=", "'test_walking'", ")", "\n", "# print('testing error: {:.3f}'.format(ret_test['m_ang_h36']))", "\n", "# training", "\n", "", "if", "not", "opt", ".", "is_eval", ":", "\n", "        ", "err_best", "=", "1000", "\n", "for", "epo", "in", "range", "(", "start_epoch", ",", "opt", ".", "epoch", "+", "1", ")", ":", "\n", "            ", "is_best", "=", "False", "\n", "# if epo % opt.lr_decay == 0:", "\n", "lr_now", "=", "util", ".", "lr_decay_mine", "(", "optimizer", ",", "lr_now", ",", "0.1", "**", "(", "1", "/", "opt", ".", "epoch", ")", ")", "\n", "print", "(", "'>>> training epoch: {:d}'", ".", "format", "(", "epo", ")", ")", "\n", "ret_train", "=", "run_model", "(", "net_pred", ",", "optimizer", ",", "is_train", "=", "0", ",", "data_loader", "=", "data_loader", ",", "epo", "=", "epo", ",", "opt", "=", "opt", ")", "\n", "print", "(", "'train error: {:.3f}'", ".", "format", "(", "ret_train", "[", "'m_ang_h36'", "]", ")", ")", "\n", "ret_valid", "=", "run_model", "(", "net_pred", ",", "is_train", "=", "1", ",", "data_loader", "=", "valid_loader", ",", "opt", "=", "opt", ",", "\n", "epo", "=", "epo", ")", "\n", "print", "(", "'validation error: {:.3f}'", ".", "format", "(", "ret_valid", "[", "'m_ang_h36'", "]", ")", ")", "\n", "ret_test", "=", "run_model", "(", "net_pred", ",", "is_train", "=", "32", ",", "data_loader", "=", "test_loader", ",", "opt", "=", "opt", ",", "\n", "epo", "=", "epo", ")", "\n", "print", "(", "'testing error: {:.3f}'", ".", "format", "(", "ret_test", "[", "'#1'", "]", ")", ")", "\n", "ret_log", "=", "np", ".", "array", "(", "[", "epo", ",", "lr_now", "]", ")", "\n", "head", "=", "np", ".", "array", "(", "[", "'epoch'", ",", "'lr'", "]", ")", "\n", "for", "k", "in", "ret_train", ".", "keys", "(", ")", ":", "\n", "                ", "ret_log", "=", "np", ".", "append", "(", "ret_log", ",", "[", "ret_train", "[", "k", "]", "]", ")", "\n", "head", "=", "np", ".", "append", "(", "head", ",", "[", "k", "]", ")", "\n", "", "for", "k", "in", "ret_valid", ".", "keys", "(", ")", ":", "\n", "                ", "ret_log", "=", "np", ".", "append", "(", "ret_log", ",", "[", "ret_valid", "[", "k", "]", "]", ")", "\n", "head", "=", "np", ".", "append", "(", "head", ",", "[", "'valid_'", "+", "k", "]", ")", "\n", "", "for", "k", "in", "ret_test", ".", "keys", "(", ")", ":", "\n", "                ", "ret_log", "=", "np", ".", "append", "(", "ret_log", ",", "[", "ret_test", "[", "k", "]", "]", ")", "\n", "head", "=", "np", ".", "append", "(", "head", ",", "[", "'test_'", "+", "k", "]", ")", "\n", "", "log", ".", "save_csv_log", "(", "opt", ",", "head", ",", "ret_log", ",", "is_create", "=", "(", "epo", "==", "1", ")", ")", "\n", "if", "ret_valid", "[", "'m_ang_h36'", "]", "<", "err_best", ":", "\n", "                ", "err_best", "=", "ret_valid", "[", "'m_ang_h36'", "]", "\n", "is_best", "=", "True", "\n", "", "log", ".", "save_ckpt", "(", "{", "'epoch'", ":", "epo", ",", "\n", "'lr'", ":", "lr_now", ",", "\n", "'err'", ":", "ret_valid", "[", "'m_ang_h36'", "]", ",", "\n", "'state_dict'", ":", "net_pred", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", "}", ",", "\n", "is_best", "=", "is_best", ",", "opt", "=", "opt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.None.main_h36m_ang.run_model": [[114, 208], ["numpy.array", "time.time", "enumerate", "net_pred.train", "net_pred.eval", "numpy.zeros", "numpy.expand_dims", "time.time", "ang_h36.float().cuda.float().cuda", "net_pred", "range", "numpy.array", "numpy.arange", "numpy.expand_dims", "ang_h36.float().cuda.clone", "ang_h36.float().cuda.clone", "torch.mean", "torch.mean", "torch.mean", "optimizer.zero_grad", "loss_all.backward", "torch.utils.clip_grad_norm_", "optimizer.step", "torch.sum.cpu().data.numpy", "print", "range", "numpy.arange", "ang_h36.float().cuda.float", "ang_h36.float().cuda.clone", "torch.sum", "torch.sum", "torch.sum", "list", "torch.mean.cpu().data.numpy", "torch.no_grad", "torch.no_grad", "torch.no_grad", "ang_out.reshape().reshape", "ang_h36[].reshape().reshape", "data_utils.rotmat2euler_torch", "ang_out_euler.view.view", "data_utils.rotmat2euler_torch", "ang_gt_euler.view.view", "torch.mean", "torch.mean", "torch.mean", "torch.sum.cpu().data.numpy", "torch.no_grad", "torch.no_grad", "torch.no_grad", "ang_out.reshape().reshape", "ang_h36[].reshape().reshape", "data_utils.rotmat2euler_torch", "ang_out_euler.view.view", "data_utils.rotmat2euler_torch", "ang_gt_euler.view.view", "torch.sum", "torch.sum", "torch.sum", "torch.abs", "torch.abs", "torch.abs", "net_pred.parameters", "data_utils.expmap2rotmat_torch", "data_utils.expmap2rotmat_torch", "torch.norm", "torch.norm", "torch.norm", "data_utils.expmap2rotmat_torch", "data_utils.expmap2rotmat_torch", "torch.norm", "torch.norm", "torch.norm", "len", "ang_out.reshape", "ang_h36[].reshape", "ang_out.reshape", "ang_h36[].reshape", "torch.sum.cpu", "time.time", "time.time", "torch.mean.cpu", "torch.sum.cpu"], "function", ["home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.data_utils.rotmat2euler_torch", "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.data_utils.rotmat2euler_torch", "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.data_utils.rotmat2euler_torch", "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.data_utils.rotmat2euler_torch", "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.data_utils.expmap2rotmat_torch", "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.data_utils.expmap2rotmat_torch", "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.data_utils.expmap2rotmat_torch", "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.data_utils.expmap2rotmat_torch"], ["", "", "", "def", "run_model", "(", "net_pred", ",", "optimizer", "=", "None", ",", "is_train", "=", "0", ",", "data_loader", "=", "None", ",", "epo", "=", "1", ",", "opt", "=", "None", ")", ":", "\n", "    ", "if", "is_train", "==", "0", ":", "\n", "        ", "net_pred", ".", "train", "(", ")", "\n", "", "else", ":", "\n", "        ", "net_pred", ".", "eval", "(", ")", "\n", "\n", "", "l_ang", "=", "0", "\n", "if", "is_train", "<=", "1", ":", "\n", "        ", "m_ang_seq", "=", "0", "\n", "", "else", ":", "\n", "        ", "titles", "=", "np", ".", "array", "(", "range", "(", "opt", ".", "output_n", ")", ")", "+", "1", "\n", "m_ang_seq", "=", "np", ".", "zeros", "(", "[", "opt", ".", "output_n", "]", ")", "\n", "", "n", "=", "0", "\n", "in_n", "=", "opt", ".", "input_n", "\n", "out_n", "=", "opt", ".", "output_n", "\n", "dim_used", "=", "np", ".", "array", "(", "[", "6", ",", "7", ",", "8", ",", "9", ",", "12", ",", "13", ",", "14", ",", "15", ",", "21", ",", "22", ",", "23", ",", "24", ",", "27", ",", "28", ",", "29", ",", "30", ",", "36", ",", "37", ",", "38", ",", "39", ",", "40", ",", "41", ",", "42", ",", "\n", "43", ",", "44", ",", "45", ",", "46", ",", "47", ",", "51", ",", "52", ",", "53", ",", "54", ",", "55", ",", "56", ",", "57", ",", "60", ",", "61", ",", "62", ",", "75", ",", "76", ",", "77", ",", "78", ",", "79", ",", "80", ",", "81", ",", "84", ",", "85", ",", "\n", "86", "]", ")", "\n", "seq_in", "=", "opt", ".", "kernel_size", "\n", "\n", "itera", "=", "1", "\n", "idx", "=", "np", ".", "expand_dims", "(", "np", ".", "arange", "(", "seq_in", "+", "out_n", ")", ",", "axis", "=", "1", ")", "+", "(", "\n", "out_n", "-", "seq_in", "+", "np", ".", "expand_dims", "(", "np", ".", "arange", "(", "itera", ")", ",", "axis", "=", "0", ")", ")", "\n", "st", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "(", "ang_h36", ")", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "        ", "batch_size", ",", "seq_n", ",", "_", "=", "ang_h36", ".", "shape", "\n", "# when only one sample in this batch", "\n", "if", "batch_size", "==", "1", "and", "is_train", "==", "0", ":", "\n", "            ", "continue", "\n", "", "n", "+=", "batch_size", "\n", "bt", "=", "time", ".", "time", "(", ")", "\n", "ang_h36", "=", "ang_h36", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "ang_sup", "=", "ang_h36", ".", "clone", "(", ")", "[", ":", ",", ":", ",", "dim_used", "]", "[", ":", ",", "-", "out_n", "-", "seq_in", ":", "]", "\n", "ang_src", "=", "ang_h36", ".", "clone", "(", ")", "[", ":", ",", ":", ",", "dim_used", "]", "\n", "ang_out_all", "=", "net_pred", "(", "ang_src", ",", "output_n", "=", "out_n", ",", "itera", "=", "itera", ",", "input_n", "=", "in_n", ")", "\n", "\n", "ang_out", "=", "ang_h36", ".", "clone", "(", ")", "[", ":", ",", "in_n", ":", "in_n", "+", "out_n", "]", "\n", "ang_out", "[", ":", ",", ":", ",", "dim_used", "]", "=", "ang_out_all", "[", ":", ",", "seq_in", ":", ",", "0", "]", "\n", "\n", "# 2d joint loss:", "\n", "grad_norm", "=", "0", "\n", "if", "is_train", "==", "0", ":", "\n", "            ", "loss_ang", "=", "torch", ".", "mean", "(", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "ang_out_all", "[", ":", ",", ":", ",", "0", "]", "-", "ang_sup", ")", ",", "dim", "=", "2", ")", ")", "\n", "loss_all", "=", "loss_ang", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss_all", ".", "backward", "(", ")", "\n", "grad_norm", "=", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "list", "(", "net_pred", ".", "parameters", "(", ")", ")", ",", "max_norm", "=", "opt", ".", "max_norm", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# update log values", "\n", "l_ang", "+=", "loss_ang", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "*", "batch_size", "\n", "\n", "", "if", "is_train", "<=", "1", ":", "# if is validation or train simply output the overall mean error", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "ang_out_euler", "=", "ang_out", ".", "reshape", "(", "[", "-", "1", ",", "99", "]", ")", ".", "reshape", "(", "[", "-", "1", ",", "3", "]", ")", "\n", "ang_gt_euler", "=", "ang_h36", "[", ":", ",", "in_n", ":", "in_n", "+", "out_n", "]", ".", "reshape", "(", "[", "-", "1", ",", "99", "]", ")", ".", "reshape", "(", "[", "-", "1", ",", "3", "]", ")", "\n", "\n", "import", "utils", ".", "data_utils", "as", "data_utils", "\n", "ang_out_euler", "=", "data_utils", ".", "rotmat2euler_torch", "(", "data_utils", ".", "expmap2rotmat_torch", "(", "ang_out_euler", ")", ")", "\n", "ang_out_euler", "=", "ang_out_euler", ".", "view", "(", "-", "1", ",", "99", ")", "\n", "ang_gt_euler", "=", "data_utils", ".", "rotmat2euler_torch", "(", "data_utils", ".", "expmap2rotmat_torch", "(", "ang_gt_euler", ")", ")", "\n", "ang_gt_euler", "=", "ang_gt_euler", ".", "view", "(", "-", "1", ",", "99", ")", "\n", "\n", "eulererr_ang_seq", "=", "torch", ".", "mean", "(", "torch", ".", "norm", "(", "ang_out_euler", "-", "ang_gt_euler", ",", "dim", "=", "1", ")", ")", "\n", "\n", "", "m_ang_seq", "+=", "eulererr_ang_seq", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "*", "batch_size", "\n", "", "else", ":", "\n", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "ang_out_euler", "=", "ang_out", ".", "reshape", "(", "[", "-", "1", ",", "99", "]", ")", ".", "reshape", "(", "[", "-", "1", ",", "3", "]", ")", "\n", "ang_gt_euler", "=", "ang_h36", "[", ":", ",", "in_n", ":", "in_n", "+", "out_n", "]", ".", "reshape", "(", "[", "-", "1", ",", "99", "]", ")", ".", "reshape", "(", "[", "-", "1", ",", "3", "]", ")", "\n", "\n", "import", "utils", ".", "data_utils", "as", "data_utils", "\n", "ang_out_euler", "=", "data_utils", ".", "rotmat2euler_torch", "(", "data_utils", ".", "expmap2rotmat_torch", "(", "ang_out_euler", ")", ")", "\n", "ang_out_euler", "=", "ang_out_euler", ".", "view", "(", "-", "1", ",", "out_n", ",", "99", ")", "\n", "ang_gt_euler", "=", "data_utils", ".", "rotmat2euler_torch", "(", "data_utils", ".", "expmap2rotmat_torch", "(", "ang_gt_euler", ")", ")", "\n", "ang_gt_euler", "=", "ang_gt_euler", ".", "view", "(", "-", "1", ",", "out_n", ",", "99", ")", "\n", "\n", "eulererr_ang_seq", "=", "torch", ".", "sum", "(", "torch", ".", "norm", "(", "ang_out_euler", "-", "ang_gt_euler", ",", "dim", "=", "2", ")", ",", "dim", "=", "0", ")", "\n", "", "m_ang_seq", "+=", "eulererr_ang_seq", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "", "if", "i", "%", "1000", "==", "0", ":", "\n", "            ", "print", "(", "'{}/{}|bt {:.3f}s|tt{:.0f}s|gn{}'", ".", "format", "(", "i", "+", "1", ",", "len", "(", "data_loader", ")", ",", "time", ".", "time", "(", ")", "-", "bt", ",", "\n", "time", ".", "time", "(", ")", "-", "st", ",", "grad_norm", ")", ")", "\n", "", "", "ret", "=", "{", "}", "\n", "if", "is_train", "==", "0", ":", "\n", "        ", "ret", "[", "\"l_ang\"", "]", "=", "l_ang", "/", "n", "\n", "\n", "", "if", "is_train", "<=", "1", ":", "\n", "        ", "ret", "[", "\"m_ang_h36\"", "]", "=", "m_ang_seq", "/", "n", "\n", "", "else", ":", "\n", "        ", "m_ang_h36", "=", "m_ang_seq", "/", "n", "\n", "for", "j", "in", "range", "(", "out_n", ")", ":", "\n", "            ", "ret", "[", "\"#{:d}\"", ".", "format", "(", "titles", "[", "j", "]", ")", "]", "=", "m_ang_h36", "[", "j", "]", "\n", "", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.opt.Options.__init__": [[12, 15], ["argparse.ArgumentParser"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "self", ".", "opt", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.opt.Options._initial": [[16, 54], ["opt.Options.parser.add_argument", "opt.Options.parser.add_argument", "opt.Options.parser.add_argument", "opt.Options.parser.add_argument", "opt.Options.parser.add_argument", "opt.Options.parser.add_argument", "opt.Options.parser.add_argument", "opt.Options.parser.add_argument", "opt.Options.parser.add_argument", "opt.Options.parser.add_argument", "opt.Options.parser.add_argument", "opt.Options.parser.add_argument", "opt.Options.parser.add_argument", "opt.Options.parser.add_argument", "opt.Options.parser.add_argument", "opt.Options.parser.add_argument", "opt.Options.parser.add_argument", "opt.Options.parser.add_argument"], "methods", ["None"], ["", "def", "_initial", "(", "self", ")", ":", "\n", "# ===============================================================", "\n", "#                     General options", "\n", "# ===============================================================", "\n", "# self.parser.add_argument('--data_dir', type=str,", "\n", "#                          default='/home/wei/Documents/',", "\n", "#                          help='path to dataset')", "\n", "        ", "self", ".", "parser", ".", "add_argument", "(", "'--exp'", ",", "type", "=", "str", ",", "default", "=", "'test'", ",", "help", "=", "'ID of experiment'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--is_eval'", ",", "dest", "=", "'is_eval'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'whether it is to evaluate the model'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--ckpt'", ",", "type", "=", "str", ",", "default", "=", "'checkpoint/'", ",", "help", "=", "'path to save checkpoint'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--skip_rate'", ",", "type", "=", "int", ",", "default", "=", "5", ",", "help", "=", "'skip rate of samples'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--skip_rate_test'", ",", "type", "=", "int", ",", "default", "=", "5", ",", "help", "=", "'skip rate of samples for test'", ")", "\n", "\n", "# ===============================================================", "\n", "#                     Model options", "\n", "# ===============================================================", "\n", "# self.parser.add_argument('--input_size', type=int, default=2048, help='the input size of the neural net')", "\n", "# self.parser.add_argument('--output_size', type=int, default=85, help='the output size of the neural net')", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--in_features'", ",", "type", "=", "int", ",", "default", "=", "54", ",", "help", "=", "'size of each model layer'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--num_stage'", ",", "type", "=", "int", ",", "default", "=", "12", ",", "help", "=", "'size of each model layer'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--d_model'", ",", "type", "=", "int", ",", "default", "=", "256", ",", "help", "=", "'past frame number'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--kernel_size'", ",", "type", "=", "int", ",", "default", "=", "5", ",", "help", "=", "'past frame number'", ")", "\n", "# self.parser.add_argument('--drop_out', type=float, default=0.5, help='drop out probability')", "\n", "\n", "# ===============================================================", "\n", "#                     Running options", "\n", "# ===============================================================", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--input_n'", ",", "type", "=", "int", ",", "default", "=", "50", ",", "help", "=", "'past frame number'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--output_n'", ",", "type", "=", "int", ",", "default", "=", "25", ",", "help", "=", "'future frame number'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--dct_n'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "help", "=", "'future frame number'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--lr_now'", ",", "type", "=", "float", ",", "default", "=", "0.0005", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--max_norm'", ",", "type", "=", "float", ",", "default", "=", "10000", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--epoch'", ",", "type", "=", "int", ",", "default", "=", "50", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "32", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--test_batch_size'", ",", "type", "=", "int", ",", "default", "=", "16", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--is_load'", ",", "dest", "=", "'is_load'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'whether to load existing model'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.opt.Options._print": [[55, 59], ["print", "pprint.pprint.pprint", "print", "vars"], "methods", ["None"], ["", "def", "_print", "(", "self", ")", ":", "\n", "        ", "print", "(", "\"\\n==================Options=================\"", ")", "\n", "pprint", "(", "vars", "(", "self", ".", "opt", ")", ",", "indent", "=", "4", ")", "\n", "print", "(", "\"==========================================\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.opt.Options.parse": [[60, 81], ["opt.Options._initial", "opt.Options.parser.parse_args", "opt.Options._print", "os.path.join", "utils.log.save_options", "os.path.basename", "os.path.isdir", "os.makedirs", "utils.log.save_options"], "methods", ["home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.opt.Options._initial", "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.opt.Options._print", "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.log.save_options", "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.log.save_options"], ["", "def", "parse", "(", "self", ")", ":", "\n", "        ", "self", ".", "_initial", "(", ")", "\n", "self", ".", "opt", "=", "self", ".", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "not", "self", ".", "opt", ".", "is_eval", ":", "\n", "            ", "script_name", "=", "os", ".", "path", ".", "basename", "(", "sys", ".", "argv", "[", "0", "]", ")", "[", ":", "-", "3", "]", "\n", "log_name", "=", "'{}_in{}_out{}_ks{}_dctn{}'", ".", "format", "(", "script_name", ",", "self", ".", "opt", ".", "input_n", ",", "\n", "self", ".", "opt", ".", "output_n", ",", "\n", "self", ".", "opt", ".", "kernel_size", ",", "\n", "self", ".", "opt", ".", "dct_n", ")", "\n", "self", ".", "opt", ".", "exp", "=", "log_name", "\n", "# do some pre-check", "\n", "ckpt", "=", "os", ".", "path", ".", "join", "(", "self", ".", "opt", ".", "ckpt", ",", "self", ".", "opt", ".", "exp", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "ckpt", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "ckpt", ")", "\n", "log", ".", "save_options", "(", "self", ".", "opt", ")", "\n", "", "self", ".", "opt", ".", "ckpt", "=", "ckpt", "\n", "log", ".", "save_options", "(", "self", ".", "opt", ")", "\n", "", "self", ".", "_print", "(", ")", "\n", "# log.save_options(self.opt)", "\n", "return", "self", ".", "opt", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.data_utils.rotmat2euler": [[11, 41], ["numpy.array", "numpy.arctan2", "numpy.arctan2", "numpy.arctan2", "numpy.arcsin", "numpy.cos", "numpy.cos", "numpy.cos", "numpy.cos"], "function", ["None"], ["def", "rotmat2euler", "(", "R", ")", ":", "\n", "    ", "\"\"\"\n    Converts a rotation matrix to Euler angles\n    Matlab port to python for evaluation purposes\n    https://github.com/asheshjain399/RNNexp/blob/srnn/structural_rnn/CRFProblems/H3.6m/mhmublv/Motion/RotMat2Euler.m#L1\n\n    Args\n      R: a 3x3 rotation matrix\n    Returns\n      eul: a 3x1 Euler angle representation of R\n    \"\"\"", "\n", "if", "R", "[", "0", ",", "2", "]", "==", "1", "or", "R", "[", "0", ",", "2", "]", "==", "-", "1", ":", "\n", "# special case", "\n", "        ", "E3", "=", "0", "# set arbitrarily", "\n", "dlta", "=", "np", ".", "arctan2", "(", "R", "[", "0", ",", "1", "]", ",", "R", "[", "0", ",", "2", "]", ")", ";", "\n", "\n", "if", "R", "[", "0", ",", "2", "]", "==", "-", "1", ":", "\n", "            ", "E2", "=", "np", ".", "pi", "/", "2", ";", "\n", "E1", "=", "E3", "+", "dlta", ";", "\n", "", "else", ":", "\n", "            ", "E2", "=", "-", "np", ".", "pi", "/", "2", ";", "\n", "E1", "=", "-", "E3", "+", "dlta", ";", "\n", "\n", "", "", "else", ":", "\n", "        ", "E2", "=", "-", "np", ".", "arcsin", "(", "R", "[", "0", ",", "2", "]", ")", "\n", "E1", "=", "np", ".", "arctan2", "(", "R", "[", "1", ",", "2", "]", "/", "np", ".", "cos", "(", "E2", ")", ",", "R", "[", "2", ",", "2", "]", "/", "np", ".", "cos", "(", "E2", ")", ")", "\n", "E3", "=", "np", ".", "arctan2", "(", "R", "[", "0", ",", "1", "]", "/", "np", ".", "cos", "(", "E2", ")", ",", "R", "[", "0", ",", "0", "]", "/", "np", ".", "cos", "(", "E2", ")", ")", "\n", "\n", "", "eul", "=", "np", ".", "array", "(", "[", "E1", ",", "E2", ",", "E3", "]", ")", ";", "\n", "return", "eul", "\n", "\n"]], "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.data_utils.rotmat2quat": [[43, 71], ["numpy.zeros", "numpy.divide", "numpy.arctan2", "numpy.zeros", "numpy.cos", "numpy.linalg.norm", "numpy.sin", "numpy.linalg.norm", "numpy.trace", "numpy.finfo"], "function", ["None"], ["", "def", "rotmat2quat", "(", "R", ")", ":", "\n", "    ", "\"\"\"\n    Converts a rotation matrix to a quaternion\n    Matlab port to python for evaluation purposes\n    https://github.com/asheshjain399/RNNexp/blob/srnn/structural_rnn/CRFProblems/H3.6m/mhmublv/Motion/rotmat2quat.m#L4\n\n    Args\n      R: 3x3 rotation matrix\n    Returns\n      q: 1x4 quaternion\n    \"\"\"", "\n", "rotdiff", "=", "R", "-", "R", ".", "T", ";", "\n", "\n", "r", "=", "np", ".", "zeros", "(", "3", ")", "\n", "r", "[", "0", "]", "=", "-", "rotdiff", "[", "1", ",", "2", "]", "\n", "r", "[", "1", "]", "=", "rotdiff", "[", "0", ",", "2", "]", "\n", "r", "[", "2", "]", "=", "-", "rotdiff", "[", "0", ",", "1", "]", "\n", "sintheta", "=", "np", ".", "linalg", ".", "norm", "(", "r", ")", "/", "2", ";", "\n", "r0", "=", "np", ".", "divide", "(", "r", ",", "np", ".", "linalg", ".", "norm", "(", "r", ")", "+", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "eps", ")", ";", "\n", "\n", "costheta", "=", "(", "np", ".", "trace", "(", "R", ")", "-", "1", ")", "/", "2", ";", "\n", "\n", "theta", "=", "np", ".", "arctan2", "(", "sintheta", ",", "costheta", ")", ";", "\n", "\n", "q", "=", "np", ".", "zeros", "(", "4", ")", "\n", "q", "[", "0", "]", "=", "np", ".", "cos", "(", "theta", "/", "2", ")", "\n", "q", "[", "1", ":", "]", "=", "r0", "*", "np", ".", "sin", "(", "theta", "/", "2", ")", "\n", "return", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.data_utils.rotmat2expmap": [[73, 75], ["data_utils.quat2expmap", "data_utils.rotmat2quat"], "function", ["home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.data_utils.quat2expmap", "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.data_utils.rotmat2quat"], ["", "def", "rotmat2expmap", "(", "R", ")", ":", "\n", "    ", "return", "quat2expmap", "(", "rotmat2quat", "(", "R", ")", ")", ";", "\n", "\n"]], "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.data_utils.expmap2rotmat": [[77, 95], ["numpy.linalg.norm", "numpy.divide", "numpy.array().reshape", "numpy.array", "numpy.eye", "np.array().reshape.dot", "numpy.finfo", "numpy.sin", "numpy.cos"], "function", ["None"], ["", "def", "expmap2rotmat", "(", "r", ")", ":", "\n", "    ", "\"\"\"\n    Converts an exponential map angle to a rotation matrix\n    Matlab port to python for evaluation purposes\n    I believe this is also called Rodrigues' formula\n    https://github.com/asheshjain399/RNNexp/blob/srnn/structural_rnn/CRFProblems/H3.6m/mhmublv/Motion/expmap2rotmat.m\n\n    Args\n      r: 1x3 exponential map\n    Returns\n      R: 3x3 rotation matrix\n    \"\"\"", "\n", "theta", "=", "np", ".", "linalg", ".", "norm", "(", "r", ")", "\n", "r0", "=", "np", ".", "divide", "(", "r", ",", "theta", "+", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "eps", ")", "\n", "r0x", "=", "np", ".", "array", "(", "[", "0", ",", "-", "r0", "[", "2", "]", ",", "r0", "[", "1", "]", ",", "0", ",", "0", ",", "-", "r0", "[", "0", "]", ",", "0", ",", "0", ",", "0", "]", ")", ".", "reshape", "(", "3", ",", "3", ")", "\n", "r0x", "=", "r0x", "-", "r0x", ".", "T", "\n", "R", "=", "np", ".", "eye", "(", "3", ",", "3", ")", "+", "np", ".", "sin", "(", "theta", ")", "*", "r0x", "+", "(", "1", "-", "np", ".", "cos", "(", "theta", ")", ")", "*", "(", "r0x", ")", ".", "dot", "(", "r0x", ")", ";", "\n", "return", "R", "\n", "\n"]], "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.data_utils.quat2expmap": [[97, 126], ["numpy.linalg.norm", "numpy.divide", "numpy.mod", "numpy.abs", "numpy.arctan2", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.finfo"], "function", ["None"], ["", "def", "quat2expmap", "(", "q", ")", ":", "\n", "    ", "\"\"\"\n    Converts a quaternion to an exponential map\n    Matlab port to python for evaluation purposes\n    https://github.com/asheshjain399/RNNexp/blob/srnn/structural_rnn/CRFProblems/H3.6m/mhmublv/Motion/quat2expmap.m#L1\n\n    Args\n      q: 1x4 quaternion\n    Returns\n      r: 1x3 exponential map\n    Raises\n      ValueError if the l2 norm of the quaternion is not close to 1\n    \"\"\"", "\n", "if", "(", "np", ".", "abs", "(", "np", ".", "linalg", ".", "norm", "(", "q", ")", "-", "1", ")", ">", "1e-3", ")", ":", "\n", "        ", "raise", "(", "ValueError", ",", "\"quat2expmap: input quaternion is not norm 1\"", ")", "\n", "\n", "", "sinhalftheta", "=", "np", ".", "linalg", ".", "norm", "(", "q", "[", "1", ":", "]", ")", "\n", "coshalftheta", "=", "q", "[", "0", "]", "\n", "\n", "r0", "=", "np", ".", "divide", "(", "q", "[", "1", ":", "]", ",", "(", "np", ".", "linalg", ".", "norm", "(", "q", "[", "1", ":", "]", ")", "+", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "eps", ")", ")", ";", "\n", "theta", "=", "2", "*", "np", ".", "arctan2", "(", "sinhalftheta", ",", "coshalftheta", ")", "\n", "theta", "=", "np", ".", "mod", "(", "theta", "+", "2", "*", "np", ".", "pi", ",", "2", "*", "np", ".", "pi", ")", "\n", "\n", "if", "theta", ">", "np", ".", "pi", ":", "\n", "        ", "theta", "=", "2", "*", "np", ".", "pi", "-", "theta", "\n", "r0", "=", "-", "r0", "\n", "\n", "", "r", "=", "r0", "*", "theta", "\n", "return", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.data_utils.unNormalizeData": [[128, 165], ["numpy.zeros", "range", "numpy.array", "data_std.reshape", "numpy.repeat", "data_mean.reshape", "numpy.repeat", "np.array.append", "numpy.multiply", "len"], "function", ["None"], ["", "def", "unNormalizeData", "(", "normalizedData", ",", "data_mean", ",", "data_std", ",", "dimensions_to_ignore", ",", "actions", ",", "one_hot", ")", ":", "\n", "    ", "\"\"\"Borrowed from SRNN code. Reads a csv file and returns a float32 matrix.\n    https://github.com/asheshjain399/RNNexp/blob/srnn/structural_rnn/CRFProblems/H3.6m/generateMotionData.py#L12\n\n    Args\n      normalizedData: nxd matrix with normalized data\n      data_mean: vector of mean used to normalize the data\n      data_std: vector of standard deviation used to normalize the data\n      dimensions_to_ignore: vector with dimensions not used by the model\n      actions: list of strings with the encoded actions\n      one_hot: whether the data comes with one-hot encoding\n    Returns\n      origData: data originally used to\n    \"\"\"", "\n", "T", "=", "normalizedData", ".", "shape", "[", "0", "]", "\n", "D", "=", "data_mean", ".", "shape", "[", "0", "]", "\n", "\n", "origData", "=", "np", ".", "zeros", "(", "(", "T", ",", "D", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "dimensions_to_use", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "D", ")", ":", "\n", "        ", "if", "i", "in", "dimensions_to_ignore", ":", "\n", "            ", "continue", "\n", "", "dimensions_to_use", ".", "append", "(", "i", ")", "\n", "", "dimensions_to_use", "=", "np", ".", "array", "(", "dimensions_to_use", ")", "\n", "\n", "if", "one_hot", ":", "\n", "        ", "origData", "[", ":", ",", "dimensions_to_use", "]", "=", "normalizedData", "[", ":", ",", ":", "-", "len", "(", "actions", ")", "]", "\n", "", "else", ":", "\n", "        ", "origData", "[", ":", ",", "dimensions_to_use", "]", "=", "normalizedData", "\n", "\n", "# potentially ineficient, but only done once per experiment", "\n", "", "stdMat", "=", "data_std", ".", "reshape", "(", "(", "1", ",", "D", ")", ")", "\n", "stdMat", "=", "np", ".", "repeat", "(", "stdMat", ",", "T", ",", "axis", "=", "0", ")", "\n", "meanMat", "=", "data_mean", ".", "reshape", "(", "(", "1", ",", "D", ")", ")", "\n", "meanMat", "=", "np", ".", "repeat", "(", "meanMat", ",", "T", ",", "axis", "=", "0", ")", "\n", "origData", "=", "np", ".", "multiply", "(", "origData", ",", "stdMat", ")", "+", "meanMat", "\n", "return", "origData", "\n", "\n"]], "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.data_utils.revert_output_format": [[167, 195], ["len", "numpy.concatenate", "numpy.reshape", "numpy.transpose", "six.moves.xrange", "poses_out_list.append", "data_utils.unNormalizeData"], "function", ["home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.data_utils.unNormalizeData"], ["", "def", "revert_output_format", "(", "poses", ",", "data_mean", ",", "data_std", ",", "dim_to_ignore", ",", "actions", ",", "one_hot", ")", ":", "\n", "    ", "\"\"\"\n    Converts the output of the neural network to a format that is more easy to\n    manipulate for, e.g. conversion to other format or visualization\n\n    Args\n      poses: The output from the TF model. A list with (seq_length) entries,\n      each with a (batch_size, dim) output\n    Returns\n      poses_out: A tensor of size (batch_size, seq_length, dim) output. Each\n      batch is an n-by-d sequence of poses.\n    \"\"\"", "\n", "seq_len", "=", "len", "(", "poses", ")", "\n", "if", "seq_len", "==", "0", ":", "\n", "        ", "return", "[", "]", "\n", "\n", "", "batch_size", ",", "dim", "=", "poses", "[", "0", "]", ".", "shape", "\n", "\n", "poses_out", "=", "np", ".", "concatenate", "(", "poses", ")", "\n", "poses_out", "=", "np", ".", "reshape", "(", "poses_out", ",", "(", "seq_len", ",", "batch_size", ",", "dim", ")", ")", "\n", "poses_out", "=", "np", ".", "transpose", "(", "poses_out", ",", "[", "1", ",", "0", ",", "2", "]", ")", "\n", "\n", "poses_out_list", "=", "[", "]", "\n", "for", "i", "in", "xrange", "(", "poses_out", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "poses_out_list", ".", "append", "(", "\n", "unNormalizeData", "(", "poses_out", "[", "i", ",", ":", ",", ":", "]", ",", "data_mean", ",", "data_std", ",", "dim_to_ignore", ",", "actions", ",", "one_hot", ")", ")", "\n", "\n", "", "return", "poses_out_list", "\n", "\n"]], "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.data_utils.readCSVasFloat": [[197, 216], ["open().readlines", "numpy.array", "line.strip().split.strip().split", "open", "len", "np.array.append", "line.strip().split.strip", "numpy.array", "numpy.float32"], "function", ["None"], ["", "def", "readCSVasFloat", "(", "filename", ")", ":", "\n", "    ", "\"\"\"\n    Borrowed from SRNN code. Reads a csv and returns a float matrix.\n    https://github.com/asheshjain399/NeuralModels/blob/master/neuralmodels/utils.py#L34\n\n    Args\n      filename: string. Path to the csv file\n    Returns\n      returnArray: the read data in a float32 matrix\n    \"\"\"", "\n", "returnArray", "=", "[", "]", "\n", "lines", "=", "open", "(", "filename", ")", ".", "readlines", "(", ")", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "line", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "','", ")", "\n", "if", "len", "(", "line", ")", ">", "0", ":", "\n", "            ", "returnArray", ".", "append", "(", "np", ".", "array", "(", "[", "np", ".", "float32", "(", "x", ")", "for", "x", "in", "line", "]", ")", ")", "\n", "\n", "", "", "returnArray", "=", "np", ".", "array", "(", "returnArray", ")", "\n", "return", "returnArray", "\n", "\n"]], "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.data_utils.normalize_data": [[218, 250], ["len", "data.keys", "data.keys", "numpy.divide", "numpy.divide", "numpy.hstack"], "function", ["None"], ["", "def", "normalize_data", "(", "data", ",", "data_mean", ",", "data_std", ",", "dim_to_use", ",", "actions", ",", "one_hot", ")", ":", "\n", "    ", "\"\"\"\n    Normalize input data by removing unused dimensions, subtracting the mean and\n    dividing by the standard deviation\n\n    Args\n      data: nx99 matrix with data to normalize\n      data_mean: vector of mean used to normalize the data\n      data_std: vector of standard deviation used to normalize the data\n      dim_to_use: vector with dimensions used by the model\n      actions: list of strings with the encoded actions\n      one_hot: whether the data comes with one-hot encoding\n    Returns\n      data_out: the passed data matrix, but normalized\n    \"\"\"", "\n", "data_out", "=", "{", "}", "\n", "nactions", "=", "len", "(", "actions", ")", "\n", "\n", "if", "not", "one_hot", ":", "\n", "# No one-hot encoding... no need to do anything special", "\n", "        ", "for", "key", "in", "data", ".", "keys", "(", ")", ":", "\n", "            ", "data_out", "[", "key", "]", "=", "np", ".", "divide", "(", "(", "data", "[", "key", "]", "-", "data_mean", ")", ",", "data_std", ")", "\n", "data_out", "[", "key", "]", "=", "data_out", "[", "key", "]", "[", ":", ",", "dim_to_use", "]", "\n", "\n", "", "", "else", ":", "\n", "# TODO hard-coding 99 dimensions for un-normalized human poses", "\n", "        ", "for", "key", "in", "data", ".", "keys", "(", ")", ":", "\n", "            ", "data_out", "[", "key", "]", "=", "np", ".", "divide", "(", "(", "data", "[", "key", "]", "[", ":", ",", "0", ":", "99", "]", "-", "data_mean", ")", ",", "data_std", ")", "\n", "data_out", "[", "key", "]", "=", "data_out", "[", "key", "]", "[", ":", ",", "dim_to_use", "]", "\n", "data_out", "[", "key", "]", "=", "np", ".", "hstack", "(", "(", "data_out", "[", "key", "]", ",", "data", "[", "key", "]", "[", ":", ",", "-", "nactions", ":", "]", ")", ")", "\n", "\n", "", "", "return", "data_out", "\n", "\n"]], "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.data_utils.normalization_stats": [[252, 277], ["numpy.mean", "numpy.std", "dimensions_to_ignore.extend", "dimensions_to_use.extend", "list", "list", "numpy.where", "numpy.where"], "function", ["None"], ["", "def", "normalization_stats", "(", "completeData", ")", ":", "\n", "    ", "\"\"\"\"\n    Also borrowed for SRNN code. Computes mean, stdev and dimensions to ignore.\n    https://github.com/asheshjain399/RNNexp/blob/srnn/structural_rnn/CRFProblems/H3.6m/processdata.py#L33\n\n    Args\n      completeData: nx99 matrix with data to normalize\n    Returns\n      data_mean: vector of mean used to normalize the data\n      data_std: vector of standard deviation used to normalize the data\n      dimensions_to_ignore: vector with dimensions not used by the model\n      dimensions_to_use: vector with dimensions used by the model\n    \"\"\"", "\n", "data_mean", "=", "np", ".", "mean", "(", "completeData", ",", "axis", "=", "0", ")", "\n", "data_std", "=", "np", ".", "std", "(", "completeData", ",", "axis", "=", "0", ")", "\n", "\n", "dimensions_to_ignore", "=", "[", "]", "\n", "dimensions_to_use", "=", "[", "]", "\n", "\n", "dimensions_to_ignore", ".", "extend", "(", "list", "(", "np", ".", "where", "(", "data_std", "<", "1e-4", ")", "[", "0", "]", ")", ")", "\n", "dimensions_to_use", ".", "extend", "(", "list", "(", "np", ".", "where", "(", "data_std", ">=", "1e-4", ")", "[", "0", "]", ")", ")", "\n", "\n", "data_std", "[", "dimensions_to_ignore", "]", "=", "1.0", "\n", "\n", "return", "data_mean", ",", "data_std", ",", "dimensions_to_ignore", ",", "dimensions_to_use", "\n", "\n"]], "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.data_utils.define_actions": [[279, 305], ["None"], "function", ["None"], ["", "def", "define_actions", "(", "action", ")", ":", "\n", "    ", "\"\"\"\n    Define the list of actions we are using.\n\n    Args\n      action: String with the passed action. Could be \"all\"\n    Returns\n      actions: List of strings of actions\n    Raises\n      ValueError if the action is not included in H3.6M\n    \"\"\"", "\n", "\n", "actions", "=", "[", "\"walking\"", ",", "\"eating\"", ",", "\"smoking\"", ",", "\"discussion\"", ",", "\"directions\"", ",", "\n", "\"greeting\"", ",", "\"phoning\"", ",", "\"posing\"", ",", "\"purchases\"", ",", "\"sitting\"", ",", "\n", "\"sittingdown\"", ",", "\"takingphoto\"", ",", "\"waiting\"", ",", "\"walkingdog\"", ",", "\n", "\"walkingtogether\"", "]", "\n", "if", "action", "in", "actions", ":", "\n", "        ", "return", "[", "action", "]", "\n", "\n", "", "if", "action", "==", "\"all\"", ":", "\n", "        ", "return", "actions", "\n", "\n", "", "if", "action", "==", "\"all_srnn\"", ":", "\n", "        ", "return", "[", "\"walking\"", ",", "\"eating\"", ",", "\"smoking\"", ",", "\"discussion\"", "]", "\n", "\n", "", "raise", "(", "ValueError", ",", "\"Unrecognized action: %d\"", "%", "action", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.data_utils.define_actions_cmu": [[310, 331], ["None"], "function", ["None"], ["def", "define_actions_cmu", "(", "action", ")", ":", "\n", "    ", "\"\"\"\n    Define the list of actions we are using.\n\n    Args\n      action: String with the passed action. Could be \"all\"\n    Returns\n      actions: List of strings of actions\n    Raises\n      ValueError if the action is not included in H3.6M\n    \"\"\"", "\n", "\n", "actions", "=", "[", "\"basketball\"", ",", "\"basketball_signal\"", ",", "\"directing_traffic\"", ",", "\"jumping\"", ",", "\"running\"", ",", "\"soccer\"", ",", "\"walking\"", ",", "\n", "\"washwindow\"", "]", "\n", "if", "action", "in", "actions", ":", "\n", "        ", "return", "[", "action", "]", "\n", "\n", "", "if", "action", "==", "\"all\"", ":", "\n", "        ", "return", "actions", "\n", "\n", "", "raise", "(", "ValueError", ",", "\"Unrecognized action: %d\"", "%", "action", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.data_utils.load_data_cmu": [[333, 395], ["len", "numpy.arange", "dimensions_to_ignore.extend", "dimensions_to_use.extend", "os.listdir", "numpy.arange", "numpy.std", "numpy.mean", "list", "list", "data_utils.readCSVasFloat", "range", "numpy.array", "len", "numpy.arange", "numpy.arange", "np.vstack.transpose", "numpy.random.RandomState", "range", "numpy.where", "numpy.where", "numpy.vstack", "len", "numpy.concatenate", "numpy.append", "np.random.RandomState.randint", "numpy.expand_dims", "len", "numpy.concatenate", "numpy.append"], "function", ["home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.data_utils.readCSVasFloat"], ["", "def", "load_data_cmu", "(", "path_to_dataset", ",", "actions", ",", "input_n", ",", "output_n", ",", "data_std", "=", "0", ",", "data_mean", "=", "0", ",", "is_test", "=", "False", ")", ":", "\n", "    ", "seq_len", "=", "input_n", "+", "output_n", "\n", "nactions", "=", "len", "(", "actions", ")", "\n", "sampled_seq", "=", "[", "]", "\n", "complete_seq", "=", "[", "]", "\n", "for", "action_idx", "in", "np", ".", "arange", "(", "nactions", ")", ":", "\n", "        ", "action", "=", "actions", "[", "action_idx", "]", "\n", "path", "=", "'{}/{}'", ".", "format", "(", "path_to_dataset", ",", "action", ")", "\n", "count", "=", "0", "\n", "for", "_", "in", "os", ".", "listdir", "(", "path", ")", ":", "\n", "            ", "count", "=", "count", "+", "1", "\n", "", "for", "examp_index", "in", "np", ".", "arange", "(", "count", ")", ":", "\n", "            ", "filename", "=", "'{}/{}/{}_{}.txt'", ".", "format", "(", "path_to_dataset", ",", "action", ",", "action", ",", "examp_index", "+", "1", ")", "\n", "action_sequence", "=", "readCSVasFloat", "(", "filename", ")", "\n", "n", ",", "d", "=", "action_sequence", ".", "shape", "\n", "even_list", "=", "range", "(", "0", ",", "n", ",", "2", ")", "\n", "the_sequence", "=", "np", ".", "array", "(", "action_sequence", "[", "even_list", ",", ":", "]", ")", "\n", "num_frames", "=", "len", "(", "the_sequence", ")", "\n", "if", "not", "is_test", ":", "\n", "                ", "fs", "=", "np", ".", "arange", "(", "0", ",", "num_frames", "-", "seq_len", "+", "1", ")", "\n", "fs_sel", "=", "fs", "\n", "for", "i", "in", "np", ".", "arange", "(", "seq_len", "-", "1", ")", ":", "\n", "                    ", "fs_sel", "=", "np", ".", "vstack", "(", "(", "fs_sel", ",", "fs", "+", "i", "+", "1", ")", ")", "\n", "", "fs_sel", "=", "fs_sel", ".", "transpose", "(", ")", "\n", "seq_sel", "=", "the_sequence", "[", "fs_sel", ",", ":", "]", "\n", "if", "len", "(", "sampled_seq", ")", "==", "0", ":", "\n", "                    ", "sampled_seq", "=", "seq_sel", "\n", "complete_seq", "=", "the_sequence", "\n", "", "else", ":", "\n", "                    ", "sampled_seq", "=", "np", ".", "concatenate", "(", "(", "sampled_seq", ",", "seq_sel", ")", ",", "axis", "=", "0", ")", "\n", "complete_seq", "=", "np", ".", "append", "(", "complete_seq", ",", "the_sequence", ",", "axis", "=", "0", ")", "\n", "", "", "else", ":", "\n", "                ", "source_seq_len", "=", "50", "\n", "target_seq_len", "=", "25", "\n", "total_frames", "=", "source_seq_len", "+", "target_seq_len", "\n", "batch_size", "=", "8", "\n", "SEED", "=", "1234567890", "\n", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "SEED", ")", "\n", "for", "_", "in", "range", "(", "batch_size", ")", ":", "\n", "                    ", "idx", "=", "rng", ".", "randint", "(", "0", ",", "num_frames", "-", "total_frames", ")", "\n", "seq_sel", "=", "the_sequence", "[", "\n", "idx", "+", "(", "source_seq_len", "-", "input_n", ")", ":", "(", "idx", "+", "source_seq_len", "+", "output_n", ")", ",", ":", "]", "\n", "seq_sel", "=", "np", ".", "expand_dims", "(", "seq_sel", ",", "axis", "=", "0", ")", "\n", "if", "len", "(", "sampled_seq", ")", "==", "0", ":", "\n", "                        ", "sampled_seq", "=", "seq_sel", "\n", "complete_seq", "=", "the_sequence", "\n", "", "else", ":", "\n", "                        ", "sampled_seq", "=", "np", ".", "concatenate", "(", "(", "sampled_seq", ",", "seq_sel", ")", ",", "axis", "=", "0", ")", "\n", "complete_seq", "=", "np", ".", "append", "(", "complete_seq", ",", "the_sequence", ",", "axis", "=", "0", ")", "\n", "\n", "", "", "", "", "", "if", "not", "is_test", ":", "\n", "        ", "data_std", "=", "np", ".", "std", "(", "complete_seq", ",", "axis", "=", "0", ")", "\n", "data_mean", "=", "np", ".", "mean", "(", "complete_seq", ",", "axis", "=", "0", ")", "\n", "\n", "", "dimensions_to_ignore", "=", "[", "]", "\n", "dimensions_to_use", "=", "[", "]", "\n", "dimensions_to_ignore", ".", "extend", "(", "list", "(", "np", ".", "where", "(", "data_std", "<", "1e-4", ")", "[", "0", "]", ")", ")", "\n", "dimensions_to_use", ".", "extend", "(", "list", "(", "np", ".", "where", "(", "data_std", ">=", "1e-4", ")", "[", "0", "]", ")", ")", "\n", "data_std", "[", "dimensions_to_ignore", "]", "=", "1.0", "\n", "data_mean", "[", "dimensions_to_ignore", "]", "=", "0.0", "\n", "\n", "return", "sampled_seq", ",", "dimensions_to_ignore", ",", "dimensions_to_use", ",", "data_mean", ",", "data_std", "\n", "\n"]], "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.data_utils.load_data_cmu_3d": [[397, 465], ["len", "numpy.arange", "numpy.array", "numpy.concatenate", "numpy.setdiff1d", "os.listdir", "numpy.arange", "numpy.std", "numpy.mean", "numpy.arange", "data_utils.readCSVasFloat", "torch.from_numpy().float().cuda", "expmap2xyz_torch_cmu", "xyz.cpu().data.numpy.view", "xyz.cpu().data.numpy.cpu().data.numpy", "range", "numpy.array", "len", "numpy.arange", "numpy.arange", "np.vstack.transpose", "numpy.random.RandomState", "range", "torch.from_numpy().float", "numpy.vstack", "len", "numpy.concatenate", "numpy.append", "np.random.RandomState.randint", "numpy.expand_dims", "xyz.cpu().data.numpy.cpu", "len", "numpy.concatenate", "numpy.append", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.data_utils.readCSVasFloat"], ["", "def", "load_data_cmu_3d", "(", "path_to_dataset", ",", "actions", ",", "input_n", ",", "output_n", ",", "data_std", "=", "0", ",", "data_mean", "=", "0", ",", "is_test", "=", "False", ")", ":", "\n", "    ", "seq_len", "=", "input_n", "+", "output_n", "\n", "nactions", "=", "len", "(", "actions", ")", "\n", "sampled_seq", "=", "[", "]", "\n", "complete_seq", "=", "[", "]", "\n", "for", "action_idx", "in", "np", ".", "arange", "(", "nactions", ")", ":", "\n", "        ", "action", "=", "actions", "[", "action_idx", "]", "\n", "path", "=", "'{}/{}'", ".", "format", "(", "path_to_dataset", ",", "action", ")", "\n", "count", "=", "0", "\n", "for", "_", "in", "os", ".", "listdir", "(", "path", ")", ":", "\n", "            ", "count", "=", "count", "+", "1", "\n", "", "for", "examp_index", "in", "np", ".", "arange", "(", "count", ")", ":", "\n", "            ", "filename", "=", "'{}/{}/{}_{}.txt'", ".", "format", "(", "path_to_dataset", ",", "action", ",", "action", ",", "examp_index", "+", "1", ")", "\n", "action_sequence", "=", "readCSVasFloat", "(", "filename", ")", "\n", "n", ",", "d", "=", "action_sequence", ".", "shape", "\n", "exptmps", "=", "torch", ".", "from_numpy", "(", "action_sequence", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "xyz", "=", "expmap2xyz_torch_cmu", "(", "exptmps", ")", "\n", "xyz", "=", "xyz", ".", "view", "(", "-", "1", ",", "38", "*", "3", ")", "\n", "xyz", "=", "xyz", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "action_sequence", "=", "xyz", "\n", "\n", "even_list", "=", "range", "(", "0", ",", "n", ",", "2", ")", "\n", "the_sequence", "=", "np", ".", "array", "(", "action_sequence", "[", "even_list", ",", ":", "]", ")", "\n", "num_frames", "=", "len", "(", "the_sequence", ")", "\n", "if", "not", "is_test", ":", "\n", "                ", "fs", "=", "np", ".", "arange", "(", "0", ",", "num_frames", "-", "seq_len", "+", "1", ")", "\n", "fs_sel", "=", "fs", "\n", "for", "i", "in", "np", ".", "arange", "(", "seq_len", "-", "1", ")", ":", "\n", "                    ", "fs_sel", "=", "np", ".", "vstack", "(", "(", "fs_sel", ",", "fs", "+", "i", "+", "1", ")", ")", "\n", "", "fs_sel", "=", "fs_sel", ".", "transpose", "(", ")", "\n", "seq_sel", "=", "the_sequence", "[", "fs_sel", ",", ":", "]", "\n", "if", "len", "(", "sampled_seq", ")", "==", "0", ":", "\n", "                    ", "sampled_seq", "=", "seq_sel", "\n", "complete_seq", "=", "the_sequence", "\n", "", "else", ":", "\n", "                    ", "sampled_seq", "=", "np", ".", "concatenate", "(", "(", "sampled_seq", ",", "seq_sel", ")", ",", "axis", "=", "0", ")", "\n", "complete_seq", "=", "np", ".", "append", "(", "complete_seq", ",", "the_sequence", ",", "axis", "=", "0", ")", "\n", "", "", "else", ":", "\n", "                ", "source_seq_len", "=", "50", "\n", "target_seq_len", "=", "25", "\n", "total_frames", "=", "source_seq_len", "+", "target_seq_len", "\n", "batch_size", "=", "8", "\n", "SEED", "=", "1234567890", "\n", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "SEED", ")", "\n", "for", "_", "in", "range", "(", "batch_size", ")", ":", "\n", "                    ", "idx", "=", "rng", ".", "randint", "(", "0", ",", "num_frames", "-", "total_frames", ")", "\n", "seq_sel", "=", "the_sequence", "[", "\n", "idx", "+", "(", "source_seq_len", "-", "input_n", ")", ":", "(", "idx", "+", "source_seq_len", "+", "output_n", ")", ",", ":", "]", "\n", "seq_sel", "=", "np", ".", "expand_dims", "(", "seq_sel", ",", "axis", "=", "0", ")", "\n", "if", "len", "(", "sampled_seq", ")", "==", "0", ":", "\n", "                        ", "sampled_seq", "=", "seq_sel", "\n", "complete_seq", "=", "the_sequence", "\n", "", "else", ":", "\n", "                        ", "sampled_seq", "=", "np", ".", "concatenate", "(", "(", "sampled_seq", ",", "seq_sel", ")", ",", "axis", "=", "0", ")", "\n", "complete_seq", "=", "np", ".", "append", "(", "complete_seq", ",", "the_sequence", ",", "axis", "=", "0", ")", "\n", "\n", "", "", "", "", "", "if", "not", "is_test", ":", "\n", "        ", "data_std", "=", "np", ".", "std", "(", "complete_seq", ",", "axis", "=", "0", ")", "\n", "data_mean", "=", "np", ".", "mean", "(", "complete_seq", ",", "axis", "=", "0", ")", "\n", "\n", "", "joint_to_ignore", "=", "np", ".", "array", "(", "[", "0", ",", "1", ",", "2", ",", "7", ",", "8", ",", "13", ",", "16", ",", "20", ",", "29", ",", "24", ",", "27", ",", "33", ",", "36", "]", ")", "\n", "dimensions_to_ignore", "=", "np", ".", "concatenate", "(", "(", "joint_to_ignore", "*", "3", ",", "joint_to_ignore", "*", "3", "+", "1", ",", "joint_to_ignore", "*", "3", "+", "2", ")", ")", "\n", "dimensions_to_use", "=", "np", ".", "setdiff1d", "(", "np", ".", "arange", "(", "complete_seq", ".", "shape", "[", "1", "]", ")", ",", "dimensions_to_ignore", ")", "\n", "\n", "data_std", "[", "dimensions_to_ignore", "]", "=", "1.0", "\n", "data_mean", "[", "dimensions_to_ignore", "]", "=", "0.0", "\n", "\n", "return", "sampled_seq", ",", "dimensions_to_ignore", ",", "dimensions_to_use", ",", "data_mean", ",", "data_std", "\n", "\n"]], "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.data_utils.rotmat2euler_torch": [[467, 510], ["torch.zeros().float().cuda", "numpy.arange", "numpy.setdiff1d().tolist", "len", "torch.zeros().float().cuda", "torch.atan2", "len", "torch.zeros().float().cuda", "torch.atan2", "len", "torch.zeros().float().cuda", "torch.atan2", "torch.atan2", "torch.zeros().float", "numpy.setdiff1d", "torch.asin", "torch.zeros().float", "torch.zeros().float", "numpy.setdiff1d", "torch.zeros().float", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "len", "len", "len"], "function", ["None"], ["", "def", "rotmat2euler_torch", "(", "R", ")", ":", "\n", "    ", "\"\"\"\n    Converts a rotation matrix to euler angles\n    batch pytorch version ported from the corresponding numpy method above\n\n    :param R:N*3*3\n    :return: N*3\n    \"\"\"", "\n", "n", "=", "R", ".", "data", ".", "shape", "[", "0", "]", "\n", "eul", "=", "torch", ".", "zeros", "(", "n", ",", "3", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "idx_spec1", "=", "(", "R", "[", ":", ",", "0", ",", "2", "]", "==", "1", ")", ".", "nonzero", "(", ")", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ".", "reshape", "(", "-", "1", ")", ".", "tolist", "(", ")", "\n", "idx_spec2", "=", "(", "R", "[", ":", ",", "0", ",", "2", "]", "==", "-", "1", ")", ".", "nonzero", "(", ")", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ".", "reshape", "(", "-", "1", ")", ".", "tolist", "(", ")", "\n", "if", "len", "(", "idx_spec1", ")", ">", "0", ":", "\n", "        ", "R_spec1", "=", "R", "[", "idx_spec1", ",", ":", ",", ":", "]", "\n", "eul_spec1", "=", "torch", ".", "zeros", "(", "len", "(", "idx_spec1", ")", ",", "3", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "eul_spec1", "[", ":", ",", "2", "]", "=", "0", "\n", "eul_spec1", "[", ":", ",", "1", "]", "=", "-", "np", ".", "pi", "/", "2", "\n", "delta", "=", "torch", ".", "atan2", "(", "R_spec1", "[", ":", ",", "0", ",", "1", "]", ",", "R_spec1", "[", ":", ",", "0", ",", "2", "]", ")", "\n", "eul_spec1", "[", ":", ",", "0", "]", "=", "delta", "\n", "eul", "[", "idx_spec1", ",", ":", "]", "=", "eul_spec1", "\n", "\n", "", "if", "len", "(", "idx_spec2", ")", ">", "0", ":", "\n", "        ", "R_spec2", "=", "R", "[", "idx_spec2", ",", ":", ",", ":", "]", "\n", "eul_spec2", "=", "torch", ".", "zeros", "(", "len", "(", "idx_spec2", ")", ",", "3", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "eul_spec2", "[", ":", ",", "2", "]", "=", "0", "\n", "eul_spec2", "[", ":", ",", "1", "]", "=", "np", ".", "pi", "/", "2", "\n", "delta", "=", "torch", ".", "atan2", "(", "R_spec2", "[", ":", ",", "0", ",", "1", "]", ",", "R_spec2", "[", ":", ",", "0", ",", "2", "]", ")", "\n", "eul_spec2", "[", ":", ",", "0", "]", "=", "delta", "\n", "eul", "[", "idx_spec2", "]", "=", "eul_spec2", "\n", "\n", "", "idx_remain", "=", "np", ".", "arange", "(", "0", ",", "n", ")", "\n", "idx_remain", "=", "np", ".", "setdiff1d", "(", "np", ".", "setdiff1d", "(", "idx_remain", ",", "idx_spec1", ")", ",", "idx_spec2", ")", ".", "tolist", "(", ")", "\n", "if", "len", "(", "idx_remain", ")", ">", "0", ":", "\n", "        ", "R_remain", "=", "R", "[", "idx_remain", ",", ":", ",", ":", "]", "\n", "eul_remain", "=", "torch", ".", "zeros", "(", "len", "(", "idx_remain", ")", ",", "3", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "eul_remain", "[", ":", ",", "1", "]", "=", "-", "torch", ".", "asin", "(", "R_remain", "[", ":", ",", "0", ",", "2", "]", ")", "\n", "eul_remain", "[", ":", ",", "0", "]", "=", "torch", ".", "atan2", "(", "R_remain", "[", ":", ",", "1", ",", "2", "]", "/", "torch", ".", "cos", "(", "eul_remain", "[", ":", ",", "1", "]", ")", ",", "\n", "R_remain", "[", ":", ",", "2", ",", "2", "]", "/", "torch", ".", "cos", "(", "eul_remain", "[", ":", ",", "1", "]", ")", ")", "\n", "eul_remain", "[", ":", ",", "2", "]", "=", "torch", ".", "atan2", "(", "R_remain", "[", ":", ",", "0", ",", "1", "]", "/", "torch", ".", "cos", "(", "eul_remain", "[", ":", ",", "1", "]", ")", ",", "\n", "R_remain", "[", ":", ",", "0", ",", "0", "]", "/", "torch", ".", "cos", "(", "eul_remain", "[", ":", ",", "1", "]", ")", ")", "\n", "eul", "[", "idx_remain", ",", ":", "]", "=", "eul_remain", "\n", "\n", "", "return", "eul", "\n", "\n"]], "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.data_utils.rotmat2quat_torch": [[512, 537], ["torch.zeros_like", "torch.norm", "torch.div", "torch.atan2", "torch.zeros().float().cuda", "torch.cos", "torch.mul", "R.transpose", "torch.sin().unsqueeze().repeat", "torch.norm.unsqueeze().repeat", "torch.zeros().float", "torch.sin().unsqueeze", "torch.norm.unsqueeze", "torch.zeros", "torch.sin"], "function", ["None"], ["", "def", "rotmat2quat_torch", "(", "R", ")", ":", "\n", "    ", "\"\"\"\n    Converts a rotation matrix to quaternion\n    batch pytorch version ported from the corresponding numpy method above\n    :param R: N * 3 * 3\n    :return: N * 4\n    \"\"\"", "\n", "rotdiff", "=", "R", "-", "R", ".", "transpose", "(", "1", ",", "2", ")", "\n", "r", "=", "torch", ".", "zeros_like", "(", "rotdiff", "[", ":", ",", "0", "]", ")", "\n", "r", "[", ":", ",", "0", "]", "=", "-", "rotdiff", "[", ":", ",", "1", ",", "2", "]", "\n", "r", "[", ":", ",", "1", "]", "=", "rotdiff", "[", ":", ",", "0", ",", "2", "]", "\n", "r", "[", ":", ",", "2", "]", "=", "-", "rotdiff", "[", ":", ",", "0", ",", "1", "]", "\n", "r_norm", "=", "torch", ".", "norm", "(", "r", ",", "dim", "=", "1", ")", "\n", "sintheta", "=", "r_norm", "/", "2", "\n", "r0", "=", "torch", ".", "div", "(", "r", ",", "r_norm", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "3", ")", "+", "0.00000001", ")", "\n", "t1", "=", "R", "[", ":", ",", "0", ",", "0", "]", "\n", "t2", "=", "R", "[", ":", ",", "1", ",", "1", "]", "\n", "t3", "=", "R", "[", ":", ",", "2", ",", "2", "]", "\n", "costheta", "=", "(", "t1", "+", "t2", "+", "t3", "-", "1", ")", "/", "2", "\n", "theta", "=", "torch", ".", "atan2", "(", "sintheta", ",", "costheta", ")", "\n", "q", "=", "torch", ".", "zeros", "(", "R", ".", "shape", "[", "0", "]", ",", "4", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "q", "[", ":", ",", "0", "]", "=", "torch", ".", "cos", "(", "theta", "/", "2", ")", "\n", "q", "[", ":", ",", "1", ":", "]", "=", "torch", ".", "mul", "(", "r0", ",", "torch", ".", "sin", "(", "theta", "/", "2", ")", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "3", ")", ")", "\n", "\n", "return", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.data_utils.expmap2quat_torch": [[539, 553], ["torch.norm().unsqueeze", "torch.div", "torch.sin", "torch.cos", "torch.mul", "torch.cat", "torch.sin.repeat", "torch.norm", "torch.norm().unsqueeze.repeat"], "function", ["None"], ["", "def", "expmap2quat_torch", "(", "exp", ")", ":", "\n", "    ", "\"\"\"\n    Converts expmap to quaternion\n    batch pytorch version ported from the corresponding numpy method above\n    :param R: N*3\n    :return: N*4\n    \"\"\"", "\n", "theta", "=", "torch", ".", "norm", "(", "exp", ",", "p", "=", "2", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", "\n", "v", "=", "torch", ".", "div", "(", "exp", ",", "theta", ".", "repeat", "(", "1", ",", "3", ")", "+", "0.0000001", ")", "\n", "sinhalf", "=", "torch", ".", "sin", "(", "theta", "/", "2", ")", "\n", "coshalf", "=", "torch", ".", "cos", "(", "theta", "/", "2", ")", "\n", "q1", "=", "torch", ".", "mul", "(", "v", ",", "sinhalf", ".", "repeat", "(", "1", ",", "3", ")", ")", "\n", "q", "=", "torch", ".", "cat", "(", "(", "coshalf", ",", "q1", ")", ",", "dim", "=", "1", ")", "\n", "return", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.data_utils.expmap2rotmat_torch": [[555, 575], ["torch.norm", "torch.div", "torch.zeros_like().repeat", "r1.view.view", "r1.view.transpose", "torch.mul", "torch.norm.unsqueeze().repeat", "torch.zeros_like", "torch.eye().repeat().float().cuda", "torch.mul", "torch.matmul", "torch.sin().unsqueeze().repeat().view", "torch.cos().unsqueeze().repeat().view", "torch.norm.unsqueeze", "torch.eye().repeat().float", "torch.sin().unsqueeze().repeat", "torch.cos().unsqueeze().repeat", "torch.eye().repeat", "torch.sin().unsqueeze", "torch.cos().unsqueeze", "torch.eye", "torch.sin", "torch.cos"], "function", ["None"], ["", "def", "expmap2rotmat_torch", "(", "r", ")", ":", "\n", "    ", "\"\"\"\n    Converts expmap matrix to rotation\n    batch pytorch version ported from the corresponding method above\n    :param r: N*3\n    :return: N*3*3\n    \"\"\"", "\n", "theta", "=", "torch", ".", "norm", "(", "r", ",", "2", ",", "1", ")", "\n", "r0", "=", "torch", ".", "div", "(", "r", ",", "theta", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "3", ")", "+", "0.0000001", ")", "\n", "r1", "=", "torch", ".", "zeros_like", "(", "r0", ")", ".", "repeat", "(", "1", ",", "3", ")", "\n", "r1", "[", ":", ",", "1", "]", "=", "-", "r0", "[", ":", ",", "2", "]", "\n", "r1", "[", ":", ",", "2", "]", "=", "r0", "[", ":", ",", "1", "]", "\n", "r1", "[", ":", ",", "5", "]", "=", "-", "r0", "[", ":", ",", "0", "]", "\n", "r1", "=", "r1", ".", "view", "(", "-", "1", ",", "3", ",", "3", ")", "\n", "r1", "=", "r1", "-", "r1", ".", "transpose", "(", "1", ",", "2", ")", "\n", "n", "=", "r1", ".", "data", ".", "shape", "[", "0", "]", "\n", "R", "=", "torch", ".", "eye", "(", "3", ",", "3", ")", ".", "repeat", "(", "n", ",", "1", ",", "1", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "+", "torch", ".", "mul", "(", "\n", "torch", ".", "sin", "(", "theta", ")", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "9", ")", ".", "view", "(", "-", "1", ",", "3", ",", "3", ")", ",", "r1", ")", "+", "torch", ".", "mul", "(", "\n", "(", "1", "-", "torch", ".", "cos", "(", "theta", ")", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "9", ")", ".", "view", "(", "-", "1", ",", "3", ",", "3", ")", ")", ",", "torch", ".", "matmul", "(", "r1", ",", "r1", ")", ")", "\n", "return", "R", "\n", "\n"]], "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.data_utils.expmap2xyz_torch": [[577, 586], ["utils.forward_kinematics._some_variables", "utils.forward_kinematics.fkl_torch"], "function", ["home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.forward_kinematics._some_variables", "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.forward_kinematics.fkl_torch"], ["", "def", "expmap2xyz_torch", "(", "expmap", ")", ":", "\n", "    ", "\"\"\"\n    convert expmaps to joint locations\n    :param expmap: N*99\n    :return: N*32*3\n    \"\"\"", "\n", "parent", ",", "offset", ",", "rotInd", ",", "expmapInd", "=", "forward_kinematics", ".", "_some_variables", "(", ")", "\n", "xyz", "=", "forward_kinematics", ".", "fkl_torch", "(", "expmap", ",", "parent", ",", "offset", ",", "rotInd", ",", "expmapInd", ")", "\n", "return", "xyz", "\n", "\n"]], "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.data_utils.get_dct_matrix": [[588, 598], ["numpy.eye", "numpy.arange", "numpy.linalg.inv", "numpy.arange", "numpy.sqrt", "numpy.sqrt", "numpy.cos"], "function", ["None"], ["", "def", "get_dct_matrix", "(", "N", ")", ":", "\n", "    ", "dct_m", "=", "np", ".", "eye", "(", "N", ")", "\n", "for", "k", "in", "np", ".", "arange", "(", "N", ")", ":", "\n", "        ", "for", "i", "in", "np", ".", "arange", "(", "N", ")", ":", "\n", "            ", "w", "=", "np", ".", "sqrt", "(", "2", "/", "N", ")", "\n", "if", "k", "==", "0", ":", "\n", "                ", "w", "=", "np", ".", "sqrt", "(", "1", "/", "N", ")", "\n", "", "dct_m", "[", "k", ",", "i", "]", "=", "w", "*", "np", ".", "cos", "(", "np", ".", "pi", "*", "(", "i", "+", "1", "/", "2", ")", "*", "k", "/", "N", ")", "\n", "", "", "idct_m", "=", "np", ".", "linalg", ".", "inv", "(", "dct_m", ")", "\n", "return", "dct_m", ",", "idct_m", "\n", "\n"]], "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.data_utils.find_indices_256": [[600, 630], ["numpy.random.RandomState", "numpy.arange", "np.random.RandomState.randint", "np.random.RandomState.randint", "numpy.arange", "numpy.arange", "numpy.vstack", "numpy.vstack"], "function", ["None"], ["", "def", "find_indices_256", "(", "frame_num1", ",", "frame_num2", ",", "seq_len", ",", "input_n", "=", "10", ")", ":", "\n", "    ", "\"\"\"\n    Adapted from https://github.com/una-dinosauria/human-motion-prediction/blob/master/src/seq2seq_model.py#L478\n\n    which originaly from\n    In order to find the same action indices as in SRNN.\n    https://github.com/asheshjain399/RNNexp/blob/master/structural_rnn/CRFProblems/H3.6m/processdata.py#L325\n    \"\"\"", "\n", "\n", "# Used a fixed dummy seed, following", "\n", "# https://github.com/asheshjain399/RNNexp/blob/srnn/structural_rnn/forecastTrajectories.py#L29", "\n", "SEED", "=", "1234567890", "\n", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "SEED", ")", "\n", "\n", "T1", "=", "frame_num1", "-", "150", "\n", "T2", "=", "frame_num2", "-", "150", "# seq_len", "\n", "idxo1", "=", "None", "\n", "idxo2", "=", "None", "\n", "for", "_", "in", "np", ".", "arange", "(", "0", ",", "128", ")", ":", "\n", "        ", "idx_ran1", "=", "rng", ".", "randint", "(", "16", ",", "T1", ")", "\n", "idx_ran2", "=", "rng", ".", "randint", "(", "16", ",", "T2", ")", "\n", "idxs1", "=", "np", ".", "arange", "(", "idx_ran1", "+", "50", "-", "input_n", ",", "idx_ran1", "+", "50", "-", "input_n", "+", "seq_len", ")", "\n", "idxs2", "=", "np", ".", "arange", "(", "idx_ran2", "+", "50", "-", "input_n", ",", "idx_ran2", "+", "50", "-", "input_n", "+", "seq_len", ")", "\n", "if", "idxo1", "is", "None", ":", "\n", "            ", "idxo1", "=", "idxs1", "\n", "idxo2", "=", "idxs2", "\n", "", "else", ":", "\n", "            ", "idxo1", "=", "np", ".", "vstack", "(", "(", "idxo1", ",", "idxs1", ")", ")", "\n", "idxo2", "=", "np", ".", "vstack", "(", "(", "idxo2", ",", "idxs2", ")", ")", "\n", "", "", "return", "idxo1", ",", "idxo2", "\n", "\n"]], "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.data_utils.find_indices_srnn": [[632, 664], ["numpy.random.RandomState", "numpy.arange", "np.random.RandomState.randint", "np.random.RandomState.randint", "numpy.arange", "numpy.arange", "numpy.vstack", "numpy.vstack"], "function", ["None"], ["", "def", "find_indices_srnn", "(", "frame_num1", ",", "frame_num2", ",", "seq_len", ",", "input_n", "=", "10", ")", ":", "\n", "    ", "\"\"\"\n    Adapted from https://github.com/una-dinosauria/human-motion-prediction/blob/master/src/seq2seq_model.py#L478\n\n    which originaly from\n    In order to find the same action indices as in SRNN.\n    https://github.com/asheshjain399/RNNexp/blob/master/structural_rnn/CRFProblems/H3.6m/processdata.py#L325\n    \"\"\"", "\n", "\n", "# Used a fixed dummy seed, following", "\n", "# https://github.com/asheshjain399/RNNexp/blob/srnn/structural_rnn/forecastTrajectories.py#L29", "\n", "SEED", "=", "1234567890", "\n", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "SEED", ")", "\n", "\n", "T1", "=", "frame_num1", "-", "150", "\n", "T2", "=", "frame_num2", "-", "150", "# seq_len", "\n", "idxo1", "=", "None", "\n", "idxo2", "=", "None", "\n", "for", "_", "in", "np", ".", "arange", "(", "0", ",", "4", ")", ":", "\n", "        ", "idx_ran1", "=", "rng", ".", "randint", "(", "16", ",", "T1", ")", "\n", "idx_ran2", "=", "rng", ".", "randint", "(", "16", ",", "T2", ")", "\n", "# print(\"subact1 {}\".format(idx_ran1))", "\n", "# print(\"subact2 {}\".format(idx_ran2))", "\n", "idxs1", "=", "np", ".", "arange", "(", "idx_ran1", "+", "50", "-", "input_n", ",", "idx_ran1", "+", "50", "-", "input_n", "+", "seq_len", ")", "\n", "idxs2", "=", "np", ".", "arange", "(", "idx_ran2", "+", "50", "-", "input_n", ",", "idx_ran2", "+", "50", "-", "input_n", "+", "seq_len", ")", "\n", "if", "idxo1", "is", "None", ":", "\n", "            ", "idxo1", "=", "idxs1", "\n", "idxo2", "=", "idxs2", "\n", "", "else", ":", "\n", "            ", "idxo1", "=", "np", ".", "vstack", "(", "(", "idxo1", ",", "idxs1", ")", ")", "\n", "idxo2", "=", "np", ".", "vstack", "(", "(", "idxo2", ",", "idxs2", ")", ")", "\n", "", "", "return", "idxo1", ",", "idxo2", "\n", "", ""]], "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.forward_kinematics.fkl": [[7, 66], ["numpy.arange", "numpy.array().squeeze", "len", "dict", "utils.data_utils.expmap2rotmat", "range", "numpy.array", "numpy.array", "data_utils.expmap2rotmat.dot", "range", "numpy.array", "numpy.reshape"], "function", ["home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.data_utils.expmap2rotmat"], ["def", "fkl", "(", "angles", ",", "parent", ",", "offset", ",", "rotInd", ",", "expmapInd", ")", ":", "\n", "    ", "\"\"\"\n    Convert joint angles and bone lenghts into the 3d points of a person.\n\n    adapted from\n    https://github.com/una-dinosauria/human-motion-prediction/blob/master/src/forward_kinematics.py#L14\n\n    which originaly based on expmap2xyz.m, available at\n    https://github.com/asheshjain399/RNNexp/blob/7fc5a53292dc0f232867beb66c3a9ef845d705cb/structural_rnn/CRFProblems/H3.6m/mhmublv/Motion/exp2xyz.m\n    Args\n      angles: 99-long vector with 3d position and 3d joint angles in expmap format\n      parent: 32-long vector with parent-child relationships in the kinematic tree\n      offset: 96-long vector with bone lenghts\n      rotInd: 32-long list with indices into angles\n      expmapInd: 32-long list with indices into expmap angles\n    Returns\n      xyz: 32x3 3d points that represent a person in 3d space\n    \"\"\"", "\n", "\n", "assert", "len", "(", "angles", ")", "==", "99", "\n", "\n", "# Structure that indicates parents for each joint", "\n", "njoints", "=", "32", "\n", "xyzStruct", "=", "[", "dict", "(", ")", "for", "x", "in", "range", "(", "njoints", ")", "]", "\n", "\n", "for", "i", "in", "np", ".", "arange", "(", "njoints", ")", ":", "\n", "\n", "# if not rotInd[i]:  # If the list is empty", "\n", "#     xangle, yangle, zangle = 0, 0, 0", "\n", "# else:", "\n", "#     xangle = angles[rotInd[i][0] - 1]", "\n", "#     yangle = angles[rotInd[i][1] - 1]", "\n", "#     zangle = angles[rotInd[i][2] - 1]", "\n", "        ", "if", "i", "==", "0", ":", "\n", "            ", "xangle", "=", "angles", "[", "0", "]", "\n", "yangle", "=", "angles", "[", "1", "]", "\n", "zangle", "=", "angles", "[", "2", "]", "\n", "thisPosition", "=", "np", ".", "array", "(", "[", "xangle", ",", "yangle", ",", "zangle", "]", ")", "\n", "", "else", ":", "\n", "            ", "thisPosition", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "0", "]", ")", "\n", "\n", "", "r", "=", "angles", "[", "expmapInd", "[", "i", "]", "]", "\n", "\n", "thisRotation", "=", "data_utils", ".", "expmap2rotmat", "(", "r", ")", "\n", "\n", "if", "parent", "[", "i", "]", "==", "-", "1", ":", "# Root node", "\n", "            ", "xyzStruct", "[", "i", "]", "[", "'rotation'", "]", "=", "thisRotation", "\n", "xyzStruct", "[", "i", "]", "[", "'xyz'", "]", "=", "np", ".", "reshape", "(", "offset", "[", "i", ",", ":", "]", ",", "(", "1", ",", "3", ")", ")", "+", "thisPosition", "\n", "", "else", ":", "\n", "            ", "xyzStruct", "[", "i", "]", "[", "'xyz'", "]", "=", "(", "offset", "[", "i", ",", ":", "]", "+", "thisPosition", ")", ".", "dot", "(", "xyzStruct", "[", "parent", "[", "i", "]", "]", "[", "'rotation'", "]", ")", "+", "xyzStruct", "[", "parent", "[", "i", "]", "]", "[", "'xyz'", "]", "\n", "xyzStruct", "[", "i", "]", "[", "'rotation'", "]", "=", "thisRotation", ".", "dot", "(", "xyzStruct", "[", "parent", "[", "i", "]", "]", "[", "'rotation'", "]", ")", "\n", "\n", "", "", "xyz", "=", "[", "xyzStruct", "[", "i", "]", "[", "'xyz'", "]", "for", "i", "in", "range", "(", "njoints", ")", "]", "\n", "xyz", "=", "np", ".", "array", "(", "xyz", ")", ".", "squeeze", "(", ")", "\n", "# xyz = xyz[:, [0, 2, 1]]", "\n", "# xyz = xyz[:,[2,0,1]]", "\n", "\n", "return", "xyz", "\n", "\n"]], "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.forward_kinematics._some_variables": [[68, 136], ["numpy.array", "offset.reshape.reshape", "numpy.split", "numpy.array", "numpy.arange"], "function", ["None"], ["", "def", "_some_variables", "(", ")", ":", "\n", "    ", "\"\"\"\n    borrowed from\n    https://github.com/una-dinosauria/human-motion-prediction/blob/master/src/forward_kinematics.py#L100\n\n    We define some variables that are useful to run the kinematic tree\n\n    Args\n      None\n    Returns\n      parent: 32-long vector with parent-child relationships in the kinematic tree\n      offset: 96-long vector with bone lenghts\n      rotInd: 32-long list with indices into angles\n      expmapInd: 32-long list with indices into expmap angles\n    \"\"\"", "\n", "\n", "parent", "=", "np", ".", "array", "(", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "1", ",", "7", ",", "8", ",", "9", ",", "10", ",", "1", ",", "12", ",", "13", ",", "14", ",", "15", ",", "13", ",", "\n", "17", ",", "18", ",", "19", ",", "20", ",", "21", ",", "20", ",", "23", ",", "13", ",", "25", ",", "26", ",", "27", ",", "28", ",", "29", ",", "28", ",", "31", "]", ")", "-", "1", "\n", "\n", "offset", "=", "np", ".", "array", "(", "\n", "[", "0.000000", ",", "0.000000", ",", "0.000000", ",", "-", "132.948591", ",", "0.000000", ",", "0.000000", ",", "0.000000", ",", "-", "442.894612", ",", "0.000000", ",", "0.000000", ",", "\n", "-", "454.206447", ",", "0.000000", ",", "0.000000", ",", "0.000000", ",", "162.767078", ",", "0.000000", ",", "0.000000", ",", "74.999437", ",", "132.948826", ",", "0.000000", ",", "\n", "0.000000", ",", "0.000000", ",", "-", "442.894413", ",", "0.000000", ",", "0.000000", ",", "-", "454.206590", ",", "0.000000", ",", "0.000000", ",", "0.000000", ",", "162.767426", ",", "\n", "0.000000", ",", "0.000000", ",", "74.999948", ",", "0.000000", ",", "0.100000", ",", "0.000000", ",", "0.000000", ",", "233.383263", ",", "0.000000", ",", "0.000000", ",", "\n", "257.077681", ",", "0.000000", ",", "0.000000", ",", "121.134938", ",", "0.000000", ",", "0.000000", ",", "115.002227", ",", "0.000000", ",", "0.000000", ",", "257.077681", ",", "\n", "0.000000", ",", "0.000000", ",", "151.034226", ",", "0.000000", ",", "0.000000", ",", "278.882773", ",", "0.000000", ",", "0.000000", ",", "251.733451", ",", "0.000000", ",", "\n", "0.000000", ",", "0.000000", ",", "0.000000", ",", "0.000000", ",", "0.000000", ",", "99.999627", ",", "0.000000", ",", "100.000188", ",", "0.000000", ",", "0.000000", ",", "\n", "0.000000", ",", "0.000000", ",", "0.000000", ",", "257.077681", ",", "0.000000", ",", "0.000000", ",", "151.031437", ",", "0.000000", ",", "0.000000", ",", "278.892924", ",", "\n", "0.000000", ",", "0.000000", ",", "251.728680", ",", "0.000000", ",", "0.000000", ",", "0.000000", ",", "0.000000", ",", "0.000000", ",", "0.000000", ",", "99.999888", ",", "\n", "0.000000", ",", "137.499922", ",", "0.000000", ",", "0.000000", ",", "0.000000", ",", "0.000000", "]", ")", "\n", "offset", "=", "offset", ".", "reshape", "(", "-", "1", ",", "3", ")", "\n", "\n", "rotInd", "=", "[", "[", "5", ",", "6", ",", "4", "]", ",", "\n", "[", "8", ",", "9", ",", "7", "]", ",", "\n", "[", "11", ",", "12", ",", "10", "]", ",", "\n", "[", "14", ",", "15", ",", "13", "]", ",", "\n", "[", "17", ",", "18", ",", "16", "]", ",", "\n", "[", "]", ",", "\n", "[", "20", ",", "21", ",", "19", "]", ",", "\n", "[", "23", ",", "24", ",", "22", "]", ",", "\n", "[", "26", ",", "27", ",", "25", "]", ",", "\n", "[", "29", ",", "30", ",", "28", "]", ",", "\n", "[", "]", ",", "\n", "[", "32", ",", "33", ",", "31", "]", ",", "\n", "[", "35", ",", "36", ",", "34", "]", ",", "\n", "[", "38", ",", "39", ",", "37", "]", ",", "\n", "[", "41", ",", "42", ",", "40", "]", ",", "\n", "[", "]", ",", "\n", "[", "44", ",", "45", ",", "43", "]", ",", "\n", "[", "47", ",", "48", ",", "46", "]", ",", "\n", "[", "50", ",", "51", ",", "49", "]", ",", "\n", "[", "53", ",", "54", ",", "52", "]", ",", "\n", "[", "56", ",", "57", ",", "55", "]", ",", "\n", "[", "]", ",", "\n", "[", "59", ",", "60", ",", "58", "]", ",", "\n", "[", "]", ",", "\n", "[", "62", ",", "63", ",", "61", "]", ",", "\n", "[", "65", ",", "66", ",", "64", "]", ",", "\n", "[", "68", ",", "69", ",", "67", "]", ",", "\n", "[", "71", ",", "72", ",", "70", "]", ",", "\n", "[", "74", ",", "75", ",", "73", "]", ",", "\n", "[", "]", ",", "\n", "[", "77", ",", "78", ",", "76", "]", ",", "\n", "[", "]", "]", "\n", "\n", "expmapInd", "=", "np", ".", "split", "(", "np", ".", "arange", "(", "4", ",", "100", ")", "-", "1", ",", "32", ")", "\n", "\n", "return", "parent", ",", "offset", ",", "rotInd", ",", "expmapInd", "\n", "\n"]], "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.forward_kinematics._some_variables_cmu": [[138, 217], ["offset.reshape.reshape", "numpy.arange", "numpy.split", "numpy.array", "numpy.array", "posInd.append", "posInd.append", "numpy.arange"], "function", ["None"], ["", "def", "_some_variables_cmu", "(", ")", ":", "\n", "    ", "\"\"\"\n    We define some variables that are useful to run the kinematic tree\n\n    Args\n      None\n    Returns\n      parent: 32-long vector with parent-child relationships in the kinematic tree\n      offset: 96-long vector with bone lenghts\n      rotInd: 32-long list with indices into angles\n      expmapInd: 32-long list with indices into expmap angles\n    \"\"\"", "\n", "\n", "parent", "=", "np", ".", "array", "(", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "1", ",", "8", ",", "9", ",", "10", ",", "11", ",", "12", ",", "1", ",", "14", ",", "15", ",", "16", ",", "17", ",", "18", ",", "19", ",", "16", ",", "\n", "21", ",", "22", ",", "23", ",", "24", ",", "25", ",", "26", ",", "24", ",", "28", ",", "16", ",", "30", ",", "31", ",", "32", ",", "33", ",", "34", ",", "35", ",", "33", ",", "37", "]", ")", "-", "1", "\n", "\n", "offset", "=", "70", "*", "np", ".", "array", "(", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1.65674000000000", ",", "-", "1.80282000000000", ",", "0.624770000000000", ",", "2.59720000000000", ",", "-", "7.13576000000000", ",", "\n", "0", ",", "2.49236000000000", ",", "-", "6.84770000000000", ",", "0", ",", "0.197040000000000", ",", "-", "0.541360000000000", ",", "2.14581000000000", ",", "0", ",", "0", ",", "\n", "1.11249000000000", ",", "0", ",", "0", ",", "0", ",", "-", "1.61070000000000", ",", "-", "1.80282000000000", ",", "0.624760000000000", ",", "-", "2.59502000000000", ",", "\n", "-", "7.12977000000000", ",", "0", ",", "-", "2.46780000000000", ",", "-", "6.78024000000000", ",", "0", ",", "-", "0.230240000000000", ",", "-", "0.632580000000000", ",", "\n", "2.13368000000000", ",", "0", ",", "0", ",", "1.11569000000000", ",", "0", ",", "0", ",", "0", ",", "0.0196100000000000", ",", "2.05450000000000", ",", "-", "0.141120000000000", ",", "\n", "0.0102100000000000", ",", "2.06436000000000", ",", "-", "0.0592100000000000", ",", "0", ",", "0", ",", "0", ",", "0.00713000000000000", ",", "1.56711000000000", ",", "\n", "0.149680000000000", ",", "0.0342900000000000", ",", "1.56041000000000", ",", "-", "0.100060000000000", ",", "0.0130500000000000", ",", "\n", "1.62560000000000", ",", "-", "0.0526500000000000", ",", "0", ",", "0", ",", "0", ",", "3.54205000000000", ",", "0.904360000000000", ",", "-", "0.173640000000000", ",", "\n", "4.86513000000000", ",", "0", ",", "0", ",", "3.35554000000000", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0.661170000000000", ",", "0", ",", "0", ",", "0.533060000000000", ",", "0", ",", "0", ",", "0", ",", "\n", "0", ",", "0", ",", "0.541200000000000", ",", "0", ",", "0.541200000000000", ",", "0", ",", "0", ",", "0", ",", "-", "3.49802000000000", ",", "0.759940000000000", ",", "\n", "-", "0.326160000000000", ",", "-", "5.02649000000000", ",", "0", ",", "0", ",", "-", "3.36431000000000", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "-", "0.730410000000000", ",", "0", ",", "0", ",", "\n", "-", "0.588870000000000", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "-", "0.597860000000000", ",", "0", ",", "0.597860000000000", "]", ")", "\n", "offset", "=", "offset", ".", "reshape", "(", "-", "1", ",", "3", ")", "\n", "\n", "rotInd", "=", "[", "[", "6", ",", "5", ",", "4", "]", ",", "\n", "[", "9", ",", "8", ",", "7", "]", ",", "\n", "[", "12", ",", "11", ",", "10", "]", ",", "\n", "[", "15", ",", "14", ",", "13", "]", ",", "\n", "[", "18", ",", "17", ",", "16", "]", ",", "\n", "[", "21", ",", "20", ",", "19", "]", ",", "\n", "[", "]", ",", "\n", "[", "24", ",", "23", ",", "22", "]", ",", "\n", "[", "27", ",", "26", ",", "25", "]", ",", "\n", "[", "30", ",", "29", ",", "28", "]", ",", "\n", "[", "33", ",", "32", ",", "31", "]", ",", "\n", "[", "36", ",", "35", ",", "34", "]", ",", "\n", "[", "]", ",", "\n", "[", "39", ",", "38", ",", "37", "]", ",", "\n", "[", "42", ",", "41", ",", "40", "]", ",", "\n", "[", "45", ",", "44", ",", "43", "]", ",", "\n", "[", "48", ",", "47", ",", "46", "]", ",", "\n", "[", "51", ",", "50", ",", "49", "]", ",", "\n", "[", "54", ",", "53", ",", "52", "]", ",", "\n", "[", "]", ",", "\n", "[", "57", ",", "56", ",", "55", "]", ",", "\n", "[", "60", ",", "59", ",", "58", "]", ",", "\n", "[", "63", ",", "62", ",", "61", "]", ",", "\n", "[", "66", ",", "65", ",", "64", "]", ",", "\n", "[", "69", ",", "68", ",", "67", "]", ",", "\n", "[", "72", ",", "71", ",", "70", "]", ",", "\n", "[", "]", ",", "\n", "[", "75", ",", "74", ",", "73", "]", ",", "\n", "[", "]", ",", "\n", "[", "78", ",", "77", ",", "76", "]", ",", "\n", "[", "81", ",", "80", ",", "79", "]", ",", "\n", "[", "84", ",", "83", ",", "82", "]", ",", "\n", "[", "87", ",", "86", ",", "85", "]", ",", "\n", "[", "90", ",", "89", ",", "88", "]", ",", "\n", "[", "93", ",", "92", ",", "91", "]", ",", "\n", "[", "]", ",", "\n", "[", "96", ",", "95", ",", "94", "]", ",", "\n", "[", "]", "]", "\n", "posInd", "=", "[", "]", "\n", "for", "ii", "in", "np", ".", "arange", "(", "38", ")", ":", "\n", "        ", "if", "ii", "==", "0", ":", "\n", "            ", "posInd", ".", "append", "(", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "", "else", ":", "\n", "            ", "posInd", ".", "append", "(", "[", "]", ")", "\n", "\n", "", "", "expmapInd", "=", "np", ".", "split", "(", "np", ".", "arange", "(", "4", ",", "118", ")", "-", "1", ",", "38", ")", "\n", "\n", "return", "parent", ",", "offset", ",", "posInd", ",", "expmapInd", "\n", "\n"]], "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.forward_kinematics.fkl_torch": [[219, 242], ["torch.autograd.variable.Variable().float().cuda().unsqueeze().repeat", "angles[].contiguous().view", "utils.data_utils.expmap2rotmat_torch().view", "numpy.arange", "torch.autograd.variable.Variable().float().cuda().unsqueeze", "angles[].contiguous", "utils.data_utils.expmap2rotmat_torch", "torch.matmul().clone", "torch.matmul", "torch.autograd.variable.Variable().float().cuda", "torch.matmul", "torch.autograd.variable.Variable().float", "torch.autograd.variable.Variable", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.data_utils.expmap2rotmat_torch"], ["", "def", "fkl_torch", "(", "angles", ",", "parent", ",", "offset", ",", "rotInd", ",", "expmapInd", ")", ":", "\n", "    ", "\"\"\"\n    pytorch version of fkl.\n\n    convert joint angles to joint locations\n    batch pytorch version of the fkl() method above\n    :param angles: N*99\n    :param parent:\n    :param offset:\n    :param rotInd:\n    :param expmapInd:\n    :return: N*joint_n*3\n    \"\"\"", "\n", "n", "=", "angles", ".", "data", ".", "shape", "[", "0", "]", "\n", "j_n", "=", "offset", ".", "shape", "[", "0", "]", "\n", "p3d", "=", "Variable", "(", "torch", ".", "from_numpy", "(", "offset", ")", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "n", ",", "1", ",", "1", ")", "\n", "angles", "=", "angles", "[", ":", ",", "3", ":", "]", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "3", ")", "\n", "R", "=", "data_utils", ".", "expmap2rotmat_torch", "(", "angles", ")", ".", "view", "(", "n", ",", "j_n", ",", "3", ",", "3", ")", "\n", "for", "i", "in", "np", ".", "arange", "(", "1", ",", "j_n", ")", ":", "\n", "        ", "if", "parent", "[", "i", "]", ">", "0", ":", "\n", "            ", "R", "[", ":", ",", "i", ",", ":", ",", ":", "]", "=", "torch", ".", "matmul", "(", "R", "[", ":", ",", "i", ",", ":", ",", ":", "]", ",", "R", "[", ":", ",", "parent", "[", "i", "]", ",", ":", ",", ":", "]", ")", ".", "clone", "(", ")", "\n", "p3d", "[", ":", ",", "i", ",", ":", "]", "=", "torch", ".", "matmul", "(", "p3d", "[", "0", ",", "i", ",", ":", "]", ",", "R", "[", ":", ",", "parent", "[", "i", "]", ",", ":", ",", ":", "]", ")", "+", "p3d", "[", ":", ",", "parent", "[", "i", "]", ",", ":", "]", "\n", "", "", "return", "p3d", "\n", "\n"]], "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.forward_kinematics.main": [[244, 285], ["forward_kinematics._some_variables", "numpy.array", "numpy.array", "forward_kinematics.fkl", "forward_kinematics.fkl", "torch.autograd.variable.Variable().cuda", "forward_kinematics.fkl_torch", "xyz.cpu().data.numpy.cpu().data.numpy", "print", "torch.autograd.variable.Variable", "torch.from_numpy().float", "xyz.cpu().data.numpy.cpu", "torch.from_numpy", "numpy.vstack"], "function", ["home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.forward_kinematics._some_variables", "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.forward_kinematics.fkl", "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.forward_kinematics.fkl", "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.forward_kinematics.fkl_torch"], ["", "def", "main", "(", ")", ":", "\n", "# Load all the data", "\n", "    ", "parent", ",", "offset", ",", "rotInd", ",", "expmapInd", "=", "_some_variables", "(", ")", "\n", "\n", "# numpy implementation", "\n", "# with h5py.File('samples.h5', 'r') as h5f:", "\n", "#     expmap_gt = h5f['expmap/gt/walking_0'][:]", "\n", "#     expmap_pred = h5f['expmap/preds/walking_0'][:]", "\n", "expmap_pred", "=", "np", ".", "array", "(", "\n", "[", "0.0000000", ",", "0.0000000", ",", "0.0000000", ",", "-", "0.0000001", ",", "-", "0.0000000", ",", "-", "0.0000002", ",", "0.3978439", ",", "-", "0.4166636", ",", "0.1027215", ",", "\n", "-", "0.7767256", ",", "-", "0.0000000", ",", "-", "0.0000000", ",", "0.1704115", ",", "0.3078358", ",", "-", "0.1861640", ",", "0.3330379", ",", "-", "0.0000000", ",", "-", "0.0000000", ",", "\n", "-", "0.0000000", ",", "-", "0.0000000", ",", "-", "0.0000000", ",", "0.0679339", ",", "0.2255526", ",", "0.2394881", ",", "-", "0.0989492", ",", "-", "0.0000000", ",", "-", "0.0000000", ",", "\n", "0.0677801", ",", "-", "0.3607298", ",", "0.0503249", ",", "0.1819232", ",", "-", "0.0000000", ",", "-", "0.0000000", ",", "-", "0.0000000", ",", "-", "0.0000000", ",", "-", "0.0000000", ",", "\n", "0.3236777", ",", "-", "0.0476493", ",", "-", "0.0651256", ",", "-", "0.3150051", ",", "-", "0.0665669", ",", "0.3188994", ",", "-", "0.5980227", ",", "-", "0.1190833", ",", "-", "0.3017127", ",", "\n", "1.2270271", ",", "-", "0.1010960", ",", "0.2072986", ",", "-", "0.0000000", ",", "-", "0.0000000", ",", "-", "0.0000000", ",", "-", "0.2578378", ",", "-", "0.0125206", ",", "2.0266378", ",", "\n", "-", "0.3701521", ",", "0.0199115", ",", "0.5594162", ",", "-", "0.4625384", ",", "-", "0.0000000", ",", "-", "0.0000000", ",", "0.1653314", ",", "-", "0.3952765", ",", "-", "0.1731570", ",", "\n", "-", "0.0000000", ",", "-", "0.0000000", ",", "-", "0.0000000", ",", "-", "0.0000000", ",", "-", "0.0000000", ",", "-", "0.0000000", ",", "-", "0.0000000", ",", "-", "0.0000000", ",", "-", "0.0000000", ",", "\n", "-", "0.0000000", ",", "-", "0.0000000", ",", "-", "0.0000000", ",", "2.7825687", ",", "-", "1.4196042", ",", "-", "0.0936858", ",", "-", "1.0348599", ",", "-", "2.7419815", ",", "0.4518218", ",", "\n", "-", "0.3902033", ",", "-", "0.0000000", ",", "-", "0.0000000", ",", "0.0597317", ",", "0.0547002", ",", "0.0445105", ",", "-", "0.0000000", ",", "-", "0.0000000", ",", "-", "0.0000000", ",", "\n", "-", "0.0000000", ",", "-", "0.0000000", ",", "-", "0.0000000", ",", "-", "0.0000000", ",", "-", "0.0000000", ",", "-", "0.0000000", ",", "-", "0.0000000", ",", "-", "0.0000000", ",", "-", "0.0000000", "\n", "]", ")", "\n", "expmap_gt", "=", "np", ".", "array", "(", "\n", "[", "0.2240568", ",", "-", "0.0276901", ",", "-", "0.7433901", ",", "0.0004407", ",", "-", "0.0020624", ",", "0.0002131", ",", "0.3974636", ",", "-", "0.4157083", ",", "0.1030248", ",", "\n", "-", "0.7762963", ",", "-", "0.0000000", ",", "-", "0.0000000", ",", "0.1697988", ",", "0.3087364", ",", "-", "0.1863863", ",", "0.3327336", ",", "-", "0.0000000", ",", "-", "0.0000000", ",", "\n", "-", "0.0000000", ",", "-", "0.0000000", ",", "-", "0.0000000", ",", "0.0689423", ",", "0.2282812", ",", "0.2395958", ",", "-", "0.0998311", ",", "-", "0.0000000", ",", "-", "0.0000000", ",", "\n", "0.0672752", ",", "-", "0.3615943", ",", "0.0505299", ",", "0.1816492", ",", "-", "0.0000000", ",", "-", "0.0000000", ",", "-", "0.0000000", ",", "-", "0.0000000", ",", "-", "0.0000000", ",", "\n", "0.3223563", ",", "-", "0.0481131", ",", "-", "0.0659720", ",", "-", "0.3145134", ",", "-", "0.0656419", ",", "0.3206626", ",", "-", "0.5979006", ",", "-", "0.1181534", ",", "-", "0.3033383", ",", "\n", "1.2269648", ",", "-", "0.1011873", ",", "0.2057794", ",", "-", "0.0000000", ",", "-", "0.0000000", ",", "-", "0.0000000", ",", "-", "0.2590978", ",", "-", "0.0141497", ",", "2.0271597", ",", "\n", "-", "0.3699318", ",", "0.0128547", ",", "0.5556172", ",", "-", "0.4714990", ",", "-", "0.0000000", ",", "-", "0.0000000", ",", "0.1603251", ",", "-", "0.4157299", ",", "-", "0.1667608", ",", "\n", "-", "0.0000000", ",", "-", "0.0000000", ",", "-", "0.0000000", ",", "-", "0.0000000", ",", "-", "0.0000000", ",", "-", "0.0000000", ",", "-", "0.0000000", ",", "-", "0.0000000", ",", "-", "0.0000000", ",", "\n", "-", "0.0000000", ",", "-", "0.0000000", ",", "-", "0.0000000", ",", "2.7811005", ",", "-", "1.4192915", ",", "-", "0.0932141", ",", "-", "1.0294687", ",", "-", "2.7323222", ",", "0.4542309", ",", "\n", "-", "0.4048152", ",", "-", "0.0000000", ",", "-", "0.0000000", ",", "0.0568960", ",", "0.0525994", ",", "0.0493068", ",", "-", "0.0000000", ",", "-", "0.0000000", ",", "-", "0.0000000", ",", "\n", "-", "0.0000000", ",", "-", "0.0000000", ",", "-", "0.0000000", ",", "-", "0.0000000", ",", "-", "0.0000000", ",", "-", "0.0000000", ",", "-", "0.0000000", ",", "-", "0.0000000", ",", "-", "0.0000000", "\n", "]", ")", "\n", "xyz1", "=", "fkl", "(", "expmap_pred", ",", "parent", ",", "offset", ",", "rotInd", ",", "expmapInd", ")", "\n", "xyz2", "=", "fkl", "(", "expmap_gt", ",", "parent", ",", "offset", ",", "rotInd", ",", "expmapInd", ")", "\n", "\n", "exp1", "=", "Variable", "(", "torch", ".", "from_numpy", "(", "np", ".", "vstack", "(", "(", "expmap_pred", ",", "expmap_gt", ")", ")", ")", ".", "float", "(", ")", ")", ".", "cuda", "(", ")", "\n", "xyz", "=", "fkl_torch", "(", "exp1", ",", "parent", ",", "offset", ",", "rotInd", ",", "expmapInd", ")", "\n", "xyz", "=", "xyz", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "print", "(", "xyz", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.h36motion.Datasets.__init__": [[12, 117], ["numpy.array", "numpy.array", "numpy.array", "numpy.arange", "len", "print", "utils.data_utils.readCSVasFloat", "range", "len", "numpy.array", "print", "utils.data_utils.readCSVasFloat", "range", "len", "numpy.array", "utils.data_utils.find_indices_srnn", "list", "h36motion.Datasets.data_idx.extend", "list", "h36motion.Datasets.data_idx.extend", "print", "utils.data_utils.readCSVasFloat", "range", "len", "numpy.array", "numpy.arange", "list", "h36motion.Datasets.data_idx.extend", "len", "zip", "len", "zip", "len", "zip"], "methods", ["home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.data_utils.readCSVasFloat", "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.data_utils.readCSVasFloat", "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.data_utils.find_indices_srnn", "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.data_utils.readCSVasFloat"], ["    ", "def", "__init__", "(", "self", ",", "opt", ",", "actions", "=", "None", ",", "split", "=", "0", ")", ":", "\n", "        ", "\"\"\"\n        :param path_to_data:\n        :param actions:\n        :param input_n:\n        :param output_n:\n        :param dct_used:\n        :param split: 0 train, 1 testing, 2 validation\n        :param sample_rate:\n        \"\"\"", "\n", "self", ".", "path_to_data", "=", "\"./datasets/h3.6m/\"", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "in_n", "=", "opt", ".", "input_n", "\n", "self", ".", "out_n", "=", "opt", ".", "output_n", "\n", "self", ".", "sample_rate", "=", "2", "\n", "self", ".", "seq", "=", "{", "}", "\n", "self", ".", "data_idx", "=", "[", "]", "\n", "\n", "self", ".", "dimensions_to_use", "=", "np", ".", "array", "(", "\n", "[", "6", ",", "7", ",", "8", ",", "9", ",", "12", ",", "13", ",", "14", ",", "15", ",", "21", ",", "22", ",", "23", ",", "24", ",", "27", ",", "28", ",", "29", ",", "30", ",", "36", ",", "37", ",", "38", ",", "39", ",", "40", ",", "41", ",", "42", ",", "\n", "43", ",", "44", ",", "45", ",", "46", ",", "47", ",", "51", ",", "52", ",", "53", ",", "54", ",", "55", ",", "56", ",", "57", ",", "60", ",", "61", ",", "62", ",", "75", ",", "76", ",", "77", ",", "78", ",", "79", ",", "80", ",", "81", ",", "84", ",", "85", ",", "86", "]", ")", "\n", "self", ".", "dimensions_to_ignore", "=", "np", ".", "array", "(", "\n", "[", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "10", ",", "11", ",", "16", ",", "17", ",", "18", ",", "19", ",", "20", ",", "25", ",", "26", ",", "31", ",", "32", ",", "33", ",", "34", ",", "35", ",", "48", ",", "49", ",", "50", ",", "58", ",", "\n", "59", ",", "63", ",", "64", ",", "65", ",", "66", ",", "67", ",", "68", ",", "69", ",", "70", ",", "71", ",", "72", ",", "73", ",", "74", ",", "82", ",", "83", ",", "87", ",", "88", ",", "89", ",", "90", ",", "91", ",", "92", ",", "93", ",", "94", ",", "95", ",", "96", ",", "97", ",", "\n", "98", "]", "]", ")", "\n", "\n", "seq_len", "=", "self", ".", "in_n", "+", "self", ".", "out_n", "\n", "subs", "=", "np", ".", "array", "(", "[", "[", "1", ",", "6", ",", "7", ",", "8", ",", "9", "]", ",", "[", "11", "]", ",", "[", "5", "]", "]", ")", "\n", "# acts = data_utils.define_actions(actions)", "\n", "if", "actions", "is", "None", ":", "\n", "            ", "acts", "=", "[", "\"walking\"", ",", "\"eating\"", ",", "\"smoking\"", ",", "\"discussion\"", ",", "\"directions\"", ",", "\n", "\"greeting\"", ",", "\"phoning\"", ",", "\"posing\"", ",", "\"purchases\"", ",", "\"sitting\"", ",", "\n", "\"sittingdown\"", ",", "\"takingphoto\"", ",", "\"waiting\"", ",", "\"walkingdog\"", ",", "\n", "\"walkingtogether\"", "]", "\n", "", "else", ":", "\n", "            ", "acts", "=", "actions", "\n", "# subs = np.array([[1], [11], [5]])", "\n", "# acts = ['walking']", "\n", "\n", "", "subs", "=", "subs", "[", "split", "]", "\n", "\n", "for", "subj", "in", "subs", ":", "\n", "            ", "for", "action_idx", "in", "np", ".", "arange", "(", "len", "(", "acts", ")", ")", ":", "\n", "                ", "action", "=", "acts", "[", "action_idx", "]", "\n", "if", "self", ".", "split", "<=", "1", ":", "\n", "                    ", "for", "subact", "in", "[", "1", ",", "2", "]", ":", "# subactions", "\n", "                        ", "print", "(", "\"Reading subject {0}, action {1}, subaction {2}\"", ".", "format", "(", "subj", ",", "action", ",", "subact", ")", ")", "\n", "filename", "=", "'{0}/S{1}/{2}_{3}.txt'", ".", "format", "(", "self", ".", "path_to_data", ",", "subj", ",", "action", ",", "subact", ")", "\n", "the_sequence", "=", "data_utils", ".", "readCSVasFloat", "(", "filename", ")", "\n", "n", ",", "d", "=", "the_sequence", ".", "shape", "\n", "even_list", "=", "range", "(", "0", ",", "n", ",", "self", ".", "sample_rate", ")", "\n", "num_frames", "=", "len", "(", "even_list", ")", "\n", "the_sequence", "=", "np", ".", "array", "(", "the_sequence", "[", "even_list", ",", ":", "]", ")", "\n", "# the_sequence = torch.from_numpy(the_sequence).float().cuda()", "\n", "# remove global rotation and translation", "\n", "the_sequence", "[", ":", ",", "0", ":", "6", "]", "=", "0", "\n", "# p3d = data_utils.expmap2xyz_torch(the_sequence)", "\n", "self", ".", "seq", "[", "(", "subj", ",", "action", ",", "subact", ")", "]", "=", "the_sequence", "\n", "\n", "valid_frames", "=", "np", ".", "arange", "(", "0", ",", "num_frames", "-", "seq_len", "+", "1", ",", "opt", ".", "skip_rate", ")", "\n", "\n", "tmp_data_idx_1", "=", "[", "(", "subj", ",", "action", ",", "subact", ")", "]", "*", "len", "(", "valid_frames", ")", "\n", "tmp_data_idx_2", "=", "list", "(", "valid_frames", ")", "\n", "self", ".", "data_idx", ".", "extend", "(", "zip", "(", "tmp_data_idx_1", ",", "tmp_data_idx_2", ")", ")", "\n", "", "", "else", ":", "\n", "                    ", "print", "(", "\"Reading subject {0}, action {1}, subaction {2}\"", ".", "format", "(", "subj", ",", "action", ",", "1", ")", ")", "\n", "filename", "=", "'{0}/S{1}/{2}_{3}.txt'", ".", "format", "(", "self", ".", "path_to_data", ",", "subj", ",", "action", ",", "1", ")", "\n", "the_sequence1", "=", "data_utils", ".", "readCSVasFloat", "(", "filename", ")", "\n", "n", ",", "d", "=", "the_sequence1", ".", "shape", "\n", "even_list", "=", "range", "(", "0", ",", "n", ",", "self", ".", "sample_rate", ")", "\n", "\n", "num_frames1", "=", "len", "(", "even_list", ")", "\n", "the_sequence1", "=", "np", ".", "array", "(", "the_sequence1", "[", "even_list", ",", ":", "]", ")", "\n", "# the_seq1 = torch.from_numpy(the_sequence1).float().cuda()", "\n", "the_sequence1", "[", ":", ",", "0", ":", "6", "]", "=", "0", "\n", "# p3d1 = data_utils.expmap2xyz_torch(the_seq1)", "\n", "self", ".", "seq", "[", "(", "subj", ",", "action", ",", "1", ")", "]", "=", "the_sequence1", "\n", "\n", "print", "(", "\"Reading subject {0}, action {1}, subaction {2}\"", ".", "format", "(", "subj", ",", "action", ",", "2", ")", ")", "\n", "filename", "=", "'{0}/S{1}/{2}_{3}.txt'", ".", "format", "(", "self", ".", "path_to_data", ",", "subj", ",", "action", ",", "2", ")", "\n", "the_sequence2", "=", "data_utils", ".", "readCSVasFloat", "(", "filename", ")", "\n", "n", ",", "d", "=", "the_sequence2", ".", "shape", "\n", "even_list", "=", "range", "(", "0", ",", "n", ",", "self", ".", "sample_rate", ")", "\n", "\n", "num_frames2", "=", "len", "(", "even_list", ")", "\n", "the_sequence2", "=", "np", ".", "array", "(", "the_sequence2", "[", "even_list", ",", ":", "]", ")", "\n", "# the_seq2 = torch.from_numpy(the_sequence2).float().cuda()", "\n", "the_sequence2", "[", ":", ",", "0", ":", "6", "]", "=", "0", "\n", "# p3d2 = data_utils.expmap2xyz_torch(the_seq2)", "\n", "self", ".", "seq", "[", "(", "subj", ",", "action", ",", "2", ")", "]", "=", "the_sequence2", "\n", "\n", "# fs_sel1, fs_sel2 = data_utils.find_indices_256(num_frames1, num_frames2, seq_len,", "\n", "#                                                 input_n=self.in_n)", "\n", "fs_sel1", ",", "fs_sel2", "=", "data_utils", ".", "find_indices_srnn", "(", "num_frames1", ",", "num_frames2", ",", "seq_len", ",", "\n", "input_n", "=", "self", ".", "in_n", ")", "\n", "\n", "valid_frames", "=", "fs_sel1", "[", ":", ",", "0", "]", "\n", "tmp_data_idx_1", "=", "[", "(", "subj", ",", "action", ",", "1", ")", "]", "*", "len", "(", "valid_frames", ")", "\n", "tmp_data_idx_2", "=", "list", "(", "valid_frames", ")", "\n", "self", ".", "data_idx", ".", "extend", "(", "zip", "(", "tmp_data_idx_1", ",", "tmp_data_idx_2", ")", ")", "\n", "\n", "valid_frames", "=", "fs_sel2", "[", ":", ",", "0", "]", "\n", "tmp_data_idx_1", "=", "[", "(", "subj", ",", "action", ",", "2", ")", "]", "*", "len", "(", "valid_frames", ")", "\n", "tmp_data_idx_2", "=", "list", "(", "valid_frames", ")", "\n", "self", ".", "data_idx", ".", "extend", "(", "zip", "(", "tmp_data_idx_1", ",", "tmp_data_idx_2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.h36motion.Datasets.__len__": [[118, 120], ["numpy.shape"], "methods", ["None"], ["", "", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "shape", "(", "self", ".", "data_idx", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.h36motion.Datasets.__getitem__": [[121, 125], ["numpy.arange"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "key", ",", "start_frame", "=", "self", ".", "data_idx", "[", "item", "]", "\n", "fs", "=", "np", ".", "arange", "(", "start_frame", ",", "start_frame", "+", "self", ".", "in_n", "+", "self", ".", "out_n", ")", "\n", "return", "self", ".", "seq", "[", "key", "]", "[", "fs", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.dpw3d.Datasets.__init__": [[16, 113], ["numpy.arange", "os.walk", "numpy.load", "range", "int", "files.extend", "torch.from_numpy().float().cuda", "len", "open", "print", "pickle.load", "range", "torch.from_numpy().float", "len", "range", "len", "torch.from_numpy().float().cuda", "poses.reshape.reshape.reshape", "p3d0.repeat", "utils.ang2joint.ang2joint", "dpw3d.Datasets.p3d.append", "list", "dpw3d.Datasets.data_idx.extend", "utils.ang2joint.ang2joint.cpu().data.numpy", "numpy.arange", "numpy.arange", "len", "zip", "torch.from_numpy", "torch.from_numpy().float", "torch.from_numpy", "utils.ang2joint.ang2joint.cpu"], "methods", ["home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.ang2joint.ang2joint"], ["    ", "def", "__init__", "(", "self", ",", "opt", ",", "split", "=", "0", ")", ":", "\n", "        ", "\"\"\"\n        :param path_to_data:\n        :param actions:\n        :param input_n:\n        :param output_n:\n        :param dct_used:\n        :param split: 0 train, 1 testing, 2 validation\n        :param sample_rate:\n        \"\"\"", "\n", "self", ".", "path_to_data", "=", "\"./datasets/3dpw/sequenceFiles/\"", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "in_n", "=", "opt", ".", "input_n", "\n", "self", ".", "out_n", "=", "opt", ".", "output_n", "\n", "#self.sample_rate = opt.sample_rate", "\n", "self", ".", "p3d", "=", "[", "]", "\n", "self", ".", "keys", "=", "[", "]", "\n", "self", ".", "data_idx", "=", "[", "]", "\n", "self", ".", "joint_used", "=", "np", ".", "arange", "(", "4", ",", "22", ")", "\n", "seq_len", "=", "self", ".", "in_n", "+", "self", ".", "out_n", "\n", "\n", "if", "split", "==", "0", ":", "\n", "            ", "data_path", "=", "self", ".", "path_to_data", "+", "'/train/'", "\n", "", "elif", "split", "==", "2", ":", "\n", "            ", "data_path", "=", "self", ".", "path_to_data", "+", "'/test/'", "\n", "", "elif", "split", "==", "1", ":", "\n", "            ", "data_path", "=", "self", ".", "path_to_data", "+", "'/validation/'", "\n", "", "files", "=", "[", "]", "\n", "for", "(", "dirpath", ",", "dirnames", ",", "filenames", ")", "in", "walk", "(", "data_path", ")", ":", "\n", "            ", "files", ".", "extend", "(", "filenames", ")", "\n", "\n", "# from human_body_prior.body_model.body_model import BodyModel", "\n", "# from smplx import lbs", "\n", "# root_path = os.path.dirname(__file__)", "\n", "# bm_path = root_path[:-6] + '/body_models/smplh/neutral/model.npz'", "\n", "# bm = BodyModel(bm_path=bm_path, num_betas=16, batch_size=1)", "\n", "# beta_mean = np.array([0.41771687, 0.25984767, 0.20500051, 0.13503872, 0.25965645, -2.10198147, -0.11915666,", "\n", "#                       -0.5498772, 0.30885323, 1.4813145, -0.60987528, 1.42565269, 2.45862726, 0.23001716,", "\n", "#                       -0.64180912, 0.30231911])", "\n", "# beta_mean = torch.from_numpy(beta_mean).unsqueeze(0).float()", "\n", "# # Add shape contribution", "\n", "# v_shaped = bm.v_template + lbs.blend_shapes(beta_mean, bm.shapedirs)", "\n", "# # Get the joints", "\n", "# # NxJx3 array", "\n", "# p3d0 = lbs.vertices2joints(bm.J_regressor, v_shaped)  # [1,52,3]", "\n", "# p3d0 = (p3d0 - p3d0[:, 0:1, :]).float().cuda()[:, :22]", "\n", "# parents = bm.kintree_table.data.numpy()[0, :]", "\n", "", "skel", "=", "np", ".", "load", "(", "'./body_models/smpl_skeleton.npz'", ")", "\n", "p3d0", "=", "torch", ".", "from_numpy", "(", "skel", "[", "'p3d0'", "]", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "[", ":", ",", ":", "22", "]", "\n", "parents", "=", "skel", "[", "'parents'", "]", "\n", "parent", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "len", "(", "parents", ")", ")", ":", "\n", "            ", "if", "i", ">", "21", ":", "\n", "                ", "break", "\n", "", "parent", "[", "i", "]", "=", "parents", "[", "i", "]", "\n", "", "n", "=", "0", "\n", "\n", "sample_rate", "=", "int", "(", "60", "//", "25", ")", "\n", "\n", "for", "f", "in", "files", ":", "\n", "            ", "with", "open", "(", "data_path", "+", "f", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "print", "(", "'>>> loading {}'", ".", "format", "(", "f", ")", ")", "\n", "data", "=", "pkl", ".", "load", "(", "f", ",", "encoding", "=", "'latin1'", ")", "\n", "joint_pos", "=", "data", "[", "'poses_60Hz'", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "joint_pos", ")", ")", ":", "\n", "                    ", "poses", "=", "joint_pos", "[", "i", "]", "\n", "fn", "=", "poses", ".", "shape", "[", "0", "]", "\n", "fidxs", "=", "range", "(", "0", ",", "fn", ",", "sample_rate", ")", "\n", "fn", "=", "len", "(", "fidxs", ")", "\n", "poses", "=", "poses", "[", "fidxs", "]", "\n", "poses", "=", "torch", ".", "from_numpy", "(", "poses", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "poses", "=", "poses", ".", "reshape", "(", "[", "fn", ",", "-", "1", ",", "3", "]", ")", "\n", "poses", "=", "poses", "[", ":", ",", ":", "-", "2", "]", "\n", "# remove global rotation", "\n", "poses", "[", ":", ",", "0", "]", "=", "0", "\n", "p3d0_tmp", "=", "p3d0", ".", "repeat", "(", "[", "fn", ",", "1", ",", "1", "]", ")", "\n", "p3d", "=", "ang2joint", ".", "ang2joint", "(", "p3d0_tmp", ",", "poses", ",", "parent", ")", "\n", "# self.p3d[(ds, sub, act)] = p3d.cpu().data.numpy()", "\n", "self", ".", "p3d", ".", "append", "(", "p3d", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ")", "\n", "# # vis", "\n", "# import utils.vis_util as vis_util", "\n", "# from mpl_toolkits.mplot3d import Axes3D", "\n", "# ax = plt.subplot(111, projection='3d')", "\n", "# vis_util.draw_skeleton_smpl(ax, self.p3d[0][0], parents=parents[:22])", "\n", "\n", "if", "split", "==", "2", ":", "\n", "# valid_frames = np.arange(0, fn - seq_len + 1, opt.skip_rate_test)", "\n", "# valid_frames = np.arange(0, fn - seq_len + 1, 2)", "\n", "                        ", "valid_frames", "=", "np", ".", "arange", "(", "0", ",", "fn", "-", "seq_len", "+", "1", ")", "\n", "", "else", ":", "\n", "                        ", "valid_frames", "=", "np", ".", "arange", "(", "0", ",", "fn", "-", "seq_len", "+", "1", ",", "opt", ".", "skip_rate", ")", "\n", "\n", "# tmp_data_idx_1 = [(ds, sub, act)] * len(valid_frames)", "\n", "", "tmp_data_idx_1", "=", "[", "n", "]", "*", "len", "(", "valid_frames", ")", "\n", "tmp_data_idx_2", "=", "list", "(", "valid_frames", ")", "\n", "self", ".", "data_idx", ".", "extend", "(", "zip", "(", "tmp_data_idx_1", ",", "tmp_data_idx_2", ")", ")", "\n", "n", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.dpw3d.Datasets.__len__": [[114, 116], ["numpy.shape"], "methods", ["None"], ["", "", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "shape", "(", "self", ".", "data_idx", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.dpw3d.Datasets.__getitem__": [[117, 121], ["numpy.arange"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "key", ",", "start_frame", "=", "self", ".", "data_idx", "[", "item", "]", "\n", "fs", "=", "np", ".", "arange", "(", "start_frame", ",", "start_frame", "+", "self", ".", "in_n", "+", "self", ".", "out_n", ")", "\n", "return", "self", ".", "p3d", "[", "key", "]", "[", "fs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.amass3d.Datasets.__init__": [[14, 119], ["numpy.arange", "numpy.load", "torch.from_numpy().float().cuda", "range", "len", "print", "os.listdir", "torch.from_numpy().float", "os.path.isdir", "print", "os.listdir", "os.path.isdir", "numpy.load", "int", "range", "len", "torch.from_numpy().float().cuda", "poses.reshape.reshape.reshape", "torch.from_numpy().float().cuda.repeat", "utils.ang2joint.ang2joint", "amass3d.Datasets.p3d.append", "amass3d.Datasets.keys.append", "list", "amass3d.Datasets.data_idx.extend", "torch.from_numpy", "act.endswith", "utils.ang2joint.ang2joint.cpu().data.numpy", "numpy.arange", "numpy.arange", "len", "zip", "print", "torch.from_numpy().float", "torch.from_numpy", "utils.ang2joint.ang2joint.cpu"], "methods", ["home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.ang2joint.ang2joint"], ["    ", "def", "__init__", "(", "self", ",", "opt", ",", "actions", "=", "None", ",", "split", "=", "0", ")", ":", "\n", "        ", "\"\"\"\n        :param path_to_data:\n        :param actions:\n        :param input_n:\n        :param output_n:\n        :param dct_used:\n        :param split: 0 train, 1 testing, 2 validation\n        :param sample_rate:\n        \"\"\"", "\n", "self", ".", "path_to_data", "=", "\"./datasets/amass/\"", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "in_n", "=", "opt", ".", "input_n", "\n", "self", ".", "out_n", "=", "opt", ".", "output_n", "\n", "# self.sample_rate = opt.sample_rate", "\n", "self", ".", "p3d", "=", "[", "]", "\n", "self", ".", "keys", "=", "[", "]", "\n", "self", ".", "data_idx", "=", "[", "]", "\n", "self", ".", "joint_used", "=", "np", ".", "arange", "(", "4", ",", "22", ")", "\n", "seq_len", "=", "self", ".", "in_n", "+", "self", ".", "out_n", "\n", "\n", "amass_splits", "=", "[", "\n", "[", "'CMU'", ",", "'MPI_Limits'", ",", "'TotalCapture'", ",", "'Eyes_Japan_Dataset'", ",", "'KIT'", ",", "'EKUT'", ",", "'TCD_handMocap'", ",", "'ACCAD'", "]", ",", "\n", "[", "'HumanEva'", ",", "'MPI_HDM05'", ",", "'SFU'", ",", "'MPI_mosh'", "]", ",", "\n", "[", "'BioMotionLab_NTroje'", "]", ",", "\n", "]", "\n", "# amass_splits = [['BioMotionLab_NTroje'], ['HumanEva'], ['SSM_synced']]", "\n", "# amass_splits = [['HumanEva'], ['HumanEva'], ['HumanEva']]", "\n", "# amass_splits[0] = list(", "\n", "#     set(amass_splits[0]).difference(set(amass_splits[1] + amass_splits[2])))", "\n", "\n", "# from human_body_prior.body_model.body_model import BodyModel", "\n", "# from smplx import lbs", "\n", "# root_path = os.path.dirname(__file__)", "\n", "# bm_path = root_path[:-6] + '/body_models/smplh/neutral/model.npz'", "\n", "# bm = BodyModel(bm_path=bm_path, num_betas=16, batch_size=1, model_type='smplh')", "\n", "# beta_mean = np.array([0.41771687, 0.25984767, 0.20500051, 0.13503872, 0.25965645, -2.10198147, -0.11915666,", "\n", "#                       -0.5498772, 0.30885323, 1.4813145, -0.60987528, 1.42565269, 2.45862726, 0.23001716,", "\n", "#                       -0.64180912, 0.30231911])", "\n", "# beta_mean = torch.from_numpy(beta_mean).unsqueeze(0).float()", "\n", "# # Add shape contribution", "\n", "# v_shaped = bm.v_template + lbs.blend_shapes(beta_mean, bm.shapedirs)", "\n", "# # Get the joints", "\n", "# # NxJx3 array", "\n", "# p3d0 = lbs.vertices2joints(bm.J_regressor, v_shaped)  # [1,52,3]", "\n", "# p3d0 = (p3d0 - p3d0[:, 0:1, :]).float().cuda().cpu().data.numpy()", "\n", "# parents = bm.kintree_table.data.numpy()[0, :]", "\n", "# np.savez_compressed('smpl_skeleton.npz', p3d0=p3d0, parents=parents)", "\n", "\n", "# load mean skeleton", "\n", "skel", "=", "np", ".", "load", "(", "'./body_models/smpl_skeleton.npz'", ")", "\n", "p3d0", "=", "torch", ".", "from_numpy", "(", "skel", "[", "'p3d0'", "]", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "parents", "=", "skel", "[", "'parents'", "]", "\n", "parent", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "len", "(", "parents", ")", ")", ":", "\n", "            ", "parent", "[", "i", "]", "=", "parents", "[", "i", "]", "\n", "", "n", "=", "0", "\n", "for", "ds", "in", "amass_splits", "[", "split", "]", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "isdir", "(", "self", ".", "path_to_data", "+", "ds", ")", ":", "\n", "                ", "print", "(", "ds", ")", "\n", "continue", "\n", "", "print", "(", "'>>> loading {}'", ".", "format", "(", "ds", ")", ")", "\n", "for", "sub", "in", "os", ".", "listdir", "(", "self", ".", "path_to_data", "+", "ds", ")", ":", "\n", "                ", "if", "not", "os", ".", "path", ".", "isdir", "(", "self", ".", "path_to_data", "+", "ds", "+", "'/'", "+", "sub", ")", ":", "\n", "                    ", "continue", "\n", "", "for", "act", "in", "os", ".", "listdir", "(", "self", ".", "path_to_data", "+", "ds", "+", "'/'", "+", "sub", ")", ":", "\n", "                    ", "if", "not", "act", ".", "endswith", "(", "'.npz'", ")", ":", "\n", "                        ", "continue", "\n", "# if not ('walk' in act or 'jog' in act or 'run' in act or 'treadmill' in act):", "\n", "#     continue", "\n", "", "pose_all", "=", "np", ".", "load", "(", "self", ".", "path_to_data", "+", "ds", "+", "'/'", "+", "sub", "+", "'/'", "+", "act", ")", "\n", "try", ":", "\n", "                        ", "poses", "=", "pose_all", "[", "'poses'", "]", "\n", "", "except", ":", "\n", "                        ", "print", "(", "'no poses at {}_{}_{}'", ".", "format", "(", "ds", ",", "sub", ",", "act", ")", ")", "\n", "continue", "\n", "", "frame_rate", "=", "pose_all", "[", "'mocap_framerate'", "]", "\n", "# gender = pose_all['gender']", "\n", "# dmpls = pose_all['dmpls']", "\n", "# betas = pose_all['betas']", "\n", "# trans = pose_all['trans']", "\n", "fn", "=", "poses", ".", "shape", "[", "0", "]", "\n", "sample_rate", "=", "int", "(", "frame_rate", "//", "25", ")", "\n", "fidxs", "=", "range", "(", "0", ",", "fn", ",", "sample_rate", ")", "\n", "fn", "=", "len", "(", "fidxs", ")", "\n", "poses", "=", "poses", "[", "fidxs", "]", "\n", "poses", "=", "torch", ".", "from_numpy", "(", "poses", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "poses", "=", "poses", ".", "reshape", "(", "[", "fn", ",", "-", "1", ",", "3", "]", ")", "\n", "# remove global rotation", "\n", "poses", "[", ":", ",", "0", "]", "=", "0", "\n", "p3d0_tmp", "=", "p3d0", ".", "repeat", "(", "[", "fn", ",", "1", ",", "1", "]", ")", "\n", "p3d", "=", "ang2joint", ".", "ang2joint", "(", "p3d0_tmp", ",", "poses", ",", "parent", ")", "\n", "# self.p3d[(ds, sub, act)] = p3d.cpu().data.numpy()", "\n", "self", ".", "p3d", ".", "append", "(", "p3d", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ")", "\n", "if", "split", "==", "2", ":", "\n", "                        ", "valid_frames", "=", "np", ".", "arange", "(", "0", ",", "fn", "-", "seq_len", "+", "1", ",", "opt", ".", "skip_rate", ")", "\n", "", "else", ":", "\n", "                        ", "valid_frames", "=", "np", ".", "arange", "(", "0", ",", "fn", "-", "seq_len", "+", "1", ",", "opt", ".", "skip_rate", ")", "\n", "\n", "# tmp_data_idx_1 = [(ds, sub, act)] * len(valid_frames)", "\n", "", "self", ".", "keys", ".", "append", "(", "(", "ds", ",", "sub", ",", "act", ")", ")", "\n", "tmp_data_idx_1", "=", "[", "n", "]", "*", "len", "(", "valid_frames", ")", "\n", "tmp_data_idx_2", "=", "list", "(", "valid_frames", ")", "\n", "self", ".", "data_idx", ".", "extend", "(", "zip", "(", "tmp_data_idx_1", ",", "tmp_data_idx_2", ")", ")", "\n", "n", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.amass3d.Datasets.__len__": [[120, 122], ["numpy.shape"], "methods", ["None"], ["", "", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "shape", "(", "self", ".", "data_idx", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.amass3d.Datasets.__getitem__": [[123, 127], ["numpy.arange"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "key", ",", "start_frame", "=", "self", ".", "data_idx", "[", "item", "]", "\n", "fs", "=", "np", ".", "arange", "(", "start_frame", ",", "start_frame", "+", "self", ".", "in_n", "+", "self", ".", "out_n", ")", "\n", "return", "self", ".", "p3d", "[", "key", "]", "[", "fs", "]", "# , key", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.log.save_csv_log": [[12, 22], ["pandas.DataFrame", "len", "numpy.expand_dims", "pd.DataFrame.to_csv", "os.path.exists", "open", "pd.DataFrame.to_csv"], "function", ["None"], ["def", "save_csv_log", "(", "opt", ",", "head", ",", "value", ",", "is_create", "=", "False", ",", "file_name", "=", "'test'", ")", ":", "\n", "    ", "if", "len", "(", "value", ".", "shape", ")", "<", "2", ":", "\n", "        ", "value", "=", "np", ".", "expand_dims", "(", "value", ",", "axis", "=", "0", ")", "\n", "", "df", "=", "pd", ".", "DataFrame", "(", "value", ")", "\n", "file_path", "=", "opt", ".", "ckpt", "+", "'/{}.csv'", ".", "format", "(", "file_name", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "file_path", ")", "or", "is_create", ":", "\n", "        ", "df", ".", "to_csv", "(", "file_path", ",", "header", "=", "head", ",", "index", "=", "False", ")", "\n", "", "else", ":", "\n", "        ", "with", "open", "(", "file_path", ",", "'a'", ")", "as", "f", ":", "\n", "            ", "df", ".", "to_csv", "(", "f", ",", "header", "=", "False", ",", "index", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.log.save_ckpt": [[24, 30], ["os.path.join", "torch.save", "os.path.join", "torch.save"], "function", ["None"], ["", "", "", "def", "save_ckpt", "(", "state", ",", "is_best", "=", "True", ",", "file_name", "=", "[", "'ckpt_best.pth.tar'", ",", "'ckpt_last.pth.tar'", "]", ",", "opt", "=", "None", ")", ":", "\n", "    ", "file_path", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "ckpt", ",", "file_name", "[", "1", "]", ")", "\n", "torch", ".", "save", "(", "state", ",", "file_path", ")", "\n", "if", "is_best", ":", "\n", "        ", "file_path", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "ckpt", ",", "file_name", "[", "0", "]", ")", "\n", "torch", ".", "save", "(", "state", ",", "file_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.log.save_options": [[32, 35], ["open", "f.write", "json.dumps", "vars"], "function", ["None"], ["", "", "def", "save_options", "(", "opt", ")", ":", "\n", "    ", "with", "open", "(", "opt", ".", "ckpt", "+", "'/option.json'", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "json", ".", "dumps", "(", "vars", "(", "opt", ")", ",", "sort_keys", "=", "False", ",", "indent", "=", "4", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.h36motion3d.Datasets.__init__": [[12, 129], ["numpy.array", "numpy.array", "numpy.concatenate", "numpy.setdiff1d", "numpy.arange", "numpy.arange", "len", "print", "utils.data_utils.readCSVasFloat", "range", "len", "numpy.array", "torch.from_numpy().float().cuda", "utils.data_utils.expmap2xyz_torch", "utils.data_utils.expmap2xyz_torch.view().cpu().data.numpy", "print", "utils.data_utils.readCSVasFloat", "range", "len", "numpy.array", "torch.from_numpy().float().cuda", "utils.data_utils.expmap2xyz_torch", "utils.data_utils.expmap2xyz_torch.view().cpu().data.numpy", "utils.data_utils.find_indices_256", "list", "h36motion3d.Datasets.data_idx.extend", "list", "h36motion3d.Datasets.data_idx.extend", "print", "utils.data_utils.readCSVasFloat", "range", "len", "numpy.array", "torch.from_numpy().float().cuda", "utils.data_utils.expmap2xyz_torch", "utils.data_utils.expmap2xyz_torch.view().cpu().data.numpy", "numpy.arange", "list", "h36motion3d.Datasets.data_idx.extend", "len", "zip", "len", "zip", "len", "zip", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "utils.data_utils.expmap2xyz_torch.view().cpu", "utils.data_utils.expmap2xyz_torch.view().cpu", "utils.data_utils.expmap2xyz_torch.view().cpu", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "utils.data_utils.expmap2xyz_torch.view", "utils.data_utils.expmap2xyz_torch.view", "utils.data_utils.expmap2xyz_torch.view"], "methods", ["home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.data_utils.readCSVasFloat", "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.data_utils.expmap2xyz_torch", "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.data_utils.readCSVasFloat", "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.data_utils.expmap2xyz_torch", "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.data_utils.find_indices_256", "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.data_utils.readCSVasFloat", "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.data_utils.expmap2xyz_torch"], ["    ", "def", "__init__", "(", "self", ",", "opt", ",", "actions", "=", "None", ",", "split", "=", "0", ")", ":", "\n", "        ", "\"\"\"\n        :param path_to_data:\n        :param actions:\n        :param input_n:\n        :param output_n:\n        :param dct_used:\n        :param split: 0 train, 1 testing, 2 validation\n        :param sample_rate:\n        \"\"\"", "\n", "self", ".", "path_to_data", "=", "\"./datasets/h3.6m/\"", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "in_n", "=", "opt", ".", "input_n", "\n", "self", ".", "out_n", "=", "opt", ".", "output_n", "\n", "self", ".", "sample_rate", "=", "2", "\n", "self", ".", "p3d", "=", "{", "}", "\n", "self", ".", "data_idx", "=", "[", "]", "\n", "seq_len", "=", "self", ".", "in_n", "+", "self", ".", "out_n", "\n", "subs", "=", "np", ".", "array", "(", "[", "[", "1", ",", "6", ",", "7", ",", "8", ",", "9", "]", ",", "[", "11", "]", ",", "[", "5", "]", "]", ")", "\n", "# acts = data_utils.define_actions(actions)", "\n", "if", "actions", "is", "None", ":", "\n", "            ", "acts", "=", "[", "\"walking\"", ",", "\"eating\"", ",", "\"smoking\"", ",", "\"discussion\"", ",", "\"directions\"", ",", "\n", "\"greeting\"", ",", "\"phoning\"", ",", "\"posing\"", ",", "\"purchases\"", ",", "\"sitting\"", ",", "\n", "\"sittingdown\"", ",", "\"takingphoto\"", ",", "\"waiting\"", ",", "\"walkingdog\"", ",", "\n", "\"walkingtogether\"", "]", "\n", "", "else", ":", "\n", "            ", "acts", "=", "actions", "\n", "# subs = np.array([[1], [11], [5]])", "\n", "# acts = ['walking']", "\n", "# 32 human3.6 joint name:", "\n", "", "joint_name", "=", "[", "\"Hips\"", ",", "\"RightUpLeg\"", ",", "\"RightLeg\"", ",", "\"RightFoot\"", ",", "\"RightToeBase\"", ",", "\"Site\"", ",", "\"LeftUpLeg\"", ",", "\"LeftLeg\"", ",", "\n", "\"LeftFoot\"", ",", "\n", "\"LeftToeBase\"", ",", "\"Site\"", ",", "\"Spine\"", ",", "\"Spine1\"", ",", "\"Neck\"", ",", "\"Head\"", ",", "\"Site\"", ",", "\"LeftShoulder\"", ",", "\"LeftArm\"", ",", "\n", "\"LeftForeArm\"", ",", "\n", "\"LeftHand\"", ",", "\"LeftHandThumb\"", ",", "\"Site\"", ",", "\"L_Wrist_End\"", ",", "\"Site\"", ",", "\"RightShoulder\"", ",", "\"RightArm\"", ",", "\n", "\"RightForeArm\"", ",", "\n", "\"RightHand\"", ",", "\"RightHandThumb\"", ",", "\"Site\"", ",", "\"R_Wrist_End\"", ",", "\"Site\"", "]", "\n", "\n", "subs", "=", "subs", "[", "split", "]", "\n", "key", "=", "0", "\n", "for", "subj", "in", "subs", ":", "\n", "            ", "for", "action_idx", "in", "np", ".", "arange", "(", "len", "(", "acts", ")", ")", ":", "\n", "                ", "action", "=", "acts", "[", "action_idx", "]", "\n", "if", "self", ".", "split", "<=", "1", ":", "\n", "                    ", "for", "subact", "in", "[", "1", ",", "2", "]", ":", "# subactions", "\n", "                        ", "print", "(", "\"Reading subject {0}, action {1}, subaction {2}\"", ".", "format", "(", "subj", ",", "action", ",", "subact", ")", ")", "\n", "filename", "=", "'{0}/S{1}/{2}_{3}.txt'", ".", "format", "(", "self", ".", "path_to_data", ",", "subj", ",", "action", ",", "subact", ")", "\n", "the_sequence", "=", "data_utils", ".", "readCSVasFloat", "(", "filename", ")", "\n", "n", ",", "d", "=", "the_sequence", ".", "shape", "\n", "even_list", "=", "range", "(", "0", ",", "n", ",", "self", ".", "sample_rate", ")", "\n", "num_frames", "=", "len", "(", "even_list", ")", "\n", "the_sequence", "=", "np", ".", "array", "(", "the_sequence", "[", "even_list", ",", ":", "]", ")", "\n", "the_sequence", "=", "torch", ".", "from_numpy", "(", "the_sequence", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "# remove global rotation and translation", "\n", "the_sequence", "[", ":", ",", "0", ":", "6", "]", "=", "0", "\n", "p3d", "=", "data_utils", ".", "expmap2xyz_torch", "(", "the_sequence", ")", "\n", "# self.p3d[(subj, action, subact)] = p3d.view(num_frames, -1).cpu().data.numpy()", "\n", "self", ".", "p3d", "[", "key", "]", "=", "p3d", ".", "view", "(", "num_frames", ",", "-", "1", ")", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "\n", "valid_frames", "=", "np", ".", "arange", "(", "0", ",", "num_frames", "-", "seq_len", "+", "1", ",", "opt", ".", "skip_rate", ")", "\n", "\n", "# tmp_data_idx_1 = [(subj, action, subact)] * len(valid_frames)", "\n", "tmp_data_idx_1", "=", "[", "key", "]", "*", "len", "(", "valid_frames", ")", "\n", "tmp_data_idx_2", "=", "list", "(", "valid_frames", ")", "\n", "self", ".", "data_idx", ".", "extend", "(", "zip", "(", "tmp_data_idx_1", ",", "tmp_data_idx_2", ")", ")", "\n", "key", "+=", "1", "\n", "", "", "else", ":", "\n", "                    ", "print", "(", "\"Reading subject {0}, action {1}, subaction {2}\"", ".", "format", "(", "subj", ",", "action", ",", "1", ")", ")", "\n", "filename", "=", "'{0}/S{1}/{2}_{3}.txt'", ".", "format", "(", "self", ".", "path_to_data", ",", "subj", ",", "action", ",", "1", ")", "\n", "the_sequence1", "=", "data_utils", ".", "readCSVasFloat", "(", "filename", ")", "\n", "n", ",", "d", "=", "the_sequence1", ".", "shape", "\n", "even_list", "=", "range", "(", "0", ",", "n", ",", "self", ".", "sample_rate", ")", "\n", "\n", "num_frames1", "=", "len", "(", "even_list", ")", "\n", "the_sequence1", "=", "np", ".", "array", "(", "the_sequence1", "[", "even_list", ",", ":", "]", ")", "\n", "the_seq1", "=", "torch", ".", "from_numpy", "(", "the_sequence1", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "the_seq1", "[", ":", ",", "0", ":", "6", "]", "=", "0", "\n", "p3d1", "=", "data_utils", ".", "expmap2xyz_torch", "(", "the_seq1", ")", "\n", "# self.p3d[(subj, action, 1)] = p3d1.view(num_frames1, -1).cpu().data.numpy()", "\n", "self", ".", "p3d", "[", "key", "]", "=", "p3d1", ".", "view", "(", "num_frames1", ",", "-", "1", ")", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "\n", "print", "(", "\"Reading subject {0}, action {1}, subaction {2}\"", ".", "format", "(", "subj", ",", "action", ",", "2", ")", ")", "\n", "filename", "=", "'{0}/S{1}/{2}_{3}.txt'", ".", "format", "(", "self", ".", "path_to_data", ",", "subj", ",", "action", ",", "2", ")", "\n", "the_sequence2", "=", "data_utils", ".", "readCSVasFloat", "(", "filename", ")", "\n", "n", ",", "d", "=", "the_sequence2", ".", "shape", "\n", "even_list", "=", "range", "(", "0", ",", "n", ",", "self", ".", "sample_rate", ")", "\n", "\n", "num_frames2", "=", "len", "(", "even_list", ")", "\n", "the_sequence2", "=", "np", ".", "array", "(", "the_sequence2", "[", "even_list", ",", ":", "]", ")", "\n", "the_seq2", "=", "torch", ".", "from_numpy", "(", "the_sequence2", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "the_seq2", "[", ":", ",", "0", ":", "6", "]", "=", "0", "\n", "p3d2", "=", "data_utils", ".", "expmap2xyz_torch", "(", "the_seq2", ")", "\n", "\n", "# self.p3d[(subj, action, 2)] = p3d2.view(num_frames2, -1).cpu().data.numpy()", "\n", "self", ".", "p3d", "[", "key", "+", "1", "]", "=", "p3d2", ".", "view", "(", "num_frames2", ",", "-", "1", ")", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "\n", "# print(\"action:{}\".format(action))", "\n", "# print(\"subact1:{}\".format(num_frames1))", "\n", "# print(\"subact2:{}\".format(num_frames2))", "\n", "fs_sel1", ",", "fs_sel2", "=", "data_utils", ".", "find_indices_256", "(", "num_frames1", ",", "num_frames2", ",", "seq_len", ",", "\n", "input_n", "=", "self", ".", "in_n", ")", "\n", "\n", "valid_frames", "=", "fs_sel1", "[", ":", ",", "0", "]", "\n", "tmp_data_idx_1", "=", "[", "key", "]", "*", "len", "(", "valid_frames", ")", "\n", "tmp_data_idx_2", "=", "list", "(", "valid_frames", ")", "\n", "self", ".", "data_idx", ".", "extend", "(", "zip", "(", "tmp_data_idx_1", ",", "tmp_data_idx_2", ")", ")", "\n", "\n", "valid_frames", "=", "fs_sel2", "[", ":", ",", "0", "]", "\n", "tmp_data_idx_1", "=", "[", "key", "+", "1", "]", "*", "len", "(", "valid_frames", ")", "\n", "tmp_data_idx_2", "=", "list", "(", "valid_frames", ")", "\n", "self", ".", "data_idx", ".", "extend", "(", "zip", "(", "tmp_data_idx_1", ",", "tmp_data_idx_2", ")", ")", "\n", "key", "+=", "2", "\n", "\n", "# ignore constant joints and joints at same position with other joints", "\n", "", "", "", "joint_to_ignore", "=", "np", ".", "array", "(", "[", "0", ",", "1", ",", "6", ",", "11", ",", "16", ",", "20", ",", "23", ",", "24", ",", "28", ",", "31", "]", ")", "\n", "dimensions_to_ignore", "=", "np", ".", "concatenate", "(", "(", "joint_to_ignore", "*", "3", ",", "joint_to_ignore", "*", "3", "+", "1", ",", "joint_to_ignore", "*", "3", "+", "2", ")", ")", "\n", "self", ".", "dimensions_to_use", "=", "np", ".", "setdiff1d", "(", "np", ".", "arange", "(", "96", ")", ",", "dimensions_to_ignore", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.h36motion3d.Datasets.__len__": [[130, 132], ["numpy.shape"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "shape", "(", "self", ".", "data_idx", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.h36motion3d.Datasets.__getitem__": [[133, 137], ["numpy.arange"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "key", ",", "start_frame", "=", "self", ".", "data_idx", "[", "item", "]", "\n", "fs", "=", "np", ".", "arange", "(", "start_frame", ",", "start_frame", "+", "self", ".", "in_n", "+", "self", ".", "out_n", ")", "\n", "return", "self", ".", "p3d", "[", "key", "]", "[", "fs", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.ang2joint.ang2joint": [[4, 53], ["len", "rodrigues().reshape", "results.append", "range", "torch.stack", "parent.keys", "ang2joint.with_zeros", "results.append", "ang2joint.rodrigues", "torch.cat", "torch.matmul", "pose.contiguous().view", "ang2joint.with_zeros", "torch.reshape", "torch.cat", "pose.contiguous", "torch.reshape"], "function", ["home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.ang2joint.with_zeros", "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.ang2joint.rodrigues", "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.ang2joint.with_zeros"], ["def", "ang2joint", "(", "p3d0", ",", "pose", ",", "\n", "parent", "=", "{", "0", ":", "-", "1", ",", "1", ":", "0", ",", "2", ":", "0", ",", "3", ":", "0", ",", "4", ":", "1", ",", "5", ":", "2", ",", "6", ":", "3", ",", "7", ":", "4", ",", "8", ":", "5", ",", "9", ":", "6", ",", "10", ":", "7", ",", "11", ":", "8", ",", "12", ":", "9", ",", "13", ":", "9", ",", "14", ":", "9", ",", "\n", "15", ":", "12", ",", "16", ":", "13", ",", "17", ":", "14", ",", "18", ":", "16", ",", "19", ":", "17", ",", "20", ":", "18", ",", "21", ":", "19", ",", "22", ":", "20", ",", "23", ":", "21", "}", ")", ":", "\n", "    ", "\"\"\"\n\n    :param p3d0:[batch_size, joint_num, 3]\n    :param pose:[batch_size, joint_num, 3]\n    :param parent:\n    :return:\n    \"\"\"", "\n", "# model_path = './model.npz'", "\n", "# params = np.load(model_path, allow_pickle=True)", "\n", "# kintree_table = params['kintree_table']", "\n", "batch_num", "=", "p3d0", ".", "shape", "[", "0", "]", "\n", "# id_to_col = {kintree_table[1, i]: i", "\n", "#              for i in range(kintree_table.shape[1])}", "\n", "# parent = {", "\n", "#     i: id_to_col[kintree_table[0, i]]", "\n", "#     for i in range(1, kintree_table.shape[1])", "\n", "# }", "\n", "# parent = {1: 0, 2: 0, 3: 0, 4: 1, 5: 2, 6: 3, 7: 4, 8: 5, 9: 6, 10: 7, 11: 8, 12: 9, 13: 9, 14: 9, 15: 12, 16: 13,", "\n", "#           17: 14, 18: 16, 19: 17, 20: 18, 21: 19, 22: 20, 23: 21}", "\n", "jnum", "=", "len", "(", "parent", ".", "keys", "(", ")", ")", "\n", "# v_shaped = torch.tensordot(betas, self.shapedirs, dims=([1], [2])) + self.v_template", "\n", "# J = torch.matmul(self.J_regressor, v_shaped)", "\n", "# face_J = v_shaped[:, [333, 2801, 6261], :]", "\n", "J", "=", "p3d0", "\n", "R_cube_big", "=", "rodrigues", "(", "pose", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "1", ",", "3", ")", ")", ".", "reshape", "(", "batch_num", ",", "-", "1", ",", "3", ",", "3", ")", "\n", "results", "=", "[", "]", "\n", "results", ".", "append", "(", "\n", "with_zeros", "(", "torch", ".", "cat", "(", "(", "R_cube_big", "[", ":", ",", "0", "]", ",", "torch", ".", "reshape", "(", "J", "[", ":", ",", "0", ",", ":", "]", ",", "(", "-", "1", ",", "3", ",", "1", ")", ")", ")", ",", "dim", "=", "2", ")", ")", "\n", ")", "\n", "# for i in range(1, kintree_table.shape[1]):", "\n", "for", "i", "in", "range", "(", "1", ",", "jnum", ")", ":", "\n", "        ", "results", ".", "append", "(", "\n", "torch", ".", "matmul", "(", "\n", "results", "[", "parent", "[", "i", "]", "]", ",", "\n", "with_zeros", "(", "\n", "torch", ".", "cat", "(", "\n", "(", "R_cube_big", "[", ":", ",", "i", "]", ",", "torch", ".", "reshape", "(", "J", "[", ":", ",", "i", ",", ":", "]", "-", "J", "[", ":", ",", "parent", "[", "i", "]", ",", ":", "]", ",", "(", "-", "1", ",", "3", ",", "1", ")", ")", ")", ",", "\n", "dim", "=", "2", "\n", ")", "\n", ")", "\n", ")", "\n", ")", "\n", "\n", "", "stacked", "=", "torch", ".", "stack", "(", "results", ",", "dim", "=", "1", ")", "\n", "J_transformed", "=", "stacked", "[", ":", ",", ":", ",", ":", "3", ",", "3", "]", "\n", "return", "J_transformed", "\n", "\n"]], "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.ang2joint.rodrigues": [[55, 86], ["r.clone().normal_", "torch.norm", "torch.cos", "torch.zeros().to", "torch.stack", "torch.reshape", "r_hat.permute", "torch.matmul", "r.clone", "torch.zeros", "torch.sin", "torch.eye().unsqueeze", "torch.zeros", "torch.eye"], "function", ["None"], ["", "def", "rodrigues", "(", "r", ")", ":", "\n", "    ", "\"\"\"\n    Rodrigues' rotation formula that turns axis-angle tensor into rotation\n    matrix in a batch-ed manner.\n\n    Parameter:\n    ----------\n    r: Axis-angle rotation tensor of shape [batch_size * angle_num, 1, 3].\n\n    Return:\n    -------\n    Rotation matrix of shape [batch_size * angle_num, 3, 3].\n\n    \"\"\"", "\n", "eps", "=", "r", ".", "clone", "(", ")", ".", "normal_", "(", "std", "=", "1e-8", ")", "\n", "theta", "=", "torch", ".", "norm", "(", "r", "+", "eps", ",", "dim", "=", "(", "1", ",", "2", ")", ",", "keepdim", "=", "True", ")", "\n", "# theta = torch.norm(r, dim=(1, 2), keepdim=True)  # dim cannot be tuple", "\n", "theta_dim", "=", "theta", ".", "shape", "[", "0", "]", "\n", "r_hat", "=", "r", "/", "theta", "\n", "cos", "=", "torch", ".", "cos", "(", "theta", ")", "\n", "z_stick", "=", "torch", ".", "zeros", "(", "theta_dim", ",", "dtype", "=", "torch", ".", "float", ")", ".", "to", "(", "r", ".", "device", ")", "\n", "m", "=", "torch", ".", "stack", "(", "\n", "(", "z_stick", ",", "-", "r_hat", "[", ":", ",", "0", ",", "2", "]", ",", "r_hat", "[", ":", ",", "0", ",", "1", "]", ",", "r_hat", "[", ":", ",", "0", ",", "2", "]", ",", "z_stick", ",", "\n", "-", "r_hat", "[", ":", ",", "0", ",", "0", "]", ",", "-", "r_hat", "[", ":", ",", "0", ",", "1", "]", ",", "r_hat", "[", ":", ",", "0", ",", "0", "]", ",", "z_stick", ")", ",", "dim", "=", "1", ")", "\n", "m", "=", "torch", ".", "reshape", "(", "m", ",", "(", "-", "1", ",", "3", ",", "3", ")", ")", "\n", "i_cube", "=", "(", "torch", ".", "eye", "(", "3", ",", "dtype", "=", "torch", ".", "float", ")", ".", "unsqueeze", "(", "dim", "=", "0", ")", "+", "torch", ".", "zeros", "(", "(", "theta_dim", ",", "3", ",", "3", ")", ",", "dtype", "=", "torch", ".", "float", ")", ")", ".", "to", "(", "r", ".", "device", ")", "\n", "A", "=", "r_hat", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "dot", "=", "torch", ".", "matmul", "(", "A", ",", "r_hat", ")", "\n", "R", "=", "cos", "*", "i_cube", "+", "(", "1", "-", "cos", ")", "*", "dot", "+", "torch", ".", "sin", "(", "theta", ")", "*", "m", "\n", "return", "R", "\n", "\n"]], "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.ang2joint.with_zeros": [[88, 106], ["torch.tensor().expand().to", "torch.cat", "torch.tensor().expand", "torch.tensor"], "function", ["None"], ["", "def", "with_zeros", "(", "x", ")", ":", "\n", "    ", "\"\"\"\n    Append a [0, 0, 0, 1] tensor to a [3, 4] tensor.\n\n    Parameter:\n    ---------\n    x: Tensor to be appended.\n\n    Return:\n    ------\n    Tensor after appending of shape [4,4]\n\n    \"\"\"", "\n", "ones", "=", "torch", ".", "tensor", "(", "\n", "[", "[", "[", "0.0", ",", "0.0", ",", "0.0", ",", "1.0", "]", "]", "]", ",", "dtype", "=", "torch", ".", "float", "\n", ")", ".", "expand", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ",", "-", "1", ")", ".", "to", "(", "x", ".", "device", ")", "\n", "ret", "=", "torch", ".", "cat", "(", "(", "x", ",", "ones", ")", ",", "dim", "=", "1", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.ang2joint.pack": [[108, 125], ["torch.zeros().to", "torch.cat", "torch.zeros"], "function", ["None"], ["", "def", "pack", "(", "x", ")", ":", "\n", "    ", "\"\"\"\n    Append zero tensors of shape [4, 3] to a batch of [4, 1] shape tensor.\n\n    Parameter:\n    ----------\n    x: A tensor of shape [batch_size, 4, 1]\n\n    Return:\n    ------\n    A tensor of shape [batch_size, 4, 4] after appending.\n\n    \"\"\"", "\n", "zeros43", "=", "torch", ".", "zeros", "(", "\n", "(", "x", ".", "shape", "[", "0", "]", ",", "x", ".", "shape", "[", "1", "]", ",", "4", ",", "3", ")", ",", "dtype", "=", "torch", ".", "float", ")", ".", "to", "(", "x", ".", "device", ")", "\n", "ret", "=", "torch", ".", "cat", "(", "(", "zeros43", ",", "x", ")", ",", "dim", "=", "3", ")", "\n", "return", "ret", "\n", "", ""]], "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.util.lr_decay_mine": [[5, 10], ["None"], "function", ["None"], ["def", "lr_decay_mine", "(", "optimizer", ",", "lr_now", ",", "gamma", ")", ":", "\n", "    ", "lr", "=", "lr_now", "*", "gamma", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "", "return", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.util.orth_project": [[12, 23], ["cam[].unsqueeze().repeat", "cam[].unsqueeze().repeat", "torch.mul", "cam[].unsqueeze", "cam[].unsqueeze"], "function", ["None"], ["", "def", "orth_project", "(", "cam", ",", "pts", ")", ":", "\n", "    ", "\"\"\"\n\n    :param cam: b*[s,tx,ty]\n    :param pts: b*k*3\n    :return:\n    \"\"\"", "\n", "s", "=", "cam", "[", ":", ",", "0", ":", "1", "]", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "pts", ".", "shape", "[", "1", "]", ",", "2", ")", "\n", "T", "=", "cam", "[", ":", ",", "1", ":", "]", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "pts", ".", "shape", "[", "1", "]", ",", "1", ")", "\n", "\n", "return", "torch", ".", "mul", "(", "s", ",", "pts", "[", ":", ",", ":", ",", ":", "2", "]", "+", "T", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.util.opt_cam": [[25, 56], ["torch.sum", "torch.inverse", "torch.matmul", "torch.matmul", "torch.clamp", "torch.cat", "torch.ones_like", "torch.sum", "torch.sum", "torch.eye().float().cuda", "xmu.transpose", "mu1.squeeze", "torch.matmul", "eps.unsqueeze", "mu2.squeeze", "torch.eye().float", "xmu.transpose", "torch.eye"], "function", ["None"], ["", "def", "opt_cam", "(", "x", ",", "x_target", ")", ":", "\n", "    ", "\"\"\"\n    :param x: N K 3 or  N K 2\n    :param x_target: N K 3 or  N K 2\n    :return:\n    \"\"\"", "\n", "if", "x_target", ".", "shape", "[", "2", "]", "==", "2", ":", "\n", "        ", "vis", "=", "torch", ".", "ones_like", "(", "x_target", "[", ":", ",", ":", ",", ":", "1", "]", ")", "\n", "", "else", ":", "\n", "        ", "vis", "=", "(", "x_target", "[", ":", ",", ":", ",", ":", "1", "]", ">", "0", ")", ".", "float", "(", ")", "\n", "", "vis", "[", ":", ",", ":", "2", "]", "=", "0", "\n", "xxt", "=", "x_target", "[", ":", ",", ":", ",", ":", "2", "]", "\n", "xx", "=", "x", "[", ":", ",", ":", ",", ":", "2", "]", "\n", "x_vis", "=", "vis", "*", "xx", "\n", "xt_vis", "=", "vis", "*", "xxt", "\n", "num_vis", "=", "torch", ".", "sum", "(", "vis", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "mu1", "=", "torch", ".", "sum", "(", "x_vis", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "/", "num_vis", "\n", "mu2", "=", "torch", ".", "sum", "(", "xt_vis", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "/", "num_vis", "\n", "xmu", "=", "vis", "*", "(", "xx", "-", "mu1", ")", "\n", "xtmu", "=", "vis", "*", "(", "xxt", "-", "mu2", ")", "\n", "\n", "eps", "=", "1e-6", "*", "torch", ".", "eye", "(", "2", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "Ainv", "=", "torch", ".", "inverse", "(", "torch", ".", "matmul", "(", "xmu", ".", "transpose", "(", "1", ",", "2", ")", ",", "xmu", ")", "+", "eps", ".", "unsqueeze", "(", "0", ")", ")", "\n", "B", "=", "torch", ".", "matmul", "(", "xmu", ".", "transpose", "(", "1", ",", "2", ")", ",", "xtmu", ")", "\n", "tmp_s", "=", "torch", ".", "matmul", "(", "Ainv", ",", "B", ")", "\n", "scale", "=", "(", "(", "tmp_s", "[", ":", ",", "0", ",", "0", "]", "+", "tmp_s", "[", ":", ",", "1", ",", "1", "]", ")", "/", "2.0", ")", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "scale", "=", "torch", ".", "clamp", "(", "scale", ",", "0.7", ",", "10", ")", "\n", "trans", "=", "mu2", ".", "squeeze", "(", "1", ")", "/", "scale", "-", "mu1", ".", "squeeze", "(", "1", ")", "\n", "opt_cam", "=", "torch", ".", "cat", "(", "[", "scale", ",", "trans", "]", ",", "dim", "=", "1", ")", "\n", "return", "opt_cam", "\n", "\n"]], "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.util.get_dct_matrix": [[58, 68], ["numpy.eye", "numpy.arange", "numpy.linalg.inv", "numpy.arange", "numpy.sqrt", "numpy.sqrt", "numpy.cos"], "function", ["None"], ["", "def", "get_dct_matrix", "(", "N", ")", ":", "\n", "    ", "dct_m", "=", "np", ".", "eye", "(", "N", ")", "\n", "for", "k", "in", "np", ".", "arange", "(", "N", ")", ":", "\n", "        ", "for", "i", "in", "np", ".", "arange", "(", "N", ")", ":", "\n", "            ", "w", "=", "np", ".", "sqrt", "(", "2", "/", "N", ")", "\n", "if", "k", "==", "0", ":", "\n", "                ", "w", "=", "np", ".", "sqrt", "(", "1", "/", "N", ")", "\n", "", "dct_m", "[", "k", ",", "i", "]", "=", "w", "*", "np", ".", "cos", "(", "np", ".", "pi", "*", "(", "i", "+", "1", "/", "2", ")", "*", "k", "/", "N", ")", "\n", "", "", "idct_m", "=", "np", ".", "linalg", ".", "inv", "(", "dct_m", ")", "\n", "return", "dct_m", ",", "idct_m", "\n", "", ""]], "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.model.AttModel.AttModel.__init__": [[13, 40], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "model.GCN.GCN", "torch.nn.Conv1d", "torch.nn.ReLU", "torch.nn.Conv1d", "torch.nn.ReLU", "torch.nn.Conv1d", "torch.nn.ReLU", "torch.nn.Conv1d", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.model.GCN.GCN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_features", "=", "48", ",", "kernel_size", "=", "5", ",", "d_model", "=", "512", ",", "num_stage", "=", "2", ",", "dct_n", "=", "10", ")", ":", "\n", "        ", "super", "(", "AttModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "d_model", "=", "d_model", "\n", "# self.seq_in = seq_in", "\n", "self", ".", "dct_n", "=", "dct_n", "\n", "# ks = int((kernel_size + 1) / 2)", "\n", "assert", "kernel_size", "==", "10", "\n", "\n", "self", ".", "convQ", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv1d", "(", "in_channels", "=", "in_features", ",", "out_channels", "=", "d_model", ",", "kernel_size", "=", "6", ",", "\n", "bias", "=", "False", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv1d", "(", "in_channels", "=", "d_model", ",", "out_channels", "=", "d_model", ",", "kernel_size", "=", "5", ",", "\n", "bias", "=", "False", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", "\n", "\n", "self", ".", "convK", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv1d", "(", "in_channels", "=", "in_features", ",", "out_channels", "=", "d_model", ",", "kernel_size", "=", "6", ",", "\n", "bias", "=", "False", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv1d", "(", "in_channels", "=", "d_model", ",", "out_channels", "=", "d_model", ",", "kernel_size", "=", "5", ",", "\n", "bias", "=", "False", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", "\n", "\n", "self", ".", "gcn", "=", "GCN", ".", "GCN", "(", "input_feature", "=", "(", "dct_n", ")", "*", "2", ",", "hidden_feature", "=", "d_model", ",", "p_dropout", "=", "0.3", ",", "\n", "num_stage", "=", "num_stage", ",", "\n", "node_n", "=", "in_features", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.model.AttModel.AttModel.forward": [[41, 116], ["src.clone", "[].clone", "[].clone", "utils.get_dct_matrix", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "src_tmp[].clone().reshape", "torch.matmul().reshape().transpose().reshape", "AttModel.AttModel.convK", "range", "torch.cat", "numpy.expand_dims", "numpy.expand_dims", "list", "AttModel.AttModel.convQ", "[].reshape", "torch.matmul().transpose", "torch.cat", "AttModel.AttModel.gcn", "torch.matmul", "torch.cat.append", "torch.from_numpy().float", "torch.from_numpy().float", "numpy.arange", "numpy.arange", "src_tmp[].clone", "torch.matmul().reshape().transpose", "range", "torch.matmul", "torch.sum", "idct_m[].unsqueeze", "dct_out_tmp[].transpose", "torch.matmul.unsqueeze", "torch.cat", "src_tmp[].transpose", "AttModel.AttModel.convK", "torch.cat", "src_tmp[].clone().reshape", "torch.matmul().reshape().transpose().reshape", "torch.cat", "src_tmp[].transpose", "torch.cat.transpose", "torch.cat.transpose", "AttModel.AttModel.transpose", "torch.matmul", "torch.matmul.clone", "numpy.expand_dims", "numpy.expand_dims", "torch.from_numpy", "torch.from_numpy", "torch.matmul().reshape", "torch.matmul", "dct_m[].unsqueeze", "numpy.arange", "numpy.arange", "src_tmp[].clone", "torch.matmul().reshape().transpose", "torch.matmul", "torch.matmul().reshape", "dct_m[].unsqueeze", "torch.matmul", "dct_m[].unsqueeze"], "methods", ["home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.utils.util.get_dct_matrix"], ["", "def", "forward", "(", "self", ",", "src", ",", "output_n", "=", "25", ",", "input_n", "=", "50", ",", "itera", "=", "1", ")", ":", "\n", "        ", "\"\"\"\n\n        :param src: [batch_size,seq_len,feat_dim]\n        :param output_n:\n        :param input_n:\n        :param frame_n:\n        :param dct_n:\n        :param itera:\n        :return:\n        \"\"\"", "\n", "dct_n", "=", "self", ".", "dct_n", "\n", "src", "=", "src", "[", ":", ",", ":", "input_n", "]", "# [bs,in_n,dim]", "\n", "src_tmp", "=", "src", ".", "clone", "(", ")", "\n", "bs", "=", "src", ".", "shape", "[", "0", "]", "\n", "src_key_tmp", "=", "src_tmp", ".", "transpose", "(", "1", ",", "2", ")", "[", ":", ",", ":", ",", ":", "(", "input_n", "-", "output_n", ")", "]", ".", "clone", "(", ")", "\n", "src_query_tmp", "=", "src_tmp", ".", "transpose", "(", "1", ",", "2", ")", "[", ":", ",", ":", ",", "-", "self", ".", "kernel_size", ":", "]", ".", "clone", "(", ")", "\n", "\n", "dct_m", ",", "idct_m", "=", "util", ".", "get_dct_matrix", "(", "self", ".", "kernel_size", "+", "output_n", ")", "\n", "dct_m", "=", "torch", ".", "from_numpy", "(", "dct_m", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "idct_m", "=", "torch", ".", "from_numpy", "(", "idct_m", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "vn", "=", "input_n", "-", "self", ".", "kernel_size", "-", "output_n", "+", "1", "\n", "vl", "=", "self", ".", "kernel_size", "+", "output_n", "\n", "idx", "=", "np", ".", "expand_dims", "(", "np", ".", "arange", "(", "vl", ")", ",", "axis", "=", "0", ")", "+", "np", ".", "expand_dims", "(", "np", ".", "arange", "(", "vn", ")", ",", "axis", "=", "1", ")", "\n", "src_value_tmp", "=", "src_tmp", "[", ":", ",", "idx", "]", ".", "clone", "(", ")", ".", "reshape", "(", "\n", "[", "bs", "*", "vn", ",", "vl", ",", "-", "1", "]", ")", "\n", "src_value_tmp", "=", "torch", ".", "matmul", "(", "dct_m", "[", ":", "dct_n", "]", ".", "unsqueeze", "(", "dim", "=", "0", ")", ",", "src_value_tmp", ")", ".", "reshape", "(", "\n", "[", "bs", ",", "vn", ",", "dct_n", ",", "-", "1", "]", ")", ".", "transpose", "(", "2", ",", "3", ")", ".", "reshape", "(", "\n", "[", "bs", ",", "vn", ",", "-", "1", "]", ")", "# [32,40,66*11]", "\n", "\n", "idx", "=", "list", "(", "range", "(", "-", "self", ".", "kernel_size", ",", "0", ",", "1", ")", ")", "+", "[", "-", "1", "]", "*", "output_n", "\n", "outputs", "=", "[", "]", "\n", "\n", "key_tmp", "=", "self", ".", "convK", "(", "src_key_tmp", "/", "1000.0", ")", "\n", "for", "i", "in", "range", "(", "itera", ")", ":", "\n", "            ", "query_tmp", "=", "self", ".", "convQ", "(", "src_query_tmp", "/", "1000.0", ")", "\n", "score_tmp", "=", "torch", ".", "matmul", "(", "query_tmp", ".", "transpose", "(", "1", ",", "2", ")", ",", "key_tmp", ")", "+", "1e-15", "\n", "att_tmp", "=", "score_tmp", "/", "(", "torch", ".", "sum", "(", "score_tmp", ",", "dim", "=", "2", ",", "keepdim", "=", "True", ")", ")", "\n", "dct_att_tmp", "=", "torch", ".", "matmul", "(", "att_tmp", ",", "src_value_tmp", ")", "[", ":", ",", "0", "]", ".", "reshape", "(", "\n", "[", "bs", ",", "-", "1", ",", "dct_n", "]", ")", "\n", "\n", "input_gcn", "=", "src_tmp", "[", ":", ",", "idx", "]", "\n", "dct_in_tmp", "=", "torch", ".", "matmul", "(", "dct_m", "[", ":", "dct_n", "]", ".", "unsqueeze", "(", "dim", "=", "0", ")", ",", "input_gcn", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "dct_in_tmp", "=", "torch", ".", "cat", "(", "[", "dct_in_tmp", ",", "dct_att_tmp", "]", ",", "dim", "=", "-", "1", ")", "\n", "dct_out_tmp", "=", "self", ".", "gcn", "(", "dct_in_tmp", ")", "\n", "out_gcn", "=", "torch", ".", "matmul", "(", "idct_m", "[", ":", ",", ":", "dct_n", "]", ".", "unsqueeze", "(", "dim", "=", "0", ")", ",", "\n", "dct_out_tmp", "[", ":", ",", ":", ",", ":", "dct_n", "]", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "outputs", ".", "append", "(", "out_gcn", ".", "unsqueeze", "(", "2", ")", ")", "\n", "if", "itera", ">", "1", ":", "\n", "# update key-value query", "\n", "                ", "out_tmp", "=", "out_gcn", ".", "clone", "(", ")", "[", ":", ",", "0", "-", "output_n", ":", "]", "\n", "src_tmp", "=", "torch", ".", "cat", "(", "[", "src_tmp", ",", "out_tmp", "]", ",", "dim", "=", "1", ")", "\n", "\n", "vn", "=", "1", "-", "2", "*", "self", ".", "kernel_size", "-", "output_n", "\n", "vl", "=", "self", ".", "kernel_size", "+", "output_n", "\n", "idx_dct", "=", "np", ".", "expand_dims", "(", "np", ".", "arange", "(", "vl", ")", ",", "axis", "=", "0", ")", "+", "np", ".", "expand_dims", "(", "np", ".", "arange", "(", "vn", ",", "-", "self", ".", "kernel_size", "-", "output_n", "+", "1", ")", ",", "axis", "=", "1", ")", "\n", "\n", "src_key_tmp", "=", "src_tmp", "[", ":", ",", "idx_dct", "[", "0", ",", ":", "-", "1", "]", "]", ".", "transpose", "(", "1", ",", "2", ")", "\n", "key_new", "=", "self", ".", "convK", "(", "src_key_tmp", "/", "1000.0", ")", "\n", "key_tmp", "=", "torch", ".", "cat", "(", "[", "key_tmp", ",", "key_new", "]", ",", "dim", "=", "2", ")", "\n", "\n", "src_dct_tmp", "=", "src_tmp", "[", ":", ",", "idx_dct", "]", ".", "clone", "(", ")", ".", "reshape", "(", "\n", "[", "bs", "*", "self", ".", "kernel_size", ",", "vl", ",", "-", "1", "]", ")", "\n", "src_dct_tmp", "=", "torch", ".", "matmul", "(", "dct_m", "[", ":", "dct_n", "]", ".", "unsqueeze", "(", "dim", "=", "0", ")", ",", "src_dct_tmp", ")", ".", "reshape", "(", "\n", "[", "bs", ",", "self", ".", "kernel_size", ",", "dct_n", ",", "-", "1", "]", ")", ".", "transpose", "(", "2", ",", "3", ")", ".", "reshape", "(", "\n", "[", "bs", ",", "self", ".", "kernel_size", ",", "-", "1", "]", ")", "\n", "src_value_tmp", "=", "torch", ".", "cat", "(", "[", "src_value_tmp", ",", "src_dct_tmp", "]", ",", "dim", "=", "1", ")", "\n", "\n", "src_query_tmp", "=", "src_tmp", "[", ":", ",", "-", "self", ".", "kernel_size", ":", "]", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n", "", "", "outputs", "=", "torch", ".", "cat", "(", "outputs", ",", "dim", "=", "2", ")", "\n", "return", "outputs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.model.GCN.GraphConvolution.__init__": [[17, 28], ["torch.Module.__init__", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "GCN.GraphConvolution.reset_parameters", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "GCN.GraphConvolution.register_parameter", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.model.GCN.GCN.__init__", "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.model.GCN.GraphConvolution.reset_parameters"], ["def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ",", "bias", "=", "True", ",", "node_n", "=", "48", ")", ":", "\n", "        ", "super", "(", "GraphConvolution", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_features", "=", "in_features", "\n", "self", ".", "out_features", "=", "out_features", "\n", "self", ".", "weight", "=", "Parameter", "(", "torch", ".", "FloatTensor", "(", "in_features", ",", "out_features", ")", ")", "\n", "self", ".", "att", "=", "Parameter", "(", "torch", ".", "FloatTensor", "(", "node_n", ",", "node_n", ")", ")", "\n", "if", "bias", ":", "\n", "            ", "self", ".", "bias", "=", "Parameter", "(", "torch", ".", "FloatTensor", "(", "out_features", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.model.GCN.GraphConvolution.reset_parameters": [[29, 35], ["GCN.GraphConvolution.weight.data.uniform_", "GCN.GraphConvolution.att.data.uniform_", "math.sqrt", "GCN.GraphConvolution.bias.data.uniform_", "GCN.GraphConvolution.weight.size"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "stdv", "=", "1.", "/", "math", ".", "sqrt", "(", "self", ".", "weight", ".", "size", "(", "1", ")", ")", "\n", "self", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "self", ".", "att", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "self", ".", "bias", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.model.GCN.GraphConvolution.forward": [[36, 43], ["torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "support", "=", "torch", ".", "matmul", "(", "input", ",", "self", ".", "weight", ")", "\n", "output", "=", "torch", ".", "matmul", "(", "self", ".", "att", ",", "support", ")", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "return", "output", "+", "self", ".", "bias", "\n", "", "else", ":", "\n", "            ", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.model.GCN.GraphConvolution.__repr__": [[44, 48], ["str", "str"], "methods", ["None"], ["", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "' ('", "+", "str", "(", "self", ".", "in_features", ")", "+", "' -> '", "+", "str", "(", "self", ".", "out_features", ")", "+", "')'", "\n", "\n"]], "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.model.GCN.GC_Block.__init__": [[51, 67], ["torch.Module.__init__", "GCN.GraphConvolution", "torch.BatchNorm1d", "torch.BatchNorm1d", "GCN.GraphConvolution", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Dropout", "torch.Dropout", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.model.GCN.GCN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "p_dropout", ",", "bias", "=", "True", ",", "node_n", "=", "48", ")", ":", "\n", "        ", "\"\"\"\n        Define a residual block of GCN\n        \"\"\"", "\n", "super", "(", "GC_Block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_features", "=", "in_features", "\n", "self", ".", "out_features", "=", "in_features", "\n", "\n", "self", ".", "gc1", "=", "GraphConvolution", "(", "in_features", ",", "in_features", ",", "node_n", "=", "node_n", ",", "bias", "=", "bias", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm1d", "(", "node_n", "*", "in_features", ")", "\n", "\n", "self", ".", "gc2", "=", "GraphConvolution", "(", "in_features", ",", "in_features", ",", "node_n", "=", "node_n", ",", "bias", "=", "bias", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm1d", "(", "node_n", "*", "in_features", ")", "\n", "\n", "self", ".", "do", "=", "nn", ".", "Dropout", "(", "p_dropout", ")", "\n", "self", ".", "act_f", "=", "nn", ".", "Tanh", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.model.GCN.GC_Block.forward": [[68, 82], ["GCN.GC_Block.gc1", "GCN.GC_Block.bn1().view", "GCN.GC_Block.act_f", "GCN.GC_Block.do", "GCN.GC_Block.gc2", "GCN.GC_Block.bn2().view", "GCN.GC_Block.act_f", "GCN.GC_Block.do", "GCN.GC_Block.bn1", "GCN.GC_Block.bn2", "GCN.GC_Block.view", "GCN.GC_Block.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "self", ".", "gc1", "(", "x", ")", "\n", "b", ",", "n", ",", "f", "=", "y", ".", "shape", "\n", "y", "=", "self", ".", "bn1", "(", "y", ".", "view", "(", "b", ",", "-", "1", ")", ")", ".", "view", "(", "b", ",", "n", ",", "f", ")", "\n", "y", "=", "self", ".", "act_f", "(", "y", ")", "\n", "y", "=", "self", ".", "do", "(", "y", ")", "\n", "\n", "y", "=", "self", ".", "gc2", "(", "y", ")", "\n", "b", ",", "n", ",", "f", "=", "y", ".", "shape", "\n", "y", "=", "self", ".", "bn2", "(", "y", ".", "view", "(", "b", ",", "-", "1", ")", ")", ".", "view", "(", "b", ",", "n", ",", "f", ")", "\n", "y", "=", "self", ".", "act_f", "(", "y", ")", "\n", "y", "=", "self", ".", "do", "(", "y", ")", "\n", "\n", "return", "y", "+", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.model.GCN.GC_Block.__repr__": [[83, 87], ["str", "str"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "' ('", "+", "str", "(", "self", ".", "in_features", ")", "+", "' -> '", "+", "str", "(", "self", ".", "out_features", ")", "+", "')'", "\n", "\n"]], "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.model.GCN.GCN.__init__": [[90, 114], ["torch.Module.__init__", "GCN.GraphConvolution", "torch.BatchNorm1d", "torch.BatchNorm1d", "range", "torch.ModuleList", "torch.ModuleList", "GCN.GraphConvolution", "torch.Dropout", "torch.Dropout", "torch.Tanh", "torch.Tanh", "GCN.GCN.gcbs.append", "GCN.GC_Block"], "methods", ["home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.model.GCN.GCN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_feature", ",", "hidden_feature", ",", "p_dropout", ",", "num_stage", "=", "1", ",", "node_n", "=", "48", ")", ":", "\n", "        ", "\"\"\"\n        :param input_feature: num of input feature\n        :param hidden_feature: num of hidden feature\n        :param p_dropout: drop out prob.\n        :param num_stage: number of residual blocks\n        :param node_n: number of nodes in graph\n        \"\"\"", "\n", "super", "(", "GCN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_stage", "=", "num_stage", "\n", "\n", "self", ".", "gc1", "=", "GraphConvolution", "(", "input_feature", ",", "hidden_feature", ",", "node_n", "=", "node_n", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm1d", "(", "node_n", "*", "hidden_feature", ")", "\n", "\n", "self", ".", "gcbs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_stage", ")", ":", "\n", "            ", "self", ".", "gcbs", ".", "append", "(", "GC_Block", "(", "hidden_feature", ",", "p_dropout", "=", "p_dropout", ",", "node_n", "=", "node_n", ")", ")", "\n", "\n", "", "self", ".", "gcbs", "=", "nn", ".", "ModuleList", "(", "self", ".", "gcbs", ")", "\n", "\n", "self", ".", "gc7", "=", "GraphConvolution", "(", "hidden_feature", ",", "input_feature", ",", "node_n", "=", "node_n", ")", "\n", "\n", "self", ".", "do", "=", "nn", ".", "Dropout", "(", "p_dropout", ")", "\n", "self", ".", "act_f", "=", "nn", ".", "Tanh", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wei-mao-2019_HisRepItself.model.GCN.GCN.forward": [[115, 129], ["GCN.GCN.gc1", "GCN.GCN.bn1().view", "GCN.GCN.act_f", "GCN.GCN.do", "range", "GCN.GCN.gc7", "GCN.GCN.bn1", "GCN.GCN.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "self", ".", "gc1", "(", "x", ")", "\n", "b", ",", "n", ",", "f", "=", "y", ".", "shape", "\n", "y", "=", "self", ".", "bn1", "(", "y", ".", "view", "(", "b", ",", "-", "1", ")", ")", ".", "view", "(", "b", ",", "n", ",", "f", ")", "\n", "y", "=", "self", ".", "act_f", "(", "y", ")", "\n", "y", "=", "self", ".", "do", "(", "y", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "num_stage", ")", ":", "\n", "            ", "y", "=", "self", ".", "gcbs", "[", "i", "]", "(", "y", ")", "\n", "\n", "", "y", "=", "self", ".", "gc7", "(", "y", ")", "\n", "y", "=", "y", "+", "x", "\n", "\n", "return", "y", "\n", "", "", ""]]}