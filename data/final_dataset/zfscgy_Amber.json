{"home.repos.pwc.inspect_result.zfscgy_Amber.Core.Utils.ParallelException.__init__": [[7, 9], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "msg", ":", "str", ")", ":", "\n", "        ", "self", ".", "msg", "=", "msg", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Core.Utils.ParallelException.__str__": [[10, 12], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "msg", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Core.Utils.task_async": [[14, 16], ["threading.Thread().start", "threading.Thread"], "function", ["None"], ["", "", "def", "task_async", "(", "f", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "threading", ".", "Thread", "(", "target", "=", "f", ",", "args", "=", "args", ",", "kwargs", "=", "kwargs", ")", ".", "start", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Core.Utils.parallel": [[18, 55], ["isinstance", "range", "isinstance", "isinstance", "len", "threads.append", "threads[].start", "thread.join", "threading.Thread", "len", "len", "Utils.ParallelException", "len", "len"], "function", ["None"], ["", "def", "parallel", "(", "funcs", ":", "Union", "[", "Callable", ",", "List", "[", "Callable", "]", "]", ",", "paras", ":", "Union", "[", "Tuple", ",", "List", "[", "Tuple", "]", "]", "=", "None", ")", ":", "\n", "    ", "if", "not", "paras", ":", "\n", "        ", "paras", "=", "(", ")", "\n", "", "if", "isinstance", "(", "funcs", ",", "List", ")", ":", "\n", "        ", "if", "isinstance", "(", "paras", ",", "List", ")", ":", "\n", "            ", "if", "len", "(", "funcs", ")", "!=", "len", "(", "paras", ")", ":", "\n", "                ", "raise", "ParallelException", "(", "\"Functions and Parameters number not match: {} vs {}\"", ".", "\n", "format", "(", "len", "(", "funcs", ")", ",", "len", "(", "paras", ")", ")", ")", "\n", "", "else", ":", "\n", "                ", "pass", "\n", "", "", "else", ":", "\n", "            ", "paras", "=", "[", "paras", "for", "_", "in", "funcs", "]", "\n", "", "", "else", ":", "\n", "        ", "if", "isinstance", "(", "paras", ",", "List", ")", ":", "\n", "            ", "funcs", "=", "[", "funcs", "for", "_", "in", "paras", "]", "\n", "", "else", ":", "\n", "            ", "funcs", "=", "[", "funcs", "]", "\n", "paras", "=", "[", "paras", "]", "\n", "\n", "", "", "outputs", "=", "[", "None", "for", "_", "in", "funcs", "]", "\n", "exceptions", "=", "[", "None", "for", "_", "in", "funcs", "]", "\n", "\n", "def", "run", "(", "i", ":", "int", ",", "outputs", ":", "list", ",", "exceptions", ":", "list", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "outputs", "[", "i", "]", "=", "funcs", "[", "i", "]", "(", "*", "paras", "[", "i", "]", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "exceptions", "[", "i", "]", "=", "e", "\n", "\n", "", "", "threads", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "funcs", ")", ")", ":", "\n", "        ", "threads", ".", "append", "(", "threading", ".", "Thread", "(", "target", "=", "run", ",", "args", "=", "(", "i", ",", "outputs", ",", "exceptions", ")", ")", ")", "\n", "threads", "[", "-", "1", "]", ".", "start", "(", ")", "\n", "\n", "", "for", "thread", "in", "threads", ":", "\n", "        ", "thread", ".", "join", "(", ")", "\n", "\n", "", "return", "outputs", ",", "exceptions", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Core.Utils.parallel_process": [[57, 95], ["isinstance", "multiprocessing.Manager", "multiprocessing.Manager.list", "multiprocessing.Manager.list", "range", "isinstance", "isinstance", "len", "processes.append", "processes[].start", "process.join", "multiprocessing.Process", "len", "len", "Utils.ParallelException", "len", "len"], "function", ["None"], ["", "def", "parallel_process", "(", "funcs", ":", "Union", "[", "Callable", ",", "List", "[", "Callable", "]", "]", ",", "paras", ":", "Union", "[", "Tuple", ",", "List", "[", "Tuple", "]", "]", "=", "None", ")", ":", "\n", "    ", "if", "not", "paras", ":", "\n", "        ", "paras", "=", "(", ")", "\n", "", "if", "isinstance", "(", "funcs", ",", "List", ")", ":", "\n", "        ", "if", "isinstance", "(", "paras", ",", "List", ")", ":", "\n", "            ", "if", "len", "(", "funcs", ")", "!=", "len", "(", "paras", ")", ":", "\n", "                ", "raise", "ParallelException", "(", "\"Functions and Parameters number not match: {} vs {}\"", ".", "\n", "format", "(", "len", "(", "funcs", ")", ",", "len", "(", "paras", ")", ")", ")", "\n", "", "else", ":", "\n", "                ", "pass", "\n", "", "", "else", ":", "\n", "            ", "paras", "=", "[", "paras", "for", "_", "in", "funcs", "]", "\n", "", "", "else", ":", "\n", "        ", "if", "isinstance", "(", "paras", ",", "List", ")", ":", "\n", "            ", "funcs", "=", "[", "funcs", "for", "_", "in", "paras", "]", "\n", "", "else", ":", "\n", "            ", "funcs", "=", "[", "funcs", "]", "\n", "paras", "=", "[", "paras", "]", "\n", "\n", "", "", "manager", "=", "multiprocessing", ".", "Manager", "(", ")", "\n", "outputs", "=", "manager", ".", "list", "(", "[", "None", "for", "_", "in", "funcs", "]", ")", "\n", "exceptions", "=", "manager", ".", "list", "(", "[", "None", "for", "_", "in", "funcs", "]", ")", "\n", "\n", "def", "run", "(", "i", ":", "int", ",", "outputs", ":", "list", ",", "exceptions", ":", "list", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "outputs", "[", "i", "]", "=", "funcs", "[", "i", "]", "(", "*", "paras", "[", "i", "]", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "exceptions", "[", "i", "]", "=", "e", "\n", "\n", "", "", "processes", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "funcs", ")", ")", ":", "\n", "        ", "processes", ".", "append", "(", "multiprocessing", ".", "Process", "(", "target", "=", "run", ",", "args", "=", "(", "i", ",", "outputs", ",", "exceptions", ")", ")", ")", "\n", "processes", "[", "-", "1", "]", ".", "start", "(", ")", "\n", "\n", "", "for", "process", "in", "processes", ":", "\n", "        ", "process", ".", "join", "(", ")", "\n", "\n", "", "return", "outputs", ",", "exceptions", "\n", "", ""]], "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.I64ASBackend.I64ASBackend.__init__": [[6, 10], ["np.random.randint", "Amber.Core.Backend.NumpyBackend.NumpyBackend.__init__"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Reshape.__init__"], ["    ", "def", "__init__", "(", "self", ",", "precision", ":", "int", "=", "21", ",", "seed", ":", "int", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "2", "**", "63", "-", "1", ")", ")", ":", "\n", "        ", "self", ".", "precision", "=", "precision", "\n", "self", ".", "bitlen", "=", "64", "\n", "NumpyBackend", ".", "__init__", "(", "self", ",", "seed", ",", "np", ".", "int64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.I64ASBackend.I64ASBackend.encode": [[11, 13], ["np.array().astype", "np.array"], "methods", ["None"], ["", "def", "encode", "(", "self", ",", "x", ":", "Union", "[", "np", ".", "ndarray", ",", "float", ",", "int", "]", ")", ":", "\n", "        ", "return", "np", ".", "array", "(", "x", "*", "2", "**", "self", ".", "precision", ")", ".", "astype", "(", "np", ".", "int64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.I64ASBackend.I64ASBackend.decode": [[14, 16], ["x.astype"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", ".", "astype", "(", "np", ".", "float64", ")", "/", "(", "2", "**", "self", ".", "precision", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.I64ASBackend.I64ASBackend.recode": [[17, 23], ["np.divmod", "np.array", "np.array"], "methods", ["None"], ["", "def", "recode", "(", "self", ",", "x", ")", ":", "\n", "        ", "q", ",", "r", "=", "np", ".", "divmod", "(", "x", ",", "2", "**", "self", ".", "precision", ")", "\n", "q", "=", "np", ".", "array", "(", "q", ")", "\n", "r", "=", "np", ".", "array", "(", "r", ")", "\n", "q", "[", "r", ">=", "2", "**", "(", "self", ".", "precision", "-", "1", ")", "]", "+=", "1", "\n", "return", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.I64ASBackend.I64ASBackend.sigmoid": [[24, 26], ["I64ASBackend.I64ASBackend.encode", "np.exp", "I64ASBackend.I64ASBackend.decode"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.Backend.encode", "home.repos.pwc.inspect_result.zfscgy_Amber.Player.ASPlayer.ASPlayer.decode"], ["", "def", "sigmoid", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "encode", "(", "1", "/", "1", "+", "np", ".", "exp", "(", "-", "self", ".", "decode", "(", "x", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.I64ASBackend.I64ASBackend.tanh": [[27, 29], ["I64ASBackend.I64ASBackend.encode", "np.tanh", "I64ASBackend.I64ASBackend.decode"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.Backend.encode", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.tanh", "home.repos.pwc.inspect_result.zfscgy_Amber.Player.ASPlayer.ASPlayer.decode"], ["", "def", "tanh", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "encode", "(", "np", ".", "tanh", "(", "self", ".", "decode", "(", "x", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.I64ASBackend.I64ASBackend.square": [[30, 32], ["I64ASBackend.I64ASBackend.mul"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.mul"], ["", "def", "square", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "mul", "(", "x", ",", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.I64ASBackend.I64RTASBackend.__init__": [[35, 38], ["np.random.randint", "I64ASBackend.__init__", "np.random.default_rng"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Reshape.__init__"], ["    ", "def", "__init__", "(", "self", ",", "precision", ":", "int", "=", "21", ",", "seed", ":", "int", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "2", "**", "63", "-", "1", ")", ")", ":", "\n", "        ", "I64ASBackend", ".", "__init__", "(", "self", ",", "precision", ",", "seed", ")", "\n", "self", ".", "permutation_generator", "=", "np", ".", "random", ".", "default_rng", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.I64ASBackend.I64RTASBackend.reset_seed": [[39, 43], ["I64ASBackend.reset_seed", "np.random.default_rng"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.Backend.reset_seed"], ["", "def", "reset_seed", "(", "self", ",", "seed", ":", "int", ",", "name", ":", "str", "=", "None", ")", ":", "\n", "        ", "I64ASBackend", ".", "reset_seed", "(", "self", ",", "seed", ")", "\n", "if", "name", "is", "None", ":", "\n", "            ", "self", ".", "permutation_generator", "=", "np", ".", "random", ".", "default_rng", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.I64ASBackend.I64RTASBackend.random_permutation": [[44, 50], ["I64ASBackend.I64RTASBackend.permutation_generator.permutation", "np.zeros_like", "np.arange"], "methods", ["None"], ["", "", "def", "random_permutation", "(", "self", ",", "size", ")", ":", "\n", "        ", "permutation", "=", "self", ".", "permutation_generator", ".", "permutation", "(", "size", ")", "\n", "inv_permutation", "=", "np", ".", "zeros_like", "(", "permutation", ")", "\n", "arange", "=", "np", ".", "arange", "(", "size", ")", "\n", "inv_permutation", "[", "permutation", "]", "=", "arange", "\n", "return", "permutation", ",", "inv_permutation", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.NumpyBackend.NumpyBackend.__init__": [[7, 11], ["numpy.random.randint", "numpy.random.default_rng", "dict"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "seed", ":", "int", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "2", "**", "63", "-", "1", ")", ",", "dtype", "=", "np", ".", "float", ")", ":", "\n", "        ", "self", ".", "default_rng", "=", "np", ".", "random", ".", "default_rng", "(", "seed", ")", "\n", "self", ".", "dtype", "=", "dtype", "\n", "self", ".", "rngs", "=", "dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.NumpyBackend.NumpyBackend.new_rng": [[12, 14], ["numpy.random.default_rng"], "methods", ["None"], ["", "def", "new_rng", "(", "self", ",", "name", ":", "str", ",", "seed", ":", "int", ")", ":", "\n", "        ", "self", ".", "rngs", "[", "name", "]", "=", "np", ".", "random", ".", "default_rng", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.NumpyBackend.NumpyBackend.encode": [[15, 17], ["numpy.array"], "methods", ["None"], ["", "def", "encode", "(", "self", ",", "x", ":", "Union", "[", "np", ".", "ndarray", ",", "float", ",", "int", "]", ")", ":", "\n", "        ", "return", "np", ".", "array", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.NumpyBackend.NumpyBackend.decode": [[18, 20], ["None"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.NumpyBackend.NumpyBackend.pack_bits": [[21, 23], ["numpy.packbits"], "methods", ["None"], ["", "def", "pack_bits", "(", "self", ",", "x", ":", "np", ".", "ndarray", ")", ":", "\n", "        ", "return", "np", ".", "packbits", "(", "x", ")", ",", "x", ".", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.NumpyBackend.NumpyBackend.unpack_bits": [[24, 29], ["arr.reshape().astype", "numpy.unpackbits", "numpy.prod", "arr.reshape"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.reshape"], ["", "def", "unpack_bits", "(", "self", ",", "packed", ":", "tuple", ")", ":", "\n", "        ", "bits", ",", "shape", "=", "packed", "\n", "# The bits are multiples of 8, hence needs to truncate to remove extra data.", "\n", "arr", "=", "np", ".", "unpackbits", "(", "bits", ")", "[", ":", "np", ".", "prod", "(", "shape", ")", "]", "\n", "return", "arr", ".", "reshape", "(", "shape", ")", ".", "astype", "(", "np", ".", "bool", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.NumpyBackend.NumpyBackend.random_int": [[30, 36], ["generator.integers"], "methods", ["None"], ["", "def", "random_int", "(", "self", ",", "shape", ":", "Tuple", "[", "int", ",", "...", "]", "=", "None", ",", "name", ":", "str", "=", "None", ")", ":", "\n", "        ", "if", "not", "name", ":", "\n", "            ", "generator", "=", "self", ".", "default_rng", "\n", "", "else", ":", "\n", "            ", "generator", "=", "self", ".", "rngs", "[", "name", "]", "\n", "", "return", "generator", ".", "integers", "(", "-", "2", "**", "63", ",", "2", "**", "63", "-", "1", ",", "shape", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.NumpyBackend.NumpyBackend.random_int_range": [[37, 43], ["generator.integers"], "methods", ["None"], ["", "def", "random_int_range", "(", "self", ",", "shape", ":", "Tuple", "[", "int", ",", "...", "]", ",", "low", ":", "int", ",", "high", ":", "int", ",", "name", ":", "str", "=", "None", ")", ":", "\n", "        ", "if", "not", "name", ":", "\n", "            ", "generator", "=", "self", ".", "default_rng", "\n", "", "else", ":", "\n", "            ", "generator", "=", "self", ".", "rngs", "[", "name", "]", "\n", "", "return", "generator", ".", "integers", "(", "low", ",", "high", ",", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.NumpyBackend.NumpyBackend.reset_seed": [[44, 49], ["numpy.random.default_rng", "numpy.random.default_rng"], "methods", ["None"], ["", "def", "reset_seed", "(", "self", ",", "seed", ":", "int", ",", "name", ":", "str", "=", "None", ")", ":", "\n", "        ", "if", "not", "name", ":", "\n", "            ", "self", ".", "default_rng", "=", "np", ".", "random", ".", "default_rng", "(", "seed", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "rngs", "[", "name", "]", "=", "np", ".", "random", ".", "default_rng", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.NumpyBackend.NumpyBackend.get_shape": [[50, 52], ["None"], "methods", ["None"], ["", "", "def", "get_shape", "(", "self", ",", "x", ":", "np", ".", "ndarray", ")", ":", "\n", "        ", "return", "x", ".", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.NumpyBackend.NumpyBackend.equal": [[53, 55], ["None"], "methods", ["None"], ["", "def", "equal", "(", "self", ",", "x", ":", "np", ".", "ndarray", ",", "y", ":", "np", ".", "ndarray", ")", ":", "\n", "        ", "return", "x", "==", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.NumpyBackend.NumpyBackend.greater": [[56, 58], ["None"], "methods", ["None"], ["", "def", "greater", "(", "self", ",", "x", ":", "np", ".", "ndarray", ",", "y", ":", "np", ".", "ndarray", ")", ":", "\n", "        ", "return", "x", ">", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.NumpyBackend.NumpyBackend.find_indices": [[59, 61], ["numpy.argwhere"], "methods", ["None"], ["", "def", "find_indices", "(", "self", ",", "x", ":", "np", ".", "ndarray", ")", ":", "\n", "        ", "return", "np", ".", "argwhere", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.NumpyBackend.NumpyBackend.set_by_indices": [[62, 69], ["range", "len", "slices.append", "tuple"], "methods", ["None"], ["", "def", "set_by_indices", "(", "self", ",", "x", ":", "np", ".", "ndarray", ",", "indices", ":", "np", ".", "ndarray", ",", "values", ":", "np", ".", "ndarray", ")", ":", "\n", "        ", "if", "len", "(", "indices", ")", "==", "0", ":", "\n", "            ", "return", "\n", "", "slices", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "indices", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "slices", ".", "append", "(", "indices", "[", ":", ",", "i", "]", ")", "\n", "", "x", "[", "tuple", "(", "slices", ")", "]", "=", "values", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.NumpyBackend.NumpyBackend.set_by_indicator": [[70, 72], ["None"], "methods", ["None"], ["", "def", "set_by_indicator", "(", "self", ",", "x", ":", "np", ".", "ndarray", ",", "indicator", ":", "np", ".", "ndarray", ",", "values", ":", "np", ".", "ndarray", ")", ":", "\n", "        ", "x", "[", "indicator", ">", "0", "]", "=", "values", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.NumpyBackend.NumpyBackend.select": [[73, 75], ["numpy.take"], "methods", ["None"], ["", "def", "select", "(", "self", ",", "x", ":", "np", ".", "ndarray", ",", "indices", ":", "np", ".", "ndarray", ",", "axis", ":", "int", ")", ":", "\n", "        ", "return", "np", ".", "take", "(", "x", ",", "indices", ",", "axis", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.NumpyBackend.NumpyBackend.select_by_indicator": [[76, 78], ["None"], "methods", ["None"], ["", "def", "select_by_indicator", "(", "self", ",", "x", ":", "np", ".", "ndarray", ",", "indicator", ":", "np", ".", "ndarray", ")", ":", "\n", "        ", "return", "x", "[", "indicator", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.NumpyBackend.NumpyBackend.select_by_indices": [[79, 86], ["range", "len", "slices.append", "tuple"], "methods", ["None"], ["", "def", "select_by_indices", "(", "self", ",", "x", ":", "np", ".", "ndarray", ",", "indices", ":", "np", ".", "ndarray", ")", ":", "\n", "        ", "if", "len", "(", "indices", ")", "==", "0", ":", "\n", "            ", "return", "[", "]", "\n", "", "slices", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "indices", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "slices", ".", "append", "(", "indices", "[", ":", ",", "i", "]", ")", "\n", "", "return", "x", "[", "tuple", "(", "slices", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.NumpyBackend.NumpyBackend.select_slices": [[87, 89], ["None"], "methods", ["None"], ["", "def", "select_slices", "(", "self", ",", "x", ":", "np", ".", "ndarray", ",", "slices", ":", "Tuple", "[", "slice", ",", "...", "]", ")", ":", "\n", "        ", "return", "x", "[", "slices", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.NumpyBackend.NumpyBackend.zeros": [[90, 92], ["numpy.zeros().astype", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.Backend.zeros"], ["", "def", "zeros", "(", "self", ",", "shape", ":", "Tuple", "[", "int", ",", "...", "]", ")", ":", "\n", "        ", "return", "np", ".", "zeros", "(", "shape", ")", ".", "astype", "(", "self", ".", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.NumpyBackend.NumpyBackend.neg": [[93, 95], ["None"], "methods", ["None"], ["", "def", "neg", "(", "self", ",", "x", ":", "np", ".", "ndarray", ")", ":", "\n", "        ", "return", "-", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.NumpyBackend.NumpyBackend.add": [[96, 98], ["numpy.add"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.add"], ["", "def", "add", "(", "self", ",", "x", ":", "np", ".", "ndarray", ",", "y", ":", "np", ".", "ndarray", ")", ":", "\n", "        ", "return", "np", ".", "add", "(", "x", ",", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.NumpyBackend.NumpyBackend.sub": [[99, 101], ["numpy.subtract"], "methods", ["None"], ["", "def", "sub", "(", "self", ",", "x", ":", "np", ".", "ndarray", ",", "y", ":", "np", ".", "ndarray", ")", ":", "\n", "        ", "return", "np", ".", "subtract", "(", "x", ",", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.NumpyBackend.NumpyBackend.mul": [[102, 104], ["numpy.array", "numpy.multiply"], "methods", ["None"], ["", "def", "mul", "(", "self", ",", "x", ":", "np", ".", "ndarray", ",", "y", ":", "np", ".", "ndarray", ")", ":", "\n", "        ", "return", "np", ".", "array", "(", "np", ".", "multiply", "(", "x", ",", "y", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.NumpyBackend.NumpyBackend.matmul": [[105, 107], ["numpy.matmul"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.matmul"], ["", "def", "matmul", "(", "self", ",", "x", ":", "np", ".", "ndarray", ",", "y", ":", "np", ".", "ndarray", ")", ":", "\n", "        ", "return", "np", ".", "matmul", "(", "x", ",", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.NumpyBackend.NumpyBackend.mod": [[108, 110], ["[].astype", "numpy.divmod"], "methods", ["None"], ["", "def", "mod", "(", "self", ",", "x", ":", "np", ".", "ndarray", ",", "y", ":", "np", ".", "ndarray", ")", ":", "\n", "        ", "return", "np", ".", "divmod", "(", "x", ",", "y", ")", "[", "1", "]", ".", "astype", "(", "self", ".", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.NumpyBackend.NumpyBackend.square": [[111, 113], ["numpy.square"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.square"], ["", "def", "square", "(", "self", ",", "x", ":", "np", ".", "ndarray", ")", ":", "\n", "        ", "return", "np", ".", "square", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.NumpyBackend.NumpyBackend.sigmoid": [[114, 116], ["numpy.exp"], "methods", ["None"], ["", "def", "sigmoid", "(", "self", ",", "x", ":", "np", ".", "ndarray", ")", ":", "\n", "        ", "return", "1", "/", "(", "1", "+", "np", ".", "exp", "(", "-", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.NumpyBackend.NumpyBackend.tanh": [[117, 119], ["numpy.tanh"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.tanh"], ["", "def", "tanh", "(", "self", ",", "x", ":", "np", ".", "ndarray", ")", ":", "\n", "        ", "return", "np", ".", "tanh", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.NumpyBackend.NumpyBackend.relu": [[120, 125], ["numpy.copy"], "methods", ["None"], ["", "def", "relu", "(", "self", ",", "x", ":", "np", ".", "ndarray", ",", "k", ":", "float", ")", ":", "\n", "        ", "y", "=", "np", ".", "copy", "(", "x", ")", "\n", "y", "[", "x", ">=", "0", "]", "=", "x", "[", "x", ">=", "0", "]", "\n", "y", "[", "x", "<", "0", "]", "=", "k", "*", "x", "[", "x", "<", "0", "]", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.NumpyBackend.NumpyBackend.relu_grad": [[126, 131], ["numpy.copy"], "methods", ["None"], ["", "def", "relu_grad", "(", "self", ",", "x", ":", "np", ".", "ndarray", ",", "k", ":", "float", ")", ":", "\n", "        ", "y", "=", "np", ".", "copy", "(", "x", ")", "\n", "y", "[", "x", ">=", "0", "]", "=", "1", "\n", "y", "[", "x", "<", "0", "]", "=", "k", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.NumpyBackend.NumpyBackend.broadcast": [[132, 134], ["numpy.broadcast_to"], "methods", ["None"], ["", "def", "broadcast", "(", "self", ",", "x", ":", "np", ".", "ndarray", ",", "shape", ":", "Tuple", "[", "int", ",", "...", "]", ")", ":", "\n", "        ", "return", "np", ".", "broadcast_to", "(", "x", ",", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.NumpyBackend.NumpyBackend.reshape": [[135, 137], ["numpy.reshape"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.reshape"], ["", "def", "reshape", "(", "self", ",", "x", ",", "shape", ":", "Tuple", "[", "int", ",", "...", "]", ")", ":", "\n", "        ", "return", "np", ".", "reshape", "(", "x", ",", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.NumpyBackend.NumpyBackend.transpose": [[138, 140], ["numpy.swapaxes"], "methods", ["None"], ["", "def", "transpose", "(", "self", ",", "x", ",", "axis0", ":", "int", ",", "axis1", ":", "int", ")", ":", "\n", "        ", "return", "np", ".", "swapaxes", "(", "x", ",", "axis0", ",", "axis1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.NumpyBackend.NumpyBackend.sum": [[141, 143], ["numpy.sum"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.sum"], ["", "def", "sum", "(", "self", ",", "xs", ",", "axis", ":", "Tuple", "[", "int", ",", "...", "]", ")", ":", "\n", "        ", "return", "np", ".", "sum", "(", "xs", ",", "axis", ",", "keepdims", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.NumpyBackend.NumpyBackend.mean": [[144, 146], ["numpy.mean"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.mean"], ["", "def", "mean", "(", "self", ",", "xs", ",", "axis", ":", "Tuple", "[", "int", ",", "...", "]", ")", ":", "\n", "        ", "return", "np", ".", "mean", "(", "xs", ",", "axis", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.NumpyBackend.NumpyBackend.concat": [[147, 149], ["numpy.concatenate"], "methods", ["None"], ["", "def", "concat", "(", "self", ",", "xs", ",", "axis", ":", "int", ")", ":", "\n", "        ", "return", "np", ".", "concatenate", "(", "xs", ",", "axis", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.Backend.new_rng": [[7, 9], ["NotImplementedError"], "methods", ["None"], ["    ", "def", "new_rng", "(", "self", ",", "name", ":", "str", ",", "seed", ":", "int", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.Backend.encode": [[10, 12], ["NotImplementedError"], "methods", ["None"], ["", "def", "encode", "(", "self", ",", "x", ":", "Union", "[", "np", ".", "ndarray", ",", "float", ",", "int", "]", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.Backend.decode": [[13, 15], ["NotImplementedError"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "x", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.Backend.random_int": [[16, 18], ["NotImplementedError"], "methods", ["None"], ["", "def", "random_int", "(", "self", ",", "shape", ":", "Tuple", "[", "int", "]", "=", "None", ",", "name", ":", "str", "=", "None", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.Backend.random_int_range": [[19, 21], ["NotImplementedError"], "methods", ["None"], ["", "def", "random_int_range", "(", "self", ",", "shape", ":", "Tuple", "[", "int", ",", "...", "]", ",", "low", ":", "int", ",", "high", ":", "int", ",", "name", ":", "str", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.Backend.reset_seed": [[22, 24], ["NotImplementedError"], "methods", ["None"], ["", "def", "reset_seed", "(", "self", ",", "seed", ":", "int", ",", "name", ":", "str", "=", "None", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.Backend.get_shape": [[25, 27], ["NotImplementedError"], "methods", ["None"], ["", "def", "get_shape", "(", "self", ",", "x", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.Backend.equal": [[28, 30], ["NotImplementedError"], "methods", ["None"], ["", "def", "equal", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.Backend.greater": [[31, 33], ["NotImplementedError"], "methods", ["None"], ["", "def", "greater", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.Backend.find_indices": [[34, 36], ["NotImplementedError"], "methods", ["None"], ["", "def", "find_indices", "(", "self", ",", "x", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.Backend.set_by_indicator": [[37, 39], ["NotImplementedError"], "methods", ["None"], ["", "def", "set_by_indicator", "(", "self", ",", "x", ":", "np", ".", "ndarray", ",", "indicator", ":", "np", ".", "ndarray", ",", "values", ":", "np", ".", "ndarray", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.Backend.set_by_indices": [[40, 42], ["NotImplementedError"], "methods", ["None"], ["", "def", "set_by_indices", "(", "self", ",", "x", ",", "indices", ",", "values", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.Backend.zeros": [[43, 45], ["NotImplementedError"], "methods", ["None"], ["", "def", "zeros", "(", "self", ",", "shape", ":", "Tuple", "[", "int", ",", "...", "]", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.Backend.neg": [[46, 48], ["NotImplementedError"], "methods", ["None"], ["", "def", "neg", "(", "self", ",", "x", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.Backend.add": [[49, 51], ["NotImplementedError"], "methods", ["None"], ["", "def", "add", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.Backend.sub": [[52, 54], ["NotImplementedError"], "methods", ["None"], ["", "def", "sub", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.Backend.mul": [[55, 57], ["NotImplementedError"], "methods", ["None"], ["", "def", "mul", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.Backend.matmul": [[58, 60], ["NotImplementedError"], "methods", ["None"], ["", "def", "matmul", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.Backend.mod": [[61, 63], ["NotImplementedError"], "methods", ["None"], ["", "def", "mod", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.Backend.square": [[64, 66], ["NotImplementedError"], "methods", ["None"], ["", "def", "square", "(", "self", ",", "x", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.Backend.sigmoid": [[67, 69], ["NotImplementedError"], "methods", ["None"], ["", "def", "sigmoid", "(", "self", ",", "x", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.Backend.tanh": [[70, 72], ["NotImplementedError"], "methods", ["None"], ["", "def", "tanh", "(", "self", ",", "x", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.Backend.relu": [[73, 75], ["NotImplementedError"], "methods", ["None"], ["", "def", "relu", "(", "self", ",", "x", ":", "np", ".", "ndarray", ",", "k", ":", "float", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.Backend.relu_grad": [[76, 78], ["NotImplementedError"], "methods", ["None"], ["", "def", "relu_grad", "(", "self", ",", "x", ":", "np", ".", "ndarray", ",", "k", ":", "float", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.Backend.select": [[79, 81], ["NotImplementedError"], "methods", ["None"], ["", "def", "select", "(", "self", ",", "x", ",", "indices", ":", "List", "[", "int", "]", ",", "axis", ":", "int", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.Backend.select_by_indicator": [[82, 84], ["NotImplementedError"], "methods", ["None"], ["", "def", "select_by_indicator", "(", "self", ",", "x", ":", "np", ".", "ndarray", ",", "indicator", ":", "np", ".", "ndarray", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.Backend.select_by_indices": [[85, 87], ["NotImplementedError"], "methods", ["None"], ["", "def", "select_by_indices", "(", "self", ",", "x", ":", "np", ".", "ndarray", ",", "indices", ":", "np", ".", "ndarray", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.Backend.select_slices": [[88, 90], ["NotImplementedError"], "methods", ["None"], ["", "def", "select_slices", "(", "self", ",", "x", ",", "slices", ":", "Tuple", "[", "slice", ",", "...", "]", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.Backend.broadcast": [[91, 93], ["NotImplementedError"], "methods", ["None"], ["", "def", "broadcast", "(", "self", ",", "x", ",", "shape", ":", "Tuple", "[", "int", ",", "...", "]", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.Backend.reshape": [[94, 96], ["NotImplementedError"], "methods", ["None"], ["", "def", "reshape", "(", "self", ",", "x", ",", "shape", ":", "Tuple", "[", "int", ",", "...", "]", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.Backend.transpose": [[97, 106], ["NotImplementedError"], "methods", ["None"], ["", "def", "transpose", "(", "self", ",", "x", ",", "axis0", ":", "int", ",", "axis1", ":", "int", ")", ":", "\n", "        ", "\"\"\"\n        This is the same as np.swapaxes\n        :param x:\n        :param axis0:\n        :param axis1:\n        :return:\n        \"\"\"", "\n", "return", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.Backend.sum": [[107, 116], ["NotImplementedError"], "methods", ["None"], ["", "def", "sum", "(", "self", ",", "xs", ",", "axis", ":", "Tuple", "[", "int", ",", "...", "]", ")", ":", "\n", "        ", "\"\"\"\n        This is the same as np.sum with keepdims=True for convenience\n\n        :param xs:\n        :param axis:\n        :return:\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.Backend.mean": [[117, 119], ["NotImplementedError"], "methods", ["None"], ["", "def", "mean", "(", "self", ",", "xs", ",", "axis", ":", "Tuple", "[", "int", ",", "...", "]", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.Backend.concat": [[120, 122], ["NotImplementedError"], "methods", ["None"], ["", "def", "concat", "(", "self", ",", "xs", ",", "axis", ":", "int", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.ASBackend.__init__": [[125, 128], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "bitlen", "=", "0", "\n", "self", ".", "precision", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.ASBackend.random_triple": [[129, 131], ["NotImplementedError"], "methods", ["None"], ["", "def", "random_triple", "(", "self", ",", "shape_0", ":", "Tuple", "[", "int", ",", "...", "]", ",", "shape_1", ":", "Tuple", "[", "int", ",", "...", "]", ",", "mul_op", ":", "Callable", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.ASBackend.recode": [[132, 134], ["NotImplementedError"], "methods", ["None"], ["", "def", "recode", "(", "self", ",", "x", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.RTASBackend.random_permutation": [[137, 139], ["NotImplementedError"], "methods", ["None"], ["    ", "def", "random_permutation", "(", "self", ",", "size", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.test_I64RTASBackend.test_permutation": [[8, 12], ["numpy.random.randint", "backend.random_permutation", "numpy.allclose"], "function", ["home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.RTASBackend.random_permutation"], ["def", "test_permutation", "(", ")", ":", "\n", "    ", "arr", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "100", ",", "10", ")", "\n", "random_perm", ",", "inv_perm", "=", "backend", ".", "random_permutation", "(", "10", ")", "\n", "assert", "np", ".", "allclose", "(", "arr", "[", "random_perm", "]", "[", "inv_perm", "]", ",", "arr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.test_I64ASBackend.test_encode_decode": [[9, 12], ["backend.decode", "numpy.allclose", "backend.recode", "backend.mul", "backend.encode", "backend.encode"], "function", ["home.repos.pwc.inspect_result.zfscgy_Amber.Player.ASPlayer.ASPlayer.decode", "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.ASBackend.recode", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.mul", "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.Backend.encode", "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.Backend.encode"], ["def", "test_encode_decode", "(", ")", ":", "\n", "    ", "out", "=", "backend", ".", "decode", "(", "backend", ".", "recode", "(", "backend", ".", "mul", "(", "backend", ".", "encode", "(", "999", ")", ",", "backend", ".", "encode", "(", "-", "999", ")", ")", ")", ")", "\n", "assert", "np", ".", "allclose", "(", "out", ",", "-", "999", "*", "999", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.test_NumpyBackend.test_add": [[7, 9], ["backend.add"], "function", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.add"], ["def", "test_add", "(", ")", ":", "\n", "    ", "backend", ".", "add", "(", "1", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.test_NumpyBackend.test_matmul": [[11, 13], ["backend.matmul"], "function", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.matmul"], ["", "def", "test_matmul", "(", ")", ":", "\n", "    ", "backend", ".", "matmul", "(", "[", "[", "1", ",", "2", "]", "]", ",", "[", "[", "3", "]", ",", "[", "4", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Base.TensorBase.Tensor.__init__": [[15, 19], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "value", ",", "shape", ",", "tensor_type", ":", "TensorType", "=", "TensorType", ".", "Local", ")", ":", "\n", "        ", "self", ".", "value", "=", "value", "\n", "self", ".", "shape", "=", "shape", "\n", "self", ".", "type", "=", "tensor_type", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Base.TensorBase.Tensor.__str__": [[20, 22], ["str"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "str", "(", "self", ".", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Base.TensorBase.TensorFactory.__init__": [[25, 27], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "get_shape", ":", "Callable", ")", ":", "\n", "        ", "self", ".", "get_shape", "=", "get_shape", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Base.TensorBase.TensorFactory.tensor": [[28, 30], ["TensorBase.Tensor", "TensorBase.TensorFactory.get_shape"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.Backend.get_shape"], ["", "def", "tensor", "(", "self", ",", "x", ",", "tensor_type", ":", "TensorType", ")", ":", "\n", "        ", "return", "Tensor", "(", "x", ",", "self", ".", "get_shape", "(", "x", ")", ",", "tensor_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Base.TensorBase.TensorFactory.local": [[31, 33], ["TensorBase.Tensor", "TensorBase.TensorFactory.get_shape"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.Backend.get_shape"], ["", "def", "local", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "Tensor", "(", "x", ",", "self", ".", "get_shape", "(", "x", ")", ",", "TensorType", ".", "Local", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Base.TensorBase.TensorFactory.shared": [[34, 36], ["TensorBase.Tensor", "TensorBase.TensorFactory.get_shape"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.Backend.get_shape"], ["", "def", "shared", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "Tensor", "(", "x", ",", "self", ".", "get_shape", "(", "x", ")", ",", "TensorType", ".", "AShared", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Player.Player.PlayerException.__init__": [[7, 9], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "msg", ")", ":", "\n", "        ", "self", ".", "msg", "=", "msg", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Player.Player.PlayerException.__str__": [[10, 12], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "msg", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Player.Player.Player.__init__": [[19, 22], ["TensorFactory"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "backend", ":", "Backend", ")", ":", "\n", "        ", "self", ".", "backend", "=", "backend", "\n", "self", ".", "tfactory", "=", "TensorFactory", "(", "backend", ".", "get_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Player.Player.Player.new_tensor": [[23, 25], ["NotImplementedError"], "methods", ["None"], ["", "def", "new_tensor", "(", "self", ",", "tensor_getter", ":", "Callable", "[", "[", "]", ",", "Union", "[", "int", ",", "float", ",", "np", ".", "ndarray", "]", "]", ",", "**", "kwargs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Player.Player.Player.neg": [[26, 28], ["NotImplementedError"], "methods", ["None"], ["", "def", "neg", "(", "self", ",", "tensor0", ":", "Union", "[", "Tensor", ",", "np", ".", "ndarray", ",", "float", ",", "int", "]", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Player.Player.Player.add": [[29, 31], ["NotImplementedError"], "methods", ["None"], ["", "def", "add", "(", "self", ",", "tensor0", ":", "Union", "[", "Tensor", ",", "np", ".", "ndarray", ",", "float", ",", "int", "]", ",", "tensor1", ":", "[", "Tensor", ",", "np", ".", "ndarray", ",", "float", ",", "int", "]", ")", "->", "Tensor", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Player.Player.Player.sub": [[32, 34], ["NotImplementedError"], "methods", ["None"], ["", "def", "sub", "(", "self", ",", "tensor0", ":", "Union", "[", "Tensor", ",", "np", ".", "ndarray", ",", "float", ",", "int", "]", ",", "tensor1", ":", "[", "Tensor", ",", "np", ".", "ndarray", ",", "float", ",", "int", "]", ")", "->", "Tensor", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Player.Player.Player.mul": [[35, 37], ["NotImplementedError"], "methods", ["None"], ["", "def", "mul", "(", "self", ",", "tensor0", ":", "Union", "[", "Tensor", ",", "np", ".", "ndarray", ",", "float", ",", "int", "]", ",", "tensor1", ":", "[", "Tensor", ",", "np", ".", "ndarray", ",", "float", ",", "int", "]", ")", "->", "Tensor", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Player.Player.Player.matmul": [[38, 40], ["NotImplementedError"], "methods", ["None"], ["", "def", "matmul", "(", "self", ",", "tensor0", ":", "Union", "[", "Tensor", ",", "np", ".", "ndarray", ",", "float", ",", "int", "]", ",", "tensor1", ":", "[", "Tensor", ",", "np", ".", "ndarray", ",", "float", ",", "int", "]", ")", "->", "Tensor", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Player.Player.Player.square": [[41, 43], ["NotImplementedError"], "methods", ["None"], ["", "def", "square", "(", "self", ",", "tensor", ":", "Union", "[", "Tensor", ",", "np", ".", "ndarray", "]", ")", "->", "Tensor", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Player.Player.Player.sigmoid": [[44, 46], ["NotImplementedError"], "methods", ["None"], ["", "def", "sigmoid", "(", "self", ",", "tensor", ":", "Union", "[", "Tensor", ",", "np", ".", "ndarray", "]", ")", "->", "Tensor", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Player.Player.Player.tanh": [[47, 49], ["NotImplementedError"], "methods", ["None"], ["", "def", "tanh", "(", "self", ",", "tensor", ":", "Union", "[", "Tensor", ",", "np", ".", "ndarray", "]", ")", "->", "Tensor", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Player.Player.Player.relu": [[50, 52], ["NotImplementedError"], "methods", ["None"], ["", "def", "relu", "(", "self", ",", "tensor", ":", "Union", "[", "Tensor", ",", "np", ".", "ndarray", "]", ",", "k", ":", "float", ")", "->", "Tensor", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Player.Player.Player.relu_grad": [[53, 55], ["NotImplementedError"], "methods", ["None"], ["", "def", "relu_grad", "(", "self", ",", "tensor", ":", "Union", "[", "Tensor", ",", "np", ".", "ndarray", "]", ",", "k", ":", "float", ")", "->", "Tensor", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Player.Player.Player.select": [[56, 58], ["NotImplementedError"], "methods", ["None"], ["", "def", "select", "(", "self", ",", "tensor", ":", "Union", "[", "Tensor", ",", "np", ".", "ndarray", "]", ",", "indices", ":", "List", "[", "int", "]", ",", "axis", ":", "int", ")", "->", "Tensor", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Player.Player.Player.broadcast": [[59, 61], ["NotImplementedError"], "methods", ["None"], ["", "def", "broadcast", "(", "self", ",", "tensor", ":", "Union", "[", "Tensor", ",", "np", ".", "ndarray", "]", ",", "shape", ":", "Tuple", "[", "int", ",", "...", "]", ")", "->", "Tensor", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Player.Player.Player.reshape": [[62, 64], ["NotImplementedError"], "methods", ["None"], ["", "def", "reshape", "(", "self", ",", "tensor", ":", "Union", "[", "Tensor", ",", "np", ".", "ndarray", "]", ",", "shape", ":", "Tuple", "[", "int", ",", "...", "]", ")", "->", "Tensor", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Player.Player.Player.transpose": [[65, 67], ["NotImplementedError"], "methods", ["None"], ["", "def", "transpose", "(", "self", ",", "tensor", ":", "Union", "[", "Tensor", ",", "np", ".", "ndarray", "]", ",", "idx1", ":", "int", ",", "idx2", ":", "int", ")", "->", "Tensor", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Player.Player.Player.concat": [[68, 70], ["NotImplementedError"], "methods", ["None"], ["", "def", "concat", "(", "self", ",", "tensors", ":", "List", "[", "Tensor", "]", ",", "axis", ":", "int", ")", "->", "Tensor", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Player.Player.Player.sum": [[71, 73], ["NotImplementedError"], "methods", ["None"], ["", "def", "sum", "(", "self", ",", "tensor", ":", "Union", "[", "Tensor", ",", "np", ".", "ndarray", ",", "List", "[", "Tensor", "]", "]", ",", "axis", ":", "Tuple", "[", "int", ",", "...", "]", "=", "None", ")", "->", "Tensor", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Player.Player.Player.mean": [[74, 76], ["NotImplementedError"], "methods", ["None"], ["", "def", "mean", "(", "self", ",", "tensor", ":", "Union", "[", "Tensor", ",", "np", ".", "ndarray", ",", "List", "[", "Tensor", "]", "]", ",", "axis", ":", "Tuple", "[", "int", ",", "...", "]", "=", "None", ")", "->", "Tensor", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zfscgy_Amber.Player.ASPlayer.ASPlayer.__init__": [[42, 74], ["dict", "Amber.Core.Comm.Peer.Peer", "dict", "Player.__init__", "PlayerException", "set", "PlayerException", "I64ASBackend", "isinstance", "PlayerException", "addr_dict.keys"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Reshape.__init__", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Node.set"], ["    ", "def", "__init__", "(", "self", ",", "role", ":", "str", ",", "addr_dict", ":", "dict", ",", "triple_buffer_size", ":", "int", "=", "64", ",", "\n", "backend", ":", "ASBackend", "=", "None", ")", ":", "\n", "        ", "if", "role", "not", "in", "{", "\"player0\"", ",", "\"player1\"", ",", "\"third-party\"", "}", ":", "\n", "            ", "raise", "PlayerException", "(", "f\"Role must be one of player0, player1 and third-party, but get {role}\"", ")", "\n", "", "self", ".", "role", "=", "role", "\n", "if", "set", "(", "addr_dict", ".", "keys", "(", ")", ")", "!=", "{", "\"player0\"", ",", "\"player1\"", ",", "\"third-party\"", "}", ":", "\n", "            ", "raise", "PlayerException", "(", "f\"Address dictionary must contain player0, player1 and third-party\"", ")", "\n", "", "if", "role", "==", "\"third-party\"", ":", "\n", "            ", "self", ".", "is_third_party", "=", "True", "\n", "", "else", ":", "\n", "            ", "self", ".", "is_third_party", "=", "False", "\n", "if", "role", "==", "\"player0\"", ":", "\n", "                ", "self", ".", "other_player", "=", "\"player1\"", "\n", "", "else", ":", "\n", "                ", "self", ".", "other_player", "=", "\"player0\"", "\n", "\n", "", "", "_other_addr_dict", "=", "dict", "(", ")", "\n", "for", "k", "in", "addr_dict", ":", "\n", "            ", "if", "k", "!=", "role", ":", "\n", "                ", "v", "=", "addr_dict", "[", "k", "]", "\n", "_other_addr_dict", "[", "v", "]", "=", "k", "\n", "", "", "self", ".", "peer", "=", "Peer", "(", "addr_dict", "[", "role", "]", ",", "_other_addr_dict", ")", "\n", "\n", "self", ".", "triple_buffer_size", "=", "triple_buffer_size", "\n", "self", ".", "triple_buffer", "=", "dict", "(", ")", "\n", "self", ".", "disable_triple_buffer", "=", "False", "\n", "\n", "if", "backend", "is", "None", ":", "\n", "            ", "backend", "=", "I64ASBackend", "(", ")", "\n", "", "if", "not", "isinstance", "(", "backend", ",", "ASBackend", ")", ":", "\n", "            ", "raise", "PlayerException", "(", "f\"ASPlayer: Must be an AS backend\"", ")", "\n", "", "super", "(", "ASPlayer", ",", "self", ")", ".", "__init__", "(", "backend", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Player.ASPlayer.ASPlayer.init_play": [[75, 103], ["time.sleep", "ASPlayer.ASPlayer.peer.connect_all", "ASPlayer.ASPlayer.backend.mod", "ASPlayer.ASPlayer.backend.reset_seed", "ASPlayer.ASPlayer.peer.send", "ASPlayer.ASPlayer.backend.mod", "ASPlayer.ASPlayer.backend.mod", "ASPlayer.ASPlayer.backend.new_rng", "ASPlayer.ASPlayer.backend.new_rng", "parallel", "ASPlayer.ASPlayer.backend.random_int", "ASPlayer.ASPlayer.peer.recv", "ASPlayer.ASPlayer.backend.reset_seed", "ASPlayer.ASPlayer.backend.random_int", "ASPlayer.ASPlayer.backend.random_int", "ASPlayer.ASPlayer.backend.new_rng", "ASPlayer.ASPlayer.backend.new_rng", "ASPlayer.ASPlayer.peer.recv", "ASPlayer.ASPlayer.peer.recv"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.Comm.Socket.SocketServer.connect_all", "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.Backend.mod", "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.Backend.reset_seed", "home.repos.pwc.inspect_result.zfscgy_Amber.Comm.Peer.Peer.send", "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.Backend.mod", "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.Backend.mod", "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.Backend.new_rng", "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.Backend.new_rng", "home.repos.pwc.inspect_result.zfscgy_Amber.Core.Utils.parallel", "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.Backend.random_int", "home.repos.pwc.inspect_result.zfscgy_Amber.Comm.Peer.Peer.recv", "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.Backend.reset_seed", "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.Backend.random_int", "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.Backend.random_int", "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.Backend.new_rng", "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.Backend.new_rng", "home.repos.pwc.inspect_result.zfscgy_Amber.Comm.Peer.Peer.recv", "home.repos.pwc.inspect_result.zfscgy_Amber.Comm.Peer.Peer.recv"], ["", "def", "init_play", "(", "self", ")", ":", "\n", "        ", "time", ".", "sleep", "(", "3", ")", "\n", "self", ".", "peer", ".", "connect_all", "(", ")", "\n", "\n", "# Sync the random seed for p0 and p1", "\n", "if", "self", ".", "role", "==", "\"player0\"", ":", "\n", "            ", "seed", "=", "self", ".", "backend", ".", "mod", "(", "self", ".", "backend", ".", "random_int", "(", ")", ",", "2", "**", "63", ")", "\n", "self", ".", "backend", ".", "reset_seed", "(", "seed", ")", "\n", "self", ".", "peer", ".", "send", "(", "self", ".", "other_player", ",", "\"Init-random_seed\"", ",", "seed", ")", "\n", "", "elif", "self", ".", "role", "==", "\"player1\"", ":", "\n", "            ", "seed", "=", "self", ".", "peer", ".", "recv", "(", "self", ".", "other_player", ",", "\"Init-random_seed\"", ")", "\n", "self", ".", "backend", ".", "reset_seed", "(", "seed", ")", "\n", "\n", "\n", "# Sync random seeds for the third-party and p0, p1 for faster beaver triple generation", "\n", "", "if", "self", ".", "is_third_party", ":", "\n", "            ", "seed_triple_p0", "=", "self", ".", "backend", ".", "mod", "(", "self", ".", "backend", ".", "random_int", "(", ")", ",", "2", "**", "63", ")", "\n", "seed_triple_p1", "=", "self", ".", "backend", ".", "mod", "(", "self", ".", "backend", ".", "random_int", "(", ")", ",", "2", "**", "63", ")", "\n", "self", ".", "backend", ".", "new_rng", "(", "\"triple_p0\"", ",", "seed_triple_p0", ")", "\n", "self", ".", "backend", ".", "new_rng", "(", "\"triple_p1\"", ",", "seed_triple_p1", ")", "\n", "parallel", "(", "self", ".", "peer", ".", "send", ",", "[", "\n", "(", "\"player0\"", ",", "\"seed_rng_triple\"", ",", "seed_triple_p0", ")", ",", "\n", "(", "\"player1\"", ",", "\"seed_rng_triple\"", ",", "seed_triple_p1", ")", "\n", "]", ")", "\n", "", "elif", "self", ".", "role", "==", "\"player0\"", ":", "\n", "            ", "self", ".", "backend", ".", "new_rng", "(", "\"triple\"", ",", "self", ".", "peer", ".", "recv", "(", "\"third-party\"", ",", "\"seed_rng_triple\"", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "backend", ".", "new_rng", "(", "\"triple\"", ",", "self", ".", "peer", ".", "recv", "(", "\"third-party\"", ",", "\"seed_rng_triple\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Player.ASPlayer.ASPlayer._get_triple": [[104, 148], ["ASPlayer.ASPlayer.triple_buffer[].pop", "len", "range", "ASPlayer.ASPlayer.peer.send", "ASPlayer.ASPlayer.peer.recv", "range", "ASPlayer.ASPlayer.backend.random_int", "ASPlayer.ASPlayer.backend.random_int", "ASPlayer.ASPlayer.backend.random_int", "ASPlayer.ASPlayer.backend.random_int", "op", "ASPlayer.ASPlayer.backend.random_int", "ASPlayer.ASPlayer.backend.sub", "player1_triples.append", "ASPlayer.ASPlayer.triple_buffer[].append", "ASPlayer.ASPlayer.backend.random_int", "ASPlayer.ASPlayer.backend.random_int", "ASPlayer.ASPlayer.triple_buffer[].append", "ASPlayer.ASPlayer.backend.random_int", "ASPlayer.ASPlayer.backend.random_int", "ASPlayer.ASPlayer.backend.random_int", "ASPlayer.ASPlayer.triple_buffer[].append", "ASPlayer.ASPlayer.backend.add", "ASPlayer.ASPlayer.backend.add", "ASPlayer.ASPlayer.backend.get_shape", "ASPlayer.ASPlayer.backend.get_shape", "op"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.Comm.Peer.Peer.send", "home.repos.pwc.inspect_result.zfscgy_Amber.Comm.Peer.Peer.recv", "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.Backend.random_int", "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.Backend.random_int", "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.Backend.random_int", "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.Backend.random_int", "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.Backend.random_int", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.sub", "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.Backend.random_int", "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.Backend.random_int", "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.Backend.random_int", "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.Backend.random_int", "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.Backend.random_int", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.add", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.add", "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.Backend.get_shape", "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.Backend.get_shape"], ["", "", "def", "_get_triple", "(", "self", ",", "name", ":", "str", ",", "op", ":", "Callable", ",", "shape_0", ":", "Tuple", "[", "int", ",", "...", "]", ",", "shape_1", ":", "Tuple", "[", "int", ",", "...", "]", ")", ":", "\n", "        ", "if", "self", ".", "disable_triple_buffer", ":", "\n", "            ", "triple_buffer_size", "=", "1", "\n", "", "else", ":", "\n", "            ", "triple_buffer_size", "=", "self", ".", "triple_buffer_size", "\n", "\n", "", "key", "=", "f\"{name}-{shape_0}-{shape_1}\"", "\n", "if", "key", "not", "in", "self", ".", "triple_buffer", ":", "\n", "            ", "self", ".", "triple_buffer", "[", "key", "]", "=", "[", "]", "\n", "\"\"\"\n            Generate beaver-triples\n            This involves communication, so lock is used\n            :return:\n            \"\"\"", "\n", "", "if", "len", "(", "self", ".", "triple_buffer", "[", "key", "]", ")", "==", "0", ":", "\n", "            ", "if", "self", ".", "is_third_party", ":", "\n", "                ", "player1_triples", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "triple_buffer_size", ")", ":", "\n", "                    ", "u0", "=", "self", ".", "backend", ".", "random_int", "(", "shape_0", ",", "\"triple_p0\"", ")", "\n", "u1", "=", "self", ".", "backend", ".", "random_int", "(", "shape_0", ",", "\"triple_p1\"", ")", "\n", "v0", "=", "self", ".", "backend", ".", "random_int", "(", "shape_1", ",", "\"triple_p0\"", ")", "\n", "v1", "=", "self", ".", "backend", ".", "random_int", "(", "shape_1", ",", "\"triple_p1\"", ")", "\n", "w", "=", "op", "(", "self", ".", "backend", ".", "add", "(", "u0", ",", "u1", ")", ",", "self", ".", "backend", ".", "add", "(", "v0", ",", "v1", ")", ")", "\n", "w0", "=", "self", ".", "backend", ".", "random_int", "(", "self", ".", "backend", ".", "get_shape", "(", "w", ")", ",", "\"triple_p0\"", ")", "\n", "w1", "=", "self", ".", "backend", ".", "sub", "(", "w", ",", "w0", ")", "\n", "player1_triples", ".", "append", "(", "w1", ")", "\n", "self", ".", "triple_buffer", "[", "key", "]", ".", "append", "(", "w", ")", "\n", "", "self", ".", "peer", ".", "send", "(", "\"player1\"", ",", "f\"triple_w1s: {key}\"", ",", "player1_triples", ")", "\n", "\n", "", "if", "self", ".", "role", "==", "\"player1\"", ":", "\n", "                ", "triples", "=", "self", ".", "peer", ".", "recv", "(", "\"third-party\"", ",", "f\"triple_w1s: {key}\"", ")", "\n", "for", "w1", "in", "triples", ":", "\n", "                    ", "u1", "=", "self", ".", "backend", ".", "random_int", "(", "shape_0", ",", "\"triple\"", ")", "\n", "v1", "=", "self", ".", "backend", ".", "random_int", "(", "shape_1", ",", "\"triple\"", ")", "\n", "self", ".", "triple_buffer", "[", "key", "]", ".", "append", "(", "(", "u1", ",", "v1", ",", "w1", ")", ")", "\n", "\n", "", "", "if", "self", ".", "role", "==", "\"player0\"", ":", "\n", "                ", "for", "_", "in", "range", "(", "triple_buffer_size", ")", ":", "\n", "                    ", "u0", "=", "self", ".", "backend", ".", "random_int", "(", "shape_0", ",", "\"triple\"", ")", "\n", "v0", "=", "self", ".", "backend", ".", "random_int", "(", "shape_1", ",", "\"triple\"", ")", "\n", "w0", "=", "self", ".", "backend", ".", "random_int", "(", "self", ".", "backend", ".", "get_shape", "(", "op", "(", "u0", ",", "v0", ")", ")", ",", "\"triple\"", ")", "\n", "self", ".", "triple_buffer", "[", "key", "]", ".", "append", "(", "(", "u0", ",", "v0", ",", "w0", ")", ")", "\n", "\n", "", "", "", "return", "self", ".", "triple_buffer", "[", "key", "]", ".", "pop", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Player.ASPlayer.ASPlayer.new_tensor": [[149, 177], ["len", "kwargs.get", "PlayerException", "ASPlayer.ASPlayer.tfactory.local", "ASPlayer.ASPlayer.backend.encode", "ASPlayer.ASPlayer.tfactory.shared", "ASPlayer.ASPlayer.backend.get_shape", "ASPlayer.ASPlayer.tfactory.shared", "tensor_getter", "ASPlayer.ASPlayer.backend.encode", "ASPlayer.ASPlayer.backend.encode", "ASPlayer.ASPlayer.backend.zeros", "tensor_getter", "tensor_getter"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Operator.get", "home.repos.pwc.inspect_result.zfscgy_Amber.Base.TensorBase.TensorFactory.local", "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.Backend.encode", "home.repos.pwc.inspect_result.zfscgy_Amber.Base.TensorBase.TensorFactory.shared", "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.Backend.get_shape", "home.repos.pwc.inspect_result.zfscgy_Amber.Base.TensorBase.TensorFactory.shared", "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.Backend.encode", "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.Backend.encode", "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.Backend.zeros"], ["", "def", "new_tensor", "(", "self", ",", "tensor_getter", ":", "Callable", "[", "[", "]", ",", "Union", "[", "int", ",", "float", ",", "np", ".", "ndarray", "]", "]", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        :param tensor_getter: A function that will only executed on the owner's machine\n        :param owner: player0 or player1\n        :return: A shared tensor\n        \"\"\"", "\n", "if", "len", "(", "args", ")", "==", "0", ":", "\n", "            ", "owner", "=", "kwargs", ".", "get", "(", "\"owner\"", ")", "\n", "if", "owner", "is", "None", ":", "\n", "                ", "owner", "=", "\"player0\"", "\n", "", "", "else", ":", "\n", "            ", "owner", "=", "args", "[", "0", "]", "\n", "\n", "", "if", "owner", "not", "in", "[", "\"player0\"", ",", "\"player1\"", ",", "\"all\"", "]", ":", "\n", "            ", "raise", "PlayerException", "(", "f\"new_tensor: invalid owner {owner}\"", ")", "\n", "", "if", "owner", "==", "\"all\"", ":", "\n", "            ", "tensor", "=", "self", ".", "tfactory", ".", "local", "(", "self", ".", "backend", ".", "encode", "(", "tensor_getter", "(", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "role", "==", "owner", ":", "\n", "                ", "tensor", "=", "self", ".", "tfactory", ".", "shared", "(", "self", ".", "backend", ".", "encode", "(", "tensor_getter", "(", ")", ")", ")", "\n", "# parallel(self.peer.send, [", "\n", "#     (self.other_player, \"new_tensor-shape\", tensor.shape),", "\n", "#     (\"third-party\", \"new_tensor-shape\", tensor.shape)])", "\n", "", "else", ":", "\n", "# tensor_shape = self.peer.recv(owner, \"new_tensor-shape\")", "\n", "                ", "tensor_shape", "=", "self", ".", "backend", ".", "get_shape", "(", "self", ".", "backend", ".", "encode", "(", "tensor_getter", "(", ")", ")", ")", "\n", "tensor", "=", "self", ".", "tfactory", ".", "shared", "(", "self", ".", "backend", ".", "zeros", "(", "tensor_shape", ")", ")", "\n", "", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Player.ASPlayer.ASPlayer.reveal": [[178, 195], ["ASPlayer.ASPlayer.peer.send", "ASPlayer.ASPlayer.tfactory.local", "ASPlayer.ASPlayer.backend.add", "PlayerException", "ASPlayer.ASPlayer.peer.recv", "ASPlayer.ASPlayer.peer.recv", "ASPlayer.ASPlayer.tfactory.local", "ASPlayer.ASPlayer.peer.send", "ASPlayer.ASPlayer.backend.add"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.Comm.Peer.Peer.send", "home.repos.pwc.inspect_result.zfscgy_Amber.Base.TensorBase.TensorFactory.local", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.add", "home.repos.pwc.inspect_result.zfscgy_Amber.Comm.Peer.Peer.recv", "home.repos.pwc.inspect_result.zfscgy_Amber.Comm.Peer.Peer.recv", "home.repos.pwc.inspect_result.zfscgy_Amber.Base.TensorBase.TensorFactory.local", "home.repos.pwc.inspect_result.zfscgy_Amber.Comm.Peer.Peer.send", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.add"], ["", "def", "reveal", "(", "self", ",", "x", ":", "Tensor", ",", "player", ":", "str", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "is_third_party", ":", "\n", "            ", "return", "x", "\n", "", "if", "x", ".", "type", "==", "TensorType", ".", "Local", ":", "\n", "            ", "return", "x", "\n", "", "if", "player", "is", "None", ":", "\n", "            ", "self", ".", "peer", ".", "send", "(", "self", ".", "other_player", ",", "\"reveal-part\"", ",", "x", ".", "value", ")", "\n", "return", "self", ".", "tfactory", ".", "local", "(", "self", ".", "backend", ".", "add", "(", "x", ".", "value", ",", "self", ".", "peer", ".", "recv", "(", "self", ".", "other_player", ",", "\"reveal-part\"", ")", ")", ")", "\n", "", "elif", "player", "not", "in", "[", "\"player0\"", ",", "\"player1\"", "]", ":", "\n", "            ", "raise", "PlayerException", "(", "\"reveal: can only reveal to player0 or player1\"", ")", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "role", "==", "player", ":", "\n", "                ", "other_part", "=", "self", ".", "peer", ".", "recv", "(", "self", ".", "other_player", ",", "\"reveal-part\"", ")", "\n", "return", "self", ".", "tfactory", ".", "local", "(", "self", ".", "backend", ".", "add", "(", "other_part", ",", "x", ".", "value", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "peer", ".", "send", "(", "self", ".", "other_player", ",", "\"reveal-part\"", ",", "x", ".", "value", ")", "\n", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Player.ASPlayer.ASPlayer.decode": [[196, 201], ["ASPlayer.ASPlayer.backend.decode", "PlayerException"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.Player.ASPlayer.ASPlayer.decode"], ["", "", "", "def", "decode", "(", "self", ",", "x", ":", "Tensor", ")", ":", "\n", "        ", "if", "x", ".", "type", "==", "TensorType", ".", "Local", ":", "\n", "            ", "return", "self", ".", "backend", ".", "decode", "(", "x", ".", "value", ")", "\n", "", "else", ":", "\n", "            ", "raise", "PlayerException", "(", "\"decode: cannot decode a shared tensor. Call reveal first.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Player.ASPlayer.ASPlayer.neg": [[202, 204], ["ASPlayer.ASPlayer.tfactory.tensor", "ASPlayer.ASPlayer.backend.neg"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.Base.TensorBase.TensorFactory.tensor", "home.repos.pwc.inspect_result.zfscgy_Amber.Player.LocalPlayer.LocalPlayer.neg"], ["", "", "def", "neg", "(", "self", ",", "tensor0", ":", "Union", "[", "Tensor", ",", "np", ".", "ndarray", ",", "float", ",", "int", "]", ")", ":", "\n", "        ", "return", "self", ".", "tfactory", ".", "tensor", "(", "self", ".", "backend", ".", "neg", "(", "tensor0", ".", "value", ")", ",", "tensor0", ".", "type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Player.ASPlayer.ASPlayer._op_linear": [[205, 227], ["ASPlayer.auto_to_tensor_as", "ASPlayer.ASPlayer.tfactory.tensor", "ASPlayer.ASPlayer.tfactory.local", "linear_op", "linear_op", "ASPlayer.ASPlayer.tfactory.shared", "ASPlayer.ASPlayer.tfactory.shared", "ASPlayer.ASPlayer.tfactory.shared", "linear_op", "linear_op", "ASPlayer.ASPlayer.tfactory.shared", "ASPlayer.ASPlayer.tfactory.shared", "linear_op", "linear_op", "linear_op"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.Player.ASPlayer.auto_to_tensor_as", "home.repos.pwc.inspect_result.zfscgy_Amber.Base.TensorBase.TensorFactory.tensor", "home.repos.pwc.inspect_result.zfscgy_Amber.Base.TensorBase.TensorFactory.local", "home.repos.pwc.inspect_result.zfscgy_Amber.Base.TensorBase.TensorFactory.shared", "home.repos.pwc.inspect_result.zfscgy_Amber.Base.TensorBase.TensorFactory.shared", "home.repos.pwc.inspect_result.zfscgy_Amber.Base.TensorBase.TensorFactory.shared", "home.repos.pwc.inspect_result.zfscgy_Amber.Base.TensorBase.TensorFactory.shared", "home.repos.pwc.inspect_result.zfscgy_Amber.Base.TensorBase.TensorFactory.shared"], ["", "@", "auto_to_tensor_as", "(", "arg_indices", "=", "[", "1", ",", "2", "]", ")", "\n", "def", "_op_linear", "(", "self", ",", "linear_op", ":", "Callable", ",", "tensor0", ":", "Union", "[", "Tensor", ",", "np", ".", "ndarray", ",", "float", ",", "int", "]", ",", "tensor1", ":", "[", "Tensor", ",", "np", ".", "ndarray", ",", "float", ",", "int", "]", ")", ":", "\n", "        ", "if", "self", ".", "is_third_party", ":", "\n", "            ", "if", "tensor0", ".", "type", "==", "TensorType", ".", "Local", "and", "tensor1", ".", "type", "==", "TensorType", ".", "Local", ":", "\n", "                ", "new_type", "=", "TensorType", ".", "Local", "\n", "", "else", ":", "\n", "                ", "new_type", "=", "TensorType", ".", "AShared", "\n", "", "return", "self", ".", "tfactory", ".", "tensor", "(", "linear_op", "(", "tensor0", ".", "value", ",", "tensor1", ".", "value", ")", ",", "new_type", ")", "\n", "", "if", "tensor0", ".", "type", "==", "TensorType", ".", "Local", "and", "tensor1", ".", "type", "==", "TensorType", ".", "Local", ":", "\n", "            ", "return", "self", ".", "tfactory", ".", "local", "(", "linear_op", "(", "tensor0", ".", "value", ",", "tensor1", ".", "value", ")", ")", "\n", "", "elif", "tensor0", ".", "type", "==", "TensorType", ".", "Local", ":", "\n", "            ", "if", "self", ".", "role", "==", "\"player0\"", ":", "\n", "                ", "return", "self", ".", "tfactory", ".", "shared", "(", "linear_op", "(", "tensor0", ".", "value", ",", "tensor1", ".", "value", ")", ")", "\n", "", "else", ":", "\n", "                ", "return", "self", ".", "tfactory", ".", "shared", "(", "linear_op", "(", "0", ",", "tensor1", ".", "value", ")", ")", "\n", "", "", "elif", "tensor1", ".", "type", "==", "TensorType", ".", "Local", ":", "\n", "            ", "if", "self", ".", "role", "==", "\"player0\"", ":", "\n", "                ", "return", "self", ".", "tfactory", ".", "shared", "(", "linear_op", "(", "tensor0", ".", "value", ",", "tensor1", ".", "value", ")", ")", "\n", "", "else", ":", "\n", "                ", "return", "self", ".", "tfactory", ".", "shared", "(", "linear_op", "(", "tensor0", ".", "value", ",", "0", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "return", "self", ".", "tfactory", ".", "shared", "(", "linear_op", "(", "tensor0", ".", "value", ",", "tensor1", ".", "value", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Player.ASPlayer.ASPlayer.add": [[228, 230], ["ASPlayer.ASPlayer._op_linear"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.Player.ASPlayer.ASPlayer._op_linear"], ["", "", "def", "add", "(", "self", ",", "tensor0", ":", "Union", "[", "Tensor", ",", "np", ".", "ndarray", ",", "float", ",", "int", "]", ",", "tensor1", ":", "[", "Tensor", ",", "np", ".", "ndarray", ",", "float", ",", "int", "]", ")", "->", "Tensor", ":", "\n", "        ", "return", "self", ".", "_op_linear", "(", "self", ".", "backend", ".", "add", ",", "tensor0", ",", "tensor1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Player.ASPlayer.ASPlayer.sub": [[231, 233], ["ASPlayer.ASPlayer._op_linear"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.Player.ASPlayer.ASPlayer._op_linear"], ["", "def", "sub", "(", "self", ",", "tensor0", ":", "Union", "[", "Tensor", ",", "np", ".", "ndarray", ",", "float", ",", "int", "]", ",", "tensor1", ":", "[", "Tensor", ",", "np", ".", "ndarray", ",", "float", ",", "int", "]", ")", "->", "Tensor", ":", "\n", "        ", "return", "self", ".", "_op_linear", "(", "self", ".", "backend", ".", "sub", ",", "tensor0", ",", "tensor1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Player.ASPlayer.ASPlayer._op_mul": [[234, 320], ["ASPlayer.auto_to_tensor_as", "ASPlayer.ASPlayer._get_triple", "ASPlayer.ASPlayer.tfactory.local", "mul_op", "ASPlayer.ASPlayer.backend.sub", "ASPlayer.ASPlayer.backend.set_by_indicator", "ASPlayer.ASPlayer.backend.add", "ASPlayer.ASPlayer.backend.set_by_indicator", "ASPlayer.ASPlayer.tfactory.shared", "ASPlayer.ASPlayer.tfactory.shared", "ASPlayer.ASPlayer.backend.sub", "ASPlayer.ASPlayer.backend.sub", "ASPlayer.ASPlayer.backend.add", "ASPlayer.ASPlayer.backend.set_by_indicator", "ASPlayer.ASPlayer.backend.sub", "ASPlayer.ASPlayer.backend.set_by_indicator", "ASPlayer.ASPlayer.backend.set_by_indicator", "ASPlayer.ASPlayer.tfactory.shared", "ASPlayer.ASPlayer.backend.recode", "ASPlayer.ASPlayer.tfactory.shared", "ASPlayer.ASPlayer.backend.greater", "ASPlayer.ASPlayer.backend.greater", "ASPlayer.ASPlayer.peer.send", "ASPlayer.ASPlayer.peer.recv", "ASPlayer.ASPlayer.backend.unpack_bits", "ASPlayer.ASPlayer.backend.unpack_bits", "ASPlayer.ASPlayer.backend.select_by_indicator", "ASPlayer.ASPlayer.backend.select_by_indicator", "ASPlayer.ASPlayer.backend.recode", "ASPlayer.ASPlayer.backend.zeros", "ASPlayer.ASPlayer.peer.send", "ASPlayer.ASPlayer.peer.recv", "ASPlayer.ASPlayer.backend.unpack_bits", "ASPlayer.ASPlayer.backend.unpack_bits", "ASPlayer.ASPlayer.backend.add", "ASPlayer.ASPlayer.backend.add", "ASPlayer.ASPlayer.backend.add", "ASPlayer.ASPlayer.backend.add", "ASPlayer.ASPlayer.peer.recv", "ASPlayer.ASPlayer.backend.add", "ASPlayer.ASPlayer.backend.add", "ASPlayer.ASPlayer.backend.add", "ASPlayer.ASPlayer.backend.greater", "ASPlayer.ASPlayer.backend.greater", "ASPlayer.ASPlayer.peer.send", "ASPlayer.ASPlayer.backend.select_by_indicator", "ASPlayer.ASPlayer.backend.select_by_indicator", "ASPlayer.ASPlayer.backend.recode", "mul_op", "ASPlayer.ASPlayer.backend.zeros", "ASPlayer.ASPlayer.backend.get_shape", "ASPlayer.ASPlayer.backend.add", "mul_op", "ASPlayer.ASPlayer.backend.add", "ASPlayer.ASPlayer.tfactory.get_shape", "ASPlayer.ASPlayer.backend.pack_bits", "ASPlayer.ASPlayer.backend.pack_bits", "mul_op", "mul_op", "mul_op", "mul_op", "ASPlayer.ASPlayer.backend.pack_bits", "ASPlayer.ASPlayer.backend.pack_bits", "mul_op"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.Player.ASPlayer.auto_to_tensor_as", "home.repos.pwc.inspect_result.zfscgy_Amber.Player.ASPlayer.ASPlayer._get_triple", "home.repos.pwc.inspect_result.zfscgy_Amber.Base.TensorBase.TensorFactory.local", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.sub", "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.Backend.set_by_indicator", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.add", "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.Backend.set_by_indicator", "home.repos.pwc.inspect_result.zfscgy_Amber.Base.TensorBase.TensorFactory.shared", "home.repos.pwc.inspect_result.zfscgy_Amber.Base.TensorBase.TensorFactory.shared", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.sub", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.sub", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.add", "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.Backend.set_by_indicator", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.sub", "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.Backend.set_by_indicator", "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.Backend.set_by_indicator", "home.repos.pwc.inspect_result.zfscgy_Amber.Base.TensorBase.TensorFactory.shared", "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.ASBackend.recode", "home.repos.pwc.inspect_result.zfscgy_Amber.Base.TensorBase.TensorFactory.shared", "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.Backend.greater", "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.Backend.greater", "home.repos.pwc.inspect_result.zfscgy_Amber.Comm.Peer.Peer.send", "home.repos.pwc.inspect_result.zfscgy_Amber.Comm.Peer.Peer.recv", "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.NumpyBackend.NumpyBackend.unpack_bits", "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.NumpyBackend.NumpyBackend.unpack_bits", "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.Backend.select_by_indicator", "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.Backend.select_by_indicator", "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.ASBackend.recode", "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.Backend.zeros", "home.repos.pwc.inspect_result.zfscgy_Amber.Comm.Peer.Peer.send", "home.repos.pwc.inspect_result.zfscgy_Amber.Comm.Peer.Peer.recv", "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.NumpyBackend.NumpyBackend.unpack_bits", "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.NumpyBackend.NumpyBackend.unpack_bits", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.add", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.add", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.add", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.add", "home.repos.pwc.inspect_result.zfscgy_Amber.Comm.Peer.Peer.recv", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.add", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.add", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.add", "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.Backend.greater", "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.Backend.greater", "home.repos.pwc.inspect_result.zfscgy_Amber.Comm.Peer.Peer.send", "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.Backend.select_by_indicator", "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.Backend.select_by_indicator", "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.ASBackend.recode", "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.Backend.zeros", "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.Backend.get_shape", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.add", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.add", "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.Backend.get_shape", "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.NumpyBackend.NumpyBackend.pack_bits", "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.NumpyBackend.NumpyBackend.pack_bits", "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.NumpyBackend.NumpyBackend.pack_bits", "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.NumpyBackend.NumpyBackend.pack_bits"], ["", "@", "auto_to_tensor_as", "(", "arg_indices", "=", "[", "1", ",", "2", "]", ")", "\n", "def", "_op_mul", "(", "self", ",", "mul_op", ":", "Callable", ",", "\n", "tensor0", ":", "Union", "[", "Tensor", ",", "np", ".", "ndarray", ",", "float", ",", "int", "]", ",", "tensor1", ":", "[", "Tensor", ",", "np", ".", "ndarray", ",", "float", ",", "int", "]", ")", "->", "Tensor", ":", "\n", "        ", "bitlen", "=", "self", ".", "backend", ".", "bitlen", "\n", "if", "tensor0", ".", "type", "==", "TensorType", ".", "Local", "and", "tensor1", ".", "type", "==", "TensorType", ".", "Local", ":", "\n", "            ", "return", "self", ".", "tfactory", ".", "local", "(", "self", ".", "backend", ".", "recode", "(", "mul_op", "(", "tensor0", ".", "value", ",", "tensor1", ".", "value", ")", ")", ")", "\n", "", "if", "tensor0", ".", "type", "==", "TensorType", ".", "Local", "or", "tensor1", ".", "type", "==", "TensorType", ".", "Local", ":", "\n", "            ", "if", "self", ".", "is_third_party", ":", "\n", "                ", "return", "self", ".", "tfactory", ".", "shared", "(", "self", ".", "backend", ".", "zeros", "(", "self", ".", "tfactory", ".", "get_shape", "(", "mul_op", "(", "tensor0", ".", "value", ",", "tensor1", ".", "value", ")", ")", ")", ")", "\n", "", "new_val", "=", "mul_op", "(", "tensor0", ".", "value", ",", "tensor1", ".", "value", ")", "\n", "if", "self", ".", "role", "==", "\"player0\"", ":", "\n", "                ", "\"\"\"\n                maybe_overflow_elems = self.backend.find_indices(self.backend.greater(new_val, 2 ** (bitlen - 3)))\n                maybe_underflow_elems = self.backend.find_indices(self.backend.greater(- 2 ** (bitlen - 3), new_val))\n                \"\"\"", "\n", "maybe_overflow_elems", "=", "self", ".", "backend", ".", "greater", "(", "new_val", ",", "2", "**", "(", "bitlen", "-", "3", ")", ")", "\n", "maybe_underflow_elems", "=", "self", ".", "backend", ".", "greater", "(", "-", "2", "**", "(", "bitlen", "-", "3", ")", ",", "new_val", ")", "\n", "self", ".", "peer", ".", "send", "(", "self", ".", "other_player", ",", "\"overflow, underflow\"", ",", "\n", "(", "self", ".", "backend", ".", "pack_bits", "(", "maybe_overflow_elems", ")", ",", "self", ".", "backend", ".", "pack_bits", "(", "maybe_underflow_elems", ")", ")", ")", "\n", "", "else", ":", "\n", "                ", "maybe_underflow_elems", ",", "maybe_overflow_elems", "=", "self", ".", "peer", ".", "recv", "(", "self", ".", "other_player", ",", "\"overflow, underflow\"", ")", "\n", "maybe_underflow_elems", "=", "self", ".", "backend", ".", "unpack_bits", "(", "maybe_underflow_elems", ")", "\n", "maybe_overflow_elems", "=", "self", ".", "backend", ".", "unpack_bits", "(", "maybe_overflow_elems", ")", "\n", "\n", "", "new_overflow_vals", "=", "self", ".", "backend", ".", "sub", "(", "self", ".", "backend", ".", "select_by_indicator", "(", "new_val", ",", "maybe_overflow_elems", ")", ",", "2", "**", "(", "bitlen", "-", "3", ")", ")", "\n", "self", ".", "backend", ".", "set_by_indicator", "(", "new_val", ",", "maybe_overflow_elems", ",", "new_overflow_vals", ")", "\n", "new_underflow_vals", "=", "self", ".", "backend", ".", "add", "(", "self", ".", "backend", ".", "select_by_indicator", "(", "new_val", ",", "maybe_underflow_elems", ")", ",", "2", "**", "(", "bitlen", "-", "3", ")", ")", "\n", "self", ".", "backend", ".", "set_by_indicator", "(", "new_val", ",", "maybe_underflow_elems", ",", "new_underflow_vals", ")", "\n", "return", "self", ".", "tfactory", ".", "shared", "(", "self", ".", "backend", ".", "recode", "(", "new_val", ")", ")", "\n", "\n", "", "triple", "=", "self", ".", "_get_triple", "(", "f\"{mul_op.__qualname__}\"", ",", "mul_op", ",", "tensor0", ".", "shape", ",", "tensor1", ".", "shape", ")", "\n", "if", "self", ".", "is_third_party", ":", "\n", "            ", "return", "self", ".", "tfactory", ".", "shared", "(", "self", ".", "backend", ".", "zeros", "(", "self", ".", "backend", ".", "get_shape", "(", "triple", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "u", ",", "v", ",", "w", "=", "triple", "\n", "x_sub_u_self", "=", "self", ".", "backend", ".", "sub", "(", "tensor0", ".", "value", ",", "u", ")", "\n", "y_sub_v_self", "=", "self", ".", "backend", ".", "sub", "(", "tensor1", ".", "value", ",", "v", ")", "\n", "\n", "if", "self", ".", "role", "==", "\"player0\"", ":", "\n", "                ", "self", ".", "peer", ".", "send", "(", "self", ".", "other_player", ",", "\"mul-x_sub_u, y_sub_v\"", ",", "(", "x_sub_u_self", ",", "y_sub_v_self", ")", ")", "\n", "# The overflow elements for player1 is the underflow elements for player0, so must swap", "\n", "x_sub_u_other", ",", "y_sub_v_other", ",", "maybe_underflow_elems", ",", "maybe_overflow_elems", "=", "self", ".", "peer", ".", "recv", "(", "self", ".", "other_player", ",", "\"mul-x_sub_u, y_sub_v, overflow, underflow\"", ")", "\n", "maybe_underflow_elems", "=", "self", ".", "backend", ".", "unpack_bits", "(", "maybe_underflow_elems", ")", "\n", "maybe_overflow_elems", "=", "self", ".", "backend", ".", "unpack_bits", "(", "maybe_overflow_elems", ")", "\n", "\n", "\n", "x_sub_u", "=", "self", ".", "backend", ".", "add", "(", "x_sub_u_self", ",", "x_sub_u_other", ")", "\n", "y_sub_v", "=", "self", ".", "backend", ".", "add", "(", "y_sub_v_self", ",", "y_sub_v_other", ")", "\n", "x_mul_y_self", "=", "self", ".", "backend", ".", "add", "(", "self", ".", "backend", ".", "add", "(", "mul_op", "(", "x_sub_u", ",", "v", ")", ",", "mul_op", "(", "u", ",", "y_sub_v", ")", ")", ",", "w", ")", "\n", "x_mul_y_self", "=", "self", ".", "backend", ".", "add", "(", "x_mul_y_self", ",", "mul_op", "(", "x_sub_u", ",", "y_sub_v", ")", ")", "\n", "\n", "", "else", ":", "\n", "                ", "x_sub_u_other", ",", "y_sub_v_other", "=", "self", ".", "peer", ".", "recv", "(", "self", ".", "other_player", ",", "\"mul-x_sub_u, y_sub_v\"", ")", "\n", "x_sub_u", "=", "self", ".", "backend", ".", "add", "(", "x_sub_u_self", ",", "x_sub_u_other", ")", "\n", "y_sub_v", "=", "self", ".", "backend", ".", "add", "(", "y_sub_v_self", ",", "y_sub_v_other", ")", "\n", "\n", "x_mul_y_self", "=", "self", ".", "backend", ".", "add", "(", "self", ".", "backend", ".", "add", "(", "mul_op", "(", "x_sub_u", ",", "v", ")", ",", "mul_op", "(", "u", ",", "y_sub_v", ")", ")", ",", "w", ")", "\n", "'''\n                maybe_overflow_elems = self.backend.find_indices(\n                    self.backend.greater(x_mul_y_self, 2 ** (bitlen - 3)))\n\n                maybe_underflow_elems = self.backend.find_indices(\n                    self.backend.greater(- 2 ** (bitlen - 3), x_mul_y_self))\n                '''", "\n", "maybe_overflow_elems", "=", "self", ".", "backend", ".", "greater", "(", "x_mul_y_self", ",", "2", "**", "(", "bitlen", "-", "3", ")", ")", "\n", "\n", "maybe_underflow_elems", "=", "self", ".", "backend", ".", "greater", "(", "-", "2", "**", "(", "bitlen", "-", "3", ")", ",", "x_mul_y_self", ")", "\n", "\n", "self", ".", "peer", ".", "send", "(", "self", ".", "other_player", ",", "\"mul-x_sub_u, y_sub_v, overflow, underflow\"", ",", "\n", "(", "x_sub_u_self", ",", "y_sub_v_self", ",", "\n", "self", ".", "backend", ".", "pack_bits", "(", "maybe_overflow_elems", ")", ",", "\n", "self", ".", "backend", ".", "pack_bits", "(", "maybe_underflow_elems", ")", ")", ")", "\n", "\n", "\n", "", "new_underflow_vals", "=", "self", ".", "backend", ".", "add", "(", "\n", "self", ".", "backend", ".", "select_by_indicator", "(", "x_mul_y_self", ",", "maybe_underflow_elems", ")", ",", "2", "**", "(", "bitlen", "-", "3", ")", ")", "\n", "self", ".", "backend", ".", "set_by_indicator", "(", "x_mul_y_self", ",", "maybe_underflow_elems", ",", "new_underflow_vals", ")", "\n", "\n", "new_overflow_vals", "=", "self", ".", "backend", ".", "sub", "(", "\n", "self", ".", "backend", ".", "select_by_indicator", "(", "x_mul_y_self", ",", "maybe_overflow_elems", ")", ",", "2", "**", "(", "bitlen", "-", "3", ")", ")", "\n", "\n", "self", ".", "backend", ".", "set_by_indicator", "(", "x_mul_y_self", ",", "maybe_underflow_elems", ",", "new_underflow_vals", ")", "\n", "self", ".", "backend", ".", "set_by_indicator", "(", "x_mul_y_self", ",", "maybe_overflow_elems", ",", "new_overflow_vals", ")", "\n", "\n", "return", "self", ".", "tfactory", ".", "shared", "(", "self", ".", "backend", ".", "recode", "(", "x_mul_y_self", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Player.ASPlayer.ASPlayer.mul": [[321, 323], ["ASPlayer.ASPlayer._op_mul"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.Player.ASPlayer.ASPlayer._op_mul"], ["", "", "def", "mul", "(", "self", ",", "tensor0", ":", "Union", "[", "Tensor", ",", "np", ".", "ndarray", ",", "float", ",", "int", "]", ",", "tensor1", ":", "[", "Tensor", ",", "np", ".", "ndarray", ",", "float", ",", "int", "]", ")", "->", "Tensor", ":", "\n", "        ", "return", "self", ".", "_op_mul", "(", "self", ".", "backend", ".", "mul", ",", "tensor0", ",", "tensor1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Player.ASPlayer.ASPlayer.matmul": [[324, 326], ["ASPlayer.ASPlayer._op_mul"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.Player.ASPlayer.ASPlayer._op_mul"], ["", "def", "matmul", "(", "self", ",", "tensor0", ":", "Union", "[", "Tensor", ",", "np", ".", "ndarray", ",", "float", ",", "int", "]", ",", "tensor1", ":", "[", "Tensor", ",", "np", ".", "ndarray", ",", "float", ",", "int", "]", ")", "->", "Tensor", ":", "\n", "        ", "return", "self", ".", "_op_mul", "(", "self", ".", "backend", ".", "matmul", ",", "tensor0", ",", "tensor1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Player.ASPlayer.ASPlayer.square": [[327, 329], ["ASPlayer.ASPlayer.mul"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.mul"], ["", "def", "square", "(", "self", ",", "tensor", ":", "Union", "[", "Tensor", ",", "np", ".", "ndarray", "]", ")", "->", "Tensor", ":", "\n", "        ", "return", "self", ".", "mul", "(", "tensor", ",", "tensor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Player.ASPlayer.ASPlayer.select": [[330, 333], ["ASPlayer.auto_to_tensor_as", "ASPlayer.ASPlayer.tfactory.tensor", "ASPlayer.ASPlayer.backend.select"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.Player.ASPlayer.auto_to_tensor_as", "home.repos.pwc.inspect_result.zfscgy_Amber.Base.TensorBase.TensorFactory.tensor", "home.repos.pwc.inspect_result.zfscgy_Amber.Player.LocalPlayer.LocalPlayer.select"], ["", "@", "auto_to_tensor_as", "(", "arg_indices", "=", "[", "0", ",", "1", "]", ")", "\n", "def", "select", "(", "self", ",", "tensor", ":", "Union", "[", "Tensor", ",", "np", ".", "ndarray", "]", ",", "indices", ":", "Union", "[", "Tensor", ",", "np", ".", "ndarray", "]", ",", "axis", ":", "int", ")", "->", "Tensor", ":", "\n", "        ", "return", "self", ".", "tfactory", ".", "tensor", "(", "self", ".", "backend", ".", "select", "(", "tensor", ".", "value", ",", "indices", ".", "value", ",", "axis", ")", ",", "tensor", ".", "type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Player.ASPlayer.ASPlayer.broadcast": [[334, 337], ["ASPlayer.auto_to_tensor_as", "ASPlayer.ASPlayer.tfactory.tensor", "ASPlayer.ASPlayer.backend.broadcast"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.Player.ASPlayer.auto_to_tensor_as", "home.repos.pwc.inspect_result.zfscgy_Amber.Base.TensorBase.TensorFactory.tensor", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.broadcast"], ["", "@", "auto_to_tensor_as", "(", "arg_indices", "=", "[", "0", "]", ")", "\n", "def", "broadcast", "(", "self", ",", "tensor", ":", "Union", "[", "Tensor", ",", "np", ".", "ndarray", "]", ",", "shape", ":", "Tuple", "[", "int", ",", "...", "]", ")", "->", "Tensor", ":", "\n", "        ", "return", "self", ".", "tfactory", ".", "tensor", "(", "self", ".", "backend", ".", "broadcast", "(", "tensor", ".", "value", ",", "shape", ")", ",", "tensor", ".", "type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Player.ASPlayer.ASPlayer.reshape": [[338, 341], ["ASPlayer.auto_to_tensor_as", "ASPlayer.ASPlayer.tfactory.tensor", "ASPlayer.ASPlayer.backend.reshape"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.Player.ASPlayer.auto_to_tensor_as", "home.repos.pwc.inspect_result.zfscgy_Amber.Base.TensorBase.TensorFactory.tensor", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.reshape"], ["", "@", "auto_to_tensor_as", "(", "arg_indices", "=", "[", "0", "]", ")", "\n", "def", "reshape", "(", "self", ",", "tensor", ":", "Union", "[", "Tensor", ",", "np", ".", "ndarray", "]", ",", "shape", ":", "Tuple", "[", "int", ",", "...", "]", ")", "->", "Tensor", ":", "\n", "        ", "return", "self", ".", "tfactory", ".", "tensor", "(", "self", ".", "backend", ".", "reshape", "(", "tensor", ".", "value", ",", "shape", ")", ",", "tensor", ".", "type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Player.ASPlayer.ASPlayer.transpose": [[342, 345], ["ASPlayer.auto_to_tensor_as", "ASPlayer.ASPlayer.tfactory.tensor", "ASPlayer.ASPlayer.backend.transpose"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.Player.ASPlayer.auto_to_tensor_as", "home.repos.pwc.inspect_result.zfscgy_Amber.Base.TensorBase.TensorFactory.tensor", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.transpose"], ["", "@", "auto_to_tensor_as", "(", "arg_indices", "=", "[", "0", "]", ")", "\n", "def", "transpose", "(", "self", ",", "tensor", ":", "Union", "[", "Tensor", ",", "np", ".", "ndarray", "]", ",", "idx1", ":", "int", ",", "idx2", ":", "int", ")", "->", "Tensor", ":", "\n", "        ", "return", "self", ".", "tfactory", ".", "tensor", "(", "self", ".", "backend", ".", "transpose", "(", "tensor", ".", "value", ",", "idx1", ",", "idx2", ")", ",", "tensor", ".", "type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Player.ASPlayer.ASPlayer.concat": [[346, 352], ["ASPlayer.auto_to_tensor_as", "ASPlayer.ASPlayer.tfactory.tensor", "ASPlayer.ASPlayer.backend.concat", "PlayerException"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.Player.ASPlayer.auto_to_tensor_as", "home.repos.pwc.inspect_result.zfscgy_Amber.Base.TensorBase.TensorFactory.tensor", "home.repos.pwc.inspect_result.zfscgy_Amber.Player.LocalPlayer.LocalPlayer.concat"], ["", "@", "auto_to_tensor_as", "(", "arg_indices", "=", "[", "0", "]", ")", "\n", "def", "concat", "(", "self", ",", "tensors", ":", "List", "[", "Tensor", "]", ",", "axis", ":", "int", ")", "->", "Tensor", ":", "\n", "        ", "for", "tensor", "in", "tensors", "[", "1", ":", "]", ":", "\n", "            ", "if", "tensor", ".", "type", "!=", "tensors", "[", "0", "]", ".", "type", ":", "\n", "                ", "raise", "PlayerException", "(", "f\"Player.concat: must be the same type. But {tensor.type} != {tensors[0].type}\"", ")", "\n", "", "", "return", "self", ".", "tfactory", ".", "tensor", "(", "self", ".", "backend", ".", "concat", "(", "[", "t", ".", "value", "for", "t", "in", "tensors", "]", ",", "axis", ")", ",", "tensors", "[", "0", "]", ".", "type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Player.ASPlayer.ASPlayer.sum": [[353, 362], ["ASPlayer.auto_to_tensor_as", "isinstance", "ASPlayer.ASPlayer.tfactory.tensor", "ASPlayer.ASPlayer.tfactory.tensor", "ASPlayer.ASPlayer.backend.sum", "ASPlayer.ASPlayer.backend.sum", "PlayerException"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.Player.ASPlayer.auto_to_tensor_as", "home.repos.pwc.inspect_result.zfscgy_Amber.Base.TensorBase.TensorFactory.tensor", "home.repos.pwc.inspect_result.zfscgy_Amber.Base.TensorBase.TensorFactory.tensor", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.sum", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.sum"], ["", "@", "auto_to_tensor_as", "(", "arg_indices", "=", "[", "0", "]", ")", "\n", "def", "sum", "(", "self", ",", "tensor", ":", "Union", "[", "Tensor", ",", "np", ".", "ndarray", ",", "List", "[", "Tensor", "]", "]", ",", "axis", ":", "Tuple", "[", "int", ",", "...", "]", "=", "None", ")", "->", "Tensor", ":", "\n", "        ", "if", "isinstance", "(", "tensor", ",", "List", ")", ":", "\n", "            ", "for", "t", "in", "tensor", ":", "\n", "                ", "if", "t", ".", "type", "!=", "tensor", "[", "0", "]", ".", "type", ":", "\n", "                    ", "raise", "PlayerException", "(", "f\"Player.sum: must be the same type. But {t.type} != {tensor[0].type}\"", ")", "\n", "", "", "return", "self", ".", "tfactory", ".", "tensor", "(", "self", ".", "backend", ".", "sum", "(", "[", "t", ".", "value", "for", "t", "in", "tensor", "]", ",", "axis", ")", ",", "tensor", "[", "0", "]", ".", "type", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "tfactory", ".", "tensor", "(", "self", ".", "backend", ".", "sum", "(", "tensor", ".", "value", ",", "axis", ")", ",", "tensor", ".", "type", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.zfscgy_Amber.Player.ASPlayer.auto_to_tensor_as": [[8, 39], ["list", "f", "isinstance", "isinstance", "isinstance", "ASPlayer..tfactory.local", "isinstance", "enumerate", "ASPlayer..backend.encode", "isinstance", "convert_to_tensor"], "function", ["home.repos.pwc.inspect_result.zfscgy_Amber.Base.TensorBase.TensorFactory.local", "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.Backend.encode"], ["def", "auto_to_tensor_as", "(", "arg_indices", "=", "None", ")", ":", "\n", "    ", "def", "inner_func", "(", "f", ":", "Callable", ")", ":", "\n", "        ", "def", "convert_to_tensor", "(", "_self", ",", "x", ")", ":", "\n", "            ", "if", "isinstance", "(", "x", ",", "np", ".", "ndarray", ")", "or", "isinstance", "(", "x", ",", "float", ")", "or", "isinstance", "(", "x", ",", "int", ")", ":", "\n", "                ", "return", "_self", ".", "tfactory", ".", "local", "(", "_self", ".", "backend", ".", "encode", "(", "x", ")", ")", "\n", "", "elif", "isinstance", "(", "x", ",", "Tensor", ")", ":", "\n", "                ", "return", "x", "\n", "# A list of tensors", "\n", "", "elif", "isinstance", "(", "x", ",", "List", ")", ":", "\n", "                ", "for", "i", ",", "v", "in", "enumerate", "(", "x", ")", ":", "\n", "                    ", "if", "isinstance", "(", "v", ",", "Tensor", ")", ":", "\n", "                        ", "pass", "\n", "", "elif", "isinstance", "(", "v", ",", "np", ".", "ndarray", ")", ":", "\n", "                        ", "x", "[", "i", "]", "=", "_self", ".", "tfactory", ".", "local", "(", "_self", ".", "backend", ".", "encode", "(", "x", ")", ")", "\n", "", "else", ":", "\n", "                        ", "PlayerException", "(", "f\"convert_to_tensor: cannot convert type {x.__class__} to tensor\"", ")", "\n", "\n", "", "", "", "else", ":", "\n", "                ", "raise", "PlayerException", "(", "f\"convert_to_tensor: cannot convert type {x.__class__} to tensor\"", ")", "\n", "\n", "", "", "def", "wrapper", "(", "_self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "            ", "args", "=", "list", "(", "args", ")", "\n", "if", "arg_indices", "is", "None", ":", "\n", "                ", "for", "i", ",", "arg", "in", "enumerate", "(", "args", ")", ":", "\n", "                    ", "args", "[", "i", "]", "=", "convert_to_tensor", "(", "_self", ",", "arg", ")", "\n", "", "", "else", ":", "\n", "                ", "for", "arg_idx", "in", "arg_indices", ":", "\n", "                    ", "args", "[", "arg_idx", "]", "=", "convert_to_tensor", "(", "_self", ",", "args", "[", "arg_idx", "]", ")", "\n", "", "", "return", "f", "(", "_self", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "", "return", "wrapper", "\n", "", "return", "inner_func", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Player.LocalPlayer.LocalPlayer.__init__": [[39, 43], ["Player.__init__", "NumpyBackend"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Reshape.__init__"], ["    ", "def", "__init__", "(", "self", ",", "backend", ":", "NumpyBackend", "=", "None", ")", ":", "\n", "        ", "if", "backend", "is", "None", ":", "\n", "            ", "backend", "=", "NumpyBackend", "(", ")", "\n", "", "super", "(", "LocalPlayer", ",", "self", ")", ".", "__init__", "(", "backend", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Player.LocalPlayer.LocalPlayer.new_tensor": [[44, 52], ["LocalPlayer.LocalPlayer.tfactory.local", "np.array", "tensor_getter"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.Base.TensorBase.TensorFactory.local"], ["", "def", "new_tensor", "(", "self", ",", "tensor_getter", ":", "Callable", "[", "[", "]", ",", "Union", "[", "int", ",", "float", ",", "np", ".", "ndarray", "]", "]", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        :param tensor_getter: A function that will only executed on the owner's machine\n        :param owner: player0 or player1\n        :return: A shared tensor\n        \"\"\"", "\n", "tensor", "=", "self", ".", "tfactory", ".", "local", "(", "np", ".", "array", "(", "tensor_getter", "(", ")", ")", ")", "\n", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Player.LocalPlayer.LocalPlayer.neg": [[53, 56], ["LocalPlayer.auto_to_tensor", "LocalPlayer.LocalPlayer.backend.neg"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.Player.LocalPlayer.auto_to_tensor", "home.repos.pwc.inspect_result.zfscgy_Amber.Player.LocalPlayer.LocalPlayer.neg"], ["", "@", "auto_to_tensor", "(", ")", "\n", "def", "neg", "(", "self", ",", "tensor0", ":", "Union", "[", "Tensor", ",", "np", ".", "ndarray", ",", "float", ",", "int", "]", ")", ":", "\n", "        ", "return", "self", ".", "backend", ".", "neg", "(", "tensor0", ".", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Player.LocalPlayer.LocalPlayer.add": [[57, 60], ["LocalPlayer.auto_to_tensor", "LocalPlayer.LocalPlayer.backend.add"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.Player.LocalPlayer.auto_to_tensor", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.add"], ["", "@", "auto_to_tensor", "(", "arg_indices", "=", "[", "0", ",", "1", "]", ")", "\n", "def", "add", "(", "self", ",", "tensor0", ":", "Union", "[", "Tensor", ",", "np", ".", "ndarray", ",", "float", ",", "int", "]", ",", "tensor1", ":", "[", "Tensor", ",", "np", ".", "ndarray", ",", "float", ",", "int", "]", ")", "->", "Tensor", ":", "\n", "        ", "return", "self", ".", "backend", ".", "add", "(", "tensor0", ".", "value", ",", "tensor1", ".", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Player.LocalPlayer.LocalPlayer.sub": [[61, 64], ["LocalPlayer.auto_to_tensor", "LocalPlayer.LocalPlayer.backend.sub"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.Player.LocalPlayer.auto_to_tensor", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.sub"], ["", "@", "auto_to_tensor", "(", "arg_indices", "=", "[", "0", ",", "1", "]", ")", "\n", "def", "sub", "(", "self", ",", "tensor0", ":", "Union", "[", "Tensor", ",", "np", ".", "ndarray", ",", "float", ",", "int", "]", ",", "tensor1", ":", "[", "Tensor", ",", "np", ".", "ndarray", ",", "float", ",", "int", "]", ")", "->", "Tensor", ":", "\n", "        ", "return", "self", ".", "backend", ".", "sub", "(", "tensor0", ".", "value", ",", "tensor1", ".", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Player.LocalPlayer.LocalPlayer.mul": [[65, 68], ["LocalPlayer.auto_to_tensor", "LocalPlayer.LocalPlayer.backend.mul"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.Player.LocalPlayer.auto_to_tensor", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.mul"], ["", "@", "auto_to_tensor", "(", "arg_indices", "=", "[", "0", ",", "1", "]", ")", "\n", "def", "mul", "(", "self", ",", "tensor0", ":", "Union", "[", "Tensor", ",", "np", ".", "ndarray", ",", "float", ",", "int", "]", ",", "tensor1", ":", "[", "Tensor", ",", "np", ".", "ndarray", ",", "float", ",", "int", "]", ")", "->", "Tensor", ":", "\n", "        ", "return", "self", ".", "backend", ".", "mul", "(", "tensor0", ".", "value", ",", "tensor1", ".", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Player.LocalPlayer.LocalPlayer.matmul": [[69, 72], ["LocalPlayer.auto_to_tensor", "LocalPlayer.LocalPlayer.backend.matmul"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.Player.LocalPlayer.auto_to_tensor", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.matmul"], ["", "@", "auto_to_tensor", "(", "arg_indices", "=", "[", "0", ",", "1", "]", ")", "\n", "def", "matmul", "(", "self", ",", "tensor0", ":", "Union", "[", "Tensor", ",", "np", ".", "ndarray", ",", "float", ",", "int", "]", ",", "tensor1", ":", "[", "Tensor", ",", "np", ".", "ndarray", ",", "float", ",", "int", "]", ")", "->", "Tensor", ":", "\n", "        ", "return", "self", ".", "backend", ".", "matmul", "(", "tensor0", ".", "value", ",", "tensor1", ".", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Player.LocalPlayer.LocalPlayer.square": [[73, 76], ["LocalPlayer.auto_to_tensor", "LocalPlayer.LocalPlayer.backend.square"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.Player.LocalPlayer.auto_to_tensor", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.square"], ["", "@", "auto_to_tensor", "(", ")", "\n", "def", "square", "(", "self", ",", "tensor", ":", "Union", "[", "Tensor", ",", "np", ".", "ndarray", "]", ")", "->", "Tensor", ":", "\n", "        ", "return", "self", ".", "backend", ".", "square", "(", "tensor", ".", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Player.LocalPlayer.LocalPlayer.sigmoid": [[77, 80], ["LocalPlayer.auto_to_tensor", "LocalPlayer.LocalPlayer.backend.sigmoid"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.Player.LocalPlayer.auto_to_tensor", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.sigmoid"], ["", "@", "auto_to_tensor", "(", ")", "\n", "def", "sigmoid", "(", "self", ",", "tensor", ":", "Union", "[", "Tensor", ",", "np", ".", "ndarray", "]", ")", "->", "Tensor", ":", "\n", "        ", "return", "self", ".", "backend", ".", "sigmoid", "(", "tensor", ".", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Player.LocalPlayer.LocalPlayer.tanh": [[81, 84], ["LocalPlayer.auto_to_tensor", "LocalPlayer.LocalPlayer.backend.tanh"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.Player.LocalPlayer.auto_to_tensor", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.tanh"], ["", "@", "auto_to_tensor", "(", ")", "\n", "def", "tanh", "(", "self", ",", "tensor", ":", "Union", "[", "Tensor", ",", "np", ".", "ndarray", "]", ")", "->", "Tensor", ":", "\n", "        ", "return", "self", ".", "backend", ".", "tanh", "(", "tensor", ".", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Player.LocalPlayer.LocalPlayer.relu": [[85, 88], ["LocalPlayer.auto_to_tensor", "LocalPlayer.LocalPlayer.backend.relu"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.Player.LocalPlayer.auto_to_tensor", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.relu"], ["", "@", "auto_to_tensor", "(", "arg_indices", "=", "[", "0", "]", ")", "\n", "def", "relu", "(", "self", ",", "tensor", ":", "Union", "[", "Tensor", ",", "np", ".", "ndarray", "]", ",", "k", ":", "float", ")", "->", "Tensor", ":", "\n", "        ", "return", "self", ".", "backend", ".", "relu", "(", "tensor", ".", "value", ",", "k", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Player.LocalPlayer.LocalPlayer.relu_grad": [[89, 92], ["LocalPlayer.auto_to_tensor", "LocalPlayer.LocalPlayer.backend.relu_grad"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.Player.LocalPlayer.auto_to_tensor", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.relu_grad"], ["", "@", "auto_to_tensor", "(", "arg_indices", "=", "[", "0", "]", ")", "\n", "def", "relu_grad", "(", "self", ",", "tensor", ":", "Union", "[", "Tensor", ",", "np", ".", "ndarray", "]", ",", "k", ":", "float", ")", "->", "Tensor", ":", "\n", "        ", "return", "self", ".", "backend", ".", "relu_grad", "(", "tensor", ".", "value", ",", "k", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Player.LocalPlayer.LocalPlayer.select": [[93, 96], ["LocalPlayer.auto_to_tensor", "LocalPlayer.LocalPlayer.backend.select"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.Player.LocalPlayer.auto_to_tensor", "home.repos.pwc.inspect_result.zfscgy_Amber.Player.LocalPlayer.LocalPlayer.select"], ["", "@", "auto_to_tensor", "(", "arg_indices", "=", "[", "0", ",", "1", "]", ")", "\n", "def", "select", "(", "self", ",", "tensor", ":", "Union", "[", "Tensor", ",", "np", ".", "ndarray", "]", ",", "indices", ":", "Union", "[", "Tensor", ",", "np", ".", "ndarray", "]", ",", "axis", ":", "int", ")", "->", "Tensor", ":", "\n", "        ", "return", "self", ".", "backend", ".", "select", "(", "tensor", ".", "value", ",", "indices", ".", "value", ",", "axis", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Player.LocalPlayer.LocalPlayer.broadcast": [[97, 100], ["LocalPlayer.auto_to_tensor", "LocalPlayer.LocalPlayer.backend.broadcast"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.Player.LocalPlayer.auto_to_tensor", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.broadcast"], ["", "@", "auto_to_tensor", "(", "arg_indices", "=", "[", "0", "]", ")", "\n", "def", "broadcast", "(", "self", ",", "tensor", ":", "Union", "[", "Tensor", ",", "np", ".", "ndarray", "]", ",", "shape", ":", "Tuple", "[", "int", ",", "...", "]", ")", "->", "Tensor", ":", "\n", "        ", "return", "self", ".", "backend", ".", "broadcast", "(", "tensor", ".", "value", ",", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Player.LocalPlayer.LocalPlayer.reshape": [[101, 104], ["LocalPlayer.auto_to_tensor", "LocalPlayer.LocalPlayer.backend.reshape"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.Player.LocalPlayer.auto_to_tensor", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.reshape"], ["", "@", "auto_to_tensor", "(", "arg_indices", "=", "[", "0", "]", ")", "\n", "def", "reshape", "(", "self", ",", "tensor", ":", "Union", "[", "Tensor", ",", "np", ".", "ndarray", "]", ",", "shape", ":", "Tuple", "[", "int", ",", "...", "]", ")", "->", "Tensor", ":", "\n", "        ", "return", "self", ".", "backend", ".", "reshape", "(", "tensor", ".", "value", ",", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Player.LocalPlayer.LocalPlayer.transpose": [[105, 108], ["LocalPlayer.auto_to_tensor", "LocalPlayer.LocalPlayer.backend.transpose"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.Player.LocalPlayer.auto_to_tensor", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.transpose"], ["", "@", "auto_to_tensor", "(", "arg_indices", "=", "[", "0", "]", ")", "\n", "def", "transpose", "(", "self", ",", "tensor", ":", "Union", "[", "Tensor", ",", "np", ".", "ndarray", "]", ",", "idx1", ":", "int", ",", "idx2", ":", "int", ")", "->", "Tensor", ":", "\n", "        ", "return", "self", ".", "backend", ".", "transpose", "(", "tensor", ".", "value", ",", "idx1", ",", "idx2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Player.LocalPlayer.LocalPlayer.concat": [[109, 112], ["LocalPlayer.auto_to_tensor", "LocalPlayer.LocalPlayer.backend.concat"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.Player.LocalPlayer.auto_to_tensor", "home.repos.pwc.inspect_result.zfscgy_Amber.Player.LocalPlayer.LocalPlayer.concat"], ["", "@", "auto_to_tensor", "(", "arg_indices", "=", "[", "0", "]", ")", "\n", "def", "concat", "(", "self", ",", "tensors", ":", "List", "[", "Tensor", "]", ",", "axis", ":", "int", ")", "->", "Tensor", ":", "\n", "        ", "return", "self", ".", "backend", ".", "concat", "(", "[", "t", ".", "value", "for", "t", "in", "tensors", "]", ",", "axis", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Player.LocalPlayer.LocalPlayer.sum": [[113, 116], ["LocalPlayer.auto_to_tensor", "LocalPlayer.LocalPlayer.backend.sum"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.Player.LocalPlayer.auto_to_tensor", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.sum"], ["", "@", "auto_to_tensor", "(", "arg_indices", "=", "[", "0", "]", ")", "\n", "def", "sum", "(", "self", ",", "tensor", ":", "Union", "[", "Tensor", ",", "np", ".", "ndarray", ",", "List", "[", "Tensor", "]", "]", ",", "axis", ":", "Tuple", "[", "int", ",", "...", "]", "=", "None", ")", "->", "Tensor", ":", "\n", "        ", "return", "self", ".", "backend", ".", "sum", "(", "tensor", ".", "value", ",", "axis", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Player.LocalPlayer.LocalPlayer.mean": [[117, 120], ["LocalPlayer.auto_to_tensor", "LocalPlayer.LocalPlayer.backend.mean"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.Player.LocalPlayer.auto_to_tensor", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.mean"], ["", "@", "auto_to_tensor", "(", ")", "\n", "def", "mean", "(", "self", ",", "tensor", ":", "Union", "[", "Tensor", ",", "np", ".", "ndarray", ",", "List", "[", "Tensor", "]", "]", ",", "axis", ":", "Tuple", "[", "int", ",", "...", "]", "=", "None", ")", "->", "Tensor", ":", "\n", "        ", "return", "self", ".", "backend", ".", "mean", "(", "tensor", ".", "value", ",", "axis", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Player.LocalPlayer.auto_to_tensor": [[4, 36], ["list", "LocalPlayer..tfactory.local", "isinstance", "isinstance", "isinstance", "LocalPlayer..tfactory.local", "isinstance", "enumerate", "f", "LocalPlayer..backend.encode", "isinstance", "convert_to_tensor"], "function", ["home.repos.pwc.inspect_result.zfscgy_Amber.Base.TensorBase.TensorFactory.local", "home.repos.pwc.inspect_result.zfscgy_Amber.Base.TensorBase.TensorFactory.local", "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.Backend.encode"], ["def", "auto_to_tensor", "(", "arg_indices", "=", "None", ")", ":", "\n", "    ", "def", "inner_func", "(", "f", ":", "Callable", ")", ":", "\n", "        ", "def", "convert_to_tensor", "(", "_self", ",", "x", ")", ":", "\n", "            ", "if", "isinstance", "(", "x", ",", "np", ".", "ndarray", ")", "or", "isinstance", "(", "x", ",", "float", ")", "or", "isinstance", "(", "x", ",", "int", ")", ":", "\n", "                ", "return", "_self", ".", "tfactory", ".", "local", "(", "_self", ".", "backend", ".", "encode", "(", "x", ")", ")", "\n", "", "elif", "isinstance", "(", "x", ",", "Tensor", ")", ":", "\n", "                ", "if", "x", ".", "type", "!=", "TensorType", ".", "Local", ":", "\n", "                    ", "raise", "PlayerException", "(", "f\"convert_to_tensor: Tensor type can only be Local but get {x.type.name}\"", ")", "\n", "", "return", "x", "\n", "# A list of tensors", "\n", "", "elif", "isinstance", "(", "x", ",", "List", ")", ":", "\n", "                ", "for", "i", ",", "v", "in", "enumerate", "(", "x", ")", ":", "\n", "                    ", "if", "isinstance", "(", "v", ",", "Tensor", ")", ":", "\n", "                        ", "pass", "\n", "", "elif", "isinstance", "(", "v", ",", "np", ".", "ndarray", ")", ":", "\n", "                        ", "x", "[", "i", "]", "=", "_self", ".", "tfactory", ".", "local", "(", "_self", ".", "backend", ".", "encode", "(", "x", ")", ")", "\n", "", "else", ":", "\n", "                        ", "PlayerException", "(", "f\"convert_to_tensor: cannot convert type {x.__class__} to tensor\"", ")", "\n", "", "", "", "else", ":", "\n", "                ", "raise", "PlayerException", "(", "f\"convert_to_tensor: cannot convert type {x.__class__} to tensor\"", ")", "\n", "\n", "", "", "def", "wrapper", "(", "_self", ",", "*", "args", ")", ":", "\n", "            ", "args", "=", "list", "(", "args", ")", "\n", "if", "arg_indices", "is", "None", ":", "\n", "                ", "for", "i", ",", "arg", "in", "enumerate", "(", "args", ")", ":", "\n", "                    ", "args", "[", "i", "]", "=", "convert_to_tensor", "(", "_self", ",", "arg", ")", "\n", "", "", "else", ":", "\n", "                ", "for", "arg_idx", "in", "arg_indices", ":", "\n", "                    ", "args", "[", "arg_idx", "]", "=", "convert_to_tensor", "(", "_self", ",", "args", "[", "arg_idx", "]", ")", "\n", "", "", "return", "_self", ".", "tfactory", ".", "local", "(", "f", "(", "_self", ",", "*", "args", ")", ")", "\n", "", "return", "wrapper", "\n", "", "return", "inner_func", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Player.RTASPlayer.RTASPlayer.__init__": [[5, 13], ["ASPlayer.__init__", "I64RTASBackend", "NumpyBackend"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Reshape.__init__"], ["    ", "def", "__init__", "(", "self", ",", "role", ":", "str", ",", "addr_dict", ":", "dict", ",", "triple_buffer_size", ":", "int", "=", "512", ",", "\n", "rtas_backend", ":", "RTASBackend", "=", "None", ",", "float_backend", ":", "Backend", "=", "None", ")", ":", "\n", "        ", "if", "rtas_backend", "is", "None", ":", "\n", "            ", "rtas_backend", "=", "I64RTASBackend", "(", "21", ")", "\n", "", "super", "(", "RTASPlayer", ",", "self", ")", ".", "__init__", "(", "role", ",", "addr_dict", ",", "triple_buffer_size", ",", "rtas_backend", ")", "\n", "if", "float_backend", "is", "None", ":", "\n", "            ", "float_backend", "=", "NumpyBackend", "(", ")", "\n", "", "self", ".", "float_backend", "=", "float_backend", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Player.RTASPlayer.RTASPlayer.init_play": [[14, 24], ["super().init_play", "RTASPlayer.RTASPlayer.backend.mod", "RTASPlayer.RTASPlayer.backend.new_rng", "RTASPlayer.RTASPlayer.peer.send", "RTASPlayer.RTASPlayer.backend.random_int", "RTASPlayer.RTASPlayer.backend.new_rng", "RTASPlayer.RTASPlayer.peer.recv"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.Player.RTASPlayer.RTASPlayer.init_play", "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.Backend.mod", "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.Backend.new_rng", "home.repos.pwc.inspect_result.zfscgy_Amber.Comm.Peer.Peer.send", "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.Backend.random_int", "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.Backend.new_rng", "home.repos.pwc.inspect_result.zfscgy_Amber.Comm.Peer.Peer.recv"], ["", "def", "init_play", "(", "self", ")", ":", "\n", "        ", "super", "(", "RTASPlayer", ",", "self", ")", ".", "init_play", "(", ")", "\n", "\n", "# sync seeds for element-wise functions", "\n", "if", "self", ".", "role", "==", "\"third-party\"", ":", "\n", "            ", "seed_ewf", "=", "self", ".", "backend", ".", "mod", "(", "self", ".", "backend", ".", "random_int", "(", ")", ",", "2", "**", "63", ")", "\n", "self", ".", "backend", ".", "new_rng", "(", "\"ewf\"", ",", "seed_ewf", ")", "\n", "self", ".", "peer", ".", "send", "(", "\"player1\"", ",", "\"seed_ewf\"", ",", "seed_ewf", ")", "\n", "", "elif", "self", ".", "role", "==", "\"player1\"", ":", "\n", "            ", "self", ".", "backend", ".", "new_rng", "(", "\"ewf\"", ",", "self", ".", "peer", ".", "recv", "(", "\"third-party\"", ",", "\"seed_ewf\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Player.RTASPlayer.RTASPlayer._element_wise": [[25, 53], ["auto_to_tensor_as", "RTASPlayer.RTASPlayer.tfactory.local", "RTASPlayer.RTASPlayer.backend.sigmoid", "int", "RTASPlayer.RTASPlayer.backend.random_permutation", "RTASPlayer.RTASPlayer.backend.select", "RTASPlayer.RTASPlayer.peer.send", "parallel", "RTASPlayer.RTASPlayer.backend.decode", "op", "RTASPlayer.RTASPlayer.backend.encode", "RTASPlayer.RTASPlayer.backend.random_int", "RTASPlayer.RTASPlayer.backend.sub", "RTASPlayer.RTASPlayer.peer.send", "RTASPlayer.RTASPlayer.tfactory.shared", "RTASPlayer.RTASPlayer.peer.recv", "RTASPlayer.RTASPlayer.tfactory.shared", "RTASPlayer.RTASPlayer.tfactory.shared", "np.prod", "RTASPlayer.RTASPlayer.backend.reshape", "RTASPlayer.RTASPlayer.backend.add", "RTASPlayer.RTASPlayer.tfactory.get_shape", "RTASPlayer.RTASPlayer.backend.zeros", "RTASPlayer.RTASPlayer.backend.reshape", "RTASPlayer.RTASPlayer.backend.reshape", "RTASPlayer.RTASPlayer.backend.select", "RTASPlayer.RTASPlayer.backend.select", "RTASPlayer.RTASPlayer.backend.random_int"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.Player.ASPlayer.auto_to_tensor_as", "home.repos.pwc.inspect_result.zfscgy_Amber.Base.TensorBase.TensorFactory.local", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.sigmoid", "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.RTASBackend.random_permutation", "home.repos.pwc.inspect_result.zfscgy_Amber.Player.LocalPlayer.LocalPlayer.select", "home.repos.pwc.inspect_result.zfscgy_Amber.Comm.Peer.Peer.send", "home.repos.pwc.inspect_result.zfscgy_Amber.Core.Utils.parallel", "home.repos.pwc.inspect_result.zfscgy_Amber.Player.ASPlayer.ASPlayer.decode", "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.Backend.encode", "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.Backend.random_int", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.sub", "home.repos.pwc.inspect_result.zfscgy_Amber.Comm.Peer.Peer.send", "home.repos.pwc.inspect_result.zfscgy_Amber.Base.TensorBase.TensorFactory.shared", "home.repos.pwc.inspect_result.zfscgy_Amber.Comm.Peer.Peer.recv", "home.repos.pwc.inspect_result.zfscgy_Amber.Base.TensorBase.TensorFactory.shared", "home.repos.pwc.inspect_result.zfscgy_Amber.Base.TensorBase.TensorFactory.shared", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.reshape", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.add", "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.Backend.get_shape", "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.Backend.zeros", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.reshape", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.reshape", "home.repos.pwc.inspect_result.zfscgy_Amber.Player.LocalPlayer.LocalPlayer.select", "home.repos.pwc.inspect_result.zfscgy_Amber.Player.LocalPlayer.LocalPlayer.select", "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.Backend.random_int"], ["", "", "@", "auto_to_tensor_as", "(", "arg_indices", "=", "[", "0", "]", ")", "\n", "def", "_element_wise", "(", "self", ",", "tensor", ":", "Union", "[", "Tensor", ",", "np", ".", "ndarray", "]", ",", "op", ":", "Callable", ",", "**", "kwargs", ")", "->", "Tensor", ":", "\n", "        ", "if", "tensor", ".", "type", "==", "TensorType", ".", "Local", ":", "\n", "            ", "return", "self", ".", "tfactory", ".", "local", "(", "self", ".", "backend", ".", "sigmoid", "(", "tensor", ".", "value", ")", ")", "\n", "", "elif", "tensor", ".", "type", "==", "TensorType", ".", "AShared", ":", "\n", "            ", "shape", "=", "tensor", ".", "shape", "\n", "if", "self", ".", "role", "in", "[", "\"player0\"", ",", "\"player1\"", "]", ":", "\n", "                ", "flattened_size", "=", "int", "(", "np", ".", "prod", "(", "shape", ")", ")", "\n", "random_perm", ",", "inv_perm", "=", "self", ".", "backend", ".", "random_permutation", "(", "flattened_size", ")", "\n", "permuted_tensor", "=", "self", ".", "backend", ".", "select", "(", "\n", "self", ".", "backend", ".", "reshape", "(", "tensor", ".", "value", ",", "(", "flattened_size", ",", ")", ")", ",", "random_perm", ",", "0", ")", "\n", "self", ".", "peer", ".", "send", "(", "\"third-party\"", ",", "\"permuted_tensor\"", ",", "permuted_tensor", ")", "\n", "", "else", ":", "\n", "                ", "res", ",", "err", "=", "parallel", "(", "self", ".", "peer", ".", "recv", ",", "[", "(", "\"player0\"", ",", "\"permuted_tensor\"", ")", ",", "(", "\"player1\"", ",", "\"permuted_tensor\"", ")", "]", ")", "\n", "decoded_input", "=", "self", ".", "backend", ".", "decode", "(", "self", ".", "backend", ".", "add", "(", "res", "[", "0", "]", ",", "res", "[", "1", "]", ")", ")", "\n", "decoded_output", "=", "op", "(", "decoded_input", ",", "**", "kwargs", ")", "\n", "encoded_output", "=", "self", ".", "backend", ".", "encode", "(", "decoded_output", ")", "\n", "share1", "=", "self", ".", "backend", ".", "random_int", "(", "self", ".", "tfactory", ".", "get_shape", "(", "encoded_output", ")", ",", "\"ewf\"", ")", "\n", "share0", "=", "self", ".", "backend", ".", "sub", "(", "encoded_output", ",", "share1", ")", "\n", "self", ".", "peer", ".", "send", "(", "\"player0\"", ",", "\"permuted_result\"", ",", "share0", ")", "\n", "return", "self", ".", "tfactory", ".", "shared", "(", "self", ".", "backend", ".", "zeros", "(", "shape", ")", ")", "\n", "\n", "", "if", "self", ".", "role", "==", "\"player0\"", ":", "\n", "                ", "output_share", "=", "self", ".", "peer", ".", "recv", "(", "\"third-party\"", ",", "\"permuted_result\"", ")", "\n", "return", "self", ".", "tfactory", ".", "shared", "(", "self", ".", "backend", ".", "reshape", "(", "self", ".", "backend", ".", "select", "(", "output_share", ",", "inv_perm", ",", "0", ")", ",", "shape", ")", ")", "\n", "", "else", ":", "\n", "                ", "return", "self", ".", "tfactory", ".", "shared", "(", "self", ".", "backend", ".", "reshape", "(", "\n", "self", ".", "backend", ".", "select", "(", "self", ".", "backend", ".", "random_int", "(", "flattened_size", ",", "\"ewf\"", ")", ",", "inv_perm", ",", "0", ")", ",", "shape", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Player.RTASPlayer.RTASPlayer.sigmoid": [[54, 56], ["RTASPlayer.RTASPlayer._element_wise"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.Player.RTASPlayer.RTASPlayer._element_wise"], ["", "", "", "def", "sigmoid", "(", "self", ",", "tensor", ":", "Union", "[", "Tensor", ",", "np", ".", "ndarray", "]", ")", "->", "Tensor", ":", "\n", "        ", "return", "self", ".", "_element_wise", "(", "tensor", ",", "self", ".", "float_backend", ".", "sigmoid", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Player.RTASPlayer.RTASPlayer.tanh": [[57, 59], ["RTASPlayer.RTASPlayer._element_wise"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.Player.RTASPlayer.RTASPlayer._element_wise"], ["", "def", "tanh", "(", "self", ",", "tensor", ":", "Union", "[", "Tensor", ",", "np", ".", "ndarray", "]", ")", "->", "Tensor", ":", "\n", "        ", "return", "self", ".", "_element_wise", "(", "tensor", ",", "self", ".", "float_backend", ".", "tanh", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Player.RTASPlayer.RTASPlayer.relu": [[60, 62], ["RTASPlayer.RTASPlayer._element_wise"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.Player.RTASPlayer.RTASPlayer._element_wise"], ["", "def", "relu", "(", "self", ",", "tensor", ":", "Union", "[", "Tensor", ",", "np", ".", "ndarray", "]", ",", "k", ":", "float", ")", "->", "Tensor", ":", "\n", "        ", "return", "self", ".", "_element_wise", "(", "tensor", ",", "self", ".", "float_backend", ".", "relu", ",", "k", "=", "k", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Player.RTASPlayer.RTASPlayer.relu_grad": [[63, 65], ["RTASPlayer.RTASPlayer._element_wise"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.Player.RTASPlayer.RTASPlayer._element_wise"], ["", "def", "relu_grad", "(", "self", ",", "tensor", ":", "Union", "[", "Tensor", ",", "np", ".", "ndarray", "]", ",", "k", ":", "float", ")", "->", "Tensor", ":", "\n", "        ", "return", "self", ".", "_element_wise", "(", "tensor", ",", "self", ".", "float_backend", ".", "relu_grad", ",", "k", "=", "k", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zfscgy_Amber.Player.test_ASPlayer_I64.test_init_player": [[21, 24], ["Amber.Core.Utils.parallel"], "function", ["home.repos.pwc.inspect_result.zfscgy_Amber.Core.Utils.parallel"], ["def", "test_init_player", "(", ")", ":", "\n", "    ", "outs", ",", "errs", "=", "parallel", "(", "[", "player0", ".", "init_play", ",", "player1", ".", "init_play", ",", "third_party", ".", "init_play", "]", ")", "\n", "assert", "errs", "[", "0", "]", "is", "None", "and", "errs", "[", "1", "]", "is", "None", "and", "errs", "[", "2", "]", "is", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Player.test_ASPlayer_I64.test_new_tensor": [[26, 35], ["Amber.Core.Utils.parallel", "numpy.array", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.zfscgy_Amber.Core.Utils.parallel"], ["", "def", "test_new_tensor", "(", ")", ":", "\n", "    ", "def", "new_value_p0", "(", ")", ":", "\n", "        ", "return", "99", "\n", "\n", "", "outs", ",", "errs", "=", "parallel", "(", "[", "player0", ".", "new_tensor", ",", "player1", ".", "new_tensor", ",", "third_party", ".", "new_tensor", "]", ",", "\n", "[", "(", "new_value_p0", ",", "\"player0\"", ")", ",", "(", "new_value_p0", ",", "\"player0\"", ")", ",", "(", "new_value_p0", ",", "\"player0\"", ")", "]", ")", "\n", "\n", "assert", "errs", "[", "0", "]", "is", "None", "and", "errs", "[", "1", "]", "is", "None", "and", "errs", "[", "2", "]", "is", "None", "\n", "assert", "outs", "[", "0", "]", ".", "value", "==", "np", ".", "array", "(", "99", "*", "2", "**", "24", ")", "and", "outs", "[", "1", "]", ".", "value", "==", "np", ".", "array", "(", "0", ")", "and", "outs", "[", "2", "]", ".", "value", "==", "np", ".", "array", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Player.test_ASPlayer_I64.test_reveal": [[37, 47], ["Amber.Core.Utils.parallel", "Amber.Core.Utils.parallel", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.zfscgy_Amber.Core.Utils.parallel", "home.repos.pwc.inspect_result.zfscgy_Amber.Core.Utils.parallel"], ["", "def", "test_reveal", "(", ")", ":", "\n", "    ", "def", "new_value_p0", "(", ")", ":", "\n", "        ", "return", "99", "\n", "\n", "", "outs", ",", "_", "=", "parallel", "(", "[", "player0", ".", "new_tensor", ",", "player1", ".", "new_tensor", ",", "third_party", ".", "new_tensor", "]", ",", "\n", "[", "(", "new_value_p0", ",", "\"player0\"", ")", ",", "(", "new_value_p0", ",", "\"player0\"", ")", ",", "(", "new_value_p0", ",", "\"player0\"", ")", "]", ")", "\n", "\n", "outs", ",", "errs", "=", "parallel", "(", "[", "player0", ".", "reveal", ",", "player1", ".", "reveal", ",", "third_party", ".", "reveal", "]", ",", "[", "(", "out", ",", ")", "for", "out", "in", "outs", "]", ")", "\n", "assert", "errs", "[", "0", "]", "is", "None", "and", "errs", "[", "1", "]", "is", "None", "and", "errs", "[", "2", "]", "is", "None", "\n", "assert", "outs", "[", "0", "]", ".", "value", "==", "np", ".", "array", "(", "99", "*", "2", "**", "24", ")", "and", "outs", "[", "1", "]", ".", "value", "==", "np", ".", "array", "(", "99", "*", "2", "**", "24", ")", "and", "outs", "[", "2", "]", "is", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Player.test_ASPlayer_I64.test_add": [[49, 72], ["numpy.subtract", "Amber.Core.Utils.parallel", "print", "numpy.array", "numpy.array", "player.new_tensor", "player.new_tensor", "player.sub", "player.reveal", "Amber.Tools.TestUtils.array_close", "Amber.Tools.TestUtils.array_close", "player.decode"], "function", ["home.repos.pwc.inspect_result.zfscgy_Amber.Core.Utils.parallel", "home.repos.pwc.inspect_result.zfscgy_Amber.Player.LocalPlayer.LocalPlayer.new_tensor", "home.repos.pwc.inspect_result.zfscgy_Amber.Player.LocalPlayer.LocalPlayer.new_tensor", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.sub", "home.repos.pwc.inspect_result.zfscgy_Amber.Player.ASPlayer.ASPlayer.reveal", "home.repos.pwc.inspect_result.zfscgy_Amber.Tools.TestUtils.array_close", "home.repos.pwc.inspect_result.zfscgy_Amber.Tools.TestUtils.array_close", "home.repos.pwc.inspect_result.zfscgy_Amber.Player.ASPlayer.ASPlayer.decode"], ["", "def", "test_add", "(", ")", ":", "\n", "    ", "def", "get_mat_x", "(", ")", ":", "\n", "        ", "return", "np", ".", "array", "(", "[", "[", "1", ",", "2", "]", ",", "[", "3", ",", "4", "]", "]", ")", "\n", "\n", "", "def", "get_mat_y", "(", ")", ":", "\n", "        ", "return", "np", ".", "array", "(", "[", "[", "5", ",", "6", "]", ",", "[", "7", ",", "8", "]", "]", ")", "\n", "\n", "", "def", "add", "(", "player", ":", "ASPlayer", ")", ":", "\n", "        ", "x", "=", "player", ".", "new_tensor", "(", "get_mat_x", ",", "\"all\"", ")", "\n", "y", "=", "player", ".", "new_tensor", "(", "get_mat_y", ",", "\"player1\"", ")", "\n", "prod", "=", "player", ".", "sub", "(", "x", ",", "y", ")", "\n", "prod_plain_text", "=", "player", ".", "reveal", "(", "prod", ")", "\n", "if", "player", ".", "is_third_party", ":", "\n", "            ", "return", "prod_plain_text", "\n", "", "else", ":", "\n", "            ", "return", "player", ".", "decode", "(", "prod_plain_text", ")", "\n", "\n", "", "", "desired_out", "=", "np", ".", "subtract", "(", "[", "[", "1", ",", "2", "]", ",", "[", "3", ",", "4", "]", "]", ",", "[", "[", "5", ",", "6", "]", ",", "[", "7", ",", "8", "]", "]", ")", "\n", "\n", "outs", ",", "errs", "=", "parallel", "(", "add", ",", "[", "(", "player0", ",", ")", ",", "(", "player1", ",", ")", ",", "(", "third_party", ",", ")", "]", ")", "\n", "print", "(", "f\"Expected: {desired_out}, get {outs[0]}\"", ")", "\n", "assert", "errs", "[", "0", "]", "is", "None", "and", "errs", "[", "1", "]", "is", "None", "and", "errs", "[", "2", "]", "is", "None", "\n", "assert", "array_close", "(", "outs", "[", "0", "]", ",", "desired_out", ")", "and", "array_close", "(", "outs", "[", "1", "]", ",", "desired_out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Player.test_ASPlayer_I64.test_mul": [[74, 95], ["numpy.random.normal", "numpy.random.normal", "numpy.multiply", "Amber.Core.Utils.parallel", "numpy.max", "player.new_tensor", "player.new_tensor", "player.mul", "player.reveal", "numpy.abs", "Amber.Tools.TestUtils.array_close", "Amber.Tools.TestUtils.array_close", "player.decode"], "function", ["home.repos.pwc.inspect_result.zfscgy_Amber.Core.Utils.parallel", "home.repos.pwc.inspect_result.zfscgy_Amber.Player.LocalPlayer.LocalPlayer.new_tensor", "home.repos.pwc.inspect_result.zfscgy_Amber.Player.LocalPlayer.LocalPlayer.new_tensor", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.mul", "home.repos.pwc.inspect_result.zfscgy_Amber.Player.ASPlayer.ASPlayer.reveal", "home.repos.pwc.inspect_result.zfscgy_Amber.Tools.TestUtils.array_close", "home.repos.pwc.inspect_result.zfscgy_Amber.Tools.TestUtils.array_close", "home.repos.pwc.inspect_result.zfscgy_Amber.Player.ASPlayer.ASPlayer.decode"], ["", "def", "test_mul", "(", ")", ":", "\n", "    ", "x", "=", "np", ".", "random", ".", "normal", "(", "0", ",", "10", ",", "[", "100", "]", ")", "\n", "y", "=", "np", ".", "random", ".", "normal", "(", "0", ",", "10", ",", "[", "100", "]", ")", "\n", "expected_xy", "=", "np", ".", "multiply", "(", "x", ",", "y", ")", "\n", "\n", "def", "mul", "(", "player", ":", "ASPlayer", ")", ":", "\n", "        ", "tensor_x", "=", "player", ".", "new_tensor", "(", "lambda", ":", "x", ")", "\n", "tensor_y", "=", "player", ".", "new_tensor", "(", "lambda", ":", "y", ")", "\n", "xy", "=", "player", ".", "mul", "(", "tensor_x", ",", "tensor_y", ")", "\n", "xy_reveal", "=", "player", ".", "reveal", "(", "xy", ")", "\n", "if", "player", "in", "[", "player0", ",", "player1", "]", ":", "\n", "            ", "xy_reveal", "=", "player", ".", "decode", "(", "xy_reveal", ")", "\n", "", "return", "xy_reveal", "\n", "\n", "", "outs", ",", "errs", "=", "parallel", "(", "mul", ",", "[", "(", "player0", ",", ")", ",", "(", "player1", ",", ")", ",", "(", "third_party", ",", ")", "]", ")", "\n", "\n", "assert", "errs", "[", "0", "]", "is", "None", "and", "errs", "[", "1", "]", "is", "None", "and", "errs", "[", "2", "]", "is", "None", ",", "f\"Error: {errs}\"", "\n", "max_err", "=", "np", ".", "max", "(", "np", ".", "abs", "(", "expected_xy", "-", "outs", "[", "0", "]", ")", ")", "\n", "assert", "array_close", "(", "outs", "[", "0", "]", ",", "expected_xy", ")", "and", "array_close", "(", "outs", "[", "1", "]", ",", "expected_xy", ")", "and", "outs", "[", "2", "]", "is", "None", ",", "f\"Calculation failed, max error: {max_err}\"", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Player.test_ASPlayer_I64.test_mul_local": [[97, 121], ["numpy.random.normal", "numpy.random.normal", "numpy.random.normal", "Amber.Core.Utils.parallel", "numpy.max", "player.new_tensor", "player.new_tensor", "player.new_tensor", "player.matmul", "player.mul", "player.reveal", "numpy.abs", "Amber.Tools.TestUtils.array_close", "Amber.Tools.TestUtils.array_close", "player.decode"], "function", ["home.repos.pwc.inspect_result.zfscgy_Amber.Core.Utils.parallel", "home.repos.pwc.inspect_result.zfscgy_Amber.Player.LocalPlayer.LocalPlayer.new_tensor", "home.repos.pwc.inspect_result.zfscgy_Amber.Player.LocalPlayer.LocalPlayer.new_tensor", "home.repos.pwc.inspect_result.zfscgy_Amber.Player.LocalPlayer.LocalPlayer.new_tensor", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.matmul", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.mul", "home.repos.pwc.inspect_result.zfscgy_Amber.Player.ASPlayer.ASPlayer.reveal", "home.repos.pwc.inspect_result.zfscgy_Amber.Tools.TestUtils.array_close", "home.repos.pwc.inspect_result.zfscgy_Amber.Tools.TestUtils.array_close", "home.repos.pwc.inspect_result.zfscgy_Amber.Player.ASPlayer.ASPlayer.decode"], ["", "def", "test_mul_local", "(", ")", ":", "\n", "    ", "x", "=", "np", ".", "random", ".", "normal", "(", "0", ",", "10", ",", "[", "1", ",", "100", "]", ")", "\n", "y", "=", "np", ".", "random", ".", "normal", "(", "0", ",", "1", ",", "[", "100", ",", "1", "]", ")", "\n", "z", "=", "np", ".", "random", ".", "normal", "(", "0", ",", "10", ",", "[", "1", ",", "1", "]", ")", "\n", "expected_xyz", "=", "(", "x", "@", "y", ")", "*", "z", "\n", "\n", "def", "mul_local", "(", "player", ":", "ASPlayer", ")", ":", "\n", "        ", "tensor_x", "=", "player", ".", "new_tensor", "(", "lambda", ":", "x", ",", "owner", "=", "\"player0\"", ")", "\n", "tensor_y", "=", "player", ".", "new_tensor", "(", "lambda", ":", "y", ",", "owner", "=", "\"player0\"", ")", "\n", "tensor_z", "=", "player", ".", "new_tensor", "(", "lambda", ":", "z", ",", "owner", "=", "\"all\"", ")", "\n", "tensor_xy", "=", "player", ".", "matmul", "(", "tensor_x", ",", "tensor_y", ")", "\n", "tensor_xyz", "=", "player", ".", "mul", "(", "tensor_xy", ",", "tensor_z", ")", "\n", "xyz_reveal", "=", "player", ".", "reveal", "(", "tensor_xyz", ")", "\n", "if", "player", "in", "[", "player0", ",", "player1", "]", ":", "\n", "            ", "xyz_reveal", "=", "player", ".", "decode", "(", "xyz_reveal", ")", "\n", "", "return", "xyz_reveal", "\n", "\n", "", "outs", ",", "errs", "=", "parallel", "(", "mul_local", ",", "[", "(", "player0", ",", ")", ",", "(", "player1", ",", ")", ",", "(", "third_party", ",", ")", "]", ")", "\n", "\n", "assert", "errs", "[", "0", "]", "is", "None", "and", "errs", "[", "1", "]", "is", "None", "and", "errs", "[", "2", "]", "is", "None", ",", "f\"Error: {errs}\"", "\n", "max_err", "=", "np", ".", "max", "(", "np", ".", "abs", "(", "expected_xyz", "-", "outs", "[", "0", "]", ")", ")", "\n", "assert", "array_close", "(", "outs", "[", "0", "]", ",", "expected_xyz", ")", "and", "array_close", "(", "outs", "[", "1", "]", ",", "expected_xyz", ")", "and", "outs", "[", "2", "]", "is", "None", ",", "f\"Calculation failed, max error: {max_err}\"", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Player.test_ASPlayer_I64.test_matmul": [[123, 149], ["numpy.random.normal", "numpy.random.normal", "numpy.matmul", "dict", "Amber.Core.Utils.parallel", "numpy.max", "player.new_tensor", "player.new_tensor", "player.matmul", "player.reveal", "numpy.abs", "Amber.Tools.TestUtils.array_close", "Amber.Tools.TestUtils.array_close", "numpy.random.randint", "numpy.random.randint", "player.decode"], "function", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.matmul", "home.repos.pwc.inspect_result.zfscgy_Amber.Core.Utils.parallel", "home.repos.pwc.inspect_result.zfscgy_Amber.Player.LocalPlayer.LocalPlayer.new_tensor", "home.repos.pwc.inspect_result.zfscgy_Amber.Player.LocalPlayer.LocalPlayer.new_tensor", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.matmul", "home.repos.pwc.inspect_result.zfscgy_Amber.Player.ASPlayer.ASPlayer.reveal", "home.repos.pwc.inspect_result.zfscgy_Amber.Tools.TestUtils.array_close", "home.repos.pwc.inspect_result.zfscgy_Amber.Tools.TestUtils.array_close", "home.repos.pwc.inspect_result.zfscgy_Amber.Player.ASPlayer.ASPlayer.decode"], ["", "def", "test_matmul", "(", ")", ":", "\n", "    ", "x", "=", "np", ".", "random", ".", "normal", "(", "0", ",", "10", ",", "[", "np", ".", "random", ".", "randint", "(", "50", ",", "52", ")", ",", "100", "]", ")", "\n", "y", "=", "np", ".", "random", ".", "normal", "(", "0", ",", "10", ",", "[", "100", ",", "np", ".", "random", ".", "randint", "(", "150", ",", "152", ")", "]", ")", "\n", "expected_xy", "=", "np", ".", "matmul", "(", "x", ",", "y", ")", "\n", "\n", "shares", "=", "dict", "(", ")", "\n", "\n", "def", "matmul", "(", "player", ":", "ASPlayer", ")", ":", "\n", "        ", "nonlocal", "shares", "\n", "player", ".", "disable_triple_buffer", "=", "True", "\n", "tensor_x", "=", "player", ".", "new_tensor", "(", "lambda", ":", "x", ")", "\n", "tensor_y", "=", "player", ".", "new_tensor", "(", "lambda", ":", "y", ")", "\n", "xy", "=", "player", ".", "matmul", "(", "tensor_x", ",", "tensor_y", ")", "\n", "shares", "[", "player", "]", "=", "xy", "\n", "xy_reveal", "=", "player", ".", "reveal", "(", "xy", ")", "\n", "if", "player", "in", "[", "player0", ",", "player1", "]", ":", "\n", "            ", "xy_reveal", "=", "player", ".", "decode", "(", "xy_reveal", ")", "\n", "", "return", "xy_reveal", "\n", "\n", "", "outs", ",", "errs", "=", "parallel", "(", "matmul", ",", "[", "(", "player0", ",", ")", ",", "(", "player1", ",", ")", ",", "(", "third_party", ",", ")", "]", ")", "\n", "\n", "assert", "errs", "[", "0", "]", "is", "None", "and", "errs", "[", "1", "]", "is", "None", "and", "errs", "[", "2", "]", "is", "None", ",", "f\"Error: {errs}\"", "\n", "max_err", "=", "np", ".", "max", "(", "np", ".", "abs", "(", "expected_xy", "-", "outs", "[", "0", "]", ")", ")", "\n", "assert", "array_close", "(", "outs", "[", "0", "]", ",", "expected_xy", ")", "and", "array_close", "(", "outs", "[", "1", "]", ",", "expected_xy", ")", "and", "outs", "[", "2", "]", "is", "None", ",", "f\"Calculation failed, max error: {max_err}\"", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Player.test_ASPlayer_I64.test_matmul_local": [[151, 176], ["numpy.random.normal", "numpy.random.normal", "numpy.random.normal", "Amber.Core.Utils.parallel", "print", "numpy.max", "player.new_tensor", "player.new_tensor", "player.new_tensor", "player.matmul", "player.matmul", "player.reveal", "numpy.abs", "Amber.Tools.TestUtils.array_close", "Amber.Tools.TestUtils.array_close", "player.decode"], "function", ["home.repos.pwc.inspect_result.zfscgy_Amber.Core.Utils.parallel", "home.repos.pwc.inspect_result.zfscgy_Amber.Player.LocalPlayer.LocalPlayer.new_tensor", "home.repos.pwc.inspect_result.zfscgy_Amber.Player.LocalPlayer.LocalPlayer.new_tensor", "home.repos.pwc.inspect_result.zfscgy_Amber.Player.LocalPlayer.LocalPlayer.new_tensor", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.matmul", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.matmul", "home.repos.pwc.inspect_result.zfscgy_Amber.Player.ASPlayer.ASPlayer.reveal", "home.repos.pwc.inspect_result.zfscgy_Amber.Tools.TestUtils.array_close", "home.repos.pwc.inspect_result.zfscgy_Amber.Tools.TestUtils.array_close", "home.repos.pwc.inspect_result.zfscgy_Amber.Player.ASPlayer.ASPlayer.decode"], ["", "def", "test_matmul_local", "(", ")", ":", "\n", "    ", "x", "=", "np", ".", "random", ".", "normal", "(", "0", ",", "5", ",", "[", "10", ",", "10", "]", ")", "\n", "w", "=", "np", ".", "random", ".", "normal", "(", "0", ",", "5", ",", "[", "10", ",", "10", "]", ")", "\n", "y", "=", "np", ".", "random", ".", "normal", "(", "0", ",", "5", ",", "[", "10", ",", "5", "]", ")", "\n", "expected_xy", "=", "x", "@", "w", "@", "y", "\n", "\n", "def", "matmul", "(", "player", ":", "ASPlayer", ")", ":", "\n", "        ", "tensor_x", "=", "player", ".", "new_tensor", "(", "lambda", ":", "x", ",", "\"player0\"", ")", "\n", "tensor_w", "=", "player", ".", "new_tensor", "(", "lambda", ":", "w", ",", "\"player1\"", ")", "\n", "tensor_y", "=", "player", ".", "new_tensor", "(", "lambda", ":", "y", ",", "\"all\"", ")", "\n", "xw", "=", "player", ".", "matmul", "(", "tensor_x", ",", "tensor_w", ")", "\n", "xwy", "=", "player", ".", "matmul", "(", "xw", ",", "tensor_y", ")", "\n", "xy_reveal", "=", "player", ".", "reveal", "(", "xwy", ")", "\n", "if", "player", "in", "[", "player0", ",", "player1", "]", ":", "\n", "            ", "xy_reveal", "=", "player", ".", "decode", "(", "xy_reveal", ")", "\n", "", "return", "xy_reveal", "\n", "\n", "", "outs", ",", "errs", "=", "parallel", "(", "matmul", ",", "[", "(", "player0", ",", ")", ",", "(", "player1", ",", ")", ",", "(", "third_party", ",", ")", "]", ")", "\n", "\n", "assert", "errs", "[", "0", "]", "is", "None", "and", "errs", "[", "1", "]", "is", "None", "and", "errs", "[", "2", "]", "is", "None", ",", "f\"Error at round: {errs}\"", "\n", "print", "(", "f\"Expected: {expected_xy}, get {outs[0]}\"", ")", "\n", "max_err", "=", "np", ".", "max", "(", "np", ".", "abs", "(", "expected_xy", "-", "outs", "[", "0", "]", ")", ")", "\n", "assert", "array_close", "(", "outs", "[", "0", "]", ",", "expected_xy", ")", "and", "array_close", "(", "outs", "[", "1", "]", ",", "expected_xy", ")", "and", "outs", "[", "2", "]", "is", "None", ",", "f\"Calculation failed at round, max error: {max_err}\"", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Player.test_ASPlayer_I64.test_sum": [[179, 198], ["numpy.random.normal", "numpy.random.normal", "numpy.sum", "Amber.Core.Utils.parallel", "player.new_tensor", "player.new_tensor", "player.matmul", "player.reveal", "Amber.Tools.TestUtils.array_close", "Amber.Tools.TestUtils.array_close", "player.sum", "player.decode", "numpy.max", "numpy.abs"], "function", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.sum", "home.repos.pwc.inspect_result.zfscgy_Amber.Core.Utils.parallel", "home.repos.pwc.inspect_result.zfscgy_Amber.Player.LocalPlayer.LocalPlayer.new_tensor", "home.repos.pwc.inspect_result.zfscgy_Amber.Player.LocalPlayer.LocalPlayer.new_tensor", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.matmul", "home.repos.pwc.inspect_result.zfscgy_Amber.Player.ASPlayer.ASPlayer.reveal", "home.repos.pwc.inspect_result.zfscgy_Amber.Tools.TestUtils.array_close", "home.repos.pwc.inspect_result.zfscgy_Amber.Tools.TestUtils.array_close", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.sum", "home.repos.pwc.inspect_result.zfscgy_Amber.Player.ASPlayer.ASPlayer.decode"], ["", "def", "test_sum", "(", ")", ":", "\n", "    ", "x", "=", "np", ".", "random", ".", "normal", "(", "0", ",", "5", ",", "[", "100", ",", "100", "]", ")", "\n", "y", "=", "np", ".", "random", ".", "normal", "(", "0", ",", "5", ",", "[", "100", ",", "100", "]", ")", "\n", "\n", "def", "sum", "(", "player", ":", "ASPlayer", ")", ":", "\n", "        ", "x_tensor", "=", "player", ".", "new_tensor", "(", "lambda", ":", "x", ")", "\n", "y_tensor", "=", "player", ".", "new_tensor", "(", "lambda", ":", "y", ")", "\n", "xy", "=", "player", ".", "matmul", "(", "x_tensor", ",", "y_tensor", ")", "\n", "sum_xy", "=", "player", ".", "reveal", "(", "player", ".", "sum", "(", "xy", ")", ")", "\n", "if", "player", "in", "[", "player0", ",", "player1", "]", ":", "\n", "            ", "sum_xy", "=", "player", ".", "decode", "(", "sum_xy", ")", "\n", "", "return", "sum_xy", "\n", "\n", "", "expected_sum_xy", "=", "np", ".", "sum", "(", "x", "@", "y", ")", "\n", "outs", ",", "errs", "=", "parallel", "(", "sum", ",", "[", "(", "player0", ",", ")", ",", "(", "player1", ",", ")", ",", "(", "third_party", ",", ")", "]", ")", "\n", "\n", "assert", "errs", "[", "0", "]", "is", "None", "and", "errs", "[", "1", "]", "is", "None", "and", "errs", "[", "2", "]", "is", "None", "\n", "assert", "array_close", "(", "expected_sum_xy", ",", "outs", "[", "0", "]", ")", "and", "array_close", "(", "expected_sum_xy", ",", "outs", "[", "1", "]", ")", "and", "outs", "[", "2", "]", "is", "None", ",", "f\"Test sum failed, max error {np.max(np.abs(outs[0] - expected_sum_xy))}\"", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Player.test_ASPlayer_I64.test_sum_many_times": [[200, 204], ["range", "print", "test_ASPlayer_I64.test_sum"], "function", ["home.repos.pwc.inspect_result.zfscgy_Amber.Player.test_ASPlayer_I64.test_sum"], ["", "def", "test_sum_many_times", "(", ")", ":", "\n", "    ", "for", "i", "in", "range", "(", "1000", ")", ":", "\n", "        ", "print", "(", "f\"Test sum many times: {i}\"", ")", "\n", "test_sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Player.test_RTASPlayer_I64.test_init_player": [[20, 23], ["Amber.Core.Utils.parallel"], "function", ["home.repos.pwc.inspect_result.zfscgy_Amber.Core.Utils.parallel"], ["def", "test_init_player", "(", ")", ":", "\n", "    ", "outs", ",", "errs", "=", "parallel", "(", "[", "player0", ".", "init_play", ",", "player1", ".", "init_play", ",", "third_party", ".", "init_play", "]", ")", "\n", "assert", "errs", "[", "0", "]", "is", "None", "and", "errs", "[", "1", "]", "is", "None", "and", "errs", "[", "2", "]", "is", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Player.test_RTASPlayer_I64.test_sigmoid": [[25, 41], ["Amber.Core.Utils.parallel", "print", "print", "player.new_tensor", "player.sigmoid", "player.reveal", "Amber.Tools.TestUtils.array_close", "Amber.Tools.TestUtils.array_close", "player.decode", "numpy.exp", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.zfscgy_Amber.Core.Utils.parallel", "home.repos.pwc.inspect_result.zfscgy_Amber.Player.LocalPlayer.LocalPlayer.new_tensor", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.sigmoid", "home.repos.pwc.inspect_result.zfscgy_Amber.Player.ASPlayer.ASPlayer.reveal", "home.repos.pwc.inspect_result.zfscgy_Amber.Tools.TestUtils.array_close", "home.repos.pwc.inspect_result.zfscgy_Amber.Tools.TestUtils.array_close", "home.repos.pwc.inspect_result.zfscgy_Amber.Player.ASPlayer.ASPlayer.decode"], ["", "def", "test_sigmoid", "(", ")", ":", "\n", "    ", "def", "sigmoid", "(", "player", ":", "RTASPlayer", ")", ":", "\n", "        ", "x", "=", "player", ".", "new_tensor", "(", "lambda", ":", "np", ".", "array", "(", "[", "1", ",", "2", ",", "3", "]", ")", ")", "\n", "y", "=", "player", ".", "sigmoid", "(", "x", ")", "\n", "y_plain_text", "=", "player", ".", "reveal", "(", "y", ")", "\n", "if", "player", ".", "is_third_party", ":", "\n", "            ", "return", "y_plain_text", ".", "value", "\n", "", "else", ":", "\n", "            ", "return", "player", ".", "decode", "(", "y_plain_text", ")", "\n", "\n", "", "", "desired_y", "=", "1", "/", "(", "1", "+", "np", ".", "exp", "(", "-", "np", ".", "array", "(", "[", "1", ",", "2", ",", "3", "]", ")", ")", ")", "\n", "outs", ",", "errs", "=", "parallel", "(", "sigmoid", ",", "[", "(", "player0", ",", ")", ",", "(", "player1", ",", ")", ",", "(", "third_party", ",", ")", "]", ")", "\n", "print", "(", "outs", ")", "\n", "print", "(", "f\"Desired: {desired_y}, get: {outs[0]}, {outs[1]}\"", ")", "\n", "assert", "errs", "[", "0", "]", "is", "None", "and", "errs", "[", "1", "]", "is", "None", "and", "errs", "[", "2", "]", "is", "None", "\n", "assert", "array_close", "(", "outs", "[", "0", "]", ",", "desired_y", ")", "and", "array_close", "(", "outs", "[", "1", "]", ",", "desired_y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Player.test_RTASPlayer_I64.test_sigmoid_mean": [[43, 62], ["numpy.random.normal", "numpy.mean", "Amber.Core.Utils.parallel", "print", "print", "player.new_tensor", "player.sigmoid", "player.mul", "player.reveal", "Amber.Tools.TestUtils.array_close", "Amber.Tools.TestUtils.array_close", "player.sum", "player.decode", "numpy.exp"], "function", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.mean", "home.repos.pwc.inspect_result.zfscgy_Amber.Core.Utils.parallel", "home.repos.pwc.inspect_result.zfscgy_Amber.Player.LocalPlayer.LocalPlayer.new_tensor", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.sigmoid", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.mul", "home.repos.pwc.inspect_result.zfscgy_Amber.Player.ASPlayer.ASPlayer.reveal", "home.repos.pwc.inspect_result.zfscgy_Amber.Tools.TestUtils.array_close", "home.repos.pwc.inspect_result.zfscgy_Amber.Tools.TestUtils.array_close", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.sum", "home.repos.pwc.inspect_result.zfscgy_Amber.Player.ASPlayer.ASPlayer.decode"], ["", "def", "test_sigmoid_mean", "(", ")", ":", "\n", "    ", "raw_x", "=", "np", ".", "random", ".", "normal", "(", "0", ",", "100000", ",", "[", "10", "]", ")", "\n", "\n", "def", "sigmoid_mean", "(", "player", ":", "RTASPlayer", ")", ":", "\n", "        ", "x", "=", "player", ".", "new_tensor", "(", "lambda", ":", "raw_x", ")", "\n", "y", "=", "player", ".", "sigmoid", "(", "x", ")", "\n", "y", "=", "player", ".", "mul", "(", "player", ".", "sum", "(", "y", ")", ",", "1", "/", "10", ")", "\n", "y_plain_text", "=", "player", ".", "reveal", "(", "y", ")", "\n", "if", "player", ".", "is_third_party", ":", "\n", "            ", "return", "y_plain_text", ".", "value", "\n", "", "else", ":", "\n", "            ", "return", "player", ".", "decode", "(", "y_plain_text", ")", "\n", "\n", "", "", "desired_y", "=", "np", ".", "mean", "(", "1", "/", "(", "1", "+", "np", ".", "exp", "(", "-", "raw_x", ")", ")", ")", "\n", "outs", ",", "errs", "=", "parallel", "(", "sigmoid_mean", ",", "[", "(", "player0", ",", ")", ",", "(", "player1", ",", ")", ",", "(", "third_party", ",", ")", "]", ")", "\n", "print", "(", "outs", ")", "\n", "print", "(", "f\"Desired: {desired_y}, get: {outs[0]}, {outs[1]}\"", ")", "\n", "assert", "errs", "[", "0", "]", "is", "None", "and", "errs", "[", "1", "]", "is", "None", "and", "errs", "[", "2", "]", "is", "None", "\n", "assert", "array_close", "(", "outs", "[", "0", "]", ",", "desired_y", ")", "and", "array_close", "(", "outs", "[", "1", "]", ",", "desired_y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Comm.Socket.SocketException.__init__": [[14, 16], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "msg", ")", ":", "\n", "        ", "self", ".", "msg", "=", "msg", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Comm.Socket.SocketException.__str__": [[17, 19], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "msg", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Comm.Socket.SocketServer.__init__": [[49, 83], ["socket.socket", "Socket.SocketServer.socket.setsockopt", "Socket.SocketServer.socket.bind", "logger.debug", "socket.setdefaulttimeout", "dict", "dict", "dict", "threading.Thread", "Socket.SocketServer.listen_thread.start", "dict", "dict", "address.split", "int", "Socket.SocketException"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "address", ":", "str", ",", "other_addrs", ":", "dict", ",", "timeout", "=", "10", ")", ":", "\n", "        ", "\"\"\"\n        :param address:\n        :param other_addrs: dict[address, name]\n        :param timeout:\n        \"\"\"", "\n", "self", ".", "addr", "=", "address", "\n", "self", ".", "socket", "=", "socket", ".", "socket", "(", "socket", ".", "AF_INET", ",", "socket", ".", "SOCK_STREAM", ")", "\n", "try", ":", "\n", "            ", "ipv4", ",", "port", "=", "address", ".", "split", "(", "\":\"", ")", "\n", "port", "=", "int", "(", "port", ")", "\n", "\n", "", "except", ":", "\n", "            ", "raise", "SocketException", "(", "\"Address %s not valid\"", "%", "address", ")", "\n", "\n", "# setsockopt should be called before binding the socket.", "\n", "# Use SO_REUSEPORT to prevent 'Address already in use' problem", "\n", "", "self", ".", "socket", ".", "setsockopt", "(", "socket", ".", "SOL_SOCKET", ",", "socket", ".", "SO_REUSEADDR", ",", "1", ")", "\n", "self", ".", "socket", ".", "bind", "(", "(", "ipv4", ",", "port", ")", ")", "\n", "\n", "logger", ".", "debug", "(", "\"Default timeout set to %d\"", "%", "timeout", ")", "\n", "socket", ".", "setdefaulttimeout", "(", "timeout", ")", "\n", "self", ".", "other_addrs", "=", "other_addrs", "\n", "self", ".", "other_recv_sockets", "=", "dict", "(", ")", "\n", "self", ".", "other_send_sockets", "=", "dict", "(", ")", "\n", "self", ".", "send_locks", "=", "dict", "(", ")", "\n", "self", ".", "listening", "=", "True", "\n", "\n", "self", ".", "listen_thread", "=", "threading", ".", "Thread", "(", "target", "=", "self", ".", "_listen_loop", ")", "\n", "self", ".", "listen_thread", ".", "start", "(", ")", "\n", "\n", "# Count traffic from/to", "\n", "self", ".", "traffic_counter_to", "=", "dict", "(", ")", "\n", "self", ".", "traffic_counter_from", "=", "dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Comm.Socket.SocketServer.set_timeout": [[84, 87], ["logger.debug", "socket.setdefaulttimeout"], "methods", ["None"], ["", "def", "set_timeout", "(", "self", ",", "timeout", ":", "float", ")", ":", "\n", "        ", "logger", ".", "debug", "(", "\"Default timeout set to %d\"", "%", "timeout", ")", "\n", "socket", ".", "setdefaulttimeout", "(", "timeout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Comm.Socket.SocketServer._listen_loop": [[88, 115], ["Socket.SocketServer.socket.listen", "set", "Socket.SocketServer.other_addrs.keys", "set.remove", "Socket.SocketServer.socket.accept", "str", "Socket.SocketException", "Socket.SocketException", "len", "Socket.read_socket", "Socket.SocketException", "str.split"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Node.set", "home.repos.pwc.inspect_result.zfscgy_Amber.Comm.Socket.read_socket"], ["", "def", "_listen_loop", "(", "self", ")", ":", "\n", "        ", "self", ".", "socket", ".", "listen", "(", ")", "\n", "not_connected_others", "=", "set", "(", "self", ".", "other_addrs", ".", "keys", "(", ")", ")", "\n", "while", "self", ".", "listening", ":", "\n", "            ", "try", ":", "\n", "                ", "accpeted_socket", ",", "addr", "=", "self", ".", "socket", ".", "accept", "(", ")", "\n", "", "except", "TimeoutError", "as", "e", ":", "\n", "                ", "continue", "\n", "\n", "", "try", ":", "\n", "                ", "claimed_addr", "=", "str", "(", "read_socket", "(", "accpeted_socket", ")", ",", "\"utf-8\"", ")", "\n", "", "except", "TimeoutError", ":", "\n", "                ", "raise", "SocketException", "(", "\"Did not receive address claim after connection from %s\"", "%", "addr", ")", "\n", "\n", "", "if", "claimed_addr", ".", "split", "(", "\":\"", ")", "[", "0", "]", "!=", "addr", "[", "0", "]", ":", "\n", "                ", "raise", "SocketException", "(", "\"Claimed Address %s do not match with the actual send address %s\"", "\n", "%", "(", "claimed_addr", ",", "addr", "[", "0", "]", ")", ")", "\n", "", "if", "claimed_addr", "in", "self", ".", "other_addrs", ":", "\n", "                ", "self", ".", "other_recv_sockets", "[", "self", ".", "other_addrs", "[", "claimed_addr", "]", "]", "=", "accpeted_socket", "\n", "self", ".", "traffic_counter_from", "[", "self", ".", "other_addrs", "[", "claimed_addr", "]", "]", "=", "0", "\n", "", "else", ":", "\n", "                ", "raise", "SocketException", "(", "\"Get unexpected socket connection from %s\"", "%", "addr", ")", "\n", "\n", "", "not_connected_others", ".", "remove", "(", "claimed_addr", ")", "\n", "if", "len", "(", "not_connected_others", ")", "==", "0", ":", "\n", "                ", "break", "\n", "", "", "self", ".", "listening", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Comm.Socket.SocketServer.connect_all": [[116, 139], ["Amber.Core.Utils.parallel", "socket.socket", "threading.Lock", "time.sleep", "peer_addr.split", "int", "socket.socket.connect", "Socket.write_socket", "Socket.SocketException", "Socket.SocketServer.addr.encode", "Socket.SocketException"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.Core.Utils.parallel", "home.repos.pwc.inspect_result.zfscgy_Amber.Comm.Socket.write_socket", "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.Backend.encode"], ["", "def", "connect_all", "(", "self", ")", ":", "\n", "        ", "def", "connect_one", "(", "peer_addr", ":", "str", ",", "peer_name", ":", "str", ")", ":", "\n", "            ", "my_socket", "=", "socket", ".", "socket", "(", "socket", ".", "AF_INET", ",", "socket", ".", "SOCK_STREAM", ")", "\n", "try", ":", "\n", "                ", "peer_ipv4", ",", "peer_port", "=", "peer_addr", ".", "split", "(", "\":\"", ")", "\n", "peer_port", "=", "int", "(", "peer_port", ")", "\n", "", "except", ":", "\n", "                ", "raise", "SocketException", "(", "\"%s is not a valid address\"", "%", "peer_addr", ")", "\n", "\n", "", "try", ":", "\n", "                ", "my_socket", ".", "connect", "(", "(", "peer_ipv4", ",", "peer_port", ")", ")", "\n", "write_socket", "(", "my_socket", ",", "self", ".", "addr", ".", "encode", "(", "\"utf-8\"", ")", ")", "\n", "", "except", "TimeoutError", ":", "\n", "                ", "raise", "SocketException", "(", "\"Connect to %s: %s failed\"", "%", "(", "peer_name", ",", "peer_addr", ")", ")", "\n", "", "self", ".", "other_send_sockets", "[", "peer_name", "]", "=", "my_socket", "\n", "self", ".", "traffic_counter_to", "[", "peer_name", "]", "=", "0", "\n", "self", ".", "send_locks", "[", "peer_name", "]", "=", "threading", ".", "Lock", "(", ")", "\n", "\n", "", "peers", "=", "[", "(", "peer_addr", ",", "self", ".", "other_addrs", "[", "peer_addr", "]", ")", "for", "peer_addr", "in", "self", ".", "other_addrs", "]", "\n", "parallel", "(", "connect_one", ",", "peers", ")", "\n", "while", "self", ".", "listening", ":", "\n", "            ", "time", ".", "sleep", "(", "0.1", ")", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Comm.Socket.SocketServer.send_to": [[140, 148], ["Socket.SocketServer.send_locks[].acquire", "Socket.write_socket", "Socket.SocketServer.send_locks[].release", "Socket.SocketException", "len"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.Comm.Socket.write_socket"], ["", "def", "send_to", "(", "self", ",", "name", ":", "str", ",", "data", ":", "bytes", ")", ":", "\n", "        ", "self", ".", "send_locks", "[", "name", "]", ".", "acquire", "(", ")", "\n", "if", "name", "not", "in", "self", ".", "other_send_sockets", ":", "\n", "            ", "raise", "SocketException", "(", "\"Peer name %s dose not exist or not connected yet\"", "%", "name", ")", "\n", "", "s", "=", "self", ".", "other_send_sockets", "[", "name", "]", "\n", "write_socket", "(", "s", ",", "data", ")", "\n", "self", ".", "traffic_counter_to", "[", "name", "]", "+=", "len", "(", "data", ")", "+", "len_header", "\n", "self", ".", "send_locks", "[", "name", "]", ".", "release", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Comm.Socket.SocketServer.recv_from": [[149, 156], ["Socket.read_socket", "Socket.SocketException", "len"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.Comm.Socket.read_socket"], ["", "def", "recv_from", "(", "self", ",", "name", ")", ":", "\n", "        ", "if", "name", "not", "in", "self", ".", "other_recv_sockets", ":", "\n", "            ", "raise", "SocketException", "(", "\"Peer name %s dose not exist or not connected yet\"", "%", "name", ")", "\n", "", "s", "=", "self", ".", "other_recv_sockets", "[", "name", "]", "\n", "content", "=", "read_socket", "(", "s", ")", "\n", "self", ".", "traffic_counter_from", "[", "name", "]", "+=", "len", "(", "content", ")", "+", "len_header", "\n", "return", "content", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Comm.Socket.SocketServer.reset_counter": [[157, 162], ["None"], "methods", ["None"], ["", "def", "reset_counter", "(", "self", ")", ":", "\n", "        ", "for", "k", "in", "self", ".", "traffic_counter_from", ":", "\n", "            ", "self", ".", "traffic_counter_from", "[", "k", "]", "=", "0", "\n", "", "for", "k", "in", "self", ".", "traffic_counter_to", ":", "\n", "            ", "self", ".", "traffic_counter_to", "[", "k", "]", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Comm.Socket.SocketServer.terminate": [[163, 169], ["Socket.SocketServer.socket.close", "Socket.SocketServer.other_send_sockets[].close", "Socket.SocketServer.other_recv_sockets[].close"], "methods", ["None"], ["", "", "def", "terminate", "(", "self", ")", ":", "\n", "        ", "self", ".", "socket", ".", "close", "(", ")", "\n", "for", "peer_name", "in", "self", ".", "other_send_sockets", ":", "\n", "            ", "self", ".", "other_send_sockets", "[", "peer_name", "]", ".", "close", "(", ")", "\n", "", "for", "peer_name", "in", "self", ".", "other_recv_sockets", ":", "\n", "            ", "self", ".", "other_recv_sockets", "[", "peer_name", "]", ".", "close", "(", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.zfscgy_Amber.Comm.Socket.read_socket": [[21, 34], ["s.recv", "int.from_bytes", "logger.debug", "bytes", "len", "Socket.SocketException", "len", "s.recv", "Socket.SocketException", "len"], "function", ["home.repos.pwc.inspect_result.zfscgy_Amber.Comm.Peer.Peer.recv", "home.repos.pwc.inspect_result.zfscgy_Amber.Comm.Peer.Peer.recv"], ["", "", "def", "read_socket", "(", "s", ":", "socket", ".", "socket", ")", "->", "bytes", ":", "\n", "    ", "try", ":", "\n", "        ", "len_bytes", "=", "s", ".", "recv", "(", "len_header", ")", "\n", "if", "len", "(", "len_bytes", ")", "==", "0", ":", "\n", "            ", "raise", "SocketException", "(", "\"read_socket: no data to read\"", ")", "\n", "", "content_len", "=", "int", ".", "from_bytes", "(", "len_bytes", ",", "byteorder", "=", "'big'", ")", "\n", "logger", ".", "debug", "(", "\"Get message size %d\"", "%", "content_len", ")", "\n", "content", "=", "bytes", "(", ")", "\n", "while", "len", "(", "content", ")", "<", "content_len", ":", "\n", "            ", "content", "+=", "s", ".", "recv", "(", "content_len", "-", "len", "(", "content", ")", ")", "\n", "", "return", "content", "\n", "", "except", ":", "\n", "        ", "raise", "SocketException", "(", "\"Socket read error\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Comm.Socket.write_socket": [[36, 46], ["len().to_bytes", "len", "s.send", "Socket.SocketException", "len"], "function", ["home.repos.pwc.inspect_result.zfscgy_Amber.Comm.Peer.Peer.send"], ["", "", "def", "write_socket", "(", "s", ":", "socket", ".", "socket", ",", "content", ":", "bytes", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "content_len", "=", "len", "(", "content", ")", "+", "len_header", "\n", "len_bytes", "=", "len", "(", "content", ")", ".", "to_bytes", "(", "len_header", ",", "'big'", ")", "\n", "send_bytes", "=", "len_bytes", "+", "content", "\n", "while", "content_len", "!=", "0", ":", "\n", "            ", "content_len", "-=", "s", ".", "send", "(", "send_bytes", "[", "-", "content_len", ":", "]", ")", "\n", "\n", "", "", "except", ":", "\n", "        ", "raise", "SocketException", "(", "\"Socket send error\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Comm.Peer.PeerException.__init__": [[10, 12], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "msg", ")", ":", "\n", "        ", "self", ".", "msg", "=", "msg", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Comm.Peer.PeerException.__str__": [[13, 15], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "msg", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Comm.Peer.PackedMessage.__init__": [[18, 21], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "header", ":", "str", ",", "obj", ":", "object", ")", ":", "\n", "        ", "self", ".", "header", "=", "header", "\n", "self", ".", "obj", "=", "obj", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Comm.Peer.PackedMessage.serialize": [[22, 24], ["pickle.dumps"], "methods", ["None"], ["", "def", "serialize", "(", "self", ")", ":", "\n", "        ", "return", "pickle", ".", "dumps", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Comm.Peer.Peer.__init__": [[27, 34], ["Amber.Core.Comm.Socket.SocketServer.__init__", "dict", "dict", "other_addrs.values", "dict", "threading.Lock"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Reshape.__init__"], ["    ", "def", "__init__", "(", "self", ",", "address", ":", "str", ",", "other_addrs", ":", "dict", ",", "timeout", "=", "120", ")", ":", "\n", "        ", "super", "(", "Peer", ",", "self", ")", ".", "__init__", "(", "address", ",", "other_addrs", ",", "timeout", ")", "\n", "self", ".", "prefetch_buffer", "=", "dict", "(", ")", "\n", "self", ".", "recv_lock", "=", "dict", "(", ")", "\n", "for", "other_name", "in", "other_addrs", ".", "values", "(", ")", ":", "\n", "            ", "self", ".", "prefetch_buffer", "[", "other_name", "]", "=", "dict", "(", ")", "\n", "self", ".", "recv_lock", "[", "other_name", "]", "=", "threading", ".", "Lock", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Comm.Peer.Peer.send": [[35, 37], ["Peer.Peer.send_to", "Peer.PackedMessage.serialize", "Peer.PackedMessage"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.Comm.Socket.SocketServer.send_to", "home.repos.pwc.inspect_result.zfscgy_Amber.Comm.Peer.PackedMessage.serialize"], ["", "", "def", "send", "(", "self", ",", "peer_name", ":", "str", ",", "header", ":", "str", ",", "obj", ":", "object", "=", "None", ")", ":", "\n", "        ", "self", ".", "send_to", "(", "peer_name", ",", "PackedMessage", "(", "header", ",", "obj", ")", ".", "serialize", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Comm.Peer.Peer.recv": [[38, 58], ["Peer.Peer.recv_lock[].acquire", "logger.debug", "Peer.Peer.recv_lock[].release", "Peer.Peer.prefetch_buffer.get", "Peer.Peer.prefetch_buffer[].pop", "pickle.loads", "Peer.Peer.recv_from", "isinstance", "Peer.PeerException", "pickle.loads", "Peer.PeerException", "Peer.Peer.recv_from", "isinstance", "Peer.PeerException"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Operator.get", "home.repos.pwc.inspect_result.zfscgy_Amber.Comm.Socket.SocketServer.recv_from", "home.repos.pwc.inspect_result.zfscgy_Amber.Comm.Socket.SocketServer.recv_from"], ["", "def", "recv", "(", "self", ",", "peer_name", ":", "str", ",", "header", ":", "str", ")", ":", "\n", "        ", "self", ".", "recv_lock", "[", "peer_name", "]", ".", "acquire", "(", ")", "\n", "if", "header", "in", "self", ".", "prefetch_buffer", ".", "get", "(", "peer_name", ")", ":", "\n", "            ", "packed_message", "=", "self", ".", "prefetch_buffer", "[", "peer_name", "]", ".", "pop", "(", "header", ")", "\n", "", "else", ":", "\n", "            ", "packed_message", "=", "pickle", ".", "loads", "(", "self", ".", "recv_from", "(", "peer_name", ")", ")", "\n", "if", "not", "isinstance", "(", "packed_message", ",", "PackedMessage", ")", ":", "\n", "                ", "raise", "PeerException", "(", "\"Message corrupted or wrong message\"", ")", "\n", "\n", "", "while", "packed_message", ".", "header", "!=", "header", ":", "\n", "                ", "if", "packed_message", ".", "header", "in", "self", ".", "prefetch_buffer", "[", "peer_name", "]", ":", "\n", "                    ", "raise", "PeerException", "(", "f\"Already have message {header} in the buffer, cannot buffer >1 messages\"", ")", "\n", "", "self", ".", "prefetch_buffer", "[", "peer_name", "]", "[", "packed_message", ".", "header", "]", "=", "packed_message", "\n", "packed_message", "=", "pickle", ".", "loads", "(", "self", ".", "recv_from", "(", "peer_name", ")", ")", "\n", "if", "not", "isinstance", "(", "packed_message", ",", "PackedMessage", ")", ":", "\n", "                    ", "raise", "PeerException", "(", "\"Message corrupted or wrong message\"", ")", "\n", "\n", "", "", "", "logger", ".", "debug", "(", "\"Received %s message from %s\"", "%", "(", "header", ",", "peer_name", ")", ")", "\n", "self", ".", "recv_lock", "[", "peer_name", "]", ".", "release", "(", ")", "\n", "return", "packed_message", ".", "obj", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Comm.test_socket.test_throughput": [[7, 30], ["Amber.Core.Comm.Peer.Peer", "Amber.Core.Comm.Peer.Peer", "time.sleep", "Amber.Core.Utils.parallel", "Amber.Core.Comm.Peer.Peer.reset_counter", "time.time", "Amber.Core.Utils.parallel", "print", "print", "print", "range", "range", "time.time", "numpy.random.normal", "Amber.Core.Comm.Peer.Peer.send", "Amber.Core.Comm.Peer.Peer.recv"], "function", ["home.repos.pwc.inspect_result.zfscgy_Amber.Core.Utils.parallel", "home.repos.pwc.inspect_result.zfscgy_Amber.Comm.Socket.SocketServer.reset_counter", "home.repos.pwc.inspect_result.zfscgy_Amber.Core.Utils.parallel", "home.repos.pwc.inspect_result.zfscgy_Amber.Comm.Peer.Peer.send", "home.repos.pwc.inspect_result.zfscgy_Amber.Comm.Peer.Peer.recv"], ["def", "test_throughput", "(", ")", ":", "\n", "    ", "sender", "=", "Peer", "(", "\"127.0.0.1:18000\"", ",", "{", "\"127.0.0.1:18001\"", ":", "\"receiver\"", "}", ")", "\n", "receiver", "=", "Peer", "(", "\"127.0.0.1:18001\"", ",", "{", "\"127.0.0.1:18000\"", ":", "\"sender\"", "}", ")", "\n", "time", ".", "sleep", "(", "1", ")", "\n", "parallel", "(", "[", "sender", ".", "connect_all", ",", "receiver", ".", "connect_all", "]", ")", "\n", "receiver", ".", "reset_counter", "(", ")", "\n", "\n", "def", "send_data", "(", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "100", ")", ":", "\n", "            ", "data", "=", "np", ".", "random", ".", "normal", "(", "0", ",", "1", ",", "[", "1000", ",", "1000", "]", ")", "\n", "sender", ".", "send", "(", "\"receiver\"", ",", "\"data\"", ",", "data", ")", "\n", "\n", "", "", "def", "recv_data", "(", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "100", ")", ":", "\n", "            ", "receiver", ".", "recv", "(", "\"sender\"", ",", "\"data\"", ")", "\n", "\n", "", "", "start_time", "=", "time", ".", "time", "(", ")", "\n", "parallel", "(", "[", "send_data", ",", "recv_data", "]", ")", "\n", "time_elapsed", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "print", "(", "f\"Time elapsed {time_elapsed:.2f}\"", ")", "\n", "transported_mb", "=", "receiver", ".", "traffic_counter_from", "[", "'sender'", "]", "/", "1024", "\n", "print", "(", "f\"Data sent {transported_mb} Mbytes\"", ")", "\n", "print", "(", "f\"Network speed: {transported_mb / time_elapsed} Mbps\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Comm.test_socket.test_multiplex": [[32, 49], ["Amber.Core.Comm.Peer.Peer", "Amber.Core.Comm.Peer.Peer", "time.sleep", "Amber.Core.Utils.parallel", "Amber.Core.Comm.Peer.Peer.reset_counter", "time.sleep", "Amber.Core.Utils.parallel", "range", "range", "numpy.random.normal", "Amber.Core.Utils.task_async", "Amber.Core.Utils.task_async", "Amber.Core.Comm.Peer.Peer.send", "str", "Amber.Core.Comm.Peer.Peer.recv", "print", "str"], "function", ["home.repos.pwc.inspect_result.zfscgy_Amber.Core.Utils.parallel", "home.repos.pwc.inspect_result.zfscgy_Amber.Comm.Socket.SocketServer.reset_counter", "home.repos.pwc.inspect_result.zfscgy_Amber.Core.Utils.parallel", "home.repos.pwc.inspect_result.zfscgy_Amber.Core.Utils.task_async", "home.repos.pwc.inspect_result.zfscgy_Amber.Core.Utils.task_async", "home.repos.pwc.inspect_result.zfscgy_Amber.Comm.Peer.Peer.send", "home.repos.pwc.inspect_result.zfscgy_Amber.Comm.Peer.Peer.recv"], ["", "def", "test_multiplex", "(", ")", ":", "\n", "    ", "sender", "=", "Peer", "(", "\"127.0.0.1:18000\"", ",", "{", "\"127.0.0.1:18001\"", ":", "\"receiver\"", "}", ")", "\n", "receiver", "=", "Peer", "(", "\"127.0.0.1:18001\"", ",", "{", "\"127.0.0.1:18000\"", ":", "\"sender\"", "}", ")", "\n", "time", ".", "sleep", "(", "1", ")", "\n", "parallel", "(", "[", "sender", ".", "connect_all", ",", "receiver", ".", "connect_all", "]", ")", "\n", "receiver", ".", "reset_counter", "(", ")", "\n", "time", ".", "sleep", "(", "1", ")", "\n", "def", "send_data", "(", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "            ", "data", "=", "np", ".", "random", ".", "normal", "(", "0", ",", "1", ",", "[", "1000", ",", "1000", "]", ")", "\n", "task_async", "(", "lambda", ":", "(", "sender", ".", "send", "(", "\"receiver\"", ",", "str", "(", "i", ")", ",", "data", ")", ")", ")", "\n", "\n", "", "", "def", "recv_data", "(", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "            ", "task_async", "(", "lambda", "i", "=", "i", ":", "(", "receiver", ".", "recv", "(", "\"sender\"", ",", "str", "(", "4", "-", "i", ")", ")", ",", "print", "(", "f\"Finished receiving {5 - i}\"", ")", ")", ")", "\n", "\n", "", "", "parallel", "(", "[", "send_data", ",", "recv_data", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Tools.DataLoader.DataLoader.set_random_seed": [[6, 8], ["None"], "methods", ["None"], ["    ", "def", "set_random_seed", "(", "self", ",", "random_seed", ":", "int", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Tools.DataLoader.DataLoader.get_batch": [[9, 11], ["NotImplementedError"], "methods", ["None"], ["", "def", "get_batch", "(", "self", ",", "batch_size", ":", "int", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Tools.DataLoader.DataLoader.shape": [[12, 14], ["NotImplementedError"], "methods", ["None"], ["", "def", "shape", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Tools.DataLoader.NPDataLoader.__init__": [[17, 20], ["numpy.random.default_rng"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "numpy_arr", ":", "np", ".", "ndarray", ")", ":", "\n", "        ", "self", ".", "data", "=", "numpy_arr", "\n", "self", ".", "random_generator", "=", "np", ".", "random", ".", "default_rng", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Tools.DataLoader.NPDataLoader.set_random_seed": [[21, 24], ["numpy.random.default_rng"], "methods", ["None"], ["", "def", "set_random_seed", "(", "self", ",", "random_seed", ":", "int", ")", ":", "\n", "        ", "seed", "=", "random_seed", "\n", "self", ".", "random_generator", "=", "np", ".", "random", ".", "default_rng", "(", "seed", "=", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Tools.DataLoader.NPDataLoader.get_batch": [[25, 30], ["DataLoader.NPDataLoader.random_generator.choice"], "methods", ["None"], ["", "def", "get_batch", "(", "self", ",", "batch_size", ":", "int", ")", ":", "\n", "        ", "if", "batch_size", "is", "None", ":", "\n", "            ", "return", "self", ".", "data", "\n", "", "indices", "=", "self", ".", "random_generator", ".", "choice", "(", "self", ".", "data", ".", "shape", "[", "0", "]", ",", "batch_size", ")", "\n", "return", "self", ".", "data", "[", "indices", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Tools.DataLoader.NPDataLoader.shape": [[31, 33], ["None"], "methods", ["None"], ["", "def", "shape", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "data", ".", "shape", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zfscgy_Amber.Tools.TestUtils.array_close": [[4, 6], ["numpy.allclose", "numpy.max", "numpy.abs"], "function", ["None"], ["def", "array_close", "(", "x", ":", "np", ".", "ndarray", ",", "y", ":", "np", ".", "ndarray", ")", ":", "\n", "    ", "return", "np", ".", "allclose", "(", "x", ",", "y", ",", "1e-2", ",", "1e-2", ")", "or", "np", ".", "max", "(", "np", ".", "abs", "(", "x", "-", "y", ")", ")", "<", "1e-3", "\n", "", ""]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Graph.GraphException.__init__": [[7, 9], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "msg", ":", "str", ")", ":", "\n", "        ", "self", ".", "msg", "=", "msg", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Graph.GraphException.__str__": [[10, 12], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "msg", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Graph.Graph.__init__": [[15, 30], ["ComposedOperator.__init__", "set", "Node", "Graph.Graph.gradient", "dict", "dict", "zip"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Reshape.__init__", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Node.set", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Reshape.gradient"], ["    ", "def", "__init__", "(", "self", ",", "player", ":", "Player", ",", "inputs", ":", "List", "[", "Node", "]", ",", "parameters", ":", "List", "[", "Node", "]", ",", "operators", ":", "List", "[", "Operator", "]", ")", ":", "\n", "        ", "super", "(", "Graph", ",", "self", ")", ".", "__init__", "(", "player", ",", "inputs", "+", "parameters", ",", "operators", ")", "\n", "self", ".", "inputs", "=", "inputs", "\n", "self", ".", "parameters", "=", "parameters", "\n", "self", ".", "fixed_paras", "=", "set", "(", ")", "\n", "\n", "self", ".", "output_grad_node", "=", "Node", "(", ")", "\n", "self", ".", "all_gradient_ops", "=", "self", ".", "gradient", "(", "self", ".", "output_grad_node", ")", "\n", "self", ".", "input_gradient_nodes", "=", "dict", "(", ")", "\n", "self", ".", "parameter_gradient_nodes", "=", "dict", "(", ")", "\n", "for", "input_tensor", ",", "gradient", "in", "zip", "(", "self", ".", "input_nodes", ",", "self", ".", "all_gradient_ops", ")", ":", "\n", "            ", "if", "input_tensor", "in", "self", ".", "inputs", ":", "\n", "                ", "self", ".", "input_gradient_nodes", "[", "input_tensor", "]", "=", "gradient", "\n", "", "else", ":", "\n", "                ", "self", ".", "parameter_gradient_nodes", "[", "input_tensor", "]", "=", "gradient", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Graph.Graph.feed": [[31, 34], ["zip", "input_node.set"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Node.set"], ["", "", "", "def", "feed", "(", "self", ",", "input_tensors", ":", "List", "[", "Tensor", "]", ")", ":", "\n", "        ", "for", "input_tensor", ",", "input_node", "in", "zip", "(", "input_tensors", ",", "self", ".", "inputs", ")", ":", "\n", "            ", "input_node", ".", "set", "(", "input_tensor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Graph.Graph.clear_cache": [[35, 44], ["super().clear_cache", "grad.clear_cache"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Operator.clear_cache", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Operator.clear_cache"], ["", "", "def", "clear_cache", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        The gradient graphs are contained in the Graph, not explicitly shown, so the cache should be also cleared\n        (since we use the Graph.compute_gradients method to compute gradients, not using the gradient operetor,\n        :return:\n        \"\"\"", "\n", "super", "(", "Graph", ",", "self", ")", ".", "clear_cache", "(", ")", "\n", "for", "grad", "in", "self", ".", "all_gradient_ops", ":", "\n", "            ", "grad", ".", "clear_cache", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Graph.Graph.compute_gradients": [[45, 57], ["Graph.Graph.output_grad_node.set", "isinstance", "gradient.forward", "gradient.forward"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Node.set", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Reshape.forward", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Reshape.forward"], ["", "", "def", "compute_gradients", "(", "self", ",", "output_grad_tensor", ":", "Tensor", ",", "include_input", "=", "False", ")", ":", "\n", "        ", "self", ".", "output_grad_node", ".", "set", "(", "output_grad_tensor", ")", "\n", "for", "gradient", "in", "self", ".", "all_gradient_ops", ":", "\n", "            ", "if", "isinstance", "(", "gradient", ",", "ComposedOperator", ")", ":", "\n", "                ", "gradient", ".", "forward", "(", "use_cache", "=", "True", ")", "\n", "", "else", ":", "\n", "                ", "gradient", ".", "forward", "(", ")", "\n", "", "", "if", "include_input", ":", "\n", "            ", "return", "[", "self", ".", "parameter_gradient_nodes", "[", "p", "]", "for", "p", "in", "self", ".", "parameters", "]", ",", "[", "self", ".", "input_gradient_nodes", "[", "i", "]", "for", "i", "in", "self", ".", "inputs", "]", "\n", "", "else", ":", "\n", "            ", "return", "[", "self", ".", "parameter_gradient_nodes", "[", "p", "]", "for", "p", "in", "self", ".", "parameters", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Graph.Graph.set_para_fixed": [[58, 67], ["Graph.GraphException", "Graph.Graph.fixed_paras.add", "Graph.Graph.fixed_paras.remove"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.add"], ["", "", "def", "set_para_fixed", "(", "self", ",", "fixed_paras", ":", "List", "[", "Node", "]", ",", "fixed", "=", "True", ")", ":", "\n", "        ", "for", "fixed_para", "in", "fixed_paras", ":", "\n", "            ", "if", "fixed_para", "not", "in", "self", ".", "parameters", ":", "\n", "                ", "raise", "GraphException", "(", "f\"{fixed_para} not in the graph's parameters list\"", ")", "\n", "", "else", ":", "\n", "                ", "if", "fixed", ":", "\n", "                    ", "self", ".", "fixed_paras", ".", "add", "(", "fixed_para", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "fixed_paras", ".", "remove", "(", "fixed_para", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Graph.Graph.update_parameters": [[68, 72], ["zip", "para.set"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Node.set"], ["", "", "", "", "def", "update_parameters", "(", "self", ",", "new_para_tensors", ":", "List", "[", "Tensor", "]", ")", ":", "\n", "        ", "for", "para", ",", "new_para_tensor", "in", "zip", "(", "self", ".", "parameters", ",", "new_para_tensors", ")", ":", "\n", "            ", "if", "para", "not", "in", "self", ".", "fixed_paras", ":", "\n", "                ", "para", ".", "set", "(", "new_para_tensor", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Layers.Layer.parameters": [[9, 11], ["NotImplementedError"], "methods", ["None"], ["    ", "def", "parameters", "(", "self", ")", "->", "List", "[", "Node", "]", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Layers.Layer.__call__": [[12, 14], ["NotImplementedError"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", "->", "Operator", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Layers.DenseLayer.__init__": [[17, 28], ["Amber.NN.Initializers.GlorotUniform.", "op_factory.new_node", "op_factory.new_node", "Amber.NN.Initializers.GlorotUniform"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.new_node", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.new_node"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", ":", "int", ",", "out_dim", ":", "int", ",", "initializer", ":", "Callable", "=", "None", ",", "op_factory", ":", "OpFactory", "=", "None", ",", "owner", ":", "str", "=", "None", ")", ":", "\n", "        ", "if", "initializer", "is", "None", ":", "\n", "            ", "initializer", "=", "GlorotUniform", "(", "in_dim", ",", "out_dim", ")", "\n", "", "if", "op_factory", "is", "None", ":", "\n", "            ", "op_factory", "=", "OpFactory", ".", "default", "\n", "", "self", ".", "op_factory", "=", "op_factory", "\n", "init_w", ",", "init_b", "=", "initializer", "(", ")", "\n", "self", ".", "in_dim", "=", "in_dim", "\n", "self", ".", "out_dim", "=", "out_dim", "\n", "self", ".", "w", "=", "op_factory", ".", "new_node", "(", "init_w", ",", "owner", "=", "owner", ")", "\n", "self", ".", "b", "=", "op_factory", ".", "new_node", "(", "init_b", ",", "owner", "=", "owner", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Layers.DenseLayer.parameters": [[29, 31], ["None"], "methods", ["None"], ["", "def", "parameters", "(", "self", ")", "->", "List", "[", "Node", "]", ":", "\n", "        ", "return", "[", "self", ".", "w", ",", "self", ".", "b", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Layers.DenseLayer.__call__": [[32, 34], ["Layers.DenseLayer.op_factory.dense"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.dense"], ["", "def", "__call__", "(", "self", ",", "x", ":", "Node", ")", ":", "\n", "        ", "return", "self", ".", "op_factory", ".", "dense", "(", "x", ",", "self", ".", "w", ",", "self", ".", "b", ",", "self", ".", "in_dim", ",", "self", ".", "out_dim", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.ComposedOperator.FixedInputOperator.__init__": [[9, 16], ["Operator.__init__"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Reshape.__init__"], ["    ", "def", "__init__", "(", "self", ",", "operator", ":", "Operator", ",", "fixed_nodes", ":", "List", "[", "Node", "]", ",", "\n", "name", ":", "str", "=", "\"FixedInput\"", ")", ":", "\n", "        ", "player", "=", "operator", ".", "player", "\n", "super", "(", "FixedInputOperator", ",", "self", ")", ".", "__init__", "(", "player", ",", "[", "]", ",", "name", ")", "\n", "self", ".", "input_nodes", "=", "[", "input_node", "for", "input_node", "in", "operator", ".", "input_nodes", "if", "input_node", "not", "in", "fixed_nodes", "]", "\n", "self", ".", "fixed_nodes", "=", "fixed_nodes", "\n", "self", ".", "op", "=", "operator", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.ComposedOperator.FixedInputOperator.forward": [[17, 20], ["ComposedOperator.FixedInputOperator.op.forward", "ComposedOperator.FixedInputOperator.set", "ComposedOperator.FixedInputOperator.op.get"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Reshape.forward", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Node.set", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Operator.get"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "self", ".", "op", ".", "forward", "(", ")", "\n", "self", ".", "set", "(", "self", ".", "op", ".", "get", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.ComposedOperator.FixedInputOperator.clear_cache": [[21, 24], ["super().clear_cache", "ComposedOperator.FixedInputOperator.op.clear_cache"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Operator.clear_cache", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Operator.clear_cache"], ["", "def", "clear_cache", "(", "self", ")", ":", "\n", "        ", "super", "(", "FixedInputOperator", ",", "self", ")", ".", "clear_cache", "(", ")", "\n", "self", ".", "op", ".", "clear_cache", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.ComposedOperator.FixedInputOperator.gradient": [[25, 40], ["ComposedOperator.FixedInputOperator.op.gradient", "zip", "len", "grads_on_vars.append", "grads_on_vars.append", "fixed_input_nodes.append", "ComposedOperator.FixedInputOperator"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Reshape.gradient"], ["", "def", "gradient", "(", "self", ",", "output_grad", ":", "Node", ")", "->", "List", "[", "Operator", "]", ":", "\n", "        ", "original_gradients", "=", "self", ".", "op", ".", "gradient", "(", "output_grad", ")", "\n", "grads_on_vars", "=", "[", "]", "\n", "for", "original_input_node", ",", "original_gradient", "in", "zip", "(", "self", ".", "op", ".", "input_nodes", ",", "original_gradients", ")", ":", "\n", "            ", "if", "original_input_node", "in", "self", ".", "input_nodes", ":", "\n", "                ", "fixed_input_nodes", "=", "[", "]", "\n", "for", "original_gradient_input", "in", "original_gradient", ".", "input_nodes", ":", "\n", "                    ", "if", "original_gradient_input", "in", "self", ".", "fixed_nodes", ":", "\n", "                        ", "fixed_input_nodes", ".", "append", "(", "original_gradient_input", ")", "\n", "", "", "if", "len", "(", "fixed_input_nodes", ")", "!=", "0", ":", "\n", "                    ", "grads_on_vars", ".", "append", "(", "FixedInputOperator", "(", "original_gradient", ",", "fixed_input_nodes", ")", ")", "\n", "", "else", ":", "\n", "                    ", "grads_on_vars", ".", "append", "(", "original_gradient", ")", "\n", "\n", "", "", "", "return", "grads_on_vars", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.ComposedOperator.ComposedOperator.__init__": [[43, 58], ["Operator.__init__", "dict", "isinstance", "ComposedOperator.ComposedOperator.intermediate_nodes.append", "OpException", "OpException"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Reshape.__init__"], ["    ", "def", "__init__", "(", "self", ",", "player", ":", "Player", ",", "input_nodes", ":", "List", "[", "Node", "]", ",", "operators", ":", "List", "[", "Operator", "]", ",", "name", ":", "str", "=", "None", ")", ":", "\n", "        ", "super", "(", "ComposedOperator", ",", "self", ")", ".", "__init__", "(", "player", ",", "input_nodes", ",", "name", ")", "\n", "self", ".", "operators", "=", "operators", "\n", "self", ".", "intermediate_nodes", "=", "[", "]", "\n", "self", ".", "op_outputs_dict", "=", "dict", "(", ")", "\n", "self", ".", "ref_nodes", "=", "[", "]", "\n", "for", "op", "in", "operators", ":", "\n", "            ", "for", "op_input", "in", "op", ".", "input_nodes", ":", "\n", "                ", "if", "op_input", "not", "in", "self", ".", "input_nodes", "and", "op_input", "not", "in", "self", ".", "intermediate_nodes", ":", "\n", "                    ", "raise", "OpException", "(", "f\"ComposedOperator: all op_inputs must be already computed\"", ")", "\n", "", "", "if", "isinstance", "(", "op", ",", "RefOperator", ")", ":", "\n", "                ", "if", "op", ".", "ref_node", "not", "in", "self", ".", "input_nodes", "and", "op", ".", "ref_node", "not", "in", "self", ".", "intermediate_nodes", ":", "\n", "                    ", "raise", "OpException", "(", "f\"ComposedOperator: all ref_nodes must be already computed\"", ")", "\n", "", "", "self", ".", "intermediate_nodes", ".", "append", "(", "op", ")", "\n", "self", ".", "op_outputs_dict", "[", "op", "]", "=", "op", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.ComposedOperator.ComposedOperator.forward": [[59, 65], ["ComposedOperator.ComposedOperator.set", "ComposedOperator.ComposedOperator.set", "ComposedOperator.ComposedOperator.operators[].get", "op.forward", "op.get"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Node.set", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Node.set", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Operator.get", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Reshape.forward", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Operator.get"], ["", "", "def", "forward", "(", "self", ",", "use_cache", "=", "True", ")", ":", "\n", "        ", "self", ".", "set", "(", "None", ")", "\n", "for", "op", "in", "self", ".", "operators", ":", "\n", "            ", "if", "not", "use_cache", "or", "op", ".", "get", "(", ")", "is", "None", ":", "\n", "                ", "op", ".", "forward", "(", ")", "\n", "", "", "self", ".", "set", "(", "self", ".", "operators", "[", "-", "1", "]", ".", "get", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.ComposedOperator.ComposedOperator.clear_cache": [[66, 70], ["ComposedOperator.ComposedOperator.set", "op.clear_cache"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Node.set", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Operator.clear_cache"], ["", "def", "clear_cache", "(", "self", ")", ":", "\n", "        ", "self", ".", "set", "(", "None", ")", "\n", "for", "op", "in", "self", ".", "operators", ":", "\n", "            ", "op", ".", "clear_cache", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.ComposedOperator.ComposedOperator.gradient": [[71, 142], ["dict", "dict", "ComposedOperator.ComposedOperator.operators[].gradient", "enumerate", "reversed", "isinstance", "ComposedOperator.ComposedOperator", "op.gradient", "enumerate", "op.gradient.append", "Add", "ComposedOperator.ComposedOperator", "ComposedOperator.ComposedOperator.gradient.add_gradient"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Reshape.gradient", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Reshape.gradient"], ["", "", "def", "gradient", "(", "self", ",", "output_grad", ":", "Node", ")", "->", "List", "[", "Operator", "]", ":", "\n", "        ", "\"\"\"\n        The gradient of a composed operator is several operators corresponding to several input_nodes\n        And a specific gradient operator will take \n\n        :param output_grad:\n        :return:\n        \"\"\"", "\n", "\n", "\n", "# node -> gradients_op", "\n", "node_gradients_dict", "=", "dict", "(", ")", "\n", "# gradients_op -> gradients_op, like a reversed dict", "\n", "gradients_node_dict", "=", "dict", "(", ")", "\n", "grads_on_last_node_inputs", "=", "self", ".", "operators", "[", "-", "1", "]", ".", "gradient", "(", "output_grad", ")", "\n", "for", "i", ",", "node", "in", "enumerate", "(", "self", ".", "operators", "[", "-", "1", "]", ".", "input_nodes", ")", ":", "\n", "            ", "node_gradients_dict", "[", "node", "]", "=", "grads_on_last_node_inputs", "[", "i", "]", "\n", "gradients_node_dict", "[", "grads_on_last_node_inputs", "[", "i", "]", "]", "=", "grads_on_last_node_inputs", "[", "i", "]", "\n", "\n", "", "def", "add_gradient", "(", "node", ":", "Node", ",", "new_gradient", ":", "Operator", ")", ":", "\n", "# Since the new_gradient operator may contain some input nodes which are not the", "\n", "# graph inputs or the output_grad node, but some other intermediate nodes' gradients,", "\n", "# Here we must compose those gradient operators to make all of the gradients' inputs", "\n", "# only contain graph inputs and the output_grad node", "\n", "\n", "# For example, the graph", "\n", "# node1 = x + y, node2 = node1 * x", "\n", "# Then the grad on node2 = output_grad * node1", "\n", "# The grad on node1 = x * grad(node2)", "\n", "# The grad on x = grad(node1) + node1", "\n", "# Here the grad(node1) is an intermediate node, so we have to calculate it first.", "\n", "# So the x's gradient operator should compose grad(node1)", "\n", "            ", "new_input_nodes", "=", "[", "]", "\n", "new_grad_ops", "=", "[", "]", "\n", "if", "isinstance", "(", "new_gradient", ",", "RefOperator", ")", ":", "\n", "                ", "ref_nodes", "=", "[", "new_gradient", ".", "ref_node", "]", "\n", "", "else", ":", "\n", "                ", "ref_nodes", "=", "[", "]", "\n", "\n", "", "for", "input_node", "in", "new_gradient", ".", "input_nodes", "+", "ref_nodes", ":", "\n", "                ", "if", "gradients_node_dict", ".", "get", "(", "input_node", ")", "is", "not", "None", ":", "\n", "                    ", "for", "sub_input_node", "in", "gradients_node_dict", ".", "get", "(", "input_node", ")", ".", "input_nodes", ":", "\n", "                        ", "if", "sub_input_node", "not", "in", "new_input_nodes", ":", "\n", "                            ", "new_input_nodes", ".", "append", "(", "sub_input_node", ")", "\n", "", "", "new_grad_ops", ".", "append", "(", "gradients_node_dict", ".", "get", "(", "input_node", ")", ")", "\n", "", "else", ":", "\n", "                    ", "new_input_nodes", ".", "append", "(", "input_node", ")", "\n", "\n", "", "", "new_gradient", "=", "ComposedOperator", "(", "self", ".", "player", ",", "new_input_nodes", ",", "new_grad_ops", "+", "[", "new_gradient", "]", ")", "\n", "\n", "if", "node", "not", "in", "node_gradients_dict", ":", "\n", "                ", "node_gradients_dict", "[", "node", "]", "=", "new_gradient", "\n", "", "else", ":", "\n", "                ", "previous_gradient", "=", "node_gradients_dict", "[", "node", "]", "\n", "gradient_sum", "=", "Add", "(", "self", ".", "player", ",", "[", "previous_gradient", ",", "new_gradient", "]", ")", "\n", "node_gradients_dict", "[", "node", "]", "=", "ComposedOperator", "(", "self", ".", "player", ",", "\n", "list", "(", "set", "(", "previous_gradient", ".", "input_nodes", ")", "|", "set", "(", "new_gradient", ".", "input_nodes", ")", ")", ",", "\n", "[", "previous_gradient", ",", "new_gradient", ",", "gradient_sum", "]", ")", "\n", "", "gradients_node_dict", "[", "node_gradients_dict", "[", "node", "]", "]", "=", "node_gradients_dict", "[", "node", "]", "\n", "\n", "", "for", "op", "in", "reversed", "(", "self", ".", "operators", "[", ":", "-", "1", "]", ")", ":", "\n", "            ", "gradients", "=", "op", ".", "gradient", "(", "node_gradients_dict", "[", "op", "]", ")", "\n", "for", "i", ",", "node", "in", "enumerate", "(", "op", ".", "input_nodes", ")", ":", "\n", "                ", "add_gradient", "(", "node", ",", "gradients", "[", "i", "]", ")", "\n", "\n", "", "", "gradients", "=", "[", "]", "\n", "for", "node", "in", "self", ".", "input_nodes", ":", "\n", "            ", "gradients", ".", "append", "(", "node_gradients_dict", "[", "node", "]", ")", "\n", "", "self", ".", "node_gradients_dict", "=", "node_gradients_dict", "\n", "return", "gradients", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.ComposedOperator.Matmul.__init__": [[145, 148], ["check_op_input", "Operator.__init__"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.check_op_input", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Reshape.__init__"], ["    ", "@", "check_op_input", "(", "n_innodes", "=", "2", ")", "\n", "def", "__init__", "(", "self", ",", "player", ":", "Player", ",", "input_nodes", ":", "List", "[", "Node", "]", ",", "name", ":", "str", "=", "\"Matmul\"", ")", ":", "\n", "        ", "super", "(", "Matmul", ",", "self", ")", ".", "__init__", "(", "player", ",", "input_nodes", ",", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.ComposedOperator.Matmul.forward": [[149, 151], ["ComposedOperator.Matmul.set", "ComposedOperator.Matmul.player.matmul", "ComposedOperator.Matmul.input_nodes[].get", "ComposedOperator.Matmul.input_nodes[].get"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Node.set", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.matmul", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Operator.get", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Operator.get"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "self", ".", "set", "(", "self", ".", "player", ".", "matmul", "(", "self", ".", "input_nodes", "[", "0", "]", ".", "get", "(", ")", ",", "self", ".", "input_nodes", "[", "1", "]", ".", "get", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.ComposedOperator.Matmul.gradient": [[152, 161], ["Transpose", "Transpose", "ComposedOperator.Matmul", "ComposedOperator.Matmul", "ComposedOperator.ComposedOperator", "ComposedOperator.ComposedOperator"], "methods", ["None"], ["", "def", "gradient", "(", "self", ",", "output_grad", ":", "Node", ")", "->", "List", "[", "Operator", "]", ":", "\n", "        ", "in0_t", "=", "Transpose", "(", "self", ".", "player", ",", "[", "self", ".", "input_nodes", "[", "0", "]", "]", ")", "\n", "in1_t", "=", "Transpose", "(", "self", ".", "player", ",", "[", "self", ".", "input_nodes", "[", "1", "]", "]", ")", "\n", "o_matmul_in1_t", "=", "Matmul", "(", "self", ".", "player", ",", "[", "output_grad", ",", "in1_t", "]", ")", "\n", "in0_t_matmul_o", "=", "Matmul", "(", "self", ".", "player", ",", "[", "in0_t", ",", "output_grad", "]", ")", "\n", "\n", "grad_in0", "=", "ComposedOperator", "(", "self", ".", "player", ",", "[", "output_grad", ",", "self", ".", "input_nodes", "[", "1", "]", "]", ",", "[", "in1_t", ",", "o_matmul_in1_t", "]", ")", "\n", "grad_in1", "=", "ComposedOperator", "(", "self", ".", "player", ",", "[", "self", ".", "input_nodes", "[", "0", "]", ",", "output_grad", "]", ",", "[", "in0_t", ",", "in0_t_matmul_o", "]", ")", "\n", "return", "[", "grad_in0", ",", "grad_in1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.ComposedOperator.Square.__init__": [[164, 167], ["check_op_input", "Operator.__init__"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.check_op_input", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Reshape.__init__"], ["    ", "@", "check_op_input", "(", "n_innodes", "=", "1", ")", "\n", "def", "__init__", "(", "self", ",", "player", ":", "Player", ",", "input_nodes", ":", "List", "[", "Node", "]", ",", "name", ":", "str", "=", "\"Square\"", ")", ":", "\n", "        ", "super", "(", "Square", ",", "self", ")", ".", "__init__", "(", "player", ",", "input_nodes", ",", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.ComposedOperator.Square.forward": [[168, 170], ["ComposedOperator.Square.set", "ComposedOperator.Square.player.square", "ComposedOperator.Square.input_nodes[].get"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Node.set", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.square", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Operator.get"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "self", ".", "set", "(", "self", ".", "player", ".", "square", "(", "self", ".", "input_nodes", "[", "0", "]", ".", "get", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.ComposedOperator.Square.gradient": [[171, 179], ["Node", "ComposedOperator.FixedInputOperator", "Mul", "ComposedOperator.ComposedOperator", "ComposedOperator.Square.player.new_tensor", "Mul"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.Player.LocalPlayer.LocalPlayer.new_tensor"], ["", "def", "gradient", "(", "self", ",", "output_grad", ":", "Node", ")", "->", "List", "[", "Operator", "]", ":", "\n", "        ", "node_2", "=", "Node", "(", "self", ".", "player", ".", "new_tensor", "(", "lambda", ":", "2", ",", "owner", "=", "\"all\"", ")", ")", "\n", "input_mul_2", "=", "FixedInputOperator", "(", "Mul", "(", "self", ".", "player", ",", "[", "node_2", ",", "self", ".", "input_nodes", "[", "0", "]", "]", ")", ",", "[", "node_2", "]", ")", "\n", "input_mul_2_mul_output_grad", "=", "Mul", "(", "self", ".", "player", ",", "[", "input_mul_2", ",", "output_grad", "]", ")", "\n", "grad", "=", "ComposedOperator", "(", "self", ".", "player", ",", "\n", "[", "self", ".", "input_nodes", "[", "0", "]", ",", "output_grad", "]", ",", "[", "input_mul_2", ",", "input_mul_2_mul_output_grad", "]", ",", "\n", "f\"grad_{self.name}\"", ")", "\n", "return", "[", "grad", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.ComposedOperator.Sigmoid.__init__": [[182, 185], ["check_op_input", "Operator.__init__"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.check_op_input", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Reshape.__init__"], ["    ", "@", "check_op_input", "(", "n_innodes", "=", "1", ")", "\n", "def", "__init__", "(", "self", ",", "player", ":", "Player", ",", "input_nodes", ":", "List", "[", "Node", "]", ",", "name", ":", "str", "=", "\"Sigmoid\"", ")", ":", "\n", "        ", "super", "(", "Sigmoid", ",", "self", ")", ".", "__init__", "(", "player", ",", "input_nodes", ",", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.ComposedOperator.Sigmoid.forward": [[186, 188], ["ComposedOperator.Sigmoid.set", "ComposedOperator.Sigmoid.player.sigmoid", "ComposedOperator.Sigmoid.input_nodes[].get"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Node.set", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.sigmoid", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Operator.get"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "self", ".", "set", "(", "self", ".", "player", ".", "sigmoid", "(", "self", ".", "input_nodes", "[", "0", "]", ".", "get", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.ComposedOperator.Sigmoid.gradient": [[189, 200], ["Node", "ComposedOperator.FixedInputOperator", "Mul", "Mul", "ComposedOperator.ComposedOperator", "ComposedOperator.Sigmoid.player.new_tensor", "Sub"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.Player.LocalPlayer.LocalPlayer.new_tensor"], ["", "def", "gradient", "(", "self", ",", "output_grad", ":", "Node", ")", "->", "List", "[", "Operator", "]", ":", "\n", "        ", "one", "=", "Node", "(", "self", ".", "player", ".", "new_tensor", "(", "lambda", ":", "1", ",", "owner", "=", "'all'", ")", ")", "\n", "one_minus_out_op", "=", "FixedInputOperator", "(", "Sub", "(", "self", ".", "player", ",", "[", "one", ",", "self", "]", ",", "f\"{self.name}_1-out\"", ")", ",", "[", "one", "]", ")", "\n", "\n", "out_mul_one_minus_out_op", "=", "Mul", "(", "self", ".", "player", ",", "[", "self", ",", "one_minus_out_op", "]", ")", "\n", "grad_out_op", "=", "Mul", "(", "self", ".", "player", ",", "[", "output_grad", ",", "out_mul_one_minus_out_op", "]", ")", "\n", "\n", "grad_op", "=", "ComposedOperator", "(", "self", ".", "player", ",", "[", "self", ",", "output_grad", "]", ",", "\n", "[", "one_minus_out_op", ",", "out_mul_one_minus_out_op", ",", "grad_out_op", "]", ",", "f\"grad_{self.name}\"", ")", "\n", "\n", "return", "[", "grad_op", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.ComposedOperator.Tanh.__init__": [[203, 206], ["check_op_input", "Operator.__init__"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.check_op_input", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Reshape.__init__"], ["    ", "@", "check_op_input", "(", "n_innodes", "=", "1", ")", "\n", "def", "__init__", "(", "self", ",", "player", ":", "Player", ",", "input_nodes", ":", "List", "[", "Node", "]", ",", "name", ":", "str", "=", "\"Sigmoid\"", ")", ":", "\n", "        ", "super", "(", "Tanh", ",", "self", ")", ".", "__init__", "(", "player", ",", "input_nodes", ",", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.ComposedOperator.Tanh.forward": [[207, 209], ["ComposedOperator.Tanh.set", "ComposedOperator.Tanh.player.tanh", "ComposedOperator.Tanh.input_nodes[].get"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Node.set", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.tanh", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Operator.get"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "self", ".", "set", "(", "self", ".", "player", ".", "tanh", "(", "self", ".", "input_nodes", "[", "0", "]", ".", "get", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.ComposedOperator.Tanh.gradient": [[210, 221], ["Node", "ComposedOperator.Square", "Sub", "Mul", "ComposedOperator.FixedInputOperator", "ComposedOperator.Tanh.player.new_tensor", "ComposedOperator.ComposedOperator"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.Player.LocalPlayer.LocalPlayer.new_tensor"], ["", "def", "gradient", "(", "self", ",", "output_grad", ":", "Node", ")", "->", "List", "[", "Operator", "]", ":", "\n", "        ", "one", "=", "Node", "(", "self", ".", "player", ".", "new_tensor", "(", "lambda", ":", "1", ",", "owner", "=", "'all'", ")", ")", "\n", "out_square_op", "=", "Square", "(", "self", ".", "player", ",", "[", "self", "]", ")", "\n", "one_minus_out_square_op", "=", "Sub", "(", "self", ".", "player", ",", "[", "one", ",", "out_square_op", "]", ")", "\n", "one_minus_out_square_mul_outgrad_op", "=", "Mul", "(", "self", ".", "player", ",", "[", "output_grad", ",", "one_minus_out_square_op", "]", ")", "\n", "grad_op", "=", "FixedInputOperator", "(", "\n", "ComposedOperator", "(", "self", ".", "player", ",", "[", "output_grad", ",", "one", ",", "self", "]", ",", "\n", "[", "out_square_op", ",", "one_minus_out_square_op", ",", "one_minus_out_square_mul_outgrad_op", "]", ")", ",", "\n", "[", "one", "]", ",", "f\"grad_{self.name}\"", "\n", ")", "\n", "return", "[", "grad_op", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.ComposedOperator.ReluGrad.__init__": [[224, 228], ["check_op_input", "Operator.__init__"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.check_op_input", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Reshape.__init__"], ["    ", "@", "check_op_input", "(", "n_innodes", "=", "1", ")", "\n", "def", "__init__", "(", "self", ",", "player", ":", "Player", ",", "input_nodes", ":", "List", "[", "Node", "]", ",", "k", ":", "float", ")", ":", "\n", "        ", "super", "(", "ReluGrad", ",", "self", ")", ".", "__init__", "(", "player", ",", "input_nodes", ")", "\n", "self", ".", "k", "=", "k", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.ComposedOperator.ReluGrad.forward": [[229, 231], ["ComposedOperator.ReluGrad.set", "ComposedOperator.ReluGrad.player.relu_grad", "ComposedOperator.ReluGrad.input_nodes[].get"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Node.set", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.relu_grad", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Operator.get"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "self", ".", "set", "(", "self", ".", "player", ".", "relu_grad", "(", "self", ".", "input_nodes", "[", "0", "]", ".", "get", "(", ")", ",", "self", ".", "k", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.ComposedOperator.ReluGrad.gradient": [[232, 234], ["NotImplementedError"], "methods", ["None"], ["", "def", "gradient", "(", "self", ",", "output_grad", ":", "Node", ")", "->", "List", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.ComposedOperator.Relu.__init__": [[237, 241], ["check_op_input", "Operator.__init__"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.check_op_input", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Reshape.__init__"], ["    ", "@", "check_op_input", "(", "n_innodes", "=", "1", ")", "\n", "def", "__init__", "(", "self", ",", "player", ":", "Player", ",", "input_nodes", ":", "List", "[", "Node", "]", ",", "k", ":", "float", ")", ":", "\n", "        ", "super", "(", "Relu", ",", "self", ")", ".", "__init__", "(", "player", ",", "input_nodes", ")", "\n", "self", ".", "k", "=", "k", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.ComposedOperator.Relu.forward": [[242, 244], ["ComposedOperator.Relu.set", "ComposedOperator.Relu.player.relu", "ComposedOperator.Relu.input_nodes[].get"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Node.set", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.relu", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Operator.get"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "self", ".", "set", "(", "self", ".", "player", ".", "relu", "(", "self", ".", "input_nodes", "[", "0", "]", ".", "get", "(", ")", ",", "self", ".", "k", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.ComposedOperator.Relu.gradient": [[245, 249], ["ComposedOperator.ReluGrad", "Mul", "ComposedOperator.ComposedOperator"], "methods", ["None"], ["", "def", "gradient", "(", "self", ",", "output_grad", ":", "Node", ")", "->", "List", ":", "\n", "        ", "relu_grad", "=", "ReluGrad", "(", "self", ".", "player", ",", "[", "self", "]", ",", "self", ".", "k", ")", "\n", "mul_relu_grad", "=", "Mul", "(", "self", ".", "player", ",", "[", "relu_grad", ",", "output_grad", "]", ")", "\n", "return", "[", "ComposedOperator", "(", "self", ".", "player", ",", "[", "output_grad", ",", "self", "]", ",", "[", "relu_grad", ",", "mul_relu_grad", "]", ",", "f\"grad_{self.name}\"", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.ComposedOperator.Mean.__init__": [[252, 274], ["check_op_input", "Sum", "Size", "Mul", "ComposedOperator.ComposedOperator.__init__", "list", "range", "ComposedOperator.Mean.__init__.recalc"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.check_op_input", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Reshape.__init__"], ["    ", "@", "check_op_input", "(", "n_innodes", "=", "1", ")", "\n", "def", "__init__", "(", "self", ",", "player", ":", "Player", ",", "input_nodes", ":", "List", "[", "Node", "]", ",", "\n", "mean_axes", ":", "List", "[", "int", "]", "=", "None", ",", "n_heading_axes", ":", "int", "=", "0", ",", "\n", "name", ":", "str", "=", "\"Mean\"", ")", ":", "\n", "        ", "if", "mean_axes", "is", "None", ":", "\n", "            ", "mean_axes", "=", "[", "]", "\n", "", "self", ".", "mean_axes", "=", "mean_axes", "\n", "self", ".", "n_heading_axes", "=", "n_heading_axes", "\n", "\n", "def", "recalc", "(", "axis", ")", ":", "\n", "            ", "if", "axis", ">", "0", ":", "\n", "                ", "return", "n_heading_axes", "+", "axis", "\n", "", "else", ":", "\n", "                ", "return", "axis", "\n", "\n", "", "", "summing_axes", "=", "list", "(", "range", "(", "n_heading_axes", ")", ")", "+", "[", "recalc", "(", "axis", ")", "for", "axis", "in", "mean_axes", "]", "\n", "\n", "sum_op", "=", "Sum", "(", "player", ",", "input_nodes", ",", "summing_axes", ",", "n_heading_axes", ")", "\n", "size_op", "=", "Size", "(", "player", ",", "input_nodes", "[", "0", "]", ",", "summing_axes", ",", "reciprocal", "=", "True", ")", "\n", "mean_op", "=", "Mul", "(", "player", ",", "[", "size_op", ",", "sum_op", "]", ")", "\n", "\n", "super", "(", "Mean", ",", "self", ")", ".", "__init__", "(", "player", ",", "input_nodes", ",", "[", "sum_op", ",", "size_op", ",", "mean_op", "]", ",", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.ComposedOperator.MSEError.__init__": [[277, 283], ["check_op_input", "Sub", "ComposedOperator.Square", "ComposedOperator.Mean", "ComposedOperator.ComposedOperator.__init__"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.check_op_input", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Reshape.__init__"], ["    ", "@", "check_op_input", "(", "n_innodes", "=", "2", ")", "\n", "def", "__init__", "(", "self", ",", "player", ",", "input_nodes", ":", "List", "[", "Node", "]", ",", "dim", ":", "int", ",", "name", ":", "str", "=", "\"MSEError\"", ")", ":", "\n", "        ", "diff_op", "=", "Sub", "(", "player", ",", "input_nodes", ")", "\n", "square_op", "=", "Square", "(", "player", ",", "[", "diff_op", "]", ")", "\n", "mean_op", "=", "Mean", "(", "player", ",", "[", "square_op", "]", ",", "[", "]", ",", "dim", ")", "\n", "super", "(", "MSEError", ",", "self", ")", ".", "__init__", "(", "player", ",", "input_nodes", ",", "[", "diff_op", ",", "square_op", ",", "mean_op", "]", ",", "name", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.NNOperators.Dense.__init__": [[5, 14], ["check_op_input", "Matmul", "Broadcast", "Add", "ComposedOperator.__init__"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.check_op_input", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Reshape.__init__"], ["    ", "@", "check_op_input", "(", "n_innodes", "=", "3", ")", "\n", "def", "__init__", "(", "self", ",", "player", ":", "Player", ",", "input_nodes", ":", "List", "[", "Node", "]", ",", "in_dim", ":", "int", ",", "out_dim", ":", "int", ",", "name", ":", "str", "=", "\"Dense\"", ")", ":", "\n", "        ", "x", ",", "w", ",", "b", "=", "input_nodes", "\n", "xw_op", "=", "Matmul", "(", "player", ",", "[", "input_nodes", "[", "0", "]", ",", "w", "]", ")", "\n", "b_broadcast_op", "=", "Broadcast", "(", "player", ",", "[", "b", "]", ",", "[", "]", ",", "xw_op", ",", "1", ")", "\n", "xw_plus_b_op", "=", "Add", "(", "player", ",", "[", "xw_op", ",", "b_broadcast_op", "]", ")", "\n", "self", ".", "in_dim", "=", "in_dim", "\n", "self", ".", "out_dim", "=", "out_dim", "\n", "super", "(", "Dense", ",", "self", ")", ".", "__init__", "(", "player", ",", "[", "input_nodes", "[", "0", "]", ",", "w", ",", "b", "]", ",", "[", "xw_op", ",", "b_broadcast_op", ",", "xw_plus_b_op", "]", ",", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Initializers.Initializer.__call__": [[6, 8], ["NotImplementedError"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ")", "->", "Union", "[", "np", ".", "ndarray", ",", "List", "[", "np", ".", "ndarray", "]", "]", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Initializers.DenseInitializer.__init__": [[11, 14], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", ":", "int", ",", "out_dim", ":", "int", ")", ":", "\n", "        ", "self", ".", "in_dim", "=", "in_dim", "\n", "self", ".", "out_dim", "=", "out_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Initializers.GlorotUniform.__call__": [[17, 20], ["numpy.sqrt", "numpy.random.uniform", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.Backend.zeros"], ["    ", "def", "__call__", "(", "self", ")", ":", "\n", "        ", "r", "=", "np", ".", "sqrt", "(", "6", "/", "(", "self", ".", "in_dim", "+", "self", ".", "out_dim", ")", ")", "\n", "return", "np", ".", "random", ".", "uniform", "(", "-", "r", ",", "r", ",", "[", "self", ".", "in_dim", ",", "self", ".", "out_dim", "]", ")", ",", "np", ".", "zeros", "(", "[", "self", ".", "out_dim", "]", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.__init__": [[30, 33], ["dict"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "player", ":", "Player", ")", ":", "\n", "        ", "self", ".", "player", "=", "player", "\n", "self", ".", "dependency_dict", "=", "dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.clear_graph": [[34, 36], ["OpFacotry.OpFactory.dependency_dict.clear"], "methods", ["None"], ["", "def", "clear_graph", "(", "self", ")", ":", "\n", "        ", "self", ".", "dependency_dict", ".", "clear", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.new_node": [[37, 42], ["callable", "Node", "Node", "OpFacotry.OpFactory.player.new_tensor", "OpFacotry.OpFactory.player.new_tensor"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.Player.LocalPlayer.LocalPlayer.new_tensor", "home.repos.pwc.inspect_result.zfscgy_Amber.Player.LocalPlayer.LocalPlayer.new_tensor"], ["", "def", "new_node", "(", "self", ",", "x", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "callable", "(", "x", ")", ":", "\n", "            ", "return", "Node", "(", "self", ".", "player", ".", "new_tensor", "(", "x", ",", "**", "kwargs", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "Node", "(", "self", ".", "player", ".", "new_tensor", "(", "lambda", ":", "x", ",", "**", "kwargs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.identity": [[43, 46], ["OpFacotry.new_operator", "Identity"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.new_operator"], ["", "", "@", "new_operator", "(", ")", "\n", "def", "identity", "(", "self", ",", "x", ":", "Node", ")", "->", "Operator", ":", "\n", "        ", "return", "Identity", "(", "self", ".", "player", ",", "[", "x", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.negative": [[47, 50], ["OpFacotry.new_operator", "Negative"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.new_operator"], ["", "@", "new_operator", "(", ")", "\n", "def", "negative", "(", "self", ",", "x", ":", "Node", ")", "->", "Operator", ":", "\n", "        ", "return", "Negative", "(", "self", ".", "player", ",", "[", "x", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.add": [[51, 54], ["OpFacotry.new_operator", "Add"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.new_operator"], ["", "@", "new_operator", "(", ")", "\n", "def", "add", "(", "self", ",", "x", ":", "Node", ",", "y", ":", "Node", ")", "->", "Operator", ":", "\n", "        ", "return", "Add", "(", "self", ".", "player", ",", "[", "x", ",", "y", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.sub": [[55, 58], ["OpFacotry.new_operator", "Sub"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.new_operator"], ["", "@", "new_operator", "(", ")", "\n", "def", "sub", "(", "self", ",", "x", ":", "Node", ",", "y", ":", "Node", ")", "->", "Operator", ":", "\n", "        ", "return", "Sub", "(", "self", ".", "player", ",", "[", "x", ",", "y", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.mul": [[59, 62], ["OpFacotry.new_operator", "Mul"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.new_operator"], ["", "@", "new_operator", "(", ")", "\n", "def", "mul", "(", "self", ",", "x", ":", "Node", ",", "y", ":", "Node", ")", "->", "Operator", ":", "\n", "        ", "return", "Mul", "(", "self", ".", "player", ",", "[", "x", ",", "y", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.matmul": [[63, 66], ["OpFacotry.new_operator", "Matmul"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.new_operator"], ["", "@", "new_operator", "(", ")", "\n", "def", "matmul", "(", "self", ",", "x", ":", "Node", ",", "y", ":", "Node", ")", "->", "Operator", ":", "\n", "        ", "return", "Matmul", "(", "self", ".", "player", ",", "[", "x", ",", "y", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.broadcast": [[67, 70], ["OpFacotry.new_operator", "Broadcast"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.new_operator"], ["", "@", "new_operator", "(", "input_ops", "=", "[", "0", ",", "1", "]", ")", "\n", "def", "broadcast", "(", "self", ",", "x", ":", "Node", ",", "y", ":", "Node", ",", "repeat_axes", ":", "List", "[", "int", "]", ",", "n_heading_axes", ":", "int", "=", "0", ")", "->", "Operator", ":", "\n", "        ", "return", "Broadcast", "(", "self", ".", "player", ",", "[", "x", "]", ",", "repeat_axes", ",", "y", ",", "n_heading_axes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.reshape": [[71, 74], ["OpFacotry.new_operator", "Reshape"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.new_operator"], ["", "@", "new_operator", "(", "input_ops", "=", "[", "0", "]", ")", "\n", "def", "reshape", "(", "self", ",", "x", ":", "Node", ",", "original_shape", ":", "Tuple", "[", "int", ",", "...", "]", ",", "new_shape", ":", "Tuple", "[", "int", ",", "...", "]", ")", ":", "\n", "        ", "return", "Reshape", "(", "self", ".", "player", ",", "[", "x", "]", ",", "original_shape", ",", "new_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.sum": [[75, 78], ["OpFacotry.new_operator", "Sum"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.new_operator"], ["", "@", "new_operator", "(", "input_ops", "=", "[", "0", "]", ")", "\n", "def", "sum", "(", "self", ",", "x", ":", "Node", ",", "axis", ":", "List", "[", "int", "]", "=", "None", ",", "n_heading_axes", ":", "int", "=", "0", ")", "->", "Operator", ":", "\n", "        ", "return", "Sum", "(", "self", ".", "player", ",", "[", "x", "]", ",", "axis", ",", "n_heading_axes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.mean": [[79, 82], ["OpFacotry.new_operator", "Mean"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.new_operator"], ["", "@", "new_operator", "(", "input_ops", "=", "[", "0", "]", ")", "\n", "def", "mean", "(", "self", ",", "x", ":", "Node", ",", "axis", ":", "List", "[", "int", "]", "=", "None", ",", "n_heading_axes", ":", "int", "=", "0", ")", ":", "\n", "        ", "return", "Mean", "(", "self", ".", "player", ",", "[", "x", "]", ",", "axis", ",", "n_heading_axes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.transpose": [[83, 86], ["OpFacotry.new_operator", "Transpose"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.new_operator"], ["", "@", "new_operator", "(", "input_ops", "=", "[", "0", "]", ")", "\n", "def", "transpose", "(", "self", ",", "x", ":", "Node", ",", "axis0", ":", "int", "=", "-", "1", ",", "axis1", ":", "int", "=", "-", "2", ")", "->", "Operator", ":", "\n", "        ", "return", "Transpose", "(", "self", ".", "player", ",", "[", "x", "]", ",", "axis0", ",", "axis1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.square": [[87, 90], ["OpFacotry.new_operator", "Square"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.new_operator"], ["", "@", "new_operator", "(", ")", "\n", "def", "square", "(", "self", ",", "x", ":", "Node", ")", "->", "Operator", ":", "\n", "        ", "return", "Square", "(", "self", ".", "player", ",", "[", "x", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.sigmoid": [[91, 94], ["OpFacotry.new_operator", "Sigmoid"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.new_operator"], ["", "@", "new_operator", "(", ")", "\n", "def", "sigmoid", "(", "self", ",", "x", ":", "Node", ")", "->", "Operator", ":", "\n", "        ", "return", "Sigmoid", "(", "self", ".", "player", ",", "[", "x", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.tanh": [[95, 98], ["OpFacotry.new_operator", "Tanh"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.new_operator"], ["", "@", "new_operator", "(", ")", "\n", "def", "tanh", "(", "self", ",", "x", ":", "Node", ")", "->", "Operator", ":", "\n", "        ", "return", "Tanh", "(", "self", ".", "player", ",", "[", "x", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.relu": [[99, 102], ["OpFacotry.new_operator", "Relu"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.new_operator"], ["", "@", "new_operator", "(", "input_ops", "=", "[", "0", "]", ")", "\n", "def", "relu", "(", "self", ",", "x", ":", "Node", ",", "k", ":", "float", ")", ":", "\n", "        ", "return", "Relu", "(", "self", ".", "player", ",", "[", "x", "]", ",", "k", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.relu_grad": [[103, 106], ["OpFacotry.new_operator", "ReluGrad"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.new_operator"], ["", "@", "new_operator", "(", ")", "\n", "def", "relu_grad", "(", "self", ",", "x", ":", "Node", ",", "k", ":", "float", ")", ":", "\n", "        ", "return", "ReluGrad", "(", "self", ".", "player", ",", "[", "x", "]", ",", "k", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.mean_square_error": [[107, 110], ["OpFacotry.new_operator", "MSEError"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.new_operator"], ["", "@", "new_operator", "(", "input_ops", "=", "[", "0", "]", ")", "\n", "def", "mean_square_error", "(", "self", ",", "x", ":", "Node", ",", "y", ":", "Node", ",", "dim", ":", "int", ")", ":", "\n", "        ", "return", "MSEError", "(", "self", ".", "player", ",", "[", "x", ",", "y", "]", ",", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.dense": [[111, 114], ["OpFacotry.new_operator", "Dense"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.new_operator"], ["", "@", "new_operator", "(", "input_ops", "=", "[", "0", ",", "1", ",", "2", "]", ")", "\n", "def", "dense", "(", "self", ",", "x", ":", "Node", ",", "w", ":", "Node", ",", "b", ":", "Node", ",", "in_dim", ":", "int", ",", "out_dim", ":", "int", ")", ":", "\n", "        ", "return", "Dense", "(", "self", ".", "player", ",", "[", "x", ",", "w", ",", "b", "]", ",", "in_dim", ",", "out_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.gradient_on": [[115, 139], ["list", "Graph", "Graph.compute_gradients", "OpFacotry.OpFactory.player.new_tensor", "OpFacotry.OpFactory.player.new_tensor", "len", "remain_ops.pop", "reversed", "isinstance", "remain_ops.insert", "list.append", "input_nodes.append"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.Graph.Graph.compute_gradients", "home.repos.pwc.inspect_result.zfscgy_Amber.Player.LocalPlayer.LocalPlayer.new_tensor", "home.repos.pwc.inspect_result.zfscgy_Amber.Player.LocalPlayer.LocalPlayer.new_tensor"], ["", "def", "gradient_on", "(", "self", ",", "output_op", ":", "Operator", ",", "params", ":", "List", "[", "Node", "]", ",", "scale", ":", "float", "=", "None", ")", "->", "List", "[", "Node", "]", ":", "\n", "        ", "if", "scale", "is", "None", ":", "\n", "            ", "scale_node", "=", "self", ".", "player", ".", "new_tensor", "(", "lambda", ":", "1", ",", "owner", "=", "'all'", ")", "\n", "", "else", ":", "\n", "            ", "scale_node", "=", "self", ".", "player", ".", "new_tensor", "(", "lambda", ":", "scale", ",", "owner", "=", "'all'", ")", "\n", "", "input_nodes", "=", "[", "]", "\n", "operators", "=", "[", "output_op", "]", "\n", "\n", "remain_ops", "=", "[", "output_op", "]", "\n", "while", "len", "(", "remain_ops", ")", "!=", "0", ":", "\n", "            ", "next_op", "=", "remain_ops", ".", "pop", "(", ")", "\n", "for", "node", "in", "next_op", ".", "input_nodes", ":", "\n", "                ", "if", "isinstance", "(", "node", ",", "Operator", ")", ":", "\n", "                    ", "remain_ops", ".", "insert", "(", "0", ",", "node", ")", "\n", "if", "node", "not", "in", "operators", ":", "\n", "                        ", "operators", ".", "append", "(", "node", ")", "\n", "", "", "else", ":", "\n", "                    ", "if", "node", "not", "in", "params", "and", "node", "not", "in", "input_nodes", ":", "\n", "                        ", "input_nodes", ".", "append", "(", "node", ")", "\n", "\n", "", "", "", "", "operators", "=", "list", "(", "reversed", "(", "operators", ")", ")", "\n", "graph", "=", "Graph", "(", "self", ".", "player", ",", "input_nodes", ",", "params", ",", "operators", ")", "\n", "grads", "=", "graph", ".", "compute_gradients", "(", "scale_node", ")", "\n", "return", "grads", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.use_as_default": [[140, 147], ["OpFacotry.OpFactory.negative", "OpFacotry.OpFactory.add", "OpFacotry.OpFactory.sub", "OpFacotry.OpFactory.mul", "OpFacotry.OpFactory.matmul"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.negative", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.add", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.sub", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.mul", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.matmul"], ["", "def", "use_as_default", "(", "self", ")", ":", "\n", "        ", "OpFactory", ".", "default", "=", "self", "\n", "Node", ".", "__neg__", "=", "lambda", "x", ":", "self", ".", "negative", "(", "x", ")", "\n", "Node", ".", "__add__", "=", "lambda", "x", ",", "y", ":", "self", ".", "add", "(", "x", ",", "y", ")", "\n", "Node", ".", "__sub__", "=", "lambda", "x", ",", "y", ":", "self", ".", "sub", "(", "x", ",", "y", ")", "\n", "Node", ".", "__mul__", "=", "lambda", "x", ",", "y", ":", "self", ".", "mul", "(", "x", ",", "y", ")", "\n", "Node", ".", "__matmul__", "=", "lambda", "x", ",", "y", ":", "self", ".", "matmul", "(", "x", ",", "y", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.new_operator": [[6, 24], ["f", "list", "f.forward", "_opf.dependency_dict[].append"], "function", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Reshape.forward"], ["def", "new_operator", "(", "input_ops", "=", "None", ")", ":", "\n", "    ", "def", "inner_func", "(", "f", ":", "Callable", ")", ":", "\n", "        ", "def", "wrapper", "(", "_opf", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "            ", "out_op", "=", "f", "(", "_opf", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "args", "=", "list", "(", "args", ")", "\n", "if", "input_ops", "is", "None", ":", "\n", "                ", "pass", "\n", "", "else", ":", "\n", "                ", "args", "=", "[", "args", "[", "i", "]", "for", "i", "in", "input_ops", "]", "\n", "", "for", "arg", "in", "args", ":", "\n", "                ", "if", "out_op", "not", "in", "_opf", ".", "dependency_dict", ":", "\n", "                    ", "_opf", ".", "dependency_dict", "[", "out_op", "]", "=", "[", "]", "\n", "", "else", ":", "\n", "                    ", "_opf", ".", "dependency_dict", "[", "out_op", "]", ".", "append", "(", "arg", ")", "\n", "", "", "out_op", ".", "forward", "(", ")", "\n", "return", "out_op", "\n", "", "return", "wrapper", "\n", "", "return", "inner_func", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.OpException.__init__": [[8, 10], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "msg", ")", ":", "\n", "        ", "self", ".", "msg", "=", "msg", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.OpException.__str__": [[11, 13], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "msg", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Node.__init__": [[30, 32], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "tensor", ":", "Tensor", "=", "None", ")", ":", "\n", "        ", "self", ".", "tensor", "=", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Node.set": [[33, 35], ["None"], "methods", ["None"], ["", "def", "set", "(", "self", ",", "tensor", ":", "Union", "[", "Tensor", ",", "None", "]", ")", ":", "\n", "        ", "self", ".", "tensor", "=", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Node.get": [[36, 38], ["None"], "methods", ["None"], ["", "def", "get", "(", "self", ")", "->", "Union", "[", "Tensor", ",", "None", "]", ":", "\n", "        ", "return", "self", ".", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Operator.__init__": [[46, 52], ["Operator.Node.__init__"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Reshape.__init__"], ["def", "__init__", "(", "self", ",", "player", ":", "Player", ",", "input_nodes", ":", "List", "[", "Node", "]", ",", "name", ":", "str", "=", "None", ")", ":", "\n", "        ", "super", "(", "Operator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "player", "=", "player", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "input_nodes", "=", "input_nodes", "\n", "self", ".", "tensor", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Operator.forward": [[53, 55], ["NotImplementedError"], "methods", ["None"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Operator.get": [[56, 60], ["Operator.Node.get", "Operator.Operator.forward"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Operator.get", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Reshape.forward"], ["", "def", "get", "(", "self", ")", "->", "Union", "[", "Tensor", ",", "None", "]", ":", "\n", "        ", "if", "self", ".", "tensor", "is", "None", ":", "\n", "            ", "self", ".", "forward", "(", ")", "\n", "", "return", "super", "(", "Operator", ",", "self", ")", ".", "get", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Operator.clear_cache": [[61, 63], ["Operator.Operator.set"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Node.set"], ["", "def", "clear_cache", "(", "self", ")", ":", "\n", "        ", "self", ".", "set", "(", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Operator.gradient": [[64, 72], ["NotImplementedError"], "methods", ["None"], ["", "def", "gradient", "(", "self", ",", "output_grad", ":", "Node", ")", "->", "List", ":", "\n", "        ", "\"\"\"\n        :return: A list of operators represents the gradients of this operators' inputs.\n        The gradient operator takes two inputs:\n         - First is the gradient of this operator;\n         - Second is all the other inputs of this operator\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Identity.__init__": [[75, 78], ["Operator.check_op_input", "Operator.Operator.__init__"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.check_op_input", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Reshape.__init__"], ["    ", "@", "check_op_input", "(", "n_innodes", "=", "1", ")", "\n", "def", "__init__", "(", "self", ",", "player", ":", "Player", ",", "nodes", ":", "List", "[", "Node", "]", ",", "name", ":", "str", "=", "\"Identity\"", ")", ":", "\n", "        ", "super", "(", "Identity", ",", "self", ")", ".", "__init__", "(", "player", ",", "nodes", ",", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Identity.forward": [[79, 81], ["Operator.Identity.set", "Operator.Identity.input_nodes[].get"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Node.set", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Operator.get"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "self", ".", "set", "(", "self", ".", "input_nodes", "[", "0", "]", ".", "get", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Identity.gradient": [[82, 84], ["Operator.Identity"], "methods", ["None"], ["", "def", "gradient", "(", "self", ",", "output_grad", ":", "Node", ")", "->", "List", ":", "\n", "        ", "raise", "[", "Identity", "(", "self", ".", "player", ",", "[", "output_grad", "]", ",", "name", "=", "f\"grad_{self.name}\"", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Negative.__init__": [[87, 90], ["Operator.check_op_input", "Operator.Operator.__init__"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.check_op_input", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Reshape.__init__"], ["    ", "@", "check_op_input", "(", "n_innodes", "=", "1", ")", "\n", "def", "__init__", "(", "self", ",", "player", ":", "Player", ",", "nodes", ":", "List", "[", "Node", "]", ",", "name", ":", "str", "=", "\"Negative\"", ")", ":", "\n", "        ", "super", "(", "Negative", ",", "self", ")", ".", "__init__", "(", "player", ",", "nodes", ",", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Negative.forward": [[91, 93], ["Operator.Negative.set", "Operator.Negative.player.neg", "Operator.Negative.input_nodes[].get"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Node.set", "home.repos.pwc.inspect_result.zfscgy_Amber.Player.LocalPlayer.LocalPlayer.neg", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Operator.get"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "self", ".", "set", "(", "self", ".", "player", ".", "neg", "(", "self", ".", "input_nodes", "[", "0", "]", ".", "get", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Negative.gradient": [[94, 96], ["Operator.Negative"], "methods", ["None"], ["", "def", "gradient", "(", "self", ",", "output_grad", ":", "Node", ")", "->", "List", ":", "\n", "        ", "raise", "[", "Negative", "(", "self", ".", "player", ",", "[", "output_grad", "]", ",", "name", "=", "f\"grad_{self.name}\"", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Add.__init__": [[99, 102], ["Operator.check_op_input", "Operator.Operator.__init__"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.check_op_input", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Reshape.__init__"], ["    ", "@", "check_op_input", "(", "n_innodes", "=", "2", ")", "\n", "def", "__init__", "(", "self", ",", "player", ":", "Player", ",", "nodes", ":", "List", "[", "Node", "]", ",", "name", ":", "str", "=", "\"Add\"", ")", ":", "\n", "        ", "super", "(", "Add", ",", "self", ")", ".", "__init__", "(", "player", ",", "nodes", ",", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Add.forward": [[103, 105], ["Operator.Add.set", "Operator.Add.player.add", "Operator.Add.input_nodes[].get", "Operator.Add.input_nodes[].get"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Node.set", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.add", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Operator.get", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Operator.get"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "self", ".", "set", "(", "self", ".", "player", ".", "add", "(", "self", ".", "input_nodes", "[", "0", "]", ".", "get", "(", ")", ",", "self", ".", "input_nodes", "[", "1", "]", ".", "get", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Add.gradient": [[106, 109], ["Operator.Identity", "Operator.Identity"], "methods", ["None"], ["", "def", "gradient", "(", "self", ",", "output_grad", ":", "Node", ")", "->", "List", "[", "Operator", "]", ":", "\n", "        ", "return", "[", "Identity", "(", "self", ".", "player", ",", "[", "output_grad", "]", ",", "name", "=", "f\"grad_{self.name}_innode0\"", ")", ",", "\n", "Identity", "(", "self", ".", "player", ",", "[", "output_grad", "]", ",", "name", "=", "f\"grad_{self.name}_innode1\"", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Sub.__init__": [[112, 115], ["Operator.check_op_input", "Operator.Operator.__init__"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.check_op_input", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Reshape.__init__"], ["    ", "@", "check_op_input", "(", "n_innodes", "=", "2", ")", "\n", "def", "__init__", "(", "self", ",", "player", ":", "Player", ",", "nodes", ":", "List", "[", "Node", "]", ",", "name", ":", "str", "=", "\"Sub\"", ")", ":", "\n", "        ", "super", "(", "Sub", ",", "self", ")", ".", "__init__", "(", "player", ",", "nodes", ",", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Sub.forward": [[116, 118], ["Operator.Sub.set", "Operator.Sub.player.sub", "Operator.Sub.input_nodes[].get", "Operator.Sub.input_nodes[].get"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Node.set", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.sub", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Operator.get", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Operator.get"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "self", ".", "set", "(", "self", ".", "player", ".", "sub", "(", "self", ".", "input_nodes", "[", "0", "]", ".", "get", "(", ")", ",", "self", ".", "input_nodes", "[", "1", "]", ".", "get", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Sub.gradient": [[119, 122], ["Operator.Identity", "Operator.Negative"], "methods", ["None"], ["", "def", "gradient", "(", "self", ",", "output_grad", ":", "Node", ")", "->", "List", "[", "Operator", "]", ":", "\n", "        ", "return", "[", "Identity", "(", "self", ".", "player", ",", "[", "output_grad", "]", ",", "name", "=", "f\"grad_{self.name}_innode0\"", ")", ",", "\n", "Negative", "(", "self", ".", "player", ",", "[", "output_grad", "]", ",", "name", "=", "f\"grad_{self.name}_innode1\"", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Mul.__init__": [[125, 128], ["Operator.check_op_input", "Operator.Operator.__init__"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.check_op_input", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Reshape.__init__"], ["    ", "@", "check_op_input", "(", "n_innodes", "=", "2", ")", "\n", "def", "__init__", "(", "self", ",", "player", ":", "Player", ",", "nodes", ":", "List", "[", "Node", "]", ",", "name", ":", "str", "=", "\"Mul\"", ")", ":", "\n", "        ", "super", "(", "Mul", ",", "self", ")", ".", "__init__", "(", "player", ",", "nodes", ",", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Mul.forward": [[129, 131], ["Operator.Mul.set", "Operator.Mul.player.mul", "Operator.Mul.input_nodes[].get", "Operator.Mul.input_nodes[].get"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Node.set", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.mul", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Operator.get", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Operator.get"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "self", ".", "set", "(", "self", ".", "player", ".", "mul", "(", "self", ".", "input_nodes", "[", "0", "]", ".", "get", "(", ")", ",", "self", ".", "input_nodes", "[", "1", "]", ".", "get", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Mul.gradient": [[132, 135], ["Operator.Mul", "Operator.Mul"], "methods", ["None"], ["", "def", "gradient", "(", "self", ",", "output_grad", ":", "Node", ")", "->", "List", ":", "\n", "        ", "return", "[", "Mul", "(", "self", ".", "player", ",", "[", "output_grad", ",", "self", ".", "input_nodes", "[", "1", "]", "]", ",", "f\"grad_{self.name}_innode0\"", ")", ",", "\n", "Mul", "(", "self", ".", "player", ",", "[", "output_grad", ",", "self", ".", "input_nodes", "[", "0", "]", "]", ",", "f\"grad_{self.name}_innode1\"", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.RefOperator.__init__": [[138, 141], ["Operator.Operator.__init__"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Reshape.__init__"], ["    ", "def", "__init__", "(", "self", ",", "player", ":", "Player", ",", "input_nodes", ":", "List", "[", "Node", "]", ",", "ref_node", ":", "Node", ",", "name", ":", "str", ")", ":", "\n", "        ", "super", "(", "RefOperator", ",", "self", ")", ".", "__init__", "(", "player", ",", "input_nodes", ",", "name", ")", "\n", "self", ".", "ref_node", "=", "ref_node", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Broadcast.__init__": [[144, 150], ["Operator.check_op_input", "Operator.RefOperator.__init__"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.check_op_input", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Reshape.__init__"], ["    ", "@", "check_op_input", "(", "n_innodes", "=", "1", ")", "\n", "def", "__init__", "(", "self", ",", "player", ":", "Player", ",", "input_nodes", ":", "List", "[", "Node", "]", ",", "\n", "repeat_axes", ":", "List", "[", "int", "]", ",", "ref_node", ":", "Node", ",", "n_heading_axes", ":", "int", "=", "0", ",", "name", ":", "str", "=", "\"Broadcast\"", ")", ":", "\n", "        ", "super", "(", "Broadcast", ",", "self", ")", ".", "__init__", "(", "player", ",", "input_nodes", ",", "ref_node", ",", "name", ")", "\n", "self", ".", "repeat_axes", "=", "repeat_axes", "\n", "self", ".", "n_heading_axes", "=", "n_heading_axes", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Broadcast.forward": [[151, 161], ["Operator.Broadcast.set", "Operator.Broadcast.input_nodes[].get", "len", "Operator.OpException", "Operator.Broadcast.player.broadcast", "len", "Operator.OpException", "Operator.OpException", "len", "Operator.Broadcast.input_nodes[].get", "Operator.Broadcast.ref_node.get", "Operator.Broadcast.ref_node.get", "Operator.Broadcast.input_nodes[].get", "Operator.Broadcast.input_nodes[].get"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Node.set", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Operator.get", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.broadcast", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Operator.get", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Operator.get", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Operator.get", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Operator.get", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Operator.get"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "input_shape", "=", "self", ".", "input_nodes", "[", "0", "]", ".", "get", "(", ")", ".", "shape", "\n", "for", "repeat_axis", "in", "self", ".", "repeat_axes", ":", "\n", "            ", "if", "repeat_axis", ">=", "len", "(", "input_shape", ")", ":", "\n", "                ", "raise", "OpException", "(", "f\"Broadcast.forward: axis {repeat_axis} is greater than input dimension\"", ")", "\n", "", "if", "self", ".", "input_nodes", "[", "0", "]", ".", "get", "(", ")", ".", "shape", "[", "repeat_axis", "]", "!=", "1", ":", "\n", "                ", "raise", "OpException", "(", "f\"Broadcast.forward: illegal input shape {self.input_nodes[0].get().shape}\"", ")", "\n", "", "", "if", "len", "(", "input_shape", ")", "+", "self", ".", "n_heading_axes", "!=", "len", "(", "self", ".", "ref_node", ".", "get", "(", ")", ".", "shape", ")", ":", "\n", "            ", "raise", "OpException", "(", "f\"Broadcast.forward: ref_node do not match the axes\"", ")", "\n", "", "self", ".", "set", "(", "self", ".", "player", ".", "broadcast", "(", "self", ".", "input_nodes", "[", "0", "]", ".", "get", "(", ")", ",", "self", ".", "ref_node", ".", "get", "(", ")", ".", "shape", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Broadcast.gradient": [[162, 173], ["Operator.Broadcast.gradient.recalc"], "methods", ["None"], ["", "def", "gradient", "(", "self", ",", "output_grad", ":", "Node", ")", "->", "List", "[", "Operator", "]", ":", "\n", "        ", "def", "recalc", "(", "axis", ")", ":", "\n", "            ", "if", "axis", ">=", "0", ":", "\n", "                ", "return", "self", ".", "n_heading_axes", "+", "axis", "\n", "", "else", ":", "\n", "                ", "return", "axis", "\n", "\n", "", "", "sum_axes", "=", "[", "recalc", "(", "repeat_axis", ")", "for", "repeat_axis", "in", "self", ".", "repeat_axes", "]", "\n", "return", "[", "\n", "Sum", "(", "self", ".", "player", ",", "[", "output_grad", "]", ",", "list", "(", "range", "(", "self", ".", "n_heading_axes", ")", ")", "+", "sum_axes", ",", "self", ".", "n_heading_axes", ",", "\n", "f\"grad_{self.name}\"", ")", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Sum.__init__": [[177, 185], ["Operator.check_op_input", "Operator.Operator.__init__"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.check_op_input", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Reshape.__init__"], ["    ", "@", "check_op_input", "(", "n_innodes", "=", "1", ")", "\n", "def", "__init__", "(", "self", ",", "player", ":", "Player", ",", "input_nodes", ":", "List", "[", "Node", "]", ",", "\n", "sum_axes", ":", "List", "[", "int", "]", "=", "None", ",", "n_heading_axes", ":", "int", "=", "0", ",", "name", ":", "str", "=", "\"Sum\"", ")", ":", "\n", "        ", "super", "(", "Sum", ",", "self", ")", ".", "__init__", "(", "player", ",", "input_nodes", ",", "name", ")", "\n", "if", "sum_axes", "is", "None", ":", "\n", "            ", "sum_axes", "=", "[", "]", "\n", "", "self", ".", "sum_axes", "=", "sum_axes", "\n", "self", ".", "n_heading_axes", "=", "n_heading_axes", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Sum.forward": [[186, 198], ["list().copy", "Operator.Sum.set", "Operator.Sum.input_nodes[].get", "len", "Operator.OpException", "Operator.Sum.player.reshape", "list", "len", "Operator.OpException", "Operator.Sum.player.sum", "tuple", "Operator.Sum.input_nodes[].get", "tuple"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Node.set", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Operator.get", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.reshape", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.sum", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Operator.get"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "input_shape", "=", "self", ".", "input_nodes", "[", "0", "]", ".", "get", "(", ")", ".", "shape", "\n", "new_shape", "=", "list", "(", "input_shape", ")", ".", "copy", "(", ")", "\n", "for", "axis", "in", "self", ".", "sum_axes", ":", "\n", "            ", "new_shape", "[", "axis", "]", "=", "1", "\n", "if", "axis", ">=", "len", "(", "input_shape", ")", ":", "\n", "                ", "raise", "OpException", "(", "f\"Sum.forward: axis {axis} is greater than input dimension\"", ")", "\n", "", "", "if", "self", ".", "n_heading_axes", ">", "len", "(", "input_shape", ")", ":", "\n", "            ", "raise", "OpException", "(", "f\"Sum.forward: number of heading axes is greater than input dimension\"", ")", "\n", "", "new_shape", "=", "new_shape", "[", "self", ".", "n_heading_axes", ":", "]", "\n", "self", ".", "set", "(", "\n", "self", ".", "player", ".", "reshape", "(", "self", ".", "player", ".", "sum", "(", "self", ".", "input_nodes", "[", "0", "]", ".", "get", "(", ")", ",", "tuple", "(", "self", ".", "sum_axes", ")", ")", ",", "tuple", "(", "new_shape", ")", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Sum.gradient": [[200, 204], ["Operator.Broadcast"], "methods", ["None"], ["", "def", "gradient", "(", "self", ",", "output_grad", ":", "Node", ")", "->", "List", "[", "Operator", "]", ":", "\n", "        ", "return", "[", "\n", "Broadcast", "(", "self", ".", "player", ",", "[", "output_grad", "]", ",", "self", ".", "sum_axes", "[", "self", ".", "n_heading_axes", ":", "]", ",", "\n", "self", ".", "input_nodes", "[", "0", "]", ",", "self", ".", "n_heading_axes", ")", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Transpose.__init__": [[208, 214], ["Operator.check_op_input", "Operator.Operator.__init__"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.check_op_input", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Reshape.__init__"], ["    ", "@", "check_op_input", "(", "n_innodes", "=", "1", ")", "\n", "def", "__init__", "(", "self", ",", "player", ":", "Player", ",", "input_nodes", ":", "List", "[", "Node", "]", ",", "axis0", ":", "int", "=", "-", "1", ",", "axis1", ":", "int", "=", "-", "2", ",", "\n", "name", ":", "str", "=", "\"Transpose\"", ")", ":", "\n", "        ", "super", "(", "Transpose", ",", "self", ")", ".", "__init__", "(", "player", ",", "input_nodes", ",", "name", ")", "\n", "self", ".", "axis0", "=", "axis0", "\n", "self", ".", "axis1", "=", "axis1", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Transpose.forward": [[215, 217], ["Operator.Transpose.set", "Operator.Transpose.player.transpose", "Operator.Transpose.input_nodes[].get"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Node.set", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.transpose", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Operator.get"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "self", ".", "set", "(", "self", ".", "player", ".", "transpose", "(", "self", ".", "input_nodes", "[", "0", "]", ".", "get", "(", ")", ",", "self", ".", "axis0", ",", "self", ".", "axis1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Transpose.gradient": [[218, 220], ["Operator.Transpose"], "methods", ["None"], ["", "def", "gradient", "(", "self", ",", "output_grad", ":", "Node", ")", "->", "List", "[", "Operator", "]", ":", "\n", "        ", "return", "[", "Transpose", "(", "self", ".", "player", ",", "[", "output_grad", "]", ",", "self", ".", "axis1", ",", "self", ".", "axis0", ",", "f\"grad_{self.name}\"", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Size.__init__": [[223, 231], ["Operator.Operator.__init__", "isinstance"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Reshape.__init__"], ["    ", "def", "__init__", "(", "self", ",", "player", ":", "Player", ",", "ref_node", ":", "Node", ",", "axis", ":", "Union", "[", "List", "[", "int", "]", ",", "int", "]", "=", "None", ",", "name", ":", "str", "=", "\"Size\"", ",", "\n", "reciprocal", ":", "bool", "=", "False", ")", ":", "\n", "        ", "super", "(", "Size", ",", "self", ")", ".", "__init__", "(", "player", ",", "[", "]", ",", "name", ")", "\n", "self", ".", "ref_node", "=", "ref_node", "\n", "if", "isinstance", "(", "axis", ",", "int", ")", ":", "\n", "            ", "axis", "=", "[", "axis", "]", "\n", "", "self", ".", "axis", "=", "axis", "\n", "self", ".", "reciprocal", "=", "reciprocal", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Size.forward": [[232, 250], ["Operator.Size.ref_node.get", "Operator.OpException", "Operator.Size.ref_node.get", "Operator.Size.set", "Operator.Size.set", "Operator.Size.player.new_tensor", "Operator.Size.player.new_tensor", "len", "Operator.OpException", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Operator.get", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Operator.get", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Node.set", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Node.set", "home.repos.pwc.inspect_result.zfscgy_Amber.Player.LocalPlayer.LocalPlayer.new_tensor", "home.repos.pwc.inspect_result.zfscgy_Amber.Player.LocalPlayer.LocalPlayer.new_tensor"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "ref_node", ".", "get", "(", ")", "is", "None", ":", "\n", "            ", "raise", "OpException", "(", "\"Size.forward: ref_node must be computed first\"", ")", "\n", "", "shape", "=", "self", ".", "ref_node", ".", "get", "(", ")", ".", "shape", "\n", "size", "=", "1", "\n", "if", "self", ".", "axis", "is", "None", ":", "\n", "            ", "for", "dim", "in", "shape", ":", "\n", "                ", "size", "*=", "dim", "\n", "", "", "else", ":", "\n", "            ", "for", "idx", "in", "self", ".", "axis", ":", "\n", "                ", "if", "idx", ">=", "len", "(", "shape", ")", ":", "\n", "                    ", "raise", "OpException", "(", "f\"Size.forward: cannot get axis {idx} when shape is {shape}\"", ")", "\n", "", "else", ":", "\n", "                    ", "size", "*=", "shape", "[", "idx", "]", "\n", "", "", "", "if", "not", "self", ".", "reciprocal", ":", "\n", "            ", "self", ".", "set", "(", "self", ".", "player", ".", "new_tensor", "(", "lambda", ":", "np", ".", "array", "(", "size", ")", ",", "owner", "=", "\"all\"", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "set", "(", "self", ".", "player", ".", "new_tensor", "(", "lambda", ":", "np", ".", "array", "(", "1.0", "/", "size", ")", ",", "owner", "=", "\"all\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Size.gradient": [[251, 253], ["None"], "methods", ["None"], ["", "", "def", "gradient", "(", "self", ",", "output_grad", ":", "Node", ")", "->", "List", "[", "Operator", "]", ":", "\n", "        ", "return", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Reshape.__init__": [[256, 261], ["Operator.Operator.__init__"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Reshape.__init__"], ["    ", "def", "__init__", "(", "self", ",", "player", ":", "Player", ",", "input_nodes", ":", "List", "[", "Node", "]", ",", "\n", "original_shape", ":", "Tuple", "[", "int", ",", "...", "]", ",", "new_shape", ":", "Tuple", "[", "int", ",", "...", "]", ",", "name", ":", "str", "=", "None", ")", ":", "\n", "        ", "super", "(", "Reshape", ",", "self", ")", ".", "__init__", "(", "player", ",", "input_nodes", ",", "name", "or", "f\"Reshape: {original_shape} -> {new_shape}\"", ")", "\n", "self", ".", "original_shape", "=", "original_shape", "\n", "self", ".", "new_shape", "=", "new_shape", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Reshape.forward": [[262, 264], ["Operator.Reshape.set", "Operator.Reshape.player.reshape", "Operator.Reshape.input_nodes[].get"], "methods", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Node.set", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.reshape", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Operator.get"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "self", ".", "set", "(", "self", ".", "player", ".", "reshape", "(", "self", ".", "input_nodes", "[", "0", "]", ".", "get", "(", ")", ",", "self", ".", "new_shape", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Reshape.gradient": [[265, 267], ["Operator.Reshape"], "methods", ["None"], ["", "def", "gradient", "(", "self", ",", "output_grad", ":", "Node", ")", "->", "List", "[", "Operator", "]", ":", "\n", "        ", "return", "[", "Reshape", "(", "self", ".", "player", ",", "[", "output_grad", "]", ",", "self", ".", "new_shape", ",", "self", ".", "original_shape", ")", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.check_op_input": [[15, 23], ["op_func", "len", "Operator.OpException", "len"], "function", ["None"], ["", "", "def", "check_op_input", "(", "n_innodes", ":", "int", ")", ":", "\n", "    ", "def", "inner_func", "(", "op_func", ")", ":", "\n", "        ", "def", "wrapper", "(", "_self", ",", "_player", ",", "input_nodes", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "            ", "if", "len", "(", "input_nodes", ")", "!=", "n_innodes", ":", "\n", "                ", "raise", "OpException", "(", "f\"Operator-forward: number of input nodes must be {n_innodes} but is {len(input_nodes)}\"", ")", "\n", "", "return", "op_func", "(", "_self", ",", "_player", ",", "input_nodes", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "", "return", "wrapper", "\n", "", "return", "inner_func", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.test_operator.test_add_gradient": [[10, 21], ["Node", "Node", "Add", "Node", "Add.gradient", "gradients[].forward", "gradients[].forward", "player.new_tensor", "gradients[].get", "gradients[].get"], "function", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Reshape.gradient", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Reshape.forward", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Reshape.forward", "home.repos.pwc.inspect_result.zfscgy_Amber.Player.LocalPlayer.LocalPlayer.new_tensor", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Operator.get", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Operator.get"], ["def", "test_add_gradient", "(", ")", ":", "\n", "    ", "input_node_0", "=", "Node", "(", ")", "\n", "input_node_1", "=", "Node", "(", ")", "\n", "add_op", "=", "Add", "(", "player", ",", "[", "input_node_0", ",", "input_node_1", "]", ")", "\n", "grad_on_sum", "=", "Node", "(", "player", ".", "new_tensor", "(", "lambda", ":", "1", ")", ")", "\n", "gradients", "=", "add_op", ".", "gradient", "(", "grad_on_sum", ")", "\n", "gradients", "[", "0", "]", ".", "forward", "(", ")", "\n", "gradients", "[", "1", "]", ".", "forward", "(", ")", "\n", "\n", "assert", "gradients", "[", "0", "]", ".", "get", "(", ")", ".", "value", "==", "1", "\n", "assert", "gradients", "[", "1", "]", ".", "get", "(", ")", ".", "value", "==", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.test_operator.test_mul_gradient": [[23, 34], ["Node", "Node", "Mul", "Node", "Mul.gradient", "gradients[].forward", "gradients[].forward", "player.new_tensor", "player.new_tensor", "player.new_tensor", "gradients[].get", "gradients[].get"], "function", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Reshape.gradient", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Reshape.forward", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Reshape.forward", "home.repos.pwc.inspect_result.zfscgy_Amber.Player.LocalPlayer.LocalPlayer.new_tensor", "home.repos.pwc.inspect_result.zfscgy_Amber.Player.LocalPlayer.LocalPlayer.new_tensor", "home.repos.pwc.inspect_result.zfscgy_Amber.Player.LocalPlayer.LocalPlayer.new_tensor", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Operator.get", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Operator.get"], ["", "def", "test_mul_gradient", "(", ")", ":", "\n", "    ", "input_node_0", "=", "Node", "(", "player", ".", "new_tensor", "(", "lambda", ":", "1", ")", ")", "\n", "input_node_1", "=", "Node", "(", "player", ".", "new_tensor", "(", "lambda", ":", "2", ")", ")", "\n", "mul_op", "=", "Mul", "(", "player", ",", "[", "input_node_0", ",", "input_node_1", "]", ")", "\n", "grad_on_prod", "=", "Node", "(", "player", ".", "new_tensor", "(", "lambda", ":", "3", ")", ")", "\n", "gradients", "=", "mul_op", ".", "gradient", "(", "grad_on_prod", ")", "\n", "gradients", "[", "0", "]", ".", "forward", "(", ")", "\n", "gradients", "[", "1", "]", ".", "forward", "(", ")", "\n", "\n", "assert", "gradients", "[", "0", "]", ".", "get", "(", ")", ".", "value", "==", "6", "\n", "assert", "gradients", "[", "1", "]", ".", "get", "(", ")", ".", "value", "==", "3", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.test_operator.test_broadcast_gradient": [[36, 46], ["Node", "Node", "Broadcast", "Broadcast.forward", "np.allclose", "Node", "grad_x.forward", "player.new_tensor", "player.new_tensor", "np.ones", "player.new_tensor", "Broadcast.gradient", "Broadcast.get", "grad_x.get", "np.array", "np.zeros", "np.ones"], "function", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Reshape.forward", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Reshape.forward", "home.repos.pwc.inspect_result.zfscgy_Amber.Player.LocalPlayer.LocalPlayer.new_tensor", "home.repos.pwc.inspect_result.zfscgy_Amber.Player.LocalPlayer.LocalPlayer.new_tensor", "home.repos.pwc.inspect_result.zfscgy_Amber.Player.LocalPlayer.LocalPlayer.new_tensor", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Reshape.gradient", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Operator.get", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Operator.get", "home.repos.pwc.inspect_result.zfscgy_Amber.Backend.Backend.Backend.zeros"], ["", "def", "test_broadcast_gradient", "(", ")", ":", "\n", "    ", "x", "=", "Node", "(", "player", ".", "new_tensor", "(", "lambda", ":", "np", ".", "array", "(", "[", "1", "]", ")", ")", ")", "\n", "y", "=", "Node", "(", "player", ".", "new_tensor", "(", "lambda", ":", "np", ".", "zeros", "(", "[", "5", ",", "2", ",", "3", "]", ")", ")", ")", "\n", "xx", "=", "Broadcast", "(", "player", ",", "[", "x", "]", ",", "[", "0", "]", ",", "y", ",", "2", ")", "\n", "xx", ".", "forward", "(", ")", "\n", "assert", "np", ".", "allclose", "(", "xx", ".", "get", "(", ")", ".", "value", ",", "np", ".", "ones", "(", "[", "5", ",", "2", ",", "3", "]", ")", ")", "\n", "grad_on_xx", "=", "Node", "(", "player", ".", "new_tensor", "(", "lambda", ":", "np", ".", "ones", "(", "[", "5", ",", "2", ",", "3", "]", ")", ")", ")", "\n", "grad_x", "=", "xx", ".", "gradient", "(", "grad_on_xx", ")", "[", "0", "]", "\n", "grad_x", ".", "forward", "(", ")", "\n", "assert", "grad_x", ".", "get", "(", ")", ".", "value", "==", "30", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.test_operator.test_sum_gradient": [[48, 57], ["Node", "Sum", "Sum.forward", "np.allclose", "Node", "grad_x.forward", "np.allclose", "player.new_tensor", "np.array", "player.new_tensor", "Sum.gradient", "np.ones", "Sum.get", "grad_x.get", "np.array", "np.array"], "function", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Reshape.forward", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Reshape.forward", "home.repos.pwc.inspect_result.zfscgy_Amber.Player.LocalPlayer.LocalPlayer.new_tensor", "home.repos.pwc.inspect_result.zfscgy_Amber.Player.LocalPlayer.LocalPlayer.new_tensor", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Reshape.gradient", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Operator.get", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Operator.get"], ["", "def", "test_sum_gradient", "(", ")", ":", "\n", "    ", "x", "=", "Node", "(", "player", ".", "new_tensor", "(", "lambda", ":", "np", ".", "array", "(", "[", "[", "1", ",", "2", ",", "3", "]", ",", "[", "4", ",", "5", ",", "6", "]", "]", ")", ")", ")", "\n", "sum_x", "=", "Sum", "(", "player", ",", "[", "x", "]", ",", "[", "0", ",", "-", "1", "]", ",", "2", ")", "\n", "sum_x", ".", "forward", "(", ")", "\n", "assert", "np", ".", "allclose", "(", "sum_x", ".", "get", "(", ")", ".", "value", ",", "np", ".", "array", "(", "21", ")", ")", "\n", "grad_on_sum", "=", "Node", "(", "player", ".", "new_tensor", "(", "lambda", ":", "np", ".", "array", "(", "1", ")", ")", ")", "\n", "grad_x", "=", "sum_x", ".", "gradient", "(", "grad_on_sum", ")", "[", "0", "]", "\n", "grad_x", ".", "forward", "(", ")", "\n", "assert", "np", ".", "allclose", "(", "grad_x", ".", "get", "(", ")", ".", "value", ",", "np", ".", "ones", "(", "[", "2", ",", "3", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.test_operator.test_composed_gradient": [[59, 74], ["Node", "Node", "Add", "Mul", "ComposedOperator", "ComposedOperator.forward", "Node", "ComposedOperator.gradient", "gradient_x.forward", "gradient_y.forward", "player.new_tensor", "player.new_tensor", "player.new_tensor", "ComposedOperator.get", "gradient_x.get", "gradient_y.get"], "function", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Reshape.forward", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Reshape.gradient", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Reshape.forward", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Reshape.forward", "home.repos.pwc.inspect_result.zfscgy_Amber.Player.LocalPlayer.LocalPlayer.new_tensor", "home.repos.pwc.inspect_result.zfscgy_Amber.Player.LocalPlayer.LocalPlayer.new_tensor", "home.repos.pwc.inspect_result.zfscgy_Amber.Player.LocalPlayer.LocalPlayer.new_tensor", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Operator.get", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Operator.get", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Operator.get"], ["", "def", "test_composed_gradient", "(", ")", ":", "\n", "    ", "x", "=", "Node", "(", "player", ".", "new_tensor", "(", "lambda", ":", "2", ")", ")", "\n", "y", "=", "Node", "(", "player", ".", "new_tensor", "(", "lambda", ":", "3", ")", ")", "\n", "x_plus_y", "=", "Add", "(", "player", ",", "[", "x", ",", "y", "]", ")", "\n", "x_mul__x_plus_y", "=", "Mul", "(", "player", ",", "[", "x_plus_y", ",", "x", "]", ")", "\n", "composed_op", "=", "ComposedOperator", "(", "player", ",", "[", "x", ",", "y", "]", ",", "[", "x_plus_y", ",", "x_mul__x_plus_y", "]", ")", "\n", "composed_op", ".", "forward", "(", ")", "\n", "assert", "composed_op", ".", "get", "(", ")", ".", "value", "==", "10", "\n", "\n", "grads_on_output", "=", "Node", "(", "player", ".", "new_tensor", "(", "lambda", ":", "1", ")", ")", "\n", "gradient_x", ",", "gradient_y", "=", "composed_op", ".", "gradient", "(", "grads_on_output", ")", "\n", "gradient_x", ".", "forward", "(", ")", "\n", "gradient_y", ".", "forward", "(", ")", "\n", "assert", "gradient_x", ".", "get", "(", ")", ".", "value", "==", "7", "\n", "assert", "gradient_y", ".", "get", "(", ")", ".", "value", "==", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.test_operator.test_matmul_gradient": [[76, 90], ["Node", "Node", "Matmul", "Matmul.forward", "Node", "Matmul.gradient", "grad_x.forward", "grad_y.forward", "np.allclose", "np.allclose", "player.new_tensor", "player.new_tensor", "player.new_tensor", "np.array", "np.array", "grad_x.get", "grad_y.get", "np.array", "np.array", "Matmul.get", "np.array"], "function", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Reshape.forward", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Reshape.gradient", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Reshape.forward", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Reshape.forward", "home.repos.pwc.inspect_result.zfscgy_Amber.Player.LocalPlayer.LocalPlayer.new_tensor", "home.repos.pwc.inspect_result.zfscgy_Amber.Player.LocalPlayer.LocalPlayer.new_tensor", "home.repos.pwc.inspect_result.zfscgy_Amber.Player.LocalPlayer.LocalPlayer.new_tensor", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Operator.get", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Operator.get", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Operator.get"], ["", "def", "test_matmul_gradient", "(", ")", ":", "\n", "    ", "x", "=", "Node", "(", "player", ".", "new_tensor", "(", "lambda", ":", "np", ".", "array", "(", "[", "[", "1", ",", "2", ",", "3", ",", "4", "]", "]", ")", ")", ")", "\n", "y", "=", "Node", "(", "player", ".", "new_tensor", "(", "lambda", ":", "np", ".", "array", "(", "[", "[", "4", "]", ",", "[", "3", "]", ",", "[", "2", "]", ",", "[", "1", "]", "]", ")", ")", ")", "\n", "x_matmul_y", "=", "Matmul", "(", "player", ",", "[", "x", ",", "y", "]", ")", "\n", "x_matmul_y", ".", "forward", "(", ")", "\n", "assert", "x_matmul_y", ".", "get", "(", ")", ".", "value", "[", "0", ",", "0", "]", "==", "20", "\n", "\n", "grads_on_output", "=", "Node", "(", "player", ".", "new_tensor", "(", "lambda", ":", "np", ".", "array", "(", "[", "[", "1", "]", "]", ")", ")", ")", "\n", "grad_x", ",", "grad_y", "=", "x_matmul_y", ".", "gradient", "(", "grads_on_output", ")", "\n", "grad_x", ".", "forward", "(", ")", "\n", "grad_y", ".", "forward", "(", ")", "\n", "\n", "assert", "np", ".", "allclose", "(", "grad_x", ".", "get", "(", ")", ".", "value", ",", "np", ".", "array", "(", "[", "[", "4", ",", "3", ",", "2", ",", "1", "]", "]", ")", ")", "\n", "assert", "np", ".", "allclose", "(", "grad_y", ".", "get", "(", ")", ".", "value", ",", "np", ".", "array", "(", "[", "[", "1", "]", ",", "[", "2", "]", ",", "[", "3", "]", ",", "[", "4", "]", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.test_operator.test_sigmoid_gradient": [[92, 101], ["Node", "Sigmoid", "Sigmoid.forward", "sigmoid_grad.forward", "player.new_tensor", "Sigmoid.gradient", "np.exp", "Sigmoid.get", "Node", "sigmoid_grad.get", "player.new_tensor"], "function", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Reshape.forward", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Reshape.forward", "home.repos.pwc.inspect_result.zfscgy_Amber.Player.LocalPlayer.LocalPlayer.new_tensor", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Reshape.gradient", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Operator.get", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Operator.get", "home.repos.pwc.inspect_result.zfscgy_Amber.Player.LocalPlayer.LocalPlayer.new_tensor"], ["", "def", "test_sigmoid_gradient", "(", ")", ":", "\n", "    ", "x", "=", "Node", "(", "player", ".", "new_tensor", "(", "lambda", ":", "1", ")", ")", "\n", "sigmoid", "=", "Sigmoid", "(", "player", ",", "[", "x", "]", ")", "\n", "sigmoid", ".", "forward", "(", ")", "\n", "actual_sigmoid", "=", "1", "/", "(", "1", "+", "np", ".", "exp", "(", "-", "1", ")", ")", "\n", "assert", "sigmoid", ".", "get", "(", ")", ".", "value", "==", "actual_sigmoid", "\n", "sigmoid_grad", "=", "sigmoid", ".", "gradient", "(", "Node", "(", "player", ".", "new_tensor", "(", "lambda", ":", "1", ")", ")", ")", "[", "0", "]", "\n", "sigmoid_grad", ".", "forward", "(", ")", "\n", "assert", "sigmoid_grad", ".", "get", "(", ")", ".", "value", "==", "actual_sigmoid", "*", "(", "1", "-", "actual_sigmoid", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.test_operator.test_tanh_gradient": [[103, 111], ["Node", "Tanh", "Tanh.forward", "np.allclose", "tanh_grad.forward", "np.allclose", "player.new_tensor", "np.tanh", "Tanh.gradient", "Tanh.get", "Node", "tanh_grad.get", "player.new_tensor", "np.tanh"], "function", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Reshape.forward", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Reshape.forward", "home.repos.pwc.inspect_result.zfscgy_Amber.Player.LocalPlayer.LocalPlayer.new_tensor", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.tanh", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Reshape.gradient", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Operator.get", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Operator.get", "home.repos.pwc.inspect_result.zfscgy_Amber.Player.LocalPlayer.LocalPlayer.new_tensor", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.tanh"], ["", "def", "test_tanh_gradient", "(", ")", ":", "\n", "    ", "x", "=", "Node", "(", "player", ".", "new_tensor", "(", "lambda", ":", "2", ")", ")", "\n", "tanh", "=", "Tanh", "(", "player", ",", "[", "x", "]", ")", "\n", "tanh", ".", "forward", "(", ")", "\n", "assert", "np", ".", "allclose", "(", "tanh", ".", "get", "(", ")", ".", "value", ",", "np", ".", "tanh", "(", "2", ")", ")", "\n", "tanh_grad", "=", "tanh", ".", "gradient", "(", "Node", "(", "player", ".", "new_tensor", "(", "lambda", ":", "1", ")", ")", ")", "[", "0", "]", "\n", "tanh_grad", ".", "forward", "(", ")", "\n", "assert", "np", ".", "allclose", "(", "tanh_grad", ".", "get", "(", ")", ".", "value", ",", "1", "-", "np", ".", "tanh", "(", "2", ")", "**", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.test_operator.test_mse_gradient": [[113, 126], ["np.array", "np.array", "Node", "Node", "MSEError", "MSEError.forward", "np.allclose", "mse_grad0_op.forward", "np.allclose", "player.new_tensor", "player.new_tensor", "np.mean", "MSEError.gradient", "MSEError.get", "np.square", "Node", "mse_grad0_op.get", "player.new_tensor"], "function", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Reshape.forward", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Reshape.forward", "home.repos.pwc.inspect_result.zfscgy_Amber.Player.LocalPlayer.LocalPlayer.new_tensor", "home.repos.pwc.inspect_result.zfscgy_Amber.Player.LocalPlayer.LocalPlayer.new_tensor", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.mean", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Reshape.gradient", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Operator.get", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.square", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Operator.get", "home.repos.pwc.inspect_result.zfscgy_Amber.Player.LocalPlayer.LocalPlayer.new_tensor"], ["", "def", "test_mse_gradient", "(", ")", ":", "\n", "    ", "x", "=", "np", ".", "array", "(", "[", "1", ",", "2", ",", "3", ",", "4", "]", ")", "\n", "y", "=", "np", ".", "array", "(", "[", "4", ",", "3", ",", "2", ",", "1", "]", ")", "\n", "node_x", "=", "Node", "(", "player", ".", "new_tensor", "(", "lambda", ":", "x", ")", ")", "\n", "node_y", "=", "Node", "(", "player", ".", "new_tensor", "(", "lambda", ":", "y", ")", ")", "\n", "mse_op", "=", "MSEError", "(", "player", ",", "[", "node_x", ",", "node_y", "]", ",", "1", ")", "\n", "mse_op", ".", "forward", "(", ")", "\n", "assert", "np", ".", "allclose", "(", "mse_op", ".", "get", "(", ")", ".", "value", ",", "np", ".", "mean", "(", "np", ".", "square", "(", "x", "-", "y", ")", ")", ")", "\n", "\n", "mse_grad0_op", "=", "mse_op", ".", "gradient", "(", "Node", "(", "player", ".", "new_tensor", "(", "lambda", ":", "0.1", ")", ")", ")", "[", "0", "]", "\n", "mse_grad0_op", ".", "forward", "(", ")", "\n", "\n", "assert", "np", ".", "allclose", "(", "mse_grad0_op", ".", "get", "(", ")", ".", "value", ",", "0.25", "*", "2", "*", "(", "x", "-", "y", ")", "*", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.test_operator_with_ASPlayer.test_mean": [[21, 43], ["np.random.normal", "np.random.normal", "np.mean", "Amber.Core.Utils.parallel", "player.new_tensor", "player.new_tensor", "player.matmul", "Node", "Mean", "Mean.forward", "Amber.Tools.TestUtils.array_close", "Amber.Tools.TestUtils.array_close", "player.decode", "player.reveal", "np.max", "player.reveal", "Mean.get", "np.abs", "Mean.get"], "function", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.mean", "home.repos.pwc.inspect_result.zfscgy_Amber.Core.Utils.parallel", "home.repos.pwc.inspect_result.zfscgy_Amber.Player.LocalPlayer.LocalPlayer.new_tensor", "home.repos.pwc.inspect_result.zfscgy_Amber.Player.LocalPlayer.LocalPlayer.new_tensor", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.matmul", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Reshape.forward", "home.repos.pwc.inspect_result.zfscgy_Amber.Tools.TestUtils.array_close", "home.repos.pwc.inspect_result.zfscgy_Amber.Tools.TestUtils.array_close", "home.repos.pwc.inspect_result.zfscgy_Amber.Player.ASPlayer.ASPlayer.decode", "home.repos.pwc.inspect_result.zfscgy_Amber.Player.ASPlayer.ASPlayer.reveal", "home.repos.pwc.inspect_result.zfscgy_Amber.Player.ASPlayer.ASPlayer.reveal", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Operator.get", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Operator.get"], ["def", "test_mean", "(", ")", ":", "\n", "    ", "x", "=", "np", ".", "random", ".", "normal", "(", "0", ",", "1", ",", "[", "100", ",", "100", "]", ")", "\n", "y", "=", "np", ".", "random", ".", "normal", "(", "0", ",", "1", ",", "[", "100", ",", "100", "]", ")", "\n", "\n", "def", "mean", "(", "player", ":", "ASPlayer", ")", ":", "\n", "        ", "tensor_x", "=", "player", ".", "new_tensor", "(", "lambda", ":", "x", ")", "\n", "tensor_y", "=", "player", ".", "new_tensor", "(", "lambda", ":", "y", ")", "\n", "tensor_xy", "=", "player", ".", "matmul", "(", "tensor_x", ",", "tensor_y", ")", "\n", "node_x", "=", "Node", "(", "tensor_xy", ")", "\n", "mean_op", "=", "Mean", "(", "player", ",", "[", "node_x", "]", ",", "[", "]", ",", "n_heading_axes", "=", "2", ")", "\n", "mean_op", ".", "forward", "(", ")", "\n", "if", "player", "in", "[", "player0", ",", "player1", "]", ":", "\n", "            ", "return", "player", ".", "decode", "(", "player", ".", "reveal", "(", "mean_op", ".", "get", "(", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "player", ".", "reveal", "(", "mean_op", ".", "get", "(", ")", ")", "\n", "\n", "", "", "expected_mean", "=", "np", ".", "mean", "(", "x", "@", "y", ")", "\n", "\n", "outs", ",", "errs", "=", "parallel", "(", "mean", ",", "[", "(", "player0", ",", ")", ",", "(", "player1", ",", ")", ",", "(", "third_party", ",", ")", "]", ")", "\n", "assert", "errs", "[", "0", "]", "is", "None", "and", "errs", "[", "1", "]", "is", "None", "and", "errs", "[", "2", "]", "is", "None", "\n", "assert", "array_close", "(", "outs", "[", "0", "]", ",", "expected_mean", ")", "and", "array_close", "(", "outs", "[", "1", "]", ",", "expected_mean", ")", "and", "outs", "[", "2", "]", "is", "None", ",", "f\"Test mean failed, max err {np.max(np.abs(outs[0] - expected_mean))}\"", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.test_operator_with_ASPlayer.test_square": [[45, 68], ["np.random.normal", "np.random.normal", "np.square", "Amber.Core.Utils.parallel", "player.new_tensor", "player.new_tensor", "player.mul", "Node", "Square", "Square.forward", "Amber.Tools.TestUtils.array_close", "Amber.Tools.TestUtils.array_close", "player.decode", "player.reveal", "np.max", "player.reveal", "Square.get", "np.abs", "Square.get"], "function", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.square", "home.repos.pwc.inspect_result.zfscgy_Amber.Core.Utils.parallel", "home.repos.pwc.inspect_result.zfscgy_Amber.Player.LocalPlayer.LocalPlayer.new_tensor", "home.repos.pwc.inspect_result.zfscgy_Amber.Player.LocalPlayer.LocalPlayer.new_tensor", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.mul", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Reshape.forward", "home.repos.pwc.inspect_result.zfscgy_Amber.Tools.TestUtils.array_close", "home.repos.pwc.inspect_result.zfscgy_Amber.Tools.TestUtils.array_close", "home.repos.pwc.inspect_result.zfscgy_Amber.Player.ASPlayer.ASPlayer.decode", "home.repos.pwc.inspect_result.zfscgy_Amber.Player.ASPlayer.ASPlayer.reveal", "home.repos.pwc.inspect_result.zfscgy_Amber.Player.ASPlayer.ASPlayer.reveal", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Operator.get", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Operator.get"], ["", "def", "test_square", "(", ")", ":", "\n", "    ", "x", "=", "np", ".", "random", ".", "normal", "(", "0", ",", "1", ",", "[", "100", "]", ")", "\n", "y", "=", "np", ".", "random", ".", "normal", "(", "0", ",", "1", ",", "[", "100", "]", ")", "\n", "\n", "def", "square", "(", "player", ":", "ASPlayer", ")", ":", "\n", "        ", "tensor_x", "=", "player", ".", "new_tensor", "(", "lambda", ":", "x", ")", "\n", "tensor_y", "=", "player", ".", "new_tensor", "(", "lambda", ":", "y", ")", "\n", "tensor_xy", "=", "player", ".", "mul", "(", "tensor_x", ",", "tensor_y", ")", "\n", "node_x", "=", "Node", "(", "tensor_xy", ")", "\n", "square_op", "=", "Square", "(", "player", ",", "[", "node_x", "]", ",", "[", "]", ",", "n_heading_axes", "=", "2", ")", "\n", "square_op", ".", "forward", "(", ")", "\n", "if", "player", "in", "[", "player0", ",", "player1", "]", ":", "\n", "            ", "return", "player", ".", "decode", "(", "player", ".", "reveal", "(", "square_op", ".", "get", "(", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "player", ".", "reveal", "(", "square_op", ".", "get", "(", ")", ")", "\n", "\n", "", "", "expected_square", "=", "np", ".", "square", "(", "x", "*", "y", ")", "\n", "\n", "outs", ",", "errs", "=", "parallel", "(", "square", ",", "[", "(", "player0", ",", ")", ",", "(", "player1", ",", ")", ",", "(", "third_party", ",", ")", "]", ")", "\n", "\n", "assert", "errs", "[", "0", "]", "is", "None", "and", "errs", "[", "1", "]", "is", "None", "and", "errs", "[", "2", "]", "is", "None", "\n", "assert", "array_close", "(", "outs", "[", "0", "]", ",", "expected_square", ")", "and", "array_close", "(", "outs", "[", "1", "]", ",", "expected_square", ")", "and", "outs", "[", "2", "]", "is", "None", ",", "f\"Test mean failed, max err {np.max(np.abs(outs[0] - expected_square))}\"", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.NN.test_operator_with_ASPlayer.test_mse": [[70, 104], ["np.random.normal", "np.random.normal", "np.mean", "Amber.Core.Utils.parallel", "player.new_tensor", "player.new_tensor", "player.mul", "Node", "Node", "Amber.NN.MSEError", "Amber.NN.MSEError.forward", "mse_grad_op0.forward", "np.square", "Amber.Tools.TestUtils.array_close", "Amber.Tools.TestUtils.array_close", "Amber.Tools.TestUtils.array_close", "Amber.Tools.TestUtils.array_close", "Amber.NN.MSEError.gradient", "np.max", "np.max", "Node", "player.decode", "player.decode", "player.reveal", "player.reveal", "np.abs", "np.abs", "player.new_tensor", "player.reveal", "player.reveal", "Amber.NN.MSEError.get", "mse_grad_op0.get", "Amber.NN.MSEError.get", "mse_grad_op0.get"], "function", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.mean", "home.repos.pwc.inspect_result.zfscgy_Amber.Core.Utils.parallel", "home.repos.pwc.inspect_result.zfscgy_Amber.Player.LocalPlayer.LocalPlayer.new_tensor", "home.repos.pwc.inspect_result.zfscgy_Amber.Player.LocalPlayer.LocalPlayer.new_tensor", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.mul", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Reshape.forward", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Reshape.forward", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.square", "home.repos.pwc.inspect_result.zfscgy_Amber.Tools.TestUtils.array_close", "home.repos.pwc.inspect_result.zfscgy_Amber.Tools.TestUtils.array_close", "home.repos.pwc.inspect_result.zfscgy_Amber.Tools.TestUtils.array_close", "home.repos.pwc.inspect_result.zfscgy_Amber.Tools.TestUtils.array_close", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Reshape.gradient", "home.repos.pwc.inspect_result.zfscgy_Amber.Player.ASPlayer.ASPlayer.decode", "home.repos.pwc.inspect_result.zfscgy_Amber.Player.ASPlayer.ASPlayer.decode", "home.repos.pwc.inspect_result.zfscgy_Amber.Player.ASPlayer.ASPlayer.reveal", "home.repos.pwc.inspect_result.zfscgy_Amber.Player.ASPlayer.ASPlayer.reveal", "home.repos.pwc.inspect_result.zfscgy_Amber.Player.LocalPlayer.LocalPlayer.new_tensor", "home.repos.pwc.inspect_result.zfscgy_Amber.Player.ASPlayer.ASPlayer.reveal", "home.repos.pwc.inspect_result.zfscgy_Amber.Player.ASPlayer.ASPlayer.reveal", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Operator.get", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Operator.get", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Operator.get", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Operator.Operator.get"], ["", "def", "test_mse", "(", ")", ":", "\n", "    ", "x", "=", "np", ".", "random", ".", "normal", "(", "0", ",", "10", ",", "[", "100", "]", ")", "\n", "y", "=", "np", ".", "random", ".", "normal", "(", "0", ",", "10", ",", "[", "100", "]", ")", "\n", "\n", "def", "mse", "(", "player", ":", "ASPlayer", ")", ":", "\n", "        ", "tensor_x", "=", "player", ".", "new_tensor", "(", "lambda", ":", "x", ",", "owner", "=", "\"player0\"", ")", "\n", "tensor_y", "=", "player", ".", "new_tensor", "(", "lambda", ":", "y", ",", "owner", "=", "\"player1\"", ")", "\n", "tensor_xy", "=", "player", ".", "mul", "(", "tensor_x", ",", "tensor_y", ")", "\n", "node_x", "=", "Node", "(", "tensor_x", ")", "\n", "node_xy", "=", "Node", "(", "tensor_xy", ")", "\n", "mse_op", "=", "MSEError", "(", "player", ",", "[", "node_x", ",", "node_xy", "]", ",", "1", ")", "\n", "mse_op", ".", "forward", "(", ")", "\n", "mse_grad_op0", "=", "mse_op", ".", "gradient", "(", "Node", "(", "player", ".", "new_tensor", "(", "lambda", ":", "0.1", ",", "owner", "=", "\"player0\"", ")", ")", ")", "[", "0", "]", "\n", "mse_grad_op0", ".", "forward", "(", ")", "\n", "\n", "if", "player", "in", "[", "player0", ",", "player1", "]", ":", "\n", "            ", "return", "player", ".", "decode", "(", "player", ".", "reveal", "(", "mse_op", ".", "get", "(", ")", ")", ")", ",", "player", ".", "decode", "(", "player", ".", "reveal", "(", "mse_grad_op0", ".", "get", "(", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "player", ".", "reveal", "(", "mse_op", ".", "get", "(", ")", ")", ",", "player", ".", "reveal", "(", "mse_grad_op0", ".", "get", "(", ")", ")", "\n", "\n", "", "", "expected_mse", "=", "np", ".", "mean", "(", "np", ".", "square", "(", "x", "-", "x", "*", "y", ")", ")", "\n", "expected_mse_grad0", "=", "1", "/", "100", "*", "2", "*", "(", "x", "-", "x", "*", "y", ")", "*", "0.1", "\n", "\n", "outs", ",", "errs", "=", "parallel", "(", "mse", ",", "[", "(", "player0", ",", ")", ",", "(", "player1", ",", ")", ",", "(", "third_party", ",", ")", "]", ")", "\n", "\n", "assert", "errs", "[", "0", "]", "is", "None", "and", "errs", "[", "1", "]", "is", "None", "and", "errs", "[", "2", "]", "is", "None", "\n", "\n", "assert", "array_close", "(", "outs", "[", "0", "]", "[", "0", "]", ",", "expected_mse", ")", "and", "array_close", "(", "outs", "[", "1", "]", "[", "0", "]", ",", "expected_mse", ")", "and", "outs", "[", "2", "]", "[", "0", "]", "is", "None", ",", "f\"Test mse failed, max err {np.max(np.abs(outs[0][0] - expected_mse))}\"", "\n", "\n", "assert", "array_close", "(", "outs", "[", "0", "]", "[", "1", "]", ",", "expected_mse_grad0", ")", "and", "array_close", "(", "outs", "[", "1", "]", "[", "1", "]", ",", "expected_mse_grad0", ")", "and", "outs", "[", "2", "]", "[", "1", "]", "is", "None", ",", "f\"Test mse failed, max err {np.max(np.abs(outs[0][0] - expected_mse_grad0))}\"", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Data.DataReader.get_cifar_train_test": [[9, 18], ["range", "numpy.vstack", "pickle.load", "np.vstack.append", "cifar_folder.joinpath"], "function", ["None"], ["def", "get_cifar_train_test", "(", ")", ":", "\n", "    ", "train_xs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "6", ")", ":", "\n", "        ", "train_data_dict", "=", "pickle", ".", "load", "(", "cifar_folder", ".", "joinpath", "(", "f'data_batch_{i}'", ")", ")", "\n", "train_xs", ".", "append", "(", "train_data_dict", "[", "'data'", "]", ")", "\n", "\n", "", "train_xs", "=", "np", ".", "vstack", "(", "train_xs", ")", "# [50000, 3072]", "\n", "\n", "test_xs", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Data.DataReader.get_gisette_train_test": [[23, 33], ["numpy.loadtxt", "numpy.loadtxt", "numpy.loadtxt", "numpy.loadtxt", "gisette_folder.joinpath", "gisette_folder.joinpath", "gisette_folder.joinpath", "gisette_folder.joinpath"], "function", ["None"], ["def", "get_gisette_train_test", "(", ")", ":", "\n", "    ", "train_xs", "=", "np", ".", "loadtxt", "(", "gisette_folder", ".", "joinpath", "(", "\"gisette_train.data\"", ")", ")", "\n", "train_ys", "=", "np", ".", "loadtxt", "(", "gisette_folder", ".", "joinpath", "(", "\"gisette_train.labels\"", ")", ")", "\n", "test_xs", "=", "np", ".", "loadtxt", "(", "gisette_folder", ".", "joinpath", "(", "\"gisette_valid.data\"", ")", ")", "\n", "test_ys", "=", "np", ".", "loadtxt", "(", "gisette_folder", ".", "joinpath", "(", "\"gisette_valid.labels\"", ")", ")", "\n", "\n", "train_xs", "=", "train_xs", "/", "500", "-", "1", "\n", "test_xs", "=", "test_xs", "/", "500", "-", "1", "\n", "\n", "return", "train_xs", ",", "train_ys", ",", "test_xs", ",", "test_ys", "\n", "", ""]], "home.repos.pwc.inspect_result.zfscgy_Amber.LocalExample.simple_dnn_784_128_10.network": [[29, 34], ["opf.relu", "opf.relu", "opf.sigmoid", "dense1", "dense2", "dense3"], "function", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.relu", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.relu", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.sigmoid"], ["def", "network", "(", "x", ")", ":", "\n", "    ", "x1", "=", "opf", ".", "relu", "(", "dense1", "(", "x", ")", ",", "1", "/", "6", ")", "\n", "x2", "=", "opf", ".", "relu", "(", "dense2", "(", "x1", ")", ",", "1", "/", "6", ")", "\n", "x3", "=", "opf", ".", "sigmoid", "(", "dense3", "(", "x2", ")", ")", "\n", "return", "x3", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.LocalExample.simple_dnn_784_128_32_10.network": [[29, 34], ["opf.relu", "opf.relu", "opf.sigmoid", "dense1", "dense2", "dense3"], "function", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.relu", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.relu", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.sigmoid"], ["def", "network", "(", "x", ")", ":", "\n", "    ", "x1", "=", "opf", ".", "relu", "(", "dense1", "(", "x", ")", ",", "1", "/", "6", ")", "\n", "x2", "=", "opf", ".", "relu", "(", "dense2", "(", "x1", ")", ",", "1", "/", "6", ")", "\n", "x3", "=", "opf", ".", "sigmoid", "(", "dense3", "(", "x2", ")", ")", "\n", "return", "x3", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.LocalExample.lr_5000_1.logistic_regression": [[25, 27], ["opf.tanh", "dense_layer"], "function", ["home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.tanh"], ["def", "logistic_regression", "(", "xs", ":", "Node", ")", ":", "\n", "    ", "return", "opf", ".", "tanh", "(", "dense_layer", "(", "xs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.FedLR5000_1.run_lr.run_lr": [[16, 66], ["Amber.Core.Player.RTASPlayer", "time.sleep", "Amber.Core.Player.RTASPlayer.init_play", "OpFactory", "OpFactory.use_as_default", "pandas.DataFrame", "Examples.Data.DataReader.get_gisette_train_test", "Amber.Tools.NPDataLoader", "DenseLayer", "time.time", "range", "np.hstack", "OpFactory.tanh", "Amber.Tools.NPDataLoader.get_batch", "run_lr.run_lr.logistic_regression"], "function", ["home.repos.pwc.inspect_result.zfscgy_Amber.Player.RTASPlayer.RTASPlayer.init_play", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.use_as_default", "home.repos.pwc.inspect_result.zfscgy_Amber.Data.DataReader.get_gisette_train_test", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.tanh", "home.repos.pwc.inspect_result.zfscgy_Amber.Tools.DataLoader.NPDataLoader.get_batch", "home.repos.pwc.inspect_result.zfscgy_Amber.LocalExample.lr_5000_1.logistic_regression"], ["def", "run_lr", "(", "rolename", ":", "str", ")", ":", "\n", "    ", "player", "=", "RTASPlayer", "(", "rolename", ",", "addr_dict", ")", "\n", "time", ".", "sleep", "(", "5", ")", "\n", "player", ".", "init_play", "(", ")", "\n", "opf", "=", "OpFactory", "(", "player", ")", "\n", "opf", ".", "use_as_default", "(", ")", "\n", "\n", "record_df", "=", "pd", ".", "DataFrame", "(", "columns", "=", "[", "'n_batches'", ",", "'time'", ",", "'acc'", "]", ")", "\n", "\n", "train_xs", ",", "train_ys", ",", "test_xs", ",", "test_ys", "=", "get_gisette_train_test", "(", ")", "\n", "train_ys", "=", "train_ys", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "\n", "test_xs", "=", "test_xs", "[", ":", "5000", "]", "\n", "test_ys", "=", "test_ys", "[", ":", "5000", ",", "np", ".", "newaxis", "]", "\n", "train_loader", "=", "NPDataLoader", "(", "np", ".", "hstack", "(", "[", "train_xs", ",", "train_ys", "]", ")", ")", "\n", "\n", "\n", "dense_layer", "=", "DenseLayer", "(", "5000", ",", "1", ")", "\n", "\n", "\n", "def", "logistic_regression", "(", "xs", ":", "Node", ")", ":", "\n", "        ", "return", "opf", ".", "tanh", "(", "dense_layer", "(", "xs", ")", ")", "\n", "\n", "\n", "", "player", ".", "triple_buffer_size", "=", "16", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "for", "i", "in", "range", "(", "10000", ")", ":", "\n", "        ", "if", "i", "%", "100", "==", "0", ":", "\n", "            ", "player", ".", "disable_triple_buffer", "=", "True", "\n", "pred_test_ys", "=", "player", ".", "reveal", "(", "logistic_regression", "(", "opf", ".", "new_node", "(", "test_xs", ")", ")", ".", "get", "(", ")", ")", ".", "value", "\n", "acc", "=", "np", ".", "mean", "(", "(", "pred_test_ys", ">", "0", ")", ".", "astype", "(", "np", ".", "float", ")", "*", "2", "-", "1", "==", "test_ys", ")", "\n", "print", "(", "f\"Round {i}, acc {acc:.3f}\"", ")", "\n", "if", "rolename", "==", "\"player0\"", ":", "\n", "                ", "record_df", "=", "record_df", ".", "append", "(", "{", "\"n_batches\"", ":", "i", ",", "\"time\"", ":", "time", ".", "time", "(", ")", "-", "start_time", ",", "\"acc\"", ":", "acc", "}", ",", "ignore_index", "=", "True", ")", "\n", "\n", "", "player", ".", "disable_triple_buffer", "=", "False", "\n", "\n", "", "train_batch", "=", "train_loader", ".", "get_batch", "(", "64", ")", "\n", "train_xs", "=", "train_batch", "[", ":", ",", ":", "-", "1", "]", "\n", "train_ys", "=", "train_batch", "[", ":", ",", "-", "1", ":", "]", "\n", "pred_ys", "=", "logistic_regression", "(", "opf", ".", "new_node", "(", "train_xs", ")", ")", "\n", "loss", "=", "opf", ".", "mean_square_error", "(", "opf", ".", "new_node", "(", "train_ys", ")", ",", "pred_ys", ",", "dim", "=", "2", ")", "\n", "# print(loss.get().value)", "\n", "grads", "=", "opf", ".", "gradient_on", "(", "loss", ",", "dense_layer", ".", "parameters", "(", ")", ",", "0.002", ")", "\n", "for", "para", ",", "grad", "in", "zip", "(", "dense_layer", ".", "parameters", "(", ")", ",", "grads", ")", ":", "\n", "            ", "para", ".", "set", "(", "(", "para", "-", "grad", ")", ".", "get", "(", ")", ")", "\n", "", "opf", ".", "clear_graph", "(", ")", "\n", "\n", "", "if", "rolename", "==", "\"player0\"", ":", "\n", "        ", "record_df", ".", "to_csv", "(", "\"record_lr_gisette_fed_5000_1.csv\"", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zfscgy_Amber.FedDNN784_128_32_10.run_dnn.run_player": [[17, 102], ["pandas.DataFrame", "Amber.Core.Player.RTASPlayer", "time.sleep", "Amber.Core.Player.RTASPlayer.init_play", "time.sleep", "OpFactory", "OpFactory.use_as_default", "pandas.read_csv().values.astype", "print", "Amber.Tools.NPDataLoader", "DenseLayer", "DenseLayer", "DenseLayer", "time.time", "range", "OpFactory.relu", "OpFactory.relu", "OpFactory.sigmoid", "Amber.Tools.NPDataLoader.get_batch", "OpFactory.new_node", "OpFactory.new_node", "run_dnn.run_player.network"], "function", ["home.repos.pwc.inspect_result.zfscgy_Amber.Player.RTASPlayer.RTASPlayer.init_play", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.use_as_default", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.relu", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.relu", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.sigmoid", "home.repos.pwc.inspect_result.zfscgy_Amber.Tools.DataLoader.NPDataLoader.get_batch", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.new_node", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.new_node", "home.repos.pwc.inspect_result.zfscgy_Amber.LocalExample.simple_dnn_784_128_32_10.network"], ["def", "run_player", "(", "rolename", ":", "str", ")", ":", "\n", "    ", "record_df", "=", "pd", ".", "DataFrame", "(", "columns", "=", "[", "'n_batches'", ",", "'time'", ",", "'acc'", "]", ")", "\n", "player", "=", "RTASPlayer", "(", "rolename", ",", "addr_dict", ")", "\n", "time", ".", "sleep", "(", "5", ")", "\n", "player", ".", "init_play", "(", ")", "\n", "time", ".", "sleep", "(", "3", ")", "\n", "opf", "=", "OpFactory", "(", "player", ")", "\n", "opf", ".", "use_as_default", "(", ")", "\n", "\n", "\"\"\"\n    MNIST Example\n    \"\"\"", "\n", "mnist_data", "=", "pd", ".", "read_csv", "(", "\"../../Data/Datasets/mnist.csv\"", ",", "header", "=", "None", ")", ".", "values", ".", "astype", "(", "np", ".", "float", ")", "\n", "print", "(", "f\"{rolename}: data read finished\"", ")", "\n", "mnist_data", "[", ":", ",", ":", "784", "]", "=", "mnist_data", "[", ":", ",", ":", "784", "]", "/", "10", "-", "0.5", "\n", "data_loader", "=", "NPDataLoader", "(", "mnist_data", "[", ":", "50000", ",", ":", "]", ")", "\n", "test_xs", "=", "mnist_data", "[", "50000", ":", "55000", ",", ":", "784", "]", "\n", "test_ys", "=", "mnist_data", "[", "50000", ":", "55000", ",", "784", ":", "]", "\n", "\n", "count_start_time", "=", "0", "\n", "\n", "def", "test_speed_start", "(", ")", ":", "\n", "        ", "nonlocal", "count_start_time", "\n", "if", "player", ".", "role", "==", "\"player0\"", ":", "\n", "            ", "count_start_time", "=", "time", ".", "time", "(", ")", "\n", "player", ".", "peer", ".", "reset_counter", "(", ")", "\n", "\n", "", "", "def", "test_speed_end", "(", ")", ":", "\n", "        ", "if", "player", ".", "role", "==", "\"player0\"", ":", "\n", "            ", "count_time", "=", "time", ".", "time", "(", ")", "-", "count_start_time", "\n", "print", "(", "f\"Network speed with player1: \"", "\n", "f\"from {player.peer.traffic_counter_from['player1'] / count_time / 1024:.2f} Mbps \"", "\n", "f\"to {player.peer.traffic_counter_to['player1'] / count_time / 1024:.2f} Mbps \"", ")", "\n", "print", "(", "f\"Network speed with third-party: \"", "\n", "f\"from {player.peer.traffic_counter_from['third-party'] / count_time / 1024:.2f} Mbps \"", "\n", "f\"to {player.peer.traffic_counter_to['third-party'] / count_time / 1024:.2f} Mbps \"", ")", "\n", "\n", "\n", "", "", "dense1", "=", "DenseLayer", "(", "784", ",", "128", ")", "\n", "dense2", "=", "DenseLayer", "(", "128", ",", "32", ")", "\n", "dense3", "=", "DenseLayer", "(", "32", ",", "10", ")", "\n", "\n", "def", "network", "(", "x", ")", ":", "\n", "        ", "x1", "=", "opf", ".", "relu", "(", "dense1", "(", "x", ")", ",", "1", "/", "6", ")", "\n", "x2", "=", "opf", ".", "relu", "(", "dense2", "(", "x1", ")", ",", "1", "/", "6", ")", "\n", "x3", "=", "opf", ".", "sigmoid", "(", "dense3", "(", "x2", ")", ")", "\n", "return", "x3", "\n", "\n", "", "start_time", "=", "time", ".", "time", "(", ")", "\n", "for", "i", "in", "range", "(", "300001", ")", ":", "\n", "        ", "if", "i", "%", "1000", "==", "0", ":", "\n", "            ", "player", ".", "disable_triple_buffer", "=", "True", "\n", "xs", "=", "opf", ".", "new_node", "(", "test_xs", ")", "\n", "ys", "=", "network", "(", "xs", ")", "\n", "if", "player", ".", "role", "in", "[", "\"player0\"", ",", "\"player1\"", "]", ":", "\n", "                ", "pred_ys", "=", "player", ".", "decode", "(", "player", ".", "reveal", "(", "ys", ".", "get", "(", ")", ")", ")", "\n", "", "if", "player", ".", "role", "==", "\"player0\"", ":", "\n", "                ", "acc", "=", "np", ".", "mean", "(", "np", ".", "argmax", "(", "pred_ys", ",", "axis", "=", "-", "1", ")", "==", "np", ".", "argmax", "(", "test_ys", ",", "axis", "=", "-", "1", ")", ")", "\n", "print", "(", "f\"Round {i} Acc {acc:.4f}\"", ")", "\n", "record_df", "=", "record_df", ".", "append", "(", "{", "\n", "'n_batches'", ":", "i", ",", "\n", "'time'", ":", "time", ".", "time", "(", ")", "-", "start_time", ",", "\n", "'acc'", ":", "acc", "\n", "}", ",", "ignore_index", "=", "True", ")", "\n", "record_df", ".", "to_csv", "(", "\"record_dnn_mnist_fed_784-128-32-10.csv\"", ")", "\n", "", "player", ".", "disable_triple_buffer", "=", "False", "\n", "\n", "", "batch", "=", "data_loader", ".", "get_batch", "(", "64", ")", "\n", "xs", "=", "opf", ".", "new_node", "(", "lambda", ":", "batch", "[", ":", ",", ":", "784", "]", ")", "\n", "ys", "=", "opf", ".", "new_node", "(", "lambda", ":", "batch", "[", ":", ",", "784", ":", "]", ")", "\n", "pred_ys", "=", "network", "(", "xs", ")", "\n", "loss", "=", "opf", ".", "mean_square_error", "(", "pred_ys", ",", "ys", ",", "2", ")", "\n", "if", "player", ".", "role", "in", "[", "\"player0\"", ",", "\"player1\"", "]", ":", "\n", "            ", "loss_val", "=", "player", ".", "decode", "(", "player", ".", "reveal", "(", "loss", ".", "get", "(", ")", ")", ")", "\n", "if", "player", ".", "role", "==", "\"player0\"", ":", "\n", "                ", "print", "(", "f\"Round {i} train loss: {loss_val:.3f}\"", ")", "\n", "\n", "", "", "paras", "=", "dense1", ".", "parameters", "(", ")", "+", "dense2", ".", "parameters", "(", ")", "+", "dense3", ".", "parameters", "(", ")", "\n", "gradients", "=", "opf", ".", "gradient_on", "(", "loss", ",", "paras", ",", "0.05", ")", "\n", "for", "para", ",", "grad", "in", "zip", "(", "paras", ",", "gradients", ")", ":", "\n", "            ", "para", ".", "set", "(", "(", "para", "-", "grad", ")", ".", "get", "(", ")", ")", "\n", "\n", "", "opf", ".", "clear_graph", "(", ")", "\n", "", "if", "player", ".", "role", "==", "\"player0\"", ":", "\n", "        ", "record_df", ".", "to_csv", "(", "\"record_dnn_mnist_fed_784-128-32-10.csv\"", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zfscgy_Amber.Benchmarks.feddnn_benchmark.reset_all_counter": [[19, 23], ["player0.peer.reset_counter", "player1.peer.reset_counter", "third_party.peer.reset_counter"], "function", ["home.repos.pwc.inspect_result.zfscgy_Amber.Comm.Socket.SocketServer.reset_counter", "home.repos.pwc.inspect_result.zfscgy_Amber.Comm.Socket.SocketServer.reset_counter", "home.repos.pwc.inspect_result.zfscgy_Amber.Comm.Socket.SocketServer.reset_counter"], ["def", "reset_all_counter", "(", ")", ":", "\n", "    ", "player0", ".", "peer", ".", "reset_counter", "(", ")", "\n", "player1", ".", "peer", ".", "reset_counter", "(", ")", "\n", "third_party", ".", "peer", ".", "reset_counter", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Benchmarks.feddnn_benchmark.init_all": [[26, 29], ["Amber.Core.Utils.parallel", "print"], "function", ["home.repos.pwc.inspect_result.zfscgy_Amber.Core.Utils.parallel"], ["", "def", "init_all", "(", ")", ":", "\n", "    ", "parallel", "(", "[", "player0", ".", "init_play", ",", "player1", ".", "init_play", ",", "third_party", ".", "init_play", "]", ")", "\n", "print", "(", "\"All party initialized\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Benchmarks.feddnn_benchmark.benchmark_lr": [[31, 116], ["print", "Amber.Core.Utils.parallel", "print", "Amber.NN.OpFactory", "Amber.NN.DenseLayer", "Amber.NN.DenseLayer.parameters", "Amber.NN.OpFactory.new_node", "Amber.NN.OpFactory.new_node", "range", "range", "Amber.NN.OpFactory.sigmoid", "net"], "function", ["home.repos.pwc.inspect_result.zfscgy_Amber.Core.Utils.parallel", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Layers.DenseLayer.parameters", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.new_node", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.new_node", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.sigmoid"], ["", "def", "benchmark_lr", "(", "dim", ":", "int", ",", "batch_size", ":", "int", ",", "out_dim", ":", "int", "=", "1", ")", ":", "\n", "    ", "print", "(", "\"=======benchmark lr============\"", ")", "\n", "def", "benchmark_player", "(", "player", ":", "RTASPlayer", ")", ":", "\n", "        ", "player", ".", "triple_buffer_size", "=", "1", "\n", "opf", "=", "OpFactory", "(", "player", ")", "\n", "# opf.use_as_default()  # In multithread, cannot use this since variables are shared!!!", "\n", "dense1", "=", "DenseLayer", "(", "dim", ",", "out_dim", ",", "op_factory", "=", "opf", ")", "# For multithreading, the use_as_default method will let all threads' opf with a particular player", "\n", "paras", "=", "dense1", ".", "parameters", "(", ")", "\n", "def", "net", "(", "xs", ")", ":", "\n", "            ", "x1", "=", "opf", ".", "sigmoid", "(", "dense1", "(", "xs", ")", ")", "\n", "return", "x1", "\n", "\n", "", "def", "backprop", "(", "xs", ",", "ys", ")", ":", "\n", "            ", "pred_ys", "=", "net", "(", "xs", ")", "\n", "'''\n            loss = opf.mean_square_error(ys, pred_ys, dim=2)\n            grads = opf.gradient_on(loss, paras, 0.05)\n            '''", "\n", "\n", "grad_ys", "=", "opf", ".", "mul", "(", "opf", ".", "sub", "(", "pred_ys", ",", "ys", ")", ",", "opf", ".", "new_node", "(", "0.1", "/", "batch_size", ",", "owner", "=", "'all'", ")", ")", "\n", "# grad_zs = opf.sub(opf.new_node(1, owner='all'), pred_ys)", "\n", "grad_zs", "=", "opf", ".", "mul", "(", "opf", ".", "mul", "(", "grad_ys", ",", "pred_ys", ")", ",", "opf", ".", "sub", "(", "opf", ".", "new_node", "(", "1", ",", "owner", "=", "'all'", ")", ",", "pred_ys", ")", ")", "\n", "grad_bias", "=", "opf", ".", "sum", "(", "grad_zs", ",", "axis", "=", "[", "0", "]", ",", "n_heading_axes", "=", "1", ")", "\n", "grad_ws", "=", "opf", ".", "matmul", "(", "opf", ".", "transpose", "(", "xs", ")", ",", "grad_zs", ")", "\n", "grads", "=", "[", "grad_ws", ",", "grad_bias", "]", "\n", "\n", "for", "para", ",", "grad", "in", "zip", "(", "paras", ",", "grads", ")", ":", "\n", "                ", "para", ".", "set", "(", "opf", ".", "sub", "(", "para", ",", "grad", ")", ".", "get", "(", ")", ")", "\n", "\n", "", "", "xs", "=", "opf", ".", "new_node", "(", "np", ".", "random", ".", "normal", "(", "0", ",", "1", ",", "[", "batch_size", ",", "dim", "]", ")", ")", "\n", "ys", "=", "opf", ".", "new_node", "(", "np", ".", "random", ".", "normal", "(", "0", ",", "1", ",", "[", "batch_size", ",", "out_dim", "]", ")", ")", "\n", "\n", "if", "player", ".", "role", "==", "\"player0\"", ":", "\n", "            ", "reset_all_counter", "(", ")", "\n", "time", ".", "sleep", "(", "1", ")", "\n", "print", "(", "\"Start benchmarking for inference....\"", ")", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "            ", "net", "(", "xs", ")", "\n", "\n", "", "if", "player", ".", "role", "==", "\"player0\"", ":", "\n", "            ", "comms", "=", "player0", ".", "peer", ".", "traffic_counter_from", "[", "'third-party'", "]", "+", "player0", ".", "peer", ".", "traffic_counter_from", "[", "'player1'", "]", "+", "player1", ".", "peer", ".", "traffic_counter_from", "[", "'third-party'", "]", "+", "player1", ".", "peer", ".", "traffic_counter_from", "[", "'player0'", "]", "+", "third_party", ".", "peer", ".", "traffic_counter_from", "[", "'player0'", "]", "+", "third_party", ".", "peer", ".", "traffic_counter_from", "[", "'player1'", "]", "\n", "\n", "\n", "comms_p2", "=", "third_party", ".", "peer", ".", "traffic_counter_from", "[", "'player0'", "]", "+", "third_party", ".", "peer", ".", "traffic_counter_from", "[", "'player1'", "]", "+", "third_party", ".", "peer", ".", "traffic_counter_to", "[", "'player0'", "]", "+", "third_party", ".", "peer", ".", "traffic_counter_to", "[", "'player1'", "]", "\n", "\n", "time_elapsed", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "\n", "print", "(", "f\"Training Time per iteration {time_elapsed / 10:.3f}s, \"", "\n", "f\"communication {comms / (1024**2 * 10):.3f}Mb, \"", "\n", "f\"p2: {comms_p2 / (1024**2 * 10):.3f}Mb\"", ")", "\n", "\n", "\n", "", "if", "player", ".", "role", "==", "\"player0\"", ":", "\n", "            ", "reset_all_counter", "(", ")", "\n", "time", ".", "sleep", "(", "1", ")", "\n", "print", "(", "\"Start benchmarking for training one batch....\"", ")", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "            ", "backprop", "(", "xs", ",", "ys", ")", "\n", "\n", "", "if", "player", ".", "role", "==", "\"player0\"", ":", "\n", "            ", "comms", "=", "player0", ".", "peer", ".", "traffic_counter_from", "[", "'third-party'", "]", "+", "player0", ".", "peer", ".", "traffic_counter_from", "[", "'player1'", "]", "+", "player1", ".", "peer", ".", "traffic_counter_from", "[", "'third-party'", "]", "+", "player1", ".", "peer", ".", "traffic_counter_from", "[", "'player0'", "]", "+", "third_party", ".", "peer", ".", "traffic_counter_from", "[", "'player0'", "]", "+", "third_party", ".", "peer", ".", "traffic_counter_from", "[", "'player1'", "]", "\n", "\n", "comms_p2", "=", "third_party", ".", "peer", ".", "traffic_counter_from", "[", "'player0'", "]", "+", "third_party", ".", "peer", ".", "traffic_counter_from", "[", "'player1'", "]", "+", "third_party", ".", "peer", ".", "traffic_counter_to", "[", "'player0'", "]", "+", "third_party", ".", "peer", ".", "traffic_counter_to", "[", "'player1'", "]", "\n", "\n", "time_elapsed", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "print", "(", "f\"Training Time per iteration {time_elapsed / 10:.3f}s, \"", "\n", "f\"communication {comms / (1024**2 * 10):.3f}Mb, \"", "\n", "f\"p2: {comms_p2 / (1024 ** 2 * 10):.3f}Mb\"", ")", "\n", "\n", "", "", "\"\"\"\n    ************\n    If to measure traffic, must use parallel!!!\n    Because when using parallel_process, the traffic can not be recorded since the player is re-created in the new process!!!\n    \"\"\"", "\n", "outs", ",", "errs", "=", "parallel", "(", "benchmark_player", ",", "[", "(", "player0", ",", ")", ",", "(", "player1", ",", ")", ",", "(", "third_party", ",", ")", "]", ")", "\n", "\n", "print", "(", "errs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.Benchmarks.feddnn_benchmark.benchmark_dnn": [[119, 196], ["print", "Amber.Core.Utils.parallel", "print", "Amber.NN.OpFactory", "Amber.NN.OpFactory.use_as_default", "Amber.NN.DenseLayer", "Amber.NN.DenseLayer", "Amber.NN.OpFactory.new_node", "Amber.NN.OpFactory.new_node", "range", "range", "Amber.NN.DenseLayer.parameters", "Amber.NN.DenseLayer.parameters", "Amber.NN.OpFactory.relu", "Amber.NN.OpFactory.sigmoid", "net"], "function", ["home.repos.pwc.inspect_result.zfscgy_Amber.Core.Utils.parallel", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.use_as_default", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.new_node", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.new_node", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Layers.DenseLayer.parameters", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.Layers.DenseLayer.parameters", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.relu", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.sigmoid"], ["", "def", "benchmark_dnn", "(", "input_dim", ":", "int", ",", "hidden_dim", ":", "int", ",", "batch_size", ":", "int", ")", ":", "\n", "    ", "print", "(", "\"=======benchmark dnn============\"", ")", "\n", "def", "benchmark_player", "(", "player", ":", "RTASPlayer", ")", ":", "\n", "        ", "player", ".", "triple_buffer_size", "=", "10", "\n", "opf", "=", "OpFactory", "(", "player", ")", "\n", "opf", ".", "use_as_default", "(", ")", "\n", "dense1", "=", "DenseLayer", "(", "input_dim", ",", "hidden_dim", ",", "op_factory", "=", "opf", ")", "# For multithreading, the use_as_default method will let all threads' opf with a particular player", "\n", "dense2", "=", "DenseLayer", "(", "hidden_dim", ",", "1", ",", "op_factory", "=", "opf", ")", "\n", "paras", "=", "dense1", ".", "parameters", "(", ")", "+", "dense2", ".", "parameters", "(", ")", "\n", "def", "net", "(", "xs", ")", ":", "\n", "            ", "h1", "=", "opf", ".", "relu", "(", "dense1", "(", "xs", ")", ",", "1", "/", "6", ")", "\n", "y", "=", "opf", ".", "sigmoid", "(", "dense2", "(", "h1", ")", ")", "\n", "return", "h1", ",", "y", "\n", "\n", "", "def", "backprop", "(", "xs", ",", "ys", ")", ":", "\n", "            ", "h1", ",", "pred_ys", "=", "net", "(", "xs", ")", "\n", "'''\n            loss = opf.mean_square_error(ys, pred_ys, dim=2)\n            grads = opf.gradient_on(loss, paras, 0.05)\n            '''", "\n", "\n", "grad_ys", "=", "opf", ".", "mul", "(", "opf", ".", "sub", "(", "pred_ys", ",", "ys", ")", ",", "opf", ".", "new_node", "(", "0.05", "/", "batch_size", ",", "owner", "=", "'all'", ")", ")", "\n", "grad_zs", "=", "opf", ".", "mul", "(", "opf", ".", "mul", "(", "grad_ys", ",", "pred_ys", ")", ",", "opf", ".", "sub", "(", "opf", ".", "new_node", "(", "1", ",", "owner", "=", "'all'", ")", ",", "pred_ys", ")", ")", "\n", "\n", "grad_bias2", "=", "opf", ".", "sum", "(", "grad_zs", ",", "axis", "=", "[", "0", "]", ",", "n_heading_axes", "=", "1", ")", "\n", "grad_ws2", "=", "opf", ".", "matmul", "(", "opf", ".", "transpose", "(", "h1", ")", ",", "grad_zs", ")", "\n", "\n", "grad_y1s", "=", "opf", ".", "matmul", "(", "grad_zs", ",", "opf", ".", "transpose", "(", "dense2", ".", "w", ")", ")", "\n", "grad_z1s", "=", "opf", ".", "mul", "(", "grad_y1s", ",", "opf", ".", "relu_grad", "(", "grad_y1s", ",", "1", "/", "6", ")", ")", "\n", "\n", "grad_bias1", "=", "opf", ".", "sum", "(", "grad_z1s", ",", "axis", "=", "[", "0", "]", ",", "n_heading_axes", "=", "1", ")", "\n", "grad_ws1", "=", "opf", ".", "matmul", "(", "opf", ".", "transpose", "(", "xs", ")", ",", "grad_z1s", ")", "\n", "\n", "grads", "=", "[", "grad_ws1", ",", "grad_bias1", ",", "grad_ws2", ",", "grad_bias2", "]", "\n", "\n", "for", "para", ",", "grad", "in", "zip", "(", "paras", ",", "grads", ")", ":", "\n", "                ", "para", ".", "set", "(", "opf", ".", "sub", "(", "para", ",", "grad", ")", ".", "get", "(", ")", ")", "\n", "\n", "", "", "xs", "=", "opf", ".", "new_node", "(", "np", ".", "random", ".", "normal", "(", "0", ",", "1", ",", "[", "batch_size", ",", "input_dim", "]", ")", ")", "\n", "ys", "=", "opf", ".", "new_node", "(", "np", ".", "random", ".", "normal", "(", "0", ",", "1", ",", "[", "batch_size", ",", "1", "]", ")", ")", "\n", "\n", "if", "player", ".", "role", "==", "\"player0\"", ":", "\n", "            ", "print", "(", "\"Start benchmarking for inference....\"", ")", "\n", "reset_all_counter", "(", ")", "\n", "time", ".", "sleep", "(", "1", ")", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "            ", "net", "(", "xs", ")", "\n", "\n", "", "if", "player", ".", "role", "==", "\"player0\"", ":", "\n", "            ", "time_elapsed", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "time", ".", "sleep", "(", "1", ")", "\n", "comms", "=", "player0", ".", "peer", ".", "traffic_counter_from", "[", "'third-party'", "]", "+", "player0", ".", "peer", ".", "traffic_counter_from", "[", "'player1'", "]", "+", "player1", ".", "peer", ".", "traffic_counter_from", "[", "'third-party'", "]", "+", "player1", ".", "peer", ".", "traffic_counter_from", "[", "'player0'", "]", "+", "third_party", ".", "peer", ".", "traffic_counter_from", "[", "'player0'", "]", "+", "third_party", ".", "peer", ".", "traffic_counter_from", "[", "'player1'", "]", "\n", "print", "(", "f\"Inference Time per iteration {time_elapsed / 10:.3f}s, communication {comms / (1024**2 * 10):.2f}Mb\"", ")", "\n", "\n", "", "if", "player", ".", "role", "==", "\"player0\"", ":", "\n", "            ", "print", "(", "\"Start benchmarking for training one batch....\"", ")", "\n", "reset_all_counter", "(", ")", "\n", "time", ".", "sleep", "(", "1", ")", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "            ", "backprop", "(", "xs", ",", "ys", ")", "\n", "\n", "", "if", "player", ".", "role", "==", "\"player0\"", ":", "\n", "            ", "time_elapsed", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "time", ".", "sleep", "(", "1", ")", "\n", "comms", "=", "player0", ".", "peer", ".", "traffic_counter_from", "[", "'third-party'", "]", "+", "player0", ".", "peer", ".", "traffic_counter_from", "[", "'player1'", "]", "+", "player1", ".", "peer", ".", "traffic_counter_from", "[", "'third-party'", "]", "+", "player1", ".", "peer", ".", "traffic_counter_from", "[", "'player0'", "]", "+", "third_party", ".", "peer", ".", "traffic_counter_from", "[", "'player0'", "]", "+", "third_party", ".", "peer", ".", "traffic_counter_from", "[", "'player1'", "]", "\n", "print", "(", "f\"Training Time per iteration {time_elapsed / 10:.3f}s, communication {comms / (1024**2 * 10):.2f}Mb\"", ")", "\n", "\n", "", "", "outs", ",", "errs", "=", "parallel", "(", "benchmark_player", ",", "[", "(", "player0", ",", ")", ",", "(", "player1", ",", ")", ",", "(", "third_party", ",", ")", "]", ")", "\n", "print", "(", "errs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zfscgy_Amber.FedDNN784_128_10.run_dnn.run_player": [[18, 102], ["pandas.DataFrame", "Amber.Core.Player.RTASPlayer", "time.sleep", "Amber.Core.Player.RTASPlayer.init_play", "time.sleep", "OpFactory", "OpFactory.use_as_default", "pandas.read_csv().values.astype", "print", "Amber.Tools.NPDataLoader", "DenseLayer", "DenseLayer", "time.time", "range", "OpFactory.relu", "OpFactory.sigmoid", "Amber.Tools.NPDataLoader.get_batch", "OpFactory.new_node", "OpFactory.new_node", "run_dnn.run_player.network"], "function", ["home.repos.pwc.inspect_result.zfscgy_Amber.Player.RTASPlayer.RTASPlayer.init_play", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.use_as_default", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.relu", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.sigmoid", "home.repos.pwc.inspect_result.zfscgy_Amber.Tools.DataLoader.NPDataLoader.get_batch", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.new_node", "home.repos.pwc.inspect_result.zfscgy_Amber.NN.OpFacotry.OpFactory.new_node", "home.repos.pwc.inspect_result.zfscgy_Amber.LocalExample.simple_dnn_784_128_32_10.network"], ["    ", "record_df", "=", "pd", ".", "DataFrame", "(", "columns", "=", "[", "'n_batches'", ",", "'time'", ",", "'acc'", "]", ")", "\n", "player", "=", "RTASPlayer", "(", "rolename", ",", "addr_dict", ")", "\n", "time", ".", "sleep", "(", "5", ")", "\n", "player", ".", "init_play", "(", ")", "\n", "time", ".", "sleep", "(", "3", ")", "\n", "opf", "=", "OpFactory", "(", "player", ")", "\n", "opf", ".", "use_as_default", "(", ")", "\n", "\n", "\"\"\"\n    MNIST Example\n    \"\"\"", "\n", "mnist_data", "=", "pd", ".", "read_csv", "(", "\"../../Data/Datasets/mnist.csv\"", ",", "header", "=", "None", ")", ".", "values", ".", "astype", "(", "np", ".", "float", ")", "\n", "print", "(", "f\"{rolename}: data read finished\"", ")", "\n", "mnist_data", "[", ":", ",", ":", "784", "]", "=", "mnist_data", "[", ":", ",", ":", "784", "]", "/", "10", "-", "0.5", "\n", "data_loader", "=", "NPDataLoader", "(", "mnist_data", "[", ":", "50000", ",", ":", "]", ")", "\n", "test_xs", "=", "mnist_data", "[", "50000", ":", "55000", ",", ":", "784", "]", "\n", "test_ys", "=", "mnist_data", "[", "50000", ":", "55000", ",", "784", ":", "]", "\n", "\n", "count_start_time", "=", "0", "\n", "\n", "def", "test_speed_start", "(", ")", ":", "\n", "        ", "nonlocal", "count_start_time", "\n", "if", "player", ".", "role", "==", "\"player0\"", ":", "\n", "            ", "count_start_time", "=", "time", ".", "time", "(", ")", "\n", "player", ".", "peer", ".", "reset_counter", "(", ")", "\n", "\n", "", "", "def", "test_speed_end", "(", ")", ":", "\n", "        ", "if", "player", ".", "role", "==", "\"player0\"", ":", "\n", "            ", "count_time", "=", "time", ".", "time", "(", ")", "-", "count_start_time", "\n", "print", "(", "f\"Network speed with player1: \"", "\n", "f\"from {player.peer.traffic_counter_from['player1'] / count_time / 1024:.2f} Mbps \"", "\n", "f\"to {player.peer.traffic_counter_to['player1'] / count_time / 1024:.2f} Mbps \"", ")", "\n", "print", "(", "f\"Network speed with third-party: \"", "\n", "f\"from {player.peer.traffic_counter_from['third-party'] / count_time / 1024:.2f} Mbps \"", "\n", "f\"to {player.peer.traffic_counter_to['third-party'] / count_time / 1024:.2f} Mbps \"", ")", "\n", "\n", "\n", "", "", "dense1", "=", "DenseLayer", "(", "784", ",", "128", ")", "\n", "dense2", "=", "DenseLayer", "(", "128", ",", "32", ")", "\n", "dense3", "=", "DenseLayer", "(", "32", ",", "10", ")", "\n", "\n", "def", "network", "(", "x", ")", ":", "\n", "        ", "x1", "=", "opf", ".", "relu", "(", "dense1", "(", "x", ")", ",", "1", "/", "6", ")", "\n", "x2", "=", "opf", ".", "relu", "(", "dense2", "(", "x1", ")", ",", "1", "/", "6", ")", "\n", "x3", "=", "opf", ".", "sigmoid", "(", "dense3", "(", "x2", ")", ")", "\n", "return", "x3", "\n", "\n", "", "start_time", "=", "time", ".", "time", "(", ")", "\n", "for", "i", "in", "range", "(", "300001", ")", ":", "\n", "        ", "if", "i", "%", "1000", "==", "0", ":", "\n", "            ", "player", ".", "disable_triple_buffer", "=", "True", "\n", "xs", "=", "opf", ".", "new_node", "(", "test_xs", ")", "\n", "ys", "=", "network", "(", "xs", ")", "\n", "if", "player", ".", "role", "in", "[", "\"player0\"", ",", "\"player1\"", "]", ":", "\n", "                ", "pred_ys", "=", "player", ".", "decode", "(", "player", ".", "reveal", "(", "ys", ".", "get", "(", ")", ")", ")", "\n", "", "if", "player", ".", "role", "==", "\"player0\"", ":", "\n", "                ", "acc", "=", "np", ".", "mean", "(", "np", ".", "argmax", "(", "pred_ys", ",", "axis", "=", "-", "1", ")", "==", "np", ".", "argmax", "(", "test_ys", ",", "axis", "=", "-", "1", ")", ")", "\n", "print", "(", "f\"Round {i} Acc {acc:.4f}\"", ")", "\n", "record_df", "=", "record_df", ".", "append", "(", "{", "\n", "'n_batches'", ":", "i", ",", "\n", "'time'", ":", "time", ".", "time", "(", ")", "-", "start_time", ",", "\n", "'acc'", ":", "acc", "\n", "}", ",", "ignore_index", "=", "True", ")", "\n", "record_df", ".", "to_csv", "(", "\"record_dnn_mnist_fed_784-128-32-10.csv\"", ")", "\n", "", "player", ".", "disable_triple_buffer", "=", "False", "\n", "\n", "", "batch", "=", "data_loader", ".", "get_batch", "(", "64", ")", "\n", "xs", "=", "opf", ".", "new_node", "(", "lambda", ":", "batch", "[", ":", ",", ":", "784", "]", ")", "\n", "ys", "=", "opf", ".", "new_node", "(", "lambda", ":", "batch", "[", ":", ",", "784", ":", "]", ")", "\n", "pred_ys", "=", "network", "(", "xs", ")", "\n", "loss", "=", "opf", ".", "mean_square_error", "(", "pred_ys", ",", "ys", ",", "2", ")", "\n", "if", "player", ".", "role", "in", "[", "\"player0\"", ",", "\"player1\"", "]", ":", "\n", "            ", "loss_val", "=", "player", ".", "decode", "(", "player", ".", "reveal", "(", "loss", ".", "get", "(", ")", ")", ")", "\n", "if", "player", ".", "role", "==", "\"player0\"", ":", "\n", "                ", "print", "(", "f\"Round {i} train loss: {loss_val:.3f}\"", ")", "\n", "\n", "", "", "paras", "=", "dense1", ".", "parameters", "(", ")", "+", "dense2", ".", "parameters", "(", ")", "+", "dense3", ".", "parameters", "(", ")", "\n", "gradients", "=", "opf", ".", "gradient_on", "(", "loss", ",", "paras", ",", "0.05", ")", "\n", "for", "para", ",", "grad", "in", "zip", "(", "paras", ",", "gradients", ")", ":", "\n", "            ", "para", ".", "set", "(", "(", "para", "-", "grad", ")", ".", "get", "(", ")", ")", "\n", "\n", "", "opf", ".", "clear_graph", "(", ")", "\n", "", "if", "player", ".", "role", "==", "\"player0\"", ":", "\n", "        ", "record_df", ".", "to_csv", "(", "\"record_dnn_mnist_fed_784-128-32-10.csv\"", ")", "\n", "", "", ""]]}