{"home.repos.pwc.inspect_result.kckishan_HOGCN-LP.None.models.MixHopNetwork.__init__": [[15, 23], ["super().__init__", "models.MixHopNetwork.calculate_layer_sizes", "models.MixHopNetwork.setup_layer_structure"], "methods", ["home.repos.pwc.inspect_result.kckishan_HOGCN-LP.None.utils.Data_GDI.__init__", "home.repos.pwc.inspect_result.kckishan_HOGCN-LP.None.models.MixHopNetwork.calculate_layer_sizes", "home.repos.pwc.inspect_result.kckishan_HOGCN-LP.None.models.MixHopNetwork.setup_layer_structure"], ["def", "__init__", "(", "self", ",", "args", ",", "feature_number", ",", "class_number", ")", ":", "\n", "        ", "super", "(", "MixHopNetwork", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "feature_number", "=", "feature_number", "\n", "self", ".", "class_number", "=", "class_number", "\n", "self", ".", "dropout", "=", "self", ".", "args", ".", "dropout", "\n", "self", ".", "calculate_layer_sizes", "(", ")", "\n", "self", ".", "setup_layer_structure", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kckishan_HOGCN-LP.None.models.MixHopNetwork.calculate_layer_sizes": [[24, 29], ["sum", "sum", "len", "len"], "methods", ["None"], ["", "def", "calculate_layer_sizes", "(", "self", ")", ":", "\n", "        ", "self", ".", "abstract_feature_number_1", "=", "sum", "(", "self", ".", "args", ".", "layers_1", ")", "\n", "self", ".", "abstract_feature_number_2", "=", "sum", "(", "self", ".", "args", ".", "layers_2", ")", "\n", "self", ".", "order_1", "=", "len", "(", "self", ".", "args", ".", "layers_1", ")", "\n", "self", ".", "order_2", "=", "len", "(", "self", ".", "args", ".", "layers_2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kckishan_HOGCN-LP.None.models.MixHopNetwork.setup_layer_structure": [[30, 50], ["torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.Bilinear", "torch.nn.Sequential", "layers.SparseNGCNLayer", "layers.DenseNGCNLayer", "torch.nn.Linear", "torch.nn.ELU", "torch.nn.Linear", "range", "range"], "methods", ["None"], ["", "def", "setup_layer_structure", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Creating the layer structure (3 convolutional upper layers, 3 bottom layers) and dense final.\n        \"\"\"", "\n", "self", ".", "upper_layers", "=", "[", "\n", "SparseNGCNLayer", "(", "self", ".", "feature_number", ",", "self", ".", "args", ".", "layers_1", "[", "i", "-", "1", "]", ",", "i", ",", "self", ".", "args", ".", "dropout", ",", "self", ".", "args", ".", "device", ")", "for", "\n", "i", "\n", "in", "range", "(", "1", ",", "self", ".", "order_1", "+", "1", ")", "]", "\n", "self", ".", "upper_layers", "=", "nn", ".", "ModuleList", "(", "self", ".", "upper_layers", ")", "\n", "\n", "self", ".", "bottom_layers", "=", "[", "\n", "DenseNGCNLayer", "(", "self", ".", "abstract_feature_number_1", ",", "self", ".", "args", ".", "layers_2", "[", "i", "-", "1", "]", ",", "i", ",", "self", ".", "args", ".", "dropout", ",", "\n", "self", ".", "args", ".", "device", ")", "for", "i", "in", "\n", "range", "(", "1", ",", "self", ".", "order_2", "+", "1", ")", "]", "\n", "self", ".", "bottom_layers", "=", "nn", ".", "ModuleList", "(", "self", ".", "bottom_layers", ")", "\n", "\n", "self", ".", "bilinear", "=", "nn", ".", "Bilinear", "(", "self", ".", "abstract_feature_number_2", ",", "self", ".", "abstract_feature_number_2", ",", "self", ".", "args", ".", "hidden1", ")", "\n", "self", ".", "decoder", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "args", ".", "hidden1", ",", "self", ".", "args", ".", "hidden2", ")", ",", "\n", "nn", ".", "ELU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "args", ".", "hidden2", ",", "1", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kckishan_HOGCN-LP.None.models.MixHopNetwork.embed": [[52, 68], ["torch.cat", "torch.nn.functional.dropout", "torch.cat", "torch.nn.functional.dropout", "range", "range"], "methods", ["None"], ["", "def", "embed", "(", "self", ",", "normalized_adjacency_matrix", ",", "features", ")", ":", "\n", "        ", "\"\"\"\n                Forward pass.\n                :param normalized adjacency_matrix: Target matrix as a dict with indices and values.\n                :param features: Feature matrix.\n                :return feat: higher order features\n                \"\"\"", "\n", "abstract_features_1", "=", "torch", ".", "cat", "(", "\n", "[", "self", ".", "upper_layers", "[", "i", "]", "(", "normalized_adjacency_matrix", ",", "features", ")", "for", "i", "in", "range", "(", "self", ".", "order_1", ")", "]", ",", "dim", "=", "1", ")", "\n", "abstract_features_1", "=", "F", ".", "dropout", "(", "abstract_features_1", ",", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "\n", "abstract_features_2", "=", "torch", ".", "cat", "(", "\n", "[", "self", ".", "bottom_layers", "[", "i", "]", "(", "normalized_adjacency_matrix", ",", "abstract_features_1", ")", "for", "i", "in", "range", "(", "self", ".", "order_2", ")", "]", ",", "\n", "dim", "=", "1", ")", "\n", "feat", "=", "F", ".", "dropout", "(", "abstract_features_2", ",", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "return", "feat", "\n", "\n"]], "home.repos.pwc.inspect_result.kckishan_HOGCN-LP.None.models.MixHopNetwork.forward": [[69, 85], ["models.MixHopNetwork.embed", "torch.nn.functional.elu", "torch.nn.functional.dropout", "models.MixHopNetwork.decoder", "models.MixHopNetwork.bilinear"], "methods", ["home.repos.pwc.inspect_result.kckishan_HOGCN-LP.None.models.MixHopNetwork.embed"], ["", "def", "forward", "(", "self", ",", "normalized_adjacency_matrix", ",", "features", ",", "idx", ")", ":", "\n", "        ", "\"\"\"\n        Forward pass.\n        :param normalized adjacency_matrix: Target matrix as a dict with indices and values.\n        :param features: Feature matrix.\n        :return predictions: Label predictions.\n                latent_features: latent representations of nodes\n        \"\"\"", "\n", "latent_features", "=", "self", ".", "embed", "(", "normalized_adjacency_matrix", ",", "features", ")", "\n", "\n", "feat_p1", "=", "latent_features", "[", "idx", "[", "0", "]", "]", "\n", "feat_p2", "=", "latent_features", "[", "idx", "[", "1", "]", "]", "\n", "feat", "=", "F", ".", "elu", "(", "self", ".", "bilinear", "(", "feat_p1", ",", "feat_p2", ")", ")", "\n", "feat", "=", "F", ".", "dropout", "(", "feat", ",", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "predictions", "=", "self", ".", "decoder", "(", "feat", ")", "\n", "return", "predictions", ",", "latent_features", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kckishan_HOGCN-LP.None.main.main": [[7, 20], ["param_parser.parameter_parser", "torch.device", "torch.manual_seed", "utils.tab_printer", "trainer.Trainer", "trainer.Trainer.fit", "torch.cuda.is_available"], "function", ["home.repos.pwc.inspect_result.kckishan_HOGCN-LP.None.param_parser.parameter_parser", "home.repos.pwc.inspect_result.kckishan_HOGCN-LP.None.utils.tab_printer", "home.repos.pwc.inspect_result.kckishan_HOGCN-LP.None.trainer.Trainer.fit"], ["def", "main", "(", ")", ":", "\n", "# parse command line arguments", "\n", "    ", "args", "=", "parameter_parser", "(", ")", "\n", "\n", "# set arguments", "\n", "args", ".", "cuda", "=", "args", ".", "cuda", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "args", ".", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "args", ".", "cuda", "else", "\"cpu\"", ")", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "tab_printer", "(", "args", ")", "\n", "\n", "# define a trainer and train HOGCN", "\n", "trainer", "=", "Trainer", "(", "args", ")", "\n", "trainer", ".", "fit", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kckishan_HOGCN-LP.None.trainer.Trainer.__init__": [[18, 25], ["trainer.Trainer.setup_features", "models.MixHopNetwork", "trainer.Trainer.model.to", "print"], "methods", ["home.repos.pwc.inspect_result.kckishan_HOGCN-LP.None.trainer.Trainer.setup_features"], ["def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "device", "=", "self", ".", "args", ".", "device", "\n", "self", ".", "setup_features", "(", ")", "\n", "self", ".", "model", "=", "MixHopNetwork", "(", "self", ".", "args", ",", "self", ".", "feature_number", ",", "1", ")", "\n", "self", ".", "model", "=", "self", ".", "model", ".", "to", "(", "self", ".", "device", ")", "\n", "print", "(", "self", ".", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kckishan_HOGCN-LP.None.trainer.Trainer.setup_features": [[26, 70], ["utils.load_data", "print", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "Data_class", "torch.utils.data.DataLoader", "Data_class", "torch.utils.data.DataLoader", "Data_class", "torch.utils.data.DataLoader", "os.path.exists", "os.makedirs", "len", "len"], "methods", ["home.repos.pwc.inspect_result.kckishan_HOGCN-LP.None.utils.load_data"], ["", "def", "setup_features", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Creating a feature matrix, target vector and propagation matrix.\n        \"\"\"", "\n", "# Load data", "\n", "self", ".", "propagation_matrix", ",", "self", ".", "features", ",", "self", ".", "idx_map", ",", "Data_class", "=", "load_data", "(", "self", ".", "args", ")", "\n", "\n", "train_params", "=", "{", "'batch_size'", ":", "self", ".", "args", ".", "batch_size", ",", "\n", "'shuffle'", ":", "True", ",", "\n", "'num_workers'", ":", "6", ",", "\n", "'drop_last'", ":", "True", "}", "\n", "\n", "test_params", "=", "{", "'batch_size'", ":", "self", ".", "args", ".", "batch_size", ",", "\n", "'shuffle'", ":", "False", ",", "\n", "'num_workers'", ":", "6", "}", "\n", "\n", "data_path", "=", "f\"./data/{self.args.network_type}/fold{self.args.fold_id}\"", "\n", "if", "self", ".", "args", ".", "ratio", ":", "\n", "            ", "data_path", "=", "f\"./data/{self.args.network_type}/{self.args.train_percent}/fold{self.args.fold_id}\"", "\n", "\n", "", "print", "(", "f\"Data folder: {data_path}\"", ")", "\n", "df_train", "=", "pd", ".", "read_csv", "(", "data_path", "+", "'/train.csv'", ")", "\n", "df_val", "=", "pd", ".", "read_csv", "(", "data_path", "+", "'/val.csv'", ")", "\n", "df_test", "=", "pd", ".", "read_csv", "(", "data_path", "+", "'/test.csv'", ")", "\n", "\n", "training_set", "=", "Data_class", "(", "self", ".", "idx_map", ",", "df_train", ".", "label", ".", "values", ",", "df_train", ")", "\n", "self", ".", "train_loader", "=", "data", ".", "DataLoader", "(", "training_set", ",", "**", "train_params", ")", "\n", "\n", "validation_set", "=", "Data_class", "(", "self", ".", "idx_map", ",", "df_val", ".", "label", ".", "values", ",", "df_val", ")", "\n", "self", ".", "val_loader", "=", "data", ".", "DataLoader", "(", "validation_set", ",", "**", "test_params", ")", "\n", "\n", "test_set", "=", "Data_class", "(", "self", ".", "idx_map", ",", "df_test", ".", "label", ".", "values", ",", "df_test", ")", "\n", "self", ".", "test_loader", "=", "data", ".", "DataLoader", "(", "test_set", ",", "**", "test_params", ")", "\n", "\n", "self", ".", "feature_number", "=", "self", ".", "features", "[", "\"dimensions\"", "]", "[", "1", "]", "\n", "\n", "# saving the results", "\n", "if", "self", ".", "args", ".", "ratio", ":", "\n", "            ", "self", ".", "model_save_folder", "=", "f\"trained_models/{self.args.model}/network_{self.args.network_type}/{self.args.train_percent}/order_{len(self.args.layers_1)}/fold{self.args.fold_id}/\"", "\n", "", "else", ":", "\n", "            ", "self", ".", "model_save_folder", "=", "f\"trained_models/{self.args.model}/network_{self.args.network_type}/order_{len(self.args.layers_1)}/fold{self.args.fold_id}/\"", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "model_save_folder", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "model_save_folder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kckishan_HOGCN-LP.None.trainer.Trainer.fit": [[71, 173], ["torch.optim.Adam", "time.time", "print", "range", "print", "print", "torch.load", "trainer.Trainer.score", "print", "torch.save", "torch.save", "trainer.Trainer.model.parameters", "time.time", "print", "enumerate", "sklearn.metrics.roc_auc_score", "os.path.exists", "os.makedirs", "torch.no_grad", "trainer.Trainer.model.eval", "trainer.Trainer.model.embed", "os.path.exists", "os.makedirs", "trainer.Trainer.model.train", "trainer.Trainer.optimizer.zero_grad", "label.to.to.to", "trainer.Trainer.model", "torch.nn.functional.binary_cross_entropy_with_logits", "torch.nn.functional.binary_cross_entropy_with_logits.backward", "trainer.Trainer.optimizer.step", "torch.nn.functional.binary_cross_entropy_with_logits.item", "loss_history.append", "label.to.to.to().numpy", "trainer.Trainer.score", "print", "loss_test.item", "prediction.squeeze", "label.to.to.float", "label.to.to().numpy.flatten().tolist", "prediction.flatten().tolist", "print", "torch.save", "time.time", "len", "len", "len", "len", "str", "label.to.to.to", "torch.nn.functional.binary_cross_entropy_with_logits.item", "loss_val.item", "label.to.to().numpy.flatten", "prediction.flatten", "str", "time.time", "torch.nn.functional.binary_cross_entropy_with_logits.cpu().detach().numpy", "str", "len", "torch.nn.functional.binary_cross_entropy_with_logits.cpu().detach", "str", "torch.nn.functional.binary_cross_entropy_with_logits.cpu", "str", "str"], "methods", ["home.repos.pwc.inspect_result.kckishan_HOGCN-LP.None.trainer.Trainer.score", "home.repos.pwc.inspect_result.kckishan_HOGCN-LP.None.models.MixHopNetwork.embed", "home.repos.pwc.inspect_result.kckishan_HOGCN-LP.None.trainer.Trainer.score"], ["", "", "def", "fit", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Fitting a neural network with early stopping.\n        \"\"\"", "\n", "no_improvement", "=", "0", "\n", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "args", ".", "learning_rate", ")", "\n", "\n", "max_auc", "=", "0", "\n", "loss_history", "=", "[", "]", "\n", "\n", "t_total", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "'Start Training...'", ")", "\n", "for", "epoch", "in", "range", "(", "self", ".", "args", ".", "epochs", ")", ":", "\n", "            ", "t", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "'-------- Epoch '", "+", "str", "(", "epoch", "+", "1", ")", "+", "' --------'", ")", "\n", "y_pred_train", "=", "[", "]", "\n", "y_label_train", "=", "[", "]", "\n", "\n", "epoch_loss", "=", "0", "\n", "for", "i", ",", "(", "label", ",", "pairs", ")", "in", "enumerate", "(", "self", ".", "train_loader", ")", ":", "\n", "                ", "self", ".", "model", ".", "train", "(", ")", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "label", "=", "label", ".", "to", "(", "self", ".", "device", ")", "\n", "prediction", ",", "latent_feat", "=", "self", ".", "model", "(", "self", ".", "propagation_matrix", ",", "self", ".", "features", ",", "pairs", ")", "\n", "loss", "=", "torch", ".", "nn", ".", "functional", ".", "binary_cross_entropy_with_logits", "(", "prediction", ".", "squeeze", "(", ")", ",", "label", ".", "float", "(", ")", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "epoch_loss", "+=", "loss", ".", "item", "(", ")", "\n", "loss_history", ".", "append", "(", "loss", ")", "\n", "\n", "label_ids", "=", "label", ".", "to", "(", "'cpu'", ")", ".", "numpy", "(", ")", "\n", "y_label_train", "=", "y_label_train", "+", "label_ids", ".", "flatten", "(", ")", ".", "tolist", "(", ")", "\n", "y_pred_train", "=", "y_pred_train", "+", "prediction", ".", "flatten", "(", ")", ".", "tolist", "(", ")", "\n", "\n", "if", "i", "%", "100", "==", "0", ":", "\n", "                    ", "print", "(", "'Epoch: '", "+", "str", "(", "epoch", "+", "1", ")", "+", "'/'", "+", "str", "(", "self", ".", "args", ".", "epochs", ")", "+", "' Iteration: '", "+", "str", "(", "i", "+", "1", ")", "+", "'/'", "+", "\n", "str", "(", "len", "(", "self", ".", "train_loader", ")", ")", "+", "' Training loss: '", "+", "str", "(", "loss", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "\n", "", "", "roc_train", "=", "roc_auc_score", "(", "y_label_train", ",", "y_pred_train", ")", "\n", "\n", "# validation after each epoch", "\n", "if", "not", "self", ".", "args", ".", "fastmode", ":", "\n", "                ", "preds", ",", "roc_val", ",", "prc_val", ",", "f1_val", ",", "loss_val", "=", "self", ".", "score", "(", "self", ".", "val_loader", ")", "\n", "if", "roc_val", ">", "max_auc", ":", "\n", "                    ", "max_auc", "=", "roc_val", "\n", "torch", ".", "save", "(", "self", ".", "model", ",", "f\"{self.model_save_folder}model_{self.args.network_type}.pt\"", ")", "\n", "no_improvement", "=", "0", "\n", "", "else", ":", "\n", "                    ", "no_improvement", "=", "no_improvement", "+", "1", "\n", "if", "no_improvement", "==", "self", ".", "args", ".", "early_stopping", ":", "\n", "                        ", "break", "\n", "\n", "", "", "print", "(", "'epoch: {:04d}'", ".", "format", "(", "epoch", "+", "1", ")", ",", "\n", "'loss_train: {:.4f}'", ".", "format", "(", "loss", ".", "item", "(", ")", ")", ",", "\n", "'auroc_train: {:.4f}'", ".", "format", "(", "roc_train", ")", ",", "\n", "'loss_val: {:.4f}'", ".", "format", "(", "loss_val", ".", "item", "(", ")", ")", ",", "\n", "'auroc_val: {:.4f}'", ".", "format", "(", "roc_val", ")", ",", "\n", "'auprc_val: {:.4f}'", ".", "format", "(", "prc_val", ")", ",", "\n", "'f1_val: {:.4f}'", ".", "format", "(", "f1_val", ")", ",", "\n", "'time: {:.4f}s'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "t", ")", ")", "\n", "\n", "", "", "print", "(", "\"Optimization Finished!\"", ")", "\n", "print", "(", "\"Total time elapsed: {:.4f}s\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "t_total", ")", ")", "\n", "\n", "# Testing", "\n", "self", ".", "model", "=", "torch", ".", "load", "(", "f\"{self.model_save_folder}model_{self.args.network_type}.pt\"", ")", "\n", "prediction", ",", "auroc_test", ",", "prc_test", ",", "f1_test", ",", "loss_test", "=", "self", ".", "score", "(", "self", ".", "test_loader", ")", "\n", "print", "(", "'loss_test: {:.4f}'", ".", "format", "(", "loss_test", ".", "item", "(", ")", ")", ",", "'auroc_test: {:.4f}'", ".", "format", "(", "auroc_test", ")", ",", "\n", "'auprc_test: {:.4f}'", ".", "format", "(", "prc_test", ")", ",", "'f1_test: {:.4f}'", ".", "format", "(", "f1_test", ")", ")", "\n", "\n", "# saving the results", "\n", "results", "=", "{", "\"auroc\"", ":", "auroc_test", ",", "\"pr\"", ":", "prc_test", ",", "\"f1\"", ":", "f1_test", "}", "\n", "if", "self", ".", "args", ".", "ratio", ":", "\n", "            ", "save_folder", "=", "f\"results/{self.args.model}/network_{self.args.network_type}/{self.args.train_percent}/order_{len(self.args.layers_1)}/\"", "\n", "", "else", ":", "\n", "            ", "save_folder", "=", "f\"results/{self.args.model}/network_{self.args.network_type}/order_{len(self.args.layers_1)}/\"", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "save_folder", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "save_folder", ")", "\n", "\n", "", "file_name", "=", "f\"{save_folder}input_{self.args.input_type}_fold{self.args.fold_id}_lr{self.args.learning_rate}\"", "f\"_bs{self.args.batch_size}_hidden1_{self.args.hidden1}_hidden2_{self.args.hidden2}_dropout{self.args.dropout}.pt\"", "\n", "torch", ".", "save", "(", "results", ",", "file_name", ")", "\n", "\n", "# saving embeddings", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "model", ".", "eval", "(", ")", "\n", "latent_features", "=", "self", ".", "model", ".", "embed", "(", "self", ".", "propagation_matrix", ",", "self", ".", "features", ")", "\n", "embeddings", "=", "{", "\"idxmap\"", ":", "self", ".", "idx_map", ",", "\"emb\"", ":", "latent_features", "}", "\n", "\n", "", "if", "self", ".", "args", ".", "ratio", ":", "\n", "            ", "emb_folder", "=", "f\"embeddings/{self.args.model}/network_{self.args.network_type}/{self.args.train_percent}/order_{len(self.args.layers_1)}/\"", "\n", "", "else", ":", "\n", "            ", "emb_folder", "=", "f\"embeddings/{self.args.model}/network_{self.args.network_type}/order_{len(self.args.layers_1)}/\"", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "emb_folder", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "emb_folder", ")", "\n", "\n", "", "file_name", "=", "f\"{emb_folder}input_{self.args.input_type}_fold{self.args.fold_id}_lr{self.args.learning_rate}\"", "f\"_bs{self.args.batch_size}_hidden1_{self.args.hidden1}_hidden2_{self.args.hidden2}_dropout{self.args.dropout}.pt\"", "\n", "torch", ".", "save", "(", "embeddings", ",", "file_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kckishan_HOGCN-LP.None.trainer.Trainer.score": [[174, 200], ["trainer.Trainer.model.eval", "enumerate", "label.to.to.to", "trainer.Trainer.model", "torch.nn.functional.binary_cross_entropy_with_logits", "label.to.to.to().numpy", "numpy.asarray", "sklearn.metrics.roc_auc_score", "sklearn.metrics.average_precision_score", "sklearn.metrics.f1_score", "output.squeeze", "label.to.to.float().squeeze", "label.to.to().numpy.flatten().tolist", "output.flatten().tolist", "label.to.to.to", "label.to.to.float", "label.to.to().numpy.flatten", "output.flatten", "numpy.asarray"], "methods", ["None"], ["", "def", "score", "(", "self", ",", "data_loader", ")", ":", "\n", "        ", "\"\"\"\n        Scoring a neural network.\n        :param indices: Indices of nodes involved in accuracy calculation.\n        :return predictions: Probability for link existence\n                roc_score: Area under ROC curve\n                pr_score: Area under PR curve\n                f1_score: F1 score\n        \"\"\"", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "y_pred", "=", "[", "]", "\n", "y_label", "=", "[", "]", "\n", "\n", "for", "i", ",", "(", "label", ",", "pairs", ")", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "            ", "label", "=", "label", ".", "to", "(", "self", ".", "device", ")", "\n", "output", ",", "latent_feat", "=", "self", ".", "model", "(", "self", ".", "propagation_matrix", ",", "self", ".", "features", ",", "pairs", ")", "\n", "\n", "loss", "=", "torch", ".", "nn", ".", "functional", ".", "binary_cross_entropy_with_logits", "(", "output", ".", "squeeze", "(", ")", ",", "label", ".", "float", "(", ")", ".", "squeeze", "(", ")", ")", "\n", "\n", "label_ids", "=", "label", ".", "to", "(", "'cpu'", ")", ".", "numpy", "(", ")", "\n", "y_label", "=", "y_label", "+", "label_ids", ".", "flatten", "(", ")", ".", "tolist", "(", ")", "\n", "y_pred", "=", "y_pred", "+", "output", ".", "flatten", "(", ")", ".", "tolist", "(", ")", "\n", "outputs", "=", "np", ".", "asarray", "(", "[", "1", "if", "i", "else", "0", "for", "i", "in", "(", "np", ".", "asarray", "(", "y_pred", ")", ">=", "0.5", ")", "]", ")", "\n", "\n", "", "return", "y_pred", ",", "roc_auc_score", "(", "y_label", ",", "y_pred", ")", ",", "average_precision_score", "(", "y_label", ",", "y_pred", ")", ",", "f1_score", "(", "y_label", ",", "\n", "outputs", ")", ",", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kckishan_HOGCN-LP.None.layers.SparseNGCNLayer.__init__": [[13, 22], ["super().__init__", "layers.SparseNGCNLayer.define_parameters", "layers.SparseNGCNLayer.init_parameters"], "methods", ["home.repos.pwc.inspect_result.kckishan_HOGCN-LP.None.utils.Data_GDI.__init__", "home.repos.pwc.inspect_result.kckishan_HOGCN-LP.None.layers.DenseNGCNLayer.define_parameters", "home.repos.pwc.inspect_result.kckishan_HOGCN-LP.None.layers.DenseNGCNLayer.init_parameters"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "iterations", ",", "dropout_rate", ",", "device", ")", ":", "\n", "        ", "super", "(", "SparseNGCNLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "iterations", "=", "iterations", "\n", "self", ".", "dropout_rate", "=", "dropout_rate", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "define_parameters", "(", ")", "\n", "self", ".", "init_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kckishan_HOGCN-LP.None.layers.SparseNGCNLayer.define_parameters": [[23, 29], ["torch.nn.Parameter().to", "torch.nn.Parameter().to", "torch.nn.Parameter", "torch.nn.Parameter", "torch.Tensor", "torch.Tensor"], "methods", ["None"], ["", "def", "define_parameters", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Defining the weight matrices.\n        \"\"\"", "\n", "self", ".", "weight_matrix", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "self", ".", "in_channels", ",", "self", ".", "out_channels", ")", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "bias", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "1", ",", "self", ".", "out_channels", ")", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kckishan_HOGCN-LP.None.layers.SparseNGCNLayer.init_parameters": [[30, 36], ["torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_"], "methods", ["None"], ["", "def", "init_parameters", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Initializing weights.\n        \"\"\"", "\n", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "weight_matrix", ")", "\n", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kckishan_HOGCN-LP.None.layers.SparseNGCNLayer.forward": [[37, 63], ["torch.max", "torch_sparse.spmm", "torch.nn.functional.dropout", "torch.nn.functional.relu", "range", "torch_sparse.spmm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "normalized_adjacency_matrix", ",", "features", ")", ":", "\n", "        ", "\"\"\"\n        Doing a forward pass.\n        :param normalized_adjacency_matrix: Normalized adjacency matrix.\n        :param features: Feature matrix.\n        :return base_features: Convolved features.\n        \"\"\"", "\n", "feature_count", ",", "_", "=", "torch", ".", "max", "(", "features", "[", "\"indices\"", "]", ",", "dim", "=", "1", ")", "\n", "feature_count", "=", "feature_count", "+", "1", "\n", "base_features", "=", "spmm", "(", "features", "[", "\"indices\"", "]", ",", "features", "[", "\"values\"", "]", ",", "feature_count", "[", "0", "]", ",", "\n", "feature_count", "[", "1", "]", ",", "self", ".", "weight_matrix", ")", "\n", "\n", "base_features", "=", "base_features", "+", "self", ".", "bias", "\n", "\n", "base_features", "=", "torch", ".", "nn", ".", "functional", ".", "dropout", "(", "base_features", ",", "\n", "p", "=", "self", ".", "dropout_rate", ",", "\n", "training", "=", "self", ".", "training", ")", "\n", "\n", "base_features", "=", "torch", ".", "nn", ".", "functional", ".", "relu", "(", "base_features", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "iterations", "-", "1", ")", ":", "\n", "            ", "base_features", "=", "spmm", "(", "normalized_adjacency_matrix", "[", "\"indices\"", "]", ",", "\n", "normalized_adjacency_matrix", "[", "\"values\"", "]", ",", "\n", "base_features", ".", "shape", "[", "0", "]", ",", "\n", "base_features", ".", "shape", "[", "0", "]", ",", "\n", "base_features", ")", "\n", "", "return", "base_features", "\n", "\n"]], "home.repos.pwc.inspect_result.kckishan_HOGCN-LP.None.layers.SparseNGCNLayer.__repr__": [[64, 68], ["str", "str"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "' ('", "+", "str", "(", "self", ".", "in_channels", ")", "+", "' -> '", "+", "str", "(", "self", ".", "out_channels", ")", "+", "')'", "\n", "\n"]], "home.repos.pwc.inspect_result.kckishan_HOGCN-LP.None.layers.DenseNGCNLayer.__init__": [[77, 86], ["super().__init__", "layers.DenseNGCNLayer.define_parameters", "layers.DenseNGCNLayer.init_parameters"], "methods", ["home.repos.pwc.inspect_result.kckishan_HOGCN-LP.None.utils.Data_GDI.__init__", "home.repos.pwc.inspect_result.kckishan_HOGCN-LP.None.layers.DenseNGCNLayer.define_parameters", "home.repos.pwc.inspect_result.kckishan_HOGCN-LP.None.layers.DenseNGCNLayer.init_parameters"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "iterations", ",", "dropout_rate", ",", "device", ")", ":", "\n", "        ", "super", "(", "DenseNGCNLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "iterations", "=", "iterations", "\n", "self", ".", "dropout_rate", "=", "dropout_rate", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "define_parameters", "(", ")", "\n", "self", ".", "init_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kckishan_HOGCN-LP.None.layers.DenseNGCNLayer.define_parameters": [[87, 93], ["torch.nn.Parameter().to", "torch.nn.Parameter().to", "torch.nn.Parameter", "torch.nn.Parameter", "torch.Tensor", "torch.Tensor"], "methods", ["None"], ["", "def", "define_parameters", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Defining the weight matrices.\n        \"\"\"", "\n", "self", ".", "weight_matrix", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "self", ".", "in_channels", ",", "self", ".", "out_channels", ")", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "bias", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "1", ",", "self", ".", "out_channels", ")", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kckishan_HOGCN-LP.None.layers.DenseNGCNLayer.init_parameters": [[94, 100], ["torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_"], "methods", ["None"], ["", "def", "init_parameters", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Initializing weights.\n        \"\"\"", "\n", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "weight_matrix", ")", "\n", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kckishan_HOGCN-LP.None.layers.DenseNGCNLayer.forward": [[101, 120], ["torch.mm", "torch.nn.functional.dropout", "range", "torch_sparse.spmm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "normalized_adjacency_matrix", ",", "features", ")", ":", "\n", "        ", "\"\"\"\n        Doing a forward pass.\n        :param normalized_adjacency_matrix: Normalized adjacency matrix.\n        :param features: Feature matrix.\n        :return base_features: Convolved features.\n        \"\"\"", "\n", "base_features", "=", "torch", ".", "mm", "(", "features", ",", "self", ".", "weight_matrix", ")", "\n", "base_features", "=", "torch", ".", "nn", ".", "functional", ".", "dropout", "(", "base_features", ",", "\n", "p", "=", "self", ".", "dropout_rate", ",", "\n", "training", "=", "self", ".", "training", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "iterations", "-", "1", ")", ":", "\n", "            ", "base_features", "=", "spmm", "(", "normalized_adjacency_matrix", "[", "\"indices\"", "]", ",", "\n", "normalized_adjacency_matrix", "[", "\"values\"", "]", ",", "\n", "base_features", ".", "shape", "[", "0", "]", ",", "\n", "base_features", ".", "shape", "[", "0", "]", ",", "\n", "base_features", ")", "\n", "", "base_features", "=", "base_features", "+", "self", ".", "bias", "\n", "return", "base_features", "\n", "\n"]], "home.repos.pwc.inspect_result.kckishan_HOGCN-LP.None.layers.DenseNGCNLayer.__repr__": [[121, 125], ["str", "str"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "' ('", "+", "str", "(", "self", ".", "in_channels", ")", "+", "' -> '", "+", "str", "(", "self", ".", "out_channels", ")", "+", "')'", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kckishan_HOGCN-LP.None.param_parser.parameter_parser": [[6, 55], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.set_defaults", "argparse.ArgumentParser.set_defaults", "argparse.ArgumentParser.parse_args", "argparse.ArgumentParser.parse_known_args", "argparse.ArgumentParser.parse_known_args", "argparse.ArgumentParser.parse_known_args", "argparse.ArgumentParser.parse_known_args"], "function", ["None"], ["def", "parameter_parser", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"Run Higher Order GCN\"", ")", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "default", "=", "\"HOGCN\"", ")", "\n", "parser", ".", "add_argument", "(", "'--cuda'", ",", "action", "=", "'store_false'", ",", "default", "=", "True", ",", "\n", "help", "=", "'Disables CUDA training.'", ")", "\n", "parser", ".", "add_argument", "(", "'--fastmode'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'Validate during training pass.'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "42", ",", "\n", "help", "=", "'Random seed.'", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "50", ",", "\n", "help", "=", "'Number of epochs to train.'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "256", ",", "\n", "help", "=", "'batch_size'", ")", "\n", "parser", ".", "add_argument", "(", "'--hidden1'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "\n", "help", "=", "'Number of hidden units for encoding layer 1.'", ")", "\n", "parser", ".", "add_argument", "(", "'--hidden2'", ",", "type", "=", "int", ",", "default", "=", "32", ",", "\n", "help", "=", "'Number of hidden units for encoding layer 2.'", ")", "\n", "parser", ".", "add_argument", "(", "'--dropout'", ",", "type", "=", "float", ",", "default", "=", "0.1", ",", "\n", "help", "=", "'Dropout rate (1 - keep probability).'", ")", "\n", "parser", ".", "add_argument", "(", "'--network_type'", ",", "nargs", "=", "'?'", ",", "default", "=", "\"DDI\"", ",", "choices", "=", "[", "\"DDI\"", ",", "\"DTI\"", ",", "\"PPI\"", ",", "\"GDI\"", "]", ",", "\n", "help", "=", "'choose from DDI, PPI, DTI, GDI'", ")", "\n", "parser", ".", "add_argument", "(", "'--input_type'", ",", "nargs", "=", "'?'", ",", "default", "=", "\"node2vec\"", ",", "choices", "=", "[", "\"one_hot\"", ",", "\"node2vec\"", "]", ",", "\n", "help", "=", "'choose from one_hot, node2vec'", ")", "\n", "parser", ".", "add_argument", "(", "\"--early-stopping\"", ",", "type", "=", "int", ",", "default", "=", "10", ",", "\n", "help", "=", "\"Number of early stopping rounds. Default is 10.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--learning-rate\"", ",", "type", "=", "float", ",", "default", "=", "5e-4", ",", "\n", "help", "=", "\"Learning rate. Default is 5e-4.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--layers-1\"", ",", "nargs", "=", "\"+\"", ",", "type", "=", "int", ",", "\n", "help", "=", "\"Layer dimensions separated by space (top). E.g. 200 20.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--layers-2\"", ",", "nargs", "=", "\"+\"", ",", "type", "=", "int", ",", "\n", "help", "=", "\"Layer dimensions separated by space (bottom). E.g. 200 200.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--fold_id\"", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "\"Identifier to preprocessed splits. Default is 1.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--order\"", ",", "type", "=", "int", ",", "default", "=", "3", ",", "\n", "help", "=", "\"Order of neighborhood (if order = 3, P ={0, 1, 2, 3}).  Default is 3.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--dimension\"", ",", "type", "=", "int", ",", "default", "=", "32", ",", "\n", "help", "=", "\"Dimension for each adjacency. Default is 32.\"", ")", "\n", "\n", "# parameter for training with different ratio", "\n", "parser", ".", "add_argument", "(", "'--ratio'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'Train with the missing edges'", ")", "\n", "parser", ".", "add_argument", "(", "\"--train_percent\"", ",", "type", "=", "int", ",", "default", "=", "10", ",", "\n", "help", "=", "\"percentage of training edges. Default is 10.\"", ")", "\n", "\n", "# 1 is added to include k = 0", "\n", "parser", ".", "set_defaults", "(", "layers_1", "=", "[", "parser", ".", "parse_known_args", "(", ")", "[", "0", "]", ".", "dimension", "]", "*", "(", "parser", ".", "parse_known_args", "(", ")", "[", "0", "]", ".", "order", "+", "1", ")", ")", "\n", "parser", ".", "set_defaults", "(", "layers_2", "=", "[", "parser", ".", "parse_known_args", "(", ")", "[", "0", "]", ".", "dimension", "]", "*", "(", "parser", ".", "parse_known_args", "(", ")", "[", "0", "]", ".", "order", "+", "1", ")", ")", "\n", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.kckishan_HOGCN-LP.None.utils.Data_DDI.__init__": [[84, 89], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "idx_map", ",", "labels", ",", "df", ")", ":", "\n", "        ", "'Initialization'", "\n", "self", ".", "labels", "=", "labels", "\n", "self", ".", "idx_map", "=", "idx_map", "\n", "self", ".", "df", "=", "df", "\n", "\n"]], "home.repos.pwc.inspect_result.kckishan_HOGCN-LP.None.utils.Data_DDI.__len__": [[90, 93], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "'Denotes the total number of samples'", "\n", "return", "len", "(", "self", ".", "df", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kckishan_HOGCN-LP.None.utils.Data_DDI.__getitem__": [[94, 102], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "'Generates one sample of data'", "\n", "# Select sample", "\n", "# Load data and get label", "\n", "idx1", "=", "self", ".", "idx_map", "[", "self", ".", "df", ".", "iloc", "[", "index", "]", ".", "Drug1_ID", "]", "\n", "idx2", "=", "self", ".", "idx_map", "[", "self", ".", "df", ".", "iloc", "[", "index", "]", ".", "Drug2_ID", "]", "\n", "y", "=", "self", ".", "labels", "[", "index", "]", "\n", "return", "y", ",", "(", "idx1", ",", "idx2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kckishan_HOGCN-LP.None.utils.Data_PPI.__init__": [[106, 111], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "idx_map", ",", "labels", ",", "df", ")", ":", "\n", "        ", "'Initialization'", "\n", "self", ".", "labels", "=", "labels", "\n", "self", ".", "idx_map", "=", "idx_map", "\n", "self", ".", "df", "=", "df", "\n", "\n"]], "home.repos.pwc.inspect_result.kckishan_HOGCN-LP.None.utils.Data_PPI.__len__": [[112, 115], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "'Denotes the total number of samples'", "\n", "return", "len", "(", "self", ".", "df", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kckishan_HOGCN-LP.None.utils.Data_PPI.__getitem__": [[116, 124], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "'Generates one sample of data'", "\n", "# Select sample", "\n", "# Load data and get label", "\n", "idx1", "=", "self", ".", "idx_map", "[", "self", ".", "df", ".", "iloc", "[", "index", "]", ".", "Protein1_ID", "]", "\n", "idx2", "=", "self", ".", "idx_map", "[", "self", ".", "df", ".", "iloc", "[", "index", "]", ".", "Protein2_ID", "]", "\n", "y", "=", "self", ".", "labels", "[", "index", "]", "\n", "return", "y", ",", "(", "idx1", ",", "idx2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kckishan_HOGCN-LP.None.utils.Data_DTI.__init__": [[128, 133], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "idx_map", ",", "labels", ",", "df", ")", ":", "\n", "        ", "'Initialization'", "\n", "self", ".", "labels", "=", "labels", "\n", "self", ".", "idx_map", "=", "idx_map", "\n", "self", ".", "df", "=", "df", "\n", "\n"]], "home.repos.pwc.inspect_result.kckishan_HOGCN-LP.None.utils.Data_DTI.__len__": [[134, 137], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "'Denotes the total number of samples'", "\n", "return", "len", "(", "self", ".", "df", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kckishan_HOGCN-LP.None.utils.Data_DTI.__getitem__": [[138, 146], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "'Generates one sample of data'", "\n", "# Select sample", "\n", "# Load data and get label", "\n", "idx1", "=", "self", ".", "idx_map", "[", "self", ".", "df", ".", "iloc", "[", "index", "]", ".", "Drug_ID", "]", "\n", "idx2", "=", "self", ".", "idx_map", "[", "self", ".", "df", ".", "iloc", "[", "index", "]", ".", "Protein_ID", "]", "\n", "y", "=", "self", ".", "labels", "[", "index", "]", "\n", "return", "y", ",", "(", "idx1", ",", "idx2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kckishan_HOGCN-LP.None.utils.Data_GDI.__init__": [[150, 155], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "idx_map", ",", "labels", ",", "df", ")", ":", "\n", "        ", "'Initialization'", "\n", "self", ".", "labels", "=", "labels", "\n", "self", ".", "idx_map", "=", "idx_map", "\n", "self", ".", "df", "=", "df", "\n", "\n"]], "home.repos.pwc.inspect_result.kckishan_HOGCN-LP.None.utils.Data_GDI.__len__": [[156, 159], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "'Denotes the total number of samples'", "\n", "return", "len", "(", "self", ".", "df", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kckishan_HOGCN-LP.None.utils.Data_GDI.__getitem__": [[160, 168], ["str"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "'Generates one sample of data'", "\n", "# Select sample", "\n", "# Load data and get label", "\n", "idx1", "=", "self", ".", "idx_map", "[", "str", "(", "self", ".", "df", ".", "iloc", "[", "index", "]", ".", "Gene_ID", ")", "]", "\n", "idx2", "=", "self", ".", "idx_map", "[", "self", ".", "df", ".", "iloc", "[", "index", "]", ".", "Disease_ID", "]", "\n", "y", "=", "self", ".", "labels", "[", "index", "]", "\n", "return", "y", ",", "(", "idx1", ",", "idx2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kckishan_HOGCN-LP.None.utils.tab_printer": [[10, 21], ["vars", "sorted", "texttable.Texttable", "texttable.Texttable.add_rows", "texttable.Texttable.add_rows", "print", "vars.keys", "texttable.Texttable.draw", "k.replace().capitalize", "k.replace"], "function", ["None"], ["def", "tab_printer", "(", "args", ")", ":", "\n", "    ", "\"\"\"\n    Function to print the logs in a nice tabular format.\n    :param args: Parameters used for the model.\n    \"\"\"", "\n", "args", "=", "vars", "(", "args", ")", "\n", "keys", "=", "sorted", "(", "args", ".", "keys", "(", ")", ")", "\n", "t", "=", "Texttable", "(", ")", "\n", "t", ".", "add_rows", "(", "[", "[", "\"Parameter\"", ",", "\"Value\"", "]", "]", ")", "\n", "t", ".", "add_rows", "(", "[", "[", "k", ".", "replace", "(", "\"_\"", ",", "\" \"", ")", ".", "capitalize", "(", ")", ",", "args", "[", "k", "]", "]", "for", "k", "in", "keys", "]", ")", "\n", "print", "(", "t", ".", "draw", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kckishan_HOGCN-LP.None.utils.normalize": [[23, 31], ["numpy.array", "numpy.power().flatten", "scipy.diags", "sp.diags.dot", "r_mat_inv.dot.sum", "numpy.power", "numpy.isinf"], "function", ["None"], ["", "def", "normalize", "(", "mx", ")", ":", "\n", "    ", "\"\"\"Row-normalize sparse matrix\"\"\"", "\n", "rowsum", "=", "np", ".", "array", "(", "mx", ".", "sum", "(", "1", ")", ")", "\n", "r_inv", "=", "np", ".", "power", "(", "rowsum", ",", "-", "1", ")", ".", "flatten", "(", ")", "\n", "r_inv", "[", "np", ".", "isinf", "(", "r_inv", ")", "]", "=", "0.", "\n", "r_mat_inv", "=", "sp", ".", "diags", "(", "r_inv", ")", "\n", "mx", "=", "r_mat_inv", ".", "dot", "(", "mx", ")", "\n", "return", "mx", "\n", "\n"]], "home.repos.pwc.inspect_result.kckishan_HOGCN-LP.None.utils.normalize_adjacency_matrix": [[32, 45], ["[].tolist", "scipy.diags", "D.power.power", "D.power.dot().dot", "D.power.dot", "A_tilde.sum"], "function", ["None"], ["", "def", "normalize_adjacency_matrix", "(", "A", ",", "I", ")", ":", "\n", "    ", "\"\"\"\n    Creating a normalized adjacency matrix with self loops.\n    :param A: Sparse adjacency matrix.\n    :param I: Identity matrix.\n    :return A_tile_hat: Normalized adjacency matrix.\n    \"\"\"", "\n", "A_tilde", "=", "A", "+", "2", "*", "I", "\n", "degrees", "=", "A_tilde", ".", "sum", "(", "axis", "=", "0", ")", "[", "0", "]", ".", "tolist", "(", ")", "\n", "D", "=", "sp", ".", "diags", "(", "degrees", ",", "[", "0", "]", ")", "\n", "D", "=", "D", ".", "power", "(", "-", "0.5", ")", "\n", "A_tilde_hat", "=", "D", ".", "dot", "(", "A_tilde", ")", ".", "dot", "(", "D", ")", "\n", "return", "A_tilde_hat", "\n", "\n"]], "home.repos.pwc.inspect_result.kckishan_HOGCN-LP.None.utils.create_propagator_matrix": [[46, 60], ["scipy.eye", "utils.normalize_adjacency_matrix", "dict", "scipy.coo_matrix", "numpy.concatenate", "torch.LongTensor().to", "torch.FloatTensor().to", "sp.coo_matrix.row.reshape", "sp.coo_matrix.col.reshape", "torch.LongTensor", "torch.FloatTensor"], "function", ["home.repos.pwc.inspect_result.kckishan_HOGCN-LP.None.utils.normalize_adjacency_matrix"], ["", "def", "create_propagator_matrix", "(", "A", ",", "device", ")", ":", "\n", "    ", "\"\"\"\n    Creating a propagator matrix.\n    :param graph: NetworkX graph.\n    :return propagator: Dictionary of matrix indices and values.\n    \"\"\"", "\n", "I", "=", "sp", ".", "eye", "(", "A", ".", "shape", "[", "0", "]", ")", "\n", "A_tilde_hat", "=", "normalize_adjacency_matrix", "(", "A", ",", "I", ")", "\n", "propagator", "=", "dict", "(", ")", "\n", "A_tilde_hat", "=", "sp", ".", "coo_matrix", "(", "A_tilde_hat", ")", "\n", "ind", "=", "np", ".", "concatenate", "(", "[", "A_tilde_hat", ".", "row", ".", "reshape", "(", "-", "1", ",", "1", ")", ",", "A_tilde_hat", ".", "col", ".", "reshape", "(", "-", "1", ",", "1", ")", "]", ",", "axis", "=", "1", ")", "\n", "propagator", "[", "\"indices\"", "]", "=", "torch", ".", "LongTensor", "(", "ind", ".", "T", ")", ".", "to", "(", "device", ")", "\n", "propagator", "[", "\"values\"", "]", "=", "torch", ".", "FloatTensor", "(", "A_tilde_hat", ".", "data", ")", ".", "to", "(", "device", ")", "\n", "return", "propagator", "\n", "\n"]], "home.repos.pwc.inspect_result.kckishan_HOGCN-LP.None.utils.features_to_sparse": [[61, 80], ["sp.coo_matrix.nonzero", "scipy.coo_matrix", "dict", "numpy.concatenate", "torch.LongTensor().to", "torch.FloatTensor().to", "len", "sp.coo_matrix.row.reshape", "sp.coo_matrix.col.reshape", "torch.LongTensor", "torch.FloatTensor"], "function", ["None"], ["", "def", "features_to_sparse", "(", "features", ",", "device", ")", ":", "\n", "    ", "\"\"\"\n    Reading the feature matrix stored as JSON from the disk.\n    :param path: Path to the JSON file.\n    :return out_features: Dict with index and value tensor.\n    \"\"\"", "\n", "index_1", ",", "index_2", "=", "features", ".", "nonzero", "(", ")", "\n", "values", "=", "[", "1.0", "]", "*", "len", "(", "index_1", ")", "\n", "node_count", "=", "features", ".", "shape", "[", "0", "]", "\n", "feature_count", "=", "features", ".", "shape", "[", "1", "]", "\n", "features", "=", "sp", ".", "coo_matrix", "(", "(", "values", ",", "(", "index_1", ",", "index_2", ")", ")", ",", "\n", "shape", "=", "(", "node_count", ",", "feature_count", ")", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "out_features", "=", "dict", "(", ")", "\n", "ind", "=", "np", ".", "concatenate", "(", "[", "features", ".", "row", ".", "reshape", "(", "-", "1", ",", "1", ")", ",", "features", ".", "col", ".", "reshape", "(", "-", "1", ",", "1", ")", "]", ",", "axis", "=", "1", ")", "\n", "out_features", "[", "\"indices\"", "]", "=", "torch", ".", "LongTensor", "(", "ind", ".", "T", ")", ".", "to", "(", "device", ")", "\n", "out_features", "[", "\"values\"", "]", "=", "torch", ".", "FloatTensor", "(", "features", ".", "data", ")", ".", "to", "(", "device", ")", "\n", "out_features", "[", "\"dimensions\"", "]", "=", "features", ".", "shape", "\n", "return", "out_features", "\n", "\n"]], "home.repos.pwc.inspect_result.kckishan_HOGCN-LP.None.utils.load_data_link_prediction_DDI": [[170, 208], ["print", "pandas.read_csv", "pandas.read_csv", "df_drug_list[].tolist", "numpy.array", "utils.features_to_sparse", "numpy.array().reshape", "scipy.coo_matrix", "utils.create_propagator_matrix", "pandas.read_csv().sort_values().set_index", "emb.reindex.reindex", "numpy.setdiff1d", "utils.normalize", "create_propagator_matrix.multiply", "enumerate", "numpy.arange", "emb.reindex.sort_index", "numpy.eye", "numpy.array", "numpy.ones", "create_propagator_matrix.T.multiply", "pandas.read_csv().sort_values", "numpy.sum", "list", "len", "len", "map", "pandas.read_csv", "edges_unordered.flatten"], "function", ["home.repos.pwc.inspect_result.kckishan_HOGCN-LP.None.utils.features_to_sparse", "home.repos.pwc.inspect_result.kckishan_HOGCN-LP.None.utils.create_propagator_matrix", "home.repos.pwc.inspect_result.kckishan_HOGCN-LP.None.utils.normalize"], ["", "", "def", "load_data_link_prediction_DDI", "(", "path", ",", "network_type", ",", "inp", ",", "device", ")", ":", "\n", "    ", "print", "(", "'Loading DDI dataset...'", ")", "\n", "path_up", "=", "f'./data/{network_type}'", "\n", "df_data", "=", "pd", ".", "read_csv", "(", "path", "+", "'/train.csv'", ")", "\n", "df_drug_list", "=", "pd", ".", "read_csv", "(", "path_up", "+", "'/ddi_unique_smiles.csv'", ")", "\n", "\n", "idx", "=", "df_drug_list", "[", "'Drug1_ID'", "]", ".", "tolist", "(", ")", "\n", "idx", "=", "np", ".", "array", "(", "idx", ")", "\n", "idx_map", "=", "{", "j", ":", "i", "for", "i", ",", "j", "in", "enumerate", "(", "idx", ")", "}", "\n", "\n", "df_data_t", "=", "df_data", "[", "df_data", ".", "label", "==", "1", "]", "\n", "edges_unordered", "=", "df_data_t", "[", "[", "'Drug1_ID'", ",", "'Drug2_ID'", "]", "]", ".", "values", "\n", "\n", "if", "inp", "==", "'node2vec'", ":", "\n", "        ", "emb", "=", "pd", ".", "read_csv", "(", "path", "+", "'/ddi.emb'", ",", "skiprows", "=", "1", ",", "header", "=", "None", ",", "sep", "=", "' '", ")", ".", "sort_values", "(", "by", "=", "[", "0", "]", ")", ".", "set_index", "(", "[", "0", "]", ")", "\n", "new_index", "=", "[", "idx_map", "[", "idx", "]", "for", "idx", "in", "emb", ".", "index", "]", "\n", "emb", "=", "emb", ".", "reindex", "(", "new_index", ")", "\n", "\n", "for", "i", "in", "np", ".", "setdiff1d", "(", "np", ".", "arange", "(", "1514", ")", ",", "emb", ".", "index", ".", "values", ")", ":", "\n", "            ", "emb", ".", "loc", "[", "i", "]", "=", "(", "np", ".", "sum", "(", "emb", ".", "values", ",", "axis", "=", "0", ")", "/", "emb", ".", "values", ".", "shape", "[", "0", "]", ")", "\n", "\n", "", "features", "=", "emb", ".", "sort_index", "(", ")", ".", "values", "\n", "features", "=", "normalize", "(", "features", ")", "\n", "", "elif", "inp", "==", "'one_hot'", ":", "\n", "        ", "features", "=", "np", ".", "eye", "(", "1514", ")", "\n", "\n", "", "features", "=", "features_to_sparse", "(", "features", ",", "device", ")", "\n", "\n", "edges", "=", "np", ".", "array", "(", "list", "(", "map", "(", "idx_map", ".", "get", ",", "edges_unordered", ".", "flatten", "(", ")", ")", ")", ")", ".", "reshape", "(", "edges_unordered", ".", "shape", ")", "\n", "adj", "=", "sp", ".", "coo_matrix", "(", "(", "np", ".", "ones", "(", "edges", ".", "shape", "[", "0", "]", ")", ",", "(", "edges", "[", ":", ",", "0", "]", ",", "edges", "[", ":", ",", "1", "]", ")", ")", ",", "\n", "shape", "=", "(", "len", "(", "idx", ")", ",", "len", "(", "idx", ")", ")", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "# build symmetric adjacency matrix", "\n", "adj", "=", "adj", "+", "adj", ".", "T", ".", "multiply", "(", "adj", ".", "T", ">", "adj", ")", "-", "adj", ".", "multiply", "(", "adj", ".", "T", ">", "adj", ")", "\n", "adj", "=", "create_propagator_matrix", "(", "adj", ",", "device", ")", "\n", "\n", "return", "adj", ",", "features", ",", "idx_map", "\n", "\n"]], "home.repos.pwc.inspect_result.kckishan_HOGCN-LP.None.utils.load_data_link_prediction_PPI": [[210, 248], ["print", "pandas.read_csv", "pandas.read_csv", "df_drug_list[].tolist", "numpy.array", "utils.features_to_sparse", "numpy.array().reshape", "scipy.coo_matrix", "utils.create_propagator_matrix", "pandas.read_csv().sort_values().set_index", "emb.reindex.reindex", "numpy.setdiff1d", "utils.normalize", "create_propagator_matrix.multiply", "enumerate", "numpy.arange", "emb.reindex.sort_index", "numpy.eye", "numpy.array", "numpy.ones", "create_propagator_matrix.T.multiply", "pandas.read_csv().sort_values", "numpy.sum", "list", "len", "len", "map", "pandas.read_csv", "edges_unordered.flatten"], "function", ["home.repos.pwc.inspect_result.kckishan_HOGCN-LP.None.utils.features_to_sparse", "home.repos.pwc.inspect_result.kckishan_HOGCN-LP.None.utils.create_propagator_matrix", "home.repos.pwc.inspect_result.kckishan_HOGCN-LP.None.utils.normalize"], ["", "def", "load_data_link_prediction_PPI", "(", "path", ",", "network_type", ",", "inp", ",", "device", ")", ":", "\n", "    ", "print", "(", "'Loading PPI dataset...'", ")", "\n", "path_up", "=", "f'./data/{network_type}'", "\n", "df_data", "=", "pd", ".", "read_csv", "(", "path", "+", "'/train.csv'", ")", "\n", "df_drug_list", "=", "pd", ".", "read_csv", "(", "path_up", "+", "'/protein_list.csv'", ")", "\n", "\n", "idx", "=", "df_drug_list", "[", "'Protein1_ID'", "]", ".", "tolist", "(", ")", "\n", "idx", "=", "np", ".", "array", "(", "idx", ")", "\n", "idx_map", "=", "{", "j", ":", "i", "for", "i", ",", "j", "in", "enumerate", "(", "idx", ")", "}", "\n", "\n", "df_data_t", "=", "df_data", "[", "df_data", ".", "label", "==", "1", "]", "\n", "edges_unordered", "=", "df_data_t", "[", "[", "'Protein1_ID'", ",", "'Protein2_ID'", "]", "]", ".", "values", "\n", "\n", "if", "inp", "==", "'node2vec'", ":", "\n", "        ", "emb", "=", "pd", ".", "read_csv", "(", "path", "+", "'/ppi.emb'", ",", "skiprows", "=", "1", ",", "header", "=", "None", ",", "sep", "=", "' '", ")", ".", "sort_values", "(", "by", "=", "[", "0", "]", ")", ".", "set_index", "(", "[", "0", "]", ")", "\n", "new_index", "=", "[", "idx_map", "[", "idx", "]", "for", "idx", "in", "emb", ".", "index", "]", "\n", "emb", "=", "emb", ".", "reindex", "(", "new_index", ")", "\n", "\n", "for", "i", "in", "np", ".", "setdiff1d", "(", "np", ".", "arange", "(", "5604", ")", ",", "emb", ".", "index", ".", "values", ")", ":", "\n", "            ", "emb", ".", "loc", "[", "i", "]", "=", "(", "np", ".", "sum", "(", "emb", ".", "values", ",", "axis", "=", "0", ")", "/", "emb", ".", "values", ".", "shape", "[", "0", "]", ")", "\n", "", "features", "=", "emb", ".", "sort_index", "(", ")", ".", "values", "\n", "features", "=", "normalize", "(", "features", ")", "\n", "", "elif", "inp", "==", "'one_hot'", ":", "\n", "        ", "features", "=", "np", ".", "eye", "(", "5604", ")", "\n", "\n", "", "features", "=", "features_to_sparse", "(", "features", ",", "device", ")", "\n", "\n", "\n", "edges", "=", "np", ".", "array", "(", "list", "(", "map", "(", "idx_map", ".", "get", ",", "edges_unordered", ".", "flatten", "(", ")", ")", ")", ")", ".", "reshape", "(", "edges_unordered", ".", "shape", ")", "\n", "adj", "=", "sp", ".", "coo_matrix", "(", "(", "np", ".", "ones", "(", "edges", ".", "shape", "[", "0", "]", ")", ",", "(", "edges", "[", ":", ",", "0", "]", ",", "edges", "[", ":", ",", "1", "]", ")", ")", ",", "\n", "shape", "=", "(", "len", "(", "idx", ")", ",", "len", "(", "idx", ")", ")", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "# build symmetric adjacency matrix", "\n", "adj", "=", "adj", "+", "adj", ".", "T", ".", "multiply", "(", "adj", ".", "T", ">", "adj", ")", "-", "adj", ".", "multiply", "(", "adj", ".", "T", ">", "adj", ")", "\n", "adj", "=", "create_propagator_matrix", "(", "adj", ",", "device", ")", "\n", "\n", "return", "adj", ",", "features", ",", "idx_map", "\n", "\n"]], "home.repos.pwc.inspect_result.kckishan_HOGCN-LP.None.utils.load_data_link_prediction_DTI": [[250, 287], ["print", "pandas.read_csv", "pandas.read_csv", "df_drug_list[].tolist", "numpy.array", "utils.features_to_sparse", "numpy.array().reshape", "scipy.coo_matrix", "utils.create_propagator_matrix", "pandas.read_csv().sort_values().set_index", "emb.reindex.reindex", "numpy.setdiff1d", "utils.normalize", "create_propagator_matrix.multiply", "enumerate", "numpy.arange", "emb.reindex.sort_index", "numpy.eye", "numpy.array", "numpy.ones", "create_propagator_matrix.T.multiply", "pandas.read_csv().sort_values", "numpy.sum", "list", "len", "len", "map", "pandas.read_csv", "edges_unordered.flatten"], "function", ["home.repos.pwc.inspect_result.kckishan_HOGCN-LP.None.utils.features_to_sparse", "home.repos.pwc.inspect_result.kckishan_HOGCN-LP.None.utils.create_propagator_matrix", "home.repos.pwc.inspect_result.kckishan_HOGCN-LP.None.utils.normalize"], ["", "def", "load_data_link_prediction_DTI", "(", "path", ",", "network_type", ",", "inp", ",", "device", ")", ":", "\n", "    ", "print", "(", "'Loading DTI dataset...'", ")", "\n", "path_up", "=", "f'./data/{network_type}'", "\n", "df_data", "=", "pd", ".", "read_csv", "(", "path", "+", "'/train.csv'", ")", "\n", "df_drug_list", "=", "pd", ".", "read_csv", "(", "path_up", "+", "'/entity_list.csv'", ")", "\n", "\n", "idx", "=", "df_drug_list", "[", "'Entity_ID'", "]", ".", "tolist", "(", ")", "\n", "idx", "=", "np", ".", "array", "(", "idx", ")", "\n", "idx_map", "=", "{", "j", ":", "i", "for", "i", ",", "j", "in", "enumerate", "(", "idx", ")", "}", "\n", "\n", "df_data_t", "=", "df_data", "[", "df_data", ".", "label", "==", "1", "]", "\n", "edges_unordered", "=", "df_data_t", "[", "[", "'Drug_ID'", ",", "'Protein_ID'", "]", "]", ".", "values", "\n", "\n", "if", "inp", "==", "'node2vec'", ":", "\n", "        ", "emb", "=", "pd", ".", "read_csv", "(", "path", "+", "'/dti.emb'", ",", "skiprows", "=", "1", ",", "header", "=", "None", ",", "sep", "=", "' '", ")", ".", "sort_values", "(", "by", "=", "[", "0", "]", ")", ".", "set_index", "(", "[", "0", "]", ")", "\n", "new_index", "=", "[", "idx_map", "[", "idx", "]", "for", "idx", "in", "emb", ".", "index", "]", "\n", "emb", "=", "emb", ".", "reindex", "(", "new_index", ")", "\n", "\n", "for", "i", "in", "np", ".", "setdiff1d", "(", "np", ".", "arange", "(", "7343", ")", ",", "emb", ".", "index", ".", "values", ")", ":", "\n", "            ", "emb", ".", "loc", "[", "i", "]", "=", "(", "np", ".", "sum", "(", "emb", ".", "values", ",", "axis", "=", "0", ")", "/", "emb", ".", "values", ".", "shape", "[", "0", "]", ")", "\n", "", "features", "=", "emb", ".", "sort_index", "(", ")", ".", "values", "\n", "\n", "features", "=", "normalize", "(", "features", ")", "\n", "", "elif", "inp", "==", "'one_hot'", ":", "\n", "        ", "features", "=", "np", ".", "eye", "(", "7343", ")", "\n", "\n", "", "features", "=", "features_to_sparse", "(", "features", ",", "device", ")", "\n", "\n", "edges", "=", "np", ".", "array", "(", "list", "(", "map", "(", "idx_map", ".", "get", ",", "edges_unordered", ".", "flatten", "(", ")", ")", ")", ")", ".", "reshape", "(", "edges_unordered", ".", "shape", ")", "\n", "adj", "=", "sp", ".", "coo_matrix", "(", "(", "np", ".", "ones", "(", "edges", ".", "shape", "[", "0", "]", ")", ",", "(", "edges", "[", ":", ",", "0", "]", ",", "edges", "[", ":", ",", "1", "]", ")", ")", ",", "\n", "shape", "=", "(", "len", "(", "idx", ")", ",", "len", "(", "idx", ")", ")", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "# build symmetric adjacency matrix", "\n", "adj", "=", "adj", "+", "adj", ".", "T", ".", "multiply", "(", "adj", ".", "T", ">", "adj", ")", "-", "adj", ".", "multiply", "(", "adj", ".", "T", ">", "adj", ")", "\n", "adj", "=", "create_propagator_matrix", "(", "adj", ",", "device", ")", "\n", "return", "adj", ",", "features", ",", "idx_map", "\n", "\n"]], "home.repos.pwc.inspect_result.kckishan_HOGCN-LP.None.utils.load_data_link_prediction_GDI": [[289, 327], ["print", "pandas.read_csv", "pandas.read_csv", "df_drug_list[].tolist", "numpy.array", "df_data_t[].apply", "utils.features_to_sparse", "numpy.array().reshape", "scipy.coo_matrix", "utils.create_propagator_matrix", "pandas.read_csv().sort_values().set_index", "emb.reindex.reindex", "numpy.setdiff1d", "utils.normalize", "create_propagator_matrix.multiply", "enumerate", "numpy.arange", "emb.reindex.sort_index", "numpy.eye", "numpy.array", "numpy.ones", "create_propagator_matrix.T.multiply", "pandas.read_csv().sort_values", "numpy.sum", "list", "len", "len", "map", "pandas.read_csv", "edges_unordered.flatten"], "function", ["home.repos.pwc.inspect_result.kckishan_HOGCN-LP.None.utils.features_to_sparse", "home.repos.pwc.inspect_result.kckishan_HOGCN-LP.None.utils.create_propagator_matrix", "home.repos.pwc.inspect_result.kckishan_HOGCN-LP.None.utils.normalize"], ["", "def", "load_data_link_prediction_GDI", "(", "path", ",", "network_type", ",", "inp", ",", "device", ")", ":", "\n", "    ", "print", "(", "'Loading GDI dataset...'", ")", "\n", "path_up", "=", "f'./data/{network_type}'", "\n", "df_data", "=", "pd", ".", "read_csv", "(", "path", "+", "'/train.csv'", ")", "\n", "df_drug_list", "=", "pd", ".", "read_csv", "(", "path_up", "+", "'/entity_list.csv'", ")", "\n", "idx", "=", "df_drug_list", "[", "'Entity_ID'", "]", ".", "tolist", "(", ")", "\n", "idx", "=", "np", ".", "array", "(", "idx", ")", "\n", "idx_map", "=", "{", "j", ":", "i", "for", "i", ",", "j", "in", "enumerate", "(", "idx", ")", "}", "\n", "\n", "df_data_t", "=", "df_data", "[", "df_data", ".", "label", "==", "1", "]", "\n", "df_data_t", "[", "'Gene_ID'", "]", "=", "df_data_t", "[", "'Gene_ID'", "]", ".", "apply", "(", "str", ")", "\n", "edges_unordered", "=", "df_data_t", "[", "[", "'Gene_ID'", ",", "'Disease_ID'", "]", "]", ".", "values", "\n", "\n", "if", "inp", "==", "'node2vec'", ":", "\n", "        ", "emb", "=", "pd", ".", "read_csv", "(", "path", "+", "'/gdi.emb'", ",", "skiprows", "=", "1", ",", "header", "=", "None", ",", "sep", "=", "' '", ")", ".", "sort_values", "(", "by", "=", "[", "0", "]", ")", ".", "set_index", "(", "[", "0", "]", ")", "\n", "new_index", "=", "[", "idx_map", "[", "idx", "]", "for", "idx", "in", "emb", ".", "index", "]", "\n", "emb", "=", "emb", ".", "reindex", "(", "new_index", ")", "\n", "\n", "for", "i", "in", "np", ".", "setdiff1d", "(", "np", ".", "arange", "(", "19783", ")", ",", "emb", ".", "index", ".", "values", ")", ":", "\n", "            ", "emb", ".", "loc", "[", "i", "]", "=", "(", "np", ".", "sum", "(", "emb", ".", "values", ",", "axis", "=", "0", ")", "/", "emb", ".", "values", ".", "shape", "[", "0", "]", ")", "\n", "", "features", "=", "emb", ".", "sort_index", "(", ")", ".", "values", "\n", "features", "=", "normalize", "(", "features", ")", "\n", "", "elif", "inp", "==", "'one_hot'", ":", "\n", "        ", "features", "=", "np", ".", "eye", "(", "19783", ")", "\n", "\n", "", "features", "=", "features_to_sparse", "(", "features", ",", "device", ")", "\n", "\n", "edges", "=", "np", ".", "array", "(", "list", "(", "map", "(", "idx_map", ".", "get", ",", "edges_unordered", ".", "flatten", "(", ")", ")", ")", ")", ".", "reshape", "(", "edges_unordered", ".", "shape", ")", "\n", "\n", "adj", "=", "sp", ".", "coo_matrix", "(", "(", "np", ".", "ones", "(", "edges", ".", "shape", "[", "0", "]", ")", ",", "(", "edges", "[", ":", ",", "0", "]", ",", "edges", "[", ":", ",", "1", "]", ")", ")", ",", "\n", "shape", "=", "(", "len", "(", "idx", ")", ",", "len", "(", "idx", ")", ")", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "# build symmetric adjacency matrix", "\n", "adj", "=", "adj", "+", "adj", ".", "T", ".", "multiply", "(", "adj", ".", "T", ">", "adj", ")", "-", "adj", ".", "multiply", "(", "adj", ".", "T", ">", "adj", ")", "\n", "adj", "=", "create_propagator_matrix", "(", "adj", ",", "device", ")", "\n", "\n", "return", "adj", ",", "features", ",", "idx_map", "\n", "\n"]], "home.repos.pwc.inspect_result.kckishan_HOGCN-LP.None.utils.load_data": [[328, 347], ["utils.load_data_link_prediction_DDI", "utils.load_data_link_prediction_PPI", "utils.load_data_link_prediction_DTI", "utils.load_data_link_prediction_GDI"], "function", ["home.repos.pwc.inspect_result.kckishan_HOGCN-LP.None.utils.load_data_link_prediction_DDI", "home.repos.pwc.inspect_result.kckishan_HOGCN-LP.None.utils.load_data_link_prediction_PPI", "home.repos.pwc.inspect_result.kckishan_HOGCN-LP.None.utils.load_data_link_prediction_DTI", "home.repos.pwc.inspect_result.kckishan_HOGCN-LP.None.utils.load_data_link_prediction_GDI"], ["", "def", "load_data", "(", "args", ")", ":", "\n", "\n", "    ", "data_path", "=", "f\"./data/{args.network_type}/fold{args.fold_id}\"", "\n", "if", "args", ".", "ratio", ":", "\n", "        ", "data_path", "=", "f\"./data/{args.network_type}/{args.train_percent}/fold{args.fold_id}\"", "\n", "\n", "", "if", "args", ".", "network_type", "==", "'DDI'", ":", "\n", "        ", "adj", ",", "features", ",", "idx_map", "=", "load_data_link_prediction_DDI", "(", "data_path", ",", "args", ".", "network_type", ",", "args", ".", "input_type", ",", "args", ".", "device", ")", "\n", "Data_class", "=", "Data_DDI", "\n", "", "elif", "args", ".", "network_type", "==", "'PPI'", ":", "\n", "        ", "adj", ",", "features", ",", "idx_map", "=", "load_data_link_prediction_PPI", "(", "data_path", ",", "args", ".", "network_type", ",", "args", ".", "input_type", ",", "args", ".", "device", ")", "\n", "Data_class", "=", "Data_PPI", "\n", "", "elif", "args", ".", "network_type", "==", "'DTI'", ":", "\n", "        ", "adj", ",", "features", ",", "idx_map", "=", "load_data_link_prediction_DTI", "(", "data_path", ",", "args", ".", "network_type", ",", "args", ".", "input_type", ",", "args", ".", "device", ")", "\n", "Data_class", "=", "Data_DTI", "\n", "", "elif", "args", ".", "network_type", "==", "'GDI'", ":", "\n", "        ", "adj", ",", "features", ",", "idx_map", "=", "load_data_link_prediction_GDI", "(", "data_path", ",", "args", ".", "network_type", ",", "args", ".", "input_type", ",", "args", ".", "device", ")", "\n", "Data_class", "=", "Data_GDI", "\n", "", "return", "adj", ",", "features", ",", "idx_map", ",", "Data_class", "", "", ""]]}