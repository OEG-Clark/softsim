{"home.repos.pwc.inspect_result.elkabzo_cont_disc_opt_dnn.None.model.Network.__init__": [[7, 61], ["torch.nn.CrossEntropyLoss", "torch.nn.Module.__init__", "torch.device", "model.Network.initialize_linear_functions", "model.Network.set_weights", "torch.nn.ZeroPad2d", "torch.nn.Conv2d", "torch.nn.MaxPool2d", "torch.nn.Conv2d", "torch.nn.MaxPool2d", "torch.nn.ZeroPad2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "print", "torch.cuda.is_available"], "methods", ["home.repos.pwc.inspect_result.elkabzo_cont_disc_opt_dnn.None.model.Network.__init__", "home.repos.pwc.inspect_result.elkabzo_cont_disc_opt_dnn.None.model.Network.initialize_linear_functions", "home.repos.pwc.inspect_result.elkabzo_cont_disc_opt_dnn.None.model.Network.set_weights"], ["    ", "def", "__init__", "(", "self", ",", "train_loader", ",", "test_loader", ",", "layers_size", "=", "[", "28", "*", "28", ",", "50", ",", "50", ",", "10", "]", ",", "\n", "costum_weights", "=", "None", ",", "init_mode", "=", "'xavier'", ",", "deviation", "=", "1", ",", "activation", "=", "'Linear'", ",", "\n", "print_progress", "=", "False", ",", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ",", "label", "=", "'network'", ",", "batch_size_train", "=", "100", ")", ":", "\n", "\n", "# call constructor from superclass", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "\n", "#train and test loaders", "\n", "self", ".", "train_loader", "=", "train_loader", "\n", "self", ".", "test_loader", "=", "test_loader", "\n", "self", ".", "batch_size_train", "=", "batch_size_train", "\n", "\n", "#data for visualization", "\n", "self", ".", "label", "=", "label", "\n", "self", ".", "train_time_stamps", "=", "[", "]", "\n", "self", ".", "train_losses", "=", "[", "]", "\n", "self", ".", "train_end2end", "=", "[", "]", "\n", "self", ".", "train_weights", "=", "[", "]", "\n", "self", ".", "train_weights2", "=", "[", "]", "\n", "# self.test_losses = []", "\n", "# self.test_counter = [i * len(train_loader.dataset) for i in range(n_epochs + 1)]", "\n", "\n", "#initialize input arguments", "\n", "self", ".", "criterion", "=", "criterion", "\n", "self", ".", "activation", "=", "activation", "\n", "self", ".", "layers_size", "=", "layers_size", "\n", "self", ".", "initial_weights", "=", "[", "]", "\n", "if", "(", "costum_weights", "is", "not", "None", ")", ":", "\n", "            ", "self", ".", "initial_weights", "=", "costum_weights", "\n", "\n", "# initialize weights", "\n", "", "if", "activation", "==", "'conv_max_pool'", ":", "\n", "            ", "self", ".", "pad", "=", "torch", ".", "nn", ".", "ZeroPad2d", "(", "2", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "1", ",", "6", ",", "5", ",", "bias", "=", "True", ")", "\n", "self", ".", "pool1", "=", "nn", ".", "MaxPool2d", "(", "2", ",", "2", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "6", ",", "16", ",", "5", ",", "bias", "=", "True", ")", "\n", "self", ".", "pool2", "=", "nn", ".", "MaxPool2d", "(", "2", ",", "2", ")", "\n", "self", ".", "layers_size", "=", "[", "16", "*", "5", "*", "5", ",", "120", ",", "84", ",", "10", "]", "\n", "", "if", "activation", "==", "'conv_subsample'", ":", "\n", "            ", "self", ".", "pad", "=", "torch", ".", "nn", ".", "ZeroPad2d", "(", "2", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "1", ",", "6", ",", "5", ",", "stride", "=", "2", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "6", ",", "16", ",", "5", ",", "stride", "=", "2", ",", "bias", "=", "False", ")", "\n", "self", ".", "layers_size", "=", "[", "16", "*", "5", "*", "5", ",", "120", ",", "84", ",", "10", "]", "\n", "", "self", ".", "initialize_linear_functions", "(", ")", "\n", "self", ".", "set_weights", "(", "costum_weights", ",", "init_mode", ",", "deviation", ")", "\n", "\n", "# prints", "\n", "self", ".", "print_progress", "=", "print_progress", "\n", "if", "self", ".", "print_progress", ":", "print", "(", "\"--------------------------\\ninit deep network of size: \"", ",", "layers_size", ")", "\n", "\n", "# initialize training information", "\n", "self", ".", "epoch", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.elkabzo_cont_disc_opt_dnn.None.model.Network.initialize_linear_functions": [[62, 70], ["torch.nn.ReLU().to", "torch.nn.ModuleList().to", "torch.no_grad", "enumerate", "torch.nn.ReLU", "torch.nn.ModuleList", "zip", "model.Network.linear_functions.append().to", "model.Network.linear_functions.append", "torch.nn.Linear().to", "torch.nn.Linear"], "methods", ["None"], ["", "def", "initialize_linear_functions", "(", "self", ")", ":", "\n", "        ", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "linear_functions", "=", "nn", ".", "ModuleList", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "i", ",", "(", "prev_layer_size", ",", "next_layer_size", ")", "in", "enumerate", "(", "zip", "(", "self", ".", "layers_size", "[", ":", "-", "1", "]", ",", "self", ".", "layers_size", "[", "1", ":", "]", ")", ")", ":", "\n", "                ", "bias", "=", "True", "if", "(", "self", ".", "activation", "==", "'conv_max_pool'", ")", "else", "False", "\n", "#bias = True if ((i == 0 and self.activation!='conv_subsample') or self.activation == 'conv_max_pool') else False", "\n", "self", ".", "linear_functions", ".", "append", "(", "nn", ".", "Linear", "(", "prev_layer_size", ",", "next_layer_size", ",", "bias", "=", "bias", ")", ".", "to", "(", "self", ".", "device", ")", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.elkabzo_cont_disc_opt_dnn.None.model.Network.set_weights": [[71, 84], ["torch.no_grad", "enumerate", "zip", "model.Network.linear_functions[].weight.copy_", "torch.nn.init.normal_().to", "model.Network.initial_weights.append", "torch.nn.init.xavier_uniform_().to", "model.Network.initial_weights.append", "model.Network.linear_functions[].weight.to", "model.Network.linear_functions[].weight.to", "torch.nn.init.normal_", "torch.nn.init.xavier_uniform_", "model.Network.linear_functions[].weight.to", "model.Network.linear_functions[].weight.to", "numpy.sqrt"], "methods", ["None"], ["", "", "", "def", "set_weights", "(", "self", ",", "costum_weights", "=", "None", ",", "init_mode", "=", "'gaussian'", ",", "deviation", "=", "1", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "i", ",", "(", "prev_layer_size", ",", "next_layer_size", ")", "in", "enumerate", "(", "zip", "(", "self", ".", "layers_size", "[", ":", "-", "1", "]", ",", "self", ".", "layers_size", "[", "1", ":", "]", ")", ")", ":", "\n", "                ", "if", "(", "costum_weights", "is", "not", "None", ")", ":", "\n", "# print(\"\\nsetting costum weights\\n\")", "\n", "                    ", "self", ".", "linear_functions", "[", "i", "]", ".", "weight", ".", "copy_", "(", "costum_weights", "[", "i", "]", ")", "\n", "", "elif", "init_mode", "==", "'gaussian'", ":", "\n", "                    ", "torch", ".", "nn", ".", "init", ".", "normal_", "(", "self", ".", "linear_functions", "[", "i", "]", ".", "weight", ".", "to", "(", "self", ".", "device", ")", ",", "mean", "=", "0.0", ",", "\n", "std", "=", "deviation", "/", "np", ".", "sqrt", "(", "prev_layer_size", ")", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "initial_weights", ".", "append", "(", "self", ".", "linear_functions", "[", "i", "]", ".", "weight", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "", "else", ":", "# init_mode=='xavier'", "\n", "                    ", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "linear_functions", "[", "i", "]", ".", "weight", ".", "to", "(", "self", ".", "device", ")", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "initial_weights", ".", "append", "(", "self", ".", "linear_functions", "[", "i", "]", ".", "weight", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.elkabzo_cont_disc_opt_dnn.None.model.Network.forward": [[85, 100], ["model.Network.view", "enumerate", "model.Network.pad", "model.Network.pool1", "model.Network.pool2", "model.Network.pad", "model.Network.relu", "model.Network.relu", "function", "model.Network.relu", "model.Network.relu", "model.Network.conv1", "model.Network.conv2", "model.Network.relu", "model.Network.conv1", "model.Network.conv2", "len"], "methods", ["None"], ["", "", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "activation", "==", "'conv_max_pool'", ":", "\n", "            ", "x", "=", "self", ".", "pad", "(", "x", ")", "\n", "x", "=", "self", ".", "pool1", "(", "self", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "pool2", "(", "self", ".", "relu", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", "\n", "", "if", "self", ".", "activation", "==", "'conv_subsample'", ":", "\n", "            ", "x", "=", "self", ".", "pad", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "relu", "(", "self", ".", "conv2", "(", "x", ")", ")", "\n", "", "x", "=", "x", ".", "view", "(", "self", ".", "batch_size_train", ",", "-", "1", ")", "\n", "for", "i", ",", "function", "in", "enumerate", "(", "self", ".", "linear_functions", ")", ":", "\n", "            ", "x", "=", "function", "(", "x", ")", "\n", "if", "(", "self", ".", "activation", "==", "'ReLU'", "or", "self", ".", "activation", "==", "'relu'", "or", "self", ".", "activation", "==", "'conv_max_pool'", "or", "self", ".", "activation", "==", "'conv_subsample'", ")", "and", "i", "<", "len", "(", "self", ".", "layers_size", ")", "-", "2", ":", "\n", "                ", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.elkabzo_cont_disc_opt_dnn.None.model.Network.continue_training": [[101, 103], ["model.Network.train"], "methods", ["home.repos.pwc.inspect_result.elkabzo_cont_disc_opt_dnn.None.model.Network.train"], ["", "def", "continue_training", "(", "self", ")", ":", "\n", "        ", "self", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.elkabzo_cont_disc_opt_dnn.None.model.Network.train": [[104, 132], ["range", "model.Network.save_state", "enumerate", "model.Network.save_state", "data.to.to.to", "target.to.to.to", "model.Network.optimizer.zero_grad", "model.Network.to", "model.Network.criterion().to", "model.Network.backward", "model.Network.optimizer.step", "print", "model.Network.train_time_stamps.append", "model.Network.train_losses.append", "model.Network.train_weights.append", "print", "model.Network.train_time_stamps.append", "model.Network.train_losses.append", "model.Network.train_weights.append", "model.Network.", "model.Network.criterion", "model.Network.item", "model.Network.weights_tensor", "model.Network.item", "model.Network.weights_tensor", "model.Network.item", "model.Network.item"], "methods", ["home.repos.pwc.inspect_result.elkabzo_cont_disc_opt_dnn.None.model.Network.save_state", "home.repos.pwc.inspect_result.elkabzo_cont_disc_opt_dnn.None.model.Network.save_state", "home.repos.pwc.inspect_result.elkabzo_cont_disc_opt_dnn.None.model.Network.weights_tensor", "home.repos.pwc.inspect_result.elkabzo_cont_disc_opt_dnn.None.model.Network.weights_tensor"], ["", "def", "train", "(", "self", ")", ":", "\n", "        ", "for", "epoch", "in", "range", "(", "self", ".", "epoch", ",", "self", ".", "n_epochs", "+", "1", ")", ":", "\n", "            ", "if", "epoch", "%", "10000", "==", "0", ":", "\n", "                ", "self", ".", "epoch", "=", "epoch", "\n", "self", ".", "save_state", "(", ")", "\n", "", "for", "batch_idx", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "self", ".", "train_loader", ")", ":", "\n", "                ", "data", "=", "data", ".", "to", "(", "self", ".", "device", ")", "\n", "target", "=", "target", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "output", "=", "self", "(", "data", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "output", ",", "target", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "if", "epoch", "==", "1", ":", "\n", "                    ", "print", "(", "'Train Epoch: {} [({:.0f}%)]\\tLoss: {:.6f}'", ".", "format", "(", "0", ",", "0", ",", "loss", ".", "item", "(", ")", ")", ")", "\n", "self", ".", "train_time_stamps", ".", "append", "(", "0", ")", "\n", "self", ".", "train_losses", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "self", ".", "train_weights", ".", "append", "(", "self", ".", "weights_tensor", "(", ")", ")", "\n", "#self.train_end2end.append(self.end_2_end())", "\n", "", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "if", "epoch", "%", "(", "self", ".", "n_epochs", "/", "self", ".", "nm_of_time_stamps", ")", "==", "0", ":", "\n", "                    ", "print", "(", "\n", "'Train Epoch: {} [({:.0f}%)]\\tLoss: {:.6f}'", ".", "format", "(", "epoch", ",", "100.", "*", "epoch", "/", "self", ".", "n_epochs", ",", "loss", ".", "item", "(", ")", ")", ")", "\n", "self", ".", "train_time_stamps", ".", "append", "(", "epoch", ")", "\n", "self", ".", "train_losses", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "self", ".", "train_weights", ".", "append", "(", "self", ".", "weights_tensor", "(", ")", ")", "\n", "#self.train_end2end.append(self.end_2_end())", "\n", "", "", "", "self", ".", "epoch", "=", "self", ".", "n_epochs", "+", "1", "\n", "self", ".", "save_state", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.elkabzo_cont_disc_opt_dnn.None.model.Network.init_train_params": [[133, 140], ["torch.optim.SGD", "model.Network.parameters"], "methods", ["None"], ["", "def", "init_train_params", "(", "self", ",", "n_epochs", "=", "100", ",", "learning_rate", "=", "0.01", ",", "nm_of_time_stamps", "=", "100", ",", "lr_ratio_from_base", "=", "1", ")", ":", "\n", "# initialize train data", "\n", "        ", "self", ".", "n_epochs", "=", "n_epochs", "\n", "self", ".", "learning_rate", "=", "learning_rate", "\n", "self", ".", "optimizer", "=", "optim", ".", "SGD", "(", "self", ".", "parameters", "(", ")", ",", "lr", "=", "learning_rate", ")", "\n", "self", ".", "nm_of_time_stamps", "=", "nm_of_time_stamps", "\n", "self", ".", "lr_ratio_from_base", "=", "lr_ratio_from_base", "\n", "\n"]], "home.repos.pwc.inspect_result.elkabzo_cont_disc_opt_dnn.None.model.Network.test_acc": [[141, 160], ["torch.no_grad", "enumerate", "len", "torch.flatten", "model.Network.forward", "model.Network.criterion", "model.Network.item"], "methods", ["home.repos.pwc.inspect_result.elkabzo_cont_disc_opt_dnn.None.model.Network.forward"], ["", "def", "test_acc", "(", "self", ")", ":", "\n", "\n", "        ", "correct", "=", "0", "\n", "total", "=", "0", "\n", "total_loss", "=", "0.0", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "i", ",", "data", "in", "enumerate", "(", "self", ".", "test_loader", ")", ":", "\n", "                ", "images", ",", "labels", "=", "data", "\n", "labels", "=", "labels", "\n", "images", "=", "torch", ".", "flatten", "(", "images", ",", "start_dim", "=", "1", ")", "\n", "output", "=", "self", ".", "forward", "(", "images", ")", "\n", "\n", "\n", "# loss", "\n", "loss", "=", "self", ".", "criterion", "(", "output", ",", "labels", ")", "\n", "total_loss", "+=", "loss", ".", "item", "(", ")", "\n", "\n", "", "", "return", "(", "total_loss", "/", "len", "(", "self", ".", "test_loader", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.elkabzo_cont_disc_opt_dnn.None.model.Network.save_state": [[161, 168], ["torch.save"], "methods", ["None"], ["", "def", "save_state", "(", "self", ",", "file_name", "=", "None", ")", ":", "\n", "\n", "        ", "if", "file_name", "is", "None", ":", "\n", "            ", "file_name", "=", "self", ".", "label", "+", "'_model.pth'", "\n", "\n", "#torch.save(self.state_dict(), file_name)", "\n", "", "torch", ".", "save", "(", "self", ",", "file_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.elkabzo_cont_disc_opt_dnn.None.model.Network.end_2_end": [[184, 191], ["enumerate", "torch.mm"], "methods", ["None"], ["def", "end_2_end", "(", "self", ")", ":", "\n", "        ", "for", "i", ",", "function", "in", "enumerate", "(", "self", ".", "linear_functions", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "product", "=", "self", ".", "linear_functions", "[", "0", "]", ".", "weight", "\n", "", "else", ":", "\n", "                ", "product", "=", "torch", ".", "mm", "(", "self", ".", "linear_functions", "[", "i", "]", ".", "weight", ",", "product", ")", "\n", "", "", "return", "product", "\n", "\n"]], "home.repos.pwc.inspect_result.elkabzo_cont_disc_opt_dnn.None.model.Network.weights_tensor": [[192, 200], ["torch.Tensor", "enumerate", "torch.cat", "torch.cat", "torch.cat", "model.Network.conv1.weight.view", "model.Network.conv2.weight.view", "model.Network.linear_functions[].weight.view"], "methods", ["None"], ["", "def", "weights_tensor", "(", "self", ")", ":", "\n", "        ", "weights_tensor", "=", "torch", ".", "Tensor", "(", "[", "]", ")", "\n", "if", "self", ".", "activation", "==", "'conv_max_pool'", "or", "self", ".", "activation", "==", "'conv_subsample'", ":", "\n", "            ", "weights_tensor", "=", "torch", ".", "cat", "(", "[", "weights_tensor", ",", "self", ".", "conv1", ".", "weight", ".", "view", "(", "-", "1", ")", "]", ")", "\n", "weights_tensor", "=", "torch", ".", "cat", "(", "[", "weights_tensor", ",", "self", ".", "conv2", ".", "weight", ".", "view", "(", "-", "1", ")", "]", ")", "\n", "", "for", "i", ",", "function", "in", "enumerate", "(", "self", ".", "linear_functions", ")", ":", "\n", "            ", "weights_tensor", "=", "torch", ".", "cat", "(", "[", "weights_tensor", ",", "self", ".", "linear_functions", "[", "i", "]", ".", "weight", ".", "view", "(", "-", "1", ")", "]", ")", "\n", "", "return", "weights_tensor", "", "", "", ""]], "home.repos.pwc.inspect_result.elkabzo_cont_disc_opt_dnn.None.experiment_runner.main": [[5, 19], ["torch.manual_seed", "torch.cuda.is_available", "argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "utils.run_specific_experiment", "torch.set_default_tensor_type"], "function", ["home.repos.pwc.inspect_result.elkabzo_cont_disc_opt_dnn.None.utils.run_specific_experiment"], ["def", "main", "(", ")", ":", "\n", "#technical settings", "\n", "    ", "random_seed", "=", "1", "\n", "torch", ".", "backends", ".", "cudnn", ".", "enabled", "=", "False", "\n", "torch", ".", "manual_seed", "(", "random_seed", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "torch", ".", "set_default_tensor_type", "(", "'torch.cuda.FloatTensor'", ")", "\n", "\n", "", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"--experiment\"", ",", "type", "=", "str", ",", "default", "=", "\"fully_connected_linear\"", ",", "help", "=", "\"type of experiment to run, options are: \\n1. fully_connected_linear \\n2. fully_connected_relu \\n3. conv_subsample \\n4. conv_maxpool \"", ")", "\n", "parser", ".", "add_argument", "(", "\"--epochs\"", ",", "type", "=", "int", ",", "default", "=", "10000", ",", "help", "=", "\"number of epochs\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--learning_rate\"", ",", "type", "=", "float", ",", "default", "=", "0.001", ",", "help", "=", "\"size of the learning rate\"", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "main_file", ".", "run_specific_experiment", "(", "experiment_type", "=", "args", ".", "experiment", ",", "n_epochs", "=", "args", ".", "epochs", ",", "learning_rate", "=", "args", ".", "learning_rate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.elkabzo_cont_disc_opt_dnn.None.utils.data_load": [[14, 39], ["torchvision.datasets.MNIST", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.Subset", "torch.utils.data.Subset", "torchvision.datasets.MNIST", "torchvision.transforms.Compose", "list", "list", "range", "range", "torchvision.transforms.Compose", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize"], "function", ["None"], ["def", "data_load", "(", "batch_size_train", "=", "1000", ",", "batch_size_test", "=", "1000", ")", ":", "\n", "\n", "    ", "trainset", "=", "torchvision", ".", "datasets", ".", "MNIST", "(", "'files/'", ",", "train", "=", "True", ",", "download", "=", "True", ",", "\n", "transform", "=", "torchvision", ".", "transforms", ".", "Compose", "(", "[", "\n", "torchvision", ".", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "torchvision", ".", "transforms", ".", "Normalize", "(", "\n", "(", "0.1307", ",", ")", ",", "(", "0.3081", ",", ")", ")", "\n", "]", ")", ")", "\n", "if", "batch_size_train", "<=", "1001", ":", "\n", "        ", "trainset", "=", "torch", ".", "utils", ".", "data", ".", "Subset", "(", "trainset", ",", "list", "(", "range", "(", "0", ",", "batch_size_train", "*", "50", ",", "50", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "trainset", "=", "torch", ".", "utils", ".", "data", ".", "Subset", "(", "trainset", ",", "list", "(", "range", "(", "0", ",", "batch_size_train", ")", ")", ")", "\n", "\n", "", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "trainset", ",", "batch_size", "=", "batch_size_train", ",", "shuffle", "=", "False", ",", "num_workers", "=", "0", ")", "\n", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "torchvision", ".", "datasets", ".", "MNIST", "(", "'files/'", ",", "train", "=", "False", ",", "download", "=", "True", ",", "\n", "transform", "=", "torchvision", ".", "transforms", ".", "Compose", "(", "[", "\n", "torchvision", ".", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "torchvision", ".", "transforms", ".", "Normalize", "(", "\n", "(", "0.1307", ",", ")", ",", "(", "0.3081", ",", ")", ")", "\n", "]", ")", ")", ",", "\n", "batch_size", "=", "batch_size_test", ",", "shuffle", "=", "True", ")", "\n", "\n", "return", "train_loader", ",", "test_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.elkabzo_cont_disc_opt_dnn.None.utils.plot_networks_loss_graph": [[43, 80], ["matplotlib.rcParams.update", "matplotlib.figure", "matplotlib.ylabel", "matplotlib.xlabel", "matplotlib.plot", "enumerate", "matplotlib.legend", "matplotlib.xlim", "matplotlib.tight_layout", "matplotlib.show", "matplotlib.plot", "matplotlib.yscale", "matplotlib.title", "matplotlib.title", "matplotlib.title", "matplotlib.title", "matplotlib.savefig", "matplotlib.savefig", "str"], "function", ["None"], ["", "def", "plot_networks_loss_graph", "(", "base_network", ",", "networks_to_compare", "=", "[", "]", ",", "download", "=", "False", ",", "networks_type_str", "=", "'Regular'", ",", "scale", "=", "'regular'", ")", ":", "\n", "#figure settings", "\n", "#plt.rcParams.update({'font.size': 15})", "\n", "    ", "plt", ".", "rcParams", ".", "update", "(", "{", "'legend.fontsize'", ":", "9", "}", ")", "\n", "plt", ".", "figure", "(", "figsize", "=", "(", "3.2", ",", "3", ")", ")", "\n", "plt", ".", "ylabel", "(", "'Training Loss'", ")", "\n", "plt", ".", "xlabel", "(", "'$\\eta_{0}$ Iterations'", ")", "\n", "\n", "#plot", "\n", "plt", ".", "plot", "(", "base_network", ".", "train_time_stamps", ",", "base_network", ".", "train_losses", ",", "label", "=", "'$\\eta_{0}$'", ")", "\n", "for", "i", ",", "network", "in", "enumerate", "(", "networks_to_compare", ")", ":", "\n", "        ", "plt", ".", "plot", "(", "base_network", ".", "train_time_stamps", ",", "network", ".", "train_losses", ",", "label", "=", "'$\\eta_{0}/$'", "+", "str", "(", "network", ".", "lr_ratio_from_base", ")", ")", "\n", "\n", "", "plt", ".", "legend", "(", ")", "\n", "\n", "if", "scale", "==", "'log'", ":", "\n", "        ", "plt", ".", "yscale", "(", "'log'", ")", "\n", "\n", "", "if", "networks_type_str", "==", "'Linear'", ":", "\n", "        ", "plt", ".", "title", "(", "'Fully Connected, Linear Activation'", ",", "pad", "=", "10", ")", "\n", "", "if", "networks_type_str", "==", "'ReLU'", ":", "\n", "        ", "plt", ".", "title", "(", "'Fully Connected, ReLU Activation'", ",", "pad", "=", "10", ")", "\n", "", "if", "networks_type_str", "==", "'conv_subsample'", ":", "\n", "        ", "plt", ".", "title", "(", "'Convolutional, ReLU Activation, No Pooling'", ",", "pad", "=", "10", ")", "\n", "", "if", "networks_type_str", "==", "'conv_max_pool'", ":", "\n", "        ", "plt", ".", "title", "(", "'Convolutional, ReLU Activation, Max Pooling'", ",", "pad", "=", "10", ")", "\n", "\n", "", "plt", ".", "xlim", "(", "left", "=", "0", ",", "right", "=", "base_network", ".", "train_time_stamps", "[", "-", "1", "]", ")", "\n", "#plt.tight_layout(pad=0.05)", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "if", "download", "==", "True", ":", "\n", "        ", "if", "scale", "==", "'log'", ":", "\n", "            ", "plt", ".", "savefig", "(", "'LossGraph'", "+", "networks_type_str", "+", "'_log_scale.pdf'", ",", "bbox_inches", "=", "\"tight\"", ")", "\n", "", "else", ":", "\n", "            ", "plt", ".", "savefig", "(", "'LossGraph'", "+", "networks_type_str", "+", "'.pdf'", ",", "bbox_inches", "=", "\"tight\"", ")", "\n", "#files.download('LossGraph'+networks_type_str+'.pdf')", "\n", "", "", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.elkabzo_cont_disc_opt_dnn.None.utils.plot_networks_distance_graph": [[81, 128], ["matplotlib.rcParams.update", "matplotlib.figure", "matplotlib.ylabel", "matplotlib.xlabel", "enumerate", "matplotlib.plot", "enumerate", "matplotlib.legend", "matplotlib.xlim", "matplotlib.tight_layout", "matplotlib.show", "networks_distance.append", "base_network_norms.append", "enumerate", "matplotlib.plot", "matplotlib.yscale", "matplotlib.title", "matplotlib.title", "matplotlib.title", "matplotlib.title", "torch.norm().cpu().detach().numpy", "networks_distance[].append", "matplotlib.savefig", "matplotlib.savefig", "torch.norm().cpu().detach().numpy", "torch.norm().cpu().detach", "str", "torch.norm().cpu().detach", "torch.norm().cpu", "torch.norm().cpu", "torch.norm", "torch.norm"], "function", ["None"], ["", "def", "plot_networks_distance_graph", "(", "base_network", ",", "networks_to_compare", "=", "[", "]", ",", "download", "=", "False", ",", "networks_type_str", "=", "'Regular'", ",", "scale", "=", "'regular'", ")", ":", "\n", "#figure settings", "\n", "#plt.rcParams.update({'font.size': 15})", "\n", "    ", "plt", ".", "rcParams", ".", "update", "(", "{", "'legend.fontsize'", ":", "9", "}", ")", "\n", "plt", ".", "figure", "(", "figsize", "=", "(", "3.2", ",", "3", ")", ")", "\n", "plt", ".", "ylabel", "(", "'Distance'", ")", "\n", "plt", ".", "xlabel", "(", "'$\\eta_{0}$ Iterations'", ")", "\n", "\n", "#initialize lists for plot", "\n", "base_network_norms", "=", "[", "]", "\n", "networks_distance", "=", "[", "]", "\n", "for", "compare_network", "in", "networks_to_compare", ":", "\n", "        ", "networks_distance", ".", "append", "(", "[", "]", ")", "\n", "\n", "#insert values into lists", "\n", "", "for", "i", ",", "train_weight", "in", "enumerate", "(", "base_network", ".", "train_weights", ")", ":", "\n", "        ", "base_network_norms", ".", "append", "(", "torch", ".", "norm", "(", "train_weight", "-", "base_network", ".", "train_weights", "[", "0", "]", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", "\n", "for", "j", ",", "compare_network", "in", "enumerate", "(", "networks_to_compare", ")", ":", "\n", "            ", "networks_distance", "[", "j", "]", ".", "append", "(", "torch", ".", "norm", "(", "base_network", ".", "train_weights", "[", "i", "]", "-", "compare_network", ".", "train_weights", "[", "i", "]", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "#plot", "\n", "", "", "plt", ".", "plot", "(", "base_network", ".", "train_time_stamps", "[", "0", ":", "]", ",", "base_network_norms", "[", "0", ":", "]", ",", "label", "=", "'$\\eta_{0}$ from init'", ")", "\n", "for", "j", ",", "compare_network", "in", "enumerate", "(", "networks_to_compare", ")", ":", "\n", "        ", "plt", ".", "plot", "(", "base_network", ".", "train_time_stamps", "[", "0", ":", "]", ",", "networks_distance", "[", "j", "]", "[", "0", ":", "]", ",", "label", "=", "'$\\eta_{0}$ from $\\eta_{0}/$'", "+", "str", "(", "compare_network", ".", "lr_ratio_from_base", ")", ")", "\n", "", "plt", ".", "legend", "(", ")", "\n", "if", "scale", "==", "'log'", ":", "\n", "        ", "plt", ".", "yscale", "(", "'log'", ")", "\n", "\n", "", "if", "networks_type_str", "==", "'Linear'", ":", "\n", "        ", "plt", ".", "title", "(", "'Fully Connected, Linear Activation'", ",", "pad", "=", "10", ")", "\n", "", "if", "networks_type_str", "==", "'ReLU'", ":", "\n", "        ", "plt", ".", "title", "(", "'Fully Connected, ReLU Activation'", ",", "pad", "=", "10", ")", "\n", "", "if", "networks_type_str", "==", "'conv_subsample'", ":", "\n", "        ", "plt", ".", "title", "(", "'Convolutional, ReLU Activation, No Pooling'", ",", "pad", "=", "10", ")", "\n", "", "if", "networks_type_str", "==", "'conv_max_pool'", ":", "\n", "        ", "plt", ".", "title", "(", "'Convolutional, ReLU Activation, Max Pooling'", ",", "pad", "=", "10", ")", "\n", "\n", "", "plt", ".", "xlim", "(", "left", "=", "0", ",", "right", "=", "base_network", ".", "train_time_stamps", "[", "-", "1", "]", ")", "\n", "#plt.tight_layout(pad=0.05)", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "if", "download", "==", "True", ":", "\n", "        ", "if", "scale", "==", "'log'", ":", "\n", "            ", "plt", ".", "savefig", "(", "'DistGraph'", "+", "networks_type_str", "+", "'_log_scale.pdf'", ",", "bbox_inches", "=", "\"tight\"", ")", "\n", "", "else", ":", "\n", "            ", "plt", ".", "savefig", "(", "'DistGraph'", "+", "networks_type_str", "+", "'.pdf'", ",", "bbox_inches", "=", "\"tight\"", ")", "\n", "#files.download('DistGraph'+networks_type_str+'.pdf')", "\n", "", "", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.elkabzo_cont_disc_opt_dnn.None.utils.set_networks_loss_subgraph": [[129, 153], ["subgraph.set_ylabel", "subgraph.set_xlabel", "list", "list", "subgraph.plot", "enumerate", "subgraph.legend", "subgraph.set_xlim", "subgraph.set_ylim", "matplotlib.lines.lineStyles.keys", "matplotlib.markers.MarkerStyle.markers.keys", "subgraph.plot", "subgraph.set_yscale", "str", "len"], "function", ["None"], ["", "def", "set_networks_loss_subgraph", "(", "base_network", ",", "subgraph", ",", "networks_to_compare", "=", "[", "]", ",", "download", "=", "False", ",", "networks_type_str", "=", "'Regular'", ",", "scale", "=", "'regular'", ",", "axis_size", "=", "14.5", ")", ":", "\n", "    ", "subgraph", ".", "set_ylabel", "(", "'Training Loss'", ",", "fontsize", "=", "axis_size", ")", "\n", "subgraph", ".", "set_xlabel", "(", "'$\\eta_{0}$ Iterations'", ",", "fontsize", "=", "axis_size", ")", "\n", "\n", "lines", "=", "list", "(", "plt_lines", ".", "lineStyles", ".", "keys", "(", ")", ")", "\n", "markers", "=", "list", "(", "plt_markers", ".", "MarkerStyle", ".", "markers", ".", "keys", "(", ")", ")", "\n", "#lines = [lines[i] for i in [0,1,3]]", "\n", "lines", "=", "[", "lines", "[", "0", "]", ",", "lines", "[", "0", "]", ",", "lines", "[", "1", "]", ",", "lines", "[", "1", "]", ",", "lines", "[", "3", "]", "]", "\n", "markers", "=", "[", "markers", "[", "i", "]", "for", "i", "in", "[", "2", ",", "3", ",", "4", ",", "12", ",", "14", ",", "21", ",", "24", "]", "]", "\n", "markers", "=", "[", "markers", "[", "3", "]", ",", "markers", "[", "0", "]", ",", "markers", "[", "1", "]", ",", "markers", "[", "2", "]", ",", "markers", "[", "4", "]", ",", "markers", "[", "5", "]", ",", "markers", "[", "6", "]", "]", "\n", "\n", "#plot", "\n", "subgraph", ".", "plot", "(", "base_network", ".", "train_time_stamps", ",", "base_network", ".", "train_losses", ",", "label", "=", "'$\\eta_{0}$'", ",", "linestyle", "=", "(", "0", ",", "(", "1", ",", "1", ")", ")", ",", "marker", "=", "markers", "[", "0", "]", ",", "markevery", "=", "10", ",", "markersize", "=", "7", ")", "#linewidth = 3", "\n", "for", "i", ",", "network", "in", "enumerate", "(", "networks_to_compare", ")", ":", "\n", "        ", "subgraph", ".", "plot", "(", "base_network", ".", "train_time_stamps", ",", "network", ".", "train_losses", ",", "label", "=", "'$\\eta_{0}/$'", "+", "str", "(", "network", ".", "lr_ratio_from_base", ")", ",", "linestyle", "=", "(", "0.25", "*", "(", "i", "+", "1", ")", ",", "(", "1", ",", "1", ")", ")", ",", "marker", "=", "markers", "[", "(", "1", "+", "i", ")", "%", "len", "(", "markers", ")", "]", ",", "markevery", "=", "10", ")", "\n", "\n", "", "subgraph", ".", "legend", "(", ")", "\n", "\n", "if", "scale", "==", "'log'", ":", "\n", "        ", "subgraph", ".", "set_yscale", "(", "'log'", ")", "\n", "\n", "", "subgraph", ".", "set_xlim", "(", "left", "=", "0", ",", "right", "=", "base_network", ".", "train_time_stamps", "[", "-", "1", "]", ")", "\n", "subgraph", ".", "set_ylim", "(", "bottom", "=", "0", ")", "\n", "return", "subgraph", "\n", "\n"]], "home.repos.pwc.inspect_result.elkabzo_cont_disc_opt_dnn.None.utils.set_networks_distance_subgraph": [[154, 189], ["subgraph.set_ylabel", "subgraph.set_xlabel", "list", "list", "enumerate", "subgraph.plot", "enumerate", "subgraph.legend", "subgraph.set_xlim", "subgraph.set_ylim", "matplotlib.lines.lineStyles.keys", "matplotlib.markers.MarkerStyle.markers.keys", "networks_distance.append", "base_network_norms.append", "enumerate", "subgraph.plot", "subgraph.set_yscale", "torch.norm().cpu().detach().numpy", "networks_distance[].append", "torch.norm().cpu().detach().numpy", "torch.norm().cpu().detach", "str", "torch.norm().cpu().detach", "torch.norm().cpu", "len", "torch.norm().cpu", "torch.norm", "torch.norm"], "function", ["None"], ["", "def", "set_networks_distance_subgraph", "(", "base_network", ",", "subgraph", ",", "networks_to_compare", "=", "[", "]", ",", "download", "=", "False", ",", "networks_type_str", "=", "'Regular'", ",", "scale", "=", "'regular'", ",", "axis_size", "=", "14.5", ")", ":", "\n", "    ", "subgraph", ".", "set_ylabel", "(", "'Distance'", ",", "fontsize", "=", "axis_size", ")", "\n", "subgraph", ".", "set_xlabel", "(", "'$\\eta_{0}$ Iterations'", ",", "fontsize", "=", "axis_size", ")", "\n", "\n", "lines", "=", "list", "(", "plt_lines", ".", "lineStyles", ".", "keys", "(", ")", ")", "\n", "lines", "=", "[", "lines", "[", "i", "]", "for", "i", "in", "[", "0", ",", "1", ",", "3", "]", "]", "\n", "markers", "=", "list", "(", "plt_markers", ".", "MarkerStyle", ".", "markers", ".", "keys", "(", ")", ")", "\n", "markers", "=", "[", "markers", "[", "i", "]", "for", "i", "in", "[", "2", ",", "3", ",", "4", ",", "12", ",", "14", ",", "21", ",", "24", "]", "]", "\n", "markers", "=", "[", "markers", "[", "3", "]", ",", "markers", "[", "0", "]", ",", "markers", "[", "1", "]", ",", "markers", "[", "2", "]", ",", "markers", "[", "4", "]", ",", "markers", "[", "5", "]", ",", "markers", "[", "6", "]", "]", "\n", "\n", "#initialize lists for plot", "\n", "base_network_norms", "=", "[", "]", "\n", "networks_distance", "=", "[", "]", "\n", "for", "compare_network", "in", "networks_to_compare", ":", "\n", "        ", "networks_distance", ".", "append", "(", "[", "]", ")", "\n", "\n", "#insert values into lists", "\n", "", "for", "i", ",", "train_weight", "in", "enumerate", "(", "base_network", ".", "train_weights", ")", ":", "\n", "        ", "base_network_norms", ".", "append", "(", "torch", ".", "norm", "(", "train_weight", "-", "base_network", ".", "train_weights", "[", "0", "]", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", "\n", "for", "j", ",", "compare_network", "in", "enumerate", "(", "networks_to_compare", ")", ":", "\n", "            ", "networks_distance", "[", "j", "]", ".", "append", "(", "torch", ".", "norm", "(", "base_network", ".", "train_weights", "[", "i", "]", "-", "compare_network", ".", "train_weights", "[", "i", "]", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "#plot", "\n", "#subgraph.plot(base_network.train_time_stamps[0:],base_network_norms[0:],label='$\\eta_{0}$ from init', linestyle = lines[0], marker=markers[0],markevery=10,markersize=7)", "\n", "", "", "subgraph", ".", "plot", "(", "base_network", ".", "train_time_stamps", "[", "0", ":", "]", ",", "base_network_norms", "[", "0", ":", "]", ",", "label", "=", "'$\\eta_{0}$ from init'", ",", "linestyle", "=", "(", "0", ",", "(", "1", ",", "1", ")", ")", ",", "marker", "=", "markers", "[", "0", "]", ",", "markevery", "=", "10", ",", "markersize", "=", "7", ")", "\n", "for", "j", ",", "compare_network", "in", "enumerate", "(", "networks_to_compare", ")", ":", "\n", "#subgraph.plot(base_network.train_time_stamps[0:],networks_distance[j][0:],label='$\\eta_{0}$ from $\\eta_{0}/$'+str(compare_network.lr_ratio_from_base),linestyle = lines[(1+j)%len(lines)], marker=markers[(1+j)%len(markers)],markevery=10)", "\n", "        ", "subgraph", ".", "plot", "(", "base_network", ".", "train_time_stamps", "[", "0", ":", "]", ",", "networks_distance", "[", "j", "]", "[", "0", ":", "]", ",", "label", "=", "'$\\eta_{0}$ from $\\eta_{0}/$'", "+", "str", "(", "compare_network", ".", "lr_ratio_from_base", ")", ",", "linestyle", "=", "(", "0.25", "*", "(", "j", "+", "1", ")", ",", "(", "1", ",", "1", ")", ")", ",", "marker", "=", "markers", "[", "(", "1", "+", "j", ")", "%", "len", "(", "markers", ")", "]", ",", "markevery", "=", "10", ")", "\n", "", "subgraph", ".", "legend", "(", ")", "\n", "if", "scale", "==", "'log'", ":", "\n", "        ", "subgraph", ".", "set_yscale", "(", "'log'", ")", "\n", "\n", "", "subgraph", ".", "set_xlim", "(", "left", "=", "0", ",", "right", "=", "base_network", ".", "train_time_stamps", "[", "-", "1", "]", ")", "\n", "subgraph", ".", "set_ylim", "(", "bottom", "=", "0", ",", "top", "=", "3.0", ")", "\n", "return", "subgraph", "\n", "\n"]], "home.repos.pwc.inspect_result.elkabzo_cont_disc_opt_dnn.None.utils.plot_all_graphs": [[190, 220], ["matplotlib.subplots", "matplotlib.rcParams.update", "figure.suptitle", "utils.set_networks_loss_subgraph", "utils.set_networks_distance_subgraph", "matplotlib.tight_layout", "matplotlib.show", "matplotlib.savefig", "networks_type_str.lower"], "function", ["home.repos.pwc.inspect_result.elkabzo_cont_disc_opt_dnn.None.utils.set_networks_loss_subgraph", "home.repos.pwc.inspect_result.elkabzo_cont_disc_opt_dnn.None.utils.set_networks_distance_subgraph"], ["", "def", "plot_all_graphs", "(", "base_network", ",", "networks_to_compare", "=", "[", "]", ",", "download", "=", "False", ",", "networks_type_str", "=", "'Regular'", ",", "scale", "=", "'regular'", ",", "figsize", "=", "(", "6", ",", "3.65", ")", ",", "title_size", "=", "15", ",", "general_size", "=", "10.5", ",", "axis_size", "=", "14.5", ",", "title_height", "=", "0.96", ",", "fontstyle", "=", "'normal'", ",", "fontbold", "=", "'normal'", ")", ":", "\n", "\n", "    ", "if", "networks_type_str", "==", "'Linear'", ":", "\n", "        ", "title", "=", "'Fully Connected, Linear Activation'", "\n", "figsize", "=", "(", "6", ",", "3.05", ")", "\n", "general_size", "=", "9", "\n", "", "if", "networks_type_str", "==", "'ReLU'", ":", "\n", "        ", "title", "=", "'Fully Connected, Rectified Linear Activation'", "\n", "figsize", "=", "(", "6", ",", "3.05", ")", "\n", "general_size", "=", "9", "\n", "", "if", "networks_type_str", "==", "'conv_subsample'", ":", "\n", "        ", "title", "=", "'Convolutional, Adapted'", "\n", "", "if", "networks_type_str", "==", "'conv_max_pool'", ":", "\n", "        ", "title", "=", "'Convolutional, Off-the-Shelf'", "\n", "\n", "", "figure", ",", "subgraphs", "=", "plt", ".", "subplots", "(", "1", ",", "2", ",", "figsize", "=", "figsize", ")", "# For fully connected used figsize = (6,3.05)", "\n", "\n", "plt", ".", "rcParams", ".", "update", "(", "{", "'legend.fontsize'", ":", "general_size", "}", ")", "\n", "\n", "figure", ".", "suptitle", "(", "title", ",", "fontstyle", "=", "fontstyle", ",", "fontweight", "=", "fontbold", ",", "fontsize", "=", "title_size", ",", "y", "=", "title_height", ")", "\n", "\n", "set_networks_loss_subgraph", "(", "base_network", ",", "subgraphs", "[", "0", "]", ",", "networks_to_compare", "=", "networks_to_compare", ",", "download", "=", "download", ",", "networks_type_str", "=", "networks_type_str", ",", "scale", "=", "scale", ",", "axis_size", "=", "axis_size", ")", "\n", "set_networks_distance_subgraph", "(", "base_network", ",", "subgraphs", "[", "1", "]", ",", "networks_to_compare", "=", "networks_to_compare", ",", "download", "=", "download", ",", "networks_type_str", "=", "networks_type_str", ",", "scale", "=", "scale", ",", "axis_size", "=", "axis_size", ")", "\n", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "\n", "if", "download", "==", "True", ":", "\n", "        ", "plt", ".", "savefig", "(", "'plots/'", "+", "'Graph_'", "+", "networks_type_str", ".", "lower", "(", ")", "+", "'.png'", ",", "bbox_inches", "=", "\"tight\"", ")", "\n", "\n", "", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.elkabzo_cont_disc_opt_dnn.None.utils.experiment": [[221, 244], ["utils.data_load", "torch.device", "model.Network", "network.to.to", "network.to.save_state", "network.to.init_train_params", "network.to.train", "zip", "torch.load", "cur_network.to.to", "networks_compare.append", "network_to_compare.init_train_params", "network_to_compare.train", "torch.cuda.is_available", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.elkabzo_cont_disc_opt_dnn.None.utils.data_load", "home.repos.pwc.inspect_result.elkabzo_cont_disc_opt_dnn.None.model.Network.save_state", "home.repos.pwc.inspect_result.elkabzo_cont_disc_opt_dnn.None.model.Network.init_train_params", "home.repos.pwc.inspect_result.elkabzo_cont_disc_opt_dnn.None.model.Network.train", "home.repos.pwc.inspect_result.elkabzo_cont_disc_opt_dnn.None.model.Network.init_train_params", "home.repos.pwc.inspect_result.elkabzo_cont_disc_opt_dnn.None.model.Network.train"], ["", "def", "experiment", "(", "compare_ratios", "=", "[", "]", ",", "batch_size_train", "=", "1000", ",", "n_epochs", "=", "10000", ",", "learning_rate", "=", "0.01", ",", "deviation", "=", "0.01", ",", "layers_size", "=", "[", "28", "*", "28", ",", "50", ",", "50", ",", "10", "]", ",", "activation", "=", "'Linear'", ",", "download", "=", "False", ",", "scale", "=", "'log'", ")", ":", "\n", "\n", "#data", "\n", "    ", "train_loader", ",", "test_loader", "=", "data_load", "(", "batch_size_train", ")", "\n", "\n", "#initialize networks", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "network", "=", "Network", "(", "train_loader", ",", "test_loader", ",", "label", "=", "activation", "+", "'_h='", "+", "str", "(", "learning_rate", ")", ",", "deviation", "=", "deviation", ",", "layers_size", "=", "layers_size", ",", "activation", "=", "activation", ",", "batch_size_train", "=", "batch_size_train", ",", "init_mode", "=", "'xavier'", ")", "\n", "network", "=", "network", ".", "to", "(", "device", ")", "\n", "network", ".", "save_state", "(", ")", "\n", "networks_compare", "=", "[", "]", "\n", "for", "ratio", "in", "compare_ratios", ":", "\n", "        ", "cur_network", "=", "torch", ".", "load", "(", "activation", "+", "'_h='", "+", "str", "(", "learning_rate", ")", "+", "'_model.pth'", ")", "\n", "cur_network", "=", "cur_network", ".", "to", "(", "device", ")", "\n", "cur_network", ".", "label", "=", "activation", "+", "'_h='", "+", "str", "(", "learning_rate", "/", "ratio", ")", "\n", "networks_compare", ".", "append", "(", "cur_network", ")", "\n", "\n", "#train networks", "\n", "", "network", ".", "init_train_params", "(", "n_epochs", ",", "learning_rate", ")", "\n", "network", ".", "train", "(", ")", "\n", "for", "ratio", ",", "network_to_compare", "in", "zip", "(", "compare_ratios", ",", "networks_compare", ")", ":", "\n", "        ", "network_to_compare", ".", "init_train_params", "(", "n_epochs", "*", "ratio", ",", "learning_rate", "/", "ratio", ",", "lr_ratio_from_base", "=", "ratio", ")", "\n", "network_to_compare", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.elkabzo_cont_disc_opt_dnn.None.utils.continue_training": [[254, 262], ["utils.data_load", "torch.load", "torch.device", "network.to.to", "network.to.train", "torch.cuda.is_available"], "function", ["home.repos.pwc.inspect_result.elkabzo_cont_disc_opt_dnn.None.utils.data_load", "home.repos.pwc.inspect_result.elkabzo_cont_disc_opt_dnn.None.model.Network.train"], ["", "", "def", "continue_training", "(", "network_file_name", "=", "'Linear_h=0.005_model.pth'", ",", "compare_ratios", "=", "[", "]", ",", "batch_size_train", "=", "1000", ",", "n_epochs", "=", "10000", ",", "learning_rate", "=", "0.01", ",", "deviation", "=", "0.01", ",", "layers_size", "=", "[", "28", "*", "28", ",", "50", ",", "50", ",", "10", "]", ",", "activation", "=", "'Linear'", ",", "download", "=", "False", ")", ":", "\n", "\n", "#data", "\n", "    ", "train_loader", ",", "test_loader", "=", "data_load", "(", "batch_size_train", ")", "\n", "network", "=", "torch", ".", "load", "(", "network_file_name", ")", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "network", "=", "network", ".", "to", "(", "device", ")", "\n", "network", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.elkabzo_cont_disc_opt_dnn.None.utils.load_networks_file_paths": [[263, 269], ["networks_file_paths.append", "networks_file_paths.append", "str", "str"], "function", ["None"], ["", "def", "load_networks_file_paths", "(", "activation", "=", "'Linear'", ",", "stepsize", "=", "0.001", ",", "ratios", "=", "[", "2", ",", "5", ",", "10", ",", "20", "]", ")", ":", "\n", "    ", "networks_file_paths", "=", "[", "]", "\n", "networks_file_paths", ".", "append", "(", "activation", "+", "'_h='", "+", "str", "(", "stepsize", ")", "+", "'_model.pth'", ")", "\n", "for", "ratio", "in", "ratios", ":", "\n", "        ", "networks_file_paths", ".", "append", "(", "activation", "+", "'_h='", "+", "str", "(", "stepsize", "/", "ratio", ")", "+", "'_model.pth'", ")", "\n", "", "return", "networks_file_paths", "\n", "\n"]], "home.repos.pwc.inspect_result.elkabzo_cont_disc_opt_dnn.None.utils.plot_trained_networks_of_a_single_type": [[270, 275], ["utils.load_networks_file_paths", "torch.load", "utils.plot_all_graphs", "torch.load"], "function", ["home.repos.pwc.inspect_result.elkabzo_cont_disc_opt_dnn.None.utils.load_networks_file_paths", "home.repos.pwc.inspect_result.elkabzo_cont_disc_opt_dnn.None.utils.plot_all_graphs"], ["", "def", "plot_trained_networks_of_a_single_type", "(", "activation", "=", "'Linear'", ",", "stepsize", "=", "0.001", ",", "ratios", "=", "[", "2", ",", "5", ",", "10", ",", "20", "]", ",", "download", "=", "True", ",", "scale", "=", "'regular'", ")", ":", "\n", "    ", "network_file_paths", "=", "load_networks_file_paths", "(", "activation", "=", "activation", ",", "stepsize", "=", "stepsize", ",", "ratios", "=", "ratios", ")", "\n", "network", "=", "torch", ".", "load", "(", "network_file_paths", "[", "0", "]", ")", "\n", "networks_compare", "=", "[", "torch", ".", "load", "(", "network_file_path", ")", "for", "network_file_path", "in", "network_file_paths", "[", "1", ":", "]", "]", "\n", "plot_all_graphs", "(", "network", ",", "networks_to_compare", "=", "networks_compare", ",", "networks_type_str", "=", "activation", ",", "download", "=", "download", ",", "scale", "=", "scale", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.elkabzo_cont_disc_opt_dnn.None.utils.plot_trained_networks_of_all_types": [[276, 281], ["utils.plot_trained_networks_of_a_single_type", "utils.plot_trained_networks_of_a_single_type", "utils.plot_trained_networks_of_a_single_type", "utils.plot_trained_networks_of_a_single_type"], "function", ["home.repos.pwc.inspect_result.elkabzo_cont_disc_opt_dnn.None.utils.plot_trained_networks_of_a_single_type", "home.repos.pwc.inspect_result.elkabzo_cont_disc_opt_dnn.None.utils.plot_trained_networks_of_a_single_type", "home.repos.pwc.inspect_result.elkabzo_cont_disc_opt_dnn.None.utils.plot_trained_networks_of_a_single_type", "home.repos.pwc.inspect_result.elkabzo_cont_disc_opt_dnn.None.utils.plot_trained_networks_of_a_single_type"], ["", "def", "plot_trained_networks_of_all_types", "(", "stepsize", "=", "0.001", ",", "ratios", "=", "[", "2", ",", "5", ",", "10", ",", "20", "]", ",", "scale", "=", "'regular'", ")", ":", "\n", "    ", "plot_trained_networks_of_a_single_type", "(", "activation", "=", "'Linear'", ",", "stepsize", "=", "stepsize", ",", "ratios", "=", "ratios", ",", "scale", "=", "scale", ")", "\n", "plot_trained_networks_of_a_single_type", "(", "activation", "=", "'ReLU'", ",", "stepsize", "=", "stepsize", ",", "ratios", "=", "ratios", ",", "scale", "=", "scale", ")", "\n", "plot_trained_networks_of_a_single_type", "(", "activation", "=", "'conv_subsample'", ",", "stepsize", "=", "stepsize", ",", "ratios", "=", "ratios", ",", "scale", "=", "scale", ")", "\n", "plot_trained_networks_of_a_single_type", "(", "activation", "=", "'conv_max_pool'", ",", "stepsize", "=", "stepsize", ",", "ratios", "=", "ratios", ",", "scale", "=", "scale", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.elkabzo_cont_disc_opt_dnn.None.utils.general_all_experiments": [[282, 287], ["utils.experiment", "utils.experiment", "utils.experiment", "utils.experiment"], "function", ["home.repos.pwc.inspect_result.elkabzo_cont_disc_opt_dnn.None.utils.experiment", "home.repos.pwc.inspect_result.elkabzo_cont_disc_opt_dnn.None.utils.experiment", "home.repos.pwc.inspect_result.elkabzo_cont_disc_opt_dnn.None.utils.experiment", "home.repos.pwc.inspect_result.elkabzo_cont_disc_opt_dnn.None.utils.experiment"], ["", "def", "general_all_experiments", "(", "compare_ratios", "=", "[", "2", ",", "5", ",", "10", ",", "20", "]", ",", "n_epochs", "=", "10000", ",", "learning_rate", "=", "0.001", ",", "batch_size_train", "=", "1000", ")", ":", "\n", "    ", "experiment", "(", "activation", "=", "'Linear'", ",", "compare_ratios", "=", "compare_ratios", ",", "n_epochs", "=", "n_epochs", ",", "learning_rate", "=", "learning_rate", ",", "download", "=", "True", ",", "batch_size_train", "=", "batch_size_train", ")", "\n", "experiment", "(", "activation", "=", "'ReLU'", ",", "compare_ratios", "=", "compare_ratios", ",", "n_epochs", "=", "n_epochs", ",", "learning_rate", "=", "learning_rate", ",", "download", "=", "True", ",", "batch_size_train", "=", "batch_size_train", ")", "\n", "experiment", "(", "activation", "=", "'conv_subsample'", ",", "compare_ratios", "=", "compare_ratios", ",", "n_epochs", "=", "n_epochs", ",", "learning_rate", "=", "learning_rate", ",", "download", "=", "True", ",", "batch_size_train", "=", "batch_size_train", ")", "\n", "experiment", "(", "activation", "=", "'conv_max_pool'", ",", "compare_ratios", "=", "compare_ratios", ",", "n_epochs", "=", "n_epochs", ",", "learning_rate", "=", "learning_rate", ",", "download", "=", "True", ",", "batch_size_train", "=", "batch_size_train", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.elkabzo_cont_disc_opt_dnn.None.utils.run_specific_experiment": [[288, 305], ["utils.experiment", "utils.plot_trained_networks_of_a_single_type", "print"], "function", ["home.repos.pwc.inspect_result.elkabzo_cont_disc_opt_dnn.None.utils.experiment", "home.repos.pwc.inspect_result.elkabzo_cont_disc_opt_dnn.None.utils.plot_trained_networks_of_a_single_type"], ["", "def", "run_specific_experiment", "(", "experiment_type", "=", "None", ",", "compare_ratios", "=", "[", "2", ",", "5", ",", "10", ",", "20", "]", ",", "n_epochs", "=", "10000", ",", "learning_rate", "=", "0.001", ",", "batch_size_train", "=", "1000", ")", ":", "\n", "\n", "    ", "if", "experiment_type", "==", "'fully_connected_linear'", ":", "\n", "        ", "activation", "=", "'Linear'", "\n", "", "elif", "experiment_type", "==", "'fully_connected_relu'", ":", "\n", "        ", "activation", "=", "'ReLU'", "\n", "", "elif", "experiment_type", "==", "'conv_subsample'", ":", "\n", "        ", "activation", "=", "'conv_subsample'", "\n", "", "elif", "experiment_type", "==", "'conv_maxpool'", ":", "\n", "        ", "activation", "=", "'conv_max_pool'", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"no such experiment :\\'\"", ",", "experiment_type", ",", "\"\\'\"", ")", "\n", "return", "\n", "\n", "", "experiment", "(", "activation", "=", "activation", ",", "compare_ratios", "=", "compare_ratios", ",", "n_epochs", "=", "n_epochs", ",", "learning_rate", "=", "learning_rate", ",", "\n", "download", "=", "True", ",", "batch_size_train", "=", "batch_size_train", ")", "\n", "plot_trained_networks_of_a_single_type", "(", "activation", "=", "activation", ",", "stepsize", "=", "learning_rate", ",", "ratios", "=", "compare_ratios", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.elkabzo_cont_disc_opt_dnn.None.utils.super_fast_experiments_to_check_graph_style": [[306, 308], ["utils.general_all_experiments"], "function", ["home.repos.pwc.inspect_result.elkabzo_cont_disc_opt_dnn.None.utils.general_all_experiments"], ["", "def", "super_fast_experiments_to_check_graph_style", "(", ")", ":", "\n", "    ", "general_all_experiments", "(", "compare_ratios", "=", "[", "2", ",", "3", "]", ",", "n_epochs", "=", "1000", ",", "learning_rate", "=", "0.01", ",", "batch_size_train", "=", "20", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.elkabzo_cont_disc_opt_dnn.None.utils.semi_short_experiments_1hour_run": [[309, 311], ["utils.general_all_experiments"], "function", ["home.repos.pwc.inspect_result.elkabzo_cont_disc_opt_dnn.None.utils.general_all_experiments"], ["", "def", "semi_short_experiments_1hour_run", "(", ")", ":", "\n", "    ", "general_all_experiments", "(", "compare_ratios", "=", "[", "2", ",", "4", "]", ",", "n_epochs", "=", "10000", ",", "learning_rate", "=", "0.001", ",", "batch_size_train", "=", "100", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.elkabzo_cont_disc_opt_dnn.None.utils.full_scale_experiments": [[312, 319], ["torch.manual_seed", "torch.cuda.is_available", "utils.general_all_experiments", "torch.set_default_tensor_type"], "function", ["home.repos.pwc.inspect_result.elkabzo_cont_disc_opt_dnn.None.utils.general_all_experiments"], ["", "def", "full_scale_experiments", "(", ")", ":", "\n", "    ", "random_seed", "=", "1", "\n", "torch", ".", "backends", ".", "cudnn", ".", "enabled", "=", "False", "\n", "torch", ".", "manual_seed", "(", "random_seed", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "torch", ".", "set_default_tensor_type", "(", "'torch.cuda.FloatTensor'", ")", "\n", "", "general_all_experiments", "(", "compare_ratios", "=", "[", "2", ",", "5", ",", "10", ",", "20", "]", ",", "n_epochs", "=", "10000", ",", "learning_rate", "=", "0.001", ",", "batch_size_train", "=", "1000", ")", "", "", ""]]}