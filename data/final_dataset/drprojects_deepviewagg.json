{"home.repos.pwc.inspect_result.drprojects_deepviewagg.None.eval.main": [[7, 19], ["hydra.main", "omegaconf.OmegaConf.set_struct", "torch_points3d.trainer.Trainer", "torch_points3d.trainer.Trainer.eval", "hydra.core.global_hydra.GlobalHydra.get_state().clear", "print", "omegaconf.OmegaConf.to_yaml", "hydra.core.global_hydra.GlobalHydra.get_state"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.download-scannet.main", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.panoptic_tracker.InstanceAPMeter.eval", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.WindowBuffer.clear"], ["@", "hydra", ".", "main", "(", "config_path", "=", "\"conf\"", ",", "config_name", "=", "\"eval\"", ")", "\n", "def", "main", "(", "cfg", ")", ":", "\n", "    ", "OmegaConf", ".", "set_struct", "(", "cfg", ",", "False", ")", "# This allows getattr and hasattr methods to function correctly", "\n", "if", "cfg", ".", "pretty_print", ":", "\n", "        ", "print", "(", "OmegaConf", ".", "to_yaml", "(", "cfg", ")", ")", "\n", "\n", "", "trainer", "=", "Trainer", "(", "cfg", ")", "\n", "trainer", ".", "eval", "(", ")", "\n", "#", "\n", "# # https://github.com/facebookresearch/hydra/issues/440", "\n", "GlobalHydra", ".", "get_state", "(", ")", ".", "clear", "(", ")", "\n", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.None.train.main": [[7, 19], ["hydra.main", "omegaconf.OmegaConf.set_struct", "torch_points3d.trainer.Trainer", "torch_points3d.trainer.Trainer.train", "hydra.core.global_hydra.GlobalHydra.get_state().clear", "print", "omegaconf.OmegaConf.to_yaml", "hydra.core.global_hydra.GlobalHydra.get_state"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.download-scannet.main", "home.repos.pwc.inspect_result.drprojects_deepviewagg.modalities.image.CityscapesResNet18TruncatedLayer4.train", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.WindowBuffer.clear"], ["@", "hydra", ".", "main", "(", "config_path", "=", "\"conf\"", ",", "config_name", "=", "\"config\"", ")", "\n", "def", "main", "(", "cfg", ")", ":", "\n", "    ", "OmegaConf", ".", "set_struct", "(", "cfg", ",", "False", ")", "# This allows getattr and hasattr methods to function correctly", "\n", "if", "cfg", ".", "pretty_print", ":", "\n", "        ", "print", "(", "OmegaConf", ".", "to_yaml", "(", "cfg", ")", ")", "\n", "\n", "", "trainer", "=", "Trainer", "(", "cfg", ")", "\n", "trainer", ".", "train", "(", ")", "\n", "#", "\n", "# # https://github.com/facebookresearch/hydra/issues/440", "\n", "GlobalHydra", ".", "get_state", "(", ")", ".", "clear", "(", ")", "\n", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.torch_points3d.trainer.Trainer.__init__": [[44, 47], ["trainer.Trainer._initialize_trainer"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.torch_points3d.trainer.Trainer._initialize_trainer"], ["def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "self", ".", "_cfg", "=", "cfg", "\n", "self", ".", "_initialize_trainer", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.torch_points3d.trainer.Trainer._initialize_trainer": [[48, 139], ["torch.device", "log.info", "torch_points3d.metrics.model_checkpoint.ModelCheckpoint", "log.info", "trainer.Trainer._model.log_optimizers", "log.info", "trainer.Trainer._dataset.create_dataloaders", "log.info", "trainer.Trainer._model.verify_data", "getattr", "trainer.Trainer._dataset.resolve_saving_stage", "trainer.Trainer._dataset.get_tracker", "trainer.Trainer._model.to", "bool", "bool", "torch.cuda.is_available", "torch.cuda.set_device", "torch_points3d.utils.wandb_utils.Wandb.launch", "torch_points3d.datasets.dataset_factory.instantiate_dataset", "trainer.Trainer._checkpoint.create_model", "torch_points3d.datasets.dataset_factory.instantiate_dataset", "torch_points3d.models.model_factory.instantiate_model", "trainer.Trainer._model.instantiate_optimizers", "trainer.Trainer._model.set_pretrained_weights", "sum", "torch_points3d.utils.wandb_utils.Wandb.launch", "torch_points3d.visualization.Visualizer", "copy.deepcopy", "trainer.Trainer._checkpoint.validate", "log.warning", "os.getcwd", "param.numel", "trainer.Trainer._model.parameters"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.device", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.log_optimizers", "home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.base_dataset.BaseDataset.create_dataloaders", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.verify_data", "home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.base_dataset.BaseDataset.resolve_saving_stage", "home.repos.pwc.inspect_result.drprojects_deepviewagg.classification.modelnet.ModelNetDataset.get_tracker", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.wandb_utils.Wandb.launch", "home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.dataset_factory.instantiate_dataset", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.ModelCheckpoint.create_model", "home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.dataset_factory.instantiate_dataset", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.model_factory.instantiate_model", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.instantiate_optimizers", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.set_pretrained_weights", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.wandb_utils.Wandb.launch", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.ModelCheckpoint.validate"], ["", "def", "_initialize_trainer", "(", "self", ")", ":", "\n", "# Enable CUDNN BACKEND", "\n", "        ", "torch", ".", "backends", ".", "cudnn", ".", "enabled", "=", "self", ".", "enable_cudnn", "\n", "\n", "if", "not", "self", ".", "has_training", ":", "\n", "            ", "self", ".", "_cfg", ".", "training", "=", "self", ".", "_cfg", "\n", "resume", "=", "bool", "(", "self", ".", "_cfg", ".", "checkpoint_dir", ")", "\n", "", "else", ":", "\n", "            ", "resume", "=", "bool", "(", "self", ".", "_cfg", ".", "training", ".", "checkpoint_dir", ")", "\n", "\n", "# Get device", "\n", "", "if", "self", ".", "_cfg", ".", "training", ".", "cuda", ">", "-", "1", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "device", "=", "\"cuda\"", "\n", "torch", ".", "cuda", ".", "set_device", "(", "self", ".", "_cfg", ".", "training", ".", "cuda", ")", "\n", "", "else", ":", "\n", "            ", "device", "=", "\"cpu\"", "\n", "", "self", ".", "_device", "=", "torch", ".", "device", "(", "device", ")", "\n", "log", ".", "info", "(", "\"DEVICE : {}\"", ".", "format", "(", "self", ".", "_device", ")", ")", "\n", "\n", "# Profiling", "\n", "if", "self", ".", "profiling", ":", "\n", "# Set the num_workers as torch.utils.bottleneck doesn't work", "\n", "# well with it", "\n", "            ", "self", ".", "_cfg", ".", "training", ".", "num_workers", "=", "0", "\n", "\n", "# Start Wandb if public", "\n", "", "if", "self", ".", "wandb_log", ":", "\n", "            ", "Wandb", ".", "launch", "(", "\n", "self", ".", "_cfg", ",", "self", ".", "_cfg", ".", "training", ".", "wandb", ".", "public", "and", "self", ".", "wandb_log", ")", "\n", "\n", "# Checkpoint", "\n", "", "self", ".", "_checkpoint", ":", "ModelCheckpoint", "=", "ModelCheckpoint", "(", "\n", "self", ".", "_cfg", ".", "training", ".", "checkpoint_dir", ",", "self", ".", "_cfg", ".", "model_name", ",", "\n", "\"\"", ",", "run_config", "=", "self", ".", "_cfg", ",", "resume", "=", "resume", ")", "\n", "\n", "# Recover the merged config from Checkpoint", "\n", "self", ".", "_cfg", "=", "self", ".", "_checkpoint", ".", "run_config", "\n", "\n", "# Create model and datasets", "\n", "if", "not", "self", ".", "_checkpoint", ".", "is_empty", ":", "\n", "            ", "self", ".", "_dataset", ":", "BaseDataset", "=", "instantiate_dataset", "(", "self", ".", "_cfg", ".", "data", ")", "\n", "self", ".", "_model", ":", "BaseModel", "=", "self", ".", "_checkpoint", ".", "create_model", "(", "\n", "self", ".", "_dataset", ",", "weight_name", "=", "self", ".", "_cfg", ".", "training", ".", "weight_name", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_dataset", ":", "BaseDataset", "=", "instantiate_dataset", "(", "self", ".", "_cfg", ".", "data", ")", "\n", "self", ".", "_model", ":", "BaseModel", "=", "instantiate_model", "(", "\n", "copy", ".", "deepcopy", "(", "self", ".", "_cfg", ")", ",", "self", ".", "_dataset", ")", "\n", "self", ".", "_model", ".", "instantiate_optimizers", "(", "self", ".", "_cfg", ",", "\"cuda\"", "in", "device", ")", "\n", "self", ".", "_model", ".", "set_pretrained_weights", "(", ")", "\n", "if", "not", "self", ".", "_checkpoint", ".", "validate", "(", "self", ".", "_dataset", ".", "used_properties", ")", ":", "\n", "                ", "log", ".", "warning", "(", "\n", "\"The model will not be able to be used from pretrained \"", "\n", "\"weights without the corresponding dataset. Current \"", "\n", "\"properties are {}\"", ".", "format", "(", "self", ".", "_dataset", ".", "used_properties", ")", ")", "\n", "\n", "", "", "self", ".", "_checkpoint", ".", "dataset_properties", "=", "self", ".", "_dataset", ".", "used_properties", "\n", "\n", "log", ".", "info", "(", "self", ".", "_model", ")", "\n", "\n", "self", ".", "_model", ".", "log_optimizers", "(", ")", "\n", "log", ".", "info", "(", "\"Model size = %i\"", ",", "sum", "(", "param", ".", "numel", "(", ")", "for", "param", "in", "self", ".", "_model", ".", "parameters", "(", ")", "if", "param", ".", "requires_grad", ")", ")", "\n", "\n", "# Set dataloaders", "\n", "self", ".", "_dataset", ".", "create_dataloaders", "(", "\n", "self", ".", "_model", ",", "\n", "self", ".", "_cfg", ".", "training", ".", "batch_size", ",", "\n", "self", ".", "_cfg", ".", "training", ".", "shuffle", ",", "\n", "self", ".", "_cfg", ".", "training", ".", "num_workers", ",", "\n", "self", ".", "precompute_multi_scale", ",", "\n", ")", "\n", "log", ".", "info", "(", "self", ".", "_dataset", ")", "\n", "\n", "# Verify attributes in dataset", "\n", "self", ".", "_model", ".", "verify_data", "(", "self", ".", "_dataset", ".", "train_dataset", "[", "0", "]", ")", "\n", "\n", "# Choose selection stage", "\n", "selection_stage", "=", "getattr", "(", "self", ".", "_cfg", ",", "\"selection_stage\"", ",", "\"\"", ")", "\n", "self", ".", "_checkpoint", ".", "selection_stage", "=", "self", ".", "_dataset", ".", "resolve_saving_stage", "(", "\n", "selection_stage", ")", "\n", "self", ".", "_tracker", ":", "BaseTracker", "=", "self", ".", "_dataset", ".", "get_tracker", "(", "\n", "self", ".", "wandb_log", ",", "self", ".", "tensorboard_log", ")", "\n", "\n", "if", "self", ".", "wandb_log", ":", "\n", "            ", "Wandb", ".", "launch", "(", "self", ".", "_cfg", ",", "not", "self", ".", "_cfg", ".", "training", ".", "wandb", ".", "public", "and", "self", ".", "wandb_log", ")", "\n", "\n", "# Run training / evaluation", "\n", "", "self", ".", "_model", "=", "self", ".", "_model", ".", "to", "(", "self", ".", "_device", ")", "\n", "if", "self", ".", "has_visualization", ":", "\n", "            ", "self", ".", "_visualizer", "=", "Visualizer", "(", "\n", "self", ".", "_cfg", ".", "visualization", ",", "self", ".", "_dataset", ".", "num_batches", ",", "\n", "self", ".", "_dataset", ".", "batch_size", ",", "os", ".", "getcwd", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.torch_points3d.trainer.Trainer.train": [[140, 164], ["range", "log.info", "trainer.Trainer._train_epoch", "trainer.Trainer._test_epoch", "trainer.Trainer._test_epoch", "trainer.Trainer._test_epoch"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.torch_points3d.trainer.Trainer._train_epoch", "home.repos.pwc.inspect_result.drprojects_deepviewagg.torch_points3d.trainer.Trainer._test_epoch", "home.repos.pwc.inspect_result.drprojects_deepviewagg.torch_points3d.trainer.Trainer._test_epoch", "home.repos.pwc.inspect_result.drprojects_deepviewagg.torch_points3d.trainer.Trainer._test_epoch"], ["", "", "def", "train", "(", "self", ")", ":", "\n", "        ", "self", ".", "_is_training", "=", "True", "\n", "\n", "for", "epoch", "in", "range", "(", "self", ".", "_checkpoint", ".", "start_epoch", ",", "self", ".", "_cfg", ".", "training", ".", "epochs", ")", ":", "\n", "            ", "log", ".", "info", "(", "\"EPOCH %i / %i\"", ",", "epoch", ",", "self", ".", "_cfg", ".", "training", ".", "epochs", ")", "\n", "\n", "self", ".", "_train_epoch", "(", "epoch", ")", "\n", "\n", "if", "self", ".", "profiling", ":", "\n", "                ", "return", "0", "\n", "\n", "", "if", "epoch", "%", "self", ".", "eval_frequency", "!=", "0", ":", "\n", "                ", "continue", "\n", "\n", "", "if", "self", ".", "_dataset", ".", "has_val_loader", ":", "\n", "                ", "self", ".", "_test_epoch", "(", "epoch", ",", "\"val\"", ")", "\n", "\n", "", "if", "self", ".", "_dataset", ".", "has_test_loaders", ":", "\n", "                ", "self", ".", "_test_epoch", "(", "epoch", ",", "\"test\"", ")", "\n", "\n", "# Single test evaluation in resume case", "\n", "", "", "if", "self", ".", "_checkpoint", ".", "start_epoch", ">", "self", ".", "_cfg", ".", "training", ".", "epochs", ":", "\n", "            ", "if", "self", ".", "_dataset", ".", "has_test_loaders", ":", "\n", "                ", "self", ".", "_test_epoch", "(", "epoch", ",", "\"test\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.torch_points3d.trainer.Trainer.eval": [[165, 176], ["trainer.Trainer._test_epoch", "trainer.Trainer._test_epoch"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.torch_points3d.trainer.Trainer._test_epoch", "home.repos.pwc.inspect_result.drprojects_deepviewagg.torch_points3d.trainer.Trainer._test_epoch"], ["", "", "", "def", "eval", "(", "self", ",", "stage_name", "=", "\"\"", ")", ":", "\n", "        ", "self", ".", "_is_training", "=", "False", "\n", "\n", "epoch", "=", "self", ".", "_checkpoint", ".", "start_epoch", "\n", "if", "self", ".", "_dataset", ".", "has_val_loader", ":", "\n", "            ", "if", "not", "stage_name", "or", "stage_name", "==", "\"val\"", ":", "\n", "                ", "self", ".", "_test_epoch", "(", "epoch", ",", "\"val\"", ")", "\n", "\n", "", "", "if", "self", ".", "_dataset", ".", "has_test_loaders", ":", "\n", "            ", "if", "not", "stage_name", "or", "stage_name", "==", "\"test\"", ":", "\n", "                ", "self", ".", "_test_epoch", "(", "epoch", ",", "\"test\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.torch_points3d.trainer.Trainer._finalize_epoch": [[177, 187], ["trainer.Trainer._tracker.finalise", "trainer.Trainer._tracker.publish", "trainer.Trainer._checkpoint.save_best_models_under_current_metrics", "torch_points3d.utils.wandb_utils.Wandb.add_file", "log.info"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.object_detection_tracker.ObjectDetectionTracker.finalise", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.base_tracker.BaseTracker.publish", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.ModelCheckpoint.save_best_models_under_current_metrics", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.wandb_utils.Wandb.add_file"], ["", "", "", "def", "_finalize_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "_tracker", ".", "finalise", "(", "**", "self", ".", "tracker_options", ")", "\n", "if", "self", ".", "_is_training", ":", "\n", "            ", "metrics", "=", "self", ".", "_tracker", ".", "publish", "(", "epoch", ")", "\n", "self", ".", "_checkpoint", ".", "save_best_models_under_current_metrics", "(", "\n", "self", ".", "_model", ",", "metrics", ",", "self", ".", "_tracker", ".", "metric_func", ")", "\n", "if", "self", ".", "wandb_log", "and", "self", ".", "_cfg", ".", "training", ".", "wandb", ".", "public", ":", "\n", "                ", "Wandb", ".", "add_file", "(", "self", ".", "_checkpoint", ".", "checkpoint_path", ")", "\n", "", "if", "self", ".", "_tracker", ".", "_stage", "==", "\"train\"", ":", "\n", "                ", "log", ".", "info", "(", "\"Learning rate = %f\"", "%", "self", ".", "_model", ".", "learning_rate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.torch_points3d.trainer.Trainer._train_epoch": [[188, 228], ["trainer.Trainer._model.train", "trainer.Trainer._tracker.reset", "trainer.Trainer._visualizer.reset", "time.time", "trainer.Trainer._finalize_epoch", "torch_points3d.metrics.colored_tqdm.Coloredtqdm", "enumerate", "time.time", "trainer.Trainer._model.set_input", "trainer.Trainer._model.optimize_parameters", "tq_train_loader.set_postfix", "time.time", "time.time", "trainer.Trainer._visualizer.save_visuals", "torch.no_grad", "trainer.Trainer._tracker.track", "trainer.Trainer._tracker.get_metrics", "float", "float", "trainer.Trainer._model.get_current_visuals", "time.time"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.modalities.image.CityscapesResNet18TruncatedLayer4.train", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.classification_tracker.ClassificationTracker.reset", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.classification_tracker.ClassificationTracker.reset", "home.repos.pwc.inspect_result.drprojects_deepviewagg.torch_points3d.trainer.Trainer._finalize_epoch", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.set_input", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.optimize_parameters", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.colored_tqdm.Coloredtqdm.set_postfix", "home.repos.pwc.inspect_result.drprojects_deepviewagg.visualization.visualizer.Visualizer.save_visuals", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.classification_tracker.ClassificationTracker.track", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.classification_tracker.ClassificationTracker.get_metrics", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.get_current_visuals"], ["", "", "", "def", "_train_epoch", "(", "self", ",", "epoch", ":", "int", ")", ":", "\n", "\n", "        ", "self", ".", "_model", ".", "train", "(", ")", "\n", "self", ".", "_tracker", ".", "reset", "(", "\"train\"", ")", "\n", "self", ".", "_visualizer", ".", "reset", "(", "epoch", ",", "\"train\"", ")", "\n", "train_loader", "=", "self", ".", "_dataset", ".", "train_dataloader", "\n", "\n", "iter_data_time", "=", "time", ".", "time", "(", ")", "\n", "with", "Ctq", "(", "train_loader", ")", "as", "tq_train_loader", ":", "\n", "            ", "for", "i", ",", "data", "in", "enumerate", "(", "tq_train_loader", ")", ":", "\n", "                ", "t_data", "=", "time", ".", "time", "(", ")", "-", "iter_data_time", "\n", "iter_start_time", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "_model", ".", "set_input", "(", "data", ",", "self", ".", "_device", ")", "\n", "self", ".", "_model", ".", "optimize_parameters", "(", "epoch", ",", "self", ".", "_dataset", ".", "batch_size", ")", "\n", "if", "i", "%", "10", "==", "0", ":", "\n", "                    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                        ", "self", ".", "_tracker", ".", "track", "(", "\n", "self", ".", "_model", ",", "data", "=", "data", ",", "**", "self", ".", "tracker_options", ")", "\n", "\n", "", "", "tq_train_loader", ".", "set_postfix", "(", "\n", "**", "self", ".", "_tracker", ".", "get_metrics", "(", ")", ",", "\n", "data_loading", "=", "float", "(", "t_data", ")", ",", "\n", "iteration", "=", "float", "(", "time", ".", "time", "(", ")", "-", "iter_start_time", ")", ",", "\n", "color", "=", "COLORS", ".", "TRAIN_COLOR", "\n", ")", "\n", "\n", "if", "self", ".", "_visualizer", ".", "is_active", ":", "\n", "                    ", "self", ".", "_visualizer", ".", "save_visuals", "(", "\n", "self", ".", "_model", ".", "get_current_visuals", "(", ")", ")", "\n", "\n", "", "iter_data_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "self", ".", "early_break", ":", "\n", "                    ", "break", "\n", "\n", "", "if", "self", ".", "profiling", ":", "\n", "                    ", "if", "i", ">", "self", ".", "num_batches", ":", "\n", "                        ", "return", "0", "\n", "\n", "", "", "", "", "self", ".", "_finalize_epoch", "(", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.torch_points3d.trainer.Trainer._test_epoch": [[229, 273], ["trainer.Trainer._cfg.get", "trainer.Trainer._model.eval", "trainer.Trainer._model.enable_dropout_in_eval", "trainer.Trainer._tracker.reset", "range", "trainer.Trainer._finalize_epoch", "trainer.Trainer._tracker.print_summary", "trainer.Trainer._visualizer.reset", "log.warning", "trainer.Trainer._dataset.has_labels", "trainer.Trainer.tracker_options.get", "torch_points3d.metrics.colored_tqdm.Coloredtqdm", "tq_loader.set_postfix", "torch.no_grad", "trainer.Trainer._model.set_input", "trainer.Trainer._tracker.track", "trainer.Trainer._visualizer.save_visuals", "torch.cuda.amp.autocast", "trainer.Trainer._model.forward", "trainer.Trainer._tracker.get_metrics", "trainer.Trainer._model.get_current_visuals", "trainer.Trainer._model.is_mixed_precision"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.panoptic_tracker.InstanceAPMeter.eval", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.enable_dropout_in_eval", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.classification_tracker.ClassificationTracker.reset", "home.repos.pwc.inspect_result.drprojects_deepviewagg.torch_points3d.trainer.Trainer._finalize_epoch", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.base_tracker.BaseTracker.print_summary", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.classification_tracker.ClassificationTracker.reset", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.kitti360_tracker.KITTI360Tracker.has_labels", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.colored_tqdm.Coloredtqdm.set_postfix", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.set_input", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.classification_tracker.ClassificationTracker.track", "home.repos.pwc.inspect_result.drprojects_deepviewagg.visualization.visualizer.Visualizer.save_visuals", "home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.forward", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.classification_tracker.ClassificationTracker.get_metrics", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.get_current_visuals", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.is_mixed_precision"], ["", "def", "_test_epoch", "(", "self", ",", "epoch", ",", "stage_name", ":", "str", ")", ":", "\n", "        ", "voting_runs", "=", "self", ".", "_cfg", ".", "get", "(", "\"voting_runs\"", ",", "1", ")", "\n", "if", "stage_name", "==", "\"test\"", ":", "\n", "            ", "loaders", "=", "self", ".", "_dataset", ".", "test_dataloaders", "\n", "", "else", ":", "\n", "            ", "loaders", "=", "[", "self", ".", "_dataset", ".", "val_dataloader", "]", "\n", "\n", "", "self", ".", "_model", ".", "eval", "(", ")", "\n", "if", "self", ".", "enable_dropout", ":", "\n", "            ", "self", ".", "_model", ".", "enable_dropout_in_eval", "(", ")", "\n", "\n", "", "for", "loader", "in", "loaders", ":", "\n", "            ", "stage_name", "=", "loader", ".", "dataset", ".", "name", "\n", "self", ".", "_tracker", ".", "reset", "(", "stage_name", ")", "\n", "if", "self", ".", "has_visualization", ":", "\n", "                ", "self", ".", "_visualizer", ".", "reset", "(", "epoch", ",", "stage_name", ")", "\n", "", "if", "not", "self", ".", "_dataset", ".", "has_labels", "(", "stage_name", ")", "and", "not", "self", ".", "tracker_options", ".", "get", "(", "\n", "\"make_submission\"", ",", "False", "\n", ")", ":", "# No label, no submission -> do nothing", "\n", "                ", "log", ".", "warning", "(", "\"No forward will be run on dataset %s.\"", "%", "stage_name", ")", "\n", "continue", "\n", "\n", "", "for", "i", "in", "range", "(", "voting_runs", ")", ":", "\n", "                ", "with", "Ctq", "(", "loader", ")", "as", "tq_loader", ":", "\n", "                    ", "for", "data", "in", "tq_loader", ":", "\n", "                        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                            ", "self", ".", "_model", ".", "set_input", "(", "data", ",", "self", ".", "_device", ")", "\n", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", "enabled", "=", "self", ".", "_model", ".", "is_mixed_precision", "(", ")", ")", ":", "\n", "                                ", "self", ".", "_model", ".", "forward", "(", "epoch", "=", "epoch", ")", "\n", "", "self", ".", "_tracker", ".", "track", "(", "self", ".", "_model", ",", "data", "=", "data", ",", "**", "self", ".", "tracker_options", ")", "\n", "", "tq_loader", ".", "set_postfix", "(", "**", "self", ".", "_tracker", ".", "get_metrics", "(", ")", ",", "color", "=", "COLORS", ".", "TEST_COLOR", ")", "\n", "\n", "if", "self", ".", "has_visualization", "and", "self", ".", "_visualizer", ".", "is_active", ":", "\n", "                            ", "self", ".", "_visualizer", ".", "save_visuals", "(", "self", ".", "_model", ".", "get_current_visuals", "(", ")", ")", "\n", "\n", "", "if", "self", ".", "early_break", ":", "\n", "                            ", "break", "\n", "\n", "", "if", "self", ".", "profiling", ":", "\n", "                            ", "if", "i", ">", "self", ".", "num_batches", ":", "\n", "                                ", "return", "0", "\n", "\n", "", "", "", "", "", "self", ".", "_finalize_epoch", "(", "epoch", ")", "\n", "self", ".", "_tracker", ".", "print_summary", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.torch_points3d.trainer.Trainer.early_break": [[274, 279], ["hasattr", "getattr"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "early_break", "(", "self", ")", ":", "\n", "        ", "if", "not", "hasattr", "(", "self", ".", "_cfg", ",", "\"debugging\"", ")", ":", "\n", "            ", "return", "False", "\n", "", "return", "getattr", "(", "self", ".", "_cfg", ".", "debugging", ",", "\"early_break\"", ",", "False", ")", "and", "self", ".", "_is_training", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.torch_points3d.trainer.Trainer.profiling": [[280, 285], ["getattr", "hasattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "profiling", "(", "self", ")", ":", "\n", "        ", "if", "not", "hasattr", "(", "self", ".", "_cfg", ",", "\"debugging\"", ")", ":", "\n", "            ", "return", "False", "\n", "", "return", "getattr", "(", "self", ".", "_cfg", ".", "debugging", ",", "\"profiling\"", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.torch_points3d.trainer.Trainer.num_batches": [[286, 291], ["getattr", "hasattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_batches", "(", "self", ")", ":", "\n", "        ", "if", "not", "hasattr", "(", "self", ".", "_cfg", ",", "\"debugging\"", ")", ":", "\n", "            ", "return", "None", "\n", "", "return", "getattr", "(", "self", ".", "_cfg", ".", "debugging", ",", "\"num_batches\"", ",", "50", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.torch_points3d.trainer.Trainer.enable_cudnn": [[292, 298], ["getattr", "getattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "enable_cudnn", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "has_training", ":", "\n", "            ", "return", "getattr", "(", "self", ".", "_cfg", ".", "training", ",", "\"enable_cudnn\"", ",", "True", ")", "\n", "", "else", ":", "\n", "            ", "return", "getattr", "(", "self", ".", "_cfg", ",", "\"enable_cudnn\"", ",", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.torch_points3d.trainer.Trainer.enable_dropout": [[299, 302], ["getattr"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "enable_dropout", "(", "self", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ".", "_cfg", ",", "\"enable_dropout\"", ",", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.torch_points3d.trainer.Trainer.has_visualization": [[303, 306], ["getattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "has_visualization", "(", "self", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ".", "_cfg", ",", "\"visualization\"", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.torch_points3d.trainer.Trainer.has_tensorboard": [[307, 310], ["getattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "has_tensorboard", "(", "self", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ".", "_cfg", ",", "\"tensorboard\"", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.torch_points3d.trainer.Trainer.has_training": [[311, 314], ["getattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "has_training", "(", "self", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ".", "_cfg", ",", "\"training\"", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.torch_points3d.trainer.Trainer.precompute_multi_scale": [[315, 321], ["getattr", "getattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "precompute_multi_scale", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "has_training", ":", "\n", "            ", "return", "self", ".", "_model", ".", "conv_type", "==", "\"PARTIAL_DENSE\"", "and", "getattr", "(", "self", ".", "_cfg", ".", "training", ",", "\"precompute_multi_scale\"", ",", "False", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "_model", ".", "conv_type", "==", "\"PARTIAL_DENSE\"", "and", "getattr", "(", "self", ".", "_cfg", ",", "\"precompute_multi_scale\"", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.torch_points3d.trainer.Trainer.wandb_log": [[322, 327], ["torch_points3d.utils.config.getattr_recursive"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.config.getattr_recursive"], ["", "", "@", "property", "\n", "def", "wandb_log", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "has_training", ":", "\n", "            ", "return", "False", "\n", "", "return", "getattr_recursive", "(", "self", ".", "_cfg", ",", "'training.wandb.log'", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.torch_points3d.trainer.Trainer.tensorboard_log": [[328, 333], ["torch_points3d.utils.config.getattr_recursive"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.config.getattr_recursive"], ["", "@", "property", "\n", "def", "tensorboard_log", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "has_training", ":", "\n", "            ", "return", "False", "\n", "", "return", "getattr_recursive", "(", "self", ".", "_cfg", ",", "'training.tensorboard.log'", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.torch_points3d.trainer.Trainer.tracker_options": [[334, 337], ["trainer.Trainer._cfg.get"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get"], ["", "@", "property", "\n", "def", "tracker_options", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_cfg", ".", "get", "(", "\"tracker_options\"", ",", "{", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.torch_points3d.trainer.Trainer.eval_frequency": [[338, 341], ["trainer.Trainer._cfg.get"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get"], ["", "@", "property", "\n", "def", "eval_frequency", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_cfg", ".", "get", "(", "\"eval_frequency\"", ",", "1", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.config.ConvolutionFormatFactory.check_is_dense_format": [[15, 28], ["conv_type.lower", "enums.ConvolutionFormat.PARTIAL_DENSE.value.lower", "conv_type.lower", "enums.ConvolutionFormat.MESSAGE_PASSING.value.lower", "conv_type.lower", "enums.ConvolutionFormat.SPARSE.value.lower", "conv_type.lower", "enums.ConvolutionFormat.DENSE.value.lower", "NotImplementedError"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "check_is_dense_format", "(", "conv_type", ")", ":", "\n", "        ", "if", "(", "\n", "conv_type", "is", "None", "\n", "or", "conv_type", ".", "lower", "(", ")", "==", "ConvolutionFormat", ".", "PARTIAL_DENSE", ".", "value", ".", "lower", "(", ")", "\n", "or", "conv_type", ".", "lower", "(", ")", "==", "ConvolutionFormat", ".", "MESSAGE_PASSING", ".", "value", ".", "lower", "(", ")", "\n", "or", "conv_type", ".", "lower", "(", ")", "==", "ConvolutionFormat", ".", "SPARSE", ".", "value", ".", "lower", "(", ")", "\n", ")", ":", "\n", "            ", "return", "False", "\n", "", "elif", "conv_type", ".", "lower", "(", ")", "==", "ConvolutionFormat", ".", "DENSE", ".", "value", ".", "lower", "(", ")", ":", "\n", "            ", "return", "True", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Conv type {} not supported\"", ".", "format", "(", "conv_type", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.config.Option.__init__": [[35, 38], ["opt.items", "setattr"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "for", "key", ",", "value", "in", "opt", ".", "items", "(", ")", ":", "\n", "            ", "setattr", "(", "self", ",", "key", ",", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.config.convert_to_base_obj": [[40, 42], ["config.Option", "omegaconf.OmegaConf.to_container"], "function", ["None"], ["", "", "", "def", "convert_to_base_obj", "(", "opt", ")", ":", "\n", "    ", "return", "Option", "(", "OmegaConf", ".", "to_container", "(", "opt", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.config.set_debugging_vars_to_global": [[44, 50], ["cfg.keys", "log.info", "key.upper", "torch_points3d.utils.debugging_vars.DEBUGGING_VARS.keys"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.mock.MockDatasetConfig.keys", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.mock.MockDatasetConfig.keys"], ["", "def", "set_debugging_vars_to_global", "(", "cfg", ")", ":", "\n", "    ", "for", "key", "in", "cfg", ".", "keys", "(", ")", ":", "\n", "        ", "key_upper", "=", "key", ".", "upper", "(", ")", "\n", "if", "key_upper", "in", "DEBUGGING_VARS", ".", "keys", "(", ")", ":", "\n", "            ", "DEBUGGING_VARS", "[", "key_upper", "]", "=", "cfg", "[", "key", "]", "\n", "", "", "log", ".", "info", "(", "DEBUGGING_VARS", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.config.is_list": [[52, 54], ["isinstance", "isinstance"], "function", ["None"], ["", "def", "is_list", "(", "entity", ")", ":", "\n", "    ", "return", "isinstance", "(", "entity", ",", "list", ")", "or", "isinstance", "(", "entity", ",", "ListConfig", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.config.is_iterable": [[56, 58], ["isinstance", "isinstance", "isinstance"], "function", ["None"], ["", "def", "is_iterable", "(", "entity", ")", ":", "\n", "    ", "return", "isinstance", "(", "entity", ",", "list", ")", "or", "isinstance", "(", "entity", ",", "ListConfig", ")", "or", "isinstance", "(", "entity", ",", "tuple", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.config.is_dict": [[60, 62], ["isinstance", "isinstance"], "function", ["None"], ["", "def", "is_dict", "(", "entity", ")", ":", "\n", "    ", "return", "isinstance", "(", "entity", ",", "dict", ")", "or", "isinstance", "(", "entity", ",", "DictConfig", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.config.create_symlink_from_eval_to_train": [[64, 70], ["os.path.join", "os.symlink", "os.getcwd", "os.path.exists", "os.makedirs", "len", "os.path.join", "os.listdir"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.makedirs", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "def", "create_symlink_from_eval_to_train", "(", "eval_checkpoint_dir", ")", ":", "\n", "    ", "root", "=", "os", ".", "path", ".", "join", "(", "os", ".", "getcwd", "(", ")", ",", "\"evals\"", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "root", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "root", ")", "\n", "", "num_files", "=", "len", "(", "os", ".", "listdir", "(", "root", ")", ")", "+", "1", "\n", "os", ".", "symlink", "(", "eval_checkpoint_dir", ",", "os", ".", "path", ".", "join", "(", "root", ",", "\"eval_{}\"", ".", "format", "(", "num_files", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.config.get_from_kwargs": [[72, 76], ["kwargs.pop"], "function", ["None"], ["", "def", "get_from_kwargs", "(", "kwargs", ",", "name", ")", ":", "\n", "    ", "module", "=", "kwargs", "[", "name", "]", "\n", "kwargs", ".", "pop", "(", "name", ")", "\n", "return", "module", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.config.fetch_arguments_from_list": [[78, 104], ["opt.items", "str", "config.is_list", "config.is_list", "config.is_list", "len", "list", "eval", "list", "getattr"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.config.is_list", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.config.is_list", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.config.is_list", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.panoptic_tracker.InstanceAPMeter.eval"], ["", "def", "fetch_arguments_from_list", "(", "opt", ",", "index", ",", "special_names", ")", ":", "\n", "    ", "\"\"\"Fetch the arguments for a single convolution from multiple lists\n    of arguments - for models specified in the compact format.\n    \"\"\"", "\n", "args", "=", "{", "}", "\n", "for", "o", ",", "v", "in", "opt", ".", "items", "(", ")", ":", "\n", "        ", "name", "=", "str", "(", "o", ")", "\n", "if", "is_list", "(", "v", ")", "and", "len", "(", "getattr", "(", "opt", ",", "o", ")", ")", ">", "0", ":", "\n", "            ", "if", "name", "[", "-", "1", "]", "==", "\"s\"", "and", "name", "not", "in", "special_names", ":", "\n", "                ", "name", "=", "name", "[", ":", "-", "1", "]", "\n", "", "v_index", "=", "v", "[", "index", "]", "\n", "if", "is_list", "(", "v_index", ")", ":", "\n", "                ", "v_index", "=", "list", "(", "v_index", ")", "\n", "\n", "# Evaluate arithmetic operations in the config", "\n", "", "try", ":", "\n", "                ", "v_index", "=", "eval", "(", "v_index", ")", "\n", "", "except", ":", "\n", "                ", "pass", "\n", "\n", "", "args", "[", "name", "]", "=", "v_index", "\n", "", "else", ":", "\n", "            ", "if", "is_list", "(", "v", ")", ":", "\n", "                ", "v", "=", "list", "(", "v", ")", "\n", "", "args", "[", "name", "]", "=", "v", "\n", "", "", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.config.flatten_compact_options": [[106, 116], ["range", "int", "flattenedOpts.append", "omegaconf.dictconfig.DictConfig", "config.fetch_arguments_from_list"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.config.fetch_arguments_from_list"], ["", "def", "flatten_compact_options", "(", "opt", ")", ":", "\n", "    ", "\"\"\"Converts from a dict of lists, to a list of dicts\"\"\"", "\n", "flattenedOpts", "=", "[", "]", "\n", "for", "index", "in", "range", "(", "int", "(", "1e6", ")", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "flattenedOpts", ".", "append", "(", "\n", "DictConfig", "(", "fetch_arguments_from_list", "(", "opt", ",", "index", ")", ")", ")", "\n", "", "except", "IndexError", ":", "\n", "            ", "break", "\n", "", "", "return", "flattenedOpts", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.config.fetch_modalities": [[118, 135], ["opt.items", "str().lower", "modalities.append", "hasattr", "hasattr", "hasattr", "hasattr", "hasattr", "str"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append"], ["", "def", "fetch_modalities", "(", "opt", ",", "modality_names", ")", ":", "\n", "    ", "\"\"\"Search for supported modalities in the compact format config.\"\"\"", "\n", "modalities", "=", "[", "]", "\n", "for", "o", ",", "v", "in", "opt", ".", "items", "(", ")", ":", "\n", "        ", "name", "=", "str", "(", "o", ")", ".", "lower", "(", ")", "\n", "if", "name", "not", "in", "modality_names", ":", "\n", "            ", "continue", "\n", "", "assert", "hasattr", "(", "v", ",", "'down_conv'", ")", "and", "hasattr", "(", "v", ",", "'atomic_pooling'", ")", "and", "hasattr", "(", "v", ",", "'view_pooling'", ")", "and", "hasattr", "(", "v", ",", "'fusion'", ")", "and", "hasattr", "(", "v", ",", "'branching_index'", ")", ",", "f\"Found '{name}' modality in the config but could not \"", "f\"recover all required attributes: ['down_conv', \"", "f\"'atomic_pooling', 'view_pooling', 'fusion', 'branching_index]\"", "\n", "modalities", ".", "append", "(", "name", ")", "\n", "", "return", "modalities", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.config.getattr_recursive": [[137, 156], ["isinstance", "attr.split", "len", "len", "getattr", "config.getattr_recursive", "type", "getattr", "len"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.split", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.config.getattr_recursive", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "def", "getattr_recursive", "(", "obj", ",", "attr", ",", "*", "args", ")", ":", "\n", "    ", "\"\"\"Same as getattr but supporting dot-separated attributes of attributes.\n    \n    Example\n    -------\n    getattr_recursive(my_object_instance, 'attr1.attr2.attr3')\n    \"\"\"", "\n", "assert", "isinstance", "(", "attr", ",", "str", ")", ",", "f\"Expected attributes as a string, got {type(attr)} instead.\"", "\n", "assert", "len", "(", "args", ")", "<=", "1", ",", "f\"Expected 2 of 3 arguments but got {len(args) + 2} instead.\"", "\n", "\n", "attr_list", "=", "attr", ".", "split", "(", "'.'", ")", "\n", "if", "len", "(", "attr_list", ")", "==", "1", ":", "\n", "        ", "return", "getattr", "(", "obj", ",", "attr", ",", "*", "args", ")", "\n", "", "else", ":", "\n", "        ", "return", "getattr_recursive", "(", "\n", "getattr", "(", "obj", ",", "attr_list", "[", "0", "]", ")", ",", "'.'", ".", "join", "(", "attr_list", "[", "1", ":", "]", ")", ",", "\n", "*", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.config.hydra_read": [[158, 169], ["warnings.catch_warnings", "warnings.simplefilter", "omegaconf.OmegaConf.resolve", "hydra.initialize", "hydra.compose"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.model_building_utils.model_definition_resolver.resolve"], ["", "", "def", "hydra_read", "(", "overrides", ",", "config_path", "=", "'../../conf'", ",", "config_name", "=", "'config.yaml'", ")", ":", "\n", "    ", "\"\"\"Simulates a python command for hydra to parse the config files.\n    Command line arguments are expected in overrides as a list of \n    strings.\n    \"\"\"", "\n", "with", "warnings", ".", "catch_warnings", "(", ")", ":", "\n", "        ", "warnings", ".", "simplefilter", "(", "\"ignore\"", ")", "\n", "with", "initialize", "(", "config_path", "=", "config_path", ")", ":", "\n", "            ", "cfg", "=", "compose", "(", "config_name", "=", "config_name", ",", "overrides", "=", "overrides", ")", "\n", "", "OmegaConf", ".", "resolve", "(", "cfg", ")", "\n", "", "return", "cfg", "\n", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.o3d_utils.get_random_color": [[5, 7], ["random.uniform"], "function", ["None"], ["def", "get_random_color", "(", "pastel_factor", "=", "0.5", ")", ":", "\n", "    ", "return", "[", "(", "x", "+", "pastel_factor", ")", "/", "(", "1.0", "+", "pastel_factor", ")", "for", "x", "in", "[", "random", ".", "uniform", "(", "0", ",", "1.0", ")", "for", "i", "in", "[", "1", ",", "2", ",", "3", "]", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.o3d_utils.color_distance": [[9, 11], ["sum", "abs", "zip"], "function", ["None"], ["", "def", "color_distance", "(", "c1", ",", "c2", ")", ":", "\n", "    ", "return", "sum", "(", "[", "abs", "(", "x", "[", "0", "]", "-", "x", "[", "1", "]", ")", "for", "x", "in", "zip", "(", "c1", ",", "c2", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.o3d_utils.generate_new_color": [[13, 25], ["range", "o3d_utils.get_random_color", "min", "o3d_utils.color_distance"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.o3d_utils.get_random_color", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.o3d_utils.color_distance"], ["", "def", "generate_new_color", "(", "existing_colors", ",", "pastel_factor", "=", "0.5", ")", ":", "\n", "    ", "max_distance", "=", "None", "\n", "best_color", "=", "None", "\n", "for", "i", "in", "range", "(", "0", ",", "100", ")", ":", "\n", "        ", "color", "=", "get_random_color", "(", "pastel_factor", "=", "pastel_factor", ")", "\n", "if", "not", "existing_colors", ":", "\n", "            ", "return", "color", "\n", "", "best_distance", "=", "min", "(", "[", "color_distance", "(", "color", ",", "c", ")", "for", "c", "in", "existing_colors", "]", ")", "\n", "if", "not", "max_distance", "or", "best_distance", ">", "max_distance", ":", "\n", "            ", "max_distance", "=", "best_distance", "\n", "best_color", "=", "color", "\n", "", "", "return", "best_color", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.o3d_utils.torch2o3d": [[27, 36], ["getattr", "open3d.geometry.PointCloud", "open3d.utility.Vector3dVector", "open3d.geometry.PointCloud.paint_uniform_color", "xyz.detach().cpu().numpy", "open3d.utility.Vector3dVector", "getattr.detach().cpu().numpy", "xyz.detach().cpu", "getattr.detach().cpu", "xyz.detach", "getattr.detach"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.csr.CSRData.cpu", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.csr.CSRData.cpu"], ["", "def", "torch2o3d", "(", "data", ",", "color", "=", "[", "1", ",", "0", ",", "0", "]", ")", ":", "\n", "    ", "xyz", "=", "data", ".", "pos", "\n", "norm", "=", "getattr", "(", "data", ",", "\"norm\"", ",", "None", ")", "\n", "pcd", "=", "open3d", ".", "geometry", ".", "PointCloud", "(", ")", "\n", "pcd", ".", "points", "=", "open3d", ".", "utility", ".", "Vector3dVector", "(", "xyz", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "if", "norm", "is", "not", "None", ":", "\n", "        ", "pcd", ".", "normals", "=", "open3d", ".", "utility", ".", "Vector3dVector", "(", "norm", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "pcd", ".", "paint_uniform_color", "(", "color", ")", "\n", "return", "pcd", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.o3d_utils.apply_mask": [[38, 45], ["d.clone", "len", "len"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.clone", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "def", "apply_mask", "(", "d", ",", "mask", ",", "skip_keys", "=", "[", "]", ")", ":", "\n", "    ", "data", "=", "d", ".", "clone", "(", ")", "\n", "size_pos", "=", "len", "(", "data", ".", "pos", ")", "\n", "for", "k", "in", "data", ".", "keys", ":", "\n", "        ", "if", "size_pos", "==", "len", "(", "data", "[", "k", "]", ")", "and", "k", "not", "in", "skip_keys", ":", "\n", "            ", "data", "[", "k", "]", "=", "data", "[", "k", "]", "[", "mask", "]", "\n", "", "", "return", "data", "\n", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.registration.get_matches": [[13, 22], ["torch_geometric.nn.knn", "torch_geometric.nn.knn", "torch.arange"], "function", ["None"], ["def", "get_matches", "(", "feat_source", ",", "feat_target", ",", "sym", "=", "False", ")", ":", "\n", "\n", "    ", "matches", "=", "knn", "(", "feat_target", ",", "feat_source", ",", "k", "=", "1", ")", ".", "T", "\n", "if", "sym", ":", "\n", "        ", "match_inv", "=", "knn", "(", "feat_source", ",", "feat_target", ",", "k", "=", "1", ")", ".", "T", "\n", "mask", "=", "match_inv", "[", "matches", "[", ":", ",", "1", "]", ",", "1", "]", "==", "torch", ".", "arange", "(", "matches", ".", "shape", "[", "0", "]", ",", "device", "=", "feat_source", ".", "device", ")", "\n", "return", "matches", "[", "mask", "]", "\n", "", "else", ":", "\n", "        ", "return", "matches", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.registration.estimate_transfo": [[24, 44], ["torch.svd", "torch.det", "torch.diag", "V.mm().mm", "torch.eye", "xyz.mean", "xyz_target.mean", "xyz_c.T.mm", "len", "V.mm", "torch.tensor", "xyz_target.mean", "V.mm", "xyz.mean"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.lovasz_loss.mean", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.lovasz_loss.mean", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.lovasz_loss.mean", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.lovasz_loss.mean"], ["", "", "def", "estimate_transfo", "(", "xyz", ",", "xyz_target", ")", ":", "\n", "    ", "\"\"\"\n    estimate the rotation and translation using Kabsch algorithm\n    Parameters:\n    xyz :\n    xyz_target:\n    \"\"\"", "\n", "assert", "xyz", ".", "shape", "==", "xyz", ".", "shape", "\n", "xyz_c", "=", "xyz", "-", "xyz", ".", "mean", "(", "0", ")", "\n", "xyz_target_c", "=", "xyz_target", "-", "xyz_target", ".", "mean", "(", "0", ")", "\n", "Q", "=", "xyz_c", ".", "T", ".", "mm", "(", "xyz_target_c", ")", "/", "len", "(", "xyz", ")", "\n", "U", ",", "S", ",", "V", "=", "torch", ".", "svd", "(", "Q", ")", "\n", "d", "=", "torch", ".", "det", "(", "V", ".", "mm", "(", "U", ".", "T", ")", ")", "\n", "diag", "=", "torch", ".", "diag", "(", "torch", ".", "tensor", "(", "[", "1", ",", "1", ",", "d", "]", ",", "device", "=", "xyz", ".", "device", ")", ")", "\n", "R", "=", "V", ".", "mm", "(", "diag", ")", ".", "mm", "(", "U", ".", "T", ")", "\n", "t", "=", "xyz_target", ".", "mean", "(", "0", ")", "-", "R", "@", "xyz", ".", "mean", "(", "0", ")", "\n", "T", "=", "torch", ".", "eye", "(", "4", ",", "device", "=", "xyz", ".", "device", ")", "\n", "T", "[", ":", "3", ",", ":", "3", "]", "=", "R", "\n", "T", "[", ":", "3", ",", "3", "]", "=", "t", "\n", "return", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.registration.get_geman_mclure_weight": [[46, 53], ["torch.norm"], "function", ["None"], ["", "def", "get_geman_mclure_weight", "(", "xyz", ",", "xyz_target", ",", "mu", ")", ":", "\n", "    ", "\"\"\"\n    compute the weights defined here for the iterative reweighted least square.\n    http://vladlen.info/papers/fast-global-registration.pdf\n    \"\"\"", "\n", "norm2", "=", "torch", ".", "norm", "(", "xyz_target", "-", "xyz", ",", "dim", "=", "1", ")", "**", "2", "\n", "return", "(", "mu", "/", "(", "mu", "+", "norm2", ")", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.registration.get_matrix_system": [[55, 81], ["torch.zeros", "torch.zeros", "torch.zeros", "weight.view", "weight.view", "weight.view", "weight.view", "weight.view", "weight.view", "weight.view", "weight.view", "weight.view", "torch.cat", "torch.cat().view", "weight.view", "weight.view", "weight.view", "torch.cat"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat"], ["", "def", "get_matrix_system", "(", "xyz", ",", "xyz_target", ",", "weight", ")", ":", "\n", "    ", "\"\"\"\n    Build matrix of size 3N x 6 and b of size 3N\n\n    xyz size N x 3\n    xyz_target size N x 3\n    weight size N\n    the matrix is minus cross product matrix concatenate with the identity (rearanged).\n    \"\"\"", "\n", "assert", "xyz", ".", "shape", "==", "xyz_target", ".", "shape", "\n", "A_x", "=", "torch", ".", "zeros", "(", "xyz", ".", "shape", "[", "0", "]", ",", "6", ",", "device", "=", "xyz", ".", "device", ")", "\n", "A_y", "=", "torch", ".", "zeros", "(", "xyz", ".", "shape", "[", "0", "]", ",", "6", ",", "device", "=", "xyz", ".", "device", ")", "\n", "A_z", "=", "torch", ".", "zeros", "(", "xyz", ".", "shape", "[", "0", "]", ",", "6", ",", "device", "=", "xyz", ".", "device", ")", "\n", "b_x", "=", "weight", ".", "view", "(", "-", "1", ")", "*", "(", "xyz_target", "[", ":", ",", "0", "]", "-", "xyz", "[", ":", ",", "0", "]", ")", "\n", "b_y", "=", "weight", ".", "view", "(", "-", "1", ")", "*", "(", "xyz_target", "[", ":", ",", "1", "]", "-", "xyz", "[", ":", ",", "1", "]", ")", "\n", "b_z", "=", "weight", ".", "view", "(", "-", "1", ")", "*", "(", "xyz_target", "[", ":", ",", "2", "]", "-", "xyz", "[", ":", ",", "2", "]", ")", "\n", "A_x", "[", ":", ",", "1", "]", "=", "weight", ".", "view", "(", "-", "1", ")", "*", "xyz", "[", ":", ",", "2", "]", "\n", "A_x", "[", ":", ",", "2", "]", "=", "-", "weight", ".", "view", "(", "-", "1", ")", "*", "xyz", "[", ":", ",", "1", "]", "\n", "A_x", "[", ":", ",", "3", "]", "=", "weight", ".", "view", "(", "-", "1", ")", "*", "1", "\n", "A_y", "[", ":", ",", "0", "]", "=", "-", "weight", ".", "view", "(", "-", "1", ")", "*", "xyz", "[", ":", ",", "2", "]", "\n", "A_y", "[", ":", ",", "2", "]", "=", "weight", ".", "view", "(", "-", "1", ")", "*", "xyz", "[", ":", ",", "0", "]", "\n", "A_y", "[", ":", ",", "4", "]", "=", "weight", ".", "view", "(", "-", "1", ")", "*", "1", "\n", "A_z", "[", ":", ",", "0", "]", "=", "weight", ".", "view", "(", "-", "1", ")", "*", "xyz", "[", ":", ",", "1", "]", "\n", "A_z", "[", ":", ",", "1", "]", "=", "-", "weight", ".", "view", "(", "-", "1", ")", "*", "xyz", "[", ":", ",", "0", "]", "\n", "A_z", "[", ":", ",", "5", "]", "=", "weight", ".", "view", "(", "-", "1", ")", "*", "1", "\n", "return", "torch", ".", "cat", "(", "[", "A_x", ",", "A_y", ",", "A_z", "]", ",", "0", ")", ",", "torch", ".", "cat", "(", "[", "b_x", ",", "b_y", ",", "b_z", "]", ",", "0", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.registration.fast_global_registration": [[83, 104], ["torch.eye", "xyz.clone", "torch.ones", "range", "len", "registration.get_matrix_system", "torch.solve", "torch_points3d.utils.geometry.get_trans", "registration.get_geman_mclure_weight", "A.T.mm", "x.view", "xyz.clone.mm"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.clone", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.registration.get_matrix_system", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.geometry.get_trans", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.registration.get_geman_mclure_weight"], ["", "def", "fast_global_registration", "(", "xyz", ",", "xyz_target", ",", "mu_init", "=", "1", ",", "num_iter", "=", "20", ")", ":", "\n", "    ", "\"\"\"\n    estimate the rotation and translation using Fast Global Registration algorithm (M estimator for robust estimation)\n    http://vladlen.info/papers/fast-global-registration.pdf\n    \"\"\"", "\n", "assert", "xyz", ".", "shape", "==", "xyz_target", ".", "shape", "\n", "\n", "T_res", "=", "torch", ".", "eye", "(", "4", ",", "device", "=", "xyz", ".", "device", ")", "\n", "mu", "=", "mu_init", "\n", "source", "=", "xyz", ".", "clone", "(", ")", "\n", "weight", "=", "torch", ".", "ones", "(", "len", "(", "source", ")", ",", "1", ",", "device", "=", "xyz", ".", "device", ")", "\n", "for", "i", "in", "range", "(", "num_iter", ")", ":", "\n", "        ", "if", "i", ">", "0", "and", "i", "%", "5", "==", "0", ":", "\n", "            ", "mu", "/=", "2.0", "\n", "", "A", ",", "b", "=", "get_matrix_system", "(", "source", ",", "xyz_target", ",", "weight", ")", "\n", "x", ",", "_", "=", "torch", ".", "solve", "(", "A", ".", "T", "@", "b", ",", "A", ".", "T", ".", "mm", "(", "A", ")", ")", "\n", "T", "=", "get_trans", "(", "x", ".", "view", "(", "-", "1", ")", ")", "\n", "source", "=", "source", ".", "mm", "(", "T", "[", ":", "3", ",", ":", "3", "]", ".", "T", ")", "+", "T", "[", ":", "3", ",", "3", "]", "\n", "T_res", "=", "T", "@", "T_res", "\n", "weight", "=", "get_geman_mclure_weight", "(", "source", ",", "xyz_target", ",", "mu", ")", "\n", "", "return", "T_res", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.registration.teaser_pp_registration": [[106, 139], ["teaserpp_python.RobustRegistrationSolver.Params", "teaserpp_python.RobustRegistrationSolver", "teaserpp_python.RobustRegistrationSolver.solve", "teaserpp_python.RobustRegistrationSolver.getSolution", "torch.eye", "torch.from_numpy().to", "torch.from_numpy().to", "xyz.T.detach().cpu().numpy", "xyz_target.T.detach().cpu().numpy", "torch.from_numpy", "torch.from_numpy", "xyz.T.detach().cpu", "xyz_target.T.detach().cpu", "xyz.T.detach", "xyz_target.T.detach"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.csr.CSRData.cpu", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.csr.CSRData.cpu"], ["", "def", "teaser_pp_registration", "(", "\n", "xyz", ",", "\n", "xyz_target", ",", "\n", "noise_bound", "=", "0.05", ",", "\n", "cbar2", "=", "1", ",", "\n", "rotation_gnc_factor", "=", "1.4", ",", "\n", "rotation_max_iterations", "=", "100", ",", "\n", "rotation_cost_threshold", "=", "1e-12", ",", "\n", ")", ":", "\n", "    ", "assert", "xyz", ".", "shape", "==", "xyz_target", ".", "shape", "\n", "import", "teaserpp_python", "\n", "\n", "# Populating the parameters", "\n", "solver_params", "=", "teaserpp_python", ".", "RobustRegistrationSolver", ".", "Params", "(", ")", "\n", "solver_params", ".", "cbar2", "=", "cbar2", "\n", "solver_params", ".", "noise_bound", "=", "noise_bound", "\n", "solver_params", ".", "estimate_scaling", "=", "False", "\n", "solver_params", ".", "rotation_estimation_algorithm", "=", "(", "\n", "teaserpp_python", ".", "RobustRegistrationSolver", ".", "ROTATION_ESTIMATION_ALGORITHM", ".", "GNC_TLS", "\n", ")", "\n", "solver_params", ".", "rotation_gnc_factor", "=", "rotation_gnc_factor", "\n", "solver_params", ".", "rotation_max_iterations", "=", "rotation_max_iterations", "\n", "solver_params", ".", "rotation_cost_threshold", "=", "rotation_cost_threshold", "\n", "\n", "solver", "=", "teaserpp_python", ".", "RobustRegistrationSolver", "(", "solver_params", ")", "\n", "\n", "solver", ".", "solve", "(", "xyz", ".", "T", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "xyz_target", ".", "T", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "solution", "=", "solver", ".", "getSolution", "(", ")", "\n", "T_res", "=", "torch", ".", "eye", "(", "4", ",", "device", "=", "xyz", ".", "device", ")", "\n", "T_res", "[", ":", "3", ",", ":", "3", "]", "=", "torch", ".", "from_numpy", "(", "solution", ".", "rotation", ")", ".", "to", "(", "xyz", ".", "device", ")", "\n", "T_res", "[", ":", "3", ",", "3", "]", "=", "torch", ".", "from_numpy", "(", "solution", ".", "translation", ")", ".", "to", "(", "xyz", ".", "device", ")", "\n", "return", "T_res", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.registration.ransac_registration": [[141, 164], ["open3d.geometry.PointCloud", "open3d.utility.Vector3dVector", "open3d.geometry.PointCloud", "open3d.utility.Vector3dVector", "numpy.arange", "numpy.stack", "open3d.utility.Vector2iVector", "open3d.pipelines.registration.registration_ransac_based_on_correspondence", "torch.from_numpy().float", "xyz.detach().cpu().numpy", "xyz_target.detach().cpu().numpy", "len", "open3d.pipelines.registration.TransformationEstimationPointToPoint", "open3d.pipelines.registration.RANSACConvergenceCriteria", "torch.from_numpy", "xyz.detach().cpu", "xyz_target.detach().cpu", "xyz.detach", "xyz_target.detach"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.csr.CSRData.cpu", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.csr.CSRData.cpu"], ["", "def", "ransac_registration", "(", "xyz", ",", "xyz_target", ",", "distance_threshold", "=", "0.05", ",", "num_iterations", "=", "80000", ")", ":", "\n", "    ", "\"\"\"\n    use Open3D version of RANSAC\n    \"\"\"", "\n", "pcd", "=", "open3d", ".", "geometry", ".", "PointCloud", "(", ")", "\n", "pcd", ".", "points", "=", "open3d", ".", "utility", ".", "Vector3dVector", "(", "xyz", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "pcd_t", "=", "open3d", ".", "geometry", ".", "PointCloud", "(", ")", "\n", "pcd_t", ".", "points", "=", "open3d", ".", "utility", ".", "Vector3dVector", "(", "xyz_target", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "rang", "=", "np", ".", "arange", "(", "len", "(", "xyz", ")", ")", "\n", "corres", "=", "np", ".", "stack", "(", "(", "rang", ",", "rang", ")", ",", "axis", "=", "1", ")", "\n", "corres", "=", "open3d", ".", "utility", ".", "Vector2iVector", "(", "corres", ")", "\n", "result", "=", "open3d", ".", "pipelines", ".", "registration", ".", "registration_ransac_based_on_correspondence", "(", "\n", "pcd", ",", "\n", "pcd_t", ",", "\n", "corres", ",", "\n", "distance_threshold", ",", "\n", "estimation_method", "=", "open3d", ".", "pipelines", ".", "registration", ".", "TransformationEstimationPointToPoint", "(", "False", ")", ",", "\n", "ransac_n", "=", "4", ",", "\n", "criteria", "=", "open3d", ".", "pipelines", ".", "registration", ".", "RANSACConvergenceCriteria", "(", "4000000", ",", "num_iterations", ")", ",", "\n", ")", "\n", "\n", "return", "torch", ".", "from_numpy", "(", "result", ".", "transformation", ")", ".", "float", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.colors.colored_print": [[88, 90], ["log.info"], "function", ["None"], ["", "def", "colored_print", "(", "color", ",", "msg", ")", ":", "\n", "    ", "log", ".", "info", "(", "color", "+", "msg", "+", "COLORS", ".", "END_NO_TOKEN", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.timer.time_func": [[9, 40], ["outer_kwargs.get", "outer_kwargs.get", "outer_kwargs.get", "functools.wraps", "time.time", "func", "FunctionStats[].push", "func", "FunctionStats.get", "time.time", "stats.mean", "print"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.running_stats.RunningStats.push", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.lovasz_loss.mean"], ["def", "time_func", "(", "*", "outer_args", ",", "**", "outer_kwargs", ")", ":", "\n", "    ", "print_rec", "=", "outer_kwargs", ".", "get", "(", "\"print_rec\"", ",", "100", ")", "\n", "measure_runtime", "=", "outer_kwargs", ".", "get", "(", "\"measure_runtime\"", ",", "False", ")", "\n", "name", "=", "outer_kwargs", ".", "get", "(", "\"name\"", ",", "\"\"", ")", "\n", "\n", "def", "time_func_inner", "(", "func", ")", ":", "\n", "        ", "@", "functools", ".", "wraps", "(", "func", ")", "\n", "def", "func_wrapper", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "            ", "if", "measure_runtime", ":", "\n", "                ", "func_name", "=", "name", "if", "name", "else", "func", ".", "__name__", "\n", "if", "FunctionStats", ".", "get", "(", "func_name", ",", "None", ")", "is", "not", "None", ":", "\n", "                    ", "if", "FunctionStats", "[", "func_name", "]", ".", "n", "%", "print_rec", "==", "0", ":", "\n", "                        ", "stats", "=", "FunctionStats", "[", "func_name", "]", "\n", "stats_mean", "=", "stats", ".", "mean", "(", ")", "\n", "print", "(", "\n", "\"{} run in {} | {} over {} runs\"", ".", "format", "(", "\n", "func_name", ",", "stats_mean", ",", "stats_mean", "*", "stats", ".", "n", ",", "stats", ".", "n", "\n", ")", "\n", ")", "\n", "# print('{} run in {} +/- {} over {} runs'.format(func.__name__, stats.mean(), stats.std(), stats.n))", "\n", "", "", "t0", "=", "time", "(", ")", "\n", "out", "=", "func", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "diff", "=", "time", "(", ")", "-", "t0", "\n", "FunctionStats", "[", "func_name", "]", ".", "push", "(", "diff", ")", "\n", "return", "out", "\n", "", "else", ":", "\n", "                ", "return", "func", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "", "", "return", "func_wrapper", "\n", "\n", "", "return", "time_func_inner", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.timer.do_nothing": [[42, 45], ["timer.time_func"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.timer.time_func"], ["", "@", "time_func", "(", "print_rec", "=", "50", ",", "measure_runtime", "=", "True", ")", "\n", "def", "do_nothing", "(", ")", ":", "\n", "    ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.timer.iteration": [[47, 50], ["range", "timer.do_nothing"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.timer.do_nothing"], ["", "def", "iteration", "(", ")", ":", "\n", "    ", "for", "_", "in", "range", "(", "10000", ")", ":", "\n", "        ", "do_nothing", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.wandb_utils.WandbUrls.__init__": [[7, 21], ["url.split", "url.split", "url.split"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.split", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.split", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.split"], ["    ", "def", "__init__", "(", "self", ",", "url", ")", ":", "\n", "\n", "        ", "hash", "=", "url", ".", "split", "(", "\"/\"", ")", "[", "-", "2", "]", "\n", "project", "=", "url", ".", "split", "(", "\"/\"", ")", "[", "-", "3", "]", "\n", "entity", "=", "url", ".", "split", "(", "\"/\"", ")", "[", "-", "4", "]", "\n", "\n", "self", ".", "weight_url", "=", "url", "\n", "self", ".", "log_url", "=", "\"https://app.wandb.ai/{}/{}/runs/{}/logs\"", ".", "format", "(", "entity", ",", "project", ",", "hash", ")", "\n", "self", ".", "chart_url", "=", "\"https://app.wandb.ai/{}/{}/runs/{}\"", ".", "format", "(", "entity", ",", "project", ",", "hash", ")", "\n", "self", ".", "overview_url", "=", "\"https://app.wandb.ai/{}/{}/runs/{}/overview\"", ".", "format", "(", "entity", ",", "project", ",", "hash", ")", "\n", "self", ".", "hydra_config_url", "=", "\"https://app.wandb.ai/{}/{}/runs/{}/files/hydra-config.yaml\"", ".", "format", "(", "\n", "entity", ",", "project", ",", "hash", "\n", ")", "\n", "self", ".", "overrides_url", "=", "\"https://app.wandb.ai/{}/{}/runs/{}/files/overrides.yaml\"", ".", "format", "(", "entity", ",", "project", ",", "hash", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.wandb_utils.WandbUrls.__repr__": [[22, 28], ["wandb_utils.WandbUrls.__dict__.items", "k.upper"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "msg", "=", "\"=================================================== WANDB URLS ===================================================================\\n\"", "\n", "for", "k", ",", "v", "in", "self", ".", "__dict__", ".", "items", "(", ")", ":", "\n", "            ", "msg", "+=", "\"{}: {}\\n\"", ".", "format", "(", "k", ".", "upper", "(", ")", ",", "v", ")", "\n", "", "msg", "+=", "\"=================================================================================================================================\\n\"", "\n", "return", "msg", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.wandb_utils.Wandb.set_urls_to_model": [[33, 37], ["wandb_utils.WandbUrls"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "set_urls_to_model", "(", "model", ",", "url", ")", ":", "\n", "        ", "wandb_urls", "=", "WandbUrls", "(", "url", ")", "\n", "model", ".", "wandb", "=", "wandb_urls", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.wandb_utils.Wandb._set_to_wandb_args": [[38, 43], ["getattr"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_set_to_wandb_args", "(", "wandb_args", ",", "cfg", ",", "name", ")", ":", "\n", "        ", "var", "=", "getattr", "(", "cfg", ".", "training", ".", "wandb", ",", "name", ",", "None", ")", "\n", "if", "var", ":", "\n", "            ", "wandb_args", "[", "name", "]", "=", "var", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.wandb_utils.Wandb.launch": [[44, 98], ["getattr", "getattr", "getattr", "getattr", "getattr", "wandb_utils.Wandb._set_to_wandb_args", "wandb_utils.Wandb._set_to_wandb_args", "wandb_utils.Wandb._set_to_wandb_args", "wandb_utils.Wandb._set_to_wandb_args", "wandb_utils.Wandb._set_to_wandb_args", "wandb_args.get", "wandb.init", "shutil.copyfile", "wandb.save", "wandb.save", "wandb.save", "subprocess.check_output().decode().strip", "subprocess.check_output().decode", "os.getcwd", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "open", "f.write", "os.path.join", "getattr.split", "os.getcwd", "os.getcwd", "os.getcwd", "os.getcwd", "os.getcwd", "subprocess.check_output().decode", "subprocess.check_output", "subprocess.check_output"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.wandb_utils.Wandb._set_to_wandb_args", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.wandb_utils.Wandb._set_to_wandb_args", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.wandb_utils.Wandb._set_to_wandb_args", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.wandb_utils.Wandb._set_to_wandb_args", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.wandb_utils.Wandb._set_to_wandb_args", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.split"], ["", "", "@", "staticmethod", "\n", "def", "launch", "(", "cfg", ",", "launch", ":", "bool", ")", ":", "\n", "        ", "if", "launch", ":", "\n", "            ", "import", "wandb", "\n", "\n", "Wandb", ".", "IS_ACTIVE", "=", "True", "\n", "\n", "model_config", "=", "getattr", "(", "cfg", ".", "models", ",", "cfg", ".", "model_name", ",", "None", ")", "\n", "model_class", "=", "getattr", "(", "model_config", ",", "\"class\"", ")", "\n", "tested_dataset_class", "=", "getattr", "(", "cfg", ".", "data", ",", "\"class\"", ")", "\n", "otimizer_class", "=", "getattr", "(", "cfg", ".", "training", ".", "optim", ".", "optimizer", ",", "\"class\"", ")", "\n", "scheduler_class", "=", "getattr", "(", "cfg", ".", "lr_scheduler", ",", "\"class\"", ")", "\n", "tags", "=", "[", "\n", "cfg", ".", "model_name", ",", "\n", "model_class", ".", "split", "(", "\".\"", ")", "[", "0", "]", ",", "\n", "tested_dataset_class", ",", "\n", "otimizer_class", ",", "\n", "scheduler_class", ",", "\n", "]", "\n", "\n", "wandb_args", "=", "{", "}", "\n", "wandb_args", "[", "\"project\"", "]", "=", "cfg", ".", "training", ".", "wandb", ".", "project", "\n", "wandb_args", "[", "\"tags\"", "]", "=", "tags", "\n", "wandb_args", "[", "\"resume\"", "]", "=", "\"allow\"", "\n", "Wandb", ".", "_set_to_wandb_args", "(", "wandb_args", ",", "cfg", ",", "\"name\"", ")", "\n", "Wandb", ".", "_set_to_wandb_args", "(", "wandb_args", ",", "cfg", ",", "\"entity\"", ")", "\n", "Wandb", ".", "_set_to_wandb_args", "(", "wandb_args", ",", "cfg", ",", "\"notes\"", ")", "\n", "Wandb", ".", "_set_to_wandb_args", "(", "wandb_args", ",", "cfg", ",", "\"config\"", ")", "\n", "Wandb", ".", "_set_to_wandb_args", "(", "wandb_args", ",", "cfg", ",", "\"id\"", ")", "\n", "\n", "try", ":", "\n", "                ", "commit_sha", "=", "subprocess", ".", "check_output", "(", "[", "\"git\"", ",", "\"rev-parse\"", ",", "\"HEAD\"", "]", ")", ".", "decode", "(", "\"ascii\"", ")", ".", "strip", "(", ")", "\n", "gitdiff", "=", "subprocess", ".", "check_output", "(", "[", "\"git\"", ",", "\"diff\"", ",", "\"--\"", ",", "\"':!notebooks'\"", "]", ")", ".", "decode", "(", ")", "\n", "", "except", ":", "\n", "                ", "commit_sha", "=", "\"n/a\"", "\n", "gitdiff", "=", "\"\"", "\n", "\n", "", "config", "=", "wandb_args", ".", "get", "(", "\"config\"", ",", "{", "}", ")", "\n", "wandb_args", "[", "\"config\"", "]", "=", "{", "\n", "**", "config", ",", "\n", "\"run_path\"", ":", "os", ".", "getcwd", "(", ")", ",", "\n", "\"commit\"", ":", "commit_sha", ",", "\n", "}", "\n", "\n", "wandb", ".", "init", "(", "**", "wandb_args", ")", "\n", "shutil", ".", "copyfile", "(", "\n", "os", ".", "path", ".", "join", "(", "os", ".", "getcwd", "(", ")", ",", "\".hydra/config.yaml\"", ")", ",", "os", ".", "path", ".", "join", "(", "os", ".", "getcwd", "(", ")", ",", "\".hydra/hydra-config.yaml\"", ")", "\n", ")", "\n", "wandb", ".", "save", "(", "os", ".", "path", ".", "join", "(", "os", ".", "getcwd", "(", ")", ",", "\".hydra/hydra-config.yaml\"", ")", ")", "\n", "wandb", ".", "save", "(", "os", ".", "path", ".", "join", "(", "os", ".", "getcwd", "(", ")", ",", "\".hydra/overrides.yaml\"", ")", ")", "\n", "\n", "with", "open", "(", "\"change.patch\"", ",", "\"w\"", ")", "as", "f", ":", "\n", "                ", "f", ".", "write", "(", "gitdiff", ")", "\n", "", "wandb", ".", "save", "(", "os", ".", "path", ".", "join", "(", "os", ".", "getcwd", "(", ")", ",", "\"change.patch\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.wandb_utils.Wandb.add_file": [[99, 107], ["os.path.basename", "shutil.copyfile", "RuntimeError", "os.path.join"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "add_file", "(", "file_path", ":", "str", ")", ":", "\n", "        ", "if", "not", "Wandb", ".", "IS_ACTIVE", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"wandb is inactive, please launch first.\"", ")", "\n", "", "import", "wandb", "\n", "\n", "filename", "=", "os", ".", "path", ".", "basename", "(", "file_path", ")", "\n", "shutil", ".", "copyfile", "(", "file_path", ",", "os", ".", "path", ".", "join", "(", "wandb", ".", "run", ".", "dir", ",", "filename", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.debugging_vars.DistributionNeighbour.__init__": [[22, 26], ["numpy.zeros"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "radius", ",", "bins", "=", "1000", ")", ":", "\n", "        ", "self", ".", "_radius", "=", "radius", "\n", "self", ".", "_bins", "=", "bins", "\n", "self", ".", "_histogram", "=", "np", ".", "zeros", "(", "self", ".", "_bins", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.debugging_vars.DistributionNeighbour.reset": [[27, 29], ["numpy.zeros"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "_histogram", "=", "np", ".", "zeros", "(", "self", ".", "_bins", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.debugging_vars.DistributionNeighbour.radius": [[30, 33], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "radius", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_radius", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.debugging_vars.DistributionNeighbour.histogram": [[34, 37], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "histogram", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_histogram", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.debugging_vars.DistributionNeighbour.histogram_non_zero": [[38, 42], ["len", "numpy.cumsum().nonzero", "numpy.cumsum"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "@", "property", "\n", "def", "histogram_non_zero", "(", "self", ")", ":", "\n", "        ", "idx", "=", "len", "(", "self", ".", "_histogram", ")", "-", "np", ".", "cumsum", "(", "self", ".", "_histogram", "[", ":", ":", "-", "1", "]", ")", ".", "nonzero", "(", ")", "[", "0", "]", "[", "0", "]", "\n", "return", "self", ".", "_histogram", "[", ":", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.debugging_vars.DistributionNeighbour.add_valid_neighbours": [[43, 46], ["None"], "methods", ["None"], ["", "def", "add_valid_neighbours", "(", "self", ",", "points", ")", ":", "\n", "        ", "for", "num_valid", "in", "points", ":", "\n", "            ", "self", ".", "_histogram", "[", "num_valid", "]", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.debugging_vars.DistributionNeighbour.__repr__": [[47, 49], ["None"], "methods", ["None"], ["", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"{}(radius={}, bins={})\"", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "_radius", ",", "self", ".", "_bins", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.debugging_vars.extract_histogram": [[6, 19], ["enumerate", "out.append", "dist_meter.histogram.copy", "dist_meter.histogram.copy.tolist", "dist_meter.reset", "dist_meter.histogram.copy.sum", "str"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.classification_tracker.ClassificationTracker.reset"], ["def", "extract_histogram", "(", "spatial_ops", ",", "normalize", "=", "True", ")", ":", "\n", "    ", "out", "=", "[", "]", "\n", "for", "idx", ",", "nf", "in", "enumerate", "(", "spatial_ops", "[", "\"neighbour_finder\"", "]", ")", ":", "\n", "        ", "dist_meters", "=", "nf", ".", "dist_meters", "\n", "temp", "=", "{", "}", "\n", "for", "dist_meter", "in", "dist_meters", ":", "\n", "            ", "hist", "=", "dist_meter", ".", "histogram", ".", "copy", "(", ")", "\n", "if", "normalize", ":", "\n", "                ", "hist", "/=", "hist", ".", "sum", "(", ")", "\n", "", "temp", "[", "str", "(", "dist_meter", ".", "radius", ")", "]", "=", "hist", ".", "tolist", "(", ")", "\n", "dist_meter", ".", "reset", "(", ")", "\n", "", "out", ".", "append", "(", "temp", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.box_utils.box_corners_from_param": [[8, 26], ["geometry.euler_angles_to_rotation_matrix", "torch.is_tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "box_size.float.float", "torch.stack", "float"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.geometry.euler_angles_to_rotation_matrix"], ["def", "box_corners_from_param", "(", "box_size", ",", "heading_angle", ",", "center", ")", ":", "\n", "    ", "\"\"\" Generates box corners from a parameterised box.\n    box_size is array(size_x,size_y,size_z), heading_angle is radius clockwise from pos x axis, center is xyz of box center\n        output (8,3) array for 3D box corners\n    \"\"\"", "\n", "R", "=", "euler_angles_to_rotation_matrix", "(", "torch", ".", "tensor", "(", "[", "0.0", ",", "0.0", ",", "float", "(", "heading_angle", ")", "]", ")", ")", "\n", "if", "torch", ".", "is_tensor", "(", "box_size", ")", ":", "\n", "        ", "box_size", "=", "box_size", ".", "float", "(", ")", "\n", "", "l", ",", "w", ",", "h", "=", "box_size", "\n", "x_corners", "=", "torch", ".", "tensor", "(", "[", "-", "l", "/", "2", ",", "l", "/", "2", ",", "l", "/", "2", ",", "-", "l", "/", "2", ",", "-", "l", "/", "2", ",", "l", "/", "2", ",", "l", "/", "2", ",", "-", "l", "/", "2", "]", ")", "\n", "y_corners", "=", "torch", ".", "tensor", "(", "[", "-", "w", "/", "2", ",", "-", "w", "/", "2", ",", "w", "/", "2", ",", "w", "/", "2", ",", "-", "w", "/", "2", ",", "-", "w", "/", "2", ",", "w", "/", "2", ",", "w", "/", "2", "]", ")", "\n", "z_corners", "=", "torch", ".", "tensor", "(", "[", "-", "h", "/", "2", ",", "-", "h", "/", "2", ",", "-", "h", "/", "2", ",", "-", "h", "/", "2", ",", "h", "/", "2", ",", "h", "/", "2", ",", "h", "/", "2", ",", "h", "/", "2", "]", ")", "\n", "corners_3d", "=", "R", "@", "torch", ".", "stack", "(", "[", "x_corners", ",", "y_corners", ",", "z_corners", "]", ")", "\n", "corners_3d", "[", "0", ",", ":", "]", "=", "corners_3d", "[", "0", ",", ":", "]", "+", "center", "[", "0", "]", "\n", "corners_3d", "[", "1", ",", ":", "]", "=", "corners_3d", "[", "1", ",", ":", "]", "+", "center", "[", "1", "]", "\n", "corners_3d", "[", "2", ",", ":", "]", "=", "corners_3d", "[", "2", ",", ":", "]", "+", "center", "[", "2", "]", "\n", "corners_3d", "=", "corners_3d", ".", "T", "\n", "return", "corners_3d", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.box_utils.nms_samecls": [[28, 86], ["torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "numpy.argsort", "boxes.cpu().numpy.cpu().numpy", "scores.cpu().numpy.cpu().numpy", "classes.cpu().numpy.cpu().numpy", "pick.append", "numpy.maximum", "numpy.maximum", "numpy.maximum", "numpy.minimum", "numpy.minimum", "numpy.minimum", "numpy.maximum", "numpy.maximum", "numpy.maximum", "numpy.delete", "numpy.concatenate", "boxes.cpu().numpy.cpu", "scores.cpu().numpy.cpu", "classes.cpu().numpy.cpu", "numpy.where"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.csr.CSRData.cpu", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.csr.CSRData.cpu", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.csr.CSRData.cpu"], ["", "def", "nms_samecls", "(", "boxes", ",", "classes", ",", "scores", ",", "overlap_threshold", "=", "0.25", ")", ":", "\n", "    ", "\"\"\" Returns the list of boxes that are kept after nms.\n    A box is suppressed only if it overlaps with\n    another box of the same class that has a higher score\n\n    Parameters\n    ----------\n    boxes : [num_boxes, 6]\n        xmin, ymin, zmin, xmax, ymax, zmax\n    classes : [num_shapes]\n        Class of each box\n    scores : [num_shapes,]\n        score of each box\n    overlap_threshold : float, optional\n        [description], by default 0.25\n    \"\"\"", "\n", "if", "torch", ".", "is_tensor", "(", "boxes", ")", ":", "\n", "        ", "boxes", "=", "boxes", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "if", "torch", ".", "is_tensor", "(", "scores", ")", ":", "\n", "        ", "scores", "=", "scores", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "if", "torch", ".", "is_tensor", "(", "classes", ")", ":", "\n", "        ", "classes", "=", "classes", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "x1", "=", "boxes", "[", ":", ",", "0", "]", "\n", "y1", "=", "boxes", "[", ":", ",", "1", "]", "\n", "z1", "=", "boxes", "[", ":", ",", "2", "]", "\n", "x2", "=", "boxes", "[", ":", ",", "3", "]", "\n", "y2", "=", "boxes", "[", ":", ",", "4", "]", "\n", "z2", "=", "boxes", "[", ":", ",", "5", "]", "\n", "area", "=", "(", "x2", "-", "x1", ")", "*", "(", "y2", "-", "y1", ")", "*", "(", "z2", "-", "z1", ")", "\n", "\n", "I", "=", "np", ".", "argsort", "(", "scores", ")", "\n", "pick", "=", "[", "]", "\n", "while", "I", ".", "size", "!=", "0", ":", "\n", "        ", "last", "=", "I", ".", "size", "\n", "i", "=", "I", "[", "-", "1", "]", "\n", "pick", ".", "append", "(", "i", ")", "\n", "\n", "xx1", "=", "np", ".", "maximum", "(", "x1", "[", "i", "]", ",", "x1", "[", "I", "[", ":", "last", "-", "1", "]", "]", ")", "\n", "yy1", "=", "np", ".", "maximum", "(", "y1", "[", "i", "]", ",", "y1", "[", "I", "[", ":", "last", "-", "1", "]", "]", ")", "\n", "zz1", "=", "np", ".", "maximum", "(", "z1", "[", "i", "]", ",", "z1", "[", "I", "[", ":", "last", "-", "1", "]", "]", ")", "\n", "xx2", "=", "np", ".", "minimum", "(", "x2", "[", "i", "]", ",", "x2", "[", "I", "[", ":", "last", "-", "1", "]", "]", ")", "\n", "yy2", "=", "np", ".", "minimum", "(", "y2", "[", "i", "]", ",", "y2", "[", "I", "[", ":", "last", "-", "1", "]", "]", ")", "\n", "zz2", "=", "np", ".", "minimum", "(", "z2", "[", "i", "]", ",", "z2", "[", "I", "[", ":", "last", "-", "1", "]", "]", ")", "\n", "cls1", "=", "classes", "[", "i", "]", "\n", "cls2", "=", "classes", "[", "I", "[", ":", "last", "-", "1", "]", "]", "\n", "\n", "l", "=", "np", ".", "maximum", "(", "0", ",", "xx2", "-", "xx1", ")", "\n", "w", "=", "np", ".", "maximum", "(", "0", ",", "yy2", "-", "yy1", ")", "\n", "h", "=", "np", ".", "maximum", "(", "0", ",", "zz2", "-", "zz1", ")", "\n", "\n", "inter", "=", "l", "*", "w", "*", "h", "\n", "o", "=", "inter", "/", "(", "area", "[", "i", "]", "+", "area", "[", "I", "[", ":", "last", "-", "1", "]", "]", "-", "inter", ")", "\n", "o", "=", "o", "*", "(", "cls1", "==", "cls2", ")", "\n", "\n", "I", "=", "np", ".", "delete", "(", "I", ",", "np", ".", "concatenate", "(", "(", "[", "last", "-", "1", "]", ",", "np", ".", "where", "(", "o", ">", "overlap_threshold", ")", "[", "0", "]", ")", ")", ")", "\n", "\n", "", "return", "pick", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.box_utils.box3d_iou": [[88, 110], ["numpy.asarray", "numpy.asarray", "box_utils.intersection_area", "max", "min", "box_utils.box3d_vol", "box_utils.box3d_vol", "max", "range", "range"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.box_utils.intersection_area", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.box_utils.box3d_vol", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.box_utils.box3d_vol"], ["", "def", "box3d_iou", "(", "corners1", ",", "corners2", ")", ":", "\n", "    ", "\"\"\" Compute 3D bounding box IoU.\n\n    Input:\n        corners1: array (8,3), assume up direction is Z\n        corners2: array (8,3), assume up direction is Z\n    Output:\n        iou: 3D bounding box IoU\n    \"\"\"", "\n", "# corner points are in counter clockwise order", "\n", "assert", "corners1", ".", "shape", "==", "(", "8", ",", "3", ")", "\n", "assert", "corners2", ".", "shape", "==", "(", "8", ",", "3", ")", "\n", "rect1", "=", "np", ".", "asarray", "(", "[", "(", "corners1", "[", "i", ",", "0", "]", ",", "corners1", "[", "i", ",", "1", "]", ")", "for", "i", "in", "range", "(", "4", ")", "]", ")", "\n", "rect2", "=", "np", ".", "asarray", "(", "[", "(", "corners2", "[", "i", ",", "0", "]", ",", "corners2", "[", "i", ",", "1", "]", ")", "for", "i", "in", "range", "(", "4", ")", "]", ")", "\n", "inter_area", "=", "intersection_area", "(", "rect1", ",", "rect2", ")", "\n", "z_min", "=", "max", "(", "corners1", "[", "0", ",", "2", "]", ",", "corners2", "[", "0", ",", "2", "]", ")", "\n", "z_max", "=", "min", "(", "corners1", "[", "4", ",", "2", "]", ",", "corners2", "[", "4", ",", "2", "]", ")", "\n", "inter_vol", "=", "inter_area", "*", "max", "(", "0.0", ",", "z_max", "-", "z_min", ")", "\n", "vol1", "=", "box3d_vol", "(", "corners1", ")", "\n", "vol2", "=", "box3d_vol", "(", "corners2", ")", "\n", "iou", "=", "inter_vol", "/", "(", "vol1", "+", "vol2", "-", "inter_vol", ")", "\n", "return", "iou", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.box_utils.box3d_vol": [[112, 119], ["numpy.asarray", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sum", "numpy.sum", "numpy.sum"], "function", ["None"], ["", "def", "box3d_vol", "(", "corners", ")", ":", "\n", "    ", "\"\"\" corners: (8,3). No order required\"\"\"", "\n", "corners", "=", "np", ".", "asarray", "(", "corners", ")", "\n", "a", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "(", "corners", "[", "0", ",", ":", "]", "-", "corners", "[", "1", ",", ":", "]", ")", "**", "2", ")", ")", "\n", "b", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "(", "corners", "[", "1", ",", ":", "]", "-", "corners", "[", "2", ",", ":", "]", ")", "**", "2", ")", ")", "\n", "c", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "(", "corners", "[", "0", ",", ":", "]", "-", "corners", "[", "4", ",", ":", "]", ")", "**", "2", ")", ")", "\n", "return", "a", "*", "b", "*", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.box_utils.intersection_area": [[121, 133], ["box_utils.polygon_clip", "scipy.spatial.ConvexHull", "len", "len"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.box_utils.polygon_clip", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "def", "intersection_area", "(", "p1", ",", "p2", ")", ":", "\n", "    ", "\"\"\" Compute area of two convex hull's intersection area.\n        p1,p2 are a list of (x,y) tuples of hull vertices.\n        return intersection volume\n    \"\"\"", "\n", "assert", "len", "(", "p1", "[", "0", "]", ")", "==", "2", "and", "len", "(", "p2", "[", "0", "]", ")", "==", "2", "\n", "inter_p", "=", "polygon_clip", "(", "p1", ",", "p2", ")", "\n", "if", "inter_p", "is", "not", "None", ":", "\n", "        ", "hull_inter", "=", "ConvexHull", "(", "inter_p", ")", "\n", "return", "hull_inter", ".", "volume", "\n", "", "else", ":", "\n", "        ", "return", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.box_utils.polygon_clip": [[135, 183], ["box_utils.polygon_clip.inside"], "function", ["None"], ["", "", "def", "polygon_clip", "(", "subjectPolygon", ",", "clipPolygon", ")", ":", "\n", "    ", "\"\"\" Clip a polygon with another polygon.\n\n   Ref: https://rosettacode.org/wiki/Sutherland-Hodgman_polygon_clipping#Python\n\n   Args:\n     subjectPolygon: a list of (x,y) 2d points, any polygon.\n     clipPolygon: a list of (x,y) 2d points, has to be *convex*\n   Note:\n     **points have to be counter-clockwise ordered**\n\n   Return:\n     a list of (x,y) vertex point for the intersection polygon.\n   \"\"\"", "\n", "\n", "def", "inside", "(", "p", ")", ":", "\n", "        ", "return", "(", "cp2", "[", "0", "]", "-", "cp1", "[", "0", "]", ")", "*", "(", "p", "[", "1", "]", "-", "cp1", "[", "1", "]", ")", ">", "(", "cp2", "[", "1", "]", "-", "cp1", "[", "1", "]", ")", "*", "(", "p", "[", "0", "]", "-", "cp1", "[", "0", "]", ")", "\n", "\n", "", "def", "computeIntersection", "(", ")", ":", "\n", "        ", "dc", "=", "[", "cp1", "[", "0", "]", "-", "cp2", "[", "0", "]", ",", "cp1", "[", "1", "]", "-", "cp2", "[", "1", "]", "]", "\n", "dp", "=", "[", "s", "[", "0", "]", "-", "e", "[", "0", "]", ",", "s", "[", "1", "]", "-", "e", "[", "1", "]", "]", "\n", "n1", "=", "cp1", "[", "0", "]", "*", "cp2", "[", "1", "]", "-", "cp1", "[", "1", "]", "*", "cp2", "[", "0", "]", "\n", "n2", "=", "s", "[", "0", "]", "*", "e", "[", "1", "]", "-", "s", "[", "1", "]", "*", "e", "[", "0", "]", "\n", "n3", "=", "1.0", "/", "(", "dc", "[", "0", "]", "*", "dp", "[", "1", "]", "-", "dc", "[", "1", "]", "*", "dp", "[", "0", "]", ")", "\n", "return", "[", "(", "n1", "*", "dp", "[", "0", "]", "-", "n2", "*", "dc", "[", "0", "]", ")", "*", "n3", ",", "(", "n1", "*", "dp", "[", "1", "]", "-", "n2", "*", "dc", "[", "1", "]", ")", "*", "n3", "]", "\n", "\n", "", "outputList", "=", "subjectPolygon", "\n", "cp1", "=", "clipPolygon", "[", "-", "1", "]", "\n", "\n", "for", "clipVertex", "in", "clipPolygon", ":", "\n", "        ", "cp2", "=", "clipVertex", "\n", "inputList", "=", "outputList", "\n", "outputList", "=", "[", "]", "\n", "s", "=", "inputList", "[", "-", "1", "]", "\n", "\n", "for", "subjectVertex", "in", "inputList", ":", "\n", "            ", "e", "=", "subjectVertex", "\n", "if", "inside", "(", "e", ")", ":", "\n", "                ", "if", "not", "inside", "(", "s", ")", ":", "\n", "                    ", "outputList", ".", "append", "(", "computeIntersection", "(", ")", ")", "\n", "", "outputList", ".", "append", "(", "e", ")", "\n", "", "elif", "inside", "(", "s", ")", ":", "\n", "                ", "outputList", ".", "append", "(", "computeIntersection", "(", ")", ")", "\n", "", "s", "=", "e", "\n", "", "cp1", "=", "cp2", "\n", "if", "len", "(", "outputList", ")", "==", "0", ":", "\n", "            ", "return", "None", "\n", "", "", "return", "outputList", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.box_utils.intersection_area_noscipy": [[190, 203], ["box_utils.polygon_clip", "numpy.asarray", "box_utils.polygon_area", "len", "len", "box_utils.convex_hull_graham"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.box_utils.polygon_clip", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.box_utils.polygon_area", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.box_utils.convex_hull_graham"], ["", "def", "intersection_area_noscipy", "(", "p1", ",", "p2", ")", ":", "\n", "    ", "\"\"\" Compute area of two convex hull's intersection area.\n        p1,p2 are a list of (x,y) tuples of hull vertices.\n        return intersection volume\n    \"\"\"", "\n", "assert", "len", "(", "p1", "[", "0", "]", ")", "==", "2", "and", "len", "(", "p2", "[", "0", "]", ")", "==", "2", "\n", "inter_p", "=", "polygon_clip", "(", "p1", ",", "p2", ")", "\n", "if", "inter_p", "is", "not", "None", ":", "\n", "        ", "hull_inter", "=", "np", ".", "asarray", "(", "convex_hull_graham", "(", "inter_p", ")", ")", "\n", "area", "=", "polygon_area", "(", "hull_inter", "[", ":", ",", "0", "]", ",", "hull_inter", "[", ":", ",", "1", "]", ")", "\n", "return", "area", "\n", "", "else", ":", "\n", "        ", "return", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.box_utils.RightTurn": [[206, 210], ["None"], "function", ["None"], ["", "", "def", "RightTurn", "(", "p1", ",", "p2", ",", "p3", ")", ":", "\n", "    ", "if", "(", "p3", "[", "1", "]", "-", "p1", "[", "1", "]", ")", "*", "(", "p2", "[", "0", "]", "-", "p1", "[", "0", "]", ")", ">=", "(", "p2", "[", "1", "]", "-", "p1", "[", "1", "]", ")", "*", "(", "p3", "[", "0", "]", "-", "p1", "[", "0", "]", ")", ":", "\n", "        ", "return", "False", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.box_utils.convex_hull_graham": [[213, 231], ["P.sort", "range", "range", "len", "L_upper.append", "L_lower.append", "len", "len", "box_utils.RightTurn", "len", "box_utils.RightTurn"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.box_utils.RightTurn", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.box_utils.RightTurn"], ["", "def", "convex_hull_graham", "(", "P", ")", ":", "\n", "    ", "P", ".", "sort", "(", ")", "# Sort the set of points", "\n", "L_upper", "=", "[", "P", "[", "0", "]", ",", "P", "[", "1", "]", "]", "# Initialize upper part", "\n", "# Compute the upper part of the hull", "\n", "for", "i", "in", "range", "(", "2", ",", "len", "(", "P", ")", ")", ":", "\n", "        ", "L_upper", ".", "append", "(", "P", "[", "i", "]", ")", "\n", "while", "len", "(", "L_upper", ")", ">", "2", "and", "not", "RightTurn", "(", "L_upper", "[", "-", "1", "]", ",", "L_upper", "[", "-", "2", "]", ",", "L_upper", "[", "-", "3", "]", ")", ":", "\n", "            ", "del", "L_upper", "[", "-", "2", "]", "\n", "", "", "L_lower", "=", "[", "P", "[", "-", "1", "]", ",", "P", "[", "-", "2", "]", "]", "# Initialize the lower part", "\n", "# Compute the lower part of the hull", "\n", "for", "i", "in", "range", "(", "len", "(", "P", ")", "-", "3", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "        ", "L_lower", ".", "append", "(", "P", "[", "i", "]", ")", "\n", "while", "len", "(", "L_lower", ")", ">", "2", "and", "not", "RightTurn", "(", "L_lower", "[", "-", "1", "]", ",", "L_lower", "[", "-", "2", "]", ",", "L_lower", "[", "-", "3", "]", ")", ":", "\n", "            ", "del", "L_lower", "[", "-", "2", "]", "\n", "", "", "del", "L_lower", "[", "0", "]", "\n", "del", "L_lower", "[", "-", "1", "]", "\n", "L", "=", "L_upper", "+", "L_lower", "# Build the full hull", "\n", "return", "L", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.box_utils.polygon_area": [[233, 237], ["numpy.dot", "numpy.dot", "numpy.abs"], "function", ["None"], ["", "def", "polygon_area", "(", "x", ",", "y", ")", ":", "\n", "    ", "correction", "=", "x", "[", "-", "1", "]", "*", "y", "[", "0", "]", "-", "y", "[", "-", "1", "]", "*", "x", "[", "0", "]", "\n", "main_area", "=", "np", ".", "dot", "(", "x", "[", ":", "-", "1", "]", ",", "y", "[", "1", ":", "]", ")", "-", "np", ".", "dot", "(", "y", "[", ":", "-", "1", "]", ",", "x", "[", "1", ":", "]", ")", "\n", "return", "0.5", "*", "np", ".", "abs", "(", "main_area", "+", "correction", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.running_stats.RunningStats.__init__": [[5, 11], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "n", "=", "0", "\n", "self", ".", "old_m", "=", "0", "\n", "self", ".", "new_m", "=", "0", "\n", "self", ".", "old_s", "=", "0", "\n", "self", ".", "new_s", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.running_stats.RunningStats.clear": [[12, 14], ["None"], "methods", ["None"], ["", "def", "clear", "(", "self", ")", ":", "\n", "        ", "self", ".", "n", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.running_stats.RunningStats.push": [[15, 27], ["None"], "methods", ["None"], ["", "def", "push", "(", "self", ",", "x", ")", ":", "\n", "        ", "self", ".", "n", "+=", "1", "\n", "\n", "if", "self", ".", "n", "==", "1", ":", "\n", "            ", "self", ".", "old_m", "=", "self", ".", "new_m", "=", "x", "\n", "self", ".", "old_s", "=", "0", "\n", "", "else", ":", "\n", "            ", "self", ".", "new_m", "=", "self", ".", "old_m", "+", "(", "x", "-", "self", ".", "old_m", ")", "/", "self", ".", "n", "\n", "self", ".", "new_s", "=", "self", ".", "old_s", "+", "(", "x", "-", "self", ".", "old_m", ")", "*", "(", "x", "-", "self", ".", "new_m", ")", "\n", "\n", "self", ".", "old_m", "=", "self", ".", "new_m", "\n", "self", ".", "old_s", "=", "self", ".", "new_s", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.running_stats.RunningStats.mean": [[28, 30], ["None"], "methods", ["None"], ["", "", "def", "mean", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "new_m", "if", "self", ".", "n", "else", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.running_stats.RunningStats.variance": [[31, 33], ["None"], "methods", ["None"], ["", "def", "variance", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "new_s", "/", "(", "self", ".", "n", "-", "1", ")", "if", "self", ".", "n", ">", "1", "else", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.running_stats.RunningStats.std": [[34, 36], ["numpy.sqrt", "running_stats.RunningStats.variance"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.running_stats.RunningStats.variance"], ["", "def", "std", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "sqrt", "(", "self", ".", "variance", "(", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.download.download_url": [[8, 40], ["os.join", "os.exists", "ssl._create_unverified_context", "six.moves.urllib.request.urlopen", "url.rpartition", "print", "os.makedirs", "os.makedirs", "open", "f.write", "print", "urllib.request.urlopen.read"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.makedirs", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.makedirs"], ["def", "download_url", "(", "url", ",", "folder", ",", "log", "=", "True", ")", ":", "\n", "    ", "r\"\"\"Downloads the content of an URL to a specific folder.\n\n    Args:\n        url (string): The url.\n        folder (string): The folder.\n        log (bool, optional): If :obj:`False`, will not print anything to the\n            console. (default: :obj:`True`)\n    \"\"\"", "\n", "\n", "filename", "=", "url", ".", "rpartition", "(", "\"/\"", ")", "[", "2", "]", "\n", "path", "=", "osp", ".", "join", "(", "folder", ",", "filename", ")", "\n", "\n", "if", "osp", ".", "exists", "(", "path", ")", ":", "# pragma: no cover", "\n", "        ", "if", "log", ":", "\n", "            ", "print", "(", "\"Using exist file\"", ",", "filename", ")", "\n", "", "return", "path", "\n", "\n", "", "if", "log", ":", "\n", "        ", "print", "(", "\"Downloading\"", ",", "url", ")", "\n", "\n", "", "try", ":", "\n", "        ", "os", ".", "makedirs", "(", "folder", ")", "\n", "", "except", ":", "\n", "        ", "pass", "\n", "", "context", "=", "ssl", ".", "_create_unverified_context", "(", ")", "\n", "data", "=", "urllib", ".", "request", ".", "urlopen", "(", "url", ",", "context", "=", "context", ")", "\n", "\n", "with", "open", "(", "path", ",", "\"wb\"", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "data", ".", "read", "(", ")", ")", "\n", "\n", "", "return", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.download.run_command": [[42, 64], ["subprocess.Popen", "subprocess.Popen.poll", "print", "print", "subprocess.Popen.stdout.readline", "subprocess.Popen.poll", "print", "p.stdout.readline.strip"], "function", ["None"], ["", "def", "run_command", "(", "cmd", ")", ":", "\n", "    ", "\"\"\"Run a command-line process from Python and print its outputs in\n    an online fashion.\n\n    Credit: https://www.endpointdev.com/blog/2015/01/getting-realtime-output-using-python/\n    \"\"\"", "\n", "# Create the process", "\n", "p", "=", "subprocess", ".", "Popen", "(", "cmd", ",", "shell", "=", "True", ",", "stdout", "=", "subprocess", ".", "PIPE", ")", "\n", "# p = subprocess.run(cmd, shell=True)", "\n", "\n", "# Poll process.stdout to show stdout live", "\n", "while", "True", ":", "\n", "        ", "output", "=", "p", ".", "stdout", ".", "readline", "(", ")", "\n", "if", "p", ".", "poll", "(", ")", "is", "not", "None", ":", "\n", "            ", "break", "\n", "", "if", "output", ":", "\n", "            ", "print", "(", "output", ".", "strip", "(", ")", ")", "\n", "", "", "rc", "=", "p", ".", "poll", "(", ")", "\n", "print", "(", "'Done'", ")", "\n", "print", "(", "''", ")", "\n", "\n", "return", "rc", "\n", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.multimodal.CompositeTensor.__init__": [[107, 154], ["all", "all", "max", "all", "sum", "len", "torch.cuda.is_available", "torch.zeros().long().to", "torch.LongTensor", "isinstance", "isinstance", "isinstance", "torch.from_numpy().to", "a.to", "torch.iinfo", "dtype_max_list.index", "torch.prod().item", "torch.zeros().long", "torch.prod", "range", "a.type", "zip", "torch.from_numpy", "a.abs().max", "torch.prod", "torch.zeros", "len", "len", "a.abs"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "device", "=", "'cpu'", ")", ":", "\n", "        ", "\"\"\"\n        Build CompositeTensor from a list of 1D Tensors (or numpy\n        arrays).\n        \"\"\"", "\n", "supported_formats", "=", "(", "\n", "torch", ".", "int8", ",", "torch", ".", "int16", ",", "torch", ".", "int32", ",", "torch", ".", "int64", ",", "torch", ".", "bool", ")", "\n", "assert", "len", "(", "args", ")", ">", "0", ",", "\"At least one tensor must be provided.\"", "\n", "if", "(", "(", "isinstance", "(", "device", ",", "str", ")", "and", "device", "==", "'cuda'", ")", "\n", "or", "(", "isinstance", "(", "device", ",", "torch", ".", "device", ")", "and", "device", ".", "type", "==", "'cuda'", ")", ")", ":", "\n", "            ", "assert", "torch", ".", "cuda", ".", "is_available", "(", ")", ",", "\"CUDA not found.\"", "\n", "\n", "# Convert input to cuda torch tensor", "\n", "", "tensor_list", "=", "[", "torch", ".", "from_numpy", "(", "a", ")", ".", "to", "(", "device", ")", "\n", "if", "isinstance", "(", "a", ",", "np", ".", "ndarray", ")", "\n", "else", "a", ".", "to", "(", "device", ")", "\n", "for", "a", "in", "args", "]", "\n", "assert", "tensor_list", "[", "0", "]", ".", "ndim", "==", "1", ",", "'Only 1D tensors are accepted as input.'", "\n", "assert", "all", "(", "[", "a", ".", "shape", "==", "tensor_list", "[", "0", "]", ".", "shape", "for", "a", "in", "tensor_list", "]", ")", ",", "'All input tensors must have the same shape.'", "\n", "assert", "all", "(", "[", "a", ".", "dtype", "in", "supported_formats", "for", "a", "in", "tensor_list", "]", ")", ",", "f'All input tensors must be in {supported_formats}. '", "f'Received types: {[a.dtype for a in tensor_list]}'", "\n", "\n", "# Compute the bases to build the composite tensor", "\n", "dtype_list", "=", "[", "a", ".", "dtype", "for", "a", "in", "tensor_list", "]", "\n", "dtype_max_list", "=", "[", "torch", ".", "iinfo", "(", "dt", ")", ".", "max", "for", "dt", "in", "dtype_list", "]", "\n", "dtype_max", "=", "max", "(", "dtype_max_list", ")", "\n", "dtype", "=", "dtype_list", "[", "dtype_max_list", ".", "index", "(", "dtype_max", ")", "]", "\n", "if", "tensor_list", "[", "0", "]", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "            ", "max_list", "=", "torch", ".", "zeros", "(", "len", "(", "tensor_list", ")", ")", ".", "long", "(", ")", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "            ", "max_list", "=", "torch", ".", "LongTensor", "(", "[", "a", ".", "abs", "(", ")", ".", "max", "(", ")", "+", "1", "for", "a", "in", "tensor_list", "]", ")", "\n", "", "assert", "all", "(", "[", "torch", ".", "prod", "(", "max_list", ")", "<", "dtype_max", "]", ")", ",", "'The dtype of at least one of the input tensors must '", "'allow the composite computation.'", "\n", "base_list", "=", "[", "torch", ".", "prod", "(", "max_list", "[", "i", "+", "1", ":", "]", ")", ".", "item", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "tensor_list", ")", "-", "1", ")", "]", "+", "[", "1", "]", "\n", "\n", "# Build the composite tensor", "\n", "self", ".", "dtype_list", "=", "dtype_list", "\n", "self", ".", "dtype", "=", "dtype", "\n", "self", ".", "max_list", "=", "max_list", "\n", "self", ".", "base_list", "=", "base_list", "\n", "self", ".", "data", "=", "sum", "(", "[", "\n", "a", ".", "type", "(", "dtype", ")", "*", "b", "for", "a", ",", "b", "in", "zip", "(", "tensor_list", ",", "base_list", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.multimodal.CompositeTensor.shape": [[155, 158], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "shape", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "data", ".", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.multimodal.CompositeTensor.device": [[159, 162], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "device", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "data", ".", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.multimodal.CompositeTensor.to": [[163, 167], ["copy.deepcopy", "copy.deepcopy.data.to"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to"], ["", "def", "to", "(", "self", ",", "device", ")", ":", "\n", "        ", "out", "=", "copy", ".", "deepcopy", "(", "self", ")", "\n", "out", ".", "data", "=", "out", ".", "data", ".", "to", "(", "device", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.multimodal.CompositeTensor.restore": [[168, 176], ["zip", "out.append"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append"], ["", "def", "restore", "(", "self", ")", ":", "\n", "        ", "\"\"\"Restore the tensors from the modified composite.\"\"\"", "\n", "out", "=", "[", "]", "\n", "composite", "=", "self", ".", "data", "\n", "for", "b", ",", "dt", "in", "zip", "(", "self", ".", "base_list", ",", "self", ".", "dtype_list", ")", ":", "\n", "            ", "out", ".", "append", "(", "(", "composite", "//", "b", ")", ".", "type", "(", "dt", ")", ")", "\n", "composite", "=", "composite", "%", "b", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.multimodal.CompositeTensor.__repr__": [[177, 179], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "f\"{self.__class__.__name__}(shape={self.shape}, \"", "f\"dtype={self.dtype}, device={self.device})\"", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.multimodal.CompositeNDArray.__init__": [[192, 229], ["all", "all", "max", "all", "sum", "isinstance", "numpy.asarray", "numpy.asarray", "numpy.iinfo", "dtype_max_list.index", "numpy.prod", "a.cpu", "numpy.abs().max", "numpy.prod", "range", "a.astype", "zip", "numpy.abs", "len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.csr.CSRData.cpu", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["def", "__init__", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "supported_formats", "=", "(", "np", ".", "int8", ",", "np", ".", "int16", ",", "np", ".", "int32", ",", "np", ".", "int64", ")", "\n", "\n", "# Convert input to numpy", "\n", "array_list", "=", "[", "np", ".", "asarray", "(", "a", ".", "cpu", "(", ")", ")", "if", "isinstance", "(", "a", ",", "torch", ".", "Tensor", ")", "\n", "else", "np", ".", "asarray", "(", "a", ")", "\n", "for", "a", "in", "args", "]", "\n", "assert", "array_list", "[", "0", "]", ".", "ndim", "==", "1", ",", "'Only 1D arrays are accepted as input.'", "\n", "assert", "all", "(", "[", "a", ".", "shape", "==", "array_list", "[", "0", "]", ".", "shape", "for", "a", "in", "array_list", "]", ")", ",", "'All input arrays must have the same shape'", "\n", "assert", "all", "(", "[", "a", ".", "dtype", "in", "supported_formats", "for", "a", "in", "array_list", "]", ")", ",", "f'All input arrays must be in {supported_formats}. '", "f'Received types: {[a.dtype in supported_formats for a in array_list]}'", "\n", "\n", "# Compute the bases to build the composite array", "\n", "dtype_list", "=", "[", "a", ".", "dtype", "for", "a", "in", "array_list", "]", "\n", "dtype_max_list", "=", "[", "np", ".", "iinfo", "(", "dt", ")", ".", "max", "for", "dt", "in", "dtype_list", "]", "\n", "dtype_max", "=", "max", "(", "dtype_max_list", ")", "\n", "dtype", "=", "dtype_list", "[", "dtype_max_list", ".", "index", "(", "dtype_max", ")", "]", "\n", "if", "array_list", "[", "0", "]", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "            ", "max_list", "=", "[", "0", "for", "_", "in", "array_list", "]", "\n", "", "else", ":", "\n", "            ", "max_list", "=", "[", "np", ".", "abs", "(", "a", ")", ".", "max", "(", ")", "+", "1", "for", "a", "in", "array_list", "]", "\n", "", "assert", "all", "(", "[", "np", ".", "prod", "(", "max_list", ")", "<", "dtype_max", "]", ")", ",", "'The dtype of at least one of the input arrays must '", "'allow the composite computation.'", "\n", "base_list", "=", "[", "np", ".", "prod", "(", "max_list", "[", "i", "+", "1", ":", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "array_list", ")", "-", "1", ")", "]", "+", "[", "1", "]", "\n", "\n", "# Build the composite array", "\n", "self", ".", "dtype_list", "=", "dtype_list", "\n", "self", ".", "dtype", "=", "dtype", "\n", "self", ".", "max_list", "=", "max_list", "\n", "self", ".", "base_list", "=", "base_list", "\n", "self", ".", "data", "=", "sum", "(", "[", "a", ".", "astype", "(", "dtype", ")", "*", "b", "\n", "for", "a", ",", "b", "in", "zip", "(", "array_list", ",", "base_list", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.multimodal.CompositeNDArray.shape": [[230, 233], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "shape", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "data", ".", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.multimodal.CompositeNDArray.restore": [[234, 247], ["zip", "out.append", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append"], ["", "def", "restore", "(", "self", ",", "torch_out", "=", "False", ")", ":", "\n", "        ", "\"\"\"Restore the arrays from the modified composite.\"\"\"", "\n", "out", "=", "[", "]", "\n", "composite", "=", "self", ".", "data", "\n", "for", "b", ",", "dt", "in", "zip", "(", "self", ".", "base_list", ",", "self", ".", "dtype_list", ")", ":", "\n", "            ", "out", ".", "append", "(", "(", "composite", "//", "b", ")", ".", "astype", "(", "dt", ")", ")", "\n", "composite", "=", "composite", "%", "b", "\n", "\n", "# Convert to torch Tensor if need be", "\n", "", "if", "torch_out", ":", "\n", "            ", "out", "=", "[", "torch", ".", "from_numpy", "(", "o", ")", "for", "o", "in", "out", "]", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.multimodal.CompositeNDArray.__repr__": [[248, 250], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "f\"{self.__class__.__name__}(shape={self.shape}, \"", "f\"dtype={self.dtype})\"", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.multimodal.tensor_idx": [[13, 34], ["isinstance", "torch.LongTensor", "isinstance", "torch.LongTensor", "isinstance", "torch.where", "torch.LongTensor", "isinstance", "isinstance", "torch.arange", "torch.from_numpy"], "function", ["None"], ["def", "tensor_idx", "(", "idx", ")", ":", "\n", "    ", "\"\"\"Convert an int, slice, list or numpy index to a torch.LongTensor.\"\"\"", "\n", "if", "idx", "is", "None", ":", "\n", "        ", "idx", "=", "torch", ".", "LongTensor", "(", "[", "]", ")", "\n", "", "elif", "isinstance", "(", "idx", ",", "int", ")", ":", "\n", "        ", "idx", "=", "torch", ".", "LongTensor", "(", "[", "idx", "]", ")", "\n", "", "elif", "isinstance", "(", "idx", ",", "list", ")", ":", "\n", "        ", "idx", "=", "torch", ".", "LongTensor", "(", "idx", ")", "\n", "", "elif", "isinstance", "(", "idx", ",", "slice", ")", ":", "\n", "        ", "idx", "=", "torch", ".", "arange", "(", "idx", ".", "stop", ")", "[", "idx", "]", "\n", "", "elif", "isinstance", "(", "idx", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "idx", "=", "torch", ".", "from_numpy", "(", "idx", ")", "\n", "# elif not isinstance(idx, torch.LongTensor):", "\n", "#     raise NotImplementedError", "\n", "", "if", "isinstance", "(", "idx", ",", "torch", ".", "BoolTensor", ")", ":", "\n", "        ", "idx", "=", "torch", ".", "where", "(", "idx", ")", "[", "0", "]", "\n", "", "assert", "idx", ".", "dtype", "is", "torch", ".", "int64", ",", "\"Expected LongTensor but got {idx.type} instead.\"", "\n", "# assert idx.shape[0] > 0, \\", "\n", "#     \"Expected non-empty indices. At least one index must be provided.\"", "\n", "return", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.multimodal.lexsort": [[36, 49], ["multimodal.cuda_lex_op", "multimodal.cpu_lex_op", "x.to", "torch.cuda.is_available", "len"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.multimodal.cuda_lex_op", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.multimodal.cpu_lex_op", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "def", "lexsort", "(", "*", "args", ",", "use_cuda", "=", "False", ")", ":", "\n", "    ", "\"\"\"Return input tensors sorted in lexicographic order.\"\"\"", "\n", "device", "=", "args", "[", "0", "]", ".", "device", "\n", "if", "device", ".", "type", "==", "'cuda'", ":", "\n", "        ", "use_cuda", "=", "True", "\n", "", "elif", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "use_cuda", "=", "False", "\n", "", "if", "use_cuda", ":", "\n", "        ", "out", "=", "cuda_lex_op", "(", "*", "args", ",", "op", "=", "'sort'", ",", "device", "=", "device", ")", "\n", "", "else", ":", "\n", "        ", "out", "=", "cpu_lex_op", "(", "*", "args", ",", "op", "=", "'sort'", ",", "torch_out", "=", "True", ")", "\n", "", "out", "=", "[", "x", ".", "to", "(", "device", ")", "for", "x", "in", "out", "]", "\n", "return", "out", "if", "len", "(", "out", ")", ">", "1", "else", "out", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.multimodal.lexargsort": [[51, 63], ["cpu_lex_op.to", "multimodal.cuda_lex_op", "multimodal.cpu_lex_op", "torch.cuda.is_available"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.multimodal.cuda_lex_op", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.multimodal.cpu_lex_op"], ["", "def", "lexargsort", "(", "*", "args", ",", "use_cuda", "=", "False", ")", ":", "\n", "    ", "\"\"\"Return indices to sort input tensors in lexicographic order.\"\"\"", "\n", "device", "=", "args", "[", "0", "]", ".", "device", "\n", "if", "device", ".", "type", "==", "'cuda'", ":", "\n", "        ", "use_cuda", "=", "True", "\n", "", "elif", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "use_cuda", "=", "False", "\n", "", "if", "use_cuda", ":", "\n", "        ", "out", "=", "cuda_lex_op", "(", "*", "args", ",", "op", "=", "'argsort'", ",", "device", "=", "device", ")", "\n", "", "else", ":", "\n", "        ", "out", "=", "cpu_lex_op", "(", "*", "args", ",", "op", "=", "'argsort'", ",", "torch_out", "=", "True", ")", "\n", "", "return", "out", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.multimodal.lexunique": [[65, 79], ["multimodal.cuda_lex_op", "multimodal.cpu_lex_op", "x.to", "torch.cuda.is_available", "len"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.multimodal.cuda_lex_op", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.multimodal.cpu_lex_op", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "def", "lexunique", "(", "*", "args", ",", "use_cuda", "=", "False", ")", ":", "\n", "    ", "\"\"\"Return unique values in the input tensors sorted in lexicographic\n     order.\"\"\"", "\n", "device", "=", "args", "[", "0", "]", ".", "device", "\n", "if", "device", ".", "type", "==", "'cuda'", ":", "\n", "        ", "use_cuda", "=", "True", "\n", "", "elif", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "use_cuda", "=", "False", "\n", "", "if", "use_cuda", ":", "\n", "        ", "out", "=", "cuda_lex_op", "(", "*", "args", ",", "op", "=", "'unique'", ",", "device", "=", "device", ")", "\n", "", "else", ":", "\n", "        ", "out", "=", "cpu_lex_op", "(", "*", "args", ",", "op", "=", "'unique'", ",", "torch_out", "=", "True", ")", "\n", "", "out", "=", "[", "x", ".", "to", "(", "device", ")", "for", "x", "in", "out", "]", "\n", "return", "out", "if", "len", "(", "out", ")", ">", "1", "else", "out", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.multimodal.lexargunique": [[81, 95], ["cpu_lex_op.to", "multimodal.cuda_lex_op", "multimodal.cpu_lex_op", "torch.cuda.is_available"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.multimodal.cuda_lex_op", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.multimodal.cpu_lex_op"], ["", "def", "lexargunique", "(", "*", "args", ",", "use_cuda", "=", "False", ")", ":", "\n", "    ", "\"\"\"Return indices to mapping input tensors to their unique values\n    sorted sorted in lexicographic order.\n    \"\"\"", "\n", "device", "=", "args", "[", "0", "]", ".", "device", "\n", "if", "device", ".", "type", "==", "'cuda'", ":", "\n", "        ", "use_cuda", "=", "True", "\n", "", "elif", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "use_cuda", "=", "False", "\n", "", "if", "use_cuda", ":", "\n", "        ", "out", "=", "cuda_lex_op", "(", "*", "args", ",", "op", "=", "'argunique'", ",", "device", "=", "device", ")", "\n", "", "else", ":", "\n", "        ", "out", "=", "cpu_lex_op", "(", "*", "args", ",", "op", "=", "'argunique'", ",", "torch_out", "=", "True", ")", "\n", "", "return", "out", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.multimodal.cuda_lex_op": [[253, 287], ["multimodal.CompositeTensor", "multimodal.CompositeTensor.restore", "torch.unique", "torch.unique", "torch.arange", "inverse.new_empty().scatter_", "inverse.size", "inverse.flip", "torch.arange.flip", "inverse.new_empty", "torch.sort", "unique.size", "torch.sort"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.multimodal.CompositeNDArray.restore"], ["", "", "def", "cuda_lex_op", "(", "*", "args", ",", "op", "=", "'unique'", ",", "device", "=", "'cuda'", ")", ":", "\n", "    ", "\"\"\"\n    Lexicographic-aware operations on a set of input tensors on GPU.\n\n    Fastest way of performing `sort`, `argsort`, `unique`, `argunique`\n    operations on large (>10^6) tensors on GPU, provided that CUDA is\n    available.\n\n    Returns torch cuda tensors.\n    \"\"\"", "\n", "# Create a composite cuda tensor holding the input data", "\n", "composite", "=", "CompositeTensor", "(", "*", "args", ",", "device", "=", "device", ")", "\n", "\n", "# Core operation on the composite tensor", "\n", "if", "op", "==", "'unique'", ":", "\n", "        ", "composite", ".", "data", "=", "torch", ".", "unique", "(", "composite", ".", "data", ",", "sorted", "=", "True", ")", "\n", "", "elif", "op", "==", "'argunique'", ":", "\n", "# NB: unlike numpy.unique, the returned index has the same size", "\n", "# as the input array. Further processing torch.scatter is", "\n", "# needed to isolate single occurrences for each unique value.", "\n", "        ", "unique", ",", "inverse", "=", "torch", ".", "unique", "(", "\n", "composite", ".", "data", ",", "sorted", "=", "True", ",", "return_inverse", "=", "True", ")", "\n", "perm", "=", "torch", ".", "arange", "(", "\n", "inverse", ".", "size", "(", "0", ")", ",", "dtype", "=", "inverse", ".", "dtype", ",", "device", "=", "device", ")", "\n", "inverse", ",", "perm", "=", "inverse", ".", "flip", "(", "[", "0", "]", ")", ",", "perm", ".", "flip", "(", "[", "0", "]", ")", "\n", "return", "inverse", ".", "new_empty", "(", "unique", ".", "size", "(", "0", ")", ")", ".", "scatter_", "(", "0", ",", "inverse", ",", "perm", ")", "\n", "", "elif", "op", "==", "'sort'", ":", "\n", "        ", "composite", ".", "data", "=", "torch", ".", "sort", "(", "composite", ".", "data", ")", ".", "values", "\n", "", "elif", "op", "==", "'argsort'", ":", "\n", "        ", "return", "torch", ".", "sort", "(", "composite", ".", "data", ")", ".", "indices", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "return", "composite", ".", "restore", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.multimodal.cpu_lex_op": [[289, 324], ["multimodal.CompositeNDArray", "multimodal.CompositeNDArray.restore", "numpy.unique", "numpy.unique", "torch.from_numpy", "CompositeNDArray.data.sort", "numpy.argsort", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.multimodal.CompositeNDArray.restore"], ["", "def", "cpu_lex_op", "(", "*", "args", ",", "op", "=", "'unique'", ",", "torch_out", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Lexicographic-aware operations on a set of input arrays on CPU.\n\n    Fastest way of performing `sort`, `argsort`, `unique`, `argunique`\n    operations on large (>10^6) arrays on CPU, if CUDA is not available.\n\n    Remark: as of 20.12.2020 Numba is slower than Numpy on sorting\n    operations.\n\n    Returns either numpy ndarrays or torch cpu tensors, depending on\n    `torch_out`.\n    \"\"\"", "\n", "# Create a composite cuda tensor holding the input data", "\n", "composite", "=", "CompositeNDArray", "(", "*", "args", ")", "\n", "\n", "# Core operation on the composite array", "\n", "if", "op", "==", "'unique'", ":", "\n", "        ", "composite", ".", "data", "=", "np", ".", "unique", "(", "composite", ".", "data", ")", "\n", "", "elif", "op", "==", "'argunique'", ":", "\n", "        ", "idx", "=", "np", ".", "unique", "(", "composite", ".", "data", ",", "return_index", "=", "True", ")", "[", "1", "]", "\n", "if", "torch_out", ":", "\n", "            ", "idx", "=", "torch", ".", "from_numpy", "(", "idx", ")", "\n", "", "return", "idx", "\n", "", "elif", "op", "==", "'sort'", ":", "\n", "        ", "composite", ".", "data", ".", "sort", "(", ")", "# in-place sort is faster", "\n", "", "elif", "op", "==", "'argsort'", ":", "\n", "        ", "idx", "=", "np", ".", "argsort", "(", "composite", ".", "data", ")", "\n", "if", "torch_out", ":", "\n", "            ", "idx", "=", "torch", ".", "from_numpy", "(", "idx", ")", "\n", "", "return", "idx", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "return", "composite", ".", "restore", "(", "torch_out", "=", "torch_out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.geometry.euler_angles_to_rotation_matrix": [[5, 23], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.mm", "random.shuffle", "torch.mm", "torch.cos", "torch.sin", "torch.cos", "torch.cos", "torch.sin", "torch.cos", "torch.cos", "torch.sin", "torch.cos", "torch.sin", "torch.sin", "torch.sin"], "function", ["None"], ["def", "euler_angles_to_rotation_matrix", "(", "theta", ",", "random_order", "=", "False", ")", ":", "\n", "    ", "R_x", "=", "torch", ".", "tensor", "(", "\n", "[", "[", "1", ",", "0", ",", "0", "]", ",", "[", "0", ",", "torch", ".", "cos", "(", "theta", "[", "0", "]", ")", ",", "-", "torch", ".", "sin", "(", "theta", "[", "0", "]", ")", "]", ",", "[", "0", ",", "torch", ".", "sin", "(", "theta", "[", "0", "]", ")", ",", "torch", ".", "cos", "(", "theta", "[", "0", "]", ")", "]", "]", "\n", ")", "\n", "\n", "R_y", "=", "torch", ".", "tensor", "(", "\n", "[", "[", "torch", ".", "cos", "(", "theta", "[", "1", "]", ")", ",", "0", ",", "torch", ".", "sin", "(", "theta", "[", "1", "]", ")", "]", ",", "[", "0", ",", "1", ",", "0", "]", ",", "[", "-", "torch", ".", "sin", "(", "theta", "[", "1", "]", ")", ",", "0", ",", "torch", ".", "cos", "(", "theta", "[", "1", "]", ")", "]", "]", "\n", ")", "\n", "\n", "R_z", "=", "torch", ".", "tensor", "(", "\n", "[", "[", "torch", ".", "cos", "(", "theta", "[", "2", "]", ")", ",", "-", "torch", ".", "sin", "(", "theta", "[", "2", "]", ")", ",", "0", "]", ",", "[", "torch", ".", "sin", "(", "theta", "[", "2", "]", ")", ",", "torch", ".", "cos", "(", "theta", "[", "2", "]", ")", ",", "0", "]", ",", "[", "0", ",", "0", ",", "1", "]", "]", "\n", ")", "\n", "\n", "matrices", "=", "[", "R_x", ",", "R_y", ",", "R_z", "]", "\n", "if", "random_order", ":", "\n", "        ", "random", ".", "shuffle", "(", "matrices", ")", "\n", "", "R", "=", "torch", ".", "mm", "(", "matrices", "[", "2", "]", ",", "torch", ".", "mm", "(", "matrices", "[", "1", "]", ",", "matrices", "[", "0", "]", ")", ")", "\n", "return", "R", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.geometry.get_cross_product_matrix": [[25, 27], ["torch.tensor"], "function", ["None"], ["", "def", "get_cross_product_matrix", "(", "k", ")", ":", "\n", "    ", "return", "torch", ".", "tensor", "(", "[", "[", "0", ",", "-", "k", "[", "2", "]", ",", "k", "[", "1", "]", "]", ",", "[", "k", "[", "2", "]", ",", "0", ",", "-", "k", "[", "0", "]", "]", ",", "[", "-", "k", "[", "1", "]", ",", "k", "[", "0", "]", ",", "0", "]", "]", ",", "device", "=", "k", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.geometry.rodrigues": [[29, 38], ["geometry.get_cross_product_matrix", "torch.tensor", "torch.eye", "get_cross_product_matrix.mm", "torch.sin", "torch.cos"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.geometry.get_cross_product_matrix"], ["", "def", "rodrigues", "(", "axis", ",", "theta", ")", ":", "\n", "    ", "\"\"\"\n    given an axis of norm one and an angle, compute the rotation matrix using rodrigues formula\n    source : https://en.wikipedia.org/wiki/Rodrigues%27_rotation_formula\n    \"\"\"", "\n", "K", "=", "get_cross_product_matrix", "(", "axis", ")", "\n", "t", "=", "torch", ".", "tensor", "(", "[", "theta", "]", ",", "device", "=", "axis", ".", "device", ")", "\n", "R", "=", "torch", ".", "eye", "(", "3", ",", "device", "=", "axis", ".", "device", ")", "+", "torch", ".", "sin", "(", "t", ")", "*", "K", "+", "(", "1", "-", "torch", ".", "cos", "(", "t", ")", ")", "*", "K", ".", "mm", "(", "K", ")", "\n", "return", "R", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.geometry.get_trans": [[40, 52], ["torch.eye", "torch.norm", "geometry.rodrigues"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.geometry.rodrigues"], ["", "def", "get_trans", "(", "x", ")", ":", "\n", "    ", "\"\"\"\n    get the rotation matrix from the vector representation using the rodrigues formula\n    \"\"\"", "\n", "T", "=", "torch", ".", "eye", "(", "4", ",", "device", "=", "x", ".", "device", ")", "\n", "T", "[", ":", "3", ",", "3", "]", "=", "x", "[", "3", ":", "]", "\n", "axis", "=", "x", "[", ":", "3", "]", "\n", "theta", "=", "torch", ".", "norm", "(", "axis", ")", "\n", "if", "theta", ">", "0", ":", "\n", "        ", "axis", "=", "axis", "/", "theta", "\n", "", "T", "[", ":", "3", ",", ":", "3", "]", "=", "rodrigues", "(", "axis", ",", "theta", ")", "\n", "return", "T", "\n", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.transform_utils.SamplingStrategy.__init__": [[9, 16], ["strategy.lower", "strategy.lower", "class_weight_method.lower", "class_weight_method.lower"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "strategy", "=", "\"random\"", ",", "class_weight_method", "=", "\"sqrt\"", ")", ":", "\n", "\n", "        ", "if", "strategy", ".", "lower", "(", ")", "in", "self", ".", "STRATEGIES", ":", "\n", "            ", "self", ".", "_strategy", "=", "strategy", ".", "lower", "(", ")", "\n", "\n", "", "if", "class_weight_method", ".", "lower", "(", ")", "in", "self", ".", "CLASS_WEIGHT_METHODS", ":", "\n", "            ", "self", ".", "_class_weight_method", "=", "class_weight_method", ".", "lower", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.transform_utils.SamplingStrategy.__call__": [[17, 35], ["numpy.random.randint", "len", "numpy.asarray", "numpy.unique", "numpy.sum", "numpy.random.choice", "numpy.random.choice", "numpy.asarray", "numpy.sqrt.mean", "numpy.sqrt", "numpy.argwhere().flatten", "numpy.argwhere"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.lovasz_loss.mean"], ["", "", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "\n", "        ", "if", "self", ".", "_strategy", "==", "\"random\"", ":", "\n", "            ", "random_center", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "len", "(", "data", ".", "pos", ")", ")", "\n", "\n", "", "elif", "self", ".", "_strategy", "==", "\"freq_class_based\"", ":", "\n", "            ", "labels", "=", "np", ".", "asarray", "(", "data", ".", "y", ")", "\n", "uni", ",", "uni_counts", "=", "np", ".", "unique", "(", "np", ".", "asarray", "(", "data", ".", "y", ")", ",", "return_counts", "=", "True", ")", "\n", "uni_counts", "=", "uni_counts", ".", "mean", "(", ")", "/", "uni_counts", "\n", "if", "self", ".", "_class_weight_method", "==", "\"sqrt\"", ":", "\n", "                ", "uni_counts", "=", "np", ".", "sqrt", "(", "uni_counts", ")", "\n", "", "uni_counts", "/=", "np", ".", "sum", "(", "uni_counts", ")", "\n", "chosen_label", "=", "np", ".", "random", ".", "choice", "(", "uni", ",", "p", "=", "uni_counts", ")", "\n", "random_center", "=", "np", ".", "random", ".", "choice", "(", "np", ".", "argwhere", "(", "labels", "==", "chosen_label", ")", ".", "flatten", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "return", "random_center", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.transform_utils.SamplingStrategy.__repr__": [[36, 39], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"{}(strategy={}, class_weight_method={})\"", ".", "format", "(", "\n", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "_strategy", ",", "self", ".", "_class_weight_method", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.mock.MockDatasetConfig.__init__": [[10, 12], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.mock.MockDatasetConfig.keys": [[13, 15], ["None"], "methods", ["None"], ["", "def", "keys", "(", "self", ")", ":", "\n", "        ", "return", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.mock.MockDatasetConfig.get": [[16, 18], ["None"], "methods", ["None"], ["", "def", "get", "(", "self", ",", "dataset_name", ",", "default", ")", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.mock.MockDataset.__init__": [[21, 35], ["torch.tensor", "torch.ones", "torch.tensor", "range", "range", "range"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "feature_size", "=", "0", ",", "transform", "=", "None", ",", "num_points", "=", "100", ")", ":", "\n", "        ", "self", ".", "feature_dimension", "=", "feature_size", "\n", "self", ".", "num_classes", "=", "10", "\n", "self", ".", "num_points", "=", "num_points", "\n", "self", ".", "batch_size", "=", "2", "\n", "self", ".", "weight_classes", "=", "None", "\n", "if", "feature_size", ">", "0", ":", "\n", "            ", "self", ".", "_feature", "=", "torch", ".", "tensor", "(", "[", "range", "(", "feature_size", ")", "for", "i", "in", "range", "(", "self", ".", "num_points", ")", "]", ",", "dtype", "=", "torch", ".", "float", ",", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_feature", "=", "None", "\n", "", "self", ".", "_y", "=", "torch", ".", "tensor", "(", "[", "0", "for", "i", "in", "range", "(", "self", ".", "num_points", ")", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "self", ".", "_category", "=", "torch", ".", "ones", "(", "(", "self", ".", "num_points", ",", ")", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "self", ".", "_ms_transform", "=", "None", "\n", "self", ".", "_transform", "=", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.mock.MockDataset.__len__": [[36, 38], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_points", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.mock.MockDataset.datalist": [[39, 52], ["torch.manual_seed", "torch.randn", "torch_geometric.data.Data", "range", "mock.MockDataset._transform", "mock.MockDataset._ms_transform", "torch.randn", "d.clone", "d.clone"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.clone", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.clone"], ["", "@", "property", "\n", "def", "datalist", "(", "self", ")", ":", "\n", "        ", "torch", ".", "manual_seed", "(", "0", ")", "\n", "torch", ".", "randn", "(", "(", "self", ".", "num_points", ",", "3", ")", ")", "\n", "datalist", "=", "[", "\n", "Data", "(", "pos", "=", "torch", ".", "randn", "(", "(", "self", ".", "num_points", ",", "3", ")", ")", ",", "x", "=", "self", ".", "_feature", ",", "y", "=", "self", ".", "_y", ",", "category", "=", "self", ".", "_category", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "batch_size", ")", "\n", "]", "\n", "if", "self", ".", "_transform", ":", "\n", "            ", "datalist", "=", "[", "self", ".", "_transform", "(", "d", ".", "clone", "(", ")", ")", "for", "d", "in", "datalist", "]", "\n", "", "if", "self", ".", "_ms_transform", ":", "\n", "            ", "datalist", "=", "[", "self", ".", "_ms_transform", "(", "d", ".", "clone", "(", ")", ")", "for", "d", "in", "datalist", "]", "\n", "", "return", "datalist", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.mock.MockDataset.__getitem__": [[53, 55], ["torch_points3d.datasets.batch.SimpleBatch.from_data_list"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.pair.DensePairBatch.from_data_list"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "SimpleBatch", ".", "from_data_list", "(", "self", ".", "datalist", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.mock.MockDataset.class_to_segments": [[56, 59], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "class_to_segments", "(", "self", ")", ":", "\n", "        ", "return", "{", "\"class1\"", ":", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", "]", ",", "\"class2\"", ":", "[", "6", ",", "7", ",", "8", ",", "9", "]", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.mock.MockDataset.set_strategies": [[60, 64], ["model.get_spatial_ops", "torch_points3d.core.data_transform.MultiScaleTransform"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.get_spatial_ops"], ["", "def", "set_strategies", "(", "self", ",", "model", ")", ":", "\n", "        ", "strategies", "=", "model", ".", "get_spatial_ops", "(", ")", "\n", "transform", "=", "MultiScaleTransform", "(", "strategies", ")", "\n", "self", ".", "_ms_transform", "=", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.mock.MockDatasetGeometric.__getitem__": [[67, 72], ["torch_points3d.datasets.multiscale_data.MultiScaleBatch.from_data_list", "torch_geometric.data.Batch.from_data_list"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.pair.DensePairBatch.from_data_list", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.pair.DensePairBatch.from_data_list"], ["    ", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "if", "self", ".", "_ms_transform", ":", "\n", "            ", "return", "MultiScaleBatch", ".", "from_data_list", "(", "self", ".", "datalist", ")", "\n", "", "else", ":", "\n", "            ", "return", "Batch", ".", "from_data_list", "(", "self", ".", "datalist", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.model_building_utils.activation_resolver.get_activation": [[6, 20], ["torch_points3d.utils.config.is_dict", "dict", "getattr", "dict", "getattr", "getattr."], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.config.is_dict"], ["def", "get_activation", "(", "act_opt", ",", "create_cls", "=", "True", ")", ":", "\n", "    ", "if", "is_dict", "(", "act_opt", ")", ":", "\n", "        ", "act_opt", "=", "dict", "(", "act_opt", ")", "\n", "act", "=", "getattr", "(", "torch", ".", "nn", ",", "act_opt", "[", "\"name\"", "]", ")", "\n", "del", "act_opt", "[", "\"name\"", "]", "\n", "args", "=", "dict", "(", "act_opt", ")", "\n", "", "else", ":", "\n", "        ", "act", "=", "getattr", "(", "torch", ".", "nn", ",", "act_opt", ")", "\n", "args", "=", "{", "}", "\n", "\n", "", "if", "create_cls", ":", "\n", "        ", "return", "act", "(", "**", "args", ")", "\n", "", "else", ":", "\n", "        ", "return", "act", "\n", "", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.model_building_utils.resolver_utils.flatten_dict": [[7, 16], ["d.items", "dict", "isinstance", "items.extend", "items.append", "flatten_dict().items", "resolver_utils.flatten_dict"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.model_building_utils.resolver_utils.flatten_dict"], ["def", "flatten_dict", "(", "d", ",", "parent_key", "=", "\"\"", ",", "sep", "=", "\"_\"", ")", ":", "\n", "    ", "items", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "d", ".", "items", "(", ")", ":", "\n", "        ", "new_key", "=", "parent_key", "+", "sep", "+", "k", "if", "parent_key", "else", "k", "\n", "if", "isinstance", "(", "v", ",", "collections", ".", "abc", ".", "MutableMapping", ")", ":", "\n", "            ", "items", ".", "extend", "(", "flatten_dict", "(", "v", ",", "new_key", ",", "sep", "=", "sep", ")", ".", "items", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "items", ".", "append", "(", "(", "new_key", ",", "v", ")", ")", "\n", "", "", "return", "dict", "(", "items", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.model_building_utils.model_definition_resolver.resolve_model": [[5, 20], ["model_definition_resolver.resolve", "max", "model_config.keys", "constants.update", "hasattr", "dict"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.model_building_utils.model_definition_resolver.resolve", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.mock.MockDatasetConfig.keys", "home.repos.pwc.inspect_result.drprojects_deepviewagg.RSConv.message_passing.Convolution.update"], ["def", "resolve_model", "(", "model_config", ",", "dataset", ",", "tested_task", ")", ":", "\n", "    ", "\"\"\" Parses the model config and evaluates any expression that may contain constants\n    \"\"\"", "\n", "# placeholders to subsitute", "\n", "constants", "=", "{", "\n", "\"FEAT\"", ":", "max", "(", "dataset", ".", "feature_dimension", ",", "0", ")", ",", "\n", "\"TASK\"", ":", "tested_task", ",", "\n", "\"N_CLS\"", ":", "dataset", ".", "num_classes", "if", "hasattr", "(", "dataset", ",", "\"num_classes\"", ")", "else", "None", ",", "\n", "}", "\n", "\n", "# user defined contants to subsitute", "\n", "if", "\"define_constants\"", "in", "model_config", ".", "keys", "(", ")", ":", "\n", "        ", "constants", ".", "update", "(", "dict", "(", "model_config", ".", "define_constants", ")", ")", "\n", "\n", "", "resolve", "(", "model_config", ",", "constants", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.model_building_utils.model_definition_resolver.resolve": [[22, 52], ["type", "model_definition_resolver.resolve", "type", "range", "len", "type", "eval", "print"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.model_building_utils.model_definition_resolver.resolve", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.panoptic_tracker.InstanceAPMeter.eval"], ["", "def", "resolve", "(", "obj", ",", "constants", ")", ":", "\n", "    ", "\"\"\" Resolves expressions and constants in obj.\n    returns False if obj is a ListConfig or DictConfig, True is obj is a primative type.\n    \"\"\"", "\n", "if", "type", "(", "obj", ")", "==", "DictConfig", ":", "\n", "        ", "it", "=", "(", "k", "for", "k", "in", "obj", ")", "\n", "", "elif", "type", "(", "obj", ")", "==", "ListConfig", ":", "\n", "        ", "it", "=", "range", "(", "len", "(", "obj", ")", ")", "\n", "", "else", ":", "\n", "# obj is a single element", "\n", "        ", "return", "True", "\n", "\n", "# recursively resolve all children of obj", "\n", "", "for", "k", "in", "it", ":", "\n", "\n", "# if obj[k] is a primative type, evalulate it", "\n", "        ", "if", "resolve", "(", "obj", "[", "k", "]", ",", "constants", ")", ":", "\n", "            ", "if", "type", "(", "obj", "[", "k", "]", ")", "is", "str", ":", "\n", "                ", "try", ":", "\n", "                    ", "obj", "[", "k", "]", "=", "eval", "(", "obj", "[", "k", "]", ",", "constants", ")", "\n", "", "except", "NameError", ":", "\n", "# we tried to resolve a string which isn't an expression", "\n", "                    ", "pass", "\n", "", "except", "ValueError", ":", "\n", "# we tried to resolve a string which is also a builtin (e.g. max)", "\n", "                    ", "pass", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                    ", "print", "(", "e", ")", "\n", "\n", "", "", "", "", "return", "False", "\n", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.visualization.visualizer.Visualizer.__init__": [[33, 69], ["num_batches.items", "int", "os.path.join", "setattr", "os.path.exists", "os.makedirs", "getattr", "numpy.asarray"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.makedirs"], ["def", "__init__", "(", "self", ",", "viz_conf", ",", "num_batches", ",", "batch_size", ",", "save_dir", ")", ":", "\n", "# From configuration and dataset", "\n", "        ", "for", "stage_name", ",", "stage_num_sample", "in", "num_batches", ".", "items", "(", ")", ":", "\n", "            ", "setattr", "(", "self", ",", "\"{}_num_batches\"", ".", "format", "(", "stage_name", ")", ",", "stage_num_sample", ")", "\n", "", "self", ".", "_batch_size", "=", "batch_size", "\n", "self", ".", "_activate", "=", "viz_conf", ".", "activate", "\n", "self", ".", "_format", "=", "viz_conf", ".", "format", "\n", "self", ".", "_num_samples_per_epoch", "=", "int", "(", "viz_conf", ".", "num_samples_per_epoch", ")", "\n", "self", ".", "_deterministic", "=", "viz_conf", ".", "deterministic", "\n", "\n", "self", ".", "_saved_keys", "=", "viz_conf", ".", "saved_keys", "\n", "\n", "# Internal state", "\n", "self", ".", "_stage", "=", "None", "\n", "self", ".", "_current_epoch", "=", "None", "\n", "\n", "# Current experiment path", "\n", "self", ".", "_save_dir", "=", "save_dir", "\n", "self", ".", "_viz_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_save_dir", ",", "\"viz\"", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "_viz_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "_viz_path", ")", "\n", "\n", "", "self", ".", "_indices", "=", "{", "}", "\n", "self", ".", "_contains_indices", "=", "False", "\n", "\n", "try", ":", "\n", "            ", "indices", "=", "getattr", "(", "viz_conf", ",", "\"indices\"", ",", "None", ")", "\n", "", "except", ":", "\n", "            ", "indices", "=", "None", "\n", "\n", "", "if", "indices", ":", "\n", "            ", "for", "split", "in", "[", "\"train\"", ",", "\"test\"", ",", "\"val\"", "]", ":", "\n", "                ", "if", "split", "in", "indices", ":", "\n", "                    ", "split_indices", "=", "indices", "[", "split", "]", "\n", "self", ".", "_indices", "[", "split", "]", "=", "np", ".", "asarray", "(", "split_indices", ")", "\n", "self", ".", "_contains_indices", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.visualization.visualizer.Visualizer.get_indices": [[70, 92], ["getattr", "numpy.arange", "log.warn", "numpy.random.permutation", "log.warn", "numpy.random.permutation"], "methods", ["None"], ["", "", "", "", "def", "get_indices", "(", "self", ",", "stage", ")", ":", "\n", "        ", "\"\"\"This function is responsible to calculate the indices to be saved\"\"\"", "\n", "if", "self", ".", "_contains_indices", ":", "\n", "            ", "return", "\n", "", "stage_num_batches", "=", "getattr", "(", "self", ",", "\"{}_num_batches\"", ".", "format", "(", "stage", ")", ")", "\n", "total_items", "=", "(", "stage_num_batches", "-", "1", ")", "*", "self", ".", "_batch_size", "\n", "if", "stage_num_batches", ">", "0", ":", "\n", "            ", "if", "self", ".", "_num_samples_per_epoch", "<", "0", ":", "# All elements should be saved.", "\n", "                ", "if", "stage_num_batches", ">", "0", ":", "\n", "                    ", "self", ".", "_indices", "[", "stage", "]", "=", "np", ".", "arange", "(", "total_items", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "_indices", "[", "stage", "]", "=", "None", "\n", "", "", "else", ":", "\n", "                ", "if", "self", ".", "_deterministic", ":", "\n", "                    ", "if", "stage", "not", "in", "self", ".", "_indices", ":", "\n", "                        ", "if", "self", ".", "_num_samples_per_epoch", ">", "total_items", ":", "\n", "                            ", "log", ".", "warn", "(", "\"Number of samples to save is higher than the number of available elements\"", ")", "\n", "", "self", ".", "_indices", "[", "stage", "]", "=", "np", ".", "random", ".", "permutation", "(", "total_items", ")", "[", ":", "self", ".", "_num_samples_per_epoch", "]", "\n", "", "", "else", ":", "\n", "                    ", "if", "self", ".", "_num_samples_per_epoch", ">", "total_items", ":", "\n", "                        ", "log", ".", "warn", "(", "\"Number of samples to save is higher than the number of available elements\"", ")", "\n", "", "self", ".", "_indices", "[", "stage", "]", "=", "np", ".", "random", ".", "permutation", "(", "total_items", ")", "[", ":", "self", ".", "_num_samples_per_epoch", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.visualization.visualizer.Visualizer.is_active": [[93, 96], ["None"], "methods", ["None"], ["", "", "", "", "@", "property", "\n", "def", "is_active", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_activate", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.visualization.visualizer.Visualizer.reset": [[97, 106], ["visualizer.Visualizer.get_indices"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.visualization.visualizer.Visualizer.get_indices"], ["", "def", "reset", "(", "self", ",", "epoch", ",", "stage", ")", ":", "\n", "        ", "\"\"\"This function is responsible to restore the visualizer\n            to start a new epoch on a new stage\n        \"\"\"", "\n", "self", ".", "_current_epoch", "=", "epoch", "\n", "self", ".", "_seen_batch", "=", "0", "\n", "self", ".", "_stage", "=", "stage", "\n", "if", "self", ".", "_activate", ":", "\n", "            ", "self", ".", "get_indices", "(", "stage", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.visualization.visualizer.Visualizer._extract_from_PYG": [[107, 116], ["torch.is_tensor", "visualizer.Visualizer._saved_keys.keys"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.mock.MockDatasetConfig.keys"], ["", "", "def", "_extract_from_PYG", "(", "self", ",", "item", ",", "pos_idx", ")", ":", "\n", "        ", "num_samples", "=", "item", ".", "batch", ".", "shape", "[", "0", "]", "\n", "batch_mask", "=", "item", ".", "batch", "==", "pos_idx", "\n", "out_data", "=", "{", "}", "\n", "for", "k", "in", "item", ".", "keys", ":", "\n", "            ", "if", "torch", ".", "is_tensor", "(", "item", "[", "k", "]", ")", "and", "k", "in", "self", ".", "_saved_keys", ".", "keys", "(", ")", ":", "\n", "                ", "if", "item", "[", "k", "]", ".", "shape", "[", "0", "]", "==", "num_samples", ":", "\n", "                    ", "out_data", "[", "k", "]", "=", "item", "[", "k", "]", "[", "batch_mask", "]", "\n", "", "", "", "return", "out_data", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.visualization.visualizer.Visualizer._extract_from_dense": [[117, 128], ["torch.is_tensor", "visualizer.Visualizer._saved_keys.keys"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.mock.MockDatasetConfig.keys"], ["", "def", "_extract_from_dense", "(", "self", ",", "item", ",", "pos_idx", ")", ":", "\n", "        ", "assert", "(", "\n", "item", ".", "y", ".", "shape", "[", "0", "]", "==", "item", ".", "pos", ".", "shape", "[", "0", "]", "\n", ")", ",", "\"y and pos should have the same number of samples. Something is probably wrong with your data to visualise\"", "\n", "num_samples", "=", "item", ".", "y", ".", "shape", "[", "0", "]", "\n", "out_data", "=", "{", "}", "\n", "for", "k", "in", "item", ".", "keys", ":", "\n", "            ", "if", "torch", ".", "is_tensor", "(", "item", "[", "k", "]", ")", "and", "k", "in", "self", ".", "_saved_keys", ".", "keys", "(", ")", ":", "\n", "                ", "if", "item", "[", "k", "]", ".", "shape", "[", "0", "]", "==", "num_samples", ":", "\n", "                    ", "out_data", "[", "k", "]", "=", "item", "[", "k", "]", "[", "pos_idx", "]", "\n", "", "", "", "return", "out_data", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.visualization.visualizer.Visualizer._dict_to_structured_npy": [[129, 144], ["item.keys", "item.items", "numpy.concatenate", "numpy.dtype", "numpy.asarray", "v.detach().cpu().numpy", "numpy.concatenate.append", "len", "numpy.dtype.append", "tuple", "tuple", "v.detach().cpu", "v.detach"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.mock.MockDatasetConfig.keys", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.csr.CSRData.cpu"], ["", "def", "_dict_to_structured_npy", "(", "self", ",", "item", ")", ":", "\n", "        ", "item", ".", "keys", "(", ")", "\n", "out", "=", "[", "]", "\n", "dtypes", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "item", ".", "items", "(", ")", ":", "\n", "            ", "v_npy", "=", "v", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "if", "len", "(", "v_npy", ".", "shape", ")", "==", "1", ":", "\n", "                ", "v_npy", "=", "v_npy", "[", "...", ",", "np", ".", "newaxis", "]", "\n", "", "for", "dtype", "in", "self", ".", "_saved_keys", "[", "k", "]", ":", "\n", "                ", "dtypes", ".", "append", "(", "dtype", ")", "\n", "", "out", ".", "append", "(", "v_npy", ")", "\n", "\n", "", "out", "=", "np", ".", "concatenate", "(", "out", ",", "axis", "=", "-", "1", ")", "\n", "dtypes", "=", "np", ".", "dtype", "(", "[", "tuple", "(", "d", ")", "for", "d", "in", "dtypes", "]", ")", "\n", "return", "np", ".", "asarray", "(", "[", "tuple", "(", "o", ")", "for", "o", "in", "out", "]", ",", "dtype", "=", "dtypes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.visualization.visualizer.Visualizer.save_visuals": [[145, 172], ["numpy.argwhere().flatten", "visuals.items", "numpy.argwhere", "visualizer.Visualizer._dict_to_structured_npy", "os.path.join", "os.path.join", "plyfile.PlyElement.describe", "plyfile.PlyData().write", "hasattr", "visualizer.Visualizer._extract_from_PYG", "visualizer.Visualizer._extract_from_dense", "str", "os.path.exists", "os.makedirs", "plyfile.PlyData"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.visualization.visualizer.Visualizer._dict_to_structured_npy", "home.repos.pwc.inspect_result.drprojects_deepviewagg.visualization.visualizer.Visualizer._extract_from_PYG", "home.repos.pwc.inspect_result.drprojects_deepviewagg.visualization.visualizer.Visualizer._extract_from_dense", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.makedirs"], ["", "def", "save_visuals", "(", "self", ",", "visuals", ")", ":", "\n", "        ", "\"\"\"This function is responsible to save the data into .ply objects\n            Parameters:\n                visuals (Dict[Data(pos=torch.Tensor, ...)]) -- Contains a dictionnary of tensors\n            Make sure the saved_keys  within the config maps to the Data attributes.\n        \"\"\"", "\n", "if", "self", ".", "_stage", "in", "self", ".", "_indices", ":", "\n", "            ", "batch_indices", "=", "self", ".", "_indices", "[", "self", ".", "_stage", "]", "//", "self", ".", "_batch_size", "\n", "pos_indices", "=", "self", ".", "_indices", "[", "self", ".", "_stage", "]", "%", "self", ".", "_batch_size", "\n", "for", "idx", "in", "np", ".", "argwhere", "(", "self", ".", "_seen_batch", "==", "batch_indices", ")", ".", "flatten", "(", ")", ":", "\n", "                ", "pos_idx", "=", "pos_indices", "[", "idx", "]", "\n", "for", "visual_name", ",", "item", "in", "visuals", ".", "items", "(", ")", ":", "\n", "                    ", "if", "hasattr", "(", "item", ",", "\"batch\"", ")", "and", "item", ".", "batch", "is", "not", "None", ":", "# The PYG dataloader has been used", "\n", "                        ", "out_item", "=", "self", ".", "_extract_from_PYG", "(", "item", ",", "pos_idx", ")", "\n", "", "else", ":", "\n", "                        ", "out_item", "=", "self", ".", "_extract_from_dense", "(", "item", ",", "pos_idx", ")", "\n", "", "out_item", "=", "self", ".", "_dict_to_structured_npy", "(", "out_item", ")", "\n", "\n", "dir_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_viz_path", ",", "str", "(", "self", ".", "_current_epoch", ")", ",", "self", ".", "_stage", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "dir_path", ")", ":", "\n", "                        ", "os", ".", "makedirs", "(", "dir_path", ")", "\n", "\n", "", "filename", "=", "\"{}_{}.ply\"", ".", "format", "(", "self", ".", "_seen_batch", ",", "pos_idx", ")", "\n", "path_out", "=", "os", ".", "path", ".", "join", "(", "dir_path", ",", "filename", ")", "\n", "el", "=", "PlyElement", ".", "describe", "(", "out_item", ",", "visual_name", ")", "\n", "PlyData", "(", "[", "el", "]", ",", "byte_order", "=", "\">\"", ")", ".", "write", "(", "path_out", ")", "\n", "", "", "self", ".", "_seen_batch", "+=", "1", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.visualization.experiment_manager.ExperimentFolder.__init__": [[19, 24], ["experiment_manager.ExperimentFolder._find_files"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.visualization.experiment_manager.ExperimentFolder._find_files"], ["def", "__init__", "(", "self", ",", "run_path", ")", ":", "\n", "        ", "self", ".", "_run_path", "=", "run_path", "\n", "self", ".", "_model_name", "=", "None", "\n", "self", ".", "_stats", "=", "None", "\n", "self", ".", "_find_files", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.visualization.experiment_manager.ExperimentFolder._find_files": [[25, 27], ["os.listdir"], "methods", ["None"], ["", "def", "_find_files", "(", "self", ")", ":", "\n", "        ", "self", ".", "_files", "=", "os", ".", "listdir", "(", "self", ".", "_run_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.visualization.experiment_manager.ExperimentFolder.__repr__": [[28, 30], ["experiment_manager.ExperimentFolder._run_path.split"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.split"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_run_path", ".", "split", "(", "\"outputs\"", ")", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.visualization.experiment_manager.ExperimentFolder.model_name": [[31, 34], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "model_name", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_model_name", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.visualization.experiment_manager.ExperimentFolder.epochs": [[35, 38], ["os.listdir"], "methods", ["None"], ["", "@", "property", "\n", "def", "epochs", "(", "self", ")", ":", "\n", "        ", "return", "os", ".", "listdir", "(", "self", ".", "_viz_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.visualization.experiment_manager.ExperimentFolder.get_splits": [[39, 41], ["os.listdir", "os.path.join", "str"], "methods", ["None"], ["", "def", "get_splits", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "return", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "self", ".", "_viz_path", ",", "str", "(", "epoch", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.visualization.experiment_manager.ExperimentFolder.get_files": [[42, 44], ["os.listdir", "os.path.join", "str"], "methods", ["None"], ["", "def", "get_files", "(", "self", ",", "epoch", ",", "split", ")", ":", "\n", "        ", "return", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "self", ".", "_viz_path", ",", "str", "(", "epoch", ")", ",", "split", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.visualization.experiment_manager.ExperimentFolder.load_ply": [[45, 65], ["hasattr", "os.path.join", "os.path.exists", "getattr", "str", "plyfile.PlyData.read", "numpy.asarray", "list", "numpy.lib.recfunctions.structured_to_unstructured().squeeze", "non_pos_indices.items", "setattr", "print", "list.index", "list.index", "non_pos_indices.keys", "numpy.lib.recfunctions.structured_to_unstructured"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.mock.MockDatasetConfig.keys"], ["", "def", "load_ply", "(", "self", ",", "epoch", ",", "split", ",", "file", ")", ":", "\n", "        ", "self", ".", "_data_name", "=", "\"data_{}_{}_{}\"", ".", "format", "(", "epoch", ",", "split", ",", "file", ")", "\n", "if", "not", "hasattr", "(", "self", ",", "self", ".", "_data_name", ")", ":", "\n", "            ", "path_to_ply", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_viz_path", ",", "str", "(", "epoch", ")", ",", "split", ",", "file", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "path_to_ply", ")", ":", "\n", "                ", "plydata", "=", "PlyData", ".", "read", "(", "path_to_ply", ")", "\n", "arr", "=", "np", ".", "asarray", "(", "[", "e", ".", "data", "for", "e", "in", "plydata", ".", "elements", "]", ")", "\n", "names", "=", "list", "(", "arr", ".", "dtype", ".", "names", ")", "\n", "pos_indices", "=", "[", "names", ".", "index", "(", "n", ")", "for", "n", "in", "self", ".", "POS_KEYS", "]", "\n", "non_pos_indices", "=", "{", "n", ":", "names", ".", "index", "(", "n", ")", "for", "n", "in", "names", "if", "n", "not", "in", "self", ".", "POS_KEYS", "}", "\n", "arr_", "=", "rfn", ".", "structured_to_unstructured", "(", "arr", ")", ".", "squeeze", "(", ")", "\n", "xyz", "=", "arr_", "[", ":", ",", "pos_indices", "]", "\n", "data", "=", "{", "\"xyz\"", ":", "xyz", ",", "\"columns\"", ":", "non_pos_indices", ".", "keys", "(", ")", ",", "\"name\"", ":", "self", ".", "_data_name", "}", "\n", "for", "n", ",", "i", "in", "non_pos_indices", ".", "items", "(", ")", ":", "\n", "                    ", "data", "[", "n", "]", "=", "arr_", "[", ":", ",", "i", "]", "\n", "", "setattr", "(", "self", ",", "self", ".", "_data_name", ",", "data", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "\"The file doesn' t exist: Wierd !\"", ")", "\n", "", "", "else", ":", "\n", "            ", "return", "getattr", "(", "self", ",", "self", ".", "_data_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.visualization.experiment_manager.ExperimentFolder.current_pointcloud": [[66, 69], ["getattr"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "current_pointcloud", "(", "self", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ",", "self", ".", "_data_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.visualization.experiment_manager.ExperimentFolder.contains_viz": [[70, 83], ["hasattr", "os.path.join", "os.listdir", "len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "@", "property", "\n", "def", "contains_viz", "(", "self", ")", ":", "\n", "        ", "if", "not", "hasattr", "(", "self", ",", "\"_contains_viz\"", ")", ":", "\n", "            ", "for", "f", "in", "self", ".", "_files", ":", "\n", "                ", "if", "\"viz\"", "in", "f", ":", "\n", "                    ", "self", ".", "_viz_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_run_path", ",", "\"viz\"", ")", "\n", "vizs", "=", "os", ".", "listdir", "(", "self", ".", "_viz_path", ")", "\n", "self", ".", "_contains_viz", "=", "len", "(", "vizs", ")", ">", "0", "\n", "return", "self", ".", "_contains_viz", "\n", "", "", "self", ".", "_contains_viz", "=", "False", "\n", "return", "self", ".", "_contains_viz", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "_contains_viz", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.visualization.experiment_manager.ExperimentFolder.contains_trained_model": [[84, 96], ["hasattr"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "contains_trained_model", "(", "self", ")", ":", "\n", "        ", "if", "not", "hasattr", "(", "self", ",", "\"_contains_trained_model\"", ")", ":", "\n", "            ", "for", "f", "in", "self", ".", "_files", ":", "\n", "                ", "if", "\".pt\"", "in", "f", ":", "\n", "                    ", "self", ".", "_contains_trained_model", "=", "True", "\n", "self", ".", "_model_name", "=", "f", "\n", "return", "self", ".", "_contains_trained_model", "\n", "", "", "self", ".", "_contains_trained_model", "=", "False", "\n", "return", "self", ".", "_contains_trained_model", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "_contains_trained_model", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.visualization.experiment_manager.ExperimentFolder.extract_stats": [[97, 110], ["os.path.join", "len", "collections.defaultdict", "stats.keys", "torch.load", "len", "latest_epoch.keys"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.mock.MockDatasetConfig.keys", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.mock.MockDatasetConfig.keys"], ["", "", "def", "extract_stats", "(", "self", ")", ":", "\n", "        ", "path_to_checkpoint", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_run_path", ",", "self", ".", "model_name", ")", "\n", "stats", "=", "torch", ".", "load", "(", "path_to_checkpoint", ")", "[", "\"stats\"", "]", "\n", "self", ".", "_stats", "=", "stats", "\n", "num_epoch", "=", "len", "(", "stats", "[", "\"train\"", "]", ")", "\n", "stats_dict", "=", "defaultdict", "(", "dict", ")", "\n", "for", "split_name", "in", "stats", ".", "keys", "(", ")", ":", "\n", "            ", "if", "len", "(", "stats", "[", "split_name", "]", ")", ">", "0", ":", "\n", "                ", "latest_epoch", "=", "stats", "[", "split_name", "]", "[", "-", "1", "]", "\n", "for", "metric_name", "in", "latest_epoch", ".", "keys", "(", ")", ":", "\n", "                    ", "if", "\"best\"", "in", "metric_name", ":", "\n", "                        ", "stats_dict", "[", "metric_name", "]", "[", "split_name", "]", "=", "latest_epoch", "[", "metric_name", "]", "\n", "", "", "", "", "return", "num_epoch", ",", "stats_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.visualization.experiment_manager.ExperimentManager.__init__": [[113, 116], ["experiment_manager.ExperimentManager._collect_experiments"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.visualization.experiment_manager.ExperimentManager._collect_experiments"], ["    ", "def", "__init__", "(", "self", ",", "experiments_root", ")", ":", "\n", "        ", "self", ".", "_experiments_root", "=", "experiments_root", "\n", "self", ".", "_collect_experiments", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.visualization.experiment_manager.ExperimentManager._collect_experiments": [[117, 126], ["collections.defaultdict", "glob.glob.glob", "experiment_manager.ExperimentManager._find_experiments_with_viz", "os.path.join", "experiment_manager.ExperimentFolder", "experiment_manager.ExperimentManager._experiment_with_models[].append"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.visualization.experiment_manager.ExperimentManager._find_experiments_with_viz", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append"], ["", "def", "_collect_experiments", "(", "self", ")", ":", "\n", "        ", "self", ".", "_experiment_with_models", "=", "defaultdict", "(", "list", ")", "\n", "run_paths", "=", "glob", "(", "os", ".", "path", ".", "join", "(", "self", ".", "_experiments_root", ",", "\"outputs\"", ",", "\"*\"", ",", "\"*\"", ")", ")", "\n", "for", "run_path", "in", "run_paths", ":", "\n", "            ", "experiment", "=", "ExperimentFolder", "(", "run_path", ")", "\n", "if", "experiment", ".", "contains_trained_model", ":", "\n", "                ", "self", ".", "_experiment_with_models", "[", "experiment", ".", "model_name", "]", ".", "append", "(", "experiment", ")", "\n", "\n", "", "", "self", ".", "_find_experiments_with_viz", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.visualization.experiment_manager.ExperimentManager._find_experiments_with_viz": [[127, 134], ["hasattr", "collections.defaultdict", "experiment_manager.ExperimentManager._experiment_with_models.keys", "experiment_manager.ExperimentManager._experiment_with_viz[].append"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.mock.MockDatasetConfig.keys", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append"], ["", "def", "_find_experiments_with_viz", "(", "self", ")", ":", "\n", "        ", "if", "not", "hasattr", "(", "self", ",", "\"_experiment_with_viz\"", ")", ":", "\n", "            ", "self", ".", "_experiment_with_viz", "=", "defaultdict", "(", "list", ")", "\n", "for", "model_name", "in", "self", ".", "_experiment_with_models", ".", "keys", "(", ")", ":", "\n", "                ", "for", "experiment", "in", "self", ".", "_experiment_with_models", "[", "model_name", "]", ":", "\n", "                    ", "if", "experiment", ".", "contains_viz", ":", "\n", "                        ", "self", ".", "_experiment_with_viz", "[", "experiment", ".", "model_name", "]", ".", "append", "(", "experiment", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.visualization.experiment_manager.ExperimentManager.model_name_wviz": [[135, 139], ["list", "experiment_manager.ExperimentManager._experiment_with_viz.keys", "k.replace"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.mock.MockDatasetConfig.keys"], ["", "", "", "", "", "@", "property", "\n", "def", "model_name_wviz", "(", "self", ")", ":", "\n", "        ", "keys", "=", "list", "(", "self", ".", "_experiment_with_viz", ".", "keys", "(", ")", ")", "\n", "return", "[", "k", ".", "replace", "(", "\".pt\"", ",", "\"\"", ")", "for", "k", "in", "keys", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.visualization.experiment_manager.ExperimentManager.current_pointcloud": [[140, 143], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "current_pointcloud", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_current_experiment", ".", "current_pointcloud", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.visualization.experiment_manager.ExperimentManager.load_ply_file": [[144, 150], ["hasattr", "experiment_manager.ExperimentManager._current_experiment.load_ply"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.visualization.experiment_manager.ExperimentFolder.load_ply"], ["", "def", "load_ply_file", "(", "self", ",", "file", ")", ":", "\n", "        ", "if", "hasattr", "(", "self", ",", "\"_current_split\"", ")", ":", "\n", "            ", "self", ".", "_current_file", "=", "file", "\n", "self", ".", "_current_experiment", ".", "load_ply", "(", "self", ".", "_current_epoch", ",", "self", ".", "_current_split", ",", "self", ".", "_current_file", ")", "\n", "", "else", ":", "\n", "            ", "return", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.visualization.experiment_manager.ExperimentManager.from_split_to_file": [[151, 157], ["hasattr", "experiment_manager.ExperimentManager._current_experiment.get_files"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.visualization.experiment_manager.ExperimentFolder.get_files"], ["", "", "def", "from_split_to_file", "(", "self", ",", "split_name", ")", ":", "\n", "        ", "if", "hasattr", "(", "self", ",", "\"_current_epoch\"", ")", ":", "\n", "            ", "self", ".", "_current_split", "=", "split_name", "\n", "return", "self", ".", "_current_experiment", ".", "get_files", "(", "self", ".", "_current_epoch", ",", "self", ".", "_current_split", ")", "\n", "", "else", ":", "\n", "            ", "return", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.visualization.experiment_manager.ExperimentManager.from_epoch_to_split": [[158, 164], ["hasattr", "experiment_manager.ExperimentManager._current_experiment.get_splits"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.visualization.experiment_manager.ExperimentFolder.get_splits"], ["", "", "def", "from_epoch_to_split", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "if", "hasattr", "(", "self", ",", "\"_current_experiment\"", ")", ":", "\n", "            ", "self", ".", "_current_epoch", "=", "epoch", "\n", "return", "self", ".", "_current_experiment", ".", "get_splits", "(", "self", ".", "_current_epoch", ")", "\n", "", "else", ":", "\n", "            ", "return", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.visualization.experiment_manager.ExperimentManager.from_paths_to_epoch": [[165, 170], ["sorted", "str", "str", "exp.__repr__"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.schedulers.lr_schedulers.LRScheduler.__repr__"], ["", "", "def", "from_paths_to_epoch", "(", "self", ",", "run_path", ")", ":", "\n", "        ", "for", "exp", "in", "self", ".", "_current_exps", ":", "\n", "            ", "if", "str", "(", "run_path", ")", "==", "str", "(", "exp", ".", "__repr__", "(", ")", ")", ":", "\n", "                ", "self", ".", "_current_experiment", "=", "exp", "\n", "", "", "return", "sorted", "(", "self", ".", "_current_experiment", ".", "epochs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.visualization.experiment_manager.ExperimentManager.get_model_wviz_paths": [[171, 175], ["None"], "methods", ["None"], ["", "def", "get_model_wviz_paths", "(", "self", ",", "model_path", ")", ":", "\n", "        ", "model_name", "=", "model_path", "+", "\".pt\"", "\n", "self", ".", "_current_exps", "=", "self", ".", "_experiment_with_viz", "[", "model_name", "]", "\n", "return", "self", ".", "_current_exps", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.visualization.experiment_manager.ExperimentManager.display_stats": [[176, 192], ["print", "experiment_manager.ExperimentManager._experiment_with_models.keys", "experiment_manager.colored_print", "print", "str", "print", "experiment.extract_stats", "experiment_manager.colored_print", "print", "stats[].keys", "experiment_manager.colored_print"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.mock.MockDatasetConfig.keys", "home.repos.pwc.inspect_result.drprojects_deepviewagg.visualization.experiment_manager.colored_print", "home.repos.pwc.inspect_result.drprojects_deepviewagg.visualization.experiment_manager.ExperimentFolder.extract_stats", "home.repos.pwc.inspect_result.drprojects_deepviewagg.visualization.experiment_manager.colored_print", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.mock.MockDatasetConfig.keys", "home.repos.pwc.inspect_result.drprojects_deepviewagg.visualization.experiment_manager.colored_print"], ["", "def", "display_stats", "(", "self", ")", ":", "\n", "        ", "print", "(", "\"\"", ")", "\n", "for", "model_name", "in", "self", ".", "_experiment_with_models", ".", "keys", "(", ")", ":", "\n", "            ", "colored_print", "(", "COLORS", ".", "Green", ",", "str", "(", "model_name", ")", ")", "\n", "for", "experiment", "in", "self", ".", "_experiment_with_models", "[", "model_name", "]", ":", "\n", "                ", "print", "(", "experiment", ")", "\n", "num_epoch", ",", "stats", "=", "experiment", ".", "extract_stats", "(", ")", "\n", "colored_print", "(", "COLORS", ".", "Red", ",", "\"Epoch: {}\"", ".", "format", "(", "num_epoch", ")", ")", "\n", "for", "metric_name", "in", "stats", ":", "\n", "                    ", "sentence", "=", "\"\"", "\n", "for", "split_name", "in", "stats", "[", "metric_name", "]", ".", "keys", "(", ")", ":", "\n", "                        ", "sentence", "+=", "\"{}: {}, \"", ".", "format", "(", "split_name", ",", "stats", "[", "metric_name", "]", "[", "split_name", "]", ")", "\n", "", "metric_sentence", "=", "metric_name", "+", "\"({})\"", ".", "format", "(", "sentence", "[", ":", "-", "2", "]", ")", "\n", "colored_print", "(", "COLORS", ".", "BBlue", ",", "metric_sentence", ")", "\n", "", "print", "(", "\"\"", ")", "\n", "", "print", "(", "\"\"", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.visualization.experiment_manager.colored_print": [[11, 13], ["print", "torch_points3d.utils.colors.COLORS.Green", "torch_points3d.utils.colors.COLORS.Red", "torch_points3d.utils.colors.COLORS.BBlue"], "function", ["None"], ["def", "colored_print", "(", "color", ",", "msg", ")", ":", "\n", "    ", "print", "(", "color", "+", "msg", "+", "COLORS", ".", "END_NO_TOKEN", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.visualization.multimodal_data.rgb_to_plotly_rgb": [[24, 34], ["isinstance", "rgb.unsqueeze.dim", "rgb.unsqueeze.unsqueeze", "rgb.unsqueeze.max", "rgb.unsqueeze.dim", "tuple"], "function", ["None"], ["def", "rgb_to_plotly_rgb", "(", "rgb", ")", ":", "\n", "    ", "\"\"\"Convert torch.Tensor of float RGB values in [0, 1] to\n    plotly-friendly RGB format.\n    \"\"\"", "\n", "assert", "isinstance", "(", "rgb", ",", "torch", ".", "Tensor", ")", "and", "rgb", ".", "max", "(", ")", "<=", "1.0", "and", "rgb", ".", "dim", "(", ")", "<=", "2", "\n", "\n", "if", "rgb", ".", "dim", "(", ")", "==", "1", ":", "\n", "        ", "rgb", "=", "rgb", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "", "return", "[", "f\"rgb{tuple(x)}\"", "for", "x", "in", "(", "rgb", "*", "255", ")", ".", "int", "(", ")", ".", "numpy", "(", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.visualization.multimodal_data.hex_to_tensor": [[36, 40], ["h.lstrip.lstrip", "tuple", "torch.Tensor", "int"], "function", ["None"], ["", "def", "hex_to_tensor", "(", "h", ")", ":", "\n", "    ", "h", "=", "h", ".", "lstrip", "(", "'#'", ")", "\n", "rgb", "=", "tuple", "(", "int", "(", "h", "[", "i", ":", "i", "+", "2", "]", ",", "16", ")", "for", "i", "in", "(", "0", ",", "2", ",", "4", ")", ")", "\n", "return", "torch", ".", "Tensor", "(", "rgb", ")", "/", "255", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.visualization.multimodal_data.feats_to_rgb": [[42, 83], ["feats.unsqueeze.dim", "feats.unsqueeze.unsqueeze", "feats.unsqueeze.dim", "feats.unsqueeze.repeat_interleave", "identity_PCA.max", "identity_PCA.min", "torch.cat", "identity_PCA.min().values.view", "identity_PCA.max().values.view", "multimodal_data.identity_PCA", "torch.ones", "torch.clamp", "identity_PCA.min", "identity_PCA.max"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.visualization.multimodal_data.identity_PCA"], ["", "def", "feats_to_rgb", "(", "feats", ",", "normalize", "=", "False", ")", ":", "\n", "    ", "\"\"\"Convert features of the format M x N with N>=1 to an M x 3\n    tensor with values in [0, 1 for RGB visualization].\n    \"\"\"", "\n", "is_normalized", "=", "False", "\n", "\n", "if", "feats", ".", "dim", "(", ")", "==", "1", ":", "\n", "        ", "feats", "=", "feats", ".", "unsqueeze", "(", "1", ")", "\n", "", "elif", "feats", ".", "dim", "(", ")", ">", "2", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "if", "feats", ".", "shape", "[", "1", "]", "==", "3", ":", "\n", "        ", "color", "=", "feats", "\n", "\n", "", "elif", "feats", ".", "shape", "[", "1", "]", "==", "1", ":", "\n", "# If only 1 feature is found convert to a 3-channel", "\n", "# repetition for grayscale visualization.", "\n", "        ", "color", "=", "feats", ".", "repeat_interleave", "(", "3", ",", "1", ")", "\n", "\n", "", "elif", "feats", ".", "shape", "[", "1", "]", "==", "2", ":", "\n", "# If 2 features are found, add an extra channel.", "\n", "        ", "color", "=", "torch", ".", "cat", "(", "[", "feats", ",", "torch", ".", "ones", "(", "feats", ".", "shape", "[", "0", "]", ",", "1", ")", "]", ",", "1", ")", "\n", "\n", "", "elif", "feats", ".", "shape", "[", "1", "]", ">", "3", ":", "\n", "# If more than 3 features or more are found, project", "\n", "# features to a 3-dimensional space using N-simplex PCA", "\n", "# Heuristics for clamping", "\n", "#   - most features live in [0, 1]", "\n", "#   - most n-simplex PCA features live in [-0.5, 0.6]", "\n", "        ", "color", "=", "identity_PCA", "(", "feats", ",", "dim", "=", "3", ")", "\n", "color", "=", "(", "torch", ".", "clamp", "(", "color", ",", "-", "0.5", ",", "0.6", ")", "+", "0.5", ")", "/", "1.1", "\n", "is_normalized", "=", "True", "\n", "\n", "", "if", "normalize", "and", "not", "is_normalized", ":", "\n", "# Unit-normalize the features in a hypercube of shared scale", "\n", "# for nicer visualizations", "\n", "        ", "if", "color", ".", "max", "(", ")", "!=", "color", ".", "min", "(", ")", ":", "\n", "            ", "color", "=", "color", "-", "color", ".", "min", "(", "dim", "=", "0", ")", ".", "values", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "", "color", "=", "color", "/", "(", "color", ".", "max", "(", "dim", "=", "0", ")", ".", "values", ".", "view", "(", "1", ",", "-", "1", ")", "+", "1e-6", ")", "\n", "\n", "", "return", "color", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.visualization.multimodal_data.identity_PCA": [[85, 107], ["torch.eye", "torch.eye.mean", "torch.symeig", "x.dim", "z_centered.T.mm", "len", "x.dim"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.lovasz_loss.mean", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "def", "identity_PCA", "(", "x", ",", "dim", "=", "3", ")", ":", "\n", "    ", "\"\"\"Reduce dimension of x based on PCA on the union of the n-simplex.\n    This is a way of reducing the dimension of x while treating all\n    input dimensions with the same importance, independently of the\n    input distribution in x.\n    \"\"\"", "\n", "assert", "x", ".", "dim", "(", ")", "==", "2", ",", "f\"Expected x.dim()=2 but got x.dim()={x.dim()} instead\"", "\n", "\n", "# Create z the union of the N-simplex", "\n", "input_dim", "=", "x", ".", "shape", "[", "1", "]", "\n", "z", "=", "torch", ".", "eye", "(", "input_dim", ")", "\n", "\n", "# PCA on z", "\n", "z_offset", "=", "z", ".", "mean", "(", "axis", "=", "0", ")", "\n", "z_centered", "=", "z", "-", "z_offset", "\n", "cov_matrix", "=", "z_centered", ".", "T", ".", "mm", "(", "z_centered", ")", "/", "len", "(", "z_centered", ")", "\n", "_", ",", "eigenvectors", "=", "torch", ".", "symeig", "(", "cov_matrix", ",", "eigenvectors", "=", "True", ")", "\n", "\n", "# Apply the PCA on x", "\n", "x_reduced", "=", "(", "x", "-", "z_offset", ")", ".", "mm", "(", "eigenvectors", "[", ":", ",", "-", "dim", ":", "]", ")", "\n", "\n", "return", "x_reduced", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.visualization.multimodal_data.visualize_3d": [[109, 507], ["isinstance", "mm_data.data.clone", "int", "plotly.Layout", "plotly.Figure", "go.Figure.add_trace", "modes[].append", "modes[].append", "modes[].append", "go.Figure.update_layout", "go.Figure.update_layout", "go.Figure.update_layout", "mm_data.modalities[].clone", "torch_points3d.core.data_transform.GridSampling3D", "torch_points3d.core.data_transform.multimodal.image.SelectMappingFromPointId", "torch_points3d.core.data_transform.multimodal.image.SelectMappingFromPointId.", "int", "getattr", "go.Figure.add_trace", "modes[].append", "modes[].append", "modes[].append", "getattr", "mm_data.data.clone.y.numpy", "numpy.unique", "modes[].append", "modes[].append", "modes[].append", "getattr", "mm_data.data.clone.pred.numpy", "numpy.unique", "modes[].append", "modes[].append", "modes[].append", "sum", "go.Figure.add_trace", "modes[].append", "modes[].append", "modes[].append", "mm_data.data.clone.pos.min", "mm_data.data.clone.pos.max", "plotly.Scatter3d", "getattr", "multimodal_data.feats_to_rgb", "go.Figure.add_trace", "modes[].append", "modes[].append", "modes[].append", "go.Figure.add_trace", "modes[].append", "modes[].append", "modes[].append", "enumerate", "numpy.array", "modes[].index", "sum", "sum", "sum", "dict", "updatemenus.append", "mm_data.modalities.get", "torch_geometric.transforms.FixedPoints", "isinstance", "min", "dict", "dict", "plotly.Scatter3d", "go.Figure.add_trace", "go.Figure.add_trace", "plotly.Scatter3d", "plotly.Scatter3d", "getattr", "getattr", "numpy.where", "plotly.Scatter3d", "torch.cat().numpy", "torch.cat().numpy", "images[].pos.numpy", "images[].axes.numpy", "len", "image_xyz.reshape.reshape", "zip", "zip", "img_traces.append", "go.Figure.add_trace", "dict", "dict", "dict", "numpy.where", "plotly.Scatter3d", "numpy.where", "plotly.Scatter3d", "dict", "go.Figure.add_trace", "len", "plotly.Scatter3d", "np.array.tolist", "tuple", "dict", "dict", "dict", "mm_data.data.clone.pred.numpy", "mm_data.data.clone.y.numpy", "tuple", "dict", "torch.cat", "torch.cat", "plotly.Scatter3d", "dict", "dict", "dict", "dict", "dict", "dict", "multimodal_data.rgb_to_plotly_rgb", "dict", "dict", "zip", "dict", "multimodal_data.rgb_to_plotly_rgb", "dict", "multimodal_data.rgb_to_plotly_rgb", "dict", "multimodal_data.visualize_3d.trace_visibility"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.clone", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.clone", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.visualization.multimodal_data.feats_to_rgb", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.visualization.multimodal_data.rgb_to_plotly_rgb", "home.repos.pwc.inspect_result.drprojects_deepviewagg.visualization.multimodal_data.rgb_to_plotly_rgb", "home.repos.pwc.inspect_result.drprojects_deepviewagg.visualization.multimodal_data.rgb_to_plotly_rgb"], ["", "def", "visualize_3d", "(", "\n", "mm_data", ",", "figsize", "=", "800", ",", "width", "=", "None", ",", "height", "=", "None", ",", "class_names", "=", "None", ",", "\n", "class_colors", "=", "None", ",", "class_opacities", "=", "None", ",", "voxel", "=", "0.1", ",", "max_points", "=", "100000", ",", "\n", "pointsize", "=", "5", ",", "error_color", "=", "None", ",", "show_image_number", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"3D data interactive visualization.\n\n    :param mm_data: MMData object holding 3d points, images and mappings\n    :param figsize: figure dimensions will be (figsize, figsize/2) if\n      `width` and `height` are not specified\n    :param width: figure width\n    :param height: figure height\n    :param class_names: names for point labels in MMData\n    :param class_colors: colors for point labels in MMData\n    :param class_opacities: class-wise opacities\n    :param voxel: voxel size to subsample the point cloud to facilitate\n      visualization\n    :param max_points: maximum number of points displayed to facilitate\n      visualization\n    :param pointsize: size of points\n    :param error_color: color used to identify mis-predicted points\n    :param show_image_number: whether image numbers should be displayed\n    :param kwargs:\n    :return:\n    \"\"\"", "\n", "assert", "isinstance", "(", "mm_data", ",", "MMData", ")", "\n", "\n", "# 3D visualization modes", "\n", "modes", "=", "{", "'name'", ":", "[", "]", ",", "'key'", ":", "[", "]", ",", "'num_traces'", ":", "[", "]", "}", "\n", "\n", "# Make copies of the data and images to be modified in this scope", "\n", "data", "=", "mm_data", ".", "data", ".", "clone", "(", ")", "\n", "has_2d", "=", "mm_data", ".", "modalities", ".", "get", "(", "'image'", ",", "None", ")", "is", "not", "None", "and", "mm_data", ".", "modalities", "[", "'image'", "]", ".", "num_views", ">", "0", "\n", "if", "has_2d", ":", "\n", "        ", "images", "=", "mm_data", ".", "modalities", "[", "'image'", "]", ".", "clone", "(", ")", "\n", "\n", "# Convert images to ImageData for convenience", "\n", "# if isinstance(images, SameSettingImageData):", "\n", "#     images = ImageData([images])", "\n", "\n", "# Subsample to limit the drawing time", "\n", "", "data", "=", "GridSampling3D", "(", "voxel", ",", "mode", "=", "'last'", ")", "(", "data", ")", "\n", "if", "data", ".", "num_nodes", ">", "max_points", ":", "\n", "        ", "data", "=", "FixedPoints", "(", "\n", "max_points", ",", "replace", "=", "False", ",", "allow_duplicates", "=", "False", ")", "(", "data", ")", "\n", "\n", "# Subsample the mappings accordingly", "\n", "", "if", "has_2d", "and", "images", "[", "0", "]", ".", "mappings", "is", "not", "None", ":", "\n", "        ", "transform", "=", "SelectMappingFromPointId", "(", ")", "\n", "data", ",", "images", "=", "transform", "(", "data", ",", "images", ")", "\n", "\n", "# Round to the cm for cleaner hover info", "\n", "", "data", ".", "pos", "=", "(", "data", ".", "pos", "*", "100", ")", ".", "round", "(", ")", "/", "100", "\n", "if", "has_2d", ":", "\n", "        ", "for", "im", "in", "images", ":", "\n", "            ", "im", ".", "pos", "=", "(", "im", ".", "pos", "*", "100", ")", ".", "round", "(", ")", "/", "100", "\n", "\n", "# CLass colors initialization", "\n", "", "", "if", "class_colors", "is", "not", "None", "and", "not", "isinstance", "(", "class_colors", "[", "0", "]", ",", "str", ")", ":", "\n", "        ", "class_colors", "=", "[", "f\"rgb{tuple(x)}\"", "for", "x", "in", "class_colors", "]", "\n", "", "else", ":", "\n", "        ", "class_colors", "=", "None", "\n", "\n", "# Prepare figure", "\n", "", "width", "=", "width", "if", "width", "and", "height", "else", "figsize", "\n", "height", "=", "height", "if", "width", "and", "height", "else", "int", "(", "figsize", "/", "2", ")", "\n", "margin", "=", "int", "(", "0.02", "*", "min", "(", "width", ",", "height", ")", ")", "\n", "layout", "=", "go", ".", "Layout", "(", "\n", "width", "=", "width", ",", "\n", "height", "=", "height", ",", "\n", "scene", "=", "dict", "(", "aspectmode", "=", "'data'", ",", ")", ",", "# preserve aspect ratio", "\n", "margin", "=", "dict", "(", "l", "=", "margin", ",", "r", "=", "margin", ",", "b", "=", "margin", ",", "t", "=", "margin", ")", ",", "\n", "uirevision", "=", "True", ")", "\n", "fig", "=", "go", ".", "Figure", "(", "layout", "=", "layout", ")", "\n", "initialized_visibility", "=", "False", "\n", "\n", "# Draw a trace for RGB 3D point cloud", "\n", "if", "getattr", "(", "data", ",", "'rgb'", ",", "None", ")", "is", "not", "None", ":", "\n", "        ", "fig", ".", "add_trace", "(", "\n", "go", ".", "Scatter3d", "(", "\n", "name", "=", "'RGB'", ",", "\n", "x", "=", "data", ".", "pos", "[", ":", ",", "0", "]", ",", "\n", "y", "=", "data", ".", "pos", "[", ":", ",", "1", "]", ",", "\n", "z", "=", "data", ".", "pos", "[", ":", ",", "2", "]", ",", "\n", "mode", "=", "'markers'", ",", "\n", "marker", "=", "dict", "(", "\n", "size", "=", "pointsize", ",", "\n", "color", "=", "rgb_to_plotly_rgb", "(", "data", ".", "rgb", ")", ",", ")", ",", "\n", "hoverinfo", "=", "'x+y+z'", ",", "\n", "showlegend", "=", "False", ",", "\n", "visible", "=", "not", "initialized_visibility", ",", ")", ")", "\n", "modes", "[", "'name'", "]", ".", "append", "(", "'RGB'", ")", "\n", "modes", "[", "'key'", "]", ".", "append", "(", "'rgb'", ")", "\n", "modes", "[", "'num_traces'", "]", ".", "append", "(", "1", ")", "\n", "initialized_visibility", "=", "True", "\n", "\n", "# Draw a trace for labeled 3D point cloud", "\n", "", "if", "getattr", "(", "data", ",", "'y'", ",", "None", ")", "is", "not", "None", ":", "\n", "        ", "y", "=", "data", ".", "y", ".", "numpy", "(", ")", "\n", "n_y_traces", "=", "0", "\n", "\n", "for", "label", "in", "np", ".", "unique", "(", "y", ")", ":", "\n", "            ", "indices", "=", "np", ".", "where", "(", "y", "==", "label", ")", "[", "0", "]", "\n", "\n", "fig", ".", "add_trace", "(", "\n", "go", ".", "Scatter3d", "(", "\n", "name", "=", "class_names", "[", "label", "]", "if", "class_names", "else", "f\"Class {label}\"", ",", "\n", "opacity", "=", "class_opacities", "[", "label", "]", "if", "class_opacities", "else", "1.0", ",", "\n", "x", "=", "data", ".", "pos", "[", "indices", ",", "0", "]", ",", "\n", "y", "=", "data", ".", "pos", "[", "indices", ",", "1", "]", ",", "\n", "z", "=", "data", ".", "pos", "[", "indices", ",", "2", "]", ",", "\n", "mode", "=", "'markers'", ",", "\n", "marker", "=", "dict", "(", "\n", "size", "=", "pointsize", ",", "\n", "color", "=", "class_colors", "[", "label", "]", "if", "class_colors", "else", "None", ",", ")", ",", "\n", "visible", "=", "not", "initialized_visibility", ",", ")", ")", "\n", "n_y_traces", "+=", "1", "# keep track of the number of traces", "\n", "\n", "", "modes", "[", "'name'", "]", ".", "append", "(", "'Labels'", ")", "\n", "modes", "[", "'key'", "]", ".", "append", "(", "'y'", ")", "\n", "modes", "[", "'num_traces'", "]", ".", "append", "(", "n_y_traces", ")", "\n", "initialized_visibility", "=", "True", "\n", "\n", "# Draw a trace for predicted labels 3D point cloud", "\n", "", "if", "getattr", "(", "data", ",", "'pred'", ",", "None", ")", "is", "not", "None", ":", "\n", "        ", "pred", "=", "data", ".", "pred", ".", "numpy", "(", ")", "\n", "n_pred_traces", "=", "0", "\n", "\n", "for", "label", "in", "np", ".", "unique", "(", "pred", ")", ":", "\n", "            ", "indices", "=", "np", ".", "where", "(", "pred", "==", "label", ")", "[", "0", "]", "\n", "\n", "fig", ".", "add_trace", "(", "\n", "go", ".", "Scatter3d", "(", "\n", "name", "=", "class_names", "[", "label", "]", "if", "class_names", "else", "f\"Class {label}\"", ",", "\n", "opacity", "=", "class_opacities", "[", "label", "]", "if", "class_opacities", "else", "1.0", ",", "\n", "x", "=", "data", ".", "pos", "[", "indices", ",", "0", "]", ",", "\n", "y", "=", "data", ".", "pos", "[", "indices", ",", "1", "]", ",", "\n", "z", "=", "data", ".", "pos", "[", "indices", ",", "2", "]", ",", "\n", "mode", "=", "'markers'", ",", "\n", "marker", "=", "dict", "(", "\n", "size", "=", "pointsize", ",", "\n", "color", "=", "class_colors", "[", "label", "]", "if", "class_colors", "else", "None", ",", ")", ",", "\n", "visible", "=", "not", "initialized_visibility", ",", ")", ")", "\n", "n_pred_traces", "+=", "1", "# keep track of the number of traces", "\n", "\n", "", "modes", "[", "'name'", "]", ".", "append", "(", "'Predictions'", ")", "\n", "modes", "[", "'key'", "]", ".", "append", "(", "'pred'", ")", "\n", "modes", "[", "'num_traces'", "]", ".", "append", "(", "n_pred_traces", ")", "\n", "initialized_visibility", "=", "True", "\n", "\n", "# Draw a trace for 3D point cloud of number of images seen", "\n", "", "if", "has_2d", "and", "images", "[", "0", "]", ".", "mappings", "is", "not", "None", ":", "\n", "        ", "n_seen", "=", "sum", "(", "[", "\n", "im", ".", "mappings", ".", "pointers", "[", "1", ":", "]", "-", "im", ".", "mappings", ".", "pointers", "[", ":", "-", "1", "]", "\n", "for", "im", "in", "images", "]", ")", "\n", "fig", ".", "add_trace", "(", "\n", "go", ".", "Scatter3d", "(", "\n", "name", "=", "'Times seen'", ",", "\n", "x", "=", "data", ".", "pos", "[", ":", ",", "0", "]", ",", "\n", "y", "=", "data", ".", "pos", "[", ":", ",", "1", "]", ",", "\n", "z", "=", "data", ".", "pos", "[", ":", ",", "2", "]", ",", "\n", "mode", "=", "'markers'", ",", "\n", "marker", "=", "dict", "(", "\n", "size", "=", "pointsize", ",", "\n", "color", "=", "n_seen", ",", "\n", "colorscale", "=", "'spectral'", ",", "\n", "colorbar", "=", "dict", "(", "\n", "thickness", "=", "10", ",", "len", "=", "0.66", ",", "tick0", "=", "0", ",", "\n", "dtick", "=", "max", "(", "1", ",", "int", "(", "n_seen", ".", "max", "(", ")", "/", "10.", ")", ")", ",", ")", ",", ")", ",", "\n", "hovertext", "=", "[", "f\"seen: {n}\"", "for", "n", "in", "n_seen", "]", ",", "\n", "hoverinfo", "=", "'x+y+z+text'", ",", "\n", "showlegend", "=", "False", ",", "\n", "visible", "=", "not", "initialized_visibility", ",", ")", ")", "\n", "modes", "[", "'name'", "]", ".", "append", "(", "'Times seen'", ")", "\n", "modes", "[", "'key'", "]", ".", "append", "(", "'n_seen'", ")", "\n", "modes", "[", "'num_traces'", "]", ".", "append", "(", "1", ")", "\n", "initialized_visibility", "=", "True", "\n", "\n", "# Draw a trace for position-colored 3D point cloud", "\n", "# radius = torch.norm(data.pos - data.pos.mean(dim=0), dim=1).max()", "\n", "# data.pos_rgb = (data.pos - data.pos.mean(dim=0)) / (2 * radius) + 0.5", "\n", "", "mini", "=", "data", ".", "pos", ".", "min", "(", "dim", "=", "0", ")", ".", "values", "\n", "maxi", "=", "data", ".", "pos", ".", "max", "(", "dim", "=", "0", ")", ".", "values", "\n", "data", ".", "pos_rgb", "=", "(", "data", ".", "pos", "-", "mini", ")", "/", "(", "maxi", "-", "mini", "+", "1e-6", ")", "\n", "fig", ".", "add_trace", "(", "\n", "go", ".", "Scatter3d", "(", "\n", "name", "=", "'Position RGB'", ",", "\n", "x", "=", "data", ".", "pos", "[", ":", ",", "0", "]", ",", "\n", "y", "=", "data", ".", "pos", "[", ":", ",", "1", "]", ",", "\n", "z", "=", "data", ".", "pos", "[", ":", ",", "2", "]", ",", "\n", "mode", "=", "'markers'", ",", "\n", "marker", "=", "dict", "(", "\n", "size", "=", "pointsize", ",", "\n", "color", "=", "rgb_to_plotly_rgb", "(", "data", ".", "pos_rgb", ")", ",", ")", ",", "\n", "hoverinfo", "=", "'x+y+z'", ",", "\n", "showlegend", "=", "False", ",", "\n", "visible", "=", "not", "initialized_visibility", ",", ")", ")", "\n", "modes", "[", "'name'", "]", ".", "append", "(", "'Position RGB'", ")", "\n", "modes", "[", "'key'", "]", ".", "append", "(", "'position_rgb'", ")", "\n", "modes", "[", "'num_traces'", "]", ".", "append", "(", "1", ")", "\n", "initialized_visibility", "=", "True", "\n", "\n", "# Draw a trace for 3D point cloud features", "\n", "if", "getattr", "(", "data", ",", "'x'", ",", "None", ")", "is", "not", "None", ":", "\n", "# Recover the features and convert them to an RGB format for ", "\n", "# visualization.", "\n", "        ", "data", ".", "feat_3d", "=", "feats_to_rgb", "(", "data", ".", "x", ",", "normalize", "=", "True", ")", "\n", "fig", ".", "add_trace", "(", "\n", "go", ".", "Scatter3d", "(", "\n", "name", "=", "'Features 3D'", ",", "\n", "x", "=", "data", ".", "pos", "[", ":", ",", "0", "]", ",", "\n", "y", "=", "data", ".", "pos", "[", ":", ",", "1", "]", ",", "\n", "z", "=", "data", ".", "pos", "[", ":", ",", "2", "]", ",", "\n", "mode", "=", "'markers'", ",", "\n", "marker", "=", "dict", "(", "\n", "size", "=", "pointsize", ",", "\n", "color", "=", "rgb_to_plotly_rgb", "(", "data", ".", "feat_3d", ")", ",", ")", ",", "\n", "hoverinfo", "=", "'x+y+z'", ",", "\n", "showlegend", "=", "False", ",", "\n", "visible", "=", "not", "initialized_visibility", ",", ")", ")", "\n", "modes", "[", "'name'", "]", ".", "append", "(", "'Features 3D'", ")", "\n", "modes", "[", "'key'", "]", ".", "append", "(", "'x'", ")", "\n", "modes", "[", "'num_traces'", "]", ".", "append", "(", "1", ")", "\n", "initialized_visibility", "=", "True", "\n", "\n", "# Add a trace for prediction errors", "\n", "", "has_error", "=", "getattr", "(", "data", ",", "'y'", ",", "None", ")", "is", "not", "None", "and", "getattr", "(", "data", ",", "'pred'", ",", "None", ")", "is", "not", "None", "\n", "if", "has_error", ":", "\n", "        ", "indices", "=", "np", ".", "where", "(", "data", ".", "pred", ".", "numpy", "(", ")", "!=", "data", ".", "y", ".", "numpy", "(", ")", ")", "[", "0", "]", "\n", "error_color", "=", "f\"rgb{tuple(error_color)}\"", "if", "error_color", "is", "not", "None", "else", "'rgb(255, 0, 0)'", "\n", "fig", ".", "add_trace", "(", "\n", "go", ".", "Scatter3d", "(", "\n", "name", "=", "'Errors'", ",", "\n", "opacity", "=", "1.0", ",", "\n", "x", "=", "data", ".", "pos", "[", "indices", ",", "0", "]", ",", "\n", "y", "=", "data", ".", "pos", "[", "indices", ",", "1", "]", ",", "\n", "z", "=", "data", ".", "pos", "[", "indices", ",", "2", "]", ",", "\n", "mode", "=", "'markers'", ",", "\n", "marker", "=", "dict", "(", "\n", "size", "=", "pointsize", ",", "\n", "color", "=", "error_color", ",", ")", ",", "\n", "showlegend", "=", "False", ",", "\n", "visible", "=", "False", ",", ")", ")", "\n", "modes", "[", "'name'", "]", ".", "append", "(", "'Errors'", ")", "\n", "modes", "[", "'key'", "]", ".", "append", "(", "'error'", ")", "\n", "modes", "[", "'num_traces'", "]", ".", "append", "(", "1", ")", "\n", "\n", "# Draw image positions", "\n", "", "if", "has_2d", ":", "\n", "\n", "        ", "img_traces", "=", "[", "]", "\n", "if", "images", ".", "num_settings", ">", "1", ":", "\n", "            ", "image_xyz", "=", "torch", ".", "cat", "(", "[", "im", ".", "pos", "for", "im", "in", "images", "]", ")", ".", "numpy", "(", ")", "\n", "image_axes", "=", "torch", ".", "cat", "(", "[", "im", ".", "axes", "for", "im", "in", "images", "]", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "            ", "image_xyz", "=", "images", "[", "0", "]", ".", "pos", ".", "numpy", "(", ")", "\n", "image_axes", "=", "images", "[", "0", "]", ".", "axes", ".", "numpy", "(", ")", "\n", "", "if", "len", "(", "image_xyz", ".", "shape", ")", "==", "1", ":", "\n", "            ", "image_xyz", "=", "image_xyz", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", "\n", "", "for", "i", ",", "(", "xyz", ",", "axes", ")", "in", "enumerate", "(", "zip", "(", "image_xyz", ",", "image_axes", ")", ")", ":", "\n", "\n", "# Draw image coordinate system axes", "\n", "            ", "arrow_length", "=", "0.4", "\n", "for", "v", ",", "color", "in", "zip", "(", "axes", ",", "[", "'red'", ",", "'green'", ",", "'blue'", "]", ")", ":", "# TODO: proprely rotate S3DIS equirectangular axes", "\n", "#             for v, color in zip(axes, [ 'blue', 'red', 'green',]):", "\n", "                ", "v", "=", "xyz", "+", "v", "*", "arrow_length", "\n", "fig", ".", "add_trace", "(", "\n", "go", ".", "Scatter3d", "(", "\n", "x", "=", "[", "xyz", "[", "0", "]", ",", "v", "[", "0", "]", "]", ",", "\n", "y", "=", "[", "xyz", "[", "1", "]", ",", "v", "[", "1", "]", "]", ",", "\n", "z", "=", "[", "xyz", "[", "2", "]", ",", "v", "[", "2", "]", "]", ",", "\n", "mode", "=", "'lines'", ",", "\n", "line", "=", "dict", "(", "\n", "color", "=", "color", ",", "\n", "width", "=", "pointsize", "+", "7", ")", ",", "\n", "showlegend", "=", "False", ",", "\n", "hoverinfo", "=", "'none'", ",", "\n", "#                         visible=True,  # see all axes", "\n", "visible", "=", "(", "color", "==", "'blue'", ")", ",", "# see main axis", "\n", ")", ")", "\n", "\n", "# Draw image position as ball", "\n", "", "img_traces", ".", "append", "(", "len", "(", "fig", ".", "data", ")", ")", "\n", "fig", ".", "add_trace", "(", "\n", "go", ".", "Scatter3d", "(", "\n", "name", "=", "f\"Image {i}\"", ",", "\n", "x", "=", "[", "xyz", "[", "0", "]", "]", ",", "\n", "y", "=", "[", "xyz", "[", "1", "]", "]", ",", "\n", "z", "=", "[", "xyz", "[", "2", "]", "]", ",", "\n", "mode", "=", "'markers+text'", ",", "\n", "marker", "=", "dict", "(", "\n", "line_width", "=", "2", ",", "\n", "size", "=", "pointsize", "+", "12", ",", "\n", "color", "=", "PALETTE", "[", "i", "%", "len", "(", "PALETTE", ")", "]", ",", ")", ",", "\n", "text", "=", "f\"<b>{i}</b>\"", "if", "show_image_number", "else", "''", ",", "\n", "textposition", "=", "\"bottom center\"", ",", "\n", "textfont", "=", "dict", "(", "size", "=", "16", ")", ",", "\n", "hoverinfo", "=", "'x+y+z+name'", ",", "\n", "showlegend", "=", "False", ",", "\n", "visible", "=", "True", ",", ")", ")", "\n", "\n", "# Traces visibility for interactive point cloud coloring", "\n", "", "", "def", "trace_visibility", "(", "mode", ")", ":", "\n", "        ", "visibilities", "=", "np", ".", "array", "(", "[", "d", ".", "visible", "for", "d", "in", "fig", ".", "data", "]", ",", "dtype", "=", "'bool'", ")", "\n", "\n", "# Traces visibility for interactive point cloud coloring", "\n", "i_mode", "=", "modes", "[", "'key'", "]", ".", "index", "(", "mode", ")", "\n", "a", "=", "sum", "(", "modes", "[", "'num_traces'", "]", "[", ":", "i_mode", "]", ")", "\n", "b", "=", "sum", "(", "modes", "[", "'num_traces'", "]", "[", ":", "i_mode", "+", "1", "]", ")", "\n", "n_traces", "=", "sum", "(", "modes", "[", "'num_traces'", "]", ")", "\n", "\n", "visibilities", "[", ":", "n_traces", "]", "=", "False", "\n", "visibilities", "[", "a", ":", "b", "]", "=", "True", "\n", "\n", "return", "[", "{", "\"visible\"", ":", "visibilities", ".", "tolist", "(", ")", "}", "]", "\n", "\n", "# Create the buttons that will serve for toggling trace visibility", "\n", "", "updatemenus", "=", "[", "\n", "dict", "(", "\n", "buttons", "=", "[", "dict", "(", "label", "=", "name", ",", "method", "=", "'update'", ",", "args", "=", "trace_visibility", "(", "key", ")", ")", "\n", "for", "name", ",", "key", "in", "zip", "(", "modes", "[", "'name'", "]", ",", "modes", "[", "'key'", "]", ")", "if", "key", "!=", "'error'", "]", ",", "\n", "pad", "=", "{", "'r'", ":", "10", ",", "'t'", ":", "10", "}", ",", "\n", "showactive", "=", "True", ",", "\n", "type", "=", "'dropdown'", ",", "\n", "direction", "=", "'right'", ",", "\n", "xanchor", "=", "'left'", ",", "\n", "x", "=", "0.02", ",", "\n", "yanchor", "=", "'top'", ",", "\n", "y", "=", "1.02", ",", ")", ",", "\n", "]", "\n", "if", "has_error", ":", "\n", "        ", "updatemenus", ".", "append", "(", "\n", "dict", "(", "\n", "buttons", "=", "[", "dict", "(", "\n", "method", "=", "'restyle'", ",", "\n", "label", "=", "'Error'", ",", "\n", "visible", "=", "True", ",", "\n", "args", "=", "[", "{", "'visible'", ":", "True", ",", "}", ",", "\n", "[", "sum", "(", "modes", "[", "'num_traces'", "]", "[", ":", "modes", "[", "'key'", "]", ".", "index", "(", "'error'", ")", "]", ")", "]", "]", ",", "\n", "args2", "=", "[", "{", "'visible'", ":", "False", ",", "}", ",", "\n", "[", "sum", "(", "modes", "[", "'num_traces'", "]", "[", ":", "modes", "[", "'key'", "]", ".", "index", "(", "'error'", ")", "]", ")", "]", "]", ",", ")", "]", ",", "\n", "pad", "=", "{", "'r'", ":", "10", ",", "'t'", ":", "10", "}", ",", "\n", "showactive", "=", "False", ",", "\n", "type", "=", "'buttons'", ",", "\n", "xanchor", "=", "'left'", ",", "\n", "x", "=", "1.02", ",", "\n", "yanchor", "=", "'top'", ",", "\n", "y", "=", "1.02", ",", ")", ",", "\n", ")", "\n", "", "fig", ".", "update_layout", "(", "updatemenus", "=", "updatemenus", ")", "\n", "\n", "# Place the legend on the left", "\n", "fig", ".", "update_layout", "(", "\n", "legend", "=", "dict", "(", "\n", "yanchor", "=", "\"middle\"", ",", "\n", "y", "=", "0.5", ",", "\n", "xanchor", "=", "\"right\"", ",", "\n", "x", "=", "0.99", ")", ")", "\n", "\n", "# Hide all axes and no background", "\n", "fig", ".", "update_layout", "(", "\n", "scene", "=", "dict", "(", "\n", "xaxis_title", "=", "''", ",", "\n", "yaxis_title", "=", "''", ",", "\n", "zaxis_title", "=", "''", ",", "\n", "xaxis", "=", "dict", "(", "\n", "autorange", "=", "True", ",", "\n", "showgrid", "=", "False", ",", "\n", "ticks", "=", "''", ",", "\n", "showticklabels", "=", "False", ",", "\n", "backgroundcolor", "=", "\"rgba(0, 0, 0, 0)\"", "\n", ")", ",", "\n", "yaxis", "=", "dict", "(", "\n", "autorange", "=", "True", ",", "\n", "showgrid", "=", "False", ",", "\n", "ticks", "=", "''", ",", "\n", "showticklabels", "=", "False", ",", "\n", "backgroundcolor", "=", "\"rgba(0, 0, 0, 0)\"", "\n", ")", ",", "\n", "zaxis", "=", "dict", "(", "\n", "autorange", "=", "True", ",", "\n", "showgrid", "=", "False", ",", "\n", "ticks", "=", "''", ",", "\n", "showticklabels", "=", "False", ",", "\n", "backgroundcolor", "=", "\"rgba(0, 0, 0, 0)\"", "\n", ")", "\n", ")", "\n", ")", "\n", "\n", "output", "=", "{", "'figure'", ":", "fig", ",", "'data'", ":", "data", "}", "\n", "\n", "if", "has_2d", ":", "\n", "        ", "output", "[", "'images'", "]", "=", "images", "\n", "output", "[", "'img_traces'", "]", "=", "img_traces", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.visualization.multimodal_data.visualize_2d": [[509, 878], ["isinstance", "int", "plotly.Layout", "plotly.Figure", "go.Figure.update_xaxes", "go.Figure.update_yaxes", "mm_data.data.clone", "mm_data.modalities[].clone", "isinstance", "any", "isinstance", "isinstance", "any", "max", "max", "enumerate", "updatemenus.append", "go.Figure.update_layout", "int", "torch_points3d.core.multimodal.image.ImageData", "any", "torch_points3d.core.multimodal.image.ImageData", "getattr", "getattr", "ValueError", "ValueError", "ValueError", "torch.ByteTensor().view", "torch.zeros", "min", "len", "len", "itertools.chain", "go.Figure.add_trace", "numpy.array", "numpy.array", "dict", "updatemenus.append", "min", "dict", "dict", "any", "any", "any", "ValueError", "[].permute", "any", "any", "torch.cat", "multimodal_data.feats_to_rgb", "zip", "plotly.Image", "dict", "any", "ValueError", "im.pred.is_floating_point", "im.pred.argmax", "x.T.reshape().permute", "getattr().byte", "getattr", "torch.ByteTensor", "FRONT.keys", "im.background_alpha.clone", "im.visualizations.append", "im.front.append", "color.repeat_interleave.repeat_interleave", "color.repeat_interleave.repeat_interleave", "im.background_alpha.clone", "im.visualizations.append", "im.front.append", "torch.norm().max", "color.repeat_interleave.repeat_interleave", "color.repeat_interleave.repeat_interleave", "im.background_alpha.clone", "im.visualizations.append", "im.front.append", "color.repeat_interleave.repeat_interleave", "color.repeat_interleave.repeat_interleave", "im.background_alpha.clone", "im.visualizations.append", "im.front.append", "color.repeat_interleave.repeat_interleave", "color.repeat_interleave.repeat_interleave", "im.background_alpha.clone", "im.visualizations.append", "im.front.append", "color.repeat_interleave.repeat_interleave", "im.background.clone", "im.visualizations.append", "im.front.append", "is_tp.unsqueeze.repeat_interleave", "is_tp.unsqueeze.repeat_interleave", "is_tp.unsqueeze.unsqueeze", "y.repeat_interleave.repeat_interleave", "y.repeat_interleave.repeat_interleave", "is_tp.unsqueeze.unsqueeze", "np.array.tolist", "np.array.tolist", "getattr", "im.load", "len", "len", "ValueError", "getattr().is_floating_point", "getattr", "zip", "torch.ByteTensor", "im_pred.argmax", "im.background.clone.__iter__", "image.permute", "dict", "isinstance", "torch.ByteTensor", "getattr().max", "getattr().float().permute().reshape", "zip", "x.T.reshape", "feats_to_rgb.split", "getattr", "torch.norm", "len", "range", "dict", "getattr", "len", "im.pred.long", "getattr", "multimodal_data.feats_to_rgb", "multimodal_data.feats_to_rgb", "numpy.arange", "multimodal_data.visualize_2d.view_visibility"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.clone", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.clone", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.visualization.multimodal_data.feats_to_rgb", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.mock.MockDatasetConfig.keys", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.clone", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.clone", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.clone", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.clone", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.clone", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.clone", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.__iter__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.split", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.visualization.multimodal_data.feats_to_rgb", "home.repos.pwc.inspect_result.drprojects_deepviewagg.visualization.multimodal_data.feats_to_rgb"], ["", "def", "visualize_2d", "(", "\n", "mm_data", ",", "figsize", "=", "800", ",", "width", "=", "None", ",", "height", "=", "None", ",", "alpha", "=", "0.3", ",", "\n", "back_dark", "=", "False", ",", "class_colors", "=", "None", ",", "back", "=", "None", ",", "front", "=", "None", ",", "\n", "overlay_point_error", "=", "False", ",", "overlay_view_error", "=", "False", ",", "error_color", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"2D data interactive visualization.\n\n    :param mm_data: MMData object holding 3d points, images and mappings\n    :param figsize: figure dimensions will be (figsize, figsize/2) if\n      `width` and `height` are not specified\n    :param width: figure width\n    :param height: figure height\n    :param alpha: controls the intensity of background (non-mapped)\n      pixels\n    :param back_dark: whether the background (non-mapped) pixels should\n      appear brightened or darkened\n    :param class_colors: colors for point labels in MMData\n    :param back: background mode for non-mapped pixels visualization:\n      'x' will use the image features, 'pred' will use image predictions.\n      Otherwise, fallback to 'x'\n    :param front: foreground mode used for mapped pixels visualization:\n      'map' simply uses a dark/bright pattern between the background and\n      the foreground, 'rgb' colors pixels with the associated 3D point's\n      RGB color, 'pos' colors pixels with the associated 3D point's\n      RGB-encoded position, 'y' colors pixels with the associated 3D\n      point's label, 'feat_3d' colors pixels with the associated 3D\n      point's features, 'feat_proj' colors pixels with the associated\n      mapping features.\n    :param overlay_point_error: True to colorize mapped pixels where the\n      point prediction is incorrect after multi-view aggregation\n    :param overlay_view_error: True to colorize mapped pixels where the\n      point prediction is incorrect for the view only\n    :param error_color: color used to show erroneous predictions\n    :param kwargs:\n    :return:\n    \"\"\"", "\n", "assert", "isinstance", "(", "mm_data", ",", "MMData", ")", "\n", "\n", "# Prepare figure", "\n", "width", "=", "width", "if", "width", "and", "height", "else", "figsize", "\n", "height", "=", "height", "if", "width", "and", "height", "else", "int", "(", "figsize", "/", "2", ")", "\n", "margin", "=", "int", "(", "0.02", "*", "min", "(", "width", ",", "height", ")", ")", "\n", "layout", "=", "go", ".", "Layout", "(", "\n", "width", "=", "width", ",", "\n", "height", "=", "height", ",", "\n", "scene", "=", "dict", "(", "aspectmode", "=", "'data'", ",", ")", ",", "# preserve aspect ratio", "\n", "margin", "=", "dict", "(", "l", "=", "margin", ",", "r", "=", "margin", ",", "b", "=", "margin", ",", "t", "=", "margin", ")", ",", "\n", "uirevision", "=", "True", ")", "\n", "fig", "=", "go", ".", "Figure", "(", "layout", "=", "layout", ")", "\n", "fig", ".", "update_xaxes", "(", "visible", "=", "False", ")", "# hide image axes", "\n", "fig", ".", "update_yaxes", "(", "visible", "=", "False", ")", "# hide image axes", "\n", "\n", "# Make copies of the data and images to be modified in this scope", "\n", "data", "=", "mm_data", ".", "data", ".", "clone", "(", ")", "\n", "images", "=", "mm_data", ".", "modalities", "[", "'image'", "]", ".", "clone", "(", ")", "\n", "\n", "# Convert images to ImageData for convenience", "\n", "if", "isinstance", "(", "images", ",", "SameSettingImageData", ")", ":", "\n", "        ", "images", "=", "ImageData", "(", "[", "images", "]", ")", "\n", "\n", "# Return empty figure if no images are provided", "\n", "", "if", "images", ".", "num_views", "==", "0", ":", "\n", "        ", "return", "{", "\n", "'figure'", ":", "fig", ",", "\n", "'n_views'", ":", "0", ",", "\n", "'n_front'", ":", "0", ",", "\n", "'images'", ":", "images", ",", "\n", "'data'", ":", "data", ",", "\n", "'front'", ":", "front", ",", "\n", "'back'", ":", "back", "}", "\n", "\n", "# Set the image background with a fallback to 'x' attribute.", "\n", "# The background must be an image attribute carrying a tensor of", "\n", "# size (Num_Views, C, H, W) ((Num_Views, H, W) is accepted for", "\n", "# 'pred' labels only).", "\n", "", "if", "back", "is", "None", "or", "any", "(", "[", "getattr", "(", "im", ",", "back", ",", "None", ")", "is", "None", "for", "im", "in", "images", "]", ")", ":", "\n", "        ", "back", "=", "'x'", "\n", "", "elif", "any", "(", "[", "not", "isinstance", "(", "getattr", "(", "im", ",", "back", ")", ",", "torch", ".", "Tensor", ")", "for", "im", "in", "images", "]", ")", "or", "any", "(", "[", "getattr", "(", "im", ",", "back", ")", ".", "shape", "[", "0", "]", "!=", "im", ".", "num_views", "for", "im", "in", "images", "]", ")", "or", "any", "(", "[", "getattr", "(", "im", ",", "back", ")", ".", "shape", "[", "-", "2", ":", "]", "!=", "im", ".", "img_size", "[", ":", ":", "-", "1", "]", "for", "im", "in", "images", "]", ")", ":", "\n", "        ", "raise", "ValueError", "(", "f\"Background attribute '{back}' cannot be treated as an image tensor.\"", ")", "\n", "", "elif", "back", "!=", "'pred'", "and", "any", "(", "[", "len", "(", "getattr", "(", "im", ",", "back", ")", ".", "shape", ")", "!=", "4", "for", "im", "in", "images", "]", ")", ":", "\n", "        ", "raise", "ValueError", "(", "f\"Background attribute '{back}' must have shape (Num_Views, C, H, W).\"", ")", "\n", "\n", "# Load images, if need be", "\n", "", "if", "back", "==", "'x'", ":", "\n", "        ", "images", "=", "ImageData", "(", "[", "im", ".", "load", "(", ")", "if", "im", ".", "x", "is", "None", "else", "im", "for", "im", "in", "images", "]", ")", "\n", "\n", "# Convert 2D predicted labels to RGB colors", "\n", "", "if", "back", "==", "'pred'", ":", "\n", "        ", "for", "im", "in", "images", ":", "\n", "# Convert logits to labels if need be", "\n", "            ", "if", "len", "(", "im", ".", "pred", ".", "shape", ")", "==", "4", "and", "im", ".", "pred", ".", "is_floating_point", "(", ")", ":", "\n", "                ", "im", ".", "pred", "=", "im", ".", "pred", ".", "argmax", "(", "dim", "=", "1", ")", "\n", "", "elif", "len", "(", "im", ".", "pred", ".", "shape", ")", "!=", "3", ":", "\n", "                ", "raise", "ValueError", "(", "\"Image predictions must be int labels or float logits.\"", ")", "\n", "", "im", ".", "background", "=", "torch", ".", "ByteTensor", "(", "class_colors", ")", "[", "im", ".", "pred", ".", "long", "(", ")", "]", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "\n", "# Convert the background to RGB, if need be. All images are handled", "\n", "# at once, in case we need to PCA the features in a common", "\n", "# projective space.", "\n", "", "", "elif", "any", "(", "[", "getattr", "(", "im", ",", "back", ")", ".", "is_floating_point", "(", ")", "for", "im", "in", "images", "]", ")", "or", "any", "(", "[", "getattr", "(", "im", ",", "back", ")", ".", "max", "(", ")", ">", "255", "for", "im", "in", "images", "]", ")", ":", "\n", "        ", "shapes", "=", "[", "getattr", "(", "im", ",", "back", ")", ".", "shape", "for", "im", "in", "images", "]", "\n", "sizes", "=", "[", "s", "[", "0", "]", "*", "s", "[", "2", "]", "*", "s", "[", "3", "]", "for", "s", "in", "shapes", "]", "\n", "feats", "=", "torch", ".", "cat", "(", "[", "\n", "getattr", "(", "im", ",", "back", ")", ".", "float", "(", ")", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ")", ".", "reshape", "(", "s", "[", "1", "]", ",", "-", "1", ")", ".", "T", "\n", "for", "im", ",", "s", "in", "zip", "(", "images", ",", "shapes", ")", "]", ",", "dim", "=", "0", ")", "\n", "colors", "=", "feats_to_rgb", "(", "feats", ")", "\n", "colors", "=", "[", "x", ".", "T", ".", "reshape", "(", "3", ",", "s", "[", "0", "]", ",", "s", "[", "2", "]", ",", "s", "[", "3", "]", ")", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ")", "\n", "for", "x", ",", "s", "in", "zip", "(", "colors", ".", "split", "(", "sizes", ")", ",", "shapes", ")", "]", "\n", "for", "rgb", ",", "im", "in", "zip", "(", "colors", ",", "images", ")", ":", "\n", "            ", "im", ".", "background", "=", "(", "rgb", "*", "255", ")", ".", "byte", "(", ")", "\n", "\n", "# Save the background", "\n", "", "", "else", ":", "\n", "        ", "for", "im", "in", "images", ":", "\n", "            ", "im", ".", "background", "=", "getattr", "(", "im", ",", "back", ")", ".", "byte", "(", ")", "\n", "\n", "# Set the error visualization parameters", "\n", "", "", "no_3d_y", "=", "getattr", "(", "data", ",", "'y'", ",", "None", ")", "is", "None", "\n", "no_3d_pred", "=", "getattr", "(", "data", ",", "'pred'", ",", "None", ")", "is", "None", "\n", "no_2d_pred", "=", "any", "(", "[", "getattr", "(", "im", ",", "'pred'", ",", "None", ")", "is", "None", "for", "im", "in", "images", "]", ")", "\n", "if", "overlay_point_error", "and", "(", "no_3d_y", "or", "no_3d_pred", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"'show_point_error' requires points to carry 'y' and 'pred' attributes.\"", ")", "\n", "", "if", "overlay_view_error", "and", "(", "no_3d_y", "or", "no_2d_pred", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "\"'show_view_error' requires points to carry 'y' attributes and images to carry 'pred' attributes.\"", ")", "\n", "", "if", "overlay_point_error", "and", "overlay_view_error", ":", "\n", "        ", "raise", "ValueError", "(", "\"Please choose either 'show_point_error' or 'show_point_error', but not both.\"", ")", "\n", "", "error_color", "=", "torch", ".", "ByteTensor", "(", "error_color", ")", ".", "view", "(", "1", ",", "3", ")", "if", "error_color", "is", "not", "None", "else", "torch", ".", "zeros", "(", "1", ",", "3", ",", "dtype", "=", "torch", ".", "uint8", ")", "\n", "\n", "# Set the image foregrounds", "\n", "FRONT", "=", "{", "\n", "'map'", ":", "'Mapping'", ",", "\n", "'rgb'", ":", "'Point RGB'", ",", "\n", "'pos'", ":", "'Point position'", ",", "\n", "'y'", ":", "'Point label'", ",", "\n", "'feat_3d'", ":", "'Point features'", ",", "\n", "'feat_proj'", ":", "'Mapping features'", "}", "\n", "if", "isinstance", "(", "front", ",", "str", ")", ":", "\n", "        ", "front", "=", "[", "front", "]", "\n", "", "if", "isinstance", "(", "front", ",", "list", ")", ":", "\n", "        ", "front", "=", "[", "x", "for", "x", "in", "FRONT", ".", "keys", "(", ")", "if", "x", "in", "front", "]", "\n", "front_label", "=", "[", "FRONT", "[", "x", "]", "for", "x", "in", "front", "]", "\n", "", "else", ":", "\n", "        ", "front", "=", "[", "]", "\n", "", "if", "any", "(", "[", "im", ".", "mappings", "is", "None", "for", "im", "in", "images", "]", ")", ":", "\n", "        ", "front", "=", "[", "]", "\n", "\n", "# Make sure alpha is in [0, 1]", "\n", "", "alpha", "=", "max", "(", "0", ",", "min", "(", "alpha", ",", "1", ")", ")", "\n", "\n", "# Compute the background-foreground visualizations", "\n", "if", "len", "(", "front", ")", "==", "0", ":", "\n", "        ", "for", "im", "in", "images", ":", "\n", "            ", "im", ".", "visualizations", "=", "[", "im", ".", "background", "]", "\n", "im", ".", "front", "=", "[", "]", "\n", "", "", "else", ":", "\n", "        ", "for", "im", "in", "images", ":", "\n", "# Color the mapped foreground and brighten/darken the", "\n", "# background with alpha intensity", "\n", "            ", "if", "back_dark", ":", "\n", "                ", "im", ".", "background_alpha", "=", "(", "im", ".", "background", ".", "float", "(", ")", "*", "alpha", ")", ".", "floor", "(", ")", ".", "type", "(", "torch", ".", "uint8", ")", "\n", "", "else", ":", "\n", "                ", "im", ".", "background_alpha", "=", "(", "255", "-", "alpha", "*", "(", "255", "-", "im", ".", "background", ".", "float", "(", ")", ")", ")", ".", "floor", "(", ")", ".", "type", "(", "torch", ".", "uint8", ")", "\n", "\n", "# Get the mapping of all points in the sample", "\n", "", "idx", "=", "im", ".", "mappings", ".", "feature_map_indexing", "\n", "\n", "# Init the visualizations", "\n", "im", ".", "visualizations", "=", "[", "]", "\n", "im", ".", "front", "=", "[", "]", "\n", "\n", "# Set mapping mask back to original lighting", "\n", "if", "'map'", "in", "front", ":", "\n", "# color = torch.full((3,), alpha, dtype=torch.uint8)", "\n", "# color = im.background_alpha[idx] * color", "\n", "                ", "color", "=", "im", ".", "background", "[", "idx", "]", "\n", "viz", "=", "im", ".", "background_alpha", ".", "clone", "(", ")", "\n", "viz", "[", "idx", "]", "=", "color", "\n", "im", ".", "visualizations", ".", "append", "(", "viz", ")", "\n", "im", ".", "front", ".", "append", "(", "color", ")", "\n", "\n", "# Set mapping mask to point cloud RGB colors", "\n", "", "if", "'rgb'", "in", "front", ":", "\n", "                ", "color", "=", "(", "data", ".", "rgb", "*", "255", ")", ".", "type", "(", "torch", ".", "uint8", ")", "\n", "color", "=", "color", ".", "repeat_interleave", "(", "\n", "im", ".", "mappings", ".", "pointers", "[", "1", ":", "]", "-", "im", ".", "mappings", ".", "pointers", "[", ":", "-", "1", "]", ",", "\n", "dim", "=", "0", ")", "\n", "color", "=", "color", ".", "repeat_interleave", "(", "\n", "im", ".", "mappings", ".", "values", "[", "1", "]", ".", "pointers", "[", "1", ":", "]", "\n", "-", "im", ".", "mappings", ".", "values", "[", "1", "]", ".", "pointers", "[", ":", "-", "1", "]", ",", "\n", "dim", "=", "0", ")", "\n", "viz", "=", "im", ".", "background_alpha", ".", "clone", "(", ")", "\n", "viz", "[", "idx", "]", "=", "color", "\n", "im", ".", "visualizations", ".", "append", "(", "viz", ")", "\n", "im", ".", "front", ".", "append", "(", "color", ")", "\n", "\n", "# Set mapping mask to point cloud positional RGB colors", "\n", "", "if", "'pos'", "in", "front", ":", "\n", "                ", "radius", "=", "torch", ".", "norm", "(", "\n", "data", ".", "pos", "-", "data", ".", "pos", ".", "mean", "(", "dim", "=", "0", ")", ",", "dim", "=", "1", ")", ".", "max", "(", ")", "\n", "color", "=", "(", "(", "data", ".", "pos", "-", "data", ".", "pos", ".", "mean", "(", "dim", "=", "0", ")", ")", "\n", "/", "(", "2", "*", "radius", ")", "*", "255", "+", "127", ")", ".", "type", "(", "torch", ".", "uint8", ")", "\n", "color", "=", "color", ".", "repeat_interleave", "(", "\n", "im", ".", "mappings", ".", "pointers", "[", "1", ":", "]", "-", "im", ".", "mappings", ".", "pointers", "[", ":", "-", "1", "]", ",", "\n", "dim", "=", "0", ")", "\n", "color", "=", "color", ".", "repeat_interleave", "(", "\n", "im", ".", "mappings", ".", "values", "[", "1", "]", ".", "pointers", "[", "1", ":", "]", "\n", "-", "im", ".", "mappings", ".", "values", "[", "1", "]", ".", "pointers", "[", ":", "-", "1", "]", ",", "\n", "dim", "=", "0", ")", "\n", "viz", "=", "im", ".", "background_alpha", ".", "clone", "(", ")", "\n", "viz", "[", "idx", "]", "=", "color", "\n", "im", ".", "visualizations", ".", "append", "(", "viz", ")", "\n", "im", ".", "front", ".", "append", "(", "color", ")", "\n", "\n", "", "if", "'y'", "in", "front", ":", "\n", "# Set mapping mask to point labels", "\n", "                ", "color", "=", "torch", ".", "ByteTensor", "(", "class_colors", ")", "[", "data", ".", "y", "]", "\n", "color", "=", "color", ".", "repeat_interleave", "(", "\n", "im", ".", "mappings", ".", "pointers", "[", "1", ":", "]", "-", "im", ".", "mappings", ".", "pointers", "[", ":", "-", "1", "]", ",", "\n", "dim", "=", "0", ")", "\n", "color", "=", "color", ".", "repeat_interleave", "(", "\n", "im", ".", "mappings", ".", "values", "[", "1", "]", ".", "pointers", "[", "1", ":", "]", "\n", "-", "im", ".", "mappings", ".", "values", "[", "1", "]", ".", "pointers", "[", ":", "-", "1", "]", ",", "\n", "dim", "=", "0", ")", "\n", "viz", "=", "im", ".", "background_alpha", ".", "clone", "(", ")", "\n", "viz", "[", "idx", "]", "=", "color", "\n", "im", ".", "visualizations", ".", "append", "(", "viz", ")", "\n", "im", ".", "front", ".", "append", "(", "color", ")", "\n", "\n", "", "if", "'feat_3d'", "in", "front", ":", "\n", "                ", "color", "=", "(", "feats_to_rgb", "(", "data", ".", "x", ")", "*", "255", ")", ".", "type", "(", "torch", ".", "uint8", ")", "\n", "color", "=", "color", ".", "repeat_interleave", "(", "\n", "im", ".", "mappings", ".", "pointers", "[", "1", ":", "]", "-", "im", ".", "mappings", ".", "pointers", "[", ":", "-", "1", "]", ",", "\n", "dim", "=", "0", ")", "\n", "color", "=", "color", ".", "repeat_interleave", "(", "\n", "im", ".", "mappings", ".", "values", "[", "1", "]", ".", "pointers", "[", "1", ":", "]", "\n", "-", "im", ".", "mappings", ".", "values", "[", "1", "]", ".", "pointers", "[", ":", "-", "1", "]", ",", "\n", "dim", "=", "0", ")", "\n", "viz", "=", "im", ".", "background_alpha", ".", "clone", "(", ")", "\n", "viz", "[", "idx", "]", "=", "color", "\n", "im", ".", "visualizations", ".", "append", "(", "viz", ")", "\n", "im", ".", "front", ".", "append", "(", "color", ")", "\n", "\n", "", "if", "'feat_proj'", "in", "front", ":", "\n", "                ", "color", "=", "(", "feats_to_rgb", "(", "im", ".", "mappings", ".", "features", ")", "*", "255", ")", ".", "type", "(", "torch", ".", "uint8", ")", "\n", "color", "=", "color", ".", "repeat_interleave", "(", "\n", "im", ".", "mappings", ".", "values", "[", "1", "]", ".", "pointers", "[", "1", ":", "]", "\n", "-", "im", ".", "mappings", ".", "values", "[", "1", "]", ".", "pointers", "[", ":", "-", "1", "]", ",", "\n", "dim", "=", "0", ")", "\n", "viz", "=", "im", ".", "background", ".", "clone", "(", ")", "\n", "viz", "[", "idx", "]", "=", "color", "\n", "im", ".", "visualizations", ".", "append", "(", "viz", ")", "\n", "im", ".", "front", ".", "append", "(", "color", ")", "\n", "\n", "", "if", "not", "no_3d_y", "and", "not", "no_3d_pred", ":", "\n", "                ", "is_tp", "=", "(", "data", ".", "pred", "==", "data", ".", "y", ")", "\n", "is_tp", "=", "is_tp", ".", "repeat_interleave", "(", "\n", "im", ".", "mappings", ".", "pointers", "[", "1", ":", "]", "-", "im", ".", "mappings", ".", "pointers", "[", ":", "-", "1", "]", ",", "\n", "dim", "=", "0", ")", "\n", "is_tp", "=", "is_tp", ".", "repeat_interleave", "(", "\n", "im", ".", "mappings", ".", "values", "[", "1", "]", ".", "pointers", "[", "1", ":", "]", "\n", "-", "im", ".", "mappings", ".", "values", "[", "1", "]", ".", "pointers", "[", ":", "-", "1", "]", ",", "\n", "dim", "=", "0", ")", "\n", "is_tp", "=", "is_tp", ".", "unsqueeze", "(", "1", ")", "\n", "if", "overlay_point_error", ":", "\n", "                    ", "for", "v", "in", "im", ".", "visualizations", ":", "\n", "                        ", "v", "[", "idx", "]", "=", "v", "[", "idx", "]", "*", "is_tp", "+", "~", "is_tp", "*", "error_color", "\n", "", "", "im", ".", "is_tp_point", "=", "is_tp", "\n", "\n", "# Apply a mask to the 3D view-wise error", "\n", "", "if", "not", "no_3d_y", "and", "not", "no_2d_pred", ":", "\n", "                ", "y", "=", "data", ".", "y", "\n", "y", "=", "y", ".", "repeat_interleave", "(", "\n", "im", ".", "mappings", ".", "pointers", "[", "1", ":", "]", "-", "im", ".", "mappings", ".", "pointers", "[", ":", "-", "1", "]", ",", "\n", "dim", "=", "0", ")", "\n", "y", "=", "y", ".", "repeat_interleave", "(", "\n", "im", ".", "mappings", ".", "values", "[", "1", "]", ".", "pointers", "[", "1", ":", "]", "\n", "-", "im", ".", "mappings", ".", "values", "[", "1", "]", ".", "pointers", "[", ":", "-", "1", "]", ",", "\n", "dim", "=", "0", ")", "\n", "im_pred", "=", "im", ".", "pred", "[", "idx", "]", "\n", "im_pred", "=", "im_pred", ".", "argmax", "(", "dim", "=", "1", ")", "if", "len", "(", "im_pred", ".", "shape", ")", ">", "1", "else", "im_pred", "\n", "is_tp", "=", "(", "im_pred", "==", "y", ")", "\n", "is_tp", "=", "is_tp", ".", "unsqueeze", "(", "1", ")", "\n", "if", "overlay_view_error", ":", "\n", "                    ", "for", "v", "in", "im", ".", "visualizations", ":", "\n", "                        ", "v", "[", "idx", "]", "=", "v", "[", "idx", "]", "*", "is_tp", "+", "~", "is_tp", "*", "error_color", "\n", "", "", "im", ".", "is_tp_view", "=", "is_tp", "\n", "\n", "# Draw the images", "\n", "", "", "", "n_views", "=", "images", ".", "num_views", "\n", "n_front", "=", "max", "(", "len", "(", "front", ")", ",", "1", ")", "\n", "for", "i", ",", "image", "in", "enumerate", "(", "chain", "(", "\n", "*", "[", "viz", ".", "__iter__", "(", ")", "for", "im", "in", "images", "for", "viz", "in", "im", ".", "visualizations", "]", ")", ")", ":", "\n", "        ", "fig", ".", "add_trace", "(", "\n", "go", ".", "Image", "(", "\n", "z", "=", "image", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ",", "\n", "visible", "=", "i", "==", "0", ",", "# initialize to image 0 visible", "\n", "opacity", "=", "1.0", "*", "(", "i", "%", "n_front", "==", "0", ")", ",", "# initialize to front 0 visible", "\n", "hoverinfo", "=", "'none'", ",", ")", ")", "# disable hover info on images", "\n", "\n", "# Local helpers to compute the visibility of a view and opacity of", "\n", "# a foreground mode for interactive visualization. Since plotly", "\n", "# buttons cannot access the figure and button states, the trick here", "\n", "# is to apply a double filter using both the \"visibility\" and", "\n", "# \"opacity\" attributes of the image traces.", "\n", "", "def", "view_visibility", "(", "i_img", ")", ":", "\n", "        ", "visibilities", "=", "np", ".", "array", "(", "[", "d", ".", "visible", "for", "d", "in", "fig", ".", "data", "]", ",", "dtype", "=", "'bool'", ")", "\n", "if", "i_img", "<", "n_views", ":", "\n", "            ", "visibilities", "[", ":", "]", "=", "False", "\n", "visibilities", "[", "i_img", "*", "n_front", ":", "(", "i_img", "+", "1", ")", "*", "n_front", "]", "=", "True", "\n", "", "return", "[", "{", "\"visible\"", ":", "visibilities", ".", "tolist", "(", ")", "}", "]", "\n", "\n", "", "def", "front_opacity", "(", "i_front", ")", ":", "\n", "        ", "opacities", "=", "np", ".", "array", "(", "[", "d", ".", "opacity", "for", "d", "in", "fig", ".", "data", "]", ")", "\n", "if", "i_front", "<", "n_front", ":", "\n", "            ", "opacities", "[", ":", "]", "=", "0", "\n", "opacities", "[", "np", ".", "arange", "(", "n_views", ")", "*", "n_front", "+", "i_front", "]", "=", "1.0", "\n", "", "return", "[", "{", "\"opacity\"", ":", "opacities", ".", "tolist", "(", ")", "}", "]", "\n", "\n", "# Create the buttons that will serve for toggling trace visibility", "\n", "", "updatemenus", "=", "[", "]", "\n", "updatemenus", ".", "append", "(", "\n", "dict", "(", "\n", "buttons", "=", "[", "\n", "dict", "(", "label", "=", "f\"{i_img}\"", ",", "\n", "method", "=", "'update'", ",", "\n", "args", "=", "view_visibility", "(", "i_img", ")", ")", "\n", "for", "i_img", "in", "range", "(", "n_views", ")", "]", ",", "\n", "pad", "=", "{", "'r'", ":", "10", ",", "'t'", ":", "10", "}", ",", "\n", "showactive", "=", "True", ",", "\n", "type", "=", "'dropdown'", ",", "\n", "direction", "=", "'right'", ",", "\n", "xanchor", "=", "'left'", ",", "\n", "x", "=", "0.02", ",", "\n", "yanchor", "=", "'top'", ",", "\n", "y", "=", "1.12", ",", ")", ",", ")", "\n", "if", "n_front", ">", "1", ":", "\n", "        ", "updatemenus", ".", "append", "(", "\n", "dict", "(", "\n", "buttons", "=", "[", "\n", "dict", "(", "label", "=", "f\"{front_label[i_front]}\"", ",", "\n", "method", "=", "'update'", ",", "\n", "args", "=", "front_opacity", "(", "i_front", ")", ")", "\n", "for", "i_front", "in", "range", "(", "n_front", ")", "]", ",", "\n", "pad", "=", "{", "'r'", ":", "10", ",", "'t'", ":", "10", "}", ",", "\n", "showactive", "=", "True", ",", "\n", "type", "=", "'dropdown'", ",", "\n", "direction", "=", "'right'", ",", "\n", "xanchor", "=", "'left'", ",", "\n", "x", "=", "0.02", ",", "\n", "yanchor", "=", "'top'", ",", "\n", "y", "=", "1.02", ",", ")", ")", "\n", "\n", "", "fig", ".", "update_layout", "(", "updatemenus", "=", "updatemenus", ")", "\n", "\n", "output", "=", "{", "\n", "'figure'", ":", "fig", ",", "\n", "'n_views'", ":", "n_views", ",", "\n", "'n_front'", ":", "n_front", ",", "\n", "'images'", ":", "images", ",", "\n", "'data'", ":", "data", ",", "\n", "'front'", ":", "front", ",", "\n", "'back'", ":", "back", "}", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.visualization.multimodal_data.figure_html": [[880, 897], ["fig.write_html", "f.read.replace", "open", "f.read"], "function", ["None"], ["", "def", "figure_html", "(", "fig", ")", ":", "\n", "# Save plotly figure to temp HTML", "\n", "    ", "fig", ".", "write_html", "(", "\n", "'/tmp/fig.html'", ",", "\n", "config", "=", "{", "'displayModeBar'", ":", "False", "}", ",", "\n", "include_plotlyjs", "=", "'cdn'", ",", "\n", "full_html", "=", "False", ")", "\n", "\n", "# Read the HTML", "\n", "with", "open", "(", "\"/tmp/fig.html\"", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "fig_html", "=", "f", ".", "read", "(", ")", "\n", "\n", "# Center the figure div for cleaner display", "\n", "", "fig_html", "=", "fig_html", ".", "replace", "(", "'class=\"plotly-graph-div\" style=\"'", ",", "\n", "'class=\"plotly-graph-div\" style=\"margin:0 auto;'", ")", "\n", "\n", "return", "fig_html", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.visualization.multimodal_data.visualize_mm_data": [[899, 956], ["isinstance", "os.isdir", "multimodal_data.visualize_3d", "multimodal_data.visualize_2d", "os.join", "open", "f.write", "out_3d[].show", "multimodal_data.figure_html", "out_2d[].show", "multimodal_data.figure_html", "os.splitext"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.visualization.multimodal_data.visualize_3d", "home.repos.pwc.inspect_result.drprojects_deepviewagg.visualization.multimodal_data.visualize_2d", "home.repos.pwc.inspect_result.drprojects_deepviewagg.visualization.multimodal_data.figure_html", "home.repos.pwc.inspect_result.drprojects_deepviewagg.visualization.multimodal_data.figure_html"], ["", "def", "visualize_mm_data", "(", "\n", "mm_data", ",", "show_3d", "=", "True", ",", "show_2d", "=", "True", ",", "path", "=", "None", ",", "title", "=", "None", ",", "\n", "no_output", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Multimodal 3D+2D data interactive visualization.\n\n    :param mm_data: MMData object holding 3d points, images and mappings\n    :param show_3d: whether 3D points should be displayed\n    :param show_2d: whether 2D images should be displayed\n    :param path: path to save the visualization into a sharable HTML\n    :param title: figure title\n    :param no_output: set to True if you want to return the 3D and 2D\n      Plotly figure objects\n    :param kwargs:\n    :return:\n    \"\"\"", "\n", "assert", "isinstance", "(", "mm_data", ",", "MMData", ")", "\n", "\n", "# Sanitize title and path", "\n", "if", "title", "is", "None", ":", "\n", "        ", "title", "=", "\"Multimodal data\"", "\n", "", "if", "path", "is", "not", "None", ":", "\n", "        ", "if", "osp", ".", "isdir", "(", "path", ")", ":", "\n", "            ", "path", "=", "osp", ".", "join", "(", "path", ",", "f\"{title}.html\"", ")", "\n", "", "else", ":", "\n", "            ", "path", "=", "osp", ".", "splitext", "(", "path", ")", "[", "0", "]", "+", "'.html'", "\n", "", "fig_html", "=", "f'<h1 style=\"text-align: center;\">{title}</h1>'", "\n", "\n", "# Draw a figure for 3D data visualization", "\n", "", "if", "show_3d", ":", "\n", "        ", "out_3d", "=", "visualize_3d", "(", "mm_data", ",", "**", "kwargs", ")", "\n", "if", "no_output", ":", "\n", "            ", "if", "path", "is", "None", ":", "\n", "                ", "out_3d", "[", "'figure'", "]", ".", "show", "(", "config", "=", "{", "'displayModeBar'", ":", "False", "}", ")", "\n", "", "else", ":", "\n", "                ", "fig_html", "+=", "figure_html", "(", "out_3d", "[", "'figure'", "]", ")", "\n", "", "", "", "else", ":", "\n", "        ", "out_3d", "=", "None", "\n", "\n", "# Draw a figure for 2D data visualization", "\n", "", "if", "show_2d", ":", "\n", "        ", "out_2d", "=", "visualize_2d", "(", "mm_data", ",", "**", "kwargs", ")", "\n", "if", "no_output", ":", "\n", "            ", "if", "path", "is", "None", ":", "\n", "                ", "out_2d", "[", "'figure'", "]", ".", "show", "(", "config", "=", "{", "'displayModeBar'", ":", "False", "}", ")", "\n", "", "else", ":", "\n", "                ", "fig_html", "+=", "figure_html", "(", "out_2d", "[", "'figure'", "]", ")", "\n", "", "", "", "else", ":", "\n", "        ", "out_2d", "=", "None", "\n", "\n", "", "if", "path", "is", "not", "None", ":", "\n", "        ", "with", "open", "(", "path", ",", "\"w\"", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "fig_html", ")", "\n", "\n", "", "", "if", "not", "no_output", ":", "\n", "        ", "return", "out_3d", ",", "out_2d", "\n", "\n", "", "return", "\n", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.samplers.BalancedRandomSampler.__init__": [[9, 16], ["len", "numpy.unique", "numpy.argwhere().flatten", "numpy.argwhere"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["def", "__init__", "(", "self", ",", "labels", ",", "replacement", "=", "True", ")", ":", "\n", "\n", "        ", "self", ".", "num_samples", "=", "len", "(", "labels", ")", "\n", "\n", "self", ".", "idx_classes", ",", "self", ".", "counts", "=", "np", ".", "unique", "(", "labels", ",", "return_counts", "=", "True", ")", "\n", "self", ".", "indices", "=", "{", "\n", "idx", ":", "np", ".", "argwhere", "(", "labels", "==", "idx", ")", ".", "flatten", "(", ")", "for", "idx", "in", "self", ".", "idx_classes", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.samplers.BalancedRandomSampler.__iter__": [[18, 25], ["range", "iter", "numpy.random.choice", "int", "indices.append", "numpy.random.choice"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "indices", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "self", ".", "num_samples", ")", ":", "\n", "            ", "idx", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "idx_classes", ")", "\n", "indice", "=", "int", "(", "np", ".", "random", ".", "choice", "(", "self", ".", "indices", "[", "idx", "]", ")", ")", "\n", "indices", ".", "append", "(", "indice", ")", "\n", "", "return", "iter", "(", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.samplers.BalancedRandomSampler.__len__": [[26, 28], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.samplers.BalancedRandomSampler.__repr__": [[29, 31], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"{}(num_samples={})\"", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "num_samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.batch.SimpleBatch.__init__": [[15, 20], ["torch_geometric.data.Data.__init__"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["def", "__init__", "(", "self", ",", "batch", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "SimpleBatch", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "batch", "=", "batch", "\n", "self", ".", "__data_class__", "=", "Data", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.batch.SimpleBatch.from_data_list": [[21, 61], ["list", "SimpleBatch.SimpleBatch", "enumerate", "torch.arange", "SimpleBatch.contiguous", "set", "set.union", "len", "enumerate", "torch.is_tensor", "len", "batch[].append", "torch.stack", "torch.is_tensor", "isinstance", "isinstance", "torch.as_tensor", "ValueError"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append"], ["", "@", "staticmethod", "\n", "def", "from_data_list", "(", "data_list", ")", ":", "\n", "        ", "r\"\"\"Constructs a batch object from a python list holding\n        :class:`torch_geometric.data.Data` objects. \n        \"\"\"", "\n", "keys", "=", "[", "set", "(", "data", ".", "keys", ")", "for", "data", "in", "data_list", "]", "\n", "keys", "=", "list", "(", "set", ".", "union", "(", "*", "keys", ")", ")", "\n", "\n", "# Check if all dimensions matches and we can concatenate data", "\n", "if", "len", "(", "data_list", ")", ">", "0", ":", "\n", "            ", "for", "i", ",", "data", "in", "enumerate", "(", "data_list", "[", "1", ":", "]", ")", ":", "\n", "                ", "for", "key", "in", "keys", ":", "\n", "                    ", "if", "torch", ".", "is_tensor", "(", "data", "[", "key", "]", ")", ":", "\n", "                        ", "assert", "data_list", "[", "0", "]", "[", "key", "]", ".", "shape", "==", "data", "[", "key", "]", ".", "shape", "\n", "\n", "", "", "", "", "batch", "=", "SimpleBatch", "(", ")", "\n", "batch", ".", "__data_class__", "=", "data_list", "[", "0", "]", ".", "__class__", "\n", "\n", "for", "key", "in", "keys", ":", "\n", "            ", "batch", "[", "key", "]", "=", "[", "]", "\n", "\n", "", "for", "_", ",", "data", "in", "enumerate", "(", "data_list", ")", ":", "\n", "            ", "for", "key", "in", "data", ".", "keys", ":", "\n", "                ", "item", "=", "data", "[", "key", "]", "\n", "batch", "[", "key", "]", ".", "append", "(", "item", ")", "\n", "\n", "", "", "for", "key", "in", "batch", ".", "keys", ":", "\n", "            ", "item", "=", "batch", "[", "key", "]", "[", "0", "]", "\n", "if", "torch", ".", "is_tensor", "(", "item", ")", ":", "\n", "                ", "batch", "[", "key", "]", "=", "torch", ".", "stack", "(", "batch", "[", "key", "]", ")", "\n", "", "elif", "isinstance", "(", "item", ",", "int", ")", "or", "isinstance", "(", "item", ",", "float", ")", ":", "\n", "                ", "batch", "[", "key", "]", "=", "torch", ".", "as_tensor", "(", "batch", "[", "key", "]", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"Unsupported attribute type\"", ")", "\n", "\n", "# Set the `batch` attribute of the batch, so that we can recover", "\n", "# which point comes from which batch item", "\n", "", "", "batch", ".", "batch", "=", "torch", ".", "arange", "(", "len", "(", "data_list", ")", ")", "\n", "\n", "return", "batch", ".", "contiguous", "(", ")", "\n", "# return [batch.x.transpose(1, 2).contiguous(), batch.pos, batch.y.view(-1)]", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.batch.SimpleBatch.to_data_list": [[63, 70], ["batch.SimpleBatch.__data_class__", "range"], "methods", ["None"], ["", "def", "to_data_list", "(", "self", ")", ":", "\n", "        ", "r\"\"\"Restore the batch :class:`torch_geometric.data.Data` items\n        that make up the batch.\n        \"\"\"", "\n", "return", "[", "\n", "self", ".", "__data_class__", "(", "**", "{", "k", ":", "self", "[", "k", "]", "[", "i", "]", "for", "k", "in", "self", ".", "keys", "if", "k", "!=", "'batch'", "}", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_graphs", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.batch.SimpleBatch.num_graphs": [[71, 75], ["batch.SimpleBatch.batch[].item"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_graphs", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the number of graphs in the batch.\"\"\"", "\n", "return", "self", ".", "batch", "[", "-", "1", "]", ".", "item", "(", ")", "+", "1", "\n", "", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.multiscale_data.MultiScaleData.__init__": [[10, 20], ["torch_geometric.data.Data.__init__"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "x", "=", "None", ",", "\n", "y", "=", "None", ",", "\n", "pos", "=", "None", ",", "\n", "multiscale", ":", "Optional", "[", "List", "[", "Data", "]", "]", "=", "None", ",", "\n", "upsample", ":", "Optional", "[", "List", "[", "Data", "]", "]", "=", "None", ",", "\n", "**", "kwargs", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "x", "=", "x", ",", "y", "=", "y", ",", "pos", "=", "pos", ",", "multiscale", "=", "multiscale", ",", "upsample", "=", "upsample", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.multiscale_data.MultiScaleData.apply": [[21, 35], ["multiscale_data.MultiScaleData.", "range", "range", "torch.is_tensor", "multiscale_data.MultiScaleData.multiscale[].apply", "multiscale_data.MultiScaleData.upsample[].apply", "func"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.pair.MultiScalePair.apply", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.pair.MultiScalePair.apply"], ["", "def", "apply", "(", "self", ",", "func", ",", "*", "keys", ")", ":", "\n", "        ", "r\"\"\"Applies the function :obj:`func` to all tensor and Data attributes\n        :obj:`*keys`. If :obj:`*keys` is not given, :obj:`func` is applied to\n        all present attributes.\n        \"\"\"", "\n", "for", "key", ",", "item", "in", "self", "(", "*", "keys", ")", ":", "\n", "            ", "if", "torch", ".", "is_tensor", "(", "item", ")", ":", "\n", "                ", "self", "[", "key", "]", "=", "func", "(", "item", ")", "\n", "", "", "for", "scale", "in", "range", "(", "self", ".", "num_scales", ")", ":", "\n", "            ", "self", ".", "multiscale", "[", "scale", "]", "=", "self", ".", "multiscale", "[", "scale", "]", ".", "apply", "(", "func", ")", "\n", "\n", "", "for", "up", "in", "range", "(", "self", ".", "num_upsample", ")", ":", "\n", "            ", "self", ".", "upsample", "[", "up", "]", "=", "self", ".", "upsample", "[", "up", "]", ".", "apply", "(", "func", ")", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.multiscale_data.MultiScaleData.num_scales": [[36, 41], ["len", "hasattr"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "@", "property", "\n", "def", "num_scales", "(", "self", ")", ":", "\n", "        ", "\"\"\" Number of scales in the multiscale array\n        \"\"\"", "\n", "return", "len", "(", "self", ".", "multiscale", ")", "if", "hasattr", "(", "self", ",", "\"multiscale\"", ")", "and", "self", ".", "multiscale", "else", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.multiscale_data.MultiScaleData.num_upsample": [[42, 47], ["len", "hasattr"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "@", "property", "\n", "def", "num_upsample", "(", "self", ")", ":", "\n", "        ", "\"\"\" Number of upsample operations\n        \"\"\"", "\n", "return", "len", "(", "self", ".", "upsample", ")", "if", "hasattr", "(", "self", ",", "\"upsample\"", ")", "and", "self", ".", "upsample", "else", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.multiscale_data.MultiScaleData.from_data": [[48, 54], ["cls"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "from_data", "(", "cls", ",", "data", ")", ":", "\n", "        ", "ms_data", "=", "cls", "(", ")", "\n", "for", "k", ",", "item", "in", "data", ":", "\n", "            ", "ms_data", "[", "k", "]", "=", "item", "\n", "", "return", "ms_data", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.multiscale_data.MultiScaleBatch.from_data_list": [[57, 102], ["range", "range", "torch_geometric.data.Batch.from_data_list", "multiscale_data.MultiScaleData.from_data", "torch_geometric.is_debug_enabled", "isinstance", "multiscale.append", "upsample.append", "multiscale_data.MultiScaleData.from_data", "ms_scale.append", "multiscale_data.from_data_list_token", "upsample_scale.append", "multiscale_data.from_data_list_token"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.pair.DensePairBatch.from_data_list", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.pair.MultiScalePair.from_data", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.pair.MultiScalePair.from_data", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.multiscale_data.from_data_list_token", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.multiscale_data.from_data_list_token"], ["    ", "@", "staticmethod", "\n", "def", "from_data_list", "(", "data_list", ",", "follow_batch", "=", "[", "]", ")", ":", "\n", "        ", "r\"\"\"Constructs a batch object from a python list holding\n        :class:`torch_geometric.data.Data` objects.\n        The assignment vector :obj:`batch` is created on the fly.\n        Additionally, creates assignment batch vectors for each key in\n        :obj:`follow_batch`.\"\"\"", "\n", "for", "data", "in", "data_list", ":", "\n", "            ", "assert", "isinstance", "(", "data", ",", "MultiScaleData", ")", "\n", "", "num_scales", "=", "data_list", "[", "0", "]", ".", "num_scales", "\n", "for", "data_entry", "in", "data_list", ":", "\n", "            ", "assert", "data_entry", ".", "num_scales", "==", "num_scales", ",", "\"All data objects should contain the same number of scales\"", "\n", "", "num_upsample", "=", "data_list", "[", "0", "]", ".", "num_upsample", "\n", "for", "data_entry", "in", "data_list", ":", "\n", "            ", "assert", "data_entry", ".", "num_upsample", "==", "num_upsample", ",", "\"All data objects should contain the same number of scales\"", "\n", "\n", "# Build multiscale batches", "\n", "", "multiscale", "=", "[", "]", "\n", "for", "scale", "in", "range", "(", "num_scales", ")", ":", "\n", "            ", "ms_scale", "=", "[", "]", "\n", "for", "data_entry", "in", "data_list", ":", "\n", "                ", "ms_scale", ".", "append", "(", "data_entry", ".", "multiscale", "[", "scale", "]", ")", "\n", "", "multiscale", ".", "append", "(", "from_data_list_token", "(", "ms_scale", ")", ")", "\n", "\n", "# Build upsample batches", "\n", "", "upsample", "=", "[", "]", "\n", "for", "scale", "in", "range", "(", "num_upsample", ")", ":", "\n", "            ", "upsample_scale", "=", "[", "]", "\n", "for", "data_entry", "in", "data_list", ":", "\n", "                ", "upsample_scale", ".", "append", "(", "data_entry", ".", "upsample", "[", "scale", "]", ")", "\n", "", "upsample", ".", "append", "(", "from_data_list_token", "(", "upsample_scale", ")", ")", "\n", "\n", "# Create batch from non multiscale data", "\n", "", "for", "data_entry", "in", "data_list", ":", "\n", "            ", "del", "data_entry", ".", "multiscale", "\n", "del", "data_entry", ".", "upsample", "\n", "", "batch", "=", "Batch", ".", "from_data_list", "(", "data_list", ")", "\n", "batch", "=", "MultiScaleBatch", ".", "from_data", "(", "batch", ")", "\n", "batch", ".", "multiscale", "=", "multiscale", "\n", "batch", ".", "upsample", "=", "upsample", "\n", "\n", "if", "torch_geometric", ".", "is_debug_enabled", "(", ")", ":", "\n", "            ", "batch", ".", "debug", "(", ")", "\n", "\n", "", "return", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.multiscale_data.from_data_list_token": [[104, 166], ["list", "torch_geometric.data.Batch", "enumerate", "torch_geometric.is_debug_enabled", "torch_geometric.data.Batch.contiguous", "set", "set.union", "torch.is_tensor", "torch_geometric.data.Batch.debug", "torch.is_tensor", "torch_geometric.data.Batch.__slices__[].append", "data.__inc__", "batch[].append", "torch.full", "torch_geometric.data.Batch.batch.append", "torch.cat", "torch.is_tensor", "torch.full.size", "torch.full", "batch[].append", "isinstance", "isinstance", "torch.tensor", "ValueError", "data.__cat_dim__", "data_list[].__cat_dim__", "type"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageMapping.debug", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append"], ["", "", "def", "from_data_list_token", "(", "data_list", ",", "follow_batch", "=", "[", "]", ")", ":", "\n", "    ", "\"\"\" This is pretty a copy paste of the from data list of pytorch geometric\n    batch object with the difference that indexes that are negative are not incremented\n    \"\"\"", "\n", "\n", "keys", "=", "[", "set", "(", "data", ".", "keys", ")", "for", "data", "in", "data_list", "]", "\n", "keys", "=", "list", "(", "set", ".", "union", "(", "*", "keys", ")", ")", "\n", "assert", "\"batch\"", "not", "in", "keys", "\n", "\n", "batch", "=", "Batch", "(", ")", "\n", "batch", ".", "__data_class__", "=", "data_list", "[", "0", "]", ".", "__class__", "\n", "batch", ".", "__slices__", "=", "{", "key", ":", "[", "0", "]", "for", "key", "in", "keys", "}", "\n", "\n", "for", "key", "in", "keys", ":", "\n", "        ", "batch", "[", "key", "]", "=", "[", "]", "\n", "\n", "", "for", "key", "in", "follow_batch", ":", "\n", "        ", "batch", "[", "\"{}_batch\"", ".", "format", "(", "key", ")", "]", "=", "[", "]", "\n", "\n", "", "cumsum", "=", "{", "key", ":", "0", "for", "key", "in", "keys", "}", "\n", "batch", ".", "batch", "=", "[", "]", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "data_list", ")", ":", "\n", "        ", "for", "key", "in", "data", ".", "keys", ":", "\n", "            ", "item", "=", "data", "[", "key", "]", "\n", "if", "torch", ".", "is_tensor", "(", "item", ")", "and", "item", ".", "dtype", "!=", "torch", ".", "bool", "and", "cumsum", "[", "key", "]", ">", "0", ":", "\n", "                ", "mask", "=", "item", ">=", "0", "\n", "item", "[", "mask", "]", "=", "item", "[", "mask", "]", "+", "cumsum", "[", "key", "]", "\n", "", "if", "torch", ".", "is_tensor", "(", "item", ")", ":", "\n", "                ", "size", "=", "item", ".", "size", "(", "data", ".", "__cat_dim__", "(", "key", ",", "data", "[", "key", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "size", "=", "1", "\n", "", "batch", ".", "__slices__", "[", "key", "]", ".", "append", "(", "size", "+", "batch", ".", "__slices__", "[", "key", "]", "[", "-", "1", "]", ")", "\n", "cumsum", "[", "key", "]", "+=", "data", ".", "__inc__", "(", "key", ",", "item", ")", "\n", "batch", "[", "key", "]", ".", "append", "(", "item", ")", "\n", "\n", "if", "key", "in", "follow_batch", ":", "\n", "                ", "item", "=", "torch", ".", "full", "(", "(", "size", ",", ")", ",", "i", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "batch", "[", "\"{}_batch\"", ".", "format", "(", "key", ")", "]", ".", "append", "(", "item", ")", "\n", "\n", "", "", "num_nodes", "=", "data", ".", "num_nodes", "\n", "if", "num_nodes", "is", "not", "None", ":", "\n", "            ", "item", "=", "torch", ".", "full", "(", "(", "num_nodes", ",", ")", ",", "i", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "batch", ".", "batch", ".", "append", "(", "item", ")", "\n", "\n", "", "", "if", "num_nodes", "is", "None", ":", "\n", "        ", "batch", ".", "batch", "=", "None", "\n", "\n", "", "for", "key", "in", "batch", ".", "keys", ":", "\n", "        ", "item", "=", "batch", "[", "key", "]", "[", "0", "]", "\n", "if", "torch", ".", "is_tensor", "(", "item", ")", ":", "\n", "            ", "batch", "[", "key", "]", "=", "torch", ".", "cat", "(", "\n", "batch", "[", "key", "]", ",", "dim", "=", "data_list", "[", "0", "]", ".", "__cat_dim__", "(", "key", ",", "item", ")", ")", "\n", "", "elif", "isinstance", "(", "item", ",", "int", ")", "or", "isinstance", "(", "item", ",", "float", ")", ":", "\n", "            ", "batch", "[", "key", "]", "=", "torch", ".", "tensor", "(", "batch", "[", "key", "]", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Unsupported attribute type {} : {}\"", ".", "format", "(", "type", "(", "item", ")", ",", "item", ")", ")", "\n", "\n", "", "", "if", "torch_geometric", ".", "is_debug_enabled", "(", ")", ":", "\n", "        ", "batch", ".", "debug", "(", ")", "\n", "\n", "", "return", "batch", ".", "contiguous", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.base_dataset.BaseDataset.__init__": [[66, 96], ["dataset_opt.get", "base_dataset.BaseDataset.set_transform", "base_dataset.BaseDataset.set_filter", "os.path.join", "base_dataset.BaseDataset.__class__.__name__.lower().replace", "os.path.join", "base_dataset.BaseDataset.__class__.__name__.lower"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.base_dataset.BaseDataset.set_transform", "home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.base_dataset.BaseDataset.set_filter"], ["    ", "def", "__init__", "(", "self", ",", "dataset_opt", ")", ":", "\n", "        ", "self", ".", "dataset_opt", "=", "dataset_opt", "\n", "\n", "# Default dataset path", "\n", "dataset_name", "=", "dataset_opt", ".", "get", "(", "\"dataset_name\"", ",", "None", ")", "\n", "if", "dataset_name", ":", "\n", "            ", "self", ".", "_data_path", "=", "os", ".", "path", ".", "join", "(", "dataset_opt", ".", "dataroot", ",", "dataset_name", ")", "\n", "", "else", ":", "\n", "            ", "class_name", "=", "self", ".", "__class__", ".", "__name__", ".", "lower", "(", ")", ".", "replace", "(", "\"dataset\"", ",", "\"\"", ")", "\n", "self", ".", "_data_path", "=", "os", ".", "path", ".", "join", "(", "dataset_opt", ".", "dataroot", ",", "class_name", ")", "\n", "", "self", ".", "_batch_size", "=", "None", "\n", "self", ".", "strategies", "=", "{", "}", "\n", "self", ".", "_contains_dataset_name", "=", "False", "\n", "\n", "self", ".", "train_sampler", "=", "None", "\n", "self", ".", "test_sampler", "=", "None", "\n", "self", ".", "val_sampler", "=", "None", "\n", "\n", "self", ".", "_train_dataset", "=", "None", "\n", "self", ".", "_test_dataset", "=", "None", "\n", "self", ".", "_val_dataset", "=", "None", "\n", "\n", "self", ".", "train_pre_batch_collate_transform", "=", "None", "\n", "self", ".", "val_pre_batch_collate_transform", "=", "None", "\n", "self", ".", "test_pre_batch_collate_transform", "=", "None", "\n", "\n", "BaseDataset", ".", "set_transform", "(", "self", ",", "dataset_opt", ")", "\n", "self", ".", "set_filter", "(", "dataset_opt", ")", "\n", "\n", "self", ".", "used_properties", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.base_dataset.BaseDataset.remove_transform": [[97, 122], ["isinstance", "isinstance", "len", "torch_geometric.transforms.Compose", "isinstance", "isinstance", "torch_geometric.transforms.Compose.append", "tuple"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append"], ["", "@", "staticmethod", "\n", "def", "remove_transform", "(", "transform_in", ",", "list_transform_class", ")", ":", "\n", "        ", "\"\"\" Remove a transform if within list_transform_class\n\n        Arguments:\n            transform_in {[type]} -- [Compose | List of transform]\n            list_transform_class {[type]} -- [List of transform class\n                to be removed]\n\n        Returns:\n            [type] -- [description]\n        \"\"\"", "\n", "if", "isinstance", "(", "transform_in", ",", "Compose", ")", "or", "isinstance", "(", "transform_in", ",", "list", ")", ":", "\n", "            ", "if", "len", "(", "list_transform_class", ")", ">", "0", ":", "\n", "                ", "transform_out", "=", "[", "]", "\n", "transforms", "=", "transform_in", ".", "transforms", "if", "isinstance", "(", "transform_in", ",", "Compose", ")", "else", "transform_in", "\n", "for", "t", "in", "transforms", ":", "\n", "                    ", "if", "not", "isinstance", "(", "t", ",", "tuple", "(", "list_transform_class", ")", ")", ":", "\n", "                        ", "transform_out", ".", "append", "(", "t", ")", "\n", "", "", "transform_out", "=", "Compose", "(", "transform_out", ")", "\n", "", "", "else", ":", "\n", "            ", "transform_out", "=", "transform_in", "\n", "", "return", "transform_out", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.base_dataset.BaseDataset.set_transform": [[123, 151], ["dataset_opt.keys", "base_dataset.explode_transform", "base_dataset.explode_transform", "torch_geometric.transforms.Compose", "key_name.replace", "setattr", "len", "torch_points3d.core.data_transform.instantiate_transforms", "getattr", "log.exception", "getattr"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.mock.MockDatasetConfig.keys", "home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.base_dataset.explode_transform", "home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.base_dataset.explode_transform", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.__init__.instantiate_transforms"], ["", "@", "staticmethod", "\n", "def", "set_transform", "(", "obj", ",", "dataset_opt", ")", ":", "\n", "        ", "\"\"\"This function create and set the transform to the obj as\n        attributes.\n        \"\"\"", "\n", "obj", ".", "pre_transform", "=", "None", "\n", "obj", ".", "test_transform", "=", "None", "\n", "obj", ".", "train_transform", "=", "None", "\n", "obj", ".", "val_transform", "=", "None", "\n", "obj", ".", "inference_transform", "=", "None", "\n", "\n", "for", "key_name", "in", "dataset_opt", ".", "keys", "(", ")", ":", "\n", "            ", "if", "\"transform\"", "in", "key_name", ":", "\n", "                ", "new_name", "=", "key_name", ".", "replace", "(", "\"transforms\"", ",", "\"transform\"", ")", "\n", "try", ":", "\n", "                    ", "transform", "=", "instantiate_transforms", "(", "\n", "getattr", "(", "dataset_opt", ",", "key_name", ")", ")", "\n", "", "except", "Exception", ":", "\n", "                    ", "log", ".", "exception", "(", "\"Error trying to create {}, {}\"", ".", "format", "(", "\n", "new_name", ",", "getattr", "(", "dataset_opt", ",", "key_name", ")", ")", ")", "\n", "continue", "\n", "", "setattr", "(", "obj", ",", "new_name", ",", "transform", ")", "\n", "\n", "", "", "inference_transform", "=", "explode_transform", "(", "obj", ".", "pre_transform", ")", "\n", "inference_transform", "+=", "explode_transform", "(", "obj", ".", "test_transform", ")", "\n", "obj", ".", "inference_transform", "=", "Compose", "(", "inference_transform", ")", "if", "len", "(", "inference_transform", ")", ">", "0", "else", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.base_dataset.BaseDataset.set_filter": [[152, 167], ["dataset_opt.keys", "key_name.replace", "setattr", "torch_points3d.core.data_transform.instantiate_filters", "getattr", "log.exception", "getattr"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.mock.MockDatasetConfig.keys", "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.__init__.instantiate_filters"], ["", "def", "set_filter", "(", "self", ",", "dataset_opt", ")", ":", "\n", "        ", "\"\"\"This function create and set the pre_filter to the obj as\n        attributes.\n        \"\"\"", "\n", "self", ".", "pre_filter", "=", "None", "\n", "for", "key_name", "in", "dataset_opt", ".", "keys", "(", ")", ":", "\n", "            ", "if", "\"filter\"", "in", "key_name", ":", "\n", "                ", "new_name", "=", "key_name", ".", "replace", "(", "\"filters\"", ",", "\"filter\"", ")", "\n", "try", ":", "\n", "                    ", "filt", "=", "instantiate_filters", "(", "getattr", "(", "dataset_opt", ",", "key_name", ")", ")", "\n", "", "except", "Exception", ":", "\n", "                    ", "log", ".", "exception", "(", "\"Error trying to create {}, {}\"", ".", "format", "(", "\n", "new_name", ",", "getattr", "(", "dataset_opt", ",", "key_name", ")", ")", ")", "\n", "continue", "\n", "", "setattr", "(", "self", ",", "new_name", ",", "filt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.base_dataset.BaseDataset._collate_fn": [[168, 173], ["collate_fn", "pre_collate_transform"], "methods", ["None"], ["", "", "", "@", "staticmethod", "\n", "def", "_collate_fn", "(", "batch", ",", "collate_fn", "=", "None", ",", "pre_collate_transform", "=", "None", ")", ":", "\n", "        ", "if", "pre_collate_transform", ":", "\n", "            ", "batch", "=", "pre_collate_transform", "(", "batch", ")", "\n", "", "return", "collate_fn", "(", "batch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.base_dataset.BaseDataset._get_collate_function": [[174, 193], ["torch_points3d.utils.config.ConvolutionFormatFactory.check_is_dense_format", "functools.partial", "conv_type.lower", "torch_points3d.utils.enums.ConvolutionFormat.PARTIAL_DENSE.value.lower", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.config.ConvolutionFormatFactory.check_is_dense_format"], ["", "@", "staticmethod", "\n", "def", "_get_collate_function", "(", "conv_type", ",", "is_multiscale", ",", "\n", "pre_collate_transform", "=", "None", ")", ":", "\n", "        ", "is_dense", "=", "ConvolutionFormatFactory", ".", "check_is_dense_format", "(", "conv_type", ")", "\n", "if", "is_multiscale", ":", "\n", "            ", "if", "conv_type", ".", "lower", "(", ")", "==", "ConvolutionFormat", ".", "PARTIAL_DENSE", ".", "value", ".", "lower", "(", ")", ":", "\n", "                ", "fn", "=", "MultiScaleBatch", ".", "from_data_list", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", "\n", "\"MultiscaleTransform is activated and supported only for \"", "\n", "\"partial_dense format\"", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "is_dense", ":", "\n", "                ", "fn", "=", "SimpleBatch", ".", "from_data_list", "\n", "", "else", ":", "\n", "                ", "fn", "=", "torch_geometric", ".", "data", ".", "batch", ".", "Batch", ".", "from_data_list", "\n", "", "", "return", "partial", "(", "BaseDataset", ".", "_collate_fn", ",", "collate_fn", "=", "fn", ",", "\n", "pre_collate_transform", "=", "pre_collate_transform", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.base_dataset.BaseDataset.get_num_samples": [[194, 201], ["torch_points3d.utils.config.ConvolutionFormatFactory.check_is_dense_format", "batch.batch.max"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.config.ConvolutionFormatFactory.check_is_dense_format"], ["", "@", "staticmethod", "\n", "def", "get_num_samples", "(", "batch", ",", "conv_type", ")", ":", "\n", "        ", "is_dense", "=", "ConvolutionFormatFactory", ".", "check_is_dense_format", "(", "conv_type", ")", "\n", "if", "is_dense", ":", "\n", "            ", "return", "batch", ".", "pos", ".", "shape", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "return", "batch", ".", "batch", ".", "max", "(", ")", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.base_dataset.BaseDataset.get_sample": [[202, 210], ["hasattr", "torch_points3d.utils.config.ConvolutionFormatFactory.check_is_dense_format"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.config.ConvolutionFormatFactory.check_is_dense_format"], ["", "", "@", "staticmethod", "\n", "def", "get_sample", "(", "batch", ",", "key", ",", "index", ",", "conv_type", ")", ":", "\n", "        ", "assert", "hasattr", "(", "batch", ",", "key", ")", "\n", "is_dense", "=", "ConvolutionFormatFactory", ".", "check_is_dense_format", "(", "conv_type", ")", "\n", "if", "is_dense", ":", "\n", "            ", "return", "batch", "[", "key", "]", "[", "index", "]", "\n", "", "else", ":", "\n", "            ", "return", "batch", "[", "key", "]", "[", "batch", ".", "batch", "==", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.base_dataset.BaseDataset.create_dataloaders": [[211, 269], ["log.info", "base_dataset.BaseDataset._dataloader", "base_dataset.BaseDataset._dataloader", "base_dataset.BaseDataset.set_strategies", "base_dataset.BaseDataset._dataloader"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.base_dataset.BaseDataset._dataloader", "home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.base_dataset.BaseDataset._dataloader", "home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.base_dataset.BaseDataset.set_strategies", "home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.base_dataset.BaseDataset._dataloader"], ["", "", "def", "create_dataloaders", "(", "\n", "self", ",", "\n", "model", ":", "model_interface", ".", "DatasetInterface", ",", "\n", "batch_size", ":", "int", ",", "\n", "shuffle", ":", "bool", ",", "\n", "num_workers", ":", "int", ",", "\n", "precompute_multi_scale", ":", "bool", ",", "\n", ")", ":", "\n", "        ", "\"\"\" Creates the data loaders. Must be called in order to\n        complete the setup of the Dataset.\n        \"\"\"", "\n", "conv_type", "=", "model", ".", "conv_type", "\n", "self", ".", "_batch_size", "=", "batch_size", "\n", "\n", "if", "self", ".", "train_sampler", ":", "\n", "            ", "log", ".", "info", "(", "self", ".", "train_sampler", ")", "\n", "\n", "", "if", "self", ".", "train_dataset", ":", "\n", "            ", "self", ".", "_train_loader", "=", "self", ".", "_dataloader", "(", "\n", "self", ".", "train_dataset", ",", "\n", "self", ".", "train_pre_batch_collate_transform", ",", "\n", "conv_type", ",", "\n", "precompute_multi_scale", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "shuffle", "and", "not", "self", ".", "train_sampler", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "sampler", "=", "self", ".", "train_sampler", ",", "\n", ")", "\n", "\n", "", "if", "self", ".", "test_dataset", ":", "\n", "            ", "self", ".", "_test_loaders", "=", "[", "\n", "self", ".", "_dataloader", "(", "\n", "dataset", ",", "\n", "self", ".", "test_pre_batch_collate_transform", ",", "\n", "conv_type", ",", "\n", "precompute_multi_scale", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "sampler", "=", "self", ".", "test_sampler", ",", "\n", ")", "\n", "for", "dataset", "in", "self", ".", "test_dataset", "\n", "]", "\n", "\n", "", "if", "self", ".", "val_dataset", ":", "\n", "            ", "self", ".", "_val_loader", "=", "self", ".", "_dataloader", "(", "\n", "self", ".", "val_dataset", ",", "\n", "self", ".", "val_pre_batch_collate_transform", ",", "\n", "conv_type", ",", "\n", "precompute_multi_scale", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "sampler", "=", "self", ".", "val_sampler", ",", "\n", ")", "\n", "\n", "", "if", "precompute_multi_scale", ":", "\n", "            ", "self", ".", "set_strategies", "(", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.base_dataset.BaseDataset._dataloader": [[270, 289], ["base_dataset.BaseDataset._get_collate_function", "kwargs.get", "functools.partial", "functools.partial."], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base_siamese_dataset.BaseSiameseDataset._get_collate_function", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get"], ["", "", "def", "_dataloader", "(", "self", ",", "dataset", ",", "pre_batch_collate_transform", ",", "conv_type", ",", "\n", "is_multiscale", ",", "**", "kwargs", ")", ":", "\n", "        ", "batch_collate_function", "=", "self", ".", "_get_collate_function", "(", "\n", "conv_type", ",", "\n", "is_multiscale", ",", "\n", "pre_collate_transform", "=", "pre_batch_collate_transform", ")", "\n", "num_workers", "=", "kwargs", ".", "get", "(", "\"num_workers\"", ",", "0", ")", "\n", "# dataloader = partial(", "\n", "#     torch.utils.data.DataLoader,", "\n", "#     collate_fn=batch_collate_function,", "\n", "#     num_workers=num_workers,", "\n", "#     worker_init_fn=np.random.seed)", "\n", "persistent_workers", "=", "(", "num_workers", ">", "0", ")", "\n", "dataloader", "=", "partial", "(", "\n", "torch", ".", "utils", ".", "data", ".", "DataLoader", ",", "\n", "collate_fn", "=", "batch_collate_function", ",", "\n", "worker_init_fn", "=", "np", ".", "random", ".", "seed", ",", "\n", "persistent_workers", "=", "persistent_workers", ")", "\n", "return", "dataloader", "(", "dataset", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.base_dataset.BaseDataset.has_train_loader": [[290, 293], ["hasattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "has_train_loader", "(", "self", ")", ":", "\n", "        ", "return", "hasattr", "(", "self", ",", "\"_train_loader\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.base_dataset.BaseDataset.has_val_loader": [[294, 297], ["hasattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "has_val_loader", "(", "self", ")", ":", "\n", "        ", "return", "hasattr", "(", "self", ",", "\"_val_loader\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.base_dataset.BaseDataset.has_test_loaders": [[298, 301], ["hasattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "has_test_loaders", "(", "self", ")", ":", "\n", "        ", "return", "hasattr", "(", "self", ",", "\"_test_loaders\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.base_dataset.BaseDataset.train_dataset": [[306, 311], ["hasattr", "setattr"], "methods", ["None"], ["", "@", "train_dataset", ".", "setter", "\n", "def", "train_dataset", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_train_dataset", "=", "value", "\n", "if", "not", "hasattr", "(", "self", ".", "_train_dataset", ",", "\"name\"", ")", ":", "\n", "            ", "setattr", "(", "self", ".", "_train_dataset", ",", "\"name\"", ",", "\"train\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.base_dataset.BaseDataset.val_dataset": [[316, 321], ["hasattr", "setattr"], "methods", ["None"], ["", "@", "val_dataset", ".", "setter", "\n", "def", "val_dataset", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_val_dataset", "=", "value", "\n", "if", "not", "hasattr", "(", "self", ".", "_val_dataset", ",", "\"name\"", ")", ":", "\n", "            ", "setattr", "(", "self", ".", "_val_dataset", ",", "\"name\"", ",", "\"val\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.base_dataset.BaseDataset.test_dataset": [[326, 347], ["isinstance", "enumerate", "len", "len", "ValueError", "hasattr", "set", "setattr", "setattr"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "@", "test_dataset", ".", "setter", "\n", "def", "test_dataset", "(", "self", ",", "value", ")", ":", "\n", "        ", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "            ", "self", ".", "_test_dataset", "=", "value", "\n", "", "else", ":", "\n", "            ", "self", ".", "_test_dataset", "=", "[", "value", "]", "\n", "\n", "", "for", "i", ",", "dataset", "in", "enumerate", "(", "self", ".", "_test_dataset", ")", ":", "\n", "            ", "if", "not", "hasattr", "(", "dataset", ",", "\"name\"", ")", ":", "\n", "                ", "if", "self", ".", "num_test_datasets", ">", "1", ":", "\n", "                    ", "setattr", "(", "dataset", ",", "\"name\"", ",", "\"test_%i\"", "%", "i", ")", "\n", "", "else", ":", "\n", "                    ", "setattr", "(", "dataset", ",", "\"name\"", ",", "\"test\"", ")", "\n", "", "", "else", ":", "\n", "                ", "self", ".", "_contains_dataset_name", "=", "True", "\n", "\n", "# Check for uniqueness", "\n", "", "", "all_names", "=", "[", "d", ".", "name", "for", "d", "in", "self", ".", "test_dataset", "]", "\n", "if", "len", "(", "set", "(", "all_names", ")", ")", "!=", "len", "(", "all_names", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "f\"Datasets need to have unique names. Current names are \"", "\n", "f\"{all_names}\"", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.base_dataset.BaseDataset.train_dataloader": [[349, 352], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "train_dataloader", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_train_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.base_dataset.BaseDataset.val_dataloader": [[353, 356], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "val_dataloader", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_val_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.base_dataset.BaseDataset.test_dataloaders": [[357, 363], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "test_dataloaders", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "has_test_loaders", ":", "\n", "            ", "return", "self", ".", "_test_loaders", "\n", "", "else", ":", "\n", "            ", "return", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.base_dataset.BaseDataset._loaders": [[364, 374], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "_loaders", "(", "self", ")", ":", "\n", "        ", "loaders", "=", "[", "]", "\n", "if", "self", ".", "has_train_loader", ":", "\n", "            ", "loaders", "+=", "[", "self", ".", "train_dataloader", "]", "\n", "", "if", "self", ".", "has_val_loader", ":", "\n", "            ", "loaders", "+=", "[", "self", ".", "val_dataloader", "]", "\n", "", "if", "self", ".", "has_test_loaders", ":", "\n", "            ", "loaders", "+=", "self", ".", "test_dataloaders", "\n", "", "return", "loaders", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.base_dataset.BaseDataset.num_test_datasets": [[375, 378], ["len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "@", "property", "\n", "def", "num_test_datasets", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_test_dataset", ")", "if", "self", ".", "_test_dataset", "else", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.base_dataset.BaseDataset._test_datatset_names": [[379, 385], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "_test_datatset_names", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "test_dataset", ":", "\n", "            ", "return", "[", "d", ".", "name", "for", "d", "in", "self", ".", "test_dataset", "]", "\n", "", "else", ":", "\n", "            ", "return", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.base_dataset.BaseDataset.available_stage_names": [[386, 392], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "available_stage_names", "(", "self", ")", ":", "\n", "        ", "out", "=", "self", ".", "_test_datatset_names", "\n", "if", "self", ".", "has_val_loader", ":", "\n", "            ", "out", "+=", "[", "self", ".", "_val_dataset", ".", "name", "]", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.base_dataset.BaseDataset.available_dataset_names": [[393, 396], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "available_dataset_names", "(", "self", ")", ":", "\n", "        ", "return", "[", "\"train\"", "]", "+", "self", ".", "available_stage_names", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.base_dataset.BaseDataset.get_raw_data": [[397, 405], ["base_dataset.BaseDataset.get_dataset", "hasattr", "base_dataset.BaseDataset.get_raw_data", "Exception"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.base_dataset.BaseDataset.get_dataset", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.scannet.Scannet.get_raw_data"], ["", "def", "get_raw_data", "(", "self", ",", "stage", ",", "idx", ",", "**", "kwargs", ")", ":", "\n", "        ", "assert", "stage", "in", "self", ".", "available_dataset_names", "\n", "dataset", "=", "self", ".", "get_dataset", "(", "stage", ")", "\n", "if", "hasattr", "(", "dataset", ",", "\"get_raw_data\"", ")", ":", "\n", "            ", "return", "dataset", ".", "get_raw_data", "(", "idx", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\n", "f\"Dataset {dataset} does not have a get_raw_data function \"", "\n", "f\"implemented\"", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.base_dataset.BaseDataset.has_labels": [[407, 424], ["base_dataset.BaseDataset.get_dataset", "hasattr", "hasattr"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.base_dataset.BaseDataset.get_dataset"], ["", "", "def", "has_labels", "(", "self", ",", "stage", ":", "str", ")", "->", "bool", ":", "\n", "        ", "\"\"\" Tests if a given dataset has labels or not\n\n        Parameters\n        ----------\n        stage : str\n            name of the dataset to test\n        \"\"\"", "\n", "assert", "stage", "in", "self", ".", "available_dataset_names", "\n", "dataset", "=", "self", ".", "get_dataset", "(", "stage", ")", "\n", "if", "hasattr", "(", "dataset", ",", "\"has_labels\"", ")", ":", "\n", "            ", "return", "dataset", ".", "has_labels", "\n", "\n", "", "sample", "=", "dataset", "[", "0", "]", "\n", "if", "hasattr", "(", "sample", ",", "\"y\"", ")", ":", "\n", "            ", "return", "sample", ".", "y", "is", "not", "None", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.base_dataset.BaseDataset.is_hierarchical": [[425, 431], ["None"], "methods", ["None"], ["", "@", "property", "# type: ignore", "\n", "@", "save_used_properties", "\n", "def", "is_hierarchical", "(", "self", ")", ":", "\n", "        ", "\"\"\" Used by the metric trackers to log hierarchical metrics\n        \"\"\"", "\n", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.base_dataset.BaseDataset.class_to_segments": [[432, 443], ["None"], "methods", ["None"], ["", "@", "property", "# type: ignore", "\n", "@", "save_used_properties", "\n", "def", "class_to_segments", "(", "self", ")", ":", "\n", "        ", "\"\"\" Use this property to return the hierarchical map between\n        classes and segment ids, example:\n        {\n            'Airplaine': [0,1,2],\n            'Boat': [3,4,5]\n        }\n        \"\"\"", "\n", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.base_dataset.BaseDataset.num_classes": [[444, 448], ["None"], "methods", ["None"], ["", "@", "property", "# type: ignore", "\n", "@", "save_used_properties", "\n", "def", "num_classes", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "train_dataset", ".", "num_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.base_dataset.BaseDataset.weight_classes": [[449, 452], ["getattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "weight_classes", "(", "self", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ".", "train_dataset", ",", "\"weight_classes\"", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.base_dataset.BaseDataset.feature_dimension": [[453, 467], ["isinstance", "NotImplementedError"], "methods", ["None"], ["", "@", "property", "# type: ignore", "\n", "@", "save_used_properties", "\n", "def", "feature_dimension", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "train_dataset", ":", "\n", "            ", "return", "self", ".", "train_dataset", ".", "num_features", "\n", "", "elif", "self", ".", "test_dataset", "is", "not", "None", ":", "\n", "            ", "if", "isinstance", "(", "self", ".", "test_dataset", ",", "list", ")", ":", "\n", "                ", "return", "self", ".", "test_dataset", "[", "0", "]", ".", "num_features", "\n", "", "else", ":", "\n", "                ", "return", "self", ".", "test_dataset", ".", "num_features", "\n", "", "", "elif", "self", ".", "val_dataset", "is", "not", "None", ":", "\n", "            ", "return", "self", ".", "val_dataset", ".", "num_features", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.base_dataset.BaseDataset.batch_size": [[468, 471], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "batch_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.base_dataset.BaseDataset.num_batches": [[472, 483], ["len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "@", "property", "\n", "def", "num_batches", "(", "self", ")", ":", "\n", "        ", "out", "=", "{", "\n", "self", ".", "train_dataset", ".", "name", ":", "len", "(", "self", ".", "_train_loader", ")", ",", "\n", "\"val\"", ":", "len", "(", "self", ".", "_val_loader", ")", "if", "self", ".", "has_val_loader", "else", "0", ",", "\n", "}", "\n", "if", "self", ".", "test_dataset", ":", "\n", "            ", "for", "loader", "in", "self", ".", "_test_loaders", ":", "\n", "                ", "stage_name", "=", "loader", ".", "dataset", ".", "name", "\n", "out", "[", "stage_name", "]", "=", "len", "(", "loader", ")", "\n", "", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.base_dataset.BaseDataset.get_dataset": [[484, 499], ["ValueError"], "methods", ["None"], ["", "def", "get_dataset", "(", "self", ",", "name", ")", ":", "\n", "        ", "\"\"\" Get a dataset by name. Raises an exception if no dataset\n        was found.\n\n        Parameters\n        ----------\n        name : str\n        \"\"\"", "\n", "all_datasets", "=", "[", "self", ".", "train_dataset", ",", "self", ".", "val_dataset", "]", "\n", "if", "self", ".", "test_dataset", ":", "\n", "            ", "all_datasets", "+=", "self", ".", "test_dataset", "\n", "", "for", "dataset", "in", "all_datasets", ":", "\n", "            ", "if", "dataset", "is", "not", "None", "and", "dataset", ".", "name", "==", "name", ":", "\n", "                ", "return", "dataset", "\n", "", "", "raise", "ValueError", "(", "\"No dataset with name %s was found.\"", "%", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.base_dataset.BaseDataset._set_composed_multiscale_transform": [[500, 512], ["getattr", "setattr", "isinstance", "setattr", "torch_geometric.transforms.Compose"], "methods", ["None"], ["", "def", "_set_composed_multiscale_transform", "(", "self", ",", "attr", ",", "transform", ")", ":", "\n", "        ", "current_transform", "=", "getattr", "(", "attr", ".", "dataset", ",", "\"transform\"", ",", "None", ")", "\n", "if", "current_transform", "is", "None", ":", "\n", "            ", "setattr", "(", "attr", ".", "dataset", ",", "\"transform\"", ",", "transform", ")", "\n", "", "else", ":", "\n", "            ", "if", "(", "isinstance", "(", "current_transform", ",", "Compose", ")", "\n", "and", "transform", "not", "in", "current_transform", ".", "transforms", ")", ":", "\n", "# The transform contains several transformations", "\n", "                ", "current_transform", ".", "transforms", "+=", "[", "transform", "]", "\n", "", "elif", "current_transform", "!=", "transform", ":", "\n", "                ", "setattr", "(", "attr", ".", "dataset", ",", "\"transform\"", ",", "\n", "Compose", "(", "[", "current_transform", ",", "transform", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.base_dataset.BaseDataset._set_multiscale_transform": [[513, 519], ["base_dataset.BaseDataset.__dict__.items", "isinstance", "base_dataset.BaseDataset._set_composed_multiscale_transform", "base_dataset.BaseDataset._set_composed_multiscale_transform"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.base_dataset.BaseDataset._set_composed_multiscale_transform", "home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.base_dataset.BaseDataset._set_composed_multiscale_transform"], ["", "", "", "def", "_set_multiscale_transform", "(", "self", ",", "transform", ")", ":", "\n", "        ", "for", "_", ",", "attr", "in", "self", ".", "__dict__", ".", "items", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "attr", ",", "torch", ".", "utils", ".", "data", ".", "DataLoader", ")", ":", "\n", "                ", "self", ".", "_set_composed_multiscale_transform", "(", "attr", ",", "transform", ")", "\n", "", "", "for", "loader", "in", "self", ".", "test_dataloaders", ":", "\n", "            ", "self", ".", "_set_composed_multiscale_transform", "(", "loader", ",", "transform", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.base_dataset.BaseDataset.set_strategies": [[520, 524], ["model.get_spatial_ops", "torch_points3d.core.data_transform.MultiScaleTransform", "base_dataset.BaseDataset._set_multiscale_transform"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.get_spatial_ops", "home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.base_dataset.BaseDataset._set_multiscale_transform"], ["", "", "def", "set_strategies", "(", "self", ",", "model", ")", ":", "\n", "        ", "strategies", "=", "model", ".", "get_spatial_ops", "(", ")", "\n", "transform", "=", "MultiScaleTransform", "(", "strategies", ")", "\n", "self", ".", "_set_multiscale_transform", "(", "transform", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.base_dataset.BaseDataset.get_tracker": [[525, 528], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "get_tracker", "(", "self", ",", "wandb_log", ":", "bool", ",", "tensorboard_log", ":", "bool", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.base_dataset.BaseDataset.resolve_saving_stage": [[529, 557], ["log.info", "log.info", "log.info"], "methods", ["None"], ["", "def", "resolve_saving_stage", "(", "self", ",", "selection_stage", ")", ":", "\n", "        ", "\"\"\"This function is responsible to determine if the best model\n        selection is going to be on the validation or test datasets.\n        \"\"\"", "\n", "log", ".", "info", "(", "\n", "\"Available stage selection datasets: {} {} {}\"", ".", "format", "(", "\n", "COLORS", ".", "IPurple", ",", "self", ".", "available_stage_names", ",", "COLORS", ".", "END_NO_TOKEN", "\n", ")", "\n", ")", "\n", "\n", "if", "self", ".", "num_test_datasets", ">", "1", "and", "not", "self", ".", "_contains_dataset_name", ":", "\n", "            ", "msg", "=", "\"If you want to have better trackable names for your test \"", "\"datasets, add a \"", "\n", "msg", "+=", "COLORS", ".", "IPurple", "+", "\"name\"", "+", "COLORS", ".", "END_NO_TOKEN", "\n", "msg", "+=", "\" attribute to them\"", "\n", "log", ".", "info", "(", "msg", ")", "\n", "\n", "", "if", "selection_stage", "==", "\"\"", ":", "\n", "            ", "if", "self", ".", "has_val_loader", ":", "\n", "                ", "selection_stage", "=", "self", ".", "val_dataset", ".", "name", "\n", "", "else", ":", "\n", "                ", "selection_stage", "=", "self", ".", "test_dataset", "[", "0", "]", ".", "name", "\n", "", "", "log", ".", "info", "(", "\n", "f\"The models will be selected using the metrics on following \"", "\n", "f\"dataset: {COLORS.IPurple} {selection_stage} \"", "\n", "f\"{COLORS.END_NO_TOKEN}\"", ")", "\n", "\n", "return", "selection_stage", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.base_dataset.BaseDataset.add_weights": [[558, 590], ["torch.ones", "base_dataset.BaseDataset.get_dataset", "getattr", "torch.unique", "torch.arange().long", "counts.float", "torch.log.float", "torch.sum", "log.info", "setattr", "getattr", "torch.log.mean", "torch.sqrt", "str().startswith", "torch.cat", "ValueError", "torch.arange", "torch.log", "ValueError", "str", "numpy.round", "torch.log.sum", "weight.item"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.base_dataset.BaseDataset.get_dataset", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.lovasz_loss.mean", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat"], ["", "def", "add_weights", "(", "self", ",", "dataset_name", "=", "\"train\"", ",", "class_weight_method", "=", "\"sqrt\"", ")", ":", "\n", "        ", "\"\"\"Add class weights to a given dataset that are then\n        accessible using the `class_weights` attribute.\n        \"\"\"", "\n", "L", "=", "self", ".", "num_classes", "\n", "weights", "=", "torch", ".", "ones", "(", "L", ")", "\n", "dataset", "=", "self", ".", "get_dataset", "(", "dataset_name", ")", "\n", "if", "getattr", "(", "dataset", ",", "'data'", ",", "None", ")", ":", "\n", "            ", "labels", "=", "dataset", ".", "data", ".", "y", "\n", "", "elif", "getattr", "(", "dataset", ",", "'_datas'", ",", "None", ")", ":", "\n", "            ", "labels", "=", "torch", ".", "cat", "(", "[", "data", ".", "y", "for", "data", "in", "dataset", ".", "_datas", "]", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f\"Could not find data in '{dataset_name}' dataset.\"", ")", "\n", "", "idx_classes", ",", "counts", "=", "torch", ".", "unique", "(", "labels", ",", "return_counts", "=", "True", ")", "\n", "\n", "dataset", ".", "idx_classes", "=", "torch", ".", "arange", "(", "L", ")", ".", "long", "(", ")", "\n", "weights", "[", "idx_classes", "]", "=", "counts", ".", "float", "(", ")", "\n", "weights", "=", "weights", ".", "float", "(", ")", "\n", "weights", "=", "weights", ".", "mean", "(", ")", "/", "weights", "\n", "if", "class_weight_method", "==", "\"sqrt\"", ":", "\n", "            ", "weights", "=", "torch", ".", "sqrt", "(", "weights", ")", "\n", "", "elif", "str", "(", "class_weight_method", ")", ".", "startswith", "(", "\"log\"", ")", ":", "\n", "            ", "weights", "=", "torch", ".", "log", "(", "1.1", "+", "weights", "/", "weights", ".", "sum", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Method %s not supported\"", "%", "class_weight_method", ")", "\n", "\n", "", "weights", "/=", "torch", ".", "sum", "(", "weights", ")", "\n", "log", ".", "info", "(", "f\"CLASS WEIGHT : \"", "\n", "f\"{[np.round(weight.item(), 4) for weight in weights]}\"", ")", "\n", "setattr", "(", "dataset", ",", "\"weight_classes\"", ",", "weights", ")", "\n", "\n", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.base_dataset.BaseDataset.__repr__": [[591, 620], ["base_dataset.BaseDataset.__dict__.items", "attr.endswith", "getattr", "isinstance", "attr.startswith", "key.endswith", "getattr", "len", "len", "len", "str", "len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "message", "=", "f\"Dataset: {self.__class__.__name__} \\n\"", "\n", "for", "attr", "in", "self", ".", "__dict__", ":", "\n", "            ", "if", "\"transform\"", "in", "attr", ":", "\n", "                ", "message", "+=", "f\"{COLORS.IPurple}{attr} {COLORS.END_NO_TOKEN}= \"", "f\"{getattr(self, attr)}\\n\"", "\n", "", "", "for", "attr", "in", "self", ".", "__dict__", ":", "\n", "            ", "if", "attr", ".", "endswith", "(", "\"_dataset\"", ")", ":", "\n", "                ", "dataset", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "dataset", ",", "list", ")", ":", "\n", "                    ", "if", "len", "(", "dataset", ")", ">", "1", ":", "\n", "                        ", "size", "=", "\", \"", ".", "join", "(", "[", "str", "(", "len", "(", "d", ")", ")", "for", "d", "in", "dataset", "]", ")", "\n", "", "else", ":", "\n", "                        ", "size", "=", "len", "(", "dataset", "[", "0", "]", ")", "\n", "", "", "elif", "dataset", ":", "\n", "                    ", "size", "=", "len", "(", "dataset", ")", "\n", "", "else", ":", "\n", "                    ", "size", "=", "0", "\n", "", "if", "attr", ".", "startswith", "(", "\"_\"", ")", ":", "\n", "                    ", "attr", "=", "attr", "[", "1", ":", "]", "\n", "", "message", "+=", "f\"Size of {COLORS.IPurple}{attr} \"", "f\"{COLORS.END_NO_TOKEN}= {size}\\n\"", "\n", "", "", "for", "key", ",", "attr", "in", "self", ".", "__dict__", ".", "items", "(", ")", ":", "\n", "            ", "if", "key", ".", "endswith", "(", "\"_sampler\"", ")", "and", "attr", ":", "\n", "                ", "message", "+=", "f\"{COLORS.IPurple}{key} {COLORS.END_NO_TOKEN}= \"", "f\"{attr}\\n\"", "\n", "", "", "message", "+=", "f\"{COLORS.IPurple}Batch size ={COLORS.END_NO_TOKEN} \"", "f\"{self.batch_size}\"", "\n", "return", "message", "\n", "", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.base_dataset.explode_transform": [[26, 46], ["isinstance", "copy.deepcopy", "isinstance", "copy.deepcopy", "Exception"], "function", ["None"], ["def", "explode_transform", "(", "transforms", ")", ":", "\n", "    ", "\"\"\" Returns a flattened list of transform\n    Arguments:\n        transforms {[list | T.Compose]} -- Contains list of transform\n            to be added\n\n    Returns:\n        [list] -- [List of transforms]\n    \"\"\"", "\n", "out", "=", "[", "]", "\n", "if", "transforms", "is", "not", "None", ":", "\n", "        ", "if", "isinstance", "(", "transforms", ",", "Compose", ")", ":", "\n", "            ", "out", "=", "copy", ".", "deepcopy", "(", "transforms", ".", "transforms", ")", "\n", "", "elif", "isinstance", "(", "transforms", ",", "list", ")", ":", "\n", "            ", "out", "=", "copy", ".", "deepcopy", "(", "transforms", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\n", "\"Transforms should be provided either within a list or a \"", "\n", "\"Compose\"", ")", "\n", "", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.base_dataset.save_used_properties": [[48, 63], ["functools.wraps", "func", "isinstance", "func.numpy().tolist", "isinstance", "func.tolist", "func.numpy"], "function", ["None"], ["", "def", "save_used_properties", "(", "func", ")", ":", "\n", "    ", "@", "functools", ".", "wraps", "(", "func", ")", "\n", "def", "wrapper", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "# Save used_properties for mocking dataset when calling", "\n", "# pretrained registry", "\n", "        ", "result", "=", "func", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "if", "isinstance", "(", "result", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "self", ".", "used_properties", "[", "func", ".", "__name__", "]", "=", "result", ".", "numpy", "(", ")", ".", "tolist", "(", ")", "\n", "", "elif", "isinstance", "(", "result", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "self", ".", "used_properties", "[", "func", ".", "__name__", "]", "=", "result", ".", "tolist", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "used_properties", "[", "func", ".", "__name__", "]", "=", "result", "\n", "", "return", "result", "\n", "\n", "", "return", "wrapper", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.dataset_factory.get_dataset_class": [[11, 38], ["getattr", "getattr.split", "importlib.import_module", "importlib.import_module.__dict__.items", "hydra.utils.to_absolute_path", "NotImplementedError", "log.error", "issubclass", "name.lower", "target_dataset_name.lower"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.split"], ["def", "get_dataset_class", "(", "dataset_config", ")", ":", "\n", "    ", "task", "=", "dataset_config", ".", "task", "\n", "# Find and create associated dataset", "\n", "try", ":", "\n", "        ", "dataset_config", ".", "dataroot", "=", "hydra", ".", "utils", ".", "to_absolute_path", "(", "\n", "dataset_config", ".", "dataroot", ")", "\n", "", "except", "Exception", ":", "\n", "        ", "log", ".", "error", "(", "\"This should happen only during testing\"", ")", "\n", "", "dataset_class", "=", "getattr", "(", "dataset_config", ",", "\"class\"", ")", "\n", "dataset_paths", "=", "dataset_class", ".", "split", "(", "\".\"", ")", "\n", "module", "=", "\".\"", ".", "join", "(", "dataset_paths", "[", ":", "-", "1", "]", ")", "\n", "class_name", "=", "dataset_paths", "[", "-", "1", "]", "\n", "dataset_module", "=", "\".\"", ".", "join", "(", "[", "\"torch_points3d.datasets\"", ",", "task", ",", "module", "]", ")", "\n", "datasetlib", "=", "importlib", ".", "import_module", "(", "dataset_module", ")", "\n", "\n", "target_dataset_name", "=", "class_name", "\n", "dataset_cls", "=", "None", "\n", "for", "name", ",", "cls", "in", "datasetlib", ".", "__dict__", ".", "items", "(", ")", ":", "\n", "        ", "if", "name", ".", "lower", "(", ")", "==", "target_dataset_name", ".", "lower", "(", ")", "and", "issubclass", "(", "cls", ",", "BaseDataset", ")", ":", "\n", "            ", "dataset_cls", "=", "cls", "\n", "\n", "", "", "if", "dataset_cls", "is", "None", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\n", "\"In %s.py, there should be a subclass of BaseDataset with class name that matches %s in lowercase.\"", "\n", "%", "(", "module", ",", "class_name", ")", "\n", ")", "\n", "", "return", "dataset_cls", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.dataset_factory.instantiate_dataset": [[40, 49], ["dataset_factory.get_dataset_class", "get_dataset_class."], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.dataset_factory.get_dataset_class"], ["", "def", "instantiate_dataset", "(", "dataset_config", ")", "->", "BaseDataset", ":", "\n", "    ", "\"\"\"Import the module \"data/[module].py\".\n    In the file, the class called {class_name}() will\n    be instantiated. It has to be a subclass of BaseDataset,\n    and it is case-insensitive.\n    \"\"\"", "\n", "dataset_cls", "=", "get_dataset_class", "(", "dataset_config", ")", "\n", "dataset", "=", "dataset_cls", "(", "dataset_config", ")", "\n", "return", "dataset", "\n", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.base_dataset_multimodal.BaseDatasetMM.__init__": [[34, 38], ["torch_points3d.datasets.base_dataset.BaseDataset.__init__", "base_dataset_multimodal.BaseDatasetMM.set_multimodal_transform"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.base_dataset_multimodal.BaseDatasetMM.set_multimodal_transform"], ["def", "__init__", "(", "self", ",", "dataset_opt", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dataset_opt", ")", "\n", "\n", "BaseDatasetMM", ".", "set_multimodal_transform", "(", "self", ",", "dataset_opt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.base_dataset_multimodal.BaseDatasetMM.process": [[39, 44], ["None"], "methods", ["None"], ["", "def", "process", "(", "self", ")", ":", "\n", "        ", "\"\"\"Instantiate this in child classes because multimodal\n        transforms are very dataset-dependent.\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.base_dataset_multimodal.BaseDatasetMM._get_collate_function": [[45, 69], ["torch_points3d.utils.config.ConvolutionFormatFactory.check_is_dense_format", "functools.partial", "NotImplementedError", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.config.ConvolutionFormatFactory.check_is_dense_format"], ["", "@", "staticmethod", "\n", "def", "_get_collate_function", "(", "conv_type", ",", "is_multiscale", ",", "\n", "pre_collate_transform", "=", "None", ")", ":", "\n", "        ", "\"\"\"Collate mechanism for MMData.\n\n        Relies on MMBatch.from_mm_data_list to preserve multimodal\n        mappings and features when.\n        \"\"\"", "\n", "if", "is_multiscale", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\n", "\"Multiscale not supported for multimodal data.\"", ")", "\n", "\n", "", "is_dense", "=", "ConvolutionFormatFactory", ".", "check_is_dense_format", "(", "conv_type", ")", "\n", "if", "is_dense", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\n", "\"Dense conv_type not supported for multimodal data.\"", ")", "\n", "\n", "# We ake use of the core torch_geometric Batch mechanisms. In", "\n", "# particular, '*index*' attributes will be treated carefully", "\n", "# when batching. The values are reindexed, which is what we", "\n", "# need for our forward star indexing structure.", "\n", "", "fn", "=", "MMBatch", ".", "from_mm_data_list", "\n", "return", "partial", "(", "BaseDataset", ".", "_collate_fn", ",", "collate_fn", "=", "fn", ",", "\n", "pre_collate_transform", "=", "pre_collate_transform", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.base_dataset_multimodal.BaseDatasetMM.remove_multimodal_transform": [[70, 92], ["isinstance", "isinstance", "len", "torch_points3d.core.data_transform.multimodal.ComposeMultiModal", "isinstance", "isinstance", "torch_points3d.core.data_transform.multimodal.ComposeMultiModal.append", "tuple"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append"], ["", "@", "staticmethod", "\n", "def", "remove_multimodal_transform", "(", "transform_in", ",", "list_transform_class", ")", ":", "\n", "        ", "\"\"\"Remove a multimodal transform if within list_transform_class\n\n        Arguments:\n            transform_in {[type]} -- [ComposeMultiModal | List of transform]\n            list_transform_class {[type]} -- [List of transform class to be removed]\n\n        Returns:\n            [type] -- [description]\n        \"\"\"", "\n", "if", "isinstance", "(", "transform_in", ",", "ComposeMultiModal", ")", "or", "isinstance", "(", "transform_in", ",", "list", ")", ":", "\n", "            ", "if", "len", "(", "list_transform_class", ")", ">", "0", ":", "\n", "                ", "transform_out", "=", "[", "]", "\n", "transforms", "=", "transform_in", ".", "transforms", "if", "isinstance", "(", "transform_in", ",", "ComposeMultiModal", ")", "else", "transform_in", "\n", "for", "t", "in", "transforms", ":", "\n", "                    ", "if", "not", "isinstance", "(", "t", ",", "tuple", "(", "list_transform_class", ")", ")", ":", "\n", "                        ", "transform_out", ".", "append", "(", "t", ")", "\n", "", "", "transform_out", "=", "ComposeMultiModal", "(", "transform_out", ")", "\n", "", "", "else", ":", "\n", "            ", "transform_out", "=", "transform_in", "\n", "", "return", "transform_out", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.base_dataset_multimodal.BaseDatasetMM.set_multimodal_transform": [[93, 134], ["dataset_opt.keys", "getattr", "getattr", "getattr.keys", "base_dataset_multimodal.explode_multimodal_transform", "base_dataset_multimodal.explode_multimodal_transform", "setattr", "setattr", "torch_points3d.core.data_transform.multimodal.instantiate_multimodal_transforms", "setattr", "getattr", "getattr", "torch_points3d.core.data_transform.multimodal.ComposeMultiModal", "getattr", "len", "key.replace"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.mock.MockDatasetConfig.keys", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.mock.MockDatasetConfig.keys", "home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.base_dataset_multimodal.explode_multimodal_transform", "home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.base_dataset_multimodal.explode_multimodal_transform", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.__init__.instantiate_multimodal_transforms", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "@", "staticmethod", "\n", "def", "set_multimodal_transform", "(", "obj", ",", "dataset_opt", ")", ":", "\n", "        ", "\"\"\"This function creates and sets the method used for multimodal \n        mapping, based on the configuration multimodal attributes in the passed\n        configuration.\n\n        Inspired from BaseDataset.set_transform().\n        \"\"\"", "\n", "for", "k", "in", "dataset_opt", ".", "keys", "(", ")", ":", "\n", "            ", "if", "k", "!=", "\"multimodal\"", ":", "\n", "                ", "continue", "\n", "\n", "# Recover the modality name and options", "\n", "", "modality_opt", "=", "getattr", "(", "dataset_opt", ",", "k", ")", "\n", "modality", "=", "getattr", "(", "modality_opt", ",", "'modality'", ")", "\n", "\n", "# Initialize the modality transforms to None", "\n", "for", "prefix", "in", "[", "'pre'", ",", "'test'", ",", "'train'", ",", "'val'", "]", ":", "\n", "                ", "setattr", "(", "obj", ",", "f\"{prefix}_transform_{modality}\"", ",", "None", ")", "\n", "\n", "", "for", "key", "in", "modality_opt", ".", "keys", "(", ")", ":", "\n", "                ", "if", "\"transform\"", "not", "in", "key", ":", "\n", "                    ", "continue", "\n", "\n", "", "transform", "=", "instantiate_multimodal_transforms", "(", "\n", "getattr", "(", "modality_opt", ",", "key", ")", ")", "\n", "\n", "setattr", "(", "\n", "obj", ",", "\n", "f\"{key.replace('transforms', 'transform')}_{modality}\"", ",", "\n", "transform", ")", "\n", "\n", "# Chain pre_transform_modality and test_transform_modality", "\n", "# in inference_transform_modality", "\n", "", "inference_transform", "=", "explode_multimodal_transform", "(", "\n", "getattr", "(", "obj", ",", "f\"pre_transform_{modality}\"", ")", ")", "\n", "inference_transform", "+=", "explode_multimodal_transform", "(", "\n", "getattr", "(", "obj", ",", "f\"test_transform_{modality}\"", ")", ")", "\n", "inference_transform", "=", "ComposeMultiModal", "(", "inference_transform", ")", "if", "len", "(", "inference_transform", ")", ">", "0", "else", "None", "\n", "setattr", "(", "obj", ",", "f\"inference_transform_{modality}\"", ",", "inference_transform", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.base_dataset_multimodal.explode_multimodal_transform": [[9, 28], ["isinstance", "copy.deepcopy", "isinstance", "copy.deepcopy", "Exception"], "function", ["None"], ["def", "explode_multimodal_transform", "(", "transforms", ")", ":", "\n", "    ", "\"\"\" Returns a flattened list of transform\n    Arguments:\n        transforms {[list | ComposeMultiModal]} -- Contains list of transform\n        to be added\n\n    Returns:\n        [list] -- [List of transforms]\n    \"\"\"", "\n", "out", "=", "[", "]", "\n", "if", "transforms", "is", "not", "None", ":", "\n", "        ", "if", "isinstance", "(", "transforms", ",", "ComposeMultiModal", ")", ":", "\n", "            ", "out", "=", "copy", ".", "deepcopy", "(", "transforms", ".", "transforms", ")", "\n", "", "elif", "isinstance", "(", "transforms", ",", "list", ")", ":", "\n", "            ", "out", "=", "copy", ".", "deepcopy", "(", "transforms", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\"Multimodal transforms should be provided either \"", "\n", "\"within a list or a ComposeMultiModal\"", ")", "\n", "", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.download-scannet.get_release_scans": [[41, 48], ["urlopen", "scan_line.decode().rstrip", "scans.append", "scan_line.decode"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append"], ["def", "get_release_scans", "(", "release_file", ")", ":", "\n", "    ", "scan_lines", "=", "urlopen", "(", "release_file", ")", "\n", "scans", "=", "[", "]", "\n", "for", "scan_line", "in", "scan_lines", ":", "\n", "        ", "scan_id", "=", "scan_line", ".", "decode", "(", "'utf8'", ")", ".", "rstrip", "(", "'\\n'", ")", "\n", "scans", ".", "append", "(", "scan_id", ")", "\n", "", "return", "scans", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.download-scannet.download_release": [[50, 58], ["print", "print", "len", "os.path.join", "download-scannet.download_scan"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.scannet.download_scan"], ["", "def", "download_release", "(", "release_scans", ",", "out_dir", ",", "file_types", ",", "use_v1_sens", ")", ":", "\n", "    ", "if", "len", "(", "release_scans", ")", "==", "0", ":", "\n", "        ", "return", "\n", "", "print", "(", "'Downloading ScanNet '", "+", "RELEASE_NAME", "+", "' release to '", "+", "out_dir", "+", "'...'", ")", "\n", "for", "scan_id", "in", "release_scans", ":", "\n", "        ", "scan_out_dir", "=", "os", ".", "path", ".", "join", "(", "out_dir", ",", "scan_id", ")", "\n", "download_scan", "(", "scan_id", ",", "scan_out_dir", ",", "file_types", ",", "use_v1_sens", ")", "\n", "", "print", "(", "'Downloaded ScanNet '", "+", "RELEASE_NAME", "+", "' release.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.download-scannet.download_file": [[60, 74], ["os.path.dirname", "os.path.isdir", "os.makedirs", "os.path.isfile", "print", "tempfile.mkstemp", "os.fdopen", "os.fdopen.close", "urllib.request.urlretrieve", "os.rename", "print"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.makedirs"], ["", "def", "download_file", "(", "url", ",", "out_file", ")", ":", "\n", "    ", "out_dir", "=", "os", ".", "path", ".", "dirname", "(", "out_file", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "out_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "out_dir", ")", "\n", "", "if", "not", "os", ".", "path", ".", "isfile", "(", "out_file", ")", ":", "\n", "        ", "print", "(", "'\\t'", "+", "url", "+", "' > '", "+", "out_file", ")", "\n", "fh", ",", "out_file_tmp", "=", "tempfile", ".", "mkstemp", "(", "dir", "=", "out_dir", ")", "\n", "f", "=", "os", ".", "fdopen", "(", "fh", ",", "'w'", ")", "\n", "f", ".", "close", "(", ")", "\n", "urllib", ".", "request", ".", "urlretrieve", "(", "url", ",", "out_file_tmp", ")", "\n", "#urllib.urlretrieve(url, out_file_tmp)", "\n", "os", ".", "rename", "(", "out_file_tmp", ",", "out_file", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'WARNING: skipping download of existing file '", "+", "out_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.download-scannet.download_scan": [[75, 88], ["print", "print", "os.path.isdir", "os.makedirs", "download-scannet.download_file", "FAILED_DOWNLOAD.append"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.makedirs", "home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.pretrained_api.download_file", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append"], ["", "", "def", "download_scan", "(", "scan_id", ",", "out_dir", ",", "file_types", ",", "use_v1_sens", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "print", "(", "'Downloading ScanNet '", "+", "RELEASE_NAME", "+", "' scan '", "+", "scan_id", "+", "' ...'", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "out_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "out_dir", ")", "\n", "", "for", "ft", "in", "file_types", ":", "\n", "            ", "v1_sens", "=", "use_v1_sens", "and", "ft", "==", "'.sens'", "\n", "url", "=", "BASE_URL", "+", "RELEASE", "+", "'/'", "+", "scan_id", "+", "'/'", "+", "scan_id", "+", "ft", "if", "not", "v1_sens", "else", "BASE_URL", "+", "RELEASES", "[", "V1_IDX", "]", "+", "'/'", "+", "scan_id", "+", "'/'", "+", "scan_id", "+", "ft", "\n", "out_file", "=", "out_dir", "+", "'/'", "+", "scan_id", "+", "ft", "\n", "download_file", "(", "url", ",", "out_file", ")", "\n", "", "print", "(", "'Downloaded scan '", "+", "scan_id", ")", "\n", "", "except", ":", "\n", "        ", "FAILED_DOWNLOAD", ".", "append", "(", "scan_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.download-scannet.download_task_data": [[90, 105], ["print", "print", "os.path.join", "os.path.dirname", "download-scannet.download_file", "os.path.isdir", "os.makedirs"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.pretrained_api.download_file", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.makedirs"], ["", "", "def", "download_task_data", "(", "out_dir", ")", ":", "\n", "    ", "print", "(", "'Downloading ScanNet v1 task data...'", ")", "\n", "files", "=", "[", "\n", "LABEL_MAP_FILES", "[", "V1_IDX", "]", ",", "'obj_classification/data.zip'", ",", "\n", "'obj_classification/trained_models.zip'", ",", "'voxel_labeling/data.zip'", ",", "\n", "'voxel_labeling/trained_models.zip'", "\n", "]", "\n", "for", "file", "in", "files", ":", "\n", "        ", "url", "=", "BASE_URL", "+", "RELEASES_TASKS", "[", "V1_IDX", "]", "+", "'/'", "+", "file", "\n", "localpath", "=", "os", ".", "path", ".", "join", "(", "out_dir", ",", "file", ")", "\n", "localdir", "=", "os", ".", "path", ".", "dirname", "(", "localpath", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "localdir", ")", ":", "\n", "          ", "os", ".", "makedirs", "(", "localdir", ")", "\n", "", "download_file", "(", "url", ",", "localpath", ")", "\n", "", "print", "(", "'Downloaded task data.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.download-scannet.download_label_map": [[107, 118], ["print", "print", "os.path.join", "os.path.dirname", "download-scannet.download_file", "os.path.isdir", "os.makedirs"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.pretrained_api.download_file", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.makedirs"], ["", "def", "download_label_map", "(", "out_dir", ")", ":", "\n", "    ", "print", "(", "'Downloading ScanNet '", "+", "RELEASE_NAME", "+", "' label mapping file...'", ")", "\n", "files", "=", "[", "LABEL_MAP_FILE", "]", "\n", "for", "file", "in", "files", ":", "\n", "        ", "url", "=", "BASE_URL", "+", "RELEASE_TASKS", "+", "'/'", "+", "file", "\n", "localpath", "=", "os", ".", "path", ".", "join", "(", "out_dir", ",", "file", ")", "\n", "localdir", "=", "os", ".", "path", ".", "dirname", "(", "localpath", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "localdir", ")", ":", "\n", "          ", "os", ".", "makedirs", "(", "localdir", ")", "\n", "", "download_file", "(", "url", ",", "localpath", ")", "\n", "", "print", "(", "'Downloaded ScanNet '", "+", "RELEASE_NAME", "+", "' label mapping file.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.download-scannet.main": [[120, 219], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "print", "print", "print", "print", "input", "download-scannet.get_release_scans", "download-scannet.get_release_scans", "os.path.join", "os.path.join", "os.path.join", "download-scannet.download_task_data", "download-scannet.download_label_map", "print", "file_types_test.append", "print", "download-scannet.download_file", "print", "os.path.join", "os.path.join", "print", "download-scannet.download_file", "print", "os.path.join", "os.path.join", "print", "print", "print", "input", "download-scannet.download_release", "print", "print", "print", "download-scannet.download_scan", "len", "len", "print", "print", "print", "input", "download-scannet.download_label_map", "download-scannet.download_release", "download-scannet.download_file", "os.path.join", "os.path.join", "print", "input", "input.strip().lower", "file_types.remove", "os.path.join", "os.path.join", "input.strip().lower", "scan_file_types.remove", "input.strip", "input.strip"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.scannet.get_release_scans", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.scannet.get_release_scans", "home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.download-scannet.download_task_data", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.scannet.download_label_map", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.pretrained_api.download_file", "home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.pretrained_api.download_file", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.scannet.download_release", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.scannet.download_scan", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.scannet.download_label_map", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.scannet.download_release", "home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.pretrained_api.download_file"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Downloads ScanNet public data release.'", ")", "\n", "parser", ".", "add_argument", "(", "'-o'", ",", "'--out_dir'", ",", "required", "=", "True", ",", "help", "=", "'directory in which to download'", ")", "\n", "parser", ".", "add_argument", "(", "'--task_data'", ",", "action", "=", "'store_true'", ",", "help", "=", "'download task data (v1)'", ")", "\n", "parser", ".", "add_argument", "(", "'--label_map'", ",", "action", "=", "'store_true'", ",", "help", "=", "'download label map file'", ")", "\n", "parser", ".", "add_argument", "(", "'--v1'", ",", "action", "=", "'store_true'", ",", "help", "=", "'download ScanNet v1 instead of v2'", ")", "\n", "parser", ".", "add_argument", "(", "'--id'", ",", "help", "=", "'specific scan id to download'", ")", "\n", "parser", ".", "add_argument", "(", "'--preprocessed_frames'", ",", "action", "=", "'store_true'", ",", "help", "=", "'download preprocessed subset of ScanNet frames ('", "+", "PREPROCESSED_FRAMES_FILE", "[", "1", "]", "+", "')'", ")", "\n", "parser", ".", "add_argument", "(", "'--test_frames_2d'", ",", "action", "=", "'store_true'", ",", "help", "=", "'download 2D test frames ('", "+", "TEST_FRAMES_FILE", "[", "1", "]", "+", "'; also included with whole dataset download)'", ")", "\n", "parser", ".", "add_argument", "(", "'--types'", ",", "nargs", "=", "'+'", ",", "help", "=", "'specific file type to download (.aggregation.json, .sens, .txt, _vh_clean.ply, _vh_clean_2.0.010000.segs.json, _vh_clean_2.ply, _vh_clean.segs.json, _vh_clean.aggregation.json, _vh_clean_2.labels.ply, _2d-instance.zip, _2d-instance-filt.zip, _2d-label.zip, _2d-label-filt.zip)'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "print", "(", "'By pressing any key to continue you confirm that you have agreed to the ScanNet terms of use as described at:'", ")", "\n", "print", "(", "TOS_URL", ")", "\n", "print", "(", "'***'", ")", "\n", "print", "(", "'Press any key to continue, or CTRL-C to exit.'", ")", "\n", "key", "=", "input", "(", "''", ")", "\n", "\n", "if", "args", ".", "v1", ":", "\n", "        ", "global", "RELEASE", "\n", "global", "RELEASE_TASKS", "\n", "global", "RELEASE_NAME", "\n", "global", "LABEL_MAP_FILE", "\n", "RELEASE", "=", "RELEASES", "[", "V1_IDX", "]", "\n", "RELEASE_TASKS", "=", "RELEASES_TASKS", "[", "V1_IDX", "]", "\n", "RELEASE_NAME", "=", "RELEASES_NAMES", "[", "V1_IDX", "]", "\n", "LABEL_MAP_FILE", "=", "LABEL_MAP_FILES", "[", "V1_IDX", "]", "\n", "\n", "", "release_file", "=", "BASE_URL", "+", "RELEASE", "+", "'.txt'", "\n", "release_scans", "=", "get_release_scans", "(", "release_file", ")", "\n", "file_types", "=", "FILETYPES", ";", "\n", "release_test_file", "=", "BASE_URL", "+", "RELEASE", "+", "'_test.txt'", "\n", "release_test_scans", "=", "get_release_scans", "(", "release_test_file", ")", "\n", "file_types_test", "=", "FILETYPES_TEST", ";", "\n", "out_dir_scans", "=", "os", ".", "path", ".", "join", "(", "args", ".", "out_dir", ",", "'scans'", ")", "\n", "out_dir_test_scans", "=", "os", ".", "path", ".", "join", "(", "args", ".", "out_dir", ",", "'scans_test'", ")", "\n", "out_dir_tasks", "=", "os", ".", "path", ".", "join", "(", "args", ".", "out_dir", ",", "'tasks'", ")", "\n", "\n", "if", "args", ".", "types", ":", "# download file type", "\n", "        ", "file_types", "=", "args", ".", "types", "\n", "for", "file_type", "in", "file_types", ":", "\n", "            ", "if", "file_type", "not", "in", "FILETYPES", ":", "\n", "                ", "print", "(", "'ERROR: Invalid file type: '", "+", "file_type", ")", "\n", "return", "\n", "", "", "file_types_test", "=", "[", "]", "\n", "for", "file_type", "in", "file_types", ":", "\n", "            ", "if", "file_type", "not", "in", "FILETYPES_TEST", ":", "\n", "                ", "file_types_test", ".", "append", "(", "file_type", ")", "\n", "", "", "", "if", "args", ".", "task_data", ":", "# download task data", "\n", "        ", "download_task_data", "(", "out_dir_tasks", ")", "\n", "", "elif", "args", ".", "label_map", ":", "# download label map file", "\n", "        ", "download_label_map", "(", "args", ".", "out_dir", ")", "\n", "", "elif", "args", ".", "preprocessed_frames", ":", "# download preprocessed scannet_frames_25k.zip file", "\n", "        ", "if", "args", ".", "v1", ":", "\n", "            ", "print", "(", "'ERROR: Preprocessed frames only available for ScanNet v2'", ")", "\n", "", "print", "(", "'You are downloading the preprocessed subset of frames '", "+", "PREPROCESSED_FRAMES_FILE", "[", "0", "]", "+", "' which requires '", "+", "PREPROCESSED_FRAMES_FILE", "[", "1", "]", "+", "' of space.'", ")", "\n", "download_file", "(", "os", ".", "path", ".", "join", "(", "BASE_URL", ",", "RELEASE_TASKS", ",", "PREPROCESSED_FRAMES_FILE", "[", "0", "]", ")", ",", "os", ".", "path", ".", "join", "(", "out_dir_tasks", ",", "PREPROCESSED_FRAMES_FILE", "[", "0", "]", ")", ")", "\n", "", "elif", "args", ".", "test_frames_2d", ":", "# download test scannet_frames_test.zip file", "\n", "        ", "if", "args", ".", "v1", ":", "\n", "            ", "print", "(", "'ERROR: 2D test frames only available for ScanNet v2'", ")", "\n", "", "print", "(", "'You are downloading the 2D test set '", "+", "TEST_FRAMES_FILE", "[", "0", "]", "+", "' which requires '", "+", "TEST_FRAMES_FILE", "[", "1", "]", "+", "' of space.'", ")", "\n", "download_file", "(", "os", ".", "path", ".", "join", "(", "BASE_URL", ",", "RELEASE_TASKS", ",", "TEST_FRAMES_FILE", "[", "0", "]", ")", ",", "os", ".", "path", ".", "join", "(", "out_dir_tasks", ",", "TEST_FRAMES_FILE", "[", "0", "]", ")", ")", "\n", "", "elif", "args", ".", "id", ":", "# download single scan", "\n", "        ", "scan_id", "=", "args", ".", "id", "\n", "is_test_scan", "=", "scan_id", "in", "release_test_scans", "\n", "if", "scan_id", "not", "in", "release_scans", "and", "(", "not", "is_test_scan", "or", "args", ".", "v1", ")", ":", "\n", "            ", "print", "(", "'ERROR: Invalid scan id: '", "+", "scan_id", ")", "\n", "", "else", ":", "\n", "            ", "out_dir", "=", "os", ".", "path", ".", "join", "(", "out_dir_scans", ",", "scan_id", ")", "if", "not", "is_test_scan", "else", "os", ".", "path", ".", "join", "(", "out_dir_test_scans", ",", "scan_id", ")", "\n", "scan_file_types", "=", "file_types", "if", "not", "is_test_scan", "else", "file_types_test", "\n", "use_v1_sens", "=", "not", "is_test_scan", "\n", "if", "not", "is_test_scan", "and", "not", "args", ".", "v1", "and", "'.sens'", "in", "scan_file_types", ":", "\n", "                ", "print", "(", "'Note: ScanNet v2 uses the same .sens files as ScanNet v1: Press \\'n\\' to exclude downloading .sens files for each scan'", ")", "\n", "key", "=", "input", "(", "''", ")", "\n", "if", "key", ".", "strip", "(", ")", ".", "lower", "(", ")", "==", "'n'", ":", "\n", "                    ", "scan_file_types", ".", "remove", "(", "'.sens'", ")", "\n", "", "", "download_scan", "(", "scan_id", ",", "out_dir", ",", "scan_file_types", ",", "use_v1_sens", ")", "\n", "", "", "else", ":", "# download entire release", "\n", "        ", "if", "len", "(", "file_types", ")", "==", "len", "(", "FILETYPES", ")", ":", "\n", "            ", "print", "(", "'WARNING: You are downloading the entire ScanNet '", "+", "RELEASE_NAME", "+", "' release which requires '", "+", "RELEASE_SIZE", "+", "' of space.'", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'WARNING: You are downloading all ScanNet '", "+", "RELEASE_NAME", "+", "' scans of type '", "+", "file_types", "[", "0", "]", ")", "\n", "", "print", "(", "'Note that existing scan directories will be skipped. Delete partially downloaded directories to re-download.'", ")", "\n", "print", "(", "'***'", ")", "\n", "print", "(", "'Press any key to continue, or CTRL-C to exit.'", ")", "\n", "key", "=", "input", "(", "''", ")", "\n", "if", "not", "args", ".", "v1", "and", "'.sens'", "in", "file_types", ":", "\n", "            ", "print", "(", "'Note: ScanNet v2 uses the same .sens files as ScanNet v1: Press \\'n\\' to exclude downloading .sens files for each scan'", ")", "\n", "key", "=", "input", "(", "''", ")", "\n", "if", "key", ".", "strip", "(", ")", ".", "lower", "(", ")", "==", "'n'", ":", "\n", "                ", "file_types", ".", "remove", "(", "'.sens'", ")", "\n", "", "", "download_release", "(", "release_scans", ",", "out_dir_scans", ",", "file_types", ",", "use_v1_sens", "=", "True", ")", "\n", "if", "not", "args", ".", "v1", ":", "\n", "            ", "download_label_map", "(", "args", ".", "out_dir", ")", "\n", "download_release", "(", "release_test_scans", ",", "out_dir_test_scans", ",", "file_types_test", ",", "use_v1_sens", "=", "False", ")", "\n", "download_file", "(", "os", ".", "path", ".", "join", "(", "BASE_URL", ",", "RELEASE_TASKS", ",", "TEST_FRAMES_FILE", "[", "0", "]", ")", ",", "os", ".", "path", ".", "join", "(", "out_dir_tasks", ",", "TEST_FRAMES_FILE", "[", "0", "]", ")", ")", "\n", "\n", "", "print", "(", "\"FAILED DOWNLOADING\"", ")", "\n", "print", "(", "FAILED_DOWNLOAD", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.__init__": [[61, 79], ["torch_geometric.data.Dataset.__init__", "glob.glob.glob", "os.path.join", "glob.glob.glob", "os.path.join", "glob.glob.glob", "os.path.join", "ValueError", "glob.glob.glob", "glob.glob.glob", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["def", "__init__", "(", "self", ",", "root", ",", "split", "=", "\"trainval\"", ",", "transform", "=", "None", ",", "process_workers", "=", "1", ",", "pre_transform", "=", "None", ")", ":", "\n", "        ", "assert", "self", ".", "REMAPPING_MAP", "[", "0", "]", "==", "IGNORE_LABEL", "# Make sure we have the same convention for unlabelled data", "\n", "self", ".", "use_multiprocessing", "=", "process_workers", ">", "1", "\n", "self", ".", "process_workers", "=", "process_workers", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "root", ",", "transform", "=", "transform", ",", "pre_transform", "=", "pre_transform", ")", "\n", "if", "split", "==", "\"train\"", ":", "\n", "            ", "self", ".", "_scans", "=", "glob", "(", "os", ".", "path", ".", "join", "(", "self", ".", "processed_paths", "[", "0", "]", ",", "\"*.pt\"", ")", ")", "\n", "", "elif", "split", "==", "\"val\"", ":", "\n", "            ", "self", ".", "_scans", "=", "glob", "(", "os", ".", "path", ".", "join", "(", "self", ".", "processed_paths", "[", "1", "]", ",", "\"*.pt\"", ")", ")", "\n", "", "elif", "split", "==", "\"test\"", ":", "\n", "            ", "self", ".", "_scans", "=", "glob", "(", "os", ".", "path", ".", "join", "(", "self", ".", "processed_paths", "[", "2", "]", ",", "\"*.pt\"", ")", ")", "\n", "", "elif", "split", "==", "\"trainval\"", ":", "\n", "            ", "self", ".", "_scans", "=", "glob", "(", "os", ".", "path", ".", "join", "(", "self", ".", "processed_paths", "[", "0", "]", ",", "\"*.pt\"", ")", ")", "+", "glob", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "processed_paths", "[", "1", "]", ",", "\"*.pt\"", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Split %s not recognised\"", "%", "split", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.raw_file_names": [[80, 83], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "raw_file_names", "(", "self", ")", ":", "\n", "        ", "return", "[", "\"sequences\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.processed_file_names": [[84, 87], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "processed_file_names", "(", "self", ")", ":", "\n", "        ", "return", "[", "s", "for", "s", "in", "self", ".", "AVAILABLE_SPLITS", "[", ":", "-", "1", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti._load_paths": [[88, 105], ["scan_paths.extend", "label_path.extend", "semantickitti.SemanticKitti.len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "def", "_load_paths", "(", "self", ",", "seqs", ")", ":", "\n", "        ", "scan_paths", "=", "[", "]", "\n", "label_path", "=", "[", "]", "\n", "for", "seq", "in", "seqs", ":", "\n", "            ", "scan_paths", ".", "extend", "(", "\n", "sorted", "(", "glob", "(", "os", ".", "path", ".", "join", "(", "self", ".", "raw_paths", "[", "0", "]", ",", "\"{0:02d}\"", ".", "format", "(", "int", "(", "seq", ")", ")", ",", "\"velodyne\"", ",", "\"*.bin\"", ")", ")", ")", "\n", ")", "\n", "label_path", ".", "extend", "(", "\n", "sorted", "(", "glob", "(", "os", ".", "path", ".", "join", "(", "self", ".", "raw_paths", "[", "0", "]", ",", "\"{0:02d}\"", ".", "format", "(", "int", "(", "seq", ")", ")", ",", "\"labels\"", ",", "\"*.label\"", ")", ")", ")", "\n", ")", "\n", "\n", "", "if", "len", "(", "label_path", ")", "==", "0", ":", "\n", "            ", "label_path", "=", "[", "None", "for", "i", "in", "range", "(", "len", "(", "scan_paths", ")", ")", "]", "\n", "", "if", "len", "(", "label_path", ")", ">", "0", "and", "len", "(", "scan_paths", ")", "!=", "len", "(", "label_path", ")", ":", "\n", "            ", "raise", "ValueError", "(", "(", "f\"number of scans {len(scan_paths)} not equal to number of labels {len(label_path)}\"", ")", ")", "\n", "\n", "", "return", "scan_paths", ",", "label_path", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.read_raw": [[106, 118], ["numpy.fromfile().reshape", "torch_geometric.data.Data", "numpy.fromfile().astype", "torch.tensor().long", "torch.tensor().long", "numpy.fromfile", "torch.tensor", "torch.tensor().reshape", "numpy.fromfile", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "read_raw", "(", "scan_file", ",", "label_file", "=", "None", ")", ":", "\n", "        ", "scan", "=", "np", ".", "fromfile", "(", "scan_file", ",", "dtype", "=", "np", ".", "float32", ")", ".", "reshape", "(", "-", "1", ",", "4", ")", "\n", "data", "=", "Data", "(", "pos", "=", "torch", ".", "tensor", "(", "scan", "[", ":", ",", ":", "3", "]", ")", ",", "x", "=", "torch", ".", "tensor", "(", "scan", "[", ":", ",", "3", "]", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", ",", ")", "\n", "if", "label_file", ":", "\n", "            ", "label", "=", "np", ".", "fromfile", "(", "label_file", ",", "dtype", "=", "np", ".", "uint32", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "assert", "scan", ".", "shape", "[", "0", "]", "==", "label", ".", "shape", "[", "0", "]", "\n", "semantic_label", "=", "label", "&", "0xFFFF", "\n", "instance_label", "=", "label", ">>", "16", "\n", "data", ".", "y", "=", "torch", ".", "tensor", "(", "semantic_label", ")", ".", "long", "(", ")", "\n", "data", ".", "instance_labels", "=", "torch", ".", "tensor", "(", "instance_label", ")", ".", "long", "(", ")", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.process_one": [[119, 126], ["semantickitti.SemanticKitti.read_raw", "log.info", "torch.save", "transform", "os.path.basename"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.read_raw"], ["", "@", "staticmethod", "\n", "def", "process_one", "(", "scan_file", ",", "label_file", ",", "transform", ",", "out_file", ")", ":", "\n", "        ", "data", "=", "SemanticKitti", ".", "read_raw", "(", "scan_file", ",", "label_file", ")", "\n", "if", "transform", ":", "\n", "            ", "data", "=", "transform", "(", "data", ")", "\n", "", "log", ".", "info", "(", "\"Processed file %s, nb points = %i\"", ",", "os", ".", "path", ".", "basename", "(", "out_file", ")", ",", "data", ".", "pos", ".", "shape", "[", "0", "]", ")", "\n", "torch", ".", "save", "(", "data", ",", "out_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.get": [[127, 132], ["torch.load", "semantickitti.SemanticKitti._remap_labels"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load", "home.repos.pwc.inspect_result.drprojects_deepviewagg.panoptic.scannet.ScannetPanoptic._remap_labels"], ["", "def", "get", "(", "self", ",", "idx", ")", ":", "\n", "        ", "data", "=", "torch", ".", "load", "(", "self", ".", "_scans", "[", "idx", "]", ")", "\n", "if", "data", ".", "y", "is", "not", "None", ":", "\n", "            ", "data", ".", "y", "=", "self", ".", "_remap_labels", "(", "data", ".", "y", ")", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.process": [[133, 155], ["enumerate", "os.path.exists", "os.makedirs", "semantickitti.SemanticKitti._load_paths", "zip", "scan_names.append", "os.path.join", "os.path.splitext", "scan.split", "multiprocessing.Pool", "pool.starmap", "semantickitti.SemanticKitti.process_one", "range", "semantickitti.SemanticKitti.len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.makedirs", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti._load_paths", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.split", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.process_one", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "def", "process", "(", "self", ")", ":", "\n", "        ", "for", "i", ",", "split", "in", "enumerate", "(", "self", ".", "AVAILABLE_SPLITS", "[", ":", "-", "1", "]", ")", ":", "\n", "            ", "if", "os", ".", "path", ".", "exists", "(", "self", ".", "processed_paths", "[", "i", "]", ")", ":", "\n", "                ", "continue", "\n", "", "os", ".", "makedirs", "(", "self", ".", "processed_paths", "[", "i", "]", ")", "\n", "\n", "seqs", "=", "self", ".", "SPLIT", "[", "split", "]", "\n", "scan_paths", ",", "label_paths", "=", "self", ".", "_load_paths", "(", "seqs", ")", "\n", "scan_names", "=", "[", "]", "\n", "for", "scan", "in", "scan_paths", ":", "\n", "                ", "scan", "=", "os", ".", "path", ".", "splitext", "(", "scan", ")", "[", "0", "]", "\n", "seq", ",", "_", ",", "scan_id", "=", "scan", ".", "split", "(", "os", ".", "path", ".", "sep", ")", "[", "-", "3", ":", "]", "\n", "scan_names", ".", "append", "(", "\"{}_{}\"", ".", "format", "(", "seq", ",", "scan_id", ")", ")", "\n", "\n", "", "out_files", "=", "[", "os", ".", "path", ".", "join", "(", "self", ".", "processed_paths", "[", "i", "]", ",", "\"{}.pt\"", ".", "format", "(", "scan_name", ")", ")", "for", "scan_name", "in", "scan_names", "]", "\n", "args", "=", "zip", "(", "scan_paths", ",", "label_paths", ",", "[", "self", ".", "pre_transform", "for", "i", "in", "range", "(", "len", "(", "scan_paths", ")", ")", "]", ",", "out_files", ")", "\n", "if", "self", ".", "use_multiprocessing", ":", "\n", "                ", "with", "multiprocessing", ".", "Pool", "(", "processes", "=", "self", ".", "process_workers", ")", "as", "pool", ":", "\n", "                    ", "pool", ".", "starmap", "(", "self", ".", "process_one", ",", "args", ")", "\n", "", "", "else", ":", "\n", "                ", "for", "arg", "in", "args", ":", "\n", "                    ", "self", ".", "process_one", "(", "*", "arg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len": [[156, 158], ["semantickitti.SemanticKitti.len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "", "", "", "def", "len", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_scans", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.download": [[159, 182], ["semantickitti.SemanticKitti.len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "def", "download", "(", "self", ")", ":", "\n", "        ", "if", "len", "(", "os", ".", "listdir", "(", "self", ".", "raw_dir", ")", ")", "==", "0", ":", "\n", "            ", "url", "=", "\"http://semantic-kitti.org/\"", "\n", "print", "(", "f\"please download the dataset from {url} with the following folder structure\"", ")", "\n", "print", "(", "\n", "\"\"\"\n                    rootdir\n                        \u2514\u2500\u2500 sequences/\n                            \u251c\u2500\u2500 00/\n                            \u2502   \u251c\u2500\u2500 labels/\n                            \u2502   \u2502     \u251c 000000.label\n                            \u2502   \u2502     \u2514 000001.label\n                            \u2502   \u2514\u2500\u2500 velodyne/\n                            \u2502         \u251c 000000.bin\n                            \u2502         \u2514 000001.bin\n                            \u251c\u2500\u2500 01/\n                            \u251c\u2500\u2500 02/\n                            .\n                            .\n                            .\n                          \n                            \u2514\u2500\u2500 21/\n                \"\"\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti._remap_labels": [[184, 193], ["semantic_label.clone", "semantickitti.SemanticKitti.REMAPPING_MAP.items"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.clone"], ["", "", "def", "_remap_labels", "(", "self", ",", "semantic_label", ")", ":", "\n", "        ", "\"\"\" Remaps labels to [0 ; num_labels -1]. Can be overriden.\n        \"\"\"", "\n", "new_labels", "=", "semantic_label", ".", "clone", "(", ")", "\n", "for", "source", ",", "target", "in", "self", ".", "REMAPPING_MAP", ".", "items", "(", ")", ":", "\n", "            ", "mask", "=", "semantic_label", "==", "source", "\n", "new_labels", "[", "mask", "]", "=", "target", "\n", "\n", "", "return", "new_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.num_classes": [[194, 197], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_classes", "(", "self", ")", ":", "\n", "        ", "return", "19", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKittiDataset.__init__": [[212, 237], ["torch_points3d.datasets.base_dataset.BaseDataset.__init__", "semantickitti.SemanticKitti", "semantickitti.SemanticKitti", "semantickitti.SemanticKitti"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["def", "__init__", "(", "self", ",", "dataset_opt", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dataset_opt", ")", "\n", "process_workers", ":", "int", "=", "dataset_opt", ".", "process_workers", "if", "dataset_opt", ".", "process_workers", "else", "0", "\n", "self", ".", "train_dataset", "=", "SemanticKitti", "(", "\n", "self", ".", "_data_path", ",", "\n", "split", "=", "\"train\"", ",", "\n", "transform", "=", "self", ".", "train_transform", ",", "\n", "pre_transform", "=", "self", ".", "pre_transform", ",", "\n", "process_workers", "=", "process_workers", ",", "\n", ")", "\n", "\n", "self", ".", "val_dataset", "=", "SemanticKitti", "(", "\n", "self", ".", "_data_path", ",", "\n", "split", "=", "\"val\"", ",", "\n", "transform", "=", "self", ".", "val_transform", ",", "\n", "pre_transform", "=", "self", ".", "pre_transform", ",", "\n", "process_workers", "=", "process_workers", ",", "\n", ")", "\n", "\n", "self", ".", "test_dataset", "=", "SemanticKitti", "(", "\n", "self", ".", "_data_path", ",", "\n", "split", "=", "\"test\"", ",", "\n", "transform", "=", "self", ".", "test_transform", ",", "\n", "pre_transform", "=", "self", ".", "pre_transform", ",", "\n", "process_workers", "=", "process_workers", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKittiDataset.get_tracker": [[239, 248], ["torch_points3d.metrics.segmentation_tracker.SegmentationTracker"], "methods", ["None"], ["", "def", "get_tracker", "(", "self", ",", "wandb_log", ":", "bool", ",", "tensorboard_log", ":", "bool", ")", ":", "\n", "        ", "\"\"\"Factory method for the tracker\n        Arguments:\n            wandb_log - Log using weight and biases\n            tensorboard_log - Log using tensorboard\n        Returns:\n            [BaseTracker] -- tracker\n        \"\"\"", "\n", "return", "SegmentationTracker", "(", "self", ",", "wandb_log", "=", "wandb_log", ",", "use_tensorboard", "=", "tensorboard_log", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.s3dis.S3DIS1x1Dataset.__init__": [[195, 215], ["torch_points3d.datasets.base_dataset.BaseDataset.__init__", "torch_geometric.datasets.S3DIS", "torch_geometric.datasets.S3DIS", "s3dis.S3DIS1x1Dataset.add_weights"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.base_dataset.BaseDataset.add_weights"], ["    ", "def", "__init__", "(", "self", ",", "dataset_opt", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dataset_opt", ")", "\n", "\n", "pre_transform", "=", "self", ".", "pre_transform", "\n", "self", ".", "train_dataset", "=", "S3DIS1x1", "(", "\n", "self", ".", "_data_path", ",", "\n", "test_area", "=", "self", ".", "dataset_opt", ".", "fold", ",", "\n", "train", "=", "True", ",", "\n", "pre_transform", "=", "self", ".", "pre_transform", ",", "\n", "transform", "=", "self", ".", "train_transform", ",", "\n", ")", "\n", "self", ".", "test_dataset", "=", "S3DIS1x1", "(", "\n", "self", ".", "_data_path", ",", "\n", "test_area", "=", "self", ".", "dataset_opt", ".", "fold", ",", "\n", "train", "=", "False", ",", "\n", "pre_transform", "=", "pre_transform", ",", "\n", "transform", "=", "self", ".", "test_transform", ",", "\n", ")", "\n", "if", "dataset_opt", ".", "class_weight_method", ":", "\n", "            ", "self", ".", "add_weights", "(", "class_weight_method", "=", "dataset_opt", ".", "class_weight_method", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.s3dis.S3DIS1x1Dataset.get_tracker": [[216, 228], ["SegmentationTracker"], "methods", ["None"], ["", "", "def", "get_tracker", "(", "self", ",", "wandb_log", ":", "bool", ",", "tensorboard_log", ":", "bool", ")", ":", "\n", "        ", "\"\"\"Factory method for the tracker\n\n        Arguments:\n            wandb_log - Log using weight and biases\n            tensorboard_log - Log using tensorboard\n        Returns:\n            [BaseTracker] -- tracker\n        \"\"\"", "\n", "from", "torch_points3d", ".", "metrics", ".", "segmentation_tracker", "import", "SegmentationTracker", "\n", "\n", "return", "SegmentationTracker", "(", "self", ",", "wandb_log", "=", "wandb_log", ",", "use_tensorboard", "=", "tensorboard_log", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.s3dis.S3DISOriginalFused.__init__": [[267, 294], ["torch_geometric.data.InMemoryDataset.__init__", "s3dis.S3DISOriginalFused._load_data", "torch.load", "ValueError"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis_area5_office40.S3DISSphereMM._load_data", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load"], ["def", "__init__", "(", "\n", "self", ",", "root", ",", "test_area", "=", "6", ",", "split", "=", "\"train\"", ",", "transform", "=", "None", ",", "\n", "pre_transform", "=", "None", ",", "pre_collate_transform", "=", "None", ",", "pre_filter", "=", "None", ",", "\n", "keep_instance", "=", "False", ",", "verbose", "=", "False", ",", "debug", "=", "False", ")", ":", "\n", "        ", "assert", "test_area", ">=", "1", "and", "test_area", "<=", "6", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "pre_collate_transform", "=", "pre_collate_transform", "\n", "self", ".", "test_area", "=", "test_area", "\n", "self", ".", "keep_instance", "=", "keep_instance", "\n", "self", ".", "verbose", "=", "verbose", "\n", "self", ".", "debug", "=", "debug", "\n", "self", ".", "_split", "=", "split", "\n", "super", "(", "S3DISOriginalFused", ",", "self", ")", ".", "__init__", "(", "root", ",", "transform", ",", "pre_transform", ",", "pre_filter", ")", "\n", "if", "split", "==", "\"train\"", ":", "\n", "            ", "path", "=", "self", ".", "processed_paths", "[", "0", "]", "\n", "", "elif", "split", "==", "\"val\"", ":", "\n", "            ", "path", "=", "self", ".", "processed_paths", "[", "1", "]", "\n", "", "elif", "split", "==", "\"test\"", ":", "\n", "            ", "path", "=", "self", ".", "processed_paths", "[", "2", "]", "\n", "", "elif", "split", "==", "\"trainval\"", ":", "\n", "            ", "path", "=", "self", ".", "processed_paths", "[", "3", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "(", "f\"Split {split} found, but expected either \"", "\"train, val, trainval or test\"", ")", ")", "\n", "", "self", ".", "_load_data", "(", "path", ")", "\n", "\n", "if", "split", "==", "\"test\"", ":", "\n", "            ", "self", ".", "raw_test_data", "=", "torch", ".", "load", "(", "self", ".", "raw_areas_paths", "[", "test_area", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.s3dis.S3DISOriginalFused.center_labels": [[295, 301], ["hasattr"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "center_labels", "(", "self", ")", ":", "\n", "        ", "if", "hasattr", "(", "self", ".", "data", ",", "\"center_label\"", ")", ":", "\n", "            ", "return", "self", ".", "data", ".", "center_label", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.s3dis.S3DISOriginalFused.raw_file_names": [[302, 305], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "raw_file_names", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "folders", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.s3dis.S3DISOriginalFused.pre_processed_path": [[306, 310], ["os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["None"], ["", "@", "property", "\n", "def", "pre_processed_path", "(", "self", ")", ":", "\n", "        ", "pre_processed_file_names", "=", "\"preprocessed.pt\"", "\n", "return", "os", ".", "path", ".", "join", "(", "self", ".", "processed_dir", ",", "pre_processed_file_names", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.s3dis.S3DISOriginalFused.raw_areas_paths": [[311, 314], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "range"], "methods", ["None"], ["", "@", "property", "\n", "def", "raw_areas_paths", "(", "self", ")", ":", "\n", "        ", "return", "[", "os", ".", "path", ".", "join", "(", "self", ".", "processed_dir", ",", "\"raw_area_%i.pt\"", "%", "i", ")", "for", "i", "in", "range", "(", "6", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.s3dis.S3DISOriginalFused.processed_file_names": [[315, 322], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "processed_file_names", "(", "self", ")", ":", "\n", "        ", "test_area", "=", "self", ".", "test_area", "\n", "return", "(", "\n", "[", "\"{}_{}.pt\"", ".", "format", "(", "s", ",", "test_area", ")", "for", "s", "in", "[", "\"train\"", ",", "\"val\"", ",", "\"test\"", ",", "\"trainval\"", "]", "]", "\n", "+", "self", ".", "raw_areas_paths", "\n", "+", "[", "self", ".", "pre_processed_path", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.s3dis.S3DISOriginalFused.raw_test_data": [[328, 331], ["None"], "methods", ["None"], ["", "@", "raw_test_data", ".", "setter", "\n", "def", "raw_test_data", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_raw_test_data", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.s3dis.S3DISOriginalFused.download": [[332, 356], ["os.listdir", "os.listdir", "os.listdir", "os.listdir", "len", "torch_geometric.data.extract_zip", "shutil.rmtree", "os.rename", "os.rename", "os.rename", "os.rename", "shutil.copy", "os.system", "os.system", "os.system", "os.system", "len", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "log.info", "log.info", "log.info", "log.info", "input", "gdown.download", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.join", "os.join", "os.join", "os.join", "set().intersection", "shutil.rmtree", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "s3dis.S3DISOriginalFused.download", "os.join", "os.join", "os.join", "os.join", "set", "set"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.classification.modelnet.SampledModelNet.download", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.makedirs", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.makedirs", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.makedirs", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.makedirs", "home.repos.pwc.inspect_result.drprojects_deepviewagg.classification.modelnet.SampledModelNet.download"], ["", "def", "download", "(", "self", ")", ":", "\n", "        ", "raw_folders", "=", "os", ".", "listdir", "(", "self", ".", "raw_dir", ")", "\n", "if", "len", "(", "raw_folders", ")", "==", "0", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "exists", "(", "osp", ".", "join", "(", "self", ".", "root", ",", "self", ".", "zip_name", ")", ")", ":", "\n", "                ", "log", ".", "info", "(", "\"WARNING: You are downloading S3DIS dataset\"", ")", "\n", "log", ".", "info", "(", "\"Please, register yourself by filling up the form at {}\"", ".", "format", "(", "self", ".", "form_url", ")", ")", "\n", "log", ".", "info", "(", "\"***\"", ")", "\n", "log", ".", "info", "(", "\n", "\"Press any key to continue, or CTRL-C to exit. By continuing, you confirm filling up the form.\"", "\n", ")", "\n", "input", "(", "\"\"", ")", "\n", "gdown", ".", "download", "(", "self", ".", "download_url", ",", "osp", ".", "join", "(", "self", ".", "root", ",", "self", ".", "zip_name", ")", ",", "quiet", "=", "False", ")", "\n", "", "extract_zip", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "zip_name", ")", ",", "self", ".", "root", ")", "\n", "shutil", ".", "rmtree", "(", "self", ".", "raw_dir", ")", "\n", "os", ".", "rename", "(", "osp", ".", "join", "(", "self", ".", "root", ",", "self", ".", "file_name", ")", ",", "self", ".", "raw_dir", ")", "\n", "shutil", ".", "copy", "(", "self", ".", "path_file", ",", "self", ".", "raw_dir", ")", "\n", "cmd", "=", "\"patch -ruN -p0 -d  {} < {}\"", ".", "format", "(", "self", ".", "raw_dir", ",", "osp", ".", "join", "(", "self", ".", "raw_dir", ",", "\"s3dis.patch\"", ")", ")", "\n", "os", ".", "system", "(", "cmd", ")", "\n", "", "else", ":", "\n", "            ", "intersection", "=", "len", "(", "set", "(", "self", ".", "folders", ")", ".", "intersection", "(", "set", "(", "raw_folders", ")", ")", ")", "\n", "if", "intersection", "!=", "6", ":", "\n", "                ", "shutil", ".", "rmtree", "(", "self", ".", "raw_dir", ")", "\n", "os", ".", "makedirs", "(", "self", ".", "raw_dir", ")", "\n", "self", ".", "download", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.s3dis.S3DISOriginalFused.process": [[357, 465], ["range", "list", "list", "list", "s3dis.S3DISOriginalFused._save_data", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "tqdm.auto.tqdm.auto.tqdm", "enumerate", "torch.save", "torch.load", "s3dis.S3DISOriginalFused.values", "s3dis.S3DISOriginalFused.values", "s3dis.S3DISOriginalFused.values", "log.info", "log.info", "s3dis.S3DISOriginalFused.pre_collate_transform", "s3dis.S3DISOriginalFused.pre_collate_transform", "s3dis.S3DISOriginalFused.pre_collate_transform", "s3dis.S3DISOriginalFused.pre_collate_transform", "numpy.zeros", "torch_points3d.PointCloudFusion", "torch.save", "os.join", "os.join", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.path.isdir", "os.path.isdir", "os.path.isdir", "os.path.isdir", "os.join", "os.join", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.path.isdir", "os.path.isdir", "os.path.isdir", "os.path.isdir", "range", "int", "int", "s3dis.read_s3dis_format", "s3dis.read_s3dis_format", "torch_geometric.data.Data", "data_list[].append", "str", "str", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "print", "rgb.float", "s3dis.S3DISOriginalFused.pre_transform", "val_data_list[].append", "train_data_list[].append", "area.split", "s3dis.S3DISOriginalFused.pre_filter", "xyz[].max", "xyz[].min"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.s3dis.S3DISSphere._save_data", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.s3dis.read_s3dis_format", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.s3dis.read_s3dis_format", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.split"], ["", "", "", "def", "process", "(", "self", ")", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "pre_processed_path", ")", ":", "\n", "            ", "train_areas", "=", "[", "f", "for", "f", "in", "self", ".", "folders", "if", "str", "(", "self", ".", "test_area", ")", "not", "in", "f", "]", "\n", "test_areas", "=", "[", "f", "for", "f", "in", "self", ".", "folders", "if", "str", "(", "self", ".", "test_area", ")", "in", "f", "]", "\n", "\n", "train_files", "=", "[", "\n", "(", "f", ",", "room_name", ",", "osp", ".", "join", "(", "self", ".", "raw_dir", ",", "f", ",", "room_name", ")", ")", "\n", "for", "f", "in", "train_areas", "\n", "for", "room_name", "in", "os", ".", "listdir", "(", "osp", ".", "join", "(", "self", ".", "raw_dir", ",", "f", ")", ")", "\n", "if", "os", ".", "path", ".", "isdir", "(", "osp", ".", "join", "(", "self", ".", "raw_dir", ",", "f", ",", "room_name", ")", ")", "\n", "]", "\n", "\n", "test_files", "=", "[", "\n", "(", "f", ",", "room_name", ",", "osp", ".", "join", "(", "self", ".", "raw_dir", ",", "f", ",", "room_name", ")", ")", "\n", "for", "f", "in", "test_areas", "\n", "for", "room_name", "in", "os", ".", "listdir", "(", "osp", ".", "join", "(", "self", ".", "raw_dir", ",", "f", ")", ")", "\n", "if", "os", ".", "path", ".", "isdir", "(", "osp", ".", "join", "(", "self", ".", "raw_dir", ",", "f", ",", "room_name", ")", ")", "\n", "]", "\n", "\n", "# Gather data per area", "\n", "data_list", "=", "[", "[", "]", "for", "_", "in", "range", "(", "6", ")", "]", "\n", "if", "self", ".", "debug", ":", "\n", "                ", "areas", "=", "np", ".", "zeros", "(", "7", ")", "\n", "", "for", "(", "area", ",", "room_name", ",", "file_path", ")", "in", "tq", "(", "train_files", "+", "test_files", ")", ":", "\n", "                ", "if", "self", ".", "debug", ":", "\n", "                    ", "area_idx", "=", "int", "(", "area", ".", "split", "(", "\"_\"", ")", "[", "-", "1", "]", ")", "\n", "if", "areas", "[", "area_idx", "]", "==", "5", ":", "\n", "                        ", "continue", "\n", "", "else", ":", "\n", "                        ", "print", "(", "area_idx", ")", "\n", "areas", "[", "area_idx", "]", "+=", "1", "\n", "\n", "", "", "area_num", "=", "int", "(", "area", "[", "-", "1", "]", ")", "-", "1", "\n", "if", "self", ".", "debug", ":", "\n", "                    ", "read_s3dis_format", "(", "file_path", ",", "room_name", ",", "label_out", "=", "True", ",", "verbose", "=", "self", ".", "verbose", ",", "debug", "=", "self", ".", "debug", ")", "\n", "continue", "\n", "", "else", ":", "\n", "                    ", "xyz", ",", "rgb", ",", "semantic_labels", ",", "instance_labels", ",", "room_label", "=", "read_s3dis_format", "(", "\n", "file_path", ",", "room_name", ",", "label_out", "=", "True", ",", "verbose", "=", "self", ".", "verbose", ",", "debug", "=", "self", ".", "debug", "\n", ")", "\n", "\n", "# Room orientation correction", "\n", "# 2 rooms need to be rotated by 180\u00b0 around Z: Area_2/hallway_11 and Area_5/hallway_6", "\n", "if", "(", "area_num", "==", "1", "and", "room_name", "==", "'hallway_11'", ")", "or", "(", "area_num", "==", "4", "and", "room_name", "==", "'hallway_6'", ")", ":", "\n", "                        ", "xy_center", "=", "(", "xyz", "[", ":", ",", "0", ":", "2", "]", ".", "max", "(", "dim", "=", "0", ")", "[", "0", "]", "+", "xyz", "[", ":", ",", "0", ":", "2", "]", ".", "min", "(", "dim", "=", "0", ")", "[", "0", "]", ")", "/", "2", "\n", "xyz", "[", ":", ",", "0", ":", "2", "]", "=", "2", "*", "xy_center", "-", "xyz", "[", ":", ",", "0", ":", "2", "]", "# equivalent to 180\u00b0 Z-rotation around the XY-center", "\n", "\n", "", "rgb_norm", "=", "rgb", ".", "float", "(", ")", "/", "255.0", "\n", "data", "=", "Data", "(", "pos", "=", "xyz", ",", "y", "=", "semantic_labels", ",", "rgb", "=", "rgb_norm", ")", "\n", "if", "room_name", "in", "VALIDATION_ROOMS", ":", "\n", "                        ", "data", ".", "validation_set", "=", "True", "\n", "", "else", ":", "\n", "                        ", "data", ".", "validation_set", "=", "False", "\n", "\n", "", "if", "self", ".", "keep_instance", ":", "\n", "                        ", "data", ".", "instance_labels", "=", "instance_labels", "\n", "\n", "", "if", "self", ".", "pre_filter", "is", "not", "None", "and", "not", "self", ".", "pre_filter", "(", "data", ")", ":", "\n", "                        ", "continue", "\n", "\n", "", "data_list", "[", "area_num", "]", ".", "append", "(", "data", ")", "\n", "\n", "", "", "raw_areas", "=", "cT", ".", "PointCloudFusion", "(", ")", "(", "data_list", ")", "\n", "for", "i", ",", "area", "in", "enumerate", "(", "raw_areas", ")", ":", "\n", "                ", "torch", ".", "save", "(", "area", ",", "self", ".", "raw_areas_paths", "[", "i", "]", ")", "\n", "\n", "", "for", "area_datas", "in", "data_list", ":", "\n", "# Apply pre_transform", "\n", "                ", "if", "self", ".", "pre_transform", "is", "not", "None", ":", "\n", "                    ", "for", "data", "in", "area_datas", ":", "\n", "                        ", "data", "=", "self", ".", "pre_transform", "(", "data", ")", "\n", "", "", "", "torch", ".", "save", "(", "data_list", ",", "self", ".", "pre_processed_path", ")", "\n", "", "else", ":", "\n", "            ", "data_list", "=", "torch", ".", "load", "(", "self", ".", "pre_processed_path", ")", "\n", "\n", "", "if", "self", ".", "debug", ":", "\n", "            ", "return", "\n", "\n", "", "train_data_list", "=", "{", "}", "\n", "val_data_list", "=", "{", "}", "\n", "trainval_data_list", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "6", ")", ":", "\n", "            ", "if", "i", "!=", "self", ".", "test_area", "-", "1", ":", "\n", "                ", "train_data_list", "[", "i", "]", "=", "[", "]", "\n", "val_data_list", "[", "i", "]", "=", "[", "]", "\n", "for", "data", "in", "data_list", "[", "i", "]", ":", "\n", "                    ", "validation_set", "=", "data", ".", "validation_set", "\n", "del", "data", ".", "validation_set", "\n", "if", "validation_set", ":", "\n", "                        ", "val_data_list", "[", "i", "]", ".", "append", "(", "data", ")", "\n", "", "else", ":", "\n", "                        ", "train_data_list", "[", "i", "]", ".", "append", "(", "data", ")", "\n", "", "", "trainval_data_list", "[", "i", "]", "=", "val_data_list", "[", "i", "]", "+", "train_data_list", "[", "i", "]", "\n", "\n", "", "", "train_data_list", "=", "list", "(", "train_data_list", ".", "values", "(", ")", ")", "\n", "val_data_list", "=", "list", "(", "val_data_list", ".", "values", "(", ")", ")", "\n", "trainval_data_list", "=", "list", "(", "trainval_data_list", ".", "values", "(", ")", ")", "\n", "test_data_list", "=", "data_list", "[", "self", ".", "test_area", "-", "1", "]", "\n", "\n", "if", "self", ".", "pre_collate_transform", ":", "\n", "            ", "log", ".", "info", "(", "\"pre_collate_transform ...\"", ")", "\n", "log", ".", "info", "(", "self", ".", "pre_collate_transform", ")", "\n", "train_data_list", "=", "self", ".", "pre_collate_transform", "(", "train_data_list", ")", "\n", "val_data_list", "=", "self", ".", "pre_collate_transform", "(", "val_data_list", ")", "\n", "test_data_list", "=", "self", ".", "pre_collate_transform", "(", "test_data_list", ")", "\n", "trainval_data_list", "=", "self", ".", "pre_collate_transform", "(", "trainval_data_list", ")", "\n", "\n", "", "self", ".", "_save_data", "(", "train_data_list", ",", "val_data_list", ",", "test_data_list", ",", "trainval_data_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.s3dis.S3DISOriginalFused._save_data": [[466, 473], ["torch.save", "torch.save", "torch.save", "torch.save", "s3dis.S3DISOriginalFused.collate", "s3dis.S3DISOriginalFused.collate", "s3dis.S3DISOriginalFused.collate", "s3dis.S3DISOriginalFused.collate"], "methods", ["None"], ["", "def", "_save_data", "(", "\n", "self", ",", "train_data_list", ",", "val_data_list", ",", "test_data_list", ",", "\n", "trainval_data_list", ")", ":", "\n", "        ", "torch", ".", "save", "(", "self", ".", "collate", "(", "train_data_list", ")", ",", "self", ".", "processed_paths", "[", "0", "]", ")", "\n", "torch", ".", "save", "(", "self", ".", "collate", "(", "val_data_list", ")", ",", "self", ".", "processed_paths", "[", "1", "]", ")", "\n", "torch", ".", "save", "(", "self", ".", "collate", "(", "test_data_list", ")", ",", "self", ".", "processed_paths", "[", "2", "]", ")", "\n", "torch", ".", "save", "(", "self", ".", "collate", "(", "trainval_data_list", ")", ",", "self", ".", "processed_paths", "[", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.s3dis.S3DISOriginalFused._load_data": [[474, 476], ["torch.load"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load"], ["", "def", "_load_data", "(", "self", ",", "path", ")", ":", "\n", "        ", "self", ".", "data", ",", "self", ".", "slices", "=", "torch", ".", "load", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.s3dis.S3DISOriginalFused.indices": [[482, 489], ["pyg.__version__.split", "super().indices", "int", "int", "range", "len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.split", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis_area5_office40.S3DISOriginalFusedMM.indices", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "def", "indices", "(", "self", ")", ":", "\n", "        ", "import", "torch_geometric", "as", "pyg", "\n", "version", "=", "pyg", ".", "__version__", ".", "split", "(", "'.'", ")", "\n", "is_new_pyg", "=", "int", "(", "version", "[", "0", "]", ")", ">=", "2", "or", "int", "(", "version", "[", "1", "]", ")", ">=", "7", "\n", "if", "is_new_pyg", ":", "\n", "            ", "return", "range", "(", "len", "(", "self", ")", ")", "if", "self", ".", "_indices", "is", "None", "else", "self", ".", "_indices", "\n", "", "return", "super", "(", ")", ".", "indices", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.s3dis.S3DISSphere.__init__": [[529, 537], ["torch_points3d.GridSampling3D", "s3dis.S3DISOriginalFused.__init__"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["def", "__init__", "(", "\n", "self", ",", "root", ",", "*", "args", ",", "sample_per_epoch", "=", "100", ",", "radius", "=", "2", ",", "sample_res", "=", "2", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_sample_per_epoch", "=", "sample_per_epoch", "\n", "self", ".", "_sample_res", "=", "sample_res", "\n", "self", ".", "_radius", "=", "radius", "\n", "self", ".", "_grid_sphere_sampling", "=", "cT", ".", "GridSampling3D", "(", "size", "=", "sample_res", ")", "\n", "super", "(", ")", ".", "__init__", "(", "root", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.s3dis.S3DISSphere.__len__": [[538, 543], ["len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_sample_per_epoch", ">", "0", ":", "\n", "            ", "return", "self", ".", "_sample_per_epoch", "\n", "", "else", ":", "\n", "            ", "return", "len", "(", "self", ".", "_test_spheres", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.s3dis.S3DISSphere.get": [[544, 549], ["s3dis.S3DISSphere._get_random", "s3dis.S3DISSphere._test_spheres[].clone"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis_area5_office40.S3DISSphereMM._get_random", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.clone"], ["", "", "def", "get", "(", "self", ",", "idx", ")", ":", "\n", "        ", "if", "self", ".", "_sample_per_epoch", ">", "0", ":", "\n", "            ", "return", "self", ".", "_get_random", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "_test_spheres", "[", "idx", "]", ".", "clone", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.s3dis.S3DISSphere.process": [[550, 552], ["s3dis.S3DISOriginalFused.process"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.classification.modelnet.SampledModelNet.process"], ["", "", "def", "process", "(", "self", ")", ":", "# We have to include this method, otherwise the parent class skips processing", "\n", "        ", "super", "(", ")", ".", "process", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.s3dis.S3DISSphere.download": [[553, 555], ["s3dis.S3DISOriginalFused.download"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.classification.modelnet.SampledModelNet.download"], ["", "def", "download", "(", "self", ")", ":", "# We have to include this method, otherwise the parent class skips download", "\n", "        ", "super", "(", ")", ".", "download", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.s3dis.S3DISSphere._get_random": [[556, 565], ["numpy.random.choice", "int", "torch_points3d.SphereSampling", "torch_points3d.SphereSampling.", "random.random", "centre[].int"], "methods", ["None"], ["", "def", "_get_random", "(", "self", ")", ":", "\n", "# Random spheres biased towards getting more low frequency classes", "\n", "        ", "chosen_label", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "_labels", ",", "p", "=", "self", ".", "_label_counts", ")", "\n", "valid_centres", "=", "self", ".", "_centres_for_sampling", "[", "self", ".", "_centres_for_sampling", "[", ":", ",", "4", "]", "==", "chosen_label", "]", "\n", "centre_idx", "=", "int", "(", "random", ".", "random", "(", ")", "*", "(", "valid_centres", ".", "shape", "[", "0", "]", "-", "1", ")", ")", "\n", "centre", "=", "valid_centres", "[", "centre_idx", "]", "\n", "area_data", "=", "self", ".", "_datas", "[", "centre", "[", "3", "]", ".", "int", "(", ")", "]", "\n", "sphere_sampler", "=", "cT", ".", "SphereSampling", "(", "self", ".", "_radius", ",", "centre", "[", ":", "3", "]", ",", "align_origin", "=", "False", ")", "\n", "return", "sphere_sampler", "(", "area_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.s3dis.S3DISSphere._save_data": [[566, 573], ["torch.save", "torch.save", "torch.save", "torch.save"], "methods", ["None"], ["", "def", "_save_data", "(", "\n", "self", ",", "train_data_list", ",", "val_data_list", ",", "test_data_list", ",", "\n", "trainval_data_list", ")", ":", "\n", "        ", "torch", ".", "save", "(", "train_data_list", ",", "self", ".", "processed_paths", "[", "0", "]", ")", "\n", "torch", ".", "save", "(", "val_data_list", ",", "self", ".", "processed_paths", "[", "1", "]", ")", "\n", "torch", ".", "save", "(", "test_data_list", ",", "self", ".", "processed_paths", "[", "2", "]", ")", "\n", "torch", ".", "save", "(", "trainval_data_list", ",", "self", ".", "processed_paths", "[", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.s3dis.S3DISSphere._load_data": [[574, 602], ["torch.load", "isinstance", "enumerate", "torch.cat", "numpy.unique", "numpy.sqrt", "torch_points3d.GridSphereSampling", "torch_points3d.GridSphereSampling.", "s3dis.S3DISSphere._grid_sphere_sampling", "torch.empty", "s3dis.S3DISSphere._centres_for_sampling.append", "sklearn.neighbors.KDTree", "setattr", "numpy.asarray", "numpy.sum", "hasattr", "data.clone", "numpy.asarray", "numpy.sqrt.mean"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.clone", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.lovasz_loss.mean"], ["", "def", "_load_data", "(", "self", ",", "path", ")", ":", "\n", "        ", "self", ".", "_datas", "=", "torch", ".", "load", "(", "path", ")", "\n", "if", "not", "isinstance", "(", "self", ".", "_datas", ",", "list", ")", ":", "\n", "            ", "self", ".", "_datas", "=", "[", "self", ".", "_datas", "]", "\n", "", "if", "self", ".", "_sample_per_epoch", ">", "0", ":", "\n", "            ", "self", ".", "_centres_for_sampling", "=", "[", "]", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "self", ".", "_datas", ")", ":", "\n", "                ", "assert", "not", "hasattr", "(", "\n", "data", ",", "cT", ".", "SphereSampling", ".", "KDTREE_KEY", "\n", ")", "# Just to make we don't have some out of date data in there", "\n", "low_res", "=", "self", ".", "_grid_sphere_sampling", "(", "data", ".", "clone", "(", ")", ")", "\n", "centres", "=", "torch", ".", "empty", "(", "(", "low_res", ".", "pos", ".", "shape", "[", "0", "]", ",", "5", ")", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "centres", "[", ":", ",", ":", "3", "]", "=", "low_res", ".", "pos", "\n", "centres", "[", ":", ",", "3", "]", "=", "i", "\n", "centres", "[", ":", ",", "4", "]", "=", "low_res", ".", "y", "\n", "self", ".", "_centres_for_sampling", ".", "append", "(", "centres", ")", "\n", "tree", "=", "KDTree", "(", "np", ".", "asarray", "(", "data", ".", "pos", ")", ",", "leaf_size", "=", "10", ")", "\n", "setattr", "(", "data", ",", "cT", ".", "SphereSampling", ".", "KDTREE_KEY", ",", "tree", ")", "\n", "\n", "", "self", ".", "_centres_for_sampling", "=", "torch", ".", "cat", "(", "self", ".", "_centres_for_sampling", ",", "0", ")", "\n", "uni", ",", "uni_counts", "=", "np", ".", "unique", "(", "np", ".", "asarray", "(", "self", ".", "_centres_for_sampling", "[", ":", ",", "-", "1", "]", ")", ",", "return_counts", "=", "True", ")", "\n", "uni_counts", "=", "np", ".", "sqrt", "(", "uni_counts", ".", "mean", "(", ")", "/", "uni_counts", ")", "\n", "self", ".", "_label_counts", "=", "uni_counts", "/", "np", ".", "sum", "(", "uni_counts", ")", "\n", "self", ".", "_labels", "=", "uni", "\n", "", "else", ":", "\n", "            ", "grid_sampler", "=", "cT", ".", "GridSphereSampling", "(", "\n", "self", ".", "_radius", ",", "grid_size", "=", "self", ".", "_sample_res", ",", "center", "=", "False", ")", "\n", "self", ".", "_test_spheres", "=", "grid_sampler", "(", "self", ".", "_datas", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.s3dis.S3DISCylinder._get_random": [[642, 651], ["numpy.random.choice", "int", "torch_points3d.CylinderSampling", "torch_points3d.CylinderSampling.", "random.random", "centre[].int"], "methods", ["None"], ["def", "_get_random", "(", "self", ")", ":", "\n", "# Random cylinders biased towards getting more low frequency classes", "\n", "        ", "chosen_label", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "_labels", ",", "p", "=", "self", ".", "_label_counts", ")", "\n", "valid_centres", "=", "self", ".", "_centres_for_sampling", "[", "self", ".", "_centres_for_sampling", "[", ":", ",", "4", "]", "==", "chosen_label", "]", "\n", "centre_idx", "=", "int", "(", "random", ".", "random", "(", ")", "*", "(", "valid_centres", ".", "shape", "[", "0", "]", "-", "1", ")", ")", "\n", "centre", "=", "valid_centres", "[", "centre_idx", "]", "\n", "area_data", "=", "self", ".", "_datas", "[", "centre", "[", "3", "]", ".", "int", "(", ")", "]", "\n", "cylinder_sampler", "=", "cT", ".", "CylinderSampling", "(", "self", ".", "_radius", ",", "centre", "[", ":", "3", "]", ",", "align_origin", "=", "False", ")", "\n", "return", "cylinder_sampler", "(", "area_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.s3dis.S3DISCylinder._load_data": [[652, 680], ["torch.load", "isinstance", "enumerate", "torch.cat", "numpy.unique", "numpy.sqrt", "torch_points3d.GridCylinderSampling", "torch_points3d.GridCylinderSampling.", "s3dis.S3DISCylinder._grid_sphere_sampling", "torch.empty", "s3dis.S3DISCylinder._centres_for_sampling.append", "sklearn.neighbors.KDTree", "setattr", "numpy.asarray", "numpy.sum", "hasattr", "data.clone", "numpy.asarray", "numpy.sqrt.mean"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.clone", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.lovasz_loss.mean"], ["", "def", "_load_data", "(", "self", ",", "path", ")", ":", "\n", "        ", "self", ".", "_datas", "=", "torch", ".", "load", "(", "path", ")", "\n", "if", "not", "isinstance", "(", "self", ".", "_datas", ",", "list", ")", ":", "\n", "            ", "self", ".", "_datas", "=", "[", "self", ".", "_datas", "]", "\n", "", "if", "self", ".", "_sample_per_epoch", ">", "0", ":", "\n", "            ", "self", ".", "_centres_for_sampling", "=", "[", "]", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "self", ".", "_datas", ")", ":", "\n", "                ", "assert", "not", "hasattr", "(", "\n", "data", ",", "cT", ".", "CylinderSampling", ".", "KDTREE_KEY", "\n", ")", "# Just to make we don't have some out of date data in there", "\n", "low_res", "=", "self", ".", "_grid_sphere_sampling", "(", "data", ".", "clone", "(", ")", ")", "\n", "centres", "=", "torch", ".", "empty", "(", "(", "low_res", ".", "pos", ".", "shape", "[", "0", "]", ",", "5", ")", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "centres", "[", ":", ",", ":", "3", "]", "=", "low_res", ".", "pos", "\n", "centres", "[", ":", ",", "3", "]", "=", "i", "\n", "centres", "[", ":", ",", "4", "]", "=", "low_res", ".", "y", "\n", "self", ".", "_centres_for_sampling", ".", "append", "(", "centres", ")", "\n", "tree", "=", "KDTree", "(", "np", ".", "asarray", "(", "data", ".", "pos", "[", ":", ",", ":", "-", "1", "]", ")", ",", "leaf_size", "=", "10", ")", "\n", "setattr", "(", "data", ",", "cT", ".", "CylinderSampling", ".", "KDTREE_KEY", ",", "tree", ")", "\n", "\n", "", "self", ".", "_centres_for_sampling", "=", "torch", ".", "cat", "(", "self", ".", "_centres_for_sampling", ",", "0", ")", "\n", "uni", ",", "uni_counts", "=", "np", ".", "unique", "(", "np", ".", "asarray", "(", "self", ".", "_centres_for_sampling", "[", ":", ",", "-", "1", "]", ")", ",", "return_counts", "=", "True", ")", "\n", "uni_counts", "=", "np", ".", "sqrt", "(", "uni_counts", ".", "mean", "(", ")", "/", "uni_counts", ")", "\n", "self", ".", "_label_counts", "=", "uni_counts", "/", "np", ".", "sum", "(", "uni_counts", ")", "\n", "self", ".", "_labels", "=", "uni", "\n", "", "else", ":", "\n", "            ", "grid_sampler", "=", "cT", ".", "GridCylinderSampling", "(", "\n", "self", ".", "_radius", ",", "grid_size", "=", "self", ".", "_sample_res", ",", "center", "=", "False", ")", "\n", "self", ".", "_test_spheres", "=", "grid_sampler", "(", "self", ".", "_datas", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.s3dis.S3DISFusedDataset.__init__": [[701, 745], ["torch_points3d.datasets.base_dataset.BaseDataset.__init__", "dataset_opt.get", "dataset_opt.get", "dataset_opt.get", "dataset_opt.get", "dataset_opt.get", "dataset_opt.get", "dataset_cls", "dataset_cls", "dataset_cls", "s3dis.S3DISFusedDataset.add_weights"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.base_dataset.BaseDataset.add_weights"], ["def", "__init__", "(", "self", ",", "dataset_opt", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dataset_opt", ")", "\n", "\n", "sampling_format", "=", "dataset_opt", ".", "get", "(", "\"sampling_format\"", ",", "\"sphere\"", ")", "\n", "dataset_cls", "=", "S3DISCylinder", "if", "sampling_format", "==", "\"cylinder\"", "else", "S3DISSphere", "\n", "sample_per_epoch", "=", "dataset_opt", ".", "get", "(", "'sample_per_epoch'", ",", "3000", ")", "\n", "radius", "=", "dataset_opt", ".", "get", "(", "'radius'", ",", "2", ")", "\n", "train_sample_res", "=", "dataset_opt", ".", "get", "(", "'train_sample_res'", ",", "radius", "/", "10", ")", "\n", "eval_sample_res", "=", "dataset_opt", ".", "get", "(", "'eval_sample_res'", ",", "radius", ")", "\n", "train_is_trainval", "=", "dataset_opt", ".", "get", "(", "'train_is_trainval'", ",", "False", ")", "\n", "\n", "self", ".", "train_dataset", "=", "dataset_cls", "(", "\n", "self", ".", "_data_path", ",", "\n", "sample_per_epoch", "=", "sample_per_epoch", ",", "\n", "radius", "=", "radius", ",", "\n", "sample_res", "=", "train_sample_res", ",", "\n", "test_area", "=", "self", ".", "dataset_opt", ".", "fold", ",", "\n", "split", "=", "\"train\"", "if", "not", "train_is_trainval", "else", "\"trainval\"", ",", "\n", "pre_collate_transform", "=", "self", ".", "pre_collate_transform", ",", "\n", "transform", "=", "self", ".", "train_transform", ")", "\n", "\n", "self", ".", "val_dataset", "=", "dataset_cls", "(", "\n", "self", ".", "_data_path", ",", "\n", "sample_per_epoch", "=", "-", "1", ",", "\n", "radius", "=", "radius", ",", "\n", "sample_res", "=", "eval_sample_res", ",", "\n", "test_area", "=", "self", ".", "dataset_opt", ".", "fold", ",", "\n", "split", "=", "\"val\"", ",", "\n", "pre_collate_transform", "=", "self", ".", "pre_collate_transform", ",", "\n", "transform", "=", "self", ".", "val_transform", ")", "\n", "\n", "self", ".", "test_dataset", "=", "dataset_cls", "(", "\n", "self", ".", "_data_path", ",", "\n", "sample_per_epoch", "=", "-", "1", ",", "\n", "radius", "=", "radius", ",", "\n", "sample_res", "=", "eval_sample_res", ",", "\n", "test_area", "=", "self", ".", "dataset_opt", ".", "fold", ",", "\n", "split", "=", "\"test\"", ",", "\n", "pre_collate_transform", "=", "self", ".", "pre_collate_transform", ",", "\n", "transform", "=", "self", ".", "test_transform", ")", "\n", "\n", "if", "dataset_opt", ".", "class_weight_method", ":", "\n", "            ", "self", ".", "add_weights", "(", "class_weight_method", "=", "dataset_opt", ".", "class_weight_method", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.s3dis.S3DISFusedDataset.test_data": [[746, 749], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "test_data", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "test_dataset", "[", "0", "]", ".", "raw_test_data", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.s3dis.S3DISFusedDataset.to_ply": [[750, 764], ["s3dis.S3DISFusedDataset.to_ply"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis_area5_office40.S3DISFusedDataset.to_ply"], ["", "@", "staticmethod", "\n", "def", "to_ply", "(", "pos", ",", "label", ",", "file", ")", ":", "\n", "        ", "\"\"\" Allows to save s3dis predictions to disk using s3dis color scheme\n\n        Parameters\n        ----------\n        pos : torch.Tensor\n            tensor that contains the positions of the points\n        label : torch.Tensor\n            predicted label\n        file : string\n            Save location\n        \"\"\"", "\n", "to_ply", "(", "pos", ",", "label", ",", "file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.s3dis.S3DISFusedDataset.get_tracker": [[765, 777], ["S3DISTracker"], "methods", ["None"], ["", "def", "get_tracker", "(", "self", ",", "wandb_log", ":", "bool", ",", "tensorboard_log", ":", "bool", ")", ":", "\n", "        ", "\"\"\"Factory method for the tracker\n\n        Arguments:\n            wandb_log - Log using weight and biases\n            tensorboard_log - Log using tensorboard\n        Returns:\n            [BaseTracker] -- tracker\n        \"\"\"", "\n", "from", "torch_points3d", ".", "metrics", ".", "s3dis_tracker", "import", "S3DISTracker", "\n", "\n", "return", "S3DISTracker", "(", "self", ",", "wandb_log", "=", "wandb_log", ",", "use_tensorboard", "=", "tensorboard_log", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.s3dis.object_name_to_label": [[106, 110], ["OBJECT_LABEL.get"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get"], ["def", "object_name_to_label", "(", "object_class", ")", ":", "\n", "    ", "\"\"\"convert from object name in S3DIS to an int\"\"\"", "\n", "object_label", "=", "OBJECT_LABEL", ".", "get", "(", "object_class", ",", "OBJECT_LABEL", "[", "\"clutter\"", "]", ")", "\n", "return", "object_label", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.s3dis.read_s3dis_format": [[112, 170], ["os.join", "room_name.split", "pandas.read_csv", "enumerate", "numpy.ascontiguousarray", "len", "sklearn.neighbors.NearestNeighbors().fit", "numpy.zeros", "numpy.asarray", "numpy.zeros", "glob.glob", "row[].split", "pandas.read_csv", "numpy.ascontiguousarray", "os.join", "s3dis.object_name_to_label", "NearestNeighbors().fit.kneighbors", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "len", "log.info", "numpy.zeros", "log.warning", "sklearn.neighbors.NearestNeighbors", "os.path.splitext", "os.path.splitext", "log.debug", "object_name.split", "pandas.read_csv", "float", "log.info", "os.path.basename", "os.path.basename", "str"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.split", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.split", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.s3dis.object_name_to_label", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageMapping.debug", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.split"], ["", "def", "read_s3dis_format", "(", "\n", "train_file", ",", "room_name", ",", "label_out", "=", "True", ",", "verbose", "=", "False", ",", "debug", "=", "False", ")", ":", "\n", "    ", "\"\"\"extract data from a room folder\"\"\"", "\n", "\n", "room_type", "=", "room_name", ".", "split", "(", "\"_\"", ")", "[", "0", "]", "\n", "room_label", "=", "ROOM_TYPES", "[", "room_type", "]", "\n", "raw_path", "=", "osp", ".", "join", "(", "train_file", ",", "\"{}.txt\"", ".", "format", "(", "room_name", ")", ")", "\n", "if", "debug", ":", "\n", "        ", "reader", "=", "pd", ".", "read_csv", "(", "raw_path", ",", "delimiter", "=", "\"\\n\"", ")", "\n", "RECOMMENDED", "=", "6", "\n", "for", "idx", ",", "row", "in", "enumerate", "(", "reader", ".", "values", ")", ":", "\n", "            ", "row", "=", "row", "[", "0", "]", ".", "split", "(", "\" \"", ")", "\n", "if", "len", "(", "row", ")", "!=", "RECOMMENDED", ":", "\n", "                ", "log", ".", "info", "(", "\"1: {} row {}: {}\"", ".", "format", "(", "raw_path", ",", "idx", ",", "row", ")", ")", "\n", "\n", "", "try", ":", "\n", "                ", "for", "r", "in", "row", ":", "\n", "                    ", "r", "=", "float", "(", "r", ")", "\n", "", "", "except", ":", "\n", "                ", "log", ".", "info", "(", "\"2: {} row {}: {}\"", ".", "format", "(", "raw_path", ",", "idx", ",", "row", ")", ")", "\n", "\n", "", "", "return", "True", "\n", "", "else", ":", "\n", "        ", "room_ver", "=", "pd", ".", "read_csv", "(", "raw_path", ",", "sep", "=", "\" \"", ",", "header", "=", "None", ")", ".", "values", "\n", "xyz", "=", "np", ".", "ascontiguousarray", "(", "room_ver", "[", ":", ",", "0", ":", "3", "]", ",", "dtype", "=", "\"float32\"", ")", "\n", "try", ":", "\n", "            ", "rgb", "=", "np", ".", "ascontiguousarray", "(", "room_ver", "[", ":", ",", "3", ":", "6", "]", ",", "dtype", "=", "\"uint8\"", ")", "\n", "", "except", "ValueError", ":", "\n", "            ", "rgb", "=", "np", ".", "zeros", "(", "(", "room_ver", ".", "shape", "[", "0", "]", ",", "3", ")", ",", "dtype", "=", "\"uint8\"", ")", "\n", "log", ".", "warning", "(", "\"WARN - corrupted rgb data for file %s\"", "%", "raw_path", ")", "\n", "", "if", "not", "label_out", ":", "\n", "            ", "return", "xyz", ",", "rgb", "\n", "", "n_ver", "=", "len", "(", "room_ver", ")", "\n", "del", "room_ver", "\n", "nn", "=", "NearestNeighbors", "(", "n_neighbors", "=", "1", ",", "algorithm", "=", "\"kd_tree\"", ")", ".", "fit", "(", "xyz", ")", "\n", "semantic_labels", "=", "np", ".", "zeros", "(", "(", "n_ver", ",", ")", ",", "dtype", "=", "\"int64\"", ")", "\n", "room_label", "=", "np", ".", "asarray", "(", "[", "room_label", "]", ")", "\n", "instance_labels", "=", "np", ".", "zeros", "(", "(", "n_ver", ",", ")", ",", "dtype", "=", "\"int64\"", ")", "\n", "objects", "=", "glob", ".", "glob", "(", "osp", ".", "join", "(", "train_file", ",", "\"Annotations/*.txt\"", ")", ")", "\n", "i_object", "=", "1", "\n", "for", "single_object", "in", "objects", ":", "\n", "            ", "object_name", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "single_object", ")", ")", "[", "0", "]", "\n", "if", "verbose", ":", "\n", "                ", "log", ".", "debug", "(", "\"adding object \"", "+", "str", "(", "i_object", ")", "+", "\" : \"", "+", "object_name", ")", "\n", "", "object_class", "=", "object_name", ".", "split", "(", "\"_\"", ")", "[", "0", "]", "\n", "object_label", "=", "object_name_to_label", "(", "object_class", ")", "\n", "obj_ver", "=", "pd", ".", "read_csv", "(", "single_object", ",", "sep", "=", "\" \"", ",", "header", "=", "None", ")", ".", "values", "\n", "_", ",", "obj_ind", "=", "nn", ".", "kneighbors", "(", "obj_ver", "[", ":", ",", "0", ":", "3", "]", ")", "\n", "semantic_labels", "[", "obj_ind", "]", "=", "object_label", "\n", "instance_labels", "[", "obj_ind", "]", "=", "i_object", "\n", "i_object", "=", "i_object", "+", "1", "\n", "\n", "", "return", "(", "\n", "torch", ".", "from_numpy", "(", "xyz", ")", ",", "\n", "torch", ".", "from_numpy", "(", "rgb", ")", ",", "\n", "torch", ".", "from_numpy", "(", "semantic_labels", ")", ",", "\n", "torch", ".", "from_numpy", "(", "instance_labels", ")", ",", "\n", "torch", ".", "from_numpy", "(", "room_label", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.s3dis.to_ply": [[173, 189], ["numpy.asarray", "numpy.ones", "plyfile.PlyElement.describe", "plyfile.PlyData().write", "len", "numpy.asarray", "plyfile.PlyData"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "", "def", "to_ply", "(", "pos", ",", "label", ",", "file", ")", ":", "\n", "    ", "assert", "len", "(", "label", ".", "shape", ")", "==", "1", "\n", "assert", "pos", ".", "shape", "[", "0", "]", "==", "label", ".", "shape", "[", "0", "]", "\n", "pos", "=", "np", ".", "asarray", "(", "pos", ")", "\n", "colors", "=", "OBJECT_COLOR", "[", "np", ".", "asarray", "(", "label", ")", "]", "\n", "ply_array", "=", "np", ".", "ones", "(", "\n", "pos", ".", "shape", "[", "0", "]", ",", "dtype", "=", "[", "(", "\"x\"", ",", "\"f4\"", ")", ",", "(", "\"y\"", ",", "\"f4\"", ")", ",", "(", "\"z\"", ",", "\"f4\"", ")", ",", "(", "\"red\"", ",", "\"u1\"", ")", ",", "(", "\"green\"", ",", "\"u1\"", ")", ",", "(", "\"blue\"", ",", "\"u1\"", ")", "]", "\n", ")", "\n", "ply_array", "[", "\"x\"", "]", "=", "pos", "[", ":", ",", "0", "]", "\n", "ply_array", "[", "\"y\"", "]", "=", "pos", "[", ":", ",", "1", "]", "\n", "ply_array", "[", "\"z\"", "]", "=", "pos", "[", ":", ",", "2", "]", "\n", "ply_array", "[", "\"red\"", "]", "=", "colors", "[", ":", ",", "0", "]", "\n", "ply_array", "[", "\"green\"", "]", "=", "colors", "[", ":", ",", "1", "]", "\n", "ply_array", "[", "\"blue\"", "]", "=", "colors", "[", ":", ",", "2", "]", "\n", "el", "=", "PlyElement", ".", "describe", "(", "ply_array", ",", "\"S3DIS\"", ")", "\n", "PlyData", "(", "[", "el", "]", ",", "byte_order", "=", "\">\"", ")", ".", "write", "(", "file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.shapenet.ShapeNet.__init__": [[100, 147], ["isinstance", "all", "torch_geometric.data.InMemoryDataset.__init__", "shapenet.ShapeNet.load_data", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "list", "shapenet.ShapeNet.load_data", "shapenet.ShapeNet.category_ids.keys", "ValueError"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.shapenet.ShapeNet.load_data", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.shapenet.ShapeNet.load_data", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.mock.MockDatasetConfig.keys"], ["def", "__init__", "(", "\n", "self", ",", "\n", "root", ",", "\n", "categories", "=", "None", ",", "\n", "include_normals", "=", "True", ",", "\n", "split", "=", "\"trainval\"", ",", "\n", "transform", "=", "None", ",", "\n", "pre_transform", "=", "None", ",", "\n", "pre_filter", "=", "None", ",", "\n", "is_test", "=", "False", ",", "\n", ")", ":", "\n", "        ", "if", "categories", "is", "None", ":", "\n", "            ", "categories", "=", "list", "(", "self", ".", "category_ids", ".", "keys", "(", ")", ")", "\n", "", "if", "isinstance", "(", "categories", ",", "str", ")", ":", "\n", "            ", "categories", "=", "[", "categories", "]", "\n", "", "assert", "all", "(", "category", "in", "self", ".", "category_ids", "for", "category", "in", "categories", ")", "\n", "self", ".", "categories", "=", "categories", "\n", "self", ".", "is_test", "=", "is_test", "\n", "super", "(", "ShapeNet", ",", "self", ")", ".", "__init__", "(", "\n", "root", ",", "transform", ",", "pre_transform", ",", "pre_filter", ")", "\n", "\n", "if", "split", "==", "\"train\"", ":", "\n", "            ", "path", "=", "self", ".", "processed_paths", "[", "0", "]", "\n", "raw_path", "=", "self", ".", "processed_raw_paths", "[", "0", "]", "\n", "", "elif", "split", "==", "\"val\"", ":", "\n", "            ", "path", "=", "self", ".", "processed_paths", "[", "1", "]", "\n", "raw_path", "=", "self", ".", "processed_raw_paths", "[", "1", "]", "\n", "", "elif", "split", "==", "\"test\"", ":", "\n", "            ", "path", "=", "self", ".", "processed_paths", "[", "2", "]", "\n", "raw_path", "=", "self", ".", "processed_raw_paths", "[", "2", "]", "\n", "", "elif", "split", "==", "\"trainval\"", ":", "\n", "            ", "path", "=", "self", ".", "processed_paths", "[", "3", "]", "\n", "raw_path", "=", "self", ".", "processed_raw_paths", "[", "3", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "(", "f\"Split {split} found, but expected either \"", "\"train, val, trainval or test\"", ")", ")", "\n", "\n", "", "self", ".", "data", ",", "self", ".", "slices", ",", "self", ".", "y_mask", "=", "self", ".", "load_data", "(", "\n", "path", ",", "include_normals", ")", "\n", "\n", "# We have perform a slighly optimzation on memory space of no pre-transform was used.", "\n", "# c.f self._process_filenames", "\n", "if", "os", ".", "path", ".", "exists", "(", "raw_path", ")", ":", "\n", "            ", "self", ".", "raw_data", ",", "self", ".", "raw_slices", ",", "_", "=", "self", ".", "load_data", "(", "\n", "raw_path", ",", "include_normals", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "get_raw_data", "=", "self", ".", "get", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.shapenet.ShapeNet.load_data": [[148, 160], ["torch.load", "torch.zeros", "enumerate", "shapenet.ShapeNet.seg_classes.values", "len", "shapenet.ShapeNet.seg_classes.keys"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.mock.MockDatasetConfig.keys"], ["", "", "def", "load_data", "(", "self", ",", "path", ",", "include_normals", ")", ":", "\n", "        ", "'''This function is used twice to load data for both raw and pre_transformed\n        '''", "\n", "data", ",", "slices", "=", "torch", ".", "load", "(", "path", ")", "\n", "data", ".", "x", "=", "data", ".", "x", "if", "include_normals", "else", "None", "\n", "\n", "y_mask", "=", "torch", ".", "zeros", "(", "\n", "(", "len", "(", "self", ".", "seg_classes", ".", "keys", "(", ")", ")", ",", "50", ")", ",", "dtype", "=", "torch", ".", "bool", ")", "\n", "for", "i", ",", "labels", "in", "enumerate", "(", "self", ".", "seg_classes", ".", "values", "(", ")", ")", ":", "\n", "            ", "y_mask", "[", "i", ",", "labels", "]", "=", "1", "\n", "\n", "", "return", "data", ",", "slices", ",", "y_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.shapenet.ShapeNet.raw_file_names": [[161, 164], ["list", "shapenet.ShapeNet.category_ids.values"], "methods", ["None"], ["", "@", "property", "\n", "def", "raw_file_names", "(", "self", ")", ":", "\n", "        ", "return", "list", "(", "self", ".", "category_ids", ".", "values", "(", ")", ")", "+", "[", "\"train_test_split\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.shapenet.ShapeNet.processed_raw_paths": [[165, 171], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "cat[].lower"], "methods", ["None"], ["", "@", "property", "\n", "def", "processed_raw_paths", "(", "self", ")", ":", "\n", "        ", "cats", "=", "\"_\"", ".", "join", "(", "[", "cat", "[", ":", "3", "]", ".", "lower", "(", ")", "for", "cat", "in", "self", ".", "categories", "]", ")", "\n", "processed_raw_paths", "=", "[", "os", ".", "path", ".", "join", "(", "self", ".", "processed_dir", ",", "\"raw_{}_{}\"", ".", "format", "(", "\n", "cats", ",", "s", ")", ")", "for", "s", "in", "[", "\"train\"", ",", "\"val\"", ",", "\"test\"", ",", "\"trainval\"", "]", "]", "\n", "return", "processed_raw_paths", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.shapenet.ShapeNet.processed_file_names": [[172, 176], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "cat[].lower"], "methods", ["None"], ["", "@", "property", "\n", "def", "processed_file_names", "(", "self", ")", ":", "\n", "        ", "cats", "=", "\"_\"", ".", "join", "(", "[", "cat", "[", ":", "3", "]", ".", "lower", "(", ")", "for", "cat", "in", "self", ".", "categories", "]", ")", "\n", "return", "[", "os", ".", "path", ".", "join", "(", "\"{}_{}.pt\"", ".", "format", "(", "cats", ",", "split", ")", ")", "for", "split", "in", "[", "\"train\"", ",", "\"val\"", ",", "\"test\"", ",", "\"trainval\"", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.shapenet.ShapeNet.download": [[177, 186], ["torch_points3d.utils.download.download_url", "torch_geometric.data.extract_zip", "os.unlink", "os.unlink", "os.unlink", "os.unlink", "shutil.rmtree", "os.rename", "os.rename", "os.rename", "os.rename", "[].split", "os.join", "os.join", "shapenet.ShapeNet.url.split"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.download.download_url", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.split", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.split"], ["", "def", "download", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "is_test", ":", "\n", "            ", "return", "\n", "", "path", "=", "download_url", "(", "self", ".", "url", ",", "self", ".", "root", ")", "\n", "extract_zip", "(", "path", ",", "self", ".", "root", ")", "\n", "os", ".", "unlink", "(", "path", ")", "\n", "shutil", ".", "rmtree", "(", "self", ".", "raw_dir", ")", "\n", "name", "=", "self", ".", "url", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ".", "split", "(", "\".\"", ")", "[", "0", "]", "\n", "os", ".", "rename", "(", "osp", ".", "join", "(", "self", ".", "root", ",", "name", ")", ",", "self", ".", "raw_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.shapenet.ShapeNet.get_raw_data": [[187, 206], ["shapenet.ShapeNet.raw_data.__class__", "hasattr", "torch.is_tensor", "slices[].item", "slices[].item", "list", "slice", "itertools.repeat", "slice", "slice", "item.dim", "shapenet.ShapeNet.raw_data.__cat_dim__"], "methods", ["None"], ["", "def", "get_raw_data", "(", "self", ",", "idx", ",", "**", "kwargs", ")", ":", "\n", "        ", "data", "=", "self", ".", "raw_data", ".", "__class__", "(", ")", "\n", "\n", "if", "hasattr", "(", "self", ".", "raw_data", ",", "'__num_nodes__'", ")", ":", "\n", "            ", "data", ".", "num_nodes", "=", "self", ".", "raw_data", ".", "__num_nodes__", "[", "idx", "]", "\n", "\n", "", "for", "key", "in", "self", ".", "raw_data", ".", "keys", ":", "\n", "            ", "item", ",", "slices", "=", "self", ".", "raw_data", "[", "key", "]", ",", "self", ".", "raw_slices", "[", "key", "]", "\n", "start", ",", "end", "=", "slices", "[", "idx", "]", ".", "item", "(", ")", ",", "slices", "[", "idx", "+", "1", "]", ".", "item", "(", ")", "\n", "# print(slices[idx], slices[idx + 1])", "\n", "if", "torch", ".", "is_tensor", "(", "item", ")", ":", "\n", "                ", "s", "=", "list", "(", "repeat", "(", "slice", "(", "None", ")", ",", "item", ".", "dim", "(", ")", ")", ")", "\n", "s", "[", "self", ".", "raw_data", ".", "__cat_dim__", "(", "key", ",", "item", ")", "]", "=", "slice", "(", "start", ",", "end", ")", "\n", "", "elif", "start", "+", "1", "==", "end", ":", "\n", "                ", "s", "=", "slices", "[", "start", "]", "\n", "", "else", ":", "\n", "                ", "s", "=", "slice", "(", "start", ",", "end", ")", "\n", "", "data", "[", "key", "]", "=", "item", "[", "s", "]", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.shapenet.ShapeNet._process_filenames": [[207, 239], ["tqdm.auto.tqdm.auto.tqdm", "torch_geometric.io.read_txt_array", "data[].type", "torch.from_numpy().clone", "torch_geometric.data.Data", "data_raw_list.append", "range", "name.split", "os.join", "os.join", "torch.ones", "torch_points3d.core.data_transform.SaveOriginalPosId", "shapenet.ShapeNet.pre_transform", "data_list.append", "len", "torch.from_numpy", "shapenet.ShapeNet.pre_filter", "shapenet.ShapeNet.clone", "numpy.asarray"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.clone", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.split", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.clone"], ["", "def", "_process_filenames", "(", "self", ",", "filenames", ")", ":", "\n", "        ", "data_raw_list", "=", "[", "]", "\n", "data_list", "=", "[", "]", "\n", "categories_ids", "=", "[", "self", ".", "category_ids", "[", "cat", "]", "for", "cat", "in", "self", ".", "categories", "]", "\n", "cat_idx", "=", "{", "categories_ids", "[", "i", "]", ":", "i", "for", "i", "in", "range", "(", "len", "(", "categories_ids", ")", ")", "}", "\n", "\n", "has_pre_transform", "=", "self", ".", "pre_transform", "is", "not", "None", "\n", "\n", "id_scan", "=", "-", "1", "\n", "for", "name", "in", "tq", "(", "filenames", ")", ":", "\n", "            ", "cat", "=", "name", ".", "split", "(", "osp", ".", "sep", ")", "[", "0", "]", "\n", "if", "cat", "not", "in", "categories_ids", ":", "\n", "                ", "continue", "\n", "", "id_scan", "+=", "1", "\n", "data", "=", "read_txt_array", "(", "osp", ".", "join", "(", "self", ".", "raw_dir", ",", "name", ")", ")", "\n", "pos", "=", "data", "[", ":", ",", ":", "3", "]", "\n", "x", "=", "data", "[", ":", ",", "3", ":", "6", "]", "\n", "y", "=", "data", "[", ":", ",", "-", "1", "]", ".", "type", "(", "torch", ".", "long", ")", "\n", "category", "=", "torch", ".", "ones", "(", "x", ".", "shape", "[", "0", "]", ",", "dtype", "=", "torch", ".", "long", ")", "*", "cat_idx", "[", "cat", "]", "\n", "id_scan_tensor", "=", "torch", ".", "from_numpy", "(", "np", ".", "asarray", "(", "[", "id_scan", "]", ")", ")", ".", "clone", "(", ")", "\n", "data", "=", "Data", "(", "pos", "=", "pos", ",", "x", "=", "x", ",", "y", "=", "y", ",", "category", "=", "category", ",", "\n", "id_scan", "=", "id_scan_tensor", ")", "\n", "data", "=", "SaveOriginalPosId", "(", ")", "(", "data", ")", "\n", "if", "self", ".", "pre_filter", "is", "not", "None", "and", "not", "self", ".", "pre_filter", "(", "data", ")", ":", "\n", "                ", "continue", "\n", "", "data_raw_list", ".", "append", "(", "data", ".", "clone", "(", ")", "if", "has_pre_transform", "else", "data", ")", "\n", "if", "has_pre_transform", ":", "\n", "                ", "data", "=", "self", ".", "pre_transform", "(", "data", ")", "\n", "data_list", ".", "append", "(", "data", ")", "\n", "", "", "if", "not", "has_pre_transform", ":", "\n", "            ", "return", "[", "]", ",", "data_raw_list", "\n", "", "return", "data_raw_list", ",", "data_list", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.shapenet.ShapeNet._save_data_list": [[240, 243], ["torch.save", "shapenet.ShapeNet.collate"], "methods", ["None"], ["", "def", "_save_data_list", "(", "self", ",", "datas", ",", "path_to_datas", ",", "save_bool", "=", "True", ")", ":", "\n", "        ", "if", "save_bool", ":", "\n", "            ", "torch", ".", "save", "(", "self", ".", "collate", "(", "datas", ")", ",", "path_to_datas", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.shapenet.ShapeNet._re_index_trainval": [[244, 253], ["len", "len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "", "def", "_re_index_trainval", "(", "self", ",", "trainval", ")", ":", "\n", "        ", "if", "len", "(", "trainval", ")", "==", "0", ":", "\n", "            ", "return", "trainval", "\n", "", "train", ",", "val", "=", "trainval", "\n", "for", "v", "in", "val", ":", "\n", "            ", "v", ".", "id_scan", "+=", "len", "(", "train", ")", "\n", "", "assert", "(", "train", "[", "-", "1", "]", ".", "id_scan", "+", "1", "==", "\n", "val", "[", "0", "]", ".", "id_scan", ")", ".", "item", "(", ")", ",", "(", "train", "[", "-", "1", "]", ".", "id_scan", ",", "val", "[", "0", "]", ".", "id_scan", ")", "\n", "return", "train", "+", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.shapenet.ShapeNet.process": [[254, 281], ["enumerate", "shapenet.ShapeNet._save_data_list", "shapenet.ShapeNet._save_data_list", "os.join", "os.join", "shapenet.ShapeNet._process_filenames", "shapenet.ShapeNet._save_data_list", "shapenet.ShapeNet._save_data_list", "shapenet.ShapeNet._re_index_trainval", "shapenet.ShapeNet._re_index_trainval", "open", "sorted", "trainval.append", "len", "raw_trainval.append", "len", "os.sep.join", "os.sep.join", "json.load", "len", "name.split"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.shapenet.ShapeNet._save_data_list", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.shapenet.ShapeNet._save_data_list", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.shapenet.ShapeNet._process_filenames", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.shapenet.ShapeNet._save_data_list", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.shapenet.ShapeNet._save_data_list", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.shapenet.ShapeNet._re_index_trainval", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.shapenet.ShapeNet._re_index_trainval", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.split"], ["", "def", "process", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "is_test", ":", "\n", "            ", "return", "\n", "", "raw_trainval", "=", "[", "]", "\n", "trainval", "=", "[", "]", "\n", "for", "i", ",", "split", "in", "enumerate", "(", "[", "\"train\"", ",", "\"val\"", ",", "\"test\"", "]", ")", ":", "\n", "            ", "path", "=", "osp", ".", "join", "(", "self", ".", "raw_dir", ",", "\"train_test_split\"", ",", "\n", "f\"shuffled_{split}_file_list.json\"", ")", "\n", "with", "open", "(", "path", ",", "\"r\"", ")", "as", "f", ":", "\n", "                ", "filenames", "=", "[", "\n", "osp", ".", "sep", ".", "join", "(", "name", ".", "split", "(", "'/'", ")", "[", "1", ":", "]", ")", "+", "\".txt\"", "for", "name", "in", "json", ".", "load", "(", "f", ")", "\n", "]", "# Removing first directory.", "\n", "", "data_raw_list", ",", "data_list", "=", "self", ".", "_process_filenames", "(", "\n", "sorted", "(", "filenames", ")", ")", "\n", "if", "split", "==", "\"train\"", "or", "split", "==", "\"val\"", ":", "\n", "                ", "if", "len", "(", "data_raw_list", ")", ">", "0", ":", "\n", "                    ", "raw_trainval", ".", "append", "(", "data_raw_list", ")", "\n", "", "trainval", ".", "append", "(", "data_list", ")", "\n", "\n", "", "self", ".", "_save_data_list", "(", "data_list", ",", "self", ".", "processed_paths", "[", "i", "]", ")", "\n", "self", ".", "_save_data_list", "(", "\n", "data_raw_list", ",", "self", ".", "processed_raw_paths", "[", "i", "]", ",", "save_bool", "=", "len", "(", "data_raw_list", ")", ">", "0", ")", "\n", "\n", "", "self", ".", "_save_data_list", "(", "self", ".", "_re_index_trainval", "(", "\n", "trainval", ")", ",", "self", ".", "processed_paths", "[", "3", "]", ")", "\n", "self", ".", "_save_data_list", "(", "self", ".", "_re_index_trainval", "(", "\n", "raw_trainval", ")", ",", "self", ".", "processed_raw_paths", "[", "3", "]", ",", "save_bool", "=", "len", "(", "raw_trainval", ")", ">", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.shapenet.ShapeNet.__repr__": [[282, 284], ["len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"{}({}, categories={})\"", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "len", "(", "self", ")", ",", "self", ".", "categories", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.shapenet.ShapeNetDataset.__init__": [[305, 343], ["torch_points3d.datasets.base_dataset.BaseDataset.__init__", "shapenet.ShapeNet", "shapenet.ShapeNet", "shapenet.ShapeNet", "dataset_opt.get"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get"], ["def", "__init__", "(", "self", ",", "dataset_opt", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dataset_opt", ")", "\n", "try", ":", "\n", "            ", "self", ".", "_category", "=", "dataset_opt", ".", "category", "\n", "is_test", "=", "dataset_opt", ".", "get", "(", "\"is_test\"", ",", "False", ")", "\n", "", "except", "KeyError", ":", "\n", "            ", "self", ".", "_category", "=", "None", "\n", "\n", "", "self", ".", "train_dataset", "=", "ShapeNet", "(", "\n", "self", ".", "_data_path", ",", "\n", "self", ".", "_category", ",", "\n", "include_normals", "=", "dataset_opt", ".", "normal", ",", "\n", "split", "=", "\"train\"", ",", "\n", "pre_transform", "=", "self", ".", "pre_transform", ",", "\n", "transform", "=", "self", ".", "train_transform", ",", "\n", "is_test", "=", "is_test", ",", "\n", ")", "\n", "\n", "self", ".", "val_dataset", "=", "ShapeNet", "(", "\n", "self", ".", "_data_path", ",", "\n", "self", ".", "_category", ",", "\n", "include_normals", "=", "dataset_opt", ".", "normal", ",", "\n", "split", "=", "\"val\"", ",", "\n", "pre_transform", "=", "self", ".", "pre_transform", ",", "\n", "transform", "=", "self", ".", "val_transform", ",", "\n", "is_test", "=", "is_test", ",", "\n", ")", "\n", "\n", "self", ".", "test_dataset", "=", "ShapeNet", "(", "\n", "self", ".", "_data_path", ",", "\n", "self", ".", "_category", ",", "\n", "include_normals", "=", "dataset_opt", ".", "normal", ",", "\n", "split", "=", "\"test\"", ",", "\n", "transform", "=", "self", ".", "test_transform", ",", "\n", "pre_transform", "=", "self", ".", "pre_transform", ",", "\n", "is_test", "=", "is_test", ",", "\n", ")", "\n", "self", ".", "_categories", "=", "self", ".", "train_dataset", ".", "categories", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.shapenet.ShapeNetDataset.class_to_segments": [[344, 351], ["None"], "methods", ["None"], ["", "@", "property", "# type: ignore", "\n", "@", "save_used_properties", "\n", "def", "class_to_segments", "(", "self", ")", ":", "\n", "        ", "classes_to_segment", "=", "{", "}", "\n", "for", "key", "in", "self", ".", "_categories", ":", "\n", "            ", "classes_to_segment", "[", "key", "]", "=", "ShapeNet", ".", "seg_classes", "[", "key", "]", "\n", "", "return", "classes_to_segment", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.shapenet.ShapeNetDataset.is_hierarchical": [[352, 355], ["len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "@", "property", "\n", "def", "is_hierarchical", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_categories", ")", ">", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.shapenet.ShapeNetDataset.get_tracker": [[356, 366], ["torch_points3d.metrics.shapenet_part_tracker.ShapenetPartTracker"], "methods", ["None"], ["", "def", "get_tracker", "(", "self", ",", "wandb_log", ":", "bool", ",", "tensorboard_log", ":", "bool", ")", ":", "\n", "        ", "\"\"\"Factory method for the tracker\n\n        Arguments:\n            wandb_log - Log using weight and biases\n            tensorboard_log - Log using tensorboard\n        Returns:\n            [BaseTracker] -- tracker\n        \"\"\"", "\n", "return", "ShapenetPartTracker", "(", "self", ",", "wandb_log", "=", "wandb_log", ",", "use_tensorboard", "=", "tensorboard_log", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.scannet.RGBDFrame.load": [[414, 431], ["numpy.asarray().reshape", "struct.unpack", "struct.unpack", "struct.unpack", "struct.unpack", "file_handle.seek", "file_handle.seek", "numpy.asarray", "file_handle.read", "file_handle.read", "file_handle.read", "file_handle.read", "struct.unpack", "struct.unpack", "struct.unpack", "file_handle.read", "file_handle.read", "file_handle.read"], "methods", ["None"], ["    ", "def", "load", "(", "self", ",", "file_handle", ",", "skip_color", "=", "False", ",", "skip_depth", "=", "False", ")", ":", "\n", "        ", "self", ".", "camera_to_world", "=", "np", ".", "asarray", "(", "struct", ".", "unpack", "(", "'f'", "*", "16", ",", "file_handle", ".", "read", "(", "16", "*", "4", ")", ")", ",", "dtype", "=", "np", ".", "float32", ")", ".", "reshape", "(", "\n", "4", ",", "4", ")", "\n", "self", ".", "timestamp_color", "=", "struct", ".", "unpack", "(", "'Q'", ",", "file_handle", ".", "read", "(", "8", ")", ")", "[", "0", "]", "\n", "self", ".", "timestamp_depth", "=", "struct", ".", "unpack", "(", "'Q'", ",", "file_handle", ".", "read", "(", "8", ")", ")", "[", "0", "]", "\n", "self", ".", "color_size_bytes", "=", "struct", ".", "unpack", "(", "'Q'", ",", "file_handle", ".", "read", "(", "8", ")", ")", "[", "0", "]", "\n", "self", ".", "depth_size_bytes", "=", "struct", ".", "unpack", "(", "'Q'", ",", "file_handle", ".", "read", "(", "8", ")", ")", "[", "0", "]", "\n", "if", "skip_color", ":", "\n", "            ", "self", ".", "color_data", "=", "None", "\n", "file_handle", ".", "seek", "(", "self", ".", "color_size_bytes", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "color_data", "=", "b''", ".", "join", "(", "struct", ".", "unpack", "(", "'c'", "*", "self", ".", "color_size_bytes", ",", "file_handle", ".", "read", "(", "self", ".", "color_size_bytes", ")", ")", ")", "\n", "", "if", "skip_depth", ":", "\n", "            ", "self", ".", "depth_data", "=", "None", "\n", "file_handle", ".", "seek", "(", "self", ".", "depth_size_bytes", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "depth_data", "=", "b''", ".", "join", "(", "struct", ".", "unpack", "(", "'c'", "*", "self", ".", "depth_size_bytes", ",", "file_handle", ".", "read", "(", "self", ".", "depth_size_bytes", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.scannet.RGBDFrame.decompress_depth": [[432, 437], ["scannet.RGBDFrame.decompress_depth_zlib"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.scannet.RGBDFrame.decompress_depth_zlib"], ["", "", "def", "decompress_depth", "(", "self", ",", "compression_type", ")", ":", "\n", "        ", "if", "compression_type", "==", "'zlib_ushort'", ":", "\n", "            ", "return", "self", ".", "decompress_depth_zlib", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.scannet.RGBDFrame.decompress_depth_zlib": [[438, 440], ["zlib.decompress"], "methods", ["None"], ["", "", "def", "decompress_depth_zlib", "(", "self", ")", ":", "\n", "        ", "return", "zlib", ".", "decompress", "(", "self", ".", "depth_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.scannet.RGBDFrame.decompress_color": [[441, 446], ["scannet.RGBDFrame.decompress_color_jpeg"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.scannet.RGBDFrame.decompress_color_jpeg"], ["", "def", "decompress_color", "(", "self", ",", "compression_type", ")", ":", "\n", "        ", "if", "compression_type", "==", "'jpeg'", ":", "\n", "            ", "return", "self", ".", "decompress_color_jpeg", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.scannet.RGBDFrame.decompress_color_jpeg": [[447, 449], ["imageio.imread"], "methods", ["None"], ["", "", "def", "decompress_color_jpeg", "(", "self", ")", ":", "\n", "        ", "return", "imageio", ".", "imread", "(", "self", ".", "color_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.scannet.SensorData.__init__": [[453, 457], ["scannet.SensorData.load"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load"], ["    ", "def", "__init__", "(", "self", ",", "filename", ",", "frame_skip", "=", "1", ")", ":", "\n", "        ", "self", ".", "version", "=", "4", "\n", "self", ".", "frame_skip", "=", "frame_skip", "\n", "self", ".", "load", "(", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.scannet.SensorData.load": [[458, 507], ["open", "numpy.asarray().reshape", "numpy.asarray().reshape", "numpy.asarray().reshape", "numpy.asarray().reshape", "range", "struct.unpack", "struct.unpack", "struct.unpack", "struct.unpack", "struct.unpack", "struct.unpack", "struct.unpack", "struct.unpack", "struct.unpack", "scannet.RGBDFrame", "scannet.RGBDFrame.load", "any", "scannet.SensorData.frames.append", "f.read", "f.read", "f.read", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "f.read", "f.read", "f.read", "f.read", "f.read", "f.read", "struct.unpack", "struct.unpack", "struct.unpack", "struct.unpack", "struct.unpack", "struct.unpack", "scannet.is_corrupted", "f.read", "f.read", "f.read", "f.read", "f.read", "f.read"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.scannet.is_corrupted"], ["", "def", "load", "(", "self", ",", "filename", ")", ":", "\n", "        ", "with", "open", "(", "filename", ",", "'rb'", ")", "as", "f", ":", "\n", "\n", "# Read the sens file header", "\n", "            ", "version", "=", "struct", ".", "unpack", "(", "'I'", ",", "f", ".", "read", "(", "4", ")", ")", "[", "0", "]", "\n", "assert", "self", ".", "version", "==", "version", "\n", "strlen", "=", "struct", ".", "unpack", "(", "'Q'", ",", "f", ".", "read", "(", "8", ")", ")", "[", "0", "]", "\n", "self", ".", "sensor_name", "=", "b''", ".", "join", "(", "struct", ".", "unpack", "(", "'c'", "*", "strlen", ",", "f", ".", "read", "(", "strlen", ")", ")", ")", "\n", "self", ".", "intrinsic_color", "=", "np", ".", "asarray", "(", "struct", ".", "unpack", "(", "'f'", "*", "16", ",", "f", ".", "read", "(", "16", "*", "4", ")", ")", ",", "dtype", "=", "np", ".", "float32", ")", ".", "reshape", "(", "4", ",", "4", ")", "\n", "self", ".", "extrinsic_color", "=", "np", ".", "asarray", "(", "struct", ".", "unpack", "(", "'f'", "*", "16", ",", "f", ".", "read", "(", "16", "*", "4", ")", ")", ",", "dtype", "=", "np", ".", "float32", ")", ".", "reshape", "(", "4", ",", "4", ")", "\n", "self", ".", "intrinsic_depth", "=", "np", ".", "asarray", "(", "struct", ".", "unpack", "(", "'f'", "*", "16", ",", "f", ".", "read", "(", "16", "*", "4", ")", ")", ",", "dtype", "=", "np", ".", "float32", ")", ".", "reshape", "(", "4", ",", "4", ")", "\n", "self", ".", "extrinsic_depth", "=", "np", ".", "asarray", "(", "struct", ".", "unpack", "(", "'f'", "*", "16", ",", "f", ".", "read", "(", "16", "*", "4", ")", ")", ",", "dtype", "=", "np", ".", "float32", ")", ".", "reshape", "(", "4", ",", "4", ")", "\n", "self", ".", "color_compression_type", "=", "COMPRESSION_TYPE_COLOR", "[", "struct", ".", "unpack", "(", "'i'", ",", "f", ".", "read", "(", "4", ")", ")", "[", "0", "]", "]", "\n", "self", ".", "depth_compression_type", "=", "COMPRESSION_TYPE_DEPTH", "[", "struct", ".", "unpack", "(", "'i'", ",", "f", ".", "read", "(", "4", ")", ")", "[", "0", "]", "]", "\n", "self", ".", "color_width", "=", "struct", ".", "unpack", "(", "'I'", ",", "f", ".", "read", "(", "4", ")", ")", "[", "0", "]", "\n", "self", ".", "color_height", "=", "struct", ".", "unpack", "(", "'I'", ",", "f", ".", "read", "(", "4", ")", ")", "[", "0", "]", "\n", "self", ".", "depth_width", "=", "struct", ".", "unpack", "(", "'I'", ",", "f", ".", "read", "(", "4", ")", ")", "[", "0", "]", "\n", "self", ".", "depth_height", "=", "struct", ".", "unpack", "(", "'I'", ",", "f", ".", "read", "(", "4", ")", ")", "[", "0", "]", "\n", "self", ".", "depth_shift", "=", "struct", ".", "unpack", "(", "'f'", ",", "f", ".", "read", "(", "4", ")", ")", "[", "0", "]", "\n", "num_frames", "=", "struct", ".", "unpack", "(", "'Q'", ",", "f", ".", "read", "(", "8", ")", ")", "[", "0", "]", "\n", "\n", "# Read the frames. RGBDFrame.load() knows how many bytes to", "\n", "# read for each frame. It can speed up the parsing if", "\n", "# frame_skip is provided", "\n", "self", ".", "frames", "=", "[", "]", "\n", "i_offset", "=", "0", "\n", "for", "i", "in", "range", "(", "num_frames", ")", ":", "\n", "                ", "skip", "=", "(", "(", "i", "-", "i_offset", ")", "%", "self", ".", "frame_skip", "!=", "0", ")", "\n", "frame", "=", "RGBDFrame", "(", ")", "\n", "frame", ".", "load", "(", "f", ",", "skip_color", "=", "skip", ",", "skip_depth", "=", "skip", ")", "\n", "\n", "if", "skip", ":", "\n", "                    ", "continue", "\n", "\n", "# Make sure the data is not corrupted. Some ScanNet", "\n", "# poses contain 'inf' values, as referenced here:", "\n", "# https://github.com/ScanNet/ScanNet/issues/9", "\n", "", "corrupted", "=", "any", "(", "[", "is_corrupted", "(", "x", ")", "for", "x", "in", "[", "\n", "self", ".", "extrinsic_color", ",", "self", ".", "extrinsic_depth", ",", "\n", "self", ".", "intrinsic_color", ",", "self", ".", "intrinsic_depth", ",", "\n", "frame", ".", "camera_to_world", "]", "]", ")", "\n", "\n", "# i_offset is used to remember if corrupted files were", "\n", "# skipped, so that we load the next non-corrupted ones", "\n", "if", "corrupted", ":", "\n", "                    ", "i_offset", "+=", "1", "\n", "continue", "\n", "\n", "", "self", ".", "frames", ".", "append", "(", "frame", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.scannet.SensorData.export_depth_images": [[508, 523], ["range", "os.exists", "os.exists", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "print", "len", "scannet.SensorData.frames[].decompress_depth", "numpy.fromstring().reshape", "cv2.resize", "open", "png.Writer", "depth.reshape().tolist.reshape().tolist.reshape().tolist", "png.Writer.write", "numpy.fromstring", "os.join", "os.join", "depth.reshape().tolist.reshape().tolist.reshape", "len", "str"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.makedirs", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.makedirs", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.makedirs", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.makedirs", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.scannet.RGBDFrame.decompress_depth", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "", "", "def", "export_depth_images", "(", "self", ",", "output_path", ",", "image_size", "=", "None", ",", "frame_skip", "=", "1", ",", "verbose", "=", "False", ")", ":", "\n", "        ", "if", "not", "osp", ".", "exists", "(", "output_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "output_path", ")", "\n", "", "if", "verbose", ":", "\n", "            ", "print", "(", "f'Exporting {len(self.frames) // frame_skip} depth frames to {output_path}'", ")", "\n", "", "for", "f", "in", "range", "(", "0", ",", "len", "(", "self", ".", "frames", ")", ",", "frame_skip", ")", ":", "\n", "            ", "depth_data", "=", "self", ".", "frames", "[", "f", "]", ".", "decompress_depth", "(", "self", ".", "depth_compression_type", ")", "\n", "depth", "=", "np", ".", "fromstring", "(", "depth_data", ",", "dtype", "=", "np", ".", "uint16", ")", ".", "reshape", "(", "self", ".", "depth_height", ",", "self", ".", "depth_width", ")", "\n", "if", "image_size", "is", "not", "None", ":", "\n", "                ", "depth", "=", "cv2", ".", "resize", "(", "depth", ",", "(", "image_size", "[", "1", "]", ",", "image_size", "[", "0", "]", ")", ",", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "# imageio.imwrite(osp.join(output_path, str(f) + '.png'), depth)", "\n", "", "with", "open", "(", "osp", ".", "join", "(", "output_path", ",", "str", "(", "f", ")", "+", "'.png'", ")", ",", "'wb'", ")", "as", "f", ":", "# write 16-bit", "\n", "                ", "writer", "=", "png", ".", "Writer", "(", "width", "=", "depth", ".", "shape", "[", "1", "]", ",", "height", "=", "depth", ".", "shape", "[", "0", "]", ",", "bitdepth", "=", "16", ")", "\n", "depth", "=", "depth", ".", "reshape", "(", "-", "1", ",", "depth", ".", "shape", "[", "1", "]", ")", ".", "tolist", "(", ")", "\n", "writer", ".", "write", "(", "f", ",", "depth", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.scannet.SensorData.export_color_images": [[524, 534], ["range", "os.exists", "os.exists", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "print", "len", "scannet.SensorData.frames[].decompress_color", "imageio.imwrite", "cv2.resize", "os.join", "os.join", "str", "len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.makedirs", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.makedirs", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.makedirs", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.makedirs", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.scannet.RGBDFrame.decompress_color", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "", "", "def", "export_color_images", "(", "self", ",", "output_path", ",", "image_size", "=", "None", ",", "frame_skip", "=", "1", ",", "verbose", "=", "False", ")", ":", "\n", "        ", "if", "not", "osp", ".", "exists", "(", "output_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "output_path", ")", "\n", "", "if", "verbose", ":", "\n", "            ", "print", "(", "f'Exporting {len(self.frames) // frame_skip} color frames to {output_path}'", ")", "\n", "", "for", "f", "in", "range", "(", "0", ",", "len", "(", "self", ".", "frames", ")", ",", "frame_skip", ")", ":", "\n", "            ", "color", "=", "self", ".", "frames", "[", "f", "]", ".", "decompress_color", "(", "self", ".", "color_compression_type", ")", "\n", "if", "image_size", "is", "not", "None", ":", "\n", "                ", "color", "=", "cv2", ".", "resize", "(", "color", ",", "(", "image_size", "[", "1", "]", ",", "image_size", "[", "0", "]", ")", ",", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "", "imageio", ".", "imwrite", "(", "osp", ".", "join", "(", "output_path", ",", "str", "(", "f", ")", "+", "'.jpg'", ")", ",", "color", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.scannet.SensorData.save_mat_to_file": [[535, 539], ["open", "numpy.savetxt"], "methods", ["None"], ["", "", "def", "save_mat_to_file", "(", "self", ",", "matrix", ",", "filename", ")", ":", "\n", "        ", "with", "open", "(", "filename", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "matrix", ":", "\n", "                ", "np", ".", "savetxt", "(", "f", ",", "line", "[", "np", ".", "newaxis", "]", ",", "fmt", "=", "'%f'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.scannet.SensorData.export_poses": [[540, 547], ["range", "os.exists", "os.exists", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "print", "len", "scannet.SensorData.save_mat_to_file", "os.join", "os.join", "str", "len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.makedirs", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.makedirs", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.makedirs", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.makedirs", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.scannet.SensorData.save_mat_to_file", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "", "", "def", "export_poses", "(", "self", ",", "output_path", ",", "frame_skip", "=", "1", ",", "verbose", "=", "False", ")", ":", "\n", "        ", "if", "not", "osp", ".", "exists", "(", "output_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "output_path", ")", "\n", "", "if", "verbose", ":", "\n", "            ", "print", "(", "f'Exporting {len(self.frames) // frame_skip} camera poses to {output_path}'", ")", "\n", "", "for", "f", "in", "range", "(", "0", ",", "len", "(", "self", ".", "frames", ")", ",", "frame_skip", ")", ":", "\n", "            ", "self", ".", "save_mat_to_file", "(", "self", ".", "frames", "[", "f", "]", ".", "camera_to_world", ",", "osp", ".", "join", "(", "output_path", ",", "str", "(", "f", ")", "+", "'.txt'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.scannet.SensorData.export_intrinsics": [[548, 557], ["scannet.SensorData.save_mat_to_file", "scannet.SensorData.save_mat_to_file", "scannet.SensorData.save_mat_to_file", "scannet.SensorData.save_mat_to_file", "os.exists", "os.exists", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "print", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.scannet.SensorData.save_mat_to_file", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.scannet.SensorData.save_mat_to_file", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.scannet.SensorData.save_mat_to_file", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.scannet.SensorData.save_mat_to_file", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.makedirs", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.makedirs", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.makedirs", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.makedirs"], ["", "", "def", "export_intrinsics", "(", "self", ",", "output_path", ",", "verbose", "=", "False", ")", ":", "\n", "        ", "if", "not", "osp", ".", "exists", "(", "output_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "output_path", ")", "\n", "", "if", "verbose", ":", "\n", "            ", "print", "(", "f'Exporting camera intrinsics to {output_path}'", ")", "\n", "", "self", ".", "save_mat_to_file", "(", "self", ".", "intrinsic_color", ",", "osp", ".", "join", "(", "output_path", ",", "'intrinsic_color.txt'", ")", ")", "\n", "self", ".", "save_mat_to_file", "(", "self", ".", "extrinsic_color", ",", "osp", ".", "join", "(", "output_path", ",", "'extrinsic_color.txt'", ")", ")", "\n", "self", ".", "save_mat_to_file", "(", "self", ".", "intrinsic_depth", ",", "osp", ".", "join", "(", "output_path", ",", "'intrinsic_depth.txt'", ")", ")", "\n", "self", ".", "save_mat_to_file", "(", "self", ".", "extrinsic_depth", ",", "osp", ".", "join", "(", "output_path", ",", "'extrinsic_depth.txt'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.scannet.Scannet.__init__": [[651, 713], ["torch_geometric.data.InMemoryDataset.__init__", "scannet.Scannet._init_load", "scannet.Scannet.read_from_metadata", "isinstance", "Exception", "scannet.Scannet._remap_labels", "delattr", "delattr"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.scannet.Scannet._init_load", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.scannet.Scannet.read_from_metadata", "home.repos.pwc.inspect_result.drprojects_deepviewagg.panoptic.scannet.ScannetPanoptic._remap_labels"], ["def", "__init__", "(", "\n", "self", ",", "\n", "root", ",", "\n", "split", "=", "\"train\"", ",", "\n", "transform", "=", "None", ",", "\n", "pre_transform", "=", "None", ",", "\n", "pre_filter", "=", "None", ",", "\n", "version", "=", "\"v2\"", ",", "\n", "use_instance_labels", "=", "False", ",", "\n", "use_instance_bboxes", "=", "False", ",", "\n", "donotcare_class_ids", "=", "[", "]", ",", "\n", "max_num_point", "=", "None", ",", "\n", "process_workers", "=", "4", ",", "\n", "normalize_rgb", "=", "True", ",", "\n", "types", "=", "[", "\".txt\"", ",", "\"_vh_clean_2.ply\"", ",", "\"_vh_clean_2.0.010000.segs.json\"", ",", "\".aggregation.json\"", "]", ",", "\n", "frame_depth", "=", "False", ",", "\n", "frame_rgb", "=", "False", ",", "\n", "frame_pose", "=", "False", ",", "\n", "frame_intrinsics", "=", "False", ",", "\n", "frame_skip", "=", "50", ",", "\n", "is_test", "=", "False", "\n", ")", ":", "\n", "\n", "        ", "assert", "self", ".", "SPLITS", "==", "[", "\"train\"", ",", "\"val\"", ",", "\"test\"", "]", "\n", "assert", "split", "in", "self", ".", "SPLITS", "\n", "self", ".", "split", "=", "split", "\n", "if", "not", "isinstance", "(", "donotcare_class_ids", ",", "list", ")", ":", "\n", "            ", "raise", "Exception", "(", "\"donotcare_class_ids should be list with indices of class to ignore\"", ")", "\n", "", "self", ".", "donotcare_class_ids", "=", "donotcare_class_ids", "\n", "\n", "self", ".", "valid_class_idx", "=", "[", "idx", "for", "idx", "in", "self", ".", "VALID_CLASS_IDS", "if", "idx", "not", "in", "donotcare_class_ids", "]", "\n", "\n", "assert", "version", "in", "[", "\"v2\"", ",", "\"v1\"", "]", ",", "\"The version should be either v1 or v2\"", "\n", "self", ".", "version", "=", "version", "\n", "self", ".", "max_num_point", "=", "max_num_point", "\n", "self", ".", "use_instance_labels", "=", "use_instance_labels", "\n", "self", ".", "use_instance_bboxes", "=", "use_instance_bboxes", "\n", "self", ".", "use_multiprocessing", "=", "process_workers", ">", "1", "\n", "self", ".", "process_workers", "=", "process_workers", "\n", "self", ".", "types", "=", "types", "\n", "self", ".", "normalize_rgb", "=", "normalize_rgb", "\n", "self", ".", "is_test", "=", "is_test", "\n", "self", ".", "frame_depth", "=", "frame_depth", "\n", "self", ".", "frame_rgb", "=", "frame_rgb", "\n", "self", ".", "frame_pose", "=", "frame_pose", "\n", "self", ".", "frame_intrinsics", "=", "frame_intrinsics", "\n", "self", ".", "frame_skip", "=", "frame_skip", "\n", "super", "(", ")", ".", "__init__", "(", "root", ",", "transform", ",", "pre_transform", ",", "pre_filter", ")", "\n", "\n", "self", ".", "_init_load", "(", "split", ")", "\n", "\n", "if", "split", "!=", "\"test\"", ":", "\n", "            ", "if", "not", "use_instance_bboxes", ":", "\n", "                ", "delattr", "(", "self", ".", "data", ",", "\"instance_bboxes\"", ")", "\n", "", "if", "not", "use_instance_labels", ":", "\n", "                ", "delattr", "(", "self", ".", "data", ",", "\"instance_labels\"", ")", "\n", "", "self", ".", "data", ".", "y", "=", "self", ".", "_remap_labels", "(", "self", ".", "data", ".", "y", ")", "\n", "self", ".", "has_labels", "=", "True", "\n", "", "else", ":", "\n", "            ", "self", ".", "has_labels", "=", "False", "\n", "\n", "", "self", ".", "read_from_metadata", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.scannet.Scannet._init_load": [[714, 724], ["torch.load", "ValueError"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load"], ["", "def", "_init_load", "(", "self", ",", "split", ")", ":", "\n", "        ", "if", "split", "==", "\"train\"", ":", "\n", "            ", "path", "=", "self", ".", "processed_paths", "[", "0", "]", "\n", "", "elif", "split", "==", "\"val\"", ":", "\n", "            ", "path", "=", "self", ".", "processed_paths", "[", "1", "]", "\n", "", "elif", "split", "==", "\"test\"", ":", "\n", "            ", "path", "=", "self", ".", "processed_paths", "[", "2", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "(", "f\"Split {split} found, but expected either \"", "\"train, val, or test\"", ")", ")", "\n", "", "self", ".", "data", ",", "self", ".", "slices", "=", "torch", ".", "load", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.scannet.Scannet.get_raw_data": [[725, 751], ["torch.is_tensor", "getattr", "os.join", "os.join", "torch.load", "int", "scannet.Scannet._remap_labels", "int.item", "stage.upper", "scannet.Scannet.SPLITS.index", "stage.lower"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load", "home.repos.pwc.inspect_result.drprojects_deepviewagg.panoptic.scannet.ScannetPanoptic._remap_labels"], ["", "def", "get_raw_data", "(", "self", ",", "id_scan", ",", "remap_labels", "=", "True", ")", "->", "Data", ":", "\n", "        ", "\"\"\"Grabs the raw data associated with a scan index\n\n        Parameters\n        ----------\n        id_scan : int or torch.Tensor\n            id of the scan\n        remap_labels : bool, optional\n            If True then labels are mapped to the range [IGNORE_LABELS:number of labels].\n            If using this method to compare ground truth against prediction then set remap_labels to True\n        \"\"\"", "\n", "stage", "=", "self", ".", "name", "\n", "if", "torch", ".", "is_tensor", "(", "id_scan", ")", ":", "\n", "            ", "id_scan", "=", "int", "(", "id_scan", ".", "item", "(", ")", ")", "\n", "", "assert", "stage", "in", "self", ".", "SPLITS", "\n", "mapping_idx_to_scan_names", "=", "getattr", "(", "self", ",", "\"MAPPING_IDX_TO_SCAN_{}_NAMES\"", ".", "format", "(", "stage", ".", "upper", "(", ")", ")", ")", "\n", "scan_name", "=", "mapping_idx_to_scan_names", "[", "id_scan", "]", "\n", "path_to_raw_scan", "=", "osp", ".", "join", "(", "\n", "self", ".", "processed_raw_paths", "[", "self", ".", "SPLITS", ".", "index", "(", "stage", ".", "lower", "(", ")", ")", "]", ",", "\"{}.pt\"", ".", "format", "(", "scan_name", ")", "\n", ")", "\n", "data", "=", "torch", ".", "load", "(", "path_to_raw_scan", ")", "\n", "data", ".", "scan_name", "=", "scan_name", "\n", "data", ".", "path_to_raw_scan", "=", "path_to_raw_scan", "\n", "if", "self", ".", "has_labels", "and", "remap_labels", ":", "\n", "            ", "data", ".", "y", "=", "self", ".", "_remap_labels", "(", "data", ".", "y", ")", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.scannet.Scannet.raw_file_names": [[752, 755], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "raw_file_names", "(", "self", ")", ":", "\n", "        ", "return", "[", "\"metadata\"", ",", "\"scans\"", ",", "\"scannetv2-labels.combined.tsv\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.scannet.Scannet.processed_file_names": [[756, 759], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "processed_file_names", "(", "self", ")", ":", "\n", "        ", "return", "[", "f\"{s}.pt\"", "for", "s", "in", "Scannet", ".", "SPLITS", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.scannet.Scannet.processed_raw_paths": [[760, 767], ["os.join", "os.join", "os.exists", "os.exists", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.makedirs", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.makedirs", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.makedirs", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.makedirs"], ["", "@", "property", "\n", "def", "processed_raw_paths", "(", "self", ")", ":", "\n", "        ", "processed_raw_paths", "=", "[", "osp", ".", "join", "(", "self", ".", "processed_dir", ",", "\"raw_{}\"", ".", "format", "(", "s", ")", ")", "for", "s", "in", "Scannet", ".", "SPLITS", "]", "\n", "for", "p", "in", "processed_raw_paths", ":", "\n", "            ", "if", "not", "osp", ".", "exists", "(", "p", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "p", ")", "\n", "", "", "return", "processed_raw_paths", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.scannet.Scannet.path_to_submission": [[768, 775], ["os.getcwd", "os.getcwd", "os.getcwd", "os.getcwd", "os.join", "os.join", "os.exists", "os.exists", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.makedirs", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.makedirs", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.makedirs", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.makedirs"], ["", "@", "property", "\n", "def", "path_to_submission", "(", "self", ")", ":", "\n", "        ", "root", "=", "os", ".", "getcwd", "(", ")", "\n", "path_to_submission", "=", "osp", ".", "join", "(", "root", ",", "\"submission_labels\"", ")", "\n", "if", "not", "osp", ".", "exists", "(", "path_to_submission", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "path_to_submission", ")", "\n", "", "return", "path_to_submission", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.scannet.Scannet.num_classes": [[776, 779], ["len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "@", "property", "\n", "def", "num_classes", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "Scannet", ".", "VALID_CLASS_IDS", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.scannet.Scannet.download_scans": [[780, 820], ["scannet.get_release_scans", "scannet.get_release_scans", "os.join", "os.join", "os.join", "os.join", "scannet.download_label_map", "log.info", "log.info", "log.info", "log.info", "input", "scannet.download_release", "log.info", "input", "scannet.download_label_map", "scannet.download_release", "input.strip().lower", "file_types.remove", "log.error", "file_types_test.append", "input.strip"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.scannet.get_release_scans", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.scannet.get_release_scans", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.scannet.download_label_map", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.scannet.download_release", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.scannet.download_label_map", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.scannet.download_release", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append"], ["", "def", "download_scans", "(", "self", ")", ":", "\n", "        ", "release_file", "=", "BASE_URL", "+", "RELEASE", "+", "\".txt\"", "\n", "release_scans", "=", "get_release_scans", "(", "release_file", ")", "\n", "# release_scans = [\"scene0191_00\",\"scene0191_01\", \"scene0568_00\", \"scene0568_01\"]", "\n", "file_types", "=", "FILETYPES", "\n", "release_test_file", "=", "BASE_URL", "+", "RELEASE", "+", "\"_test.txt\"", "\n", "release_test_scans", "=", "get_release_scans", "(", "release_test_file", ")", "\n", "file_types_test", "=", "FILETYPES_TEST", "\n", "out_dir_scans", "=", "osp", ".", "join", "(", "self", ".", "raw_dir", ",", "\"scans\"", ")", "\n", "out_dir_test_scans", "=", "osp", ".", "join", "(", "self", ".", "raw_dir", ",", "\"scans_test\"", ")", "\n", "\n", "if", "self", ".", "types", ":", "# download file type", "\n", "            ", "file_types", "=", "self", ".", "types", "\n", "for", "file_type", "in", "file_types", ":", "\n", "                ", "if", "file_type", "not", "in", "FILETYPES", ":", "\n", "                    ", "log", ".", "error", "(", "\"ERROR: Invalid file type: \"", "+", "file_type", ")", "\n", "return", "\n", "", "", "file_types_test", "=", "[", "]", "\n", "for", "file_type", "in", "file_types", ":", "\n", "                ", "if", "file_type", "in", "FILETYPES_TEST", ":", "\n", "                    ", "file_types_test", ".", "append", "(", "file_type", ")", "\n", "", "", "", "download_label_map", "(", "self", ".", "raw_dir", ")", "\n", "log", ".", "info", "(", "\"WARNING: You are downloading all ScanNet \"", "+", "RELEASE_NAME", "+", "\" scans of type \"", "+", "file_types", "[", "0", "]", ")", "\n", "log", ".", "info", "(", "\n", "\"Note that existing scan directories will be skipped. Delete partially downloaded directories to re-download.\"", "\n", ")", "\n", "log", ".", "info", "(", "\"***\"", ")", "\n", "log", ".", "info", "(", "\"Press any key to continue, or CTRL-C to exit.\"", ")", "\n", "input", "(", "\"\"", ")", "\n", "if", "self", ".", "version", "==", "\"v2\"", "and", "\".sens\"", "in", "file_types", ":", "\n", "            ", "log", ".", "info", "(", "\n", "\"Note: ScanNet v2 uses the same .sens files as ScanNet v1: Press 'n' to exclude downloading .sens files for each scan\"", "\n", ")", "\n", "key", "=", "input", "(", "\"\"", ")", "\n", "if", "key", ".", "strip", "(", ")", ".", "lower", "(", ")", "==", "\"n\"", ":", "\n", "                ", "file_types", ".", "remove", "(", "\".sens\"", ")", "\n", "", "", "download_release", "(", "release_scans", ",", "out_dir_scans", ",", "file_types", ",", "use_v1_sens", "=", "True", ")", "\n", "if", "self", ".", "version", "==", "\"v2\"", ":", "\n", "            ", "download_label_map", "(", "self", ".", "raw_dir", ")", "\n", "download_release", "(", "release_test_scans", ",", "out_dir_test_scans", ",", "file_types_test", ",", "use_v1_sens", "=", "True", ")", "\n", "# download_file(osp.join(BASE_URL, RELEASE_TASKS, TEST_FRAMES_FILE[0]), osp.join(out_dir_tasks, TEST_FRAMES_FILE[0]))", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.scannet.Scannet.download": [[822, 838], ["log.info", "log.info", "log.info", "log.info", "input", "scannet.Scannet.download_scans", "os.join", "os.join", "os.exists", "os.exists", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "torch_geometric.data.download_url"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.scannet.Scannet.download_scans", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.makedirs", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.makedirs", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.makedirs", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.makedirs", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.download.download_url"], ["", "", "def", "download", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "is_test", ":", "\n", "            ", "return", "\n", "", "log", ".", "info", "(", "\n", "\"By pressing any key to continue you confirm that you have agreed to the ScanNet terms of use as described at:\"", "\n", ")", "\n", "log", ".", "info", "(", "TOS_URL", ")", "\n", "log", ".", "info", "(", "\"***\"", ")", "\n", "log", ".", "info", "(", "\"Press any key to continue, or CTRL-C to exit.\"", ")", "\n", "input", "(", "\"\"", ")", "\n", "self", ".", "download_scans", "(", ")", "\n", "metadata_path", "=", "osp", ".", "join", "(", "self", ".", "raw_dir", ",", "\"metadata\"", ")", "\n", "if", "not", "osp", ".", "exists", "(", "metadata_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "metadata_path", ")", "\n", "", "for", "url", "in", "self", ".", "URLS_METADATA", ":", "\n", "            ", "_", "=", "download_url", "(", "url", ",", "metadata_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.scannet.Scannet.read_one_test_scan": [[839, 870], ["os.join", "os.join", "scannet.read_mesh_vertices_rgb", "os.join", "os.join", "os.join", "os.join", "torch.from_numpy", "torch.from_numpy", "torch_geometric.data.Data", "os.exists", "os.exists", "any", "os.exists", "os.exists", "print", "scannet.export_sens_data", "os.join", "os.join", "os.exists", "os.exists"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.scannet.read_mesh_vertices_rgb", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.scannet.export_sens_data"], ["", "", "@", "staticmethod", "\n", "def", "read_one_test_scan", "(", "\n", "scannet_dir", ",", "scan_name", ",", "normalize_rgb", ",", "frame_depth", "=", "False", ",", "\n", "frame_rgb", "=", "False", ",", "frame_pose", "=", "False", ",", "frame_intrinsics", "=", "False", ",", "\n", "frame_skip", "=", "1", ")", ":", "\n", "        ", "mesh_file", "=", "osp", ".", "join", "(", "scannet_dir", ",", "scan_name", ",", "scan_name", "+", "\"_vh_clean_2.ply\"", ")", "\n", "mesh_vertices", "=", "read_mesh_vertices_rgb", "(", "mesh_file", ")", "\n", "sens_file", "=", "osp", ".", "join", "(", "scannet_dir", ",", "scan_name", ",", "scan_name", "+", "\".sens\"", ")", "\n", "sens_dir", "=", "osp", ".", "join", "(", "scannet_dir", ",", "scan_name", ",", "'sens'", ")", "\n", "\n", "data", "=", "{", "}", "\n", "data", "[", "\"pos\"", "]", "=", "torch", ".", "from_numpy", "(", "mesh_vertices", "[", ":", ",", ":", "3", "]", ")", "\n", "data", "[", "\"rgb\"", "]", "=", "torch", ".", "from_numpy", "(", "mesh_vertices", "[", ":", ",", "3", ":", "]", ")", "\n", "if", "normalize_rgb", ":", "\n", "            ", "data", "[", "\"rgb\"", "]", "/=", "255.0", "\n", "\n", "# Export image data from sens file", "\n", "", "if", "osp", ".", "exists", "(", "sens_file", ")", "and", "any", "(", "[", "frame_depth", ",", "frame_rgb", ",", "frame_pose", ",", "frame_intrinsics", ",", "frame_skip", "]", ")", ":", "\n", "            ", "if", "osp", ".", "exists", "(", "sens_dir", ")", ":", "\n", "                ", "print", "(", "f\"{osp.exists(sens_dir)} already exists, skipping 'sens' data export.\"", ")", "\n", "# raise ValueError(", "\n", "#     f\"Cannot export 'sens' data to {osp.exists(sens_dir)} \"", "\n", "#     f\"because folder already exists.\")", "\n", "", "else", ":", "\n", "                ", "export_sens_data", "(", "\n", "sens_file", ",", "osp", ".", "join", "(", "scannet_dir", ",", "scan_name", ",", "'sens'", ")", ",", "\n", "depth_images", "=", "frame_depth", ",", "color_images", "=", "frame_rgb", ",", "\n", "poses", "=", "frame_pose", ",", "intrinsics", "=", "frame_intrinsics", ",", "\n", "frame_skip", "=", "frame_skip", ")", "\n", "\n", "", "", "return", "Data", "(", "**", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.scannet.Scannet.read_one_scan": [[871, 932], ["os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "scannet.export", "numpy.logical_not", "numpy.in1d", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch_geometric.data.Data", "numpy.in1d", "os.exists", "os.exists", "any", "os.exists", "os.exists", "numpy.random.choice", "print", "scannet.export_sens_data", "os.join", "os.join", "os.exists", "os.exists"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.scannet.export", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.scannet.export_sens_data"], ["", "@", "staticmethod", "\n", "def", "read_one_scan", "(", "\n", "scannet_dir", ",", "scan_name", ",", "label_map_file", ",", "donotcare_class_ids", ",", "\n", "max_num_point", ",", "obj_class_ids", ",", "normalize_rgb", ",", "frame_depth", ",", "\n", "frame_rgb", ",", "frame_pose", ",", "frame_intrinsics", ",", "frame_skip", ")", ":", "\n", "        ", "mesh_file", "=", "osp", ".", "join", "(", "scannet_dir", ",", "scan_name", ",", "scan_name", "+", "\"_vh_clean_2.ply\"", ")", "\n", "agg_file", "=", "osp", ".", "join", "(", "scannet_dir", ",", "scan_name", ",", "scan_name", "+", "\".aggregation.json\"", ")", "\n", "seg_file", "=", "osp", ".", "join", "(", "scannet_dir", ",", "scan_name", ",", "scan_name", "+", "\"_vh_clean_2.0.010000.segs.json\"", ")", "\n", "sens_file", "=", "osp", ".", "join", "(", "scannet_dir", ",", "scan_name", ",", "scan_name", "+", "\".sens\"", ")", "\n", "sens_dir", "=", "osp", ".", "join", "(", "scannet_dir", ",", "scan_name", ",", "'sens'", ")", "\n", "meta_file", "=", "osp", ".", "join", "(", "\n", "scannet_dir", ",", "scan_name", ",", "scan_name", "+", "\".txt\"", "\n", ")", "# includes axisAlignment info for the train set scans.", "\n", "mesh_vertices", ",", "semantic_labels", ",", "instance_labels", ",", "instance_bboxes", ",", "instance2semantic", "=", "export", "(", "\n", "mesh_file", ",", "agg_file", ",", "seg_file", ",", "meta_file", ",", "label_map_file", ",", "None", "\n", ")", "\n", "\n", "# Discard unwanted classes", "\n", "mask", "=", "np", ".", "logical_not", "(", "np", ".", "in1d", "(", "semantic_labels", ",", "donotcare_class_ids", ")", ")", "\n", "mesh_vertices", "=", "mesh_vertices", "[", "mask", ",", ":", "]", "\n", "semantic_labels", "=", "semantic_labels", "[", "mask", "]", "\n", "instance_labels", "=", "instance_labels", "[", "mask", "]", "\n", "\n", "bbox_mask", "=", "np", ".", "in1d", "(", "instance_bboxes", "[", ":", ",", "-", "1", "]", ",", "obj_class_ids", ")", "\n", "instance_bboxes", "=", "instance_bboxes", "[", "bbox_mask", ",", ":", "]", "\n", "\n", "# Subsample", "\n", "N", "=", "mesh_vertices", ".", "shape", "[", "0", "]", "\n", "if", "max_num_point", ":", "\n", "            ", "if", "N", ">", "max_num_point", ":", "\n", "                ", "choices", "=", "np", ".", "random", ".", "choice", "(", "N", ",", "max_num_point", ",", "replace", "=", "False", ")", "\n", "mesh_vertices", "=", "mesh_vertices", "[", "choices", ",", ":", "]", "\n", "semantic_labels", "=", "semantic_labels", "[", "choices", "]", "\n", "instance_labels", "=", "instance_labels", "[", "choices", "]", "\n", "\n", "# Build data container", "\n", "", "", "data", "=", "{", "}", "\n", "data", "[", "\"pos\"", "]", "=", "torch", ".", "from_numpy", "(", "mesh_vertices", "[", ":", ",", ":", "3", "]", ")", "\n", "data", "[", "\"rgb\"", "]", "=", "torch", ".", "from_numpy", "(", "mesh_vertices", "[", ":", ",", "3", ":", "]", ")", "\n", "if", "normalize_rgb", ":", "\n", "            ", "data", "[", "\"rgb\"", "]", "/=", "255.0", "\n", "", "data", "[", "\"y\"", "]", "=", "torch", ".", "from_numpy", "(", "semantic_labels", ")", "\n", "data", "[", "\"x\"", "]", "=", "None", "\n", "data", "[", "\"instance_labels\"", "]", "=", "torch", ".", "from_numpy", "(", "instance_labels", ")", "\n", "data", "[", "\"instance_bboxes\"", "]", "=", "torch", ".", "from_numpy", "(", "instance_bboxes", ")", "\n", "\n", "# Export image data from sens file", "\n", "if", "osp", ".", "exists", "(", "sens_file", ")", "and", "any", "(", "[", "frame_depth", ",", "frame_rgb", ",", "frame_pose", ",", "frame_intrinsics", ",", "frame_skip", "]", ")", ":", "\n", "            ", "if", "osp", ".", "exists", "(", "sens_dir", ")", ":", "\n", "                ", "print", "(", "f\"{osp.exists(sens_dir)} already exists, skipping 'sens' data export.\"", ")", "\n", "# raise ValueError(", "\n", "#     f\"Cannot export 'sens' data to {osp.exists(sens_dir)} \"", "\n", "#     f\"because folder already exists.\")", "\n", "", "else", ":", "\n", "                ", "export_sens_data", "(", "\n", "sens_file", ",", "osp", ".", "join", "(", "scannet_dir", ",", "scan_name", ",", "'sens'", ")", ",", "\n", "depth_images", "=", "frame_depth", ",", "color_images", "=", "frame_rgb", ",", "\n", "poses", "=", "frame_pose", ",", "intrinsics", "=", "frame_intrinsics", ",", "\n", "frame_skip", "=", "frame_skip", ")", "\n", "\n", "", "", "return", "Data", "(", "**", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.scannet.Scannet.read_from_metadata": [[933, 947], ["os.join", "os.join", "os.join", "os.join", "enumerate", "open", "scannet.Scannet.scan_names.append", "open.close", "setattr", "os.join", "os.join", "sorted", "enumerate", "split.upper", "line.rstrip"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append"], ["", "def", "read_from_metadata", "(", "self", ")", ":", "\n", "        ", "metadata_path", "=", "osp", ".", "join", "(", "self", ".", "raw_dir", ",", "\"metadata\"", ")", "\n", "self", ".", "label_map_file", "=", "osp", ".", "join", "(", "metadata_path", ",", "LABEL_MAP_FILE", ")", "\n", "split_files", "=", "[", "\"scannetv2_{}.txt\"", ".", "format", "(", "s", ")", "for", "s", "in", "Scannet", ".", "SPLITS", "]", "\n", "self", ".", "scan_names", "=", "[", "]", "\n", "for", "sf", "in", "split_files", ":", "\n", "            ", "f", "=", "open", "(", "osp", ".", "join", "(", "metadata_path", ",", "sf", ")", ")", "\n", "self", ".", "scan_names", ".", "append", "(", "sorted", "(", "[", "line", ".", "rstrip", "(", ")", "for", "line", "in", "f", "]", ")", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "", "for", "idx_split", ",", "split", "in", "enumerate", "(", "Scannet", ".", "SPLITS", ")", ":", "\n", "# self.scan_names[idx_split] = self.scan_names[idx_split][:5]  # to test on mini dataset", "\n", "            ", "idx_mapping", "=", "{", "idx", ":", "scan_name", "for", "idx", ",", "scan_name", "in", "enumerate", "(", "self", ".", "scan_names", "[", "idx_split", "]", ")", "}", "\n", "setattr", "(", "self", ",", "\"MAPPING_IDX_TO_SCAN_{}_NAMES\"", ".", "format", "(", "split", ".", "upper", "(", ")", ")", ",", "idx_mapping", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.scannet.Scannet.process_func": [[948, 994], ["log.info", "torch.tensor", "scannet.Scannet.read_one_test_scan", "scannet.Scannet.read_one_scan", "torch_points3d.SaveOriginalPosId"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.scannet.Scannet.read_one_test_scan", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.scannet.Scannet.read_one_scan"], ["", "", "@", "staticmethod", "\n", "def", "process_func", "(", "\n", "id_scan", ",", "\n", "total", ",", "\n", "scannet_dir", ",", "\n", "scan_name", ",", "\n", "label_map_file", ",", "\n", "donotcare_class_ids", ",", "\n", "max_num_point", ",", "\n", "obj_class_ids", ",", "\n", "normalize_rgb", ",", "\n", "split", ",", "\n", "frame_depth", ",", "\n", "frame_rgb", ",", "\n", "frame_pose", ",", "\n", "frame_intrinsics", ",", "\n", "frame_skip", ",", "\n", ")", ":", "\n", "        ", "if", "split", "==", "\"test\"", ":", "\n", "            ", "data", "=", "Scannet", ".", "read_one_test_scan", "(", "\n", "scannet_dir", ",", "\n", "scan_name", ",", "\n", "normalize_rgb", ",", "\n", "frame_depth", ",", "\n", "frame_rgb", ",", "\n", "frame_pose", ",", "\n", "frame_intrinsics", ",", "\n", "frame_skip", ")", "\n", "", "else", ":", "\n", "            ", "data", "=", "Scannet", ".", "read_one_scan", "(", "\n", "scannet_dir", ",", "\n", "scan_name", ",", "\n", "label_map_file", ",", "\n", "donotcare_class_ids", ",", "\n", "max_num_point", ",", "\n", "obj_class_ids", ",", "\n", "normalize_rgb", ",", "\n", "frame_depth", ",", "\n", "frame_rgb", ",", "\n", "frame_pose", ",", "\n", "frame_intrinsics", ",", "\n", "frame_skip", ")", "\n", "", "log", ".", "info", "(", "\"{}/{}| scan_name: {}, data: {}\"", ".", "format", "(", "id_scan", ",", "total", ",", "scan_name", ",", "data", ")", ")", "\n", "\n", "data", "[", "\"id_scan\"", "]", "=", "torch", ".", "tensor", "(", "[", "id_scan", "]", ")", "\n", "return", "cT", ".", "SaveOriginalPosId", "(", ")", "(", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.scannet.Scannet.process": [[995, 1045], ["scannet.Scannet.read_from_metadata", "enumerate", "zip", "os.exists", "os.exists", "getattr", "os.join", "os.join", "len", "log.info", "torch.save", "int", "os.join", "os.join", "torch.save", "scannet.Scannet.collate", "split.upper", "enumerate", "multiprocessing.get_context().Pool", "pool.starmap", "scannet.Scannet.process_func", "pool.starmap.append", "scannet.Scannet.process_func", "scannet.Scannet.pre_transform", "multiprocessing.get_context"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.scannet.Scannet.read_from_metadata", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.scannet.Scannet.process_func", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.scannet.Scannet.process_func"], ["", "def", "process", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "is_test", ":", "\n", "            ", "return", "\n", "", "self", ".", "read_from_metadata", "(", ")", "\n", "\n", "for", "i", ",", "(", "scan_names", ",", "split", ")", "in", "enumerate", "(", "zip", "(", "self", ".", "scan_names", ",", "self", ".", "SPLITS", ")", ")", ":", "\n", "            ", "if", "not", "osp", ".", "exists", "(", "self", ".", "processed_paths", "[", "i", "]", ")", ":", "\n", "                ", "mapping_idx_to_scan_names", "=", "getattr", "(", "self", ",", "\"MAPPING_IDX_TO_SCAN_{}_NAMES\"", ".", "format", "(", "split", ".", "upper", "(", ")", ")", ")", "\n", "scannet_dir", "=", "osp", ".", "join", "(", "self", ".", "raw_dir", ",", "\"scans\"", "if", "split", "in", "[", "\"train\"", ",", "\"val\"", "]", "else", "\"scans_test\"", ")", "\n", "total", "=", "len", "(", "scan_names", ")", "\n", "args", "=", "[", "\n", "(", "\n", "id", ",", "\n", "total", ",", "\n", "scannet_dir", ",", "\n", "scan_name", ",", "\n", "self", ".", "label_map_file", ",", "\n", "self", ".", "donotcare_class_ids", ",", "\n", "self", ".", "max_num_point", ",", "\n", "self", ".", "VALID_CLASS_IDS", ",", "\n", "self", ".", "normalize_rgb", ",", "\n", "split", ",", "\n", "self", ".", "frame_depth", ",", "\n", "self", ".", "frame_rgb", ",", "\n", "self", ".", "frame_pose", ",", "\n", "self", ".", "frame_intrinsics", ",", "\n", "self", ".", "frame_skip", ",", "\n", ")", "\n", "for", "id", ",", "scan_name", "in", "enumerate", "(", "scan_names", ")", "\n", "]", "\n", "if", "self", ".", "use_multiprocessing", ":", "\n", "                    ", "with", "multiprocessing", ".", "get_context", "(", "\"spawn\"", ")", ".", "Pool", "(", "processes", "=", "self", ".", "process_workers", ")", "as", "pool", ":", "\n", "                        ", "datas", "=", "pool", ".", "starmap", "(", "Scannet", ".", "process_func", ",", "args", ")", "\n", "", "", "else", ":", "\n", "                    ", "datas", "=", "[", "]", "\n", "for", "arg", "in", "args", ":", "\n", "                        ", "data", "=", "Scannet", ".", "process_func", "(", "*", "arg", ")", "\n", "datas", ".", "append", "(", "data", ")", "\n", "\n", "", "", "for", "data", "in", "datas", ":", "\n", "                    ", "id_scan", "=", "int", "(", "data", ".", "id_scan", ".", "item", "(", ")", ")", "\n", "scan_name", "=", "mapping_idx_to_scan_names", "[", "id_scan", "]", "\n", "path_to_raw_scan", "=", "osp", ".", "join", "(", "self", ".", "processed_raw_paths", "[", "i", "]", ",", "\"{}.pt\"", ".", "format", "(", "scan_name", ")", ")", "\n", "torch", ".", "save", "(", "data", ",", "path_to_raw_scan", ")", "\n", "\n", "", "if", "self", ".", "pre_transform", ":", "\n", "                    ", "datas", "=", "[", "self", ".", "pre_transform", "(", "data", ")", "for", "data", "in", "datas", "]", "\n", "\n", "", "log", ".", "info", "(", "\"SAVING TO {}\"", ".", "format", "(", "self", ".", "processed_paths", "[", "i", "]", ")", ")", "\n", "torch", ".", "save", "(", "self", ".", "collate", "(", "datas", ")", ",", "self", ".", "processed_paths", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.scannet.Scannet._remap_labels": [[1046, 1063], ["semantic_label.clone", "range", "mapping_dict.items", "len", "enumerate"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.clone", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "", "", "def", "_remap_labels", "(", "self", ",", "semantic_label", ")", ":", "\n", "        ", "\"\"\"Remaps labels to [0 ; num_labels -1]. Can be overriden.\"\"\"", "\n", "new_labels", "=", "semantic_label", ".", "clone", "(", ")", "\n", "mapping_dict", "=", "{", "indice", ":", "idx", "for", "idx", ",", "indice", "in", "enumerate", "(", "self", ".", "valid_class_idx", ")", "}", "\n", "for", "idx", "in", "range", "(", "NUM_CLASSES", ")", ":", "\n", "            ", "if", "idx", "not", "in", "mapping_dict", ":", "\n", "                ", "mapping_dict", "[", "idx", "]", "=", "IGNORE_LABEL", "\n", "", "", "for", "idx", "in", "self", ".", "donotcare_class_ids", ":", "\n", "            ", "mapping_dict", "[", "idx", "]", "=", "IGNORE_LABEL", "\n", "", "for", "source", ",", "target", "in", "mapping_dict", ".", "items", "(", ")", ":", "\n", "            ", "mask", "=", "semantic_label", "==", "source", "\n", "new_labels", "[", "mask", "]", "=", "target", "\n", "\n", "", "broken_labels", "=", "new_labels", ">=", "len", "(", "self", ".", "valid_class_idx", ")", "\n", "new_labels", "[", "broken_labels", "]", "=", "IGNORE_LABEL", "\n", "\n", "return", "new_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.scannet.Scannet.__repr__": [[1064, 1066], ["len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"{}({})\"", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "len", "(", "self", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.scannet.Scannet.indices": [[1072, 1079], ["pyg.__version__.split", "super().indices", "int", "int", "range", "len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.split", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis_area5_office40.S3DISOriginalFusedMM.indices", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "def", "indices", "(", "self", ")", ":", "\n", "        ", "import", "torch_geometric", "as", "pyg", "\n", "version", "=", "pyg", ".", "__version__", ".", "split", "(", "'.'", ")", "\n", "is_new_pyg", "=", "int", "(", "version", "[", "0", "]", ")", ">=", "2", "or", "int", "(", "version", "[", "1", "]", ")", ">=", "7", "\n", "if", "is_new_pyg", ":", "\n", "            ", "return", "range", "(", "len", "(", "self", ")", ")", "if", "self", ".", "_indices", "is", "None", "else", "self", ".", "_indices", "\n", "", "return", "super", "(", ")", ".", "indices", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.scannet.ScannetDataset.__init__": [[1102, 1152], ["torch_points3d.datasets.base_dataset.BaseDataset.__init__", "list", "dataset_opt.get", "dataset_opt.get", "scannet.Scannet", "scannet.Scannet", "scannet.Scannet", "dataset_opt.get", "hasattr"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get"], ["def", "__init__", "(", "self", ",", "dataset_opt", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dataset_opt", ")", "\n", "\n", "use_instance_labels", ":", "bool", "=", "dataset_opt", ".", "use_instance_labels", "\n", "use_instance_bboxes", ":", "bool", "=", "dataset_opt", ".", "use_instance_bboxes", "\n", "donotcare_class_ids", ":", "[", "]", "=", "list", "(", "dataset_opt", ".", "get", "(", "'donotcare_class_ids'", ",", "[", "]", ")", ")", "\n", "max_num_point", ":", "int", "=", "dataset_opt", ".", "get", "(", "'max_num_point'", ",", "None", ")", "\n", "process_workers", ":", "int", "=", "dataset_opt", ".", "process_workers", "if", "hasattr", "(", "dataset_opt", ",", "'process_workers'", ")", "else", "0", "\n", "is_test", ":", "bool", "=", "dataset_opt", ".", "get", "(", "'is_test'", ",", "False", ")", "\n", "\n", "self", ".", "train_dataset", "=", "Scannet", "(", "\n", "self", ".", "_data_path", ",", "\n", "split", "=", "\"train\"", ",", "\n", "pre_transform", "=", "self", ".", "pre_transform", ",", "\n", "transform", "=", "self", ".", "train_transform", ",", "\n", "version", "=", "dataset_opt", ".", "version", ",", "\n", "use_instance_labels", "=", "use_instance_labels", ",", "\n", "use_instance_bboxes", "=", "use_instance_bboxes", ",", "\n", "donotcare_class_ids", "=", "donotcare_class_ids", ",", "\n", "max_num_point", "=", "max_num_point", ",", "\n", "process_workers", "=", "process_workers", ",", "\n", "is_test", "=", "is_test", ",", "\n", ")", "\n", "\n", "self", ".", "val_dataset", "=", "Scannet", "(", "\n", "self", ".", "_data_path", ",", "\n", "split", "=", "\"val\"", ",", "\n", "transform", "=", "self", ".", "val_transform", ",", "\n", "pre_transform", "=", "self", ".", "pre_transform", ",", "\n", "version", "=", "dataset_opt", ".", "version", ",", "\n", "use_instance_labels", "=", "use_instance_labels", ",", "\n", "use_instance_bboxes", "=", "use_instance_bboxes", ",", "\n", "donotcare_class_ids", "=", "donotcare_class_ids", ",", "\n", "max_num_point", "=", "max_num_point", ",", "\n", "process_workers", "=", "process_workers", ",", "\n", "is_test", "=", "is_test", ",", "\n", ")", "\n", "\n", "self", ".", "test_dataset", "=", "Scannet", "(", "\n", "self", ".", "_data_path", ",", "\n", "split", "=", "\"test\"", ",", "\n", "transform", "=", "self", ".", "val_transform", ",", "\n", "pre_transform", "=", "self", ".", "pre_transform", ",", "\n", "version", "=", "dataset_opt", ".", "version", ",", "\n", "use_instance_labels", "=", "use_instance_labels", ",", "\n", "use_instance_bboxes", "=", "use_instance_bboxes", ",", "\n", "donotcare_class_ids", "=", "donotcare_class_ids", ",", "\n", "max_num_point", "=", "max_num_point", ",", "\n", "process_workers", "=", "process_workers", ",", "\n", "is_test", "=", "is_test", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.scannet.ScannetDataset.path_to_submission": [[1154, 1157], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "path_to_submission", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "train_dataset", ".", "path_to_submission", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.scannet.ScannetDataset.get_tracker": [[1158, 1171], ["ScannetSegmentationTracker"], "methods", ["None"], ["", "def", "get_tracker", "(", "self", ",", "wandb_log", ":", "bool", ",", "tensorboard_log", ":", "bool", ")", ":", "\n", "        ", "\"\"\"Factory method for the tracker\n\n        Arguments:\n            dataset {[type]}\n            wandb_log - Log using weight and biases\n        Returns:\n            [BaseTracker] -- tracker\n        \"\"\"", "\n", "from", "torch_points3d", ".", "metrics", ".", "scannet_segmentation_tracker", "import", "ScannetSegmentationTracker", "\n", "\n", "return", "ScannetSegmentationTracker", "(", "\n", "self", ",", "wandb_log", "=", "wandb_log", ",", "use_tensorboard", "=", "tensorboard_log", ",", "ignore_label", "=", "IGNORE_LABEL", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.scannet.get_release_scans": [[151, 158], ["urllib.request.urlopen", "scan_line.decode().rstrip", "scans.append", "scan_line.decode"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append"], ["def", "get_release_scans", "(", "release_file", ")", ":", "\n", "    ", "scan_lines", "=", "urlopen", "(", "release_file", ")", "\n", "scans", "=", "[", "]", "\n", "for", "scan_line", "in", "scan_lines", ":", "\n", "        ", "scan_id", "=", "scan_line", ".", "decode", "(", "\"utf8\"", ")", ".", "rstrip", "(", "\"\\n\"", ")", "\n", "scans", ".", "append", "(", "scan_id", ")", "\n", "", "return", "scans", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.scannet.download_release": [[160, 174], ["log.info", "log.info", "len", "len", "os.join", "log.warning", "scannet.download_scan", "failed.append"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.scannet.download_scan", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append"], ["", "def", "download_release", "(", "release_scans", ",", "out_dir", ",", "file_types", ",", "use_v1_sens", ")", ":", "\n", "    ", "if", "len", "(", "release_scans", ")", "==", "0", ":", "\n", "        ", "return", "\n", "", "log", ".", "info", "(", "\"Downloading ScanNet \"", "+", "RELEASE_NAME", "+", "\" release to \"", "+", "out_dir", "+", "\"...\"", ")", "\n", "failed", "=", "[", "]", "\n", "for", "scan_id", "in", "release_scans", ":", "\n", "        ", "scan_out_dir", "=", "osp", ".", "join", "(", "out_dir", ",", "scan_id", ")", "\n", "try", ":", "\n", "            ", "download_scan", "(", "scan_id", ",", "scan_out_dir", ",", "file_types", ",", "use_v1_sens", ")", "\n", "", "except", ":", "\n", "            ", "failed", ".", "append", "(", "scan_id", ")", "\n", "", "", "log", ".", "info", "(", "\"Downloaded ScanNet \"", "+", "RELEASE_NAME", "+", "\" release.\"", ")", "\n", "if", "len", "(", "failed", ")", ":", "\n", "        ", "log", ".", "warning", "(", "\"Failed downloads: {}\"", ".", "format", "(", "failed", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.scannet.download_file": [[176, 190], ["os.dirname", "os.isdir", "os.makedirs", "os.makedirs", "os.isfile", "log.info", "tempfile.mkstemp", "os.fdopen", "os.fdopen", "os.fdopen.close", "urllib.request.urlretrieve", "os.rename", "os.rename"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.makedirs", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.makedirs"], ["", "", "def", "download_file", "(", "url", ",", "out_file", ")", ":", "\n", "    ", "out_dir", "=", "osp", ".", "dirname", "(", "out_file", ")", "\n", "if", "not", "osp", ".", "isdir", "(", "out_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "out_dir", ")", "\n", "", "if", "not", "osp", ".", "isfile", "(", "out_file", ")", ":", "\n", "        ", "log", ".", "info", "(", "\"\\t\"", "+", "url", "+", "\" > \"", "+", "out_file", ")", "\n", "fh", ",", "out_file_tmp", "=", "tempfile", ".", "mkstemp", "(", "dir", "=", "out_dir", ")", "\n", "f", "=", "os", ".", "fdopen", "(", "fh", ",", "\"w\"", ")", "\n", "f", ".", "close", "(", ")", "\n", "urllib", ".", "request", ".", "urlretrieve", "(", "url", ",", "out_file_tmp", ")", "\n", "# urllib.urlretrieve(url, out_file_tmp)", "\n", "os", ".", "rename", "(", "out_file_tmp", ",", "out_file", ")", "\n", "", "else", ":", "\n", "        ", "pass", "\n", "# log.warning(\"WARNING Skipping download of existing file \" + out_file)", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.scannet.download_scan": [[193, 206], ["os.isdir", "os.makedirs", "os.makedirs", "scannet.download_file"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.makedirs", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.makedirs", "home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.pretrained_api.download_file"], ["", "", "def", "download_scan", "(", "scan_id", ",", "out_dir", ",", "file_types", ",", "use_v1_sens", ")", ":", "\n", "# log.info(\"Downloading ScanNet \" + RELEASE_NAME + \" scan \" + scan_id + \" ...\")", "\n", "    ", "if", "not", "osp", ".", "isdir", "(", "out_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "out_dir", ")", "\n", "", "for", "ft", "in", "file_types", ":", "\n", "        ", "v1_sens", "=", "use_v1_sens", "and", "ft", "==", "\".sens\"", "\n", "url", "=", "(", "\n", "BASE_URL", "+", "RELEASE", "+", "\"/\"", "+", "scan_id", "+", "\"/\"", "+", "scan_id", "+", "ft", "\n", "if", "not", "v1_sens", "\n", "else", "BASE_URL", "+", "RELEASES", "[", "V1_IDX", "]", "+", "\"/\"", "+", "scan_id", "+", "\"/\"", "+", "scan_id", "+", "ft", "\n", ")", "\n", "out_file", "=", "out_dir", "+", "\"/\"", "+", "scan_id", "+", "ft", "\n", "download_file", "(", "url", ",", "out_file", ")", "\n", "# log.info(\"Downloaded scan \" + scan_id)", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.scannet.download_label_map": [[209, 220], ["log.info", "log.info", "os.join", "os.dirname", "scannet.download_file", "os.isdir", "os.makedirs", "os.makedirs"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.pretrained_api.download_file", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.makedirs", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.makedirs"], ["", "", "def", "download_label_map", "(", "out_dir", ")", ":", "\n", "    ", "log", ".", "info", "(", "\"Downloading ScanNet \"", "+", "RELEASE_NAME", "+", "\" label mapping file...\"", ")", "\n", "files", "=", "[", "LABEL_MAP_FILE", "]", "\n", "for", "file", "in", "files", ":", "\n", "        ", "url", "=", "BASE_URL", "+", "RELEASE_TASKS", "+", "\"/\"", "+", "file", "\n", "localpath", "=", "osp", ".", "join", "(", "out_dir", ",", "file", ")", "\n", "localdir", "=", "osp", ".", "dirname", "(", "localpath", ")", "\n", "if", "not", "osp", ".", "isdir", "(", "localdir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "localdir", ")", "\n", "", "download_file", "(", "url", ",", "localpath", ")", "\n", "", "log", ".", "info", "(", "\"Downloaded ScanNet \"", "+", "RELEASE_NAME", "+", "\" label mapping file.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.scannet.represents_int": [[230, 237], ["int"], "function", ["None"], ["", "def", "represents_int", "(", "s", ")", ":", "\n", "    ", "\"\"\" if string s represents an int. \"\"\"", "\n", "try", ":", "\n", "        ", "int", "(", "s", ")", "\n", "return", "True", "\n", "", "except", "ValueError", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.scannet.read_label_mapping": [[239, 249], ["os.isfile", "dict", "scannet.represents_int", "open", "csv.DictReader", "int", "list", "int", "dict.keys", "dict.items"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.scannet.represents_int", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.mock.MockDatasetConfig.keys"], ["", "", "def", "read_label_mapping", "(", "filename", ",", "label_from", "=", "\"raw_category\"", ",", "label_to", "=", "\"nyu40id\"", ")", ":", "\n", "    ", "assert", "osp", ".", "isfile", "(", "filename", ")", "\n", "mapping", "=", "dict", "(", ")", "\n", "with", "open", "(", "filename", ")", "as", "csvfile", ":", "\n", "        ", "reader", "=", "csv", ".", "DictReader", "(", "csvfile", ",", "delimiter", "=", "\"\\t\"", ")", "\n", "for", "row", "in", "reader", ":", "\n", "            ", "mapping", "[", "row", "[", "label_from", "]", "]", "=", "int", "(", "row", "[", "label_to", "]", ")", "\n", "", "", "if", "represents_int", "(", "list", "(", "mapping", ".", "keys", "(", ")", ")", "[", "0", "]", ")", ":", "\n", "        ", "mapping", "=", "{", "int", "(", "k", ")", ":", "v", "for", "k", ",", "v", "in", "mapping", ".", "items", "(", ")", "}", "\n", "", "return", "mapping", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.scannet.read_mesh_vertices": [[251, 262], ["os.isfile", "open", "plyfile.PlyData.read", "numpy.zeros"], "function", ["None"], ["", "def", "read_mesh_vertices", "(", "filename", ")", ":", "\n", "    ", "\"\"\"read XYZ for each vertex.\"\"\"", "\n", "assert", "osp", ".", "isfile", "(", "filename", ")", "\n", "with", "open", "(", "filename", ",", "\"rb\"", ")", "as", "f", ":", "\n", "        ", "plydata", "=", "PlyData", ".", "read", "(", "f", ")", "\n", "num_verts", "=", "plydata", "[", "\"vertex\"", "]", ".", "count", "\n", "vertices", "=", "np", ".", "zeros", "(", "shape", "=", "[", "num_verts", ",", "3", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "vertices", "[", ":", ",", "0", "]", "=", "plydata", "[", "\"vertex\"", "]", ".", "data", "[", "\"x\"", "]", "\n", "vertices", "[", ":", ",", "1", "]", "=", "plydata", "[", "\"vertex\"", "]", ".", "data", "[", "\"y\"", "]", "\n", "vertices", "[", ":", ",", "2", "]", "=", "plydata", "[", "\"vertex\"", "]", ".", "data", "[", "\"z\"", "]", "\n", "", "return", "vertices", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.scannet.read_mesh_vertices_rgb": [[264, 280], ["os.isfile", "open", "plyfile.PlyData.read", "numpy.zeros", "numpy.np.float32"], "function", ["None"], ["", "def", "read_mesh_vertices_rgb", "(", "filename", ")", ":", "\n", "    ", "\"\"\"read XYZ RGB for each vertex.\n    Note: RGB values are in 0-255\n    \"\"\"", "\n", "assert", "osp", ".", "isfile", "(", "filename", ")", "\n", "with", "open", "(", "filename", ",", "\"rb\"", ")", "as", "f", ":", "\n", "        ", "plydata", "=", "PlyData", ".", "read", "(", "f", ")", "\n", "num_verts", "=", "plydata", "[", "\"vertex\"", "]", ".", "count", "\n", "vertices", "=", "np", ".", "zeros", "(", "shape", "=", "[", "num_verts", ",", "6", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "vertices", "[", ":", ",", "0", "]", "=", "plydata", "[", "\"vertex\"", "]", ".", "data", "[", "\"x\"", "]", "\n", "vertices", "[", ":", ",", "1", "]", "=", "plydata", "[", "\"vertex\"", "]", ".", "data", "[", "\"y\"", "]", "\n", "vertices", "[", ":", ",", "2", "]", "=", "plydata", "[", "\"vertex\"", "]", ".", "data", "[", "\"z\"", "]", "\n", "vertices", "[", ":", ",", "3", "]", "=", "plydata", "[", "\"vertex\"", "]", ".", "data", "[", "\"red\"", "]", "\n", "vertices", "[", ":", ",", "4", "]", "=", "plydata", "[", "\"vertex\"", "]", ".", "data", "[", "\"green\"", "]", "\n", "vertices", "[", ":", ",", "5", "]", "=", "plydata", "[", "\"vertex\"", "]", ".", "data", "[", "\"blue\"", "]", "\n", "", "return", "vertices", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.scannet.read_aggregation": [[282, 299], ["os.isfile", "open", "json.load", "len", "range", "label_to_segs[].extend"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "def", "read_aggregation", "(", "filename", ")", ":", "\n", "    ", "assert", "osp", ".", "isfile", "(", "filename", ")", "\n", "object_id_to_segs", "=", "{", "}", "\n", "label_to_segs", "=", "{", "}", "\n", "with", "open", "(", "filename", ")", "as", "f", ":", "\n", "        ", "data", "=", "json", ".", "load", "(", "f", ")", "\n", "num_objects", "=", "len", "(", "data", "[", "\"segGroups\"", "]", ")", "\n", "for", "i", "in", "range", "(", "num_objects", ")", ":", "\n", "            ", "object_id", "=", "data", "[", "\"segGroups\"", "]", "[", "i", "]", "[", "\"objectId\"", "]", "+", "1", "# instance ids should be 1-indexed", "\n", "label", "=", "data", "[", "\"segGroups\"", "]", "[", "i", "]", "[", "\"label\"", "]", "\n", "segs", "=", "data", "[", "\"segGroups\"", "]", "[", "i", "]", "[", "\"segments\"", "]", "\n", "object_id_to_segs", "[", "object_id", "]", "=", "segs", "\n", "if", "label", "in", "label_to_segs", ":", "\n", "                ", "label_to_segs", "[", "label", "]", ".", "extend", "(", "segs", ")", "\n", "", "else", ":", "\n", "                ", "label_to_segs", "[", "label", "]", "=", "segs", "\n", "", "", "", "return", "object_id_to_segs", ",", "label_to_segs", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.scannet.read_axis_align_matrix": [[301, 309], ["open().readlines", "open", "torch.Tensor().reshape", "torch.Tensor", "float", "line.rstrip().strip().split", "line.rstrip().strip", "line.rstrip"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.split"], ["", "def", "read_axis_align_matrix", "(", "filename", ")", ":", "\n", "    ", "lines", "=", "open", "(", "filename", ")", ".", "readlines", "(", ")", "\n", "axis_align_matrix", "=", "None", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "if", "\"axisAlignment\"", "in", "line", ":", "\n", "            ", "axis_align_matrix", "=", "torch", ".", "Tensor", "(", "[", "float", "(", "x", ")", "for", "x", "in", "line", ".", "rstrip", "(", ")", ".", "strip", "(", "\"axisAlignment = \"", ")", ".", "split", "(", "\" \"", ")", "]", ")", ".", "reshape", "(", "(", "4", ",", "4", ")", ")", "\n", "break", "\n", "", "", "return", "axis_align_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.scannet.read_segmentation": [[311, 324], ["os.isfile", "open", "json.load", "len", "range", "seg_to_verts[].append"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append"], ["", "def", "read_segmentation", "(", "filename", ")", ":", "\n", "    ", "assert", "osp", ".", "isfile", "(", "filename", ")", "\n", "seg_to_verts", "=", "{", "}", "\n", "with", "open", "(", "filename", ")", "as", "f", ":", "\n", "        ", "data", "=", "json", ".", "load", "(", "f", ")", "\n", "num_verts", "=", "len", "(", "data", "[", "\"segIndices\"", "]", ")", "\n", "for", "i", "in", "range", "(", "num_verts", ")", ":", "\n", "            ", "seg_id", "=", "data", "[", "\"segIndices\"", "]", "[", "i", "]", "\n", "if", "seg_id", "in", "seg_to_verts", ":", "\n", "                ", "seg_to_verts", "[", "seg_id", "]", ".", "append", "(", "i", ")", "\n", "", "else", ":", "\n", "                ", "seg_to_verts", "[", "seg_id", "]", "=", "[", "i", "]", "\n", "", "", "", "return", "seg_to_verts", ",", "num_verts", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.scannet.export": [[326, 397], ["scannet.read_label_mapping", "scannet.read_mesh_vertices_rgb", "read_axis_align_matrix().numpy", "numpy.ones", "numpy.dot", "scannet.read_aggregation", "scannet.read_segmentation", "numpy.zeros", "label_to_segs.items", "numpy.zeros", "len", "object_id_to_segs.items", "numpy.zeros", "read_axis_align_matrix().numpy.transpose", "numpy.unique", "numpy.min", "numpy.min", "numpy.min", "numpy.max", "numpy.max", "numpy.max", "numpy.array", "read_mesh_vertices_rgb.astype", "np.zeros.astype", "np.zeros.astype", "np.zeros.astype", "scannet.read_axis_align_matrix", "list", "len", "object_id_to_segs.keys"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.scannet.read_label_mapping", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.scannet.read_mesh_vertices_rgb", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.scannet.read_aggregation", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.scannet.read_segmentation", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.scannet.read_axis_align_matrix", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.mock.MockDatasetConfig.keys"], ["", "def", "export", "(", "mesh_file", ",", "agg_file", ",", "seg_file", ",", "meta_file", ",", "label_map_file", ",", "output_file", "=", "None", ")", ":", "\n", "    ", "\"\"\"points are XYZ RGB (RGB in 0-255),\n    semantic label as nyu40 ids,\n    instance label as 1-#instance,\n    box as (cx,cy,cz,dx,dy,dz,semantic_label)\n    \"\"\"", "\n", "label_map", "=", "read_label_mapping", "(", "label_map_file", ",", "label_from", "=", "\"raw_category\"", ",", "label_to", "=", "\"nyu40id\"", ")", "\n", "mesh_vertices", "=", "read_mesh_vertices_rgb", "(", "mesh_file", ")", "\n", "\n", "# Load scene axis alignment matrix", "\n", "axis_align_matrix", "=", "read_axis_align_matrix", "(", "meta_file", ")", ".", "numpy", "(", ")", "\n", "pts", "=", "np", ".", "ones", "(", "(", "mesh_vertices", ".", "shape", "[", "0", "]", ",", "4", ")", ")", "\n", "pts", "[", ":", ",", "0", ":", "3", "]", "=", "mesh_vertices", "[", ":", ",", "0", ":", "3", "]", "\n", "pts", "=", "np", ".", "dot", "(", "pts", ",", "axis_align_matrix", ".", "transpose", "(", ")", ")", "# Nx4", "\n", "mesh_vertices", "[", ":", ",", "0", ":", "3", "]", "=", "pts", "[", ":", ",", "0", ":", "3", "]", "\n", "\n", "# Load semantic and instance labels", "\n", "object_id_to_segs", ",", "label_to_segs", "=", "read_aggregation", "(", "agg_file", ")", "\n", "seg_to_verts", ",", "num_verts", "=", "read_segmentation", "(", "seg_file", ")", "\n", "label_ids", "=", "np", ".", "zeros", "(", "shape", "=", "(", "num_verts", ")", ",", "dtype", "=", "np", ".", "uint32", ")", "# 0: unannotated", "\n", "object_id_to_label_id", "=", "{", "}", "\n", "for", "label", ",", "segs", "in", "label_to_segs", ".", "items", "(", ")", ":", "\n", "        ", "label_id", "=", "label_map", "[", "label", "]", "\n", "for", "seg", "in", "segs", ":", "\n", "            ", "verts", "=", "seg_to_verts", "[", "seg", "]", "\n", "label_ids", "[", "verts", "]", "=", "label_id", "\n", "", "", "instance_ids", "=", "np", ".", "zeros", "(", "shape", "=", "(", "num_verts", ")", ",", "dtype", "=", "np", ".", "uint32", ")", "# 0: unannotated", "\n", "num_instances", "=", "len", "(", "np", ".", "unique", "(", "list", "(", "object_id_to_segs", ".", "keys", "(", ")", ")", ")", ")", "\n", "for", "object_id", ",", "segs", "in", "object_id_to_segs", ".", "items", "(", ")", ":", "\n", "        ", "for", "seg", "in", "segs", ":", "\n", "            ", "verts", "=", "seg_to_verts", "[", "seg", "]", "\n", "instance_ids", "[", "verts", "]", "=", "object_id", "\n", "if", "object_id", "not", "in", "object_id_to_label_id", ":", "\n", "                ", "object_id_to_label_id", "[", "object_id", "]", "=", "label_ids", "[", "verts", "]", "[", "0", "]", "\n", "", "", "", "instance_bboxes", "=", "np", ".", "zeros", "(", "(", "num_instances", ",", "7", ")", ")", "\n", "for", "obj_id", "in", "object_id_to_segs", ":", "\n", "        ", "label_id", "=", "object_id_to_label_id", "[", "obj_id", "]", "\n", "obj_pc", "=", "mesh_vertices", "[", "instance_ids", "==", "obj_id", ",", "0", ":", "3", "]", "\n", "if", "len", "(", "obj_pc", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "# Compute axis aligned box", "\n", "# An axis aligned bounding box is parameterized by", "\n", "# (cx,cy,cz) and (dx,dy,dz) and label id", "\n", "# where (cx,cy,cz) is the center point of the box,", "\n", "# dx is the x-axis length of the box.", "\n", "", "xmin", "=", "np", ".", "min", "(", "obj_pc", "[", ":", ",", "0", "]", ")", "\n", "ymin", "=", "np", ".", "min", "(", "obj_pc", "[", ":", ",", "1", "]", ")", "\n", "zmin", "=", "np", ".", "min", "(", "obj_pc", "[", ":", ",", "2", "]", ")", "\n", "xmax", "=", "np", ".", "max", "(", "obj_pc", "[", ":", ",", "0", "]", ")", "\n", "ymax", "=", "np", ".", "max", "(", "obj_pc", "[", ":", ",", "1", "]", ")", "\n", "zmax", "=", "np", ".", "max", "(", "obj_pc", "[", ":", ",", "2", "]", ")", "\n", "bbox", "=", "np", ".", "array", "(", "\n", "[", "\n", "(", "xmin", "+", "xmax", ")", "/", "2.0", ",", "\n", "(", "ymin", "+", "ymax", ")", "/", "2.0", ",", "\n", "(", "zmin", "+", "zmax", ")", "/", "2.0", ",", "\n", "xmax", "-", "xmin", ",", "\n", "ymax", "-", "ymin", ",", "\n", "zmax", "-", "zmin", ",", "\n", "label_id", ",", "\n", "]", "\n", ")", "\n", "# NOTE: this assumes obj_id is in 1,2,3,.,,,.NUM_INSTANCES", "\n", "instance_bboxes", "[", "obj_id", "-", "1", ",", ":", "]", "=", "bbox", "\n", "\n", "", "return", "(", "\n", "mesh_vertices", ".", "astype", "(", "np", ".", "float32", ")", ",", "\n", "label_ids", ".", "astype", "(", "np", ".", "int", ")", ",", "\n", "instance_ids", ".", "astype", "(", "np", ".", "int", ")", ",", "\n", "instance_bboxes", ".", "astype", "(", "np", ".", "float32", ")", ",", "\n", "object_id_to_label_id", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.scannet.export_sens_data": [[559, 580], ["scannet.SensorData", "os.exists", "os.makedirs", "os.makedirs", "print", "print", "scannet.SensorData.export_depth_images", "scannet.SensorData.export_color_images", "scannet.SensorData.export_poses", "scannet.SensorData.export_intrinsics", "print", "os.join", "os.join", "os.join", "os.join"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.makedirs", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.makedirs", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.scannet.SensorData.export_depth_images", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.scannet.SensorData.export_color_images", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.scannet.SensorData.export_poses", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.scannet.SensorData.export_intrinsics"], ["", "", "def", "export_sens_data", "(", "\n", "filename", ",", "output_path", ",", "depth_images", "=", "False", ",", "color_images", "=", "False", ",", "\n", "poses", "=", "False", ",", "intrinsics", "=", "False", ",", "frame_skip", "=", "1", ",", "verbose", "=", "True", ")", ":", "\n", "    ", "if", "not", "osp", ".", "exists", "(", "output_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "output_path", ")", "\n", "# load the data", "\n", "", "if", "verbose", ":", "\n", "        ", "print", "(", "f'\\nExporting {filename}...'", ")", "\n", "", "sd", "=", "SensorData", "(", "filename", ",", "frame_skip", "=", "frame_skip", ")", "\n", "if", "verbose", ":", "\n", "        ", "print", "(", "'Loaded'", ")", "\n", "", "if", "depth_images", ":", "\n", "        ", "sd", ".", "export_depth_images", "(", "osp", ".", "join", "(", "output_path", ",", "'depth'", ")", ",", "verbose", "=", "verbose", ")", "\n", "", "if", "color_images", ":", "\n", "        ", "sd", ".", "export_color_images", "(", "osp", ".", "join", "(", "output_path", ",", "'color'", ")", ",", "verbose", "=", "verbose", ")", "\n", "", "if", "poses", ":", "\n", "        ", "sd", ".", "export_poses", "(", "osp", ".", "join", "(", "output_path", ",", "'pose'", ")", ",", "verbose", "=", "verbose", ")", "\n", "", "if", "intrinsics", ":", "\n", "        ", "sd", ".", "export_intrinsics", "(", "osp", ".", "join", "(", "output_path", ",", "'intrinsic'", ")", ",", "verbose", "=", "verbose", ")", "\n", "", "if", "verbose", ":", "\n", "        ", "print", "(", "'Done'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.scannet.is_corrupted": [[582, 585], ["torch.Tensor", "torch.Tensor.isinf", "torch.Tensor.isnan"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.lovasz_loss.isnan"], ["", "", "def", "is_corrupted", "(", "x", ")", ":", "\n", "    ", "x", "=", "torch", ".", "Tensor", "(", "x", ")", "\n", "return", "(", "x", ".", "isinf", "(", ")", "+", "x", ".", "isnan", "(", ")", ")", ".", "any", "(", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.Window.__init__": [[90, 104], ["torch.load", "torch.load", "[].split", "os.splitext", "os.splitext"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.split"], ["def", "__init__", "(", "self", ",", "window_path", ",", "sampling_path", ")", ":", "\n", "# Recover useful information from the path", "\n", "        ", "self", ".", "path", "=", "window_path", "\n", "self", ".", "sampling_path", "=", "sampling_path", "\n", "split", ",", "modality", ",", "sequence_name", ",", "window_name", "=", "osp", ".", "splitext", "(", "\n", "window_path", ")", "[", "0", "]", ".", "split", "(", "'/'", ")", "[", "-", "4", ":", "]", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "modality", "=", "modality", "\n", "self", ".", "sequence", "=", "sequence_name", "\n", "self", ".", "window", "=", "window_name", "\n", "\n", "# Load window data and sampling data", "\n", "self", ".", "_data", "=", "torch", ".", "load", "(", "window_path", ")", "\n", "self", ".", "_sampling", "=", "torch", ".", "load", "(", "sampling_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.Window.data": [[105, 108], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "data", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_data", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.Window.num_points": [[109, 112], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_points", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "data", ".", "num_nodes", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.Window.centers": [[113, 116], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "centers", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_sampling", "[", "'data'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.Window.sampling_labels": [[117, 120], ["torch.from_numpy"], "methods", ["None"], ["", "@", "property", "\n", "def", "sampling_labels", "(", "self", ")", ":", "\n", "        ", "return", "torch", ".", "from_numpy", "(", "self", ".", "_sampling", "[", "'labels'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.Window.sampling_label_counts": [[121, 124], ["torch.from_numpy"], "methods", ["None"], ["", "@", "property", "\n", "def", "sampling_label_counts", "(", "self", ")", ":", "\n", "        ", "return", "torch", ".", "from_numpy", "(", "self", ".", "_sampling", "[", "'label_counts'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.Window.sampling_grid_size": [[125, 128], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "sampling_grid_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_sampling", "[", "'grid_size'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.Window.num_centers": [[129, 132], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_centers", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "centers", ".", "num_nodes", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.Window.num_raw_points": [[133, 136], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_raw_points", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_sampling", "[", "'num_raw_points'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.Window.__repr__": [[137, 142], ["getattr"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "display_attr", "=", "[", "\n", "'split'", ",", "'sequence'", ",", "'window'", ",", "'num_points'", ",", "'num_centers'", "]", "\n", "attr", "=", "', '", ".", "join", "(", "[", "f'{a}={getattr(self, a)}'", "for", "a", "in", "display_attr", "]", ")", "\n", "return", "f'{self.__class__.__name__}({attr})'", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.WindowBuffer.__init__": [[155, 160], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "kitti360_dataset", ",", "size", "=", "3", ")", ":", "\n", "        ", "self", ".", "_dataset", "=", "kitti360_dataset", "\n", "self", ".", "_size", "=", "size", "\n", "self", ".", "_queue", "=", "[", "]", "\n", "self", ".", "_windows", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.WindowBuffer.__len__": [[161, 163], ["len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_queue", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.WindowBuffer.is_full": [[164, 167], ["len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "@", "property", "\n", "def", "is_full", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ")", "==", "self", ".", "_size", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.WindowBuffer.idx_loaded": [[168, 171], ["list", "kitti360.WindowBuffer._windows.keys"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.mock.MockDatasetConfig.keys"], ["", "@", "property", "\n", "def", "idx_loaded", "(", "self", ")", ":", "\n", "        ", "return", "list", "(", "self", ".", "_windows", ".", "keys", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.WindowBuffer.__getitem__": [[172, 190], ["kitti360.Window", "kitti360.WindowBuffer._queue.append", "kitti360.WindowBuffer._drop_oldest_window"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.WindowBuffer._drop_oldest_window"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\"Load a window into memory based on its index in\n        `self._dataset.windows`.\n        \"\"\"", "\n", "# Check if the window is not already loaded", "\n", "if", "idx", "in", "self", ".", "idx_loaded", ":", "\n", "            ", "return", "self", ".", "_windows", "[", "idx", "]", "\n", "\n", "# If the buffer is full, drop the oldest window", "\n", "", "if", "self", ".", "is_full", ":", "\n", "            ", "self", ".", "_drop_oldest_window", "(", ")", "\n", "\n", "# Load the window data and associated sampling data", "\n", "", "self", ".", "_windows", "[", "idx", "]", "=", "Window", "(", "\n", "self", ".", "_dataset", ".", "paths", "[", "idx", "]", ",", "self", ".", "_dataset", ".", "sampling_paths", "[", "idx", "]", ")", "\n", "self", ".", "_queue", ".", "append", "(", "idx", ")", "\n", "\n", "return", "self", ".", "_windows", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.WindowBuffer._drop_oldest_window": [[191, 195], ["kitti360.WindowBuffer._queue.pop", "kitti360.WindowBuffer._windows.pop"], "methods", ["None"], ["", "def", "_drop_oldest_window", "(", "self", ")", ":", "\n", "        ", "\"\"\"Drop in FIFO order.\"\"\"", "\n", "idx", "=", "self", ".", "_queue", ".", "pop", "(", "0", ")", "\n", "_", "=", "self", ".", "_windows", ".", "pop", "(", "idx", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.WindowBuffer.clear": [[196, 199], ["None"], "methods", ["None"], ["", "def", "clear", "(", "self", ")", ":", "\n", "        ", "\"\"\"Clear the buffer.\"\"\"", "\n", "self", ".", "_windows", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.__init__": [[254, 327], ["torch_geometric.data.InMemoryDataset.__init__", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "enumerate", "kitti360.WindowBuffer", "torch.load", "torch.LongTensor", "torch.LongTensor", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "ValueError", "kitti360.KITTI360Cylinder._label_counts.sum", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["def", "__init__", "(", "\n", "self", ",", "root", ",", "split", "=", "\"train\"", ",", "sample_per_epoch", "=", "15000", ",", "radius", "=", "6", ",", "\n", "sample_res", "=", "6", ",", "transform", "=", "None", ",", "pre_transform", "=", "None", ",", "\n", "pre_filter", "=", "None", ",", "keep_instance", "=", "False", ",", "buffer", "=", "3", ")", ":", "\n", "\n", "        ", "self", ".", "_split", "=", "split", "\n", "self", ".", "_sample_per_epoch", "=", "sample_per_epoch", "\n", "self", ".", "_radius", "=", "radius", "\n", "self", ".", "_sample_res", "=", "sample_res", "\n", "self", ".", "_keep_instance", "=", "keep_instance", "\n", "\n", "# Initialization with downloading and all preprocessing", "\n", "super", "(", ")", ".", "__init__", "(", "root", ",", "transform", ",", "pre_transform", ",", "pre_filter", ")", "\n", "\n", "# Read all sampling files to prepare for cylindrical sampling.", "\n", "# If self.is_random (ie sample_per_eopch > 0), need to recover", "\n", "# each window's sampling centers label counts for class-balanced", "\n", "# sampling. Otherwise, need to recover the number of cylinders", "\n", "# per window for deterministic sampling.", "\n", "self", ".", "_label_counts", "=", "torch", ".", "zeros", "(", "\n", "len", "(", "self", ".", "windows", ")", ",", "self", ".", "num_classes", ")", ".", "long", "(", ")", "\n", "self", ".", "_sampling_sizes", "=", "torch", ".", "zeros", "(", "len", "(", "self", ".", "windows", ")", ")", ".", "long", "(", ")", "\n", "self", ".", "_window_sizes", "=", "torch", ".", "zeros", "(", "len", "(", "self", ".", "windows", ")", ")", ".", "long", "(", ")", "\n", "self", ".", "_window_raw_sizes", "=", "torch", ".", "zeros", "(", "len", "(", "self", ".", "windows", ")", ")", ".", "long", "(", ")", "\n", "\n", "for", "i", ",", "path", "in", "enumerate", "(", "self", ".", "sampling_paths", ")", ":", "\n", "\n", "# Recover the label of cylindrical sampling centers and", "\n", "# their count in each window", "\n", "            ", "sampling", "=", "torch", ".", "load", "(", "path", ")", "\n", "centers", "=", "sampling", "[", "'data'", "]", "\n", "\n", "# Save the number of sampling cylinders in the window", "\n", "self", ".", "_sampling_sizes", "[", "i", "]", "=", "centers", ".", "num_nodes", "\n", "\n", "# Save the number of points in the window, this will be", "\n", "# passed in the Data objects generated by the dataset for", "\n", "# the KITTI360Tracker to use when computing votes on", "\n", "# overlapping cylinders", "\n", "self", ".", "_window_sizes", "[", "i", "]", "=", "sampling", "[", "'num_points'", "]", "\n", "self", ".", "_window_raw_sizes", "[", "i", "]", "=", "sampling", "[", "'num_raw_points'", "]", "\n", "\n", "# If class-balanced sampling is not necessary, skip the rest", "\n", "if", "not", "self", ".", "is_random", ":", "\n", "                ", "continue", "\n", "\n", "# If the data has no labels, class-balanced sampling cannot", "\n", "# be performed", "\n", "", "if", "sampling", "[", "'labels'", "]", "is", "None", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "f'Cannot do class-balanced random sampling if data has no '", "\n", "f'labels. Please set sample_per_epoch=0 for test data.'", ")", "\n", "\n", "# Save the label counts for each window sampling. Cylinders", "\n", "# whose center label is IGNORE will not be sampled", "\n", "", "labels", "=", "torch", ".", "LongTensor", "(", "sampling", "[", "'labels'", "]", ")", "\n", "counts", "=", "torch", ".", "LongTensor", "(", "sampling", "[", "'label_counts'", "]", ")", "\n", "valid_labels", "=", "labels", "!=", "IGNORE", "\n", "labels", "=", "labels", "[", "valid_labels", "]", "\n", "counts", "=", "counts", "[", "valid_labels", "]", "\n", "self", ".", "_label_counts", "[", "i", ",", "labels", "]", "=", "counts", "\n", "\n", "", "if", "self", ".", "is_random", ":", "\n", "            ", "assert", "self", ".", "_label_counts", ".", "sum", "(", ")", ">", "0", ",", "'The dataset has no sampling centers with relevant classes, '", "'check that your data has labels, that they follow the '", "'nomenclature defined for KITTI360, that your dataset uses '", "'enough windows and has reasonable downsampling and '", "'cylinder sampling resolutions.'", "\n", "\n", "# Initialize the window buffer that will take care of loading", "\n", "# and dropping windows in memory", "\n", "", "self", ".", "_buffer", "=", "WindowBuffer", "(", "self", ",", "buffer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.split": [[328, 331], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "split", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_split", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.has_labels": [[332, 336], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "has_labels", "(", "self", ")", ":", "\n", "        ", "\"\"\"Self-explanatory attribute needed for BaseDataset.\"\"\"", "\n", "return", "self", ".", "split", "!=", "'test'", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.sample_per_epoch": [[337, 352], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "sample_per_epoch", "(", "self", ")", ":", "\n", "        ", "\"\"\"Rules the sampling mechanism for the dataset.\n\n        When `self.sample_per_epoch > 0`, indexing the dataset produces\n        random cylindrical sampling, picked so as to even-out the class\n        distribution across the dataset.\n\n        When `self.sample_per_epoch <= 0`, indexing the dataset\n        addresses cylindrical samples in a deterministic fashion. The\n        cylinder indices are ordered with respect to their acquisition\n        window and the regular grid sampling of the centers in each\n        window.\n        \"\"\"", "\n", "return", "self", ".", "_sample_per_epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.is_random": [[353, 356], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "is_random", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "sample_per_epoch", ">", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.radius": [[357, 361], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "radius", "(", "self", ")", ":", "\n", "        ", "\"\"\"The radius of cylindrical samples.\"\"\"", "\n", "return", "self", ".", "_radius", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.sample_res": [[362, 369], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "sample_res", "(", "self", ")", ":", "\n", "        ", "\"\"\"The resolution of the grid on which cylindrical samples are\n        generated. The higher the sample_res, the less cylinders in the\n        dataset.\n        \"\"\"", "\n", "return", "self", ".", "_sample_res", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.windows": [[370, 376], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "windows", "(", "self", ")", ":", "\n", "        ", "\"\"\"Filenames of the dataset windows.\"\"\"", "\n", "if", "self", ".", "split", "==", "'trainval'", ":", "\n", "            ", "return", "self", ".", "_WINDOWS", "[", "'train'", "]", "+", "self", ".", "_WINDOWS", "[", "'val'", "]", "\n", "", "return", "self", ".", "_WINDOWS", "[", "self", ".", "split", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.paths": [[377, 383], ["os.join", "os.join"], "methods", ["None"], ["", "@", "property", "\n", "def", "paths", "(", "self", ")", ":", "\n", "        ", "\"\"\"Paths to the dataset windows data.\"\"\"", "\n", "return", "[", "\n", "osp", ".", "join", "(", "self", ".", "processed_dir", ",", "p", ")", "\n", "for", "p", "in", "self", ".", "processed_3d_file_names", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.sampling_paths": [[384, 390], ["os.join", "os.join"], "methods", ["None"], ["", "@", "property", "\n", "def", "sampling_paths", "(", "self", ")", ":", "\n", "        ", "\"\"\"Paths to the dataset windows sampling data.\"\"\"", "\n", "return", "[", "\n", "osp", ".", "join", "(", "self", ".", "processed_dir", ",", "p", ")", "\n", "for", "p", "in", "self", ".", "processed_3d_sampling_file_names", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.label_counts": [[391, 398], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "label_counts", "(", "self", ")", ":", "\n", "        ", "\"\"\"Count of cylindrical sampling center of each class, for each\n        window. Used for class-balanced random sampling of cylinders in\n        the dataset, when self.is_random==True.\n        \"\"\"", "\n", "return", "self", ".", "_label_counts", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.sampling_sizes": [[399, 406], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "sampling_sizes", "(", "self", ")", ":", "\n", "        ", "\"\"\"Number of cylindrical sampling, for each window. Used for\n        deterministic sampling of cylinders in the dataset, when\n        self.is_random==False.\n        \"\"\"", "\n", "return", "self", ".", "_sampling_sizes", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.window_sizes": [[407, 416], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "window_sizes", "(", "self", ")", ":", "\n", "        ", "\"\"\"Number of points for each pre_transformed window. This\n        information will be passed in the Data objects generated by the\n        dataset for the KITTI360Tracker to use when accumulating\n        predictions on overlapping cylinders and any other voting\n        schemes.\n        \"\"\"", "\n", "return", "self", ".", "_window_sizes", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.window_raw_sizes": [[417, 425], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "window_raw_sizes", "(", "self", ")", ":", "\n", "        ", "\"\"\"Number of points for each raw window. This information will\n        be passed in the Data objects generated by the dataset for the\n        KITTI360Tracker to use when accumulating predictions on\n        overlapping cylinders and any other voting schemes.\n        \"\"\"", "\n", "return", "self", ".", "_window_raw_sizes", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.buffer": [[426, 430], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "buffer", "(", "self", ")", ":", "\n", "        ", "\"\"\"Buffer holding currently loaded windows.\"\"\"", "\n", "return", "self", ".", "_buffer", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.raw_file_structure": [[431, 441], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "raw_file_structure", "(", "self", ")", ":", "\n", "        ", "return", "\"\"\"\n    root_dir/\n        \u2514\u2500\u2500 raw/\n            \u2514\u2500\u2500 data_3d_semantics/\n                \u2514\u2500\u2500 2013_05_28_drive_{seq:0>4}_sync/\n                    \u2514\u2500\u2500 static/\n                        \u2514\u2500\u2500 {start_frame:0>10}_{end_frame:0>10}.ply\n            \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.raw_file_names": [[442, 446], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "raw_file_names", "(", "self", ")", ":", "\n", "        ", "\"\"\"The file paths to find in order to skip the download.\"\"\"", "\n", "return", "self", ".", "raw_file_names_3d", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.raw_file_names_3d": [[447, 458], ["os.join", "os.join", "x.split", "x.split"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.split", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.split"], ["", "@", "property", "\n", "def", "raw_file_names_3d", "(", "self", ")", ":", "\n", "        ", "\"\"\"Some of the file paths to find in order to skip the download.\n        Those are not directly specified inside of self.raw_file_names\n        in case self.raw_file_names would need to be extended (eg with\n        3D bounding boxes files).\n        \"\"\"", "\n", "return", "[", "\n", "osp", ".", "join", "(", "'data_3d_semantics'", ",", "x", ".", "split", "(", "'/'", ")", "[", "0", "]", ",", "'static'", ",", "\n", "x", ".", "split", "(", "'/'", ")", "[", "1", "]", "+", "'.ply'", ")", "\n", "for", "x", "in", "self", ".", "windows", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.processed_3d_file_names": [[459, 470], ["os.join", "os.join", "os.join", "os.join"], "methods", ["None"], ["", "@", "property", "\n", "def", "processed_3d_file_names", "(", "self", ")", ":", "\n", "# For 'trainval', we use files from 'train' and 'val' to save", "\n", "# memory", "\n", "        ", "if", "self", ".", "split", "==", "'trainval'", ":", "\n", "            ", "return", "[", "\n", "osp", ".", "join", "(", "s", ",", "'3d'", ",", "f'{w}.pt'", ")", "\n", "for", "s", "in", "(", "'train'", ",", "'val'", ")", "\n", "for", "w", "in", "self", ".", "_WINDOWS", "[", "s", "]", "]", "\n", "\n", "", "return", "[", "osp", ".", "join", "(", "self", ".", "split", ",", "'3d'", ",", "f'{w}.pt'", ")", "for", "w", "in", "self", ".", "windows", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.processed_3d_sampling_file_names": [[471, 484], ["os.join", "os.join", "os.join", "os.join", "hash", "hash"], "methods", ["None"], ["", "@", "property", "\n", "def", "processed_3d_sampling_file_names", "(", "self", ")", ":", "\n", "# For 'trainval', we use files from 'train' and 'val' to save", "\n", "# memory", "\n", "        ", "if", "self", ".", "split", "==", "'trainval'", ":", "\n", "            ", "return", "[", "\n", "osp", ".", "join", "(", "s", ",", "'3d'", ",", "f'{w}_{hash(self.sample_res)}.pt'", ")", "\n", "for", "s", "in", "(", "'train'", ",", "'val'", ")", "\n", "for", "w", "in", "self", ".", "_WINDOWS", "[", "s", "]", "]", "\n", "\n", "", "return", "[", "\n", "osp", ".", "join", "(", "self", ".", "split", ",", "'3d'", ",", "f'{w}_{hash(self.sample_res)}.pt'", ")", "\n", "for", "w", "in", "self", ".", "windows", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.processed_file_names": [[485, 492], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "processed_file_names", "(", "self", ")", ":", "\n", "        ", "\"\"\"The name of the files to find in the :obj:`self.processed_dir`\n        folder in order to skip the processing\n        \"\"\"", "\n", "return", "self", ".", "processed_3d_file_names", "+", "self", ".", "processed_3d_sampling_file_names", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.submission_dir": [[493, 510], ["os.join", "os.join", "os.join", "os.join", "getattr", "getattr", "datetime.datetime.datetime.now", "datetime.datetime.datetime.now"], "methods", ["None"], ["", "@", "property", "\n", "def", "submission_dir", "(", "self", ")", ":", "\n", "        ", "\"\"\"Submissions are saved in the `submissions` folder, in the\n        same hierarchy as `raw` and `processed` directories. Each\n        submission has a sub-directory of its own, named based on the\n        date and time of creation.\n        \"\"\"", "\n", "submissions_dir", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "\"submissions\"", ")", "\n", "date", "=", "'-'", ".", "join", "(", "[", "\n", "f'{getattr(datetime.now(), x)}'", "\n", "for", "x", "in", "[", "'year'", ",", "'month'", ",", "'day'", "]", "]", ")", "\n", "time", "=", "'-'", ".", "join", "(", "[", "\n", "f'{getattr(datetime.now(), x)}'", "\n", "for", "x", "in", "[", "'hour'", ",", "'minute'", ",", "'second'", "]", "]", ")", "\n", "submission_name", "=", "f'{date}_{time}'", "\n", "path", "=", "osp", ".", "join", "(", "submissions_dir", ",", "submission_name", ")", "\n", "return", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.download": [[511, 527], ["kitti360.KITTI360Cylinder.download_warning", "os.dirname", "os.dirname", "os.join", "os.join", "os.abspath", "os.abspath", "all", "kitti360.KITTI360Cylinder.download_message", "os.join", "os.join", "torch_points3d.utils.download.run_command", "os.exists", "os.exists", "os.join", "os.join"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.download_warning", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.download_message", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.download.run_command"], ["", "def", "download", "(", "self", ")", ":", "\n", "        ", "self", ".", "download_warning", "(", ")", "\n", "\n", "# Location of the KITTI-360 download shell scripts", "\n", "here", "=", "osp", ".", "dirname", "(", "osp", ".", "abspath", "(", "__file__", ")", ")", "\n", "scripts_dir", "=", "osp", ".", "join", "(", "here", ",", "'../../../scripts/datasets'", ")", "\n", "\n", "# Accumulated 3D point clouds with annotations", "\n", "if", "not", "all", "(", "osp", ".", "exists", "(", "osp", ".", "join", "(", "self", ".", "raw_dir", ",", "x", ")", ")", "for", "x", "in", "self", ".", "raw_file_names_3d", ")", ":", "\n", "            ", "if", "self", ".", "split", "!=", "'test'", ":", "\n", "                ", "msg", "=", "'Accumulated Point Clouds for Train & Val (12G)'", "\n", "", "else", ":", "\n", "                ", "msg", "=", "'Accumulated Point Clouds for Test (1.2G)'", "\n", "", "self", ".", "download_message", "(", "msg", ")", "\n", "script", "=", "osp", ".", "join", "(", "scripts_dir", ",", "'download_kitti360_3d_semantics.sh'", ")", "\n", "run_command", "(", "[", "f'{script} {self.raw_dir} {self.split}'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.download_warning": [[528, 539], ["print", "print", "print", "print", "print", "input", "print"], "methods", ["None"], ["", "", "def", "download_warning", "(", "self", ")", ":", "\n", "# Warning message for the user about to download", "\n", "        ", "print", "(", "\n", "f\"WARNING: You are about to download KITTI-360 data from: \"", "\n", "f\"{CVLIBS_URL}\"", ")", "\n", "print", "(", "\"Files will be organized in the following structure:\"", ")", "\n", "print", "(", "self", ".", "raw_file_structure", ")", "\n", "print", "(", "\"\"", ")", "\n", "print", "(", "\"Press any key to continue, or CTRL-C to exit.\"", ")", "\n", "input", "(", "\"\"", ")", "\n", "print", "(", "\"\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.download_message": [[540, 542], ["print"], "methods", ["None"], ["", "def", "download_message", "(", "self", ",", "msg", ")", ":", "\n", "        ", "print", "(", "f'Downloading \"{msg}\" to {self.raw_dir}...'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.process": [[543, 546], ["tqdm.auto.tqdm.auto.tqdm", "zip", "kitti360.KITTI360Cylinder._process_3d"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder._process_3d"], ["", "def", "process", "(", "self", ")", ":", "\n", "        ", "for", "path_tuple", "in", "tq", "(", "zip", "(", "self", ".", "paths", ",", "self", ".", "sampling_paths", ")", ")", ":", "\n", "            ", "self", ".", "_process_3d", "(", "*", "path_tuple", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder._process_3d": [[547, 636], ["kitti360.KITTI360Cylinder.clone", "torch_points3d.GridSampling3D", "torch_points3d.GridSampling3D.", "hasattr", "torch.save", "os.exists", "os.exists", "os.exists", "os.exists", "[].split", "os.exists", "os.exists", "os.exists", "os.exists", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "os.join", "os.join", "kitti360.read_kitti360_window", "sklearn.neighbors.KDTree", "torch.save", "torch.load", "numpy.unique", "os.remove", "os.remove", "os.remove", "os.remove", "os.dirname", "os.dirname", "kitti360.KITTI360Cylinder.pre_transform", "numpy.asarray", "delattr", "numpy.asarray", "torch.load", "torch.load", "os.splitext", "os.splitext"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.clone", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.split", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.makedirs", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.makedirs", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.makedirs", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.makedirs", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.read_kitti360_window", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load"], ["", "", "def", "_process_3d", "(", "self", ",", "window_path", ",", "sampling_path", ",", "return_loaded", "=", "False", ")", ":", "\n", "        ", "\"\"\"Internal method called by `self.process` to preprocess 3D\n        points. This function is not directly written in `self.process`\n        so as to help `KITTI360CylinderMM.process` benefit from this\n        method to avoid re-loading the same window multiple times.\n        \"\"\"", "\n", "# If required files exist, skip processing", "\n", "if", "osp", ".", "exists", "(", "window_path", ")", "and", "osp", ".", "exists", "(", "sampling_path", ")", ":", "\n", "            ", "if", "return_loaded", ":", "\n", "                ", "return", "torch", ".", "load", "(", "window_path", ")", ",", "torch", ".", "load", "(", "sampling_path", ")", "\n", "", "else", ":", "\n", "                ", "return", "\n", "\n", "# Extract useful information from <path>", "\n", "", "", "split", ",", "modality", ",", "sequence_name", ",", "window_name", "=", "osp", ".", "splitext", "(", "window_path", ")", "[", "0", "]", ".", "split", "(", "'/'", ")", "[", "-", "4", ":", "]", "\n", "\n", "# Process the window", "\n", "if", "not", "osp", ".", "exists", "(", "window_path", ")", ":", "\n", "\n", "# If windows sampling data already exists, remove it,", "\n", "# because it may be out-of-date", "\n", "            ", "if", "osp", ".", "exists", "(", "sampling_path", ")", ":", "\n", "                ", "os", ".", "remove", "(", "sampling_path", ")", "\n", "\n", "# Create necessary parent folders if need be", "\n", "", "os", ".", "makedirs", "(", "osp", ".", "dirname", "(", "window_path", ")", ",", "exist_ok", "=", "True", ")", "\n", "\n", "# Read the raw window data", "\n", "raw_window_path", "=", "osp", ".", "join", "(", "\n", "self", ".", "raw_dir", ",", "'data_3d_semantics'", ",", "sequence_name", ",", "'static'", ",", "\n", "window_name", "+", "'.ply'", ")", "\n", "data", "=", "read_kitti360_window", "(", "\n", "raw_window_path", ",", "instance", "=", "self", ".", "_keep_instance", ",", "remap", "=", "True", ")", "\n", "num_raw_points", "=", "data", ".", "num_nodes", "\n", "\n", "# Apply pre_transform", "\n", "if", "self", ".", "pre_transform", "is", "not", "None", ":", "\n", "                ", "data", "=", "self", ".", "pre_transform", "(", "data", ")", "\n", "\n", "# Pre-compute KD-Tree to save time when sampling later", "\n", "", "tree", "=", "KDTree", "(", "np", ".", "asarray", "(", "data", ".", "pos", "[", ":", ",", ":", "-", "1", "]", ")", ",", "leaf_size", "=", "10", ")", "\n", "data", "[", "cT", ".", "CylinderSampling", ".", "KDTREE_KEY", "]", "=", "tree", "\n", "\n", "# Save the number of points in raw window", "\n", "data", ".", "num_raw_points", "=", "num_raw_points", "\n", "\n", "# Save pre_transformed data to the processed dir/<path>", "\n", "torch", ".", "save", "(", "data", ",", "window_path", ")", "\n", "\n", "", "else", ":", "\n", "            ", "data", "=", "torch", ".", "load", "(", "window_path", ")", "\n", "\n", "# Prepare data to build cylinder centers. Only keep 'pos'", "\n", "# and 'y' (if any) attributes and drop the z coordinate in", "\n", "# 'pos'. NB: we initialize centers as a clone of data and", "\n", "# modify centers inplace subsequently.", "\n", "", "centers", "=", "data", ".", "clone", "(", ")", "\n", "for", "key", "in", "centers", ".", "keys", ":", "\n", "            ", "if", "key", "not", "in", "[", "'pos'", ",", "'y'", "]", ":", "\n", "                ", "delattr", "(", "centers", ",", "key", ")", "\n", "", "", "centers", ".", "pos", "[", ":", ",", "2", "]", "=", "0", "\n", "\n", "# Compute the sampling of cylinder centers for the window", "\n", "sampler", "=", "cT", ".", "GridSampling3D", "(", "size", "=", "self", ".", "sample_res", ")", "\n", "centers", "=", "sampler", "(", "centers", ")", "\n", "centers", ".", "pos", "=", "centers", ".", "pos", "[", ":", ",", ":", "2", "]", "\n", "sampling", "=", "{", "\n", "'data'", ":", "centers", ",", "\n", "'labels'", ":", "None", ",", "\n", "'label_counts'", ":", "None", ",", "\n", "'grid_size'", ":", "self", ".", "sample_res", ",", "\n", "'num_points'", ":", "data", ".", "num_nodes", ",", "\n", "'num_raw_points'", ":", "data", ".", "num_raw_points", "}", "\n", "\n", "# If data has labels (ie not test set), save which labels", "\n", "# are present in the window and their count. These will be", "\n", "# used at sampling time to pick cylinders so as to even-out", "\n", "# class distributions", "\n", "if", "hasattr", "(", "centers", ",", "'y'", ")", ":", "\n", "            ", "unique", ",", "counts", "=", "np", ".", "unique", "(", "\n", "np", ".", "asarray", "(", "centers", ".", "y", ")", ",", "return_counts", "=", "True", ")", "\n", "sampling", "[", "'labels'", "]", "=", "unique", "\n", "sampling", "[", "'label_counts'", "]", "=", "counts", "\n", "\n", "", "torch", ".", "save", "(", "sampling", ",", "sampling_path", ")", "\n", "\n", "if", "return_loaded", ":", "\n", "            ", "return", "data", ",", "sampling", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.__len__": [[637, 640], ["kitti360.KITTI360Cylinder.sampling_sizes.sum"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "sample_per_epoch", "if", "self", ".", "is_random", "else", "self", ".", "sampling_sizes", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.__getitem__": [[641, 669], ["isinstance", "kitti360.KITTI360Cylinder._get_from_label_and_window_idx", "kitti360.KITTI360Cylinder._get_from_global_idx", "kitti360.KITTI360Cylinder.transform"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder._get_from_label_and_window_idx", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder._get_from_global_idx"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "r\"\"\"Gets the cylindrical sample at index `idx` and transforms it\n        (in case a `self.transform` is given).\n\n        The expected indexing format depends on `self.is_random`. If\n        `self.is_random=True` (ie `self.sample_per_epoch > 0`), then\n        `idx` is a tuple carrying `(label, idx_window)` indicating\n        which label to pick from which window. If `self.is_random=False`\n        then `idx` is an integer in [0, len(self)-1] indicating which\n        cylinder to pick among the whole dataset.\n\n        NB: if, instead of a `(label, idx_window)` tuple, a single\n        integer `idx` is passed to a `self.is_random=True` dataset,\n        `__getitem__` will fallback to `self.is_random=False` behavior.\n        This mechanism is required for some PyTorch Dataset core\n        functionalities calling `self[0]`.\n        \"\"\"", "\n", "# Pick a 3D cylindrical sample. This will take care of 'smart'", "\n", "# window loading for us", "\n", "if", "self", ".", "is_random", "and", "isinstance", "(", "idx", ",", "tuple", ")", ":", "\n", "            ", "data", "=", "self", ".", "_get_from_label_and_window_idx", "(", "*", "idx", ")", "\n", "", "else", ":", "\n", "            ", "data", "=", "self", ".", "_get_from_global_idx", "(", "idx", ")", "\n", "\n", "# Apply 3D transforms", "\n", "", "data", "=", "data", "if", "self", ".", "transform", "is", "None", "else", "self", ".", "transform", "(", "data", ")", "\n", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder._get_from_label_and_window_idx": [[670, 693], ["numpy.random.choice", "torch_points3d.CylinderSampling", "torch_points3d.CylinderSampling.", "int", "int", "torch.where", "valid_centers.numpy", "int"], "methods", ["None"], ["", "def", "_get_from_label_and_window_idx", "(", "self", ",", "label", ",", "idx_window", ")", ":", "\n", "        ", "\"\"\"Load a random cylindrical sample of label `\u00ecdx_label` from\n        window `idx_window`.\n        \"\"\"", "\n", "# Load the associated window", "\n", "window", "=", "self", ".", "buffer", "[", "int", "(", "idx_window", ")", "]", "\n", "\n", "# Pick a random center", "\n", "valid_centers", "=", "torch", ".", "where", "(", "window", ".", "centers", ".", "y", "==", "label", ")", "[", "0", "]", "\n", "idx_center", "=", "np", ".", "random", ".", "choice", "(", "valid_centers", ".", "numpy", "(", ")", ")", "\n", "\n", "# Get the cylindrical sampling", "\n", "center", "=", "window", ".", "centers", ".", "pos", "[", "idx_center", "]", "\n", "sampler", "=", "cT", ".", "CylinderSampling", "(", "\n", "self", ".", "radius", ",", "center", ",", "align_origin", "=", "False", ")", "\n", "data", "=", "sampler", "(", "window", ".", "data", ")", "\n", "\n", "# Save the window index and center index in the data. This will", "\n", "# be used in the KITTI360Tracker to accumulate per-window votes", "\n", "data", ".", "idx_window", "=", "int", "(", "idx_window", ")", "\n", "data", ".", "idx_center", "=", "int", "(", "idx_center", ")", "\n", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder._get_from_global_idx": [[694, 719], ["kitti360.KITTI360Cylinder.sampling_sizes.cumsum", "torch.bucketize", "torch.cat().long", "torch_points3d.CylinderSampling", "torch_points3d.CylinderSampling.clone", "int", "int", "torch.cat", "int", "torch_points3d.CylinderSampling.", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.clone", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat"], ["", "def", "_get_from_global_idx", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\"Load the cylindrical sample of global index `idx`. The global\n        indices refer to sampling centers considered in `self.windows`\n        order.\n        \"\"\"", "\n", "# Split the global idx into idx_window and idx_center", "\n", "cum_sizes", "=", "self", ".", "sampling_sizes", ".", "cumsum", "(", "0", ")", "\n", "idx_window", "=", "torch", ".", "bucketize", "(", "idx", ",", "cum_sizes", ",", "right", "=", "True", ")", "\n", "offsets", "=", "torch", ".", "cat", "(", "(", "torch", ".", "zeros", "(", "1", ")", ",", "cum_sizes", ")", ")", ".", "long", "(", ")", "\n", "idx_center", "=", "idx", "-", "offsets", "[", "idx_window", "]", "\n", "\n", "# Load the associated window", "\n", "window", "=", "self", ".", "buffer", "[", "int", "(", "idx_window", ")", "]", "\n", "\n", "# Get the cylindrical sampling", "\n", "center", "=", "window", ".", "centers", ".", "pos", "[", "idx_center", "]", "\n", "sampler", "=", "cT", ".", "CylinderSampling", "(", "self", ".", "radius", ",", "center", ",", "align_origin", "=", "False", ")", "\n", "data", "=", "sampler", "(", "window", ".", "data", ")", ".", "clone", "(", ")", "\n", "\n", "# Save the window index and center index in the data. This will", "\n", "# be used in the KITTI360Tracker to accumulate per-window votes", "\n", "data", ".", "idx_window", "=", "int", "(", "idx_window", ")", "\n", "data", ".", "idx_center", "=", "int", "(", "idx_center", ")", "\n", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder._pick_random_label_and_window": [[720, 746], ["numpy.random.choice", "numpy.random.choice", "ValueError", "torch.where", "seen_labels.numpy", "range", "len", "kitti360.KITTI360Cylinder.label_counts.sum", "counts.sum"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "def", "_pick_random_label_and_window", "(", "self", ")", ":", "\n", "        ", "\"\"\"Generate a `(label, idx_window)` tuple as expected by\n        `self.__getitem` when `self.is_random=True`.\n\n        This function is typically intended be used by a PyTorch Sampler\n        to build a generator to iterate over random samples of the\n        dataset while minimizing window loading overheads.\n        \"\"\"", "\n", "if", "not", "self", ".", "is_random", ":", "\n", "            ", "raise", "ValueError", "(", "'Set sample_per_epoch > 0 for random sampling.'", ")", "\n", "\n", "# First, pick a class randomly. This guarantees all classes are", "\n", "# equally represented. Note that classes are assumed to be all", "\n", "# integers in [0, self.num_classes-1] here. Besides, if a class", "\n", "# is absent from label_counts (ie no cylinder carries the", "\n", "# label), it will not be picked.", "\n", "", "seen_labels", "=", "torch", ".", "where", "(", "self", ".", "label_counts", ".", "sum", "(", "dim", "=", "0", ")", ">", "0", ")", "[", "0", "]", "\n", "label", "=", "np", ".", "random", ".", "choice", "(", "seen_labels", ".", "numpy", "(", ")", ")", "\n", "\n", "# Then, pick a window that has a cylinder with such class, based", "\n", "# on class counts.", "\n", "counts", "=", "self", ".", "label_counts", "[", ":", ",", "label", "]", "\n", "weights", "=", "(", "counts", "/", "counts", ".", "sum", "(", ")", ")", ".", "numpy", "(", ")", "\n", "idx_window", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "len", "(", "self", ".", "windows", ")", ")", ",", "p", "=", "weights", ")", "\n", "\n", "return", "label", ",", "idx_window", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.indices": [[752, 759], ["pyg.__version__.split", "super().indices", "int", "int", "range", "len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.split", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis_area5_office40.S3DISOriginalFusedMM.indices", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "def", "indices", "(", "self", ")", ":", "\n", "        ", "import", "torch_geometric", "as", "pyg", "\n", "version", "=", "pyg", ".", "__version__", ".", "split", "(", "'.'", ")", "\n", "is_new_pyg", "=", "int", "(", "version", "[", "0", "]", ")", ">=", "2", "or", "int", "(", "version", "[", "1", "]", ")", ">=", "7", "\n", "if", "is_new_pyg", ":", "\n", "            ", "return", "range", "(", "len", "(", "self", ")", ")", "if", "self", ".", "_indices", "is", "None", "else", "self", ".", "_indices", "\n", "", "return", "super", "(", ")", ".", "indices", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.MiniKITTI360Cylinder.process": [[773, 775], ["kitti360.KITTI360Cylinder.process"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.classification.modelnet.SampledModelNet.process"], ["def", "process", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "process", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.MiniKITTI360Cylinder.download": [[778, 780], ["kitti360.KITTI360Cylinder.download"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.classification.modelnet.SampledModelNet.download"], ["", "def", "download", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "download", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Sampler.__init__": [[799, 805], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "dataset", ",", "max_consecutive", "=", "40", ")", ":", "\n", "# This sampler only makes sense for KITTICylinder datasets", "\n", "# implementing random sampling (ie dataset.is_random=True)", "\n", "        ", "assert", "dataset", ".", "is_random", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "max_consecutive", "=", "max_consecutive", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Sampler.__iter__": [[806, 857], ["torch.empty", "torch.empty", "range", "torch.empty.unique", "window_order[].argsort", "enumerate", "random.shuffle", "torch.cat", "iter", "len", "len", "len", "kitti360.KITTI360Sampler.dataset._pick_random_label_and_window", "iter", "torch.randperm", "indices.append", "indices.append", "torch.bincount", "torch.arange", "torch.arange", "zip", "zip", "torch.empty.tolist", "torch.empty.tolist", "torch.empty.tolist", "torch.empty.tolist"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder._pick_random_label_and_window", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "# Generate random (label, idx_window) tuple indices", "\n", "        ", "labels", "=", "torch", ".", "empty", "(", "len", "(", "self", ")", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "windows", "=", "torch", ".", "empty", "(", "len", "(", "self", ")", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ")", ")", ":", "\n", "            ", "label", ",", "idx_window", "=", "self", ".", "dataset", ".", "_pick_random_label_and_window", "(", ")", "\n", "labels", "[", "i", "]", "=", "label", "\n", "windows", "[", "i", "]", "=", "idx_window", "\n", "\n", "# Shuffle the order in which required windows will be loaded", "\n", "", "unique_windows", ",", "unique_inverse", "=", "windows", ".", "unique", "(", "return_inverse", "=", "True", ")", "\n", "window_order", "=", "unique_windows", "[", "torch", ".", "randperm", "(", "unique_windows", ".", "shape", "[", "0", "]", ")", "]", "\n", "\n", "# Compute the order in which the cylinders will be loaded. Note", "\n", "# this disregards the max_consecutive for now", "\n", "order", "=", "window_order", "[", "unique_inverse", "]", ".", "argsort", "(", ")", "\n", "\n", "# Sort the windows and labels", "\n", "labels", "=", "labels", "[", "order", "]", "\n", "windows", "=", "windows", "[", "order", "]", "\n", "\n", "# If the max_consecutive limit is respected, end here", "\n", "if", "(", "torch", ".", "bincount", "(", "windows", ")", "<=", "self", ".", "max_consecutive", ")", ".", "all", "(", ")", ":", "\n", "            ", "return", "iter", "(", "[", "\n", "(", "l", ",", "w", ")", "for", "l", ",", "w", "in", "zip", "(", "labels", ".", "tolist", "(", ")", ",", "windows", ".", "tolist", "(", ")", ")", "]", ")", "\n", "\n", "# Accumulate the samplings in same-window consecutive groups of", "\n", "# the max_consecutive or less. Store the", "\n", "", "indices", "=", "[", "]", "\n", "group_w", "=", "windows", "[", "0", "]", "\n", "group_start", "=", "0", "\n", "for", "i", ",", "w", "in", "enumerate", "(", "windows", ")", ":", "\n", "            ", "if", "w", "!=", "group_w", "or", "(", "i", "-", "group_start", ")", ">=", "self", ".", "max_consecutive", ":", "\n", "                ", "indices", ".", "append", "(", "torch", ".", "arange", "(", "group_start", ",", "i", ")", ")", "\n", "group_w", "=", "w", "\n", "group_start", "=", "i", "\n", "\n", "# Make last group 'manually'", "\n", "", "if", "i", "==", "windows", ".", "shape", "[", "0", "]", "-", "1", ":", "\n", "                ", "indices", ".", "append", "(", "torch", ".", "arange", "(", "group_start", ",", "i", "+", "1", ")", ")", "\n", "\n", "# Shuffle the groups of indices and concatenate them into the", "\n", "# final sampling order", "\n", "", "", "shuffle", "(", "indices", ")", "\n", "order", "=", "torch", ".", "cat", "(", "indices", ")", "\n", "\n", "# Sort the windows and labels to account for max_consecutive", "\n", "labels", "=", "labels", "[", "order", "]", "\n", "windows", "=", "windows", "[", "order", "]", "\n", "\n", "return", "iter", "(", "[", "(", "l", ",", "w", ")", "for", "l", ",", "w", "in", "zip", "(", "labels", ".", "tolist", "(", ")", ",", "windows", ".", "tolist", "(", ")", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Sampler.__len__": [[858, 860], ["len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Sampler.__repr__": [[861, 863], ["len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "f'{self.__class__.__name__}(num_samples={len(self)})'", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Dataset.__init__": [[874, 932], ["torch_points3d.datasets.base_dataset.BaseDataset.__init__", "dataset_opt.get", "dataset_opt.get", "dataset_opt.get", "dataset_opt.get", "dataset_opt.get", "dataset_opt.get", "cls", "cls", "cls", "kitti360.KITTI360Sampler", "dataset_opt.get", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get"], ["def", "__init__", "(", "self", ",", "dataset_opt", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dataset_opt", ")", "\n", "\n", "cls", "=", "MiniKITTI360Cylinder", "if", "dataset_opt", ".", "get", "(", "'mini'", ",", "False", ")", "else", "KITTI360Cylinder", "\n", "radius", "=", "dataset_opt", ".", "get", "(", "'radius'", ")", "\n", "train_sample_res", "=", "dataset_opt", ".", "get", "(", "'train_sample_res'", ",", "radius", "/", "20", ")", "\n", "eval_sample_res", "=", "dataset_opt", ".", "get", "(", "'eval_sample_res'", ",", "radius", ")", "\n", "keep_instance", "=", "dataset_opt", ".", "get", "(", "'keep_instance'", ",", "False", ")", "\n", "sample_per_epoch", "=", "dataset_opt", ".", "get", "(", "'sample_per_epoch'", ",", "12000", ")", "\n", "train_is_trainval", "=", "dataset_opt", ".", "get", "(", "'train_is_trainval'", ",", "False", ")", "\n", "\n", "self", ".", "train_dataset", "=", "cls", "(", "\n", "self", ".", "_data_path", ",", "\n", "radius", "=", "radius", ",", "\n", "sample_res", "=", "train_sample_res", ",", "\n", "keep_instance", "=", "keep_instance", ",", "\n", "sample_per_epoch", "=", "sample_per_epoch", ",", "\n", "split", "=", "'train'", "if", "not", "train_is_trainval", "else", "'trainval'", ",", "\n", "pre_transform", "=", "self", ".", "pre_transform", ",", "\n", "transform", "=", "self", ".", "train_transform", ")", "\n", "\n", "self", ".", "val_dataset", "=", "cls", "(", "\n", "self", ".", "_data_path", ",", "\n", "radius", "=", "radius", ",", "\n", "sample_res", "=", "eval_sample_res", ",", "\n", "keep_instance", "=", "keep_instance", ",", "\n", "sample_per_epoch", "=", "-", "1", ",", "\n", "split", "=", "'val'", ",", "\n", "pre_transform", "=", "self", ".", "pre_transform", ",", "\n", "transform", "=", "self", ".", "val_transform", ")", "\n", "\n", "self", ".", "test_dataset", "=", "cls", "(", "\n", "self", ".", "_data_path", ",", "\n", "radius", "=", "radius", ",", "\n", "sample_res", "=", "eval_sample_res", ",", "\n", "keep_instance", "=", "keep_instance", ",", "\n", "sample_per_epoch", "=", "-", "1", ",", "\n", "split", "=", "'test'", ",", "\n", "pre_transform", "=", "self", ".", "pre_transform", ",", "\n", "transform", "=", "self", ".", "test_transform", ")", "\n", "\n", "# A dedicated sampler must be created for the train set. Indeed,", "\n", "# self.train_dataset.sample_per_epoch > 0 means cylindrical", "\n", "# samples will be picked randomly across all windows. In order", "\n", "# to minimize window loading overheads, the train_sampler", "\n", "# organizes the epoch batches so that same-window cylinders are", "\n", "# queried consecutively.", "\n", "self", ".", "train_sampler", "=", "KITTI360Sampler", "(", "self", ".", "train_dataset", ")", "\n", "\n", "# If a `class_weight_method` is provided in the dataset config,", "\n", "# the dataset will have a `weight_classes` to be used when", "\n", "# computing the loss", "\n", "if", "dataset_opt", ".", "class_weight_method", ":", "\n", "# TODO: find an elegant way of returning class weights for", "\n", "#  train set", "\n", "            ", "raise", "NotImplementedError", "(", "\n", "'KITTI360Dataset does not support class weights yet.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Dataset.submission_dir": [[933, 936], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "submission_dir", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "train_dataset", ".", "submission_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Dataset.get_tracker": [[937, 953], ["KITTI360Tracker"], "methods", ["None"], ["", "def", "get_tracker", "(", "self", ",", "wandb_log", ":", "bool", ",", "tensorboard_log", ":", "bool", ")", ":", "\n", "        ", "\"\"\"Factory method for the tracker\n\n        Arguments:\n            wandb_log - Log using weight and biases\n            tensorboard_log - Log using tensorboard\n        Returns:\n            [BaseTracker] -- tracker\n        \"\"\"", "\n", "# NB: this import needs to be here because of a loop between the", "\n", "# `dataset.segmentation.kitti360` and `metrics.kitti360_tracker`", "\n", "# modules imports", "\n", "from", "torch_points3d", ".", "metrics", ".", "kitti360_tracker", "import", "KITTI360Tracker", "\n", "return", "KITTI360Tracker", "(", "\n", "self", ",", "wandb_log", "=", "wandb_log", ",", "use_tensorboard", "=", "tensorboard_log", ",", "\n", "ignore_label", "=", "IGNORE", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.read_kitti360_window": [[27, 53], ["torch_geometric.data.Data", "open", "plyfile.PlyData.read", "torch.stack", "torch.LongTensor", "torch.LongTensor", "torch.stack", "torch.FloatTensor", "torch.from_numpy", "torch.FloatTensor"], "function", ["None"], ["def", "read_kitti360_window", "(", "\n", "filepath", ",", "xyz", "=", "True", ",", "rgb", "=", "True", ",", "semantic", "=", "True", ",", "instance", "=", "False", ",", "\n", "remap", "=", "False", ")", ":", "\n", "    ", "data", "=", "Data", "(", ")", "\n", "with", "open", "(", "filepath", ",", "\"rb\"", ")", "as", "f", ":", "\n", "        ", "window", "=", "PlyData", ".", "read", "(", "f", ")", "\n", "attributes", "=", "[", "p", ".", "name", "for", "p", "in", "window", "[", "'vertex'", "]", ".", "properties", "]", "\n", "\n", "if", "xyz", ":", "\n", "            ", "data", ".", "pos", "=", "torch", ".", "stack", "(", "[", "\n", "torch", ".", "FloatTensor", "(", "window", "[", "\"vertex\"", "]", "[", "axis", "]", ")", "\n", "for", "axis", "in", "[", "\"x\"", ",", "\"y\"", ",", "\"z\"", "]", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "if", "rgb", ":", "\n", "            ", "data", ".", "rgb", "=", "torch", ".", "stack", "(", "[", "\n", "torch", ".", "FloatTensor", "(", "window", "[", "\"vertex\"", "]", "[", "axis", "]", ")", "\n", "for", "axis", "in", "[", "\"red\"", ",", "\"green\"", ",", "\"blue\"", "]", "]", ",", "dim", "=", "-", "1", ")", "/", "255", "\n", "\n", "", "if", "semantic", "and", "'semantic'", "in", "attributes", ":", "\n", "            ", "y", "=", "torch", ".", "LongTensor", "(", "window", "[", "\"vertex\"", "]", "[", "'semantic'", "]", ")", "\n", "data", ".", "y", "=", "torch", ".", "from_numpy", "(", "ID2TRAINID", ")", "[", "y", "]", "if", "remap", "else", "y", "\n", "\n", "", "if", "instance", "and", "'instance'", "in", "attributes", ":", "\n", "            ", "data", ".", "instance", "=", "torch", ".", "LongTensor", "(", "window", "[", "\"vertex\"", "]", "[", "'instance'", "]", ")", "\n", "\n", "", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.read_variable": [[55, 81], ["fid.seek", "fid.readline.replace", "fid.readline.split", "numpy.array().reshape", "fid.readline", "fid.readline.startswith", "len", "float", "numpy.array"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.split", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "def", "read_variable", "(", "fid", ",", "name", ",", "M", ",", "N", ")", ":", "\n", "    ", "\"\"\"Credit: https://github.com/autonomousvision/kitti360Scripts\"\"\"", "\n", "# rewind", "\n", "fid", ".", "seek", "(", "0", ",", "0", ")", "\n", "\n", "# search for variable identifier", "\n", "line", "=", "1", "\n", "success", "=", "0", "\n", "while", "line", ":", "\n", "        ", "line", "=", "fid", ".", "readline", "(", ")", "\n", "if", "line", ".", "startswith", "(", "name", ")", ":", "\n", "            ", "success", "=", "1", "\n", "break", "\n", "\n", "# return if variable identifier not found", "\n", "", "", "if", "success", "==", "0", ":", "\n", "        ", "return", "None", "\n", "\n", "# fill matrix", "\n", "", "line", "=", "line", ".", "replace", "(", "'%s:'", "%", "name", ",", "''", ")", "\n", "line", "=", "line", ".", "split", "(", ")", "\n", "assert", "(", "len", "(", "line", ")", "==", "M", "*", "N", ")", "\n", "line", "=", "[", "float", "(", "x", ")", "for", "x", "in", "line", "]", "\n", "mat", "=", "np", ".", "array", "(", "line", ")", ".", "reshape", "(", "M", ",", "N", ")", "\n", "\n", "return", "mat", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.base.Segmentation_MP.__init__": [[13, 34], ["torch_points3d.models.base_architectures.UnetBasedModel.__init__", "option.mlp_cls.get", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get"], ["    ", "def", "__init__", "(", "self", ",", "option", ",", "model_type", ",", "dataset", ",", "modules", ")", ":", "\n", "        ", "\"\"\"Initialize this model class.\n        Parameters:\n            opt -- training/test options\n        A few things can be done here.\n        - (required) call the initialization function of BaseModel\n        - define loss function, visualization images, model names, and optimizers\n        \"\"\"", "\n", "UnetBasedModel", ".", "__init__", "(", "\n", "self", ",", "option", ",", "model_type", ",", "dataset", ",", "modules", "\n", ")", "# call the initialization method of UnetBasedModel", "\n", "\n", "self", ".", "_weight_classes", "=", "dataset", ".", "weight_classes", "\n", "\n", "nn", "=", "option", ".", "mlp_cls", ".", "nn", "\n", "self", ".", "dropout", "=", "option", ".", "mlp_cls", ".", "get", "(", "\"dropout\"", ")", "\n", "self", ".", "lin1", "=", "torch", ".", "nn", ".", "Linear", "(", "nn", "[", "0", "]", ",", "nn", "[", "1", "]", ")", "\n", "self", ".", "lin2", "=", "torch", ".", "nn", ".", "Linear", "(", "nn", "[", "2", "]", ",", "nn", "[", "3", "]", ")", "\n", "self", ".", "lin3", "=", "torch", ".", "nn", ".", "Linear", "(", "nn", "[", "4", "]", ",", "dataset", ".", "num_classes", ")", "\n", "\n", "self", ".", "loss_names", "=", "[", "\"loss_seg\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.base.Segmentation_MP.set_input": [[35, 44], ["data.to.to.to"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to"], ["", "def", "set_input", "(", "self", ",", "data", ",", "device", ")", ":", "\n", "        ", "\"\"\"Unpack input data from the dataloader and perform necessary pre-processing steps.\n        Parameters:\n            input: a dictionary that contains the data itself and its metadata information.\n        \"\"\"", "\n", "data", "=", "data", ".", "to", "(", "device", ")", "\n", "self", ".", "input", "=", "data", "\n", "self", ".", "labels", "=", "data", ".", "y", "\n", "self", ".", "batch_idx", "=", "data", ".", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.base.Segmentation_MP.forward": [[45, 59], ["base.Segmentation_MP.model", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "base.Segmentation_MP.lin2", "torch.dropout", "torch.dropout", "base.Segmentation_MP.lin3", "torch.log_softmax", "torch.log_softmax", "base.Segmentation_MP.lin1", "bool", "bool", "torch.nll_loss", "torch.nll_loss", "base.Segmentation_MP.get_internal_loss"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.get_internal_loss"], ["", "def", "forward", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", "->", "Any", ":", "\n", "        ", "\"\"\"Run forward pass. This will be called by both functions <optimize_parameters> and <test>.\"\"\"", "\n", "data", "=", "self", ".", "model", "(", "self", ".", "input", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "lin1", "(", "data", ".", "x", ")", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "bool", "(", "self", ".", "training", ")", ")", "\n", "x", "=", "self", ".", "lin2", "(", "x", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "bool", "(", "self", ".", "training", ")", ")", "\n", "x", "=", "self", ".", "lin3", "(", "x", ")", "\n", "self", ".", "output", "=", "F", ".", "log_softmax", "(", "x", ",", "dim", "=", "-", "1", ")", "\n", "\n", "if", "self", ".", "labels", "is", "not", "None", ":", "\n", "            ", "self", ".", "loss_seg", "=", "F", ".", "nll_loss", "(", "self", ".", "output", ",", "self", ".", "labels", ",", "ignore_index", "=", "IGNORE_LABEL", ")", "+", "self", ".", "get_internal_loss", "(", ")", "\n", "\n", "", "return", "self", ".", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.base.Segmentation_MP.backward": [[60, 65], ["base.Segmentation_MP.loss_seg.backward"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.panoptic.pointgroup.PointGroup.backward"], ["", "def", "backward", "(", "self", ")", ":", "\n", "        ", "\"\"\"Calculate losses, gradients, and update network weights; called in every training iteration\"\"\"", "\n", "# caculate the intermediate results if necessary; here self.output has been computed during function <forward>", "\n", "# calculate loss given the input and intermediate results", "\n", "self", ".", "loss_seg", ".", "backward", "(", ")", "# calculate gradients of network G w.r.t. loss_G", "\n", "", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.ppnet.PPNet.__init__": [[23, 76], ["getattr", "torch_points3d.models.base_architectures.unet.UnwrappedUnetBasedModel.__init__", "ppnet.PPNet.init_weights", "len", "log.info", "torch_points3d.core.common_modules.MultiHeadClassifier", "torch.nn.Sequential", "range", "ppnet.PPNet.FC_layer.add_module", "ppnet.PPNet.FC_layer.add_module", "ValueError", "len", "ppnet.PPNet.FC_layer.add_module", "ppnet.PPNet.FC_layer.add_module", "Lin", "torch.nn.LogSoftmax", "str", "torch.nn.Sequential", "torch.nn.Dropout", "torch.nn.Linear", "torch_points3d.core.common_modules.FastBatchNorm1d", "LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.initializer.initializer.init_weights", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["    ", "def", "__init__", "(", "self", ",", "option", ",", "model_type", ",", "dataset", ",", "modules", ")", ":", "\n", "# Extract parameters from the dataset", "\n", "        ", "self", ".", "_num_classes", "=", "dataset", ".", "num_classes", "\n", "self", ".", "_weight_classes", "=", "dataset", ".", "weight_classes", "\n", "self", ".", "_use_category", "=", "getattr", "(", "option", ",", "\"use_category\"", ",", "False", ")", "\n", "if", "self", ".", "_use_category", ":", "\n", "            ", "if", "not", "dataset", ".", "class_to_segments", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "\"The dataset needs to specify a class_to_segments property when using category information for multimodal\"", "\n", ")", "\n", "", "self", ".", "_class_to_seg", "=", "dataset", ".", "class_to_segments", "\n", "self", ".", "_num_categories", "=", "len", "(", "self", ".", "_class_to_seg", ")", "\n", "log", ".", "info", "(", "\"Using category information for the predictions with %i categories\"", ",", "self", ".", "_num_categories", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_num_categories", "=", "0", "\n", "\n", "# Assemble encoder / decoder", "\n", "", "UnwrappedUnetBasedModel", ".", "__init__", "(", "self", ",", "option", ",", "model_type", ",", "dataset", ",", "modules", ")", "\n", "\n", "# Build final MLP", "\n", "last_mlp_opt", "=", "option", ".", "mlp_cls", "\n", "if", "self", ".", "_use_category", ":", "\n", "            ", "self", ".", "FC_layer", "=", "MultiHeadClassifier", "(", "\n", "last_mlp_opt", ".", "nn", "[", "0", "]", ",", "\n", "self", ".", "_class_to_seg", ",", "\n", "dropout_proba", "=", "last_mlp_opt", ".", "dropout", ",", "\n", "bn_momentum", "=", "last_mlp_opt", ".", "bn_momentum", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "in_feat", "=", "last_mlp_opt", ".", "nn", "[", "0", "]", "+", "self", ".", "_num_categories", "\n", "self", ".", "FC_layer", "=", "Sequential", "(", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "last_mlp_opt", ".", "nn", ")", ")", ":", "\n", "                ", "self", ".", "FC_layer", ".", "add_module", "(", "\n", "str", "(", "i", ")", ",", "\n", "Sequential", "(", "\n", "*", "[", "\n", "Linear", "(", "in_feat", ",", "last_mlp_opt", ".", "nn", "[", "i", "]", ",", "bias", "=", "False", ")", ",", "\n", "FastBatchNorm1d", "(", "last_mlp_opt", ".", "nn", "[", "i", "]", ",", "momentum", "=", "last_mlp_opt", ".", "bn_momentum", ")", ",", "\n", "LeakyReLU", "(", "0.2", ")", ",", "\n", "]", "\n", ")", ",", "\n", ")", "\n", "in_feat", "=", "last_mlp_opt", ".", "nn", "[", "i", "]", "\n", "\n", "", "if", "last_mlp_opt", ".", "dropout", ":", "\n", "                ", "self", ".", "FC_layer", ".", "add_module", "(", "\"Dropout\"", ",", "Dropout", "(", "p", "=", "last_mlp_opt", ".", "dropout", ")", ")", "\n", "\n", "", "self", ".", "FC_layer", ".", "add_module", "(", "\"Class\"", ",", "Lin", "(", "in_feat", ",", "self", ".", "_num_classes", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "FC_layer", ".", "add_module", "(", "\"Softmax\"", ",", "nn", ".", "LogSoftmax", "(", "-", "1", ")", ")", "\n", "", "self", ".", "loss_names", "=", "[", "\"loss_seg\"", "]", "\n", "\n", "self", ".", "visual_names", "=", "[", "\"data_visual\"", "]", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.ppnet.PPNet.set_input": [[77, 99], ["data.to.to.to", "isinstance"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to"], ["", "def", "set_input", "(", "self", ",", "data", ",", "device", ")", ":", "\n", "        ", "\"\"\"Unpack input data from the dataloader and perform necessary pre-processing steps.\n        Parameters:\n            input: a dictionary that contains the data itself and its metadata information.\n        \"\"\"", "\n", "data", "=", "data", ".", "to", "(", "device", ")", "\n", "\n", "if", "isinstance", "(", "data", ",", "MultiScaleBatch", ")", ":", "\n", "            ", "self", ".", "pre_computed", "=", "data", ".", "multiscale", "\n", "self", ".", "upsample", "=", "data", ".", "upsample", "\n", "del", "data", ".", "upsample", "\n", "del", "data", ".", "multiscale", "\n", "", "else", ":", "\n", "            ", "self", ".", "upsample", "=", "None", "\n", "self", ".", "pre_computed", "=", "None", "\n", "\n", "", "self", ".", "input", "=", "data", "\n", "self", ".", "labels", "=", "data", ".", "y", "\n", "self", ".", "batch_idx", "=", "data", ".", "batch", "\n", "\n", "if", "self", ".", "_use_category", ":", "\n", "            ", "self", ".", "category", "=", "data", ".", "category", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.ppnet.PPNet.forward": [[100, 135], ["range", "range", "stack_down.append", "isinstance", "stack_down.append", "len", "ppnet.PPNet.FC_layer", "ppnet.PPNet.FC_layer", "ppnet.PPNet.compute_loss", "torch.max", "len", "stack_down.pop", "stack_down.pop"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.kpconv.FragmentKPConv.compute_loss", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "", "def", "forward", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", "->", "Any", ":", "\n", "        ", "\"\"\"Run forward pass. This will be called by both functions <optimize_parameters> and <test>.\"\"\"", "\n", "stack_down", "=", "[", "]", "\n", "\n", "data", "=", "self", ".", "input", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "down_modules", ")", "-", "1", ")", ":", "\n", "            ", "data", "=", "self", ".", "down_modules", "[", "i", "]", "(", "data", ",", "precomputed", "=", "self", ".", "pre_computed", ")", "\n", "stack_down", ".", "append", "(", "data", ")", "\n", "\n", "", "data", "=", "self", ".", "down_modules", "[", "-", "1", "]", "(", "data", ",", "precomputed", "=", "self", ".", "pre_computed", ")", "\n", "innermost", "=", "False", "\n", "\n", "if", "not", "isinstance", "(", "self", ".", "inner_modules", "[", "0", "]", ",", "Identity", ")", ":", "\n", "            ", "stack_down", ".", "append", "(", "data", ")", "\n", "data", "=", "self", ".", "inner_modules", "[", "0", "]", "(", "data", ")", "\n", "innermost", "=", "True", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "self", ".", "up_modules", ")", ")", ":", "\n", "            ", "if", "i", "==", "0", "and", "innermost", ":", "\n", "                ", "data", "=", "self", ".", "up_modules", "[", "i", "]", "(", "(", "data", ",", "stack_down", ".", "pop", "(", ")", ")", ")", "\n", "", "else", ":", "\n", "                ", "data", "=", "self", ".", "up_modules", "[", "i", "]", "(", "(", "data", ",", "stack_down", ".", "pop", "(", ")", ")", ",", "precomputed", "=", "self", ".", "upsample", ")", "\n", "\n", "", "", "last_feature", "=", "data", ".", "x", "\n", "if", "self", ".", "_use_category", ":", "\n", "            ", "self", ".", "output", "=", "self", ".", "FC_layer", "(", "last_feature", ",", "self", ".", "category", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "output", "=", "self", ".", "FC_layer", "(", "last_feature", ")", "\n", "\n", "", "if", "self", ".", "labels", "is", "not", "None", ":", "\n", "            ", "self", ".", "compute_loss", "(", ")", "\n", "\n", "", "self", ".", "data_visual", "=", "self", ".", "input", "\n", "self", ".", "data_visual", ".", "pred", "=", "torch", ".", "max", "(", "self", ".", "output", ",", "-", "1", ")", "[", "1", "]", "\n", "return", "self", ".", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.ppnet.PPNet.compute_loss": [[136, 141], ["torch.nll_loss", "ppnet.PPNet._weight_classes.to"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to"], ["", "def", "compute_loss", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_weight_classes", "is", "not", "None", ":", "\n", "            ", "self", ".", "_weight_classes", "=", "self", ".", "_weight_classes", ".", "to", "(", "self", ".", "output", ".", "device", ")", "\n", "\n", "", "self", ".", "loss", "=", "F", ".", "nll_loss", "(", "self", ".", "output", ",", "self", ".", "labels", ",", "weight", "=", "self", ".", "_weight_classes", ",", "ignore_index", "=", "IGNORE_LABEL", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.ppnet.PPNet.backward": [[142, 147], ["ppnet.PPNet.loss.backward"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.panoptic.pointgroup.PointGroup.backward"], ["", "def", "backward", "(", "self", ")", ":", "\n", "        ", "\"\"\"Calculate losses, gradients, and update network weights; called in every training iteration\"\"\"", "\n", "# caculate the intermediate results if necessary; here self.output has been computed during function <forward>", "\n", "# calculate loss given the input and intermediate results", "\n", "self", ".", "loss", ".", "backward", "(", ")", "# calculate gradients of network G w.r.t. loss_G", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.ppnet.PPNet.init_weights": [[148, 155], ["ppnet.PPNet.modules", "isinstance", "isinstance", "isinstance", "torch.nn.init.xavier_normal_", "torch.nn.init.zeros_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "Conv1d", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "# torch.nn.init.kaiming_normal_(m.weight)", "\n", "                ", "torch", ".", "nn", ".", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "torch", ".", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kpconv.KPConvPaper.__init__": [[23, 81], ["getattr", "torch_points3d.models.base_architectures.unet.UnwrappedUnetBasedModel.__init__", "kpconv.KPConvPaper.get_from_opt", "kpconv.KPConvPaper.get_from_opt", "len", "log.info", "torch_points3d.core.common_modules.MultiHeadClassifier", "torch.nn.Sequential", "range", "kpconv.KPConvPaper.FC_layer.add_module", "kpconv.KPConvPaper.FC_layer.add_module", "ValueError", "len", "kpconv.KPConvPaper.FC_layer.add_module", "kpconv.KPConvPaper.FC_layer.add_module", "Lin", "torch.nn.LogSoftmax", "str", "torch.nn.Sequential", "torch.nn.Dropout", "torch.nn.Linear", "torch_points3d.core.common_modules.FastBatchNorm1d", "LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.get_from_opt", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.get_from_opt", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["architecture", ":", "str", "=", "None", ",", "input_nc", ":", "int", "=", "None", ",", "num_layers", ":", "int", "=", "None", ",", "config", ":", "DictConfig", "=", "None", ",", "*", "args", ",", "**", "kwargs", "\n", ")", ":", "\n", "    ", "\"\"\" Create a KPConv backbone model based on the architecture proposed in\n    https://arxiv.org/abs/1904.08889\n\n    Parameters\n    ----------\n    architecture : str, optional\n        Architecture of the model, choose from unet, encoder and decoder\n    input_nc : int, optional\n        Number of channels for the input\n    output_nc : int, optional\n        If specified, then we add a fully connected head at the end of the network to provide the requested dimension\n    num_layers : int, optional\n        Depth of the network\n    in_grid_size : float, optional\n        Size of the grid at the entry of the network. It is divided by two at each layer\n    in_feat : int, optional\n        Number of channels after the first convolution. Doubles at each layer\n    config : DictConfig, optional\n        Custom config, overrides the num_layers and architecture parameters\n    \"\"\"", "\n", "factory", "=", "KPConvFactory", "(", "\n", "architecture", "=", "architecture", ",", "num_layers", "=", "num_layers", ",", "input_nc", "=", "input_nc", ",", "config", "=", "config", ",", "**", "kwargs", "\n", ")", "\n", "return", "factory", ".", "build", "(", ")", "\n", "\n", "\n", "", "class", "KPConvFactory", "(", "ModelFactory", ")", ":", "\n", "    ", "def", "_build_unet", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_config", ":", "\n", "            ", "model_config", "=", "self", ".", "_config", "\n", "", "else", ":", "\n", "            ", "path_to_model", "=", "os", ".", "path", ".", "join", "(", "PATH_TO_CONFIG", ",", "\"unet_{}.yaml\"", ".", "format", "(", "self", ".", "num_layers", ")", ")", "\n", "model_config", "=", "OmegaConf", ".", "load", "(", "path_to_model", ")", "\n", "", "ModelFactory", ".", "resolve_model", "(", "model_config", ",", "self", ".", "num_features", ",", "self", ".", "_kwargs", ")", "\n", "modules_lib", "=", "sys", ".", "modules", "[", "__name__", "]", "\n", "return", "KPConvUnet", "(", "model_config", ",", "None", ",", "None", ",", "modules_lib", ",", "**", "self", ".", "kwargs", ")", "\n", "\n", "", "def", "_build_encoder", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_config", ":", "\n", "            ", "model_config", "=", "self", ".", "_config", "\n", "", "else", ":", "\n", "            ", "path_to_model", "=", "os", ".", "path", ".", "join", "(", "PATH_TO_CONFIG", ",", "\"encoder_{}.yaml\"", ".", "format", "(", "self", ".", "num_layers", ")", ")", "\n", "model_config", "=", "OmegaConf", ".", "load", "(", "path_to_model", ")", "\n", "", "ModelFactory", ".", "resolve_model", "(", "model_config", ",", "self", ".", "num_features", ",", "self", ".", "_kwargs", ")", "\n", "modules_lib", "=", "sys", ".", "modules", "[", "__name__", "]", "\n", "return", "KPConvEncoder", "(", "model_config", ",", "None", ",", "None", ",", "modules_lib", ",", "**", "self", ".", "kwargs", ")", "\n", "\n", "\n", "", "", "class", "BaseKPConv", "(", "UnwrappedUnetBasedModel", ")", ":", "\n", "    ", "CONV_TYPE", "=", "\"partial_dense\"", "\n", "\n", "def", "__init__", "(", "self", ",", "model_config", ",", "model_type", ",", "dataset", ",", "modules", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "BaseKPConv", ",", "self", ")", ".", "__init__", "(", "model_config", ",", "model_type", ",", "dataset", ",", "modules", ")", "\n", "try", ":", "\n", "            ", "default_output_nc", "=", "extract_output_nc", "(", "model_config", ")", "\n", "", "except", ":", "\n", "            ", "default_output_nc", "=", "-", "1", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kpconv.KPConvPaper.set_input": [[82, 105], ["data.to.to.to", "add_ones", "isinstance"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.KPConv.kernels.add_ones"], ["log", ".", "warning", "(", "\"Could not resolve number of output channels\"", ")", "\n", "\n", "", "self", ".", "_output_nc", "=", "default_output_nc", "\n", "self", ".", "_has_mlp_head", "=", "False", "\n", "if", "\"output_nc\"", "in", "kwargs", ":", "\n", "            ", "self", ".", "_has_mlp_head", "=", "True", "\n", "self", ".", "_output_nc", "=", "kwargs", "[", "\"output_nc\"", "]", "\n", "self", ".", "mlp", "=", "MLP", "(", "[", "default_output_nc", ",", "self", ".", "output_nc", "]", ",", "activation", "=", "torch", ".", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "bias", "=", "False", ")", "\n", "\n", "", "", "@", "property", "\n", "def", "has_mlp_head", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_has_mlp_head", "\n", "\n", "", "@", "property", "\n", "def", "output_nc", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_output_nc", "\n", "\n", "", "def", "_set_input", "(", "self", ",", "data", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kpconv.KPConvPaper.forward": [[106, 141], ["range", "range", "stack_down.append", "isinstance", "stack_down.append", "len", "kpconv.KPConvPaper.FC_layer", "kpconv.KPConvPaper.FC_layer", "kpconv.KPConvPaper.compute_loss", "torch.max", "len", "stack_down.pop", "stack_down.pop"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.kpconv.FragmentKPConv.compute_loss", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["\n", "data", "=", "data", ".", "to", "(", "self", ".", "device", ")", "\n", "if", "isinstance", "(", "data", ",", "MultiScaleBatch", ")", ":", "\n", "            ", "self", ".", "pre_computed", "=", "data", ".", "multiscale", "\n", "self", ".", "upsample", "=", "data", ".", "upsample", "\n", "del", "data", ".", "upsample", "\n", "del", "data", ".", "multiscale", "\n", "", "else", ":", "\n", "            ", "self", ".", "upsample", "=", "None", "\n", "self", ".", "pre_computed", "=", "None", "\n", "\n", "", "self", ".", "input", "=", "data", "\n", "\n", "\n", "", "", "class", "KPConvEncoder", "(", "BaseKPConv", ")", ":", "\n", "    ", "def", "forward", "(", "self", ",", "data", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Parameters\n        -----------\n        data:\n            A dictionary that contains the data itself and its metadata information. Should contain\n            - pos [N, 3]\n            - x [N, C]\n            - multiscale (optional) precomputed data for the down convolutions\n            - upsample (optional) precomputed data for the up convolutions\n\n        Returns\n        --------\n        data:\n            - pos [1, 3] - Dummy pos\n            - x [1, output_nc]\n        \"\"\"", "\n", "self", ".", "_set_input", "(", "data", ")", "\n", "data", "=", "self", ".", "input", "\n", "stack_down", "=", "[", "data", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "down_modules", ")", "-", "1", ")", ":", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kpconv.KPConvPaper.compute_loss": [[142, 160], ["torch.nll_loss", "kpconv.KPConvPaper._weight_classes.to", "kpconv.KPConvPaper.get_regularization_loss", "kpconv.KPConvPaper.collect_internal_losses"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.get_regularization_loss", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.collect_internal_losses"], ["            ", "data", "=", "self", ".", "down_modules", "[", "i", "]", "(", "data", ")", "\n", "stack_down", ".", "append", "(", "data", ")", "\n", "", "data", "=", "self", ".", "down_modules", "[", "-", "1", "]", "(", "data", ")", "\n", "\n", "if", "not", "isinstance", "(", "self", ".", "inner_modules", "[", "0", "]", ",", "Identity", ")", ":", "\n", "            ", "stack_down", ".", "append", "(", "data", ")", "\n", "data", "=", "self", ".", "inner_modules", "[", "0", "]", "(", "data", ")", "\n", "\n", "", "if", "self", ".", "has_mlp_head", ":", "\n", "            ", "data", ".", "x", "=", "self", ".", "mlp", "(", "data", ".", "x", ")", "\n", "", "return", "data", "\n", "\n", "\n", "", "", "class", "KPConvUnet", "(", "BaseKPConv", ")", ":", "\n", "    ", "def", "forward", "(", "self", ",", "data", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kpconv.KPConvPaper.backward": [[161, 166], ["kpconv.KPConvPaper.loss.backward"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.panoptic.pointgroup.PointGroup.backward"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.minkowski.Minkowski_Baseline_Model.__init__": [[16, 23], ["torch_points3d.models.base_model.BaseModel.__init__", "initialize_minkowski_unet", "option.get"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get"], ["\n", "\n", "CUR_FILE", "=", "os", ".", "path", ".", "realpath", "(", "__file__", ")", "\n", "DIR_PATH", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "realpath", "(", "__file__", ")", ")", "\n", "PATH_TO_CONFIG", "=", "os", ".", "path", ".", "join", "(", "DIR_PATH", ",", "\"conf/sparseconv3d\"", ")", "\n", "\n", "log", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.minkowski.Minkowski_Baseline_Model.set_input": [[24, 30], ["data.batch.squeeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "ME.SparseTensor", "data.y.to", "data.batch.unsqueeze().int", "data.coords.int", "data.batch.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.SparseTensor", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to"], ["\n", "def", "Minkowski", "(", "\n", "architecture", ":", "str", "=", "None", ",", "input_nc", ":", "int", "=", "None", ",", "num_layers", ":", "int", "=", "None", ",", "config", ":", "DictConfig", "=", "None", ",", "*", "args", ",", "**", "kwargs", "\n", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.minkowski.Minkowski_Baseline_Model.forward": [[31, 37], ["torch.log_softmax", "torch.log_softmax", "minkowski.Minkowski_Baseline_Model._weight_classes.to", "torch.nll_loss", "torch.nll_loss", "minkowski.Minkowski_Baseline_Model.model"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.minkowski.Minkowski_Baseline_Model.backward": [[38, 40], ["minkowski.Minkowski_Baseline_Model.loss_seg.backward"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.panoptic.pointgroup.PointGroup.backward"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.rsconv.RSConvLogicModel.__init__": [[19, 49], ["torch_points3d.models.base_architectures.UnwrappedUnetBasedModel.__init__", "getattr", "copy.deepcopy", "torch_points3d.core.common_modules.base_modules.Seq", "range", "rsconv.RSConvLogicModel.FC_layer.append", "len", "log.info", "len", "rsconv.RSConvLogicModel.FC_layer.append", "rsconv.RSConvLogicModel.FC_layer.append", "torch_points3d.core.common_modules.dense_modules.Conv1D", "ValueError", "dataset.class_to_segments.keys", "torch_points3d.core.common_modules.dense_modules.Conv1D", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.mock.MockDatasetConfig.keys"], ["\n", "log", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "\n", "\n", "def", "RSConv", "(", "\n", "architecture", ":", "str", "=", "None", ",", "input_nc", ":", "int", "=", "None", ",", "num_layers", ":", "int", "=", "None", ",", "config", ":", "DictConfig", "=", "None", ",", "*", "args", ",", "**", "kwargs", "\n", ")", ":", "\n", "    ", "\"\"\" Create a RSConv backbone model based on the architecture proposed in\n    https://arxiv.org/abs/1904.07601\n\n    Parameters\n    ----------\n    architecture : str, optional\n        Architecture of the model, choose from unet, encoder and decoder\n    input_nc : int, optional\n        Number of channels for the input\n    output_nc : int, optional\n        If specified, then we add a fully connected head at the end of the network to provide the requested dimension\n    num_layers : int, optional\n        Depth of the network\n    config : DictConfig, optional\n        Custom config, overrides the num_layers and architecture parameters\n    \"\"\"", "\n", "factory", "=", "RSConvFactory", "(", "\n", "architecture", "=", "architecture", ",", "num_layers", "=", "num_layers", ",", "input_nc", "=", "input_nc", ",", "config", "=", "config", ",", "**", "kwargs", "\n", ")", "\n", "return", "factory", ".", "build", "(", ")", "\n", "\n", "\n", "", "class", "RSConvFactory", "(", "ModelFactory", ")", ":", "\n", "    ", "def", "_build_unet", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.rsconv.RSConvLogicModel.set_input": [[50, 70], ["data.to.to.to", "torch.arange().view().repeat().view", "torch.arange().view().repeat().view", "torch.arange().view().repeat().view", "torch.arange().view().repeat().view", "data.to.to.x.transpose().contiguous", "torch.flatten().long", "torch.flatten().long", "torch.flatten().long", "torch.flatten().long", "torch.arange().view().repeat", "torch.arange().view().repeat", "torch.arange().view().repeat", "torch.arange().view().repeat", "data.to.to.x.transpose", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to"], ["        ", "if", "self", ".", "_config", ":", "\n", "            ", "model_config", "=", "self", ".", "_config", "\n", "", "else", ":", "\n", "            ", "path_to_model", "=", "os", ".", "path", ".", "join", "(", "PATH_TO_CONFIG", ",", "\"unet_{}.yaml\"", ".", "format", "(", "self", ".", "num_layers", ")", ")", "\n", "model_config", "=", "OmegaConf", ".", "load", "(", "path_to_model", ")", "\n", "", "ModelFactory", ".", "resolve_model", "(", "model_config", ",", "self", ".", "num_features", ",", "self", ".", "_kwargs", ")", "\n", "modules_lib", "=", "sys", ".", "modules", "[", "__name__", "]", "\n", "return", "RSConvUnet", "(", "model_config", ",", "None", ",", "None", ",", "modules_lib", ",", "**", "self", ".", "kwargs", ")", "\n", "\n", "", "def", "_build_encoder", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_config", ":", "\n", "            ", "model_config", "=", "self", ".", "_config", "\n", "", "else", ":", "\n", "            ", "path_to_model", "=", "os", ".", "path", ".", "join", "(", "PATH_TO_CONFIG", ",", "\"encoder_{}.yaml\"", ".", "format", "(", "self", ".", "num_layers", ")", ")", "\n", "model_config", "=", "OmegaConf", ".", "load", "(", "path_to_model", ")", "\n", "", "ModelFactory", ".", "resolve_model", "(", "model_config", ",", "self", ".", "num_features", ",", "self", ".", "_kwargs", ")", "\n", "modules_lib", "=", "sys", ".", "modules", "[", "__name__", "]", "\n", "return", "RSConvEncoder", "(", "model_config", ",", "None", ",", "None", ",", "modules_lib", ",", "**", "self", ".", "kwargs", ")", "\n", "\n", "\n", "", "", "class", "RSConvBase", "(", "UnwrappedUnetBasedModel", ")", ":", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.rsconv.RSConvLogicModel.forward": [[71, 122], ["queue.Queue", "stack_down.append", "range", "queue.Queue.put", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "rsconv.RSConvLogicModel.FC_layer().transpose().contiguous().view", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "[].reshape", "stack_down.append", "len", "queue.Queue.put", "torch.one_hot().float().transpose", "torch.one_hot().float().transpose", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "rsconv.RSConvLogicModel._weight_classes.to", "torch.cross_entropy", "torch.cross_entropy", "len", "len", "data_inner.x.repeat", "data_inner_2.x.repeat", "rsconv.RSConvLogicModel.FC_layer().transpose().contiguous", "queue.Queue.get", "stack_down.pop", "torch.one_hot().float", "torch.one_hot().float", "torch.max", "torch.max", "torch.max", "torch.max", "rsconv.RSConvLogicModel.FC_layer().transpose", "torch.one_hot", "torch.one_hot", "rsconv.RSConvLogicModel.FC_layer"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get"], ["    ", "CONV_TYPE", "=", "\"dense\"", "\n", "\n", "def", "__init__", "(", "self", ",", "model_config", ",", "model_type", ",", "dataset", ",", "modules", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "RSConvBase", ",", "self", ")", ".", "__init__", "(", "model_config", ",", "model_type", ",", "dataset", ",", "modules", ")", "\n", "\n", "default_output_nc", "=", "kwargs", ".", "get", "(", "\"default_output_nc\"", ",", "384", ")", "\n", "self", ".", "_has_mlp_head", "=", "False", "\n", "self", ".", "_output_nc", "=", "default_output_nc", "\n", "if", "\"output_nc\"", "in", "kwargs", ":", "\n", "            ", "self", ".", "_has_mlp_head", "=", "True", "\n", "self", ".", "_output_nc", "=", "kwargs", "[", "\"output_nc\"", "]", "\n", "self", ".", "mlp", "=", "Seq", "(", ")", "\n", "self", ".", "mlp", ".", "append", "(", "Conv1D", "(", "default_output_nc", ",", "self", ".", "_output_nc", ",", "bn", "=", "True", ",", "bias", "=", "False", ")", ")", "\n", "\n", "", "", "@", "property", "\n", "def", "has_mlp_head", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_has_mlp_head", "\n", "\n", "", "@", "property", "\n", "def", "output_nc", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_output_nc", "\n", "\n", "", "def", "_set_input", "(", "self", ",", "data", ")", ":", "\n", "        ", "\"\"\"Unpack input data from the dataloader and perform necessary pre-processing steps.\n        Parameters:\n            input: a dictionary that contains the data itself and its metadata information.\n        Sets:\n            self.input:\n                x -- Features [B, C, N]\n                pos -- Points [B, N, 3]\n        \"\"\"", "\n", "assert", "len", "(", "data", ".", "pos", ".", "shape", ")", "==", "3", "\n", "data", "=", "data", ".", "to", "(", "self", ".", "device", ")", "\n", "if", "data", ".", "x", "is", "not", "None", ":", "\n", "            ", "data", ".", "x", "=", "data", ".", "x", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "", "else", ":", "\n", "            ", "data", ".", "x", "=", "None", "\n", "", "self", ".", "input", "=", "data", "\n", "\n", "\n", "", "", "class", "RSConvEncoder", "(", "RSConvBase", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "model_config", ",", "model_type", ",", "dataset", ",", "modules", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "default_output_nc", "=", "extract_output_nc", "(", "model_config", ")", "\n", "", "except", ":", "\n", "            ", "default_output_nc", "=", "-", "1", "\n", "log", ".", "warning", "(", "\"Could not resolve number of output channels\"", ")", "\n", "", "super", "(", ")", ".", "__init__", "(", "\n", "model_config", ",", "model_type", ",", "dataset", ",", "modules", ",", "default_output_nc", "=", "default_output_nc", ",", "*", "args", ",", "**", "kwargs", "\n", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "data", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.rsconv.RSConvLogicModel.backward": [[123, 128], ["rsconv.RSConvLogicModel.loss_seg.backward"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.panoptic.pointgroup.PointGroup.backward"], ["        "]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.sparseconv3d.APIModel.__init__": [[16, 33], ["torch_points3d.models.base_model.BaseModel.__init__", "torch_points3d.applications.sparseconv3d.SparseConv3d", "torch.Sequential", "torch.Sequential", "option.get", "option.get", "torch_points3d.nn.get_backend", "torch.Linear", "torch.Linear", "option.get"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.sparseconv3d.SparseConv3d", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.__init__.get_backend", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get"], ["\n", "from", ".", "utils", "import", "extract_output_nc", "\n", "\n", "\n", "CUR_FILE", "=", "os", ".", "path", ".", "realpath", "(", "__file__", ")", "\n", "DIR_PATH", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "realpath", "(", "__file__", ")", ")", "\n", "PATH_TO_CONFIG", "=", "os", ".", "path", ".", "join", "(", "DIR_PATH", ",", "\"conf/sparseconv3d\"", ")", "\n", "\n", "log", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "\n", "\n", "def", "SparseConv3d", "(", "\n", "architecture", ":", "str", "=", "None", ",", "\n", "input_nc", ":", "int", "=", "None", ",", "\n", "num_layers", ":", "int", "=", "None", ",", "\n", "config", ":", "DictConfig", "=", "None", ",", "\n", "backend", ":", "str", "=", "\"minkowski\"", ",", "\n", "*", "args", ",", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.sparseconv3d.APIModel.set_input": [[34, 41], ["data.batch.squeeze", "getattr", "data.y.to"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to"], ["**", "kwargs", "\n", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.sparseconv3d.APIModel.forward": [[42, 56], ["sparseconv3d.APIModel.head", "torch.log_softmax", "torch.log_softmax", "sparseconv3d.APIModel.backbone", "sparseconv3d.APIModel._weight_classes.to", "torch.nll_loss", "torch.nll_loss", "torch_points3d.metrics.lovasz_loss.lovasz_softmax", "sparseconv3d.APIModel.output.exp"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.lovasz_loss.lovasz_softmax"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.sparseconv3d.APIModel.backward": [[57, 59], ["sparseconv3d.APIModel.loss_seg.backward"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.panoptic.pointgroup.PointGroup.backward"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.pointnet.PointNet.__init__": [[16, 27], ["torch_points3d.models.base_model.BaseModel.__init__", "omegaconf.OmegaConf.to_container", "torch_points3d.utils.config.ConvolutionFormatFactory.check_is_dense_format", "pointnet.PointNet._build_model"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.config.ConvolutionFormatFactory.check_is_dense_format", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.pointnet.PointNet._build_model"], ["    ", "def", "__init__", "(", "self", ",", "opt", ",", "model_type", "=", "None", ",", "dataset", "=", "None", ",", "modules", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "opt", ")", "\n", "\n", "self", ".", "_opt", "=", "OmegaConf", ".", "to_container", "(", "opt", ")", "\n", "self", ".", "_is_dense", "=", "ConvolutionFormatFactory", ".", "check_is_dense_format", "(", "self", ".", "conv_type", ")", "\n", "\n", "self", ".", "_build_model", "(", ")", "\n", "\n", "self", ".", "loss_names", "=", "[", "\"loss_seg\"", ",", "\"loss_internal\"", "]", "\n", "\n", "self", ".", "visual_names", "=", "[", "\"data_visual\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.pointnet.PointNet.set_input": [[28, 44], ["data.to.to.to", "pointnet.PointNet.pointnet_seg.set_scatter_pooling", "torch.cat", "hasattr", "torch.zeros().long", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.PointNet.modules.PointNetSeg.set_scatter_pooling", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat"], ["", "def", "set_input", "(", "self", ",", "data", ",", "device", ")", ":", "\n", "        ", "data", "=", "data", ".", "to", "(", "device", ")", "\n", "self", ".", "input", "=", "data", "\n", "if", "data", ".", "x", "is", "not", "None", ":", "\n", "            ", "self", ".", "input_features", "=", "torch", ".", "cat", "(", "[", "data", ".", "pos", ",", "data", ".", "x", "]", ",", "axis", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "input_features", "=", "data", ".", "pos", "\n", "", "if", "data", ".", "y", "is", "not", "None", ":", "\n", "            ", "self", ".", "labels", "=", "data", ".", "y", "\n", "", "else", ":", "\n", "            ", "self", ".", "labels", "=", "None", "\n", "", "if", "not", "hasattr", "(", "data", ",", "\"batch\"", ")", ":", "\n", "            ", "self", ".", "batch_idx", "=", "torch", ".", "zeros", "(", "self", ".", "labels", ".", "shape", "[", "0", "]", ")", ".", "long", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "batch_idx", "=", "data", ".", "batch", "\n", "", "self", ".", "pointnet_seg", ".", "set_scatter_pooling", "(", "not", "self", ".", "_is_dense", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.pointnet.PointNet._build_model": [[45, 48], ["hasattr", "PointNetSeg", "torch_points3d.utils.model_building_utils.resolver_utils.flatten_dict"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.model_building_utils.resolver_utils.flatten_dict"], ["", "def", "_build_model", "(", "self", ")", ":", "\n", "        ", "if", "not", "hasattr", "(", "self", ",", "\"pointnet_seg\"", ")", ":", "\n", "            ", "self", ".", "pointnet_seg", "=", "PointNetSeg", "(", "**", "flatten_dict", "(", "self", ".", "_opt", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.pointnet.PointNet.forward": [[49, 65], ["pointnet.PointNet.pointnet_seg", "pointnet.PointNet.get_internal_loss", "torch.cross_entropy", "torch.max", "pointnet.PointNet.item"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.get_internal_loss"], ["", "", "def", "forward", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "x", "=", "self", ".", "pointnet_seg", "(", "self", ".", "input_features", ",", "self", ".", "input", ".", "batch", ")", "\n", "self", ".", "output", "=", "x", "\n", "\n", "internal_loss", "=", "self", ".", "get_internal_loss", "(", ")", "\n", "\n", "if", "self", ".", "labels", "is", "not", "None", ":", "\n", "            ", "self", ".", "loss_seg", "=", "F", ".", "cross_entropy", "(", "\n", "self", ".", "output", ",", "self", ".", "labels", ",", "ignore_index", "=", "IGNORE_LABEL", "\n", ")", "\n", "self", ".", "loss_internal", "=", "(", "internal_loss", "if", "internal_loss", ".", "item", "(", ")", "!=", "0", "else", "0", ")", "*", "0.001", "\n", "self", ".", "loss", "=", "self", ".", "loss_seg", "+", "self", ".", "loss_internal", "\n", "\n", "", "self", ".", "data_visual", "=", "self", ".", "input", "\n", "self", ".", "data_visual", ".", "pred", "=", "torch", ".", "max", "(", "self", ".", "output", ",", "-", "1", ")", "[", "1", "]", "\n", "return", "self", ".", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.pointnet.PointNet.backward": [[66, 68], ["pointnet.PointNet.loss.backward"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.panoptic.pointgroup.PointGroup.backward"], ["", "def", "backward", "(", "self", ")", ":", "\n", "        ", "self", ".", "loss", ".", "backward", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.pointnet.SegPointNetModel.__init__": [[71, 80], ["torch_points3d.models.base_model.BaseModel.__init__", "MiniPointNet", "MLP"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.MLP"], ["    ", "def", "__init__", "(", "self", ",", "opt", ",", "type", ",", "dataset", ",", "modules_lib", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "opt", ")", "\n", "self", ".", "pointnet_seg", "=", "MiniPointNet", "(", "\n", "opt", ".", "pointnet", ".", "local_nn", ",", "\n", "opt", ".", "pointnet", ".", "global_nn", ",", "\n", "aggr", "=", "opt", ".", "pointnet", ".", "aggr", ",", "\n", "return_local_out", "=", "opt", ".", "pointnet", ".", "return_local_out", ",", "\n", ")", "\n", "self", ".", "seg_nn", "=", "MLP", "(", "opt", ".", "seg_nn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.pointnet.SegPointNetModel.set_input": [[81, 89], ["data.to.to.to", "hasattr", "torch.zeros().long", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to"], ["", "def", "set_input", "(", "self", ",", "data", ",", "device", ")", ":", "\n", "        ", "data", "=", "data", ".", "to", "(", "device", ")", "\n", "self", ".", "pos", "=", "data", ".", "pos", "\n", "self", ".", "labels", "=", "data", ".", "y", "\n", "if", "not", "hasattr", "(", "data", ",", "\"batch\"", ")", ":", "\n", "            ", "self", ".", "batch_idx", "=", "torch", ".", "zeros", "(", "self", ".", "labels", ".", "shape", "[", "0", "]", ")", ".", "long", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "batch_idx", "=", "data", ".", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.pointnet.SegPointNetModel.get_local_feat": [[90, 92], ["pointnet.SegPointNetModel.pointnet_seg.local_nn"], "methods", ["None"], ["", "", "def", "get_local_feat", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "pointnet_seg", ".", "local_nn", "(", "self", ".", "pos", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.pointnet.SegPointNetModel.forward": [[93, 99], ["pointnet.SegPointNetModel.pointnet_seg.forward_embedding", "pointnet.SegPointNetModel.seg_nn", "torch.log_softmax", "torch.nll_loss"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.PointNet.modules.MiniPointNet.forward_embedding"], ["", "def", "forward", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "x", "=", "self", ".", "pointnet_seg", ".", "forward_embedding", "(", "self", ".", "pos", ",", "self", ".", "batch_idx", ")", "\n", "x", "=", "self", ".", "seg_nn", "(", "x", ")", "\n", "self", ".", "output", "=", "F", ".", "log_softmax", "(", "x", ",", "dim", "=", "-", "1", ")", "\n", "self", ".", "loss", "=", "F", ".", "nll_loss", "(", "self", ".", "output", ",", "self", ".", "labels", ")", "\n", "return", "self", ".", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.pointnet.SegPointNetModel.backward": [[100, 102], ["pointnet.SegPointNetModel.loss.backward"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.panoptic.pointgroup.PointGroup.backward"], ["", "def", "backward", "(", "self", ")", ":", "\n", "        ", "self", ".", "loss", ".", "backward", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.pointnet2.PointNet2_D.__init__": [[35, 65], ["torch_points3d.models.base_architectures.UnetBasedModel.__init__", "getattr", "copy.deepcopy", "torch_points3d.core.common_modules.base_modules.Seq", "range", "pointnet2.PointNet2_D.FC_layer.append", "len", "log.info", "len", "pointnet2.PointNet2_D.FC_layer.append", "pointnet2.PointNet2_D.FC_layer.append", "torch_points3d.core.common_modules.dense_modules.Conv1D", "ValueError", "dataset.class_to_segments.keys", "torch_points3d.core.common_modules.dense_modules.Conv1D", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.mock.MockDatasetConfig.keys"], ["\n", "factory", "=", "PointNet2Factory", "(", "\n", "architecture", "=", "architecture", ",", "\n", "num_layers", "=", "num_layers", ",", "\n", "input_nc", "=", "input_nc", ",", "\n", "multiscale", "=", "multiscale", ",", "\n", "config", "=", "config", ",", "\n", "**", "kwargs", "\n", ")", "\n", "return", "factory", ".", "build", "(", ")", "\n", "\n", "\n", "", "class", "PointNet2Factory", "(", "ModelFactory", ")", ":", "\n", "    ", "def", "_build_unet", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_config", ":", "\n", "            ", "model_config", "=", "self", ".", "_config", "\n", "", "else", ":", "\n", "            ", "path_to_model", "=", "os", ".", "path", ".", "join", "(", "\n", "PATH_TO_CONFIG", ",", "\"unet_{}_{}.yaml\"", ".", "format", "(", "self", ".", "num_layers", ",", "\"ms\"", "if", "self", ".", "kwargs", "[", "\"multiscale\"", "]", "else", "\"ss\"", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.pointnet2.PointNet2_D.set_input": [[66, 89], ["data.to.to.to", "torch_geometric.data.Data", "torch.arange().view().repeat().view", "torch.arange().view().repeat().view", "torch.arange().view().repeat().view", "torch.arange().view().repeat().view", "len", "data.to.to.x.transpose().contiguous", "torch.flatten().long", "torch.flatten().long", "torch.flatten().long", "torch.flatten().long", "torch.arange().view().repeat", "torch.arange().view().repeat", "torch.arange().view().repeat", "torch.arange().view().repeat", "data.to.to.x.transpose", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["model_config", "=", "OmegaConf", ".", "load", "(", "path_to_model", ")", "\n", "", "ModelFactory", ".", "resolve_model", "(", "model_config", ",", "self", ".", "num_features", ",", "self", ".", "_kwargs", ")", "\n", "modules_lib", "=", "sys", ".", "modules", "[", "__name__", "]", "\n", "return", "PointNet2Unet", "(", "model_config", ",", "None", ",", "None", ",", "modules_lib", ",", "**", "self", ".", "kwargs", ")", "\n", "\n", "", "def", "_build_encoder", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_config", ":", "\n", "            ", "model_config", "=", "self", ".", "_config", "\n", "", "else", ":", "\n", "            ", "path_to_model", "=", "os", ".", "path", ".", "join", "(", "\n", "PATH_TO_CONFIG", ",", "\n", "\"encoder_{}_{}.yaml\"", ".", "format", "(", "self", ".", "num_layers", ",", "\"ms\"", "if", "self", ".", "kwargs", "[", "\"multiscale\"", "]", "else", "\"ss\"", ")", ",", "\n", ")", "\n", "model_config", "=", "OmegaConf", ".", "load", "(", "path_to_model", ")", "\n", "", "ModelFactory", ".", "resolve_model", "(", "model_config", ",", "self", ".", "num_features", ",", "self", ".", "_kwargs", ")", "\n", "modules_lib", "=", "sys", ".", "modules", "[", "__name__", "]", "\n", "return", "PointNet2Encoder", "(", "model_config", ",", "None", ",", "None", ",", "modules_lib", ",", "**", "self", ".", "kwargs", ")", "\n", "\n", "\n", "", "", "class", "BasePointnet2", "(", "UnwrappedUnetBasedModel", ")", ":", "\n", "\n", "    ", "CONV_TYPE", "=", "\"dense\"", "\n", "\n", "def", "__init__", "(", "self", ",", "model_config", ",", "model_type", ",", "dataset", ",", "modules", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.pointnet2.PointNet2_D.forward": [[90, 116], ["pointnet2.PointNet2_D.model", "pointnet2.PointNet2_D.FC_layer().transpose().contiguous().view", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "[].reshape", "torch.one_hot().float().transpose", "torch.one_hot().float().transpose", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "pointnet2.PointNet2_D._weight_classes.to", "torch.cross_entropy", "torch.cross_entropy", "pointnet2.PointNet2_D.FC_layer().transpose().contiguous", "torch.one_hot().float", "torch.one_hot().float", "torch.max", "torch.max", "torch.max", "torch.max", "pointnet2.PointNet2_D.FC_layer().transpose", "torch.one_hot", "torch.one_hot", "pointnet2.PointNet2_D.FC_layer"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to"], ["        ", "super", "(", "BasePointnet2", ",", "self", ")", ".", "__init__", "(", "model_config", ",", "model_type", ",", "dataset", ",", "modules", ")", "\n", "\n", "try", ":", "\n", "            ", "default_output_nc", "=", "extract_output_nc", "(", "model_config", ")", "\n", "", "except", ":", "\n", "            ", "default_output_nc", "=", "-", "1", "\n", "log", ".", "warning", "(", "\"Could not resolve number of output channels\"", ")", "\n", "\n", "", "self", ".", "_has_mlp_head", "=", "False", "\n", "self", ".", "_output_nc", "=", "default_output_nc", "\n", "if", "\"output_nc\"", "in", "kwargs", ":", "\n", "            ", "self", ".", "_has_mlp_head", "=", "True", "\n", "self", ".", "_output_nc", "=", "kwargs", "[", "\"output_nc\"", "]", "\n", "self", ".", "mlp", "=", "Seq", "(", ")", "\n", "self", ".", "mlp", ".", "append", "(", "Conv1D", "(", "default_output_nc", ",", "self", ".", "_output_nc", ",", "bn", "=", "True", ",", "bias", "=", "False", ")", ")", "\n", "\n", "", "", "@", "property", "\n", "def", "has_mlp_head", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_has_mlp_head", "\n", "\n", "", "@", "property", "\n", "def", "output_nc", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_output_nc", "\n", "\n", "", "def", "_set_input", "(", "self", ",", "data", ")", ":", "\n", "        ", "\"\"\"Unpack input data from the dataloader and perform necessary pre-processing steps.\n        \"\"\"", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.pointnet2.PointNet2_D.backward": [[117, 122], ["pointnet2.PointNet2_D.loss_seg.backward"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.panoptic.pointgroup.PointGroup.backward"], ["assert", "len", "(", "data", ".", "pos", ".", "shape", ")", "==", "3", "\n", "data", "=", "data", ".", "to", "(", "self", ".", "device", ")", "\n", "if", "data", ".", "x", "is", "not", "None", ":", "\n", "            ", "data", ".", "x", "=", "data", ".", "x", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "", "else", ":", "\n", "            ", "data", ".", "x", "=", "None", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.pvcnn.PVCNN.__init__": [[15, 22], ["torch_points3d.models.base_model.BaseModel.__init__", "torch_points3d.modules.PVCNN.pvcnn.PVCNN"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["class", "PVCNN", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "option", ",", "model_type", ",", "dataset", ",", "modules", ")", ":", "\n", "        ", "super", "(", "PVCNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "cr", "=", "option", ".", "cr", "\n", "self", ".", "vres", "=", "option", ".", "vres", "\n", "self", ".", "num_classes", "=", "dataset", ".", "num_classes", "\n", "self", ".", "num_features", "=", "dataset", ".", "feature_dimension", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.pvcnn.PVCNN.set_input": [[23, 30], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "data.batch.squeeze", "torchsparse.SparseTensor().to", "data.y.to", "data.batch.dim", "data.batch.unsqueeze", "torchsparse.SparseTensor"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.SparseTensor"], ["\n", "cs", "=", "[", "32", ",", "32", ",", "64", ",", "128", ",", "256", ",", "256", ",", "128", ",", "96", ",", "96", "]", "\n", "cs", "=", "[", "int", "(", "cr", "*", "x", ")", "for", "x", "in", "cs", "]", "\n", "\n", "self", ".", "stem", "=", "nn", ".", "Sequential", "(", "\n", "spnn", ".", "Conv3d", "(", "self", ".", "num_features", ",", "cs", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ")", ",", "\n", "spnn", ".", "BatchNorm", "(", "cs", "[", "0", "]", ")", ",", "\n", "spnn", ".", "ReLU", "(", "True", ")", ",", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.pvcnn.PVCNN.forward": [[31, 38], ["torch_points3d.modules.PVCNN.pvcnn.PVCNN.model", "torch_points3d.modules.PVCNN.pvcnn.PVCNN._weight_classes.to", "torch.cross_entropy", "torch.cross_entropy"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to"], ["spnn", ".", "Conv3d", "(", "cs", "[", "0", "]", ",", "cs", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ")", ",", "\n", "spnn", ".", "BatchNorm", "(", "cs", "[", "0", "]", ")", ",", "\n", "spnn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n", "\n", "self", ".", "stage1", "=", "nn", ".", "Sequential", "(", "\n", "BasicConvolutionBlock", "(", "cs", "[", "0", "]", ",", "cs", "[", "0", "]", ",", "ks", "=", "2", ",", "stride", "=", "2", ",", "dilation", "=", "1", ")", ",", "\n", "ResidualBlock", "(", "cs", "[", "0", "]", ",", "cs", "[", "1", "]", ",", "ks", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ",", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.pvcnn.PVCNN.backward": [[40, 42], ["torch_points3d.modules.PVCNN.pvcnn.PVCNN.loss_seg.backward"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.panoptic.pointgroup.PointGroup.backward"], [")", "\n", "\n", "self", ".", "stage2", "=", "nn", ".", "Sequential", "(", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.ms_svconv3d.MS_SparseConvModel.__init__": [[20, 56], ["torch_points3d.models.base_model.BaseModel.__init__", "torch_points3d.models.registration.ms_svconv3d.UnetMSparseConv3d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch_points3d.core.common_modules.Seq", "range", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Identity", "torch.Linear", "torch.Linear", "torch.Linear", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "len", "ms_svconv3d.MS_SparseConvModel.FC_layer.append", "getattr", "ms_svconv3d.MS_SparseConvModel.FC_layer.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch_points3d.core.common_modules.FastBatchNorm1d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append"], ["    ", "def", "__init__", "(", "self", ",", "option", ",", "model_type", ",", "dataset", ",", "modules", ")", ":", "\n", "        ", "BaseModel", ".", "__init__", "(", "self", ",", "option", ")", "\n", "option_unet", "=", "option", ".", "option_unet", "\n", "self", ".", "normalize_feature", "=", "option", ".", "normalize_feature", "\n", "self", ".", "grid_size", "=", "option_unet", ".", "grid_size", "\n", "self", ".", "unet", "=", "UnetMSparseConv3d", "(", "\n", "option_unet", ".", "backbone", ",", "\n", "input_nc", "=", "option_unet", ".", "input_nc", ",", "\n", "pointnet_nn", "=", "getattr", "(", "option_unet", ",", "\"pointnet_nn\"", ",", "None", ")", ",", "\n", "post_mlp_nn", "=", "getattr", "(", "option_unet", ",", "\"post_mlp_nn\"", ",", "[", "64", ",", "64", ",", "32", "]", ")", ",", "\n", "pre_mlp_nn", "=", "getattr", "(", "option_unet", ",", "\"pre_mlp_nn\"", ",", "None", ")", ",", "\n", "add_pos", "=", "getattr", "(", "option_unet", ",", "\"add_pos\"", ",", "False", ")", ",", "\n", "add_pre_x", "=", "getattr", "(", "option_unet", ",", "\"add_pre_x\"", ",", "False", ")", ",", "\n", "aggr", "=", "getattr", "(", "option_unet", ",", "\"aggr\"", ",", "None", ")", ",", "\n", "backend", "=", "option", ".", "backend", ",", "\n", ")", "\n", "if", "option", ".", "mlp_cls", "is", "not", "None", ":", "\n", "            ", "last_mlp_opt", "=", "option", ".", "mlp_cls", "\n", "\n", "self", ".", "FC_layer", "=", "Seq", "(", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "last_mlp_opt", ".", "nn", ")", ")", ":", "\n", "                ", "self", ".", "FC_layer", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "\n", "*", "[", "\n", "nn", ".", "Linear", "(", "last_mlp_opt", ".", "nn", "[", "i", "-", "1", "]", ",", "last_mlp_opt", ".", "nn", "[", "i", "]", ",", "bias", "=", "False", ")", ",", "\n", "FastBatchNorm1d", "(", "last_mlp_opt", ".", "nn", "[", "i", "]", ",", "momentum", "=", "last_mlp_opt", ".", "bn_momentum", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", "]", "\n", ")", "\n", ")", "\n", "", "if", "getattr", "(", "last_mlp_opt", ",", "\"dropout\"", ",", "None", ")", "is", "not", "None", ":", "\n", "                ", "self", ".", "FC_layer", ".", "append", "(", "nn", ".", "Dropout", "(", "p", "=", "last_mlp_opt", ".", "dropout", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "FC_layer", "=", "torch", ".", "nn", ".", "Identity", "(", ")", "\n", "", "self", ".", "head", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "option", ".", "output_nc", ",", "dataset", ".", "num_classes", ")", ")", "\n", "self", ".", "loss_names", "=", "[", "\"loss_seg\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.ms_svconv3d.MS_SparseConvModel.apply_nn": [[57, 71], ["range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "ms_svconv3d.MS_SparseConvModel.FC_layer", "ms_svconv3d.MS_SparseConvModel.head", "len", "ms_svconv3d.MS_SparseConvModel.unet.set_grid_size", "ms_svconv3d.MS_SparseConvModel.unet", "outputs.append", "input.clone", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.ms_svconv3d.UnetMSparseConv3d.set_grid_size", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.clone"], ["", "def", "apply_nn", "(", "self", ",", "input", ")", ":", "\n", "\n", "        ", "outputs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "grid_size", ")", ")", ":", "\n", "            ", "self", ".", "unet", ".", "set_grid_size", "(", "self", ".", "grid_size", "[", "i", "]", ")", "\n", "out", "=", "self", ".", "unet", "(", "input", ".", "clone", "(", ")", ")", "\n", "out", ".", "x", "=", "out", ".", "x", "/", "(", "torch", ".", "norm", "(", "out", ".", "x", ",", "p", "=", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "+", "1e-20", ")", "\n", "outputs", ".", "append", "(", "out", ")", "\n", "", "x", "=", "torch", ".", "cat", "(", "[", "o", ".", "x", "for", "o", "in", "outputs", "]", ",", "1", ")", "\n", "out_feat", "=", "self", ".", "FC_layer", "(", "x", ")", "\n", "if", "self", ".", "normalize_feature", ":", "\n", "            ", "out_feat", "=", "out_feat", "/", "(", "torch", ".", "norm", "(", "out_feat", ",", "p", "=", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "+", "1e-20", ")", "\n", "", "out_feat", "=", "self", ".", "head", "(", "out_feat", ")", "\n", "return", "out_feat", ",", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.ms_svconv3d.MS_SparseConvModel.forward": [[72, 77], ["ms_svconv3d.MS_SparseConvModel.apply_nn", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.nll_loss", "torch.nll_loss", "torch.nll_loss"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.ms_svconv3d.MS_SparseConv3d_Shared_Pool.apply_nn"], ["", "def", "forward", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "logits", ",", "_", "=", "self", ".", "apply_nn", "(", "self", ".", "input", ")", "\n", "self", ".", "output", "=", "F", ".", "log_softmax", "(", "logits", ",", "dim", "=", "-", "1", ")", "\n", "if", "self", ".", "labels", "is", "not", "None", ":", "\n", "            ", "self", ".", "loss_seg", "=", "F", ".", "nll_loss", "(", "self", ".", "output", ",", "self", ".", "labels", ",", "ignore_index", "=", "IGNORE_LABEL", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.ms_svconv3d.MS_SparseConvModel.backward": [[78, 80], ["ms_svconv3d.MS_SparseConvModel.loss_seg.backward"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.panoptic.pointgroup.PointGroup.backward"], ["", "", "def", "backward", "(", "self", ")", ":", "\n", "        ", "self", ".", "loss_seg", ".", "backward", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis_area1_office1.S3DISOriginalFusedMM.__init__": [[197, 245], ["InMemoryDataset.__init__", "s3dis_area1_office1.S3DISOriginalFusedMM._load_data", "list", "torch.load", "range", "ValueError"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis_area5_office40.S3DISSphereMM._load_data", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load"], ["def", "__init__", "(", "\n", "self", ",", "\n", "root", ",", "\n", "test_area", "=", "6", ",", "\n", "split", "=", "\"train\"", ",", "\n", "transform", "=", "None", ",", "\n", "pre_transform", "=", "None", ",", "\n", "pre_collate_transform", "=", "None", ",", "\n", "pre_filter", "=", "None", ",", "\n", "pre_transform_image", "=", "None", ",", "\n", "transform_image", "=", "None", ",", "\n", "img_ref_size", "=", "(", "512", ",", "256", ")", ",", "\n", "keep_instance", "=", "False", ",", "\n", "verbose", "=", "False", ",", "\n", "debug", "=", "False", ",", ")", ":", "\n", "        ", "assert", "test_area", "in", "list", "(", "range", "(", "1", ",", "2", ")", ")", "\n", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "pre_collate_transform", "=", "pre_collate_transform", "\n", "self", ".", "pre_transform_image", "=", "pre_transform_image", "\n", "self", ".", "transform_image", "=", "transform_image", "\n", "self", ".", "img_ref_size", "=", "img_ref_size", "\n", "self", ".", "test_area", "=", "test_area", "\n", "self", ".", "keep_instance", "=", "keep_instance", "\n", "self", ".", "verbose", "=", "verbose", "\n", "self", ".", "debug", "=", "debug", "\n", "self", ".", "_split", "=", "split", "\n", "\n", "super", "(", "S3DISOriginalFusedMM", ",", "self", ")", ".", "__init__", "(", "\n", "root", ",", "transform", ",", "pre_transform", ",", "pre_filter", ")", "\n", "\n", "if", "split", "==", "\"train\"", ":", "\n", "            ", "path", "=", "self", ".", "processed_paths", "[", "0", "]", "\n", "", "elif", "split", "==", "\"val\"", ":", "\n", "            ", "path", "=", "self", ".", "processed_paths", "[", "1", "]", "\n", "", "elif", "split", "==", "\"test\"", ":", "\n", "            ", "path", "=", "self", ".", "processed_paths", "[", "2", "]", "\n", "", "elif", "split", "==", "\"trainval\"", ":", "\n", "            ", "path", "=", "self", ".", "processed_paths", "[", "3", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "f\"Split {split} found, but expected either train, val,\"", "\n", "f\" trainval or test\"", ")", "\n", "\n", "", "self", ".", "_load_data", "(", "path", ")", "\n", "\n", "if", "split", "==", "\"test\"", ":", "\n", "            ", "self", ".", "raw_test_data", "=", "torch", ".", "load", "(", "self", ".", "raw_areas_paths", "[", "test_area", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis_area1_office1.S3DISOriginalFusedMM.center_labels": [[246, 252], ["hasattr"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "center_labels", "(", "self", ")", ":", "\n", "        ", "if", "hasattr", "(", "self", ".", "data", ",", "\"center_label\"", ")", ":", "\n", "            ", "return", "self", ".", "data", ".", "center_label", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis_area1_office1.S3DISOriginalFusedMM.raw_file_names": [[253, 256], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "raw_file_names", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "folders", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis_area1_office1.S3DISOriginalFusedMM.image_dir": [[257, 260], ["osp.join"], "methods", ["None"], ["", "@", "property", "\n", "def", "image_dir", "(", "self", ")", ":", "\n", "        ", "return", "osp", ".", "join", "(", "self", ".", "root", ",", "'image'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis_area1_office1.S3DISOriginalFusedMM.pre_processed_path": [[261, 265], ["osp.join"], "methods", ["None"], ["", "@", "property", "\n", "def", "pre_processed_path", "(", "self", ")", ":", "\n", "        ", "pre_processed_file_names", "=", "\"preprocessed.pt\"", "\n", "return", "osp", ".", "join", "(", "self", ".", "processed_dir", ",", "pre_processed_file_names", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis_area1_office1.S3DISOriginalFusedMM.pre_collated_path": [[266, 270], ["osp.join"], "methods", ["None"], ["", "@", "property", "\n", "def", "pre_collated_path", "(", "self", ")", ":", "\n", "        ", "pre_collated_path_name", "=", "\"pre_collate.pt\"", "\n", "return", "osp", ".", "join", "(", "self", ".", "processed_dir", ",", "pre_collated_path_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis_area1_office1.S3DISOriginalFusedMM.image_data_path": [[271, 274], ["osp.join"], "methods", ["None"], ["", "@", "property", "\n", "def", "image_data_path", "(", "self", ")", ":", "\n", "        ", "return", "osp", ".", "join", "(", "self", ".", "processed_dir", ",", "\"image_data.pt\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis_area1_office1.S3DISOriginalFusedMM.pre_transformed_image_path": [[275, 278], ["osp.join"], "methods", ["None"], ["", "@", "property", "\n", "def", "pre_transformed_image_path", "(", "self", ")", ":", "\n", "        ", "return", "osp", ".", "join", "(", "self", ".", "processed_dir", ",", "\"pre_transform_image.pt\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis_area1_office1.S3DISOriginalFusedMM.raw_areas_paths": [[279, 283], ["osp.join", "range"], "methods", ["None"], ["", "@", "property", "\n", "def", "raw_areas_paths", "(", "self", ")", ":", "\n", "        ", "return", "[", "osp", ".", "join", "(", "self", ".", "processed_dir", ",", "\"raw_area_%i.pt\"", "%", "i", ")", "\n", "for", "i", "in", "range", "(", "1", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis_area1_office1.S3DISOriginalFusedMM.processed_file_names": [[284, 292], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "processed_file_names", "(", "self", ")", ":", "\n", "        ", "test_area", "=", "self", ".", "test_area", "\n", "return", "(", "\n", "[", "f\"{s}_{test_area}.pt\"", "\n", "for", "s", "in", "[", "\"train\"", ",", "\"val\"", ",", "\"test\"", ",", "\"trainval\"", "]", "]", "\n", "+", "self", ".", "raw_areas_paths", "\n", "+", "[", "self", ".", "pre_processed_path", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis_area1_office1.S3DISOriginalFusedMM.intermediate_processed_paths": [[293, 300], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "intermediate_processed_paths", "(", "self", ")", ":", "\n", "        ", "return", "[", "\n", "self", ".", "pre_processed_path", ",", "\n", "self", ".", "pre_collated_path", ",", "\n", "self", ".", "image_data_path", ",", "\n", "self", ".", "pre_transformed_image_path", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis_area1_office1.S3DISOriginalFusedMM.raw_test_data": [[305, 308], ["None"], "methods", ["None"], ["", "@", "raw_test_data", ".", "setter", "\n", "def", "raw_test_data", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_raw_test_data", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis_area1_office1.S3DISOriginalFusedMM.download": [[309, 311], ["print"], "methods", ["None"], ["", "def", "download", "(", "self", ")", ":", "\n", "        ", "print", "(", "\"Please manually create the raw data folders with appropriate rooms in them.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis_area1_office1.S3DISOriginalFusedMM.process": [[312, 510], ["enumerate", "print", "print", "print", "print", "print", "torch.save", "torch.save", "torch.save", "torch.save", "print", "osp.exists", "print", "tq", "enumerate", "torch.save", "print", "torch.load", "osp.exists", "torch.save", "print", "torch.load", "osp.exists", "print", "range", "torch.save", "print", "torch.load", "osp.exists", "print", "torch.save", "print", "torch.load", "osp.exists", "list", "cT.PointCloudFusion", "delattr", "torch.save", "print", "log.info", "log.info", "s3dis_area1_office1.S3DISOriginalFusedMM.pre_collate_transform", "print", "torch.load.append", "s3dis_area1_office1.S3DISOriginalFusedMM.pre_transform_image", "map", "osp.join", "os.listdir", "osp.isdir", "range", "int", "read_s3dis_format", "read_s3dis_format", "torch_geometric.data.Data", "data_list[].append", "os.listdir", "osp.isdir", "range", "utils.img_info_to_img_data", "osp.join", "osp.join", "rgb.float", "torch.ones", "torch.zeros", "s3dis_area1_office1.S3DISOriginalFusedMM.pre_transform", "int", "osp.join", "osp.join", "s3dis_area1_office1.read_s3dis_pose", "utils.read_image_pose_pairs", "s3dis_area1_office1.S3DISOriginalFusedMM.pre_filter", "osp.join", "osp.join", "s3dis_area1_office1.s3dis_image_room", "len", "len", "osp.exists", "os.remove", "xyz[].max", "xyz[].min"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.s3dis.read_s3dis_format", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.s3dis.read_s3dis_format", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.utils.img_info_to_img_data", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis_area5_office40.read_s3dis_pose", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.utils.read_image_pose_pairs", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis_area5_office40.s3dis_image_room", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "def", "process", "(", "self", ")", ":", "\n", "# --------------------------------------------------------------", "\n", "# Initialize the chain of intermediate processing files", "\n", "# If a file in the chain is not found, all subsequent files are", "\n", "# removed to ensure a clean preprocessing computation", "\n", "# --------------------------------------------------------------", "\n", "        ", "for", "i", ",", "p", "in", "enumerate", "(", "self", ".", "intermediate_processed_paths", ")", ":", "\n", "            ", "if", "not", "osp", ".", "exists", "(", "p", ")", ":", "\n", "                ", "list", "(", "map", "(", "lambda", "path", ":", "(", "os", ".", "remove", "(", "path", ")", "if", "osp", ".", "exists", "(", "path", ")", "\n", "else", "None", ")", ",", "\n", "self", ".", "intermediate_processed_paths", "[", "i", "+", "1", ":", "]", ")", ")", "\n", "break", "\n", "\n", "# --------------------------------------------------------------", "\n", "# Preprocess 3D data", "\n", "# Download, pre_transform and pre_filter raw 3D data", "\n", "# --------------------------------------------------------------", "\n", "", "", "if", "not", "osp", ".", "exists", "(", "self", ".", "pre_processed_path", ")", ":", "\n", "            ", "print", "(", "'Preprocessing the raw 3D data...'", ")", "\n", "\n", "data_files", "=", "[", "\n", "(", "f", ",", "room_name", ",", "osp", ".", "join", "(", "self", ".", "raw_dir", ",", "f", ",", "room_name", ")", ")", "\n", "for", "f", "in", "self", ".", "folders", "\n", "for", "room_name", "in", "os", ".", "listdir", "(", "osp", ".", "join", "(", "self", ".", "raw_dir", ",", "f", ")", ")", "\n", "if", "osp", ".", "isdir", "(", "osp", ".", "join", "(", "self", ".", "raw_dir", ",", "f", ",", "room_name", ")", ")", "]", "\n", "\n", "# Gather all data from each area in a List(List(Data))", "\n", "data_list", "=", "[", "[", "]", "for", "_", "in", "range", "(", "1", ")", "]", "\n", "for", "(", "area", ",", "room_name", ",", "file_path", ")", "in", "tq", "(", "data_files", ")", ":", "\n", "                ", "area_num", "=", "int", "(", "area", "[", "-", "1", "]", ")", "-", "1", "\n", "if", "self", ".", "debug", ":", "\n", "                    ", "read_s3dis_format", "(", "\n", "file_path", ",", "room_name", ",", "label_out", "=", "True", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "debug", "=", "self", ".", "debug", ")", "\n", "continue", "\n", "", "else", ":", "\n", "                    ", "xyz", ",", "rgb", ",", "labels", ",", "instance_labels", ",", "_", "=", "read_s3dis_format", "(", "\n", "file_path", ",", "room_name", ",", "label_out", "=", "True", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "debug", "=", "self", ".", "debug", ")", "\n", "\n", "# Room orientation correction", "\n", "# 2 rooms need to be rotated by 180\u00b0 around Z:", "\n", "#   - Area_2/hallway_11", "\n", "#   - Area_5/hallway_6", "\n", "if", "(", "area_num", "==", "1", "and", "room_name", "==", "'hallway_11'", ")", "or", "(", "area_num", "==", "4", "and", "room_name", "==", "'hallway_6'", ")", ":", "\n", "                        ", "xy_center", "=", "(", "xyz", "[", ":", ",", "0", ":", "2", "]", ".", "max", "(", "dim", "=", "0", ")", "[", "0", "]", "\n", "+", "xyz", "[", ":", ",", "0", ":", "2", "]", ".", "min", "(", "dim", "=", "0", ")", "[", "0", "]", ")", "/", "2", "\n", "# 180\u00b0 Z-rotation around the XY-center", "\n", "xyz", "[", ":", ",", "0", ":", "2", "]", "=", "2", "*", "xy_center", "-", "xyz", "[", ":", ",", "0", ":", "2", "]", "\n", "\n", "", "rgb_norm", "=", "rgb", ".", "float", "(", ")", "/", "255.0", "\n", "data", "=", "Data", "(", "pos", "=", "xyz", ",", "y", "=", "labels", ",", "rgb", "=", "rgb_norm", ")", "\n", "\n", "if", "room_name", "in", "VALIDATION_ROOMS", ":", "\n", "                        ", "data", ".", "is_val", "=", "torch", ".", "ones", "(", "data", ".", "num_nodes", ",", "dtype", "=", "bool", ")", "\n", "", "else", ":", "\n", "                        ", "data", ".", "is_val", "=", "torch", ".", "zeros", "(", "data", ".", "num_nodes", ",", "dtype", "=", "bool", ")", "\n", "\n", "", "if", "self", ".", "keep_instance", ":", "\n", "                        ", "data", ".", "instance_labels", "=", "instance_labels", "\n", "\n", "", "if", "self", ".", "pre_filter", "is", "not", "None", "and", "not", "self", ".", "pre_filter", "(", "data", ")", ":", "\n", "                        ", "continue", "\n", "\n", "", "data_list", "[", "area_num", "]", ".", "append", "(", "data", ")", "\n", "\n", "# Save raw areas", "\n", "", "", "raw_areas", "=", "cT", ".", "PointCloudFusion", "(", ")", "(", "data_list", ")", "\n", "for", "i", ",", "area", "in", "enumerate", "(", "raw_areas", ")", ":", "\n", "                ", "delattr", "(", "area", ",", "'is_val'", ")", "\n", "torch", ".", "save", "(", "area", ",", "self", ".", "raw_areas_paths", "[", "i", "]", ")", "\n", "\n", "# Pre-transform", "\n", "", "if", "self", ".", "pre_transform", "is", "not", "None", ":", "\n", "                ", "data_list", "=", "[", "\n", "[", "self", ".", "pre_transform", "(", "data", ")", "for", "data", "in", "area_data", "]", "\n", "for", "area_data", "in", "data_list", "]", "\n", "\n", "# Save the data into one big 'preprocessed.pt' file ", "\n", "", "torch", ".", "save", "(", "data_list", ",", "self", ".", "pre_processed_path", ")", "\n", "\n", "", "else", ":", "\n", "# Recover the per-area Data list from the 'preprocessed.pt'", "\n", "# file", "\n", "            ", "print", "(", "'Loading the preprocessed 3D data...'", ")", "\n", "data_list", "=", "torch", ".", "load", "(", "self", ".", "pre_processed_path", ")", "\n", "\n", "", "print", "(", "'Done\\n'", ")", "\n", "\n", "if", "self", ".", "debug", ":", "\n", "            ", "return", "\n", "\n", "# --------------------------------------------------------------", "\n", "# Pre-collate 3D data", "\n", "# Build the data splits and pre_collate them", "\n", "# --------------------------------------------------------------", "\n", "", "if", "not", "osp", ".", "exists", "(", "self", ".", "pre_collated_path", ")", ":", "\n", "\n", "# Run the pre_collate_transform to finalize the data", "\n", "# preparation. Among other things, the 'origin_id' and", "\n", "# 'mapping_index' are generated here", "\n", "            ", "if", "self", ".", "pre_collate_transform", ":", "\n", "                ", "print", "(", "'Running pre-collate on 3D data...'", ")", "\n", "log", ".", "info", "(", "\"pre_collate_transform ...\"", ")", "\n", "log", ".", "info", "(", "self", ".", "pre_collate_transform", ")", "\n", "data_list", "=", "self", ".", "pre_collate_transform", "(", "data_list", ")", "\n", "\n", "# Save the pre_collated data", "\n", "", "torch", ".", "save", "(", "data_list", ",", "self", ".", "pre_collated_path", ")", "\n", "\n", "", "else", ":", "\n", "# Recover data from the 'pre_collated.pt' file", "\n", "            ", "print", "(", "'Loading the pre-collated 3D data...'", ")", "\n", "data_list", "=", "torch", ".", "load", "(", "self", ".", "pre_collated_path", ")", "\n", "\n", "", "print", "(", "'Done\\n'", ")", "\n", "\n", "# --------------------------------------------------------------", "\n", "# Recover image data", "\n", "# --------------------------------------------------------------", "\n", "if", "not", "osp", ".", "exists", "(", "self", ".", "image_data_path", ")", ":", "\n", "            ", "print", "(", "'Computing image data...'", ")", "\n", "rooms", "=", "[", "\n", "(", "int", "(", "f", "[", "-", "1", "]", ")", "-", "1", ",", "room_name", ")", "\n", "for", "f", "in", "self", ".", "folders", "\n", "for", "room_name", "in", "os", ".", "listdir", "(", "osp", ".", "join", "(", "self", ".", "raw_dir", ",", "f", ")", ")", "\n", "if", "osp", ".", "isdir", "(", "osp", ".", "join", "(", "self", ".", "raw_dir", ",", "f", ",", "room_name", ")", ")", "]", "\n", "rooms", "=", "[", "[", "r", "[", "1", "]", "for", "r", "in", "rooms", "if", "r", "[", "0", "]", "==", "i", "]", "for", "i", "in", "range", "(", "1", ")", "]", "\n", "\n", "image_data_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "1", ")", ":", "\n", "\n", "# S3DIS Area 5 images are split into two folders", "\n", "# 'area_5a' and 'area_5b' and one of them requires", "\n", "# specific treatment for pose reading", "\n", "                ", "folders", "=", "[", "f\"area_{i + 1}\"", "]", "if", "i", "!=", "4", "else", "[", "\"area_5a\"", ",", "\"area_5b\"", "]", "\n", "\n", "image_info_list", "=", "[", "\n", "{", "'path'", ":", "i_file", ",", "**", "read_s3dis_pose", "(", "p_file", ")", "}", "\n", "for", "folder", "in", "folders", "\n", "for", "i_file", ",", "p_file", "in", "read_image_pose_pairs", "(", "\n", "osp", ".", "join", "(", "self", ".", "image_dir", ",", "folder", ",", "'pano'", ",", "'rgb'", ")", ",", "\n", "osp", ".", "join", "(", "self", ".", "image_dir", ",", "folder", ",", "'pano'", ",", "'pose'", ")", ",", "\n", "skip_names", "=", "S3DIS_OUTSIDE_IMAGES", ")", "]", "\n", "\n", "# Dropping image info for images outside of rooms found", "\n", "# during preprocessing", "\n", "image_info_list", "=", "[", "\n", "x", "for", "x", "in", "image_info_list", "\n", "if", "s3dis_image_room", "(", "x", "[", "'path'", "]", ")", "in", "rooms", "[", "i", "]", "]", "\n", "\n", "print", "(", "f\"    Area {i + 1} - {len(rooms[i])} rooms - \"", "\n", "f\"{len(image_info_list)} images\"", ")", "\n", "\n", "# Keep all images for the test area", "\n", "image_data_list", ".", "append", "(", "img_info_to_img_data", "(", "image_info_list", ",", "self", ".", "img_ref_size", ")", ")", "\n", "\n", "# Save image data", "\n", "", "torch", ".", "save", "(", "image_data_list", ",", "self", ".", "image_data_path", ")", "\n", "\n", "", "else", ":", "\n", "            ", "print", "(", "'Loading the image data...'", ")", "\n", "image_data_list", "=", "torch", ".", "load", "(", "self", ".", "image_data_path", ")", "\n", "\n", "", "print", "(", "'Done\\n'", ")", "\n", "\n", "# --------------------------------------------------------------", "\n", "# Pre-transform image data", "\n", "# This is where images are loaded and mappings are computed", "\n", "# --------------------------------------------------------------", "\n", "if", "not", "osp", ".", "exists", "(", "self", ".", "pre_transformed_image_path", ")", ":", "\n", "            ", "print", "(", "'Running the image pre-transforms...'", ")", "\n", "mm_data_list", "=", "(", "data_list", ",", "image_data_list", ")", "\n", "if", "self", ".", "pre_transform_image", ":", "\n", "                ", "mm_data_list", "=", "self", ".", "pre_transform_image", "(", "*", "mm_data_list", ")", "\n", "", "torch", ".", "save", "(", "mm_data_list", ",", "self", ".", "pre_transformed_image_path", ")", "\n", "\n", "", "else", ":", "\n", "            ", "print", "(", "'Loading the image pre-transformed data...'", ")", "\n", "mm_data_list", "=", "torch", ".", "load", "(", "self", ".", "pre_transformed_image_path", ")", "\n", "\n", "", "print", "(", "'Done\\n'", ")", "\n", "\n", "# --------------------------------------------------------------", "\n", "# Compute train / val / test / trainval splits", "\n", "# This is where the 'train_i.pt', 'val_i.pt', etc. are created", "\n", "# --------------------------------------------------------------", "\n", "print", "(", "f'Computing and saving train, val, test and trainval '", "\n", "f'splits for test_area=Area_{self.test_area}...'", ")", "\n", "torch", ".", "save", "(", "mm_data_list", ",", "self", ".", "processed_paths", "[", "0", "]", ")", "\n", "torch", ".", "save", "(", "mm_data_list", ",", "self", ".", "processed_paths", "[", "1", "]", ")", "\n", "torch", ".", "save", "(", "mm_data_list", ",", "self", ".", "processed_paths", "[", "2", "]", ")", "\n", "torch", ".", "save", "(", "mm_data_list", ",", "self", ".", "processed_paths", "[", "3", "]", ")", "\n", "del", "mm_data_list", "\n", "print", "(", "'Done\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis_area1_office1.S3DISOriginalFusedMM._load_data": [[511, 513], ["torch.load"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load"], ["", "def", "_load_data", "(", "self", ",", "path", ")", ":", "\n", "        ", "self", ".", "data", ",", "self", ".", "images", "=", "torch", ".", "load", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis_area1_office1.S3DISOriginalFusedMM.indices": [[519, 526], ["pyg.__version__.split", "super().indices", "int", "int", "range", "len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.split", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis_area5_office40.S3DISOriginalFusedMM.indices", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "def", "indices", "(", "self", ")", ":", "\n", "        ", "import", "torch_geometric", "as", "pyg", "\n", "version", "=", "pyg", ".", "__version__", ".", "split", "(", "'.'", ")", "\n", "is_new_pyg", "=", "int", "(", "version", "[", "0", "]", ")", ">=", "2", "or", "int", "(", "version", "[", "1", "]", ")", ">=", "7", "\n", "if", "is_new_pyg", ":", "\n", "            ", "return", "range", "(", "len", "(", "self", ")", ")", "if", "self", ".", "_indices", "is", "None", "else", "self", ".", "_indices", "\n", "", "return", "super", "(", ")", ".", "indices", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis_area1_office1.S3DISSphereMM.__init__": [[561, 567], ["cT.GridSampling3D", "s3dis_area1_office1.S3DISOriginalFusedMM.__init__"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["def", "__init__", "(", "self", ",", "root", ",", "sample_per_epoch", "=", "100", ",", "radius", "=", "2", ",", "*", "args", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_sample_per_epoch", "=", "sample_per_epoch", "\n", "self", ".", "_radius", "=", "radius", "\n", "self", ".", "_grid_sphere_sampling", "=", "cT", ".", "GridSampling3D", "(", "size", "=", "radius", "/", "10.0", ")", "\n", "super", "(", ")", ".", "__init__", "(", "root", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis_area1_office1.S3DISSphereMM.__len__": [[568, 573], ["len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_sample_per_epoch", ">", "0", ":", "\n", "            ", "return", "self", ".", "_sample_per_epoch", "\n", "", "else", ":", "\n", "            ", "return", "len", "(", "self", ".", "_test_spheres", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis_area1_office1.S3DISSphereMM.__getitem__": [[574, 597], ["isinstance", "s3dis_area1_office1.S3DISSphereMM.get", "s3dis_area1_office1.S3DISSphereMM.transform_image", "torch_points3d.core.multimodal.data.MMData", "s3dis_area1_office1.S3DISSphereMM.transform", "s3dis_area1_office1.S3DISSphereMM._images[].clone", "type", "s3dis_area1_office1.S3DISSphereMM.indices"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.clone", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis_area5_office40.S3DISOriginalFusedMM.indices"], ["", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\"\n        Indexing mechanism for the Dataset. Only supports int indexing.\n\n        Overwrites the torch_geometric.InMemoryDataset.__getitem__()\n        used for indexing Dataset. Extends its mechanisms to multimodal\n        data.\n\n        Get a 3D points Data sphere sample with image mapping\n        attributes, along with the list idx.\n        \"\"\"", "\n", "assert", "isinstance", "(", "idx", ",", "int", ")", ",", "f\"Indexing with {type(idx)} is not supported, only \"", "f\"{int} are accepted.\"", "\n", "\n", "# Get the 3D point sample and apply transforms", "\n", "i_area", ",", "data", "=", "self", ".", "get", "(", "self", ".", "indices", "(", ")", "[", "idx", "]", ")", "\n", "data", "=", "data", "if", "self", ".", "transform", "is", "None", "else", "self", ".", "transform", "(", "data", ")", "\n", "\n", "# Get the corresponding images and mappings", "\n", "data", ",", "images", "=", "self", ".", "transform_image", "(", "data", ",", "self", ".", "_images", "[", "i_area", "]", ".", "clone", "(", ")", ")", "\n", "\n", "return", "MMData", "(", "data", ",", "image", "=", "images", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis_area1_office1.S3DISSphereMM.get": [[598, 621], ["s3dis_area1_office1.S3DISSphereMM._get_random", "s3dis_area1_office1.S3DISSphereMM._test_spheres[].clone", "delattr"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis_area5_office40.S3DISSphereMM._get_random", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.clone"], ["", "def", "get", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\"\n        Get a 3D points Data sample. Does not return multimodal\n        attributes.\n\n        Overwrites the torch_geometric.InMemoryDataset.get(), which is\n        called from inside the\n        torch_geometric.InMemoryDataset.__getitem__() used for indexing\n        datasets.\n        \"\"\"", "\n", "if", "self", ".", "_sample_per_epoch", ">", "0", ":", "\n", "# For train datasets", "\n", "# Return a random spherical sample and the associated area", "\n", "# id", "\n", "            ", "return", "self", ".", "_get_random", "(", ")", "\n", "", "else", ":", "\n", "# For test and val datasets", "\n", "# Return the precomputed sphere at idx and the associated", "\n", "# area id", "\n", "            ", "test_sphere", "=", "self", ".", "_test_spheres", "[", "idx", "]", ".", "clone", "(", ")", "\n", "i_area", "=", "test_sphere", ".", "area_id", "\n", "delattr", "(", "test_sphere", ",", "'area_id'", ")", "\n", "return", "i_area", ",", "test_sphere", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis_area1_office1.S3DISSphereMM.process": [[622, 626], ["s3dis_area1_office1.S3DISOriginalFusedMM.process"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.classification.modelnet.SampledModelNet.process"], ["", "", "def", "process", "(", "self", ")", ":", "\n", "# We have to include this method, otherwise the parent class", "\n", "# skips processing.", "\n", "        ", "super", "(", ")", ".", "process", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis_area1_office1.S3DISSphereMM.download": [[627, 631], ["s3dis_area1_office1.S3DISOriginalFusedMM.download"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.classification.modelnet.SampledModelNet.download"], ["", "def", "download", "(", "self", ")", ":", "\n", "# We have to include this method, otherwise the parent class", "\n", "# skips download.", "\n", "        ", "super", "(", ")", ".", "download", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis_area1_office1.S3DISSphereMM._get_random": [[632, 652], ["np.random.choice", "int", "centre[].int", "cT.SphereSampling", "cT.SphereSampling.", "random.random"], "methods", ["None"], ["", "def", "_get_random", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        S3DISSphereMM has predefined sphere centers accross all areas\n        in the split. The _get_random method randomly picks a center\n        and recovers the sphere-neighborhood for the appropriate\n        S3DISSphereMM._datas[i_area].\n\n        Called if S3DISSphereMM is NOT test set. \n        \"\"\"", "\n", "# Random spheres biased towards getting more low frequency classes", "\n", "chosen_label", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "_labels", ",", "p", "=", "self", ".", "_label_counts", ")", "\n", "valid_centres", "=", "self", ".", "_centres_for_sampling", "[", "\n", "self", ".", "_centres_for_sampling", "[", ":", ",", "4", "]", "==", "chosen_label", "]", "\n", "centre_idx", "=", "int", "(", "random", ".", "random", "(", ")", "*", "(", "valid_centres", ".", "shape", "[", "0", "]", "-", "1", ")", ")", "\n", "centre", "=", "valid_centres", "[", "centre_idx", "]", "\n", "i_area", "=", "centre", "[", "3", "]", ".", "int", "(", ")", "\n", "area_data", "=", "self", ".", "_datas", "[", "i_area", "]", "\n", "sphere_sampler", "=", "cT", ".", "SphereSampling", "(", "\n", "self", ".", "_radius", ",", "centre", "[", ":", "3", "]", ",", "align_origin", "=", "False", ")", "\n", "return", "i_area", ",", "sphere_sampler", "(", "area_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis_area1_office1.S3DISSphereMM._load_data": [[653, 701], ["torch.load", "isinstance", "isinstance", "enumerate", "torch.cat", "np.unique", "np.sqrt", "range", "cT.GridSphereSampling", "cT.GridSphereSampling.", "s3dis_area1_office1.S3DISSphereMM._grid_sphere_sampling", "torch.empty", "s3dis_area1_office1.S3DISSphereMM._centres_for_sampling.append", "KDTree", "setattr", "np.asarray", "np.sum", "len", "hasattr", "data.clone", "np.asarray", "np.sqrt.mean"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.clone", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.lovasz_loss.mean"], ["", "def", "_load_data", "(", "self", ",", "path", ")", ":", "\n", "        ", "\"\"\"\n        Initializes the self._datas, self._images which hold all the\n        preprocessed multimodal data in memory. Also initializes the\n        sphere sampling centers and per-area KDTrees.\n        \n        Overwrites the S3DISOriginalFusedMM._load_data()\n        \"\"\"", "\n", "self", ".", "_datas", ",", "self", ".", "_images", "=", "torch", ".", "load", "(", "path", ")", "\n", "\n", "if", "not", "isinstance", "(", "self", ".", "_datas", ",", "list", ")", ":", "\n", "            ", "self", ".", "_datas", "=", "[", "self", ".", "_datas", "]", "\n", "", "if", "not", "isinstance", "(", "self", ".", "_images", ",", "list", ")", ":", "\n", "            ", "self", ".", "_images", "=", "[", "self", ".", "_images", "]", "\n", "\n", "", "if", "self", ".", "_sample_per_epoch", ">", "0", ":", "\n", "            ", "self", ".", "_centres_for_sampling", "=", "[", "]", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "self", ".", "_datas", ")", ":", "\n", "# Just to make we don't have some out-of-date data in", "\n", "# there", "\n", "                ", "assert", "not", "hasattr", "(", "data", ",", "cT", ".", "SphereSampling", ".", "KDTREE_KEY", ")", "\n", "low_res", "=", "self", ".", "_grid_sphere_sampling", "(", "data", ".", "clone", "(", ")", ")", "\n", "centres", "=", "torch", ".", "empty", "(", "(", "low_res", ".", "pos", ".", "shape", "[", "0", "]", ",", "5", ")", ",", "\n", "dtype", "=", "torch", ".", "float", ")", "\n", "centres", "[", ":", ",", ":", "3", "]", "=", "low_res", ".", "pos", "\n", "centres", "[", ":", ",", "3", "]", "=", "i", "\n", "centres", "[", ":", ",", "4", "]", "=", "low_res", ".", "y", "\n", "self", ".", "_centres_for_sampling", ".", "append", "(", "centres", ")", "\n", "tree", "=", "KDTree", "(", "np", ".", "asarray", "(", "data", ".", "pos", ")", ",", "leaf_size", "=", "10", ")", "\n", "setattr", "(", "data", ",", "cT", ".", "SphereSampling", ".", "KDTREE_KEY", ",", "tree", ")", "\n", "\n", "", "self", ".", "_centres_for_sampling", "=", "torch", ".", "cat", "(", "\n", "self", ".", "_centres_for_sampling", ",", "0", ")", "\n", "uni", ",", "uni_counts", "=", "np", ".", "unique", "(", "\n", "np", ".", "asarray", "(", "self", ".", "_centres_for_sampling", "[", ":", ",", "-", "1", "]", ")", ",", "\n", "return_counts", "=", "True", ")", "\n", "uni_counts", "=", "np", ".", "sqrt", "(", "uni_counts", ".", "mean", "(", ")", "/", "uni_counts", ")", "\n", "self", ".", "_label_counts", "=", "uni_counts", "/", "np", ".", "sum", "(", "uni_counts", ")", "\n", "self", ".", "_labels", "=", "uni", "\n", "\n", "", "else", ":", "\n", "# Save the area id in _test_spheres so we can recover", "\n", "# multimodal mappings after GridSphereSampling", "\n", "            ", "for", "i_area", "in", "range", "(", "len", "(", "self", ".", "_datas", ")", ")", ":", "\n", "                ", "self", ".", "_datas", "[", "i_area", "]", ".", "area_id", "=", "i_area", "\n", "", "grid_sampler", "=", "cT", ".", "GridSphereSampling", "(", "\n", "self", ".", "_radius", ",", "self", ".", "_radius", ",", "center", "=", "False", ")", "\n", "self", ".", "_test_spheres", "=", "grid_sampler", "(", "self", ".", "_datas", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis_area1_office1.S3DISFusedDataset.__init__": [[727, 783], ["torch_points3d.datasets.base_dataset_multimodal.BaseDatasetMM.__init__", "dataset_opt.get", "dataset_opt.get", "s3dis_area1_office1.S3DISSphereMM", "s3dis_area1_office1.S3DISSphereMM", "s3dis_area1_office1.S3DISSphereMM", "s3dis_area1_office1.S3DISFusedDataset.add_weights"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.base_dataset.BaseDataset.add_weights"], ["def", "__init__", "(", "self", ",", "dataset_opt", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dataset_opt", ")", "\n", "\n", "sampling_format", "=", "dataset_opt", ".", "get", "(", "'sampling_format'", ",", "'sphere'", ")", "\n", "assert", "sampling_format", "==", "'sphere'", ",", "f\"Only sampling format 'sphere' is supported.\"", "\n", "\n", "sample_per_epoch", "=", "dataset_opt", ".", "get", "(", "'sample_per_epoch'", ",", "8", ")", "\n", "\n", "self", ".", "train_dataset", "=", "S3DISSphereMM", "(", "\n", "self", ".", "_data_path", ",", "\n", "sample_per_epoch", "=", "sample_per_epoch", ",", "\n", "test_area", "=", "self", ".", "dataset_opt", ".", "fold", ",", "\n", "split", "=", "\"train\"", ",", "\n", "pre_collate_transform", "=", "self", ".", "pre_collate_transform", ",", "\n", "transform", "=", "self", ".", "train_transform", ",", "\n", "pre_transform_image", "=", "self", ".", "pre_transform_image", ",", "\n", "transform_image", "=", "self", ".", "train_transform_image", ",", "\n", "img_ref_size", "=", "self", ".", "dataset_opt", ".", "resolution_2d", ")", "\n", "\n", "self", ".", "val_dataset", "=", "S3DISSphereMM", "(", "\n", "self", ".", "_data_path", ",", "\n", "sample_per_epoch", "=", "-", "1", ",", "\n", "test_area", "=", "self", ".", "dataset_opt", ".", "fold", ",", "\n", "split", "=", "\"val\"", ",", "\n", "pre_collate_transform", "=", "self", ".", "pre_collate_transform", ",", "\n", "transform", "=", "self", ".", "val_transform", ",", "\n", "pre_transform_image", "=", "self", ".", "pre_transform_image", ",", "\n", "transform_image", "=", "self", ".", "val_transform_image", ",", "\n", "img_ref_size", "=", "self", ".", "dataset_opt", ".", "resolution_2d", ")", "\n", "\n", "# self.trainval_dataset = S3DISSphereMM(", "\n", "#     self._data_path,", "\n", "#     sample_per_epoch=sample_per_epoch,", "\n", "#     test_area=self.dataset_opt.fold,", "\n", "#     split=\"trainval\",", "\n", "#     pre_collate_transform=self.pre_collate_transform,", "\n", "#     transform=self.train_transform,", "\n", "#     pre_transform_image=self.pre_transform_image,", "\n", "#     transform_image=self.train_transform_image,", "\n", "#     img_ref_size = self.dataset_opt.resolution_2d)", "\n", "\n", "self", ".", "test_dataset", "=", "S3DISSphereMM", "(", "\n", "self", ".", "_data_path", ",", "\n", "sample_per_epoch", "=", "-", "1", ",", "\n", "test_area", "=", "self", ".", "dataset_opt", ".", "fold", ",", "\n", "split", "=", "\"test\"", ",", "\n", "pre_collate_transform", "=", "self", ".", "pre_collate_transform", ",", "\n", "transform", "=", "self", ".", "test_transform", ",", "\n", "pre_transform_image", "=", "self", ".", "pre_transform_image", ",", "\n", "transform_image", "=", "self", ".", "test_transform_image", ",", "\n", "img_ref_size", "=", "self", ".", "dataset_opt", ".", "resolution_2d", ")", "\n", "\n", "if", "dataset_opt", ".", "class_weight_method", ":", "\n", "            ", "self", ".", "add_weights", "(", "\n", "class_weight_method", "=", "dataset_opt", ".", "class_weight_method", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis_area1_office1.S3DISFusedDataset.test_data": [[784, 787], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "test_data", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "test_dataset", "[", "0", "]", ".", "raw_test_data", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis_area1_office1.S3DISFusedDataset.to_ply": [[788, 803], ["s3dis_area1_office1.S3DISFusedDataset.to_ply"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis_area5_office40.S3DISFusedDataset.to_ply"], ["", "@", "staticmethod", "\n", "def", "to_ply", "(", "pos", ",", "label", ",", "file", ")", ":", "\n", "        ", "\"\"\"\n        Saves s3dis predictions to disk using s3dis color scheme.\n\n        Parameters\n        ----------\n        pos : torch.Tensor\n            tensor that contains the positions of the points\n        label : torch.Tensor\n            predicted label\n        file : string\n            Save location\n        \"\"\"", "\n", "to_ply", "(", "pos", ",", "label", ",", "file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis_area1_office1.S3DISFusedDataset.get_tracker": [[804, 817], ["S3DISTracker"], "methods", ["None"], ["", "def", "get_tracker", "(", "self", ",", "wandb_log", ":", "bool", ",", "tensorboard_log", ":", "bool", ")", ":", "\n", "        ", "\"\"\"Factory method for the tracker\n\n        Arguments:\n            wandb_log - Log using weight and biases\n            tensorboard_log - Log using tensorboard\n        Returns:\n            [BaseTracker] -- tracker\n        \"\"\"", "\n", "from", "torch_points3d", ".", "metrics", ".", "s3dis_tracker", "import", "S3DISTracker", "\n", "\n", "return", "S3DISTracker", "(", "\n", "self", ",", "wandb_log", "=", "wandb_log", ",", "use_tensorboard", "=", "tensorboard_log", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis_area1_office1.read_s3dis_pose": [[74, 102], ["np.array", "np.array", "json_file.lower", "open", "json.load", "np.double", "np.array", "np.array.dot", "np.array", "np.array"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load"], ["def", "read_s3dis_pose", "(", "json_file", ")", ":", "\n", "# Area 5b poses need a special treatment", "\n", "# Need to see the file comes from Area i in the provided filepath", "\n", "    ", "area_5b", "=", "'area_5b'", "in", "json_file", ".", "lower", "(", ")", "\n", "\n", "# Loading the Stanford pose json file", "\n", "with", "open", "(", "json_file", ")", "as", "f", ":", "\n", "        ", "pose_data", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "# XYZ camera position", "\n", "", "xyz", "=", "np", ".", "array", "(", "pose_data", "[", "'camera_location'", "]", ")", "\n", "\n", "# Omega, Phi, Kappa camera pose", "\n", "# We define a different pose coordinate system ", "\n", "omega", ",", "phi", ",", "kappa", "=", "[", "np", ".", "double", "(", "i", ")", "\n", "for", "i", "in", "pose_data", "[", "'final_camera_rotation'", "]", "]", "\n", "#     opk = np.array([omega - (np.pi / 2), -phi, -kappa])", "\n", "opk", "=", "np", ".", "array", "(", "[", "omega", "-", "(", "np", ".", "pi", "/", "2", ")", ",", "-", "phi", ",", "-", "kappa", "-", "(", "np", ".", "pi", "/", "2", ")", "]", ")", "\n", "\n", "# Area 5b poses require some rotation and offset corrections", "\n", "if", "area_5b", ":", "\n", "        ", "M", "=", "np", ".", "array", "(", "[", "[", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "-", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "xyz", "=", "M", ".", "dot", "(", "xyz", ")", "+", "np", ".", "array", "(", "[", "-", "4.10", ",", "6.25", ",", "0.0", "]", ")", "\n", "opk", "=", "opk", "+", "np", ".", "array", "(", "[", "0", ",", "0", ",", "np", ".", "pi", "/", "2", "]", ")", "\n", "\n", "", "return", "xyz", ",", "opk", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis_area1_office1.s3dis_image_pose_pairs": [[106, 152], ["sorted", "sorted", "sorted", "print", "print", "print", "list", "osp.basename().replace", "osp.basename().replace", "osp.join", "osp.join", "set().intersection", "osp.join", "osp.join", "glob.glob", "glob.glob", "print", "print", "set", "osp.basename", "osp.join", "osp.basename", "osp.join", "set", "set", "set", "set", "len", "len", "len", "len", "set", "x.split", "x.split"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.split", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.split"], ["", "def", "s3dis_image_pose_pairs", "(", "\n", "image_dir", ",", "pose_dir", ",", "image_suffix", "=", "'_rgb.png'", ",", "\n", "pose_suffix", "=", "'_pose.json'", ",", "skip_names", "=", "None", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Search for all image-pose correspondences in the directories.\n    Return the list of image-pose pairs. Orphans are ignored.\n    \"\"\"", "\n", "# Search for images and poses", "\n", "image_names", "=", "sorted", "(", "[", "\n", "osp", ".", "basename", "(", "x", ")", ".", "replace", "(", "image_suffix", ",", "''", ")", "\n", "for", "x", "in", "glob", ".", "glob", "(", "osp", ".", "join", "(", "image_dir", ",", "'*'", "+", "image_suffix", ")", ")", "]", ")", "\n", "pose_names", "=", "sorted", "(", "[", "\n", "osp", ".", "basename", "(", "x", ")", ".", "replace", "(", "pose_suffix", ",", "''", ")", "\n", "for", "x", "in", "glob", ".", "glob", "(", "osp", ".", "join", "(", "pose_dir", ",", "'*'", "+", "pose_suffix", ")", ")", "]", ")", "\n", "\n", "# Remove images specified by skip_names", "\n", "skip_names", "=", "skip_names", "if", "skip_names", "is", "not", "None", "else", "[", "]", "\n", "image_names", "=", "[", "x", "for", "x", "in", "image_names", "if", "x", "not", "in", "skip_names", "]", "\n", "pose_names", "=", "[", "x", "for", "x", "in", "pose_names", "if", "x", "not", "in", "skip_names", "]", "\n", "\n", "# Print orphans", "\n", "if", "not", "image_names", "==", "pose_names", ":", "\n", "        ", "image_orphan", "=", "[", "\n", "osp", ".", "join", "(", "image_dir", ",", "x", "+", "image_suffix", ")", "\n", "for", "x", "in", "set", "(", "image_names", ")", "-", "set", "(", "pose_names", ")", "]", "\n", "pose_orphan", "=", "[", "\n", "osp", ".", "join", "(", "pose_dir", ",", "x", "+", "pose_suffix", ")", "\n", "for", "x", "in", "set", "(", "pose_names", ")", "-", "set", "(", "image_names", ")", "]", "\n", "print", "(", "\"Could not recover all image-pose correspondences.\"", ")", "\n", "print", "(", "f\"  Orphan images : {len(image_orphan)}/{len(image_names)}\"", ")", "\n", "if", "verbose", ":", "\n", "            ", "for", "x", "in", "image_orphan", ":", "\n", "                ", "print", "(", "4", "*", "' '", "+", "'/'", ".", "join", "(", "x", ".", "split", "(", "'/'", ")", "[", "-", "4", ":", "]", ")", ")", "\n", "", "", "print", "(", "f\"  Orphan poses  : {len(pose_orphan)}/{len(pose_names)}\"", ")", "\n", "if", "verbose", ":", "\n", "            ", "for", "x", "in", "pose_orphan", ":", "\n", "                ", "print", "(", "4", "*", "' '", "+", "'/'", ".", "join", "(", "x", ".", "split", "(", "'/'", ")", "[", "-", "4", ":", "]", ")", ")", "\n", "\n", "# Only return the recovered pairs", "\n", "", "", "", "correspondences", "=", "sorted", "(", "list", "(", "set", "(", "image_names", ")", ".", "intersection", "(", "\n", "set", "(", "pose_names", ")", ")", ")", ")", "\n", "pairs", "=", "[", "(", "\n", "osp", ".", "join", "(", "image_dir", ",", "x", "+", "image_suffix", ")", ",", "\n", "osp", ".", "join", "(", "pose_dir", ",", "x", "+", "pose_suffix", ")", ")", "\n", "for", "x", "in", "correspondences", "]", "\n", "return", "pairs", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis_area1_office1.s3dis_image_area": [[156, 159], ["path.split"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.split"], ["", "def", "s3dis_image_area", "(", "path", ")", ":", "\n", "    ", "\"\"\"S3DIS-specific. Recover the area from the image path.\"\"\"", "\n", "return", "path", ".", "split", "(", "'/'", ")", "[", "-", "4", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis_area1_office1.s3dis_image_room": [[163, 166], ["os.path.basename().split", "os.path.basename"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.split"], ["", "def", "s3dis_image_room", "(", "path", ")", ":", "\n", "    ", "\"\"\"S3DIS-specific. Recover the room from the image path.\"\"\"", "\n", "return", "'_'", ".", "join", "(", "os", ".", "path", ".", "basename", "(", "path", ")", ".", "split", "(", "'_'", ")", "[", "2", ":", "4", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis_area1_office1.s3dis_image_name": [[170, 173], ["os.path.basename().split", "os.path.basename"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.split"], ["", "def", "s3dis_image_name", "(", "path", ")", ":", "\n", "    ", "\"\"\"S3DIS-specific. Recover the name from the image path.\"\"\"", "\n", "return", "os", ".", "path", ".", "basename", "(", "path", ")", ".", "split", "(", "'_'", ")", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis.S3DISOriginalFusedMM.__init__": [[149, 187], ["InMemoryDataset.__init__", "s3dis.S3DISOriginalFusedMM._load_data", "list", "torch.load", "range", "ValueError"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis_area5_office40.S3DISSphereMM._load_data", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load"], ["instance_labels", "=", "np", ".", "zeros", "(", "(", "n_ver", ",", ")", ",", "dtype", "=", "\"int64\"", ")", "\n", "objects", "=", "glob", ".", "glob", "(", "osp", ".", "join", "(", "train_file", ",", "\"Annotations/*.txt\"", ")", ")", "\n", "i_object", "=", "1", "\n", "for", "single_object", "in", "objects", ":", "\n", "            ", "object_name", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "single_object", ")", ")", "[", "0", "]", "\n", "if", "verbose", ":", "\n", "                ", "log", ".", "debug", "(", "\"adding object \"", "+", "str", "(", "i_object", ")", "+", "\" : \"", "+", "object_name", ")", "\n", "", "object_class", "=", "object_name", ".", "split", "(", "\"_\"", ")", "[", "0", "]", "\n", "object_label", "=", "object_name_to_label", "(", "object_class", ")", "\n", "obj_ver", "=", "pd", ".", "read_csv", "(", "single_object", ",", "sep", "=", "\" \"", ",", "header", "=", "None", ")", ".", "values", "\n", "_", ",", "obj_ind", "=", "nn", ".", "kneighbors", "(", "obj_ver", "[", ":", ",", "0", ":", "3", "]", ")", "\n", "semantic_labels", "[", "obj_ind", "]", "=", "object_label", "\n", "instance_labels", "[", "obj_ind", "]", "=", "i_object", "\n", "i_object", "=", "i_object", "+", "1", "\n", "\n", "", "return", "(", "\n", "torch", ".", "from_numpy", "(", "xyz", ")", ",", "\n", "torch", ".", "from_numpy", "(", "rgb", ")", ",", "\n", "torch", ".", "from_numpy", "(", "semantic_labels", ")", ",", "\n", "torch", ".", "from_numpy", "(", "instance_labels", ")", ",", "\n", "torch", ".", "from_numpy", "(", "room_label", ")", ",", "\n", ")", "\n", "\n", "\n", "", "", "def", "to_ply", "(", "pos", ",", "label", ",", "file", ")", ":", "\n", "    ", "assert", "len", "(", "label", ".", "shape", ")", "==", "1", "\n", "assert", "pos", ".", "shape", "[", "0", "]", "==", "label", ".", "shape", "[", "0", "]", "\n", "pos", "=", "np", ".", "asarray", "(", "pos", ")", "\n", "colors", "=", "OBJECT_COLOR", "[", "np", ".", "asarray", "(", "label", ")", "]", "\n", "ply_array", "=", "np", ".", "ones", "(", "\n", "pos", ".", "shape", "[", "0", "]", ",", "dtype", "=", "[", "(", "\"x\"", ",", "\"f4\"", ")", ",", "(", "\"y\"", ",", "\"f4\"", ")", ",", "(", "\"z\"", ",", "\"f4\"", ")", ",", "(", "\"red\"", ",", "\"u1\"", ")", ",", "(", "\"green\"", ",", "\"u1\"", ")", ",", "(", "\"blue\"", ",", "\"u1\"", ")", "]", "\n", ")", "\n", "ply_array", "[", "\"x\"", "]", "=", "pos", "[", ":", ",", "0", "]", "\n", "ply_array", "[", "\"y\"", "]", "=", "pos", "[", ":", ",", "1", "]", "\n", "ply_array", "[", "\"z\"", "]", "=", "pos", "[", ":", ",", "2", "]", "\n", "ply_array", "[", "\"red\"", "]", "=", "colors", "[", ":", ",", "0", "]", "\n", "ply_array", "[", "\"green\"", "]", "=", "colors", "[", ":", ",", "1", "]", "\n", "ply_array", "[", "\"blue\"", "]", "=", "colors", "[", ":", ",", "2", "]", "\n", "el", "=", "PlyElement", ".", "describe", "(", "ply_array", ",", "\"S3DIS\"", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis.S3DISOriginalFusedMM.center_labels": [[188, 194], ["hasattr"], "methods", ["None"], ["PlyData", "(", "[", "el", "]", ",", "byte_order", "=", "\">\"", ")", ".", "write", "(", "file", ")", "\n", "\n", "\n", "################################### 1m cylinder s3dis ###################################", "\n", "\n", "\n", "", "class", "S3DIS1x1Dataset", "(", "BaseDataset", ")", ":", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis.S3DISOriginalFusedMM.raw_file_names": [[195, 198], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dataset_opt", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dataset_opt", ")", "\n", "\n", "pre_transform", "=", "self", ".", "pre_transform", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis.S3DISOriginalFusedMM.image_dir": [[199, 202], ["osp.join"], "methods", ["None"], ["self", ".", "train_dataset", "=", "S3DIS1x1", "(", "\n", "self", ".", "_data_path", ",", "\n", "test_area", "=", "self", ".", "dataset_opt", ".", "fold", ",", "\n", "train", "=", "True", ",", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis.S3DISOriginalFusedMM.pre_processed_path": [[203, 207], ["osp.join"], "methods", ["None"], ["pre_transform", "=", "self", ".", "pre_transform", ",", "\n", "transform", "=", "self", ".", "train_transform", ",", "\n", ")", "\n", "self", ".", "test_dataset", "=", "S3DIS1x1", "(", "\n", "self", ".", "_data_path", ",", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis.S3DISOriginalFusedMM.pre_collated_path": [[208, 212], ["osp.join"], "methods", ["None"], ["test_area", "=", "self", ".", "dataset_opt", ".", "fold", ",", "\n", "train", "=", "False", ",", "\n", "pre_transform", "=", "pre_transform", ",", "\n", "transform", "=", "self", ".", "test_transform", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis.S3DISOriginalFusedMM.image_data_path": [[213, 216], ["osp.join"], "methods", ["None"], ["if", "dataset_opt", ".", "class_weight_method", ":", "\n", "            ", "self", ".", "add_weights", "(", "class_weight_method", "=", "dataset_opt", ".", "class_weight_method", ")", "\n", "\n", "", "", "def", "get_tracker", "(", "self", ",", "wandb_log", ":", "bool", ",", "tensorboard_log", ":", "bool", ")", ":", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis.S3DISOriginalFusedMM.pre_transformed_image_path": [[217, 220], ["osp.join"], "methods", ["None"], ["        "]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis.S3DISOriginalFusedMM.raw_areas_paths": [[221, 225], ["osp.join", "range"], "methods", ["None"], ["\n", "from", "torch_points3d", ".", "metrics", ".", "segmentation_tracker", "import", "SegmentationTracker", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis.S3DISOriginalFusedMM.processed_file_names": [[226, 234], ["None"], "methods", ["None"], ["\n", "return", "SegmentationTracker", "(", "self", ",", "wandb_log", "=", "wandb_log", ",", "use_tensorboard", "=", "tensorboard_log", ")", "\n", "\n", "\n", "################################### Used for fused s3dis radius sphere ###################################", "\n", "\n", "\n", "", "", "class", "S3DISOriginalFused", "(", "InMemoryDataset", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis.S3DISOriginalFusedMM.intermediate_processed_paths": [[235, 242], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis.S3DISOriginalFusedMM.raw_test_data": [[247, 250], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis.S3DISOriginalFusedMM.download": [[251, 299], ["os.listdir", "len", "extract_zip", "shutil.rmtree", "os.rename", "shutil.copy", "os.system", "len", "osp.exists", "log.info", "log.info", "log.info", "log.info", "input", "gdown.download", "osp.join", "osp.join", "set().intersection", "shutil.rmtree", "os.makedirs", "s3dis.S3DISOriginalFusedMM.download", "osp.join", "osp.join", "osp.join", "set", "set"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.classification.modelnet.SampledModelNet.download", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.makedirs", "home.repos.pwc.inspect_result.drprojects_deepviewagg.classification.modelnet.SampledModelNet.download"], ["\n", "\n", "form_url", "=", "(", "\n", "\"https://docs.google.com/forms/d/e/1FAIpQLScDimvNMCGhy_rmBA2gHfDu3naktRm6A8BPwAWWDv-Uhm6Shw/viewform?c=0&w=1\"", "\n", ")", "\n", "download_url", "=", "\"https://drive.google.com/uc?id=0BweDykwS9vIobkVPN0wzRzFwTDg&export=download\"", "\n", "zip_name", "=", "\"Stanford3dDataset_v1.2_Version.zip\"", "\n", "path_file", "=", "osp", ".", "join", "(", "DIR", ",", "\"s3dis.patch\"", ")", "\n", "file_name", "=", "\"Stanford3dDataset_v1.2\"", "\n", "folders", "=", "[", "\"Area_{}\"", ".", "format", "(", "i", ")", "for", "i", "in", "range", "(", "1", ",", "7", ")", "]", "\n", "num_classes", "=", "S3DIS_NUM_CLASSES", "\n", "\n", "def", "__init__", "(", "\n", "self", ",", "root", ",", "test_area", "=", "6", ",", "split", "=", "\"train\"", ",", "transform", "=", "None", ",", "\n", "pre_transform", "=", "None", ",", "pre_collate_transform", "=", "None", ",", "pre_filter", "=", "None", ",", "\n", "keep_instance", "=", "False", ",", "verbose", "=", "False", ",", "debug", "=", "False", ")", ":", "\n", "        ", "assert", "test_area", ">=", "1", "and", "test_area", "<=", "6", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "pre_collate_transform", "=", "pre_collate_transform", "\n", "self", ".", "test_area", "=", "test_area", "\n", "self", ".", "keep_instance", "=", "keep_instance", "\n", "self", ".", "verbose", "=", "verbose", "\n", "self", ".", "debug", "=", "debug", "\n", "self", ".", "_split", "=", "split", "\n", "super", "(", "S3DISOriginalFused", ",", "self", ")", ".", "__init__", "(", "root", ",", "transform", ",", "pre_transform", ",", "pre_filter", ")", "\n", "if", "split", "==", "\"train\"", ":", "\n", "            ", "path", "=", "self", ".", "processed_paths", "[", "0", "]", "\n", "", "elif", "split", "==", "\"val\"", ":", "\n", "            ", "path", "=", "self", ".", "processed_paths", "[", "1", "]", "\n", "", "elif", "split", "==", "\"test\"", ":", "\n", "            ", "path", "=", "self", ".", "processed_paths", "[", "2", "]", "\n", "", "elif", "split", "==", "\"trainval\"", ":", "\n", "            ", "path", "=", "self", ".", "processed_paths", "[", "3", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "(", "f\"Split {split} found, but expected either \"", "\"train, val, trainval or test\"", ")", ")", "\n", "", "self", ".", "_load_data", "(", "path", ")", "\n", "\n", "if", "split", "==", "\"test\"", ":", "\n", "            ", "self", ".", "raw_test_data", "=", "torch", ".", "load", "(", "self", ".", "raw_areas_paths", "[", "test_area", "-", "1", "]", ")", "\n", "\n", "", "", "@", "property", "\n", "def", "center_labels", "(", "self", ")", ":", "\n", "        ", "if", "hasattr", "(", "self", ".", "data", ",", "\"center_label\"", ")", ":", "\n", "            ", "return", "self", ".", "data", ".", "center_label", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis.S3DISOriginalFusedMM.process": [[300, 530], ["enumerate", "print", "print", "print", "print", "print", "tuple", "delattr", "torch.save", "torch.save", "torch_points3d.core.data_transform.multimodal.image.SelectMappingFromPointId", "torch.save", "torch.save", "print", "osp.exists", "print", "tq", "enumerate", "torch.save", "print", "torch.load", "osp.exists", "torch.save", "print", "torch.load", "osp.exists", "print", "range", "torch.save", "print", "torch.load", "osp.exists", "print", "torch.save", "print", "torch.load", "delattr", "torch_geometric.data.Data.clone", "s3dis.S3DISOriginalFusedMM.process.indexer"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.clone"], ["            ", "return", "None", "\n", "\n", "", "", "@", "property", "\n", "def", "raw_file_names", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "folders", "\n", "\n", "", "@", "property", "\n", "def", "pre_processed_path", "(", "self", ")", ":", "\n", "        ", "pre_processed_file_names", "=", "\"preprocessed.pt\"", "\n", "return", "os", ".", "path", ".", "join", "(", "self", ".", "processed_dir", ",", "pre_processed_file_names", ")", "\n", "\n", "", "@", "property", "\n", "def", "raw_areas_paths", "(", "self", ")", ":", "\n", "        ", "return", "[", "os", ".", "path", ".", "join", "(", "self", ".", "processed_dir", ",", "\"raw_area_%i.pt\"", "%", "i", ")", "for", "i", "in", "range", "(", "6", ")", "]", "\n", "\n", "", "@", "property", "\n", "def", "processed_file_names", "(", "self", ")", ":", "\n", "        ", "test_area", "=", "self", ".", "test_area", "\n", "return", "(", "\n", "[", "\"{}_{}.pt\"", ".", "format", "(", "s", ",", "test_area", ")", "for", "s", "in", "[", "\"train\"", ",", "\"val\"", ",", "\"test\"", ",", "\"trainval\"", "]", "]", "\n", "+", "self", ".", "raw_areas_paths", "\n", "+", "[", "self", ".", "pre_processed_path", "]", "\n", ")", "\n", "\n", "", "@", "property", "\n", "def", "raw_test_data", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_raw_test_data", "\n", "\n", "", "@", "raw_test_data", ".", "setter", "\n", "def", "raw_test_data", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_raw_test_data", "=", "value", "\n", "\n", "", "def", "download", "(", "self", ")", ":", "\n", "        ", "raw_folders", "=", "os", ".", "listdir", "(", "self", ".", "raw_dir", ")", "\n", "if", "len", "(", "raw_folders", ")", "==", "0", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "exists", "(", "osp", ".", "join", "(", "self", ".", "root", ",", "self", ".", "zip_name", ")", ")", ":", "\n", "                ", "log", ".", "info", "(", "\"WARNING: You are downloading S3DIS dataset\"", ")", "\n", "log", ".", "info", "(", "\"Please, register yourself by filling up the form at {}\"", ".", "format", "(", "self", ".", "form_url", ")", ")", "\n", "log", ".", "info", "(", "\"***\"", ")", "\n", "log", ".", "info", "(", "\n", "\"Press any key to continue, or CTRL-C to exit. By continuing, you confirm filling up the form.\"", "\n", ")", "\n", "input", "(", "\"\"", ")", "\n", "gdown", ".", "download", "(", "self", ".", "download_url", ",", "osp", ".", "join", "(", "self", ".", "root", ",", "self", ".", "zip_name", ")", ",", "quiet", "=", "False", ")", "\n", "", "extract_zip", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "zip_name", ")", ",", "self", ".", "root", ")", "\n", "shutil", ".", "rmtree", "(", "self", ".", "raw_dir", ")", "\n", "os", ".", "rename", "(", "osp", ".", "join", "(", "self", ".", "root", ",", "self", ".", "file_name", ")", ",", "self", ".", "raw_dir", ")", "\n", "shutil", ".", "copy", "(", "self", ".", "path_file", ",", "self", ".", "raw_dir", ")", "\n", "cmd", "=", "\"patch -ruN -p0 -d  {} < {}\"", ".", "format", "(", "self", ".", "raw_dir", ",", "osp", ".", "join", "(", "self", ".", "raw_dir", ",", "\"s3dis.patch\"", ")", ")", "\n", "os", ".", "system", "(", "cmd", ")", "\n", "", "else", ":", "\n", "            ", "intersection", "=", "len", "(", "set", "(", "self", ".", "folders", ")", ".", "intersection", "(", "set", "(", "raw_folders", ")", ")", ")", "\n", "if", "intersection", "!=", "6", ":", "\n", "                ", "shutil", ".", "rmtree", "(", "self", ".", "raw_dir", ")", "\n", "os", ".", "makedirs", "(", "self", ".", "raw_dir", ")", "\n", "self", ".", "download", "(", ")", "\n", "\n", "", "", "", "def", "process", "(", "self", ")", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "pre_processed_path", ")", ":", "\n", "            ", "train_areas", "=", "[", "f", "for", "f", "in", "self", ".", "folders", "if", "str", "(", "self", ".", "test_area", ")", "not", "in", "f", "]", "\n", "test_areas", "=", "[", "f", "for", "f", "in", "self", ".", "folders", "if", "str", "(", "self", ".", "test_area", ")", "in", "f", "]", "\n", "\n", "train_files", "=", "[", "\n", "(", "f", ",", "room_name", ",", "osp", ".", "join", "(", "self", ".", "raw_dir", ",", "f", ",", "room_name", ")", ")", "\n", "for", "f", "in", "train_areas", "\n", "for", "room_name", "in", "os", ".", "listdir", "(", "osp", ".", "join", "(", "self", ".", "raw_dir", ",", "f", ")", ")", "\n", "if", "os", ".", "path", ".", "isdir", "(", "osp", ".", "join", "(", "self", ".", "raw_dir", ",", "f", ",", "room_name", ")", ")", "\n", "]", "\n", "\n", "test_files", "=", "[", "\n", "(", "f", ",", "room_name", ",", "osp", ".", "join", "(", "self", ".", "raw_dir", ",", "f", ",", "room_name", ")", ")", "\n", "for", "f", "in", "test_areas", "\n", "for", "room_name", "in", "os", ".", "listdir", "(", "osp", ".", "join", "(", "self", ".", "raw_dir", ",", "f", ")", ")", "\n", "if", "os", ".", "path", ".", "isdir", "(", "osp", ".", "join", "(", "self", ".", "raw_dir", ",", "f", ",", "room_name", ")", ")", "\n", "]", "\n", "\n", "# Gather data per area", "\n", "data_list", "=", "[", "[", "]", "for", "_", "in", "range", "(", "6", ")", "]", "\n", "if", "self", ".", "debug", ":", "\n", "                ", "areas", "=", "np", ".", "zeros", "(", "7", ")", "\n", "", "for", "(", "area", ",", "room_name", ",", "file_path", ")", "in", "tq", "(", "train_files", "+", "test_files", ")", ":", "\n", "                ", "if", "self", ".", "debug", ":", "\n", "                    ", "area_idx", "=", "int", "(", "area", ".", "split", "(", "\"_\"", ")", "[", "-", "1", "]", ")", "\n", "if", "areas", "[", "area_idx", "]", "==", "5", ":", "\n", "                        ", "continue", "\n", "", "else", ":", "\n", "                        ", "print", "(", "area_idx", ")", "\n", "areas", "[", "area_idx", "]", "+=", "1", "\n", "\n", "", "", "area_num", "=", "int", "(", "area", "[", "-", "1", "]", ")", "-", "1", "\n", "if", "self", ".", "debug", ":", "\n", "                    ", "read_s3dis_format", "(", "file_path", ",", "room_name", ",", "label_out", "=", "True", ",", "verbose", "=", "self", ".", "verbose", ",", "debug", "=", "self", ".", "debug", ")", "\n", "continue", "\n", "", "else", ":", "\n", "                    ", "xyz", ",", "rgb", ",", "semantic_labels", ",", "instance_labels", ",", "room_label", "=", "read_s3dis_format", "(", "\n", "file_path", ",", "room_name", ",", "label_out", "=", "True", ",", "verbose", "=", "self", ".", "verbose", ",", "debug", "=", "self", ".", "debug", "\n", ")", "\n", "\n", "# Room orientation correction", "\n", "# 2 rooms need to be rotated by 180\u00b0 around Z: Area_2/hallway_11 and Area_5/hallway_6", "\n", "if", "(", "area_num", "==", "1", "and", "room_name", "==", "'hallway_11'", ")", "or", "(", "area_num", "==", "4", "and", "room_name", "==", "'hallway_6'", ")", ":", "\n", "                        ", "xy_center", "=", "(", "xyz", "[", ":", ",", "0", ":", "2", "]", ".", "max", "(", "dim", "=", "0", ")", "[", "0", "]", "+", "xyz", "[", ":", ",", "0", ":", "2", "]", ".", "min", "(", "dim", "=", "0", ")", "[", "0", "]", ")", "/", "2", "\n", "xyz", "[", ":", ",", "0", ":", "2", "]", "=", "2", "*", "xy_center", "-", "xyz", "[", ":", ",", "0", ":", "2", "]", "# equivalent to 180\u00b0 Z-rotation around the XY-center", "\n", "\n", "", "rgb_norm", "=", "rgb", ".", "float", "(", ")", "/", "255.0", "\n", "data", "=", "Data", "(", "pos", "=", "xyz", ",", "y", "=", "semantic_labels", ",", "rgb", "=", "rgb_norm", ")", "\n", "if", "room_name", "in", "VALIDATION_ROOMS", ":", "\n", "                        ", "data", ".", "validation_set", "=", "True", "\n", "", "else", ":", "\n", "                        ", "data", ".", "validation_set", "=", "False", "\n", "\n", "", "if", "self", ".", "keep_instance", ":", "\n", "                        ", "data", ".", "instance_labels", "=", "instance_labels", "\n", "\n", "", "if", "self", ".", "pre_filter", "is", "not", "None", "and", "not", "self", ".", "pre_filter", "(", "data", ")", ":", "\n", "                        ", "continue", "\n", "\n", "", "data_list", "[", "area_num", "]", ".", "append", "(", "data", ")", "\n", "\n", "", "", "raw_areas", "=", "cT", ".", "PointCloudFusion", "(", ")", "(", "data_list", ")", "\n", "for", "i", ",", "area", "in", "enumerate", "(", "raw_areas", ")", ":", "\n", "                ", "torch", ".", "save", "(", "area", ",", "self", ".", "raw_areas_paths", "[", "i", "]", ")", "\n", "\n", "", "for", "area_datas", "in", "data_list", ":", "\n", "# Apply pre_transform", "\n", "                ", "if", "self", ".", "pre_transform", "is", "not", "None", ":", "\n", "                    ", "for", "data", "in", "area_datas", ":", "\n", "                        ", "data", "=", "self", ".", "pre_transform", "(", "data", ")", "\n", "", "", "", "torch", ".", "save", "(", "data_list", ",", "self", ".", "pre_processed_path", ")", "\n", "", "else", ":", "\n", "            ", "data_list", "=", "torch", ".", "load", "(", "self", ".", "pre_processed_path", ")", "\n", "\n", "", "if", "self", ".", "debug", ":", "\n", "            ", "return", "\n", "\n", "", "train_data_list", "=", "{", "}", "\n", "val_data_list", "=", "{", "}", "\n", "trainval_data_list", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "6", ")", ":", "\n", "            ", "if", "i", "!=", "self", ".", "test_area", "-", "1", ":", "\n", "                ", "train_data_list", "[", "i", "]", "=", "[", "]", "\n", "val_data_list", "[", "i", "]", "=", "[", "]", "\n", "for", "data", "in", "data_list", "[", "i", "]", ":", "\n", "                    ", "validation_set", "=", "data", ".", "validation_set", "\n", "del", "data", ".", "validation_set", "\n", "if", "validation_set", ":", "\n", "                        ", "val_data_list", "[", "i", "]", ".", "append", "(", "data", ")", "\n", "", "else", ":", "\n", "                        ", "train_data_list", "[", "i", "]", ".", "append", "(", "data", ")", "\n", "", "", "trainval_data_list", "[", "i", "]", "=", "val_data_list", "[", "i", "]", "+", "train_data_list", "[", "i", "]", "\n", "\n", "", "", "train_data_list", "=", "list", "(", "train_data_list", ".", "values", "(", ")", ")", "\n", "val_data_list", "=", "list", "(", "val_data_list", ".", "values", "(", ")", ")", "\n", "trainval_data_list", "=", "list", "(", "trainval_data_list", ".", "values", "(", ")", ")", "\n", "test_data_list", "=", "data_list", "[", "self", ".", "test_area", "-", "1", "]", "\n", "\n", "if", "self", ".", "pre_collate_transform", ":", "\n", "            ", "log", ".", "info", "(", "\"pre_collate_transform ...\"", ")", "\n", "log", ".", "info", "(", "self", ".", "pre_collate_transform", ")", "\n", "train_data_list", "=", "self", ".", "pre_collate_transform", "(", "train_data_list", ")", "\n", "val_data_list", "=", "self", ".", "pre_collate_transform", "(", "val_data_list", ")", "\n", "test_data_list", "=", "self", ".", "pre_collate_transform", "(", "test_data_list", ")", "\n", "trainval_data_list", "=", "self", ".", "pre_collate_transform", "(", "trainval_data_list", ")", "\n", "\n", "", "self", ".", "_save_data", "(", "train_data_list", ",", "val_data_list", ",", "test_data_list", ",", "trainval_data_list", ")", "\n", "\n", "", "def", "_save_data", "(", "\n", "self", ",", "train_data_list", ",", "val_data_list", ",", "test_data_list", ",", "\n", "trainval_data_list", ")", ":", "\n", "        ", "torch", ".", "save", "(", "self", ".", "collate", "(", "train_data_list", ")", ",", "self", ".", "processed_paths", "[", "0", "]", ")", "\n", "torch", ".", "save", "(", "self", ".", "collate", "(", "val_data_list", ")", ",", "self", ".", "processed_paths", "[", "1", "]", ")", "\n", "torch", ".", "save", "(", "self", ".", "collate", "(", "test_data_list", ")", ",", "self", ".", "processed_paths", "[", "2", "]", ")", "\n", "torch", ".", "save", "(", "self", ".", "collate", "(", "trainval_data_list", ")", ",", "self", ".", "processed_paths", "[", "3", "]", ")", "\n", "\n", "", "def", "_load_data", "(", "self", ",", "path", ")", ":", "\n", "        ", "self", ".", "data", ",", "self", ".", "slices", "=", "torch", ".", "load", "(", "path", ")", "\n", "\n", "# TODO: this overwrites `torch_geometric.data.InMemoryDataset.indices`", "\n", "#  so that we can handle `torch_geometric>=1.6`. This dirty trick, in", "\n", "#  return, was needed to use `torch>=1.8`, which we needed to access", "\n", "#  the new torch profiler. In the long run, need to make TP3D", "\n", "#  compatible with `torch_geometric>=2.0.0`", "\n", "", "def", "indices", "(", "self", ")", ":", "\n", "        ", "import", "torch_geometric", "as", "pyg", "\n", "version", "=", "pyg", ".", "__version__", ".", "split", "(", "'.'", ")", "\n", "is_new_pyg", "=", "int", "(", "version", "[", "0", "]", ")", ">=", "2", "or", "int", "(", "version", "[", "1", "]", ")", ">=", "7", "\n", "if", "is_new_pyg", ":", "\n", "            ", "return", "range", "(", "len", "(", "self", ")", ")", "if", "self", ".", "_indices", "is", "None", "else", "self", ".", "_indices", "\n", "", "return", "super", "(", ")", ".", "indices", "(", ")", "\n", "\n", "\n", "", "", "class", "S3DISSphere", "(", "S3DISOriginalFused", ")", ":", "\n", "    ", "\"\"\" Small variation of S3DISOriginalFused that allows random\n    sampling of spheres within an Area during training and validation.\n    By default, spheres have a radius of 2m and are taken on a\n    20cm regular grid. If `sample_per_epoch > 0`, indexing the dataset\n    will return random spheres picked on the grid with a bias towards\n    balancing class frequencies. Otherwise, if `sample_per_epoch <= 0`\n    indexing the dataset becomes deterministic and will return spheres\n    of corresponding indices.\n\n    http://buildingparser.stanford.edu/dataset.html\n\n    Parameters\n    ----------\n    root: str\n        Path to the directory where the data will be saved\n    test_area: int\n        Number between 1 and 6 that denotes the area used for testing\n    train: bool\n        Is this a train split or not\n    pre_collate_transform:\n        Transforms to be applied before the data is assembled into\n        samples (apply fusing here for example)\n    keep_instance: bool\n        Set to True if you wish to keep instance data\n    sample_per_epoch : int\n        Number of spheres that are randomly sampled at each epoch (-1\n        for fixed grid)\n    radius : float\n        Radius of each sphere\n    sample_res : float\n        The resolution of the regular grid on which the dataset samples\n        will be picked\n    pre_transform\n    transform\n    pre_filter\n    \"\"\"", "\n", "\n", "def", "__init__", "(", "\n", "self", ",", "root", ",", "*", "args", ",", "sample_per_epoch", "=", "100", ",", "radius", "=", "2", ",", "sample_res", "=", "2", ",", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis.S3DISOriginalFusedMM._load_data": [[531, 533], ["torch.load"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load"], ["**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_sample_per_epoch", "=", "sample_per_epoch", "\n", "self", ".", "_sample_res", "=", "sample_res", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis.S3DISOriginalFusedMM.indices": [[539, 546], ["pyg.__version__.split", "super().indices", "int", "int", "range", "len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.split", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis_area5_office40.S3DISOriginalFusedMM.indices", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["        ", "if", "self", ".", "_sample_per_epoch", ">", "0", ":", "\n", "            ", "return", "self", ".", "_sample_per_epoch", "\n", "", "else", ":", "\n", "            ", "return", "len", "(", "self", ".", "_test_spheres", ")", "\n", "\n", "", "", "def", "get", "(", "self", ",", "idx", ")", ":", "\n", "        ", "if", "self", ".", "_sample_per_epoch", ">", "0", ":", "\n", "            ", "return", "self", ".", "_get_random", "(", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis.S3DISSphereMM.__init__": [[588, 596], ["cT.GridSampling3D", "s3dis.S3DISOriginalFusedMM.__init__"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["centres", "[", ":", ",", "4", "]", "=", "low_res", ".", "y", "\n", "self", ".", "_centres_for_sampling", ".", "append", "(", "centres", ")", "\n", "tree", "=", "KDTree", "(", "np", ".", "asarray", "(", "data", ".", "pos", ")", ",", "leaf_size", "=", "10", ")", "\n", "setattr", "(", "data", ",", "cT", ".", "SphereSampling", ".", "KDTREE_KEY", ",", "tree", ")", "\n", "\n", "", "self", ".", "_centres_for_sampling", "=", "torch", ".", "cat", "(", "self", ".", "_centres_for_sampling", ",", "0", ")", "\n", "uni", ",", "uni_counts", "=", "np", ".", "unique", "(", "np", ".", "asarray", "(", "self", ".", "_centres_for_sampling", "[", ":", ",", "-", "1", "]", ")", ",", "return_counts", "=", "True", ")", "\n", "uni_counts", "=", "np", ".", "sqrt", "(", "uni_counts", ".", "mean", "(", ")", "/", "uni_counts", ")", "\n", "self", ".", "_label_counts", "=", "uni_counts", "/", "np", ".", "sum", "(", "uni_counts", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis.S3DISSphereMM.__len__": [[597, 602], ["len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["self", ".", "_labels", "=", "uni", "\n", "", "else", ":", "\n", "            ", "grid_sampler", "=", "cT", ".", "GridSphereSampling", "(", "\n", "self", ".", "_radius", ",", "grid_size", "=", "self", ".", "_sample_res", ",", "center", "=", "False", ")", "\n", "self", ".", "_test_spheres", "=", "grid_sampler", "(", "self", ".", "_datas", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis.S3DISSphereMM.__getitem__": [[603, 626], ["isinstance", "s3dis.S3DISSphereMM.get", "s3dis.S3DISSphereMM.transform_image", "torch_points3d.core.multimodal.data.MMData", "s3dis.S3DISSphereMM.transform", "s3dis.S3DISSphereMM._images[].clone", "type", "s3dis.S3DISSphereMM.indices"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.clone", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis_area5_office40.S3DISOriginalFusedMM.indices"], ["\n", "", "", "", "class", "S3DISCylinder", "(", "S3DISSphere", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis.S3DISSphereMM.get": [[627, 650], ["s3dis.S3DISSphereMM._get_random", "s3dis.S3DISSphereMM._test_spheres[].clone", "delattr"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis_area5_office40.S3DISSphereMM._get_random", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.clone"], ["\n", "\n", "def", "_get_random", "(", "self", ")", ":", "\n", "# Random cylinders biased towards getting more low frequency classes", "\n", "        ", "chosen_label", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "_labels", ",", "p", "=", "self", ".", "_label_counts", ")", "\n", "valid_centres", "=", "self", ".", "_centres_for_sampling", "[", "self", ".", "_centres_for_sampling", "[", ":", ",", "4", "]", "==", "chosen_label", "]", "\n", "centre_idx", "=", "int", "(", "random", ".", "random", "(", ")", "*", "(", "valid_centres", ".", "shape", "[", "0", "]", "-", "1", ")", ")", "\n", "centre", "=", "valid_centres", "[", "centre_idx", "]", "\n", "area_data", "=", "self", ".", "_datas", "[", "centre", "[", "3", "]", ".", "int", "(", ")", "]", "\n", "cylinder_sampler", "=", "cT", ".", "CylinderSampling", "(", "self", ".", "_radius", ",", "centre", "[", ":", "3", "]", ",", "align_origin", "=", "False", ")", "\n", "return", "cylinder_sampler", "(", "area_data", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis.S3DISSphereMM.process": [[651, 655], ["s3dis.S3DISOriginalFusedMM.process"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.classification.modelnet.SampledModelNet.process"], ["\n", "", "def", "_load_data", "(", "self", ",", "path", ")", ":", "\n", "        ", "self", ".", "_datas", "=", "torch", ".", "load", "(", "path", ")", "\n", "if", "not", "isinstance", "(", "self", ".", "_datas", ",", "list", ")", ":", "\n", "            ", "self", ".", "_datas", "=", "[", "self", ".", "_datas", "]", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis.S3DISSphereMM.download": [[656, 660], ["s3dis.S3DISOriginalFusedMM.download"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.classification.modelnet.SampledModelNet.download"], ["", "if", "self", ".", "_sample_per_epoch", ">", "0", ":", "\n", "            ", "self", ".", "_centres_for_sampling", "=", "[", "]", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "self", ".", "_datas", ")", ":", "\n", "                ", "assert", "not", "hasattr", "(", "\n", "data", ",", "cT", ".", "CylinderSampling", ".", "KDTREE_KEY", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis.S3DISSphereMM._get_random": [[661, 681], ["np.random.choice", "int", "centre[].int", "cT.SphereSampling", "cT.SphereSampling.", "random.random"], "methods", ["None"], [")", "# Just to make we don't have some out of date data in there", "\n", "low_res", "=", "self", ".", "_grid_sphere_sampling", "(", "data", ".", "clone", "(", ")", ")", "\n", "centres", "=", "torch", ".", "empty", "(", "(", "low_res", ".", "pos", ".", "shape", "[", "0", "]", ",", "5", ")", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "centres", "[", ":", ",", ":", "3", "]", "=", "low_res", ".", "pos", "\n", "centres", "[", ":", ",", "3", "]", "=", "i", "\n", "centres", "[", ":", ",", "4", "]", "=", "low_res", ".", "y", "\n", "self", ".", "_centres_for_sampling", ".", "append", "(", "centres", ")", "\n", "tree", "=", "KDTree", "(", "np", ".", "asarray", "(", "data", ".", "pos", "[", ":", ",", ":", "-", "1", "]", ")", ",", "leaf_size", "=", "10", ")", "\n", "setattr", "(", "data", ",", "cT", ".", "CylinderSampling", ".", "KDTREE_KEY", ",", "tree", ")", "\n", "\n", "", "self", ".", "_centres_for_sampling", "=", "torch", ".", "cat", "(", "self", ".", "_centres_for_sampling", ",", "0", ")", "\n", "uni", ",", "uni_counts", "=", "np", ".", "unique", "(", "np", ".", "asarray", "(", "self", ".", "_centres_for_sampling", "[", ":", ",", "-", "1", "]", ")", ",", "return_counts", "=", "True", ")", "\n", "uni_counts", "=", "np", ".", "sqrt", "(", "uni_counts", ".", "mean", "(", ")", "/", "uni_counts", ")", "\n", "self", ".", "_label_counts", "=", "uni_counts", "/", "np", ".", "sum", "(", "uni_counts", ")", "\n", "self", ".", "_labels", "=", "uni", "\n", "", "else", ":", "\n", "            ", "grid_sampler", "=", "cT", ".", "GridCylinderSampling", "(", "\n", "self", ".", "_radius", ",", "grid_size", "=", "self", ".", "_sample_res", ",", "center", "=", "False", ")", "\n", "self", ".", "_test_spheres", "=", "grid_sampler", "(", "self", ".", "_datas", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis.S3DISSphereMM._load_data": [[682, 730], ["torch.load", "isinstance", "isinstance", "enumerate", "torch.cat", "np.unique", "np.sqrt", "range", "cT.GridSphereSampling", "cT.GridSphereSampling.", "s3dis.S3DISSphereMM._grid_sphere_sampling", "torch.empty", "s3dis.S3DISSphereMM._centres_for_sampling.append", "KDTree", "setattr", "np.asarray", "np.sum", "len", "hasattr", "data.clone", "np.asarray", "np.sqrt.mean"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.clone", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.lovasz_loss.mean"], ["", "", "", "class", "S3DISFusedDataset", "(", "BaseDataset", ")", ":", "\n", "    ", "\"\"\" Wrapper around S3DISSphere that creates train and test datasets.\n\n    http://buildingparser.stanford.edu/dataset.html\n\n    Parameters\n    ----------\n    dataset_opt: omegaconf.DictConfig\n        Config dictionary that should contain\n\n            - dataroot\n            - fold: test_area parameter\n            - pre_collate_transform\n            - train_transforms\n            - test_transforms\n    \"\"\"", "\n", "\n", "INV_OBJECT_LABEL", "=", "INV_OBJECT_LABEL", "\n", "\n", "def", "__init__", "(", "self", ",", "dataset_opt", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dataset_opt", ")", "\n", "\n", "sampling_format", "=", "dataset_opt", ".", "get", "(", "\"sampling_format\"", ",", "\"sphere\"", ")", "\n", "dataset_cls", "=", "S3DISCylinder", "if", "sampling_format", "==", "\"cylinder\"", "else", "S3DISSphere", "\n", "sample_per_epoch", "=", "dataset_opt", ".", "get", "(", "'sample_per_epoch'", ",", "3000", ")", "\n", "radius", "=", "dataset_opt", ".", "get", "(", "'radius'", ",", "2", ")", "\n", "train_sample_res", "=", "dataset_opt", ".", "get", "(", "'train_sample_res'", ",", "radius", "/", "10", ")", "\n", "eval_sample_res", "=", "dataset_opt", ".", "get", "(", "'eval_sample_res'", ",", "radius", ")", "\n", "train_is_trainval", "=", "dataset_opt", ".", "get", "(", "'train_is_trainval'", ",", "False", ")", "\n", "\n", "self", ".", "train_dataset", "=", "dataset_cls", "(", "\n", "self", ".", "_data_path", ",", "\n", "sample_per_epoch", "=", "sample_per_epoch", ",", "\n", "radius", "=", "radius", ",", "\n", "sample_res", "=", "train_sample_res", ",", "\n", "test_area", "=", "self", ".", "dataset_opt", ".", "fold", ",", "\n", "split", "=", "\"train\"", "if", "not", "train_is_trainval", "else", "\"trainval\"", ",", "\n", "pre_collate_transform", "=", "self", ".", "pre_collate_transform", ",", "\n", "transform", "=", "self", ".", "train_transform", ")", "\n", "\n", "self", ".", "val_dataset", "=", "dataset_cls", "(", "\n", "self", ".", "_data_path", ",", "\n", "sample_per_epoch", "=", "-", "1", ",", "\n", "radius", "=", "radius", ",", "\n", "sample_res", "=", "eval_sample_res", ",", "\n", "test_area", "=", "self", ".", "dataset_opt", ".", "fold", ",", "\n", "split", "=", "\"val\"", ",", "\n", "pre_collate_transform", "=", "self", ".", "pre_collate_transform", ",", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis.S3DISFusedDataset.__init__": [[756, 811], ["torch_points3d.datasets.base_dataset_multimodal.BaseDatasetMM.__init__", "dataset_opt.get", "dataset_opt.get", "dataset_opt.get", "dataset_opt.get", "dataset_opt.get", "dataset_opt.get", "s3dis.S3DISSphereMM", "s3dis.S3DISSphereMM", "s3dis.S3DISSphereMM", "s3dis.S3DISFusedDataset.add_weights"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.base_dataset.BaseDataset.add_weights"], ["\n", "to_ply", "(", "pos", ",", "label", ",", "file", ")", "\n", "\n", "", "def", "get_tracker", "(", "self", ",", "wandb_log", ":", "bool", ",", "tensorboard_log", ":", "bool", ")", ":", "\n", "        ", "\"\"\"Factory method for the tracker\n\n        Arguments:\n            wandb_log - Log using weight and biases\n            tensorboard_log - Log using tensorboard\n        Returns:\n            [BaseTracker] -- tracker\n        \"\"\"", "\n", "from", "torch_points3d", ".", "metrics", ".", "s3dis_tracker", "import", "S3DISTracker", "\n", "\n", "return", "S3DISTracker", "(", "self", ",", "wandb_log", "=", "wandb_log", ",", "use_tensorboard", "=", "tensorboard_log", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis.S3DISFusedDataset.test_data": [[812, 815], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis.S3DISFusedDataset.to_ply": [[816, 831], ["s3dis.S3DISFusedDataset.to_ply"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis_area5_office40.S3DISFusedDataset.to_ply"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis.S3DISFusedDataset.get_tracker": [[832, 845], ["S3DISTracker"], "methods", ["None"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis.read_s3dis_pose": [[76, 104], ["np.array", "np.array", "json_file.lower", "open", "json.load", "np.double", "np.array", "np.array.dot", "np.array", "np.array"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load"], ["\"WC\"", ":", "5", ",", "\n", "\"auditorium\"", ":", "6", ",", "\n", "\"storage\"", ":", "7", ",", "\n", "\"lounge\"", ":", "8", ",", "\n", "\"lobby\"", ":", "9", ",", "\n", "\"openspace\"", ":", "10", ",", "\n", "}", "\n", "\n", "VALIDATION_ROOMS", "=", "[", "\n", "\"hallway_1\"", ",", "\n", "\"hallway_6\"", ",", "\n", "\"hallway_11\"", ",", "\n", "\"office_1\"", ",", "\n", "\"office_6\"", ",", "\n", "\"office_11\"", ",", "\n", "\"office_16\"", ",", "\n", "\"office_21\"", ",", "\n", "\"office_26\"", ",", "\n", "\"office_31\"", ",", "\n", "\"office_36\"", ",", "\n", "\"WC_2\"", ",", "\n", "\"storage_1\"", ",", "\n", "\"storage_5\"", ",", "\n", "\"conferenceRoom_2\"", ",", "\n", "\"auditorium_1\"", ",", "\n", "]", "\n", "\n", "################################### UTILS #######################################", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis.s3dis_image_area": [[108, 111], ["path.split"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.split"], ["object_label", "=", "OBJECT_LABEL", ".", "get", "(", "object_class", ",", "OBJECT_LABEL", "[", "\"clutter\"", "]", ")", "\n", "return", "object_label", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis.s3dis_image_room": [[115, 118], ["os.path.basename().split", "os.path.basename"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.split"], ["\n", "room_type", "=", "room_name", ".", "split", "(", "\"_\"", ")", "[", "0", "]", "\n", "room_label", "=", "ROOM_TYPES", "[", "room_type", "]", "\n", "raw_path", "=", "osp", ".", "join", "(", "train_file", ",", "\"{}.txt\"", ".", "format", "(", "room_name", ")", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis.s3dis_image_name": [[122, 125], ["os.path.basename().split", "os.path.basename"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.split"], ["for", "idx", ",", "row", "in", "enumerate", "(", "reader", ".", "values", ")", ":", "\n", "            ", "row", "=", "row", "[", "0", "]", ".", "split", "(", "\" \"", ")", "\n", "if", "len", "(", "row", ")", "!=", "RECOMMENDED", ":", "\n", "                ", "log", ".", "info", "(", "\"1: {} row {}: {}\"", ".", "format", "(", "raw_path", ",", "idx", ",", "row", ")", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.scannet.ScannetMM.__init__": [[106, 113], ["Scannet.__init__"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["4", ":", "(", "255.0", ",", "187.0", ",", "120.0", ")", ",", "\n", "5", ":", "(", "188.0", ",", "189.0", ",", "34.0", ")", ",", "\n", "6", ":", "(", "140.0", ",", "86.0", ",", "75.0", ")", ",", "\n", "7", ":", "(", "255.0", ",", "152.0", ",", "150.0", ")", ",", "\n", "8", ":", "(", "214.0", ",", "39.0", ",", "40.0", ")", ",", "\n", "9", ":", "(", "197.0", ",", "176.0", ",", "213.0", ")", ",", "\n", "10", ":", "(", "148.0", ",", "103.0", ",", "189.0", ")", ",", "\n", "11", ":", "(", "196.0", ",", "156.0", ",", "148.0", ")", ",", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.scannet.ScannetMM.process": [[114, 226], ["super().process", "enumerate", "zip", "print", "print", "getattr", "torch.load", "scannet.ScannetMM.uncollate", "print", "osp.join", "tqdm.auto.tqdm.auto.tqdm", "osp.exists", "os.makedirs", "set", "set", "print", "osp.join", "osp.join", "osp.join", "osp.exists", "np.array", "read_axis_align_matrix", "scannet.load_pose", "[].repeat", "[].repeat", "[].repeat", "[].repeat", "torch_points3d.core.multimodal.image.SameSettingImageData", "torch.save", "os.listdir", "torch.cat", "torch.cat", "osp.join", "len", "len", "len", "len", "scannet.ScannetMM.pre_transform_image", "split.upper", "scannet.load_pose", "utils.read_image_pose_pairs", "osp.join", "osp.join", "read_axis_align_matrix.mm().unsqueeze", "info[].unsqueeze", "read_axis_align_matrix.mm"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.classification.modelnet.SampledModelNet.process", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.scannet.ScannetMM.uncollate", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.makedirs", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.scannet.read_axis_align_matrix", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.scannet.load_pose", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.scannet.load_pose", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.utils.read_image_pose_pairs"], ["12", ":", "(", "23.0", ",", "190.0", ",", "207.0", ")", ",", "\n", "14", ":", "(", "247.0", ",", "182.0", ",", "210.0", ")", ",", "\n", "15", ":", "(", "66.0", ",", "188.0", ",", "102.0", ")", ",", "\n", "16", ":", "(", "219.0", ",", "219.0", ",", "141.0", ")", ",", "\n", "17", ":", "(", "140.0", ",", "57.0", ",", "197.0", ")", ",", "\n", "18", ":", "(", "202.0", ",", "185.0", ",", "52.0", ")", ",", "\n", "19", ":", "(", "51.0", ",", "176.0", ",", "203.0", ")", ",", "\n", "20", ":", "(", "200.0", ",", "54.0", ",", "131.0", ")", ",", "\n", "21", ":", "(", "92.0", ",", "193.0", ",", "61.0", ")", ",", "\n", "22", ":", "(", "78.0", ",", "71.0", ",", "183.0", ")", ",", "\n", "23", ":", "(", "172.0", ",", "114.0", ",", "82.0", ")", ",", "\n", "24", ":", "(", "255.0", ",", "127.0", ",", "14.0", ")", ",", "\n", "25", ":", "(", "91.0", ",", "163.0", ",", "138.0", ")", ",", "\n", "26", ":", "(", "153.0", ",", "98.0", ",", "156.0", ")", ",", "\n", "27", ":", "(", "140.0", ",", "153.0", ",", "101.0", ")", ",", "\n", "28", ":", "(", "158.0", ",", "218.0", ",", "229.0", ")", ",", "\n", "29", ":", "(", "100.0", ",", "125.0", ",", "154.0", ")", ",", "\n", "30", ":", "(", "178.0", ",", "127.0", ",", "135.0", ")", ",", "\n", "32", ":", "(", "146.0", ",", "111.0", ",", "194.0", ")", ",", "\n", "33", ":", "(", "44.0", ",", "160.0", ",", "44.0", ")", ",", "\n", "34", ":", "(", "112.0", ",", "128.0", ",", "144.0", ")", ",", "\n", "35", ":", "(", "96.0", ",", "207.0", ",", "209.0", ")", ",", "\n", "36", ":", "(", "227.0", ",", "119.0", ",", "194.0", ")", ",", "\n", "37", ":", "(", "213.0", ",", "92.0", ",", "176.0", ")", ",", "\n", "38", ":", "(", "94.0", ",", "106.0", ",", "211.0", ")", ",", "\n", "39", ":", "(", "82.0", ",", "84.0", ",", "163.0", ")", ",", "\n", "40", ":", "(", "100.0", ",", "85.0", ",", "144.0", ")", ",", "\n", "}", "\n", "\n", "SPLITS", "=", "[", "\"train\"", ",", "\"val\"", ",", "\"test\"", "]", "\n", "\n", "MAX_NUM_POINTS", "=", "1200000", "\n", "\n", "CLASS_COLORS", "=", "[", "SCANNET_COLOR_MAP", "[", "i", "]", "for", "i", "in", "VALID_CLASS_IDS", "]", "+", "[", "(", "225", ",", "225", ",", "255", ")", "]", "\n", "CLASS_NAMES", "=", "list", "(", "CLASS_LABELS", ")", "+", "[", "'ignored'", "]", "\n", "\n", "\n", "def", "get_release_scans", "(", "release_file", ")", ":", "\n", "    ", "scan_lines", "=", "urlopen", "(", "release_file", ")", "\n", "scans", "=", "[", "]", "\n", "for", "scan_line", "in", "scan_lines", ":", "\n", "        ", "scan_id", "=", "scan_line", ".", "decode", "(", "\"utf8\"", ")", ".", "rstrip", "(", "\"\\n\"", ")", "\n", "scans", ".", "append", "(", "scan_id", ")", "\n", "", "return", "scans", "\n", "\n", "\n", "", "def", "download_release", "(", "release_scans", ",", "out_dir", ",", "file_types", ",", "use_v1_sens", ")", ":", "\n", "    ", "if", "len", "(", "release_scans", ")", "==", "0", ":", "\n", "        ", "return", "\n", "", "log", ".", "info", "(", "\"Downloading ScanNet \"", "+", "RELEASE_NAME", "+", "\" release to \"", "+", "out_dir", "+", "\"...\"", ")", "\n", "failed", "=", "[", "]", "\n", "for", "scan_id", "in", "release_scans", ":", "\n", "        ", "scan_out_dir", "=", "osp", ".", "join", "(", "out_dir", ",", "scan_id", ")", "\n", "try", ":", "\n", "            ", "download_scan", "(", "scan_id", ",", "scan_out_dir", ",", "file_types", ",", "use_v1_sens", ")", "\n", "", "except", ":", "\n", "            ", "failed", ".", "append", "(", "scan_id", ")", "\n", "", "", "log", ".", "info", "(", "\"Downloaded ScanNet \"", "+", "RELEASE_NAME", "+", "\" release.\"", ")", "\n", "if", "len", "(", "failed", ")", ":", "\n", "        ", "log", ".", "warning", "(", "\"Failed downloads: {}\"", ".", "format", "(", "failed", ")", ")", "\n", "\n", "\n", "", "", "def", "download_file", "(", "url", ",", "out_file", ")", ":", "\n", "    ", "out_dir", "=", "osp", ".", "dirname", "(", "out_file", ")", "\n", "if", "not", "osp", ".", "isdir", "(", "out_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "out_dir", ")", "\n", "", "if", "not", "osp", ".", "isfile", "(", "out_file", ")", ":", "\n", "        ", "log", ".", "info", "(", "\"\\t\"", "+", "url", "+", "\" > \"", "+", "out_file", ")", "\n", "fh", ",", "out_file_tmp", "=", "tempfile", ".", "mkstemp", "(", "dir", "=", "out_dir", ")", "\n", "f", "=", "os", ".", "fdopen", "(", "fh", ",", "\"w\"", ")", "\n", "f", ".", "close", "(", ")", "\n", "urllib", ".", "request", ".", "urlretrieve", "(", "url", ",", "out_file_tmp", ")", "\n", "# urllib.urlretrieve(url, out_file_tmp)", "\n", "os", ".", "rename", "(", "out_file_tmp", ",", "out_file", ")", "\n", "", "else", ":", "\n", "        ", "pass", "\n", "# log.warning(\"WARNING Skipping download of existing file \" + out_file)", "\n", "\n", "\n", "", "", "def", "download_scan", "(", "scan_id", ",", "out_dir", ",", "file_types", ",", "use_v1_sens", ")", ":", "\n", "# log.info(\"Downloading ScanNet \" + RELEASE_NAME + \" scan \" + scan_id + \" ...\")", "\n", "    ", "if", "not", "osp", ".", "isdir", "(", "out_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "out_dir", ")", "\n", "", "for", "ft", "in", "file_types", ":", "\n", "        ", "v1_sens", "=", "use_v1_sens", "and", "ft", "==", "\".sens\"", "\n", "url", "=", "(", "\n", "BASE_URL", "+", "RELEASE", "+", "\"/\"", "+", "scan_id", "+", "\"/\"", "+", "scan_id", "+", "ft", "\n", "if", "not", "v1_sens", "\n", "else", "BASE_URL", "+", "RELEASES", "[", "V1_IDX", "]", "+", "\"/\"", "+", "scan_id", "+", "\"/\"", "+", "scan_id", "+", "ft", "\n", ")", "\n", "out_file", "=", "out_dir", "+", "\"/\"", "+", "scan_id", "+", "ft", "\n", "download_file", "(", "url", ",", "out_file", ")", "\n", "# log.info(\"Downloaded scan \" + scan_id)", "\n", "\n", "\n", "", "", "def", "download_label_map", "(", "out_dir", ")", ":", "\n", "    ", "log", ".", "info", "(", "\"Downloading ScanNet \"", "+", "RELEASE_NAME", "+", "\" label mapping file...\"", ")", "\n", "files", "=", "[", "LABEL_MAP_FILE", "]", "\n", "for", "file", "in", "files", ":", "\n", "        ", "url", "=", "BASE_URL", "+", "RELEASE_TASKS", "+", "\"/\"", "+", "file", "\n", "localpath", "=", "osp", ".", "join", "(", "out_dir", ",", "file", ")", "\n", "localdir", "=", "osp", ".", "dirname", "(", "localpath", ")", "\n", "if", "not", "osp", ".", "isdir", "(", "localdir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "localdir", ")", "\n", "", "download_file", "(", "url", ",", "localpath", ")", "\n", "", "log", ".", "info", "(", "\"Downloaded ScanNet \"", "+", "RELEASE_NAME", "+", "\" label mapping file.\"", ")", "\n", "\n", "\n", "# REFERENCE TO https://github.com/facebookresearch/votenet/blob/master/scannet/load_scannet_data.py", "\n", "########################################################################################", "\n", "#                                                                                      #", "\n", "#                                      UTILS                                           #", "\n", "#                                                                                      #", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.scannet.ScannetMM.processed_file_names": [[227, 230], ["None"], "methods", ["None"], ["########################################################################################", "\n", "\n", "\n", "", "def", "represents_int", "(", "s", ")", ":", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.scannet.ScannetMM.processed_2d_paths": [[231, 234], ["osp.join"], "methods", ["None"], ["    ", "\"\"\" if string s represents an int. \"\"\"", "\n", "try", ":", "\n", "        ", "int", "(", "s", ")", "\n", "return", "True", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.scannet.ScannetMM.__getitem__": [[235, 273], ["isinstance", "scannet.ScannetMM.get", "getattr", "scannet.ScannetMM.SPLITS.index", "torch.load", "torch_points3d.core.multimodal.data.MMData", "scannet.ScannetMM.transform", "osp.join", "scannet.ScannetMM.transform_image", "type", "int", "scannet.ScannetMM.split.upper", "scannet.ScannetMM.id_scan.item"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load"], ["", "except", "ValueError", ":", "\n", "        ", "return", "False", "\n", "\n", "\n", "", "", "def", "read_label_mapping", "(", "filename", ",", "label_from", "=", "\"raw_category\"", ",", "label_to", "=", "\"nyu40id\"", ")", ":", "\n", "    ", "assert", "osp", ".", "isfile", "(", "filename", ")", "\n", "mapping", "=", "dict", "(", ")", "\n", "with", "open", "(", "filename", ")", "as", "csvfile", ":", "\n", "        ", "reader", "=", "csv", ".", "DictReader", "(", "csvfile", ",", "delimiter", "=", "\"\\t\"", ")", "\n", "for", "row", "in", "reader", ":", "\n", "            ", "mapping", "[", "row", "[", "label_from", "]", "]", "=", "int", "(", "row", "[", "label_to", "]", ")", "\n", "", "", "if", "represents_int", "(", "list", "(", "mapping", ".", "keys", "(", ")", ")", "[", "0", "]", ")", ":", "\n", "        ", "mapping", "=", "{", "int", "(", "k", ")", ":", "v", "for", "k", ",", "v", "in", "mapping", ".", "items", "(", ")", "}", "\n", "", "return", "mapping", "\n", "\n", "\n", "", "def", "read_mesh_vertices", "(", "filename", ")", ":", "\n", "    ", "\"\"\"read XYZ for each vertex.\"\"\"", "\n", "assert", "osp", ".", "isfile", "(", "filename", ")", "\n", "with", "open", "(", "filename", ",", "\"rb\"", ")", "as", "f", ":", "\n", "        ", "plydata", "=", "PlyData", ".", "read", "(", "f", ")", "\n", "num_verts", "=", "plydata", "[", "\"vertex\"", "]", ".", "count", "\n", "vertices", "=", "np", ".", "zeros", "(", "shape", "=", "[", "num_verts", ",", "3", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "vertices", "[", ":", ",", "0", "]", "=", "plydata", "[", "\"vertex\"", "]", ".", "data", "[", "\"x\"", "]", "\n", "vertices", "[", ":", ",", "1", "]", "=", "plydata", "[", "\"vertex\"", "]", ".", "data", "[", "\"y\"", "]", "\n", "vertices", "[", ":", ",", "2", "]", "=", "plydata", "[", "\"vertex\"", "]", ".", "data", "[", "\"z\"", "]", "\n", "", "return", "vertices", "\n", "\n", "\n", "", "def", "read_mesh_vertices_rgb", "(", "filename", ")", ":", "\n", "    ", "\"\"\"read XYZ RGB for each vertex.\n    Note: RGB values are in 0-255\n    \"\"\"", "\n", "assert", "osp", ".", "isfile", "(", "filename", ")", "\n", "with", "open", "(", "filename", ",", "\"rb\"", ")", "as", "f", ":", "\n", "        ", "plydata", "=", "PlyData", ".", "read", "(", "f", ")", "\n", "num_verts", "=", "plydata", "[", "\"vertex\"", "]", ".", "count", "\n", "vertices", "=", "np", ".", "zeros", "(", "shape", "=", "[", "num_verts", ",", "6", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "vertices", "[", ":", ",", "0", "]", "=", "plydata", "[", "\"vertex\"", "]", ".", "data", "[", "\"x\"", "]", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.scannet.ScannetMM.uncollate": [[274, 305], ["range", "data_collated.__class__", "hasattr", "torch.is_tensor", "slices[].item", "slices[].item", "list", "slice", "itertools.repeat", "slice", "slice", "item.dim", "data_collated.__cat_dim__", "int", "data_collated.__class__.id_scan.item"], "methods", ["None"], ["vertices", "[", ":", ",", "1", "]", "=", "plydata", "[", "\"vertex\"", "]", ".", "data", "[", "\"y\"", "]", "\n", "vertices", "[", ":", ",", "2", "]", "=", "plydata", "[", "\"vertex\"", "]", ".", "data", "[", "\"z\"", "]", "\n", "vertices", "[", ":", ",", "3", "]", "=", "plydata", "[", "\"vertex\"", "]", ".", "data", "[", "\"red\"", "]", "\n", "vertices", "[", ":", ",", "4", "]", "=", "plydata", "[", "\"vertex\"", "]", ".", "data", "[", "\"green\"", "]", "\n", "vertices", "[", ":", ",", "5", "]", "=", "plydata", "[", "\"vertex\"", "]", ".", "data", "[", "\"blue\"", "]", "\n", "", "return", "vertices", "\n", "\n", "\n", "", "def", "read_aggregation", "(", "filename", ")", ":", "\n", "    ", "assert", "osp", ".", "isfile", "(", "filename", ")", "\n", "object_id_to_segs", "=", "{", "}", "\n", "label_to_segs", "=", "{", "}", "\n", "with", "open", "(", "filename", ")", "as", "f", ":", "\n", "        ", "data", "=", "json", ".", "load", "(", "f", ")", "\n", "num_objects", "=", "len", "(", "data", "[", "\"segGroups\"", "]", ")", "\n", "for", "i", "in", "range", "(", "num_objects", ")", ":", "\n", "            ", "object_id", "=", "data", "[", "\"segGroups\"", "]", "[", "i", "]", "[", "\"objectId\"", "]", "+", "1", "# instance ids should be 1-indexed", "\n", "label", "=", "data", "[", "\"segGroups\"", "]", "[", "i", "]", "[", "\"label\"", "]", "\n", "segs", "=", "data", "[", "\"segGroups\"", "]", "[", "i", "]", "[", "\"segments\"", "]", "\n", "object_id_to_segs", "[", "object_id", "]", "=", "segs", "\n", "if", "label", "in", "label_to_segs", ":", "\n", "                ", "label_to_segs", "[", "label", "]", ".", "extend", "(", "segs", ")", "\n", "", "else", ":", "\n", "                ", "label_to_segs", "[", "label", "]", "=", "segs", "\n", "", "", "", "return", "object_id_to_segs", ",", "label_to_segs", "\n", "\n", "\n", "", "def", "read_axis_align_matrix", "(", "filename", ")", ":", "\n", "    ", "lines", "=", "open", "(", "filename", ")", ".", "readlines", "(", ")", "\n", "axis_align_matrix", "=", "None", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "if", "\"axisAlignment\"", "in", "line", ":", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.scannet.ScannetDatasetMM.__init__": [[332, 412], ["torch_points3d.datasets.base_dataset_multimodal.BaseDatasetMM.__init__", "list", "dataset_opt.get", "dataset_opt.get", "dataset_opt.get", "dataset_opt.get", "dataset_opt.get", "dataset_opt.get", "dataset_opt.get", "dataset_opt.get", "scannet.ScannetMM", "scannet.ScannetMM", "scannet.ScannetMM", "dataset_opt.get"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get"], ["label_map", "=", "read_label_mapping", "(", "label_map_file", ",", "label_from", "=", "\"raw_category\"", ",", "label_to", "=", "\"nyu40id\"", ")", "\n", "mesh_vertices", "=", "read_mesh_vertices_rgb", "(", "mesh_file", ")", "\n", "\n", "# Load scene axis alignment matrix", "\n", "axis_align_matrix", "=", "read_axis_align_matrix", "(", "meta_file", ")", ".", "numpy", "(", ")", "\n", "pts", "=", "np", ".", "ones", "(", "(", "mesh_vertices", ".", "shape", "[", "0", "]", ",", "4", ")", ")", "\n", "pts", "[", ":", ",", "0", ":", "3", "]", "=", "mesh_vertices", "[", ":", ",", "0", ":", "3", "]", "\n", "pts", "=", "np", ".", "dot", "(", "pts", ",", "axis_align_matrix", ".", "transpose", "(", ")", ")", "# Nx4", "\n", "mesh_vertices", "[", ":", ",", "0", ":", "3", "]", "=", "pts", "[", ":", ",", "0", ":", "3", "]", "\n", "\n", "# Load semantic and instance labels", "\n", "object_id_to_segs", ",", "label_to_segs", "=", "read_aggregation", "(", "agg_file", ")", "\n", "seg_to_verts", ",", "num_verts", "=", "read_segmentation", "(", "seg_file", ")", "\n", "label_ids", "=", "np", ".", "zeros", "(", "shape", "=", "(", "num_verts", ")", ",", "dtype", "=", "np", ".", "uint32", ")", "# 0: unannotated", "\n", "object_id_to_label_id", "=", "{", "}", "\n", "for", "label", ",", "segs", "in", "label_to_segs", ".", "items", "(", ")", ":", "\n", "        ", "label_id", "=", "label_map", "[", "label", "]", "\n", "for", "seg", "in", "segs", ":", "\n", "            ", "verts", "=", "seg_to_verts", "[", "seg", "]", "\n", "label_ids", "[", "verts", "]", "=", "label_id", "\n", "", "", "instance_ids", "=", "np", ".", "zeros", "(", "shape", "=", "(", "num_verts", ")", ",", "dtype", "=", "np", ".", "uint32", ")", "# 0: unannotated", "\n", "num_instances", "=", "len", "(", "np", ".", "unique", "(", "list", "(", "object_id_to_segs", ".", "keys", "(", ")", ")", ")", ")", "\n", "for", "object_id", ",", "segs", "in", "object_id_to_segs", ".", "items", "(", ")", ":", "\n", "        ", "for", "seg", "in", "segs", ":", "\n", "            ", "verts", "=", "seg_to_verts", "[", "seg", "]", "\n", "instance_ids", "[", "verts", "]", "=", "object_id", "\n", "if", "object_id", "not", "in", "object_id_to_label_id", ":", "\n", "                ", "object_id_to_label_id", "[", "object_id", "]", "=", "label_ids", "[", "verts", "]", "[", "0", "]", "\n", "", "", "", "instance_bboxes", "=", "np", ".", "zeros", "(", "(", "num_instances", ",", "7", ")", ")", "\n", "for", "obj_id", "in", "object_id_to_segs", ":", "\n", "        ", "label_id", "=", "object_id_to_label_id", "[", "obj_id", "]", "\n", "obj_pc", "=", "mesh_vertices", "[", "instance_ids", "==", "obj_id", ",", "0", ":", "3", "]", "\n", "if", "len", "(", "obj_pc", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "# Compute axis aligned box", "\n", "# An axis aligned bounding box is parameterized by", "\n", "# (cx,cy,cz) and (dx,dy,dz) and label id", "\n", "# where (cx,cy,cz) is the center point of the box,", "\n", "# dx is the x-axis length of the box.", "\n", "", "xmin", "=", "np", ".", "min", "(", "obj_pc", "[", ":", ",", "0", "]", ")", "\n", "ymin", "=", "np", ".", "min", "(", "obj_pc", "[", ":", ",", "1", "]", ")", "\n", "zmin", "=", "np", ".", "min", "(", "obj_pc", "[", ":", ",", "2", "]", ")", "\n", "xmax", "=", "np", ".", "max", "(", "obj_pc", "[", ":", ",", "0", "]", ")", "\n", "ymax", "=", "np", ".", "max", "(", "obj_pc", "[", ":", ",", "1", "]", ")", "\n", "zmax", "=", "np", ".", "max", "(", "obj_pc", "[", ":", ",", "2", "]", ")", "\n", "bbox", "=", "np", ".", "array", "(", "\n", "[", "\n", "(", "xmin", "+", "xmax", ")", "/", "2.0", ",", "\n", "(", "ymin", "+", "ymax", ")", "/", "2.0", ",", "\n", "(", "zmin", "+", "zmax", ")", "/", "2.0", ",", "\n", "xmax", "-", "xmin", ",", "\n", "ymax", "-", "ymin", ",", "\n", "zmax", "-", "zmin", ",", "\n", "label_id", ",", "\n", "]", "\n", ")", "\n", "# NOTE: this assumes obj_id is in 1,2,3,.,,,.NUM_INSTANCES", "\n", "instance_bboxes", "[", "obj_id", "-", "1", ",", ":", "]", "=", "bbox", "\n", "\n", "", "return", "(", "\n", "mesh_vertices", ".", "astype", "(", "np", ".", "float32", ")", ",", "\n", "label_ids", ".", "astype", "(", "np", ".", "int", ")", ",", "\n", "instance_ids", ".", "astype", "(", "np", ".", "int", ")", ",", "\n", "instance_bboxes", ".", "astype", "(", "np", ".", "float32", ")", ",", "\n", "object_id_to_label_id", ",", "\n", ")", "\n", "\n", "\n", "# REFERENCE TO https://github.com/ScanNet/ScanNet/tree/master/SensReader/python", "\n", "# Changes were made to accelerate processing by skipping frames at load time", "\n", "########################################################################################", "\n", "#                                                                                      #", "\n", "#                                SENS FILE EXPORT UTILS                                #", "\n", "#                                                                                      #", "\n", "########################################################################################", "\n", "\n", "", "COMPRESSION_TYPE_COLOR", "=", "{", "-", "1", ":", "'unknown'", ",", "0", ":", "'raw'", ",", "1", ":", "'png'", ",", "2", ":", "'jpeg'", "}", "\n", "COMPRESSION_TYPE_DEPTH", "=", "{", "-", "1", ":", "'unknown'", ",", "0", ":", "'raw_ushort'", ",", "1", ":", "'zlib_ushort'", ",", "2", ":", "'occi_ushort'", "}", "\n", "\n", "\n", "class", "RGBDFrame", ":", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.scannet.ScannetDatasetMM.path_to_submission": [[414, 417], ["None"], "methods", ["None"], ["    ", "def", "load", "(", "self", ",", "file_handle", ",", "skip_color", "=", "False", ",", "skip_depth", "=", "False", ")", ":", "\n", "        ", "self", ".", "camera_to_world", "=", "np", ".", "asarray", "(", "struct", ".", "unpack", "(", "'f'", "*", "16", ",", "file_handle", ".", "read", "(", "16", "*", "4", ")", ")", ",", "dtype", "=", "np", ".", "float32", ")", ".", "reshape", "(", "\n", "4", ",", "4", ")", "\n", "self", ".", "timestamp_color", "=", "struct", ".", "unpack", "(", "'Q'", ",", "file_handle", ".", "read", "(", "8", ")", ")", "[", "0", "]", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.scannet.ScannetDatasetMM.get_tracker": [[418, 430], ["ScannetSegmentationTracker"], "methods", ["None"], ["self", ".", "timestamp_depth", "=", "struct", ".", "unpack", "(", "'Q'", ",", "file_handle", ".", "read", "(", "8", ")", ")", "[", "0", "]", "\n", "self", ".", "color_size_bytes", "=", "struct", ".", "unpack", "(", "'Q'", ",", "file_handle", ".", "read", "(", "8", ")", ")", "[", "0", "]", "\n", "self", ".", "depth_size_bytes", "=", "struct", ".", "unpack", "(", "'Q'", ",", "file_handle", ".", "read", "(", "8", ")", ")", "[", "0", "]", "\n", "if", "skip_color", ":", "\n", "            ", "self", ".", "color_data", "=", "None", "\n", "file_handle", ".", "seek", "(", "self", ".", "color_size_bytes", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "color_data", "=", "b''", ".", "join", "(", "struct", ".", "unpack", "(", "'c'", "*", "self", ".", "color_size_bytes", ",", "file_handle", ".", "read", "(", "self", ".", "color_size_bytes", ")", ")", ")", "\n", "", "if", "skip_depth", ":", "\n", "            ", "self", ".", "depth_data", "=", "None", "\n", "file_handle", ".", "seek", "(", "self", ".", "depth_size_bytes", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "depth_data", "=", "b''", ".", "join", "(", "struct", ".", "unpack", "(", "'c'", "*", "self", ".", "depth_size_bytes", ",", "file_handle", ".", "read", "(", "self", ".", "depth_size_bytes", ")", ")", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.scannet.load_pose": [[21, 30], ["open().read().splitlines", "torch.from_numpy", "len", "np.asarray().astype", "open().read", "x.split", "np.asarray", "open"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.split"], ["from", "tqdm", "import", "tqdm", "\n", "\n", "import", "tempfile", "\n", "import", "urllib", "\n", "from", "urllib", ".", "request", "import", "urlopen", "\n", "\n", "from", "torch_points3d", ".", "datasets", ".", "base_dataset", "import", "BaseDataset", "\n", "import", "torch_points3d", ".", "core", ".", "data_transform", "as", "cT", "\n", "from", ".", "import", "IGNORE_LABEL", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.kitti360.WindowMM.__init__": [[192, 198], ["Window.__init__", "torch.load"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load"], ["        ", "\"\"\"Drop in FIFO order.\"\"\"", "\n", "idx", "=", "self", ".", "_queue", ".", "pop", "(", "0", ")", "\n", "_", "=", "self", ".", "_windows", ".", "pop", "(", "idx", ",", "None", ")", "\n", "\n", "", "def", "clear", "(", "self", ")", ":", "\n", "        ", "\"\"\"Clear the buffer.\"\"\"", "\n", "self", ".", "_windows", "=", "{", "}", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.kitti360.WindowMM.images": [[199, 202], ["None"], "methods", ["None"], ["\n", "\n", "########################################################################", "\n", "#                           KITTI360Cylinder                           #", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.kitti360.WindowMM.num_views": [[203, 206], ["None"], "methods", ["None"], ["########################################################################", "\n", "\n", "", "", "class", "KITTI360Cylinder", "(", "InMemoryDataset", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.kitti360.WindowMM.__repr__": [[207, 213], ["getattr"], "methods", ["None"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.kitti360.WindowMMBuffer.__getitem__": [[227, 246], ["kitti360.WindowMM", "kitti360.WindowMMBuffer._queue.append", "kitti360.WindowMMBuffer._drop_oldest_window"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.WindowBuffer._drop_oldest_window"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.kitti360.KITTI360CylinderMM.__init__": [[314, 340], ["KITTI360Cylinder.__init__", "kitti360.WindowMMBuffer"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["self", ".", "_label_counts", "[", "i", ",", "labels", "]", "=", "counts", "\n", "\n", "", "if", "self", ".", "is_random", ":", "\n", "            ", "assert", "self", ".", "_label_counts", ".", "sum", "(", ")", ">", "0", ",", "'The dataset has no sampling centers with relevant classes, '", "'check that your data has labels, that they follow the '", "'nomenclature defined for KITTI360, that your dataset uses '", "'enough windows and has reasonable downsampling and '", "'cylinder sampling resolutions.'", "\n", "\n", "# Initialize the window buffer that will take care of loading", "\n", "# and dropping windows in memory", "\n", "", "self", ".", "_buffer", "=", "WindowBuffer", "(", "self", ",", "buffer", ")", "\n", "\n", "", "@", "property", "\n", "def", "split", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_split", "\n", "\n", "", "@", "property", "\n", "def", "has_labels", "(", "self", ")", ":", "\n", "        ", "\"\"\"Self-explanatory attribute needed for BaseDataset.\"\"\"", "\n", "return", "self", ".", "split", "!=", "'test'", "\n", "\n", "", "@", "property", "\n", "def", "sample_per_epoch", "(", "self", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.kitti360.KITTI360CylinderMM.image_r_max": [[341, 345], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.kitti360.KITTI360CylinderMM.image_ratio": [[346, 352], ["None"], "methods", ["None"], ["\n", "return", "self", ".", "_sample_per_epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.kitti360.KITTI360CylinderMM.image_size": [[353, 357], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "is_random", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "sample_per_epoch", ">", "0", "\n", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.kitti360.KITTI360CylinderMM.voxel": [[358, 362], ["None"], "methods", ["None"], ["def", "radius", "(", "self", ")", ":", "\n", "        ", "\"\"\"The radius of cylindrical samples.\"\"\"", "\n", "return", "self", ".", "_radius", "\n", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.kitti360.KITTI360CylinderMM.cam_id": [[363, 367], ["None"], "methods", ["None"], ["def", "sample_res", "(", "self", ")", ":", "\n", "        ", "\"\"\"The resolution of the grid on which cylindrical samples are\n        generated. The higher the sample_res, the less cylinders in the\n        dataset.\n        \"\"\"", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.kitti360.KITTI360CylinderMM.sequences": [[368, 372], ["sorted", "list", "set", "w.split"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.split"], ["return", "self", ".", "_sample_res", "\n", "\n", "", "@", "property", "\n", "def", "windows", "(", "self", ")", ":", "\n", "        ", "\"\"\"Filenames of the dataset windows.\"\"\"", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.kitti360.KITTI360CylinderMM.image_paths": [[373, 379], ["osp.join"], "methods", ["None"], ["if", "self", ".", "split", "==", "'trainval'", ":", "\n", "            ", "return", "self", ".", "_WINDOWS", "[", "'train'", "]", "+", "self", ".", "_WINDOWS", "[", "'val'", "]", "\n", "", "return", "self", ".", "_WINDOWS", "[", "self", ".", "split", "]", "\n", "\n", "", "@", "property", "\n", "def", "paths", "(", "self", ")", ":", "\n", "        ", "\"\"\"Paths to the dataset windows data.\"\"\"", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.kitti360.KITTI360CylinderMM.raw_file_structure": [[380, 408], ["None"], "methods", ["None"], ["return", "[", "\n", "osp", ".", "join", "(", "self", ".", "processed_dir", ",", "p", ")", "\n", "for", "p", "in", "self", ".", "processed_3d_file_names", "]", "\n", "\n", "", "@", "property", "\n", "def", "sampling_paths", "(", "self", ")", ":", "\n", "        ", "\"\"\"Paths to the dataset windows sampling data.\"\"\"", "\n", "return", "[", "\n", "osp", ".", "join", "(", "self", ".", "processed_dir", ",", "p", ")", "\n", "for", "p", "in", "self", ".", "processed_3d_sampling_file_names", "]", "\n", "\n", "", "@", "property", "\n", "def", "label_counts", "(", "self", ")", ":", "\n", "        ", "\"\"\"Count of cylindrical sampling center of each class, for each\n        window. Used for class-balanced random sampling of cylinders in\n        the dataset, when self.is_random==True.\n        \"\"\"", "\n", "return", "self", ".", "_label_counts", "\n", "\n", "", "@", "property", "\n", "def", "sampling_sizes", "(", "self", ")", ":", "\n", "        ", "\"\"\"Number of cylindrical sampling, for each window. Used for\n        deterministic sampling of cylinders in the dataset, when\n        self.is_random==False.\n        \"\"\"", "\n", "return", "self", ".", "_sampling_sizes", "\n", "\n", "", "@", "property", "\n", "def", "window_sizes", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.kitti360.KITTI360CylinderMM.raw_file_names": [[409, 414], ["None"], "methods", ["None"], ["        ", "\"\"\"Number of points for each pre_transformed window. This\n        information will be passed in the Data objects generated by the\n        dataset for the KITTI360Tracker to use when accumulating\n        predictions on overlapping cylinders and any other voting\n        schemes.\n        \"\"\"", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.kitti360.KITTI360CylinderMM.raw_file_names_2d": [[415, 422], ["osp.join"], "methods", ["None"], ["return", "self", ".", "_window_sizes", "\n", "\n", "", "@", "property", "\n", "def", "window_raw_sizes", "(", "self", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.kitti360.KITTI360CylinderMM.raw_file_names_calibration": [[423, 428], ["None"], "methods", ["None"], ["\n", "return", "self", ".", "_window_raw_sizes", "\n", "\n", "", "@", "property", "\n", "def", "buffer", "(", "self", ")", ":", "\n", "        ", "\"\"\"Buffer holding currently loaded windows.\"\"\"", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.kitti360.KITTI360CylinderMM.raw_file_names_poses": [[429, 434], ["osp.join"], "methods", ["None"], ["return", "self", ".", "_buffer", "\n", "\n", "", "@", "property", "\n", "def", "raw_file_structure", "(", "self", ")", ":", "\n", "        ", "return"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.kitti360.KITTI360CylinderMM.processed_2d_file_names": [[435, 459], ["osp.join", "osp.join", "int"], "methods", ["None"], ["\n", "\n", "", "@", "property", "\n", "def", "raw_file_names", "(", "self", ")", ":", "\n", "        ", "\"\"\"The file paths to find in order to skip the download.\"\"\"", "\n", "return", "self", ".", "raw_file_names_3d", "\n", "\n", "", "@", "property", "\n", "def", "raw_file_names_3d", "(", "self", ")", ":", "\n", "        ", "\"\"\"Some of the file paths to find in order to skip the download.\n        Those are not directly specified inside of self.raw_file_names\n        in case self.raw_file_names would need to be extended (eg with\n        3D bounding boxes files).\n        \"\"\"", "\n", "return", "[", "\n", "osp", ".", "join", "(", "'data_3d_semantics'", ",", "x", ".", "split", "(", "'/'", ")", "[", "0", "]", ",", "'static'", ",", "\n", "x", ".", "split", "(", "'/'", ")", "[", "1", "]", "+", "'.ply'", ")", "\n", "for", "x", "in", "self", ".", "windows", "]", "\n", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.kitti360.KITTI360CylinderMM.processed_file_names": [[460, 466], ["None"], "methods", ["None"], ["def", "processed_3d_file_names", "(", "self", ")", ":", "\n", "# For 'trainval', we use files from 'train' and 'val' to save", "\n", "# memory", "\n", "        ", "if", "self", ".", "split", "==", "'trainval'", ":", "\n", "            ", "return", "[", "\n", "osp", ".", "join", "(", "s", ",", "'3d'", ",", "f'{w}.pt'", ")", "\n", "for", "s", "in", "(", "'train'", ",", "'val'", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.kitti360.KITTI360CylinderMM.download": [[467, 504], ["kitti360.KITTI360CylinderMM.download_warning", "osp.join", "all", "kitti360.KITTI360CylinderMM.download_message", "osp.join", "run_command", "osp.join", "osp.exists", "kitti360.KITTI360CylinderMM.download_message", "osp.join", "run_command", "osp.exists", "kitti360.KITTI360CylinderMM.download_message", "osp.join", "run_command", "all", "kitti360.KITTI360CylinderMM.download_message", "osp.join", "run_command", "osp.join", "osp.exists", "osp.exists", "osp.join", "osp.join"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.download_warning", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.download_message", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.download.run_command", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.download_message", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.download.run_command", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.download_message", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.download.run_command", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.download_message", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.download.run_command"], ["for", "w", "in", "self", ".", "_WINDOWS", "[", "s", "]", "]", "\n", "\n", "", "return", "[", "osp", ".", "join", "(", "self", ".", "split", ",", "'3d'", ",", "f'{w}.pt'", ")", "for", "w", "in", "self", ".", "windows", "]", "\n", "\n", "", "@", "property", "\n", "def", "processed_3d_sampling_file_names", "(", "self", ")", ":", "\n", "# For 'trainval', we use files from 'train' and 'val' to save", "\n", "# memory", "\n", "        ", "if", "self", ".", "split", "==", "'trainval'", ":", "\n", "            ", "return", "[", "\n", "osp", ".", "join", "(", "s", ",", "'3d'", ",", "f'{w}_{hash(self.sample_res)}.pt'", ")", "\n", "for", "s", "in", "(", "'train'", ",", "'val'", ")", "\n", "for", "w", "in", "self", ".", "_WINDOWS", "[", "s", "]", "]", "\n", "\n", "", "return", "[", "\n", "osp", ".", "join", "(", "self", ".", "split", ",", "'3d'", ",", "f'{w}_{hash(self.sample_res)}.pt'", ")", "\n", "for", "w", "in", "self", ".", "windows", "]", "\n", "\n", "", "@", "property", "\n", "def", "processed_file_names", "(", "self", ")", ":", "\n", "        ", "\"\"\"The name of the files to find in the :obj:`self.processed_dir`\n        folder in order to skip the processing\n        \"\"\"", "\n", "return", "self", ".", "processed_3d_file_names", "+", "self", ".", "processed_3d_sampling_file_names", "\n", "\n", "", "@", "property", "\n", "def", "submission_dir", "(", "self", ")", ":", "\n", "        ", "\"\"\"Submissions are saved in the `submissions` folder, in the\n        same hierarchy as `raw` and `processed` directories. Each\n        submission has a sub-directory of its own, named based on the\n        date and time of creation.\n        \"\"\"", "\n", "submissions_dir", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "\"submissions\"", ")", "\n", "date", "=", "'-'", ".", "join", "(", "[", "\n", "f'{getattr(datetime.now(), x)}'", "\n", "for", "x", "in", "[", "'year'", ",", "'month'", ",", "'day'", "]", "]", ")", "\n", "time", "=", "'-'", ".", "join", "(", "[", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.kitti360.KITTI360CylinderMM.process": [[505, 572], ["tq", "kitti360.read_kitti360_image_sequence", "zip", "all", "os.makedirs", "kitti360.KITTI360CylinderMM._process_3d", "torch_points3d.core.data_transform.multimodal.image.DropImagesOutsideDataBoundingBox", "torch_points3d.core.data_transform.multimodal.image.PickKImages", "torch_points3d.core.data_transform.multimodal.image.PickKImages.", "torch.save", "torch.save", "osp.exists", "os.remove", "osp.dirname", "[].split", "kitti360.KITTI360CylinderMM.pre_transform_image", "osp.exists", "osp.exists", "torch_points3d.core.data_transform.multimodal.image.DropImagesOutsideDataBoundingBox.", "osp.splitext"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.kitti360.read_kitti360_image_sequence", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.makedirs", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder._process_3d", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.split"], ["f'{getattr(datetime.now(), x)}'", "\n", "for", "x", "in", "[", "'hour'", ",", "'minute'", ",", "'second'", "]", "]", ")", "\n", "submission_name", "=", "f'{date}_{time}'", "\n", "path", "=", "osp", ".", "join", "(", "submissions_dir", ",", "submission_name", ")", "\n", "return", "path", "\n", "\n", "", "def", "download", "(", "self", ")", ":", "\n", "        ", "self", ".", "download_warning", "(", ")", "\n", "\n", "# Location of the KITTI-360 download shell scripts", "\n", "here", "=", "osp", ".", "dirname", "(", "osp", ".", "abspath", "(", "__file__", ")", ")", "\n", "scripts_dir", "=", "osp", ".", "join", "(", "here", ",", "'../../../scripts/datasets'", ")", "\n", "\n", "# Accumulated 3D point clouds with annotations", "\n", "if", "not", "all", "(", "osp", ".", "exists", "(", "osp", ".", "join", "(", "self", ".", "raw_dir", ",", "x", ")", ")", "for", "x", "in", "self", ".", "raw_file_names_3d", ")", ":", "\n", "            ", "if", "self", ".", "split", "!=", "'test'", ":", "\n", "                ", "msg", "=", "'Accumulated Point Clouds for Train & Val (12G)'", "\n", "", "else", ":", "\n", "                ", "msg", "=", "'Accumulated Point Clouds for Test (1.2G)'", "\n", "", "self", ".", "download_message", "(", "msg", ")", "\n", "script", "=", "osp", ".", "join", "(", "scripts_dir", ",", "'download_kitti360_3d_semantics.sh'", ")", "\n", "run_command", "(", "[", "f'{script} {self.raw_dir} {self.split}'", "]", ")", "\n", "\n", "", "", "def", "download_warning", "(", "self", ")", ":", "\n", "# Warning message for the user about to download", "\n", "        ", "print", "(", "\n", "f\"WARNING: You are about to download KITTI-360 data from: \"", "\n", "f\"{CVLIBS_URL}\"", ")", "\n", "print", "(", "\"Files will be organized in the following structure:\"", ")", "\n", "print", "(", "self", ".", "raw_file_structure", ")", "\n", "print", "(", "\"\"", ")", "\n", "print", "(", "\"Press any key to continue, or CTRL-C to exit.\"", ")", "\n", "input", "(", "\"\"", ")", "\n", "print", "(", "\"\"", ")", "\n", "\n", "", "def", "download_message", "(", "self", ",", "msg", ")", ":", "\n", "        ", "print", "(", "f'Downloading \"{msg}\" to {self.raw_dir}...'", ")", "\n", "\n", "", "def", "process", "(", "self", ")", ":", "\n", "        ", "for", "path_tuple", "in", "tq", "(", "zip", "(", "self", ".", "paths", ",", "self", ".", "sampling_paths", ")", ")", ":", "\n", "            ", "self", ".", "_process_3d", "(", "*", "path_tuple", ")", "\n", "\n", "", "", "def", "_process_3d", "(", "self", ",", "window_path", ",", "sampling_path", ",", "return_loaded", "=", "False", ")", ":", "\n", "        ", "\"\"\"Internal method called by `self.process` to preprocess 3D\n        points. This function is not directly written in `self.process`\n        so as to help `KITTI360CylinderMM.process` benefit from this\n        method to avoid re-loading the same window multiple times.\n        \"\"\"", "\n", "# If required files exist, skip processing", "\n", "if", "osp", ".", "exists", "(", "window_path", ")", "and", "osp", ".", "exists", "(", "sampling_path", ")", ":", "\n", "            ", "if", "return_loaded", ":", "\n", "                ", "return", "torch", ".", "load", "(", "window_path", ")", ",", "torch", ".", "load", "(", "sampling_path", ")", "\n", "", "else", ":", "\n", "                ", "return", "\n", "\n", "# Extract useful information from <path>", "\n", "", "", "split", ",", "modality", ",", "sequence_name", ",", "window_name", "=", "osp", ".", "splitext", "(", "window_path", ")", "[", "0", "]", ".", "split", "(", "'/'", ")", "[", "-", "4", ":", "]", "\n", "\n", "# Process the window", "\n", "if", "not", "osp", ".", "exists", "(", "window_path", ")", ":", "\n", "\n", "# If windows sampling data already exists, remove it,", "\n", "# because it may be out-of-date", "\n", "            ", "if", "osp", ".", "exists", "(", "sampling_path", ")", ":", "\n", "                ", "os", ".", "remove", "(", "sampling_path", ")", "\n", "\n", "# Create necessary parent folders if need be", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.kitti360.KITTI360CylinderMM.__getitem__": [[573, 604], ["KITTI360Cylinder.__getitem__", "torch_points3d.core.multimodal.data.MMData", "kitti360.KITTI360CylinderMM.transform_image", "images.clone", "int"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.panoptic.scannet.ScannetPanoptic.__getitem__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.clone"], ["", "os", ".", "makedirs", "(", "osp", ".", "dirname", "(", "window_path", ")", ",", "exist_ok", "=", "True", ")", "\n", "\n", "# Read the raw window data", "\n", "raw_window_path", "=", "osp", ".", "join", "(", "\n", "self", ".", "raw_dir", ",", "'data_3d_semantics'", ",", "sequence_name", ",", "'static'", ",", "\n", "window_name", "+", "'.ply'", ")", "\n", "data", "=", "read_kitti360_window", "(", "\n", "raw_window_path", ",", "instance", "=", "self", ".", "_keep_instance", ",", "remap", "=", "True", ")", "\n", "num_raw_points", "=", "data", ".", "num_nodes", "\n", "\n", "# Apply pre_transform", "\n", "if", "self", ".", "pre_transform", "is", "not", "None", ":", "\n", "                ", "data", "=", "self", ".", "pre_transform", "(", "data", ")", "\n", "\n", "# Pre-compute KD-Tree to save time when sampling later", "\n", "", "tree", "=", "KDTree", "(", "np", ".", "asarray", "(", "data", ".", "pos", "[", ":", ",", ":", "-", "1", "]", ")", ",", "leaf_size", "=", "10", ")", "\n", "data", "[", "cT", ".", "CylinderSampling", ".", "KDTREE_KEY", "]", "=", "tree", "\n", "\n", "# Save the number of points in raw window", "\n", "data", ".", "num_raw_points", "=", "num_raw_points", "\n", "\n", "# Save pre_transformed data to the processed dir/<path>", "\n", "torch", ".", "save", "(", "data", ",", "window_path", ")", "\n", "\n", "", "else", ":", "\n", "            ", "data", "=", "torch", ".", "load", "(", "window_path", ")", "\n", "\n", "# Prepare data to build cylinder centers. Only keep 'pos'", "\n", "# and 'y' (if any) attributes and drop the z coordinate in", "\n", "# 'pos'. NB: we initialize centers as a clone of data and", "\n", "# modify centers inplace subsequently.", "\n", "", "centers", "=", "data", ".", "clone", "(", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.kitti360.MiniKITTI360CylinderMM.process": [[618, 620], ["kitti360.KITTI360CylinderMM.process"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.classification.modelnet.SampledModelNet.process"], ["'grid_size'", ":", "self", ".", "sample_res", ",", "\n", "'num_points'", ":", "data", ".", "num_nodes", ",", "\n", "'num_raw_points'", ":", "data", ".", "num_raw_points", "}", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.kitti360.MiniKITTI360CylinderMM.download": [[623, 625], ["kitti360.KITTI360CylinderMM.download"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.classification.modelnet.SampledModelNet.download"], ["# are present in the window and their count. These will be", "\n", "# used at sampling time to pick cylinders so as to even-out", "\n", "# class distributions", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.kitti360.KITTI360DatasetMM.__init__": [[637, 722], ["torch_points3d.datasets.base_dataset_multimodal.BaseDatasetMM.__init__", "dataset_opt.get", "dataset_opt.get", "dataset_opt.get", "dataset_opt.get", "dataset_opt.get", "tuple", "dataset_opt.get", "dataset_opt.get", "dataset_opt.get", "dataset_opt.get", "cls", "cls", "max", "cls", "KITTI360Sampler", "dataset_opt.get", "dataset_opt.get", "int", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "sample_per_epoch", "if", "self", ".", "is_random", "else", "self", ".", "sampling_sizes", ".", "sum", "(", ")", "\n", "\n", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "r\"\"\"Gets the cylindrical sample at index `idx` and transforms it\n        (in case a `self.transform` is given).\n\n        The expected indexing format depends on `self.is_random`. If\n        `self.is_random=True` (ie `self.sample_per_epoch > 0`), then\n        `idx` is a tuple carrying `(label, idx_window)` indicating\n        which label to pick from which window. If `self.is_random=False`\n        then `idx` is an integer in [0, len(self)-1] indicating which\n        cylinder to pick among the whole dataset.\n\n        NB: if, instead of a `(label, idx_window)` tuple, a single\n        integer `idx` is passed to a `self.is_random=True` dataset,\n        `__getitem__` will fallback to `self.is_random=False` behavior.\n        This mechanism is required for some PyTorch Dataset core\n        functionalities calling `self[0]`.\n        \"\"\"", "\n", "# Pick a 3D cylindrical sample. This will take care of 'smart'", "\n", "# window loading for us", "\n", "if", "self", ".", "is_random", "and", "isinstance", "(", "idx", ",", "tuple", ")", ":", "\n", "            ", "data", "=", "self", ".", "_get_from_label_and_window_idx", "(", "*", "idx", ")", "\n", "", "else", ":", "\n", "            ", "data", "=", "self", ".", "_get_from_global_idx", "(", "idx", ")", "\n", "\n", "# Apply 3D transforms", "\n", "", "data", "=", "data", "if", "self", ".", "transform", "is", "None", "else", "self", ".", "transform", "(", "data", ")", "\n", "\n", "return", "data", "\n", "\n", "", "def", "_get_from_label_and_window_idx", "(", "self", ",", "label", ",", "idx_window", ")", ":", "\n", "        ", "\"\"\"Load a random cylindrical sample of label `\u00ecdx_label` from\n        window `idx_window`.\n        \"\"\"", "\n", "# Load the associated window", "\n", "window", "=", "self", ".", "buffer", "[", "int", "(", "idx_window", ")", "]", "\n", "\n", "# Pick a random center", "\n", "valid_centers", "=", "torch", ".", "where", "(", "window", ".", "centers", ".", "y", "==", "label", ")", "[", "0", "]", "\n", "idx_center", "=", "np", ".", "random", ".", "choice", "(", "valid_centers", ".", "numpy", "(", ")", ")", "\n", "\n", "# Get the cylindrical sampling", "\n", "center", "=", "window", ".", "centers", ".", "pos", "[", "idx_center", "]", "\n", "sampler", "=", "cT", ".", "CylinderSampling", "(", "\n", "self", ".", "radius", ",", "center", ",", "align_origin", "=", "False", ")", "\n", "data", "=", "sampler", "(", "window", ".", "data", ")", "\n", "\n", "# Save the window index and center index in the data. This will", "\n", "# be used in the KITTI360Tracker to accumulate per-window votes", "\n", "data", ".", "idx_window", "=", "int", "(", "idx_window", ")", "\n", "data", ".", "idx_center", "=", "int", "(", "idx_center", ")", "\n", "\n", "return", "data", "\n", "\n", "", "def", "_get_from_global_idx", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\"Load the cylindrical sample of global index `idx`. The global\n        indices refer to sampling centers considered in `self.windows`\n        order.\n        \"\"\"", "\n", "# Split the global idx into idx_window and idx_center", "\n", "cum_sizes", "=", "self", ".", "sampling_sizes", ".", "cumsum", "(", "0", ")", "\n", "idx_window", "=", "torch", ".", "bucketize", "(", "idx", ",", "cum_sizes", ",", "right", "=", "True", ")", "\n", "offsets", "=", "torch", ".", "cat", "(", "(", "torch", ".", "zeros", "(", "1", ")", ",", "cum_sizes", ")", ")", ".", "long", "(", ")", "\n", "idx_center", "=", "idx", "-", "offsets", "[", "idx_window", "]", "\n", "\n", "# Load the associated window", "\n", "window", "=", "self", ".", "buffer", "[", "int", "(", "idx_window", ")", "]", "\n", "\n", "# Get the cylindrical sampling", "\n", "center", "=", "window", ".", "centers", ".", "pos", "[", "idx_center", "]", "\n", "sampler", "=", "cT", ".", "CylinderSampling", "(", "self", ".", "radius", ",", "center", ",", "align_origin", "=", "False", ")", "\n", "data", "=", "sampler", "(", "window", ".", "data", ")", ".", "clone", "(", ")", "\n", "\n", "# Save the window index and center index in the data. This will", "\n", "# be used in the KITTI360Tracker to accumulate per-window votes", "\n", "data", ".", "idx_window", "=", "int", "(", "idx_window", ")", "\n", "data", ".", "idx_center", "=", "int", "(", "idx_center", ")", "\n", "\n", "return", "data", "\n", "\n", "", "def", "_pick_random_label_and_window", "(", "self", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.kitti360.KITTI360DatasetMM.submission_dir": [[723, 726], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.kitti360.KITTI360DatasetMM.get_tracker": [[727, 743], ["KITTI360Tracker"], "methods", ["None"], ["\n", "if", "not", "self", ".", "is_random", ":", "\n", "            ", "raise", "ValueError", "(", "'Set sample_per_epoch > 0 for random sampling.'", ")", "\n", "\n", "# First, pick a class randomly. This guarantees all classes are", "\n", "# equally represented. Note that classes are assumed to be all", "\n", "# integers in [0, self.num_classes-1] here. Besides, if a class", "\n", "# is absent from label_counts (ie no cylinder carries the", "\n", "# label), it will not be picked.", "\n", "", "seen_labels", "=", "torch", ".", "where", "(", "self", ".", "label_counts", ".", "sum", "(", "dim", "=", "0", ")", ">", "0", ")", "[", "0", "]", "\n", "label", "=", "np", ".", "random", ".", "choice", "(", "seen_labels", ".", "numpy", "(", ")", ")", "\n", "\n", "# Then, pick a window that has a cylinder with such class, based", "\n", "# on class counts.", "\n", "counts", "=", "self", ".", "label_counts", "[", ":", ",", "label", "]", "\n", "weights", "=", "(", "counts", "/", "counts", ".", "sum", "(", ")", ")", ".", "numpy", "(", ")", "\n", "idx_window", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "len", "(", "self", ".", "windows", ")", ")", ",", "p", "=", "weights", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.kitti360.readYAMLFile": [[22, 34], ["open", "range", "fin.read", "re.compile", "re.compile.sub", "yaml.load", "fin.readline"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load"], ["\n", "########################################################################", "\n", "#                                 Utils                                #", "\n", "########################################################################", "\n", "\n", "def", "read_kitti360_window", "(", "\n", "filepath", ",", "xyz", "=", "True", ",", "rgb", "=", "True", ",", "semantic", "=", "True", ",", "instance", "=", "False", ",", "\n", "remap", "=", "False", ")", ":", "\n", "    ", "data", "=", "Data", "(", ")", "\n", "with", "open", "(", "filepath", ",", "\"rb\"", ")", "as", "f", ":", "\n", "        ", "window", "=", "PlyData", ".", "read", "(", "f", ")", "\n", "attributes", "=", "[", "p", ".", "name", "for", "p", "in", "window", "[", "'vertex'", "]", ".", "properties", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.kitti360.read_kitti360_image_sequence": [[36, 128], ["osp.join", "osp.join", "osp.join", "osp.join", "osp.join", "torch.from_numpy", "np.loadtxt", "sorted", "torch.from_numpy().view", "np.asarray", "np.array().astype", "torch.cat", "range", "NotImplementedError", "ValueError", "osp.join", "kitti360.load_intrinsics_perspective", "torch.Tensor().repeat", "torch.Tensor().repeat", "torch.Tensor().repeat", "torch.Tensor().repeat", "torch.from_numpy().inverse", "osp.join", "kitti360.load_intrinsics_fisheye", "torch.Tensor().repeat", "torch.Tensor().repeat", "torch.Tensor().repeat", "torch.Tensor().repeat", "torch.Tensor().repeat", "torch.Tensor().repeat", "torch.Tensor().repeat", "torch.cat", "torch_points3d.core.multimodal.image.SameSettingImageData", "torch_points3d.core.multimodal.image.SameSettingImageData", "kitti360.load_calibration_camera_to_pose", "torch.from_numpy", "osp.join", "np.array", "torch.from_numpy", "torch.cat.append", "torch.cat.append", "e.unsqueeze", "poses[].astype", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.from_numpy", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.ones", "enumerate", "osp.exists"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.kitti360.load_intrinsics_perspective", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.kitti360.load_intrinsics_fisheye", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.kitti360.load_calibration_camera_to_pose", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append"], ["            ", "data", ".", "pos", "=", "torch", ".", "stack", "(", "[", "\n", "torch", ".", "FloatTensor", "(", "window", "[", "\"vertex\"", "]", "[", "axis", "]", ")", "\n", "for", "axis", "in", "[", "\"x\"", ",", "\"y\"", ",", "\"z\"", "]", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "if", "rgb", ":", "\n", "            ", "data", ".", "rgb", "=", "torch", ".", "stack", "(", "[", "\n", "torch", ".", "FloatTensor", "(", "window", "[", "\"vertex\"", "]", "[", "axis", "]", ")", "\n", "for", "axis", "in", "[", "\"red\"", ",", "\"green\"", ",", "\"blue\"", "]", "]", ",", "dim", "=", "-", "1", ")", "/", "255", "\n", "\n", "", "if", "semantic", "and", "'semantic'", "in", "attributes", ":", "\n", "            ", "y", "=", "torch", ".", "LongTensor", "(", "window", "[", "\"vertex\"", "]", "[", "'semantic'", "]", ")", "\n", "data", ".", "y", "=", "torch", ".", "from_numpy", "(", "ID2TRAINID", ")", "[", "y", "]", "if", "remap", "else", "y", "\n", "\n", "", "if", "instance", "and", "'instance'", "in", "attributes", ":", "\n", "            ", "data", ".", "instance", "=", "torch", ".", "LongTensor", "(", "window", "[", "\"vertex\"", "]", "[", "'instance'", "]", ")", "\n", "\n", "", "", "return", "data", "\n", "\n", "\n", "", "def", "read_variable", "(", "fid", ",", "name", ",", "M", ",", "N", ")", ":", "\n", "    ", "\"\"\"Credit: https://github.com/autonomousvision/kitti360Scripts\"\"\"", "\n", "# rewind", "\n", "fid", ".", "seek", "(", "0", ",", "0", ")", "\n", "\n", "# search for variable identifier", "\n", "line", "=", "1", "\n", "success", "=", "0", "\n", "while", "line", ":", "\n", "        ", "line", "=", "fid", ".", "readline", "(", ")", "\n", "if", "line", ".", "startswith", "(", "name", ")", ":", "\n", "            ", "success", "=", "1", "\n", "break", "\n", "\n", "# return if variable identifier not found", "\n", "", "", "if", "success", "==", "0", ":", "\n", "        ", "return", "None", "\n", "\n", "# fill matrix", "\n", "", "line", "=", "line", ".", "replace", "(", "'%s:'", "%", "name", ",", "''", ")", "\n", "line", "=", "line", ".", "split", "(", ")", "\n", "assert", "(", "len", "(", "line", ")", "==", "M", "*", "N", ")", "\n", "line", "=", "[", "float", "(", "x", ")", "for", "x", "in", "line", "]", "\n", "mat", "=", "np", ".", "array", "(", "line", ")", ".", "reshape", "(", "M", ",", "N", ")", "\n", "\n", "return", "mat", "\n", "\n", "\n", "########################################################################", "\n", "#                                Window                                #", "\n", "########################################################################", "\n", "\n", "", "class", "Window", ":", "\n", "    ", "\"\"\"Small placeholder for point cloud window data.\"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "window_path", ",", "sampling_path", ")", ":", "\n", "# Recover useful information from the path", "\n", "        ", "self", ".", "path", "=", "window_path", "\n", "self", ".", "sampling_path", "=", "sampling_path", "\n", "split", ",", "modality", ",", "sequence_name", ",", "window_name", "=", "osp", ".", "splitext", "(", "\n", "window_path", ")", "[", "0", "]", ".", "split", "(", "'/'", ")", "[", "-", "4", ":", "]", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "modality", "=", "modality", "\n", "self", ".", "sequence", "=", "sequence_name", "\n", "self", ".", "window", "=", "window_name", "\n", "\n", "# Load window data and sampling data", "\n", "self", ".", "_data", "=", "torch", ".", "load", "(", "window_path", ")", "\n", "self", ".", "_sampling", "=", "torch", ".", "load", "(", "sampling_path", ")", "\n", "\n", "", "@", "property", "\n", "def", "data", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_data", "\n", "\n", "", "@", "property", "\n", "def", "num_points", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "data", ".", "num_nodes", "\n", "\n", "", "@", "property", "\n", "def", "centers", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_sampling", "[", "'data'", "]", "\n", "\n", "", "@", "property", "\n", "def", "sampling_labels", "(", "self", ")", ":", "\n", "        ", "return", "torch", ".", "from_numpy", "(", "self", ".", "_sampling", "[", "'labels'", "]", ")", "\n", "\n", "", "@", "property", "\n", "def", "sampling_label_counts", "(", "self", ")", ":", "\n", "        ", "return", "torch", ".", "from_numpy", "(", "self", ".", "_sampling", "[", "'label_counts'", "]", ")", "\n", "\n", "", "@", "property", "\n", "def", "sampling_grid_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_sampling", "[", "'grid_size'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.kitti360.load_intrinsics_perspective": [[130, 157], ["open", "f.read().splitlines", "line.split.split", "np.reshape", "f.read", "float", "np.eye", "np.array().reshape", "int", "int", "np.array", "float", "float", "float"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.split"], ["def", "num_centers", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "centers", ".", "num_nodes", "\n", "\n", "", "@", "property", "\n", "def", "num_raw_points", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_sampling", "[", "'num_raw_points'", "]", "\n", "\n", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "display_attr", "=", "[", "\n", "'split'", ",", "'sequence'", ",", "'window'", ",", "'num_points'", ",", "'num_centers'", "]", "\n", "attr", "=", "', '", ".", "join", "(", "[", "f'{a}={getattr(self, a)}'", "for", "a", "in", "display_attr", "]", ")", "\n", "return", "f'{self.__class__.__name__}({attr})'", "\n", "\n", "\n", "########################################################################", "\n", "#                             Window Buffer                            #", "\n", "########################################################################", "\n", "\n", "", "", "class", "WindowBuffer", ":", "\n", "    ", "\"\"\"Takes care of loading and discarding windows for us. Since we\n    can't afford loading all windows at once in memory, the\n    `WindowBuffer` keeps at most `size` windows loaded at a time. When\n    an additional window is queried, the buffer is updated in a\n    first-in-first-out fashion.\n    \"\"\"", "\n", "def", "__init__", "(", "self", ",", "kitti360_dataset", ",", "size", "=", "3", ")", ":", "\n", "        ", "self", ".", "_dataset", "=", "kitti360_dataset", "\n", "self", ".", "_size", "=", "size", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.kitti360.load_intrinsics_fisheye": [[159, 168], ["kitti360.readYAMLFile"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.kitti360.readYAMLFile"], ["self", ".", "_windows", "=", "{", "}", "\n", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_queue", ")", "\n", "\n", "", "@", "property", "\n", "def", "is_full", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ")", "==", "self", ".", "_size", "\n", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.kitti360.load_calibration_camera_to_pose": [[170, 183], ["open", "np.array().reshape", "np.concatenate", "np.array", "read_variable"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.read_variable"], ["        ", "return", "list", "(", "self", ".", "_windows", ".", "keys", "(", ")", ")", "\n", "\n", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\"Load a window into memory based on its index in\n        `self._dataset.windows`.\n        \"\"\"", "\n", "# Check if the window is not already loaded", "\n", "if", "idx", "in", "self", ".", "idx_loaded", ":", "\n", "            ", "return", "self", ".", "_windows", "[", "idx", "]", "\n", "\n", "# If the buffer is full, drop the oldest window", "\n", "", "if", "self", ".", "is_full", ":", "\n", "            ", "self", ".", "_drop_oldest_window", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.utils.read_image_pose_pairs": [[8, 54], ["sorted", "sorted", "sorted", "print", "print", "print", "list", "os.basename().replace", "os.basename().replace", "os.join", "os.join", "set().intersection", "os.join", "os.join", "glob.glob", "glob.glob", "print", "print", "set", "os.basename", "os.join", "os.basename", "os.join", "set", "set", "set", "set", "len", "len", "len", "len", "set", "x.split", "x.split"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.split", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.split"], ["def", "read_image_pose_pairs", "(", "\n", "image_dir", ",", "pose_dir", ",", "image_suffix", "=", "'_rgb.png'", ",", "\n", "pose_suffix", "=", "'_pose.json'", ",", "skip_names", "=", "None", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Search for all image-pose correspondences in the directories.\n    Return the list of image-pose pairs. Orphans are ignored.\n    \"\"\"", "\n", "# Search for images and poses", "\n", "image_names", "=", "sorted", "(", "[", "\n", "osp", ".", "basename", "(", "x", ")", ".", "replace", "(", "image_suffix", ",", "''", ")", "\n", "for", "x", "in", "glob", ".", "glob", "(", "osp", ".", "join", "(", "image_dir", ",", "'*'", "+", "image_suffix", ")", ")", "]", ")", "\n", "pose_names", "=", "sorted", "(", "[", "\n", "osp", ".", "basename", "(", "x", ")", ".", "replace", "(", "pose_suffix", ",", "''", ")", "\n", "for", "x", "in", "glob", ".", "glob", "(", "osp", ".", "join", "(", "pose_dir", ",", "'*'", "+", "pose_suffix", ")", ")", "]", ")", "\n", "\n", "# Remove images specified by skip_names", "\n", "skip_names", "=", "skip_names", "if", "skip_names", "is", "not", "None", "else", "[", "]", "\n", "image_names", "=", "[", "x", "for", "x", "in", "image_names", "if", "x", "not", "in", "skip_names", "]", "\n", "pose_names", "=", "[", "x", "for", "x", "in", "pose_names", "if", "x", "not", "in", "skip_names", "]", "\n", "\n", "# Print orphans", "\n", "if", "not", "image_names", "==", "pose_names", ":", "\n", "        ", "image_orphan", "=", "[", "\n", "osp", ".", "join", "(", "image_dir", ",", "x", "+", "image_suffix", ")", "\n", "for", "x", "in", "set", "(", "image_names", ")", "-", "set", "(", "pose_names", ")", "]", "\n", "pose_orphan", "=", "[", "\n", "osp", ".", "join", "(", "pose_dir", ",", "x", "+", "pose_suffix", ")", "\n", "for", "x", "in", "set", "(", "pose_names", ")", "-", "set", "(", "image_names", ")", "]", "\n", "print", "(", "\"Could not recover all image-pose correspondences.\"", ")", "\n", "print", "(", "f\"  Orphan images : {len(image_orphan)}/{len(image_names)}\"", ")", "\n", "if", "verbose", ":", "\n", "            ", "for", "x", "in", "image_orphan", ":", "\n", "                ", "print", "(", "4", "*", "' '", "+", "'/'", ".", "join", "(", "x", ".", "split", "(", "'/'", ")", "[", "-", "4", ":", "]", ")", ")", "\n", "", "", "print", "(", "f\"  Orphan poses  : {len(pose_orphan)}/{len(pose_names)}\"", ")", "\n", "if", "verbose", ":", "\n", "            ", "for", "x", "in", "pose_orphan", ":", "\n", "                ", "print", "(", "4", "*", "' '", "+", "'/'", ".", "join", "(", "x", ".", "split", "(", "'/'", ")", "[", "-", "4", ":", "]", ")", ")", "\n", "\n", "# Only return the recovered pairs", "\n", "", "", "", "correspondences", "=", "sorted", "(", "list", "(", "set", "(", "image_names", ")", ".", "intersection", "(", "\n", "set", "(", "pose_names", ")", ")", ")", ")", "\n", "pairs", "=", "[", "(", "\n", "osp", ".", "join", "(", "image_dir", ",", "x", "+", "image_suffix", ")", ",", "\n", "osp", ".", "join", "(", "pose_dir", ",", "x", "+", "pose_suffix", ")", ")", "\n", "for", "x", "in", "correspondences", "]", "\n", "return", "pairs", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.utils.img_info_to_img_data": [[56, 68], ["len", "torch_points3d.core.multimodal.image.SameSettingImageData", "torch_points3d.core.multimodal.image.SameSettingImageData", "numpy.array", "torch.Tensor", "torch.Tensor"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "def", "img_info_to_img_data", "(", "info_ld", ",", "img_size", ")", ":", "\n", "    ", "\"\"\"Helper function to convert a list of image info dictionaries\n    into a more convenient SameSettingImageData object.\n    \"\"\"", "\n", "if", "len", "(", "info_ld", ")", ">", "0", ":", "\n", "        ", "info_dl", "=", "{", "k", ":", "[", "dic", "[", "k", "]", "for", "dic", "in", "info_ld", "]", "for", "k", "in", "info_ld", "[", "0", "]", "}", "\n", "image_data", "=", "SameSettingImageData", "(", "\n", "path", "=", "np", ".", "array", "(", "info_dl", "[", "'path'", "]", ")", ",", "pos", "=", "torch", ".", "Tensor", "(", "info_dl", "[", "'xyz'", "]", ")", ",", "\n", "opk", "=", "torch", ".", "Tensor", "(", "info_dl", "[", "'opk'", "]", ")", ",", "ref_size", "=", "img_size", ")", "\n", "", "else", ":", "\n", "        ", "image_data", "=", "SameSettingImageData", "(", "ref_size", "=", "img_size", ")", "\n", "", "return", "image_data", "\n", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis_area5_office40.S3DISOriginalFusedMM.__init__": [[197, 245], ["InMemoryDataset.__init__", "s3dis_area5_office40.S3DISOriginalFusedMM._load_data", "list", "torch.load", "range", "ValueError"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis_area5_office40.S3DISSphereMM._load_data", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load"], ["def", "__init__", "(", "\n", "self", ",", "\n", "root", ",", "\n", "test_area", "=", "6", ",", "\n", "split", "=", "\"train\"", ",", "\n", "transform", "=", "None", ",", "\n", "pre_transform", "=", "None", ",", "\n", "pre_collate_transform", "=", "None", ",", "\n", "pre_filter", "=", "None", ",", "\n", "pre_transform_image", "=", "None", ",", "\n", "transform_image", "=", "None", ",", "\n", "img_ref_size", "=", "(", "512", ",", "256", ")", ",", "\n", "keep_instance", "=", "False", ",", "\n", "verbose", "=", "False", ",", "\n", "debug", "=", "False", ",", ")", ":", "\n", "        ", "assert", "test_area", "in", "list", "(", "range", "(", "1", ",", "2", ")", ")", "\n", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "pre_collate_transform", "=", "pre_collate_transform", "\n", "self", ".", "pre_transform_image", "=", "pre_transform_image", "\n", "self", ".", "transform_image", "=", "transform_image", "\n", "self", ".", "img_ref_size", "=", "img_ref_size", "\n", "self", ".", "test_area", "=", "test_area", "\n", "self", ".", "keep_instance", "=", "keep_instance", "\n", "self", ".", "verbose", "=", "verbose", "\n", "self", ".", "debug", "=", "debug", "\n", "self", ".", "_split", "=", "split", "\n", "\n", "super", "(", "S3DISOriginalFusedMM", ",", "self", ")", ".", "__init__", "(", "\n", "root", ",", "transform", ",", "pre_transform", ",", "pre_filter", ")", "\n", "\n", "if", "split", "==", "\"train\"", ":", "\n", "            ", "path", "=", "self", ".", "processed_paths", "[", "0", "]", "\n", "", "elif", "split", "==", "\"val\"", ":", "\n", "            ", "path", "=", "self", ".", "processed_paths", "[", "1", "]", "\n", "", "elif", "split", "==", "\"test\"", ":", "\n", "            ", "path", "=", "self", ".", "processed_paths", "[", "2", "]", "\n", "", "elif", "split", "==", "\"trainval\"", ":", "\n", "            ", "path", "=", "self", ".", "processed_paths", "[", "3", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "f\"Split {split} found, but expected either train, val,\"", "\n", "f\" trainval or test\"", ")", "\n", "\n", "", "self", ".", "_load_data", "(", "path", ")", "\n", "\n", "if", "split", "==", "\"test\"", ":", "\n", "            ", "self", ".", "raw_test_data", "=", "torch", ".", "load", "(", "self", ".", "raw_areas_paths", "[", "test_area", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis_area5_office40.S3DISOriginalFusedMM.center_labels": [[246, 252], ["hasattr"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "center_labels", "(", "self", ")", ":", "\n", "        ", "if", "hasattr", "(", "self", ".", "data", ",", "\"center_label\"", ")", ":", "\n", "            ", "return", "self", ".", "data", ".", "center_label", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis_area5_office40.S3DISOriginalFusedMM.raw_file_names": [[253, 256], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "raw_file_names", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "folders", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis_area5_office40.S3DISOriginalFusedMM.image_dir": [[257, 260], ["osp.join"], "methods", ["None"], ["", "@", "property", "\n", "def", "image_dir", "(", "self", ")", ":", "\n", "        ", "return", "osp", ".", "join", "(", "self", ".", "root", ",", "'image'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis_area5_office40.S3DISOriginalFusedMM.pre_processed_path": [[261, 265], ["osp.join"], "methods", ["None"], ["", "@", "property", "\n", "def", "pre_processed_path", "(", "self", ")", ":", "\n", "        ", "pre_processed_file_names", "=", "\"preprocessed.pt\"", "\n", "return", "osp", ".", "join", "(", "self", ".", "processed_dir", ",", "pre_processed_file_names", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis_area5_office40.S3DISOriginalFusedMM.pre_collated_path": [[266, 270], ["osp.join"], "methods", ["None"], ["", "@", "property", "\n", "def", "pre_collated_path", "(", "self", ")", ":", "\n", "        ", "pre_collated_path_name", "=", "\"pre_collate.pt\"", "\n", "return", "osp", ".", "join", "(", "self", ".", "processed_dir", ",", "pre_collated_path_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis_area5_office40.S3DISOriginalFusedMM.image_data_path": [[271, 274], ["osp.join"], "methods", ["None"], ["", "@", "property", "\n", "def", "image_data_path", "(", "self", ")", ":", "\n", "        ", "return", "osp", ".", "join", "(", "self", ".", "processed_dir", ",", "\"image_data.pt\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis_area5_office40.S3DISOriginalFusedMM.pre_transformed_image_path": [[275, 278], ["osp.join"], "methods", ["None"], ["", "@", "property", "\n", "def", "pre_transformed_image_path", "(", "self", ")", ":", "\n", "        ", "return", "osp", ".", "join", "(", "self", ".", "processed_dir", ",", "\"pre_transform_image.pt\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis_area5_office40.S3DISOriginalFusedMM.raw_areas_paths": [[279, 283], ["osp.join", "range"], "methods", ["None"], ["", "@", "property", "\n", "def", "raw_areas_paths", "(", "self", ")", ":", "\n", "        ", "return", "[", "osp", ".", "join", "(", "self", ".", "processed_dir", ",", "\"raw_area_%i.pt\"", "%", "i", ")", "\n", "for", "i", "in", "range", "(", "1", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis_area5_office40.S3DISOriginalFusedMM.processed_file_names": [[284, 292], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "processed_file_names", "(", "self", ")", ":", "\n", "        ", "test_area", "=", "self", ".", "test_area", "\n", "return", "(", "\n", "[", "f\"{s}_{test_area}.pt\"", "\n", "for", "s", "in", "[", "\"train\"", ",", "\"val\"", ",", "\"test\"", ",", "\"trainval\"", "]", "]", "\n", "+", "self", ".", "raw_areas_paths", "\n", "+", "[", "self", ".", "pre_processed_path", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis_area5_office40.S3DISOriginalFusedMM.intermediate_processed_paths": [[293, 300], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "intermediate_processed_paths", "(", "self", ")", ":", "\n", "        ", "return", "[", "\n", "self", ".", "pre_processed_path", ",", "\n", "self", ".", "pre_collated_path", ",", "\n", "self", ".", "image_data_path", ",", "\n", "self", ".", "pre_transformed_image_path", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis_area5_office40.S3DISOriginalFusedMM.raw_test_data": [[305, 308], ["None"], "methods", ["None"], ["", "@", "raw_test_data", ".", "setter", "\n", "def", "raw_test_data", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_raw_test_data", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis_area5_office40.S3DISOriginalFusedMM.download": [[309, 311], ["print"], "methods", ["None"], ["", "def", "download", "(", "self", ")", ":", "\n", "        ", "print", "(", "\"Please manually create the raw data folders with appropriate rooms in them.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis_area5_office40.S3DISOriginalFusedMM.process": [[312, 510], ["enumerate", "print", "print", "print", "print", "print", "torch.save", "torch.save", "torch.save", "torch.save", "print", "osp.exists", "print", "tq", "enumerate", "torch.save", "print", "torch.load", "osp.exists", "torch.save", "print", "torch.load", "osp.exists", "print", "torch.save", "print", "torch.load", "osp.exists", "print", "torch.save", "print", "torch.load", "osp.exists", "list", "cT.PointCloudFusion", "delattr", "torch.save", "print", "log.info", "log.info", "s3dis_area5_office40.S3DISOriginalFusedMM.pre_collate_transform", "print", "torch.load.append", "s3dis_area5_office40.S3DISOriginalFusedMM.pre_transform_image", "map", "osp.join", "os.listdir", "osp.isdir", "range", "int", "read_s3dis_format", "read_s3dis_format", "torch_geometric.data.Data", "data_list[].append", "os.listdir", "osp.isdir", "range", "utils.img_info_to_img_data", "osp.join", "osp.join", "rgb.float", "torch.ones", "torch.zeros", "s3dis_area5_office40.S3DISOriginalFusedMM.pre_transform", "int", "osp.join", "osp.join", "s3dis_area5_office40.read_s3dis_pose", "utils.read_image_pose_pairs", "s3dis_area5_office40.S3DISOriginalFusedMM.pre_filter", "osp.join", "osp.join", "s3dis_area5_office40.s3dis_image_room", "len", "len", "osp.exists", "os.remove", "xyz[].max", "xyz[].min"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.s3dis.read_s3dis_format", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.s3dis.read_s3dis_format", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.utils.img_info_to_img_data", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis_area5_office40.read_s3dis_pose", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.utils.read_image_pose_pairs", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis_area5_office40.s3dis_image_room", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "def", "process", "(", "self", ")", ":", "\n", "# --------------------------------------------------------------", "\n", "# Initialize the chain of intermediate processing files", "\n", "# If a file in the chain is not found, all subsequent files are", "\n", "# removed to ensure a clean preprocessing computation", "\n", "# --------------------------------------------------------------", "\n", "        ", "for", "i", ",", "p", "in", "enumerate", "(", "self", ".", "intermediate_processed_paths", ")", ":", "\n", "            ", "if", "not", "osp", ".", "exists", "(", "p", ")", ":", "\n", "                ", "list", "(", "map", "(", "lambda", "path", ":", "(", "os", ".", "remove", "(", "path", ")", "if", "osp", ".", "exists", "(", "path", ")", "\n", "else", "None", ")", ",", "\n", "self", ".", "intermediate_processed_paths", "[", "i", "+", "1", ":", "]", ")", ")", "\n", "break", "\n", "\n", "# --------------------------------------------------------------", "\n", "# Preprocess 3D data", "\n", "# Download, pre_transform and pre_filter raw 3D data", "\n", "# --------------------------------------------------------------", "\n", "", "", "if", "not", "osp", ".", "exists", "(", "self", ".", "pre_processed_path", ")", ":", "\n", "            ", "print", "(", "'Preprocessing the raw 3D data...'", ")", "\n", "\n", "data_files", "=", "[", "\n", "(", "f", ",", "room_name", ",", "osp", ".", "join", "(", "self", ".", "raw_dir", ",", "f", ",", "room_name", ")", ")", "\n", "for", "f", "in", "self", ".", "folders", "\n", "for", "room_name", "in", "os", ".", "listdir", "(", "osp", ".", "join", "(", "self", ".", "raw_dir", ",", "f", ")", ")", "\n", "if", "osp", ".", "isdir", "(", "osp", ".", "join", "(", "self", ".", "raw_dir", ",", "f", ",", "room_name", ")", ")", "]", "\n", "\n", "# Gather all data from each area in a List(List(Data))", "\n", "data_list", "=", "[", "[", "]", "for", "_", "in", "range", "(", "1", ")", "]", "\n", "for", "(", "area", ",", "room_name", ",", "file_path", ")", "in", "tq", "(", "data_files", ")", ":", "\n", "                ", "area_num", "=", "int", "(", "area", "[", "-", "1", "]", ")", "-", "1", "\n", "if", "self", ".", "debug", ":", "\n", "                    ", "read_s3dis_format", "(", "\n", "file_path", ",", "room_name", ",", "label_out", "=", "True", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "debug", "=", "self", ".", "debug", ")", "\n", "continue", "\n", "", "else", ":", "\n", "                    ", "xyz", ",", "rgb", ",", "labels", ",", "instance_labels", ",", "_", "=", "read_s3dis_format", "(", "\n", "file_path", ",", "room_name", ",", "label_out", "=", "True", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "debug", "=", "self", ".", "debug", ")", "\n", "\n", "# Room orientation correction", "\n", "# 2 rooms need to be rotated by 180\u00b0 around Z:", "\n", "#   - Area_2/hallway_11", "\n", "#   - Area_5/hallway_6", "\n", "if", "(", "area_num", "==", "1", "and", "room_name", "==", "'hallway_11'", ")", "or", "(", "area_num", "==", "4", "and", "room_name", "==", "'hallway_6'", ")", ":", "\n", "                        ", "xy_center", "=", "(", "xyz", "[", ":", ",", "0", ":", "2", "]", ".", "max", "(", "dim", "=", "0", ")", "[", "0", "]", "\n", "+", "xyz", "[", ":", ",", "0", ":", "2", "]", ".", "min", "(", "dim", "=", "0", ")", "[", "0", "]", ")", "/", "2", "\n", "# 180\u00b0 Z-rotation around the XY-center", "\n", "xyz", "[", ":", ",", "0", ":", "2", "]", "=", "2", "*", "xy_center", "-", "xyz", "[", ":", ",", "0", ":", "2", "]", "\n", "\n", "", "rgb_norm", "=", "rgb", ".", "float", "(", ")", "/", "255.0", "\n", "data", "=", "Data", "(", "pos", "=", "xyz", ",", "y", "=", "labels", ",", "rgb", "=", "rgb_norm", ")", "\n", "\n", "if", "room_name", "in", "VALIDATION_ROOMS", ":", "\n", "                        ", "data", ".", "is_val", "=", "torch", ".", "ones", "(", "data", ".", "num_nodes", ",", "dtype", "=", "bool", ")", "\n", "", "else", ":", "\n", "                        ", "data", ".", "is_val", "=", "torch", ".", "zeros", "(", "data", ".", "num_nodes", ",", "dtype", "=", "bool", ")", "\n", "\n", "", "if", "self", ".", "keep_instance", ":", "\n", "                        ", "data", ".", "instance_labels", "=", "instance_labels", "\n", "\n", "", "if", "self", ".", "pre_filter", "is", "not", "None", "and", "not", "self", ".", "pre_filter", "(", "data", ")", ":", "\n", "                        ", "continue", "\n", "\n", "", "data_list", "[", "area_num", "]", ".", "append", "(", "data", ")", "\n", "\n", "# Save raw areas", "\n", "", "", "raw_areas", "=", "cT", ".", "PointCloudFusion", "(", ")", "(", "data_list", ")", "\n", "for", "i", ",", "area", "in", "enumerate", "(", "raw_areas", ")", ":", "\n", "                ", "delattr", "(", "area", ",", "'is_val'", ")", "\n", "torch", ".", "save", "(", "area", ",", "self", ".", "raw_areas_paths", "[", "i", "]", ")", "\n", "\n", "# Pre-transform", "\n", "", "if", "self", ".", "pre_transform", "is", "not", "None", ":", "\n", "                ", "data_list", "=", "[", "\n", "[", "self", ".", "pre_transform", "(", "data", ")", "for", "data", "in", "area_data", "]", "\n", "for", "area_data", "in", "data_list", "]", "\n", "\n", "# Save the data into one big 'preprocessed.pt' file ", "\n", "", "torch", ".", "save", "(", "data_list", ",", "self", ".", "pre_processed_path", ")", "\n", "\n", "", "else", ":", "\n", "# Recover the per-area Data list from the 'preprocessed.pt'", "\n", "# file", "\n", "            ", "print", "(", "'Loading the preprocessed 3D data...'", ")", "\n", "data_list", "=", "torch", ".", "load", "(", "self", ".", "pre_processed_path", ")", "\n", "\n", "", "print", "(", "'Done\\n'", ")", "\n", "\n", "if", "self", ".", "debug", ":", "\n", "            ", "return", "\n", "\n", "# --------------------------------------------------------------", "\n", "# Pre-collate 3D data", "\n", "# Build the data splits and pre_collate them", "\n", "# --------------------------------------------------------------", "\n", "", "if", "not", "osp", ".", "exists", "(", "self", ".", "pre_collated_path", ")", ":", "\n", "\n", "# Run the pre_collate_transform to finalize the data", "\n", "# preparation. Among other things, the 'origin_id' and", "\n", "# 'mapping_index' are generated here", "\n", "            ", "if", "self", ".", "pre_collate_transform", ":", "\n", "                ", "print", "(", "'Running pre-collate on 3D data...'", ")", "\n", "log", ".", "info", "(", "\"pre_collate_transform ...\"", ")", "\n", "log", ".", "info", "(", "self", ".", "pre_collate_transform", ")", "\n", "data_list", "=", "self", ".", "pre_collate_transform", "(", "data_list", ")", "\n", "\n", "# Save the pre_collated data", "\n", "", "torch", ".", "save", "(", "data_list", ",", "self", ".", "pre_collated_path", ")", "\n", "\n", "", "else", ":", "\n", "# Recover data from the 'pre_collated.pt' file", "\n", "            ", "print", "(", "'Loading the pre-collated 3D data...'", ")", "\n", "data_list", "=", "torch", ".", "load", "(", "self", ".", "pre_collated_path", ")", "\n", "\n", "", "print", "(", "'Done\\n'", ")", "\n", "\n", "# --------------------------------------------------------------", "\n", "# Recover image data", "\n", "# --------------------------------------------------------------", "\n", "if", "not", "osp", ".", "exists", "(", "self", ".", "image_data_path", ")", ":", "\n", "            ", "print", "(", "'Computing image data...'", ")", "\n", "rooms", "=", "[", "\n", "(", "int", "(", "f", "[", "-", "1", "]", ")", "-", "1", ",", "room_name", ")", "\n", "for", "f", "in", "self", ".", "folders", "\n", "for", "room_name", "in", "os", ".", "listdir", "(", "osp", ".", "join", "(", "self", ".", "raw_dir", ",", "f", ")", ")", "\n", "if", "osp", ".", "isdir", "(", "osp", ".", "join", "(", "self", ".", "raw_dir", ",", "f", ",", "room_name", ")", ")", "]", "\n", "rooms", "=", "[", "[", "r", "[", "1", "]", "for", "r", "in", "rooms", "if", "r", "[", "0", "]", "==", "i", "]", "for", "i", "in", "range", "(", "1", ")", "]", "\n", "\n", "image_data_list", "=", "[", "]", "\n", "for", "i", "in", "[", "4", "]", ":", "\n", "\n", "# S3DIS Area 5 images are split into two folders", "\n", "# 'area_5a' and 'area_5b' and one of them requires", "\n", "# specific treatment for pose reading", "\n", "                ", "folders", "=", "[", "f\"area_{i + 1}\"", "]", "if", "i", "!=", "4", "else", "[", "\"area_5a\"", ",", "\"area_5b\"", "]", "\n", "\n", "image_info_list", "=", "[", "\n", "{", "'path'", ":", "i_file", ",", "**", "read_s3dis_pose", "(", "p_file", ")", "}", "\n", "for", "folder", "in", "folders", "\n", "for", "i_file", ",", "p_file", "in", "read_image_pose_pairs", "(", "\n", "osp", ".", "join", "(", "self", ".", "image_dir", ",", "folder", ",", "'pano'", ",", "'rgb'", ")", ",", "\n", "osp", ".", "join", "(", "self", ".", "image_dir", ",", "folder", ",", "'pano'", ",", "'pose'", ")", ",", "\n", "skip_names", "=", "S3DIS_OUTSIDE_IMAGES", ")", "]", "\n", "\n", "# Dropping image info for images outside of rooms found", "\n", "# during preprocessing", "\n", "image_info_list", "=", "[", "\n", "x", "for", "x", "in", "image_info_list", "\n", "if", "s3dis_image_room", "(", "x", "[", "'path'", "]", ")", "in", "rooms", "[", "i", "]", "]", "\n", "\n", "print", "(", "f\"    Area {i + 1} - {len(rooms[i])} rooms - \"", "\n", "f\"{len(image_info_list)} images\"", ")", "\n", "\n", "# Keep all images for the test area", "\n", "image_data_list", ".", "append", "(", "img_info_to_img_data", "(", "image_info_list", ",", "self", ".", "img_ref_size", ")", ")", "\n", "\n", "# Save image data", "\n", "", "torch", ".", "save", "(", "image_data_list", ",", "self", ".", "image_data_path", ")", "\n", "\n", "", "else", ":", "\n", "            ", "print", "(", "'Loading the image data...'", ")", "\n", "image_data_list", "=", "torch", ".", "load", "(", "self", ".", "image_data_path", ")", "\n", "\n", "", "print", "(", "'Done\\n'", ")", "\n", "\n", "# --------------------------------------------------------------", "\n", "# Pre-transform image data", "\n", "# This is where images are loaded and mappings are computed", "\n", "# --------------------------------------------------------------", "\n", "if", "not", "osp", ".", "exists", "(", "self", ".", "pre_transformed_image_path", ")", ":", "\n", "            ", "print", "(", "'Running the image pre-transforms...'", ")", "\n", "mm_data_list", "=", "(", "data_list", ",", "image_data_list", ")", "\n", "if", "self", ".", "pre_transform_image", ":", "\n", "                ", "mm_data_list", "=", "self", ".", "pre_transform_image", "(", "*", "mm_data_list", ")", "\n", "", "torch", ".", "save", "(", "mm_data_list", ",", "self", ".", "pre_transformed_image_path", ")", "\n", "\n", "", "else", ":", "\n", "            ", "print", "(", "'Loading the image pre-transformed data...'", ")", "\n", "mm_data_list", "=", "torch", ".", "load", "(", "self", ".", "pre_transformed_image_path", ")", "\n", "\n", "", "print", "(", "'Done\\n'", ")", "\n", "\n", "# --------------------------------------------------------------", "\n", "# Compute train / val / test / trainval splits", "\n", "# This is where the 'train_i.pt', 'val_i.pt', etc. are created", "\n", "# --------------------------------------------------------------", "\n", "print", "(", "f'Computing and saving train, val, test and trainval '", "\n", "f'splits for test_area=Area_{self.test_area}...'", ")", "\n", "torch", ".", "save", "(", "mm_data_list", ",", "self", ".", "processed_paths", "[", "0", "]", ")", "\n", "torch", ".", "save", "(", "mm_data_list", ",", "self", ".", "processed_paths", "[", "1", "]", ")", "\n", "torch", ".", "save", "(", "mm_data_list", ",", "self", ".", "processed_paths", "[", "2", "]", ")", "\n", "torch", ".", "save", "(", "mm_data_list", ",", "self", ".", "processed_paths", "[", "3", "]", ")", "\n", "del", "mm_data_list", "\n", "print", "(", "'Done\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis_area5_office40.S3DISOriginalFusedMM._load_data": [[511, 513], ["torch.load"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load"], ["", "def", "_load_data", "(", "self", ",", "path", ")", ":", "\n", "        ", "self", ".", "data", ",", "self", ".", "images", "=", "torch", ".", "load", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis_area5_office40.S3DISOriginalFusedMM.indices": [[519, 526], ["pyg.__version__.split", "super().indices", "int", "int", "range", "len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.split", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis_area5_office40.S3DISOriginalFusedMM.indices", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "def", "indices", "(", "self", ")", ":", "\n", "        ", "import", "torch_geometric", "as", "pyg", "\n", "version", "=", "pyg", ".", "__version__", ".", "split", "(", "'.'", ")", "\n", "is_new_pyg", "=", "int", "(", "version", "[", "0", "]", ")", ">=", "2", "or", "int", "(", "version", "[", "1", "]", ")", ">=", "7", "\n", "if", "is_new_pyg", ":", "\n", "            ", "return", "range", "(", "len", "(", "self", ")", ")", "if", "self", ".", "_indices", "is", "None", "else", "self", ".", "_indices", "\n", "", "return", "super", "(", ")", ".", "indices", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis_area5_office40.S3DISSphereMM.__init__": [[560, 566], ["cT.GridSampling3D", "s3dis_area5_office40.S3DISOriginalFusedMM.__init__"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["def", "__init__", "(", "self", ",", "root", ",", "sample_per_epoch", "=", "100", ",", "radius", "=", "2", ",", "*", "args", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_sample_per_epoch", "=", "sample_per_epoch", "\n", "self", ".", "_radius", "=", "radius", "\n", "self", ".", "_grid_sphere_sampling", "=", "cT", ".", "GridSampling3D", "(", "size", "=", "radius", "/", "10.0", ")", "\n", "super", "(", ")", ".", "__init__", "(", "root", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis_area5_office40.S3DISSphereMM.__len__": [[567, 572], ["len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_sample_per_epoch", ">", "0", ":", "\n", "            ", "return", "self", ".", "_sample_per_epoch", "\n", "", "else", ":", "\n", "            ", "return", "len", "(", "self", ".", "_test_spheres", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis_area5_office40.S3DISSphereMM.__getitem__": [[573, 596], ["isinstance", "s3dis_area5_office40.S3DISSphereMM.get", "s3dis_area5_office40.S3DISSphereMM.transform_image", "torch_points3d.core.multimodal.data.MMData", "s3dis_area5_office40.S3DISSphereMM.transform", "s3dis_area5_office40.S3DISSphereMM._images[].clone", "type", "s3dis_area5_office40.S3DISSphereMM.indices"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.clone", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis_area5_office40.S3DISOriginalFusedMM.indices"], ["", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\"\n        Indexing mechanism for the Dataset. Only supports int indexing.\n\n        Overwrites the torch_geometric.InMemoryDataset.__getitem__()\n        used for indexing Dataset. Extends its mechanisms to multimodal\n        data.\n\n        Get a 3D points Data sphere sample with image mapping\n        attributes, along with the list idx.\n        \"\"\"", "\n", "assert", "isinstance", "(", "idx", ",", "int", ")", ",", "f\"Indexing with {type(idx)} is not supported, only \"", "f\"{int} are accepted.\"", "\n", "\n", "# Get the 3D point sample and apply transforms", "\n", "i_area", ",", "data", "=", "self", ".", "get", "(", "self", ".", "indices", "(", ")", "[", "idx", "]", ")", "\n", "data", "=", "data", "if", "self", ".", "transform", "is", "None", "else", "self", ".", "transform", "(", "data", ")", "\n", "\n", "# Get the corresponding images and mappings", "\n", "data", ",", "images", "=", "self", ".", "transform_image", "(", "data", ",", "self", ".", "_images", "[", "i_area", "]", ".", "clone", "(", ")", ")", "\n", "\n", "return", "MMData", "(", "data", ",", "image", "=", "images", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis_area5_office40.S3DISSphereMM.get": [[597, 620], ["s3dis_area5_office40.S3DISSphereMM._get_random", "s3dis_area5_office40.S3DISSphereMM._test_spheres[].clone", "delattr"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis_area5_office40.S3DISSphereMM._get_random", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.clone"], ["", "def", "get", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\"\n        Get a 3D points Data sample. Does not return multimodal\n        attributes.\n\n        Overwrites the torch_geometric.InMemoryDataset.get(), which is\n        called from inside the\n        torch_geometric.InMemoryDataset.__getitem__() used for indexing\n        datasets.\n        \"\"\"", "\n", "if", "self", ".", "_sample_per_epoch", ">", "0", ":", "\n", "# For train datasets", "\n", "# Return a random spherical sample and the associated area", "\n", "# id", "\n", "            ", "return", "self", ".", "_get_random", "(", ")", "\n", "", "else", ":", "\n", "# For test and val datasets", "\n", "# Return the precomputed sphere at idx and the associated", "\n", "# area id", "\n", "            ", "test_sphere", "=", "self", ".", "_test_spheres", "[", "idx", "]", ".", "clone", "(", ")", "\n", "i_area", "=", "test_sphere", ".", "area_id", "\n", "delattr", "(", "test_sphere", ",", "'area_id'", ")", "\n", "return", "i_area", ",", "test_sphere", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis_area5_office40.S3DISSphereMM.process": [[621, 625], ["s3dis_area5_office40.S3DISOriginalFusedMM.process"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.classification.modelnet.SampledModelNet.process"], ["", "", "def", "process", "(", "self", ")", ":", "\n", "# We have to include this method, otherwise the parent class", "\n", "# skips processing.", "\n", "        ", "super", "(", ")", ".", "process", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis_area5_office40.S3DISSphereMM.download": [[626, 630], ["s3dis_area5_office40.S3DISOriginalFusedMM.download"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.classification.modelnet.SampledModelNet.download"], ["", "def", "download", "(", "self", ")", ":", "\n", "# We have to include this method, otherwise the parent class", "\n", "# skips download.", "\n", "        ", "super", "(", ")", ".", "download", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis_area5_office40.S3DISSphereMM._get_random": [[631, 651], ["np.random.choice", "int", "centre[].int", "cT.SphereSampling", "cT.SphereSampling.", "random.random"], "methods", ["None"], ["", "def", "_get_random", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        S3DISSphereMM has predefined sphere centers accross all areas\n        in the split. The _get_random method randomly picks a center\n        and recovers the sphere-neighborhood for the appropriate\n        S3DISSphereMM._datas[i_area].\n\n        Called if S3DISSphereMM is NOT test set. \n        \"\"\"", "\n", "# Random spheres biased towards getting more low frequency classes", "\n", "chosen_label", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "_labels", ",", "p", "=", "self", ".", "_label_counts", ")", "\n", "valid_centres", "=", "self", ".", "_centres_for_sampling", "[", "\n", "self", ".", "_centres_for_sampling", "[", ":", ",", "4", "]", "==", "chosen_label", "]", "\n", "centre_idx", "=", "int", "(", "random", ".", "random", "(", ")", "*", "(", "valid_centres", ".", "shape", "[", "0", "]", "-", "1", ")", ")", "\n", "centre", "=", "valid_centres", "[", "centre_idx", "]", "\n", "i_area", "=", "centre", "[", "3", "]", ".", "int", "(", ")", "\n", "area_data", "=", "self", ".", "_datas", "[", "i_area", "]", "\n", "sphere_sampler", "=", "cT", ".", "SphereSampling", "(", "\n", "self", ".", "_radius", ",", "centre", "[", ":", "3", "]", ",", "align_origin", "=", "False", ")", "\n", "return", "i_area", ",", "sphere_sampler", "(", "area_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis_area5_office40.S3DISSphereMM._load_data": [[652, 700], ["torch.load", "isinstance", "isinstance", "enumerate", "torch.cat", "np.unique", "np.sqrt", "range", "cT.GridSphereSampling", "cT.GridSphereSampling.", "s3dis_area5_office40.S3DISSphereMM._grid_sphere_sampling", "torch.empty", "s3dis_area5_office40.S3DISSphereMM._centres_for_sampling.append", "KDTree", "setattr", "np.asarray", "np.sum", "len", "hasattr", "data.clone", "np.asarray", "np.sqrt.mean"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.clone", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.lovasz_loss.mean"], ["", "def", "_load_data", "(", "self", ",", "path", ")", ":", "\n", "        ", "\"\"\"\n        Initializes the self._datas, self._images which hold all the\n        preprocessed multimodal data in memory. Also initializes the\n        sphere sampling centers and per-area KDTrees.\n\n        Overwrites the S3DISOriginalFusedMM._load_data()\n        \"\"\"", "\n", "self", ".", "_datas", ",", "self", ".", "_images", "=", "torch", ".", "load", "(", "path", ")", "\n", "\n", "if", "not", "isinstance", "(", "self", ".", "_datas", ",", "list", ")", ":", "\n", "            ", "self", ".", "_datas", "=", "[", "self", ".", "_datas", "]", "\n", "", "if", "not", "isinstance", "(", "self", ".", "_images", ",", "list", ")", ":", "\n", "            ", "self", ".", "_images", "=", "[", "self", ".", "_images", "]", "\n", "\n", "", "if", "self", ".", "_sample_per_epoch", ">", "0", ":", "\n", "            ", "self", ".", "_centres_for_sampling", "=", "[", "]", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "self", ".", "_datas", ")", ":", "\n", "# Just to make we don't have some out-of-date data in", "\n", "# there", "\n", "                ", "assert", "not", "hasattr", "(", "data", ",", "cT", ".", "SphereSampling", ".", "KDTREE_KEY", ")", "\n", "low_res", "=", "self", ".", "_grid_sphere_sampling", "(", "data", ".", "clone", "(", ")", ")", "\n", "centres", "=", "torch", ".", "empty", "(", "(", "low_res", ".", "pos", ".", "shape", "[", "0", "]", ",", "5", ")", ",", "\n", "dtype", "=", "torch", ".", "float", ")", "\n", "centres", "[", ":", ",", ":", "3", "]", "=", "low_res", ".", "pos", "\n", "centres", "[", ":", ",", "3", "]", "=", "i", "\n", "centres", "[", ":", ",", "4", "]", "=", "low_res", ".", "y", "\n", "self", ".", "_centres_for_sampling", ".", "append", "(", "centres", ")", "\n", "tree", "=", "KDTree", "(", "np", ".", "asarray", "(", "data", ".", "pos", ")", ",", "leaf_size", "=", "10", ")", "\n", "setattr", "(", "data", ",", "cT", ".", "SphereSampling", ".", "KDTREE_KEY", ",", "tree", ")", "\n", "\n", "", "self", ".", "_centres_for_sampling", "=", "torch", ".", "cat", "(", "\n", "self", ".", "_centres_for_sampling", ",", "0", ")", "\n", "uni", ",", "uni_counts", "=", "np", ".", "unique", "(", "\n", "np", ".", "asarray", "(", "self", ".", "_centres_for_sampling", "[", ":", ",", "-", "1", "]", ")", ",", "\n", "return_counts", "=", "True", ")", "\n", "uni_counts", "=", "np", ".", "sqrt", "(", "uni_counts", ".", "mean", "(", ")", "/", "uni_counts", ")", "\n", "self", ".", "_label_counts", "=", "uni_counts", "/", "np", ".", "sum", "(", "uni_counts", ")", "\n", "self", ".", "_labels", "=", "uni", "\n", "\n", "", "else", ":", "\n", "# Save the area id in _test_spheres so we can recover", "\n", "# multimodal mappings after GridSphereSampling", "\n", "            ", "for", "i_area", "in", "range", "(", "len", "(", "self", ".", "_datas", ")", ")", ":", "\n", "                ", "self", ".", "_datas", "[", "i_area", "]", ".", "area_id", "=", "i_area", "\n", "", "grid_sampler", "=", "cT", ".", "GridSphereSampling", "(", "\n", "self", ".", "_radius", ",", "self", ".", "_radius", ",", "center", "=", "False", ")", "\n", "self", ".", "_test_spheres", "=", "grid_sampler", "(", "self", ".", "_datas", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis_area5_office40.S3DISFusedDataset.__init__": [[726, 782], ["torch_points3d.datasets.base_dataset_multimodal.BaseDatasetMM.__init__", "dataset_opt.get", "dataset_opt.get", "s3dis_area5_office40.S3DISSphereMM", "s3dis_area5_office40.S3DISSphereMM", "s3dis_area5_office40.S3DISSphereMM", "s3dis_area5_office40.S3DISFusedDataset.add_weights"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.base_dataset.BaseDataset.add_weights"], ["def", "__init__", "(", "self", ",", "dataset_opt", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dataset_opt", ")", "\n", "\n", "sampling_format", "=", "dataset_opt", ".", "get", "(", "'sampling_format'", ",", "'sphere'", ")", "\n", "assert", "sampling_format", "==", "'sphere'", ",", "f\"Only sampling format 'sphere' is supported.\"", "\n", "\n", "sample_per_epoch", "=", "dataset_opt", ".", "get", "(", "'sample_per_epoch'", ",", "8", ")", "\n", "\n", "self", ".", "train_dataset", "=", "S3DISSphereMM", "(", "\n", "self", ".", "_data_path", ",", "\n", "sample_per_epoch", "=", "sample_per_epoch", ",", "\n", "test_area", "=", "self", ".", "dataset_opt", ".", "fold", ",", "\n", "split", "=", "\"train\"", ",", "\n", "pre_collate_transform", "=", "self", ".", "pre_collate_transform", ",", "\n", "transform", "=", "self", ".", "train_transform", ",", "\n", "pre_transform_image", "=", "self", ".", "pre_transform_image", ",", "\n", "transform_image", "=", "self", ".", "train_transform_image", ",", "\n", "img_ref_size", "=", "self", ".", "dataset_opt", ".", "resolution_2d", ")", "\n", "\n", "self", ".", "val_dataset", "=", "S3DISSphereMM", "(", "\n", "self", ".", "_data_path", ",", "\n", "sample_per_epoch", "=", "-", "1", ",", "\n", "test_area", "=", "self", ".", "dataset_opt", ".", "fold", ",", "\n", "split", "=", "\"val\"", ",", "\n", "pre_collate_transform", "=", "self", ".", "pre_collate_transform", ",", "\n", "transform", "=", "self", ".", "val_transform", ",", "\n", "pre_transform_image", "=", "self", ".", "pre_transform_image", ",", "\n", "transform_image", "=", "self", ".", "val_transform_image", ",", "\n", "img_ref_size", "=", "self", ".", "dataset_opt", ".", "resolution_2d", ")", "\n", "\n", "# self.trainval_dataset = S3DISSphereMM(", "\n", "#     self._data_path,", "\n", "#     sample_per_epoch=sample_per_epoch,", "\n", "#     test_area=self.dataset_opt.fold,", "\n", "#     split=\"trainval\",", "\n", "#     pre_collate_transform=self.pre_collate_transform,", "\n", "#     transform=self.train_transform,", "\n", "#     pre_transform_image=self.pre_transform_image,", "\n", "#     transform_image=self.train_transform_image,", "\n", "#     img_ref_size = self.dataset_opt.resolution_2d)", "\n", "\n", "self", ".", "test_dataset", "=", "S3DISSphereMM", "(", "\n", "self", ".", "_data_path", ",", "\n", "sample_per_epoch", "=", "-", "1", ",", "\n", "test_area", "=", "self", ".", "dataset_opt", ".", "fold", ",", "\n", "split", "=", "\"test\"", ",", "\n", "pre_collate_transform", "=", "self", ".", "pre_collate_transform", ",", "\n", "transform", "=", "self", ".", "test_transform", ",", "\n", "pre_transform_image", "=", "self", ".", "pre_transform_image", ",", "\n", "transform_image", "=", "self", ".", "test_transform_image", ",", "\n", "img_ref_size", "=", "self", ".", "dataset_opt", ".", "resolution_2d", ")", "\n", "\n", "if", "dataset_opt", ".", "class_weight_method", ":", "\n", "            ", "self", ".", "add_weights", "(", "\n", "class_weight_method", "=", "dataset_opt", ".", "class_weight_method", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis_area5_office40.S3DISFusedDataset.test_data": [[783, 786], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "test_data", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "test_dataset", "[", "0", "]", ".", "raw_test_data", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis_area5_office40.S3DISFusedDataset.to_ply": [[787, 802], ["s3dis_area5_office40.S3DISFusedDataset.to_ply"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis_area5_office40.S3DISFusedDataset.to_ply"], ["", "@", "staticmethod", "\n", "def", "to_ply", "(", "pos", ",", "label", ",", "file", ")", ":", "\n", "        ", "\"\"\"\n        Saves s3dis predictions to disk using s3dis color scheme.\n\n        Parameters\n        ----------\n        pos : torch.Tensor\n            tensor that contains the positions of the points\n        label : torch.Tensor\n            predicted label\n        file : string\n            Save location\n        \"\"\"", "\n", "to_ply", "(", "pos", ",", "label", ",", "file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis_area5_office40.S3DISFusedDataset.get_tracker": [[803, 816], ["S3DISTracker"], "methods", ["None"], ["", "def", "get_tracker", "(", "self", ",", "wandb_log", ":", "bool", ",", "tensorboard_log", ":", "bool", ")", ":", "\n", "        ", "\"\"\"Factory method for the tracker\n\n        Arguments:\n            wandb_log - Log using weight and biases\n            tensorboard_log - Log using tensorboard\n        Returns:\n            [BaseTracker] -- tracker\n        \"\"\"", "\n", "from", "torch_points3d", ".", "metrics", ".", "s3dis_tracker", "import", "S3DISTracker", "\n", "\n", "return", "S3DISTracker", "(", "\n", "self", ",", "wandb_log", "=", "wandb_log", ",", "use_tensorboard", "=", "tensorboard_log", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis_area5_office40.read_s3dis_pose": [[74, 102], ["np.array", "np.array", "json_file.lower", "open", "json.load", "np.double", "np.array", "np.array.dot", "np.array", "np.array"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load"], ["def", "read_s3dis_pose", "(", "json_file", ")", ":", "\n", "# Area 5b poses need a special treatment", "\n", "# Need to see the file comes from Area i in the provided filepath", "\n", "    ", "area_5b", "=", "'area_5b'", "in", "json_file", ".", "lower", "(", ")", "\n", "\n", "# Loading the Stanford pose json file", "\n", "with", "open", "(", "json_file", ")", "as", "f", ":", "\n", "        ", "pose_data", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "# XYZ camera position", "\n", "", "xyz", "=", "np", ".", "array", "(", "pose_data", "[", "'camera_location'", "]", ")", "\n", "\n", "# Omega, Phi, Kappa camera pose", "\n", "# We define a different pose coordinate system ", "\n", "omega", ",", "phi", ",", "kappa", "=", "[", "np", ".", "double", "(", "i", ")", "\n", "for", "i", "in", "pose_data", "[", "'final_camera_rotation'", "]", "]", "\n", "#     opk = np.array([omega - (np.pi / 2), -phi, -kappa])", "\n", "opk", "=", "np", ".", "array", "(", "[", "omega", "-", "(", "np", ".", "pi", "/", "2", ")", ",", "-", "phi", ",", "-", "kappa", "-", "(", "np", ".", "pi", "/", "2", ")", "]", ")", "\n", "\n", "# Area 5b poses require some rotation and offset corrections", "\n", "if", "area_5b", ":", "\n", "        ", "M", "=", "np", ".", "array", "(", "[", "[", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "-", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "xyz", "=", "M", ".", "dot", "(", "xyz", ")", "+", "np", ".", "array", "(", "[", "-", "4.10", ",", "6.25", ",", "0.0", "]", ")", "\n", "opk", "=", "opk", "+", "np", ".", "array", "(", "[", "0", ",", "0", ",", "np", ".", "pi", "/", "2", "]", ")", "\n", "\n", "", "return", "xyz", ",", "opk", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis_area5_office40.s3dis_image_pose_pairs": [[106, 152], ["sorted", "sorted", "sorted", "print", "print", "print", "list", "osp.basename().replace", "osp.basename().replace", "osp.join", "osp.join", "set().intersection", "osp.join", "osp.join", "glob.glob", "glob.glob", "print", "print", "set", "osp.basename", "osp.join", "osp.basename", "osp.join", "set", "set", "set", "set", "len", "len", "len", "len", "set", "x.split", "x.split"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.split", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.split"], ["", "def", "s3dis_image_pose_pairs", "(", "\n", "image_dir", ",", "pose_dir", ",", "image_suffix", "=", "'_rgb.png'", ",", "\n", "pose_suffix", "=", "'_pose.json'", ",", "skip_names", "=", "None", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Search for all image-pose correspondences in the directories.\n    Return the list of image-pose pairs. Orphans are ignored.\n    \"\"\"", "\n", "# Search for images and poses", "\n", "image_names", "=", "sorted", "(", "[", "\n", "osp", ".", "basename", "(", "x", ")", ".", "replace", "(", "image_suffix", ",", "''", ")", "\n", "for", "x", "in", "glob", ".", "glob", "(", "osp", ".", "join", "(", "image_dir", ",", "'*'", "+", "image_suffix", ")", ")", "]", ")", "\n", "pose_names", "=", "sorted", "(", "[", "\n", "osp", ".", "basename", "(", "x", ")", ".", "replace", "(", "pose_suffix", ",", "''", ")", "\n", "for", "x", "in", "glob", ".", "glob", "(", "osp", ".", "join", "(", "pose_dir", ",", "'*'", "+", "pose_suffix", ")", ")", "]", ")", "\n", "\n", "# Remove images specified by skip_names", "\n", "skip_names", "=", "skip_names", "if", "skip_names", "is", "not", "None", "else", "[", "]", "\n", "image_names", "=", "[", "x", "for", "x", "in", "image_names", "if", "x", "not", "in", "skip_names", "]", "\n", "pose_names", "=", "[", "x", "for", "x", "in", "pose_names", "if", "x", "not", "in", "skip_names", "]", "\n", "\n", "# Print orphans", "\n", "if", "not", "image_names", "==", "pose_names", ":", "\n", "        ", "image_orphan", "=", "[", "\n", "osp", ".", "join", "(", "image_dir", ",", "x", "+", "image_suffix", ")", "\n", "for", "x", "in", "set", "(", "image_names", ")", "-", "set", "(", "pose_names", ")", "]", "\n", "pose_orphan", "=", "[", "\n", "osp", ".", "join", "(", "pose_dir", ",", "x", "+", "pose_suffix", ")", "\n", "for", "x", "in", "set", "(", "pose_names", ")", "-", "set", "(", "image_names", ")", "]", "\n", "print", "(", "\"Could not recover all image-pose correspondences.\"", ")", "\n", "print", "(", "f\"  Orphan images : {len(image_orphan)}/{len(image_names)}\"", ")", "\n", "if", "verbose", ":", "\n", "            ", "for", "x", "in", "image_orphan", ":", "\n", "                ", "print", "(", "4", "*", "' '", "+", "'/'", ".", "join", "(", "x", ".", "split", "(", "'/'", ")", "[", "-", "4", ":", "]", ")", ")", "\n", "", "", "print", "(", "f\"  Orphan poses  : {len(pose_orphan)}/{len(pose_names)}\"", ")", "\n", "if", "verbose", ":", "\n", "            ", "for", "x", "in", "pose_orphan", ":", "\n", "                ", "print", "(", "4", "*", "' '", "+", "'/'", ".", "join", "(", "x", ".", "split", "(", "'/'", ")", "[", "-", "4", ":", "]", ")", ")", "\n", "\n", "# Only return the recovered pairs", "\n", "", "", "", "correspondences", "=", "sorted", "(", "list", "(", "set", "(", "image_names", ")", ".", "intersection", "(", "\n", "set", "(", "pose_names", ")", ")", ")", ")", "\n", "pairs", "=", "[", "(", "\n", "osp", ".", "join", "(", "image_dir", ",", "x", "+", "image_suffix", ")", ",", "\n", "osp", ".", "join", "(", "pose_dir", ",", "x", "+", "pose_suffix", ")", ")", "\n", "for", "x", "in", "correspondences", "]", "\n", "return", "pairs", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis_area5_office40.s3dis_image_area": [[156, 159], ["path.split"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.split"], ["", "def", "s3dis_image_area", "(", "path", ")", ":", "\n", "    ", "\"\"\"S3DIS-specific. Recover the area from the image path.\"\"\"", "\n", "return", "path", ".", "split", "(", "'/'", ")", "[", "-", "4", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis_area5_office40.s3dis_image_room": [[163, 166], ["os.path.basename().split", "os.path.basename"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.split"], ["", "def", "s3dis_image_room", "(", "path", ")", ":", "\n", "    ", "\"\"\"S3DIS-specific. Recover the room from the image path.\"\"\"", "\n", "return", "'_'", ".", "join", "(", "os", ".", "path", ".", "basename", "(", "path", ")", ".", "split", "(", "'_'", ")", "[", "2", ":", "4", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis_area5_office40.s3dis_image_name": [[170, 173], ["os.path.basename().split", "os.path.basename"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.split"], ["", "def", "s3dis_image_name", "(", "path", ")", ":", "\n", "    ", "\"\"\"S3DIS-specific. Recover the name from the image path.\"\"\"", "\n", "return", "os", ".", "path", ".", "basename", "(", "path", ")", ".", "split", "(", "'_'", ")", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.no3d.No3DEncoder.__init__": [[20, 54], ["torch_points3d.models.base_architectures.backbone.BackboneBasedModel.__init__", "kwargs.get", "all", "torch_points3d.core.common_modules.base_modules.MLP", "torch_points3d.applications.utils.extract_output_nc", "getattr", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.MLP", "home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.utils.extract_output_nc"], ["def", "__init__", "(", "\n", "self", ",", "model_config", ",", "model_type", ",", "dataset", ",", "modules", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "# UnwrappedUnetBasedModel init", "\n", "        ", "super", "(", "No3DEncoder", ",", "self", ")", ".", "__init__", "(", "\n", "model_config", ",", "model_type", ",", "dataset", ",", "modules", ")", "\n", "\n", "# Make sure the model is multimodal and has no 3D. Note that", "\n", "# the BackboneBasedModel.__init__ carries most of the required", "\n", "# initialization.", "\n", "assert", "self", ".", "is_multimodal", ",", "f\"No3DEncoder should carry at least one non-3D modality.\"", "\n", "assert", "self", ".", "no_3d_conv", ",", "f\"No3DEncoder should not have 3D-specific modules.\"", "\n", "\n", "# Recover size of output features", "\n", "default_output_nc", "=", "kwargs", ".", "get", "(", "\"default_output_nc\"", ",", "None", ")", "\n", "if", "not", "default_output_nc", ":", "\n", "            ", "mod_out_nc_list", "=", "[", "extract_output_nc", "(", "getattr", "(", "\n", "model_config", ".", "down_conv", ",", "m", ")", ")", "for", "m", "in", "self", ".", "modalities", "]", "\n", "assert", "all", "(", "o", "==", "mod_out_nc_list", "[", "0", "]", "for", "o", "in", "mod_out_nc_list", ")", ",", "f\"Expected all modality branches outputs to have the same \"", "f\"feature size but got {mod_out_nc_list} sizes instead.\"", "\n", "default_output_nc", "=", "mod_out_nc_list", "[", "0", "]", "\n", "\n", "", "self", ".", "_output_nc", "=", "default_output_nc", "\n", "\n", "# Set the MLP head if any", "\n", "self", ".", "_has_mlp_head", "=", "False", "\n", "if", "\"output_nc\"", "in", "kwargs", ":", "\n", "            ", "self", ".", "_has_mlp_head", "=", "True", "\n", "self", ".", "_output_nc", "=", "kwargs", "[", "\"output_nc\"", "]", "\n", "self", ".", "mlp", "=", "MLP", "(", "\n", "[", "default_output_nc", ",", "self", ".", "output_nc", "]", ",", "activation", "=", "torch", ".", "nn", ".", "ReLU", "(", ")", ",", "\n", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.no3d.No3DEncoder.has_mlp_head": [[55, 58], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "has_mlp_head", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_has_mlp_head", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.no3d.No3DEncoder.output_nc": [[59, 62], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "output_nc", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_output_nc", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.no3d.No3DEncoder._set_input": [[63, 78], ["data.to.to.to", "getattr"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to"], ["", "def", "_set_input", "(", "self", ",", "data", ":", "MMData", ")", ":", "\n", "        ", "\"\"\"Unpack input data from the dataloader and perform necessary\n        pre-processing steps.\n\n        Parameters\n        -----------\n        data: MMData object\n        \"\"\"", "\n", "data", "=", "data", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "input", "=", "{", "\n", "'x_3d'", ":", "getattr", "(", "data", ",", "'x'", ",", "None", ")", ",", "\n", "'x_seen'", ":", "None", ",", "\n", "'modalities'", ":", "data", ".", "modalities", "}", "\n", "if", "data", ".", "pos", "is", "not", "None", ":", "\n", "            ", "self", ".", "xyz", "=", "data", ".", "pos", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.no3d.No3DEncoder.forward": [[79, 131], ["no3d.No3DEncoder._set_input", "range", "torch_geometric.data.Batch", "len", "no3d.No3DEncoder.mlp", "no3d.No3DEncoder.mlp"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.pointnet2.BasePointnet2._set_input", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "", "def", "forward", "(", "self", ",", "data", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Run forward pass. Expects a MMData object for input, with\n        3D Data and multimodal data and mappings. Although the\n        No3DEncoder model does not apply any convolution modules\n        directly on the 3D points, it still requires a 3D points Data\n        object with a 'pos' attribute as input, to be able to output\n        these very same points populated with modality-generated\n        features.\n\n        Parameters\n        -----------\n        data: MMData object\n\n        Returns\n        --------\n        data: Data object\n            - pos [N, 3] (coords or real pos if xyz is in data)\n            - x [N, output_nc]\n        \"\"\"", "\n", "self", ".", "_set_input", "(", "data", ")", "\n", "mm_data_dict", "=", "self", ".", "input", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "down_modules", ")", ")", ":", "\n", "            ", "mm_data_dict", "=", "self", ".", "down_modules", "[", "i", "]", "(", "mm_data_dict", ")", "\n", "\n", "# Discard the modalities used in the down modules, only", "\n", "# 3D point features are expected to be used in subsequent", "\n", "# modules. Restore the input Data object equipped with the", "\n", "# proper point positions and modality-generated features.", "\n", "", "out", "=", "Batch", "(", "\n", "x", "=", "mm_data_dict", "[", "'x_3d'", "]", ",", "pos", "=", "self", ".", "xyz", ",", "seen", "=", "mm_data_dict", "[", "'x_seen'", "]", ")", "\n", "\n", "# TODO: this always passes the modality feature maps in the", "\n", "#  output dictionary. May not be relevant at inference time,", "\n", "#  when we would rather save memory and discard unnecessary", "\n", "#  data. Besides, this behavior for NoDEncoder is not consistent", "\n", "#  with the multimodal UNet, need to consider homogenizing.", "\n", "for", "m", "in", "self", ".", "modalities", ":", "\n", "# x_mod = getattr(mm_data_dict['modalities'][m], 'last_view_x_mod', None)", "\n", "# if x_mod is not None:", "\n", "#     out[m] = mm_data_dict['modalities'][m]", "\n", "            ", "out", "[", "m", "]", "=", "mm_data_dict", "[", "'modalities'", "]", "[", "m", "]", "\n", "\n", "# Apply the MLP head, if any", "\n", "", "if", "self", ".", "has_mlp_head", ":", "\n", "# Apply to the 3D features", "\n", "            ", "out", ".", "x", "=", "self", ".", "mlp", "(", "out", ".", "x", ")", "\n", "\n", "# Apply to the last modality-based view-level features", "\n", "for", "m", "in", "[", "mod", "for", "mod", "in", "self", ".", "modalities", "if", "mod", "in", "out", ".", "keys", "]", ":", "\n", "                ", "out", "[", "m", "]", ".", "last_view_x_mod", "=", "self", ".", "mlp", "(", "out", "[", "m", "]", ".", "last_view_x_mod", ")", "\n", "\n", "", "", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.fusion.BimodalFusion.__init__": [[22, 36], ["super().__init__", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat"], ["\n", "def", "__init__", "(", "self", ",", "vol_bnds", ",", "voxel_size", ",", "use_gpu", "=", "True", ")", ":", "\n", "        ", "\"\"\"Constructor.\n        Args:\n        vol_bnds (ndarray): An ndarray of shape (3, 2). Specifies the\n        xyz bounds (min/max) in meters.\n        voxel_size (float): The volume discretization in meters.\n        \"\"\"", "\n", "vol_bnds", "=", "np", ".", "asarray", "(", "vol_bnds", ")", "\n", "assert", "vol_bnds", ".", "shape", "==", "(", "3", ",", "2", ")", ",", "\"[!] `vol_bnds` should be of shape (3, 2).\"", "\n", "\n", "# Define voxel volume parameters", "\n", "self", ".", "_vol_bnds", "=", "vol_bnds", "\n", "self", ".", "_voxel_size", "=", "float", "(", "voxel_size", ")", "\n", "self", ".", "_trunc_margin", "=", "5", "*", "self", ".", "_voxel_size", "# truncation on SDF", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.fusion.BimodalFusion.forward": [[38, 51], ["fusion.BimodalFusion.f", "isinstance"], "methods", ["None"], ["\n", "# Adjust volume bounds and ensure C-order contiguous", "\n", "self", ".", "_vol_dim", "=", "np", ".", "ceil", "(", "\n", "(", "self", ".", "_vol_bnds", "[", ":", ",", "1", "]", "-", "self", ".", "_vol_bnds", "[", ":", ",", "0", "]", ")", "/", "\n", "self", ".", "_voxel_size", ")", ".", "copy", "(", "order", "=", "'C'", ")", ".", "astype", "(", "int", ")", "\n", "self", ".", "_vol_bnds", "[", ":", ",", "1", "]", "=", "self", ".", "_vol_bnds", "[", ":", ",", "0", "]", "+", "self", ".", "_vol_dim", "*", "self", ".", "_voxel_size", "\n", "self", ".", "_vol_origin", "=", "self", ".", "_vol_bnds", "[", ":", ",", "0", "]", ".", "copy", "(", "order", "=", "'C'", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "print", "(", "\"Voxel volume size: {} x {} x {} - # points: {:,}\"", ".", "format", "(", "\n", "self", ".", "_vol_dim", "[", "0", "]", ",", "self", ".", "_vol_dim", "[", "1", "]", ",", "self", ".", "_vol_dim", "[", "2", "]", ",", "\n", "self", ".", "_vol_dim", "[", "0", "]", "*", "self", ".", "_vol_dim", "[", "1", "]", "*", "self", ".", "_vol_dim", "[", "2", "]", ")", "\n", ")", "\n", "\n", "# Initialize pointers to voxel volume in CPU memory", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.fusion.BimodalFusion.extra_repr": [[52, 54], ["None"], "methods", ["None"], ["self", ".", "_tsdf_vol_cpu", "=", "np", ".", "ones", "(", "self", ".", "_vol_dim", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "# for computing the cumulative moving average of observations per voxel", "\n", "self", ".", "_weight_vol_cpu", "=", "np", ".", "zeros", "(", "self", ".", "_vol_dim", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.modules.MultimodalBlockDown.__init__": [[32, 56], ["super().__init__", "modules.MultimodalBlockDown._init_from_kwargs", "torch_points3d.core.common_modules.base_modules.Identity", "torch_points3d.core.common_modules.base_modules.Identity", "getattr", "getattr"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.modules.MultimodalBlockDown._init_from_kwargs"], ["\n", "\n", "def", "__init__", "(", "\n", "self", ",", "in_channels", ",", "out_channels", ",", "dim", ",", "kernel_size", ",", "hidden_channels", "=", "None", ",", "dilation", "=", "1", ",", "bias", "=", "True", ",", "**", "kwargs", ",", "\n", ")", ":", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.modules.MultimodalBlockDown._init_from_kwargs": [[57, 70], ["kwargs.keys", "isinstance", "setattr", "modules.MultimodalBlockDown._modalities.append", "type"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.mock.MockDatasetConfig.keys", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append"], ["        ", "super", "(", "XConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "if", "hidden_channels", "is", "None", ":", "\n", "            ", "hidden_channels", "=", "in_channels", "//", "4", "\n", "", "assert", "hidden_channels", ">", "0", "\n", "self", ".", "hidden_channels", "=", "hidden_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "dilation", "=", "dilation", "\n", "self", ".", "kwargs", "=", "kwargs", "\n", "\n", "C_in", ",", "C_delta", ",", "C_out", "=", "in_channels", ",", "hidden_channels", ",", "out_channels", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.modules.MultimodalBlockDown.modalities": [[71, 74], ["None"], "methods", ["None"], ["D", ",", "K", "=", "dim", ",", "kernel_size", "\n", "\n", "self", ".", "mlp1", "=", "S", "(", "\n", "L", "(", "dim", ",", "C_delta", ")", ",", "ELU", "(", ")", ",", "BN", "(", "C_delta", ")", ",", "L", "(", "C_delta", ",", "C_delta", ")", ",", "ELU", "(", ")", ",", "BN", "(", "C_delta", ")", ",", "Reshape", "(", "-", "1", ",", "K", ",", "C_delta", ")", ",", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.modules.MultimodalBlockDown.forward": [[75, 100], ["modules.MultimodalBlockDown.forward_3d_block_down", "modules.MultimodalBlockDown.forward_3d_block_down", "getattr", "getattr."], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.modules.MultimodalBlockDown.forward_3d_block_down", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.modules.MultimodalBlockDown.forward_3d_block_down"], [")", "\n", "\n", "self", ".", "mlp2", "=", "S", "(", "\n", "L", "(", "D", "*", "K", ",", "K", "**", "2", ")", ",", "\n", "ELU", "(", ")", ",", "\n", "BN", "(", "K", "**", "2", ")", ",", "\n", "Reshape", "(", "-", "1", ",", "K", ",", "K", ")", ",", "\n", "Conv1d", "(", "K", ",", "K", "**", "2", ",", "K", ",", "groups", "=", "K", ")", ",", "\n", "ELU", "(", ")", ",", "\n", "BN", "(", "K", "**", "2", ")", ",", "\n", "Reshape", "(", "-", "1", ",", "K", ",", "K", ")", ",", "\n", "Conv1d", "(", "K", ",", "K", "**", "2", ",", "K", ",", "groups", "=", "K", ")", ",", "\n", "BN", "(", "K", "**", "2", ")", ",", "\n", "Reshape", "(", "-", "1", ",", "K", ",", "K", ")", ",", "\n", ")", "\n", "\n", "C_in", "=", "C_in", "+", "C_delta", "\n", "depth_multiplier", "=", "int", "(", "ceil", "(", "C_out", "/", "C_in", ")", ")", "\n", "self", ".", "conv", "=", "S", "(", "\n", "Conv1d", "(", "C_in", ",", "C_in", "*", "depth_multiplier", ",", "K", ",", "groups", "=", "C_in", ")", ",", "\n", "Reshape", "(", "-", "1", ",", "C_in", "*", "depth_multiplier", ")", ",", "\n", "L", "(", "C_in", "*", "depth_multiplier", ",", "C_out", ",", "bias", "=", "bias", ")", ",", "\n", ")", "\n", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.modules.MultimodalBlockDown.forward_3d_block_down": [[101, 237], ["isinstance", "isinstance", "mm_data_dict[].keys", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "block", "[].select_points", "isinstance", "block", "torch_scatter.scatter", "block.coords_man.get_coords_map", "isinstance", "block", "NotImplementedError", "torchsparse.nn.functional.sphashquery", "src.argsort", "torchsparse.nn.functional.sphash", "torchsparse.nn.functional.sphash", "idx.to.to.ge().all", "torchsparse.nn.functional.sphashquery", "idx.to.to.to", "torchsparse.nn.functional.sphash", "torchsparse.nn.functional.sphash", "type", "idx.to.to.ge", "in_coords.cpu", "out_coords.cpu", "in_coords[].float"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.mock.MockDatasetConfig.keys", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageMapping.select_points", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.csr.CSRData.cpu", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.csr.CSRData.cpu"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "reset", "(", "self", ".", "mlp1", ")", "\n", "reset", "(", "self", ".", "mlp2", ")", "\n", "reset", "(", "self", ".", "conv", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "pos", ",", "edge_index", ")", ":", "\n", "\n", "# posTo = the points that will be centers of convolutions", "\n", "# posFrom = points that have edges to the centers of convolutions", "\n", "# For a down conv, posFrom = pos, posTo = pos[idx]", "\n", "# For an up conv, posFrom = pos, posTo = pos_skip", "\n", "        ", "posFrom", ",", "posTo", "=", "pos", "\n", "\n", "(", "N", ",", "D", ")", ",", "K", "=", "posTo", ".", "size", "(", ")", ",", "self", ".", "kernel_size", "\n", "\n", "idxFrom", ",", "idxTo", "=", "edge_index", "\n", "\n", "relPos", "=", "posTo", "[", "idxTo", "]", "-", "posFrom", "[", "idxFrom", "]", "\n", "\n", "x_star", "=", "self", ".", "mlp1", "(", "relPos", ")", "\n", "# x_star = self.mlp1(relPos.view(len(row), D))", "\n", "if", "x", "is", "not", "None", ":", "\n", "            ", "x", "=", "x", ".", "unsqueeze", "(", "-", "1", ")", "if", "x", ".", "dim", "(", ")", "==", "1", "else", "x", "\n", "x", "=", "x", "[", "idxFrom", "]", ".", "view", "(", "N", ",", "K", ",", "self", ".", "in_channels", ")", "\n", "x_star", "=", "torch", ".", "cat", "(", "[", "x_star", ",", "x", "]", ",", "dim", "=", "-", "1", ")", "\n", "", "x_star", "=", "x_star", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "x_star", "=", "x_star", ".", "view", "(", "N", ",", "self", ".", "in_channels", "+", "self", ".", "hidden_channels", ",", "K", ",", "1", ")", "\n", "\n", "transform_matrix", "=", "self", ".", "mlp2", "(", "relPos", ".", "view", "(", "N", ",", "K", "*", "D", ")", ")", "\n", "transform_matrix", "=", "transform_matrix", ".", "view", "(", "N", ",", "1", ",", "K", ",", "K", ")", "\n", "\n", "x_transformed", "=", "torch", ".", "matmul", "(", "transform_matrix", ",", "x_star", ")", "\n", "x_transformed", "=", "x_transformed", ".", "view", "(", "N", ",", "-", "1", ",", "K", ")", "\n", "\n", "out", "=", "self", ".", "conv", "(", "x_transformed", ")", "\n", "\n", "return", "out", "\n", "\n", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"{}({}, {})\"", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "in_channels", ",", "self", ".", "out_channels", ")", "\n", "\n", "\n", "", "", "class", "PointCNNConvDown", "(", "BaseConvolutionDown", ")", ":", "\n", "    ", "def", "__init__", "(", "\n", "self", ",", "inN", "=", "None", ",", "outN", "=", "None", ",", "K", "=", "None", ",", "D", "=", "None", ",", "C1", "=", "None", ",", "C2", "=", "None", ",", "hidden_channel", "=", "None", ",", "*", "args", ",", "**", "kwargs", ",", "\n", ")", ":", "\n", "        ", "super", "(", "PointCNNConvDown", ",", "self", ")", ".", "__init__", "(", "FPSSampler", "(", "outN", "/", "inN", ")", ",", "DilatedKNNNeighbourFinder", "(", "K", ",", "D", ")", ")", "\n", "\n", "self", ".", "_conv", "=", "XConv", "(", "C1", ",", "C2", ",", "3", ",", "K", ",", "hidden_channels", "=", "hidden_channel", ")", "\n", "\n", "", "def", "conv", "(", "self", ",", "x", ",", "pos", ",", "edge_index", ",", "batch", ")", ":", "\n", "        ", "return", "self", ".", "_conv", ".", "forward", "(", "x", ",", "pos", ",", "edge_index", ")", "\n", "\n", "\n", "", "", "class", "PointCNNConvUp", "(", "BaseConvolutionUp", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "K", "=", "None", ",", "D", "=", "None", ",", "C1", "=", "None", ",", "C2", "=", "None", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "PointCNNConvUp", ",", "self", ")", ".", "__init__", "(", "DilatedKNNNeighbourFinder", "(", "K", ",", "D", ")", ")", "\n", "\n", "self", ".", "_conv", "=", "XConv", "(", "C1", ",", "C2", ",", "3", ",", "K", ")", "\n", "\n", "", "def", "conv", "(", "self", ",", "x", ",", "pos", ",", "pos_skip", ",", "batch", ",", "batch_skip", ",", "edge_index", ")", ":", "\n", "        ", "return", "self", ".", "_conv", ".", "forward", "(", "x", ",", "(", "pos", ",", "pos_skip", ")", ",", "edge_index", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.modules.UnimodalBranch.__init__": [[263, 293], ["super().__init__", "drop_cls", "drop_cls", "isinstance", "set().intersection", "type", "set", "set"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.modules.UnimodalBranch.out_channels": [[294, 302], ["ValueError"], "methods", ["None"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.modules.UnimodalBranch.forward": [[303, 441], ["isinstance", "modules.UnimodalBranch.forward_conv", "mod_data.__class__.__class__.get_mapped_features", "modules.UnimodalBranch.forward_atomic_pool", "modules.UnimodalBranch.forward_view_pool", "modules.UnimodalBranch.forward_dropout", "modules.UnimodalBranch.forward_fusion", "isinstance", "any", "len", "modules.UnimodalBranch.forward", "mod_data.__class__.__class__.__class__", "torch.logical_or", "torch.logical_or", "torch.logical_or", "torch.logical_or", "all", "ValueError", "mod_data.__class__.__class__.x[].repeat_interleave", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "zeros.repeat_interleave.repeat_interleave.repeat_interleave", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "type", "len", "len", "enumerate", "range", "zip", "x[].repeat_interleave", "removed.keys", "range"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.modules.UnimodalBranch.forward_conv", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.get_mapped_features", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.modules.UnimodalBranch.forward_atomic_pool", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.modules.UnimodalBranch.forward_view_pool", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.modules.UnimodalBranch.forward_dropout", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.modules.UnimodalBranch.forward_fusion", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.forward", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.mock.MockDatasetConfig.keys"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.modules.UnimodalBranch.forward_conv": [[442, 480], ["isinstance", "range", "torch.utils.checkpoint.checkpoint", "torch.utils.checkpoint.checkpoint", "modules.UnimodalBranch.conv", "len", "mod_data.x.requires_grad_", "torch.BoolTensor", "torch.BoolTensor", "torch.BoolTensor", "torch.BoolTensor", "modules.UnimodalBranch.forward_conv"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.base_conv.message_passing.BaseResnetBlockDown.conv", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.modules.UnimodalBranch.forward_conv"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.modules.UnimodalBranch.forward_atomic_pool": [[481, 502], ["isinstance", "torch.utils.checkpoint.checkpoint", "torch.utils.checkpoint.checkpoint", "modules.UnimodalBranch.atomic_pool", "modules.UnimodalBranch.forward_atomic_pool", "zip"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.modules.UnimodalBranch.forward_atomic_pool"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.modules.UnimodalBranch.forward_view_pool": [[503, 541], ["isinstance", "torch.utils.checkpoint.checkpoint", "torch.utils.checkpoint.checkpoint", "modules.UnimodalBranch.view_pool", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.modules.UnimodalBranch.forward_fusion": [[542, 554], ["torch.utils.checkpoint.checkpoint", "torch.utils.checkpoint.checkpoint", "modules.UnimodalBranch.fusion"], "methods", ["None"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.modules.UnimodalBranch.forward_dropout": [[555, 563], ["modules.UnimodalBranch.drop_3d", "modules.UnimodalBranch.drop_mod", "modules.UnimodalBranch.drop_mod"], "methods", ["None"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.modules.UnimodalBranch.extra_repr": [[564, 567], ["getattr"], "methods", ["None"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.modules.IdentityBranch.__init__": [[570, 572], ["torch_points3d.core.common_modules.base_modules.BaseModule.__init__"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.modules.IdentityBranch.forward": [[573, 575], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.pooling.BimodalCSRPool.__init__": [[38, 52], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["def", "__init__", "(", "self", ",", "mode", "=", "'max'", ",", "save_last", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "BimodalCSRPool", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "mode", "in", "self", ".", "_POOLING_MODES", ",", "f\"Unsupported mode '{mode}'. Expected one of: {self._POOLING_MODES}\"", "\n", "self", ".", "_mode", "=", "mode", "\n", "\n", "# Optional mechanism to keep track of the outputs for debugging", "\n", "# or view-wise loss", "\n", "self", ".", "save_last", "=", "save_last", "\n", "self", ".", "_last_x_map", "=", "None", "\n", "self", ".", "_last_x_mod", "=", "None", "\n", "self", ".", "_last_idx", "=", "None", "\n", "self", ".", "_last_view_num", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.pooling.BimodalCSRPool.forward": [[53, 72], ["torch_scatter.segment_csr", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x_main", ",", "x_mod", ",", "x_map", ",", "csr_idx", ")", ":", "\n", "        ", "\"\"\"\n        :param x_main: N x F_main\n        :param x_mod: V x F_mod\n        :param x_map: V x F_map\n        :param csr_idx:\n        :return: x_pool\n        \"\"\"", "\n", "# Segment_CSR is \"the fastest method to apply for grouped", "\n", "# reductions.\"", "\n", "x_pool", "=", "segment_csr", "(", "x_mod", ",", "csr_idx", ",", "reduce", "=", "self", ".", "_mode", ")", "\n", "if", "self", ".", "save_last", ":", "\n", "            ", "self", ".", "_last_x_map", "=", "x_map", "\n", "self", ".", "_last_x_mod", "=", "x_mod", "\n", "self", ".", "_last_idx", "=", "torch", ".", "arange", "(", "\n", "csr_idx", ".", "shape", "[", "0", "]", "-", "1", ",", "device", "=", "x_mod", ".", "device", ")", ".", "repeat_interleave", "(", "\n", "csr_idx", "[", "1", ":", "]", "-", "csr_idx", "[", ":", "-", "1", "]", ")", "\n", "self", ".", "_last_view_num", "=", "csr_idx", "[", "1", ":", "]", "-", "csr_idx", "[", ":", "-", "1", "]", "\n", "", "return", "x_pool", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.pooling.HeuristicBimodalCSRPool.__init__": [[108, 128], ["super().__init__", "isinstance", "pooling.HeuristicBimodalCSRPool._FEATURES.index", "len", "len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["def", "__init__", "(", "self", ",", "mode", "=", "'max'", ",", "feat", "=", "0", ",", "save_last", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "HeuristicBimodalCSRPool", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "mode", "in", "self", ".", "_MODES", ",", "f\"Unsupported mode '{mode}'. Expected one of: {self._MODES}.\"", "\n", "self", ".", "_mode", "=", "mode", "\n", "self", ".", "_scatter", "=", "scatter_max", "if", "mode", "==", "'max'", "else", "scatter_min", "\n", "\n", "feat", "=", "self", ".", "_FEATURES", ".", "index", "(", "feat", ")", "if", "isinstance", "(", "feat", ",", "str", ")", "else", "feat", "\n", "assert", "feat", "<", "len", "(", "self", ".", "_FEATURES", ")", ",", "f\"Feat={feat} is too large. Expected feat<{len(self._FEATURES)}.\"", "\n", "self", ".", "_feat", "=", "feat", "\n", "\n", "# Optional mechanism to keep track of the outputs for debugging", "\n", "# or view-wise loss", "\n", "self", ".", "save_last", "=", "save_last", "\n", "self", ".", "_last_x_map", "=", "None", "\n", "self", ".", "_last_x_mod", "=", "None", "\n", "self", ".", "_last_idx", "=", "None", "\n", "self", ".", "_last_view_num", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.pooling.HeuristicBimodalCSRPool.forward": [[129, 153], ["torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "pooling.HeuristicBimodalCSRPool._scatter", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat"], ["", "def", "forward", "(", "self", ",", "x_main", ",", "x_mod", ",", "x_map", ",", "csr_idx", ")", ":", "\n", "# Compute dense indices from CSR indices", "\n", "        ", "n_groups", "=", "csr_idx", ".", "shape", "[", "0", "]", "-", "1", "\n", "dense_idx", "=", "torch", ".", "arange", "(", "n_groups", ",", "device", "=", "x_mod", ".", "device", "\n", ")", ".", "repeat_interleave", "(", "csr_idx", "[", "1", ":", "]", "-", "csr_idx", "[", ":", "-", "1", "]", ")", "\n", "\n", "# Compute the arguments for the min/max heuristic", "\n", "# NB: arg_idx will carry '-1' or 'n_points' for unseen points", "\n", "_", ",", "arg_idx", "=", "self", ".", "_scatter", "(", "\n", "x_map", "[", ":", ",", "self", ".", "_feat", "]", ",", "dense_idx", ",", "dim_size", "=", "n_groups", ")", "\n", "\n", "# Pool the modality features based on the heuristic", "\n", "# NB: append '0' to x_mod to distribute '0' to unseen points", "\n", "x_mod_0", "=", "torch", ".", "cat", "(", "(", "x_mod", ",", "torch", ".", "zeros_like", "(", "x_mod", "[", "[", "0", "]", "]", ")", ")", ")", "\n", "x_pool", "=", "x_mod_0", "[", "arg_idx", "]", "\n", "\n", "if", "self", ".", "save_last", ":", "\n", "            ", "self", ".", "_last_x_map", "=", "x_map", "\n", "self", ".", "_last_x_mod", "=", "x_mod", "\n", "self", ".", "_last_idx", "=", "torch", ".", "arange", "(", "\n", "csr_idx", ".", "shape", "[", "0", "]", "-", "1", ",", "device", "=", "x_mod", ".", "device", ")", ".", "repeat_interleave", "(", "\n", "csr_idx", "[", "1", ":", "]", "-", "csr_idx", "[", ":", "-", "1", "]", ")", "\n", "self", ".", "_last_view_num", "=", "csr_idx", "[", "1", ":", "]", "-", "csr_idx", "[", ":", "-", "1", "]", "\n", "", "return", "x_pool", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.pooling.HeuristicBimodalCSRPool.extra_repr": [[154, 156], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "f'mode={self._mode}, feat={self._FEATURES[self._feat]}, '", "f'save_last={self.save_last}'", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.pooling.GroupBimodalCSRPool.__init__": [[207, 262], ["super().__init__", "getattr", "getattr.", "torch_points3d.core.common_modules.MLP", "torch.Linear", "torch.Linear", "torch.Linear", "pooling.nearest_power_of_2", "torch_points3d.core.common_modules.MLP", "pooling.Gating"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.MLP", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.pooling.nearest_power_of_2", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.MLP"], ["def", "__init__", "(", "\n", "self", ",", "in_map", "=", "None", ",", "in_mod", "=", "None", ",", "out_mod", "=", "None", ",", "num_groups", "=", "1", ",", "\n", "use_mod", "=", "False", ",", "gating", "=", "True", ",", "group_scaling", "=", "True", ",", "save_last", "=", "False", ",", "\n", "nc_inner", "=", "32", ",", "map_encoder", "=", "'DeepSetFeat'", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "GroupBimodalCSRPool", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# Default output feature size used for embeddings", "\n", "self", ".", "nc_inner", "=", "nc_inner", "\n", "\n", "# Optional mechanism to keep track of the outputs for debugging", "\n", "# or view-wise loss", "\n", "self", ".", "save_last", "=", "save_last", "\n", "self", ".", "_last_x_map", "=", "None", "\n", "self", ".", "_last_x_mod", "=", "None", "\n", "self", ".", "_last_idx", "=", "None", "\n", "self", ".", "_last_view_num", "=", "None", "\n", "self", ".", "_last_C", "=", "None", "\n", "self", ".", "_last_A", "=", "None", "\n", "self", ".", "_last_G", "=", "None", "\n", "\n", "# Group and channel arguments", "\n", "assert", "1", "<=", "num_groups", "<=", "in_mod", ",", "f\"Number of groups must be between 1 and in_mod={in_mod}.\"", "\n", "out_mod", "=", "in_mod", "if", "out_mod", "is", "None", "else", "out_mod", "\n", "self", ".", "in_mod", "=", "in_mod", "\n", "self", ".", "out_mod", "=", "out_mod", "\n", "self", ".", "use_mod", "=", "use_mod", "\n", "self", ".", "num_groups", "=", "num_groups", "\n", "\n", "# Optional compatibilities scaling mechanism", "\n", "self", ".", "group_scaling", "=", "group_scaling", "\n", "\n", "# E_map embeds raw handcrafted mapping features", "\n", "E_map_cls", "=", "getattr", "(", "_local_modules", ",", "map_encoder", ")", "\n", "self", ".", "E_map", "=", "E_map_cls", "(", "in_map", ",", "nc_inner", ",", "**", "kwargs", ")", "\n", "\n", "# E_mod embeds the modality features in a space used as", "\n", "# values and to build attention scores in case use_mod=True", "\n", "self", ".", "E_mod", "=", "MLP", "(", "[", "in_mod", ",", "out_mod", ",", "out_mod", "]", ",", "bias", "=", "False", ")", "\n", "\n", "# E_mix combines the modality features from E_mod and", "\n", "# mapping features from E_map in case use_mod=True", "\n", "if", "self", ".", "use_mod", ":", "\n", "            ", "in_mix", "=", "nc_inner", "+", "out_mod", "\n", "out_mix", "=", "nc_inner", "\n", "mid_mix", "=", "nearest_power_of_2", "(", "(", "in_mix", "+", "out_mix", ")", "/", "2", ",", "out_mix", "*", "2", ")", "\n", "self", ".", "E_mix", "=", "MLP", "(", "[", "in_mix", ",", "mid_mix", ",", "out_mix", "]", ",", "bias", "=", "False", ")", "\n", "\n", "# E_score computes the compatibility score for each feature", "\n", "# group, these are to be further normalized to produce", "\n", "# final attention scores", "\n", "", "self", ".", "E_score", "=", "nn", ".", "Linear", "(", "nc_inner", ",", "num_groups", ",", "bias", "=", "True", ")", "\n", "\n", "# Optional gating mechanism", "\n", "self", ".", "G", "=", "Gating", "(", "num_groups", ",", "bias", "=", "True", ")", "if", "gating", "else", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.pooling.GroupBimodalCSRPool.forward": [[263, 316], ["pooling.GroupBimodalCSRPool.E_map", "pooling.GroupBimodalCSRPool.E_mod", "pooling.segment_softmax_csr", "torch_scatter.segment_csr", "pooling.GroupBimodalCSRPool.E_mix", "pooling.GroupBimodalCSRPool.E_score", "pooling.GroupBimodalCSRPool.E_score", "pooling.GroupBimodalCSRPool.G", "pooling.expand_group_feat", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "pooling.expand_group_feat", "torch_scatter.segment_csr", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.pooling.segment_softmax_csr", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.pooling.expand_group_feat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.pooling.expand_group_feat"], ["", "def", "forward", "(", "self", ",", "x_main", ",", "x_mod", ",", "x_map", ",", "csr_idx", ")", ":", "\n", "        ", "\"\"\"\n        :param x_main: N x F_main\n        :param x_mod: V x F_mod\n        :param x_map: V x F_map\n        :param csr_idx:\n        :return: x_pool\n        \"\"\"", "\n", "# Compute mapping features : V x F_map", "\n", "x_map", "=", "self", ".", "E_map", "(", "x_map", ",", "csr_idx", ")", "\n", "\n", "# Compute values : V x F_mod", "\n", "x_mod", "=", "self", ".", "E_mod", "(", "x_mod", ")", "\n", "\n", "# Compute compatibilities (unscaled scores) : V x num_groups", "\n", "if", "self", ".", "use_mod", ":", "\n", "            ", "x_mix", "=", "self", ".", "E_mix", "(", "torch", ".", "cat", "(", "[", "x_map", ",", "x_mod", "]", ",", "dim", "=", "1", ")", ")", "\n", "compatibilities", "=", "self", ".", "E_score", "(", "x_mix", ")", "\n", "", "else", ":", "\n", "            ", "compatibilities", "=", "self", ".", "E_score", "(", "x_map", ")", "\n", "\n", "# Compute attention scores : V x num_groups", "\n", "", "attentions", "=", "segment_softmax_csr", "(", "\n", "compatibilities", ",", "csr_idx", ",", "scaling", "=", "self", ".", "group_scaling", ")", "\n", "\n", "# Apply attention scores : P x F_mod", "\n", "x_pool", "=", "segment_csr", "(", "\n", "x_mod", "*", "expand_group_feat", "(", "attentions", ",", "self", ".", "num_groups", ",", "self", ".", "out_mod", ")", ",", "\n", "csr_idx", ",", "reduce", "=", "'sum'", ")", "\n", "\n", "if", "self", ".", "G", ":", "\n", "# Compute pointwise gating for each group : P x num_groups", "\n", "            ", "gating", "=", "self", ".", "G", "(", "segment_csr", "(", "\n", "compatibilities", ",", "csr_idx", ",", "reduce", "=", "'max'", ")", ")", "\n", "\n", "# Apply gating to the features : P x F_mod", "\n", "x_pool", "*=", "expand_group_feat", "(", "\n", "gating", ",", "self", ".", "num_groups", ",", "self", ".", "out_mod", ")", "\n", "\n", "# Optionally save outputs", "\n", "", "if", "self", ".", "save_last", ":", "\n", "            ", "self", ".", "_last_x_map", "=", "x_map", "\n", "self", ".", "_last_x_mod", "=", "x_mod", "\n", "self", ".", "_last_idx", "=", "torch", ".", "arange", "(", "\n", "csr_idx", ".", "shape", "[", "0", "]", "-", "1", ",", "device", "=", "x_map", ".", "device", ")", ".", "repeat_interleave", "(", "\n", "csr_idx", "[", "1", ":", "]", "-", "csr_idx", "[", ":", "-", "1", "]", ")", "\n", "self", ".", "_last_view_num", "=", "csr_idx", "[", "1", ":", "]", "-", "csr_idx", "[", ":", "-", "1", "]", "\n", "self", ".", "_last_C", "=", "compatibilities", "\n", "self", ".", "_last_A", "=", "attentions", "\n", "if", "self", ".", "G", ":", "\n", "                ", "self", ".", "_last_G", "=", "gating", "\n", "\n", "", "", "return", "x_pool", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.pooling.GroupBimodalCSRPool.extra_repr": [[317, 320], ["getattr"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", "->", "str", ":", "\n", "        ", "repr_attr", "=", "[", "'num_groups'", ",", "'use_mod'", ",", "'group_scaling'", ",", "'save_last'", "]", "\n", "return", "\"\\n\"", ".", "join", "(", "[", "f'{a}={getattr(self, a)}'", "for", "a", "in", "repr_attr", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.pooling.QKVBimodalCSRPool.__init__": [[370, 453], ["super().__init__", "torch_points3d.core.common_modules.MLP", "getattr", "getattr.", "torch_points3d.core.common_modules.MLP", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "pooling.nearest_power_of_2", "torch_points3d.core.common_modules.MLP", "pooling.nearest_power_of_2", "torch_points3d.core.common_modules.MLP", "pooling.Gating"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.MLP", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.MLP", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.pooling.nearest_power_of_2", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.MLP", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.pooling.nearest_power_of_2", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.MLP"], ["def", "__init__", "(", "\n", "self", ",", "in_main", "=", "None", ",", "in_map", "=", "None", ",", "in_mod", "=", "None", ",", "out_mod", "=", "None", ",", "\n", "num_groups", "=", "1", ",", "use_mod_q", "=", "False", ",", "use_mod_k", "=", "False", ",", "nc_qk", "=", "8", ",", "\n", "gating", "=", "True", ",", "dim_scaling", "=", "True", ",", "group_scaling", "=", "False", ",", "debug", "=", "False", ",", "\n", "save_last", "=", "False", ",", "nc_inner", "=", "32", ",", "map_encoder", "=", "'DeepSetFeat'", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "QKVBimodalCSRPool", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# Default output feature size used for embeddings", "\n", "self", ".", "nc_inner", "=", "nc_inner", "\n", "\n", "# Optional mechanism to keep track of the outputs for debugging", "\n", "# or view-wise loss", "\n", "self", ".", "save_last", "=", "save_last", "\n", "self", ".", "_last_x_map", "=", "None", "\n", "self", ".", "_last_x_mod", "=", "None", "\n", "self", ".", "_last_idx", "=", "None", "\n", "self", ".", "_last_view_num", "=", "None", "\n", "self", ".", "_last_Q", "=", "None", "\n", "self", ".", "_last_K", "=", "None", "\n", "self", ".", "_last_C", "=", "None", "\n", "self", ".", "_last_A", "=", "None", "\n", "self", ".", "_last_G", "=", "None", "\n", "self", ".", "debug", "=", "debug", "\n", "if", "debug", ":", "\n", "            ", "group_scaling", "=", "False", "\n", "dim_scaling", "=", "True", "\n", "nc_qk", "=", "1", "\n", "in_map", "=", "1", "\n", "in_mod", "=", "None", "\n", "\n", "# Group and channel arguments", "\n", "", "assert", "1", "<=", "num_groups", "<=", "in_mod", ",", "f\"Number of groups must be between 1 and in_mod={in_mod}.\"", "\n", "out_mod", "=", "in_mod", "if", "out_mod", "is", "None", "else", "out_mod", "\n", "self", ".", "in_mod", "=", "in_mod", "\n", "self", ".", "out_mod", "=", "out_mod", "\n", "self", ".", "nc_qk", "=", "nc_qk", "\n", "self", ".", "use_mod_q", "=", "use_mod_q", "\n", "self", ".", "use_mod_k", "=", "use_mod_k", "\n", "self", ".", "num_groups", "=", "num_groups", "\n", "\n", "# Optional compatibilities scaling mechanism", "\n", "self", ".", "dim_scaling", "=", "dim_scaling", "\n", "self", ".", "group_scaling", "=", "group_scaling", "\n", "\n", "# E_main embeds the main modality features in a space used as", "\n", "# queries and to build attention scores in case use_mod=True", "\n", "self", ".", "E_main", "=", "MLP", "(", "[", "in_main", ",", "nc_inner", ",", "nc_inner", "]", ",", "bias", "=", "False", ")", "\n", "\n", "# E_map embeds raw handcrafted mapping features", "\n", "E_map_cls", "=", "getattr", "(", "_local_modules", ",", "map_encoder", ")", "\n", "self", ".", "E_map", "=", "E_map_cls", "(", "in_map", ",", "nc_inner", ",", "**", "kwargs", ")", "\n", "\n", "# E_mod embeds the modality features in a space used as", "\n", "# values and to build attention scores in case use_mod=True", "\n", "self", ".", "E_mod", "=", "MLP", "(", "[", "in_mod", ",", "out_mod", ",", "out_mod", "]", ",", "bias", "=", "False", ")", "\n", "\n", "# E_mix_Q combines the modality features from E_mod and", "\n", "# mapping features from E_map in case use_mod_q=True", "\n", "if", "self", ".", "use_mod_q", ":", "\n", "            ", "in_mix", "=", "nc_inner", "+", "out_mod", "\n", "out_mix", "=", "nc_inner", "\n", "mid_mix", "=", "nearest_power_of_2", "(", "(", "in_mix", "+", "out_mix", ")", "/", "2", ",", "out_mix", "*", "2", ")", "\n", "self", ".", "E_mix_Q", "=", "MLP", "(", "\n", "[", "in_mix", ",", "mid_mix", ",", "out_mix", "]", ",", "bias", "=", "False", ")", "\n", "\n", "# Queries computation module", "\n", "", "self", ".", "Q", "=", "nn", ".", "Linear", "(", "nc_inner", ",", "nc_qk", "*", "num_groups", ",", "bias", "=", "True", ")", "\n", "\n", "# E_mix_K combines the modality features from E_mod and", "\n", "# mapping features from E_map in case use_mod_q=True", "\n", "if", "self", ".", "use_mod_k", ":", "\n", "            ", "in_mix", "=", "nc_inner", "+", "in_mod", "\n", "out_mix", "=", "nc_inner", "\n", "mid_mix", "=", "nearest_power_of_2", "(", "(", "in_mix", "+", "out_mix", ")", "/", "2", ",", "out_mix", "*", "2", ")", "\n", "self", ".", "E_mix_K", "=", "MLP", "(", "\n", "[", "in_mix", ",", "mid_mix", ",", "out_mix", "]", ",", "bias", "=", "False", ")", "\n", "\n", "# Keys computation module", "\n", "", "self", ".", "K", "=", "nn", ".", "Linear", "(", "nc_inner", ",", "nc_qk", "*", "num_groups", ",", "bias", "=", "True", ")", "\n", "\n", "# Optional gating mechanism", "\n", "self", ".", "G", "=", "Gating", "(", "num_groups", ",", "bias", "=", "True", ")", "if", "gating", "else", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.pooling.QKVBimodalCSRPool.forward": [[454, 548], ["pooling.QKVBimodalCSRPool.E_main", "pooling.QKVBimodalCSRPool.E_map", "pooling.QKVBimodalCSRPool.E_mod", "pooling.QKVBimodalCSRPool.reshape", "torch.repeat_interleave.reshape", "torch.repeat_interleave.reshape", "torch.repeat_interleave.reshape", "pooling.segment_softmax_csr", "torch_scatter.segment_csr", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "pooling.QKVBimodalCSRPool.E_mix_K", "pooling.QKVBimodalCSRPool.K", "pooling.QKVBimodalCSRPool.K", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "pooling.QKVBimodalCSRPool.E_mix_Q", "pooling.QKVBimodalCSRPool.Q", "pooling.QKVBimodalCSRPool.Q", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "pooling.QKVBimodalCSRPool.G", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "math.sqrt", "pooling.expand_group_feat", "torch_scatter.segment_csr", "pooling.expand_group_feat", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.pooling.segment_softmax_csr", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.pooling.expand_group_feat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.pooling.expand_group_feat"], ["", "def", "forward", "(", "self", ",", "x_main", ",", "x_mod", ",", "x_map", ",", "csr_idx", ")", ":", "\n", "        ", "\"\"\"\n        :param x_main: N x F_main\n        :param x_mod: V x F_mod\n        :param x_map: V x F_map\n        :param csr_idx:\n        :return: x_pool\n        \"\"\"", "\n", "# Artificial x and x_mod", "\n", "if", "self", ".", "debug", ":", "\n", "            ", "device", "=", "x_map", ".", "device", "\n", "x_map", "=", "torch", ".", "rand", "(", "(", "x_map", ".", "shape", "[", "0", "]", ",", "1", ")", ",", "device", "=", "device", ")", "\n", "idx_destroyed", "=", "torch", ".", "where", "(", "x_map", "<", "0.3", ")", "[", "0", "]", "\n", "x_mod", "[", "idx_destroyed", "]", "=", "torch", ".", "rand", "(", "\n", "(", "idx_destroyed", ".", "shape", "[", "0", "]", ",", "*", "(", "x_mod", ".", "shape", "[", "1", ":", "]", ")", ")", ",", "device", "=", "device", ")", "\n", "\n", "# Compute main features : P x F_main", "\n", "", "x_main", "=", "self", ".", "E_main", "(", "x_main", ")", "\n", "\n", "# Compute mapping features : V x F_map", "\n", "x_map", "=", "self", ".", "E_map", "(", "x_map", ",", "csr_idx", ")", "\n", "\n", "# Compute modality features : V x F_mod", "\n", "x_mod", "=", "self", ".", "E_mod", "(", "x_mod", ")", "\n", "\n", "# Compute keys : V x (D x num_groups)", "\n", "if", "self", ".", "use_mod_k", ":", "\n", "            ", "x_mix", "=", "self", ".", "E_mix_K", "(", "torch", ".", "cat", "(", "[", "x_map", ",", "x_mod", "]", ",", "dim", "=", "1", ")", ")", "\n", "keys", "=", "self", ".", "K", "(", "x_mix", ")", "\n", "", "else", ":", "\n", "            ", "keys", "=", "self", ".", "K", "(", "x_map", ")", "\n", "\n", "# Compute queries : V x (D x num_groups)", "\n", "", "if", "self", ".", "use_mod_q", ":", "\n", "# Expand x_main to views : V x F_main", "\n", "            ", "x_main_q", "=", "torch", ".", "repeat_interleave", "(", "\n", "x_main", ",", "csr_idx", "[", "1", ":", "]", "-", "csr_idx", "[", ":", "-", "1", "]", ",", "dim", "=", "0", ")", "\n", "\n", "# Compute view-wise queries : V x (D x num_groups)", "\n", "x_mix", "=", "self", ".", "E_mix_Q", "(", "torch", ".", "cat", "(", "[", "x_main_q", ",", "x_mod", "]", ",", "dim", "=", "1", ")", ")", "\n", "keys", "=", "self", ".", "Q", "(", "x_mix", ")", "\n", "", "else", ":", "\n", "# Compute pointwise queries : N x (D x num_groups)", "\n", "            ", "queries", "=", "self", ".", "Q", "(", "x_main", ")", "\n", "\n", "# Expand queries to views : V x (D x num_groups)", "\n", "queries", "=", "torch", ".", "repeat_interleave", "(", "\n", "queries", ",", "csr_idx", "[", "1", ":", "]", "-", "csr_idx", "[", ":", "-", "1", "]", ",", "dim", "=", "0", ")", "\n", "\n", "# Compute compatibility scores : V x num_groups", "\n", "", "keys_per_group", "=", "keys", ".", "reshape", "(", "\n", "keys", ".", "shape", "[", "0", "]", ",", "self", ".", "num_groups", ",", "self", ".", "nc_qk", ")", "\n", "queries_per_group", "=", "queries", ".", "reshape", "(", "\n", "queries", ".", "shape", "[", "0", "]", ",", "self", ".", "num_groups", ",", "self", ".", "nc_qk", ")", "\n", "compatibilities", "=", "(", "keys_per_group", "*", "queries_per_group", ")", ".", "sum", "(", "dim", "=", "2", ")", "\n", "\n", "# Optionally scale compatibilities by the number of key features", "\n", "if", "self", ".", "dim_scaling", ":", "\n", "            ", "compatibilities", "=", "compatibilities", "/", "math", ".", "sqrt", "(", "self", ".", "nc_qk", ")", "\n", "\n", "# Compute attention scores : V x num_groups", "\n", "", "attentions", "=", "segment_softmax_csr", "(", "\n", "compatibilities", ",", "csr_idx", ",", "scaling", "=", "self", ".", "group_scaling", ")", "\n", "\n", "# Apply attention scores : P x F_mod", "\n", "x_pool", "=", "segment_csr", "(", "\n", "x_mod", "*", "expand_group_feat", "(", "attentions", ",", "self", ".", "num_groups", ",", "self", ".", "out_mod", ")", ",", "\n", "csr_idx", ",", "reduce", "=", "'sum'", ")", "\n", "\n", "if", "self", ".", "G", ":", "\n", "# Compute pointwise gating for each group : P x num_groups", "\n", "            ", "gating", "=", "self", ".", "G", "(", "segment_csr", "(", "\n", "compatibilities", ",", "csr_idx", ",", "reduce", "=", "'max'", ")", ")", "\n", "\n", "# Apply gating to the features : P x F_mod", "\n", "x_pool", "=", "x_pool", "*", "expand_group_feat", "(", "\n", "gating", ",", "self", ".", "num_groups", ",", "self", ".", "out_mod", ")", "\n", "\n", "# Optionally save outputs", "\n", "", "if", "self", ".", "save_last", ":", "\n", "            ", "self", ".", "_last_x_map", "=", "x_map", "\n", "self", ".", "_last_x_mod", "=", "x_mod", "\n", "self", ".", "_last_idx", "=", "torch", ".", "arange", "(", "\n", "csr_idx", ".", "shape", "[", "0", "]", "-", "1", ",", "device", "=", "x_map", ".", "device", ")", ".", "repeat_interleave", "(", "\n", "csr_idx", "[", "1", ":", "]", "-", "csr_idx", "[", ":", "-", "1", "]", ")", "\n", "self", ".", "_last_view_num", "=", "csr_idx", "[", "1", ":", "]", "-", "csr_idx", "[", ":", "-", "1", "]", "\n", "self", ".", "_last_K", "=", "keys", "\n", "self", ".", "_last_Q", "=", "queries", "\n", "self", ".", "_last_C", "=", "compatibilities", "\n", "self", ".", "_last_A", "=", "attentions", "\n", "if", "self", ".", "G", ":", "\n", "                ", "self", ".", "_last_G", "=", "gating", "\n", "\n", "", "", "return", "x_pool", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.pooling.QKVBimodalCSRPool.extra_repr": [[549, 552], ["getattr"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", "->", "str", ":", "\n", "        ", "repr_attr", "=", "[", "'dim_scaling'", ",", "'group_scaling'", ",", "'save_last'", "]", "\n", "return", "\"\\n\"", ".", "join", "(", "[", "f'{a}={getattr(self, a)}'", "for", "a", "in", "repr_attr", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.pooling.MinMaxDiffSetFeat.__init__": [[563, 576], ["super().__init__", "torch_points3d.core.common_modules.MLP"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.MLP"], ["def", "__init__", "(", "\n", "self", ",", "d_in", ",", "d_out", ",", "use_min", "=", "True", ",", "use_max", "=", "True", ",", "use_num", "=", "False", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "MinMaxDiffSetFeat", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# Initialize the MLPs", "\n", "self", ".", "d_in", "=", "d_in", "\n", "self", ".", "d_out", "=", "d_out", "\n", "self", ".", "use_min", "=", "use_min", "\n", "self", ".", "use_max", "=", "use_max", "\n", "self", ".", "use_num", "=", "use_num", "\n", "in_mlp", "=", "d_in", "*", "(", "1", "+", "self", ".", "use_min", "+", "self", ".", "use_max", ")", "+", "self", ".", "use_num", "\n", "self", ".", "mlp", "=", "MLP", "(", "[", "in_mlp", ",", "d_out", ",", "d_out", "]", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.pooling.MinMaxDiffSetFeat.forward": [[577, 598], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "pooling.MinMaxDiffSetFeat.mlp", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.empty.repeat_interleave", "torch.empty.repeat_interleave", "torch.empty.repeat_interleave", "torch.empty.view", "torch.empty.view", "torch.empty.view", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "pooling.segment_gather_csr", "pooling.segment_gather_csr"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.pooling.segment_gather_csr", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.pooling.segment_gather_csr"], ["", "def", "forward", "(", "self", ",", "x", ",", "csr_idx", ")", ":", "\n", "# Optionally expand x with difference-to-min or", "\n", "# difference-to-max or group size features", "\n", "        ", "if", "self", ".", "use_min", ":", "\n", "            ", "x_map_min", "=", "x", "-", "segment_gather_csr", "(", "x", ",", "csr_idx", ",", "reduce", "=", "'min'", ")", "\n", "", "else", ":", "\n", "            ", "x_map_min", "=", "torch", ".", "empty", "(", "0", ",", "device", "=", "x", ".", "device", ")", "\n", "", "if", "self", ".", "use_max", ":", "\n", "            ", "x_map_max", "=", "x", "-", "segment_gather_csr", "(", "x", ",", "csr_idx", ",", "reduce", "=", "'max'", ")", "\n", "", "else", ":", "\n", "            ", "x_map_max", "=", "torch", ".", "empty", "(", "0", ",", "device", "=", "x", ".", "device", ")", "\n", "", "if", "self", ".", "use_num", ":", "\n", "# Heuristic to normalize in [0,1]", "\n", "            ", "x_map_num", "=", "torch", ".", "sqrt", "(", "1", "/", "(", "csr_idx", "[", "1", ":", "]", "-", "csr_idx", "[", ":", "-", "1", "]", "+", "1e-3", ")", ")", "\n", "x_map_num", "=", "x_map_num", ".", "repeat_interleave", "(", "csr_idx", "[", "1", ":", "]", "-", "csr_idx", "[", ":", "-", "1", "]", ")", "\n", "x_map_num", "=", "x_map_num", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "x_map_num", "=", "torch", ".", "empty", "(", "0", ",", "device", "=", "x", ".", "device", ")", "\n", "", "x_out", "=", "torch", ".", "cat", "(", "[", "x", ",", "x_map_min", ",", "x_map_max", ",", "x_map_num", "]", ",", "dim", "=", "1", ")", "\n", "x_out", "=", "self", ".", "mlp", "(", "x_out", ")", "\n", "return", "x_out", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.pooling.MinMaxDiffSetFeat.extra_repr": [[599, 602], ["getattr"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", "->", "str", ":", "\n", "        ", "repr_attr", "=", "[", "'use_min'", ",", "'use_max'", ",", "'use_num'", "]", "\n", "return", "\"\\n\"", ".", "join", "(", "[", "f'{a}={getattr(self, a)}'", "for", "a", "in", "repr_attr", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.pooling.DeepSetFeat.__init__": [[616, 657], ["super().__init__", "pool.split.split.split", "all", "torch_points3d.core.common_modules.MLP", "torch_points3d.core.common_modules.MLP", "torch_points3d.core.common_modules.MLP", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "torch_scatter.segment_csr", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "NotImplementedError", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.split", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.MLP", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.MLP", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.MLP", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat"], ["def", "__init__", "(", "\n", "self", ",", "d_in", ",", "d_out", ",", "pool", "=", "'max'", ",", "fusion", "=", "'concatenation'", ",", "\n", "use_num", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "DeepSetFeat", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# Initialize the set-pooling mechanism to aggregate features of", "\n", "# elements-level features to set-level features", "\n", "pool", "=", "pool", ".", "split", "(", "'_'", ")", "\n", "assert", "all", "(", "[", "p", "in", "self", ".", "_POOLING_MODES", "for", "p", "in", "pool", "]", ")", ",", "f\"Unsupported pool='{pool}'. Expected elements of: \"", "f\"{self._POOLING_MODES}\"", "\n", "self", ".", "f_pool", "=", "lambda", "a", ",", "b", ":", "torch", ".", "cat", "(", "[", "\n", "segment_csr", "(", "a", ",", "b", ",", "reduce", "=", "p", ")", "for", "p", "in", "pool", "]", ",", "dim", "=", "-", "1", ")", "\n", "self", ".", "pool", "=", "pool", "\n", "\n", "# Initialize the fusion mechanism to merge set-level and", "\n", "# element-level features", "\n", "if", "fusion", "==", "'residual'", ":", "\n", "            ", "self", ".", "f_fusion", "=", "lambda", "a", ",", "b", ":", "a", "+", "b", "\n", "", "elif", "fusion", "==", "'concatenation'", ":", "\n", "            ", "self", ".", "f_fusion", "=", "lambda", "a", ",", "b", ":", "torch", ".", "cat", "(", "(", "a", ",", "b", ")", ",", "dim", "=", "-", "1", ")", "\n", "", "elif", "fusion", "==", "'both'", ":", "\n", "            ", "self", ".", "f_fusion", "=", "lambda", "a", ",", "b", ":", "torch", ".", "cat", "(", "(", "a", ",", "a", "+", "b", ")", ",", "dim", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\n", "f\"Unknown fusion='{fusion}'. Please choose among \"", "\n", "f\"supported modes: {self._FUSION_MODES}.\"", ")", "\n", "", "self", ".", "fusion", "=", "fusion", "\n", "\n", "# Initialize the MLPs", "\n", "self", ".", "d_in", "=", "d_in", "\n", "self", ".", "d_out", "=", "d_out", "\n", "self", ".", "use_num", "=", "use_num", "\n", "self", ".", "mlp_elt_1", "=", "MLP", "(", "\n", "[", "d_in", ",", "d_out", ",", "d_out", "]", ",", "bias", "=", "False", ")", "\n", "in_set_mlp", "=", "d_out", "*", "len", "(", "self", ".", "pool", ")", "+", "self", ".", "use_num", "\n", "self", ".", "mlp_set", "=", "MLP", "(", "\n", "[", "in_set_mlp", ",", "d_out", ",", "d_out", "]", ",", "bias", "=", "False", ")", "\n", "in_last_mlp", "=", "d_out", "if", "fusion", "==", "'residual'", "else", "d_out", "*", "2", "\n", "self", ".", "mlp_elt_2", "=", "MLP", "(", "\n", "[", "in_last_mlp", ",", "d_out", ",", "d_out", "]", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.pooling.DeepSetFeat.forward": [[658, 670], ["pooling.DeepSetFeat.mlp_elt_1", "pooling.DeepSetFeat.f_pool", "pooling.DeepSetFeat.mlp_set", "pooling.gather_csr", "pooling.DeepSetFeat.f_fusion", "pooling.DeepSetFeat.mlp_elt_2", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.sqrt.view", "torch.sqrt.view", "torch.sqrt.view"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.pooling.gather_csr", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat"], ["", "def", "forward", "(", "self", ",", "x", ",", "csr_idx", ")", ":", "\n", "        ", "x", "=", "self", ".", "mlp_elt_1", "(", "x", ")", "\n", "x_set", "=", "self", ".", "f_pool", "(", "x", ",", "csr_idx", ")", "\n", "if", "self", ".", "use_num", ":", "\n", "# Heuristic to normalize in [0,1]", "\n", "            ", "set_num", "=", "torch", ".", "sqrt", "(", "1", "/", "(", "csr_idx", "[", "1", ":", "]", "-", "csr_idx", "[", ":", "-", "1", "]", "+", "1e-3", ")", ")", "\n", "x_set", "=", "torch", ".", "cat", "(", "(", "x_set", ",", "set_num", ".", "view", "(", "-", "1", ",", "1", ")", ")", ",", "dim", "=", "1", ")", "\n", "", "x_set", "=", "self", ".", "mlp_set", "(", "x_set", ")", "\n", "x_set", "=", "gather_csr", "(", "x_set", ",", "csr_idx", ")", "\n", "x_out", "=", "self", ".", "f_fusion", "(", "x", ",", "x_set", ")", "\n", "x_out", "=", "self", ".", "mlp_elt_2", "(", "x_out", ")", "\n", "return", "x_out", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.pooling.DeepSetFeat.extra_repr": [[671, 674], ["getattr"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", "->", "str", ":", "\n", "        ", "repr_attr", "=", "[", "'pool'", ",", "'fusion'", ",", "'use_num'", "]", "\n", "return", "\"\\n\"", ".", "join", "(", "[", "f'{a}={getattr(self, a)}'", "for", "a", "in", "repr_attr", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.pooling.MLPSetFeat.__init__": [[680, 685], ["super().__init__", "torch_points3d.core.common_modules.MLP"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.MLP"], ["def", "__init__", "(", "self", ",", "d_in", ",", "d_out", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "MLPSetFeat", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "d_in", "=", "d_in", "\n", "self", ".", "d_out", "=", "d_out", "\n", "self", ".", "mlp", "=", "MLP", "(", "[", "d_in", ",", "d_out", ",", "d_out", "]", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.pooling.MLPSetFeat.forward": [[686, 688], ["pooling.MLPSetFeat.mlp"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "csr_idx", ")", ":", "\n", "        ", "return", "self", ".", "mlp", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.pooling.Gating.__init__": [[692, 704], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.tanh_", "torch.tanh_", "torch.tanh_", "torch.tanh_", "torch.tanh_", "torch.tanh_", "torch.tanh_", "torch.tanh_", "torch.tanh_", "ValueError", "torch.relu", "torch.relu", "torch.relu", "torch.sigmoid_", "torch.sigmoid_", "torch.sigmoid_", "torch.sigmoid_", "torch.sigmoid_", "torch.sigmoid_", "torch.sigmoid_", "torch.sigmoid_", "torch.sigmoid_"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["def", "__init__", "(", "self", ",", "num_groups", ",", "weight", "=", "True", ",", "bias", "=", "True", ",", "activation", "=", "'tanh+'", ")", ":", "\n", "        ", "super", "(", "Gating", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_groups", "=", "num_groups", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "1", ",", "num_groups", ")", ")", "if", "weight", "else", "None", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "num_groups", ")", ")", "if", "bias", "else", "None", "\n", "if", "activation", "==", "'tanh+'", ":", "\n", "            ", "self", ".", "activation", "=", "lambda", "x", ":", "torch", ".", "tanh_", "(", "F", ".", "relu", "(", "x", ",", "inplace", "=", "True", ")", ")", "\n", "", "elif", "activation", "==", "'sigmoid'", ":", "\n", "            ", "self", ".", "activation", "=", "lambda", "x", ":", "torch", ".", "sigmoid_", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f\"Activation '{activation}' not supported for Gating\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.pooling.Gating.forward": [[705, 712], ["torch.tanh().view().squeeze", "torch.tanh().view().squeeze", "torch.tanh().view().squeeze", "torch.tanh().view().squeeze", "torch.tanh().view().squeeze", "torch.tanh().view().squeeze", "torch.tanh().view().squeeze", "torch.tanh().view().squeeze", "torch.tanh().view().squeeze", "torch.tanh().view", "torch.tanh().view", "torch.tanh().view", "torch.tanh().view", "torch.tanh().view", "torch.tanh().view", "torch.tanh().view", "torch.tanh().view", "torch.tanh().view", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.relu", "torch.relu", "torch.relu"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "weight", "is", "not", "None", ":", "\n", "            ", "x", "*=", "self", ".", "weight", "\n", "", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "x", "+=", "self", ".", "bias", "\n", "", "return", "torch", ".", "tanh", "(", "\n", "F", ".", "relu", "(", "x", ",", "inplace", "=", "True", ")", ")", ".", "view", "(", "-", "1", ",", "self", ".", "num_groups", ")", ".", "squeeze", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.pooling.Gating.extra_repr": [[713, 715], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "f'num_groups={self.num_groups}, '", "f'weight={self.weight is not None}, bias={self.bias is not None}'", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.pooling.nearest_power_of_2": [[718, 735], ["int"], "function", ["None"], ["", "", "def", "nearest_power_of_2", "(", "x", ",", "min_power", "=", "16", ")", ":", "\n", "    ", "\"\"\"Local helper to find the nearest power of 2 of a given number.\n    The `min_power` parameter puts a minimum threshold for the returned\n    power.\n    \"\"\"", "\n", "x", "=", "int", "(", "x", ")", "\n", "\n", "if", "x", "<", "min_power", ":", "\n", "        ", "return", "min_power", "\n", "\n", "", "previous_power", "=", "2", "**", "(", "(", "x", "-", "1", ")", ".", "bit_length", "(", ")", "-", "1", ")", "\n", "next_power", "=", "2", "**", "(", "x", "-", "1", ")", ".", "bit_length", "(", ")", "\n", "\n", "if", "x", "-", "previous_power", "<", "next_power", "-", "x", ":", "\n", "        ", "return", "previous_power", "\n", "", "else", ":", "\n", "        ", "return", "next_power", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.pooling.group_sizes": [[737, 746], ["torch.full", "torch.full", "torch.full", "math.floor", "torch.arange", "torch.arange", "torch.arange", "torch.full.sum"], "function", ["None"], ["", "", "def", "group_sizes", "(", "num_elements", ",", "num_groups", ")", ":", "\n", "    ", "\"\"\"Local helper to compute the group sizes, when distributing\n    num_elements across num_groups while keeping group sizes as close\n    as possible.\"\"\"", "\n", "sizes", "=", "torch", ".", "full", "(", "\n", "(", "num_groups", ",", ")", ",", "math", ".", "floor", "(", "num_elements", "/", "num_groups", ")", ",", "\n", "dtype", "=", "torch", ".", "long", ")", "\n", "sizes", "+=", "torch", ".", "arange", "(", "num_groups", ")", "<", "num_elements", "-", "sizes", ".", "sum", "(", ")", "\n", "return", "sizes", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.pooling.expand_group_feat": [[748, 756], ["A.repeat_interleave.view", "group_sizes().to", "A.repeat_interleave.repeat_interleave", "pooling.group_sizes"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.pooling.group_sizes"], ["", "def", "expand_group_feat", "(", "A", ",", "num_groups", ",", "num_channels", ")", ":", "\n", "    ", "if", "num_groups", "==", "1", ":", "\n", "        ", "A", "=", "A", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "", "elif", "num_groups", "<", "num_channels", ":", "\n", "# Expand compatibilities to features of the same group", "\n", "        ", "sizes", "=", "group_sizes", "(", "num_channels", ",", "num_groups", ")", ".", "to", "(", "A", ".", "device", ")", "\n", "A", "=", "A", ".", "repeat_interleave", "(", "sizes", ",", "dim", "=", "1", ")", "\n", "", "return", "A", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.pooling.segment_softmax_csr": [[758, 811], ["torch.arange().to().repeat_interleave", "torch.arange().to().repeat_interleave", "torch.arange().to().repeat_interleave", "torch_scatter.segment_csr", "torch_scatter.segment_csr.gather", "centered_scores.exp", "torch_scatter.segment_csr", "torch_scatter.segment_csr.add_().gather", "centered_scores.exp.div", "torch.is_floating_point", "torch.is_floating_point", "torch.is_floating_point", "ValueError", "csr_idx.dim", "ValueError", "src.dim", "NotImplementedError", "src.dim", "dense_idx.view().repeat.view().repeat", "num_per_index.float().sqrt", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.arange().to", "torch.arange().to", "torch.arange().to", "src.dim", "num_per_src_element.view().repeat.view().repeat", "torch_scatter.segment_csr.add_", "dense_idx.view().repeat.view", "num_per_index.float", "torch.arange", "torch.arange", "torch.arange", "num_per_src_element.view().repeat.view"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.gathering.gather", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.gathering.gather", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to"], ["", "@", "torch", ".", "jit", ".", "script", "\n", "def", "segment_softmax_csr", "(", "src", ":", "torch", ".", "Tensor", ",", "csr_idx", ":", "torch", ".", "Tensor", ",", "\n", "eps", ":", "float", "=", "1e-12", ",", "scaling", ":", "bool", "=", "False", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"Equivalent of scatter_softmax but for CSR indices.\n    Based on: torch_scatter/composite/softmax.py\n\n    The `scaling` option allows for scaled softmax computation, where\n    `scaling='True'` scales by the number of items in each index group.\n    \"\"\"", "\n", "if", "not", "torch", ".", "is_floating_point", "(", "src", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "'`segment_csr_softmax` can only be computed over tensors with '", "\n", "'floating point data types.'", ")", "\n", "", "if", "csr_idx", ".", "dim", "(", ")", "!=", "1", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "'`segment_csr_softmax` can only be computed over 1D CSR indices.'", ")", "\n", "", "if", "src", ".", "dim", "(", ")", ">", "2", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\n", "'`segment_csr_softmax` can only be computed over 1D or 2D source '", "\n", "'tensors.'", ")", "\n", "\n", "# Compute dense indices from CSR indices", "\n", "", "n_groups", "=", "csr_idx", ".", "shape", "[", "0", "]", "-", "1", "\n", "dense_idx", "=", "torch", ".", "arange", "(", "n_groups", ")", ".", "to", "(", "src", ".", "device", ")", ".", "repeat_interleave", "(", "\n", "csr_idx", "[", "1", ":", "]", "-", "csr_idx", "[", ":", "-", "1", "]", ")", "\n", "if", "src", ".", "dim", "(", ")", ">", "1", ":", "\n", "        ", "dense_idx", "=", "dense_idx", ".", "view", "(", "-", "1", ",", "1", ")", ".", "repeat", "(", "1", ",", "src", ".", "shape", "[", "1", "]", ")", "\n", "\n", "# Center scores maxima near 1 for computation precision", "\n", "", "max_value_per_index", "=", "segment_csr", "(", "src", ",", "csr_idx", ",", "reduce", "=", "'max'", ")", "\n", "max_per_src_element", "=", "max_value_per_index", ".", "gather", "(", "0", ",", "dense_idx", ")", "\n", "centered_scores", "=", "src", "-", "max_per_src_element", "\n", "\n", "# Optionally scale scores by the sqrt of index group sizes", "\n", "if", "scaling", ":", "\n", "        ", "num_per_index", "=", "(", "csr_idx", "[", "1", ":", "]", "-", "csr_idx", "[", ":", "-", "1", "]", ")", "\n", "sqrt_num_per_index", "=", "num_per_index", ".", "float", "(", ")", ".", "sqrt", "(", ")", "\n", "num_per_src_element", "=", "torch", ".", "repeat_interleave", "(", "\n", "sqrt_num_per_index", ",", "num_per_index", ")", "\n", "if", "src", ".", "dim", "(", ")", ">", "1", ":", "\n", "            ", "num_per_src_element", "=", "num_per_src_element", ".", "view", "(", "-", "1", ",", "1", ")", ".", "repeat", "(", "\n", "1", ",", "src", ".", "shape", "[", "1", "]", ")", "\n", "\n", "", "centered_scores", "/=", "num_per_src_element", "\n", "\n", "# Compute the numerators", "\n", "", "centered_scores_exp", "=", "centered_scores", ".", "exp", "(", ")", "\n", "\n", "# Compute the denominators", "\n", "sum_per_index", "=", "segment_csr", "(", "centered_scores_exp", ",", "csr_idx", ",", "reduce", "=", "'sum'", ")", "\n", "normalizing_constants", "=", "sum_per_index", ".", "add_", "(", "eps", ")", ".", "gather", "(", "0", ",", "dense_idx", ")", "\n", "\n", "return", "centered_scores_exp", ".", "div", "(", "normalizing_constants", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.pooling.gather_csr": [[813, 842], ["torch.arange().to().repeat_interleave", "torch.arange().to().repeat_interleave", "torch.arange().to().repeat_interleave", "src.gather", "torch.is_floating_point", "torch.is_floating_point", "torch.is_floating_point", "ValueError", "csr_idx.dim", "ValueError", "src.dim", "NotImplementedError", "src.dim", "dense_idx.view().repeat.view().repeat", "torch.arange().to", "torch.arange().to", "torch.arange().to", "dense_idx.view().repeat.view", "torch.arange", "torch.arange", "torch.arange"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.gathering.gather", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to"], ["", "@", "torch", ".", "jit", ".", "script", "\n", "def", "gather_csr", "(", "src", ":", "torch", ".", "Tensor", ",", "csr_idx", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"Gather index-level src values into element-level values based on\n    CSR indices.\n\n    When applied to the output or segment_csr, this redistributes the\n    reduced values to the appropriate segment_csr input elements.\n    \"\"\"", "\n", "if", "not", "torch", ".", "is_floating_point", "(", "src", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "'`gather_csr` can only be computed over tensors with '", "\n", "'floating point data types.'", ")", "\n", "", "if", "csr_idx", ".", "dim", "(", ")", "!=", "1", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "'`gather_csr` can only be computed over 1D CSR indices.'", ")", "\n", "", "if", "src", ".", "dim", "(", ")", ">", "2", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\n", "'`gather_csr` can only be computed over 1D or 2D source '", "\n", "'tensors.'", ")", "\n", "\n", "# Compute dense indices from CSR indices", "\n", "", "n_groups", "=", "csr_idx", ".", "shape", "[", "0", "]", "-", "1", "\n", "dense_idx", "=", "torch", ".", "arange", "(", "n_groups", ")", ".", "to", "(", "src", ".", "device", ")", ".", "repeat_interleave", "(", "\n", "csr_idx", "[", "1", ":", "]", "-", "csr_idx", "[", ":", "-", "1", "]", ")", "\n", "if", "src", ".", "dim", "(", ")", ">", "1", ":", "\n", "        ", "dense_idx", "=", "dense_idx", ".", "view", "(", "-", "1", ",", "1", ")", ".", "repeat", "(", "1", ",", "src", ".", "shape", "[", "1", "]", ")", "\n", "\n", "# Center scores maxima near 1 for computation precision", "\n", "", "return", "src", ".", "gather", "(", "0", ",", "dense_idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.pooling.segment_gather_csr": [[844, 857], ["torch_scatter.segment_csr", "pooling.gather_csr"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.pooling.gather_csr"], ["", "@", "torch", ".", "jit", ".", "script", "\n", "def", "segment_gather_csr", "(", "src", ":", "torch", ".", "Tensor", ",", "csr_idx", ":", "torch", ".", "Tensor", ",", "\n", "reduce", ":", "str", "=", "'sum'", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"Compute the reduced value between same-index elements, for CSR\n    indices, and redistribute them to input elements.\n    \"\"\"", "\n", "# Reduce with segment_csr", "\n", "reduced_per_index", "=", "segment_csr", "(", "src", ",", "csr_idx", ",", "reduce", "=", "reduce", ")", "\n", "\n", "# Expand with gather_csr", "\n", "reduced_per_src_element", "=", "gather_csr", "(", "reduced_per_index", ",", "csr_idx", ")", "\n", "\n", "return", "reduced_per_src_element", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.dropout.ModalityDropout.__init__": [[7, 11], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "p", "=", "0", ")", ":", "\n", "        ", "super", "(", "ModalityDropout", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "0", "<=", "p", "<=", "1", ",", "f'p must be in [0, 1].'", "\n", "self", ".", "p", "=", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.dropout.ModalityDropout.forward": [[12, 16], ["x.mul", "x.mul", "torch.rand", "torch.rand", "torch.rand", "torch.rand"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "not", "self", ".", "training", ":", "\n", "            ", "return", "x", ".", "mul", "(", "1", "/", "(", "1", "-", "self", ".", "p", ")", ")", "\n", "", "return", "x", ".", "mul", "(", "torch", ".", "rand", "(", "1", ")", ">", "self", ".", "p", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.no3d.No3D.__init__": [[22, 52], ["torch_points3d.models.base_model.BaseModel.__init__", "torch_points3d.applications.multimodal.no3d.No3DEncoder", "hasattr", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["# UnwrappedUnetBasedModel init", "\n", "        ", "super", "(", "No3DEncoder", ",", "self", ")", ".", "__init__", "(", "\n", "model_config", ",", "model_type", ",", "dataset", ",", "modules", ")", "\n", "\n", "# Make sure the model is multimodal and has no 3D. Note that", "\n", "# the BackboneBasedModel.__init__ carries most of the required", "\n", "# initialization.", "\n", "assert", "self", ".", "is_multimodal", ",", "f\"No3DEncoder should carry at least one non-3D modality.\"", "\n", "assert", "self", ".", "no_3d_conv", ",", "f\"No3DEncoder should not have 3D-specific modules.\"", "\n", "\n", "# Recover size of output features", "\n", "default_output_nc", "=", "kwargs", ".", "get", "(", "\"default_output_nc\"", ",", "None", ")", "\n", "if", "not", "default_output_nc", ":", "\n", "            ", "mod_out_nc_list", "=", "[", "extract_output_nc", "(", "getattr", "(", "\n", "model_config", ".", "down_conv", ",", "m", ")", ")", "for", "m", "in", "self", ".", "modalities", "]", "\n", "assert", "all", "(", "o", "==", "mod_out_nc_list", "[", "0", "]", "for", "o", "in", "mod_out_nc_list", ")", ",", "f\"Expected all modality branches outputs to have the same \"", "f\"feature size but got {mod_out_nc_list} sizes instead.\"", "\n", "default_output_nc", "=", "mod_out_nc_list", "[", "0", "]", "\n", "\n", "", "self", ".", "_output_nc", "=", "default_output_nc", "\n", "\n", "# Set the MLP head if any", "\n", "self", ".", "_has_mlp_head", "=", "False", "\n", "if", "\"output_nc\"", "in", "kwargs", ":", "\n", "            ", "self", ".", "_has_mlp_head", "=", "True", "\n", "self", ".", "_output_nc", "=", "kwargs", "[", "\"output_nc\"", "]", "\n", "self", ".", "mlp", "=", "MLP", "(", "\n", "[", "default_output_nc", ",", "self", ".", "output_nc", "]", ",", "activation", "=", "torch", ".", "nn", ".", "ReLU", "(", ")", ",", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.no3d.No3D.set_input": [[62, 74], ["hasattr", "data.batch.squeeze", "hasattr", "data.y.to"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to"], ["\n", "", "def", "_set_input", "(", "self", ",", "data", ":", "MMData", ")", ":", "\n", "        ", "\"\"\"Unpack input data from the dataloader and perform necessary\n        pre-processing steps.\n\n        Parameters\n        -----------\n        data: MMData object\n        \"\"\"", "\n", "data", "=", "data", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "input", "=", "{", "\n", "'x_3d'", ":", "getattr", "(", "data", ",", "'x'", ",", "None", ")", ",", "\n", "'x_seen'", ":", "None", ",", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.no3d.No3D.forward": [[75, 155], ["no3d.No3D.backbone", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "features.to.to.to", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "no3d.No3D.head", "torch.any", "torch.any", "torch.any", "torch.any", "torch.any", "torch.any", "torch.any", "torch.any", "torch.any", "torch.nll_loss", "torch.nll_loss", "torch.nll_loss", "pykeops.torch.LazyTensor", "pykeops.torch.LazyTensor", "d_keops.argmin", "[].squeeze", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "no3d.No3D.head", "f_map.T.reshape().permute.T.reshape().permute.T.reshape().permute", "no3d.No3D.head", "f_map.T.reshape().permute.T.reshape().permute.permute().reshape", "f_map.T.reshape().permute.T.reshape().permute.T.reshape", "f_map.T.reshape().permute.T.reshape().permute.permute"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to"], ["'modalities'", ":", "data", ".", "modalities", "}", "\n", "if", "data", ".", "pos", "is", "not", "None", ":", "\n", "            ", "self", ".", "xyz", "=", "data", ".", "pos", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "data", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Run forward pass. Expects a MMData object for input, with\n        3D Data and multimodal data and mappings. Although the\n        No3DEncoder model does not apply any convolution modules\n        directly on the 3D points, it still requires a 3D points Data\n        object with a 'pos' attribute as input, to be able to output\n        these very same points populated with modality-generated\n        features.\n\n        Parameters\n        -----------\n        data: MMData object\n\n        Returns\n        --------\n        data: Data object\n            - pos [N, 3] (coords or real pos if xyz is in data)\n            - x [N, output_nc]\n        \"\"\"", "\n", "self", ".", "_set_input", "(", "data", ")", "\n", "mm_data_dict", "=", "self", ".", "input", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "down_modules", ")", ")", ":", "\n", "            ", "mm_data_dict", "=", "self", ".", "down_modules", "[", "i", "]", "(", "mm_data_dict", ")", "\n", "\n", "# Discard the modalities used in the down modules, only", "\n", "# 3D point features are expected to be used in subsequent", "\n", "# modules. Restore the input Data object equipped with the", "\n", "# proper point positions and modality-generated features.", "\n", "", "out", "=", "Batch", "(", "\n", "x", "=", "mm_data_dict", "[", "'x_3d'", "]", ",", "pos", "=", "self", ".", "xyz", ",", "seen", "=", "mm_data_dict", "[", "'x_seen'", "]", ")", "\n", "\n", "# TODO: this always passes the modality feature maps in the", "\n", "#  output dictionary. May not be relevant at inference time,", "\n", "#  when we would rather save memory and discard unnecessary", "\n", "#  data. Besides, this behavior for NoDEncoder is not consistent", "\n", "#  with the multimodal UNet, need to consider homogenizing.", "\n", "for", "m", "in", "self", ".", "modalities", ":", "\n", "# x_mod = getattr(mm_data_dict['modalities'][m], 'last_view_x_mod', None)", "\n", "# if x_mod is not None:", "\n", "#     out[m] = mm_data_dict['modalities'][m]", "\n", "            ", "out", "[", "m", "]", "=", "mm_data_dict", "[", "'modalities'", "]", "[", "m", "]", "\n", "\n", "# Apply the MLP head, if any", "\n", "", "if", "self", ".", "has_mlp_head", ":", "\n", "# Apply to the 3D features", "\n", "            ", "out", ".", "x", "=", "self", ".", "mlp", "(", "out", ".", "x", ")", "\n", "\n", "# Apply to the last modality-based view-level features", "\n", "for", "m", "in", "[", "mod", "for", "mod", "in", "self", ".", "modalities", "if", "mod", "in", "out", ".", "keys", "]", ":", "\n", "                ", "out", "[", "m", "]", ".", "last_view_x_mod", "=", "self", ".", "mlp", "(", "out", "[", "m", "]", ".", "last_view_x_mod", ")", "\n", "\n", "", "", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.no3d.No3D.backward": [[156, 158], ["no3d.No3D.loss_seg.backward"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.panoptic.pointgroup.PointGroup.backward"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.sparseconv3d.LateFeatureFusion.__init__": [[19, 107], ["BaseModel.__init__", "torch_points3d.utils.model_building_utils.model_definition_resolver.resolve_model", "torch_points3d.utils.model_building_utils.model_definition_resolver.resolve_model", "SparseConv3d", "torch_points3d.applications.multimodal.no3d.No3DEncoder", "torch_points3d.modules.SparseConv3d.modules.ResBlock", "nn.Linear", "option.get", "option.get", "option.get", "option.get", "nn.Sequential", "nn.Sequential", "option.get", "hasattr", "nn.Linear", "nn.Linear", "torch.cat", "NotImplementedError", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.modelfactory.ModelFactory.resolve_model", "home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.modelfactory.ModelFactory.resolve_model", "home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.sparseconv3d.SparseConv3d", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat"], ["\n", "CUR_FILE", "=", "os", ".", "path", ".", "realpath", "(", "__file__", ")", "\n", "DIR_PATH", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "realpath", "(", "__file__", ")", ")", "\n", "PATH_TO_CONFIG", "=", "os", ".", "path", ".", "join", "(", "DIR_PATH", ",", "\"conf/sparseconv3d\"", ")", "\n", "\n", "log", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "\n", "\n", "def", "SparseConv3d", "(", "\n", "architecture", ":", "str", "=", "None", ",", "\n", "input_nc", ":", "int", "=", "None", ",", "\n", "num_layers", ":", "int", "=", "None", ",", "\n", "config", ":", "DictConfig", "=", "None", ",", "\n", "backend", ":", "str", "=", "\"minkowski\"", ",", "\n", "*", "args", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "    ", "\"\"\"Create a Sparse Conv backbone model based on architecture\n    proposed in\n     https://arxiv.org/abs/1904.08755\n\n     Two backends are available at the moment:\n         - https://github.com/mit-han-lab/torchsparse\n         - https://github.com/NVIDIA/MinkowskiEngine\n\n     Parameters\n     ----------\n     architecture : str, optional\n         Architecture of the model, choose from unet, encoder and\n         decoder\n     input_nc : int, optional\n         Number of channels for the input\n    output_nc : int, optional\n         If specified, then we add a fully connected head at the end of\n         the network to provide the requested dimension\n     num_layers : int, optional\n         Depth of the network\n     config : DictConfig, optional\n         Custom config, overrides the num_layers and architecture\n         parameters\n     block:\n         Type of resnet block, ResBlock by default but can be any of\n         the blocks in modules/SparseConv3d/modules.py\n     backend:\n         torchsparse or minkowski\n    \"\"\"", "\n", "if", "\"SPARSE_BACKEND\"", "in", "os", ".", "environ", "and", "sp3d", ".", "nn", ".", "backend_valid", "(", "os", ".", "environ", "[", "\"SPARSE_BACKEND\"", "]", ")", ":", "\n", "        ", "sp3d", ".", "nn", ".", "set_backend", "(", "os", ".", "environ", "[", "\"SPARSE_BACKEND\"", "]", ")", "\n", "", "else", ":", "\n", "        ", "sp3d", ".", "nn", ".", "set_backend", "(", "backend", ")", "\n", "\n", "", "factory", "=", "SparseConv3dFactory", "(", "\n", "architecture", "=", "architecture", ",", "num_layers", "=", "num_layers", ",", "input_nc", "=", "input_nc", ",", "\n", "config", "=", "config", ",", "**", "kwargs", "\n", ")", "\n", "return", "factory", ".", "build", "(", ")", "\n", "\n", "\n", "", "class", "SparseConv3dFactory", "(", "ModelFactory", ")", ":", "\n", "    ", "def", "_build_unet", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_config", ":", "\n", "            ", "model_config", "=", "self", ".", "_config", "\n", "", "else", ":", "\n", "            ", "path_to_model", "=", "os", ".", "path", ".", "join", "(", "PATH_TO_CONFIG", ",", "\"unet_{}.yaml\"", ".", "format", "(", "\n", "self", ".", "num_layers", ")", ")", "\n", "model_config", "=", "OmegaConf", ".", "load", "(", "path_to_model", ")", "\n", "", "ModelFactory", ".", "resolve_model", "(", "model_config", ",", "self", ".", "num_features", ",", "\n", "self", ".", "_kwargs", ")", "\n", "modules_lib", "=", "sys", ".", "modules", "[", "__name__", "]", "\n", "return", "SparseConv3dUnet", "(", "model_config", ",", "None", ",", "None", ",", "modules_lib", ",", "\n", "**", "self", ".", "kwargs", ")", "\n", "\n", "", "def", "_build_encoder", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_config", ":", "\n", "            ", "model_config", "=", "self", ".", "_config", "\n", "", "else", ":", "\n", "            ", "path_to_model", "=", "os", ".", "path", ".", "join", "(", "\n", "PATH_TO_CONFIG", ",", "\n", "\"encoder_{}.yaml\"", ".", "format", "(", "self", ".", "num_layers", ")", ",", "\n", ")", "\n", "model_config", "=", "OmegaConf", ".", "load", "(", "path_to_model", ")", "\n", "", "ModelFactory", ".", "resolve_model", "(", "model_config", ",", "self", ".", "num_features", ",", "\n", "self", ".", "_kwargs", ")", "\n", "modules_lib", "=", "sys", ".", "modules", "[", "__name__", "]", "\n", "return", "SparseConv3dEncoder", "(", "model_config", ",", "None", ",", "None", ",", "modules_lib", ",", "\n", "**", "self", ".", "kwargs", ")", "\n", "\n", "\n", "", "", "class", "BaseSparseConv3d", "(", "UnwrappedUnetBasedModel", ")", ":", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.sparseconv3d.LateFeatureFusion.forward": [[108, 181], ["sparseconv3d.LateFeatureFusion.fusion", "sparseconv3d.LateFeatureFusion.head", "F.log_softmax", "sparseconv3d.LateFeatureFusion.backbone_3d", "sparseconv3d.LateFeatureFusion.backbone_no3d", "sparseconv3d.LateFeatureFusion.late_conv", "sparseconv3d.LateFeatureFusion.head_no3d", "F.log_softmax", "F.nll_loss", "sparseconv3d.LateFeatureFusion.head_3d", "F.log_softmax", "F.nll_loss", "F.nll_loss", "lovasz_softmax", "sparseconv3d.LateFeatureFusion.head_no3d", "F.log_softmax", "sparseconv3d.LateFeatureFusion.head_3d", "F.log_softmax", "sparseconv3d.LateFeatureFusion.output.exp", "F.nll_loss", "lovasz_softmax", "F.nll_loss", "lovasz_softmax", "getattr", "F.log_softmax.exp", "F.log_softmax.exp"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.lovasz_loss.lovasz_softmax", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.lovasz_loss.lovasz_softmax", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.lovasz_loss.lovasz_softmax"], ["    ", "CONV_TYPE", "=", "\"sparse\"", "\n", "\n", "def", "__init__", "(", "self", ",", "model_config", ",", "model_type", ",", "dataset", ",", "modules", ",", "*", "args", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "model_config", ",", "model_type", ",", "dataset", ",", "modules", ")", "\n", "self", ".", "weight_initialization", "(", ")", "\n", "default_output_nc", "=", "kwargs", ".", "get", "(", "\"default_output_nc\"", ",", "None", ")", "\n", "if", "not", "default_output_nc", ":", "\n", "            ", "default_output_nc", "=", "extract_output_nc", "(", "model_config", ")", "\n", "\n", "", "self", ".", "_output_nc", "=", "default_output_nc", "\n", "self", ".", "_has_mlp_head", "=", "False", "\n", "if", "\"output_nc\"", "in", "kwargs", ":", "\n", "            ", "self", ".", "_has_mlp_head", "=", "True", "\n", "self", ".", "_output_nc", "=", "kwargs", "[", "\"output_nc\"", "]", "\n", "self", ".", "mlp", "=", "MLP", "(", "[", "default_output_nc", ",", "self", ".", "output_nc", "]", ",", "\n", "activation", "=", "torch", ".", "nn", ".", "ReLU", "(", ")", ",", "bias", "=", "False", ")", "\n", "\n", "", "", "@", "property", "\n", "def", "has_mlp_head", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_has_mlp_head", "\n", "\n", "", "@", "property", "\n", "def", "output_nc", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_output_nc", "\n", "\n", "", "def", "weight_initialization", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "sp3d", ".", "nn", ".", "Conv3d", ")", "or", "isinstance", "(", "m", ",", "sp3d", ".", "nn", ".", "Conv3dTranspose", ")", ":", "\n", "                ", "torch", ".", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "kernel", ",", "mode", "=", "\"fan_out\"", ",", "\n", "nonlinearity", "=", "\"relu\"", ")", "\n", "\n", "", "if", "isinstance", "(", "m", ",", "sp3d", ".", "nn", ".", "BatchNorm", ")", ":", "\n", "                ", "torch", ".", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn", ".", "weight", ",", "1", ")", "\n", "torch", ".", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn", ".", "bias", ",", "0", ")", "\n", "\n", "", "", "", "def", "_set_input", "(", "self", ",", "data", ")", ":", "\n", "        ", "\"\"\"Unpack input data from the dataloader and perform necessary\n        pre-processing steps.\n\n        Parameters\n        -----------\n        data:\n            a dictionary that contains the data itself and its metadata\n            information.\n        \"\"\"", "\n", "if", "self", ".", "is_multimodal", ":", "\n", "            ", "self", ".", "input", "=", "{", "\n", "'x_3d'", ":", "sp3d", ".", "nn", ".", "SparseTensor", "(", "data", ".", "x", ",", "data", ".", "coords", ",", "data", ".", "batch", ",", "self", ".", "device", ")", ",", "\n", "'x_seen'", ":", "None", ",", "\n", "'modalities'", ":", "data", ".", "to", "(", "self", ".", "device", ")", ".", "modalities", "}", "\n", "", "else", ":", "\n", "            ", "self", ".", "input", "=", "sp3d", ".", "nn", ".", "SparseTensor", "(", "data", ".", "x", ",", "data", ".", "coords", ",", "data", ".", "batch", ",", "self", ".", "device", ")", "\n", "", "if", "data", ".", "pos", "is", "not", "None", ":", "\n", "            ", "self", ".", "xyz", "=", "data", ".", "pos", "\n", "", "else", ":", "\n", "            ", "self", ".", "xyz", "=", "data", ".", "coords", "\n", "\n", "", "", "", "class", "SparseConv3dEncoder", "(", "BaseSparseConv3d", ")", ":", "\n", "    ", "def", "forward", "(", "self", ",", "data", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.sparseconv3d.LateLogitFusion.__init__": [[189, 217], ["BaseModel.__init__", "torch_points3d.utils.model_building_utils.model_definition_resolver.resolve_model", "torch_points3d.utils.model_building_utils.model_definition_resolver.resolve_model", "SparseConv3d", "torch_points3d.applications.multimodal.no3d.No3DEncoder", "nn.Sequential", "nn.Linear", "option.get"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.modelfactory.ModelFactory.resolve_model", "home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.modelfactory.ModelFactory.resolve_model", "home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.sparseconv3d.SparseConv3d", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get"], ["# pointwise features are used in subsequent modules.", "\n", "", "if", "self", ".", "is_multimodal", ":", "\n", "            ", "data", "=", "data", "[", "'x_3d'", "]", "\n", "\n", "", "out", "=", "Batch", "(", "x", "=", "data", ".", "F", ",", "batch", "=", "data", ".", "C", "[", ":", ",", "0", "]", ".", "long", "(", ")", ".", "to", "(", "data", ".", "F", ".", "device", ")", ")", "\n", "if", "not", "isinstance", "(", "self", ".", "inner_modules", "[", "0", "]", ",", "Identity", ")", ":", "\n", "            ", "out", "=", "self", ".", "inner_modules", "[", "0", "]", "(", "out", ")", "\n", "\n", "", "if", "self", ".", "has_mlp_head", ":", "\n", "            ", "out", ".", "x", "=", "self", ".", "mlp", "(", "out", ".", "x", ")", "\n", "", "return", "out", "\n", "\n", "\n", "", "", "class", "SparseConv3dUnet", "(", "BaseSparseConv3d", ")", ":", "\n", "    ", "def", "forward", "(", "self", ",", "data", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.sparseconv3d.LateLogitFusion.forward": [[218, 227], ["sparseconv3d.LateLogitFusion.head_3d", "F.log_softmax", "sparseconv3d.LateLogitFusion.backbone_3d", "sparseconv3d.LateLogitFusion.backbone_no3d", "F.nll_loss"], "methods", ["None"], ["\n", "self", ".", "_set_input", "(", "data", ")", "\n", "data", "=", "self", ".", "input", "\n", "stack_down", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "down_modules", ")", "-", "1", ")", ":", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.__init__.instantiate_multimodal_transform": [[9, 27], ["getattr", "getattr", "getattr", "getattr.", "ValueError", "getattr."], "function", ["None"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.__init__.instantiate_multimodal_transforms": [[29, 40], ["compose.ComposeMultiModal", "transforms.append", "__init__.instantiate_multimodal_transform"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.__init__.instantiate_multimodal_transform"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageTransform._process": [[36, 39], ["None"], "methods", ["None"], ["        ", "return", "x", "\n", "\n", "\n", "", "", "def", "standardize_weights", "(", "weight", ",", "scaled", "=", "True", ")", ":", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageTransform.__call__": [[40, 58], ["isinstance", "isinstance", "image.ImageTransform.__call__", "list", "isinstance", "torch_points3d.core.multimodal.image.ImageData", "image.ImageTransform._process", "len", "len", "zip", "zip", "image.ImageTransform.__call__", "isinstance", "torch_points3d.core.multimodal.image.ImageData", "data.clone", "len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.grid_transform.ElasticDistortion.__call__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.grid_transform.SaveOriginalPosId._process", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.grid_transform.ElasticDistortion.__call__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.clone", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["    ", "weight_mean", "=", "weight", ".", "mean", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "mean", "(", "dim", "=", "2", ",", "\n", "keepdim", "=", "True", ")", ".", "mean", "(", "dim", "=", "3", ",", "keepdim", "=", "True", ")", "\n", "weight", "=", "weight", "-", "weight_mean", "\n", "std", "=", "weight", ".", "view", "(", "weight", ".", "size", "(", "0", ")", ",", "-", "1", ")", ".", "std", "(", "dim", "=", "1", ")", ".", "view", "(", "-", "1", ",", "1", ",", "1", ",", "1", ")", "+", "1e-5", "\n", "fan_in", "=", "torch", ".", "Tensor", "(", "[", "weight", ".", "shape", "[", "1", "]", "]", ")", ".", "to", "(", "weight", ".", "device", ")", "\n", "if", "scaled", ":", "\n", "# Goes hand-in-hand with ReLUWS to scale the activation output", "\n", "        ", "weight", "=", "weight", "/", "(", "std", ".", "expand_as", "(", "weight", ")", "*", "torch", ".", "sqrt", "(", "fan_in", ")", ")", "\n", "", "else", ":", "\n", "        ", "weight", "=", "weight", "/", "std", ".", "expand_as", "(", "weight", ")", "\n", "", "return", "weight", "\n", "\n", "\n", "", "class", "Conv2dWS", "(", "nn", ".", "Conv2d", ",", "ABC", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageTransform.__repr__": [[59, 62], ["image.ImageTransform.__dict__.items"], "methods", ["None"], ["\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ToImageData._process": [[67, 69], ["torch_points3d.core.multimodal.image.ImageData"], "methods", ["None"], ["stride", "=", "stride", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "groups", "=", "groups", ",", "\n", "bias", "=", "bias", ",", "padding_mode", "=", "padding_mode", ")", "\n", "self", ".", "scaled", "=", "scaled", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.LoadImages.__init__": [[79, 86], ["None"], "methods", ["None"], ["\n", "\n", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.LoadImages._process": [[87, 104], ["images.load", "print"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load"], ["padding", "=", "0", ",", "output_padding", "=", "0", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "True", ",", "\n", "padding_mode", "=", "'zeros'", ",", "scaled", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "in_channels", ",", "out_channels", ",", "\n", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "\n", "output_padding", "=", "output_padding", ",", "dilation", "=", "dilation", ",", "groups", "=", "groups", ",", "\n", "bias", "=", "bias", ",", "padding_mode", "=", "padding_mode", ")", "\n", "self", ".", "scaled", "=", "scaled", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "*", "args", ",", "output_size", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "self", ".", "padding_mode", "!=", "'zeros'", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'Only `zeros` padding mode is supported for ConvTranspose2d'", ")", "\n", "\n", "", "output_padding", "=", "self", ".", "_output_padding", "(", "x", ",", "output_size", ",", "\n", "self", ".", "stride", ",", "self", ".", "padding", ",", "self", ".", "kernel_size", ")", "\n", "\n", "weights", "=", "standardize_weights", "(", "self", ".", "weight", ",", "scaled", "=", "self", ".", "scaled", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.NonStaticMask.__init__": [[118, 122], ["tuple"], "methods", ["None"], ["\n", "_SCALE", "=", "sqrt", "(", "2", "/", "(", "1", "-", "1", "/", "pi", ")", ")", "\n", "\n", "def", "forward", "(", "self", ",", "input", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "F", ".", "relu", "(", "input", ",", "inplace", "=", "self", ".", "inplace", ")", "*", "self", ".", "_SCALE", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.NonStaticMask._process": [[123, 160], ["min", "torch.ones", "torch.zeros", "torch.multinomial", "images.read_images().squeeze", "torch.arange", "images.read_images().squeeze", "torch.where", "images.read_images", "torch.logical_and", "images.read_images"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.SameSettingImageData.read_images", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.SameSettingImageData.read_images"], ["\n", "", "def", "extra_repr", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "f\"inplace={self.inplace}\"", "\n", "\n", "\n", "", "", "class", "ResBlock", "(", "nn", ".", "Module", ",", "ABC", ")", ":", "\n", "    ", "\"\"\"\n    Basic ResNet type block\n\n    Parameters\n    ----------\n    input_nc:\n        Number of input channels\n    output_nc:\n        number of output channels\n    convolution\n        Either Conv2d or ConvTranspose2d\n    \"\"\"", "\n", "\n", "# TODO: extend to EquiConv https://github.com/palver7/EquiConvPytorch", "\n", "\n", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "convolution", ",", "normalization", ",", "\n", "activation", ")", ":", "\n", "        ", "if", "convolution", "in", "[", "nn", ".", "ConvTranspose2d", ",", "ConvTranspose2dWS", "]", ":", "\n", "            ", "padding_mode", "=", "'zeros'", "\n", "", "else", ":", "\n", "            ", "padding_mode", "=", "'reflect'", "\n", "\n", "", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "block", "=", "(", "\n", "Seq", "(", ")", ".", "append", "(", "convolution", "(", "\n", "input_nc", ",", "\n", "output_nc", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "padding_mode", "=", "padding_mode", ")", ")", "\n", ".", "append", "(", "normalization", "(", "output_nc", ")", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.MapImages.__init__": [[175, 191], ["torch.cuda.is_available"], "methods", ["None"], ["input_nc", ",", "\n", "output_nc", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ")", ")", "\n", ".", "append", "(", "normalization", "(", "output_nc", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "downsample", "=", "None", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "x", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "out", "=", "self", ".", "block", "(", "x", ")", "\n", "if", "self", ".", "downsample", ":", "\n", "            ", "out", "+=", "self", ".", "downsample", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "out", "+=", "x", "\n", "", "return", "out", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.MapImages._process": [[192, 429], ["hasattr", "isinstance", "getattr", "getattr.", "delattr", "torch.LongTensor", "torch.cuda.synchronize", "time", "torch_points3d.utils.multimodal.lexunique", "torch.bucketize", "time", "image_ids.repeat_interleave().to.repeat_interleave().to.repeat_interleave().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cuda.synchronize", "time", "torch_points3d.core.multimodal.image.ImageMapping.from_dense", "torch_points3d.core.multimodal.image.ImageMapping.from_dense.to", "print", "tqdm.auto.tqdm.auto.tqdm", "enumerate", "torch.cuda.synchronize", "time", "cls", "cls.", "torch.cuda.synchronize", "getattr", "getattr", "getattr", "getattr", "os.join", "torch.cuda.synchronize", "time", "getattr.", "out_vm[].long", "out_vm[].long", "out_vm[].float", "torch.cuda.synchronize", "time", "torch.where", "torch.cuda.synchronize", "time", "torch_points3d.utils.multimodal.lexargunique", "torch.cuda.synchronize", "time", "torch.stack().type", "torch.cuda.synchronize", "time", "image_ids.repeat_interleave().to.repeat_interleave().to.append", "torch.cat().to.append", "torch.cat().to.append", "torch.cat().to.append", "torch.cuda.synchronize", "print", "print", "print", "print", "print", "print", "print", "ValueError", "torch.cuda.synchronize", "print", "print", "torch.cuda.synchronize", "print", "enumerate", "time", "getattr.to", "getattr.to", "getattr.to", "getattr.to", "os.dirname", "os.basename().replace", "cls.pos.float().to", "image.pos.squeeze().float().to", "data_sample[].to", "time", "time", "time", "time", "point_ids_.cpu", "out_vm[].float.cpu", "torch.stack().type.cpu", "time", "torch_points3d.utils.multimodal.lexunique.to", "image_ids.repeat_interleave().to.repeat_interleave().to.repeat_interleave", "torch.cat", "torch.cat", "torch.cat", "image.pos.squeeze", "os.dirname", "image.crop_offsets.squeeze", "image.crop_offsets.squeeze", "torch.stack", "torch.LongTensor", "getattr().numpy().max", "os.basename", "cls.pos.float", "image.pos.squeeze().float", "image.opk.squeeze().float().to", "image.intrinsic_pinhole.squeeze().float().to", "image.intrinsic_fisheye.squeeze().float().to", "image.extrinsic.squeeze().float().to", "image.mask.to", "getattr.to", "getattr.to", "getattr.to", "getattr.to", "time", "time", "getattr().numpy", "time", "image.pos.squeeze", "image.opk.squeeze().float", "image.intrinsic_pinhole.squeeze().float", "image.intrinsic_fisheye.squeeze().float", "image.extrinsic.squeeze().float", "getattr", "image.opk.squeeze", "image.intrinsic_pinhole.squeeze", "image.intrinsic_fisheye.squeeze", "image.extrinsic.squeeze"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.multimodal.lexunique", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageMapping.from_dense", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.multimodal.lexargunique", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.csr.CSRData.cpu", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.csr.CSRData.cpu", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.csr.CSRData.cpu", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to"], ["", "", "class", "BottleneckBlock", "(", "nn", ".", "Module", ",", "ABC", ")", ":", "\n", "    ", "\"\"\"Bottleneck block with residual.\"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "convolution", ",", "normalization", ",", "\n", "activation", ",", "reduction", "=", "4", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "convolution", "in", "[", "nn", ".", "ConvTranspose2d", ",", "ConvTranspose2dWS", "]", ":", "\n", "            ", "padding_mode", "=", "'zeros'", "\n", "", "else", ":", "\n", "            ", "padding_mode", "=", "'reflect'", "\n", "\n", "", "self", ".", "block", "=", "(", "\n", "Seq", "(", ")", ".", "append", "(", "convolution", "(", "\n", "input_nc", ",", "\n", "output_nc", "//", "reduction", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ")", ")", "\n", ".", "append", "(", "normalization", "(", "output_nc", "//", "reduction", ")", ")", "\n", ".", "append", "(", "activation", "(", ")", ")", "\n", ".", "append", "(", "convolution", "(", "\n", "output_nc", "//", "reduction", ",", "\n", "output_nc", "//", "reduction", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "padding_mode", "=", "padding_mode", ")", ")", "\n", ".", "append", "(", "normalization", "(", "output_nc", "//", "reduction", ")", ")", "\n", ".", "append", "(", "activation", "(", ")", ")", "\n", ".", "append", "(", "convolution", "(", "\n", "output_nc", "//", "reduction", ",", "\n", "output_nc", ",", "\n", "kernel_size", "=", "1", ",", ")", ")", "\n", ".", "append", "(", "normalization", "(", "output_nc", ")", ")", "\n", ".", "append", "(", "activation", "(", ")", ")", ")", "\n", "\n", "if", "input_nc", "!=", "output_nc", ":", "\n", "            ", "self", ".", "downsample", "=", "(", "\n", "Seq", "(", ")", ".", "append", "(", "convolution", "(", "\n", "input_nc", ",", "\n", "output_nc", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ")", ")", "\n", ".", "append", "(", "normalization", "(", "output_nc", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "downsample", "=", "None", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "x", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "out", "=", "self", ".", "block", "(", "x", ")", "\n", "if", "self", ".", "downsample", ":", "\n", "            ", "out", "+=", "self", ".", "downsample", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "out", "+=", "x", "\n", "", "return", "out", "\n", "\n", "\n", "", "", "_local_modules", "=", "sys", ".", "modules", "[", "__name__", "]", "\n", "\n", "\n", "class", "ResNetDown", "(", "nn", ".", "Module", ",", "ABC", ")", ":", "\n", "    ", "\"\"\"\n    Resnet block that looks like\n\n    in --- strided conv ---- Block ---- sum --[... N times]\n                         |              |\n                         |-- 1x1 - BN --|\n    \"\"\"", "\n", "\n", "CONVOLUTION", "=", "\"Conv2d\"", "\n", "ACTIVATION", "=", "\"ReLU\"", "\n", "\n", "def", "__init__", "(", "\n", "self", ",", "down_conv_nn", "=", "[", "]", ",", "kernel_size", "=", "2", ",", "dilation", "=", "1", ",", "stride", "=", "2", ",", "N", "=", "1", ",", "\n", "padding", "=", "0", ",", "block", "=", "\"ResBlock\"", ",", "padding_mode", "=", "'reflect'", ",", "\n", "normalization", "=", "'BatchNorm2d'", ",", "weight_standardization", "=", "False", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "# If an empty down_conv_nn or channel sizes smaller than 1 are", "\n", "# passed, the ResNetDown will simply become a pass-through", "\n", "# Identity module", "\n", "if", "len", "(", "down_conv_nn", ")", "<", "2", "or", "any", "(", "[", "x", "<", "0", "for", "x", "in", "down_conv_nn", "]", ")", ":", "\n", "            ", "self", ".", "conv_in", "=", "None", "\n", "self", ".", "blocks", "=", "None", "\n", "return", "\n", "\n", "# Recover the block module", "\n", "", "block", "=", "getattr", "(", "_local_modules", ",", "block", ")", "\n", "\n", "# Compute the number of channels for the ResNetDown modules", "\n", "nc_in", ",", "nc_stride_out", ",", "nc_block_in", ",", "nc_out", "=", "self", ".", "_parse_conv_nn", "(", "\n", "down_conv_nn", ",", "stride", ",", "N", ")", "\n", "\n", "# Recover the convolution and activation modules", "\n", "if", "weight_standardization", ":", "\n", "            ", "conv", "=", "getattr", "(", "_local_modules", ",", "self", ".", "CONVOLUTION", "+", "'WS'", ")", "\n", "activation", "=", "getattr", "(", "_local_modules", ",", "self", ".", "ACTIVATION", "+", "'WS'", ")", "\n", "", "else", ":", "\n", "            ", "conv", "=", "getattr", "(", "nn", ",", "self", ".", "CONVOLUTION", ")", "\n", "activation", "=", "getattr", "(", "nn", ",", "self", ".", "ACTIVATION", ")", "\n", "\n", "# Recover the normalization module from torch.nn, for GroupNorm", "\n", "# the number of groups is set to distribute ~16 channels per", "\n", "# group: https://arxiv.org/pdf/1803.08494.pdf", "\n", "", "if", "normalization", "==", "'GroupNorm'", ":", "\n", "            ", "norm", "=", "lambda", "nc", ":", "nn", ".", "GroupNorm", "(", "max", "(", "nc", "//", "16", ",", "1", ")", ",", "nc", ")", "\n", "", "else", ":", "\n", "            ", "norm", "=", "getattr", "(", "nn", ",", "normalization", ")", "\n", "\n", "# Build the initial strided convolution", "\n", "", "self", ".", "conv_in", "=", "(", "\n", "Seq", "(", ")", ".", "append", "(", "conv", "(", "\n", "in_channels", "=", "nc_in", ",", "\n", "out_channels", "=", "nc_stride_out", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "dilation", "=", "dilation", ",", "\n", "padding", "=", "padding", ",", "\n", "padding_mode", "=", "padding_mode", ")", ")", "\n", ".", "append", "(", "norm", "(", "nc_stride_out", ")", ")", "\n", ".", "append", "(", "activation", "(", ")", ")", ")", "\n", "\n", "# Build the N subsequent blocks", "\n", "if", "N", ">", "0", ":", "\n", "            ", "self", ".", "blocks", "=", "Seq", "(", ")", "\n", "for", "_", "in", "range", "(", "N", ")", ":", "\n", "                ", "self", ".", "blocks", ".", "append", "(", "block", "(", "nc_block_in", ",", "nc_out", ",", "conv", ",", "\n", "norm", ",", "activation", ")", ")", "\n", "nc_block_in", "=", "nc_out", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "blocks", "=", "None", "\n", "\n", "", "", "def", "_parse_conv_nn", "(", "self", ",", "down_conv_nn", ",", "stride", ",", "N", ")", ":", "\n", "        ", "if", "is_list", "(", "down_conv_nn", "[", "0", "]", ")", ":", "\n", "            ", "down_conv_nn", "=", "down_conv_nn", "[", "0", "]", "\n", "", "assert", "len", "(", "down_conv_nn", ")", "==", "2", ",", "f\"ResNetDown expects down_conv_nn to have length of 2 to carry \"", "f\"(nc_in, nc_out) but got len(down_conv_nn)={len(down_conv_nn)}.\"", "\n", "nc_in", ",", "nc_out", "=", "down_conv_nn", "\n", "nc_stride_out", "=", "nc_in", "if", "stride", ">", "1", "and", "N", ">", "0", "else", "nc_out", "\n", "nc_block_in", "=", "nc_stride_out", "\n", "return", "nc_in", ",", "nc_stride_out", ",", "nc_block_in", ",", "nc_out", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "self", ".", "conv_in", ":", "\n", "            ", "x", "=", "self", ".", "conv_in", "(", "x", ")", "\n", "", "if", "self", ".", "blocks", ":", "\n", "            ", "x", "=", "self", ".", "blocks", "(", "x", ")", "\n", "", "return", "x", "\n", "\n", "\n", "", "", "class", "ResNetUp", "(", "ResNetDown", ",", "ABC", ")", ":", "\n", "    ", "\"\"\"Same as ResNetDown but for the Decoder.\"\"\"", "\n", "\n", "CONVOLUTION", "=", "\"ConvTranspose2d\"", "\n", "\n", "def", "__init__", "(", "self", ",", "up_conv_nn", "=", "[", "]", ",", "kernel_size", "=", "2", ",", "dilation", "=", "1", ",", "stride", "=", "2", ",", "N", "=", "1", ",", "\n", "padding", "=", "0", ",", "padding_mode", "=", "'zeros'", ",", "normalization", "=", "'BatchNorm2d'", ",", "\n", "weight_standardization", "=", "False", ",", "skip_first", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "skip_first", "=", "skip_first", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "down_conv_nn", "=", "up_conv_nn", ",", "kernel_size", "=", "kernel_size", ",", "\n", "dilation", "=", "dilation", ",", "stride", "=", "stride", ",", "N", "=", "N", ",", "padding", "=", "padding", ",", "\n", "padding_mode", "=", "padding_mode", ",", "normalization", "=", "normalization", ",", "\n", "weight_standardization", "=", "weight_standardization", ",", "**", "kwargs", ")", "\n", "\n", "", "def", "_parse_conv_nn", "(", "self", ",", "up_conv_nn", ",", "stride", ",", "N", ")", ":", "\n", "        ", "if", "is_list", "(", "up_conv_nn", "[", "0", "]", ")", ":", "\n", "            ", "up_conv_nn", "=", "up_conv_nn", "[", "0", "]", "\n", "\n", "", "if", "self", ".", "skip_first", ":", "\n", "            ", "assert", "len", "(", "up_conv_nn", ")", "==", "2", ",", "f\"ResNetUp with skip_first=True expects down_conv_nn to have \"", "f\"length of 2 to carry (nc_in, nc_out) but got \"", "f\"len(up_conv_nn)={len(up_conv_nn)}.\"", "\n", "", "else", ":", "\n", "            ", "assert", "len", "(", "up_conv_nn", ")", "==", "3", ",", "f\"ResNetUp with skip_first=False expects up_conv_nn to have \"", "f\"length of 3 to carry (nc_in, nc_skip_in, nc_out) but got \"", "f\"len(up_conv_nn)={len(up_conv_nn)}.\"", "\n", "\n", "", "if", "self", ".", "skip_first", ":", "\n", "            ", "nc_in", ",", "nc_out", "=", "up_conv_nn", "\n", "nc_stride_out", "=", "nc_in", "if", "stride", ">", "1", "and", "N", ">", "0", "else", "nc_out", "\n", "nc_block_in", "=", "nc_stride_out", "\n", "", "else", ":", "\n", "            ", "nc_in", ",", "nc_skip_in", ",", "nc_out", "=", "up_conv_nn", "\n", "nc_stride_out", "=", "nc_in", "if", "stride", ">", "1", "and", "N", ">", "0", "else", "nc_out", "\n", "nc_block_in", "=", "nc_stride_out", "+", "nc_skip_in", "\n", "\n", "", "return", "nc_in", ",", "nc_stride_out", ",", "nc_block_in", ",", "nc_out", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "skip", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "self", ".", "skip_first", ":", "\n", "            ", "if", "skip", "is", "not", "None", ":", "\n", "                ", "x", "=", "torch", ".", "cat", "(", "(", "x", ",", "skip", ")", ",", "dim", "=", "1", ")", "\n", "", "if", "self", ".", "conv_in", ":", "\n", "                ", "x", "=", "self", ".", "conv_in", "(", "x", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "self", ".", "conv_in", ":", "\n", "                ", "x", "=", "self", ".", "conv_in", "(", "x", ")", "\n", "", "if", "skip", "is", "not", "None", ":", "\n", "                ", "x", "=", "torch", ".", "cat", "(", "(", "x", ",", "skip", ")", ",", "dim", "=", "1", ")", "\n", "", "", "if", "self", ".", "blocks", ":", "\n", "            ", "x", "=", "self", ".", "blocks", "(", "x", ")", "\n", "", "return", "x", "\n", "\n", "", "def", "extra_repr", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "f\"skip_first={self.skip_first}\"", "\n", "\n", "\n", "", "", "class", "UnaryConv", "(", "nn", ".", "Module", ",", "ABC", ")", ":", "\n", "    ", "\"\"\"1x1 convolution on image.\"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "normalization", "=", "None", ",", "activation", "=", "None", ",", "\n", "weight_standardization", "=", "False", ",", "in_drop", "=", "0", ",", "out_drop", "=", "0", ",", "\n", "persistent_drop", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "# Build the input Dropout if any", "\n", "if", "in_drop", "is", "None", "or", "in_drop", "<=", "0", ":", "\n", "            ", "self", ".", "input_dropout", "=", "None", "\n", "", "elif", "persistent_drop", ":", "\n", "            ", "self", ".", "input_dropout", "=", "PersistentDropout2d", "(", "input_nc", ",", "p", "=", "in_drop", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "input_dropout", "=", "Dropout2d", "(", "p", "=", "in_drop", ",", "inplace", "=", "True", ")", "\n", "\n", "# Recover the normalization module from torch.nn, for GroupNorm", "\n", "# the number of groups is set to distribute ~16 channels per", "\n", "# group: https://arxiv.org/pdf/1803.08494.pdf", "\n", "", "if", "normalization", "is", "None", ":", "\n", "            ", "self", ".", "norm", "=", "None", "\n", "", "elif", "normalization", "==", "'GroupNorm'", ":", "\n", "            ", "self", ".", "norm", "=", "lambda", "nc", ":", "nn", ".", "GroupNorm", "(", "max", "(", "nc", "//", "16", ",", "1", ")", ",", "nc", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "norm", "=", "getattr", "(", "nn", ",", "normalization", ")", "\n", "\n", "# Build the 1x1 convolution and activation", "\n", "", "if", "weight_standardization", ":", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.NeighborhoodBasedMappingFeatures.__init__": [[466, 481], ["isinstance", "sorted", "torch.cuda.is_available", "torch.cuda.is_available"], "methods", ["None"], ["    ", "\"\"\" Dropout2d with a persistent dropout mask.\n    The mask may be reset at froward time. This is useful when the same\n    Dropout mask needs to be applied to various input batches.\n\n    Inspired from:\n    https://pytorchnlp.readthedocs.io/en/latest/_modules/torchnlp/nn/lock_dropout.html\n\n    Args:\n        input_nc (int): Number of input channels.\n        p (float): Probability of an element in the dropout mask to be zeroed.\n    \"\"\"", "\n", "def", "__init__", "(", "self", ",", "input_nc", ",", "p", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "input_nc", "=", "input_nc", "\n", "self", ".", "p", "=", "p", "\n", "self", ".", "mask", "=", "None", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.NeighborhoodBasedMappingFeatures._process": [[482, 613], ["isinstance", "data.pos.to", "print", "torch_points3d.core.spatial_ops.neighbour_finder.FAISSGPUKNNNeighbourFinder", "torch_points3d.core.spatial_ops.neighbour_finder.FAISSGPUKNNNeighbourFinder.", "d_keops.argKmin", "torch.cat", "densities.to().repeat_interleave.to().repeat_interleave.to().repeat_interleave", "images.mappings.pointers.to", "torch.arange().repeat_interleave", "images.mappings.images.to", "torch.zeros", "torch.cat().to", "print", "print", "pykeops.torch.LazyTensor", "pykeops.torch.LazyTensor", "pykeops.torch.LazyTensor", "pykeops.torch.LazyTensor", "print", "densities.to().repeat_interleave.to().repeat_interleave.append", "torch.cat", "print", "torch.max", "torch.ones_like", "range", "torch.cat().to.append", "torch.cat", "xyz[].double", "xyz[].double", "density.cpu().view", "densities.to().repeat_interleave.to().repeat_interleave.to", "torch.arange", "neighbors[].repeat_interleave", "occlusion.cpu().view", "torch.cat", "torch.where", "density.isnan", "density.cpu", "occlusion.cpu"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.lovasz_loss.isnan", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.csr.CSRData.cpu", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.csr.CSRData.cpu"], ["\n", "", "def", "forward", "(", "self", ",", "x", ",", "reset", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            x :class:`torch.FloatTensor`: Input to apply dropout too.\n            reset (bool, optional): If set to ``True``, will reset the\n                dropout mask.\n        \"\"\"", "\n", "# Dropout acts as Identity in eval mode", "\n", "if", "not", "self", ".", "training", "or", "not", "self", ".", "p", ":", "\n", "            ", "self", ".", "mask", "=", "None", "\n", "return", "x", "\n", "\n", "# Reset the feature dropout mask", "\n", "", "if", "self", ".", "mask", "is", "None", "or", "reset", ":", "\n", "            ", "mask", "=", "x", ".", "new_empty", "(", "1", ",", "self", ".", "input_nc", ",", "1", ",", "1", ",", "requires_grad", "=", "False", ")", "\n", "mask", "=", "mask", ".", "bernoulli_", "(", "1", "-", "self", ".", "p", ")", "\n", "self", ".", "mask", "=", "mask", ".", "div_", "(", "1", "-", "self", ".", "p", ")", "\n", "\n", "", "return", "x", "*", "self", ".", "mask", ".", "expand_as", "(", "x", ")", "\n", "\n", "", "def", "extra_repr", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "f\"input_nc={self.input_nc}, p={self.p}\"", "\n", "\n", "\n", "", "", "SPECIAL_NAMES", "=", "[", "\"block_names\"", "]", "\n", "\n", "\n", "class", "UNet", "(", "nn", ".", "Module", ",", "ABC", ")", ":", "\n", "    ", "\"\"\"Generic UNet module for images.\n\n    Create the Unet from a dictionary of compact options.\n\n    For each part of the architecture, the blocks are implicitly\n    pre-selected:\n      - Down  : ResNetDown\n      - Inner : BottleneckBlock\n      - Up    : ResNetUp\n\n    opt is expected to have the following format:\n            down_conv:\n                down_conv_nn: ...\n                *args\n\n            innermost: [OPTIONAL]\n                *args\n\n            up_conv:\n                up_conv_nn: ...\n                *args\n\n    Inspired from torch_points3d/models/base_architectures/unet.py\n    \"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "# Detect which options format has been used to define the model", "\n", "if", "is_list", "(", "opt", ".", "down_conv", ")", "or", "\"down_conv_nn\"", "not", "in", "opt", ".", "down_conv", "or", "is_list", "(", "opt", ".", "up_conv", ")", "or", "'up_conv_nn'", "not", "in", "opt", ".", "up_conv", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "else", ":", "\n", "            ", "self", ".", "_init_from_compact_format", "(", "opt", ")", "\n", "\n", "", "", "def", "_init_from_compact_format", "(", "self", ",", "opt", ")", ":", "\n", "# Down modules", "\n", "        ", "self", ".", "down_modules", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "opt", ".", "down_conv", ".", "down_conv_nn", ")", ")", ":", "\n", "            ", "down_module", "=", "self", ".", "_build_module", "(", "opt", ".", "down_conv", ",", "i", ",", "\"DOWN\"", ")", "\n", "self", ".", "down_modules", ".", "append", "(", "down_module", ")", "\n", "\n", "# Innermost module", "\n", "", "if", "hasattr", "(", "opt", ",", "\"innermost\"", ")", "and", "opt", ".", "innermost", "is", "not", "None", ":", "\n", "            ", "self", ".", "inner_modules", "=", "nn", ".", "ModuleList", "(", ")", "\n", "inners", "=", "self", ".", "_build_module", "(", "opt", ".", "innermost", ",", "0", ",", "\"INNER\"", ")", "\n", "self", ".", "inner_modules", ".", "append", "(", "inners", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "inner_modules", "=", "None", "\n", "\n", "# Up modules", "\n", "", "self", ".", "up_modules", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "opt", ".", "up_conv", ".", "up_conv_nn", ")", ")", ":", "\n", "            ", "up_module", "=", "self", ".", "_build_module", "(", "opt", ".", "up_conv", ",", "i", ",", "\"UP\"", ")", "\n", "self", ".", "up_modules", ".", "append", "(", "up_module", ")", "\n", "\n", "# Final 1x1 conv", "\n", "", "if", "hasattr", "(", "opt", ",", "\"last_conv\"", ")", "and", "opt", ".", "last_conv", "is", "not", "None", ":", "\n", "            ", "last", "=", "self", ".", "_build_module", "(", "opt", ".", "last_conv", ",", "0", ",", "\"LAST\"", ")", "\n", "self", ".", "last", "=", "last", "\n", "", "else", ":", "\n", "            ", "self", ".", "last", "=", "None", "\n", "\n", "", "", "def", "_build_module", "(", "self", ",", "opt", ",", "index", ",", "flow", ")", ":", "\n", "        ", "\"\"\"Builds a convolution (up, down or inner) block.\n\n        Arguments:\n            conv_opt - model config subset describing the convolutional\n                block\n            index - layer index in sequential order (as they come in the\n                config)\n            flow - UP, DOWN or INNER\n        \"\"\"", "\n", "if", "flow", ".", "lower", "(", ")", "==", "'DOWN'", ".", "lower", "(", ")", ":", "\n", "            ", "module_cls", "=", "ResNetDown", "\n", "", "elif", "flow", ".", "lower", "(", ")", "==", "'INNER'", ".", "lower", "(", ")", ":", "\n", "            ", "module_cls", "=", "BottleneckBlock", "\n", "", "elif", "flow", ".", "lower", "(", ")", "==", "'UP'", ".", "lower", "(", ")", ":", "\n", "            ", "module_cls", "=", "ResNetUp", "\n", "", "elif", "flow", ".", "lower", "(", ")", "==", "'LAST'", ".", "lower", "(", ")", ":", "\n", "            ", "module_cls", "=", "UnaryConv", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "args", "=", "fetch_arguments_from_list", "(", "opt", ",", "index", ",", "SPECIAL_NAMES", ")", "\n", "return", "module_cls", "(", "**", "args", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"This method does a forward on the Unet assuming symmetrical\n        skip connections.\n\n        Parameters\n        ----------\n        x: torch.Tensor of images [BxCxHxW]\n        \"\"\"", "\n", "stack_down", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "down_modules", ")", "-", "1", ")", ":", "\n", "            ", "x", "=", "self", ".", "down_modules", "[", "i", "]", "(", "x", ")", "\n", "stack_down", ".", "append", "(", "x", ")", "\n", "", "x", "=", "self", ".", "down_modules", "[", "-", "1", "]", "(", "x", ")", "\n", "\n", "if", "self", ".", "inner_modules", "is", "not", "None", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "# TODO: debug innermost, stacks and upconv", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.SelectMappingFromPointId.__init__": [[627, 629], ["None"], "methods", ["None"], ["", "return", "x", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.SelectMappingFromPointId._process": [[630, 645], ["isinstance", "hasattr", "isinstance", "images.select_points.select_points.select_points", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageMapping.select_points"], ["########################################################################", "\n", "#                                ADE20K                                #", "\n", "########################################################################", "\n", "\n", "", "", "class", "PrudentSynchronizedBatchNorm2d", "(", "MITSynchronizedBatchNorm2d", ")", ":", "\n", "    ", "\"\"\"MITSynchronizedBatchNorm2d with support for (1, C, 1, 1) inputs at\n    training time.\n    \"\"\"", "\n", "\n", "def", "forward", "(", "self", ",", "input", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "is_training", "=", "self", ".", "training", "\n", "if", "input", ".", "shape", "[", "0", "]", "==", "input", ".", "shape", "[", "2", "]", "==", "input", ".", "shape", "[", "3", "]", "==", "1", ":", "\n", "            ", "self", ".", "training", "=", "False", "\n", "", "output", "=", "super", "(", ")", ".", "forward", "(", "input", ")", "\n", "self", ".", "training", "=", "is_training", "\n", "return", "output", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.DropImagesOutsideDataBoundingBox.__init__": [[649, 652], ["None"], "methods", ["None"], ["# Initialize to default PPMFeatMap instance", "\n", "        ", "bn_new", "=", "cls", "(", "bn_pretrained", ".", "num_features", ")", "\n", "\n", "# Recover all attributes", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.DropImagesOutsideDataBoundingBox._process": [[653, 667], ["torch.logical_and", "data.pos.min", "data.pos.max"], "methods", ["None"], ["for", "k", ",", "v", "in", "bn_pretrained", ".", "__dict__", ".", "items", "(", ")", ":", "\n", "            ", "setattr", "(", "bn_new", ",", "k", ",", "v", ")", "\n", "\n", "", "return", "bn_new", "\n", "\n", "\n", "", "", "class", "PPMFeatMap", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "\"\"\"Pyramid Pooling Module for feature extraction.\n\n    Adapted from https://github.com/CSAILVision/semantic-segmentation-pytorch\n    \"\"\"", "\n", "def", "__init__", "(", "self", ",", "fc_dim", "=", "4096", ",", "pool_scales", "=", "(", "1", ",", "2", ",", "3", ",", "6", ")", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "ppm", "=", "[", "]", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.GridSampleImages.__init__": [[674, 676], ["None"], "methods", ["None"], [")", ")", "\n", "", "self", ".", "ppm", "=", "nn", ".", "ModuleList", "(", "self", ".", "ppm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.GridSampleImages._process": [[677, 687], ["torch_geometric.data.Data", "torch_points3d.core.data_transform.SaveOriginalPosId", "torch_points3d.core.data_transform.GridSampling3D", "images.pos.clone"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.clone"], ["self", ".", "conv_last", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "fc_dim", "+", "len", "(", "pool_scales", ")", "*", "512", ",", "512", ",", "\n", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "MITSynchronizedBatchNorm2d", "(", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "\n", "", "@", "classmethod", "\n", "def", "from_pretrained", "(", "cls", ",", "ppm_pretrained", ")", ":", "\n", "# Initialize to default PPMFeatMap instance", "\n", "        ", "ppm_new", "=", "cls", "(", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.PickKImages.__init__": [[694, 698], ["None"], "methods", ["None"], ["for", "m", "in", "ppm_new", ".", "ppm", ":", "\n", "            ", "m", "[", "2", "]", "=", "PrudentSynchronizedBatchNorm2d", ".", "from_pretrained", "(", "m", "[", "2", "]", ")", "\n", "\n", "# Recover the conv_last module without dropout and classifier", "\n", "", "ppm_new", ".", "conv_last", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "ppm_pretrained", ".", "conv_last", ")", "[", ":", "-", "2", "]", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.PickKImages._process": [[699, 711], ["torch.from_numpy", "slice", "numpy.random.choice", "range"], "methods", ["None"], ["return", "ppm_new", "\n", "\n", "", "def", "forward", "(", "self", ",", "conv_out", ",", "*", "args", ",", "out_size", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "conv5", "=", "conv_out", "[", "-", "1", "]", "\n", "\n", "input_size", "=", "conv5", ".", "size", "(", ")", "\n", "ppm_out", "=", "[", "conv5", "]", "\n", "for", "pool_scale", "in", "self", ".", "ppm", ":", "\n", "            ", "ppm_out", ".", "append", "(", "F", ".", "interpolate", "(", "\n", "pool_scale", "(", "conv5", ")", ",", "(", "input_size", "[", "2", "]", ",", "input_size", "[", "3", "]", ")", ",", "\n", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", ")", "\n", "", "ppm_out", "=", "torch", ".", "cat", "(", "ppm_out", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.PickImagesFromMappingArea.__init__": [[719, 724], ["None"], "methods", ["None"], ["\n", "\n", "", "", "class", "ADE20KResNet18PPM", "(", "nn", ".", "Module", ",", "ABC", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.PickImagesFromMappingArea._process": [[725, 763], ["images.mappings.images.repeat_interleave", "torch_scatter.scatter_add.argsort().flip", "torch_scatter.scatter_add", "torch.ones", "torch_scatter.scatter_min", "torch_scatter.scatter_max", "torch_scatter.scatter_add.argsort", "images.mappings.pixels.int", "images.mappings.pixels.int"], "methods", ["None"], ["\n", "\n", "def", "__init__", "(", "self", ",", "*", "args", ",", "frozen", "=", "False", ",", "pretrained", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "# Adapt the default config to use ResNet18 + PPM-Deepsup model", "\n", "ARCH", "=", "'resnet18dilated-ppm_deepsup'", "\n", "DIR", "=", "osp", ".", "join", "(", "PRETRAINED_DIR", ",", "'ade20k'", ",", "ARCH", ")", "\n", "MITCfg", ".", "merge_from_file", "(", "osp", ".", "join", "(", "DIR", ",", "f'{ARCH}.yaml'", ")", ")", "\n", "MITCfg", ".", "MODEL", ".", "arch_encoder", "=", "MITCfg", ".", "MODEL", ".", "arch_encoder", ".", "lower", "(", ")", "\n", "MITCfg", ".", "MODEL", ".", "arch_decoder", "=", "MITCfg", ".", "MODEL", ".", "arch_decoder", ".", "lower", "(", ")", "\n", "MITCfg", ".", "DIR", "=", "DIR", "\n", "\n", "# Absolute paths of model weights", "\n", "MITCfg", ".", "MODEL", ".", "weights_encoder", "=", "osp", ".", "join", "(", "\n", "MITCfg", ".", "DIR", ",", "'encoder_'", "+", "MITCfg", ".", "TEST", ".", "checkpoint", ")", "\n", "MITCfg", ".", "MODEL", ".", "weights_decoder", "=", "osp", ".", "join", "(", "\n", "MITCfg", ".", "DIR", ",", "'decoder_'", "+", "MITCfg", ".", "TEST", ".", "checkpoint", ")", "\n", "\n", "assert", "osp", ".", "exists", "(", "MITCfg", ".", "MODEL", ".", "weights_encoder", ")", "and", "osp", ".", "exists", "(", "MITCfg", ".", "MODEL", ".", "weights_decoder", ")", ",", "\"checkpoint does not exist!\"", "\n", "\n", "# Build encoder and decoder from pretrained weights", "\n", "old_stdout", "=", "sys", ".", "stdout", "# backup current stdout", "\n", "sys", ".", "stdout", "=", "open", "(", "os", ".", "devnull", ",", "\"w\"", ")", "\n", "self", ".", "pretrained", "=", "pretrained", "\n", "self", ".", "encoder", "=", "MITModelBuilder", ".", "build_encoder", "(", "\n", "arch", "=", "MITCfg", ".", "MODEL", ".", "arch_encoder", ",", "\n", "fc_dim", "=", "MITCfg", ".", "MODEL", ".", "fc_dim", ",", "\n", "weights", "=", "MITCfg", ".", "MODEL", ".", "weights_encoder", "if", "pretrained", "else", "''", ")", "\n", "self", ".", "decoder", "=", "MITModelBuilder", ".", "build_decoder", "(", "\n", "arch", "=", "MITCfg", ".", "MODEL", ".", "arch_decoder", ",", "\n", "fc_dim", "=", "MITCfg", ".", "MODEL", ".", "fc_dim", ",", "\n", "num_class", "=", "MITCfg", ".", "DATASET", ".", "num_class", ",", "\n", "weights", "=", "MITCfg", ".", "MODEL", ".", "weights_decoder", "if", "pretrained", "else", "''", ",", "\n", "use_softmax", "=", "True", ")", "\n", "sys", ".", "stdout", "=", "old_stdout", "# reset old stdout", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.PickImagesFromMemoryCredit.__init__": [[772, 782], ["ValueError", "len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["\n", "", "", "def", "forward", "(", "self", ",", "x", ",", "*", "args", ",", "out_size", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "pred", "=", "self", ".", "decoder", "(", "self", ".", "encoder", "(", "x", ",", "return_feature_maps", "=", "True", ")", ",", "\n", "out_size", "=", "out_size", ")", "\n", "return", "pred", "\n", "\n", "", "@", "property", "\n", "def", "frozen", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_frozen", "\n", "\n", "", "@", "frozen", ".", "setter", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.PickImagesFromMemoryCredit._process": [[783, 875], ["torch_points3d.core.multimodal.image.ImageData", "torch.zeros", "range", "numpy.random.choice", "img_indices.pop", "img_sizes.pop", "picked[].append", "range", "enumerate", "range", "mappings.points.repeat_interleave", "x.numpy", "min", "min", "len", "min", "len", "numpy.array", "numpy.zeros", "numpy.array", "numpy.array().max", "weights.sum", "numpy.arange", "torch.zeros.pop", "img_indices.pop", "img_sizes.pop", "len", "numpy.logical_and", "zip", "torch.zeros.pop", "x.sum", "numpy.zeros.max", "numpy.array", "torch.LongTensor", "len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["def", "frozen", "(", "self", ",", "frozen", ")", ":", "\n", "        ", "if", "isinstance", "(", "frozen", ",", "bool", ")", ":", "\n", "            ", "self", ".", "_frozen", "=", "frozen", "\n", "", "for", "p", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "p", ".", "requires_grad", "=", "not", "self", ".", "frozen", "\n", "\n", "", "", "def", "train", "(", "self", ",", "mode", "=", "True", ")", ":", "\n", "        ", "return", "super", "(", ")", ".", "train", "(", "mode", "and", "not", "self", ".", "frozen", ")", "\n", "\n", "\n", "", "", "class", "ADE20KResNet18TruncatedLayer4", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "\"\"\"ResNet-18 encoder pretrained on ADE20K with PPM decoder.\n\n    Adapted from https://github.com/CSAILVision/semantic-segmentation-pytorch\n    \"\"\"", "\n", "_LAYERS", "=", "[", "'layer0'", ",", "'layer1'", ",", "'layer2'", ",", "'layer3'", ",", "'layer4'", "]", "\n", "_LAYERS_IN", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "zip", "(", "_LAYERS", ",", "[", "3", ",", "128", ",", "64", ",", "128", ",", "256", "]", ")", "}", "\n", "_LAYERS_OUT", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "zip", "(", "_LAYERS", ",", "[", "128", ",", "64", ",", "128", ",", "256", ",", "512", "]", ")", "}", "\n", "_LAYERS_SCALE", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "zip", "(", "_LAYERS", ",", "[", "4", ",", "1", ",", "2", ",", "1", ",", "1", "]", ")", "}", "\n", "\n", "def", "__init__", "(", "self", ",", "frozen", "=", "False", ",", "scale_factor", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "# Adapt the default config to use ResNet18 + PPM-Deepsup model", "\n", "ARCH", "=", "'resnet18dilated-ppm_deepsup'", "\n", "DIR", "=", "osp", ".", "join", "(", "PRETRAINED_DIR", ",", "'ade20k'", ",", "ARCH", ")", "\n", "MITCfg", ".", "merge_from_file", "(", "osp", ".", "join", "(", "DIR", ",", "f'{ARCH}.yaml'", ")", ")", "\n", "MITCfg", ".", "MODEL", ".", "arch_encoder", "=", "MITCfg", ".", "MODEL", ".", "arch_encoder", ".", "lower", "(", ")", "\n", "MITCfg", ".", "DIR", "=", "DIR", "\n", "\n", "# Absolute paths of model weights", "\n", "MITCfg", ".", "MODEL", ".", "weights_encoder", "=", "osp", ".", "join", "(", "\n", "MITCfg", ".", "DIR", ",", "'encoder_'", "+", "MITCfg", ".", "TEST", ".", "checkpoint", ")", "\n", "\n", "assert", "osp", ".", "exists", "(", "MITCfg", ".", "MODEL", ".", "weights_encoder", ")", ",", "\"checkpoint does not exist!\"", "\n", "\n", "# Build encoder from pretrained weights", "\n", "old_stdout", "=", "sys", ".", "stdout", "# backup current stdout", "\n", "sys", ".", "stdout", "=", "open", "(", "os", ".", "devnull", ",", "\"w\"", ")", "\n", "resnet18", "=", "MITModelBuilder", ".", "build_encoder", "(", "\n", "arch", "=", "MITCfg", ".", "MODEL", ".", "arch_encoder", ",", "\n", "fc_dim", "=", "MITCfg", ".", "MODEL", ".", "fc_dim", ",", "\n", "weights", "=", "MITCfg", ".", "MODEL", ".", "weights_encoder", ")", "\n", "sys", ".", "stdout", "=", "old_stdout", "\n", "\n", "# Combine the ResNet first conv-bn-relu blocks and maxpool as", "\n", "# layer0", "\n", "resnet18", ".", "layer0", "=", "nn", ".", "Sequential", "(", "\n", "resnet18", ".", "conv1", ",", "\n", "resnet18", ".", "bn1", ",", "\n", "resnet18", ".", "relu1", ",", "\n", "resnet18", ".", "conv2", ",", "\n", "resnet18", ".", "bn2", ",", "\n", "resnet18", ".", "relu2", ",", "\n", "resnet18", ".", "conv3", ",", "\n", "resnet18", ".", "bn3", ",", "\n", "resnet18", ".", "relu3", ",", "\n", "resnet18", ".", "maxpool", ")", "\n", "\n", "# Combine the selected layers into a nn.Sequential", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "*", "[", "getattr", "(", "resnet18", ",", "layer", ")", "for", "layer", "in", "self", ".", "_LAYERS", "]", ")", "\n", "\n", "# If the model is frozen, it will always remain in eval mode", "\n", "# and the parameters will have requires_grad=False", "\n", "self", ".", "frozen", "=", "frozen", "\n", "if", "self", ".", "frozen", ":", "\n", "            ", "self", ".", "training", "=", "False", "\n", "\n", "# Output will be resized wrt scale_factor if not None.", "\n", "# If scale_factor < 0, the output will be resized to the input", "\n", "# size", "\n", "", "if", "scale_factor", "is", "not", "None", "and", "scale_factor", "<", "0", ":", "\n", "            ", "scale_factor", "=", "self", ".", "conv_scale_factor", "\n", "", "self", ".", "scale_factor", "=", "scale_factor", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "if", "self", ".", "scale_factor", "is", "not", "None", ":", "\n", "            ", "x", "=", "F", ".", "interpolate", "(", "\n", "x", ",", "scale_factor", "=", "self", ".", "scale_factor", ",", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "False", ")", "\n", "", "return", "x", "\n", "\n", "", "@", "property", "\n", "def", "input_nc", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_LAYERS_IN", "[", "self", ".", "_LAYERS", "[", "0", "]", "]", "\n", "\n", "", "@", "property", "\n", "def", "output_nc", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_LAYERS_OUT", "[", "self", ".", "_LAYERS", "[", "-", "1", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.PickMappingsFromMappingFeatures.__init__": [[886, 899], ["image.PickMappingsFromMappingFeatures.sanitize", "image.PickMappingsFromMappingFeatures.sanitize", "image.PickMappingsFromMappingFeatures.sanitize", "len", "len", "len", "len", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.PickMappingsFromMappingFeatures.sanitize", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.PickMappingsFromMappingFeatures.sanitize", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.PickMappingsFromMappingFeatures.sanitize", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["def", "frozen", "(", "self", ",", "frozen", ")", ":", "\n", "        ", "if", "isinstance", "(", "frozen", ",", "bool", ")", ":", "\n", "            ", "self", ".", "_frozen", "=", "frozen", "\n", "", "for", "p", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "p", ".", "requires_grad", "=", "not", "self", ".", "frozen", "\n", "\n", "", "", "def", "train", "(", "self", ",", "mode", "=", "True", ")", ":", "\n", "        ", "return", "super", "(", ")", ".", "train", "(", "\n", "mode", "and", "not", "self", ".", "frozen", ")", "\n", "\n", "", "def", "extra_repr", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "f\"scale_factor={self.scale_factor}\"", "if", "self", ".", "scale_factor", "is", "not", "None", "else", "\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.PickMappingsFromMappingFeatures.sanitize": [[900, 907], ["isinstance"], "methods", ["None"], ["\n", "", "", "class", "ADE20KResNet18TruncatedLayer0", "(", "ADE20KResNet18TruncatedLayer4", ")", ":", "\n", "    ", "_LAYERS", "=", "[", "'layer0'", "]", "\n", "\n", "\n", "", "class", "ADE20KResNet18TruncatedLayer1", "(", "ADE20KResNet18TruncatedLayer4", ")", ":", "\n", "    ", "_LAYERS", "=", "[", "'layer0'", ",", "'layer1'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.PickMappingsFromMappingFeatures._process": [[908, 932], ["torch.ones", "images.select_views.select_views.mappings.features.view", "zip", "images.select_views.select_views.select_views", "len", "max", "max", "max"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageMapping.select_views", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["\n", "", "class", "ADE20KResNet18TruncatedLayer2", "(", "ADE20KResNet18TruncatedLayer4", ")", ":", "\n", "    ", "_LAYERS", "=", "[", "'layer0'", ",", "'layer1'", ",", "'layer2'", "]", "\n", "\n", "\n", "", "class", "ADE20KResNet18TruncatedLayer3", "(", "ADE20KResNet18TruncatedLayer4", ")", ":", "\n", "    ", "_LAYERS", "=", "[", "'layer0'", ",", "'layer1'", ",", "'layer2'", ",", "'layer3'", "]", "\n", "\n", "\n", "", "class", "ADE20KResNet18Layer0", "(", "ADE20KResNet18TruncatedLayer4", ")", ":", "\n", "    ", "_LAYERS", "=", "[", "'layer0'", "]", "\n", "\n", "\n", "", "class", "ADE20KResNet18Layer1", "(", "ADE20KResNet18TruncatedLayer4", ")", ":", "\n", "    ", "_LAYERS", "=", "[", "'layer1'", "]", "\n", "\n", "\n", "", "class", "ADE20KResNet18Layer2", "(", "ADE20KResNet18TruncatedLayer4", ")", ":", "\n", "    ", "_LAYERS", "=", "[", "'layer2'", "]", "\n", "\n", "\n", "", "class", "ADE20KResNet18Layer3", "(", "ADE20KResNet18TruncatedLayer4", ")", ":", "\n", "    ", "_LAYERS", "=", "[", "'layer3'", "]", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.JitterMappingFeatures.__init__": [[945, 948], ["None"], "methods", ["None"], ["        ", "feature_pyramid", "=", "[", "]", "\n", "output_size", "=", "[", "\n", "int", "(", "s", "*", "self", ".", "scale_factor", "/", "self", ".", "conv_scale_factor", ")", "\n", "for", "s", "in", "x", ".", "shape", "[", "2", ":", "4", "]", "]", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.JitterMappingFeatures._process": [[949, 960], ["noise.clamp.clamp.clamp", "torch.randn"], "methods", ["None"], ["\n", "for", "layer", "in", "self", ".", "conv", ":", "\n", "            ", "x", "=", "layer", "(", "x", ")", "\n", "x_up", "=", "F", ".", "interpolate", "(", "\n", "x", ",", "size", "=", "output_size", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "feature_pyramid", ".", "append", "(", "x_up", ")", "\n", "\n", "", "return", "torch", ".", "cat", "(", "feature_pyramid", ",", "dim", "=", "1", ")", "\n", "\n", "\n", "", "", "def", "_instantiate_torchvision_resnet", "(", "\n", "arch", ",", "block", ",", "layers", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.CenterRoll.__init__": [[974, 978], ["isinstance"], "methods", ["None"], ["file_path", "=", "osp", ".", "join", "(", "model_dir", ",", "file_name", ")", "\n", "\n", "# Load from local weights", "\n", "if", "osp", ".", "exists", "(", "file_path", ")", ":", "\n", "            ", "state_dict", "=", "torch", ".", "load", "(", "file_path", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.CenterRoll._process": [[979, 1038], ["images.mappings.images.repeat_interleave", "torch_points3d.utils.multimodal.lexunique", "torch.cat.byte", "torch.arange().byte", "torch.cat", "torch_scatter.scatter_min", "torch_scatter.scatter_max", "torch.arange", "images.update_rollings", "w_max.int", "w_cost.min", "torch.arange", "int", "torch.arange", "torch.cat.float", "w_max.float"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.multimodal.lexunique", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.SameSettingImageData.update_rollings"], ["\n", "# Load ImageNet-pretrained weights from official torchvision URL", "\n", "# and save them locally", "\n", "", "else", ":", "\n", "            ", "url", "=", "torchvision", ".", "models", ".", "resnet", ".", "model_urls", "[", "arch", "]", "\n", "state_dict", "=", "torchvision", ".", "models", ".", "utils", ".", "load_state_dict_from_url", "(", "\n", "url", ",", "progress", "=", "progress", ",", "model_dir", "=", "model_dir", ",", "\n", "file_name", "=", "file_name", ")", "\n", "\n", "", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "", "return", "model", "\n", "\n", "\n", "", "class", "ResNet18TruncatedLayer4", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "_LAYERS", "=", "[", "'layer0'", ",", "'layer1'", ",", "'layer2'", ",", "'layer3'", ",", "'layer4'", "]", "\n", "_LAYERS_IN", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "zip", "(", "_LAYERS", ",", "[", "3", ",", "64", ",", "64", ",", "128", ",", "256", "]", ")", "}", "\n", "_LAYERS_OUT", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "zip", "(", "_LAYERS", ",", "[", "64", ",", "64", ",", "128", ",", "256", ",", "512", "]", ")", "}", "\n", "_LAYERS_SCALE", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "zip", "(", "_LAYERS", ",", "[", "4", ",", "1", ",", "2", ",", "2", ",", "2", "]", ")", "}", "\n", "\n", "def", "__init__", "(", "\n", "self", ",", "frozen", "=", "False", ",", "pretrained", "=", "True", ",", "scale_factor", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "# Instantiate the full ResNet", "\n", "resnet18", "=", "_instantiate_torchvision_resnet", "(", "\n", "'resnet18'", ",", "torchvision", ".", "models", ".", "resnet", ".", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "\n", "pretrained", ",", "True", ",", "**", "kwargs", ")", "\n", "\n", "# Combine the ResNet first conv1-bn1-relu-maxpool as layer0", "\n", "resnet18", ".", "layer0", "=", "nn", ".", "Sequential", "(", "\n", "resnet18", ".", "conv1", ",", "resnet18", ".", "bn1", ",", "resnet18", ".", "relu", ",", "resnet18", ".", "maxpool", ")", "\n", "\n", "# Combine the selected layers into a nn.Sequential", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "*", "[", "getattr", "(", "resnet18", ",", "layer", ")", "for", "layer", "in", "self", ".", "_LAYERS", "]", ")", "\n", "\n", "# If the model is frozen, it will always remain in eval mode", "\n", "# and the parameters will have requires_grad=False", "\n", "self", ".", "frozen", "=", "frozen", "\n", "if", "self", ".", "frozen", ":", "\n", "            ", "self", ".", "training", "=", "False", "\n", "\n", "# Output will be resized wrt scale_factor if not None.", "\n", "# If scale_factor < 0, the output will be resized to the input", "\n", "# size", "\n", "", "if", "scale_factor", "is", "not", "None", "and", "scale_factor", "<", "0", ":", "\n", "            ", "scale_factor", "=", "self", ".", "conv_scale_factor", "\n", "", "self", ".", "scale_factor", "=", "scale_factor", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "if", "self", ".", "scale_factor", "is", "not", "None", ":", "\n", "            ", "x", "=", "F", ".", "interpolate", "(", "\n", "x", ",", "scale_factor", "=", "self", ".", "scale_factor", ",", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "False", ")", "\n", "", "return", "x", "\n", "\n", "", "@", "property", "\n", "def", "input_nc", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_LAYERS_IN", "[", "self", ".", "_LAYERS", "[", "0", "]", "]", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.CropImageGroups.__init__": [[1054, 1061], ["None"], "methods", ["None"], ["def", "frozen", "(", "self", ",", "frozen", ")", ":", "\n", "        ", "if", "isinstance", "(", "frozen", ",", "bool", ")", ":", "\n", "            ", "self", ".", "_frozen", "=", "frozen", "\n", "", "for", "p", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "p", ".", "requires_grad", "=", "not", "self", ".", "frozen", "\n", "\n", "", "", "def", "train", "(", "self", ",", "mode", "=", "True", ")", ":", "\n", "        ", "return", "super", "(", ")", ".", "train", "(", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.CropImageGroups._process": [[1062, 1142], ["torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.arange", "all", "crop_families.items", "torch.logical_and", "torch.clamp", "torch.clamp", "torch.stack().long", "images[].update_cropping", "torch_points3d.core.multimodal.image.ImageData", "torch_points3d.core.multimodal.image.ImageData", "tuple", "min", "min", "crop_families.keys", "list", "zip", "tuple", "torch.stack", "crop_families.values"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.SameSettingImageData.update_cropping", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.mock.MockDatasetConfig.keys"], ["mode", "and", "not", "self", ".", "frozen", ")", "\n", "\n", "", "def", "extra_repr", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "f\"scale_factor={self.scale_factor}\"", "if", "self", ".", "scale_factor", "is", "not", "None", "else", "\"\"", "\n", "\n", "\n", "", "", "class", "ResNet18TruncatedLayer0", "(", "ResNet18TruncatedLayer4", ")", ":", "\n", "    ", "_LAYERS", "=", "[", "'layer0'", "]", "\n", "\n", "\n", "", "class", "ResNet18TruncatedLayer1", "(", "ResNet18TruncatedLayer4", ")", ":", "\n", "    ", "_LAYERS", "=", "[", "'layer0'", ",", "'layer1'", "]", "\n", "\n", "\n", "", "class", "ResNet18TruncatedLayer2", "(", "ResNet18TruncatedLayer4", ")", ":", "\n", "    ", "_LAYERS", "=", "[", "'layer0'", ",", "'layer1'", ",", "'layer2'", "]", "\n", "\n", "\n", "", "class", "ResNet18TruncatedLayer3", "(", "ResNet18TruncatedLayer4", ")", ":", "\n", "    ", "_LAYERS", "=", "[", "'layer0'", ",", "'layer1'", ",", "'layer2'", ",", "'layer3'", "]", "\n", "\n", "\n", "", "class", "ResNet18Layer0", "(", "ResNet18TruncatedLayer4", ")", ":", "\n", "    ", "_LAYERS", "=", "[", "'layer0'", "]", "\n", "\n", "\n", "", "class", "ResNet18Layer1", "(", "ResNet18TruncatedLayer4", ")", ":", "\n", "    ", "_LAYERS", "=", "[", "'layer1'", "]", "\n", "\n", "\n", "", "class", "ResNet18Layer2", "(", "ResNet18TruncatedLayer4", ")", ":", "\n", "    ", "_LAYERS", "=", "[", "'layer2'", "]", "\n", "\n", "\n", "", "class", "ResNet18Layer3", "(", "ResNet18TruncatedLayer4", ")", ":", "\n", "    ", "_LAYERS", "=", "[", "'layer3'", "]", "\n", "\n", "\n", "", "class", "ResNet18Layer4", "(", "ResNet18TruncatedLayer4", ")", ":", "\n", "    ", "_LAYERS", "=", "[", "'layer4'", "]", "\n", "\n", "\n", "", "class", "ResNet18Pyramid", "(", "ResNet18TruncatedLayer4", ")", ":", "\n", "    ", "def", "__init__", "(", "\n", "self", ",", "frozen", "=", "False", ",", "pretrained", "=", "True", ",", "scale_factor", "=", "-", "1", ",", "**", "kwargs", ")", ":", "\n", "        ", "assert", "scale_factor", "is", "not", "None", ",", "f'scale_factor cannot be None for feature pyramid.'", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "frozen", "=", "frozen", ",", "pretrained", "=", "pretrained", ",", "scale_factor", "=", "scale_factor", ",", "\n", "**", "kwargs", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "feature_pyramid", "=", "[", "]", "\n", "output_size", "=", "[", "\n", "int", "(", "s", "*", "self", ".", "scale_factor", "/", "self", ".", "conv_scale_factor", ")", "\n", "for", "s", "in", "x", ".", "shape", "[", "2", ":", "4", "]", "]", "\n", "\n", "for", "layer", "in", "self", ".", "conv", ":", "\n", "            ", "x", "=", "layer", "(", "x", ")", "\n", "x_up", "=", "F", ".", "interpolate", "(", "\n", "x", ",", "size", "=", "output_size", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "feature_pyramid", ".", "append", "(", "x_up", ")", "\n", "\n", "", "return", "torch", ".", "cat", "(", "feature_pyramid", ",", "dim", "=", "1", ")", "\n", "\n", "\n", "########################################################################", "\n", "#                              Cityscapes                              #", "\n", "########################################################################", "\n", "\n", "", "", "def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "\n", "\n", "", "class", "CityscapesBasicBlock", "(", "nn", ".", "Module", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.AddPixelHeightFeature._process": [[1167, 1177], ["torch.linspace().float", "feat.view().repeat.view().repeat.view().repeat", "torch.cat", "images.load", "torch.linspace", "feat.view().repeat.view().repeat.view"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load"], ["            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n", "\n", "", "", "class", "CityscapesResNet18", "(", "nn", ".", "Module", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.AddPixelWidthFeature._process": [[1183, 1193], ["torch.linspace().float", "feat.view().repeat.view().repeat.view().repeat", "torch.cat", "images.load", "torch.linspace", "feat.view().repeat.view().repeat.view"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "frozen", "=", "False", ",", "pretrained", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "128", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "# Hardcoded ResNet18 parameters", "\n", "layers", "=", "[", "2", ",", "2", ",", "2", ",", "2", "]", "\n", "block", "=", "CityscapesBasicBlock", "\n", "\n", "# Build the layers", "\n", "conv1", "=", "nn", ".", "Sequential", "(", "\n", "conv3x3", "(", "3", ",", "64", ",", "stride", "=", "2", ")", ",", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.RandomHorizontalFlip.__init__": [[1200, 1202], ["None"], "methods", ["None"], ["self", ".", "layer0", "=", "nn", ".", "Sequential", "(", "\n", "conv1", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ")", ",", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.RandomHorizontalFlip._process": [[1203, 1219], ["images.load", "torch.rand", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load"], ["nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "\n", "# Weight initialization schemes", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "\n", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "# Load pretrained weights", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ToFloatImage._process": [[1226, 1233], ["images.load", "images.x.float"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load"], ["", "self", ".", "frozen", "=", "frozen", "\n", "if", "self", ".", "frozen", ":", "\n", "            ", "self", ".", "training", "=", "False", "\n", "\n", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.TorchvisionTransform.__init__": [[1238, 1240], ["None"], "methods", ["None"], ["layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "index", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.TorchvisionTransform._process": [[1241, 1244], ["image.TorchvisionTransform.transform"], "methods", ["None"], ["            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.TorchvisionTransform.__repr__": [[1245, 1247], ["image.TorchvisionTransform.transform.__repr__"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.schedulers.lr_schedulers.LRScheduler.__repr__"], ["", "def", "forward", "(", "self", ",", "x", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "x0", "=", "self", ".", "layer0", "(", "x", ")", "# /4", "\n", "x1", "=", "self", ".", "layer1", "(", "x0", ")", "# /4", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ColorJitter.__init__": [[1254, 1260], ["torchvision.ColorJitter"], "methods", ["None"], ["def", "frozen", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_frozen", "\n", "\n", "", "@", "frozen", ".", "setter", "\n", "def", "frozen", "(", "self", ",", "frozen", ")", ":", "\n", "        ", "if", "isinstance", "(", "frozen", ",", "bool", ")", ":", "\n", "            ", "self", ".", "_frozen", "=", "frozen", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.GaussianBlur.__init__": [[1265, 1269], ["torchvision.GaussianBlur"], "methods", ["None"], ["        ", "return", "super", "(", ")", ".", "train", "(", "mode", "and", "not", "self", ".", "frozen", ")", "\n", "\n", "\n", "", "", "class", "CityscapesResNet18TruncatedLayer4", "(", "nn", ".", "Module", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.Normalize.__init__": [[1279, 1283], ["torchvision.Normalize"], "methods", ["None"], ["        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "# Initialize the full ResNet18", "\n", "resnet18", "=", "CityscapesResNet18", "(", "pretrained", "=", "pretrained", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.compose.ComposeMultiModal.__init__": [[8, 10], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "transforms", ")", ":", "\n", "        ", "self", ".", "transforms", "=", "transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.compose.ComposeMultiModal.__call__": [[11, 15], ["t"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "for", "t", "in", "self", ".", "transforms", ":", "\n", "            ", "args", "=", "t", "(", "*", "args", ")", "\n", "", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.compose.ComposeMultiModal.__repr__": [[16, 19], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "args", "=", "[", "'    {},'", ".", "format", "(", "t", ")", "for", "t", "in", "self", ".", "transforms", "]", "\n", "return", "'{}([\\n{}\\n])'", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "'\\n'", ".", "join", "(", "args", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.csr.CSRData.__init__": [[54, 79], ["csr.CSRData._sorted_indices_to_pointers", "torch.zeros", "torch.BoolTensor", "len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.csr.CSRData._sorted_indices_to_pointers", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["def", "__init__", "(", "self", ",", "pointers", ":", "torch", ".", "LongTensor", ",", "*", "args", ",", "dense", "=", "False", ",", "\n", "is_index_value", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Initialize the pointers and values.\n\n        Values are passed as args and stored in a list. They are expected to all\n        have the same size and support torch tensor indexing (i.e. they can be\n        torch tensor or CSRData objects themselves).\n\n        If `dense=True`, pointers are treated as a sorted dense tensor of\n        indices to be converted into pointer indices.\n\n        Optionally, a list of booleans `is_index_value` can be passed. It must\n        be the same size as *args and indicates, for each value, whether it \n        holds elements that should be treated as indices when stacking \n        CSRData objects into a CSRBatch. If so, the indices will be\n        updated wrt the cumulative size of the batched values.\n        \"\"\"", "\n", "self", ".", "pointers", "=", "CSRData", ".", "_sorted_indices_to_pointers", "(", "pointers", ")", "if", "dense", "else", "pointers", "\n", "self", ".", "values", "=", "[", "*", "args", "]", "if", "len", "(", "args", ")", ">", "0", "else", "None", "\n", "if", "is_index_value", "is", "None", "or", "is_index_value", "==", "[", "]", ":", "\n", "            ", "self", ".", "is_index_value", "=", "torch", ".", "zeros", "(", "self", ".", "num_values", ",", "dtype", "=", "torch", ".", "bool", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "is_index_value", "=", "torch", ".", "BoolTensor", "(", "is_index_value", ")", "\n", "# self.debug()", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.csr.CSRData.debug": [[81, 109], ["torch.all", "isinstance", "all", "isinstance", "len", "isinstance", "v.debug", "len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageMapping.debug", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "", "def", "debug", "(", "self", ")", ":", "\n", "# assert self.num_groups >= 1, \\", "\n", "#     \"pointer indices must cover at least one group.\"", "\n", "        ", "assert", "self", ".", "pointers", "[", "0", "]", "==", "0", ",", "\"The first pointer element must always be 0.\"", "\n", "assert", "torch", ".", "all", "(", "self", ".", "pointers", "[", "1", ":", "]", "-", "self", ".", "pointers", "[", ":", "-", "1", "]", ">=", "0", ")", ",", "\"pointer indices must be increasing.\"", "\n", "\n", "if", "self", ".", "values", "is", "not", "None", ":", "\n", "            ", "assert", "isinstance", "(", "self", ".", "values", ",", "list", ")", ",", "\"Values must be held in a list.\"", "\n", "assert", "all", "(", "[", "len", "(", "v", ")", "==", "self", ".", "num_items", "for", "v", "in", "self", ".", "values", "]", ")", ",", "\"All value objects must have the same size.\"", "\n", "assert", "len", "(", "self", ".", "values", "[", "0", "]", ")", "==", "self", ".", "num_items", ",", "\"pointers must cover the entire range of values.\"", "\n", "for", "v", "in", "self", ".", "values", ":", "\n", "                ", "if", "isinstance", "(", "v", ",", "CSRData", ")", ":", "\n", "                    ", "v", ".", "debug", "(", ")", "\n", "\n", "", "", "", "if", "self", ".", "values", "is", "not", "None", "and", "self", ".", "is_index_value", "is", "not", "None", ":", "\n", "            ", "assert", "isinstance", "(", "self", ".", "is_index_value", ",", "torch", ".", "BoolTensor", ")", ",", "\"is_index_value must be a torch.BoolTensor.\"", "\n", "assert", "self", ".", "is_index_value", ".", "dtype", "==", "torch", ".", "bool", ",", "\"is_index_value must be an tensor of booleans.\"", "\n", "assert", "self", ".", "is_index_value", ".", "ndim", "==", "1", ",", "\"is_index_value must be a 1D tensor.\"", "\n", "assert", "self", ".", "is_index_value", ".", "shape", "[", "0", "]", "==", "self", ".", "num_values", ",", "\"is_index_value size must match the number of value tensors.\"", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.csr.CSRData.to": [[110, 117], ["csr.CSRData.clone", "csr.CSRData.pointers.to", "range", "csr.CSRData.values[].to"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.clone", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to"], ["", "", "def", "to", "(", "self", ",", "device", ")", ":", "\n", "        ", "\"\"\"Move the CSRData to the specified device.\"\"\"", "\n", "out", "=", "self", ".", "clone", "(", ")", "\n", "out", ".", "pointers", "=", "out", ".", "pointers", ".", "to", "(", "device", ")", "\n", "for", "i", "in", "range", "(", "out", ".", "num_values", ")", ":", "\n", "            ", "out", ".", "values", "[", "i", "]", "=", "out", ".", "values", "[", "i", "]", ".", "to", "(", "device", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.csr.CSRData.cpu": [[118, 121], ["csr.CSRData.to"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to"], ["", "def", "cpu", "(", "self", ")", ":", "\n", "        ", "\"\"\"Move the CSRData to the CPU.\"\"\"", "\n", "return", "self", ".", "to", "(", "'cpu'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.csr.CSRData.cuda": [[122, 125], ["csr.CSRData.to"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to"], ["", "def", "cuda", "(", "self", ")", ":", "\n", "        ", "\"\"\"Move the CSRData to the first available GPU.\"\"\"", "\n", "return", "self", ".", "to", "(", "'cuda'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.csr.CSRData.device": [[126, 129], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "device", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "pointers", ".", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.csr.CSRData.num_groups": [[130, 133], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_groups", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "pointers", ".", "shape", "[", "0", "]", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.csr.CSRData.num_values": [[134, 137], ["len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "@", "property", "\n", "def", "num_values", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "values", ")", "if", "self", ".", "values", "is", "not", "None", "else", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.csr.CSRData.num_items": [[138, 141], ["csr.CSRData.pointers[].item"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_items", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "pointers", "[", "-", "1", "]", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.csr.CSRData.get_batch_type": [[142, 146], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_batch_type", "(", ")", ":", "\n", "        ", "\"\"\"Required by CSRBatch.from_csr_list.\"\"\"", "\n", "return", "CSRBatch", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.csr.CSRData.clone": [[147, 157], ["copy.copy", "copy.copy", "copy.copy"], "methods", ["None"], ["", "def", "clone", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Shallow copy of self. This may cause issues for certain types of\n        downstream operations but it saves time and memory. In practice,\n        it shouldn't in this project.\n        \"\"\"", "\n", "out", "=", "copy", ".", "copy", "(", "self", ")", "\n", "out", ".", "pointers", "=", "copy", ".", "copy", "(", "self", ".", "pointers", ")", "\n", "out", ".", "values", "=", "copy", ".", "copy", "(", "self", ".", "values", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.csr.CSRData._sorted_indices_to_pointers": [[158, 173], ["csr.CSRData._is_sorted", "torch.cat", "len", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor", "torch.where", "torch.LongTensor"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.csr.CSRData._is_sorted", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to"], ["", "@", "staticmethod", "\n", "def", "_sorted_indices_to_pointers", "(", "indices", ":", "torch", ".", "LongTensor", ")", ":", "\n", "        ", "\"\"\"\n        Convert pre-sorted dense indices to CSR format.\n        \"\"\"", "\n", "device", "=", "indices", ".", "device", "\n", "assert", "len", "(", "indices", ".", "shape", ")", "==", "1", ",", "\"Only 1D indices are accepted.\"", "\n", "assert", "indices", ".", "shape", "[", "0", "]", ">=", "1", ",", "\"At least one group index is required.\"", "\n", "assert", "CSRData", ".", "_is_sorted", "(", "indices", ")", ",", "\"Indices must be sorted in increasing order.\"", "\n", "pointers", "=", "torch", ".", "cat", "(", "[", "\n", "torch", ".", "LongTensor", "(", "[", "0", "]", ")", ".", "to", "(", "device", ")", ",", "\n", "torch", ".", "where", "(", "indices", "[", "1", ":", "]", ">", "indices", "[", ":", "-", "1", "]", ")", "[", "0", "]", "+", "1", ",", "\n", "torch", ".", "LongTensor", "(", "[", "indices", ".", "shape", "[", "0", "]", "]", ")", ".", "to", "(", "device", ")", "]", ")", "\n", "return", "pointers", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.csr.CSRData.reindex_groups": [[174, 196], ["torch.argsort", "csr.CSRData.insert_empty_groups"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.csr.CSRData.insert_empty_groups"], ["", "def", "reindex_groups", "(", "self", ",", "group_indices", ":", "torch", ".", "LongTensor", ",", "num_groups", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Returns a copy of self with modified pointers to account for new groups.\n        Affects the num_groups and the order of groups. Injects 0-length\n        pointers where need be.\n\n        By default, pointers are implicitly linked to the group indices in\n        range(0, self.num_groups). \n\n        Here we provide new group_indices for the existing pointers, with \n        group_indices[i] corresponding to the position of existing group i in \n        the new tensor. The indices missing from group_indices account for empty\n        groups to be injected.\n\n        The num_groups specifies the number of groups in the new tensor. If not\n        provided, it is inferred from the size of group_indices. \n        \"\"\"", "\n", "order", "=", "torch", ".", "argsort", "(", "group_indices", ")", "\n", "csr_new", "=", "self", "[", "order", "]", ".", "insert_empty_groups", "(", "\n", "group_indices", "[", "order", "]", ",", "\n", "num_groups", "=", "num_groups", ")", "\n", "return", "csr_new", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.csr.CSRData.insert_empty_groups": [[197, 230], ["csr.CSRData._is_sorted", "torch.cat", "torch.cat", "csr.CSRData.pointers.repeat_interleave", "max", "group_indices.max", "torch.LongTensor().to", "group_indices.to", "group_indices.to", "torch.LongTensor().to", "group_indices.max", "torch.LongTensor", "torch.LongTensor"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.csr.CSRData._is_sorted", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to"], ["", "def", "insert_empty_groups", "(", "self", ",", "group_indices", ":", "torch", ".", "LongTensor", ",", "\n", "num_groups", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Method called when in-place reindexing groups.\n\n        The group_indices are assumed to be sorted and group_indices[i]\n        corresponds to the position of existing group i in the new tensor. The\n        indices missing from group_indices correspond to empty groups to be\n        injected.\n\n        The num_groups specifies the number of groups in the new tensor. If not\n        provided, it is inferred from the size of group_indices.\n        \"\"\"", "\n", "assert", "self", ".", "num_groups", "==", "group_indices", ".", "shape", "[", "0", "]", ",", "\"New group indices must correspond to the existing number of groups\"", "\n", "assert", "CSRData", ".", "_is_sorted", "(", "group_indices", ")", ",", "\"New group indices must be sorted.\"", "\n", "\n", "if", "num_groups", "is", "not", "None", ":", "\n", "            ", "num_groups", "=", "max", "(", "group_indices", ".", "max", "(", ")", "+", "1", ",", "num_groups", ")", "\n", "", "else", ":", "\n", "            ", "num_groups", "=", "group_indices", ".", "max", "(", ")", "+", "1", "\n", "\n", "", "starts", "=", "torch", ".", "cat", "(", "[", "\n", "torch", ".", "LongTensor", "(", "[", "-", "1", "]", ")", ".", "to", "(", "self", ".", "device", ")", ",", "\n", "group_indices", ".", "to", "(", "self", ".", "device", ")", "]", ")", "\n", "ends", "=", "torch", ".", "cat", "(", "[", "\n", "group_indices", ".", "to", "(", "self", ".", "device", ")", ",", "\n", "torch", ".", "LongTensor", "(", "[", "num_groups", "]", ")", ".", "to", "(", "self", ".", "device", ")", "]", ")", "\n", "repeats", "=", "ends", "-", "starts", "\n", "self", ".", "pointers", "=", "self", ".", "pointers", ".", "repeat_interleave", "(", "repeats", ")", "\n", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.csr.CSRData._is_sorted": [[231, 234], ["torch.all"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_is_sorted", "(", "a", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "return", "torch", ".", "all", "(", "a", "[", ":", "-", "1", "]", "<=", "a", "[", "1", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.csr.CSRData._index_select_pointers": [[235, 265], ["torch.cat", "torch.arange().to", "[].repeat_interleave().to", "pointers[].repeat_interleave().to", "indices.max", "torch.zeros", "torch.cumsum", "torch.arange", "[].repeat_interleave", "pointers[].repeat_interleave", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to"], ["", "@", "staticmethod", "\n", "def", "_index_select_pointers", "(", "pointers", ":", "torch", ".", "LongTensor", ",", "\n", "indices", ":", "torch", ".", "LongTensor", ")", ":", "\n", "        ", "\"\"\"\n        Index selection of pointers.\n\n        Returns a new pointer tensor with updated pointers, along with an\n        indices tensor to be used to update any values tensor associated with\n        the input pointers.\n        \"\"\"", "\n", "assert", "indices", ".", "max", "(", ")", "<=", "pointers", ".", "shape", "[", "0", "]", "-", "2", "\n", "device", "=", "pointers", ".", "device", "\n", "\n", "# Create the new pointers", "\n", "pointers_new", "=", "torch", ".", "cat", "(", "[", "\n", "torch", ".", "zeros", "(", "1", ",", "dtype", "=", "pointers", ".", "dtype", ",", "device", "=", "device", ")", ",", "\n", "torch", ".", "cumsum", "(", "pointers", "[", "indices", "+", "1", "]", "-", "pointers", "[", "indices", "]", ",", "0", ")", "]", ")", "\n", "\n", "# Create the indexing tensor to select and order values.", "\n", "# Simply, we could have used a list of slices but we want to", "\n", "# avoid for loops and list concatenations to benefit from torch", "\n", "# capabilities.", "\n", "sizes", "=", "pointers_new", "[", "1", ":", "]", "-", "pointers_new", "[", ":", "-", "1", "]", "\n", "val_idx", "=", "torch", ".", "arange", "(", "pointers_new", "[", "-", "1", "]", ")", ".", "to", "(", "device", ")", "\n", "val_idx", "-=", "torch", ".", "arange", "(", "\n", "pointers_new", "[", "-", "1", "]", "+", "1", ")", "[", "pointers_new", "[", ":", "-", "1", "]", "]", ".", "repeat_interleave", "(", "\n", "sizes", ")", ".", "to", "(", "device", ")", "\n", "val_idx", "+=", "pointers", "[", "indices", "]", ".", "repeat_interleave", "(", "sizes", ")", ".", "to", "(", "device", ")", "\n", "\n", "return", "pointers_new", ",", "val_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.csr.CSRData.__getitem__": [[266, 295], ["torch_points3d.utils.multimodal.tensor_idx().to", "csr.CSRData.clone", "csr.CSRData.clone", "torch.LongTensor", "csr.CSRData._index_select_pointers", "torch_points3d.utils.multimodal.tensor_idx"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.clone", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.clone", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.csr.CSRData._index_select_pointers", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.multimodal.tensor_idx"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\"\n        Indexing CSRData format. Supports Numpy and torch indexing\n        mechanisms.\n\n        Return a copy of self with updated pointers and values.\n        \"\"\"", "\n", "idx", "=", "tensor_idx", "(", "idx", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "# Shallow copy self and edit pointers and values. This", "\n", "# preserves the class for CSRData subclasses.", "\n", "out", "=", "self", ".", "clone", "(", ")", "\n", "\n", "# If idx is empty, return an empty CSRData with empty values", "\n", "# of consistent type", "\n", "if", "idx", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "            ", "out", "=", "self", ".", "clone", "(", ")", "\n", "out", ".", "pointers", "=", "torch", ".", "LongTensor", "(", "[", "0", "]", ")", "\n", "out", ".", "values", "=", "[", "v", "[", "[", "]", "]", "for", "v", "in", "self", ".", "values", "]", "\n", "\n", "", "else", ":", "\n", "# Select the pointers and prepare the values indexing", "\n", "            ", "pointers", ",", "val_idx", "=", "CSRData", ".", "_index_select_pointers", "(", "self", ".", "pointers", ",", "idx", ")", "\n", "out", ".", "pointers", "=", "pointers", "\n", "out", ".", "values", "=", "[", "v", "[", "val_idx", "]", "for", "v", "in", "self", ".", "values", "]", "\n", "\n", "# out.debug()", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.csr.CSRData.__len__": [[296, 298], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_groups", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.csr.CSRData.__repr__": [[299, 303], ["getattr"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "info", "=", "[", "f\"{key}={getattr(self, key)}\"", "\n", "for", "key", "in", "[", "'num_groups'", ",", "'num_items'", ",", "'device'", "]", "]", "\n", "return", "f\"{self.__class__.__name__}({', '.join(info)})\"", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.csr.CSRBatch.__init__": [[317, 325], ["csr.CSRData.__init__"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["def", "__init__", "(", "self", ",", "pointers", ",", "*", "args", ",", "dense", "=", "False", ",", "is_index_value", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Basic constructor for a CSRBatch. Batches are rather\n        intended to be built using the from_csr_list() method.\n        \"\"\"", "\n", "super", "(", "CSRBatch", ",", "self", ")", ".", "__init__", "(", "\n", "pointers", ",", "*", "args", ",", "dense", "=", "dense", ",", "is_index_value", "=", "is_index_value", ")", "\n", "self", ".", "__sizes__", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.csr.CSRBatch.batch_pointers": [[326, 331], ["torch.cumsum", "torch.cat", "torch.LongTensor"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat"], ["", "@", "property", "\n", "def", "batch_pointers", "(", "self", ")", ":", "\n", "        ", "return", "torch", ".", "cumsum", "(", "\n", "torch", ".", "cat", "(", "(", "torch", ".", "LongTensor", "(", "[", "0", "]", ")", ",", "self", ".", "__sizes__", ")", ")", ",", "dim", "=", "0", ")", "if", "self", ".", "__sizes__", "is", "not", "None", "else", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.csr.CSRBatch.batch_items_sizes": [[332, 335], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "batch_items_sizes", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__sizes__", "if", "self", ".", "__sizes__", "is", "not", "None", "else", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.csr.CSRBatch.num_batch_items": [[336, 339], ["len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "@", "property", "\n", "def", "num_batch_items", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "__sizes__", ")", "if", "self", ".", "__sizes__", "is", "not", "None", "else", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.csr.CSRBatch.to": [[340, 346], ["csr.CSRData.to", "csr.CSRBatch.__sizes__.to"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to"], ["", "def", "to", "(", "self", ",", "device", ")", ":", "\n", "        ", "\"\"\"Move the CSRBatch to the specified device.\"\"\"", "\n", "out", "=", "super", "(", "CSRBatch", ",", "self", ")", ".", "to", "(", "device", ")", "\n", "out", ".", "__sizes__", "=", "self", ".", "__sizes__", ".", "to", "(", "device", ")", "if", "self", ".", "__sizes__", "is", "not", "None", "else", "None", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.csr.CSRBatch.from_csr_list": [[347, 417], ["isinstance", "type", "all", "all", "all", "torch.cumsum().to", "torch.cat", "range", "type.get_batch_type", "type.get_batch_type.", "torch.LongTensor", "isinstance", "all", "all", "isinstance", "values.append", "len", "isinstance", "torch.cumsum", "torch.LongTensor().to", "CSRBatch.from_csr_list", "numpy.array_equal", "torch.LongTensor", "torch.LongTensor", "torch.cumsum().to", "torch.cat", "torch.cat", "torch.LongTensor", "zip", "torch.cumsum", "zip", "v.max().item", "v.max"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageMapping.get_batch_type", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.csr.CSRBatch.from_csr_list", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat"], ["", "@", "staticmethod", "\n", "def", "from_csr_list", "(", "csr_list", ")", ":", "\n", "        ", "assert", "isinstance", "(", "csr_list", ",", "list", ")", "and", "len", "(", "csr_list", ")", ">", "0", "\n", "assert", "isinstance", "(", "csr_list", "[", "0", "]", ",", "CSRData", ")", ",", "\"All provided items must be CSRData objects.\"", "\n", "csr_type", "=", "type", "(", "csr_list", "[", "0", "]", ")", "\n", "assert", "all", "(", "[", "isinstance", "(", "csr", ",", "csr_type", ")", "for", "csr", "in", "csr_list", "]", ")", ",", "\"All provided items must have the same class.\"", "\n", "device", "=", "csr_list", "[", "0", "]", ".", "device", "\n", "assert", "all", "(", "[", "csr", ".", "device", "==", "device", "for", "csr", "in", "csr_list", "]", ")", ",", "\"All provided items must be on the same device.\"", "\n", "num_values", "=", "csr_list", "[", "0", "]", ".", "num_values", "\n", "assert", "all", "(", "[", "csr", ".", "num_values", "==", "num_values", "for", "csr", "in", "csr_list", "]", ")", ",", "\"All provided items must have the same number of values.\"", "\n", "is_index_value", "=", "csr_list", "[", "0", "]", ".", "is_index_value", "\n", "if", "is_index_value", "is", "not", "None", ":", "\n", "            ", "assert", "all", "(", "[", "np", ".", "array_equal", "(", "csr", ".", "is_index_value", ",", "is_index_value", ")", "\n", "for", "csr", "in", "csr_list", "]", ")", ",", "\"All provided items must have the same is_index_value.\"", "\n", "", "else", ":", "\n", "            ", "assert", "all", "(", "[", "csr", ".", "is_index_value", "is", "None", "for", "csr", "in", "csr_list", "]", ")", ",", "\"All provided items must have the same is_index_value.\"", "\n", "# for csr in csr_list:", "\n", "#     csr.debug()", "\n", "\n", "# Offsets are used to stack pointer indices and values identified as", "\n", "# \"index\" value by `is_index_value` without losing the indexing", "\n", "# information they carry.", "\n", "", "offsets", "=", "torch", ".", "cumsum", "(", "torch", ".", "LongTensor", "(", "\n", "[", "0", "]", "+", "[", "csr", ".", "num_items", "for", "csr", "in", "csr_list", "[", ":", "-", "1", "]", "]", ")", ",", "dim", "=", "0", ")", ".", "to", "(", "device", ")", "\n", "\n", "# Stack pointers", "\n", "pointers", "=", "torch", ".", "cat", "(", "(", "\n", "torch", ".", "LongTensor", "(", "[", "0", "]", ")", ".", "to", "(", "device", ")", ",", "\n", "*", "[", "csr", ".", "pointers", "[", "1", ":", "]", "+", "offset", "\n", "for", "csr", ",", "offset", "in", "zip", "(", "csr_list", ",", "offsets", ")", "]", ",", "\n", ")", ",", "dim", "=", "0", ")", "\n", "\n", "# Stack values", "\n", "values", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_values", ")", ":", "\n", "            ", "val_list", "=", "[", "csr", ".", "values", "[", "i", "]", "for", "csr", "in", "csr_list", "]", "\n", "if", "isinstance", "(", "csr_list", "[", "0", "]", ".", "values", "[", "i", "]", ",", "CSRData", ")", ":", "\n", "                ", "val", "=", "CSRBatch", ".", "from_csr_list", "(", "val_list", ")", "\n", "", "elif", "is_index_value", "[", "i", "]", ":", "\n", "# \"Index\" values are stacked with updated indices.", "\n", "# For mappings, this implies all elements designed by the", "\n", "# index_values must be used in. There can be no element outside", "\n", "# of the range of index_values", "\n", "                ", "offsets", "=", "torch", ".", "LongTensor", "(", "\n", "[", "0", "]", "+", "[", "\n", "v", ".", "max", "(", ")", ".", "item", "(", ")", "+", "1", "if", "v", ".", "shape", "[", "0", "]", ">", "0", "else", "0", "\n", "for", "v", "in", "val_list", "[", ":", "-", "1", "]", "]", ")", "\n", "cum_offsets", "=", "torch", ".", "cumsum", "(", "offsets", ",", "dim", "=", "0", ")", ".", "to", "(", "device", ")", "\n", "val", "=", "torch", ".", "cat", "(", "[", "\n", "v", "+", "o", "for", "v", ",", "o", "in", "zip", "(", "val_list", ",", "cum_offsets", ")", "]", ",", "dim", "=", "0", ")", "\n", "", "else", ":", "\n", "                ", "val", "=", "torch", ".", "cat", "(", "val_list", ",", "dim", "=", "0", ")", "\n", "", "values", ".", "append", "(", "val", ")", "\n", "\n", "# Create the Batch object, depending on the data type", "\n", "# Default of CSRData is CSRBatch, but subclasses of CSRData", "\n", "# may define their own batch class inheriting from CSRBatch.", "\n", "", "batch_type", "=", "csr_type", ".", "get_batch_type", "(", ")", "\n", "batch", "=", "batch_type", "(", "pointers", ",", "*", "values", ",", "dense", "=", "False", ",", "\n", "is_index_value", "=", "is_index_value", ")", "\n", "batch", ".", "__sizes__", "=", "torch", ".", "LongTensor", "(", "[", "csr", ".", "num_groups", "for", "csr", "in", "csr_list", "]", ")", "\n", "batch", ".", "__csr_type__", "=", "csr_type", "\n", "\n", "return", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.csr.CSRBatch.to_csr_list": [[418, 457], ["range", "RuntimeError", "isinstance", "values.append", "list", "csr.CSRBatch.__csr_type__", "range", "batch_value.to_csr_list", "zip", "zip", "range", "range", "batch_value[].max"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.csr.CSRBatch.to_csr_list"], ["", "def", "to_csr_list", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "__sizes__", "is", "None", ":", "\n", "            ", "raise", "RuntimeError", "(", "\n", "'Cannot reconstruct CSRData data list from batch because the '", "\n", "'batch object was not created using '", "\n", "'`CSRBatch.from_csr_list()`.'", ")", "\n", "\n", "", "group_pointers", "=", "self", ".", "batch_pointers", "\n", "item_pointers", "=", "self", ".", "pointers", "[", "group_pointers", "]", "\n", "\n", "# Recover pointers and index offsets for each CSRData item", "\n", "pointers", "=", "[", "\n", "self", ".", "pointers", "[", "group_pointers", "[", "i", "]", ":", "group_pointers", "[", "i", "+", "1", "]", "+", "1", "]", "\n", "-", "item_pointers", "[", "i", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_batch_items", ")", "]", "\n", "\n", "# Recover the values for each CSRData item", "\n", "values", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_values", ")", ":", "\n", "            ", "batch_value", "=", "self", ".", "values", "[", "i", "]", "\n", "if", "isinstance", "(", "batch_value", ",", "CSRData", ")", ":", "\n", "                ", "val", "=", "batch_value", ".", "to_csr_list", "(", ")", "\n", "", "elif", "self", ".", "is_index_value", "[", "i", "]", ":", "\n", "                ", "val", "=", "[", "\n", "batch_value", "[", "item_pointers", "[", "j", "]", ":", "item_pointers", "[", "j", "+", "1", "]", "]", "\n", "-", "(", "batch_value", "[", ":", "item_pointers", "[", "j", "]", "]", ".", "max", "(", ")", "+", "1", "if", "j", ">", "0", "else", "0", ")", "\n", "for", "j", "in", "range", "(", "self", ".", "num_batch_items", ")", "]", "\n", "", "else", ":", "\n", "                ", "val", "=", "[", "batch_value", "[", "item_pointers", "[", "j", "]", ":", "item_pointers", "[", "j", "+", "1", "]", "]", "\n", "for", "j", "in", "range", "(", "self", ".", "num_batch_items", ")", "]", "\n", "", "values", ".", "append", "(", "val", ")", "\n", "", "values", "=", "[", "list", "(", "x", ")", "for", "x", "in", "zip", "(", "*", "values", ")", "]", "\n", "\n", "csr_list", "=", "[", "\n", "self", ".", "__csr_type__", "(", "\n", "j", ",", "*", "v", ",", "dense", "=", "False", ",", "is_index_value", "=", "self", ".", "is_index_value", ")", "\n", "for", "j", ",", "v", "in", "zip", "(", "pointers", ",", "values", ")", "]", "\n", "\n", "return", "csr_list", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.csr.CSRBatch.__getitem__": [[458, 474], ["csr.CSRData.__getitem__", "csr.CSRBatch.__csr_type__"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.panoptic.scannet.ScannetPanoptic.__getitem__"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\"\n        Indexing CSRBatch format. Supports Numpy and torch indexing\n        mechanisms.\n\n        Indexing a CSRBatch breaks the reversible batching\n        mechanism between `from_csr_list` and `to_csr_list`. As a\n        result, the indexed output is a __csr_type__ from which the\n        original items can no longer be retrieved with to_csr_list`.\n        \"\"\"", "\n", "csr_batch", "=", "super", "(", "CSRBatch", ",", "self", ")", ".", "__getitem__", "(", "idx", ")", "\n", "out", "=", "self", ".", "__csr_type__", "(", "\n", "csr_batch", ".", "pointers", ",", "*", "csr_batch", ".", "values", ",", "dense", "=", "False", ",", "\n", "is_index_value", "=", "csr_batch", ".", "is_index_value", ")", "\n", "# out.debug()", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.csr.CSRBatch.__repr__": [[475, 480], ["getattr"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "info", "=", "[", "f\"{key}={getattr(self, key)}\"", "\n", "for", "key", "in", "[", "'num_batch_items'", ",", "'num_groups'", ",", "'num_items'", ",", "\n", "'device'", "]", "]", "\n", "return", "f\"{self.__class__.__name__}({', '.join(info)})\"", "\n", "", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.data.MMData.__init__": [[27, 34], ["data.MMData.debug", "setattr", "getattr"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageMapping.debug"], ["def", "__init__", "(", "self", ",", "data", ":", "Data", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "data", "=", "data", "\n", "self", ".", "modalities", "=", "kwargs", "\n", "self", ".", "mapping_key", "=", "MAPPING_KEY", "\n", "for", "k", "in", "self", ".", "data", ".", "keys", ":", "\n", "            ", "setattr", "(", "self", ",", "k", ",", "getattr", "(", "self", ".", "data", ",", "k", ")", ")", "\n", "", "self", ".", "debug", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.data.MMData.debug": [[35, 68], ["isinstance", "hasattr", "torch.unique", "data.MMData.modalities.items", "isinstance", "torch.unique.max", "torch.unique.max", "type"], "methods", ["None"], ["", "def", "debug", "(", "self", ")", ":", "\n", "        ", "assert", "isinstance", "(", "self", ".", "data", ",", "Data", ")", "\n", "\n", "# Ensure Data have the key attribute necessary for linking", "\n", "# points with modality mappings. Each point must have a", "\n", "# mapping, even if empty.", "\n", "# NB: just like images, the same point may be used multiple", "\n", "#  times.", "\n", "assert", "hasattr", "(", "self", ".", "data", ",", "self", ".", "mapping_key", ")", "\n", "assert", "'index'", "in", "self", ".", "mapping_key", ",", "f\"Key {self.mapping_key} must contain 'index' to benefit from \"", "f\"Batch mechanisms.\"", "\n", "idx", "=", "torch", ".", "unique", "(", "self", ".", "data", "[", "self", ".", "mapping_key", "]", ")", "\n", "assert", "idx", ".", "max", "(", ")", "+", "1", "==", "idx", ".", "shape", "[", "0", "]", "==", "self", ".", "num_points", ",", "f\"Discrepancy between the Data point indices and the mappings \"", "f\"indices. Data {self.mapping_key} counts {idx.shape[0]} unique \"", "f\"values with max={idx.max()}, with {self.num_points} points in \"", "f\"total.\"", "\n", "\n", "# Modality-specific checks", "\n", "for", "mod", ",", "data_mod", "in", "self", ".", "modalities", ".", "items", "(", ")", ":", "\n", "            ", "assert", "mod", "in", "MODALITY_NAMES", ",", "f\"Received kwarg={mod} but expected key to belong to \"", "f\"supported modalities: {MODALITY_NAMES}.\"", "\n", "\n", "assert", "isinstance", "(", "data_mod", ",", "MODALITY_FORMATS", "[", "mod", "]", ")", ",", "f\"Expected modality '{mod}' data to be of type \"", "f\"{MODALITY_FORMATS[mod]} but got type {type(data_mod)} \"", "f\"instead.\"", "\n", "# assert data_mod.num_points > 0", "\n", "assert", "self", ".", "num_points", "==", "data_mod", ".", "num_points", "or", "data_mod", ".", "num_points", "==", "0", ",", "f\"Discrepancy between the Data point indices and the '{mod}' \"", "f\"modality mappings. Data '{self.mapping_key}' counts \""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.data.MMData.__len__": [[72, 74], ["None"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "data", ".", "num_nodes", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.data.MMData.num_points": [[75, 78], ["len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "@", "property", "\n", "def", "num_points", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.data.MMData.num_node_features": [[79, 82], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_node_features", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "data", ".", "num_node_features", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.data.MMData.to": [[83, 89], ["data.MMData.clone", "data.MMData.data.to", "data_mod.to", "data.MMData.modalities.items"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.clone", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to"], ["", "def", "to", "(", "self", ",", "device", ")", ":", "\n", "        ", "out", "=", "self", ".", "clone", "(", ")", "\n", "out", ".", "data", "=", "out", ".", "data", ".", "to", "(", "device", ")", "\n", "out", ".", "modalities", "=", "{", "mod", ":", "data_mod", ".", "to", "(", "device", ")", "\n", "for", "mod", ",", "data_mod", "in", "out", ".", "modalities", ".", "items", "(", ")", "}", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.data.MMData.device": [[90, 94], ["data.MMData.modalities.values"], "methods", ["None"], ["", "@", "property", "\n", "def", "device", "(", "self", ")", ":", "\n", "        ", "for", "data_mod", "in", "self", ".", "modalities", ".", "values", "(", ")", ":", "\n", "            ", "return", "data_mod", ".", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.data.MMData.load": [[95, 99], ["data_mod.load", "data.MMData.modalities.items"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load"], ["", "", "def", "load", "(", "self", ")", ":", "\n", "        ", "self", ".", "modalities", "=", "{", "mod", ":", "data_mod", ".", "load", "(", ")", "\n", "for", "mod", ",", "data_mod", "in", "self", ".", "modalities", ".", "items", "(", ")", "}", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.data.MMData.clone": [[100, 105], ["data.MMData", "data.MMData.data.clone", "data_mod.clone", "data.MMData.modalities.items"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.clone", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.clone"], ["", "def", "clone", "(", "self", ")", ":", "\n", "        ", "return", "MMData", "(", "\n", "self", ".", "data", ".", "clone", "(", ")", ",", "\n", "**", "{", "mod", ":", "data_mod", ".", "clone", "(", ")", "\n", "for", "mod", ",", "data_mod", "in", "self", ".", "modalities", ".", "items", "(", ")", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.data.MMData.__getitem__": [[106, 134], ["torch_points3d.utils.multimodal.tensor_idx().to", "data.MMData.MMData.data.clone", "data.MMData.MMData.modalities.items", "torch.arange", "data.MMData.MMData", "data_mod.select_points", "torch_points3d.utils.multimodal.tensor_idx", "torch.is_tensor", "data.MMData.MMData.modalities.keys", "item.size"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.clone", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageMapping.select_points", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.multimodal.tensor_idx", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.mock.MockDatasetConfig.keys"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\"\n        Indexing mechanism on the points.\n\n        Returns a new copy of the indexed MMData, with updated modality\n        data and mappings. Supports torch and numpy indexing.\n        \"\"\"", "\n", "idx", "=", "tensor_idx", "(", "idx", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "# Index the Data first", "\n", "data", "=", "self", ".", "data", ".", "clone", "(", ")", "\n", "for", "key", ",", "item", "in", "self", ".", "data", ":", "\n", "            ", "if", "torch", ".", "is_tensor", "(", "item", ")", "and", "item", ".", "size", "(", "0", ")", "==", "self", ".", "data", ".", "num_nodes", ":", "\n", "                ", "data", "[", "key", "]", "=", "data", "[", "key", "]", "[", "idx", "]", "\n", "\n", "# Update the modality data and mappings wrt data key indices", "\n", "", "", "modalities", "=", "{", "mod", ":", "None", "for", "mod", "in", "self", ".", "modalities", ".", "keys", "(", ")", "}", "\n", "for", "mod", ",", "data_mod", "in", "self", ".", "modalities", ".", "items", "(", ")", ":", "\n", "            ", "modalities", "[", "mod", "]", "=", "data_mod", ".", "select_points", "(", "data", "[", "self", ".", "mapping_key", "]", ",", "\n", "mode", "=", "'pick'", ")", "\n", "\n", "# Update point indices to the new mappings length. This is", "\n", "# important to preserve the mappings and for multimodal data", "\n", "# batching mechanisms.", "\n", "", "data", "[", "self", ".", "mapping_key", "]", "=", "torch", ".", "arange", "(", "data", ".", "num_nodes", ",", "\n", "device", "=", "self", ".", "device", ")", "\n", "\n", "return", "MMData", "(", "data", ",", "**", "modalities", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.data.MMData.__repr__": [[135, 142], ["data.MMData.modalities.items"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "info", "=", "[", "f\"    data = {self.data}\"", "]", "\n", "info", "=", "info", "+", "[", "f\"    {mod} = {data_mod}\"", "\n", "for", "mod", ",", "data_mod", "in", "self", ".", "modalities", ".", "items", "(", ")", "]", "\n", "info", "=", "'\\n'", ".", "join", "(", "info", ")", "\n", "return", "f\"{self.__class__.__name__}(\\n{info}\\n)\"", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.data.MMBatch.__init__": [[152, 155], ["data.MMData.__init__"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["def", "__init__", "(", "self", ",", "data", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "MMBatch", ",", "self", ")", ".", "__init__", "(", "data", ",", "**", "kwargs", ")", "\n", "self", ".", "__sizes__", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.data.MMBatch.batch_pointers": [[156, 161], ["numpy.cumsum", "numpy.concatenate"], "methods", ["None"], ["", "@", "property", "\n", "def", "batch_pointers", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "cumsum", "(", "np", ".", "concatenate", "(", "(", "[", "0", "]", ",", "self", ".", "__sizes__", ")", ")", ")", "if", "self", ".", "__sizes__", "is", "not", "None", "else", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.data.MMBatch.batch_items_sizes": [[162, 165], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "batch_items_sizes", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__sizes__", "if", "self", ".", "__sizes__", "is", "not", "None", "else", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.data.MMBatch.num_batch_items": [[166, 170], ["len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "@", "property", "\n", "def", "num_batch_items", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "__sizes__", ")", "if", "self", ".", "__sizes__", "is", "not", "None", "else", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.data.MMBatch.clone": [[171, 178], ["data.MMBatch", "data.MMBatch.data.clone", "data_mod.clone", "data.MMBatch.modalities.items"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.clone", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.clone"], ["", "def", "clone", "(", "self", ")", ":", "\n", "        ", "out", "=", "MMBatch", "(", "\n", "self", ".", "data", ".", "clone", "(", ")", ",", "\n", "**", "{", "mod", ":", "data_mod", ".", "clone", "(", ")", "\n", "for", "mod", ",", "data_mod", "in", "self", ".", "modalities", ".", "items", "(", ")", "}", ")", "\n", "out", ".", "__sizes__", "=", "self", ".", "__sizes__", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.data.MMBatch.from_mm_data_list": [[179, 205], ["all", "all", "torch_geometric.data.Batch.from_data_list", "Batch.from_data_list.MMBatch", "numpy.array", "isinstance", "data_mod.get_batch_type().from_data_list", "len", "isinstance", "mm_data_list[].modalities.items", "len", "set", "set", "data_mod.get_batch_type", "mm_data.modalities.keys", "mm_data_list[].modalities.keys"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.pair.DensePairBatch.from_data_list", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.pair.DensePairBatch.from_data_list", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageMapping.get_batch_type", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.mock.MockDatasetConfig.keys", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.mock.MockDatasetConfig.keys"], ["", "@", "staticmethod", "\n", "def", "from_mm_data_list", "(", "mm_data_list", ")", ":", "\n", "        ", "assert", "isinstance", "(", "mm_data_list", ",", "list", ")", "and", "len", "(", "mm_data_list", ")", ">", "0", "\n", "assert", "all", "(", "[", "isinstance", "(", "mm_data", ",", "MMData", ")", "for", "mm_data", "in", "mm_data_list", "]", ")", "\n", "assert", "all", "(", "[", "set", "(", "mm_data", ".", "modalities", ".", "keys", "(", ")", ")", "\n", "==", "set", "(", "mm_data_list", "[", "0", "]", ".", "modalities", ".", "keys", "(", ")", ")", "\n", "for", "mm_data", "in", "mm_data_list", "]", ")", ",", "\"All MMData in the list must have the same modalities.\"", "\n", "\n", "# Convert list of Data to Batch", "\n", "data", "=", "Batch", ".", "from_data_list", "(", "\n", "[", "mm_data", ".", "data", "for", "mm_data", "in", "mm_data_list", "]", ")", "\n", "\n", "# Convert list of modality-specific data to their batch", "\n", "# counterpart", "\n", "modalities", "=", "{", "mod", ":", "data_mod", ".", "get_batch_type", "(", ")", ".", "from_data_list", "(", "\n", "[", "mm_data", ".", "modalities", "[", "mod", "]", "for", "mm_data", "in", "mm_data_list", "]", ")", "\n", "for", "mod", ",", "data_mod", "in", "mm_data_list", "[", "0", "]", ".", "modalities", ".", "items", "(", ")", "}", "\n", "\n", "# Instantiate the MMBatch and set the __sizes__ to allow input", "\n", "# MMData list MMBatch.recovery with to_mm_data_list()", "\n", "batch", "=", "MMBatch", "(", "data", ",", "**", "modalities", ")", "\n", "batch", ".", "__sizes__", "=", "np", ".", "array", "(", "\n", "[", "len", "(", "mm_data", ")", "for", "mm_data", "in", "mm_data_list", "]", ")", "\n", "\n", "return", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.data.MMBatch.to_mm_data_list": [[206, 226], ["data.MMBatch.data.to_data_list", "RuntimeError", "data_mod.to_data_list", "data.MMData", "data.MMBatch.modalities.items", "range", "zip", "mods_dict_list.items"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageBatch.to_data_list", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageBatch.to_data_list"], ["", "def", "to_mm_data_list", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "__sizes__", "is", "None", ":", "\n", "            ", "raise", "RuntimeError", "(", "\n", "'Cannot reconstruct multimodal data list from batch '", "\n", "'because the batch object was not created using '", "\n", "'`MMBatch.from_mm_data_list()`.'", ")", "\n", "\n", "", "data_list", "=", "self", ".", "data", ".", "to_data_list", "(", ")", "\n", "\n", "mods_dict_list", "=", "{", "\n", "mod", ":", "data_mod", ".", "to_data_list", "(", ")", "\n", "for", "mod", ",", "data_mod", "in", "self", ".", "modalities", ".", "items", "(", ")", "}", "\n", "mods_list_dict", "=", "[", "{", "\n", "mod", ":", "data_mod", "[", "i", "]", "\n", "for", "mod", ",", "data_mod", "in", "mods_dict_list", ".", "items", "(", ")", "}", "\n", "for", "i", "in", "range", "(", "self", ".", "num_batch_items", ")", "]", "\n", "\n", "return", "[", "MMData", "(", "data", ",", "**", "modalities", ")", "\n", "for", "data", ",", "modalities", "\n", "in", "zip", "(", "data_list", ",", "mods_list_dict", ")", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.SameSettingImageData.__init__": [[225, 272], ["numpy.empty", "torch.empty", "numpy.array", "pos.double", "opk.double", "torch.zeros", "torch.zeros"], "methods", ["None"], [".", "append", "(", "normalization", "(", "output_nc", ")", ")", "\n", ".", "append", "(", "activation", "(", ")", ")", ")", "\n", "\n", "if", "input_nc", "!=", "output_nc", ":", "\n", "            ", "self", ".", "downsample", "=", "(", "\n", "Seq", "(", ")", ".", "append", "(", "convolution", "(", "\n", "input_nc", ",", "\n", "output_nc", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ")", ")", "\n", ".", "append", "(", "normalization", "(", "output_nc", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "downsample", "=", "None", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "x", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "out", "=", "self", ".", "block", "(", "x", ")", "\n", "if", "self", ".", "downsample", ":", "\n", "            ", "out", "+=", "self", ".", "downsample", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "out", "+=", "x", "\n", "", "return", "out", "\n", "\n", "\n", "", "", "_local_modules", "=", "sys", ".", "modules", "[", "__name__", "]", "\n", "\n", "\n", "class", "ResNetDown", "(", "nn", ".", "Module", ",", "ABC", ")", ":", "\n", "    ", "\"\"\"\n    Resnet block that looks like\n\n    in --- strided conv ---- Block ---- sum --[... N times]\n                         |              |\n                         |-- 1x1 - BN --|\n    \"\"\"", "\n", "\n", "CONVOLUTION", "=", "\"Conv2d\"", "\n", "ACTIVATION", "=", "\"ReLU\"", "\n", "\n", "def", "__init__", "(", "\n", "self", ",", "down_conv_nn", "=", "[", "]", ",", "kernel_size", "=", "2", ",", "dilation", "=", "1", ",", "stride", "=", "2", ",", "N", "=", "1", ",", "\n", "padding", "=", "0", ",", "block", "=", "\"ResBlock\"", ",", "padding_mode", "=", "'reflect'", ",", "\n", "normalization", "=", "'BatchNorm2d'", ",", "weight_standardization", "=", "False", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "# If an empty down_conv_nn or channel sizes smaller than 1 are", "\n", "# passed, the ResNetDown will simply become a pass-through", "\n", "# Identity module", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.SameSettingImageData.debug": [[275, 394], ["all", "isinstance", "len", "len", "isinstance", "isinstance", "torch.unique", "torch.arange", "image.SameSettingImageData.mappings.debug", "getattr", "isinstance", "getattr", "isinstance", "getattr", "isinstance", "tuple", "len", "tuple", "len", "type", "zip", "type", "type", "image.SameSettingImageData.mappings.pixels.max", "type", "getattr.squeeze", "type", "getattr.squeeze", "getattr.squeeze", "getattr.squeeze"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageMapping.debug", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["self", ".", "blocks", "=", "None", "\n", "return", "\n", "\n", "# Recover the block module", "\n", "", "block", "=", "getattr", "(", "_local_modules", ",", "block", ")", "\n", "\n", "# Compute the number of channels for the ResNetDown modules", "\n", "nc_in", ",", "nc_stride_out", ",", "nc_block_in", ",", "nc_out", "=", "self", ".", "_parse_conv_nn", "(", "\n", "down_conv_nn", ",", "stride", ",", "N", ")", "\n", "\n", "# Recover the convolution and activation modules", "\n", "if", "weight_standardization", ":", "\n", "            ", "conv", "=", "getattr", "(", "_local_modules", ",", "self", ".", "CONVOLUTION", "+", "'WS'", ")", "\n", "activation", "=", "getattr", "(", "_local_modules", ",", "self", ".", "ACTIVATION", "+", "'WS'", ")", "\n", "", "else", ":", "\n", "            ", "conv", "=", "getattr", "(", "nn", ",", "self", ".", "CONVOLUTION", ")", "\n", "activation", "=", "getattr", "(", "nn", ",", "self", ".", "ACTIVATION", ")", "\n", "\n", "# Recover the normalization module from torch.nn, for GroupNorm", "\n", "# the number of groups is set to distribute ~16 channels per", "\n", "# group: https://arxiv.org/pdf/1803.08494.pdf", "\n", "", "if", "normalization", "==", "'GroupNorm'", ":", "\n", "            ", "norm", "=", "lambda", "nc", ":", "nn", ".", "GroupNorm", "(", "max", "(", "nc", "//", "16", ",", "1", ")", ",", "nc", ")", "\n", "", "else", ":", "\n", "            ", "norm", "=", "getattr", "(", "nn", ",", "normalization", ")", "\n", "\n", "# Build the initial strided convolution", "\n", "", "self", ".", "conv_in", "=", "(", "\n", "Seq", "(", ")", ".", "append", "(", "conv", "(", "\n", "in_channels", "=", "nc_in", ",", "\n", "out_channels", "=", "nc_stride_out", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "dilation", "=", "dilation", ",", "\n", "padding", "=", "padding", ",", "\n", "padding_mode", "=", "padding_mode", ")", ")", "\n", ".", "append", "(", "norm", "(", "nc_stride_out", ")", ")", "\n", ".", "append", "(", "activation", "(", ")", ")", ")", "\n", "\n", "# Build the N subsequent blocks", "\n", "if", "N", ">", "0", ":", "\n", "            ", "self", ".", "blocks", "=", "Seq", "(", ")", "\n", "for", "_", "in", "range", "(", "N", ")", ":", "\n", "                ", "self", ".", "blocks", ".", "append", "(", "block", "(", "nc_block_in", ",", "nc_out", ",", "conv", ",", "\n", "norm", ",", "activation", ")", ")", "\n", "nc_block_in", "=", "nc_out", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "blocks", "=", "None", "\n", "\n", "", "", "def", "_parse_conv_nn", "(", "self", ",", "down_conv_nn", ",", "stride", ",", "N", ")", ":", "\n", "        ", "if", "is_list", "(", "down_conv_nn", "[", "0", "]", ")", ":", "\n", "            ", "down_conv_nn", "=", "down_conv_nn", "[", "0", "]", "\n", "", "assert", "len", "(", "down_conv_nn", ")", "==", "2", ",", "f\"ResNetDown expects down_conv_nn to have length of 2 to carry \"", "f\"(nc_in, nc_out) but got len(down_conv_nn)={len(down_conv_nn)}.\"", "\n", "nc_in", ",", "nc_out", "=", "down_conv_nn", "\n", "nc_stride_out", "=", "nc_in", "if", "stride", ">", "1", "and", "N", ">", "0", "else", "nc_out", "\n", "nc_block_in", "=", "nc_stride_out", "\n", "return", "nc_in", ",", "nc_stride_out", ",", "nc_block_in", ",", "nc_out", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "self", ".", "conv_in", ":", "\n", "            ", "x", "=", "self", ".", "conv_in", "(", "x", ")", "\n", "", "if", "self", ".", "blocks", ":", "\n", "            ", "x", "=", "self", ".", "blocks", "(", "x", ")", "\n", "", "return", "x", "\n", "\n", "\n", "", "", "class", "ResNetUp", "(", "ResNetDown", ",", "ABC", ")", ":", "\n", "    ", "\"\"\"Same as ResNetDown but for the Decoder.\"\"\"", "\n", "\n", "CONVOLUTION", "=", "\"ConvTranspose2d\"", "\n", "\n", "def", "__init__", "(", "self", ",", "up_conv_nn", "=", "[", "]", ",", "kernel_size", "=", "2", ",", "dilation", "=", "1", ",", "stride", "=", "2", ",", "N", "=", "1", ",", "\n", "padding", "=", "0", ",", "padding_mode", "=", "'zeros'", ",", "normalization", "=", "'BatchNorm2d'", ",", "\n", "weight_standardization", "=", "False", ",", "skip_first", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "skip_first", "=", "skip_first", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "down_conv_nn", "=", "up_conv_nn", ",", "kernel_size", "=", "kernel_size", ",", "\n", "dilation", "=", "dilation", ",", "stride", "=", "stride", ",", "N", "=", "N", ",", "padding", "=", "padding", ",", "\n", "padding_mode", "=", "padding_mode", ",", "normalization", "=", "normalization", ",", "\n", "weight_standardization", "=", "weight_standardization", ",", "**", "kwargs", ")", "\n", "\n", "", "def", "_parse_conv_nn", "(", "self", ",", "up_conv_nn", ",", "stride", ",", "N", ")", ":", "\n", "        ", "if", "is_list", "(", "up_conv_nn", "[", "0", "]", ")", ":", "\n", "            ", "up_conv_nn", "=", "up_conv_nn", "[", "0", "]", "\n", "\n", "", "if", "self", ".", "skip_first", ":", "\n", "            ", "assert", "len", "(", "up_conv_nn", ")", "==", "2", ",", "f\"ResNetUp with skip_first=True expects down_conv_nn to have \"", "f\"length of 2 to carry (nc_in, nc_out) but got \"", "f\"len(up_conv_nn)={len(up_conv_nn)}.\"", "\n", "", "else", ":", "\n", "            ", "assert", "len", "(", "up_conv_nn", ")", "==", "3", ",", "f\"ResNetUp with skip_first=False expects up_conv_nn to have \"", "f\"length of 3 to carry (nc_in, nc_skip_in, nc_out) but got \"", "f\"len(up_conv_nn)={len(up_conv_nn)}.\"", "\n", "\n", "", "if", "self", ".", "skip_first", ":", "\n", "            ", "nc_in", ",", "nc_out", "=", "up_conv_nn", "\n", "nc_stride_out", "=", "nc_in", "if", "stride", ">", "1", "and", "N", ">", "0", "else", "nc_out", "\n", "nc_block_in", "=", "nc_stride_out", "\n", "", "else", ":", "\n", "            ", "nc_in", ",", "nc_skip_in", ",", "nc_out", "=", "up_conv_nn", "\n", "nc_stride_out", "=", "nc_in", "if", "stride", ">", "1", "and", "N", ">", "0", "else", "nc_out", "\n", "nc_block_in", "=", "nc_stride_out", "+", "nc_skip_in", "\n", "\n", "", "return", "nc_in", ",", "nc_stride_out", ",", "nc_block_in", ",", "nc_out", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "skip", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "self", ".", "skip_first", ":", "\n", "            ", "if", "skip", "is", "not", "None", ":", "\n", "                ", "x", "=", "torch", ".", "cat", "(", "(", "x", ",", "skip", ")", ",", "dim", "=", "1", ")", "\n", "", "if", "self", ".", "conv_in", ":", "\n", "                ", "x", "=", "self", ".", "conv_in", "(", "x", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "self", ".", "conv_in", ":", "\n", "                ", "x", "=", "self", ".", "conv_in", "(", "x", ")", "\n", "", "if", "skip", "is", "not", "None", ":", "\n", "                ", "x", "=", "torch", ".", "cat", "(", "(", "x", ",", "skip", ")", ",", "dim", "=", "1", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.SameSettingImageData.to_dict": [[395, 397], ["getattr"], "methods", ["None"], ["", "", "if", "self", ".", "blocks", ":", "\n", "            ", "x", "=", "self", ".", "blocks", "(", "x", ")", "\n", "", "return", "x", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.SameSettingImageData.num_views": [[398, 401], ["None"], "methods", ["None"], ["\n", "", "def", "extra_repr", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "f\"skip_first={self.skip_first}\"", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.SameSettingImageData.has_opk": [[402, 405], ["getattr"], "methods", ["None"], ["\n", "", "", "class", "UnaryConv", "(", "nn", ".", "Module", ",", "ABC", ")", ":", "\n", "    ", "\"\"\"1x1 convolution on image.\"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.SameSettingImageData.has_extrinsic": [[406, 409], ["getattr"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "normalization", "=", "None", ",", "activation", "=", "None", ",", "\n", "weight_standardization", "=", "False", ",", "in_drop", "=", "0", ",", "out_drop", "=", "0", ",", "\n", "persistent_drop", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.SameSettingImageData.is_pinhole": [[410, 414], ["any", "getattr"], "methods", ["None"], ["# Build the input Dropout if any", "\n", "if", "in_drop", "is", "None", "or", "in_drop", "<=", "0", ":", "\n", "            ", "self", ".", "input_dropout", "=", "None", "\n", "", "elif", "persistent_drop", ":", "\n", "            ", "self", ".", "input_dropout", "=", "PersistentDropout2d", "(", "input_nc", ",", "p", "=", "in_drop", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.SameSettingImageData.is_fisheye": [[415, 419], ["any", "getattr"], "methods", ["None"], ["", "else", ":", "\n", "            ", "self", ".", "input_dropout", "=", "Dropout2d", "(", "p", "=", "in_drop", ",", "inplace", "=", "True", ")", "\n", "\n", "# Recover the normalization module from torch.nn, for GroupNorm", "\n", "# the number of groups is set to distribute ~16 channels per", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.SameSettingImageData.is_equirectangular": [[420, 423], ["None"], "methods", ["None"], ["# group: https://arxiv.org/pdf/1803.08494.pdf", "\n", "", "if", "normalization", "is", "None", ":", "\n", "            ", "self", ".", "norm", "=", "None", "\n", "", "elif", "normalization", "==", "'GroupNorm'", ":", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.SameSettingImageData.intrinsic_pinhole": [[424, 440], ["torch.eye().repeat", "ValueError", "torch.eye"], "methods", ["None"], ["            ", "self", ".", "norm", "=", "lambda", "nc", ":", "nn", ".", "GroupNorm", "(", "max", "(", "nc", "//", "16", ",", "1", ")", ",", "nc", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "norm", "=", "getattr", "(", "nn", ",", "normalization", ")", "\n", "\n", "# Build the 1x1 convolution and activation", "\n", "", "if", "weight_standardization", ":", "\n", "            ", "self", ".", "conv", "=", "Conv2dWS", "(", "input_nc", ",", "output_nc", ",", "stride", "=", "1", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "activation", "=", "getattr", "(", "_local_modules", ",", "activation", "+", "'WS'", ")", "if", "activation", "is", "not", "None", "else", "None", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "input_nc", ",", "output_nc", ",", "stride", "=", "1", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "activation", "=", "getattr", "(", "nn", ",", "activation", ")", "if", "activation", "is", "not", "None", "else", "None", "\n", "\n", "# Build the output Dropout if any", "\n", "", "if", "out_drop", "is", "None", "or", "out_drop", "<=", "0", ":", "\n", "            ", "self", ".", "output_dropout", "=", "None", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.SameSettingImageData.intrinsic_fisheye": [[441, 455], ["ValueError", "torch.stack"], "methods", ["None"], ["", "elif", "persistent_drop", ":", "\n", "            ", "self", ".", "output_dropout", "=", "PersistentDropout2d", "(", "output_nc", ",", "p", "=", "out_drop", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "output_dropout", "=", "Dropout2d", "(", "p", "=", "out_drop", ",", "inplace", "=", "True", ")", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "x", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "self", ".", "input_dropout", ":", "\n", "            ", "x", "=", "self", ".", "input_dropout", "(", "x", ",", "**", "kwargs", ")", "\n", "", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "if", "self", ".", "norm", ":", "\n", "            ", "x", "=", "self", ".", "norm", "(", "x", ")", "\n", "", "if", "self", ".", "activation", ":", "\n", "            ", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "", "if", "self", ".", "output_dropout", ":", "\n", "            ", "x", "=", "self", ".", "output_dropout", "(", "x", ",", "**", "kwargs", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.SameSettingImageData.axes": [[456, 467], ["torch.cat", "image.SameSettingImageData.extrinsic[].transpose", "ValueError", "torch_points3d.core.multimodal.visibility.pose_to_rotation_matrix_cuda().unsqueeze", "image.SameSettingImageData.opk.view", "torch_points3d.core.multimodal.visibility.pose_to_rotation_matrix_cuda"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.visibility.pose_to_rotation_matrix_cuda"], ["", "return", "x", "\n", "\n", "\n", "", "", "class", "Dropout2d", "(", "nn", ".", "Dropout2d", ")", ":", "\n", "    ", "\"\"\" Dropout2d with kwargs support. \"\"\"", "\n", "def", "forward", "(", "self", ",", "input", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "super", "(", ")", ".", "forward", "(", "input", ")", "\n", "\n", "\n", "", "", "class", "PersistentDropout2d", "(", "nn", ".", "Module", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.SameSettingImageData.num_points": [[468, 474], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.SameSettingImageData.img_size": [[475, 481], ["tuple", "int"], "methods", ["None"], ["\n", "def", "__init__", "(", "self", ",", "input_nc", ",", "p", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "input_nc", "=", "input_nc", "\n", "self", ".", "p", "=", "p", "\n", "self", ".", "mask", "=", "None", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.SameSettingImageData.ref_size": [[492, 506], ["tuple", "len", "len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["            ", "self", ".", "mask", "=", "None", "\n", "return", "x", "\n", "\n", "# Reset the feature dropout mask", "\n", "", "if", "self", ".", "mask", "is", "None", "or", "reset", ":", "\n", "            ", "mask", "=", "x", ".", "new_empty", "(", "1", ",", "self", ".", "input_nc", ",", "1", ",", "1", ",", "requires_grad", "=", "False", ")", "\n", "mask", "=", "mask", ".", "bernoulli_", "(", "1", "-", "self", ".", "p", ")", "\n", "self", ".", "mask", "=", "mask", ".", "div_", "(", "1", "-", "self", ".", "p", ")", "\n", "\n", "", "return", "x", "*", "self", ".", "mask", ".", "expand_as", "(", "x", ")", "\n", "\n", "", "def", "extra_repr", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "f\"input_nc={self.input_nc}, p={self.p}\"", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.SameSettingImageData.pixel_dtype": [[507, 517], ["max", "torch.iinfo"], "methods", ["None"], ["", "", "SPECIAL_NAMES", "=", "[", "\"block_names\"", "]", "\n", "\n", "\n", "class", "UNet", "(", "nn", ".", "Module", ",", "ABC", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.SameSettingImageData.proj_upscale": [[527, 542], ["None"], "methods", ["None"], ["\n", "\n", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "# Detect which options format has been used to define the model", "\n", "if", "is_list", "(", "opt", ".", "down_conv", ")", "or", "\"down_conv_nn\"", "not", "in", "opt", ".", "down_conv", "or", "is_list", "(", "opt", ".", "up_conv", ")", "or", "'up_conv_nn'", "not", "in", "opt", ".", "up_conv", ":", "\n", "            ", "raise", "NotImplementedError", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.SameSettingImageData.proj_size": [[543, 552], ["tuple", "int"], "methods", ["None"], ["", "else", ":", "\n", "            ", "self", ".", "_init_from_compact_format", "(", "opt", ")", "\n", "\n", "", "", "def", "_init_from_compact_format", "(", "self", ",", "opt", ")", ":", "\n", "# Down modules", "\n", "        ", "self", ".", "down_modules", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "opt", ".", "down_conv", ".", "down_conv_nn", ")", ")", ":", "\n", "            ", "down_module", "=", "self", ".", "_build_module", "(", "opt", ".", "down_conv", ",", "i", ",", "\"DOWN\"", ")", "\n", "self", ".", "down_modules", ".", "append", "(", "down_module", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.SameSettingImageData.rollings": [[564, 577], ["rollings.to"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to"], ["            ", "up_module", "=", "self", ".", "_build_module", "(", "opt", ".", "up_conv", ",", "i", ",", "\"UP\"", ")", "\n", "self", ".", "up_modules", ".", "append", "(", "up_module", ")", "\n", "\n", "# Final 1x1 conv", "\n", "", "if", "hasattr", "(", "opt", ",", "\"last_conv\"", ")", "and", "opt", ".", "last_conv", "is", "not", "None", ":", "\n", "            ", "last", "=", "self", ".", "_build_module", "(", "opt", ".", "last_conv", ",", "0", ",", "\"LAST\"", ")", "\n", "self", ".", "last", "=", "last", "\n", "", "else", ":", "\n", "            ", "self", ".", "last", "=", "None", "\n", "\n", "", "", "def", "_build_module", "(", "self", ",", "opt", ",", "index", ",", "flow", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.SameSettingImageData.update_rollings": [[578, 629], ["torch.cat", "image.SameSettingImageData.rollings[].repeat_interleave", "image.SameSettingImageData.mappings.pixels[].long", "w_pix.type.type.type", "torch.roll", "roll.item", "zip", "im.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat"], ["\n", "if", "flow", ".", "lower", "(", ")", "==", "'DOWN'", ".", "lower", "(", ")", ":", "\n", "            ", "module_cls", "=", "ResNetDown", "\n", "", "elif", "flow", ".", "lower", "(", ")", "==", "'INNER'", ".", "lower", "(", ")", ":", "\n", "            ", "module_cls", "=", "BottleneckBlock", "\n", "", "elif", "flow", ".", "lower", "(", ")", "==", "'UP'", ".", "lower", "(", ")", ":", "\n", "            ", "module_cls", "=", "ResNetUp", "\n", "", "elif", "flow", ".", "lower", "(", ")", "==", "'LAST'", ".", "lower", "(", ")", ":", "\n", "            ", "module_cls", "=", "UnaryConv", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "args", "=", "fetch_arguments_from_list", "(", "opt", ",", "index", ",", "SPECIAL_NAMES", ")", "\n", "return", "module_cls", "(", "**", "args", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"This method does a forward on the Unet assuming symmetrical\n        skip connections.\n\n        Parameters\n        ----------\n        x: torch.Tensor of images [BxCxHxW]\n        \"\"\"", "\n", "stack_down", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "down_modules", ")", "-", "1", ")", ":", "\n", "            ", "x", "=", "self", ".", "down_modules", "[", "i", "]", "(", "x", ")", "\n", "stack_down", ".", "append", "(", "x", ")", "\n", "", "x", "=", "self", ".", "down_modules", "[", "-", "1", "]", "(", "x", ")", "\n", "\n", "if", "self", ".", "inner_modules", "is", "not", "None", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "# TODO: debug innermost, stacks and upconv", "\n", "x", "=", "self", ".", "inner_modules", "[", "0", "]", "(", "x", ")", "\n", "\n", "# Recover the skip mode from the up modules", "\n", "", "if", "self", ".", "up_modules", "[", "0", "]", ".", "skip_first", ":", "\n", "            ", "stack_down", ".", "append", "(", "None", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "self", ".", "up_modules", ")", ")", ":", "\n", "            ", "skip", "=", "stack_down", ".", "pop", "(", "-", "1", ")", "if", "stack_down", "else", "None", "\n", "x", "=", "self", ".", "up_modules", "[", "i", "]", "(", "x", ",", "skip", ")", "\n", "\n", "", "if", "self", ".", "last", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "last", "(", "x", ",", "**", "kwargs", ")", "\n", "\n", "", "return", "x", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.SameSettingImageData.crop_size": [[640, 655], ["tuple", "len", "len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["        ", "is_training", "=", "self", ".", "training", "\n", "if", "input", ".", "shape", "[", "0", "]", "==", "input", ".", "shape", "[", "2", "]", "==", "input", ".", "shape", "[", "3", "]", "==", "1", ":", "\n", "            ", "self", ".", "training", "=", "False", "\n", "", "output", "=", "super", "(", ")", ".", "forward", "(", "input", ")", "\n", "self", ".", "training", "=", "is_training", "\n", "return", "output", "\n", "\n", "", "@", "classmethod", "\n", "def", "from_pretrained", "(", "cls", ",", "bn_pretrained", ")", ":", "\n", "# Initialize to default PPMFeatMap instance", "\n", "        ", "bn_new", "=", "cls", "(", "bn_pretrained", ".", "num_features", ")", "\n", "\n", "# Recover all attributes", "\n", "for", "k", ",", "v", "in", "bn_pretrained", ".", "__dict__", ".", "items", "(", ")", ":", "\n", "            ", "setattr", "(", "bn_new", ",", "k", ",", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.SameSettingImageData.mapping_size": [[656, 660], ["None"], "methods", ["None"], ["", "return", "bn_new", "\n", "\n", "\n", "", "", "class", "PPMFeatMap", "(", "nn", ".", "Module", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.SameSettingImageData.crop_offsets": [[673, 687], ["crop_offsets.to"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to"], ["nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", ")", "\n", "", "self", ".", "ppm", "=", "nn", ".", "ModuleList", "(", "self", ".", "ppm", ")", "\n", "\n", "self", ".", "conv_last", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "fc_dim", "+", "len", "(", "pool_scales", ")", "*", "512", ",", "512", ",", "\n", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "MITSynchronizedBatchNorm2d", "(", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "\n", "", "@", "classmethod", "\n", "def", "from_pretrained", "(", "cls", ",", "ppm_pretrained", ")", ":", "\n", "# Initialize to default PPMFeatMap instance", "\n", "        ", "ppm_new", "=", "cls", "(", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.SameSettingImageData.update_cropping": [[688, 721], ["crop_offsets.long.long.long", "tuple", "torch.cat", "image.SameSettingImageData.mappings.crop", "int", "zip", "im.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageMapping.crop"], ["\n", "# Recover the PPM module", "\n", "ppm_new", ".", "ppm", "=", "ppm_pretrained", ".", "ppm", "\n", "\n", "# Change the PPM MITSynchronizedBatchNorm2d to PrudentBatchNorm2d", "\n", "# to handle single-image batches", "\n", "for", "m", "in", "ppm_new", ".", "ppm", ":", "\n", "            ", "m", "[", "2", "]", "=", "PrudentSynchronizedBatchNorm2d", ".", "from_pretrained", "(", "m", "[", "2", "]", ")", "\n", "\n", "# Recover the conv_last module without dropout and classifier", "\n", "", "ppm_new", ".", "conv_last", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "ppm_pretrained", ".", "conv_last", ")", "[", ":", "-", "2", "]", ")", "\n", "return", "ppm_new", "\n", "\n", "", "def", "forward", "(", "self", ",", "conv_out", ",", "*", "args", ",", "out_size", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "conv5", "=", "conv_out", "[", "-", "1", "]", "\n", "\n", "input_size", "=", "conv5", ".", "size", "(", ")", "\n", "ppm_out", "=", "[", "conv5", "]", "\n", "for", "pool_scale", "in", "self", ".", "ppm", ":", "\n", "            ", "ppm_out", ".", "append", "(", "F", ".", "interpolate", "(", "\n", "pool_scale", "(", "conv5", ")", ",", "(", "input_size", "[", "2", "]", ",", "input_size", "[", "3", "]", ")", ",", "\n", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", ")", "\n", "", "ppm_out", "=", "torch", ".", "cat", "(", "ppm_out", ",", "1", ")", "\n", "\n", "x", "=", "self", ".", "conv_last", "(", "ppm_out", ")", "\n", "\n", "if", "out_size", "is", "not", "None", ":", "\n", "            ", "x", "=", "F", ".", "interpolate", "(", "\n", "x", ",", "size", "=", "out_size", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "\n", "", "return", "x", "\n", "\n", "\n", "", "", "class", "ADE20KResNet18PPM", "(", "nn", ".", "Module", ",", "ABC", ")", ":", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.SameSettingImageData.downscale": [[731, 745], ["None"], "methods", ["None"], ["ARCH", "=", "'resnet18dilated-ppm_deepsup'", "\n", "DIR", "=", "osp", ".", "join", "(", "PRETRAINED_DIR", ",", "'ade20k'", ",", "ARCH", ")", "\n", "MITCfg", ".", "merge_from_file", "(", "osp", ".", "join", "(", "DIR", ",", "f'{ARCH}.yaml'", ")", ")", "\n", "MITCfg", ".", "MODEL", ".", "arch_encoder", "=", "MITCfg", ".", "MODEL", ".", "arch_encoder", ".", "lower", "(", ")", "\n", "MITCfg", ".", "MODEL", ".", "arch_decoder", "=", "MITCfg", ".", "MODEL", ".", "arch_decoder", ".", "lower", "(", ")", "\n", "MITCfg", ".", "DIR", "=", "DIR", "\n", "\n", "# Absolute paths of model weights", "\n", "MITCfg", ".", "MODEL", ".", "weights_encoder", "=", "osp", ".", "join", "(", "\n", "MITCfg", ".", "DIR", ",", "'encoder_'", "+", "MITCfg", ".", "TEST", ".", "checkpoint", ")", "\n", "MITCfg", ".", "MODEL", ".", "weights_decoder", "=", "osp", ".", "join", "(", "\n", "MITCfg", ".", "DIR", ",", "'decoder_'", "+", "MITCfg", ".", "TEST", ".", "checkpoint", ")", "\n", "\n", "assert", "osp", ".", "exists", "(", "MITCfg", ".", "MODEL", ".", "weights_encoder", ")", "and", "osp", ".", "exists", "(", "MITCfg", ".", "MODEL", ".", "weights_decoder", ")", ","]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.SameSettingImageData.x": [[756, 788], ["isinstance", "max", "x.to", "type"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to"], ["self", ".", "decoder", "=", "MITModelBuilder", ".", "build_decoder", "(", "\n", "arch", "=", "MITCfg", ".", "MODEL", ".", "arch_decoder", ",", "\n", "fc_dim", "=", "MITCfg", ".", "MODEL", ".", "fc_dim", ",", "\n", "num_class", "=", "MITCfg", ".", "DATASET", ".", "num_class", ",", "\n", "weights", "=", "MITCfg", ".", "MODEL", ".", "weights_decoder", "if", "pretrained", "else", "''", ",", "\n", "use_softmax", "=", "True", ")", "\n", "sys", ".", "stdout", "=", "old_stdout", "# reset old stdout", "\n", "\n", "# Convert PPM from a classifier into a feature map extractor", "\n", "self", ".", "decoder", "=", "PPMFeatMap", ".", "from_pretrained", "(", "self", ".", "decoder", ")", "\n", "\n", "# If the model is frozen, it will always remain in eval mode", "\n", "# and the parameters will have requires_grad=False", "\n", "self", ".", "frozen", "=", "frozen", "\n", "if", "self", ".", "frozen", ":", "\n", "            ", "self", ".", "training", "=", "False", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "x", ",", "*", "args", ",", "out_size", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "pred", "=", "self", ".", "decoder", "(", "self", ".", "encoder", "(", "x", ",", "return_feature_maps", "=", "True", ")", ",", "\n", "out_size", "=", "out_size", ")", "\n", "return", "pred", "\n", "\n", "", "@", "property", "\n", "def", "frozen", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_frozen", "\n", "\n", "", "@", "frozen", ".", "setter", "\n", "def", "frozen", "(", "self", ",", "frozen", ")", ":", "\n", "        ", "if", "isinstance", "(", "frozen", ",", "bool", ")", ":", "\n", "            ", "self", ".", "_frozen", "=", "frozen", "\n", "", "for", "p", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "p", ".", "requires_grad", "=", "not", "self", ".", "frozen", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.SameSettingImageData.mappings": [[801, 825], ["isinstance", "mappings.to", "type"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to"], ["_LAYERS_SCALE", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "zip", "(", "_LAYERS", ",", "[", "4", ",", "1", ",", "2", ",", "1", ",", "1", "]", ")", "}", "\n", "\n", "def", "__init__", "(", "self", ",", "frozen", "=", "False", ",", "scale_factor", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "# Adapt the default config to use ResNet18 + PPM-Deepsup model", "\n", "ARCH", "=", "'resnet18dilated-ppm_deepsup'", "\n", "DIR", "=", "osp", ".", "join", "(", "PRETRAINED_DIR", ",", "'ade20k'", ",", "ARCH", ")", "\n", "MITCfg", ".", "merge_from_file", "(", "osp", ".", "join", "(", "DIR", ",", "f'{ARCH}.yaml'", ")", ")", "\n", "MITCfg", ".", "MODEL", ".", "arch_encoder", "=", "MITCfg", ".", "MODEL", ".", "arch_encoder", ".", "lower", "(", ")", "\n", "MITCfg", ".", "DIR", "=", "DIR", "\n", "\n", "# Absolute paths of model weights", "\n", "MITCfg", ".", "MODEL", ".", "weights_encoder", "=", "osp", ".", "join", "(", "\n", "MITCfg", ".", "DIR", ",", "'encoder_'", "+", "MITCfg", ".", "TEST", ".", "checkpoint", ")", "\n", "\n", "assert", "osp", ".", "exists", "(", "MITCfg", ".", "MODEL", ".", "weights_encoder", ")", ",", "\"checkpoint does not exist!\"", "\n", "\n", "# Build encoder from pretrained weights", "\n", "old_stdout", "=", "sys", ".", "stdout", "# backup current stdout", "\n", "sys", ".", "stdout", "=", "open", "(", "os", ".", "devnull", ",", "\"w\"", ")", "\n", "resnet18", "=", "MITModelBuilder", ".", "build_encoder", "(", "\n", "arch", "=", "MITCfg", ".", "MODEL", ".", "arch_encoder", ",", "\n", "fc_dim", "=", "MITCfg", ".", "MODEL", ".", "fc_dim", ",", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.SameSettingImageData.select_points": [[826, 908], ["torch_points3d.utils.multimodal.tensor_idx().to", "image.SameSettingImageData.clone", "len", "image.SameSettingImageData.clone", "image.SameSettingImageData.mappings.select_points", "image.SameSettingImageData.select_images", "torch_points3d.utils.multimodal.tensor_idx", "torch_points3d.utils.multimodal.lexunique", "image.SameSettingImageData.clone", "image.SameSettingImageData.mappings.select_points", "ValueError", "torch.arange().equal", "torch_points3d.utils.multimodal.tensor_idx().to.unique", "torch.arange", "torch_points3d.utils.multimodal.tensor_idx().to.max"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.clone", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.clone", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageMapping.select_points", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageMapping.select_images", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.multimodal.tensor_idx", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.multimodal.lexunique", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.clone", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageMapping.select_points"], ["weights", "=", "MITCfg", ".", "MODEL", ".", "weights_encoder", ")", "\n", "sys", ".", "stdout", "=", "old_stdout", "\n", "\n", "# Combine the ResNet first conv-bn-relu blocks and maxpool as", "\n", "# layer0", "\n", "resnet18", ".", "layer0", "=", "nn", ".", "Sequential", "(", "\n", "resnet18", ".", "conv1", ",", "\n", "resnet18", ".", "bn1", ",", "\n", "resnet18", ".", "relu1", ",", "\n", "resnet18", ".", "conv2", ",", "\n", "resnet18", ".", "bn2", ",", "\n", "resnet18", ".", "relu2", ",", "\n", "resnet18", ".", "conv3", ",", "\n", "resnet18", ".", "bn3", ",", "\n", "resnet18", ".", "relu3", ",", "\n", "resnet18", ".", "maxpool", ")", "\n", "\n", "# Combine the selected layers into a nn.Sequential", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "*", "[", "getattr", "(", "resnet18", ",", "layer", ")", "for", "layer", "in", "self", ".", "_LAYERS", "]", ")", "\n", "\n", "# If the model is frozen, it will always remain in eval mode", "\n", "# and the parameters will have requires_grad=False", "\n", "self", ".", "frozen", "=", "frozen", "\n", "if", "self", ".", "frozen", ":", "\n", "            ", "self", ".", "training", "=", "False", "\n", "\n", "# Output will be resized wrt scale_factor if not None.", "\n", "# If scale_factor < 0, the output will be resized to the input", "\n", "# size", "\n", "", "if", "scale_factor", "is", "not", "None", "and", "scale_factor", "<", "0", ":", "\n", "            ", "scale_factor", "=", "self", ".", "conv_scale_factor", "\n", "", "self", ".", "scale_factor", "=", "scale_factor", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "if", "self", ".", "scale_factor", "is", "not", "None", ":", "\n", "            ", "x", "=", "F", ".", "interpolate", "(", "\n", "x", ",", "scale_factor", "=", "self", ".", "scale_factor", ",", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "False", ")", "\n", "", "return", "x", "\n", "\n", "", "@", "property", "\n", "def", "input_nc", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_LAYERS_IN", "[", "self", ".", "_LAYERS", "[", "0", "]", "]", "\n", "\n", "", "@", "property", "\n", "def", "output_nc", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_LAYERS_OUT", "[", "self", ".", "_LAYERS", "[", "-", "1", "]", "]", "\n", "\n", "", "@", "property", "\n", "def", "conv_scale_factor", "(", "self", ")", ":", "\n", "        ", "return", "torch", ".", "prod", "(", "torch", ".", "LongTensor", "(", "[", "\n", "self", ".", "_LAYERS_SCALE", "[", "s", "]", "for", "s", "in", "self", ".", "_LAYERS", "]", ")", ")", ".", "item", "(", ")", "\n", "\n", "", "@", "property", "\n", "def", "frozen", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_frozen", "\n", "\n", "", "@", "frozen", ".", "setter", "\n", "def", "frozen", "(", "self", ",", "frozen", ")", ":", "\n", "        ", "if", "isinstance", "(", "frozen", ",", "bool", ")", ":", "\n", "            ", "self", ".", "_frozen", "=", "frozen", "\n", "", "for", "p", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "p", ".", "requires_grad", "=", "not", "self", ".", "frozen", "\n", "\n", "", "", "def", "train", "(", "self", ",", "mode", "=", "True", ")", ":", "\n", "        ", "return", "super", "(", ")", ".", "train", "(", "\n", "mode", "and", "not", "self", ".", "frozen", ")", "\n", "\n", "", "def", "extra_repr", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "f\"scale_factor={self.scale_factor}\"", "if", "self", ".", "scale_factor", "is", "not", "None", "else", "\"\"", "\n", "\n", "\n", "", "", "class", "ADE20KResNet18TruncatedLayer0", "(", "ADE20KResNet18TruncatedLayer4", ")", ":", "\n", "    ", "_LAYERS", "=", "[", "'layer0'", "]", "\n", "\n", "\n", "", "class", "ADE20KResNet18TruncatedLayer1", "(", "ADE20KResNet18TruncatedLayer4", ")", ":", "\n", "    ", "_LAYERS", "=", "[", "'layer0'", ",", "'layer1'", "]", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.SameSettingImageData.select_views": [[909, 951], ["image.SameSettingImageData.mappings.select_views", "torch.all", "image.SameSettingImageData.clone", "image.SameSettingImageData.clone", "len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageMapping.select_views", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.clone", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.clone", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "class", "ADE20KResNet18TruncatedLayer2", "(", "ADE20KResNet18TruncatedLayer4", ")", ":", "\n", "    ", "_LAYERS", "=", "[", "'layer0'", ",", "'layer1'", ",", "'layer2'", "]", "\n", "\n", "\n", "", "class", "ADE20KResNet18TruncatedLayer3", "(", "ADE20KResNet18TruncatedLayer4", ")", ":", "\n", "    ", "_LAYERS", "=", "[", "'layer0'", ",", "'layer1'", ",", "'layer2'", ",", "'layer3'", "]", "\n", "\n", "\n", "", "class", "ADE20KResNet18Layer0", "(", "ADE20KResNet18TruncatedLayer4", ")", ":", "\n", "    ", "_LAYERS", "=", "[", "'layer0'", "]", "\n", "\n", "\n", "", "class", "ADE20KResNet18Layer1", "(", "ADE20KResNet18TruncatedLayer4", ")", ":", "\n", "    ", "_LAYERS", "=", "[", "'layer1'", "]", "\n", "\n", "\n", "", "class", "ADE20KResNet18Layer2", "(", "ADE20KResNet18TruncatedLayer4", ")", ":", "\n", "    ", "_LAYERS", "=", "[", "'layer2'", "]", "\n", "\n", "\n", "", "class", "ADE20KResNet18Layer3", "(", "ADE20KResNet18TruncatedLayer4", ")", ":", "\n", "    ", "_LAYERS", "=", "[", "'layer3'", "]", "\n", "\n", "\n", "", "class", "ADE20KResNet18Layer4", "(", "ADE20KResNet18TruncatedLayer4", ")", ":", "\n", "    ", "_LAYERS", "=", "[", "'layer4'", "]", "\n", "\n", "\n", "", "class", "ADE20KResNet18Pyramid", "(", "ADE20KResNet18TruncatedLayer4", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "frozen", "=", "False", ",", "scale_factor", "=", "-", "1", ",", "**", "kwargs", ")", ":", "\n", "        ", "assert", "scale_factor", "is", "not", "None", ",", "f'scale_factor cannot be None for feature pyramid.'", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "frozen", "=", "frozen", ",", "scale_factor", "=", "scale_factor", ",", "**", "kwargs", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "feature_pyramid", "=", "[", "]", "\n", "output_size", "=", "[", "\n", "int", "(", "s", "*", "self", ".", "scale_factor", "/", "self", ".", "conv_scale_factor", ")", "\n", "for", "s", "in", "x", ".", "shape", "[", "2", ":", "4", "]", "]", "\n", "\n", "for", "layer", "in", "self", ".", "conv", ":", "\n", "            ", "x", "=", "layer", "(", "x", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.SameSettingImageData.mask": [[960, 972], ["mask.to"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to"], ["arch", ",", "block", ",", "layers", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Instantiate ResNet models from torchvision, optionally\n    pretrained on ImageNet. Supported models are 'resnet18', 'resnet34',\n    'resnet50', 'resnet101' and 'resnet152'.\n\n    This is a custom version of torchvision.models.resnet._resnet to\n    support locally-saved pretrained ResNet weights.\n    \"\"\"", "\n", "model", "=", "torchvision", ".", "models", ".", "resnet", ".", "ResNet", "(", "block", ",", "layers", ")", "\n", "\n", "if", "pretrained", ":", "\n", "\n", "        ", "model_dir", "=", "osp", ".", "join", "(", "PRETRAINED_DIR", ",", "f'imagenet/{arch}'", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.SameSettingImageData.load": [[973, 990], ["image.SameSettingImageData.read_images().to", "image.SameSettingImageData.read_images"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.SameSettingImageData.read_images"], ["file_name", "=", "f'{arch}.pth'", "\n", "file_path", "=", "osp", ".", "join", "(", "model_dir", ",", "file_name", ")", "\n", "\n", "# Load from local weights", "\n", "if", "osp", ".", "exists", "(", "file_path", ")", ":", "\n", "            ", "state_dict", "=", "torch", ".", "load", "(", "file_path", ")", "\n", "\n", "# Load ImageNet-pretrained weights from official torchvision URL", "\n", "# and save them locally", "\n", "", "else", ":", "\n", "            ", "url", "=", "torchvision", ".", "models", ".", "resnet", ".", "model_urls", "[", "arch", "]", "\n", "state_dict", "=", "torchvision", ".", "models", ".", "utils", ".", "load_state_dict_from_url", "(", "\n", "url", ",", "progress", "=", "progress", ",", "model_dir", "=", "model_dir", ",", "\n", "file_name", "=", "file_name", ")", "\n", "\n", "", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.SameSettingImageData.read_images": [[991, 1102], ["torch.from_numpy", "images.permute.permute.permute", "numpy.arange", "isinstance", "len", "numpy.array", "torch.zeros().long", "bool", "bool", "tuple", "all", "torch.zeros().long", "tqdm.auto.tqdm.auto.tqdm", "PIL.Image.open().convert().resize", "image.crop", "image.crop", "image.crop.load", "image.crop.load", "image.paste", "image.paste", "image.SameSettingImageData.read_images.pil_roll"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageMapping.crop", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageMapping.crop", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load"], ["\n", "", "class", "ResNet18TruncatedLayer4", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "_LAYERS", "=", "[", "'layer0'", ",", "'layer1'", ",", "'layer2'", ",", "'layer3'", ",", "'layer4'", "]", "\n", "_LAYERS_IN", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "zip", "(", "_LAYERS", ",", "[", "3", ",", "64", ",", "64", ",", "128", ",", "256", "]", ")", "}", "\n", "_LAYERS_OUT", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "zip", "(", "_LAYERS", ",", "[", "64", ",", "64", ",", "128", ",", "256", ",", "512", "]", ")", "}", "\n", "_LAYERS_SCALE", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "zip", "(", "_LAYERS", ",", "[", "4", ",", "1", ",", "2", ",", "2", ",", "2", "]", ")", "}", "\n", "\n", "def", "__init__", "(", "\n", "self", ",", "frozen", "=", "False", ",", "pretrained", "=", "True", ",", "scale_factor", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "# Instantiate the full ResNet", "\n", "resnet18", "=", "_instantiate_torchvision_resnet", "(", "\n", "'resnet18'", ",", "torchvision", ".", "models", ".", "resnet", ".", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "\n", "pretrained", ",", "True", ",", "**", "kwargs", ")", "\n", "\n", "# Combine the ResNet first conv1-bn1-relu-maxpool as layer0", "\n", "resnet18", ".", "layer0", "=", "nn", ".", "Sequential", "(", "\n", "resnet18", ".", "conv1", ",", "resnet18", ".", "bn1", ",", "resnet18", ".", "relu", ",", "resnet18", ".", "maxpool", ")", "\n", "\n", "# Combine the selected layers into a nn.Sequential", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "*", "[", "getattr", "(", "resnet18", ",", "layer", ")", "for", "layer", "in", "self", ".", "_LAYERS", "]", ")", "\n", "\n", "# If the model is frozen, it will always remain in eval mode", "\n", "# and the parameters will have requires_grad=False", "\n", "self", ".", "frozen", "=", "frozen", "\n", "if", "self", ".", "frozen", ":", "\n", "            ", "self", ".", "training", "=", "False", "\n", "\n", "# Output will be resized wrt scale_factor if not None.", "\n", "# If scale_factor < 0, the output will be resized to the input", "\n", "# size", "\n", "", "if", "scale_factor", "is", "not", "None", "and", "scale_factor", "<", "0", ":", "\n", "            ", "scale_factor", "=", "self", ".", "conv_scale_factor", "\n", "", "self", ".", "scale_factor", "=", "scale_factor", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "if", "self", ".", "scale_factor", "is", "not", "None", ":", "\n", "            ", "x", "=", "F", ".", "interpolate", "(", "\n", "x", ",", "scale_factor", "=", "self", ".", "scale_factor", ",", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "False", ")", "\n", "", "return", "x", "\n", "\n", "", "@", "property", "\n", "def", "input_nc", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_LAYERS_IN", "[", "self", ".", "_LAYERS", "[", "0", "]", "]", "\n", "\n", "", "@", "property", "\n", "def", "output_nc", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_LAYERS_OUT", "[", "self", ".", "_LAYERS", "[", "-", "1", "]", "]", "\n", "\n", "", "@", "property", "\n", "def", "conv_scale_factor", "(", "self", ")", ":", "\n", "        ", "return", "torch", ".", "prod", "(", "torch", ".", "LongTensor", "(", "[", "\n", "self", ".", "_LAYERS_SCALE", "[", "s", "]", "for", "s", "in", "self", ".", "_LAYERS", "]", ")", ")", ".", "item", "(", ")", "\n", "\n", "", "@", "property", "\n", "def", "frozen", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_frozen", "\n", "\n", "", "@", "frozen", ".", "setter", "\n", "def", "frozen", "(", "self", ",", "frozen", ")", ":", "\n", "        ", "if", "isinstance", "(", "frozen", ",", "bool", ")", ":", "\n", "            ", "self", ".", "_frozen", "=", "frozen", "\n", "", "for", "p", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "p", ".", "requires_grad", "=", "not", "self", ".", "frozen", "\n", "\n", "", "", "def", "train", "(", "self", ",", "mode", "=", "True", ")", ":", "\n", "        ", "return", "super", "(", ")", ".", "train", "(", "\n", "mode", "and", "not", "self", ".", "frozen", ")", "\n", "\n", "", "def", "extra_repr", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "f\"scale_factor={self.scale_factor}\"", "if", "self", ".", "scale_factor", "is", "not", "None", "else", "\"\"", "\n", "\n", "\n", "", "", "class", "ResNet18TruncatedLayer0", "(", "ResNet18TruncatedLayer4", ")", ":", "\n", "    ", "_LAYERS", "=", "[", "'layer0'", "]", "\n", "\n", "\n", "", "class", "ResNet18TruncatedLayer1", "(", "ResNet18TruncatedLayer4", ")", ":", "\n", "    ", "_LAYERS", "=", "[", "'layer0'", ",", "'layer1'", "]", "\n", "\n", "\n", "", "class", "ResNet18TruncatedLayer2", "(", "ResNet18TruncatedLayer4", ")", ":", "\n", "    ", "_LAYERS", "=", "[", "'layer0'", ",", "'layer1'", ",", "'layer2'", "]", "\n", "\n", "\n", "", "class", "ResNet18TruncatedLayer3", "(", "ResNet18TruncatedLayer4", ")", ":", "\n", "    ", "_LAYERS", "=", "[", "'layer0'", ",", "'layer1'", ",", "'layer2'", ",", "'layer3'", "]", "\n", "\n", "\n", "", "class", "ResNet18Layer0", "(", "ResNet18TruncatedLayer4", ")", ":", "\n", "    ", "_LAYERS", "=", "[", "'layer0'", "]", "\n", "\n", "\n", "", "class", "ResNet18Layer1", "(", "ResNet18TruncatedLayer4", ")", ":", "\n", "    ", "_LAYERS", "=", "[", "'layer1'", "]", "\n", "\n", "\n", "", "class", "ResNet18Layer2", "(", "ResNet18TruncatedLayer4", ")", ":", "\n", "    ", "_LAYERS", "=", "[", "'layer2'", "]", "\n", "\n", "\n", "", "class", "ResNet18Layer3", "(", "ResNet18TruncatedLayer4", ")", ":", "\n", "    ", "_LAYERS", "=", "[", "'layer3'", "]", "\n", "\n", "\n", "", "class", "ResNet18Layer4", "(", "ResNet18TruncatedLayer4", ")", ":", "\n", "    ", "_LAYERS", "=", "[", "'layer4'", "]", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.SameSettingImageData.__len__": [[1103, 1108], ["None"], "methods", ["None"], ["\n", "\n", "", "class", "ResNet18Pyramid", "(", "ResNet18TruncatedLayer4", ")", ":", "\n", "    ", "def", "__init__", "(", "\n", "self", ",", "frozen", "=", "False", ",", "pretrained", "=", "True", ",", "scale_factor", "=", "-", "1", ",", "**", "kwargs", ")", ":", "\n", "        ", "assert", "scale_factor", "is", "not", "None", ","]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.SameSettingImageData.__getitem__": [[1109, 1149], ["torch_points3d.utils.multimodal.tensor_idx().to", "numpy.asarray", "image.SameSettingImageData.__class__", "torch_points3d.utils.multimodal.tensor_idx().to.unique().numel", "torch_points3d.utils.multimodal.tensor_idx().to.cpu", "torch_points3d.utils.multimodal.tensor_idx", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "torch_points3d.utils.multimodal.tensor_idx().to.unique", "image.SameSettingImageData.mappings.select_images", "image.SameSettingImageData.mask.clone", "hasattr", "copy.deepcopy"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.csr.CSRData.cpu", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.multimodal.tensor_idx", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageMapping.select_images", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.clone"], ["f'scale_factor cannot be None for feature pyramid.'", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "frozen", "=", "frozen", ",", "pretrained", "=", "pretrained", ",", "scale_factor", "=", "scale_factor", ",", "\n", "**", "kwargs", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "feature_pyramid", "=", "[", "]", "\n", "output_size", "=", "[", "\n", "int", "(", "s", "*", "self", ".", "scale_factor", "/", "self", ".", "conv_scale_factor", ")", "\n", "for", "s", "in", "x", ".", "shape", "[", "2", ":", "4", "]", "]", "\n", "\n", "for", "layer", "in", "self", ".", "conv", ":", "\n", "            ", "x", "=", "layer", "(", "x", ")", "\n", "x_up", "=", "F", ".", "interpolate", "(", "\n", "x", ",", "size", "=", "output_size", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "feature_pyramid", ".", "append", "(", "x_up", ")", "\n", "\n", "", "return", "torch", ".", "cat", "(", "feature_pyramid", ",", "dim", "=", "1", ")", "\n", "\n", "\n", "########################################################################", "\n", "#                              Cityscapes                              #", "\n", "########################################################################", "\n", "\n", "", "", "def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "\n", "\n", "", "class", "CityscapesBasicBlock", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "\"\"\"BasicBlock for Cityscapes-pretrained ResNet18.\n    Credit: https://github.com/fregu856/deeplabv3\n    \"\"\"", "\n", "expansion", "=", "1", "\n", "\n", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.SameSettingImageData.__iter__": [[1150, 1159], ["range", "image.SameSettingImageData.__len__"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.basetest.BasePCRBTest.__len__"], ["self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.SameSettingImageData.__repr__": [[1160, 1162], ["None"], "methods", ["None"], ["out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.SameSettingImageData.clone": [[1164, 1174], ["copy.copy", "image.SameSettingImageData.x.clone", "image.SameSettingImageData.mappings.clone"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.clone", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.clone"], ["out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.SameSettingImageData.to": [[1175, 1201], ["image.SameSettingImageData.__class__", "image.SameSettingImageData.x.to", "image.SameSettingImageData.mappings.to", "image.SameSettingImageData.mask.to", "image.SameSettingImageData.pos.to", "image.SameSettingImageData.rollings.to", "image.SameSettingImageData.crop_offsets.to", "image.SameSettingImageData.opk.to", "image.SameSettingImageData.extrinsic.to", "image.SameSettingImageData.fx.to", "image.SameSettingImageData.fy.to", "image.SameSettingImageData.mx.to", "image.SameSettingImageData.my.to", "image.SameSettingImageData.xi.to", "image.SameSettingImageData.k1.to", "image.SameSettingImageData.k2.to", "image.SameSettingImageData.gamma1.to", "image.SameSettingImageData.gamma2.to", "image.SameSettingImageData.u0.to", "image.SameSettingImageData.v0.to"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to"], ["", "", "class", "CityscapesResNet18", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "\"\"\"ResNet18-based encoder pretrained on Cityscapes.\n\n    Adapted from: https://github.com/lxtGH/SFSegNets\n    \"\"\"", "\n", "RELATIVE_PATH", "=", "'cityscapes/CityscapesResNet18/resnet18_SFSegNets.pth'", "\n", "PRETRAINED_PATH", "=", "osp", ".", "join", "(", "PRETRAINED_DIR", ",", "RELATIVE_PATH", ")", "\n", "\n", "def", "__init__", "(", "self", ",", "*", "args", ",", "frozen", "=", "False", ",", "pretrained", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "128", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "# Hardcoded ResNet18 parameters", "\n", "layers", "=", "[", "2", ",", "2", ",", "2", ",", "2", "]", "\n", "block", "=", "CityscapesBasicBlock", "\n", "\n", "# Build the layers", "\n", "conv1", "=", "nn", ".", "Sequential", "(", "\n", "conv3x3", "(", "3", ",", "64", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "conv3x3", "(", "64", ",", "64", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "conv3x3", "(", "64", ",", "128", ")", ")", "\n", "self", ".", "layer0", "=", "nn", ".", "Sequential", "(", "\n", "conv1", ",", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.SameSettingImageData.device": [[1202, 1206], ["None"], "methods", ["None"], ["nn", ".", "BatchNorm2d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.SameSettingImageData.settings_hash": [[1207, 1220], ["tuple", "hash", "tuple", "set", "getattr"], "methods", ["None"], ["self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "\n", "# Weight initialization schemes", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "\n", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "# Load pretrained weights", "\n", "", "", "self", ".", "pretrained", "=", "pretrained", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.SameSettingImageData.get_batch_type": [[1221, 1225], ["None"], "methods", ["None"], ["if", "pretrained", ":", "\n", "            ", "self", ".", "load_state_dict", "(", "torch", ".", "load", "(", "self", ".", "PRETRAINED_PATH", ")", ")", "\n", "\n", "# If the model is frozen, it will always remain in eval mode", "\n", "# and the parameters will have requires_grad=False", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.SameSettingImageData.feature_map_indexing": [[1226, 1238], ["None"], "methods", ["None"], ["", "self", ".", "frozen", "=", "frozen", "\n", "if", "self", ".", "frozen", ":", "\n", "            ", "self", ".", "training", "=", "False", "\n", "\n", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ")", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.SameSettingImageData.atomic_csr_indexing": [[1239, 1247], ["None"], "methods", ["None"], ["self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "index", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "x0", "=", "self", ".", "layer0", "(", "x", ")", "# /4", "\n", "x1", "=", "self", ".", "layer1", "(", "x0", ")", "# /4", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.SameSettingImageData.view_csr_indexing": [[1248, 1256], ["None"], "methods", ["None"], ["x2", "=", "self", ".", "layer2", "(", "x1", ")", "# /8", "\n", "x3", "=", "self", ".", "layer3", "(", "x2", ")", "# /16", "\n", "x4", "=", "self", ".", "layer4", "(", "x3", ")", "# /32", "\n", "return", "x4", "\n", "\n", "", "@", "property", "\n", "def", "frozen", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_frozen", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.SameSettingImageData.mapping_features": [[1257, 1261], ["None"], "methods", ["None"], ["", "@", "frozen", ".", "setter", "\n", "def", "frozen", "(", "self", ",", "frozen", ")", ":", "\n", "        ", "if", "isinstance", "(", "frozen", ",", "bool", ")", ":", "\n", "            ", "self", ".", "_frozen", "=", "frozen", "\n", "", "for", "p", "in", "self", ".", "parameters", "(", ")", ":", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.SameSettingImageData.get_mapped_features": [[1262, 1288], ["image.SameSettingImageData.mappings.rescale_images", "torch.Tensor().to", "image.sparse_interpolation", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageMapping.rescale_images", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.sparse_interpolation"], ["            ", "p", ".", "requires_grad", "=", "not", "self", ".", "frozen", "\n", "\n", "", "", "def", "train", "(", "self", ",", "mode", "=", "True", ")", ":", "\n", "        ", "return", "super", "(", ")", ".", "train", "(", "mode", "and", "not", "self", ".", "frozen", ")", "\n", "\n", "\n", "", "", "class", "CityscapesResNet18TruncatedLayer4", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "\"\"\"ResNet18-based encoder pretrained on Cityscapes.\n\n    Adapted from: https://github.com/lxtGH/SFSegNets\n    \"\"\"", "\n", "_LAYERS", "=", "[", "'layer0'", ",", "'layer1'", ",", "'layer2'", ",", "'layer3'", ",", "'layer4'", "]", "\n", "_LAYERS_IN", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "zip", "(", "_LAYERS", ",", "[", "3", ",", "128", ",", "64", ",", "128", ",", "256", "]", ")", "}", "\n", "_LAYERS_OUT", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "zip", "(", "_LAYERS", ",", "[", "128", ",", "64", ",", "128", ",", "256", ",", "512", "]", ")", "}", "\n", "_LAYERS_SCALE", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "zip", "(", "_LAYERS", ",", "[", "4", ",", "1", ",", "2", ",", "2", ",", "2", "]", ")", "}", "\n", "\n", "def", "__init__", "(", "self", ",", "frozen", "=", "False", ",", "scale_factor", "=", "None", ",", "pretrained", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "# Initialize the full ResNet18", "\n", "resnet18", "=", "CityscapesResNet18", "(", "pretrained", "=", "pretrained", ")", "\n", "\n", "# Combine the selected layers into a nn.Sequential", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "*", "[", "getattr", "(", "resnet18", ",", "layer", ")", "for", "layer", "in", "self", ".", "_LAYERS", "]", ")", "\n", "\n", "# If the model is frozen, it will always remain in eval mode", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.SameSettingImageBatch.__init__": [[1301, 1304], ["image.SameSettingImageData.__init__"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["", "def", "forward", "(", "self", ",", "x", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "if", "self", ".", "scale_factor", "is", "not", "None", ":", "\n", "            ", "x", "=", "F", ".", "interpolate", "(", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.SameSettingImageBatch.batch_pointers": [[1305, 1309], ["numpy.cumsum", "numpy.concatenate"], "methods", ["None"], ["x", ",", "scale_factor", "=", "self", ".", "scale_factor", ",", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "False", ")", "\n", "", "return", "x", "\n", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.SameSettingImageBatch.batch_items_sizes": [[1310, 1313], ["None"], "methods", ["None"], ["def", "input_nc", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_LAYERS_IN", "[", "self", ".", "_LAYERS", "[", "0", "]", "]", "\n", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.SameSettingImageBatch.num_batch_items": [[1314, 1317], ["len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["def", "output_nc", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_LAYERS_OUT", "[", "self", ".", "_LAYERS", "[", "-", "1", "]", "]", "\n", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.SameSettingImageBatch.from_data_list": [[1318, 1396], ["all", "image_data_list[].to_dict", "any", "any", "image.SameSettingImageBatch", "numpy.array", "isinstance", "len", "all", "numpy.concatenate", "torch.cat", "ImageMappingBatch.from_csr_list", "len", "isinstance", "image_data.to_dict", "sizes.append", "torch.cat", "image_data.to_dict.items"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.SameSettingImageData.to_dict", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.csr.CSRBatch.from_csr_list", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.SameSettingImageData.to_dict", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat"], ["def", "conv_scale_factor", "(", "self", ")", ":", "\n", "        ", "return", "torch", ".", "prod", "(", "torch", ".", "LongTensor", "(", "[", "\n", "self", ".", "_LAYERS_SCALE", "[", "s", "]", "for", "s", "in", "self", ".", "_LAYERS", "]", ")", ")", ".", "item", "(", ")", "\n", "\n", "", "@", "property", "\n", "def", "frozen", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_frozen", "\n", "\n", "", "@", "frozen", ".", "setter", "\n", "def", "frozen", "(", "self", ",", "frozen", ")", ":", "\n", "        ", "if", "isinstance", "(", "frozen", ",", "bool", ")", ":", "\n", "            ", "self", ".", "_frozen", "=", "frozen", "\n", "", "for", "p", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "p", ".", "requires_grad", "=", "not", "self", ".", "frozen", "\n", "\n", "", "", "def", "train", "(", "self", ",", "mode", "=", "True", ")", ":", "\n", "        ", "return", "super", "(", ")", ".", "train", "(", "\n", "mode", "and", "not", "self", ".", "frozen", ")", "\n", "\n", "", "def", "extra_repr", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "f\"scale_factor={self.scale_factor}\"", "if", "self", ".", "scale_factor", "is", "not", "None", "else", "\"\"", "\n", "\n", "\n", "", "", "class", "CityscapesResNet18TruncatedLayer0", "(", "CityscapesResNet18TruncatedLayer4", ")", ":", "\n", "    ", "_LAYERS", "=", "[", "'layer0'", "]", "\n", "\n", "\n", "", "class", "CityscapesResNet18TruncatedLayer1", "(", "CityscapesResNet18TruncatedLayer4", ")", ":", "\n", "    ", "_LAYERS", "=", "[", "'layer0'", ",", "'layer1'", "]", "\n", "\n", "\n", "", "class", "CityscapesResNet18TruncatedLayer2", "(", "CityscapesResNet18TruncatedLayer4", ")", ":", "\n", "    ", "_LAYERS", "=", "[", "'layer0'", ",", "'layer1'", ",", "'layer2'", "]", "\n", "\n", "\n", "", "class", "CityscapesResNet18TruncatedLayer3", "(", "CityscapesResNet18TruncatedLayer4", ")", ":", "\n", "    ", "_LAYERS", "=", "[", "'layer0'", ",", "'layer1'", ",", "'layer2'", ",", "'layer3'", "]", "\n", "\n", "\n", "", "class", "CityscapesResNet18Layer0", "(", "CityscapesResNet18TruncatedLayer4", ")", ":", "\n", "    ", "_LAYERS", "=", "[", "'layer0'", "]", "\n", "\n", "\n", "", "class", "CityscapesResNet18Layer1", "(", "CityscapesResNet18TruncatedLayer4", ")", ":", "\n", "    ", "_LAYERS", "=", "[", "'layer1'", "]", "\n", "\n", "\n", "", "class", "CityscapesResNet18Layer2", "(", "CityscapesResNet18TruncatedLayer4", ")", ":", "\n", "    ", "_LAYERS", "=", "[", "'layer2'", "]", "\n", "\n", "\n", "", "class", "CityscapesResNet18Layer3", "(", "CityscapesResNet18TruncatedLayer4", ")", ":", "\n", "    ", "_LAYERS", "=", "[", "'layer3'", "]", "\n", "\n", "\n", "", "class", "CityscapesResNet18Layer4", "(", "CityscapesResNet18TruncatedLayer4", ")", ":", "\n", "    ", "_LAYERS", "=", "[", "'layer4'", "]", "\n", "\n", "\n", "", "class", "CityscapesResNet18Pyramid", "(", "CityscapesResNet18TruncatedLayer4", ")", ":", "\n", "    ", "def", "__init__", "(", "\n", "self", ",", "frozen", "=", "False", ",", "pretrained", "=", "True", ",", "scale_factor", "=", "-", "1", ",", "**", "kwargs", ")", ":", "\n", "        ", "assert", "scale_factor", "is", "not", "None", ",", "f'scale_factor cannot be None for feature pyramid.'", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "frozen", "=", "frozen", ",", "pretrained", "=", "pretrained", ",", "scale_factor", "=", "scale_factor", ",", "\n", "**", "kwargs", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "feature_pyramid", "=", "[", "]", "\n", "output_size", "=", "[", "\n", "int", "(", "s", "*", "self", ".", "scale_factor", "/", "self", ".", "conv_scale_factor", ")", "\n", "for", "s", "in", "x", ".", "shape", "[", "2", ":", "4", "]", "]", "\n", "\n", "for", "layer", "in", "self", ".", "conv", ":", "\n", "            ", "x", "=", "layer", "(", "x", ")", "\n", "x_up", "=", "F", ".", "interpolate", "(", "\n", "x", ",", "size", "=", "output_size", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.SameSettingImageBatch.to_data_list": [[1397, 1407], ["RuntimeError", "range"], "methods", ["None"], ["feature_pyramid", ".", "append", "(", "x_up", ")", "\n", "\n", "", "return", "torch", ".", "cat", "(", "feature_pyramid", ",", "dim", "=", "1", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.__init__": [[1416, 1418], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.num_settings": [[1420, 1423], ["len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.num_views": [[1424, 1427], ["sum"], "methods", ["None"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.num_points": [[1428, 1431], ["len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.x": [[1436, 1446], ["zip", "isinstance", "type", "len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.debug": [[1447, 1465], ["isinstance", "all", "all", "len", "len", "im.debug", "type", "isinstance", "set"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageMapping.debug"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.__len__": [[1466, 1468], ["len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.__getitem__": [[1469, 1481], ["image.ImageData.__len__", "ValueError", "isinstance", "image.ImageData.__class__", "image.ImageData.__len__", "torch_points3d.utils.multimodal.tensor_idx().tolist", "torch_points3d.utils.multimodal.tensor_idx"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.basetest.BasePCRBTest.__len__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.basetest.BasePCRBTest.__len__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.multimodal.tensor_idx"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.__iter__": [[1482, 1485], ["range", "image.ImageData.__len__"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.basetest.BasePCRBTest.__len__"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.__repr__": [[1486, 1488], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.select_points": [[1491, 1494], ["image.ImageData.__class__", "im.select_points"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageMapping.select_points"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.select_views": [[1495, 1501], ["isinstance", "image.ImageData.__class__", "im.select_views", "zip"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageMapping.select_views"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.load": [[1502, 1505], ["im.load"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.clone": [[1506, 1508], ["image.ImageData.__class__", "im.clone"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.clone"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.to": [[1509, 1513], ["image.ImageData.clone", "im.to"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.clone", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.device": [[1514, 1517], ["len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.get_batch_type": [[1518, 1522], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.get_mapped_features": [[1523, 1530], ["im.get_mapped_features"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.get_mapped_features"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.feature_map_indexing": [[1531, 1541], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.atomic_csr_indexing": [[1542, 1548], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.view_cat_sorting": [[1549, 1575], ["torch.arange().repeat_interleave", "torch.cat().argsort", "print", "print", "print", "print", "print", "torch.arange", "torch.cat", "len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.view_cat_csr_indexing": [[1576, 1589], ["torch.cat().sum", "torch.cat", "im.view_csr_indexing.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.mapping_features": [[1590, 1596], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageBatch.__init__": [[1609, 1616], ["image.ImageData.__init__"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageBatch.from_data_list": [[1617, 1673], ["all", "list", "torch.LongTensor", "torch.cumsum", "enumerate", "zip", "image.ImageBatch", "isinstance", "set", "torch.cat", "len", "len", "enumerate", "image.SameSettingImageBatch.from_data_list", "len", "isinstance", "enumerate", "il_idx_dict[].append", "im_idx_dict[].append", "torch.cat", "im.mappings.insert_empty_groups", "torch.LongTensor", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.pair.DensePairBatch.from_data_list", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.csr.CSRData.insert_empty_groups"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageBatch.to_data_list": [[1674, 1705], ["zip", "zip", "image.ImageData", "ib.to_data_list"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageBatch.to_data_list"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageMapping.from_dense": [[1728, 1796], ["torch_points3d.utils.multimodal.lexargsort", "torch_points3d.utils.multimodal.CompositeTensor", "torch_points3d.core.multimodal.CSRData", "ImageMapping.insert_empty_groups", "torch_scatter.segment_csr", "image.ImageMapping", "image.ImageMapping", "point_ids.max", "point_ids.max"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.multimodal.lexargsort", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.csr.CSRData.insert_empty_groups"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageMapping.debug": [[1797, 1811], ["super().debug", "isinstance", "len", "len", "len", "type", "len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageMapping.debug", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageMapping.points": [[1814, 1817], ["torch.arange"], "methods", ["None"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageMapping.images": [[1822, 1825], ["images.to"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageMapping.has_features": [[1826, 1829], ["len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageMapping.features": [[1834, 1844], ["image.ImageMapping.values.pop", "features.to", "image.ImageMapping.values.append", "features.to"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageMapping.pixels": [[1850, 1853], ["pixels.to"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageMapping.get_batch_type": [[1854, 1858], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageMapping.bounding_boxes": [[1859, 1870], ["image.ImageMapping.images.repeat_interleave", "torch_scatter.scatter_min", "torch_scatter.scatter_max"], "methods", ["None"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageMapping.feature_map_indexing": [[1871, 1886], ["image.ImageMapping.images.repeat_interleave", "image.ImageMapping.long", "idx_height.long", "idx_width.long"], "methods", ["None"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageMapping.atomic_csr_indexing": [[1887, 1893], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageMapping.view_csr_indexing": [[1894, 1900], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageMapping.rescale_images": [[1901, 1915], ["image.ImageMapping.downscale_images", "image.ImageMapping.upscale_images"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageMapping.downscale_images", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageMapping.upscale_images"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageMapping.downscale_images": [[1916, 1975], ["image.ImageMapping.clone", "torch.arange().repeat_interleave", "torch_points3d.utils.multimodal.lexargunique", "isinstance", "torch_points3d.core.multimodal.CSRBatch", "isinstance", "torch.arange", "torch.stack().type", "torch_points3d.core.multimodal.CSRData", "NotImplementedError", "torch.stack().type", "torch.stack", "torch.stack"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.clone", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.multimodal.lexargunique"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageMapping.upscale_images": [[1976, 2022], ["image.ImageMapping.clone", "torch.stack().type", "torch.stack", "pix_x.float", "pix_y.float", "pix_x.float", "pix_y.float"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.clone"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageMapping.select_images": [[2023, 2088], ["torch_points3d.utils.multimodal.tensor_idx().to", "torch.full", "idx_gen.scatter_.scatter_.scatter_", "torch.arange().repeat_interleave", "torch_points3d.core.multimodal.CSRData._sorted_indices_to_pointers", "image.ImageMapping.__class__", "image.ImageMapping.insert_empty_groups", "torch_points3d.utils.multimodal.tensor_idx().to.unique().numel", "image.ImageMapping.clone", "torch.where", "image.ImageMapping.__class__", "torch.arange", "torch_points3d.utils.multimodal.tensor_idx", "torch.zeros_like", "torch.arange", "torch_points3d.utils.multimodal.tensor_idx().to.unique", "torch_points3d.utils.multimodal.tensor_idx().to.max"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.csr.CSRData._sorted_indices_to_pointers", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.csr.CSRData.insert_empty_groups", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.clone", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.multimodal.tensor_idx"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageMapping.select_views": [[2089, 2160], ["isinstance", "values[].unique", "torch.arange().repeat_interleave", "torch_points3d.core.multimodal.CSRData._sorted_indices_to_pointers", "image.ImageMapping.__class__", "image.ImageMapping.insert_empty_groups", "torch.from_numpy", "isinstance", "image.ImageMapping.clone", "torch.any", "image.ImageMapping.__class__", "values[].unique.numel", "torch.full", "idx_gen.scatter_.scatter_.scatter_", "torch.from_numpy.dim", "torch.zeros_like", "torch.LongTensor", "image.ImageMapping.images.max", "torch.arange", "torch.arange", "values[].unique.max"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.csr.CSRData._sorted_indices_to_pointers", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.csr.CSRData.insert_empty_groups", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.clone"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageMapping.select_points": [[2161, 2272], ["torch_points3d.utils.multimodal.tensor_idx().to", "image.ImageMapping.clone", "image.ImageMapping.clone", "torch.zeros().long().to", "torch_points3d.utils.multimodal.tensor_idx", "torch_points3d.utils.multimodal.tensor_idx().to.repeat_interleave", "torch_points3d.utils.multimodal.tensor_idx().to.repeat_interleave", "point_ids.repeat_interleave.repeat_interleave.repeat_interleave", "image.ImageMapping.images.repeat_interleave", "torch_points3d.utils.multimodal.lexargunique", "image.ImageMapping.from_dense", "ValueError", "torch.zeros().long", "image.ImageMapping.clone", "torch.arange().equal", "image.ImageMapping.clone", "features.gather.gather.repeat_interleave", "torch_points3d.utils.multimodal.tensor_idx().to.unique", "torch_points3d.utils.multimodal.CompositeTensor", "view_ids.view().repeat.view().repeat.data.squeeze", "torch_scatter.scatter_mean", "features.gather.gather.gather", "torch.zeros", "torch.arange", "features.gather.gather.dim", "view_ids.view().repeat.view().repeat.view().repeat", "torch_points3d.utils.multimodal.tensor_idx().to.max", "torch_points3d.utils.multimodal.tensor_idx().to.max", "view_ids.view().repeat.view().repeat.view"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.clone", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.clone", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.multimodal.tensor_idx", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.multimodal.lexargunique", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageMapping.from_dense", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.clone", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.clone", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.gathering.gather"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageMapping.crop": [[2273, 2337], ["image.ImageMapping.images.repeat_interleave", "torch.where", "torch.arange().repeat_interleave", "point_ids.repeat_interleave.repeat_interleave.repeat_interleave", "image.ImageMapping.from_dense", "image.ImageMapping.clone", "image.ImageMapping.features.repeat_interleave", "image.ImageMapping.images.unique().numel", "torch.ge().all", "torch.lt().all", "torch.arange", "image.ImageMapping.images.unique().numel", "image.ImageMapping.images.unique", "torch.ge", "torch.lt", "image.ImageMapping.images.unique", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageMapping.from_dense", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.clone"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image._adjust_intrinsic": [[21, 58], ["all", "int", "numpy.floor", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float"], "function", ["None"], ["\n", "########################################################################", "\n", "#                             FROM SCRATCH                             #", "\n", "########################################################################", "\n", "\n", "class", "ModalityIdentity", "(", "Identity", ")", ":", "\n", "    ", "\"\"\"Identiy module for modalities.\n\n    Works just as torch_points3d.core.common_modules.Identity but\n    supports unused kwargs in its `__init__` and `forward`.\n    \"\"\"", "\n", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "x", "\n", "\n", "\n", "", "", "def", "standardize_weights", "(", "weight", ",", "scaled", "=", "True", ")", ":", "\n", "    ", "weight_mean", "=", "weight", ".", "mean", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "mean", "(", "dim", "=", "2", ",", "\n", "keepdim", "=", "True", ")", ".", "mean", "(", "dim", "=", "3", ",", "keepdim", "=", "True", ")", "\n", "weight", "=", "weight", "-", "weight_mean", "\n", "std", "=", "weight", ".", "view", "(", "weight", ".", "size", "(", "0", ")", ",", "-", "1", ")", ".", "std", "(", "dim", "=", "1", ")", ".", "view", "(", "-", "1", ",", "1", ",", "1", ",", "1", ")", "+", "1e-5", "\n", "fan_in", "=", "torch", ".", "Tensor", "(", "[", "weight", ".", "shape", "[", "1", "]", "]", ")", ".", "to", "(", "weight", ".", "device", ")", "\n", "if", "scaled", ":", "\n", "# Goes hand-in-hand with ReLUWS to scale the activation output", "\n", "        ", "weight", "=", "weight", "/", "(", "std", ".", "expand_as", "(", "weight", ")", "*", "torch", ".", "sqrt", "(", "fan_in", ")", ")", "\n", "", "else", ":", "\n", "        ", "weight", "=", "weight", "/", "std", ".", "expand_as", "(", "weight", ")", "\n", "", "return", "weight", "\n", "\n", "\n", "", "class", "Conv2dWS", "(", "nn", ".", "Conv2d", ",", "ABC", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.adjust_intrinsic": [[60, 99], ["func", "func", "image._adjust_intrinsic", "func"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image._adjust_intrinsic"], ["\n", "\n", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "True", ",", "\n", "padding_mode", "=", "'zeros'", ",", "scaled", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "groups", "=", "groups", ",", "\n", "bias", "=", "bias", ",", "padding_mode", "=", "padding_mode", ")", "\n", "self", ".", "scaled", "=", "scaled", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "weights", "=", "standardize_weights", "(", "self", ".", "weight", ",", "scaled", "=", "self", ".", "scaled", ")", "\n", "return", "self", ".", "_conv_forward", "(", "x", ",", "weights", ")", "\n", "\n", "\n", "", "", "class", "ConvTranspose2dWS", "(", "nn", ".", "ConvTranspose2d", ",", "ABC", ")", ":", "\n", "    ", "\"\"\"Convd2 with weight standardization.\n\n    sources:\n        - https://github.com/joe-siyuan-qiao/WeightStandardization\n        - https://pytorch.org/docs/stable/_modules/torch/nn/modules/conv.html\n        - https://arxiv.org/pdf/2102.06171.pdf\n        - https://arxiv.org/pdf/1603.01431.pdf\n    \"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "output_padding", "=", "0", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "True", ",", "\n", "padding_mode", "=", "'zeros'", ",", "scaled", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "in_channels", ",", "out_channels", ",", "\n", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "\n", "output_padding", "=", "output_padding", ",", "dilation", "=", "dilation", ",", "groups", "=", "groups", ",", "\n", "bias", "=", "bias", ",", "padding_mode", "=", "padding_mode", ")", "\n", "self", ".", "scaled", "=", "scaled", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "*", "args", ",", "output_size", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "self", ".", "padding_mode", "!=", "'zeros'", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'Only `zeros` padding mode is supported for ConvTranspose2d'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.sparse_interpolation": [[105, 171], ["torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.stack().T.long", "torch.stack().T.long", "torch.stack().T.long", "torch.stack().T.long", "torch.prod().abs().unsqueeze", "torch.prod().abs().unsqueeze", "torch.prod().abs().unsqueeze", "torch.prod().abs().unsqueeze", "len", "coords.min", "coords.max", "len", "torch.nn.ZeroPad2d", "torch.Tensor().to", "torch.prod().abs", "torch.prod().abs", "torch.prod().abs", "torch.prod().abs", "torch.nn.ReplicationPad2d", "NotImplementedError", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.nn.ReflectionPad2d", "torch.Tensor", "torch.prod", "torch.prod", "torch.prod", "torch.prod"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to"], ["return", "F", ".", "conv_transpose2d", "(", "\n", "x", ",", "weights", ",", "self", ".", "bias", ",", "self", ".", "stride", ",", "self", ".", "padding", ",", "output_padding", ",", "\n", "self", ".", "groups", ",", "self", ".", "dilation", ")", "\n", "\n", "\n", "", "", "class", "ReLUWS", "(", "nn", ".", "ReLU", ",", "ABC", ")", ":", "\n", "    ", "\"\"\"ReLU with weight standardization.\n\n    sources:\n        - https://github.com/joe-siyuan-qiao/WeightStandardization\n        - https://pytorch.org/docs/stable/_modules/torch/nn/modules/activation.html\n        - https://arxiv.org/pdf/2102.06171.pdf\n        - https://arxiv.org/pdf/1603.01431.pdf\n    \"\"\"", "\n", "_SCALE", "=", "sqrt", "(", "2", "/", "(", "1", "-", "1", "/", "pi", ")", ")", "\n", "\n", "def", "forward", "(", "self", ",", "input", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "F", ".", "relu", "(", "input", ",", "inplace", "=", "self", ".", "inplace", ")", "*", "self", ".", "_SCALE", "\n", "\n", "", "def", "extra_repr", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "f\"inplace={self.inplace}\"", "\n", "\n", "\n", "", "", "class", "ResBlock", "(", "nn", ".", "Module", ",", "ABC", ")", ":", "\n", "    ", "\"\"\"\n    Basic ResNet type block\n\n    Parameters\n    ----------\n    input_nc:\n        Number of input channels\n    output_nc:\n        number of output channels\n    convolution\n        Either Conv2d or ConvTranspose2d\n    \"\"\"", "\n", "\n", "# TODO: extend to EquiConv https://github.com/palver7/EquiConvPytorch", "\n", "\n", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "convolution", ",", "normalization", ",", "\n", "activation", ")", ":", "\n", "        ", "if", "convolution", "in", "[", "nn", ".", "ConvTranspose2d", ",", "ConvTranspose2dWS", "]", ":", "\n", "            ", "padding_mode", "=", "'zeros'", "\n", "", "else", ":", "\n", "            ", "padding_mode", "=", "'reflect'", "\n", "\n", "", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "block", "=", "(", "\n", "Seq", "(", ")", ".", "append", "(", "convolution", "(", "\n", "input_nc", ",", "\n", "output_nc", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "padding_mode", "=", "padding_mode", ")", ")", "\n", ".", "append", "(", "normalization", "(", "output_nc", ")", ")", "\n", ".", "append", "(", "activation", "(", ")", ")", "\n", ".", "append", "(", "convolution", "(", "\n", "output_nc", ",", "\n", "output_nc", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "padding_mode", "=", "padding_mode", ")", ")", "\n", ".", "append", "(", "normalization", "(", "output_nc", ")", ")", "\n", ".", "append", "(", "activation", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.visibility.VisibilityModel.__init__": [[1679, 1688], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "img_size", "=", "(", "1024", ",", "512", ")", ",", "crop_top", "=", "0", ",", "crop_bottom", "=", "0", ",", "r_max", "=", "30", ",", "\n", "r_min", "=", "0.5", ",", "camera", "=", "'s3dis_equirectangular'", ")", ":", "\n", "        ", "self", ".", "img_size", "=", "img_size", "\n", "self", ".", "crop_top", "=", "crop_top", "\n", "self", ".", "crop_bottom", "=", "crop_bottom", "\n", "self", ".", "r_max", "=", "r_max", "\n", "self", ".", "r_min", "=", "r_min", "\n", "self", ".", "camera", "=", "camera", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.visibility.VisibilityModel._camera_projection": [[1689, 1691], ["visibility.camera_projection"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.visibility.camera_projection"], ["", "def", "_camera_projection", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "camera_projection", "(", "*", "args", ",", "**", "self", ".", "__dict__", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.visibility.VisibilityModel._visibility": [[1692, 1695], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "_visibility", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.visibility.VisibilityModel._postprocess_features": [[1696, 1698], ["visibility.postprocess_features"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.visibility.postprocess_features"], ["", "def", "_postprocess_features", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "return", "postprocess_features", "(", "*", "args", ",", "**", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.visibility.VisibilityModel.__call__": [[1699, 1758], ["visibility.VisibilityModel._camera_projection", "visibility.VisibilityModel._visibility", "visibility.VisibilityModel._postprocess_features", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.visibility.VisibilityModel._camera_projection", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.visibility.BiasuttiVisibility._visibility", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.visibility.VisibilityModel._postprocess_features"], ["", "def", "__call__", "(", "\n", "self", ",", "xyz", ",", "img_xyz", ",", "linearity", "=", "None", ",", "planarity", "=", "None", ",", "scattering", "=", "None", ",", "\n", "normals", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Compute the visibility of a point cloud with respect to a\n        given camera pose.\n\n        :param xyz:\n        :param img_xyz:\n        :param linearity:\n        :param planarity:\n        :param scattering:\n        :param normals:\n        :param kwargs:\n        :return:\n        \"\"\"", "\n", "in_device", "=", "xyz", ".", "device", "\n", "\n", "# Compute camera projection", "\n", "idx_1", ",", "dist", ",", "x_proj", ",", "y_proj", "=", "self", ".", "_camera_projection", "(", "\n", "xyz", ",", "img_xyz", ",", "**", "kwargs", ")", "\n", "\n", "# Return if no projections are found", "\n", "if", "x_proj", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "            ", "out", "=", "{", "}", "\n", "out", "[", "'idx'", "]", "=", "torch", ".", "empty", "(", "(", "0", ",", ")", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "in_device", ")", "\n", "out", "[", "'x'", "]", "=", "torch", ".", "empty", "(", "(", "0", ",", ")", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "in_device", ")", "\n", "out", "[", "'y'", "]", "=", "torch", ".", "empty", "(", "(", "0", ",", ")", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "in_device", ")", "\n", "out", "[", "'depth'", "]", "=", "torch", ".", "empty", "(", "(", "0", ",", ")", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "in_device", ")", "\n", "out", "[", "'features'", "]", "=", "torch", ".", "empty", "(", "\n", "(", "0", ",", ")", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "in_device", ")", "\n", "return", "out", "\n", "\n", "# Compute visibility of projected points", "\n", "", "idx_2", ",", "x_pix", ",", "y_pix", "=", "self", ".", "_visibility", "(", "\n", "x_proj", ",", "y_proj", ",", "dist", ",", "xyz", "[", "idx_1", "]", ",", "**", "kwargs", ")", "\n", "\n", "# Keep data only for mapped point", "\n", "idx", "=", "idx_1", "[", "idx_2", "]", "\n", "xyz", "=", "xyz", "[", "idx", "]", "\n", "dist", "=", "dist", "[", "idx_2", "]", "\n", "x_proj", "=", "x_proj", "[", "idx_2", "]", "\n", "y_proj", "=", "y_proj", "[", "idx_2", "]", "\n", "\n", "out", "=", "{", "}", "\n", "out", "[", "'idx'", "]", "=", "idx", "\n", "out", "[", "'x'", "]", "=", "x_pix", "\n", "out", "[", "'y'", "]", "=", "y_pix", "\n", "out", "[", "'depth'", "]", "=", "dist", "\n", "\n", "# Compute mapping features", "\n", "linearity", "=", "linearity", "[", "idx", "]", "if", "linearity", "is", "not", "None", "else", "None", "\n", "planarity", "=", "planarity", "[", "idx", "]", "if", "planarity", "is", "not", "None", "else", "None", "\n", "scattering", "=", "scattering", "[", "idx", "]", "if", "scattering", "is", "not", "None", "else", "None", "\n", "normals", "=", "normals", "[", "idx", "]", "if", "normals", "is", "not", "None", "else", "None", "\n", "out", "[", "'features'", "]", "=", "self", ".", "_postprocess_features", "(", "\n", "xyz", "-", "img_xyz", ",", "y_proj", ",", "dist", ",", "linearity", ",", "planarity", ",", "scattering", ",", "\n", "normals", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.visibility.VisibilityModel.__repr__": [[1759, 1762], ["visibility.VisibilityModel.__dict__.items"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "attr_repr", "=", "', '", ".", "join", "(", "[", "f'{k}={v}'", "for", "k", ",", "v", "in", "self", ".", "__dict__", ".", "items", "(", ")", "]", ")", "\n", "return", "f'{self.__class__.__name__}({attr_repr})'", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.visibility.SplattingVisibility.__init__": [[1766, 1773], ["visibility.VisibilityModel.__init__"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "voxel", "=", "0.1", ",", "k_swell", "=", "1.0", ",", "d_swell", "=", "1000", ",", "exact", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "SplattingVisibility", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "voxel", "=", "voxel", "\n", "self", ".", "k_swell", "=", "k_swell", "\n", "self", ".", "d_swell", "=", "d_swell", "\n", "self", ".", "exact", "=", "exact", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.visibility.SplattingVisibility._visibility": [[1774, 1777], ["visibility.visibility_from_splatting"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.visibility.visibility_from_splatting"], ["", "def", "_visibility", "(", "self", ",", "x_proj", ",", "y_proj", ",", "dist", ",", "xyz", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "visibility_from_splatting", "(", "\n", "x_proj", ",", "y_proj", ",", "dist", ",", "xyz", ",", "**", "self", ".", "__dict__", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.visibility.DepthBasedVisibility.__init__": [[1781, 1784], ["visibility.VisibilityModel.__init__"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "depth_threshold", "=", "0.05", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "DepthBasedVisibility", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "depth_threshold", "=", "depth_threshold", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.visibility.DepthBasedVisibility._visibility": [[1785, 1788], ["visibility.visibility_from_depth_map"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.visibility.visibility_from_depth_map"], ["", "def", "_visibility", "(", "self", ",", "x_proj", ",", "y_proj", ",", "dist", ",", "xyz", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "visibility_from_depth_map", "(", "\n", "x_proj", ",", "y_proj", ",", "dist", ",", "**", "self", ".", "__dict__", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.visibility.BiasuttiVisibility.__init__": [[1792, 1797], ["visibility.VisibilityModel.__init__"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "k", "=", "75", ",", "margin", "=", "None", ",", "threshold", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "BiasuttiVisibility", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "k", "=", "k", "\n", "self", ".", "margin", "=", "margin", "\n", "self", ".", "threshold", "=", "threshold", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.visibility.BiasuttiVisibility._visibility": [[1798, 1801], ["visibility.visibility_biasutti"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.visibility.visibility_biasutti"], ["", "def", "_visibility", "(", "self", ",", "x_proj", ",", "y_proj", ",", "dist", ",", "xyz", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "visibility_biasutti", "(", "\n", "x_proj", ",", "y_proj", ",", "dist", ",", "**", "self", ".", "__dict__", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.visibility.torch_to_numba": [[22, 51], ["func", "isinstance", "isinstance", "x.cpu().numpy", "isinstance", "torch.from_numpy", "visibility.torch_to_numba.numbafy"], "function", ["None"], ["def", "torch_to_numba", "(", "func", ")", ":", "\n", "    ", "\"\"\"Decorator intended for numba functions to be fed and return\n    torch.Tensor arguments.\n\n    :param func:\n    :return:\n    \"\"\"", "\n", "\n", "def", "numbafy", "(", "x", ")", ":", "\n", "        ", "return", "x", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "if", "isinstance", "(", "x", ",", "torch", ".", "Tensor", ")", "else", "x", "\n", "\n", "", "def", "torchify", "(", "x", ")", ":", "\n", "        ", "return", "torch", ".", "from_numpy", "(", "x", ")", "if", "isinstance", "(", "x", ",", "np", ".", "ndarray", ")", "else", "x", "\n", "\n", "", "def", "wrapper_torch_to_numba", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "args_numba", "=", "[", "numbafy", "(", "x", ")", "for", "x", "in", "args", "]", "\n", "kwargs_numba", "=", "{", "k", ":", "numbafy", "(", "v", ")", "for", "k", ",", "v", "in", "kwargs", ".", "items", "(", ")", "}", "\n", "out", "=", "func", "(", "*", "args_numba", ",", "**", "kwargs_numba", ")", "\n", "if", "isinstance", "(", "out", ",", "list", ")", ":", "\n", "            ", "out", "=", "[", "torchify", "(", "x", ")", "for", "x", "in", "out", "]", "\n", "", "elif", "isinstance", "(", "out", ",", "tuple", ")", ":", "\n", "            ", "out", "=", "tuple", "(", "[", "torchify", "(", "x", ")", "for", "x", "in", "list", "(", "out", ")", "]", ")", "\n", "", "elif", "isinstance", "(", "out", ",", "dict", ")", ":", "\n", "            ", "out", "=", "{", "k", ":", "torchify", "(", "v", ")", "for", "k", ",", "v", "in", "out", ".", "items", "(", ")", "}", "\n", "", "else", ":", "\n", "            ", "out", "=", "torchify", "(", "out", ")", "\n", "", "return", "out", "\n", "\n", "", "return", "wrapper_torch_to_numba", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.visibility.pose_to_rotation_matrix_cpu": [[57, 91], ["numba.njit", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin", "numpy.array", "numpy.array", "numpy.array", "numpy.dot", "numpy.dot"], "function", ["None"], ["", "@", "njit", "(", "cache", "=", "True", ",", "nogil", "=", "True", ")", "\n", "def", "pose_to_rotation_matrix_cpu", "(", "opk", ")", ":", "\n", "    ", "\"\"\"Compute the rotation matrix from an omega, phi kappa triplet on\n    the CPU with numpy and numba.\n\n    :param opk:\n    :return:\n    \"\"\"", "\n", "# Omega, Phi, Kappa cos and sin", "\n", "co", "=", "np", ".", "cos", "(", "opk", "[", "0", "]", ")", "\n", "so", "=", "np", ".", "sin", "(", "opk", "[", "0", "]", ")", "\n", "cp", "=", "np", ".", "cos", "(", "opk", "[", "1", "]", ")", "\n", "sp", "=", "np", ".", "sin", "(", "opk", "[", "1", "]", ")", "\n", "ck", "=", "np", ".", "cos", "(", "opk", "[", "2", "]", ")", "\n", "sk", "=", "np", ".", "sin", "(", "opk", "[", "2", "]", ")", "\n", "\n", "# Omega, Phi, Kappa inverse rotation matrices", "\n", "M_o", "=", "np", ".", "array", "(", "[", "[", "1.0", ",", "0.0", ",", "0.0", "]", ",", "\n", "[", "0.0", ",", "co", ",", "-", "so", "]", ",", "\n", "[", "0.0", ",", "so", ",", "co", "]", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "M_p", "=", "np", ".", "array", "(", "[", "[", "cp", ",", "0.0", ",", "sp", "]", ",", "\n", "[", "0.0", ",", "1.0", ",", "0.0", "]", ",", "\n", "[", "-", "sp", ",", "0.0", ",", "cp", "]", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "M_k", "=", "np", ".", "array", "(", "[", "[", "ck", ",", "-", "sk", ",", "0.0", "]", ",", "\n", "[", "sk", ",", "ck", ",", "0.0", "]", ",", "\n", "[", "0.0", ",", "0.0", ",", "1.0", "]", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "# Global inverse rotation matrix to go from cartesian to", "\n", "# camera-system spherical coordinates", "\n", "M", "=", "np", ".", "dot", "(", "M_o", ",", "np", ".", "dot", "(", "M_p", ",", "M_k", ")", ")", "\n", "\n", "return", "M", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.visibility.pose_to_rotation_matrix_cuda": [[93, 127], ["torch.cos", "torch.sin", "torch.cos", "torch.sin", "torch.cos", "torch.sin", "torch.Tensor().float().to", "torch.Tensor().float().to", "torch.Tensor().float().to", "torch.mm", "torch.mm", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to"], ["", "def", "pose_to_rotation_matrix_cuda", "(", "opk", ")", ":", "\n", "    ", "\"\"\"Compute the rotation matrix from an omega, phi kappa triplet on\n    the GPU with torch and cuda.\n\n    :param opk:\n    :return:\n    \"\"\"", "\n", "# Omega, Phi, Kappa cos and sin", "\n", "co", "=", "torch", ".", "cos", "(", "opk", "[", "0", "]", ")", "\n", "so", "=", "torch", ".", "sin", "(", "opk", "[", "0", "]", ")", "\n", "cp", "=", "torch", ".", "cos", "(", "opk", "[", "1", "]", ")", "\n", "sp", "=", "torch", ".", "sin", "(", "opk", "[", "1", "]", ")", "\n", "ck", "=", "torch", ".", "cos", "(", "opk", "[", "2", "]", ")", "\n", "sk", "=", "torch", ".", "sin", "(", "opk", "[", "2", "]", ")", "\n", "\n", "# Omega, Phi, Kappa inverse rotation matrices", "\n", "device", "=", "opk", ".", "device", "\n", "M_o", "=", "torch", ".", "Tensor", "(", "[", "[", "1.0", ",", "0.0", ",", "0.0", "]", ",", "\n", "[", "0.0", ",", "co", ",", "-", "so", "]", ",", "\n", "[", "0.0", ",", "so", ",", "co", "]", "]", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "\n", "M_p", "=", "torch", ".", "Tensor", "(", "[", "[", "cp", ",", "0.0", ",", "sp", "]", ",", "\n", "[", "0.0", ",", "1.0", ",", "0.0", "]", ",", "\n", "[", "-", "sp", ",", "0.0", ",", "cp", "]", "]", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "\n", "M_k", "=", "torch", ".", "Tensor", "(", "[", "[", "ck", ",", "-", "sk", ",", "0.0", "]", ",", "\n", "[", "sk", ",", "ck", ",", "0.0", "]", ",", "\n", "[", "0.0", ",", "0.0", ",", "1.0", "]", "]", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "\n", "# Global inverse rotation matrix to go from cartesian to", "\n", "# camera-system spherical coordinates", "\n", "M", "=", "torch", ".", "mm", "(", "M_o", ",", "torch", ".", "mm", "(", "M_p", ",", "M_k", ")", ")", "\n", "\n", "return", "M", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.visibility.norm_cpu": [[129, 138], ["numba.njit", "numpy.sqrt"], "function", ["None"], ["", "@", "njit", "(", "cache", "=", "True", ",", "nogil", "=", "True", ")", "\n", "def", "norm_cpu", "(", "v", ")", ":", "\n", "    ", "\"\"\"Compute the L2 norm of row vectors of v on the CPU with numpy and\n    numba.\n\n    :param v:\n    :return:\n    \"\"\"", "\n", "return", "np", ".", "sqrt", "(", "(", "v", "**", "2", ")", ".", "sum", "(", "axis", "=", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.visibility.norm_cuda": [[140, 148], ["torch.linalg.norm"], "function", ["None"], ["", "def", "norm_cuda", "(", "v", ")", ":", "\n", "    ", "\"\"\"Compute the L2 norm of row vectors of v on the GPU with torch and\n    cuda.\n\n    :param v:\n    :return:\n    \"\"\"", "\n", "return", "torch", ".", "linalg", ".", "norm", "(", "v", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.visibility.equirectangular_projection_cpu": [[150, 183], ["numba.njit", "visibility.pose_to_rotation_matrix_cpu", "xyz_to_img.dot", "numpy.arctan2", "numpy.arccos", "pose_to_rotation_matrix_cpu.transpose", "numpy.where", "numpy.where", "numpy.isnan", "numpy.isnan"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.visibility.pose_to_rotation_matrix_cpu", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.lovasz_loss.isnan", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.lovasz_loss.isnan"], ["", "@", "njit", "(", "cache", "=", "True", ",", "nogil", "=", "True", ")", "\n", "def", "equirectangular_projection_cpu", "(", "\n", "xyz_to_img", ",", "radius", ",", "img_opk", ",", "img_size", ")", ":", "\n", "    ", "\"\"\"Compute the projection of 3D points into the image pixel\n    coordinate system of an equirectangular camera on the CPU with\n    numpy and numba.\n\n    :param xyz_to_img:\n    :param radius:\n    :param img_opk:\n    :param img_size:\n    :return:\n    \"\"\"", "\n", "# Rotation matrix from image Euler angle pose", "\n", "rotation", "=", "pose_to_rotation_matrix_cpu", "(", "img_opk", ")", "\n", "\n", "# Convert point to camera coordinate system", "\n", "v", "=", "xyz_to_img", ".", "dot", "(", "rotation", ".", "transpose", "(", ")", ")", "\n", "\n", "# Equirectangular projection", "\n", "t", "=", "np", ".", "arctan2", "(", "v", "[", ":", ",", "1", "]", ",", "v", "[", ":", ",", "0", "]", ")", "\n", "p", "=", "np", ".", "arccos", "(", "v", "[", ":", ",", "2", "]", "/", "radius", ")", "\n", "\n", "# Angles to pixel position", "\n", "width", ",", "height", "=", "img_size", "\n", "w_pix", "=", "(", "(", "width", "-", "1", ")", "*", "(", "1", "-", "t", "/", "np", ".", "pi", ")", "/", "2", ")", "%", "width", "\n", "h_pix", "=", "(", "(", "height", "-", "1", ")", "*", "p", "/", "np", ".", "pi", ")", "%", "height", "\n", "\n", "# Nan values may appear in extreme cases, set them to zero", "\n", "w_pix", "[", "np", ".", "where", "(", "np", ".", "isnan", "(", "w_pix", ")", ")", "]", "=", "0", "\n", "h_pix", "[", "np", ".", "where", "(", "np", ".", "isnan", "(", "h_pix", ")", ")", "]", "=", "0", "\n", "\n", "return", "w_pix", ",", "h_pix", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.visibility.equirectangular_projection_cuda": [[185, 217], ["visibility.pose_to_rotation_matrix_cuda", "xyz_to_img.mm", "torch.atan2", "torch.acos", "pose_to_rotation_matrix_cuda.t", "torch.where", "torch.where", "w_pix.isnan", "h_pix.isnan"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.visibility.pose_to_rotation_matrix_cuda", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.lovasz_loss.isnan", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.lovasz_loss.isnan"], ["", "def", "equirectangular_projection_cuda", "(", "\n", "xyz_to_img", ",", "radius", ",", "img_opk", ",", "img_size", ")", ":", "\n", "    ", "\"\"\"Compute the projection of 3D points into the image pixel\n    coordinate system of an equirectangular camera on the GPU with\n    torch and cuda.\n\n    :param xyz_to_img:\n    :param radius:\n    :param img_opk:\n    :param img_size:\n    :return:\n    \"\"\"", "\n", "# Rotation matrix from image Euler angle pose", "\n", "rotation", "=", "pose_to_rotation_matrix_cuda", "(", "img_opk", ")", "\n", "\n", "# Convert point to camera coordinate system", "\n", "v", "=", "xyz_to_img", ".", "mm", "(", "rotation", ".", "t", "(", ")", ")", "\n", "\n", "# Equirectangular projection", "\n", "t", "=", "torch", ".", "atan2", "(", "v", "[", ":", ",", "1", "]", ",", "v", "[", ":", ",", "0", "]", ")", "\n", "p", "=", "torch", ".", "acos", "(", "v", "[", ":", ",", "2", "]", "/", "radius", ")", "\n", "\n", "# Angles to pixel position", "\n", "width", ",", "height", "=", "img_size", "\n", "w_pix", "=", "(", "(", "width", "-", "1", ")", "*", "(", "1", "-", "t", "/", "np", ".", "pi", ")", "/", "2", ")", "%", "width", "\n", "h_pix", "=", "(", "(", "height", "-", "1", ")", "*", "p", "/", "np", ".", "pi", ")", "%", "height", "\n", "\n", "# Nan values may appear in extreme cases, set them to zero", "\n", "w_pix", "[", "torch", ".", "where", "(", "w_pix", ".", "isnan", "(", ")", ")", "]", "=", "0", "\n", "h_pix", "[", "torch", ".", "where", "(", "h_pix", ".", "isnan", "(", ")", ")", "]", "=", "0", "\n", "\n", "return", "w_pix", ",", "h_pix", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.visibility.pinhole_projection_cpu": [[219, 253], ["numba.njit", "numpy.linalg.inv", "camera_to_world[].copy().reshape", "camera_to_world[].copy", "x.astype", "y.astype", "z.astype", "numpy.ascontiguousarray", "camera_to_world[].copy().reshape", "camera_to_world[].copy", "camera_to_world[].copy", "camera_to_world[].copy"], "function", ["None"], ["", "@", "njit", "(", "cache", "=", "True", ",", "nogil", "=", "True", ")", "\n", "def", "pinhole_projection_cpu", "(", "xyz", ",", "img_extrinsic", ",", "img_intrinsic_pinhole", ",", "camera", "=", "'scannet'", ")", ":", "\n", "    ", "\"\"\"Compute the projection of 3D points into the image pixel\n    coordinate system of a pinhole camera described by a 4x4 intrinsic\n    and a 4x4 extrinsic parameters tensors. Computations are executed\n    on CPU with numpy and numba.\n\n    :param xyz:\n    :param img_extrinsic:\n    :param img_intrinsic_pinhole:\n    :return:\n    \"\"\"", "\n", "# Recover the 4x4 camera-to-world matrix", "\n", "if", "camera", "==", "'scannet'", ":", "\n", "        ", "camera_to_world", "=", "np", ".", "linalg", ".", "inv", "(", "np", ".", "ascontiguousarray", "(", "img_extrinsic", ")", ")", "\n", "T", "=", "camera_to_world", "[", ":", "3", ",", "3", "]", ".", "copy", "(", ")", ".", "reshape", "(", "(", "3", ",", "1", ")", ")", "\n", "R", "=", "camera_to_world", "[", ":", "3", ",", ":", "3", "]", ".", "copy", "(", ")", "\n", "p", "=", "R", "@", "xyz", ".", "T", "+", "T", "\n", "\n", "", "elif", "camera", "==", "'kitti360_perspective'", ":", "\n", "        ", "camera_to_world", "=", "img_extrinsic", "\n", "T", "=", "camera_to_world", "[", ":", "3", ",", "3", "]", ".", "copy", "(", ")", ".", "reshape", "(", "(", "1", ",", "3", ")", ")", "\n", "R", "=", "camera_to_world", "[", ":", "3", ",", ":", "3", "]", ".", "copy", "(", ")", "\n", "p", "=", "R", ".", "T", "@", "(", "xyz", "-", "T", ")", ".", "T", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "\n", "\n", "", "x", "=", "p", "[", "0", "]", "*", "img_intrinsic_pinhole", "[", "0", "]", "[", "0", "]", "/", "p", "[", "2", "]", "+", "img_intrinsic_pinhole", "[", "0", "]", "[", "2", "]", "\n", "y", "=", "p", "[", "1", "]", "*", "img_intrinsic_pinhole", "[", "1", "]", "[", "1", "]", "/", "p", "[", "2", "]", "+", "img_intrinsic_pinhole", "[", "1", "]", "[", "2", "]", "\n", "z", "=", "p", "[", "2", "]", "\n", "\n", "# Make sure you return floa64 like other projection_cpu functions ", "\n", "# for Numba to happily compile", "\n", "return", "x", ".", "astype", "(", "np", ".", "float64", ")", ",", "y", ".", "astype", "(", "np", ".", "float64", ")", ",", "z", ".", "astype", "(", "np", ".", "float64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.visibility.pinhole_projection_cuda": [[255, 286], ["torch.inverse", "camera_to_world[].view", "camera_to_world[].view"], "function", ["None"], ["", "def", "pinhole_projection_cuda", "(", "xyz", ",", "img_extrinsic", ",", "img_intrinsic_pinhole", ",", "camera", "=", "'scannet'", ")", ":", "\n", "    ", "\"\"\"Compute the projection of 3D points into the image pixel\n    coordinate system of a pinhole camera described by a 4x4 intrinsic\n    and a 4x4 extrinsic parameters tensors. Computations are executed\n    on GPU with torch and cuda.\n\n    :param xyz:\n    :param img_extrinsic:\n    :param img_intrinsic_pinhole:\n    :return:\n    \"\"\"", "\n", "if", "camera", "==", "'scannet'", ":", "\n", "        ", "camera_to_world", "=", "torch", ".", "inverse", "(", "img_extrinsic", ")", "\n", "T", "=", "camera_to_world", "[", ":", "3", ",", "3", "]", ".", "view", "(", "3", ",", "1", ")", "\n", "R", "=", "camera_to_world", "[", ":", "3", ",", ":", "3", "]", "\n", "p", "=", "R", "@", "xyz", ".", "T", "+", "T", "\n", "\n", "", "elif", "camera", "==", "'kitti360_perspective'", ":", "\n", "        ", "camera_to_world", "=", "img_extrinsic", "\n", "T", "=", "camera_to_world", "[", ":", "3", ",", "3", "]", ".", "view", "(", "1", ",", "3", ")", "\n", "R", "=", "camera_to_world", "[", ":", "3", ",", ":", "3", "]", "\n", "p", "=", "R", ".", "T", "@", "(", "xyz", "-", "T", ")", ".", "T", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "\n", "\n", "", "x", "=", "p", "[", "0", "]", "*", "img_intrinsic_pinhole", "[", "0", "]", "[", "0", "]", "/", "p", "[", "2", "]", "+", "img_intrinsic_pinhole", "[", "0", "]", "[", "2", "]", "\n", "y", "=", "p", "[", "1", "]", "*", "img_intrinsic_pinhole", "[", "1", "]", "[", "1", "]", "/", "p", "[", "2", "]", "+", "img_intrinsic_pinhole", "[", "1", "]", "[", "2", "]", "\n", "z", "=", "p", "[", "2", "]", "\n", "\n", "return", "x", ",", "y", ",", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.visibility.fisheye_projection_cpu": [[288, 340], ["numba.njit", "visibility.norm_cpu", "camera_to_world[].copy().reshape", "camera_to_world[].copy", "numpy.abs", "x.astype", "y.astype", "z.astype", "camera_to_world[].copy"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.visibility.norm_cpu"], ["", "@", "njit", "(", "cache", "=", "True", ",", "nogil", "=", "True", ")", "\n", "def", "fisheye_projection_cpu", "(", "\n", "xyz", ",", "img_extrinsic", ",", "img_intrinsic_fisheye", ",", "camera", "=", "'kitti360_fisheye'", ")", ":", "\n", "    ", "\"\"\"Compute the projection of 3D points into the image pixel\n    coordinate system of a fisheye camera described by 6 intrinsic\n    and a 4x4 extrinsic parameters tensors. Computations are executed\n    on CPU with numpy and numba.\n\n    Credit: https://github.com/autonomousvision/kitti360Scripts\n\n    :param xyz:\n    :param img_extrinsic:\n    :param img_intrinsic_fisheye:\n    :param camera:\n    :return:\n    \"\"\"", "\n", "if", "camera", "==", "'kitti360_fisheye'", ":", "\n", "        ", "camera_to_world", "=", "img_extrinsic", "\n", "T", "=", "camera_to_world", "[", ":", "3", ",", "3", "]", ".", "copy", "(", ")", ".", "reshape", "(", "(", "1", ",", "3", ")", ")", "\n", "R", "=", "camera_to_world", "[", ":", "3", ",", ":", "3", "]", ".", "copy", "(", ")", "\n", "p", "=", "R", ".", "T", "@", "(", "xyz", "-", "T", ")", ".", "T", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "\n", "\n", "# Recover fisheye camera intrinsic parameters", "\n", "", "xi", "=", "img_intrinsic_fisheye", "[", "0", "]", "\n", "k1", "=", "img_intrinsic_fisheye", "[", "1", "]", "\n", "k2", "=", "img_intrinsic_fisheye", "[", "2", "]", "\n", "gamma1", "=", "img_intrinsic_fisheye", "[", "3", "]", "\n", "gamma2", "=", "img_intrinsic_fisheye", "[", "4", "]", "\n", "u0", "=", "img_intrinsic_fisheye", "[", "5", "]", "\n", "v0", "=", "img_intrinsic_fisheye", "[", "6", "]", "\n", "\n", "# Compute float pixel coordinates", "\n", "p", "=", "p", ".", "T", "\n", "norm", "=", "norm_cpu", "(", "p", ")", "\n", "\n", "x", "=", "p", "[", ":", ",", "0", "]", "/", "(", "norm", "+", "1e-4", ")", "\n", "y", "=", "p", "[", ":", ",", "1", "]", "/", "(", "norm", "+", "1e-4", ")", "\n", "z", "=", "p", "[", ":", ",", "2", "]", "/", "(", "norm", "+", "1e-4", ")", "\n", "\n", "x", "/=", "z", "+", "xi", "\n", "y", "/=", "z", "+", "xi", "\n", "\n", "r2", "=", "x", "**", "2", "+", "y", "**", "2", "\n", "r4", "=", "r2", "**", "2", "\n", "\n", "x", "=", "gamma1", "*", "(", "1", "+", "k1", "*", "r2", "+", "k2", "*", "r4", ")", "*", "x", "+", "u0", "\n", "y", "=", "gamma2", "*", "(", "1", "+", "k1", "*", "r2", "+", "k2", "*", "r4", ")", "*", "y", "+", "v0", "\n", "z", "=", "norm", "*", "p", "[", ":", ",", "2", "]", "/", "np", ".", "abs", "(", "p", "[", ":", ",", "2", "]", "+", "1e-4", ")", "\n", "\n", "return", "x", ".", "astype", "(", "np", ".", "float64", ")", ",", "y", ".", "astype", "(", "np", ".", "float64", ")", ",", "z", ".", "astype", "(", "np", ".", "float64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.visibility.fisheye_projection_cuda": [[342, 393], ["torch.linalg.norm", "camera_to_world[].view", "p[].abs"], "function", ["None"], ["", "def", "fisheye_projection_cuda", "(", "\n", "xyz", ",", "img_extrinsic", ",", "img_intrinsic_fisheye", ",", "camera", "=", "'kitti360_fisheye'", ")", ":", "\n", "    ", "\"\"\"Compute the projection of 3D points into the image pixel\n    coordinate system of a fisheye camera described by 6 intrinsic\n    and a 4x4 extrinsic parameters tensors. Computations are executed\n    on GPU with torch and cuda.\n\n    Credit: https://github.com/autonomousvision/kitti360Scripts\n\n    :param xyz:\n    :param img_extrinsic:\n    :param img_intrinsic_fisheye:\n    :param camera:\n    :return:\n    \"\"\"", "\n", "if", "camera", "==", "'kitti360_fisheye'", ":", "\n", "        ", "camera_to_world", "=", "img_extrinsic", "\n", "T", "=", "camera_to_world", "[", ":", "3", ",", "3", "]", ".", "view", "(", "1", ",", "3", ")", "\n", "R", "=", "camera_to_world", "[", ":", "3", ",", ":", "3", "]", "\n", "p", "=", "R", ".", "T", "@", "(", "xyz", "-", "T", ")", ".", "T", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "\n", "\n", "# Recover fisheye camera intrinsic parameters", "\n", "", "xi", "=", "img_intrinsic_fisheye", "[", "0", "]", "\n", "k1", "=", "img_intrinsic_fisheye", "[", "0", "]", "\n", "k2", "=", "img_intrinsic_fisheye", "[", "0", "]", "\n", "gamma1", "=", "img_intrinsic_fisheye", "[", "0", "]", "\n", "gamma2", "=", "img_intrinsic_fisheye", "[", "0", "]", "\n", "u0", "=", "img_intrinsic_fisheye", "[", "0", "]", "\n", "v0", "=", "img_intrinsic_fisheye", "[", "0", "]", "\n", "\n", "# Compute float pixel coordinates", "\n", "p", "=", "p", ".", "T", "\n", "norm", "=", "torch", ".", "linalg", ".", "norm", "(", "p", ",", "dim", "=", "1", ")", "\n", "\n", "x", "=", "p", "[", ":", ",", "0", "]", "/", "norm", "\n", "y", "=", "p", "[", ":", ",", "1", "]", "/", "norm", "\n", "z", "=", "p", "[", ":", ",", "2", "]", "/", "norm", "\n", "\n", "x", "/=", "z", "+", "xi", "\n", "y", "/=", "z", "+", "xi", "\n", "\n", "r2", "=", "x", "**", "2", "+", "y", "**", "2", "\n", "r4", "=", "r2", "**", "2", "\n", "\n", "x", "=", "gamma1", "*", "(", "1", "+", "k1", "*", "r2", "+", "k2", "*", "r4", ")", "*", "x", "+", "u0", "\n", "y", "=", "gamma2", "*", "(", "1", "+", "k1", "*", "r2", "+", "k2", "*", "r4", ")", "*", "y", "+", "v0", "\n", "\n", "return", "x", ",", "y", ",", "norm", "*", "p", "[", ":", ",", "2", "]", "/", "(", "p", "[", ":", ",", "2", "]", ".", "abs", "(", ")", "+", "1e-4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.visibility.field_of_view_cpu": [[395, 436], ["numba.njit", "numpy.ones_like", "numpy.floor().astype", "numpy.floor().astype", "range", "numpy.where", "numpy.floor", "numpy.floor"], "function", ["None"], ["", "@", "njit", "(", "cache", "=", "True", ",", "nogil", "=", "True", ",", "fastmath", "=", "True", ")", "\n", "def", "field_of_view_cpu", "(", "\n", "x_pix", ",", "y_pix", ",", "x_min", "=", "None", ",", "x_max", "=", "None", ",", "y_min", "=", "None", ",", "y_max", "=", "None", ",", "z", "=", "None", ",", "\n", "img_mask", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n\n    :param x_pix:\n    :param y_pix:\n    :param x_min:\n    :param x_max:\n    :param y_min:\n    :param y_max:\n    :param z:\n    :param img_mask:\n    :return:\n    \"\"\"", "\n", "in_fov", "=", "np", ".", "ones_like", "(", "x_pix", ",", "dtype", "=", "np", ".", "bool_", ")", "\n", "\n", "if", "x_min", "is", "not", "None", ":", "\n", "        ", "in_fov", "*=", "(", "x_min", "<=", "x_pix", ")", "\n", "\n", "", "if", "y_min", "is", "not", "None", ":", "\n", "        ", "in_fov", "*=", "(", "y_min", "<=", "y_pix", ")", "\n", "\n", "", "if", "x_max", "is", "not", "None", ":", "\n", "        ", "in_fov", "*=", "(", "x_pix", "<", "x_max", ")", "\n", "\n", "", "if", "y_max", "is", "not", "None", ":", "\n", "        ", "in_fov", "*=", "(", "y_pix", "<", "y_max", ")", "\n", "\n", "", "if", "z", "is", "not", "None", ":", "\n", "        ", "in_fov", "*=", "(", "0", "<", "z", ")", "\n", "\n", "", "if", "not", "img_mask", "is", "None", ":", "\n", "        ", "n_points", "=", "x_pix", ".", "shape", "[", "0", "]", "\n", "x_int", "=", "np", ".", "floor", "(", "x_pix", ")", ".", "astype", "(", "np", ".", "uint32", ")", "\n", "y_int", "=", "np", ".", "floor", "(", "y_pix", ")", ".", "astype", "(", "np", ".", "uint32", ")", "\n", "for", "i", "in", "range", "(", "n_points", ")", ":", "\n", "            ", "if", "in_fov", "[", "i", "]", "and", "not", "img_mask", "[", "x_int", "[", "i", "]", ",", "y_int", "[", "i", "]", "]", ":", "\n", "                ", "in_fov", "[", "i", "]", "=", "False", "\n", "", "", "", "return", "np", ".", "where", "(", "in_fov", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.visibility.field_of_view_cuda": [[438, 476], ["torch.ones_like().bool", "torch.floor().long", "torch.floor().long", "torch.logical_and", "torch.where", "torch.ones_like", "torch.floor", "torch.floor"], "function", ["None"], ["", "def", "field_of_view_cuda", "(", "\n", "x_pix", ",", "y_pix", ",", "x_min", "=", "None", ",", "x_max", "=", "None", ",", "y_min", "=", "None", ",", "y_max", "=", "None", ",", "z", "=", "None", ",", "\n", "img_mask", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n\n    :param x_pix:\n    :param y_pix:\n    :param x_min:\n    :param x_max:\n    :param y_min:\n    :param y_max:\n    :param z_min:\n    :param z_max:\n    :param img_mask:\n    :return:\n    \"\"\"", "\n", "in_fov", "=", "torch", ".", "ones_like", "(", "x_pix", ")", ".", "bool", "(", ")", "\n", "\n", "if", "x_min", "is", "not", "None", ":", "\n", "        ", "in_fov", "*=", "(", "x_min", "<=", "x_pix", ")", "\n", "\n", "", "if", "y_min", "is", "not", "None", ":", "\n", "        ", "in_fov", "*=", "(", "y_min", "<=", "y_pix", ")", "\n", "\n", "", "if", "x_max", "is", "not", "None", ":", "\n", "        ", "in_fov", "*=", "(", "x_pix", "<", "x_max", ")", "\n", "\n", "", "if", "y_max", "is", "not", "None", ":", "\n", "        ", "in_fov", "*=", "(", "y_pix", "<", "y_max", ")", "\n", "\n", "", "if", "z", "is", "not", "None", ":", "\n", "        ", "in_fov", "*=", "(", "0", "<", "z", ")", "\n", "\n", "", "if", "not", "img_mask", "is", "None", ":", "\n", "        ", "x_int", "=", "torch", ".", "floor", "(", "x_pix", ")", ".", "long", "(", ")", "\n", "y_int", "=", "torch", ".", "floor", "(", "y_pix", ")", ".", "long", "(", ")", "\n", "in_fov", "=", "torch", ".", "logical_and", "(", "in_fov", ",", "img_mask", "[", "x_int", ",", "y_int", "]", ")", "\n", "", "return", "torch", ".", "where", "(", "in_fov", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.visibility.camera_projection_cpu": [[478, 539], ["numba.njit", "numpy.arange", "visibility.norm_cpu", "visibility.field_of_view_cpu", "numpy.where", "visibility.pinhole_projection_cpu", "numpy.logical_and", "visibility.fisheye_projection_cpu", "visibility.equirectangular_projection_cpu", "numpy.ones_like"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.visibility.norm_cpu", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.visibility.field_of_view_cpu", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.visibility.pinhole_projection_cpu", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.visibility.fisheye_projection_cpu", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.visibility.equirectangular_projection_cpu"], ["", "@", "torch_to_numba", "\n", "@", "njit", "(", "cache", "=", "True", ",", "nogil", "=", "True", ")", "\n", "def", "camera_projection_cpu", "(", "\n", "xyz", ",", "img_xyz", ",", "img_opk", "=", "None", ",", "img_intrinsic_pinhole", "=", "None", ",", "\n", "img_intrinsic_fisheye", "=", "None", ",", "img_extrinsic", "=", "None", ",", "img_mask", "=", "None", ",", "\n", "img_size", "=", "(", "1024", ",", "512", ")", ",", "crop_top", "=", "0", ",", "crop_bottom", "=", "0", ",", "r_max", "=", "30", ",", "r_min", "=", "0.5", ",", "\n", "camera", "=", "'s3dis_equirectangular'", ")", ":", "\n", "    ", "assert", "img_mask", "is", "None", "or", "img_mask", ".", "shape", "==", "img_size", "\n", "\n", "# Need to set defaults inside the function rather than in the kwargs", "\n", "# because those will be overwritten by the parent CPU-GPU dispatcher", "\n", "# function", "\n", "if", "img_opk", "is", "None", ":", "\n", "        ", "img_opk", "=", "OPK_DEFAULT", "\n", "", "if", "img_intrinsic_pinhole", "is", "None", ":", "\n", "        ", "img_intrinsic_pinhole", "=", "PINHOLE_DEFAULT", "\n", "", "if", "img_intrinsic_fisheye", "is", "None", ":", "\n", "        ", "img_intrinsic_fisheye", "=", "FISHEYE_DEFAULT", "\n", "", "if", "img_extrinsic", "is", "None", ":", "\n", "        ", "img_extrinsic", "=", "EXTRINSIC_DEFAULT", "\n", "\n", "# We store indices in int64 format so we only accept indices up to", "\n", "# np.iinfo(np.int64).max", "\n", "", "num_points", "=", "xyz", ".", "shape", "[", "0", "]", "\n", "if", "num_points", ">=", "9223372036854775807", ":", "\n", "        ", "raise", "OverflowError", "\n", "\n", "# Initialize the indices to keep track of selected points", "\n", "", "indices", "=", "np", ".", "arange", "(", "num_points", ")", "\n", "\n", "# Remove points outside of image range", "\n", "dist", "=", "norm_cpu", "(", "xyz", "-", "img_xyz", ")", "\n", "in_range", "=", "np", ".", "where", "(", "np", ".", "logical_and", "(", "r_min", "<", "dist", ",", "dist", "<", "r_max", ")", ")", "[", "0", "]", "\n", "xyz", "=", "xyz", "[", "in_range", "]", "\n", "dist", "=", "dist", "[", "in_range", "]", "\n", "indices", "=", "indices", "[", "in_range", "]", "\n", "\n", "# Project points to float pixel coordinates", "\n", "if", "camera", "in", "[", "'kitti360_perspective'", ",", "'scannet'", "]", ":", "\n", "        ", "x_proj", ",", "y_proj", ",", "z_proj", "=", "pinhole_projection_cpu", "(", "\n", "xyz", ",", "img_extrinsic", ",", "img_intrinsic_pinhole", ",", "camera", "=", "camera", ")", "\n", "", "elif", "camera", "==", "'kitti360_fisheye'", ":", "\n", "        ", "x_proj", ",", "y_proj", ",", "z_proj", "=", "fisheye_projection_cpu", "(", "\n", "xyz", ",", "img_extrinsic", ",", "img_intrinsic_fisheye", ",", "camera", "=", "camera", ")", "\n", "", "elif", "camera", "==", "'s3dis_equirectangular'", "and", "img_opk", "is", "not", "None", ":", "\n", "        ", "x_proj", ",", "y_proj", "=", "equirectangular_projection_cpu", "(", "\n", "xyz", "-", "img_xyz", ",", "dist", ",", "img_opk", ",", "img_size", ")", "\n", "z_proj", "=", "np", ".", "ones_like", "(", "x_proj", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "\n", "\n", "# Remove points outside of camera field of view", "\n", "", "in_fov", "=", "field_of_view_cpu", "(", "\n", "x_proj", ",", "y_proj", ",", "x_min", "=", "0", ",", "x_max", "=", "img_size", "[", "0", "]", ",", "y_min", "=", "crop_top", ",", "\n", "y_max", "=", "img_size", "[", "1", "]", "-", "crop_bottom", ",", "z", "=", "z_proj", ",", "img_mask", "=", "img_mask", ")", "\n", "dist", "=", "dist", "[", "in_fov", "]", "\n", "indices", "=", "indices", "[", "in_fov", "]", "\n", "x_proj", "=", "x_proj", "[", "in_fov", "]", "\n", "y_proj", "=", "y_proj", "[", "in_fov", "]", "\n", "\n", "return", "indices", ",", "dist", ",", "x_proj", ",", "y_proj", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.visibility.camera_projection_cuda": [[541, 590], ["torch.arange", "visibility.norm_cuda", "visibility.field_of_view_cuda", "torch.where", "visibility.pinhole_projection_cuda", "torch.logical_and", "visibility.fisheye_projection_cuda", "visibility.equirectangular_projection_cuda"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.visibility.norm_cuda", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.visibility.field_of_view_cuda", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.visibility.pinhole_projection_cuda", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.visibility.fisheye_projection_cuda", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.visibility.equirectangular_projection_cuda"], ["", "def", "camera_projection_cuda", "(", "\n", "xyz", ",", "img_xyz", ",", "img_opk", "=", "None", ",", "img_intrinsic_pinhole", "=", "None", ",", "\n", "img_intrinsic_fisheye", "=", "None", ",", "img_extrinsic", "=", "None", ",", "\n", "img_mask", "=", "None", ",", "img_size", "=", "(", "1024", ",", "512", ")", ",", "crop_top", "=", "0", ",", "crop_bottom", "=", "0", ",", "\n", "r_max", "=", "30", ",", "r_min", "=", "0.5", ",", "camera", "=", "'s3dis_equirectangular'", ")", ":", "\n", "    ", "assert", "img_mask", "is", "None", "or", "img_mask", ".", "shape", "==", "img_size", ",", "f'Expected img_mask to be a torch.BoolTensor of shape '", "f'img_size={img_size} but got size={img_mask.shape}.'", "\n", "\n", "# We store indices in int64 format so we only accept indices up to", "\n", "# torch.iinfo(torch.long).max", "\n", "num_points", "=", "xyz", ".", "shape", "[", "0", "]", "\n", "if", "num_points", ">=", "9223372036854775807", ":", "\n", "        ", "raise", "OverflowError", "\n", "\n", "# Initialize the indices to keep track of selected points", "\n", "", "indices", "=", "torch", ".", "arange", "(", "num_points", ",", "device", "=", "xyz", ".", "device", ")", "\n", "\n", "# Remove points outside of image range", "\n", "dist", "=", "norm_cuda", "(", "xyz", "-", "img_xyz", ")", "\n", "in_range", "=", "torch", ".", "where", "(", "torch", ".", "logical_and", "(", "r_min", "<", "dist", ",", "dist", "<", "r_max", ")", ")", "[", "0", "]", "\n", "xyz", "=", "xyz", "[", "in_range", "]", "\n", "dist", "=", "dist", "[", "in_range", "]", "\n", "indices", "=", "indices", "[", "in_range", "]", "\n", "\n", "# Project points to float pixel coordinates", "\n", "if", "camera", "in", "[", "'kitti360_perspective'", ",", "'scannet'", "]", ":", "\n", "        ", "x_proj", ",", "y_proj", ",", "z_proj", "=", "pinhole_projection_cuda", "(", "\n", "xyz", ",", "img_extrinsic", ",", "img_intrinsic_pinhole", ",", "camera", "=", "camera", ")", "\n", "", "elif", "camera", "==", "'kitti360_fisheye'", ":", "\n", "        ", "x_proj", ",", "y_proj", ",", "z_proj", "=", "fisheye_projection_cuda", "(", "\n", "xyz", ",", "img_extrinsic", ",", "img_intrinsic_fisheye", ",", "camera", "=", "camera", ")", "\n", "", "elif", "camera", "==", "'s3dis_equirectangular'", "and", "img_opk", "is", "not", "None", ":", "\n", "        ", "x_proj", ",", "y_proj", "=", "equirectangular_projection_cuda", "(", "\n", "xyz", "-", "img_xyz", ",", "dist", ",", "img_opk", ",", "img_size", ")", "\n", "z_proj", "=", "None", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "\n", "\n", "# Remove points outside of camera field of view", "\n", "", "in_fov", "=", "field_of_view_cuda", "(", "\n", "x_proj", ",", "y_proj", ",", "x_min", "=", "0", ",", "x_max", "=", "img_size", "[", "0", "]", ",", "y_min", "=", "crop_top", ",", "\n", "y_max", "=", "img_size", "[", "1", "]", "-", "crop_bottom", ",", "z", "=", "z_proj", ",", "img_mask", "=", "img_mask", ")", "\n", "dist", "=", "dist", "[", "in_fov", "]", "\n", "indices", "=", "indices", "[", "in_fov", "]", "\n", "x_proj", "=", "x_proj", "[", "in_fov", "]", "\n", "y_proj", "=", "y_proj", "[", "in_fov", "]", "\n", "\n", "return", "indices", ",", "dist", ",", "x_proj", ",", "y_proj", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.visibility.camera_projection": [[592, 624], ["f"], "function", ["None"], ["", "def", "camera_projection", "(", "\n", "xyz", ",", "img_xyz", ",", "img_opk", "=", "None", ",", "img_intrinsic_pinhole", "=", "None", ",", "\n", "img_intrinsic_fisheye", "=", "None", ",", "img_extrinsic", "=", "None", ",", "img_mask", "=", "None", ",", "\n", "img_size", "=", "(", "1024", ",", "512", ")", ",", "crop_top", "=", "0", ",", "crop_bottom", "=", "0", ",", "r_max", "=", "30", ",", "r_min", "=", "0.5", ",", "\n", "camera", "=", "'s3dis_equirectangular'", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n\n    :param xyz:\n    :param img_xyz:\n    :param img_opk:\n    :param img_intrinsic_pinhole:\n    :param img_extrinsic:\n    :param img_mask:\n    :param img_size:\n    :param crop_top:\n    :param crop_bottom:\n    :param r_max:\n    :param r_min:\n    :param kwargs:\n    :return:\n    \"\"\"", "\n", "assert", "img_mask", "is", "None", "or", "img_mask", ".", "shape", "==", "img_size", ",", "f'Expected img_mask to be a torch.BoolTensor of shape '", "f'img_size={img_size} but got size={img_mask.shape}.'", "\n", "\n", "f", "=", "camera_projection_cuda", "if", "xyz", ".", "is_cuda", "else", "camera_projection_cpu", "\n", "return", "f", "(", "\n", "xyz", ",", "img_xyz", ",", "img_opk", "=", "img_opk", ",", "img_intrinsic_pinhole", "=", "img_intrinsic_pinhole", ",", "\n", "img_intrinsic_fisheye", "=", "img_intrinsic_fisheye", ",", "\n", "img_extrinsic", "=", "img_extrinsic", ",", "img_mask", "=", "img_mask", ",", "img_size", "=", "img_size", ",", "\n", "crop_top", "=", "crop_top", ",", "crop_bottom", "=", "crop_bottom", ",", "r_max", "=", "r_max", ",", "r_min", "=", "r_min", ",", "\n", "camera", "=", "camera", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.visibility.equirectangular_splat_cpu": [[630, 705], ["numba.njit", "numpy.stack().transpose", "numpy.empty_like", "numpy.empty_like", "numpy.empty_like", "numpy.empty_like", "numpy.round", "numpy.round", "numpy.round", "numpy.round", "numpy.stack().transpose().astype", "range", "numpy.sin", "numpy.stack", "numpy.stack().transpose", "numpy.exp", "numpy.stack", "numpy.log"], "function", ["None"], ["", "@", "njit", "(", "cache", "=", "True", ",", "nogil", "=", "True", ")", "\n", "def", "equirectangular_splat_cpu", "(", "\n", "x_proj", ",", "y_proj", ",", "dist", ",", "img_size", "=", "(", "1024", ",", "512", ")", ",", "crop_top", "=", "0", ",", "crop_bottom", "=", "0", ",", "\n", "voxel", "=", "0.02", ",", "k_swell", "=", "1.0", ",", "d_swell", "=", "1000", ")", ":", "\n", "    ", "\"\"\"\n\n    :param x_proj:\n    :param y_proj:\n    :param dist:\n    :param img_size:\n    :param crop_top:\n    :param crop_bottom:\n    :param voxel:\n    :param k_swell:\n    :param d_swell:\n    :return:\n    \"\"\"", "\n", "# Compute angular width. 3D points' projected masks are grown based", "\n", "# on their distance. Close-by points are further swollen with a", "\n", "# heuristic based on k_swell and d_swell.", "\n", "# Small angular widths assumption: tan(x)~x", "\n", "angular_width", "=", "(", "1", "+", "k_swell", "*", "np", ".", "exp", "(", "-", "dist", "/", "np", ".", "log", "(", "d_swell", ")", ")", ")", "*", "voxel", "/", "dist", "\n", "\n", "# Compute Y angular width", "\n", "# NB: constant for equirectangular projection", "\n", "angular_res_y", "=", "angular_width", "*", "img_size", "[", "1", "]", "/", "np", ".", "pi", "\n", "\n", "# Compute X angular width", "\n", "# NB: function of latitude for equirectangular projection", "\n", "a", "=", "angular_width", "*", "img_size", "[", "0", "]", "/", "(", "2.0", "*", "np", ".", "pi", ")", "\n", "b", "=", "np", ".", "pi", "/", "img_size", "[", "1", "]", "\n", "angular_res_x", "=", "a", "/", "(", "np", ".", "sin", "(", "b", "*", "y_proj", ")", "+", "0.001", ")", "\n", "\n", "# NB: stack+transpose faster than column stack", "\n", "splat_xy_width", "=", "np", ".", "stack", "(", "(", "angular_res_x", ",", "angular_res_y", ")", ")", ".", "transpose", "(", ")", "\n", "\n", "# Compute projection masks bounding box pixel coordinates", "\n", "x_a", "=", "np", ".", "empty_like", "(", "x_proj", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "x_b", "=", "np", ".", "empty_like", "(", "x_proj", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "y_a", "=", "np", ".", "empty_like", "(", "x_proj", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "y_b", "=", "np", ".", "empty_like", "(", "x_proj", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "np", ".", "round", "(", "x_proj", "-", "splat_xy_width", "[", ":", ",", "0", "]", "/", "2", ",", "0", ",", "x_a", ")", "\n", "np", ".", "round", "(", "x_proj", "+", "splat_xy_width", "[", ":", ",", "0", "]", "/", "2", "+", "1", ",", "0", ",", "x_b", ")", "\n", "np", ".", "round", "(", "y_proj", "-", "splat_xy_width", "[", ":", ",", "1", "]", "/", "2", ",", "0", ",", "y_a", ")", "\n", "np", ".", "round", "(", "y_proj", "+", "splat_xy_width", "[", ":", ",", "1", "]", "/", "2", "+", "1", ",", "0", ",", "y_b", ")", "\n", "splat", "=", "np", ".", "stack", "(", "(", "x_a", ",", "x_b", ",", "y_a", ",", "y_b", ")", ")", ".", "transpose", "(", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "# Adjust masks at the image border", "\n", "x_min", "=", "0", "\n", "x_max", "=", "img_size", "[", "0", "]", "\n", "y_min", "=", "crop_top", "\n", "y_max", "=", "img_size", "[", "1", "]", "-", "crop_bottom", "\n", "for", "i", "in", "range", "(", "splat", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "if", "splat", "[", "i", ",", "0", "]", "<", "x_min", ":", "\n", "            ", "splat", "[", "i", ",", "0", "]", "=", "x_min", "\n", "", "if", "splat", "[", "i", ",", "0", "]", ">", "x_max", "-", "1", ":", "\n", "            ", "splat", "[", "i", ",", "0", "]", "=", "x_max", "-", "1", "\n", "\n", "", "if", "splat", "[", "i", ",", "1", "]", "<", "x_min", "+", "1", ":", "\n", "            ", "splat", "[", "i", ",", "1", "]", "=", "x_min", "+", "1", "\n", "", "if", "splat", "[", "i", ",", "1", "]", ">", "x_max", ":", "\n", "            ", "splat", "[", "i", ",", "1", "]", "=", "x_max", "\n", "\n", "", "if", "splat", "[", "i", ",", "2", "]", "<", "y_min", ":", "\n", "            ", "splat", "[", "i", ",", "2", "]", "=", "y_min", "\n", "", "if", "splat", "[", "i", ",", "2", "]", ">", "y_max", "-", "1", ":", "\n", "            ", "splat", "[", "i", ",", "2", "]", "=", "y_max", "-", "1", "\n", "\n", "", "if", "splat", "[", "i", ",", "3", "]", "<", "y_min", "+", "1", ":", "\n", "            ", "splat", "[", "i", ",", "3", "]", "=", "y_min", "+", "1", "\n", "", "if", "splat", "[", "i", ",", "3", "]", ">", "y_max", ":", "\n", "            ", "splat", "[", "i", ",", "3", "]", "=", "y_max", "\n", "\n", "", "", "return", "splat", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.visibility.equirectangular_splat_cuda": [[707, 759], ["torch.stack().t", "torch.round", "torch.round", "torch.round", "torch.round", "torch.stack().t().long", "splat[].clamp", "splat[].clamp", "splat[].clamp", "splat[].clamp", "torch.sin", "torch.stack", "torch.stack().t", "torch.exp", "torch.stack", "numpy.log"], "function", ["None"], ["", "def", "equirectangular_splat_cuda", "(", "\n", "x_proj", ",", "y_proj", ",", "dist", ",", "img_size", "=", "(", "1024", ",", "512", ")", ",", "crop_top", "=", "0", ",", "crop_bottom", "=", "0", ",", "\n", "voxel", "=", "0.02", ",", "k_swell", "=", "1.0", ",", "d_swell", "=", "1000", ")", ":", "\n", "    ", "\"\"\"\n\n    :param x_proj:\n    :param y_proj:\n    :param dist:\n    :param img_size:\n    :param crop_top:\n    :param crop_bottom:\n    :param voxel:\n    :param k_swell:\n    :param d_swell:\n    :return:\n    \"\"\"", "\n", "# Compute angular width. 3D points' projected masks are grown based", "\n", "# on their distance. Close-by points are further swollen with a", "\n", "# heuristic based on k_swell and d_swell.", "\n", "# Small angular widths assumption: tan(x)~x", "\n", "angular_width", "=", "(", "1", "+", "k_swell", "*", "torch", ".", "exp", "(", "-", "dist", "/", "np", ".", "log", "(", "d_swell", ")", ")", ")", "*", "voxel", "/", "dist", "\n", "\n", "# Compute Y angular width", "\n", "# NB: constant for equirectangular projection", "\n", "angular_res_y", "=", "angular_width", "*", "img_size", "[", "1", "]", "/", "np", ".", "pi", "\n", "\n", "# Compute X angular width", "\n", "# NB: function of latitude for equirectangular projection", "\n", "a", "=", "angular_width", "*", "img_size", "[", "0", "]", "/", "(", "2.0", "*", "np", ".", "pi", ")", "\n", "b", "=", "np", ".", "pi", "/", "img_size", "[", "1", "]", "\n", "angular_res_x", "=", "a", "/", "(", "torch", ".", "sin", "(", "b", "*", "y_proj", ")", "+", "0.001", ")", "\n", "splat_xy_width", "=", "torch", ".", "stack", "(", "(", "angular_res_x", ",", "angular_res_y", ")", ")", ".", "t", "(", ")", "\n", "\n", "# Compute projection masks bounding box pixel coordinates", "\n", "x_a", "=", "torch", ".", "round", "(", "x_proj", "-", "splat_xy_width", "[", ":", ",", "0", "]", "/", "2", ")", "\n", "x_b", "=", "torch", ".", "round", "(", "x_proj", "+", "splat_xy_width", "[", ":", ",", "0", "]", "/", "2", "+", "1", ")", "\n", "y_a", "=", "torch", ".", "round", "(", "y_proj", "-", "splat_xy_width", "[", ":", ",", "1", "]", "/", "2", ")", "\n", "y_b", "=", "torch", ".", "round", "(", "y_proj", "+", "splat_xy_width", "[", ":", ",", "1", "]", "/", "2", "+", "1", ")", "\n", "splat", "=", "torch", ".", "stack", "(", "(", "x_a", ",", "x_b", ",", "y_a", ",", "y_b", ")", ")", ".", "t", "(", ")", ".", "long", "(", ")", "\n", "\n", "# Adjust masks at the image border", "\n", "x_min", "=", "0", "\n", "x_max", "=", "img_size", "[", "0", "]", "\n", "y_min", "=", "crop_top", "\n", "y_max", "=", "img_size", "[", "1", "]", "-", "crop_bottom", "\n", "splat", "[", ":", ",", "0", "]", "=", "splat", "[", ":", ",", "0", "]", ".", "clamp", "(", "min", "=", "x_min", ",", "max", "=", "x_max", "-", "1", ")", "\n", "splat", "[", ":", ",", "1", "]", "=", "splat", "[", ":", ",", "1", "]", ".", "clamp", "(", "min", "=", "x_min", "+", "1", ",", "max", "=", "x_max", ")", "\n", "splat", "[", ":", ",", "2", "]", "=", "splat", "[", ":", ",", "2", "]", ".", "clamp", "(", "min", "=", "y_min", ",", "max", "=", "y_max", "-", "1", ")", "\n", "splat", "[", ":", ",", "3", "]", "=", "splat", "[", ":", ",", "3", "]", ".", "clamp", "(", "min", "=", "y_min", "+", "1", ",", "max", "=", "y_max", ")", "\n", "\n", "return", "splat", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.visibility.pinhole_splat_cpu": [[761, 828], ["numba.njit", "numpy.stack().transpose", "numpy.empty_like", "numpy.empty_like", "numpy.empty_like", "numpy.empty_like", "numpy.round", "numpy.round", "numpy.round", "numpy.round", "numpy.stack().transpose().astype", "range", "numpy.stack", "numpy.stack().transpose", "numpy.exp", "numpy.stack", "numpy.log"], "function", ["None"], ["", "@", "njit", "(", "cache", "=", "True", ",", "nogil", "=", "True", ")", "\n", "def", "pinhole_splat_cpu", "(", "\n", "x_proj", ",", "y_proj", ",", "dist", ",", "img_intrinsic_pinhole", ",", "img_size", "=", "(", "1024", ",", "512", ")", ",", "crop_top", "=", "0", ",", "\n", "crop_bottom", "=", "0", ",", "voxel", "=", "0.02", ",", "k_swell", "=", "1.0", ",", "d_swell", "=", "1000", ")", ":", "\n", "    ", "\"\"\"\n\n    :param x_proj:\n    :param y_proj:\n    :param dist:\n    :param img_intrinsic_pinhole:\n    :param img_size:\n    :param crop_top:\n    :param crop_bottom:\n    :param voxel:\n    :param k_swell:\n    :param d_swell:\n    :return:\n    \"\"\"", "\n", "# Compute angular width. 3D points' projected masks are grown based", "\n", "# on their distance. Close-by points are further swollen with a", "\n", "# heuristic based on k_swell and d_swell.", "\n", "# Small angular widths assumption: tan(x)~x", "\n", "swell", "=", "(", "1", "+", "k_swell", "*", "np", ".", "exp", "(", "-", "dist", "/", "np", ".", "log", "(", "d_swell", ")", ")", ")", "*", "voxel", "/", "dist", "\n", "width_x", "=", "swell", "*", "img_intrinsic_pinhole", "[", "0", ",", "0", "]", "\n", "width_y", "=", "swell", "*", "img_intrinsic_pinhole", "[", "1", ",", "1", "]", "\n", "\n", "# NB: stack+transpose faster than column stack", "\n", "splat_xy_width", "=", "np", ".", "stack", "(", "(", "width_x", ",", "width_y", ")", ")", ".", "transpose", "(", ")", "\n", "\n", "# Compute projection masks bounding box pixel coordinates", "\n", "x_a", "=", "np", ".", "empty_like", "(", "x_proj", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "x_b", "=", "np", ".", "empty_like", "(", "x_proj", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "y_a", "=", "np", ".", "empty_like", "(", "x_proj", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "y_b", "=", "np", ".", "empty_like", "(", "x_proj", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "np", ".", "round", "(", "x_proj", "-", "splat_xy_width", "[", ":", ",", "0", "]", "/", "2", ",", "0", ",", "x_a", ")", "\n", "np", ".", "round", "(", "x_proj", "+", "splat_xy_width", "[", ":", ",", "0", "]", "/", "2", "+", "1", ",", "0", ",", "x_b", ")", "\n", "np", ".", "round", "(", "y_proj", "-", "splat_xy_width", "[", ":", ",", "1", "]", "/", "2", ",", "0", ",", "y_a", ")", "\n", "np", ".", "round", "(", "y_proj", "+", "splat_xy_width", "[", ":", ",", "1", "]", "/", "2", "+", "1", ",", "0", ",", "y_b", ")", "\n", "splat", "=", "np", ".", "stack", "(", "(", "x_a", ",", "x_b", ",", "y_a", ",", "y_b", ")", ")", ".", "transpose", "(", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "# Adjust masks at the image border", "\n", "x_min", "=", "0", "\n", "x_max", "=", "img_size", "[", "0", "]", "\n", "y_min", "=", "crop_top", "\n", "y_max", "=", "img_size", "[", "1", "]", "-", "crop_bottom", "\n", "for", "i", "in", "range", "(", "splat", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "if", "splat", "[", "i", ",", "0", "]", "<", "x_min", ":", "\n", "            ", "splat", "[", "i", ",", "0", "]", "=", "x_min", "\n", "", "if", "splat", "[", "i", ",", "0", "]", ">", "x_max", "-", "1", ":", "\n", "            ", "splat", "[", "i", ",", "0", "]", "=", "x_max", "-", "1", "\n", "\n", "", "if", "splat", "[", "i", ",", "1", "]", "<", "x_min", "+", "1", ":", "\n", "            ", "splat", "[", "i", ",", "1", "]", "=", "x_min", "+", "1", "\n", "", "if", "splat", "[", "i", ",", "1", "]", ">", "x_max", ":", "\n", "            ", "splat", "[", "i", ",", "1", "]", "=", "x_max", "\n", "\n", "", "if", "splat", "[", "i", ",", "2", "]", "<", "y_min", ":", "\n", "            ", "splat", "[", "i", ",", "2", "]", "=", "y_min", "\n", "", "if", "splat", "[", "i", ",", "2", "]", ">", "y_max", "-", "1", ":", "\n", "            ", "splat", "[", "i", ",", "2", "]", "=", "y_max", "-", "1", "\n", "\n", "", "if", "splat", "[", "i", ",", "3", "]", "<", "y_min", "+", "1", ":", "\n", "            ", "splat", "[", "i", ",", "3", "]", "=", "y_min", "+", "1", "\n", "", "if", "splat", "[", "i", ",", "3", "]", ">", "y_max", ":", "\n", "            ", "splat", "[", "i", ",", "3", "]", "=", "y_max", "\n", "\n", "", "", "return", "splat", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.visibility.pinhole_splat_cuda": [[830, 874], ["torch.stack().t", "torch.round", "torch.round", "torch.round", "torch.round", "torch.stack().t().long", "splat[].clamp", "splat[].clamp", "splat[].clamp", "splat[].clamp", "torch.stack", "torch.stack().t", "torch.exp", "torch.stack", "numpy.log"], "function", ["None"], ["", "def", "pinhole_splat_cuda", "(", "\n", "x_proj", ",", "y_proj", ",", "dist", ",", "img_intrinsic_pinhole", ",", "img_size", "=", "(", "1024", ",", "512", ")", ",", "crop_top", "=", "0", ",", "\n", "crop_bottom", "=", "0", ",", "voxel", "=", "0.02", ",", "k_swell", "=", "1.0", ",", "d_swell", "=", "1000", ")", ":", "\n", "    ", "\"\"\"\n\n    :param x_proj:\n    :param y_proj:\n    :param dist:\n    :param img_intrinsic_pinhole:\n    :param img_size:\n    :param crop_top:\n    :param crop_bottom:\n    :param voxel:\n    :param k_swell:\n    :param d_swell:\n    :return:\n    \"\"\"", "\n", "# Compute angular width. 3D points' projected masks are grown based", "\n", "# on their distance. Close-by points are further swollen with a", "\n", "# heuristic based on k_swell and d_swell.", "\n", "# Small angular widths assumption: tan(x)~x", "\n", "swell", "=", "(", "1", "+", "k_swell", "*", "torch", ".", "exp", "(", "-", "dist", "/", "np", ".", "log", "(", "d_swell", ")", ")", ")", "*", "voxel", "/", "dist", "\n", "width_x", "=", "swell", "*", "img_intrinsic_pinhole", "[", "0", ",", "0", "]", "\n", "width_y", "=", "swell", "*", "img_intrinsic_pinhole", "[", "1", ",", "1", "]", "\n", "splat_xy_width", "=", "torch", ".", "stack", "(", "(", "width_x", ",", "width_y", ")", ")", ".", "t", "(", ")", "\n", "\n", "# Compute projection masks bounding box pixel coordinates", "\n", "x_a", "=", "torch", ".", "round", "(", "x_proj", "-", "splat_xy_width", "[", ":", ",", "0", "]", "/", "2", ")", "\n", "x_b", "=", "torch", ".", "round", "(", "x_proj", "+", "splat_xy_width", "[", ":", ",", "0", "]", "/", "2", "+", "1", ")", "\n", "y_a", "=", "torch", ".", "round", "(", "y_proj", "-", "splat_xy_width", "[", ":", ",", "1", "]", "/", "2", ")", "\n", "y_b", "=", "torch", ".", "round", "(", "y_proj", "+", "splat_xy_width", "[", ":", ",", "1", "]", "/", "2", "+", "1", ")", "\n", "splat", "=", "torch", ".", "stack", "(", "(", "x_a", ",", "x_b", ",", "y_a", ",", "y_b", ")", ")", ".", "t", "(", ")", ".", "long", "(", ")", "\n", "\n", "# Adjust masks at the image border", "\n", "x_min", "=", "0", "\n", "x_max", "=", "img_size", "[", "0", "]", "\n", "y_min", "=", "crop_top", "\n", "y_max", "=", "img_size", "[", "1", "]", "-", "crop_bottom", "\n", "splat", "[", ":", ",", "0", "]", "=", "splat", "[", ":", ",", "0", "]", ".", "clamp", "(", "min", "=", "x_min", ",", "max", "=", "x_max", "-", "1", ")", "\n", "splat", "[", ":", ",", "1", "]", "=", "splat", "[", ":", ",", "1", "]", ".", "clamp", "(", "min", "=", "x_min", "+", "1", ",", "max", "=", "x_max", ")", "\n", "splat", "[", ":", ",", "2", "]", "=", "splat", "[", ":", ",", "2", "]", ".", "clamp", "(", "min", "=", "y_min", ",", "max", "=", "y_max", "-", "1", ")", "\n", "splat", "[", ":", ",", "3", "]", "=", "splat", "[", ":", ",", "3", "]", ".", "clamp", "(", "min", "=", "y_min", "+", "1", ",", "max", "=", "y_max", ")", "\n", "\n", "return", "splat", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.visibility.fisheye_splat_cpu": [[876, 954], ["numba.njit", "visibility.norm_cpu", "numpy.zeros_like", "visibility.fisheye_projection_cpu", "numpy.empty_like", "numpy.empty_like", "numpy.empty_like", "numpy.empty_like", "numpy.round", "numpy.round", "numpy.round", "numpy.round", "numpy.stack().transpose().astype", "range", "numpy.sqrt().repeat().reshape", "numpy.exp", "numpy.stack().transpose", "numpy.sqrt().repeat", "numpy.log", "numpy.stack", "numpy.sqrt"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.visibility.norm_cpu", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.visibility.fisheye_projection_cpu"], ["", "@", "njit", "(", "cache", "=", "True", ",", "nogil", "=", "True", ")", "\n", "def", "fisheye_splat_cpu", "(", "\n", "x_proj", ",", "y_proj", ",", "xyz", ",", "img_extrinsic", ",", "img_intrinsic_fisheye", ",", "\n", "img_size", "=", "(", "1024", ",", "512", ")", ",", "crop_top", "=", "0", ",", "crop_bottom", "=", "0", ",", "voxel", "=", "0.02", ",", "\n", "k_swell", "=", "1.0", ",", "d_swell", "=", "1000", ",", "camera", "=", "'kitti360_fisheye'", ")", ":", "\n", "    ", "\"\"\"\n\n    :param x_proj:\n    :param y_proj:\n    :param xyz:\n    :param img_extrinsic:\n    :param img_intrinsic_fisheye:\n    :param img_size:\n    :param crop_top:\n    :param crop_bottom:\n    :param voxel:\n    :param k_swell:\n    :param d_swell:\n    :return:\n    \"\"\"", "\n", "# Compute angular width. 3D points' projected masks are grown based", "\n", "# on their distance. Close-by points are further swollen with a", "\n", "# heuristic based on k_swell and d_swell.", "\n", "# Small angular widths assumption: tan(x)~x", "\n", "dist", "=", "norm_cpu", "(", "xyz", ")", "\n", "swell", "=", "(", "1", "+", "k_swell", "*", "np", ".", "exp", "(", "-", "dist", "/", "np", ".", "log", "(", "d_swell", ")", ")", ")", "\n", "\n", "# Compute the projection of the top of the voxel / cube. The", "\n", "# distance between this projection and the actual point's projection", "\n", "# will serve as a proxy to estimate the splat's size. This heuristic", "\n", "# does not hold if voxels are quite large and close to the camera,", "\n", "# this should not cause too much trouble for outdoor scenes but may", "\n", "# affect narrow indoor scenes with close-by objects such as walls", "\n", "# TODO: improve fisheye splat computation", "\n", "z_offset", "=", "np", ".", "zeros_like", "(", "xyz", ")", "\n", "z_offset", "[", ":", ",", "2", "]", "=", "swell", "*", "voxel", "/", "2", "\n", "x", ",", "y", ",", "_", "=", "fisheye_projection_cpu", "(", "\n", "xyz", "+", "z_offset", ",", "img_extrinsic", ",", "img_intrinsic_fisheye", ",", "camera", "=", "camera", ")", "\n", "splat_xy_width", "=", "2", "*", "np", ".", "sqrt", "(", "(", "x_proj", "-", "x", ")", "**", "2", "+", "(", "y_proj", "-", "y", ")", "**", "2", ")", ".", "repeat", "(", "2", ")", ".", "reshape", "(", "-", "1", ",", "2", ")", "\n", "\n", "# Compute projection masks bounding box pixel coordinates", "\n", "x_a", "=", "np", ".", "empty_like", "(", "x_proj", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "x_b", "=", "np", ".", "empty_like", "(", "x_proj", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "y_a", "=", "np", ".", "empty_like", "(", "x_proj", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "y_b", "=", "np", ".", "empty_like", "(", "x_proj", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "np", ".", "round", "(", "x_proj", "-", "splat_xy_width", "[", ":", ",", "0", "]", "/", "2", ",", "0", ",", "x_a", ")", "\n", "np", ".", "round", "(", "x_proj", "+", "splat_xy_width", "[", ":", ",", "0", "]", "/", "2", "+", "1", ",", "0", ",", "x_b", ")", "\n", "np", ".", "round", "(", "y_proj", "-", "splat_xy_width", "[", ":", ",", "1", "]", "/", "2", ",", "0", ",", "y_a", ")", "\n", "np", ".", "round", "(", "y_proj", "+", "splat_xy_width", "[", ":", ",", "1", "]", "/", "2", "+", "1", ",", "0", ",", "y_b", ")", "\n", "splat", "=", "np", ".", "stack", "(", "(", "x_a", ",", "x_b", ",", "y_a", ",", "y_b", ")", ")", ".", "transpose", "(", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "# Adjust masks at the image border", "\n", "x_min", "=", "0", "\n", "x_max", "=", "img_size", "[", "0", "]", "\n", "y_min", "=", "crop_top", "\n", "y_max", "=", "img_size", "[", "1", "]", "-", "crop_bottom", "\n", "for", "i", "in", "range", "(", "splat", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "if", "splat", "[", "i", ",", "0", "]", "<", "x_min", ":", "\n", "            ", "splat", "[", "i", ",", "0", "]", "=", "x_min", "\n", "", "if", "splat", "[", "i", ",", "0", "]", ">", "x_max", "-", "1", ":", "\n", "            ", "splat", "[", "i", ",", "0", "]", "=", "x_max", "-", "1", "\n", "\n", "", "if", "splat", "[", "i", ",", "1", "]", "<", "x_min", "+", "1", ":", "\n", "            ", "splat", "[", "i", ",", "1", "]", "=", "x_min", "+", "1", "\n", "", "if", "splat", "[", "i", ",", "1", "]", ">", "x_max", ":", "\n", "            ", "splat", "[", "i", ",", "1", "]", "=", "x_max", "\n", "\n", "", "if", "splat", "[", "i", ",", "2", "]", "<", "y_min", ":", "\n", "            ", "splat", "[", "i", ",", "2", "]", "=", "y_min", "\n", "", "if", "splat", "[", "i", ",", "2", "]", ">", "y_max", "-", "1", ":", "\n", "            ", "splat", "[", "i", ",", "2", "]", "=", "y_max", "-", "1", "\n", "\n", "", "if", "splat", "[", "i", ",", "3", "]", "<", "y_min", "+", "1", ":", "\n", "            ", "splat", "[", "i", ",", "3", "]", "=", "y_min", "+", "1", "\n", "", "if", "splat", "[", "i", ",", "3", "]", ">", "y_max", ":", "\n", "            ", "splat", "[", "i", ",", "3", "]", "=", "y_max", "\n", "\n", "", "", "return", "splat", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.visibility.fisheye_splat_cuda": [[956, 1011], ["visibility.norm_cuda", "torch.zeros_like", "visibility.fisheye_projection_cuda", "torch.round", "torch.round", "torch.round", "torch.round", "torch.stack().t().long", "splat[].clamp", "splat[].clamp", "splat[].clamp", "splat[].clamp", "torch.exp", "torch.stack().t", "numpy.log", "torch.stack"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.visibility.norm_cuda", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.visibility.fisheye_projection_cuda"], ["", "def", "fisheye_splat_cuda", "(", "\n", "x_proj", ",", "y_proj", ",", "xyz", ",", "img_extrinsic", ",", "img_intrinsic_fisheye", ",", "img_size", "=", "(", "1024", ",", "512", ")", ",", "crop_top", "=", "0", ",", "\n", "crop_bottom", "=", "0", ",", "voxel", "=", "0.02", ",", "k_swell", "=", "1.0", ",", "d_swell", "=", "1000", ",", "camera", "=", "'kitti360_fisheye'", ")", ":", "\n", "    ", "\"\"\"\n\n    :param x_proj:\n    :param y_proj:\n    :param xyz:\n    :param img_extrinsic:\n    :param img_intrinsic_fisheye:\n    :param img_size:\n    :param crop_top:\n    :param crop_bottom:\n    :param voxel:\n    :param k_swell:\n    :param d_swell:\n    :return:\n    \"\"\"", "\n", "# Compute angular width. 3D points' projected masks are grown based", "\n", "# on their distance. Close-by points are further swollen with a", "\n", "# heuristic based on k_swell and d_swell.", "\n", "# Small angular widths assumption: tan(x)~x", "\n", "dist", "=", "norm_cuda", "(", "xyz", ")", "\n", "swell", "=", "(", "1", "+", "k_swell", "*", "torch", ".", "exp", "(", "-", "dist", "/", "np", ".", "log", "(", "d_swell", ")", ")", ")", "\n", "\n", "# Compute the projection of the top of the voxel / cube. The", "\n", "# distance between this projection and the actual point's projection", "\n", "# will serve as a proxy to estimate the splat's size. This heuristic", "\n", "# does not hold if voxels are quite large and close to the camera,", "\n", "# this should not cause too much trouble for outdoor scenes but may", "\n", "# affect narrow indoor scenes with close-by objects such as walls", "\n", "# TODO: improve fisheye splat computation", "\n", "z_offset", "=", "torch", ".", "zeros_like", "(", "xyz", ")", "\n", "z_offset", "[", ":", ",", "2", "]", "=", "swell", "*", "voxel", "/", "2", "\n", "x", ",", "y", ",", "_", "=", "fisheye_projection_cuda", "(", "xyz", "+", "z_offset", ",", "img_extrinsic", ",", "img_intrinsic_fisheye", ",", "camera", "=", "camera", ")", "\n", "splat_xy_width", "=", "2", "*", "(", "(", "x_proj", "-", "x", ")", "**", "2", "+", "(", "y_proj", "-", "y", ")", "**", "2", ")", ".", "sqrt", "(", ")", ".", "repeat", "(", "2", ",", "1", ")", ".", "t", "(", ")", "\n", "\n", "# Compute projection masks bounding box pixel coordinates", "\n", "x_a", "=", "torch", ".", "round", "(", "x_proj", "-", "splat_xy_width", "[", ":", ",", "0", "]", "/", "2", ")", "\n", "x_b", "=", "torch", ".", "round", "(", "x_proj", "+", "splat_xy_width", "[", ":", ",", "0", "]", "/", "2", "+", "1", ")", "\n", "y_a", "=", "torch", ".", "round", "(", "y_proj", "-", "splat_xy_width", "[", ":", ",", "1", "]", "/", "2", ")", "\n", "y_b", "=", "torch", ".", "round", "(", "y_proj", "+", "splat_xy_width", "[", ":", ",", "1", "]", "/", "2", "+", "1", ")", "\n", "splat", "=", "torch", ".", "stack", "(", "(", "x_a", ",", "x_b", ",", "y_a", ",", "y_b", ")", ")", ".", "t", "(", ")", ".", "long", "(", ")", "\n", "\n", "# Adjust masks at the image border", "\n", "x_min", "=", "0", "\n", "x_max", "=", "img_size", "[", "0", "]", "\n", "y_min", "=", "crop_top", "\n", "y_max", "=", "img_size", "[", "1", "]", "-", "crop_bottom", "\n", "splat", "[", ":", ",", "0", "]", "=", "splat", "[", ":", ",", "0", "]", ".", "clamp", "(", "min", "=", "x_min", ",", "max", "=", "x_max", "-", "1", ")", "\n", "splat", "[", ":", ",", "1", "]", "=", "splat", "[", ":", ",", "1", "]", ".", "clamp", "(", "min", "=", "x_min", "+", "1", ",", "max", "=", "x_max", ")", "\n", "splat", "[", ":", ",", "2", "]", "=", "splat", "[", ":", ",", "2", "]", ".", "clamp", "(", "min", "=", "y_min", ",", "max", "=", "y_max", "-", "1", ")", "\n", "splat", "[", ":", ",", "3", "]", "=", "splat", "[", ":", ",", "3", "]", ".", "clamp", "(", "min", "=", "y_min", "+", "1", ",", "max", "=", "y_max", ")", "\n", "\n", "return", "splat", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.visibility.bbox_to_xy_grid_cuda": [[1013, 1071], ["torch.zeros", "bbox.long.long", "torch.cat().repeat_interleave", "box_x.repeat_interleave", "out.repeat_interleave", "torch.cat", "off_per_group[].repeat_interleave", "box_y.repeat_interleave().repeat_interleave", "bbox.long.is_floating_point", "box_width_y.repeat_interleave", "bbox.long.dim", "torch.cat", "torch.arange", "box_width_y.repeat_interleave().cumsum", "box_y.repeat_interleave", "torch.arange", "box_width_x.sum", "box_width_x[].cumsum", "box_width_y.repeat_interleave"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat"], ["", "def", "bbox_to_xy_grid_cuda", "(", "bbox", ")", ":", "\n", "    ", "\"\"\"Convert a tensor of bounding boxes pixel coordinates to tensors\n    of x and y pixel coordinates accounting for all pixels in the\n    bounding boxes. This is typically used to convert splats into pixel\n    coordinates.\n\n    Bounding boxes are expected to be a torch.LongTensor of shape (N, 4)\n    with columns accounting for x_a, x_b, y_a, y_b coordinates,\n    respectively.\n\n    This would be the vectorized equivalent of:\n    `\n    x_range_list = [torch.arange(x_a, x_b) for x_a, x_b in bbox[:, [0, 1]]]\n    y_range_list = [torch.arange(y_a, y_b) for y_a, y_b in bbox[:, [2, 3]]]\n    grids = [torch.meshgrid(x_range, y_range)\n             for x_range, y_range in zip(x_range_list, y_range_list)]\n    x = torch.cat([g[0].flatten() for g in grids])\n    y = torch.cat([g[1].flatten() for g in grids])\n    `\n\n    :param bbox:\n    :return:\n    \"\"\"", "\n", "assert", "bbox", ".", "dim", "(", ")", "==", "2", "and", "bbox", ".", "shape", "[", "0", "]", ">", "0", "and", "bbox", ".", "shape", "[", "1", "]", "==", "4", "\n", "assert", "not", "bbox", ".", "is_floating_point", "(", ")", ",", "f\"bbox should be an int32 or int64 tensor but received \"", "f\"bbox.dtype={bbox.dtype} instead.\"", "\n", "\n", "# Initializations", "\n", "device", "=", "bbox", ".", "device", "\n", "zero", "=", "torch", ".", "zeros", "(", "1", ",", "device", "=", "device", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "bbox", "=", "bbox", ".", "long", "(", ")", "\n", "\n", "# Recover the bounding boxes' starting x and y coordinates, widths", "\n", "# and total number of pixels", "\n", "box_x", "=", "bbox", "[", ":", ",", "0", "]", "\n", "box_width_x", "=", "bbox", "[", ":", ",", "1", "]", "-", "bbox", "[", ":", ",", "0", "]", "\n", "box_y", "=", "bbox", "[", ":", ",", "2", "]", "\n", "box_width_y", "=", "bbox", "[", ":", ",", "3", "]", "-", "bbox", "[", ":", ",", "2", "]", "\n", "n_pix", "=", "(", "box_width_x", "*", "box_width_y", ")", ".", "sum", "(", ")", "\n", "\n", "# Build the x coordinates", "\n", "off_1", "=", "torch", ".", "cat", "(", "(", "zero", ",", "box_width_x", "[", ":", "-", "1", "]", ".", "cumsum", "(", "0", ")", ")", ")", ".", "repeat_interleave", "(", "\n", "box_width_x", ")", "\n", "off_2", "=", "box_x", ".", "repeat_interleave", "(", "box_width_x", ")", "\n", "out", "=", "torch", ".", "arange", "(", "box_width_x", ".", "sum", "(", ")", ",", "device", "=", "device", ")", "-", "off_1", "+", "off_2", "\n", "x", "=", "out", ".", "repeat_interleave", "(", "box_width_y", ".", "repeat_interleave", "(", "box_width_x", ")", ")", "\n", "\n", "# Build the y coordinates", "\n", "off_per_group", "=", "torch", ".", "cat", "(", "\n", "(", "zero", ",", "box_width_y", ".", "repeat_interleave", "(", "box_width_x", ")", ".", "cumsum", "(", "0", ")", ")", ")", "\n", "off_1", "=", "off_per_group", "[", ":", "-", "1", "]", ".", "repeat_interleave", "(", "\n", "off_per_group", "[", "1", ":", "]", "-", "off_per_group", "[", ":", "-", "1", "]", ")", "\n", "off_2", "=", "box_y", ".", "repeat_interleave", "(", "box_width_x", ")", ".", "repeat_interleave", "(", "\n", "off_per_group", "[", "1", ":", "]", "-", "off_per_group", "[", ":", "-", "1", "]", ")", "\n", "y", "=", "torch", ".", "arange", "(", "n_pix", ",", "device", "=", "device", ")", "-", "off_1", "+", "off_2", "\n", "\n", "return", "x", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.visibility.visibility_from_splatting_cpu": [[1073, 1196], ["numba.njit", "numpy.full", "numpy.full", "range", "numpy.where", "numpy.zeros_like", "enumerate", "visibility.equirectangular_splat_cpu", "dist.max", "range", "numpy.unique", "numpy.full", "x_proj.astype.astype", "y_proj.astype.astype", "zip", "visibility.pinhole_splat_cpu", "range", "visibility.fisheye_splat_cpu"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.visibility.equirectangular_splat_cpu", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.visibility.pinhole_splat_cpu", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.visibility.fisheye_splat_cpu"], ["", "@", "torch_to_numba", "\n", "@", "njit", "(", "cache", "=", "True", ",", "nogil", "=", "True", ")", "\n", "def", "visibility_from_splatting_cpu", "(", "\n", "x_proj", ",", "y_proj", ",", "dist", ",", "xyz", ",", "img_extrinsic", "=", "None", ",", "\n", "img_intrinsic_pinhole", "=", "None", ",", "img_intrinsic_fisheye", "=", "None", ",", "\n", "img_size", "=", "(", "1024", ",", "512", ")", ",", "crop_top", "=", "0", ",", "crop_bottom", "=", "0", ",", "voxel", "=", "0.1", ",", "k_swell", "=", "1.0", ",", "\n", "d_swell", "=", "1000", ",", "exact", "=", "False", ",", "camera", "=", "'s3dis_equirectangular'", ")", ":", "\n", "    ", "\"\"\"Compute visibility model with splatting on the CPU with numpy and\n    numba.\n\n    Although top and bottom cropping can be specified, the returned\n    coordinates are expressed in the non-cropped image pixel coordinate\n    system.\n\n    :param x_proj:\n    :param y_proj:\n    :param dist:\n    :param img_extrinsic:\n    :param img_intrinsic_pinhole:\n    :param img_intrinsic_fisheye:\n    :param img_size:\n    :param crop_top:\n    :param crop_bottom:\n    :param voxel:\n    :param k_swell:\n    :param d_swell:\n    :param exact:\n    :param camera:\n    :return:\n    \"\"\"", "\n", "assert", "x_proj", ".", "shape", "[", "0", "]", "==", "y_proj", ".", "shape", "[", "0", "]", "==", "dist", ".", "shape", "[", "0", "]", ">", "0", "\n", "\n", "# Need to set defaults inside the function rather than in the kwargs", "\n", "# because those will be overwritten by the parent CPU-GPU dispatcher", "\n", "# function", "\n", "if", "img_intrinsic_pinhole", "is", "None", ":", "\n", "        ", "img_intrinsic_pinhole", "=", "PINHOLE_DEFAULT", "\n", "", "if", "img_intrinsic_fisheye", "is", "None", ":", "\n", "        ", "img_intrinsic_fisheye", "=", "FISHEYE_DEFAULT", "\n", "", "if", "img_extrinsic", "is", "None", ":", "\n", "        ", "img_extrinsic", "=", "EXTRINSIC_DEFAULT", "\n", "\n", "# Compute splatting masks", "\n", "", "if", "camera", "==", "'s3dis_equirectangular'", ":", "\n", "        ", "splat", "=", "equirectangular_splat_cpu", "(", "\n", "x_proj", ",", "y_proj", ",", "dist", ",", "img_size", "=", "img_size", ",", "crop_top", "=", "crop_top", ",", "\n", "crop_bottom", "=", "crop_bottom", ",", "voxel", "=", "voxel", ",", "k_swell", "=", "k_swell", ",", "\n", "d_swell", "=", "d_swell", ")", "\n", "", "elif", "camera", "in", "[", "'kitti360_perspective'", ",", "'scannet'", "]", ":", "\n", "        ", "splat", "=", "pinhole_splat_cpu", "(", "\n", "x_proj", ",", "y_proj", ",", "dist", ",", "img_intrinsic_pinhole", ",", "img_size", "=", "img_size", ",", "\n", "crop_top", "=", "crop_top", ",", "crop_bottom", "=", "crop_bottom", ",", "voxel", "=", "voxel", ",", "\n", "k_swell", "=", "k_swell", ",", "d_swell", "=", "d_swell", ")", "\n", "", "elif", "camera", "==", "'kitti360_fisheye'", ":", "\n", "        ", "splat", "=", "fisheye_splat_cpu", "(", "\n", "x_proj", ",", "y_proj", ",", "xyz", ",", "img_extrinsic", ",", "img_intrinsic_fisheye", ",", "\n", "img_size", "=", "img_size", ",", "crop_top", "=", "crop_top", ",", "crop_bottom", "=", "crop_bottom", ",", "\n", "voxel", "=", "voxel", ",", "k_swell", "=", "k_swell", ",", "d_swell", "=", "d_swell", ",", "camera", "=", "camera", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "\n", "\n", "# Cropped depth map initialization", "\n", "", "d_max", "=", "dist", ".", "max", "(", ")", "+", "1", "\n", "cropped_img_size", "=", "(", "img_size", "[", "0", "]", ",", "img_size", "[", "1", "]", "-", "crop_bottom", "-", "crop_top", ")", "\n", "depth_map", "=", "np", ".", "full", "(", "cropped_img_size", ",", "d_max", "+", "1", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "splat", "[", ":", ",", "2", ":", "]", "-=", "crop_top", "\n", "\n", "# Cropped indices map initialization", "\n", "# We store indices in int64 so we assumes point indices are lower", "\n", "# than max int64 ~ 2.14 x 10^9.", "\n", "# We need the negative for empty pixels", "\n", "no_id", "=", "-", "1", "\n", "idx_map", "=", "np", ".", "full", "(", "cropped_img_size", ",", "no_id", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "\n", "# Loop through indices for points in range and in FOV", "\n", "for", "i_point", "in", "range", "(", "dist", ".", "shape", "[", "0", "]", ")", ":", "\n", "\n", "        ", "point_dist", "=", "dist", "[", "i_point", "]", "\n", "point_pix_mask", "=", "splat", "[", "i_point", "]", "\n", "\n", "# Update maps where point is closest recorded", "\n", "x_a", ",", "x_b", ",", "y_a", ",", "y_b", "=", "point_pix_mask", "\n", "for", "x", "in", "range", "(", "x_a", ",", "x_b", ")", ":", "\n", "            ", "for", "y", "in", "range", "(", "y_a", ",", "y_b", ")", ":", "\n", "                ", "if", "point_dist", "<", "depth_map", "[", "x", ",", "y", "]", ":", "\n", "                    ", "depth_map", "[", "x", ",", "y", "]", "=", "point_dist", "\n", "# These indices can then be used to efficiently", "\n", "# build the 'exact' maps without the need for", "\n", "# 'np.isin', which is not supported un numba.", "\n", "idx_map", "[", "x", ",", "y", "]", "=", "i_point", "\n", "\n", "# When 'exact=True', we use the results from the previous projection", "\n", "# to extract the seen points. The output maps are sparse, as seen", "\n", "# points are only mapped to the center of their splats, without", "\n", "# artificially-built splatting masks.", "\n", "", "", "", "", "if", "exact", ":", "\n", "# Recover the local indices of seen points", "\n", "        ", "idx_seen", "=", "np", ".", "unique", "(", "idx_map", ")", "\n", "idx_seen", "=", "idx_seen", "[", "idx_seen", "!=", "no_id", "]", "\n", "\n", "# Reinitialize the output maps", "\n", "idx_map", "=", "np", ".", "full", "(", "cropped_img_size", ",", "no_id", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "\n", "# Convert the pixel projection coordinates to int", "\n", "x_proj", "=", "x_proj", ".", "astype", "(", "np", ".", "int32", ")", "\n", "y_proj", "=", "y_proj", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "# Loop through the seen points and populate only the center of", "\n", "# splats in the maps. We can update maps without worrying about", "\n", "# occlusions here.", "\n", "if", "idx_seen", ".", "shape", "[", "0", "]", ">", "0", ":", "\n", "            ", "for", "i_point", "in", "idx_seen", ":", "\n", "                ", "x", "=", "x_proj", "[", "i_point", "]", "\n", "y", "=", "y_proj", "[", "i_point", "]", "-", "crop_top", "\n", "idx_map", "[", "x", ",", "y", "]", "=", "i_point", "\n", "\n", "# Recover final point indices and corresponding pixel coordinates", "\n", "", "", "", "x_pix", ",", "y_pix", "=", "np", ".", "where", "(", "idx_map", "!=", "no_id", ")", "\n", "indices", "=", "np", ".", "zeros_like", "(", "x_pix", ")", "\n", "for", "i", ",", "(", "x", ",", "y", ")", "in", "enumerate", "(", "zip", "(", "x_pix", ",", "y_pix", ")", ")", ":", "\n", "        ", "indices", "[", "i", "]", "=", "idx_map", "[", "x", ",", "y", "]", "\n", "\n", "", "return", "indices", ",", "x_pix", ",", "y_pix", "+", "crop_top", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.visibility.visibility_from_splatting_cuda": [[1198, 1286], ["visibility.bbox_to_xy_grid_cuda", "torch.arange().repeat_interleave", "dist.repeat_interleave", "torch_scatter.scatter_min", "visibility.equirectangular_splat_cuda", "max", "max", "indices.unique.unique", "x_proj[].long", "y_proj[].long", "visibility.pinhole_splat_cuda", "max", "torch.arange", "xy_pix_all_splat.unique", "visibility.fisheye_splat_cuda", "ValueError"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.visibility.bbox_to_xy_grid_cuda", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.visibility.equirectangular_splat_cuda", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.visibility.pinhole_splat_cuda", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.visibility.fisheye_splat_cuda"], ["", "def", "visibility_from_splatting_cuda", "(", "\n", "x_proj", ",", "y_proj", ",", "dist", ",", "xyz", ",", "img_extrinsic", "=", "None", ",", "img_intrinsic_pinhole", "=", "None", ",", "\n", "img_intrinsic_fisheye", "=", "None", ",", "img_size", "=", "(", "1024", ",", "512", ")", ",", "\n", "crop_top", "=", "0", ",", "crop_bottom", "=", "0", ",", "voxel", "=", "0.1", ",", "k_swell", "=", "1.0", ",", "d_swell", "=", "1000", ",", "\n", "exact", "=", "False", ",", "camera", "=", "'s3dis_equirectangular'", ")", ":", "\n", "    ", "\"\"\"Compute visibility model with splatting on the GPU with torch and\n    cuda.\n\n    Although top and bottom cropping can be specified, the returned\n    coordinates are expressed in the non-cropped image pixel coordinate\n    system.\n\n    :param x_proj:\n    :param y_proj:\n    :param dist:\n    :param img_extrinsic:\n    :param img_intrinsic_pinhole:\n    :param img_intrinsic_fisheye:\n    :param img_size:\n    :param crop_top:\n    :param crop_bottom:\n    :param voxel:\n    :param k_swell:\n    :param d_swell:\n    :param exact:\n    :param camera:\n    :param kwargs:\n    :return:\n    \"\"\"", "\n", "assert", "x_proj", ".", "shape", "[", "0", "]", "==", "y_proj", ".", "shape", "[", "0", "]", "==", "dist", ".", "shape", "[", "0", "]", ">", "0", "\n", "\n", "# Initialization", "\n", "device", "=", "x_proj", ".", "device", "\n", "n_points", "=", "x_proj", ".", "shape", "[", "0", "]", "\n", "\n", "# Compute splatting masks", "\n", "if", "camera", "==", "'s3dis_equirectangular'", ":", "\n", "        ", "splat", "=", "equirectangular_splat_cuda", "(", "\n", "x_proj", ",", "y_proj", ",", "dist", ",", "img_size", "=", "img_size", ",", "crop_top", "=", "crop_top", ",", "\n", "crop_bottom", "=", "crop_bottom", ",", "voxel", "=", "voxel", ",", "k_swell", "=", "k_swell", ",", "\n", "d_swell", "=", "d_swell", ")", "\n", "", "elif", "camera", "in", "[", "'kitti360_perspective'", ",", "'scannet'", "]", ":", "\n", "        ", "splat", "=", "pinhole_splat_cuda", "(", "\n", "x_proj", ",", "y_proj", ",", "dist", ",", "img_intrinsic_pinhole", ",", "img_size", "=", "img_size", ",", "\n", "crop_top", "=", "crop_top", ",", "crop_bottom", "=", "crop_bottom", ",", "voxel", "=", "voxel", ",", "\n", "k_swell", "=", "k_swell", ",", "d_swell", "=", "d_swell", ")", "\n", "", "elif", "camera", "==", "'kitti360_fisheye'", ":", "\n", "        ", "splat", "=", "fisheye_splat_cuda", "(", "\n", "x_proj", ",", "y_proj", ",", "xyz", ",", "img_extrinsic", ",", "img_intrinsic_fisheye", ",", "\n", "img_size", "=", "img_size", ",", "crop_top", "=", "crop_top", ",", "crop_bottom", "=", "crop_bottom", ",", "\n", "voxel", "=", "voxel", ",", "k_swell", "=", "k_swell", ",", "d_swell", "=", "d_swell", ",", "camera", "=", "camera", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "f\"Unknown camera '{camera}'\"", ")", "\n", "\n", "# Convert splats to flattened global pixel coordinates", "\n", "", "x_all_splat", ",", "y_all_splat", "=", "bbox_to_xy_grid_cuda", "(", "splat", ")", "\n", "xy_pix_all_splat", "=", "x_all_splat", "+", "y_all_splat", "*", "max", "(", "img_size", ")", "\n", "\n", "# Compute point values associated with all pixels of all splats", "\n", "areas", "=", "(", "splat", "[", ":", ",", "1", "]", "-", "splat", "[", ":", ",", "0", "]", ")", "*", "(", "splat", "[", ":", ",", "3", "]", "-", "splat", "[", ":", ",", "2", "]", ")", "\n", "indices_all_splats", "=", "torch", ".", "arange", "(", "\n", "n_points", ",", "device", "=", "device", ")", ".", "repeat_interleave", "(", "areas", ")", "\n", "depth_all_splat", "=", "dist", ".", "repeat_interleave", "(", "areas", ")", "\n", "\n", "# Compute which splat pixel coordinates are seen (ie their depth is", "\n", "# the smallest)", "\n", "_", ",", "seen_pix", "=", "torch_scatter", ".", "scatter_min", "(", "depth_all_splat", ",", "xy_pix_all_splat", ")", "\n", "seen_pix", "=", "seen_pix", "[", "xy_pix_all_splat", ".", "unique", "(", ")", "]", "\n", "\n", "# Recover corresponding point indices and pixel coordinates", "\n", "indices", "=", "indices_all_splats", "[", "seen_pix", "]", "\n", "xy_pix_seen", "=", "xy_pix_all_splat", "[", "seen_pix", "]", "\n", "x_pix", "=", "xy_pix_seen", "%", "max", "(", "img_size", ")", "\n", "y_pix", "=", "xy_pix_seen", "//", "max", "(", "img_size", ")", "\n", "\n", "# When 'exact=True', we use the results from the previous projection", "\n", "# to extract the seen points. The output maps are sparse, as seen", "\n", "# points are only mapped to the center of their splats, without", "\n", "# artificially-built splatting masks.", "\n", "if", "exact", ":", "\n", "# Recover the local indices of seen points", "\n", "        ", "indices", "=", "indices", ".", "unique", "(", ")", "\n", "\n", "# Recover corresponding splat-center coordinates", "\n", "x_pix", "=", "x_proj", "[", "indices", "]", ".", "long", "(", ")", "\n", "y_pix", "=", "y_proj", "[", "indices", "]", ".", "long", "(", ")", "\n", "\n", "", "return", "indices", ",", "x_pix", ",", "y_pix", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.visibility.visibility_from_splatting": [[1288, 1322], ["f"], "function", ["None"], ["", "def", "visibility_from_splatting", "(", "\n", "x_proj", ",", "y_proj", ",", "dist", ",", "xyz", ",", "img_extrinsic", "=", "None", ",", "img_intrinsic_pinhole", "=", "None", ",", "\n", "img_intrinsic_fisheye", "=", "None", ",", "img_size", "=", "(", "1024", ",", "512", ")", ",", "\n", "crop_top", "=", "0", ",", "crop_bottom", "=", "0", ",", "voxel", "=", "0.1", ",", "k_swell", "=", "1.0", ",", "d_swell", "=", "1000", ",", "\n", "exact", "=", "False", ",", "camera", "=", "'s3dis_equirectangular'", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n\n    :param x_proj:\n    :param y_proj:\n    :param dist:\n    :param img_extrinsic:\n    :param img_intrinsic_pinhole:\n    :param img_intrinsic_fisheye:\n    :param img_size:\n    :param crop_top:\n    :param crop_bottom:\n    :param voxel:\n    :param k_swell:\n    :param d_swell:\n    :param exact:\n    :param camera:\n    :param kwargs:\n    :return:\n    \"\"\"", "\n", "f", "=", "visibility_from_splatting_cuda", "if", "x_proj", ".", "is_cuda", "else", "visibility_from_splatting_cpu", "\n", "\n", "return", "f", "(", "\n", "x_proj", ",", "y_proj", ",", "dist", ",", "xyz", ",", "img_extrinsic", "=", "img_extrinsic", ",", "\n", "img_intrinsic_pinhole", "=", "img_intrinsic_pinhole", ",", "\n", "img_intrinsic_fisheye", "=", "img_intrinsic_fisheye", ",", "img_size", "=", "img_size", ",", "\n", "crop_top", "=", "crop_top", ",", "crop_bottom", "=", "crop_bottom", ",", "voxel", "=", "voxel", ",", "\n", "k_swell", "=", "k_swell", ",", "d_swell", "=", "d_swell", ",", "exact", "=", "exact", ",", "\n", "camera", "=", "camera", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.visibility.read_s3dis_depth_map": [[1328, 1359], ["PIL.Image.open", "torch.from_numpy().t", "im.resize.resize", "torch.from_numpy", "numpy.array"], "function", ["None"], ["", "def", "read_s3dis_depth_map", "(", "path", ",", "img_size", "=", "None", ",", "empty", "=", "-", "1", ")", ":", "\n", "    ", "\"\"\"Read S3DIS-format depth map.\n\n    Details from https://github.com/alexsax/2D-3D-Semantics\n    \"\n    Depth images are stored as 16-bit PNGs and have a maximum depth of\n    128m and a sensitivity of 1/512m. Missing values are encoded with\n    the value 2^16 - 1. Note that [...] it [depth] is defined as the\n    distance from the point-center of the camera in the\n    (equirectangular) panoramic images.\n    \"\n\n    :param path:\n    :param img_size:\n    :param empty:\n    :return:\n    \"\"\"", "\n", "# Read depth map", "\n", "im", "=", "Image", ".", "open", "(", "path", ")", "\n", "if", "img_size", "is", "not", "None", ":", "\n", "        ", "im", "=", "im", ".", "resize", "(", "img_size", ",", "resample", "=", "Image", ".", "NEAREST", ")", "\n", "", "im", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "im", ")", ")", ".", "t", "(", ")", "\n", "\n", "# Get mask of empty pixels", "\n", "empty_mask", "=", "im", "==", "2", "**", "16", "-", "1", "\n", "\n", "# Convert to meters and set empty pixels", "\n", "im", "=", "im", "/", "512", "\n", "im", "[", "empty_mask", "]", "=", "empty", "\n", "\n", "return", "im", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.visibility.visibility_from_depth_map": [[1361, 1389], ["visibility.read_s3dis_depth_map", "depth_map.to.to", "torch.where", "x_proj.long", "y_proj.long"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.visibility.read_s3dis_depth_map", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to"], ["", "def", "visibility_from_depth_map", "(", "\n", "x_proj", ",", "y_proj", ",", "dist", ",", "depth_map_path", "=", "None", ",", "img_size", "=", "(", "1024", ",", "512", ")", ",", "\n", "depth_threshold", "=", "0.05", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Compute visibility model based on an input depth map. Points\n    within a given threshold of the target depth are considered visible.\n\n    :param x_proj:\n    :param y_proj:\n    :param dist:\n    :param depth_map_path:\n    :param img_size:\n    :param depth_threshold:\n    :return:\n    \"\"\"", "\n", "assert", "x_proj", ".", "shape", "[", "0", "]", "==", "y_proj", ".", "shape", "[", "0", "]", "==", "dist", ".", "shape", "[", "0", "]", ">", "0", "\n", "\n", "# Read the depth map", "\n", "# TODO: only supports S3DIS-type depth map. Extend to other formats", "\n", "assert", "depth_map_path", "is", "not", "None", ",", "f'Please provide depth_map_path.'", "\n", "depth_map", "=", "read_s3dis_depth_map", "(", "depth_map_path", ",", "img_size", "=", "img_size", ",", "empty", "=", "-", "1", ")", "\n", "depth_map", "=", "depth_map", ".", "to", "(", "x_proj", ".", "device", ")", "\n", "\n", "# Search point projections that are within depth_threshold of the", "\n", "# real depth", "\n", "dist_real", "=", "depth_map", "[", "x_proj", ".", "long", "(", ")", ",", "y_proj", ".", "long", "(", ")", "]", "\n", "indices", "=", "torch", ".", "where", "(", "(", "dist_real", "-", "dist", ")", ".", "abs", "(", ")", "<=", "depth_threshold", ")", "[", "0", "]", "\n", "\n", "return", "indices", ",", "x_proj", "[", "indices", "]", ",", "y_proj", "[", "indices", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.visibility.k_nn_image_system": [[1395, 1461], ["torch.stack().t", "xy_query.contiguous.contiguous", "torch.cat.contiguous", "pykeops.torch.LazyTensor", "pykeops.torch.LazyTensor", "d_keops.argKmin", "torch.Tensor().float().to", "torch.cat", "torch.stack", "torch.where", "torch.where", "torch.Tensor().float", "x_proj.float", "y_proj.float", "torch.Tensor"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat"], ["", "def", "k_nn_image_system", "(", "\n", "x_proj", ",", "y_proj", ",", "k", "=", "75", ",", "x_margin", "=", "None", ",", "x_width", "=", "None", ")", ":", "\n", "    ", "\"\"\"Compute K-nearest neighbors in for points with coordinates\n    (x_proj, y_proj) in the image coordinate system. If x_margin and\n    x_width are provided, the image is wrapped along the X coordinates\n    to search neighbors on the border. This is typically needed for\n    spherical images.\n\n    :param x_proj:\n    :param y_proj:\n    :param k:\n    :param x_margin:\n    :param x_width:\n    :return:\n    \"\"\"", "\n", "assert", "x_margin", "is", "None", "or", "x_width", ">", "0", ",", "f'x_margin and x_width must both be provided for image wrapping.'", "\n", "\n", "# Prepare query and search sets for KNN. Optionally wrap image for", "\n", "# neighbor search by the border.", "\n", "xy_query", "=", "torch", ".", "stack", "(", "(", "x_proj", ".", "float", "(", ")", ",", "y_proj", ".", "float", "(", ")", ")", ")", ".", "t", "(", ")", "\n", "wrap_x", "=", "x_margin", "is", "not", "None", "and", "x_margin", ">", "0", "and", "x_width", "is", "not", "None", "and", "x_width", ">", "0", "\n", "if", "wrap_x", ":", "\n", "        ", "x_offset", "=", "torch", ".", "Tensor", "(", "[", "[", "x_width", ",", "0", "]", "]", ")", ".", "float", "(", ")", ".", "to", "(", "xy_query", ".", "device", ")", "\n", "\n", "idx_left", "=", "torch", ".", "where", "(", "x_proj", "<=", "x_margin", ")", "[", "0", "]", "\n", "idx_right", "=", "torch", ".", "where", "(", "x_proj", ">=", "(", "x_width", "-", "x_margin", ")", ")", "[", "0", "]", "\n", "\n", "xy_search_left", "=", "xy_query", "[", "idx_left", "]", "+", "x_offset", "\n", "xy_search_right", "=", "xy_query", "[", "idx_right", "]", "-", "x_offset", "\n", "\n", "xy_search", "=", "torch", ".", "cat", "(", "(", "xy_query", ",", "xy_search_left", ",", "xy_search_right", ")", ")", "\n", "", "else", ":", "\n", "        ", "xy_search", "=", "xy_query", "\n", "\n", "# K-NN search with sklearn", "\n", "# nn_search = NearestNeighbors(", "\n", "#     n_neighbors=k_nn, algorithm=\"kd_tree\").fit(xy_search.cpu().numpy())", "\n", "# _, neighbors = nn_search.kneighbors(xy_query.cpu().numpy())", "\n", "# neighbors = torch.LongTensor(neighbors).to(xy_query.device)", "\n", "\n", "# K-NN search with KeOps", "\n", "", "xy_query", "=", "xy_query", ".", "contiguous", "(", ")", "\n", "xy_search", "=", "xy_search", ".", "contiguous", "(", ")", "\n", "xyz_query_keops", "=", "LazyTensor", "(", "xy_query", "[", ":", ",", "None", ",", ":", "]", ")", "\n", "xyz_search_keops", "=", "LazyTensor", "(", "xy_search", "[", "None", ",", ":", ",", ":", "]", ")", "\n", "d_keops", "=", "(", "(", "xyz_query_keops", "-", "xyz_search_keops", ")", "**", "2", ")", ".", "sum", "(", "dim", "=", "2", ")", "\n", "neighbors", "=", "d_keops", ".", "argKmin", "(", "k", ",", "dim", "=", "1", ")", "\n", "del", "xyz_query_keops", ",", "xyz_search_keops", ",", "d_keops", "\n", "\n", "# Set the indices of margin points to their original values", "\n", "if", "wrap_x", ":", "\n", "        ", "n_points", "=", "x_proj", ".", "shape", "[", "0", "]", "\n", "n_points_left", "=", "idx_left", ".", "shape", "[", "0", "]", "\n", "\n", "is_left_margin", "=", "(", "neighbors", ">=", "n_points", ")", "&", "(", "neighbors", "<", "n_points", "+", "n_points_left", ")", "\n", "neighbors", "[", "is_left_margin", "]", "=", "idx_left", "[", "neighbors", "[", "is_left_margin", "]", "-", "n_points", "]", "\n", "\n", "is_right_margin", "=", "neighbors", ">=", "(", "n_points", "+", "n_points_left", ")", "\n", "neighbors", "[", "is_right_margin", "]", "=", "idx_right", "[", "neighbors", "[", "is_right_margin", "]", "-", "n_points", "-", "n_points_left", "]", "\n", "\n", "", "return", "neighbors", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.visibility.visibility_biasutti": [[1463, 1497], ["visibility.k_nn_image_system", "torch.exp", "dist_nn.min", "dist_nn.max", "torch.exp.mean", "torch.where"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.visibility.k_nn_image_system", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.lovasz_loss.mean"], ["", "def", "visibility_biasutti", "(", "\n", "x_proj", ",", "y_proj", ",", "dist", ",", "img_size", "=", "None", ",", "k", "=", "75", ",", "\n", "margin", "=", "None", ",", "threshold", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Compute visibility model based Biasutti et al. method as\n    described in:\n\n    \"Visibility estimation in point clouds with variable density\"\n    Source: https://hal.archives-ouvertes.fr/hal-01812061/document\n\n    :param x_proj:\n    :param y_proj:\n    :param dist:\n    :param img_size:\n    :param k:\n    :param margin:\n    :param threshold:\n    :return:\n    \"\"\"", "\n", "assert", "x_proj", ".", "shape", "[", "0", "]", "==", "y_proj", ".", "shape", "[", "0", "]", "==", "dist", ".", "shape", "[", "0", "]", ">", "0", "\n", "\n", "# Search k-nearest neighbors in the image pixel coordinate system", "\n", "neighbors", "=", "k_nn_image_system", "(", "\n", "x_proj", ",", "y_proj", ",", "k", "=", "k", ",", "x_margin", "=", "margin", ",", "x_width", "=", "img_size", "[", "0", "]", ")", "\n", "\n", "# Compute the visibility and recover visible point indices", "\n", "dist_nn", "=", "dist", "[", "neighbors", "]", "\n", "dist_min", "=", "dist_nn", ".", "min", "(", "dim", "=", "1", ")", ".", "values", "\n", "dist_max", "=", "dist_nn", ".", "max", "(", "dim", "=", "1", ")", ".", "values", "\n", "alpha", "=", "torch", ".", "exp", "(", "-", "(", "(", "dist", "-", "dist_min", ")", "/", "(", "dist_max", "-", "dist_min", ")", ")", "**", "2", ")", "\n", "if", "threshold", "is", "None", ":", "\n", "        ", "threshold", "=", "alpha", ".", "mean", "(", ")", "\n", "", "indices", "=", "torch", ".", "where", "(", "alpha", ">=", "threshold", ")", "[", "0", "]", "\n", "\n", "return", "indices", ",", "x_proj", "[", "indices", "]", ",", "y_proj", "[", "indices", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.visibility.normalize_dist_cuda": [[1503, 1519], ["dist.float.float", "dist.float.min", "dist.float.max"], "function", ["None"], ["", "def", "normalize_dist_cuda", "(", "dist", ",", "low", "=", "None", ",", "high", "=", "None", ")", ":", "\n", "    ", "\"\"\"Rescale distances to [0, 1].\n\n    :param dist:\n    :param low:\n    :param high:\n    :return:\n    \"\"\"", "\n", "d_min", "=", "low", "\n", "d_max", "=", "high", "\n", "dist", "=", "dist", ".", "float", "(", ")", "\n", "if", "low", "is", "None", ":", "\n", "        ", "d_min", "=", "dist", ".", "min", "(", ")", "\n", "", "if", "high", "is", "None", ":", "\n", "        ", "d_max", "=", "dist", ".", "max", "(", ")", "\n", "", "return", "(", "(", "dist", "-", "d_min", ")", "/", "(", "d_max", "+", "1e-4", ")", ")", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.visibility.orientation_cuda": [[1521, 1546], ["torch.zeros", "u.float.float", "v.float.float", "visibility.norm_cuda", "visibility.norm_cuda"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.visibility.norm_cuda", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.visibility.norm_cuda"], ["", "def", "orientation_cuda", "(", "u", ",", "v", ",", "requires_scaling", "=", "False", ")", ":", "\n", "    ", "\"\"\"Orientation is defined as |cos(theta)| with theta the angle\n    between the u and v. By default, u and v are assumed to be already\n    unit-scaled, use 'requires_scaling' if that is not the case.\n\n    :param u:\n    :param v:\n    :param requires_scaling:\n    :return:\n    \"\"\"", "\n", "orientation", "=", "torch", ".", "zeros", "(", "u", ".", "shape", "[", "0", "]", ",", "device", "=", "u", ".", "device", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "u", "=", "u", ".", "float", "(", ")", "\n", "v", "=", "v", ".", "float", "(", ")", "\n", "\n", "if", "v", "is", "None", ":", "\n", "        ", "return", "orientation", "\n", "\n", "", "if", "requires_scaling", ":", "\n", "        ", "u", "=", "u", "/", "(", "norm_cuda", "(", "u", ")", "+", "1e-4", ")", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", ".", "float", "(", ")", "\n", "v", "=", "v", "/", "(", "norm_cuda", "(", "v", ")", "+", "1e-4", ")", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", ".", "float", "(", ")", "\n", "\n", "", "orientation", "=", "(", "u", "*", "v", ")", ".", "sum", "(", "dim", "=", "1", ")", ".", "abs", "(", ")", "\n", "# orientation[torch.where(orientation > 1)] = 0", "\n", "\n", "return", "orientation", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.visibility.postprocess_features": [[1548, 1583], ["torch.stack().t", "features.append", "features.append", "features.append", "features.append", "features.append", "features.append", "visibility.normalize_dist_cuda", "visibility.orientation_cuda", "torch.stack"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.visibility.normalize_dist_cuda", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.visibility.orientation_cuda"], ["", "def", "postprocess_features", "(", "\n", "xyz_to_img", ",", "y_proj", ",", "dist", ",", "linearity", ",", "planarity", ",", "scattering", ",", "normals", ",", "\n", "img_size", "=", "(", "1024", ",", "512", ")", ",", "r_max", "=", "30", ",", "r_min", "=", "0.5", ",", "**", "kwargs", ")", ":", "\n", "# Compute the N x F array of pointwise projection features carrying:", "\n", "#     - normalized depth", "\n", "#     - linearity", "\n", "#     - planarity", "\n", "#     - scattering", "\n", "#     - orientation to the surface", "\n", "#     - normalized pixel height", "\n", "    ", "features", "=", "[", "]", "\n", "\n", "# Depth", "\n", "if", "dist", "is", "not", "None", ":", "\n", "        ", "features", ".", "append", "(", "normalize_dist_cuda", "(", "dist", ",", "low", "=", "r_min", ",", "high", "=", "r_max", ")", ")", "\n", "# Linearity", "\n", "", "if", "linearity", "is", "not", "None", ":", "\n", "        ", "features", ".", "append", "(", "linearity", ")", "\n", "# Planarity", "\n", "", "if", "planarity", "is", "not", "None", ":", "\n", "        ", "features", ".", "append", "(", "planarity", ")", "\n", "# Scattering", "\n", "", "if", "scattering", "is", "not", "None", ":", "\n", "        ", "features", ".", "append", "(", "scattering", ")", "\n", "\n", "# Orientation to the normal", "\n", "", "if", "xyz_to_img", "is", "not", "None", "and", "dist", "is", "not", "None", "and", "normals", "is", "not", "None", ":", "\n", "        ", "features", ".", "append", "(", "orientation_cuda", "(", "\n", "xyz_to_img", "/", "(", "dist", "+", "1e-4", ")", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", ",", "normals", ")", ")", "\n", "\n", "# Pixel height", "\n", "", "if", "y_proj", "is", "not", "None", ":", "\n", "        ", "features", ".", "append", "(", "(", "y_proj", "/", "img_size", "[", "1", "]", ")", ".", "float", "(", ")", ")", "\n", "\n", "", "return", "torch", ".", "stack", "(", "features", ")", ".", "t", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.visibility.visibility": [[1589, 1675], ["visibility.camera_projection", "idx.to", "x_pix.to", "y_pix.to", "dist.to", "visibility.postprocess_features", "xyz.cuda.cuda", "img_xyz.cuda.cuda", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "visibility.visibility_from_splatting", "torch.cuda.is_available", "linearity.cuda", "planarity.cuda", "scattering.cuda", "normals.cuda", "visibility.visibility_from_depth_map", "isinstance", "v.cuda", "kwargs.items", "visibility.visibility_biasutti"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.visibility.camera_projection", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.visibility.postprocess_features", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.csr.CSRData.cuda", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.csr.CSRData.cuda", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.visibility.visibility_from_splatting", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.csr.CSRData.cuda", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.csr.CSRData.cuda", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.csr.CSRData.cuda", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.csr.CSRData.cuda", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.visibility.visibility_from_depth_map", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.csr.CSRData.cuda", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.visibility.visibility_biasutti"], ["", "def", "visibility", "(", "\n", "xyz", ",", "img_xyz", ",", "method", "=", "'splatting'", ",", "linearity", "=", "None", ",", "planarity", "=", "None", ",", "\n", "scattering", "=", "None", ",", "normals", "=", "None", ",", "use_cuda", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Compute the visibility of a point cloud with respect to a given\n    camera pose.\n\n    :param xyz:\n    :param img_xyz:\n    :param method:\n    :param linearity:\n    :param planarity:\n    :param scattering:\n    :param normals:\n    :param use_cuda:\n    :param kwargs:\n    :return:\n    \"\"\"", "\n", "METHODS", "=", "[", "'splatting'", ",", "'depth_map'", ",", "'biasutti'", "]", "\n", "assert", "method", "in", "METHODS", ",", "f'Unknown method {method}, expected one of {METHODS}.'", "\n", "\n", "in_device", "=", "xyz", ".", "device", "\n", "if", "xyz", ".", "is_cuda", ":", "\n", "        ", "use_cuda", "=", "True", "\n", "", "elif", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "use_cuda", "=", "False", "\n", "\n", "", "if", "use_cuda", ":", "\n", "        ", "xyz", "=", "xyz", ".", "cuda", "(", ")", "\n", "img_xyz", "=", "img_xyz", ".", "cuda", "(", ")", "\n", "linearity", "=", "linearity", ".", "cuda", "(", ")", "if", "linearity", "is", "not", "None", "else", "None", "\n", "planarity", "=", "planarity", ".", "cuda", "(", ")", "if", "planarity", "is", "not", "None", "else", "None", "\n", "scattering", "=", "scattering", ".", "cuda", "(", ")", "if", "scattering", "is", "not", "None", "else", "None", "\n", "normals", "=", "normals", ".", "cuda", "(", ")", "if", "normals", "is", "not", "None", "else", "None", "\n", "kwargs", "=", "{", "\n", "k", ":", "v", ".", "cuda", "(", ")", "if", "isinstance", "(", "v", ",", "torch", ".", "Tensor", ")", "else", "v", "\n", "for", "k", ",", "v", "in", "kwargs", ".", "items", "(", ")", "}", "\n", "\n", "# Compute camera projection", "\n", "", "idx_1", ",", "dist", ",", "x_proj", ",", "y_proj", "=", "camera_projection", "(", "xyz", ",", "img_xyz", ",", "**", "kwargs", ")", "\n", "\n", "# Return if no projections are found", "\n", "if", "x_proj", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "        ", "out", "=", "{", "}", "\n", "out", "[", "'idx'", "]", "=", "torch", ".", "empty", "(", "(", "0", ",", ")", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "in_device", ")", "\n", "out", "[", "'x'", "]", "=", "torch", ".", "empty", "(", "(", "0", ",", ")", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "in_device", ")", "\n", "out", "[", "'y'", "]", "=", "torch", ".", "empty", "(", "(", "0", ",", ")", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "in_device", ")", "\n", "out", "[", "'depth'", "]", "=", "torch", ".", "empty", "(", "(", "0", ",", ")", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "in_device", ")", "\n", "out", "[", "'features'", "]", "=", "torch", ".", "empty", "(", "(", "0", ",", ")", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "in_device", ")", "\n", "return", "out", "\n", "\n", "", "if", "method", "==", "'splatting'", ":", "\n", "        ", "idx_2", ",", "x_pix", ",", "y_pix", "=", "visibility_from_splatting", "(", "\n", "x_proj", ",", "y_proj", ",", "dist", ",", "xyz", "[", "idx_1", "]", ",", "**", "kwargs", ")", "\n", "", "elif", "method", "==", "'depth_map'", ":", "\n", "        ", "idx_2", ",", "x_pix", ",", "y_pix", "=", "visibility_from_depth_map", "(", "\n", "x_proj", ",", "y_proj", ",", "dist", ",", "**", "kwargs", ")", "\n", "", "elif", "method", "==", "'biasutti'", ":", "\n", "        ", "idx_2", ",", "x_pix", ",", "y_pix", "=", "visibility_biasutti", "(", "\n", "x_proj", ",", "y_proj", ",", "dist", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "# Keep data only for mapped point", "\n", "", "idx", "=", "idx_1", "[", "idx_2", "]", "\n", "xyz", "=", "xyz", "[", "idx", "]", "\n", "dist", "=", "dist", "[", "idx_2", "]", "\n", "x_proj", "=", "x_proj", "[", "idx_2", "]", "\n", "y_proj", "=", "y_proj", "[", "idx_2", "]", "\n", "\n", "out", "=", "{", "}", "\n", "out", "[", "'idx'", "]", "=", "idx", ".", "to", "(", "in_device", ")", "\n", "out", "[", "'x'", "]", "=", "x_pix", ".", "to", "(", "in_device", ")", "\n", "out", "[", "'y'", "]", "=", "y_pix", ".", "to", "(", "in_device", ")", "\n", "out", "[", "'depth'", "]", "=", "dist", ".", "to", "(", "in_device", ")", "\n", "\n", "# Compute mapping features", "\n", "linearity", "=", "linearity", "[", "idx", "]", "if", "linearity", "is", "not", "None", "else", "None", "\n", "planarity", "=", "planarity", "[", "idx", "]", "if", "planarity", "is", "not", "None", "else", "None", "\n", "scattering", "=", "scattering", "[", "idx", "]", "if", "scattering", "is", "not", "None", "else", "None", "\n", "normals", "=", "normals", "[", "idx", "]", "if", "normals", "is", "not", "None", "else", "None", "\n", "out", "[", "'features'", "]", "=", "postprocess_features", "(", "\n", "xyz", "-", "img_xyz", ",", "y_proj", ",", "dist", ",", "linearity", ",", "planarity", ",", "scattering", ",", "\n", "normals", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.forward.shapenet._ForwardShapenet.__init__": [[29, 39], ["super().__init__", "sorted", "os.path.exists", "glob.glob", "shapenet._ForwardShapenet.__len__", "ValueError", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.basetest.BasePCRBTest.__len__"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.forward.shapenet._ForwardShapenet.__len__": [[40, 42], ["len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.forward.shapenet._ForwardShapenet._read_file": [[43, 52], ["torch_geometric.io.read_txt_array", "torch_geometric.data.data.Data", "raw[].type"], "methods", ["None"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.forward.shapenet._ForwardShapenet.get_raw": [[53, 57], ["shapenet._ForwardShapenet._read_file"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.forward.shapenet._ForwardShapenet._read_file"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.forward.shapenet._ForwardShapenet.num_features": [[58, 64], ["None"], "methods", ["None"], ["\n", "\n", "url", "=", "\"https://shapenet.cs.stanford.edu/media/\"", "\"shapenetcore_partanno_segmentation_benchmark_v0_normal.zip\"", "\n", "\n", "category_ids", "=", "{", "\n", "\"Airplane\"", ":", "\"02691156\"", ",", "\n", "\"Bag\"", ":", "\"02773838\"", ",", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.forward.shapenet._ForwardShapenet.get_filename": [[65, 67], ["os.path.basename"], "methods", ["None"], ["\"Cap\"", ":", "\"02954340\"", ",", "\n", "\"Car\"", ":", "\"02958343\"", ",", "\n", "\"Chair\"", ":", "\"03001627\"", ",", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.forward.shapenet._ForwardShapenet.__getitem__": [[68, 78], ["shapenet._ForwardShapenet._read_file", "setattr", "setattr", "torch.ones", "torch.tensor", "shapenet._ForwardShapenet._transforms"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.forward.shapenet._ForwardShapenet._read_file"], ["\"Earphone\"", ":", "\"03261776\"", ",", "\n", "\"Guitar\"", ":", "\"03467517\"", ",", "\n", "\"Knife\"", ":", "\"03624134\"", ",", "\n", "\"Lamp\"", ":", "\"03636649\"", ",", "\n", "\"Laptop\"", ":", "\"03642806\"", ",", "\n", "\"Motorbike\"", ":", "\"03790512\"", ",", "\n", "\"Mug\"", ":", "\"03797390\"", ",", "\n", "\"Pistol\"", ":", "\"03948459\"", ",", "\n", "\"Rocket\"", ":", "\"04099429\"", ",", "\n", "\"Skateboard\"", ":", "\"04225987\"", ",", "\n", "\"Table\"", ":", "\"04379243\"", ",", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.forward.shapenet.ForwardShapenetDataset.__init__": [[81, 122], ["torch_points3d.datasets.base_dataset.BaseDataset.__init__", "enumerate", "log.info", "dataset_opt.get", "torch_points3d.core.data_transform.SaveOriginalPosId", "shapenet._ForwardShapenet", "isinstance", "ValueError", "torch_points3d.utils.is_list", "ValueError", "forward_category.lower", "train_category.lower", "torch_geometric.Compose"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.config.is_list"], ["seg_classes", "=", "{", "\n", "\"Airplane\"", ":", "[", "0", ",", "1", ",", "2", ",", "3", "]", ",", "\n", "\"Bag\"", ":", "[", "4", ",", "5", "]", ",", "\n", "\"Cap\"", ":", "[", "6", ",", "7", "]", ",", "\n", "\"Car\"", ":", "[", "8", ",", "9", ",", "10", ",", "11", "]", ",", "\n", "\"Chair\"", ":", "[", "12", ",", "13", ",", "14", ",", "15", "]", ",", "\n", "\"Earphone\"", ":", "[", "16", ",", "17", ",", "18", "]", ",", "\n", "\"Guitar\"", ":", "[", "19", ",", "20", ",", "21", "]", ",", "\n", "\"Knife\"", ":", "[", "22", ",", "23", "]", ",", "\n", "\"Lamp\"", ":", "[", "24", ",", "25", ",", "26", ",", "27", "]", ",", "\n", "\"Laptop\"", ":", "[", "28", ",", "29", "]", ",", "\n", "\"Motorbike\"", ":", "[", "30", ",", "31", ",", "32", ",", "33", ",", "34", ",", "35", "]", ",", "\n", "\"Mug\"", ":", "[", "36", ",", "37", "]", ",", "\n", "\"Pistol\"", ":", "[", "38", ",", "39", ",", "40", "]", ",", "\n", "\"Rocket\"", ":", "[", "41", ",", "42", ",", "43", "]", ",", "\n", "\"Skateboard\"", ":", "[", "44", ",", "45", ",", "46", "]", ",", "\n", "\"Table\"", ":", "[", "47", ",", "48", ",", "49", "]", ",", "\n", "}", "\n", "\n", "def", "__init__", "(", "\n", "self", ",", "\n", "root", ",", "\n", "categories", "=", "None", ",", "\n", "include_normals", "=", "True", ",", "\n", "split", "=", "\"trainval\"", ",", "\n", "transform", "=", "None", ",", "\n", "pre_transform", "=", "None", ",", "\n", "pre_filter", "=", "None", ",", "\n", "is_test", "=", "False", ",", "\n", ")", ":", "\n", "        ", "if", "categories", "is", "None", ":", "\n", "            ", "categories", "=", "list", "(", "self", ".", "category_ids", ".", "keys", "(", ")", ")", "\n", "", "if", "isinstance", "(", "categories", ",", "str", ")", ":", "\n", "            ", "categories", "=", "[", "categories", "]", "\n", "", "assert", "all", "(", "category", "in", "self", ".", "category_ids", "for", "category", "in", "categories", ")", "\n", "self", ".", "categories", "=", "categories", "\n", "self", ".", "is_test", "=", "is_test", "\n", "super", "(", "ShapeNet", ",", "self", ")", ".", "__init__", "(", "\n", "root", ",", "transform", ",", "pre_transform", ",", "pre_filter", ")", "\n", "\n", "if", "split", "==", "\"train\"", ":", "\n", "            ", "path", "=", "self", ".", "processed_paths", "[", "0", "]", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.forward.shapenet.ForwardShapenetDataset.get_tracker": [[124, 134], ["torch_points3d.metrics.shapenet_part_tracker.ShapenetPartTracker"], "methods", ["None"], ["", "elif", "split", "==", "\"val\"", ":", "\n", "            ", "path", "=", "self", ".", "processed_paths", "[", "1", "]", "\n", "raw_path", "=", "self", ".", "processed_raw_paths", "[", "1", "]", "\n", "", "elif", "split", "==", "\"test\"", ":", "\n", "            ", "path", "=", "self", ".", "processed_paths", "[", "2", "]", "\n", "raw_path", "=", "self", ".", "processed_raw_paths", "[", "2", "]", "\n", "", "elif", "split", "==", "\"trainval\"", ":", "\n", "            ", "path", "=", "self", ".", "processed_paths", "[", "3", "]", "\n", "raw_path", "=", "self", ".", "processed_raw_paths", "[", "3", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.forward.shapenet.ForwardShapenetDataset.predict_original_samples": [[135, 159], ["torch_points3d.datasets.base_dataset.BaseDataset.get_num_samples", "setattr", "range", "output.reshape.reshape.reshape", "shapenet.ForwardShapenetDataset.test_dataset[].get_raw().pos.to", "torch_points3d.datasets.base_dataset.BaseDataset.get_sample", "torch_points3d.datasets.base_dataset.BaseDataset.get_sample", "torch_geometric.nn.knn_interpolate", "[].unsqueeze", "numpy.hstack", "shapenet.ForwardShapenetDataset.test_dataset[].get_filename", "shapenet.ForwardShapenetDataset.cpu().numpy", "[].unsqueeze.cpu().numpy", "shapenet.ForwardShapenetDataset.test_dataset[].get_raw", "torch_geometric.nn.knn_interpolate.max", "shapenet.ForwardShapenetDataset.cpu", "[].unsqueeze.cpu"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.base_dataset.BaseDataset.get_num_samples", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.base_dataset.BaseDataset.get_sample", "home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.base_dataset.BaseDataset.get_sample", "home.repos.pwc.inspect_result.drprojects_deepviewagg.forward.shapenet._ForwardShapenet.get_filename", "home.repos.pwc.inspect_result.drprojects_deepviewagg.forward.shapenet._ForwardShapenet.get_raw", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.csr.CSRData.cpu", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.csr.CSRData.cpu"], ["(", "f\"Split {split} found, but expected either \"", "\"train, val, trainval or test\"", ")", ")", "\n", "\n", "", "self", ".", "data", ",", "self", ".", "slices", ",", "self", ".", "y_mask", "=", "self", ".", "load_data", "(", "\n", "path", ",", "include_normals", ")", "\n", "\n", "# We have perform a slighly optimzation on memory space of no pre-transform was used.", "\n", "# c.f self._process_filenames", "\n", "if", "os", ".", "path", ".", "exists", "(", "raw_path", ")", ":", "\n", "            ", "self", ".", "raw_data", ",", "self", ".", "raw_slices", ",", "_", "=", "self", ".", "load_data", "(", "\n", "raw_path", ",", "include_normals", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "get_raw_data", "=", "self", ".", "get", "\n", "\n", "", "", "def", "load_data", "(", "self", ",", "path", ",", "include_normals", ")", ":", "\n", "        ", "'''This function is used twice to load data for both raw and pre_transformed\n        '''", "\n", "data", ",", "slices", "=", "torch", ".", "load", "(", "path", ")", "\n", "data", ".", "x", "=", "data", ".", "x", "if", "include_normals", "else", "None", "\n", "\n", "y_mask", "=", "torch", ".", "zeros", "(", "\n", "(", "len", "(", "self", ".", "seg_classes", ".", "keys", "(", ")", ")", ",", "50", ")", ",", "dtype", "=", "torch", ".", "bool", ")", "\n", "for", "i", ",", "labels", "in", "enumerate", "(", "self", ".", "seg_classes", ".", "values", "(", ")", ")", ":", "\n", "            ", "y_mask", "[", "i", ",", "labels", "]", "=", "1", "\n", "\n", "", "return", "data", ",", "slices", ",", "y_mask", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.forward.shapenet.ForwardShapenetDataset.class_to_segments": [[160, 166], ["None"], "methods", ["None"], ["\n", "", "@", "property", "\n", "def", "raw_file_names", "(", "self", ")", ":", "\n", "        ", "return", "list", "(", "self", ".", "category_ids", ".", "values", "(", ")", ")", "+", "[", "\"train_test_split\"", "]", "\n", "\n", "", "@", "property", "\n", "def", "processed_raw_paths", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.forward.shapenet.ForwardShapenetDataset.num_classes": [[167, 174], ["shapenet.ForwardShapenetDataset.class_to_segments.values", "max", "max"], "methods", ["None"], ["        ", "cats", "=", "\"_\"", ".", "join", "(", "[", "cat", "[", ":", "3", "]", ".", "lower", "(", ")", "for", "cat", "in", "self", ".", "categories", "]", ")", "\n", "processed_raw_paths", "=", "[", "os", ".", "path", ".", "join", "(", "self", ".", "processed_dir", ",", "\"raw_{}_{}\"", ".", "format", "(", "\n", "cats", ",", "s", ")", ")", "for", "s", "in", "[", "\"train\"", ",", "\"val\"", ",", "\"test\"", ",", "\"trainval\"", "]", "]", "\n", "return", "processed_raw_paths", "\n", "\n", "", "@", "property", "\n", "def", "processed_file_names", "(", "self", ")", ":", "\n", "        ", "cats", "=", "\"_\"", ".", "join", "(", "[", "cat", "[", ":", "3", "]", ".", "lower", "(", ")", "for", "cat", "in", "self", ".", "categories", "]", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.object_detection.box_data.BoxData.__init__": [[10, 25], ["torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "classname.cpu().item.cpu().item.cpu().item", "corners3d.cpu().numpy.cpu().numpy.cpu().numpy", "score.cpu().item.cpu().item.cpu().item", "classname.cpu().item.cpu().item.cpu", "corners3d.cpu().numpy.cpu().numpy.cpu", "score.cpu().item.cpu().item.cpu"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.csr.CSRData.cpu", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.csr.CSRData.cpu", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.csr.CSRData.cpu"], ["def", "__init__", "(", "self", ",", "classname", ",", "corners3d", ",", "score", "=", "None", ")", ":", "\n", "        ", "assert", "corners3d", ".", "shape", "==", "(", "8", ",", "3", ")", "\n", "assert", "score", "is", "None", "or", "score", "<=", "1", "and", "score", ">=", "0", "\n", "\n", "if", "torch", ".", "is_tensor", "(", "classname", ")", ":", "\n", "            ", "classname", "=", "classname", ".", "cpu", "(", ")", ".", "item", "(", ")", "\n", "", "self", ".", "classname", "=", "classname", "\n", "\n", "if", "torch", ".", "is_tensor", "(", "corners3d", ")", ":", "\n", "            ", "corners3d", "=", "corners3d", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "self", ".", "corners3d", "=", "corners3d", "\n", "\n", "if", "torch", ".", "is_tensor", "(", "score", ")", ":", "\n", "            ", "score", "=", "score", ".", "cpu", "(", ")", ".", "item", "(", ")", "\n", "", "self", ".", "score", "=", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.object_detection.box_data.BoxData.is_gt": [[26, 29], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "is_gt", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "score", "is", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.object_detection.box_data.BoxData.__repr__": [[30, 32], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"{}: (score={})\"", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "score", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.object_detection.scannet.ScannetObjectDetection.__init__": [[43, 52], ["torch_points3d.datasets.segmentation.scannet.Scannet.__init__", "range", "numpy.load", "len", "enumerate", "os.path.join", "list"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["\".aggregation.json\"", ",", "\n", "\".sens\"", ",", "\n", "\".txt\"", ",", "\n", "\"_vh_clean.ply\"", ",", "\n", "\"_vh_clean_2.0.010000.segs.json\"", ",", "\n", "\"_vh_clean_2.ply\"", ",", "\n", "\"_vh_clean.segs.json\"", ",", "\n", "\"_vh_clean.aggregation.json\"", ",", "\n", "\"_vh_clean_2.labels.ply\"", ",", "\n", "\"_2d-instance.zip\"", ",", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.object_detection.scannet.ScannetObjectDetection.__getitem__": [[53, 68], ["torch_points3d.datasets.segmentation.scannet.Scannet.__getitem__", "scannet.ScannetObjectDetection._set_extra_labels", "isinstance", "ValueError"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.panoptic.scannet.ScannetPanoptic.__getitem__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.panoptic.scannet.ScannetPanoptic._set_extra_labels"], ["\"_2d-instance-filt.zip\"", ",", "\n", "\"_2d-label.zip\"", ",", "\n", "\"_2d-label-filt.zip\"", ",", "\n", "]", "\n", "FILETYPES_TEST", "=", "[", "\".sens\"", ",", "\".txt\"", ",", "\"_vh_clean.ply\"", ",", "\"_vh_clean_2.ply\"", "]", "\n", "PREPROCESSED_FRAMES_FILE", "=", "[", "\"scannet_frames_25k.zip\"", ",", "\"5.6GB\"", "]", "\n", "TEST_FRAMES_FILE", "=", "[", "\"scannet_frames_test.zip\"", ",", "\"610MB\"", "]", "\n", "LABEL_MAP_FILES", "=", "[", "\"scannetv2-labels.combined.tsv\"", ",", "\"scannet-labels.combined.tsv\"", "]", "\n", "RELEASES", "=", "[", "\"v2/scans\"", ",", "\"v1/scans\"", "]", "\n", "RELEASES_TASKS", "=", "[", "\"v2/tasks\"", ",", "\"v1/tasks\"", "]", "\n", "RELEASES_NAMES", "=", "[", "\"v2\"", ",", "\"v1\"", "]", "\n", "RELEASE", "=", "RELEASES", "[", "0", "]", "\n", "RELEASE_TASKS", "=", "RELEASES_TASKS", "[", "0", "]", "\n", "RELEASE_NAME", "=", "RELEASES_NAMES", "[", "0", "]", "\n", "LABEL_MAP_FILE", "=", "LABEL_MAP_FILES", "[", "0", "]", "\n", "RELEASE_SIZE", "=", "\"1.2TB\"", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.object_detection.scannet.ScannetObjectDetection._set_extra_labels": [[69, 158], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "numpy.unique", "point_votes.repeat.repeat.repeat", "torch.tensor", "len", "numpy.zeros", "torch.zeros", "torch.zeros.float", "torch.zeros.float", "torch.from_numpy().int", "point_votes.repeat.repeat.float", "torch.zeros", "len", "delattr", "delattr", "super()._remap_labels", "semantic_labels[].item", "torch.stack", "torch.stack", "torch.stack", "numpy.where", "instance_box_corners.append", "torch.stack.append", "torch.stack.append", "torch.tensor.append", "torch.from_numpy", "torch.from_numpy", "pos.max", "pos.min", "torch_points3d.utils.box_utils.box_corners_from_param", "len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.panoptic.scannet.ScannetPanoptic._remap_labels", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.box_utils.box_corners_from_param", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["V1_IDX", "=", "1", "\n", "NUM_CLASSES", "=", "41", "\n", "CLASS_LABELS", "=", "(", "\n", "\"wall\"", ",", "\n", "\"floor\"", ",", "\n", "\"cabinet\"", ",", "\n", "\"bed\"", ",", "\n", "\"chair\"", ",", "\n", "\"sofa\"", ",", "\n", "\"table\"", ",", "\n", "\"door\"", ",", "\n", "\"window\"", ",", "\n", "\"bookshelf\"", ",", "\n", "\"picture\"", ",", "\n", "\"counter\"", ",", "\n", "\"desk\"", ",", "\n", "\"curtain\"", ",", "\n", "\"refrigerator\"", ",", "\n", "\"shower curtain\"", ",", "\n", "\"toilet\"", ",", "\n", "\"sink\"", ",", "\n", "\"bathtub\"", ",", "\n", "\"otherfurniture\"", ",", "\n", ")", "\n", "URLS_METADATA", "=", "[", "\n", "\"https://raw.githubusercontent.com/facebookresearch/votenet/master/scannet/meta_data/scannetv2-labels.combined.tsv\"", ",", "\n", "\"https://raw.githubusercontent.com/facebookresearch/votenet/master/scannet/meta_data/scannetv2_train.txt\"", ",", "\n", "\"https://raw.githubusercontent.com/facebookresearch/votenet/master/scannet/meta_data/scannetv2_test.txt\"", ",", "\n", "\"https://raw.githubusercontent.com/facebookresearch/votenet/master/scannet/meta_data/scannetv2_val.txt\"", ",", "\n", "]", "\n", "VALID_CLASS_IDS", "=", "[", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", ",", "9", ",", "10", ",", "11", ",", "12", ",", "14", ",", "16", ",", "24", ",", "28", ",", "33", ",", "34", ",", "36", ",", "39", "]", "\n", "\n", "SCANNET_COLOR_MAP", "=", "{", "\n", "0", ":", "(", "0.0", ",", "0.0", ",", "0.0", ")", ",", "\n", "1", ":", "(", "174.0", ",", "199.0", ",", "232.0", ")", ",", "\n", "2", ":", "(", "152.0", ",", "223.0", ",", "138.0", ")", ",", "\n", "3", ":", "(", "31.0", ",", "119.0", ",", "180.0", ")", ",", "\n", "4", ":", "(", "255.0", ",", "187.0", ",", "120.0", ")", ",", "\n", "5", ":", "(", "188.0", ",", "189.0", ",", "34.0", ")", ",", "\n", "6", ":", "(", "140.0", ",", "86.0", ",", "75.0", ")", ",", "\n", "7", ":", "(", "255.0", ",", "152.0", ",", "150.0", ")", ",", "\n", "8", ":", "(", "214.0", ",", "39.0", ",", "40.0", ")", ",", "\n", "9", ":", "(", "197.0", ",", "176.0", ",", "213.0", ")", ",", "\n", "10", ":", "(", "148.0", ",", "103.0", ",", "189.0", ")", ",", "\n", "11", ":", "(", "196.0", ",", "156.0", ",", "148.0", ")", ",", "\n", "12", ":", "(", "23.0", ",", "190.0", ",", "207.0", ")", ",", "\n", "14", ":", "(", "247.0", ",", "182.0", ",", "210.0", ")", ",", "\n", "15", ":", "(", "66.0", ",", "188.0", ",", "102.0", ")", ",", "\n", "16", ":", "(", "219.0", ",", "219.0", ",", "141.0", ")", ",", "\n", "17", ":", "(", "140.0", ",", "57.0", ",", "197.0", ")", ",", "\n", "18", ":", "(", "202.0", ",", "185.0", ",", "52.0", ")", ",", "\n", "19", ":", "(", "51.0", ",", "176.0", ",", "203.0", ")", ",", "\n", "20", ":", "(", "200.0", ",", "54.0", ",", "131.0", ")", ",", "\n", "21", ":", "(", "92.0", ",", "193.0", ",", "61.0", ")", ",", "\n", "22", ":", "(", "78.0", ",", "71.0", ",", "183.0", ")", ",", "\n", "23", ":", "(", "172.0", ",", "114.0", ",", "82.0", ")", ",", "\n", "24", ":", "(", "255.0", ",", "127.0", ",", "14.0", ")", ",", "\n", "25", ":", "(", "91.0", ",", "163.0", ",", "138.0", ")", ",", "\n", "26", ":", "(", "153.0", ",", "98.0", ",", "156.0", ")", ",", "\n", "27", ":", "(", "140.0", ",", "153.0", ",", "101.0", ")", ",", "\n", "28", ":", "(", "158.0", ",", "218.0", ",", "229.0", ")", ",", "\n", "29", ":", "(", "100.0", ",", "125.0", ",", "154.0", ")", ",", "\n", "30", ":", "(", "178.0", ",", "127.0", ",", "135.0", ")", ",", "\n", "32", ":", "(", "146.0", ",", "111.0", ",", "194.0", ")", ",", "\n", "33", ":", "(", "44.0", ",", "160.0", ",", "44.0", ")", ",", "\n", "34", ":", "(", "112.0", ",", "128.0", ",", "144.0", ")", ",", "\n", "35", ":", "(", "96.0", ",", "207.0", ",", "209.0", ")", ",", "\n", "36", ":", "(", "227.0", ",", "119.0", ",", "194.0", ")", ",", "\n", "37", ":", "(", "213.0", ",", "92.0", ",", "176.0", ")", ",", "\n", "38", ":", "(", "94.0", ",", "106.0", ",", "211.0", ")", ",", "\n", "39", ":", "(", "82.0", ",", "84.0", ",", "163.0", ")", ",", "\n", "40", ":", "(", "100.0", ",", "85.0", ",", "144.0", ")", ",", "\n", "}", "\n", "\n", "SPLITS", "=", "[", "\"train\"", ",", "\"val\"", ",", "\"test\"", "]", "\n", "\n", "MAX_NUM_POINTS", "=", "1200000", "\n", "\n", "CLASS_COLORS", "=", "[", "SCANNET_COLOR_MAP", "[", "i", "]", "for", "i", "in", "VALID_CLASS_IDS", "]", "+", "[", "(", "225", ",", "225", ",", "255", ")", "]", "\n", "CLASS_NAMES", "=", "list", "(", "CLASS_LABELS", ")", "+", "[", "'ignored'", "]", "\n", "\n", "\n", "def", "get_release_scans", "(", "release_file", ")", ":", "\n", "    ", "scan_lines", "=", "urlopen", "(", "release_file", ")", "\n", "scans", "=", "[", "]", "\n", "for", "scan_line", "in", "scan_lines", ":", "\n", "        ", "scan_id", "=", "scan_line", ".", "decode", "(", "\"utf8\"", ")", ".", "rstrip", "(", "\"\\n\"", ")", "\n", "scans", ".", "append", "(", "scan_id", ")", "\n", "", "return", "scans", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.object_detection.scannet.ScannetObjectDetection._remap_labels": [[159, 161], ["None"], "methods", ["None"], ["\n", "", "def", "download_release", "(", "release_scans", ",", "out_dir", ",", "file_types", ",", "use_v1_sens", ")", ":", "\n", "    ", "if", "len", "(", "release_scans", ")", "==", "0", ":", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.object_detection.scannet.ScannetObjectDetection.process": [[162, 164], ["super().process"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.classification.modelnet.SampledModelNet.process"], ["        ", "return", "\n", "", "log", ".", "info", "(", "\"Downloading ScanNet \"", "+", "RELEASE_NAME", "+", "\" release to \"", "+", "out_dir", "+", "\"...\"", ")", "\n", "failed", "=", "[", "]", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.object_detection.scannet.ScannetObjectDetection.download": [[165, 167], ["super().download"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.classification.modelnet.SampledModelNet.download"], ["for", "scan_id", "in", "release_scans", ":", "\n", "        ", "scan_out_dir", "=", "osp", ".", "join", "(", "out_dir", ",", "scan_id", ")", "\n", "try", ":", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.object_detection.scannet.ScannetDataset.__init__": [[170, 203], ["torch_points3d.datasets.base_dataset.BaseDataset.__init__", "dataset_opt.get", "dataset_opt.get", "list", "dataset_opt.get", "dataset_opt.get", "scannet.ScannetObjectDetection", "scannet.ScannetObjectDetection", "dataset_opt.get"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get"], ["            ", "failed", ".", "append", "(", "scan_id", ")", "\n", "", "", "log", ".", "info", "(", "\"Downloaded ScanNet \"", "+", "RELEASE_NAME", "+", "\" release.\"", ")", "\n", "if", "len", "(", "failed", ")", ":", "\n", "        ", "log", ".", "warning", "(", "\"Failed downloads: {}\"", ".", "format", "(", "failed", ")", ")", "\n", "\n", "\n", "", "", "def", "download_file", "(", "url", ",", "out_file", ")", ":", "\n", "    ", "out_dir", "=", "osp", ".", "dirname", "(", "out_file", ")", "\n", "if", "not", "osp", ".", "isdir", "(", "out_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "out_dir", ")", "\n", "", "if", "not", "osp", ".", "isfile", "(", "out_file", ")", ":", "\n", "        ", "log", ".", "info", "(", "\"\\t\"", "+", "url", "+", "\" > \"", "+", "out_file", ")", "\n", "fh", ",", "out_file_tmp", "=", "tempfile", ".", "mkstemp", "(", "dir", "=", "out_dir", ")", "\n", "f", "=", "os", ".", "fdopen", "(", "fh", ",", "\"w\"", ")", "\n", "f", ".", "close", "(", ")", "\n", "urllib", ".", "request", ".", "urlretrieve", "(", "url", ",", "out_file_tmp", ")", "\n", "# urllib.urlretrieve(url, out_file_tmp)", "\n", "os", ".", "rename", "(", "out_file_tmp", ",", "out_file", ")", "\n", "", "else", ":", "\n", "        ", "pass", "\n", "# log.warning(\"WARNING Skipping download of existing file \" + out_file)", "\n", "\n", "\n", "", "", "def", "download_scan", "(", "scan_id", ",", "out_dir", ",", "file_types", ",", "use_v1_sens", ")", ":", "\n", "# log.info(\"Downloading ScanNet \" + RELEASE_NAME + \" scan \" + scan_id + \" ...\")", "\n", "    ", "if", "not", "osp", ".", "isdir", "(", "out_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "out_dir", ")", "\n", "", "for", "ft", "in", "file_types", ":", "\n", "        ", "v1_sens", "=", "use_v1_sens", "and", "ft", "==", "\".sens\"", "\n", "url", "=", "(", "\n", "BASE_URL", "+", "RELEASE", "+", "\"/\"", "+", "scan_id", "+", "\"/\"", "+", "scan_id", "+", "ft", "\n", "if", "not", "v1_sens", "\n", "else", "BASE_URL", "+", "RELEASES", "[", "V1_IDX", "]", "+", "\"/\"", "+", "scan_id", "+", "\"/\"", "+", "scan_id", "+", "ft", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.object_detection.scannet.ScannetDataset.mean_size_arr": [[205, 209], ["scannet.ScannetDataset.train_dataset.MEAN_SIZE_ARR.copy"], "methods", ["None"], ["download_file", "(", "url", ",", "out_file", ")", "\n", "# log.info(\"Downloaded scan \" + scan_id)", "\n", "\n", "\n", "", "", "def", "download_label_map", "(", "out_dir", ")", ":", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.object_detection.scannet.ScannetDataset.class2angle": [[210, 214], ["None"], "methods", ["None"], ["    ", "log", ".", "info", "(", "\"Downloading ScanNet \"", "+", "RELEASE_NAME", "+", "\" label mapping file...\"", ")", "\n", "files", "=", "[", "LABEL_MAP_FILE", "]", "\n", "for", "file", "in", "files", ":", "\n", "        ", "url", "=", "BASE_URL", "+", "RELEASE_TASKS", "+", "\"/\"", "+", "file", "\n", "localpath", "=", "osp", ".", "join", "(", "out_dir", ",", "file", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.object_detection.scannet.ScannetDataset.num_classes": [[215, 219], ["None"], "methods", ["None"], ["localdir", "=", "osp", ".", "dirname", "(", "localpath", ")", "\n", "if", "not", "osp", ".", "isdir", "(", "localdir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "localdir", ")", "\n", "", "download_file", "(", "url", ",", "localpath", ")", "\n", "", "log", ".", "info", "(", "\"Downloaded ScanNet \"", "+", "RELEASE_NAME", "+", "\" label mapping file.\"", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.object_detection.scannet.ScannetDataset.class2size": [[220, 227], ["torch.is_tensor", "torch.tensor().to", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to"], ["\n", "\n", "# REFERENCE TO https://github.com/facebookresearch/votenet/blob/master/scannet/load_scannet_data.py", "\n", "########################################################################################", "\n", "#                                                                                      #", "\n", "#                                      UTILS                                           #", "\n", "#                                                                                      #", "\n", "########################################################################################", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.object_detection.scannet.ScannetDataset.get_tracker": [[228, 237], ["torch_points3d.metrics.object_detection_tracker.ObjectDetectionTracker"], "methods", ["None"], ["\n", "\n", "", "def", "represents_int", "(", "s", ")", ":", "\n", "    ", "\"\"\" if string s represents an int. \"\"\"", "\n", "try", ":", "\n", "        ", "int", "(", "s", ")", "\n", "return", "True", "\n", "", "except", "ValueError", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.object_detection.votenet2.VoteNet2.__init__": [[32, 95], ["torch_points3d.models.base_model.BaseModel.__init__", "getattr", "backbone_option.get", "getattr.", "option.get", "option.get", "getattr", "getattr.", "getattr", "getattr.", "dataset.mean_size_arr.tolist", "torch.nn.Dropout", "torch_points3d.core.common_modules.Seq().append().append().append", "backbone_option.get", "torch.nn.LogSoftmax", "torch_points3d.core.common_modules.Seq().append().append", "torch.nn.Linear", "torch_points3d.core.common_modules.Seq().append", "torch_points3d.core.common_modules.MLP", "torch_points3d.core.common_modules.Seq"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.MLP"], ["def", "__init__", "(", "self", ",", "option", ",", "model_type", ",", "dataset", ",", "modules", ")", ":", "\n", "        ", "super", "(", "VoteNet2", ",", "self", ")", ".", "__init__", "(", "option", ")", "\n", "self", ".", "_dataset", "=", "dataset", "\n", "self", ".", "_weight_classes", "=", "dataset", ".", "weight_classes", "\n", "\n", "# 1 - CREATE BACKBONE MODEL", "\n", "input_nc", "=", "dataset", ".", "feature_dimension", "\n", "backbone_option", "=", "option", ".", "backbone", "\n", "backbone_cls", "=", "getattr", "(", "models", ",", "backbone_option", ".", "model_type", ")", "\n", "backbone_extr_options", "=", "backbone_option", ".", "get", "(", "\"extra_options\"", ",", "{", "}", ")", "\n", "self", ".", "backbone_model", "=", "backbone_cls", "(", "\n", "architecture", "=", "\"unet\"", ",", "input_nc", "=", "input_nc", ",", "num_layers", "=", "4", ",", "config", "=", "backbone_option", ".", "get", "(", "'config'", ")", ",", "**", "backbone_extr_options", "\n", ")", "\n", "self", ".", "_kpconv_backbone", "=", "backbone_cls", ".", "__name__", "==", "\"KPConv\"", "\n", "self", ".", "is_dense_format", "=", "self", ".", "conv_type", "==", "\"DENSE\"", "\n", "dropout", "=", "option", ".", "get", "(", "\"dropout\"", ",", "None", ")", "\n", "if", "dropout", "is", "not", "None", ":", "\n", "            ", "self", ".", "dropout", "=", "torch", ".", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "dropout", "=", "None", "\n", "\n", "# 2 - SEGMENTATION HEAD", "\n", "", "semantic_supervision", "=", "option", ".", "get", "(", "\"semantic_supervision\"", ",", "False", ")", "\n", "if", "semantic_supervision", ":", "\n", "            ", "self", ".", "Semantic", "=", "(", "\n", "Seq", "(", ")", "\n", ".", "append", "(", "MLP", "(", "[", "self", ".", "backbone_model", ".", "output_nc", ",", "self", ".", "backbone_model", ".", "output_nc", "]", ",", "bias", "=", "False", ")", ")", "\n", ".", "append", "(", "torch", ".", "nn", ".", "Linear", "(", "self", ".", "backbone_model", ".", "output_nc", ",", "dataset", ".", "num_classes", ")", ")", "\n", ".", "append", "(", "torch", ".", "nn", ".", "LogSoftmax", "(", ")", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "Semantic", "=", "None", "\n", "\n", "# 3 - CREATE VOTING MODEL", "\n", "", "voting_option", "=", "option", ".", "voting", "\n", "self", ".", "_num_seeds", "=", "voting_option", ".", "num_points_to_sample", "\n", "voting_cls", "=", "getattr", "(", "votenet_module", ",", "voting_option", ".", "module_name", ")", "\n", "self", ".", "voting_module", "=", "voting_cls", "(", "\n", "vote_factor", "=", "voting_option", ".", "vote_factor", ",", "seed_feature_dim", "=", "self", ".", "backbone_model", ".", "output_nc", "\n", ")", "\n", "\n", "# 4 - CREATE PROPOSAL MODULE", "\n", "proposal_option", "=", "option", ".", "proposal", "\n", "proposal_option", ".", "vote_aggregation", ".", "down_conv_nn", "=", "[", "\n", "[", "self", ".", "backbone_model", ".", "output_nc", "+", "3", ",", "self", ".", "backbone_model", ".", "output_nc", ",", "self", ".", "backbone_model", ".", "output_nc", ",", "]", "\n", "]", "\n", "proposal_cls", "=", "getattr", "(", "votenet_module", ",", "proposal_option", ".", "module_name", ")", "\n", "self", ".", "proposal_cls_module", "=", "proposal_cls", "(", "\n", "num_class", "=", "proposal_option", ".", "num_class", ",", "\n", "vote_aggregation_config", "=", "proposal_option", ".", "vote_aggregation", ",", "\n", "num_heading_bin", "=", "proposal_option", ".", "num_heading_bin", ",", "\n", "mean_size_arr", "=", "dataset", ".", "mean_size_arr", ",", "\n", "num_proposal", "=", "proposal_option", ".", "num_proposal", ",", "\n", "sampling", "=", "proposal_option", ".", "sampling", ",", "\n", ")", "\n", "\n", "# Loss params", "\n", "self", ".", "loss_params", "=", "option", ".", "loss_params", "\n", "self", ".", "loss_params", ".", "num_heading_bin", "=", "proposal_option", ".", "num_heading_bin", "\n", "self", ".", "loss_params", ".", "mean_size_arr", "=", "dataset", ".", "mean_size_arr", ".", "tolist", "(", ")", "\n", "\n", "self", ".", "losses_has_been_added", "=", "False", "\n", "self", ".", "loss_names", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.object_detection.votenet2.VoteNet2.set_input": [[96, 114], ["data.y.flatten().to", "data.y.flatten", "torch.max", "torch_points3d.core.data_transform.AddOnes", "torch.cat", "data.ones.float", "data.ones.float"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat"], ["", "def", "set_input", "(", "self", ",", "data", ",", "device", ")", ":", "\n", "        ", "\"\"\"Unpack input data from the dataloader and perform necessary pre-processing steps.\n        Parameters:\n            input: a dictionary that contains the data itself and its metadata information.\n        \"\"\"", "\n", "self", ".", "semantic_labels", "=", "data", ".", "y", ".", "flatten", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "if", "self", ".", "is_dense_format", ":", "\n", "            ", "self", ".", "input", "=", "data", "\n", "self", ".", "_n_batches", "=", "data", ".", "pos", ".", "shape", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "_kpconv_backbone", ":", "\n", "                ", "data", "=", "AddOnes", "(", ")", "(", "data", ")", "\n", "if", "data", ".", "x", "is", "not", "None", ":", "\n", "                    ", "data", ".", "x", "=", "torch", ".", "cat", "(", "[", "data", ".", "x", ",", "data", ".", "ones", ".", "float", "(", ")", "]", ",", "dim", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "                    ", "data", ".", "x", "=", "data", ".", "ones", ".", "float", "(", ")", "\n", "", "", "self", ".", "input", "=", "data", "\n", "self", ".", "_n_batches", "=", "torch", ".", "max", "(", "data", ".", "batch", ")", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.object_detection.votenet2.VoteNet2.forward": [[115, 145], ["votenet2.VoteNet2.backbone_model.forward", "votenet2.VoteNet2._select_seeds", "votenet2.VoteNet2.voting_module", "setattr", "votenet2.VoteNet2.proposal_cls_module", "votenet2.VoteNet2.input.to", "hasattr", "votenet2.VoteNet2.dropout", "votenet2.VoteNet2.x.clone", "votenet2.VoteNet2.to", "votenet2.VoteNet2._extract_gt_center", "torch.no_grad", "votenet2.VoteNet2._dump_visuals", "backbone_feats.reshape.reshape.dim", "backbone_feats.reshape.reshape.transpose", "backbone_feats.reshape.reshape.reshape", "votenet2.VoteNet2.Semantic"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.forward", "home.repos.pwc.inspect_result.drprojects_deepviewagg.object_detection.votenet2.VoteNet2._select_seeds", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.clone", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.object_detection.votenet2.VoteNet2._extract_gt_center", "home.repos.pwc.inspect_result.drprojects_deepviewagg.panoptic.pointgroup.PointGroup._dump_visuals"], ["", "", "def", "forward", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Run forward pass. This will be called by both functions <optimize_parameters> and <test>.\"\"\"", "\n", "data_features", "=", "self", ".", "backbone_model", ".", "forward", "(", "self", ".", "input", ")", "\n", "if", "self", ".", "dropout", ":", "\n", "            ", "data_features", ".", "x", "=", "self", ".", "dropout", "(", "data_features", ".", "x", ")", "\n", "", "data_seeds", ",", "seed_inds", "=", "self", ".", "_select_seeds", "(", "data_features", ")", "\n", "\n", "# Semantic prediction only if full Unet", "\n", "self", ".", "semantic_logits", "=", "None", "\n", "if", "self", ".", "Semantic", ":", "\n", "            ", "backbone_feats", "=", "data_features", ".", "x", ".", "clone", "(", ")", "\n", "if", "backbone_feats", ".", "dim", "(", ")", "==", "3", ":", "\n", "                ", "backbone_feats", "=", "backbone_feats", ".", "transpose", "(", "2", ",", "1", ")", "\n", "backbone_feats", "=", "backbone_feats", ".", "reshape", "(", "-", "1", ",", "backbone_feats", ".", "shape", "[", "2", "]", ")", "\n", "", "if", "backbone_feats", ".", "shape", "[", "0", "]", "==", "self", ".", "semantic_labels", ".", "shape", "[", "0", "]", ":", "\n", "                ", "self", ".", "semantic_logits", "=", "self", ".", "Semantic", "(", "backbone_feats", ")", "\n", "\n", "# Box prediction", "\n", "", "", "data_votes", "=", "self", ".", "voting_module", "(", "data_seeds", ")", "\n", "setattr", "(", "data_votes", ",", "\"seed_inds\"", ",", "seed_inds", ")", "# [B,num_seeds]", "\n", "\n", "outputs", ":", "votenet_module", ".", "VoteNetResults", "=", "self", ".", "proposal_cls_module", "(", "data_votes", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "\n", "# Set output and compute losses", "\n", "self", ".", "input", "=", "self", ".", "input", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "output", "=", "outputs", "\n", "if", "hasattr", "(", "self", ".", "input", ",", "\"center_label\"", ")", ":", "\n", "            ", "self", ".", "_extract_gt_center", "(", "self", ".", "input", ",", "outputs", ")", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "_dump_visuals", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.object_detection.votenet2.VoteNet2._select_seeds": [[146, 162], ["hasattr", "torch_points3d.modules.VoteNet.dense_samplers.FPSSamplerToDense", "torch_points3d.modules.VoteNet.dense_samplers.FPSSamplerToDense.sample", "getattr", "torch.gather", "torch.gather", "torch_geometric.data.Data", "torch_geometric.data.Data", "seed_inds.unsqueeze().repeat", "seed_inds.unsqueeze().repeat", "seed_inds.unsqueeze", "seed_inds.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.spatial_ops.sampling.DenseRandomSampler.sample", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.gathering.gather", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.gathering.gather"], ["", "", "def", "_select_seeds", "(", "self", ",", "data_features", ")", ":", "\n", "        ", "sampling_id_key", "=", "\"sampling_id_0\"", "\n", "if", "hasattr", "(", "data_features", ",", "sampling_id_key", ")", ":", "\n", "            ", "seed_inds", "=", "getattr", "(", "data_features", ",", "sampling_id_key", ",", "None", ")", "[", ":", ",", ":", "self", ".", "_num_seeds", "]", "\n", "if", "data_features", ".", "pos", ".", "shape", "[", "1", "]", "!=", "self", ".", "_num_seeds", ":", "\n", "                ", "pos", "=", "torch", ".", "gather", "(", "\n", "data_features", ".", "pos", ",", "1", ",", "seed_inds", ".", "unsqueeze", "(", "-", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "data_features", ".", "pos", ".", "shape", "[", "-", "1", "]", ")", "\n", ")", "\n", "x", "=", "torch", ".", "gather", "(", "data_features", ".", "x", ",", "2", ",", "seed_inds", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "data_features", ".", "x", ".", "shape", "[", "1", "]", ",", "1", ")", ")", "\n", "data_out", "=", "Data", "(", "pos", "=", "pos", ",", "x", "=", "x", ")", "\n", "", "else", ":", "\n", "                ", "data_out", "=", "Data", "(", "pos", "=", "data_features", ".", "pos", ",", "x", "=", "data_features", ".", "x", ")", "\n", "", "", "else", ":", "\n", "            ", "sampler", "=", "FPSSamplerToDense", "(", "num_to_sample", "=", "self", ".", "_num_seeds", ")", "\n", "data_out", ",", "seed_inds", "=", "sampler", ".", "sample", "(", "data_features", ",", "self", ".", "_n_batches", ",", "self", ".", "conv_type", ")", "\n", "", "return", "data_out", ",", "seed_inds", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.object_detection.votenet2.VoteNet2.backward": [[163, 167], ["votenet2.VoteNet2._compute_losses", "votenet2.VoteNet2.loss.backward"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.object_detection.votenet.VoteNetModel._compute_losses", "home.repos.pwc.inspect_result.drprojects_deepviewagg.panoptic.pointgroup.PointGroup.backward"], ["", "def", "backward", "(", "self", ")", ":", "\n", "        ", "\"\"\"Calculate losses, gradients, and update network weights; called in every training iteration\"\"\"", "\n", "self", ".", "_compute_losses", "(", ")", "\n", "self", ".", "loss", ".", "backward", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.object_detection.votenet2.VoteNet2._extract_gt_center": [[168, 176], ["outputs.assign_objects", "data.center_label[].view", "votenet2.VoteNet2.input.box_label_mask.view"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.VoteNet.votenet_results.VoteNetResults.assign_objects"], ["", "def", "_extract_gt_center", "(", "self", ",", "data", ",", "outputs", ")", ":", "\n", "        ", "if", "self", ".", "is_dense_format", ":", "\n", "            ", "gt_center", "=", "data", ".", "center_label", "[", ":", ",", ":", ",", "0", ":", "3", "]", "\n", "obj_mask", "=", "self", ".", "input", ".", "box_label_mask", "\n", "", "else", ":", "\n", "            ", "gt_center", "=", "data", ".", "center_label", "[", ":", ",", "0", ":", "3", "]", ".", "view", "(", "(", "self", ".", "_n_batches", ",", "-", "1", ",", "3", ")", ")", "\n", "obj_mask", "=", "self", ".", "input", ".", "box_label_mask", ".", "view", "(", "(", "self", ".", "_n_batches", ",", "-", "1", ")", ")", "\n", "", "outputs", ".", "assign_objects", "(", "gt_center", ",", "obj_mask", ",", "self", ".", "loss_params", ".", "near_threshold", ",", "self", ".", "loss_params", ".", "far_threshold", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.object_detection.votenet2.VoteNet2._compute_losses": [[177, 195], ["torch_points3d.get_loss", "torch_points3d.get_loss.items", "votenet2.VoteNet2._weight_classes.to", "torch.is_tensor", "torch.nn.functional.nll_loss", "setattr"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.VoteNet.loss_helper.get_loss", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to"], ["", "def", "_compute_losses", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_weight_classes", "is", "not", "None", ":", "\n", "            ", "self", ".", "_weight_classes", "=", "self", ".", "_weight_classes", ".", "to", "(", "self", ".", "device", ")", "\n", "", "losses", "=", "votenet_module", ".", "get_loss", "(", "self", ".", "input", ",", "self", ".", "output", ",", "self", ".", "loss_params", ",", "weight_classes", "=", "self", ".", "_weight_classes", ")", "\n", "for", "loss_name", ",", "loss", "in", "losses", ".", "items", "(", ")", ":", "\n", "            ", "if", "torch", ".", "is_tensor", "(", "loss", ")", ":", "\n", "                ", "if", "not", "self", ".", "losses_has_been_added", ":", "\n", "                    ", "self", ".", "loss_names", "+=", "[", "loss_name", "]", "\n", "", "setattr", "(", "self", ",", "loss_name", ",", "loss", ")", "\n", "\n", "", "", "if", "self", ".", "semantic_logits", "is", "not", "None", ":", "\n", "            ", "if", "not", "self", ".", "losses_has_been_added", ":", "\n", "                ", "self", ".", "loss_names", "+=", "[", "\"semantic_loss\"", "]", "\n", "", "self", ".", "semantic_loss", "=", "torch", ".", "nn", ".", "functional", ".", "nll_loss", "(", "\n", "self", ".", "semantic_logits", ",", "self", ".", "semantic_labels", ",", "ignore_index", "=", "IGNORE_LABEL", "\n", ")", "\n", "self", ".", "loss", "+=", "10", "*", "self", ".", "semantic_loss", "\n", "", "self", ".", "losses_has_been_added", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.object_detection.votenet2.VoteNet2.get_spatial_ops": [[196, 198], ["votenet2.VoteNet2.backbone_model.get_spatial_ops"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.get_spatial_ops"], ["", "def", "get_spatial_ops", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "backbone_model", ".", "get_spatial_ops", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.object_detection.votenet2.VoteNet2._dump_visuals": [[199, 222], ["votenet2.VoteNet2.output.get_boxes", "range", "torch_geometric.data.Data", "torch.save", "hasattr", "len", "gt_boxes.append", "os.path.exists", "os.mkdir", "torch_geometric.data.Data.to", "torch_points3d.datasets.object_detection.box_data.BoxData", "sample_labels[].item", "range", "len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.VoteNet.votenet_results.VoteNetResults.get_boxes", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "def", "_dump_visuals", "(", "self", ")", ":", "\n", "        ", "if", "True", ":", "\n", "            ", "return", "\n", "", "if", "not", "hasattr", "(", "self", ",", "\"visual_count\"", ")", ":", "\n", "            ", "self", ".", "visual_count", "=", "0", "\n", "\n", "", "pred_boxes", "=", "self", ".", "output", ".", "get_boxes", "(", "self", ".", "_dataset", ",", "apply_nms", "=", "True", ")", "\n", "gt_boxes", "=", "[", "]", "\n", "\n", "for", "idx", "in", "range", "(", "len", "(", "pred_boxes", ")", ")", ":", "\n", "# Ground truth", "\n", "            ", "sample_boxes", "=", "self", ".", "input", ".", "instance_box_corners", "[", "idx", "]", "\n", "sample_boxes", "=", "sample_boxes", "[", "self", ".", "input", ".", "box_label_mask", "[", "idx", "]", "]", "\n", "sample_labels", "=", "self", ".", "input", ".", "sem_cls_label", "[", "idx", "]", "\n", "gt_box_data", "=", "[", "BoxData", "(", "sample_labels", "[", "i", "]", ".", "item", "(", ")", ",", "sample_boxes", "[", "i", "]", ")", "for", "i", "in", "range", "(", "len", "(", "sample_boxes", ")", ")", "]", "\n", "gt_boxes", ".", "append", "(", "gt_box_data", ")", "\n", "\n", "", "data_visual", "=", "Data", "(", "pos", "=", "self", ".", "input", ".", "pos", ",", "batch", "=", "self", ".", "input", ".", "batch", ",", "gt_boxes", "=", "gt_boxes", ",", "pred_boxes", "=", "pred_boxes", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "\"viz\"", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "\"viz\"", ")", "\n", "", "torch", ".", "save", "(", "data_visual", ".", "to", "(", "\"cpu\"", ")", ",", "\"viz/data_%i.pt\"", "%", "(", "self", ".", "visual_count", ")", ")", "\n", "self", ".", "visual_count", "+=", "1", "\n", "", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.object_detection.votenet.VoteNetModel.__init__": [[34, 82], ["torch_points3d.models.base_model.BaseModel.__init__", "getattr", "getattr.", "getattr", "getattr.", "getattr", "getattr.", "isinstance", "isinstance", "mean_size_arr.tolist.tolist.numpy().tolist", "mean_size_arr.tolist.tolist.tolist", "mean_size_arr.tolist.tolist.numpy"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["def", "__init__", "(", "self", ",", "option", ",", "model_type", ",", "dataset", ",", "modules", ")", ":", "\n", "        ", "\"\"\"Initialize this model class.\n        Parameters:\n            opt -- training/test options\n        A few things can be done here.\n        - (required) call the initialization function of BaseModel\n        - define loss function, visualization images, model names, and optimizers\n        \"\"\"", "\n", "super", "(", "VoteNetModel", ",", "self", ")", ".", "__init__", "(", "option", ")", "\n", "self", ".", "_dataset", "=", "dataset", "\n", "self", ".", "_weight_classes", "=", "dataset", ".", "weight_classes", "\n", "\n", "# 1 - CREATE BACKBONE MODEL", "\n", "input_nc", "=", "dataset", ".", "feature_dimension", "\n", "backbone_option", "=", "option", ".", "backbone", "\n", "backbone_cls", "=", "getattr", "(", "models", ",", "backbone_option", ".", "model_type", ")", "\n", "self", ".", "backbone_model", "=", "backbone_cls", "(", "architecture", "=", "\"unet\"", ",", "input_nc", "=", "input_nc", ",", "config", "=", "backbone_option", ")", "\n", "\n", "# 2 - CREATE VOTING MODEL", "\n", "voting_option", "=", "option", ".", "voting", "\n", "voting_cls", "=", "getattr", "(", "votenet_module", ",", "voting_option", ".", "module_name", ")", "\n", "self", ".", "voting_module", "=", "voting_cls", "(", "vote_factor", "=", "voting_option", ".", "vote_factor", ",", "seed_feature_dim", "=", "voting_option", ".", "feat_dim", ")", "\n", "\n", "# 3 - CREATE PROPOSAL MODULE", "\n", "num_classes", "=", "dataset", ".", "num_classes", "\n", "proposal_option", "=", "option", ".", "proposal", "\n", "proposal_cls", "=", "getattr", "(", "votenet_module", ",", "proposal_option", ".", "module_name", ")", "\n", "self", ".", "proposal_cls_module", "=", "proposal_cls", "(", "\n", "num_class", "=", "num_classes", ",", "\n", "vote_aggregation_config", "=", "proposal_option", ".", "vote_aggregation", ",", "\n", "num_heading_bin", "=", "proposal_option", ".", "num_heading_bin", ",", "\n", "mean_size_arr", "=", "dataset", ".", "mean_size_arr", ",", "\n", "num_proposal", "=", "proposal_option", ".", "num_proposal", ",", "\n", "sampling", "=", "proposal_option", ".", "sampling", ",", "\n", ")", "\n", "\n", "# Loss params", "\n", "self", ".", "loss_params", "=", "option", ".", "loss_params", "\n", "self", ".", "loss_params", ".", "num_heading_bin", "=", "proposal_option", ".", "num_heading_bin", "\n", "mean_size_arr", "=", "dataset", ".", "mean_size_arr", "\n", "if", "isinstance", "(", "mean_size_arr", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "mean_size_arr", "=", "mean_size_arr", ".", "numpy", "(", ")", ".", "tolist", "(", ")", "\n", "", "if", "isinstance", "(", "dataset", ".", "mean_size_arr", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "mean_size_arr", "=", "mean_size_arr", ".", "tolist", "(", ")", "\n", "", "self", ".", "loss_params", ".", "mean_size_arr", "=", "mean_size_arr", "\n", "\n", "self", ".", "losses_has_been_added", "=", "False", "\n", "self", ".", "loss_names", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.object_detection.votenet.VoteNetModel.set_input": [[83, 90], ["data.to"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to"], ["", "def", "set_input", "(", "self", ",", "data", ",", "device", ")", ":", "\n", "        ", "\"\"\"Unpack input data from the dataloader and perform necessary pre-processing steps.\n        Parameters:\n            input: a dictionary that contains the data itself and its metadata information.\n        \"\"\"", "\n", "# Forward through backbone model", "\n", "self", ".", "input", "=", "data", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.object_detection.votenet.VoteNetModel.forward": [[91, 111], ["votenet.VoteNetModel.backbone_model.forward", "votenet.VoteNetModel.voting_module", "setattr", "votenet.VoteNetModel.proposal_cls_module", "hasattr", "getattr", "votenet.VoteNetModel.output.assign_objects", "torch.no_grad", "votenet.VoteNetModel._dump_visuals"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.forward", "home.repos.pwc.inspect_result.drprojects_deepviewagg.VoteNet.votenet_results.VoteNetResults.assign_objects", "home.repos.pwc.inspect_result.drprojects_deepviewagg.panoptic.pointgroup.PointGroup._dump_visuals"], ["", "def", "forward", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Run forward pass. This will be called by both functions <optimize_parameters> and <test>.\"\"\"", "\n", "data_features", "=", "self", ".", "backbone_model", ".", "forward", "(", "self", ".", "input", ")", "\n", "data_votes", "=", "self", ".", "voting_module", "(", "data_features", ")", "\n", "\n", "sampling_id_key", "=", "\"sampling_id_0\"", "\n", "num_seeds", "=", "data_features", ".", "pos", ".", "shape", "[", "1", "]", "\n", "seed_inds", "=", "getattr", "(", "data_features", ",", "sampling_id_key", ",", "None", ")", "[", ":", ",", ":", "num_seeds", "]", "\n", "setattr", "(", "data_votes", ",", "\"seed_inds\"", ",", "seed_inds", ")", "# [B,num_seeds]", "\n", "outputs", ":", "votenet_module", ".", "VoteNetResults", "=", "self", ".", "proposal_cls_module", "(", "data_votes", ")", "\n", "\n", "# Set output", "\n", "self", ".", "output", "=", "outputs", "\n", "if", "hasattr", "(", "self", ".", "input", ",", "\"center_label\"", ")", ":", "\n", "            ", "gt_center", "=", "self", ".", "input", ".", "center_label", "[", ":", ",", ":", ",", "0", ":", "3", "]", "\n", "self", ".", "output", ".", "assign_objects", "(", "\n", "gt_center", ",", "self", ".", "input", ".", "box_label_mask", ",", "self", ".", "loss_params", ".", "near_threshold", ",", "self", ".", "loss_params", ".", "far_threshold", "\n", ")", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "_dump_visuals", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.object_detection.votenet.VoteNetModel._compute_losses": [[112, 122], ["torch_points3d.get_loss", "torch_points3d.get_loss.items", "votenet.VoteNetModel._weight_classes.to", "torch.is_tensor", "setattr"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.VoteNet.loss_helper.get_loss", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to"], ["", "", "def", "_compute_losses", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_weight_classes", "is", "not", "None", ":", "\n", "            ", "self", ".", "_weight_classes", "=", "self", ".", "_weight_classes", ".", "to", "(", "self", ".", "device", ")", "\n", "", "losses", "=", "votenet_module", ".", "get_loss", "(", "self", ".", "input", ",", "self", ".", "output", ",", "self", ".", "loss_params", ",", "weight_classes", "=", "self", ".", "_weight_classes", ")", "\n", "for", "loss_name", ",", "loss", "in", "losses", ".", "items", "(", ")", ":", "\n", "            ", "if", "torch", ".", "is_tensor", "(", "loss", ")", ":", "\n", "                ", "if", "not", "self", ".", "losses_has_been_added", ":", "\n", "                    ", "self", ".", "loss_names", "+=", "[", "loss_name", "]", "\n", "", "setattr", "(", "self", ",", "loss_name", ",", "loss", ")", "\n", "", "", "self", ".", "losses_has_been_added", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.object_detection.votenet.VoteNetModel._dump_visuals": [[123, 146], ["votenet.VoteNetModel.output.get_boxes", "range", "torch_geometric.data.Data", "torch.save", "hasattr", "len", "gt_boxes.append", "os.path.exists", "os.mkdir", "torch_geometric.data.Data.to", "torch_points3d.datasets.object_detection.box_data.BoxData", "sample_labels[].item", "range", "len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.VoteNet.votenet_results.VoteNetResults.get_boxes", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "def", "_dump_visuals", "(", "self", ")", ":", "\n", "        ", "if", "True", ":", "\n", "            ", "return", "\n", "", "if", "not", "hasattr", "(", "self", ",", "\"visual_count\"", ")", ":", "\n", "            ", "self", ".", "visual_count", "=", "0", "\n", "\n", "", "pred_boxes", "=", "self", ".", "output", ".", "get_boxes", "(", "self", ".", "_dataset", ",", "apply_nms", "=", "True", ")", "\n", "gt_boxes", "=", "[", "]", "\n", "\n", "for", "idx", "in", "range", "(", "len", "(", "pred_boxes", ")", ")", ":", "\n", "# Ground truth", "\n", "            ", "sample_boxes", "=", "self", ".", "input", ".", "instance_box_corners", "[", "idx", "]", "\n", "sample_boxes", "=", "sample_boxes", "[", "self", ".", "input", ".", "box_label_mask", "[", "idx", "]", "]", "\n", "sample_labels", "=", "self", ".", "input", ".", "sem_cls_label", "[", "idx", "]", "\n", "gt_box_data", "=", "[", "BoxData", "(", "sample_labels", "[", "i", "]", ".", "item", "(", ")", ",", "sample_boxes", "[", "i", "]", ")", "for", "i", "in", "range", "(", "len", "(", "sample_boxes", ")", ")", "]", "\n", "gt_boxes", ".", "append", "(", "gt_box_data", ")", "\n", "\n", "", "data_visual", "=", "Data", "(", "pos", "=", "self", ".", "input", ".", "pos", ",", "batch", "=", "self", ".", "input", ".", "batch", ",", "gt_boxes", "=", "gt_boxes", ",", "pred_boxes", "=", "pred_boxes", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "\"viz\"", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "\"viz\"", ")", "\n", "", "torch", ".", "save", "(", "data_visual", ".", "to", "(", "\"cpu\"", ")", ",", "\"viz/data_%i.pt\"", "%", "(", "self", ".", "visual_count", ")", ")", "\n", "self", ".", "visual_count", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.object_detection.votenet.VoteNetModel.backward": [[147, 151], ["votenet.VoteNetModel._compute_losses", "votenet.VoteNetModel.loss.backward"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.object_detection.votenet.VoteNetModel._compute_losses", "home.repos.pwc.inspect_result.drprojects_deepviewagg.panoptic.pointgroup.PointGroup.backward"], ["", "def", "backward", "(", "self", ")", ":", "\n", "        ", "\"\"\"Calculate losses, gradients, and update network weights; called in every training iteration\"\"\"", "\n", "self", ".", "_compute_losses", "(", ")", "\n", "self", ".", "loss", ".", "backward", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base_siamese_dataset.BaseSiameseDataset.__init__": [[28, 40], ["torch_points3d.datasets.base_dataset.BaseDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dataset_opt", ")", ":", "\n", "        ", "\"\"\"\n        base dataset for siamese inputs\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "dataset_opt", ")", "\n", "self", ".", "num_points", "=", "dataset_opt", ".", "num_points", "\n", "self", ".", "tau_1", "=", "dataset_opt", ".", "tau_1", "\n", "self", ".", "tau_2", "=", "dataset_opt", ".", "tau_2", "\n", "self", ".", "trans_thresh", "=", "dataset_opt", ".", "trans_thresh", "\n", "self", ".", "rot_thresh", "=", "dataset_opt", ".", "rot_thresh", "\n", "self", ".", "is_patch", "=", "False", "\n", "self", ".", "is_end2end", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base_siamese_dataset.BaseSiameseDataset._get_collate_function": [[41, 57], ["torch_points3d.utils.config.ConvolutionFormatFactory.check_is_dense_format", "functools.partial", "conv_type.lower", "torch_points3d.utils.enums.ConvolutionFormat.PARTIAL_DENSE.value.lower", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.config.ConvolutionFormatFactory.check_is_dense_format"], ["", "@", "staticmethod", "\n", "def", "_get_collate_function", "(", "conv_type", ",", "is_multiscale", ",", "pre_collate_transform", "=", "None", ")", ":", "\n", "        ", "is_dense", "=", "ConvolutionFormatFactory", ".", "check_is_dense_format", "(", "conv_type", ")", "\n", "if", "is_multiscale", ":", "\n", "            ", "if", "conv_type", ".", "lower", "(", ")", "==", "ConvolutionFormat", ".", "PARTIAL_DENSE", ".", "value", ".", "lower", "(", ")", ":", "\n", "                ", "fn", "=", "PairMultiScaleBatch", ".", "from_data_list", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", "\n", "\"MultiscaleTransform is activated and supported only for partial_dense format\"", "\n", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "is_dense", ":", "\n", "                ", "fn", "=", "DensePairBatch", ".", "from_data_list", "\n", "", "else", ":", "\n", "                ", "fn", "=", "PairBatch", ".", "from_data_list", "\n", "", "", "return", "partial", "(", "BaseDataset", ".", "_collate_fn", ",", "collate_fn", "=", "fn", ",", "pre_collate_transform", "=", "pre_collate_transform", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base_siamese_dataset.BaseSiameseDataset.get_tracker": [[58, 82], ["torch_points3d.metrics.registration_tracker.PatchRegistrationTracker", "NotImplementedError", "torch_points3d.metrics.registration_tracker.FragmentRegistrationTracker"], "methods", ["None"], ["", "def", "get_tracker", "(", "self", ",", "wandb_log", ":", "bool", ",", "tensorboard_log", ":", "bool", ")", ":", "\n", "        ", "\"\"\"\n        Factory method for the tracker\n\n        Arguments:\n            wandb_log - Log using weight and biases\n            tensorboard_log - Log using tensorboard\n        Returns:\n            [BaseTracker] -- tracker\n        \"\"\"", "\n", "if", "self", ".", "is_patch", ":", "\n", "            ", "return", "PatchRegistrationTracker", "(", "self", ",", "wandb_log", "=", "wandb_log", ",", "use_tensorboard", "=", "tensorboard_log", ")", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "is_end2end", ":", "\n", "                ", "raise", "NotImplementedError", "(", "\"implement end2end tracker\"", ")", "\n", "", "else", ":", "\n", "                ", "return", "FragmentRegistrationTracker", "(", "\n", "num_points", "=", "self", ".", "num_points", ",", "\n", "tau_1", "=", "self", ".", "tau_1", ",", "\n", "tau_2", "=", "self", ".", "tau_2", ",", "\n", "rot_thresh", "=", "self", ".", "rot_thresh", ",", "\n", "trans_thresh", "=", "self", ".", "trans_thresh", ",", "\n", "wandb_log", "=", "wandb_log", ",", "\n", "use_tensorboard", "=", "tensorboard_log", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base_siamese_dataset.GeneralFragment.get_raw_pair": [[91, 110], ["numpy.load().item", "torch.load().to", "torch.load().to", "torch.from_numpy", "base_siamese_dataset.GeneralFragment.unsupervised_preprocess", "numpy.load", "random.random", "torch.load().to", "torch.load().to", "torch.load().to", "torch.load().to", "os.join", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base_siamese_dataset.GeneralFragment.unsupervised_preprocess", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load"], ["def", "get_raw_pair", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\"\n        get the pair before the data augmentation\n        \"\"\"", "\n", "match", "=", "np", ".", "load", "(", "osp", ".", "join", "(", "self", ".", "path_match", ",", "\"matches{:06d}.npy\"", ".", "format", "(", "idx", ")", ")", ",", "allow_pickle", "=", "True", ")", ".", "item", "(", ")", "\n", "if", "not", "self", ".", "self_supervised", ":", "\n", "            ", "data_source", "=", "torch", ".", "load", "(", "match", "[", "\"path_source\"", "]", ")", ".", "to", "(", "torch", ".", "float", ")", "\n", "data_target", "=", "torch", ".", "load", "(", "match", "[", "\"path_target\"", "]", ")", ".", "to", "(", "torch", ".", "float", ")", "\n", "new_pair", "=", "torch", ".", "from_numpy", "(", "match", "[", "\"pair\"", "]", ")", "\n", "", "else", ":", "\n", "            ", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "                ", "data_source_o", "=", "torch", ".", "load", "(", "match", "[", "\"path_source\"", "]", ")", ".", "to", "(", "torch", ".", "float", ")", "\n", "data_target_o", "=", "torch", ".", "load", "(", "match", "[", "\"path_source\"", "]", ")", ".", "to", "(", "torch", ".", "float", ")", "\n", "", "else", ":", "\n", "                ", "data_source_o", "=", "torch", ".", "load", "(", "match", "[", "\"path_target\"", "]", ")", ".", "to", "(", "torch", ".", "float", ")", "\n", "data_target_o", "=", "torch", ".", "load", "(", "match", "[", "\"path_target\"", "]", ")", ".", "to", "(", "torch", ".", "float", ")", "\n", "", "data_source", ",", "data_target", ",", "new_pair", "=", "self", ".", "unsupervised_preprocess", "(", "data_source_o", ",", "data_target_o", ")", "\n", "\n", "", "return", "data_source", ",", "data_target", ",", "new_pair", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base_siamese_dataset.GeneralFragment.unsupervised_preprocess": [[111, 141], ["torch.randint", "pos[].view", "torch_points_kernels.points_cpu.ball_query", "ind[].t", "torch_points_kernels.points_cpu.ball_query", "ind_t[].t", "len", "numpy.random.randint", "numpy.random.randint", "t1", "t2", "len", "torch.stack", "len", "len", "data_source_o.clone", "data_target_o.clone", "random.random"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.clone", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.clone"], ["", "def", "unsupervised_preprocess", "(", "self", ",", "data_source_o", ",", "data_target_o", ")", ":", "\n", "        ", "\"\"\"\n        same pairs for self supervised learning\n        \"\"\"", "\n", "len_col", "=", "0", "\n", "\n", "while", "len_col", "<", "self", ".", "min_points", ":", "\n", "# choose only one data augmentation randomly in the ss_transform (usually a crop)", "\n", "            ", "if", "self", ".", "ss_transform", "is", "not", "None", ":", "\n", "                ", "n1", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "ss_transform", ".", "transforms", ")", ")", "\n", "t1", "=", "self", ".", "ss_transform", ".", "transforms", "[", "n1", "]", "\n", "n2", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "ss_transform", ".", "transforms", ")", ")", "\n", "t2", "=", "self", ".", "ss_transform", ".", "transforms", "[", "n2", "]", "\n", "data_source", "=", "t1", "(", "data_source_o", ".", "clone", "(", ")", ")", "\n", "data_target", "=", "t2", "(", "data_target_o", ".", "clone", "(", ")", ")", "\n", "", "else", ":", "\n", "                ", "data_source", "=", "data_source_o", "\n", "data_target", "=", "data_target_o", "\n", "", "pos", "=", "data_source", ".", "pos", "\n", "i", "=", "torch", ".", "randint", "(", "0", ",", "len", "(", "pos", ")", ",", "(", "1", ",", ")", ")", "\n", "size_block", "=", "random", ".", "random", "(", ")", "*", "(", "self", ".", "max_size_block", "-", "self", ".", "min_size_block", ")", "+", "self", ".", "min_size_block", "\n", "point", "=", "pos", "[", "i", "]", ".", "view", "(", "1", ",", "3", ")", "\n", "ind", ",", "dist", "=", "ball_query", "(", "point", ",", "pos", ",", "radius", "=", "size_block", ",", "max_num", "=", "-", "1", ",", "mode", "=", "1", ")", "\n", "_", ",", "col", "=", "ind", "[", "dist", "[", ":", ",", "0", "]", ">", "0", "]", ".", "t", "(", ")", "\n", "ind_t", ",", "dist_t", "=", "ball_query", "(", "data_target", ".", "pos", ",", "pos", "[", "col", "]", ",", "radius", "=", "self", ".", "max_dist_overlap", ",", "max_num", "=", "1", ",", "mode", "=", "1", ")", "\n", "col_target", ",", "ind_col", "=", "ind_t", "[", "dist_t", "[", ":", ",", "0", "]", ">", "0", "]", ".", "t", "(", ")", "\n", "col", "=", "col", "[", "ind_col", "]", "\n", "new_pair", "=", "torch", ".", "stack", "(", "(", "col", ",", "col_target", ")", ")", ".", "T", "\n", "len_col", "=", "len", "(", "new_pair", ")", "\n", "", "return", "data_source", ",", "data_target", ",", "new_pair", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base_siamese_dataset.GeneralFragment.get_fragment": [[142, 175], ["base_siamese_dataset.GeneralFragment.get_raw_pair", "hasattr", "len", "torch.tensor", "torch_points3d.datasets.registration.pair.Pair.make_pair.contiguous", "base_siamese_dataset.GeneralFragment.transform", "base_siamese_dataset.GeneralFragment.transform", "torch_points3d.datasets.registration.pair.MultiScalePair.make_pair", "torch_points3d.datasets.registration.pair.Pair.make_pair", "torch_points3d.datasets.registration.utils.compute_overlap_and_matches", "torch.from_numpy", "torch_points3d.datasets.registration.utils.tracked_matches", "len", "torch_points3d.datasets.registration.utils.fps_sampling", "len", "log.warning", "torch_geometric.data.Data", "torch_geometric.data.Data", "new_match[].copy", "torch.randperm", "float", "len", "len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.basetest.BasePCRBTest.get_raw_pair", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.pair.Pair.make_pair", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.pair.Pair.make_pair", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.compute_overlap_and_matches", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.tracked_matches", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.fps_sampling", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "def", "get_fragment", "(", "self", ",", "idx", ")", ":", "\n", "\n", "        ", "data_source", ",", "data_target", ",", "new_pair", "=", "self", ".", "get_raw_pair", "(", "idx", ")", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "data_source", "=", "self", ".", "transform", "(", "data_source", ")", "\n", "data_target", "=", "self", ".", "transform", "(", "data_target", ")", "\n", "", "if", "hasattr", "(", "data_source", ",", "\"multiscale\"", ")", ":", "\n", "            ", "batch", "=", "MultiScalePair", ".", "make_pair", "(", "data_source", ",", "data_target", ")", "\n", "", "else", ":", "\n", "            ", "batch", "=", "Pair", ".", "make_pair", "(", "data_source", ",", "data_target", ")", "\n", "", "if", "self", ".", "is_online_matching", ":", "\n", "            ", "new_match", "=", "compute_overlap_and_matches", "(", "\n", "Data", "(", "pos", "=", "data_source", ".", "pos", ")", ",", "Data", "(", "pos", "=", "data_target", ".", "pos", ")", ",", "self", ".", "max_dist_overlap", "\n", ")", "\n", "batch", ".", "pair_ind", "=", "torch", ".", "from_numpy", "(", "new_match", "[", "\"pair\"", "]", ".", "copy", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "pair", "=", "tracked_matches", "(", "data_source", ",", "data_target", ",", "new_pair", ")", "\n", "batch", ".", "pair_ind", "=", "pair", "\n", "\n", "", "num_pos_pairs", "=", "len", "(", "batch", ".", "pair_ind", ")", "\n", "if", "self", ".", "num_pos_pairs", "<", "len", "(", "batch", ".", "pair_ind", ")", ":", "\n", "            ", "num_pos_pairs", "=", "self", ".", "num_pos_pairs", "\n", "\n", "", "if", "not", "self", ".", "use_fps", "or", "(", "float", "(", "num_pos_pairs", ")", "/", "len", "(", "batch", ".", "pair_ind", ")", ">=", "1", ")", ":", "\n", "            ", "rand_ind", "=", "torch", ".", "randperm", "(", "len", "(", "batch", ".", "pair_ind", ")", ")", "[", ":", "num_pos_pairs", "]", "\n", "", "else", ":", "\n", "            ", "rand_ind", "=", "fps_sampling", "(", "batch", ".", "pair_ind", ",", "batch", ".", "pos", ",", "num_pos_pairs", ")", "\n", "", "batch", ".", "pair_ind", "=", "batch", ".", "pair_ind", "[", "rand_ind", "]", "\n", "batch", ".", "size_pair_ind", "=", "torch", ".", "tensor", "(", "[", "num_pos_pairs", "]", ")", "\n", "if", "len", "(", "batch", ".", "pair_ind", ")", "==", "0", ":", "\n", "            ", "log", ".", "warning", "(", "\"Warning\"", ")", "\n", "", "return", "batch", ".", "contiguous", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base_siamese_dataset.GeneralFragment.get_name": [[176, 186], ["numpy.load().item", "numpy.load", "os.join"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load"], ["", "def", "get_name", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\"\n        get the name of the scene and the name of the fragments.\n        \"\"\"", "\n", "\n", "match", "=", "np", ".", "load", "(", "osp", ".", "join", "(", "self", ".", "path_match", ",", "\"matches{:06d}.npy\"", ".", "format", "(", "idx", ")", ")", ",", "allow_pickle", "=", "True", ")", ".", "item", "(", ")", "\n", "source", "=", "match", "[", "\"name_source\"", "]", "\n", "target", "=", "match", "[", "\"name_target\"", "]", "\n", "scene", "=", "match", "[", "\"scene\"", "]", "\n", "return", "scene", ",", "source", ",", "target", "\n", "", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base_kitti.BaseKitti.__init__": [[78, 101], ["torch_geometric.data.Dataset.__init__", "base_kitti.BaseKitti.dict_seq.keys", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.mock.MockDatasetConfig.keys"], ["def", "__init__", "(", "\n", "self", ",", "\n", "root", ",", "\n", "mode", "=", "\"train\"", ",", "\n", "max_dist_overlap", "=", "0.01", ",", "\n", "max_time_distance", "=", "3", ",", "\n", "min_dist", "=", "10", ",", "\n", "transform", "=", "None", ",", "\n", "pre_transform", "=", "None", ",", "\n", "pre_filter", "=", "None", ",", "\n", ")", ":", "\n", "\n", "        ", "\"\"\"\n        KITTI Odometry dataset for pair registration\n        \"\"\"", "\n", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "max_dist_overlap", "=", "max_dist_overlap", "\n", "self", ".", "max_time_distance", "=", "max_time_distance", "\n", "self", ".", "min_dist", "=", "min_dist", "\n", "if", "mode", "not", "in", "self", ".", "dict_seq", ".", "keys", "(", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"this mode {} does \"", "\"not exist\"", "\"(train|val|test)\"", ".", "format", "(", "mode", ")", ")", "\n", "", "super", "(", "BaseKitti", ",", "self", ")", ".", "__init__", "(", "root", ",", "transform", ",", "pre_transform", ",", "pre_filter", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base_kitti.BaseKitti.raw_file_names": [[102, 105], ["os.join", "os.join", "os.join", "os.join", "os.join", "os.join"], "methods", ["None"], ["", "@", "property", "\n", "def", "raw_file_names", "(", "self", ")", ":", "\n", "        ", "return", "[", "osp", ".", "join", "(", "\"dataset\"", ",", "\"poses\"", ")", ",", "osp", ".", "join", "(", "\"dataset\"", ",", "\"refined_poses\"", ")", ",", "osp", ".", "join", "(", "\"dataset\"", ",", "\"sequences\"", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base_kitti.BaseKitti.processed_file_names": [[106, 110], ["os.join", "os.join", "os.join", "os.join"], "methods", ["None"], ["", "@", "property", "\n", "def", "processed_file_names", "(", "self", ")", ":", "\n", "        ", "res", "=", "[", "osp", ".", "join", "(", "self", ".", "mode", ",", "\"matches\"", ")", ",", "osp", ".", "join", "(", "self", ".", "mode", ",", "\"fragment\"", ")", "]", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base_kitti.BaseKitti.download": [[111, 148], ["log.info", "log.info", "log.info", "log.info", "log.info", "log.info", "log.info"], "methods", ["None"], ["", "def", "download", "(", "self", ")", ":", "\n", "        ", "log", ".", "info", "(", "\"WARNING: You need to first download the kitti dataset (velodyne laser data) on this website\"", ")", "\n", "log", ".", "info", "(", "\"http://www.cvlibs.net/datasets/kitti/eval_odometry.php\"", ")", "\n", "log", ".", "info", "(", "\"you also need to download the refined pose here\"", ")", "\n", "log", ".", "info", "(", "\"https://cloud.mines-paristech.fr/index.php/s/1t1CdXxv4i2v1zC\"", ")", "\n", "log", ".", "info", "(", "\"WARNING: \"", ")", "\n", "log", ".", "info", "(", "\"the tree should look like this:\"", ")", "\n", "log", ".", "info", "(", "\n", "\"\"\"\n        raw\n        \u251c\u2500\u2500 dataset\n        \u2502\u00a0\u00a0 \u251c\u2500\u2500 refined_poses\n        \u2502\u00a0\u00a0 \u2514\u2500\u2500 sequences\n        \u2502\u00a0\u00a0     \u251c\u2500\u2500 00\n        \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 velodyne\n        \u2502\u00a0\u00a0     \u251c\u2500\u2500 01\n        \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 velodyne\n        \u2502\u00a0\u00a0     \u251c\u2500\u2500 02\n        \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 velodyne\n        \u2502\u00a0\u00a0     \u251c\u2500\u2500 03\n        \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 velodyne\n        \u2502\u00a0\u00a0     \u251c\u2500\u2500 04\n        \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 velodyne\n        \u2502\u00a0\u00a0     \u251c\u2500\u2500 05\n        \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 velodyne\n        \u2502\u00a0\u00a0     \u251c\u2500\u2500 06\n        \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 velodyne\n        \u2502\u00a0\u00a0     \u251c\u2500\u2500 07\n        \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 velodyne\n        \u2502\u00a0\u00a0     \u251c\u2500\u2500 08\n        \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 velodyne\n        \u2502\u00a0\u00a0     \u251c\u2500\u2500 09\n        \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 velodyne\n        \u2502\u00a0\u00a0     \u251c\u2500\u2500 10\n        \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 velodyne\n\n        \"\"\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base_kitti.BaseKitti._pre_transform_fragment": [[150, 186], ["torch_points3d.datasets.registration.utils.files_exist", "os.join", "os.join", "os.join", "os.join", "torch_points3d.datasets.registration.utils.makedirs", "os.join", "os.join", "base_kitti.read_calib_file", "numpy.genfromtxt", "sorted", "enumerate", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "all_poses[].reshape", "numpy.fromfile().reshape", "torch_geometric.data.Data", "os.join", "os.join", "torch.save", "xyzr[].dot", "xyzr[].dot", "pose[].dot", "base_kitti.BaseKitti.pre_transform", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "numpy.fromfile", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "os.join", "os.join", "name.split"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.files_exist", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.makedirs", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base_kitti.read_calib_file", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.split"], ["", "def", "_pre_transform_fragment", "(", "self", ",", "mod", ")", ":", "\n", "        ", "\"\"\"\n        read raw fragment, rotate the raw fragment using the calibration and the given pose,\n        pre transform raw_fragment and save it into fragments\n        \"\"\"", "\n", "\n", "if", "files_exist", "(", "[", "osp", ".", "join", "(", "self", ".", "processed_dir", ",", "mod", ",", "\"fragment\"", ")", "]", ")", ":", "# pragma: no cover", "\n", "            ", "return", "\n", "\n", "", "in_dir", "=", "osp", ".", "join", "(", "self", ".", "raw_dir", ",", "\"dataset\"", ")", "\n", "list_drive", "=", "self", ".", "dict_seq", "[", "mod", "]", "\n", "\n", "for", "drive", "in", "list_drive", ":", "\n", "            ", "out_dir", "=", "osp", ".", "join", "(", "self", ".", "processed_dir", ",", "mod", ",", "\"fragment\"", ",", "\"{:02d}\"", ".", "format", "(", "drive", ")", ")", "\n", "makedirs", "(", "out_dir", ")", "\n", "path_frames", "=", "osp", ".", "join", "(", "in_dir", ",", "\"sequences\"", ",", "\"{:02d}\"", ".", "format", "(", "drive", ")", ",", "\"velodyne\"", ")", "\n", "T_calib", "=", "read_calib_file", "(", "osp", ".", "join", "(", "in_dir", ",", "\"sequences\"", ",", "\"{:02d}\"", ".", "format", "(", "drive", ")", ",", "\"calib.txt\"", ")", ")", "\n", "all_poses", "=", "np", ".", "genfromtxt", "(", "osp", ".", "join", "(", "in_dir", ",", "\"refined_poses\"", ",", "\"{:02d}.txt\"", ".", "format", "(", "drive", ")", ")", ")", "\n", "list_name_frames", "=", "sorted", "(", "[", "f", "for", "f", "in", "os", ".", "listdir", "(", "path_frames", ")", "if", "\"bin\"", "in", "f", "]", ")", "\n", "for", "i", ",", "name", "in", "enumerate", "(", "list_name_frames", ")", ":", "\n", "\n", "                ", "pose", "=", "all_poses", "[", "i", "]", ".", "reshape", "(", "(", "3", ",", "4", ")", ")", "\n", "xyzr", "=", "np", ".", "fromfile", "(", "osp", ".", "join", "(", "path_frames", ",", "name", ")", ",", "dtype", "=", "np", ".", "float32", ")", ".", "reshape", "(", "(", "-", "1", ",", "4", ")", ")", "\n", "xyzr", "[", ":", ",", ":", "3", "]", "=", "xyzr", "[", ":", ",", ":", "3", "]", ".", "dot", "(", "T_calib", "[", ":", "3", ",", ":", "3", "]", ".", "T", ")", "+", "T_calib", "[", ":", "3", ",", "3", "]", "\n", "xyzr", "[", ":", ",", ":", "3", "]", "=", "xyzr", "[", ":", ",", ":", "3", "]", ".", "dot", "(", "pose", "[", ":", "3", ",", ":", "3", "]", ".", "T", ")", "+", "pose", "[", ":", "3", ",", "3", "]", "\n", "# store position of the car to filter some frames", "\n", "pos_sensor", "=", "pose", "[", ":", "3", ",", ":", "3", "]", ".", "dot", "(", "T_calib", "[", ":", "3", ",", "3", "]", ")", "+", "pose", "[", ":", "3", ",", "3", "]", "\n", "data", "=", "Data", "(", "\n", "pos", "=", "torch", ".", "from_numpy", "(", "xyzr", "[", ":", ",", ":", "3", "]", ")", ",", "\n", "reflectance", "=", "torch", ".", "from_numpy", "(", "xyzr", "[", ":", ",", "3", "]", ")", ",", "\n", "pos_sensor", "=", "torch", ".", "from_numpy", "(", "pos_sensor", ")", ",", "\n", ")", "\n", "out_path", "=", "osp", ".", "join", "(", "out_dir", ",", "name", ".", "split", "(", "\".\"", ")", "[", "0", "]", "+", "\".pt\"", ")", "\n", "if", "self", ".", "pre_transform", "is", "not", "None", ":", "\n", "                    ", "data", "=", "self", ".", "pre_transform", "(", "data", ")", "\n", "", "torch", ".", "save", "(", "data", ",", "out_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base_kitti.BaseKitti._compute_matches_between_fragments": [[187, 224], ["os.join", "os.join", "torch_points3d.datasets.registration.utils.files_exist", "torch_points3d.datasets.registration.utils.makedirs", "os.join", "os.join", "sorted", "log.info", "log.info", "base_kitti.compute_spaced_time_frame", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "torch.load", "torch.load", "torch_points3d.datasets.registration.utils.compute_overlap_and_matches", "numpy.save", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "range", "range", "len", "len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.files_exist", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.makedirs", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base_kitti.compute_spaced_time_frame", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.compute_overlap_and_matches", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "", "", "def", "_compute_matches_between_fragments", "(", "self", ",", "mod", ")", ":", "\n", "        ", "out_dir", "=", "osp", ".", "join", "(", "self", ".", "processed_dir", ",", "mod", ",", "\"matches\"", ")", "\n", "if", "files_exist", "(", "[", "out_dir", "]", ")", ":", "# pragma: no cover", "\n", "            ", "return", "\n", "", "makedirs", "(", "out_dir", ")", "\n", "ind", "=", "0", "\n", "list_drive", "=", "self", ".", "dict_seq", "[", "mod", "]", "\n", "for", "drive", "in", "list_drive", ":", "\n", "            ", "path_fragment", "=", "osp", ".", "join", "(", "self", ".", "processed_dir", ",", "mod", ",", "\"fragment\"", ",", "\"{:02d}\"", ".", "format", "(", "drive", ")", ")", "\n", "list_name_frames", "=", "sorted", "(", "[", "f", "for", "f", "in", "os", ".", "listdir", "(", "path_fragment", ")", "if", "\"pt\"", "in", "f", "]", ")", "\n", "\n", "# pre_compute specific pair", "\n", "log", ".", "info", "(", "\"Compute the pairs\"", ")", "\n", "if", "self", ".", "min_dist", "is", "not", "None", ":", "\n", "                ", "pair_time_frame", "=", "compute_spaced_time_frame", "(", "list_name_frames", ",", "path_fragment", ",", "self", ".", "min_dist", ")", "\n", "", "else", ":", "\n", "                ", "pair_time_frame", "=", "[", "\n", "(", "i", ",", "j", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "list_name_frames", ")", ")", "\n", "for", "j", "in", "range", "(", "len", "(", "list_name_frames", ")", ")", "\n", "if", "(", "j", "-", "i", ")", ">", "0", "and", "(", "j", "-", "i", ")", "<", "self", ".", "max_time_distance", "\n", "]", "\n", "", "log", ".", "info", "(", "\"Compute the matches\"", ")", "\n", "for", "i", ",", "j", "in", "pair_time_frame", ":", "\n", "                ", "out_path", "=", "osp", ".", "join", "(", "out_dir", ",", "\"matches{:06d}.npy\"", ".", "format", "(", "ind", ")", ")", "\n", "path1", "=", "osp", ".", "join", "(", "path_fragment", ",", "list_name_frames", "[", "i", "]", ")", "\n", "path2", "=", "osp", ".", "join", "(", "path_fragment", ",", "list_name_frames", "[", "j", "]", ")", "\n", "data1", "=", "torch", ".", "load", "(", "path1", ")", "\n", "data2", "=", "torch", ".", "load", "(", "path2", ")", "\n", "match", "=", "compute_overlap_and_matches", "(", "data1", ",", "data2", ",", "self", ".", "max_dist_overlap", ")", "\n", "match", "[", "\"path_source\"", "]", "=", "path1", "\n", "match", "[", "\"path_target\"", "]", "=", "path2", "\n", "match", "[", "\"name_source\"", "]", "=", "i", "\n", "match", "[", "\"name_target\"", "]", "=", "j", "\n", "match", "[", "\"scene\"", "]", "=", "drive", "\n", "np", ".", "save", "(", "out_path", ",", "match", ")", "\n", "ind", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base_kitti.BaseKitti.process": [[225, 230], ["log.info", "base_kitti.BaseKitti._pre_transform_fragment", "log.info", "base_kitti.BaseKitti._compute_matches_between_fragments"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch._pre_transform_fragment", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.basetest.BasePCRBTest._compute_matches_between_fragments"], ["", "", "", "def", "process", "(", "self", ")", ":", "\n", "        ", "log", ".", "info", "(", "\"pre_transform those fragments\"", ")", "\n", "self", ".", "_pre_transform_fragment", "(", "self", ".", "mode", ")", "\n", "log", ".", "info", "(", "\"compute matches\"", ")", "\n", "self", ".", "_compute_matches_between_fragments", "(", "self", ".", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base_kitti.BaseKitti.get": [[231, 233], ["NotImplementedError"], "methods", ["None"], ["", "def", "get", "(", "self", ",", "idx", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"implement class to get patch or fragment or more\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base_kitti.BaseKitti.__getitem__": [[234, 243], ["base_kitti.BaseKitti.get"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "r\"\"\"Gets the data object at index :obj:`idx` and transforms it (in case\n        a :obj:`self.transform` is given).\n        In case :obj:`idx` is a slicing object, *e.g.*, :obj:`[2:5]`, a list, a\n        tuple, a  LongTensor or a BoolTensor, will return a subset of the\n        dataset at the specified indices.\"\"\"", "\n", "\n", "data", "=", "self", ".", "get", "(", "idx", ")", "\n", "return", "data", "\n", "", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base_kitti.read_calib_file": [[26, 44], ["numpy.reshape", "numpy.vstack", "open", "f.readlines", "line.split", "numpy.array", "float", "value.split"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.split", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.split"], ["def", "read_calib_file", "(", "filepath", ")", ":", "\n", "    ", "\"\"\"Read in a calibration file and parse into a dictionary.\"\"\"", "\n", "filedata", "=", "{", "}", "\n", "\n", "with", "open", "(", "filepath", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "\n", "            ", "key", ",", "value", "=", "line", ".", "split", "(", "\":\"", ",", "1", ")", "\n", "# The only non-float values in these files are dates, which", "\n", "# we don't care about anyway", "\n", "try", ":", "\n", "                ", "filedata", "[", "key", "]", "=", "np", ".", "array", "(", "[", "float", "(", "x", ")", "for", "x", "in", "value", ".", "split", "(", ")", "]", ")", "\n", "", "except", "ValueError", ":", "\n", "                ", "pass", "\n", "\n", "", "", "", "T_calib", "=", "np", ".", "reshape", "(", "filedata", "[", "\"Tr\"", "]", ",", "(", "3", ",", "4", ")", ")", "\n", "T_calib", "=", "np", ".", "vstack", "(", "[", "T_calib", ",", "[", "0", ",", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "\n", "return", "T_calib", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base_kitti.compute_spaced_time_frame": [[46, 70], ["torch.stack", "range", "torch.load", "torch.stack.append", "len", "os.join", "torch.where", "len", "list_pair.append", "candidates[].item", "torch.stack.unsqueeze", "torch.stack.unsqueeze"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append"], ["", "def", "compute_spaced_time_frame", "(", "list_name_frames", ",", "path", ",", "min_dist", ")", ":", "\n", "    ", "\"\"\"\n    compute spaced time frame to have different pairs.\n    Inspired by\n    \"\"\"", "\n", "list_pair", "=", "[", "]", "\n", "list_sensor_pos", "=", "[", "]", "\n", "for", "name", "in", "list_name_frames", ":", "\n", "        ", "data", "=", "torch", ".", "load", "(", "osp", ".", "join", "(", "path", ",", "name", ")", ")", "\n", "list_sensor_pos", ".", "append", "(", "data", ".", "pos_sensor", ")", "\n", "\n", "", "list_sensor_pos", "=", "torch", ".", "stack", "(", "list_sensor_pos", ")", "\n", "\n", "mask", "=", "(", "(", "list_sensor_pos", ".", "unsqueeze", "(", "0", ")", "-", "list_sensor_pos", ".", "unsqueeze", "(", "1", ")", ")", "**", "2", ")", ".", "sum", "(", "2", ")", ">", "(", "min_dist", "**", "2", ")", "\n", "curr_ind", "=", "0", "\n", "\n", "for", "curr_ind", "in", "range", "(", "len", "(", "list_name_frames", ")", ")", ":", "\n", "        ", "candidates", "=", "torch", ".", "where", "(", "mask", "[", "curr_ind", ",", "curr_ind", ":", "curr_ind", "+", "100", "]", ")", "[", "0", "]", "\n", "if", "len", "(", "candidates", ")", ">", "0", ":", "\n", "            ", "new_ind", "=", "curr_ind", "+", "candidates", "[", "0", "]", ".", "item", "(", ")", "\n", "list_pair", ".", "append", "(", "(", "curr_ind", ",", "new_ind", ")", ")", "\n", "", "else", ":", "\n", "            ", "continue", "\n", "", "", "return", "list_pair", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.test3dmatch.Test3DMatch.__init__": [[19, 42], ["torch_points3d.datasets.registration.basetest.Base3DMatchTest.__init__", "torch_points3d.datasets.registration.utils.PatchExtractor", "os.join", "os.join", "open", "json.load", "os.join", "os.join"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load"], ["    ", "def", "__init__", "(", "self", ",", "\n", "root", ",", "\n", "radius_patch", "=", "0.3", ",", "\n", "pre_transform", "=", "None", ",", "\n", "pre_filter", "=", "None", ",", "\n", "transform", "=", "None", ",", "\n", "verbose", "=", "False", ",", "\n", "debug", "=", "False", ",", "\n", "num_random_pt", "=", "5000", ",", "\n", "max_dist_overlap", "=", "0.01", ")", ":", "\n", "\n", "        ", "super", "(", "Test3DMatch", ",", "self", ")", ".", "__init__", "(", "root", ",", "\n", "transform", ",", "\n", "pre_transform", ",", "\n", "pre_filter", ",", "\n", "verbose", ",", "debug", ",", "\n", "max_dist_overlap", ")", "\n", "self", ".", "num_random_pt", "=", "num_random_pt", "\n", "self", ".", "radius_patch", "=", "radius_patch", "\n", "self", ".", "patch_extractor", "=", "PatchExtractor", "(", "self", ".", "radius_patch", ")", "\n", "self", ".", "path_table", "=", "osp", ".", "join", "(", "self", ".", "processed_dir", ",", "'fragment'", ")", "\n", "with", "open", "(", "osp", ".", "join", "(", "self", ".", "path_table", ",", "'table.json'", ")", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "self", ".", "table", "=", "json", ".", "load", "(", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.test3dmatch.Test3DMatch.__getitem__": [[43, 57], ["torch.load", "os.join", "os.join", "test3dmatch.Test3DMatch.transform", "torch_points3d.datasets.registration.detector.RandomDetector", "torch_points3d.datasets.registration.detector.RandomDetector."], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load"], ["", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "r\"\"\"Gets the data object at index :obj:`idx` and transforms it (in case\n        a :obj:`self.transform` is given).\n        In case :obj:`idx` is a slicing object, *e.g.*, :obj:`[2:5]`, a list, a\n        tuple, a  LongTensor or a BoolTensor, will return a subset of the\n        dataset at the specified indices.\"\"\"", "\n", "data", "=", "torch", ".", "load", "(", "\n", "osp", ".", "join", "(", "self", ".", "path_table", ",", "'fragment_{:06d}.pt'", ".", "format", "(", "idx", ")", ")", ")", "\n", "if", "(", "self", ".", "transform", "is", "not", "None", ")", ":", "\n", "            ", "data", "=", "self", ".", "transform", "(", "data", ")", "\n", "", "if", "(", "self", ".", "num_random_pt", ">", "0", ")", ":", "\n", "            ", "detector", "=", "RandomDetector", "(", "self", ".", "num_random_pt", ")", "\n", "data", "=", "detector", "(", "data", ")", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.test3dmatch.Test3DMatch.get_patches": [[58, 66], ["torch.load", "torch_points3d.datasets.registration.basetest.SimplePatch", "os.join", "os.join", "test3dmatch.Test3DMatch.patch_extractor", "range"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load"], ["", "def", "get_patches", "(", "self", ",", "idx", ")", ":", "\n", "        ", "fragment", "=", "torch", ".", "load", "(", "\n", "osp", ".", "join", "(", "self", ".", "path_table", ",", "'fragment_{:06d}.pt'", ".", "format", "(", "idx", ")", ")", ")", "\n", "patch_dataset", "=", "[", "self", ".", "patch_extractor", "(", "fragment", ",", "fragment", ".", "keypoints", "[", "i", "]", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_random_pt", ")", "]", "\n", "\n", "simple_patch", "=", "SimplePatch", "(", "patch_dataset", ",", "self", ".", "transform", ")", "\n", "return", "simple_patch", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.test3dmatch.Test3DMatch.__len__": [[67, 69], ["len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "table", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.test3dmatch.Test3DMatch.get_table": [[70, 72], ["None"], "methods", ["None"], ["", "def", "get_table", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "table", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.test3dmatch.TestPair3DMatch.__init__": [[75, 105], ["torch_points3d.datasets.registration.basetest.Base3DMatchTest.__init__", "os.join", "os.join", "os.listdir", "os.listdir", "os.listdir", "os.listdir"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "\n", "transform", "=", "None", ",", "\n", "pre_transform", "=", "None", ",", "\n", "pre_filter", "=", "None", ",", "\n", "verbose", "=", "False", ",", "\n", "debug", "=", "False", ",", "\n", "num_pos_pairs", "=", "200", ",", "\n", "max_dist_overlap", "=", "0.01", ",", "\n", "self_supervised", "=", "False", ",", "\n", "ss_transform", "=", "None", ",", "\n", "min_size_block", "=", "0.3", ",", "\n", "max_size_block", "=", "2", ",", "\n", "min_points", "=", "500", ",", "\n", "use_fps", "=", "False", ")", ":", "\n", "        ", "Base3DMatchTest", ".", "__init__", "(", "self", ",", "root", "=", "root", ",", "\n", "transform", "=", "transform", ",", "\n", "pre_transform", "=", "pre_transform", ",", "\n", "pre_filter", "=", "pre_filter", ",", "\n", "verbose", "=", "verbose", ",", "debug", "=", "debug", ",", "\n", "max_dist_overlap", "=", "max_dist_overlap", ")", "\n", "self", ".", "num_pos_pairs", "=", "num_pos_pairs", "\n", "self", ".", "path_match", "=", "osp", ".", "join", "(", "self", ".", "processed_dir", ",", "\"test\"", ",", "\"matches\"", ")", "\n", "self", ".", "list_fragment", "=", "[", "f", "for", "f", "in", "os", ".", "listdir", "(", "self", ".", "path_match", ")", "if", "\"matches\"", "in", "f", "]", "\n", "self", ".", "self_supervised", "=", "self_supervised", "\n", "self", ".", "ss_transform", "=", "ss_transform", "\n", "self", ".", "is_online_matching", "=", "False", "\n", "self", ".", "use_fps", "=", "use_fps", "\n", "self", ".", "min_points", "=", "min_points", "\n", "self", ".", "min_size_block", "=", "min_size_block", "\n", "self", ".", "max_size_block", "=", "max_size_block", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.test3dmatch.TestPair3DMatch.__getitem__": [[106, 108], ["test3dmatch.TestPair3DMatch.get_fragment"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base_siamese_dataset.GeneralFragment.get_fragment"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "get_fragment", "(", "idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.test3dmatch.TestPair3DMatch.__len__": [[109, 111], ["len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "list_fragment", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.test3dmatch.TestPair3DMatch.process": [[112, 114], ["super().process"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.classification.modelnet.SampledModelNet.process"], ["", "def", "process", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "process", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.test3dmatch.TestPair3DMatch.download": [[115, 117], ["super().download"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.classification.modelnet.SampledModelNet.download"], ["", "def", "download", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "download", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.test3dmatch.TestPair3DMatchDataset.__init__": [[119, 147], ["torch_points3d.datasets.registration.base_siamese_dataset.BaseSiameseDataset.__init__", "getattr", "test3dmatch.TestPair3DMatch", "test3dmatch.TestPair3DMatch"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dataset_opt", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dataset_opt", ")", "\n", "pre_transform", "=", "self", ".", "pre_transform", "\n", "ss_transform", "=", "getattr", "(", "self", ",", "\"ss_transform\"", ",", "None", ")", "\n", "train_transform", "=", "self", ".", "train_transform", "\n", "test_transform", "=", "self", ".", "test_transform", "\n", "\n", "self", ".", "train_dataset", "=", "TestPair3DMatch", "(", "\n", "root", "=", "self", ".", "_data_path", ",", "\n", "pre_transform", "=", "pre_transform", ",", "\n", "transform", "=", "train_transform", ",", "\n", "num_pos_pairs", "=", "dataset_opt", ".", "num_pos_pairs", ",", "\n", "max_dist_overlap", "=", "dataset_opt", ".", "max_dist_overlap", ",", "\n", "self_supervised", "=", "True", ",", "\n", "min_size_block", "=", "dataset_opt", ".", "min_size_block", ",", "\n", "max_size_block", "=", "dataset_opt", ".", "max_size_block", ",", "\n", "ss_transform", "=", "ss_transform", ",", "\n", "min_points", "=", "dataset_opt", ".", "min_points", ",", "\n", "use_fps", "=", "dataset_opt", ".", "use_fps", "\n", ")", "\n", "\n", "self", ".", "test_dataset", "=", "TestPair3DMatch", "(", "\n", "root", "=", "self", ".", "_data_path", ",", "\n", "pre_transform", "=", "pre_transform", ",", "\n", "transform", "=", "test_transform", ",", "\n", "num_pos_pairs", "=", "50", ",", "\n", "max_dist_overlap", "=", "dataset_opt", ".", "max_dist_overlap", ",", "\n", "self_supervised", "=", "False", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.test3dmatch.Test3DMatchDataset.__init__": [[156, 172], ["torch_points3d.datasets.base_dataset.BaseDataset.__init__", "test3dmatch.Test3DMatch", "test3dmatch.Test3DMatchDataset.base_dataset.get_patches"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.test3dmatch.Test3DMatch.get_patches"], ["def", "__init__", "(", "self", ",", "dataset_opt", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dataset_opt", ")", "\n", "pre_transform", "=", "self", ".", "pre_transform", "\n", "test_transform", "=", "self", ".", "test_transform", "\n", "\n", "self", ".", "base_dataset", "=", "Test3DMatch", "(", "root", "=", "self", ".", "_data_path", ",", "\n", "radius_patch", "=", "dataset_opt", ".", "radius_patch", ",", "\n", "pre_transform", "=", "pre_transform", ",", "\n", "transform", "=", "test_transform", ",", "\n", "num_random_pt", "=", "dataset_opt", ".", "num_random_pt", ")", "\n", "\n", "if", "(", "dataset_opt", ".", "is_patch", ")", ":", "\n", "            ", "self", ".", "test_dataset", "=", "self", ".", "base_dataset", ".", "get_patches", "(", "0", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "test_dataset", "=", "self", ".", "base_dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.test3dmatch.Test3DMatchDataset.set_patches": [[173, 175], ["test3dmatch.Test3DMatchDataset.base_dataset.get_patches"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.test3dmatch.Test3DMatch.get_patches"], ["", "", "def", "set_patches", "(", "self", ",", "idx", ")", ":", "\n", "        ", "self", ".", "test_dataset", "=", "self", ".", "base_dataset", ".", "get_patches", "(", "idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.test3dmatch.Test3DMatchDataset.get_name": [[176, 183], ["test3dmatch.Test3DMatchDataset.base_dataset.get_table", "str"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.test3dmatch.Test3DMatch.get_table"], ["", "def", "get_name", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\"\n        return a pair of string which indicate the name of the scene and\n        the name of the point cloud\n        \"\"\"", "\n", "table", "=", "self", ".", "base_dataset", ".", "get_table", "(", ")", "[", "str", "(", "idx", ")", "]", "\n", "return", "table", "[", "'scene_path'", "]", ",", "table", "[", "'fragment_name'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.test3dmatch.Test3DMatchDataset.num_fragment": [[184, 187], ["len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "@", "property", "\n", "def", "num_fragment", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "base_dataset", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.fusion.TSDFVolume.__init__": [[23, 159], ["numpy.asarray", "float", "numpy.ceil().copy().astype", "fusion.TSDFVolume._vol_bnds[].copy().astype", "print", "numpy.ones().astype", "numpy.zeros().astype", "cuda.mem_alloc", "cuda.memcpy_htod", "cuda.mem_alloc", "cuda.memcpy_htod", "SourceModule", "fusion.TSDFVolume._cuda_src_mod.get_function", "cuda.Device", "int", "min", "min", "min", "numpy.array().astype", "int", "numpy.meshgrid", "numpy.ceil().copy", "fusion.TSDFVolume._vol_bnds[].copy", "numpy.ones", "numpy.zeros", "numpy.ceil", "int", "int", "int", "numpy.ceil", "range", "range", "range", "numpy.concatenate().astype", "numpy.floor", "numpy.floor", "numpy.ceil", "numpy.array", "numpy.ceil", "float", "float", "numpy.cbrt", "numpy.sqrt", "float", "float", "numpy.concatenate", "numpy.prod", "float", "float", "numpy.prod", "numpy.prod", "xv.reshape", "yv.reshape", "zv.reshape"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "vol_bnds", ",", "voxel_size", ",", "use_gpu", "=", "True", ")", ":", "\n", "        ", "\"\"\"Constructor.\n        Args:\n        vol_bnds (ndarray): An ndarray of shape (3, 2). Specifies the\n        xyz bounds (min/max) in meters.\n        voxel_size (float): The volume discretization in meters.\n        \"\"\"", "\n", "vol_bnds", "=", "np", ".", "asarray", "(", "vol_bnds", ")", "\n", "assert", "vol_bnds", ".", "shape", "==", "(", "3", ",", "2", ")", ",", "\"[!] `vol_bnds` should be of shape (3, 2).\"", "\n", "\n", "# Define voxel volume parameters", "\n", "self", ".", "_vol_bnds", "=", "vol_bnds", "\n", "self", ".", "_voxel_size", "=", "float", "(", "voxel_size", ")", "\n", "self", ".", "_trunc_margin", "=", "5", "*", "self", ".", "_voxel_size", "# truncation on SDF", "\n", "\n", "\n", "# Adjust volume bounds and ensure C-order contiguous", "\n", "self", ".", "_vol_dim", "=", "np", ".", "ceil", "(", "\n", "(", "self", ".", "_vol_bnds", "[", ":", ",", "1", "]", "-", "self", ".", "_vol_bnds", "[", ":", ",", "0", "]", ")", "/", "\n", "self", ".", "_voxel_size", ")", ".", "copy", "(", "order", "=", "'C'", ")", ".", "astype", "(", "int", ")", "\n", "self", ".", "_vol_bnds", "[", ":", ",", "1", "]", "=", "self", ".", "_vol_bnds", "[", ":", ",", "0", "]", "+", "self", ".", "_vol_dim", "*", "self", ".", "_voxel_size", "\n", "self", ".", "_vol_origin", "=", "self", ".", "_vol_bnds", "[", ":", ",", "0", "]", ".", "copy", "(", "order", "=", "'C'", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "print", "(", "\"Voxel volume size: {} x {} x {} - # points: {:,}\"", ".", "format", "(", "\n", "self", ".", "_vol_dim", "[", "0", "]", ",", "self", ".", "_vol_dim", "[", "1", "]", ",", "self", ".", "_vol_dim", "[", "2", "]", ",", "\n", "self", ".", "_vol_dim", "[", "0", "]", "*", "self", ".", "_vol_dim", "[", "1", "]", "*", "self", ".", "_vol_dim", "[", "2", "]", ")", "\n", ")", "\n", "\n", "# Initialize pointers to voxel volume in CPU memory", "\n", "self", ".", "_tsdf_vol_cpu", "=", "np", ".", "ones", "(", "self", ".", "_vol_dim", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "# for computing the cumulative moving average of observations per voxel", "\n", "self", ".", "_weight_vol_cpu", "=", "np", ".", "zeros", "(", "self", ".", "_vol_dim", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "self", ".", "gpu_mode", "=", "use_gpu", "and", "FUSION_GPU_MODE", "\n", "\n", "# Copy voxel volumes to GPU", "\n", "if", "self", ".", "gpu_mode", ":", "\n", "            ", "self", ".", "_tsdf_vol_gpu", "=", "cuda", ".", "mem_alloc", "(", "self", ".", "_tsdf_vol_cpu", ".", "nbytes", ")", "\n", "cuda", ".", "memcpy_htod", "(", "self", ".", "_tsdf_vol_gpu", ",", "self", ".", "_tsdf_vol_cpu", ")", "\n", "self", ".", "_weight_vol_gpu", "=", "cuda", ".", "mem_alloc", "(", "self", ".", "_weight_vol_cpu", ".", "nbytes", ")", "\n", "cuda", ".", "memcpy_htod", "(", "self", ".", "_weight_vol_gpu", ",", "self", ".", "_weight_vol_cpu", ")", "\n", "\n", "# Cuda kernel function (C++)", "\n", "self", ".", "_cuda_src_mod", "=", "SourceModule", "(", "\"\"\"\n            __global__ void integrate(float * tsdf_vol,\n                                  float * weight_vol,\n                                  float * vol_dim,\n                                  float * vol_origin,\n                                  float * cam_intr,\n                                  float * cam_pose,\n                                  float * other_params,\n                                  float * depth_im) {\n          // Get voxel index\n          int gpu_loop_idx = (int) other_params[0];\n          int max_threads_per_block = blockDim.x;\n          int block_idx = blockIdx.z*gridDim.y*gridDim.x+blockIdx.y*gridDim.x+blockIdx.x;\n          int voxel_idx = gpu_loop_idx*gridDim.x*gridDim.y*gridDim.z*max_threads_per_block+block_idx*max_threads_per_block+threadIdx.x;\n          int vol_dim_x = (int) vol_dim[0];\n          int vol_dim_y = (int) vol_dim[1];\n          int vol_dim_z = (int) vol_dim[2];\n          if (voxel_idx > vol_dim_x*vol_dim_y*vol_dim_z)\n              return;\n          // Get voxel grid coordinates (note: be careful when casting)\n          float voxel_x = floorf(((float)voxel_idx)/((float)(vol_dim_y*vol_dim_z)));\n          float voxel_y = floorf(((float)(voxel_idx-((int)voxel_x)*vol_dim_y*vol_dim_z))/((float)vol_dim_z));\n          float voxel_z = (float)(voxel_idx-((int)voxel_x)*vol_dim_y*vol_dim_z-((int)voxel_y)*vol_dim_z);\n          // Voxel grid coordinates to world coordinates\n          float voxel_size = other_params[1];\n          float pt_x = vol_origin[0]+voxel_x*voxel_size;\n          float pt_y = vol_origin[1]+voxel_y*voxel_size;\n          float pt_z = vol_origin[2]+voxel_z*voxel_size;\n          // World coordinates to camera coordinates\n          float tmp_pt_x = pt_x-cam_pose[0*4+3];\n          float tmp_pt_y = pt_y-cam_pose[1*4+3];\n          float tmp_pt_z = pt_z-cam_pose[2*4+3];\n          float cam_pt_x = cam_pose[0*4+0]*tmp_pt_x+cam_pose[1*4+0]*tmp_pt_y+cam_pose[2*4+0]*tmp_pt_z;\n          float cam_pt_y = cam_pose[0*4+1]*tmp_pt_x+cam_pose[1*4+1]*tmp_pt_y+cam_pose[2*4+1]*tmp_pt_z;\n          float cam_pt_z = cam_pose[0*4+2]*tmp_pt_x+cam_pose[1*4+2]*tmp_pt_y+cam_pose[2*4+2]*tmp_pt_z;\n          // Camera coordinates to image pixels\n          int pixel_x = (int) roundf(cam_intr[0*3+0]*(cam_pt_x/cam_pt_z)+cam_intr[0*3+2]);\n          int pixel_y = (int) roundf(cam_intr[1*3+1]*(cam_pt_y/cam_pt_z)+cam_intr[1*3+2]);\n          // Skip if outside view frustum\n          int im_h = (int) other_params[2];\n          int im_w = (int) other_params[3];\n          if (pixel_x < 0 || pixel_x >= im_w || pixel_y < 0 || pixel_y >= im_h || cam_pt_z<0)\n              return;\n          // Skip invalid depth\n          float depth_value = depth_im[pixel_y*im_w+pixel_x];\n          if (depth_value == 0)\n              return;\n          // Integrate TSDF\n          float trunc_margin = other_params[4];\n          float depth_diff = depth_value-cam_pt_z;\n          if (depth_diff < -trunc_margin)\n              return;\n          float x = fmin(1.0f,depth_diff/trunc_margin);\n          float w_old = weight_vol[voxel_idx];\n          float obs_weight = other_params[5];\n          float w_new = w_old + obs_weight;\n          weight_vol[voxel_idx] = w_new;\n          tsdf_vol[voxel_idx] = (tsdf_vol[voxel_idx]*w_old+obs_weight*x)/w_new;\n\n            }\"\"\"", ")", "\n", "\n", "self", ".", "_cuda_integrate", "=", "self", ".", "_cuda_src_mod", ".", "get_function", "(", "\"integrate\"", ")", "\n", "\n", "# Determine block/grid size on GPU", "\n", "gpu_dev", "=", "cuda", ".", "Device", "(", "0", ")", "\n", "self", ".", "_max_gpu_threads_per_block", "=", "gpu_dev", ".", "MAX_THREADS_PER_BLOCK", "\n", "n_blocks", "=", "int", "(", "np", ".", "ceil", "(", "\n", "float", "(", "np", ".", "prod", "(", "self", ".", "_vol_dim", ")", ")", "/", "\n", "float", "(", "self", ".", "_max_gpu_threads_per_block", ")", ")", ")", "\n", "grid_dim_x", "=", "min", "(", "gpu_dev", ".", "MAX_GRID_DIM_X", ",", "\n", "int", "(", "np", ".", "floor", "(", "np", ".", "cbrt", "(", "n_blocks", ")", ")", ")", ")", "\n", "grid_dim_y", "=", "min", "(", "gpu_dev", ".", "MAX_GRID_DIM_Y", ",", "\n", "int", "(", "np", ".", "floor", "(", "np", ".", "sqrt", "(", "n_blocks", "/", "grid_dim_x", ")", ")", ")", ")", "\n", "grid_dim_z", "=", "min", "(", "gpu_dev", ".", "MAX_GRID_DIM_Z", ",", "\n", "int", "(", "np", ".", "ceil", "(", "float", "(", "n_blocks", ")", "/", "\n", "float", "(", "grid_dim_x", "*", "grid_dim_y", ")", ")", ")", ")", "\n", "self", ".", "_max_gpu_grid_dim", "=", "np", ".", "array", "(", "\n", "[", "grid_dim_x", ",", "grid_dim_y", ",", "grid_dim_z", "]", ")", ".", "astype", "(", "int", ")", "\n", "self", ".", "_n_gpu_loops", "=", "int", "(", "np", ".", "ceil", "(", "\n", "float", "(", "np", ".", "prod", "(", "self", ".", "_vol_dim", ")", ")", "/", "\n", "float", "(", "np", ".", "prod", "(", "self", ".", "_max_gpu_grid_dim", ")", "*", "self", ".", "_max_gpu_threads_per_block", ")", ")", ")", "\n", "", "else", ":", "\n", "# Get voxel grid coordinates", "\n", "            ", "xv", ",", "yv", ",", "zv", "=", "np", ".", "meshgrid", "(", "\n", "range", "(", "self", ".", "_vol_dim", "[", "0", "]", ")", ",", "\n", "range", "(", "self", ".", "_vol_dim", "[", "1", "]", ")", ",", "\n", "range", "(", "self", ".", "_vol_dim", "[", "2", "]", ")", ",", "\n", "indexing", "=", "'ij'", "\n", ")", "\n", "self", ".", "vox_coords", "=", "np", ".", "concatenate", "(", "[", "\n", "xv", ".", "reshape", "(", "1", ",", "-", "1", ")", ",", "\n", "yv", ".", "reshape", "(", "1", ",", "-", "1", ")", ",", "\n", "zv", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "]", ",", "axis", "=", "0", ")", ".", "astype", "(", "int", ")", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.fusion.TSDFVolume.vox2world": [[160, 172], ["numba.njit", "vol_origin.astype.astype.astype", "vox_coords.astype.astype.astype", "numpy.empty_like", "numba.prange", "range"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "@", "njit", "(", "parallel", "=", "True", ")", "\n", "def", "vox2world", "(", "vol_origin", ",", "vox_coords", ",", "vox_size", ")", ":", "\n", "        ", "\"\"\"Convert voxel grid coordinates to world coordinates.\n        \"\"\"", "\n", "vol_origin", "=", "vol_origin", ".", "astype", "(", "np", ".", "float32", ")", "\n", "vox_coords", "=", "vox_coords", ".", "astype", "(", "np", ".", "float32", ")", "\n", "cam_pts", "=", "np", ".", "empty_like", "(", "vox_coords", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "i", "in", "prange", "(", "vox_coords", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "3", ")", ":", "\n", "                ", "cam_pts", "[", "i", ",", "j", "]", "=", "vol_origin", "[", "j", "]", "+", "(", "vox_size", "*", "vox_coords", "[", "i", ",", "j", "]", ")", "\n", "", "", "return", "cam_pts", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.fusion.TSDFVolume.cam2pix": [[173, 186], ["numba.njit", "intr.astype.astype.astype", "numpy.empty", "numba.prange", "int", "int", "numpy.round", "numpy.round"], "methods", ["None"], ["", "@", "staticmethod", "\n", "@", "njit", "(", "parallel", "=", "True", ")", "\n", "def", "cam2pix", "(", "cam_pts", ",", "intr", ")", ":", "\n", "        ", "\"\"\"Convert camera coordinates to pixel coordinates.\n        \"\"\"", "\n", "intr", "=", "intr", ".", "astype", "(", "np", ".", "float32", ")", "\n", "fx", ",", "fy", "=", "intr", "[", "0", ",", "0", "]", ",", "intr", "[", "1", ",", "1", "]", "\n", "cx", ",", "cy", "=", "intr", "[", "0", ",", "2", "]", ",", "intr", "[", "1", ",", "2", "]", "\n", "pix", "=", "np", ".", "empty", "(", "(", "cam_pts", ".", "shape", "[", "0", "]", ",", "2", ")", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "for", "i", "in", "prange", "(", "cam_pts", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "pix", "[", "i", ",", "0", "]", "=", "int", "(", "np", ".", "round", "(", "(", "cam_pts", "[", "i", ",", "0", "]", "*", "fx", "/", "cam_pts", "[", "i", ",", "2", "]", ")", "+", "cx", ")", ")", "\n", "pix", "[", "i", ",", "1", "]", "=", "int", "(", "np", ".", "round", "(", "(", "cam_pts", "[", "i", ",", "1", "]", "*", "fy", "/", "cam_pts", "[", "i", ",", "2", "]", ")", "+", "cy", ")", ")", "\n", "", "return", "pix", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.fusion.TSDFVolume.integrate_tsdf": [[187, 198], ["numba.njit", "numpy.empty_like", "numpy.empty_like", "numba.prange", "len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "@", "staticmethod", "\n", "@", "njit", "(", "parallel", "=", "True", ")", "\n", "def", "integrate_tsdf", "(", "tsdf_vol", ",", "dist", ",", "w_old", ",", "obs_weight", ")", ":", "\n", "        ", "\"\"\"Integrate the TSDF volume.\n        \"\"\"", "\n", "tsdf_vol_int", "=", "np", ".", "empty_like", "(", "tsdf_vol", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "w_new", "=", "np", ".", "empty_like", "(", "w_old", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "i", "in", "prange", "(", "len", "(", "tsdf_vol", ")", ")", ":", "\n", "            ", "w_new", "[", "i", "]", "=", "w_old", "[", "i", "]", "+", "obs_weight", "\n", "tsdf_vol_int", "[", "i", "]", "=", "(", "w_old", "[", "i", "]", "*", "tsdf_vol", "[", "i", "]", "+", "obs_weight", "*", "dist", "[", "i", "]", ")", "/", "w_new", "[", "i", "]", "\n", "", "return", "tsdf_vol_int", ",", "w_new", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.fusion.TSDFVolume.integrate": [[199, 264], ["range", "fusion.TSDFVolume.vox2world", "fusion.rigid_transform", "fusion.TSDFVolume.cam2pix", "numpy.logical_and", "numpy.zeros", "numpy.logical_and", "numpy.minimum", "fusion.TSDFVolume.integrate_tsdf", "fusion.TSDFVolume._cuda_integrate", "numpy.linalg.inv", "numpy.logical_and", "cuda.InOut", "cuda.InOut", "cuda.InOut", "cuda.InOut", "cuda.InOut", "cuda.InOut", "numpy.logical_and", "fusion.TSDFVolume._vol_dim.astype", "fusion.TSDFVolume._vol_origin.astype", "cam_intr.reshape().astype", "cam_pose.reshape().astype", "numpy.asarray", "depth_im.reshape().astype", "numpy.logical_and", "int", "int", "int", "cam_intr.reshape", "cam_pose.reshape", "depth_im.reshape"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.fusion.TSDFVolume.vox2world", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.fusion.rigid_transform", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.fusion.TSDFVolume.cam2pix", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.fusion.TSDFVolume.integrate_tsdf"], ["", "def", "integrate", "(", "self", ",", "depth_im", ",", "cam_intr", ",", "cam_pose", ",", "obs_weight", "=", "1.", ")", ":", "\n", "        ", "\"\"\"Integrate an RGB-D frame into the TSDF volume.\n        Args:\n        depth_im (ndarray): A depth image of shape (H, W).\n        cam_intr (ndarray): The camera intrinsics matrix of shape (3, 3).\n        cam_pose (ndarray): The camera pose (i.e. extrinsics) of shape (4, 4).\n        obs_weight (float): The weight to assign for the current observation. A higher\n        value\n        \"\"\"", "\n", "im_h", ",", "im_w", "=", "depth_im", ".", "shape", "\n", "if", "self", ".", "gpu_mode", ":", "# GPU mode: integrate voxel volume (calls CUDA kernel)", "\n", "            ", "for", "gpu_loop_idx", "in", "range", "(", "self", ".", "_n_gpu_loops", ")", ":", "\n", "                ", "self", ".", "_cuda_integrate", "(", "self", ".", "_tsdf_vol_gpu", ",", "\n", "self", ".", "_weight_vol_gpu", ",", "\n", "cuda", ".", "InOut", "(", "self", ".", "_vol_dim", ".", "astype", "(", "np", ".", "float32", ")", ")", ",", "\n", "cuda", ".", "InOut", "(", "self", ".", "_vol_origin", ".", "astype", "(", "np", ".", "float32", ")", ")", ",", "\n", "cuda", ".", "InOut", "(", "cam_intr", ".", "reshape", "(", "-", "1", ")", ".", "astype", "(", "np", ".", "float32", ")", ")", ",", "\n", "cuda", ".", "InOut", "(", "cam_pose", ".", "reshape", "(", "-", "1", ")", ".", "astype", "(", "np", ".", "float32", ")", ")", ",", "\n", "cuda", ".", "InOut", "(", "np", ".", "asarray", "(", "[", "\n", "gpu_loop_idx", ",", "\n", "self", ".", "_voxel_size", ",", "\n", "im_h", ",", "\n", "im_w", ",", "\n", "self", ".", "_trunc_margin", ",", "\n", "obs_weight", "\n", "]", ",", "np", ".", "float32", ")", ")", ",", "\n", "cuda", ".", "InOut", "(", "depth_im", ".", "reshape", "(", "-", "1", ")", ".", "astype", "(", "np", ".", "float32", ")", ")", ",", "\n", "block", "=", "(", "self", ".", "_max_gpu_threads_per_block", ",", "1", ",", "1", ")", ",", "\n", "grid", "=", "(", "\n", "int", "(", "self", ".", "_max_gpu_grid_dim", "[", "0", "]", ")", ",", "\n", "int", "(", "self", ".", "_max_gpu_grid_dim", "[", "1", "]", ")", ",", "\n", "int", "(", "self", ".", "_max_gpu_grid_dim", "[", "2", "]", ")", ",", "\n", ")", "\n", ")", "\n", "", "", "else", ":", "# CPU mode: integrate voxel volume (vectorized implementation)", "\n", "# Convert voxel grid coordinates to pixel coordinates", "\n", "            ", "cam_pts", "=", "self", ".", "vox2world", "(", "self", ".", "_vol_origin", ",", "self", ".", "vox_coords", ",", "self", ".", "_voxel_size", ")", "\n", "cam_pts", "=", "rigid_transform", "(", "cam_pts", ",", "np", ".", "linalg", ".", "inv", "(", "cam_pose", ")", ")", "\n", "pix_z", "=", "cam_pts", "[", ":", ",", "2", "]", "\n", "pix", "=", "self", ".", "cam2pix", "(", "cam_pts", ",", "cam_intr", ")", "\n", "pix_x", ",", "pix_y", "=", "pix", "[", ":", ",", "0", "]", ",", "pix", "[", ":", ",", "1", "]", "\n", "\n", "# Eliminate pixels outside view frustum", "\n", "valid_pix", "=", "np", ".", "logical_and", "(", "\n", "pix_x", ">=", "0", ",", "\n", "np", ".", "logical_and", "(", "pix_x", "<", "im_w", ",", "\n", "np", ".", "logical_and", "(", "pix_y", ">=", "0", ",", "\n", "np", ".", "logical_and", "(", "pix_y", "<", "im_h", ",", "\n", "pix_z", ">", "0", ")", ")", ")", ")", "\n", "depth_val", "=", "np", ".", "zeros", "(", "pix_x", ".", "shape", ")", "\n", "depth_val", "[", "valid_pix", "]", "=", "depth_im", "[", "pix_y", "[", "valid_pix", "]", ",", "pix_x", "[", "valid_pix", "]", "]", "\n", "\n", "# Integrate TSDF", "\n", "depth_diff", "=", "depth_val", "-", "pix_z", "\n", "valid_pts", "=", "np", ".", "logical_and", "(", "depth_val", ">", "0", ",", "depth_diff", ">=", "-", "self", ".", "_trunc_margin", ")", "\n", "dist", "=", "np", ".", "minimum", "(", "1", ",", "depth_diff", "/", "self", ".", "_trunc_margin", ")", "\n", "valid_vox_x", "=", "self", ".", "vox_coords", "[", "valid_pts", ",", "0", "]", "\n", "valid_vox_y", "=", "self", ".", "vox_coords", "[", "valid_pts", ",", "1", "]", "\n", "valid_vox_z", "=", "self", ".", "vox_coords", "[", "valid_pts", ",", "2", "]", "\n", "w_old", "=", "self", ".", "_weight_vol_cpu", "[", "valid_vox_x", ",", "valid_vox_y", ",", "valid_vox_z", "]", "\n", "tsdf_vals", "=", "self", ".", "_tsdf_vol_cpu", "[", "valid_vox_x", ",", "valid_vox_y", ",", "valid_vox_z", "]", "\n", "valid_dist", "=", "dist", "[", "valid_pts", "]", "\n", "tsdf_vol_new", ",", "w_new", "=", "self", ".", "integrate_tsdf", "(", "tsdf_vals", ",", "valid_dist", ",", "w_old", ",", "obs_weight", ")", "\n", "self", ".", "_weight_vol_cpu", "[", "valid_vox_x", ",", "valid_vox_y", ",", "valid_vox_z", "]", "=", "w_new", "\n", "self", ".", "_tsdf_vol_cpu", "[", "valid_vox_x", ",", "valid_vox_y", ",", "valid_vox_z", "]", "=", "tsdf_vol_new", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.fusion.TSDFVolume.get_volume": [[265, 271], ["cuda.memcpy_dtoh", "cuda.memcpy_dtoh"], "methods", ["None"], ["", "", "def", "get_volume", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "gpu_mode", ":", "\n", "            ", "cuda", ".", "memcpy_dtoh", "(", "self", ".", "_tsdf_vol_cpu", ",", "self", ".", "_tsdf_vol_gpu", ")", "\n", "cuda", ".", "memcpy_dtoh", "(", "self", ".", "_weight_vol_cpu", ",", "self", ".", "_weight_vol_gpu", ")", "\n", "\n", "", "return", "self", ".", "_tsdf_vol_cpu", ",", "self", ".", "_weight_vol_cpu", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.fusion.TSDFVolume.get_mesh": [[272, 284], ["fusion.TSDFVolume.get_volume", "skimage.measure.marching_cubes_lewiner"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.fusion.TSDFVolume.get_volume"], ["", "def", "get_mesh", "(", "self", ")", ":", "\n", "        ", "\"\"\"Compute a mesh from the voxel volume using marching cubes.\n        \"\"\"", "\n", "tsdf_vol", ",", "_", "=", "self", ".", "get_volume", "(", ")", "\n", "\n", "# Marching cubes", "\n", "verts", ",", "faces", ",", "norms", ",", "vals", "=", "measure", ".", "marching_cubes_lewiner", "(", "tsdf_vol", ",", "\n", "level", "=", "0", ")", "\n", "\n", "verts", "=", "verts", "*", "self", ".", "_voxel_size", "+", "self", ".", "_vol_origin", "\n", "# voxel grid coordinates to world coordinates", "\n", "return", "verts", ",", "faces", ",", "norms", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.fusion.TSDFVolume.get_point_cloud": [[285, 313], ["fusion.TSDFVolume.get_volume", "numpy.logical_and", "numpy.meshgrid", "pcd_ind.astype.astype.astype", "range", "range", "range", "numpy.concatenate().astype", "numpy.abs", "pcd_ind.astype.astype.astype", "numpy.concatenate", "xv.reshape", "yv.reshape", "zv.reshape"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.fusion.TSDFVolume.get_volume"], ["", "def", "get_point_cloud", "(", "self", ",", "tsdf_thresh", ",", "weight_thresh", ")", ":", "\n", "        ", "\"\"\"\n        compute the surface pointcloud from the voxel volume\n        \"\"\"", "\n", "tsdf_vol", ",", "weight_vol", "=", "self", ".", "get_volume", "(", ")", "\n", "\n", "mask", "=", "np", ".", "logical_and", "(", "np", ".", "abs", "(", "tsdf_vol", ")", "<", "tsdf_thresh", ",", "\n", "weight_vol", ">", "weight_thresh", ")", "\n", "\n", "xv", ",", "yv", ",", "zv", "=", "np", ".", "meshgrid", "(", "\n", "range", "(", "self", ".", "_vol_dim", "[", "0", "]", ")", ",", "\n", "range", "(", "self", ".", "_vol_dim", "[", "1", "]", ")", ",", "\n", "range", "(", "self", ".", "_vol_dim", "[", "2", "]", ")", ",", "\n", "indexing", "=", "'ij'", "\n", ")", "\n", "xv", "=", "xv", "[", "mask", "]", "\n", "yv", "=", "yv", "[", "mask", "]", "\n", "zv", "=", "zv", "[", "mask", "]", "\n", "pcd_ind", "=", "np", ".", "concatenate", "(", "[", "\n", "xv", ".", "reshape", "(", "1", ",", "-", "1", ")", ",", "\n", "yv", ".", "reshape", "(", "1", ",", "-", "1", ")", ",", "\n", "zv", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "]", ",", "axis", "=", "0", ")", ".", "astype", "(", "int", ")", ".", "T", "\n", "\n", "pcd", "=", "pcd_ind", ".", "astype", "(", "float", ")", "*", "self", ".", "_voxel_size", "+", "self", ".", "_vol_origin", "\n", "pcd_ind", "=", "pcd_ind", ".", "astype", "(", "int", ")", "\n", "\n", "return", "pcd", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.fusion.rigid_transform": [[315, 321], ["numpy.hstack", "numpy.dot", "numpy.ones", "len"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "", "def", "rigid_transform", "(", "xyz", ",", "transform", ")", ":", "\n", "    ", "\"\"\"Applies a rigid transform to an (N, 3) pointcloud.\n        \"\"\"", "\n", "xyz_h", "=", "np", ".", "hstack", "(", "[", "xyz", ",", "np", ".", "ones", "(", "(", "len", "(", "xyz", ")", ",", "1", ")", ",", "dtype", "=", "np", ".", "float32", ")", "]", ")", "\n", "xyz_t_h", "=", "np", ".", "dot", "(", "transform", ",", "xyz_h", ".", "T", ")", ".", "T", "\n", "return", "xyz_t_h", "[", ":", ",", ":", "3", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.fusion.get_view_frustum": [[323, 340], ["numpy.max", "numpy.array", "fusion.rigid_transform", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.fusion.rigid_transform"], ["", "def", "get_view_frustum", "(", "depth_im", ",", "cam_intr", ",", "cam_pose", ")", ":", "\n", "    ", "\"\"\"Get corners of 3D camera view frustum of depth image\n        \"\"\"", "\n", "im_h", "=", "depth_im", ".", "shape", "[", "0", "]", "\n", "im_w", "=", "depth_im", ".", "shape", "[", "1", "]", "\n", "max_depth", "=", "np", ".", "max", "(", "depth_im", ")", "\n", "view_frust_pts", "=", "np", ".", "array", "(", "[", "\n", "(", "np", ".", "array", "(", "[", "0", ",", "0", ",", "0", ",", "im_w", ",", "im_w", "]", ")", "-", "cam_intr", "[", "0", ",", "2", "]", ")", "*", "\n", "np", ".", "array", "(", "[", "0", ",", "max_depth", ",", "max_depth", ",", "max_depth", ",", "max_depth", "]", ")", "/", "\n", "cam_intr", "[", "0", ",", "0", "]", ",", "\n", "(", "np", ".", "array", "(", "[", "0", ",", "0", ",", "im_h", ",", "0", ",", "im_h", "]", ")", "-", "cam_intr", "[", "1", ",", "2", "]", ")", "*", "\n", "np", ".", "array", "(", "[", "0", ",", "max_depth", ",", "max_depth", ",", "max_depth", ",", "max_depth", "]", ")", "/", "\n", "cam_intr", "[", "1", ",", "1", "]", ",", "\n", "np", ".", "array", "(", "[", "0", ",", "max_depth", ",", "max_depth", ",", "max_depth", ",", "max_depth", "]", ")", "\n", "]", ")", "\n", "view_frust_pts", "=", "rigid_transform", "(", "view_frust_pts", ".", "T", ",", "cam_pose", ")", ".", "T", "\n", "return", "view_frust_pts", "\n", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.general3dmatch.Patch3DMatch.__init__": [[22, 127], ["torch_points3d.datasets.registration.base3dmatch.Base3DMatch.__init__", "os.join", "os.join", "os.join", "os.join"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "root", ",", "\n", "radius_patch", "=", "0.3", ",", "\n", "num_frame_per_fragment", "=", "50", ",", "\n", "mode", "=", "\"train_small\"", ",", "\n", "min_overlap_ratio", "=", "0.3", ",", "\n", "max_overlap_ratio", "=", "1.0", ",", "\n", "max_dist_overlap", "=", "0.01", ",", "\n", "tsdf_voxel_size", "=", "0.02", ",", "\n", "limit_size", "=", "700", ",", "\n", "depth_thresh", "=", "6", ",", "\n", "is_fine", "=", "True", ",", "\n", "transform", "=", "None", ",", "\n", "pre_transform", "=", "None", ",", "\n", "pre_filter", "=", "None", ",", "\n", "verbose", "=", "False", ",", "\n", "debug", "=", "False", ",", "\n", "num_random_pt", "=", "5000", ",", "\n", "is_offline", "=", "False", ",", "\n", "pre_transform_patch", "=", "None", ",", "\n", ")", ":", "\n", "        ", "r\"\"\"\n        Patch extracted from :the Princeton 3DMatch dataset\\n\n        `\"3DMatch: Learning Local Geometric Descriptors from RGB-D Reconstructions\"\n        <https://arxiv.org/pdf/1603.08182.pdf>`_\n        paper, containing rgbd frames of the following dataset:\n        `\" SUN3D: A Database of Big Spaces Reconstructed using SfM and Object Labels\n        \"<http://sun3d.cs.princeton.edu/>`\n        `\"Scene Coordinate Regression Forests for Camera Relocalization in RGB-D Images\n        \"<https://www.microsoft.com/en-us/research/publication/scene-coordinate-regression-forests-for-camera-relocalization-in-rgb-d-images/>`\n        `\"Unsupervised Feature Learning for 3D Scene Labeling\n        \"<http://rgbd-dataset.cs.washington.edu/dataset/rgbd-scenes-v2/>`\n        `\"BundleFusion: Real-time Globally Consistent 3D Reconstruction using Online\n        Surface Re-integration\n        \"<http://graphics.stanford.edu/projects/bundlefusion/>`\n        `\"Learning to Navigate the Energy Landscape\n        \"<http://graphics.stanford.edu/projects/reloc/>`\n\n        Args:\n\n            root (string): Root directory where the dataset should be saved\n\n            radius_patch(float, optional): the size of the patch\n\n            num_frame_per_fragment (int, optional): indicate the number of frames\n                we use to build fragments. If it is equal to 0, then we don't\n                build fragments and use the raw frames.\n\n            mode (string, optional): If :obj:`True`, loads the training dataset,\n            otherwise the test dataset. (default: :obj:`True`)\n\n            min_overlap_ratio(float, optional): the minimum overlap we should have to match two fragments (overlap is the number of points in a fragment that matches in an other fragment divided by the number of points)\n\n            max_dist_overlap(float, optional): minimum distance to consider that a point match with an other.\n            tsdf_voxel_size(float, optional): the size of the tsdf voxel grid to perform fine RGBD fusion to create fine fragments\n            depth_thresh: threshold to remove depth pixel that are two far.\n\n            is_fine: fine mode for the fragment fusion\n\n            limit_size : limit the number of pixel at each direction to abvoid to heavy tsdf voxel\n\n            transform (callable, optional): A function/transform that takes in\n                an :obj:`torch_geometric.data.Data` object and returns a\n                transformed version. The data object will be transformed before\n                every access. (default: :obj:`None`)\n\n            pre_transform (callable, optional): A function/transform that takes in\n                an :obj:`torch_geometric.data.Data` object and returns a\n                transformed version. The data object will be transformed before\n                being saved to disk. (default: :obj:`None`)\n            pre_filter (callable, optional): A function that takes in an\n                :obj:`torch_geometric.data.Data` object and returns a boolean\n                value, indicating whether the data object should be included in the\n                final dataset. (default: :obj:`None`)\n            num_random_pt: number of point we select\n        \"\"\"", "\n", "self", ".", "is_patch", "=", "True", "\n", "super", "(", "Patch3DMatch", ",", "self", ")", ".", "__init__", "(", "\n", "root", ",", "\n", "num_frame_per_fragment", ",", "\n", "mode", ",", "\n", "min_overlap_ratio", ",", "\n", "max_overlap_ratio", ",", "\n", "max_dist_overlap", ",", "\n", "tsdf_voxel_size", ",", "\n", "limit_size", ",", "\n", "depth_thresh", ",", "\n", "is_fine", ",", "\n", "transform", ",", "\n", "pre_transform", ",", "\n", "pre_filter", ",", "\n", "verbose", ",", "\n", "debug", ",", "\n", "num_random_pt", ",", "\n", "is_offline", ",", "\n", "radius_patch", ",", "\n", "pre_transform_patch", ",", "\n", ")", "\n", "\n", "self", ".", "radius_patch", "=", "radius_patch", "\n", "self", ".", "is_offline", "=", "is_offline", "\n", "self", ".", "path_data", "=", "osp", ".", "join", "(", "self", ".", "processed_dir", ",", "self", ".", "mode", ",", "\"matches\"", ")", "\n", "if", "self", ".", "is_offline", ":", "\n", "            ", "self", ".", "path_data", "=", "osp", ".", "join", "(", "self", ".", "processed_dir", ",", "self", ".", "mode", ",", "\"patches\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.general3dmatch.Patch3DMatch.get_patch_online": [[128, 148], ["torch_points3d.datasets.registration.utils.PatchExtractor", "numpy.load().item", "torch.load().to", "torch.load().to", "numpy.random.randint", "torch_points3d.datasets.registration.utils.PatchExtractor.", "torch_points3d.datasets.registration.utils.PatchExtractor.", "torch_points3d.datasets.registration.pair.Pair.make_pair", "batch.contiguous.contiguous.contiguous", "len", "general3dmatch.Patch3DMatch.transform", "general3dmatch.Patch3DMatch.transform", "numpy.load", "torch.load", "torch.load", "os.join", "os.join"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.pair.Pair.make_pair", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load"], ["", "", "def", "get_patch_online", "(", "self", ",", "idx", ")", ":", "\n", "        ", "p_extractor", "=", "PatchExtractor", "(", "self", ".", "radius_patch", ")", "\n", "\n", "match", "=", "np", ".", "load", "(", "osp", ".", "join", "(", "self", ".", "path_data", ",", "\"matches{:06d}.npy\"", ".", "format", "(", "idx", ")", ")", ",", "allow_pickle", "=", "True", ")", ".", "item", "(", ")", "\n", "data_source", "=", "torch", ".", "load", "(", "match", "[", "\"path_source\"", "]", ")", ".", "to", "(", "torch", ".", "float", ")", "\n", "data_target", "=", "torch", ".", "load", "(", "match", "[", "\"path_target\"", "]", ")", ".", "to", "(", "torch", ".", "float", ")", "\n", "\n", "# select a random match on the list of match.", "\n", "# It cannot be 0 because matches are filtered.", "\n", "rand", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "len", "(", "match", "[", "\"pair\"", "]", ")", ")", "\n", "\n", "data_source", "=", "p_extractor", "(", "data_source", ",", "match", "[", "\"pair\"", "]", "[", "rand", "]", "[", "0", "]", ")", "\n", "data_target", "=", "p_extractor", "(", "data_target", ",", "match", "[", "\"pair\"", "]", "[", "rand", "]", "[", "1", "]", ")", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "data_source", "=", "self", ".", "transform", "(", "data_source", ")", "\n", "data_target", "=", "self", ".", "transform", "(", "data_target", ")", "\n", "", "batch", "=", "Pair", ".", "make_pair", "(", "data_source", ",", "data_target", ")", "\n", "batch", "=", "batch", ".", "contiguous", "(", ")", "\n", "return", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.general3dmatch.Patch3DMatch.get_patch_offline": [[149, 161], ["torch.load", "torch.load", "hasattr", "torch_points3d.datasets.registration.pair.Pair.make_pair.contiguous", "os.join", "os.join", "os.join", "os.join", "general3dmatch.Patch3DMatch.transform", "general3dmatch.Patch3DMatch.transform", "torch_points3d.datasets.registration.pair.MultiScalePair.make_pair", "torch_points3d.datasets.registration.pair.Pair.make_pair"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.pair.Pair.make_pair", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.pair.Pair.make_pair"], ["", "def", "get_patch_offline", "(", "self", ",", "idx", ")", ":", "\n", "        ", "data_source", "=", "torch", ".", "load", "(", "osp", ".", "join", "(", "self", ".", "path_data", ",", "\"patches_source{:06d}.pt\"", ".", "format", "(", "idx", ")", ")", ")", "\n", "data_target", "=", "torch", ".", "load", "(", "osp", ".", "join", "(", "self", ".", "path_data", ",", "\"patches_target{:06d}.pt\"", ".", "format", "(", "idx", ")", ")", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "data_source", "=", "self", ".", "transform", "(", "data_source", ")", "\n", "data_target", "=", "self", ".", "transform", "(", "data_target", ")", "\n", "\n", "", "if", "(", "hasattr", "(", "data_source", ",", "\"multiscale\"", ")", ")", ":", "\n", "            ", "batch", "=", "MultiScalePair", ".", "make_pair", "(", "data_source", ",", "data_target", ")", "\n", "", "else", ":", "\n", "            ", "batch", "=", "Pair", ".", "make_pair", "(", "data_source", ",", "data_target", ")", "\n", "", "return", "batch", ".", "contiguous", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.general3dmatch.Patch3DMatch.get": [[162, 167], ["general3dmatch.Patch3DMatch.get_patch_offline", "general3dmatch.Patch3DMatch.get_patch_online"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.general3dmatch.Patch3DMatch.get_patch_offline", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.general3dmatch.Patch3DMatch.get_patch_online"], ["", "def", "get", "(", "self", ",", "idx", ")", ":", "\n", "        ", "if", "self", ".", "is_offline", ":", "\n", "            ", "return", "self", ".", "get_patch_offline", "(", "idx", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "get_patch_online", "(", "idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.general3dmatch.Patch3DMatch.__len__": [[168, 173], ["len", "os.listdir", "os.listdir", "os.listdir", "os.listdir"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "size_dataset", "=", "len", "(", "os", ".", "listdir", "(", "self", ".", "path_data", ")", ")", "\n", "if", "self", ".", "is_offline", ":", "\n", "            ", "size_dataset", "=", "size_dataset", "//", "2", "\n", "", "return", "size_dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.general3dmatch.Fragment3DMatch.__init__": [[229, 286], ["torch_points3d.datasets.registration.base3dmatch.Base3DMatch.__init__", "os.join", "os.join", "os.listdir", "os.listdir", "os.listdir", "os.listdir"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "root", ",", "\n", "num_frame_per_fragment", "=", "50", ",", "\n", "mode", "=", "\"train_small\"", ",", "\n", "min_overlap_ratio", "=", "0.3", ",", "\n", "max_overlap_ratio", "=", "1.0", ",", "\n", "max_dist_overlap", "=", "0.01", ",", "\n", "tsdf_voxel_size", "=", "0.02", ",", "\n", "limit_size", "=", "700", ",", "\n", "depth_thresh", "=", "6", ",", "\n", "is_fine", "=", "True", ",", "\n", "transform", "=", "None", ",", "\n", "pre_transform", "=", "None", ",", "\n", "pre_transform_fragment", "=", "None", ",", "\n", "pre_filter", "=", "None", ",", "\n", "verbose", "=", "False", ",", "\n", "debug", "=", "False", ",", "\n", "is_online_matching", "=", "False", ",", "\n", "num_pos_pairs", "=", "1024", ",", "\n", "self_supervised", "=", "False", ",", "\n", "min_size_block", "=", "0.3", ",", "\n", "max_size_block", "=", "2", ",", "\n", "ss_transform", "=", "None", ",", "\n", "min_points", "=", "500", ",", "\n", "use_fps", "=", "False", "\n", ")", ":", "\n", "        ", "self", ".", "is_patch", "=", "False", "\n", "Base3DMatch", ".", "__init__", "(", "\n", "self", ",", "\n", "root", ",", "\n", "num_frame_per_fragment", ",", "\n", "mode", ",", "\n", "min_overlap_ratio", ",", "\n", "max_overlap_ratio", ",", "\n", "max_dist_overlap", ",", "\n", "tsdf_voxel_size", ",", "\n", "limit_size", ",", "\n", "depth_thresh", ",", "\n", "is_fine", ",", "\n", "transform", ",", "\n", "pre_transform", ",", "\n", "pre_transform_fragment", ",", "\n", "pre_filter", ",", "\n", "verbose", ",", "\n", "debug", ",", "\n", ")", "\n", "self", ".", "path_match", "=", "osp", ".", "join", "(", "self", ".", "processed_dir", ",", "self", ".", "mode", ",", "\"matches\"", ")", "\n", "self", ".", "list_fragment", "=", "[", "f", "for", "f", "in", "os", ".", "listdir", "(", "self", ".", "path_match", ")", "if", "\"matches\"", "in", "f", "]", "\n", "self", ".", "is_online_matching", "=", "is_online_matching", "\n", "self", ".", "num_pos_pairs", "=", "num_pos_pairs", "\n", "self", ".", "self_supervised", "=", "self_supervised", "\n", "self", ".", "min_size_block", "=", "min_size_block", "\n", "self", ".", "max_size_block", "=", "max_size_block", "\n", "self", ".", "ss_transform", "=", "ss_transform", "\n", "self", ".", "min_points", "=", "min_points", "\n", "self", ".", "use_fps", "=", "use_fps", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.general3dmatch.Fragment3DMatch.get": [[287, 289], ["general3dmatch.Fragment3DMatch.get_fragment"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base_siamese_dataset.GeneralFragment.get_fragment"], ["", "def", "get", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "get_fragment", "(", "idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.general3dmatch.Fragment3DMatch.__len__": [[290, 292], ["len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "list_fragment", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.general3dmatch.Fragment3DMatch.process": [[293, 295], ["super().process"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.classification.modelnet.SampledModelNet.process"], ["", "def", "process", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "process", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.general3dmatch.Fragment3DMatch.download": [[296, 298], ["super().download"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.classification.modelnet.SampledModelNet.download"], ["", "def", "download", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "download", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.general3dmatch.General3DMatchDataset.__init__": [[301, 393], ["torch_points3d.datasets.registration.base_siamese_dataset.BaseSiameseDataset.__init__", "getattr", "getattr", "general3dmatch.Patch3DMatch", "general3dmatch.Patch3DMatch", "general3dmatch.Fragment3DMatch", "general3dmatch.Fragment3DMatch", "torch_points3d.datasets.registration.test3dmatch.TestPair3DMatch"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dataset_opt", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dataset_opt", ")", "\n", "\n", "pre_transform", "=", "self", ".", "pre_transform", "\n", "ss_transform", "=", "getattr", "(", "self", ",", "\"ss_transform\"", ",", "None", ")", "\n", "train_transform", "=", "self", ".", "train_transform", "\n", "val_transform", "=", "self", ".", "val_transform", "\n", "test_transform", "=", "self", ".", "test_transform", "\n", "pre_filter", "=", "self", ".", "pre_filter", "\n", "test_pre_filter", "=", "getattr", "(", "self", ",", "\"test_pre_filter\"", ",", "None", ")", "\n", "self", ".", "is_patch", "=", "dataset_opt", ".", "is_patch", "\n", "\n", "if", "dataset_opt", ".", "is_patch", ":", "\n", "            ", "self", ".", "train_dataset", "=", "Patch3DMatch", "(", "\n", "root", "=", "self", ".", "_data_path", ",", "\n", "mode", "=", "\"train\"", ",", "\n", "radius_patch", "=", "dataset_opt", ".", "radius_patch", ",", "\n", "num_frame_per_fragment", "=", "dataset_opt", ".", "num_frame_per_fragment", ",", "\n", "max_dist_overlap", "=", "dataset_opt", ".", "max_dist_overlap", ",", "\n", "min_overlap_ratio", "=", "dataset_opt", ".", "min_overlap_ratio", ",", "\n", "tsdf_voxel_size", "=", "dataset_opt", ".", "tsdf_voxel_size", ",", "\n", "limit_size", "=", "dataset_opt", ".", "limit_size", ",", "\n", "depth_thresh", "=", "dataset_opt", ".", "depth_thresh", ",", "\n", "pre_transform", "=", "pre_transform", ",", "\n", "transform", "=", "train_transform", ",", "\n", "num_random_pt", "=", "dataset_opt", ".", "num_random_pt", ",", "\n", "is_offline", "=", "dataset_opt", ".", "is_offline", ",", "\n", "pre_filter", "=", "pre_filter", "\n", ")", "\n", "\n", "self", ".", "val_dataset", "=", "Patch3DMatch", "(", "\n", "root", "=", "self", ".", "_data_path", ",", "\n", "mode", "=", "\"val\"", ",", "\n", "radius_patch", "=", "dataset_opt", ".", "radius_patch", ",", "\n", "num_frame_per_fragment", "=", "dataset_opt", ".", "num_frame_per_fragment", ",", "\n", "max_dist_overlap", "=", "dataset_opt", ".", "max_dist_overlap", ",", "\n", "min_overlap_ratio", "=", "dataset_opt", ".", "min_overlap_ratio", ",", "\n", "tsdf_voxel_size", "=", "dataset_opt", ".", "tsdf_voxel_size", ",", "\n", "limit_size", "=", "dataset_opt", ".", "limit_size", ",", "\n", "depth_thresh", "=", "dataset_opt", ".", "depth_thresh", ",", "\n", "pre_transform", "=", "pre_transform", ",", "\n", "transform", "=", "val_transform", ",", "\n", "num_random_pt", "=", "dataset_opt", ".", "num_random_pt", ",", "\n", "is_offline", "=", "dataset_opt", ".", "is_offline", ",", "\n", "pre_filter", "=", "test_pre_filter", ",", "\n", ")", "\n", "", "else", ":", "\n", "\n", "            ", "self", ".", "train_dataset", "=", "Fragment3DMatch", "(", "\n", "root", "=", "self", ".", "_data_path", ",", "\n", "mode", "=", "\"train\"", ",", "\n", "num_frame_per_fragment", "=", "dataset_opt", ".", "num_frame_per_fragment", ",", "\n", "max_dist_overlap", "=", "dataset_opt", ".", "max_dist_overlap", ",", "\n", "min_overlap_ratio", "=", "dataset_opt", ".", "min_overlap_ratio", ",", "\n", "tsdf_voxel_size", "=", "dataset_opt", ".", "tsdf_voxel_size", ",", "\n", "limit_size", "=", "dataset_opt", ".", "limit_size", ",", "\n", "depth_thresh", "=", "dataset_opt", ".", "depth_thresh", ",", "\n", "pre_transform", "=", "pre_transform", ",", "\n", "transform", "=", "train_transform", ",", "\n", "pre_filter", "=", "pre_filter", ",", "\n", "is_online_matching", "=", "dataset_opt", ".", "is_online_matching", ",", "\n", "num_pos_pairs", "=", "dataset_opt", ".", "num_pos_pairs", ",", "\n", "self_supervised", "=", "dataset_opt", ".", "self_supervised", ",", "\n", "min_size_block", "=", "dataset_opt", ".", "min_size_block", ",", "\n", "max_size_block", "=", "dataset_opt", ".", "max_size_block", ",", "\n", "ss_transform", "=", "ss_transform", ",", "\n", "min_points", "=", "dataset_opt", ".", "min_points", ",", "\n", "use_fps", "=", "dataset_opt", ".", "use_fps", "\n", ")", "\n", "\n", "self", ".", "val_dataset", "=", "Fragment3DMatch", "(", "\n", "root", "=", "self", ".", "_data_path", ",", "\n", "mode", "=", "\"val\"", ",", "\n", "num_frame_per_fragment", "=", "dataset_opt", ".", "num_frame_per_fragment", ",", "\n", "max_dist_overlap", "=", "dataset_opt", ".", "max_dist_overlap", ",", "\n", "min_overlap_ratio", "=", "dataset_opt", ".", "min_overlap_ratio", ",", "\n", "tsdf_voxel_size", "=", "dataset_opt", ".", "tsdf_voxel_size", ",", "\n", "limit_size", "=", "dataset_opt", ".", "limit_size", ",", "\n", "depth_thresh", "=", "dataset_opt", ".", "depth_thresh", ",", "\n", "pre_transform", "=", "pre_transform", ",", "\n", "transform", "=", "val_transform", ",", "\n", "is_online_matching", "=", "False", ",", "\n", "num_pos_pairs", "=", "dataset_opt", ".", "num_pos_pairs", ",", "\n", "self_supervised", "=", "False", ",", "\n", ")", "\n", "self", ".", "test_dataset", "=", "TestPair3DMatch", "(", "\n", "root", "=", "self", ".", "_data_path", ",", "\n", "pre_transform", "=", "pre_transform", ",", "\n", "transform", "=", "test_transform", ",", "\n", "num_pos_pairs", "=", "50", ",", "\n", "max_dist_overlap", "=", "dataset_opt", ".", "max_dist_overlap", ",", "\n", "self_supervised", "=", "False", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.testkaist.TestPairKaist.__init__": [[24, 53], ["torch_points3d.datasets.registration.basetest.BasePCRBTest.__init__"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["def", "__init__", "(", "self", ",", "root", ",", "\n", "transform", "=", "None", ",", "\n", "pre_transform", "=", "None", ",", "\n", "pre_filter", "=", "None", ",", "\n", "verbose", "=", "False", ",", "\n", "debug", "=", "False", ",", "\n", "num_pos_pairs", "=", "200", ",", "\n", "max_dist_overlap", "=", "0.01", ",", "\n", "self_supervised", "=", "False", ",", "\n", "min_size_block", "=", "2", ",", "\n", "max_size_block", "=", "3", ",", "\n", "min_points", "=", "500", ",", "\n", "ss_transform", "=", "None", ",", "\n", "use_fps", "=", "False", ")", ":", "\n", "        ", "self", ".", "link_pairs", "=", "\"https://cloud.mines-paristech.fr/index.php/s/4cTpY4CKPAXFGk4/download\"", "\n", "BasePCRBTest", ".", "__init__", "(", "self", ",", "\n", "root", "=", "root", ",", "\n", "transform", "=", "transform", ",", "\n", "pre_transform", "=", "pre_transform", ",", "\n", "pre_filter", "=", "pre_filter", ",", "\n", "verbose", "=", "verbose", ",", "debug", "=", "debug", ",", "\n", "max_dist_overlap", "=", "max_dist_overlap", ",", "\n", "num_pos_pairs", "=", "num_pos_pairs", ",", "\n", "self_supervised", "=", "self_supervised", ",", "\n", "min_size_block", "=", "min_size_block", ",", "\n", "max_size_block", "=", "max_size_block", ",", "\n", "min_points", "=", "min_points", ",", "\n", "ss_transform", "=", "ss_transform", ",", "\n", "use_fps", "=", "use_fps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.testkaist.TestPairKaist.download": [[54, 71], ["os.path.join", "torch_points3d.datasets.registration.utils.files_exist", "log.info", "testkaist.TestPairKaist.download_pairs", "log.warning", "torch_points3d.datasets.registration.utils.makedirs", "log.info", "os.path.join", "gdown.download", "os.remove", "zipfile.ZipFile", "zip_obj.extractall"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.files_exist", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.basetest.BasePCRBTest.download_pairs", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.makedirs", "home.repos.pwc.inspect_result.drprojects_deepviewagg.classification.modelnet.SampledModelNet.download"], ["", "def", "download", "(", "self", ")", ":", "\n", "        ", "folder", "=", "os", ".", "path", ".", "join", "(", "self", ".", "raw_dir", ",", "\"test\"", ")", "\n", "if", "files_exist", "(", "[", "folder", "]", ")", ":", "# pragma: no cover", "\n", "            ", "log", ".", "warning", "(", "\"already downloaded {}\"", ".", "format", "(", "\"test\"", ")", ")", "\n", "return", "\n", "", "else", ":", "\n", "            ", "makedirs", "(", "folder", ")", "\n", "", "log", ".", "info", "(", "\"Download elements in the file {}...\"", ".", "format", "(", "folder", ")", ")", "\n", "for", "name", ",", "url", "in", "self", ".", "DATASETS", ":", "\n", "            ", "log", ".", "info", "(", "f'Downloading sequence {name}'", ")", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "name", "+", "\".zip\"", ")", "\n", "gdown", ".", "download", "(", "url", ",", "filename", ",", "quiet", "=", "False", ")", "\n", "with", "ZipFile", "(", "filename", ",", "'r'", ")", "as", "zip_obj", ":", "\n", "                ", "zip_obj", ".", "extractall", "(", "folder", ")", "\n", "", "os", ".", "remove", "(", "filename", ")", "\n", "\n", "", "self", ".", "download_pairs", "(", "folder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.testkaist.TestPairKaist.process": [[72, 74], ["super().process"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.classification.modelnet.SampledModelNet.process"], ["", "def", "process", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "process", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.testkaist.KaistDataset.__init__": [[84, 112], ["torch_points3d.datasets.registration.base_siamese_dataset.BaseSiameseDataset.__init__", "getattr", "testkaist.TestPairKaist", "testkaist.TestPairKaist"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["def", "__init__", "(", "self", ",", "dataset_opt", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dataset_opt", ")", "\n", "pre_transform", "=", "self", ".", "pre_transform", "\n", "train_transform", "=", "self", ".", "train_transform", "\n", "ss_transform", "=", "getattr", "(", "self", ",", "\"ss_transform\"", ",", "None", ")", "\n", "test_transform", "=", "self", ".", "test_transform", "\n", "\n", "# training is similar to test but only unsupervised training is allowed XD", "\n", "self", ".", "train_dataset", "=", "TestPairKaist", "(", "\n", "root", "=", "self", ".", "_data_path", ",", "\n", "pre_transform", "=", "pre_transform", ",", "\n", "transform", "=", "train_transform", ",", "\n", "max_dist_overlap", "=", "dataset_opt", ".", "max_dist_overlap", ",", "\n", "self_supervised", "=", "True", ",", "\n", "min_size_block", "=", "dataset_opt", ".", "min_size_block", ",", "\n", "max_size_block", "=", "dataset_opt", ".", "max_size_block", ",", "\n", "num_pos_pairs", "=", "dataset_opt", ".", "num_pos_pairs", ",", "\n", "min_points", "=", "dataset_opt", ".", "min_points", ",", "\n", "ss_transform", "=", "ss_transform", ",", "\n", "use_fps", "=", "dataset_opt", ".", "use_fps", ")", "\n", "self", ".", "test_dataset", "=", "TestPairKaist", "(", "\n", "root", "=", "self", ".", "_data_path", ",", "\n", "pre_transform", "=", "pre_transform", ",", "\n", "transform", "=", "test_transform", ",", "\n", "max_dist_overlap", "=", "dataset_opt", ".", "max_dist_overlap", ",", "\n", "num_pos_pairs", "=", "dataset_opt", ".", "num_pos_pairs", ",", "\n", "self_supervised", "=", "False", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.testtum.TestPairTUM.__init__": [[28, 58], ["torch_points3d.datasets.registration.basetest.BasePCRBTest.__init__"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["def", "__init__", "(", "self", ",", "root", ",", "\n", "transform", "=", "None", ",", "\n", "pre_transform", "=", "None", ",", "\n", "pre_filter", "=", "None", ",", "\n", "verbose", "=", "False", ",", "\n", "debug", "=", "False", ",", "\n", "num_pos_pairs", "=", "200", ",", "\n", "max_dist_overlap", "=", "0.01", ",", "\n", "self_supervised", "=", "False", ",", "\n", "min_size_block", "=", "2", ",", "\n", "max_size_block", "=", "3", ",", "\n", "min_points", "=", "500", ",", "\n", "ss_transform", "=", "None", ",", "\n", "use_fps", "=", "False", ")", ":", "\n", "        ", "self", ".", "link_pairs", "=", "\"https://cloud.mines-paristech.fr/index.php/s/yjd20Ih9ExqLlHM/download\"", "\n", "BasePCRBTest", ".", "__init__", "(", "self", ",", "\n", "root", "=", "root", ",", "\n", "transform", "=", "transform", ",", "\n", "pre_transform", "=", "pre_transform", ",", "\n", "pre_filter", "=", "pre_filter", ",", "\n", "verbose", "=", "verbose", ",", "debug", "=", "debug", ",", "\n", "max_dist_overlap", "=", "max_dist_overlap", ",", "\n", "num_pos_pairs", "=", "num_pos_pairs", ",", "\n", "self_supervised", "=", "self_supervised", ",", "\n", "min_size_block", "=", "min_size_block", ",", "\n", "max_size_block", "=", "max_size_block", ",", "\n", "min_points", "=", "min_points", ",", "\n", "ss_transform", "=", "ss_transform", ",", "\n", "use_fps", "=", "use_fps", ",", "\n", "is_name_path_int", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.testtum.TestPairTUM.download": [[59, 78], ["os.path.join", "torch_points3d.datasets.registration.utils.files_exist", "log.info", "testtum.TestPairTUM.download_pairs", "log.warning", "torch_points3d.datasets.registration.utils.makedirs", "os.path.join", "os.mkdir", "log.info", "os.path.join", "gdown.download", "os.remove", "zipfile.ZipFile", "zip_obj.extractall"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.files_exist", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.basetest.BasePCRBTest.download_pairs", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.makedirs", "home.repos.pwc.inspect_result.drprojects_deepviewagg.classification.modelnet.SampledModelNet.download"], ["", "def", "download", "(", "self", ")", ":", "\n", "        ", "folder", "=", "os", ".", "path", ".", "join", "(", "self", ".", "raw_dir", ",", "\"test\"", ")", "\n", "if", "files_exist", "(", "[", "folder", "]", ")", ":", "# pragma: no cover", "\n", "            ", "log", ".", "warning", "(", "\"already downloaded {}\"", ".", "format", "(", "\"test\"", ")", ")", "\n", "return", "\n", "", "else", ":", "\n", "            ", "makedirs", "(", "folder", ")", "\n", "", "log", ".", "info", "(", "\"Download elements in the file {}...\"", ".", "format", "(", "folder", ")", ")", "\n", "for", "name", ",", "url", "in", "self", ".", "DATASETS", ":", "\n", "            ", "dataset_folder", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "name", ")", "\n", "os", ".", "mkdir", "(", "dataset_folder", ")", "\n", "log", ".", "info", "(", "f'Downloading sequence {name}'", ")", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "name", "+", "\".zip\"", ")", "\n", "gdown", ".", "download", "(", "url", ",", "filename", ",", "quiet", "=", "False", ")", "\n", "with", "ZipFile", "(", "filename", ",", "'r'", ")", "as", "zip_obj", ":", "\n", "                ", "zip_obj", ".", "extractall", "(", "dataset_folder", ")", "\n", "", "os", ".", "remove", "(", "filename", ")", "\n", "\n", "", "self", ".", "download_pairs", "(", "folder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.testtum.TestPairTUM.process": [[79, 81], ["super().process"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.classification.modelnet.SampledModelNet.process"], ["", "def", "process", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "process", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.testtum.TUMDataset.__init__": [[91, 117], ["torch_points3d.datasets.registration.base_siamese_dataset.BaseSiameseDataset.__init__", "getattr", "testtum.TestPairTUM", "testtum.TestPairTUM"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["def", "__init__", "(", "self", ",", "dataset_opt", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dataset_opt", ")", "\n", "pre_transform", "=", "self", ".", "pre_transform", "\n", "train_transform", "=", "self", ".", "train_transform", "\n", "ss_transform", "=", "getattr", "(", "self", ",", "\"ss_transform\"", ",", "None", ")", "\n", "test_transform", "=", "self", ".", "test_transform", "\n", "\n", "# training is similar to test but only unsupervised training is allowed XD", "\n", "self", ".", "train_dataset", "=", "TestPairTUM", "(", "root", "=", "self", ".", "_data_path", ",", "\n", "pre_transform", "=", "pre_transform", ",", "\n", "transform", "=", "train_transform", ",", "\n", "max_dist_overlap", "=", "dataset_opt", ".", "max_dist_overlap", ",", "\n", "self_supervised", "=", "True", ",", "\n", "min_size_block", "=", "dataset_opt", ".", "min_size_block", ",", "\n", "max_size_block", "=", "dataset_opt", ".", "max_size_block", ",", "\n", "num_pos_pairs", "=", "dataset_opt", ".", "num_pos_pairs", ",", "\n", "min_points", "=", "dataset_opt", ".", "min_points", ",", "\n", "ss_transform", "=", "ss_transform", ",", "\n", "use_fps", "=", "dataset_opt", ".", "use_fps", ")", "\n", "self", ".", "test_dataset", "=", "TestPairTUM", "(", "root", "=", "self", ".", "_data_path", ",", "\n", "pre_transform", "=", "pre_transform", ",", "\n", "transform", "=", "test_transform", ",", "\n", "max_dist_overlap", "=", "dataset_opt", ".", "max_dist_overlap", ",", "\n", "num_pos_pairs", "=", "dataset_opt", ".", "num_pos_pairs", ",", "\n", "self_supervised", "=", "False", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.testeth.TestPairETH.__init__": [[65, 95], ["torch_points3d.datasets.registration.basetest.BasePCRBTest.__init__"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["def", "__init__", "(", "self", ",", "root", ",", "\n", "transform", "=", "None", ",", "\n", "pre_transform", "=", "None", ",", "\n", "pre_filter", "=", "None", ",", "\n", "verbose", "=", "False", ",", "\n", "debug", "=", "False", ",", "\n", "num_pos_pairs", "=", "200", ",", "\n", "max_dist_overlap", "=", "0.01", ",", "\n", "self_supervised", "=", "False", ",", "\n", "min_size_block", "=", "2", ",", "\n", "max_size_block", "=", "3", ",", "\n", "min_points", "=", "500", ",", "\n", "ss_transform", "=", "None", ",", "\n", "use_fps", "=", "False", ")", ":", "\n", "        ", "self", ".", "link_pairs", "=", "\"https://cloud.mines-paristech.fr/index.php/s/aIRBieRybts3kEs/download\"", "\n", "self", ".", "link_pose", "=", "\"https://cloud.mines-paristech.fr/index.php/s/U0F6CFKDCtXcAl7/download\"", "\n", "BasePCRBTest", ".", "__init__", "(", "self", ",", "\n", "root", "=", "root", ",", "\n", "transform", "=", "transform", ",", "\n", "pre_transform", "=", "pre_transform", ",", "\n", "pre_filter", "=", "pre_filter", ",", "\n", "verbose", "=", "verbose", ",", "debug", "=", "debug", ",", "\n", "max_dist_overlap", "=", "max_dist_overlap", ",", "\n", "num_pos_pairs", "=", "num_pos_pairs", ",", "\n", "self_supervised", "=", "self_supervised", ",", "\n", "min_size_block", "=", "min_size_block", ",", "\n", "max_size_block", "=", "max_size_block", ",", "\n", "min_points", "=", "min_points", ",", "\n", "ss_transform", "=", "ss_transform", ",", "\n", "use_fps", "=", "use_fps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.testeth.TestPairETH.download": [[96, 128], ["os.join", "os.join", "print", "torch_points3d.datasets.registration.utils.files_exist", "log.info", "testeth.TestPairETH.download_pairs", "requests.get", "os.remove", "os.remove", "os.remove", "os.remove", "log.warning", "torch_points3d.datasets.registration.utils.makedirs", "requests.get", "glob.glob", "glob.glob", "os.remove", "os.remove", "os.remove", "os.remove", "open", "archive.write", "zipfile.ZipFile", "log.info", "zip_obj.extractall", "os.join", "os.join", "open", "archive.write", "zipfile.ZipFile", "log.info", "zip_obj.extractall", "log.info", "testeth.asl_to_pcd", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.remove", "os.remove", "os.remove", "os.remove"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.files_exist", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.basetest.BasePCRBTest.download_pairs", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.makedirs", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.testeth.asl_to_pcd"], ["", "def", "download", "(", "self", ")", ":", "\n", "        ", "folder", "=", "osp", ".", "join", "(", "self", ".", "raw_dir", ",", "\"test\"", ")", "\n", "print", "(", "folder", ")", "\n", "if", "files_exist", "(", "[", "folder", "]", ")", ":", "# pragma: no cover", "\n", "            ", "log", ".", "warning", "(", "\"already downloaded {}\"", ".", "format", "(", "\"test\"", ")", ")", "\n", "return", "\n", "", "else", ":", "\n", "            ", "makedirs", "(", "folder", ")", "\n", "", "log", ".", "info", "(", "\"Download elements in the file {}...\"", ".", "format", "(", "folder", ")", ")", "\n", "for", "name", ",", "url", "in", "self", ".", "DATASETS", ":", "\n", "            ", "req", "=", "requests", ".", "get", "(", "url", ")", "\n", "with", "open", "(", "osp", ".", "join", "(", "folder", ",", "name", "+", "\".zip\"", ")", ",", "\"wb\"", ")", "as", "archive", ":", "\n", "                ", "archive", ".", "write", "(", "req", ".", "content", ")", "\n", "", "with", "ZipFile", "(", "osp", ".", "join", "(", "folder", ",", "name", "+", "\".zip\"", ")", ",", "\"r\"", ")", "as", "zip_obj", ":", "\n", "                ", "log", ".", "info", "(", "\"extracting dataset {}\"", ".", "format", "(", "name", ")", ")", "\n", "zip_obj", ".", "extractall", "(", "osp", ".", "join", "(", "folder", ",", "name", ")", ")", "\n", "log", ".", "info", "(", "\"converting to PCD\"", ")", "\n", "asl_to_pcd", "(", "osp", ".", "join", "(", "folder", ",", "name", ")", ")", "\n", "", "file_not_to_remove", "=", "glob", ".", "glob", "(", "osp", ".", "join", "(", "folder", ",", "name", ",", "\"*.pcd\"", ")", ")", "\n", "filelist", "=", "glob", ".", "glob", "(", "osp", ".", "join", "(", "folder", ",", "name", ",", "\"*\"", ")", ")", "\n", "for", "file_to_remove", "in", "filelist", ":", "\n", "                ", "if", "file_to_remove", "not", "in", "file_not_to_remove", ":", "\n", "                    ", "os", ".", "remove", "(", "file_to_remove", ")", "\n", "", "", "os", ".", "remove", "(", "osp", ".", "join", "(", "folder", ",", "name", "+", "\".zip\"", ")", ")", "\n", "", "self", ".", "download_pairs", "(", "folder", ")", "\n", "req", "=", "requests", ".", "get", "(", "self", ".", "link_pose", ")", "\n", "with", "open", "(", "osp", ".", "join", "(", "folder", ",", "\"pose.zip\"", ")", ",", "\"wb\"", ")", "as", "archive", ":", "\n", "            ", "archive", ".", "write", "(", "req", ".", "content", ")", "\n", "", "with", "ZipFile", "(", "osp", ".", "join", "(", "folder", ",", "\"pose.zip\"", ")", ",", "\"r\"", ")", "as", "zip_obj", ":", "\n", "            ", "log", ".", "info", "(", "\"extracting pose\"", ")", "\n", "zip_obj", ".", "extractall", "(", "folder", ")", "\n", "", "os", ".", "remove", "(", "osp", ".", "join", "(", "folder", ",", "\"pose.zip\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.testeth.TestPairETH.process": [[130, 132], ["super().process"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.classification.modelnet.SampledModelNet.process"], ["", "def", "process", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "process", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.testeth.ETHDataset.__init__": [[139, 165], ["torch_points3d.datasets.registration.base_siamese_dataset.BaseSiameseDataset.__init__", "getattr", "testeth.TestPairETH", "testeth.TestPairETH"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["def", "__init__", "(", "self", ",", "dataset_opt", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dataset_opt", ")", "\n", "pre_transform", "=", "self", ".", "pre_transform", "\n", "train_transform", "=", "self", ".", "train_transform", "\n", "ss_transform", "=", "getattr", "(", "self", ",", "\"ss_transform\"", ",", "None", ")", "\n", "test_transform", "=", "self", ".", "test_transform", "\n", "\n", "# training is similar to test but only unsupervised training is allowed XD", "\n", "self", ".", "train_dataset", "=", "TestPairETH", "(", "root", "=", "self", ".", "_data_path", ",", "\n", "pre_transform", "=", "pre_transform", ",", "\n", "transform", "=", "train_transform", ",", "\n", "max_dist_overlap", "=", "dataset_opt", ".", "max_dist_overlap", ",", "\n", "self_supervised", "=", "True", ",", "\n", "min_size_block", "=", "dataset_opt", ".", "min_size_block", ",", "\n", "max_size_block", "=", "dataset_opt", ".", "max_size_block", ",", "\n", "num_pos_pairs", "=", "dataset_opt", ".", "num_pos_pairs", ",", "\n", "min_points", "=", "dataset_opt", ".", "min_points", ",", "\n", "ss_transform", "=", "ss_transform", ",", "\n", "use_fps", "=", "dataset_opt", ".", "use_fps", ")", "\n", "self", ".", "test_dataset", "=", "TestPairETH", "(", "root", "=", "self", ".", "_data_path", ",", "\n", "pre_transform", "=", "pre_transform", ",", "\n", "transform", "=", "test_transform", ",", "\n", "max_dist_overlap", "=", "dataset_opt", ".", "max_dist_overlap", ",", "\n", "num_pos_pairs", "=", "dataset_opt", ".", "num_pos_pairs", ",", "\n", "self_supervised", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.testeth.TestPairETH2.__init__": [[171, 203], ["torch_points3d.datasets.registration.basetest.Base3DMatchTest.__init__", "os.join", "os.join", "os.listdir", "os.listdir", "os.listdir", "os.listdir"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["def", "__init__", "(", "self", ",", "root", ",", "\n", "transform", "=", "None", ",", "\n", "pre_transform", "=", "None", ",", "\n", "pre_filter", "=", "None", ",", "\n", "verbose", "=", "False", ",", "\n", "debug", "=", "False", ",", "\n", "num_pos_pairs", "=", "200", ",", "\n", "max_dist_overlap", "=", "0.01", ",", "\n", "self_supervised", "=", "False", ",", "\n", "ss_transform", "=", "None", ",", "\n", "min_size_block", "=", "0.3", ",", "\n", "max_size_block", "=", "2", ",", "\n", "min_points", "=", "500", ",", "\n", "use_fps", "=", "False", ")", ":", "\n", "        ", "self", ".", "name", "=", "\"eth2\"", "\n", "self", ".", "url", "=", "\"https://cloud.mines-paristech.fr/index.php/s/SuoVN4detclRoE6/download\"", "\n", "Base3DMatchTest", ".", "__init__", "(", "self", ",", "root", "=", "root", ",", "\n", "transform", "=", "transform", ",", "\n", "pre_transform", "=", "pre_transform", ",", "\n", "pre_filter", "=", "pre_filter", ",", "\n", "verbose", "=", "verbose", ",", "debug", "=", "debug", ",", "\n", "max_dist_overlap", "=", "max_dist_overlap", ")", "\n", "self", ".", "num_pos_pairs", "=", "num_pos_pairs", "\n", "self", ".", "path_match", "=", "osp", ".", "join", "(", "self", ".", "processed_dir", ",", "\"test\"", ",", "\"matches\"", ")", "\n", "self", ".", "list_fragment", "=", "[", "f", "for", "f", "in", "os", ".", "listdir", "(", "self", ".", "path_match", ")", "if", "\"matches\"", "in", "f", "]", "\n", "self", ".", "self_supervised", "=", "self_supervised", "\n", "self", ".", "ss_transform", "=", "ss_transform", "\n", "self", ".", "is_online_matching", "=", "False", "\n", "self", ".", "use_fps", "=", "use_fps", "\n", "self", ".", "min_points", "=", "min_points", "\n", "self", ".", "min_size_block", "=", "min_size_block", "\n", "self", ".", "max_size_block", "=", "max_size_block", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.testeth.TestPairETH2.__getitem__": [[204, 206], ["testeth.TestPairETH2.get_fragment"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base_siamese_dataset.GeneralFragment.get_fragment"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "get_fragment", "(", "idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.testeth.TestPairETH2.__len__": [[207, 209], ["len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "list_fragment", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.testeth.TestPairETH2.process": [[210, 212], ["super().process"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.classification.modelnet.SampledModelNet.process"], ["", "def", "process", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "process", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.testeth.TestPairETH2.download": [[213, 231], ["os.join", "os.join", "print", "torch_points3d.datasets.registration.utils.files_exist", "log.info", "requests.get", "log.warning", "torch_points3d.datasets.registration.utils.makedirs", "open", "archive.write", "zipfile.ZipFile", "log.info", "zip_obj.extractall", "os.join", "os.join", "os.join", "os.join"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.files_exist", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.makedirs"], ["", "def", "download", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        TODO: download the datasets\n        \"\"\"", "\n", "folder", "=", "osp", ".", "join", "(", "self", ".", "raw_dir", ",", "\"test\"", ")", "\n", "print", "(", "folder", ")", "\n", "if", "files_exist", "(", "[", "folder", "]", ")", ":", "# pragma: no cover", "\n", "            ", "log", ".", "warning", "(", "\"already downloaded {}\"", ".", "format", "(", "\"test\"", ")", ")", "\n", "return", "\n", "", "else", ":", "\n", "            ", "makedirs", "(", "folder", ")", "\n", "", "log", ".", "info", "(", "\"Download elements in the file {}...\"", ".", "format", "(", "folder", ")", ")", "\n", "req", "=", "requests", ".", "get", "(", "self", ".", "url", ")", "\n", "with", "open", "(", "osp", ".", "join", "(", "folder", ",", "self", ".", "name", "+", "\".zip\"", ")", ",", "\"wb\"", ")", "as", "archive", ":", "\n", "            ", "archive", ".", "write", "(", "req", ".", "content", ")", "\n", "", "with", "ZipFile", "(", "osp", ".", "join", "(", "folder", ",", "self", ".", "name", "+", "\".zip\"", ")", ",", "\"r\"", ")", "as", "zip_obj", ":", "\n", "            ", "log", ".", "info", "(", "\"extracting dataset {}\"", ".", "format", "(", "self", ".", "name", ")", ")", "\n", "zip_obj", ".", "extractall", "(", "folder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.testeth.ETH2Dataset.__init__": [[234, 262], ["torch_points3d.datasets.registration.base_siamese_dataset.BaseSiameseDataset.__init__", "getattr", "testeth.TestPairETH2", "testeth.TestPairETH2"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dataset_opt", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dataset_opt", ")", "\n", "pre_transform", "=", "self", ".", "pre_transform", "\n", "ss_transform", "=", "getattr", "(", "self", ",", "\"ss_transform\"", ",", "None", ")", "\n", "train_transform", "=", "self", ".", "train_transform", "\n", "test_transform", "=", "self", ".", "test_transform", "\n", "\n", "self", ".", "train_dataset", "=", "TestPairETH2", "(", "\n", "root", "=", "self", ".", "_data_path", ",", "\n", "pre_transform", "=", "pre_transform", ",", "\n", "transform", "=", "train_transform", ",", "\n", "num_pos_pairs", "=", "dataset_opt", ".", "num_pos_pairs", ",", "\n", "max_dist_overlap", "=", "dataset_opt", ".", "max_dist_overlap", ",", "\n", "self_supervised", "=", "True", ",", "\n", "min_size_block", "=", "dataset_opt", ".", "min_size_block", ",", "\n", "max_size_block", "=", "dataset_opt", ".", "max_size_block", ",", "\n", "ss_transform", "=", "ss_transform", ",", "\n", "min_points", "=", "dataset_opt", ".", "min_points", ",", "\n", "use_fps", "=", "dataset_opt", ".", "use_fps", "\n", ")", "\n", "\n", "self", ".", "test_dataset", "=", "TestPairETH2", "(", "\n", "root", "=", "self", ".", "_data_path", ",", "\n", "pre_transform", "=", "pre_transform", ",", "\n", "transform", "=", "test_transform", ",", "\n", "num_pos_pairs", "=", "50", ",", "\n", "max_dist_overlap", "=", "dataset_opt", ".", "max_dist_overlap", ",", "\n", "self_supervised", "=", "False", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.testeth.asl_to_pcd": [[32, 53], ["re.compile", "os.listdir", "os.listdir", "re.compile.match", "open", "csv.reader", "open", "out_file.write", "out_file.write", "pattern.match.group", "points.append", "str", "str", "float", "float", "float", "len", "str", "str", "len", "str"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["def", "asl_to_pcd", "(", "folder_name", ")", ":", "\n", "    ", "pattern", "=", "re", ".", "compile", "(", "\"PointCloud(\\d*).csv\"", ")", "\n", "\n", "for", "filename", "in", "os", ".", "listdir", "(", "folder_name", ")", ":", "\n", "        ", "matched_string", "=", "pattern", ".", "match", "(", "filename", ")", "\n", "full_filename", "=", "folder_name", "+", "\"/\"", "+", "filename", "\n", "if", "matched_string", ":", "\n", "            ", "points", "=", "[", "]", "\n", "with", "open", "(", "full_filename", ")", "as", "csv_cloud", ":", "\n", "                ", "csv_reader", "=", "csv", ".", "reader", "(", "csv_cloud", ",", "delimiter", "=", "','", ")", "\n", "line", "=", "0", "\n", "out_filename", "=", "folder_name", "+", "\"/\"", "+", "\"PointCloud\"", "+", "matched_string", ".", "group", "(", "1", ")", "+", "\".pcd\"", "\n", "for", "row", "in", "csv_reader", ":", "\n", "                    ", "if", "line", "!=", "0", ":", "\n", "                        ", "points", ".", "append", "(", "[", "float", "(", "row", "[", "1", "]", ")", ",", "float", "(", "row", "[", "2", "]", ")", ",", "float", "(", "row", "[", "3", "]", ")", "]", ")", "\n", "", "else", ":", "\n", "                        ", "line", "=", "line", "+", "1", "\n", "", "", "", "with", "open", "(", "out_filename", ",", "\"w\"", ")", "as", "out_file", ":", "\n", "                ", "out_file", ".", "write", "(", "\"# .PCD v.7 - Point Cloud Data file format\\nVERSION 0.7\\nFIELDS x y z\\nSIZE 4 4 4\\nTYPE F F F\\nCOUNT 1 1 1\\nWIDTH \"", "+", "str", "(", "len", "(", "points", ")", ")", "+", "\"\\nHEIGHT 1\\nVIEWPOINT 0 0 0 1 0 0 0\\nPOINTS \"", "+", "str", "(", "len", "(", "points", ")", ")", "+", "\"\\nDATA ascii\"", ")", "\n", "for", "point", "in", "points", ":", "\n", "                    ", "out_file", ".", "write", "(", "\"\\n\"", "+", "str", "(", "point", "[", "0", "]", ")", "+", "\" \"", "+", "str", "(", "point", "[", "1", "]", ")", "+", "\" \"", "+", "str", "(", "point", "[", "2", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.modelnet.SiameseModelNet.__init__": [[32, 67], ["torch_points3d.datasets.classification.modelnet.SampledModelNet.__init__"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["def", "__init__", "(", "self", ",", "root", ",", "\n", "name_modelnet", "=", "\"10\"", ",", "\n", "min_size_block", "=", "0.3", ",", "\n", "max_size_block", "=", "2", ",", "\n", "max_dist_overlap", "=", "0.1", ",", "\n", "train", "=", "True", ",", "\n", "transform", "=", "None", ",", "\n", "pre_transform", "=", "None", ",", "\n", "pre_filter", "=", "None", ",", "\n", "num_pos_pairs", "=", "1024", ",", "\n", "ss_transform", "=", "None", ",", "\n", "min_points", "=", "500", ",", "\n", "use_fps", "=", "False", "\n", ")", ":", "\n", "        ", "SampledModelNet", ".", "__init__", "(", "self", ",", "\n", "root", ",", "\n", "name_modelnet", ",", "\n", "train", ",", "\n", "transform", ",", "\n", "pre_transform", ",", "\n", "pre_filter", ")", "\n", "self", ".", "self_supervised", "=", "True", "# only self supervised is allowed for modelnet", "\n", "self", ".", "is_online_matching", "=", "False", "\n", "self", ".", "num_pos_pairs", "=", "num_pos_pairs", "\n", "self", ".", "min_size_block", "=", "min_size_block", "\n", "self", ".", "max_size_block", "=", "max_size_block", "\n", "self", ".", "max_dist_overlap", "=", "max_dist_overlap", "\n", "self", ".", "ss_transform", "=", "ss_transform", "\n", "self", ".", "min_points", "=", "min_points", "\n", "self", ".", "train", "=", "train", "\n", "self", ".", "use_fps", "=", "use_fps", "\n", "if", "(", "self", ".", "train", ")", ":", "\n", "            ", "self", ".", "name", "=", "\"train\"", "\n", "", "else", ":", "\n", "            ", "self", ".", "name", "=", "\"test\"", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.modelnet.SiameseModelNet.get_model": [[68, 87], ["modelnet.SiameseModelNet.data.__class__", "hasattr", "torch.is_tensor", "slices[].item", "slices[].item", "list", "slice", "itertools.repeat", "slice", "slice", "item.dim", "modelnet.SiameseModelNet.data.__cat_dim__"], "methods", ["None"], ["", "", "def", "get_model", "(", "self", ",", "idx", ")", ":", "\n", "        ", "data", "=", "self", ".", "data", ".", "__class__", "(", ")", "\n", "\n", "if", "hasattr", "(", "self", ".", "data", ",", "'__num_nodes__'", ")", ":", "\n", "            ", "data", ".", "num_nodes", "=", "self", ".", "data", ".", "__num_nodes__", "[", "idx", "]", "\n", "\n", "", "for", "key", "in", "self", ".", "data", ".", "keys", ":", "\n", "            ", "item", ",", "slices", "=", "self", ".", "data", "[", "key", "]", ",", "self", ".", "slices", "[", "key", "]", "\n", "start", ",", "end", "=", "slices", "[", "idx", "]", ".", "item", "(", ")", ",", "slices", "[", "idx", "+", "1", "]", ".", "item", "(", ")", "\n", "# print(slices[idx], slices[idx + 1])", "\n", "if", "torch", ".", "is_tensor", "(", "item", ")", ":", "\n", "                ", "s", "=", "list", "(", "repeat", "(", "slice", "(", "None", ")", ",", "item", ".", "dim", "(", ")", ")", ")", "\n", "s", "[", "self", ".", "data", ".", "__cat_dim__", "(", "key", ",", "item", ")", "]", "=", "slice", "(", "start", ",", "end", ")", "\n", "", "elif", "start", "+", "1", "==", "end", ":", "\n", "                ", "s", "=", "slices", "[", "start", "]", "\n", "", "else", ":", "\n", "                ", "s", "=", "slice", "(", "start", ",", "end", ")", "\n", "", "data", "[", "key", "]", "=", "item", "[", "s", "]", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.modelnet.SiameseModelNet.get_raw_pair": [[88, 96], ["modelnet.SiameseModelNet.get_model", "modelnet.SiameseModelNet.get_model", "modelnet.SiameseModelNet.unsupervised_preprocess"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.modelnet.SiameseModelNet.get_model", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.modelnet.SiameseModelNet.get_model", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base_siamese_dataset.GeneralFragment.unsupervised_preprocess"], ["", "def", "get_raw_pair", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\"\n        \"\"\"", "\n", "data_source_o", "=", "self", ".", "get_model", "(", "idx", ")", "\n", "data_target_o", "=", "self", ".", "get_model", "(", "idx", ")", "\n", "data_source", ",", "data_target", ",", "new_pair", "=", "self", ".", "unsupervised_preprocess", "(", "\n", "data_source_o", ",", "data_target_o", ")", "\n", "return", "data_source", ",", "data_target", ",", "new_pair", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.modelnet.SiameseModelNet.__getitem__": [[97, 100], ["modelnet.SiameseModelNet.get_fragment"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base_siamese_dataset.GeneralFragment.get_fragment"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "res", "=", "self", ".", "get_fragment", "(", "idx", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.modelnet.SiameseModelNet.get_name": [[101, 104], ["modelnet.SiameseModelNet.get_model", "modelnet.SiameseModelNet.y.item"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.modelnet.SiameseModelNet.get_model"], ["", "def", "get_name", "(", "self", ",", "idx", ")", ":", "\n", "        ", "data", "=", "self", ".", "get_model", "(", "idx", ")", "\n", "return", "data", ".", "y", ".", "item", "(", ")", ",", "\"{}_source\"", ".", "format", "(", "idx", ")", ",", "\"{}_target\"", ".", "format", "(", "idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.modelnet.SiameseModelNet.process": [[105, 107], ["super().process"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.classification.modelnet.SampledModelNet.process"], ["", "def", "process", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "process", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.modelnet.SiameseModelNet.download": [[108, 110], ["super().download"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.classification.modelnet.SampledModelNet.download"], ["", "def", "download", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "download", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.modelnet.SiameseModelNetDataset.__init__": [[114, 149], ["torch_points3d.datasets.registration.base_siamese_dataset.BaseSiameseDataset.__init__", "getattr", "modelnet.SiameseModelNet", "modelnet.SiameseModelNet"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dataset_opt", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dataset_opt", ")", "\n", "pre_transform", "=", "self", ".", "pre_transform", "\n", "ss_transform", "=", "getattr", "(", "self", ",", "\"ss_transform\"", ",", "None", ")", "\n", "train_transform", "=", "self", ".", "train_transform", "\n", "test_transform", "=", "self", ".", "test_transform", "\n", "pre_filter", "=", "self", ".", "pre_filter", "\n", "\n", "self", ".", "train_dataset", "=", "SiameseModelNet", "(", "\n", "root", "=", "self", ".", "_data_path", ",", "\n", "name_modelnet", "=", "dataset_opt", ".", "name_modelnet", ",", "\n", "train", "=", "True", ",", "\n", "min_size_block", "=", "dataset_opt", ".", "min_size_block", ",", "\n", "max_size_block", "=", "dataset_opt", ".", "max_size_block", ",", "\n", "max_dist_overlap", "=", "dataset_opt", ".", "max_dist_overlap", ",", "\n", "pre_transform", "=", "pre_transform", ",", "\n", "transform", "=", "train_transform", ",", "\n", "pre_filter", "=", "pre_filter", ",", "\n", "num_pos_pairs", "=", "dataset_opt", ".", "num_pos_pairs", ",", "\n", "ss_transform", "=", "ss_transform", ",", "\n", "min_points", "=", "dataset_opt", ".", "min_points", ",", "\n", "use_fps", "=", "dataset_opt", ".", "use_fps", ")", "\n", "\n", "self", ".", "test_dataset", "=", "SiameseModelNet", "(", "\n", "root", "=", "self", ".", "_data_path", ",", "\n", "name_modelnet", "=", "dataset_opt", ".", "name_modelnet", ",", "\n", "train", "=", "False", ",", "\n", "min_size_block", "=", "dataset_opt", ".", "min_size_block", ",", "\n", "max_size_block", "=", "dataset_opt", ".", "max_size_block", ",", "\n", "max_dist_overlap", "=", "dataset_opt", ".", "max_dist_overlap", ",", "\n", "pre_transform", "=", "pre_transform", ",", "\n", "transform", "=", "test_transform", ",", "\n", "pre_filter", "=", "pre_filter", ",", "\n", "num_pos_pairs", "=", "dataset_opt", ".", "num_pos_pairs", ",", "\n", "min_points", "=", "dataset_opt", ".", "min_points", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.kitti.FragmentKitti.__init__": [[23, 57], ["torch_points3d.datasets.registration.base_kitti.BaseKitti.__init__", "os.join", "os.join", "os.listdir", "os.listdir", "os.listdir", "os.listdir"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["def", "__init__", "(", "self", ",", "root", ",", "\n", "mode", "=", "'train'", ",", "\n", "self_supervised", "=", "False", ",", "\n", "min_size_block", "=", "0.3", ",", "\n", "max_size_block", "=", "2", ",", "\n", "max_dist_overlap", "=", "0.01", ",", "\n", "max_time_distance", "=", "3", ",", "\n", "min_dist", "=", "10", ",", "\n", "transform", "=", "None", ",", "\n", "pre_transform", "=", "None", ",", "\n", "pre_filter", "=", "None", ",", "\n", "is_online_matching", "=", "False", ",", "\n", "num_pos_pairs", "=", "1024", ",", "\n", "ss_transform", "=", "None", ",", "\n", "min_points", "=", "300", ")", ":", "\n", "        ", "BaseKitti", ".", "__init__", "(", "self", ",", "\n", "root", ",", "\n", "mode", ",", "\n", "max_dist_overlap", ",", "\n", "max_time_distance", ",", "\n", "min_dist", ",", "\n", "transform", ",", "\n", "pre_transform", ",", "\n", "pre_filter", ")", "\n", "\n", "self", ".", "path_match", "=", "osp", ".", "join", "(", "self", ".", "processed_dir", ",", "self", ".", "mode", ",", "\"matches\"", ")", "\n", "self", ".", "list_fragment", "=", "[", "f", "for", "f", "in", "os", ".", "listdir", "(", "self", ".", "path_match", ")", "if", "\"matches\"", "in", "f", "]", "\n", "self", ".", "is_online_matching", "=", "is_online_matching", "\n", "self", ".", "num_pos_pairs", "=", "num_pos_pairs", "\n", "self", ".", "self_supervised", "=", "self_supervised", "\n", "self", ".", "min_size_block", "=", "min_size_block", "\n", "self", ".", "max_size_block", "=", "max_size_block", "\n", "self", ".", "ss_transform", "=", "ss_transform", "\n", "self", ".", "min_points", "=", "min_points", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.kitti.FragmentKitti.get": [[58, 60], ["kitti.FragmentKitti.get_fragment"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base_siamese_dataset.GeneralFragment.get_fragment"], ["", "def", "get", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "get_fragment", "(", "idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.kitti.FragmentKitti.__len__": [[61, 63], ["len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "list_fragment", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.kitti.FragmentKitti.process": [[64, 66], ["super().process"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.classification.modelnet.SampledModelNet.process"], ["", "def", "process", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "process", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.kitti.FragmentKitti.download": [[67, 69], ["super().download"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.classification.modelnet.SampledModelNet.download"], ["", "def", "download", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "download", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.kitti.KittiDataset.__init__": [[73, 123], ["torch_points3d.datasets.registration.base_siamese_dataset.BaseSiameseDataset.__init__", "getattr", "kitti.FragmentKitti", "kitti.FragmentKitti", "kitti.FragmentKitti"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dataset_opt", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dataset_opt", ")", "\n", "pre_transform", "=", "self", ".", "pre_transform", "\n", "self", ".", "ss_transform", "=", "getattr", "(", "self", ",", "\"ss_transform\"", ",", "None", ")", "\n", "train_transform", "=", "self", ".", "train_transform", "\n", "test_transform", "=", "self", ".", "test_transform", "\n", "pre_filter", "=", "self", ".", "pre_filter", "\n", "\n", "self", ".", "train_dataset", "=", "FragmentKitti", "(", "\n", "root", "=", "self", ".", "_data_path", ",", "\n", "mode", "=", "\"train\"", ",", "\n", "self_supervised", "=", "dataset_opt", ".", "self_supervised", ",", "\n", "min_size_block", "=", "dataset_opt", ".", "min_size_block", ",", "\n", "max_size_block", "=", "dataset_opt", ".", "max_size_block", ",", "\n", "max_dist_overlap", "=", "dataset_opt", ".", "max_dist_overlap", ",", "\n", "max_time_distance", "=", "dataset_opt", ".", "max_time_distance", ",", "\n", "min_dist", "=", "dataset_opt", ".", "min_dist", ",", "\n", "ss_transform", "=", "self", ".", "ss_transform", ",", "\n", "pre_transform", "=", "pre_transform", ",", "\n", "transform", "=", "train_transform", ",", "\n", "pre_filter", "=", "pre_filter", ",", "\n", "is_online_matching", "=", "dataset_opt", ".", "is_online_matching", ",", "\n", "num_pos_pairs", "=", "dataset_opt", ".", "num_pos_pairs", ",", "\n", "min_points", "=", "dataset_opt", ".", "min_points", ")", "\n", "\n", "self", ".", "val_dataset", "=", "FragmentKitti", "(", "\n", "root", "=", "self", ".", "_data_path", ",", "\n", "mode", "=", "\"val\"", ",", "\n", "self_supervised", "=", "False", ",", "\n", "max_dist_overlap", "=", "dataset_opt", ".", "max_dist_overlap", ",", "\n", "max_time_distance", "=", "dataset_opt", ".", "max_time_distance", ",", "\n", "min_dist", "=", "dataset_opt", ".", "min_dist", ",", "\n", "pre_transform", "=", "pre_transform", ",", "\n", "transform", "=", "test_transform", ",", "\n", "pre_filter", "=", "pre_filter", ",", "\n", "is_online_matching", "=", "dataset_opt", ".", "is_online_matching", ",", "\n", "num_pos_pairs", "=", "dataset_opt", ".", "num_pos_pairs", ")", "\n", "\n", "self", ".", "test_dataset", "=", "FragmentKitti", "(", "\n", "root", "=", "self", ".", "_data_path", ",", "\n", "mode", "=", "\"test\"", ",", "\n", "self_supervised", "=", "False", ",", "\n", "max_dist_overlap", "=", "dataset_opt", ".", "max_dist_overlap", ",", "\n", "max_time_distance", "=", "dataset_opt", ".", "max_time_distance", ",", "\n", "min_dist", "=", "dataset_opt", ".", "min_dist", ",", "\n", "pre_transform", "=", "pre_transform", ",", "\n", "transform", "=", "test_transform", ",", "\n", "pre_filter", "=", "pre_filter", ",", "\n", "is_online_matching", "=", "dataset_opt", ".", "is_online_matching", ",", "\n", "num_pos_pairs", "=", "dataset_opt", ".", "num_pos_pairs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.__init__": [[38, 126], ["torch_points3d.datasets.registration.detector.RandomDetector", "torch_geometric.data.Dataset.__init__", "base3dmatch.Base3DMatch.dict_urls.keys", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.mock.MockDatasetConfig.keys"], ["def", "__init__", "(", "self", ",", "root", ",", "\n", "num_frame_per_fragment", "=", "50", ",", "\n", "mode", "=", "'train_small'", ",", "\n", "min_overlap_ratio", "=", "0.3", ",", "\n", "max_overlap_ratio", "=", "1.0", ",", "\n", "max_dist_overlap", "=", "0.01", ",", "\n", "tsdf_voxel_size", "=", "0.01", ",", "\n", "limit_size", "=", "700", ",", "\n", "depth_thresh", "=", "6", ",", "\n", "is_fine", "=", "True", ",", "\n", "transform", "=", "None", ",", "\n", "pre_transform", "=", "None", ",", "\n", "pre_filter", "=", "None", ",", "\n", "verbose", "=", "False", ",", "\n", "debug", "=", "False", ",", "\n", "num_random_pt", "=", "5000", ",", "\n", "is_offline", "=", "False", ",", "\n", "radius_patch", "=", "None", ",", "\n", "pre_transform_patch", "=", "None", ")", ":", "\n", "        ", "r\"\"\"\n        the Princeton 3DMatch dataset from the\n        `\"3DMatch: Learning Local Geometric Descriptors from RGB-D Reconstructions\"\n        <https://arxiv.org/pdf/1603.08182.pdf>`_\n        paper, containing rgbd frames of the following dataset:\n        `\" SUN3D: A Database of Big Spaces Reconstructed using SfM and Object Labels\n        \"<http://sun3d.cs.princeton.edu/>`\n        `\"Scene Coordinate Regression Forests for Camera Relocalization in RGB-D Images\n        \"<https://www.microsoft.com/en-us/research/publication/scene-coordinate-regression-forests-for-camera-relocalization-in-rgb-d-images/>`\n        `\"Unsupervised Feature Learning for 3D Scene Labeling\n        \"<http://rgbd-dataset.cs.washington.edu/dataset/rgbd-scenes-v2/>`\n        `\"BundleFusion: Real-time Globally Consistent 3D Reconstruction using Online Surface Re-integration\n        \"<http://graphics.stanford.edu/projects/bundlefusion/>`\n        `\"Learning to Navigate the Energy Landscape\n        \"<http://graphics.stanford.edu/projects/reloc/>`\n\n        Args:\n            root (string): Root directory where the dataset should be saved\n\n            num_frame_per_fragment (int, optional): indicate the number of frames\n                we use to build fragments. If it is equal to 0, then we don't\n                build fragments and use the raw frames.\n\n            mode (string, optional): If :obj:`True`, loads the training dataset,\n            otherwise the test dataset. (default: :obj:`True`)\n\n            transform (callable, optional): A function/transform that takes in\n                an :obj:`torch_geometric.data.Data` object and returns a\n                transformed version. The data object will be transformed before\n                every access. (default: :obj:`None`)\n\n            pre_transform (callable, optional): A function/transform that takes in\n                an :obj:`torch_geometric.data.Data` object and returns a\n                transformed version. The data object will be transformed before\n                being saved to disk. (default: :obj:`None`)\n            pre_filter (callable, optional): A function that takes in an\n                :obj:`torch_geometric.data.Data` object and returns a boolean\n                value, indicating whether the data object should be included in the\n                final dataset. (default: :obj:`None`)\n        \"\"\"", "\n", "\n", "self", ".", "verbose", "=", "verbose", "\n", "self", ".", "debug", "=", "debug", "\n", "self", ".", "is_fine", "=", "is_fine", "\n", "self", ".", "num_frame_per_fragment", "=", "num_frame_per_fragment", "\n", "self", ".", "tsdf_voxel_size", "=", "tsdf_voxel_size", "\n", "self", ".", "limit_size", "=", "limit_size", "\n", "self", ".", "depth_thresh", "=", "depth_thresh", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "num_random_pt", "=", "num_random_pt", "\n", "# select points for testing", "\n", "self", ".", "detector", "=", "RandomDetector", "(", "num_points", "=", "self", ".", "num_random_pt", ")", "\n", "# constant to compute overlap", "\n", "self", ".", "min_overlap_ratio", "=", "min_overlap_ratio", "\n", "self", ".", "max_overlap_ratio", "=", "max_overlap_ratio", "\n", "self", ".", "max_dist_overlap", "=", "max_dist_overlap", "\n", "\n", "self", ".", "is_offline", "=", "is_offline", "\n", "self", ".", "num_random_pt", "=", "num_random_pt", "\n", "self", ".", "radius_patch", "=", "radius_patch", "\n", "self", ".", "pre_transform_patch", "=", "pre_transform_patch", "\n", "if", "mode", "not", "in", "self", ".", "dict_urls", ".", "keys", "(", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "'this mode {} does '", "\n", "'not exist'", "\n", "'(train_small|train_tiny|train|val|test)'", ".", "format", "(", "mode", ")", ")", "\n", "", "super", "(", "Base3DMatch", ",", "self", ")", ".", "__init__", "(", "root", ",", "\n", "transform", ",", "\n", "pre_transform", ",", "\n", "pre_filter", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.raw_file_names": [[130, 133], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "raw_file_names", "(", "self", ")", ":", "\n", "        ", "return", "[", "self", ".", "mode", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.processed_file_names": [[134, 142], ["os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "res.append", "os.join", "os.join"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append"], ["", "@", "property", "\n", "def", "processed_file_names", "(", "self", ")", ":", "\n", "        ", "res", "=", "[", "osp", ".", "join", "(", "self", ".", "mode", ",", "'raw_fragment'", ")", ",", "\n", "osp", ".", "join", "(", "self", ".", "mode", ",", "'matches'", ")", ",", "\n", "osp", ".", "join", "(", "self", ".", "mode", ",", "'fragment'", ")", "]", "\n", "if", "self", ".", "is_offline", ":", "\n", "            ", "res", ".", "append", "(", "osp", ".", "join", "(", "self", ".", "mode", ",", "'patches'", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.download": [[143, 154], ["os.join", "os.join", "torch_points3d.datasets.registration.utils.files_exist", "log.info", "log.warning", "torch_geometric.data.download_url", "torch_geometric.data.extract_zip", "os.unlink", "os.unlink", "os.unlink", "os.unlink"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.files_exist", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.download.download_url"], ["", "def", "download", "(", "self", ")", ":", "\n", "# we download the raw RGBD file for the train and the validation data", "\n", "        ", "folder", "=", "osp", ".", "join", "(", "self", ".", "raw_dir", ",", "self", ".", "mode", ")", "\n", "if", "files_exist", "(", "[", "folder", "]", ")", ":", "# pragma: no cover", "\n", "            ", "log", ".", "warning", "(", "\"already downloaded {}\"", ".", "format", "(", "self", ".", "mode", ")", ")", "\n", "return", "\n", "", "log", ".", "info", "(", "\"Download elements in the file {}...\"", ".", "format", "(", "folder", ")", ")", "\n", "for", "url", "in", "self", ".", "dict_urls", "[", "self", ".", "mode", "]", ":", "\n", "            ", "path", "=", "download_url", "(", "url", ",", "folder", ",", "self", ".", "verbose", ")", "\n", "extract_zip", "(", "path", ",", "folder", ",", "self", ".", "verbose", ")", "\n", "os", ".", "unlink", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch._create_fragment": [[156, 210], ["print", "torch_points3d.datasets.registration.utils.files_exist", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "log.warning", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "torch_points3d.datasets.registration.utils.makedirs", "os.join", "os.join", "sorted", "sorted", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "torch_points3d.datasets.registration.utils.rgbd2fragment_rough", "log.error", "torch_points3d.datasets.registration.utils.rgbd2fragment_fine", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "len", "len", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.listdir"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.files_exist", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.makedirs", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.rgbd2fragment_rough", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.rgbd2fragment_fine", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "", "def", "_create_fragment", "(", "self", ",", "mod", ")", ":", "\n", "        ", "r\"\"\"\n        create fragments from the rgbd frames ie a partial reconstruction of\n        the scene with some frames(usually 50).\n        We will only use the first sequence for each scene\n        \"\"\"", "\n", "\n", "print", "(", "\"Create fragment from RGBD frames...\"", ")", "\n", "if", "files_exist", "(", "[", "osp", ".", "join", "(", "self", ".", "processed_dir", ",", "mod", ",", "'raw_fragment'", ")", "]", ")", ":", "# pragma: no cover", "\n", "            ", "log", ".", "warning", "(", "\"the fragments on mode {} already exists\"", ".", "format", "(", "mod", ")", ")", "\n", "return", "\n", "", "for", "scene_path", "in", "os", ".", "listdir", "(", "osp", ".", "join", "(", "self", ".", "raw_dir", ",", "mod", ")", ")", ":", "\n", "# TODO list the right sequences.", "\n", "            ", "list_seq", "=", "[", "f", "for", "f", "in", "os", ".", "listdir", "(", "osp", ".", "join", "(", "self", ".", "raw_dir", ",", "mod", ",", "\n", "scene_path", ")", ")", "if", "'seq'", "in", "f", "]", "\n", "for", "seq", "in", "list_seq", ":", "\n", "                ", "frames_dir", "=", "osp", ".", "join", "(", "self", ".", "raw_dir", ",", "self", ".", "mode", ",", "\n", "scene_path", ",", "seq", ")", "\n", "out_dir", "=", "osp", ".", "join", "(", "self", ".", "processed_dir", ",", "\n", "mod", ",", "'raw_fragment'", ",", "\n", "scene_path", ",", "seq", ")", "\n", "makedirs", "(", "out_dir", ")", "\n", "path_intrinsic", "=", "osp", ".", "join", "(", "self", ".", "raw_dir", ",", "\n", "self", ".", "mode", ",", "scene_path", ",", "\n", "'camera-intrinsics.txt'", ")", "\n", "list_path_frames", "=", "sorted", "(", "[", "osp", ".", "join", "(", "frames_dir", ",", "f", ")", "\n", "for", "f", "in", "os", ".", "listdir", "(", "frames_dir", ")", "\n", "if", "'png'", "in", "f", "and", "'depth'", "in", "f", "]", ")", "\n", "# list_path_color = sorted([osp.join(frames_dir, f)", "\n", "#                          for f in os.listdir(frames_dir)", "\n", "#                          if 'png' in f and 'color' in f])", "\n", "list_path_trans", "=", "sorted", "(", "[", "osp", ".", "join", "(", "frames_dir", ",", "f", ")", "\n", "for", "f", "in", "os", ".", "listdir", "(", "frames_dir", ")", "\n", "if", "'pose'", "in", "f", "and", "'txt'", "in", "f", "]", ")", "\n", "# compute each fragment and save it", "\n", "if", "(", "not", "self", ".", "is_fine", ")", ":", "\n", "                    ", "rgbd2fragment_rough", "(", "list_path_frames", ",", "path_intrinsic", ",", "\n", "list_path_trans", ",", "out_dir", ",", "\n", "self", ".", "num_frame_per_fragment", ",", "\n", "pre_transform", "=", "None", ")", "\n", "", "else", ":", "\n", "                    ", "assert", "len", "(", "list_path_frames", ")", "==", "len", "(", "list_path_trans", ")", ",", "log", ".", "error", "(", "\"For the sequence {},\"", "\n", "\"the number of frame \"", "\n", "\"and the number of \"", "\n", "\"pose is different\"", ".", "format", "(", "frames_dir", ")", ")", "\n", "rgbd2fragment_fine", "(", "list_path_frames", ",", "\n", "path_intrinsic", ",", "\n", "list_path_trans", ",", "\n", "out_dir", ",", "self", ".", "num_frame_per_fragment", ",", "\n", "voxel_size", "=", "self", ".", "tsdf_voxel_size", ",", "\n", "pre_transform", "=", "None", ",", "\n", "depth_thresh", "=", "self", ".", "depth_thresh", ",", "\n", "limit_size", "=", "self", ".", "limit_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch._pre_transform_fragment": [[211, 240], ["os.join", "os.join", "torch_points3d.datasets.registration.utils.files_exist", "torch_points3d.datasets.registration.utils.makedirs", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "torch_points3d.datasets.registration.utils.makedirs", "sorted", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "torch.load", "torch.save", "os.join", "os.join", "os.join", "os.join", "base3dmatch.Base3DMatch.pre_transform", "os.join", "os.join", "os.listdir", "os.listdir", "os.listdir", "os.listdir"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.files_exist", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.makedirs", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.makedirs", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load"], ["", "", "", "", "def", "_pre_transform_fragment", "(", "self", ",", "mod", ")", ":", "\n", "        ", "\"\"\"\n        pre_transform raw fragments and save it into fragments\n        \"\"\"", "\n", "out_dir", "=", "osp", ".", "join", "(", "self", ".", "processed_dir", ",", "\n", "mod", ",", "'fragment'", ")", "\n", "if", "files_exist", "(", "[", "out_dir", "]", ")", ":", "# pragma: no cover", "\n", "            ", "return", "\n", "", "makedirs", "(", "out_dir", ")", "\n", "for", "scene_path", "in", "os", ".", "listdir", "(", "osp", ".", "join", "(", "self", ".", "raw_dir", ",", "mod", ")", ")", ":", "\n", "# TODO list the right sequences.", "\n", "            ", "list_seq", "=", "[", "f", "for", "f", "in", "os", ".", "listdir", "(", "osp", ".", "join", "(", "self", ".", "raw_dir", ",", "mod", ",", "\n", "scene_path", ")", ")", "if", "'seq'", "in", "f", "]", "\n", "for", "seq", "in", "list_seq", ":", "\n", "                ", "in_dir", "=", "osp", ".", "join", "(", "self", ".", "processed_dir", ",", "\n", "mod", ",", "'raw_fragment'", ",", "\n", "scene_path", ",", "seq", ")", "\n", "out_dir", "=", "osp", ".", "join", "(", "self", ".", "processed_dir", ",", "\n", "mod", ",", "'fragment'", ",", "\n", "scene_path", ",", "seq", ")", "\n", "makedirs", "(", "out_dir", ")", "\n", "list_fragment_path", "=", "sorted", "(", "[", "f", "\n", "for", "f", "in", "os", ".", "listdir", "(", "in_dir", ")", "\n", "if", "'fragment'", "in", "f", "]", ")", "\n", "for", "path", "in", "list_fragment_path", ":", "\n", "                    ", "data", "=", "torch", ".", "load", "(", "osp", ".", "join", "(", "in_dir", ",", "path", ")", ")", "\n", "if", "(", "self", ".", "pre_transform", "is", "not", "None", ")", ":", "\n", "                        ", "data", "=", "self", ".", "pre_transform", "(", "data", ")", "\n", "", "torch", ".", "save", "(", "data", ",", "osp", ".", "join", "(", "out_dir", ",", "path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch._compute_matches_between_fragments": [[241, 279], ["os.join", "os.join", "torch_points3d.datasets.registration.utils.files_exist", "torch_points3d.datasets.registration.utils.makedirs", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.join", "os.join", "sorted", "log.info", "os.join", "os.join", "sorted", "log.info", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.join", "os.join", "os.join", "os.join", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.join", "os.join", "torch.load", "torch.load", "torch_points3d.datasets.registration.utils.compute_overlap_and_matches", "numpy.save", "numpy.max", "numpy.max"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.files_exist", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.makedirs", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.compute_overlap_and_matches"], ["", "", "", "", "def", "_compute_matches_between_fragments", "(", "self", ",", "mod", ")", ":", "\n", "\n", "        ", "out_dir", "=", "osp", ".", "join", "(", "self", ".", "processed_dir", ",", "\n", "mod", ",", "'matches'", ")", "\n", "if", "files_exist", "(", "[", "out_dir", "]", ")", ":", "# pragma: no cover", "\n", "            ", "return", "\n", "", "makedirs", "(", "out_dir", ")", "\n", "ind", "=", "0", "\n", "for", "scene_path", "in", "os", ".", "listdir", "(", "osp", ".", "join", "(", "self", ".", "raw_dir", ",", "mod", ")", ")", ":", "\n", "\n", "            ", "list_seq", "=", "sorted", "(", "[", "f", "for", "f", "in", "os", ".", "listdir", "(", "osp", ".", "join", "(", "self", ".", "raw_dir", ",", "mod", ",", "\n", "scene_path", ")", ")", "if", "'seq'", "in", "f", "]", ")", "\n", "for", "seq", "in", "list_seq", ":", "\n", "                ", "log", ".", "info", "(", "\"{}, {}\"", ".", "format", "(", "scene_path", ",", "seq", ")", ")", "\n", "fragment_dir", "=", "osp", ".", "join", "(", "self", ".", "processed_dir", ",", "\n", "mod", ",", "'fragment'", ",", "\n", "scene_path", ",", "seq", ")", "\n", "list_fragment_path", "=", "sorted", "(", "[", "osp", ".", "join", "(", "fragment_dir", ",", "f", ")", "\n", "for", "f", "in", "os", ".", "listdir", "(", "fragment_dir", ")", "\n", "if", "'fragment'", "in", "f", "]", ")", "\n", "log", ".", "info", "(", "\"compute_overlap_and_matches\"", ")", "\n", "\n", "for", "path1", "in", "list_fragment_path", ":", "\n", "                    ", "for", "path2", "in", "list_fragment_path", ":", "\n", "                        ", "if", "path1", "<", "path2", ":", "\n", "                            ", "out_path", "=", "osp", ".", "join", "(", "out_dir", ",", "\n", "'matches{:06d}.npy'", ".", "format", "(", "ind", ")", ")", "\n", "data1", "=", "torch", ".", "load", "(", "path1", ")", "\n", "data2", "=", "torch", ".", "load", "(", "path2", ")", "\n", "match", "=", "compute_overlap_and_matches", "(", "\n", "data1", ",", "data2", ",", "self", ".", "max_dist_overlap", ")", "\n", "match", "[", "'path_source'", "]", "=", "path1", "\n", "match", "[", "'path_target'", "]", "=", "path2", "\n", "\n", "if", "(", "np", ".", "max", "(", "match", "[", "'overlap'", "]", ")", ">", "self", ".", "min_overlap_ratio", "and", "\n", "np", ".", "max", "(", "match", "[", "'overlap'", "]", ")", "<", "self", ".", "max_overlap_ratio", ")", ":", "\n", "                                ", "np", ".", "save", "(", "out_path", ",", "match", ")", "\n", "ind", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch._save_patches": [[280, 326], ["torch_points3d.datasets.registration.utils.PatchExtractor", "os.join", "os.join", "torch_points3d.datasets.registration.utils.files_exist", "torch_points3d.datasets.registration.utils.makedirs", "os.join", "os.join", "range", "len", "numpy.load().item", "range", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "torch.load", "torch.load", "numpy.random.randint", "torch_points3d.datasets.registration.utils.PatchExtractor.", "torch_points3d.datasets.registration.utils.PatchExtractor.", "numpy.load", "len", "base3dmatch.Base3DMatch.pre_transform_patch", "base3dmatch.Base3DMatch.pre_transform_patch", "torch.save", "torch.save", "os.join", "os.join", "base3dmatch.Base3DMatch.pre_filter", "base3dmatch.Base3DMatch.pre_filter", "torch.save", "torch.save", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.files_exist", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.makedirs", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "", "", "", "", "", "", "def", "_save_patches", "(", "self", ",", "mod", ")", ":", "\n", "        ", "\"\"\"\n        save patch to load it offline for the training\n        \"\"\"", "\n", "p_extractor", "=", "PatchExtractor", "(", "self", ".", "radius_patch", ")", "\n", "out_dir", "=", "osp", ".", "join", "(", "self", ".", "processed_dir", ",", "\n", "mod", ",", "'patches'", ")", "\n", "if", "files_exist", "(", "[", "out_dir", "]", ")", ":", "# pragma: no cover", "\n", "            ", "return", "\n", "", "makedirs", "(", "out_dir", ")", "\n", "match_dir", "=", "osp", ".", "join", "(", "self", ".", "processed_dir", ",", "\n", "mod", ",", "'matches'", ")", "\n", "idx", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "os", ".", "listdir", "(", "match_dir", ")", ")", ")", ":", "\n", "            ", "match", "=", "np", ".", "load", "(", "\n", "osp", ".", "join", "(", "match_dir", ",", "\n", "'matches{:06d}.npy'", ".", "format", "(", "i", ")", ")", ",", "\n", "allow_pickle", "=", "True", ")", ".", "item", "(", ")", "\n", "\n", "for", "_", "in", "range", "(", "self", ".", "num_random_pt", ")", ":", "\n", "                ", "data_source", "=", "torch", ".", "load", "(", "match", "[", "'path_source'", "]", ")", "\n", "data_target", "=", "torch", ".", "load", "(", "match", "[", "'path_target'", "]", ")", "\n", "rand", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "len", "(", "match", "[", "'pair'", "]", ")", ")", "\n", "data_source", "=", "p_extractor", "(", "data_source", ",", "match", "[", "'pair'", "]", "[", "rand", "]", "[", "0", "]", ")", "\n", "data_target", "=", "p_extractor", "(", "data_target", ",", "match", "[", "'pair'", "]", "[", "rand", "]", "[", "1", "]", ")", "\n", "if", "(", "self", ".", "pre_transform_patch", "is", "not", "None", ")", ":", "\n", "                    ", "data_source", "=", "self", ".", "pre_transform_patch", "(", "data_source", ")", "\n", "data_target", "=", "self", ".", "pre_transform_patch", "(", "data_target", ")", "\n", "", "if", "(", "self", ".", "pre_filter", "is", "not", "None", ")", ":", "\n", "                    ", "if", "(", "self", ".", "pre_filter", "(", "data_source", ")", "and", "self", ".", "pre_filter", "(", "data_target", ")", ")", ":", "\n", "\n", "                        ", "torch", ".", "save", "(", "data_source", ",", "\n", "osp", ".", "join", "(", "out_dir", ",", "\n", "'patches_source{:06d}.pt'", ".", "format", "(", "idx", ")", ")", ")", "\n", "torch", ".", "save", "(", "data_target", ",", "\n", "osp", ".", "join", "(", "out_dir", ",", "\n", "'patches_target{:06d}.pt'", ".", "format", "(", "idx", ")", ")", ")", "\n", "idx", "+=", "1", "\n", "", "", "else", ":", "\n", "                    ", "torch", ".", "save", "(", "data_source", ",", "\n", "osp", ".", "join", "(", "out_dir", ",", "\n", "'patches_source{:06d}.pt'", ".", "format", "(", "idx", ")", ")", ")", "\n", "torch", ".", "save", "(", "data_target", ",", "\n", "osp", ".", "join", "(", "out_dir", ",", "\n", "'patches_target{:06d}.pt'", ".", "format", "(", "idx", ")", ")", ")", "\n", "idx", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.process": [[327, 337], ["log.info", "base3dmatch.Base3DMatch._create_fragment", "log.info", "base3dmatch.Base3DMatch._pre_transform_fragment", "log.info", "base3dmatch.Base3DMatch._compute_matches_between_fragments", "log.info", "base3dmatch.Base3DMatch._save_patches"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch._create_fragment", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch._pre_transform_fragment", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.basetest.BasePCRBTest._compute_matches_between_fragments", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch._save_patches"], ["", "", "", "", "def", "process", "(", "self", ")", ":", "\n", "        ", "log", ".", "info", "(", "\"create fragments\"", ")", "\n", "self", ".", "_create_fragment", "(", "self", ".", "mode", ")", "\n", "log", ".", "info", "(", "\"pre_transform those fragments\"", ")", "\n", "self", ".", "_pre_transform_fragment", "(", "self", ".", "mode", ")", "\n", "log", ".", "info", "(", "\"compute matches\"", ")", "\n", "self", ".", "_compute_matches_between_fragments", "(", "self", ".", "mode", ")", "\n", "if", "(", "self", ".", "is_offline", ")", ":", "\n", "            ", "log", ".", "info", "(", "\"precompute patches and save it\"", ")", "\n", "self", ".", "_save_patches", "(", "self", ".", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get": [[338, 340], ["NotImplementedError"], "methods", ["None"], ["", "", "def", "get", "(", "self", ",", "idx", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"implement class to get patch or fragment or more\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.__getitem__": [[341, 350], ["base3dmatch.Base3DMatch.get"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "r\"\"\"Gets the data object at index :obj:`idx` and transforms it (in case\n        a :obj:`self.transform` is given).\n        In case :obj:`idx` is a slicing object, *e.g.*, :obj:`[2:5]`, a list, a\n        tuple, a  LongTensor or a BoolTensor, will return a subset of the\n        dataset at the specified indices.\"\"\"", "\n", "\n", "data", "=", "self", ".", "get", "(", "idx", ")", "\n", "return", "data", "\n", "", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.detector.RandomDetector.__init__": [[9, 11], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "num_points", "=", "5000", ")", ":", "\n", "        ", "self", ".", "num_points", "=", "num_points", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.detector.RandomDetector.__call__": [[12, 18], ["torch.randint"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "keypoints_idx", "=", "torch", ".", "randint", "(", "0", ",", "\n", "data", ".", "pos", ".", "shape", "[", "0", "]", ",", "\n", "(", "self", ".", "num_points", ",", ")", ")", "\n", "data", ".", "keypoints", "=", "keypoints_idx", "\n", "return", "data", "\n", "", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.PatchExtractor.__init__": [[279, 281], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.PatchExtractor.__call__": [[282, 296], ["pos[].view", "torch_points_kernels.points_cpu.ball_query", "ind[].t", "torch_geometric.data.Data", "torch.is_tensor", "torch.all"], "methods", ["None"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.to_list": [[18, 25], ["isinstance", "isinstance"], "function", ["None"], ["for", "x", "in", "glob", ".", "glob", "(", "osp", ".", "join", "(", "image_dir", ",", "'*'", "+", "image_suffix", ")", ")", "]", ")", "\n", "pose_names", "=", "sorted", "(", "[", "\n", "osp", ".", "basename", "(", "x", ")", ".", "replace", "(", "pose_suffix", ",", "''", ")", "\n", "for", "x", "in", "glob", ".", "glob", "(", "osp", ".", "join", "(", "pose_dir", ",", "'*'", "+", "pose_suffix", ")", ")", "]", ")", "\n", "\n", "# Remove images specified by skip_names", "\n", "skip_names", "=", "skip_names", "if", "skip_names", "is", "not", "None", "else", "[", "]", "\n", "image_names", "=", "[", "x", "for", "x", "in", "image_names", "if", "x", "not", "in", "skip_names", "]", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.files_exist": [[27, 33], ["all", "os.exists"], "function", ["None"], ["\n", "# Print orphans", "\n", "if", "not", "image_names", "==", "pose_names", ":", "\n", "        ", "image_orphan", "=", "[", "\n", "osp", ".", "join", "(", "image_dir", ",", "x", "+", "image_suffix", ")", "\n", "for", "x", "in", "set", "(", "image_names", ")", "-", "set", "(", "pose_names", ")", "]", "\n", "pose_orphan", "=", "[", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.makedirs": [[35, 44], ["os.makedirs", "os.makedirs", "os.expanduser", "os.normpath", "os.isdir"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.makedirs", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.makedirs"], ["for", "x", "in", "set", "(", "pose_names", ")", "-", "set", "(", "image_names", ")", "]", "\n", "print", "(", "\"Could not recover all image-pose correspondences.\"", ")", "\n", "print", "(", "f\"  Orphan images : {len(image_orphan)}/{len(image_names)}\"", ")", "\n", "if", "verbose", ":", "\n", "            ", "for", "x", "in", "image_orphan", ":", "\n", "                ", "print", "(", "4", "*", "' '", "+", "'/'", ".", "join", "(", "x", ".", "split", "(", "'/'", ")", "[", "-", "4", ":", "]", ")", ")", "\n", "", "", "print", "(", "f\"  Orphan poses  : {len(pose_orphan)}/{len(pose_names)}\"", ")", "\n", "if", "verbose", ":", "\n", "            ", "for", "x", "in", "pose_orphan", ":", "\n", "                ", "print", "(", "4", "*", "' '", "+", "'/'", ".", "join", "(", "x", ".", "split", "(", "'/'", ")", "[", "-", "4", ":", "]", ")", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.get_urls": [[46, 51], ["open", "f.readlines"], "function", ["None"], ["# Only return the recovered pairs", "\n", "", "", "", "correspondences", "=", "sorted", "(", "list", "(", "set", "(", "image_names", ")", ".", "intersection", "(", "\n", "set", "(", "pose_names", ")", ")", ")", ")", "\n", "pairs", "=", "[", "(", "\n", "osp", ".", "join", "(", "image_dir", ",", "x", "+", "image_suffix", ")", ",", "\n", "osp", ".", "join", "(", "pose_dir", ",", "x", "+", "pose_suffix", ")", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.extract_pcd": [[53, 71], ["numpy.meshgrid", "numpy.arange", "numpy.arange", "numpy.vstack", "color_image.reshape", "X.ravel", "Y.ravel"], "function", ["None"], ["return", "pairs", "\n", "\n", "\n", "", "def", "img_info_to_img_data", "(", "info_ld", ",", "img_size", ")", ":", "\n", "    ", "\"\"\"Helper function to convert a list of image info dictionaries\n    into a more convenient SameSettingImageData object.\n    \"\"\"", "\n", "if", "len", "(", "info_ld", ")", ">", "0", ":", "\n", "        ", "info_dl", "=", "{", "k", ":", "[", "dic", "[", "k", "]", "for", "dic", "in", "info_ld", "]", "for", "k", "in", "info_ld", "[", "0", "]", "}", "\n", "image_data", "=", "SameSettingImageData", "(", "\n", "path", "=", "np", ".", "array", "(", "info_dl", "[", "'path'", "]", ")", ",", "pos", "=", "torch", ".", "Tensor", "(", "info_dl", "[", "'xyz'", "]", ")", ",", "\n", "opk", "=", "torch", ".", "Tensor", "(", "info_dl", "[", "'opk'", "]", ")", ",", "ref_size", "=", "img_size", ")", "\n", "", "else", ":", "\n", "        ", "image_data", "=", "SameSettingImageData", "(", "ref_size", "=", "img_size", ")", "\n", "", "return", "image_data", "\n", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.rgbd2pcd": [[73, 89], ["imageio.imread", "numpy.loadtxt", "numpy.loadtxt", "imageio.imread", "utils.extract_pcd", "utils.extract_pcd", "extract_pcd.dot", "extract_pcd.dot"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.extract_pcd", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.extract_pcd"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.rgbd2fragment_rough": [[91, 128], ["tqdm.auto.tqdm", "enumerate", "len", "utils.rgbd2pcd", "one_fragment.append", "one_color.append", "utils.rgbd2pcd", "one_fragment.append", "torch.from_numpy", "torch.save", "numpy.concatenate", "torch_geometric.data.Data", "torch.from_numpy", "torch_geometric.data.Data", "pre_transform", "os.join", "numpy.concatenate"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.rgbd2pcd", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.rgbd2pcd", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.filter_pair": [[134, 144], ["len", "numpy.array", "np.array.numpy"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.compute_overlap_and_matches": [[146, 173], ["torch.eye", "torch_points_kernels.points_cpu.ball_query", "utils.filter_pair", "dict", "data2.pos.to", "torch_points_kernels.points_cpu.ball_query", "utils.filter_pair", "overlap.append", "len", "data2.pos.to", "data1.pos.to", "len", "data1.pos.to"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.filter_pair", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.filter_pair", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.compute_subsampled_matches": [[174, 184], ["torch_geometric.transforms.Compose", "torch_geometric.transforms.Compose.", "grid_sampling.origin_id.numpy", "torch.from_numpy", "data1.clone", "utils.compute_overlap_and_matches", "pair.copy", "torch_points3d.core.data_transform.SaveOriginalPosId", "torch_points3d.core.data_transform.GridSampling3D"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.clone", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.compute_overlap_and_matches"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.get_3D_bound": [[185, 212], ["numpy.zeros", "numpy.zeros", "numpy.zeros", "tqdm.auto.tqdm", "numpy.quantile", "numpy.quantile", "range", "enumerate", "numpy.loadtxt", "numpy.loadtxt", "torch_points3d.get_view_frustum", "numpy.amin", "numpy.amax", "len", "len", "len", "imageio.imread"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.fusion.get_view_frustum", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.rgbd2fragment_fine": [[214, 272], ["utils.get_3D_bound", "print", "torch_points3d.TSDFVolume", "tqdm.auto.tqdm", "enumerate", "numpy.loadtxt", "numpy.loadtxt", "fusion.TSDFVolume.integrate", "len", "imageio.imread().astype", "torch.save", "fusion.TSDFVolume.get_point_cloud", "torch_geometric.data.Data", "fusion.TSDFVolume.get_mesh", "torch_geometric.data.Data", "pre_transform", "os.join", "len", "torch_points3d.TSDFVolume", "imageio.imread", "len", "utils.get_3D_bound", "utils.get_3D_bound", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "tsdf_vol.get_point_cloud.copy", "verts.copy", "norms.copy"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.get_3D_bound", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.fusion.TSDFVolume.integrate", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.fusion.TSDFVolume.get_point_cloud", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.fusion.TSDFVolume.get_mesh", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.get_3D_bound", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.get_3D_bound"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.tracked_matches": [[298, 320], ["pair.numpy", "numpy.isin", "numpy.isin", "numpy.logical_and", "dict", "dict", "torch.tensor().to", "data_s.origin_id.numpy", "data_t.origin_id.numpy", "zip", "zip", "data_s.origin_id.numpy", "numpy.arange", "data_t.origin_id.numpy", "numpy.arange", "torch.tensor", "len", "len"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.fps_sampling": [[323, 339], ["torch.zeros().long", "torch_cluster.fps", "float", "len", "ValueError", "torch.zeros"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.pair.Pair.__init__": [[10, 22], ["torch_geometric.data.Data.__init__"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "x", "=", "None", ",", "\n", "y", "=", "None", ",", "\n", "pos", "=", "None", ",", "\n", "x_target", "=", "None", ",", "\n", "pos_target", "=", "None", ",", "\n", "**", "kwargs", ",", "\n", ")", ":", "\n", "        ", "self", ".", "__data_class__", "=", "Data", "\n", "super", "(", "Pair", ",", "self", ")", ".", "__init__", "(", "x", "=", "x", ",", "pos", "=", "pos", ",", "\n", "x_target", "=", "x_target", ",", "pos_target", "=", "pos_target", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.pair.Pair.make_pair": [[24, 38], ["cls", "cls.contiguous"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "make_pair", "(", "cls", ",", "data_source", ",", "data_target", ")", ":", "\n", "        ", "\"\"\"\n        add in a Data object the source elem, the target elem.\n        \"\"\"", "\n", "# add concatenation of the point cloud", "\n", "batch", "=", "cls", "(", ")", "\n", "for", "key", "in", "data_source", ".", "keys", ":", "\n", "            ", "batch", "[", "key", "]", "=", "data_source", "[", "key", "]", "\n", "", "for", "key_target", "in", "data_target", ".", "keys", ":", "\n", "            ", "batch", "[", "key_target", "+", "\"_target\"", "]", "=", "data_target", "[", "key_target", "]", "\n", "", "if", "(", "batch", ".", "x", "is", "None", ")", ":", "\n", "            ", "batch", "[", "\"x_target\"", "]", "=", "None", "\n", "", "return", "batch", ".", "contiguous", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.pair.Pair.to_data": [[39, 50], ["pair.Pair.__data_class__", "pair.Pair.__data_class__", "re.search", "re.search.groups"], "methods", ["None"], ["", "def", "to_data", "(", "self", ")", ":", "\n", "        ", "data_source", "=", "self", ".", "__data_class__", "(", ")", "\n", "data_target", "=", "self", ".", "__data_class__", "(", ")", "\n", "for", "key", "in", "self", ".", "keys", ":", "\n", "            ", "match", "=", "re", ".", "search", "(", "r\"(.+)_target$\"", ",", "key", ")", "\n", "if", "match", "is", "None", ":", "\n", "                ", "data_source", "[", "key", "]", "=", "self", "[", "key", "]", "\n", "", "else", ":", "\n", "                ", "new_key", "=", "match", ".", "groups", "(", ")", "[", "0", "]", "\n", "data_target", "[", "new_key", "]", "=", "self", "[", "key", "]", "\n", "", "", "return", "data_source", ",", "data_target", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.pair.Pair.num_nodes_target": [[51, 56], ["pair.Pair.", "item.size", "pair.Pair.__cat_dim__"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_nodes_target", "(", "self", ")", ":", "\n", "        ", "for", "key", ",", "item", "in", "self", "(", "'x_target'", ",", "'pos_target'", ",", "'norm_target'", ",", "'batch_target'", ")", ":", "\n", "            ", "return", "item", ".", "size", "(", "self", ".", "__cat_dim__", "(", "key", ",", "item", ")", ")", "\n", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.pair.MultiScalePair.__init__": [[59, 80], ["pair.Pair.__init__"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "x", "=", "None", ",", "\n", "y", "=", "None", ",", "\n", "pos", "=", "None", ",", "\n", "multiscale", ":", "Optional", "[", "List", "[", "Data", "]", "]", "=", "None", ",", "\n", "upsample", ":", "Optional", "[", "List", "[", "Data", "]", "]", "=", "None", ",", "\n", "x_target", "=", "None", ",", "\n", "pos_target", "=", "None", ",", "\n", "multiscale_target", ":", "Optional", "[", "List", "[", "Data", "]", "]", "=", "None", ",", "\n", "upsample_target", ":", "Optional", "[", "List", "[", "Data", "]", "]", "=", "None", ",", "\n", "**", "kwargs", ",", "\n", ")", ":", "\n", "        ", "super", "(", "MultiScalePair", ",", "self", ")", ".", "__init__", "(", "x", "=", "x", ",", "pos", "=", "pos", ",", "\n", "multiscale", "=", "multiscale", ",", "\n", "upsample", "=", "upsample", ",", "\n", "x_target", "=", "x_target", ",", "pos_target", "=", "pos_target", ",", "\n", "multiscale_target", "=", "multiscale_target", ",", "\n", "upsample_target", "=", "upsample_target", ",", "\n", "**", "kwargs", ")", "\n", "self", ".", "__data_class__", "=", "MultiScaleData", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.pair.MultiScalePair.apply": [[81, 97], ["pair.MultiScalePair.", "range", "range", "torch.is_tensor", "pair.MultiScalePair.multiscale[].apply", "pair.MultiScalePair.multiscale_target[].apply", "pair.MultiScalePair.upsample[].apply", "pair.MultiScalePair.upsample_target[].apply", "func"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.pair.MultiScalePair.apply", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.pair.MultiScalePair.apply", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.pair.MultiScalePair.apply", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.pair.MultiScalePair.apply"], ["", "def", "apply", "(", "self", ",", "func", ",", "*", "keys", ")", ":", "\n", "        ", "r\"\"\"Applies the function :obj:`func` to all tensor and Data attributes\n        :obj:`*keys`. If :obj:`*keys` is not given, :obj:`func` is applied to\n        all present attributes.\n        \"\"\"", "\n", "for", "key", ",", "item", "in", "self", "(", "*", "keys", ")", ":", "\n", "            ", "if", "torch", ".", "is_tensor", "(", "item", ")", ":", "\n", "                ", "self", "[", "key", "]", "=", "func", "(", "item", ")", "\n", "", "", "for", "scale", "in", "range", "(", "self", ".", "num_scales", ")", ":", "\n", "            ", "self", ".", "multiscale", "[", "scale", "]", "=", "self", ".", "multiscale", "[", "scale", "]", ".", "apply", "(", "func", ")", "\n", "self", ".", "multiscale_target", "[", "scale", "]", "=", "self", ".", "multiscale_target", "[", "scale", "]", ".", "apply", "(", "func", ")", "\n", "\n", "", "for", "up", "in", "range", "(", "self", ".", "num_upsample", ")", ":", "\n", "            ", "self", ".", "upsample", "[", "up", "]", "=", "self", ".", "upsample", "[", "up", "]", ".", "apply", "(", "func", ")", "\n", "self", ".", "upsample_target", "[", "up", "]", "=", "self", ".", "upsample_target", "[", "up", "]", ".", "apply", "(", "func", ")", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.pair.MultiScalePair.num_scales": [[98, 103], ["len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "@", "property", "\n", "def", "num_scales", "(", "self", ")", ":", "\n", "        ", "\"\"\" Number of scales in the multiscale array\n        \"\"\"", "\n", "return", "len", "(", "self", ".", "multiscale", ")", "if", "self", ".", "multiscale", "else", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.pair.MultiScalePair.num_upsample": [[104, 109], ["len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "@", "property", "\n", "def", "num_upsample", "(", "self", ")", ":", "\n", "        ", "\"\"\" Number of upsample operations\n        \"\"\"", "\n", "return", "len", "(", "self", ".", "upsample", ")", "if", "self", ".", "upsample", "else", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.pair.MultiScalePair.from_data": [[110, 116], ["cls"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "from_data", "(", "cls", ",", "data", ")", ":", "\n", "        ", "ms_data", "=", "cls", "(", ")", "\n", "for", "k", ",", "item", "in", "data", ":", "\n", "            ", "ms_data", "[", "k", "]", "=", "item", "\n", "", "return", "ms_data", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.pair.PairBatch.__init__": [[120, 128], ["pair.Pair.__init__"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "batch", "=", "None", ",", "batch_target", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "r\"\"\"\n        Pair batch for message passing\n        \"\"\"", "\n", "self", ".", "batch_target", "=", "batch_target", "\n", "self", ".", "batch", "=", "None", "\n", "super", "(", "PairBatch", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "__data_class__", "=", "Batch", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.pair.PairBatch.from_data_list": [[129, 147], ["isinstance", "list", "hasattr", "torch_geometric.data.Batch.from_data_list", "torch_geometric.data.Batch.from_data_list", "PairBatch.make_pair", "PairBatch.make_pair.contiguous", "map", "pair.concatenate_pair_ind", "zip", "data.to_data"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.pair.DensePairBatch.from_data_list", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.pair.DensePairBatch.from_data_list", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.pair.Pair.make_pair", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.pair.concatenate_pair_ind", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.pair.Pair.to_data"], ["", "@", "staticmethod", "\n", "def", "from_data_list", "(", "data_list", ")", ":", "\n", "        ", "r\"\"\"\n        from a list of torch_points3d.datasets.registation.pair.Pair objects, create\n        a batch\n        Warning : follow_batch is not here yet...\n        \"\"\"", "\n", "assert", "isinstance", "(", "data_list", "[", "0", "]", ",", "Pair", ")", "\n", "data_list_s", ",", "data_list_t", "=", "list", "(", "map", "(", "list", ",", "zip", "(", "*", "[", "data", ".", "to_data", "(", ")", "for", "data", "in", "data_list", "]", ")", ")", ")", "\n", "if", "hasattr", "(", "data_list_s", "[", "0", "]", ",", "'pair_ind'", ")", ":", "\n", "            ", "pair_ind", "=", "concatenate_pair_ind", "(", "data_list_s", ",", "data_list_t", ")", "\n", "", "else", ":", "\n", "            ", "pair_ind", "=", "None", "\n", "", "batch_s", "=", "Batch", ".", "from_data_list", "(", "data_list_s", ")", "\n", "batch_t", "=", "Batch", ".", "from_data_list", "(", "data_list_t", ")", "\n", "pair", "=", "PairBatch", ".", "make_pair", "(", "batch_s", ",", "batch_t", ")", "\n", "pair", ".", "pair_ind", "=", "pair_ind", "\n", "return", "pair", ".", "contiguous", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.pair.PairMultiScaleBatch.__init__": [[150, 155], ["pair.MultiScalePair.__init__"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "batch", "=", "None", ",", "batch_target", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "batch", "=", "batch", "\n", "self", ".", "batch_target", "=", "batch_target", "\n", "super", "(", "PairMultiScaleBatch", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "__data_class__", "=", "MultiScaleBatch", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.pair.PairMultiScaleBatch.from_data_list": [[156, 173], ["list", "hasattr", "torch_points3d.datasets.multiscale_data.MultiScaleBatch.from_data_list", "torch_points3d.datasets.multiscale_data.MultiScaleBatch.from_data_list", "PairMultiScaleBatch.make_pair", "PairMultiScaleBatch.make_pair.contiguous", "map", "concatenate_pair_ind().to", "zip", "pair.concatenate_pair_ind", "data.to_data"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.pair.DensePairBatch.from_data_list", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.pair.DensePairBatch.from_data_list", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.pair.Pair.make_pair", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.pair.concatenate_pair_ind", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.pair.Pair.to_data"], ["", "@", "staticmethod", "\n", "def", "from_data_list", "(", "data_list", ")", ":", "\n", "        ", "r\"\"\"\n        from a list of torch_points3d.datasets.registation.pair.Pair objects, create\n        a batch\n        Warning : follow_batch is not here yet...\n        \"\"\"", "\n", "data_list_s", ",", "data_list_t", "=", "list", "(", "map", "(", "list", ",", "zip", "(", "*", "[", "data", ".", "to_data", "(", ")", "for", "data", "in", "data_list", "]", ")", ")", ")", "\n", "if", "hasattr", "(", "data_list_s", "[", "0", "]", ",", "'pair_ind'", ")", ":", "\n", "            ", "pair_ind", "=", "concatenate_pair_ind", "(", "data_list_s", ",", "data_list_t", ")", ".", "to", "(", "torch", ".", "long", ")", "\n", "", "else", ":", "\n", "            ", "pair_ind", "=", "None", "\n", "", "batch_s", "=", "MultiScaleBatch", ".", "from_data_list", "(", "data_list_s", ")", "\n", "batch_t", "=", "MultiScaleBatch", ".", "from_data_list", "(", "data_list_t", ")", "\n", "pair", "=", "PairMultiScaleBatch", ".", "make_pair", "(", "batch_s", ",", "batch_t", ")", "\n", "pair", ".", "pair_ind", "=", "pair_ind", "\n", "return", "pair", ".", "contiguous", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.pair.DensePairBatch.__init__": [[179, 184], ["pair.Pair.__init__"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["def", "__init__", "(", "self", ",", "batch", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "DensePairBatch", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "batch", "=", "batch", "\n", "self", ".", "__data_class__", "=", "Data", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.pair.DensePairBatch.from_data_list": [[185, 228], ["list", "pair.DensePairBatch", "enumerate", "hasattr", "DensePairBatch.contiguous", "set", "set.union", "concatenate_pair_ind().to", "batch[].append", "torch.is_tensor", "isinstance", "isinstance", "ValueError", "torch.stack", "pair.concatenate_pair_ind"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.pair.concatenate_pair_ind"], ["", "@", "staticmethod", "\n", "def", "from_data_list", "(", "data_list", ")", ":", "\n", "        ", "r\"\"\"Constructs a batch object from a python list holding\n        :class:`torch_geometric.data.Data` objects.\n        \"\"\"", "\n", "keys", "=", "[", "set", "(", "data", ".", "keys", ")", "for", "data", "in", "data_list", "]", "\n", "keys", "=", "list", "(", "set", ".", "union", "(", "*", "keys", ")", ")", "\n", "\n", "# Check if all dimensions matches and we can concatenate data", "\n", "# if len(data_list) > 0:", "\n", "#    for data in data_list[1:]:", "\n", "#        for key in keys:", "\n", "#            assert data_list[0][key].shape == data[key].shape", "\n", "\n", "batch", "=", "DensePairBatch", "(", ")", "\n", "batch", ".", "__data_class__", "=", "data_list", "[", "0", "]", ".", "__class__", "\n", "\n", "for", "key", "in", "keys", ":", "\n", "            ", "batch", "[", "key", "]", "=", "[", "]", "\n", "\n", "", "for", "_", ",", "data", "in", "enumerate", "(", "data_list", ")", ":", "\n", "            ", "for", "key", "in", "data", ".", "keys", ":", "\n", "                ", "item", "=", "data", "[", "key", "]", "\n", "batch", "[", "key", "]", ".", "append", "(", "item", ")", "\n", "\n", "", "", "for", "key", "in", "batch", ".", "keys", ":", "\n", "            ", "item", "=", "batch", "[", "key", "]", "[", "0", "]", "\n", "if", "(", "\n", "torch", ".", "is_tensor", "(", "item", ")", "\n", "or", "isinstance", "(", "item", ",", "int", ")", "\n", "or", "isinstance", "(", "item", ",", "float", ")", "\n", ")", ":", "\n", "                ", "if", "key", "!=", "\"pair_ind\"", ":", "\n", "                    ", "batch", "[", "key", "]", "=", "torch", ".", "stack", "(", "batch", "[", "key", "]", ")", "\n", "", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"Unsupported attribute type\"", ")", "\n", "# add pair_ind for dense data too", "\n", "", "", "if", "hasattr", "(", "data_list", "[", "0", "]", ",", "'pair_ind'", ")", ":", "\n", "            ", "pair_ind", "=", "concatenate_pair_ind", "(", "data_list", ",", "data_list", ")", ".", "to", "(", "torch", ".", "long", ")", "\n", "", "else", ":", "\n", "            ", "pair_ind", "=", "None", "\n", "", "batch", ".", "pair_ind", "=", "pair_ind", "\n", "return", "batch", ".", "contiguous", "(", ")", "\n", "# return [batch.x.transpose(1, 2).contiguous(), batch.pos, batch.y.view(-1)]", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.pair.DensePairBatch.num_graphs": [[230, 234], ["pair.DensePairBatch.batch[].item"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_graphs", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the number of graphs in the batch.\"\"\"", "\n", "return", "self", ".", "batch", "[", "-", "1", "]", ".", "item", "(", ")", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.pair.concatenate_pair_ind": [[236, 261], ["hasattr", "torch.zeros", "range", "torch.cat", "len", "len", "len", "torch.tensor", "list_pair_ind.append", "len", "len"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "", "def", "concatenate_pair_ind", "(", "list_data_source", ",", "list_data_target", ")", ":", "\n", "    ", "\"\"\"\n    for a list of pair of indices batched, change the index it refers to wrt the batch index\n    Parameters\n    ----------\n    list_data_source: list[Data]\n    list_data_target: list[Data]\n    Returns\n    -------\n    torch.Tensor\n        indices of y corrected wrt batch indices\n\n\n    \"\"\"", "\n", "\n", "assert", "len", "(", "list_data_source", ")", "==", "len", "(", "list_data_target", ")", "\n", "assert", "hasattr", "(", "list_data_source", "[", "0", "]", ",", "\"pair_ind\"", ")", "\n", "list_pair_ind", "=", "[", "]", "\n", "cum_size", "=", "torch", ".", "zeros", "(", "2", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "list_data_source", ")", ")", ":", "\n", "        ", "size", "=", "torch", ".", "tensor", "(", "[", "len", "(", "list_data_source", "[", "i", "]", ".", "pos", ")", ",", "\n", "len", "(", "list_data_target", "[", "i", "]", ".", "pos", ")", "]", ")", "\n", "list_pair_ind", ".", "append", "(", "list_data_source", "[", "i", "]", ".", "pair_ind", "+", "cum_size", ")", "\n", "cum_size", "=", "cum_size", "+", "size", "\n", "", "return", "torch", ".", "cat", "(", "list_pair_ind", ",", "0", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.basetest.SimplePatch.__init__": [[67, 76], ["transform"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "list_patches", ",", "transform", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        transform a list of Data into a dataset(and apply transform)\n        \"\"\"", "\n", "if", "transform", "is", "None", ":", "\n", "            ", "self", ".", "list_patches", "=", "list_patches", "\n", "", "else", ":", "\n", "            ", "self", ".", "list_patches", "=", "[", "transform", "(", "p", ")", "for", "p", "in", "list_patches", "]", "\n", "", "self", ".", "transform", "=", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.basetest.SimplePatch.__len__": [[77, 79], ["len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "list_patches", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.basetest.SimplePatch.__getitem__": [[80, 83], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "data", "=", "self", ".", "list_patches", "[", "idx", "]", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.basetest.SimplePatch.num_features": [[84, 89], ["basetest.SimplePatch.x.size", "basetest.SimplePatch.x.dim"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_features", "(", "self", ")", ":", "\n", "        ", "if", "self", "[", "0", "]", ".", "x", "is", "None", ":", "\n", "            ", "return", "0", "\n", "", "return", "1", "if", "self", "[", "0", "]", ".", "x", ".", "dim", "(", ")", "==", "1", "else", "self", "[", "0", "]", ".", "x", ".", "size", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.basetest.Base3DMatchTest.__init__": [[92, 110], ["os.abspath", "os.abspath", "torch_points3d.datasets.registration.utils.get_urls", "torch_geometric.data.Dataset.__init__", "os.join", "os.join", "os.join", "os.join", "os.realpath", "os.realpath"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.get_urls", "home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "root", ",", "\n", "transform", "=", "None", ",", "\n", "pre_transform", "=", "None", ",", "\n", "pre_filter", "=", "None", ",", "\n", "verbose", "=", "False", ",", "\n", "debug", "=", "False", ",", "\n", "max_dist_overlap", "=", "0.01", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        a baseDataset that download a dataset,\n        apply preprocessing, and compute keypoints\n        \"\"\"", "\n", "self", ".", "max_dist_overlap", "=", "max_dist_overlap", "\n", "base", "=", "osp", ".", "abspath", "(", "osp", ".", "join", "(", "osp", ".", "realpath", "(", "__file__", ")", ",", "\"..\"", ")", ")", "\n", "self", ".", "list_urls_test", "=", "get_urls", "(", "osp", ".", "join", "(", "base", ",", "\"urls\"", ",", "\"url_test.txt\"", ")", ")", "\n", "super", "(", "Base3DMatchTest", ",", "self", ")", ".", "__init__", "(", "root", ",", "transform", ",", "pre_transform", ",", "pre_filter", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.basetest.Base3DMatchTest.raw_file_names": [[111, 114], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "raw_file_names", "(", "self", ")", ":", "\n", "        ", "return", "[", "\"raw_fragment\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.basetest.Base3DMatchTest.processed_file_names": [[115, 118], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "processed_file_names", "(", "self", ")", ":", "\n", "        ", "return", "[", "\"fragment\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.basetest.Base3DMatchTest.download": [[119, 138], ["os.join", "os.join", "torch_points3d.datasets.registration.utils.files_exist", "log.warning", "torch_geometric.data.download_url", "torch_geometric.data.extract_zip", "log.info", "os.unlink", "os.unlink", "os.unlink", "os.unlink", "torch_geometric.data.download_url", "torch_geometric.data.extract_zip", "os.unlink", "os.unlink", "os.unlink", "os.unlink", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "shutil.rmtree", "url_raw.split", "torch_geometric.data.download_url.split", "torch_geometric.data.download_url.split", "os.rename", "os.rename", "os.rename", "os.rename", "os.join", "os.join", "os.join", "os.join", "url.split"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.files_exist", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.download.download_url", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.download.download_url", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.split", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.split", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.split", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.split"], ["", "def", "download", "(", "self", ")", ":", "\n", "        ", "folder_test", "=", "osp", ".", "join", "(", "self", ".", "raw_dir", ",", "\"test\"", ")", "\n", "if", "files_exist", "(", "[", "folder_test", "]", ")", ":", "# pragma: no cover", "\n", "            ", "log", ".", "warning", "(", "\"already downloaded {}\"", ".", "format", "(", "\"test\"", ")", ")", "\n", "return", "\n", "", "for", "url_raw", "in", "self", ".", "list_urls_test", ":", "\n", "            ", "url", "=", "url_raw", ".", "split", "(", "\"\\n\"", ")", "[", "0", "]", "\n", "path", "=", "download_url", "(", "url", ",", "folder_test", ")", "\n", "extract_zip", "(", "path", ",", "folder_test", ")", "\n", "log", ".", "info", "(", "path", ")", "\n", "folder", "=", "path", ".", "split", "(", "\".zip\"", ")", "[", "0", "]", "\n", "os", ".", "unlink", "(", "path", ")", "\n", "path_eval", "=", "download_url", "(", "url", ".", "split", "(", "\".zip\"", ")", "[", "0", "]", "+", "\"-evaluation.zip\"", ",", "folder", ")", "\n", "extract_zip", "(", "path_eval", ",", "folder", ")", "\n", "os", ".", "unlink", "(", "path_eval", ")", "\n", "folder_eval", "=", "path_eval", ".", "split", "(", "\".zip\"", ")", "[", "0", "]", "\n", "for", "f", "in", "os", ".", "listdir", "(", "folder_eval", ")", ":", "\n", "                ", "os", ".", "rename", "(", "osp", ".", "join", "(", "folder_eval", ",", "f", ")", ",", "osp", ".", "join", "(", "folder", ",", "f", ")", ")", "\n", "", "shutil", ".", "rmtree", "(", "folder_eval", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.basetest.Base3DMatchTest._pre_transform_fragments_ply": [[139, 181], ["os.join", "os.join", "torch_points3d.datasets.registration.utils.files_exist", "torch_points3d.datasets.registration.utils.makedirs", "dict", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.join", "os.join", "os.join", "os.join", "sorted", "enumerate", "open", "json.dump", "os.join", "os.join", "os.join", "os.join", "torch_points3d.datasets.registration.utils.makedirs", "os.join", "os.join", "torch.stack", "torch_geometric.data.Data", "torch.save", "os.join", "os.join", "open", "plyfile.PlyData.read", "torch.tensor", "basetest.Base3DMatchTest.pre_transform", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "basetest.find_int"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.files_exist", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.makedirs", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.makedirs", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.basetest.find_int"], ["", "", "def", "_pre_transform_fragments_ply", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        apply pre_transform on fragments (ply) and save the results\n        \"\"\"", "\n", "out_dir", "=", "osp", ".", "join", "(", "self", ".", "processed_dir", ",", "\"test\"", ",", "\"fragment\"", ")", "\n", "if", "files_exist", "(", "[", "out_dir", "]", ")", ":", "# pragma: no cover", "\n", "            ", "return", "\n", "", "makedirs", "(", "out_dir", ")", "\n", "ind", "=", "0", "\n", "# table to map fragment numper with", "\n", "self", ".", "table", "=", "dict", "(", ")", "\n", "\n", "for", "scene_path", "in", "os", ".", "listdir", "(", "osp", ".", "join", "(", "self", ".", "raw_dir", ",", "\"test\"", ")", ")", ":", "\n", "\n", "            ", "fragment_dir", "=", "osp", ".", "join", "(", "self", ".", "raw_dir", ",", "\"test\"", ",", "scene_path", ")", "\n", "list_fragment_path", "=", "sorted", "(", "[", "f", "for", "f", "in", "os", ".", "listdir", "(", "fragment_dir", ")", "if", "\"ply\"", "in", "f", "]", ")", "\n", "\n", "for", "i", ",", "f_p", "in", "enumerate", "(", "list_fragment_path", ")", ":", "\n", "                ", "fragment_path", "=", "osp", ".", "join", "(", "fragment_dir", ",", "f_p", ")", "\n", "out_dir", "=", "osp", ".", "join", "(", "self", ".", "processed_dir", ",", "\"test\"", ",", "\"fragment\"", ",", "scene_path", ")", "\n", "makedirs", "(", "out_dir", ")", "\n", "out_path", "=", "osp", ".", "join", "(", "out_dir", ",", "\"fragment_{:06d}.pt\"", ".", "format", "(", "find_int", "(", "f_p", ")", ")", ")", "\n", "# read ply file", "\n", "with", "open", "(", "fragment_path", ",", "\"rb\"", ")", "as", "f", ":", "\n", "                    ", "data", "=", "PlyData", ".", "read", "(", "f", ")", "\n", "", "pos", "=", "[", "torch", ".", "tensor", "(", "data", "[", "\"vertex\"", "]", "[", "axis", "]", ")", "for", "axis", "in", "[", "\"x\"", ",", "\"y\"", ",", "\"z\"", "]", "]", "\n", "pos", "=", "torch", ".", "stack", "(", "pos", ",", "dim", "=", "-", "1", ")", "\n", "data", "=", "Data", "(", "pos", "=", "pos", ")", "\n", "if", "self", ".", "pre_transform", "is", "not", "None", ":", "\n", "                    ", "data", "=", "self", ".", "pre_transform", "(", "data", ")", "\n", "", "torch", ".", "save", "(", "data", ",", "out_path", ")", "\n", "self", ".", "table", "[", "ind", "]", "=", "{", "\n", "\"in_path\"", ":", "fragment_path", ",", "\n", "\"scene_path\"", ":", "scene_path", ",", "\n", "\"fragment_name\"", ":", "f_p", ",", "\n", "\"out_path\"", ":", "out_path", ",", "\n", "}", "\n", "ind", "+=", "1", "\n", "\n", "# save this file into json", "\n", "", "", "with", "open", "(", "osp", ".", "join", "(", "out_dir", ",", "\"table.json\"", ")", ",", "\"w\"", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "self", ".", "table", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.basetest.Base3DMatchTest._compute_matches_between_fragments": [[182, 212], ["os.join", "os.join", "torch_points3d.datasets.registration.utils.files_exist", "torch_points3d.datasets.registration.utils.makedirs", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.join", "os.join", "os.join", "os.join", "basetest.read_gt_log", "enumerate", "os.join", "os.join", "os.join", "os.join", "torch.load", "torch.load", "torch_points3d.datasets.registration.utils.compute_overlap_and_matches", "str", "str", "os.join", "os.join", "numpy.save", "torch.from_numpy().to", "torch.from_numpy", "numpy.linalg.inv"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.files_exist", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.makedirs", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.basetest.read_gt_log", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.compute_overlap_and_matches", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to"], ["", "", "def", "_compute_matches_between_fragments", "(", "self", ")", ":", "\n", "        ", "ind", "=", "0", "\n", "out_dir", "=", "osp", ".", "join", "(", "self", ".", "processed_dir", ",", "\"test\"", ",", "\"matches\"", ")", "\n", "if", "files_exist", "(", "[", "out_dir", "]", ")", ":", "# pragma: no cover", "\n", "            ", "return", "\n", "", "makedirs", "(", "out_dir", ")", "\n", "\n", "list_scene", "=", "os", ".", "listdir", "(", "osp", ".", "join", "(", "self", ".", "raw_dir", ",", "\"test\"", ")", ")", "\n", "for", "scene", "in", "list_scene", ":", "\n", "            ", "path_log", "=", "osp", ".", "join", "(", "self", ".", "raw_dir", ",", "\"test\"", ",", "scene", ",", "\"gt.log\"", ")", "\n", "list_pair_num", ",", "list_mat", "=", "read_gt_log", "(", "path_log", ")", "\n", "for", "i", ",", "pair", "in", "enumerate", "(", "list_pair_num", ")", ":", "\n", "                ", "path1", "=", "osp", ".", "join", "(", "self", ".", "processed_dir", ",", "\"test\"", ",", "\"fragment\"", ",", "scene", ",", "\"fragment_{:06d}.pt\"", ".", "format", "(", "pair", "[", "0", "]", ")", ")", "\n", "path2", "=", "osp", ".", "join", "(", "self", ".", "processed_dir", ",", "\"test\"", ",", "\"fragment\"", ",", "scene", ",", "\"fragment_{:06d}.pt\"", ".", "format", "(", "pair", "[", "1", "]", ")", ")", "\n", "data1", "=", "torch", ".", "load", "(", "path1", ")", "\n", "data2", "=", "torch", ".", "load", "(", "path2", ")", "\n", "match", "=", "compute_overlap_and_matches", "(", "\n", "data1", ",", "\n", "data2", ",", "\n", "self", ".", "max_dist_overlap", ",", "\n", "trans_gt", "=", "torch", ".", "from_numpy", "(", "np", ".", "linalg", ".", "inv", "(", "list_mat", "[", "i", "]", ")", ")", ".", "to", "(", "data1", ".", "pos", ".", "dtype", ")", ",", "\n", ")", "\n", "match", "[", "\"path_source\"", "]", "=", "path1", "\n", "match", "[", "\"path_target\"", "]", "=", "path2", "\n", "match", "[", "\"name_source\"", "]", "=", "str", "(", "pair", "[", "0", "]", ")", "\n", "match", "[", "\"name_target\"", "]", "=", "str", "(", "pair", "[", "1", "]", ")", "\n", "match", "[", "\"scene\"", "]", "=", "scene", "\n", "out_path", "=", "osp", ".", "join", "(", "self", ".", "processed_dir", ",", "\"test\"", ",", "\"matches\"", ",", "\"matches{:06d}.npy\"", ".", "format", "(", "ind", ")", ")", "\n", "np", ".", "save", "(", "out_path", ",", "match", ")", "\n", "ind", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.basetest.Base3DMatchTest.process": [[213, 216], ["basetest.Base3DMatchTest._pre_transform_fragments_ply", "basetest.Base3DMatchTest._compute_matches_between_fragments"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.basetest.Base3DMatchTest._pre_transform_fragments_ply", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.basetest.BasePCRBTest._compute_matches_between_fragments"], ["", "", "", "def", "process", "(", "self", ")", ":", "\n", "        ", "self", ".", "_pre_transform_fragments_ply", "(", ")", "\n", "self", ".", "_compute_matches_between_fragments", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.basetest.Base3DMatchTest.__getitem__": [[217, 219], ["NotImplementedError"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"implement class to get patch or fragment or more\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.basetest.BasePCRBTest.__init__": [[229, 277], ["torch_geometric.data.Dataset.__init__", "os.join", "os.join", "os.listdir", "os.listdir", "os.listdir", "os.listdir"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "root", ",", "\n", "transform", "=", "None", ",", "\n", "pre_transform", "=", "None", ",", "\n", "pre_filter", "=", "None", ",", "\n", "verbose", "=", "False", ",", "\n", "debug", "=", "False", ",", "\n", "max_dist_overlap", "=", "0.01", ",", "\n", "num_pos_pairs", "=", "200", ",", "\n", "self_supervised", "=", "False", ",", "\n", "min_points", "=", "100", ",", "\n", "min_size_block", "=", "2", ",", "\n", "max_size_block", "=", "3", ",", "\n", "ss_transform", "=", "None", ",", "\n", "use_fps", "=", "False", ",", "\n", "is_name_path_int", "=", "True", ",", "\n", ")", ":", "\n", "\n", "        ", "\"\"\"\n        a baseDataset that download a dataset,\n        apply preprocessing, and compute keypoints\n\n        Parameters\n        ----------\n        max_dist_overlap: float\n            max distance between points to create a match\n        num_pos_pairs: int\n            number of positive pairs for the ground truth match\n        min_size_block: float\n            for self supervised, minimum size of the ball where points inside it will be matched\n        max_size_block: float\n            for self supervised, maximum size of the ball where points inside it will be matched\n        \"\"\"", "\n", "self", ".", "is_name_path_int", "=", "is_name_path_int", "\n", "self", ".", "max_dist_overlap", "=", "max_dist_overlap", "\n", "self", ".", "num_pos_pairs", "=", "num_pos_pairs", "\n", "self", ".", "is_online_matching", "=", "False", "\n", "super", "(", "BasePCRBTest", ",", "self", ")", ".", "__init__", "(", "root", ",", "transform", ",", "pre_transform", ",", "pre_filter", ")", "\n", "self", ".", "path_match", "=", "osp", ".", "join", "(", "self", ".", "processed_dir", ",", "\"test\"", ",", "\"matches\"", ")", "\n", "self", ".", "list_fragment", "=", "[", "f", "for", "f", "in", "os", ".", "listdir", "(", "self", ".", "path_match", ")", "if", "\"matches\"", "in", "f", "]", "\n", "# Self supervised variables", "\n", "self", ".", "self_supervised", "=", "self_supervised", "\n", "self", ".", "ss_transform", "=", "ss_transform", "\n", "self", ".", "min_points", "=", "min_points", "\n", "self", ".", "min_size_block", "=", "min_size_block", "\n", "self", ".", "max_size_block", "=", "max_size_block", "\n", "self", ".", "use_fps", "=", "use_fps", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.basetest.BasePCRBTest.download": [[279, 281], ["NotImplementedError"], "methods", ["None"], ["", "def", "download", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"need to implement the download procedure\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.basetest.BasePCRBTest.parse_pair_files": [[282, 293], ["range", "open", "f.readlines", "len", "data[].split", "dict", "res.append", "float", "int", "float"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.split", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append"], ["", "@", "staticmethod", "\n", "def", "parse_pair_files", "(", "filename", ")", ":", "\n", "        ", "with", "open", "(", "filename", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "data", "=", "f", ".", "readlines", "(", ")", "\n", "", "res", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "data", ")", ")", ":", "\n", "            ", "elem", "=", "data", "[", "i", "]", ".", "split", "(", "\" \"", ")", "\n", "trans", "=", "[", "float", "(", "t", ")", "for", "t", "in", "elem", "[", "4", ":", "]", "]", "\n", "dico", "=", "dict", "(", "id", "=", "int", "(", "elem", "[", "0", "]", ")", ",", "source_name", "=", "elem", "[", "1", "]", ",", "target_name", "=", "elem", "[", "2", "]", ",", "overlap", "=", "float", "(", "elem", "[", "3", "]", ")", ",", "trans", "=", "trans", ")", "\n", "res", ".", "append", "(", "dico", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.basetest.BasePCRBTest.read_pcd": [[294, 307], ["int", "numpy.zeros", "range", "numpy.prod", "open", "f.readlines", "[].split", "len", "[].split", "numpy.array", "[].split", "len", "numpy.isnan", "float", "data[].split", "data[].split", "data[].split"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.split", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.split", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.split", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.lovasz_loss.isnan", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.split", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.split", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.split"], ["", "@", "staticmethod", "\n", "def", "read_pcd", "(", "filename", ")", ":", "\n", "        ", "with", "open", "(", "filename", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "data", "=", "f", ".", "readlines", "(", ")", "\n", "", "field", "=", "data", "[", "2", "]", ".", "split", "(", "\"\\n\"", ")", "[", "0", "]", ".", "split", "(", "\" \"", ")", "[", "1", ":", "]", "\n", "num_pt", "=", "int", "(", "data", "[", "9", "]", ".", "split", "(", "\"\\n\"", ")", "[", "0", "]", ".", "split", "(", "\" \"", ")", "[", "1", "]", ")", "\n", "arr", "=", "np", ".", "zeros", "(", "(", "num_pt", ",", "len", "(", "field", ")", ")", ")", "\n", "for", "i", "in", "range", "(", "11", ",", "len", "(", "data", ")", ")", ":", "\n", "            ", "point", "=", "data", "[", "i", "]", ".", "split", "(", "\"\\n\"", ")", "[", "0", "]", ".", "split", "(", "\" \"", ")", "\n", "arr", "[", "i", "-", "11", "]", "=", "np", ".", "array", "(", "[", "float", "(", "p", ")", "for", "p", "in", "point", "]", ")", "\n", "", "mask", "=", "np", ".", "prod", "(", "~", "np", ".", "isnan", "(", "arr", ")", ",", "axis", "=", "1", ",", "dtype", "=", "bool", ")", "\n", "arr", "=", "arr", "[", "mask", ",", ":", "]", "\n", "return", "arr", ",", "field", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.basetest.BasePCRBTest.raw_file_names": [[308, 311], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "raw_file_names", "(", "self", ")", ":", "\n", "        ", "return", "[", "\"test\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.basetest.BasePCRBTest.processed_file_names": [[312, 316], ["os.join", "os.join", "os.join", "os.join"], "methods", ["None"], ["", "@", "property", "\n", "def", "processed_file_names", "(", "self", ")", ":", "\n", "        ", "res", "=", "[", "osp", ".", "join", "(", "\"test\"", ",", "\"fragment\"", ")", ",", "osp", ".", "join", "(", "\"test\"", ",", "\"matches\"", ")", "]", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.basetest.BasePCRBTest._pre_transform_fragments": [[317, 364], ["os.join", "os.join", "torch_points3d.datasets.registration.utils.files_exist", "torch_points3d.datasets.registration.utils.makedirs", "dict", "os.join", "os.join", "os.join", "os.join", "os.isfile", "os.isfile", "sorted", "enumerate", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.join", "os.join", "os.join", "os.join", "torch_points3d.datasets.registration.utils.makedirs", "torch.from_numpy().float", "torch_geometric.data.Data", "os.exists", "os.exists", "torch.save", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "basetest.BasePCRBTest.pre_transform", "basetest.find_int", "pandas.read_csv", "torch.tensor().float().unsqueeze", "torch_points_kernels.points_cpu.dense_knn", "log.warn", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "torch.from_numpy", "basetest.BasePCRBTest.pos.unsqueeze().float", "basetest.find_int", "torch.tensor().float", "basetest.BasePCRBTest.pos.unsqueeze", "basetest.BasePCRBTest.read_pcd", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.files_exist", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.makedirs", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.makedirs", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.basetest.find_int", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.basetest.find_int", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.basetest.BasePCRBTest.read_pcd"], ["", "def", "_pre_transform_fragments", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        apply pre_transform on fragments (ply) and save the results\n        \"\"\"", "\n", "out_dir", "=", "osp", ".", "join", "(", "self", ".", "processed_dir", ",", "\"test\"", ",", "\"fragment\"", ")", "\n", "if", "files_exist", "(", "[", "out_dir", "]", ")", ":", "# pragma: no cover", "\n", "            ", "return", "\n", "", "makedirs", "(", "out_dir", ")", "\n", "\n", "# table to map fragment numper with", "\n", "self", ".", "table", "=", "dict", "(", ")", "\n", "list_scene", "=", "[", "f", "for", "f", "in", "os", ".", "listdir", "(", "osp", ".", "join", "(", "self", ".", "raw_dir", ",", "\"test\"", ")", ")", "]", "\n", "for", "scene_path", "in", "list_scene", ":", "\n", "\n", "            ", "pose_path", "=", "osp", ".", "join", "(", "self", ".", "raw_dir", ",", "\"test\"", ",", "\n", "\"pose_{}.csv\"", ".", "format", "(", "scene_path", ")", ")", "\n", "\n", "fragment_dir", "=", "osp", ".", "join", "(", "self", ".", "raw_dir", ",", "\"test\"", ",", "scene_path", ")", "\n", "\n", "\n", "if", "osp", ".", "isfile", "(", "fragment_dir", ")", ":", "\n", "                ", "continue", "\n", "", "list_fragment_path", "=", "sorted", "(", "[", "f", "for", "f", "in", "os", ".", "listdir", "(", "fragment_dir", ")", "if", "\"pcd\"", "in", "f", "]", ")", "\n", "for", "i", ",", "f_p", "in", "enumerate", "(", "list_fragment_path", ")", ":", "\n", "                ", "fragment_path", "=", "osp", ".", "join", "(", "fragment_dir", ",", "f_p", ")", "\n", "out_dir", "=", "osp", ".", "join", "(", "self", ".", "processed_dir", ",", "\"test\"", ",", "\"fragment\"", ",", "scene_path", ")", "\n", "makedirs", "(", "out_dir", ")", "\n", "if", "(", "self", ".", "is_name_path_int", ")", ":", "\n", "                    ", "out_path", "=", "osp", ".", "join", "(", "out_dir", ",", "\"fragment_{:06d}.pt\"", ".", "format", "(", "find_int", "(", "f_p", ")", ")", ")", "\n", "", "else", ":", "\n", "                    ", "out_path", "=", "osp", ".", "join", "(", "out_dir", ",", "\"{}.pt\"", ".", "format", "(", "f_p", "[", ":", "-", "4", "]", ")", ")", "\n", "", "pos", "=", "torch", ".", "from_numpy", "(", "BasePCRBTest", ".", "read_pcd", "(", "fragment_path", ")", "[", "0", "]", "[", ":", ",", ":", "3", "]", ")", ".", "float", "(", ")", "\n", "data", "=", "Data", "(", "pos", "=", "pos", ")", "\n", "if", "self", ".", "pre_transform", "is", "not", "None", ":", "\n", "                    ", "data", "=", "self", ".", "pre_transform", "(", "data", ")", "\n", "", "if", "(", "osp", ".", "exists", "(", "pose_path", ")", ")", ":", "\n", "                    ", "ind", "=", "find_int", "(", "f_p", ")", "\n", "df", "=", "pd", ".", "read_csv", "(", "pose_path", ")", "\n", "center", "=", "torch", ".", "tensor", "(", "\n", "[", "[", "df", "[", "' T03'", "]", "[", "ind", "]", ",", "df", "[", "' T13'", "]", "[", "ind", "]", ",", "df", "[", "' T23'", "]", "[", "ind", "]", "]", "]", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "ind_sensors", ",", "_", "=", "dense_knn", "(", "data", ".", "pos", ".", "unsqueeze", "(", "0", ")", ".", "float", "(", ")", ",", "center", ",", "k", "=", "1", ")", "\n", "data", ".", "ind_sensors", "=", "ind_sensors", "[", "0", "]", "[", "0", "]", "\n", "", "else", ":", "\n", "                    ", "log", ".", "warn", "(", "\"No censors data\"", ")", "\n", "\n", "", "torch", ".", "save", "(", "data", ",", "out_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.basetest.BasePCRBTest._compute_matches_between_fragments": [[365, 411], ["os.join", "os.join", "torch_points3d.datasets.registration.utils.files_exist", "torch_points3d.datasets.registration.utils.makedirs", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.join", "os.join", "os.isfile", "os.isfile", "os.join", "os.join", "basetest.BasePCRBTest.parse_pair_files", "enumerate", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "torch.load", "torch.load", "torch_points3d.datasets.registration.utils.compute_overlap_and_matches", "os.join", "os.join", "numpy.save", "basetest.find_int", "basetest.find_int"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.files_exist", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.makedirs", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.basetest.BasePCRBTest.parse_pair_files", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.compute_overlap_and_matches", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.basetest.find_int", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.basetest.find_int"], ["", "", "", "def", "_compute_matches_between_fragments", "(", "self", ")", ":", "\n", "        ", "ind", "=", "0", "\n", "out_dir", "=", "osp", ".", "join", "(", "self", ".", "processed_dir", ",", "\"test\"", ",", "\"matches\"", ")", "\n", "if", "files_exist", "(", "[", "out_dir", "]", ")", ":", "# pragma: no cover", "\n", "            ", "return", "\n", "", "makedirs", "(", "out_dir", ")", "\n", "\n", "list_scene", "=", "os", ".", "listdir", "(", "osp", ".", "join", "(", "self", ".", "raw_dir", ",", "\"test\"", ")", ")", "\n", "for", "scene", "in", "list_scene", ":", "\n", "            ", "if", "osp", ".", "isfile", "(", "osp", ".", "join", "(", "self", ".", "raw_dir", ",", "\"test\"", ",", "scene", ")", ")", ":", "\n", "                ", "continue", "\n", "", "path_log", "=", "osp", ".", "join", "(", "self", ".", "raw_dir", ",", "\"test\"", ",", "scene", "+", "\"_global.txt\"", ")", "\n", "list_pair", "=", "BasePCRBTest", ".", "parse_pair_files", "(", "path_log", ")", "\n", "for", "i", ",", "pair", "in", "enumerate", "(", "list_pair", ")", ":", "\n", "                ", "if", "(", "self", ".", "is_name_path_int", ")", ":", "\n", "                    ", "name_fragment_s", "=", "\"fragment_{:06d}.pt\"", ".", "format", "(", "find_int", "(", "pair", "[", "\"source_name\"", "]", ")", ")", "\n", "name_fragment_t", "=", "\"fragment_{:06d}.pt\"", ".", "format", "(", "find_int", "(", "pair", "[", "\"target_name\"", "]", ")", ")", "\n", "", "else", ":", "\n", "                    ", "name_fragment_s", "=", "\"{}.pt\"", ".", "format", "(", "pair", "[", "\"source_name\"", "]", "[", ":", "-", "4", "]", ")", "\n", "name_fragment_t", "=", "\"{}.pt\"", ".", "format", "(", "pair", "[", "\"target_name\"", "]", "[", ":", "-", "4", "]", ")", "\n", "", "path1", "=", "osp", ".", "join", "(", "\n", "self", ".", "processed_dir", ",", "\n", "\"test\"", ",", "\n", "\"fragment\"", ",", "\n", "scene", ",", "\n", "name_fragment_s", "\n", ")", "\n", "path2", "=", "osp", ".", "join", "(", "\n", "self", ".", "processed_dir", ",", "\n", "\"test\"", ",", "\n", "\"fragment\"", ",", "\n", "scene", ",", "\n", "name_fragment_t", "\n", ")", "\n", "data1", "=", "torch", ".", "load", "(", "path1", ")", "\n", "data2", "=", "torch", ".", "load", "(", "path2", ")", "\n", "match", "=", "compute_overlap_and_matches", "(", "data1", ",", "data2", ",", "self", ".", "max_dist_overlap", ")", "\n", "match", "[", "\"path_source\"", "]", "=", "path1", "\n", "match", "[", "\"path_target\"", "]", "=", "path2", "\n", "match", "[", "\"name_source\"", "]", "=", "pair", "[", "\"source_name\"", "]", "\n", "match", "[", "\"name_target\"", "]", "=", "pair", "[", "\"target_name\"", "]", "\n", "match", "[", "\"scene\"", "]", "=", "scene", "\n", "match", "[", "\"trans\"", "]", "=", "pair", "[", "\"trans\"", "]", "\n", "out_path", "=", "osp", ".", "join", "(", "self", ".", "processed_dir", ",", "\"test\"", ",", "\"matches\"", ",", "\"matches{:06d}.npy\"", ".", "format", "(", "ind", ")", ")", "\n", "np", ".", "save", "(", "out_path", ",", "match", ")", "\n", "ind", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.basetest.BasePCRBTest.process": [[412, 415], ["basetest.BasePCRBTest._pre_transform_fragments", "basetest.BasePCRBTest._compute_matches_between_fragments"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.basetest.BasePCRBTest._pre_transform_fragments", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.basetest.BasePCRBTest._compute_matches_between_fragments"], ["", "", "", "def", "process", "(", "self", ")", ":", "\n", "        ", "self", ".", "_pre_transform_fragments", "(", ")", "\n", "self", ".", "_compute_matches_between_fragments", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.basetest.BasePCRBTest.download_pairs": [[416, 426], ["log.info", "requests.get", "log.info", "os.remove", "os.remove", "os.remove", "os.remove", "open", "archive.write", "zipfile.ZipFile", "zip_obj.extractall", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get"], ["", "def", "download_pairs", "(", "self", ",", "path", ")", ":", "\n", "        ", "log", ".", "info", "(", "\"download pairs\"", ")", "\n", "req", "=", "requests", ".", "get", "(", "self", ".", "link_pairs", ")", "\n", "with", "open", "(", "osp", ".", "join", "(", "path", ",", "\"pairs.zip\"", ")", ",", "\"wb\"", ")", "as", "archive", ":", "\n", "            ", "archive", ".", "write", "(", "req", ".", "content", ")", "\n", "\n", "", "with", "ZipFile", "(", "osp", ".", "join", "(", "path", ",", "\"pairs.zip\"", ")", ",", "\"r\"", ")", "as", "zip_obj", ":", "\n", "            ", "zip_obj", ".", "extractall", "(", "path", ")", "\n", "", "log", ".", "info", "(", "\"remove pairs\"", ")", "\n", "os", ".", "remove", "(", "osp", ".", "join", "(", "path", ",", "\"pairs.zip\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.basetest.BasePCRBTest.get_raw_pair": [[427, 450], ["numpy.load().item", "torch.load().to", "torch.load().to", "torch.from_numpy", "torch.tensor().reshape", "basetest.BasePCRBTest.unsupervised_preprocess", "numpy.load", "getattr", "random.random", "torch.load().to", "torch.load().to", "torch.load().to", "torch.load().to", "os.join", "os.join", "torch.load", "torch.load", "torch.tensor", "torch.load", "torch.load", "torch.load", "torch.load"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base_siamese_dataset.GeneralFragment.unsupervised_preprocess", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load"], ["", "def", "get_raw_pair", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\"\n        get the pair before the data augmentation\n        \"\"\"", "\n", "match", "=", "np", ".", "load", "(", "osp", ".", "join", "(", "self", ".", "path_match", ",", "\"matches{:06d}.npy\"", ".", "format", "(", "idx", ")", ")", ",", "allow_pickle", "=", "True", ")", ".", "item", "(", ")", "\n", "\n", "if", "not", "self", ".", "self_supervised", ":", "\n", "            ", "data_source", "=", "torch", ".", "load", "(", "match", "[", "\"path_source\"", "]", ")", ".", "to", "(", "torch", ".", "float", ")", "\n", "data_target", "=", "torch", ".", "load", "(", "match", "[", "\"path_target\"", "]", ")", ".", "to", "(", "torch", ".", "float", ")", "\n", "new_pair", "=", "torch", ".", "from_numpy", "(", "match", "[", "\"pair\"", "]", ")", "\n", "trans", "=", "torch", ".", "tensor", "(", "match", "[", "\"trans\"", "]", ")", ".", "reshape", "(", "3", ",", "4", ")", "\n", "data_target", ".", "pos", "=", "data_target", ".", "pos", "@", "trans", "[", ":", "3", ",", ":", "3", "]", ".", "T", "+", "trans", "[", ":", "3", ",", "3", "]", "\n", "if", "getattr", "(", "data_target", ",", "\"norm\"", ",", "None", ")", "is", "not", "None", ":", "\n", "                ", "data_target", ".", "norm", "=", "data_target", ".", "norm", "@", "trans", "[", ":", "3", ",", ":", "3", "]", ".", "T", "\n", "", "", "else", ":", "\n", "            ", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "                ", "data_source_o", "=", "torch", ".", "load", "(", "match", "[", "\"path_source\"", "]", ")", ".", "to", "(", "torch", ".", "float", ")", "\n", "data_target_o", "=", "torch", ".", "load", "(", "match", "[", "\"path_source\"", "]", ")", ".", "to", "(", "torch", ".", "float", ")", "\n", "", "else", ":", "\n", "                ", "data_source_o", "=", "torch", ".", "load", "(", "match", "[", "\"path_target\"", "]", ")", ".", "to", "(", "torch", ".", "float", ")", "\n", "data_target_o", "=", "torch", ".", "load", "(", "match", "[", "\"path_target\"", "]", ")", ".", "to", "(", "torch", ".", "float", ")", "\n", "", "data_source", ",", "data_target", ",", "new_pair", "=", "self", ".", "unsupervised_preprocess", "(", "data_source_o", ",", "data_target_o", ")", "\n", "", "return", "data_source", ",", "data_target", ",", "new_pair", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.basetest.BasePCRBTest.__getitem__": [[451, 453], ["basetest.BasePCRBTest.get_fragment"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base_siamese_dataset.GeneralFragment.get_fragment"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "get_fragment", "(", "idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.basetest.BasePCRBTest.__len__": [[454, 456], ["len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "list_fragment", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.basetest.find_int": [[38, 41], ["int", "re.findall"], "function", ["None"], ["def", "find_int", "(", "path", ")", ":", "\n", "    ", "number", "=", "re", ".", "findall", "(", "\"\\d+\"", ",", "path", ")", "[", "0", "]", "\n", "return", "int", "(", "number", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.basetest.read_gt_log": [[43, 64], ["numpy.zeros", "range", "list_mat.append", "open", "f.readlines", "len", "numpy.zeros", "list_pair.append", "all_mat[].split", "numpy.asarray", "list_mat.append", "list", "map", "all_mat[].split"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.split", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.split"], ["", "def", "read_gt_log", "(", "path", ")", ":", "\n", "    ", "\"\"\"\n    read the gt.log of evaluation set of 3DMatch or ETH Dataset and parse it.\n    \"\"\"", "\n", "list_pair", "=", "[", "]", "\n", "list_mat", "=", "[", "]", "\n", "with", "open", "(", "path", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "all_mat", "=", "f", ".", "readlines", "(", ")", "\n", "", "mat", "=", "np", ".", "zeros", "(", "(", "4", ",", "4", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "all_mat", ")", ")", ":", "\n", "        ", "if", "i", "%", "5", "==", "0", ":", "\n", "            ", "if", "i", "!=", "0", ":", "\n", "                ", "list_mat", ".", "append", "(", "mat", ")", "\n", "", "mat", "=", "np", ".", "zeros", "(", "(", "4", ",", "4", ")", ")", "\n", "list_pair", ".", "append", "(", "list", "(", "map", "(", "int", ",", "all_mat", "[", "i", "]", ".", "split", "(", "\"\\t\"", ")", "[", ":", "-", "1", "]", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "line", "=", "all_mat", "[", "i", "]", ".", "split", "(", "\"\\t\"", ")", "\n", "\n", "mat", "[", "i", "%", "5", "-", "1", "]", "=", "np", ".", "asarray", "(", "line", "[", ":", "4", "]", ",", "dtype", "=", "np", ".", "float", ")", "\n", "", "", "list_mat", ".", "append", "(", "mat", ")", "\n", "return", "list_pair", ",", "list_mat", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.testplanetary.TestPairPlanetary.__init__": [[36, 65], ["torch_points3d.datasets.registration.basetest.BasePCRBTest.__init__"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["def", "__init__", "(", "self", ",", "root", ",", "\n", "transform", "=", "None", ",", "\n", "pre_transform", "=", "None", ",", "\n", "pre_filter", "=", "None", ",", "\n", "verbose", "=", "False", ",", "\n", "debug", "=", "False", ",", "\n", "num_pos_pairs", "=", "200", ",", "\n", "max_dist_overlap", "=", "0.01", ",", "\n", "self_supervised", "=", "False", ",", "\n", "min_size_block", "=", "2", ",", "\n", "max_size_block", "=", "3", ",", "\n", "min_points", "=", "500", ",", "\n", "ss_transform", "=", "None", ",", "\n", "use_fps", "=", "False", ")", ":", "\n", "        ", "self", ".", "link_pairs", "=", "\"https://cloud.mines-paristech.fr/index.php/s/7cqiTMIIqwvMOtA/download\"", "\n", "BasePCRBTest", ".", "__init__", "(", "self", ",", "\n", "root", "=", "root", ",", "\n", "transform", "=", "transform", ",", "\n", "pre_transform", "=", "pre_transform", ",", "\n", "pre_filter", "=", "pre_filter", ",", "\n", "verbose", "=", "verbose", ",", "debug", "=", "debug", ",", "\n", "max_dist_overlap", "=", "max_dist_overlap", ",", "\n", "num_pos_pairs", "=", "num_pos_pairs", ",", "\n", "self_supervised", "=", "self_supervised", ",", "\n", "min_size_block", "=", "min_size_block", ",", "\n", "max_size_block", "=", "max_size_block", ",", "\n", "min_points", "=", "min_points", ",", "\n", "ss_transform", "=", "ss_transform", ",", "\n", "use_fps", "=", "use_fps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.testplanetary.TestPairPlanetary.download": [[66, 100], ["os.join", "os.join", "torch_points3d.datasets.registration.utils.files_exist", "ftplib.FTP", "ftplib.FTP.login", "log.info", "gdown.download", "testplanetary.TestPairPlanetary.download_pairs", "log.warning", "torch_points3d.datasets.registration.utils.makedirs", "os.join", "os.join", "log.info", "ftplib.FTP.retrbinary", "os.remove", "os.remove", "os.remove", "os.remove", "zipfile.ZipFile", "log.info", "zip_obj.extractall", "os.scandir", "os.scandir", "os.scandir", "os.scandir", "log.info", "open", "os.join", "os.join", "entry.is_dir", "open3d.io.read_point_cloud", "numpy.loadtxt", "open3d.io.read_point_cloud.transform", "open3d.io.write_point_cloud", "shutil.rmtree"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.files_exist", "home.repos.pwc.inspect_result.drprojects_deepviewagg.classification.modelnet.SampledModelNet.download", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.basetest.BasePCRBTest.download_pairs", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.makedirs"], ["", "def", "download", "(", "self", ")", ":", "\n", "        ", "folder", "=", "osp", ".", "join", "(", "self", ".", "raw_dir", ",", "\"test\"", ")", "\n", "if", "files_exist", "(", "[", "folder", "]", ")", ":", "# pragma: no cover", "\n", "            ", "log", ".", "warning", "(", "\"already downloaded {}\"", ".", "format", "(", "\"test\"", ")", ")", "\n", "return", "\n", "", "else", ":", "\n", "            ", "makedirs", "(", "folder", ")", "\n", "", "ftp", "=", "FTP", "(", "'asrl3.utias.utoronto.ca'", ")", "\n", "ftp", ".", "login", "(", ")", "\n", "log", ".", "info", "(", "\"Download elements in the file {}...\"", ".", "format", "(", "folder", ")", ")", "\n", "for", "name", ",", "url", "in", "self", ".", "DATASETS", ":", "\n", "            ", "zip_file", "=", "osp", ".", "join", "(", "folder", ",", "name", "+", "'.zip'", ")", "\n", "log", ".", "info", "(", "\"Downloading dataset %s\"", "%", "name", ")", "\n", "ftp", ".", "retrbinary", "(", "'RETR '", "+", "url", ",", "open", "(", "zip_file", ",", "'wb'", ")", ".", "write", ")", "\n", "with", "ZipFile", "(", "zip_file", ",", "'r'", ")", "as", "zip_obj", ":", "\n", "                ", "log", ".", "info", "(", "\"Extracting dataset %s\"", "%", "name", ")", "\n", "zip_obj", ".", "extractall", "(", "folder", ")", "\n", "", "with", "os", ".", "scandir", "(", "osp", ".", "join", "(", "folder", ",", "name", ")", ")", "as", "directory", ":", "\n", "                ", "log", ".", "info", "(", "\"Configuring dataset %s\"", "%", "name", ")", "\n", "for", "entry", "in", "directory", ":", "\n", "                    ", "if", "entry", ".", "is_dir", "(", ")", ":", "\n", "                        ", "base_path", "=", "entry", ".", "path", "+", "\"/\"", "+", "entry", ".", "name", "\n", "file_name", "=", "base_path", "+", "\".xyz\"", "\n", "ground_truth_name", "=", "base_path", "+", "\".gt\"", "\n", "pcd_file_name", "=", "entry", ".", "path", "+", "\".pcd\"", "\n", "pcd", "=", "open3d", ".", "io", ".", "read_point_cloud", "(", "file_name", ",", "format", "=", "\"xyz\"", ",", "remove_nan_points", "=", "True", ",", "remove_infinite_points", "=", "True", ",", "print_progress", "=", "False", ")", "\n", "ground_truth", "=", "numpy", ".", "loadtxt", "(", "ground_truth_name", ")", "\n", "pcd", ".", "transform", "(", "ground_truth", ")", "\n", "open3d", ".", "io", ".", "write_point_cloud", "(", "pcd_file_name", ",", "pcd", ",", "write_ascii", "=", "True", ",", "compressed", "=", "False", ",", "print_progress", "=", "False", ")", "\n", "shutil", ".", "rmtree", "(", "entry", ".", "path", ")", "\n", "", "", "", "os", ".", "remove", "(", "zip_file", ")", "\n", "\n", "", "gdown", ".", "download", "(", "\"https://drive.google.com/uc?id=1marTTFGjlDTb-MLj7pm5zV1u-0IS-xFc\"", ",", "folder", "+", "\"/p2at_met/box_map.pcd\"", ",", "quiet", "=", "True", ")", "\n", "self", ".", "download_pairs", "(", "folder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.testplanetary.TestPairPlanetary.process": [[101, 103], ["super().process"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.classification.modelnet.SampledModelNet.process"], ["", "def", "process", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "process", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.testplanetary.PlanetaryDataset.__init__": [[114, 143], ["torch_points3d.datasets.registration.base_siamese_dataset.BaseSiameseDataset.__init__", "getattr", "testplanetary.TestPairPlanetary", "testplanetary.TestPairPlanetary"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["def", "__init__", "(", "self", ",", "dataset_opt", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dataset_opt", ")", "\n", "pre_transform", "=", "self", ".", "pre_transform", "\n", "train_transform", "=", "self", ".", "train_transform", "\n", "ss_transform", "=", "getattr", "(", "self", ",", "\"ss_transform\"", ",", "None", ")", "\n", "test_transform", "=", "self", ".", "test_transform", "\n", "\n", "# training is similar to test but only unsupervised training is allowed XD", "\n", "self", ".", "train_dataset", "=", "TestPairPlanetary", "(", "\n", "root", "=", "self", ".", "_data_path", ",", "\n", "pre_transform", "=", "pre_transform", ",", "\n", "transform", "=", "train_transform", ",", "\n", "max_dist_overlap", "=", "dataset_opt", ".", "max_dist_overlap", ",", "\n", "self_supervised", "=", "True", ",", "\n", "min_size_block", "=", "dataset_opt", ".", "min_size_block", ",", "\n", "max_size_block", "=", "dataset_opt", ".", "max_size_block", ",", "\n", "num_pos_pairs", "=", "dataset_opt", ".", "num_pos_pairs", ",", "\n", "min_points", "=", "dataset_opt", ".", "min_points", ",", "\n", "ss_transform", "=", "ss_transform", ",", "\n", "use_fps", "=", "dataset_opt", ".", "use_fps", "\n", ")", "\n", "self", ".", "test_dataset", "=", "TestPairPlanetary", "(", "\n", "root", "=", "self", ".", "_data_path", ",", "\n", "pre_transform", "=", "pre_transform", ",", "\n", "transform", "=", "test_transform", ",", "\n", "max_dist_overlap", "=", "dataset_opt", ".", "max_dist_overlap", ",", "\n", "num_pos_pairs", "=", "dataset_opt", ".", "num_pos_pairs", ",", "\n", "self_supervised", "=", "False", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base.PatchSiamese.__init__": [[22, 35], ["torch_points3d.models.base_architectures.BackboneBasedModel.__init__", "base.PatchSiamese.set_last_mlp"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.pointnet2.PatchPointNet2_D.set_last_mlp"], ["self", ",", "option", ",", "model_type", ",", "dataset", ",", "modules", "\n", ")", "# call the initialization method of UnetBasedModel", "\n", "\n", "self", ".", "_weight_classes", "=", "dataset", ".", "weight_classes", "\n", "\n", "nn", "=", "option", ".", "mlp_cls", ".", "nn", "\n", "self", ".", "dropout", "=", "option", ".", "mlp_cls", ".", "get", "(", "\"dropout\"", ")", "\n", "self", ".", "lin1", "=", "torch", ".", "nn", ".", "Linear", "(", "nn", "[", "0", "]", ",", "nn", "[", "1", "]", ")", "\n", "self", ".", "lin2", "=", "torch", ".", "nn", ".", "Linear", "(", "nn", "[", "2", "]", ",", "nn", "[", "3", "]", ")", "\n", "self", ".", "lin3", "=", "torch", ".", "nn", ".", "Linear", "(", "nn", "[", "4", "]", ",", "dataset", ".", "num_classes", ")", "\n", "\n", "self", ".", "loss_names", "=", "[", "\"loss_seg\"", "]", "\n", "\n", "", "def", "set_input", "(", "self", ",", "data", ",", "device", ")", ":", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base.PatchSiamese.set_input": [[36, 47], ["data.to.to.to", "isinstance", "base.create_batch_siamese"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base.create_batch_siamese"], ["        ", "\"\"\"Unpack input data from the dataloader and perform necessary pre-processing steps.\n        Parameters:\n            input: a dictionary that contains the data itself and its metadata information.\n        \"\"\"", "\n", "data", "=", "data", ".", "to", "(", "device", ")", "\n", "self", ".", "input", "=", "data", "\n", "self", ".", "labels", "=", "data", ".", "y", "\n", "self", ".", "batch_idx", "=", "data", ".", "batch", "\n", "\n", "", "def", "forward", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", "->", "Any", ":", "\n", "        ", "\"\"\"Run forward pass. This will be called by both functions <optimize_parameters> and <test>.\"\"\"", "\n", "data", "=", "self", ".", "model", "(", "self", ".", "input", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base.PatchSiamese.set_last_mlp": [[48, 52], ["torch_points3d.core.common_modules.base_modules.Seq", "range", "len", "base.PatchSiamese.FC_layer.append", "torch_points3d.core.common_modules.dense_modules.Conv1D"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append"], ["x", "=", "F", ".", "relu", "(", "self", ".", "lin1", "(", "data", ".", "x", ")", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "bool", "(", "self", ".", "training", ")", ")", "\n", "x", "=", "self", ".", "lin2", "(", "x", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "bool", "(", "self", ".", "training", ")", ")", "\n", "x", "=", "self", ".", "lin3", "(", "x", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base.PatchSiamese.set_loss": [[53, 55], ["NotImplementedError"], "methods", ["None"], ["self", ".", "output", "=", "F", ".", "log_softmax", "(", "x", ",", "dim", "=", "-", "1", ")", "\n", "\n", "if", "self", ".", "labels", "is", "not", "None", ":", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base.PatchSiamese.forward": [[56, 69], ["range", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "base.PatchSiamese.lin2", "len", "base.PatchSiamese.lin1", "base.PatchSiamese.loss_module", "base.PatchSiamese.get_internal_loss"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.get_internal_loss"], ["            ", "self", ".", "loss_seg", "=", "F", ".", "nll_loss", "(", "self", ".", "output", ",", "self", ".", "labels", ",", "ignore_index", "=", "IGNORE_LABEL", ")", "+", "self", ".", "get_internal_loss", "(", ")", "\n", "\n", "", "return", "self", ".", "output", "\n", "\n", "", "def", "backward", "(", "self", ")", ":", "\n", "        ", "\"\"\"Calculate losses, gradients, and update network weights; called in every training iteration\"\"\"", "\n", "# caculate the intermediate results if necessary; here self.output has been computed during function <forward>", "\n", "# calculate loss given the input and intermediate results", "\n", "self", ".", "loss_seg", ".", "backward", "(", ")", "# calculate gradients of network G w.r.t. loss_G", "\n", "", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base.PatchSiamese.backward": [[70, 75], ["base.PatchSiamese.loss_reg.backward"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.panoptic.pointgroup.PointGroup.backward"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base.FragmentBaseModel.__init__": [[78, 80], ["torch_points3d.models.base_model.BaseModel.__init__"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base.FragmentBaseModel.set_input": [[81, 83], ["NotImplementedError"], "methods", ["None"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base.FragmentBaseModel.compute_loss_match": [[84, 93], ["hasattr", "base.FragmentBaseModel.metric_loss_module"], "methods", ["None"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base.FragmentBaseModel.compute_loss_label": [[94, 108], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "base.FragmentBaseModel.metric_loss_module", "len", "base.FragmentBaseModel.miner_module"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base.FragmentBaseModel.compute_loss": [[109, 116], ["base.FragmentBaseModel.compute_loss_match", "base.FragmentBaseModel.compute_loss_label", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base.FragmentBaseModel.compute_loss_match", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base.FragmentBaseModel.compute_loss_label"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base.FragmentBaseModel.apply_nn": [[117, 119], ["NotImplementedError"], "methods", ["None"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base.FragmentBaseModel.forward": [[120, 129], ["base.FragmentBaseModel.apply_nn", "base.FragmentBaseModel.apply_nn", "base.FragmentBaseModel.compute_loss"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.ms_svconv3d.MS_SparseConv3d_Shared_Pool.apply_nn", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.ms_svconv3d.MS_SparseConv3d_Shared_Pool.apply_nn", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.kpconv.FragmentKPConv.compute_loss"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base.FragmentBaseModel.backward": [[130, 133], ["hasattr", "base.FragmentBaseModel.loss.backward"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.panoptic.pointgroup.PointGroup.backward"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base.FragmentBaseModel.get_output": [[134, 139], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base.FragmentBaseModel.get_batch": [[140, 142], ["NotImplementedError"], "methods", ["None"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base.FragmentBaseModel.get_input": [[143, 145], ["NotImplementedError"], "methods", ["None"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base.create_batch_siamese": [[14, 19], ["None"], "function", ["None"], ["        "]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.kpconv.PatchKPConv.__init__": [[37, 42], ["torch_points3d.models.base_architectures.BackboneBasedModel.__init__", "kpconv.PatchKPConv.set_last_mlp"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.pointnet2.PatchPointNet2_D.set_last_mlp"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.kpconv.PatchKPConv.set_last_mlp": [[43, 53], ["len", "torch_points3d.core.common_modules.MLP", "kpconv.PatchKPConv.FC_layer.add_module", "torch.nn.Linear", "torch.nn.Linear", "len", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Linear", "torch.nn.Linear", "len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.MLP", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["\n", "factory", "=", "KPConvFactory", "(", "\n", "architecture", "=", "architecture", ",", "num_layers", "=", "num_layers", ",", "input_nc", "=", "input_nc", ",", "config", "=", "config", ",", "**", "kwargs", "\n", ")", "\n", "return", "factory", ".", "build", "(", ")", "\n", "\n", "\n", "", "class", "KPConvFactory", "(", "ModelFactory", ")", ":", "\n", "    ", "def", "_build_unet", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_config", ":", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.kpconv.PatchKPConv.set_input": [[54, 79], ["data.to.to.to", "add_ones", "isinstance", "getattr", "add_ones", "isinstance", "data.to.to.to_data", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "len", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.KPConv.kernels.add_ones", "home.repos.pwc.inspect_result.drprojects_deepviewagg.KPConv.kernels.add_ones", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.pair.Pair.to_data", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat"], ["            ", "model_config", "=", "self", ".", "_config", "\n", "", "else", ":", "\n", "            ", "path_to_model", "=", "os", ".", "path", ".", "join", "(", "PATH_TO_CONFIG", ",", "\"unet_{}.yaml\"", ".", "format", "(", "self", ".", "num_layers", ")", ")", "\n", "model_config", "=", "OmegaConf", ".", "load", "(", "path_to_model", ")", "\n", "", "ModelFactory", ".", "resolve_model", "(", "model_config", ",", "self", ".", "num_features", ",", "self", ".", "_kwargs", ")", "\n", "modules_lib", "=", "sys", ".", "modules", "[", "__name__", "]", "\n", "return", "KPConvUnet", "(", "model_config", ",", "None", ",", "None", ",", "modules_lib", ",", "**", "self", ".", "kwargs", ")", "\n", "\n", "", "def", "_build_encoder", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_config", ":", "\n", "            ", "model_config", "=", "self", ".", "_config", "\n", "", "else", ":", "\n", "            ", "path_to_model", "=", "os", ".", "path", ".", "join", "(", "PATH_TO_CONFIG", ",", "\"encoder_{}.yaml\"", ".", "format", "(", "self", ".", "num_layers", ")", ")", "\n", "model_config", "=", "OmegaConf", ".", "load", "(", "path_to_model", ")", "\n", "", "ModelFactory", ".", "resolve_model", "(", "model_config", ",", "self", ".", "num_features", ",", "self", ".", "_kwargs", ")", "\n", "modules_lib", "=", "sys", ".", "modules", "[", "__name__", "]", "\n", "return", "KPConvEncoder", "(", "model_config", ",", "None", ",", "None", ",", "modules_lib", ",", "**", "self", ".", "kwargs", ")", "\n", "\n", "\n", "", "", "class", "BaseKPConv", "(", "UnwrappedUnetBasedModel", ")", ":", "\n", "    ", "CONV_TYPE", "=", "\"partial_dense\"", "\n", "\n", "def", "__init__", "(", "self", ",", "model_config", ",", "model_type", ",", "dataset", ",", "modules", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "BaseKPConv", ",", "self", ")", ".", "__init__", "(", "model_config", ",", "model_type", ",", "dataset", ",", "modules", ")", "\n", "try", ":", "\n", "            ", "default_output_nc", "=", "extract_output_nc", "(", "model_config", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.kpconv.PatchKPConv.apply_nn": [[80, 88], ["range", "torch_geometric.nn.global_mean_pool", "kpconv.PatchKPConv.FC_layer", "torch.normalize", "torch.normalize", "len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "except", ":", "\n", "            ", "default_output_nc", "=", "-", "1", "\n", "log", ".", "warning", "(", "\"Could not resolve number of output channels\"", ")", "\n", "\n", "", "self", ".", "_output_nc", "=", "default_output_nc", "\n", "self", ".", "_has_mlp_head", "=", "False", "\n", "if", "\"output_nc\"", "in", "kwargs", ":", "\n", "            ", "self", ".", "_has_mlp_head", "=", "True", "\n", "self", ".", "_output_nc", "=", "kwargs", "[", "\"output_nc\"", "]", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.kpconv.PatchKPConv.forward": [[89, 99], ["kpconv.PatchKPConv.apply_nn", "kpconv.PatchKPConv.apply_nn", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "kpconv.PatchKPConv.compute_loss"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.ms_svconv3d.MS_SparseConv3d_Shared_Pool.apply_nn", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.ms_svconv3d.MS_SparseConv3d_Shared_Pool.apply_nn", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.kpconv.FragmentKPConv.compute_loss"], ["self", ".", "mlp", "=", "MLP", "(", "[", "default_output_nc", ",", "self", ".", "output_nc", "]", ",", "activation", "=", "torch", ".", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "bias", "=", "False", ")", "\n", "\n", "", "", "@", "property", "\n", "def", "has_mlp_head", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_has_mlp_head", "\n", "\n", "", "@", "property", "\n", "def", "output_nc", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_output_nc", "\n", "\n", "", "def", "_set_input", "(", "self", ",", "data", ")", ":", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.kpconv.PatchKPConv.compute_loss": [[100, 118], ["kpconv.PatchKPConv.metric_loss_module", "kpconv.PatchKPConv.get_regularization_loss", "kpconv.PatchKPConv.collect_internal_losses", "kpconv.PatchKPConv.miner_module"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.get_regularization_loss", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.collect_internal_losses"], ["        ", "\"\"\"Unpack input data from the dataloader and perform necessary pre-processing steps.\n\n        Parameters\n        -----------\n        data:\n            a dictionary that contains the data itself and its metadata information.\n        \"\"\"", "\n", "data", "=", "data", ".", "to", "(", "self", ".", "device", ")", "\n", "if", "isinstance", "(", "data", ",", "MultiScaleBatch", ")", ":", "\n", "            ", "self", ".", "pre_computed", "=", "data", ".", "multiscale", "\n", "self", ".", "upsample", "=", "data", ".", "upsample", "\n", "del", "data", ".", "upsample", "\n", "del", "data", ".", "multiscale", "\n", "", "else", ":", "\n", "            ", "self", ".", "upsample", "=", "None", "\n", "self", ".", "pre_computed", "=", "None", "\n", "\n", "", "self", ".", "input", "=", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.kpconv.PatchKPConv.backward": [[119, 125], ["hasattr", "kpconv.PatchKPConv.loss.backward"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.panoptic.pointgroup.PointGroup.backward"], ["\n", "", "", "class", "KPConvEncoder", "(", "BaseKPConv", ")", ":", "\n", "    ", "def", "forward", "(", "self", ",", "data", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.kpconv.FragmentKPConv.__init__": [[128, 167], ["torch_points3d.models.base_architectures.unet.UnwrappedUnetBasedModel.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "range", "kpconv.FragmentKPConv.FC_layer.add_module", "kpconv.FragmentKPConv.get_from_opt", "kpconv.FragmentKPConv.get_from_opt", "len", "kpconv.FragmentKPConv.FC_layer.add_module", "kpconv.FragmentKPConv.FC_layer.add_module", "torch.nn.Linear", "torch.nn.Linear", "str", "torch.nn.Sequential", "torch.nn.Sequential", "Dropout", "torch.nn.Linear", "torch.nn.Linear", "torch_points3d.core.common_modules.FastBatchNorm1d", "LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.get_from_opt", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.get_from_opt", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["\n", "self", ".", "_set_input", "(", "data", ")", "\n", "data", "=", "self", ".", "input", "\n", "stack_down", "=", "[", "data", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "down_modules", ")", "-", "1", ")", ":", "\n", "            ", "data", "=", "self", ".", "down_modules", "[", "i", "]", "(", "data", ")", "\n", "stack_down", ".", "append", "(", "data", ")", "\n", "", "data", "=", "self", ".", "down_modules", "[", "-", "1", "]", "(", "data", ")", "\n", "\n", "if", "not", "isinstance", "(", "self", ".", "inner_modules", "[", "0", "]", ",", "Identity", ")", ":", "\n", "            ", "stack_down", ".", "append", "(", "data", ")", "\n", "data", "=", "self", ".", "inner_modules", "[", "0", "]", "(", "data", ")", "\n", "\n", "", "if", "self", ".", "has_mlp_head", ":", "\n", "            ", "data", ".", "x", "=", "self", ".", "mlp", "(", "data", ".", "x", ")", "\n", "", "return", "data", "\n", "\n", "\n", "", "", "class", "KPConvUnet", "(", "BaseKPConv", ")", ":", "\n", "    ", "def", "forward", "(", "self", ",", "data", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.kpconv.FragmentKPConv.set_input": [[168, 194], ["isinstance", "torch_geometric.data.Data().to", "hasattr", "isinstance", "torch_geometric.data.Data().to", "data.pair_ind.to().to", "data.size_pair_ind.to().to", "f.to", "f.to", "torch_geometric.data.Data", "f.to", "f.to", "torch_geometric.data.Data", "data.pair_ind.to", "data.size_pair_ind.to"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to"], ["\n", "self", ".", "_set_input", "(", "data", ")", "\n", "data", "=", "super", "(", ")", ".", "forward", "(", "self", ".", "input", ",", "precomputed_down", "=", "self", ".", "pre_computed", ",", "precomputed_up", "=", "self", ".", "upsample", ")", "\n", "if", "self", ".", "has_mlp_head", ":", "\n", "            ", "data", ".", "x", "=", "self", ".", "mlp", "(", "data", ".", "x", ")", "\n", "", "return", "data", "\n", "", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.kpconv.FragmentKPConv.apply_nn": [[195, 221], ["range", "range", "kpconv.FragmentKPConv.FC_layer", "stack_down.append", "isinstance", "stack_down.append", "len", "len", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "stack_down.pop", "stack_down.pop"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.kpconv.FragmentKPConv.forward": [[222, 231], ["kpconv.FragmentKPConv.apply_nn", "kpconv.FragmentKPConv.apply_nn", "kpconv.FragmentKPConv.compute_loss"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.ms_svconv3d.MS_SparseConv3d_Shared_Pool.apply_nn", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.ms_svconv3d.MS_SparseConv3d_Shared_Pool.apply_nn", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.kpconv.FragmentKPConv.compute_loss"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.kpconv.FragmentKPConv.compute_loss": [[232, 246], ["kpconv.FragmentKPConv.collect_internal_losses", "kpconv.FragmentKPConv.compute_loss_match", "kpconv.FragmentKPConv.compute_loss_label"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.collect_internal_losses", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base.FragmentBaseModel.compute_loss_match", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base.FragmentBaseModel.compute_loss_label"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.kpconv.FragmentKPConv.get_batch": [[247, 254], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.kpconv.FragmentKPConv.get_input": [[255, 263], ["torch_geometric.data.Data", "torch_geometric.data.Data", "torch_geometric.data.Data"], "methods", ["None"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.minkowski.BaseMinkowski.__init__": [[16, 49], ["torch_points3d.models.registration.base.FragmentBaseModel.__init__", "torch_points3d.models.registration.base.FragmentBaseModel.get_metric_loss_and_miner", "getattr", "getattr", "option.get", "torch_points3d.core.common_modules.Seq", "range", "last_mlp_opt.get", "minkowski.BaseMinkowski.FC_layer.append", "torch.nn.Identity", "len", "minkowski.BaseMinkowski.FC_layer.append", "minkowski.BaseMinkowski.FC_layer.append", "torch.nn.Linear", "str", "torch.nn.Sequential", "torch.nn.Dropout", "torch.nn.Linear", "torch_points3d.core.common_modules.FastBatchNorm1d", "torch.nn.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.get_metric_loss_and_miner", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append"], ["\n", "\n", "CUR_FILE", "=", "os", ".", "path", ".", "realpath", "(", "__file__", ")", "\n", "DIR_PATH", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "realpath", "(", "__file__", ")", ")", "\n", "PATH_TO_CONFIG", "=", "os", ".", "path", ".", "join", "(", "DIR_PATH", ",", "\"conf/sparseconv3d\"", ")", "\n", "\n", "log", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "\n", "\n", "def", "Minkowski", "(", "\n", "architecture", ":", "str", "=", "None", ",", "input_nc", ":", "int", "=", "None", ",", "num_layers", ":", "int", "=", "None", ",", "config", ":", "DictConfig", "=", "None", ",", "*", "args", ",", "**", "kwargs", "\n", ")", ":", "\n", "    ", "\"\"\" Create a Minkowski backbone model based on architecture proposed in\n    https://arxiv.org/abs/1904.08755\n\n    Parameters\n    ----------\n    architecture : str, optional\n        Architecture of the model, choose from unet, encoder and decoder\n    input_nc : int, optional\n        Number of channels for the input\n   output_nc : int, optional\n        If specified, then we add a fully connected head at the end of the network to provide the requested dimension\n    num_layers : int, optional\n        Depth of the network\n    config : DictConfig, optional\n        Custom config, overrides the num_layers and architecture parameters\n    in_feat:\n        Size of the first layer\n    block:\n        Type of resnet block, ResBlock by default but can be any of the blocks in modules/MinkowskiEngine/api_modules.py\n    \"\"\"", "\n", "log", ".", "warning", "(", "\n", "\"Minkowski API is deprecated in favor of the SparseConv3d API. It should be a simple drop in replacement (no change to the API).\"", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.minkowski.BaseMinkowski.set_input": [[50, 62], ["torch.cat", "ME.SparseTensor", "data.pos.to", "hasattr", "torch.cat", "ME.SparseTensor", "data.pos_target.to", "data.pair_ind.to().to", "data.size_pair_ind.to().to", "data.batch.unsqueeze().int", "data.coords.int", "data.batch_target.unsqueeze().int", "data.coords_target.int", "data.pair_ind.to", "data.size_pair_ind.to", "data.batch.unsqueeze", "data.batch_target.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.SparseTensor", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.SparseTensor", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to"], [")", "\n", "factory", "=", "MinkowskiFactory", "(", "\n", "architecture", "=", "architecture", ",", "num_layers", "=", "num_layers", ",", "input_nc", "=", "input_nc", ",", "config", "=", "config", ",", "**", "kwargs", "\n", ")", "\n", "return", "factory", ".", "build", "(", ")", "\n", "\n", "\n", "", "class", "MinkowskiFactory", "(", "ModelFactory", ")", ":", "\n", "    ", "def", "_build_unet", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_config", ":", "\n", "            ", "model_config", "=", "self", ".", "_config", "\n", "", "else", ":", "\n", "            ", "path_to_model", "=", "os", ".", "path", ".", "join", "(", "PATH_TO_CONFIG", ",", "\"unet_{}.yaml\"", ".", "format", "(", "self", ".", "num_layers", ")", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.minkowski.BaseMinkowski.get_batch": [[63, 70], ["None"], "methods", ["None"], ["model_config", "=", "OmegaConf", ".", "load", "(", "path_to_model", ")", "\n", "", "ModelFactory", ".", "resolve_model", "(", "model_config", ",", "self", ".", "num_features", ",", "self", ".", "_kwargs", ")", "\n", "modules_lib", "=", "sys", ".", "modules", "[", "__name__", "]", "\n", "return", "MinkowskiUnet", "(", "model_config", ",", "None", ",", "None", ",", "modules_lib", ",", "**", "self", ".", "kwargs", ")", "\n", "\n", "", "def", "_build_encoder", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_config", ":", "\n", "            ", "model_config", "=", "self", ".", "_config", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.minkowski.BaseMinkowski.get_input": [[71, 79], ["torch_geometric.data.Data", "torch_geometric.data.Data", "torch_geometric.data.Data"], "methods", ["None"], ["", "else", ":", "\n", "            ", "path_to_model", "=", "os", ".", "path", ".", "join", "(", "PATH_TO_CONFIG", ",", "\"encoder_{}.yaml\"", ".", "format", "(", "self", ".", "num_layers", ")", ",", ")", "\n", "model_config", "=", "OmegaConf", ".", "load", "(", "path_to_model", ")", "\n", "", "ModelFactory", ".", "resolve_model", "(", "model_config", ",", "self", ".", "num_features", ",", "self", ".", "_kwargs", ")", "\n", "modules_lib", "=", "sys", ".", "modules", "[", "__name__", "]", "\n", "return", "MinkowskiEncoder", "(", "model_config", ",", "None", ",", "None", ",", "modules_lib", ",", "**", "self", ".", "kwargs", ")", "\n", "\n", "\n", "", "", "class", "BaseMinkowski", "(", "UnwrappedUnetBasedModel", ")", ":", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.minkowski.Minkowski_Baseline_Model_Fragment.__init__": [[82, 91], ["minkowski.BaseMinkowski.__init__", "initialize_minkowski_unet"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["def", "__init__", "(", "self", ",", "model_config", ",", "model_type", ",", "dataset", ",", "modules", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "BaseMinkowski", ",", "self", ")", ".", "__init__", "(", "model_config", ",", "model_type", ",", "dataset", ",", "modules", ")", "\n", "self", ".", "weight_initialization", "(", ")", "\n", "default_output_nc", "=", "kwargs", ".", "get", "(", "\"default_output_nc\"", ",", "None", ")", "\n", "if", "not", "default_output_nc", ":", "\n", "            ", "default_output_nc", "=", "extract_output_nc", "(", "model_config", ")", "\n", "\n", "", "self", ".", "_output_nc", "=", "default_output_nc", "\n", "self", ".", "_has_mlp_head", "=", "False", "\n", "if", "\"output_nc\"", "in", "kwargs", ":", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.minkowski.Minkowski_Baseline_Model_Fragment.apply_nn": [[93, 100], ["minkowski.Minkowski_Baseline_Model_Fragment.FC_layer", "minkowski.Minkowski_Baseline_Model_Fragment.model", "torch.norm"], "methods", ["None"], ["self", ".", "_output_nc", "=", "kwargs", "[", "\"output_nc\"", "]", "\n", "self", ".", "mlp", "=", "MLP", "(", "[", "default_output_nc", ",", "self", ".", "output_nc", "]", ",", "activation", "=", "torch", ".", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "bias", "=", "False", ")", "\n", "\n", "", "", "@", "property", "\n", "def", "has_mlp_head", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_has_mlp_head", "\n", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.minkowski.MinkowskiFragment.__init__": [[103, 136], ["torch_points3d.models.base_architectures.UnwrappedUnetBasedModel.__init__", "torch_points3d.models.registration.base.FragmentBaseModel.get_metric_loss_and_miner", "getattr", "getattr", "option.get", "torch_points3d.core.common_modules.Seq", "range", "minkowski.MinkowskiFragment.FC_layer.append", "torch.nn.Identity", "len", "minkowski.MinkowskiFragment.FC_layer.append", "minkowski.MinkowskiFragment.FC_layer.append", "torch.nn.Linear", "str", "torch.nn.Sequential", "torch.nn.Dropout", "torch.nn.Linear", "torch_points3d.core.common_modules.FastBatchNorm1d", "torch.nn.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.get_metric_loss_and_miner", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append"], ["\n", "", "def", "weight_initialization", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "ME", ".", "MinkowskiConvolution", ")", ":", "\n", "                ", "ME", ".", "utils", ".", "kaiming_normal_", "(", "m", ".", "kernel", ",", "mode", "=", "\"fan_out\"", ",", "nonlinearity", "=", "\"relu\"", ")", "\n", "\n", "", "if", "isinstance", "(", "m", ",", "ME", ".", "MinkowskiBatchNorm", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn", ".", "bias", ",", "0", ")", "\n", "\n", "", "", "", "def", "_set_input", "(", "self", ",", "data", ")", ":", "\n", "        ", "\"\"\"Unpack input data from the dataloader and perform necessary pre-processing steps.\n\n        Parameters\n        -----------\n        data:\n            a dictionary that contains the data itself and its metadata information.\n        \"\"\"", "\n", "coords", "=", "torch", ".", "cat", "(", "[", "data", ".", "batch", ".", "unsqueeze", "(", "-", "1", ")", ".", "int", "(", ")", ",", "data", ".", "coords", ".", "int", "(", ")", "]", ",", "-", "1", ")", "\n", "self", ".", "input", "=", "ME", ".", "SparseTensor", "(", "features", "=", "data", ".", "x", ",", "coordinates", "=", "coords", ",", "device", "=", "self", ".", "device", ")", "\n", "if", "data", ".", "pos", "is", "not", "None", ":", "\n", "            ", "self", ".", "xyz", "=", "data", ".", "pos", ".", "to", "(", "self", ".", "device", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "xyz", "=", "data", ".", "coords", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "\n", "", "", "", "class", "MinkowskiEncoder", "(", "BaseMinkowski", ")", ":", "\n", "    ", "def", "forward", "(", "self", ",", "data", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.minkowski.MinkowskiFragment.apply_nn": [[137, 155], ["range", "stack_down.append", "range", "minkowski.MinkowskiFragment.FC_layer", "stack_down.append", "len", "len", "stack_down.pop", "torch.norm"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["\n", "self", ".", "_set_input", "(", "data", ")", "\n", "data", "=", "self", ".", "input", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "down_modules", ")", ")", ":", "\n", "            ", "data", "=", "self", ".", "down_modules", "[", "i", "]", "(", "data", ")", "\n", "\n", "", "out", "=", "Batch", "(", "x", "=", "data", ".", "F", ",", "batch", "=", "data", ".", "C", "[", ":", ",", "0", "]", ".", "long", "(", ")", ".", "to", "(", "data", ".", "F", ".", "device", ")", ")", "\n", "if", "not", "isinstance", "(", "self", ".", "inner_modules", "[", "0", "]", ",", "Identity", ")", ":", "\n", "            ", "out", "=", "self", ".", "inner_modules", "[", "0", "]", "(", "out", ")", "\n", "\n", "", "if", "self", ".", "has_mlp_head", ":", "\n", "            ", "out", ".", "x", "=", "self", ".", "mlp", "(", "out", ".", "x", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.pointnet.SiamesePointNet2_D.__init__": [[20, 32], ["torch_points3d.models.base_architectures.BackboneBasedModel.__init__", "torch_points3d.core.common_modules.base_modules.Seq", "range", "len", "pointnet.SiamesePointNet2_D.FC_layer.append", "torch_points3d.core.common_modules.dense_modules.Conv1D"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append"], ["self", ".", "_is_dense", "=", "ConvolutionFormatFactory", ".", "check_is_dense_format", "(", "self", ".", "conv_type", ")", "\n", "\n", "self", ".", "_build_model", "(", ")", "\n", "\n", "self", ".", "loss_names", "=", "[", "\"loss_seg\"", ",", "\"loss_internal\"", "]", "\n", "\n", "self", ".", "visual_names", "=", "[", "\"data_visual\"", "]", "\n", "\n", "", "def", "set_input", "(", "self", ",", "data", ",", "device", ")", ":", "\n", "        ", "data", "=", "data", ".", "to", "(", "device", ")", "\n", "self", ".", "input", "=", "data", "\n", "if", "data", ".", "x", "is", "not", "None", ":", "\n", "            ", "self", ".", "input_features", "=", "torch", ".", "cat", "(", "[", "data", ".", "pos", ",", "data", ".", "x", "]", ",", "axis", "=", "-", "1", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.pointnet.SiamesePointNet2_D.set_input": [[33, 37], ["data.to.to.to", "torch_geometric.data.Data", "len", "data.to.to.x.transpose().contiguous", "data.to.to.x.transpose"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "else", ":", "\n", "            ", "self", ".", "input_features", "=", "data", ".", "pos", "\n", "", "if", "data", ".", "y", "is", "not", "None", ":", "\n", "            ", "self", ".", "labels", "=", "data", ".", "y", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.pointnet.SiamesePointNet2_D.forward": [[38, 49], ["range", "pointnet.SiamesePointNet2_D.FC_layer().transpose().contiguous().view", "len", "pointnet.SiamesePointNet2_D.loss_module", "pointnet.SiamesePointNet2_D.get_internal_loss", "pointnet.SiamesePointNet2_D.FC_layer().transpose().contiguous", "pointnet.SiamesePointNet2_D.FC_layer().transpose", "pointnet.SiamesePointNet2_D.FC_layer"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.get_internal_loss"], ["            ", "self", ".", "labels", "=", "None", "\n", "", "if", "not", "hasattr", "(", "data", ",", "\"batch\"", ")", ":", "\n", "            ", "self", ".", "batch_idx", "=", "torch", ".", "zeros", "(", "self", ".", "labels", ".", "shape", "[", "0", "]", ")", ".", "long", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "batch_idx", "=", "data", ".", "batch", "\n", "", "self", ".", "pointnet_seg", ".", "set_scatter_pooling", "(", "not", "self", ".", "_is_dense", ")", "\n", "\n", "", "def", "_build_model", "(", "self", ")", ":", "\n", "        ", "if", "not", "hasattr", "(", "self", ",", "\"pointnet_seg\"", ")", ":", "\n", "            ", "self", ".", "pointnet_seg", "=", "PointNetSeg", "(", "**", "flatten_dict", "(", "self", ".", "_opt", ")", ")", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.pointnet.SiamesePointNet2_D.backward": [[50, 55], ["pointnet.SiamesePointNet2_D.loss_reg.backward"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.panoptic.pointgroup.PointGroup.backward"], ["        ", "x", "=", "self", ".", "pointnet_seg", "(", "self", ".", "input_features", ",", "self", ".", "input", ".", "batch", ")", "\n", "self", ".", "output", "=", "x", "\n", "\n", "internal_loss", "=", "self", ".", "get_internal_loss", "(", ")", "\n", "\n", "if", "self", ".", "labels", "is", "not", "None", ":", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.spconv3d.SparseConv3D.__init__": [[11, 47], ["torch_points3d.models.registration.base.FragmentBaseModel.__init__", "torch_points3d.models.registration.base.FragmentBaseModel.get_metric_loss_and_miner", "torch_points3d.applications.sparseconv3d.SparseConv3d", "getattr", "getattr", "torch_points3d.core.common_modules.Seq", "range", "spconv3d.SparseConv3D.FC_layer.append", "torch.nn.Identity", "option.get", "len", "spconv3d.SparseConv3D.FC_layer.append", "spconv3d.SparseConv3D.FC_layer.append", "torch.nn.Linear", "str", "torch.nn.Sequential", "torch.nn.Dropout", "torch.nn.Linear", "torch_points3d.core.common_modules.FastBatchNorm1d", "torch.nn.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.get_metric_loss_and_miner", "home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.sparseconv3d.SparseConv3d", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append"], ["    ", "def", "__init__", "(", "self", ",", "option", ",", "model_type", ",", "dataset", ",", "modules", ")", ":", "\n", "        ", "FragmentBaseModel", ".", "__init__", "(", "self", ",", "option", ")", "\n", "self", ".", "mode", "=", "option", ".", "loss_mode", "\n", "self", ".", "normalize_feature", "=", "option", ".", "normalize_feature", "\n", "self", ".", "loss_names", "=", "[", "\"loss_reg\"", ",", "\"loss\"", "]", "\n", "self", ".", "metric_loss_module", ",", "self", ".", "miner_module", "=", "FragmentBaseModel", ".", "get_metric_loss_and_miner", "(", "\n", "getattr", "(", "option", ",", "\"metric_loss\"", ",", "None", ")", ",", "getattr", "(", "option", ",", "\"miner\"", ",", "None", ")", "\n", ")", "\n", "# Unet", "\n", "self", ".", "backbone", "=", "SparseConv3d", "(", "\n", "\"unet\"", ",", "dataset", ".", "feature_dimension", ",", "config", "=", "option", ".", "backbone", ",", "backend", "=", "option", ".", "get", "(", "\"backend\"", ",", "\"minkowski\"", ")", "\n", ")", "\n", "# Last Layer", "\n", "if", "option", ".", "mlp_cls", "is", "not", "None", ":", "\n", "            ", "last_mlp_opt", "=", "option", ".", "mlp_cls", "\n", "in_feat", "=", "last_mlp_opt", ".", "nn", "[", "0", "]", "\n", "self", ".", "FC_layer", "=", "Seq", "(", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "last_mlp_opt", ".", "nn", ")", ")", ":", "\n", "                ", "self", ".", "FC_layer", ".", "append", "(", "\n", "str", "(", "i", ")", ",", "\n", "Sequential", "(", "\n", "*", "[", "\n", "Linear", "(", "in_feat", ",", "last_mlp_opt", ".", "nn", "[", "i", "]", ",", "bias", "=", "False", ")", ",", "\n", "FastBatchNorm1d", "(", "last_mlp_opt", ".", "nn", "[", "i", "]", ",", "momentum", "=", "last_mlp_opt", ".", "bn_momentum", ")", ",", "\n", "LeakyReLU", "(", "0.2", ")", ",", "\n", "]", "\n", ")", ",", "\n", ")", "\n", "in_feat", "=", "last_mlp_opt", ".", "nn", "[", "i", "]", "\n", "\n", "", "if", "last_mlp_opt", ".", "dropout", ":", "\n", "                ", "self", ".", "FC_layer", ".", "append", "(", "Dropout", "(", "p", "=", "last_mlp_opt", ".", "dropout", ")", ")", "\n", "\n", "", "self", ".", "FC_layer", ".", "append", "(", "Linear", "(", "in_feat", ",", "in_feat", ",", "bias", "=", "False", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "FC_layer", "=", "torch", ".", "nn", ".", "Identity", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.spconv3d.SparseConv3D.set_input": [[48, 57], ["torch_geometric.data.Batch().to", "hasattr", "torch_geometric.data.Batch().to", "data.pair_ind.to().to", "data.size_pair_ind.to().to", "data.pair_ind.to().to", "data.size_pair_ind.to().to", "torch_geometric.data.Batch", "torch_geometric.data.Batch", "data.pair_ind.to", "data.size_pair_ind.to", "data.pair_ind.to", "data.size_pair_ind.to"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to"], ["", "", "def", "set_input", "(", "self", ",", "data", ",", "device", ")", ":", "\n", "        ", "self", ".", "input", "=", "Batch", "(", "pos", "=", "data", ".", "pos", ",", "x", "=", "data", ".", "x", ",", "batch", "=", "data", ".", "batch", ")", ".", "to", "(", "device", ")", "\n", "if", "hasattr", "(", "data", ",", "\"pos_target\"", ")", ":", "\n", "            ", "self", ".", "input_target", "=", "Batch", "(", "pos", "=", "data", ".", "pos_target", ",", "x", "=", "data", ".", "x_target", ",", "batch", "=", "data", ".", "batch_target", ")", ".", "to", "(", "device", ")", "\n", "self", ".", "match", "=", "data", ".", "pair_ind", ".", "to", "(", "torch", ".", "long", ")", ".", "to", "(", "device", ")", "\n", "self", ".", "size_match", "=", "data", ".", "size_pair_ind", ".", "to", "(", "torch", ".", "long", ")", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "match", "=", "data", ".", "pair_ind", ".", "to", "(", "torch", ".", "long", ")", ".", "to", "(", "device", ")", "\n", "self", ".", "size_match", "=", "data", ".", "size_pair_ind", ".", "to", "(", "torch", ".", "long", ")", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.spconv3d.SparseConv3D.get_batch": [[58, 65], ["None"], "methods", ["None"], ["", "", "def", "get_batch", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "match", "is", "not", "None", ":", "\n", "            ", "batch", "=", "self", ".", "input", ".", "batch", "\n", "batch_target", "=", "self", ".", "input_target", ".", "batch", "\n", "return", "batch", ",", "batch_target", "\n", "", "else", ":", "\n", "            ", "return", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.spconv3d.SparseConv3D.get_input": [[66, 73], ["torch_geometric.data.Data", "torch_geometric.data.Data"], "methods", ["None"], ["", "", "def", "get_input", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "match", "is", "not", "None", ":", "\n", "            ", "inp", "=", "Data", "(", "pos", "=", "self", ".", "input", ".", "pos", ",", "ind", "=", "self", ".", "match", "[", ":", ",", "0", "]", ",", "size", "=", "self", ".", "size_match", ")", "\n", "inp_target", "=", "Data", "(", "pos", "=", "self", ".", "input_target", ".", "pos", ",", "ind", "=", "self", ".", "match", "[", ":", ",", "1", "]", ",", "size", "=", "self", ".", "size_match", ")", "\n", "return", "inp", ",", "inp_target", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.spconv3d.SparseConv3D.apply_nn": [[74, 82], ["spconv3d.SparseConv3D.FC_layer", "spconv3d.SparseConv3D.backbone", "torch.norm"], "methods", ["None"], ["", "", "def", "apply_nn", "(", "self", ",", "input", ")", ":", "\n", "\n", "        ", "out_feat", "=", "self", ".", "backbone", "(", "input", ")", ".", "x", "\n", "out_feat", "=", "self", ".", "FC_layer", "(", "out_feat", ")", "\n", "if", "self", ".", "normalize_feature", ":", "\n", "            ", "return", "out_feat", "/", "(", "torch", ".", "norm", "(", "out_feat", ",", "p", "=", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "+", "1e-20", ")", "\n", "", "else", ":", "\n", "            ", "return", "out_feat", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.pointnet2.PatchPointNet2_D.__init__": [[28, 34], ["torch_points3d.models.base_architectures.BackboneBasedModel.__init__", "pointnet2.PatchPointNet2_D.set_last_mlp"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.pointnet2.PatchPointNet2_D.set_last_mlp"], ["*", "args", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.pointnet2.PatchPointNet2_D.set_last_mlp": [[35, 44], ["len", "torch_points3d.core.common_modules.MLP", "pointnet2.PatchPointNet2_D.FC_layer.add_module", "torch.nn.Linear", "torch.nn.Linear", "len", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Linear", "torch.nn.Linear", "len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.MLP", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.pointnet2.PatchPointNet2_D.set_input": [[45, 68], ["torch_geometric.data.Data().to", "getattr", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.transpose().contiguous", "torch.cat.transpose().contiguous", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch_geometric.data.Data", "len", "len", "torch.cat.transpose", "torch.cat.transpose"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["\n", "factory", "=", "PointNet2Factory", "(", "\n", "architecture", "=", "architecture", ",", "\n", "num_layers", "=", "num_layers", ",", "\n", "input_nc", "=", "input_nc", ",", "\n", "multiscale", "=", "multiscale", ",", "\n", "config", "=", "config", ",", "\n", "**", "kwargs", "\n", ")", "\n", "return", "factory", ".", "build", "(", ")", "\n", "\n", "\n", "", "class", "PointNet2Factory", "(", "ModelFactory", ")", ":", "\n", "    ", "def", "_build_unet", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_config", ":", "\n", "            ", "model_config", "=", "self", ".", "_config", "\n", "", "else", ":", "\n", "            ", "path_to_model", "=", "os", ".", "path", ".", "join", "(", "\n", "PATH_TO_CONFIG", ",", "\"unet_{}_{}.yaml\"", ".", "format", "(", "self", ".", "num_layers", ",", "\"ms\"", "if", "self", ".", "kwargs", "[", "\"multiscale\"", "]", "else", "\"ss\"", ")", "\n", ")", "\n", "model_config", "=", "OmegaConf", ".", "load", "(", "path_to_model", ")", "\n", "", "ModelFactory", ".", "resolve_model", "(", "model_config", ",", "self", ".", "num_features", ",", "self", ".", "_kwargs", ")", "\n", "modules_lib", "=", "sys", ".", "modules", "[", "__name__", "]", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.pointnet2.PatchPointNet2_D.forward": [[69, 92], ["range", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "pointnet2.PatchPointNet2_D.FC_layer", "torch.normalize", "torch.normalize", "pointnet2.PatchPointNet2_D.metric_loss_module", "pointnet2.PatchPointNet2_D.get_internal_loss", "len", "pointnet2.PatchPointNet2_D.miner_module"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.lovasz_loss.mean", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.lovasz_loss.mean", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.lovasz_loss.mean", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.lovasz_loss.mean", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.get_internal_loss", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["return", "PointNet2Unet", "(", "model_config", ",", "None", ",", "None", ",", "modules_lib", ",", "**", "self", ".", "kwargs", ")", "\n", "\n", "", "def", "_build_encoder", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_config", ":", "\n", "            ", "model_config", "=", "self", ".", "_config", "\n", "", "else", ":", "\n", "            ", "path_to_model", "=", "os", ".", "path", ".", "join", "(", "\n", "PATH_TO_CONFIG", ",", "\n", "\"encoder_{}_{}.yaml\"", ".", "format", "(", "self", ".", "num_layers", ",", "\"ms\"", "if", "self", ".", "kwargs", "[", "\"multiscale\"", "]", "else", "\"ss\"", ")", ",", "\n", ")", "\n", "model_config", "=", "OmegaConf", ".", "load", "(", "path_to_model", ")", "\n", "", "ModelFactory", ".", "resolve_model", "(", "model_config", ",", "self", ".", "num_features", ",", "self", ".", "_kwargs", ")", "\n", "modules_lib", "=", "sys", ".", "modules", "[", "__name__", "]", "\n", "return", "PointNet2Encoder", "(", "model_config", ",", "None", ",", "None", ",", "modules_lib", ",", "**", "self", ".", "kwargs", ")", "\n", "\n", "\n", "", "", "class", "BasePointnet2", "(", "UnwrappedUnetBasedModel", ")", ":", "\n", "\n", "    ", "CONV_TYPE", "=", "\"dense\"", "\n", "\n", "def", "__init__", "(", "self", ",", "model_config", ",", "model_type", ",", "dataset", ",", "modules", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "BasePointnet2", ",", "self", ")", ".", "__init__", "(", "model_config", ",", "model_type", ",", "dataset", ",", "modules", ")", "\n", "\n", "try", ":", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.pointnet2.PatchPointNet2_D.backward": [[93, 99], ["hasattr", "pointnet2.PatchPointNet2_D.loss.backward"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.panoptic.pointgroup.PointGroup.backward"], ["            ", "default_output_nc", "=", "extract_output_nc", "(", "model_config", ")", "\n", "", "except", ":", "\n", "            ", "default_output_nc", "=", "-", "1", "\n", "log", ".", "warning", "(", "\"Could not resolve number of output channels\"", ")", "\n", "\n", "", "self", ".", "_has_mlp_head", "=", "False", "\n", "self", ".", "_output_nc", "=", "default_output_nc", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.pointnet2.FragmentPointNet2_D.__init__": [[118, 139], ["torch_points3d.models.base_architectures.UnetBasedModel.__init__", "option.get", "option.get", "torch_points3d.models.base_architectures.UnetBasedModel.get_metric_loss_and_miner", "torch_points3d.core.common_modules.base_modules.Seq", "range", "pointnet2.FragmentPointNet2_D.FC_layer.append", "getattr", "getattr", "len", "pointnet2.FragmentPointNet2_D.FC_layer.append", "pointnet2.FragmentPointNet2_D.FC_layer.append", "torch_points3d.core.common_modules.dense_modules.Conv1D", "torch_points3d.core.common_modules.dense_modules.Conv1D", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.get_metric_loss_and_miner", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append"], ["data", "=", "data", ".", "to", "(", "self", ".", "device", ")", "\n", "if", "data", ".", "x", "is", "not", "None", ":", "\n", "            ", "data", ".", "x", "=", "data", ".", "x", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "", "else", ":", "\n", "            ", "data", ".", "x", "=", "None", "\n", "", "self", ".", "input", "=", "data", "\n", "\n", "\n", "", "", "class", "PointNet2Encoder", "(", "BasePointnet2", ")", ":", "\n", "    ", "def", "forward", "(", "self", ",", "data", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Parameters:\n        -----------\n        data\n            A dictionary that contains the data itself and its metadata information. Should contain\n                x -- Features [B, N, C]\n                pos -- Points [B, N, 3]\n        \"\"\"", "\n", "self", ".", "_set_input", "(", "data", ")", "\n", "data", "=", "self", ".", "input", "\n", "stack_down", "=", "[", "data", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "down_modules", ")", "-", "1", ")", ":", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.pointnet2.FragmentPointNet2_D.set_input": [[140, 167], ["torch_geometric.data.Data().to", "hasattr", "len", "data.x.transpose().contiguous", "torch_geometric.data.Data().to", "data.pair_ind.to().to", "data.size_pair_ind.to().to", "torch_geometric.data.Data", "data.x_target.transpose().contiguous", "data.x.transpose", "torch_geometric.data.Data", "data.pair_ind.to", "data.size_pair_ind.to", "data.x_target.transpose"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to"], ["            ", "data", "=", "self", ".", "down_modules", "[", "i", "]", "(", "data", ")", "\n", "stack_down", ".", "append", "(", "data", ")", "\n", "", "data", "=", "self", ".", "down_modules", "[", "-", "1", "]", "(", "data", ")", "\n", "\n", "if", "not", "isinstance", "(", "self", ".", "inner_modules", "[", "0", "]", ",", "Identity", ")", ":", "\n", "            ", "stack_down", ".", "append", "(", "data", ")", "\n", "data", "=", "self", ".", "inner_modules", "[", "0", "]", "(", "data", ")", "\n", "\n", "", "if", "self", ".", "has_mlp_head", ":", "\n", "            ", "data", ".", "x", "=", "self", ".", "mlp", "(", "data", ".", "x", ")", "\n", "", "return", "data", "\n", "\n", "\n", "", "", "class", "PointNet2Unet", "(", "BasePointnet2", ")", ":", "\n", "    ", "def", "forward", "(", "self", ",", "data", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\" This method does a forward on the Unet assuming symmetrical skip connections\n        Input --- D1 -- D2 -- I -- U1 -- U2 -- U3 -- output\n           |       |      |________|      |    |\n           |       |______________________|    |\n           |___________________________________|\n\n        Parameters:\n        -----------\n        data\n            A dictionary that contains the data itself and its metadata information. Should contain\n                x -- Features [B, N, C]\n                pos -- Points [B, N, 3]\n        \"\"\"", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.pointnet2.FragmentPointNet2_D.apply_nn": [[168, 175], ["pointnet2.FragmentPointNet2_D.FC_layer().transpose().contiguous().view", "pointnet2.FragmentPointNet2_D.model", "pointnet2.FragmentPointNet2_D.FC_layer().transpose().contiguous", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "pointnet2.FragmentPointNet2_D.FC_layer().transpose", "pointnet2.FragmentPointNet2_D.FC_layer"], "methods", ["None"], ["self", ".", "_set_input", "(", "data", ")", "\n", "data", "=", "self", ".", "input", "\n", "stack_down", "=", "[", "data", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "down_modules", ")", "-", "1", ")", ":", "\n", "            ", "data", "=", "self", ".", "down_modules", "[", "i", "]", "(", "data", ")", "\n", "stack_down", ".", "append", "(", "data", ")", "\n", "", "data", "=", "self", ".", "down_modules", "[", "-", "1", "]", "(", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.pointnet2.FragmentPointNet2_D.get_input": [[176, 184], ["torch_geometric.data.Data", "torch_geometric.data.Data", "torch_geometric.data.Data", "pointnet2.FragmentPointNet2_D.input.pos.view", "pointnet2.FragmentPointNet2_D.input_target.pos.view", "pointnet2.FragmentPointNet2_D.input.pos.view"], "methods", ["None"], ["if", "not", "isinstance", "(", "self", ".", "inner_modules", "[", "0", "]", ",", "Identity", ")", ":", "\n", "            ", "stack_down", ".", "append", "(", "data", ")", "\n", "data", "=", "self", ".", "inner_modules", "[", "0", "]", "(", "data", ")", "\n", "\n", "", "sampling_ids", "=", "self", ".", "_collect_sampling_ids", "(", "stack_down", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "up_modules", ")", ")", ":", "\n", "            ", "data", "=", "self", ".", "up_modules", "[", "i", "]", "(", "(", "data", ",", "stack_down", ".", "pop", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.pointnet2.FragmentPointNet2_D.get_batch": [[185, 204], ["torch.arange().view().repeat().view().to", "torch.arange().view().repeat().view().to", "torch.arange().view().repeat().view().to", "torch.arange().view().repeat().view().to", "torch.arange().view().repeat().view().to", "torch.arange().view().repeat().view().to", "torch.arange().view().repeat().view().to", "torch.arange().view().repeat().view().to", "torch.arange().view().repeat().view", "torch.arange().view().repeat().view", "torch.arange().view().repeat().view", "torch.arange().view().repeat().view", "torch.arange().view().repeat().view", "torch.arange().view().repeat().view", "torch.arange().view().repeat().view", "torch.arange().view().repeat().view", "torch.arange().view().repeat", "torch.arange().view().repeat", "torch.arange().view().repeat", "torch.arange().view().repeat", "torch.arange().view().repeat", "torch.arange().view().repeat", "torch.arange().view().repeat", "torch.arange().view().repeat", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to"], ["", "for", "key", ",", "value", "in", "sampling_ids", ".", "items", "(", ")", ":", "\n", "            ", "setattr", "(", "data", ",", "key", ",", "value", ")", "\n", "\n", "", "if", "self", ".", "has_mlp_head", ":", "\n", "            ", "data", ".", "x", "=", "self", ".", "mlp", "(", "data", ".", "x", ")", "\n", "\n", "", "return", "data", "\n", "", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.ms_svconv3d.UnetMSparseConv3d.__init__": [[18, 48], ["torch.Module.__init__", "torch.Module.__init__", "torch_points3d.applications.sparseconv3d.SparseConv3d", "torch_points3d.core.common_modules.MLP", "torch_points3d.core.common_modules.MLP", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Identity", "torch_points3d.core.common_modules.MLP", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Identity"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.sparseconv3d.SparseConv3d", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.MLP", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.MLP", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.MLP"], ["\n", "class", "MS_SparseConvModel", "(", "APIModel", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "option", ",", "model_type", ",", "dataset", ",", "modules", ")", ":", "\n", "        ", "BaseModel", ".", "__init__", "(", "self", ",", "option", ")", "\n", "option_unet", "=", "option", ".", "option_unet", "\n", "self", ".", "normalize_feature", "=", "option", ".", "normalize_feature", "\n", "self", ".", "grid_size", "=", "option_unet", ".", "grid_size", "\n", "self", ".", "unet", "=", "UnetMSparseConv3d", "(", "\n", "option_unet", ".", "backbone", ",", "\n", "input_nc", "=", "option_unet", ".", "input_nc", ",", "\n", "pointnet_nn", "=", "getattr", "(", "option_unet", ",", "\"pointnet_nn\"", ",", "None", ")", ",", "\n", "post_mlp_nn", "=", "getattr", "(", "option_unet", ",", "\"post_mlp_nn\"", ",", "[", "64", ",", "64", ",", "32", "]", ")", ",", "\n", "pre_mlp_nn", "=", "getattr", "(", "option_unet", ",", "\"pre_mlp_nn\"", ",", "None", ")", ",", "\n", "add_pos", "=", "getattr", "(", "option_unet", ",", "\"add_pos\"", ",", "False", ")", ",", "\n", "add_pre_x", "=", "getattr", "(", "option_unet", ",", "\"add_pre_x\"", ",", "False", ")", ",", "\n", "aggr", "=", "getattr", "(", "option_unet", ",", "\"aggr\"", ",", "None", ")", ",", "\n", "backend", "=", "option", ".", "backend", ",", "\n", ")", "\n", "if", "option", ".", "mlp_cls", "is", "not", "None", ":", "\n", "            ", "last_mlp_opt", "=", "option", ".", "mlp_cls", "\n", "\n", "self", ".", "FC_layer", "=", "Seq", "(", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "last_mlp_opt", ".", "nn", ")", ")", ":", "\n", "                ", "self", ".", "FC_layer", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "\n", "*", "[", "\n", "nn", ".", "Linear", "(", "last_mlp_opt", ".", "nn", "[", "i", "-", "1", "]", ",", "last_mlp_opt", ".", "nn", "[", "i", "]", ",", "bias", "=", "False", ")", ",", "\n", "FastBatchNorm1d", "(", "last_mlp_opt", ".", "nn", "[", "i", "]", ",", "momentum", "=", "last_mlp_opt", ".", "bn_momentum", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.ms_svconv3d.UnetMSparseConv3d.set_grid_size": [[49, 51], ["None"], "methods", ["None"], [")", "\n", "", "if", "getattr", "(", "last_mlp_opt", ",", "\"dropout\"", ",", "None", ")", "is", "not", "None", ":", "\n", "                ", "self", ".", "FC_layer", ".", "append", "(", "nn", ".", "Dropout", "(", "p", "=", "last_mlp_opt", ".", "dropout", ")", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.ms_svconv3d.UnetMSparseConv3d._aggregate": [[52, 62], ["torch_scatter.scatter_mean", "torch_scatter.scatter_max"], "methods", ["None"], ["", "", "else", ":", "\n", "            ", "self", ".", "FC_layer", "=", "torch", ".", "nn", ".", "Identity", "(", ")", "\n", "", "self", ".", "head", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "option", ".", "output_nc", ",", "dataset", ".", "num_classes", ")", ")", "\n", "self", ".", "loss_names", "=", "[", "\"loss_seg\"", "]", "\n", "\n", "", "def", "apply_nn", "(", "self", ",", "input", ")", ":", "\n", "\n", "        ", "outputs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "grid_size", ")", ")", ":", "\n", "            ", "self", ".", "unet", ".", "set_grid_size", "(", "self", ".", "grid_size", "[", "i", "]", ")", "\n", "out", "=", "self", ".", "unet", "(", "input", ".", "clone", "(", ")", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.ms_svconv3d.UnetMSparseConv3d._prepare_data": [[63, 74], ["torch.round().long", "torch.round().long", "torch.round().long", "torch.round().long", "torch_geometric.nn.voxel_grid", "torch_geometric.nn.pool.consecutive.consecutive_cluster", "ms_svconv3d.UnetMSparseConv3d._aggregate", "torch_geometric.data.Batch", "torch.round", "torch.round", "torch.round", "torch.round"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.ms_svconv3d.UnetMSparseConv3d._aggregate"], ["out", ".", "x", "=", "out", ".", "x", "/", "(", "torch", ".", "norm", "(", "out", ".", "x", ",", "p", "=", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "+", "1e-20", ")", "\n", "outputs", ".", "append", "(", "out", ")", "\n", "", "x", "=", "torch", ".", "cat", "(", "[", "o", ".", "x", "for", "o", "in", "outputs", "]", ",", "1", ")", "\n", "out_feat", "=", "self", ".", "FC_layer", "(", "x", ")", "\n", "if", "self", ".", "normalize_feature", ":", "\n", "            ", "out_feat", "=", "out_feat", "/", "(", "torch", ".", "norm", "(", "out_feat", ",", "p", "=", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "+", "1e-20", ")", "\n", "", "out_feat", "=", "self", ".", "head", "(", "out_feat", ")", "\n", "return", "out_feat", ",", "outputs", "\n", "\n", "", "def", "forward", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "logits", ",", "_", "=", "self", ".", "apply_nn", "(", "self", ".", "input", ")", "\n", "self", ".", "output", "=", "F", ".", "log_softmax", "(", "logits", ",", "dim", "=", "-", "1", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.ms_svconv3d.UnetMSparseConv3d.forward": [[75, 92], ["data.clone", "ms_svconv3d.UnetMSparseConv3d._prepare_data", "ms_svconv3d.UnetMSparseConv3d.pre_mlp", "ms_svconv3d.UnetMSparseConv3d.unet.forward", "ms_svconv3d.UnetMSparseConv3d.post_mlp", "ms_svconv3d.UnetMSparseConv3d.pointnet", "ms_svconv3d.UnetMSparseConv3d.pointnet", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "data.pos.mean", "data.pos.mean"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.clone", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.ms_svconv3d.UnetMSparseConv3d._prepare_data", "home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.forward", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.lovasz_loss.mean", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.lovasz_loss.mean"], ["if", "self", ".", "labels", "is", "not", "None", ":", "\n", "            ", "self", ".", "loss_seg", "=", "F", ".", "nll_loss", "(", "self", ".", "output", ",", "self", ".", "labels", ",", "ignore_index", "=", "IGNORE_LABEL", ")", "\n", "\n", "", "", "def", "backward", "(", "self", ")", ":", "\n", "        ", "self", ".", "loss_seg", ".", "backward", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.ms_svconv3d.BaseMS_SparseConv3d.__init__": [[95, 102], ["torch_points3d.models.registration.base.FragmentBaseModel.__init__", "torch_points3d.models.registration.base.FragmentBaseModel.get_metric_loss_and_miner", "getattr", "getattr"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.get_metric_loss_and_miner"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.ms_svconv3d.BaseMS_SparseConv3d.set_input": [[104, 113], ["data.to_data", "ms_svconv3d.BaseMS_SparseConv3d.input.to", "getattr", "ms_svconv3d.BaseMS_SparseConv3d.input_target.to", "data.pair_ind.to().to", "data.size_pair_ind.to().to", "data.pair_ind.to", "data.size_pair_ind.to"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.pair.Pair.to_data", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.ms_svconv3d.BaseMS_SparseConv3d.get_batch": [[114, 119], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.ms_svconv3d.BaseMS_SparseConv3d.get_input": [[120, 131], ["ms_svconv3d.BaseMS_SparseConv3d.input.clone", "ms_svconv3d.BaseMS_SparseConv3d.input_target.clone"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.clone", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.clone"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.ms_svconv3d.BaseMS_SparseConv3d.apply_nn": [[132, 134], ["NotImplementedError"], "methods", ["None"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.ms_svconv3d.MS_SparseConv3d.__init__": [[137, 168], ["ms_svconv3d.BaseMS_SparseConv3d.__init__", "torch.ModuleList", "torch.ModuleList", "range", "torch_points3d.core.common_modules.Seq", "range", "ms_svconv3d.UnetMSparseConv3d", "ms_svconv3d.MS_SparseConv3d.unet.add_module", "len", "ms_svconv3d.MS_SparseConv3d.FC_layer.append", "torch.nn.Sequential", "torch.nn.Sequential", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "str", "torch.nn.Linear", "torch.nn.Linear", "torch_points3d.core.common_modules.FastBatchNorm1d", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.ms_svconv3d.MS_SparseConv3d.apply_nn": [[172, 184], ["range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "ms_svconv3d.MS_SparseConv3d.FC_layer", "len", "outputs.append", "input.clone", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.clone"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.ms_svconv3d.MS_SparseConv3d_Shared.__init__": [[187, 227], ["ms_svconv3d.BaseMS_SparseConv3d.__init__", "ms_svconv3d.UnetMSparseConv3d", "torch_points3d.core.common_modules.Seq", "range", "len", "ms_svconv3d.MS_SparseConv3d_Shared.FC_layer.append", "getattr", "torch_points3d.models.registration.base.FragmentBaseModel.get_metric_loss_and_miner", "range", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "torch.nn.Sequential", "torch.nn.Sequential", "getattr", "getattr", "len", "torch.nn.Linear", "torch.nn.Linear", "torch_points3d.core.common_modules.FastBatchNorm1d", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.get_metric_loss_and_miner", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.ms_svconv3d.MS_SparseConv3d_Shared.compute_intermediate_loss": [[228, 238], ["len", "len", "enumerate", "len", "len", "ms_svconv3d.MS_SparseConv3d_Shared.int_metric_loss", "setattr"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.ms_svconv3d.MS_SparseConv3d_Shared.apply_nn": [[239, 252], ["range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "ms_svconv3d.MS_SparseConv3d_Shared.FC_layer", "len", "ms_svconv3d.MS_SparseConv3d_Shared.unet.set_grid_size", "ms_svconv3d.MS_SparseConv3d_Shared.unet", "outputs.append", "input.clone", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.ms_svconv3d.UnetMSparseConv3d.set_grid_size", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.clone"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.ms_svconv3d.MS_SparseConv3d_Shared.forward": [[253, 264], ["ms_svconv3d.MS_SparseConv3d_Shared.apply_nn", "ms_svconv3d.MS_SparseConv3d_Shared.apply_nn", "ms_svconv3d.MS_SparseConv3d_Shared.compute_loss", "ms_svconv3d.MS_SparseConv3d_Shared.compute_intermediate_loss"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.ms_svconv3d.MS_SparseConv3d_Shared_Pool.apply_nn", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.ms_svconv3d.MS_SparseConv3d_Shared_Pool.apply_nn", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.kpconv.FragmentKPConv.compute_loss", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.ms_svconv3d.MS_SparseConv3d_Shared.compute_intermediate_loss"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.ms_svconv3d.MS_SparseConv3d_Shared_Pool.__init__": [[267, 271], ["ms_svconv3d.MS_SparseConv3d_Shared.__init__"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.ms_svconv3d.MS_SparseConv3d_Shared_Pool.apply_nn": [[272, 292], ["range", "ms_svconv3d.MS_SparseConv3d_Shared_Pool.FC_layer", "len", "ms_svconv3d.MS_SparseConv3d_Shared_Pool.unet.set_grid_size", "ms_svconv3d.MS_SparseConv3d_Shared_Pool.unet", "outputs.append", "input.clone", "torch.cat().max", "torch.cat().max", "torch.cat().max", "torch.cat().max", "torch.cat().mean", "torch.cat().mean", "torch.cat().mean", "torch.cat().mean", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "o.x.unsqueeze", "o.x.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.ms_svconv3d.UnetMSparseConv3d.set_grid_size", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.clone", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.lovasz_loss.mean", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.lovasz_loss.mean", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.lovasz_loss.mean", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.lovasz_loss.mean", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.panoptic.s3dis.PanopticS3DISBase.__getitem__": [[32, 47], ["super().__getitem__", "s3dis.PanopticS3DISBase._set_extra_labels", "isinstance", "ValueError"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.panoptic.scannet.ScannetPanoptic.__getitem__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.panoptic.scannet.ScannetPanoptic._set_extra_labels"], ["\n", "INV_OBJECT_LABEL", "=", "{", "\n", "0", ":", "\"ceiling\"", ",", "\n", "1", ":", "\"floor\"", ",", "\n", "2", ":", "\"wall\"", ",", "\n", "3", ":", "\"beam\"", ",", "\n", "4", ":", "\"column\"", ",", "\n", "5", ":", "\"window\"", ",", "\n", "6", ":", "\"door\"", ",", "\n", "7", ":", "\"chair\"", ",", "\n", "8", ":", "\"table\"", ",", "\n", "9", ":", "\"bookcase\"", ",", "\n", "10", ":", "\"sofa\"", ",", "\n", "11", ":", "\"board\"", ",", "\n", "12", ":", "\"clutter\"", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.panoptic.s3dis.PanopticS3DISBase._set_extra_labels": [[48, 50], ["torch_points3d.datasets.panoptic.utils.set_extra_labels"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.panoptic.utils.set_extra_labels"], ["\n", "OBJECT_COLOR", "=", "np", ".", "asarray", "(", "\n", "[", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.panoptic.s3dis.PanopticS3DISBase.stuff_classes": [[51, 54], ["torch.tensor"], "methods", ["None"], ["[", "233", ",", "229", ",", "107", "]", ",", "# 'ceiling' .-> .yellow", "\n", "[", "95", ",", "156", ",", "196", "]", ",", "# 'floor' .-> . blue", "\n", "[", "179", ",", "116", ",", "81", "]", ",", "# 'wall'  ->  brown", "\n", "[", "241", ",", "149", ",", "131", "]", ",", "# 'beam'  ->  salmon", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.panoptic.s3dis.PanopticS3DISSphere.process": [[57, 59], ["super().process"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.classification.modelnet.SampledModelNet.process"], ["[", "108", ",", "135", ",", "75", "]", ",", "# 'door'   ->  dark green", "\n", "[", "41", ",", "49", ",", "101", "]", ",", "# 'chair'  ->  darkblue", "\n", "[", "79", ",", "79", ",", "76", "]", ",", "# 'table'  ->  dark grey", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.panoptic.s3dis.PanopticS3DISSphere.download": [[60, 62], ["super().download"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.classification.modelnet.SampledModelNet.download"], ["[", "223", ",", "52", ",", "52", "]", ",", "# 'bookcase'  ->  red", "\n", "[", "89", ",", "47", ",", "95", "]", ",", "# 'sofa'  ->  purple", "\n", "[", "81", ",", "109", ",", "114", "]", ",", "# 'board'   ->  grey", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.panoptic.s3dis.PanopticS3DISCylinder.process": [[65, 67], ["super().process"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.classification.modelnet.SampledModelNet.process"], ["]", "\n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.panoptic.s3dis.PanopticS3DISCylinder.download": [[68, 70], ["super().download"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.classification.modelnet.SampledModelNet.download"], ["OBJECT_LABEL", "=", "{", "name", ":", "i", "for", "i", ",", "name", "in", "INV_OBJECT_LABEL", ".", "items", "(", ")", "}", "\n", "\n", "ROOM_TYPES", "=", "{", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.panoptic.s3dis.S3DISFusedDataset.__init__": [[91, 128], ["torch_points3d.datasets.base_dataset.BaseDataset.__init__", "dataset_opt.get", "dataset_cls", "dataset_cls", "dataset_cls", "s3dis.S3DISFusedDataset.add_weights"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.base_dataset.BaseDataset.add_weights"], ["\"office_16\"", ",", "\n", "\"office_21\"", ",", "\n", "\"office_26\"", ",", "\n", "\"office_31\"", ",", "\n", "\"office_36\"", ",", "\n", "\"WC_2\"", ",", "\n", "\"storage_1\"", ",", "\n", "\"storage_5\"", ",", "\n", "\"conferenceRoom_2\"", ",", "\n", "\"auditorium_1\"", ",", "\n", "]", "\n", "\n", "################################### UTILS #######################################", "\n", "\n", "\n", "def", "object_name_to_label", "(", "object_class", ")", ":", "\n", "    ", "\"\"\"convert from object name in S3DIS to an int\"\"\"", "\n", "object_label", "=", "OBJECT_LABEL", ".", "get", "(", "object_class", ",", "OBJECT_LABEL", "[", "\"clutter\"", "]", ")", "\n", "return", "object_label", "\n", "\n", "\n", "", "def", "read_s3dis_format", "(", "\n", "train_file", ",", "room_name", ",", "label_out", "=", "True", ",", "verbose", "=", "False", ",", "debug", "=", "False", ")", ":", "\n", "    ", "\"\"\"extract data from a room folder\"\"\"", "\n", "\n", "room_type", "=", "room_name", ".", "split", "(", "\"_\"", ")", "[", "0", "]", "\n", "room_label", "=", "ROOM_TYPES", "[", "room_type", "]", "\n", "raw_path", "=", "osp", ".", "join", "(", "train_file", ",", "\"{}.txt\"", ".", "format", "(", "room_name", ")", ")", "\n", "if", "debug", ":", "\n", "        ", "reader", "=", "pd", ".", "read_csv", "(", "raw_path", ",", "delimiter", "=", "\"\\n\"", ")", "\n", "RECOMMENDED", "=", "6", "\n", "for", "idx", ",", "row", "in", "enumerate", "(", "reader", ".", "values", ")", ":", "\n", "            ", "row", "=", "row", "[", "0", "]", ".", "split", "(", "\" \"", ")", "\n", "if", "len", "(", "row", ")", "!=", "RECOMMENDED", ":", "\n", "                ", "log", ".", "info", "(", "\"1: {} row {}: {}\"", ".", "format", "(", "raw_path", ",", "idx", ",", "row", ")", ")", "\n", "\n", "", "try", ":", "\n", "                ", "for", "r", "in", "row", ":", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.panoptic.s3dis.S3DISFusedDataset.test_data": [[129, 132], ["None"], "methods", ["None"], ["                    ", "r", "=", "float", "(", "r", ")", "\n", "", "", "except", ":", "\n", "                ", "log", ".", "info", "(", "\"2: {} row {}: {}\"", ".", "format", "(", "raw_path", ",", "idx", ",", "row", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.panoptic.s3dis.S3DISFusedDataset.stuff_classes": [[133, 139], ["None"], "methods", ["None"], ["", "", "return", "True", "\n", "", "else", ":", "\n", "        ", "room_ver", "=", "pd", ".", "read_csv", "(", "raw_path", ",", "sep", "=", "\" \"", ",", "header", "=", "None", ")", ".", "values", "\n", "xyz", "=", "np", ".", "ascontiguousarray", "(", "room_ver", "[", ":", ",", "0", ":", "3", "]", ",", "dtype", "=", "\"float32\"", ")", "\n", "try", ":", "\n", "            ", "rgb", "=", "np", ".", "ascontiguousarray", "(", "room_ver", "[", ":", ",", "3", ":", "6", "]", ",", "dtype", "=", "\"uint8\"", ")", "\n", "", "except", "ValueError", ":", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.panoptic.s3dis.S3DISFusedDataset.get_tracker": [[140, 151], ["torch_points3d.metrics.panoptic_tracker.PanopticTracker"], "methods", ["None"], ["            ", "rgb", "=", "np", ".", "zeros", "(", "(", "room_ver", ".", "shape", "[", "0", "]", ",", "3", ")", ",", "dtype", "=", "\"uint8\"", ")", "\n", "log", ".", "warning", "(", "\"WARN - corrupted rgb data for file %s\"", "%", "raw_path", ")", "\n", "", "if", "not", "label_out", ":", "\n", "            ", "return", "xyz", ",", "rgb", "\n", "", "n_ver", "=", "len", "(", "room_ver", ")", "\n", "del", "room_ver", "\n", "nn", "=", "NearestNeighbors", "(", "n_neighbors", "=", "1", ",", "algorithm", "=", "\"kd_tree\"", ")", ".", "fit", "(", "xyz", ")", "\n", "semantic_labels", "=", "np", ".", "zeros", "(", "(", "n_ver", ",", ")", ",", "dtype", "=", "\"int64\"", ")", "\n", "room_label", "=", "np", ".", "asarray", "(", "[", "room_label", "]", ")", "\n", "instance_labels", "=", "np", ".", "zeros", "(", "(", "n_ver", ",", ")", ",", "dtype", "=", "\"int64\"", ")", "\n", "objects", "=", "glob", ".", "glob", "(", "osp", ".", "join", "(", "train_file", ",", "\"Annotations/*.txt\"", ")", ")", "\n", "i_object", "=", "1", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.panoptic.scannet.ScannetPanoptic.__init__": [[20, 24], ["torch_points3d.datasets.segmentation.scannet.Scannet.__init__", "torch.tensor", "enumerate", "list"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["import", "png", "\n", "from", "tqdm", "import", "tqdm", "\n", "\n", "import", "tempfile", "\n", "import", "urllib", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.panoptic.scannet.ScannetPanoptic.__getitem__": [[25, 41], ["torch_points3d.datasets.segmentation.scannet.Scannet.__getitem__", "scannet.ScannetPanoptic._set_extra_labels", "super()._remap_labels", "isinstance", "ValueError"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.panoptic.scannet.ScannetPanoptic.__getitem__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.panoptic.scannet.ScannetPanoptic._set_extra_labels", "home.repos.pwc.inspect_result.drprojects_deepviewagg.panoptic.scannet.ScannetPanoptic._remap_labels"], ["from", "urllib", ".", "request", "import", "urlopen", "\n", "\n", "from", "torch_points3d", ".", "datasets", ".", "base_dataset", "import", "BaseDataset", "\n", "import", "torch_points3d", ".", "core", ".", "data_transform", "as", "cT", "\n", "from", ".", "import", "IGNORE_LABEL", "\n", "\n", "log", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "\n", "# Ref: https://github.com/xjwang-cs/TSDF_utils/blob/master/download-scannet.py", "\n", "########################################################################################", "\n", "#                                                                                      #", "\n", "#                                      Download script                                 #", "\n", "#                                                                                      #", "\n", "########################################################################################", "\n", "\n", "BASE_URL", "=", "\"http://kaldir.vc.in.tum.de/scannet/\"", "\n", "TOS_URL", "=", "BASE_URL", "+", "\"ScanNet_TOS.pdf\"", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.panoptic.scannet.ScannetPanoptic._set_extra_labels": [[42, 44], ["torch_points3d.datasets.panoptic.utils.set_extra_labels"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.panoptic.utils.set_extra_labels"], ["FILETYPES", "=", "[", "\n", "\".aggregation.json\"", ",", "\n", "\".sens\"", ",", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.panoptic.scannet.ScannetPanoptic._remap_labels": [[45, 47], ["None"], "methods", ["None"], ["\".txt\"", ",", "\n", "\"_vh_clean.ply\"", ",", "\n", "\"_vh_clean_2.0.010000.segs.json\"", ",", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.panoptic.scannet.ScannetPanoptic.stuff_classes": [[48, 51], ["super()._remap_labels"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.panoptic.scannet.ScannetPanoptic._remap_labels"], ["\"_vh_clean_2.ply\"", ",", "\n", "\"_vh_clean.segs.json\"", ",", "\n", "\"_vh_clean.aggregation.json\"", ",", "\n", "\"_vh_clean_2.labels.ply\"", ",", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.panoptic.scannet.ScannetPanoptic.process": [[52, 56], ["super().process"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.classification.modelnet.SampledModelNet.process"], ["\"_2d-instance.zip\"", ",", "\n", "\"_2d-instance-filt.zip\"", ",", "\n", "\"_2d-label.zip\"", ",", "\n", "\"_2d-label-filt.zip\"", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.panoptic.scannet.ScannetPanoptic.download": [[57, 61], ["super().download"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.classification.modelnet.SampledModelNet.download"], ["FILETYPES_TEST", "=", "[", "\".sens\"", ",", "\".txt\"", ",", "\"_vh_clean.ply\"", ",", "\"_vh_clean_2.ply\"", "]", "\n", "PREPROCESSED_FRAMES_FILE", "=", "[", "\"scannet_frames_25k.zip\"", ",", "\"5.6GB\"", "]", "\n", "TEST_FRAMES_FILE", "=", "[", "\"scannet_frames_test.zip\"", ",", "\"610MB\"", "]", "\n", "LABEL_MAP_FILES", "=", "[", "\"scannetv2-labels.combined.tsv\"", ",", "\"scannet-labels.combined.tsv\"", "]", "\n", "RELEASES", "=", "[", "\"v2/scans\"", ",", "\"v1/scans\"", "]", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.panoptic.scannet.ScannetDataset.__init__": [[64, 97], ["torch_points3d.datasets.base_dataset.BaseDataset.__init__", "dataset_opt.get", "list", "dataset_opt.get", "dataset_opt.get", "scannet.ScannetPanoptic", "scannet.ScannetPanoptic", "dataset_opt.get"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get"], ["RELEASE", "=", "RELEASES", "[", "0", "]", "\n", "RELEASE_TASKS", "=", "RELEASES_TASKS", "[", "0", "]", "\n", "RELEASE_NAME", "=", "RELEASES_NAMES", "[", "0", "]", "\n", "LABEL_MAP_FILE", "=", "LABEL_MAP_FILES", "[", "0", "]", "\n", "RELEASE_SIZE", "=", "\"1.2TB\"", "\n", "V1_IDX", "=", "1", "\n", "NUM_CLASSES", "=", "41", "\n", "CLASS_LABELS", "=", "(", "\n", "\"wall\"", ",", "\n", "\"floor\"", ",", "\n", "\"cabinet\"", ",", "\n", "\"bed\"", ",", "\n", "\"chair\"", ",", "\n", "\"sofa\"", ",", "\n", "\"table\"", ",", "\n", "\"door\"", ",", "\n", "\"window\"", ",", "\n", "\"bookshelf\"", ",", "\n", "\"picture\"", ",", "\n", "\"counter\"", ",", "\n", "\"desk\"", ",", "\n", "\"curtain\"", ",", "\n", "\"refrigerator\"", ",", "\n", "\"shower curtain\"", ",", "\n", "\"toilet\"", ",", "\n", "\"sink\"", ",", "\n", "\"bathtub\"", ",", "\n", "\"otherfurniture\"", ",", "\n", ")", "\n", "URLS_METADATA", "=", "[", "\n", "\"https://raw.githubusercontent.com/facebookresearch/votenet/master/scannet/meta_data/scannetv2-labels.combined.tsv\"", ",", "\n", "\"https://raw.githubusercontent.com/facebookresearch/votenet/master/scannet/meta_data/scannetv2_train.txt\"", ",", "\n", "\"https://raw.githubusercontent.com/facebookresearch/votenet/master/scannet/meta_data/scannetv2_test.txt\"", ",", "\n", "\"https://raw.githubusercontent.com/facebookresearch/votenet/master/scannet/meta_data/scannetv2_val.txt\"", ",", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.panoptic.scannet.ScannetDataset.stuff_classes": [[99, 105], ["None"], "methods", ["None"], ["VALID_CLASS_IDS", "=", "[", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", ",", "9", ",", "10", ",", "11", ",", "12", ",", "14", ",", "16", ",", "24", ",", "28", ",", "33", ",", "34", ",", "36", ",", "39", "]", "\n", "\n", "SCANNET_COLOR_MAP", "=", "{", "\n", "0", ":", "(", "0.0", ",", "0.0", ",", "0.0", ")", ",", "\n", "1", ":", "(", "174.0", ",", "199.0", ",", "232.0", ")", ",", "\n", "2", ":", "(", "152.0", ",", "223.0", ",", "138.0", ")", ",", "\n", "3", ":", "(", "31.0", ",", "119.0", ",", "180.0", ")", ",", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.panoptic.scannet.ScannetDataset.get_tracker": [[106, 115], ["torch_points3d.metrics.panoptic_tracker.PanopticTracker"], "methods", ["None"], ["4", ":", "(", "255.0", ",", "187.0", ",", "120.0", ")", ",", "\n", "5", ":", "(", "188.0", ",", "189.0", ",", "34.0", ")", ",", "\n", "6", ":", "(", "140.0", ",", "86.0", ",", "75.0", ")", ",", "\n", "7", ":", "(", "255.0", ",", "152.0", ",", "150.0", ")", ",", "\n", "8", ":", "(", "214.0", ",", "39.0", ",", "40.0", ")", ",", "\n", "9", ":", "(", "197.0", ",", "176.0", ",", "213.0", ")", ",", "\n", "10", ":", "(", "148.0", ",", "103.0", ",", "189.0", ")", ",", "\n", "11", ":", "(", "196.0", ",", "156.0", ",", "148.0", ")", ",", "\n", "12", ":", "(", "23.0", ",", "190.0", ",", "207.0", ")", ",", "\n", "14", ":", "(", "247.0", ",", "182.0", ",", "210.0", ")", ",", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.panoptic.utils.set_extra_labels": [[4, 50], ["numpy.unique", "torch.zeros", "torch.zeros", "len", "torch.zeros", "torch.zeros.float", "torch.tensor", "semantic_labels[].item", "ValueError", "torch.stack", "numpy.where", "centers.append", "pos.max", "pos.min", "center.clone().detach", "center.clone"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.clone"], ["import", "numpy", "as", "np", "\n", "from", "torch_points3d", ".", "core", ".", "multimodal", ".", "image", "import", "SameSettingImageData", "\n", "\n", "\n", "def", "read_image_pose_pairs", "(", "\n", "image_dir", ",", "pose_dir", ",", "image_suffix", "=", "'_rgb.png'", ",", "\n", "pose_suffix", "=", "'_pose.json'", ",", "skip_names", "=", "None", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Search for all image-pose correspondences in the directories.\n    Return the list of image-pose pairs. Orphans are ignored.\n    \"\"\"", "\n", "# Search for images and poses", "\n", "image_names", "=", "sorted", "(", "[", "\n", "osp", ".", "basename", "(", "x", ")", ".", "replace", "(", "image_suffix", ",", "''", ")", "\n", "for", "x", "in", "glob", ".", "glob", "(", "osp", ".", "join", "(", "image_dir", ",", "'*'", "+", "image_suffix", ")", ")", "]", ")", "\n", "pose_names", "=", "sorted", "(", "[", "\n", "osp", ".", "basename", "(", "x", ")", ".", "replace", "(", "pose_suffix", ",", "''", ")", "\n", "for", "x", "in", "glob", ".", "glob", "(", "osp", ".", "join", "(", "pose_dir", ",", "'*'", "+", "pose_suffix", ")", ")", "]", ")", "\n", "\n", "# Remove images specified by skip_names", "\n", "skip_names", "=", "skip_names", "if", "skip_names", "is", "not", "None", "else", "[", "]", "\n", "image_names", "=", "[", "x", "for", "x", "in", "image_names", "if", "x", "not", "in", "skip_names", "]", "\n", "pose_names", "=", "[", "x", "for", "x", "in", "pose_names", "if", "x", "not", "in", "skip_names", "]", "\n", "\n", "# Print orphans", "\n", "if", "not", "image_names", "==", "pose_names", ":", "\n", "        ", "image_orphan", "=", "[", "\n", "osp", ".", "join", "(", "image_dir", ",", "x", "+", "image_suffix", ")", "\n", "for", "x", "in", "set", "(", "image_names", ")", "-", "set", "(", "pose_names", ")", "]", "\n", "pose_orphan", "=", "[", "\n", "osp", ".", "join", "(", "pose_dir", ",", "x", "+", "pose_suffix", ")", "\n", "for", "x", "in", "set", "(", "pose_names", ")", "-", "set", "(", "image_names", ")", "]", "\n", "print", "(", "\"Could not recover all image-pose correspondences.\"", ")", "\n", "print", "(", "f\"  Orphan images : {len(image_orphan)}/{len(image_names)}\"", ")", "\n", "if", "verbose", ":", "\n", "            ", "for", "x", "in", "image_orphan", ":", "\n", "                ", "print", "(", "4", "*", "' '", "+", "'/'", ".", "join", "(", "x", ".", "split", "(", "'/'", ")", "[", "-", "4", ":", "]", ")", ")", "\n", "", "", "print", "(", "f\"  Orphan poses  : {len(pose_orphan)}/{len(pose_names)}\"", ")", "\n", "if", "verbose", ":", "\n", "            ", "for", "x", "in", "pose_orphan", ":", "\n", "                ", "print", "(", "4", "*", "' '", "+", "'/'", ".", "join", "(", "x", ".", "split", "(", "'/'", ")", "[", "-", "4", ":", "]", ")", ")", "\n", "\n", "# Only return the recovered pairs", "\n", "", "", "", "correspondences", "=", "sorted", "(", "list", "(", "set", "(", "image_names", ")", ".", "intersection", "(", "\n", "set", "(", "pose_names", ")", ")", ")", ")", "\n", "pairs", "=", "[", "(", "\n", "osp", ".", "join", "(", "image_dir", ",", "x", "+", "image_suffix", ")", ",", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.panoptic.pointgroup.PointGroup.__init__": [[25, 62], ["torch_points3d.models.base_model.BaseModel.__init__", "option.get", "torch_points3d.applications.minkowski.Minkowski", "option.get", "option.get", "torch_points3d.applications.minkowski.Minkowski", "torch_points3d.applications.minkowski.Minkowski", "torch_points3d.core.common_modules.MLP", "torch_points3d.core.common_modules.Seq().append().append", "torch_points3d.core.common_modules.Seq().append", "pointgroup.PointGroup.Offset.append", "torch_points3d.core.common_modules.Seq().append().append().append", "torch_points3d.utils.is_list", "torch.cat", "option.get.get", "torch_points3d.core.data_transform.GridSampling3D", "torch.nn.Sigmoid", "torch_points3d.core.common_modules.MLP", "torch.nn.Linear", "torch.nn.LogSoftmax", "torch.Tensor().long", "option.get.get", "torch_points3d.core.common_modules.Seq().append", "torch_points3d.core.common_modules.Seq", "torch_points3d.core.common_modules.Seq().append().append", "torch.tensor", "torch.nn.Linear", "torch.nn.Linear", "torch.Tensor", "torch_points3d.core.common_modules.Seq", "torch_points3d.core.common_modules.Seq().append", "torch_points3d.core.common_modules.MLP", "torch_points3d.core.common_modules.Seq"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.minkowski.Minkowski", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.minkowski.Minkowski", "home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.minkowski.Minkowski", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.MLP", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.config.is_list", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.MLP", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.MLP"], ["def", "__init__", "(", "self", ",", "option", ",", "model_type", ",", "dataset", ",", "modules", ")", ":", "\n", "        ", "super", "(", "PointGroup", ",", "self", ")", ".", "__init__", "(", "option", ")", "\n", "backbone_options", "=", "option", ".", "get", "(", "\"backbone\"", ",", "{", "\"architecture\"", ":", "\"unet\"", "}", ")", "\n", "self", ".", "Backbone", "=", "Minkowski", "(", "\n", "backbone_options", ".", "get", "(", "\"architecture\"", ",", "\"unet\"", ")", ",", "\n", "input_nc", "=", "dataset", ".", "feature_dimension", ",", "\n", "num_layers", "=", "4", ",", "\n", "config", "=", "backbone_options", ".", "get", "(", "\"config\"", ",", "{", "}", ")", ",", "\n", ")", "\n", "\n", "self", ".", "_scorer_type", "=", "option", ".", "get", "(", "\"scorer_type\"", ",", "\"encoder\"", ")", "\n", "cluster_voxel_size", "=", "option", ".", "get", "(", "\"cluster_voxel_size\"", ",", "0.05", ")", "\n", "if", "cluster_voxel_size", ":", "\n", "            ", "self", ".", "_voxelizer", "=", "GridSampling3D", "(", "cluster_voxel_size", ",", "quantize_coords", "=", "True", ",", "mode", "=", "\"mean\"", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_voxelizer", "=", "None", "\n", "", "self", ".", "ScorerUnet", "=", "Minkowski", "(", "\"unet\"", ",", "input_nc", "=", "self", ".", "Backbone", ".", "output_nc", ",", "num_layers", "=", "4", ",", "config", "=", "option", ".", "scorer_unet", ")", "\n", "self", ".", "ScorerEncoder", "=", "Minkowski", "(", "\n", "\"encoder\"", ",", "input_nc", "=", "self", ".", "Backbone", ".", "output_nc", ",", "num_layers", "=", "4", ",", "config", "=", "option", ".", "scorer_encoder", "\n", ")", "\n", "self", ".", "ScorerMLP", "=", "MLP", "(", "[", "self", ".", "Backbone", ".", "output_nc", ",", "self", ".", "Backbone", ".", "output_nc", ",", "self", ".", "ScorerUnet", ".", "output_nc", "]", ")", "\n", "self", ".", "ScorerHead", "=", "Seq", "(", ")", ".", "append", "(", "torch", ".", "nn", ".", "Linear", "(", "self", ".", "ScorerUnet", ".", "output_nc", ",", "1", ")", ")", ".", "append", "(", "torch", ".", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "\n", "self", ".", "Offset", "=", "Seq", "(", ")", ".", "append", "(", "MLP", "(", "[", "self", ".", "Backbone", ".", "output_nc", ",", "self", ".", "Backbone", ".", "output_nc", "]", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "Offset", ".", "append", "(", "torch", ".", "nn", ".", "Linear", "(", "self", ".", "Backbone", ".", "output_nc", ",", "3", ")", ")", "\n", "\n", "self", ".", "Semantic", "=", "(", "\n", "Seq", "(", ")", "\n", ".", "append", "(", "MLP", "(", "[", "self", ".", "Backbone", ".", "output_nc", ",", "self", ".", "Backbone", ".", "output_nc", "]", ",", "bias", "=", "False", ")", ")", "\n", ".", "append", "(", "torch", ".", "nn", ".", "Linear", "(", "self", ".", "Backbone", ".", "output_nc", ",", "dataset", ".", "num_classes", ")", ")", "\n", ".", "append", "(", "torch", ".", "nn", ".", "LogSoftmax", "(", "dim", "=", "-", "1", ")", ")", "\n", ")", "\n", "self", ".", "loss_names", "=", "[", "\"loss\"", ",", "\"offset_norm_loss\"", ",", "\"offset_dir_loss\"", ",", "\"semantic_loss\"", ",", "\"score_loss\"", "]", "\n", "stuff_classes", "=", "dataset", ".", "stuff_classes", "\n", "if", "is_list", "(", "stuff_classes", ")", ":", "\n", "            ", "stuff_classes", "=", "torch", ".", "Tensor", "(", "stuff_classes", ")", ".", "long", "(", ")", "\n", "", "self", ".", "_stuff_classes", "=", "torch", ".", "cat", "(", "[", "torch", ".", "tensor", "(", "[", "IGNORE_LABEL", "]", ")", ",", "stuff_classes", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.panoptic.pointgroup.PointGroup.set_input": [[63, 68], ["data.pos.to", "structures.PanopticLabels", "data[].to"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to"], ["", "def", "set_input", "(", "self", ",", "data", ",", "device", ")", ":", "\n", "        ", "self", ".", "raw_pos", "=", "data", ".", "pos", ".", "to", "(", "device", ")", "\n", "self", ".", "input", "=", "data", "\n", "all_labels", "=", "{", "l", ":", "data", "[", "l", "]", ".", "to", "(", "device", ")", "for", "l", "in", "self", ".", "__REQUIRED_LABELS__", "}", "\n", "self", ".", "labels", "=", "PanopticLabels", "(", "**", "all_labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.panoptic.pointgroup.PointGroup.forward": [[69, 97], ["pointgroup.PointGroup.Semantic", "pointgroup.PointGroup.Offset", "structures.PanopticResults", "pointgroup.PointGroup.Backbone", "pointgroup.PointGroup._cluster", "len", "torch.no_grad", "pointgroup.PointGroup._dump_visuals", "pointgroup.PointGroup._compute_score"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.panoptic.pointgroup.PointGroup._cluster", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.panoptic.pointgroup.PointGroup._dump_visuals", "home.repos.pwc.inspect_result.drprojects_deepviewagg.panoptic.pointgroup.PointGroup._compute_score"], ["", "def", "forward", "(", "self", ",", "epoch", "=", "-", "1", ",", "**", "kwargs", ")", ":", "\n", "# Backbone", "\n", "        ", "backbone_features", "=", "self", ".", "Backbone", "(", "self", ".", "input", ")", ".", "x", "\n", "\n", "# Semantic and offset heads", "\n", "semantic_logits", "=", "self", ".", "Semantic", "(", "backbone_features", ")", "\n", "offset_logits", "=", "self", ".", "Offset", "(", "backbone_features", ")", "\n", "\n", "# Grouping and scoring", "\n", "cluster_scores", "=", "None", "\n", "all_clusters", "=", "None", "\n", "cluster_type", "=", "None", "\n", "if", "epoch", "==", "-", "1", "or", "epoch", ">", "self", ".", "opt", ".", "prepare_epoch", ":", "# Active by default", "\n", "            ", "all_clusters", ",", "cluster_type", "=", "self", ".", "_cluster", "(", "semantic_logits", ",", "offset_logits", ")", "\n", "if", "len", "(", "all_clusters", ")", ":", "\n", "                ", "cluster_scores", "=", "self", ".", "_compute_score", "(", "all_clusters", ",", "backbone_features", ",", "semantic_logits", ")", "\n", "\n", "", "", "self", ".", "output", "=", "PanopticResults", "(", "\n", "semantic_logits", "=", "semantic_logits", ",", "\n", "offset_logits", "=", "offset_logits", ",", "\n", "clusters", "=", "all_clusters", ",", "\n", "cluster_scores", "=", "cluster_scores", ",", "\n", "cluster_type", "=", "cluster_type", ",", "\n", ")", "\n", "\n", "# Sets visual data for debugging", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "_dump_visuals", "(", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.panoptic.pointgroup.PointGroup._cluster": [[98, 122], ["torch_points_kernels.region_grow", "torch_points_kernels.region_grow", "torch.zeros().to", "torch.max", "pointgroup.PointGroup.input.batch.to", "pointgroup.PointGroup.input.batch.to", "c.to", "pointgroup.PointGroup._stuff_classes.to", "pointgroup.PointGroup._stuff_classes.to", "torch.zeros", "len", "len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "", "def", "_cluster", "(", "self", ",", "semantic_logits", ",", "offset_logits", ")", ":", "\n", "        ", "\"\"\" Compute clusters from positions and votes \"\"\"", "\n", "predicted_labels", "=", "torch", ".", "max", "(", "semantic_logits", ",", "1", ")", "[", "1", "]", "\n", "clusters_pos", "=", "region_grow", "(", "\n", "self", ".", "raw_pos", ",", "\n", "predicted_labels", ",", "\n", "self", ".", "input", ".", "batch", ".", "to", "(", "self", ".", "device", ")", ",", "\n", "ignore_labels", "=", "self", ".", "_stuff_classes", ".", "to", "(", "self", ".", "device", ")", ",", "\n", "radius", "=", "self", ".", "opt", ".", "cluster_radius_search", ",", "\n", ")", "\n", "clusters_votes", "=", "region_grow", "(", "\n", "self", ".", "raw_pos", "+", "offset_logits", ",", "\n", "predicted_labels", ",", "\n", "self", ".", "input", ".", "batch", ".", "to", "(", "self", ".", "device", ")", ",", "\n", "ignore_labels", "=", "self", ".", "_stuff_classes", ".", "to", "(", "self", ".", "device", ")", ",", "\n", "radius", "=", "self", ".", "opt", ".", "cluster_radius_search", ",", "\n", "nsample", "=", "200", ",", "\n", ")", "\n", "\n", "all_clusters", "=", "clusters_pos", "+", "clusters_votes", "\n", "all_clusters", "=", "[", "c", ".", "to", "(", "self", ".", "device", ")", "for", "c", "in", "all_clusters", "]", "\n", "cluster_type", "=", "torch", ".", "zeros", "(", "len", "(", "all_clusters", ")", ",", "dtype", "=", "torch", ".", "uint8", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "cluster_type", "[", "len", "(", "clusters_pos", ")", ":", "]", "=", "1", "\n", "return", "all_clusters", ",", "cluster_type", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.panoptic.pointgroup.PointGroup._compute_score": [[123, 173], ["enumerate", "torch_geometric.data.Data", "pointgroup.PointGroup.to", "pointgroup.PointGroup.ScorerHead().squeeze", "x.append", "coords.append", "torch.cat.append", "pos.append", "torch.cat", "pointgroup.PointGroup.to", "pointgroup.PointGroup._voxelizer", "pointgroup.PointGroup.ScorerMLP", "torch_scatter.scatter", "torch.no_grad", "enumerate", "torch.cat", "torch.cat", "torch_scatter.scatter", "torch.cat", "torch.cat", "torch.cat", "pointgroup.PointGroup.x.to", "pointgroup.PointGroup.batch.long().to", "pointgroup.PointGroup.ScorerEncoder", "pointgroup.PointGroup.ScorerUnet", "torch_scatter.scatter", "pointgroup.PointGroup.ScorerHead", "torch_scatter.scatter.append", "torch.cat.append", "torch.cat.long().to", "torch.max", "torch.ones", "pointgroup.PointGroup.batch.long().to", "pointgroup.PointGroup.batch.long", "torch.ones", "torch.cat.long", "pointgroup.PointGroup.batch.long"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to"], ["", "def", "_compute_score", "(", "self", ",", "all_clusters", ",", "backbone_features", ",", "semantic_logits", ")", ":", "\n", "        ", "\"\"\" Score the clusters \"\"\"", "\n", "if", "self", ".", "_scorer_type", ":", "\n", "# Assemble batches", "\n", "            ", "x", "=", "[", "]", "\n", "coords", "=", "[", "]", "\n", "batch", "=", "[", "]", "\n", "pos", "=", "[", "]", "\n", "for", "i", ",", "cluster", "in", "enumerate", "(", "all_clusters", ")", ":", "\n", "                ", "x", ".", "append", "(", "backbone_features", "[", "cluster", "]", ")", "\n", "coords", ".", "append", "(", "self", ".", "input", ".", "coords", "[", "cluster", "]", ")", "\n", "batch", ".", "append", "(", "i", "*", "torch", ".", "ones", "(", "cluster", ".", "shape", "[", "0", "]", ")", ")", "\n", "pos", ".", "append", "(", "self", ".", "input", ".", "pos", "[", "cluster", "]", ")", "\n", "", "batch_cluster", "=", "Data", "(", "x", "=", "torch", ".", "cat", "(", "x", ")", ",", "coords", "=", "torch", ".", "cat", "(", "coords", ")", ",", "batch", "=", "torch", ".", "cat", "(", "batch", ")", ",", ")", "\n", "\n", "# Voxelise if required", "\n", "if", "self", ".", "_voxelizer", ":", "\n", "                ", "batch_cluster", ".", "pos", "=", "torch", ".", "cat", "(", "pos", ")", "\n", "batch_cluster", "=", "batch_cluster", ".", "to", "(", "self", ".", "device", ")", "\n", "batch_cluster", "=", "self", ".", "_voxelizer", "(", "batch_cluster", ")", "\n", "\n", "# Score", "\n", "", "batch_cluster", "=", "batch_cluster", ".", "to", "(", "\"cpu\"", ")", "\n", "if", "self", ".", "_scorer_type", "==", "\"MLP\"", ":", "\n", "                ", "score_backbone_out", "=", "self", ".", "ScorerMLP", "(", "batch_cluster", ".", "x", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "cluster_feats", "=", "scatter", "(", "\n", "score_backbone_out", ",", "batch_cluster", ".", "batch", ".", "long", "(", ")", ".", "to", "(", "self", ".", "device", ")", ",", "dim", "=", "0", ",", "reduce", "=", "\"max\"", "\n", ")", "\n", "", "elif", "self", ".", "_scorer_type", "==", "\"encoder\"", ":", "\n", "                ", "score_backbone_out", "=", "self", ".", "ScorerEncoder", "(", "batch_cluster", ")", "\n", "cluster_feats", "=", "score_backbone_out", ".", "x", "\n", "", "else", ":", "\n", "                ", "score_backbone_out", "=", "self", ".", "ScorerUnet", "(", "batch_cluster", ")", "\n", "cluster_feats", "=", "scatter", "(", "\n", "score_backbone_out", ".", "x", ",", "batch_cluster", ".", "batch", ".", "long", "(", ")", ".", "to", "(", "self", ".", "device", ")", ",", "dim", "=", "0", ",", "reduce", "=", "\"max\"", "\n", ")", "\n", "", "cluster_scores", "=", "self", ".", "ScorerHead", "(", "cluster_feats", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "", "else", ":", "\n", "# Use semantic certainty as cluster confidence", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "cluster_semantic", "=", "[", "]", "\n", "batch", "=", "[", "]", "\n", "for", "i", ",", "cluster", "in", "enumerate", "(", "all_clusters", ")", ":", "\n", "                    ", "cluster_semantic", ".", "append", "(", "semantic_logits", "[", "cluster", ",", ":", "]", ")", "\n", "batch", ".", "append", "(", "i", "*", "torch", ".", "ones", "(", "cluster", ".", "shape", "[", "0", "]", ")", ")", "\n", "", "cluster_semantic", "=", "torch", ".", "cat", "(", "cluster_semantic", ")", "\n", "batch", "=", "torch", ".", "cat", "(", "batch", ")", "\n", "cluster_semantic", "=", "scatter", "(", "cluster_semantic", ",", "batch", ".", "long", "(", ")", ".", "to", "(", "self", ".", "device", ")", ",", "dim", "=", "0", ",", "reduce", "=", "\"mean\"", ")", "\n", "cluster_scores", "=", "torch", ".", "max", "(", "cluster_semantic", ",", "1", ")", "[", "0", "]", "\n", "", "", "return", "cluster_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.panoptic.pointgroup.PointGroup._compute_loss": [[174, 204], ["torch.nn.functional.nll_loss", "pointgroup.PointGroup.input.instance_mask.to", "pointgroup.PointGroup.input.vote_label.to", "torch_points3d.core.losses.offset_loss", "torch_points3d.core.losses.offset_loss.items", "torch.sum", "setattr", "torch_points3d.core.losses.instance_iou_loss", "pointgroup.PointGroup.input.instance_labels.to", "pointgroup.PointGroup.input.batch.to"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.panoptic_losses.offset_loss", "home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.panoptic_losses.instance_iou_loss", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to"], ["", "def", "_compute_loss", "(", "self", ")", ":", "\n", "# Semantic loss", "\n", "        ", "self", ".", "semantic_loss", "=", "torch", ".", "nn", ".", "functional", ".", "nll_loss", "(", "\n", "self", ".", "output", ".", "semantic_logits", ",", "self", ".", "labels", ".", "y", ",", "ignore_index", "=", "IGNORE_LABEL", "\n", ")", "\n", "self", ".", "loss", "=", "self", ".", "opt", ".", "loss_weights", ".", "semantic", "*", "self", ".", "semantic_loss", "\n", "\n", "# Offset loss", "\n", "self", ".", "input", ".", "instance_mask", "=", "self", ".", "input", ".", "instance_mask", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "input", ".", "vote_label", "=", "self", ".", "input", ".", "vote_label", ".", "to", "(", "self", ".", "device", ")", "\n", "offset_losses", "=", "offset_loss", "(", "\n", "self", ".", "output", ".", "offset_logits", "[", "self", ".", "input", ".", "instance_mask", "]", ",", "\n", "self", ".", "input", ".", "vote_label", "[", "self", ".", "input", ".", "instance_mask", "]", ",", "\n", "torch", ".", "sum", "(", "self", ".", "input", ".", "instance_mask", ")", ",", "\n", ")", "\n", "for", "loss_name", ",", "loss", "in", "offset_losses", ".", "items", "(", ")", ":", "\n", "            ", "setattr", "(", "self", ",", "loss_name", ",", "loss", ")", "\n", "self", ".", "loss", "+=", "self", ".", "opt", ".", "loss_weights", "[", "loss_name", "]", "*", "loss", "\n", "\n", "# Score loss", "\n", "", "if", "self", ".", "output", ".", "cluster_scores", "is", "not", "None", "and", "self", ".", "_scorer_type", ":", "\n", "            ", "self", ".", "score_loss", "=", "instance_iou_loss", "(", "\n", "self", ".", "output", ".", "clusters", ",", "\n", "self", ".", "output", ".", "cluster_scores", ",", "\n", "self", ".", "input", ".", "instance_labels", ".", "to", "(", "self", ".", "device", ")", ",", "\n", "self", ".", "input", ".", "batch", ".", "to", "(", "self", ".", "device", ")", ",", "\n", "min_iou_threshold", "=", "self", ".", "opt", ".", "min_iou_threshold", ",", "\n", "max_iou_threshold", "=", "self", ".", "opt", ".", "max_iou_threshold", ",", "\n", ")", "\n", "self", ".", "loss", "+=", "self", ".", "score_loss", "*", "self", ".", "opt", ".", "loss_weights", "[", "\"score_loss\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.panoptic.pointgroup.PointGroup.backward": [[205, 209], ["pointgroup.PointGroup._compute_loss", "pointgroup.PointGroup.loss.backward"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.panoptic.pointgroup.PointGroup._compute_loss", "home.repos.pwc.inspect_result.drprojects_deepviewagg.panoptic.pointgroup.PointGroup.backward"], ["", "", "def", "backward", "(", "self", ")", ":", "\n", "        ", "\"\"\"Calculate losses, gradients, and update network weights; called in every training iteration\"\"\"", "\n", "self", ".", "_compute_loss", "(", ")", "\n", "self", ".", "loss", ".", "backward", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.panoptic.pointgroup.PointGroup._dump_visuals": [[210, 227], ["random.random", "torch_geometric.data.Data", "pointgroup.PointGroup.output.get_instances", "torch.save", "hasattr", "torch.max", "os.path.exists", "os.mkdir", "torch_geometric.data.Data.to", "pointgroup.PointGroup.output.clusters[].cpu"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.panoptic.structures.PanopticResults.get_instances", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.csr.CSRData.cpu"], ["", "def", "_dump_visuals", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "self", ".", "opt", ".", "vizual_ratio", ":", "\n", "            ", "if", "not", "hasattr", "(", "self", ",", "\"visual_count\"", ")", ":", "\n", "                ", "self", ".", "visual_count", "=", "0", "\n", "", "data_visual", "=", "Data", "(", "\n", "pos", "=", "self", ".", "raw_pos", ",", "y", "=", "self", ".", "input", ".", "y", ",", "instance_labels", "=", "self", ".", "input", ".", "instance_labels", ",", "batch", "=", "self", ".", "input", ".", "batch", "\n", ")", "\n", "data_visual", ".", "semantic_pred", "=", "torch", ".", "max", "(", "self", ".", "output", ".", "semantic_logits", ",", "-", "1", ")", "[", "1", "]", "\n", "data_visual", ".", "vote", "=", "self", ".", "output", ".", "offset_logits", "\n", "nms_idx", "=", "self", ".", "output", ".", "get_instances", "(", ")", "\n", "if", "self", ".", "output", ".", "clusters", "is", "not", "None", ":", "\n", "                ", "data_visual", ".", "clusters", "=", "[", "self", ".", "output", ".", "clusters", "[", "i", "]", ".", "cpu", "(", ")", "for", "i", "in", "nms_idx", "]", "\n", "data_visual", ".", "cluster_type", "=", "self", ".", "output", ".", "cluster_type", "[", "nms_idx", "]", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "\"viz\"", ")", ":", "\n", "                ", "os", ".", "mkdir", "(", "\"viz\"", ")", "\n", "", "torch", ".", "save", "(", "data_visual", ".", "to", "(", "\"cpu\"", ")", ",", "\"viz/data_e%i_%i.pt\"", "%", "(", "epoch", ",", "self", ".", "visual_count", ")", ")", "\n", "self", ".", "visual_count", "+=", "1", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.panoptic.structures.PanopticResults.get_instances": [[26, 50], ["len", "torch.zeros", "enumerate", "torch.mm", "torch.zeros.sum", "torch.zeros.sum.unsqueeze().repeat", "torch.zeros.sum.unsqueeze().repeat", "structures.non_max_suppression", "torch.zeros.t", "cross_ious.cpu().numpy", "structures.PanopticResults.cluster_scores.cpu().numpy", "torch.zeros.sum.unsqueeze", "torch.zeros.sum.unsqueeze", "valid_pick_ids.append", "cross_ious.cpu", "structures.PanopticResults.cluster_scores.cpu", "len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.panoptic.structures.non_max_suppression", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.csr.CSRData.cpu", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.csr.CSRData.cpu", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["def", "get_instances", "(", "self", ",", "nms_threshold", "=", "0.3", ",", "min_cluster_points", "=", "100", ",", "min_score", "=", "0.2", ")", "->", "List", ":", "\n", "        ", "\"\"\" Returns index of clusters that pass nms test, min size test and score test\n        \"\"\"", "\n", "if", "not", "self", ".", "clusters", ":", "\n", "            ", "return", "[", "]", "\n", "\n", "", "n_prop", "=", "len", "(", "self", ".", "clusters", ")", "\n", "proposal_masks", "=", "torch", ".", "zeros", "(", "n_prop", ",", "self", ".", "semantic_logits", ".", "shape", "[", "0", "]", ")", "\n", "for", "i", ",", "cluster", "in", "enumerate", "(", "self", ".", "clusters", ")", ":", "\n", "            ", "proposal_masks", "[", "i", ",", "cluster", "]", "=", "1", "\n", "\n", "", "intersection", "=", "torch", ".", "mm", "(", "proposal_masks", ",", "proposal_masks", ".", "t", "(", ")", ")", "# (nProposal, nProposal), float, cuda", "\n", "proposals_pointnum", "=", "proposal_masks", ".", "sum", "(", "1", ")", "# (nProposal), float, cuda", "\n", "proposals_pn_h", "=", "proposals_pointnum", ".", "unsqueeze", "(", "-", "1", ")", ".", "repeat", "(", "1", ",", "proposals_pointnum", ".", "shape", "[", "0", "]", ")", "\n", "proposals_pn_v", "=", "proposals_pointnum", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "proposals_pointnum", ".", "shape", "[", "0", "]", ",", "1", ")", "\n", "cross_ious", "=", "intersection", "/", "(", "proposals_pn_h", "+", "proposals_pn_v", "-", "intersection", ")", "\n", "pick_idxs", "=", "non_max_suppression", "(", "cross_ious", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "self", ".", "cluster_scores", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "nms_threshold", ")", "\n", "\n", "valid_pick_ids", "=", "[", "]", "\n", "for", "i", "in", "pick_idxs", ":", "\n", "            ", "cl", "=", "self", ".", "clusters", "\n", "if", "len", "(", "cl", ")", ">", "min_cluster_points", "and", "self", ".", "cluster_scores", "[", "i", "]", ">", "min_score", ":", "\n", "                ", "valid_pick_ids", ".", "append", "(", "i", ")", "\n", "", "", "return", "valid_pick_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.panoptic.structures.non_max_suppression": [[6, 17], ["scores.argsort", "len", "pick.append", "numpy.delete", "numpy.delete", "numpy.where"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append"], ["def", "non_max_suppression", "(", "ious", ",", "scores", ",", "threshold", ")", ":", "\n", "    ", "ixs", "=", "scores", ".", "argsort", "(", ")", "[", ":", ":", "-", "1", "]", "\n", "pick", "=", "[", "]", "\n", "while", "len", "(", "ixs", ")", ">", "0", ":", "\n", "        ", "i", "=", "ixs", "[", "0", "]", "\n", "pick", ".", "append", "(", "i", ")", "\n", "iou", "=", "ious", "[", "i", ",", "ixs", "[", "1", ":", "]", "]", "\n", "remove_ixs", "=", "np", ".", "where", "(", "iou", ">", "threshold", ")", "[", "0", "]", "+", "1", "\n", "ixs", "=", "np", ".", "delete", "(", "ixs", ",", "remove_ixs", ")", "\n", "ixs", "=", "np", ".", "delete", "(", "ixs", ",", "0", ")", "\n", "", "return", "pick", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.classification.modelnet.SampledModelNet.__init__": [[55, 61], ["torch_geometric.data.InMemoryDataset.__init__", "torch.load"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load"], ["self", ".", "num_pos_pairs", "=", "num_pos_pairs", "\n", "self", ".", "min_size_block", "=", "min_size_block", "\n", "self", ".", "max_size_block", "=", "max_size_block", "\n", "self", ".", "max_dist_overlap", "=", "max_dist_overlap", "\n", "self", ".", "ss_transform", "=", "ss_transform", "\n", "self", ".", "min_points", "=", "min_points", "\n", "self", ".", "train", "=", "train", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.classification.modelnet.SampledModelNet.raw_file_names": [[62, 65], ["None"], "methods", ["None"], ["self", ".", "use_fps", "=", "use_fps", "\n", "if", "(", "self", ".", "train", ")", ":", "\n", "            ", "self", ".", "name", "=", "\"train\"", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.classification.modelnet.SampledModelNet.processed_file_names": [[66, 69], ["None"], "methods", ["None"], ["            ", "self", ".", "name", "=", "\"test\"", "\n", "\n", "", "", "def", "get_model", "(", "self", ",", "idx", ")", ":", "\n", "        ", "data", "=", "self", ".", "data", ".", "__class__", "(", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.classification.modelnet.SampledModelNet.download": [[70, 77], ["torch_points3d.utils.download.download_url", "torch_geometric.data.extract_zip", "os.unlink", "os.unlink", "os.unlink", "os.unlink", "os.join", "os.join", "shutil.rmtree", "os.rename", "os.rename", "os.rename", "os.rename"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.download.download_url"], ["\n", "if", "hasattr", "(", "self", ".", "data", ",", "'__num_nodes__'", ")", ":", "\n", "            ", "data", ".", "num_nodes", "=", "self", ".", "data", ".", "__num_nodes__", "[", "idx", "]", "\n", "\n", "", "for", "key", "in", "self", ".", "data", ".", "keys", ":", "\n", "            ", "item", ",", "slices", "=", "self", ".", "data", "[", "key", "]", ",", "self", ".", "slices", "[", "key", "]", "\n", "start", ",", "end", "=", "slices", "[", "idx", "]", ".", "item", "(", ")", ",", "slices", "[", "idx", "+", "1", "]", ".", "item", "(", ")", "\n", "# print(slices[idx], slices[idx + 1])", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.classification.modelnet.SampledModelNet.process": [[78, 81], ["torch.save", "torch.save", "modelnet.SampledModelNet.process_set", "modelnet.SampledModelNet.process_set"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.classification.modelnet.SampledModelNet.process_set", "home.repos.pwc.inspect_result.drprojects_deepviewagg.classification.modelnet.SampledModelNet.process_set"], ["if", "torch", ".", "is_tensor", "(", "item", ")", ":", "\n", "                ", "s", "=", "list", "(", "repeat", "(", "slice", "(", "None", ")", ",", "item", ".", "dim", "(", ")", ")", ")", "\n", "s", "[", "self", ".", "data", ".", "__cat_dim__", "(", "key", ",", "item", ")", "]", "=", "slice", "(", "start", ",", "end", ")", "\n", "", "elif", "start", "+", "1", "==", "end", ":", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.classification.modelnet.SampledModelNet.process_set": [[82, 106], ["enumerate", "modelnet.SampledModelNet.collate", "open", "f.read().splitlines", "sorted", "open", "f.read().splitlines", "os.join", "os.join", "filter", "os.join", "os.join", "os.join", "os.join", "torch_geometric.io.read_txt_array", "torch_geometric.data.Data", "data_list.append", "modelnet.SampledModelNet.pre_transform", "f.read", "f.read", "o.strip", "modelnet.SampledModelNet.pre_filter", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append"], ["                ", "s", "=", "slices", "[", "start", "]", "\n", "", "else", ":", "\n", "                ", "s", "=", "slice", "(", "start", ",", "end", ")", "\n", "", "data", "[", "key", "]", "=", "item", "[", "s", "]", "\n", "", "return", "data", "\n", "\n", "", "def", "get_raw_pair", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\"\n        \"\"\"", "\n", "data_source_o", "=", "self", ".", "get_model", "(", "idx", ")", "\n", "data_target_o", "=", "self", ".", "get_model", "(", "idx", ")", "\n", "data_source", ",", "data_target", ",", "new_pair", "=", "self", ".", "unsupervised_preprocess", "(", "\n", "data_source_o", ",", "data_target_o", ")", "\n", "return", "data_source", ",", "data_target", ",", "new_pair", "\n", "\n", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "res", "=", "self", ".", "get_fragment", "(", "idx", ")", "\n", "return", "res", "\n", "\n", "", "def", "get_name", "(", "self", ",", "idx", ")", ":", "\n", "        ", "data", "=", "self", ".", "get_model", "(", "idx", ")", "\n", "return", "data", ".", "y", ".", "item", "(", ")", ",", "\"{}_source\"", ".", "format", "(", "idx", ")", ",", "\"{}_target\"", ".", "format", "(", "idx", ")", "\n", "\n", "", "def", "process", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "process", "(", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.classification.modelnet.SampledModelNet.__repr__": [[107, 109], ["len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["\n", "", "def", "download", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "download", "(", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.classification.modelnet.ModelNetDataset.__init__": [[115, 134], ["torch_points3d.datasets.base_dataset.BaseDataset.__init__", "modelnet.SampledModelNet", "modelnet.SampledModelNet", "str", "Exception", "str", "str"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["        ", "super", "(", ")", ".", "__init__", "(", "dataset_opt", ")", "\n", "pre_transform", "=", "self", ".", "pre_transform", "\n", "ss_transform", "=", "getattr", "(", "self", ",", "\"ss_transform\"", ",", "None", ")", "\n", "train_transform", "=", "self", ".", "train_transform", "\n", "test_transform", "=", "self", ".", "test_transform", "\n", "pre_filter", "=", "self", ".", "pre_filter", "\n", "\n", "self", ".", "train_dataset", "=", "SiameseModelNet", "(", "\n", "root", "=", "self", ".", "_data_path", ",", "\n", "name_modelnet", "=", "dataset_opt", ".", "name_modelnet", ",", "\n", "train", "=", "True", ",", "\n", "min_size_block", "=", "dataset_opt", ".", "min_size_block", ",", "\n", "max_size_block", "=", "dataset_opt", ".", "max_size_block", ",", "\n", "max_dist_overlap", "=", "dataset_opt", ".", "max_dist_overlap", ",", "\n", "pre_transform", "=", "pre_transform", ",", "\n", "transform", "=", "train_transform", ",", "\n", "pre_filter", "=", "pre_filter", ",", "\n", "num_pos_pairs", "=", "dataset_opt", ".", "num_pos_pairs", ",", "\n", "ss_transform", "=", "ss_transform", ",", "\n", "min_points", "=", "dataset_opt", ".", "min_points", ",", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.classification.modelnet.ModelNetDataset.get_tracker": [[136, 145], ["torch_points3d.metrics.classification_tracker.ClassificationTracker"], "methods", ["None"], ["\n", "self", ".", "test_dataset", "=", "SiameseModelNet", "(", "\n", "root", "=", "self", ".", "_data_path", ",", "\n", "name_modelnet", "=", "dataset_opt", ".", "name_modelnet", ",", "\n", "train", "=", "False", ",", "\n", "min_size_block", "=", "dataset_opt", ".", "min_size_block", ",", "\n", "max_size_block", "=", "dataset_opt", ".", "max_size_block", ",", "\n", "max_dist_overlap", "=", "dataset_opt", ".", "max_dist_overlap", ",", "\n", "pre_transform", "=", "pre_transform", ",", "\n", "transform", "=", "test_transform", ",", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.pretrained_api.PretainedRegistry.from_pretrained": [[96, 136], ["os.path.join", "PretainedRegistry.MODELS.get", "PretainedRegistry.MODELS.get", "Exception", "pretrained_api.download_file", "torch_points3d.metrics.model_checkpoint.ModelCheckpoint", "checkpoint.create_model", "torch_points3d.utils.wandb_utils.Wandb.set_urls_to_model", "torch_points3d.datasets.base_dataset.BaseDataset.set_transform", "checkpoint.dataset_properties.copy", "torch_points3d.datasets.dataset_factory.instantiate_dataset", "pretrained_api.PretainedRegistry.available_models", "PretainedRegistry.MOCK_USED_PROPERTIES.get", "PretainedRegistry.MOCK_USED_PROPERTIES.get().items", "PretainedRegistry.MOCK_USED_PROPERTIES.get"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.pretrained_api.download_file", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.ModelCheckpoint.create_model", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.wandb_utils.Wandb.set_urls_to_model", "home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.base_dataset.BaseDataset.set_transform", "home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.dataset_factory.instantiate_dataset", "home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.pretrained_api.PretainedRegistry.available_models", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get"], ["@", "staticmethod", "\n", "def", "from_pretrained", "(", "model_tag", ",", "download", "=", "True", ",", "out_file", "=", "None", ",", "weight_name", "=", "\"latest\"", ",", "mock_dataset", "=", "True", ")", ":", "\n", "# Convert inputs to registry format", "\n", "\n", "        ", "if", "PretainedRegistry", ".", "MODELS", ".", "get", "(", "model_tag", ")", "is", "not", "None", ":", "\n", "            ", "url", "=", "PretainedRegistry", ".", "MODELS", ".", "get", "(", "model_tag", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\n", "\"model_tag {} doesn't exist within available models. Here is the list of pre-trained models {}\"", ".", "format", "(", "\n", "model_tag", ",", "PretainedRegistry", ".", "available_models", "(", ")", "\n", ")", "\n", ")", "\n", "\n", "", "checkpoint_name", "=", "model_tag", "+", "\".pt\"", "\n", "out_file", "=", "os", ".", "path", ".", "join", "(", "CHECKPOINT_DIR", ",", "checkpoint_name", ")", "\n", "\n", "if", "download", ":", "\n", "            ", "download_file", "(", "url", ",", "out_file", ")", "\n", "\n", "weight_name", "=", "weight_name", "if", "weight_name", "is", "not", "None", "else", "\"latest\"", "\n", "\n", "checkpoint", ":", "ModelCheckpoint", "=", "ModelCheckpoint", "(", "\n", "CHECKPOINT_DIR", ",", "model_tag", ",", "weight_name", "if", "weight_name", "is", "not", "None", "else", "\"latest\"", ",", "resume", "=", "False", ",", "\n", ")", "\n", "if", "mock_dataset", ":", "\n", "                ", "dataset", "=", "checkpoint", ".", "dataset_properties", ".", "copy", "(", ")", "\n", "if", "PretainedRegistry", ".", "MOCK_USED_PROPERTIES", ".", "get", "(", "model_tag", ")", "is", "not", "None", ":", "\n", "                    ", "for", "k", ",", "v", "in", "PretainedRegistry", ".", "MOCK_USED_PROPERTIES", ".", "get", "(", "model_tag", ")", ".", "items", "(", ")", ":", "\n", "                        ", "dataset", "[", "k", "]", "=", "v", "\n", "\n", "", "", "", "else", ":", "\n", "                ", "dataset", "=", "instantiate_dataset", "(", "checkpoint", ".", "data_config", ")", "\n", "\n", "", "model", ":", "BaseModel", "=", "checkpoint", ".", "create_model", "(", "dataset", ",", "weight_name", "=", "weight_name", ")", "\n", "\n", "Wandb", ".", "set_urls_to_model", "(", "model", ",", "url", ")", "\n", "\n", "BaseDataset", ".", "set_transform", "(", "model", ",", "checkpoint", ".", "data_config", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.pretrained_api.PretainedRegistry.from_file": [[137, 171], ["os.path.split", "torch_points3d.metrics.model_checkpoint.ModelCheckpoint", "checkpoint.create_model", "torch_points3d.datasets.base_dataset.BaseDataset.set_transform", "name.split", "mock_property.items", "torch_points3d.datasets.dataset_factory.instantiate_dataset"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.split", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.ModelCheckpoint.create_model", "home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.base_dataset.BaseDataset.set_transform", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.split", "home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.dataset_factory.instantiate_dataset"], ["", "", "@", "staticmethod", "\n", "def", "from_file", "(", "path", ",", "weight_name", "=", "\"latest\"", ",", "mock_property", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Load a pretrained model trained with torch-points3d from file.\n        return a pretrained model\n        Parameters\n        ----------\n        path: str\n            path of a pretrained model\n        weight_name: str, optional\n            name of the weight\n        mock_property: dict, optional\n            mock dataset\n\n        \"\"\"", "\n", "weight_name", "=", "weight_name", "if", "weight_name", "is", "not", "None", "else", "\"latest\"", "\n", "path_dir", ",", "name", "=", "os", ".", "path", ".", "split", "(", "path", ")", "\n", "name", "=", "name", ".", "split", "(", "\".\"", ")", "[", "0", "]", "# ModelCheckpoint will add the extension", "\n", "\n", "checkpoint", ":", "ModelCheckpoint", "=", "ModelCheckpoint", "(", "\n", "path_dir", ",", "name", ",", "weight_name", "if", "weight_name", "is", "not", "None", "else", "\"latest\"", ",", "resume", "=", "False", ",", "\n", ")", "\n", "dataset", "=", "checkpoint", ".", "data_config", "\n", "\n", "if", "mock_property", "is", "not", "None", ":", "\n", "            ", "for", "k", ",", "v", "in", "mock_property", ".", "items", "(", ")", ":", "\n", "                ", "dataset", "[", "k", "]", "=", "v", "\n", "\n", "", "", "else", ":", "\n", "            ", "dataset", "=", "instantiate_dataset", "(", "checkpoint", ".", "data_config", ")", "\n", "\n", "", "model", ":", "BaseModel", "=", "checkpoint", ".", "create_model", "(", "dataset", ",", "weight_name", "=", "weight_name", ")", "\n", "BaseDataset", ".", "set_transform", "(", "model", ",", "checkpoint", ".", "data_config", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.pretrained_api.PretainedRegistry.available_models": [[172, 175], ["PretainedRegistry.MODELS.keys"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.mock.MockDatasetConfig.keys"], ["", "@", "staticmethod", "\n", "def", "available_models", "(", ")", ":", "\n", "        ", "return", "PretainedRegistry", ".", "MODELS", ".", "keys", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.pretrained_api.download_file": [[23, 30], ["os.path.exists", "urllib.request.urlretrieve", "log.warning", "os.path.exists", "os.makedirs", "os.path.dirname", "os.path.dirname"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.makedirs"], ["def", "download_file", "(", "url", ",", "out_file", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "out_file", ")", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "dirname", "(", "out_file", ")", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "out_file", ")", ")", "\n", "", "urllib", ".", "request", ".", "urlretrieve", "(", "url", ",", "out_file", ")", "\n", "", "else", ":", "\n", "        ", "log", ".", "warning", "(", "\"WARNING: skipping download of existing file \"", "+", "out_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.kpconv.KPConvFactory._build_unet": [[52, 61], ["torch_points3d.applications.modelfactory.ModelFactory.resolve_model", "kpconv.KPConvUnet", "os.path.join", "omegaconf.OmegaConf.load"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.modelfactory.ModelFactory.resolve_model", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load"], ["    ", "def", "_build_unet", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_config", ":", "\n", "            ", "model_config", "=", "self", ".", "_config", "\n", "", "else", ":", "\n", "            ", "path_to_model", "=", "os", ".", "path", ".", "join", "(", "PATH_TO_CONFIG", ",", "\"unet_{}.yaml\"", ".", "format", "(", "self", ".", "num_layers", ")", ")", "\n", "model_config", "=", "OmegaConf", ".", "load", "(", "path_to_model", ")", "\n", "", "ModelFactory", ".", "resolve_model", "(", "model_config", ",", "self", ".", "num_features", ",", "self", ".", "_kwargs", ")", "\n", "modules_lib", "=", "sys", ".", "modules", "[", "__name__", "]", "\n", "return", "KPConvUnet", "(", "model_config", ",", "None", ",", "None", ",", "modules_lib", ",", "**", "self", ".", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.kpconv.KPConvFactory._build_encoder": [[62, 71], ["torch_points3d.applications.modelfactory.ModelFactory.resolve_model", "kpconv.KPConvEncoder", "os.path.join", "omegaconf.OmegaConf.load"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.modelfactory.ModelFactory.resolve_model", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load"], ["", "def", "_build_encoder", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_config", ":", "\n", "            ", "model_config", "=", "self", ".", "_config", "\n", "", "else", ":", "\n", "            ", "path_to_model", "=", "os", ".", "path", ".", "join", "(", "PATH_TO_CONFIG", ",", "\"encoder_{}.yaml\"", ".", "format", "(", "self", ".", "num_layers", ")", ")", "\n", "model_config", "=", "OmegaConf", ".", "load", "(", "path_to_model", ")", "\n", "", "ModelFactory", ".", "resolve_model", "(", "model_config", ",", "self", ".", "num_features", ",", "self", ".", "_kwargs", ")", "\n", "modules_lib", "=", "sys", ".", "modules", "[", "__name__", "]", "\n", "return", "KPConvEncoder", "(", "model_config", ",", "None", ",", "None", ",", "modules_lib", ",", "**", "self", ".", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.kpconv.BaseKPConv.__init__": [[76, 90], ["torch_points3d.models.base_architectures.unet.UnwrappedUnetBasedModel.__init__", "utils.extract_output_nc", "torch_points3d.core.common_modules.base_modules.MLP", "log.warning", "torch.nn.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.utils.extract_output_nc", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.MLP"], ["def", "__init__", "(", "self", ",", "model_config", ",", "model_type", ",", "dataset", ",", "modules", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "BaseKPConv", ",", "self", ")", ".", "__init__", "(", "model_config", ",", "model_type", ",", "dataset", ",", "modules", ")", "\n", "try", ":", "\n", "            ", "default_output_nc", "=", "extract_output_nc", "(", "model_config", ")", "\n", "", "except", ":", "\n", "            ", "default_output_nc", "=", "-", "1", "\n", "log", ".", "warning", "(", "\"Could not resolve number of output channels\"", ")", "\n", "\n", "", "self", ".", "_output_nc", "=", "default_output_nc", "\n", "self", ".", "_has_mlp_head", "=", "False", "\n", "if", "\"output_nc\"", "in", "kwargs", ":", "\n", "            ", "self", ".", "_has_mlp_head", "=", "True", "\n", "self", ".", "_output_nc", "=", "kwargs", "[", "\"output_nc\"", "]", "\n", "self", ".", "mlp", "=", "MLP", "(", "[", "default_output_nc", ",", "self", ".", "output_nc", "]", ",", "activation", "=", "torch", ".", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.kpconv.BaseKPConv.has_mlp_head": [[91, 94], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "has_mlp_head", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_has_mlp_head", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.kpconv.BaseKPConv.output_nc": [[95, 98], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "output_nc", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_output_nc", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.kpconv.BaseKPConv._set_input": [[99, 118], ["data.to.to.to", "isinstance"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to"], ["", "def", "_set_input", "(", "self", ",", "data", ")", ":", "\n", "        ", "\"\"\"Unpack input data from the dataloader and perform necessary pre-processing steps.\n\n        Parameters\n        -----------\n        data:\n            a dictionary that contains the data itself and its metadata information.\n        \"\"\"", "\n", "data", "=", "data", ".", "to", "(", "self", ".", "device", ")", "\n", "if", "isinstance", "(", "data", ",", "MultiScaleBatch", ")", ":", "\n", "            ", "self", ".", "pre_computed", "=", "data", ".", "multiscale", "\n", "self", ".", "upsample", "=", "data", ".", "upsample", "\n", "del", "data", ".", "upsample", "\n", "del", "data", ".", "multiscale", "\n", "", "else", ":", "\n", "            ", "self", ".", "upsample", "=", "None", "\n", "self", ".", "pre_computed", "=", "None", "\n", "\n", "", "self", ".", "input", "=", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.kpconv.KPConvEncoder.forward": [[121, 153], ["kpconv.KPConvEncoder._set_input", "range", "stack_down.append", "isinstance", "stack_down.append", "kpconv.KPConvEncoder.mlp", "len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.pointnet2.BasePointnet2._set_input", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["    ", "def", "forward", "(", "self", ",", "data", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Parameters\n        -----------\n        data:\n            A dictionary that contains the data itself and its metadata information. Should contain\n            - pos [N, 3]\n            - x [N, C]\n            - multiscale (optional) precomputed data for the down convolutions\n            - upsample (optional) precomputed data for the up convolutions\n\n        Returns\n        --------\n        data:\n            - pos [1, 3] - Dummy pos\n            - x [1, output_nc]\n        \"\"\"", "\n", "self", ".", "_set_input", "(", "data", ")", "\n", "data", "=", "self", ".", "input", "\n", "stack_down", "=", "[", "data", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "down_modules", ")", "-", "1", ")", ":", "\n", "            ", "data", "=", "self", ".", "down_modules", "[", "i", "]", "(", "data", ")", "\n", "stack_down", ".", "append", "(", "data", ")", "\n", "", "data", "=", "self", ".", "down_modules", "[", "-", "1", "]", "(", "data", ")", "\n", "\n", "if", "not", "isinstance", "(", "self", ".", "inner_modules", "[", "0", "]", ",", "Identity", ")", ":", "\n", "            ", "stack_down", ".", "append", "(", "data", ")", "\n", "data", "=", "self", ".", "inner_modules", "[", "0", "]", "(", "data", ")", "\n", "\n", "", "if", "self", ".", "has_mlp_head", ":", "\n", "            ", "data", ".", "x", "=", "self", ".", "mlp", "(", "data", ".", "x", ")", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.kpconv.KPConvUnet.forward": [[156, 182], ["kpconv.KPConvUnet._set_input", "super().forward", "kpconv.KPConvUnet.mlp"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.pointnet2.BasePointnet2._set_input", "home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.forward"], ["    ", "def", "forward", "(", "self", ",", "data", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Run forward pass.\n        Input --- D1 -- D2 -- D3 -- U1 -- U2 -- output\n                   |      |_________|     |\n                   |______________________|\n\n        Parameters\n        -----------\n        data:\n            A dictionary that contains the data itself and its metadata information. Should contain\n            - pos [N, 3]\n            - x [N, C]\n            - multiscale (optional) precomputed data for the down convolutions\n            - upsample (optional) precomputed data for the up convolutions\n\n        Returns\n        --------\n        data:\n            - pos [N, 3]\n            - x [N, output_nc]\n        \"\"\"", "\n", "self", ".", "_set_input", "(", "data", ")", "\n", "data", "=", "super", "(", ")", ".", "forward", "(", "self", ".", "input", ",", "precomputed_down", "=", "self", ".", "pre_computed", ",", "precomputed_up", "=", "self", ".", "upsample", ")", "\n", "if", "self", ".", "has_mlp_head", ":", "\n", "            ", "data", ".", "x", "=", "self", ".", "mlp", "(", "data", ".", "x", ")", "\n", "", "return", "data", "\n", "", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.kpconv.KPConv": [[22, 49], ["kpconv.KPConvFactory", "KPConvFactory.build"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.modelfactory.ModelFactory.build"], ["def", "KPConv", "(", "\n", "architecture", ":", "str", "=", "None", ",", "input_nc", ":", "int", "=", "None", ",", "num_layers", ":", "int", "=", "None", ",", "config", ":", "DictConfig", "=", "None", ",", "*", "args", ",", "**", "kwargs", "\n", ")", ":", "\n", "    ", "\"\"\" Create a KPConv backbone model based on the architecture proposed in\n    https://arxiv.org/abs/1904.08889\n\n    Parameters\n    ----------\n    architecture : str, optional\n        Architecture of the model, choose from unet, encoder and decoder\n    input_nc : int, optional\n        Number of channels for the input\n    output_nc : int, optional\n        If specified, then we add a fully connected head at the end of the network to provide the requested dimension\n    num_layers : int, optional\n        Depth of the network\n    in_grid_size : float, optional\n        Size of the grid at the entry of the network. It is divided by two at each layer\n    in_feat : int, optional\n        Number of channels after the first convolution. Doubles at each layer\n    config : DictConfig, optional\n        Custom config, overrides the num_layers and architecture parameters\n    \"\"\"", "\n", "factory", "=", "KPConvFactory", "(", "\n", "architecture", "=", "architecture", ",", "num_layers", "=", "num_layers", ",", "input_nc", "=", "input_nc", ",", "config", "=", "config", ",", "**", "kwargs", "\n", ")", "\n", "return", "factory", ".", "build", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.minkowski.MinkowskiFactory._build_unet": [[58, 67], ["torch_points3d.applications.modelfactory.ModelFactory.resolve_model", "minkowski.MinkowskiUnet", "os.path.join", "omegaconf.OmegaConf.load"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.modelfactory.ModelFactory.resolve_model", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load"], ["    ", "def", "_build_unet", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_config", ":", "\n", "            ", "model_config", "=", "self", ".", "_config", "\n", "", "else", ":", "\n", "            ", "path_to_model", "=", "os", ".", "path", ".", "join", "(", "PATH_TO_CONFIG", ",", "\"unet_{}.yaml\"", ".", "format", "(", "self", ".", "num_layers", ")", ")", "\n", "model_config", "=", "OmegaConf", ".", "load", "(", "path_to_model", ")", "\n", "", "ModelFactory", ".", "resolve_model", "(", "model_config", ",", "self", ".", "num_features", ",", "self", ".", "_kwargs", ")", "\n", "modules_lib", "=", "sys", ".", "modules", "[", "__name__", "]", "\n", "return", "MinkowskiUnet", "(", "model_config", ",", "None", ",", "None", ",", "modules_lib", ",", "**", "self", ".", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.minkowski.MinkowskiFactory._build_encoder": [[68, 77], ["torch_points3d.applications.modelfactory.ModelFactory.resolve_model", "minkowski.MinkowskiEncoder", "os.path.join", "omegaconf.OmegaConf.load"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.modelfactory.ModelFactory.resolve_model", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load"], ["", "def", "_build_encoder", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_config", ":", "\n", "            ", "model_config", "=", "self", ".", "_config", "\n", "", "else", ":", "\n", "            ", "path_to_model", "=", "os", ".", "path", ".", "join", "(", "PATH_TO_CONFIG", ",", "\"encoder_{}.yaml\"", ".", "format", "(", "self", ".", "num_layers", ")", ",", ")", "\n", "model_config", "=", "OmegaConf", ".", "load", "(", "path_to_model", ")", "\n", "", "ModelFactory", ".", "resolve_model", "(", "model_config", ",", "self", ".", "num_features", ",", "self", ".", "_kwargs", ")", "\n", "modules_lib", "=", "sys", ".", "modules", "[", "__name__", "]", "\n", "return", "MinkowskiEncoder", "(", "model_config", ",", "None", ",", "None", ",", "modules_lib", ",", "**", "self", ".", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.minkowski.BaseMinkowski.__init__": [[82, 95], ["torch_points3d.models.base_architectures.unet.UnwrappedUnetBasedModel.__init__", "minkowski.BaseMinkowski.weight_initialization", "kwargs.get", "utils.extract_output_nc", "torch_points3d.core.common_modules.base_modules.MLP", "torch.nn.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.res16unet.ResNetBase.weight_initialization", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.utils.extract_output_nc", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.MLP"], ["def", "__init__", "(", "self", ",", "model_config", ",", "model_type", ",", "dataset", ",", "modules", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "BaseMinkowski", ",", "self", ")", ".", "__init__", "(", "model_config", ",", "model_type", ",", "dataset", ",", "modules", ")", "\n", "self", ".", "weight_initialization", "(", ")", "\n", "default_output_nc", "=", "kwargs", ".", "get", "(", "\"default_output_nc\"", ",", "None", ")", "\n", "if", "not", "default_output_nc", ":", "\n", "            ", "default_output_nc", "=", "extract_output_nc", "(", "model_config", ")", "\n", "\n", "", "self", ".", "_output_nc", "=", "default_output_nc", "\n", "self", ".", "_has_mlp_head", "=", "False", "\n", "if", "\"output_nc\"", "in", "kwargs", ":", "\n", "            ", "self", ".", "_has_mlp_head", "=", "True", "\n", "self", ".", "_output_nc", "=", "kwargs", "[", "\"output_nc\"", "]", "\n", "self", ".", "mlp", "=", "MLP", "(", "[", "default_output_nc", ",", "self", ".", "output_nc", "]", ",", "activation", "=", "torch", ".", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.minkowski.BaseMinkowski.has_mlp_head": [[96, 99], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "has_mlp_head", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_has_mlp_head", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.minkowski.BaseMinkowski.output_nc": [[100, 103], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "output_nc", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_output_nc", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.minkowski.BaseMinkowski.weight_initialization": [[104, 112], ["minkowski.BaseMinkowski.modules", "isinstance", "isinstance", "ME.utils.kaiming_normal_", "nn.init.constant_", "nn.init.constant_"], "methods", ["None"], ["", "def", "weight_initialization", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "ME", ".", "MinkowskiConvolution", ")", ":", "\n", "                ", "ME", ".", "utils", ".", "kaiming_normal_", "(", "m", ".", "kernel", ",", "mode", "=", "\"fan_out\"", ",", "nonlinearity", "=", "\"relu\"", ")", "\n", "\n", "", "if", "isinstance", "(", "m", ",", "ME", ".", "MinkowskiBatchNorm", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.minkowski.BaseMinkowski._set_input": [[113, 127], ["torch.cat", "ME.SparseTensor", "data.pos.to", "data.coords.to", "data.batch.unsqueeze().int", "data.coords.int", "data.batch.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.SparseTensor", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to"], ["", "", "", "def", "_set_input", "(", "self", ",", "data", ")", ":", "\n", "        ", "\"\"\"Unpack input data from the dataloader and perform necessary pre-processing steps.\n\n        Parameters\n        -----------\n        data:\n            a dictionary that contains the data itself and its metadata information.\n        \"\"\"", "\n", "coords", "=", "torch", ".", "cat", "(", "[", "data", ".", "batch", ".", "unsqueeze", "(", "-", "1", ")", ".", "int", "(", ")", ",", "data", ".", "coords", ".", "int", "(", ")", "]", ",", "-", "1", ")", "\n", "self", ".", "input", "=", "ME", ".", "SparseTensor", "(", "features", "=", "data", ".", "x", ",", "coordinates", "=", "coords", ",", "device", "=", "self", ".", "device", ")", "\n", "if", "data", ".", "pos", "is", "not", "None", ":", "\n", "            ", "self", ".", "xyz", "=", "data", ".", "pos", ".", "to", "(", "self", ".", "device", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "xyz", "=", "data", ".", "coords", ".", "to", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.minkowski.MinkowskiEncoder.forward": [[130, 157], ["minkowski.MinkowskiEncoder._set_input", "range", "torch_geometric.data.Batch", "len", "isinstance", "minkowski.MinkowskiEncoder.mlp", "data.C[].long().to", "data.C[].long"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.pointnet2.BasePointnet2._set_input", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to"], ["    ", "def", "forward", "(", "self", ",", "data", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Parameters:\n        -----------\n        data\n            A SparseTensor that contains the data itself and its metadata information. Should contain\n                F -- Features [N, C]\n                coords -- Coords [N, 4]\n\n        Returns\n        --------\n        data:\n            - x [1, output_nc]\n\n        \"\"\"", "\n", "self", ".", "_set_input", "(", "data", ")", "\n", "data", "=", "self", ".", "input", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "down_modules", ")", ")", ":", "\n", "            ", "data", "=", "self", ".", "down_modules", "[", "i", "]", "(", "data", ")", "\n", "\n", "", "out", "=", "Batch", "(", "x", "=", "data", ".", "F", ",", "batch", "=", "data", ".", "C", "[", ":", ",", "0", "]", ".", "long", "(", ")", ".", "to", "(", "data", ".", "F", ".", "device", ")", ")", "\n", "if", "not", "isinstance", "(", "self", ".", "inner_modules", "[", "0", "]", ",", "Identity", ")", ":", "\n", "            ", "out", "=", "self", ".", "inner_modules", "[", "0", "]", "(", "out", ")", "\n", "\n", "", "if", "self", ".", "has_mlp_head", ":", "\n", "            ", "out", ".", "x", "=", "self", ".", "mlp", "(", "out", ".", "x", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.minkowski.MinkowskiUnet.forward": [[160, 197], ["minkowski.MinkowskiUnet._set_input", "range", "stack_down.append", "range", "torch_geometric.data.Batch", "stack_down.append", "len", "minkowski.MinkowskiUnet.mlp", "len", "stack_down.pop"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.pointnet2.BasePointnet2._set_input", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["    ", "def", "forward", "(", "self", ",", "data", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Run forward pass.\n        Input --- D1 -- D2 -- D3 -- U1 -- U2 -- output\n                   |      |_________|     |\n                   |______________________|\n\n        Parameters\n        -----------\n        data\n            A SparseTensor that contains the data itself and its metadata information. Should contain\n                F -- Features [N, C]\n                coords -- Coords [N, 4]\n\n        Returns\n        --------\n        data:\n            - pos [N, 3] (coords or real pos if xyz is in data)\n            - x [N, output_nc]\n            - batch [N]\n        \"\"\"", "\n", "self", ".", "_set_input", "(", "data", ")", "\n", "data", "=", "self", ".", "input", "\n", "stack_down", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "down_modules", ")", "-", "1", ")", ":", "\n", "            ", "data", "=", "self", ".", "down_modules", "[", "i", "]", "(", "data", ")", "\n", "stack_down", ".", "append", "(", "data", ")", "\n", "\n", "", "data", "=", "self", ".", "down_modules", "[", "-", "1", "]", "(", "data", ")", "\n", "stack_down", ".", "append", "(", "None", ")", "\n", "# TODO : Manage the inner module", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "up_modules", ")", ")", ":", "\n", "            ", "data", "=", "self", ".", "up_modules", "[", "i", "]", "(", "data", ",", "stack_down", ".", "pop", "(", ")", ")", "\n", "\n", "", "out", "=", "Batch", "(", "x", "=", "data", ".", "F", ",", "pos", "=", "self", ".", "xyz", ",", "batch", "=", "data", ".", "C", "[", ":", ",", "0", "]", ")", "\n", "if", "self", ".", "has_mlp_head", ":", "\n", "            ", "out", ".", "x", "=", "self", ".", "mlp", "(", "out", ".", "x", ")", "\n", "", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.minkowski.Minkowski": [[25, 55], ["log.warning", "minkowski.MinkowskiFactory", "MinkowskiFactory.build"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.modelfactory.ModelFactory.build"], ["def", "Minkowski", "(", "\n", "architecture", ":", "str", "=", "None", ",", "input_nc", ":", "int", "=", "None", ",", "num_layers", ":", "int", "=", "None", ",", "config", ":", "DictConfig", "=", "None", ",", "*", "args", ",", "**", "kwargs", "\n", ")", ":", "\n", "    ", "\"\"\" Create a Minkowski backbone model based on architecture proposed in\n    https://arxiv.org/abs/1904.08755\n\n    Parameters\n    ----------\n    architecture : str, optional\n        Architecture of the model, choose from unet, encoder and decoder\n    input_nc : int, optional\n        Number of channels for the input\n   output_nc : int, optional\n        If specified, then we add a fully connected head at the end of the network to provide the requested dimension\n    num_layers : int, optional\n        Depth of the network\n    config : DictConfig, optional\n        Custom config, overrides the num_layers and architecture parameters\n    in_feat:\n        Size of the first layer\n    block:\n        Type of resnet block, ResBlock by default but can be any of the blocks in modules/MinkowskiEngine/api_modules.py\n    \"\"\"", "\n", "log", ".", "warning", "(", "\n", "\"Minkowski API is deprecated in favor of the SparseConv3d API. It should be a simple drop in replacement (no change to the API).\"", "\n", ")", "\n", "factory", "=", "MinkowskiFactory", "(", "\n", "architecture", "=", "architecture", ",", "num_layers", "=", "num_layers", ",", "input_nc", "=", "input_nc", ",", "config", "=", "config", ",", "**", "kwargs", "\n", ")", "\n", "return", "factory", ".", "build", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.modelfactory.ModelFactory.raise_enum_error": [[19, 22], ["Exception"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "raise_enum_error", "(", "arg_name", ",", "arg_value", ",", "options", ")", ":", "\n", "        ", "raise", "Exception", "(", "\"The provided argument {} with value {} isn't within {}\"", ".", "format", "(", "arg_name", ",", "arg_value", ",", "options", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.modelfactory.ModelFactory.__init__": [[23, 45], ["architecture.lower", "modelfactory.ModelFactory.raise_enum_error", "ValueError", "log.info"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.modelfactory.ModelFactory.raise_enum_error"], ["", "def", "__init__", "(", "\n", "self", ",", "\n", "architecture", ":", "str", "=", "None", ",", "\n", "input_nc", ":", "int", "=", "None", ",", "\n", "num_layers", ":", "int", "=", "None", ",", "\n", "config", ":", "DictConfig", "=", "None", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "if", "not", "architecture", ":", "\n", "            ", "raise", "ValueError", "(", ")", "\n", "", "self", ".", "_architecture", "=", "architecture", ".", "lower", "(", ")", "\n", "assert", "self", ".", "_architecture", "in", "self", ".", "MODEL_ARCHITECTURES", ",", "ModelFactory", ".", "raise_enum_error", "(", "\n", "\"model_architecture\"", ",", "self", ".", "_architecture", ",", "self", ".", "MODEL_ARCHITECTURES", "\n", ")", "\n", "\n", "self", ".", "_input_nc", "=", "input_nc", "\n", "self", ".", "_num_layers", "=", "num_layers", "\n", "self", ".", "_config", "=", "config", "\n", "self", ".", "_kwargs", "=", "kwargs", "\n", "\n", "if", "self", ".", "_config", ":", "\n", "            ", "log", ".", "info", "(", "\"The config will be used to build the model\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.modelfactory.ModelFactory.modules_lib": [[46, 49], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "modules_lib", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.modelfactory.ModelFactory.kwargs": [[50, 53], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "kwargs", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_kwargs", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.modelfactory.ModelFactory.num_layers": [[54, 57], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_layers", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_num_layers", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.modelfactory.ModelFactory.num_features": [[58, 61], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_features", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_input_nc", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.modelfactory.ModelFactory._build_unet": [[62, 64], ["None"], "methods", ["None"], ["", "def", "_build_unet", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.modelfactory.ModelFactory._build_encoder": [[65, 67], ["None"], "methods", ["None"], ["", "def", "_build_encoder", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.modelfactory.ModelFactory._build_decoder": [[68, 70], ["None"], "methods", ["None"], ["", "def", "_build_decoder", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.modelfactory.ModelFactory.build": [[71, 80], ["modelfactory.ModelFactory._build_unet", "modelfactory.ModelFactory._build_encoder", "modelfactory.ModelFactory._build_decoder"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.pointnet2.PointNet2Factory._build_unet", "home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.pointnet2.PointNet2Factory._build_encoder", "home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.modelfactory.ModelFactory._build_decoder"], ["", "def", "build", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_architecture", "==", "ModelArchitectures", ".", "UNET", ".", "value", ":", "\n", "            ", "return", "self", ".", "_build_unet", "(", ")", "\n", "", "elif", "self", ".", "_architecture", "==", "ModelArchitectures", ".", "ENCODER", ".", "value", ":", "\n", "            ", "return", "self", ".", "_build_encoder", "(", ")", "\n", "", "elif", "self", ".", "_architecture", "==", "ModelArchitectures", ".", "DECODER", ".", "value", ":", "\n", "            ", "return", "self", ".", "_build_decoder", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.modelfactory.ModelFactory.resolve_model": [[81, 100], ["torch_points3d.utils.model_building_utils.model_definition_resolver.resolve", "max", "model_config.keys", "constants.update", "define_constants.keys", "dict", "kwargs.get"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.model_building_utils.model_definition_resolver.resolve", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.mock.MockDatasetConfig.keys", "home.repos.pwc.inspect_result.drprojects_deepviewagg.RSConv.message_passing.Convolution.update", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.mock.MockDatasetConfig.keys", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get"], ["", "", "@", "staticmethod", "\n", "def", "resolve_model", "(", "model_config", ",", "num_features", ",", "kwargs", ")", ":", "\n", "        ", "\"\"\" Parses the model config and evaluates any expression that may contain constants\n        Overrides any argument in the `define_constants` with keywords wrgument to the constructor\n        \"\"\"", "\n", "# placeholders to subsitute", "\n", "constants", "=", "{", "\n", "\"FEAT\"", ":", "max", "(", "num_features", ",", "0", ")", ",", "\n", "}", "\n", "\n", "# user defined contants to subsitute", "\n", "if", "\"define_constants\"", "in", "model_config", ".", "keys", "(", ")", ":", "\n", "            ", "constants", ".", "update", "(", "dict", "(", "model_config", ".", "define_constants", ")", ")", "\n", "define_constants", "=", "model_config", ".", "define_constants", "\n", "for", "key", "in", "define_constants", ".", "keys", "(", ")", ":", "\n", "                ", "value", "=", "kwargs", ".", "get", "(", "key", ")", "\n", "if", "value", ":", "\n", "                    ", "constants", "[", "key", "]", "=", "value", "\n", "", "", "", "resolve", "(", "model_config", ",", "constants", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.rsconv.RSConvFactory._build_unet": [[49, 58], ["torch_points3d.applications.modelfactory.ModelFactory.resolve_model", "rsconv.RSConvUnet", "os.path.join", "omegaconf.OmegaConf.load"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.modelfactory.ModelFactory.resolve_model", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load"], ["    ", "def", "_build_unet", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_config", ":", "\n", "            ", "model_config", "=", "self", ".", "_config", "\n", "", "else", ":", "\n", "            ", "path_to_model", "=", "os", ".", "path", ".", "join", "(", "PATH_TO_CONFIG", ",", "\"unet_{}.yaml\"", ".", "format", "(", "self", ".", "num_layers", ")", ")", "\n", "model_config", "=", "OmegaConf", ".", "load", "(", "path_to_model", ")", "\n", "", "ModelFactory", ".", "resolve_model", "(", "model_config", ",", "self", ".", "num_features", ",", "self", ".", "_kwargs", ")", "\n", "modules_lib", "=", "sys", ".", "modules", "[", "__name__", "]", "\n", "return", "RSConvUnet", "(", "model_config", ",", "None", ",", "None", ",", "modules_lib", ",", "**", "self", ".", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.rsconv.RSConvFactory._build_encoder": [[59, 68], ["torch_points3d.applications.modelfactory.ModelFactory.resolve_model", "rsconv.RSConvEncoder", "os.path.join", "omegaconf.OmegaConf.load"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.modelfactory.ModelFactory.resolve_model", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load"], ["", "def", "_build_encoder", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_config", ":", "\n", "            ", "model_config", "=", "self", ".", "_config", "\n", "", "else", ":", "\n", "            ", "path_to_model", "=", "os", ".", "path", ".", "join", "(", "PATH_TO_CONFIG", ",", "\"encoder_{}.yaml\"", ".", "format", "(", "self", ".", "num_layers", ")", ")", "\n", "model_config", "=", "OmegaConf", ".", "load", "(", "path_to_model", ")", "\n", "", "ModelFactory", ".", "resolve_model", "(", "model_config", ",", "self", ".", "num_features", ",", "self", ".", "_kwargs", ")", "\n", "modules_lib", "=", "sys", ".", "modules", "[", "__name__", "]", "\n", "return", "RSConvEncoder", "(", "model_config", ",", "None", ",", "None", ",", "modules_lib", ",", "**", "self", ".", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.rsconv.RSConvBase.__init__": [[73, 84], ["torch_points3d.models.base_architectures.unet.UnwrappedUnetBasedModel.__init__", "kwargs.get", "torch_points3d.core.common_modules.base_modules.Seq", "rsconv.RSConvBase.mlp.append", "torch_points3d.core.common_modules.dense_modules.Conv1D"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append"], ["def", "__init__", "(", "self", ",", "model_config", ",", "model_type", ",", "dataset", ",", "modules", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "RSConvBase", ",", "self", ")", ".", "__init__", "(", "model_config", ",", "model_type", ",", "dataset", ",", "modules", ")", "\n", "\n", "default_output_nc", "=", "kwargs", ".", "get", "(", "\"default_output_nc\"", ",", "384", ")", "\n", "self", ".", "_has_mlp_head", "=", "False", "\n", "self", ".", "_output_nc", "=", "default_output_nc", "\n", "if", "\"output_nc\"", "in", "kwargs", ":", "\n", "            ", "self", ".", "_has_mlp_head", "=", "True", "\n", "self", ".", "_output_nc", "=", "kwargs", "[", "\"output_nc\"", "]", "\n", "self", ".", "mlp", "=", "Seq", "(", ")", "\n", "self", ".", "mlp", ".", "append", "(", "Conv1D", "(", "default_output_nc", ",", "self", ".", "_output_nc", ",", "bn", "=", "True", ",", "bias", "=", "False", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.rsconv.RSConvBase.has_mlp_head": [[85, 88], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "has_mlp_head", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_has_mlp_head", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.rsconv.RSConvBase.output_nc": [[89, 92], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "output_nc", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_output_nc", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.rsconv.RSConvBase._set_input": [[93, 109], ["data.to.to.to", "len", "data.to.to.x.transpose().contiguous", "data.to.to.x.transpose"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "def", "_set_input", "(", "self", ",", "data", ")", ":", "\n", "        ", "\"\"\"Unpack input data from the dataloader and perform necessary pre-processing steps.\n        Parameters:\n            input: a dictionary that contains the data itself and its metadata information.\n        Sets:\n            self.input:\n                x -- Features [B, C, N]\n                pos -- Points [B, N, 3]\n        \"\"\"", "\n", "assert", "len", "(", "data", ".", "pos", ".", "shape", ")", "==", "3", "\n", "data", "=", "data", ".", "to", "(", "self", ".", "device", ")", "\n", "if", "data", ".", "x", "is", "not", "None", ":", "\n", "            ", "data", ".", "x", "=", "data", ".", "x", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "", "else", ":", "\n", "            ", "data", ".", "x", "=", "None", "\n", "", "self", ".", "input", "=", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.rsconv.RSConvEncoder.__init__": [[112, 120], ["rsconv.RSConvBase.__init__", "utils.extract_output_nc", "log.warning"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.utils.extract_output_nc"], ["    ", "def", "__init__", "(", "self", ",", "model_config", ",", "model_type", ",", "dataset", ",", "modules", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "default_output_nc", "=", "extract_output_nc", "(", "model_config", ")", "\n", "", "except", ":", "\n", "            ", "default_output_nc", "=", "-", "1", "\n", "log", ".", "warning", "(", "\"Could not resolve number of output channels\"", ")", "\n", "", "super", "(", ")", ".", "__init__", "(", "\n", "model_config", ",", "model_type", ",", "dataset", ",", "modules", ",", "default_output_nc", "=", "default_output_nc", ",", "*", "args", ",", "**", "kwargs", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.rsconv.RSConvEncoder.forward": [[122, 147], ["rsconv.RSConvEncoder._set_input", "range", "stack_down.append", "isinstance", "stack_down.append", "rsconv.RSConvEncoder.mlp", "len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.pointnet2.BasePointnet2._set_input", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "def", "forward", "(", "self", ",", "data", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\" This method does a forward on the Unet\n\n        Parameters:\n        -----------\n        data\n            A dictionary that contains the data itself and its metadata information. Should contain\n                x -- Features [B, N, C]\n                pos -- Points [B, N, 3]\n        \"\"\"", "\n", "self", ".", "_set_input", "(", "data", ")", "\n", "data", "=", "self", ".", "input", "\n", "stack_down", "=", "[", "data", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "down_modules", ")", "-", "1", ")", ":", "\n", "            ", "data", "=", "self", ".", "down_modules", "[", "i", "]", "(", "data", ")", "\n", "stack_down", ".", "append", "(", "data", ")", "\n", "", "data", "=", "self", ".", "down_modules", "[", "-", "1", "]", "(", "data", ")", "\n", "\n", "if", "not", "isinstance", "(", "self", ".", "inner_modules", "[", "0", "]", ",", "Identity", ")", ":", "\n", "            ", "stack_down", ".", "append", "(", "data", ")", "\n", "data", "=", "self", ".", "inner_modules", "[", "0", "]", "(", "data", ")", "\n", "\n", "", "if", "self", ".", "has_mlp_head", ":", "\n", "            ", "data", ".", "x", "=", "self", ".", "mlp", "(", "data", ".", "x", ")", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.rsconv.RSConvUnet.__init__": [[150, 162], ["rsconv.RSConvBase.__init__", "log.warning"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model_config", ",", "model_type", ",", "dataset", ",", "modules", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "default_output_nc", "=", "(", "\n", "model_config", ".", "innermost", "[", "0", "]", ".", "nn", "[", "-", "1", "]", "\n", "+", "model_config", ".", "innermost", "[", "1", "]", ".", "nn", "[", "-", "1", "]", "\n", "+", "model_config", ".", "up_conv", ".", "up_conv_nn", "[", "-", "1", "]", "[", "-", "1", "]", "\n", ")", "\n", "", "except", ":", "\n", "            ", "default_output_nc", "=", "-", "1", "\n", "log", ".", "warning", "(", "\"Could not resolve number of output channels\"", ")", "\n", "", "super", "(", ")", ".", "__init__", "(", "\n", "model_config", ",", "model_type", ",", "dataset", ",", "modules", ",", "default_output_nc", "=", "default_output_nc", ",", "*", "args", ",", "**", "kwargs", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.rsconv.RSConvUnet.forward": [[164, 208], ["rsconv.RSConvUnet._set_input", "queue.Queue", "stack_down.append", "range", "rsconv.RSConvUnet._collect_sampling_ids", "queue.Queue.put", "range", "torch.cat", "rsconv.RSConvUnet.items", "stack_down.append", "len", "len", "queue.Queue.put", "rsconv.RSConvUnet.mlp", "setattr", "len", "data_inner.x.repeat", "data_inner_2.x.repeat", "queue.Queue.get", "stack_down.pop"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.pointnet2.BasePointnet2._set_input", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_architectures.unet.UnwrappedUnetBasedModel._collect_sampling_ids", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get"], ["", "def", "forward", "(", "self", ",", "data", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\" This method does a forward on the Unet\n\n        Parameters:\n        -----------\n        data\n            A dictionary that contains the data itself and its metadata information. Should contain\n                x -- Features [B, N, C]\n                pos -- Points [B, N, 3]\n        \"\"\"", "\n", "self", ".", "_set_input", "(", "data", ")", "\n", "stack_down", "=", "[", "]", "\n", "queue_up", "=", "queue", ".", "Queue", "(", ")", "\n", "\n", "data", "=", "self", ".", "input", "\n", "stack_down", ".", "append", "(", "data", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "down_modules", ")", "-", "1", ")", ":", "\n", "            ", "data", "=", "self", ".", "down_modules", "[", "i", "]", "(", "data", ")", "\n", "stack_down", ".", "append", "(", "data", ")", "\n", "", "sampling_ids", "=", "self", ".", "_collect_sampling_ids", "(", "stack_down", ")", "\n", "\n", "data", "=", "self", ".", "down_modules", "[", "-", "1", "]", "(", "data", ")", "\n", "queue_up", ".", "put", "(", "data", ")", "\n", "\n", "assert", "len", "(", "self", ".", "inner_modules", ")", "==", "2", ",", "\"For this multimodal model, we except 2 distinct inner\"", "\n", "data_inner", "=", "self", ".", "inner_modules", "[", "0", "]", "(", "data", ")", "\n", "data_inner_2", "=", "self", ".", "inner_modules", "[", "1", "]", "(", "stack_down", "[", "3", "]", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "up_modules", ")", ")", ":", "\n", "            ", "data", "=", "self", ".", "up_modules", "[", "i", "]", "(", "(", "queue_up", ".", "get", "(", ")", ",", "stack_down", ".", "pop", "(", ")", ")", ")", "\n", "queue_up", ".", "put", "(", "data", ")", "\n", "\n", "", "last_feature", "=", "torch", ".", "cat", "(", "\n", "[", "data", ".", "x", ",", "data_inner", ".", "x", ".", "repeat", "(", "1", ",", "1", ",", "data", ".", "x", ".", "shape", "[", "-", "1", "]", ")", ",", "data_inner_2", ".", "x", ".", "repeat", "(", "1", ",", "1", ",", "data", ".", "x", ".", "shape", "[", "-", "1", "]", ")", "]", ",", "dim", "=", "1", "\n", ")", "\n", "\n", "if", "self", ".", "has_mlp_head", ":", "\n", "            ", "data", ".", "x", "=", "self", ".", "mlp", "(", "last_feature", ")", "\n", "", "else", ":", "\n", "            ", "data", ".", "x", "=", "last_feature", "\n", "", "for", "key", ",", "value", "in", "sampling_ids", ".", "items", "(", ")", ":", "\n", "            ", "setattr", "(", "data", ",", "key", ",", "value", ")", "\n", "", "return", "data", "\n", "", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.rsconv.RSConv": [[23, 46], ["rsconv.RSConvFactory", "RSConvFactory.build"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.modelfactory.ModelFactory.build"], ["def", "RSConv", "(", "\n", "architecture", ":", "str", "=", "None", ",", "input_nc", ":", "int", "=", "None", ",", "num_layers", ":", "int", "=", "None", ",", "config", ":", "DictConfig", "=", "None", ",", "*", "args", ",", "**", "kwargs", "\n", ")", ":", "\n", "    ", "\"\"\" Create a RSConv backbone model based on the architecture proposed in\n    https://arxiv.org/abs/1904.07601\n\n    Parameters\n    ----------\n    architecture : str, optional\n        Architecture of the model, choose from unet, encoder and decoder\n    input_nc : int, optional\n        Number of channels for the input\n    output_nc : int, optional\n        If specified, then we add a fully connected head at the end of the network to provide the requested dimension\n    num_layers : int, optional\n        Depth of the network\n    config : DictConfig, optional\n        Custom config, overrides the num_layers and architecture parameters\n    \"\"\"", "\n", "factory", "=", "RSConvFactory", "(", "\n", "architecture", "=", "architecture", ",", "num_layers", "=", "num_layers", ",", "input_nc", "=", "input_nc", ",", "config", "=", "config", ",", "**", "kwargs", "\n", ")", "\n", "return", "factory", ".", "build", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.sparseconv3d.SparseConv3dFactory._build_unet": [[78, 90], ["torch_points3d.applications.modelfactory.ModelFactory.resolve_model", "sparseconv3d.SparseConv3dUnet", "os.path.join", "omegaconf.OmegaConf.load"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.modelfactory.ModelFactory.resolve_model", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load"], ["    ", "def", "_build_unet", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_config", ":", "\n", "            ", "model_config", "=", "self", ".", "_config", "\n", "", "else", ":", "\n", "            ", "path_to_model", "=", "os", ".", "path", ".", "join", "(", "PATH_TO_CONFIG", ",", "\"unet_{}.yaml\"", ".", "format", "(", "\n", "self", ".", "num_layers", ")", ")", "\n", "model_config", "=", "OmegaConf", ".", "load", "(", "path_to_model", ")", "\n", "", "ModelFactory", ".", "resolve_model", "(", "model_config", ",", "self", ".", "num_features", ",", "\n", "self", ".", "_kwargs", ")", "\n", "modules_lib", "=", "sys", ".", "modules", "[", "__name__", "]", "\n", "return", "SparseConv3dUnet", "(", "model_config", ",", "None", ",", "None", ",", "modules_lib", ",", "\n", "**", "self", ".", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.sparseconv3d.SparseConv3dFactory._build_encoder": [[91, 105], ["torch_points3d.applications.modelfactory.ModelFactory.resolve_model", "sparseconv3d.SparseConv3dEncoder", "os.path.join", "omegaconf.OmegaConf.load"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.modelfactory.ModelFactory.resolve_model", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load"], ["", "def", "_build_encoder", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_config", ":", "\n", "            ", "model_config", "=", "self", ".", "_config", "\n", "", "else", ":", "\n", "            ", "path_to_model", "=", "os", ".", "path", ".", "join", "(", "\n", "PATH_TO_CONFIG", ",", "\n", "\"encoder_{}.yaml\"", ".", "format", "(", "self", ".", "num_layers", ")", ",", "\n", ")", "\n", "model_config", "=", "OmegaConf", ".", "load", "(", "path_to_model", ")", "\n", "", "ModelFactory", ".", "resolve_model", "(", "model_config", ",", "self", ".", "num_features", ",", "\n", "self", ".", "_kwargs", ")", "\n", "modules_lib", "=", "sys", ".", "modules", "[", "__name__", "]", "\n", "return", "SparseConv3dEncoder", "(", "model_config", ",", "None", ",", "None", ",", "modules_lib", ",", "\n", "**", "self", ".", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.sparseconv3d.BaseSparseConv3d.__init__": [[110, 125], ["torch_points3d.models.base_architectures.unet.UnwrappedUnetBasedModel.__init__", "sparseconv3d.BaseSparseConv3d.weight_initialization", "kwargs.get", "utils.extract_output_nc", "torch_points3d.core.common_modules.base_modules.MLP", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.res16unet.ResNetBase.weight_initialization", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.utils.extract_output_nc", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.MLP"], ["def", "__init__", "(", "self", ",", "model_config", ",", "model_type", ",", "dataset", ",", "modules", ",", "*", "args", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "model_config", ",", "model_type", ",", "dataset", ",", "modules", ")", "\n", "self", ".", "weight_initialization", "(", ")", "\n", "default_output_nc", "=", "kwargs", ".", "get", "(", "\"default_output_nc\"", ",", "None", ")", "\n", "if", "not", "default_output_nc", ":", "\n", "            ", "default_output_nc", "=", "extract_output_nc", "(", "model_config", ")", "\n", "\n", "", "self", ".", "_output_nc", "=", "default_output_nc", "\n", "self", ".", "_has_mlp_head", "=", "False", "\n", "if", "\"output_nc\"", "in", "kwargs", ":", "\n", "            ", "self", ".", "_has_mlp_head", "=", "True", "\n", "self", ".", "_output_nc", "=", "kwargs", "[", "\"output_nc\"", "]", "\n", "self", ".", "mlp", "=", "MLP", "(", "[", "default_output_nc", ",", "self", ".", "output_nc", "]", ",", "\n", "activation", "=", "torch", ".", "nn", ".", "ReLU", "(", ")", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.sparseconv3d.BaseSparseConv3d.has_mlp_head": [[126, 129], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "has_mlp_head", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_has_mlp_head", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.sparseconv3d.BaseSparseConv3d.output_nc": [[130, 133], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "output_nc", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_output_nc", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.sparseconv3d.BaseSparseConv3d.weight_initialization": [[134, 144], ["sparseconv3d.BaseSparseConv3d.modules", "isinstance", "isinstance", "isinstance", "torch.nn.init.kaiming_normal_", "torch.nn.init.constant_", "torch.nn.init.constant_"], "methods", ["None"], ["", "def", "weight_initialization", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "sp3d", ".", "nn", ".", "Conv3d", ")", "or", "isinstance", "(", "m", ",", "sp3d", ".", "nn", ".", "Conv3dTranspose", ")", ":", "\n", "                ", "torch", ".", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "kernel", ",", "mode", "=", "\"fan_out\"", ",", "\n", "nonlinearity", "=", "\"relu\"", ")", "\n", "\n", "", "if", "isinstance", "(", "m", ",", "sp3d", ".", "nn", ".", "BatchNorm", ")", ":", "\n", "                ", "torch", ".", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn", ".", "weight", ",", "1", ")", "\n", "torch", ".", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.sparseconv3d.BaseSparseConv3d._set_input": [[145, 166], ["torch_points3d.nn.SparseTensor", "torch_points3d.nn.SparseTensor", "data.to"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.SparseTensor", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.SparseTensor", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to"], ["", "", "", "def", "_set_input", "(", "self", ",", "data", ")", ":", "\n", "        ", "\"\"\"Unpack input data from the dataloader and perform necessary\n        pre-processing steps.\n\n        Parameters\n        -----------\n        data:\n            a dictionary that contains the data itself and its metadata\n            information.\n        \"\"\"", "\n", "if", "self", ".", "is_multimodal", ":", "\n", "            ", "self", ".", "input", "=", "{", "\n", "'x_3d'", ":", "sp3d", ".", "nn", ".", "SparseTensor", "(", "data", ".", "x", ",", "data", ".", "coords", ",", "data", ".", "batch", ",", "self", ".", "device", ")", ",", "\n", "'x_seen'", ":", "None", ",", "\n", "'modalities'", ":", "data", ".", "to", "(", "self", ".", "device", ")", ".", "modalities", "}", "\n", "", "else", ":", "\n", "            ", "self", ".", "input", "=", "sp3d", ".", "nn", ".", "SparseTensor", "(", "data", ".", "x", ",", "data", ".", "coords", ",", "data", ".", "batch", ",", "self", ".", "device", ")", "\n", "", "if", "data", ".", "pos", "is", "not", "None", ":", "\n", "            ", "self", ".", "xyz", "=", "data", ".", "pos", "\n", "", "else", ":", "\n", "            ", "self", ".", "xyz", "=", "data", ".", "coords", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.sparseconv3d.SparseConv3dEncoder.forward": [[168, 200], ["sparseconv3d.SparseConv3dEncoder._set_input", "range", "torch_geometric.data.Batch", "len", "isinstance", "sparseconv3d.SparseConv3dEncoder.mlp", "data.C[].long().to", "data.C[].long"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.pointnet2.BasePointnet2._set_input", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to"], ["    ", "def", "forward", "(", "self", ",", "data", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Parameters:\n        -----------\n        data\n            A SparseTensor that contains the data itself and its\n            metadata information. Should contain\n                F -- Features [N, C]\n                coords -- Coords [N, 4]\n\n        Returns\n        --------\n        data:\n            - x [1, output_nc]\n        \"\"\"", "\n", "self", ".", "_set_input", "(", "data", ")", "\n", "data", "=", "self", ".", "input", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "down_modules", ")", ")", ":", "\n", "            ", "data", "=", "self", ".", "down_modules", "[", "i", "]", "(", "data", ")", "\n", "\n", "# Discard the modalities used in the down modules, only", "\n", "# pointwise features are used in subsequent modules.", "\n", "", "if", "self", ".", "is_multimodal", ":", "\n", "            ", "data", "=", "data", "[", "'x_3d'", "]", "\n", "\n", "", "out", "=", "Batch", "(", "x", "=", "data", ".", "F", ",", "batch", "=", "data", ".", "C", "[", ":", ",", "0", "]", ".", "long", "(", ")", ".", "to", "(", "data", ".", "F", ".", "device", ")", ")", "\n", "if", "not", "isinstance", "(", "self", ".", "inner_modules", "[", "0", "]", ",", "Identity", ")", ":", "\n", "            ", "out", "=", "self", ".", "inner_modules", "[", "0", "]", "(", "out", ")", "\n", "\n", "", "if", "self", ".", "has_mlp_head", ":", "\n", "            ", "out", ".", "x", "=", "self", ".", "mlp", "(", "out", ".", "x", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.sparseconv3d.SparseConv3dUnet.forward": [[203, 269], ["sparseconv3d.SparseConv3dUnet._set_input", "range", "range", "torch_geometric.data.Batch().to", "stack_down.append", "len", "sparseconv3d.SparseConv3dUnet.mlp", "len", "stack_down.append", "stack_down.append", "stack_down.pop", "torch_geometric.data.Batch"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.pointnet2.BasePointnet2._set_input", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append"], ["    ", "def", "forward", "(", "self", ",", "data", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Run forward pass.\n        Input --- D1 -- D2 -- D3 -- U1 -- U2 -- output\n                   |      |_________|     |\n                   |______________________|\n\n        Parameters\n        -----------\n        data\n            A SparseTensor that contains the data itself and its\n            metadata information. Should contain\n                F -- Features [N, C]\n                coords -- Coords [N, 4]\n\n        Returns\n        --------\n        data:\n            - pos [N, 3] (coords or real pos if xyz is in data)\n            - x [N, output_nc]\n            - batch [N]\n        \"\"\"", "\n", "self", ".", "_set_input", "(", "data", ")", "\n", "data", "=", "self", ".", "input", "\n", "stack_down", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "down_modules", ")", "-", "1", ")", ":", "\n", "            ", "data", "=", "self", ".", "down_modules", "[", "i", "]", "(", "data", ")", "\n", "\n", "# Early down modules operate on raw data, their output is", "\n", "# not passed in skip connections", "\n", "if", "i", "<", "self", ".", "n_early_conv", ":", "\n", "                ", "continue", "\n", "\n", "# Append the 3D data features of each down module, the", "\n", "# modality features are discarded, if any.", "\n", "", "if", "self", ".", "is_multimodal", ":", "\n", "                ", "stack_down", ".", "append", "(", "data", "[", "'x_3d'", "]", ")", "\n", "", "else", ":", "\n", "                ", "stack_down", ".", "append", "(", "data", ")", "\n", "\n", "# Last down conv module", "\n", "", "", "data", "=", "self", ".", "down_modules", "[", "-", "1", "]", "(", "data", ")", "\n", "\n", "if", "self", ".", "is_multimodal", ":", "\n", "# Discard the modalities used in the down modules, only", "\n", "# pointwise features are used in subsequent modules.", "\n", "            ", "data", "=", "data", "[", "'x_3d'", "]", "\n", "\n", "# TODO : Manage the inner module", "\n", "\n", "# Recover the skip mode from the up modules", "\n", "", "if", "self", ".", "up_modules", "[", "0", "]", ".", "skip_first", ":", "\n", "            ", "stack_down", ".", "append", "(", "None", ")", "\n", "\n", "# Up conv with skip connexions", "\n", "", "for", "i", "in", "range", "(", "len", "(", "self", ".", "up_modules", ")", ")", ":", "\n", "            ", "skip", "=", "stack_down", ".", "pop", "(", "-", "1", ")", "if", "stack_down", "else", "None", "\n", "data", "=", "self", ".", "up_modules", "[", "i", "]", "(", "data", ",", "skip", ")", "\n", "\n", "# Dirty trick to have access to the last sparse tensor from ", "\n", "# outside of the model", "\n", "", "self", ".", "last_sparse_tensor", "=", "data", "\n", "\n", "out", "=", "Batch", "(", "x", "=", "data", ".", "F", ",", "pos", "=", "self", ".", "xyz", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "if", "self", ".", "has_mlp_head", ":", "\n", "            ", "out", ".", "x", "=", "self", ".", "mlp", "(", "out", ".", "x", ")", "\n", "", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.sparseconv3d.SparseConv3d": [[27, 75], ["sparseconv3d.SparseConv3dFactory", "SparseConv3dFactory.build", "torch_points3d.nn.backend_valid", "torch_points3d.nn.set_backend", "torch_points3d.nn.set_backend"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.modelfactory.ModelFactory.build", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.__init__.backend_valid", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.__init__.set_backend", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.__init__.set_backend"], ["def", "SparseConv3d", "(", "\n", "architecture", ":", "str", "=", "None", ",", "\n", "input_nc", ":", "int", "=", "None", ",", "\n", "num_layers", ":", "int", "=", "None", ",", "\n", "config", ":", "DictConfig", "=", "None", ",", "\n", "backend", ":", "str", "=", "\"minkowski\"", ",", "\n", "*", "args", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "    ", "\"\"\"Create a Sparse Conv backbone model based on architecture\n    proposed in\n     https://arxiv.org/abs/1904.08755\n\n     Two backends are available at the moment:\n         - https://github.com/mit-han-lab/torchsparse\n         - https://github.com/NVIDIA/MinkowskiEngine\n\n     Parameters\n     ----------\n     architecture : str, optional\n         Architecture of the model, choose from unet, encoder and\n         decoder\n     input_nc : int, optional\n         Number of channels for the input\n    output_nc : int, optional\n         If specified, then we add a fully connected head at the end of\n         the network to provide the requested dimension\n     num_layers : int, optional\n         Depth of the network\n     config : DictConfig, optional\n         Custom config, overrides the num_layers and architecture\n         parameters\n     block:\n         Type of resnet block, ResBlock by default but can be any of\n         the blocks in modules/SparseConv3d/modules.py\n     backend:\n         torchsparse or minkowski\n    \"\"\"", "\n", "if", "\"SPARSE_BACKEND\"", "in", "os", ".", "environ", "and", "sp3d", ".", "nn", ".", "backend_valid", "(", "os", ".", "environ", "[", "\"SPARSE_BACKEND\"", "]", ")", ":", "\n", "        ", "sp3d", ".", "nn", ".", "set_backend", "(", "os", ".", "environ", "[", "\"SPARSE_BACKEND\"", "]", ")", "\n", "", "else", ":", "\n", "        ", "sp3d", ".", "nn", ".", "set_backend", "(", "backend", ")", "\n", "\n", "", "factory", "=", "SparseConv3dFactory", "(", "\n", "architecture", "=", "architecture", ",", "num_layers", "=", "num_layers", ",", "input_nc", "=", "input_nc", ",", "\n", "config", "=", "config", ",", "**", "kwargs", "\n", ")", "\n", "return", "factory", ".", "build", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.pointnet2.PointNet2Factory._build_unet": [[59, 70], ["torch_points3d.applications.modelfactory.ModelFactory.resolve_model", "pointnet2.PointNet2Unet", "os.path.join", "omegaconf.OmegaConf.load"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.modelfactory.ModelFactory.resolve_model", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load"], ["    ", "def", "_build_unet", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_config", ":", "\n", "            ", "model_config", "=", "self", ".", "_config", "\n", "", "else", ":", "\n", "            ", "path_to_model", "=", "os", ".", "path", ".", "join", "(", "\n", "PATH_TO_CONFIG", ",", "\"unet_{}_{}.yaml\"", ".", "format", "(", "self", ".", "num_layers", ",", "\"ms\"", "if", "self", ".", "kwargs", "[", "\"multiscale\"", "]", "else", "\"ss\"", ")", "\n", ")", "\n", "model_config", "=", "OmegaConf", ".", "load", "(", "path_to_model", ")", "\n", "", "ModelFactory", ".", "resolve_model", "(", "model_config", ",", "self", ".", "num_features", ",", "self", ".", "_kwargs", ")", "\n", "modules_lib", "=", "sys", ".", "modules", "[", "__name__", "]", "\n", "return", "PointNet2Unet", "(", "model_config", ",", "None", ",", "None", ",", "modules_lib", ",", "**", "self", ".", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.pointnet2.PointNet2Factory._build_encoder": [[71, 83], ["torch_points3d.applications.modelfactory.ModelFactory.resolve_model", "pointnet2.PointNet2Encoder", "os.path.join", "omegaconf.OmegaConf.load"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.modelfactory.ModelFactory.resolve_model", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load"], ["", "def", "_build_encoder", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_config", ":", "\n", "            ", "model_config", "=", "self", ".", "_config", "\n", "", "else", ":", "\n", "            ", "path_to_model", "=", "os", ".", "path", ".", "join", "(", "\n", "PATH_TO_CONFIG", ",", "\n", "\"encoder_{}_{}.yaml\"", ".", "format", "(", "self", ".", "num_layers", ",", "\"ms\"", "if", "self", ".", "kwargs", "[", "\"multiscale\"", "]", "else", "\"ss\"", ")", ",", "\n", ")", "\n", "model_config", "=", "OmegaConf", ".", "load", "(", "path_to_model", ")", "\n", "", "ModelFactory", ".", "resolve_model", "(", "model_config", ",", "self", ".", "num_features", ",", "self", ".", "_kwargs", ")", "\n", "modules_lib", "=", "sys", ".", "modules", "[", "__name__", "]", "\n", "return", "PointNet2Encoder", "(", "model_config", ",", "None", ",", "None", ",", "modules_lib", ",", "**", "self", ".", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.pointnet2.BasePointnet2.__init__": [[89, 105], ["torch_points3d.models.base_architectures.unet.UnwrappedUnetBasedModel.__init__", "utils.extract_output_nc", "torch_points3d.core.common_modules.base_modules.Seq", "pointnet2.BasePointnet2.mlp.append", "log.warning", "torch_points3d.core.common_modules.dense_modules.Conv1D"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.utils.extract_output_nc", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append"], ["def", "__init__", "(", "self", ",", "model_config", ",", "model_type", ",", "dataset", ",", "modules", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "BasePointnet2", ",", "self", ")", ".", "__init__", "(", "model_config", ",", "model_type", ",", "dataset", ",", "modules", ")", "\n", "\n", "try", ":", "\n", "            ", "default_output_nc", "=", "extract_output_nc", "(", "model_config", ")", "\n", "", "except", ":", "\n", "            ", "default_output_nc", "=", "-", "1", "\n", "log", ".", "warning", "(", "\"Could not resolve number of output channels\"", ")", "\n", "\n", "", "self", ".", "_has_mlp_head", "=", "False", "\n", "self", ".", "_output_nc", "=", "default_output_nc", "\n", "if", "\"output_nc\"", "in", "kwargs", ":", "\n", "            ", "self", ".", "_has_mlp_head", "=", "True", "\n", "self", ".", "_output_nc", "=", "kwargs", "[", "\"output_nc\"", "]", "\n", "self", ".", "mlp", "=", "Seq", "(", ")", "\n", "self", ".", "mlp", ".", "append", "(", "Conv1D", "(", "default_output_nc", ",", "self", ".", "_output_nc", ",", "bn", "=", "True", ",", "bias", "=", "False", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.pointnet2.BasePointnet2.has_mlp_head": [[106, 109], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "has_mlp_head", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_has_mlp_head", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.pointnet2.BasePointnet2.output_nc": [[110, 113], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "output_nc", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_output_nc", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.pointnet2.BasePointnet2._set_input": [[114, 124], ["data.to.to.to", "len", "data.to.to.x.transpose().contiguous", "data.to.to.x.transpose"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "def", "_set_input", "(", "self", ",", "data", ")", ":", "\n", "        ", "\"\"\"Unpack input data from the dataloader and perform necessary pre-processing steps.\n        \"\"\"", "\n", "assert", "len", "(", "data", ".", "pos", ".", "shape", ")", "==", "3", "\n", "data", "=", "data", ".", "to", "(", "self", ".", "device", ")", "\n", "if", "data", ".", "x", "is", "not", "None", ":", "\n", "            ", "data", ".", "x", "=", "data", ".", "x", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "", "else", ":", "\n", "            ", "data", ".", "x", "=", "None", "\n", "", "self", ".", "input", "=", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.pointnet2.PointNet2Encoder.forward": [[127, 151], ["pointnet2.PointNet2Encoder._set_input", "range", "stack_down.append", "isinstance", "stack_down.append", "pointnet2.PointNet2Encoder.mlp", "len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.pointnet2.BasePointnet2._set_input", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["    ", "def", "forward", "(", "self", ",", "data", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Parameters:\n        -----------\n        data\n            A dictionary that contains the data itself and its metadata information. Should contain\n                x -- Features [B, N, C]\n                pos -- Points [B, N, 3]\n        \"\"\"", "\n", "self", ".", "_set_input", "(", "data", ")", "\n", "data", "=", "self", ".", "input", "\n", "stack_down", "=", "[", "data", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "down_modules", ")", "-", "1", ")", ":", "\n", "            ", "data", "=", "self", ".", "down_modules", "[", "i", "]", "(", "data", ")", "\n", "stack_down", ".", "append", "(", "data", ")", "\n", "", "data", "=", "self", ".", "down_modules", "[", "-", "1", "]", "(", "data", ")", "\n", "\n", "if", "not", "isinstance", "(", "self", ".", "inner_modules", "[", "0", "]", ",", "Identity", ")", ":", "\n", "            ", "stack_down", ".", "append", "(", "data", ")", "\n", "data", "=", "self", ".", "inner_modules", "[", "0", "]", "(", "data", ")", "\n", "\n", "", "if", "self", ".", "has_mlp_head", ":", "\n", "            ", "data", ".", "x", "=", "self", ".", "mlp", "(", "data", ".", "x", ")", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.pointnet2.PointNet2Unet.forward": [[154, 192], ["pointnet2.PointNet2Unet._set_input", "range", "pointnet2.PointNet2Unet._collect_sampling_ids", "range", "pointnet2.PointNet2Unet.items", "stack_down.append", "isinstance", "stack_down.append", "len", "setattr", "pointnet2.PointNet2Unet.mlp", "len", "stack_down.pop"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.pointnet2.BasePointnet2._set_input", "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_architectures.unet.UnwrappedUnetBasedModel._collect_sampling_ids", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["    ", "def", "forward", "(", "self", ",", "data", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\" This method does a forward on the Unet assuming symmetrical skip connections\n        Input --- D1 -- D2 -- I -- U1 -- U2 -- U3 -- output\n           |       |      |________|      |    |\n           |       |______________________|    |\n           |___________________________________|\n\n        Parameters:\n        -----------\n        data\n            A dictionary that contains the data itself and its metadata information. Should contain\n                x -- Features [B, N, C]\n                pos -- Points [B, N, 3]\n        \"\"\"", "\n", "self", ".", "_set_input", "(", "data", ")", "\n", "data", "=", "self", ".", "input", "\n", "stack_down", "=", "[", "data", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "down_modules", ")", "-", "1", ")", ":", "\n", "            ", "data", "=", "self", ".", "down_modules", "[", "i", "]", "(", "data", ")", "\n", "stack_down", ".", "append", "(", "data", ")", "\n", "", "data", "=", "self", ".", "down_modules", "[", "-", "1", "]", "(", "data", ")", "\n", "\n", "if", "not", "isinstance", "(", "self", ".", "inner_modules", "[", "0", "]", ",", "Identity", ")", ":", "\n", "            ", "stack_down", ".", "append", "(", "data", ")", "\n", "data", "=", "self", ".", "inner_modules", "[", "0", "]", "(", "data", ")", "\n", "\n", "", "sampling_ids", "=", "self", ".", "_collect_sampling_ids", "(", "stack_down", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "up_modules", ")", ")", ":", "\n", "            ", "data", "=", "self", ".", "up_modules", "[", "i", "]", "(", "(", "data", ",", "stack_down", ".", "pop", "(", ")", ")", ")", "\n", "\n", "", "for", "key", ",", "value", "in", "sampling_ids", ".", "items", "(", ")", ":", "\n", "            ", "setattr", "(", "data", ",", "key", ",", "value", ")", "\n", "\n", "", "if", "self", ".", "has_mlp_head", ":", "\n", "            ", "data", ".", "x", "=", "self", ".", "mlp", "(", "data", ".", "x", ")", "\n", "\n", "", "return", "data", "\n", "", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.pointnet2.PointNet2": [[22, 56], ["pointnet2.PointNet2Factory", "PointNet2Factory.build"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.modelfactory.ModelFactory.build"], ["def", "PointNet2", "(", "\n", "architecture", ":", "str", "=", "None", ",", "\n", "input_nc", ":", "int", "=", "None", ",", "\n", "num_layers", ":", "int", "=", "None", ",", "\n", "config", ":", "DictConfig", "=", "None", ",", "\n", "multiscale", "=", "False", ",", "\n", "*", "args", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "    ", "\"\"\" Create a PointNet2 backbone model based on the architecture proposed in\n    https://arxiv.org/abs/1706.02413\n\n    Parameters\n    ----------\n    architecture : str, optional\n        Architecture of the model, choose from unet, encoder and decoder\n    input_nc : int, optional\n        Number of channels for the input\n   output_nc : int, optional\n        If specified, then we add a fully connected head at the end of the network to provide the requested dimension\n    num_layers : int, optional\n        Depth of the network\n    config : DictConfig, optional\n        Custom config, overrides the num_layers and architecture parameters\n    \"\"\"", "\n", "factory", "=", "PointNet2Factory", "(", "\n", "architecture", "=", "architecture", ",", "\n", "num_layers", "=", "num_layers", ",", "\n", "input_nc", "=", "input_nc", ",", "\n", "multiscale", "=", "multiscale", ",", "\n", "config", "=", "config", ",", "\n", "**", "kwargs", "\n", ")", "\n", "return", "factory", ".", "build", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.utils.extract_output_nc": [[6, 20], ["model_config.get", "model_config.get", "model_config.get", "KNOWN_MODULES.keys", "ValueError"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.mock.MockDatasetConfig.keys"], ["\n", "\n", "def", "read_image_pose_pairs", "(", "\n", "image_dir", ",", "pose_dir", ",", "image_suffix", "=", "'_rgb.png'", ",", "\n", "pose_suffix", "=", "'_pose.json'", ",", "skip_names", "=", "None", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Search for all image-pose correspondences in the directories.\n    Return the list of image-pose pairs. Orphans are ignored.\n    \"\"\"", "\n", "# Search for images and poses", "\n", "image_names", "=", "sorted", "(", "[", "\n", "osp", ".", "basename", "(", "x", ")", ".", "replace", "(", "image_suffix", ",", "''", ")", "\n", "for", "x", "in", "glob", ".", "glob", "(", "osp", ".", "join", "(", "image_dir", ",", "'*'", "+", "image_suffix", ")", ")", "]", ")", "\n", "pose_names", "=", "sorted", "(", "[", "\n", "osp", ".", "basename", "(", "x", ")", ".", "replace", "(", "pose_suffix", ",", "''", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.PointCNN.modules.XConv.__init__": [[54, 100], ["super().__init__", "torch.nn.Sequential", "torch.nn.Sequential", "int", "torch.nn.Sequential", "modules.XConv.reset_parameters", "torch.nn.Linear", "torch.nn.ELU", "torch.nn.BatchNorm1d", "torch.nn.Linear", "torch.nn.ELU", "torch.nn.BatchNorm1d", "torch_geometric.nn.Reshape", "torch.nn.Linear", "torch.nn.ELU", "torch.nn.BatchNorm1d", "torch_geometric.nn.Reshape", "torch.nn.Conv1d", "torch.nn.ELU", "torch.nn.BatchNorm1d", "torch_geometric.nn.Reshape", "torch.nn.Conv1d", "torch.nn.BatchNorm1d", "torch_geometric.nn.Reshape", "math.ceil", "torch.nn.Conv1d", "torch_geometric.nn.Reshape", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.PointCNN.modules.XConv.reset_parameters"], ["def", "__init__", "(", "\n", "self", ",", "in_channels", ",", "out_channels", ",", "dim", ",", "kernel_size", ",", "hidden_channels", "=", "None", ",", "dilation", "=", "1", ",", "bias", "=", "True", ",", "**", "kwargs", ",", "\n", ")", ":", "\n", "        ", "super", "(", "XConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "if", "hidden_channels", "is", "None", ":", "\n", "            ", "hidden_channels", "=", "in_channels", "//", "4", "\n", "", "assert", "hidden_channels", ">", "0", "\n", "self", ".", "hidden_channels", "=", "hidden_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "dilation", "=", "dilation", "\n", "self", ".", "kwargs", "=", "kwargs", "\n", "\n", "C_in", ",", "C_delta", ",", "C_out", "=", "in_channels", ",", "hidden_channels", ",", "out_channels", "\n", "D", ",", "K", "=", "dim", ",", "kernel_size", "\n", "\n", "self", ".", "mlp1", "=", "S", "(", "\n", "L", "(", "dim", ",", "C_delta", ")", ",", "ELU", "(", ")", ",", "BN", "(", "C_delta", ")", ",", "L", "(", "C_delta", ",", "C_delta", ")", ",", "ELU", "(", ")", ",", "BN", "(", "C_delta", ")", ",", "Reshape", "(", "-", "1", ",", "K", ",", "C_delta", ")", ",", "\n", ")", "\n", "\n", "self", ".", "mlp2", "=", "S", "(", "\n", "L", "(", "D", "*", "K", ",", "K", "**", "2", ")", ",", "\n", "ELU", "(", ")", ",", "\n", "BN", "(", "K", "**", "2", ")", ",", "\n", "Reshape", "(", "-", "1", ",", "K", ",", "K", ")", ",", "\n", "Conv1d", "(", "K", ",", "K", "**", "2", ",", "K", ",", "groups", "=", "K", ")", ",", "\n", "ELU", "(", ")", ",", "\n", "BN", "(", "K", "**", "2", ")", ",", "\n", "Reshape", "(", "-", "1", ",", "K", ",", "K", ")", ",", "\n", "Conv1d", "(", "K", ",", "K", "**", "2", ",", "K", ",", "groups", "=", "K", ")", ",", "\n", "BN", "(", "K", "**", "2", ")", ",", "\n", "Reshape", "(", "-", "1", ",", "K", ",", "K", ")", ",", "\n", ")", "\n", "\n", "C_in", "=", "C_in", "+", "C_delta", "\n", "depth_multiplier", "=", "int", "(", "ceil", "(", "C_out", "/", "C_in", ")", ")", "\n", "self", ".", "conv", "=", "S", "(", "\n", "Conv1d", "(", "C_in", ",", "C_in", "*", "depth_multiplier", ",", "K", ",", "groups", "=", "C_in", ")", ",", "\n", "Reshape", "(", "-", "1", ",", "C_in", "*", "depth_multiplier", ")", ",", "\n", "L", "(", "C_in", "*", "depth_multiplier", ",", "C_out", ",", "bias", "=", "bias", ")", ",", "\n", ")", "\n", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.PointCNN.modules.XConv.reset_parameters": [[101, 105], ["torch_geometric.nn.inits.reset", "torch_geometric.nn.inits.reset", "torch_geometric.nn.inits.reset"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.classification_tracker.ClassificationTracker.reset", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.classification_tracker.ClassificationTracker.reset", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.classification_tracker.ClassificationTracker.reset"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "reset", "(", "self", ".", "mlp1", ")", "\n", "reset", "(", "self", ".", "mlp2", ")", "\n", "reset", "(", "self", ".", "conv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.PointCNN.modules.XConv.forward": [[106, 138], ["modules.XConv.mlp1", "torch.cat.transpose().contiguous", "torch.cat.view", "modules.XConv.mlp2", "transform_matrix.view.view.view", "torch.matmul", "x_transformed.view.view.view", "modules.XConv.conv", "posTo.size", "x[].view", "torch.cat", "relPos.view", "x[].view.unsqueeze", "torch.cat.transpose", "x[].view.dim"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.base_conv.message_passing.BaseResnetBlockDown.conv", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat"], ["", "def", "forward", "(", "self", ",", "x", ",", "pos", ",", "edge_index", ")", ":", "\n", "\n", "# posTo = the points that will be centers of convolutions", "\n", "# posFrom = points that have edges to the centers of convolutions", "\n", "# For a down conv, posFrom = pos, posTo = pos[idx]", "\n", "# For an up conv, posFrom = pos, posTo = pos_skip", "\n", "        ", "posFrom", ",", "posTo", "=", "pos", "\n", "\n", "(", "N", ",", "D", ")", ",", "K", "=", "posTo", ".", "size", "(", ")", ",", "self", ".", "kernel_size", "\n", "\n", "idxFrom", ",", "idxTo", "=", "edge_index", "\n", "\n", "relPos", "=", "posTo", "[", "idxTo", "]", "-", "posFrom", "[", "idxFrom", "]", "\n", "\n", "x_star", "=", "self", ".", "mlp1", "(", "relPos", ")", "\n", "# x_star = self.mlp1(relPos.view(len(row), D))", "\n", "if", "x", "is", "not", "None", ":", "\n", "            ", "x", "=", "x", ".", "unsqueeze", "(", "-", "1", ")", "if", "x", ".", "dim", "(", ")", "==", "1", "else", "x", "\n", "x", "=", "x", "[", "idxFrom", "]", ".", "view", "(", "N", ",", "K", ",", "self", ".", "in_channels", ")", "\n", "x_star", "=", "torch", ".", "cat", "(", "[", "x_star", ",", "x", "]", ",", "dim", "=", "-", "1", ")", "\n", "", "x_star", "=", "x_star", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "x_star", "=", "x_star", ".", "view", "(", "N", ",", "self", ".", "in_channels", "+", "self", ".", "hidden_channels", ",", "K", ",", "1", ")", "\n", "\n", "transform_matrix", "=", "self", ".", "mlp2", "(", "relPos", ".", "view", "(", "N", ",", "K", "*", "D", ")", ")", "\n", "transform_matrix", "=", "transform_matrix", ".", "view", "(", "N", ",", "1", ",", "K", ",", "K", ")", "\n", "\n", "x_transformed", "=", "torch", ".", "matmul", "(", "transform_matrix", ",", "x_star", ")", "\n", "x_transformed", "=", "x_transformed", ".", "view", "(", "N", ",", "-", "1", ",", "K", ")", "\n", "\n", "out", "=", "self", ".", "conv", "(", "x_transformed", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.PointCNN.modules.XConv.__repr__": [[139, 141], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"{}({}, {})\"", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "in_channels", ",", "self", ".", "out_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.PointCNN.modules.PointCNNConvDown.__init__": [[144, 150], ["BaseConvolutionDown.__init__", "modules.XConv", "torch_points3d.core.spatial_ops.FPSSampler", "torch_points3d.core.spatial_ops.DilatedKNNNeighbourFinder"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "inN", "=", "None", ",", "outN", "=", "None", ",", "K", "=", "None", ",", "D", "=", "None", ",", "C1", "=", "None", ",", "C2", "=", "None", ",", "hidden_channel", "=", "None", ",", "*", "args", ",", "**", "kwargs", ",", "\n", ")", ":", "\n", "        ", "super", "(", "PointCNNConvDown", ",", "self", ")", ".", "__init__", "(", "FPSSampler", "(", "outN", "/", "inN", ")", ",", "DilatedKNNNeighbourFinder", "(", "K", ",", "D", ")", ")", "\n", "\n", "self", ".", "_conv", "=", "XConv", "(", "C1", ",", "C2", ",", "3", ",", "K", ",", "hidden_channels", "=", "hidden_channel", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.PointCNN.modules.PointCNNConvDown.conv": [[151, 153], ["modules.PointCNNConvDown._conv.forward"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.forward"], ["", "def", "conv", "(", "self", ",", "x", ",", "pos", ",", "edge_index", ",", "batch", ")", ":", "\n", "        ", "return", "self", ".", "_conv", ".", "forward", "(", "x", ",", "pos", ",", "edge_index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.PointCNN.modules.PointCNNConvUp.__init__": [[156, 160], ["BaseConvolutionUp.__init__", "modules.XConv", "torch_points3d.core.spatial_ops.DilatedKNNNeighbourFinder"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "K", "=", "None", ",", "D", "=", "None", ",", "C1", "=", "None", ",", "C2", "=", "None", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "PointCNNConvUp", ",", "self", ")", ".", "__init__", "(", "DilatedKNNNeighbourFinder", "(", "K", ",", "D", ")", ")", "\n", "\n", "self", ".", "_conv", "=", "XConv", "(", "C1", ",", "C2", ",", "3", ",", "K", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.PointCNN.modules.PointCNNConvUp.conv": [[161, 163], ["modules.PointCNNConvUp._conv.forward"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.forward"], ["", "def", "conv", "(", "self", ",", "x", ",", "pos", ",", "pos_skip", ",", "batch", ",", "batch_skip", ",", "edge_index", ")", ":", "\n", "        ", "return", "self", ".", "_conv", ".", "forward", "(", "x", ",", "(", "pos", ",", "pos_skip", ")", ",", "edge_index", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.VoteNet.voting_module.VotingModule.__init__": [[14, 42], ["torch.Module.__init__", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "vote_factor", ",", "seed_feature_dim", ",", "conv_type", "=", "\"DENSE\"", ")", ":", "\n", "        ", "\"\"\" Votes generation from seed point features.\n\n        Args:\n            vote_facotr: int\n                number of votes generated from each seed point\n            seed_feature_dim: int\n                number of channels of seed point features\n            vote_feature_dim: int\n                number of channels of vote features\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "vote_factor", "=", "vote_factor", "\n", "self", ".", "in_dim", "=", "seed_feature_dim", "\n", "self", ".", "out_dim", "=", "self", ".", "in_dim", "# due to residual feature, in_dim has to be == out_dim", "\n", "self", ".", "_conv_type", "=", "conv_type", "\n", "if", "conv_type", "==", "\"DENSE\"", ":", "\n", "            ", "self", ".", "conv1", "=", "torch", ".", "nn", ".", "Conv1d", "(", "self", ".", "in_dim", ",", "self", ".", "in_dim", ",", "1", ")", "\n", "self", ".", "conv2", "=", "torch", ".", "nn", ".", "Conv1d", "(", "self", ".", "in_dim", ",", "self", ".", "in_dim", ",", "1", ")", "\n", "self", ".", "conv3", "=", "torch", ".", "nn", ".", "Conv1d", "(", "self", ".", "in_dim", ",", "(", "3", "+", "self", ".", "out_dim", ")", "*", "self", ".", "vote_factor", ",", "1", ")", "\n", "self", ".", "bn1", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "self", ".", "in_dim", ")", "\n", "self", ".", "bn2", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "self", ".", "in_dim", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv1", "=", "torch", ".", "nn", ".", "Linear", "(", "self", ".", "in_dim", ",", "self", ".", "in_dim", ")", "\n", "self", ".", "conv2", "=", "torch", ".", "nn", ".", "Linear", "(", "self", ".", "in_dim", ",", "self", ".", "in_dim", ")", "\n", "self", ".", "conv3", "=", "torch", ".", "nn", ".", "Linear", "(", "self", ".", "in_dim", ",", "(", "3", "+", "self", ".", "out_dim", ")", "*", "self", ".", "vote_factor", ")", "\n", "self", ".", "bn1", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "self", ".", "in_dim", ")", "\n", "self", ".", "bn2", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "self", ".", "in_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.VoteNet.voting_module.VotingModule.forward": [[43, 83], ["Exception", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "voting_module.VotingModule.conv3", "voting_module.VotingModule.transpose().view", "vote_pos.contiguous().view.contiguous().view.contiguous().view", "vote_x.transpose().contiguous.transpose().contiguous.contiguous().view", "vote_x.transpose().contiguous.transpose().contiguous.transpose().contiguous", "torch_geometric.data.Data", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "voting_module.VotingModule.conv3", "torch_geometric.data.Data", "data.pos.dim", "data.pos.dim", "voting_module.VotingModule.bn1", "voting_module.VotingModule.bn2", "data.pos.unsqueeze", "offset.contiguous", "data.x.transpose().unsqueeze().contiguous", "res_x.contiguous", "voting_module.VotingModule.bn1", "voting_module.VotingModule.bn2", "voting_module.VotingModule.conv1", "voting_module.VotingModule.conv2", "voting_module.VotingModule.transpose", "vote_pos.contiguous().view.contiguous().view.contiguous", "vote_x.transpose().contiguous.transpose().contiguous.contiguous", "vote_x.transpose().contiguous.transpose().contiguous.transpose", "voting_module.VotingModule.conv1", "voting_module.VotingModule.conv2", "data.x.transpose().unsqueeze", "data.x.transpose"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "data", ")", ":", "\n", "        ", "\"\"\" Votes for centres using a PN++ like architecture\n        Returns\n        -------\n        data:\n            - pos: position of the vote (centre of the box)\n            - x: feature of the vote (original feature + processed feature)\n            - seed_pos: position of the original point\n        \"\"\"", "\n", "if", "3", "<", "data", ".", "pos", ".", "dim", "(", ")", "and", "data", ".", "pos", ".", "dim", "(", ")", "<=", "1", ":", "\n", "            ", "raise", "Exception", "(", "\"data.pos doesn t have the correct dimension. Should be either 2 or 3\"", ")", "\n", "\n", "", "if", "self", ".", "_conv_type", "==", "\"DENSE\"", ":", "\n", "            ", "batch_size", "=", "data", ".", "pos", ".", "shape", "[", "0", "]", "\n", "num_points", "=", "data", ".", "pos", ".", "shape", "[", "1", "]", "\n", "num_votes", "=", "num_points", "*", "self", ".", "vote_factor", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "data", ".", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "# (batch_size, (3+out_dim)*vote_factor, num_seed)", "\n", "\n", "x", "=", "x", ".", "transpose", "(", "2", ",", "1", ")", ".", "view", "(", "batch_size", ",", "num_points", ",", "self", ".", "vote_factor", ",", "3", "+", "self", ".", "out_dim", ")", "\n", "offset", "=", "x", "[", ":", ",", ":", ",", ":", ",", "0", ":", "3", "]", "\n", "vote_pos", "=", "data", ".", "pos", ".", "unsqueeze", "(", "2", ")", "+", "offset", ".", "contiguous", "(", ")", "\n", "vote_pos", "=", "vote_pos", ".", "contiguous", "(", ")", ".", "view", "(", "batch_size", ",", "num_votes", ",", "3", ")", "\n", "\n", "res_x", "=", "x", "[", ":", ",", ":", ",", ":", ",", "3", ":", "]", "# (batch_size, num_seed, vote_factor, out_dim)", "\n", "vote_x", "=", "data", ".", "x", ".", "transpose", "(", "2", ",", "1", ")", ".", "unsqueeze", "(", "2", ")", ".", "contiguous", "(", ")", "+", "res_x", ".", "contiguous", "(", ")", "\n", "vote_x", "=", "vote_x", ".", "contiguous", "(", ")", ".", "view", "(", "batch_size", ",", "num_votes", ",", "self", ".", "out_dim", ")", "\n", "vote_x", "=", "vote_x", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "data_out", "=", "Data", "(", "pos", "=", "vote_pos", ",", "x", "=", "vote_x", ",", "seed_pos", "=", "data", ".", "pos", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "data", ".", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "offset", "=", "x", "[", ":", ",", "0", ":", "3", "]", "\n", "vote_pos", "=", "data", ".", "pos", "+", "offset", "\n", "res_x", "=", "x", "[", ":", ",", "3", ":", "]", "\n", "vote_x", "=", "data", ".", "x", "+", "res_x", "\n", "data_out", "=", "Data", "(", "pos", "=", "vote_pos", ",", "x", "=", "vote_x", ",", "seed_pos", "=", "data", ".", "pos", ",", "batch", "=", "data", ".", "batch", ")", "\n", "", "return", "data_out", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.VoteNet.votenet_results.VoteNetResults.from_logits": [[12, 110], ["len", "cls", "features.transpose", "x_transposed[].view", "features.dim", "len", "mean_size_arr.unsqueeze().unsqueeze", "mean_size_arr.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["    ", "@", "classmethod", "\n", "def", "from_logits", "(", "\n", "cls", ",", "\n", "seed_inds", ":", "torch", ".", "Tensor", ",", "\n", "seed_votes", ":", "torch", ".", "Tensor", ",", "\n", "seed_pos", ":", "torch", ".", "Tensor", ",", "\n", "sampled_votes", ":", "torch", ".", "Tensor", ",", "\n", "features", ":", "torch", ".", "Tensor", ",", "\n", "num_classes", ":", "int", ",", "\n", "num_heading_bin", ":", "int", ",", "\n", "mean_size_arr", ":", "torch", ".", "Tensor", ",", "\n", ")", ":", "\n", "        ", "\"\"\" Takes the sampled votes and the output features from the proposal network to generate a structured data object with\n        all necessary info for loss and metric computations\n\n        Parameters\n        ----------\n        seed_inds: torch.tensor\n            Index of the points that were selected as seeds\n        seed_votes: torch.tensor\n            All seed votes before sampling and aggregation\n        seed_pos: torch.Tensor\n            All seed points\n        sampled_votes: torch.tensor\n            Votes selected as support points for the proposal network\n        features: torch.Tensor\n            Output features of the proposal network\n        num_classes: int\n            Number of classes to predict\n        num_heading_bin: int\n            Number of bins for heading computations\n        mean_size_arr: torch.Tensor\n            Average size of the box per class in each direction\n\n        Returns\n        -------\n        data:\n            - seed_inds\n            - seed_votes\n            - seed_pos\n            - sampled_votes - proposed centre of the box before aggregation [B,N,3]\n            - objectness_scores - [B,N,2]\n            - center - corrected centre of the box [B,N,3]\n            - heading_scores - [B, N, num_heading_bin]\n            - heading_residuals_normalized - between -1 and 1 [B, N, num_heading_bin]\n            - heading_residual - between -PI and PI [B, N, num_heading_bin]\n            - size_scores - [B,N,num_size_cluster]\n            - size_residuals_normalized - [B,N,num_size_cluster, 3]\n            - size_residuals - [B,N,num_size_cluster, 3]\n            - sem_cls_scores - [B,N,num_classes]\n        \"\"\"", "\n", "num_size_cluster", "=", "len", "(", "mean_size_arr", ")", "\n", "assert", "features", ".", "dim", "(", ")", "==", "3", "\n", "assert", "features", ".", "shape", "[", "1", "]", "==", "2", "+", "3", "+", "num_heading_bin", "*", "2", "+", "num_size_cluster", "*", "4", "+", "num_classes", "\n", "\n", "data", "=", "cls", "(", "sampled_votes", "=", "sampled_votes", ",", "seed_inds", "=", "seed_inds", ",", "seed_votes", "=", "seed_votes", ",", "seed_pos", "=", "seed_pos", ")", "\n", "data", ".", "has_class", "=", "num_classes", "!=", "0", "\n", "\n", "x_transposed", "=", "features", ".", "transpose", "(", "2", ",", "1", ")", "# (batch_size, num_proposal, features)", "\n", "batch_size", "=", "x_transposed", ".", "shape", "[", "0", "]", "\n", "num_proposal", "=", "x_transposed", ".", "shape", "[", "1", "]", "\n", "\n", "objectness_scores", "=", "x_transposed", "[", ":", ",", ":", ",", "0", ":", "2", "]", "\n", "data", ".", "objectness_scores", "=", "objectness_scores", "\n", "\n", "base_xyz", "=", "sampled_votes", "# (batch_size, num_proposal, 3)", "\n", "center", "=", "base_xyz", "+", "x_transposed", "[", ":", ",", ":", ",", "2", ":", "5", "]", "# (batch_size, num_proposal, 3)", "\n", "data", ".", "center", "=", "center", "\n", "\n", "heading_scores", "=", "x_transposed", "[", ":", ",", ":", ",", "5", ":", "5", "+", "num_heading_bin", "]", "\n", "heading_residuals_normalized", "=", "x_transposed", "[", ":", ",", ":", ",", "5", "+", "num_heading_bin", ":", "5", "+", "num_heading_bin", "*", "2", "]", "\n", "data", ".", "heading_scores", "=", "heading_scores", "# Bxnum_proposalxnum_heading_bin", "\n", "data", ".", "heading_residuals_normalized", "=", "(", "\n", "heading_residuals_normalized", "# Bxnum_proposalxnum_heading_bin (should be -1 to 1) TODO check that!", "\n", ")", "\n", "data", ".", "heading_residuals", "=", "heading_residuals_normalized", "*", "(", "\n", "np", ".", "pi", "/", "num_heading_bin", "\n", ")", "# Bxnum_proposalxnum_heading_bin", "\n", "\n", "size_scores", "=", "x_transposed", "[", ":", ",", ":", ",", "5", "+", "num_heading_bin", "*", "2", ":", "5", "+", "num_heading_bin", "*", "2", "+", "num_size_cluster", "]", "\n", "size_residuals_normalized", "=", "x_transposed", "[", "\n", ":", ",", ":", ",", "5", "+", "num_heading_bin", "*", "2", "+", "num_size_cluster", ":", "5", "+", "num_heading_bin", "*", "2", "+", "num_size_cluster", "*", "4", "\n", "]", ".", "view", "(", "\n", "[", "batch_size", ",", "num_proposal", ",", "num_size_cluster", ",", "3", "]", "\n", ")", "# Bxnum_proposalxnum_size_clusterx3", "\n", "data", ".", "size_scores", "=", "size_scores", "\n", "data", ".", "size_residuals_normalized", "=", "size_residuals_normalized", "\n", "if", "len", "(", "mean_size_arr", ")", ">", "0", ":", "\n", "            ", "data", ".", "size_residuals", "=", "size_residuals_normalized", "*", "mean_size_arr", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "", "if", "num_classes", ":", "\n", "            ", "data", ".", "sem_cls_scores", "=", "x_transposed", "[", "\n", ":", ",", ":", ",", "5", "+", "num_heading_bin", "*", "2", "+", "num_size_cluster", "*", "4", ":", "\n", "]", "# Bxnum_proposalx10", "\n", "", "else", ":", "\n", "            ", "data", ".", "sem_cls_scores", "=", "None", "\n", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.VoteNet.votenet_results.VoteNetResults.assign_objects": [[111, 146], ["torch_points3d.core.losses.huber_loss.nn_distance", "torch.sqrt", "torch.gather", "torch.zeros().to", "torch.zeros().to", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.huber_loss.nn_distance", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.gathering.gather", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to"], ["", "def", "assign_objects", "(", "\n", "self", ",", "gt_center", ":", "torch", ".", "Tensor", ",", "gt_object_mask", ":", "torch", ".", "Tensor", ",", "near_threshold", ":", "float", ",", "far_threshold", ":", "float", "\n", ")", ":", "\n", "        ", "\"\"\" Assigns an object to each prediction based on the closest ground truth\n        objectness_label: 1 if pred object center is within NEAR_THRESHOLD of any GT object\n        objectness_mask: 0 if pred object center is in gray zone (DONOTCARE), 1 otherwise\n        object_assignment: Tensor with long int within [0,num_gt_object-1]\n\n        Parameters\n        ----------\n        gt_center : torch.Tensor\n            center of ground truth objects [B,K,3]\n        near_threshold: float\n        far_threshold: float\n        \"\"\"", "\n", "\n", "B", "=", "gt_center", ".", "shape", "[", "0", "]", "\n", "K", "=", "self", ".", "sampled_votes", ".", "shape", "[", "1", "]", "\n", "gt_center", ".", "shape", "[", "1", "]", "\n", "dist1", ",", "ind1", ",", "_", ",", "_", "=", "nn_distance", "(", "\n", "self", ".", "sampled_votes", ",", "gt_center", "\n", ")", "# dist1: BxK, dist2: BxK2 TODO Optimise this nn_distance function, does a lot of useless stuff", "\n", "# TODO Why computing the closest GT using the vote instead of the corrected center", "\n", "\n", "euclidean_dist1", "=", "torch", ".", "sqrt", "(", "dist1", "+", "1e-6", ")", "\n", "gt_mask", "=", "torch", ".", "gather", "(", "gt_object_mask", ",", "1", ",", "ind1", ")", "\n", "self", ".", "objectness_label", "=", "torch", ".", "zeros", "(", "(", "B", ",", "K", ")", ",", "dtype", "=", "torch", ".", "long", ")", ".", "to", "(", "self", ".", "sampled_votes", ".", "device", ")", "\n", "self", ".", "objectness_mask", "=", "torch", ".", "zeros", "(", "(", "B", ",", "K", ")", ")", ".", "to", "(", "self", ".", "sampled_votes", ".", "device", ")", "\n", "self", ".", "objectness_label", "[", "euclidean_dist1", "<", "near_threshold", "]", "=", "1", "\n", "self", ".", "objectness_label", "*=", "gt_mask", "\n", "self", ".", "objectness_mask", "[", "euclidean_dist1", "<", "near_threshold", "]", "=", "1", "\n", "self", ".", "objectness_mask", "[", "euclidean_dist1", ">", "far_threshold", "]", "=", "1", "\n", "self", ".", "objectness_mask", "*=", "gt_mask", "\n", "\n", "self", ".", "object_assignment", "=", "ind1", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.VoteNet.votenet_results.VoteNetResults.batch_size": [[147, 150], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "batch_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "center", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.VoteNet.votenet_results.VoteNetResults.num_proposal": [[151, 154], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_proposal", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "center", ".", "shape", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.VoteNet.votenet_results.VoteNetResults.get_boxes": [[155, 230], ["torch.argmax", "torch.gather", "torch.argmax", "torch.gather().squeeze", "torch.zeros", "range", "torch.argmax", "torch.softmax", "range", "torch.argmax.unsqueeze", "range", "torch.nn.functional.softmax", "votenet_results.VoteNetResults._nms_mask", "numpy.ones", "range", "detected_boxes.append", "torch.gather", "dataset.class2angle", "dataset.class2size", "torch_points3d.utils.box_utils.box_corners_from_param", "len", "torch.argmax.unsqueeze().unsqueeze().repeat", "votenet_results.VoteNetResults.center[].cpu", "range", "batch_detection.append", "torch.argmax.unsqueeze().unsqueeze", "batch_detection.append", "torch_points3d.datasets.object_detection.box_data.BoxData", "torch_points3d.datasets.object_detection.box_data.BoxData", "torch.argmax.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.gathering.gather", "home.repos.pwc.inspect_result.drprojects_deepviewagg.VoteNet.votenet_results.VoteNetResults._nms_mask", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.gathering.gather", "home.repos.pwc.inspect_result.drprojects_deepviewagg.object_detection.scannet.ScannetDataset.class2angle", "home.repos.pwc.inspect_result.drprojects_deepviewagg.object_detection.scannet.ScannetDataset.class2size", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.box_utils.box_corners_from_param", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.csr.CSRData.cpu", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append"], ["", "def", "get_boxes", "(", "\n", "self", ",", "dataset", ",", "apply_nms", "=", "False", ",", "objectness_threshold", "=", "0.05", ",", "duplicate_boxes", "=", "False", "\n", ")", "->", "List", "[", "List", "[", "BoxData", "]", "]", ":", "\n", "        ", "\"\"\" Generates boxes from predictions\n\n        Parameters\n        ----------\n        dataset :\n            Must provide a class2size method and a class2angle method that return the angle and size\n            for a given object class and residual value\n        apply_nms: bool\n            If True then we apply non max suppression before returning the boxes\n        duplicate_boxes: bool\n            If True then we duplicate predicted boxes accross all classes. Else we assign the box to the\n            most likely class\n\n        Returns\n        -------\n        List[List[BoxData]] contains the list of predicted boxes for each batch\n        \"\"\"", "\n", "\n", "# Size and Heading prediciton", "\n", "pred_heading_class", "=", "torch", ".", "argmax", "(", "self", ".", "heading_scores", ",", "-", "1", ")", "# B,num_proposal", "\n", "pred_heading_residual", "=", "torch", ".", "gather", "(", "\n", "self", ".", "heading_residuals", ",", "2", ",", "pred_heading_class", ".", "unsqueeze", "(", "-", "1", ")", "\n", ")", "# B,num_proposal,1", "\n", "pred_size_class", "=", "torch", ".", "argmax", "(", "self", ".", "size_scores", ",", "-", "1", ")", "# B,num_proposal", "\n", "pred_size_residual", "=", "torch", ".", "gather", "(", "\n", "self", ".", "size_residuals", ",", "2", ",", "pred_size_class", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "1", ",", "3", ")", "\n", ")", ".", "squeeze", "(", "\n", "2", "\n", ")", "# B,num_proposal,3", "\n", "\n", "# Generate box corners", "\n", "pred_corners_3d", "=", "torch", ".", "zeros", "(", "(", "self", ".", "batch_size", ",", "self", ".", "num_proposal", ",", "8", ",", "3", ")", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "batch_size", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "self", ".", "num_proposal", ")", ":", "\n", "                ", "heading_angle", "=", "dataset", ".", "class2angle", "(", "pred_heading_class", "[", "i", ",", "j", "]", ",", "pred_heading_residual", "[", "i", ",", "j", "]", ")", "\n", "box_size", "=", "dataset", ".", "class2size", "(", "pred_size_class", "[", "i", ",", "j", "]", ",", "pred_size_residual", "[", "i", ",", "j", "]", ")", "\n", "corners_3d", "=", "box_corners_from_param", "(", "box_size", ",", "heading_angle", ",", "self", ".", "center", "[", "i", ",", "j", ",", ":", "]", ".", "cpu", "(", ")", ")", "\n", "pred_corners_3d", "[", "i", ",", "j", "]", "=", "corners_3d", "\n", "\n", "# Objectness and class", "\n", "", "", "pred_obj", "=", "torch", ".", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "objectness_scores", ",", "-", "1", ")", "[", ":", ",", ":", ",", "1", "]", "# B,num_proposal", "\n", "pred_sem_cls", "=", "torch", ".", "argmax", "(", "self", ".", "sem_cls_scores", ",", "-", "1", ")", "# B,num_proposal", "\n", "sem_cls_proba", "=", "torch", ".", "softmax", "(", "self", ".", "sem_cls_scores", ",", "-", "1", ")", "\n", "\n", "# Apply nms if required", "\n", "if", "apply_nms", ":", "\n", "            ", "mask", "=", "self", ".", "_nms_mask", "(", "pred_corners_3d", ",", "pred_obj", ",", "pred_sem_cls", ")", "\n", "", "else", ":", "\n", "            ", "mask", "=", "np", ".", "ones", "(", "(", "self", ".", "batch_size", ",", "self", ".", "num_proposal", ")", ",", "dtype", "=", "np", ".", "bool", ")", "# type: ignore", "\n", "\n", "", "detected_boxes", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "batch_size", ")", ":", "\n", "            ", "corners", "=", "pred_corners_3d", "[", "i", ",", "mask", "[", "i", "]", "]", "\n", "objectness", "=", "pred_obj", "[", "i", ",", "mask", "[", "i", "]", "]", "\n", "sem_cls_scores", "=", "sem_cls_proba", "[", "i", ",", "mask", "[", "i", "]", "]", "\n", "clsname", "=", "pred_sem_cls", "[", "i", ",", "mask", "[", "i", "]", "]", "\n", "\n", "# Build box data for each detected object and add it to the list", "\n", "batch_detection", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "len", "(", "corners", ")", ")", ":", "\n", "                ", "if", "objectness", "[", "j", "]", ">", "objectness_threshold", ":", "\n", "                    ", "if", "duplicate_boxes", "and", "self", ".", "has_class", ":", "\n", "                        ", "for", "classname", "in", "range", "(", "sem_cls_proba", ".", "shape", "[", "-", "1", "]", ")", ":", "\n", "                            ", "batch_detection", ".", "append", "(", "\n", "BoxData", "(", "classname", ",", "corners", "[", "j", "]", ",", "score", "=", "objectness", "[", "j", "]", "*", "sem_cls_scores", "[", "j", ",", "classname", "]", ")", "\n", ")", "\n", "", "", "else", ":", "\n", "                        ", "batch_detection", ".", "append", "(", "BoxData", "(", "clsname", "[", "j", "]", ",", "corners", "[", "j", "]", ",", "score", "=", "objectness", "[", "j", "]", ")", ")", "\n", "\n", "", "", "", "detected_boxes", ".", "append", "(", "batch_detection", ")", "\n", "\n", "", "return", "detected_boxes", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.VoteNet.votenet_results.VoteNetResults._nms_mask": [[231, 256], ["torch.zeros", "boxes_3d.cpu().numpy.cpu().numpy.cpu().numpy", "numpy.zeros", "range", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch_points3d.utils.box_utils.nms_samecls", "boxes_3d.cpu().numpy.cpu().numpy.cpu"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.box_utils.nms_samecls", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.csr.CSRData.cpu"], ["", "def", "_nms_mask", "(", "self", ",", "pred_corners_3d", ",", "objectness", ",", "pred_sem_cls", ")", ":", "\n", "        ", "\"\"\"\n        Parameters\n        ----------\n        pred_corners_3d : [B, num_proposal, 8, 3]\n            box corners\n        objectness: [B, num_proposal]\n            objectness score\n        pred_sem_cls: [B, num_proposal]\n            Predicted semantic class\n        \"\"\"", "\n", "boxes_3d", "=", "torch", ".", "zeros", "(", "(", "self", ".", "batch_size", ",", "self", ".", "num_proposal", ",", "6", ")", ")", "# [xmin, ymin, zmin, xmax, ymax, zmax]", "\n", "boxes_3d", "[", ":", ",", ":", ",", "0", "]", "=", "torch", ".", "min", "(", "pred_corners_3d", "[", ":", ",", ":", ",", ":", ",", "0", "]", ",", "dim", "=", "2", ")", "[", "0", "]", "\n", "boxes_3d", "[", ":", ",", ":", ",", "1", "]", "=", "torch", ".", "min", "(", "pred_corners_3d", "[", ":", ",", ":", ",", ":", ",", "1", "]", ",", "dim", "=", "2", ")", "[", "0", "]", "\n", "boxes_3d", "[", ":", ",", ":", ",", "2", "]", "=", "torch", ".", "min", "(", "pred_corners_3d", "[", ":", ",", ":", ",", ":", ",", "2", "]", ",", "dim", "=", "2", ")", "[", "0", "]", "\n", "boxes_3d", "[", ":", ",", ":", ",", "3", "]", "=", "torch", ".", "max", "(", "pred_corners_3d", "[", ":", ",", ":", ",", ":", ",", "0", "]", ",", "dim", "=", "2", ")", "[", "0", "]", "\n", "boxes_3d", "[", ":", ",", ":", ",", "4", "]", "=", "torch", ".", "max", "(", "pred_corners_3d", "[", ":", ",", ":", ",", ":", ",", "1", "]", ",", "dim", "=", "2", ")", "[", "0", "]", "\n", "boxes_3d", "[", ":", ",", ":", ",", "5", "]", "=", "torch", ".", "max", "(", "pred_corners_3d", "[", ":", ",", ":", ",", ":", ",", "2", "]", ",", "dim", "=", "2", ")", "[", "0", "]", "\n", "\n", "boxes_3d", "=", "boxes_3d", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "mask", "=", "np", ".", "zeros", "(", "(", "self", ".", "batch_size", ",", "self", ".", "num_proposal", ")", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "for", "b", "in", "range", "(", "self", ".", "batch_size", ")", ":", "\n", "            ", "pick", "=", "nms_samecls", "(", "boxes_3d", "[", "b", "]", ",", "pred_sem_cls", "[", "b", "]", ",", "objectness", "[", "b", "]", ",", "overlap_threshold", "=", "0.25", ")", "\n", "mask", "[", "b", ",", "pick", "]", "=", "True", "\n", "", "return", "mask", "\n", "", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.VoteNet.dense_samplers.RandomSamplerToDense.sample": [[14, 47], ["torch.randint().to", "torch.gather", "torch.gather", "range", "torch.stack", "torch.stack().permute", "torch.randint.unsqueeze().repeat", "torch.randint.unsqueeze().repeat", "torch.randint", "pos.append", "x.append", "idx_out.append", "torch.cat", "torch.randint", "torch.stack", "torch.randint.unsqueeze", "torch.randint.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.gathering.gather", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.gathering.gather", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat"], ["def", "sample", "(", "self", ",", "data", ",", "num_batches", ",", "conv_type", ")", ":", "\n", "        ", "if", "conv_type", "==", "\"DENSE\"", ":", "\n", "            ", "assert", "(", "\n", "self", ".", "_num_to_sample", "<=", "data", ".", "pos", ".", "shape", "[", "1", "]", "\n", ")", ",", "\"self._num_to_sample: {} should be smaller than num_pos: {}\"", ".", "format", "(", "\n", "self", ".", "_num_to_sample", ",", "data", ".", "pos", ".", "shape", "[", "1", "]", "\n", ")", "\n", "idx", "=", "torch", ".", "randint", "(", "0", ",", "data", ".", "pos", ".", "shape", "[", "1", "]", ",", "(", "data", ".", "pos", ".", "shape", "[", "0", "]", ",", "self", ".", "_num_to_sample", ",", ")", ")", ".", "to", "(", "data", ".", "pos", ".", "device", ")", "\n", "data", ".", "pos", "=", "torch", ".", "gather", "(", "data", ".", "pos", ",", "1", ",", "idx", ".", "unsqueeze", "(", "-", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "data", ".", "pos", ".", "shape", "[", "-", "1", "]", ")", ")", "\n", "data", ".", "x", "=", "torch", ".", "gather", "(", "data", ".", "x", ",", "2", ",", "idx", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "data", ".", "x", ".", "shape", "[", "1", "]", ",", "1", ")", ")", "\n", "return", "data", ",", "idx", "\n", "", "else", ":", "\n", "            ", "pos", "=", "[", "]", "\n", "x", "=", "[", "]", "\n", "idx_out", "=", "[", "]", "\n", "num_points", "=", "0", "\n", "for", "batch_idx", "in", "range", "(", "num_batches", ")", ":", "\n", "                ", "batch_mask", "=", "data", ".", "batch", "==", "batch_idx", "\n", "pos_masked", "=", "data", ".", "pos", "[", "batch_mask", "]", "\n", "x_masked", "=", "data", ".", "x", "[", "batch_mask", "]", "\n", "assert", "(", "\n", "self", ".", "_num_to_sample", "<=", "pos_masked", ".", "shape", "[", "0", "]", "\n", ")", ",", "\"self._num_to_sample: {} should be smaller than num_pos: {}\"", ".", "format", "(", "\n", "self", ".", "_num_to_sample", ",", "pos_masked", ".", "shape", "[", "0", "]", "\n", ")", "\n", "idx", "=", "torch", ".", "randint", "(", "0", ",", "pos_masked", ".", "shape", "[", "0", "]", ",", "(", "self", ".", "_num_to_sample", ",", ")", ")", "\n", "pos", ".", "append", "(", "pos_masked", "[", "idx", "]", ")", "\n", "x", ".", "append", "(", "x_masked", "[", "idx", "]", ")", "\n", "idx_out", ".", "append", "(", "idx", "+", "num_points", ")", "\n", "num_points", "+=", "pos_masked", ".", "shape", "[", "0", "]", "\n", "", "data", ".", "pos", "=", "torch", ".", "stack", "(", "pos", ")", "\n", "data", ".", "x", "=", "torch", ".", "stack", "(", "x", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "return", "data", ",", "torch", ".", "cat", "(", "idx_out", ",", "dim", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.VoteNet.dense_samplers.FPSSamplerToDense.sample": [[56, 109], ["torch.zeros().to().long", "range", "torch.stack", "torch.gather", "torch.gather", "range", "min", "enumerate", "torch_geometric.data.Data", "fps", "torch.stack.append", "torch.stack.unsqueeze().repeat", "torch.stack.unsqueeze().repeat", "torch_geometric.data.Data", "torch.cat", "torch.zeros().to", "torch.gather.append", "torch.gather.append", "torch.arange().to", "torch.stack.append", "torch.zeros().to().long", "fps", "torch.gather.append", "torch.gather.append", "torch.stack.append", "len", "len", "torch.stack", "torch.stack().permute", "dense_samplers.FPSSamplerToDense._get_ratio_to_sample", "torch.stack.unsqueeze", "torch.stack.unsqueeze", "torch.zeros", "torch.arange", "torch.zeros().to", "dense_samplers.FPSSamplerToDense._get_ratio_to_sample", "torch.stack", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.gathering.gather", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.gathering.gather", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.spatial_ops.sampling.BaseSampler._get_ratio_to_sample", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.spatial_ops.sampling.BaseSampler._get_ratio_to_sample"], ["def", "sample", "(", "self", ",", "data", ",", "num_batches", ",", "conv_type", ")", ":", "\n", "        ", "from", "torch_geometric", ".", "nn", "import", "fps", "\n", "\n", "if", "conv_type", "==", "\"DENSE\"", ":", "\n", "            ", "assert", "(", "\n", "self", ".", "_num_to_sample", "<=", "data", ".", "pos", ".", "shape", "[", "1", "]", "\n", ")", ",", "\"self._num_to_sample: {} should be smaller than num_pos: {}\"", ".", "format", "(", "\n", "self", ".", "_num_to_sample", ",", "data", ".", "pos", ".", "shape", "[", "1", "]", "\n", ")", "\n", "batch", "=", "torch", ".", "zeros", "(", "data", ".", "pos", ".", "shape", "[", "1", "]", ")", ".", "to", "(", "data", ".", "pos", ".", "device", ")", ".", "long", "(", ")", "\n", "idx_out", "=", "[", "]", "\n", "pos", "=", "[", "]", "\n", "x", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_batches", ")", ":", "\n", "                ", "idx", "=", "fps", "(", "data", ".", "pos", "[", "i", "]", ",", "batch", ",", "ratio", "=", "self", ".", "_get_ratio_to_sample", "(", "data", ".", "pos", ".", "shape", "[", "1", "]", ")", ")", "\n", "idx_out", ".", "append", "(", "idx", ")", "\n", "", "idx_out", "=", "torch", ".", "stack", "(", "idx_out", ")", "\n", "pos", "=", "torch", ".", "gather", "(", "data", ".", "pos", ",", "1", ",", "idx_out", ".", "unsqueeze", "(", "-", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "data", ".", "pos", ".", "shape", "[", "-", "1", "]", ")", ")", "\n", "x", "=", "torch", ".", "gather", "(", "data", ".", "x", ",", "2", ",", "idx_out", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "data", ".", "x", ".", "shape", "[", "1", "]", ",", "1", ")", ")", "\n", "return", "Data", "(", "pos", "=", "pos", ",", "x", "=", "x", ")", ",", "idx_out", "\n", "", "else", ":", "\n", "            ", "pos", "=", "[", "]", "\n", "x", "=", "[", "]", "\n", "idx_out", "=", "[", "]", "\n", "num_points", "=", "0", "\n", "for", "batch_idx", "in", "range", "(", "num_batches", ")", ":", "\n", "                ", "batch_mask", "=", "data", ".", "batch", "==", "batch_idx", "\n", "pos_masked", "=", "data", ".", "pos", "[", "batch_mask", "]", "\n", "x_masked", "=", "data", ".", "x", "[", "batch_mask", "]", "\n", "if", "self", ".", "_num_to_sample", ">=", "pos_masked", ".", "shape", "[", "0", "]", ":", "\n", "                    ", "pos", ".", "append", "(", "pos_masked", ")", "\n", "x", ".", "append", "(", "x_masked", ")", "\n", "idx", "=", "torch", ".", "arange", "(", "0", ",", "pos_masked", ".", "shape", "[", "0", "]", ")", ".", "to", "(", "pos_masked", ".", "device", ")", "\n", "idx_out", ".", "append", "(", "idx", "+", "num_points", ")", "\n", "num_points", "+=", "pos_masked", ".", "shape", "[", "0", "]", "\n", "", "else", ":", "\n", "                    ", "batch", "=", "torch", ".", "zeros", "(", "pos_masked", ".", "shape", "[", "0", "]", ")", ".", "to", "(", "pos_masked", ")", ".", "long", "(", ")", "\n", "idx", "=", "fps", "(", "pos_masked", ",", "batch", ",", "ratio", "=", "self", ".", "_get_ratio_to_sample", "(", "pos_masked", ".", "shape", "[", "0", "]", ")", ")", "\n", "pos", ".", "append", "(", "pos_masked", "[", "idx", "]", ")", "\n", "x", ".", "append", "(", "x_masked", "[", "idx", "]", ")", "\n", "idx_out", ".", "append", "(", "idx", "+", "num_points", ")", "\n", "num_points", "+=", "pos_masked", ".", "shape", "[", "0", "]", "\n", "\n", "", "", "sample_size", "=", "min", "(", "[", "len", "(", "idx", ")", "for", "idx", "in", "idx_out", "]", ")", "\n", "for", "i", ",", "idx", "in", "enumerate", "(", "idx_out", ")", ":", "\n", "                ", "if", "len", "(", "idx", ")", "==", "sample_size", ":", "\n", "                    ", "continue", "\n", "", "idx_out", "[", "i", "]", "=", "idx", "[", ":", "sample_size", "]", "\n", "pos", "[", "i", "]", "=", "pos", "[", "i", "]", "[", ":", "sample_size", "]", "\n", "x", "[", "i", "]", "=", "x", "[", "i", "]", "[", ":", "sample_size", "]", "\n", "\n", "", "data_out", "=", "Data", "(", "pos", "=", "torch", ".", "stack", "(", "pos", ")", ",", "x", "=", "torch", ".", "stack", "(", "x", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", "\n", "return", "data_out", ",", "torch", ".", "cat", "(", "idx_out", ",", "dim", "=", "0", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.VoteNet.loss_helper.compute_vote_loss": [[18, 73], ["output[].long", "vote_xyz.view", "torch.gather.view", "torch_points3d.core.losses.nn_distance", "torch.min", "torch.min", "votes_dist.view.view", "output[].long.dim", "torch.gather().view", "torch.gather().view", "torch.gather", "torch.gather", "output[].view().repeat", "torch.gather", "torch.gather", "output[].long.view().repeat", "torch.gather", "torch.gather", "output[].repeat", "torch.sum", "torch.sum", "output[].long.unsqueeze().repeat", "torch.sum", "torch.sum", "torch.gather", "torch.gather", "output[].view", "output[].long.view", "torch.gather.float", "torch.gather.float", "output[].long.unsqueeze"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.huber_loss.nn_distance", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.gathering.gather", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.gathering.gather", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.gathering.gather", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.gathering.gather", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.gathering.gather", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.gathering.gather", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.gathering.gather", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.gathering.gather"], ["def", "compute_vote_loss", "(", "input", ",", "output", ":", "VoteNetResults", ")", ":", "\n", "    ", "\"\"\" Compute vote loss: Match predicted votes to GT votes.\n\n    Args:\n        end_points: dict (read-only)\n\n    Returns:\n        vote_loss: scalar Tensor\n\n    Overall idea:\n        If the seed point belongs to an object (votes_label_mask == 1),\n        then we require it to vote for the object center.\n\n        Each seed point may vote for multiple translations v1,v2,v3\n        A seed point may also be in the boxes of multiple objects:\n        o1,o2,o3 with corresponding GT votes c1,c2,c3\n\n        Then the loss for this seed point is:\n            min(d(v_i,c_j)) for i=1,2,3 and j=1,2,3\n    \"\"\"", "\n", "\n", "# Load ground truth votes and assign them to seed points", "\n", "batch_size", "=", "output", "[", "\"seed_pos\"", "]", ".", "shape", "[", "0", "]", "\n", "num_seed", "=", "output", "[", "\"seed_pos\"", "]", ".", "shape", "[", "1", "]", "# B,num_seed,3", "\n", "vote_xyz", "=", "output", "[", "\"seed_votes\"", "]", "# B,num_seed*vote_factor,3", "\n", "seed_inds", "=", "output", "[", "\"seed_inds\"", "]", ".", "long", "(", ")", "# B,num_seed in [0,num_points-1]", "\n", "\n", "# Get groundtruth votes for the seed points", "\n", "# vote_label_mask: Use gather to select B,num_seed from B,num_point", "\n", "#   non-object point has no GT vote mask = 0, object point has mask = 1", "\n", "# vote_label: Use gather to select B,num_seed,9 from B,num_point,9", "\n", "#   with inds in shape B,num_seed,9 and 9 = GT_VOTE_FACTOR * 3", "\n", "if", "seed_inds", ".", "dim", "(", ")", "==", "1", ":", "\n", "        ", "seed_gt_votes_mask", "=", "torch", ".", "gather", "(", "input", "[", "\"vote_label_mask\"", "]", ",", "0", ",", "seed_inds", ")", ".", "view", "(", "(", "batch_size", ",", "-", "1", ")", ")", "\n", "seed_gt_votes", "=", "torch", ".", "gather", "(", "input", "[", "\"vote_label\"", "]", ",", "0", ",", "seed_inds", ".", "unsqueeze", "(", "-", "1", ")", ".", "repeat", "(", "1", ",", "3", "*", "GT_VOTE_FACTOR", ")", ")", "\n", "seed_gt_votes", "+=", "output", "[", "\"seed_pos\"", "]", ".", "view", "(", "(", "-", "1", ",", "3", ")", ")", ".", "repeat", "(", "(", "1", ",", "3", ")", ")", "\n", "", "else", ":", "\n", "        ", "seed_gt_votes_mask", "=", "torch", ".", "gather", "(", "input", "[", "\"vote_label_mask\"", "]", ",", "1", ",", "seed_inds", ")", "\n", "seed_inds_expand", "=", "seed_inds", ".", "view", "(", "batch_size", ",", "num_seed", ",", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "3", "*", "GT_VOTE_FACTOR", ")", "\n", "seed_gt_votes", "=", "torch", ".", "gather", "(", "input", "[", "\"vote_label\"", "]", ",", "1", ",", "seed_inds_expand", ")", "\n", "seed_gt_votes", "+=", "output", "[", "\"seed_pos\"", "]", ".", "repeat", "(", "1", ",", "1", ",", "3", ")", "\n", "\n", "# Compute the min of min of distance", "\n", "", "vote_xyz_reshape", "=", "vote_xyz", ".", "view", "(", "\n", "batch_size", "*", "num_seed", ",", "-", "1", ",", "3", "\n", ")", "# from B,num_seed*vote_factor,3 to B*num_seed,vote_factor,3", "\n", "seed_gt_votes_reshape", "=", "seed_gt_votes", ".", "view", "(", "\n", "batch_size", "*", "num_seed", ",", "GT_VOTE_FACTOR", ",", "3", "\n", ")", "# from B,num_seed,3*GT_VOTE_FACTOR to B*num_seed,GT_VOTE_FACTOR,3", "\n", "# A predicted vote to no where is not penalized as long as there is a good vote near the GT vote.", "\n", "dist1", ",", "_", ",", "dist2", ",", "_", "=", "nn_distance", "(", "vote_xyz_reshape", ",", "seed_gt_votes_reshape", ",", "l1", "=", "True", ")", "\n", "votes_dist", ",", "_", "=", "torch", ".", "min", "(", "dist2", ",", "dim", "=", "1", ")", "# (B*num_seed,vote_factor) to (B*num_seed,)", "\n", "votes_dist", "=", "votes_dist", ".", "view", "(", "batch_size", ",", "num_seed", ")", "\n", "vote_loss", "=", "torch", ".", "sum", "(", "votes_dist", "*", "seed_gt_votes_mask", ".", "float", "(", ")", ")", "/", "(", "torch", ".", "sum", "(", "seed_gt_votes_mask", ".", "float", "(", ")", ")", "+", "1e-6", ")", "\n", "return", "vote_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.VoteNet.loss_helper.compute_objectness_loss": [[75, 96], ["torch.tensor().to", "torch.tensor().to", "torch.CrossEntropyLoss", "nn.CrossEntropyLoss.", "objectness_scores.transpose", "torch.sum", "torch.sum", "torch.tensor", "torch.tensor", "torch.sum", "torch.sum"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to"], ["", "def", "compute_objectness_loss", "(", "inputs", ",", "outputs", ":", "VoteNetResults", ",", "loss_params", ")", ":", "\n", "    ", "\"\"\" Compute objectness loss for the proposals.\n\n    Args:\n        end_points: dict (read-only)\n\n    Returns:\n        objectness_loss: scalar Tensor\n        objectness_label: (batch_size, num_aggregated) Tensor with value 0 or 1\n        objectness_mask: (batch_size, num_aggregated) Tensor with value 0 or 1\n        object_assignment: (batch_size, num_aggregated) Tensor with long int\n            within [0,num_gt_object-1]\n    \"\"\"", "\n", "# Compute objectness loss", "\n", "objectness_scores", "=", "outputs", "[", "\"objectness_scores\"", "]", "\n", "weights", "=", "torch", ".", "tensor", "(", "loss_params", ".", "objectness_cls_weights", ")", ".", "to", "(", "objectness_scores", ".", "device", ")", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", "weights", ",", "reduction", "=", "\"none\"", ")", "\n", "objectness_loss", "=", "criterion", "(", "objectness_scores", ".", "transpose", "(", "2", ",", "1", ")", ",", "outputs", ".", "objectness_label", ")", "\n", "objectness_loss", "=", "torch", ".", "sum", "(", "objectness_loss", "*", "outputs", ".", "objectness_mask", ")", "/", "(", "torch", ".", "sum", "(", "outputs", ".", "objectness_mask", ")", "+", "1e-6", ")", "\n", "\n", "return", "objectness_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.VoteNet.loss_helper.compute_box_and_sem_cls_loss": [[98, 208], ["numpy.asarray", "len", "torch_points3d.core.losses.nn_distance", "outputs[].float", "torch.gather", "torch.gather", "torch.CrossEntropyLoss", "nn.CrossEntropyLoss.", "torch.gather", "torch.gather", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to.scatter_", "torch_points3d.core.losses.huber_loss", "torch.gather", "torch.gather", "torch.CrossEntropyLoss", "torch.gather", "torch.gather", "torch.CrossEntropyLoss", "nn.CrossEntropyLoss.", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "outputs[].transpose", "torch.gather.long", "torch.sum", "torch.sum", "torch.gather.unsqueeze().long", "torch.sum", "torch.sum", "nn.CrossEntropyLoss.", "torch.gather", "torch.gather", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to.scatter_", "torch.zeros().to.unsqueeze().repeat().contiguous", "torch.sum", "torch.sum", "torch.from_numpy().unsqueeze().unsqueeze().to", "torch.from_numpy().unsqueeze().unsqueeze().to", "torch.sum", "torch.sum", "torch.mean", "torch.mean", "outputs[].transpose", "torch.gather.long", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.zeros", "torch.zeros", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "outputs[].transpose", "torch.gather.long", "torch.sum", "torch.sum", "object_assignment.unsqueeze().repeat", "torch.gather.unsqueeze().long", "torch_points3d.core.losses.huber_loss", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.gather.unsqueeze", "torch.sum", "torch.sum", "torch.zeros", "torch.zeros", "torch.zeros().to.unsqueeze().repeat", "outputs[].contiguous", "torch.from_numpy().unsqueeze().unsqueeze", "torch.from_numpy().unsqueeze().unsqueeze", "torch.sum", "torch.sum", "object_assignment.unsqueeze", "torch.gather.unsqueeze", "torch.zeros().to.unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy", "torch.from_numpy", "np.asarray.astype"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.huber_loss.nn_distance", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.gathering.gather", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.gathering.gather", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.gathering.gather", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.gathering.gather", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.huber_loss.huber_loss", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.gathering.gather", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.gathering.gather", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.gathering.gather", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.gathering.gather", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.gathering.gather", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.gathering.gather", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.lovasz_loss.mean", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.lovasz_loss.mean", "home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.huber_loss.huber_loss"], ["", "def", "compute_box_and_sem_cls_loss", "(", "inputs", ",", "outputs", ",", "loss_params", ",", "weight_classes", "=", "None", ")", ":", "\n", "    ", "\"\"\" Compute 3D bounding box and semantic classification loss.\n\n    Args:\n        end_points: dict (read-only)\n\n    Returns:\n        center_loss\n        heading_cls_loss\n        heading_reg_loss\n        size_cls_loss\n        size_reg_loss\n        sem_cls_loss\n    \"\"\"", "\n", "\n", "num_heading_bin", "=", "loss_params", ".", "num_heading_bin", "\n", "mean_size_arr", "=", "np", ".", "asarray", "(", "loss_params", ".", "mean_size_arr", ")", "\n", "num_size_cluster", "=", "len", "(", "mean_size_arr", ")", "\n", "\n", "object_assignment", "=", "outputs", ".", "object_assignment", "\n", "batch_size", "=", "object_assignment", ".", "shape", "[", "0", "]", "\n", "\n", "# Compute center loss", "\n", "pred_center", "=", "outputs", "[", "\"center\"", "]", "\n", "gt_center", "=", "inputs", "[", "\"gt_center\"", "]", "\n", "dist1", ",", "ind1", ",", "dist2", ",", "_", "=", "nn_distance", "(", "pred_center", ",", "gt_center", ")", "# dist1: BxK, dist2: BxK2", "\n", "box_label_mask", "=", "inputs", "[", "\"box_label_mask\"", "]", "\n", "objectness_label", "=", "outputs", "[", "\"objectness_label\"", "]", ".", "float", "(", ")", "\n", "centroid_reg_loss1", "=", "torch", ".", "sum", "(", "dist1", "*", "objectness_label", ")", "/", "(", "torch", ".", "sum", "(", "objectness_label", ")", "+", "1e-6", ")", "\n", "centroid_reg_loss2", "=", "torch", ".", "sum", "(", "dist2", "*", "box_label_mask", ")", "/", "(", "torch", ".", "sum", "(", "box_label_mask", ")", "+", "1e-6", ")", "\n", "center_loss", "=", "centroid_reg_loss1", "+", "centroid_reg_loss2", "\n", "\n", "# Compute heading loss", "\n", "heading_class_label", "=", "torch", ".", "gather", "(", "inputs", "[", "\"heading_class_label\"", "]", ",", "1", ",", "object_assignment", ")", "# select (B,K) from (B,K2)", "\n", "criterion_heading_class", "=", "nn", ".", "CrossEntropyLoss", "(", "reduction", "=", "\"none\"", ")", "\n", "\n", "heading_class_loss", "=", "criterion_heading_class", "(", "\n", "outputs", "[", "\"heading_scores\"", "]", ".", "transpose", "(", "2", ",", "1", ")", ",", "heading_class_label", ".", "long", "(", ")", "\n", ")", "# (B,K)", "\n", "heading_class_loss", "=", "torch", ".", "sum", "(", "heading_class_loss", "*", "objectness_label", ")", "/", "(", "torch", ".", "sum", "(", "objectness_label", ")", "+", "1e-6", ")", "\n", "\n", "heading_residual_label", "=", "torch", ".", "gather", "(", "\n", "inputs", "[", "\"heading_residual_label\"", "]", ",", "1", ",", "object_assignment", "\n", ")", "# select (B,K) from (B,K2)", "\n", "heading_residual_normalized_label", "=", "heading_residual_label", "/", "(", "np", ".", "pi", "/", "num_heading_bin", ")", "\n", "\n", "# Ref: https://discuss.pytorch.org/t/convert-int-into-one-hot-format/507/3", "\n", "heading_label_one_hot", "=", "torch", ".", "zeros", "(", "batch_size", ",", "heading_class_label", ".", "shape", "[", "1", "]", ",", "num_heading_bin", ")", ".", "to", "(", "inputs", ".", "pos", ".", "device", ")", "\n", "heading_label_one_hot", ".", "scatter_", "(", "\n", "2", ",", "heading_class_label", ".", "unsqueeze", "(", "-", "1", ")", ".", "long", "(", ")", ",", "1", "\n", ")", "# src==1 so it's *one-hot* (B,K,num_heading_bin) TODO change that for pytorch OneHot", "\n", "heading_residual_normalized_loss", "=", "huber_loss", "(", "\n", "torch", ".", "sum", "(", "outputs", "[", "\"heading_residuals_normalized\"", "]", "*", "heading_label_one_hot", ",", "-", "1", ")", "\n", "-", "heading_residual_normalized_label", ",", "\n", "delta", "=", "1.0", ",", "\n", ")", "# (B,K)", "\n", "heading_residual_normalized_loss", "=", "torch", ".", "sum", "(", "heading_residual_normalized_loss", "*", "objectness_label", ")", "/", "(", "\n", "torch", ".", "sum", "(", "objectness_label", ")", "+", "1e-6", "\n", ")", "\n", "\n", "# Compute size loss", "\n", "size_class_label", "=", "torch", ".", "gather", "(", "inputs", "[", "\"size_class_label\"", "]", ",", "1", ",", "object_assignment", ")", "# select (B,K) from (B,K2)", "\n", "criterion_size_class", "=", "nn", ".", "CrossEntropyLoss", "(", "reduction", "=", "\"none\"", ")", "\n", "if", "num_size_cluster", "!=", "0", ":", "\n", "        ", "size_class_loss", "=", "criterion_size_class", "(", "outputs", "[", "\"size_scores\"", "]", ".", "transpose", "(", "2", ",", "1", ")", ",", "size_class_label", ".", "long", "(", ")", ")", "# (B,K)", "\n", "size_class_loss", "=", "torch", ".", "sum", "(", "size_class_loss", "*", "objectness_label", ")", "/", "(", "torch", ".", "sum", "(", "objectness_label", ")", "+", "1e-6", ")", "\n", "\n", "size_residual_label", "=", "torch", ".", "gather", "(", "\n", "inputs", "[", "\"size_residual_label\"", "]", ",", "1", ",", "object_assignment", ".", "unsqueeze", "(", "-", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "3", ")", "\n", ")", "# select (B,K,3) from (B,K2,3)", "\n", "\n", "size_label_one_hot", "=", "torch", ".", "zeros", "(", "batch_size", ",", "size_class_label", ".", "shape", "[", "1", "]", ",", "num_size_cluster", ")", ".", "to", "(", "inputs", ".", "pos", ".", "device", ")", "\n", "size_label_one_hot", ".", "scatter_", "(", "\n", "2", ",", "size_class_label", ".", "unsqueeze", "(", "-", "1", ")", ".", "long", "(", ")", ",", "1", "\n", ")", "# src==1 so it's *one-hot* (B,K,num_size_cluster)", "\n", "size_label_one_hot_tiled", "=", "(", "\n", "size_label_one_hot", ".", "unsqueeze", "(", "-", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "1", ",", "3", ")", ".", "contiguous", "(", ")", "\n", ")", "# (B,K,num_size_cluster,3)", "\n", "predicted_size_residual_normalized", "=", "torch", ".", "sum", "(", "\n", "outputs", "[", "\"size_residuals_normalized\"", "]", ".", "contiguous", "(", ")", "*", "size_label_one_hot_tiled", ",", "2", "\n", ")", "# (B,K,3)", "\n", "\n", "mean_size_arr_expanded", "=", "(", "\n", "torch", ".", "from_numpy", "(", "mean_size_arr", ".", "astype", "(", "np", ".", "float32", ")", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", ".", "to", "(", "inputs", ".", "pos", ".", "device", ")", "\n", ")", "# (1,1,num_size_cluster,3)", "\n", "mean_size_label", "=", "torch", ".", "sum", "(", "size_label_one_hot_tiled", "*", "mean_size_arr_expanded", ",", "2", ")", "# (B,K,3)", "\n", "size_residual_label_normalized", "=", "size_residual_label", "/", "mean_size_label", "# (B,K,3)", "\n", "size_residual_normalized_loss", "=", "torch", ".", "mean", "(", "\n", "huber_loss", "(", "predicted_size_residual_normalized", "-", "size_residual_label_normalized", ",", "delta", "=", "1.0", ")", ",", "-", "1", "\n", ")", "# (B,K,3) -> (B,K)", "\n", "size_residual_normalized_loss", "=", "torch", ".", "sum", "(", "size_residual_normalized_loss", "*", "objectness_label", ")", "/", "(", "\n", "torch", ".", "sum", "(", "objectness_label", ")", "+", "1e-6", "\n", ")", "\n", "", "else", ":", "\n", "        ", "size_class_loss", "=", "0", "\n", "size_residual_normalized_loss", "=", "0", "\n", "\n", "# 3.4 Semantic cls loss", "\n", "", "sem_cls_label", "=", "torch", ".", "gather", "(", "inputs", "[", "\"sem_cls_label\"", "]", ",", "1", ",", "object_assignment", ")", "# select (B,K) from (B,K2)", "\n", "criterion_sem_cls", "=", "nn", ".", "CrossEntropyLoss", "(", "weight", "=", "weight_classes", ",", "reduction", "=", "\"none\"", ")", "\n", "sem_cls_loss", "=", "criterion_sem_cls", "(", "outputs", "[", "\"sem_cls_scores\"", "]", ".", "transpose", "(", "2", ",", "1", ")", ",", "sem_cls_label", ".", "long", "(", ")", ")", "# (B,K)", "\n", "sem_cls_loss", "=", "torch", ".", "sum", "(", "sem_cls_loss", "*", "objectness_label", ")", "/", "(", "torch", ".", "sum", "(", "objectness_label", ")", "+", "1e-6", ")", "\n", "\n", "return", "(", "\n", "center_loss", ",", "\n", "heading_class_loss", ",", "\n", "heading_residual_normalized_loss", ",", "\n", "size_class_loss", ",", "\n", "size_residual_normalized_loss", ",", "\n", "sem_cls_loss", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.VoteNet.loss_helper.to_dense_labels": [[211, 230], ["data[].view", "data[].view", "data[].view", "data[].view", "data[].view", "data[].view", "data[].view", "len", "data[].dim", "[].view", "torch.unique", "torch.unique"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "def", "to_dense_labels", "(", "data", ")", ":", "\n", "\n", "    ", "if", "data", ".", "batch", "is", "not", "None", ":", "\n", "        ", "batch_size", "=", "len", "(", "torch", ".", "unique", "(", "data", ".", "batch", ")", ")", "\n", "", "else", ":", "\n", "        ", "batch_size", "=", "data", ".", "pos", ".", "shape", "[", "0", "]", "\n", "\n", "", "data", "[", "\"heading_class_label\"", "]", "=", "data", "[", "\"heading_class_label\"", "]", ".", "view", "(", "(", "batch_size", ",", "-", "1", ")", ")", "\n", "data", "[", "\"heading_residual_label\"", "]", "=", "data", "[", "\"heading_residual_label\"", "]", ".", "view", "(", "(", "batch_size", ",", "-", "1", ")", ")", "\n", "data", "[", "\"size_class_label\"", "]", "=", "data", "[", "\"size_class_label\"", "]", ".", "view", "(", "(", "batch_size", ",", "-", "1", ")", ")", "\n", "data", "[", "\"size_residual_label\"", "]", "=", "data", "[", "\"size_residual_label\"", "]", ".", "view", "(", "(", "batch_size", ",", "-", "1", ",", "3", ")", ")", "\n", "data", "[", "\"sem_cls_label\"", "]", "=", "data", "[", "\"sem_cls_label\"", "]", ".", "view", "(", "(", "batch_size", ",", "-", "1", ")", ")", "\n", "data", "[", "\"instance_box_corners\"", "]", "=", "data", "[", "\"instance_box_corners\"", "]", ".", "view", "(", "(", "batch_size", ",", "-", "1", ",", "8", ",", "3", ")", ")", "\n", "data", "[", "\"box_label_mask\"", "]", "=", "data", "[", "\"box_label_mask\"", "]", ".", "view", "(", "(", "batch_size", ",", "-", "1", ")", ")", "\n", "if", "data", "[", "\"center_label\"", "]", ".", "dim", "(", ")", "==", "3", ":", "\n", "        ", "data", "[", "\"gt_center\"", "]", "=", "data", "[", "\"center_label\"", "]", "[", ":", ",", ":", ",", "0", ":", "3", "]", "\n", "", "else", ":", "\n", "        ", "data", "[", "\"gt_center\"", "]", "=", "data", "[", "\"center_label\"", "]", "[", ":", ",", "0", ":", "3", "]", ".", "view", "(", "(", "batch_size", ",", "-", "1", ",", "3", ")", ")", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.VoteNet.loss_helper.get_loss": [[232, 269], ["loss_helper.to_dense_labels", "loss_helper.compute_vote_loss", "loss_helper.compute_objectness_loss", "loss_helper.compute_box_and_sem_cls_loss"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.VoteNet.loss_helper.to_dense_labels", "home.repos.pwc.inspect_result.drprojects_deepviewagg.VoteNet.loss_helper.compute_vote_loss", "home.repos.pwc.inspect_result.drprojects_deepviewagg.VoteNet.loss_helper.compute_objectness_loss", "home.repos.pwc.inspect_result.drprojects_deepviewagg.VoteNet.loss_helper.compute_box_and_sem_cls_loss"], ["", "def", "get_loss", "(", "inputs", ",", "outputs", ":", "VoteNetResults", ",", "loss_params", ",", "weight_classes", "=", "None", ")", ":", "\n", "    ", "losses", "=", "{", "}", "\n", "\n", "inputs", "=", "to_dense_labels", "(", "inputs", ")", "\n", "\n", "# Vote loss", "\n", "vote_loss", "=", "compute_vote_loss", "(", "inputs", ",", "outputs", ")", "\n", "losses", "[", "\"vote_loss\"", "]", "=", "vote_loss", "\n", "\n", "# Obj loss", "\n", "objectness_loss", "=", "compute_objectness_loss", "(", "inputs", ",", "outputs", ",", "loss_params", ")", "\n", "losses", "[", "\"objectness_loss\"", "]", "=", "objectness_loss", "\n", "\n", "# Box loss and sem cls loss", "\n", "(", "\n", "center_loss", ",", "\n", "heading_cls_loss", ",", "\n", "heading_reg_loss", ",", "\n", "size_cls_loss", ",", "\n", "size_reg_loss", ",", "\n", "sem_cls_loss", ",", "\n", ")", "=", "compute_box_and_sem_cls_loss", "(", "inputs", ",", "outputs", ",", "loss_params", ",", "weight_classes", "=", "weight_classes", ")", "\n", "losses", "[", "\"center_loss\"", "]", "=", "center_loss", "\n", "losses", "[", "\"heading_cls_loss\"", "]", "=", "heading_cls_loss", "\n", "losses", "[", "\"heading_reg_loss\"", "]", "=", "heading_reg_loss", "\n", "losses", "[", "\"size_cls_loss\"", "]", "=", "size_cls_loss", "\n", "losses", "[", "\"size_reg_loss\"", "]", "=", "size_reg_loss", "\n", "losses", "[", "\"sem_cls_loss\"", "]", "=", "sem_cls_loss", "\n", "box_loss", "=", "center_loss", "+", "0.1", "*", "heading_cls_loss", "+", "heading_reg_loss", "+", "0.1", "*", "size_cls_loss", "+", "size_reg_loss", "\n", "losses", "[", "\"box_loss\"", "]", "=", "box_loss", "\n", "\n", "# Final loss function", "\n", "loss", "=", "vote_loss", "+", "0.5", "*", "objectness_loss", "+", "box_loss", "+", "0.1", "*", "sem_cls_loss", "\n", "loss", "*=", "10", "# TODO WHY???", "\n", "losses", "[", "\"loss\"", "]", "=", "loss", "\n", "\n", "return", "losses", "\n", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.VoteNet.proposal_module.ProposalModule.__init__": [[15, 43], ["torch.Module.__init__", "len", "torch.Parameter", "torch.Parameter", "torch.Parameter", "omegaconf.OmegaConf.to_container", "torch_points3d.modules.pointnet2.PointNetMSGDown", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["    ", "def", "__init__", "(", "\n", "self", ",", "num_class", ",", "vote_aggregation_config", ",", "num_heading_bin", ",", "mean_size_arr", ",", "num_proposal", ",", "sampling", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_class", "=", "num_class", "\n", "self", ".", "num_heading_bin", "=", "num_heading_bin", "\n", "self", ".", "num_size_cluster", "=", "len", "(", "mean_size_arr", ")", "\n", "self", ".", "mean_size_arr", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "mean_size_arr", ")", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "num_proposal", "=", "num_proposal", "\n", "self", ".", "sampling", "=", "sampling", "\n", "\n", "# Object proposal/detection", "\n", "# Objectness scores (2), center residual (3),", "\n", "# heading class+residual (num_heading_bin*2), size class+residual(num_size_cluster*4)", "\n", "assert", "(", "\n", "vote_aggregation_config", ".", "module_name", "==", "\"PointNetMSGDown\"", "\n", ")", ",", "\"Proposal Module support only PointNet2 for now\"", "\n", "params", "=", "OmegaConf", ".", "to_container", "(", "vote_aggregation_config", ")", "\n", "self", ".", "vote_aggregation", "=", "PointNetMSGDown", "(", "**", "params", ")", "\n", "pn2_output_nc", "=", "vote_aggregation_config", ".", "down_conv_nn", "[", "-", "1", "]", "[", "-", "1", "]", "\n", "output_feat", "=", "2", "+", "3", "+", "num_heading_bin", "*", "2", "+", "self", ".", "num_size_cluster", "*", "4", "+", "self", ".", "num_class", "\n", "mid_feat", "=", "(", "pn2_output_nc", "+", "output_feat", ")", "//", "2", "\n", "self", ".", "conv1", "=", "torch", ".", "nn", ".", "Conv1d", "(", "pn2_output_nc", ",", "pn2_output_nc", ",", "1", ")", "\n", "self", ".", "conv2", "=", "torch", ".", "nn", ".", "Conv1d", "(", "pn2_output_nc", ",", "mid_feat", ",", "1", ")", "\n", "self", ".", "conv3", "=", "torch", ".", "nn", ".", "Conv1d", "(", "mid_feat", ",", "output_feat", ",", "1", ")", "\n", "self", ".", "bn1", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "pn2_output_nc", ")", "\n", "self", ".", "bn2", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "mid_feat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.VoteNet.proposal_module.ProposalModule.forward": [[44, 77], ["proposal_module.ProposalModule.vote_aggregation", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "proposal_module.ProposalModule.conv3", "votenet_results.VoteNetResults.from_logits", "data.pos.dim", "ValueError", "torch_points_kernels.furthest_point_sample", "ValueError", "proposal_module.ProposalModule.bn1", "proposal_module.ProposalModule.bn2", "proposal_module.ProposalModule.conv1", "proposal_module.ProposalModule.conv2"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.VoteNet.votenet_results.VoteNetResults.from_logits"], ["", "def", "forward", "(", "self", ",", "data", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            pos: (B,N,3)\n            features: (B,C,N)\n            seed_pos (B,N,3)\n        Returns:\n            VoteNetResults\n        \"\"\"", "\n", "if", "data", ".", "pos", ".", "dim", "(", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "\"This method only supports dense convolutions for now\"", ")", "\n", "\n", "", "if", "self", ".", "sampling", "==", "\"seed_fps\"", ":", "\n", "            ", "sample_idx", "=", "tp", ".", "furthest_point_sample", "(", "data", ".", "seed_pos", ",", "self", ".", "num_proposal", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unknown sampling strategy: %s. Exiting!\"", "%", "(", "self", ".", "sampling", ")", ")", "\n", "\n", "", "data_features", "=", "self", ".", "vote_aggregation", "(", "data", ",", "sampled_idx", "=", "sample_idx", ")", "\n", "\n", "# --------- PROPOSAL GENERATION ---------", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "data_features", ".", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "# (batch_size, 2+3+num_heading_bin*2+num_size_cluster*4, num_proposal)", "\n", "\n", "return", "VoteNetResults", ".", "from_logits", "(", "\n", "data", ".", "seed_inds", ",", "\n", "data", ".", "pos", ",", "\n", "data", ".", "seed_pos", ",", "\n", "data_features", ".", "pos", ",", "\n", "x", ",", "\n", "self", ".", "num_class", ",", "\n", "self", ".", "num_heading_bin", ",", "\n", "self", ".", "mean_size_arr", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.KPConv.plyutils.parse_header": [[65, 83], ["plyfile.readline", "line.split.split", "int", "line.split.split", "properties.append", "line[].decode"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.split", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.split", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append"], ["def", "parse_header", "(", "plyfile", ",", "ext", ")", ":", "\n", "# Variables", "\n", "    ", "line", "=", "[", "]", "\n", "properties", "=", "[", "]", "\n", "num_points", "=", "None", "\n", "\n", "while", "b\"end_header\"", "not", "in", "line", "and", "line", "!=", "b\"\"", ":", "\n", "        ", "line", "=", "plyfile", ".", "readline", "(", ")", "\n", "\n", "if", "b\"element\"", "in", "line", ":", "\n", "            ", "line", "=", "line", ".", "split", "(", ")", "\n", "num_points", "=", "int", "(", "line", "[", "2", "]", ")", "\n", "\n", "", "elif", "b\"property\"", "in", "line", ":", "\n", "            ", "line", "=", "line", ".", "split", "(", ")", "\n", "properties", ".", "append", "(", "(", "line", "[", "2", "]", ".", "decode", "(", ")", ",", "ext", "+", "ply_dtypes", "[", "line", "[", "1", "]", "]", ")", ")", "\n", "\n", "", "", "return", "num_points", ",", "properties", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.KPConv.plyutils.parse_mesh_header": [[85, 116], ["plyfile.readline", "line.split.split", "int", "line.split.split", "int", "line.split.split", "vertex_properties.append", "line[].decode", "line.split.startswith", "ValueError"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.split", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.split", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.split", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append"], ["", "def", "parse_mesh_header", "(", "plyfile", ",", "ext", ")", ":", "\n", "# Variables", "\n", "    ", "line", "=", "[", "]", "\n", "vertex_properties", "=", "[", "]", "\n", "num_points", "=", "None", "\n", "num_faces", "=", "None", "\n", "current_element", "=", "None", "\n", "\n", "while", "b\"end_header\"", "not", "in", "line", "and", "line", "!=", "b\"\"", ":", "\n", "        ", "line", "=", "plyfile", ".", "readline", "(", ")", "\n", "\n", "# Find point element", "\n", "if", "b\"element vertex\"", "in", "line", ":", "\n", "            ", "current_element", "=", "\"vertex\"", "\n", "line", "=", "line", ".", "split", "(", ")", "\n", "num_points", "=", "int", "(", "line", "[", "2", "]", ")", "\n", "\n", "", "elif", "b\"element face\"", "in", "line", ":", "\n", "            ", "current_element", "=", "\"face\"", "\n", "line", "=", "line", ".", "split", "(", ")", "\n", "num_faces", "=", "int", "(", "line", "[", "2", "]", ")", "\n", "\n", "", "elif", "b\"property\"", "in", "line", ":", "\n", "            ", "if", "current_element", "==", "\"vertex\"", ":", "\n", "                ", "line", "=", "line", ".", "split", "(", ")", "\n", "vertex_properties", ".", "append", "(", "(", "line", "[", "2", "]", ".", "decode", "(", ")", ",", "ext", "+", "ply_dtypes", "[", "line", "[", "1", "]", "]", ")", ")", "\n", "", "elif", "current_element", "==", "\"vertex\"", ":", "\n", "                ", "if", "not", "line", ".", "startswith", "(", "\"property list uchar int\"", ")", ":", "\n", "                    ", "raise", "ValueError", "(", "\"Unsupported faces property : \"", "+", "line", ")", "\n", "\n", "", "", "", "", "return", "num_points", ",", "num_faces", ",", "vertex_properties", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.KPConv.plyutils.read_ply": [[118, 193], ["open", "[].decode", "plyfile.readline", "ValueError", "ValueError", "plyutils.parse_mesh_header", "numpy.fromfile", "numpy.fromfile", "plyutils.parse_header", "numpy.fromfile", "numpy.vstack", "plyfile.readline().split", "plyfile.readline"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.KPConv.plyutils.parse_mesh_header", "home.repos.pwc.inspect_result.drprojects_deepviewagg.KPConv.plyutils.parse_header", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.split"], ["", "def", "read_ply", "(", "filename", ",", "triangular_mesh", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Read \".ply\" files\n    Parameters\n    ----------\n    filename : string\n        the name of the file to read.\n    Returns\n    -------\n    result : array\n        data stored in the file\n    Examples\n    --------\n    Store data in file\n    >>> points = np.random.rand(5, 3)\n    >>> values = np.random.randint(2, size=10)\n    >>> write_ply('example.ply', [points, values], ['x', 'y', 'z', 'values'])\n    Read the file\n    >>> data = read_ply('example.ply')\n    >>> values = data['values']\n    array([0, 0, 1, 1, 0])\n\n    >>> points = np.vstack((data['x'], data['y'], data['z'])).T\n    array([[ 0.466  0.595  0.324]\n           [ 0.538  0.407  0.654]\n           [ 0.850  0.018  0.988]\n           [ 0.395  0.394  0.363]\n           [ 0.873  0.996  0.092]])\n    \"\"\"", "\n", "\n", "with", "open", "(", "filename", ",", "\"rb\"", ")", "as", "plyfile", ":", "\n", "\n", "# Check if the file start with ply", "\n", "        ", "if", "b\"ply\"", "not", "in", "plyfile", ".", "readline", "(", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"The file does not start whith the word ply\"", ")", "\n", "\n", "# get binary_little/big or ascii", "\n", "", "fmt", "=", "plyfile", ".", "readline", "(", ")", ".", "split", "(", ")", "[", "1", "]", ".", "decode", "(", ")", "\n", "if", "fmt", "==", "\"ascii\"", ":", "\n", "            ", "raise", "ValueError", "(", "\"The file is not binary\"", ")", "\n", "\n", "# get extension for building the numpy dtypes", "\n", "", "ext", "=", "valid_formats", "[", "fmt", "]", "\n", "\n", "# PointCloud reader vs mesh reader", "\n", "if", "triangular_mesh", ":", "\n", "\n", "# Parse header", "\n", "            ", "num_points", ",", "num_faces", ",", "properties", "=", "parse_mesh_header", "(", "plyfile", ",", "ext", ")", "\n", "\n", "# Get point data", "\n", "vertex_data", "=", "np", ".", "fromfile", "(", "plyfile", ",", "dtype", "=", "properties", ",", "count", "=", "num_points", ")", "\n", "\n", "# Get face data", "\n", "face_properties", "=", "[", "\n", "(", "\"k\"", ",", "ext", "+", "\"u1\"", ")", ",", "\n", "(", "\"v1\"", ",", "ext", "+", "\"i4\"", ")", ",", "\n", "(", "\"v2\"", ",", "ext", "+", "\"i4\"", ")", ",", "\n", "(", "\"v3\"", ",", "ext", "+", "\"i4\"", ")", ",", "\n", "]", "\n", "faces_data", "=", "np", ".", "fromfile", "(", "plyfile", ",", "dtype", "=", "face_properties", ",", "count", "=", "num_faces", ")", "\n", "\n", "# Return vertex data and concatenated faces", "\n", "faces", "=", "np", ".", "vstack", "(", "(", "faces_data", "[", "\"v1\"", "]", ",", "faces_data", "[", "\"v2\"", "]", ",", "faces_data", "[", "\"v3\"", "]", ")", ")", ".", "T", "\n", "data", "=", "[", "vertex_data", ",", "faces", "]", "\n", "\n", "", "else", ":", "\n", "\n", "# Parse header", "\n", "            ", "num_points", ",", "properties", "=", "parse_header", "(", "plyfile", ",", "ext", ")", "\n", "\n", "# Get data", "\n", "data", "=", "np", ".", "fromfile", "(", "plyfile", ",", "dtype", "=", "properties", ",", "count", "=", "num_points", ")", "\n", "\n", "", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.KPConv.plyutils.header_properties": [[195, 211], ["lines.append", "lines.append"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append"], ["", "def", "header_properties", "(", "field_list", ",", "field_names", ")", ":", "\n", "\n", "# List of lines to write", "\n", "    ", "lines", "=", "[", "]", "\n", "\n", "# First line describing element vertex", "\n", "lines", ".", "append", "(", "\"element vertex %d\"", "%", "field_list", "[", "0", "]", ".", "shape", "[", "0", "]", ")", "\n", "\n", "# Properties lines", "\n", "i", "=", "0", "\n", "for", "fields", "in", "field_list", ":", "\n", "        ", "for", "field", "in", "fields", ".", "T", ":", "\n", "            ", "lines", ".", "append", "(", "\"property %s %s\"", "%", "(", "field", ".", "dtype", ".", "name", ",", "field_names", "[", "i", "]", ")", ")", "\n", "i", "+=", "1", "\n", "\n", "", "", "return", "lines", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.KPConv.plyutils.write_ply": [[213, 318], ["enumerate", "numpy.sum", "list", "list", "numpy.all", "log.info", "len", "log.info", "filename.endswith", "open", "header.append", "header.extend", "header.append", "open", "numpy.empty", "np.empty.tofile", "field.reshape", "log.info", "numpy.equal", "plyutils.header_properties", "header.append", "header.append", "plyfile.write", "triangular_faces.astype.astype", "numpy.empty", "numpy.full", "np.empty.tofile", "type", "type", "str", "range"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.KPConv.plyutils.header_properties", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append"], ["", "def", "write_ply", "(", "filename", ",", "field_list", ",", "field_names", ",", "triangular_faces", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Write \".ply\" files\n    Parameters\n    ----------\n    filename : string\n        the name of the file to which the data is saved. A '.ply' extension will be appended to the\n        file name if it does no already have one.\n    field_list : list, tuple, numpy array\n        the fields to be saved in the ply file. Either a numpy array, a list of numpy arrays or a\n        tuple of numpy arrays. Each 1D numpy array and each column of 2D numpy arrays are considered\n        as one field.\n    field_names : list\n        the name of each fields as a list of strings. Has to be the same length as the number of\n        fields.\n    Examples\n    --------\n    >>> points = np.random.rand(10, 3)\n    >>> write_ply('example1.ply', points, ['x', 'y', 'z'])\n    >>> values = np.random.randint(2, size=10)\n    >>> write_ply('example2.ply', [points, values], ['x', 'y', 'z', 'values'])\n    >>> colors = np.random.randint(255, size=(10,3), dtype=np.uint8)\n    >>> field_names = ['x', 'y', 'z', 'red', 'green', 'blue', values']\n    >>> write_ply('example3.ply', [points, colors, values], field_names)\n    \"\"\"", "\n", "\n", "# Format list input to the right form", "\n", "field_list", "=", "list", "(", "field_list", ")", "if", "(", "type", "(", "field_list", ")", "==", "list", "or", "type", "(", "field_list", ")", "==", "tuple", ")", "else", "list", "(", "(", "field_list", ",", ")", ")", "\n", "for", "i", ",", "field", "in", "enumerate", "(", "field_list", ")", ":", "\n", "        ", "if", "field", ".", "ndim", "<", "2", ":", "\n", "            ", "field_list", "[", "i", "]", "=", "field", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "", "if", "field", ".", "ndim", ">", "2", ":", "\n", "            ", "log", ".", "info", "(", "\"fields have more than 2 dimensions\"", ")", "\n", "return", "False", "\n", "\n", "# check all fields have the same number of data", "\n", "", "", "n_points", "=", "[", "field", ".", "shape", "[", "0", "]", "for", "field", "in", "field_list", "]", "\n", "if", "not", "np", ".", "all", "(", "np", ".", "equal", "(", "n_points", ",", "n_points", "[", "0", "]", ")", ")", ":", "\n", "        ", "log", ".", "info", "(", "\"wrong field dimensions\"", ")", "\n", "return", "False", "\n", "\n", "# Check if field_names and field_list have same nb of column", "\n", "", "n_fields", "=", "np", ".", "sum", "(", "[", "field", ".", "shape", "[", "1", "]", "for", "field", "in", "field_list", "]", ")", "\n", "if", "n_fields", "!=", "len", "(", "field_names", ")", ":", "\n", "        ", "log", ".", "info", "(", "\"wrong number of field names\"", ")", "\n", "return", "False", "\n", "\n", "# Add extension if not there", "\n", "", "if", "not", "filename", ".", "endswith", "(", "\".ply\"", ")", ":", "\n", "        ", "filename", "+=", "\".ply\"", "\n", "\n", "# open in text mode to write the header", "\n", "", "with", "open", "(", "filename", ",", "\"w\"", ")", "as", "plyfile", ":", "\n", "\n", "# First magical word", "\n", "        ", "header", "=", "[", "\"ply\"", "]", "\n", "\n", "# Encoding format", "\n", "header", ".", "append", "(", "\"format binary_\"", "+", "sys", ".", "byteorder", "+", "\"_endian 1.0\"", ")", "\n", "\n", "# Points properties description", "\n", "header", ".", "extend", "(", "header_properties", "(", "field_list", ",", "field_names", ")", ")", "\n", "\n", "# Add faces if needded", "\n", "if", "triangular_faces", "is", "not", "None", ":", "\n", "            ", "header", ".", "append", "(", "\"element face {:d}\"", ".", "format", "(", "triangular_faces", ".", "shape", "[", "0", "]", ")", ")", "\n", "header", ".", "append", "(", "\"property list uchar int vertex_indices\"", ")", "\n", "\n", "# End of header", "\n", "", "header", ".", "append", "(", "\"end_header\"", ")", "\n", "\n", "# Write all lines", "\n", "for", "line", "in", "header", ":", "\n", "            ", "plyfile", ".", "write", "(", "\"%s\\n\"", "%", "line", ")", "\n", "\n", "# open in binary/append to use tofile", "\n", "", "", "with", "open", "(", "filename", ",", "\"ab\"", ")", "as", "plyfile", ":", "\n", "\n", "# Create a structured array", "\n", "        ", "i", "=", "0", "\n", "type_list", "=", "[", "]", "\n", "for", "fields", "in", "field_list", ":", "\n", "            ", "for", "field", "in", "fields", ".", "T", ":", "\n", "                ", "type_list", "+=", "[", "(", "field_names", "[", "i", "]", ",", "field", ".", "dtype", ".", "str", ")", "]", "\n", "i", "+=", "1", "\n", "", "", "data", "=", "np", ".", "empty", "(", "field_list", "[", "0", "]", ".", "shape", "[", "0", "]", ",", "dtype", "=", "type_list", ")", "\n", "i", "=", "0", "\n", "for", "fields", "in", "field_list", ":", "\n", "            ", "for", "field", "in", "fields", ".", "T", ":", "\n", "                ", "data", "[", "field_names", "[", "i", "]", "]", "=", "field", "\n", "i", "+=", "1", "\n", "\n", "", "", "data", ".", "tofile", "(", "plyfile", ")", "\n", "\n", "if", "triangular_faces", "is", "not", "None", ":", "\n", "            ", "triangular_faces", "=", "triangular_faces", ".", "astype", "(", "np", ".", "int32", ")", "\n", "type_list", "=", "[", "(", "\"k\"", ",", "\"uint8\"", ")", "]", "+", "[", "(", "str", "(", "ind", ")", ",", "\"int32\"", ")", "for", "ind", "in", "range", "(", "3", ")", "]", "\n", "data", "=", "np", ".", "empty", "(", "triangular_faces", ".", "shape", "[", "0", "]", ",", "dtype", "=", "type_list", ")", "\n", "data", "[", "\"k\"", "]", "=", "np", ".", "full", "(", "(", "triangular_faces", ".", "shape", "[", "0", "]", ",", ")", ",", "3", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "data", "[", "\"0\"", "]", "=", "triangular_faces", "[", ":", ",", "0", "]", "\n", "data", "[", "\"1\"", "]", "=", "triangular_faces", "[", ":", ",", "1", "]", "\n", "data", "[", "\"2\"", "]", "=", "triangular_faces", "[", ":", ",", "2", "]", "\n", "data", ".", "tofile", "(", "plyfile", ")", "\n", "\n", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.KPConv.plyutils.describe_element": [[320, 343], ["element.append", "range", "str", "len", "element.append", "len", "str"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "def", "describe_element", "(", "name", ",", "df", ")", ":", "\n", "    ", "\"\"\" Takes the columns of the dataframe and builds a ply-like description\n    Parameters\n    ----------\n    name: str\n    df: pandas DataFrame\n    Returns\n    -------\n    element: list[str]\n    \"\"\"", "\n", "property_formats", "=", "{", "\"f\"", ":", "\"float\"", ",", "\"u\"", ":", "\"uchar\"", ",", "\"i\"", ":", "\"int\"", "}", "\n", "element", "=", "[", "\"element \"", "+", "name", "+", "\" \"", "+", "str", "(", "len", "(", "df", ")", ")", "]", "\n", "\n", "if", "name", "==", "\"face\"", ":", "\n", "        ", "element", ".", "append", "(", "\"property list uchar int points_indices\"", ")", "\n", "\n", "", "else", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "df", ".", "columns", ")", ")", ":", "\n", "# get first letter of dtype to infer format", "\n", "            ", "f", "=", "property_formats", "[", "str", "(", "df", ".", "dtypes", "[", "i", "]", ")", "[", "0", "]", "]", "\n", "element", ".", "append", "(", "\"property \"", "+", "f", "+", "\" \"", "+", "df", ".", "columns", ".", "values", "[", "i", "]", ")", "\n", "\n", "", "", "return", "element", "\n", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.KPConv.kernels.KPConvLayer.__init__": [[37, 73], ["super().__init__", "kernel_utils.load_kernels", "torch.nn.parameter.Parameter", "torch.empty", "torch.nn.init.xavier_normal_", "torch.nn.parameter.Parameter", "torch.from_numpy().to", "torch.from_numpy", "kernel_utils.load_kernels.reshape"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.KPConv.kernel_utils.load_kernels", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to"], ["def", "__init__", "(", "\n", "self", ",", "\n", "num_inputs", ",", "\n", "num_outputs", ",", "\n", "point_influence", ",", "\n", "n_kernel_points", "=", "15", ",", "\n", "fixed", "=", "\"center\"", ",", "\n", "KP_influence", "=", "\"linear\"", ",", "\n", "aggregation_mode", "=", "\"sum\"", ",", "\n", "dimension", "=", "3", ",", "\n", "add_one", "=", "False", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "super", "(", "KPConvLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "kernel_radius", "=", "self", ".", "_INFLUENCE_TO_RADIUS", "*", "point_influence", "\n", "self", ".", "point_influence", "=", "point_influence", "\n", "self", ".", "add_one", "=", "add_one", "\n", "self", ".", "num_inputs", "=", "num_inputs", "+", "self", ".", "add_one", "*", "1", "\n", "self", ".", "num_outputs", "=", "num_outputs", "\n", "\n", "self", ".", "KP_influence", "=", "KP_influence", "\n", "self", ".", "n_kernel_points", "=", "n_kernel_points", "\n", "self", ".", "aggregation_mode", "=", "aggregation_mode", "\n", "\n", "# Initial kernel extent for this layer", "\n", "K_points_numpy", "=", "load_kernels", "(", "\n", "self", ".", "kernel_radius", ",", "n_kernel_points", ",", "num_kernels", "=", "1", ",", "dimension", "=", "dimension", ",", "fixed", "=", "fixed", ",", "\n", ")", "\n", "\n", "self", ".", "K_points", "=", "Parameter", "(", "\n", "torch", ".", "from_numpy", "(", "K_points_numpy", ".", "reshape", "(", "(", "n_kernel_points", ",", "dimension", ")", ")", ")", ".", "to", "(", "torch", ".", "float", ")", ",", "requires_grad", "=", "False", ",", "\n", ")", "\n", "\n", "weights", "=", "torch", ".", "empty", "(", "[", "n_kernel_points", ",", "self", ".", "num_inputs", ",", "num_outputs", "]", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "torch", ".", "nn", ".", "init", ".", "xavier_normal_", "(", "weights", ")", "\n", "self", ".", "weight", "=", "Parameter", "(", "weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.KPConv.kernels.KPConvLayer.forward": [[74, 95], ["kernels.add_ones", "convolution_ops.KPConv_ops"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.KPConv.kernels.add_ones", "home.repos.pwc.inspect_result.drprojects_deepviewagg.KPConv.convolution_ops.KPConv_ops"], ["", "def", "forward", "(", "self", ",", "query_points", ",", "support_points", ",", "neighbors", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        - query_points(torch Tensor): query of size N x 3\n        - support_points(torch Tensor): support points of size N0 x 3\n        - neighbors(torch Tensor): neighbors of size N x M\n        - features : feature of size N0 x d (d is the number of inputs)\n        \"\"\"", "\n", "x", "=", "add_ones", "(", "support_points", ",", "x", ",", "self", ".", "add_one", ")", "\n", "\n", "new_feat", "=", "KPConv_ops", "(", "\n", "query_points", ",", "\n", "support_points", ",", "\n", "neighbors", ",", "\n", "x", ",", "\n", "self", ".", "K_points", ",", "\n", "self", ".", "weight", ",", "\n", "self", ".", "point_influence", ",", "\n", "self", ".", "KP_influence", ",", "\n", "self", ".", "aggregation_mode", ",", "\n", ")", "\n", "return", "new_feat", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.KPConv.kernels.KPConvLayer.__repr__": [[96, 104], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"KPConvLayer(InF: %i, OutF: %i, kernel_pts: %i, radius: %.2f, KP_influence: %s, Add_one: %s)\"", "%", "(", "\n", "self", ".", "num_inputs", ",", "\n", "self", ".", "num_outputs", ",", "\n", "self", ".", "n_kernel_points", ",", "\n", "self", ".", "kernel_radius", ",", "\n", "self", ".", "KP_influence", ",", "\n", "self", ".", "add_one", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.KPConv.kernels.KPConvDeformableLayer.__init__": [[129, 180], ["torch_points3d.models.base_model.BaseInternalLossModule.__init__", "kernel_utils.load_kernels", "torch.nn.parameter.Parameter", "torch.empty", "torch.nn.init.xavier_normal_", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.empty", "torch.nn.init.xavier_normal_", "torch.nn.parameter.Parameter", "torch.from_numpy().to", "torch.zeros", "torch.from_numpy", "kernel_utils.load_kernels.reshape"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.KPConv.kernel_utils.load_kernels", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to"], ["def", "__init__", "(", "\n", "self", ",", "\n", "num_inputs", ",", "\n", "num_outputs", ",", "\n", "point_influence", ",", "\n", "n_kernel_points", "=", "15", ",", "\n", "fixed", "=", "\"center\"", ",", "\n", "KP_influence", "=", "\"linear\"", ",", "\n", "aggregation_mode", "=", "\"sum\"", ",", "\n", "dimension", "=", "3", ",", "\n", "modulated", "=", "False", ",", "\n", "loss_mode", "=", "\"fitting\"", ",", "\n", "add_one", "=", "False", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "super", "(", "KPConvDeformableLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "kernel_radius", "=", "self", ".", "_INFLUENCE_TO_RADIUS", "*", "point_influence", "\n", "self", ".", "point_influence", "=", "point_influence", "\n", "self", ".", "add_one", "=", "add_one", "\n", "self", ".", "num_inputs", "=", "num_inputs", "+", "self", ".", "add_one", "*", "1", "\n", "self", ".", "num_outputs", "=", "num_outputs", "\n", "\n", "self", ".", "KP_influence", "=", "KP_influence", "\n", "self", ".", "n_kernel_points", "=", "n_kernel_points", "\n", "self", ".", "aggregation_mode", "=", "aggregation_mode", "\n", "self", ".", "modulated", "=", "modulated", "\n", "self", ".", "internal_losses", "=", "{", "self", ".", "PERMISSIVE_LOSS_KEY", ":", "0.0", ",", "self", ".", "FITTING_LOSS_KEY", ":", "0.0", ",", "self", ".", "REPULSION_LOSS_KEY", ":", "0.0", "}", "\n", "self", ".", "loss_mode", "=", "loss_mode", "\n", "\n", "# Initial kernel extent for this layer", "\n", "K_points_numpy", "=", "load_kernels", "(", "\n", "self", ".", "kernel_radius", ",", "n_kernel_points", ",", "num_kernels", "=", "1", ",", "dimension", "=", "dimension", ",", "fixed", "=", "fixed", ",", "\n", ")", "\n", "self", ".", "K_points", "=", "Parameter", "(", "\n", "torch", ".", "from_numpy", "(", "K_points_numpy", ".", "reshape", "(", "(", "n_kernel_points", ",", "dimension", ")", ")", ")", ".", "to", "(", "torch", ".", "float", ")", ",", "requires_grad", "=", "False", ",", "\n", ")", "\n", "\n", "# Create independant weight for the first convolution and a bias term as no batch normalization happen", "\n", "if", "modulated", ":", "\n", "            ", "offset_dim", "=", "(", "dimension", "+", "1", ")", "*", "self", ".", "n_kernel_points", "\n", "", "else", ":", "\n", "            ", "offset_dim", "=", "dimension", "*", "self", ".", "n_kernel_points", "\n", "", "offset_weights", "=", "torch", ".", "empty", "(", "[", "n_kernel_points", ",", "self", ".", "num_inputs", ",", "offset_dim", "]", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "torch", ".", "nn", ".", "init", ".", "xavier_normal_", "(", "offset_weights", ")", "\n", "self", ".", "offset_weights", "=", "Parameter", "(", "offset_weights", ")", "\n", "self", ".", "offset_bias", "=", "Parameter", "(", "torch", ".", "zeros", "(", "offset_dim", ",", "dtype", "=", "torch", ".", "float", ")", ")", "\n", "\n", "# Main deformable weights", "\n", "weights", "=", "torch", ".", "empty", "(", "[", "n_kernel_points", ",", "self", ".", "num_inputs", ",", "num_outputs", "]", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "torch", ".", "nn", ".", "init", ".", "xavier_normal_", "(", "weights", ")", "\n", "self", ".", "weight", "=", "Parameter", "(", "weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.KPConv.kernels.KPConvDeformableLayer.forward": [[181, 245], ["kernels.add_ones", "convolution_ops.KPConv_deform_ops", "convolution_ops.KPConv_ops", "offset_feat.reshape.reshape", "offset_feat.reshape", "losses.fitting_loss", "losses.repulsion_loss", "torch.nn.functional.sigmoid", "losses.permissive_loss", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.KPConv.kernels.add_ones", "home.repos.pwc.inspect_result.drprojects_deepviewagg.KPConv.convolution_ops.KPConv_deform_ops", "home.repos.pwc.inspect_result.drprojects_deepviewagg.KPConv.convolution_ops.KPConv_ops", "home.repos.pwc.inspect_result.drprojects_deepviewagg.KPConv.losses.fitting_loss", "home.repos.pwc.inspect_result.drprojects_deepviewagg.KPConv.losses.repulsion_loss", "home.repos.pwc.inspect_result.drprojects_deepviewagg.KPConv.losses.permissive_loss"], ["", "def", "forward", "(", "self", ",", "query_points", ",", "support_points", ",", "neighbors", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        - query_points(torch Tensor): query of size N x 3\n        - support_points(torch Tensor): support points of size N0 x 3\n        - neighbors(torch Tensor): neighbors of size N x M\n        - features : feature of size N0 x d (d is the number of inputs)\n        \"\"\"", "\n", "\n", "x", "=", "add_ones", "(", "support_points", ",", "x", ",", "self", ".", "add_one", ")", "\n", "\n", "offset_feat", "=", "(", "\n", "KPConv_ops", "(", "\n", "query_points", ",", "\n", "support_points", ",", "\n", "neighbors", ",", "\n", "x", ",", "\n", "self", ".", "K_points", ",", "\n", "self", ".", "offset_weights", ",", "\n", "self", ".", "point_influence", ",", "\n", "self", ".", "KP_influence", ",", "\n", "self", ".", "aggregation_mode", ",", "\n", ")", "\n", "+", "self", ".", "offset_bias", "\n", ")", "\n", "points_dim", "=", "query_points", ".", "shape", "[", "-", "1", "]", "\n", "if", "self", ".", "modulated", ":", "\n", "# Get offset (in normalized scale) from features", "\n", "            ", "offsets", "=", "offset_feat", "[", ":", ",", ":", "points_dim", "*", "self", ".", "n_kernel_points", "]", "\n", "offsets", "=", "offsets", ".", "reshape", "(", "(", "-", "1", ",", "self", ".", "n_kernel_points", ",", "points_dim", ")", ")", "\n", "\n", "# Get modulations", "\n", "modulations", "=", "2", "*", "torch", ".", "nn", ".", "functional", ".", "sigmoid", "(", "offset_feat", "[", ":", ",", "points_dim", "*", "self", ".", "n_kernel_points", ":", "]", ")", "\n", "", "else", ":", "\n", "# Get offset (in normalized scale) from features", "\n", "            ", "offsets", "=", "offset_feat", ".", "reshape", "(", "(", "-", "1", ",", "self", ".", "n_kernel_points", ",", "points_dim", ")", ")", "\n", "# No modulations", "\n", "modulations", "=", "None", "\n", "", "offsets", "*=", "self", ".", "point_influence", "\n", "\n", "# Apply deformable kernel", "\n", "new_feat", ",", "sq_distances", ",", "K_points_deformed", "=", "KPConv_deform_ops", "(", "\n", "query_points", ",", "\n", "support_points", ",", "\n", "neighbors", ",", "\n", "x", ",", "\n", "self", ".", "K_points", ",", "\n", "offsets", ",", "\n", "modulations", ",", "\n", "self", ".", "weight", ",", "\n", "self", ".", "point_influence", ",", "\n", "self", ".", "KP_influence", ",", "\n", "self", ".", "aggregation_mode", ",", "\n", ")", "\n", "\n", "if", "self", ".", "loss_mode", "==", "\"fitting\"", ":", "\n", "            ", "self", ".", "internal_losses", "[", "self", ".", "FITTING_LOSS_KEY", "]", "=", "fitting_loss", "(", "sq_distances", ",", "self", ".", "kernel_radius", ")", "\n", "self", ".", "internal_losses", "[", "self", ".", "REPULSION_LOSS_KEY", "]", "=", "repulsion_loss", "(", "K_points_deformed", ",", "self", ".", "point_influence", ")", "\n", "", "elif", "self", ".", "loss_mode", "==", "\"permissive\"", ":", "\n", "            ", "self", ".", "internal_losses", "[", "self", ".", "PERMISSIVE_LOSS_KEY", "]", "=", "permissive_loss", "(", "K_points_deformed", ",", "self", ".", "kernel_radius", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\n", "\"Loss mode %s not recognised. Only permissive and fitting are valid\"", "%", "self", ".", "loss_mode", "\n", ")", "\n", "", "return", "new_feat", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.KPConv.kernels.KPConvDeformableLayer.get_internal_losses": [[246, 248], ["None"], "methods", ["None"], ["", "def", "get_internal_losses", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "internal_losses", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.KPConv.kernels.KPConvDeformableLayer.__repr__": [[249, 256], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"KPConvDeformableLayer(InF: %i, OutF: %i, kernel_pts: %i, radius: %.2f, KP_influence: %s)\"", "%", "(", "\n", "self", ".", "num_inputs", ",", "\n", "self", ".", "num_outputs", ",", "\n", "self", ".", "n_kernel_points", ",", "\n", "self", ".", "kernel_radius", ",", "\n", "self", ".", "KP_influence", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.KPConv.kernels.add_ones": [[10, 18], ["torch.ones().unsqueeze().to", "torch.cat", "torch.ones().unsqueeze", "torch.ones().unsqueeze().to.to", "torch.ones"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to"], ["def", "add_ones", "(", "query_points", ",", "x", ",", "add_one", ")", ":", "\n", "    ", "if", "add_one", ":", "\n", "        ", "ones", "=", "torch", ".", "ones", "(", "query_points", ".", "shape", "[", "0", "]", ",", "dtype", "=", "torch", ".", "float", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "to", "(", "query_points", ".", "device", ")", "\n", "if", "x", "is", "not", "None", ":", "\n", "            ", "x", "=", "torch", ".", "cat", "(", "[", "ones", ".", "to", "(", "x", ".", "dtype", ")", ",", "x", "]", ",", "dim", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "ones", "\n", "", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.KPConv.kernel_utils.kernel_point_optimization_debug": [[46, 187], ["kernel_points[].reshape", "numpy.zeros", "numpy.zeros", "range", "numpy.sqrt", "numpy.vstack", "numpy.sum", "matplotlib.figure", "numpy.expand_dims", "numpy.expand_dims", "numpy.sum", "numpy.sum", "numpy.sqrt", "numpy.max", "numpy.minimum", "numpy.sum", "numpy.mean", "numpy.random.rand", "numpy.power", "numpy.power", "numpy.sum", "numpy.expand_dims", "log.info", "matplotlib.clf", "matplotlib.plot", "matplotlib.Circle", "plt.figure.axes[].add_artist", "plt.figure.axes[].set_xlim", "plt.figure.axes[].set_ylim", "plt.figure.axes[].set_aspect", "matplotlib.draw", "matplotlib.pause", "matplotlib.show", "log.info", "numpy.power", "numpy.random.rand", "numpy.power", "numpy.power", "numpy.max", "numpy.expand_dims", "numpy.expand_dims", "numpy.abs", "numpy.max", "numpy.max", "numpy.max", "numpy.abs", "numpy.abs"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.lovasz_loss.mean"], ["def", "kernel_point_optimization_debug", "(", "\n", "radius", ",", "num_points", ",", "num_kernels", "=", "1", ",", "dimension", "=", "3", ",", "fixed", "=", "\"center\"", ",", "ratio", "=", "1.0", ",", "verbose", "=", "0", "\n", ")", ":", "\n", "    ", "\"\"\"\n    Creation of kernel point via optimization of potentials.\n    :param radius: Radius of the kernels\n    :param num_points: points composing kernels\n    :param num_kernels: number of wanted kernels\n    :param dimension: dimension of the space\n    :param fixed: fix position of certain kernel points ('none', 'center' or 'verticals')\n    :param ratio: ratio of the radius where you want the kernels points to be placed\n    :param verbose: display option\n    :return: points [num_kernels, num_points, dimension]\n    \"\"\"", "\n", "\n", "#######################", "\n", "# Parameters definition", "\n", "#######################", "\n", "\n", "# Radius used for optimization (points are rescaled afterwards)", "\n", "radius0", "=", "1", "\n", "diameter0", "=", "2", "\n", "\n", "# Factor multiplicating gradients for moving points (~learning rate)", "\n", "moving_factor", "=", "1e-2", "\n", "continuous_moving_decay", "=", "0.9995", "\n", "\n", "# Gradient threshold to stop optimization", "\n", "thresh", "=", "1e-5", "\n", "\n", "# Gradient clipping value", "\n", "clip", "=", "0.05", "*", "radius0", "\n", "\n", "#######################", "\n", "# Kernel initialization", "\n", "#######################", "\n", "\n", "# Random kernel points", "\n", "kernel_points", "=", "np", ".", "random", ".", "rand", "(", "num_kernels", "*", "num_points", "-", "1", ",", "dimension", ")", "*", "diameter0", "-", "radius0", "\n", "while", "kernel_points", ".", "shape", "[", "0", "]", "<", "num_kernels", "*", "num_points", ":", "\n", "        ", "new_points", "=", "np", ".", "random", ".", "rand", "(", "num_kernels", "*", "num_points", "-", "1", ",", "dimension", ")", "*", "diameter0", "-", "radius0", "\n", "kernel_points", "=", "np", ".", "vstack", "(", "(", "kernel_points", ",", "new_points", ")", ")", "\n", "d2", "=", "np", ".", "sum", "(", "np", ".", "power", "(", "kernel_points", ",", "2", ")", ",", "axis", "=", "1", ")", "\n", "kernel_points", "=", "kernel_points", "[", "d2", "<", "0.5", "*", "radius0", "*", "radius0", ",", ":", "]", "\n", "", "kernel_points", "=", "kernel_points", "[", ":", "num_kernels", "*", "num_points", ",", ":", "]", ".", "reshape", "(", "(", "num_kernels", ",", "num_points", ",", "-", "1", ")", ")", "\n", "\n", "# Optionnal fixing", "\n", "if", "fixed", "==", "\"center\"", ":", "\n", "        ", "kernel_points", "[", ":", ",", "0", ",", ":", "]", "*=", "0", "\n", "", "if", "fixed", "==", "\"verticals\"", ":", "\n", "        ", "kernel_points", "[", ":", ",", ":", "3", ",", ":", "]", "*=", "0", "\n", "kernel_points", "[", ":", ",", "1", ",", "-", "1", "]", "+=", "2", "*", "radius0", "/", "3", "\n", "kernel_points", "[", ":", ",", "2", ",", "-", "1", "]", "-=", "2", "*", "radius0", "/", "3", "\n", "\n", "#####################", "\n", "# Kernel optimization", "\n", "#####################", "\n", "\n", "# Initiate figure", "\n", "", "if", "verbose", ">", "1", ":", "\n", "        ", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "\n", "", "saved_gradient_norms", "=", "np", ".", "zeros", "(", "(", "10000", ",", "num_kernels", ")", ")", "\n", "old_gradient_norms", "=", "np", ".", "zeros", "(", "(", "num_kernels", ",", "num_points", ")", ")", "\n", "for", "iter", "in", "range", "(", "10000", ")", ":", "\n", "\n", "# Compute gradients", "\n", "# *****************", "\n", "\n", "# Derivative of the sum of potentials of all points", "\n", "        ", "A", "=", "np", ".", "expand_dims", "(", "kernel_points", ",", "axis", "=", "2", ")", "\n", "B", "=", "np", ".", "expand_dims", "(", "kernel_points", ",", "axis", "=", "1", ")", "\n", "interd2", "=", "np", ".", "sum", "(", "np", ".", "power", "(", "A", "-", "B", ",", "2", ")", ",", "axis", "=", "-", "1", ")", "\n", "inter_grads", "=", "(", "A", "-", "B", ")", "/", "(", "np", ".", "power", "(", "np", ".", "expand_dims", "(", "interd2", ",", "-", "1", ")", ",", "3", "/", "2", ")", "+", "1e-6", ")", "\n", "inter_grads", "=", "np", ".", "sum", "(", "inter_grads", ",", "axis", "=", "1", ")", "\n", "\n", "# Derivative of the radius potential", "\n", "circle_grads", "=", "10", "*", "kernel_points", "\n", "\n", "# All gradients", "\n", "gradients", "=", "inter_grads", "+", "circle_grads", "\n", "\n", "if", "fixed", "==", "\"verticals\"", ":", "\n", "            ", "gradients", "[", ":", ",", "1", ":", "3", ",", ":", "-", "1", "]", "=", "0", "\n", "\n", "# Stop condition", "\n", "# **************", "\n", "\n", "# Compute norm of gradients", "\n", "", "gradients_norms", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "np", ".", "power", "(", "gradients", ",", "2", ")", ",", "axis", "=", "-", "1", ")", ")", "\n", "saved_gradient_norms", "[", "iter", ",", ":", "]", "=", "np", ".", "max", "(", "gradients_norms", ",", "axis", "=", "1", ")", "\n", "\n", "# Stop if all moving points are gradients fixed (low gradients diff)", "\n", "\n", "if", "fixed", "==", "\"center\"", "and", "np", ".", "max", "(", "np", ".", "abs", "(", "old_gradient_norms", "[", ":", ",", "1", ":", "]", "-", "gradients_norms", "[", ":", ",", "1", ":", "]", ")", ")", "<", "thresh", ":", "\n", "            ", "break", "\n", "", "elif", "fixed", "==", "\"verticals\"", "and", "np", ".", "max", "(", "np", ".", "abs", "(", "old_gradient_norms", "[", ":", ",", "3", ":", "]", "-", "gradients_norms", "[", ":", ",", "3", ":", "]", ")", ")", "<", "thresh", ":", "\n", "            ", "break", "\n", "", "elif", "np", ".", "max", "(", "np", ".", "abs", "(", "old_gradient_norms", "-", "gradients_norms", ")", ")", "<", "thresh", ":", "\n", "            ", "break", "\n", "", "old_gradient_norms", "=", "gradients_norms", "\n", "\n", "# Move points", "\n", "# ***********", "\n", "\n", "# Clip gradient to get moving dists", "\n", "moving_dists", "=", "np", ".", "minimum", "(", "moving_factor", "*", "gradients_norms", ",", "clip", ")", "\n", "\n", "# Fix central point", "\n", "if", "fixed", "==", "\"center\"", ":", "\n", "            ", "moving_dists", "[", ":", ",", "0", "]", "=", "0", "\n", "", "if", "fixed", "==", "\"verticals\"", ":", "\n", "            ", "moving_dists", "[", ":", ",", "0", "]", "=", "0", "\n", "\n", "# Move points", "\n", "", "kernel_points", "-=", "np", ".", "expand_dims", "(", "moving_dists", ",", "-", "1", ")", "*", "gradients", "/", "np", ".", "expand_dims", "(", "gradients_norms", "+", "1e-6", ",", "-", "1", ")", "\n", "\n", "if", "verbose", ":", "\n", "            ", "log", ".", "info", "(", "\"iter {:5d} / max grad = {:f}\"", ".", "format", "(", "iter", ",", "np", ".", "max", "(", "gradients_norms", "[", ":", ",", "3", ":", "]", ")", ")", ")", "\n", "", "if", "verbose", ">", "1", ":", "\n", "            ", "plt", ".", "clf", "(", ")", "\n", "plt", ".", "plot", "(", "kernel_points", "[", "0", ",", ":", ",", "0", "]", ",", "kernel_points", "[", "0", ",", ":", ",", "1", "]", ",", "\".\"", ")", "\n", "circle", "=", "plt", ".", "Circle", "(", "(", "0", ",", "0", ")", ",", "radius", ",", "color", "=", "\"r\"", ",", "fill", "=", "False", ")", "\n", "fig", ".", "axes", "[", "0", "]", ".", "add_artist", "(", "circle", ")", "\n", "fig", ".", "axes", "[", "0", "]", ".", "set_xlim", "(", "(", "-", "radius", "*", "1.1", ",", "radius", "*", "1.1", ")", ")", "\n", "fig", ".", "axes", "[", "0", "]", ".", "set_ylim", "(", "(", "-", "radius", "*", "1.1", ",", "radius", "*", "1.1", ")", ")", "\n", "fig", ".", "axes", "[", "0", "]", ".", "set_aspect", "(", "\"equal\"", ")", "\n", "plt", ".", "draw", "(", ")", "\n", "plt", ".", "pause", "(", "0.001", ")", "\n", "plt", ".", "show", "(", "block", "=", "False", ")", "\n", "log", ".", "info", "(", "moving_factor", ")", "\n", "\n", "# moving factor decay", "\n", "", "moving_factor", "*=", "continuous_moving_decay", "\n", "\n", "# Rescale radius to fit the wanted ratio of radius", "\n", "", "r", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "np", ".", "power", "(", "kernel_points", ",", "2", ")", ",", "axis", "=", "-", "1", ")", ")", "\n", "kernel_points", "*=", "ratio", "/", "np", ".", "mean", "(", "r", "[", ":", ",", "1", ":", "]", ")", "\n", "\n", "# Rescale kernels with real radius", "\n", "return", "kernel_points", "*", "radius", ",", "saved_gradient_norms", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.KPConv.kernel_utils.load_kernels": [[189, 283], ["os.path.join", "os.path.exists", "os.makedirs", "os.path.join", "os.path.exists", "kernel_utils.kernel_point_optimization_debug", "numpy.argmin", "plyutils.write_ply", "plyutils.read_ply", "numpy.zeros", "numpy.matmul", "numpy.ones", "numpy.ones", "numpy.any", "numpy.cross", "numpy.stack", "numpy.matmul", "os.path.join", "ValueError", "numpy.vstack", "numpy.cos", "numpy.sin", "numpy.expand_dims", "numpy.abs", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.random.normal", "numpy.random.rand", "numpy.sum", "numpy.expand_dims", "numpy.expand_dims", "numpy.abs", "numpy.sum", "str", "numpy.random.rand", "numpy.random.rand", "numpy.sum", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.linalg.norm"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.makedirs", "home.repos.pwc.inspect_result.drprojects_deepviewagg.KPConv.kernel_utils.kernel_point_optimization_debug", "home.repos.pwc.inspect_result.drprojects_deepviewagg.KPConv.plyutils.write_ply", "home.repos.pwc.inspect_result.drprojects_deepviewagg.KPConv.plyutils.read_ply"], ["", "def", "load_kernels", "(", "radius", ",", "num_kpoints", ",", "num_kernels", ",", "dimension", ",", "fixed", ")", ":", "\n", "\n", "# Number of tries in the optimization process, to ensure we get the most stable disposition", "\n", "    ", "num_tries", "=", "100", "\n", "\n", "# Kernel directory", "\n", "kernel_dir", "=", "join", "(", "DIR", ",", "\"kernels/dispositions\"", ")", "\n", "if", "not", "exists", "(", "kernel_dir", ")", ":", "\n", "        ", "makedirs", "(", "kernel_dir", ")", "\n", "\n", "# Kernel_file", "\n", "", "if", "dimension", "==", "3", ":", "\n", "        ", "kernel_file", "=", "join", "(", "kernel_dir", ",", "\"k_{:03d}_{:s}.ply\"", ".", "format", "(", "num_kpoints", ",", "fixed", ")", ")", "\n", "", "elif", "dimension", "==", "2", ":", "\n", "        ", "kernel_file", "=", "join", "(", "kernel_dir", ",", "\"k_{:03d}_{:s}_2D.ply\"", ".", "format", "(", "num_kpoints", ",", "fixed", ")", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Unsupported dimpension of kernel : \"", "+", "str", "(", "dimension", ")", ")", "\n", "\n", "# Check if already done", "\n", "", "if", "not", "exists", "(", "kernel_file", ")", ":", "\n", "\n", "# Create kernels", "\n", "        ", "kernel_points", ",", "grad_norms", "=", "kernel_point_optimization_debug", "(", "\n", "1.0", ",", "num_kpoints", ",", "num_kernels", "=", "num_tries", ",", "dimension", "=", "dimension", ",", "fixed", "=", "fixed", ",", "verbose", "=", "0", ",", "\n", ")", "\n", "\n", "# Find best candidate", "\n", "best_k", "=", "np", ".", "argmin", "(", "grad_norms", "[", "-", "1", ",", ":", "]", ")", "\n", "\n", "# Save points", "\n", "original_kernel", "=", "kernel_points", "[", "best_k", ",", ":", ",", ":", "]", "\n", "write_ply", "(", "kernel_file", ",", "original_kernel", ",", "[", "\"x\"", ",", "\"y\"", ",", "\"z\"", "]", ")", "\n", "\n", "", "else", ":", "\n", "        ", "data", "=", "read_ply", "(", "kernel_file", ")", "\n", "original_kernel", "=", "np", ".", "vstack", "(", "(", "data", "[", "\"x\"", "]", ",", "data", "[", "\"y\"", "]", ",", "data", "[", "\"z\"", "]", ")", ")", ".", "T", "\n", "\n", "# N.B. 2D kernels are not supported yet", "\n", "", "if", "dimension", "==", "2", ":", "\n", "        ", "return", "original_kernel", "\n", "\n", "# Random rotations depending of the fixed points", "\n", "", "if", "fixed", "==", "\"verticals\"", ":", "\n", "\n", "# Create random rotations", "\n", "        ", "thetas", "=", "np", ".", "random", ".", "rand", "(", "num_kernels", ")", "*", "2", "*", "np", ".", "pi", "\n", "c", ",", "s", "=", "np", ".", "cos", "(", "thetas", ")", ",", "np", ".", "sin", "(", "thetas", ")", "\n", "R", "=", "np", ".", "zeros", "(", "(", "num_kernels", ",", "3", ",", "3", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "R", "[", ":", ",", "0", ",", "0", "]", "=", "c", "\n", "R", "[", ":", ",", "1", ",", "1", "]", "=", "c", "\n", "R", "[", ":", ",", "2", ",", "2", "]", "=", "1", "\n", "R", "[", ":", ",", "0", ",", "1", "]", "=", "s", "\n", "R", "[", ":", ",", "1", ",", "0", "]", "=", "-", "s", "\n", "\n", "# Scale kernels", "\n", "original_kernel", "=", "radius", "*", "np", ".", "expand_dims", "(", "original_kernel", ",", "0", ")", "\n", "\n", "# Rotate kernels", "\n", "kernels", "=", "np", ".", "matmul", "(", "original_kernel", ",", "R", ")", "\n", "\n", "", "else", ":", "\n", "\n", "# Create random rotations", "\n", "        ", "u", "=", "np", ".", "ones", "(", "(", "num_kernels", ",", "3", ")", ")", "\n", "v", "=", "np", ".", "ones", "(", "(", "num_kernels", ",", "3", ")", ")", "\n", "wrongs", "=", "np", ".", "abs", "(", "np", ".", "sum", "(", "u", "*", "v", ",", "axis", "=", "1", ")", ")", ">", "0.99", "\n", "while", "np", ".", "any", "(", "wrongs", ")", ":", "\n", "            ", "new_u", "=", "np", ".", "random", ".", "rand", "(", "num_kernels", ",", "3", ")", "*", "2", "-", "1", "\n", "new_u", "=", "new_u", "/", "np", ".", "expand_dims", "(", "np", ".", "linalg", ".", "norm", "(", "new_u", ",", "axis", "=", "1", ")", "+", "1e-9", ",", "-", "1", ")", "\n", "u", "[", "wrongs", ",", ":", "]", "=", "new_u", "[", "wrongs", ",", ":", "]", "\n", "new_v", "=", "np", ".", "random", ".", "rand", "(", "num_kernels", ",", "3", ")", "*", "2", "-", "1", "\n", "new_v", "=", "new_v", "/", "np", ".", "expand_dims", "(", "np", ".", "linalg", ".", "norm", "(", "new_v", ",", "axis", "=", "1", ")", "+", "1e-9", ",", "-", "1", ")", "\n", "v", "[", "wrongs", ",", ":", "]", "=", "new_v", "[", "wrongs", ",", ":", "]", "\n", "wrongs", "=", "np", ".", "abs", "(", "np", ".", "sum", "(", "u", "*", "v", ",", "axis", "=", "1", ")", ")", ">", "0.99", "\n", "\n", "# Make v perpendicular to u", "\n", "", "v", "-=", "np", ".", "expand_dims", "(", "np", ".", "sum", "(", "u", "*", "v", ",", "axis", "=", "1", ")", ",", "-", "1", ")", "*", "u", "\n", "v", "=", "v", "/", "np", ".", "expand_dims", "(", "np", ".", "linalg", ".", "norm", "(", "v", ",", "axis", "=", "1", ")", "+", "1e-9", ",", "-", "1", ")", "\n", "\n", "# Last rotation vector", "\n", "w", "=", "np", ".", "cross", "(", "u", ",", "v", ")", "\n", "R", "=", "np", ".", "stack", "(", "(", "u", ",", "v", ",", "w", ")", ",", "axis", "=", "-", "1", ")", "\n", "\n", "# Scale kernels", "\n", "original_kernel", "=", "radius", "*", "np", ".", "expand_dims", "(", "original_kernel", ",", "0", ")", "\n", "\n", "# Rotate kernels", "\n", "kernels", "=", "np", ".", "matmul", "(", "original_kernel", ",", "R", ")", "\n", "\n", "# Add a small noise", "\n", "kernels", "=", "kernels", "\n", "kernels", "=", "kernels", "+", "np", ".", "random", ".", "normal", "(", "scale", "=", "radius", "*", "0.01", ",", "size", "=", "kernels", ".", "shape", ")", "\n", "\n", "", "return", "kernels", "\n", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.KPConv.convolution_ops.radius_gaussian": [[9, 17], ["torch.exp"], "function", ["None"], ["def", "radius_gaussian", "(", "sq_r", ",", "sig", ",", "eps", "=", "1e-9", ")", ":", "\n", "    ", "\"\"\"\n    Compute a radius gaussian (gaussian of distance)\n    :param sq_r: input radiuses [dn, ..., d1, d0]\n    :param sig: extents of gaussians [d1, d0] or [d0] or float\n    :return: gaussian of sq_r [dn, ..., d1, d0]\n    \"\"\"", "\n", "return", "torch", ".", "exp", "(", "-", "sq_r", "/", "(", "2", "*", "sig", "**", "2", "+", "eps", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.KPConv.convolution_ops.KPConv_ops": [[19, 108], ["int", "torch.cat", "torch_points3d.core.common_modules.gathering.gather", "torch_points3d.core.common_modules.gathering.gather.unsqueeze_", "torch.sum", "torch.cat", "torch_points3d.core.common_modules.gathering.gather", "torch.matmul", "weighted_features.permute.permute", "torch.matmul", "torch.sum", "torch.ones_like", "query_points.unsqueeze", "torch.ones_like", "all_weights.transpose.transpose", "torch.argmin", "torch.transpose", "torch.clamp", "all_weights.transpose.transpose", "torch.nn.functional.one_hot", "ValueError", "torch.zeros_like", "convolution_ops.radius_gaussian", "all_weights.transpose.transpose", "ValueError", "torch.sqrt"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.gathering.gather", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.gathering.gather", "home.repos.pwc.inspect_result.drprojects_deepviewagg.KPConv.convolution_ops.radius_gaussian"], ["", "def", "KPConv_ops", "(", "\n", "query_points", ",", "\n", "support_points", ",", "\n", "neighbors_indices", ",", "\n", "features", ",", "\n", "K_points", ",", "\n", "K_values", ",", "\n", "KP_extent", ",", "\n", "KP_influence", ",", "\n", "aggregation_mode", ",", "\n", ")", ":", "\n", "    ", "\"\"\"\n    This function creates a graph of operations to define Kernel Point Convolution in tensorflow. See KPConv function\n    above for a description of each parameter\n    :param query_points: float32[n_points, dim] - input query points (center of neighborhoods)\n    :param support_points: float32[n0_points, dim] - input support points (from which neighbors are taken)\n    :param neighbors_indices: int32[n_points, n_neighbors] - indices of neighbors of each point\n    :param features: float32[n0_points, in_fdim] - input features\n    :param K_values: float32[n_kpoints, in_fdim, out_fdim] - weights of the kernel\n    :param fixed: string in ('none', 'center' or 'verticals') - fix position of certain kernel points\n    :param KP_extent: float32 - influence radius of each kernel point\n    :param KP_influence: string in ('constant', 'linear', 'gaussian') - influence function of the kernel points\n    :param aggregation_mode: string in ('closest', 'sum') - whether to sum influences, or only keep the closest\n    :return:                    [n_points, out_fdim]\n    \"\"\"", "\n", "\n", "# Get variables", "\n", "int", "(", "K_points", ".", "shape", "[", "0", "]", ")", "\n", "\n", "# Add a fake point in the last row for shadow neighbors", "\n", "shadow_point", "=", "torch", ".", "ones_like", "(", "support_points", "[", ":", "1", ",", ":", "]", ")", "*", "1e6", "\n", "support_points", "=", "torch", ".", "cat", "(", "[", "support_points", ",", "shadow_point", "]", ",", "dim", "=", "0", ")", "\n", "\n", "# Get neighbor points [n_points, n_neighbors, dim]", "\n", "neighbors", "=", "gather", "(", "support_points", ",", "neighbors_indices", ")", "\n", "\n", "# Center every neighborhood", "\n", "neighbors", "=", "neighbors", "-", "query_points", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "# Get all difference matrices [n_points, n_neighbors, n_kpoints, dim]", "\n", "neighbors", ".", "unsqueeze_", "(", "2", ")", "\n", "differences", "=", "neighbors", "-", "K_points", "\n", "\n", "# Get the square distances [n_points, n_neighbors, n_kpoints]", "\n", "sq_distances", "=", "torch", ".", "sum", "(", "differences", "**", "2", ",", "dim", "=", "3", ")", "\n", "\n", "# Get Kernel point influences [n_points, n_kpoints, n_neighbors]", "\n", "if", "KP_influence", "==", "\"constant\"", ":", "\n", "# Every point get an influence of 1.", "\n", "        ", "all_weights", "=", "torch", ".", "ones_like", "(", "sq_distances", ")", "\n", "all_weights", "=", "all_weights", ".", "transpose", "(", "2", ",", "1", ")", "\n", "\n", "", "elif", "KP_influence", "==", "\"linear\"", ":", "\n", "# Influence decrease linearly with the distance, and get to zero when d = KP_extent.", "\n", "        ", "all_weights", "=", "torch", ".", "clamp", "(", "1", "-", "torch", ".", "sqrt", "(", "sq_distances", ")", "/", "KP_extent", ",", "min", "=", "0.0", ")", "\n", "all_weights", "=", "all_weights", ".", "transpose", "(", "2", ",", "1", ")", "\n", "\n", "", "elif", "KP_influence", "==", "\"gaussian\"", ":", "\n", "# Influence in gaussian of the distance.", "\n", "        ", "sigma", "=", "KP_extent", "*", "0.3", "\n", "all_weights", "=", "radius_gaussian", "(", "sq_distances", ",", "sigma", ")", "\n", "all_weights", "=", "all_weights", ".", "transpose", "(", "2", ",", "1", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Unknown influence function type (config.KP_influence)\"", ")", "\n", "\n", "# In case of closest mode, only the closest KP can influence each point", "\n", "", "if", "aggregation_mode", "==", "\"closest\"", ":", "\n", "        ", "neighbors_1nn", "=", "torch", ".", "argmin", "(", "sq_distances", ",", "dim", "=", "-", "1", ")", "\n", "all_weights", "*=", "torch", ".", "transpose", "(", "torch", ".", "nn", ".", "functional", ".", "one_hot", "(", "neighbors_1nn", ",", "K_points", ".", "shape", "[", "0", "]", ")", ",", "1", ",", "2", ")", "\n", "\n", "", "elif", "aggregation_mode", "!=", "\"sum\"", ":", "\n", "        ", "raise", "ValueError", "(", "\"Unknown convolution mode. Should be 'closest' or 'sum'\"", ")", "\n", "\n", "", "features", "=", "torch", ".", "cat", "(", "[", "features", ",", "torch", ".", "zeros_like", "(", "features", "[", ":", "1", ",", ":", "]", ")", "]", ",", "dim", "=", "0", ")", "\n", "\n", "# Get the features of each neighborhood [n_points, n_neighbors, in_fdim]", "\n", "neighborhood_features", "=", "gather", "(", "features", ",", "neighbors_indices", ")", "\n", "\n", "# Apply distance weights [n_points, n_kpoints, in_fdim]", "\n", "weighted_features", "=", "torch", ".", "matmul", "(", "all_weights", ",", "neighborhood_features", ")", "\n", "\n", "# Apply network weights [n_kpoints, n_points, out_fdim]", "\n", "weighted_features", "=", "weighted_features", ".", "permute", "(", "1", ",", "0", ",", "2", ")", "\n", "kernel_outputs", "=", "torch", ".", "matmul", "(", "weighted_features", ",", "K_values", ")", "\n", "\n", "# Convolution sum to get [n_points, out_fdim]", "\n", "output_features", "=", "torch", ".", "sum", "(", "kernel_outputs", ",", "dim", "=", "0", ")", "\n", "\n", "return", "output_features", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.KPConv.convolution_ops.KPConv_deform_ops": [[110, 236], ["int", "torch.cat", "torch.add", "neighbors.repeat.unsqueeze", "neighbors.repeat.repeat", "torch.sum", "torch.max", "torch.topk", "neighbors_indices.gather", "new_neighb_inds.unsqueeze", "torch.sum.gather", "torch.cat", "torch.matmul", "weighted_features.permute.permute", "torch.matmul", "torch.sum", "torch.ones_like", "query_points.unsqueeze", "torch.add.unsqueeze", "torch.sum", "new_neighb_inds.unsqueeze.repeat", "all_weights.permute.permute", "torch.argmin", "torch.zeros_like().scatter_", "modulations.unsqueeze", "torch.relu", "all_weights.permute.permute", "ValueError", "torch.zeros_like", "convolution_ops.radius_gaussian", "all_weights.permute.permute", "ValueError", "torch.zeros_like", "torch.sqrt"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.meters.APMeter.add", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.gathering.gather", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.gathering.gather", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.KPConv.convolution_ops.radius_gaussian"], ["", "def", "KPConv_deform_ops", "(", "\n", "query_points", ",", "\n", "support_points", ",", "\n", "neighbors_indices", ",", "\n", "features", ",", "\n", "K_points", ",", "\n", "offsets", ",", "\n", "modulations", ",", "\n", "K_values", ",", "\n", "KP_extent", ",", "\n", "KP_influence", ",", "\n", "aggregation_mode", ",", "\n", ")", ":", "\n", "    ", "\"\"\"\n    This function creates a graph of operations to define Deformable Kernel Point Convolution in tensorflow. See\n    KPConv_deformable function above for a description of each parameter\n    :param query_points:        [n_points, dim]\n    :param support_points:      [n0_points, dim]\n    :param neighbors_indices:   [n_points, n_neighbors]\n    :param features:            [n0_points, in_fdim]\n    :param K_points:            [n_kpoints, dim]\n    :param offsets:             [n_points, n_kpoints, dim]\n    :param modulations:         [n_points, n_kpoints] or None\n    :param K_values:            [n_kpoints, in_fdim, out_fdim]\n    :param KP_extent:           float32\n    :param KP_influence:        string\n    :param aggregation_mode:    string in ('closest', 'sum') - whether to sum influences, or only keep the closest\n\n    :return features, square_distances, deformed_K_points\n    \"\"\"", "\n", "\n", "# Get variables", "\n", "n_kp", "=", "int", "(", "K_points", ".", "shape", "[", "0", "]", ")", "\n", "shadow_ind", "=", "support_points", ".", "shape", "[", "0", "]", "\n", "\n", "# Add a fake point in the last row for shadow neighbors", "\n", "shadow_point", "=", "torch", ".", "ones_like", "(", "support_points", "[", ":", "1", ",", ":", "]", ")", "*", "1e6", "\n", "support_points", "=", "torch", ".", "cat", "(", "[", "support_points", ",", "shadow_point", "]", ",", "axis", "=", "0", ")", "\n", "\n", "# Get neighbor points [n_points, n_neighbors, dim]", "\n", "neighbors", "=", "support_points", "[", "neighbors_indices", "]", "\n", "\n", "# Center every neighborhood", "\n", "neighbors", "=", "neighbors", "-", "query_points", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "# Apply offsets to kernel points [n_points, n_kpoints, dim]", "\n", "deformed_K_points", "=", "torch", ".", "add", "(", "offsets", ",", "K_points", ")", "\n", "\n", "# Get all difference matrices [n_points, n_neighbors, n_kpoints, dim]", "\n", "neighbors", "=", "neighbors", ".", "unsqueeze", "(", "2", ")", "\n", "neighbors", "=", "neighbors", ".", "repeat", "(", "[", "1", ",", "1", ",", "n_kp", ",", "1", "]", ")", "\n", "differences", "=", "neighbors", "-", "deformed_K_points", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "# Get the square distances [n_points, n_neighbors, n_kpoints]", "\n", "sq_distances", "=", "torch", ".", "sum", "(", "differences", "**", "2", ",", "axis", "=", "3", ")", "\n", "\n", "# Boolean of the neighbors in range of a kernel point [n_points, n_neighbors]", "\n", "in_range", "=", "(", "sq_distances", "<", "KP_extent", "**", "2", ")", ".", "any", "(", "2", ")", ".", "to", "(", "torch", ".", "long", ")", "\n", "\n", "# New value of max neighbors", "\n", "new_max_neighb", "=", "torch", ".", "max", "(", "torch", ".", "sum", "(", "in_range", ",", "axis", "=", "1", ")", ")", "\n", "# print(new_max_neighb)", "\n", "\n", "# For each row of neighbors, indices of the ones that are in range [n_points, new_max_neighb]", "\n", "new_neighb_bool", ",", "new_neighb_inds", "=", "torch", ".", "topk", "(", "in_range", ",", "k", "=", "new_max_neighb", ")", "\n", "\n", "# Gather new neighbor indices [n_points, new_max_neighb]", "\n", "new_neighbors_indices", "=", "neighbors_indices", ".", "gather", "(", "1", ",", "new_neighb_inds", ")", "\n", "\n", "# Gather new distances to KP [n_points, new_max_neighb, n_kpoints]", "\n", "new_neighb_inds_sq", "=", "new_neighb_inds", ".", "unsqueeze", "(", "-", "1", ")", "\n", "new_sq_distances", "=", "sq_distances", ".", "gather", "(", "1", ",", "new_neighb_inds_sq", ".", "repeat", "(", "(", "1", ",", "1", ",", "sq_distances", ".", "shape", "[", "-", "1", "]", ")", ")", ")", "\n", "\n", "# New shadow neighbors have to point to the last shadow point", "\n", "new_neighbors_indices", "*=", "new_neighb_bool", "\n", "new_neighbors_indices", "+=", "(", "1", "-", "new_neighb_bool", ")", "*", "shadow_ind", "\n", "\n", "# Get Kernel point influences [n_points, n_kpoints, n_neighbors]", "\n", "if", "KP_influence", "==", "\"constant\"", ":", "\n", "# Every point get an influence of 1.", "\n", "        ", "all_weights", "=", "(", "new_sq_distances", "<", "KP_extent", "**", "2", ")", ".", "to", "(", "torch", ".", "float32", ")", "\n", "all_weights", "=", "all_weights", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "\n", "", "elif", "KP_influence", "==", "\"linear\"", ":", "\n", "# Influence decrease linearly with the distance, and get to zero when d = KP_extent.", "\n", "        ", "all_weights", "=", "torch", ".", "relu", "(", "1", "-", "torch", ".", "sqrt", "(", "new_sq_distances", ")", "/", "KP_extent", ")", "\n", "all_weights", "=", "all_weights", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "\n", "", "elif", "KP_influence", "==", "\"gaussian\"", ":", "\n", "# Influence in gaussian of the distance.", "\n", "        ", "sigma", "=", "KP_extent", "*", "0.3", "\n", "all_weights", "=", "radius_gaussian", "(", "new_sq_distances", ",", "sigma", ")", "\n", "all_weights", "=", "all_weights", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Unknown influence function type (config.KP_influence)\"", ")", "\n", "\n", "# In case of closest mode, only the closest KP can influence each point", "\n", "", "if", "aggregation_mode", "==", "\"closest\"", ":", "\n", "        ", "neighbors_1nn", "=", "torch", ".", "argmin", "(", "new_sq_distances", ",", "axis", "=", "2", ",", "output_type", "=", "torch", ".", "long", ")", "\n", "all_weights", "*=", "torch", ".", "zeros_like", "(", "all_weights", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "scatter_", "(", "1", ",", "neighbors_1nn", ",", "1", ")", "\n", "\n", "", "elif", "aggregation_mode", "!=", "\"sum\"", ":", "\n", "        ", "raise", "ValueError", "(", "\"Unknown convolution mode. Should be 'closest' or 'sum'\"", ")", "\n", "\n", "", "features", "=", "torch", ".", "cat", "(", "[", "features", ",", "torch", ".", "zeros_like", "(", "features", "[", ":", "1", ",", ":", "]", ")", "]", ",", "axis", "=", "0", ")", "\n", "\n", "# Get the features of each neighborhood [n_points, new_max_neighb, in_fdim]", "\n", "neighborhood_features", "=", "features", "[", "new_neighbors_indices", "]", "\n", "\n", "# Apply distance weights [n_points, n_kpoints, in_fdim]", "\n", "# print(all_weights.shape, neighborhood_features.shape)", "\n", "weighted_features", "=", "torch", ".", "matmul", "(", "all_weights", ",", "neighborhood_features", ")", "\n", "\n", "# Apply modulations", "\n", "if", "modulations", "is", "not", "None", ":", "\n", "        ", "weighted_features", "*=", "modulations", ".", "unsqueeze", "(", "2", ")", "\n", "\n", "# Apply network weights [n_kpoints, n_points, out_fdim]", "\n", "", "weighted_features", "=", "weighted_features", ".", "permute", "(", "1", ",", "0", ",", "2", ")", "\n", "kernel_outputs", "=", "torch", ".", "matmul", "(", "weighted_features", ",", "K_values", ")", "\n", "\n", "# Convolution sum [n_points, out_fdim]", "\n", "output_features", "=", "torch", ".", "sum", "(", "kernel_outputs", ",", "axis", "=", "0", ")", "\n", "\n", "# we need regularization", "\n", "return", "output_features", ",", "sq_distances", ",", "deformed_K_points", "\n", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.KPConv.blocks.SimpleBlock.__init__": [[25, 66], ["torch.nn.LeakyReLU", "torch_points3d.core.common_modules.base_modules.BaseModule.__init__", "torch_points3d.core.spatial_ops.RadiusNeighbourFinder", "len", "kernels.KPConvDeformableLayer", "kernels.KPConvLayer", "bn", "torch_points3d.core.data_transform.GridSampling3D"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["def", "__init__", "(", "\n", "self", ",", "\n", "down_conv_nn", "=", "None", ",", "\n", "grid_size", "=", "None", ",", "\n", "prev_grid_size", "=", "None", ",", "\n", "sigma", "=", "1.0", ",", "\n", "max_num_neighbors", "=", "16", ",", "\n", "activation", "=", "torch", ".", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.1", ")", ",", "\n", "bn_momentum", "=", "0.02", ",", "\n", "bn", "=", "FastBatchNorm1d", ",", "\n", "deformable", "=", "False", ",", "\n", "add_one", "=", "False", ",", "\n", "**", "kwargs", ",", "\n", ")", ":", "\n", "        ", "super", "(", "SimpleBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "len", "(", "down_conv_nn", ")", "==", "2", "\n", "num_inputs", ",", "num_outputs", "=", "down_conv_nn", "\n", "if", "deformable", ":", "\n", "            ", "density_parameter", "=", "self", ".", "DEFORMABLE_DENSITY", "\n", "self", ".", "kp_conv", "=", "KPConvDeformableLayer", "(", "\n", "num_inputs", ",", "num_outputs", ",", "point_influence", "=", "prev_grid_size", "*", "sigma", ",", "add_one", "=", "add_one", ",", "**", "kwargs", "\n", ")", "\n", "", "else", ":", "\n", "            ", "density_parameter", "=", "self", ".", "RIGID_DENSITY", "\n", "self", ".", "kp_conv", "=", "KPConvLayer", "(", "\n", "num_inputs", ",", "num_outputs", ",", "point_influence", "=", "prev_grid_size", "*", "sigma", ",", "add_one", "=", "add_one", ",", "**", "kwargs", "\n", ")", "\n", "", "search_radius", "=", "density_parameter", "*", "sigma", "*", "prev_grid_size", "\n", "self", ".", "neighbour_finder", "=", "RadiusNeighbourFinder", "(", "search_radius", ",", "max_num_neighbors", ",", "conv_type", "=", "self", ".", "CONV_TYPE", ")", "\n", "\n", "if", "bn", ":", "\n", "            ", "self", ".", "bn", "=", "bn", "(", "num_outputs", ",", "momentum", "=", "bn_momentum", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "bn", "=", "None", "\n", "", "self", ".", "activation", "=", "activation", "\n", "\n", "is_strided", "=", "prev_grid_size", "!=", "grid_size", "\n", "if", "is_strided", ":", "\n", "            ", "self", ".", "sampler", "=", "GridSampling3D", "(", "grid_size", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "sampler", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.KPConv.blocks.SimpleBlock.forward": [[67, 95], ["blocks.SimpleBlock.kp_conv", "blocks.SimpleBlock.activation", "hasattr", "setattr", "blocks.SimpleBlock.neighbour_finder", "blocks.SimpleBlock.bn", "blocks.SimpleBlock.sampler", "data.clone", "data.clone"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.PPNet.blocks.PPStageBlock.neighbour_finder", "home.repos.pwc.inspect_result.drprojects_deepviewagg.PPNet.blocks.PPStageBlock.sampler", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.clone", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.clone"], ["", "", "def", "forward", "(", "self", ",", "data", ",", "precomputed", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "not", "hasattr", "(", "data", ",", "\"block_idx\"", ")", ":", "\n", "            ", "setattr", "(", "data", ",", "\"block_idx\"", ",", "0", ")", "\n", "\n", "", "if", "precomputed", ":", "\n", "            ", "query_data", "=", "precomputed", "[", "data", ".", "block_idx", "]", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "sampler", ":", "\n", "                ", "query_data", "=", "self", ".", "sampler", "(", "data", ".", "clone", "(", ")", ")", "\n", "", "else", ":", "\n", "                ", "query_data", "=", "data", ".", "clone", "(", ")", "\n", "\n", "", "", "if", "precomputed", ":", "\n", "            ", "idx_neighboors", "=", "query_data", ".", "idx_neighboors", "\n", "q_pos", "=", "query_data", ".", "pos", "\n", "", "else", ":", "\n", "            ", "q_pos", ",", "q_batch", "=", "query_data", ".", "pos", ",", "query_data", ".", "batch", "\n", "idx_neighboors", "=", "self", ".", "neighbour_finder", "(", "data", ".", "pos", ",", "q_pos", ",", "batch_x", "=", "data", ".", "batch", ",", "batch_y", "=", "q_batch", ")", "\n", "query_data", ".", "idx_neighboors", "=", "idx_neighboors", "\n", "\n", "", "x", "=", "self", ".", "kp_conv", "(", "q_pos", ",", "data", ".", "pos", ",", "idx_neighboors", ",", "data", ".", "x", ",", ")", "\n", "if", "self", ".", "bn", ":", "\n", "            ", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "\n", "query_data", ".", "x", "=", "x", "\n", "query_data", ".", "block_idx", "=", "data", ".", "block_idx", "+", "1", "\n", "return", "query_data", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.KPConv.blocks.SimpleBlock.extra_repr": [[96, 98], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "\"Nb parameters: {}; {}; {}\"", ".", "format", "(", "self", ".", "nb_params", ",", "self", ".", "sampler", ",", "self", ".", "neighbour_finder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.KPConv.blocks.ResnetBBlock.__init__": [[121, 191], ["torch.nn.LeakyReLU", "torch_points3d.core.common_modules.base_modules.BaseModule.__init__", "blocks.SimpleBlock", "len", "torch.nn.Identity", "len", "len", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.Linear", "bn", "torch.nn.Linear", "bn", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "bn"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["def", "__init__", "(", "\n", "self", ",", "\n", "down_conv_nn", "=", "None", ",", "\n", "grid_size", "=", "None", ",", "\n", "prev_grid_size", "=", "None", ",", "\n", "sigma", "=", "1", ",", "\n", "max_num_neighbors", "=", "16", ",", "\n", "activation", "=", "torch", ".", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.1", ")", ",", "\n", "has_bottleneck", "=", "True", ",", "\n", "bn_momentum", "=", "0.02", ",", "\n", "bn", "=", "FastBatchNorm1d", ",", "\n", "deformable", "=", "False", ",", "\n", "add_one", "=", "False", ",", "\n", "**", "kwargs", ",", "\n", ")", ":", "\n", "        ", "super", "(", "ResnetBBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "len", "(", "down_conv_nn", ")", "==", "2", "or", "len", "(", "down_conv_nn", ")", "==", "3", ",", "\"down_conv_nn should be of size 2 or 3\"", "\n", "if", "len", "(", "down_conv_nn", ")", "==", "2", ":", "\n", "            ", "num_inputs", ",", "num_outputs", "=", "down_conv_nn", "\n", "d_2", "=", "num_outputs", "//", "4", "\n", "", "else", ":", "\n", "            ", "num_inputs", ",", "d_2", ",", "num_outputs", "=", "down_conv_nn", "\n", "", "self", ".", "is_strided", "=", "prev_grid_size", "!=", "grid_size", "\n", "self", ".", "has_bottleneck", "=", "has_bottleneck", "\n", "\n", "# Main branch", "\n", "if", "self", ".", "has_bottleneck", ":", "\n", "            ", "kp_size", "=", "[", "d_2", ",", "d_2", "]", "\n", "", "else", ":", "\n", "            ", "kp_size", "=", "[", "num_inputs", ",", "num_outputs", "]", "\n", "\n", "", "self", ".", "kp_conv", "=", "SimpleBlock", "(", "\n", "down_conv_nn", "=", "kp_size", ",", "\n", "grid_size", "=", "grid_size", ",", "\n", "prev_grid_size", "=", "prev_grid_size", ",", "\n", "sigma", "=", "sigma", ",", "\n", "max_num_neighbors", "=", "max_num_neighbors", ",", "\n", "activation", "=", "activation", ",", "\n", "bn_momentum", "=", "bn_momentum", ",", "\n", "bn", "=", "bn", ",", "\n", "deformable", "=", "deformable", ",", "\n", "add_one", "=", "add_one", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "\n", "if", "self", ".", "has_bottleneck", ":", "\n", "            ", "if", "bn", ":", "\n", "                ", "self", ".", "unary_1", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "Lin", "(", "num_inputs", ",", "d_2", ",", "bias", "=", "False", ")", ",", "bn", "(", "d_2", ",", "momentum", "=", "bn_momentum", ")", ",", "activation", "\n", ")", "\n", "self", ".", "unary_2", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "Lin", "(", "d_2", ",", "num_outputs", ",", "bias", "=", "False", ")", ",", "bn", "(", "num_outputs", ",", "momentum", "=", "bn_momentum", ")", ",", "activation", "\n", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "unary_1", "=", "torch", ".", "nn", ".", "Sequential", "(", "Lin", "(", "num_inputs", ",", "d_2", ",", "bias", "=", "False", ")", ",", "activation", ")", "\n", "self", ".", "unary_2", "=", "torch", ".", "nn", ".", "Sequential", "(", "Lin", "(", "d_2", ",", "num_outputs", ",", "bias", "=", "False", ")", ",", "activation", ")", "\n", "\n", "# Shortcut", "\n", "", "", "if", "num_inputs", "!=", "num_outputs", ":", "\n", "            ", "if", "bn", ":", "\n", "                ", "self", ".", "shortcut_op", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "Lin", "(", "num_inputs", ",", "num_outputs", ",", "bias", "=", "False", ")", ",", "bn", "(", "num_outputs", ",", "momentum", "=", "bn_momentum", ")", "\n", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "shortcut_op", "=", "Lin", "(", "num_inputs", ",", "num_outputs", ",", "bias", "=", "False", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "shortcut_op", "=", "torch", ".", "nn", ".", "Identity", "(", ")", "\n", "\n", "# Final activation", "\n", "", "self", ".", "activation", "=", "activation", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.KPConv.blocks.ResnetBBlock.forward": [[192, 215], ["data.clone", "blocks.ResnetBBlock.kp_conv", "blocks.ResnetBBlock.shortcut_op", "blocks.ResnetBBlock.unary_1", "blocks.ResnetBBlock.unary_2", "torch.cat", "torch.max", "torch.zeros_like"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.clone", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat"], ["", "def", "forward", "(", "self", ",", "data", ",", "precomputed", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n            data: x, pos, batch_idx and idx_neighbour when the neighboors of each point in pos have already been computed\n        \"\"\"", "\n", "# Main branch", "\n", "output", "=", "data", ".", "clone", "(", ")", "\n", "shortcut_x", "=", "data", ".", "x", "\n", "if", "self", ".", "has_bottleneck", ":", "\n", "            ", "output", ".", "x", "=", "self", ".", "unary_1", "(", "output", ".", "x", ")", "\n", "", "output", "=", "self", ".", "kp_conv", "(", "output", ",", "precomputed", "=", "precomputed", ")", "\n", "if", "self", ".", "has_bottleneck", ":", "\n", "            ", "output", ".", "x", "=", "self", ".", "unary_2", "(", "output", ".", "x", ")", "\n", "\n", "# Shortcut", "\n", "", "if", "self", ".", "is_strided", ":", "\n", "            ", "idx_neighboors", "=", "output", ".", "idx_neighboors", "\n", "shortcut_x", "=", "torch", ".", "cat", "(", "[", "shortcut_x", ",", "torch", ".", "zeros_like", "(", "shortcut_x", "[", ":", "1", ",", ":", "]", ")", "]", ",", "axis", "=", "0", ")", "# Shadow feature", "\n", "neighborhood_features", "=", "shortcut_x", "[", "idx_neighboors", "]", "\n", "shortcut_x", "=", "torch", ".", "max", "(", "neighborhood_features", ",", "dim", "=", "1", ",", "keepdim", "=", "False", ")", "[", "0", "]", "\n", "\n", "", "shortcut", "=", "self", ".", "shortcut_op", "(", "shortcut_x", ")", "\n", "output", ".", "x", "+=", "shortcut", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.KPConv.blocks.ResnetBBlock.sampler": [[216, 219], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "sampler", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "kp_conv", ".", "sampler", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.KPConv.blocks.ResnetBBlock.neighbour_finder": [[220, 223], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "neighbour_finder", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "kp_conv", ".", "neighbour_finder", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.KPConv.blocks.ResnetBBlock.extra_repr": [[224, 226], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "\"Nb parameters: %i\"", "%", "self", ".", "nb_params", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.KPConv.blocks.KPDualBlock.__init__": [[242, 277], ["torch_points3d.core.common_modules.base_modules.BaseModule.__init__", "torch.nn.ModuleList", "enumerate", "len", "len", "kwargs.items", "getattr", "getattr.", "blocks.KPDualBlock.blocks.append", "torch_points3d.utils.config.is_list", "torch_points3d.utils.config.is_list", "torch_points3d.utils.config.is_list"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.config.is_list", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.config.is_list", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.config.is_list"], ["def", "__init__", "(", "\n", "self", ",", "\n", "block_names", "=", "None", ",", "\n", "down_conv_nn", "=", "None", ",", "\n", "grid_size", "=", "None", ",", "\n", "prev_grid_size", "=", "None", ",", "\n", "has_bottleneck", "=", "None", ",", "\n", "max_num_neighbors", "=", "None", ",", "\n", "deformable", "=", "False", ",", "\n", "add_one", "=", "False", ",", "\n", "**", "kwargs", ",", "\n", ")", ":", "\n", "        ", "super", "(", "KPDualBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "len", "(", "block_names", ")", "==", "len", "(", "down_conv_nn", ")", "\n", "self", ".", "blocks", "=", "torch", ".", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", ",", "class_name", "in", "enumerate", "(", "block_names", ")", ":", "\n", "# Constructing extra keyword arguments", "\n", "            ", "block_kwargs", "=", "{", "}", "\n", "for", "key", ",", "arg", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "                ", "block_kwargs", "[", "key", "]", "=", "arg", "[", "i", "]", "if", "is_list", "(", "arg", ")", "else", "arg", "\n", "\n", "# Building the block", "\n", "", "kpcls", "=", "getattr", "(", "sys", ".", "modules", "[", "__name__", "]", ",", "class_name", ")", "\n", "block", "=", "kpcls", "(", "\n", "down_conv_nn", "=", "down_conv_nn", "[", "i", "]", ",", "\n", "grid_size", "=", "grid_size", "[", "i", "]", ",", "\n", "prev_grid_size", "=", "prev_grid_size", "[", "i", "]", ",", "\n", "has_bottleneck", "=", "has_bottleneck", "[", "i", "]", ",", "\n", "max_num_neighbors", "=", "max_num_neighbors", "[", "i", "]", ",", "\n", "deformable", "=", "deformable", "[", "i", "]", "if", "is_list", "(", "deformable", ")", "else", "deformable", ",", "\n", "add_one", "=", "add_one", "[", "i", "]", "if", "is_list", "(", "add_one", ")", "else", "add_one", ",", "\n", "**", "block_kwargs", ",", "\n", ")", "\n", "self", ".", "blocks", ".", "append", "(", "block", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.KPConv.blocks.KPDualBlock.forward": [[278, 282], ["block"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "data", ",", "precomputed", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "for", "block", "in", "self", ".", "blocks", ":", "\n", "            ", "data", "=", "block", "(", "data", ",", "precomputed", "=", "precomputed", ")", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.KPConv.blocks.KPDualBlock.sampler": [[283, 286], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "sampler", "(", "self", ")", ":", "\n", "        ", "return", "[", "b", ".", "sampler", "for", "b", "in", "self", ".", "blocks", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.KPConv.blocks.KPDualBlock.neighbour_finder": [[287, 290], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "neighbour_finder", "(", "self", ")", ":", "\n", "        ", "return", "[", "b", ".", "neighbour_finder", "for", "b", "in", "self", ".", "blocks", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.KPConv.blocks.KPDualBlock.extra_repr": [[291, 293], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "\"Nb parameters: %i\"", "%", "self", ".", "nb_params", "\n", "", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.KPConv.losses.fitting_loss": [[4, 15], ["torch.mean", "sq_distance.min"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.lovasz_loss.mean"], ["def", "fitting_loss", "(", "sq_distance", ",", "radius", ")", ":", "\n", "    ", "\"\"\" KPConv fitting loss. For each query point it ensures that at least one neighboor is\n    close to each kernel point\n\n    Arguments:\n        sq_distance - For each querry point, from all neighboors to all KP points [N_querry, N_neighboors, N_KPoints]\n        radius - Radius of the convolution\n    \"\"\"", "\n", "kpmin", "=", "sq_distance", ".", "min", "(", "dim", "=", "1", ")", "[", "0", "]", "\n", "normalised_kpmin", "=", "kpmin", "/", "(", "radius", "**", "2", ")", "\n", "return", "torch", ".", "mean", "(", "normalised_kpmin", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.KPConv.losses.repulsion_loss": [[17, 34], ["range", "float", "torch.sqrt", "torch.sum", "torch.mean", "torch.no_grad", "torch.cat", "torch.sum", "torch.pow", "torch.relu"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.lovasz_loss.mean", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat"], ["", "def", "repulsion_loss", "(", "deformed_kpoints", ",", "radius", ")", ":", "\n", "    ", "\"\"\" Ensures that the deformed points within the kernel remain equidistant\n\n    Arguments:\n        deformed_kpoints - deformed points for each query point\n        radius - Radius of the kernel\n    \"\"\"", "\n", "deformed_kpoints", "/", "float", "(", "radius", ")", "\n", "n_points", "=", "deformed_kpoints", ".", "shape", "[", "1", "]", "\n", "repulsive_loss", "=", "0", "\n", "for", "i", "in", "range", "(", "n_points", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "other_points", "=", "torch", ".", "cat", "(", "[", "deformed_kpoints", "[", ":", ",", ":", "i", ",", ":", "]", ",", "deformed_kpoints", "[", ":", ",", "i", "+", "1", ":", ",", ":", "]", "]", ",", "dim", "=", "1", ")", "\n", "", "distances", "=", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "(", "other_points", "-", "deformed_kpoints", "[", ":", ",", "i", ":", "i", "+", "1", ",", ":", "]", ")", "**", "2", ",", "dim", "=", "-", "1", ")", ")", "\n", "repulsion_force", "=", "torch", ".", "sum", "(", "torch", ".", "pow", "(", "torch", ".", "relu", "(", "1.5", "-", "distances", ")", ",", "2", ")", ",", "dim", "=", "1", ")", "\n", "repulsive_loss", "+=", "torch", ".", "mean", "(", "repulsion_force", ")", "\n", "", "return", "repulsive_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.KPConv.losses.permissive_loss": [[36, 43], ["torch.mean", "torch.norm", "float"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.lovasz_loss.mean"], ["", "def", "permissive_loss", "(", "deformed_kpoints", ",", "radius", ")", ":", "\n", "    ", "\"\"\"This loss is responsible to penalize deformed_kpoints to\n    move outside from the radius defined for the convolution\n    \"\"\"", "\n", "norm_deformed_normalized", "=", "torch", ".", "norm", "(", "deformed_kpoints", ",", "p", "=", "2", ",", "dim", "=", "-", "1", ")", "/", "float", "(", "radius", ")", "\n", "permissive_loss", "=", "torch", ".", "mean", "(", "norm_deformed_normalized", "[", "norm_deformed_normalized", ">", "1.0", "]", ")", "\n", "return", "permissive_loss", "\n", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.RandLANet.modules.RandlaKernel.__init__": [[17, 23], ["torch_geometric.nn.MessagePassing.__init__", "MLP", "MLP", "MLP"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.MLP", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.MLP", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.MLP"], ["class", "XConv", "(", "torch", ".", "nn", ".", "Module", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.RandLANet.modules.RandlaKernel.forward": [[24, 27], ["modules.RandlaKernel.propagate"], "methods", ["None"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.RandLANet.modules.RandlaKernel.message": [[28, 52], ["torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "modules.RandlaKernel.point_pos_nn", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "modules.RandlaKernel.attention_nn", "torch.softmax", "torch.softmax", "torch.norm", "torch.norm", "torch.norm", "torch.norm"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat"], ["\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.RandLANet.modules.RandlaKernel.update": [[53, 55], ["modules.RandlaKernel.global_nn"], "methods", ["None"], ["\n", "def", "__init__", "(", "\n", "self", ",", "in_channels", ",", "out_channels", ",", "dim", ",", "kernel_size", ",", "hidden_channels", "=", "None", ",", "dilation", "=", "1", ",", "bias", "=", "True", ",", "**", "kwargs", ",", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.RandLANet.modules.RandlaConv.__init__": [[58, 65], ["BaseConvolutionDown.__init__", "modules.RandlaKernel", "RandomSampler", "KNNNeighbourFinder", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get"], ["\n", "self", ".", "in_channels", "=", "in_channels", "\n", "if", "hidden_channels", "is", "None", ":", "\n", "            ", "hidden_channels", "=", "in_channels", "//", "4", "\n", "", "assert", "hidden_channels", ">", "0", "\n", "self", ".", "hidden_channels", "=", "hidden_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "dim", "=", "dim", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.RandLANet.modules.RandlaConv.conv": [[66, 68], ["modules.RandlaConv._conv"], "methods", ["None"], ["self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "dilation", "=", "dilation", "\n", "self", ".", "kwargs", "=", "kwargs", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.RandLANet.modules.DilatedResidualBlock.__init__": [[71, 95], ["BaseResnetBlock.__init__", "modules.RandlaConv", "modules.RandlaConv", "kwargs.get", "kwargs.get", "kwargs.get"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get"], ["D", ",", "K", "=", "dim", ",", "kernel_size", "\n", "\n", "self", ".", "mlp1", "=", "S", "(", "\n", "L", "(", "dim", ",", "C_delta", ")", ",", "ELU", "(", ")", ",", "BN", "(", "C_delta", ")", ",", "L", "(", "C_delta", ",", "C_delta", ")", ",", "ELU", "(", ")", ",", "BN", "(", "C_delta", ")", ",", "Reshape", "(", "-", "1", ",", "K", ",", "C_delta", ")", ",", "\n", ")", "\n", "\n", "self", ".", "mlp2", "=", "S", "(", "\n", "L", "(", "D", "*", "K", ",", "K", "**", "2", ")", ",", "\n", "ELU", "(", ")", ",", "\n", "BN", "(", "K", "**", "2", ")", ",", "\n", "Reshape", "(", "-", "1", ",", "K", ",", "K", ")", ",", "\n", "Conv1d", "(", "K", ",", "K", "**", "2", ",", "K", ",", "groups", "=", "K", ")", ",", "\n", "ELU", "(", ")", ",", "\n", "BN", "(", "K", "**", "2", ")", ",", "\n", "Reshape", "(", "-", "1", ",", "K", ",", "K", ")", ",", "\n", "Conv1d", "(", "K", ",", "K", "**", "2", ",", "K", ",", "groups", "=", "K", ")", ",", "\n", "BN", "(", "K", "**", "2", ")", ",", "\n", "Reshape", "(", "-", "1", ",", "K", ",", "K", ")", ",", "\n", ")", "\n", "\n", "C_in", "=", "C_in", "+", "C_delta", "\n", "depth_multiplier", "=", "int", "(", "ceil", "(", "C_out", "/", "C_in", ")", ")", "\n", "self", ".", "conv", "=", "S", "(", "\n", "Conv1d", "(", "C_in", ",", "C_in", "*", "depth_multiplier", ",", "K", ",", "groups", "=", "C_in", ")", ",", "\n", "Reshape", "(", "-", "1", ",", "C_in", "*", "depth_multiplier", ")", ",", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.RandLANet.modules.DilatedResidualBlock.convs": [[97, 101], ["modules.DilatedResidualBlock.conv1", "modules.DilatedResidualBlock.conv2"], "methods", ["None"], [")", "\n", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n", "", "def", "reset_parameters", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.RandLANet.modules.RandLANetRes.__init__": [[104, 120], ["super().__init__", "modules.DilatedResidualBlock"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["reset", "(", "self", ".", "conv", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "pos", ",", "edge_index", ")", ":", "\n", "\n", "# posTo = the points that will be centers of convolutions", "\n", "# posFrom = points that have edges to the centers of convolutions", "\n", "# For a down conv, posFrom = pos, posTo = pos[idx]", "\n", "# For an up conv, posFrom = pos, posTo = pos_skip", "\n", "        ", "posFrom", ",", "posTo", "=", "pos", "\n", "\n", "(", "N", ",", "D", ")", ",", "K", "=", "posTo", ".", "size", "(", ")", ",", "self", ".", "kernel_size", "\n", "\n", "idxFrom", ",", "idxTo", "=", "edge_index", "\n", "\n", "relPos", "=", "posTo", "[", "idxTo", "]", "-", "posFrom", "[", "idxFrom", "]", "\n", "\n", "x_star", "=", "self", ".", "mlp1", "(", "relPos", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.RandLANet.modules.RandLANetRes.forward": [[122, 124], ["modules.RandLANetRes._conv.forward"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.forward"], ["if", "x", "is", "not", "None", ":", "\n", "            ", "x", "=", "x", ".", "unsqueeze", "(", "-", "1", ")", "if", "x", ".", "dim", "(", ")", "==", "1", "else", "x", "\n", "x", "=", "x", "[", "idxFrom", "]", ".", "view", "(", "N", ",", "K", ",", "self", ".", "in_channels", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.PVCNN.blocks.BasicConvolutionBlock.__init__": [[7, 13], ["torch.Module.__init__", "torch.Sequential", "torchsparse.Conv3d", "torchsparse.BatchNorm", "torchsparse.ReLU"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["from", "torch_points3d", ".", "core", ".", "spatial_ops", "import", "RadiusNeighbourFinder", "\n", "from", "torch_points3d", ".", "core", ".", "data_transform", "import", "GridSampling3D", "\n", "from", "torch_points3d", ".", "utils", ".", "enums", "import", "ConvolutionFormat", "\n", "from", "torch_points3d", ".", "core", ".", "base_conv", ".", "message_passing", "import", "GlobalBaseModule", "\n", "from", "torch_points3d", ".", "core", ".", "common_modules", ".", "base_modules", "import", "Identity", "\n", "from", "torch_points3d", ".", "utils", ".", "config", "import", "is_list", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.PVCNN.blocks.BasicConvolutionBlock.forward": [[15, 18], ["blocks.BasicConvolutionBlock.net"], "methods", ["None"], ["class", "SimpleBlock", "(", "BaseModule", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.PVCNN.blocks.BasicDeconvolutionBlock.__init__": [[21, 25], ["torch.Module.__init__", "torch.Sequential", "torchsparse.Conv3d", "torchsparse.BatchNorm", "torchsparse.ReLU"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["CONV_TYPE", "=", "ConvolutionFormat", ".", "PARTIAL_DENSE", ".", "value", "\n", "DEFORMABLE_DENSITY", "=", "5.0", "\n", "RIGID_DENSITY", "=", "2.5", "\n", "\n", "def", "__init__", "(", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.PVCNN.blocks.BasicDeconvolutionBlock.forward": [[27, 29], ["blocks.BasicDeconvolutionBlock.net"], "methods", ["None"], ["down_conv_nn", "=", "None", ",", "\n", "grid_size", "=", "None", ",", "\n", "prev_grid_size", "=", "None", ",", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.PVCNN.blocks.ResidualBlock.__init__": [[32, 49], ["torch.Module.__init__", "torch.Sequential", "torchsparse.ReLU", "torchsparse.Conv3d", "torchsparse.BatchNorm", "torchsparse.ReLU", "torchsparse.Conv3d", "torchsparse.BatchNorm", "torch.Sequential", "torch.Sequential", "torchsparse.Conv3d", "torchsparse.BatchNorm"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["activation", "=", "torch", ".", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.1", ")", ",", "\n", "bn_momentum", "=", "0.02", ",", "\n", "bn", "=", "FastBatchNorm1d", ",", "\n", "deformable", "=", "False", ",", "\n", "add_one", "=", "False", ",", "\n", "**", "kwargs", ",", "\n", ")", ":", "\n", "        ", "super", "(", "SimpleBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "len", "(", "down_conv_nn", ")", "==", "2", "\n", "num_inputs", ",", "num_outputs", "=", "down_conv_nn", "\n", "if", "deformable", ":", "\n", "            ", "density_parameter", "=", "self", ".", "DEFORMABLE_DENSITY", "\n", "self", ".", "kp_conv", "=", "KPConvDeformableLayer", "(", "\n", "num_inputs", ",", "num_outputs", ",", "point_influence", "=", "prev_grid_size", "*", "sigma", ",", "add_one", "=", "add_one", ",", "**", "kwargs", "\n", ")", "\n", "", "else", ":", "\n", "            ", "density_parameter", "=", "self", ".", "RIGID_DENSITY", "\n", "self", ".", "kp_conv", "=", "KPConvLayer", "(", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.PVCNN.blocks.ResidualBlock.forward": [[50, 53], ["blocks.ResidualBlock.relu", "blocks.ResidualBlock.net", "blocks.ResidualBlock.downsample"], "methods", ["None"], ["num_inputs", ",", "num_outputs", ",", "point_influence", "=", "prev_grid_size", "*", "sigma", ",", "add_one", "=", "add_one", ",", "**", "kwargs", "\n", ")", "\n", "", "search_radius", "=", "density_parameter", "*", "sigma", "*", "prev_grid_size", "\n", "self", ".", "neighbour_finder", "=", "RadiusNeighbourFinder", "(", "search_radius", ",", "max_num_neighbors", ",", "conv_type", "=", "self", ".", "CONV_TYPE", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.PVCNN.pvcnn.PVCNN.__init__": [[16, 114], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Sequential", "torch.ModuleList", "pvcnn.PVCNN.weight_initialization", "torch.Dropout", "int", "torchsparse.Conv3d", "torchsparse.Conv3d", "torchsparse.Conv3d", "torchsparse.BatchNorm", "torchsparse.BatchNorm", "torchsparse.BatchNorm", "torchsparse.ReLU", "torchsparse.ReLU", "torchsparse.ReLU", "torchsparse.Conv3d", "torchsparse.Conv3d", "torchsparse.Conv3d", "torchsparse.BatchNorm", "torchsparse.BatchNorm", "torchsparse.BatchNorm", "torchsparse.ReLU", "torchsparse.ReLU", "torchsparse.ReLU", "BasicConvolutionBlock", "ResidualBlock", "ResidualBlock", "BasicConvolutionBlock", "ResidualBlock", "ResidualBlock", "BasicConvolutionBlock", "ResidualBlock", "ResidualBlock", "BasicConvolutionBlock", "ResidualBlock", "ResidualBlock", "torch.Linear", "BasicDeconvolutionBlock", "torch.Sequential", "BasicDeconvolutionBlock", "torch.Sequential", "BasicDeconvolutionBlock", "torch.Sequential", "BasicDeconvolutionBlock", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "ResidualBlock", "ResidualBlock", "ResidualBlock", "ResidualBlock", "ResidualBlock", "ResidualBlock", "ResidualBlock", "ResidualBlock", "torch.Linear", "torch.BatchNorm1d", "torch.ReLU", "torch.Linear", "torch.BatchNorm1d", "torch.ReLU", "torch.Linear", "torch.BatchNorm1d", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.res16unet.ResNetBase.weight_initialization"], ["    ", "def", "__init__", "(", "self", ",", "option", ",", "model_type", ",", "dataset", ",", "modules", ")", ":", "\n", "        ", "super", "(", "PVCNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "cr", "=", "option", ".", "cr", "\n", "self", ".", "vres", "=", "option", ".", "vres", "\n", "self", ".", "num_classes", "=", "dataset", ".", "num_classes", "\n", "self", ".", "num_features", "=", "dataset", ".", "feature_dimension", "\n", "\n", "cs", "=", "[", "32", ",", "32", ",", "64", ",", "128", ",", "256", ",", "256", ",", "128", ",", "96", ",", "96", "]", "\n", "cs", "=", "[", "int", "(", "cr", "*", "x", ")", "for", "x", "in", "cs", "]", "\n", "\n", "self", ".", "stem", "=", "nn", ".", "Sequential", "(", "\n", "spnn", ".", "Conv3d", "(", "self", ".", "num_features", ",", "cs", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ")", ",", "\n", "spnn", ".", "BatchNorm", "(", "cs", "[", "0", "]", ")", ",", "\n", "spnn", ".", "ReLU", "(", "True", ")", ",", "\n", "spnn", ".", "Conv3d", "(", "cs", "[", "0", "]", ",", "cs", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ")", ",", "\n", "spnn", ".", "BatchNorm", "(", "cs", "[", "0", "]", ")", ",", "\n", "spnn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n", "\n", "self", ".", "stage1", "=", "nn", ".", "Sequential", "(", "\n", "BasicConvolutionBlock", "(", "cs", "[", "0", "]", ",", "cs", "[", "0", "]", ",", "ks", "=", "2", ",", "stride", "=", "2", ",", "dilation", "=", "1", ")", ",", "\n", "ResidualBlock", "(", "cs", "[", "0", "]", ",", "cs", "[", "1", "]", ",", "ks", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ",", "\n", "ResidualBlock", "(", "cs", "[", "1", "]", ",", "cs", "[", "1", "]", ",", "ks", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ",", "\n", ")", "\n", "\n", "self", ".", "stage2", "=", "nn", ".", "Sequential", "(", "\n", "BasicConvolutionBlock", "(", "cs", "[", "1", "]", ",", "cs", "[", "1", "]", ",", "ks", "=", "2", ",", "stride", "=", "2", ",", "dilation", "=", "1", ")", ",", "\n", "ResidualBlock", "(", "cs", "[", "1", "]", ",", "cs", "[", "2", "]", ",", "ks", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ",", "\n", "ResidualBlock", "(", "cs", "[", "2", "]", ",", "cs", "[", "2", "]", ",", "ks", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ",", "\n", ")", "\n", "\n", "self", ".", "stage3", "=", "nn", ".", "Sequential", "(", "\n", "BasicConvolutionBlock", "(", "cs", "[", "2", "]", ",", "cs", "[", "2", "]", ",", "ks", "=", "2", ",", "stride", "=", "2", ",", "dilation", "=", "1", ")", ",", "\n", "ResidualBlock", "(", "cs", "[", "2", "]", ",", "cs", "[", "3", "]", ",", "ks", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ",", "\n", "ResidualBlock", "(", "cs", "[", "3", "]", ",", "cs", "[", "3", "]", ",", "ks", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ",", "\n", ")", "\n", "\n", "self", ".", "stage4", "=", "nn", ".", "Sequential", "(", "\n", "BasicConvolutionBlock", "(", "cs", "[", "3", "]", ",", "cs", "[", "3", "]", ",", "ks", "=", "2", ",", "stride", "=", "2", ",", "dilation", "=", "1", ")", ",", "\n", "ResidualBlock", "(", "cs", "[", "3", "]", ",", "cs", "[", "4", "]", ",", "ks", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ",", "\n", "ResidualBlock", "(", "cs", "[", "4", "]", ",", "cs", "[", "4", "]", ",", "ks", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ",", "\n", ")", "\n", "\n", "self", ".", "up1", "=", "nn", ".", "ModuleList", "(", "\n", "[", "\n", "BasicDeconvolutionBlock", "(", "cs", "[", "4", "]", ",", "cs", "[", "5", "]", ",", "ks", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "Sequential", "(", "\n", "ResidualBlock", "(", "cs", "[", "5", "]", "+", "cs", "[", "3", "]", ",", "cs", "[", "5", "]", ",", "ks", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ",", "\n", "ResidualBlock", "(", "cs", "[", "5", "]", ",", "cs", "[", "5", "]", ",", "ks", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ",", "\n", ")", ",", "\n", "]", "\n", ")", "\n", "\n", "self", ".", "up2", "=", "nn", ".", "ModuleList", "(", "\n", "[", "\n", "BasicDeconvolutionBlock", "(", "cs", "[", "5", "]", ",", "cs", "[", "6", "]", ",", "ks", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "Sequential", "(", "\n", "ResidualBlock", "(", "cs", "[", "6", "]", "+", "cs", "[", "2", "]", ",", "cs", "[", "6", "]", ",", "ks", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ",", "\n", "ResidualBlock", "(", "cs", "[", "6", "]", ",", "cs", "[", "6", "]", ",", "ks", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ",", "\n", ")", ",", "\n", "]", "\n", ")", "\n", "\n", "self", ".", "up3", "=", "nn", ".", "ModuleList", "(", "\n", "[", "\n", "BasicDeconvolutionBlock", "(", "cs", "[", "6", "]", ",", "cs", "[", "7", "]", ",", "ks", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "Sequential", "(", "\n", "ResidualBlock", "(", "cs", "[", "7", "]", "+", "cs", "[", "1", "]", ",", "cs", "[", "7", "]", ",", "ks", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ",", "\n", "ResidualBlock", "(", "cs", "[", "7", "]", ",", "cs", "[", "7", "]", ",", "ks", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ",", "\n", ")", ",", "\n", "]", "\n", ")", "\n", "\n", "self", ".", "up4", "=", "nn", ".", "ModuleList", "(", "\n", "[", "\n", "BasicDeconvolutionBlock", "(", "cs", "[", "7", "]", ",", "cs", "[", "8", "]", ",", "ks", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "Sequential", "(", "\n", "ResidualBlock", "(", "cs", "[", "8", "]", "+", "cs", "[", "0", "]", ",", "cs", "[", "8", "]", ",", "ks", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ",", "\n", "ResidualBlock", "(", "cs", "[", "8", "]", ",", "cs", "[", "8", "]", ",", "ks", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ",", "\n", ")", ",", "\n", "]", "\n", ")", "\n", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "cs", "[", "8", "]", ",", "self", ".", "num_classes", ")", ")", "\n", "\n", "self", ".", "point_transforms", "=", "nn", ".", "ModuleList", "(", "\n", "[", "\n", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "cs", "[", "0", "]", ",", "cs", "[", "4", "]", ")", ",", "nn", ".", "BatchNorm1d", "(", "cs", "[", "4", "]", ")", ",", "nn", ".", "ReLU", "(", "True", ")", ",", ")", ",", "\n", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "cs", "[", "4", "]", ",", "cs", "[", "6", "]", ")", ",", "nn", ".", "BatchNorm1d", "(", "cs", "[", "6", "]", ")", ",", "nn", ".", "ReLU", "(", "True", ")", ",", ")", ",", "\n", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "cs", "[", "6", "]", ",", "cs", "[", "8", "]", ")", ",", "nn", ".", "BatchNorm1d", "(", "cs", "[", "8", "]", ")", ",", "nn", ".", "ReLU", "(", "True", ")", ",", ")", ",", "\n", "]", "\n", ")", "\n", "\n", "self", ".", "weight_initialization", "(", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "0.3", ",", "True", ")", "\n", "\n", "self", ".", "loss_names", "=", "[", "\"loss_seg\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.PVCNN.pvcnn.PVCNN.weight_initialization": [[115, 120], ["pvcnn.PVCNN.modules", "isinstance", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["", "def", "weight_initialization", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm1d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.PVCNN.pvcnn.PVCNN.forward": [[121, 165], ["torchsparse.point_tensor.PointTensor", "torchsparse.point_tensor.PointTensor", "torchsparse.point_tensor.PointTensor", "initial_voxelize", "pvcnn.PVCNN.stem", "voxel_to_point", "point_to_voxel", "pvcnn.PVCNN.stage1", "pvcnn.PVCNN.stage2", "pvcnn.PVCNN.stage3", "pvcnn.PVCNN.stage4", "voxel_to_point", "point_to_voxel", "pvcnn.PVCNN.dropout", "torchsparse.cat", "torchsparse.cat", "torchsparse.cat", "torchsparse.cat", "torchsparse.cat", "torchsparse.cat", "torchsparse.cat", "torchsparse.cat", "torchsparse.cat", "torchsparse.cat", "torchsparse.cat", "torchsparse.cat", "torchsparse.cat", "torchsparse.cat", "torchsparse.cat", "torchsparse.cat", "torchsparse.cat", "torchsparse.cat", "voxel_to_point", "point_to_voxel", "pvcnn.PVCNN.dropout", "torchsparse.cat", "torchsparse.cat", "torchsparse.cat", "torchsparse.cat", "torchsparse.cat", "torchsparse.cat", "torchsparse.cat", "torchsparse.cat", "torchsparse.cat", "torchsparse.cat", "torchsparse.cat", "torchsparse.cat", "torchsparse.cat", "torchsparse.cat", "torchsparse.cat", "torchsparse.cat", "torchsparse.cat", "torchsparse.cat", "voxel_to_point", "pvcnn.PVCNN.classifier", "x.C.float"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.PVCNN.utils.initial_voxelize", "home.repos.pwc.inspect_result.drprojects_deepviewagg.PVCNN.utils.voxel_to_point", "home.repos.pwc.inspect_result.drprojects_deepviewagg.PVCNN.utils.point_to_voxel", "home.repos.pwc.inspect_result.drprojects_deepviewagg.PVCNN.utils.voxel_to_point", "home.repos.pwc.inspect_result.drprojects_deepviewagg.PVCNN.utils.point_to_voxel", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.PVCNN.utils.voxel_to_point", "home.repos.pwc.inspect_result.drprojects_deepviewagg.PVCNN.utils.point_to_voxel", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.PVCNN.utils.voxel_to_point"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# x: SparseTensor z: PointTensor", "\n", "        ", "z", "=", "PointTensor", "(", "x", ".", "F", ",", "x", ".", "C", ".", "float", "(", ")", ")", "\n", "\n", "x0", "=", "initial_voxelize", "(", "z", ",", "1.0", ",", "self", ".", "vres", ")", "\n", "\n", "x0", "=", "self", ".", "stem", "(", "x0", ")", "\n", "z0", "=", "voxel_to_point", "(", "x0", ",", "z", ",", "nearest", "=", "False", ")", "\n", "z0", ".", "F", "=", "z0", ".", "F", "\n", "\n", "x1", "=", "point_to_voxel", "(", "x0", ",", "z0", ")", "\n", "x1", "=", "self", ".", "stage1", "(", "x1", ")", "\n", "x2", "=", "self", ".", "stage2", "(", "x1", ")", "\n", "x3", "=", "self", ".", "stage3", "(", "x2", ")", "\n", "x4", "=", "self", ".", "stage4", "(", "x3", ")", "\n", "z1", "=", "voxel_to_point", "(", "x4", ",", "z0", ")", "\n", "z1", ".", "F", "=", "z1", ".", "F", "+", "self", ".", "point_transforms", "[", "0", "]", "(", "z0", ".", "F", ")", "\n", "\n", "y1", "=", "point_to_voxel", "(", "x4", ",", "z1", ")", "\n", "y1", ".", "F", "=", "self", ".", "dropout", "(", "y1", ".", "F", ")", "\n", "y1", "=", "self", ".", "up1", "[", "0", "]", "(", "y1", ")", "\n", "y1", "=", "torchsparse", ".", "cat", "(", "[", "y1", ",", "x3", "]", ")", "\n", "y1", "=", "self", ".", "up1", "[", "1", "]", "(", "y1", ")", "\n", "\n", "y2", "=", "self", ".", "up2", "[", "0", "]", "(", "y1", ")", "\n", "y2", "=", "torchsparse", ".", "cat", "(", "[", "y2", ",", "x2", "]", ")", "\n", "y2", "=", "self", ".", "up2", "[", "1", "]", "(", "y2", ")", "\n", "z2", "=", "voxel_to_point", "(", "y2", ",", "z1", ")", "\n", "z2", ".", "F", "=", "z2", ".", "F", "+", "self", ".", "point_transforms", "[", "1", "]", "(", "z1", ".", "F", ")", "\n", "\n", "y3", "=", "point_to_voxel", "(", "y2", ",", "z2", ")", "\n", "y3", ".", "F", "=", "self", ".", "dropout", "(", "y3", ".", "F", ")", "\n", "y3", "=", "self", ".", "up3", "[", "0", "]", "(", "y3", ")", "\n", "y3", "=", "torchsparse", ".", "cat", "(", "[", "y3", ",", "x1", "]", ")", "\n", "y3", "=", "self", ".", "up3", "[", "1", "]", "(", "y3", ")", "\n", "\n", "y4", "=", "self", ".", "up4", "[", "0", "]", "(", "y3", ")", "\n", "y4", "=", "torchsparse", ".", "cat", "(", "[", "y4", ",", "x0", "]", ")", "\n", "y4", "=", "self", ".", "up4", "[", "1", "]", "(", "y4", ")", "\n", "z3", "=", "voxel_to_point", "(", "y4", ",", "z2", ")", "\n", "z3", ".", "F", "=", "z3", ".", "F", "+", "self", ".", "point_transforms", "[", "2", "]", "(", "z2", ".", "F", ")", "\n", "\n", "self", ".", "output", "=", "self", ".", "classifier", "(", "z3", ".", "F", ")", "\n", "return", "self", ".", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.PVCNN.utils.initial_voxelize": [[15, 34], ["torch.cat", "torchsparse.sphash", "torch.unique", "torchsparse.sphashquery", "torchsparse.spcount", "torchsparse.spvoxelize", "torch.round().int", "torchsparse.spvoxelize", "torchsparse.sparse_tensor.SparseTensor", "torchsparse.sparse_tensor.SparseTensor.check", "torch.floor().int", "spf.sphashquery.int", "len", "torch.floor", "z.C[].view", "torch.round", "torch.floor"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.SparseTensor", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["# Search for images and poses", "\n", "image_names", "=", "sorted", "(", "[", "\n", "osp", ".", "basename", "(", "x", ")", ".", "replace", "(", "image_suffix", ",", "''", ")", "\n", "for", "x", "in", "glob", ".", "glob", "(", "osp", ".", "join", "(", "image_dir", ",", "'*'", "+", "image_suffix", ")", ")", "]", ")", "\n", "pose_names", "=", "sorted", "(", "[", "\n", "osp", ".", "basename", "(", "x", ")", ".", "replace", "(", "pose_suffix", ",", "''", ")", "\n", "for", "x", "in", "glob", ".", "glob", "(", "osp", ".", "join", "(", "pose_dir", ",", "'*'", "+", "pose_suffix", ")", ")", "]", ")", "\n", "\n", "# Remove images specified by skip_names", "\n", "skip_names", "=", "skip_names", "if", "skip_names", "is", "not", "None", "else", "[", "]", "\n", "image_names", "=", "[", "x", "for", "x", "in", "image_names", "if", "x", "not", "in", "skip_names", "]", "\n", "pose_names", "=", "[", "x", "for", "x", "in", "pose_names", "if", "x", "not", "in", "skip_names", "]", "\n", "\n", "# Print orphans", "\n", "if", "not", "image_names", "==", "pose_names", ":", "\n", "        ", "image_orphan", "=", "[", "\n", "osp", ".", "join", "(", "image_dir", ",", "x", "+", "image_suffix", ")", "\n", "for", "x", "in", "set", "(", "image_names", ")", "-", "set", "(", "pose_names", ")", "]", "\n", "pose_orphan", "=", "[", "\n", "osp", ".", "join", "(", "pose_dir", ",", "x", "+", "pose_suffix", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.PVCNN.utils.point_to_voxel": [[38, 61], ["torchsparse.spvoxelize", "torchsparse.sparse_tensor.SparseTensor", "torchsparse.sphash", "torchsparse.sphash", "torchsparse.sphashquery", "torchsparse.spcount", "z.additional_features.get", "z.additional_features[].get", "torch.cat", "spf.sphashquery.int", "z.C[].int().view", "torch.floor().int", "z.C[].int", "torch.floor"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.SparseTensor", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat"], ["if", "verbose", ":", "\n", "            ", "for", "x", "in", "image_orphan", ":", "\n", "                ", "print", "(", "4", "*", "' '", "+", "'/'", ".", "join", "(", "x", ".", "split", "(", "'/'", ")", "[", "-", "4", ":", "]", ")", ")", "\n", "", "", "print", "(", "f\"  Orphan poses  : {len(pose_orphan)}/{len(pose_names)}\"", ")", "\n", "if", "verbose", ":", "\n", "            ", "for", "x", "in", "pose_orphan", ":", "\n", "                ", "print", "(", "4", "*", "' '", "+", "'/'", ".", "join", "(", "x", ".", "split", "(", "'/'", ")", "[", "-", "4", ":", "]", ")", ")", "\n", "\n", "# Only return the recovered pairs", "\n", "", "", "", "correspondences", "=", "sorted", "(", "list", "(", "set", "(", "image_names", ")", ".", "intersection", "(", "\n", "set", "(", "pose_names", ")", ")", ")", ")", "\n", "pairs", "=", "[", "(", "\n", "osp", ".", "join", "(", "image_dir", ",", "x", "+", "image_suffix", ")", ",", "\n", "osp", ".", "join", "(", "pose_dir", ",", "x", "+", "pose_suffix", ")", ")", "\n", "for", "x", "in", "correspondences", "]", "\n", "return", "pairs", "\n", "\n", "\n", "", "def", "img_info_to_img_data", "(", "info_ld", ",", "img_size", ")", ":", "\n", "    ", "\"\"\"Helper function to convert a list of image info dictionaries\n    into a more convenient SameSettingImageData object.\n    \"\"\"", "\n", "if", "len", "(", "info_ld", ")", ">", "0", ":", "\n", "        ", "info_dl", "=", "{", "k", ":", "[", "dic", "[", "k", "]", "for", "dic", "in", "info_ld", "]", "for", "k", "in", "info_ld", "[", "0", "]", "}", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.PVCNN.utils.voxel_to_point": [[65, 94], ["KernelRegion", "KernelRegion.get_kernel_offset().to", "torchsparse.sphash", "torchsparse.sphash", "torchsparse.sphashquery", "torchsparse.calc_ti_weights().transpose().contiguous", "idx_query.transpose().contiguous.transpose().contiguous", "torchsparse.spdevoxelize", "torchsparse.point_tensor.PointTensor", "torchsparse.spdevoxelize", "torchsparse.point_tensor.PointTensor", "z.idx_query.get", "z.weights.get", "torch.cat", "x.C.to", "z.idx_query.get", "z.weights.get", "KernelRegion.get_kernel_offset", "torchsparse.calc_ti_weights().transpose", "idx_query.transpose().contiguous.transpose", "z.C[].int().view", "torch.floor().int", "torchsparse.calc_ti_weights", "z.C[].int", "torch.floor"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get"], ["", "else", ":", "\n", "        ", "image_data", "=", "SameSettingImageData", "(", "ref_size", "=", "img_size", ")", "\n", "", "return", "image_data", "\n", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.PPNet.ops.PosPoolLayer.__init__": [[8, 35], ["torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "super().__init__", "bn", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.Linear", "torch.Linear", "bn"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "num_inputs", ",", "\n", "num_outputs", ",", "\n", "radius", ",", "\n", "position_embedding", "=", "\"xyz\"", ",", "\n", "reduction", "=", "\"avg\"", ",", "\n", "output_conv", "=", "False", ",", "\n", "activation", "=", "torch", ".", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ")", ",", "\n", "bn_momentum", "=", "0.02", ",", "\n", "bn", "=", "FastBatchNorm1d", ",", "\n", ")", ":", "\n", "        ", "super", "(", "PosPoolLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_inputs", "=", "num_inputs", "\n", "self", ".", "num_outputs", "=", "num_outputs", "\n", "self", ".", "radius", "=", "radius", "\n", "self", ".", "position_embedding", "=", "position_embedding", "\n", "self", ".", "reduction", "=", "reduction", "\n", "self", ".", "output_conv", "=", "True", "if", "num_outputs", "!=", "num_inputs", "else", "output_conv", "\n", "if", "bn", ":", "\n", "            ", "self", ".", "bn", "=", "bn", "(", "num_inputs", ",", "momentum", "=", "bn_momentum", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "bn", "=", "None", "\n", "", "self", ".", "activation", "=", "activation", "\n", "if", "self", ".", "output_conv", ":", "\n", "            ", "self", ".", "oconv", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "num_inputs", ",", "num_outputs", ",", "bias", "=", "False", ")", ",", "bn", "(", "num_outputs", ",", "momentum", "=", "bn_momentum", ")", ",", "activation", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.PPNet.ops.PosPoolLayer.forward": [[37, 128], ["torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch_points3d.core.common_modules.gathering.gather", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch_points3d.core.common_modules.gathering.gather", "geo_prior.unsqueeze.unsqueeze.unsqueeze", "torch_points3d.core.common_modules.gathering.gather.view", "torch.max.view", "torch.max.view", "ops.PosPoolLayer.activation", "query_points.unsqueeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "ops.PosPoolLayer.bn", "ops.PosPoolLayer.oconv", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.max", "torch.max", "torch.max", "torch.max", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "embedding.view.view.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "embedding.view.view.view", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "neighbors_n.unsqueeze", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch_points3d.core.common_modules.gathering.gather", "torch.max", "torch.max", "torch.max", "torch.max", "NotImplementedError", "position_mat.unsqueeze", "position_mat.unsqueeze", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.gathering.gather", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.gathering.gather", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.gathering.gather"], ["", "", "def", "forward", "(", "self", ",", "query_points", ",", "support_points", ",", "neighbors", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        - query_points(torch Tensor): query of size N x 3\n        - support_points(torch Tensor): support points of size N0 x 3\n        - neighbors(torch Tensor): neighbors of size N x M\n        - features : feature of size N0 x d (d is the number of inputs)\n        \"\"\"", "\n", "N", "=", "query_points", ".", "shape", "[", "0", "]", "\n", "M", "=", "neighbors", ".", "shape", "[", "1", "]", "\n", "# Add a fake point in the last row for shadow neighbors", "\n", "shadow_point", "=", "torch", ".", "zeros_like", "(", "support_points", "[", ":", "1", ",", ":", "]", ")", "\n", "support_points", "=", "torch", ".", "cat", "(", "[", "support_points", ",", "shadow_point", "]", ",", "dim", "=", "0", ")", "\n", "# Get neighbor points [N, M, d]", "\n", "neighbor_points", "=", "gather", "(", "support_points", ",", "neighbors", ")", "\n", "# Center every neighborhood", "\n", "relative_position", "=", "neighbor_points", "-", "query_points", ".", "unsqueeze", "(", "1", ")", "\n", "relative_position", "=", "relative_position", "/", "self", ".", "radius", "\n", "\n", "# Deal with input feature", "\n", "shadow_features", "=", "torch", ".", "zeros_like", "(", "x", "[", ":", "1", ",", ":", "]", ")", "\n", "support_features", "=", "torch", ".", "cat", "(", "[", "x", ",", "shadow_features", "]", ",", "dim", "=", "0", ")", "\n", "neighborhood_features", "=", "gather", "(", "support_features", ",", "neighbors", ")", "\n", "\n", "if", "self", ".", "position_embedding", "==", "\"xyz\"", ":", "\n", "            ", "geo_prior", "=", "relative_position", "\n", "mid_fdim", "=", "3", "\n", "shared_channels", "=", "self", ".", "num_inputs", "//", "3", "\n", "", "elif", "self", ".", "position_embedding", "==", "\"sin_cos\"", ":", "\n", "            ", "position_mat", "=", "relative_position", "# [N, M, 3]", "\n", "if", "self", ".", "num_inputs", "==", "9", ":", "\n", "                ", "feat_dim", "=", "1", "\n", "wave_length", "=", "1000", "\n", "alpha", "=", "100", "\n", "feat_range", "=", "torch", ".", "arange", "(", "feat_dim", ",", "dtype", "=", "x", ".", "dtype", ")", ".", "to", "(", "x", ".", "device", ")", "# (feat_dim, )", "\n", "dim_mat", "=", "torch", ".", "pow", "(", "1.0", "*", "wave_length", ",", "(", "1.0", "/", "feat_dim", ")", "*", "feat_range", ")", "# (feat_dim, )", "\n", "position_mat", "=", "alpha", "*", "position_mat", ".", "unsqueeze", "(", "-", "1", ")", "\n", "div_mat", "=", "position_mat", "/", "dim_mat", "# [N, M, 3, feat_dim]", "\n", "sin_mat", "=", "torch", ".", "sin", "(", "div_mat", ")", "# [N, M, 3, feat_dim]", "\n", "cos_mat", "=", "torch", ".", "cos", "(", "div_mat", ")", "# [N, M, 3, feat_dim]", "\n", "embedding", "=", "torch", ".", "cat", "(", "[", "sin_mat", ",", "cos_mat", "]", ",", "-", "1", ")", "# [N, M, 3, 2*feat_dim]", "\n", "embedding", "=", "embedding", ".", "view", "(", "N", ",", "M", ",", "6", ")", "\n", "embedding", "=", "torch", ".", "cat", "(", "[", "embedding", ",", "relative_position", "]", ",", "-", "1", ")", "# [N, M, 9]", "\n", "geo_prior", "=", "embedding", "# [N, M, mid_dim]", "\n", "", "else", ":", "\n", "                ", "feat_dim", "=", "self", ".", "num_inputs", "//", "6", "\n", "wave_length", "=", "1000", "\n", "alpha", "=", "100", "\n", "feat_range", "=", "torch", ".", "arange", "(", "feat_dim", ",", "dtype", "=", "x", ".", "dtype", ")", ".", "to", "(", "x", ".", "device", ")", "# (feat_dim, )", "\n", "dim_mat", "=", "torch", ".", "pow", "(", "1.0", "*", "wave_length", ",", "(", "1.0", "/", "feat_dim", ")", "*", "feat_range", ")", "# (feat_dim, )", "\n", "position_mat", "=", "alpha", "*", "position_mat", ".", "unsqueeze", "(", "-", "1", ")", "# [N, M, 3, 1]", "\n", "div_mat", "=", "position_mat", "/", "dim_mat", "# [N, M, 3, feat_dim]", "\n", "sin_mat", "=", "torch", ".", "sin", "(", "div_mat", ")", "# [N, M, 3, feat_dim]", "\n", "cos_mat", "=", "torch", ".", "cos", "(", "div_mat", ")", "# [N, M, 3, feat_dim]", "\n", "embedding", "=", "torch", ".", "cat", "(", "[", "sin_mat", ",", "cos_mat", "]", ",", "-", "1", ")", "# [N, M, 3, 2*feat_dim]", "\n", "embedding", "=", "embedding", ".", "view", "(", "N", ",", "M", ",", "self", ".", "num_inputs", ")", "# [N, M, 6*feat_dim]", "\n", "geo_prior", "=", "embedding", "# [N, M, mid_dim]", "\n", "", "mid_fdim", "=", "self", ".", "num_inputs", "\n", "shared_channels", "=", "1", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "geo_prior", "=", "geo_prior", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n", "feature_map", "=", "neighborhood_features", ".", "view", "(", "N", ",", "M", ",", "mid_fdim", ",", "shared_channels", ")", "\n", "aggregation_feature", "=", "geo_prior", "*", "feature_map", "\n", "aggregation_feature", "=", "aggregation_feature", ".", "view", "(", "N", ",", "-", "1", ",", "self", ".", "num_inputs", ")", "# [N, M, d]", "\n", "\n", "if", "self", ".", "reduction", "==", "\"sum\"", ":", "\n", "            ", "aggregation_feature", "=", "torch", ".", "sum", "(", "aggregation_feature", ",", "1", ")", "# [N, d]", "\n", "", "elif", "self", ".", "reduction", "==", "\"avg\"", ":", "\n", "            ", "aggregation_feature", "=", "torch", ".", "sum", "(", "aggregation_feature", ",", "1", ")", "# [N, d]", "\n", "padding_num", "=", "torch", ".", "max", "(", "neighbors", ")", "\n", "neighbors_n", "=", "torch", ".", "sum", "(", "(", "neighbors", "<", "padding_num", ")", ",", "-", "1", ")", "+", "1e-5", "\n", "aggregation_feature", "=", "aggregation_feature", "/", "neighbors_n", ".", "unsqueeze", "(", "-", "1", ")", "\n", "", "elif", "self", ".", "reduction", "==", "\"max\"", ":", "\n", "# mask padding", "\n", "            ", "batch_mask", "=", "torch", ".", "zeros_like", "(", "x", ")", "# [n0_points, d]", "\n", "batch_mask", "=", "torch", ".", "cat", "(", "[", "batch_mask", ",", "-", "65535", "*", "torch", ".", "ones_like", "(", "batch_mask", "[", ":", "1", ",", ":", "]", ")", "]", ",", "dim", "=", "0", ")", "\n", "batch_mask", "=", "gather", "(", "batch_mask", ",", "neighbors", ")", "# [N, M, d]", "\n", "aggregation_feature", "=", "aggregation_feature", "+", "batch_mask", "\n", "aggregation_feature", "=", "torch", ".", "max", "(", "aggregation_feature", ",", "1", ")", "# [N, d]", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Reduction {} not supported in PosPool\"", ".", "format", "(", "self", ".", "reduction", ")", ")", "\n", "\n", "", "if", "self", ".", "bn", ":", "\n", "            ", "aggregation_feature", "=", "self", ".", "bn", "(", "aggregation_feature", ")", "\n", "", "aggregation_feature", "=", "self", ".", "activation", "(", "aggregation_feature", ")", "\n", "\n", "if", "self", ".", "output_conv", ":", "\n", "            ", "aggregation_feature", "=", "self", ".", "oconv", "(", "aggregation_feature", ")", "\n", "\n", "", "return", "aggregation_feature", "\n", "", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.PPNet.blocks.SimpleBlock.__init__": [[21, 58], ["torch.nn.LeakyReLU", "torch_points3d.core.common_modules.base_modules.BaseModule.__init__", "torch_points3d.core.spatial_ops.RadiusNeighbourFinder", "ops.PosPoolLayer", "len", "torch_points3d.core.data_transform.GridSampling3D"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["CONV_TYPE", "=", "ConvolutionFormat", ".", "PARTIAL_DENSE", ".", "value", "\n", "DEFORMABLE_DENSITY", "=", "5.0", "\n", "RIGID_DENSITY", "=", "2.5", "\n", "\n", "def", "__init__", "(", "\n", "self", ",", "\n", "down_conv_nn", "=", "None", ",", "\n", "grid_size", "=", "None", ",", "\n", "prev_grid_size", "=", "None", ",", "\n", "sigma", "=", "1.0", ",", "\n", "max_num_neighbors", "=", "16", ",", "\n", "activation", "=", "torch", ".", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.1", ")", ",", "\n", "bn_momentum", "=", "0.02", ",", "\n", "bn", "=", "FastBatchNorm1d", ",", "\n", "deformable", "=", "False", ",", "\n", "add_one", "=", "False", ",", "\n", "**", "kwargs", ",", "\n", ")", ":", "\n", "        ", "super", "(", "SimpleBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "len", "(", "down_conv_nn", ")", "==", "2", "\n", "num_inputs", ",", "num_outputs", "=", "down_conv_nn", "\n", "if", "deformable", ":", "\n", "            ", "density_parameter", "=", "self", ".", "DEFORMABLE_DENSITY", "\n", "self", ".", "kp_conv", "=", "KPConvDeformableLayer", "(", "\n", "num_inputs", ",", "num_outputs", ",", "point_influence", "=", "prev_grid_size", "*", "sigma", ",", "add_one", "=", "add_one", ",", "**", "kwargs", "\n", ")", "\n", "", "else", ":", "\n", "            ", "density_parameter", "=", "self", ".", "RIGID_DENSITY", "\n", "self", ".", "kp_conv", "=", "KPConvLayer", "(", "\n", "num_inputs", ",", "num_outputs", ",", "point_influence", "=", "prev_grid_size", "*", "sigma", ",", "add_one", "=", "add_one", ",", "**", "kwargs", "\n", ")", "\n", "", "search_radius", "=", "density_parameter", "*", "sigma", "*", "prev_grid_size", "\n", "self", ".", "neighbour_finder", "=", "RadiusNeighbourFinder", "(", "search_radius", ",", "max_num_neighbors", ",", "conv_type", "=", "self", ".", "CONV_TYPE", ")", "\n", "\n", "if", "bn", ":", "\n", "            ", "self", ".", "bn", "=", "bn", "(", "num_outputs", ",", "momentum", "=", "bn_momentum", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "bn", "=", "None", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.PPNet.blocks.SimpleBlock.forward": [[59, 84], ["blocks.SimpleBlock.pospool", "hasattr", "setattr", "blocks.SimpleBlock.neighbour_finder", "blocks.SimpleBlock.sampler", "data.clone", "data.clone"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.PPNet.blocks.PPStageBlock.neighbour_finder", "home.repos.pwc.inspect_result.drprojects_deepviewagg.PPNet.blocks.PPStageBlock.sampler", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.clone", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.clone"], ["", "self", ".", "activation", "=", "activation", "\n", "\n", "is_strided", "=", "prev_grid_size", "!=", "grid_size", "\n", "if", "is_strided", ":", "\n", "            ", "self", ".", "sampler", "=", "GridSampling3D", "(", "grid_size", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "sampler", "=", "None", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "data", ",", "precomputed", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "not", "hasattr", "(", "data", ",", "\"block_idx\"", ")", ":", "\n", "            ", "setattr", "(", "data", ",", "\"block_idx\"", ",", "0", ")", "\n", "\n", "", "if", "precomputed", ":", "\n", "            ", "query_data", "=", "precomputed", "[", "data", ".", "block_idx", "]", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "sampler", ":", "\n", "                ", "query_data", "=", "self", ".", "sampler", "(", "data", ".", "clone", "(", ")", ")", "\n", "", "else", ":", "\n", "                ", "query_data", "=", "data", ".", "clone", "(", ")", "\n", "\n", "", "", "if", "precomputed", ":", "\n", "            ", "idx_neighboors", "=", "query_data", ".", "idx_neighboors", "\n", "q_pos", "=", "query_data", ".", "pos", "\n", "", "else", ":", "\n", "            ", "q_pos", ",", "q_batch", "=", "query_data", ".", "pos", ",", "query_data", ".", "batch", "\n", "idx_neighboors", "=", "self", ".", "neighbour_finder", "(", "data", ".", "pos", ",", "q_pos", ",", "batch_x", "=", "data", ".", "batch", ",", "batch_y", "=", "q_batch", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.PPNet.blocks.SimpleBlock.extra_repr": [[85, 87], ["None"], "methods", ["None"], ["query_data", ".", "idx_neighboors", "=", "idx_neighboors", "\n", "\n", "", "x", "=", "self", ".", "kp_conv", "(", "q_pos", ",", "data", ".", "pos", ",", "idx_neighboors", ",", "data", ".", "x", ",", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.PPNet.blocks.SimpleInputBlock.__init__": [[97, 141], ["torch.nn.LeakyReLU", "torch_points3d.core.common_modules.base_modules.BaseModule.__init__", "torch_points3d.core.spatial_ops.RadiusNeighbourFinder", "ops.PosPoolLayer", "len", "torch.nn.Sequential", "torch.nn.Sequential", "torch_points3d.core.data_transform.GridSampling3D", "torch.nn.Linear", "bn", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["        ", "return", "\"Nb parameters: {}; {}; {}\"", ".", "format", "(", "self", ".", "nb_params", ",", "self", ".", "sampler", ",", "self", ".", "neighbour_finder", ")", "\n", "\n", "\n", "", "", "class", "ResnetBBlock", "(", "BaseModule", ")", ":", "\n", "    ", "\"\"\" Resnet block with optional bottleneck activated by default\n    Arguments:\n        down_conv_nn (len of 2 or 3) :\n                        sizes of input, intermediate, output.\n                        If length == 2 then intermediate =  num_outputs // 4\n        radius : radius of the conv kernel\n        sigma :\n        density_parameter : density parameter for the kernel\n        max_num_neighbors : maximum number of neighboors for the neighboor search\n        activation : activation function\n        has_bottleneck: wether to use the bottleneck or not\n        bn_momentum\n        bn : batch norm (can be None -> no batch norm)\n        grid_size : size of the grid,\n        prev_grid_size : size of the grid at previous step.\n                        In case of a strided block, this is different than grid_size\n    \"\"\"", "\n", "\n", "CONV_TYPE", "=", "ConvolutionFormat", ".", "PARTIAL_DENSE", ".", "value", "\n", "\n", "def", "__init__", "(", "\n", "self", ",", "\n", "down_conv_nn", "=", "None", ",", "\n", "grid_size", "=", "None", ",", "\n", "prev_grid_size", "=", "None", ",", "\n", "sigma", "=", "1", ",", "\n", "max_num_neighbors", "=", "16", ",", "\n", "activation", "=", "torch", ".", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.1", ")", ",", "\n", "has_bottleneck", "=", "True", ",", "\n", "bn_momentum", "=", "0.02", ",", "\n", "bn", "=", "FastBatchNorm1d", ",", "\n", "deformable", "=", "False", ",", "\n", "add_one", "=", "False", ",", "\n", "**", "kwargs", ",", "\n", ")", ":", "\n", "        ", "super", "(", "ResnetBBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "len", "(", "down_conv_nn", ")", "==", "2", "or", "len", "(", "down_conv_nn", ")", "==", "3", ",", "\"down_conv_nn should be of size 2 or 3\"", "\n", "if", "len", "(", "down_conv_nn", ")", "==", "2", ":", "\n", "            ", "num_inputs", ",", "num_outputs", "=", "down_conv_nn", "\n", "d_2", "=", "num_outputs", "//", "4", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.PPNet.blocks.SimpleInputBlock.forward": [[142, 168], ["blocks.SimpleInputBlock.unary_1", "blocks.SimpleInputBlock.pospool", "hasattr", "setattr", "blocks.SimpleInputBlock.neighbour_finder", "blocks.SimpleInputBlock.sampler", "data.clone", "data.clone"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.PPNet.blocks.PPStageBlock.neighbour_finder", "home.repos.pwc.inspect_result.drprojects_deepviewagg.PPNet.blocks.PPStageBlock.sampler", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.clone", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.clone"], ["            ", "num_inputs", ",", "d_2", ",", "num_outputs", "=", "down_conv_nn", "\n", "", "self", ".", "is_strided", "=", "prev_grid_size", "!=", "grid_size", "\n", "self", ".", "has_bottleneck", "=", "has_bottleneck", "\n", "\n", "# Main branch", "\n", "if", "self", ".", "has_bottleneck", ":", "\n", "            ", "kp_size", "=", "[", "d_2", ",", "d_2", "]", "\n", "", "else", ":", "\n", "            ", "kp_size", "=", "[", "num_inputs", ",", "num_outputs", "]", "\n", "\n", "", "self", ".", "kp_conv", "=", "SimpleBlock", "(", "\n", "down_conv_nn", "=", "kp_size", ",", "\n", "grid_size", "=", "grid_size", ",", "\n", "prev_grid_size", "=", "prev_grid_size", ",", "\n", "sigma", "=", "sigma", ",", "\n", "max_num_neighbors", "=", "max_num_neighbors", ",", "\n", "activation", "=", "activation", ",", "\n", "bn_momentum", "=", "bn_momentum", ",", "\n", "bn", "=", "bn", ",", "\n", "deformable", "=", "deformable", ",", "\n", "add_one", "=", "add_one", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "\n", "if", "self", ".", "has_bottleneck", ":", "\n", "            ", "if", "bn", ":", "\n", "                ", "self", ".", "unary_1", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.PPNet.blocks.SimpleInputBlock.extra_repr": [[169, 171], ["None"], "methods", ["None"], ["Lin", "(", "num_inputs", ",", "d_2", ",", "bias", "=", "False", ")", ",", "bn", "(", "d_2", ",", "momentum", "=", "bn_momentum", ")", ",", "activation", "\n", ")", "\n", "self", ".", "unary_2", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.PPNet.blocks.ResnetBBlock.__init__": [[193, 262], ["torch.nn.LeakyReLU", "torch_points3d.core.common_modules.base_modules.BaseModule.__init__", "blocks.SimpleBlock", "len", "torch.nn.Identity", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.Linear", "bn", "torch.nn.Linear", "bn", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "bn"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["        ", "\"\"\"\n            data: x, pos, batch_idx and idx_neighbour when the neighboors of each point in pos have already been computed\n        \"\"\"", "\n", "# Main branch", "\n", "output", "=", "data", ".", "clone", "(", ")", "\n", "shortcut_x", "=", "data", ".", "x", "\n", "if", "self", ".", "has_bottleneck", ":", "\n", "            ", "output", ".", "x", "=", "self", ".", "unary_1", "(", "output", ".", "x", ")", "\n", "", "output", "=", "self", ".", "kp_conv", "(", "output", ",", "precomputed", "=", "precomputed", ")", "\n", "if", "self", ".", "has_bottleneck", ":", "\n", "            ", "output", ".", "x", "=", "self", ".", "unary_2", "(", "output", ".", "x", ")", "\n", "\n", "# Shortcut", "\n", "", "if", "self", ".", "is_strided", ":", "\n", "            ", "idx_neighboors", "=", "output", ".", "idx_neighboors", "\n", "shortcut_x", "=", "torch", ".", "cat", "(", "[", "shortcut_x", ",", "torch", ".", "zeros_like", "(", "shortcut_x", "[", ":", "1", ",", ":", "]", ")", "]", ",", "axis", "=", "0", ")", "# Shadow feature", "\n", "neighborhood_features", "=", "shortcut_x", "[", "idx_neighboors", "]", "\n", "shortcut_x", "=", "torch", ".", "max", "(", "neighborhood_features", ",", "dim", "=", "1", ",", "keepdim", "=", "False", ")", "[", "0", "]", "\n", "\n", "", "shortcut", "=", "self", ".", "shortcut_op", "(", "shortcut_x", ")", "\n", "output", ".", "x", "+=", "shortcut", "\n", "return", "output", "\n", "\n", "", "@", "property", "\n", "def", "sampler", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "kp_conv", ".", "sampler", "\n", "\n", "", "@", "property", "\n", "def", "neighbour_finder", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "kp_conv", ".", "neighbour_finder", "\n", "\n", "", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "\"Nb parameters: %i\"", "%", "self", ".", "nb_params", "\n", "\n", "\n", "", "", "class", "KPDualBlock", "(", "BaseModule", ")", ":", "\n", "    ", "\"\"\" Dual KPConv block (usually strided + non strided)\n\n    Arguments: Accepted kwargs\n        block_names: Name of the blocks to be used as part of this dual block\n        down_conv_nn: Size of the convs e.g. [64,128],\n        grid_size: Size of the grid for each block,\n        prev_grid_size: Size of the grid in the previous KPConv\n        has_bottleneck: Wether a block should implement the bottleneck\n        max_num_neighbors: Max number of neighboors for the radius search,\n        deformable: Is deformable,\n        add_one: Add one as a feature,\n    \"\"\"", "\n", "\n", "def", "__init__", "(", "\n", "self", ",", "\n", "block_names", "=", "None", ",", "\n", "down_conv_nn", "=", "None", ",", "\n", "grid_size", "=", "None", ",", "\n", "prev_grid_size", "=", "None", ",", "\n", "has_bottleneck", "=", "None", ",", "\n", "max_num_neighbors", "=", "None", ",", "\n", "deformable", "=", "False", ",", "\n", "add_one", "=", "False", ",", "\n", "**", "kwargs", ",", "\n", ")", ":", "\n", "        ", "super", "(", "KPDualBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "len", "(", "block_names", ")", "==", "len", "(", "down_conv_nn", ")", "\n", "self", ".", "blocks", "=", "torch", ".", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", ",", "class_name", "in", "enumerate", "(", "block_names", ")", ":", "\n", "# Constructing extra keyword arguments", "\n", "            ", "block_kwargs", "=", "{", "}", "\n", "for", "key", ",", "arg", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "                ", "block_kwargs", "[", "key", "]", "=", "arg", "[", "i", "]", "if", "is_list", "(", "arg", ")", "else", "arg", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.PPNet.blocks.ResnetBBlock.forward": [[263, 287], ["data.clone", "blocks.ResnetBBlock.aggregation", "blocks.ResnetBBlock.shortcut_op", "blocks.ResnetBBlock.activation", "blocks.ResnetBBlock.unary_1", "blocks.ResnetBBlock.unary_2", "torch.cat", "torch.max", "torch.zeros_like"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.clone", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat"], ["\n", "# Building the block", "\n", "", "kpcls", "=", "getattr", "(", "sys", ".", "modules", "[", "__name__", "]", ",", "class_name", ")", "\n", "block", "=", "kpcls", "(", "\n", "down_conv_nn", "=", "down_conv_nn", "[", "i", "]", ",", "\n", "grid_size", "=", "grid_size", "[", "i", "]", ",", "\n", "prev_grid_size", "=", "prev_grid_size", "[", "i", "]", ",", "\n", "has_bottleneck", "=", "has_bottleneck", "[", "i", "]", ",", "\n", "max_num_neighbors", "=", "max_num_neighbors", "[", "i", "]", ",", "\n", "deformable", "=", "deformable", "[", "i", "]", "if", "is_list", "(", "deformable", ")", "else", "deformable", ",", "\n", "add_one", "=", "add_one", "[", "i", "]", "if", "is_list", "(", "add_one", ")", "else", "add_one", ",", "\n", "**", "block_kwargs", ",", "\n", ")", "\n", "self", ".", "blocks", ".", "append", "(", "block", ")", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "data", ",", "precomputed", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "for", "block", "in", "self", ".", "blocks", ":", "\n", "            ", "data", "=", "block", "(", "data", ",", "precomputed", "=", "precomputed", ")", "\n", "", "return", "data", "\n", "\n", "", "@", "property", "\n", "def", "sampler", "(", "self", ")", ":", "\n", "        ", "return", "[", "b", ".", "sampler", "for", "b", "in", "self", ".", "blocks", "]", "\n", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.PPNet.blocks.ResnetBBlock.sampler": [[288, 291], ["None"], "methods", ["None"], ["def", "neighbour_finder", "(", "self", ")", ":", "\n", "        ", "return", "[", "b", ".", "neighbour_finder", "for", "b", "in", "self", ".", "blocks", "]", "\n", "\n", "", "def", "extra_repr", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.PPNet.blocks.ResnetBBlock.neighbour_finder": [[292, 295], ["None"], "methods", ["None"], ["        ", "return", "\"Nb parameters: %i\"", "%", "self", ".", "nb_params", "\n", "", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.PPNet.blocks.ResnetBBlock.extra_repr": [[296, 298], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.PPNet.blocks.PPStageBlock.__init__": [[318, 360], ["torch_points3d.core.common_modules.base_modules.BaseModule.__init__", "torch.nn.ModuleList", "enumerate", "len", "len", "kwargs.items", "getattr", "getattr.", "blocks.PPStageBlock.blocks.append", "torch_points3d.utils.config.is_list"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.config.is_list"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.PPNet.blocks.PPStageBlock.forward": [[361, 365], ["block"], "methods", ["None"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.PPNet.blocks.PPStageBlock.sampler": [[366, 369], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.PPNet.blocks.PPStageBlock.neighbour_finder": [[370, 373], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.PPNet.blocks.PPStageBlock.extra_repr": [[374, 376], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.RSConv.dense.RSConvMapper.__init__": [[23, 45], ["torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Module.__init__", "torch.ModuleDict", "torch.ModuleDict", "torch.ModuleDict", "torch_points3d.core.common_modules.dense_modules.MLP2D", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "len", "torch_points3d.core.common_modules.dense_modules.MLP2D", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["def", "__init__", "(", "self", ",", "down_conv_nn", ",", "use_xyz", ",", "bn", "=", "True", ",", "activation", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.01", ")", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "RSConvMapper", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "_down_conv_nn", "=", "down_conv_nn", "\n", "self", ".", "_use_xyz", "=", "use_xyz", "\n", "\n", "self", ".", "nn", "=", "nn", ".", "ModuleDict", "(", ")", "\n", "\n", "if", "len", "(", "self", ".", "_down_conv_nn", ")", "==", "2", ":", "# First layer", "\n", "            ", "self", ".", "_first_layer", "=", "True", "\n", "f_in", ",", "f_intermediate", ",", "f_out", "=", "self", ".", "_down_conv_nn", "[", "0", "]", "\n", "self", ".", "nn", "[", "\"features_nn\"", "]", "=", "MLP2D", "(", "self", ".", "_down_conv_nn", "[", "1", "]", ",", "bn", "=", "bn", ",", "bias", "=", "False", ")", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "_first_layer", "=", "False", "\n", "f_in", ",", "f_intermediate", ",", "f_out", "=", "self", ".", "_down_conv_nn", "\n", "\n", "", "self", ".", "nn", "[", "\"mlp_msg\"", "]", "=", "MLP2D", "(", "[", "f_in", ",", "f_intermediate", ",", "f_out", "]", ",", "bn", "=", "bn", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "nn", "[", "\"norm\"", "]", "=", "Sequential", "(", "*", "[", "nn", ".", "BatchNorm2d", "(", "f_out", ")", ",", "activation", "]", ")", "\n", "\n", "self", ".", "_f_out", "=", "f_out", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.RSConv.dense.RSConvMapper.f_out": [[46, 49], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "f_out", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_f_out", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.RSConv.dense.RSConvMapper.forward": [[50, 69], ["torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "features", ",", "msg", ")", ":", "\n", "        ", "\"\"\"\n        features  -- [B, C, num_points, nsamples]\n        msg  -- [B, 10, num_points, nsamples]\n\n        The 10 features comes from [distance: 1,\n                                    coord_origin:3,\n                                    coord_target:3,\n                                    delta_origin_target:3]\n        \"\"\"", "\n", "\n", "# Transform msg", "\n", "msg", "=", "self", ".", "nn", "[", "\"mlp_msg\"", "]", "(", "msg", ")", "\n", "\n", "# If first_layer, augment features_size", "\n", "if", "self", ".", "_first_layer", ":", "\n", "            ", "features", "=", "self", ".", "nn", "[", "\"features_nn\"", "]", "(", "features", ")", "\n", "\n", "", "return", "self", ".", "nn", "[", "\"norm\"", "]", "(", "torch", ".", "mul", "(", "features", ",", "msg", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.RSConv.dense.SharedRSConv.__init__": [[77, 82], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["def", "__init__", "(", "self", ",", "mapper", ":", "RSConvMapper", ",", "radius", ")", ":", "\n", "        ", "super", "(", "SharedRSConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "_mapper", "=", "mapper", "\n", "self", ".", "_radius", "=", "radius", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.RSConv.dense.SharedRSConv.forward": [[83, 102], ["centroids.repeat", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "dense.SharedRSConv._mapper", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat"], ["", "def", "forward", "(", "self", ",", "aggr_features", ",", "centroids", ")", ":", "\n", "        ", "\"\"\"\n        aggr_features  -- [B, 3 + 3 + C, num_points, nsamples]\n        centroids  -- [B, 3, num_points, 1]\n        \"\"\"", "\n", "# Extract information to create message", "\n", "abs_coord", "=", "aggr_features", "[", ":", ",", ":", "3", "]", "# absolute coordinates", "\n", "delta_x", "=", "aggr_features", "[", ":", ",", "3", ":", "6", "]", "# normalized coordinates", "\n", "features", "=", "aggr_features", "[", ":", ",", "3", ":", "]", "\n", "\n", "nsample", "=", "abs_coord", ".", "shape", "[", "-", "1", "]", "\n", "coord_xi", "=", "centroids", ".", "repeat", "(", "1", ",", "1", ",", "1", ",", "nsample", ")", "# (B, 3, npoint, nsample) centroid points", "\n", "\n", "distance", "=", "torch", ".", "norm", "(", "delta_x", ",", "p", "=", "2", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", "# Calculate distance", "\n", "\n", "# Create message by contenating distance, origin / target coords, delta coords", "\n", "h_xi_xj", "=", "torch", ".", "cat", "(", "(", "distance", ",", "coord_xi", ",", "abs_coord", ",", "delta_x", ")", ",", "dim", "=", "1", ")", "\n", "\n", "return", "self", ".", "_mapper", "(", "features", ",", "h_xi_xj", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.RSConv.dense.SharedRSConv.__repr__": [[103, 105], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"{}(radius={})\"", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "_radius", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.RSConv.dense.RSConvSharedMSGDown.__init__": [[108, 144], ["torch.ReLU", "torch.ReLU", "torch.ReLU", "BaseDenseConvolutionDown.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "dense.RSConvMapper", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "range", "len", "len", "len", "len", "log.warn", "torch_points3d.core.spatial_ops.DenseFPSSampler", "torch_points3d.core.spatial_ops.DenseRadiusNeighbourFinder", "len", "dense.RSConvSharedMSGDown.mlps.append", "dense.SharedRSConv", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "npoint", "=", "None", ",", "\n", "radii", "=", "None", ",", "\n", "nsample", "=", "None", ",", "\n", "down_conv_nn", "=", "None", ",", "\n", "channel_raising_nn", "=", "None", ",", "\n", "bn", "=", "True", ",", "\n", "use_xyz", "=", "True", ",", "\n", "activation", "=", "nn", ".", "ReLU", "(", ")", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "assert", "len", "(", "radii", ")", "==", "len", "(", "nsample", ")", "\n", "if", "len", "(", "radii", ")", "!=", "len", "(", "down_conv_nn", ")", ":", "\n", "            ", "log", ".", "warn", "(", "\"The down_conv_nn has a different size as radii. Make sure of have SharedRSConv\"", ")", "\n", "", "super", "(", "RSConvSharedMSGDown", ",", "self", ")", ".", "__init__", "(", "\n", "DenseFPSSampler", "(", "num_to_sample", "=", "npoint", ")", ",", "DenseRadiusNeighbourFinder", "(", "radii", ",", "nsample", ")", ",", "**", "kwargs", "\n", ")", "\n", "\n", "self", ".", "use_xyz", "=", "use_xyz", "\n", "self", ".", "npoint", "=", "npoint", "\n", "self", ".", "mlps", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "# https://github.com/Yochengliu/Relation-Shape-CNN/blob/6464eb8bb4efc686adec9da437112ef888e55684/utils/pointnet2_modules.py#L106", "\n", "self", ".", "_mapper", "=", "RSConvMapper", "(", "down_conv_nn", ",", "activation", "=", "activation", ",", "use_xyz", "=", "self", ".", "use_xyz", ")", "\n", "\n", "self", ".", "mlp_out", "=", "Sequential", "(", "\n", "*", "[", "\n", "Conv1d", "(", "channel_raising_nn", "[", "0", "]", ",", "channel_raising_nn", "[", "-", "1", "]", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "channel_raising_nn", "[", "-", "1", "]", ")", ",", "\n", "activation", ",", "\n", "]", "\n", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "radii", ")", ")", ":", "\n", "            ", "self", ".", "mlps", ".", "append", "(", "SharedRSConv", "(", "self", ".", "_mapper", ",", "radii", "[", "i", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.RSConv.dense.RSConvSharedMSGDown._prepare_features": [[145, 166], ["pos.transpose().contiguous", "torch_points_kernels.grouping_operation", "new_pos.transpose().unsqueeze", "torch_points_kernels.grouping_operation", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "pos.transpose", "new_pos.transpose", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat"], ["", "", "def", "_prepare_features", "(", "self", ",", "x", ",", "pos", ",", "new_pos", ",", "idx", ")", ":", "\n", "        ", "new_pos_trans", "=", "pos", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "grouped_pos_absolute", "=", "tp", ".", "grouping_operation", "(", "new_pos_trans", ",", "idx", ")", "# (B, 3, npoint, nsample)", "\n", "centroids", "=", "new_pos", ".", "transpose", "(", "1", ",", "2", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "grouped_pos_normalized", "=", "grouped_pos_absolute", "-", "centroids", "\n", "\n", "if", "x", "is", "not", "None", ":", "\n", "            ", "grouped_features", "=", "tp", ".", "grouping_operation", "(", "x", ",", "idx", ")", "\n", "if", "self", ".", "use_xyz", ":", "\n", "                ", "new_features", "=", "torch", ".", "cat", "(", "\n", "[", "grouped_pos_absolute", ",", "grouped_pos_normalized", ",", "grouped_features", "]", ",", "dim", "=", "1", "\n", ")", "# (B, 3 + 3 + C, npoint, nsample)", "\n", "", "else", ":", "\n", "                ", "new_features", "=", "grouped_features", "\n", "", "", "else", ":", "\n", "            ", "assert", "self", ".", "use_xyz", ",", "\"Cannot have not features and not use xyz as a feature!\"", "\n", "new_features", "=", "torch", ".", "cat", "(", "\n", "[", "grouped_pos_absolute", ",", "grouped_pos_normalized", "]", ",", "dim", "=", "1", "\n", ")", "# (B, 3 + 3 npoint, nsample)", "\n", "\n", "", "return", "new_features", ",", "centroids", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.RSConv.dense.RSConvSharedMSGDown.conv": [[167, 187], ["dense.RSConvSharedMSGDown._prepare_features", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "dense.RSConvSharedMSGDown.mlp_out", "len", "dense.RSConvSharedMSGDown.squeeze", "dense.RSConvSharedMSGDown.size"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.pointnet2.dense.PointNetMSGDown._prepare_features", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "def", "conv", "(", "self", ",", "x", ",", "pos", ",", "new_pos", ",", "radius_idx", ",", "scale_idx", ")", ":", "\n", "        ", "\"\"\" Implements a Dense convolution where radius_idx represents\n        the indexes of the points in x and pos to be agragated into the new feature\n        for each point in new_pos\n\n        Arguments:\n            x -- Previous features [B, N, C]\n            pos -- Previous positions [B, N, 3]\n            new_pos  -- Sampled positions [B, npoints, 3]\n            radius_idx -- Indexes to group [B, npoints, nsample]\n            scale_idx -- Scale index in multiscale convolutional layers\n        Returns:\n            new_x -- Features after passing trhough the MLP [B, mlp[-1], npoints]\n        \"\"\"", "\n", "assert", "scale_idx", "<", "len", "(", "self", ".", "mlps", ")", "\n", "aggr_features", ",", "centroids", "=", "self", ".", "_prepare_features", "(", "x", ",", "pos", ",", "new_pos", ",", "radius_idx", ")", "\n", "new_features", "=", "self", ".", "mlps", "[", "scale_idx", "]", "(", "aggr_features", ",", "centroids", ")", "# (B, mlp[-1], npoint, nsample)", "\n", "new_features", "=", "F", ".", "max_pool2d", "(", "new_features", ",", "kernel_size", "=", "[", "1", ",", "new_features", ".", "size", "(", "3", ")", "]", ")", "# (B, mlp[-1], npoint, 1)", "\n", "new_features", "=", "self", ".", "mlp_out", "(", "new_features", ".", "squeeze", "(", "-", "1", ")", ")", "# (B, mlp[-1], npoint)", "\n", "return", "new_features", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.RSConv.dense.RSConvSharedMSGDown.__repr__": [[188, 196], ["dense.RSConvSharedMSGDown.mlps.__repr__", "dense.RSConvSharedMSGDown.mlp_out.__repr__", "dense.RSConvSharedMSGDown._mapper.__repr__"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.schedulers.lr_schedulers.LRScheduler.__repr__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.schedulers.lr_schedulers.LRScheduler.__repr__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.schedulers.lr_schedulers.LRScheduler.__repr__"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"{}({}, shared: {} {}, {} {})\"", ".", "format", "(", "\n", "self", ".", "__class__", ".", "__name__", ",", "\n", "self", ".", "mlps", ".", "__repr__", "(", ")", ",", "\n", "COLORS", ".", "Cyan", ",", "\n", "self", ".", "mlp_out", ".", "__repr__", "(", ")", ",", "\n", "self", ".", "_mapper", ".", "__repr__", "(", ")", ",", "\n", "COLORS", ".", "END_TOKEN", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.RSConv.dense.OriginalRSConv.__init__": [[208, 235], ["torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "dense.OriginalRSConv.nn.append", "dense.OriginalRSConv.nn.append", "dense.OriginalRSConv.nn.append", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "dense.OriginalRSConv.nn.append"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append"], ["def", "__init__", "(", "self", ",", "mapping", "=", "None", ",", "first_layer", "=", "False", ",", "radius", "=", "None", ",", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ":", "\n", "        ", "super", "(", "OriginalRSConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "nn", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "self", ".", "_radius", "=", "radius", "\n", "\n", "self", ".", "mapping_func1", "=", "mapping", "[", "0", "]", "\n", "self", ".", "mapping_func2", "=", "mapping", "[", "1", "]", "\n", "self", ".", "cr_mapping", "=", "mapping", "[", "2", "]", "\n", "\n", "self", ".", "first_layer", "=", "first_layer", "\n", "\n", "if", "first_layer", ":", "\n", "            ", "self", ".", "xyz_raising", "=", "mapping", "[", "3", "]", "\n", "self", ".", "bn_xyz_raising", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "xyz_raising", ".", "out_channels", ")", "\n", "self", ".", "nn", ".", "append", "(", "self", ".", "bn_xyz_raising", ")", "\n", "\n", "", "self", ".", "bn_mapping", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "mapping_func1", ".", "out_channels", ")", "\n", "self", ".", "bn_rsconv", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "cr_mapping", ".", "in_channels", ")", "\n", "self", ".", "bn_channel_raising", "=", "nn", ".", "BatchNorm1d", "(", "self", ".", "cr_mapping", ".", "out_channels", ")", "\n", "\n", "self", ".", "nn", ".", "append", "(", "self", ".", "bn_mapping", ")", "\n", "self", ".", "nn", ".", "append", "(", "self", ".", "bn_rsconv", ")", "\n", "self", ".", "nn", ".", "append", "(", "self", ".", "bn_channel_raising", ")", "\n", "\n", "self", ".", "activation", "=", "activation", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.RSConv.dense.OriginalRSConv.forward": [[236, 256], ["abs_coord[].repeat", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "dense.OriginalRSConv.mapping_func2", "torch.max_pool2d().squeeze", "torch.max_pool2d().squeeze", "torch.max_pool2d().squeeze", "dense.OriginalRSConv.activation", "dense.OriginalRSConv.size", "dense.OriginalRSConv.activation", "dense.OriginalRSConv.activation", "dense.OriginalRSConv.bn_channel_raising", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "dense.OriginalRSConv.bn_mapping", "dense.OriginalRSConv.bn_xyz_raising", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "dense.OriginalRSConv.cr_mapping", "dense.OriginalRSConv.mapping_func1", "dense.OriginalRSConv.xyz_raising", "dense.OriginalRSConv.activation", "dense.OriginalRSConv.bn_rsconv", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "# input: (B, 3 + 3 + C_in, npoint, centroid + nsample)", "\n", "\n", "        ", "x", "=", "input", "[", ":", ",", "3", ":", ",", ":", ",", ":", "]", "# (B, C_in, npoint, nsample+1), input features", "\n", "nsample", "=", "x", ".", "size", "(", ")", "[", "3", "]", "\n", "abs_coord", "=", "input", "[", ":", ",", "0", ":", "3", ",", ":", ",", ":", "]", "# (B, 3, npoint, nsample+1), absolute coordinates", "\n", "delta_x", "=", "input", "[", ":", ",", "3", ":", "6", ",", ":", ",", ":", "]", "# (B, 3, npoint, nsample+1), normalized coordinates", "\n", "\n", "coord_xi", "=", "abs_coord", "[", ":", ",", ":", ",", ":", ",", "0", ":", "1", "]", ".", "repeat", "(", "1", ",", "1", ",", "1", ",", "nsample", ")", "# (B, 3, npoint, nsample),  centroid point", "\n", "h_xi_xj", "=", "torch", ".", "norm", "(", "delta_x", ",", "p", "=", "2", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", "\n", "h_xi_xj", "=", "torch", ".", "cat", "(", "(", "h_xi_xj", ",", "coord_xi", ",", "abs_coord", ",", "delta_x", ")", ",", "dim", "=", "1", ")", "\n", "\n", "h_xi_xj", "=", "self", ".", "mapping_func2", "(", "self", ".", "activation", "(", "self", ".", "bn_mapping", "(", "self", ".", "mapping_func1", "(", "h_xi_xj", ")", ")", ")", ")", "\n", "\n", "if", "self", ".", "first_layer", ":", "\n", "            ", "x", "=", "self", ".", "activation", "(", "self", ".", "bn_xyz_raising", "(", "self", ".", "xyz_raising", "(", "x", ")", ")", ")", "\n", "", "x", "=", "F", ".", "max_pool2d", "(", "self", ".", "activation", "(", "self", ".", "bn_rsconv", "(", "torch", ".", "mul", "(", "h_xi_xj", ",", "x", ")", ")", ")", ",", "kernel_size", "=", "(", "1", ",", "nsample", ")", ")", ".", "squeeze", "(", "\n", "3", "\n", ")", "# (B, C_in, npoint)", "\n", "x", "=", "self", ".", "activation", "(", "self", ".", "bn_channel_raising", "(", "self", ".", "cr_mapping", "(", "x", ")", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.RSConv.dense.OriginalRSConv.__repr__": [[257, 259], ["dense.OriginalRSConv.nn.__repr__"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.schedulers.lr_schedulers.LRScheduler.__repr__"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"{}({})\"", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "nn", ".", "__repr__", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.RSConv.dense.RSConvOriginalMSGDown.__init__": [[262, 330], ["torch.ReLU", "torch.ReLU", "torch.ReLU", "BaseDenseConvolutionDown.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "len", "len", "len", "len", "log.warning", "torch_points3d.core.spatial_ops.DenseFPSSampler", "torch_points3d.core.spatial_ops.DenseRadiusNeighbourFinder", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "dense.RSConvOriginalMSGDown.mappings.append", "dense.RSConvOriginalMSGDown.mlps.append", "len", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "dense.OriginalRSConv"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "npoint", "=", "None", ",", "\n", "radii", "=", "None", ",", "\n", "nsample", "=", "None", ",", "\n", "down_conv_nn", "=", "None", ",", "\n", "channel_raising_nn", "=", "None", ",", "\n", "bn", "=", "True", ",", "\n", "bias", "=", "True", ",", "\n", "use_xyz", "=", "True", ",", "\n", "activation", "=", "nn", ".", "ReLU", "(", ")", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "assert", "len", "(", "radii", ")", "==", "len", "(", "nsample", ")", "\n", "if", "len", "(", "radii", ")", "!=", "len", "(", "down_conv_nn", ")", ":", "\n", "            ", "log", ".", "warning", "(", "\"The down_conv_nn has a different size as radii. Make sure of have SharedRSConv\"", ")", "\n", "", "super", "(", "RSConvOriginalMSGDown", ",", "self", ")", ".", "__init__", "(", "\n", "DenseFPSSampler", "(", "num_to_sample", "=", "npoint", ")", ",", "DenseRadiusNeighbourFinder", "(", "radii", ",", "nsample", ")", ",", "**", "kwargs", "\n", ")", "\n", "\n", "self", ".", "use_xyz", "=", "use_xyz", "\n", "self", ".", "mlps", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "mappings", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "self", ".", "_first_layer", "=", "True", "if", "len", "(", "down_conv_nn", ")", "==", "2", "else", "False", "\n", "\n", "if", "self", ".", "_first_layer", ":", "\n", "            ", "C_in", ",", "C_intermediate", ",", "C_out", "=", "down_conv_nn", "[", "0", "]", "\n", "feat_in", ",", "f_out", "=", "down_conv_nn", "[", "-", "1", "]", "\n", "xyz_raising", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "feat_in", ",", "out_channels", "=", "f_out", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "bias", "=", "bias", ",", "\n", ")", "\n", "nn", ".", "init", ".", "kaiming_normal_", "(", "xyz_raising", ".", "weight", ")", "\n", "if", "bias", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "xyz_raising", ".", "bias", ",", "0", ")", "\n", "", "", "else", ":", "\n", "            ", "C_in", ",", "C_intermediate", ",", "C_out", "=", "down_conv_nn", "\n", "\n", "", "mapping_func1", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "C_in", ",", "out_channels", "=", "C_intermediate", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "bias", "=", "bias", ",", "\n", ")", "\n", "mapping_func2", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "C_intermediate", ",", "out_channels", "=", "C_out", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "bias", "=", "bias", ",", "\n", ")", "\n", "\n", "nn", ".", "init", ".", "kaiming_normal_", "(", "mapping_func1", ".", "weight", ")", "\n", "nn", ".", "init", ".", "kaiming_normal_", "(", "mapping_func2", ".", "weight", ")", "\n", "if", "bias", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "mapping_func1", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "mapping_func2", ".", "bias", ",", "0", ")", "\n", "\n", "# channel raising mapping", "\n", "", "cr_mapping", "=", "nn", ".", "Conv1d", "(", "\n", "in_channels", "=", "channel_raising_nn", "[", "0", "]", ",", "out_channels", "=", "channel_raising_nn", "[", "1", "]", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "bias", ",", "\n", ")", "\n", "nn", ".", "init", ".", "kaiming_normal_", "(", "cr_mapping", ".", "weight", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "cr_mapping", ".", "bias", ",", "0", ")", "\n", "\n", "if", "self", ".", "_first_layer", ":", "\n", "            ", "mapping", "=", "[", "mapping_func1", ",", "mapping_func2", ",", "cr_mapping", ",", "xyz_raising", "]", "\n", "", "elif", "npoint", "is", "not", "None", ":", "\n", "            ", "mapping", "=", "[", "mapping_func1", ",", "mapping_func2", ",", "cr_mapping", "]", "\n", "\n", "", "for", "m", "in", "mapping", ":", "\n", "            ", "self", ".", "mappings", ".", "append", "(", "m", ")", "\n", "\n", "", "for", "radius", "in", "radii", ":", "\n", "            ", "self", ".", "mlps", ".", "append", "(", "OriginalRSConv", "(", "mapping", "=", "mapping", ",", "first_layer", "=", "self", ".", "_first_layer", ",", "radius", "=", "radius", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.RSConv.dense.RSConvOriginalMSGDown._prepare_features": [[331, 367], ["xyz.transpose().contiguous", "torch_points_kernels.grouping_operation", "new_xyz.transpose().unsqueeze", "torch_points_kernels.grouping_operation", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "xyz.transpose", "new_xyz.transpose", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat"], ["", "", "def", "_prepare_features", "(", "\n", "self", ",", "xyz", ":", "torch", ".", "Tensor", ",", "new_xyz", ":", "torch", ".", "Tensor", ",", "features", ":", "torch", ".", "Tensor", "=", "None", ",", "idx", ":", "torch", ".", "Tensor", "=", "None", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Parameters\n        ----------\n        xyz : torch.Tensor\n            xyz coordinates of the features (B, N, 3)\n        new_xyz : torch.Tensor\n            centriods (B, npoint, 3)\n        features : torch.Tensor\n            Descriptors of the features (B, C, N)\n\n        Returns\n        -------\n        new_features : torch.Tensor\n            (B, 3 + C, npoint, nsample) tensor\n        \"\"\"", "\n", "xyz_trans", "=", "xyz", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "grouped_xyz", "=", "tp", ".", "grouping_operation", "(", "xyz_trans", ",", "idx", ")", "# (B, 3, npoint, nsample)", "\n", "raw_grouped_xyz", "=", "grouped_xyz", "\n", "grouped_xyz", "-=", "new_xyz", ".", "transpose", "(", "1", ",", "2", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n", "if", "features", "is", "not", "None", ":", "\n", "            ", "grouped_features", "=", "tp", ".", "grouping_operation", "(", "features", ",", "idx", ")", "\n", "if", "self", ".", "use_xyz", ":", "\n", "                ", "new_features", "=", "torch", ".", "cat", "(", "\n", "[", "raw_grouped_xyz", ",", "grouped_xyz", ",", "grouped_features", "]", ",", "dim", "=", "1", "\n", ")", "# (B, 3 + 3 + C, npoint, nsample)", "\n", "", "else", ":", "\n", "                ", "new_features", "=", "grouped_features", "\n", "", "", "else", ":", "\n", "            ", "assert", "self", ".", "use_xyz", ",", "\"Cannot have not features and not use xyz as a feature!\"", "\n", "new_features", "=", "torch", ".", "cat", "(", "[", "raw_grouped_xyz", ",", "grouped_xyz", "]", ",", "dim", "=", "1", ")", "\n", "\n", "", "return", "new_features", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.RSConv.dense.RSConvOriginalMSGDown.conv": [[368, 388], ["dense.RSConvOriginalMSGDown._prepare_features", "len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.pointnet2.dense.PointNetMSGDown._prepare_features", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "def", "conv", "(", "self", ",", "x", ",", "pos", ",", "new_pos", ",", "radius_idx", ",", "scale_idx", ")", ":", "\n", "        ", "\"\"\" Implements a Dense convolution where radius_idx represents\n        the indexes of the points in x and pos to be agragated into the new feature\n        for each point in new_pos\n\n        Arguments:\n            x -- Previous features [B, N, C]\n            pos -- Previous positions [B, N, 3]\n            new_pos  -- Sampled positions [B, npoints, 3]\n            radius_idx -- Indexes to group [B, npoints, nsample]\n            scale_idx -- Scale index in multiscale convolutional layers\n        Returns:\n            new_x -- Features after passing trhough the MLP [B, mlp[-1], npoints]\n        \"\"\"", "\n", "assert", "scale_idx", "<", "len", "(", "self", ".", "mlps", ")", "\n", "aggr_features", "=", "self", ".", "_prepare_features", "(", "pos", ",", "new_pos", ",", "x", ",", "radius_idx", ")", "\n", "new_features", "=", "self", ".", "mlps", "[", "scale_idx", "]", "(", "\n", "aggr_features", "\n", ")", "# (B, 3 + 3 + C, npoint, nsample) -> (B, mlp[-1], npoint, nsample)", "\n", "return", "new_features", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.RSConv.dense.RSConvOriginalMSGDown.__repr__": [[389, 397], ["dense.RSConvOriginalMSGDown.mlps.__repr__", "dense.RSConvOriginalMSGDown.mappings.__repr__"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.schedulers.lr_schedulers.LRScheduler.__repr__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.schedulers.lr_schedulers.LRScheduler.__repr__"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"{}: {} ({}, shared: {} {} {})\"", ".", "format", "(", "\n", "self", ".", "__class__", ".", "__name__", ",", "\n", "self", ".", "nb_params", ",", "\n", "self", ".", "mlps", ".", "__repr__", "(", ")", ",", "\n", "COLORS", ".", "Cyan", ",", "\n", "self", ".", "mappings", ".", "__repr__", "(", ")", ",", "\n", "COLORS", ".", "END_TOKEN", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.RSConv.dense.RSConvMSGDown.__init__": [[401, 440], ["torch.ReLU", "torch.ReLU", "torch.ReLU", "BaseDenseConvolutionDown.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "range", "len", "len", "len", "len", "log.warning", "torch_points3d.core.spatial_ops.DenseFPSSampler", "torch_points3d.core.spatial_ops.DenseRadiusNeighbourFinder", "len", "dense.RSConvMapper", "dense.RSConvMSGDown.mlps.append", "dense.SharedRSConv", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "npoint", "=", "None", ",", "\n", "radii", "=", "None", ",", "\n", "nsample", "=", "None", ",", "\n", "down_conv_nn", "=", "None", ",", "\n", "channel_raising_nn", "=", "None", ",", "\n", "bn", "=", "True", ",", "\n", "bias", "=", "True", ",", "\n", "use_xyz", "=", "True", ",", "\n", "activation", "=", "nn", ".", "ReLU", "(", ")", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "assert", "len", "(", "radii", ")", "==", "len", "(", "nsample", ")", "\n", "if", "len", "(", "radii", ")", "!=", "len", "(", "down_conv_nn", ")", ":", "\n", "            ", "log", ".", "warning", "(", "\"The down_conv_nn has a different size as radii. Make sure to have sharedMLP\"", ")", "\n", "", "super", "(", "RSConvMSGDown", ",", "self", ")", ".", "__init__", "(", "\n", "DenseFPSSampler", "(", "num_to_sample", "=", "npoint", ")", ",", "DenseRadiusNeighbourFinder", "(", "radii", ",", "nsample", ")", ",", "**", "kwargs", "\n", ")", "\n", "\n", "self", ".", "use_xyz", "=", "use_xyz", "\n", "self", ".", "npoint", "=", "npoint", "\n", "self", ".", "mlps", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "# https://github.com/Yochengliu/Relation-Shape-CNN/blob/6464eb8bb4efc686adec9da437112ef888e55684/utils/pointnet2_modules.py#L106", "\n", "\n", "self", ".", "mlp_out", "=", "Sequential", "(", "\n", "*", "[", "\n", "Conv1d", "(", "channel_raising_nn", "[", "0", "]", ",", "channel_raising_nn", "[", "-", "1", "]", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "channel_raising_nn", "[", "-", "1", "]", ")", ",", "\n", "activation", ",", "\n", "]", "\n", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "radii", ")", ")", ":", "\n", "            ", "mapper", "=", "RSConvMapper", "(", "down_conv_nn", ",", "activation", "=", "activation", ",", "use_xyz", "=", "self", ".", "use_xyz", ")", "\n", "self", ".", "mlps", ".", "append", "(", "SharedRSConv", "(", "mapper", ",", "radii", "[", "i", "]", ")", ")", "\n", "\n", "", "self", ".", "_mapper", "=", "mapper", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.RSConv.dense.RSConvMSGDown._prepare_features": [[441, 462], ["pos.transpose().contiguous", "torch_points_kernels.grouping_operation", "new_pos.transpose().unsqueeze", "torch_points_kernels.grouping_operation", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "pos.transpose", "new_pos.transpose", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat"], ["", "def", "_prepare_features", "(", "self", ",", "x", ",", "pos", ",", "new_pos", ",", "idx", ")", ":", "\n", "        ", "new_pos_trans", "=", "pos", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "grouped_pos_absolute", "=", "tp", ".", "grouping_operation", "(", "new_pos_trans", ",", "idx", ")", "# (B, 3, npoint, nsample)", "\n", "centroids", "=", "new_pos", ".", "transpose", "(", "1", ",", "2", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "grouped_pos_normalized", "=", "grouped_pos_absolute", "-", "centroids", "\n", "\n", "if", "x", "is", "not", "None", ":", "\n", "            ", "grouped_features", "=", "tp", ".", "grouping_operation", "(", "x", ",", "idx", ")", "\n", "if", "self", ".", "use_xyz", ":", "\n", "                ", "new_features", "=", "torch", ".", "cat", "(", "\n", "[", "grouped_pos_absolute", ",", "grouped_pos_normalized", ",", "grouped_features", "]", ",", "dim", "=", "1", "\n", ")", "# (B, 3 + 3 + C, npoint, nsample)", "\n", "", "else", ":", "\n", "                ", "new_features", "=", "grouped_features", "\n", "", "", "else", ":", "\n", "            ", "assert", "self", ".", "use_xyz", ",", "\"Cannot have not features and not use xyz as a feature!\"", "\n", "new_features", "=", "torch", ".", "cat", "(", "\n", "[", "grouped_pos_absolute", ",", "grouped_pos_normalized", "]", ",", "dim", "=", "1", "\n", ")", "# (B, 3 + 3 npoint, nsample)", "\n", "\n", "", "return", "new_features", ",", "centroids", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.RSConv.dense.RSConvMSGDown.conv": [[463, 483], ["dense.RSConvMSGDown._prepare_features", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "dense.RSConvMSGDown.mlp_out", "len", "dense.RSConvMSGDown.squeeze", "dense.RSConvMSGDown.size"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.pointnet2.dense.PointNetMSGDown._prepare_features", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "def", "conv", "(", "self", ",", "x", ",", "pos", ",", "new_pos", ",", "radius_idx", ",", "scale_idx", ")", ":", "\n", "        ", "\"\"\" Implements a Dense convolution where radius_idx represents\n        the indexes of the points in x and pos to be agragated into the new feature\n        for each point in new_pos\n\n        Arguments:\n            x -- Previous features [B, N, C]\n            pos -- Previous positions [B, N, 3]\n            new_pos  -- Sampled positions [B, npoints, 3]\n            radius_idx -- Indexes to group [B, npoints, nsample]\n            scale_idx -- Scale index in multiscale convolutional layers\n        Returns:\n            new_x -- Features after passing trhough the MLP [B, mlp[-1], npoints]\n        \"\"\"", "\n", "assert", "scale_idx", "<", "len", "(", "self", ".", "mlps", ")", "\n", "aggr_features", ",", "centroids", "=", "self", ".", "_prepare_features", "(", "x", ",", "pos", ",", "new_pos", ",", "radius_idx", ")", "\n", "new_features", "=", "self", ".", "mlps", "[", "scale_idx", "]", "(", "aggr_features", ",", "centroids", ")", "# (B, mlp[-1], npoint, nsample)", "\n", "new_features", "=", "F", ".", "max_pool2d", "(", "new_features", ",", "kernel_size", "=", "[", "1", ",", "new_features", ".", "size", "(", "3", ")", "]", ")", "# (B, mlp[-1], npoint, 1)", "\n", "new_features", "=", "self", ".", "mlp_out", "(", "new_features", ".", "squeeze", "(", "-", "1", ")", ")", "# (B, mlp[-1], npoint)", "\n", "return", "new_features", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.RSConv.dense.RSConvMSGDown.__repr__": [[484, 492], ["dense.RSConvMSGDown.mlps.__repr__", "dense.RSConvMSGDown.mlp_out.__repr__", "dense.RSConvMSGDown._mapper.__repr__"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.schedulers.lr_schedulers.LRScheduler.__repr__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.schedulers.lr_schedulers.LRScheduler.__repr__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.schedulers.lr_schedulers.LRScheduler.__repr__"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"{}({}, shared: {} {}, {} {})\"", ".", "format", "(", "\n", "self", ".", "__class__", ".", "__name__", ",", "\n", "self", ".", "mlps", ".", "__repr__", "(", ")", ",", "\n", "COLORS", ".", "Cyan", ",", "\n", "self", ".", "mlp_out", ".", "__repr__", "(", ")", ",", "\n", "self", ".", "_mapper", ".", "__repr__", "(", ")", ",", "\n", "COLORS", ".", "END_TOKEN", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.RSConv.message_passing.Convolution.__init__": [[21, 26], ["torch.nn.ReLU", "torch_geometric.nn.MessagePassing.__init__", "MLP", "MLP"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.MLP", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.MLP"], ["def", "__init__", "(", "self", ",", "local_nn", ",", "activation", "=", "ReLU", "(", ")", ",", "global_nn", "=", "None", ",", "aggr", "=", "\"max\"", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Convolution", ",", "self", ")", ".", "__init__", "(", "aggr", "=", "aggr", ")", "\n", "self", ".", "local_nn", "=", "MLP", "(", "local_nn", ")", "\n", "self", ".", "activation", "=", "activation", "\n", "self", ".", "global_nn", "=", "MLP", "(", "global_nn", ")", "if", "global_nn", "is", "not", "None", "else", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.RSConv.message_passing.Convolution.forward": [[27, 29], ["message_passing.Convolution.propagate"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "pos", ",", "edge_index", ")", ":", "\n", "        ", "return", "self", ".", "propagate", "(", "edge_index", ",", "x", "=", "x", ",", "pos", "=", "pos", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.RSConv.message_passing.Convolution.message": [[30, 45], ["torch.norm().unsqueeze", "torch.cat", "message_passing.Convolution.local_nn", "torch.norm"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat"], ["", "def", "message", "(", "self", ",", "pos_i", ",", "pos_j", ",", "x_j", ")", ":", "\n", "\n", "        ", "if", "x_j", "is", "None", ":", "\n", "            ", "x_j", "=", "pos_j", "\n", "\n", "", "vij", "=", "pos_i", "-", "pos_j", "\n", "dij", "=", "torch", ".", "norm", "(", "vij", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "hij", "=", "torch", ".", "cat", "(", "[", "dij", ",", "vij", ",", "pos_i", ",", "pos_j", ",", "]", ",", "dim", "=", "1", ")", "\n", "\n", "M_hij", "=", "self", ".", "local_nn", "(", "hij", ")", "\n", "\n", "msg", "=", "M_hij", "*", "x_j", "\n", "\n", "return", "msg", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.RSConv.message_passing.Convolution.update": [[46, 51], ["message_passing.Convolution.activation", "message_passing.Convolution.global_nn"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "aggr_out", ")", ":", "\n", "        ", "x", "=", "self", ".", "activation", "(", "aggr_out", ")", "\n", "if", "self", ".", "global_nn", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "global_nn", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.RSConv.message_passing.RSConvDown.__init__": [[54, 58], ["BaseConvolutionDown.__init__", "message_passing.Convolution", "FPSSampler", "RadiusNeighbourFinder"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ratio", "=", "None", ",", "radius", "=", "None", ",", "local_nn", "=", "None", ",", "down_conv_nn", "=", "None", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "RSConvDown", ",", "self", ")", ".", "__init__", "(", "FPSSampler", "(", "ratio", ")", ",", "RadiusNeighbourFinder", "(", "radius", ")", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "_conv", "=", "Convolution", "(", "local_nn", "=", "local_nn", ",", "global_nn", "=", "down_conv_nn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.RSConv.message_passing.RSConvDown.conv": [[59, 61], ["message_passing.RSConvDown._conv"], "methods", ["None"], ["", "def", "conv", "(", "self", ",", "x", ",", "pos", ",", "edge_index", ",", "batch", ")", ":", "\n", "        ", "return", "self", ".", "_conv", "(", "x", ",", "pos", ",", "edge_index", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.modalities.image.ModalityIdentity.__init__": [[32, 34], ["torch_points3d.core.common_modules.Identity.__init__"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.modalities.image.ModalityIdentity.forward": [[35, 37], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.modalities.image.Conv2dWS.__init__": [[63, 70], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "True", ",", "\n", "padding_mode", "=", "'zeros'", ",", "scaled", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "groups", "=", "groups", ",", "\n", "bias", "=", "bias", ",", "padding_mode", "=", "padding_mode", ")", "\n", "self", ".", "scaled", "=", "scaled", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.modalities.image.Conv2dWS.forward": [[71, 74], ["image.standardize_weights", "image.Conv2dWS._conv_forward"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.modalities.image.standardize_weights"], ["", "def", "forward", "(", "self", ",", "x", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "weights", "=", "standardize_weights", "(", "self", ".", "weight", ",", "scaled", "=", "self", ".", "scaled", ")", "\n", "return", "self", ".", "_conv_forward", "(", "x", ",", "weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.modalities.image.ConvTranspose2dWS.__init__": [[86, 94], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "output_padding", "=", "0", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "True", ",", "\n", "padding_mode", "=", "'zeros'", ",", "scaled", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "in_channels", ",", "out_channels", ",", "\n", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "\n", "output_padding", "=", "output_padding", ",", "dilation", "=", "dilation", ",", "groups", "=", "groups", ",", "\n", "bias", "=", "bias", ",", "padding_mode", "=", "padding_mode", ")", "\n", "self", ".", "scaled", "=", "scaled", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.modalities.image.ConvTranspose2dWS.forward": [[95, 108], ["image.ConvTranspose2dWS._output_padding", "image.standardize_weights", "torch.conv_transpose2d", "torch.conv_transpose2d", "torch.conv_transpose2d", "ValueError"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.modalities.image.standardize_weights"], ["", "def", "forward", "(", "self", ",", "x", ",", "*", "args", ",", "output_size", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "self", ".", "padding_mode", "!=", "'zeros'", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'Only `zeros` padding mode is supported for ConvTranspose2d'", ")", "\n", "\n", "", "output_padding", "=", "self", ".", "_output_padding", "(", "x", ",", "output_size", ",", "\n", "self", ".", "stride", ",", "self", ".", "padding", ",", "self", ".", "kernel_size", ")", "\n", "\n", "weights", "=", "standardize_weights", "(", "self", ".", "weight", ",", "scaled", "=", "self", ".", "scaled", ")", "\n", "\n", "return", "F", ".", "conv_transpose2d", "(", "\n", "x", ",", "weights", ",", "self", ".", "bias", ",", "self", ".", "stride", ",", "self", ".", "padding", ",", "output_padding", ",", "\n", "self", ".", "groups", ",", "self", ".", "dilation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.modalities.image.ReLUWS.forward": [[121, 123], ["torch.relu", "torch.relu", "torch.relu"], "methods", ["None"], ["def", "forward", "(", "self", ",", "input", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "F", ".", "relu", "(", "input", ",", "inplace", "=", "self", ".", "inplace", ")", "*", "self", ".", "_SCALE", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.modalities.image.ReLUWS.extra_repr": [[124, 126], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "f\"inplace={self.inplace}\"", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.modalities.image.ResBlock.__init__": [[144, 182], ["super().__init__", "torch_points3d.core.common_modules.Seq().append().append().append().append().append().append", "activation", "torch_points3d.core.common_modules.Seq().append().append", "torch_points3d.core.common_modules.Seq().append().append().append().append().append", "normalization", "normalization", "torch_points3d.core.common_modules.Seq().append", "torch_points3d.core.common_modules.Seq().append().append().append().append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "convolution", "torch_points3d.core.common_modules.Seq", "torch_points3d.core.common_modules.Seq().append().append().append", "activation", "torch_points3d.core.common_modules.Seq().append().append", "normalization", "torch_points3d.core.common_modules.Seq().append", "convolution", "torch_points3d.core.common_modules.Seq"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append"], ["def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "convolution", ",", "normalization", ",", "\n", "activation", ")", ":", "\n", "        ", "if", "convolution", "in", "[", "nn", ".", "ConvTranspose2d", ",", "ConvTranspose2dWS", "]", ":", "\n", "            ", "padding_mode", "=", "'zeros'", "\n", "", "else", ":", "\n", "            ", "padding_mode", "=", "'reflect'", "\n", "\n", "", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "block", "=", "(", "\n", "Seq", "(", ")", ".", "append", "(", "convolution", "(", "\n", "input_nc", ",", "\n", "output_nc", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "padding_mode", "=", "padding_mode", ")", ")", "\n", ".", "append", "(", "normalization", "(", "output_nc", ")", ")", "\n", ".", "append", "(", "activation", "(", ")", ")", "\n", ".", "append", "(", "convolution", "(", "\n", "output_nc", ",", "\n", "output_nc", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "padding_mode", "=", "padding_mode", ")", ")", "\n", ".", "append", "(", "normalization", "(", "output_nc", ")", ")", "\n", ".", "append", "(", "activation", "(", ")", ")", ")", "\n", "\n", "if", "input_nc", "!=", "output_nc", ":", "\n", "            ", "self", ".", "downsample", "=", "(", "\n", "Seq", "(", ")", ".", "append", "(", "nn", ".", "Conv2d", "(", "\n", "input_nc", ",", "\n", "output_nc", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ")", ")", "\n", ".", "append", "(", "normalization", "(", "output_nc", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "downsample", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.modalities.image.ResBlock.forward": [[183, 190], ["image.ResBlock.block", "image.ResBlock.downsample"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "out", "=", "self", ".", "block", "(", "x", ")", "\n", "if", "self", ".", "downsample", ":", "\n", "            ", "out", "+=", "self", ".", "downsample", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "out", "+=", "x", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.modalities.image.BottleneckBlock.__init__": [[195, 238], ["super().__init__", "torch_points3d.core.common_modules.Seq().append().append().append().append().append().append().append().append().append", "activation", "torch_points3d.core.common_modules.Seq().append().append", "torch_points3d.core.common_modules.Seq().append().append().append().append().append().append().append().append", "normalization", "normalization", "torch_points3d.core.common_modules.Seq().append", "torch_points3d.core.common_modules.Seq().append().append().append().append().append().append().append", "convolution", "convolution", "torch_points3d.core.common_modules.Seq", "torch_points3d.core.common_modules.Seq().append().append().append().append().append().append", "activation", "torch_points3d.core.common_modules.Seq().append().append().append().append().append", "normalization", "torch_points3d.core.common_modules.Seq().append().append().append().append", "convolution", "torch_points3d.core.common_modules.Seq().append().append().append", "activation", "torch_points3d.core.common_modules.Seq().append().append", "normalization", "torch_points3d.core.common_modules.Seq().append", "convolution", "torch_points3d.core.common_modules.Seq"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append"], ["def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "convolution", ",", "normalization", ",", "\n", "activation", ",", "reduction", "=", "4", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "convolution", "in", "[", "nn", ".", "ConvTranspose2d", ",", "ConvTranspose2dWS", "]", ":", "\n", "            ", "padding_mode", "=", "'zeros'", "\n", "", "else", ":", "\n", "            ", "padding_mode", "=", "'reflect'", "\n", "\n", "", "self", ".", "block", "=", "(", "\n", "Seq", "(", ")", ".", "append", "(", "convolution", "(", "\n", "input_nc", ",", "\n", "output_nc", "//", "reduction", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ")", ")", "\n", ".", "append", "(", "normalization", "(", "output_nc", "//", "reduction", ")", ")", "\n", ".", "append", "(", "activation", "(", ")", ")", "\n", ".", "append", "(", "convolution", "(", "\n", "output_nc", "//", "reduction", ",", "\n", "output_nc", "//", "reduction", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "padding_mode", "=", "padding_mode", ")", ")", "\n", ".", "append", "(", "normalization", "(", "output_nc", "//", "reduction", ")", ")", "\n", ".", "append", "(", "activation", "(", ")", ")", "\n", ".", "append", "(", "convolution", "(", "\n", "output_nc", "//", "reduction", ",", "\n", "output_nc", ",", "\n", "kernel_size", "=", "1", ",", ")", ")", "\n", ".", "append", "(", "normalization", "(", "output_nc", ")", ")", "\n", ".", "append", "(", "activation", "(", ")", ")", ")", "\n", "\n", "if", "input_nc", "!=", "output_nc", ":", "\n", "            ", "self", ".", "downsample", "=", "(", "\n", "Seq", "(", ")", ".", "append", "(", "convolution", "(", "\n", "input_nc", ",", "\n", "output_nc", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ")", ")", "\n", ".", "append", "(", "normalization", "(", "output_nc", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "downsample", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.modalities.image.BottleneckBlock.forward": [[239, 246], ["image.BottleneckBlock.block", "image.BottleneckBlock.downsample"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "out", "=", "self", ".", "block", "(", "x", ")", "\n", "if", "self", ".", "downsample", ":", "\n", "            ", "out", "+=", "self", ".", "downsample", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "out", "+=", "x", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.modalities.image.ResNetDown.__init__": [[263, 323], ["super().__init__", "getattr", "image.ResNetDown._parse_conv_nn", "torch_points3d.core.common_modules.Seq().append().append().append", "any", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr.", "torch_points3d.core.common_modules.Seq", "range", "len", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch_points3d.core.common_modules.Seq().append().append", "image.ResNetDown.blocks.append", "max", "getattr.", "getattr.", "torch_points3d.core.common_modules.Seq().append", "getattr.", "torch_points3d.core.common_modules.Seq"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.SparseConv3d.modules.ResNetUp._parse_conv_nn", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append"], ["def", "__init__", "(", "\n", "self", ",", "down_conv_nn", "=", "[", "]", ",", "kernel_size", "=", "2", ",", "dilation", "=", "1", ",", "stride", "=", "2", ",", "N", "=", "1", ",", "\n", "padding", "=", "0", ",", "block", "=", "\"ResBlock\"", ",", "padding_mode", "=", "'reflect'", ",", "\n", "normalization", "=", "'BatchNorm2d'", ",", "weight_standardization", "=", "False", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "# If an empty down_conv_nn or channel sizes smaller than 1 are", "\n", "# passed, the ResNetDown will simply become a pass-through", "\n", "# Identity module", "\n", "if", "len", "(", "down_conv_nn", ")", "<", "2", "or", "any", "(", "[", "x", "<", "0", "for", "x", "in", "down_conv_nn", "]", ")", ":", "\n", "            ", "self", ".", "conv_in", "=", "None", "\n", "self", ".", "blocks", "=", "None", "\n", "return", "\n", "\n", "# Recover the block module", "\n", "", "block", "=", "getattr", "(", "_local_modules", ",", "block", ")", "\n", "\n", "# Compute the number of channels for the ResNetDown modules", "\n", "nc_in", ",", "nc_stride_out", ",", "nc_block_in", ",", "nc_out", "=", "self", ".", "_parse_conv_nn", "(", "\n", "down_conv_nn", ",", "stride", ",", "N", ")", "\n", "\n", "# Recover the convolution and activation modules", "\n", "if", "weight_standardization", ":", "\n", "            ", "conv", "=", "getattr", "(", "_local_modules", ",", "self", ".", "CONVOLUTION", "+", "'WS'", ")", "\n", "activation", "=", "getattr", "(", "_local_modules", ",", "self", ".", "ACTIVATION", "+", "'WS'", ")", "\n", "", "else", ":", "\n", "            ", "conv", "=", "getattr", "(", "nn", ",", "self", ".", "CONVOLUTION", ")", "\n", "activation", "=", "getattr", "(", "nn", ",", "self", ".", "ACTIVATION", ")", "\n", "\n", "# Recover the normalization module from torch.nn, for GroupNorm", "\n", "# the number of groups is set to distribute ~16 channels per", "\n", "# group: https://arxiv.org/pdf/1803.08494.pdf", "\n", "", "if", "normalization", "==", "'GroupNorm'", ":", "\n", "            ", "norm", "=", "lambda", "nc", ":", "nn", ".", "GroupNorm", "(", "max", "(", "nc", "//", "16", ",", "1", ")", ",", "nc", ")", "\n", "", "else", ":", "\n", "            ", "norm", "=", "getattr", "(", "nn", ",", "normalization", ")", "\n", "\n", "# Build the initial strided convolution", "\n", "", "self", ".", "conv_in", "=", "(", "\n", "Seq", "(", ")", ".", "append", "(", "conv", "(", "\n", "in_channels", "=", "nc_in", ",", "\n", "out_channels", "=", "nc_stride_out", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "dilation", "=", "dilation", ",", "\n", "padding", "=", "padding", ",", "\n", "padding_mode", "=", "padding_mode", ")", ")", "\n", ".", "append", "(", "norm", "(", "nc_stride_out", ")", ")", "\n", ".", "append", "(", "activation", "(", ")", ")", ")", "\n", "\n", "# Build the N subsequent blocks", "\n", "if", "N", ">", "0", ":", "\n", "            ", "self", ".", "blocks", "=", "Seq", "(", ")", "\n", "for", "_", "in", "range", "(", "N", ")", ":", "\n", "                ", "self", ".", "blocks", ".", "append", "(", "block", "(", "nc_block_in", ",", "nc_out", ",", "conv", ",", "\n", "norm", ",", "activation", ")", ")", "\n", "nc_block_in", "=", "nc_out", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "blocks", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.modalities.image.ResNetDown._parse_conv_nn": [[324, 334], ["is_list", "len", "len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.config.is_list", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "", "def", "_parse_conv_nn", "(", "self", ",", "down_conv_nn", ",", "stride", ",", "N", ")", ":", "\n", "        ", "if", "is_list", "(", "down_conv_nn", "[", "0", "]", ")", ":", "\n", "            ", "down_conv_nn", "=", "down_conv_nn", "[", "0", "]", "\n", "", "assert", "len", "(", "down_conv_nn", ")", "==", "2", ",", "f\"ResNetDown expects down_conv_nn to have length of 2 to carry \"", "f\"(nc_in, nc_out) but got len(down_conv_nn)={len(down_conv_nn)}.\"", "\n", "nc_in", ",", "nc_out", "=", "down_conv_nn", "\n", "nc_stride_out", "=", "nc_in", "if", "stride", ">", "1", "and", "N", ">", "0", "else", "nc_out", "\n", "nc_block_in", "=", "nc_stride_out", "\n", "return", "nc_in", ",", "nc_stride_out", ",", "nc_block_in", ",", "nc_out", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.modalities.image.ResNetDown.forward": [[335, 341], ["image.ResNetDown.conv_in", "image.ResNetDown.blocks"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "self", ".", "conv_in", ":", "\n", "            ", "x", "=", "self", ".", "conv_in", "(", "x", ")", "\n", "", "if", "self", ".", "blocks", ":", "\n", "            ", "x", "=", "self", ".", "blocks", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.modalities.image.ResNetUp.__init__": [[348, 357], ["image.ResNetDown.__init__"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["def", "__init__", "(", "self", ",", "up_conv_nn", "=", "[", "]", ",", "kernel_size", "=", "2", ",", "dilation", "=", "1", ",", "stride", "=", "2", ",", "N", "=", "1", ",", "\n", "padding", "=", "0", ",", "padding_mode", "=", "'zeros'", ",", "normalization", "=", "'BatchNorm2d'", ",", "\n", "weight_standardization", "=", "False", ",", "skip_first", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "skip_first", "=", "skip_first", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "down_conv_nn", "=", "up_conv_nn", ",", "kernel_size", "=", "kernel_size", ",", "\n", "dilation", "=", "dilation", ",", "stride", "=", "stride", ",", "N", "=", "N", ",", "padding", "=", "padding", ",", "\n", "padding_mode", "=", "padding_mode", ",", "normalization", "=", "normalization", ",", "\n", "weight_standardization", "=", "weight_standardization", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.modalities.image.ResNetUp._parse_conv_nn": [[358, 383], ["is_list", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.config.is_list", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "def", "_parse_conv_nn", "(", "self", ",", "up_conv_nn", ",", "stride", ",", "N", ")", ":", "\n", "        ", "if", "is_list", "(", "up_conv_nn", "[", "0", "]", ")", ":", "\n", "            ", "up_conv_nn", "=", "up_conv_nn", "[", "0", "]", "\n", "\n", "", "if", "self", ".", "skip_first", ":", "\n", "            ", "assert", "len", "(", "up_conv_nn", ")", "==", "2", ",", "f\"ResNetUp with skip_first=True expects down_conv_nn to have \"", "f\"length of 2 to carry (nc_in, nc_out) but got \"", "f\"len(up_conv_nn)={len(up_conv_nn)}.\"", "\n", "", "else", ":", "\n", "            ", "assert", "len", "(", "up_conv_nn", ")", "==", "3", ",", "f\"ResNetUp with skip_first=False expects up_conv_nn to have \"", "f\"length of 3 to carry (nc_in, nc_skip_in, nc_out) but got \"", "f\"len(up_conv_nn)={len(up_conv_nn)}.\"", "\n", "\n", "", "if", "self", ".", "skip_first", ":", "\n", "            ", "nc_in", ",", "nc_out", "=", "up_conv_nn", "\n", "nc_stride_out", "=", "nc_in", "if", "stride", ">", "1", "and", "N", ">", "0", "else", "nc_out", "\n", "nc_block_in", "=", "nc_stride_out", "\n", "", "else", ":", "\n", "            ", "nc_in", ",", "nc_skip_in", ",", "nc_out", "=", "up_conv_nn", "\n", "nc_stride_out", "=", "nc_in", "if", "stride", ">", "1", "and", "N", ">", "0", "else", "nc_out", "\n", "nc_block_in", "=", "nc_stride_out", "+", "nc_skip_in", "\n", "\n", "", "return", "nc_in", ",", "nc_stride_out", ",", "nc_block_in", ",", "nc_out", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.modalities.image.ResNetUp.forward": [[384, 398], ["image.ResNetUp.blocks", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "image.ResNetUp.conv_in", "image.ResNetUp.conv_in", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat"], ["", "def", "forward", "(", "self", ",", "x", ",", "skip", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "self", ".", "skip_first", ":", "\n", "            ", "if", "skip", "is", "not", "None", ":", "\n", "                ", "x", "=", "torch", ".", "cat", "(", "(", "x", ",", "skip", ")", ",", "dim", "=", "1", ")", "\n", "", "if", "self", ".", "conv_in", ":", "\n", "                ", "x", "=", "self", ".", "conv_in", "(", "x", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "self", ".", "conv_in", ":", "\n", "                ", "x", "=", "self", ".", "conv_in", "(", "x", ")", "\n", "", "if", "skip", "is", "not", "None", ":", "\n", "                ", "x", "=", "torch", ".", "cat", "(", "(", "x", ",", "skip", ")", ",", "dim", "=", "1", ")", "\n", "", "", "if", "self", ".", "blocks", ":", "\n", "            ", "x", "=", "self", ".", "blocks", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.modalities.image.ResNetUp.extra_repr": [[399, 401], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "f\"skip_first={self.skip_first}\"", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.modalities.image.UnaryConv.__init__": [[406, 445], ["super().__init__", "image.Conv2dWS", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "image.PersistentDropout2d", "image.Dropout2d", "getattr", "getattr", "getattr", "image.PersistentDropout2d", "image.Dropout2d", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "max"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "normalization", "=", "None", ",", "activation", "=", "None", ",", "\n", "weight_standardization", "=", "False", ",", "in_drop", "=", "0", ",", "out_drop", "=", "0", ",", "\n", "persistent_drop", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "# Build the input Dropout if any", "\n", "if", "in_drop", "is", "None", "or", "in_drop", "<=", "0", ":", "\n", "            ", "self", ".", "input_dropout", "=", "None", "\n", "", "elif", "persistent_drop", ":", "\n", "            ", "self", ".", "input_dropout", "=", "PersistentDropout2d", "(", "input_nc", ",", "p", "=", "in_drop", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "input_dropout", "=", "Dropout2d", "(", "p", "=", "in_drop", ",", "inplace", "=", "True", ")", "\n", "\n", "# Recover the normalization module from torch.nn, for GroupNorm", "\n", "# the number of groups is set to distribute ~16 channels per", "\n", "# group: https://arxiv.org/pdf/1803.08494.pdf", "\n", "", "if", "normalization", "is", "None", ":", "\n", "            ", "self", ".", "norm", "=", "None", "\n", "", "elif", "normalization", "==", "'GroupNorm'", ":", "\n", "            ", "self", ".", "norm", "=", "lambda", "nc", ":", "nn", ".", "GroupNorm", "(", "max", "(", "nc", "//", "16", ",", "1", ")", ",", "nc", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "norm", "=", "getattr", "(", "nn", ",", "normalization", ")", "\n", "\n", "# Build the 1x1 convolution and activation", "\n", "", "if", "weight_standardization", ":", "\n", "            ", "self", ".", "conv", "=", "Conv2dWS", "(", "input_nc", ",", "output_nc", ",", "stride", "=", "1", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "activation", "=", "getattr", "(", "_local_modules", ",", "activation", "+", "'WS'", ")", "if", "activation", "is", "not", "None", "else", "None", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "input_nc", ",", "output_nc", ",", "stride", "=", "1", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "activation", "=", "getattr", "(", "nn", ",", "activation", ")", "if", "activation", "is", "not", "None", "else", "None", "\n", "\n", "# Build the output Dropout if any", "\n", "", "if", "out_drop", "is", "None", "or", "out_drop", "<=", "0", ":", "\n", "            ", "self", ".", "output_dropout", "=", "None", "\n", "", "elif", "persistent_drop", ":", "\n", "            ", "self", ".", "output_dropout", "=", "PersistentDropout2d", "(", "output_nc", ",", "p", "=", "out_drop", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "output_dropout", "=", "Dropout2d", "(", "p", "=", "out_drop", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.modalities.image.UnaryConv.forward": [[446, 457], ["image.UnaryConv.conv", "image.UnaryConv.input_dropout", "image.UnaryConv.norm", "image.UnaryConv.activation", "image.UnaryConv.output_dropout"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.base_conv.message_passing.BaseResnetBlockDown.conv"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "self", ".", "input_dropout", ":", "\n", "            ", "x", "=", "self", ".", "input_dropout", "(", "x", ",", "**", "kwargs", ")", "\n", "", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "if", "self", ".", "norm", ":", "\n", "            ", "x", "=", "self", ".", "norm", "(", "x", ")", "\n", "", "if", "self", ".", "activation", ":", "\n", "            ", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "", "if", "self", ".", "output_dropout", ":", "\n", "            ", "x", "=", "self", ".", "output_dropout", "(", "x", ",", "**", "kwargs", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.modalities.image.Dropout2d.forward": [[461, 463], ["super().forward"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.forward"], ["def", "forward", "(", "self", ",", "input", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "super", "(", ")", ".", "forward", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.modalities.image.PersistentDropout2d.__init__": [[477, 482], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["def", "__init__", "(", "self", ",", "input_nc", ",", "p", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "input_nc", "=", "input_nc", "\n", "self", ".", "p", "=", "p", "\n", "self", ".", "mask", "=", "None", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.modalities.image.PersistentDropout2d.forward": [[483, 502], ["x.new_empty", "mask.bernoulli_.bernoulli_.bernoulli_", "mask.bernoulli_.bernoulli_.div_", "image.PersistentDropout2d.mask.expand_as"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "reset", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            x :class:`torch.FloatTensor`: Input to apply dropout too.\n            reset (bool, optional): If set to ``True``, will reset the\n                dropout mask.\n        \"\"\"", "\n", "# Dropout acts as Identity in eval mode", "\n", "if", "not", "self", ".", "training", "or", "not", "self", ".", "p", ":", "\n", "            ", "self", ".", "mask", "=", "None", "\n", "return", "x", "\n", "\n", "# Reset the feature dropout mask", "\n", "", "if", "self", ".", "mask", "is", "None", "or", "reset", ":", "\n", "            ", "mask", "=", "x", ".", "new_empty", "(", "1", ",", "self", ".", "input_nc", ",", "1", ",", "1", ",", "requires_grad", "=", "False", ")", "\n", "mask", "=", "mask", ".", "bernoulli_", "(", "1", "-", "self", ".", "p", ")", "\n", "self", ".", "mask", "=", "mask", ".", "div_", "(", "1", "-", "self", ".", "p", ")", "\n", "\n", "", "return", "x", "*", "self", ".", "mask", ".", "expand_as", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.modalities.image.PersistentDropout2d.extra_repr": [[503, 505], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "f\"input_nc={self.input_nc}, p={self.p}\"", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.modalities.image.UNet.__init__": [[536, 545], ["super().__init__", "is_list", "is_list", "image.UNet._init_from_compact_format"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.config.is_list", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.config.is_list", "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_architectures.backbone.BackboneBasedModel._init_from_compact_format"], ["def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "# Detect which options format has been used to define the model", "\n", "if", "is_list", "(", "opt", ".", "down_conv", ")", "or", "\"down_conv_nn\"", "not", "in", "opt", ".", "down_conv", "or", "is_list", "(", "opt", ".", "up_conv", ")", "or", "'up_conv_nn'", "not", "in", "opt", ".", "up_conv", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "else", ":", "\n", "            ", "self", ".", "_init_from_compact_format", "(", "opt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.modalities.image.UNet._init_from_compact_format": [[546, 573], ["torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "len", "image.UNet._build_module", "image.UNet.down_modules.append", "hasattr", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "image.UNet._build_module", "image.UNet.inner_modules.append", "len", "image.UNet._build_module", "image.UNet.up_modules.append", "hasattr", "image.UNet._build_module"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_architectures.backbone.BackboneBasedModel._build_module", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_architectures.backbone.BackboneBasedModel._build_module", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_architectures.backbone.BackboneBasedModel._build_module", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_architectures.backbone.BackboneBasedModel._build_module"], ["", "", "def", "_init_from_compact_format", "(", "self", ",", "opt", ")", ":", "\n", "# Down modules", "\n", "        ", "self", ".", "down_modules", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "opt", ".", "down_conv", ".", "down_conv_nn", ")", ")", ":", "\n", "            ", "down_module", "=", "self", ".", "_build_module", "(", "opt", ".", "down_conv", ",", "i", ",", "\"DOWN\"", ")", "\n", "self", ".", "down_modules", ".", "append", "(", "down_module", ")", "\n", "\n", "# Innermost module", "\n", "", "if", "hasattr", "(", "opt", ",", "\"innermost\"", ")", "and", "opt", ".", "innermost", "is", "not", "None", ":", "\n", "            ", "self", ".", "inner_modules", "=", "nn", ".", "ModuleList", "(", ")", "\n", "inners", "=", "self", ".", "_build_module", "(", "opt", ".", "innermost", ",", "0", ",", "\"INNER\"", ")", "\n", "self", ".", "inner_modules", ".", "append", "(", "inners", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "inner_modules", "=", "None", "\n", "\n", "# Up modules", "\n", "", "self", ".", "up_modules", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "opt", ".", "up_conv", ".", "up_conv_nn", ")", ")", ":", "\n", "            ", "up_module", "=", "self", ".", "_build_module", "(", "opt", ".", "up_conv", ",", "i", ",", "\"UP\"", ")", "\n", "self", ".", "up_modules", ".", "append", "(", "up_module", ")", "\n", "\n", "# Final 1x1 conv", "\n", "", "if", "hasattr", "(", "opt", ",", "\"last_conv\"", ")", "and", "opt", ".", "last_conv", "is", "not", "None", ":", "\n", "            ", "last", "=", "self", ".", "_build_module", "(", "opt", ".", "last_conv", ",", "0", ",", "\"LAST\"", ")", "\n", "self", ".", "last", "=", "last", "\n", "", "else", ":", "\n", "            ", "self", ".", "last", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.modalities.image.UNet._build_module": [[574, 596], ["fetch_arguments_from_list", "module_cls", "flow.lower", "flow.lower", "flow.lower", "flow.lower"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.config.fetch_arguments_from_list"], ["", "", "def", "_build_module", "(", "self", ",", "opt", ",", "index", ",", "flow", ")", ":", "\n", "        ", "\"\"\"Builds a convolution (up, down or inner) block.\n\n        Arguments:\n            conv_opt - model config subset describing the convolutional\n                block\n            index - layer index in sequential order (as they come in the\n                config)\n            flow - UP, DOWN or INNER\n        \"\"\"", "\n", "if", "flow", ".", "lower", "(", ")", "==", "'DOWN'", ".", "lower", "(", ")", ":", "\n", "            ", "module_cls", "=", "ResNetDown", "\n", "", "elif", "flow", ".", "lower", "(", ")", "==", "'INNER'", ".", "lower", "(", ")", ":", "\n", "            ", "module_cls", "=", "BottleneckBlock", "\n", "", "elif", "flow", ".", "lower", "(", ")", "==", "'UP'", ".", "lower", "(", ")", ":", "\n", "            ", "module_cls", "=", "ResNetUp", "\n", "", "elif", "flow", ".", "lower", "(", ")", "==", "'LAST'", ".", "lower", "(", ")", ":", "\n", "            ", "module_cls", "=", "UnaryConv", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "args", "=", "fetch_arguments_from_list", "(", "opt", ",", "index", ",", "SPECIAL_NAMES", ")", "\n", "return", "module_cls", "(", "**", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.modalities.image.UNet.forward": [[597, 628], ["range", "range", "stack_down.append", "stack_down.append", "len", "image.UNet.last", "len", "stack_down.pop"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "def", "forward", "(", "self", ",", "x", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"This method does a forward on the Unet assuming symmetrical\n        skip connections.\n\n        Parameters\n        ----------\n        x: torch.Tensor of images [BxCxHxW]\n        \"\"\"", "\n", "stack_down", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "down_modules", ")", "-", "1", ")", ":", "\n", "            ", "x", "=", "self", ".", "down_modules", "[", "i", "]", "(", "x", ")", "\n", "stack_down", ".", "append", "(", "x", ")", "\n", "", "x", "=", "self", ".", "down_modules", "[", "-", "1", "]", "(", "x", ")", "\n", "\n", "if", "self", ".", "inner_modules", "is", "not", "None", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "# TODO: debug innermost, stacks and upconv", "\n", "x", "=", "self", ".", "inner_modules", "[", "0", "]", "(", "x", ")", "\n", "\n", "# Recover the skip mode from the up modules", "\n", "", "if", "self", ".", "up_modules", "[", "0", "]", ".", "skip_first", ":", "\n", "            ", "stack_down", ".", "append", "(", "None", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "self", ".", "up_modules", ")", ")", ":", "\n", "            ", "skip", "=", "stack_down", ".", "pop", "(", "-", "1", ")", "if", "stack_down", "else", "None", "\n", "x", "=", "self", ".", "up_modules", "[", "i", "]", "(", "x", ",", "skip", ")", "\n", "\n", "", "if", "self", ".", "last", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "last", "(", "x", ",", "**", "kwargs", ")", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.modalities.image.PrudentSynchronizedBatchNorm2d.forward": [[639, 646], ["super().forward"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.forward"], ["def", "forward", "(", "self", ",", "input", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "is_training", "=", "self", ".", "training", "\n", "if", "input", ".", "shape", "[", "0", "]", "==", "input", ".", "shape", "[", "2", "]", "==", "input", ".", "shape", "[", "3", "]", "==", "1", ":", "\n", "            ", "self", ".", "training", "=", "False", "\n", "", "output", "=", "super", "(", ")", ".", "forward", "(", "input", ")", "\n", "self", ".", "training", "=", "is_training", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.modalities.image.PrudentSynchronizedBatchNorm2d.from_pretrained": [[647, 657], ["cls", "bn_pretrained.__dict__.items", "setattr"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "from_pretrained", "(", "cls", ",", "bn_pretrained", ")", ":", "\n", "# Initialize to default PPMFeatMap instance", "\n", "        ", "bn_new", "=", "cls", "(", "bn_pretrained", ".", "num_features", ")", "\n", "\n", "# Recover all attributes", "\n", "for", "k", ",", "v", "in", "bn_pretrained", ".", "__dict__", ".", "items", "(", ")", ":", "\n", "            ", "setattr", "(", "bn_new", ",", "k", ",", "v", ")", "\n", "\n", "", "return", "bn_new", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.modalities.image.PPMFeatMap.__init__": [[664, 682], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Sequential", "torch.Sequential", "torch.Sequential", "image.PPMFeatMap.ppm.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "mit_semseg.lib.nn.SynchronizedBatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "image.PrudentSynchronizedBatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["def", "__init__", "(", "self", ",", "fc_dim", "=", "4096", ",", "pool_scales", "=", "(", "1", ",", "2", ",", "3", ",", "6", ")", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "ppm", "=", "[", "]", "\n", "for", "scale", "in", "pool_scales", ":", "\n", "            ", "self", ".", "ppm", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "AdaptiveAvgPool2d", "(", "scale", ")", ",", "\n", "nn", ".", "Conv2d", "(", "fc_dim", ",", "512", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "PrudentSynchronizedBatchNorm2d", "(", "512", ")", ",", "# (1, C, 1, 1) inputs hurt basic BN", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", ")", "\n", "", "self", ".", "ppm", "=", "nn", ".", "ModuleList", "(", "self", ".", "ppm", ")", "\n", "\n", "self", ".", "conv_last", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "fc_dim", "+", "len", "(", "pool_scales", ")", "*", "512", ",", "512", ",", "\n", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "MITSynchronizedBatchNorm2d", "(", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.modalities.image.PPMFeatMap.from_pretrained": [[684, 700], ["cls", "torch.Sequential", "torch.Sequential", "torch.Sequential", "image.PrudentSynchronizedBatchNorm2d.from_pretrained", "list"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.modalities.image.PPMFeatMap.from_pretrained"], ["", "@", "classmethod", "\n", "def", "from_pretrained", "(", "cls", ",", "ppm_pretrained", ")", ":", "\n", "# Initialize to default PPMFeatMap instance", "\n", "        ", "ppm_new", "=", "cls", "(", ")", "\n", "\n", "# Recover the PPM module", "\n", "ppm_new", ".", "ppm", "=", "ppm_pretrained", ".", "ppm", "\n", "\n", "# Change the PPM MITSynchronizedBatchNorm2d to PrudentBatchNorm2d", "\n", "# to handle single-image batches", "\n", "for", "m", "in", "ppm_new", ".", "ppm", ":", "\n", "            ", "m", "[", "2", "]", "=", "PrudentSynchronizedBatchNorm2d", ".", "from_pretrained", "(", "m", "[", "2", "]", ")", "\n", "\n", "# Recover the conv_last module without dropout and classifier", "\n", "", "ppm_new", ".", "conv_last", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "ppm_pretrained", ".", "conv_last", ")", "[", ":", "-", "2", "]", ")", "\n", "return", "ppm_new", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.modalities.image.PPMFeatMap.forward": [[701, 719], ["conv5.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "image.PPMFeatMap.conv_last", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "pool_scale"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append"], ["", "def", "forward", "(", "self", ",", "conv_out", ",", "*", "args", ",", "out_size", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "conv5", "=", "conv_out", "[", "-", "1", "]", "\n", "\n", "input_size", "=", "conv5", ".", "size", "(", ")", "\n", "ppm_out", "=", "[", "conv5", "]", "\n", "for", "pool_scale", "in", "self", ".", "ppm", ":", "\n", "            ", "ppm_out", ".", "append", "(", "F", ".", "interpolate", "(", "\n", "pool_scale", "(", "conv5", ")", ",", "(", "input_size", "[", "2", "]", ",", "input_size", "[", "3", "]", ")", ",", "\n", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", ")", "\n", "", "ppm_out", "=", "torch", ".", "cat", "(", "ppm_out", ",", "1", ")", "\n", "\n", "x", "=", "self", ".", "conv_last", "(", "ppm_out", ")", "\n", "\n", "if", "out_size", "is", "not", "None", ":", "\n", "            ", "x", "=", "F", ".", "interpolate", "(", "\n", "x", ",", "size", "=", "out_size", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.modalities.image.ADE20KResNet18PPM.__init__": [[727, 772], ["super().__init__", "os.join", "os.join", "mit_semseg.config.cfg.merge_from_file", "mit_semseg.config.cfg.MODEL.arch_encoder.lower", "mit_semseg.config.cfg.MODEL.arch_decoder.lower", "os.join", "os.join", "os.join", "os.join", "open", "mit_semseg.models.ModelBuilder.build_encoder", "mit_semseg.models.ModelBuilder.build_decoder", "image.PPMFeatMap.from_pretrained", "os.join", "os.join", "os.exists", "os.exists", "os.exists", "os.exists"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.modalities.image.PPMFeatMap.from_pretrained"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "frozen", "=", "False", ",", "pretrained", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "# Adapt the default config to use ResNet18 + PPM-Deepsup model", "\n", "ARCH", "=", "'resnet18dilated-ppm_deepsup'", "\n", "DIR", "=", "osp", ".", "join", "(", "PRETRAINED_DIR", ",", "'ade20k'", ",", "ARCH", ")", "\n", "MITCfg", ".", "merge_from_file", "(", "osp", ".", "join", "(", "DIR", ",", "f'{ARCH}.yaml'", ")", ")", "\n", "MITCfg", ".", "MODEL", ".", "arch_encoder", "=", "MITCfg", ".", "MODEL", ".", "arch_encoder", ".", "lower", "(", ")", "\n", "MITCfg", ".", "MODEL", ".", "arch_decoder", "=", "MITCfg", ".", "MODEL", ".", "arch_decoder", ".", "lower", "(", ")", "\n", "MITCfg", ".", "DIR", "=", "DIR", "\n", "\n", "# Absolute paths of model weights", "\n", "MITCfg", ".", "MODEL", ".", "weights_encoder", "=", "osp", ".", "join", "(", "\n", "MITCfg", ".", "DIR", ",", "'encoder_'", "+", "MITCfg", ".", "TEST", ".", "checkpoint", ")", "\n", "MITCfg", ".", "MODEL", ".", "weights_decoder", "=", "osp", ".", "join", "(", "\n", "MITCfg", ".", "DIR", ",", "'decoder_'", "+", "MITCfg", ".", "TEST", ".", "checkpoint", ")", "\n", "\n", "assert", "osp", ".", "exists", "(", "MITCfg", ".", "MODEL", ".", "weights_encoder", ")", "and", "osp", ".", "exists", "(", "MITCfg", ".", "MODEL", ".", "weights_decoder", ")", ",", "\"checkpoint does not exist!\"", "\n", "\n", "# Build encoder and decoder from pretrained weights", "\n", "old_stdout", "=", "sys", ".", "stdout", "# backup current stdout", "\n", "sys", ".", "stdout", "=", "open", "(", "os", ".", "devnull", ",", "\"w\"", ")", "\n", "self", ".", "pretrained", "=", "pretrained", "\n", "self", ".", "encoder", "=", "MITModelBuilder", ".", "build_encoder", "(", "\n", "arch", "=", "MITCfg", ".", "MODEL", ".", "arch_encoder", ",", "\n", "fc_dim", "=", "MITCfg", ".", "MODEL", ".", "fc_dim", ",", "\n", "weights", "=", "MITCfg", ".", "MODEL", ".", "weights_encoder", "if", "pretrained", "else", "''", ")", "\n", "self", ".", "decoder", "=", "MITModelBuilder", ".", "build_decoder", "(", "\n", "arch", "=", "MITCfg", ".", "MODEL", ".", "arch_decoder", ",", "\n", "fc_dim", "=", "MITCfg", ".", "MODEL", ".", "fc_dim", ",", "\n", "num_class", "=", "MITCfg", ".", "DATASET", ".", "num_class", ",", "\n", "weights", "=", "MITCfg", ".", "MODEL", ".", "weights_decoder", "if", "pretrained", "else", "''", ",", "\n", "use_softmax", "=", "True", ")", "\n", "sys", ".", "stdout", "=", "old_stdout", "# reset old stdout", "\n", "\n", "# Convert PPM from a classifier into a feature map extractor", "\n", "self", ".", "decoder", "=", "PPMFeatMap", ".", "from_pretrained", "(", "self", ".", "decoder", ")", "\n", "\n", "# If the model is frozen, it will always remain in eval mode", "\n", "# and the parameters will have requires_grad=False", "\n", "self", ".", "frozen", "=", "frozen", "\n", "if", "self", ".", "frozen", ":", "\n", "            ", "self", ".", "training", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.modalities.image.ADE20KResNet18PPM.forward": [[773, 777], ["image.ADE20KResNet18PPM.decoder", "image.ADE20KResNet18PPM.encoder"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "*", "args", ",", "out_size", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "pred", "=", "self", ".", "decoder", "(", "self", ".", "encoder", "(", "x", ",", "return_feature_maps", "=", "True", ")", ",", "\n", "out_size", "=", "out_size", ")", "\n", "return", "pred", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.modalities.image.ADE20KResNet18PPM.frozen": [[782, 788], ["isinstance", "image.ADE20KResNet18PPM.parameters"], "methods", ["None"], ["", "@", "frozen", ".", "setter", "\n", "def", "frozen", "(", "self", ",", "frozen", ")", ":", "\n", "        ", "if", "isinstance", "(", "frozen", ",", "bool", ")", ":", "\n", "            ", "self", ".", "_frozen", "=", "frozen", "\n", "", "for", "p", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "p", ".", "requires_grad", "=", "not", "self", ".", "frozen", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.modalities.image.ADE20KResNet18PPM.train": [[789, 791], ["super().train"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.modalities.image.CityscapesResNet18TruncatedLayer4.train"], ["", "", "def", "train", "(", "self", ",", "mode", "=", "True", ")", ":", "\n", "        ", "return", "super", "(", ")", ".", "train", "(", "mode", "and", "not", "self", ".", "frozen", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.modalities.image.ADE20KResNet18TruncatedLayer4.__init__": [[803, 859], ["torch.Module.__init__", "os.join", "os.join", "mit_semseg.config.cfg.merge_from_file", "mit_semseg.config.cfg.MODEL.arch_encoder.lower", "os.join", "os.join", "os.exists", "os.exists", "open", "mit_semseg.models.ModelBuilder.build_encoder", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "os.join", "os.join", "getattr"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["def", "__init__", "(", "self", ",", "frozen", "=", "False", ",", "scale_factor", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "# Adapt the default config to use ResNet18 + PPM-Deepsup model", "\n", "ARCH", "=", "'resnet18dilated-ppm_deepsup'", "\n", "DIR", "=", "osp", ".", "join", "(", "PRETRAINED_DIR", ",", "'ade20k'", ",", "ARCH", ")", "\n", "MITCfg", ".", "merge_from_file", "(", "osp", ".", "join", "(", "DIR", ",", "f'{ARCH}.yaml'", ")", ")", "\n", "MITCfg", ".", "MODEL", ".", "arch_encoder", "=", "MITCfg", ".", "MODEL", ".", "arch_encoder", ".", "lower", "(", ")", "\n", "MITCfg", ".", "DIR", "=", "DIR", "\n", "\n", "# Absolute paths of model weights", "\n", "MITCfg", ".", "MODEL", ".", "weights_encoder", "=", "osp", ".", "join", "(", "\n", "MITCfg", ".", "DIR", ",", "'encoder_'", "+", "MITCfg", ".", "TEST", ".", "checkpoint", ")", "\n", "\n", "assert", "osp", ".", "exists", "(", "MITCfg", ".", "MODEL", ".", "weights_encoder", ")", ",", "\"checkpoint does not exist!\"", "\n", "\n", "# Build encoder from pretrained weights", "\n", "old_stdout", "=", "sys", ".", "stdout", "# backup current stdout", "\n", "sys", ".", "stdout", "=", "open", "(", "os", ".", "devnull", ",", "\"w\"", ")", "\n", "resnet18", "=", "MITModelBuilder", ".", "build_encoder", "(", "\n", "arch", "=", "MITCfg", ".", "MODEL", ".", "arch_encoder", ",", "\n", "fc_dim", "=", "MITCfg", ".", "MODEL", ".", "fc_dim", ",", "\n", "weights", "=", "MITCfg", ".", "MODEL", ".", "weights_encoder", ")", "\n", "sys", ".", "stdout", "=", "old_stdout", "\n", "\n", "# Combine the ResNet first conv-bn-relu blocks and maxpool as", "\n", "# layer0", "\n", "resnet18", ".", "layer0", "=", "nn", ".", "Sequential", "(", "\n", "resnet18", ".", "conv1", ",", "\n", "resnet18", ".", "bn1", ",", "\n", "resnet18", ".", "relu1", ",", "\n", "resnet18", ".", "conv2", ",", "\n", "resnet18", ".", "bn2", ",", "\n", "resnet18", ".", "relu2", ",", "\n", "resnet18", ".", "conv3", ",", "\n", "resnet18", ".", "bn3", ",", "\n", "resnet18", ".", "relu3", ",", "\n", "resnet18", ".", "maxpool", ")", "\n", "\n", "# Combine the selected layers into a nn.Sequential", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "*", "[", "getattr", "(", "resnet18", ",", "layer", ")", "for", "layer", "in", "self", ".", "_LAYERS", "]", ")", "\n", "\n", "# If the model is frozen, it will always remain in eval mode", "\n", "# and the parameters will have requires_grad=False", "\n", "self", ".", "frozen", "=", "frozen", "\n", "if", "self", ".", "frozen", ":", "\n", "            ", "self", ".", "training", "=", "False", "\n", "\n", "# Output will be resized wrt scale_factor if not None.", "\n", "# If scale_factor < 0, the output will be resized to the input", "\n", "# size", "\n", "", "if", "scale_factor", "is", "not", "None", "and", "scale_factor", "<", "0", ":", "\n", "            ", "scale_factor", "=", "self", ".", "conv_scale_factor", "\n", "", "self", ".", "scale_factor", "=", "scale_factor", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.modalities.image.ADE20KResNet18TruncatedLayer4.forward": [[860, 867], ["image.ADE20KResNet18TruncatedLayer4.conv", "torch.interpolate", "torch.interpolate", "torch.interpolate"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.base_conv.message_passing.BaseResnetBlockDown.conv"], ["", "def", "forward", "(", "self", ",", "x", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "if", "self", ".", "scale_factor", "is", "not", "None", ":", "\n", "            ", "x", "=", "F", ".", "interpolate", "(", "\n", "x", ",", "scale_factor", "=", "self", ".", "scale_factor", ",", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "False", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.modalities.image.ADE20KResNet18TruncatedLayer4.input_nc": [[868, 871], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "input_nc", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_LAYERS_IN", "[", "self", ".", "_LAYERS", "[", "0", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.modalities.image.ADE20KResNet18TruncatedLayer4.output_nc": [[872, 875], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "output_nc", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_LAYERS_OUT", "[", "self", ".", "_LAYERS", "[", "-", "1", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.modalities.image.ADE20KResNet18TruncatedLayer4.conv_scale_factor": [[876, 880], ["torch.prod().item", "torch.prod().item", "torch.prod().item", "torch.prod().item", "torch.prod().item", "torch.prod().item", "torch.prod().item", "torch.prod().item", "torch.prod().item", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor"], "methods", ["None"], ["", "@", "property", "\n", "def", "conv_scale_factor", "(", "self", ")", ":", "\n", "        ", "return", "torch", ".", "prod", "(", "torch", ".", "LongTensor", "(", "[", "\n", "self", ".", "_LAYERS_SCALE", "[", "s", "]", "for", "s", "in", "self", ".", "_LAYERS", "]", ")", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.modalities.image.ADE20KResNet18TruncatedLayer4.frozen": [[885, 891], ["isinstance", "image.ADE20KResNet18TruncatedLayer4.parameters"], "methods", ["None"], ["", "@", "frozen", ".", "setter", "\n", "def", "frozen", "(", "self", ",", "frozen", ")", ":", "\n", "        ", "if", "isinstance", "(", "frozen", ",", "bool", ")", ":", "\n", "            ", "self", ".", "_frozen", "=", "frozen", "\n", "", "for", "p", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "p", ".", "requires_grad", "=", "not", "self", ".", "frozen", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.modalities.image.ADE20KResNet18TruncatedLayer4.train": [[892, 895], ["super().train"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.modalities.image.CityscapesResNet18TruncatedLayer4.train"], ["", "", "def", "train", "(", "self", ",", "mode", "=", "True", ")", ":", "\n", "        ", "return", "super", "(", ")", ".", "train", "(", "\n", "mode", "and", "not", "self", ".", "frozen", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.modalities.image.ADE20KResNet18TruncatedLayer4.extra_repr": [[896, 899], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "f\"scale_factor={self.scale_factor}\"", "if", "self", ".", "scale_factor", "is", "not", "None", "else", "\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.modalities.image.ADE20KResNet18Pyramid.__init__": [[938, 943], ["image.ADE20KResNet18TruncatedLayer4.__init__"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "frozen", "=", "False", ",", "scale_factor", "=", "-", "1", ",", "**", "kwargs", ")", ":", "\n", "        ", "assert", "scale_factor", "is", "not", "None", ",", "f'scale_factor cannot be None for feature pyramid.'", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "frozen", "=", "frozen", ",", "scale_factor", "=", "scale_factor", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.modalities.image.ADE20KResNet18Pyramid.forward": [[944, 957], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "int", "layer", "torch.interpolate", "torch.interpolate", "torch.interpolate", "feature_pyramid.append"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append"], ["", "def", "forward", "(", "self", ",", "x", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "feature_pyramid", "=", "[", "]", "\n", "output_size", "=", "[", "\n", "int", "(", "s", "*", "self", ".", "scale_factor", "/", "self", ".", "conv_scale_factor", ")", "\n", "for", "s", "in", "x", ".", "shape", "[", "2", ":", "4", "]", "]", "\n", "\n", "for", "layer", "in", "self", ".", "conv", ":", "\n", "            ", "x", "=", "layer", "(", "x", ")", "\n", "x_up", "=", "F", ".", "interpolate", "(", "\n", "x", ",", "size", "=", "output_size", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "feature_pyramid", ".", "append", "(", "x_up", ")", "\n", "\n", "", "return", "torch", ".", "cat", "(", "feature_pyramid", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.modalities.image.ResNet18TruncatedLayer4.__init__": [[998, 1027], ["torch.Module.__init__", "image._instantiate_torchvision_resnet", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "getattr"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.modalities.image._instantiate_torchvision_resnet"], ["def", "__init__", "(", "\n", "self", ",", "frozen", "=", "False", ",", "pretrained", "=", "True", ",", "scale_factor", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "# Instantiate the full ResNet", "\n", "resnet18", "=", "_instantiate_torchvision_resnet", "(", "\n", "'resnet18'", ",", "torchvision", ".", "models", ".", "resnet", ".", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "\n", "pretrained", ",", "True", ",", "**", "kwargs", ")", "\n", "\n", "# Combine the ResNet first conv1-bn1-relu-maxpool as layer0", "\n", "resnet18", ".", "layer0", "=", "nn", ".", "Sequential", "(", "\n", "resnet18", ".", "conv1", ",", "resnet18", ".", "bn1", ",", "resnet18", ".", "relu", ",", "resnet18", ".", "maxpool", ")", "\n", "\n", "# Combine the selected layers into a nn.Sequential", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "*", "[", "getattr", "(", "resnet18", ",", "layer", ")", "for", "layer", "in", "self", ".", "_LAYERS", "]", ")", "\n", "\n", "# If the model is frozen, it will always remain in eval mode", "\n", "# and the parameters will have requires_grad=False", "\n", "self", ".", "frozen", "=", "frozen", "\n", "if", "self", ".", "frozen", ":", "\n", "            ", "self", ".", "training", "=", "False", "\n", "\n", "# Output will be resized wrt scale_factor if not None.", "\n", "# If scale_factor < 0, the output will be resized to the input", "\n", "# size", "\n", "", "if", "scale_factor", "is", "not", "None", "and", "scale_factor", "<", "0", ":", "\n", "            ", "scale_factor", "=", "self", ".", "conv_scale_factor", "\n", "", "self", ".", "scale_factor", "=", "scale_factor", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.modalities.image.ResNet18TruncatedLayer4.forward": [[1028, 1035], ["image.ResNet18TruncatedLayer4.conv", "torch.interpolate", "torch.interpolate", "torch.interpolate"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.base_conv.message_passing.BaseResnetBlockDown.conv"], ["", "def", "forward", "(", "self", ",", "x", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "if", "self", ".", "scale_factor", "is", "not", "None", ":", "\n", "            ", "x", "=", "F", ".", "interpolate", "(", "\n", "x", ",", "scale_factor", "=", "self", ".", "scale_factor", ",", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "False", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.modalities.image.ResNet18TruncatedLayer4.input_nc": [[1036, 1039], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "input_nc", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_LAYERS_IN", "[", "self", ".", "_LAYERS", "[", "0", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.modalities.image.ResNet18TruncatedLayer4.output_nc": [[1040, 1043], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "output_nc", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_LAYERS_OUT", "[", "self", ".", "_LAYERS", "[", "-", "1", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.modalities.image.ResNet18TruncatedLayer4.conv_scale_factor": [[1044, 1048], ["torch.prod().item", "torch.prod().item", "torch.prod().item", "torch.prod().item", "torch.prod().item", "torch.prod().item", "torch.prod().item", "torch.prod().item", "torch.prod().item", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor"], "methods", ["None"], ["", "@", "property", "\n", "def", "conv_scale_factor", "(", "self", ")", ":", "\n", "        ", "return", "torch", ".", "prod", "(", "torch", ".", "LongTensor", "(", "[", "\n", "self", ".", "_LAYERS_SCALE", "[", "s", "]", "for", "s", "in", "self", ".", "_LAYERS", "]", ")", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.modalities.image.ResNet18TruncatedLayer4.frozen": [[1053, 1059], ["isinstance", "image.ResNet18TruncatedLayer4.parameters"], "methods", ["None"], ["", "@", "frozen", ".", "setter", "\n", "def", "frozen", "(", "self", ",", "frozen", ")", ":", "\n", "        ", "if", "isinstance", "(", "frozen", ",", "bool", ")", ":", "\n", "            ", "self", ".", "_frozen", "=", "frozen", "\n", "", "for", "p", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "p", ".", "requires_grad", "=", "not", "self", ".", "frozen", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.modalities.image.ResNet18TruncatedLayer4.train": [[1060, 1063], ["super().train"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.modalities.image.CityscapesResNet18TruncatedLayer4.train"], ["", "", "def", "train", "(", "self", ",", "mode", "=", "True", ")", ":", "\n", "        ", "return", "super", "(", ")", ".", "train", "(", "\n", "mode", "and", "not", "self", ".", "frozen", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.modalities.image.ResNet18TruncatedLayer4.extra_repr": [[1064, 1067], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "f\"scale_factor={self.scale_factor}\"", "if", "self", ".", "scale_factor", "is", "not", "None", "else", "\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.modalities.image.ResNet18Pyramid.__init__": [[1106, 1113], ["image.ResNet18TruncatedLayer4.__init__"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "frozen", "=", "False", ",", "pretrained", "=", "True", ",", "scale_factor", "=", "-", "1", ",", "**", "kwargs", ")", ":", "\n", "        ", "assert", "scale_factor", "is", "not", "None", ",", "f'scale_factor cannot be None for feature pyramid.'", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "frozen", "=", "frozen", ",", "pretrained", "=", "pretrained", ",", "scale_factor", "=", "scale_factor", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.modalities.image.ResNet18Pyramid.forward": [[1114, 1127], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "int", "layer", "torch.interpolate", "torch.interpolate", "torch.interpolate", "feature_pyramid.append"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append"], ["", "def", "forward", "(", "self", ",", "x", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "feature_pyramid", "=", "[", "]", "\n", "output_size", "=", "[", "\n", "int", "(", "s", "*", "self", ".", "scale_factor", "/", "self", ".", "conv_scale_factor", ")", "\n", "for", "s", "in", "x", ".", "shape", "[", "2", ":", "4", "]", "]", "\n", "\n", "for", "layer", "in", "self", ".", "conv", ":", "\n", "            ", "x", "=", "layer", "(", "x", ")", "\n", "x_up", "=", "F", ".", "interpolate", "(", "\n", "x", ",", "size", "=", "output_size", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "feature_pyramid", ".", "append", "(", "x_up", ")", "\n", "\n", "", "return", "torch", ".", "cat", "(", "feature_pyramid", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.modalities.image.CityscapesBasicBlock.__init__": [[1146, 1155], ["torch.Module.__init__", "image.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "image.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.modalities.image.conv3x3", "home.repos.pwc.inspect_result.drprojects_deepviewagg.modalities.image.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.modalities.image.CityscapesBasicBlock.forward": [[1156, 1173], ["image.CityscapesBasicBlock.conv1", "image.CityscapesBasicBlock.bn1", "image.CityscapesBasicBlock.relu", "image.CityscapesBasicBlock.conv2", "image.CityscapesBasicBlock.bn2", "image.CityscapesBasicBlock.relu", "image.CityscapesBasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.modalities.image.CityscapesResNet18.__init__": [[1183, 1229], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "image.CityscapesResNet18._make_layer", "image.CityscapesResNet18._make_layer", "image.CityscapesResNet18._make_layer", "image.CityscapesResNet18._make_layer", "image.CityscapesResNet18.modules", "image.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "image.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "image.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "isinstance", "image.CityscapesResNet18.load_state_dict", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.res16unet.ResNetBase._make_layer", "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.res16unet.ResNetBase._make_layer", "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.res16unet.ResNetBase._make_layer", "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.res16unet.ResNetBase._make_layer", "home.repos.pwc.inspect_result.drprojects_deepviewagg.modalities.image.conv3x3", "home.repos.pwc.inspect_result.drprojects_deepviewagg.modalities.image.conv3x3", "home.repos.pwc.inspect_result.drprojects_deepviewagg.modalities.image.conv3x3", "home.repos.pwc.inspect_result.drprojects_deepviewagg.schedulers.lr_schedulers.LRScheduler.load_state_dict", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "frozen", "=", "False", ",", "pretrained", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "128", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "# Hardcoded ResNet18 parameters", "\n", "layers", "=", "[", "2", ",", "2", ",", "2", ",", "2", "]", "\n", "block", "=", "CityscapesBasicBlock", "\n", "\n", "# Build the layers", "\n", "conv1", "=", "nn", ".", "Sequential", "(", "\n", "conv3x3", "(", "3", ",", "64", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "conv3x3", "(", "64", ",", "64", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "conv3x3", "(", "64", ",", "128", ")", ")", "\n", "self", ".", "layer0", "=", "nn", ".", "Sequential", "(", "\n", "conv1", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "\n", "# Weight initialization schemes", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "\n", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "# Load pretrained weights", "\n", "", "", "self", ".", "pretrained", "=", "pretrained", "\n", "if", "pretrained", ":", "\n", "            ", "self", ".", "load_state_dict", "(", "torch", ".", "load", "(", "self", ".", "PRETRAINED_PATH", ")", ")", "\n", "\n", "# If the model is frozen, it will always remain in eval mode", "\n", "# and the parameters will have requires_grad=False", "\n", "", "self", ".", "frozen", "=", "frozen", "\n", "if", "self", ".", "frozen", ":", "\n", "            ", "self", ".", "training", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.modalities.image.CityscapesResNet18._make_layer": [[1230, 1244], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append"], ["", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ")", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "index", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.modalities.image.CityscapesResNet18.forward": [[1245, 1252], ["image.CityscapesResNet18.layer0", "image.CityscapesResNet18.layer1", "image.CityscapesResNet18.layer2", "image.CityscapesResNet18.layer3", "image.CityscapesResNet18.layer4"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "x0", "=", "self", ".", "layer0", "(", "x", ")", "# /4", "\n", "x1", "=", "self", ".", "layer1", "(", "x0", ")", "# /4", "\n", "x2", "=", "self", ".", "layer2", "(", "x1", ")", "# /8", "\n", "x3", "=", "self", ".", "layer3", "(", "x2", ")", "# /16", "\n", "x4", "=", "self", ".", "layer4", "(", "x3", ")", "# /32", "\n", "return", "x4", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.modalities.image.CityscapesResNet18.frozen": [[1257, 1263], ["isinstance", "image.CityscapesResNet18.parameters"], "methods", ["None"], ["", "@", "frozen", ".", "setter", "\n", "def", "frozen", "(", "self", ",", "frozen", ")", ":", "\n", "        ", "if", "isinstance", "(", "frozen", ",", "bool", ")", ":", "\n", "            ", "self", ".", "_frozen", "=", "frozen", "\n", "", "for", "p", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "p", ".", "requires_grad", "=", "not", "self", ".", "frozen", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.modalities.image.CityscapesResNet18.train": [[1264, 1266], ["super().train"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.modalities.image.CityscapesResNet18TruncatedLayer4.train"], ["", "", "def", "train", "(", "self", ",", "mode", "=", "True", ")", ":", "\n", "        ", "return", "super", "(", ")", ".", "train", "(", "mode", "and", "not", "self", ".", "frozen", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.modalities.image.CityscapesResNet18TruncatedLayer4.__init__": [[1278, 1300], ["torch.Module.__init__", "image.CityscapesResNet18", "torch.Sequential", "torch.Sequential", "torch.Sequential", "getattr"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["def", "__init__", "(", "self", ",", "frozen", "=", "False", ",", "scale_factor", "=", "None", ",", "pretrained", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "# Initialize the full ResNet18", "\n", "resnet18", "=", "CityscapesResNet18", "(", "pretrained", "=", "pretrained", ")", "\n", "\n", "# Combine the selected layers into a nn.Sequential", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "*", "[", "getattr", "(", "resnet18", ",", "layer", ")", "for", "layer", "in", "self", ".", "_LAYERS", "]", ")", "\n", "\n", "# If the model is frozen, it will always remain in eval mode", "\n", "# and the parameters will have requires_grad=False", "\n", "self", ".", "frozen", "=", "frozen", "\n", "if", "self", ".", "frozen", ":", "\n", "            ", "self", ".", "training", "=", "False", "\n", "\n", "# Output will be resized wrt scale_factor if not None.", "\n", "# If scale_factor < 0, the output will be resized to the input", "\n", "# size", "\n", "", "if", "scale_factor", "is", "not", "None", "and", "scale_factor", "<", "0", ":", "\n", "            ", "scale_factor", "=", "self", ".", "conv_scale_factor", "\n", "", "self", ".", "scale_factor", "=", "scale_factor", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.modalities.image.CityscapesResNet18TruncatedLayer4.forward": [[1301, 1308], ["image.CityscapesResNet18TruncatedLayer4.conv", "torch.interpolate", "torch.interpolate", "torch.interpolate"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.base_conv.message_passing.BaseResnetBlockDown.conv"], ["", "def", "forward", "(", "self", ",", "x", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "if", "self", ".", "scale_factor", "is", "not", "None", ":", "\n", "            ", "x", "=", "F", ".", "interpolate", "(", "\n", "x", ",", "scale_factor", "=", "self", ".", "scale_factor", ",", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "False", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.modalities.image.CityscapesResNet18TruncatedLayer4.input_nc": [[1309, 1312], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "input_nc", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_LAYERS_IN", "[", "self", ".", "_LAYERS", "[", "0", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.modalities.image.CityscapesResNet18TruncatedLayer4.output_nc": [[1313, 1316], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "output_nc", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_LAYERS_OUT", "[", "self", ".", "_LAYERS", "[", "-", "1", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.modalities.image.CityscapesResNet18TruncatedLayer4.conv_scale_factor": [[1317, 1321], ["torch.prod().item", "torch.prod().item", "torch.prod().item", "torch.prod().item", "torch.prod().item", "torch.prod().item", "torch.prod().item", "torch.prod().item", "torch.prod().item", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor"], "methods", ["None"], ["", "@", "property", "\n", "def", "conv_scale_factor", "(", "self", ")", ":", "\n", "        ", "return", "torch", ".", "prod", "(", "torch", ".", "LongTensor", "(", "[", "\n", "self", ".", "_LAYERS_SCALE", "[", "s", "]", "for", "s", "in", "self", ".", "_LAYERS", "]", ")", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.modalities.image.CityscapesResNet18TruncatedLayer4.frozen": [[1326, 1332], ["isinstance", "image.CityscapesResNet18TruncatedLayer4.parameters"], "methods", ["None"], ["", "@", "frozen", ".", "setter", "\n", "def", "frozen", "(", "self", ",", "frozen", ")", ":", "\n", "        ", "if", "isinstance", "(", "frozen", ",", "bool", ")", ":", "\n", "            ", "self", ".", "_frozen", "=", "frozen", "\n", "", "for", "p", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "p", ".", "requires_grad", "=", "not", "self", ".", "frozen", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.modalities.image.CityscapesResNet18TruncatedLayer4.train": [[1333, 1336], ["super().train"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.modalities.image.CityscapesResNet18TruncatedLayer4.train"], ["", "", "def", "train", "(", "self", ",", "mode", "=", "True", ")", ":", "\n", "        ", "return", "super", "(", ")", ".", "train", "(", "\n", "mode", "and", "not", "self", ".", "frozen", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.modalities.image.CityscapesResNet18TruncatedLayer4.extra_repr": [[1337, 1340], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "f\"scale_factor={self.scale_factor}\"", "if", "self", ".", "scale_factor", "is", "not", "None", "else", "\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.modalities.image.CityscapesResNet18Pyramid.__init__": [[1379, 1386], ["image.CityscapesResNet18TruncatedLayer4.__init__"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "frozen", "=", "False", ",", "pretrained", "=", "True", ",", "scale_factor", "=", "-", "1", ",", "**", "kwargs", ")", ":", "\n", "        ", "assert", "scale_factor", "is", "not", "None", ",", "f'scale_factor cannot be None for feature pyramid.'", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "frozen", "=", "frozen", ",", "pretrained", "=", "pretrained", ",", "scale_factor", "=", "scale_factor", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.modalities.image.CityscapesResNet18Pyramid.forward": [[1387, 1400], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "int", "layer", "torch.interpolate", "torch.interpolate", "torch.interpolate", "feature_pyramid.append"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append"], ["", "def", "forward", "(", "self", ",", "x", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "feature_pyramid", "=", "[", "]", "\n", "output_size", "=", "[", "\n", "int", "(", "s", "*", "self", ".", "scale_factor", "/", "self", ".", "conv_scale_factor", ")", "\n", "for", "s", "in", "x", ".", "shape", "[", "2", ":", "4", "]", "]", "\n", "\n", "for", "layer", "in", "self", ".", "conv", ":", "\n", "            ", "x", "=", "layer", "(", "x", ")", "\n", "x_up", "=", "F", ".", "interpolate", "(", "\n", "x", ",", "size", "=", "output_size", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "feature_pyramid", ".", "append", "(", "x_up", ")", "\n", "\n", "", "return", "torch", ".", "cat", "(", "feature_pyramid", ",", "dim", "=", "1", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.modalities.image.standardize_weights": [[39, 51], ["weight.mean().mean().mean", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "weight.view().std().view", "weight.mean().mean", "torch.Tensor", "torch.Tensor", "torch.Tensor", "std.expand_as", "weight.view().std", "std.expand_as", "torch.sqrt", "torch.sqrt", "torch.sqrt", "weight.mean", "weight.view", "weight.size"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.lovasz_loss.mean", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.lovasz_loss.mean", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.running_stats.RunningStats.std", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.lovasz_loss.mean"], ["", "", "def", "standardize_weights", "(", "weight", ",", "scaled", "=", "True", ")", ":", "\n", "    ", "weight_mean", "=", "weight", ".", "mean", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "mean", "(", "dim", "=", "2", ",", "\n", "keepdim", "=", "True", ")", ".", "mean", "(", "dim", "=", "3", ",", "keepdim", "=", "True", ")", "\n", "weight", "=", "weight", "-", "weight_mean", "\n", "std", "=", "weight", ".", "view", "(", "weight", ".", "size", "(", "0", ")", ",", "-", "1", ")", ".", "std", "(", "dim", "=", "1", ")", ".", "view", "(", "-", "1", ",", "1", ",", "1", ",", "1", ")", "+", "1e-5", "\n", "fan_in", "=", "torch", ".", "Tensor", "(", "[", "weight", ".", "shape", "[", "1", "]", "]", ")", ".", "to", "(", "weight", ".", "device", ")", "\n", "if", "scaled", ":", "\n", "# Goes hand-in-hand with ReLUWS to scale the activation output", "\n", "        ", "weight", "=", "weight", "/", "(", "std", ".", "expand_as", "(", "weight", ")", "*", "torch", ".", "sqrt", "(", "fan_in", ")", ")", "\n", "", "else", ":", "\n", "        ", "weight", "=", "weight", "/", "std", ".", "expand_as", "(", "weight", ")", "\n", "", "return", "weight", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.modalities.image._instantiate_torchvision_resnet": [[959, 990], ["torchvision.models.resnet.ResNet", "os.join", "os.join", "os.exists", "torchvision.models.resnet.ResNet.load_state_dict", "torch.load", "torch.load", "torch.load", "torchvision.models.utils.load_state_dict_from_url", "torchvision.models.resnet.BasicBlock"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.schedulers.lr_schedulers.LRScheduler.load_state_dict", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load"], ["", "", "def", "_instantiate_torchvision_resnet", "(", "\n", "arch", ",", "block", ",", "layers", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Instantiate ResNet models from torchvision, optionally\n    pretrained on ImageNet. Supported models are 'resnet18', 'resnet34',\n    'resnet50', 'resnet101' and 'resnet152'.\n\n    This is a custom version of torchvision.models.resnet._resnet to\n    support locally-saved pretrained ResNet weights.\n    \"\"\"", "\n", "model", "=", "torchvision", ".", "models", ".", "resnet", ".", "ResNet", "(", "block", ",", "layers", ")", "\n", "\n", "if", "pretrained", ":", "\n", "\n", "        ", "model_dir", "=", "osp", ".", "join", "(", "PRETRAINED_DIR", ",", "f'imagenet/{arch}'", ")", "\n", "file_name", "=", "f'{arch}.pth'", "\n", "file_path", "=", "osp", ".", "join", "(", "model_dir", ",", "file_name", ")", "\n", "\n", "# Load from local weights", "\n", "if", "osp", ".", "exists", "(", "file_path", ")", ":", "\n", "            ", "state_dict", "=", "torch", ".", "load", "(", "file_path", ")", "\n", "\n", "# Load ImageNet-pretrained weights from official torchvision URL", "\n", "# and save them locally", "\n", "", "else", ":", "\n", "            ", "url", "=", "torchvision", ".", "models", ".", "resnet", ".", "model_urls", "[", "arch", "]", "\n", "state_dict", "=", "torchvision", ".", "models", ".", "utils", ".", "load_state_dict_from_url", "(", "\n", "url", ",", "progress", "=", "progress", ",", "model_dir", "=", "model_dir", ",", "\n", "file_name", "=", "file_name", ")", "\n", "\n", "", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.modalities.image.conv3x3": [[1133, 1138], ["torch.Conv2d"], "function", ["None"], ["", "", "def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.PointNet.modules.MiniPointNet.__init__": [[10, 18], ["super().__init__", "MLP", "MLP"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.MLP", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.MLP"], ["from", "torch_points3d", ".", "core", ".", "base_conv", ".", "message_passing", "import", "*", "\n", "\n", "\n", "# XConv from torch geometric, modified for this framework", "\n", "# https://github.com/rusty1s/pytorch_geometric/blob/master/torch_geometric/nn/conv/x_conv.py", "\n", "\n", "\n", "class", "XConv", "(", "torch", ".", "nn", ".", "Module", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.PointNet.modules.MiniPointNet.forward": [[19, 30], ["modules.MiniPointNet._local_nn", "modules.MiniPointNet.g_pool", "modules.MiniPointNet._global_nn", "modules.MiniPointNet.mean", "modules.MiniPointNet.max"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.lovasz_loss.mean"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.PointNet.modules.MiniPointNet.forward_embedding": [[31, 37], ["modules.MiniPointNet.forward", "batch.unsqueeze().repeat", "torch.gather", "torch.cat", "batch.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.forward", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.gathering.gather", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.PointNet.modules.PointNetSTN3D.__init__": [[40, 42], ["torch_points3d.core.common_modules.spatial_transform.BaseLinearTransformSTNkD.__init__", "modules.MiniPointNet"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.PointNet.modules.PointNetSTN3D.forward": [[43, 45], ["super().forward"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.forward"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.PointNet.modules.PointNetSTNkD.__init__": [[48, 50], ["torch_points3d.core.common_modules.spatial_transform.BaseLinearTransformSTNkD.__init__", "modules.MiniPointNet"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.PointNet.modules.PointNetSTNkD.forward": [[51, 53], ["super().forward"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.forward"], ["\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.PointNet.modules.PointNetSTNkD.get_internal_losses": [[54, 56], ["modules.PointNetSTNkD.get_orthogonal_regularization_loss"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.spatial_transform.BaseLinearTransformSTNkD.get_orthogonal_regularization_loss"], ["def", "__init__", "(", "\n", "self", ",", "in_channels", ",", "out_channels", ",", "dim", ",", "kernel_size", ",", "hidden_channels", "=", "None", ",", "dilation", "=", "1", ",", "bias", "=", "True", ",", "**", "kwargs", ",", "\n", ")", ":", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.PointNet.modules.PointNetSeg.__init__": [[59, 85], ["super().__init__", "modules.PointNetSTN3D", "MLP", "modules.PointNetSTNkD", "MLP", "MLP"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.MLP", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.MLP", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.MLP"], ["self", ".", "in_channels", "=", "in_channels", "\n", "if", "hidden_channels", "is", "None", ":", "\n", "            ", "hidden_channels", "=", "in_channels", "//", "4", "\n", "", "assert", "hidden_channels", ">", "0", "\n", "self", ".", "hidden_channels", "=", "hidden_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "dilation", "=", "dilation", "\n", "self", ".", "kwargs", "=", "kwargs", "\n", "\n", "C_in", ",", "C_delta", ",", "C_out", "=", "in_channels", ",", "hidden_channels", ",", "out_channels", "\n", "D", ",", "K", "=", "dim", ",", "kernel_size", "\n", "\n", "self", ".", "mlp1", "=", "S", "(", "\n", "L", "(", "dim", ",", "C_delta", ")", ",", "ELU", "(", ")", ",", "BN", "(", "C_delta", ")", ",", "L", "(", "C_delta", ",", "C_delta", ")", ",", "ELU", "(", ")", ",", "BN", "(", "C_delta", ")", ",", "Reshape", "(", "-", "1", ",", "K", ",", "C_delta", ")", ",", "\n", ")", "\n", "\n", "self", ".", "mlp2", "=", "S", "(", "\n", "L", "(", "D", "*", "K", ",", "K", "**", "2", ")", ",", "\n", "ELU", "(", ")", ",", "\n", "BN", "(", "K", "**", "2", ")", ",", "\n", "Reshape", "(", "-", "1", ",", "K", ",", "K", ")", ",", "\n", "Conv1d", "(", "K", ",", "K", "**", "2", ",", "K", ",", "groups", "=", "K", ")", ",", "\n", "ELU", "(", ")", ",", "\n", "BN", "(", "K", "**", "2", ")", ",", "\n", "Reshape", "(", "-", "1", ",", "K", ",", "K", ")", ",", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.PointNet.modules.PointNetSeg.set_scatter_pooling": [[86, 88], ["None"], "methods", ["None"], ["Conv1d", "(", "K", ",", "K", "**", "2", ",", "K", ",", "groups", "=", "K", ")", ",", "\n", "BN", "(", "K", "**", "2", ")", ",", "\n", "Reshape", "(", "-", "1", ",", "K", ",", "K", ")", ",", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.PointNet.modules.PointNetSeg.func_global_max_pooling": [[89, 94], ["torch_geometric.nn.global_max_pool", "x.max"], "methods", ["None"], [")", "\n", "\n", "C_in", "=", "C_in", "+", "C_delta", "\n", "depth_multiplier", "=", "int", "(", "ceil", "(", "C_out", "/", "C_in", ")", ")", "\n", "self", ".", "conv", "=", "S", "(", "\n", "Conv1d", "(", "C_in", ",", "C_in", "*", "depth_multiplier", ",", "K", ",", "groups", "=", "C_in", ")", ",", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.PointNet.modules.PointNetSeg.forward": [[95, 115], ["modules.PointNetSeg.input_stn", "modules.PointNetSeg.local_nn_1", "modules.PointNetSeg.feat_stn", "modules.PointNetSeg.local_nn_2", "modules.PointNetSeg.func_global_max_pooling", "modules.PointNetSeg.seg_nn", "modules.PointNetSeg.dim", "torch.cat", "torch.cat", "modules.PointNetSeg.unsqueeze().repeat", "modules.PointNetSeg.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.PointNet.modules.PointNetSeg.func_global_max_pooling", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat"], ["Reshape", "(", "-", "1", ",", "C_in", "*", "depth_multiplier", ")", ",", "\n", "L", "(", "C_in", "*", "depth_multiplier", ",", "C_out", ",", "bias", "=", "bias", ")", ",", "\n", ")", "\n", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n", "", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "reset", "(", "self", ".", "mlp1", ")", "\n", "reset", "(", "self", ".", "mlp2", ")", "\n", "reset", "(", "self", ".", "conv", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "pos", ",", "edge_index", ")", ":", "\n", "\n", "# posTo = the points that will be centers of convolutions", "\n", "# posFrom = points that have edges to the centers of convolutions", "\n", "# For a down conv, posFrom = pos, posTo = pos[idx]", "\n", "# For an up conv, posFrom = pos, posTo = pos_skip", "\n", "        ", "posFrom", ",", "posTo", "=", "pos", "\n", "\n", "(", "N", ",", "D", ")", ",", "K", "=", "posTo", ".", "size", "(", ")", ",", "self", ".", "kernel_size", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.pointnet2.dense.PointNetMSGDown.__init__": [[12, 35], ["torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "BaseDenseConvolutionDown.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "len", "len", "len", "torch_points3d.core.spatial_ops.DenseFPSSampler", "torch_points3d.core.spatial_ops.DenseRadiusNeighbourFinder", "len", "dense.PointNetMSGDown.mlps.append", "MLP2D"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append"], ["from", "torch_points3d", ".", "core", ".", "spatial_ops", "import", "DenseFPSSampler", ",", "DenseRadiusNeighbourFinder", "\n", "from", "torch_points3d", ".", "utils", ".", "colors", "import", "COLORS", "\n", "\n", "log", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "\n", "\n", "class", "RSConvMapper", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "\"\"\"[This class handles the special mechanism between the msg\n        and the features of RSConv]\n    \"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "down_conv_nn", ",", "use_xyz", ",", "bn", "=", "True", ",", "activation", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.01", ")", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "RSConvMapper", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "_down_conv_nn", "=", "down_conv_nn", "\n", "self", ".", "_use_xyz", "=", "use_xyz", "\n", "\n", "self", ".", "nn", "=", "nn", ".", "ModuleDict", "(", ")", "\n", "\n", "if", "len", "(", "self", ".", "_down_conv_nn", ")", "==", "2", ":", "# First layer", "\n", "            ", "self", ".", "_first_layer", "=", "True", "\n", "f_in", ",", "f_intermediate", ",", "f_out", "=", "self", ".", "_down_conv_nn", "[", "0", "]", "\n", "self", ".", "nn", "[", "\"features_nn\"", "]", "=", "MLP2D", "(", "self", ".", "_down_conv_nn", "[", "1", "]", ",", "bn", "=", "bn", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.pointnet2.dense.PointNetMSGDown._prepare_features": [[36, 55], ["pos.transpose().contiguous", "torch_points_kernels.grouping_operation", "new_pos.transpose().unsqueeze", "torch_points_kernels.grouping_operation", "pos.transpose", "new_pos.transpose", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat"], ["", "else", ":", "\n", "            ", "self", ".", "_first_layer", "=", "False", "\n", "f_in", ",", "f_intermediate", ",", "f_out", "=", "self", ".", "_down_conv_nn", "\n", "\n", "", "self", ".", "nn", "[", "\"mlp_msg\"", "]", "=", "MLP2D", "(", "[", "f_in", ",", "f_intermediate", ",", "f_out", "]", ",", "bn", "=", "bn", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "nn", "[", "\"norm\"", "]", "=", "Sequential", "(", "*", "[", "nn", ".", "BatchNorm2d", "(", "f_out", ")", ",", "activation", "]", ")", "\n", "\n", "self", ".", "_f_out", "=", "f_out", "\n", "\n", "", "@", "property", "\n", "def", "f_out", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_f_out", "\n", "\n", "", "def", "forward", "(", "self", ",", "features", ",", "msg", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.pointnet2.dense.PointNetMSGDown.conv": [[56, 76], ["dense.PointNetMSGDown._prepare_features", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "new_features.squeeze.squeeze.squeeze", "len", "new_features.squeeze.squeeze.size"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.pointnet2.dense.PointNetMSGDown._prepare_features", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["\n", "\n", "# Transform msg", "\n", "msg", "=", "self", ".", "nn", "[", "\"mlp_msg\"", "]", "(", "msg", ")", "\n", "\n", "# If first_layer, augment features_size", "\n", "if", "self", ".", "_first_layer", ":", "\n", "            ", "features", "=", "self", ".", "nn", "[", "\"features_nn\"", "]", "(", "features", ")", "\n", "\n", "", "return", "self", ".", "nn", "[", "\"norm\"", "]", "(", "torch", ".", "mul", "(", "features", ",", "msg", ")", ")", "\n", "\n", "\n", "", "", "class", "SharedRSConv", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "\"\"\"\n    Input shape: (B, C_in, npoint, nsample)\n    Output shape: (B, C_out, npoint)\n    \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.pointnet2.message_passing.SAModule.__init__": [[10, 24], ["BaseMSConvolutionDown.__init__", "torch_geometric.nn.PointConv", "torch_points3d.core.spatial_ops.FPSSampler", "torch_points3d.core.spatial_ops.MultiscaleRadiusNeighbourFinder", "MLP"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.MLP"], ["class", "Convolution", "(", "MessagePassing", ")", ":", "\n", "    ", "r\"\"\"The Relation Shape Convolution layer from \"Relation-Shape Convolutional Neural Network for Point Cloud Analysis\"\n    https://arxiv.org/pdf/1904.07601\n\n    local_nn - an MLP which is applied to the relation vector h_ij between points i and j to determine\n    the weights applied to each element of the feature for x_j\n\n    global_nn - an optional MPL for channel-raising following the convolution\n\n    \"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "local_nn", ",", "activation", "=", "ReLU", "(", ")", ",", "global_nn", "=", "None", ",", "aggr", "=", "\"max\"", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Convolution", ",", "self", ")", ".", "__init__", "(", "aggr", "=", "aggr", ")", "\n", "self", ".", "local_nn", "=", "MLP", "(", "local_nn", ")", "\n", "self", ".", "activation", "=", "activation", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.pointnet2.message_passing.SAModule.conv": [[25, 27], ["message_passing.SAModule._conv"], "methods", ["None"], ["self", ".", "global_nn", "=", "MLP", "(", "global_nn", ")", "if", "global_nn", "is", "not", "None", "else", "None", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "pos", ",", "edge_index", ")", ":", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.pointnet2.message_passing.SAModule.extra_repr": [[28, 31], ["None"], "methods", ["None"], ["        ", "return", "self", ".", "propagate", "(", "edge_index", ",", "x", "=", "x", ",", "pos", "=", "pos", ")", "\n", "\n", "", "def", "message", "(", "self", ",", "pos_i", ",", "pos_j", ",", "x_j", ")", ":", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.resunet.ResUNet2.__init__": [[18, 139], ["MinkowskiEngine.MinkowskiNetwork.__init__", "MinkowskiEngine.MinkowskiNetwork.__init__", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiConvolution", "common.get_norm", "res16unet.get_block", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiConvolution", "common.get_norm", "res16unet.get_block", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiConvolution", "common.get_norm", "res16unet.get_block", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiConvolution", "common.get_norm", "res16unet.get_block", "MinkowskiEngine.MinkowskiConvolutionTranspose", "MinkowskiEngine.MinkowskiConvolutionTranspose", "common.get_norm", "res16unet.get_block", "MinkowskiEngine.MinkowskiConvolutionTranspose", "MinkowskiEngine.MinkowskiConvolutionTranspose", "common.get_norm", "res16unet.get_block", "MinkowskiEngine.MinkowskiConvolutionTranspose", "MinkowskiEngine.MinkowskiConvolutionTranspose", "common.get_norm", "res16unet.get_block", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiConvolution"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.common.get_norm", "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.res16unet.get_block", "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.common.get_norm", "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.res16unet.get_block", "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.common.get_norm", "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.res16unet.get_block", "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.common.get_norm", "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.res16unet.get_block", "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.common.get_norm", "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.res16unet.get_block", "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.common.get_norm", "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.res16unet.get_block", "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.common.get_norm", "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.res16unet.get_block"], ["def", "__init__", "(", "\n", "self", ",", "in_channels", "=", "3", ",", "out_channels", "=", "32", ",", "bn_momentum", "=", "0.01", ",", "normalize_feature", "=", "True", ",", "conv1_kernel_size", "=", "5", ",", "D", "=", "3", "\n", ")", ":", "\n", "        ", "ME", ".", "MinkowskiNetwork", ".", "__init__", "(", "self", ",", "D", ")", "\n", "NORM_TYPE", "=", "self", ".", "NORM_TYPE", "\n", "BLOCK_NORM_TYPE", "=", "self", ".", "BLOCK_NORM_TYPE", "\n", "CHANNELS", "=", "self", ".", "CHANNELS", "\n", "TR_CHANNELS", "=", "self", ".", "TR_CHANNELS", "\n", "# print(D, in_channels, out_channels, conv1_kernel_size)", "\n", "self", ".", "normalize_feature", "=", "normalize_feature", "\n", "self", ".", "conv1", "=", "ME", ".", "MinkowskiConvolution", "(", "\n", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "CHANNELS", "[", "1", "]", ",", "\n", "kernel_size", "=", "conv1_kernel_size", ",", "\n", "stride", "=", "1", ",", "\n", "dilation", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "dimension", "=", "D", ",", "\n", ")", "\n", "self", ".", "norm1", "=", "get_norm", "(", "NORM_TYPE", ",", "CHANNELS", "[", "1", "]", ",", "bn_momentum", "=", "bn_momentum", ",", "D", "=", "D", ")", "\n", "\n", "self", ".", "block1", "=", "get_block", "(", "BLOCK_NORM_TYPE", ",", "CHANNELS", "[", "1", "]", ",", "CHANNELS", "[", "1", "]", ",", "bn_momentum", "=", "bn_momentum", ",", "D", "=", "D", ")", "\n", "\n", "self", ".", "conv2", "=", "ME", ".", "MinkowskiConvolution", "(", "\n", "in_channels", "=", "CHANNELS", "[", "1", "]", ",", "\n", "out_channels", "=", "CHANNELS", "[", "2", "]", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "2", ",", "\n", "dilation", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "dimension", "=", "D", ",", "\n", ")", "\n", "self", ".", "norm2", "=", "get_norm", "(", "NORM_TYPE", ",", "CHANNELS", "[", "2", "]", ",", "bn_momentum", "=", "bn_momentum", ",", "D", "=", "D", ")", "\n", "\n", "self", ".", "block2", "=", "get_block", "(", "BLOCK_NORM_TYPE", ",", "CHANNELS", "[", "2", "]", ",", "CHANNELS", "[", "2", "]", ",", "bn_momentum", "=", "bn_momentum", ",", "D", "=", "D", ")", "\n", "\n", "self", ".", "conv3", "=", "ME", ".", "MinkowskiConvolution", "(", "\n", "in_channels", "=", "CHANNELS", "[", "2", "]", ",", "\n", "out_channels", "=", "CHANNELS", "[", "3", "]", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "2", ",", "\n", "dilation", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "dimension", "=", "D", ",", "\n", ")", "\n", "self", ".", "norm3", "=", "get_norm", "(", "NORM_TYPE", ",", "CHANNELS", "[", "3", "]", ",", "bn_momentum", "=", "bn_momentum", ",", "D", "=", "D", ")", "\n", "\n", "self", ".", "block3", "=", "get_block", "(", "BLOCK_NORM_TYPE", ",", "CHANNELS", "[", "3", "]", ",", "CHANNELS", "[", "3", "]", ",", "bn_momentum", "=", "bn_momentum", ",", "D", "=", "D", ")", "\n", "\n", "self", ".", "conv4", "=", "ME", ".", "MinkowskiConvolution", "(", "\n", "in_channels", "=", "CHANNELS", "[", "3", "]", ",", "\n", "out_channels", "=", "CHANNELS", "[", "4", "]", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "2", ",", "\n", "dilation", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "dimension", "=", "D", ",", "\n", ")", "\n", "self", ".", "norm4", "=", "get_norm", "(", "NORM_TYPE", ",", "CHANNELS", "[", "4", "]", ",", "bn_momentum", "=", "bn_momentum", ",", "D", "=", "D", ")", "\n", "\n", "self", ".", "block4", "=", "get_block", "(", "BLOCK_NORM_TYPE", ",", "CHANNELS", "[", "4", "]", ",", "CHANNELS", "[", "4", "]", ",", "bn_momentum", "=", "bn_momentum", ",", "D", "=", "D", ")", "\n", "\n", "self", ".", "conv4_tr", "=", "ME", ".", "MinkowskiConvolutionTranspose", "(", "\n", "in_channels", "=", "CHANNELS", "[", "4", "]", ",", "\n", "out_channels", "=", "TR_CHANNELS", "[", "4", "]", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "2", ",", "\n", "dilation", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "dimension", "=", "D", ",", "\n", ")", "\n", "self", ".", "norm4_tr", "=", "get_norm", "(", "NORM_TYPE", ",", "TR_CHANNELS", "[", "4", "]", ",", "bn_momentum", "=", "bn_momentum", ",", "D", "=", "D", ")", "\n", "\n", "self", ".", "block4_tr", "=", "get_block", "(", "BLOCK_NORM_TYPE", ",", "TR_CHANNELS", "[", "4", "]", ",", "TR_CHANNELS", "[", "4", "]", ",", "bn_momentum", "=", "bn_momentum", ",", "D", "=", "D", ")", "\n", "\n", "self", ".", "conv3_tr", "=", "ME", ".", "MinkowskiConvolutionTranspose", "(", "\n", "in_channels", "=", "CHANNELS", "[", "3", "]", "+", "TR_CHANNELS", "[", "4", "]", ",", "\n", "out_channels", "=", "TR_CHANNELS", "[", "3", "]", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "2", ",", "\n", "dilation", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "dimension", "=", "D", ",", "\n", ")", "\n", "self", ".", "norm3_tr", "=", "get_norm", "(", "NORM_TYPE", ",", "TR_CHANNELS", "[", "3", "]", ",", "bn_momentum", "=", "bn_momentum", ",", "D", "=", "D", ")", "\n", "\n", "self", ".", "block3_tr", "=", "get_block", "(", "BLOCK_NORM_TYPE", ",", "TR_CHANNELS", "[", "3", "]", ",", "TR_CHANNELS", "[", "3", "]", ",", "bn_momentum", "=", "bn_momentum", ",", "D", "=", "D", ")", "\n", "\n", "self", ".", "conv2_tr", "=", "ME", ".", "MinkowskiConvolutionTranspose", "(", "\n", "in_channels", "=", "CHANNELS", "[", "2", "]", "+", "TR_CHANNELS", "[", "3", "]", ",", "\n", "out_channels", "=", "TR_CHANNELS", "[", "2", "]", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "2", ",", "\n", "dilation", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "dimension", "=", "D", ",", "\n", ")", "\n", "self", ".", "norm2_tr", "=", "get_norm", "(", "NORM_TYPE", ",", "TR_CHANNELS", "[", "2", "]", ",", "bn_momentum", "=", "bn_momentum", ",", "D", "=", "D", ")", "\n", "\n", "self", ".", "block2_tr", "=", "get_block", "(", "BLOCK_NORM_TYPE", ",", "TR_CHANNELS", "[", "2", "]", ",", "TR_CHANNELS", "[", "2", "]", ",", "bn_momentum", "=", "bn_momentum", ",", "D", "=", "D", ")", "\n", "\n", "self", ".", "conv1_tr", "=", "ME", ".", "MinkowskiConvolution", "(", "\n", "in_channels", "=", "CHANNELS", "[", "1", "]", "+", "TR_CHANNELS", "[", "2", "]", ",", "\n", "out_channels", "=", "TR_CHANNELS", "[", "1", "]", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "dilation", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "dimension", "=", "D", ",", "\n", ")", "\n", "\n", "# self.block1_tr = BasicBlockBN(TR_CHANNELS[1], TR_CHANNELS[1], bn_momentum=bn_momentum, D=D)", "\n", "\n", "self", ".", "final", "=", "ME", ".", "MinkowskiConvolution", "(", "\n", "in_channels", "=", "TR_CHANNELS", "[", "1", "]", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "dilation", "=", "1", ",", "\n", "bias", "=", "True", ",", "\n", "dimension", "=", "D", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.resunet.ResUNet2.forward": [[141, 194], ["resunet.ResUNet2.conv1", "resunet.ResUNet2.norm1", "resunet.ResUNet2.block1", "MinkowskiEngine.relu", "MinkowskiEngine.relu", "resunet.ResUNet2.conv2", "resunet.ResUNet2.norm2", "resunet.ResUNet2.block2", "MinkowskiEngine.relu", "MinkowskiEngine.relu", "resunet.ResUNet2.conv3", "resunet.ResUNet2.norm3", "resunet.ResUNet2.block3", "MinkowskiEngine.relu", "MinkowskiEngine.relu", "resunet.ResUNet2.conv4", "resunet.ResUNet2.norm4", "resunet.ResUNet2.block4", "MinkowskiEngine.relu", "MinkowskiEngine.relu", "resunet.ResUNet2.conv4_tr", "resunet.ResUNet2.norm4_tr", "resunet.ResUNet2.block4_tr", "MinkowskiEngine.relu", "MinkowskiEngine.relu", "MinkowskiEngine.cat", "MinkowskiEngine.cat", "resunet.ResUNet2.conv3_tr", "resunet.ResUNet2.norm3_tr", "resunet.ResUNet2.block3_tr", "MinkowskiEngine.relu", "MinkowskiEngine.relu", "MinkowskiEngine.cat", "MinkowskiEngine.cat", "resunet.ResUNet2.conv2_tr", "resunet.ResUNet2.norm2_tr", "resunet.ResUNet2.block2_tr", "MinkowskiEngine.relu", "MinkowskiEngine.relu", "MinkowskiEngine.cat", "MinkowskiEngine.cat", "resunet.ResUNet2.conv1_tr", "MinkowskiEngine.relu", "MinkowskiEngine.relu", "resunet.ResUNet2.final", "MinkowskiEngine.SparseTensor", "MinkowskiEngine.SparseTensor", "torch.norm"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.SparseTensor", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.SparseTensor"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out_s1", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out_s1", "=", "self", ".", "norm1", "(", "out_s1", ")", "\n", "out_s1", "=", "self", ".", "block1", "(", "out_s1", ")", "\n", "out", "=", "MEF", ".", "relu", "(", "out_s1", ")", "\n", "\n", "out_s2", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out_s2", "=", "self", ".", "norm2", "(", "out_s2", ")", "\n", "out_s2", "=", "self", ".", "block2", "(", "out_s2", ")", "\n", "out", "=", "MEF", ".", "relu", "(", "out_s2", ")", "\n", "\n", "out_s4", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out_s4", "=", "self", ".", "norm3", "(", "out_s4", ")", "\n", "out_s4", "=", "self", ".", "block3", "(", "out_s4", ")", "\n", "out", "=", "MEF", ".", "relu", "(", "out_s4", ")", "\n", "\n", "out_s8", "=", "self", ".", "conv4", "(", "out", ")", "\n", "out_s8", "=", "self", ".", "norm4", "(", "out_s8", ")", "\n", "out_s8", "=", "self", ".", "block4", "(", "out_s8", ")", "\n", "out", "=", "MEF", ".", "relu", "(", "out_s8", ")", "\n", "\n", "out", "=", "self", ".", "conv4_tr", "(", "out", ")", "\n", "out", "=", "self", ".", "norm4_tr", "(", "out", ")", "\n", "out", "=", "self", ".", "block4_tr", "(", "out", ")", "\n", "out_s4_tr", "=", "MEF", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "ME", ".", "cat", "(", "out_s4_tr", ",", "out_s4", ")", "\n", "\n", "out", "=", "self", ".", "conv3_tr", "(", "out", ")", "\n", "out", "=", "self", ".", "norm3_tr", "(", "out", ")", "\n", "out", "=", "self", ".", "block3_tr", "(", "out", ")", "\n", "out_s2_tr", "=", "MEF", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "ME", ".", "cat", "(", "out_s2_tr", ",", "out_s2", ")", "\n", "\n", "out", "=", "self", ".", "conv2_tr", "(", "out", ")", "\n", "out", "=", "self", ".", "norm2_tr", "(", "out", ")", "\n", "out", "=", "self", ".", "block2_tr", "(", "out", ")", "\n", "out_s1_tr", "=", "MEF", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "ME", ".", "cat", "(", "out_s1_tr", ",", "out_s1", ")", "\n", "out", "=", "self", ".", "conv1_tr", "(", "out", ")", "\n", "out", "=", "MEF", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "final", "(", "out", ")", "\n", "\n", "if", "self", ".", "normalize_feature", ":", "\n", "            ", "return", "ME", ".", "SparseTensor", "(", "\n", "out", ".", "F", "/", "torch", ".", "norm", "(", "out", ".", "F", ",", "p", "=", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ",", "\n", "coordinate_map_key", "=", "out", ".", "coordinate_map_key", ",", "\n", "coordinate_manager", "=", "out", ".", "coordinate_manager", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.resunet.Res2BlockDown.__init__": [[230, 254], ["MinkowskiEngine.MinkowskiNetwork.__init__", "MinkowskiEngine.MinkowskiNetwork.__init__", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiConvolution", "common.get_norm", "res16unet.get_block"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.common.get_norm", "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.res16unet.get_block"], ["def", "__init__", "(", "\n", "self", ",", "\n", "down_conv_nn", ",", "\n", "kernel_size", ",", "\n", "stride", ",", "\n", "dilation", ",", "\n", "dimension", "=", "3", ",", "\n", "bn_momentum", "=", "0.01", ",", "\n", "norm_type", "=", "NormType", ".", "BATCH_NORM", ",", "\n", "block_norm_type", "=", "NormType", ".", "BATCH_NORM", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "ME", ".", "MinkowskiNetwork", ".", "__init__", "(", "self", ",", "dimension", ")", "\n", "self", ".", "conv", "=", "ME", ".", "MinkowskiConvolution", "(", "\n", "in_channels", "=", "down_conv_nn", "[", "0", "]", ",", "\n", "out_channels", "=", "down_conv_nn", "[", "1", "]", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "dilation", "=", "dilation", ",", "\n", "bias", "=", "False", ",", "\n", "dimension", "=", "dimension", ",", "\n", ")", "\n", "self", ".", "norm", "=", "get_norm", "(", "norm_type", ",", "down_conv_nn", "[", "1", "]", ",", "bn_momentum", "=", "bn_momentum", ",", "D", "=", "dimension", ")", "\n", "self", ".", "block", "=", "get_block", "(", "block_norm_type", ",", "down_conv_nn", "[", "1", "]", ",", "down_conv_nn", "[", "1", "]", ",", "bn_momentum", "=", "bn_momentum", ",", "D", "=", "dimension", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.resunet.Res2BlockDown.forward": [[255, 261], ["resunet.Res2BlockDown.conv", "resunet.Res2BlockDown.norm", "resunet.Res2BlockDown.block"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.base_conv.message_passing.BaseResnetBlockDown.conv"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "out_s", "=", "self", ".", "conv", "(", "x", ")", "\n", "out_s", "=", "self", ".", "norm", "(", "out_s", ")", "\n", "out", "=", "self", ".", "block", "(", "out_s", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.resunet.Res2BlockUp.__init__": [[269, 305], ["MinkowskiEngine.MinkowskiNetwork.__init__", "MinkowskiEngine.MinkowskiNetwork.__init__", "MinkowskiEngine.MinkowskiConvolutionTranspose", "MinkowskiEngine.MinkowskiConvolutionTranspose", "len", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiConvolution", "common.get_norm", "res16unet.get_block"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.common.get_norm", "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.res16unet.get_block"], ["def", "__init__", "(", "\n", "self", ",", "\n", "up_conv_nn", ",", "\n", "kernel_size", ",", "\n", "stride", ",", "\n", "dilation", ",", "\n", "dimension", "=", "3", ",", "\n", "bn_momentum", "=", "0.01", ",", "\n", "norm_type", "=", "NormType", ".", "BATCH_NORM", ",", "\n", "block_norm_type", "=", "NormType", ".", "BATCH_NORM", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "ME", ".", "MinkowskiNetwork", ".", "__init__", "(", "self", ",", "dimension", ")", "\n", "self", ".", "conv", "=", "ME", ".", "MinkowskiConvolutionTranspose", "(", "\n", "in_channels", "=", "up_conv_nn", "[", "0", "]", ",", "\n", "out_channels", "=", "up_conv_nn", "[", "1", "]", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "dilation", "=", "dilation", ",", "\n", "bias", "=", "False", ",", "\n", "dimension", "=", "dimension", ",", "\n", ")", "\n", "if", "len", "(", "up_conv_nn", ")", "==", "3", ":", "\n", "            ", "self", ".", "final", "=", "ME", ".", "MinkowskiConvolution", "(", "\n", "in_channels", "=", "up_conv_nn", "[", "1", "]", ",", "\n", "out_channels", "=", "up_conv_nn", "[", "2", "]", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "dilation", "=", "dilation", ",", "\n", "bias", "=", "True", ",", "\n", "dimension", "=", "dimension", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "norm", "=", "get_norm", "(", "norm_type", ",", "up_conv_nn", "[", "1", "]", ",", "bn_momentum", "=", "bn_momentum", ",", "D", "=", "dimension", ")", "\n", "self", ".", "block", "=", "get_block", "(", "block_norm_type", ",", "up_conv_nn", "[", "1", "]", ",", "up_conv_nn", "[", "1", "]", ",", "bn_momentum", "=", "bn_momentum", ",", "D", "=", "dimension", ")", "\n", "self", ".", "final", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.resunet.Res2BlockUp.forward": [[306, 318], ["resunet.Res2BlockUp.conv", "MinkowskiEngine.cat", "MinkowskiEngine.cat", "resunet.Res2BlockUp.norm", "resunet.Res2BlockUp.block", "MinkowskiEngine.relu", "MinkowskiEngine.relu", "resunet.Res2BlockUp.final"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.base_conv.message_passing.BaseResnetBlockDown.conv", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "x_skip", ")", ":", "\n", "        ", "if", "x_skip", "is", "not", "None", ":", "\n", "            ", "x", "=", "ME", ".", "cat", "(", "x", ",", "x_skip", ")", "\n", "", "out_s", "=", "self", ".", "conv", "(", "x", ")", "\n", "if", "self", ".", "final", "is", "None", ":", "\n", "            ", "out_s", "=", "self", ".", "norm", "(", "out_s", ")", "\n", "out", "=", "self", ".", "block", "(", "out_s", ")", "\n", "return", "out", "\n", "", "else", ":", "\n", "            ", "out_s", "=", "MEF", ".", "relu", "(", "out_s", ")", "\n", "out", "=", "self", ".", "final", "(", "out_s", ")", "\n", "return", "out", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.networks.ResNetBase.__init__": [[13, 20], ["torch.Module.__init__", "networks.ResNetBase.network_initialization", "networks.ResNetBase.weight_initialization"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.res16unet.Res16UNetBase.network_initialization", "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.res16unet.ResNetBase.weight_initialization"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "D", "=", "3", ",", "**", "kwargs", ")", ":", "\n", "        ", "nn", ".", "Module", ".", "__init__", "(", "self", ")", "\n", "self", ".", "D", "=", "D", "\n", "assert", "self", ".", "BLOCK", "is", "not", "None", ",", "\"BLOCK is not defined\"", "\n", "assert", "self", ".", "PLANES", "is", "not", "None", ",", "\"PLANES is not defined\"", "\n", "self", ".", "network_initialization", "(", "in_channels", ",", "out_channels", ",", "D", ")", "\n", "self", ".", "weight_initialization", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.networks.ResNetBase.network_initialization": [[21, 42], ["MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiAvgPooling", "networks.ResNetBase._make_layer", "networks.ResNetBase._make_layer", "networks.ResNetBase._make_layer", "networks.ResNetBase._make_layer", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiGlobalMaxPooling", "MinkowskiEngine.MinkowskiLinear"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.res16unet.ResNetBase._make_layer", "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.res16unet.ResNetBase._make_layer", "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.res16unet.ResNetBase._make_layer", "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.res16unet.ResNetBase._make_layer"], ["", "def", "network_initialization", "(", "self", ",", "in_channels", ",", "out_channels", ",", "D", ")", ":", "\n", "\n", "        ", "self", ".", "inplanes", "=", "self", ".", "INIT_DIM", "\n", "self", ".", "conv1", "=", "ME", ".", "MinkowskiConvolution", "(", "in_channels", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "5", ",", "stride", "=", "2", ",", "dimension", "=", "D", ")", "\n", "\n", "self", ".", "bn1", "=", "ME", ".", "MinkowskiBatchNorm", "(", "self", ".", "inplanes", ")", "\n", "self", ".", "relu", "=", "ME", ".", "MinkowskiReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "pool", "=", "ME", ".", "MinkowskiAvgPooling", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "dimension", "=", "D", ")", "\n", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "self", ".", "BLOCK", ",", "self", ".", "PLANES", "[", "0", "]", ",", "self", ".", "LAYERS", "[", "0", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "self", ".", "BLOCK", ",", "self", ".", "PLANES", "[", "1", "]", ",", "self", ".", "LAYERS", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "self", ".", "BLOCK", ",", "self", ".", "PLANES", "[", "2", "]", ",", "self", ".", "LAYERS", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "self", ".", "BLOCK", ",", "self", ".", "PLANES", "[", "3", "]", ",", "self", ".", "LAYERS", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "conv5", "=", "ME", ".", "MinkowskiConvolution", "(", "self", ".", "inplanes", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "3", ",", "stride", "=", "3", ",", "dimension", "=", "D", ")", "\n", "self", ".", "bn5", "=", "ME", ".", "MinkowskiBatchNorm", "(", "self", ".", "inplanes", ")", "\n", "\n", "self", ".", "glob_avg", "=", "ME", ".", "MinkowskiGlobalMaxPooling", "(", "dimension", "=", "D", ")", "\n", "\n", "self", ".", "final", "=", "ME", ".", "MinkowskiLinear", "(", "self", ".", "inplanes", ",", "out_channels", ",", "bias", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.networks.ResNetBase.weight_initialization": [[43, 51], ["networks.ResNetBase.modules", "isinstance", "isinstance", "MinkowskiEngine.utils.kaiming_normal_", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["", "def", "weight_initialization", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "ME", ".", "MinkowskiConvolution", ")", ":", "\n", "                ", "ME", ".", "utils", ".", "kaiming_normal_", "(", "m", ".", "kernel", ",", "mode", "=", "\"fan_out\"", ",", "nonlinearity", "=", "\"relu\"", ")", "\n", "\n", "", "if", "isinstance", "(", "m", ",", "ME", ".", "MinkowskiBatchNorm", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.networks.ResNetBase._make_layer": [[52, 70], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "block", "layers.append", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "block"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "bn_momentum", "=", "0.1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "EXPANSION", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "ME", ".", "MinkowskiConvolution", "(", "\n", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "EXPANSION", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "dimension", "=", "self", ".", "D", "\n", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "planes", "*", "block", ".", "EXPANSION", ")", ",", "\n", ")", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "\n", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", "=", "stride", ",", "dilation", "=", "dilation", ",", "downsample", "=", "downsample", ",", "dimension", "=", "self", ".", "D", ")", "\n", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "EXPANSION", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "dilation", "=", "dilation", ",", "dimension", "=", "self", ".", "D", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.networks.ResNetBase.forward": [[71, 88], ["networks.ResNetBase.conv1", "networks.ResNetBase.bn1", "networks.ResNetBase.relu", "networks.ResNetBase.pool", "networks.ResNetBase.layer1", "networks.ResNetBase.layer2", "networks.ResNetBase.layer3", "networks.ResNetBase.layer4", "networks.ResNetBase.conv5", "networks.ResNetBase.bn5", "networks.ResNetBase.relu", "networks.ResNetBase.glob_avg", "networks.ResNetBase.final"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "pool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv5", "(", "x", ")", "\n", "x", "=", "self", ".", "bn5", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "glob_avg", "(", "x", ")", "\n", "return", "self", ".", "final", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.networks.MinkUNetBase.__init__": [[126, 128], ["networks.ResNetBase.__init__"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "D", "=", "3", ",", "**", "kwargs", ")", ":", "\n", "        ", "ResNetBase", ".", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "D", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.networks.MinkUNetBase.network_initialization": [[129, 186], ["MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "networks.MinkUNetBase._make_layer", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "networks.MinkUNetBase._make_layer", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "networks.MinkUNetBase._make_layer", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "networks.MinkUNetBase._make_layer", "MinkowskiEngine.MinkowskiConvolutionTranspose", "MinkowskiEngine.MinkowskiBatchNorm", "networks.MinkUNetBase._make_layer", "MinkowskiEngine.MinkowskiConvolutionTranspose", "MinkowskiEngine.MinkowskiBatchNorm", "networks.MinkUNetBase._make_layer", "MinkowskiEngine.MinkowskiConvolutionTranspose", "MinkowskiEngine.MinkowskiBatchNorm", "networks.MinkUNetBase._make_layer", "MinkowskiEngine.MinkowskiConvolutionTranspose", "MinkowskiEngine.MinkowskiBatchNorm", "networks.MinkUNetBase._make_layer", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiReLU"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.res16unet.ResNetBase._make_layer", "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.res16unet.ResNetBase._make_layer", "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.res16unet.ResNetBase._make_layer", "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.res16unet.ResNetBase._make_layer", "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.res16unet.ResNetBase._make_layer", "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.res16unet.ResNetBase._make_layer", "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.res16unet.ResNetBase._make_layer", "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.res16unet.ResNetBase._make_layer"], ["", "def", "network_initialization", "(", "self", ",", "in_channels", ",", "out_channels", ",", "D", ")", ":", "\n", "# Output of the first conv concated to conv6", "\n", "        ", "self", ".", "inplanes", "=", "self", ".", "INIT_DIM", "\n", "self", ".", "conv0p1s1", "=", "ME", ".", "MinkowskiConvolution", "(", "in_channels", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "5", ",", "dimension", "=", "D", ")", "\n", "\n", "self", ".", "bn0", "=", "ME", ".", "MinkowskiBatchNorm", "(", "self", ".", "inplanes", ")", "\n", "\n", "self", ".", "conv1p1s2", "=", "ME", ".", "MinkowskiConvolution", "(", "self", ".", "inplanes", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "dimension", "=", "D", ")", "\n", "self", ".", "bn1", "=", "ME", ".", "MinkowskiBatchNorm", "(", "self", ".", "inplanes", ")", "\n", "\n", "self", ".", "block1", "=", "self", ".", "_make_layer", "(", "self", ".", "BLOCK", ",", "self", ".", "PLANES", "[", "0", "]", ",", "self", ".", "LAYERS", "[", "0", "]", ")", "\n", "\n", "self", ".", "conv2p2s2", "=", "ME", ".", "MinkowskiConvolution", "(", "self", ".", "inplanes", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "dimension", "=", "D", ")", "\n", "self", ".", "bn2", "=", "ME", ".", "MinkowskiBatchNorm", "(", "self", ".", "inplanes", ")", "\n", "\n", "self", ".", "block2", "=", "self", ".", "_make_layer", "(", "self", ".", "BLOCK", ",", "self", ".", "PLANES", "[", "1", "]", ",", "self", ".", "LAYERS", "[", "1", "]", ")", "\n", "\n", "self", ".", "conv3p4s2", "=", "ME", ".", "MinkowskiConvolution", "(", "self", ".", "inplanes", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "dimension", "=", "D", ")", "\n", "\n", "self", ".", "bn3", "=", "ME", ".", "MinkowskiBatchNorm", "(", "self", ".", "inplanes", ")", "\n", "self", ".", "block3", "=", "self", ".", "_make_layer", "(", "self", ".", "BLOCK", ",", "self", ".", "PLANES", "[", "2", "]", ",", "self", ".", "LAYERS", "[", "2", "]", ")", "\n", "\n", "self", ".", "conv4p8s2", "=", "ME", ".", "MinkowskiConvolution", "(", "self", ".", "inplanes", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "dimension", "=", "D", ")", "\n", "self", ".", "bn4", "=", "ME", ".", "MinkowskiBatchNorm", "(", "self", ".", "inplanes", ")", "\n", "self", ".", "block4", "=", "self", ".", "_make_layer", "(", "self", ".", "BLOCK", ",", "self", ".", "PLANES", "[", "3", "]", ",", "self", ".", "LAYERS", "[", "3", "]", ")", "\n", "\n", "self", ".", "convtr4p16s2", "=", "ME", ".", "MinkowskiConvolutionTranspose", "(", "\n", "self", ".", "inplanes", ",", "self", ".", "PLANES", "[", "4", "]", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "dimension", "=", "D", "\n", ")", "\n", "self", ".", "bntr4", "=", "ME", ".", "MinkowskiBatchNorm", "(", "self", ".", "PLANES", "[", "4", "]", ")", "\n", "\n", "self", ".", "inplanes", "=", "self", ".", "PLANES", "[", "4", "]", "+", "self", ".", "PLANES", "[", "2", "]", "*", "self", ".", "BLOCK", ".", "EXPANSION", "\n", "self", ".", "block5", "=", "self", ".", "_make_layer", "(", "self", ".", "BLOCK", ",", "self", ".", "PLANES", "[", "4", "]", ",", "self", ".", "LAYERS", "[", "4", "]", ")", "\n", "self", ".", "convtr5p8s2", "=", "ME", ".", "MinkowskiConvolutionTranspose", "(", "\n", "self", ".", "inplanes", ",", "self", ".", "PLANES", "[", "5", "]", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "dimension", "=", "D", "\n", ")", "\n", "self", ".", "bntr5", "=", "ME", ".", "MinkowskiBatchNorm", "(", "self", ".", "PLANES", "[", "5", "]", ")", "\n", "\n", "self", ".", "inplanes", "=", "self", ".", "PLANES", "[", "5", "]", "+", "self", ".", "PLANES", "[", "1", "]", "*", "self", ".", "BLOCK", ".", "EXPANSION", "\n", "self", ".", "block6", "=", "self", ".", "_make_layer", "(", "self", ".", "BLOCK", ",", "self", ".", "PLANES", "[", "5", "]", ",", "self", ".", "LAYERS", "[", "5", "]", ")", "\n", "self", ".", "convtr6p4s2", "=", "ME", ".", "MinkowskiConvolutionTranspose", "(", "\n", "self", ".", "inplanes", ",", "self", ".", "PLANES", "[", "6", "]", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "dimension", "=", "D", "\n", ")", "\n", "self", ".", "bntr6", "=", "ME", ".", "MinkowskiBatchNorm", "(", "self", ".", "PLANES", "[", "6", "]", ")", "\n", "\n", "self", ".", "inplanes", "=", "self", ".", "PLANES", "[", "6", "]", "+", "self", ".", "PLANES", "[", "0", "]", "*", "self", ".", "BLOCK", ".", "EXPANSION", "\n", "self", ".", "block7", "=", "self", ".", "_make_layer", "(", "self", ".", "BLOCK", ",", "self", ".", "PLANES", "[", "6", "]", ",", "self", ".", "LAYERS", "[", "6", "]", ")", "\n", "self", ".", "convtr7p2s2", "=", "ME", ".", "MinkowskiConvolutionTranspose", "(", "\n", "self", ".", "inplanes", ",", "self", ".", "PLANES", "[", "7", "]", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "dimension", "=", "D", "\n", ")", "\n", "self", ".", "bntr7", "=", "ME", ".", "MinkowskiBatchNorm", "(", "self", ".", "PLANES", "[", "7", "]", ")", "\n", "\n", "self", ".", "inplanes", "=", "self", ".", "PLANES", "[", "7", "]", "+", "self", ".", "INIT_DIM", "\n", "self", ".", "block8", "=", "self", ".", "_make_layer", "(", "self", ".", "BLOCK", ",", "self", ".", "PLANES", "[", "7", "]", ",", "self", ".", "LAYERS", "[", "7", "]", ")", "\n", "\n", "self", ".", "final", "=", "ME", ".", "MinkowskiConvolution", "(", "self", ".", "PLANES", "[", "7", "]", ",", "out_channels", ",", "kernel_size", "=", "1", ",", "bias", "=", "True", ",", "dimension", "=", "D", ")", "\n", "self", ".", "relu", "=", "ME", ".", "MinkowskiReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.networks.MinkUNetBase.forward": [[187, 246], ["networks.MinkUNetBase.conv0p1s1", "networks.MinkUNetBase.bn0", "networks.MinkUNetBase.relu", "networks.MinkUNetBase.conv1p1s2", "networks.MinkUNetBase.bn1", "networks.MinkUNetBase.relu", "networks.MinkUNetBase.block1", "networks.MinkUNetBase.conv2p2s2", "networks.MinkUNetBase.bn2", "networks.MinkUNetBase.relu", "networks.MinkUNetBase.block2", "networks.MinkUNetBase.conv3p4s2", "networks.MinkUNetBase.bn3", "networks.MinkUNetBase.relu", "networks.MinkUNetBase.block3", "networks.MinkUNetBase.conv4p8s2", "networks.MinkUNetBase.bn4", "networks.MinkUNetBase.relu", "networks.MinkUNetBase.block4", "networks.MinkUNetBase.convtr4p16s2", "networks.MinkUNetBase.bntr4", "networks.MinkUNetBase.relu", "MinkowskiEngine.cat", "networks.MinkUNetBase.block5", "networks.MinkUNetBase.convtr5p8s2", "networks.MinkUNetBase.bntr5", "networks.MinkUNetBase.relu", "MinkowskiEngine.cat", "networks.MinkUNetBase.block6", "networks.MinkUNetBase.convtr6p4s2", "networks.MinkUNetBase.bntr6", "networks.MinkUNetBase.relu", "MinkowskiEngine.cat", "networks.MinkUNetBase.block7", "networks.MinkUNetBase.convtr7p2s2", "networks.MinkUNetBase.bntr7", "networks.MinkUNetBase.relu", "MinkowskiEngine.cat", "networks.MinkUNetBase.block8", "networks.MinkUNetBase.final"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv0p1s1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn0", "(", "out", ")", "\n", "out_p1", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv1p1s2", "(", "out_p1", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out_b1p2", "=", "self", ".", "block1", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2p2s2", "(", "out_b1p2", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out_b2p4", "=", "self", ".", "block2", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3p4s2", "(", "out_b2p4", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out_b3p8", "=", "self", ".", "block3", "(", "out", ")", "\n", "\n", "# tensor_stride=16", "\n", "out", "=", "self", ".", "conv4p8s2", "(", "out_b3p8", ")", "\n", "out", "=", "self", ".", "bn4", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "block4", "(", "out", ")", "\n", "\n", "# tensor_stride=8", "\n", "out", "=", "self", ".", "convtr4p16s2", "(", "out", ")", "\n", "out", "=", "self", ".", "bntr4", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "ME", ".", "cat", "(", "out", ",", "out_b3p8", ")", "\n", "out", "=", "self", ".", "block5", "(", "out", ")", "\n", "\n", "# tensor_stride=4", "\n", "out", "=", "self", ".", "convtr5p8s2", "(", "out", ")", "\n", "out", "=", "self", ".", "bntr5", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "ME", ".", "cat", "(", "out", ",", "out_b2p4", ")", "\n", "out", "=", "self", ".", "block6", "(", "out", ")", "\n", "\n", "# tensor_stride=2", "\n", "out", "=", "self", ".", "convtr6p4s2", "(", "out", ")", "\n", "out", "=", "self", ".", "bntr6", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "ME", ".", "cat", "(", "out", ",", "out_b1p2", ")", "\n", "out", "=", "self", ".", "block7", "(", "out", ")", "\n", "\n", "# tensor_stride=1", "\n", "out", "=", "self", ".", "convtr7p2s2", "(", "out", ")", "\n", "out", "=", "self", ".", "bntr7", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "ME", ".", "cat", "(", "out", ",", "out_p1", ")", "\n", "out", "=", "self", ".", "block8", "(", "out", ")", "\n", "\n", "return", "self", ".", "final", "(", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.common.ConvType.__new__": [[40, 45], ["object.__new__"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.common.ConvType.__new__"], ["def", "__new__", "(", "cls", ",", "value", ",", "name", ")", ":", "\n", "        ", "member", "=", "object", ".", "__new__", "(", "cls", ")", "\n", "member", ".", "_value_", "=", "value", "\n", "member", ".", "fullname", "=", "name", "\n", "return", "member", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.common.ConvType.__int__": [[46, 48], ["None"], "methods", ["None"], ["", "def", "__int__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.common.get_norm": [[14, 25], ["MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiInstanceNorm", "torch.Sequential", "ValueError", "MinkowskiEngine.MinkowskiInstanceNorm", "MinkowskiEngine.MinkowskiBatchNorm"], "function", ["None"], ["", "def", "get_norm", "(", "norm_type", ",", "n_channels", ",", "D", ",", "bn_momentum", "=", "0.1", ")", ":", "\n", "    ", "if", "norm_type", "==", "NormType", ".", "BATCH_NORM", ":", "\n", "        ", "return", "ME", ".", "MinkowskiBatchNorm", "(", "n_channels", ",", "momentum", "=", "bn_momentum", ")", "\n", "", "elif", "norm_type", "==", "NormType", ".", "INSTANCE_NORM", ":", "\n", "        ", "return", "ME", ".", "MinkowskiInstanceNorm", "(", "n_channels", ")", "\n", "", "elif", "norm_type", "==", "NormType", ".", "INSTANCE_BATCH_NORM", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "\n", "ME", ".", "MinkowskiInstanceNorm", "(", "n_channels", ")", ",", "ME", ".", "MinkowskiBatchNorm", "(", "n_channels", ",", "momentum", "=", "bn_momentum", ")", "\n", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "f\"Norm type: {norm_type} not supported\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.common.convert_region_type": [[65, 70], ["None"], "function", ["None"], ["def", "convert_region_type", "(", "region_type", ")", ":", "\n", "    ", "\"\"\"\n  Convert the integer region_type to the corresponding RegionType enum object.\n  \"\"\"", "\n", "return", "int_to_region_type", "[", "region_type", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.common.convert_conv_type": [[72, 112], ["isinstance", "isinstance", "kernel_size.append", "isinstance", "kernel_size.append", "axis_types.append"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append"], ["", "def", "convert_conv_type", "(", "conv_type", ",", "kernel_size", ",", "D", ")", ":", "\n", "    ", "assert", "isinstance", "(", "conv_type", ",", "ConvType", ")", ",", "\"conv_type must be of ConvType\"", "\n", "region_type", "=", "conv_to_region_type", "[", "conv_type", "]", "\n", "axis_types", "=", "None", "\n", "if", "conv_type", "==", "ConvType", ".", "SPATIAL_HYPERCUBE", ":", "\n", "# No temporal convolution", "\n", "        ", "if", "isinstance", "(", "kernel_size", ",", "collections", ".", "Sequence", ")", ":", "\n", "            ", "kernel_size", "=", "kernel_size", "[", ":", "3", "]", "\n", "", "else", ":", "\n", "            ", "kernel_size", "=", "[", "kernel_size", ",", "]", "*", "3", "\n", "", "if", "D", "==", "4", ":", "\n", "            ", "kernel_size", ".", "append", "(", "1", ")", "\n", "", "", "elif", "conv_type", "==", "ConvType", ".", "SPATIO_TEMPORAL_HYPERCUBE", ":", "\n", "# conv_type conversion already handled", "\n", "        ", "assert", "D", "==", "4", "\n", "", "elif", "conv_type", "==", "ConvType", ".", "HYPERCUBE", ":", "\n", "# conv_type conversion already handled", "\n", "        ", "pass", "\n", "", "elif", "conv_type", "==", "ConvType", ".", "SPATIAL_HYPERCROSS", ":", "\n", "        ", "if", "isinstance", "(", "kernel_size", ",", "collections", ".", "Sequence", ")", ":", "\n", "            ", "kernel_size", "=", "kernel_size", "[", ":", "3", "]", "\n", "", "else", ":", "\n", "            ", "kernel_size", "=", "[", "kernel_size", ",", "]", "*", "3", "\n", "", "if", "D", "==", "4", ":", "\n", "            ", "kernel_size", ".", "append", "(", "1", ")", "\n", "", "", "elif", "conv_type", "==", "ConvType", ".", "HYPERCROSS", ":", "\n", "# conv_type conversion already handled", "\n", "        ", "pass", "\n", "", "elif", "conv_type", "==", "ConvType", ".", "SPATIO_TEMPORAL_HYPERCROSS", ":", "\n", "# conv_type conversion already handled", "\n", "        ", "assert", "D", "==", "4", "\n", "", "elif", "conv_type", "==", "ConvType", ".", "SPATIAL_HYPERCUBE_TEMPORAL_HYPERCROSS", ":", "\n", "# Define the CUBIC conv kernel for spatial dims and CROSS conv for temp dim", "\n", "        ", "if", "D", "<", "4", ":", "\n", "            ", "region_type", "=", "ME", ".", "RegionType", ".", "HYPER_CUBE", "\n", "", "else", ":", "\n", "            ", "axis_types", "=", "[", "ME", ".", "RegionType", ".", "HYPER_CUBE", ",", "]", "*", "3", "\n", "if", "D", "==", "4", ":", "\n", "                ", "axis_types", ".", "append", "(", "ME", ".", "RegionType", ".", "HYPER_CROSS", ")", "\n", "", "", "", "return", "region_type", ",", "axis_types", ",", "kernel_size", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.common.conv": [[114, 130], ["common.convert_conv_type", "MinkowskiEngine.KernelGenerator", "MinkowskiEngine.MinkowskiConvolution"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.common.convert_conv_type"], ["", "def", "conv", "(", "in_planes", ",", "out_planes", ",", "kernel_size", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "bias", "=", "False", ",", "conv_type", "=", "ConvType", ".", "HYPERCUBE", ",", "D", "=", "-", "1", ")", ":", "\n", "    ", "assert", "D", ">", "0", ",", "\"Dimension must be a positive integer\"", "\n", "region_type", ",", "axis_types", ",", "kernel_size", "=", "convert_conv_type", "(", "conv_type", ",", "kernel_size", ",", "D", ")", "\n", "kernel_generator", "=", "ME", ".", "KernelGenerator", "(", "\n", "kernel_size", ",", "stride", ",", "dilation", ",", "region_type", "=", "region_type", ",", "axis_types", "=", "axis_types", ",", "dimension", "=", "D", "\n", ")", "\n", "\n", "return", "ME", ".", "MinkowskiConvolution", "(", "\n", "in_channels", "=", "in_planes", ",", "\n", "out_channels", "=", "out_planes", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "dilation", "=", "dilation", ",", "\n", "bias", "=", "bias", ",", "\n", "kernel_generator", "=", "kernel_generator", ",", "\n", "dimension", "=", "D", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.common.conv_tr": [[133, 151], ["common.convert_conv_type", "MinkowskiEngine.KernelGenerator", "MinkowskiEngine.MinkowskiConvolutionTranspose"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.common.convert_conv_type"], ["", "def", "conv_tr", "(", "\n", "in_planes", ",", "out_planes", ",", "kernel_size", ",", "upsample_stride", "=", "1", ",", "dilation", "=", "1", ",", "bias", "=", "False", ",", "conv_type", "=", "ConvType", ".", "HYPERCUBE", ",", "D", "=", "-", "1", "\n", ")", ":", "\n", "    ", "assert", "D", ">", "0", ",", "\"Dimension must be a positive integer\"", "\n", "region_type", ",", "axis_types", ",", "kernel_size", "=", "convert_conv_type", "(", "conv_type", ",", "kernel_size", ",", "D", ")", "\n", "kernel_generator", "=", "ME", ".", "KernelGenerator", "(", "\n", "kernel_size", ",", "upsample_stride", ",", "dilation", ",", "region_type", "=", "region_type", ",", "axis_types", "=", "axis_types", ",", "dimension", "=", "D", "\n", ")", "\n", "\n", "return", "ME", ".", "MinkowskiConvolutionTranspose", "(", "\n", "in_channels", "=", "in_planes", ",", "\n", "out_channels", "=", "out_planes", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "upsample_stride", ",", "\n", "dilation", "=", "dilation", ",", "\n", "bias", "=", "bias", ",", "\n", "kernel_generator", "=", "kernel_generator", ",", "\n", "dimension", "=", "D", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.common.avg_pool": [[154, 163], ["common.convert_conv_type", "MinkowskiEngine.KernelGenerator", "MinkowskiEngine.MinkowskiAvgPooling"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.common.convert_conv_type"], ["", "def", "avg_pool", "(", "kernel_size", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "conv_type", "=", "ConvType", ".", "HYPERCUBE", ",", "in_coords_key", "=", "None", ",", "D", "=", "-", "1", ")", ":", "\n", "    ", "assert", "D", ">", "0", ",", "\"Dimension must be a positive integer\"", "\n", "region_type", ",", "axis_types", ",", "kernel_size", "=", "convert_conv_type", "(", "conv_type", ",", "kernel_size", ",", "D", ")", "\n", "kernel_generator", "=", "ME", ".", "KernelGenerator", "(", "\n", "kernel_size", ",", "stride", ",", "dilation", ",", "region_type", "=", "region_type", ",", "axis_types", "=", "axis_types", ",", "dimension", "=", "D", "\n", ")", "\n", "\n", "return", "ME", ".", "MinkowskiAvgPooling", "(", "\n", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "dilation", "=", "dilation", ",", "kernel_generator", "=", "kernel_generator", ",", "dimension", "=", "D", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.common.avg_unpool": [[166, 175], ["common.convert_conv_type", "MinkowskiEngine.KernelGenerator", "MinkowskiEngine.MinkowskiAvgUnpooling"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.common.convert_conv_type"], ["", "def", "avg_unpool", "(", "kernel_size", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "conv_type", "=", "ConvType", ".", "HYPERCUBE", ",", "D", "=", "-", "1", ")", ":", "\n", "    ", "assert", "D", ">", "0", ",", "\"Dimension must be a positive integer\"", "\n", "region_type", ",", "axis_types", ",", "kernel_size", "=", "convert_conv_type", "(", "conv_type", ",", "kernel_size", ",", "D", ")", "\n", "kernel_generator", "=", "ME", ".", "KernelGenerator", "(", "\n", "kernel_size", ",", "stride", ",", "dilation", ",", "region_type", "=", "region_type", ",", "axis_types", "=", "axis_types", ",", "dimension", "=", "D", "\n", ")", "\n", "\n", "return", "ME", ".", "MinkowskiAvgUnpooling", "(", "\n", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "dilation", "=", "dilation", ",", "kernel_generator", "=", "kernel_generator", ",", "dimension", "=", "D", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.common.sum_pool": [[178, 187], ["common.convert_conv_type", "MinkowskiEngine.KernelGenerator", "MinkowskiEngine.MinkowskiSumPooling"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.common.convert_conv_type"], ["", "def", "sum_pool", "(", "kernel_size", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "conv_type", "=", "ConvType", ".", "HYPERCUBE", ",", "D", "=", "-", "1", ")", ":", "\n", "    ", "assert", "D", ">", "0", ",", "\"Dimension must be a positive integer\"", "\n", "region_type", ",", "axis_types", ",", "kernel_size", "=", "convert_conv_type", "(", "conv_type", ",", "kernel_size", ",", "D", ")", "\n", "kernel_generator", "=", "ME", ".", "KernelGenerator", "(", "\n", "kernel_size", ",", "stride", ",", "dilation", ",", "region_type", "=", "region_type", ",", "axis_types", "=", "axis_types", ",", "dimension", "=", "D", "\n", ")", "\n", "\n", "return", "ME", ".", "MinkowskiSumPooling", "(", "\n", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "dilation", "=", "dilation", ",", "kernel_generator", "=", "kernel_generator", ",", "dimension", "=", "D", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.modules.BasicBlock.__init__": [[27, 41], ["torch.Module.__init__", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.modules.BasicBlock.forward": [[42, 59], ["modules.BasicBlock.conv1", "modules.BasicBlock.norm1", "modules.BasicBlock.relu", "modules.BasicBlock.conv2", "modules.BasicBlock.norm2", "modules.BasicBlock.relu", "modules.BasicBlock.downsample"], "methods", ["None"], ["\n", "\n", "def", "__init__", "(", "\n", "self", ",", "in_channels", ",", "out_channels", ",", "dim", ",", "kernel_size", ",", "hidden_channels", "=", "None", ",", "dilation", "=", "1", ",", "bias", "=", "True", ",", "**", "kwargs", ",", "\n", ")", ":", "\n", "        ", "super", "(", "XConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "in_channels", "=", "in_channels", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.modules.Bottleneck.__init__": [[64, 81], ["torch.Module.__init__", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "dilation", "=", "dilation", "\n", "self", ".", "kwargs", "=", "kwargs", "\n", "\n", "C_in", ",", "C_delta", ",", "C_out", "=", "in_channels", ",", "hidden_channels", ",", "out_channels", "\n", "D", ",", "K", "=", "dim", ",", "kernel_size", "\n", "\n", "self", ".", "mlp1", "=", "S", "(", "\n", "L", "(", "dim", ",", "C_delta", ")", ",", "ELU", "(", ")", ",", "BN", "(", "C_delta", ")", ",", "L", "(", "C_delta", ",", "C_delta", ")", ",", "ELU", "(", ")", ",", "BN", "(", "C_delta", ")", ",", "Reshape", "(", "-", "1", ",", "K", ",", "C_delta", ")", ",", "\n", ")", "\n", "\n", "self", ".", "mlp2", "=", "S", "(", "\n", "L", "(", "D", "*", "K", ",", "K", "**", "2", ")", ",", "\n", "ELU", "(", ")", ",", "\n", "BN", "(", "K", "**", "2", ")", ",", "\n", "Reshape", "(", "-", "1", ",", "K", ",", "K", ")", ",", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.modules.Bottleneck.forward": [[82, 103], ["modules.Bottleneck.conv1", "modules.Bottleneck.norm1", "modules.Bottleneck.relu", "modules.Bottleneck.conv2", "modules.Bottleneck.norm2", "modules.Bottleneck.relu", "modules.Bottleneck.conv3", "modules.Bottleneck.norm3", "modules.Bottleneck.relu", "modules.Bottleneck.downsample"], "methods", ["None"], ["Conv1d", "(", "K", ",", "K", "**", "2", ",", "K", ",", "groups", "=", "K", ")", ",", "\n", "ELU", "(", ")", ",", "\n", "BN", "(", "K", "**", "2", ")", ",", "\n", "Reshape", "(", "-", "1", ",", "K", ",", "K", ")", ",", "\n", "Conv1d", "(", "K", ",", "K", "**", "2", ",", "K", ",", "groups", "=", "K", ")", ",", "\n", "BN", "(", "K", "**", "2", ")", ",", "\n", "Reshape", "(", "-", "1", ",", "K", ",", "K", ")", ",", "\n", ")", "\n", "\n", "C_in", "=", "C_in", "+", "C_delta", "\n", "depth_multiplier", "=", "int", "(", "ceil", "(", "C_out", "/", "C_in", ")", ")", "\n", "self", ".", "conv", "=", "S", "(", "\n", "Conv1d", "(", "C_in", ",", "C_in", "*", "depth_multiplier", ",", "K", ",", "groups", "=", "C_in", ")", ",", "\n", "Reshape", "(", "-", "1", ",", "C_in", "*", "depth_multiplier", ")", ",", "\n", "L", "(", "C_in", "*", "depth_multiplier", ",", "C_out", ",", "bias", "=", "bias", ")", ",", "\n", ")", "\n", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n", "", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "reset", "(", "self", ".", "mlp1", ")", "\n", "reset", "(", "self", ".", "mlp2", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.modules.BaseResBlock.__init__": [[106, 165], ["torch.Module.__init__", "modules.BaseResBlock.create_arguments_list", "modules.BaseResBlock.create_arguments_list", "modules.BaseResBlock.create_arguments_list", "modules.BaseResBlock.create_arguments_list", "modules.BaseResBlock.create_arguments_list", "zip", "torch.Sequential", "modules.append", "MinkowskiEngine.MinkowskiConvolution", "modules.append", "modules.append", "norm_layer", "activation"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.modules.BaseResBlock.create_arguments_list", "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.modules.BaseResBlock.create_arguments_list", "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.modules.BaseResBlock.create_arguments_list", "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.modules.BaseResBlock.create_arguments_list", "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.modules.BaseResBlock.create_arguments_list", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append"], ["", "def", "forward", "(", "self", ",", "x", ",", "pos", ",", "edge_index", ")", ":", "\n", "\n", "# posTo = the points that will be centers of convolutions", "\n", "# posFrom = points that have edges to the centers of convolutions", "\n", "# For a down conv, posFrom = pos, posTo = pos[idx]", "\n", "# For an up conv, posFrom = pos, posTo = pos_skip", "\n", "        ", "posFrom", ",", "posTo", "=", "pos", "\n", "\n", "(", "N", ",", "D", ")", ",", "K", "=", "posTo", ".", "size", "(", ")", ",", "self", ".", "kernel_size", "\n", "\n", "idxFrom", ",", "idxTo", "=", "edge_index", "\n", "\n", "relPos", "=", "posTo", "[", "idxTo", "]", "-", "posFrom", "[", "idxFrom", "]", "\n", "\n", "x_star", "=", "self", ".", "mlp1", "(", "relPos", ")", "\n", "# x_star = self.mlp1(relPos.view(len(row), D))", "\n", "if", "x", "is", "not", "None", ":", "\n", "            ", "x", "=", "x", ".", "unsqueeze", "(", "-", "1", ")", "if", "x", ".", "dim", "(", ")", "==", "1", "else", "x", "\n", "x", "=", "x", "[", "idxFrom", "]", ".", "view", "(", "N", ",", "K", ",", "self", ".", "in_channels", ")", "\n", "x_star", "=", "torch", ".", "cat", "(", "[", "x_star", ",", "x", "]", ",", "dim", "=", "-", "1", ")", "\n", "", "x_star", "=", "x_star", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "x_star", "=", "x_star", ".", "view", "(", "N", ",", "self", ".", "in_channels", "+", "self", ".", "hidden_channels", ",", "K", ",", "1", ")", "\n", "\n", "transform_matrix", "=", "self", ".", "mlp2", "(", "relPos", ".", "view", "(", "N", ",", "K", "*", "D", ")", ")", "\n", "transform_matrix", "=", "transform_matrix", ".", "view", "(", "N", ",", "1", ",", "K", ",", "K", ")", "\n", "\n", "x_transformed", "=", "torch", ".", "matmul", "(", "transform_matrix", ",", "x_star", ")", "\n", "x_transformed", "=", "x_transformed", ".", "view", "(", "N", ",", "-", "1", ",", "K", ")", "\n", "\n", "out", "=", "self", ".", "conv", "(", "x_transformed", ")", "\n", "\n", "return", "out", "\n", "\n", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"{}({}, {})\"", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "in_channels", ",", "self", ".", "out_channels", ")", "\n", "\n", "\n", "", "", "class", "PointCNNConvDown", "(", "BaseConvolutionDown", ")", ":", "\n", "    ", "def", "__init__", "(", "\n", "self", ",", "inN", "=", "None", ",", "outN", "=", "None", ",", "K", "=", "None", ",", "D", "=", "None", ",", "C1", "=", "None", ",", "C2", "=", "None", ",", "hidden_channel", "=", "None", ",", "*", "args", ",", "**", "kwargs", ",", "\n", ")", ":", "\n", "        ", "super", "(", "PointCNNConvDown", ",", "self", ")", ".", "__init__", "(", "FPSSampler", "(", "outN", "/", "inN", ")", ",", "DilatedKNNNeighbourFinder", "(", "K", ",", "D", ")", ")", "\n", "\n", "self", ".", "_conv", "=", "XConv", "(", "C1", ",", "C2", ",", "3", ",", "K", ",", "hidden_channels", "=", "hidden_channel", ")", "\n", "\n", "", "def", "conv", "(", "self", ",", "x", ",", "pos", ",", "edge_index", ",", "batch", ")", ":", "\n", "        ", "return", "self", ".", "_conv", ".", "forward", "(", "x", ",", "pos", ",", "edge_index", ")", "\n", "\n", "\n", "", "", "class", "PointCNNConvUp", "(", "BaseConvolutionUp", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "K", "=", "None", ",", "D", "=", "None", ",", "C1", "=", "None", ",", "C2", "=", "None", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "PointCNNConvUp", ",", "self", ")", ".", "__init__", "(", "DilatedKNNNeighbourFinder", "(", "K", ",", "D", ")", ")", "\n", "\n", "self", ".", "_conv", "=", "XConv", "(", "C1", ",", "C2", ",", "3", ",", "K", ")", "\n", "\n", "", "def", "conv", "(", "self", ",", "x", ",", "pos", ",", "pos_skip", ",", "batch", ",", "batch_skip", ",", "edge_index", ")", ":", "\n", "        ", "return", "self", ".", "_conv", ".", "forward", "(", "x", ",", "(", "pos", ",", "pos_skip", ")", ",", "edge_index", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.modules.BaseResBlock.create_arguments_list": [[166, 171], ["len", "range"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.modules.BaseResBlock.forward": [[172, 174], ["modules.BaseResBlock.conv"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.base_conv.message_passing.BaseResnetBlockDown.conv"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.modules.ResnetBlockDown.__init__": [[177, 215], ["modules.BaseResBlock.__init__", "torch.Sequential", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.modules.ResnetBlockDown.forward": [[217, 222], ["modules.BaseResBlock.forward", "modules.ResnetBlockDown.downsample"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.forward"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.modules.ResnetBlockUp.__init__": [[225, 263], ["modules.BaseResBlock.__init__", "MinkowskiEngine.MinkowskiConvolutionTranspose"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.modules.ResnetBlockUp.forward": [[265, 274], ["modules.BaseResBlock.forward", "modules.ResnetBlockUp.upsample", "MinkowskiEngine.cat"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.forward", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.modules.SELayer.__init__": [[277, 288], ["torch.Module.__init__", "torch.Sequential", "MinkowskiEngine.MinkowskiGlobalPooling", "MinkowskiEngine.MinkowskiBroadcastMultiplication", "MinkowskiEngine.MinkowskiLinear", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiLinear", "MinkowskiEngine.MinkowskiSigmoid"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.modules.SELayer.forward": [[289, 293], ["modules.SELayer.pooling", "modules.SELayer.fc", "modules.SELayer.broadcast_mul"], "methods", ["None"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.modules.SEBasicBlock.__init__": [[296, 303], ["modules.BasicBlock.__init__", "modules.SELayer"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.modules.SEBasicBlock.forward": [[304, 322], ["modules.SEBasicBlock.conv1", "modules.SEBasicBlock.norm1", "modules.SEBasicBlock.relu", "modules.SEBasicBlock.conv2", "modules.SEBasicBlock.norm2", "modules.SEBasicBlock.se", "modules.SEBasicBlock.relu", "modules.SEBasicBlock.downsample"], "methods", ["None"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.modules.SEBottleneck.__init__": [[337, 344], ["modules.Bottleneck.__init__", "modules.SELayer"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.modules.SEBottleneck.forward": [[345, 367], ["modules.SEBottleneck.conv1", "modules.SEBottleneck.norm1", "modules.SEBottleneck.relu", "modules.SEBottleneck.conv2", "modules.SEBottleneck.norm2", "modules.SEBottleneck.relu", "modules.SEBottleneck.conv3", "modules.SEBottleneck.norm3", "modules.SEBottleneck.se", "modules.SEBottleneck.relu", "modules.SEBottleneck.downsample"], "methods", ["None"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.api_modules.ResBlock.__init__": [[25, 75], ["MinkowskiEngine.MinkowskiNetwork.__init__", "torch_points3d.core.common_modules.Seq().append().append().append().append().append().append", "MinkowskiEngine.MinkowskiReLU", "torch_points3d.core.common_modules.Seq().append().append", "torch_points3d.core.common_modules.Seq().append().append().append().append().append", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiBatchNorm", "torch_points3d.core.common_modules.Seq().append", "torch_points3d.core.common_modules.Seq().append().append().append().append", "convolution", "convolution", "torch_points3d.core.common_modules.Seq", "torch_points3d.core.common_modules.Seq().append().append().append", "MinkowskiEngine.MinkowskiReLU", "torch_points3d.core.common_modules.Seq().append().append", "MinkowskiEngine.MinkowskiBatchNorm", "torch_points3d.core.common_modules.Seq().append", "convolution", "torch_points3d.core.common_modules.Seq"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append"], ["def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "convolution", ",", "dimension", "=", "3", ")", ":", "\n", "        ", "ME", ".", "MinkowskiNetwork", ".", "__init__", "(", "self", ",", "dimension", ")", "\n", "self", ".", "block", "=", "(", "\n", "Seq", "(", ")", "\n", ".", "append", "(", "\n", "convolution", "(", "\n", "in_channels", "=", "input_nc", ",", "\n", "out_channels", "=", "output_nc", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "dilation", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "dimension", "=", "dimension", ",", "\n", ")", "\n", ")", "\n", ".", "append", "(", "ME", ".", "MinkowskiBatchNorm", "(", "output_nc", ")", ")", "\n", ".", "append", "(", "ME", ".", "MinkowskiReLU", "(", ")", ")", "\n", ".", "append", "(", "\n", "convolution", "(", "\n", "in_channels", "=", "output_nc", ",", "\n", "out_channels", "=", "output_nc", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "dilation", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "dimension", "=", "dimension", ",", "\n", ")", "\n", ")", "\n", ".", "append", "(", "ME", ".", "MinkowskiBatchNorm", "(", "output_nc", ")", ")", "\n", ".", "append", "(", "ME", ".", "MinkowskiReLU", "(", ")", ")", "\n", ")", "\n", "\n", "if", "input_nc", "!=", "output_nc", ":", "\n", "            ", "self", ".", "downsample", "=", "(", "\n", "Seq", "(", ")", "\n", ".", "append", "(", "\n", "convolution", "(", "\n", "in_channels", "=", "input_nc", ",", "\n", "out_channels", "=", "output_nc", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "dilation", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "dimension", "=", "dimension", ",", "\n", ")", "\n", ")", "\n", ".", "append", "(", "ME", ".", "MinkowskiBatchNorm", "(", "output_nc", ")", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "downsample", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.api_modules.ResBlock.forward": [[76, 83], ["api_modules.ResBlock.block", "api_modules.ResBlock.downsample"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "block", "(", "x", ")", "\n", "if", "self", ".", "downsample", ":", "\n", "            ", "out", "+=", "self", ".", "downsample", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "out", "+=", "x", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.api_modules.BottleneckBlock.__init__": [[90, 152], ["torch_points3d.core.common_modules.Seq().append().append().append().append().append().append().append().append().append", "MinkowskiEngine.MinkowskiReLU", "torch_points3d.core.common_modules.Seq().append().append", "torch_points3d.core.common_modules.Seq().append().append().append().append().append().append().append().append", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiBatchNorm", "torch_points3d.core.common_modules.Seq().append", "torch_points3d.core.common_modules.Seq().append().append().append().append().append().append().append", "convolution", "convolution", "torch_points3d.core.common_modules.Seq", "torch_points3d.core.common_modules.Seq().append().append().append().append().append().append", "MinkowskiEngine.MinkowskiReLU", "torch_points3d.core.common_modules.Seq().append().append().append().append().append", "MinkowskiEngine.MinkowskiBatchNorm", "torch_points3d.core.common_modules.Seq().append().append().append().append", "convolution", "torch_points3d.core.common_modules.Seq().append().append().append", "MinkowskiEngine.MinkowskiReLU", "torch_points3d.core.common_modules.Seq().append().append", "MinkowskiEngine.MinkowskiBatchNorm", "torch_points3d.core.common_modules.Seq().append", "convolution", "torch_points3d.core.common_modules.Seq"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append"], ["def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "convolution", ",", "dimension", "=", "3", ",", "reduction", "=", "4", ")", ":", "\n", "        ", "self", ".", "block", "=", "(", "\n", "Seq", "(", ")", "\n", ".", "append", "(", "\n", "convolution", "(", "\n", "in_channels", "=", "input_nc", ",", "\n", "out_channels", "=", "output_nc", "//", "reduction", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "dilation", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "dimension", "=", "dimension", ",", "\n", ")", "\n", ")", "\n", ".", "append", "(", "ME", ".", "MinkowskiBatchNorm", "(", "output_nc", "//", "reduction", ")", ")", "\n", ".", "append", "(", "ME", ".", "MinkowskiReLU", "(", ")", ")", "\n", ".", "append", "(", "\n", "convolution", "(", "\n", "output_nc", "//", "reduction", ",", "\n", "output_nc", "//", "reduction", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "dilation", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "dimension", "=", "dimension", ",", "\n", ")", "\n", ")", "\n", ".", "append", "(", "ME", ".", "MinkowskiBatchNorm", "(", "output_nc", "//", "reduction", ")", ")", "\n", ".", "append", "(", "ME", ".", "MinkowskiReLU", "(", ")", ")", "\n", ".", "append", "(", "\n", "convolution", "(", "\n", "output_nc", "//", "reduction", ",", "\n", "output_nc", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "dilation", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "dimension", "=", "dimension", ",", "\n", ")", "\n", ")", "\n", ".", "append", "(", "ME", ".", "MinkowskiBatchNorm", "(", "output_nc", ")", ")", "\n", ".", "append", "(", "ME", ".", "MinkowskiReLU", "(", ")", ")", "\n", ")", "\n", "\n", "if", "input_nc", "!=", "output_nc", ":", "\n", "            ", "self", ".", "downsample", "=", "(", "\n", "Seq", "(", ")", "\n", ".", "append", "(", "\n", "convolution", "(", "\n", "in_channels", "=", "input_nc", ",", "\n", "out_channels", "=", "output_nc", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "dilation", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "dimension", "=", "dimension", ",", "\n", ")", "\n", ")", "\n", ".", "append", "(", "ME", ".", "MinkowskiBatchNorm", "(", "output_nc", ")", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "downsample", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.api_modules.BottleneckBlock.forward": [[153, 160], ["api_modules.BottleneckBlock.block", "api_modules.BottleneckBlock.downsample"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "block", "(", "x", ")", "\n", "if", "self", ".", "downsample", ":", "\n", "            ", "out", "+=", "self", ".", "downsample", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "out", "+=", "x", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.api_modules.SELayer.__init__": [[176, 187], ["super().__init__", "torch.nn.Sequential", "MinkowskiEngine.MinkowskiGlobalPooling", "MinkowskiEngine.MinkowskiBroadcastMultiplication", "MinkowskiEngine.MinkowskiLinear", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiLinear", "MinkowskiEngine.MinkowskiSigmoid"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["def", "__init__", "(", "self", ",", "channel", ",", "reduction", "=", "16", ",", "dimension", "=", "3", ")", ":", "\n", "# Global coords does not require coords_key", "\n", "        ", "super", "(", "SELayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fc", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "ME", ".", "MinkowskiLinear", "(", "channel", ",", "channel", "//", "reduction", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", "ME", ".", "MinkowskiLinear", "(", "channel", "//", "reduction", ",", "channel", ")", ",", "\n", "ME", ".", "MinkowskiSigmoid", "(", ")", ",", "\n", ")", "\n", "self", ".", "pooling", "=", "ME", ".", "MinkowskiGlobalPooling", "(", ")", "\n", "self", ".", "broadcast_mul", "=", "ME", ".", "MinkowskiBroadcastMultiplication", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.api_modules.SELayer.forward": [[188, 192], ["api_modules.SELayer.pooling", "api_modules.SELayer.fc", "api_modules.SELayer.broadcast_mul"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "self", ".", "pooling", "(", "x", ")", "\n", "y", "=", "self", ".", "fc", "(", "y", ")", "\n", "return", "self", ".", "broadcast_mul", "(", "x", ",", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.api_modules.SEBlock.__init__": [[199, 202], ["api_modules.ResBlock.__init__", "api_modules.SELayer"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "convolution", ",", "dimension", "=", "3", ",", "reduction", "=", "16", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "input_nc", ",", "output_nc", ",", "convolution", ",", "dimension", "=", "3", ")", "\n", "self", ".", "SE", "=", "SELayer", "(", "output_nc", ",", "reduction", "=", "reduction", ",", "dimension", "=", "dimension", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.api_modules.SEBlock.forward": [[203, 211], ["api_modules.SEBlock.block", "api_modules.SEBlock.SE", "api_modules.SEBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "block", "(", "x", ")", "\n", "out", "=", "self", ".", "SE", "(", "out", ")", "\n", "if", "self", ".", "downsample", ":", "\n", "            ", "out", "+=", "self", ".", "downsample", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "out", "+=", "x", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.api_modules.SEBottleneckBlock.__init__": [[218, 221], ["api_modules.BottleneckBlock.__init__", "api_modules.SELayer"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "convolution", ",", "dimension", "=", "3", ",", "reduction", "=", "16", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "input_nc", ",", "output_nc", ",", "convolution", ",", "dimension", "=", "3", ",", "reduction", "=", "4", ")", "\n", "self", ".", "SE", "=", "SELayer", "(", "output_nc", ",", "reduction", "=", "reduction", ",", "dimension", "=", "dimension", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.api_modules.SEBottleneckBlock.forward": [[222, 230], ["api_modules.SEBottleneckBlock.block", "api_modules.SEBottleneckBlock.SE", "api_modules.SEBottleneckBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "block", "(", "x", ")", "\n", "out", "=", "self", ".", "SE", "(", "out", ")", "\n", "if", "self", ".", "downsample", ":", "\n", "            ", "out", "+=", "self", ".", "downsample", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "out", "+=", "x", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.api_modules.ResNetDown.__init__": [[246, 280], ["getattr", "MinkowskiEngine.MinkowskiNetwork.__init__", "torch_points3d.core.common_modules.Seq().append().append().append", "MinkowskiEngine.MinkowskiReLU", "torch_points3d.core.common_modules.Seq", "range", "torch_points3d.core.common_modules.Seq().append().append", "api_modules.ResNetDown.blocks.append", "MinkowskiEngine.MinkowskiBatchNorm", "getattr.", "torch_points3d.core.common_modules.Seq().append", "api_modules.ResNetDown.CONVOLUTION", "torch_points3d.core.common_modules.Seq"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append"], ["def", "__init__", "(", "\n", "self", ",", "down_conv_nn", "=", "[", "]", ",", "kernel_size", "=", "2", ",", "dilation", "=", "1", ",", "dimension", "=", "3", ",", "stride", "=", "2", ",", "N", "=", "1", ",", "block", "=", "\"ResBlock\"", ",", "**", "kwargs", "\n", ")", ":", "\n", "        ", "block", "=", "getattr", "(", "_res_blocks", ",", "block", ")", "\n", "ME", ".", "MinkowskiNetwork", ".", "__init__", "(", "self", ",", "dimension", ")", "\n", "if", "stride", ">", "1", ":", "\n", "            ", "conv1_output", "=", "down_conv_nn", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "conv1_output", "=", "down_conv_nn", "[", "1", "]", "\n", "\n", "", "self", ".", "conv_in", "=", "(", "\n", "Seq", "(", ")", "\n", ".", "append", "(", "\n", "self", ".", "CONVOLUTION", "(", "\n", "in_channels", "=", "down_conv_nn", "[", "0", "]", ",", "\n", "out_channels", "=", "conv1_output", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "dilation", "=", "dilation", ",", "\n", "bias", "=", "False", ",", "\n", "dimension", "=", "dimension", ",", "\n", ")", "\n", ")", "\n", ".", "append", "(", "ME", ".", "MinkowskiBatchNorm", "(", "conv1_output", ")", ")", "\n", ".", "append", "(", "ME", ".", "MinkowskiReLU", "(", ")", ")", "\n", ")", "\n", "\n", "if", "N", ">", "0", ":", "\n", "            ", "self", ".", "blocks", "=", "Seq", "(", ")", "\n", "for", "_", "in", "range", "(", "N", ")", ":", "\n", "                ", "self", ".", "blocks", ".", "append", "(", "block", "(", "conv1_output", ",", "down_conv_nn", "[", "1", "]", ",", "self", ".", "CONVOLUTION", ",", "dimension", "=", "dimension", ")", ")", "\n", "conv1_output", "=", "down_conv_nn", "[", "1", "]", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "blocks", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.api_modules.ResNetDown.forward": [[281, 286], ["api_modules.ResNetDown.conv_in", "api_modules.ResNetDown.blocks"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv_in", "(", "x", ")", "\n", "if", "self", ".", "blocks", ":", "\n", "            ", "out", "=", "self", ".", "blocks", "(", "out", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.api_modules.ResNetUp.__init__": [[295, 304], ["api_modules.ResNetDown.__init__"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["def", "__init__", "(", "self", ",", "up_conv_nn", "=", "[", "]", ",", "kernel_size", "=", "2", ",", "dilation", "=", "1", ",", "dimension", "=", "3", ",", "stride", "=", "2", ",", "N", "=", "1", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "down_conv_nn", "=", "up_conv_nn", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "dilation", "=", "dilation", ",", "\n", "dimension", "=", "dimension", ",", "\n", "stride", "=", "stride", ",", "\n", "N", "=", "N", ",", "\n", "**", "kwargs", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.api_modules.ResNetUp.forward": [[306, 312], ["api_modules.ResNetDown.forward", "MinkowskiEngine.cat"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.forward", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat"], ["", "def", "forward", "(", "self", ",", "x", ",", "skip", ")", ":", "\n", "        ", "if", "skip", "is", "not", "None", ":", "\n", "            ", "inp", "=", "ME", ".", "cat", "(", "x", ",", "skip", ")", "\n", "", "else", ":", "\n", "            ", "inp", "=", "x", "\n", "", "return", "super", "(", ")", ".", "forward", "(", "inp", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.res16unet.BasicBlockBase.__init__": [[14, 35], ["torch.Module.__init__", "common.conv", "common.get_norm", "common.conv", "common.get_norm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiReLU"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_conv.message_passing.BaseResnetBlockDown.conv", "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.common.get_norm", "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_conv.message_passing.BaseResnetBlockDown.conv", "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.common.get_norm"], ["def", "__init__", "(", "\n", "self", ",", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "stride", "=", "1", ",", "\n", "dilation", "=", "1", ",", "\n", "downsample", "=", "None", ",", "\n", "conv_type", "=", "ConvType", ".", "HYPERCUBE", ",", "\n", "bn_momentum", "=", "0.1", ",", "\n", "D", "=", "3", ",", "\n", ")", ":", "\n", "        ", "super", "(", "BasicBlockBase", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "conv", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "dilation", "=", "dilation", ",", "conv_type", "=", "conv_type", ",", "D", "=", "D", ")", "\n", "self", ".", "norm1", "=", "get_norm", "(", "self", ".", "NORM_TYPE", ",", "planes", ",", "D", ",", "bn_momentum", "=", "bn_momentum", ")", "\n", "self", ".", "conv2", "=", "conv", "(", "\n", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "dilation", ",", "bias", "=", "False", ",", "conv_type", "=", "conv_type", ",", "D", "=", "D", "\n", ")", "\n", "self", ".", "norm2", "=", "get_norm", "(", "self", ".", "NORM_TYPE", ",", "planes", ",", "D", ",", "bn_momentum", "=", "bn_momentum", ")", "\n", "self", ".", "relu", "=", "MinkowskiReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.res16unet.BasicBlockBase.forward": [[36, 53], ["res16unet.BasicBlockBase.conv1", "res16unet.BasicBlockBase.norm1", "res16unet.BasicBlockBase.relu", "res16unet.BasicBlockBase.conv2", "res16unet.BasicBlockBase.norm2", "res16unet.BasicBlockBase.relu", "res16unet.BasicBlockBase.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "norm1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "norm2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.res16unet.BottleneckBase.__init__": [[71, 94], ["torch.Module.__init__", "common.conv", "common.get_norm", "common.conv", "common.get_norm", "common.conv", "common.get_norm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiReLU"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_conv.message_passing.BaseResnetBlockDown.conv", "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.common.get_norm", "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_conv.message_passing.BaseResnetBlockDown.conv", "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.common.get_norm", "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_conv.message_passing.BaseResnetBlockDown.conv", "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.common.get_norm"], ["def", "__init__", "(", "\n", "self", ",", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "stride", "=", "1", ",", "\n", "dilation", "=", "1", ",", "\n", "downsample", "=", "None", ",", "\n", "conv_type", "=", "ConvType", ".", "HYPERCUBE", ",", "\n", "bn_momentum", "=", "0.1", ",", "\n", "D", "=", "3", ",", "\n", ")", ":", "\n", "        ", "super", "(", "BottleneckBase", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "D", "=", "D", ")", "\n", "self", ".", "norm1", "=", "get_norm", "(", "self", ".", "NORM_TYPE", ",", "planes", ",", "D", ",", "bn_momentum", "=", "bn_momentum", ")", "\n", "\n", "self", ".", "conv2", "=", "conv", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "dilation", "=", "dilation", ",", "conv_type", "=", "conv_type", ",", "D", "=", "D", ")", "\n", "self", ".", "norm2", "=", "get_norm", "(", "self", ".", "NORM_TYPE", ",", "planes", ",", "D", ",", "bn_momentum", "=", "bn_momentum", ")", "\n", "\n", "self", ".", "conv3", "=", "conv", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ",", "kernel_size", "=", "1", ",", "D", "=", "D", ")", "\n", "self", ".", "norm3", "=", "get_norm", "(", "self", ".", "NORM_TYPE", ",", "planes", "*", "self", ".", "expansion", ",", "D", ",", "bn_momentum", "=", "bn_momentum", ")", "\n", "\n", "self", ".", "relu", "=", "MinkowskiReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.res16unet.BottleneckBase.forward": [[95, 116], ["res16unet.BottleneckBase.conv1", "res16unet.BottleneckBase.norm1", "res16unet.BottleneckBase.relu", "res16unet.BottleneckBase.conv2", "res16unet.BottleneckBase.norm2", "res16unet.BottleneckBase.relu", "res16unet.BottleneckBase.conv3", "res16unet.BottleneckBase.norm3", "res16unet.BottleneckBase.relu", "res16unet.BottleneckBase.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "norm1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "norm2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "norm3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.res16unet.ResNetBase.__init__": [[139, 150], ["MinkowskiEngine.MinkowskiNetwork.__init__", "res16unet.ResNetBase.network_initialization", "res16unet.ResNetBase.weight_initialization"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.res16unet.Res16UNetBase.network_initialization", "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.res16unet.ResNetBase.weight_initialization"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "D", ",", "conv1_kernel_size", "=", "3", ",", "dilations", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ResNetBase", ",", "self", ")", ".", "__init__", "(", "D", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "conv1_kernel_size", "=", "conv1_kernel_size", "\n", "self", ".", "dilations", "=", "dilations", "\n", "assert", "self", ".", "BLOCK", "is", "not", "None", "\n", "assert", "self", ".", "OUT_PIXEL_DIST", ">", "0", "\n", "\n", "self", ".", "network_initialization", "(", "in_channels", ",", "out_channels", ",", "D", ")", "\n", "self", ".", "weight_initialization", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.res16unet.ResNetBase.network_initialization": [[151, 199], ["common.conv", "common.get_norm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiReLU", "common.sum_pool", "res16unet.ResNetBase._make_layer", "res16unet.ResNetBase._make_layer", "res16unet.ResNetBase._make_layer", "res16unet.ResNetBase._make_layer", "common.conv", "res16unet.ResNetBase.network_initialization.space_n_time_m"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.base_conv.message_passing.BaseResnetBlockDown.conv", "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.common.get_norm", "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.common.sum_pool", "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.res16unet.ResNetBase._make_layer", "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.res16unet.ResNetBase._make_layer", "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.res16unet.ResNetBase._make_layer", "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.res16unet.ResNetBase._make_layer", "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_conv.message_passing.BaseResnetBlockDown.conv"], ["", "def", "network_initialization", "(", "self", ",", "in_channels", ",", "out_channels", ",", "D", ")", ":", "\n", "        ", "def", "space_n_time_m", "(", "n", ",", "m", ")", ":", "\n", "            ", "return", "n", "if", "D", "==", "3", "else", "[", "n", ",", "n", ",", "n", ",", "m", "]", "\n", "\n", "", "if", "D", "==", "4", ":", "\n", "            ", "self", ".", "OUT_PIXEL_DIST", "=", "space_n_time_m", "(", "self", ".", "OUT_PIXEL_DIST", ",", "1", ")", "\n", "\n", "", "dilations", "=", "self", ".", "dilations", "\n", "bn_momentum", "=", "1", "\n", "self", ".", "inplanes", "=", "self", ".", "INIT_DIM", "\n", "self", ".", "conv1", "=", "conv", "(", "\n", "in_channels", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "space_n_time_m", "(", "self", ".", "conv1_kernel_size", ",", "1", ")", ",", "stride", "=", "1", ",", "D", "=", "D", "\n", ")", "\n", "\n", "self", ".", "bn1", "=", "get_norm", "(", "NormType", ".", "BATCH_NORM", ",", "self", ".", "inplanes", ",", "D", "=", "self", ".", "D", ",", "bn_momentum", "=", "bn_momentum", ")", "\n", "self", ".", "relu", "=", "ME", ".", "MinkowskiReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "pool", "=", "sum_pool", "(", "kernel_size", "=", "space_n_time_m", "(", "2", ",", "1", ")", ",", "stride", "=", "space_n_time_m", "(", "2", ",", "1", ")", ",", "D", "=", "D", ")", "\n", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "\n", "self", ".", "BLOCK", ",", "\n", "self", ".", "PLANES", "[", "0", "]", ",", "\n", "self", ".", "LAYERS", "[", "0", "]", ",", "\n", "stride", "=", "space_n_time_m", "(", "2", ",", "1", ")", ",", "\n", "dilation", "=", "space_n_time_m", "(", "dilations", "[", "0", "]", ",", "1", ")", ",", "\n", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "\n", "self", ".", "BLOCK", ",", "\n", "self", ".", "PLANES", "[", "1", "]", ",", "\n", "self", ".", "LAYERS", "[", "1", "]", ",", "\n", "stride", "=", "space_n_time_m", "(", "2", ",", "1", ")", ",", "\n", "dilation", "=", "space_n_time_m", "(", "dilations", "[", "1", "]", ",", "1", ")", ",", "\n", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "\n", "self", ".", "BLOCK", ",", "\n", "self", ".", "PLANES", "[", "2", "]", ",", "\n", "self", ".", "LAYERS", "[", "2", "]", ",", "\n", "stride", "=", "space_n_time_m", "(", "2", ",", "1", ")", ",", "\n", "dilation", "=", "space_n_time_m", "(", "dilations", "[", "2", "]", ",", "1", ")", ",", "\n", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "\n", "self", ".", "BLOCK", ",", "\n", "self", ".", "PLANES", "[", "3", "]", ",", "\n", "self", ".", "LAYERS", "[", "3", "]", ",", "\n", "stride", "=", "space_n_time_m", "(", "2", ",", "1", ")", ",", "\n", "dilation", "=", "space_n_time_m", "(", "dilations", "[", "3", "]", ",", "1", ")", ",", "\n", ")", "\n", "\n", "self", ".", "final", "=", "conv", "(", "self", ".", "PLANES", "[", "3", "]", "*", "self", ".", "BLOCK", ".", "expansion", ",", "out_channels", ",", "kernel_size", "=", "1", ",", "bias", "=", "True", ",", "D", "=", "D", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.res16unet.ResNetBase.weight_initialization": [[200, 205], ["res16unet.ResNetBase.modules", "isinstance", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["", "def", "weight_initialization", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "ME", ".", "MinkowskiBatchNorm", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.res16unet.ResNetBase._make_layer": [[206, 230], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "block", "layers.append", "common.conv", "common.get_norm", "block"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_conv.message_passing.BaseResnetBlockDown.conv", "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.common.get_norm"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "norm_type", "=", "NormType", ".", "BATCH_NORM", ",", "bn_momentum", "=", "0.1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ",", "D", "=", "self", ".", "D", ")", ",", "\n", "get_norm", "(", "norm_type", ",", "planes", "*", "block", ".", "expansion", ",", "D", "=", "self", ".", "D", ",", "bn_momentum", "=", "bn_momentum", ")", ",", "\n", ")", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "\n", "block", "(", "\n", "self", ".", "inplanes", ",", "\n", "planes", ",", "\n", "stride", "=", "stride", ",", "\n", "dilation", "=", "dilation", ",", "\n", "downsample", "=", "downsample", ",", "\n", "conv_type", "=", "self", ".", "CONV_TYPE", ",", "\n", "D", "=", "self", ".", "D", ",", "\n", ")", "\n", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "dilation", "=", "dilation", ",", "conv_type", "=", "self", ".", "CONV_TYPE", ",", "D", "=", "self", ".", "D", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.res16unet.ResNetBase.forward": [[231, 244], ["res16unet.ResNetBase.conv1", "res16unet.ResNetBase.bn1", "res16unet.ResNetBase.relu", "res16unet.ResNetBase.pool", "res16unet.ResNetBase.layer1", "res16unet.ResNetBase.layer2", "res16unet.ResNetBase.layer3", "res16unet.ResNetBase.layer4", "res16unet.ResNetBase.final"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "pool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "final", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.res16unet.Res16UNetBase.__init__": [[259, 261], ["res16unet.ResNetBase.__init__"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "D", "=", "3", ",", "conv1_kernel_size", "=", "3", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Res16UNetBase", ",", "self", ")", ".", "__init__", "(", "in_channels", ",", "out_channels", ",", "D", ",", "conv1_kernel_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.res16unet.Res16UNetBase.network_initialization": [[262, 449], ["common.conv", "common.get_norm", "common.conv", "common.get_norm", "res16unet.Res16UNetBase._make_layer", "common.conv", "common.get_norm", "res16unet.Res16UNetBase._make_layer", "common.conv", "common.get_norm", "res16unet.Res16UNetBase._make_layer", "common.conv", "common.get_norm", "res16unet.Res16UNetBase._make_layer", "common.conv_tr", "common.get_norm", "res16unet.Res16UNetBase._make_layer", "common.conv_tr", "common.get_norm", "res16unet.Res16UNetBase._make_layer", "common.conv_tr", "common.get_norm", "res16unet.Res16UNetBase._make_layer", "common.conv_tr", "common.get_norm", "res16unet.Res16UNetBase._make_layer", "common.conv", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiReLU", "res16unet.Res16UNetBase.network_initialization.space_n_time_m"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.base_conv.message_passing.BaseResnetBlockDown.conv", "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.common.get_norm", "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_conv.message_passing.BaseResnetBlockDown.conv", "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.common.get_norm", "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.res16unet.ResNetBase._make_layer", "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_conv.message_passing.BaseResnetBlockDown.conv", "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.common.get_norm", "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.res16unet.ResNetBase._make_layer", "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_conv.message_passing.BaseResnetBlockDown.conv", "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.common.get_norm", "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.res16unet.ResNetBase._make_layer", "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_conv.message_passing.BaseResnetBlockDown.conv", "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.common.get_norm", "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.res16unet.ResNetBase._make_layer", "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.common.conv_tr", "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.common.get_norm", "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.res16unet.ResNetBase._make_layer", "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.common.conv_tr", "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.common.get_norm", "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.res16unet.ResNetBase._make_layer", "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.common.conv_tr", "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.common.get_norm", "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.res16unet.ResNetBase._make_layer", "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.common.conv_tr", "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.common.get_norm", "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.res16unet.ResNetBase._make_layer", "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_conv.message_passing.BaseResnetBlockDown.conv"], ["", "def", "network_initialization", "(", "self", ",", "in_channels", ",", "out_channels", ",", "D", ")", ":", "\n", "# Setup net_metadata", "\n", "        ", "dilations", "=", "self", ".", "DILATIONS", "\n", "bn_momentum", "=", "0.02", "\n", "\n", "def", "space_n_time_m", "(", "n", ",", "m", ")", ":", "\n", "            ", "return", "n", "if", "D", "==", "3", "else", "[", "n", ",", "n", ",", "n", ",", "m", "]", "\n", "\n", "", "if", "D", "==", "4", ":", "\n", "            ", "self", ".", "OUT_PIXEL_DIST", "=", "space_n_time_m", "(", "self", ".", "OUT_PIXEL_DIST", ",", "1", ")", "\n", "\n", "# Output of the first conv concated to conv6", "\n", "", "self", ".", "inplanes", "=", "self", ".", "INIT_DIM", "\n", "self", ".", "conv0p1s1", "=", "conv", "(", "\n", "in_channels", ",", "\n", "self", ".", "inplanes", ",", "\n", "kernel_size", "=", "space_n_time_m", "(", "self", ".", "conv1_kernel_size", ",", "1", ")", ",", "\n", "stride", "=", "1", ",", "\n", "dilation", "=", "1", ",", "\n", "conv_type", "=", "self", ".", "NON_BLOCK_CONV_TYPE", ",", "\n", "D", "=", "D", ",", "\n", ")", "\n", "\n", "self", ".", "bn0", "=", "get_norm", "(", "self", ".", "NORM_TYPE", ",", "self", ".", "inplanes", ",", "D", ",", "bn_momentum", "=", "bn_momentum", ")", "\n", "\n", "self", ".", "conv1p1s2", "=", "conv", "(", "\n", "self", ".", "inplanes", ",", "\n", "self", ".", "inplanes", ",", "\n", "kernel_size", "=", "space_n_time_m", "(", "2", ",", "1", ")", ",", "\n", "stride", "=", "space_n_time_m", "(", "2", ",", "1", ")", ",", "\n", "dilation", "=", "1", ",", "\n", "conv_type", "=", "self", ".", "NON_BLOCK_CONV_TYPE", ",", "\n", "D", "=", "D", ",", "\n", ")", "\n", "self", ".", "bn1", "=", "get_norm", "(", "self", ".", "NORM_TYPE", ",", "self", ".", "inplanes", ",", "D", ",", "bn_momentum", "=", "bn_momentum", ")", "\n", "self", ".", "block1", "=", "self", ".", "_make_layer", "(", "\n", "self", ".", "BLOCK", ",", "\n", "self", ".", "PLANES", "[", "0", "]", ",", "\n", "self", ".", "LAYERS", "[", "0", "]", ",", "\n", "dilation", "=", "dilations", "[", "0", "]", ",", "\n", "norm_type", "=", "self", ".", "NORM_TYPE", ",", "\n", "bn_momentum", "=", "bn_momentum", ",", "\n", ")", "\n", "\n", "self", ".", "conv2p2s2", "=", "conv", "(", "\n", "self", ".", "inplanes", ",", "\n", "self", ".", "inplanes", ",", "\n", "kernel_size", "=", "space_n_time_m", "(", "2", ",", "1", ")", ",", "\n", "stride", "=", "space_n_time_m", "(", "2", ",", "1", ")", ",", "\n", "dilation", "=", "1", ",", "\n", "conv_type", "=", "self", ".", "NON_BLOCK_CONV_TYPE", ",", "\n", "D", "=", "D", ",", "\n", ")", "\n", "self", ".", "bn2", "=", "get_norm", "(", "self", ".", "NORM_TYPE", ",", "self", ".", "inplanes", ",", "D", ",", "bn_momentum", "=", "bn_momentum", ")", "\n", "self", ".", "block2", "=", "self", ".", "_make_layer", "(", "\n", "self", ".", "BLOCK", ",", "\n", "self", ".", "PLANES", "[", "1", "]", ",", "\n", "self", ".", "LAYERS", "[", "1", "]", ",", "\n", "dilation", "=", "dilations", "[", "1", "]", ",", "\n", "norm_type", "=", "self", ".", "NORM_TYPE", ",", "\n", "bn_momentum", "=", "bn_momentum", ",", "\n", ")", "\n", "\n", "self", ".", "conv3p4s2", "=", "conv", "(", "\n", "self", ".", "inplanes", ",", "\n", "self", ".", "inplanes", ",", "\n", "kernel_size", "=", "space_n_time_m", "(", "2", ",", "1", ")", ",", "\n", "stride", "=", "space_n_time_m", "(", "2", ",", "1", ")", ",", "\n", "dilation", "=", "1", ",", "\n", "conv_type", "=", "self", ".", "NON_BLOCK_CONV_TYPE", ",", "\n", "D", "=", "D", ",", "\n", ")", "\n", "self", ".", "bn3", "=", "get_norm", "(", "self", ".", "NORM_TYPE", ",", "self", ".", "inplanes", ",", "D", ",", "bn_momentum", "=", "bn_momentum", ")", "\n", "self", ".", "block3", "=", "self", ".", "_make_layer", "(", "\n", "self", ".", "BLOCK", ",", "\n", "self", ".", "PLANES", "[", "2", "]", ",", "\n", "self", ".", "LAYERS", "[", "2", "]", ",", "\n", "dilation", "=", "dilations", "[", "2", "]", ",", "\n", "norm_type", "=", "self", ".", "NORM_TYPE", ",", "\n", "bn_momentum", "=", "bn_momentum", ",", "\n", ")", "\n", "\n", "self", ".", "conv4p8s2", "=", "conv", "(", "\n", "self", ".", "inplanes", ",", "\n", "self", ".", "inplanes", ",", "\n", "kernel_size", "=", "space_n_time_m", "(", "2", ",", "1", ")", ",", "\n", "stride", "=", "space_n_time_m", "(", "2", ",", "1", ")", ",", "\n", "dilation", "=", "1", ",", "\n", "conv_type", "=", "self", ".", "NON_BLOCK_CONV_TYPE", ",", "\n", "D", "=", "D", ",", "\n", ")", "\n", "self", ".", "bn4", "=", "get_norm", "(", "self", ".", "NORM_TYPE", ",", "self", ".", "inplanes", ",", "D", ",", "bn_momentum", "=", "bn_momentum", ")", "\n", "self", ".", "block4", "=", "self", ".", "_make_layer", "(", "\n", "self", ".", "BLOCK", ",", "\n", "self", ".", "PLANES", "[", "3", "]", ",", "\n", "self", ".", "LAYERS", "[", "3", "]", ",", "\n", "dilation", "=", "dilations", "[", "3", "]", ",", "\n", "norm_type", "=", "self", ".", "NORM_TYPE", ",", "\n", "bn_momentum", "=", "bn_momentum", ",", "\n", ")", "\n", "self", ".", "convtr4p16s2", "=", "conv_tr", "(", "\n", "self", ".", "inplanes", ",", "\n", "self", ".", "PLANES", "[", "4", "]", ",", "\n", "kernel_size", "=", "space_n_time_m", "(", "2", ",", "1", ")", ",", "\n", "upsample_stride", "=", "space_n_time_m", "(", "2", ",", "1", ")", ",", "\n", "dilation", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "conv_type", "=", "self", ".", "NON_BLOCK_CONV_TYPE", ",", "\n", "D", "=", "D", ",", "\n", ")", "\n", "self", ".", "bntr4", "=", "get_norm", "(", "self", ".", "NORM_TYPE", ",", "self", ".", "PLANES", "[", "4", "]", ",", "D", ",", "bn_momentum", "=", "bn_momentum", ")", "\n", "\n", "self", ".", "inplanes", "=", "self", ".", "PLANES", "[", "4", "]", "+", "self", ".", "PLANES", "[", "2", "]", "*", "self", ".", "BLOCK", ".", "expansion", "\n", "self", ".", "block5", "=", "self", ".", "_make_layer", "(", "\n", "self", ".", "BLOCK", ",", "\n", "self", ".", "PLANES", "[", "4", "]", ",", "\n", "self", ".", "LAYERS", "[", "4", "]", ",", "\n", "dilation", "=", "dilations", "[", "4", "]", ",", "\n", "norm_type", "=", "self", ".", "NORM_TYPE", ",", "\n", "bn_momentum", "=", "bn_momentum", ",", "\n", ")", "\n", "self", ".", "convtr5p8s2", "=", "conv_tr", "(", "\n", "self", ".", "inplanes", ",", "\n", "self", ".", "PLANES", "[", "5", "]", ",", "\n", "kernel_size", "=", "space_n_time_m", "(", "2", ",", "1", ")", ",", "\n", "upsample_stride", "=", "space_n_time_m", "(", "2", ",", "1", ")", ",", "\n", "dilation", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "conv_type", "=", "self", ".", "NON_BLOCK_CONV_TYPE", ",", "\n", "D", "=", "D", ",", "\n", ")", "\n", "self", ".", "bntr5", "=", "get_norm", "(", "self", ".", "NORM_TYPE", ",", "self", ".", "PLANES", "[", "5", "]", ",", "D", ",", "bn_momentum", "=", "bn_momentum", ")", "\n", "\n", "self", ".", "inplanes", "=", "self", ".", "PLANES", "[", "5", "]", "+", "self", ".", "PLANES", "[", "1", "]", "*", "self", ".", "BLOCK", ".", "expansion", "\n", "self", ".", "block6", "=", "self", ".", "_make_layer", "(", "\n", "self", ".", "BLOCK", ",", "\n", "self", ".", "PLANES", "[", "5", "]", ",", "\n", "self", ".", "LAYERS", "[", "5", "]", ",", "\n", "dilation", "=", "dilations", "[", "5", "]", ",", "\n", "norm_type", "=", "self", ".", "NORM_TYPE", ",", "\n", "bn_momentum", "=", "bn_momentum", ",", "\n", ")", "\n", "self", ".", "convtr6p4s2", "=", "conv_tr", "(", "\n", "self", ".", "inplanes", ",", "\n", "self", ".", "PLANES", "[", "6", "]", ",", "\n", "kernel_size", "=", "space_n_time_m", "(", "2", ",", "1", ")", ",", "\n", "upsample_stride", "=", "space_n_time_m", "(", "2", ",", "1", ")", ",", "\n", "dilation", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "conv_type", "=", "self", ".", "NON_BLOCK_CONV_TYPE", ",", "\n", "D", "=", "D", ",", "\n", ")", "\n", "self", ".", "bntr6", "=", "get_norm", "(", "self", ".", "NORM_TYPE", ",", "self", ".", "PLANES", "[", "6", "]", ",", "D", ",", "bn_momentum", "=", "bn_momentum", ")", "\n", "\n", "self", ".", "inplanes", "=", "self", ".", "PLANES", "[", "6", "]", "+", "self", ".", "PLANES", "[", "0", "]", "*", "self", ".", "BLOCK", ".", "expansion", "\n", "self", ".", "block7", "=", "self", ".", "_make_layer", "(", "\n", "self", ".", "BLOCK", ",", "\n", "self", ".", "PLANES", "[", "6", "]", ",", "\n", "self", ".", "LAYERS", "[", "6", "]", ",", "\n", "dilation", "=", "dilations", "[", "6", "]", ",", "\n", "norm_type", "=", "self", ".", "NORM_TYPE", ",", "\n", "bn_momentum", "=", "bn_momentum", ",", "\n", ")", "\n", "self", ".", "convtr7p2s2", "=", "conv_tr", "(", "\n", "self", ".", "inplanes", ",", "\n", "self", ".", "PLANES", "[", "7", "]", ",", "\n", "kernel_size", "=", "space_n_time_m", "(", "2", ",", "1", ")", ",", "\n", "upsample_stride", "=", "space_n_time_m", "(", "2", ",", "1", ")", ",", "\n", "dilation", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "conv_type", "=", "self", ".", "NON_BLOCK_CONV_TYPE", ",", "\n", "D", "=", "D", ",", "\n", ")", "\n", "self", ".", "bntr7", "=", "get_norm", "(", "self", ".", "NORM_TYPE", ",", "self", ".", "PLANES", "[", "7", "]", ",", "D", ",", "bn_momentum", "=", "bn_momentum", ")", "\n", "\n", "self", ".", "inplanes", "=", "self", ".", "PLANES", "[", "7", "]", "+", "self", ".", "INIT_DIM", "\n", "self", ".", "block8", "=", "self", ".", "_make_layer", "(", "\n", "self", ".", "BLOCK", ",", "\n", "self", ".", "PLANES", "[", "7", "]", ",", "\n", "self", ".", "LAYERS", "[", "7", "]", ",", "\n", "dilation", "=", "dilations", "[", "7", "]", ",", "\n", "norm_type", "=", "self", ".", "NORM_TYPE", ",", "\n", "bn_momentum", "=", "bn_momentum", ",", "\n", ")", "\n", "\n", "self", ".", "final", "=", "conv", "(", "self", ".", "PLANES", "[", "7", "]", ",", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "True", ",", "D", "=", "D", ")", "\n", "self", ".", "relu", "=", "MinkowskiReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.res16unet.Res16UNetBase.forward": [[450, 509], ["res16unet.Res16UNetBase.conv0p1s1", "res16unet.Res16UNetBase.bn0", "res16unet.Res16UNetBase.relu", "res16unet.Res16UNetBase.conv1p1s2", "res16unet.Res16UNetBase.bn1", "res16unet.Res16UNetBase.relu", "res16unet.Res16UNetBase.block1", "res16unet.Res16UNetBase.conv2p2s2", "res16unet.Res16UNetBase.bn2", "res16unet.Res16UNetBase.relu", "res16unet.Res16UNetBase.block2", "res16unet.Res16UNetBase.conv3p4s2", "res16unet.Res16UNetBase.bn3", "res16unet.Res16UNetBase.relu", "res16unet.Res16UNetBase.block3", "res16unet.Res16UNetBase.conv4p8s2", "res16unet.Res16UNetBase.bn4", "res16unet.Res16UNetBase.relu", "res16unet.Res16UNetBase.block4", "res16unet.Res16UNetBase.convtr4p16s2", "res16unet.Res16UNetBase.bntr4", "res16unet.Res16UNetBase.relu", "MinkowskiEngine.cat", "MinkowskiEngine.cat", "res16unet.Res16UNetBase.block5", "res16unet.Res16UNetBase.convtr5p8s2", "res16unet.Res16UNetBase.bntr5", "res16unet.Res16UNetBase.relu", "MinkowskiEngine.cat", "MinkowskiEngine.cat", "res16unet.Res16UNetBase.block6", "res16unet.Res16UNetBase.convtr6p4s2", "res16unet.Res16UNetBase.bntr6", "res16unet.Res16UNetBase.relu", "MinkowskiEngine.cat", "MinkowskiEngine.cat", "res16unet.Res16UNetBase.block7", "res16unet.Res16UNetBase.convtr7p2s2", "res16unet.Res16UNetBase.bntr7", "res16unet.Res16UNetBase.relu", "MinkowskiEngine.cat", "MinkowskiEngine.cat", "res16unet.Res16UNetBase.block8", "res16unet.Res16UNetBase.final"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv0p1s1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn0", "(", "out", ")", "\n", "out_p1", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv1p1s2", "(", "out_p1", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out_b1p2", "=", "self", ".", "block1", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2p2s2", "(", "out_b1p2", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out_b2p4", "=", "self", ".", "block2", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3p4s2", "(", "out_b2p4", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out_b3p8", "=", "self", ".", "block3", "(", "out", ")", "\n", "\n", "# pixel_dist=16", "\n", "out", "=", "self", ".", "conv4p8s2", "(", "out_b3p8", ")", "\n", "out", "=", "self", ".", "bn4", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "block4", "(", "out", ")", "\n", "\n", "# pixel_dist=8", "\n", "out", "=", "self", ".", "convtr4p16s2", "(", "out", ")", "\n", "out", "=", "self", ".", "bntr4", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "me", ".", "cat", "(", "out", ",", "out_b3p8", ")", "\n", "out", "=", "self", ".", "block5", "(", "out", ")", "\n", "\n", "# pixel_dist=4", "\n", "out", "=", "self", ".", "convtr5p8s2", "(", "out", ")", "\n", "out", "=", "self", ".", "bntr5", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "me", ".", "cat", "(", "out", ",", "out_b2p4", ")", "\n", "out", "=", "self", ".", "block6", "(", "out", ")", "\n", "\n", "# pixel_dist=2", "\n", "out", "=", "self", ".", "convtr6p4s2", "(", "out", ")", "\n", "out", "=", "self", ".", "bntr6", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "me", ".", "cat", "(", "out", ",", "out_b1p2", ")", "\n", "out", "=", "self", ".", "block7", "(", "out", ")", "\n", "\n", "# pixel_dist=1", "\n", "out", "=", "self", ".", "convtr7p2s2", "(", "out", ")", "\n", "out", "=", "self", ".", "bntr7", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "me", ".", "cat", "(", "out", ",", "out_p1", ")", "\n", "out", "=", "self", ".", "block8", "(", "out", ")", "\n", "\n", "return", "self", ".", "final", "(", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.res16unet.STRes16UNetBase.__init__": [[596, 598], ["res16unet.Res16UNetBase.__init__"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "config", ",", "D", "=", "4", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "STRes16UNetBase", ",", "self", ")", ".", "__init__", "(", "in_channels", ",", "out_channels", ",", "config", ",", "D", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.MinkowskiEngine.res16unet.get_block": [[636, 651], ["res16unet.BasicBlock", "res16unet.BasicBlockIN", "ValueError"], "function", ["None"], ["", "def", "get_block", "(", "norm_type", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "downsample", "=", "None", ",", "bn_momentum", "=", "0.1", ",", "D", "=", "3", ")", ":", "\n", "    ", "if", "norm_type", "==", "NormType", ".", "BATCH_NORM", ":", "\n", "        ", "return", "BasicBlock", "(", "\n", "inplanes", "=", "inplanes", ",", "\n", "planes", "=", "planes", ",", "\n", "stride", "=", "stride", ",", "\n", "dilation", "=", "dilation", ",", "\n", "downsample", "=", "downsample", ",", "\n", "bn_momentum", "=", "bn_momentum", ",", "\n", "D", "=", "D", ",", "\n", ")", "\n", "", "elif", "norm_type", "==", "NormType", ".", "INSTANCE_NORM", ":", "\n", "        ", "return", "BasicBlockIN", "(", "inplanes", ",", "planes", ",", "stride", ",", "dilation", ",", "downsample", ",", "bn_momentum", ",", "D", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "f\"Type {norm_type}, not defined\"", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.SparseConv3d.modules.ResBlock.__init__": [[26, 48], ["super().__init__", "torch_points3d.core.common_modules.Seq().append().append().append().append().append().append", "torch_points3d.ReLU", "torch_points3d.core.common_modules.Seq().append().append", "torch_points3d.core.common_modules.Seq().append().append().append().append().append", "torch_points3d.BatchNorm", "torch_points3d.BatchNorm", "torch_points3d.core.common_modules.Seq().append", "torch_points3d.core.common_modules.Seq().append().append().append().append", "torch_points3d.Conv3d", "convolution", "torch_points3d.core.common_modules.Seq", "torch_points3d.core.common_modules.Seq().append().append().append", "torch_points3d.ReLU", "torch_points3d.core.common_modules.Seq().append().append", "torch_points3d.BatchNorm", "torch_points3d.core.common_modules.Seq().append", "convolution", "torch_points3d.core.common_modules.Seq"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.SparseConv3d.modules.ResBlock.forward": [[49, 56], ["modules.ResBlock.block", "modules.ResBlock.downsample"], "methods", ["None"], ["\n", "\n", "def", "__init__", "(", "\n", "self", ",", "in_channels", ",", "out_channels", ",", "dim", ",", "kernel_size", ",", "hidden_channels", "=", "None", ",", "dilation", "=", "1", ",", "bias", "=", "True", ",", "**", "kwargs", ",", "\n", ")", ":", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.SparseConv3d.modules.BottleneckBlock.__init__": [[63, 90], ["super().__init__", "torch_points3d.core.common_modules.Seq().append().append().append().append().append().append().append().append().append", "torch_points3d.ReLU", "torch_points3d.core.common_modules.Seq().append().append", "torch_points3d.core.common_modules.Seq().append().append().append().append().append().append().append().append", "torch_points3d.BatchNorm", "torch_points3d.BatchNorm", "torch_points3d.core.common_modules.Seq().append", "torch_points3d.core.common_modules.Seq().append().append().append().append().append().append().append", "convolution", "torch_points3d.Conv3d", "torch_points3d.core.common_modules.Seq", "torch_points3d.core.common_modules.Seq().append().append().append().append().append().append", "torch_points3d.ReLU", "torch_points3d.core.common_modules.Seq().append().append().append().append().append", "torch_points3d.BatchNorm", "torch_points3d.core.common_modules.Seq().append().append().append().append", "convolution", "torch_points3d.core.common_modules.Seq().append().append().append", "torch_points3d.ReLU", "torch_points3d.core.common_modules.Seq().append().append", "torch_points3d.BatchNorm", "torch_points3d.core.common_modules.Seq().append", "torch_points3d.Conv3d", "torch_points3d.core.common_modules.Seq"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append"], ["self", ".", "hidden_channels", "=", "hidden_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "dilation", "=", "dilation", "\n", "self", ".", "kwargs", "=", "kwargs", "\n", "\n", "C_in", ",", "C_delta", ",", "C_out", "=", "in_channels", ",", "hidden_channels", ",", "out_channels", "\n", "D", ",", "K", "=", "dim", ",", "kernel_size", "\n", "\n", "self", ".", "mlp1", "=", "S", "(", "\n", "L", "(", "dim", ",", "C_delta", ")", ",", "ELU", "(", ")", ",", "BN", "(", "C_delta", ")", ",", "L", "(", "C_delta", ",", "C_delta", ")", ",", "ELU", "(", ")", ",", "BN", "(", "C_delta", ")", ",", "Reshape", "(", "-", "1", ",", "K", ",", "C_delta", ")", ",", "\n", ")", "\n", "\n", "self", ".", "mlp2", "=", "S", "(", "\n", "L", "(", "D", "*", "K", ",", "K", "**", "2", ")", ",", "\n", "ELU", "(", ")", ",", "\n", "BN", "(", "K", "**", "2", ")", ",", "\n", "Reshape", "(", "-", "1", ",", "K", ",", "K", ")", ",", "\n", "Conv1d", "(", "K", ",", "K", "**", "2", ",", "K", ",", "groups", "=", "K", ")", ",", "\n", "ELU", "(", ")", ",", "\n", "BN", "(", "K", "**", "2", ")", ",", "\n", "Reshape", "(", "-", "1", ",", "K", ",", "K", ")", ",", "\n", "Conv1d", "(", "K", ",", "K", "**", "2", ",", "K", ",", "groups", "=", "K", ")", ",", "\n", "BN", "(", "K", "**", "2", ")", ",", "\n", "Reshape", "(", "-", "1", ",", "K", ",", "K", ")", ",", "\n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.SparseConv3d.modules.BottleneckBlock.forward": [[91, 98], ["modules.BottleneckBlock.block", "modules.BottleneckBlock.downsample"], "methods", ["None"], ["C_in", "=", "C_in", "+", "C_delta", "\n", "depth_multiplier", "=", "int", "(", "ceil", "(", "C_out", "/", "C_in", ")", ")", "\n", "self", ".", "conv", "=", "S", "(", "\n", "Conv1d", "(", "C_in", ",", "C_in", "*", "depth_multiplier", ",", "K", ",", "groups", "=", "C_in", ")", ",", "\n", "Reshape", "(", "-", "1", ",", "C_in", "*", "depth_multiplier", ")", ",", "\n", "L", "(", "C_in", "*", "depth_multiplier", ",", "C_out", ",", "bias", "=", "bias", ")", ",", "\n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.SparseConv3d.modules.ResNetDown.__init__": [[114, 150], ["super().__init__", "getattr", "modules.ResNetDown._parse_conv_nn", "getattr", "torch_points3d.core.common_modules.Seq().append().append().append", "torch_points3d.ReLU", "torch_points3d.core.common_modules.Seq", "range", "torch_points3d.core.common_modules.Seq().append().append", "modules.ResNetDown.blocks.append", "torch_points3d.BatchNorm", "getattr.", "torch_points3d.core.common_modules.Seq().append", "getattr.", "torch_points3d.core.common_modules.Seq"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.SparseConv3d.modules.ResNetUp._parse_conv_nn", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append"], ["(", "N", ",", "D", ")", ",", "K", "=", "posTo", ".", "size", "(", ")", ",", "self", ".", "kernel_size", "\n", "\n", "idxFrom", ",", "idxTo", "=", "edge_index", "\n", "\n", "relPos", "=", "posTo", "[", "idxTo", "]", "-", "posFrom", "[", "idxFrom", "]", "\n", "\n", "x_star", "=", "self", ".", "mlp1", "(", "relPos", ")", "\n", "# x_star = self.mlp1(relPos.view(len(row), D))", "\n", "if", "x", "is", "not", "None", ":", "\n", "            ", "x", "=", "x", ".", "unsqueeze", "(", "-", "1", ")", "if", "x", ".", "dim", "(", ")", "==", "1", "else", "x", "\n", "x", "=", "x", "[", "idxFrom", "]", ".", "view", "(", "N", ",", "K", ",", "self", ".", "in_channels", ")", "\n", "x_star", "=", "torch", ".", "cat", "(", "[", "x_star", ",", "x", "]", ",", "dim", "=", "-", "1", ")", "\n", "", "x_star", "=", "x_star", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "x_star", "=", "x_star", ".", "view", "(", "N", ",", "self", ".", "in_channels", "+", "self", ".", "hidden_channels", ",", "K", ",", "1", ")", "\n", "\n", "transform_matrix", "=", "self", ".", "mlp2", "(", "relPos", ".", "view", "(", "N", ",", "K", "*", "D", ")", ")", "\n", "transform_matrix", "=", "transform_matrix", ".", "view", "(", "N", ",", "1", ",", "K", ",", "K", ")", "\n", "\n", "x_transformed", "=", "torch", ".", "matmul", "(", "transform_matrix", ",", "x_star", ")", "\n", "x_transformed", "=", "x_transformed", ".", "view", "(", "N", ",", "-", "1", ",", "K", ")", "\n", "\n", "out", "=", "self", ".", "conv", "(", "x_transformed", ")", "\n", "\n", "return", "out", "\n", "\n", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"{}({}, {})\"", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "in_channels", ",", "self", ".", "out_channels", ")", "\n", "\n", "\n", "", "", "class", "PointCNNConvDown", "(", "BaseConvolutionDown", ")", ":", "\n", "    ", "def", "__init__", "(", "\n", "self", ",", "inN", "=", "None", ",", "outN", "=", "None", ",", "K", "=", "None", ",", "D", "=", "None", ",", "C1", "=", "None", ",", "C2", "=", "None", ",", "hidden_channel", "=", "None", ",", "*", "args", ",", "**", "kwargs", ",", "\n", ")", ":", "\n", "        ", "super", "(", "PointCNNConvDown", ",", "self", ")", ".", "__init__", "(", "FPSSampler", "(", "outN", "/", "inN", ")", ",", "DilatedKNNNeighbourFinder", "(", "K", ",", "D", ")", ")", "\n", "\n", "self", ".", "_conv", "=", "XConv", "(", "C1", ",", "C2", ",", "3", ",", "K", ",", "hidden_channels", "=", "hidden_channel", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.SparseConv3d.modules.ResNetDown._parse_conv_nn": [[151, 161], ["torch_points3d.utils.config.is_list", "len", "len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.config.is_list", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "def", "conv", "(", "self", ",", "x", ",", "pos", ",", "edge_index", ",", "batch", ")", ":", "\n", "        ", "return", "self", ".", "_conv", ".", "forward", "(", "x", ",", "pos", ",", "edge_index", ")", "\n", "\n", "\n", "", "", "class", "PointCNNConvUp", "(", "BaseConvolutionUp", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "K", "=", "None", ",", "D", "=", "None", ",", "C1", "=", "None", ",", "C2", "=", "None", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "PointCNNConvUp", ",", "self", ")", ".", "__init__", "(", "DilatedKNNNeighbourFinder", "(", "K", ",", "D", ")", ")", "\n", "\n", "self", ".", "_conv", "=", "XConv", "(", "C1", ",", "C2", ",", "3", ",", "K", ")", "\n", "\n", "", "def", "conv", "(", "self", ",", "x", ",", "pos", ",", "pos_skip", ",", "batch", ",", "batch_skip", ",", "edge_index", ")", ":", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.SparseConv3d.modules.ResNetDown.forward": [[162, 167], ["modules.ResNetDown.conv_in", "modules.ResNetDown.blocks"], "methods", ["None"], ["        ", "return", "self", ".", "_conv", ".", "forward", "(", "x", ",", "(", "pos", ",", "pos_skip", ")", ",", "edge_index", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.SparseConv3d.modules.ResNetUp.__init__": [[176, 182], ["modules.ResNetDown.__init__"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.SparseConv3d.modules.ResNetUp._parse_conv_nn": [[183, 208], ["torch_points3d.utils.config.is_list", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.config.is_list", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.SparseConv3d.modules.ResNetUp.forward": [[209, 221], ["modules.ResNetUp.conv_in", "modules.ResNetUp.conv_in", "modules.ResNetUp.blocks", "torch_points3d.cat", "torch_points3d.cat"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.minkowski.Conv3d.__init__": [[6, 23], ["MinkowskiEngine.MinkowskiConvolution.__init__"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["from", "torch_geometric", ".", "data", "import", "Batch", "\n", "\n", "from", "torch_points3d", ".", "applications", ".", "modelfactory", "import", "ModelFactory", "\n", "from", "torch_points3d", ".", "modules", ".", "MinkowskiEngine", ".", "api_modules", "import", "*", "\n", "from", "torch_points3d", ".", "core", ".", "base_conv", ".", "message_passing", "import", "*", "\n", "from", "torch_points3d", ".", "core", ".", "base_conv", ".", "partial_dense", "import", "*", "\n", "from", "torch_points3d", ".", "models", ".", "base_architectures", ".", "unet", "import", "UnwrappedUnetBasedModel", "\n", "from", "torch_points3d", ".", "core", ".", "common_modules", ".", "base_modules", "import", "MLP", "\n", "\n", "from", ".", "utils", "import", "extract_output_nc", "\n", "\n", "\n", "CUR_FILE", "=", "os", ".", "path", ".", "realpath", "(", "__file__", ")", "\n", "DIR_PATH", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "realpath", "(", "__file__", ")", ")", "\n", "PATH_TO_CONFIG", "=", "os", ".", "path", ".", "join", "(", "DIR_PATH", ",", "\"conf/sparseconv3d\"", ")", "\n", "\n", "log", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.minkowski.Conv3dTranspose.__init__": [[27, 44], ["MinkowskiEngine.MinkowskiConvolutionTranspose.__init__"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], [")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.minkowski.BatchNorm.__repr__": [[48, 50], ["minkowski.BatchNorm.bn.__repr__"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.schedulers.lr_schedulers.LRScheduler.__repr__"], ["log", ".", "warning", "(", "\n", "\"Minkowski API is deprecated in favor of the SparseConv3d API. It should be a simple drop in replacement (no change to the API).\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.minkowski.ReLU.__init__": [[53, 55], ["MinkowskiEngine.MinkowskiReLU.__init__"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], [")", "\n", "return", "factory", ".", "build", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.minkowski.cat": [[57, 59], ["MinkowskiEngine.cat"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat"], ["", "class", "MinkowskiFactory", "(", "ModelFactory", ")", ":", "\n", "    ", "def", "_build_unet", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_config", ":", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.minkowski.SparseTensor": [[61, 66], ["torch.device", "torch.cat", "MinkowskiEngine.SparseTensor", "batch.unsqueeze.dim", "batch.unsqueeze.unsqueeze", "batch.unsqueeze.int", "coordinates.int"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.device", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.SparseTensor"], ["", "else", ":", "\n", "            ", "path_to_model", "=", "os", ".", "path", ".", "join", "(", "PATH_TO_CONFIG", ",", "\"unet_{}.yaml\"", ".", "format", "(", "self", ".", "num_layers", ")", ")", "\n", "model_config", "=", "OmegaConf", ".", "load", "(", "path_to_model", ")", "\n", "", "ModelFactory", ".", "resolve_model", "(", "model_config", ",", "self", ".", "num_features", ",", "self", ".", "_kwargs", ")", "\n", "modules_lib", "=", "sys", ".", "modules", "[", "__name__", "]", "\n", "return", "MinkowskiUnet", "(", "model_config", ",", "None", ",", "None", ",", "modules_lib", ",", "**", "self", ".", "kwargs", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.__init__.backend_valid": [[25, 27], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.__init__.get_backend": [[30, 32], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.__init__.set_backend": [[33, 53], ["__init__.backend_valid", "importlib.import_module", "exec", "log.exception"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.__init__.backend_valid"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.Conv3d.__init__": [[7, 18], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "in_channels", ":", "int", ",", "\n", "out_channels", ":", "int", ",", "\n", "kernel_size", ":", "int", "=", "3", ",", "\n", "stride", ":", "int", "=", "1", ",", "\n", "dilation", ":", "int", "=", "1", ",", "\n", "bias", ":", "bool", "=", "False", ",", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "dilation", "=", "dilation", ",", "bias", "=", "bias", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.Conv3dTranspose.__init__": [[22, 40], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "in_channels", ":", "int", ",", "\n", "out_channels", ":", "int", ",", "\n", "kernel_size", ":", "int", "=", "3", ",", "\n", "stride", ":", "int", "=", "1", ",", "\n", "dilation", ":", "int", "=", "1", ",", "\n", "bias", ":", "bool", "=", "False", ",", "\n", "transpose", ":", "bool", "=", "False", ",", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "dilation", "=", "dilation", ",", "\n", "bias", "=", "bias", ",", "\n", "transpose", "=", "True", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.BatchNorm.__init__": [[44, 47], ["super().__init__", "torchsparse.nn.BatchNorm", "torchsparse.nn.BatchNorm"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ":", "int", ",", "*", ",", "eps", ":", "float", "=", "1e-5", ",", "momentum", ":", "float", "=", "0.1", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn", "=", "TS", ".", "nn", ".", "BatchNorm", "(", "num_features", "=", "num_features", ",", "eps", "=", "eps", ",", "momentum", "=", "momentum", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.BatchNorm.forward": [[48, 50], ["torchsparse.BatchNorm.bn", "torchsparse.BatchNorm.bn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "feats", ")", ":", "\n", "        ", "return", "self", ".", "bn", "(", "feats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.BatchNorm.__repr__": [[51, 53], ["torchsparse.BatchNorm.bn.__repr__", "torchsparse.BatchNorm.bn.__repr__"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.schedulers.lr_schedulers.LRScheduler.__repr__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.schedulers.lr_schedulers.LRScheduler.__repr__"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "bn", ".", "__repr__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.ReLU.__init__": [[56, 58], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplace", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "inplace", "=", "inplace", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat": [[60, 62], ["torchsparse.cat"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat"], ["", "", "def", "cat", "(", "*", "args", ",", "dim", "=", "1", ")", ":", "\n", "    ", "return", "TS", ".", "cat", "(", "args", ",", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.SparseTensor": [[64, 69], ["torch.device", "torch.cat", "torchsparse.SparseTensor().to", "batch.unsqueeze.dim", "batch.unsqueeze.unsqueeze", "coordinates.int", "batch.unsqueeze.int", "torchsparse.SparseTensor"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.device", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.SparseTensor"], ["", "def", "SparseTensor", "(", "feats", ",", "coordinates", ",", "batch", ",", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", ")", ":", "\n", "    ", "if", "batch", ".", "dim", "(", ")", "==", "1", ":", "\n", "        ", "batch", "=", "batch", ".", "unsqueeze", "(", "-", "1", ")", "\n", "", "coords", "=", "torch", ".", "cat", "(", "[", "coordinates", ".", "int", "(", ")", ",", "batch", ".", "int", "(", ")", "]", ",", "-", "1", ")", "\n", "return", "TS", ".", "SparseTensor", "(", "feats", ",", "coords", ")", ".", "to", "(", "device", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.model_interface.CheckpointInterface.schedulers": [[12, 15], ["None"], "methods", ["None"], ["", "@", "schedulers", ".", "setter", "\n", "def", "schedulers", "(", "self", ",", "schedulers", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.model_interface.CheckpointInterface.optimizer": [[20, 23], ["None"], "methods", ["None"], ["", "@", "optimizer", ".", "setter", "\n", "def", "optimizer", "(", "self", ",", "optimizer", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.model_interface.CheckpointInterface.state_dict": [[24, 27], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "state_dict", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.model_interface.CheckpointInterface.load_state_dict": [[28, 31], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "load_state_dict", "(", "self", ",", "state", ",", "strict", "=", "False", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.model_interface.DatasetInterface.conv_type": [[34, 37], ["None"], "methods", ["None"], ["    ", "@", "abstractproperty", "\n", "def", "conv_type", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.model_interface.DatasetInterface.get_spatial_ops": [[38, 40], ["None"], "methods", ["None"], ["", "def", "get_spatial_ops", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.model_interface.TrackerInterface.conv_type": [[43, 47], ["None"], "methods", ["None"], ["    ", "@", "property", "\n", "@", "abstractmethod", "\n", "def", "conv_type", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.model_interface.TrackerInterface.get_labels": [[48, 52], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "get_labels", "(", "self", ")", ":", "\n", "        ", "\"\"\" returns a trensor of size ``[N_points]`` where each value is the label of a point\n        \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.model_interface.TrackerInterface.get_batch": [[53, 57], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "get_batch", "(", "self", ")", ":", "\n", "        ", "\"\"\" returns a trensor of size ``[N_points]`` where each value is the batch index of a point\n        \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.model_interface.TrackerInterface.get_output": [[58, 63], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "get_output", "(", "self", ")", ":", "\n", "        ", "\"\"\" returns a trensor of size ``[N_points,...]`` where each value is the output\n        of the network for a point (output of the last layer in general)\n        \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.model_interface.TrackerInterface.get_input": [[64, 68], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "get_input", "(", "self", ")", ":", "\n", "        ", "\"\"\" returns the last input that was given to the model or raises error\n        \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.model_interface.TrackerInterface.get_current_losses": [[69, 72], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "get_current_losses", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return traning losses / errors. train.py will print out these errors on console\"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.model_interface.TrackerInterface.device": [[73, 77], ["None"], "methods", ["None"], ["", "@", "abstractproperty", "\n", "def", "device", "(", "self", ")", ":", "\n", "        ", "\"\"\" Returns the device onto which the model leaves (cpu or gpu)\n        \"\"\"", "\n", "", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.model_factory.instantiate_model": [[8, 46], ["config.get", "getattr", "torch_points3d.utils.model_building_utils.model_definition_resolver.resolve_model", "getattr", "getattr.split", "importlib.import_module", "importlib.import_module.__dict__.items", "model_cls", "Exception", "NotImplementedError", "config.get.keys", "name.lower", "class_name.lower", "list"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.applications.modelfactory.ModelFactory.resolve_model", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.split", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.mock.MockDatasetConfig.keys"], ["def", "instantiate_model", "(", "config", ",", "dataset", ")", "->", "BaseModel", ":", "\n", "    ", "\"\"\" Creates a model given a datset and a training config. The config should contain the following:\n    - config.data.task: task that will be evaluated\n    - config.model_name: model to instantiate\n    - config.models: All models available\n    \"\"\"", "\n", "\n", "# Get task and model_name", "\n", "task", "=", "config", ".", "data", ".", "task", "\n", "tested_model_name", "=", "config", ".", "model_name", "\n", "\n", "# Find configs", "\n", "models", "=", "config", ".", "get", "(", "'models'", ")", "\n", "model_config", "=", "getattr", "(", "models", ",", "tested_model_name", ",", "None", ")", "\n", "if", "model_config", "is", "None", ":", "\n", "        ", "models_keys", "=", "models", ".", "keys", "(", ")", "if", "models", "is", "not", "None", "else", "\"\"", "\n", "raise", "Exception", "(", "\"The model_name {} isn t within {}\"", ".", "format", "(", "tested_model_name", ",", "list", "(", "models_keys", ")", ")", ")", "\n", "", "resolve_model", "(", "model_config", ",", "dataset", ",", "task", ")", "\n", "\n", "model_class", "=", "getattr", "(", "model_config", ",", "\"class\"", ")", "\n", "model_paths", "=", "model_class", ".", "split", "(", "\".\"", ")", "\n", "module", "=", "\".\"", ".", "join", "(", "model_paths", "[", ":", "-", "1", "]", ")", "\n", "class_name", "=", "model_paths", "[", "-", "1", "]", "\n", "model_module", "=", "\".\"", ".", "join", "(", "[", "\"torch_points3d.models\"", ",", "task", ",", "module", "]", ")", "\n", "modellib", "=", "importlib", ".", "import_module", "(", "model_module", ")", "\n", "\n", "model_cls", "=", "None", "\n", "for", "name", ",", "cls", "in", "modellib", ".", "__dict__", ".", "items", "(", ")", ":", "\n", "        ", "if", "name", ".", "lower", "(", ")", "==", "class_name", ".", "lower", "(", ")", ":", "\n", "            ", "model_cls", "=", "cls", "\n", "\n", "", "", "if", "model_cls", "is", "None", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\n", "\"In %s.py, there should be a subclass of BaseDataset with class name that matches %s in lowercase.\"", "\n", "%", "(", "model_module", ",", "class_name", ")", "\n", ")", "\n", "", "model", "=", "model_cls", "(", "model_config", ",", "\"dummy\"", ",", "dataset", ",", "modellib", ")", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.__init__": [[36, 70], ["super().__init__", "hasattr"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "\"\"\"Initialize the BaseModel class.\n        Parameters:\n            opt (Option class)-- stores all the experiment flags; needs to be a subclass of BaseOptions\n        When creating your custom class, you need to implement your own initialization.\n        In this fucntion, you should first call <BaseModel.__init__(self, opt)>\n        Then, you need to define four lists:\n            -- self.loss_names (str list):          specify the training losses that you want to plot and save.\n            -- self.model_names (str list):         specify the images that you want to display and save.\n            -- self.visual_names (str list):        define networks used in our training.\n            -- self.optimizers (optimizer list):    define and initialize optimizers. You can define one optimizer for each network. If two networks are updated at the same time, you can use itertools.chain to group them. See cycle_gan_model.py for an example.\n        \"\"\"", "\n", "super", "(", "BaseModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "loss_names", "=", "[", "]", "\n", "self", ".", "visual_names", "=", "[", "]", "\n", "self", ".", "output", "=", "None", "\n", "self", ".", "_conv_type", "=", "opt", ".", "conv_type", "if", "hasattr", "(", "opt", ",", "'conv_type'", ")", "else", "None", "# Update to OmegaConv 2.0", "\n", "self", ".", "_optimizer", ":", "Optional", "[", "Optimizer", "]", "=", "None", "\n", "self", ".", "_lr_scheduler", ":", "Optimizer", "[", "_LRScheduler", "]", "=", "None", "\n", "self", ".", "_bn_scheduler", "=", "None", "\n", "self", ".", "_spatial_ops_dict", ":", "Dict", "=", "{", "}", "\n", "self", ".", "_num_epochs", "=", "0", "\n", "self", ".", "_num_batches", "=", "0", "\n", "self", ".", "_num_samples", "=", "-", "1", "\n", "self", ".", "_schedulers", "=", "{", "}", "\n", "self", ".", "_accumulated_gradient_step", "=", "None", "\n", "self", ".", "_grad_clip", "=", "-", "1", "\n", "self", ".", "_grad_scale", "=", "None", "\n", "self", ".", "_supports_mixed", "=", "False", "\n", "self", ".", "_enable_mixed", "=", "False", "\n", "self", ".", "_update_lr_scheduler_on", "=", "\"on_epoch\"", "\n", "self", ".", "_update_bn_scheduler_on", "=", "\"on_epoch\"", "\n", "self", ".", "_modalities", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.schedulers": [[75, 81], ["schedulers.items", "setattr"], "methods", ["None"], ["", "@", "schedulers", ".", "setter", "\n", "def", "schedulers", "(", "self", ",", "schedulers", ")", ":", "\n", "        ", "if", "schedulers", ":", "\n", "            ", "self", ".", "_schedulers", "=", "schedulers", "\n", "for", "scheduler_name", ",", "scheduler", "in", "schedulers", ".", "items", "(", ")", ":", "\n", "                ", "setattr", "(", "self", ",", "\"_{}\"", ".", "format", "(", "scheduler_name", ")", ",", "scheduler", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel._add_scheduler": [[82, 85], ["setattr"], "methods", ["None"], ["", "", "", "def", "_add_scheduler", "(", "self", ",", "scheduler_name", ",", "scheduler", ")", ":", "\n", "        ", "setattr", "(", "self", ",", "\"_{}\"", ".", "format", "(", "scheduler_name", ")", ",", "scheduler", ")", "\n", "self", ".", "_schedulers", "[", "scheduler_name", "]", "=", "scheduler", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.optimizer": [[90, 93], ["None"], "methods", ["None"], ["", "@", "optimizer", ".", "setter", "\n", "def", "optimizer", "(", "self", ",", "optimizer", ")", ":", "\n", "        ", "self", ".", "_optimizer", "=", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.num_epochs": [[98, 101], ["None"], "methods", ["None"], ["", "@", "num_epochs", ".", "setter", "\n", "def", "num_epochs", "(", "self", ",", "num_epochs", ")", ":", "\n", "        ", "self", ".", "_num_epochs", "=", "num_epochs", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.num_batches": [[106, 109], ["None"], "methods", ["None"], ["", "@", "num_batches", ".", "setter", "\n", "def", "num_batches", "(", "self", ",", "num_batches", ")", ":", "\n", "        ", "self", ".", "_num_batches", "=", "num_batches", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.num_samples": [[114, 117], ["None"], "methods", ["None"], ["", "@", "num_samples", ".", "setter", "\n", "def", "num_samples", "(", "self", ",", "num_samples", ")", ":", "\n", "        ", "self", ".", "_num_samples", "=", "num_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.learning_rate": [[118, 122], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "learning_rate", "(", "self", ")", ":", "\n", "        ", "for", "param_group", "in", "self", ".", "optimizer", ".", "param_groups", ":", "\n", "            ", "return", "param_group", "[", "\"lr\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.device": [[123, 126], ["next", "base_model.BaseModel.parameters"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "device", "(", "self", ")", ":", "\n", "        ", "return", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.conv_type": [[131, 134], ["None"], "methods", ["None"], ["", "@", "conv_type", ".", "setter", "\n", "def", "conv_type", "(", "self", ",", "conv_type", ")", ":", "\n", "        ", "self", ".", "_conv_type", "=", "conv_type", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.is_mixed_precision": [[135, 137], ["None"], "methods", ["None"], ["", "def", "is_mixed_precision", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_supports_mixed", "and", "self", ".", "_enable_mixed", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.is_multimodal": [[138, 141], ["len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "@", "property", "\n", "def", "is_multimodal", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_modalities", ")", ">", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.modalities": [[142, 145], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "modalities", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_modalities", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.set_input": [[146, 152], ["None"], "methods", ["None"], ["", "def", "set_input", "(", "self", ",", "input", ",", "device", ")", ":", "\n", "        ", "\"\"\"Unpack input data from the dataloader and perform necessary pre-processing steps.\n        Parameters:\n            input (dict): includes the data itself and its metadata information.\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.load_state_dict_with_same_shape": [[153, 158], ["base_model.BaseModel.state_dict", "log.info", "base_model.BaseModel.load_state_dict", "weights.items", "filtered_weights.keys", "v.size", "model_state[].size"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.schedulers.lr_schedulers.LRScheduler.state_dict", "home.repos.pwc.inspect_result.drprojects_deepviewagg.schedulers.lr_schedulers.LRScheduler.load_state_dict", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.mock.MockDatasetConfig.keys"], ["", "def", "load_state_dict_with_same_shape", "(", "self", ",", "weights", ",", "strict", "=", "False", ")", ":", "\n", "        ", "model_state", "=", "self", ".", "state_dict", "(", ")", "\n", "filtered_weights", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "weights", ".", "items", "(", ")", "if", "k", "in", "model_state", "and", "v", ".", "size", "(", ")", "==", "model_state", "[", "k", "]", ".", "size", "(", ")", "}", "\n", "log", ".", "info", "(", "\"Loading weights:\"", "+", "\", \"", ".", "join", "(", "filtered_weights", ".", "keys", "(", ")", ")", ")", "\n", "self", ".", "load_state_dict", "(", "filtered_weights", ",", "strict", "=", "strict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.set_pretrained_weights": [[159, 170], ["getattr", "getattr", "os.path.exists", "log.warning", "log.info", "base_model.BaseModel.load_state_dict_with_same_shape", "torch.load"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.load_state_dict_with_same_shape", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load"], ["", "def", "set_pretrained_weights", "(", "self", ")", ":", "\n", "        ", "path_pretrained", "=", "getattr", "(", "self", ".", "opt", ",", "\"path_pretrained\"", ",", "None", ")", "\n", "weight_name", "=", "getattr", "(", "self", ".", "opt", ",", "\"weight_name\"", ",", "\"latest\"", ")", "\n", "\n", "if", "path_pretrained", "is", "not", "None", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "exists", "(", "path_pretrained", ")", ":", "\n", "                ", "log", ".", "warning", "(", "\"The path does not exist, it will not load any model\"", ")", "\n", "", "else", ":", "\n", "                ", "log", ".", "info", "(", "\"load pretrained weights from {}\"", ".", "format", "(", "path_pretrained", ")", ")", "\n", "m", "=", "torch", ".", "load", "(", "path_pretrained", ",", "map_location", "=", "\"cpu\"", ")", "[", "\"models\"", "]", "[", "weight_name", "]", "\n", "self", ".", "load_state_dict_with_same_shape", "(", "m", ",", "strict", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.get_labels": [[171, 174], ["getattr"], "methods", ["None"], ["", "", "", "def", "get_labels", "(", "self", ")", ":", "\n", "        ", "\"\"\"returns a trensor of size ``[N_points]`` where each value is the label of a point\"\"\"", "\n", "return", "getattr", "(", "self", ",", "\"labels\"", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.get_batch": [[175, 178], ["getattr"], "methods", ["None"], ["", "def", "get_batch", "(", "self", ")", ":", "\n", "        ", "\"\"\"returns a trensor of size ``[N_points]`` where each value is the batch index of a point\"\"\"", "\n", "return", "getattr", "(", "self", ",", "\"batch_idx\"", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.get_output": [[179, 184], ["None"], "methods", ["None"], ["", "def", "get_output", "(", "self", ")", ":", "\n", "        ", "\"\"\"returns a trensor of size ``[N_points,...]`` where each value is the output\n        of the network for a point (output of the last layer in general)\n        \"\"\"", "\n", "return", "self", ".", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.get_input": [[185, 188], ["getattr"], "methods", ["None"], ["", "def", "get_input", "(", "self", ")", ":", "\n", "        ", "\"\"\"returns the last input that was given to the model or raises error\"\"\"", "\n", "return", "getattr", "(", "self", ",", "\"input\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.forward": [[189, 192], ["NotImplementedError"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", "->", "Any", ":", "\n", "        ", "\"\"\"Run forward pass; called by both functions <optimize_parameters> and <test>.\"\"\"", "\n", "raise", "NotImplementedError", "(", "\"You must implement your own forward\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel._manage_optimizer_zero_grad": [[193, 206], ["base_model.BaseModel._optimizer.zero_grad", "base_model.BaseModel._optimizer.zero_grad"], "methods", ["None"], ["", "def", "_manage_optimizer_zero_grad", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "_accumulated_gradient_step", ":", "\n", "            ", "self", ".", "_optimizer", ".", "zero_grad", "(", ")", "# clear existing gradients", "\n", "return", "True", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "_accumulated_gradient_count", "==", "self", ".", "_accumulated_gradient_step", ":", "\n", "                ", "self", ".", "_accumulated_gradient_count", "=", "0", "\n", "return", "True", "\n", "\n", "", "if", "self", ".", "_accumulated_gradient_count", "==", "0", ":", "\n", "                ", "self", ".", "_optimizer", ".", "zero_grad", "(", ")", "# clear existing gradients", "\n", "", "self", ".", "_accumulated_gradient_count", "+=", "1", "\n", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel._do_scheduler_update": [[207, 225], ["hasattr", "getattr", "range", "Exception", "Exception", "scheduler.step"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.schedulers.lr_schedulers.LRScheduler.step"], ["", "", "def", "_do_scheduler_update", "(", "self", ",", "update_scheduler_on", ",", "scheduler", ",", "epoch", ",", "batch_size", ")", ":", "\n", "        ", "if", "hasattr", "(", "self", ",", "update_scheduler_on", ")", ":", "\n", "            ", "update_scheduler_on", "=", "getattr", "(", "self", ",", "update_scheduler_on", ")", "\n", "if", "update_scheduler_on", "is", "None", ":", "\n", "                ", "raise", "Exception", "(", "\"The function instantiate_optimizers doesn't look like called\"", ")", "\n", "\n", "", "num_steps", "=", "0", "\n", "if", "update_scheduler_on", "==", "SchedulerUpdateOn", ".", "ON_EPOCH", ".", "value", ":", "\n", "                ", "num_steps", "=", "epoch", "-", "self", ".", "_num_epochs", "\n", "", "elif", "update_scheduler_on", "==", "SchedulerUpdateOn", ".", "ON_NUM_BATCH", ".", "value", ":", "\n", "                ", "num_steps", "=", "1", "\n", "", "elif", "update_scheduler_on", "==", "SchedulerUpdateOn", ".", "ON_NUM_SAMPLE", ".", "value", ":", "\n", "                ", "num_steps", "=", "batch_size", "\n", "\n", "", "for", "_", "in", "range", "(", "num_steps", ")", ":", "\n", "                ", "scheduler", ".", "step", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\"The attributes {} should be defined within self\"", ".", "format", "(", "update_scheduler_on", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel._do_scale_loss": [[226, 234], ["base_model.BaseModel.is_mixed_precision", "getattr", "getattr.detach", "setattr", "base_model.BaseModel._grad_scale.scale"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.is_mixed_precision"], ["", "", "def", "_do_scale_loss", "(", "self", ")", ":", "\n", "        ", "orig_losses", "=", "{", "}", "\n", "if", "self", ".", "is_mixed_precision", "(", ")", ":", "\n", "            ", "for", "loss_name", "in", "self", ".", "loss_names", ":", "\n", "                ", "loss", "=", "getattr", "(", "self", ",", "loss_name", ")", "\n", "orig_losses", "[", "loss_name", "]", "=", "loss", ".", "detach", "(", ")", "\n", "setattr", "(", "self", ",", "loss_name", ",", "self", ".", "_grad_scale", ".", "scale", "(", "loss", ")", ")", "\n", "", "", "return", "orig_losses", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel._do_unscale_loss": [[235, 240], ["base_model.BaseModel.is_mixed_precision", "orig_losses.items", "base_model.BaseModel._grad_scale.unscale_", "setattr"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.is_mixed_precision"], ["", "def", "_do_unscale_loss", "(", "self", ",", "orig_losses", ")", ":", "\n", "        ", "if", "self", ".", "is_mixed_precision", "(", ")", ":", "\n", "            ", "for", "loss_name", ",", "loss", "in", "orig_losses", ".", "items", "(", ")", ":", "\n", "                ", "setattr", "(", "self", ",", "loss_name", ",", "loss", ")", "\n", "", "self", ".", "_grad_scale", ".", "unscale_", "(", "self", ".", "_optimizer", ")", "# unscale gradients before clipping", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.optimize_parameters": [[241, 268], ["base_model.BaseModel._do_scale_loss", "base_model.BaseModel._manage_optimizer_zero_grad", "base_model.BaseModel.backward", "base_model.BaseModel._do_unscale_loss", "base_model.BaseModel._grad_scale.update", "torch.cuda.amp.autocast", "base_model.BaseModel.forward", "torch.nn.utils.clip_grad_value_", "base_model.BaseModel._grad_scale.step", "base_model.BaseModel._do_scheduler_update", "base_model.BaseModel._do_scheduler_update", "base_model.BaseModel.parameters", "base_model.BaseModel.is_mixed_precision"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel._do_scale_loss", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel._manage_optimizer_zero_grad", "home.repos.pwc.inspect_result.drprojects_deepviewagg.panoptic.pointgroup.PointGroup.backward", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel._do_unscale_loss", "home.repos.pwc.inspect_result.drprojects_deepviewagg.RSConv.message_passing.Convolution.update", "home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.forward", "home.repos.pwc.inspect_result.drprojects_deepviewagg.schedulers.lr_schedulers.LRScheduler.step", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel._do_scheduler_update", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel._do_scheduler_update", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.is_mixed_precision"], ["", "", "def", "optimize_parameters", "(", "self", ",", "epoch", ",", "batch_size", ")", ":", "\n", "        ", "\"\"\"Calculate losses, gradients, and update network weights; called in every training iteration\"\"\"", "\n", "\n", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", "enabled", "=", "self", ".", "is_mixed_precision", "(", ")", ")", ":", "# enable autocasting if supported", "\n", "            ", "self", ".", "forward", "(", "epoch", "=", "epoch", ")", "# first call forward to calculate intermediate results", "\n", "\n", "", "orig_losses", "=", "self", ".", "_do_scale_loss", "(", ")", "# scale losses if needed", "\n", "make_optimizer_step", "=", "self", ".", "_manage_optimizer_zero_grad", "(", ")", "# Accumulate gradient if option is up", "\n", "self", ".", "backward", "(", ")", "# calculate gradients", "\n", "self", ".", "_do_unscale_loss", "(", "orig_losses", ")", "# unscale losses to orig", "\n", "\n", "if", "self", ".", "_grad_clip", ">", "0", ":", "\n", "            ", "torch", ".", "nn", ".", "utils", ".", "clip_grad_value_", "(", "self", ".", "parameters", "(", ")", ",", "self", ".", "_grad_clip", ")", "\n", "\n", "", "if", "make_optimizer_step", ":", "\n", "            ", "self", ".", "_grad_scale", ".", "step", "(", "self", ".", "_optimizer", ")", "# update parameters", "\n", "\n", "", "if", "self", ".", "_lr_scheduler", ":", "\n", "            ", "self", ".", "_do_scheduler_update", "(", "\"_update_lr_scheduler_on\"", ",", "self", ".", "_lr_scheduler", ",", "epoch", ",", "batch_size", ")", "\n", "\n", "", "if", "self", ".", "_bn_scheduler", ":", "\n", "            ", "self", ".", "_do_scheduler_update", "(", "\"_update_bn_scheduler_on\"", ",", "self", ".", "_bn_scheduler", ",", "epoch", ",", "batch_size", ")", "\n", "\n", "", "self", ".", "_grad_scale", ".", "update", "(", ")", "# update scaling", "\n", "self", ".", "_num_epochs", "=", "epoch", "\n", "self", ".", "_num_batches", "+=", "1", "\n", "self", ".", "_num_samples", "+=", "batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.get_current_losses": [[269, 280], ["collections.OrderedDict", "isinstance", "hasattr", "float", "getattr"], "methods", ["None"], ["", "def", "get_current_losses", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return traning losses / errors. train.py will print out these errors on console\"\"\"", "\n", "errors_ret", "=", "OrderedDict", "(", ")", "\n", "for", "name", "in", "self", ".", "loss_names", ":", "\n", "            ", "if", "isinstance", "(", "name", ",", "str", ")", ":", "\n", "                ", "if", "hasattr", "(", "self", ",", "name", ")", ":", "\n", "                    ", "try", ":", "\n", "                        ", "errors_ret", "[", "name", "]", "=", "float", "(", "getattr", "(", "self", ",", "name", ")", ")", "\n", "", "except", ":", "\n", "                        ", "errors_ret", "[", "name", "]", "=", "None", "\n", "", "", "", "", "return", "errors_ret", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.instantiate_optimizers": [[281, 391], ["base_model.BaseModel.get_from_opt", "base_model.BaseModel.get", "getattr", "base_model.BaseModel.get_from_opt", "base_model.BaseModel.get_from_opt", "base_model.BaseModel.get_from_opt", "base_model.BaseModel.get_from_opt", "base_model.BaseModel.get_from_opt", "torch.cuda.amp.GradScaler", "hasattr", "hasattr", "torch_points3d.utils.config.is_list", "len", "getattr.", "getattr", "getattr.", "config.get", "torch_points3d.core.schedulers.lr_schedulers.instantiate_scheduler", "base_model.BaseModel._add_scheduler", "config.get", "torch_points3d.core.schedulers.bn_schedulers.instantiate_bn_scheduler", "base_model.BaseModel._add_scheduler", "base_model.BaseModel.is_mixed_precision", "log.warning", "torch_points3d.utils.config.fetch_arguments_from_list", "list", "print", "len", "ValueError", "base_model.BaseModel.parameters", "Exception", "log.warning", "base_model.BaseModel.is_mixed_precision", "base_model.BaseModel.is_mixed_precision", "range", "base_model.BaseModel.named_parameters", "base_model.BaseModel.named_parameters", "range", "any", "ValueError", "x.startswith", "log.info", "submodule_params.append", "untracked_params_new.append", "base_model.BaseModel.named_parameters", "x.startswith"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.get_from_opt", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.get_from_opt", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.get_from_opt", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.get_from_opt", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.get_from_opt", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.get_from_opt", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.config.is_list", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.schedulers.lr_schedulers.instantiate_scheduler", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel._add_scheduler", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.schedulers.bn_schedulers.instantiate_bn_scheduler", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel._add_scheduler", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.is_mixed_precision", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.config.fetch_arguments_from_list", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.is_mixed_precision", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.is_mixed_precision", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append"], ["", "def", "instantiate_optimizers", "(", "self", ",", "config", ",", "cuda_enabled", "=", "False", ")", ":", "\n", "# Optimiser", "\n", "        ", "optimizer_opt", "=", "self", ".", "get_from_opt", "(", "\n", "config", ",", "\n", "[", "\"training\"", ",", "\"optim\"", ",", "\"optimizer\"", "]", ",", "\n", "msg_err", "=", "\"optimizer needs to be defined within the training config\"", ",", "\n", ")", "\n", "optmizer_cls_name", "=", "optimizer_opt", ".", "get", "(", "\"class\"", ")", "\n", "optimizer_cls", "=", "getattr", "(", "torch", ".", "optim", ",", "optmizer_cls_name", ")", "\n", "\n", "is_differential", "=", "hasattr", "(", "optimizer_opt", ",", "'params'", ")", "and", "hasattr", "(", "optimizer_opt", ".", "params", ",", "'params'", ")", "and", "is_list", "(", "optimizer_opt", ".", "params", ".", "params", ")", "\n", "\n", "if", "is_differential", ":", "\n", "            ", "n_optim_groups", "=", "len", "(", "optimizer_opt", ".", "params", ".", "params", ")", "\n", "\n", "optimizer_params", "=", "[", "\n", "fetch_arguments_from_list", "(", "optimizer_opt", ".", "params", ",", "i", ",", "[", "'params'", "]", ")", "\n", "for", "i", "in", "range", "(", "n_optim_groups", ")", "]", "\n", "\n", "# Initialize lists of parameter names to be used for", "\n", "# overwriting parameter groups. The torch optimizer will", "\n", "# crash if a parameter belongs to multiple groups. For this", "\n", "# reason, we need to make sure that a parameter belongs only", "\n", "# to the last-declared group capturing it.", "\n", "all_params", "=", "[", "n", "for", "n", ",", "_", "in", "self", ".", "named_parameters", "(", ")", "]", "\n", "untracked_params", "=", "[", "n", "for", "n", ",", "_", "in", "self", ".", "named_parameters", "(", ")", "]", "\n", "\n", "# Loop through parameters from last to first, so that", "\n", "# overwrites follow the chronological order", "\n", "for", "i", "in", "list", "(", "range", "(", "n_optim_groups", ")", ")", "[", ":", ":", "-", "1", "]", ":", "\n", "\n", "# Recover the submodule name", "\n", "                ", "submodule_name", "=", "optimizer_params", "[", "i", "]", "[", "'params'", "]", "\n", "print", "(", "submodule_name", ")", "\n", "\n", "# Make sure the module exists in the model", "\n", "if", "not", "any", "(", "[", "x", ".", "startswith", "(", "submodule_name", ")", "for", "x", "in", "all_params", "]", ")", ":", "\n", "                    ", "raise", "ValueError", "(", "\n", "f'Module {submodule_name} not found among model '", "\n", "f'modules.'", ")", "\n", "\n", "# Yet-to-be-tracked parameters captured in the submodule", "\n", "", "untracked_params_new", "=", "[", "]", "\n", "submodule_params", "=", "[", "]", "\n", "for", "x", "in", "untracked_params", ":", "\n", "                    ", "if", "x", ".", "startswith", "(", "submodule_name", ")", ":", "\n", "                        ", "submodule_params", ".", "append", "(", "x", ")", "\n", "", "else", ":", "\n", "                        ", "untracked_params_new", ".", "append", "(", "x", ")", "\n", "", "", "untracked_params", "=", "untracked_params_new", "\n", "\n", "# Recover the actual parameters", "\n", "optimizer_params", "[", "i", "]", "[", "'params'", "]", "=", "[", "\n", "p", "for", "n", ",", "p", "in", "self", ".", "named_parameters", "(", ")", "\n", "if", "n", "in", "submodule_params", "]", "\n", "\n", "", "if", "len", "(", "untracked_params", ")", ">", "0", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "f'The following parameters are not tracked by the '", "\n", "f'optimizer: {untracked_params}'", ")", "\n", "", "self", ".", "_optimizer", "=", "optimizer_cls", "(", "optimizer_params", ")", "\n", "\n", "", "else", ":", "\n", "            ", "optimizer_params", "=", "getattr", "(", "optimizer_opt", ",", "\"params\"", ",", "{", "}", ")", "\n", "self", ".", "_optimizer", "=", "optimizer_cls", "(", "self", ".", "parameters", "(", ")", ",", "**", "optimizer_params", ")", "\n", "\n", "# LR Scheduler", "\n", "", "scheduler_opt", "=", "self", ".", "get_from_opt", "(", "config", ",", "[", "\"training\"", ",", "\"optim\"", ",", "\"lr_scheduler\"", "]", ")", "\n", "if", "scheduler_opt", ":", "\n", "            ", "update_lr_scheduler_on", "=", "config", ".", "get", "(", "'update_lr_scheduler_on'", ")", "# Update to OmegaConf 2.0", "\n", "if", "update_lr_scheduler_on", ":", "\n", "                ", "self", ".", "_update_lr_scheduler_on", "=", "update_lr_scheduler_on", "\n", "", "scheduler_opt", ".", "update_scheduler_on", "=", "self", ".", "_update_lr_scheduler_on", "\n", "lr_scheduler", "=", "instantiate_scheduler", "(", "self", ".", "_optimizer", ",", "scheduler_opt", ")", "\n", "self", ".", "_add_scheduler", "(", "\"lr_scheduler\"", ",", "lr_scheduler", ")", "\n", "\n", "# BN Scheduler", "\n", "", "bn_scheduler_opt", "=", "self", ".", "get_from_opt", "(", "config", ",", "[", "\"training\"", ",", "\"optim\"", ",", "\"bn_scheduler\"", "]", ")", "\n", "if", "bn_scheduler_opt", ":", "\n", "            ", "update_bn_scheduler_on", "=", "config", ".", "get", "(", "'update_bn_scheduler_on'", ")", "# update to OmegaConf 2.0", "\n", "if", "update_bn_scheduler_on", ":", "\n", "                ", "self", ".", "_update_bn_scheduler_on", "=", "update_bn_scheduler_on", "\n", "", "bn_scheduler_opt", ".", "update_scheduler_on", "=", "self", ".", "_update_bn_scheduler_on", "\n", "bn_scheduler", "=", "instantiate_bn_scheduler", "(", "self", ",", "bn_scheduler_opt", ")", "\n", "self", ".", "_add_scheduler", "(", "\"bn_scheduler\"", ",", "bn_scheduler", ")", "\n", "\n", "# Accumulated gradients", "\n", "", "self", ".", "_accumulated_gradient_step", "=", "self", ".", "get_from_opt", "(", "config", ",", "[", "\"training\"", ",", "\"optim\"", ",", "\"accumulated_gradient\"", "]", ")", "\n", "if", "self", ".", "_accumulated_gradient_step", ":", "\n", "            ", "if", "self", ".", "_accumulated_gradient_step", ">", "1", ":", "\n", "                ", "self", ".", "_accumulated_gradient_count", "=", "0", "\n", "", "else", ":", "\n", "                ", "raise", "Exception", "(", "\"When set, accumulated_gradient option should be an integer greater than 1\"", ")", "\n", "\n", "# Gradient clipping", "\n", "", "", "self", ".", "_grad_clip", "=", "self", ".", "get_from_opt", "(", "config", ",", "[", "\"training\"", ",", "\"optim\"", ",", "\"grad_clip\"", "]", ",", "default_value", "=", "-", "1", ")", "\n", "\n", "# Gradient Scaling", "\n", "self", ".", "_enable_mixed", "=", "self", ".", "get_from_opt", "(", "config", ",", "[", "\"training\"", ",", "\"enable_mixed\"", "]", ",", "default_value", "=", "False", ")", "\n", "if", "self", ".", "is_mixed_precision", "(", ")", "and", "not", "cuda_enabled", ":", "\n", "            ", "log", ".", "warning", "(", "\"Mixed precision is not supported on this device, using default precision...\"", ")", "\n", "self", ".", "_enable_mixed", "=", "False", "\n", "", "elif", "self", ".", "_enable_mixed", "and", "not", "self", ".", "_supports_mixed", ":", "\n", "            ", "log", ".", "warning", "(", "\"Mixed precision is not supported on this model, using default precision...\"", ")", "\n", "", "elif", "self", ".", "is_mixed_precision", "(", ")", ":", "\n", "            ", "log", ".", "info", "(", "\"Model will use mixed precision\"", ")", "\n", "\n", "", "self", ".", "_grad_scale", "=", "torch", ".", "cuda", ".", "amp", ".", "GradScaler", "(", "enabled", "=", "self", ".", "is_mixed_precision", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.get_regularization_loss": [[392, 397], ["regularizer_cls", "regularizer_cls.regularized_all_param", "regularizer_type.upper"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.regularizer.regularizers.GroupLassoRegularizer.regularized_all_param"], ["", "def", "get_regularization_loss", "(", "self", ",", "regularizer_type", "=", "\"L2\"", ",", "**", "kwargs", ")", ":", "\n", "        ", "loss", "=", "0", "\n", "regularizer_cls", "=", "RegularizerTypes", "[", "regularizer_type", ".", "upper", "(", ")", "]", ".", "value", "\n", "regularizer", "=", "regularizer_cls", "(", "self", ",", "**", "kwargs", ")", "\n", "return", "regularizer", ".", "regularized_all_param", "(", "loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.get_named_internal_losses": [[398, 423], ["collections.defaultdict", "base_model.BaseModel.get_named_internal_losses.search_from_key"], "methods", ["None"], ["", "def", "get_named_internal_losses", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Modules which have internal losses return a dict of the form\n        {<loss_name>: <loss>}\n        This method merges the dicts of all child modules with internal loss\n        and returns this merged dict\n        \"\"\"", "\n", "losses_global", "=", "defaultdict", "(", "list", ")", "\n", "\n", "def", "search_from_key", "(", "modules", ",", "losses_global", ")", ":", "\n", "            ", "for", "_", ",", "module", "in", "modules", ".", "items", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "module", ",", "BaseInternalLossModule", ")", ":", "\n", "                    ", "losses", "=", "module", ".", "get_internal_losses", "(", ")", "\n", "for", "loss_name", ",", "loss_value", "in", "losses", ".", "items", "(", ")", ":", "\n", "                        ", "if", "torch", ".", "is_tensor", "(", "loss_value", ")", ":", "\n", "                            ", "assert", "loss_value", ".", "dim", "(", ")", "==", "0", "\n", "losses_global", "[", "loss_name", "]", ".", "append", "(", "loss_value", ")", "\n", "", "elif", "isinstance", "(", "loss_value", ",", "float", ")", ":", "\n", "                            ", "losses_global", "[", "loss_name", "]", ".", "append", "(", "torch", ".", "tensor", "(", "loss_value", ")", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "", "else", ":", "\n", "                            ", "raise", "ValueError", "(", "\"Unsupported value type for a loss: {}\"", ".", "format", "(", "loss_value", ")", ")", "\n", "", "", "", "search_from_key", "(", "module", ".", "_modules", ",", "losses_global", ")", "\n", "\n", "", "", "search_from_key", "(", "self", ".", "_modules", ",", "losses_global", ")", "\n", "return", "losses_global", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.collect_internal_losses": [[424, 438], ["base_model.BaseModel.get_named_internal_losses", "base_model.BaseModel.items", "setattr", "base_model.BaseModel.loss_names.append", "aggr_func", "item_loss.item", "torch.stack"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.get_named_internal_losses", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append"], ["", "def", "collect_internal_losses", "(", "self", ",", "lambda_weight", "=", "1", ",", "aggr_func", "=", "torch", ".", "sum", ")", ":", "\n", "        ", "\"\"\"\n        Collect internal loss of all child modules with\n        internal losses and set the losses\n        \"\"\"", "\n", "loss_out", "=", "0", "\n", "losses", "=", "self", ".", "get_named_internal_losses", "(", ")", "\n", "for", "loss_name", ",", "loss_values", "in", "losses", ".", "items", "(", ")", ":", "\n", "            ", "if", "loss_name", "not", "in", "self", ".", "loss_names", ":", "\n", "                ", "self", ".", "loss_names", ".", "append", "(", "loss_name", ")", "\n", "", "item_loss", "=", "lambda_weight", "*", "aggr_func", "(", "torch", ".", "stack", "(", "loss_values", ")", ")", "\n", "loss_out", "+=", "item_loss", "\n", "setattr", "(", "self", ",", "loss_name", ",", "item_loss", ".", "item", "(", ")", ")", "\n", "", "return", "loss_out", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.get_internal_loss": [[439, 454], ["base_model.BaseModel.get_named_internal_losses", "base_model.BaseModel.items", "torch.mean", "torch.stack"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.get_named_internal_losses", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.lovasz_loss.mean"], ["", "def", "get_internal_loss", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Returns the average internal loss of all child modules with\n        internal losses\n        \"\"\"", "\n", "loss", "=", "0", "\n", "c", "=", "0", "\n", "losses", "=", "self", ".", "get_named_internal_losses", "(", ")", "\n", "for", "loss_name", ",", "loss_values", "in", "losses", ".", "items", "(", ")", ":", "\n", "            ", "loss", "+=", "torch", ".", "mean", "(", "torch", ".", "stack", "(", "loss_values", ")", ")", "\n", "c", "+=", "1", "\n", "", "if", "c", "==", "0", ":", "\n", "            ", "return", "loss", "\n", "", "else", ":", "\n", "            ", "return", "loss", "/", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.get_metric_loss_and_miner": [[455, 476], ["torch_points3d.core.losses.instantiate_loss_or_miner", "torch_points3d.core.losses.instantiate_loss_or_miner"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.__init__.instantiate_loss_or_miner", "home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.__init__.instantiate_loss_or_miner"], ["", "", "@", "staticmethod", "\n", "def", "get_metric_loss_and_miner", "(", "opt_loss", ",", "opt_miner", ")", ":", "\n", "        ", "\"\"\"\n        instantiate the loss and the miner if it's available\n        in the yaml config:\n\n        example in the yaml config\n        metric_loss:\n            class: \"TripletMarginLoss\"\n            params:\n                smooth_loss: True\n                triplets_per_anchors: 'all'\n        \"\"\"", "\n", "loss", "=", "None", "\n", "miner", "=", "None", "\n", "if", "opt_loss", "is", "not", "None", ":", "\n", "            ", "loss", "=", "instantiate_loss_or_miner", "(", "opt_loss", ",", "mode", "=", "\"metric_loss\"", ")", "\n", "", "if", "opt_miner", "is", "not", "None", ":", "\n", "            ", "miner", "=", "instantiate_loss_or_miner", "(", "opt_miner", ",", "mode", "=", "\"miner\"", ")", "\n", "\n", "", "return", "loss", ",", "miner", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.get_spatial_ops": [[477, 479], ["None"], "methods", ["None"], ["", "def", "get_spatial_ops", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_spatial_ops_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.enable_dropout_in_eval": [[480, 488], ["base_model.BaseModel.get_named_internal_losses.search_from_key"], "methods", ["None"], ["", "def", "enable_dropout_in_eval", "(", "self", ")", ":", "\n", "        ", "def", "search_from_key", "(", "modules", ")", ":", "\n", "            ", "for", "_", ",", "m", "in", "modules", ".", "items", "(", ")", ":", "\n", "                ", "if", "m", ".", "__class__", ".", "__name__", ".", "startswith", "(", "\"Dropout\"", ")", ":", "\n", "                    ", "m", ".", "train", "(", ")", "\n", "", "search_from_key", "(", "m", ".", "_modules", ")", "\n", "\n", "", "", "search_from_key", "(", "self", ".", "_modules", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.get_from_opt": [[489, 511], ["len", "Exception", "base_model.BaseModel.get_from_opt.search_with_keys"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "def", "get_from_opt", "(", "self", ",", "opt", ",", "keys", "=", "[", "]", ",", "default_value", "=", "None", ",", "msg_err", "=", "None", ",", "silent", "=", "True", ")", ":", "\n", "        ", "if", "len", "(", "keys", ")", "==", "0", ":", "\n", "            ", "raise", "Exception", "(", "\"Keys should not be empty\"", ")", "\n", "", "value_out", "=", "default_value", "\n", "\n", "def", "search_with_keys", "(", "args", ",", "keys", ",", "value_out", ")", ":", "\n", "            ", "if", "len", "(", "keys", ")", "==", "0", ":", "\n", "                ", "value_out", "=", "args", "\n", "return", "value_out", "\n", "", "value", "=", "args", "[", "keys", "[", "0", "]", "]", "\n", "return", "search_with_keys", "(", "value", ",", "keys", "[", "1", ":", "]", ",", "value_out", ")", "\n", "\n", "", "try", ":", "\n", "            ", "value_out", "=", "search_with_keys", "(", "opt", ",", "keys", ",", "value_out", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "if", "msg_err", ":", "\n", "                ", "raise", "Exception", "(", "str", "(", "msg_err", ")", ")", "\n", "", "else", ":", "\n", "                ", "if", "not", "silent", ":", "\n", "                    ", "log", ".", "exception", "(", "e", ")", "\n", "", "", "value_out", "=", "default_value", "\n", "", "return", "value_out", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.get_current_visuals": [[512, 519], ["collections.OrderedDict", "isinstance", "getattr"], "methods", ["None"], ["", "def", "get_current_visuals", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return an OrderedDict containing associated tensors within visual_names\"\"\"", "\n", "visual_ret", "=", "OrderedDict", "(", ")", "\n", "for", "name", "in", "self", ".", "visual_names", ":", "\n", "            ", "if", "isinstance", "(", "name", ",", "str", ")", ":", "\n", "                ", "visual_ret", "[", "name", "]", "=", "getattr", "(", "self", ",", "name", ")", "\n", "", "", "return", "visual_ret", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.log_optimizers": [[520, 525], ["torch_points3d.utils.colors.colored_print", "torch_points3d.utils.colors.colored_print", "torch_points3d.utils.colors.colored_print", "torch_points3d.utils.colors.colored_print"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.visualization.experiment_manager.colored_print", "home.repos.pwc.inspect_result.drprojects_deepviewagg.visualization.experiment_manager.colored_print", "home.repos.pwc.inspect_result.drprojects_deepviewagg.visualization.experiment_manager.colored_print", "home.repos.pwc.inspect_result.drprojects_deepviewagg.visualization.experiment_manager.colored_print"], ["", "def", "log_optimizers", "(", "self", ")", ":", "\n", "        ", "colored_print", "(", "COLORS", ".", "Green", ",", "\"Optimizer: {}\"", ".", "format", "(", "self", ".", "_optimizer", ")", ")", "\n", "colored_print", "(", "COLORS", ".", "Green", ",", "\"Learning Rate Scheduler: {}\"", ".", "format", "(", "self", ".", "_lr_scheduler", ")", ")", "\n", "colored_print", "(", "COLORS", ".", "Green", ",", "\"BatchNorm Scheduler: {}\"", ".", "format", "(", "self", ".", "_bn_scheduler", ")", ")", "\n", "colored_print", "(", "COLORS", ".", "Green", ",", "\"Accumulated gradients: {}\"", ".", "format", "(", "self", ".", "_accumulated_gradient_step", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to": [[526, 534], ["super().to", "base_model.BaseModel.optimizer.state.values", "state.items", "isinstance", "v.to"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to"], ["", "def", "to", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "to", "(", "*", "args", ",", "*", "kwargs", ")", "\n", "if", "self", ".", "optimizer", ":", "\n", "            ", "for", "state", "in", "self", ".", "optimizer", ".", "state", ".", "values", "(", ")", ":", "\n", "                ", "for", "k", ",", "v", "in", "state", ".", "items", "(", ")", ":", "\n", "                    ", "if", "isinstance", "(", "v", ",", "torch", ".", "Tensor", ")", ":", "\n", "                        ", "state", "[", "k", "]", "=", "v", ".", "to", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "", "", "", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.verify_data": [[535, 550], ["len", "KeyError", "missing_keys.append", "hasattr"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append"], ["", "def", "verify_data", "(", "self", ",", "data", ",", "forward_only", "=", "False", ")", ":", "\n", "        ", "\"\"\"Goes through the __REQUIRED_DATA__ and __REQUIRED_LABELS__ attribute of the model\n        and verifies that the passed data object contains all required members.\n        If something is missing it raises a KeyError exception.\n        \"\"\"", "\n", "missing_keys", "=", "[", "]", "\n", "required_attributes", "=", "self", ".", "__REQUIRED_DATA__", "\n", "if", "not", "forward_only", ":", "\n", "            ", "required_attributes", "+=", "self", ".", "__REQUIRED_LABELS__", "\n", "", "for", "attr", "in", "required_attributes", ":", "\n", "            ", "if", "not", "hasattr", "(", "data", ",", "attr", ")", "or", "data", "[", "attr", "]", "is", "None", ":", "\n", "                ", "missing_keys", ".", "append", "(", "attr", ")", "\n", "", "", "if", "len", "(", "missing_keys", ")", ":", "\n", "            ", "raise", "KeyError", "(", "\n", "\"Missing attributes in your data object: {}. The model will fail to forward.\"", ".", "format", "(", "missing_keys", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.print_transforms": [[552, 558], ["print", "getattr"], "methods", ["None"], ["", "", "def", "print_transforms", "(", "self", ")", ":", "\n", "        ", "message", "=", "\"\"", "\n", "for", "attr", "in", "self", ".", "__dict__", ":", "\n", "            ", "if", "\"transform\"", "in", "attr", ":", "\n", "                ", "message", "+=", "\"{}{} {}= {}\\n\"", ".", "format", "(", "COLORS", ".", "IPurple", ",", "attr", ",", "COLORS", ".", "END_NO_TOKEN", ",", "getattr", "(", "self", ",", "attr", ")", ")", "\n", "", "", "print", "(", "message", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseInternalLossModule.get_internal_losses": [[563, 566], ["None"], "methods", ["None"], ["@", "abstractmethod", "\n", "def", "get_internal_losses", "(", "self", ")", "->", "Dict", "[", "str", ",", "Any", "]", ":", "\n", "        ", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_architectures.unet.BaseFactory.__init__": [[23, 27], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "module_name_down", ",", "module_name_up", ",", "modules_lib", ")", ":", "\n", "        ", "self", ".", "module_name_down", "=", "module_name_down", "\n", "self", ".", "module_name_up", "=", "module_name_up", "\n", "self", ".", "modules_lib", "=", "modules_lib", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_architectures.unet.BaseFactory.get_module": [[28, 33], ["flow.upper", "getattr", "getattr"], "methods", ["None"], ["", "def", "get_module", "(", "self", ",", "flow", ",", "index", "=", "None", ")", ":", "\n", "        ", "if", "flow", ".", "upper", "(", ")", "==", "\"UP\"", ":", "\n", "            ", "return", "getattr", "(", "self", ".", "modules_lib", ",", "self", ".", "module_name_up", ",", "None", ")", "\n", "", "else", ":", "\n", "            ", "return", "getattr", "(", "self", ".", "modules_lib", ",", "self", ".", "module_name_down", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_architectures.unet.ModalityFactory.__init__": [[51, 68], ["importlib.import_module", "importlib.import_module", "importlib.import_module"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "modality", ",", "module_name", ",", "atomic_pooling_name", ",", "\n", "view_pooling_name", ",", "fusion_name", ")", ":", "\n", "        ", "self", ".", "modality", "=", "modality", "\n", "\n", "self", ".", "module_name", "=", "module_name", "\n", "self", ".", "modality_lib", "=", "importlib", ".", "import_module", "(", "\n", "f\"torch_points3d.modules.multimodal.modalities.{modality}\"", ")", "\n", "\n", "self", ".", "atomic_pooling_name", "=", "atomic_pooling_name", "\n", "self", ".", "view_pooling_name", "=", "view_pooling_name", "\n", "self", ".", "pooling_lib", "=", "importlib", ".", "import_module", "(", "\n", "f\"torch_points3d.modules.multimodal.pooling\"", ")", "\n", "\n", "self", ".", "fusion_name", "=", "fusion_name", "\n", "self", ".", "fusion_lib", "=", "importlib", ".", "import_module", "(", "\n", "f\"torch_points3d.modules.multimodal.fusion\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_architectures.unet.ModalityFactory.get_module": [[69, 102], ["flow.upper", "torch_points3d.utils.config.is_list", "getattr", "flow.upper", "getattr", "getattr", "flow.upper", "flow.upper"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.config.is_list"], ["", "def", "get_module", "(", "self", ",", "flow", ",", "index", "=", "None", ")", ":", "\n", "        ", "if", "flow", ".", "upper", "(", ")", "==", "'ATOMIC'", ":", "\n", "# Search for the modality pooling in", "\n", "# torch_points3d.modules.multimodal.pooling", "\n", "            ", "lib", "=", "self", ".", "pooling_lib", "\n", "module", "=", "self", ".", "atomic_pooling_name", "\n", "", "elif", "flow", ".", "upper", "(", ")", "==", "'VIEW'", ":", "\n", "# Search for the modality pooling in", "\n", "# torch_points3d.modules.multimodal.pooling", "\n", "            ", "lib", "=", "self", ".", "pooling_lib", "\n", "module", "=", "self", ".", "view_pooling_name", "\n", "", "elif", "flow", ".", "upper", "(", ")", "==", "'FUSION'", ":", "\n", "#  Search for the modality fusion in", "\n", "# torch_points3d.modules.multimodal.fusion", "\n", "            ", "lib", "=", "self", ".", "fusion_lib", "\n", "module", "=", "self", ".", "fusion_name", "\n", "", "elif", "flow", ".", "upper", "(", ")", "==", "'UNET'", ":", "\n", "# Search for the modality UNet in", "\n", "# torch_points3d.modules.multimodal.modalities.{modality}", "\n", "            ", "lib", "=", "self", ".", "modality_lib", "\n", "module", "=", "'UNet'", "\n", "", "else", ":", "\n", "# Search for the modality conv in", "\n", "# torch_points3d.modules.multimodal.modalities.{modality}", "\n", "            ", "lib", "=", "self", ".", "modality_lib", "\n", "module", "=", "self", ".", "module_name", "\n", "\n", "", "if", "not", "is_list", "(", "module", ")", ":", "\n", "            ", "return", "getattr", "(", "lib", ",", "module", ",", "None", ")", "\n", "", "elif", "index", "is", "None", ":", "\n", "            ", "return", "getattr", "(", "lib", ",", "module", "[", "0", "]", ",", "None", ")", "\n", "", "else", ":", "\n", "            ", "return", "getattr", "(", "lib", ",", "module", "[", "index", "]", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_architectures.unet.UnetBasedModel.__init__": [[109, 136], ["copy.deepcopy", "torch_points3d.models.base_model.BaseModel.__init__", "unet.UnetBasedModel._init_from_layer_list_format", "unet.UnetBasedModel._init_from_compact_format", "type"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_architectures.unet.UnetBasedModel._init_from_layer_list_format", "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_architectures.backbone.BackboneBasedModel._init_from_compact_format"], ["def", "__init__", "(", "self", ",", "opt", ",", "model_type", ",", "dataset", ":", "BaseDataset", ",", "modules_lib", ")", ":", "\n", "        ", "\"\"\"Construct a Unet generator\n        Parameters:\n            opt - options for the network generation\n            model_type - type of the model to be generated\n            num_class - output of the network\n            modules_lib - all modules that can be used in the UNet\n        We construct the U-Net from the innermost layer to the\n        outermost layer. It is a recursive process.\n\n        opt is expected to contains the following keys:\n        * down_conv\n        * up_conv\n        * OPTIONAL: innermost\n        \"\"\"", "\n", "opt", "=", "copy", ".", "deepcopy", "(", "opt", ")", "\n", "super", "(", "UnetBasedModel", ",", "self", ")", ".", "__init__", "(", "opt", ")", "\n", "self", ".", "_spatial_ops_dict", "=", "{", "\n", "\"neighbour_finder\"", ":", "[", "]", ",", "\"sampler\"", ":", "[", "]", ",", "\"upsample_op\"", ":", "[", "]", "}", "\n", "# Detect which options format has been used to define the model", "\n", "if", "type", "(", "opt", ".", "down_conv", ")", "is", "ListConfig", "or", "\"down_conv_nn\"", "not", "in", "opt", ".", "down_conv", ":", "\n", "            ", "self", ".", "_init_from_layer_list_format", "(", "\n", "opt", ",", "model_type", ",", "dataset", ",", "modules_lib", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_init_from_compact_format", "(", "\n", "opt", ",", "model_type", ",", "dataset", ",", "modules_lib", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_architectures.unet.UnetBasedModel._init_from_compact_format": [[137, 187], ["len", "unet.get_factory", "torch_points3d.utils.config.getattr_recursive", "torch_points3d.utils.config.getattr_recursive", "get_factory.", "unet.UnetBasedModel._fetch_arguments_up_and_down", "unet.UnetSkipConnectionBlock", "unet.UnetBasedModel._save_sampling_and_search", "getattr", "len", "len", "torch_points3d.utils.config.fetch_arguments_from_list", "unet.UnetBasedModel._factory_module.get_module", "unet.UnetSkipConnectionBlock", "torch_points3d.core.common_modules.base_modules.Identity", "range", "unet.UnetBasedModel._fetch_arguments_up_and_down", "unet.UnetSkipConnectionBlock", "unet.UnetBasedModel._save_sampling_and_search"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_architectures.unet.get_factory", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.config.getattr_recursive", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.config.getattr_recursive", "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_architectures.unet.UnetBasedModel._fetch_arguments_up_and_down", "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_architectures.backbone.BackboneBasedModel._save_sampling_and_search", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.config.fetch_arguments_from_list", "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_architectures.unet.ModalityFactory.get_module", "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_architectures.unet.UnetBasedModel._fetch_arguments_up_and_down", "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_architectures.backbone.BackboneBasedModel._save_sampling_and_search"], ["", "", "def", "_init_from_compact_format", "(", "self", ",", "opt", ",", "model_type", ",", "dataset", ",", "modules_lib", ")", ":", "\n", "        ", "\"\"\"Create a unetbasedmodel from the compact options format -\n        where the same convolution is given for each layer, and\n        arguments are given in lists.\n        \"\"\"", "\n", "num_convs", "=", "len", "(", "opt", ".", "down_conv", ".", "down_conv_nn", ")", "\n", "\n", "# Factory for creating up and down modules", "\n", "factory_module_cls", "=", "get_factory", "(", "model_type", ",", "modules_lib", ")", "\n", "down_conv_cls_name", "=", "getattr_recursive", "(", "\n", "opt", ",", "'down_conv.module_name'", ",", "None", ")", "\n", "up_conv_cls_name", "=", "getattr_recursive", "(", "opt", ",", "'up_conv.module_name'", ",", "None", ")", "\n", "self", ".", "_factory_module", "=", "factory_module_cls", "(", "\n", "down_conv_cls_name", ",", "up_conv_cls_name", ",", "modules_lib", ")", "\n", "\n", "# Construct unet structure", "\n", "has_innermost", "=", "getattr", "(", "opt", ",", "\"innermost\"", ",", "None", ")", "is", "not", "None", "\n", "if", "has_innermost", ":", "\n", "            ", "num_down", "=", "len", "(", "opt", ".", "down_conv", ".", "down_conv_nn", ")", "\n", "num_up", "=", "len", "(", "opt", ".", "up_conv", ".", "up_conv_nn", ")", "\n", "assert", "num_down", "+", "1", "==", "num_up", "\n", "\n", "args_up", "=", "fetch_arguments_from_list", "(", "opt", ".", "up_conv", ",", "0", ",", "SPECIAL_NAMES", ")", "\n", "args_up", "[", "\"up_conv_cls\"", "]", "=", "self", ".", "_factory_module", ".", "get_module", "(", "\"UP\"", ")", "\n", "\n", "unet_block", "=", "UnetSkipConnectionBlock", "(", "\n", "args_up", "=", "args_up", ",", "\n", "args_innermost", "=", "opt", ".", "innermost", ",", "\n", "modules_lib", "=", "modules_lib", ",", "\n", "submodule", "=", "None", ",", "\n", "innermost", "=", "True", ",", ")", "# add the innermost layer", "\n", "", "else", ":", "\n", "            ", "unet_block", "=", "Identity", "(", ")", "\n", "\n", "", "if", "num_convs", ">", "1", ":", "\n", "            ", "for", "index", "in", "range", "(", "num_convs", "-", "1", ",", "0", ",", "-", "1", ")", ":", "\n", "                ", "args_up", ",", "args_down", "=", "self", ".", "_fetch_arguments_up_and_down", "(", "\n", "opt", ",", "index", ")", "\n", "unet_block", "=", "UnetSkipConnectionBlock", "(", "\n", "args_up", "=", "args_up", ",", "args_down", "=", "args_down", ",", "submodule", "=", "unet_block", ")", "\n", "self", ".", "_save_sampling_and_search", "(", "unet_block", ")", "\n", "", "", "else", ":", "\n", "            ", "index", "=", "num_convs", "\n", "\n", "", "index", "-=", "1", "\n", "args_up", ",", "args_down", "=", "self", ".", "_fetch_arguments_up_and_down", "(", "opt", ",", "index", ")", "\n", "self", ".", "model", "=", "UnetSkipConnectionBlock", "(", "\n", "args_up", "=", "args_up", ",", "args_down", "=", "args_down", ",", "submodule", "=", "unet_block", ",", "\n", "outermost", "=", "True", ")", "# add the outermost layer", "\n", "self", ".", "_save_sampling_and_search", "(", "self", ".", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_architectures.unet.UnetBasedModel._init_from_layer_list_format": [[188, 243], ["unet.get_factory", "len", "range", "dict", "dict", "getattr", "getattr", "unet.UnetSkipConnectionBlock", "unet.UnetBasedModel._save_sampling_and_search", "torch_points3d.utils.config.flatten_compact_options", "torch_points3d.utils.config.flatten_compact_options", "getattr", "dict", "getattr", "unet.UnetSkipConnectionBlock", "dict", "dict", "getattr", "getattr", "unet.UnetSkipConnectionBlock", "type", "type", "len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.base_architectures.unet.get_factory", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_architectures.backbone.BackboneBasedModel._save_sampling_and_search", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.config.flatten_compact_options", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.config.flatten_compact_options", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "def", "_init_from_layer_list_format", "(", "\n", "self", ",", "opt", ",", "model_type", ",", "dataset", ",", "modules_lib", ")", ":", "\n", "        ", "\"\"\"Create a unetbasedmodel from the layer list options format -\n        where each layer of the unet is specified separately.\n        \"\"\"", "\n", "get_factory", "(", "model_type", ",", "modules_lib", ")", "\n", "\n", "down_conv_layers", "=", "opt", ".", "down_conv", "if", "type", "(", "opt", ".", "down_conv", ")", "is", "ListConfig", "else", "flatten_compact_options", "(", "opt", ".", "down_conv", ")", "\n", "up_conv_layers", "=", "opt", ".", "up_conv", "if", "type", "(", "opt", ".", "up_conv", ")", "is", "ListConfig", "else", "flatten_compact_options", "(", "opt", ".", "up_conv", ")", "\n", "num_convs", "=", "len", "(", "down_conv_layers", ")", "\n", "\n", "unet_block", "=", "[", "]", "\n", "has_innermost", "=", "getattr", "(", "opt", ",", "\"innermost\"", ",", "None", ")", "is", "not", "None", "\n", "if", "has_innermost", ":", "\n", "            ", "assert", "num_convs", "+", "1", "==", "len", "(", "up_conv_layers", ")", "\n", "\n", "up_layer", "=", "dict", "(", "up_conv_layers", "[", "0", "]", ")", "\n", "up_layer", "[", "\"up_conv_cls\"", "]", "=", "getattr", "(", "\n", "modules_lib", ",", "up_layer", "[", "\"module_name\"", "]", ")", "\n", "\n", "unet_block", "=", "UnetSkipConnectionBlock", "(", "\n", "args_up", "=", "up_layer", ",", "\n", "args_innermost", "=", "opt", ".", "innermost", ",", "\n", "modules_lib", "=", "modules_lib", ",", "\n", "innermost", "=", "True", ",", ")", "\n", "\n", "", "for", "index", "in", "range", "(", "num_convs", "-", "1", ",", "0", ",", "-", "1", ")", ":", "\n", "            ", "down_layer", "=", "dict", "(", "down_conv_layers", "[", "index", "]", ")", "\n", "up_layer", "=", "dict", "(", "up_conv_layers", "[", "num_convs", "-", "index", "]", ")", "\n", "\n", "down_layer", "[", "\"down_conv_cls\"", "]", "=", "getattr", "(", "\n", "modules_lib", ",", "down_layer", "[", "\"module_name\"", "]", ")", "\n", "up_layer", "[", "\"up_conv_cls\"", "]", "=", "getattr", "(", "\n", "modules_lib", ",", "up_layer", "[", "\"module_name\"", "]", ")", "\n", "\n", "unet_block", "=", "UnetSkipConnectionBlock", "(", "\n", "args_up", "=", "up_layer", ",", "\n", "args_down", "=", "down_layer", ",", "\n", "modules_lib", "=", "modules_lib", ",", "\n", "submodule", "=", "unet_block", ",", ")", "\n", "\n", "", "up_layer", "=", "dict", "(", "up_conv_layers", "[", "-", "1", "]", ")", "\n", "down_layer", "=", "dict", "(", "down_conv_layers", "[", "0", "]", ")", "\n", "down_layer", "[", "\"down_conv_cls\"", "]", "=", "getattr", "(", "\n", "modules_lib", ",", "down_layer", "[", "\"module_name\"", "]", ")", "\n", "up_layer", "[", "\"up_conv_cls\"", "]", "=", "getattr", "(", "\n", "modules_lib", ",", "up_layer", "[", "\"module_name\"", "]", ")", "\n", "\n", "self", ".", "model", "=", "UnetSkipConnectionBlock", "(", "\n", "args_up", "=", "up_layer", ",", "args_down", "=", "down_layer", ",", "submodule", "=", "unet_block", ",", "\n", "outermost", "=", "True", ")", "\n", "\n", "self", ".", "_save_sampling_and_search", "(", "self", ".", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_architectures.unet.UnetBasedModel._save_sampling_and_search": [[244, 264], ["getattr", "torch_points3d.utils.config.is_list", "getattr", "torch_points3d.utils.config.is_list", "getattr", "unet.UnetBasedModel._spatial_ops_dict[].append"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.config.is_list", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.config.is_list", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append"], ["", "def", "_save_sampling_and_search", "(", "self", ",", "submodule", ")", ":", "\n", "        ", "sampler", "=", "getattr", "(", "submodule", ".", "down", ",", "\"sampler\"", ",", "None", ")", "\n", "if", "is_list", "(", "sampler", ")", ":", "\n", "            ", "self", ".", "_spatial_ops_dict", "[", "\"sampler\"", "]", "=", "sampler", "+", "self", ".", "_spatial_ops_dict", "[", "\"sampler\"", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "_spatial_ops_dict", "[", "\"sampler\"", "]", "=", "[", "sampler", "]", "+", "self", ".", "_spatial_ops_dict", "[", "\"sampler\"", "]", "\n", "\n", "", "neighbour_finder", "=", "getattr", "(", "submodule", ".", "down", ",", "\"neighbour_finder\"", ",", "None", ")", "\n", "if", "is_list", "(", "neighbour_finder", ")", ":", "\n", "            ", "self", ".", "_spatial_ops_dict", "[", "\"neighbour_finder\"", "]", "=", "neighbour_finder", "+", "self", ".", "_spatial_ops_dict", "[", "\"neighbour_finder\"", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "_spatial_ops_dict", "[", "\"neighbour_finder\"", "]", "=", "[", "neighbour_finder", "]", "+", "self", ".", "_spatial_ops_dict", "[", "\"neighbour_finder\"", "]", "\n", "\n", "", "upsample_op", "=", "getattr", "(", "submodule", ".", "up", ",", "\"upsample_op\"", ",", "None", ")", "\n", "if", "upsample_op", ":", "\n", "            ", "self", ".", "_spatial_ops_dict", "[", "\"upsample_op\"", "]", ".", "append", "(", "upsample_op", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_architectures.unet.UnetBasedModel._fetch_arguments_up_and_down": [[265, 278], ["torch_points3d.utils.config.fetch_arguments_from_list", "unet.UnetBasedModel._factory_module.get_module", "torch_points3d.utils.config.fetch_arguments_from_list", "unet.UnetBasedModel._factory_module.get_module", "len", "getattr"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.config.fetch_arguments_from_list", "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_architectures.unet.ModalityFactory.get_module", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.config.fetch_arguments_from_list", "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_architectures.unet.ModalityFactory.get_module", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "", "def", "_fetch_arguments_up_and_down", "(", "self", ",", "opt", ",", "index", ")", ":", "\n", "# Defines down arguments", "\n", "        ", "args_down", "=", "fetch_arguments_from_list", "(", "\n", "opt", ".", "down_conv", ",", "index", ",", "SPECIAL_NAMES", ")", "\n", "args_down", "[", "\"index\"", "]", "=", "index", "\n", "args_down", "[", "\"down_conv_cls\"", "]", "=", "self", ".", "_factory_module", ".", "get_module", "(", "\"DOWN\"", ")", "\n", "\n", "# Defines up arguments", "\n", "idx", "=", "len", "(", "getattr", "(", "opt", ".", "up_conv", ",", "\"up_conv_nn\"", ")", ")", "-", "index", "-", "1", "\n", "args_up", "=", "fetch_arguments_from_list", "(", "opt", ".", "up_conv", ",", "idx", ",", "SPECIAL_NAMES", ")", "\n", "args_up", "[", "\"index\"", "]", "=", "index", "\n", "args_up", "[", "\"up_conv_cls\"", "]", "=", "self", ".", "_factory_module", ".", "get_module", "(", "\"UP\"", ")", "\n", "return", "args_up", ",", "args_down", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_architectures.unet.UnetSkipConnectionBlock.__init__": [[287, 324], ["super().__init__", "torch_points3d.utils.config.get_from_kwargs", "getattr", "getattr.", "torch_points3d.utils.config.get_from_kwargs", "torch_points3d.utils.config.get_from_kwargs.", "torch_points3d.utils.config.get_from_kwargs", "torch_points3d.utils.config.get_from_kwargs", "torch_points3d.utils.config.get_from_kwargs.", "torch_points3d.utils.config.get_from_kwargs."], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.config.get_from_kwargs", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.config.get_from_kwargs", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.config.get_from_kwargs", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.config.get_from_kwargs"], ["def", "__init__", "(", "\n", "self", ",", "args_up", "=", "None", ",", "args_down", "=", "None", ",", "args_innermost", "=", "None", ",", "\n", "modules_lib", "=", "None", ",", "submodule", "=", "None", ",", "outermost", "=", "False", ",", "\n", "innermost", "=", "False", ")", ":", "\n", "        ", "\"\"\"Construct a Unet submodule with skip connections.\n        Parameters:\n            args_up -- arguments for up convs\n            args_down -- arguments for down convs\n            args_innermost -- arguments for innermost\n            submodule (UnetSkipConnectionBlock) -- previously defined\n                submodules\n            outermost (bool)    -- if this module is the outermost\n                module\n            innermost (bool)    -- if this module is the innermost\n                module\n        \"\"\"", "\n", "super", "(", "UnetSkipConnectionBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "outermost", "=", "outermost", "\n", "self", ".", "innermost", "=", "innermost", "\n", "\n", "if", "innermost", ":", "\n", "            ", "assert", "not", "outermost", "\n", "module_name", "=", "get_from_kwargs", "(", "args_innermost", ",", "\"module_name\"", ")", "\n", "inner_module_cls", "=", "getattr", "(", "modules_lib", ",", "module_name", ")", "\n", "self", ".", "inner", "=", "inner_module_cls", "(", "**", "args_innermost", ")", "\n", "upconv_cls", "=", "get_from_kwargs", "(", "args_up", ",", "\"up_conv_cls\"", ")", "\n", "self", ".", "up", "=", "upconv_cls", "(", "**", "args_up", ")", "\n", "", "else", ":", "\n", "            ", "downconv_cls", "=", "get_from_kwargs", "(", "args_down", ",", "\"down_conv_cls\"", ")", "\n", "upconv_cls", "=", "get_from_kwargs", "(", "args_up", ",", "\"up_conv_cls\"", ")", "\n", "downconv", "=", "downconv_cls", "(", "**", "args_down", ")", "\n", "upconv", "=", "upconv_cls", "(", "**", "args_up", ")", "\n", "\n", "self", ".", "down", "=", "downconv", "\n", "self", ".", "submodule", "=", "submodule", "\n", "self", ".", "up", "=", "upconv", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_architectures.unet.UnetSkipConnectionBlock.forward": [[325, 335], ["unet.UnetSkipConnectionBlock.inner", "unet.UnetSkipConnectionBlock.up", "unet.UnetSkipConnectionBlock.down", "unet.UnetSkipConnectionBlock.submodule", "unet.UnetSkipConnectionBlock.up"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "data", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "self", ".", "innermost", ":", "\n", "            ", "data_out", "=", "self", ".", "inner", "(", "data", ",", "**", "kwargs", ")", "\n", "data", "=", "(", "data_out", ",", "data", ")", "\n", "return", "self", ".", "up", "(", "data", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "            ", "data_out", "=", "self", ".", "down", "(", "data", ",", "**", "kwargs", ")", "\n", "data_out2", "=", "self", ".", "submodule", "(", "data_out", ",", "**", "kwargs", ")", "\n", "data", "=", "(", "data_out2", ",", "data", ")", "\n", "return", "self", ".", "up", "(", "data", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_architectures.unet.UnwrappedUnetBasedModel.__init__": [[343, 401], ["copy.deepcopy", "torch_points3d.models.base_model.BaseModel.__init__", "torch_points3d.utils.config.fetch_modalities", "torch_points3d.utils.config.is_list", "unet.UnwrappedUnetBasedModel._init_from_compact_format"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.config.fetch_modalities", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.config.is_list", "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_architectures.backbone.BackboneBasedModel._init_from_compact_format"], ["def", "__init__", "(", "self", ",", "opt", ",", "model_type", ",", "dataset", ":", "BaseDataset", ",", "modules_lib", ")", ":", "\n", "        ", "\"\"\"Construct a Unet unwrapped generator. Supports multimodal\n        encoding.\n\n        The layers will be appended within lists with the following\n        names:\n        * down_modules : Contains all the down module - may be\n            multimodal\n        * inner_modules : Contain one or more inner modules\n        * up_modules: Contains all the up module\n\n        Parameters:\n            opt - options for the network generation\n            model_type - type of the model to be generated\n            num_class - output of the network\n            modules_lib - all modules that can be used in the UNet\n\n        For a recursive implementation. See UnetBaseModel.\n\n        opt is expected to have the following format:\n            down_conv:\n                module_name: ...\n                down_conv_nn: ...\n                *args\n\n                <modality_name>: [OPTIONAL]\n                    module_name: ...\n                    down_conv_nn: ...\n                    *args\n\n                    merge:\n                        module_name: ...\n                        *args\n\n            innermost: [OPTIONAL]\n                module_name: ...\n                *args\n\n            up_conv:\n                module_name: ...\n                up_conv_nn: ...\n                *args\n        \"\"\"", "\n", "opt", "=", "copy", ".", "deepcopy", "(", "opt", ")", "\n", "super", "(", "UnwrappedUnetBasedModel", ",", "self", ")", ".", "__init__", "(", "opt", ")", "\n", "self", ".", "_spatial_ops_dict", "=", "{", "\n", "\"neighbour_finder\"", ":", "[", "]", ",", "\"sampler\"", ":", "[", "]", ",", "\"upsample_op\"", ":", "[", "]", "}", "\n", "\n", "# Check if one of the supported modalities is present in the", "\n", "# config", "\n", "self", ".", "_modalities", "=", "fetch_modalities", "(", "opt", ".", "down_conv", ",", "MODALITY_NAMES", ")", "\n", "\n", "# Detect which options format has been used to define the model", "\n", "if", "is_list", "(", "opt", ".", "down_conv", ")", "or", "\"down_conv_nn\"", "not", "in", "opt", ".", "down_conv", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "else", ":", "\n", "            ", "self", ".", "_init_from_compact_format", "(", "\n", "opt", ",", "model_type", ",", "dataset", ",", "modules_lib", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_architectures.unet.UnwrappedUnetBasedModel._init_from_compact_format": [[402, 569], ["torch_points3d.utils.config.getattr_recursive", "unet.get_factory", "torch_points3d.utils.config.getattr_recursive", "torch_points3d.utils.config.getattr_recursive", "torch.nn.ModuleList", "len", "range", "getattr", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch_points3d.models.base_model.BaseModel.get_metric_loss_and_miner", "get_factory.", "getattr", "unet.UnwrappedUnetBasedModel._create_inner_modules", "unet.UnwrappedUnetBasedModel.inner_modules.append", "unet.UnwrappedUnetBasedModel._build_module", "unet.UnwrappedUnetBasedModel._save_sampling_and_search", "down_modules.append", "int", "getattr", "getattr", "range", "getattr", "getattr", "unet.ModalityFactory", "unet.UnwrappedUnetBasedModel.inner_modules.append", "torch_points3d.core.common_modules.base_modules.Identity", "torch_points3d.core.common_modules.base_modules.Identity", "len", "enumerate", "torch_points3d.modules.multimodal.modules.MultimodalBlockDown", "len", "unet.UnwrappedUnetBasedModel._build_module", "unet.UnwrappedUnetBasedModel._save_upsample", "unet.UnwrappedUnetBasedModel.up_modules.append", "range", "len", "len", "torch_points3d.modules.multimodal.modules.IdentityBranch", "range", "getattr", "len", "len", "unet.UnwrappedUnetBasedModel._build_module", "unet.UnwrappedUnetBasedModel._build_module", "unet.UnwrappedUnetBasedModel._build_module", "torch_points3d.utils.config.fetch_arguments_from_list", "torch_points3d.utils.config.fetch_arguments_from_list.get", "torch_points3d.utils.config.fetch_arguments_from_list.get", "torch_points3d.utils.config.fetch_arguments_from_list.get", "torch_points3d.utils.config.fetch_arguments_from_list.get", "torch_points3d.utils.config.fetch_arguments_from_list.get", "torch_points3d.utils.config.fetch_arguments_from_list.get", "torch_points3d.modules.multimodal.modules.UnimodalBranch", "zip", "len", "torch_points3d.utils.config.is_list", "len", "set", "unet.UnwrappedUnetBasedModel._module_factories[].get_module", "unet.UnwrappedUnetBasedModel.", "unet.UnwrappedUnetBasedModel._build_module", "torch_points3d.core.common_modules.base_modules.Identity", "torch_points3d.core.common_modules.base_modules.Identity"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.config.getattr_recursive", "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_architectures.unet.get_factory", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.config.getattr_recursive", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.config.getattr_recursive", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.get_metric_loss_and_miner", "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_architectures.unet.UnwrappedUnetBasedModel._create_inner_modules", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_architectures.backbone.BackboneBasedModel._build_module", "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_architectures.backbone.BackboneBasedModel._save_sampling_and_search", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_architectures.backbone.BackboneBasedModel._build_module", "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_architectures.unet.UnwrappedUnetBasedModel._save_upsample", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_architectures.backbone.BackboneBasedModel._build_module", "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_architectures.backbone.BackboneBasedModel._build_module", "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_architectures.backbone.BackboneBasedModel._build_module", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.config.fetch_arguments_from_list", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.config.is_list", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_architectures.unet.ModalityFactory.get_module", "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_architectures.backbone.BackboneBasedModel._build_module"], ["", "", "def", "_init_from_compact_format", "(", "self", ",", "opt", ",", "model_type", ",", "dataset", ",", "modules_lib", ")", ":", "\n", "        ", "\"\"\"Create a unetbasedmodel from the compact options format -\n        where the same convolution is given for each layer, and\n        arguments are given in lists.\n        \"\"\"", "\n", "self", ".", "save_sampling_id", "=", "getattr_recursive", "(", "\n", "opt", ",", "'down_conv.save_sampling_id'", ",", "None", ")", "\n", "\n", "# Factory for creating up and down modules for the main 3D", "\n", "# modality", "\n", "factory_module_cls", "=", "get_factory", "(", "model_type", ",", "modules_lib", ")", "\n", "down_conv_cls_name", "=", "getattr_recursive", "(", "\n", "opt", ",", "'down_conv.module_name'", ",", "None", ")", "\n", "up_conv_cls_name", "=", "getattr_recursive", "(", "opt", ",", "'up_conv.module_name'", ",", "None", ")", "\n", "self", ".", "_module_factories", "=", "{", "'main'", ":", "factory_module_cls", "(", "\n", "down_conv_cls_name", ",", "up_conv_cls_name", ",", "modules_lib", ")", "}", "\n", "\n", "# Factories for creating modules for additional modalities", "\n", "if", "self", ".", "is_multimodal", ":", "\n", "            ", "for", "m", "in", "self", ".", "modalities", ":", "\n", "                ", "mod_opt", "=", "opt", ".", "down_conv", "[", "m", "]", "\n", "self", ".", "_module_factories", "[", "m", "]", "=", "ModalityFactory", "(", "\n", "m", ",", "\n", "mod_opt", ".", "down_conv", ".", "module_name", ",", "\n", "mod_opt", ".", "atomic_pooling", ".", "module_name", ",", "\n", "mod_opt", ".", "view_pooling", ".", "module_name", ",", "\n", "mod_opt", ".", "fusion", ".", "module_name", ")", "\n", "\n", "# Innermost module - 3D conv only", "\n", "", "", "self", ".", "inner_modules", "=", "nn", ".", "ModuleList", "(", ")", "\n", "has_innermost", "=", "getattr", "(", "opt", ",", "\"innermost\"", ",", "None", ")", "is", "not", "None", "\n", "if", "has_innermost", ":", "\n", "            ", "inners", "=", "self", ".", "_create_inner_modules", "(", "opt", ".", "innermost", ",", "modules_lib", ")", "\n", "for", "inner", "in", "inners", ":", "\n", "                ", "self", ".", "inner_modules", ".", "append", "(", "inner", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "inner_modules", ".", "append", "(", "Identity", "(", ")", ")", "\n", "\n", "# Down modules - 3D conv only", "\n", "", "down_modules", "=", "[", "]", "\n", "num_down_conv", "=", "len", "(", "opt", ".", "down_conv", ".", "down_conv_nn", ")", "\n", "for", "i", "in", "range", "(", "num_down_conv", ")", ":", "\n", "            ", "down_conv_3d", "=", "self", ".", "_build_module", "(", "opt", ".", "down_conv", ",", "i", ",", "flow", "=", "\"DOWN\"", ")", "\n", "self", ".", "_save_sampling_and_search", "(", "down_conv_3d", ")", "\n", "down_modules", ".", "append", "(", "down_conv_3d", ")", "\n", "\n", "# Number of early modules with no 3D conv and no skip-connections", "\n", "", "self", ".", "_n_early_conv", "=", "getattr", "(", "\n", "opt", ".", "down_conv", ",", "'n_early_conv'", ",", "int", "(", "self", ".", "is_multimodal", ")", ")", "\n", "\n", "# Down modules - modality-specific branches", "\n", "if", "self", ".", "is_multimodal", ":", "\n", "\n", "# Whether the multimodal blocks should use 3D convolutions", "\n", "# before the fusion, after the fusion or both. Inject", "\n", "# Identity accordingly in the down_modules", "\n", "            ", "conv3d_before_fusion", "=", "getattr", "(", "\n", "opt", ".", "down_conv", ",", "'conv3d_before_fusion'", ",", "True", ")", "\n", "conv3d_after_fusion", "=", "getattr", "(", "\n", "opt", ".", "down_conv", ",", "'conv3d_after_fusion'", ",", "True", ")", "\n", "assert", "conv3d_before_fusion", "or", "conv3d_after_fusion", ",", "f'Multimodal blocks need a 3D convolution either before or '", "f'after the fusion.'", "\n", "if", "conv3d_before_fusion", "and", "not", "conv3d_after_fusion", ":", "\n", "                ", "down_modules", "=", "[", "y", "for", "x", "in", "down_modules", "for", "y", "in", "(", "x", ",", "Identity", "(", ")", ")", "]", "\n", "", "if", "not", "conv3d_before_fusion", "and", "conv3d_after_fusion", ":", "\n", "                ", "down_modules", "=", "[", "y", "for", "x", "in", "down_modules", "for", "y", "in", "(", "Identity", "(", ")", ",", "x", ")", "]", "\n", "\n", "# Insert Identity 3D convolutions modules to allow branching", "\n", "# directly into the raw 3D features for early fusion", "\n", "", "early_modules", "=", "[", "Identity", "(", ")", "for", "_", "in", "range", "(", "self", ".", "n_early_conv", "*", "2", ")", "]", "\n", "down_modules", "=", "early_modules", "+", "down_modules", "\n", "\n", "# Compute the number of multimodal blocks", "\n", "assert", "len", "(", "down_modules", ")", "%", "2", "==", "0", "and", "len", "(", "down_modules", ")", ">", "0", ",", "f\"Expected an even number of 3D conv modules but got \"", "f\"{len(down_modules)} modules instead.\"", "\n", "n_mm_blocks", "=", "len", "(", "down_modules", ")", "//", "2", "\n", "\n", "branches", "=", "[", "\n", "{", "m", ":", "IdentityBranch", "(", ")", "for", "m", "in", "self", ".", "modalities", "}", "\n", "for", "_", "in", "range", "(", "n_mm_blocks", ")", "]", "\n", "\n", "for", "m", "in", "self", ".", "modalities", ":", "\n", "\n", "# Get the branching indices", "\n", "                ", "b_idx", "=", "opt", ".", "down_conv", "[", "m", "]", ".", "branching_index", "\n", "b_idx", "=", "[", "b_idx", "]", "if", "not", "is_list", "(", "b_idx", ")", "else", "b_idx", "\n", "\n", "# Check whether the modality module is a UNet", "\n", "is_unet", "=", "getattr", "(", "opt", ".", "down_conv", "[", "m", "]", ",", "'up_conv'", ",", "None", ")", "is", "not", "None", "\n", "assert", "not", "is_unet", "or", "len", "(", "b_idx", ")", "==", "1", ",", "f\"Cannot build a {m}-specific UNet with multiple \"", "f\"branching indices. Consider removing the 'up_conv' \"", "f\"from the {m} modality or providing a single branching \"", "f\"index.\"", "\n", "\n", "# Ensure the modality has no modules pointing to the", "\n", "# same branching index", "\n", "assert", "len", "(", "set", "(", "b_idx", ")", ")", "==", "len", "(", "b_idx", ")", ",", "f\"Cannot build multimodal model: some '{m}' blocks have \"", "f\"the same branching index.\"", "\n", "\n", "# Build the branches", "\n", "for", "i", ",", "idx", "in", "enumerate", "(", "b_idx", ")", ":", "\n", "\n", "# Ensure the branching index matches the down_conv", "\n", "# length", "\n", "                    ", "assert", "idx", "<", "n_mm_blocks", ",", "f\"Cannot build multimodal model: branching index \"", "f\"'{idx}' of modality '{m}' is too large for the \"", "f\"'{n_mm_blocks}' multimodal blocks.\"", "\n", "\n", "if", "is_unet", ":", "\n", "                        ", "unet_cls", "=", "self", ".", "_module_factories", "[", "m", "]", ".", "get_module", "(", "'UNET'", ")", "\n", "conv", "=", "unet_cls", "(", "opt", ".", "down_conv", "[", "m", "]", ")", "\n", "", "else", ":", "\n", "                        ", "conv", "=", "self", ".", "_build_module", "(", "\n", "opt", ".", "down_conv", "[", "m", "]", ".", "down_conv", ",", "i", ",", "modality", "=", "m", ")", "\n", "", "atomic_pool", "=", "self", ".", "_build_module", "(", "\n", "opt", ".", "down_conv", "[", "m", "]", ".", "atomic_pooling", ",", "i", ",", "modality", "=", "m", ",", "\n", "flow", "=", "'ATOMIC'", ")", "\n", "view_pool", "=", "self", ".", "_build_module", "(", "\n", "opt", ".", "down_conv", "[", "m", "]", ".", "view_pooling", ",", "i", ",", "modality", "=", "m", ",", "\n", "flow", "=", "'VIEW'", ")", "\n", "fusion", "=", "self", ".", "_build_module", "(", "\n", "opt", ".", "down_conv", "[", "m", "]", ".", "fusion", ",", "i", ",", "modality", "=", "m", ",", "\n", "flow", "=", "'FUSION'", ")", "\n", "\n", "opt_branch", "=", "fetch_arguments_from_list", "(", "\n", "opt", ".", "down_conv", "[", "m", "]", ",", "i", ",", "SPECIAL_NAMES", ")", "\n", "drop_3d", "=", "opt_branch", ".", "get", "(", "'drop_3d'", ",", "0", ")", "\n", "drop_mod", "=", "opt_branch", ".", "get", "(", "'drop_mod'", ",", "0", ")", "\n", "keep_last_view", "=", "opt_branch", ".", "get", "(", "'keep_last_view'", ",", "False", ")", "\n", "checkpointing", "=", "opt_branch", ".", "get", "(", "'checkpointing'", ",", "''", ")", "\n", "out_channels", "=", "opt_branch", ".", "get", "(", "'out_channels'", ",", "None", ")", "\n", "interpolate", "=", "opt_branch", ".", "get", "(", "'interpolate'", ",", "False", ")", "\n", "\n", "# Group modules into a UnimodalBranch and update the", "\n", "# branches at the proper branching point", "\n", "branches", "[", "idx", "]", "[", "m", "]", "=", "UnimodalBranch", "(", "\n", "conv", ",", "atomic_pool", ",", "view_pool", ",", "fusion", ",", "drop_3d", "=", "drop_3d", ",", "\n", "drop_mod", "=", "drop_mod", ",", "keep_last_view", "=", "keep_last_view", ",", "\n", "checkpointing", "=", "checkpointing", ",", "out_channels", "=", "out_channels", ",", "\n", "interpolate", "=", "interpolate", ")", "\n", "\n", "# Update the down_modules list", "\n", "", "", "down_modules", "=", "[", "\n", "MultimodalBlockDown", "(", "conv_1", ",", "conv_2", ",", "**", "modal_conv", ")", "\n", "for", "conv_1", ",", "conv_2", ",", "modal_conv", "\n", "in", "zip", "(", "down_modules", "[", ":", ":", "2", "]", ",", "down_modules", "[", "1", ":", ":", "2", "]", ",", "branches", ")", "]", "\n", "\n", "# Down modules - combined", "\n", "", "self", ".", "down_modules", "=", "nn", ".", "ModuleList", "(", "down_modules", ")", "\n", "\n", "# Up modules - 3D conv only", "\n", "self", ".", "up_modules", "=", "nn", ".", "ModuleList", "(", ")", "\n", "if", "up_conv_cls_name", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "opt", ".", "up_conv", ".", "up_conv_nn", ")", ")", ":", "\n", "                ", "up_module", "=", "self", ".", "_build_module", "(", "opt", ".", "up_conv", ",", "i", ",", "flow", "=", "\"UP\"", ")", "\n", "self", ".", "_save_upsample", "(", "up_module", ")", "\n", "self", ".", "up_modules", ".", "append", "(", "up_module", ")", "\n", "\n", "# Loss", "\n", "", "", "self", ".", "metric_loss_module", ",", "self", ".", "miner_module", "=", "BaseModel", ".", "get_metric_loss_and_miner", "(", "\n", "getattr", "(", "opt", ",", "\"metric_loss\"", ",", "None", ")", ",", "getattr", "(", "opt", ",", "\"miner\"", ",", "None", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_architectures.unet.UnwrappedUnetBasedModel._save_sampling_and_search": [[570, 582], ["getattr", "torch_points3d.utils.config.is_list", "getattr", "torch_points3d.utils.config.is_list", "unet.UnwrappedUnetBasedModel._spatial_ops_dict[].append", "unet.UnwrappedUnetBasedModel._spatial_ops_dict[].append"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.config.is_list", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.config.is_list", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append"], ["", "def", "_save_sampling_and_search", "(", "self", ",", "down_conv", ")", ":", "\n", "        ", "sampler", "=", "getattr", "(", "down_conv", ",", "\"sampler\"", ",", "None", ")", "\n", "if", "is_list", "(", "sampler", ")", ":", "\n", "            ", "self", ".", "_spatial_ops_dict", "[", "\"sampler\"", "]", "+=", "sampler", "\n", "", "else", ":", "\n", "            ", "self", ".", "_spatial_ops_dict", "[", "\"sampler\"", "]", ".", "append", "(", "sampler", ")", "\n", "\n", "", "neighbour_finder", "=", "getattr", "(", "down_conv", ",", "\"neighbour_finder\"", ",", "None", ")", "\n", "if", "is_list", "(", "neighbour_finder", ")", ":", "\n", "            ", "self", ".", "_spatial_ops_dict", "[", "\"neighbour_finder\"", "]", "+=", "neighbour_finder", "\n", "", "else", ":", "\n", "            ", "self", ".", "_spatial_ops_dict", "[", "\"neighbour_finder\"", "]", ".", "append", "(", "neighbour_finder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_architectures.unet.UnwrappedUnetBasedModel._save_upsample": [[583, 587], ["getattr", "unet.UnwrappedUnetBasedModel._spatial_ops_dict[].append"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append"], ["", "", "def", "_save_upsample", "(", "self", ",", "up_conv", ")", ":", "\n", "        ", "upsample_op", "=", "getattr", "(", "up_conv", ",", "\"upsample_op\"", ",", "None", ")", "\n", "if", "upsample_op", ":", "\n", "            ", "self", ".", "_spatial_ops_dict", "[", "\"upsample_op\"", "]", ".", "append", "(", "upsample_op", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_architectures.unet.UnwrappedUnetBasedModel._collect_sampling_ids": [[588, 605], ["enumerate", "extract_matching_key.startswith", "isinstance", "unet.UnwrappedUnetBasedModel._collect_sampling_ids.extract_matching_key"], "methods", ["None"], ["", "", "def", "_collect_sampling_ids", "(", "self", ",", "list_data", ")", ":", "\n", "\n", "        ", "def", "extract_matching_key", "(", "keys", ",", "start_token", ")", ":", "\n", "            ", "for", "key", "in", "keys", ":", "\n", "                ", "if", "key", ".", "startswith", "(", "start_token", ")", ":", "\n", "                    ", "return", "key", "\n", "", "", "return", "None", "\n", "\n", "", "d", "=", "{", "}", "\n", "if", "self", ".", "save_sampling_id", ":", "\n", "            ", "for", "idx", ",", "data", "in", "enumerate", "(", "list_data", ")", ":", "\n", "                ", "if", "isinstance", "(", "data", ",", "MMData", ")", ":", "\n", "                    ", "data", "=", "data", ".", "data", "\n", "", "key", "=", "extract_matching_key", "(", "data", ".", "keys", ",", "\"sampling_id\"", ")", "\n", "if", "key", ":", "\n", "                    ", "d", "[", "key", "]", "=", "getattr", "(", "data", ",", "key", ")", "\n", "", "", "", "return", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_architectures.unet.UnwrappedUnetBasedModel._create_inner_modules": [[606, 620], ["torch_points3d.utils.config.is_list", "torch_points3d.utils.config.get_from_kwargs", "getattr", "inners.append", "torch_points3d.utils.config.get_from_kwargs", "getattr", "inners.append", "getattr.", "getattr."], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.config.is_list", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.config.get_from_kwargs", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.config.get_from_kwargs", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append"], ["", "def", "_create_inner_modules", "(", "self", ",", "args_innermost", ",", "modules_lib", ")", ":", "\n", "        ", "inners", "=", "[", "]", "\n", "if", "is_list", "(", "args_innermost", ")", ":", "\n", "            ", "for", "inner_opt", "in", "args_innermost", ":", "\n", "                ", "module_name", "=", "get_from_kwargs", "(", "inner_opt", ",", "\"module_name\"", ")", "\n", "inner_module_cls", "=", "getattr", "(", "modules_lib", ",", "module_name", ")", "\n", "inners", ".", "append", "(", "inner_module_cls", "(", "**", "inner_opt", ")", ")", "\n", "\n", "", "", "else", ":", "\n", "            ", "module_name", "=", "get_from_kwargs", "(", "args_innermost", ",", "\"module_name\"", ")", "\n", "inner_module_cls", "=", "getattr", "(", "modules_lib", ",", "module_name", ")", "\n", "inners", ".", "append", "(", "inner_module_cls", "(", "**", "args_innermost", ")", ")", "\n", "\n", "", "return", "inners", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_architectures.unet.UnwrappedUnetBasedModel._build_module": [[621, 637], ["torch_points3d.utils.config.fetch_arguments_from_list", "unet.UnwrappedUnetBasedModel._module_factories[].get_module", "unet.UnwrappedUnetBasedModel."], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.config.fetch_arguments_from_list", "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_architectures.unet.ModalityFactory.get_module"], ["", "def", "_build_module", "(", "self", ",", "conv_opt", ",", "index", ",", "flow", "=", "'DOWN'", ",", "modality", "=", "'main'", ")", ":", "\n", "        ", "\"\"\"Builds a convolution (up or down) or a merge block in the\n        case of multimodal models.\n\n        Arguments:\n            conv_opt - model config subset describing the convolutional\n                block\n            index - layer index in sequential order (as they come in\n                the config)\n            flow - \"UP\", \"DOWN\", \"ATOMIC, \"VIEW\" or \"FUSION\"\n            modality - string among supported modalities\n        \"\"\"", "\n", "args", "=", "fetch_arguments_from_list", "(", "conv_opt", ",", "index", ",", "SPECIAL_NAMES", ")", "\n", "args", "[", "\"index\"", "]", "=", "index", "\n", "module", "=", "self", ".", "_module_factories", "[", "modality", "]", ".", "get_module", "(", "flow", ",", "index", "=", "index", ")", "\n", "return", "module", "(", "**", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_architectures.unet.UnwrappedUnetBasedModel.n_early_conv": [[638, 641], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "n_early_conv", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_n_early_conv", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_architectures.unet.UnwrappedUnetBasedModel.forward": [[642, 679], ["range", "unet.UnwrappedUnetBasedModel._collect_sampling_ids", "range", "unet.UnwrappedUnetBasedModel.items", "stack_down.append", "isinstance", "stack_down.append", "len", "setattr", "len", "stack_down.pop"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.base_architectures.unet.UnwrappedUnetBasedModel._collect_sampling_ids", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "def", "forward", "(", "\n", "self", ",", "data", ",", "precomputed_down", "=", "None", ",", "precomputed_up", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"This method does a forward on the Unet assuming symmetrical\n        skip connections\n\n        Parameters\n        ----------\n        data: torch.geometric.Data\n            Data object that contains all info required by the modules\n        precomputed_down: torch.geometric.Data\n            Precomputed data that will be passed to the down convs\n        precomputed_up: torch.geometric.Data\n            Precomputed data that will be passed to the up convs\n        \"\"\"", "\n", "# TODO : expand to handle multimodal data or let child classes handle it ?", "\n", "if", "self", ".", "is_multimodal", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "stack_down", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "down_modules", ")", "-", "1", ")", ":", "\n", "            ", "data", "=", "self", ".", "down_modules", "[", "i", "]", "(", "data", ",", "precomputed", "=", "precomputed_down", ")", "\n", "stack_down", ".", "append", "(", "data", ")", "\n", "", "data", "=", "self", ".", "down_modules", "[", "-", "1", "]", "(", "data", ",", "precomputed", "=", "precomputed_down", ")", "\n", "\n", "if", "not", "isinstance", "(", "self", ".", "inner_modules", "[", "0", "]", ",", "Identity", ")", ":", "\n", "            ", "stack_down", ".", "append", "(", "data", ")", "\n", "data", "=", "self", ".", "inner_modules", "[", "0", "]", "(", "data", ")", "\n", "\n", "", "sampling_ids", "=", "self", ".", "_collect_sampling_ids", "(", "stack_down", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "up_modules", ")", ")", ":", "\n", "            ", "skip", "=", "stack_down", ".", "pop", "(", "-", "1", ")", "if", "stack_down", "else", "None", "\n", "data", "=", "self", ".", "up_modules", "[", "i", "]", "(", "(", "data", ",", "skip", ")", ",", "precomputed", "=", "precomputed_up", ")", "\n", "\n", "", "for", "key", ",", "value", "in", "sampling_ids", ".", "items", "(", ")", ":", "\n", "            ", "setattr", "(", "data", ",", "key", ",", "value", ")", "\n", "", "return", "data", "\n", "", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_architectures.unet.get_factory": [[35, 41], ["getattr"], "function", ["None"], ["", "", "", "def", "get_factory", "(", "model_name", ",", "modules_lib", ")", "->", "BaseFactory", ":", "\n", "    ", "factory_module_cls", "=", "getattr", "(", "\n", "modules_lib", ",", "\"{}Factory\"", ".", "format", "(", "model_name", ")", ",", "None", ")", "\n", "if", "factory_module_cls", "is", "None", ":", "\n", "        ", "factory_module_cls", "=", "BaseFactory", "\n", "", "return", "factory_module_cls", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_architectures.backbone.BackboneBasedModel.__init__": [[28, 56], ["copy.deepcopy", "torch_points3d.models.base_model.BaseModel.__init__", "torch_points3d.utils.config.fetch_modalities", "torch_points3d.utils.config.is_list", "backbone.BackboneBasedModel._init_from_compact_format"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.config.fetch_modalities", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.config.is_list", "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_architectures.backbone.BackboneBasedModel._init_from_compact_format"], ["def", "__init__", "(", "self", ",", "opt", ",", "model_type", ",", "dataset", ":", "BaseDataset", ",", "modules_lib", ")", ":", "\n", "\n", "        ", "\"\"\"Construct a backbone generator (It is a simple down module)\n        Parameters:\n            opt - options for the network generation\n            model_type - type of the model to be generated\n            modules_lib - all modules that can be used in the backbone\n\n\n        opt is expected to contains the following keys:\n        * down_conv\n        \"\"\"", "\n", "opt", "=", "copy", ".", "deepcopy", "(", "opt", ")", "\n", "super", "(", "BackboneBasedModel", ",", "self", ")", ".", "__init__", "(", "opt", ")", "\n", "self", ".", "_spatial_ops_dict", "=", "{", "\"neighbour_finder\"", ":", "[", "]", ",", "\"sampler\"", ":", "[", "]", "}", "\n", "\n", "# Check if one of the supported modalities is present in the config", "\n", "self", ".", "_modalities", "=", "fetch_modalities", "(", "opt", ".", "down_conv", ",", "MODALITY_NAMES", ")", "\n", "\n", "# Check if the 3D convolutions are specified in the config", "\n", "self", ".", "no_3d_conv", "=", "\"down_conv_nn\"", "not", "in", "opt", ".", "down_conv", "\n", "\n", "# Detect which options format has been used to define the model", "\n", "if", "is_list", "(", "opt", ".", "down_conv", ")", "or", "self", ".", "no_3d_conv", "and", "not", "self", ".", "is_multimodal", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "else", ":", "\n", "            ", "self", ".", "_init_from_compact_format", "(", "\n", "opt", ",", "model_type", ",", "dataset", ",", "modules_lib", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_architectures.backbone.BackboneBasedModel._init_from_compact_format": [[57, 202], ["torch.nn.ModuleList", "torch_points3d.models.base_architectures.get_factory", "torch_points3d.utils.config.getattr_recursive", "getattr", "torch.nn.ModuleList", "torch_points3d.models.base_model.BaseModel.get_metric_loss_and_miner", "torch_points3d.models.base_architectures.get_factory.", "range", "int", "getattr", "getattr", "getattr", "getattr", "torch_points3d.models.base_architectures.ModalityFactory", "len", "backbone.BackboneBasedModel._build_module", "backbone.BackboneBasedModel._save_sampling_and_search", "down_modules.append", "torch_points3d.core.common_modules.base_modules.Identity", "len", "enumerate", "torch_points3d.modules.multimodal.modules.MultimodalBlockDown", "range", "len", "len", "torch_points3d.modules.multimodal.modules.IdentityBranch", "range", "getattr", "len", "len", "backbone.BackboneBasedModel._build_module", "backbone.BackboneBasedModel._build_module", "backbone.BackboneBasedModel._build_module", "torch_points3d.utils.config.fetch_arguments_from_list", "torch_points3d.utils.config.fetch_arguments_from_list.get", "torch_points3d.utils.config.fetch_arguments_from_list.get", "torch_points3d.utils.config.fetch_arguments_from_list.get", "torch_points3d.utils.config.fetch_arguments_from_list.get", "torch_points3d.utils.config.fetch_arguments_from_list.get", "torch_points3d.utils.config.fetch_arguments_from_list.get", "torch_points3d.modules.multimodal.modules.UnimodalBranch", "zip", "len", "torch_points3d.utils.config.is_list", "len", "set", "backbone.BackboneBasedModel._module_factories[].get_module", "backbone.BackboneBasedModel.", "backbone.BackboneBasedModel._build_module", "torch_points3d.core.common_modules.base_modules.Identity", "torch_points3d.core.common_modules.base_modules.Identity"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.base_architectures.unet.get_factory", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.config.getattr_recursive", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.get_metric_loss_and_miner", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_architectures.backbone.BackboneBasedModel._build_module", "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_architectures.backbone.BackboneBasedModel._save_sampling_and_search", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_architectures.backbone.BackboneBasedModel._build_module", "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_architectures.backbone.BackboneBasedModel._build_module", "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_architectures.backbone.BackboneBasedModel._build_module", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.config.fetch_arguments_from_list", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.config.is_list", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_architectures.unet.ModalityFactory.get_module", "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_architectures.backbone.BackboneBasedModel._build_module"], ["", "", "def", "_init_from_compact_format", "(", "self", ",", "opt", ",", "model_type", ",", "dataset", ",", "modules_lib", ")", ":", "\n", "        ", "\"\"\"Create a backbonebasedmodel from the compact options format\n        - where the same convolution is given for each layer, and\n        arguments are given in lists.\n        \"\"\"", "\n", "# Initialize the down module list", "\n", "self", ".", "down_modules", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "# Factory for creating down modules for the main 3D modality", "\n", "factory_module_cls", "=", "get_factory", "(", "model_type", ",", "modules_lib", ")", "\n", "down_conv_cls_name", "=", "getattr_recursive", "(", "opt", ",", "'down_conv.module_name'", ",", "None", ")", "\n", "self", ".", "_module_factories", "=", "{", "\n", "'main'", ":", "factory_module_cls", "(", "down_conv_cls_name", ",", "None", ",", "modules_lib", ")", "}", "\n", "\n", "# Factories for creating modules for additional modalities", "\n", "if", "self", ".", "is_multimodal", ":", "\n", "            ", "for", "m", "in", "self", ".", "modalities", ":", "\n", "                ", "mod_opt", "=", "opt", ".", "down_conv", "[", "m", "]", "\n", "self", ".", "_module_factories", "[", "m", "]", "=", "ModalityFactory", "(", "\n", "m", ",", "\n", "mod_opt", ".", "down_conv", ".", "module_name", ",", "\n", "mod_opt", ".", "atomic_pooling", ".", "module_name", ",", "\n", "mod_opt", ".", "view_pooling", ".", "module_name", ",", "\n", "mod_opt", ".", "fusion", ".", "module_name", ")", "\n", "\n", "# Down modules - 3D conv only", "\n", "", "", "down_modules", "=", "[", "]", "\n", "if", "not", "self", ".", "no_3d_conv", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "opt", ".", "down_conv", ".", "down_conv_nn", ")", ")", ":", "\n", "                ", "down_conv_3d", "=", "self", ".", "_build_module", "(", "opt", ".", "down_conv", ",", "i", ",", "flow", "=", "\"DOWN\"", ")", "\n", "self", ".", "_save_sampling_and_search", "(", "down_conv_3d", ")", "\n", "down_modules", ".", "append", "(", "down_conv_3d", ")", "\n", "\n", "# Number of early modules with no 3D conv and no skip-connections", "\n", "", "", "self", ".", "_n_early_conv", "=", "getattr", "(", "\n", "opt", ".", "down_conv", ",", "'n_early_conv'", ",", "int", "(", "self", ".", "is_multimodal", ")", ")", "\n", "\n", "# Down modules - modality-specific branches", "\n", "if", "self", ".", "is_multimodal", ":", "\n", "\n", "# Whether the multimodal blocks should use 3D convolutions", "\n", "# before the fusion, after the fusion or both. Inject", "\n", "# Identity accordingly in the down_modules", "\n", "            ", "conv3d_before_fusion", "=", "getattr", "(", "\n", "opt", ".", "down_conv", ",", "'conv3d_before_fusion'", ",", "True", ")", "\n", "conv3d_after_fusion", "=", "getattr", "(", "\n", "opt", ".", "down_conv", ",", "'conv3d_after_fusion'", ",", "True", ")", "\n", "assert", "conv3d_before_fusion", "or", "conv3d_after_fusion", ",", "f'Multimodal blocks need a 3D convolution either before or '", "f'after the fusion.'", "\n", "if", "conv3d_before_fusion", "and", "not", "conv3d_after_fusion", ":", "\n", "                ", "down_modules", "=", "[", "y", "for", "x", "in", "down_modules", "for", "y", "in", "(", "x", ",", "Identity", "(", ")", ")", "]", "\n", "", "if", "not", "conv3d_before_fusion", "and", "conv3d_after_fusion", ":", "\n", "                ", "down_modules", "=", "[", "y", "for", "x", "in", "down_modules", "for", "y", "in", "(", "Identity", "(", ")", ",", "x", ")", "]", "\n", "\n", "# Insert Identity 3D convolutions modules to allow branching", "\n", "# directly into the raw 3D features for early fusion", "\n", "", "early_modules", "=", "[", "Identity", "(", ")", "for", "_", "in", "range", "(", "self", ".", "n_early_conv", "*", "2", ")", "]", "\n", "down_modules", "=", "early_modules", "+", "down_modules", "\n", "\n", "# Compute the number of multimodal blocks", "\n", "assert", "len", "(", "down_modules", ")", "%", "2", "==", "0", "and", "len", "(", "down_modules", ")", ">", "0", ",", "f\"Expected an even number of 3D conv modules but got \"", "f\"{len(down_modules)} modules instead.\"", "\n", "n_mm_blocks", "=", "len", "(", "down_modules", ")", "//", "2", "\n", "\n", "branches", "=", "[", "\n", "{", "m", ":", "IdentityBranch", "(", ")", "for", "m", "in", "self", ".", "modalities", "}", "\n", "for", "_", "in", "range", "(", "n_mm_blocks", ")", "]", "\n", "\n", "for", "m", "in", "self", ".", "modalities", ":", "\n", "\n", "# Get the branching indices", "\n", "                ", "b_idx", "=", "opt", ".", "down_conv", "[", "m", "]", ".", "branching_index", "\n", "b_idx", "=", "[", "b_idx", "]", "if", "not", "is_list", "(", "b_idx", ")", "else", "b_idx", "\n", "\n", "# Check whether the modality module is a UNet", "\n", "is_unet", "=", "getattr", "(", "opt", ".", "down_conv", "[", "m", "]", ",", "'up_conv'", ",", "None", ")", "is", "not", "None", "\n", "assert", "not", "is_unet", "or", "len", "(", "b_idx", ")", "==", "1", ",", "f\"Cannot build a {m}-specific UNet with multiple \"", "f\"branching indices. Consider removing the 'up_conv' \"", "f\"from the {m} modality or providing a single branching \"", "f\"index.\"", "\n", "\n", "# Ensure the modality has no modules pointing to the", "\n", "# same branching index", "\n", "assert", "len", "(", "set", "(", "b_idx", ")", ")", "==", "len", "(", "b_idx", ")", ",", "f\"Cannot build multimodal model: some '{m}' blocks have \"", "f\"the same branching index.\"", "\n", "\n", "# Build the branches", "\n", "for", "i", ",", "idx", "in", "enumerate", "(", "b_idx", ")", ":", "\n", "\n", "# Ensure the branching index matches the down_conv", "\n", "# length", "\n", "                    ", "assert", "idx", "<", "n_mm_blocks", ",", "f\"Cannot build multimodal model: branching index \"", "f\"'{idx}' of modality '{m}' is too large for the \"", "f\"'{n_mm_blocks}' multimodal blocks.\"", "\n", "\n", "if", "is_unet", ":", "\n", "                        ", "unet_cls", "=", "self", ".", "_module_factories", "[", "m", "]", ".", "get_module", "(", "'UNET'", ")", "\n", "conv", "=", "unet_cls", "(", "opt", ".", "down_conv", "[", "m", "]", ")", "\n", "", "else", ":", "\n", "                        ", "conv", "=", "self", ".", "_build_module", "(", "\n", "opt", ".", "down_conv", "[", "m", "]", ".", "down_conv", ",", "i", ",", "modality", "=", "m", ")", "\n", "", "atomic_pool", "=", "self", ".", "_build_module", "(", "\n", "opt", ".", "down_conv", "[", "m", "]", ".", "atomic_pooling", ",", "i", ",", "modality", "=", "m", ",", "\n", "flow", "=", "'ATOMIC'", ")", "\n", "view_pool", "=", "self", ".", "_build_module", "(", "\n", "opt", ".", "down_conv", "[", "m", "]", ".", "view_pooling", ",", "i", ",", "modality", "=", "m", ",", "\n", "flow", "=", "'VIEW'", ")", "\n", "fusion", "=", "self", ".", "_build_module", "(", "\n", "opt", ".", "down_conv", "[", "m", "]", ".", "fusion", ",", "i", ",", "modality", "=", "m", ",", "\n", "flow", "=", "'FUSION'", ")", "\n", "\n", "opt_branch", "=", "fetch_arguments_from_list", "(", "\n", "opt", ".", "down_conv", "[", "m", "]", ",", "i", ",", "SPECIAL_NAMES", ")", "\n", "drop_3d", "=", "opt_branch", ".", "get", "(", "'drop_3d'", ",", "0", ")", "\n", "drop_mod", "=", "opt_branch", ".", "get", "(", "'drop_mod'", ",", "0", ")", "\n", "keep_last_view", "=", "opt_branch", ".", "get", "(", "'keep_last_view'", ",", "False", ")", "\n", "checkpointing", "=", "opt_branch", ".", "get", "(", "'checkpointing'", ",", "''", ")", "\n", "out_channels", "=", "opt_branch", ".", "get", "(", "'out_channels'", ",", "None", ")", "\n", "interpolate", "=", "opt_branch", ".", "get", "(", "'interpolate'", ",", "False", ")", "\n", "\n", "# Group modules into a UnimodalBranch and update the", "\n", "# branches at the proper branching point", "\n", "branches", "[", "idx", "]", "[", "m", "]", "=", "UnimodalBranch", "(", "\n", "conv", ",", "atomic_pool", ",", "view_pool", ",", "fusion", ",", "drop_3d", "=", "drop_3d", ",", "\n", "drop_mod", "=", "drop_mod", ",", "keep_last_view", "=", "keep_last_view", ",", "\n", "checkpointing", "=", "checkpointing", ",", "out_channels", "=", "out_channels", ",", "\n", "interpolate", "=", "interpolate", ")", "\n", "\n", "# Update the down_modules list", "\n", "", "", "down_modules", "=", "[", "\n", "MultimodalBlockDown", "(", "conv_1", ",", "conv_2", ",", "**", "modal_conv", ")", "\n", "for", "conv_1", ",", "conv_2", ",", "modal_conv", "\n", "in", "zip", "(", "down_modules", "[", ":", ":", "2", "]", ",", "down_modules", "[", "1", ":", ":", "2", "]", ",", "branches", ")", "]", "\n", "\n", "# Down modules - combined", "\n", "", "self", ".", "down_modules", "=", "nn", ".", "ModuleList", "(", "down_modules", ")", "\n", "\n", "self", ".", "metric_loss_module", ",", "self", ".", "miner_module", "=", "BaseModel", ".", "get_metric_loss_and_miner", "(", "\n", "getattr", "(", "opt", ",", "\"metric_loss\"", ",", "None", ")", ",", "getattr", "(", "opt", ",", "\"miner\"", ",", "None", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_architectures.backbone.BackboneBasedModel._save_sampling_and_search": [[203, 219], ["getattr", "torch_points3d.utils.config.is_list", "getattr", "torch_points3d.utils.config.is_list"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.config.is_list", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.config.is_list"], ["", "def", "_save_sampling_and_search", "(", "self", ",", "down_conv", ")", ":", "\n", "        ", "sampler", "=", "getattr", "(", "down_conv", ",", "\"sampler\"", ",", "None", ")", "\n", "if", "is_list", "(", "sampler", ")", ":", "\n", "            ", "self", ".", "_spatial_ops_dict", "[", "\"sampler\"", "]", "=", "sampler", "+", "self", ".", "_spatial_ops_dict", "[", "\"sampler\"", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "_spatial_ops_dict", "[", "\"sampler\"", "]", "=", "[", "sampler", "]", "+", "self", ".", "_spatial_ops_dict", "[", "\"sampler\"", "]", "\n", "\n", "", "neighbour_finder", "=", "getattr", "(", "down_conv", ",", "\"neighbour_finder\"", ",", "None", ")", "\n", "if", "is_list", "(", "neighbour_finder", ")", ":", "\n", "            ", "self", ".", "_spatial_ops_dict", "[", "\"neighbour_finder\"", "]", "=", "neighbour_finder", "+", "self", ".", "_spatial_ops_dict", "[", "\"neighbour_finder\"", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "_spatial_ops_dict", "[", "\"neighbour_finder\"", "]", "=", "[", "neighbour_finder", "]", "+", "self", ".", "_spatial_ops_dict", "[", "\"neighbour_finder\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_architectures.backbone.BackboneBasedModel._build_module": [[221, 237], ["torch_points3d.utils.config.fetch_arguments_from_list", "backbone.BackboneBasedModel._module_factories[].get_module", "backbone.BackboneBasedModel."], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.config.fetch_arguments_from_list", "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_architectures.unet.ModalityFactory.get_module"], ["", "", "def", "_build_module", "(", "self", ",", "conv_opt", ",", "index", ",", "flow", "=", "'DOWN'", ",", "modality", "=", "'main'", ")", ":", "\n", "        ", "\"\"\"Builds a convolution (up or down) or a merge block in the\n        case of multimodal models.\n\n        Arguments:\n            conv_opt - model config subset describing the convolutional\n                block\n            index - layer index in sequential order (as they come in\n                the config)\n            flow - \"UP\", \"DOWN\", \"ATOMIC, \"VIEW\" or \"FUSION\"\n            modality - string among supported modalities\n        \"\"\"", "\n", "args", "=", "fetch_arguments_from_list", "(", "conv_opt", ",", "index", ",", "SPECIAL_NAMES", ")", "\n", "args", "[", "\"index\"", "]", "=", "index", "\n", "module", "=", "self", ".", "_module_factories", "[", "modality", "]", ".", "get_module", "(", "flow", ",", "index", "=", "index", ")", "\n", "return", "module", "(", "**", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_architectures.backbone.BackboneBasedModel.modalities": [[238, 241], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "modalities", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_modalities", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_architectures.backbone.BackboneBasedModel.n_early_conv": [[242, 245], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "n_early_conv", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_n_early_conv", "\n", "", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.panoptic_tracker._Instance.iou": [[22, 26], ["float", "len", "float", "numpy.intersect1d", "len", "len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["def", "iou", "(", "self", ",", "other", ":", "\"_Instance\"", ")", "->", "float", ":", "\n", "        ", "assert", "self", ".", "scan_id", "==", "other", ".", "scan_id", "\n", "intersection", "=", "float", "(", "len", "(", "np", ".", "intersect1d", "(", "other", ".", "indices", ",", "self", ".", "indices", ")", ")", ")", "\n", "return", "intersection", "/", "float", "(", "len", "(", "other", ".", "indices", ")", "+", "len", "(", "self", ".", "indices", ")", "-", "intersection", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.panoptic_tracker._Instance.find_best_match": [[27, 36], ["enumerate", "panoptic_tracker._Instance.iou"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.lovasz_loss.iou"], ["", "def", "find_best_match", "(", "self", ",", "others", ":", "List", "[", "\"_Instance\"", "]", ")", "->", "Tuple", "[", "float", ",", "int", "]", ":", "\n", "        ", "ioumax", "=", "-", "np", ".", "inf", "\n", "best_match", "=", "-", "1", "\n", "for", "i", ",", "other", "in", "enumerate", "(", "others", ")", ":", "\n", "            ", "iou", "=", "self", ".", "iou", "(", "other", ")", "\n", "if", "iou", ">", "ioumax", ":", "\n", "                ", "ioumax", "=", "iou", "\n", "best_match", "=", "i", "\n", "", "", "return", "ioumax", ",", "best_match", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.panoptic_tracker.InstanceAPMeter.__init__": [[39, 42], ["collections.defaultdict", "collections.defaultdict", "collections.defaultdict"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "_pred_clusters", "=", "defaultdict", "(", "list", ")", "# {classname: List[_Instance]}", "\n", "self", ".", "_gt_clusters", "=", "defaultdict", "(", "lambda", ":", "defaultdict", "(", "list", ")", ")", "# {classname:{scan_id: List[_Instance]}", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.panoptic_tracker.InstanceAPMeter.add": [[43, 48], ["panoptic_tracker.InstanceAPMeter._pred_clusters[].append", "[].append"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append"], ["", "def", "add", "(", "self", ",", "pred_clusters", ":", "List", "[", "_Instance", "]", ",", "gt_clusters", ":", "List", "[", "_Instance", "]", ")", ":", "\n", "        ", "for", "instance", "in", "pred_clusters", ":", "\n", "            ", "self", ".", "_pred_clusters", "[", "instance", ".", "classname", "]", ".", "append", "(", "instance", ")", "\n", "", "for", "instance", "in", "gt_clusters", ":", "\n", "            ", "self", ".", "_gt_clusters", "[", "instance", ".", "classname", "]", "[", "instance", ".", "scan_id", "]", ".", "append", "(", "instance", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.panoptic_tracker.InstanceAPMeter._eval_cls": [[49, 90], ["panoptic_tracker.InstanceAPMeter._pred_clusters.get", "panoptic_tracker.InstanceAPMeter._gt_clusters.get", "panoptic_tracker.InstanceAPMeter.values", "panoptic_tracker.InstanceAPMeter.sort", "numpy.zeros", "numpy.zeros", "enumerate", "numpy.cumsum", "numpy.cumsum", "box_detection.ap.voc_ap", "len", "len", "len", "panoptic_tracker.InstanceAPMeter.get", "pred.find_best_match", "float", "numpy.maximum", "len", "panoptic_tracker.InstanceAPMeter.items", "len", "numpy.finfo"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.box_detection.ap.voc_ap", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.panoptic_tracker._Instance.find_best_match", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "", "def", "_eval_cls", "(", "self", ",", "classname", ",", "iou_threshold", ")", ":", "\n", "        ", "preds", "=", "self", ".", "_pred_clusters", ".", "get", "(", "classname", ",", "[", "]", ")", "\n", "allgts", "=", "self", ".", "_gt_clusters", ".", "get", "(", "classname", ",", "{", "}", ")", "\n", "visited", "=", "{", "scan_id", ":", "len", "(", "gt", ")", "*", "[", "False", "]", "for", "scan_id", ",", "gt", "in", "allgts", ".", "items", "(", ")", "}", "\n", "ngt", "=", "0", "\n", "for", "gts", "in", "allgts", ".", "values", "(", ")", ":", "\n", "            ", "ngt", "+=", "len", "(", "gts", ")", "\n", "\n", "# Start with most confident first", "\n", "", "preds", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", ".", "score", ",", "reverse", "=", "True", ")", "\n", "tp", "=", "np", ".", "zeros", "(", "len", "(", "preds", ")", ")", "\n", "fp", "=", "np", ".", "zeros", "(", "len", "(", "preds", ")", ")", "\n", "for", "p", ",", "pred", "in", "enumerate", "(", "preds", ")", ":", "\n", "            ", "scan_id", "=", "pred", ".", "scan_id", "\n", "gts", "=", "allgts", ".", "get", "(", "scan_id", ",", "[", "]", ")", "\n", "if", "len", "(", "gts", ")", "==", "0", ":", "\n", "                ", "fp", "[", "p", "]", "=", "1", "\n", "continue", "\n", "\n", "# Find best macth in ground truth", "\n", "", "ioumax", ",", "best_match", "=", "pred", ".", "find_best_match", "(", "gts", ")", "\n", "\n", "if", "ioumax", "<", "iou_threshold", ":", "\n", "                ", "fp", "[", "p", "]", "=", "1", "\n", "continue", "\n", "\n", "", "if", "visited", "[", "scan_id", "]", "[", "best_match", "]", ":", "\n", "                ", "fp", "[", "p", "]", "=", "1", "\n", "", "else", ":", "\n", "                ", "visited", "[", "scan_id", "]", "[", "best_match", "]", "=", "True", "\n", "tp", "[", "p", "]", "=", "1", "\n", "\n", "", "", "fp", "=", "np", ".", "cumsum", "(", "fp", ")", "\n", "tp", "=", "np", ".", "cumsum", "(", "tp", ")", "\n", "rec", "=", "tp", "/", "float", "(", "ngt", ")", "\n", "\n", "# avoid divide by zero in case the first detection matches a difficult", "\n", "# ground truth", "\n", "prec", "=", "tp", "/", "np", ".", "maximum", "(", "tp", "+", "fp", ",", "np", ".", "finfo", "(", "np", ".", "float64", ")", ".", "eps", ")", "\n", "ap", "=", "voc_ap", "(", "rec", ",", "prec", ")", "\n", "return", "rec", ",", "prec", ",", "ap", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.panoptic_tracker.InstanceAPMeter.eval": [[91, 105], ["panoptic_tracker.InstanceAPMeter._gt_clusters.keys", "enumerate", "panoptic_tracker.InstanceAPMeter._eval_cls", "panoptic_tracker.InstanceAPMeter._gt_clusters.keys"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.mock.MockDatasetConfig.keys", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.panoptic_tracker.InstanceAPMeter._eval_cls", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.mock.MockDatasetConfig.keys"], ["", "def", "eval", "(", "self", ",", "iou_threshold", ",", "processes", "=", "1", ")", ":", "\n", "        ", "rec", "=", "{", "}", "\n", "prec", "=", "{", "}", "\n", "ap", "=", "{", "}", "\n", "for", "classname", "in", "self", ".", "_gt_clusters", ".", "keys", "(", ")", ":", "\n", "            ", "rec", "[", "classname", "]", ",", "prec", "[", "classname", "]", ",", "ap", "[", "classname", "]", "=", "self", ".", "_eval_cls", "(", "classname", ",", "iou_threshold", ")", "\n", "\n", "", "for", "i", ",", "classname", "in", "enumerate", "(", "self", ".", "_gt_clusters", ".", "keys", "(", ")", ")", ":", "\n", "            ", "if", "classname", "not", "in", "self", ".", "_pred_clusters", ":", "\n", "                ", "rec", "[", "classname", "]", "=", "0", "\n", "prec", "[", "classname", "]", "=", "0", "\n", "ap", "[", "classname", "]", "=", "0", "\n", "\n", "", "", "return", "rec", ",", "prec", ",", "ap", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.panoptic_tracker.PanopticTracker.__init__": [[111, 114], ["torch_points3d.metrics.segmentation_tracker.SegmentationTracker.__init__"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "_metric_func", "=", "{", "**", "self", ".", "_metric_func", ",", "\"pos\"", ":", "max", ",", "\"neg\"", ":", "min", ",", "\"map\"", ":", "max", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.panoptic_tracker.PanopticTracker.reset": [[115, 125], ["super().reset", "torchnet.meter.AverageValueMeter", "torchnet.meter.AverageValueMeter", "torchnet.meter.AverageValueMeter", "panoptic_tracker.InstanceAPMeter"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.classification_tracker.ClassificationTracker.reset"], ["", "def", "reset", "(", "self", ",", "stage", "=", "\"train\"", ")", ":", "\n", "        ", "super", "(", ")", ".", "reset", "(", "stage", "=", "stage", ")", "\n", "self", ".", "_pos", "=", "tnt", ".", "meter", ".", "AverageValueMeter", "(", ")", "\n", "self", ".", "_neg", "=", "tnt", ".", "meter", ".", "AverageValueMeter", "(", ")", "\n", "self", ".", "_acc_meter", "=", "tnt", ".", "meter", ".", "AverageValueMeter", "(", ")", "\n", "self", ".", "_ap_meter", "=", "InstanceAPMeter", "(", ")", "\n", "self", ".", "_scan_id_offset", "=", "0", "\n", "self", ".", "_rec", ":", "Dict", "[", "str", ",", "float", "]", "=", "{", "}", "\n", "self", ".", "_ap", ":", "Dict", "[", "str", ",", "float", "]", "=", "{", "}", "\n", "self", ".", "_iou_per_class", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.panoptic_tracker.PanopticTracker.track": [[126, 172], ["torch_points3d.metrics.base_tracker.BaseTracker.track", "model.get_output", "model.get_labels", "super()._compute_metrics", "panoptic_tracker.PanopticTracker._extract_clusters", "panoptic_tracker.PanopticTracker._compute_acc", "panoptic_tracker.PanopticTracker._pos.add", "panoptic_tracker.PanopticTracker._neg.add", "panoptic_tracker.PanopticTracker._acc_meter.add", "data.pos.dim", "outputs.semantic_logits.max", "panoptic_tracker.PanopticTracker._pred_instances_per_scan", "panoptic_tracker.PanopticTracker._gt_instances_per_scan", "panoptic_tracker.PanopticTracker._ap_meter.add", "data.batch[].item"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.classification_tracker.ClassificationTracker.track", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.get_output", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.get_labels", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.segmentation_tracker.SegmentationTracker._compute_metrics", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.panoptic_tracker.PanopticTracker._extract_clusters", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.panoptic_tracker.PanopticTracker._compute_acc", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.meters.APMeter.add", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.meters.APMeter.add", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.meters.APMeter.add", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.panoptic_tracker.PanopticTracker._pred_instances_per_scan", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.panoptic_tracker.PanopticTracker._gt_instances_per_scan", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.meters.APMeter.add"], ["", "def", "track", "(", "\n", "self", ",", "\n", "model", ":", "TrackerInterface", ",", "\n", "data", "=", "None", ",", "\n", "iou_threshold", "=", "0.25", ",", "\n", "track_instances", "=", "True", ",", "\n", "min_cluster_points", "=", "10", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "\"\"\" Track metrics for panoptic multimodal\n        \"\"\"", "\n", "self", ".", "_iou_threshold", "=", "iou_threshold", "\n", "BaseTracker", ".", "track", "(", "self", ",", "model", ")", "\n", "outputs", ":", "PanopticResults", "=", "model", ".", "get_output", "(", ")", "\n", "labels", ":", "PanopticLabels", "=", "model", ".", "get_labels", "(", ")", "\n", "\n", "# Track semantic", "\n", "super", "(", ")", ".", "_compute_metrics", "(", "outputs", ".", "semantic_logits", ",", "labels", ".", "y", ")", "\n", "\n", "if", "not", "data", ":", "\n", "            ", "return", "\n", "", "assert", "data", ".", "pos", ".", "dim", "(", ")", "==", "2", ",", "\"Only supports packed batches\"", "\n", "\n", "# Object accuracy", "\n", "clusters", "=", "PanopticTracker", ".", "_extract_clusters", "(", "outputs", ",", "min_cluster_points", ")", "\n", "if", "not", "clusters", ":", "\n", "            ", "return", "\n", "\n", "", "predicted_labels", "=", "outputs", ".", "semantic_logits", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "tp", ",", "fp", ",", "acc", "=", "self", ".", "_compute_acc", "(", "\n", "clusters", ",", "predicted_labels", ",", "labels", ",", "data", ".", "batch", ",", "labels", ".", "num_instances", ",", "iou_threshold", "\n", ")", "\n", "self", ".", "_pos", ".", "add", "(", "tp", ")", "\n", "self", ".", "_neg", ".", "add", "(", "fp", ")", "\n", "self", ".", "_acc_meter", ".", "add", "(", "acc", ")", "\n", "\n", "# Track instances for AP", "\n", "if", "track_instances", ":", "\n", "            ", "pred_clusters", "=", "self", ".", "_pred_instances_per_scan", "(", "\n", "clusters", ",", "predicted_labels", ",", "outputs", ".", "cluster_scores", ",", "data", ".", "batch", ",", "self", ".", "_scan_id_offset", "\n", ")", "\n", "gt_clusters", "=", "self", ".", "_gt_instances_per_scan", "(", "\n", "labels", ".", "instance_labels", ",", "labels", ".", "y", ",", "data", ".", "batch", ",", "self", ".", "_scan_id_offset", "\n", ")", "\n", "self", ".", "_ap_meter", ".", "add", "(", "pred_clusters", ",", "gt_clusters", ")", "\n", "self", ".", "_scan_id_offset", "+=", "data", ".", "batch", "[", "-", "1", "]", ".", "item", "(", ")", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.panoptic_tracker.PanopticTracker.finalise": [[173, 189], ["panoptic_tracker.PanopticTracker._ap_meter.eval", "collections.OrderedDict", "collections.OrderedDict", "sorted", "panoptic_tracker.PanopticTracker._confusion_matrix.get_intersection_union_per_class", "sorted", "rec.items", "enumerate", "ap.items"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.panoptic_tracker.InstanceAPMeter.eval", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.confusion_matrix.ConfusionMatrix.get_intersection_union_per_class"], ["", "", "def", "finalise", "(", "self", ",", "track_instances", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "per_class_iou", "=", "self", ".", "_confusion_matrix", ".", "get_intersection_union_per_class", "(", ")", "[", "0", "]", "\n", "self", ".", "_iou_per_class", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "enumerate", "(", "per_class_iou", ")", "}", "\n", "\n", "if", "not", "track_instances", ":", "\n", "            ", "return", "\n", "\n", "", "rec", ",", "_", ",", "ap", "=", "self", ".", "_ap_meter", ".", "eval", "(", "self", ".", "_iou_threshold", ")", "\n", "self", ".", "_ap", "=", "OrderedDict", "(", "sorted", "(", "ap", ".", "items", "(", ")", ")", ")", "\n", "self", ".", "_rec", "=", "OrderedDict", "(", "{", "}", ")", "\n", "for", "key", ",", "val", "in", "sorted", "(", "rec", ".", "items", "(", ")", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "value", "=", "val", "[", "-", "1", "]", "\n", "", "except", "TypeError", ":", "\n", "                ", "value", "=", "val", "\n", "", "self", ".", "_rec", "[", "key", "]", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.panoptic_tracker.PanopticTracker._compute_acc": [[190, 222], ["torch_points_kernels.instance_iou().max", "torch.cat", "enumerate", "torch.unique", "len", "torch.sum().cpu().item", "torch.sum().cpu().item", "torch_points_kernels.instance_iou", "torch.tensor().to", "num_instances.cumsum", "torch.nonzero", "torch.sum().cpu", "torch.sum().cpu", "torch.tensor", "counts.max", "torch.sum", "torch.sum"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.csr.CSRData.cpu", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.csr.CSRData.cpu"], ["", "", "@", "staticmethod", "\n", "def", "_compute_acc", "(", "clusters", ",", "predicted_labels", ",", "labels", ",", "batch", ",", "num_instances", ",", "iou_threshold", ")", ":", "\n", "        ", "\"\"\" Computes the ratio of True positives, False positives and accuracy\n        \"\"\"", "\n", "iou_values", ",", "gt_ids", "=", "instance_iou", "(", "clusters", ",", "labels", ".", "instance_labels", ",", "batch", ")", ".", "max", "(", "1", ")", "\n", "gt_ids", "+=", "1", "\n", "instance_offsets", "=", "torch", ".", "cat", "(", "(", "torch", ".", "tensor", "(", "[", "0", "]", ")", ".", "to", "(", "num_instances", ".", "device", ")", ",", "num_instances", ".", "cumsum", "(", "-", "1", ")", ")", ")", "\n", "tp", "=", "0", "\n", "fp", "=", "0", "\n", "for", "i", ",", "iou", "in", "enumerate", "(", "iou_values", ")", ":", "\n", "# Too low iou, no match in ground truth", "\n", "            ", "if", "iou", "<", "iou_threshold", ":", "\n", "                ", "fp", "+=", "1", "\n", "continue", "\n", "\n", "# Check that semantic is correct", "\n", "", "sample_idx", "=", "batch", "[", "clusters", "[", "i", "]", "[", "0", "]", "]", "\n", "sample_mask", "=", "batch", "==", "sample_idx", "\n", "instance_offset", "=", "instance_offsets", "[", "sample_idx", "]", "\n", "gt_mask", "=", "labels", ".", "instance_labels", "[", "sample_mask", "]", "==", "(", "gt_ids", "[", "i", "]", "-", "instance_offset", ")", "\n", "gt_classes", "=", "labels", ".", "y", "[", "sample_mask", "]", "[", "torch", ".", "nonzero", "(", "gt_mask", ",", "as_tuple", "=", "False", ")", "]", "\n", "gt_classes", ",", "counts", "=", "torch", ".", "unique", "(", "gt_classes", ",", "return_counts", "=", "True", ")", "\n", "gt_class", "=", "gt_classes", "[", "counts", ".", "max", "(", "-", "1", ")", "[", "1", "]", "]", "\n", "pred_class", "=", "predicted_labels", "[", "clusters", "[", "i", "]", "[", "0", "]", "]", "\n", "if", "gt_class", "==", "pred_class", ":", "\n", "                ", "tp", "+=", "1", "\n", "", "else", ":", "\n", "                ", "fp", "+=", "1", "\n", "", "", "acc", "=", "tp", "/", "len", "(", "clusters", ")", "\n", "tp", "=", "tp", "/", "torch", ".", "sum", "(", "labels", ".", "num_instances", ")", ".", "cpu", "(", ")", ".", "item", "(", ")", "\n", "fp", "=", "fp", "/", "torch", ".", "sum", "(", "labels", ".", "num_instances", ")", ".", "cpu", "(", ")", ".", "item", "(", ")", "\n", "return", "tp", ",", "fp", ",", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.panoptic_tracker.PanopticTracker._extract_clusters": [[223, 228], ["outputs.get_instances"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.panoptic.structures.PanopticResults.get_instances"], ["", "@", "staticmethod", "\n", "def", "_extract_clusters", "(", "outputs", ",", "min_cluster_points", ")", ":", "\n", "        ", "valid_cluster_idx", "=", "outputs", ".", "get_instances", "(", "min_cluster_points", "=", "min_cluster_points", ")", "\n", "clusters", "=", "[", "outputs", ".", "clusters", "[", "i", "]", "for", "i", "in", "valid_cluster_idx", "]", "\n", "return", "clusters", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.panoptic_tracker.PanopticTracker._pred_instances_per_scan": [[229, 248], ["torch.ones_like", "torch.cat", "torch.cat.cumsum().cpu().numpy", "enumerate", "batch[].item", "instances.append", "torch.tensor().to", "torch_scatter.scatter_add", "torch.cat.cumsum().cpu", "cl.cpu().numpy", "panoptic_tracker._Instance", "torch.tensor", "torch.cat.cumsum", "cl.cpu", "predicted_labels[].item", "scores[].item"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.csr.CSRData.cpu", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.csr.CSRData.cpu"], ["", "@", "staticmethod", "\n", "def", "_pred_instances_per_scan", "(", "clusters", ",", "predicted_labels", ",", "scores", ",", "batch", ",", "scan_id_offset", ")", ":", "\n", "# Get sample index offset", "\n", "        ", "ones", "=", "torch", ".", "ones_like", "(", "batch", ")", "\n", "sample_sizes", "=", "torch", ".", "cat", "(", "(", "torch", ".", "tensor", "(", "[", "0", "]", ")", ".", "to", "(", "batch", ".", "device", ")", ",", "scatter_add", "(", "ones", ",", "batch", ")", ")", ")", "\n", "offsets", "=", "sample_sizes", ".", "cumsum", "(", "dim", "=", "-", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "# Build instance objects", "\n", "instances", "=", "[", "]", "\n", "for", "i", ",", "cl", "in", "enumerate", "(", "clusters", ")", ":", "\n", "            ", "sample_idx", "=", "batch", "[", "cl", "[", "0", "]", "]", ".", "item", "(", ")", "\n", "scan_id", "=", "sample_idx", "+", "scan_id_offset", "\n", "indices", "=", "cl", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "-", "offsets", "[", "sample_idx", "]", "\n", "instances", ".", "append", "(", "\n", "_Instance", "(", "\n", "classname", "=", "predicted_labels", "[", "cl", "[", "0", "]", "]", ".", "item", "(", ")", ",", "score", "=", "scores", "[", "i", "]", ".", "item", "(", ")", ",", "indices", "=", "indices", ",", "scan_id", "=", "scan_id", "\n", ")", "\n", ")", "\n", "", "return", "instances", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.panoptic_tracker.PanopticTracker._gt_instances_per_scan": [[249, 270], ["range", "torch.max", "range", "[].cpu().numpy", "instances.append", "panoptic_tracker._Instance", "[].cpu", "gt_labels_sample[].item", "torch.where"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.csr.CSRData.cpu"], ["", "@", "staticmethod", "\n", "def", "_gt_instances_per_scan", "(", "instance_labels", ",", "gt_labels", ",", "batch", ",", "scan_id_offset", ")", ":", "\n", "        ", "batch_size", "=", "batch", "[", "-", "1", "]", "+", "1", "\n", "instances", "=", "[", "]", "\n", "for", "b", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "sample_mask", "=", "batch", "==", "b", "\n", "instances_in_sample", "=", "instance_labels", "[", "sample_mask", "]", "\n", "gt_labels_sample", "=", "gt_labels", "[", "sample_mask", "]", "\n", "num_instances", "=", "torch", ".", "max", "(", "instances_in_sample", ")", "\n", "scan_id", "=", "b", "+", "scan_id_offset", "\n", "for", "i", "in", "range", "(", "num_instances", ")", ":", "\n", "                ", "instance_indices", "=", "torch", ".", "where", "(", "instances_in_sample", "==", "i", "+", "1", ")", "[", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "instances", ".", "append", "(", "\n", "_Instance", "(", "\n", "classname", "=", "gt_labels_sample", "[", "instance_indices", "[", "0", "]", "]", ".", "item", "(", ")", ",", "\n", "score", "=", "-", "1", ",", "\n", "indices", "=", "instance_indices", ",", "\n", "scan_id", "=", "scan_id", ",", "\n", ")", "\n", ")", "\n", "", "", "return", "instances", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.panoptic_tracker.PanopticTracker.get_metrics": [[271, 291], ["super().get_metrics", "torch_points3d.metrics.base_tracker.meter_value", "torch_points3d.metrics.base_tracker.meter_value", "torch_points3d.metrics.base_tracker.meter_value", "panoptic_tracker.PanopticTracker._dict_to_str", "panoptic_tracker.PanopticTracker._dict_to_str", "sum", "len", "panoptic_tracker.PanopticTracker._ap.values"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.classification_tracker.ClassificationTracker.get_metrics", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.base_tracker.meter_value", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.base_tracker.meter_value", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.base_tracker.meter_value", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.base_tracker.BaseTracker._dict_to_str", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.base_tracker.BaseTracker._dict_to_str", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "def", "get_metrics", "(", "self", ",", "verbose", "=", "False", ")", "->", "Dict", "[", "str", ",", "Any", "]", ":", "\n", "        ", "\"\"\" Returns a dictionnary of all metrics and losses being tracked\n        \"\"\"", "\n", "metrics", "=", "super", "(", ")", ".", "get_metrics", "(", "verbose", ")", "\n", "\n", "metrics", "[", "\"{}_pos\"", ".", "format", "(", "self", ".", "_stage", ")", "]", "=", "meter_value", "(", "self", ".", "_pos", ")", "\n", "metrics", "[", "\"{}_neg\"", ".", "format", "(", "self", ".", "_stage", ")", "]", "=", "meter_value", "(", "self", ".", "_neg", ")", "\n", "metrics", "[", "\"{}_Iacc\"", ".", "format", "(", "self", ".", "_stage", ")", "]", "=", "meter_value", "(", "self", ".", "_acc_meter", ")", "\n", "\n", "if", "self", ".", "_has_instance_data", ":", "\n", "            ", "mAP", "=", "sum", "(", "self", ".", "_ap", ".", "values", "(", ")", ")", "/", "len", "(", "self", ".", "_ap", ")", "\n", "metrics", "[", "\"{}_map\"", ".", "format", "(", "self", ".", "_stage", ")", "]", "=", "mAP", "\n", "\n", "", "if", "verbose", ":", "\n", "            ", "metrics", "[", "\"{}_iou_per_class\"", ".", "format", "(", "self", ".", "_stage", ")", "]", "=", "self", ".", "_iou_per_class", "\n", "\n", "", "if", "verbose", "and", "self", ".", "_has_instance_data", ":", "\n", "            ", "metrics", "[", "\"{}_class_rec\"", ".", "format", "(", "self", ".", "_stage", ")", "]", "=", "self", ".", "_dict_to_str", "(", "self", ".", "_rec", ")", "\n", "metrics", "[", "\"{}_class_ap\"", ".", "format", "(", "self", ".", "_stage", ")", "]", "=", "self", ".", "_dict_to_str", "(", "self", ".", "_ap", ")", "\n", "", "return", "metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.panoptic_tracker.PanopticTracker._has_instance_data": [[292, 295], ["len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "@", "property", "\n", "def", "_has_instance_data", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_rec", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.registration_tracker.PatchRegistrationTracker.__init__": [[15, 25], ["base_tracker.BaseTracker.__init__", "registration_tracker.PatchRegistrationTracker.reset"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.classification_tracker.ClassificationTracker.reset"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "stage", "=", "\"train\"", ",", "wandb_log", "=", "False", ",", "use_tensorboard", ":", "bool", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        generic tracker for registration task.\n        to track results, it measures the loss, and the accuracy.\n        only useful for the training.\n        \"\"\"", "\n", "\n", "super", "(", "PatchRegistrationTracker", ",", "self", ")", ".", "__init__", "(", "stage", ",", "wandb_log", ",", "use_tensorboard", ")", "\n", "\n", "self", ".", "reset", "(", "stage", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.registration_tracker.PatchRegistrationTracker.reset": [[26, 28], ["super().reset"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.classification_tracker.ClassificationTracker.reset"], ["", "def", "reset", "(", "self", ",", "stage", "=", "\"train\"", ")", ":", "\n", "        ", "super", "(", ")", ".", "reset", "(", "stage", "=", "stage", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.registration_tracker.PatchRegistrationTracker.track": [[29, 38], ["super().track", "registration_tracker.PatchRegistrationTracker._convert", "registration_metrics.compute_accuracy", "model.get_output", "len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.classification_tracker.ClassificationTracker.track", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.base_tracker.BaseTracker._convert", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.registration_metrics.compute_accuracy", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.get_output", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "def", "track", "(", "self", ",", "model", ":", "model_interface", ".", "TrackerInterface", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\" Add model predictions (accuracy)\n        \"\"\"", "\n", "super", "(", ")", ".", "track", "(", "model", ")", "\n", "\n", "outputs", "=", "self", ".", "_convert", "(", "model", ".", "get_output", "(", ")", ")", "\n", "N", "=", "len", "(", "outputs", ")", "//", "2", "\n", "\n", "self", ".", "_acc", "=", "compute_accuracy", "(", "outputs", "[", ":", "N", "]", ",", "outputs", "[", "N", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.registration_tracker.PatchRegistrationTracker.get_metrics": [[39, 46], ["super().get_metrics"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.classification_tracker.ClassificationTracker.get_metrics"], ["", "def", "get_metrics", "(", "self", ",", "verbose", "=", "False", ")", "->", "Dict", "[", "str", ",", "Any", "]", ":", "\n", "        ", "\"\"\" Returns a dictionnary of all metrics and losses being tracked\n        \"\"\"", "\n", "metrics", "=", "super", "(", ")", ".", "get_metrics", "(", "verbose", ")", "\n", "\n", "metrics", "[", "\"{}_acc\"", ".", "format", "(", "self", ".", "_stage", ")", "]", "=", "self", ".", "_acc", "\n", "return", "metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.registration_tracker.PatchRegistrationTracker.metric_func": [[47, 51], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "metric_func", "(", "self", ")", ":", "\n", "        ", "self", ".", "_metric_func", "=", "{", "\"loss\"", ":", "min", ",", "\"acc\"", ":", "max", "}", "\n", "return", "self", ".", "_metric_func", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.registration_tracker.FragmentRegistrationTracker.__init__": [[54, 78], ["base_tracker.BaseTracker.__init__", "registration_tracker.FragmentRegistrationTracker.reset"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.classification_tracker.ClassificationTracker.reset"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "num_points", "=", "5000", ",", "\n", "tau_1", "=", "0.1", ",", "\n", "tau_2", "=", "0.05", ",", "\n", "rot_thresh", "=", "5", ",", "\n", "trans_thresh", "=", "2", ",", "\n", "stage", "=", "\"train\"", ",", "\n", "wandb_log", "=", "False", ",", "\n", "use_tensorboard", ":", "bool", "=", "False", ",", "\n", ")", ":", "\n", "\n", "        ", "\"\"\"\n        tracker for registration tasks (we learn feature for each fragments like multimodal network)\nit measures loss, feature match recall, hit ratio, rotation error, translation error.\n        \"\"\"", "\n", "super", "(", "FragmentRegistrationTracker", ",", "self", ")", ".", "__init__", "(", "stage", ",", "wandb_log", ",", "use_tensorboard", ")", "\n", "\n", "self", ".", "reset", "(", "stage", ")", "\n", "self", ".", "num_points", "=", "num_points", "\n", "self", ".", "tau_1", "=", "tau_1", "\n", "self", ".", "tau_2", "=", "tau_2", "\n", "self", ".", "rot_thresh", "=", "rot_thresh", "\n", "self", ".", "trans_thresh", "=", "trans_thresh", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.registration_tracker.FragmentRegistrationTracker.reset": [[79, 88], ["super().reset", "torchnet.meter.AverageValueMeter", "torchnet.meter.AverageValueMeter", "torchnet.meter.AverageValueMeter", "torchnet.meter.AverageValueMeter", "torchnet.meter.AverageValueMeter", "torchnet.meter.AverageValueMeter", "torchnet.meter.AverageValueMeter"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.classification_tracker.ClassificationTracker.reset"], ["", "def", "reset", "(", "self", ",", "stage", "=", "\"train\"", ")", ":", "\n", "        ", "super", "(", ")", ".", "reset", "(", "stage", "=", "stage", ")", "\n", "self", ".", "_rot_error", "=", "tnt", ".", "meter", ".", "AverageValueMeter", "(", ")", "\n", "self", ".", "_trans_error", "=", "tnt", ".", "meter", ".", "AverageValueMeter", "(", ")", "\n", "self", ".", "_hit_ratio", "=", "tnt", ".", "meter", ".", "AverageValueMeter", "(", ")", "\n", "self", ".", "_feat_match_ratio", "=", "tnt", ".", "meter", ".", "AverageValueMeter", "(", ")", "\n", "self", ".", "_rre", "=", "tnt", ".", "meter", ".", "AverageValueMeter", "(", ")", "\n", "self", ".", "_rte", "=", "tnt", ".", "meter", ".", "AverageValueMeter", "(", ")", "\n", "self", ".", "_sr_err", "=", "tnt", ".", "meter", ".", "AverageValueMeter", "(", ")", "# scaled registration error", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.registration_tracker.FragmentRegistrationTracker.track": [[89, 151], ["super().track", "model.get_batch", "model.get_input", "model.get_output", "batch_size_ind[].item", "range", "batch_idx.max", "len", "len", "torch.stack().transpose", "torch_points3d.utils.registration.estimate_transfo", "torch_points3d.utils.registration.get_matches", "torch_points3d.utils.registration.fast_global_registration", "registration_metrics.compute_hit_ratio", "registration_metrics.compute_transfo_error", "registration_metrics.compute_scaled_registration_error", "registration_tracker.FragmentRegistrationTracker._hit_ratio.add", "registration_tracker.FragmentRegistrationTracker._feat_match_ratio.add", "registration_tracker.FragmentRegistrationTracker._trans_error.add", "registration_tracker.FragmentRegistrationTracker._rot_error.add", "registration_tracker.FragmentRegistrationTracker._rre.add", "registration_tracker.FragmentRegistrationTracker._rte.add", "registration_tracker.FragmentRegistrationTracker._sr_err.add", "torch.randperm", "torch.randperm", "registration_metrics.compute_hit_ratio.item", "float", "trans_error.item", "rot_error.item", "registration_metrics.compute_scaled_registration_error.item", "batch_size_ind[].item", "len", "len", "torch.stack", "rot_error.item", "trans_error.item", "registration_metrics.compute_hit_ratio.item"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.classification_tracker.ClassificationTracker.track", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.get_batch", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.get_input", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.get_output", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.registration.estimate_transfo", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.registration.get_matches", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.registration.fast_global_registration", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.registration_metrics.compute_hit_ratio", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.registration_metrics.compute_transfo_error", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.registration_metrics.compute_scaled_registration_error", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.meters.APMeter.add", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.meters.APMeter.add", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.meters.APMeter.add", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.meters.APMeter.add", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.meters.APMeter.add", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.meters.APMeter.add", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.meters.APMeter.add", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "def", "track", "(", "self", ",", "model", ":", "model_interface", ".", "TrackerInterface", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "track", "(", "model", ")", "\n", "if", "self", ".", "_stage", "!=", "\"train\"", ":", "\n", "            ", "batch_idx", ",", "batch_idx_target", "=", "model", ".", "get_batch", "(", ")", "\n", "# batch_xyz, batch_xyz_target = model.get_xyz()  # type: ignore", "\n", "# batch_ind, batch_ind_target, batch_size_ind = model.get_ind()  # type: ignore", "\n", "input", ",", "input_target", "=", "model", ".", "get_input", "(", ")", "\n", "batch_xyz", ",", "batch_xyz_target", "=", "input", ".", "pos", ",", "input_target", ".", "pos", "\n", "batch_ind", ",", "batch_ind_target", ",", "batch_size_ind", "=", "input", ".", "ind", ",", "input_target", ".", "ind", ",", "input", ".", "size", "\n", "batch_feat", ",", "batch_feat_target", "=", "model", ".", "get_output", "(", ")", "\n", "\n", "nb_batches", "=", "batch_idx", ".", "max", "(", ")", "+", "1", "\n", "cum_sum", "=", "0", "\n", "cum_sum_target", "=", "0", "\n", "begin", "=", "0", "\n", "end", "=", "batch_size_ind", "[", "0", "]", ".", "item", "(", ")", "\n", "for", "b", "in", "range", "(", "nb_batches", ")", ":", "\n", "                ", "xyz", "=", "batch_xyz", "[", "batch_idx", "==", "b", "]", "\n", "xyz_target", "=", "batch_xyz_target", "[", "batch_idx_target", "==", "b", "]", "\n", "feat", "=", "batch_feat", "[", "batch_idx", "==", "b", "]", "\n", "feat_target", "=", "batch_feat_target", "[", "batch_idx_target", "==", "b", "]", "\n", "# as we have concatenated ind,", "\n", "# we need to substract the cum_sum because we deal", "\n", "# with each batch independently", "\n", "# ind = batch_ind[b * len(batch_ind) / nb_batches : (b + 1) * len(batch_ind) / nb_batches] - cum_sum", "\n", "# ind_target = (batch_ind_target[b * len(batch_ind_target) / nb_batches : (b + 1) * len(batch_ind_target) / nb_batches]- cum_sum_target)", "\n", "ind", "=", "batch_ind", "[", "begin", ":", "end", "]", "-", "cum_sum", "\n", "ind_target", "=", "batch_ind_target", "[", "begin", ":", "end", "]", "-", "cum_sum_target", "\n", "# print(begin, end)", "\n", "if", "b", "<", "nb_batches", "-", "1", ":", "\n", "                    ", "begin", "=", "end", "\n", "end", "=", "begin", "+", "batch_size_ind", "[", "b", "+", "1", "]", ".", "item", "(", ")", "\n", "", "cum_sum", "+=", "len", "(", "xyz", ")", "\n", "cum_sum_target", "+=", "len", "(", "xyz_target", ")", "\n", "rand", "=", "torch", ".", "randperm", "(", "len", "(", "feat", ")", ")", "[", ":", "self", ".", "num_points", "]", "\n", "rand_target", "=", "torch", ".", "randperm", "(", "len", "(", "feat_target", ")", ")", "[", ":", "self", ".", "num_points", "]", "\n", "\n", "matches_gt", "=", "torch", ".", "stack", "(", "[", "ind", ",", "ind_target", "]", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n", "# print(matches_gt.max(0), len(xyz), len(xyz_target), len(matches_gt))", "\n", "# print(batch_ind.shape, nb_batches)", "\n", "T_gt", "=", "estimate_transfo", "(", "xyz", "[", "matches_gt", "[", ":", ",", "0", "]", "]", ",", "xyz_target", "[", "matches_gt", "[", ":", ",", "1", "]", "]", ")", "\n", "\n", "matches_pred", "=", "get_matches", "(", "feat", "[", "rand", "]", ",", "feat_target", "[", "rand_target", "]", ")", "\n", "T_pred", "=", "fast_global_registration", "(", "\n", "xyz", "[", "rand", "]", "[", "matches_pred", "[", ":", ",", "0", "]", "]", ",", "xyz_target", "[", "rand_target", "]", "[", "matches_pred", "[", ":", ",", "1", "]", "]", "\n", ")", "\n", "\n", "hit_ratio", "=", "compute_hit_ratio", "(", "\n", "xyz", "[", "rand", "]", "[", "matches_pred", "[", ":", ",", "0", "]", "]", ",", "xyz_target", "[", "rand_target", "]", "[", "matches_pred", "[", ":", ",", "1", "]", "]", ",", "T_gt", ",", "self", ".", "tau_1", "\n", ")", "\n", "\n", "trans_error", ",", "rot_error", "=", "compute_transfo_error", "(", "T_pred", ",", "T_gt", ")", "\n", "\n", "sr_err", "=", "compute_scaled_registration_error", "(", "xyz", ",", "T_gt", ",", "T_pred", ")", "\n", "self", ".", "_hit_ratio", ".", "add", "(", "hit_ratio", ".", "item", "(", ")", ")", "\n", "self", ".", "_feat_match_ratio", ".", "add", "(", "float", "(", "hit_ratio", ".", "item", "(", ")", ">", "self", ".", "tau_2", ")", ")", "\n", "self", ".", "_trans_error", ".", "add", "(", "trans_error", ".", "item", "(", ")", ")", "\n", "self", ".", "_rot_error", ".", "add", "(", "rot_error", ".", "item", "(", ")", ")", "\n", "self", ".", "_rre", ".", "add", "(", "rot_error", ".", "item", "(", ")", "<", "self", ".", "rot_thresh", ")", "\n", "self", ".", "_rte", ".", "add", "(", "trans_error", ".", "item", "(", ")", "<", "self", ".", "trans_thresh", ")", "\n", "self", ".", "_sr_err", ".", "add", "(", "sr_err", ".", "item", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.registration_tracker.FragmentRegistrationTracker.get_metrics": [[152, 163], ["super().get_metrics", "float", "float", "float", "float", "float", "float", "float", "registration_tracker.FragmentRegistrationTracker._hit_ratio.value", "registration_tracker.FragmentRegistrationTracker._feat_match_ratio.value", "registration_tracker.FragmentRegistrationTracker._trans_error.value", "registration_tracker.FragmentRegistrationTracker._rot_error.value", "registration_tracker.FragmentRegistrationTracker._rre.value", "registration_tracker.FragmentRegistrationTracker._rte.value", "registration_tracker.FragmentRegistrationTracker._sr_err.value"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.classification_tracker.ClassificationTracker.get_metrics", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.meters.APMeter.value", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.meters.APMeter.value", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.meters.APMeter.value", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.meters.APMeter.value", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.meters.APMeter.value", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.meters.APMeter.value", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.meters.APMeter.value"], ["", "", "", "def", "get_metrics", "(", "self", ",", "verbose", "=", "False", ")", ":", "\n", "        ", "metrics", "=", "super", "(", ")", ".", "get_metrics", "(", "verbose", ")", "\n", "if", "self", ".", "_stage", "!=", "\"train\"", ":", "\n", "            ", "metrics", "[", "\"{}_hit_ratio\"", ".", "format", "(", "self", ".", "_stage", ")", "]", "=", "float", "(", "self", ".", "_hit_ratio", ".", "value", "(", ")", "[", "0", "]", ")", "\n", "metrics", "[", "\"{}_feat_match_ratio\"", ".", "format", "(", "self", ".", "_stage", ")", "]", "=", "float", "(", "self", ".", "_feat_match_ratio", ".", "value", "(", ")", "[", "0", "]", ")", "\n", "metrics", "[", "\"{}_trans_error\"", ".", "format", "(", "self", ".", "_stage", ")", "]", "=", "float", "(", "self", ".", "_trans_error", ".", "value", "(", ")", "[", "0", "]", ")", "\n", "metrics", "[", "\"{}_rot_error\"", ".", "format", "(", "self", ".", "_stage", ")", "]", "=", "float", "(", "self", ".", "_rot_error", ".", "value", "(", ")", "[", "0", "]", ")", "\n", "metrics", "[", "\"{}_rre\"", ".", "format", "(", "self", ".", "_stage", ")", "]", "=", "float", "(", "self", ".", "_rre", ".", "value", "(", ")", "[", "0", "]", ")", "\n", "metrics", "[", "\"{}_rte\"", ".", "format", "(", "self", ".", "_stage", ")", "]", "=", "float", "(", "self", ".", "_rte", ".", "value", "(", ")", "[", "0", "]", ")", "\n", "metrics", "[", "\"{}_sr_err\"", ".", "format", "(", "self", ".", "_stage", ")", "]", "=", "float", "(", "self", ".", "_sr_err", ".", "value", "(", ")", "[", "0", "]", ")", "\n", "", "return", "metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.registration_tracker.FragmentRegistrationTracker.metric_func": [[164, 177], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "metric_func", "(", "self", ")", ":", "\n", "        ", "self", ".", "_metric_func", "=", "{", "\n", "\"loss\"", ":", "min", ",", "\n", "\"hit_ratio\"", ":", "max", ",", "\n", "\"feat_match_ratio\"", ":", "max", ",", "\n", "\"trans_error\"", ":", "min", ",", "\n", "\"rot_error\"", ":", "min", ",", "\n", "\"rre\"", ":", "max", ",", "\n", "\"rte\"", ":", "max", ",", "\n", "\"sr_err\"", ":", "min", ",", "\n", "}", "\n", "return", "self", ".", "_metric_func", "\n", "", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.__init__": [[24, 40], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "checkpoint_file", ":", "str", ",", "save_every_iter", ":", "bool", "=", "True", ")", ":", "\n", "        ", "\"\"\" Checkpoint manager. Saves to working directory with\n        check_name\n\n        Arguments\n            checkpoint_file {str} -- Path to the checkpoint\n            save_every_iter {bool} -- [description] (default: {True})\n        \"\"\"", "\n", "self", ".", "_check_path", "=", "checkpoint_file", "\n", "self", ".", "_filled", "=", "False", "\n", "self", ".", "run_config", ":", "Optional", "[", "Dict", "]", "=", "{", "}", "\n", "self", ".", "models", ":", "Dict", "[", "str", ",", "Any", "]", "=", "{", "}", "\n", "self", ".", "stats", ":", "Dict", "[", "str", ",", "List", "[", "Any", "]", "]", "=", "{", "\"train\"", ":", "[", "]", ",", "\"test\"", ":", "[", "]", ",", "\"val\"", ":", "[", "]", "}", "\n", "self", ".", "optimizer", ":", "Optional", "[", "Tuple", "[", "str", ",", "Any", "]", "]", "=", "None", "\n", "self", ".", "schedulers", ":", "Dict", "[", "str", ",", "Any", "]", "=", "{", "}", "\n", "self", ".", "dataset_properties", ":", "Dict", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.save_objects": [[41, 57], ["model_checkpoint.Checkpoint.__dict__.items", "torch.save", "optimizer.state_dict", "scheduler.state_dict", "schedulers.items", "key.startswith"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.schedulers.lr_schedulers.LRScheduler.state_dict", "home.repos.pwc.inspect_result.drprojects_deepviewagg.schedulers.lr_schedulers.LRScheduler.state_dict"], ["", "def", "save_objects", "(", "\n", "self", ",", "models_to_save", ":", "Dict", "[", "str", ",", "Any", "]", ",", "stage", ",", "current_stat", ",", "\n", "optimizer", ",", "schedulers", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\" Saves checkpoint with updated models for the given stage \"\"\"", "\n", "self", ".", "models", "=", "models_to_save", "\n", "self", ".", "optimizer", "=", "(", "optimizer", ".", "__class__", ".", "__name__", ",", "optimizer", ".", "state_dict", "(", ")", ")", "\n", "self", ".", "schedulers", "=", "{", "\n", "scheduler_name", ":", "[", "scheduler", ".", "scheduler_opt", ",", "scheduler", ".", "state_dict", "(", ")", "]", "\n", "for", "scheduler_name", ",", "scheduler", "in", "schedulers", ".", "items", "(", ")", "}", "\n", "\n", "to_save", "=", "kwargs", "\n", "for", "key", ",", "value", "in", "self", ".", "__dict__", ".", "items", "(", ")", ":", "\n", "            ", "if", "not", "key", ".", "startswith", "(", "\"_\"", ")", ":", "\n", "                ", "to_save", "[", "key", "]", "=", "value", "\n", "\n", "", "", "torch", ".", "save", "(", "to_save", ",", "self", ".", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.path": [[58, 61], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "path", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_check_path", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load": [[62, 108], ["omegaconf.OmegaConf.merge", "omegaconf.OmegaConf.to_container", "os.path.join", "os.path.exists", "model_checkpoint.Checkpoint", "os.path.basename", "model_checkpoint.Checkpoint", "log.info", "torch.load", "torch.load.items", "omegaconf.OmegaConf.create", "copy.deepcopy", "glob.glob", "ValueError", "shutil.copyfile", "setattr", "os.path.join", "os.path.basename"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load"], ["", "@", "staticmethod", "\n", "def", "load", "(", "\n", "checkpoint_dir", ":", "str", ",", "checkpoint_name", ":", "str", ",", "run_config", ":", "DictConfig", ",", "\n", "strict", "=", "False", ",", "resume", "=", "True", ")", ":", "\n", "        ", "\"\"\" Creates a new checkpoint object in the current working\n        directory by loading the checkpoint located at\n        [checkpointdir]/[checkpoint_name].pt\n        \"\"\"", "\n", "checkpoint_file", "=", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "checkpoint_name", ")", "+", "\".pt\"", "\n", "\n", "\n", "# If no checkpoint was found, create an empty checkpoint, unless", "\n", "# `strict` or `resume` are specified", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "checkpoint_file", ")", ":", "\n", "            ", "ckp", "=", "Checkpoint", "(", "checkpoint_file", ")", "\n", "if", "strict", "or", "resume", ":", "\n", "                ", "available_checkpoints", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "\"*.pt\"", ")", ")", "\n", "message", "=", "f\"The provided path {checkpoint_dir} didn't \"", "f\"contain the checkpoint_file {checkpoint_name}.pt\"", "\n", "if", "available_checkpoints", ":", "\n", "                    ", "message", "+=", "f\"\\nDid you mean {os.path.basename(available_checkpoints[0])}?\"", "\n", "", "raise", "ValueError", "(", "message", ")", "\n", "\n", "# Load the checkpoint from file", "\n", "", "", "else", ":", "\n", "            ", "ckp_name", "=", "os", ".", "path", ".", "basename", "(", "checkpoint_file", ")", "\n", "if", "resume", ":", "\n", "# Copy checkpoint to new run directory to make sure we", "\n", "# don't override", "\n", "                ", "shutil", ".", "copyfile", "(", "checkpoint_file", ",", "ckp_name", ")", "\n", "", "ckp", "=", "Checkpoint", "(", "ckp_name", ")", "\n", "log", ".", "info", "(", "f\"Loading checkpoint from {checkpoint_file}\"", ")", "\n", "objects", "=", "torch", ".", "load", "(", "checkpoint_file", ",", "map_location", "=", "\"cpu\"", ")", "\n", "for", "key", ",", "value", "in", "objects", ".", "items", "(", ")", ":", "\n", "                ", "setattr", "(", "ckp", ",", "key", ",", "value", ")", "\n", "", "ckp", ".", "_filled", "=", "True", "\n", "\n", "# Merge the checkpoint and input `run_config` and store it as a", "\n", "# dictionary. Note that the input config will take priority for", "\n", "# values specified in both. This is useful, for instance, if the", "\n", "# checkpoint was produced on another machine and you need to", "\n", "# modify the data root path", "\n", "", "cfg_merged", "=", "OmegaConf", ".", "merge", "(", "OmegaConf", ".", "create", "(", "ckp", ".", "run_config", ")", ",", "run_config", ")", "\n", "ckp", ".", "run_config", "=", "OmegaConf", ".", "to_container", "(", "copy", ".", "deepcopy", "(", "cfg_merged", ")", ")", "\n", "\n", "return", "ckp", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.is_empty": [[109, 112], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "is_empty", "(", "self", ")", ":", "\n", "        ", "return", "not", "self", ".", "_filled", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load_optim_sched": [[113, 199], ["getattr", "schedulers_config.items", "hasattr", "hasattr", "torch_points3d.utils.config.is_list", "len", "getattr.", "getattr", "getattr.", "model.optimizer.load_state_dict", "torch_points3d.utils.config.fetch_arguments_from_list", "list", "print", "len", "ValueError", "model.parameters", "torch_points3d.core.schedulers.lr_schedulers.instantiate_scheduler", "omegaconf.OmegaConf.create", "range", "model.named_parameters", "model.named_parameters", "range", "any", "ValueError", "x.startswith", "omegaconf.OmegaConf.create", "torch_points3d.core.schedulers.bn_schedulers.instantiate_bn_scheduler.load_state_dict", "torch_points3d.core.schedulers.bn_schedulers.instantiate_bn_scheduler", "submodule_params.append", "untracked_params_new.append", "model.named_parameters", "omegaconf.OmegaConf.create", "torch_points3d.core.schedulers.bn_schedulers.instantiate_bn_scheduler.load_state_dict", "x.startswith"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.config.is_list", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.schedulers.lr_schedulers.LRScheduler.load_state_dict", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.config.fetch_arguments_from_list", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.schedulers.lr_schedulers.instantiate_scheduler", "home.repos.pwc.inspect_result.drprojects_deepviewagg.schedulers.lr_schedulers.LRScheduler.load_state_dict", "home.repos.pwc.inspect_result.drprojects_deepviewagg.schedulers.bn_schedulers.instantiate_bn_scheduler", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.schedulers.lr_schedulers.LRScheduler.load_state_dict"], ["", "def", "load_optim_sched", "(", "self", ",", "model", ",", "load_state", "=", "True", ")", ":", "\n", "        ", "if", "not", "self", ".", "is_empty", ":", "\n", "# initialize optimizer", "\n", "            ", "optimizer_config", "=", "self", ".", "optimizer", "\n", "optimizer_cls", "=", "getattr", "(", "torch", ".", "optim", ",", "optimizer_config", "[", "0", "]", ")", "\n", "optimizer_opt", "=", "OmegaConf", ".", "create", "(", "self", ".", "run_config", ")", ".", "training", ".", "optim", ".", "optimizer", "\n", "\n", "is_differential", "=", "hasattr", "(", "optimizer_opt", ",", "'params'", ")", "and", "hasattr", "(", "optimizer_opt", ".", "params", ",", "'params'", ")", "and", "is_list", "(", "optimizer_opt", ".", "params", ".", "params", ")", "\n", "\n", "if", "is_differential", ":", "\n", "                ", "n_optim_groups", "=", "len", "(", "optimizer_opt", ".", "params", ".", "params", ")", "\n", "\n", "optimizer_params", "=", "[", "\n", "fetch_arguments_from_list", "(", "optimizer_opt", ".", "params", ",", "i", ",", "[", "'params'", "]", ")", "\n", "for", "i", "in", "range", "(", "n_optim_groups", ")", "]", "\n", "\n", "# Initialize lists of parameter names to be used for", "\n", "# overwriting parameter groups. The torch optimizer will", "\n", "# crash if a parameter belongs to multiple groups. For this", "\n", "# reason, we need to make sure that a parameter belongs only", "\n", "# to the last-declared group capturing it.", "\n", "all_params", "=", "[", "n", "for", "n", ",", "_", "in", "model", ".", "named_parameters", "(", ")", "]", "\n", "untracked_params", "=", "[", "n", "for", "n", ",", "_", "in", "model", ".", "named_parameters", "(", ")", "]", "\n", "\n", "# Loop through parameters from last to first, so that", "\n", "# overwrites follow the chronological order", "\n", "for", "i", "in", "list", "(", "range", "(", "n_optim_groups", ")", ")", "[", ":", ":", "-", "1", "]", ":", "\n", "\n", "# Recover the submodule name", "\n", "                    ", "submodule_name", "=", "optimizer_params", "[", "i", "]", "[", "'params'", "]", "\n", "print", "(", "submodule_name", ")", "\n", "\n", "# Make sure the module exists in the model", "\n", "if", "not", "any", "(", "[", "x", ".", "startswith", "(", "submodule_name", ")", "for", "x", "in", "all_params", "]", ")", ":", "\n", "                        ", "raise", "ValueError", "(", "\n", "f'Module {submodule_name} not found among model '", "\n", "f'modules.'", ")", "\n", "\n", "# Yet-to-be-tracked parameters captured in the submodule", "\n", "", "untracked_params_new", "=", "[", "]", "\n", "submodule_params", "=", "[", "]", "\n", "for", "x", "in", "untracked_params", ":", "\n", "                        ", "if", "x", ".", "startswith", "(", "submodule_name", ")", ":", "\n", "                            ", "submodule_params", ".", "append", "(", "x", ")", "\n", "", "else", ":", "\n", "                            ", "untracked_params_new", ".", "append", "(", "x", ")", "\n", "", "", "untracked_params", "=", "untracked_params_new", "\n", "\n", "# Recover the actual parameters", "\n", "optimizer_params", "[", "i", "]", "[", "'params'", "]", "=", "[", "\n", "p", "for", "n", ",", "p", "in", "model", ".", "named_parameters", "(", ")", "\n", "if", "n", "in", "submodule_params", "]", "\n", "\n", "", "if", "len", "(", "untracked_params", ")", ">", "0", ":", "\n", "                    ", "raise", "ValueError", "(", "\n", "f'The following parameters are not tracked by the '", "\n", "f'optimizer: {untracked_params}'", ")", "\n", "", "model", ".", "_optimizer", "=", "optimizer_cls", "(", "optimizer_params", ")", "\n", "\n", "", "else", ":", "\n", "                ", "optimizer_params", "=", "getattr", "(", "optimizer_opt", ",", "\"params\"", ",", "{", "}", ")", "\n", "model", ".", "optimizer", "=", "optimizer_cls", "(", "model", ".", "parameters", "(", ")", ",", "**", "optimizer_params", ")", "\n", "\n", "# initialize & load schedulersr", "\n", "", "schedulers_out", "=", "{", "}", "\n", "schedulers_config", "=", "self", ".", "schedulers", "\n", "for", "scheduler_type", ",", "(", "scheduler_opt", ",", "scheduler_state", ")", "in", "schedulers_config", ".", "items", "(", ")", ":", "\n", "                ", "if", "scheduler_type", "==", "\"lr_scheduler\"", ":", "\n", "                    ", "optimizer", "=", "model", ".", "optimizer", "\n", "scheduler", "=", "instantiate_scheduler", "(", "optimizer", ",", "OmegaConf", ".", "create", "(", "scheduler_opt", ")", ")", "\n", "if", "load_state", ":", "\n", "                        ", "scheduler", ".", "load_state_dict", "(", "scheduler_state", ")", "\n", "", "schedulers_out", "[", "\"lr_scheduler\"", "]", "=", "scheduler", "\n", "\n", "", "elif", "scheduler_type", "==", "\"bn_scheduler\"", ":", "\n", "                    ", "scheduler", "=", "instantiate_bn_scheduler", "(", "model", ",", "OmegaConf", ".", "create", "(", "scheduler_opt", ")", ")", "\n", "if", "load_state", ":", "\n", "                        ", "scheduler", ".", "load_state_dict", "(", "scheduler_state", ")", "\n", "", "schedulers_out", "[", "\"bn_scheduler\"", "]", "=", "scheduler", "\n", "\n", "# load optimizer", "\n", "", "", "model", ".", "schedulers", "=", "schedulers_out", "\n", "if", "load_state", ":", "\n", "                ", "model", ".", "optimizer", ".", "load_state_dict", "(", "optimizer_config", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.get_state_dict": [[200, 217], ["log.info", "log.info", "key.replace", "Exception", "models.keys"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.mock.MockDatasetConfig.keys"], ["", "", "", "def", "get_state_dict", "(", "self", ",", "weight_name", ")", ":", "\n", "        ", "if", "self", ".", "is_empty", ":", "\n", "            ", "return", "\n", "", "try", ":", "\n", "            ", "models", "=", "self", ".", "models", "\n", "keys", "=", "[", "key", ".", "replace", "(", "\"best_\"", ",", "\"\"", ")", "for", "key", "in", "models", ".", "keys", "(", ")", "]", "\n", "log", ".", "info", "(", "f\"Available weights : {keys}\"", ")", "\n", "try", ":", "\n", "                ", "key_name", "=", "f\"best_{weight_name}\"", "\n", "model", "=", "models", "[", "key_name", "]", "\n", "", "except", ":", "\n", "                ", "key_name", "=", "Checkpoint", ".", "_LATEST", "\n", "model", "=", "models", "[", "Checkpoint", ".", "_LATEST", "]", "\n", "", "log", ".", "info", "(", "f\"Model loaded from {self._check_path}:{key_name}\"", ")", "\n", "return", "model", "\n", "", "except", ":", "\n", "            ", "raise", "Exception", "(", "\"This weight name isn't within the checkpoint \"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.ModelCheckpoint.__init__": [[232, 240], ["omegaconf.DictConfig", "model_checkpoint.Checkpoint.load"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load"], ["def", "__init__", "(", "\n", "self", ",", "load_dir", ":", "str", ",", "check_name", ":", "str", ",", "selection_stage", ":", "str", ",", "\n", "run_config", ":", "DictConfig", "=", "DictConfig", "(", "{", "}", ")", ",", "resume", "=", "False", ",", "strict", "=", "False", ")", ":", "\n", "        ", "self", ".", "_checkpoint", "=", "Checkpoint", ".", "load", "(", "\n", "load_dir", ",", "check_name", ",", "run_config", "=", "run_config", ",", "strict", "=", "strict", ",", "\n", "resume", "=", "resume", ")", "\n", "self", ".", "_resume", "=", "resume", "\n", "self", ".", "_selection_stage", "=", "selection_stage", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.ModelCheckpoint.create_model": [[241, 253], ["copy.deepcopy", "torch_points3d.models.model_factory.instantiate_model", "hasattr", "model_checkpoint.ModelCheckpoint._initialize_model", "ValueError", "omegaconf.OmegaConf.create", "model_checkpoint.ModelCheckpoint._checkpoint.model_props.items", "delattr", "setattr"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.models.model_factory.instantiate_model", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.ModelCheckpoint._initialize_model"], ["", "def", "create_model", "(", "self", ",", "dataset", ",", "weight_name", "=", "Checkpoint", ".", "_LATEST", ")", ":", "\n", "        ", "if", "not", "self", ".", "is_empty", ":", "\n", "            ", "run_config", "=", "copy", ".", "deepcopy", "(", "self", ".", "_checkpoint", ".", "run_config", ")", "\n", "model", "=", "instantiate_model", "(", "OmegaConf", ".", "create", "(", "run_config", ")", ",", "dataset", ")", "\n", "if", "hasattr", "(", "self", ".", "_checkpoint", ",", "\"model_props\"", ")", ":", "\n", "                ", "for", "k", ",", "v", "in", "self", ".", "_checkpoint", ".", "model_props", ".", "items", "(", ")", ":", "\n", "                    ", "setattr", "(", "model", ",", "k", ",", "v", ")", "\n", "", "delattr", "(", "self", ".", "_checkpoint", ",", "\"model_props\"", ")", "\n", "", "self", ".", "_initialize_model", "(", "model", ",", "weight_name", ")", "\n", "return", "model", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Checkpoint is empty\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.ModelCheckpoint.start_epoch": [[254, 260], ["model_checkpoint.ModelCheckpoint.get_starting_epoch"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.ModelCheckpoint.get_starting_epoch"], ["", "", "@", "property", "\n", "def", "start_epoch", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_resume", ":", "\n", "            ", "return", "self", ".", "get_starting_epoch", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.ModelCheckpoint.run_config": [[261, 264], ["omegaconf.OmegaConf.create"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "run_config", "(", "self", ")", ":", "\n", "        ", "return", "OmegaConf", ".", "create", "(", "self", ".", "_checkpoint", ".", "run_config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.ModelCheckpoint.data_config": [[265, 268], ["omegaconf.OmegaConf.create"], "methods", ["None"], ["", "@", "property", "\n", "def", "data_config", "(", "self", ")", ":", "\n", "        ", "return", "OmegaConf", ".", "create", "(", "self", ".", "_checkpoint", ".", "run_config", ")", ".", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.ModelCheckpoint.selection_stage": [[273, 276], ["None"], "methods", ["None"], ["", "@", "selection_stage", ".", "setter", "\n", "def", "selection_stage", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_selection_stage", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.ModelCheckpoint.is_empty": [[277, 280], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "is_empty", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_checkpoint", ".", "is_empty", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.ModelCheckpoint.checkpoint_path": [[281, 284], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "checkpoint_path", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_checkpoint", ".", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.ModelCheckpoint.dataset_properties": [[289, 292], ["None"], "methods", ["None"], ["", "@", "dataset_properties", ".", "setter", "\n", "def", "dataset_properties", "(", "self", ",", "dataset_properties", ":", "Union", "[", "Dict", "[", "str", ",", "Any", "]", ",", "Dict", "]", ")", ":", "\n", "        ", "self", ".", "_checkpoint", ".", "dataset_properties", "=", "dataset_properties", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.ModelCheckpoint.get_starting_epoch": [[293, 295], ["len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "def", "get_starting_epoch", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_checkpoint", ".", "stats", "[", "\"train\"", "]", ")", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.ModelCheckpoint._initialize_model": [[296, 301], ["model_checkpoint.ModelCheckpoint._checkpoint.get_state_dict", "model.load_state_dict", "model_checkpoint.ModelCheckpoint._checkpoint.load_optim_sched"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.get_state_dict", "home.repos.pwc.inspect_result.drprojects_deepviewagg.schedulers.lr_schedulers.LRScheduler.load_state_dict", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load_optim_sched"], ["", "def", "_initialize_model", "(", "self", ",", "model", ":", "model_interface", ".", "CheckpointInterface", ",", "weight_name", ")", ":", "\n", "        ", "if", "not", "self", ".", "_checkpoint", ".", "is_empty", ":", "\n", "            ", "state_dict", "=", "self", ".", "_checkpoint", ".", "get_state_dict", "(", "weight_name", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "False", ")", "\n", "self", ".", "_checkpoint", ".", "load_optim_sched", "(", "model", ",", "load_state", "=", "self", ".", "_resume", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.ModelCheckpoint.find_func_from_metric_name": [[302, 308], ["default_metrics_func.items", "Exception"], "methods", ["None"], ["", "", "def", "find_func_from_metric_name", "(", "self", ",", "metric_name", ",", "default_metrics_func", ")", ":", "\n", "        ", "for", "token_name", ",", "func", "in", "default_metrics_func", ".", "items", "(", ")", ":", "\n", "            ", "if", "token_name", "in", "metric_name", ":", "\n", "                ", "return", "func", "\n", "", "", "raise", "Exception", "(", "\n", "f\"The metric name {metric_name} doesn't have a func to measure \"", "\n", "f\"which one is best in {default_metrics_func}. Example: For \"", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.ModelCheckpoint.save_best_models_under_current_metrics": [[311, 380], ["copy.deepcopy", "model_checkpoint.ModelCheckpoint._checkpoint.stats[].append", "model_checkpoint.ModelCheckpoint._checkpoint.save_objects", "model.state_dict", "len", "metrics.items", "metrics.items", "model_checkpoint.ModelCheckpoint.find_func_from_metric_name", "latest_stats.get", "model_checkpoint.ModelCheckpoint.", "torch_points3d.utils.colors.colored_print"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.save_objects", "home.repos.pwc.inspect_result.drprojects_deepviewagg.schedulers.lr_schedulers.LRScheduler.state_dict", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.ModelCheckpoint.find_func_from_metric_name", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.visualization.experiment_manager.colored_print"], ["", "def", "save_best_models_under_current_metrics", "(", "\n", "self", ",", "model", ":", "model_interface", ".", "CheckpointInterface", ",", "\n", "metrics_holder", ":", "dict", ",", "metric_func_dict", ":", "dict", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\" This function is responsible to save checkpoint under the\n        current metrics and their associated DEFAULT_METRICS_FUNC\n\n        Arguments:\n            model {[CheckpointInterface]} -- [Model]\n            metrics_holder {[Dict]} -- [Need to contain stage, epoch, current_metrics]\n        \"\"\"", "\n", "metrics", "=", "metrics_holder", "[", "\"current_metrics\"", "]", "\n", "stage", "=", "metrics_holder", "[", "\"stage\"", "]", "\n", "epoch", "=", "metrics_holder", "[", "\"epoch\"", "]", "\n", "\n", "stats", "=", "self", ".", "_checkpoint", ".", "stats", "\n", "state_dict", "=", "copy", ".", "deepcopy", "(", "model", ".", "state_dict", "(", ")", ")", "\n", "\n", "current_stat", "=", "{", "}", "\n", "current_stat", "[", "\"epoch\"", "]", "=", "epoch", "\n", "\n", "models_to_save", "=", "self", ".", "_checkpoint", ".", "models", "\n", "if", "stage", "not", "in", "stats", ":", "\n", "            ", "stats", "[", "stage", "]", "=", "[", "]", "\n", "\n", "", "if", "stage", "==", "\"train\"", ":", "\n", "            ", "models_to_save", "[", "Checkpoint", ".", "_LATEST", "]", "=", "state_dict", "\n", "", "else", ":", "\n", "            ", "if", "len", "(", "stats", "[", "stage", "]", ")", ">", "0", ":", "\n", "                ", "latest_stats", "=", "stats", "[", "stage", "]", "[", "-", "1", "]", "\n", "\n", "msg", "=", "\"\"", "\n", "improved_metric", "=", "0", "\n", "\n", "for", "metric_name", ",", "current_metric_value", "in", "metrics", ".", "items", "(", ")", ":", "\n", "                    ", "current_stat", "[", "metric_name", "]", "=", "current_metric_value", "\n", "\n", "metric_func", "=", "self", ".", "find_func_from_metric_name", "(", "metric_name", ",", "metric_func_dict", ")", "\n", "best_metric_from_stats", "=", "latest_stats", ".", "get", "(", "f\"best_{metric_name}\"", ",", "current_metric_value", ")", "\n", "best_value", "=", "metric_func", "(", "best_metric_from_stats", ",", "current_metric_value", ")", "\n", "current_stat", "[", "f\"best_{metric_name}\"", "]", "=", "best_value", "\n", "\n", "# This new value seems to be better under metric_func", "\n", "if", "(", "self", ".", "_selection_stage", "==", "stage", ")", "and", "(", "\n", "current_metric_value", "==", "best_value", "\n", ")", ":", "# Update the model weights", "\n", "                        ", "models_to_save", "[", "f\"best_{metric_name}\"", "]", "=", "state_dict", "\n", "\n", "msg", "+=", "f\"{metric_name}: {best_metric_from_stats} -> {best_value}, \"", "\n", "improved_metric", "+=", "1", "\n", "\n", "", "", "if", "improved_metric", ">", "0", ":", "\n", "                    ", "colored_print", "(", "COLORS", ".", "VAL_COLOR", ",", "msg", "[", ":", "-", "2", "]", ")", "\n", "", "", "else", ":", "\n", "# stats[stage] is empty.", "\n", "                ", "for", "metric_name", ",", "metric_value", "in", "metrics", ".", "items", "(", ")", ":", "\n", "                    ", "current_stat", "[", "metric_name", "]", "=", "metric_value", "\n", "current_stat", "[", "f\"best_{metric_name}\"", "]", "=", "metric_value", "\n", "models_to_save", "[", "f\"best_{metric_name}\"", "]", "=", "state_dict", "\n", "\n", "", "", "", "kwargs", "[", "\"model_props\"", "]", "=", "{", "\n", "\"num_epochs\"", ":", "model", ".", "num_epochs", ",", "# type: ignore", "\n", "\"num_batches\"", ":", "model", ".", "num_batches", ",", "# type: ignore", "\n", "\"num_samples\"", ":", "model", ".", "num_samples", ",", "# type: ignore", "\n", "}", "\n", "\n", "self", ".", "_checkpoint", ".", "stats", "[", "stage", "]", ".", "append", "(", "current_stat", ")", "\n", "self", ".", "_checkpoint", ".", "save_objects", "(", "\n", "models_to_save", ",", "stage", ",", "current_stat", ",", "model", ".", "optimizer", ",", "\n", "model", ".", "schedulers", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.ModelCheckpoint.validate": [[381, 393], ["dataset_config.items", "torch_points3d.models.model_factory.instantiate_model", "omegaconf.OmegaConf.create"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.models.model_factory.instantiate_model"], ["", "def", "validate", "(", "self", ",", "dataset_config", ")", ":", "\n", "        ", "\"\"\" A checkpoint is considered as valid if it can recreate the model from\n        a dataset config only \"\"\"", "\n", "if", "dataset_config", "is", "not", "None", ":", "\n", "            ", "for", "k", ",", "v", "in", "dataset_config", ".", "items", "(", ")", ":", "\n", "                ", "self", ".", "data_config", "[", "k", "]", "=", "v", "\n", "", "", "try", ":", "\n", "            ", "instantiate_model", "(", "OmegaConf", ".", "create", "(", "self", ".", "run_config", ")", ",", "self", ".", "data_config", ")", "\n", "", "except", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "True", "\n", "", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.scannet_segmentation_tracker.ScannetSegmentationTracker.reset": [[18, 26], ["super().reset", "torch_points3d.metrics.confusion_matrix.ConfusionMatrix"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.classification_tracker.ClassificationTracker.reset"], ["    ", "def", "reset", "(", "self", ",", "stage", "=", "\"train\"", ")", ":", "\n", "        ", "super", "(", ")", ".", "reset", "(", "stage", "=", "stage", ")", "\n", "self", ".", "_full_confusion_matrix", "=", "ConfusionMatrix", "(", "self", ".", "_num_classes", ")", "\n", "self", ".", "_raw_datas", "=", "{", "}", "\n", "self", ".", "_votes", "=", "{", "}", "\n", "self", ".", "_vote_counts", "=", "{", "}", "\n", "self", ".", "_full_preds", "=", "{", "}", "\n", "self", ".", "_full_acc", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.scannet_segmentation_tracker.ScannetSegmentationTracker.track": [[27, 42], ["super().track", "kwargs.get", "scannet_segmentation_tracker.ScannetSegmentationTracker._vote", "model.get_input", "model.get_output", "kwargs.get"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.classification_tracker.ClassificationTracker.track", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.scannet_segmentation_tracker.ScannetSegmentationTracker._vote", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.get_input", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.get_output", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get"], ["", "def", "track", "(", "self", ",", "model", ":", "model_interface", ".", "TrackerInterface", ",", "full_res", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\" Add current model predictions (usually the result of a batch) to the tracking\n        \"\"\"", "\n", "super", "(", ")", ".", "track", "(", "model", ")", "\n", "\n", "# Set conv type", "\n", "self", ".", "_conv_type", "=", "model", ".", "conv_type", "\n", "\n", "# Train mode or low res, nothing special to do", "\n", "if", "not", "full_res", "or", "self", ".", "_stage", "==", "\"train\"", "or", "kwargs", ".", "get", "(", "\"data\"", ")", "is", "None", ":", "\n", "            ", "return", "\n", "\n", "", "data", "=", "kwargs", ".", "get", "(", "\"data\"", ",", "model", ".", "get_input", "(", ")", ")", "\n", "data", "=", "data", ".", "data", "if", "model", ".", "is_multimodal", "else", "data", "\n", "self", ".", "_vote", "(", "data", ",", "model", ".", "get_output", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.scannet_segmentation_tracker.ScannetSegmentationTracker.get_metrics": [[43, 52], ["super().get_metrics"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.classification_tracker.ClassificationTracker.get_metrics"], ["", "def", "get_metrics", "(", "self", ",", "verbose", "=", "False", ")", "->", "Dict", "[", "str", ",", "Any", "]", ":", "\n", "        ", "\"\"\" Returns a dictionnary of all metrics and losses being tracked\n        \"\"\"", "\n", "metrics", "=", "super", "(", ")", ".", "get_metrics", "(", "verbose", ")", "\n", "if", "self", ".", "_full_acc", ":", "\n", "            ", "metrics", "[", "\"{}_full_acc\"", ".", "format", "(", "self", ".", "_stage", ")", "]", "=", "self", ".", "_full_acc", "\n", "metrics", "[", "\"{}_full_macc\"", ".", "format", "(", "self", ".", "_stage", ")", "]", "=", "self", ".", "_full_macc", "\n", "metrics", "[", "\"{}_full_miou\"", ".", "format", "(", "self", ".", "_stage", ")", "]", "=", "self", ".", "_full_miou", "\n", "", "return", "metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.scannet_segmentation_tracker.ScannetSegmentationTracker.finalise": [[53, 76], ["scannet_segmentation_tracker.ScannetSegmentationTracker._predict_full_res", "scannet_segmentation_tracker.ScannetSegmentationTracker._dataset.has_labels", "scannet_segmentation_tracker.ScannetSegmentationTracker._make_submission", "[].numpy", "scannet_segmentation_tracker.ScannetSegmentationTracker._full_confusion_matrix.count_predicted_batch", "scannet_segmentation_tracker.ScannetSegmentationTracker._full_confusion_matrix.get_overall_accuracy", "scannet_segmentation_tracker.ScannetSegmentationTracker._full_confusion_matrix.get_mean_class_accuracy", "scannet_segmentation_tracker.ScannetSegmentationTracker._full_confusion_matrix.get_average_intersection_union", "scannet_segmentation_tracker.ScannetSegmentationTracker._full_preds[].cpu"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.segmentation_helpers.SegmentationVoter._predict_full_res", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.kitti360_tracker.KITTI360Tracker.has_labels", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.kitti360_tracker.KITTI360Tracker._make_submission", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.confusion_matrix.ConfusionMatrix.count_predicted_batch", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.confusion_matrix.ConfusionMatrix.get_overall_accuracy", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.confusion_matrix.ConfusionMatrix.get_mean_class_accuracy", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.confusion_matrix.ConfusionMatrix.get_average_intersection_union", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.csr.CSRData.cpu"], ["", "def", "finalise", "(", "self", ",", "full_res", "=", "False", ",", "make_submission", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "not", "full_res", "and", "not", "make_submission", ":", "\n", "            ", "return", "\n", "\n", "", "self", ".", "_predict_full_res", "(", ")", "\n", "\n", "# Compute full res metrics", "\n", "if", "self", ".", "_dataset", ".", "has_labels", "(", "self", ".", "_stage", ")", ":", "\n", "            ", "for", "scan_id", "in", "self", ".", "_full_preds", ":", "\n", "                ", "full_labels", "=", "self", ".", "_raw_datas", "[", "scan_id", "]", ".", "y", "\n", "# Mask ignored labels", "\n", "mask", "=", "full_labels", "!=", "self", ".", "_ignore_label", "\n", "full_labels", "=", "full_labels", "[", "mask", "]", "\n", "full_preds", "=", "self", ".", "_full_preds", "[", "scan_id", "]", ".", "cpu", "(", ")", "[", "mask", "]", ".", "numpy", "(", ")", "\n", "self", ".", "_full_confusion_matrix", ".", "count_predicted_batch", "(", "full_labels", ",", "full_preds", ")", "\n", "\n", "", "self", ".", "_full_acc", "=", "100", "*", "self", ".", "_full_confusion_matrix", ".", "get_overall_accuracy", "(", ")", "\n", "self", ".", "_full_macc", "=", "100", "*", "self", ".", "_full_confusion_matrix", ".", "get_mean_class_accuracy", "(", ")", "\n", "self", ".", "_full_miou", "=", "100", "*", "self", ".", "_full_confusion_matrix", ".", "get_average_intersection_union", "(", ")", "\n", "\n", "# Save files to disk", "\n", "", "if", "make_submission", "and", "self", ".", "_stage", "==", "\"test\"", ":", "\n", "            ", "self", ".", "_make_submission", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.scannet_segmentation_tracker.ScannetSegmentationTracker._make_submission": [[77, 86], ["numpy.asarray", "scannet_segmentation_tracker.ScannetSegmentationTracker._full_preds[].cpu().numpy().astype", "os.join", "numpy.savetxt", "scannet_segmentation_tracker.ScannetSegmentationTracker._full_preds[].cpu().numpy", "scannet_segmentation_tracker.ScannetSegmentationTracker._full_preds[].cpu"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.csr.CSRData.cpu"], ["", "", "def", "_make_submission", "(", "self", ")", ":", "\n", "        ", "orginal_class_ids", "=", "np", ".", "asarray", "(", "self", ".", "_dataset", ".", "train_dataset", ".", "valid_class_idx", ")", "\n", "path_to_submission", "=", "self", ".", "_dataset", ".", "path_to_submission", "\n", "for", "scan_id", "in", "self", ".", "_full_preds", ":", "\n", "            ", "full_pred", "=", "self", ".", "_full_preds", "[", "scan_id", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "int8", ")", "\n", "full_pred", "=", "orginal_class_ids", "[", "full_pred", "]", "# remap labels to original labels between 0 and 40", "\n", "scan_name", "=", "self", ".", "_raw_datas", "[", "scan_id", "]", ".", "scan_name", "\n", "path_file", "=", "osp", ".", "join", "(", "path_to_submission", ",", "\"{}.txt\"", ".", "format", "(", "scan_name", ")", ")", "\n", "np", ".", "savetxt", "(", "path_file", ",", "full_pred", ",", "delimiter", "=", "\"/n\"", ",", "fmt", "=", "\"%d\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.scannet_segmentation_tracker.ScannetSegmentationTracker._vote": [[87, 121], ["enumerate", "id_scans.squeeze.squeeze.dim", "id_scans.squeeze.squeeze.squeeze", "len", "output.view.view.view", "output[].cpu", "scannet_segmentation_tracker.ScannetSegmentationTracker._dataset.get_raw_data", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.csr.CSRData.cpu", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.scannet.Scannet.get_raw_data"], ["", "", "def", "_vote", "(", "self", ",", "data", ",", "output", ")", ":", "\n", "        ", "\"\"\" Populates scores for the points in data\n\n        Parameters\n        ----------\n        data : Data\n            should contain `pos` and `SaveOriginalPosId.KEY` keys\n        output : torch.Tensor\n            probablities out of the model, shape: [N,nb_classes]\n        \"\"\"", "\n", "id_scans", "=", "data", ".", "id_scan", "\n", "if", "id_scans", ".", "dim", "(", ")", ">", "1", ":", "\n", "            ", "id_scans", "=", "id_scans", ".", "squeeze", "(", ")", "\n", "", "if", "self", ".", "_conv_type", "==", "\"DENSE\"", ":", "\n", "            ", "batch_size", "=", "len", "(", "id_scans", ")", "\n", "output", "=", "output", ".", "view", "(", "batch_size", ",", "-", "1", ",", "output", ".", "shape", "[", "-", "1", "]", ")", "\n", "\n", "", "for", "idx_batch", ",", "id_scan", "in", "enumerate", "(", "id_scans", ")", ":", "\n", "# First time we see this scan", "\n", "            ", "if", "id_scan", "not", "in", "self", ".", "_raw_datas", ":", "\n", "                ", "raw_data", "=", "self", ".", "_dataset", ".", "get_raw_data", "(", "self", ".", "_stage", ",", "id_scan", ",", "remap_labels", "=", "True", ")", "\n", "self", ".", "_raw_datas", "[", "id_scan", "]", "=", "raw_data", "\n", "self", ".", "_vote_counts", "[", "id_scan", "]", "=", "torch", ".", "zeros", "(", "raw_data", ".", "pos", ".", "shape", "[", "0", "]", ",", "dtype", "=", "torch", ".", "int", ")", "\n", "self", ".", "_votes", "[", "id_scan", "]", "=", "torch", ".", "zeros", "(", "(", "raw_data", ".", "pos", ".", "shape", "[", "0", "]", ",", "self", ".", "_num_classes", ")", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "", "else", ":", "\n", "                ", "raw_data", "=", "self", ".", "_raw_datas", "[", "id_scan", "]", "\n", "\n", "", "batch_mask", "=", "idx_batch", "\n", "if", "self", ".", "_conv_type", "!=", "\"DENSE\"", ":", "\n", "                ", "batch_mask", "=", "data", ".", "batch", "==", "idx_batch", "\n", "", "idx", "=", "data", "[", "SaveOriginalPosId", ".", "KEY", "]", "[", "batch_mask", "]", "\n", "\n", "self", ".", "_votes", "[", "id_scan", "]", "[", "idx", "]", "+=", "output", "[", "batch_mask", "]", ".", "cpu", "(", ")", "\n", "self", ".", "_vote_counts", "[", "id_scan", "]", "[", "idx", "]", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.scannet_segmentation_tracker.ScannetSegmentationTracker._predict_full_res": [[122, 136], ["[].unsqueeze", "torch_geometric.nn.unpool.knn_interpolate", "torch_geometric.nn.unpool.knn_interpolate.argmax"], "methods", ["None"], ["", "", "def", "_predict_full_res", "(", "self", ")", ":", "\n", "        ", "\"\"\" Predict full resolution results based on votes \"\"\"", "\n", "for", "id_scan", "in", "self", ".", "_votes", ":", "\n", "            ", "has_prediction", "=", "self", ".", "_vote_counts", "[", "id_scan", "]", ">", "0", "\n", "self", ".", "_votes", "[", "id_scan", "]", "[", "has_prediction", "]", "/=", "self", ".", "_vote_counts", "[", "id_scan", "]", "[", "has_prediction", "]", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n", "# Upsample and predict", "\n", "full_pred", "=", "knn_interpolate", "(", "\n", "self", ".", "_votes", "[", "id_scan", "]", "[", "has_prediction", "]", ",", "\n", "self", ".", "_raw_datas", "[", "id_scan", "]", ".", "pos", "[", "has_prediction", "]", ",", "\n", "self", ".", "_raw_datas", "[", "id_scan", "]", ".", "pos", ",", "\n", "k", "=", "1", ",", "\n", ")", "\n", "self", ".", "_full_preds", "[", "id_scan", "]", "=", "full_pred", ".", "argmax", "(", "-", "1", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.segmentation_tracker.SegmentationTracker.__init__": [[13, 39], ["torch_points3d.metrics.base_tracker.BaseTracker.__init__", "segmentation_tracker.SegmentationTracker.reset"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.classification_tracker.ClassificationTracker.reset"], ["    ", "def", "__init__", "(", "\n", "self", ",", "dataset", ",", "stage", "=", "\"train\"", ",", "wandb_log", "=", "False", ",", "use_tensorboard", ":", "bool", "=", "False", ",", "ignore_label", ":", "int", "=", "IGNORE_LABEL", "\n", ")", ":", "\n", "        ", "\"\"\" This is a generic tracker for multimodal tasks.\n        It uses a confusion matrix in the back-end to track results.\n        Use the tracker to track an epoch.\n        You can use the reset function before you start a new epoch\n\n        Arguments:\n            dataset  -- dataset to track (used for the number of classes)\n\n        Keyword Arguments:\n            stage {str} -- current stage. (train, validation, test, etc...) (default: {\"train\"})\n            wandb_log {str} --  Log using weight and biases\n        \"\"\"", "\n", "super", "(", "SegmentationTracker", ",", "self", ")", ".", "__init__", "(", "stage", ",", "wandb_log", ",", "use_tensorboard", ")", "\n", "self", ".", "_num_classes", "=", "dataset", ".", "num_classes", "\n", "self", ".", "_ignore_label", "=", "ignore_label", "\n", "self", ".", "_dataset", "=", "dataset", "\n", "self", ".", "reset", "(", "stage", ")", "\n", "self", ".", "_metric_func", "=", "{", "\n", "\"miou\"", ":", "max", ",", "\n", "\"macc\"", ":", "max", ",", "\n", "\"acc\"", ":", "max", ",", "\n", "\"loss\"", ":", "min", ",", "\n", "\"map\"", ":", "max", ",", "\n", "}", "# Those map subsentences to their optimization functions", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.segmentation_tracker.SegmentationTracker.reset": [[41, 48], ["super().reset", "torch_points3d.metrics.confusion_matrix.ConfusionMatrix"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.classification_tracker.ClassificationTracker.reset"], ["", "def", "reset", "(", "self", ",", "stage", "=", "\"train\"", ")", ":", "\n", "        ", "super", "(", ")", ".", "reset", "(", "stage", "=", "stage", ")", "\n", "self", ".", "_confusion_matrix", "=", "ConfusionMatrix", "(", "self", ".", "_num_classes", ")", "\n", "self", ".", "_acc", "=", "0", "\n", "self", ".", "_macc", "=", "0", "\n", "self", ".", "_miou", "=", "0", "\n", "self", ".", "_miou_per_class", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.segmentation_tracker.SegmentationTracker.detach_tensor": [[49, 54], ["torch.torch.is_tensor", "tensor.detach.detach.detach"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "detach_tensor", "(", "tensor", ")", ":", "\n", "        ", "if", "torch", ".", "torch", ".", "is_tensor", "(", "tensor", ")", ":", "\n", "            ", "tensor", "=", "tensor", ".", "detach", "(", ")", "\n", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.segmentation_tracker.SegmentationTracker.confusion_matrix": [[55, 58], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "confusion_matrix", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_confusion_matrix", ".", "confusion_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.segmentation_tracker.SegmentationTracker.track": [[59, 70], ["super().track", "model.get_output", "model.get_labels", "segmentation_tracker.SegmentationTracker._compute_metrics", "segmentation_tracker.SegmentationTracker._dataset.has_labels"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.classification_tracker.ClassificationTracker.track", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.get_output", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.get_labels", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.segmentation_tracker.SegmentationTracker._compute_metrics", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.kitti360_tracker.KITTI360Tracker.has_labels"], ["", "def", "track", "(", "self", ",", "model", ":", "model_interface", ".", "TrackerInterface", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\" Add current model predictions (usually the result of a batch) to the tracking\n        \"\"\"", "\n", "if", "not", "self", ".", "_dataset", ".", "has_labels", "(", "self", ".", "_stage", ")", ":", "\n", "            ", "return", "\n", "\n", "", "super", "(", ")", ".", "track", "(", "model", ")", "\n", "\n", "outputs", "=", "model", ".", "get_output", "(", ")", "\n", "targets", "=", "model", ".", "get_labels", "(", ")", "\n", "self", ".", "_compute_metrics", "(", "outputs", ",", "targets", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.segmentation_tracker.SegmentationTracker._compute_metrics": [[71, 91], ["segmentation_tracker.SegmentationTracker._convert", "segmentation_tracker.SegmentationTracker._convert", "segmentation_tracker.SegmentationTracker._confusion_matrix.count_predicted_batch", "len", "len", "numpy.argmax", "segmentation_tracker.SegmentationTracker._confusion_matrix.get_overall_accuracy", "segmentation_tracker.SegmentationTracker._confusion_matrix.get_mean_class_accuracy", "segmentation_tracker.SegmentationTracker._confusion_matrix.get_average_intersection_union", "enumerate", "segmentation_tracker.SegmentationTracker._confusion_matrix.get_intersection_union_per_class"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.base_tracker.BaseTracker._convert", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.base_tracker.BaseTracker._convert", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.confusion_matrix.ConfusionMatrix.count_predicted_batch", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.confusion_matrix.ConfusionMatrix.get_overall_accuracy", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.confusion_matrix.ConfusionMatrix.get_mean_class_accuracy", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.confusion_matrix.ConfusionMatrix.get_average_intersection_union", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.confusion_matrix.ConfusionMatrix.get_intersection_union_per_class"], ["", "def", "_compute_metrics", "(", "self", ",", "outputs", ",", "labels", ")", ":", "\n", "        ", "mask", "=", "labels", "!=", "self", ".", "_ignore_label", "\n", "outputs", "=", "outputs", "[", "mask", "]", "\n", "labels", "=", "labels", "[", "mask", "]", "\n", "\n", "outputs", "=", "self", ".", "_convert", "(", "outputs", ")", "\n", "labels", "=", "self", ".", "_convert", "(", "labels", ")", "\n", "\n", "if", "len", "(", "labels", ")", "==", "0", ":", "\n", "            ", "return", "\n", "\n", "", "assert", "outputs", ".", "shape", "[", "0", "]", "==", "len", "(", "labels", ")", "\n", "self", ".", "_confusion_matrix", ".", "count_predicted_batch", "(", "labels", ",", "np", ".", "argmax", "(", "outputs", ",", "1", ")", ")", "\n", "\n", "self", ".", "_acc", "=", "100", "*", "self", ".", "_confusion_matrix", ".", "get_overall_accuracy", "(", ")", "\n", "self", ".", "_macc", "=", "100", "*", "self", ".", "_confusion_matrix", ".", "get_mean_class_accuracy", "(", ")", "\n", "self", ".", "_miou", "=", "100", "*", "self", ".", "_confusion_matrix", ".", "get_average_intersection_union", "(", ")", "\n", "self", ".", "_miou_per_class", "=", "{", "\n", "i", ":", "\"{:.2f}\"", ".", "format", "(", "100", "*", "v", ")", "\n", "for", "i", ",", "v", "in", "enumerate", "(", "self", ".", "_confusion_matrix", ".", "get_intersection_union_per_class", "(", ")", "[", "0", "]", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.segmentation_tracker.SegmentationTracker.get_metrics": [[93, 105], ["super().get_metrics"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.classification_tracker.ClassificationTracker.get_metrics"], ["", "def", "get_metrics", "(", "self", ",", "verbose", "=", "False", ")", "->", "Dict", "[", "str", ",", "Any", "]", ":", "\n", "        ", "\"\"\" Returns a dictionnary of all metrics and losses being tracked\n        \"\"\"", "\n", "metrics", "=", "super", "(", ")", ".", "get_metrics", "(", "verbose", ")", "\n", "\n", "metrics", "[", "\"{}_acc\"", ".", "format", "(", "self", ".", "_stage", ")", "]", "=", "self", ".", "_acc", "\n", "metrics", "[", "\"{}_macc\"", ".", "format", "(", "self", ".", "_stage", ")", "]", "=", "self", ".", "_macc", "\n", "metrics", "[", "\"{}_miou\"", ".", "format", "(", "self", ".", "_stage", ")", "]", "=", "self", ".", "_miou", "\n", "\n", "if", "verbose", ":", "\n", "            ", "metrics", "[", "\"{}_miou_per_class\"", ".", "format", "(", "self", ".", "_stage", ")", "]", "=", "self", ".", "_miou_per_class", "\n", "", "return", "metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.segmentation_tracker.SegmentationTracker.metric_func": [[106, 109], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "metric_func", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_metric_func", "\n", "", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.shapenet_part_tracker.ShapenetPartTracker.__init__": [[12, 35], ["base_tracker.BaseTracker.__init__", "shapenet_part_tracker.ShapenetPartTracker._class_seg_map.items", "shapenet_part_tracker.ShapenetPartTracker.reset"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.classification_tracker.ClassificationTracker.reset"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "stage", ":", "str", "=", "\"train\"", ",", "wandb_log", ":", "bool", "=", "False", ",", "use_tensorboard", ":", "bool", "=", "False", ")", ":", "\n", "        ", "\"\"\" Segmentation tracker shapenet part seg problem. The dataset needs to have a\n        class_to_segment member that defines how metrics get computed and agregated.\n        It follows shapenet official formula for computing miou which treats missing part as having an iou of 1\n        See https://github.com/charlesq34/pointnet2/blob/42926632a3c33461aebfbee2d829098b30a23aaa/part_seg/evaluate.py#L166-L176\n\n        Arguments:\n            dataset {[type]}\n\n        Keyword Arguments:\n            stage {str} -- current stage (default: {\"train\"})\n            wandb_log {bool} -- Log to Wanndb (default: {False})\n            use_tensorboard {bool} -- Log to tensorboard (default: {False})\n        \"\"\"", "\n", "super", "(", "ShapenetPartTracker", ",", "self", ")", ".", "__init__", "(", "stage", ",", "wandb_log", ",", "use_tensorboard", ")", "\n", "self", ".", "_dataset", "=", "dataset", "\n", "self", ".", "_num_classes", "=", "dataset", ".", "num_classes", "\n", "self", ".", "_class_seg_map", "=", "dataset", ".", "class_to_segments", "\n", "self", ".", "_seg_to_class", "=", "{", "}", "\n", "for", "cat", ",", "segments", "in", "self", ".", "_class_seg_map", ".", "items", "(", ")", ":", "\n", "            ", "for", "label", "in", "segments", ":", "\n", "                ", "self", ".", "_seg_to_class", "[", "label", "]", "=", "cat", "\n", "", "", "self", ".", "reset", "(", "stage", "=", "stage", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.shapenet_part_tracker.ShapenetPartTracker.reset": [[36, 48], ["super().reset", "shapenet_part_tracker.ShapenetPartTracker._class_seg_map.keys", "shapenet_part_tracker.ShapenetPartTracker._class_seg_map.keys", "shapenet_part_tracker.ShapenetPartTracker._class_seg_map.keys"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.classification_tracker.ClassificationTracker.reset", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.mock.MockDatasetConfig.keys", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.mock.MockDatasetConfig.keys", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.mock.MockDatasetConfig.keys"], ["", "def", "reset", "(", "self", ",", "stage", "=", "\"train\"", ")", ":", "\n", "        ", "super", "(", ")", ".", "reset", "(", "stage", "=", "stage", ")", "\n", "self", ".", "_shape_ious", "=", "{", "cat", ":", "[", "]", "for", "cat", "in", "self", ".", "_class_seg_map", ".", "keys", "(", ")", "}", "\n", "self", ".", "_Cmiou", "=", "0", "\n", "self", ".", "_Imiou", "=", "0", "\n", "self", ".", "_miou_per_class", "=", "{", "}", "\n", "self", ".", "_full_res_scans", "=", "{", "cat", ":", "{", "}", "for", "cat", "in", "self", ".", "_class_seg_map", ".", "keys", "(", ")", "}", "\n", "self", ".", "_full_shape_ious", "=", "{", "cat", ":", "[", "]", "for", "cat", "in", "self", ".", "_class_seg_map", ".", "keys", "(", ")", "}", "\n", "self", ".", "_full_miou_per_class", "=", "None", "\n", "self", ".", "_full_Cmiou", "=", "None", "\n", "self", ".", "_full_Imiou", "=", "None", "\n", "self", ".", "_full_res", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.shapenet_part_tracker.ShapenetPartTracker.track": [[49, 75], ["super().track", "shapenet_part_tracker.ShapenetPartTracker._convert", "shapenet_part_tracker.ShapenetPartTracker._convert", "shapenet_part_tracker.ShapenetPartTracker._convert", "range", "shapenet_part_tracker.ShapenetPartTracker._get_metrics_per_class", "model.get_output", "model.get_labels", "model.get_batch", "ValueError", "shapenet_part_tracker.ShapenetPartTracker.max", "shapenet_part_tracker.ShapenetPartTracker._add_votes", "shapenet_part_tracker.ShapenetPartTracker._compute_part_ious", "shapenet_part_tracker.ShapenetPartTracker._shape_ious[].append", "logits[].argmax", "numpy.mean"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.classification_tracker.ClassificationTracker.track", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.base_tracker.BaseTracker._convert", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.base_tracker.BaseTracker._convert", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.base_tracker.BaseTracker._convert", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.shapenet_part_tracker.ShapenetPartTracker._get_metrics_per_class", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.get_output", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.get_labels", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.get_batch", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.shapenet_part_tracker.ShapenetPartTracker._add_votes", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.shapenet_part_tracker.ShapenetPartTracker._compute_part_ious", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.lovasz_loss.mean"], ["", "def", "track", "(", "self", ",", "model", ":", "model_interface", ".", "TrackerInterface", ",", "full_res", ":", "bool", "=", "False", ",", "data", ":", "Data", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\" Add current model predictions (usually the result of a batch) to the tracking\n        \"\"\"", "\n", "super", "(", ")", ".", "track", "(", "model", ")", "\n", "self", ".", "_conv_type", "=", "model", ".", "conv_type", "\n", "outputs", "=", "self", ".", "_convert", "(", "model", ".", "get_output", "(", ")", ")", "\n", "targets", "=", "self", ".", "_convert", "(", "model", ".", "get_labels", "(", ")", ")", "\n", "batch_idx", "=", "self", ".", "_convert", "(", "model", ".", "get_batch", "(", ")", ")", "\n", "if", "batch_idx", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Your model need to set the batch_idx variable in its set_input function.\"", ")", "\n", "\n", "", "nb_batches", "=", "batch_idx", ".", "max", "(", ")", "+", "1", "\n", "\n", "if", "self", ".", "_stage", "!=", "\"train\"", "and", "full_res", ":", "\n", "            ", "self", ".", "_add_votes", "(", "data", ",", "outputs", ",", "batch_idx", ")", "\n", "\n", "# pred to the groundtruth classes (selected by seg_classes[cat])", "\n", "", "for", "b", "in", "range", "(", "nb_batches", ")", ":", "\n", "            ", "segl", "=", "targets", "[", "batch_idx", "==", "b", "]", "\n", "cat", "=", "self", ".", "_seg_to_class", "[", "segl", "[", "0", "]", "]", "\n", "logits", "=", "outputs", "[", "batch_idx", "==", "b", ",", ":", "]", "# (num_points, num_classes)", "\n", "segp", "=", "logits", "[", ":", ",", "self", ".", "_class_seg_map", "[", "cat", "]", "]", ".", "argmax", "(", "1", ")", "+", "self", ".", "_class_seg_map", "[", "cat", "]", "[", "0", "]", "\n", "part_ious", "=", "self", ".", "_compute_part_ious", "(", "segl", ",", "segp", ",", "cat", ")", "\n", "self", ".", "_shape_ious", "[", "cat", "]", ".", "append", "(", "np", ".", "mean", "(", "part_ious", ")", ")", "\n", "\n", "", "self", ".", "_miou_per_class", ",", "self", ".", "_Cmiou", ",", "self", ".", "_Imiou", "=", "ShapenetPartTracker", ".", "_get_metrics_per_class", "(", "self", ".", "_shape_ious", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.shapenet_part_tracker.ShapenetPartTracker._add_votes": [[76, 94], ["range", "batch_idx.max", "[].item", "data.id_scan[].item", "[].add_vote", "shapenet_part_tracker.ShapenetPartTracker._dataset.get_raw_data", "torch_points3d.metrics.segmentation_helpers.SegmentationVoter"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.segmentation_helpers.SegmentationVoter.add_vote", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.scannet.Scannet.get_raw_data"], ["", "def", "_add_votes", "(", "self", ",", "data", ",", "outputs", ",", "batch_idx", ")", ":", "\n", "        ", "nb_batches", "=", "batch_idx", ".", "max", "(", ")", "+", "1", "\n", "for", "b", "in", "range", "(", "nb_batches", ")", ":", "\n", "            ", "batch_mask", "=", "b", "\n", "if", "self", ".", "_conv_type", "!=", "\"DENSE\"", ":", "\n", "                ", "batch_mask", "=", "batch_idx", "==", "b", "\n", "", "segl", "=", "data", ".", "y", "[", "batch_mask", "]", "[", "0", "]", ".", "item", "(", ")", "\n", "\n", "cat", "=", "self", ".", "_seg_to_class", "[", "segl", "]", "\n", "logits", "=", "outputs", "[", "batch_idx", "==", "b", ",", ":", "]", "# (num_points, num_classes)", "\n", "\n", "id_scan", "=", "data", ".", "id_scan", "[", "b", "]", ".", "item", "(", ")", "\n", "if", "id_scan", "not", "in", "self", ".", "_full_res_scans", "[", "cat", "]", ":", "\n", "                ", "raw_data", "=", "self", ".", "_dataset", ".", "get_raw_data", "(", "self", ".", "_stage", ",", "id_scan", ")", "\n", "self", ".", "_full_res_scans", "[", "cat", "]", "[", "id_scan", "]", "=", "SegmentationVoter", "(", "\n", "raw_data", ",", "self", ".", "_num_classes", ",", "self", ".", "_conv_type", ",", "class_seg_map", "=", "self", ".", "_class_seg_map", "[", "cat", "]", "\n", ")", "\n", "", "self", ".", "_full_res_scans", "[", "cat", "]", "[", "id_scan", "]", ".", "add_vote", "(", "data", ",", "logits", ",", "batch_mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.shapenet_part_tracker.ShapenetPartTracker.finalise": [[95, 113], ["shapenet_part_tracker.ShapenetPartTracker._full_res_scans.keys", "shapenet_part_tracker.ShapenetPartTracker._get_metrics_per_class", "numpy.sum", "shapenet_part_tracker.ShapenetPartTracker._full_res_scans[].values", "sample.full_res_labels.numpy", "sample.full_res_preds.numpy", "shapenet_part_tracker.ShapenetPartTracker._compute_part_ious", "shapenet_part_tracker.ShapenetPartTracker._full_shape_ious[].append", "bool", "numpy.mean", "list", "shapenet_part_tracker.ShapenetPartTracker._full_res_scans.values"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.mock.MockDatasetConfig.keys", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.shapenet_part_tracker.ShapenetPartTracker._get_metrics_per_class", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.shapenet_part_tracker.ShapenetPartTracker._compute_part_ious", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.lovasz_loss.mean"], ["", "", "def", "finalise", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "# Check if at least one element has been created for full res interpolation", "\n", "        ", "contains_elements", "=", "np", ".", "sum", "(", "[", "bool", "(", "d", ")", "for", "d", "in", "list", "(", "self", ".", "_full_res_scans", ".", "values", "(", ")", ")", "]", ")", ">", "0", "\n", "if", "not", "contains_elements", ":", "\n", "            ", "return", "\n", "\n", "", "for", "cat", "in", "self", ".", "_full_res_scans", ".", "keys", "(", ")", ":", "\n", "            ", "samples", "=", "self", ".", "_full_res_scans", "[", "cat", "]", ".", "values", "(", ")", "\n", "for", "sample", "in", "samples", ":", "\n", "                ", "segl", "=", "sample", ".", "full_res_labels", ".", "numpy", "(", ")", "\n", "segp", "=", "sample", ".", "full_res_preds", ".", "numpy", "(", ")", "\n", "part_ious", "=", "self", ".", "_compute_part_ious", "(", "segl", ",", "segp", ",", "cat", ")", "\n", "self", ".", "_full_shape_ious", "[", "cat", "]", ".", "append", "(", "np", ".", "mean", "(", "part_ious", ")", ")", "\n", "", "", "self", ".", "_full_miou_per_class", ",", "self", ".", "_full_Cmiou", ",", "self", ".", "_full_Imiou", "=", "ShapenetPartTracker", ".", "_get_metrics_per_class", "(", "\n", "self", ".", "_full_shape_ious", "\n", ")", "\n", "\n", "self", ".", "_full_res", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.shapenet_part_tracker.ShapenetPartTracker._compute_part_ious": [[114, 125], ["numpy.zeros", "len", "numpy.sum", "float", "float", "numpy.sum", "numpy.sum"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "def", "_compute_part_ious", "(", "self", ",", "segl", ",", "segp", ",", "cat", ")", ":", "\n", "        ", "part_ious", "=", "np", ".", "zeros", "(", "len", "(", "self", ".", "_class_seg_map", "[", "cat", "]", ")", ")", "\n", "for", "l", "in", "self", ".", "_class_seg_map", "[", "cat", "]", ":", "\n", "            ", "if", "np", ".", "sum", "(", "(", "segl", "==", "l", ")", "|", "(", "segp", "==", "l", ")", ")", "==", "0", ":", "\n", "# part is not present in this shape", "\n", "                ", "part_ious", "[", "l", "-", "self", ".", "_class_seg_map", "[", "cat", "]", "[", "0", "]", "]", "=", "1", "\n", "", "else", ":", "\n", "                ", "part_ious", "[", "l", "-", "self", ".", "_class_seg_map", "[", "cat", "]", "[", "0", "]", "]", "=", "float", "(", "np", ".", "sum", "(", "(", "segl", "==", "l", ")", "&", "(", "segp", "==", "l", ")", ")", ")", "/", "float", "(", "\n", "np", ".", "sum", "(", "(", "segl", "==", "l", ")", "|", "(", "segp", "==", "l", ")", ")", "\n", ")", "\n", "", "", "return", "part_ious", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.shapenet_part_tracker.ShapenetPartTracker.get_metrics": [[126, 140], ["super().get_metrics"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.classification_tracker.ClassificationTracker.get_metrics"], ["", "def", "get_metrics", "(", "self", ",", "verbose", "=", "False", ")", ":", "\n", "        ", "\"\"\" Returns a dictionnary of all metrics and losses being tracked\n        \"\"\"", "\n", "metrics", "=", "super", "(", ")", ".", "get_metrics", "(", "verbose", ")", "\n", "metrics", "[", "\"{}_Cmiou\"", ".", "format", "(", "self", ".", "_stage", ")", "]", "=", "self", ".", "_Cmiou", "*", "100", "\n", "metrics", "[", "\"{}_Imiou\"", ".", "format", "(", "self", ".", "_stage", ")", "]", "=", "self", ".", "_Imiou", "*", "100", "\n", "if", "self", ".", "_full_res", ":", "\n", "            ", "metrics", "[", "\"{}_full_Cmiou\"", ".", "format", "(", "self", ".", "_stage", ")", "]", "=", "self", ".", "_full_Cmiou", "*", "100", "\n", "metrics", "[", "\"{}_full_Imiou\"", ".", "format", "(", "self", ".", "_stage", ")", "]", "=", "self", ".", "_full_Imiou", "*", "100", "\n", "", "if", "verbose", ":", "\n", "            ", "metrics", "[", "\"{}_Imiou_per_class\"", ".", "format", "(", "self", ".", "_stage", ")", "]", "=", "self", ".", "_miou_per_class", "\n", "if", "self", ".", "_full_res", ":", "\n", "                ", "metrics", "[", "\"{}_full_Imiou_per_class\"", ".", "format", "(", "self", ".", "_stage", ")", "]", "=", "self", ".", "_full_miou_per_class", "\n", "", "", "return", "metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.shapenet_part_tracker.ShapenetPartTracker.metric_func": [[141, 145], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "metric_func", "(", "self", ")", ":", "\n", "        ", "self", ".", "_metric_func", "=", "{", "\"Cmiou\"", ":", "max", ",", "\"Imiou\"", ":", "max", ",", "\"loss\"", ":", "min", "}", "\n", "return", "self", ".", "_metric_func", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.shapenet_part_tracker.ShapenetPartTracker._get_metrics_per_class": [[146, 157], ["shape_ious.keys", "numpy.mean", "len", "list", "numpy.mean", "instance_ious.append", "numpy.mean", "cat_ious.values"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.mock.MockDatasetConfig.keys", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.lovasz_loss.mean", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.lovasz_loss.mean", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.lovasz_loss.mean"], ["", "@", "staticmethod", "\n", "def", "_get_metrics_per_class", "(", "shape_ious", ")", ":", "\n", "        ", "instance_ious", "=", "[", "]", "\n", "cat_ious", "=", "{", "}", "\n", "for", "cat", "in", "shape_ious", ".", "keys", "(", ")", ":", "\n", "            ", "for", "iou", "in", "shape_ious", "[", "cat", "]", ":", "\n", "                ", "instance_ious", ".", "append", "(", "iou", ")", "\n", "", "if", "len", "(", "shape_ious", "[", "cat", "]", ")", ":", "\n", "                ", "cat_ious", "[", "cat", "]", "=", "np", ".", "mean", "(", "shape_ious", "[", "cat", "]", ")", "\n", "", "", "mean_class_ious", "=", "np", ".", "mean", "(", "list", "(", "cat_ious", ".", "values", "(", ")", ")", ")", "\n", "return", "cat_ious", ",", "mean_class_ious", ",", "np", ".", "mean", "(", "instance_ious", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.confusion_matrix.ConfusionMatrix.__init__": [[10, 13], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "number_of_labels", "=", "2", ")", ":", "\n", "        ", "self", ".", "number_of_labels", "=", "number_of_labels", "\n", "self", ".", "confusion_matrix", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.confusion_matrix.ConfusionMatrix.create_from_matrix": [[14, 20], ["confusion_matrix.ConfusionMatrix"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "create_from_matrix", "(", "confusion_matrix", ")", ":", "\n", "        ", "assert", "confusion_matrix", ".", "shape", "[", "0", "]", "==", "confusion_matrix", ".", "shape", "[", "1", "]", "\n", "matrix", "=", "ConfusionMatrix", "(", "confusion_matrix", ".", "shape", "[", "0", "]", ")", "\n", "matrix", ".", "confusion_matrix", "=", "confusion_matrix", "\n", "return", "matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.confusion_matrix.ConfusionMatrix.count_predicted_batch": [[21, 34], ["torch.is_tensor", "torch.is_tensor", "numpy.bincount().reshape", "numpy.max", "ground_truth_vec.numpy.numpy.numpy", "predicted.numpy.numpy.numpy", "numpy.bincount", "ground_truth_vec.numpy.numpy.astype"], "methods", ["None"], ["", "def", "count_predicted_batch", "(", "self", ",", "ground_truth_vec", ",", "predicted", ")", ":", "\n", "        ", "assert", "np", ".", "max", "(", "predicted", ")", "<", "self", ".", "number_of_labels", "\n", "if", "torch", ".", "is_tensor", "(", "ground_truth_vec", ")", ":", "\n", "            ", "ground_truth_vec", "=", "ground_truth_vec", ".", "numpy", "(", ")", "\n", "", "if", "torch", ".", "is_tensor", "(", "predicted", ")", ":", "\n", "            ", "predicted", "=", "predicted", ".", "numpy", "(", ")", "\n", "", "batch_confusion", "=", "np", ".", "bincount", "(", "\n", "self", ".", "number_of_labels", "*", "ground_truth_vec", ".", "astype", "(", "int", ")", "+", "predicted", ",", "minlength", "=", "self", ".", "number_of_labels", "**", "2", "\n", ")", ".", "reshape", "(", "self", ".", "number_of_labels", ",", "self", ".", "number_of_labels", ")", "\n", "if", "self", ".", "confusion_matrix", "is", "None", ":", "\n", "            ", "self", ".", "confusion_matrix", "=", "batch_confusion", "\n", "", "else", ":", "\n", "            ", "self", ".", "confusion_matrix", "+=", "batch_confusion", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.confusion_matrix.ConfusionMatrix.get_count": [[35, 38], ["None"], "methods", ["None"], ["", "", "def", "get_count", "(", "self", ",", "ground_truth", ",", "predicted", ")", ":", "\n", "        ", "\"\"\"labels are integers from 0 to number_of_labels-1\"\"\"", "\n", "return", "self", ".", "confusion_matrix", "[", "ground_truth", "]", "[", "predicted", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.confusion_matrix.ConfusionMatrix.get_confusion_matrix": [[39, 43], ["None"], "methods", ["None"], ["", "def", "get_confusion_matrix", "(", "self", ")", ":", "\n", "        ", "\"\"\"returns list of lists of integers; use it as result[ground_truth][predicted]\n            to know how many samples of class ground_truth were reported as class predicted\"\"\"", "\n", "return", "self", ".", "confusion_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.confusion_matrix.ConfusionMatrix.get_intersection_union_per_class": [[44, 57], ["numpy.sum", "numpy.sum", "numpy.diagonal"], "methods", ["None"], ["", "def", "get_intersection_union_per_class", "(", "self", ")", ":", "\n", "        ", "\"\"\" Computes the intersection over union of each class in the \n        confusion matrix\n        Return:\n            (iou, missing_class_mask) - iou for class as well as a mask highlighting existing classes\n        \"\"\"", "\n", "TP_plus_FN", "=", "np", ".", "sum", "(", "self", ".", "confusion_matrix", ",", "axis", "=", "0", ")", "\n", "TP_plus_FP", "=", "np", ".", "sum", "(", "self", ".", "confusion_matrix", ",", "axis", "=", "1", ")", "\n", "TP", "=", "np", ".", "diagonal", "(", "self", ".", "confusion_matrix", ")", "\n", "union", "=", "TP_plus_FN", "+", "TP_plus_FP", "-", "TP", "\n", "iou", "=", "1e-8", "+", "TP", "/", "(", "union", "+", "1e-8", ")", "\n", "existing_class_mask", "=", "union", ">", "1e-3", "\n", "return", "iou", ",", "existing_class_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.confusion_matrix.ConfusionMatrix.get_overall_accuracy": [[58, 71], ["range", "range", "float"], "methods", ["None"], ["", "def", "get_overall_accuracy", "(", "self", ")", ":", "\n", "        ", "\"\"\"returns 64-bit float\"\"\"", "\n", "confusion_matrix", "=", "self", ".", "confusion_matrix", "\n", "matrix_diagonal", "=", "0", "\n", "all_values", "=", "0", "\n", "for", "row", "in", "range", "(", "self", ".", "number_of_labels", ")", ":", "\n", "            ", "for", "column", "in", "range", "(", "self", ".", "number_of_labels", ")", ":", "\n", "                ", "all_values", "+=", "confusion_matrix", "[", "row", "]", "[", "column", "]", "\n", "if", "row", "==", "column", ":", "\n", "                    ", "matrix_diagonal", "+=", "confusion_matrix", "[", "row", "]", "[", "column", "]", "\n", "", "", "", "if", "all_values", "==", "0", ":", "\n", "            ", "all_values", "=", "1", "\n", "", "return", "float", "(", "matrix_diagonal", ")", "/", "all_values", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.confusion_matrix.ConfusionMatrix.get_average_intersection_union": [[72, 83], ["confusion_matrix.ConfusionMatrix.get_intersection_union_per_class", "numpy.sum", "numpy.sum", "numpy.sum"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.confusion_matrix.ConfusionMatrix.get_intersection_union_per_class"], ["", "def", "get_average_intersection_union", "(", "self", ",", "missing_as_one", "=", "False", ")", ":", "\n", "        ", "\"\"\" Get the mIoU metric by ignoring missing labels. \n        If missing_as_one is True then treats missing classes in the IoU as 1\n        \"\"\"", "\n", "values", ",", "existing_classes_mask", "=", "self", ".", "get_intersection_union_per_class", "(", ")", "\n", "if", "np", ".", "sum", "(", "existing_classes_mask", ")", "==", "0", ":", "\n", "            ", "return", "0", "\n", "", "if", "missing_as_one", ":", "\n", "            ", "values", "[", "~", "existing_classes_mask", "]", "=", "1", "\n", "existing_classes_mask", "[", ":", "]", "=", "True", "\n", "", "return", "np", ".", "sum", "(", "values", "[", "existing_classes_mask", "]", ")", "/", "np", ".", "sum", "(", "existing_classes_mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.confusion_matrix.ConfusionMatrix.get_mean_class_accuracy": [[84, 95], ["range", "numpy.sum", "max"], "methods", ["None"], ["", "def", "get_mean_class_accuracy", "(", "self", ")", ":", "# added", "\n", "        ", "re", "=", "0", "\n", "label_presents", "=", "0", "\n", "for", "i", "in", "range", "(", "self", ".", "number_of_labels", ")", ":", "\n", "            ", "total_gt", "=", "np", ".", "sum", "(", "self", ".", "confusion_matrix", "[", "i", ",", ":", "]", ")", "\n", "if", "total_gt", ":", "\n", "                ", "label_presents", "+=", "1", "\n", "re", "=", "re", "+", "self", ".", "confusion_matrix", "[", "i", "]", "[", "i", "]", "/", "max", "(", "1", ",", "total_gt", ")", "\n", "", "", "if", "label_presents", "==", "0", ":", "\n", "            ", "return", "0", "\n", "", "return", "re", "/", "label_presents", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.confusion_matrix.ConfusionMatrix.count_gt": [[96, 98], ["confusion_matrix.ConfusionMatrix.confusion_matrix[].sum"], "methods", ["None"], ["", "def", "count_gt", "(", "self", ",", "ground_truth", ")", ":", "\n", "        ", "return", "self", ".", "confusion_matrix", "[", "ground_truth", ",", ":", "]", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.confusion_matrix.save_confusion_matrix": [[100, 132], ["sns.set", "os.path.join", "plt.subplots", "sns.heatmap", "plt.ylabel", "plt.xlabel", "os.path.join.format", "plt.savefig", "plt.subplots", "sns.heatmap", "plt.ylabel", "plt.xlabel", "os.path.join.format", "plt.savefig", "cm.astype", "cm.astype", "cm.sum", "cm.sum", "numpy.isnan", "numpy.isinf", "numpy.isnan", "numpy.isinf"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.lovasz_loss.isnan", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.lovasz_loss.isnan"], ["", "", "def", "save_confusion_matrix", "(", "cm", ",", "path2save", ",", "ordered_names", ")", ":", "\n", "    ", "import", "seaborn", "as", "sns", "\n", "import", "matplotlib", ".", "pyplot", "as", "plt", "\n", "\n", "sns", ".", "set", "(", "font_scale", "=", "5", ")", "\n", "\n", "template_path", "=", "os", ".", "path", ".", "join", "(", "path2save", ",", "\"{}.svg\"", ")", "\n", "# PRECISION", "\n", "cmn", "=", "cm", ".", "astype", "(", "\"float\"", ")", "/", "cm", ".", "sum", "(", "axis", "=", "-", "1", ")", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "cmn", "[", "np", ".", "isnan", "(", "cmn", ")", "|", "np", ".", "isinf", "(", "cmn", ")", "]", "=", "0", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "figsize", "=", "(", "31", ",", "31", ")", ")", "\n", "sns", ".", "heatmap", "(", "\n", "cmn", ",", "annot", "=", "True", ",", "fmt", "=", "\".2f\"", ",", "xticklabels", "=", "ordered_names", ",", "yticklabels", "=", "ordered_names", ",", "annot_kws", "=", "{", "\"size\"", ":", "20", "}", "\n", ")", "\n", "# g.set_xticklabels(g.get_xticklabels(), rotation = 35, fontsize = 20)", "\n", "plt", ".", "ylabel", "(", "\"Actual\"", ")", "\n", "plt", ".", "xlabel", "(", "\"Predicted\"", ")", "\n", "path_precision", "=", "template_path", ".", "format", "(", "\"precision\"", ")", "\n", "plt", ".", "savefig", "(", "path_precision", ",", "format", "=", "\"svg\"", ")", "\n", "\n", "# RECALL", "\n", "cmn", "=", "cm", ".", "astype", "(", "\"float\"", ")", "/", "cm", ".", "sum", "(", "axis", "=", "0", ")", "[", "np", ".", "newaxis", ",", ":", "]", "\n", "cmn", "[", "np", ".", "isnan", "(", "cmn", ")", "|", "np", ".", "isinf", "(", "cmn", ")", "]", "=", "0", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "figsize", "=", "(", "31", ",", "31", ")", ")", "\n", "sns", ".", "heatmap", "(", "\n", "cmn", ",", "annot", "=", "True", ",", "fmt", "=", "\".2f\"", ",", "xticklabels", "=", "ordered_names", ",", "yticklabels", "=", "ordered_names", ",", "annot_kws", "=", "{", "\"size\"", ":", "20", "}", "\n", ")", "\n", "# g.set_xticklabels(g.get_xticklabels(), rotation = 35, fontsize = 20)", "\n", "plt", ".", "ylabel", "(", "\"Actual\"", ")", "\n", "plt", ".", "xlabel", "(", "\"Predicted\"", ")", "\n", "path_recall", "=", "template_path", ".", "format", "(", "\"recall\"", ")", "\n", "plt", ".", "savefig", "(", "path_recall", ",", "format", "=", "\"svg\"", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.base_tracker.BaseTracker.__init__": [[20, 33], ["os.path.join", "os.getcwd", "log.info", "torch.utils.tensorboard.SummaryWriter"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "stage", ":", "str", ",", "wandb_log", ":", "bool", ",", "use_tensorboard", ":", "bool", ")", ":", "\n", "        ", "self", ".", "_wandb", "=", "wandb_log", "\n", "self", ".", "_use_tensorboard", "=", "use_tensorboard", "\n", "self", ".", "_tensorboard_dir", "=", "os", ".", "path", ".", "join", "(", "os", ".", "getcwd", "(", ")", ",", "\"tensorboard\"", ")", "\n", "self", ".", "_n_iter", "=", "0", "\n", "self", ".", "_finalised", "=", "False", "\n", "self", ".", "_conv_type", "=", "None", "\n", "\n", "if", "self", ".", "_use_tensorboard", ":", "\n", "            ", "log", ".", "info", "(", "\n", "\"Access tensorboard with the following command <tensorboard --logdir={}>\"", ".", "format", "(", "self", ".", "_tensorboard_dir", ")", "\n", ")", "\n", "self", ".", "_writer", "=", "SummaryWriter", "(", "log_dir", "=", "self", ".", "_tensorboard_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.base_tracker.BaseTracker.reset": [[34, 38], ["None"], "methods", ["None"], ["", "", "def", "reset", "(", "self", ",", "stage", "=", "\"train\"", ")", ":", "\n", "        ", "self", ".", "_stage", "=", "stage", "\n", "self", ".", "_loss_meters", "=", "{", "}", "\n", "self", ".", "_finalised", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.base_tracker.BaseTracker.get_metrics": [[39, 46], ["base_tracker.BaseTracker._loss_meters.items", "base_tracker.meter_value", "base_tracker.meter_value"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.base_tracker.meter_value", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.base_tracker.meter_value"], ["", "def", "get_metrics", "(", "self", ",", "verbose", "=", "False", ")", "->", "Dict", "[", "str", ",", "Any", "]", ":", "\n", "        ", "metrics", "=", "{", "}", "\n", "for", "key", ",", "loss_meter", "in", "self", ".", "_loss_meters", ".", "items", "(", ")", ":", "\n", "            ", "value", "=", "meter_value", "(", "loss_meter", ",", "dim", "=", "0", ")", "\n", "if", "value", ":", "\n", "                ", "metrics", "[", "key", "]", "=", "meter_value", "(", "loss_meter", ",", "dim", "=", "0", ")", "\n", "", "", "return", "metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.base_tracker.BaseTracker.metric_func": [[47, 51], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "metric_func", "(", "self", ")", ":", "\n", "        ", "self", ".", "_metric_func", "=", "{", "\"loss\"", ":", "min", "}", "\n", "return", "self", ".", "_metric_func", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.base_tracker.BaseTracker.track": [[52, 57], ["base_tracker.BaseTracker._convert", "base_tracker.BaseTracker._append_losses", "RuntimeError", "model.get_current_losses"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.base_tracker.BaseTracker._convert", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.base_tracker.BaseTracker._append_losses", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.get_current_losses"], ["", "def", "track", "(", "self", ",", "model", ":", "model_interface", ".", "TrackerInterface", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "self", ".", "_finalised", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Cannot track new values with a finalised tracker, you need to reset it first\"", ")", "\n", "", "losses", "=", "self", ".", "_convert", "(", "model", ".", "get_current_losses", "(", ")", ")", "\n", "self", ".", "_append_losses", "(", "losses", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.base_tracker.BaseTracker.finalise": [[58, 63], ["None"], "methods", ["None"], ["", "def", "finalise", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\" Lifcycle method that is called at the end of an epoch. Use this to compute\n        end of epoch metrics.\n        \"\"\"", "\n", "self", ".", "_finalised", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.base_tracker.BaseTracker._append_losses": [[64, 72], ["losses.items", "base_tracker.BaseTracker._loss_meters[].add", "torchnet.meter.AverageValueMeter"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.meters.APMeter.add"], ["", "def", "_append_losses", "(", "self", ",", "losses", ")", ":", "\n", "        ", "for", "key", ",", "loss", "in", "losses", ".", "items", "(", ")", ":", "\n", "            ", "if", "loss", "is", "None", ":", "\n", "                ", "continue", "\n", "", "loss_key", "=", "\"%s_%s\"", "%", "(", "self", ".", "_stage", ",", "key", ")", "\n", "if", "loss_key", "not", "in", "self", ".", "_loss_meters", ":", "\n", "                ", "self", ".", "_loss_meters", "[", "loss_key", "]", "=", "tnt", ".", "meter", ".", "AverageValueMeter", "(", ")", "\n", "", "self", ".", "_loss_meters", "[", "loss_key", "]", ".", "add", "(", "loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.base_tracker.BaseTracker._convert": [[73, 79], ["torch.is_tensor", "x.detach().cpu().numpy", "x.detach().cpu", "x.detach"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.csr.CSRData.cpu"], ["", "", "@", "staticmethod", "\n", "def", "_convert", "(", "x", ")", ":", "\n", "        ", "if", "torch", ".", "is_tensor", "(", "x", ")", ":", "\n", "            ", "return", "x", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.base_tracker.BaseTracker.publish_to_tensorboard": [[80, 84], ["metrics.items", "base_tracker.BaseTracker._writer.add_scalar", "metric_name.replace"], "methods", ["None"], ["", "", "def", "publish_to_tensorboard", "(", "self", ",", "metrics", ",", "step", ")", ":", "\n", "        ", "for", "metric_name", ",", "metric_value", "in", "metrics", ".", "items", "(", ")", ":", "\n", "            ", "metric_name", "=", "\"{}/{}\"", ".", "format", "(", "metric_name", ".", "replace", "(", "self", ".", "_stage", "+", "\"_\"", ",", "\"\"", ")", ",", "self", ".", "_stage", ")", "\n", "self", ".", "_writer", ".", "add_scalar", "(", "metric_name", ",", "metric_value", ",", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.base_tracker.BaseTracker._remove_stage_from_metric_keys": [[85, 91], ["metrics.items", "metric_name.replace"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "_remove_stage_from_metric_keys", "(", "stage", ",", "metrics", ")", ":", "\n", "        ", "new_metrics", "=", "{", "}", "\n", "for", "metric_name", ",", "metric_value", "in", "metrics", ".", "items", "(", ")", ":", "\n", "            ", "new_metrics", "[", "metric_name", ".", "replace", "(", "stage", "+", "\"_\"", ",", "\"\"", ")", "]", "=", "metric_value", "\n", "", "return", "new_metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.base_tracker.BaseTracker.publish": [[92, 118], ["base_tracker.BaseTracker.get_metrics", "wandb.log", "base_tracker.BaseTracker.publish_to_tensorboard", "base_tracker.BaseTracker._remove_stage_from_metric_keys().items", "base_tracker.BaseTracker.metric_func.keys", "base_tracker.BaseTracker._remove_stage_from_metric_keys"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.classification_tracker.ClassificationTracker.get_metrics", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.base_tracker.BaseTracker.publish_to_tensorboard", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.mock.MockDatasetConfig.keys", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.base_tracker.BaseTracker._remove_stage_from_metric_keys"], ["", "def", "publish", "(", "self", ",", "step", ")", ":", "\n", "        ", "\"\"\" Publishes the current metrics to wandb and tensorboard\n        Arguments:\n            step: current epoch\n        \"\"\"", "\n", "metrics", "=", "self", ".", "get_metrics", "(", ")", "\n", "\n", "if", "self", ".", "_wandb", ":", "\n", "            ", "wandb", ".", "log", "(", "metrics", ",", "step", "=", "step", ")", "\n", "\n", "", "if", "self", ".", "_use_tensorboard", ":", "\n", "            ", "self", ".", "publish_to_tensorboard", "(", "metrics", ",", "step", ")", "\n", "\n", "# Some metrics may be intended for wandb or tensorboard", "\n", "# tracking but not for final final model selection. Those are", "\n", "# the metrics absent from self.metric_func and must be excluded", "\n", "# from the output of self.publish", "\n", "", "current_metrics", "=", "{", "\n", "k", ":", "v", "\n", "for", "k", ",", "v", "in", "self", ".", "_remove_stage_from_metric_keys", "(", "self", ".", "_stage", ",", "metrics", ")", ".", "items", "(", ")", "\n", "if", "k", "in", "self", ".", "metric_func", ".", "keys", "(", ")", "}", "\n", "\n", "return", "{", "\n", "\"stage\"", ":", "self", ".", "_stage", ",", "\n", "\"epoch\"", ":", "step", ",", "\n", "\"current_metrics\"", ":", "current_metrics", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.base_tracker.BaseTracker.print_summary": [[120, 126], ["base_tracker.BaseTracker.get_metrics", "log.info", "base_tracker.BaseTracker.items", "log.info", "log.info", "range", "range"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.classification_tracker.ClassificationTracker.get_metrics"], ["", "def", "print_summary", "(", "self", ")", ":", "\n", "        ", "metrics", "=", "self", ".", "get_metrics", "(", "verbose", "=", "True", ")", "\n", "log", ".", "info", "(", "\"\"", ".", "join", "(", "[", "\"=\"", "for", "i", "in", "range", "(", "50", ")", "]", ")", ")", "\n", "for", "key", ",", "value", "in", "metrics", ".", "items", "(", ")", ":", "\n", "            ", "log", ".", "info", "(", "\"    {} = {}\"", ".", "format", "(", "key", ",", "value", ")", ")", "\n", "", "log", ".", "info", "(", "\"\"", ".", "join", "(", "[", "\"=\"", "for", "i", "in", "range", "(", "50", ")", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.base_tracker.BaseTracker._dict_to_str": [[127, 134], ["dictionnary.items", "str"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_dict_to_str", "(", "dictionnary", ")", ":", "\n", "        ", "string", "=", "\"{\"", "\n", "for", "key", ",", "value", "in", "dictionnary", ".", "items", "(", ")", ":", "\n", "            ", "string", "+=", "\"%s: %.2f,\"", "%", "(", "str", "(", "key", ")", ",", "value", ")", "\n", "", "string", "+=", "\"}\"", "\n", "return", "string", "\n", "", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.base_tracker.meter_value": [[15, 17], ["float", "meter.value"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.meters.APMeter.value"], ["def", "meter_value", "(", "meter", ",", "dim", "=", "0", ")", ":", "\n", "    ", "return", "float", "(", "meter", ".", "value", "(", ")", "[", "dim", "]", ")", "if", "meter", ".", "n", ">", "0", "else", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.lovasz_loss.StableBCELoss.__init__": [[131, 133], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "StableBCELoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.lovasz_loss.StableBCELoss.forward": [[134, 138], ["loss.mean", "input.abs", "input.clamp", "neg_abs.exp"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.lovasz_loss.mean"], ["", "def", "forward", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "neg_abs", "=", "-", "input", ".", "abs", "(", ")", "\n", "loss", "=", "input", ".", "clamp", "(", "min", "=", "0", ")", "-", "input", "*", "target", "+", "(", "1", "+", "neg_abs", ".", "exp", "(", ")", ")", ".", "log", "(", ")", "\n", "return", "loss", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.lovasz_loss.lovasz_grad": [[19, 32], ["len", "gt_sorted.sum", "gt_sorted.float().cumsum", "gt_sorted.float"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "def", "lovasz_grad", "(", "gt_sorted", ")", ":", "\n", "    ", "\"\"\"\n    Computes gradient of the Lovasz extension w.r.t sorted errors\n    See Alg. 1 in paper\n    \"\"\"", "\n", "p", "=", "len", "(", "gt_sorted", ")", "\n", "gts", "=", "gt_sorted", ".", "sum", "(", ")", "\n", "intersection", "=", "gts", "-", "gt_sorted", ".", "float", "(", ")", ".", "cumsum", "(", "0", ")", "\n", "union", "=", "gts", "+", "(", "1", "-", "gt_sorted", ")", ".", "float", "(", ")", ".", "cumsum", "(", "0", ")", "\n", "jaccard", "=", "1.", "-", "intersection", "/", "union", "\n", "if", "p", ">", "1", ":", "# cover 1-pixel case", "\n", "        ", "jaccard", "[", "1", ":", "p", "]", "=", "jaccard", "[", "1", ":", "p", "]", "-", "jaccard", "[", "0", ":", "-", "1", "]", "\n", "", "return", "jaccard", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.lovasz_loss.iou_binary": [[34, 52], ["zip", "lovasz_loss.mean", "ious.append", "float", "float"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.lovasz_loss.mean", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append"], ["", "def", "iou_binary", "(", "preds", ",", "labels", ",", "EMPTY", "=", "1.", ",", "ignore", "=", "None", ",", "per_image", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    IoU for foreground class\n    binary: 1 foreground, 0 background\n    \"\"\"", "\n", "if", "not", "per_image", ":", "\n", "        ", "preds", ",", "labels", "=", "(", "preds", ",", ")", ",", "(", "labels", ",", ")", "\n", "", "ious", "=", "[", "]", "\n", "for", "pred", ",", "label", "in", "zip", "(", "preds", ",", "labels", ")", ":", "\n", "        ", "intersection", "=", "(", "(", "label", "==", "1", ")", "&", "(", "pred", "==", "1", ")", ")", ".", "sum", "(", ")", "\n", "union", "=", "(", "(", "label", "==", "1", ")", "|", "(", "(", "pred", "==", "1", ")", "&", "(", "label", "!=", "ignore", ")", ")", ")", ".", "sum", "(", ")", "\n", "if", "not", "union", ":", "\n", "            ", "iou", "=", "EMPTY", "\n", "", "else", ":", "\n", "            ", "iou", "=", "float", "(", "intersection", ")", "/", "float", "(", "union", ")", "\n", "", "ious", ".", "append", "(", "iou", ")", "\n", "", "iou", "=", "mean", "(", "ious", ")", "# mean accross images if per_image", "\n", "return", "100", "*", "iou", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.lovasz_loss.iou": [[54, 74], ["zip", "range", "ious.append", "lovasz_loss.mean", "numpy.array", "zip", "iou.append", "iou.append", "float", "float"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.lovasz_loss.mean", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append"], ["", "def", "iou", "(", "preds", ",", "labels", ",", "C", ",", "EMPTY", "=", "1.", ",", "ignore", "=", "None", ",", "per_image", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Array of IoU for each (non ignored) class\n    \"\"\"", "\n", "if", "not", "per_image", ":", "\n", "        ", "preds", ",", "labels", "=", "(", "preds", ",", ")", ",", "(", "labels", ",", ")", "\n", "", "ious", "=", "[", "]", "\n", "for", "pred", ",", "label", "in", "zip", "(", "preds", ",", "labels", ")", ":", "\n", "        ", "iou", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "C", ")", ":", "\n", "            ", "if", "i", "!=", "ignore", ":", "# The ignored label is sometimes among predicted classes (ENet - CityScapes)", "\n", "                ", "intersection", "=", "(", "(", "label", "==", "i", ")", "&", "(", "pred", "==", "i", ")", ")", ".", "sum", "(", ")", "\n", "union", "=", "(", "(", "label", "==", "i", ")", "|", "(", "(", "pred", "==", "i", ")", "&", "(", "label", "!=", "ignore", ")", ")", ")", ".", "sum", "(", ")", "\n", "if", "not", "union", ":", "\n", "                    ", "iou", ".", "append", "(", "EMPTY", ")", "\n", "", "else", ":", "\n", "                    ", "iou", ".", "append", "(", "float", "(", "intersection", ")", "/", "float", "(", "union", ")", ")", "\n", "", "", "", "ious", ".", "append", "(", "iou", ")", "\n", "", "ious", "=", "[", "mean", "(", "iou", ")", "for", "iou", "in", "zip", "(", "*", "ious", ")", "]", "# mean accross images if per_image", "\n", "return", "100", "*", "np", ".", "array", "(", "ious", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.lovasz_loss.lovasz_hinge": [[79, 93], ["lovasz_loss.mean", "lovasz_loss.lovasz_hinge_flat", "lovasz_loss.lovasz_hinge_flat", "lovasz_loss.flatten_binary_scores", "zip", "lovasz_loss.flatten_binary_scores", "log.unsqueeze", "lab.unsqueeze"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.lovasz_loss.mean", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.lovasz_loss.lovasz_hinge_flat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.lovasz_loss.lovasz_hinge_flat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.lovasz_loss.flatten_binary_scores", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.lovasz_loss.flatten_binary_scores"], ["", "def", "lovasz_hinge", "(", "logits", ",", "labels", ",", "per_image", "=", "True", ",", "ignore", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Binary Lovasz hinge loss\n      logits: [B, H, W] Variable, logits at each pixel (between -\\infty and +\\infty)\n      labels: [B, H, W] Tensor, binary ground truth masks (0 or 1)\n      per_image: compute the loss per image instead of per batch\n      ignore: void class id\n    \"\"\"", "\n", "if", "per_image", ":", "\n", "        ", "loss", "=", "mean", "(", "lovasz_hinge_flat", "(", "*", "flatten_binary_scores", "(", "log", ".", "unsqueeze", "(", "0", ")", ",", "lab", ".", "unsqueeze", "(", "0", ")", ",", "ignore", ")", ")", "\n", "for", "log", ",", "lab", "in", "zip", "(", "logits", ",", "labels", ")", ")", "\n", "", "else", ":", "\n", "        ", "loss", "=", "lovasz_hinge_flat", "(", "*", "flatten_binary_scores", "(", "logits", ",", "labels", ",", "ignore", ")", ")", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.lovasz_loss.lovasz_hinge_flat": [[95, 113], ["torch.sort", "torch.sort", "lovasz_loss.lovasz_grad", "torch.dot", "torch.dot", "len", "torch.relu", "torch.autograd.Variable", "logits.sum", "labels.float", "torch.autograd.Variable"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.lovasz_loss.lovasz_grad", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "def", "lovasz_hinge_flat", "(", "logits", ",", "labels", ")", ":", "\n", "    ", "\"\"\"\n    Binary Lovasz hinge loss\n      logits: [P] Variable, logits at each prediction (between -\\infty and +\\infty)\n      labels: [P] Tensor, binary ground truth labels (0 or 1)\n      ignore: label to ignore\n    \"\"\"", "\n", "if", "len", "(", "labels", ")", "==", "0", ":", "\n", "# only void pixels, the gradients should be 0", "\n", "        ", "return", "logits", ".", "sum", "(", ")", "*", "0.", "\n", "", "signs", "=", "2.", "*", "labels", ".", "float", "(", ")", "-", "1.", "\n", "errors", "=", "(", "1.", "-", "logits", "*", "Variable", "(", "signs", ")", ")", "\n", "errors_sorted", ",", "perm", "=", "torch", ".", "sort", "(", "errors", ",", "dim", "=", "0", ",", "descending", "=", "True", ")", "\n", "perm", "=", "perm", ".", "data", "\n", "gt_sorted", "=", "labels", "[", "perm", "]", "\n", "grad", "=", "lovasz_grad", "(", "gt_sorted", ")", "\n", "loss", "=", "torch", ".", "dot", "(", "F", ".", "relu", "(", "errors_sorted", ")", ",", "Variable", "(", "grad", ")", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.lovasz_loss.flatten_binary_scores": [[115, 128], ["scores.view.view", "labels.view.view"], "function", ["None"], ["", "def", "flatten_binary_scores", "(", "scores", ",", "labels", ",", "ignore", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Flattens predictions in the batch (binary case)\n    Remove labels equal to 'ignore'\n    \"\"\"", "\n", "scores", "=", "scores", ".", "view", "(", "-", "1", ")", "\n", "labels", "=", "labels", ".", "view", "(", "-", "1", ")", "\n", "if", "ignore", "is", "None", ":", "\n", "        ", "return", "scores", ",", "labels", "\n", "", "valid", "=", "(", "labels", "!=", "ignore", ")", "\n", "vscores", "=", "scores", "[", "valid", "]", "\n", "vlabels", "=", "labels", "[", "valid", "]", "\n", "return", "vscores", ",", "vlabels", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.lovasz_loss.binary_xloss": [[140, 150], ["lovasz_loss.flatten_binary_scores", "lovasz_loss.StableBCELoss", "torch.autograd.Variable", "labels.float"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.lovasz_loss.flatten_binary_scores"], ["", "", "def", "binary_xloss", "(", "logits", ",", "labels", ",", "ignore", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Binary Cross entropy loss\n      logits: [B, H, W] Variable, logits at each pixel (between -\\infty and +\\infty)\n      labels: [B, H, W] Tensor, binary ground truth masks (0 or 1)\n      ignore: void class id\n    \"\"\"", "\n", "logits", ",", "labels", "=", "flatten_binary_scores", "(", "logits", ",", "labels", ",", "ignore", ")", "\n", "loss", "=", "StableBCELoss", "(", ")", "(", "logits", ",", "Variable", "(", "labels", ".", "float", "(", ")", ")", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.lovasz_loss.lovasz_softmax": [[155, 172], ["lovasz_loss.mean", "lovasz_loss.lovasz_softmax_flat", "lovasz_loss.lovasz_softmax_flat", "lovasz_loss.flatten_probas", "zip", "lovasz_loss.flatten_probas", "prob.unsqueeze", "lab.unsqueeze"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.lovasz_loss.mean", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.lovasz_loss.lovasz_softmax_flat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.lovasz_loss.lovasz_softmax_flat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.lovasz_loss.flatten_probas", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.lovasz_loss.flatten_probas"], ["", "def", "lovasz_softmax", "(", "probas", ",", "labels", ",", "classes", "=", "'present'", ",", "per_image", "=", "False", ",", "ignore", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Multi-class Lovasz-Softmax loss\n      probas: [B, C, H, W] Variable, class probabilities at each prediction (between 0 and 1).\n              Interpreted as binary (sigmoid) output with outputs of size [B, H, W].\n      labels: [B, H, W] Tensor, ground truth labels (between 0 and C - 1)\n      classes: 'all' for all, 'present' for classes present in labels, or a list of classes to average.\n      per_image: compute the loss per image instead of per batch\n      ignore: void class labels\n    \"\"\"", "\n", "\n", "if", "per_image", ":", "\n", "        ", "loss", "=", "mean", "(", "lovasz_softmax_flat", "(", "*", "flatten_probas", "(", "prob", ".", "unsqueeze", "(", "0", ")", ",", "lab", ".", "unsqueeze", "(", "0", ")", ",", "ignore", ")", ",", "classes", "=", "classes", ")", "\n", "for", "prob", ",", "lab", "in", "zip", "(", "probas", ",", "labels", ")", ")", "\n", "", "else", ":", "\n", "        ", "loss", "=", "lovasz_softmax_flat", "(", "*", "flatten_probas", "(", "probas", ",", "labels", ",", "ignore", ")", ",", "classes", "=", "classes", ")", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.lovasz_loss.lovasz_softmax_flat": [[174, 203], ["probas.size", "lovasz_loss.mean", "probas.numel", "list", "torch.sort", "torch.sort", "losses.append", "range", "torch.dot", "torch.dot", "fg.sum", "len", "ValueError", "torch.autograd.Variable", "torch.autograd.Variable", "lovasz_loss.lovasz_grad"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.lovasz_loss.mean", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.lovasz_loss.lovasz_grad"], ["", "def", "lovasz_softmax_flat", "(", "probas", ",", "labels", ",", "classes", "=", "'present'", ")", ":", "\n", "    ", "\"\"\"\n    Multi-class Lovasz-Softmax loss\n      probas: [P, C] Variable, class probabilities at each prediction (between 0 and 1)\n      labels: [P] Tensor, ground truth labels (between 0 and C - 1)\n      classes: 'all' for all, 'present' for classes present in labels, or a list of classes to average.\n    \"\"\"", "\n", "if", "probas", ".", "numel", "(", ")", "==", "0", ":", "\n", "# only void pixels, the gradients should be 0", "\n", "        ", "return", "probas", "*", "0.", "\n", "", "C", "=", "probas", ".", "size", "(", "1", ")", "\n", "losses", "=", "[", "]", "\n", "class_to_sum", "=", "list", "(", "range", "(", "C", ")", ")", "if", "classes", "in", "[", "'all'", ",", "'present'", "]", "else", "classes", "\n", "for", "c", "in", "class_to_sum", ":", "\n", "        ", "fg", "=", "(", "labels", "==", "c", ")", ".", "float", "(", ")", "# foreground for class c", "\n", "if", "(", "classes", "==", "'present'", "and", "fg", ".", "sum", "(", ")", "==", "0", ")", ":", "\n", "            ", "continue", "\n", "", "if", "C", "==", "1", ":", "\n", "            ", "if", "len", "(", "classes", ")", ">", "1", ":", "\n", "                ", "raise", "ValueError", "(", "'Sigmoid output possible only with 1 class'", ")", "\n", "", "class_pred", "=", "probas", "[", ":", ",", "0", "]", "\n", "", "else", ":", "\n", "            ", "class_pred", "=", "probas", "[", ":", ",", "c", "]", "\n", "", "errors", "=", "(", "Variable", "(", "fg", ")", "-", "class_pred", ")", ".", "abs", "(", ")", "\n", "errors_sorted", ",", "perm", "=", "torch", ".", "sort", "(", "errors", ",", "0", ",", "descending", "=", "True", ")", "\n", "perm", "=", "perm", ".", "data", "\n", "fg_sorted", "=", "fg", "[", "perm", "]", "\n", "losses", ".", "append", "(", "torch", ".", "dot", "(", "errors_sorted", ",", "Variable", "(", "lovasz_grad", "(", "fg_sorted", ")", ")", ")", ")", "\n", "", "return", "mean", "(", "losses", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.lovasz_loss.flatten_probas": [[205, 216], ["labels.view.view", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero", "torch.nonzero"], "function", ["None"], ["", "def", "flatten_probas", "(", "probas", ",", "labels", ",", "ignore", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Flattens predictions in the batch\n    \"\"\"", "\n", "labels", "=", "labels", ".", "view", "(", "-", "1", ")", "\n", "if", "ignore", "is", "None", ":", "\n", "        ", "return", "probas", ",", "labels", "\n", "", "valid", "=", "(", "labels", "!=", "ignore", ")", "\n", "vprobas", "=", "probas", "[", "torch", ".", "nonzero", "(", "valid", ")", ".", "squeeze", "(", ")", "]", "\n", "vlabels", "=", "labels", "[", "valid", "]", "\n", "return", "vprobas", ",", "vlabels", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.lovasz_loss.xloss": [[218, 223], ["torch.cross_entropy", "torch.autograd.Variable"], "function", ["None"], ["", "def", "xloss", "(", "logits", ",", "labels", ",", "ignore", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Cross entropy loss\n    \"\"\"", "\n", "return", "F", ".", "cross_entropy", "(", "logits", ",", "Variable", "(", "labels", ")", ",", "ignore_index", "=", "255", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.lovasz_loss.isnan": [[226, 228], ["None"], "function", ["None"], ["", "def", "isnan", "(", "x", ")", ":", "\n", "    ", "return", "x", "!=", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.lovasz_loss.mean": [[230, 249], ["iter", "enumerate", "ifilterfalse", "next", "ValueError", "lovasz_loss.iou"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.lovasz_loss.iou"], ["", "def", "mean", "(", "l", ",", "ignore_nan", "=", "False", ",", "empty", "=", "0", ")", ":", "\n", "    ", "\"\"\"\n    nanmean compatible with generators.\n    \"\"\"", "\n", "l", "=", "iter", "(", "l", ")", "\n", "if", "ignore_nan", ":", "\n", "        ", "l", "=", "ifilterfalse", "(", "isnan", ",", "l", ")", "\n", "", "try", ":", "\n", "        ", "n", "=", "1", "\n", "acc", "=", "next", "(", "l", ")", "\n", "", "except", "StopIteration", ":", "\n", "        ", "if", "empty", "==", "'raise'", ":", "\n", "            ", "raise", "ValueError", "(", "'Empty mean'", ")", "\n", "", "return", "empty", "\n", "", "for", "n", ",", "v", "in", "enumerate", "(", "l", ",", "2", ")", ":", "\n", "        ", "acc", "+=", "v", "\n", "", "if", "n", "==", "1", ":", "\n", "        ", "return", "acc", "\n", "", "return", "acc", "/", "n", "\n", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.registration_metrics.compute_accuracy": [[9, 28], ["sklearn.neighbors.NearestNeighbors", "sklearn.neighbors.NearestNeighbors.fit", "sklearn.neighbors.NearestNeighbors.kneighbors", "numpy.reshape", "numpy.count_nonzero", "numpy.arange"], "function", ["None"], ["def", "compute_accuracy", "(", "embedded_ref_features", ",", "embedded_val_features", ")", ":", "\n", "\n", "    ", "\"\"\"\n    accuracy for metric learning tasks in case descriptor learning\n    Args:\n        embedded_ref_feature(numpy array): size N x D the features computed by one head of the siamese\n        embedded_val_features(array): N x D the features computed by the other head\n    return:\n        each line of the matrix are supposed to be equal, this function counts when it's the case\n    \"\"\"", "\n", "number_of_test_points", "=", "embedded_ref_features", ".", "shape", "[", "0", "]", "\n", "neigh", "=", "NearestNeighbors", "(", "n_neighbors", "=", "1", ",", "algorithm", "=", "\"kd_tree\"", ",", "metric", "=", "\"euclidean\"", ")", "\n", "neigh", ".", "fit", "(", "embedded_ref_features", ")", "\n", "dist_neigh_normal", ",", "ind_neigh_normal", "=", "neigh", ".", "kneighbors", "(", "embedded_val_features", ")", "\n", "reference_neighbors", "=", "np", ".", "reshape", "(", "np", ".", "arange", "(", "number_of_test_points", ")", ",", "newshape", "=", "(", "-", "1", ",", "1", ")", ")", "\n", "\n", "wrong_matches", "=", "np", ".", "count_nonzero", "(", "ind_neigh_normal", "-", "reference_neighbors", ")", "\n", "accuracy", "=", "(", "1", "-", "wrong_matches", "/", "number_of_test_points", ")", "*", "100", "\n", "return", "accuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.registration_metrics.compute_hit_ratio": [[30, 38], ["torch.norm", "torch.mean", "xyz.mm"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.lovasz_loss.mean"], ["", "def", "compute_hit_ratio", "(", "xyz", ",", "xyz_target", ",", "T_gt", ",", "tau_1", ")", ":", "\n", "    ", "\"\"\"\n    compute proportion of point which are close.\n    \"\"\"", "\n", "assert", "xyz", ".", "shape", "==", "xyz", ".", "shape", "\n", "dist", "=", "torch", ".", "norm", "(", "xyz", ".", "mm", "(", "T_gt", "[", ":", "3", ",", ":", "3", "]", ".", "T", ")", "+", "T_gt", "[", ":", "3", ",", "3", "]", "-", "xyz_target", ",", "dim", "=", "1", ")", "\n", "\n", "return", "torch", ".", "mean", "(", "(", "dist", "<", "tau_1", ")", ".", "to", "(", "torch", ".", "float", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.registration_metrics.compute_transfo_error": [[40, 51], ["torch.norm", "torch.clamp", "torch.trace", "torch.acos", "T_gt[].mm"], "function", ["None"], ["", "def", "compute_transfo_error", "(", "T_gt", ",", "T_pred", ")", ":", "\n", "    ", "\"\"\"\n    compute the translation error (the unit depends on the unit of the point cloud)\n    and compute the rotation error in degree using the formula (norm of antisymetr):\n    http://jlyang.org/tpami16_go-icp_preprint.pdf\n    \"\"\"", "\n", "rte", "=", "torch", ".", "norm", "(", "T_gt", "[", ":", "3", ",", "3", "]", "-", "T_pred", "[", ":", "3", ",", "3", "]", ")", "\n", "cos_theta", "=", "(", "torch", ".", "trace", "(", "T_gt", "[", ":", "3", ",", ":", "3", "]", ".", "mm", "(", "T_pred", "[", ":", "3", ",", ":", "3", "]", ".", "T", ")", ")", "-", "1", ")", "*", "0.5", "\n", "cos_theta", "=", "torch", ".", "clamp", "(", "cos_theta", ",", "-", "1.0", ",", "1.0", ")", "\n", "rre", "=", "torch", ".", "acos", "(", "cos_theta", ")", "*", "180", "/", "np", ".", "pi", "\n", "return", "rte", ",", "rre", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.registration_metrics.compute_scaled_registration_error": [[53, 67], ["xyz_est.mean", "torch.sqrt", "torch.sqrt", "torch.mean", "torch.sum", "torch.sum"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.lovasz_loss.mean", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.lovasz_loss.mean"], ["", "def", "compute_scaled_registration_error", "(", "xyz", ",", "T_gt", ",", "T_est", ",", "tol", "=", "1e-12", ")", ":", "\n", "    ", "\"\"\"\n    compute the registration error as defined in:\n    https://arxiv.org/pdf/2003.12841.pdf\n    \"\"\"", "\n", "xyz_est", "=", "xyz", "@", "T_est", "[", ":", "3", ",", ":", "3", "]", ".", "T", "+", "T_est", "[", ":", "3", ",", "3", "]", "\n", "xyz_gt", "=", "xyz", "@", "T_gt", "[", ":", "3", ",", ":", "3", "]", ".", "T", "+", "T_gt", "[", ":", "3", ",", "3", "]", "\n", "centroid", "=", "xyz_est", ".", "mean", "(", "axis", "=", "0", ")", "\n", "\n", "dist1", "=", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "(", "xyz_est", "-", "xyz_gt", ")", "**", "2", ",", "axis", "=", "-", "1", ")", ")", "\n", "dist2", "=", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "(", "xyz_est", "-", "centroid", ")", "**", "2", ",", "axis", "=", "-", "1", ")", ")", "\n", "\n", "err", "=", "torch", ".", "mean", "(", "dist1", "/", "(", "dist2", "+", "tol", ")", ")", "\n", "return", "err", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.registration_metrics.compute_registration_recall": [[69, 77], ["torch.norm", "torch.norm.mean().item", "torch.norm.mean"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.lovasz_loss.mean"], ["", "def", "compute_registration_recall", "(", "xyz_gt", ",", "xyz_target_gt", ",", "T_est", ",", "thresh", "=", "0.2", ")", ":", "\n", "    ", "\"\"\"\n    compute the registration recall (as defined here https://node1.chrischoy.org/data/publications/fcgf/fcgf.pdf)\n    \"\"\"", "\n", "\n", "dist", "=", "torch", ".", "norm", "(", "xyz_gt", "@", "T_est", "[", ":", "3", ",", ":", "3", "]", ".", "T", "+", "T_est", "[", ":", "3", ",", "3", "]", "-", "xyz_target_gt", ",", "dim", "=", "1", ")", "\n", "\n", "return", "dist", ".", "mean", "(", ")", ".", "item", "(", ")", "<", "thresh", "\n", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.kitti360_tracker.KITTI360Tracker.reset": [[30, 64], ["super().reset", "torch_points3d.metrics.confusion_matrix.ConfusionMatrix", "torch_points3d.metrics.confusion_matrix.ConfusionMatrix", "os.join", "os.join"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.classification_tracker.ClassificationTracker.reset"], ["    ", "def", "reset", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "\n", "# SegmentationTracker handles _confusion_matrix, _acc, _macc,", "\n", "# _miou, and _miou_per_class", "\n", "        ", "super", "(", ")", ".", "reset", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "# KITTI360Tracker additionally handles the following metrics, to", "\n", "# track performance with voting (each 3D point may be predicted", "\n", "# from various cylindrical sampled) and at full resolution.", "\n", "self", ".", "_vote_confusion_matrix", "=", "ConfusionMatrix", "(", "self", ".", "_num_classes", ")", "\n", "self", ".", "_full_confusion_matrix", "=", "ConfusionMatrix", "(", "self", ".", "_num_classes", ")", "\n", "self", ".", "_vote_miou", "=", "None", "\n", "self", ".", "_full_vote_miou", "=", "None", "\n", "self", ".", "_iou_per_class", "=", "{", "}", "\n", "self", ".", "_vote_iou_per_class", "=", "{", "}", "\n", "self", ".", "_full_vote_iou_per_class", "=", "{", "}", "\n", "\n", "# Attributes to manage per-window metrics", "\n", "self", ".", "windows", "=", "self", ".", "stage_dataset", ".", "windows", "\n", "self", ".", "window_raw_files", "=", "[", "\n", "osp", ".", "join", "(", "self", ".", "stage_dataset", ".", "raw_dir", ",", "x", ")", "\n", "for", "x", "in", "self", ".", "stage_dataset", ".", "raw_file_names_3d", "]", "\n", "self", ".", "_temp_dir", "=", "None", "\n", "self", ".", "_idx_window", "=", "None", "\n", "self", ".", "_votes", "=", "None", "\n", "self", ".", "_counts", "=", "None", "\n", "\n", "# Initialize a submission folder path based the date and time of", "\n", "# creation of the tracker. This way, in case a submission is", "\n", "# required when calling `self.finalise`, the name of the", "\n", "# submission folder will be unique. The submission directory", "\n", "# will only be created if `self.finalise(make_submission=True)`", "\n", "# is called", "\n", "self", ".", "_submission_dir", "=", "self", ".", "_dataset", ".", "submission_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.kitti360_tracker.KITTI360Tracker.track": [[65, 154], ["super().track", "model.get_output", "isinstance", "tempfile.TemporaryDirectory", "model.get_input", "data.to_data_list", "isinstance", "data.pred.cpu", "os.exists", "os.exists", "data.to_data_list", "torch.is_tensor", "kitti360_tracker.KITTI360Tracker._save_window_tracking", "kitti360_tracker.KITTI360Tracker._load_window_tracking", "ValueError", "origin_ids.flatten.flatten.dim", "origin_ids.flatten.flatten.flatten", "origin_ids.flatten.flatten.max", "ValueError", "idx_window.item.item.item", "print", "print", "print", "print"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.classification_tracker.ClassificationTracker.track", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.get_output", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.get_input", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageBatch.to_data_list", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.csr.CSRData.cpu", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageBatch.to_data_list", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.kitti360_tracker.KITTI360Tracker._save_window_tracking", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.kitti360_tracker.KITTI360Tracker._load_window_tracking"], ["", "def", "track", "(", "\n", "self", ",", "model", ":", "model_interface", ".", "TrackerInterface", ",", "data", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Add current model predictions (usually the result of a batch)\n        to the tracking.\n        \"\"\"", "\n", "super", "(", ")", ".", "track", "(", "model", ")", "\n", "\n", "# For train set, nothing to do. For val and test sets, we want", "\n", "# to be careful with KITTI360 overlapping cylinders and", "\n", "# multi-run voting. The real metrics must be computed with", "\n", "# respect to overlaps and voting schemes", "\n", "if", "self", ".", "_stage", "==", "\"train\"", ":", "\n", "            ", "return", "\n", "\n", "# Create a temporary directory in the `/tmp` directory. If no", "\n", "# such directory is found on the machine, the dataset root", "\n", "# directory (where `raw` and `processed` folders are) will be", "\n", "# used. This is where the tracker will create a file for each", "\n", "# window, storing the per-point votes. The directory will be", "\n", "# automatically deleted when the tracker is deleted or", "\n", "# `self.reset` is called", "\n", "", "if", "self", ".", "_temp_dir", "is", "None", ":", "\n", "            ", "tmp_dir", "=", "'/tmp'", "if", "osp", ".", "exists", "(", "'/tmp'", ")", "else", "self", ".", "stage_dataset", ".", "root", "\n", "self", ".", "_temp_dir", "=", "tempfile", ".", "TemporaryDirectory", "(", "dir", "=", "tmp_dir", ")", "\n", "\n", "# Gather input data", "\n", "", "data", "=", "model", ".", "get_input", "(", ")", "if", "data", "is", "None", "else", "data", "\n", "data", "=", "data", ".", "data", "if", "model", ".", "is_multimodal", "else", "data", "\n", "\n", "# Recover predictions from the model and add them to data", "\n", "# attributes", "\n", "data", ".", "pred", "=", "model", ".", "get_output", "(", ")", "\n", "\n", "# If the data is batched, split into its original elements.", "\n", "# Special attention must be given to the newly-added 'pred'", "\n", "# attribute which was not present in the Data list at Batch", "\n", "# creation time", "\n", "# # TODO: this is only for torch geometric Batch, but won't work", "\n", "#    for TP3D's SimpleBatch", "\n", "if", "isinstance", "(", "data", ",", "Batch", ")", ":", "\n", "            ", "data", ".", "__slices__", "[", "'pred'", "]", "=", "data", ".", "__slices__", "[", "'pos'", "]", "\n", "data", ".", "__cat_dims__", "[", "'pred'", "]", "=", "0", "\n", "data", ".", "__cumsum__", "[", "'pred'", "]", "=", "data", ".", "__cumsum__", "[", "'pos'", "]", "\n", "data_list", "=", "data", ".", "to_data_list", "(", ")", "\n", "", "elif", "isinstance", "(", "data", ",", "SimpleBatch", ")", ":", "\n", "            ", "data_list", "=", "data", ".", "to_data_list", "(", ")", "\n", "", "else", ":", "\n", "            ", "data_list", "=", "[", "data", "]", "\n", "\n", "# Loop over items of the batch, because some may come from", "\n", "# different windows", "\n", "", "for", "data", "in", "data_list", ":", "\n", "            ", "try", ":", "\n", "# Get window information", "\n", "                ", "idx_window", "=", "data", ".", "idx_window", "\n", "if", "torch", ".", "is_tensor", "(", "idx_window", ")", ":", "\n", "                    ", "idx_window", "=", "idx_window", ".", "item", "(", ")", "\n", "", "", "except", ":", "\n", "                ", "print", "(", ")", "\n", "print", "(", "f'data_list : {data_list}'", ")", "\n", "print", "(", "f'data : {data}'", ")", "\n", "print", "(", ")", "\n", "\n", "# If the tracker's currently-loaded window traking data must", "\n", "# change, save votes and counts for the previous window and", "\n", "# load those for the new one", "\n", "", "if", "idx_window", "!=", "self", ".", "_idx_window", ":", "\n", "                ", "self", ".", "_save_window_tracking", "(", ")", "\n", "self", ".", "_load_window_tracking", "(", "idx_window", ")", "\n", "\n", "# Recover the point indices in the original raw cloud", "\n", "", "origin_ids", "=", "data", "[", "SaveOriginalPosId", ".", "KEY", "]", "\n", "if", "origin_ids", "is", "None", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "f'The inputs given to the model do not have a '", "\n", "f'{SaveOriginalPosId.KEY } attribute.\"'", ")", "\n", "", "if", "origin_ids", ".", "dim", "(", ")", "==", "2", ":", "\n", "                ", "origin_ids", "=", "origin_ids", ".", "flatten", "(", ")", "\n", "", "if", "origin_ids", ".", "max", "(", ")", ">=", "self", ".", "_votes", ".", "shape", "[", "0", "]", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "'Origin ids are larger than the number of points in the '", "\n", "'original point cloud.'", ")", "\n", "\n", "# Save predictions", "\n", "# WARNING: if a point appears multiple times in origin_ids,", "\n", "# only one of its 'outputs' will be counted", "\n", "", "self", ".", "_votes", "[", "origin_ids", "]", "+=", "data", ".", "pred", ".", "cpu", "(", ")", "\n", "self", ".", "_counts", "[", "origin_ids", "]", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.kitti360_tracker.KITTI360Tracker.finalise": [[155, 258], ["kitti360_tracker.KITTI360Tracker._save_window_tracking", "tqdm.auto.tqdm.auto.tqdm", "range", "kitti360_tracker.KITTI360Tracker._load_window_tracking", "torch.argmax().numpy", "kitti360_tracker.KITTI360Tracker._votes.argmax().numpy", "torch_geometric.nn.unpool.knn_interpolate().argmax().numpy", "kitti360_tracker.KITTI360Tracker._zip_submission", "kitti360_tracker.KITTI360Tracker._confusion_matrix.get_intersection_union_per_class", "len", "torch_points3d.datasets.segmentation.kitti360.read_kitti360_window", "torch_points3d.datasets.segmentation.kitti360.read_kitti360_window.y[].numpy", "kitti360_tracker.KITTI360Tracker._vote_confusion_matrix.count_predicted_batch", "torch_points3d.datasets.segmentation.kitti360.read_kitti360_window.y.numpy", "kitti360_tracker.KITTI360Tracker._full_confusion_matrix.count_predicted_batch", "kitti360_tracker.KITTI360Tracker._make_submission", "cm.confusion_matrix.sum", "cm.get_average_intersection_union", "cm.get_intersection_union_per_class", "cm.confusion_matrix.sum", "cm.get_average_intersection_union", "cm.get_intersection_union_per_class", "enumerate", "torch.argmax", "kitti360_tracker.KITTI360Tracker._votes.argmax", "torch_geometric.nn.unpool.knn_interpolate().argmax", "enumerate", "enumerate", "torch_geometric.nn.unpool.knn_interpolate"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.kitti360_tracker.KITTI360Tracker._save_window_tracking", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.kitti360_tracker.KITTI360Tracker._load_window_tracking", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.kitti360_tracker.KITTI360Tracker._zip_submission", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.confusion_matrix.ConfusionMatrix.get_intersection_union_per_class", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.read_kitti360_window", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.confusion_matrix.ConfusionMatrix.count_predicted_batch", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.confusion_matrix.ConfusionMatrix.count_predicted_batch", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.kitti360_tracker.KITTI360Tracker._make_submission", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.confusion_matrix.ConfusionMatrix.get_average_intersection_union", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.confusion_matrix.ConfusionMatrix.get_intersection_union_per_class", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.confusion_matrix.ConfusionMatrix.get_average_intersection_union", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.confusion_matrix.ConfusionMatrix.get_intersection_union_per_class"], ["", "", "def", "finalise", "(", "self", ",", "full_res", "=", "False", ",", "make_submission", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "# Submission only for 'test' set and if submission is required,", "\n", "# full_res is set to True", "\n", "        ", "make_submission", "=", "make_submission", "and", "self", ".", "_stage", "==", "'test'", "\n", "full_res", "=", "make_submission", "or", "full_res", "\n", "\n", "# Since saving tracked votes and prediction counts is only", "\n", "# triggered when the window changes, we need to manually", "\n", "# save the tracked data from the last batch. This is important,", "\n", "# as this would entirely drop tracking for the entirety of the", "\n", "# last window of val and test sets !", "\n", "self", ".", "_save_window_tracking", "(", ")", "\n", "\n", "# Compute basic metrics without taking into account voting", "\n", "# schemes with multiple predictions on the same points. If the", "\n", "# dataset has no labels, these metrics will not be computed", "\n", "if", "self", ".", "has_labels", ":", "\n", "            ", "per_class_iou", "=", "self", ".", "_confusion_matrix", ".", "get_intersection_union_per_class", "(", ")", "[", "0", "]", "\n", "self", ".", "_iou_per_class", "=", "{", "\n", "self", ".", "_dataset", ".", "INV_OBJECT_LABEL", "[", "k", "]", ":", "v", "\n", "for", "k", ",", "v", "in", "enumerate", "(", "per_class_iou", ")", "}", "\n", "\n", "# We don't compute the voting nor full-resolution metrics on the", "\n", "# train set", "\n", "", "if", "self", ".", "_stage", "==", "'train'", "or", "not", "self", ".", "has_labels", "and", "not", "make_submission", ":", "\n", "            ", "return", "\n", "\n", "# Compute voting and (optionally) full-resolution predictions", "\n", "# for each window", "\n", "", "for", "idx_window", "in", "tq", "(", "range", "(", "len", "(", "self", ".", "windows", ")", ")", ")", ":", "\n", "\n", "# Load the votes and prediction counts", "\n", "            ", "self", ".", "_load_window_tracking", "(", "idx_window", ")", "\n", "\n", "# Select the window points that received a prediction", "\n", "has_pred", "=", "self", ".", "_counts", ">", "0", "\n", "pred", "=", "torch", ".", "argmax", "(", "self", ".", "_votes", "[", "has_pred", "]", ",", "1", ")", ".", "numpy", "(", ")", "\n", "\n", "# Load ground truth and/or point positions from raw data. If", "\n", "# no labels are found in the PLY file, y will simply be None", "\n", "if", "full_res", "or", "self", ".", "has_labels", ":", "\n", "                ", "full_data", "=", "read_kitti360_window", "(", "\n", "self", ".", "window_raw_files", "[", "idx_window", "]", ",", "xyz", "=", "full_res", ",", "rgb", "=", "False", ",", "\n", "semantic", "=", "self", ".", "has_labels", ",", "instance", "=", "False", ",", "remap", "=", "True", ")", "\n", "\n", "# If labels were found compute voting metrics for the window", "\n", "# low-res points. Note that points with ignored labels are", "\n", "# masked out", "\n", "", "if", "self", ".", "has_labels", "and", "full_data", ".", "y", "is", "not", "None", ":", "\n", "                ", "gt", "=", "full_data", ".", "y", "[", "has_pred", "]", ".", "numpy", "(", ")", "\n", "mask", "=", "gt", "!=", "self", ".", "_ignore_label", "\n", "self", ".", "_vote_confusion_matrix", ".", "count_predicted_batch", "(", "\n", "gt", "[", "mask", "]", ",", "pred", "[", "mask", "]", ")", "\n", "\n", "# Stop here if full-resolution metrics are not required", "\n", "", "if", "not", "full_res", ":", "\n", "                ", "continue", "\n", "\n", "# If full-resolution metrics or benchmark submission are", "\n", "# required, compute full-resolution predictions by nearest", "\n", "# neighbor interpolation", "\n", "# TODO: NN search with faster CPU or GPU methods", "\n", "", "full_pred", "=", "self", ".", "_votes", ".", "argmax", "(", "1", ")", ".", "numpy", "(", ")", "\n", "full_pred", "[", "~", "has_pred", "]", "=", "knn_interpolate", "(", "\n", "self", ".", "_votes", "[", "has_pred", "]", ",", "full_data", ".", "pos", "[", "has_pred", "]", ",", "\n", "full_data", ".", "pos", "[", "~", "has_pred", "]", ",", "k", "=", "1", ")", ".", "argmax", "(", "1", ")", ".", "numpy", "(", ")", "\n", "\n", "# If labels were found compute voting metrics for the window", "\n", "# low-res points. Note that points with ignored labels are", "\n", "# masked out", "\n", "if", "self", ".", "has_labels", "and", "full_data", ".", "y", "is", "not", "None", ":", "\n", "                ", "gt", "=", "full_data", ".", "y", ".", "numpy", "(", ")", "\n", "mask", "=", "gt", "!=", "self", ".", "_ignore_label", "\n", "self", ".", "_full_confusion_matrix", ".", "count_predicted_batch", "(", "\n", "gt", "[", "mask", "]", ",", "full_pred", "[", "mask", "]", ")", "\n", "\n", "", "if", "make_submission", ":", "\n", "                ", "self", ".", "_make_submission", "(", "idx_window", ",", "full_pred", ")", "\n", "\n", "# Compress submission files into a final .zip archive as", "\n", "# expected by the KITTI360 submission server", "\n", "", "", "if", "make_submission", ":", "\n", "            ", "self", ".", "_zip_submission", "(", ")", "\n", "\n", "# Compute the global voting metrics for low-resolution points", "\n", "", "cm", "=", "self", ".", "_vote_confusion_matrix", "\n", "if", "cm", ".", "confusion_matrix", "is", "not", "None", "and", "cm", ".", "confusion_matrix", ".", "sum", "(", ")", ">", "0", ":", "\n", "            ", "self", ".", "_vote_miou", "=", "cm", ".", "get_average_intersection_union", "(", ")", "*", "100", "\n", "per_class_iou", "=", "cm", ".", "get_intersection_union_per_class", "(", ")", "[", "0", "]", "\n", "self", ".", "_vote_iou_per_class", "=", "{", "\n", "self", ".", "_dataset", ".", "INV_OBJECT_LABEL", "[", "k", "]", ":", "100", "*", "v", "\n", "for", "k", ",", "v", "in", "enumerate", "(", "per_class_iou", ")", "}", "\n", "\n", "# Compute the global voting metrics for full-resolution points", "\n", "", "cm", "=", "self", ".", "_full_confusion_matrix", "\n", "if", "cm", ".", "confusion_matrix", "is", "not", "None", "and", "cm", ".", "confusion_matrix", ".", "sum", "(", ")", ">", "0", ":", "\n", "            ", "self", ".", "_full_vote_miou", "=", "cm", ".", "get_average_intersection_union", "(", ")", "*", "100", "\n", "per_class_iou", "=", "cm", ".", "get_intersection_union_per_class", "(", ")", "[", "0", "]", "\n", "self", ".", "_full_vote_iou_per_class", "=", "{", "\n", "self", ".", "_dataset", ".", "INV_OBJECT_LABEL", "[", "k", "]", ":", "100", "*", "v", "\n", "for", "k", ",", "v", "in", "enumerate", "(", "per_class_iou", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.kitti360_tracker.KITTI360Tracker._make_submission": [[259, 288], ["TRAINID2ID[].astype", "kitti360_tracker.KITTI360Tracker.windows[].split", "window_name.split", "numpy.save", "os.exists", "os.exists", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "len", "ValueError", "sequence_name.split", "os.join", "os.join", "type"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.split", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.split", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.makedirs", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.makedirs", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.makedirs", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.makedirs", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.split"], ["", "", "def", "_make_submission", "(", "self", ",", "idx_window", ",", "pred", ")", ":", "\n", "        ", "\"\"\"Prepare data for a sumbission to KITTI360 for 3D semantic\n        Segmentation on the test set.\n\n        Expected submission format is detailed here:\n        https://github.com/autonomousvision/kitti360Scripts/tree/master/kitti360scripts/evaluation/semantic_3d\n        \"\"\"", "\n", "if", "not", "osp", ".", "exists", "(", "self", ".", "_submission_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "_submission_dir", ")", "\n", "\n", "# Make sure the prediction is a 1D Numpy array", "\n", "", "if", "len", "(", "pred", ".", "shape", ")", "!=", "1", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "f'The submission predictions must be 1D Numpy vectors, '", "\n", "f'received {type(pred)} of shape {pred.shape} instead.'", ")", "\n", "\n", "# Map TrainId labels to expected Ids", "\n", "", "pred_remapped", "=", "TRAINID2ID", "[", "pred", "]", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "# Recover sequence and window information from stage dataset's", "\n", "# windows and format those to match the expected file name:", "\n", "# {seq:0>4}_{start_frame:0>10}_{end_frame:0>10}.npy", "\n", "sequence_name", ",", "window_name", "=", "self", ".", "windows", "[", "idx_window", "]", ".", "split", "(", "'/'", ")", "\n", "seq", "=", "sequence_name", ".", "split", "(", "'_'", ")", "[", "-", "2", "]", "\n", "start_frame", ",", "end_frame", "=", "window_name", ".", "split", "(", "'_'", ")", "\n", "filename", "=", "f'{seq:0>4}_{start_frame:0>10}_{end_frame:0>10}.npy'", "\n", "\n", "# Save the window submission", "\n", "np", ".", "save", "(", "osp", ".", "join", "(", "self", ".", "_submission_dir", ",", "filename", ")", ",", "pred_remapped", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.kitti360_tracker.KITTI360Tracker._zip_submission": [[289, 298], ["zipfile.ZipFile", "glob.glob", "zipfile.ZipFile.close", "os.join", "os.join", "zipfile.ZipFile.write"], "methods", ["None"], ["", "def", "_zip_submission", "(", "self", ")", ":", "\n", "        ", "\"\"\"This should be called once all window submission files have\n        been saved using `self._make_submission`. This will zip them\n        together as expected by the KITTI360 submission server.\n        \"\"\"", "\n", "zipObj", "=", "ZipFile", "(", "f'{self._submission_dir}.zip'", ",", "'w'", ")", "\n", "for", "p", "in", "glob", ".", "glob", "(", "osp", ".", "join", "(", "self", ".", "_submission_dir", ",", "'*.npy'", ")", ")", ":", "\n", "            ", "zipObj", ".", "write", "(", "p", ")", "\n", "", "zipObj", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.kitti360_tracker.KITTI360Tracker.get_metrics": [[299, 323], ["super().get_metrics"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.classification_tracker.ClassificationTracker.get_metrics"], ["", "def", "get_metrics", "(", "self", ",", "verbose", "=", "False", ")", "->", "Dict", "[", "str", ",", "Any", "]", ":", "\n", "        ", "\"\"\"Return a dictionary of all metrics and losses being tracked.\n        \"\"\"", "\n", "# Low-resolution metrics without voting", "\n", "metrics", "=", "super", "(", ")", ".", "get_metrics", "(", "verbose", ")", "\n", "if", "verbose", "and", "self", ".", "has_labels", ":", "\n", "            ", "metrics", "[", "f'{self._stage}_iou'", "]", "=", "self", ".", "_iou_per_class", "\n", "\n", "# Low-resolution voting metrics", "\n", "", "if", "self", ".", "_vote_miou", ":", "\n", "            ", "metrics", "[", "f'{self._stage}_vote_miou'", "]", "=", "self", ".", "_vote_miou", "\n", "\n", "if", "verbose", ":", "\n", "                ", "metrics", "[", "f'{self._stage}_vote_iou'", "]", "=", "self", ".", "_vote_iou_per_class", "\n", "\n", "# Full-resolution voting metrics", "\n", "", "", "if", "self", ".", "_full_vote_miou", ":", "\n", "            ", "metrics", "[", "f'{self._stage}_full_miou'", "]", "=", "self", ".", "_full_vote_miou", "\n", "\n", "if", "verbose", ":", "\n", "                ", "metrics", "[", "f'{self._stage}_full_iou'", "]", "=", "self", ".", "_full_vote_iou_per_class", "\n", "\n", "", "", "return", "metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.kitti360_tracker.KITTI360Tracker.stage_dataset": [[324, 328], ["kitti360_tracker.KITTI360Tracker._dataset.get_dataset"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.base_dataset.BaseDataset.get_dataset"], ["", "@", "property", "\n", "def", "stage_dataset", "(", "self", ")", ":", "\n", "        ", "\"\"\"Dataset for the Tracker's current stage\"\"\"", "\n", "return", "self", ".", "_dataset", ".", "get_dataset", "(", "self", ".", "_stage", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.kitti360_tracker.KITTI360Tracker.temp_dir": [[329, 335], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "temp_dir", "(", "self", ")", ":", "\n", "        ", "\"\"\"Name of the TemporaryDirectory created when tracking voting\n        metrics over all windows.\n        \"\"\"", "\n", "return", "None", "if", "self", ".", "_temp_dir", "is", "None", "else", "self", ".", "_temp_dir", ".", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.kitti360_tracker.KITTI360Tracker.has_labels": [[336, 339], ["kitti360_tracker.KITTI360Tracker._dataset.has_labels"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.kitti360_tracker.KITTI360Tracker.has_labels"], ["", "@", "property", "\n", "def", "has_labels", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_dataset", ".", "has_labels", "(", "self", ".", "_stage", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.kitti360_tracker.KITTI360Tracker._save_window_tracking": [[340, 351], ["os.join", "os.join", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "torch.save", "os.dirname", "os.dirname"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.makedirs", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.makedirs", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.makedirs", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.makedirs"], ["", "def", "_save_window_tracking", "(", "self", ")", ":", "\n", "        ", "\"\"\"Save a window's votes and prediction counts to the tracker's\n        temporary directory.\n        \"\"\"", "\n", "# Don't save anything for the tracker's initialization state", "\n", "if", "self", ".", "_idx_window", "is", "None", "or", "self", ".", "_idx_window", "<", "0", ":", "\n", "            ", "return", "\n", "", "window", "=", "self", ".", "windows", "[", "self", ".", "_idx_window", "]", "\n", "temp_window_path", "=", "osp", ".", "join", "(", "self", ".", "temp_dir", ",", "window", "+", "'.pt'", ")", "\n", "os", ".", "makedirs", "(", "osp", ".", "dirname", "(", "temp_window_path", ")", ",", "exist_ok", "=", "True", ")", "\n", "torch", ".", "save", "(", "(", "self", ".", "_votes", ",", "self", ".", "_counts", ")", ",", "temp_window_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.kitti360_tracker.KITTI360Tracker._load_window_tracking": [[352, 369], ["os.join", "os.join", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "os.dirname", "os.dirname", "os.exists", "os.exists", "torch.zeros().float", "torch.zeros().int", "torch.load", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.makedirs", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.makedirs", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.makedirs", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.utils.makedirs", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.Checkpoint.load"], ["", "def", "_load_window_tracking", "(", "self", ",", "idx_window", ")", ":", "\n", "        ", "\"\"\"Load a window's votes and prediction counts from the\n        tracker's temporary directory. If the window has no votes and\n        counts yet, they will be initialized here.\n        \"\"\"", "\n", "window", "=", "self", ".", "windows", "[", "idx_window", "]", "\n", "window_raw_size", "=", "self", ".", "stage_dataset", ".", "window_raw_sizes", "[", "idx_window", "]", "\n", "temp_window_path", "=", "osp", ".", "join", "(", "self", ".", "temp_dir", ",", "window", "+", "'.pt'", ")", "\n", "os", ".", "makedirs", "(", "osp", ".", "dirname", "(", "temp_window_path", ")", ",", "exist_ok", "=", "True", ")", "\n", "if", "not", "osp", ".", "exists", "(", "temp_window_path", ")", ":", "\n", "            ", "votes", "=", "torch", ".", "zeros", "(", "window_raw_size", ",", "self", ".", "_num_classes", ")", ".", "float", "(", ")", "\n", "counts", "=", "torch", ".", "zeros", "(", "window_raw_size", ")", ".", "int", "(", ")", "\n", "", "else", ":", "\n", "            ", "votes", ",", "counts", "=", "torch", ".", "load", "(", "temp_window_path", ")", "\n", "", "self", ".", "_idx_window", "=", "idx_window", "\n", "self", ".", "_votes", "=", "votes", "\n", "self", ".", "_counts", "=", "counts", "\n", "", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.s3dis_tracker.S3DISTracker.reset": [[17, 24], ["super().reset"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.classification_tracker.ClassificationTracker.reset"], ["    ", "def", "reset", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "reset", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "_test_area", "=", "None", "\n", "self", ".", "_full_vote_miou", "=", "None", "\n", "self", ".", "_vote_miou", "=", "None", "\n", "self", ".", "_full_confusion", "=", "None", "\n", "self", ".", "_iou_per_class", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.s3dis_tracker.S3DISTracker.track": [[25, 62], ["super().track", "model.get_output", "s3dis_tracker.S3DISTracker._dataset.test_data.clone", "torch.zeros", "torch.zeros", "s3dis_tracker.S3DISTracker._test_area.to", "model.get_input", "ValueError", "originids.flatten.flatten.dim", "originids.flatten.flatten.flatten", "originids.flatten.flatten.max", "ValueError", "ValueError"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.classification_tracker.ClassificationTracker.track", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.get_output", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.clone", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.get_input"], ["", "def", "track", "(", "self", ",", "model", ":", "model_interface", ".", "TrackerInterface", ",", "full_res", "=", "False", ",", "data", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\" Add current model predictions (usually the result of a batch) to the tracking\n        \"\"\"", "\n", "super", "(", ")", ".", "track", "(", "model", ")", "\n", "\n", "# For val and test sets, we want to be careful with S3DIS", "\n", "# overlapping spheres or cylinders and multi-run voting. The", "\n", "# real metrics must be computed with respect to overlaps and", "\n", "# voting schemes", "\n", "if", "self", ".", "_stage", "==", "\"train\"", "or", "not", "full_res", ":", "\n", "            ", "return", "\n", "\n", "# Test mode, compute votes in order to get full res predictions", "\n", "", "if", "self", ".", "_test_area", "is", "None", ":", "\n", "            ", "self", ".", "_test_area", "=", "self", ".", "_dataset", ".", "test_data", ".", "clone", "(", ")", "\n", "if", "self", ".", "_test_area", ".", "y", "is", "None", ":", "\n", "                ", "raise", "ValueError", "(", "\"It seems that the test area data does not have labels (attribute y).\"", ")", "\n", "", "self", ".", "_test_area", ".", "prediction_count", "=", "torch", ".", "zeros", "(", "self", ".", "_test_area", ".", "y", ".", "shape", "[", "0", "]", ",", "dtype", "=", "torch", ".", "int", ")", "\n", "self", ".", "_test_area", ".", "votes", "=", "torch", ".", "zeros", "(", "(", "self", ".", "_test_area", ".", "y", ".", "shape", "[", "0", "]", ",", "self", ".", "_num_classes", ")", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "self", ".", "_test_area", ".", "to", "(", "model", ".", "device", ")", "\n", "\n", "# Gather origin ids and check that it fits with the test set", "\n", "", "inputs", "=", "data", "if", "data", "is", "not", "None", "else", "model", ".", "get_input", "(", ")", "\n", "originids", "=", "inputs", "[", "SaveOriginalPosId", ".", "KEY", "]", "if", "not", "model", ".", "is_multimodal", "else", "inputs", ".", "data", "[", "SaveOriginalPosId", ".", "KEY", "]", "\n", "if", "originids", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"The inputs given to the model do not have a %s attribute.\"", "%", "SaveOriginalPosId", ".", "KEY", ")", "\n", "", "if", "originids", ".", "dim", "(", ")", "==", "2", ":", "\n", "            ", "originids", "=", "originids", ".", "flatten", "(", ")", "\n", "", "if", "originids", ".", "max", "(", ")", ">=", "self", ".", "_test_area", ".", "pos", ".", "shape", "[", "0", "]", ":", "\n", "            ", "raise", "ValueError", "(", "\"Origin ids are larger than the number of points in the original point cloud.\"", ")", "\n", "\n", "# Set predictions", "\n", "# WARNING. If a point appears multiple times in originids, only", "\n", "# one of its 'outputs' and one 'prediction_count' will be counted", "\n", "", "outputs", "=", "model", ".", "get_output", "(", ")", "\n", "self", ".", "_test_area", ".", "votes", "[", "originids", "]", "+=", "outputs", "\n", "self", ".", "_test_area", ".", "prediction_count", "[", "originids", "]", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.s3dis_tracker.S3DISTracker.finalise": [[63, 93], ["s3dis_tracker.S3DISTracker._confusion_matrix.get_intersection_union_per_class", "s3dis_tracker.S3DISTracker._test_area.to", "s3dis_tracker.S3DISTracker._test_area.y[].numpy", "torch_points3d.metrics.confusion_matrix.ConfusionMatrix", "torch.argmax().numpy", "torch_points3d.metrics.confusion_matrix.ConfusionMatrix.count_predicted_batch", "s3dis_tracker.S3DISTracker._compute_full_miou", "s3dis_tracker.S3DISTracker._dataset.to_ply", "enumerate", "torch_points3d.metrics.confusion_matrix.ConfusionMatrix.get_average_intersection_union", "torch_points3d.metrics.confusion_matrix.ConfusionMatrix.get_intersection_union_per_class", "s3dis_tracker.S3DISTracker._test_area.pos[].cpu", "torch.argmax().cpu().numpy", "torch.argmax", "enumerate", "torch.argmax().cpu", "torch.argmax"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.confusion_matrix.ConfusionMatrix.get_intersection_union_per_class", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.confusion_matrix.ConfusionMatrix.count_predicted_batch", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.s3dis_tracker.S3DISTracker._compute_full_miou", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.s3dis_area5_office40.S3DISFusedDataset.to_ply", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.confusion_matrix.ConfusionMatrix.get_average_intersection_union", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.confusion_matrix.ConfusionMatrix.get_intersection_union_per_class", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.csr.CSRData.cpu", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.csr.CSRData.cpu"], ["", "def", "finalise", "(", "self", ",", "full_res", "=", "False", ",", "vote_miou", "=", "True", ",", "ply_output", "=", "\"\"", ",", "**", "kwargs", ")", ":", "\n", "        ", "per_class_iou", "=", "self", ".", "_confusion_matrix", ".", "get_intersection_union_per_class", "(", ")", "[", "0", "]", "\n", "self", ".", "_iou_per_class", "=", "{", "self", ".", "_dataset", ".", "INV_OBJECT_LABEL", "[", "k", "]", ":", "v", "for", "k", ",", "v", "in", "enumerate", "(", "per_class_iou", ")", "}", "\n", "\n", "if", "not", "self", ".", "_test_area", ":", "\n", "            ", "return", "\n", "\n", "", "if", "vote_miou", ":", "\n", "# Complete for points that have a prediction", "\n", "            ", "self", ".", "_test_area", "=", "self", ".", "_test_area", ".", "to", "(", "\"cpu\"", ")", "\n", "has_prediction", "=", "self", ".", "_test_area", ".", "prediction_count", ">", "0", "\n", "gt", "=", "self", ".", "_test_area", ".", "y", "[", "has_prediction", "]", ".", "numpy", "(", ")", "\n", "c", "=", "ConfusionMatrix", "(", "self", ".", "_num_classes", ")", "\n", "pred", "=", "torch", ".", "argmax", "(", "self", ".", "_test_area", ".", "votes", "[", "has_prediction", "]", ",", "1", ")", ".", "numpy", "(", ")", "\n", "c", ".", "count_predicted_batch", "(", "gt", ",", "pred", ")", "\n", "self", ".", "_vote_miou", "=", "c", ".", "get_average_intersection_union", "(", ")", "*", "100", "\n", "per_class_iou", "=", "c", ".", "get_intersection_union_per_class", "(", ")", "[", "0", "]", "\n", "self", ".", "_vote_iou_per_class", "=", "{", "\n", "self", ".", "_dataset", ".", "INV_OBJECT_LABEL", "[", "k", "]", ":", "100", "*", "v", "\n", "for", "k", ",", "v", "in", "enumerate", "(", "per_class_iou", ")", "}", "\n", "\n", "", "if", "full_res", ":", "\n", "            ", "self", ".", "_compute_full_miou", "(", ")", "\n", "\n", "", "if", "ply_output", ":", "\n", "            ", "has_prediction", "=", "self", ".", "_test_area", ".", "prediction_count", ">", "0", "\n", "self", ".", "_dataset", ".", "to_ply", "(", "\n", "self", ".", "_test_area", ".", "pos", "[", "has_prediction", "]", ".", "cpu", "(", ")", ",", "\n", "torch", ".", "argmax", "(", "self", ".", "_test_area", ".", "votes", "[", "has_prediction", "]", ",", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "ply_output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.s3dis_tracker.S3DISTracker._compute_full_miou": [[94, 119], ["log.info", "s3dis_tracker.S3DISTracker._test_area.to", "torch_geometric.nn.unpool.knn_interpolate", "torch_points3d.metrics.confusion_matrix.ConfusionMatrix", "s3dis_tracker.S3DISTracker._full_confusion.count_predicted_batch", "s3dis_tracker.S3DISTracker._test_area.y.numpy", "torch.argmax().numpy", "s3dis_tracker.S3DISTracker._full_confusion.get_average_intersection_union", "s3dis_tracker.S3DISTracker._full_confusion.get_intersection_union_per_class", "enumerate", "torch.argmax", "torch.sum"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.confusion_matrix.ConfusionMatrix.count_predicted_batch", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.confusion_matrix.ConfusionMatrix.get_average_intersection_union", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.confusion_matrix.ConfusionMatrix.get_intersection_union_per_class"], ["", "", "def", "_compute_full_miou", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_full_vote_miou", "is", "not", "None", ":", "\n", "            ", "return", "\n", "\n", "", "has_prediction", "=", "self", ".", "_test_area", ".", "prediction_count", ">", "0", "\n", "log", ".", "info", "(", "\n", "\"Computing full res mIoU, we have predictions for %.2f%% of the points.\"", "\n", "%", "(", "torch", ".", "sum", "(", "has_prediction", ")", "/", "(", "1.0", "*", "has_prediction", ".", "shape", "[", "0", "]", ")", "*", "100", ")", "\n", ")", "\n", "\n", "self", ".", "_test_area", "=", "self", ".", "_test_area", ".", "to", "(", "\"cpu\"", ")", "\n", "\n", "# Full res interpolation", "\n", "full_pred", "=", "knn_interpolate", "(", "\n", "self", ".", "_test_area", ".", "votes", "[", "has_prediction", "]", ",", "\n", "self", ".", "_test_area", ".", "pos", "[", "has_prediction", "]", ",", "self", ".", "_test_area", ".", "pos", ",", "k", "=", "1", ",", ")", "\n", "\n", "# Full res pred", "\n", "self", ".", "_full_confusion", "=", "ConfusionMatrix", "(", "self", ".", "_num_classes", ")", "\n", "self", ".", "_full_confusion", ".", "count_predicted_batch", "(", "self", ".", "_test_area", ".", "y", ".", "numpy", "(", ")", ",", "torch", ".", "argmax", "(", "full_pred", ",", "1", ")", ".", "numpy", "(", ")", ")", "\n", "self", ".", "_full_vote_miou", "=", "self", ".", "_full_confusion", ".", "get_average_intersection_union", "(", ")", "*", "100", "\n", "per_class_iou", "=", "self", ".", "_full_confusion", ".", "get_intersection_union_per_class", "(", ")", "[", "0", "]", "\n", "self", ".", "_full_vote_iou_per_class", "=", "{", "\n", "self", ".", "_dataset", ".", "INV_OBJECT_LABEL", "[", "k", "]", ":", "100", "*", "v", "\n", "for", "k", ",", "v", "in", "enumerate", "(", "per_class_iou", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.s3dis_tracker.S3DISTracker.full_confusion_matrix": [[120, 123], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "full_confusion_matrix", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_full_confusion", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.s3dis_tracker.S3DISTracker.get_metrics": [[124, 140], ["super().get_metrics"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.classification_tracker.ClassificationTracker.get_metrics"], ["", "def", "get_metrics", "(", "self", ",", "verbose", "=", "False", ")", "->", "Dict", "[", "str", ",", "Any", "]", ":", "\n", "        ", "\"\"\" Returns a dictionnary of all metrics and losses being tracked\n        \"\"\"", "\n", "metrics", "=", "super", "(", ")", ".", "get_metrics", "(", "verbose", ")", "\n", "\n", "if", "verbose", ":", "\n", "            ", "metrics", "[", "f'{self._stage}_iou'", "]", "=", "self", ".", "_iou_per_class", "\n", "\n", "", "if", "self", ".", "_full_vote_miou", ":", "\n", "            ", "metrics", "[", "f'{self._stage}_full_vote_miou'", "]", "=", "self", ".", "_full_vote_miou", "\n", "metrics", "[", "f'{self._stage}_full_vote_iou'", "]", "=", "self", ".", "_full_vote_iou_per_class", "\n", "", "if", "self", ".", "_vote_miou", ":", "\n", "            ", "metrics", "[", "f'{self._stage}_vote_miou'", "]", "=", "self", ".", "_vote_miou", "\n", "metrics", "[", "f'{self._stage}_vote_iou'", "]", "=", "self", ".", "_vote_iou_per_class", "\n", "\n", "", "return", "metrics", "\n", "", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.segmentation_helpers.SegmentationVoter.__init__": [[12, 23], ["torch.zeros", "torch.zeros"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "raw_data", ",", "num_classes", ",", "conv_type", ",", "class_seg_map", "=", "None", ",", "k", ":", "int", "=", "1", ")", ":", "\n", "        ", "assert", "k", ">", "0", "\n", "self", ".", "_raw_data", "=", "raw_data", "\n", "self", ".", "_num_pos", "=", "raw_data", ".", "pos", ".", "shape", "[", "0", "]", "\n", "self", ".", "_votes", "=", "torch", ".", "zeros", "(", "(", "self", ".", "_num_pos", ",", "num_classes", ")", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "self", ".", "_vote_counts", "=", "torch", ".", "zeros", "(", "self", ".", "_num_pos", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "self", ".", "_full_res_preds", "=", "None", "\n", "self", ".", "_conv_type", "=", "conv_type", "\n", "self", ".", "_class_seg_map", "=", "class_seg_map", "\n", "self", ".", "_k", "=", "k", "\n", "self", ".", "_num_votes", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.segmentation_helpers.SegmentationVoter.k": [[28, 37], ["isinstance", "Exception", "Exception"], "methods", ["None"], ["", "@", "k", ".", "setter", "\n", "def", "k", "(", "self", ",", "k", ")", ":", "\n", "        ", "if", "isinstance", "(", "k", ",", "int", ")", ":", "\n", "            ", "if", "k", ">", "0", ":", "\n", "                ", "self", ".", "_k", "=", "k", "\n", "", "else", ":", "\n", "                ", "raise", "Exception", "(", "\"k should be >= 1\"", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\"k used for knn_interpolate should be an int\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.segmentation_helpers.SegmentationVoter.num_votes": [[38, 41], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "num_votes", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_num_votes", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.segmentation_helpers.SegmentationVoter.coverage": [[42, 46], ["numpy.sum", "float"], "methods", ["None"], ["", "@", "property", "\n", "def", "coverage", "(", "self", ")", ":", "\n", "        ", "num", "=", "np", ".", "sum", "(", "(", "self", ".", "_vote_counts", ">", "0", ")", ".", "numpy", "(", ")", ")", "\n", "return", "float", "(", "num", ")", "/", "self", ".", "_num_pos", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.segmentation_helpers.SegmentationVoter.full_res_labels": [[47, 50], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "full_res_labels", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_raw_data", ".", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.segmentation_helpers.SegmentationVoter.full_res_preds": [[51, 58], ["segmentation_helpers.SegmentationVoter._predict_full_res", "segmentation_helpers.SegmentationVoter._full_res_preds.argmax", "segmentation_helpers.SegmentationVoter._full_res_preds[].argmax"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.segmentation_helpers.SegmentationVoter._predict_full_res"], ["", "@", "property", "\n", "def", "full_res_preds", "(", "self", ")", ":", "\n", "        ", "self", ".", "_predict_full_res", "(", ")", "\n", "if", "self", ".", "_class_seg_map", ":", "\n", "            ", "return", "self", ".", "_full_res_preds", "[", ":", ",", "self", ".", "_class_seg_map", "]", ".", "argmax", "(", "1", ")", "+", "self", ".", "_class_seg_map", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "_full_res_preds", ".", "argmax", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.segmentation_helpers.SegmentationVoter.add_vote": [[59, 75], ["None"], "methods", ["None"], ["", "", "def", "add_vote", "(", "self", ",", "data", ",", "output", ",", "batch_mask", ")", ":", "\n", "        ", "\"\"\" Populates scores for the points in data\n\n        Parameters\n        ----------\n        data : Data\n            should contain `pos` and `SaveOriginalPosId.KEY` keys\n        output : torch.Tensor\n            probablities out of the model, shape: [N,nb_classes]\n        batch_mask: torch.Tensor | int\n            mask to access the associated element\n        \"\"\"", "\n", "idx", "=", "data", "[", "SaveOriginalPosId", ".", "KEY", "]", "[", "batch_mask", "]", "\n", "self", ".", "_votes", "[", "idx", "]", "+=", "output", "\n", "self", ".", "_vote_counts", "[", "idx", "]", "+=", "1", "\n", "self", ".", "_num_votes", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.segmentation_helpers.SegmentationVoter._predict_full_res": [[76, 84], ["segmentation_helpers.SegmentationVoter._votes[].div", "torch_geometric.nn.unpool.knn_interpolate", "segmentation_helpers.SegmentationVoter._vote_counts[].unsqueeze"], "methods", ["None"], ["", "def", "_predict_full_res", "(", "self", ")", ":", "\n", "        ", "\"\"\" Predict full resolution results based on votes \"\"\"", "\n", "has_prediction", "=", "self", ".", "_vote_counts", ">", "0", "\n", "votes", "=", "self", ".", "_votes", "[", "has_prediction", "]", ".", "div", "(", "self", ".", "_vote_counts", "[", "has_prediction", "]", ".", "unsqueeze", "(", "-", "1", ")", ")", "\n", "\n", "# Upsample and predict", "\n", "full_pred", "=", "knn_interpolate", "(", "votes", ",", "self", ".", "_raw_data", ".", "pos", "[", "has_prediction", "]", ",", "self", ".", "_raw_data", ".", "pos", ",", "k", "=", "self", ".", "_k", ")", "\n", "self", ".", "_full_res_preds", "=", "full_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.segmentation_helpers.SegmentationVoter.__repr__": [[85, 87], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"{}(num_pos={})\"", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "_num_pos", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.meters.Meter.reset": [[10, 12], ["None"], "methods", ["None"], ["def", "reset", "(", "self", ")", ":", "\n", "        ", "\"\"\"Resets the meter to default settings.\"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.meters.Meter.add": [[13, 18], ["None"], "methods", ["None"], ["", "def", "add", "(", "self", ",", "value", ")", ":", "\n", "        ", "\"\"\"Log a new value to the meter\n        Args:\n            value: Next restult to include.\n        \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.meters.Meter.value": [[19, 21], ["None"], "methods", ["None"], ["", "def", "value", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get the value of the meter in the current state.\"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.meters.APMeter.__init__": [[39, 42], ["object.__init__", "meters.APMeter.reset"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.classification_tracker.ClassificationTracker.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "APMeter", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.meters.APMeter.reset": [[43, 48], ["torch.FloatTensor", "torch.LongTensor", "torch.FloatTensor", "torch.FloatStorage", "torch.LongStorage", "torch.FloatStorage"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "\"\"\"Resets the meter with empty member variables\"\"\"", "\n", "self", ".", "scores", "=", "torch", ".", "FloatTensor", "(", "torch", ".", "FloatStorage", "(", ")", ")", "\n", "self", ".", "targets", "=", "torch", ".", "LongTensor", "(", "torch", ".", "LongStorage", "(", ")", ")", "\n", "self", ".", "weights", "=", "torch", ".", "FloatTensor", "(", "torch", ".", "FloatStorage", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.meters.APMeter.add": [[49, 114], ["meters.APMeter.scores.resize_", "meters.APMeter.targets.resize_", "meters.APMeter.scores.narrow().copy_", "meters.APMeter.targets.narrow().copy_", "torch.is_tensor", "torch.from_numpy", "torch.is_tensor", "torch.from_numpy", "torch.from_numpy.squeeze", "output.view.view.dim", "output.view.view.view", "target.view.view.dim", "target.view.view.view", "meters.APMeter.scores.numel", "meters.APMeter.scores.storage().size", "math.ceil", "math.ceil", "meters.APMeter.scores.storage().resize_", "meters.APMeter.targets.storage().resize_", "meters.APMeter.scores.size", "output.view.view.size", "target.view.view.size", "meters.APMeter.weights.resize_", "meters.APMeter.weights.narrow().copy_", "torch.is_tensor", "torch.from_numpy", "output.view.view.dim", "target.view.view.dim", "torch.from_numpy.dim", "torch.from_numpy.numel", "target.view.view.size", "torch.min", "target.view.view.size", "meters.APMeter.targets.size", "meters.APMeter.scores.numel", "output.view.view.numel", "int", "int", "meters.APMeter.weights.storage().resize_", "meters.APMeter.scores.dim", "output.view.view.size", "target.view.view.size", "meters.APMeter.scores.narrow", "meters.APMeter.targets.narrow", "meters.APMeter.scores.storage", "meters.APMeter.scores.storage().size", "meters.APMeter.weights.storage().size", "meters.APMeter.scores.storage", "meters.APMeter.targets.storage", "int", "output.view.view.size", "target.view.view.size", "torch.from_numpy.size", "meters.APMeter.weights.narrow", "output.view.view.numel", "output.view.view.numel", "meters.APMeter.weights.storage", "torch.from_numpy.size", "meters.APMeter.scores.storage", "meters.APMeter.weights.storage", "output.view.view.size"], "methods", ["None"], ["", "def", "add", "(", "self", ",", "output", ",", "target", ",", "weight", "=", "None", ")", ":", "\n", "        ", "\"\"\"Add a new observation\n        Args:\n            output (Tensor): NxK tensor that for each of the N examples\n                indicates the probability of the example belonging to each of\n                the K classes, according to the model. The probabilities should\n                sum to one over all classes\n            target (Tensor): binary NxK tensort that encodes which of the K\n                classes are associated with the N-th input\n                (eg: a row [0, 1, 0, 1] indicates that the example is\n                associated with classes 2 and 4)\n            weight (optional, Tensor): Nx1 tensor representing the weight for\n                each example (each weight > 0)\n        \"\"\"", "\n", "if", "not", "torch", ".", "is_tensor", "(", "output", ")", ":", "\n", "            ", "output", "=", "torch", ".", "from_numpy", "(", "output", ")", "\n", "", "if", "not", "torch", ".", "is_tensor", "(", "target", ")", ":", "\n", "            ", "target", "=", "torch", ".", "from_numpy", "(", "target", ")", "\n", "\n", "", "if", "weight", "is", "not", "None", ":", "\n", "            ", "if", "not", "torch", ".", "is_tensor", "(", "weight", ")", ":", "\n", "                ", "weight", "=", "torch", ".", "from_numpy", "(", "weight", ")", "\n", "", "weight", "=", "weight", ".", "squeeze", "(", ")", "\n", "", "if", "output", ".", "dim", "(", ")", "==", "1", ":", "\n", "            ", "output", "=", "output", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "assert", "(", "\n", "output", ".", "dim", "(", ")", "==", "2", "\n", ")", ",", "\"wrong output size (should be 1D or 2D with one column \\\n                per class)\"", "\n", "", "if", "target", ".", "dim", "(", ")", "==", "1", ":", "\n", "            ", "target", "=", "target", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "assert", "(", "\n", "target", ".", "dim", "(", ")", "==", "2", "\n", ")", ",", "\"wrong target size (should be 1D or 2D with one column \\\n                per class)\"", "\n", "", "if", "weight", "is", "not", "None", ":", "\n", "            ", "assert", "weight", ".", "dim", "(", ")", "==", "1", ",", "\"Weight dimension should be 1\"", "\n", "assert", "weight", ".", "numel", "(", ")", "==", "target", ".", "size", "(", "0", ")", ",", "\"Weight dimension 1 should be the same as that of target\"", "\n", "assert", "torch", ".", "min", "(", "weight", ")", ">=", "0", ",", "\"Weight should be non-negative only\"", "\n", "", "if", "self", ".", "scores", ".", "numel", "(", ")", ">", "0", ":", "\n", "            ", "assert", "target", ".", "size", "(", "1", ")", "==", "self", ".", "targets", ".", "size", "(", "\n", "1", "\n", ")", ",", "\"dimensions for output should match previously added examples.\"", "\n", "\n", "# make sure storage is of sufficient size", "\n", "", "if", "self", ".", "scores", ".", "storage", "(", ")", ".", "size", "(", ")", "<", "self", ".", "scores", ".", "numel", "(", ")", "+", "output", ".", "numel", "(", ")", ":", "\n", "            ", "new_size", "=", "math", ".", "ceil", "(", "self", ".", "scores", ".", "storage", "(", ")", ".", "size", "(", ")", "*", "1.5", ")", "\n", "new_weight_size", "=", "math", ".", "ceil", "(", "self", ".", "weights", ".", "storage", "(", ")", ".", "size", "(", ")", "*", "1.5", ")", "\n", "self", ".", "scores", ".", "storage", "(", ")", ".", "resize_", "(", "int", "(", "new_size", "+", "output", ".", "numel", "(", ")", ")", ")", "\n", "self", ".", "targets", ".", "storage", "(", ")", ".", "resize_", "(", "int", "(", "new_size", "+", "output", ".", "numel", "(", ")", ")", ")", "\n", "if", "weight", "is", "not", "None", ":", "\n", "                ", "self", ".", "weights", ".", "storage", "(", ")", ".", "resize_", "(", "int", "(", "new_weight_size", "+", "output", ".", "size", "(", "0", ")", ")", ")", "\n", "\n", "# store scores and targets", "\n", "", "", "offset", "=", "self", ".", "scores", ".", "size", "(", "0", ")", "if", "self", ".", "scores", ".", "dim", "(", ")", ">", "0", "else", "0", "\n", "self", ".", "scores", ".", "resize_", "(", "offset", "+", "output", ".", "size", "(", "0", ")", ",", "output", ".", "size", "(", "1", ")", ")", "\n", "self", ".", "targets", ".", "resize_", "(", "offset", "+", "target", ".", "size", "(", "0", ")", ",", "target", ".", "size", "(", "1", ")", ")", "\n", "self", ".", "scores", ".", "narrow", "(", "0", ",", "offset", ",", "output", ".", "size", "(", "0", ")", ")", ".", "copy_", "(", "output", ")", "\n", "self", ".", "targets", ".", "narrow", "(", "0", ",", "offset", ",", "target", ".", "size", "(", "0", ")", ")", ".", "copy_", "(", "target", ")", "\n", "\n", "if", "weight", "is", "not", "None", ":", "\n", "            ", "self", ".", "weights", ".", "resize_", "(", "offset", "+", "weight", ".", "size", "(", "0", ")", ")", "\n", "self", ".", "weights", ".", "narrow", "(", "0", ",", "offset", ",", "weight", ".", "size", "(", "0", ")", ")", ".", "copy_", "(", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.meters.APMeter.value": [[115, 156], ["torch.zeros", "hasattr", "range", "meters.APMeter.scores.numel", "meters.APMeter.scores.size", "torch.arange().float", "torch.range().float", "meters.APMeter.weights.numel", "meters.APMeter.weights.new", "meters.APMeter.weights.new", "meters.APMeter.scores.size", "torch.sort", "truth.float().cumsum.div", "meters.APMeter.weights.size", "meters.APMeter.weights.size", "meters.APMeter.weights.numel", "meters.APMeter.cumsum", "meters.APMeter.weights.numel", "meters.APMeter.cumsum", "truth.float().cumsum", "precision[].sum", "max", "torch.arange", "torch.range", "truth.float", "float", "meters.APMeter.scores.size", "truth.float", "truth.sum", "meters.APMeter.scores.size", "truth.bool"], "methods", ["None"], ["", "", "def", "value", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model's average precision for each class\n        Return:\n            ap (FloatTensor): 1xK tensor, with avg precision for each class k\n        \"\"\"", "\n", "\n", "if", "self", ".", "scores", ".", "numel", "(", ")", "==", "0", ":", "\n", "            ", "return", "0", "\n", "", "ap", "=", "torch", ".", "zeros", "(", "self", ".", "scores", ".", "size", "(", "1", ")", ")", "\n", "if", "hasattr", "(", "torch", ",", "\"arange\"", ")", ":", "\n", "            ", "rg", "=", "torch", ".", "arange", "(", "1", ",", "self", ".", "scores", ".", "size", "(", "0", ")", "+", "1", ")", ".", "float", "(", ")", "\n", "", "else", ":", "\n", "            ", "rg", "=", "torch", ".", "range", "(", "1", ",", "self", ".", "scores", ".", "size", "(", "0", ")", ")", ".", "float", "(", ")", "\n", "", "if", "self", ".", "weights", ".", "numel", "(", ")", ">", "0", ":", "\n", "            ", "weight", "=", "self", ".", "weights", ".", "new", "(", "self", ".", "weights", ".", "size", "(", ")", ")", "\n", "weighted_truth", "=", "self", ".", "weights", ".", "new", "(", "self", ".", "weights", ".", "size", "(", ")", ")", "\n", "\n", "# compute average precision for each class", "\n", "", "for", "k", "in", "range", "(", "self", ".", "scores", ".", "size", "(", "1", ")", ")", ":", "\n", "# sort scores", "\n", "            ", "scores", "=", "self", ".", "scores", "[", ":", ",", "k", "]", "\n", "targets", "=", "self", ".", "targets", "[", ":", ",", "k", "]", "\n", "_", ",", "sortind", "=", "torch", ".", "sort", "(", "scores", ",", "0", ",", "True", ")", "\n", "truth", "=", "targets", "[", "sortind", "]", "\n", "if", "self", ".", "weights", ".", "numel", "(", ")", ">", "0", ":", "\n", "                ", "weight", "=", "self", ".", "weights", "[", "sortind", "]", "\n", "weighted_truth", "=", "truth", ".", "float", "(", ")", "*", "weight", "\n", "rg", "=", "weight", ".", "cumsum", "(", "0", ")", "\n", "\n", "# compute true positive sums", "\n", "", "if", "self", ".", "weights", ".", "numel", "(", ")", ">", "0", ":", "\n", "                ", "tp", "=", "weighted_truth", ".", "cumsum", "(", "0", ")", "\n", "", "else", ":", "\n", "                ", "tp", "=", "truth", ".", "float", "(", ")", ".", "cumsum", "(", "0", ")", "\n", "\n", "# compute precision curve", "\n", "", "precision", "=", "tp", ".", "div", "(", "rg", ")", "\n", "\n", "# compute average precision", "\n", "ap", "[", "k", "]", "=", "precision", "[", "truth", ".", "bool", "(", ")", "]", ".", "sum", "(", ")", "/", "max", "(", "float", "(", "truth", ".", "sum", "(", ")", ")", ",", "1", ")", "\n", "", "return", "ap", "\n", "", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.object_detection_tracker.ObjectDetectionTracker.__init__": [[17, 23], ["torch_points3d.metrics.base_tracker.BaseTracker.__init__", "object_detection_tracker.ObjectDetectionTracker.reset"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.classification_tracker.ClassificationTracker.reset"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "stage", "=", "\"train\"", ",", "wandb_log", "=", "False", ",", "use_tensorboard", ":", "bool", "=", "False", ")", ":", "\n", "        ", "super", "(", "ObjectDetectionTracker", ",", "self", ")", ".", "__init__", "(", "stage", ",", "wandb_log", ",", "use_tensorboard", ")", "\n", "self", ".", "_num_classes", "=", "dataset", ".", "num_classes", "\n", "self", ".", "_dataset", "=", "dataset", "\n", "self", ".", "reset", "(", "stage", ")", "\n", "self", ".", "_metric_func", "=", "{", "\"loss\"", ":", "min", ",", "\"acc\"", ":", "max", ",", "\"pos\"", ":", "max", ",", "\"neg\"", ":", "min", ",", "\"map\"", ":", "max", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.object_detection_tracker.ObjectDetectionTracker.reset": [[24, 33], ["super().reset", "torchnet.meter.AverageValueMeter", "torchnet.meter.AverageValueMeter", "torchnet.meter.AverageValueMeter"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.classification_tracker.ClassificationTracker.reset"], ["", "def", "reset", "(", "self", ",", "stage", "=", "\"train\"", ")", ":", "\n", "        ", "super", "(", ")", ".", "reset", "(", "stage", "=", "stage", ")", "\n", "self", ".", "_pred_boxes", ":", "Dict", "[", "str", ",", "List", "[", "BoxData", "]", "]", "=", "{", "}", "\n", "self", ".", "_gt_boxes", ":", "Dict", "[", "str", ",", "List", "[", "BoxData", "]", "]", "=", "{", "}", "\n", "self", ".", "_rec", ":", "Dict", "[", "str", ",", "Dict", "[", "str", ",", "float", "]", "]", "=", "{", "}", "\n", "self", ".", "_ap", ":", "Dict", "[", "str", ",", "Dict", "[", "str", ",", "float", "]", "]", "=", "{", "}", "\n", "self", ".", "_neg_ratio", "=", "tnt", ".", "meter", ".", "AverageValueMeter", "(", ")", "\n", "self", ".", "_obj_acc", "=", "tnt", ".", "meter", ".", "AverageValueMeter", "(", ")", "\n", "self", ".", "_pos_ratio", "=", "tnt", ".", "meter", ".", "AverageValueMeter", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.object_detection_tracker.ObjectDetectionTracker.detach_tensor": [[34, 39], ["torch.torch.is_tensor", "tensor.detach.detach.detach"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "detach_tensor", "(", "tensor", ")", ":", "\n", "        ", "if", "torch", ".", "torch", ".", "is_tensor", "(", "tensor", ")", ":", "\n", "            ", "tensor", "=", "tensor", ".", "detach", "(", ")", "\n", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.object_detection_tracker.ObjectDetectionTracker.track": [[40, 67], ["super().track", "model.get_output", "object_detection_tracker.ObjectDetectionTracker._pos_ratio.add", "object_detection_tracker.ObjectDetectionTracker._neg_ratio.add", "torch.argmax", "object_detection_tracker.ObjectDetectionTracker._obj_acc.add", "object_detection_tracker.ObjectDetectionTracker._add_box_pred", "torch.sum().item", "float", "torch.sum().item", "torch.sum", "torch.sum().item", "float", "outputs.objectness_label.float", "torch.sum", "torch.sum", "torch.sum", "outputs.objectness_mask.float", "outputs.objectness_label.long"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.classification_tracker.ClassificationTracker.track", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.get_output", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.meters.APMeter.add", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.meters.APMeter.add", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.meters.APMeter.add", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.object_detection_tracker.ObjectDetectionTracker._add_box_pred"], ["", "def", "track", "(", "self", ",", "model", ":", "TrackerInterface", ",", "data", "=", "None", ",", "track_boxes", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\" Add current model predictions (usually the result of a batch) to the tracking\n        if tracking boxes, you must provide a labeled \"data\" object with the following attributes:\n            - id_scan: id of the scan to which the boxes belong to\n            - instance_box_cornerimport torchnet as tnts - gt box corners\n            - box_label_mask - mask for boxes (0 = no box)\n            - sem_cls_label - semantic label for each box\n        \"\"\"", "\n", "super", "(", ")", ".", "track", "(", "model", ")", "\n", "\n", "outputs", ":", "VoteNetResults", "=", "model", ".", "get_output", "(", ")", "\n", "\n", "total_num_proposal", "=", "outputs", ".", "objectness_label", ".", "shape", "[", "0", "]", "*", "outputs", ".", "objectness_label", ".", "shape", "[", "1", "]", "\n", "pos_ratio", "=", "torch", ".", "sum", "(", "outputs", ".", "objectness_label", ".", "float", "(", ")", ")", ".", "item", "(", ")", "/", "float", "(", "total_num_proposal", ")", "\n", "self", ".", "_pos_ratio", ".", "add", "(", "pos_ratio", ")", "\n", "self", ".", "_neg_ratio", ".", "add", "(", "torch", ".", "sum", "(", "outputs", ".", "objectness_mask", ".", "float", "(", ")", ")", ".", "item", "(", ")", "/", "float", "(", "total_num_proposal", ")", "-", "pos_ratio", ")", "\n", "\n", "obj_pred_val", "=", "torch", ".", "argmax", "(", "outputs", ".", "objectness_scores", ",", "2", ")", "# B,K", "\n", "self", ".", "_obj_acc", ".", "add", "(", "\n", "torch", ".", "sum", "(", "(", "obj_pred_val", "==", "outputs", ".", "objectness_label", ".", "long", "(", ")", ")", ".", "float", "(", ")", "*", "outputs", ".", "objectness_mask", ")", ".", "item", "(", ")", "\n", "/", "(", "torch", ".", "sum", "(", "outputs", ".", "objectness_mask", ")", "+", "1e-6", ")", ".", "item", "(", ")", "\n", ")", "\n", "\n", "if", "data", "is", "None", "or", "self", ".", "_stage", "==", "\"train\"", "or", "not", "track_boxes", ":", "\n", "            ", "return", "\n", "\n", "", "self", ".", "_add_box_pred", "(", "outputs", ",", "data", ",", "model", ".", "conv_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.object_detection_tracker.ObjectDetectionTracker._add_box_pred": [[68, 87], ["outputs.get_boxes", "enumerate", "ValueError", "len", "len", "torch_points3d.datasets.object_detection.box_data.BoxData", "scan_id.item", "sample_labels[].item", "range", "scan_id.item", "len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.VoteNet.votenet_results.VoteNetResults.get_boxes", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "def", "_add_box_pred", "(", "self", ",", "outputs", ":", "VoteNetResults", ",", "input_data", ",", "conv_type", ")", ":", "\n", "# Track box predictions", "\n", "        ", "pred_boxes", "=", "outputs", ".", "get_boxes", "(", "self", ".", "_dataset", ",", "apply_nms", "=", "True", ",", "duplicate_boxes", "=", "False", ")", "\n", "if", "input_data", ".", "id_scan", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Cannot track boxes without knowing in which scan they are\"", ")", "\n", "\n", "", "scan_ids", "=", "input_data", ".", "id_scan", "\n", "assert", "len", "(", "scan_ids", ")", "==", "len", "(", "pred_boxes", ")", "\n", "for", "idx", ",", "scan_id", "in", "enumerate", "(", "scan_ids", ")", ":", "\n", "# Predictions", "\n", "            ", "self", ".", "_pred_boxes", "[", "scan_id", ".", "item", "(", ")", "]", "=", "pred_boxes", "[", "idx", "]", "\n", "\n", "# Ground truth", "\n", "sample_mask", "=", "idx", "\n", "gt_boxes", "=", "input_data", ".", "instance_box_corners", "[", "sample_mask", "]", "\n", "gt_boxes", "=", "gt_boxes", "[", "input_data", ".", "box_label_mask", "[", "sample_mask", "]", "]", "\n", "sample_labels", "=", "input_data", ".", "sem_cls_label", "[", "sample_mask", "]", "\n", "gt_box_data", "=", "[", "BoxData", "(", "sample_labels", "[", "i", "]", ".", "item", "(", ")", ",", "gt_boxes", "[", "i", "]", ")", "for", "i", "in", "range", "(", "len", "(", "gt_boxes", ")", ")", "]", "\n", "self", ".", "_gt_boxes", "[", "scan_id", ".", "item", "(", ")", "]", "=", "gt_box_data", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.object_detection_tracker.ObjectDetectionTracker.get_metrics": [[88, 108], ["super().get_metrics", "torch_points3d.metrics.base_tracker.meter_value", "torch_points3d.metrics.base_tracker.meter_value", "torch_points3d.metrics.base_tracker.meter_value", "object_detection_tracker.ObjectDetectionTracker._ap.items", "object_detection_tracker.ObjectDetectionTracker._dict_to_str", "object_detection_tracker.ObjectDetectionTracker._dict_to_str", "sum", "len", "ap.values"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.classification_tracker.ClassificationTracker.get_metrics", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.base_tracker.meter_value", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.base_tracker.meter_value", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.base_tracker.meter_value", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.base_tracker.BaseTracker._dict_to_str", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.base_tracker.BaseTracker._dict_to_str", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "", "def", "get_metrics", "(", "self", ",", "verbose", "=", "False", ")", "->", "Dict", "[", "str", ",", "Any", "]", ":", "\n", "        ", "\"\"\" Returns a dictionnary of all metrics and losses being tracked\n        \"\"\"", "\n", "metrics", "=", "super", "(", ")", ".", "get_metrics", "(", "verbose", ")", "\n", "\n", "metrics", "[", "\"{}_acc\"", ".", "format", "(", "self", ".", "_stage", ")", "]", "=", "meter_value", "(", "self", ".", "_obj_acc", ")", "\n", "metrics", "[", "\"{}_pos\"", ".", "format", "(", "self", ".", "_stage", ")", "]", "=", "meter_value", "(", "self", ".", "_pos_ratio", ")", "\n", "metrics", "[", "\"{}_neg\"", ".", "format", "(", "self", ".", "_stage", ")", "]", "=", "meter_value", "(", "self", ".", "_neg_ratio", ")", "\n", "\n", "if", "self", ".", "_has_box_data", ":", "\n", "            ", "for", "thresh", ",", "ap", "in", "self", ".", "_ap", ".", "items", "(", ")", ":", "\n", "                ", "mAP", "=", "sum", "(", "ap", ".", "values", "(", ")", ")", "/", "len", "(", "ap", ")", "\n", "metrics", "[", "\"{}_map{}\"", ".", "format", "(", "self", ".", "_stage", ",", "thresh", ")", "]", "=", "mAP", "\n", "\n", "", "", "if", "verbose", "and", "self", ".", "_has_box_data", ":", "\n", "            ", "for", "thresh", "in", "self", ".", "_ap", ":", "\n", "                ", "metrics", "[", "\"{}_class_rec{}\"", ".", "format", "(", "self", ".", "_stage", ",", "thresh", ")", "]", "=", "self", ".", "_dict_to_str", "(", "self", ".", "_rec", "[", "thresh", "]", ")", "\n", "metrics", "[", "\"{}_class_ap{}\"", ".", "format", "(", "self", ".", "_stage", ",", "thresh", ")", "]", "=", "self", ".", "_dict_to_str", "(", "self", ".", "_ap", "[", "thresh", "]", ")", "\n", "\n", "", "", "return", "metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.object_detection_tracker.ObjectDetectionTracker.finalise": [[109, 126], ["box_detection.ap.eval_detection", "collections.OrderedDict", "collections.OrderedDict", "sorted", "len", "sorted", "rec.items", "str", "ap.items", "str", "str"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.box_detection.ap.eval_detection", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "def", "finalise", "(", "self", ",", "track_boxes", "=", "False", ",", "overlap_thresholds", "=", "[", "0.25", ",", "0.5", "]", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "not", "track_boxes", "or", "len", "(", "self", ".", "_gt_boxes", ")", "==", "0", ":", "\n", "            ", "return", "\n", "\n", "# Compute box detection metrics", "\n", "", "self", ".", "_ap", "=", "{", "}", "\n", "self", ".", "_rec", "=", "{", "}", "\n", "for", "thresh", "in", "overlap_thresholds", ":", "\n", "            ", "rec", ",", "_", ",", "ap", "=", "eval_detection", "(", "self", ".", "_pred_boxes", ",", "self", ".", "_gt_boxes", ",", "ovthresh", "=", "thresh", ")", "\n", "self", ".", "_ap", "[", "str", "(", "thresh", ")", "]", "=", "OrderedDict", "(", "sorted", "(", "ap", ".", "items", "(", ")", ")", ")", "\n", "self", ".", "_rec", "[", "str", "(", "thresh", ")", "]", "=", "OrderedDict", "(", "{", "}", ")", "\n", "for", "key", ",", "val", "in", "sorted", "(", "rec", ".", "items", "(", ")", ")", ":", "\n", "                ", "try", ":", "\n", "                    ", "value", "=", "val", "[", "-", "1", "]", "\n", "", "except", "TypeError", ":", "\n", "                    ", "value", "=", "val", "\n", "", "self", ".", "_rec", "[", "str", "(", "thresh", ")", "]", "[", "key", "]", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.object_detection_tracker.ObjectDetectionTracker._has_box_data": [[127, 130], ["len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "", "", "@", "property", "\n", "def", "_has_box_data", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_rec", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.object_detection_tracker.ObjectDetectionTracker.metric_func": [[131, 134], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "metric_func", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_metric_func", "\n", "", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.colored_tqdm.Coloredtqdm.set_postfix": [[10, 35], ["collections.OrderedDict", "sorted", "collections.OrderedDict.keys", "kwargs.keys", "isinstance", "isinstance", "colored_tqdm.Coloredtqdm.refresh", "colored_tqdm.Coloredtqdm.format_num_to_k", "str", "len", "numpy.round", "collections.OrderedDict.keys", "len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.mock.MockDatasetConfig.keys", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.mock.MockDatasetConfig.keys", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.colored_tqdm.Coloredtqdm.format_num_to_k", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.mock.MockDatasetConfig.keys", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["    ", "def", "set_postfix", "(", "self", ",", "ordered_dict", "=", "None", ",", "refresh", "=", "True", ",", "color", "=", "None", ",", "round", "=", "4", ",", "**", "kwargs", ")", ":", "\n", "        ", "postfix", "=", "OrderedDict", "(", "[", "]", "if", "ordered_dict", "is", "None", "else", "ordered_dict", ")", "\n", "\n", "for", "key", "in", "sorted", "(", "kwargs", ".", "keys", "(", ")", ")", ":", "\n", "            ", "postfix", "[", "key", "]", "=", "kwargs", "[", "key", "]", "\n", "\n", "", "for", "key", "in", "postfix", ".", "keys", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "postfix", "[", "key", "]", ",", "Number", ")", ":", "\n", "                ", "postfix", "[", "key", "]", "=", "self", ".", "format_num_to_k", "(", "np", ".", "round", "(", "postfix", "[", "key", "]", ",", "round", ")", ",", "k", "=", "round", "+", "1", ")", "\n", "", "if", "isinstance", "(", "postfix", "[", "key", "]", ",", "str", ")", ":", "\n", "                ", "postfix", "[", "key", "]", "=", "str", "(", "postfix", "[", "key", "]", ")", "\n", "", "if", "len", "(", "postfix", "[", "key", "]", ")", "!=", "round", ":", "\n", "                ", "postfix", "[", "key", "]", "+=", "(", "round", "-", "len", "(", "postfix", "[", "key", "]", ")", ")", "*", "\" \"", "\n", "\n", "", "", "if", "color", "is", "not", "None", ":", "\n", "            ", "self", ".", "postfix", "=", "color", "\n", "", "else", ":", "\n", "            ", "self", ".", "postfix", "=", "\"\"", "\n", "\n", "", "self", ".", "postfix", "+=", "\", \"", ".", "join", "(", "key", "+", "\"=\"", "+", "postfix", "[", "key", "]", "for", "key", "in", "postfix", ".", "keys", "(", ")", ")", "\n", "if", "color", "is", "not", "None", ":", "\n", "            ", "self", ".", "postfix", "+=", "COLORS", ".", "END_TOKEN", "\n", "\n", "", "if", "refresh", ":", "\n", "            ", "self", ".", "refresh", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.colored_tqdm.Coloredtqdm.format_num_to_k": [[36, 41], ["str", "len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "", "def", "format_num_to_k", "(", "self", ",", "seq", ",", "k", "=", "4", ")", ":", "\n", "        ", "seq", "=", "str", "(", "seq", ")", "\n", "length", "=", "len", "(", "seq", ")", "\n", "out", "=", "seq", "+", "\" \"", "*", "(", "k", "-", "length", ")", "if", "length", "<", "k", "else", "seq", "\n", "return", "out", "if", "length", "<", "k", "else", "seq", "[", ":", "k", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.classification_tracker.ClassificationTracker.__init__": [[11, 24], ["torch_points3d.metrics.base_tracker.BaseTracker.__init__", "classification_tracker.ClassificationTracker.reset"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.classification_tracker.ClassificationTracker.reset"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "stage", "=", "\"train\"", ",", "wandb_log", "=", "False", ",", "use_tensorboard", ":", "bool", "=", "False", ")", ":", "\n", "        ", "\"\"\" This is a generic tracker for multimodal tasks.\n        It uses a confusion matrix in the back-end to track results.\n        Use the tracker to track an epoch.\n        You can use the reset function before you start a new epoch\n        Arguments:\n            dataset  -- dataset to track (used for the number of classes)\n        Keyword Arguments:\n            stage {str} -- current stage. (train, validation, test, etc...) (default: {\"train\"})\n            wandb_log {str} --  Log using weight and biases\n        \"\"\"", "\n", "super", "(", "ClassificationTracker", ",", "self", ")", ".", "__init__", "(", "stage", ",", "wandb_log", ",", "use_tensorboard", ")", "\n", "self", ".", "reset", "(", "stage", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.classification_tracker.ClassificationTracker.reset": [[25, 28], ["super().reset", "torchnet.meter.AverageValueMeter"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.classification_tracker.ClassificationTracker.reset"], ["", "def", "reset", "(", "self", ",", "stage", "=", "\"train\"", ")", ":", "\n", "        ", "super", "(", ")", ".", "reset", "(", "stage", "=", "stage", ")", "\n", "self", ".", "_acc", "=", "tnt", ".", "meter", ".", "AverageValueMeter", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.classification_tracker.ClassificationTracker.detach_tensor": [[29, 34], ["torch.torch.is_tensor", "tensor.detach.detach.detach"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "detach_tensor", "(", "tensor", ")", ":", "\n", "        ", "if", "torch", ".", "torch", ".", "is_tensor", "(", "tensor", ")", ":", "\n", "            ", "tensor", "=", "tensor", ".", "detach", "(", ")", "\n", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.classification_tracker.ClassificationTracker.compute_acc": [[35, 40], ["torch.argmax", "torch.sum().item", "len", "torch.sum"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "@", "staticmethod", "\n", "def", "compute_acc", "(", "y_hat", ",", "y", ")", ":", "\n", "        ", "labels_hat", "=", "torch", ".", "argmax", "(", "y_hat", ",", "dim", "=", "1", ")", "\n", "acc", "=", "torch", ".", "sum", "(", "y", "==", "labels_hat", ")", ".", "item", "(", ")", "/", "(", "len", "(", "y", ")", "*", "1.0", ")", "\n", "return", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.classification_tracker.ClassificationTracker.track": [[41, 50], ["super().track", "model.get_output", "model.get_labels().flatten", "classification_tracker.ClassificationTracker._acc.add", "model.get_labels", "classification_tracker.ClassificationTracker.compute_acc"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.classification_tracker.ClassificationTracker.track", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.get_output", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.meters.APMeter.add", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.get_labels", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.classification_tracker.ClassificationTracker.compute_acc"], ["", "def", "track", "(", "self", ",", "model", ":", "model_interface", ".", "TrackerInterface", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\" Add current model predictions (usually the result of a batch) to the tracking\n        \"\"\"", "\n", "super", "(", ")", ".", "track", "(", "model", ")", "\n", "\n", "outputs", "=", "model", ".", "get_output", "(", ")", "\n", "targets", "=", "model", ".", "get_labels", "(", ")", ".", "flatten", "(", ")", "\n", "\n", "self", ".", "_acc", ".", "add", "(", "100", "*", "self", ".", "compute_acc", "(", "outputs", ",", "targets", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.classification_tracker.ClassificationTracker.get_metrics": [[51, 57], ["super().get_metrics", "torch_points3d.metrics.base_tracker.meter_value"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.classification_tracker.ClassificationTracker.get_metrics", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.base_tracker.meter_value"], ["", "def", "get_metrics", "(", "self", ",", "verbose", "=", "False", ")", "->", "Dict", "[", "str", ",", "Any", "]", ":", "\n", "        ", "\"\"\" Returns a dictionnary of all metrics and losses being tracked\n        \"\"\"", "\n", "metrics", "=", "super", "(", ")", ".", "get_metrics", "(", "verbose", ")", "\n", "metrics", "[", "\"{}_acc\"", ".", "format", "(", "self", ".", "_stage", ")", "]", "=", "meter_value", "(", "self", ".", "_acc", ")", "\n", "return", "metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.classification_tracker.ClassificationTracker.metric_func": [[58, 64], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "metric_func", "(", "self", ")", ":", "\n", "        ", "self", ".", "_metric_func", "=", "{", "\n", "\"acc\"", ":", "max", ",", "\n", "}", "# Those map subsentences to their optimization functions", "\n", "return", "self", ".", "_metric_func", "\n", "", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.box_detection.ap.voc_ap": [[10, 33], ["numpy.concatenate", "numpy.concatenate", "range", "numpy.sum", "numpy.maximum", "numpy.where"], "function", ["None"], ["def", "voc_ap", "(", "recall", ",", "precision", ")", ":", "\n", "    ", "\"\"\" ap = voc_ap(recall, precision)\n    Compute PASCAL VOC AP given precision and recall.\n    recall and precision contain one element per detected instance,\n    ordered by certainty (most certain element first)\n    (see here for an explanation https://github.com/rafaelpadilla/Object-Detection-Metrics)\n    \"\"\"", "\n", "# correct AP calculation", "\n", "# first append sentinel values at the end", "\n", "mrec", "=", "np", ".", "concatenate", "(", "(", "[", "0.0", "]", ",", "recall", ",", "[", "1.0", "]", ")", ")", "\n", "mpre", "=", "np", ".", "concatenate", "(", "(", "[", "0.0", "]", ",", "precision", ",", "[", "0.0", "]", ")", ")", "\n", "\n", "# compute the precision envelope", "\n", "for", "i", "in", "range", "(", "mpre", ".", "size", "-", "1", ",", "0", ",", "-", "1", ")", ":", "\n", "        ", "mpre", "[", "i", "-", "1", "]", "=", "np", ".", "maximum", "(", "mpre", "[", "i", "-", "1", "]", ",", "mpre", "[", "i", "]", ")", "\n", "\n", "# to calculate area under PR curve, look for points", "\n", "# where X axis (recall) changes value", "\n", "", "i", "=", "np", ".", "where", "(", "mrec", "[", "1", ":", "]", "!=", "mrec", "[", ":", "-", "1", "]", ")", "[", "0", "]", "\n", "\n", "# and sum (\\Delta recall) * prec", "\n", "ap", "=", "np", ".", "sum", "(", "(", "mrec", "[", "i", "+", "1", "]", "-", "mrec", "[", "i", "]", ")", "*", "mpre", "[", "i", "+", "1", "]", ")", "\n", "return", "ap", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.box_detection.ap.eval_det_cls": [[35, 119], ["gt.keys", "pred.keys", "pred.keys", "numpy.array", "numpy.array", "numpy.argsort", "len", "numpy.zeros", "numpy.zeros", "range", "numpy.cumsum", "numpy.cumsum", "ap.voc_ap", "numpy.array", "len", "BB[].astype", "R[].astype", "float", "numpy.maximum", "len", "image_ids.append", "np.array.append", "np.array.append", "range", "numpy.array", "torch_points3d.utils.box_utils.box3d_iou", "numpy.finfo"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.mock.MockDatasetConfig.keys", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.mock.MockDatasetConfig.keys", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.mock.MockDatasetConfig.keys", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.box_detection.ap.voc_ap", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.box_utils.box3d_iou"], ["", "def", "eval_det_cls", "(", "pred", ",", "gt", ",", "ovthresh", "=", "0.25", ")", ":", "\n", "    ", "\"\"\" Generic functions to compute precision/recall for object detection\n    for a single class. For each detected box (starting with the most confident),\n    find the box with the highest overlap in the ground truth  and mark that one as \"detected\".\n    The same box being detected multiple times counts as false positive.\n\n    Input:\n        pred: map of {img_id: [(bbox, score)]} where bbox is numpy array\n        gt: map of {img_id: [bbox]}\n        ovthresh: scalar, iou threshold\n    Output:\n        rec: numpy array of length nd\n        prec: numpy array of length nd\n        ap: scalar, average precision\n    \"\"\"", "\n", "\n", "# construct gt objects", "\n", "class_recs", "=", "{", "}", "# {img_id: {'bbox': bbox list, 'det': matched list}}", "\n", "npos", "=", "0", "\n", "for", "img_id", "in", "gt", ".", "keys", "(", ")", ":", "\n", "        ", "bbox", "=", "np", ".", "array", "(", "gt", "[", "img_id", "]", ")", "\n", "det", "=", "[", "False", "]", "*", "len", "(", "bbox", ")", "\n", "npos", "+=", "len", "(", "bbox", ")", "\n", "class_recs", "[", "img_id", "]", "=", "{", "\"bbox\"", ":", "bbox", ",", "\"detected\"", ":", "det", "}", "\n", "# pad empty list to all other imgids", "\n", "", "for", "img_id", "in", "pred", ".", "keys", "(", ")", ":", "\n", "        ", "if", "img_id", "not", "in", "gt", ":", "\n", "            ", "class_recs", "[", "img_id", "]", "=", "{", "\"bbox\"", ":", "np", ".", "array", "(", "[", "]", ")", ",", "\"detected\"", ":", "[", "]", "}", "\n", "\n", "# construct dets", "\n", "", "", "image_ids", "=", "[", "]", "\n", "confidence", "=", "[", "]", "\n", "BB", "=", "[", "]", "\n", "for", "img_id", "in", "pred", ".", "keys", "(", ")", ":", "\n", "        ", "for", "box", ",", "score", "in", "pred", "[", "img_id", "]", ":", "\n", "            ", "image_ids", ".", "append", "(", "img_id", ")", "\n", "confidence", ".", "append", "(", "score", ")", "\n", "BB", ".", "append", "(", "box", ")", "\n", "", "", "confidence", "=", "np", ".", "array", "(", "confidence", ")", "\n", "BB", "=", "np", ".", "array", "(", "BB", ")", "# (nd,4 or 8,3 or 6)", "\n", "\n", "# sort by confidence", "\n", "sorted_ind", "=", "np", ".", "argsort", "(", "-", "confidence", ")", "\n", "BB", "=", "BB", "[", "sorted_ind", ",", "...", "]", "\n", "image_ids", "=", "[", "image_ids", "[", "x", "]", "for", "x", "in", "sorted_ind", "]", "\n", "\n", "# go down dets and mark TPs and FPs", "\n", "num_images", "=", "len", "(", "image_ids", ")", "\n", "tp", "=", "np", ".", "zeros", "(", "num_images", ")", "\n", "fp", "=", "np", ".", "zeros", "(", "num_images", ")", "\n", "for", "d", "in", "range", "(", "num_images", ")", ":", "\n", "        ", "R", "=", "class_recs", "[", "image_ids", "[", "d", "]", "]", "\n", "bb", "=", "BB", "[", "d", ",", "...", "]", ".", "astype", "(", "float", ")", "\n", "ovmax", "=", "-", "np", ".", "inf", "\n", "BBGT", "=", "R", "[", "\"bbox\"", "]", ".", "astype", "(", "float", ")", "\n", "\n", "if", "BBGT", ".", "size", ">", "0", ":", "\n", "# compute overlaps", "\n", "            ", "for", "j", "in", "range", "(", "BBGT", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "iou", "=", "box3d_iou", "(", "bb", ",", "BBGT", "[", "j", ",", "...", "]", ")", "\n", "if", "iou", ">", "ovmax", ":", "\n", "                    ", "ovmax", "=", "iou", "\n", "jmax", "=", "j", "\n", "\n", "# print d, ovmax", "\n", "", "", "", "if", "ovmax", ">", "ovthresh", ":", "\n", "            ", "if", "not", "R", "[", "\"detected\"", "]", "[", "jmax", "]", ":", "\n", "                ", "tp", "[", "d", "]", "=", "1.0", "\n", "R", "[", "\"detected\"", "]", "[", "jmax", "]", "=", "1", "\n", "", "else", ":", "\n", "                ", "fp", "[", "d", "]", "=", "1.0", "\n", "", "", "else", ":", "\n", "            ", "fp", "[", "d", "]", "=", "1.0", "\n", "\n", "# compute precision recall", "\n", "", "", "fp", "=", "np", ".", "cumsum", "(", "fp", ")", "\n", "tp", "=", "np", ".", "cumsum", "(", "tp", ")", "\n", "rec", "=", "tp", "/", "float", "(", "npos", ")", "\n", "\n", "# avoid divide by zero in case the first detection matches a difficult", "\n", "# ground truth", "\n", "prec", "=", "tp", "/", "np", ".", "maximum", "(", "tp", "+", "fp", ",", "np", ".", "finfo", "(", "np", ".", "float64", ")", ".", "eps", ")", "\n", "ap", "=", "voc_ap", "(", "rec", ",", "prec", ")", "\n", "return", "rec", ",", "prec", ",", "ap", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.box_detection.ap.eval_det_cls_wrapper": [[121, 125], ["ap.eval_det_cls"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.box_detection.ap.eval_det_cls"], ["", "def", "eval_det_cls_wrapper", "(", "arguments", ")", ":", "\n", "    ", "pred", ",", "gt", ",", "ovthresh", "=", "arguments", "\n", "rec", ",", "prec", ",", "ap", "=", "eval_det_cls", "(", "pred", ",", "gt", ",", "ovthresh", ")", "\n", "return", "(", "rec", ",", "prec", ",", "ap", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.box_detection.ap.eval_detection": [[127, 179], ["pred_all.keys", "gt_all.keys", "multiprocessing.Pool", "multiprocessing.Pool.map", "multiprocessing.Pool.close", "enumerate", "gt.keys", "[].append", "[].append", "gt.keys"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.mock.MockDatasetConfig.keys", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.mock.MockDatasetConfig.keys", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.mock.MockDatasetConfig.keys", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.mock.MockDatasetConfig.keys"], ["", "def", "eval_detection", "(", "pred_all", ",", "gt_all", ",", "ovthresh", "=", "0.25", ",", "processes", "=", "4", ")", ":", "\n", "    ", "\"\"\" Generic functions to compute precision/recall for object detection\n        for multiple classes.\n        Input:\n            pred_all: map of {img_id: [BoxData]}\n            gt_all: map of {img_id: [BoxData]}\n            ovthresh: scalar, iou threshold\n            processes: number of threads to use\n        Output:\n            rec: {classname: rec}\n            prec: {classname: prec_all}\n            ap: {classname: scalar}\n    \"\"\"", "\n", "pred", "=", "{", "}", "# map {classname: pred}", "\n", "gt", "=", "{", "}", "# map {classname: gt}", "\n", "for", "img_id", "in", "pred_all", ".", "keys", "(", ")", ":", "\n", "        ", "for", "box", "in", "pred_all", "[", "img_id", "]", ":", "\n", "            ", "if", "box", ".", "classname", "not", "in", "pred", ":", "\n", "                ", "pred", "[", "box", ".", "classname", "]", "=", "{", "}", "\n", "", "if", "img_id", "not", "in", "pred", "[", "box", ".", "classname", "]", ":", "\n", "                ", "pred", "[", "box", ".", "classname", "]", "[", "img_id", "]", "=", "[", "]", "\n", "", "if", "box", ".", "classname", "not", "in", "gt", ":", "\n", "                ", "gt", "[", "box", ".", "classname", "]", "=", "{", "}", "\n", "", "if", "img_id", "not", "in", "gt", "[", "box", ".", "classname", "]", ":", "\n", "                ", "gt", "[", "box", ".", "classname", "]", "[", "img_id", "]", "=", "[", "]", "\n", "", "pred", "[", "box", ".", "classname", "]", "[", "img_id", "]", ".", "append", "(", "(", "box", ".", "corners3d", ",", "box", ".", "score", ")", ")", "\n", "", "", "for", "img_id", "in", "gt_all", ".", "keys", "(", ")", ":", "\n", "        ", "for", "box", "in", "gt_all", "[", "img_id", "]", ":", "\n", "            ", "if", "box", ".", "classname", "not", "in", "gt", ":", "\n", "                ", "gt", "[", "box", ".", "classname", "]", "=", "{", "}", "\n", "", "if", "img_id", "not", "in", "gt", "[", "box", ".", "classname", "]", ":", "\n", "                ", "gt", "[", "box", ".", "classname", "]", "[", "img_id", "]", "=", "[", "]", "\n", "", "gt", "[", "box", ".", "classname", "]", "[", "img_id", "]", ".", "append", "(", "box", ".", "corners3d", ")", "\n", "\n", "", "", "rec", "=", "{", "}", "\n", "prec", "=", "{", "}", "\n", "ap", "=", "{", "}", "\n", "p", "=", "Pool", "(", "processes", "=", "processes", ")", "\n", "ret_values", "=", "p", ".", "map", "(", "\n", "eval_det_cls_wrapper", ",", "\n", "[", "(", "pred", "[", "classname", "]", ",", "gt", "[", "classname", "]", ",", "ovthresh", ")", "for", "classname", "in", "gt", ".", "keys", "(", ")", "if", "classname", "in", "pred", "]", ",", "\n", ")", "\n", "p", ".", "close", "(", ")", "\n", "for", "i", ",", "classname", "in", "enumerate", "(", "gt", ".", "keys", "(", ")", ")", ":", "\n", "        ", "if", "classname", "in", "pred", ":", "\n", "            ", "rec", "[", "classname", "]", ",", "prec", "[", "classname", "]", ",", "ap", "[", "classname", "]", "=", "ret_values", "[", "i", "]", "\n", "", "else", ":", "\n", "            ", "rec", "[", "classname", "]", "=", "0", "\n", "prec", "[", "classname", "]", "=", "0", "\n", "ap", "[", "classname", "]", "=", "0", "\n", "\n", "", "", "return", "rec", ",", "prec", ",", "ap", "\n", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.spatial_ops.neighbour_finder.BaseNeighbourFinder.__call__": [[16, 18], ["neighbour_finder.BaseNeighbourFinder.find_neighbours"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.spatial_ops.neighbour_finder.DenseRadiusNeighbourFinder.find_neighbours"], ["    ", "def", "__call__", "(", "self", ",", "x", ",", "y", ",", "batch_x", ",", "batch_y", ")", ":", "\n", "        ", "return", "self", ".", "find_neighbours", "(", "x", ",", "y", ",", "batch_x", ",", "batch_y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.spatial_ops.neighbour_finder.BaseNeighbourFinder.find_neighbours": [[19, 22], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "find_neighbours", "(", "self", ",", "x", ",", "y", ",", "batch_x", ",", "batch_y", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.spatial_ops.neighbour_finder.BaseNeighbourFinder.__repr__": [[23, 25], ["str", "str"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "str", "(", "self", ".", "__class__", ".", "__name__", ")", "+", "\" \"", "+", "str", "(", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.spatial_ops.neighbour_finder.RadiusNeighbourFinder.__init__": [[28, 32], ["conv_type.lower"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "radius", ":", "float", ",", "max_num_neighbors", ":", "int", "=", "64", ",", "conv_type", "=", "ConvolutionFormat", ".", "MESSAGE_PASSING", ".", "value", ")", ":", "\n", "        ", "self", ".", "_radius", "=", "radius", "\n", "self", ".", "_max_num_neighbors", "=", "max_num_neighbors", "\n", "self", ".", "_conv_type", "=", "conv_type", ".", "lower", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.spatial_ops.neighbour_finder.RadiusNeighbourFinder.find_neighbours": [[33, 42], ["torch_geometric.nn.radius", "torch_points_kernels.ball_query"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.radius"], ["", "def", "find_neighbours", "(", "self", ",", "x", ",", "y", ",", "batch_x", "=", "None", ",", "batch_y", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "_conv_type", "==", "ConvolutionFormat", ".", "MESSAGE_PASSING", ".", "value", ":", "\n", "            ", "return", "radius", "(", "x", ",", "y", ",", "self", ".", "_radius", ",", "batch_x", ",", "batch_y", ",", "max_num_neighbors", "=", "self", ".", "_max_num_neighbors", ")", "\n", "", "elif", "self", ".", "_conv_type", "==", "ConvolutionFormat", ".", "DENSE", ".", "value", "or", "ConvolutionFormat", ".", "PARTIAL_DENSE", ".", "value", ":", "\n", "            ", "return", "tp", ".", "ball_query", "(", "\n", "self", ".", "_radius", ",", "self", ".", "_max_num_neighbors", ",", "x", ",", "y", ",", "mode", "=", "self", ".", "_conv_type", ",", "batch_x", "=", "batch_x", ",", "batch_y", "=", "batch_y", "\n", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.spatial_ops.neighbour_finder.KNNNeighbourFinder.__init__": [[45, 47], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "k", ")", ":", "\n", "        ", "self", ".", "k", "=", "k", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.spatial_ops.neighbour_finder.KNNNeighbourFinder.find_neighbours": [[48, 50], ["torch_geometric.nn.knn"], "methods", ["None"], ["", "def", "find_neighbours", "(", "self", ",", "x", ",", "y", ",", "batch_x", ",", "batch_y", ")", ":", "\n", "        ", "return", "knn", "(", "x", ",", "y", ",", "self", ".", "k", ",", "batch_x", ",", "batch_y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.spatial_ops.neighbour_finder.FAISSGPUKNNNeighbourFinder.__init__": [[53, 82], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "k", ",", "ncells", "=", "None", ",", "nprobes", "=", "10", ")", ":", "\n", "        ", "\"\"\"\n        KNN on GPU with Facebook AI Similarity Search.\n\n        Allows fast computation of KNN based on a voronoi-based division\n        of search space and using GPU. Can be faster than sklearn under\n        certain conditions:\n            - k < 1024\n            - nprobes < 1024\n            - ncells tuned to training set size, typically with\n            sqrt-like rule\n\n        ncells controls the number of Voronoi cells created to divide\n        the search space. These are built with k-means on the training\n        set and act as the leaves of a kdtree. A heuristic was built to\n        meet needs of two regimes, one for 'small' datasets of <10**7\n        points and the other for 'larger' datasets of >10**7 points.\n        ncells may not be optimal for any dataset, this does not affect\n        accuracy much, but does affect speed.\n\n        nprobes controls the number of cells visited during search. The\n        larger, the slower but also the more accurate the neighbors.\n\n        setting nprobes=1 is faster but causes erroneous neighborhoods\n        at Voronoi cells boundaries.\n        \"\"\"", "\n", "self", ".", "k", "=", "k", "\n", "self", ".", "ncells", "=", "ncells", "\n", "self", ".", "nprobes", "=", "nprobes", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.spatial_ops.neighbour_finder.FAISSGPUKNNNeighbourFinder.find_neighbours": [[83, 129], ["x.cpu().numpy", "y.cpu().numpy", "faiss.StandardGpuResources", "min", "torch.cuda.empty_cache", "faiss.IndexFlatL2", "faiss.IndexIVFFlat", "faiss.index_cpu_to_gpu", "faiss.index_cpu_to_gpu.train", "faiss.index_cpu_to_gpu.add", "faiss.index_cpu_to_gpu.setNumProbes", "torch.LongTensor().to", "NotImplementedError", "x.view", "y.view", "x.contiguous", "y.contiguous", "int", "x.dim", "y.dim", "x.cpu", "y.cpu", "numpy.sqrt", "numpy.sqrt", "torch.LongTensor", "numpy.exp", "faiss.index_cpu_to_gpu.search"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.modalities.image.CityscapesResNet18TruncatedLayer4.train", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.meters.APMeter.add", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.csr.CSRData.cpu", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.csr.CSRData.cpu"], ["", "def", "find_neighbours", "(", "self", ",", "x", ",", "y", ",", "batch_x", ",", "batch_y", ")", ":", "\n", "        ", "if", "batch_x", "is", "not", "None", "or", "batch_y", "is", "not", "None", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\n", "\"FAISSGPUKNNNeighbourFinder does not support batches yet\"", ")", "\n", "\n", "", "x", "=", "x", ".", "view", "(", "-", "1", ",", "1", ")", "if", "x", ".", "dim", "(", ")", "==", "1", "else", "x", "\n", "y", "=", "y", ".", "view", "(", "-", "1", ",", "1", ")", "if", "y", ".", "dim", "(", ")", "==", "1", "else", "y", "\n", "x", ",", "y", "=", "x", ".", "contiguous", "(", ")", ",", "y", ".", "contiguous", "(", ")", "\n", "\n", "# FAISS-GPU consumes numpy arrays", "\n", "x_np", "=", "x", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "y_np", "=", "y", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "# Initialization", "\n", "n_fit", "=", "x_np", ".", "shape", "[", "0", "]", "\n", "d", "=", "x_np", ".", "shape", "[", "1", "]", "\n", "nprobe", "=", "self", ".", "nprobes", "\n", "gpu", "=", "faiss", ".", "StandardGpuResources", "(", ")", "\n", "\n", "# Heuristics to prevent k from being too large", "\n", "k_max", "=", "1024", "\n", "k", "=", "min", "(", "self", ".", "k", ",", "n_fit", ",", "k_max", ")", "\n", "\n", "# Heuristic to parameterize the number of cells for FAISS index,", "\n", "# if not provided", "\n", "ncells", "=", "self", ".", "ncells", "\n", "if", "ncells", "is", "None", ":", "\n", "            ", "f1", "=", "3.5", "*", "np", ".", "sqrt", "(", "n_fit", ")", "\n", "f2", "=", "1.6", "*", "np", ".", "sqrt", "(", "n_fit", ")", "\n", "if", "n_fit", ">", "2", "*", "10", "**", "6", ":", "\n", "                ", "p", "=", "1", "/", "(", "1", "+", "np", ".", "exp", "(", "2", "*", "10", "**", "6", "-", "n_fit", ")", ")", "\n", "", "else", ":", "\n", "                ", "p", "=", "0", "\n", "", "ncells", "=", "int", "(", "p", "*", "f1", "+", "(", "1", "-", "p", ")", "*", "f2", ")", "\n", "\n", "# Building a GPU IVFFlat index + Flat quantizer", "\n", "", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "quantizer", "=", "faiss", ".", "IndexFlatL2", "(", "d", ")", "# the quantizer index", "\n", "index", "=", "faiss", ".", "IndexIVFFlat", "(", "quantizer", ",", "d", ",", "ncells", ",", "faiss", ".", "METRIC_L2", ")", "# the main index", "\n", "gpu_index_flat", "=", "faiss", ".", "index_cpu_to_gpu", "(", "gpu", ",", "0", ",", "index", ")", "# pass index it to GPU", "\n", "gpu_index_flat", ".", "train", "(", "x_np", ")", "# fit the cells to the training set distribution", "\n", "gpu_index_flat", ".", "add", "(", "x_np", ")", "\n", "\n", "# Querying the K-NN", "\n", "gpu_index_flat", ".", "setNumProbes", "(", "nprobe", ")", "\n", "return", "torch", ".", "LongTensor", "(", "gpu_index_flat", ".", "search", "(", "y_np", ",", "k", ")", "[", "1", "]", ")", ".", "to", "(", "x", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.spatial_ops.neighbour_finder.DilatedKNNNeighbourFinder.__init__": [[132, 136], ["neighbour_finder.KNNNeighbourFinder"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "k", ",", "dilation", ")", ":", "\n", "        ", "self", ".", "k", "=", "k", "\n", "self", ".", "dilation", "=", "dilation", "\n", "self", ".", "initialFinder", "=", "KNNNeighbourFinder", "(", "k", "*", "dilation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.spatial_ops.neighbour_finder.DilatedKNNNeighbourFinder.find_neighbours": [[137, 150], ["neighbour_finder.DilatedKNNNeighbourFinder.initialFinder.find_neighbours", "torch.randint", "torch.arange", "len", "len", "torch.arange.view"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.spatial_ops.neighbour_finder.DenseRadiusNeighbourFinder.find_neighbours", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "def", "find_neighbours", "(", "self", ",", "x", ",", "y", ",", "batch_x", ",", "batch_y", ")", ":", "\n", "# find the self.k * self.dilation closest neighbours in x for each y", "\n", "        ", "row", ",", "col", "=", "self", ".", "initialFinder", ".", "find_neighbours", "(", "x", ",", "y", ",", "batch_x", ",", "batch_y", ")", "\n", "\n", "# for each point in y, randomly select k of its neighbours", "\n", "index", "=", "torch", ".", "randint", "(", "self", ".", "k", "*", "self", ".", "dilation", ",", "(", "len", "(", "y", ")", ",", "self", ".", "k", ")", ",", "device", "=", "row", ".", "device", ",", "dtype", "=", "torch", ".", "long", ",", ")", "\n", "\n", "arange", "=", "torch", ".", "arange", "(", "len", "(", "y", ")", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "row", ".", "device", ")", "\n", "arange", "=", "arange", "*", "(", "self", ".", "k", "*", "self", ".", "dilation", ")", "\n", "index", "=", "(", "index", "+", "arange", ".", "view", "(", "-", "1", ",", "1", ")", ")", ".", "view", "(", "-", "1", ")", "\n", "row", ",", "col", "=", "row", "[", "index", "]", ",", "col", "[", "index", "]", "\n", "\n", "return", "row", ",", "col", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.spatial_ops.neighbour_finder.BaseMSNeighbourFinder.__call__": [[153, 155], ["neighbour_finder.BaseMSNeighbourFinder.find_neighbours"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.spatial_ops.neighbour_finder.DenseRadiusNeighbourFinder.find_neighbours"], ["    ", "def", "__call__", "(", "self", ",", "x", ",", "y", ",", "batch_x", "=", "None", ",", "batch_y", "=", "None", ",", "scale_idx", "=", "0", ")", ":", "\n", "        ", "return", "self", ".", "find_neighbours", "(", "x", ",", "y", ",", "batch_x", "=", "batch_x", ",", "batch_y", "=", "batch_y", ",", "scale_idx", "=", "scale_idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.spatial_ops.neighbour_finder.BaseMSNeighbourFinder.find_neighbours": [[156, 159], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "find_neighbours", "(", "self", ",", "x", ",", "y", ",", "batch_x", "=", "None", ",", "batch_y", "=", "None", ",", "scale_idx", "=", "0", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.spatial_ops.neighbour_finder.BaseMSNeighbourFinder.num_scales": [[160, 164], ["None"], "methods", ["None"], ["", "@", "property", "\n", "@", "abstractmethod", "\n", "def", "num_scales", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.spatial_ops.neighbour_finder.BaseMSNeighbourFinder.dist_meters": [[165, 168], ["getattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "dist_meters", "(", "self", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ",", "\"_dist_meters\"", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.spatial_ops.neighbour_finder.MultiscaleRadiusNeighbourFinder.__init__": [[183, 217], ["torch_points3d.utils.config.is_list", "torch_points3d.utils.config.is_list", "typing.cast", "typing.cast", "torch_points3d.utils.config.is_list", "typing.cast", "typing.cast", "typing.cast", "typing.cast", "typing.cast", "typing.cast", "isinstance", "torch_points3d.utils.debugging_vars.DistributionNeighbour", "isinstance", "torch_points3d.utils.config.is_list", "torch_points3d.utils.config.is_list", "len", "len", "ValueError", "range", "range", "len", "len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.config.is_list", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.config.is_list", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.config.is_list", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.config.is_list", "home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.config.is_list", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["def", "__init__", "(", "\n", "self", ",", "radius", ":", "Union", "[", "float", ",", "List", "[", "float", "]", "]", ",", "max_num_neighbors", ":", "Union", "[", "int", ",", "List", "[", "int", "]", "]", "=", "64", ",", "\n", ")", ":", "\n", "        ", "if", "DEBUGGING_VARS", "[", "\"FIND_NEIGHBOUR_DIST\"", "]", ":", "\n", "            ", "if", "not", "isinstance", "(", "radius", ",", "list", ")", ":", "\n", "                ", "radius", "=", "[", "radius", "]", "\n", "", "self", ".", "_dist_meters", "=", "[", "DistributionNeighbour", "(", "r", ")", "for", "r", "in", "radius", "]", "\n", "if", "not", "isinstance", "(", "max_num_neighbors", ",", "list", ")", ":", "\n", "                ", "max_num_neighbors", "=", "[", "max_num_neighbors", "]", "\n", "", "max_num_neighbors", "=", "[", "256", "for", "_", "in", "max_num_neighbors", "]", "\n", "\n", "", "if", "not", "is_list", "(", "max_num_neighbors", ")", "and", "is_list", "(", "radius", ")", ":", "\n", "            ", "self", ".", "_radius", "=", "cast", "(", "list", ",", "radius", ")", "\n", "max_num_neighbors", "=", "cast", "(", "int", ",", "max_num_neighbors", ")", "\n", "self", ".", "_max_num_neighbors", "=", "[", "max_num_neighbors", "for", "i", "in", "range", "(", "len", "(", "self", ".", "_radius", ")", ")", "]", "\n", "return", "\n", "\n", "", "if", "not", "is_list", "(", "radius", ")", "and", "is_list", "(", "max_num_neighbors", ")", ":", "\n", "            ", "self", ".", "_max_num_neighbors", "=", "cast", "(", "list", ",", "max_num_neighbors", ")", "\n", "radius", "=", "cast", "(", "int", ",", "radius", ")", "\n", "self", ".", "_radius", "=", "[", "radius", "for", "i", "in", "range", "(", "len", "(", "self", ".", "_max_num_neighbors", ")", ")", "]", "\n", "return", "\n", "\n", "", "if", "is_list", "(", "max_num_neighbors", ")", ":", "\n", "            ", "max_num_neighbors", "=", "cast", "(", "list", ",", "max_num_neighbors", ")", "\n", "radius", "=", "cast", "(", "list", ",", "radius", ")", "\n", "if", "len", "(", "max_num_neighbors", ")", "!=", "len", "(", "radius", ")", ":", "\n", "                ", "raise", "ValueError", "(", "\"Both lists max_num_neighbors and radius should be of the same length\"", ")", "\n", "", "self", ".", "_max_num_neighbors", "=", "max_num_neighbors", "\n", "self", ".", "_radius", "=", "radius", "\n", "return", "\n", "\n", "", "self", ".", "_max_num_neighbors", "=", "[", "cast", "(", "int", ",", "max_num_neighbors", ")", "]", "\n", "self", ".", "_radius", "=", "[", "cast", "(", "int", ",", "radius", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.spatial_ops.neighbour_finder.MultiscaleRadiusNeighbourFinder.find_neighbours": [[218, 226], ["torch_geometric.nn.radius", "ValueError"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.radius"], ["", "def", "find_neighbours", "(", "self", ",", "x", ",", "y", ",", "batch_x", "=", "None", ",", "batch_y", "=", "None", ",", "scale_idx", "=", "0", ")", ":", "\n", "        ", "if", "scale_idx", ">=", "self", ".", "num_scales", ":", "\n", "            ", "raise", "ValueError", "(", "\"Scale %i is out of bounds %i\"", "%", "(", "scale_idx", ",", "self", ".", "num_scales", ")", ")", "\n", "\n", "", "radius_idx", "=", "radius", "(", "\n", "x", ",", "y", ",", "self", ".", "_radius", "[", "scale_idx", "]", ",", "batch_x", ",", "batch_y", ",", "max_num_neighbors", "=", "self", ".", "_max_num_neighbors", "[", "scale_idx", "]", "\n", ")", "\n", "return", "radius_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.spatial_ops.neighbour_finder.MultiscaleRadiusNeighbourFinder.num_scales": [[227, 230], ["len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "@", "property", "\n", "def", "num_scales", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_radius", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.spatial_ops.neighbour_finder.MultiscaleRadiusNeighbourFinder.__call__": [[231, 235], ["neighbour_finder.MultiscaleRadiusNeighbourFinder.find_neighbours"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.spatial_ops.neighbour_finder.DenseRadiusNeighbourFinder.find_neighbours"], ["", "def", "__call__", "(", "self", ",", "x", ",", "y", ",", "batch_x", "=", "None", ",", "batch_y", "=", "None", ",", "scale_idx", "=", "0", ")", ":", "\n", "        ", "\"\"\" Sparse interface of the neighboorhood finder\n        \"\"\"", "\n", "return", "self", ".", "find_neighbours", "(", "x", ",", "y", ",", "batch_x", ",", "batch_y", ",", "scale_idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.spatial_ops.neighbour_finder.DenseRadiusNeighbourFinder.find_neighbours": [[241, 255], ["ValueError", "torch_points_kernels.ball_query", "range", "neighbour_finder.DenseRadiusNeighbourFinder._dist_meters[].add_valid_neighbours", "start.view().repeat", "start.view"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.debugging_vars.DistributionNeighbour.add_valid_neighbours"], ["def", "find_neighbours", "(", "self", ",", "x", ",", "y", ",", "scale_idx", "=", "0", ")", ":", "\n", "        ", "if", "scale_idx", ">=", "self", ".", "num_scales", ":", "\n", "            ", "raise", "ValueError", "(", "\"Scale %i is out of bounds %i\"", "%", "(", "scale_idx", ",", "self", ".", "num_scales", ")", ")", "\n", "", "num_neighbours", "=", "self", ".", "_max_num_neighbors", "[", "scale_idx", "]", "\n", "neighbours", "=", "tp", ".", "ball_query", "(", "self", ".", "_radius", "[", "scale_idx", "]", ",", "num_neighbours", ",", "x", ",", "y", ")", "[", "0", "]", "\n", "\n", "if", "DEBUGGING_VARS", "[", "\"FIND_NEIGHBOUR_DIST\"", "]", ":", "\n", "            ", "for", "i", "in", "range", "(", "neighbours", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "start", "=", "neighbours", "[", "i", ",", ":", ",", "0", "]", "\n", "valid_neighbours", "=", "(", "neighbours", "[", "i", ",", ":", ",", "1", ":", "]", "!=", "start", ".", "view", "(", "(", "-", "1", ",", "1", ")", ")", ".", "repeat", "(", "1", ",", "num_neighbours", "-", "1", ")", ")", ".", "sum", "(", "\n", "1", "\n", ")", "+", "1", "\n", "self", ".", "_dist_meters", "[", "scale_idx", "]", ".", "add_valid_neighbours", "(", "valid_neighbours", ")", "\n", "", "", "return", "neighbours", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.spatial_ops.neighbour_finder.DenseRadiusNeighbourFinder.__call__": [[256, 260], ["neighbour_finder.DenseRadiusNeighbourFinder.find_neighbours"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.spatial_ops.neighbour_finder.DenseRadiusNeighbourFinder.find_neighbours"], ["", "def", "__call__", "(", "self", ",", "x", ",", "y", ",", "scale_idx", "=", "0", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\" Dense interface of the neighboorhood finder\n        \"\"\"", "\n", "return", "self", ".", "find_neighbours", "(", "x", ",", "y", ",", "scale_idx", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.spatial_ops.interpolate.KNNInterpolate.__init__": [[8, 10], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "k", ")", ":", "\n", "        ", "self", ".", "k", "=", "k", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.spatial_ops.interpolate.KNNInterpolate.precompute": [[11, 33], ["hasattr", "hasattr", "torch_scatter.scatter_add", "torch_geometric.data.Data", "torch.zeros", "torch.zeros", "torch.no_grad", "torch_geometric.nn.knn", "torch.clamp", "pos_y.size"], "methods", ["None"], ["", "def", "precompute", "(", "self", ",", "query", ",", "support", ")", ":", "\n", "        ", "\"\"\" Precomputes a data structure that can be used in the transform itself to speed things up\n        \"\"\"", "\n", "pos_x", ",", "pos_y", "=", "query", ".", "pos", ",", "support", ".", "pos", "\n", "if", "hasattr", "(", "support", ",", "\"batch\"", ")", ":", "\n", "            ", "batch_y", "=", "support", ".", "batch", "\n", "", "else", ":", "\n", "            ", "batch_y", "=", "torch", ".", "zeros", "(", "(", "support", ".", "num_nodes", ",", ")", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "", "if", "hasattr", "(", "query", ",", "\"batch\"", ")", ":", "\n", "            ", "batch_x", "=", "query", ".", "batch", "\n", "", "else", ":", "\n", "            ", "batch_x", "=", "torch", ".", "zeros", "(", "(", "query", ".", "num_nodes", ",", ")", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "assign_index", "=", "knn", "(", "pos_x", ",", "pos_y", ",", "self", ".", "k", ",", "batch_x", "=", "batch_x", ",", "batch_y", "=", "batch_y", ")", "\n", "y_idx", ",", "x_idx", "=", "assign_index", "\n", "diff", "=", "pos_x", "[", "x_idx", "]", "-", "pos_y", "[", "y_idx", "]", "\n", "squared_distance", "=", "(", "diff", "*", "diff", ")", ".", "sum", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "weights", "=", "1.0", "/", "torch", ".", "clamp", "(", "squared_distance", ",", "min", "=", "1e-16", ")", "\n", "", "normalisation", "=", "scatter_add", "(", "weights", ",", "y_idx", ",", "dim", "=", "0", ",", "dim_size", "=", "pos_y", ".", "size", "(", "0", ")", ")", "\n", "\n", "return", "Data", "(", "num_nodes", "=", "support", ".", "num_nodes", ",", "x_idx", "=", "x_idx", ",", "y_idx", "=", "y_idx", ",", "weights", "=", "weights", ",", "normalisation", "=", "normalisation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.spatial_ops.interpolate.KNNInterpolate.__call__": [[34, 71], ["hasattr", "hasattr", "torch_geometric.nn.knn_interpolate", "support.pos.size", "torch_scatter.scatter_add", "torch.zeros", "torch.zeros", "ValueError"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "query", ",", "support", ",", "precomputed", ":", "Data", "=", "None", ")", ":", "\n", "        ", "\"\"\" Computes a new set of features going from the query resolution position to the support\n        resolution position\n        Args:\n            - query: data structure that holds the low res data (position + features)\n            - support: data structure that holds the position to which we will interpolate\n        Returns:\n            - torch.tensor: interpolated features\n        \"\"\"", "\n", "if", "precomputed", ":", "\n", "            ", "num_points", "=", "support", ".", "pos", ".", "size", "(", "0", ")", "\n", "if", "num_points", "!=", "precomputed", ".", "num_nodes", ":", "\n", "                ", "raise", "ValueError", "(", "\"Precomputed indices do not match with the data given to the transform\"", ")", "\n", "\n", "", "x", "=", "query", ".", "x", "\n", "x_idx", ",", "y_idx", ",", "weights", ",", "normalisation", "=", "(", "\n", "precomputed", ".", "x_idx", ",", "\n", "precomputed", ".", "y_idx", ",", "\n", "precomputed", ".", "weights", ",", "\n", "precomputed", ".", "normalisation", ",", "\n", ")", "\n", "y", "=", "scatter_add", "(", "x", "[", "x_idx", "]", "*", "weights", ",", "y_idx", ",", "dim", "=", "0", ",", "dim_size", "=", "num_points", ")", "\n", "y", "=", "y", "/", "normalisation", "\n", "return", "y", "\n", "\n", "", "x", ",", "pos", "=", "query", ".", "x", ",", "query", ".", "pos", "\n", "pos_support", "=", "support", ".", "pos", "\n", "if", "hasattr", "(", "support", ",", "\"batch\"", ")", ":", "\n", "            ", "batch_support", "=", "support", ".", "batch", "\n", "", "else", ":", "\n", "            ", "batch_support", "=", "torch", ".", "zeros", "(", "(", "support", ".", "num_nodes", ",", ")", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "", "if", "hasattr", "(", "query", ",", "\"batch\"", ")", ":", "\n", "            ", "batch", "=", "query", ".", "batch", "\n", "", "else", ":", "\n", "            ", "batch", "=", "torch", ".", "zeros", "(", "(", "query", ".", "num_nodes", ",", ")", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "\n", "", "return", "knn_interpolate", "(", "x", ",", "pos", ",", "pos_support", ",", "batch", ",", "batch_support", ",", "k", "=", "self", ".", "k", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.spatial_ops.sampling.BaseSampler.__init__": [[18, 34], ["torch.empty().long", "ValueError", "torch.empty", "Exception"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "ratio", "=", "None", ",", "num_to_sample", "=", "None", ",", "subsampling_param", "=", "None", ")", ":", "\n", "        ", "if", "num_to_sample", "is", "not", "None", ":", "\n", "            ", "if", "(", "ratio", "is", "not", "None", ")", "or", "(", "subsampling_param", "is", "not", "None", ")", ":", "\n", "                ", "raise", "ValueError", "(", "\"Can only specify ratio or num_to_sample or subsampling_param, not several !\"", ")", "\n", "", "self", ".", "_num_to_sample", "=", "num_to_sample", "\n", "\n", "", "elif", "ratio", "is", "not", "None", ":", "\n", "            ", "self", ".", "_ratio", "=", "ratio", "\n", "\n", "", "elif", "subsampling_param", "is", "not", "None", ":", "\n", "            ", "self", ".", "_subsampling_param", "=", "subsampling_param", "\n", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'At least [\"ratio, num_to_sample, subsampling_param\"] should be defined'", ")", "\n", "\n", "", "self", ".", "last_idx", "=", "torch", ".", "empty", "(", "(", "0", ",", ")", ")", ".", "long", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.spatial_ops.sampling.BaseSampler.__call__": [[35, 38], ["sampling.BaseSampler.sample"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.spatial_ops.sampling.DenseRandomSampler.sample"], ["", "def", "__call__", "(", "self", ",", "pos", ",", "x", "=", "None", ",", "batch", "=", "None", ")", ":", "\n", "        ", "self", ".", "last_idx", "=", "self", ".", "sample", "(", "pos", ",", "batch", "=", "batch", ",", "x", "=", "x", ")", "\n", "return", "self", ".", "last_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.spatial_ops.sampling.BaseSampler._get_num_to_sample": [[39, 44], ["hasattr", "math.floor"], "methods", ["None"], ["", "def", "_get_num_to_sample", "(", "self", ",", "batch_size", ")", "->", "int", ":", "\n", "        ", "if", "hasattr", "(", "self", ",", "\"_num_to_sample\"", ")", ":", "\n", "            ", "return", "self", ".", "_num_to_sample", "\n", "", "else", ":", "\n", "            ", "return", "math", ".", "floor", "(", "batch_size", "*", "self", ".", "_ratio", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.spatial_ops.sampling.BaseSampler._get_ratio_to_sample": [[45, 50], ["hasattr", "float"], "methods", ["None"], ["", "", "def", "_get_ratio_to_sample", "(", "self", ",", "batch_size", ")", "->", "float", ":", "\n", "        ", "if", "hasattr", "(", "self", ",", "\"_ratio\"", ")", ":", "\n", "            ", "return", "self", ".", "_ratio", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "_num_to_sample", "/", "float", "(", "batch_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.spatial_ops.sampling.BaseSampler.sample": [[51, 54], ["None"], "methods", ["None"], ["", "", "@", "abstractmethod", "\n", "def", "sample", "(", "self", ",", "pos", ",", "x", "=", "None", ",", "batch", "=", "None", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.spatial_ops.sampling.FPSSampler.sample": [[61, 67], ["fps", "len", "ValueError", "sampling.FPSSampler._get_ratio_to_sample"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.spatial_ops.sampling.BaseSampler._get_ratio_to_sample"], ["def", "sample", "(", "self", ",", "pos", ",", "batch", ",", "**", "kwargs", ")", ":", "\n", "        ", "from", "torch_geometric", ".", "nn", "import", "fps", "\n", "\n", "if", "len", "(", "pos", ".", "shape", ")", "!=", "2", ":", "\n", "            ", "raise", "ValueError", "(", "\" This class is for sparse data and expects the pos tensor to be of dimension 2\"", ")", "\n", "", "return", "fps", "(", "pos", ",", "batch", ",", "ratio", "=", "self", ".", "_get_ratio_to_sample", "(", "pos", ".", "shape", "[", "0", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.spatial_ops.sampling.GridSampler.sample": [[74, 85], ["torch_geometric.nn.voxel_grid", "torch_geometric.nn.pool.consecutive.consecutive_cluster", "torch_geometric.nn.pool.pool.pool_batch", "len", "ValueError", "torch_geometric.nn.pool.pool.pool_pos", "torch_geometric.nn.pool.pool.pool_pos", "torch_geometric.nn.pool.pool.pool_pos"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["def", "sample", "(", "self", ",", "pos", "=", "None", ",", "x", "=", "None", ",", "batch", "=", "None", ")", ":", "\n", "        ", "if", "len", "(", "pos", ".", "shape", ")", "!=", "2", ":", "\n", "            ", "raise", "ValueError", "(", "\"This class is for sparse data and expects the pos tensor to be of dimension 2\"", ")", "\n", "\n", "", "pool", "=", "voxel_grid", "(", "pos", ",", "batch", ",", "self", ".", "_subsampling_param", ")", "\n", "pool", ",", "perm", "=", "consecutive_cluster", "(", "pool", ")", "\n", "batch", "=", "pool_batch", "(", "perm", ",", "batch", ")", "\n", "if", "x", "is", "not", "None", ":", "\n", "            ", "return", "pool_pos", "(", "pool", ",", "x", ")", ",", "pool_pos", "(", "pool", ",", "pos", ")", ",", "batch", "\n", "", "else", ":", "\n", "            ", "return", "None", ",", "pool_pos", "(", "pool", ",", "pos", ")", ",", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.spatial_ops.sampling.DenseFPSSampler.sample": [[92, 104], ["torch_points_kernels.furthest_point_sample", "len", "ValueError", "sampling.DenseFPSSampler._get_num_to_sample"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.spatial_ops.sampling.BaseSampler._get_num_to_sample"], ["def", "sample", "(", "self", ",", "pos", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\" Sample pos\n\n        Arguments:\n            pos -- [B, N, 3]\n\n        Returns:\n            indexes -- [B, num_sample]\n        \"\"\"", "\n", "if", "len", "(", "pos", ".", "shape", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "\" This class is for dense data and expects the pos tensor to be of dimension 2\"", ")", "\n", "", "return", "tp", ".", "furthest_point_sample", "(", "pos", ",", "self", ".", "_get_num_to_sample", "(", "pos", ".", "shape", "[", "1", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.spatial_ops.sampling.RandomSampler.sample": [[111, 116], ["torch.randint", "len", "ValueError", "sampling.RandomSampler._get_num_to_sample"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.spatial_ops.sampling.BaseSampler._get_num_to_sample"], ["def", "sample", "(", "self", ",", "pos", ",", "batch", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "len", "(", "pos", ".", "shape", ")", "!=", "2", ":", "\n", "            ", "raise", "ValueError", "(", "\" This class is for sparse data and expects the pos tensor to be of dimension 2\"", ")", "\n", "", "idx", "=", "torch", ".", "randint", "(", "0", ",", "pos", ".", "shape", "[", "0", "]", ",", "(", "self", ".", "_get_num_to_sample", "(", "pos", ".", "shape", "[", "0", "]", ")", ",", ")", ")", "\n", "return", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.spatial_ops.sampling.DenseRandomSampler.sample": [[125, 130], ["torch.randint", "len", "ValueError", "sampling.DenseRandomSampler._get_num_to_sample"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.spatial_ops.sampling.BaseSampler._get_num_to_sample"], ["def", "sample", "(", "self", ",", "pos", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "len", "(", "pos", ".", "shape", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "\" This class is for dense data and expects the pos tensor to be of dimension 2\"", ")", "\n", "", "idx", "=", "torch", ".", "randint", "(", "0", ",", "pos", ".", "shape", "[", "1", "]", ",", "(", "self", ".", "_get_num_to_sample", "(", "pos", ".", "shape", "[", "1", "]", ")", ",", ")", ")", "\n", "return", "idx", "\n", "", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_conv.base_conv.BaseConvolution.__init__": [[7, 11], ["torch_points3d.core.common_modules.base_modules.BaseModule.__init__"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "sampler", ",", "neighbour_finder", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "BaseModule", ".", "__init__", "(", "self", ")", "\n", "self", ".", "sampler", "=", "sampler", "\n", "self", ".", "neighbour_finder", "=", "neighbour_finder", "\n", "", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_conv.dense.BaseDenseConvolutionDown.__init__": [[41, 45], ["torch_points3d.core.base_conv.BaseConvolution.__init__", "kwargs.get", "kwargs.get"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get"], ["\n", "self", ".", "nn", "[", "\"norm\"", "]", "=", "Sequential", "(", "*", "[", "nn", ".", "BatchNorm2d", "(", "f_out", ")", ",", "activation", "]", ")", "\n", "\n", "self", ".", "_f_out", "=", "f_out", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_conv.dense.BaseDenseConvolutionDown.conv": [[46, 59], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "f_out", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_f_out", "\n", "\n", "", "def", "forward", "(", "self", ",", "features", ",", "msg", ")", ":", "\n", "        ", "\"\"\"\n        features  -- [B, C, num_points, nsamples]\n        msg  -- [B, 10, num_points, nsamples]\n\n        The 10 features comes from [distance: 1,\n                                    coord_origin:3,\n                                    coord_target:3,\n                                    delta_origin_target:3]\n        \"\"\"", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_conv.dense.BaseDenseConvolutionDown.forward": [[60, 88], ["dense.BaseDenseConvolutionDown.unsqueeze().repeat().long", "pos.gather", "range", "torch.cat", "torch_geometric.data.Data", "dense.BaseDenseConvolutionDown.sampler", "dense.BaseDenseConvolutionDown.neighbour_finder", "ms_x.append", "setattr", "dense.BaseDenseConvolutionDown.unsqueeze().repeat", "dense.BaseDenseConvolutionDown.conv", "dense.BaseDenseConvolutionDown.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.gathering.gather", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.PPNet.blocks.PPStageBlock.sampler", "home.repos.pwc.inspect_result.drprojects_deepviewagg.PPNet.blocks.PPStageBlock.neighbour_finder", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_conv.message_passing.BaseResnetBlockDown.conv"], ["\n", "# Transform msg", "\n", "msg", "=", "self", ".", "nn", "[", "\"mlp_msg\"", "]", "(", "msg", ")", "\n", "\n", "# If first_layer, augment features_size", "\n", "if", "self", ".", "_first_layer", ":", "\n", "            ", "features", "=", "self", ".", "nn", "[", "\"features_nn\"", "]", "(", "features", ")", "\n", "\n", "", "return", "self", ".", "nn", "[", "\"norm\"", "]", "(", "torch", ".", "mul", "(", "features", ",", "msg", ")", ")", "\n", "\n", "\n", "", "", "class", "SharedRSConv", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "\"\"\"\n    Input shape: (B, C_in, npoint, nsample)\n    Output shape: (B, C_out, npoint)\n    \"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "mapper", ":", "RSConvMapper", ",", "radius", ")", ":", "\n", "        ", "super", "(", "SharedRSConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "_mapper", "=", "mapper", "\n", "self", ".", "_radius", "=", "radius", "\n", "\n", "", "def", "forward", "(", "self", ",", "aggr_features", ",", "centroids", ")", ":", "\n", "        ", "\"\"\"\n        aggr_features  -- [B, 3 + 3 + C, num_points, nsamples]\n        centroids  -- [B, 3, num_points, 1]\n        \"\"\"", "\n", "# Extract information to create message", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_conv.dense.BaseDenseConvolutionUp.__init__": [[94, 98], ["torch_points3d.core.base_conv.BaseConvolution.__init__", "kwargs.get", "kwargs.get"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get"], ["coord_xi", "=", "centroids", ".", "repeat", "(", "1", ",", "1", ",", "1", ",", "nsample", ")", "# (B, 3, npoint, nsample) centroid points", "\n", "\n", "distance", "=", "torch", ".", "norm", "(", "delta_x", ",", "p", "=", "2", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", "# Calculate distance", "\n", "\n", "# Create message by contenating distance, origin / target coords, delta coords", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_conv.dense.BaseDenseConvolutionUp.conv": [[99, 101], ["None"], "methods", ["None"], ["h_xi_xj", "=", "torch", ".", "cat", "(", "(", "distance", ",", "coord_xi", ",", "abs_coord", ",", "delta_x", ")", ",", "dim", "=", "1", ")", "\n", "\n", "return", "self", ".", "_mapper", "(", "features", ",", "h_xi_xj", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_conv.dense.BaseDenseConvolutionUp.forward": [[102, 124], ["dense.BaseDenseConvolutionUp.conv", "dense.BaseDenseConvolutionUp.unsqueeze", "hasattr", "torch_geometric.data.Data", "torch.cat", "dense.BaseDenseConvolutionUp.nn", "dense.BaseDenseConvolutionUp.squeeze"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.base_conv.message_passing.BaseResnetBlockDown.conv", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat"], ["\n", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"{}(radius={})\"", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "_radius", ")", "\n", "\n", "\n", "", "", "class", "RSConvSharedMSGDown", "(", "BaseDenseConvolutionDown", ")", ":", "\n", "    ", "def", "__init__", "(", "\n", "self", ",", "\n", "npoint", "=", "None", ",", "\n", "radii", "=", "None", ",", "\n", "nsample", "=", "None", ",", "\n", "down_conv_nn", "=", "None", ",", "\n", "channel_raising_nn", "=", "None", ",", "\n", "bn", "=", "True", ",", "\n", "use_xyz", "=", "True", ",", "\n", "activation", "=", "nn", ".", "ReLU", "(", ")", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "assert", "len", "(", "radii", ")", "==", "len", "(", "nsample", ")", "\n", "if", "len", "(", "radii", ")", "!=", "len", "(", "down_conv_nn", ")", ":", "\n", "            ", "log", ".", "warn", "(", "\"The down_conv_nn has a different size as radii. Make sure of have SharedRSConv\"", ")", "\n", "", "super", "(", "RSConvSharedMSGDown", ",", "self", ")", ".", "__init__", "(", "\n", "DenseFPSSampler", "(", "num_to_sample", "=", "npoint", ")", ",", "DenseRadiusNeighbourFinder", "(", "radii", ",", "nsample", ")", ",", "**", "kwargs", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_conv.dense.DenseFPModule.__init__": [[127, 131], ["torch.nn.LeakyReLU", "dense.BaseDenseConvolutionUp.__init__", "torch_points3d.core.common_modules.dense_modules.MLP2D"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["self", ".", "use_xyz", "=", "use_xyz", "\n", "self", ".", "npoint", "=", "npoint", "\n", "self", ".", "mlps", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "# https://github.com/Yochengliu/Relation-Shape-CNN/blob/6464eb8bb4efc686adec9da437112ef888e55684/utils/pointnet2_modules.py#L106", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_conv.dense.DenseFPModule.conv": [[132, 145], ["torch_points_kernels.three_nn", "torch.sum", "torch_points_kernels.three_interpolate", "x.expand", "x.size", "pos_skip.size"], "methods", ["None"], ["self", ".", "_mapper", "=", "RSConvMapper", "(", "down_conv_nn", ",", "activation", "=", "activation", ",", "use_xyz", "=", "self", ".", "use_xyz", ")", "\n", "\n", "self", ".", "mlp_out", "=", "Sequential", "(", "\n", "*", "[", "\n", "Conv1d", "(", "channel_raising_nn", "[", "0", "]", ",", "channel_raising_nn", "[", "-", "1", "]", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "channel_raising_nn", "[", "-", "1", "]", ")", ",", "\n", "activation", ",", "\n", "]", "\n", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "radii", ")", ")", ":", "\n", "            ", "self", ".", "mlps", ".", "append", "(", "SharedRSConv", "(", "self", ".", "_mapper", ",", "radii", "[", "i", "]", ")", ")", "\n", "\n", "", "", "def", "_prepare_features", "(", "self", ",", "x", ",", "pos", ",", "new_pos", ",", "idx", ")", ":", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_conv.dense.DenseFPModule.__repr__": [[146, 148], ["None"], "methods", ["None"], ["        ", "new_pos_trans", "=", "pos", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "grouped_pos_absolute", "=", "tp", ".", "grouping_operation", "(", "new_pos_trans", ",", "idx", ")", "# (B, 3, npoint, nsample)", "\n", "centroids", "=", "new_pos", ".", "transpose", "(", "1", ",", "2", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_conv.dense.GlobalDenseBaseModule.__init__": [[151, 157], ["torch.nn.LeakyReLU", "super().__init__", "torch_points3d.core.common_modules.dense_modules.MLP2D", "aggr.lower", "aggr.lower", "Exception"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["if", "x", "is", "not", "None", ":", "\n", "            ", "grouped_features", "=", "tp", ".", "grouping_operation", "(", "x", ",", "idx", ")", "\n", "if", "self", ".", "use_xyz", ":", "\n", "                ", "new_features", "=", "torch", ".", "cat", "(", "\n", "[", "grouped_pos_absolute", ",", "grouped_pos_normalized", ",", "grouped_features", "]", ",", "dim", "=", "1", "\n", ")", "# (B, 3 + 3 + C, npoint, nsample)", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_conv.dense.GlobalDenseBaseModule.nb_params": [[158, 168], ["filter", "sum", "dense.GlobalDenseBaseModule.parameters", "numpy.prod", "p.size"], "methods", ["None"], ["                ", "new_features", "=", "grouped_features", "\n", "", "", "else", ":", "\n", "            ", "assert", "self", ".", "use_xyz", ",", "\"Cannot have not features and not use xyz as a feature!\"", "\n", "new_features", "=", "torch", ".", "cat", "(", "\n", "[", "grouped_pos_absolute", ",", "grouped_pos_normalized", "]", ",", "dim", "=", "1", "\n", ")", "# (B, 3 + 3 npoint, nsample)", "\n", "\n", "", "return", "new_features", ",", "centroids", "\n", "\n", "", "def", "conv", "(", "self", ",", "x", ",", "pos", ",", "new_pos", ",", "radius_idx", ",", "scale_idx", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_conv.dense.GlobalDenseBaseModule.forward": [[169, 185], ["pos.transpose().contiguous", "dense.GlobalDenseBaseModule.nn", "x.squeeze().mean.squeeze().mean.unsqueeze", "torch_geometric.data.Data", "torch.cat().unsqueeze", "pos.transpose", "x.squeeze().mean.squeeze().mean.squeeze().max", "x.squeeze().mean.squeeze().mean.squeeze().mean", "NotImplementedError", "torch.cat", "x.squeeze().mean.squeeze().mean.squeeze", "x.squeeze().mean.squeeze().mean.squeeze"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.lovasz_loss.mean", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat"], ["\n", "assert", "scale_idx", "<", "len", "(", "self", ".", "mlps", ")", "\n", "aggr_features", ",", "centroids", "=", "self", ".", "_prepare_features", "(", "x", ",", "pos", ",", "new_pos", ",", "radius_idx", ")", "\n", "new_features", "=", "self", ".", "mlps", "[", "scale_idx", "]", "(", "aggr_features", ",", "centroids", ")", "# (B, mlp[-1], npoint, nsample)", "\n", "new_features", "=", "F", ".", "max_pool2d", "(", "new_features", ",", "kernel_size", "=", "[", "1", ",", "new_features", ".", "size", "(", "3", ")", "]", ")", "# (B, mlp[-1], npoint, 1)", "\n", "new_features", "=", "self", ".", "mlp_out", "(", "new_features", ".", "squeeze", "(", "-", "1", ")", ")", "# (B, mlp[-1], npoint)", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_conv.dense.GlobalDenseBaseModule.__repr__": [[186, 188], ["None"], "methods", ["None"], ["return", "new_features", "\n", "\n", "", "def", "__repr__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_conv.partial_dense.BasePartialDenseConvolutionDown.__init__": [[39, 43], ["base_conv.BaseConvolution.__init__", "kwargs.get"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get"], ["def", "__init__", "(", "self", ",", "sampler", ",", "neighbour_finder", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "BasePartialDenseConvolutionDown", ",", "self", ")", ".", "__init__", "(", "sampler", ",", "neighbour_finder", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "_index", "=", "kwargs", ".", "get", "(", "\"index\"", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_conv.partial_dense.BasePartialDenseConvolutionDown.conv": [[44, 59], ["None"], "methods", ["None"], ["", "def", "conv", "(", "self", ",", "x", ",", "pos", ",", "x_neighbour", ",", "pos_centered_neighbour", ",", "idx_neighbour", ",", "idx_sampler", ")", ":", "\n", "        ", "\"\"\" Generic down convolution for partial dense data\n\n        Arguments:\n            x [N, C] -- features\n            pos [N, 3] -- positions\n            x_neighbour [N, n_neighbours, C] -- features of the neighbours of each point in x\n            pos_centered_neighbour [N, n_neighbours, 3]  -- position of the neighbours of x_i centred on x_i\n            idx_neighbour [N, n_neighbours] -- indices of the neighbours of each point in pos\n            idx_sampler [n]  -- points to keep for the output\n\n        Raises:\n            NotImplementedError: [description]\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_conv.partial_dense.BasePartialDenseConvolutionDown.forward": [[60, 82], ["torch_geometric.data.Batch", "partial_dense.BasePartialDenseConvolutionDown.sampler", "partial_dense.BasePartialDenseConvolutionDown.neighbour_finder", "torch.full().to", "torch.full().to", "torch.cat", "torch.cat", "partial_dense.BasePartialDenseConvolutionDown.conv", "partial_dense.copy_from_to", "pos[].unsqueeze", "torch.full", "torch.full"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.PPNet.blocks.PPStageBlock.sampler", "home.repos.pwc.inspect_result.drprojects_deepviewagg.PPNet.blocks.PPStageBlock.neighbour_finder", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_conv.message_passing.BaseResnetBlockDown.conv", "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_conv.message_passing.copy_from_to"], ["", "def", "forward", "(", "self", ",", "data", ",", "**", "kwargs", ")", ":", "\n", "        ", "batch_obj", "=", "Batch", "(", ")", "\n", "x", ",", "pos", ",", "batch", "=", "data", ".", "x", ",", "data", ".", "pos", ",", "data", ".", "batch", "\n", "idx_sampler", "=", "self", ".", "sampler", "(", "pos", "=", "pos", ",", "x", "=", "x", ",", "batch", "=", "batch", ")", "\n", "\n", "idx_neighbour", "=", "self", ".", "neighbour_finder", "(", "pos", ",", "pos", ",", "batch_x", "=", "batch", ",", "batch_y", "=", "batch", ")", "\n", "\n", "shadow_x", "=", "torch", ".", "full", "(", "(", "1", ",", ")", "+", "x", ".", "shape", "[", "1", ":", "]", ",", "self", ".", "shadow_features_fill", ")", ".", "to", "(", "x", ".", "device", ")", "\n", "shadow_points", "=", "torch", ".", "full", "(", "(", "1", ",", ")", "+", "pos", ".", "shape", "[", "1", ":", "]", ",", "self", ".", "shadow_points_fill_", ")", ".", "to", "(", "x", ".", "device", ")", "\n", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "shadow_x", "]", ",", "dim", "=", "0", ")", "\n", "pos", "=", "torch", ".", "cat", "(", "[", "pos", ",", "shadow_points", "]", ",", "dim", "=", "0", ")", "\n", "\n", "x_neighbour", "=", "x", "[", "idx_neighbour", "]", "\n", "pos_centered_neighbour", "=", "pos", "[", "idx_neighbour", "]", "-", "pos", "[", ":", "-", "1", "]", ".", "unsqueeze", "(", "1", ")", "# Centered the points, no shadow point", "\n", "\n", "batch_obj", ".", "x", "=", "self", ".", "conv", "(", "x", ",", "pos", ",", "x_neighbour", ",", "pos_centered_neighbour", ",", "idx_neighbour", ",", "idx_sampler", ")", "\n", "\n", "batch_obj", ".", "pos", "=", "pos", "[", "idx_sampler", "]", "\n", "batch_obj", ".", "batch", "=", "batch", "[", "idx_sampler", "]", "\n", "copy_from_to", "(", "data", ",", "batch_obj", ")", "\n", "return", "batch_obj", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_conv.partial_dense.GlobalPartialDenseBaseModule.__init__": [[85, 90], ["super().__init__", "torch_points3d.core.common_modules.MLP"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.MLP"], ["    ", "def", "__init__", "(", "self", ",", "nn", ",", "aggr", "=", "\"max\"", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "GlobalPartialDenseBaseModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "nn", "=", "MLP", "(", "nn", ")", "\n", "self", ".", "pool", "=", "global_max_pool", "if", "aggr", "==", "\"max\"", "else", "global_mean_pool", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_conv.partial_dense.GlobalPartialDenseBaseModule.forward": [[91, 101], ["torch_geometric.data.Batch", "partial_dense.GlobalPartialDenseBaseModule.nn", "partial_dense.GlobalPartialDenseBaseModule.pool", "pos.new_zeros", "torch.arange", "partial_dense.copy_from_to", "torch.cat", "partial_dense.GlobalPartialDenseBaseModule.size", "partial_dense.GlobalPartialDenseBaseModule.size"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.base_conv.message_passing.copy_from_to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat"], ["", "def", "forward", "(", "self", ",", "data", ",", "**", "kwargs", ")", ":", "\n", "        ", "batch_obj", "=", "Batch", "(", ")", "\n", "x", ",", "pos", ",", "batch", "=", "data", ".", "x", ",", "data", ".", "pos", ",", "data", ".", "batch", "\n", "x", "=", "self", ".", "nn", "(", "torch", ".", "cat", "(", "[", "x", ",", "pos", "]", ",", "dim", "=", "1", ")", ")", "\n", "x", "=", "self", ".", "pool", "(", "x", ",", "batch", ")", "\n", "batch_obj", ".", "x", "=", "x", "\n", "batch_obj", ".", "pos", "=", "pos", ".", "new_zeros", "(", "(", "x", ".", "size", "(", "0", ")", ",", "3", ")", ")", "\n", "batch_obj", ".", "batch", "=", "torch", ".", "arange", "(", "x", ".", "size", "(", "0", ")", ",", "device", "=", "x", ".", "device", ")", "\n", "copy_from_to", "(", "data", ",", "batch_obj", ")", "\n", "return", "batch_obj", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_conv.partial_dense.FPModule_PD.__init__": [[110, 115], ["torch_points3d.core.common_modules.base_modules.BaseModule.__init__", "KNNInterpolate", "kwargs.get", "torch_points3d.core.common_modules.MLP"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.MLP"], ["def", "__init__", "(", "self", ",", "up_k", ",", "up_conv_nn", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "FPModule_PD", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "upsample_op", "=", "KNNInterpolate", "(", "up_k", ")", "\n", "bn_momentum", "=", "kwargs", ".", "get", "(", "\"bn_momentum\"", ",", "0.1", ")", "\n", "self", ".", "nn", "=", "MLP", "(", "up_conv_nn", ",", "bn_momentum", "=", "bn_momentum", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_conv.partial_dense.FPModule_PD.forward": [[116, 147], ["data_skip.clone", "hasattr", "len", "torch.gather", "partial_dense.FPModule_PD.upsample_op", "torch.cat", "partial_dense.FPModule_PD.nn", "data.batch.max", "hasattr", "setattr", "setattr", "data_skip.batch.unsqueeze().repeat", "data_skip.batch.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.clone", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.gathering.gather", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat"], ["", "def", "forward", "(", "self", ",", "data", ",", "precomputed", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "data", ",", "data_skip", "=", "data", "\n", "batch_out", "=", "data_skip", ".", "clone", "(", ")", "\n", "x_skip", "=", "data_skip", ".", "x", "\n", "\n", "has_innermost", "=", "len", "(", "data", ".", "x", ")", "==", "data", ".", "batch", ".", "max", "(", ")", "+", "1", "\n", "\n", "if", "precomputed", "and", "not", "has_innermost", ":", "\n", "            ", "if", "not", "hasattr", "(", "data", ",", "\"up_idx\"", ")", ":", "\n", "                ", "setattr", "(", "batch_out", ",", "\"up_idx\"", ",", "0", ")", "\n", "", "else", ":", "\n", "                ", "setattr", "(", "batch_out", ",", "\"up_idx\"", ",", "data", ".", "up_idx", ")", "\n", "\n", "", "pre_data", "=", "precomputed", "[", "batch_out", ".", "up_idx", "]", "\n", "batch_out", ".", "up_idx", "=", "batch_out", ".", "up_idx", "+", "1", "\n", "", "else", ":", "\n", "            ", "pre_data", "=", "None", "\n", "\n", "", "if", "has_innermost", ":", "\n", "            ", "x", "=", "torch", ".", "gather", "(", "data", ".", "x", ",", "0", ",", "data_skip", ".", "batch", ".", "unsqueeze", "(", "-", "1", ")", ".", "repeat", "(", "(", "1", ",", "data", ".", "x", ".", "shape", "[", "-", "1", "]", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "upsample_op", "(", "data", ",", "data_skip", ",", "precomputed", "=", "pre_data", ")", "\n", "\n", "", "if", "x_skip", "is", "not", "None", ":", "\n", "            ", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "x_skip", "]", ",", "dim", "=", "1", ")", "\n", "\n", "", "if", "hasattr", "(", "self", ",", "\"nn\"", ")", ":", "\n", "            ", "batch_out", ".", "x", "=", "self", ".", "nn", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "batch_out", ".", "x", "=", "x", "\n", "", "return", "batch_out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_conv.partial_dense.copy_from_to": [[29, 33], ["setattr", "getattr"], "function", ["None"], ["def", "copy_from_to", "(", "data", ",", "batch", ")", ":", "\n", "    ", "for", "key", "in", "data", ".", "keys", ":", "\n", "        ", "if", "key", "not", "in", "batch", ".", "keys", ":", "\n", "            ", "setattr", "(", "batch", ",", "key", ",", "getattr", "(", "data", ",", "key", ",", "None", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_conv.message_passing.BaseConvolutionDown.__init__": [[36, 40], ["BaseConvolution.__init__", "kwargs.get"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get"], ["dij", "=", "torch", ".", "norm", "(", "vij", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "hij", "=", "torch", ".", "cat", "(", "[", "dij", ",", "vij", ",", "pos_i", ",", "pos_j", ",", "]", ",", "dim", "=", "1", ")", "\n", "\n", "M_hij", "=", "self", ".", "local_nn", "(", "hij", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_conv.message_passing.BaseConvolutionDown.conv": [[41, 43], ["None"], "methods", ["None"], ["\n", "msg", "=", "M_hij", "*", "x_j", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_conv.message_passing.BaseConvolutionDown.forward": [[44, 59], ["torch_geometric.data.Batch", "message_passing.BaseConvolutionDown.sampler", "message_passing.BaseConvolutionDown.neighbour_finder", "torch.stack", "message_passing.BaseConvolutionDown.conv", "message_passing.copy_from_to"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.PPNet.blocks.PPStageBlock.sampler", "home.repos.pwc.inspect_result.drprojects_deepviewagg.PPNet.blocks.PPStageBlock.neighbour_finder", "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_conv.message_passing.BaseResnetBlockDown.conv", "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_conv.message_passing.copy_from_to"], ["return", "msg", "\n", "\n", "", "def", "update", "(", "self", ",", "aggr_out", ")", ":", "\n", "        ", "x", "=", "self", ".", "activation", "(", "aggr_out", ")", "\n", "if", "self", ".", "global_nn", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "global_nn", "(", "x", ")", "\n", "", "return", "x", "\n", "\n", "\n", "", "", "class", "RSConvDown", "(", "BaseConvolutionDown", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "ratio", "=", "None", ",", "radius", "=", "None", ",", "local_nn", "=", "None", ",", "down_conv_nn", "=", "None", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "RSConvDown", ",", "self", ")", ".", "__init__", "(", "FPSSampler", "(", "ratio", ")", ",", "RadiusNeighbourFinder", "(", "radius", ")", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "_conv", "=", "Convolution", "(", "local_nn", "=", "local_nn", ",", "global_nn", "=", "down_conv_nn", ")", "\n", "\n", "", "def", "conv", "(", "self", ",", "x", ",", "pos", ",", "edge_index", ",", "batch", ")", ":", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_conv.message_passing.BaseMSConvolutionDown.__init__": [[69, 73], ["BaseConvolution.__init__", "kwargs.get"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_conv.message_passing.BaseMSConvolutionDown.conv": [[74, 76], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_conv.message_passing.BaseMSConvolutionDown.forward": [[77, 95], ["torch_geometric.data.Batch", "message_passing.BaseMSConvolutionDown.sampler", "range", "torch.cat", "message_passing.copy_from_to", "message_passing.BaseMSConvolutionDown.neighbour_finder", "torch.stack", "ms_x.append", "message_passing.BaseMSConvolutionDown.conv"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.PPNet.blocks.PPStageBlock.sampler", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_conv.message_passing.copy_from_to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.PPNet.blocks.PPStageBlock.neighbour_finder", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_conv.message_passing.BaseResnetBlockDown.conv"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_conv.message_passing.BaseConvolutionUp.__init__": [[98, 103], ["BaseConvolution.__init__", "kwargs.get", "kwargs.get"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_conv.message_passing.BaseConvolutionUp.conv": [[104, 106], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_conv.message_passing.BaseConvolutionUp.forward": [[107, 130], ["torch_geometric.data.Batch", "message_passing.BaseConvolutionUp.conv", "hasattr", "message_passing.copy_from_to", "message_passing.BaseConvolutionUp.neighbour_finder", "torch.stack", "torch.cat", "message_passing.BaseConvolutionUp.nn"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.base_conv.message_passing.BaseResnetBlockDown.conv", "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_conv.message_passing.copy_from_to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.PPNet.blocks.PPStageBlock.neighbour_finder", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_conv.message_passing.GlobalBaseModule.__init__": [[133, 137], ["super().__init__", "MLP"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.MLP"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_conv.message_passing.GlobalBaseModule.forward": [[138, 152], ["torch_geometric.data.Batch", "message_passing.GlobalBaseModule.pool", "torch.arange", "message_passing.copy_from_to", "message_passing.GlobalBaseModule.nn", "message_passing.GlobalBaseModule.nn", "pos.new_zeros", "message_passing.GlobalBaseModule.size", "torch.cat", "message_passing.GlobalBaseModule.size"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.base_conv.message_passing.copy_from_to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_conv.message_passing.FPModule.__init__": [[165, 171], ["message_passing.BaseConvolutionUp.__init__", "kwargs.get", "MLP"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.MLP"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_conv.message_passing.FPModule.conv": [[172, 174], ["torch_geometric.nn.knn_interpolate"], "methods", ["None"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_conv.message_passing.FPModule.extra_repr": [[175, 177], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_conv.message_passing.BaseResnetBlockDown.__init__": [[183, 196], ["message_passing.BaseConvolutionDown.__init__", "kwargs.get", "MLP", "MLP", "MLP"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.MLP", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.MLP", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.MLP"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_conv.message_passing.BaseResnetBlockDown.convs": [[197, 199], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_conv.message_passing.BaseResnetBlockDown.conv": [[200, 210], ["message_passing.BaseResnetBlockDown.features_downsample_nn", "message_passing.BaseResnetBlockDown.convs", "message_passing.BaseResnetBlockDown.features_upsample_nn", "message_passing.BaseResnetBlockDown.shortcut_feature_resize_nn"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.base_conv.message_passing.BaseResnetBlock.convs"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_conv.message_passing.BaseResnetBlock.__init__": [[213, 231], ["torch.nn.Module.__init__", "MLP", "MLP", "MLP", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.MLP", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.MLP", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.MLP"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_conv.message_passing.BaseResnetBlock.convs": [[232, 236], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_conv.message_passing.BaseResnetBlock.forward": [[237, 256], ["torch_geometric.data.Batch", "message_passing.BaseResnetBlock.features_downsample_nn", "message_passing.BaseResnetBlock.convs", "message_passing.BaseResnetBlock.features_upsample_nn", "message_passing.BaseResnetBlock.shortcut_feature_resize_nn", "message_passing.copy_from_to"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.base_conv.message_passing.BaseResnetBlock.convs", "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_conv.message_passing.copy_from_to"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.base_conv.message_passing.copy_from_to": [[26, 30], ["setattr", "getattr"], "function", ["None"], ["\n", "", "def", "forward", "(", "self", ",", "x", ",", "pos", ",", "edge_index", ")", ":", "\n", "        ", "return", "self", ".", "propagate", "(", "edge_index", ",", "x", "=", "x", ",", "pos", "=", "pos", ")", "\n", "\n", "", "def", "message", "(", "self", ",", "pos_i", ",", "pos_j", ",", "x_j", ")", ":", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.RemoveAttributes.__init__": [[42, 45], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "attr_names", "=", "[", "]", ",", "strict", "=", "False", ")", ":", "\n", "        ", "self", ".", "_attr_names", "=", "attr_names", "\n", "self", ".", "_strict", "=", "strict", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.RemoveAttributes._process": [[46, 54], ["set", "delattr", "Exception"], "methods", ["None"], ["", "def", "_process", "(", "self", ",", "data", ":", "Data", ")", ":", "\n", "        ", "keys", "=", "set", "(", "data", ".", "keys", ")", "\n", "for", "attr_name", "in", "self", ".", "_attr_names", ":", "\n", "            ", "if", "attr_name", "not", "in", "keys", "and", "self", ".", "_strict", ":", "\n", "                ", "raise", "Exception", "(", "\"attr_name: {} isn t within keys: {}\"", ".", "format", "(", "attr_name", ",", "keys", ")", ")", "\n", "", "", "for", "attr_name", "in", "self", ".", "_attr_names", ":", "\n", "            ", "delattr", "(", "data", ",", "attr_name", ")", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.RemoveAttributes.__call__": [[55, 61], ["isinstance", "transforms.RemoveAttributes._process", "transforms.RemoveAttributes._process"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.grid_transform.SaveOriginalPosId._process", "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.grid_transform.SaveOriginalPosId._process"], ["", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "if", "isinstance", "(", "data", ",", "list", ")", ":", "\n", "            ", "data", "=", "[", "self", ".", "_process", "(", "d", ")", "for", "d", "in", "data", "]", "\n", "", "else", ":", "\n", "            ", "data", "=", "self", ".", "_process", "(", "data", ")", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.RemoveAttributes.__repr__": [[62, 64], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"{}(attr_names={}, strict={})\"", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "_attr_names", ",", "self", ".", "_strict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.PointCloudFusion._process": [[74, 82], ["torch_geometric.data.Batch.from_data_list", "delattr", "hasattr", "len", "torch_geometric.data.Data", "delattr"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.pair.DensePairBatch.from_data_list", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["def", "_process", "(", "self", ",", "data_list", ")", ":", "\n", "        ", "if", "len", "(", "data_list", ")", "==", "0", ":", "\n", "            ", "return", "Data", "(", ")", "\n", "", "data", "=", "Batch", ".", "from_data_list", "(", "data_list", ")", "\n", "delattr", "(", "data", ",", "\"batch\"", ")", "\n", "if", "hasattr", "(", "object", ",", "\"ptr\"", ")", ":", "\n", "            ", "delattr", "(", "object", ",", "\"ptr\"", ")", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.PointCloudFusion.__call__": [[83, 94], ["len", "Exception", "len", "isinstance", "transforms.PointCloudFusion._process", "transforms.PointCloudFusion._process"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.grid_transform.SaveOriginalPosId._process", "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.grid_transform.SaveOriginalPosId._process"], ["", "def", "__call__", "(", "self", ",", "data_list", ":", "List", "[", "Data", "]", ")", ":", "\n", "        ", "if", "len", "(", "data_list", ")", "==", "0", ":", "\n", "            ", "raise", "Exception", "(", "\"A list of data should be provided\"", ")", "\n", "", "elif", "len", "(", "data_list", ")", "==", "1", ":", "\n", "            ", "return", "data_list", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "if", "isinstance", "(", "data_list", "[", "0", "]", ",", "list", ")", ":", "\n", "                ", "data", "=", "[", "self", ".", "_process", "(", "d", ")", "for", "d", "in", "data_list", "]", "\n", "", "else", ":", "\n", "                ", "data", "=", "self", ".", "_process", "(", "data_list", ")", "\n", "", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.PointCloudFusion.__repr__": [[95, 97], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"{}()\"", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.GridSphereSampling.__init__": [[117, 123], ["grid_transform.GridSampling3D", "isinstance", "eval", "float", "isinstance", "eval", "float"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.panoptic_tracker.InstanceAPMeter.eval", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.panoptic_tracker.InstanceAPMeter.eval"], ["def", "__init__", "(", "self", ",", "radius", ",", "grid_size", "=", "None", ",", "delattr_kd_tree", "=", "True", ",", "center", "=", "True", ")", ":", "\n", "        ", "self", ".", "_radius", "=", "eval", "(", "radius", ")", "if", "isinstance", "(", "radius", ",", "str", ")", "else", "float", "(", "radius", ")", "\n", "grid_size", "=", "eval", "(", "grid_size", ")", "if", "isinstance", "(", "grid_size", ",", "str", ")", "else", "float", "(", "grid_size", ")", "\n", "self", ".", "_grid_sampling", "=", "GridSampling3D", "(", "size", "=", "grid_size", "if", "grid_size", "else", "self", ".", "_radius", ")", "\n", "self", ".", "_delattr_kd_tree", "=", "delattr_kd_tree", "\n", "self", ".", "_center", "=", "center", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.GridSphereSampling._process": [[124, 154], ["transforms.GridSphereSampling._grid_sampling", "numpy.asarray", "hasattr", "sklearn.neighbors.KDTree", "getattr", "hasattr", "delattr", "data.clone", "torch.LongTensor", "torch.LongTensor", "transforms.SphereSampling", "SphereSampling.", "datas.append", "numpy.asarray", "numpy.asarray", "getattr.query_radius", "getattr.query"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.clone", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append"], ["", "def", "_process", "(", "self", ",", "data", ")", ":", "\n", "        ", "if", "not", "hasattr", "(", "data", ",", "self", ".", "KDTREE_KEY", ")", ":", "\n", "            ", "tree", "=", "KDTree", "(", "np", ".", "asarray", "(", "data", ".", "pos", ")", ",", "leaf_size", "=", "50", ")", "\n", "", "else", ":", "\n", "            ", "tree", "=", "getattr", "(", "data", ",", "self", ".", "KDTREE_KEY", ")", "\n", "\n", "# The kdtree has bee attached to data for optimization reason.", "\n", "# However, it won't be used for down the transform pipeline and should be removed before any collate func call.", "\n", "", "if", "hasattr", "(", "data", ",", "self", ".", "KDTREE_KEY", ")", "and", "self", ".", "_delattr_kd_tree", ":", "\n", "            ", "delattr", "(", "data", ",", "self", ".", "KDTREE_KEY", ")", "\n", "\n", "# apply grid sampling", "\n", "", "grid_data", "=", "self", ".", "_grid_sampling", "(", "data", ".", "clone", "(", ")", ")", "\n", "\n", "datas", "=", "[", "]", "\n", "for", "grid_center", "in", "np", ".", "asarray", "(", "grid_data", ".", "pos", ")", ":", "\n", "            ", "pts", "=", "np", ".", "asarray", "(", "grid_center", ")", "[", "np", ".", "newaxis", "]", "\n", "\n", "# Find closest point within the original data", "\n", "ind", "=", "torch", ".", "LongTensor", "(", "tree", ".", "query", "(", "pts", ",", "k", "=", "1", ")", "[", "1", "]", "[", "0", "]", ")", "\n", "grid_label", "=", "data", ".", "y", "[", "ind", "]", "\n", "\n", "# Find neighbours within the original data", "\n", "ind", "=", "torch", ".", "LongTensor", "(", "tree", ".", "query_radius", "(", "pts", ",", "r", "=", "self", ".", "_radius", ")", "[", "0", "]", ")", "\n", "sampler", "=", "SphereSampling", "(", "self", ".", "_radius", ",", "grid_center", ",", "align_origin", "=", "self", ".", "_center", ")", "\n", "new_data", "=", "sampler", "(", "data", ")", "\n", "new_data", ".", "center_label", "=", "grid_label", "\n", "\n", "datas", ".", "append", "(", "new_data", ")", "\n", "", "return", "datas", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.GridSphereSampling.__call__": [[155, 162], ["isinstance", "list", "transforms.GridSphereSampling._process", "transforms.GridSphereSampling._process", "itertools.chain", "tqdm.auto.tqdm.auto.tqdm"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.grid_transform.SaveOriginalPosId._process", "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.grid_transform.SaveOriginalPosId._process"], ["", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "if", "isinstance", "(", "data", ",", "list", ")", ":", "\n", "            ", "data", "=", "[", "self", ".", "_process", "(", "d", ")", "for", "d", "in", "tq", "(", "data", ")", "]", "\n", "data", "=", "list", "(", "itertools", ".", "chain", "(", "*", "data", ")", ")", "# 2d list needs to be flatten", "\n", "", "else", ":", "\n", "            ", "data", "=", "self", ".", "_process", "(", "data", ")", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.GridSphereSampling.__repr__": [[163, 165], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"{}(radius={}, center={})\"", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "_radius", ",", "self", ".", "_center", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.GridCylinderSampling.__init__": [[185, 191], ["grid_transform.GridSampling3D", "isinstance", "eval", "float", "isinstance", "eval", "float"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.panoptic_tracker.InstanceAPMeter.eval", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.panoptic_tracker.InstanceAPMeter.eval"], ["def", "__init__", "(", "self", ",", "radius", ",", "grid_size", "=", "None", ",", "delattr_kd_tree", "=", "True", ",", "center", "=", "True", ")", ":", "\n", "        ", "self", ".", "_radius", "=", "eval", "(", "radius", ")", "if", "isinstance", "(", "radius", ",", "str", ")", "else", "float", "(", "radius", ")", "\n", "grid_size", "=", "eval", "(", "grid_size", ")", "if", "isinstance", "(", "grid_size", ",", "str", ")", "else", "float", "(", "grid_size", ")", "\n", "self", ".", "_grid_sampling", "=", "GridSampling3D", "(", "size", "=", "grid_size", "if", "grid_size", "else", "self", ".", "_radius", ")", "\n", "self", ".", "_delattr_kd_tree", "=", "delattr_kd_tree", "\n", "self", ".", "_center", "=", "center", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.GridCylinderSampling._process": [[192, 222], ["transforms.GridCylinderSampling._grid_sampling", "numpy.unique", "hasattr", "sklearn.neighbors.KDTree", "getattr", "hasattr", "delattr", "data.clone", "torch.LongTensor", "torch.LongTensor", "transforms.CylinderSampling", "CylinderSampling.", "datas.append", "numpy.asarray", "numpy.asarray", "getattr.query_radius", "getattr.query"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.clone", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append"], ["", "def", "_process", "(", "self", ",", "data", ")", ":", "\n", "        ", "if", "not", "hasattr", "(", "data", ",", "self", ".", "KDTREE_KEY", ")", ":", "\n", "            ", "tree", "=", "KDTree", "(", "np", ".", "asarray", "(", "data", ".", "pos", "[", ":", ",", ":", "-", "1", "]", ")", ",", "leaf_size", "=", "50", ")", "\n", "", "else", ":", "\n", "            ", "tree", "=", "getattr", "(", "data", ",", "self", ".", "KDTREE_KEY", ")", "\n", "\n", "# The kdtree has bee attached to data for optimization reason.", "\n", "# However, it won't be used for down the transform pipeline and should be removed before any collate func call.", "\n", "", "if", "hasattr", "(", "data", ",", "self", ".", "KDTREE_KEY", ")", "and", "self", ".", "_delattr_kd_tree", ":", "\n", "            ", "delattr", "(", "data", ",", "self", ".", "KDTREE_KEY", ")", "\n", "\n", "# apply grid sampling", "\n", "", "grid_data", "=", "self", ".", "_grid_sampling", "(", "data", ".", "clone", "(", ")", ")", "\n", "\n", "datas", "=", "[", "]", "\n", "for", "grid_center", "in", "np", ".", "unique", "(", "grid_data", ".", "pos", "[", ":", ",", ":", "-", "1", "]", ",", "axis", "=", "0", ")", ":", "\n", "            ", "pts", "=", "np", ".", "asarray", "(", "grid_center", ")", "[", "np", ".", "newaxis", "]", "\n", "\n", "# Find closest point within the original data", "\n", "ind", "=", "torch", ".", "LongTensor", "(", "tree", ".", "query", "(", "pts", ",", "k", "=", "1", ")", "[", "1", "]", "[", "0", "]", ")", "\n", "grid_label", "=", "data", ".", "y", "[", "ind", "]", "\n", "\n", "# Find neighbours within the original data", "\n", "ind", "=", "torch", ".", "LongTensor", "(", "tree", ".", "query_radius", "(", "pts", ",", "r", "=", "self", ".", "_radius", ")", "[", "0", "]", ")", "\n", "sampler", "=", "CylinderSampling", "(", "self", ".", "_radius", ",", "grid_center", ",", "align_origin", "=", "self", ".", "_center", ")", "\n", "new_data", "=", "sampler", "(", "data", ")", "\n", "new_data", ".", "center_label", "=", "grid_label", "\n", "\n", "datas", ".", "append", "(", "new_data", ")", "\n", "", "return", "datas", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.GridCylinderSampling.__call__": [[223, 230], ["isinstance", "list", "transforms.GridCylinderSampling._process", "transforms.GridCylinderSampling._process", "itertools.chain", "tqdm.auto.tqdm.auto.tqdm"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.grid_transform.SaveOriginalPosId._process", "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.grid_transform.SaveOriginalPosId._process"], ["", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "if", "isinstance", "(", "data", ",", "list", ")", ":", "\n", "            ", "data", "=", "[", "self", ".", "_process", "(", "d", ")", "for", "d", "in", "tq", "(", "data", ")", "]", "\n", "data", "=", "list", "(", "itertools", ".", "chain", "(", "*", "data", ")", ")", "# 2d list needs to be flatten", "\n", "", "else", ":", "\n", "            ", "data", "=", "self", ".", "_process", "(", "data", ")", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.GridCylinderSampling.__repr__": [[231, 233], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"{}(radius={}, center={})\"", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "_radius", ",", "self", ".", "_center", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.ComputeKDTree.__init__": [[244, 246], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "leaf_size", ")", ":", "\n", "        ", "self", ".", "_leaf_size", "=", "leaf_size", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.ComputeKDTree._process": [[247, 250], ["sklearn.neighbors.KDTree", "numpy.asarray"], "methods", ["None"], ["", "def", "_process", "(", "self", ",", "data", ")", ":", "\n", "        ", "data", ".", "kd_tree", "=", "KDTree", "(", "np", ".", "asarray", "(", "data", ".", "pos", ")", ",", "leaf_size", "=", "self", ".", "_leaf_size", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.ComputeKDTree.__call__": [[251, 257], ["isinstance", "transforms.ComputeKDTree._process", "transforms.ComputeKDTree._process"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.grid_transform.SaveOriginalPosId._process", "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.grid_transform.SaveOriginalPosId._process"], ["", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "if", "isinstance", "(", "data", ",", "list", ")", ":", "\n", "            ", "data", "=", "[", "self", ".", "_process", "(", "d", ")", "for", "d", "in", "data", "]", "\n", "", "else", ":", "\n", "            ", "data", "=", "self", ".", "_process", "(", "data", ")", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.ComputeKDTree.__repr__": [[258, 260], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"{}(leaf_size={})\"", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "_leaf_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.RandomSphere.__init__": [[276, 280], ["torch_points3d.utils.transform_utils.SamplingStrategy", "isinstance", "eval", "float"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.panoptic_tracker.InstanceAPMeter.eval"], ["def", "__init__", "(", "self", ",", "radius", ",", "strategy", "=", "\"random\"", ",", "class_weight_method", "=", "\"sqrt\"", ",", "center", "=", "True", ")", ":", "\n", "        ", "self", ".", "_radius", "=", "eval", "(", "radius", ")", "if", "isinstance", "(", "radius", ",", "str", ")", "else", "float", "(", "radius", ")", "\n", "self", ".", "_sampling_strategy", "=", "SamplingStrategy", "(", "strategy", "=", "strategy", ",", "class_weight_method", "=", "class_weight_method", ")", "\n", "self", ".", "_center", "=", "center", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.RandomSphere._process": [[281, 287], ["transforms.RandomSphere._sampling_strategy", "transforms.SphereSampling", "SphereSampling.", "numpy.asarray"], "methods", ["None"], ["", "def", "_process", "(", "self", ",", "data", ")", ":", "\n", "# apply sampling strategy", "\n", "        ", "random_center", "=", "self", ".", "_sampling_strategy", "(", "data", ")", "\n", "random_center", "=", "np", ".", "asarray", "(", "data", ".", "pos", "[", "random_center", "]", ")", "[", "np", ".", "newaxis", "]", "\n", "sphere_sampling", "=", "SphereSampling", "(", "self", ".", "_radius", ",", "random_center", ",", "align_origin", "=", "self", ".", "_center", ")", "\n", "return", "sphere_sampling", "(", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.RandomSphere.__call__": [[288, 294], ["isinstance", "transforms.RandomSphere._process", "transforms.RandomSphere._process"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.grid_transform.SaveOriginalPosId._process", "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.grid_transform.SaveOriginalPosId._process"], ["", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "if", "isinstance", "(", "data", ",", "list", ")", ":", "\n", "            ", "data", "=", "[", "self", ".", "_process", "(", "d", ")", "for", "d", "in", "data", "]", "\n", "", "else", ":", "\n", "            ", "data", "=", "self", ".", "_process", "(", "data", ")", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.RandomSphere.__repr__": [[295, 298], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"{}(radius={}, center={}, sampling_strategy={})\"", ".", "format", "(", "\n", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "_radius", ",", "self", ".", "_center", ",", "self", ".", "_sampling_strategy", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.SphereSampling.__init__": [[316, 322], ["numpy.asarray", "len", "numpy.expand_dims"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["def", "__init__", "(", "self", ",", "radius", ",", "sphere_centre", ",", "align_origin", "=", "True", ")", ":", "\n", "        ", "self", ".", "_radius", "=", "radius", "\n", "self", ".", "_centre", "=", "np", ".", "asarray", "(", "sphere_centre", ")", "\n", "if", "len", "(", "self", ".", "_centre", ".", "shape", ")", "==", "1", ":", "\n", "            ", "self", ".", "_centre", "=", "np", ".", "expand_dims", "(", "self", ".", "_centre", ",", "0", ")", "\n", "", "self", ".", "_align_origin", "=", "align_origin", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.SphereSampling.__call__": [[323, 346], ["torch.FloatTensor", "torch.LongTensor", "torch_geometric.data.Data", "set", "hasattr", "sklearn.neighbors.KDTree", "setattr", "getattr", "setattr", "numpy.asarray", "getattr.query_radius", "torch.is_tensor", "torch.is_tensor", "item.clone.clone.clone"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.clone"], ["", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "num_points", "=", "data", ".", "pos", ".", "shape", "[", "0", "]", "\n", "if", "not", "hasattr", "(", "data", ",", "self", ".", "KDTREE_KEY", ")", ":", "\n", "            ", "tree", "=", "KDTree", "(", "np", ".", "asarray", "(", "data", ".", "pos", ")", ",", "leaf_size", "=", "50", ")", "\n", "setattr", "(", "data", ",", "self", ".", "KDTREE_KEY", ",", "tree", ")", "\n", "", "else", ":", "\n", "            ", "tree", "=", "getattr", "(", "data", ",", "self", ".", "KDTREE_KEY", ")", "\n", "\n", "", "t_center", "=", "torch", ".", "FloatTensor", "(", "self", ".", "_centre", ")", "\n", "ind", "=", "torch", ".", "LongTensor", "(", "tree", ".", "query_radius", "(", "self", ".", "_centre", ",", "r", "=", "self", ".", "_radius", ")", "[", "0", "]", ")", "\n", "new_data", "=", "Data", "(", ")", "\n", "for", "key", "in", "set", "(", "data", ".", "keys", ")", ":", "\n", "            ", "if", "key", "==", "self", ".", "KDTREE_KEY", ":", "\n", "                ", "continue", "\n", "", "item", "=", "data", "[", "key", "]", "\n", "if", "torch", ".", "is_tensor", "(", "item", ")", "and", "num_points", "==", "item", ".", "shape", "[", "0", "]", ":", "\n", "                ", "item", "=", "item", "[", "ind", "]", "\n", "if", "self", ".", "_align_origin", "and", "key", "==", "\"pos\"", ":", "# Center the sphere.", "\n", "                    ", "item", "-=", "t_center", "\n", "", "", "elif", "torch", ".", "is_tensor", "(", "item", ")", ":", "\n", "                ", "item", "=", "item", ".", "clone", "(", ")", "\n", "", "setattr", "(", "new_data", ",", "key", ",", "item", ")", "\n", "", "return", "new_data", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.SphereSampling.__repr__": [[347, 350], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"{}(radius={}, center={}, align_origin={})\"", ".", "format", "(", "\n", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "_radius", ",", "self", ".", "_centre", ",", "self", ".", "_align_origin", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.CylinderSampling.__init__": [[368, 376], ["numpy.asarray", "len", "numpy.expand_dims"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["def", "__init__", "(", "self", ",", "radius", ",", "cylinder_centre", ",", "align_origin", "=", "True", ")", ":", "\n", "        ", "self", ".", "_radius", "=", "radius", "\n", "if", "cylinder_centre", ".", "shape", "[", "0", "]", "==", "3", ":", "\n", "            ", "cylinder_centre", "=", "cylinder_centre", "[", ":", "-", "1", "]", "\n", "", "self", ".", "_centre", "=", "np", ".", "asarray", "(", "cylinder_centre", ")", "\n", "if", "len", "(", "self", ".", "_centre", ".", "shape", ")", "==", "1", ":", "\n", "            ", "self", ".", "_centre", "=", "np", ".", "expand_dims", "(", "self", ".", "_centre", ",", "0", ")", "\n", "", "self", ".", "_align_origin", "=", "align_origin", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.CylinderSampling.__call__": [[377, 401], ["torch.FloatTensor", "torch.LongTensor", "torch_geometric.data.Data", "set", "hasattr", "sklearn.neighbors.KDTree", "setattr", "getattr", "setattr", "numpy.asarray", "getattr.query_radius", "torch.is_tensor", "torch.is_tensor", "item.clone.clone.clone"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.clone"], ["", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "num_points", "=", "data", ".", "pos", ".", "shape", "[", "0", "]", "\n", "if", "not", "hasattr", "(", "data", ",", "self", ".", "KDTREE_KEY", ")", ":", "\n", "            ", "tree", "=", "KDTree", "(", "np", ".", "asarray", "(", "data", ".", "pos", "[", ":", ",", ":", "-", "1", "]", ")", ",", "leaf_size", "=", "50", ")", "\n", "setattr", "(", "data", ",", "self", ".", "KDTREE_KEY", ",", "tree", ")", "\n", "", "else", ":", "\n", "            ", "tree", "=", "getattr", "(", "data", ",", "self", ".", "KDTREE_KEY", ")", "\n", "\n", "", "t_center", "=", "torch", ".", "FloatTensor", "(", "self", ".", "_centre", ")", "\n", "ind", "=", "torch", ".", "LongTensor", "(", "tree", ".", "query_radius", "(", "self", ".", "_centre", ",", "r", "=", "self", ".", "_radius", ")", "[", "0", "]", ")", "\n", "\n", "new_data", "=", "Data", "(", ")", "\n", "for", "key", "in", "set", "(", "data", ".", "keys", ")", ":", "\n", "            ", "if", "key", "==", "self", ".", "KDTREE_KEY", ":", "\n", "                ", "continue", "\n", "", "item", "=", "data", "[", "key", "]", "\n", "if", "torch", ".", "is_tensor", "(", "item", ")", "and", "num_points", "==", "item", ".", "shape", "[", "0", "]", ":", "\n", "                ", "item", "=", "item", "[", "ind", "]", "\n", "if", "self", ".", "_align_origin", "and", "key", "==", "\"pos\"", ":", "# Center the cylinder.", "\n", "                    ", "item", "[", ":", ",", ":", "-", "1", "]", "-=", "t_center", "\n", "", "", "elif", "torch", ".", "is_tensor", "(", "item", ")", ":", "\n", "                ", "item", "=", "item", ".", "clone", "(", ")", "\n", "", "setattr", "(", "new_data", ",", "key", ",", "item", ")", "\n", "", "return", "new_data", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.CylinderSampling.__repr__": [[402, 405], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"{}(radius={}, center={}, align_origin={})\"", ".", "format", "(", "\n", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "_radius", ",", "self", ".", "_centre", ",", "self", ".", "_align_origin", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.Select.__init__": [[417, 419], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "indices", "=", "None", ")", ":", "\n", "        ", "self", ".", "_indices", "=", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.Select.__call__": [[420, 433], ["torch_geometric.data.Data", "setattr", "torch.is_tensor", "item[].clone", "torch.is_tensor", "item.clone.clone.clone"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.clone", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.clone"], ["", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "num_points", "=", "data", ".", "pos", ".", "shape", "[", "0", "]", "\n", "new_data", "=", "Data", "(", ")", "\n", "for", "key", "in", "data", ".", "keys", ":", "\n", "            ", "if", "key", "==", "KDTREE_KEY", ":", "\n", "                ", "continue", "\n", "", "item", "=", "data", "[", "key", "]", "\n", "if", "torch", ".", "is_tensor", "(", "item", ")", "and", "num_points", "==", "item", ".", "shape", "[", "0", "]", ":", "\n", "                ", "item", "=", "item", "[", "self", ".", "_indices", "]", ".", "clone", "(", ")", "\n", "", "elif", "torch", ".", "is_tensor", "(", "item", ")", ":", "\n", "                ", "item", "=", "item", ".", "clone", "(", ")", "\n", "", "setattr", "(", "new_data", ",", "key", ",", "item", ")", "\n", "", "return", "new_data", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.CylinderNormalizeScale.__init__": [[440, 442], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "normalize_z", "=", "True", ")", ":", "\n", "        ", "self", ".", "_normalize_z", "=", "normalize_z", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.CylinderNormalizeScale._process": [[443, 451], ["data.pos.mean", "data.pos[].abs().max", "data.pos[].abs().max", "data.pos[].abs", "data.pos[].abs"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.lovasz_loss.mean"], ["", "def", "_process", "(", "self", ",", "data", ")", ":", "\n", "        ", "data", ".", "pos", "-=", "data", ".", "pos", ".", "mean", "(", "dim", "=", "0", ",", "keepdim", "=", "True", ")", "\n", "scale", "=", "(", "1", "/", "data", ".", "pos", "[", ":", ",", ":", "-", "1", "]", ".", "abs", "(", ")", ".", "max", "(", ")", ")", "*", "0.999999", "\n", "data", ".", "pos", "[", ":", ",", ":", "-", "1", "]", "=", "data", ".", "pos", "[", ":", ",", ":", "-", "1", "]", "*", "scale", "\n", "if", "self", ".", "_normalize_z", ":", "\n", "            ", "scale", "=", "(", "1", "/", "data", ".", "pos", "[", ":", ",", "-", "1", "]", ".", "abs", "(", ")", ".", "max", "(", ")", ")", "*", "0.999999", "\n", "data", ".", "pos", "[", ":", ",", "-", "1", "]", "=", "data", ".", "pos", "[", ":", ",", "-", "1", "]", "*", "scale", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.CylinderNormalizeScale.__call__": [[452, 458], ["isinstance", "transforms.CylinderNormalizeScale._process", "transforms.CylinderNormalizeScale._process"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.grid_transform.SaveOriginalPosId._process", "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.grid_transform.SaveOriginalPosId._process"], ["", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "if", "isinstance", "(", "data", ",", "list", ")", ":", "\n", "            ", "data", "=", "[", "self", ".", "_process", "(", "d", ")", "for", "d", "in", "data", "]", "\n", "", "else", ":", "\n", "            ", "data", "=", "self", ".", "_process", "(", "data", ")", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.CylinderNormalizeScale.__repr__": [[459, 461], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"{}(normalize_z={})\"", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "_normalize_z", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.RandomSymmetry.__init__": [[472, 474], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "axis", "=", "[", "False", ",", "False", ",", "False", "]", ")", ":", "\n", "        ", "self", ".", "axis", "=", "axis", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.RandomSymmetry.__call__": [[475, 483], ["enumerate", "torch.rand", "torch.max"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "\n", "        ", "for", "i", ",", "ax", "in", "enumerate", "(", "self", ".", "axis", ")", ":", "\n", "            ", "if", "ax", ":", "\n", "                ", "if", "torch", ".", "rand", "(", "1", ")", "<", "0.5", ":", "\n", "                    ", "c_max", "=", "torch", ".", "max", "(", "data", ".", "pos", "[", ":", ",", "i", "]", ")", "\n", "data", ".", "pos", "[", ":", ",", "i", "]", "=", "c_max", "-", "data", ".", "pos", "[", ":", ",", "i", "]", "\n", "", "", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.RandomSymmetry.__repr__": [[484, 486], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"Random symmetry of axes: x={}, y={}, z={}\"", ".", "format", "(", "*", "self", ".", "axis", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.RandomNoise.__init__": [[499, 502], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "sigma", "=", "0.01", ",", "clip", "=", "0.05", ")", ":", "\n", "        ", "self", ".", "sigma", "=", "sigma", "\n", "self", ".", "clip", "=", "clip", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.RandomNoise.__call__": [[503, 508], ["noise.clamp.clamp.clamp", "torch.randn"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "noise", "=", "self", ".", "sigma", "*", "torch", ".", "randn", "(", "data", ".", "pos", ".", "shape", ")", "\n", "noise", "=", "noise", ".", "clamp", "(", "-", "self", ".", "clip", ",", "self", ".", "clip", ")", "\n", "data", ".", "pos", "=", "data", ".", "pos", "+", "noise", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.RandomNoise.__repr__": [[509, 511], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"{}(sigma={}, clip={})\"", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "sigma", ",", "self", ".", "clip", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.ScalePos.__init__": [[514, 516], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "scale", "=", "None", ")", ":", "\n", "        ", "self", ".", "scale", "=", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.ScalePos.__call__": [[517, 520], ["None"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "data", ".", "pos", "*=", "self", ".", "scale", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.ScalePos.__repr__": [[521, 523], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"{}(scale={})\"", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "scale", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.RandomScaleAnisotropic.__init__": [[549, 553], ["torch_points3d.utils.is_iterable", "len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.config.is_iterable", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["def", "__init__", "(", "self", ",", "scales", "=", "None", ",", "anisotropic", "=", "True", ")", ":", "\n", "        ", "assert", "is_iterable", "(", "scales", ")", "and", "len", "(", "scales", ")", "==", "2", "\n", "assert", "scales", "[", "0", "]", "<=", "scales", "[", "1", "]", "\n", "self", ".", "scales", "=", "scales", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.RandomScaleAnisotropic.__call__": [[554, 561], ["getattr", "torch.nn.functional.normalize", "torch.rand"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "scale", "=", "self", ".", "scales", "[", "0", "]", "+", "torch", ".", "rand", "(", "(", "3", ",", ")", ")", "*", "(", "self", ".", "scales", "[", "1", "]", "-", "self", ".", "scales", "[", "0", "]", ")", "\n", "data", ".", "pos", "=", "data", ".", "pos", "*", "scale", "\n", "if", "getattr", "(", "data", ",", "\"norm\"", ",", "None", ")", "is", "not", "None", ":", "\n", "            ", "data", ".", "norm", "=", "data", ".", "norm", "/", "scale", "\n", "data", ".", "norm", "=", "torch", ".", "nn", ".", "functional", ".", "normalize", "(", "data", ".", "norm", ",", "dim", "=", "1", ")", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.RandomScaleAnisotropic.__repr__": [[562, 564], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"{}({})\"", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "scales", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.MeshToNormal.__init__": [[570, 572], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.MeshToNormal.__call__": [[573, 582], ["hasattr", "torch.cross", "torch.nn.functional.normalize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "if", "hasattr", "(", "data", ",", "\"face\"", ")", ":", "\n", "            ", "pos", "=", "data", ".", "pos", "\n", "face", "=", "data", ".", "face", "\n", "vertices", "=", "[", "pos", "[", "f", "]", "for", "f", "in", "face", "]", "\n", "normals", "=", "torch", ".", "cross", "(", "vertices", "[", "0", "]", "-", "vertices", "[", "1", "]", ",", "vertices", "[", "0", "]", "-", "vertices", "[", "2", "]", ",", "dim", "=", "1", ")", "\n", "normals", "=", "F", ".", "normalize", "(", "normals", ")", "\n", "data", ".", "normals", "=", "normals", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.MeshToNormal.__repr__": [[583, 585], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"{}\"", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.MultiScaleTransform.__init__": [[597, 600], ["len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["def", "__init__", "(", "self", ",", "strategies", ")", ":", "\n", "        ", "self", ".", "strategies", "=", "strategies", "\n", "self", ".", "num_layers", "=", "len", "(", "self", ".", "strategies", "[", "\"sampler\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.MultiScaleTransform.__inc__wrapper": [[601, 610], ["functools.partial", "func"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "__inc__wrapper", "(", "func", ",", "special_params", ")", ":", "\n", "        ", "def", "new__inc__", "(", "key", ",", "num_nodes", ",", "special_params", "=", "None", ",", "func", "=", "None", ")", ":", "\n", "            ", "if", "key", "in", "special_params", ":", "\n", "                ", "return", "special_params", "[", "key", "]", "\n", "", "else", ":", "\n", "                ", "return", "func", "(", "key", ",", "num_nodes", ")", "\n", "\n", "", "", "return", "partial", "(", "new__inc__", ",", "special_params", "=", "special_params", ",", "func", "=", "func", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.MultiScaleTransform.__call__": [[611, 660], ["data.contiguous", "torch_points3d.datasets.multiscale_data.MultiScaleData.from_data", "range", "upsample.reverse", "torch_geometric.data.Data", "torch_geometric.data.Data", "hasattr", "neighbour_finder", "setattr", "setattr", "precomputed.append", "sampler", "sampler.contiguous", "len", "transforms.MultiScaleTransform.__inc__wrapper", "torch_geometric.data.Data.clone", "upsampler.precompute", "upsample.append", "setattr", "torch.zeros", "torch.zeros", "len", "ValueError", "transforms.MultiScaleTransform.__inc__wrapper"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.pair.MultiScalePair.from_data", "home.repos.pwc.inspect_result.drprojects_deepviewagg.PPNet.blocks.PPStageBlock.neighbour_finder", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.PPNet.blocks.PPStageBlock.sampler", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.MultiScaleTransform.__inc__wrapper", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.clone", "home.repos.pwc.inspect_result.drprojects_deepviewagg.spatial_ops.interpolate.KNNInterpolate.precompute", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.MultiScaleTransform.__inc__wrapper"], ["", "def", "__call__", "(", "self", ",", "data", ":", "Data", ")", "->", "MultiScaleData", ":", "\n", "# Compute sequentially multi_scale indexes on cpu", "\n", "        ", "data", ".", "contiguous", "(", ")", "\n", "ms_data", "=", "MultiScaleData", ".", "from_data", "(", "data", ")", "\n", "precomputed", "=", "[", "Data", "(", "pos", "=", "data", ".", "pos", ")", "]", "\n", "upsample", "=", "[", "]", "\n", "upsample_index", "=", "0", "\n", "for", "index", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "            ", "sampler", ",", "neighbour_finder", "=", "self", ".", "strategies", "[", "\"sampler\"", "]", "[", "index", "]", ",", "self", ".", "strategies", "[", "\"neighbour_finder\"", "]", "[", "index", "]", "\n", "support", "=", "precomputed", "[", "index", "]", "\n", "new_data", "=", "Data", "(", "pos", "=", "support", ".", "pos", ")", "\n", "if", "sampler", ":", "\n", "                ", "query", "=", "sampler", "(", "new_data", ".", "clone", "(", ")", ")", "\n", "query", ".", "contiguous", "(", ")", "\n", "\n", "if", "len", "(", "self", ".", "strategies", "[", "\"upsample_op\"", "]", ")", ":", "\n", "                    ", "if", "upsample_index", ">=", "len", "(", "self", ".", "strategies", "[", "\"upsample_op\"", "]", ")", ":", "\n", "                        ", "raise", "ValueError", "(", "\"You are missing some upsample blocks in your network\"", ")", "\n", "\n", "", "upsampler", "=", "self", ".", "strategies", "[", "\"upsample_op\"", "]", "[", "upsample_index", "]", "\n", "upsample_index", "+=", "1", "\n", "pre_up", "=", "upsampler", ".", "precompute", "(", "query", ",", "support", ")", "\n", "upsample", ".", "append", "(", "pre_up", ")", "\n", "special_params", "=", "{", "}", "\n", "special_params", "[", "\"x_idx\"", "]", "=", "query", ".", "num_nodes", "\n", "special_params", "[", "\"y_idx\"", "]", "=", "support", ".", "num_nodes", "\n", "setattr", "(", "pre_up", ",", "\"__inc__\"", ",", "self", ".", "__inc__wrapper", "(", "pre_up", ".", "__inc__", ",", "special_params", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "query", "=", "new_data", "\n", "\n", "", "s_pos", ",", "q_pos", "=", "support", ".", "pos", ",", "query", ".", "pos", "\n", "if", "hasattr", "(", "query", ",", "\"batch\"", ")", ":", "\n", "                ", "s_batch", ",", "q_batch", "=", "support", ".", "batch", ",", "query", ".", "batch", "\n", "", "else", ":", "\n", "                ", "s_batch", ",", "q_batch", "=", "(", "\n", "torch", ".", "zeros", "(", "(", "s_pos", ".", "shape", "[", "0", "]", ")", ",", "dtype", "=", "torch", ".", "long", ")", ",", "\n", "torch", ".", "zeros", "(", "(", "q_pos", ".", "shape", "[", "0", "]", ")", ",", "dtype", "=", "torch", ".", "long", ")", ",", "\n", ")", "\n", "\n", "", "idx_neighboors", "=", "neighbour_finder", "(", "s_pos", ",", "q_pos", ",", "batch_x", "=", "s_batch", ",", "batch_y", "=", "q_batch", ")", "\n", "special_params", "=", "{", "}", "\n", "special_params", "[", "\"idx_neighboors\"", "]", "=", "s_pos", ".", "shape", "[", "0", "]", "\n", "setattr", "(", "query", ",", "\"idx_neighboors\"", ",", "idx_neighboors", ")", "\n", "setattr", "(", "query", ",", "\"__inc__\"", ",", "self", ".", "__inc__wrapper", "(", "query", ".", "__inc__", ",", "special_params", ")", ")", "\n", "precomputed", ".", "append", "(", "query", ")", "\n", "", "ms_data", ".", "multiscale", "=", "precomputed", "[", "1", ":", "]", "\n", "upsample", ".", "reverse", "(", ")", "# Switch to inner layer first", "\n", "ms_data", ".", "upsample", "=", "upsample", "\n", "return", "ms_data", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.MultiScaleTransform.__repr__": [[661, 663], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"{}\"", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.ShuffleData._process": [[669, 671], ["grid_transform.shuffle_data"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.grid_transform.shuffle_data"], ["def", "_process", "(", "self", ",", "data", ")", ":", "\n", "        ", "return", "shuffle_data", "(", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.ShuffleData.__call__": [[672, 679], ["isinstance", "list", "transforms.ShuffleData._process", "transforms.ShuffleData._process", "itertools.chain", "tqdm.auto.tqdm.auto.tqdm"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.grid_transform.SaveOriginalPosId._process", "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.grid_transform.SaveOriginalPosId._process"], ["", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "if", "isinstance", "(", "data", ",", "list", ")", ":", "\n", "            ", "data", "=", "[", "self", ".", "_process", "(", "d", ")", "for", "d", "in", "tq", "(", "data", ")", "]", "\n", "data", "=", "list", "(", "itertools", ".", "chain", "(", "*", "data", ")", ")", "# 2d list needs to be flatten", "\n", "", "else", ":", "\n", "            ", "data", "=", "self", ".", "_process", "(", "data", ")", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.PairTransform.__init__": [[682, 688], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "transform", ")", ":", "\n", "        ", "\"\"\"\n        apply the transform for a pair of data\n        (as defined in torch_points3d/datasets/registration/pair.py)\n        \"\"\"", "\n", "self", ".", "transform", "=", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.PairTransform.__call__": [[689, 694], ["data.to_data", "transforms.PairTransform.transform", "transforms.PairTransform.transform", "torch_points3d.datasets.registration.pair.Pair.make_pair"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.pair.Pair.to_data", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.pair.Pair.make_pair"], ["", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "data_source", ",", "data_target", "=", "data", ".", "to_data", "(", ")", "\n", "data_source", "=", "self", ".", "transform", "(", "data_source", ")", "\n", "data_target", "=", "self", ".", "transform", "(", "data_target", ")", "\n", "return", "Pair", ".", "make_pair", "(", "data_source", ",", "data_target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.PairTransform.__repr__": [[695, 697], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"{}()\"", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.ShiftVoxels.__init__": [[709, 711], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "apply_shift", "=", "True", ")", ":", "\n", "        ", "self", ".", "_apply_shift", "=", "apply_shift", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.ShiftVoxels.__call__": [[712, 721], ["hasattr", "Exception", "isinstance", "Exception", "torch.rand"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "if", "self", ".", "_apply_shift", ":", "\n", "            ", "if", "not", "hasattr", "(", "data", ",", "\"coords\"", ")", ":", "\n", "                ", "raise", "Exception", "(", "\"should quantize first using GridSampling3D\"", ")", "\n", "\n", "", "if", "not", "isinstance", "(", "data", ".", "coords", ",", "torch", ".", "IntTensor", ")", ":", "\n", "                ", "raise", "Exception", "(", "\"The pos are expected to be coordinates, so torch.IntTensor\"", ")", "\n", "", "data", ".", "coords", "[", ":", ",", ":", "3", "]", "+=", "(", "torch", ".", "rand", "(", "3", ")", "*", "100", ")", ".", "type_as", "(", "data", ".", "coords", ")", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.ShiftVoxels.__repr__": [[722, 724], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"{}(apply_shift={})\"", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "_apply_shift", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.RandomDropout.__init__": [[737, 740], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "dropout_ratio", ":", "float", "=", "0.2", ",", "dropout_application_ratio", ":", "float", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "dropout_ratio", "=", "dropout_ratio", "\n", "self", ".", "dropout_application_ratio", "=", "dropout_application_ratio", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.RandomDropout.__call__": [[741, 746], ["random.random", "len", "torch_geometric.transforms.FixedPoints", "int"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "self", ".", "dropout_application_ratio", ":", "\n", "            ", "N", "=", "len", "(", "data", ".", "pos", ")", "\n", "data", "=", "FP", "(", "int", "(", "N", "*", "(", "1", "-", "self", ".", "dropout_ratio", ")", ")", ")", "(", "data", ")", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.RandomDropout.__repr__": [[747, 750], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"{}(dropout_ratio={}, dropout_application_ratio={})\"", ".", "format", "(", "\n", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "dropout_ratio", ",", "self", ".", "dropout_application_ratio", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.RandomWalkDropout.__init__": [[796, 809], ["None"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "dropout_ratio", ":", "float", "=", "0.05", ",", "\n", "num_iter", ":", "int", "=", "5000", ",", "\n", "radius", ":", "float", "=", "0.5", ",", "\n", "max_num", ":", "int", "=", "-", "1", ",", "\n", "skip_keys", ":", "List", "=", "[", "]", ",", "\n", ")", ":", "\n", "        ", "self", ".", "dropout_ratio", "=", "dropout_ratio", "\n", "self", ".", "num_iter", "=", "num_iter", "\n", "self", ".", "radius", "=", "radius", "\n", "self", ".", "max_num", "=", "max_num", "\n", "self", ".", "skip_keys", "=", "skip_keys", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.RandomWalkDropout.__call__": [[810, 827], ["apply_mask.pos.detach().cpu().numpy", "torch_points_kernels.points_cpu.ball_query", "numpy.ones", "transforms.rw_mask", "transforms.apply_mask", "len", "apply_mask.pos.detach().cpu", "ind.detach().cpu().numpy", "dist.detach().cpu().numpy", "apply_mask.pos.detach", "ind.detach().cpu", "dist.detach().cpu", "ind.detach", "dist.detach"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.rw_mask", "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.apply_mask", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.csr.CSRData.cpu", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.csr.CSRData.cpu", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.csr.CSRData.cpu"], ["", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "\n", "        ", "pos", "=", "data", ".", "pos", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "ind", ",", "dist", "=", "ball_query", "(", "data", ".", "pos", ",", "data", ".", "pos", ",", "radius", "=", "self", ".", "radius", ",", "max_num", "=", "self", ".", "max_num", ",", "mode", "=", "0", ")", "\n", "mask", "=", "np", ".", "ones", "(", "len", "(", "pos", ")", ",", "dtype", "=", "bool", ")", "\n", "mask", "=", "rw_mask", "(", "\n", "pos", "=", "pos", ",", "\n", "ind", "=", "ind", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "dist", "=", "dist", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "mask_vertices", "=", "mask", ",", "\n", "num_iter", "=", "self", ".", "num_iter", ",", "\n", "random_ratio", "=", "self", ".", "dropout_ratio", ",", "\n", ")", "\n", "\n", "data", "=", "apply_mask", "(", "data", ",", "mask", ",", "self", ".", "skip_keys", ")", "\n", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.RandomWalkDropout.__repr__": [[828, 831], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"{}(dropout_ratio={}, num_iter={}, radius={}, max_num={}, skip_keys={})\"", ".", "format", "(", "\n", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "dropout_ratio", ",", "self", ".", "num_iter", ",", "self", ".", "radius", ",", "self", ".", "max_num", ",", "self", ".", "skip_keys", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.RandomSphereDropout.__init__": [[848, 852], ["grid_transform.GridSampling3D"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "num_sphere", ":", "int", "=", "10", ",", "radius", ":", "float", "=", "5", ",", "grid_size_center", ":", "float", "=", "0.01", ")", ":", "\n", "        ", "self", ".", "num_sphere", "=", "num_sphere", "\n", "self", ".", "radius", "=", "radius", "\n", "self", ".", "grid_sampling", "=", "GridSampling3D", "(", "grid_size_center", ",", "mode", "=", "\"last\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.RandomSphereDropout.__call__": [[853, 868], ["transforms.RandomSphereDropout.grid_sampling", "torch.randint", "torch_points_kernels.points_cpu.ball_query", "torch.ones", "transforms.apply_mask", "apply_mask.clone", "len", "len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.apply_mask", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.clone", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "\n", "        ", "data_c", "=", "self", ".", "grid_sampling", "(", "data", ".", "clone", "(", ")", ")", "\n", "list_ind", "=", "torch", ".", "randint", "(", "0", ",", "len", "(", "data_c", ".", "pos", ")", ",", "(", "self", ".", "num_sphere", ",", ")", ")", "\n", "center", "=", "data_c", ".", "pos", "[", "list_ind", "]", "\n", "pos", "=", "data", ".", "pos", "\n", "# list_ind = torch.randint(0, len(pos), (self.num_sphere,))", "\n", "\n", "ind", ",", "dist", "=", "ball_query", "(", "data", ".", "pos", ",", "center", ",", "radius", "=", "self", ".", "radius", ",", "max_num", "=", "-", "1", ",", "mode", "=", "1", ")", "\n", "ind", "=", "ind", "[", "dist", "[", ":", ",", "0", "]", ">=", "0", "]", "\n", "mask", "=", "torch", ".", "ones", "(", "len", "(", "pos", ")", ",", "dtype", "=", "torch", ".", "bool", ")", "\n", "mask", "[", "ind", "[", ":", ",", "0", "]", "]", "=", "False", "\n", "data", "=", "apply_mask", "(", "data", ",", "mask", ")", "\n", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.RandomSphereDropout.__repr__": [[869, 871], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"{}(num_sphere={}, radius={})\"", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "num_sphere", ",", "self", ".", "radius", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.FixedSphereDropout.__init__": [[887, 891], ["torch.tensor"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "centers", ":", "List", "[", "List", "[", "float", "]", "]", "=", "[", "[", "0", ",", "0", ",", "0", "]", "]", ",", "name_ind", "=", "None", ",", "radius", ":", "float", "=", "1", ")", ":", "\n", "        ", "self", ".", "centers", "=", "torch", ".", "tensor", "(", "centers", ")", "\n", "self", ".", "radius", "=", "radius", "\n", "self", ".", "name_ind", "=", "name_ind", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.FixedSphereDropout.__call__": [[892, 905], ["torch.ones", "transforms.apply_mask", "torch_points_kernels.points_cpu.ball_query", "torch_points_kernels.points_cpu.ball_query", "len", "data[].long"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.apply_mask", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "\n", "        ", "if", "self", ".", "name_ind", "is", "None", ":", "\n", "            ", "ind", ",", "dist", "=", "ball_query", "(", "data", ".", "pos", ",", "self", ".", "centers", ",", "radius", "=", "self", ".", "radius", ",", "max_num", "=", "-", "1", ",", "mode", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "center", "=", "data", ".", "pos", "[", "data", "[", "self", ".", "name_ind", "]", ".", "long", "(", ")", "]", "\n", "ind", ",", "dist", "=", "ball_query", "(", "data", ".", "pos", ",", "center", ",", "radius", "=", "self", ".", "radius", ",", "max_num", "=", "-", "1", ",", "mode", "=", "1", ")", "\n", "", "ind", "=", "ind", "[", "dist", "[", ":", ",", "0", "]", ">", "0", "]", "\n", "mask", "=", "torch", ".", "ones", "(", "len", "(", "data", ".", "pos", ")", ",", "dtype", "=", "torch", ".", "bool", ")", "\n", "mask", "[", "ind", "[", ":", ",", "0", "]", "]", "=", "False", "\n", "data", "=", "apply_mask", "(", "data", ",", "mask", ")", "\n", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.FixedSphereDropout.__repr__": [[906, 908], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"{}(centers={}, radius={})\"", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "centers", ",", "self", ".", "radius", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.SphereCrop.__init__": [[922, 924], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "radius", ":", "float", "=", "50", ")", ":", "\n", "        ", "self", ".", "radius", "=", "radius", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.SphereCrop.__call__": [[925, 934], ["torch.randint", "torch_points_kernels.points_cpu.ball_query", "len", "len", "data.pos[].view", "len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "i", "=", "torch", ".", "randint", "(", "0", ",", "len", "(", "data", ".", "pos", ")", ",", "(", "1", ",", ")", ")", "\n", "ind", ",", "dist", "=", "ball_query", "(", "data", ".", "pos", ",", "data", ".", "pos", "[", "i", "]", ".", "view", "(", "1", ",", "3", ")", ",", "radius", "=", "self", ".", "radius", ",", "max_num", "=", "-", "1", ",", "mode", "=", "1", ")", "\n", "ind", "=", "ind", "[", "dist", "[", ":", ",", "0", "]", ">", "0", "]", "\n", "size_pos", "=", "len", "(", "data", ".", "pos", ")", "\n", "for", "k", "in", "data", ".", "keys", ":", "\n", "            ", "if", "size_pos", "==", "len", "(", "data", "[", "k", "]", ")", ":", "\n", "                ", "data", "[", "k", "]", "=", "data", "[", "k", "]", "[", "ind", "[", ":", ",", "0", "]", "]", "\n", "", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.SphereCrop.__repr__": [[935, 937], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"{}(radius={})\"", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "radius", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.CubeCrop.__init__": [[956, 962], ["features.Random3AxisRotation", "grid_transform.GridSampling3D"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "c", ":", "float", "=", "1", ",", "rot_x", ":", "float", "=", "180", ",", "rot_y", ":", "float", "=", "180", ",", "rot_z", ":", "float", "=", "180", ",", "grid_size_center", ":", "float", "=", "0.01", "\n", ")", ":", "\n", "        ", "self", ".", "c", "=", "c", "\n", "self", ".", "random_rotation", "=", "Random3AxisRotation", "(", "rot_x", "=", "rot_x", ",", "rot_y", "=", "rot_y", ",", "rot_z", "=", "rot_z", ")", "\n", "self", ".", "grid_sampling", "=", "GridSampling3D", "(", "grid_size_center", ",", "mode", "=", "\"last\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.CubeCrop.__call__": [[963, 977], ["transforms.CubeCrop.grid_sampling", "apply_mask.clone", "torch.randint", "transforms.CubeCrop.random_rotation", "mask.to.to.to", "transforms.apply_mask", "apply_mask.clone", "len", "torch.prod", "torch.prod"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.clone", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.apply_mask", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.clone", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "data_c", "=", "self", ".", "grid_sampling", "(", "data", ".", "clone", "(", ")", ")", "\n", "data_temp", "=", "data", ".", "clone", "(", ")", "\n", "i", "=", "torch", ".", "randint", "(", "0", ",", "len", "(", "data_c", ".", "pos", ")", ",", "(", "1", ",", ")", ")", "\n", "center", "=", "data_c", ".", "pos", "[", "i", "]", "\n", "min_square", "=", "center", "-", "self", ".", "c", "\n", "max_square", "=", "center", "+", "self", ".", "c", "\n", "data_temp", ".", "pos", "=", "data_temp", ".", "pos", "-", "center", "\n", "data_temp", "=", "self", ".", "random_rotation", "(", "data_temp", ")", "\n", "data_temp", ".", "pos", "=", "data_temp", ".", "pos", "+", "center", "\n", "mask", "=", "torch", ".", "prod", "(", "(", "data_temp", ".", "pos", "-", "min_square", ")", ">", "0", ",", "dim", "=", "1", ")", "*", "torch", ".", "prod", "(", "(", "max_square", "-", "data_temp", ".", "pos", ")", ">", "0", ",", "dim", "=", "1", ")", "\n", "mask", "=", "mask", ".", "to", "(", "torch", ".", "bool", ")", "\n", "data", "=", "apply_mask", "(", "data", ",", "mask", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.CubeCrop.__repr__": [[978, 980], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"{}(c={}, rotation={})\"", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "c", ",", "self", ".", "random_rotation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.EllipsoidCrop.__init__": [[987, 1009], ["features.Random3AxisRotation"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "a", ":", "float", "=", "1", ",", "b", ":", "float", "=", "1", ",", "c", ":", "float", "=", "1", ",", "rot_x", ":", "float", "=", "180", ",", "rot_y", ":", "float", "=", "180", ",", "rot_z", ":", "float", "=", "180", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Crop with respect to an ellipsoid.\n        the function of an ellipse is defined as:\n\n        Parameters\n        ----------\n        a: float, optional\n          half size of the cube\n        b: float_otional\n          rotation of the cube around x axis\n        c: float_otional\n          rotation of the cube around x axis\n\n\n        \"\"\"", "\n", "self", ".", "_a2", "=", "a", "**", "2", "\n", "self", ".", "_b2", "=", "b", "**", "2", "\n", "self", ".", "_c2", "=", "c", "**", "2", "\n", "self", ".", "random_rotation", "=", "Random3AxisRotation", "(", "rot_x", "=", "rot_x", ",", "rot_y", "=", "rot_y", ",", "rot_z", "=", "rot_z", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.EllipsoidCrop._compute_mask": [[1010, 1013], ["None"], "methods", ["None"], ["", "def", "_compute_mask", "(", "self", ",", "pos", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "mask", "=", "(", "pos", "[", ":", ",", "0", "]", "**", "2", "/", "self", ".", "_a2", "+", "pos", "[", ":", ",", "1", "]", "**", "2", "/", "self", ".", "_b2", "+", "pos", "[", ":", ",", "2", "]", "**", "2", "/", "self", ".", "_c2", ")", "<", "1", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.EllipsoidCrop.__call__": [[1014, 1023], ["apply_mask.clone", "torch.randint", "transforms.EllipsoidCrop.random_rotation", "transforms.EllipsoidCrop._compute_mask", "transforms.apply_mask", "len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.clone", "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.EllipsoidCrop._compute_mask", "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.apply_mask", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "data_temp", "=", "data", ".", "clone", "(", ")", "\n", "i", "=", "torch", ".", "randint", "(", "0", ",", "len", "(", "data", ".", "pos", ")", ",", "(", "1", ",", ")", ")", "\n", "data_temp", "=", "self", ".", "random_rotation", "(", "data_temp", ")", "\n", "center", "=", "data_temp", ".", "pos", "[", "i", "]", "\n", "data_temp", ".", "pos", "=", "data_temp", ".", "pos", "-", "center", "\n", "mask", "=", "self", ".", "_compute_mask", "(", "data_temp", ".", "pos", ")", "\n", "data", "=", "apply_mask", "(", "data", ",", "mask", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.EllipsoidCrop.__repr__": [[1024, 1027], ["numpy.sqrt", "numpy.sqrt", "numpy.sqrt"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"{}(a={}, b={}, c={}, rotation={})\"", ".", "format", "(", "\n", "self", ".", "__class__", ".", "__name__", ",", "np", ".", "sqrt", "(", "self", ".", "_a2", ")", ",", "np", ".", "sqrt", "(", "self", ".", "_b2", ")", ",", "np", ".", "sqrt", "(", "self", ".", "_c2", ")", ",", "self", ".", "random_rotation", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.DensityFilter.__init__": [[1045, 1049], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "radius_nn", ":", "float", "=", "0.04", ",", "min_num", ":", "int", "=", "6", ",", "skip_keys", ":", "List", "=", "[", "]", ")", ":", "\n", "        ", "self", ".", "radius_nn", "=", "radius_nn", "\n", "self", ".", "min_num", "=", "min_num", "\n", "self", ".", "skip_keys", "=", "skip_keys", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.DensityFilter.__call__": [[1050, 1057], ["torch_points_kernels.points_cpu.ball_query", "transforms.apply_mask"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.apply_mask"], ["", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "\n", "        ", "ind", ",", "dist", "=", "ball_query", "(", "data", ".", "pos", ",", "data", ".", "pos", ",", "radius", "=", "self", ".", "radius_nn", ",", "max_num", "=", "-", "1", ",", "mode", "=", "0", ")", "\n", "\n", "mask", "=", "(", "dist", ">", "0", ")", ".", "sum", "(", "1", ")", ">", "self", ".", "min_num", "\n", "data", "=", "apply_mask", "(", "data", ",", "mask", ",", "self", ".", "skip_keys", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.DensityFilter.__repr__": [[1058, 1061], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"{}(radius_nn={}, min_num={}, skip_keys={})\"", ".", "format", "(", "\n", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "radius_nn", ",", "self", ".", "min_num", ",", "self", ".", "skip_keys", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.IrregularSampling.__init__": [[1069, 1075], ["grid_transform.GridSampling3D"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "d_half", "=", "2.5", ",", "p", "=", "2", ",", "grid_size_center", "=", "0.1", ",", "skip_keys", "=", "[", "]", ")", ":", "\n", "\n", "        ", "self", ".", "d_half", "=", "d_half", "\n", "self", ".", "p", "=", "p", "\n", "self", ".", "skip_keys", "=", "skip_keys", "\n", "self", ".", "grid_sampling", "=", "GridSampling3D", "(", "grid_size_center", ",", "mode", "=", "\"last\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.IrregularSampling.__call__": [[1076, 1090], ["transforms.IrregularSampling.grid_sampling", "torch.randint", "torch.exp", "transforms.apply_mask", "apply_mask.clone", "len", "torch.rand", "numpy.log", "len", "torch.abs"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.apply_mask", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.clone", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "\n", "        ", "data_temp", "=", "self", ".", "grid_sampling", "(", "data", ".", "clone", "(", ")", ")", "\n", "i", "=", "torch", ".", "randint", "(", "0", ",", "len", "(", "data_temp", ".", "pos", ")", ",", "(", "1", ",", ")", ")", "\n", "center", "=", "data_temp", ".", "pos", "[", "i", "]", "\n", "\n", "d_p", "=", "(", "torch", ".", "abs", "(", "data", ".", "pos", "-", "center", ")", "**", "self", ".", "p", ")", ".", "sum", "(", "1", ")", "\n", "\n", "sigma_2", "=", "(", "self", ".", "d_half", "**", "self", ".", "p", ")", "/", "(", "2", "*", "np", ".", "log", "(", "2", ")", ")", "\n", "thresh", "=", "torch", ".", "exp", "(", "-", "d_p", "/", "(", "2", "*", "sigma_2", ")", ")", "\n", "\n", "mask", "=", "torch", ".", "rand", "(", "len", "(", "data", ".", "pos", ")", ")", "<", "thresh", "\n", "data", "=", "apply_mask", "(", "data", ",", "mask", ",", "self", ".", "skip_keys", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.IrregularSampling.__repr__": [[1091, 1093], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"{}(d_half={}, p={}, skip_keys={})\"", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "d_half", ",", "self", ".", "p", ",", "self", ".", "skip_keys", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.PeriodicSampling.__init__": [[1100, 1106], ["numpy.cos"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "period", "=", "0.1", ",", "prop", "=", "0.1", ",", "box_multiplier", "=", "1", ",", "skip_keys", "=", "[", "]", ")", ":", "\n", "\n", "        ", "self", ".", "pulse", "=", "2", "*", "np", ".", "pi", "/", "period", "\n", "self", ".", "thresh", "=", "np", ".", "cos", "(", "self", ".", "pulse", "*", "prop", "*", "period", "*", "0.5", ")", "\n", "self", ".", "box_multiplier", "=", "box_multiplier", "\n", "self", ".", "skip_keys", "=", "skip_keys", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.PeriodicSampling.__call__": [[1107, 1118], ["apply_mask.clone", "torch.norm", "transforms.apply_mask", "apply_mask.clone.pos.max", "apply_mask.clone.pos.min", "torch.cos", "torch.rand"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.clone", "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.apply_mask"], ["", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "\n", "        ", "data_temp", "=", "data", ".", "clone", "(", ")", "\n", "max_p", "=", "data_temp", ".", "pos", ".", "max", "(", "0", ")", "[", "0", "]", "\n", "min_p", "=", "data_temp", ".", "pos", ".", "min", "(", "0", ")", "[", "0", "]", "\n", "\n", "center", "=", "self", ".", "box_multiplier", "*", "torch", ".", "rand", "(", "3", ")", "*", "(", "max_p", "-", "min_p", ")", "+", "min_p", "\n", "d_p", "=", "torch", ".", "norm", "(", "data", ".", "pos", "-", "center", ",", "dim", "=", "1", ")", "\n", "mask", "=", "torch", ".", "cos", "(", "self", ".", "pulse", "*", "d_p", ")", ">", "self", ".", "thresh", "\n", "data", "=", "apply_mask", "(", "data", ",", "mask", ",", "self", ".", "skip_keys", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.PeriodicSampling.__repr__": [[1119, 1122], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"{}(pulse={}, thresh={}, box_mullti={}, skip_keys={})\"", ".", "format", "(", "\n", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "pulse", ",", "self", ".", "thresh", ",", "self", ".", "box_multiplier", ",", "self", ".", "skip_keys", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.apply_mask": [[753, 759], ["len", "len"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "", "def", "apply_mask", "(", "data", ",", "mask", ",", "skip_keys", "=", "[", "]", ")", ":", "\n", "    ", "size_pos", "=", "len", "(", "data", ".", "pos", ")", "\n", "for", "k", "in", "data", ".", "keys", ":", "\n", "        ", "if", "size_pos", "==", "len", "(", "data", "[", "k", "]", ")", "and", "k", "not", "in", "skip_keys", ":", "\n", "            ", "data", "[", "k", "]", "=", "data", "[", "k", "]", "[", "mask", "]", "\n", "", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.transforms.rw_mask": [[761, 776], ["numba.jit", "numpy.random.randint", "range", "len", "numpy.random.rand", "numpy.random.randint", "len", "len", "numpy.random.randint", "numpy.random.randint", "len", "len"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "@", "numba", ".", "jit", "(", "nopython", "=", "True", ",", "cache", "=", "True", ")", "\n", "def", "rw_mask", "(", "pos", ",", "ind", ",", "dist", ",", "mask_vertices", ",", "random_ratio", "=", "0.04", ",", "num_iter", "=", "5000", ")", ":", "\n", "    ", "rand_ind", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "len", "(", "pos", ")", ")", "\n", "for", "_", "in", "range", "(", "num_iter", ")", ":", "\n", "        ", "mask_vertices", "[", "rand_ind", "]", "=", "False", "\n", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "random_ratio", ":", "\n", "            ", "rand_ind", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "len", "(", "pos", ")", ")", "\n", "", "else", ":", "\n", "            ", "neighbors", "=", "ind", "[", "rand_ind", "]", "[", "dist", "[", "rand_ind", "]", ">", "0", "]", "\n", "if", "len", "(", "neighbors", ")", "==", "0", ":", "\n", "                ", "rand_ind", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "len", "(", "pos", ")", ")", "\n", "", "else", ":", "\n", "                ", "n_i", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "len", "(", "neighbors", ")", ")", "\n", "rand_ind", "=", "neighbors", "[", "n_i", "]", "\n", "", "", "", "return", "mask_vertices", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.filters.FCompose.__init__": [[19, 22], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "list_filter", ",", "boolean_operation", "=", "np", ".", "logical_and", ")", ":", "\n", "        ", "self", ".", "list_filter", "=", "list_filter", "\n", "self", ".", "boolean_operation", "=", "boolean_operation", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.filters.FCompose.__call__": [[23, 29], ["len", "filters.FCompose.boolean_operation", "filter_fn"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "assert", "len", "(", "self", ".", "list_filter", ")", ">", "0", "\n", "res", "=", "self", ".", "list_filter", "[", "0", "]", "(", "data", ")", "\n", "for", "filter_fn", "in", "self", ".", "list_filter", ":", "\n", "            ", "res", "=", "self", ".", "boolean_operation", "(", "res", ",", "filter_fn", "(", "data", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.filters.FCompose.__repr__": [[30, 36], ["filt.__repr__"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.schedulers.lr_schedulers.LRScheduler.__repr__"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "rep", "=", "\"{}([\"", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ")", "\n", "for", "filt", "in", "self", ".", "list_filter", ":", "\n", "            ", "rep", "=", "rep", "+", "filt", ".", "__repr__", "(", ")", "+", "\", \"", "\n", "", "rep", "=", "rep", "+", "\"])\"", "\n", "return", "rep", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.filters.PlanarityFilter.__init__": [[50, 53], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "thresh", "=", "0.3", ",", "is_leq", "=", "True", ")", ":", "\n", "        ", "self", ".", "thresh", "=", "thresh", "\n", "self", ".", "is_leq", "=", "is_leq", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.filters.PlanarityFilter.__call__": [[54, 62], ["torch_points3d.core.data_transform.features.compute_planarity", "getattr", "torch_points3d.core.data_transform.features.PCACompute"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.features.compute_planarity"], ["", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "if", "getattr", "(", "data", ",", "\"eigenvalues\"", ",", "None", ")", "is", "None", ":", "\n", "            ", "data", "=", "PCACompute", "(", ")", "(", "data", ")", "\n", "", "planarity", "=", "compute_planarity", "(", "data", ".", "eigenvalues", ")", "\n", "if", "self", ".", "is_leq", ":", "\n", "            ", "return", "planarity", "<=", "self", ".", "thresh", "\n", "", "else", ":", "\n", "            ", "return", "planarity", ">", "self", ".", "thresh", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.filters.PlanarityFilter.__repr__": [[63, 65], ["None"], "methods", ["None"], ["", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"{}(thresh={}, is_leq={})\"", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "thresh", ",", "self", ".", "is_leq", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.filters.RandomFilter.__init__": [[77, 79], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "thresh", "=", "0.3", ")", ":", "\n", "        ", "self", ".", "thresh", "=", "thresh", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.filters.RandomFilter.__call__": [[80, 82], ["random.random"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "return", "random", ".", "random", "(", ")", "<", "self", ".", "thresh", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.filters.RandomFilter.__repr__": [[83, 85], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"{}(thresh={})\"", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "thresh", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.sparse_transforms.RandomCoordsFlip.__init__": [[25, 48], ["set", "set", "range"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "ignored_axis", ",", "is_temporal", "=", "False", ",", "p", "=", "0.95", ")", ":", "\n", "        ", "\"\"\"This transform is used to flip sparse coords using a given axis. Usually, it would be x or y\n\n        Parameters\n        ----------\n        ignored_axis: str\n            Axis to be chosen between x, y, z\n        is_temporal : bool\n            Used to indicate if the pointcloud is actually 4 dimensional\n\n        Returns\n        -------\n        data: Data\n            Returns the same data object with only one point per voxel\n        \"\"\"", "\n", "assert", "0", "<=", "p", "<=", "1", ",", "\"p should be within 0 and 1. Higher probability reduce chance of flipping\"", "\n", "self", ".", "_is_temporal", "=", "is_temporal", "\n", "self", ".", "_D", "=", "4", "if", "is_temporal", "else", "3", "\n", "mapping", "=", "{", "\"x\"", ":", "0", ",", "\"y\"", ":", "1", ",", "\"z\"", ":", "2", "}", "\n", "self", ".", "_ignored_axis", "=", "[", "mapping", "[", "axis", "]", "for", "axis", "in", "ignored_axis", "]", "\n", "# Use the rest of axes for flipping.", "\n", "self", ".", "_horz_axes", "=", "set", "(", "range", "(", "self", ".", "_D", ")", ")", "-", "set", "(", "self", ".", "_ignored_axis", ")", "\n", "self", ".", "_p", "=", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.sparse_transforms.RandomCoordsFlip.__call__": [[49, 56], ["random.random", "torch.max"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "for", "curr_ax", "in", "self", ".", "_horz_axes", ":", "\n", "            ", "if", "random", ".", "random", "(", ")", "<", "self", ".", "_p", ":", "\n", "                ", "coords", "=", "data", ".", "coords", "\n", "coord_max", "=", "torch", ".", "max", "(", "coords", "[", ":", ",", "curr_ax", "]", ")", "\n", "data", ".", "coords", "[", ":", ",", "curr_ax", "]", "=", "coord_max", "-", "coords", "[", ":", ",", "curr_ax", "]", "\n", "", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.sparse_transforms.RandomCoordsFlip.__repr__": [[57, 60], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"{}(flip_axis={}, prob={}, is_temporal={})\"", ".", "format", "(", "\n", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "_horz_axes", ",", "self", ".", "_p", ",", "self", ".", "_is_temporal", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.feature_augment.NormalizeRGB.__init__": [[15, 17], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "normalize", "=", "True", ")", ":", "\n", "        ", "self", ".", "_normalize", "=", "normalize", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.feature_augment.NormalizeRGB.__call__": [[18, 23], ["hasattr", "data.rgb.float", "data.rgb.max", "data.rgb.min"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "assert", "hasattr", "(", "data", ",", "\"rgb\"", ")", "\n", "if", "not", "(", "data", ".", "rgb", ".", "max", "(", ")", "<=", "1", "and", "data", ".", "rgb", ".", "min", "(", ")", ">=", "0", ")", ":", "\n", "            ", "data", ".", "rgb", "=", "data", ".", "rgb", ".", "float", "(", ")", "/", "255.0", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.feature_augment.NormalizeRGB.__repr__": [[24, 26], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"{}({})\"", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "_normalize", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.feature_augment.ChromaticTranslation.__init__": [[37, 39], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "trans_range_ratio", "=", "1e-1", ")", ":", "\n", "        ", "self", ".", "trans_range_ratio", "=", "trans_range_ratio", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.feature_augment.ChromaticTranslation.__call__": [[40, 47], ["hasattr", "random.random", "torch.clamp", "data.rgb.max", "data.rgb.min", "torch.rand"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "assert", "hasattr", "(", "data", ",", "\"rgb\"", ")", "\n", "assert", "data", ".", "rgb", ".", "max", "(", ")", "<=", "1", "and", "data", ".", "rgb", ".", "min", "(", ")", ">=", "0", "\n", "if", "random", ".", "random", "(", ")", "<", "0.95", ":", "\n", "            ", "tr", "=", "(", "torch", ".", "rand", "(", "1", ",", "3", ")", "-", "0.5", ")", "*", "2", "*", "self", ".", "trans_range_ratio", "\n", "data", ".", "rgb", "=", "torch", ".", "clamp", "(", "tr", "+", "data", ".", "rgb", ",", "0", ",", "1", ")", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.feature_augment.ChromaticTranslation.__repr__": [[48, 50], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"{}(trans_range_ratio={})\"", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "trans_range_ratio", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.feature_augment.ChromaticAutoContrast.__init__": [[63, 66], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "randomize_blend_factor", "=", "True", ",", "blend_factor", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "randomize_blend_factor", "=", "randomize_blend_factor", "\n", "self", ".", "blend_factor", "=", "blend_factor", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.feature_augment.ChromaticAutoContrast.__call__": [[67, 83], ["hasattr", "random.random", "data.rgb.max", "data.rgb.min", "feats.min", "feats.max", "hi.max", "random.random"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "assert", "hasattr", "(", "data", ",", "\"rgb\"", ")", "\n", "assert", "data", ".", "rgb", ".", "max", "(", ")", "<=", "1", "and", "data", ".", "rgb", ".", "min", "(", ")", ">=", "0", "\n", "if", "random", ".", "random", "(", ")", "<", "0.2", ":", "\n", "            ", "feats", "=", "data", ".", "rgb", "\n", "lo", "=", "feats", ".", "min", "(", "0", ",", "keepdims", "=", "True", ")", "[", "0", "]", "\n", "hi", "=", "feats", ".", "max", "(", "0", ",", "keepdims", "=", "True", ")", "[", "0", "]", "\n", "assert", "hi", ".", "max", "(", ")", ">", "0", ",", "\"invalid color value. Color is supposed to be [0-255]\"", "\n", "\n", "scale", "=", "1.0", "/", "(", "hi", "-", "lo", ")", "\n", "\n", "contrast_feats", "=", "(", "feats", "-", "lo", ")", "*", "scale", "\n", "\n", "blend_factor", "=", "random", ".", "random", "(", ")", "if", "self", ".", "randomize_blend_factor", "else", "self", ".", "blend_factor", "\n", "data", ".", "rgb", "=", "(", "1", "-", "blend_factor", ")", "*", "feats", "+", "blend_factor", "*", "contrast_feats", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.feature_augment.ChromaticAutoContrast.__repr__": [[84, 87], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"{}(randomize_blend_factor={}, blend_factor={})\"", ".", "format", "(", "\n", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "randomize_blend_factor", ",", "self", ".", "blend_factor", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.feature_augment.ChromaticJitter.__init__": [[99, 101], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "std", "=", "0.01", ")", ":", "\n", "        ", "self", ".", "std", "=", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.feature_augment.ChromaticJitter.__call__": [[102, 110], ["hasattr", "random.random", "torch.randn", "torch.clamp", "data.rgb.max", "data.rgb.min"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "assert", "hasattr", "(", "data", ",", "\"rgb\"", ")", "\n", "assert", "data", ".", "rgb", ".", "max", "(", ")", "<=", "1", "and", "data", ".", "rgb", ".", "min", "(", ")", ">=", "0", "\n", "if", "random", ".", "random", "(", ")", "<", "0.95", ":", "\n", "            ", "noise", "=", "torch", ".", "randn", "(", "data", ".", "rgb", ".", "shape", "[", "0", "]", ",", "3", ")", "\n", "noise", "*=", "self", ".", "std", "\n", "data", ".", "rgb", "=", "torch", ".", "clamp", "(", "noise", "+", "data", ".", "rgb", ",", "0", ",", "1", ")", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.feature_augment.ChromaticJitter.__repr__": [[111, 113], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"{}(std={})\"", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.feature_augment.DropFeature.__init__": [[126, 129], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "drop_proba", "=", "0.2", ",", "feature_name", "=", "\"rgb\"", ")", ":", "\n", "        ", "self", ".", "_drop_proba", "=", "drop_proba", "\n", "self", ".", "_feature_name", "=", "feature_name", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.feature_augment.DropFeature.__call__": [[130, 135], ["hasattr", "random.random"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "assert", "hasattr", "(", "data", ",", "self", ".", "_feature_name", ")", "\n", "if", "random", ".", "random", "(", ")", "<", "self", ".", "_drop_proba", ":", "\n", "            ", "data", "[", "self", ".", "_feature_name", "]", "=", "data", "[", "self", ".", "_feature_name", "]", "*", "0", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.feature_augment.DropFeature.__repr__": [[136, 138], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"DropFeature: proba = {}, feature = {}\"", ".", "format", "(", "self", ".", "_drop_proba", ",", "self", ".", "_feature_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.feature_augment.Jitter.__init__": [[153, 157], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "mu", "=", "0", ",", "sigma", "=", "0.01", ",", "p", "=", "0.95", ")", ":", "\n", "        ", "self", ".", "mu", "=", "mu", "\n", "self", ".", "sigma", "=", "sigma", "\n", "self", ".", "p", "=", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.feature_augment.Jitter.__call__": [[158, 162], ["random.random", "torch.randn_like"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "self", ".", "p", ":", "\n", "            ", "data", ".", "x", "+=", "torch", ".", "randn_like", "(", "data", ".", "x", ")", "*", "self", ".", "sigma", "+", "self", ".", "mu", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.feature_augment.Jitter.__repr__": [[163, 165], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"Jitter(mu={}, sigma={})\"", ".", "format", "(", "self", ".", "mu", ",", "self", ".", "sigma", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.inference_transforms.ModelInference.__init__": [[24, 40], ["model_checkpoint.ModelCheckpoint", "BaseDataset.set_transform", "model_checkpoint.ModelCheckpoint.create_model", "inference_transforms.ModelInference.model.eval", "MockDataset", "instantiate_dataset"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.base_dataset.BaseDataset.set_transform", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.model_checkpoint.ModelCheckpoint.create_model", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.panoptic_tracker.InstanceAPMeter.eval", "home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.dataset_factory.instantiate_dataset"], ["def", "__init__", "(", "self", ",", "checkpoint_dir", ",", "model_name", ",", "weight_name", ",", "feat_name", ",", "num_classes", "=", "None", ",", "mock_dataset", "=", "True", ")", ":", "\n", "# Checkpoint", "\n", "        ", "from", "torch_points3d", ".", "datasets", ".", "base_dataset", "import", "BaseDataset", "\n", "from", "torch_points3d", ".", "datasets", ".", "dataset_factory", "import", "instantiate_dataset", "\n", "from", "torch_points3d", ".", "utils", ".", "mock", "import", "MockDataset", "\n", "import", "torch_points3d", ".", "metrics", ".", "model_checkpoint", "as", "model_checkpoint", "\n", "\n", "checkpoint", "=", "model_checkpoint", ".", "ModelCheckpoint", "(", "checkpoint_dir", ",", "model_name", ",", "weight_name", ",", "strict", "=", "True", ")", "\n", "if", "mock_dataset", ":", "\n", "            ", "dataset", "=", "MockDataset", "(", "num_classes", ")", "\n", "dataset", ".", "num_classes", "=", "num_classes", "\n", "", "else", ":", "\n", "            ", "dataset", "=", "instantiate_dataset", "(", "checkpoint", ".", "data_config", ")", "\n", "", "BaseDataset", ".", "set_transform", "(", "self", ",", "checkpoint", ".", "data_config", ")", "\n", "self", ".", "model", "=", "checkpoint", ".", "create_model", "(", "dataset", ",", "weight_name", "=", "weight_name", ")", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.inference_transforms.ModelInference.__call__": [[41, 43], ["None"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.inference_transforms.PointNetForward.__init__": [[63, 73], ["inference_transforms.ModelInference.__init__", "BaseDataset.remove_transform"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.datasets.base_dataset.BaseDataset.remove_transform"], ["def", "__init__", "(", "self", ",", "checkpoint_dir", ",", "model_name", ",", "weight_name", ",", "feat_name", ",", "num_classes", ",", "mock_dataset", "=", "True", ")", ":", "\n", "        ", "super", "(", "PointNetForward", ",", "self", ")", ".", "__init__", "(", "\n", "checkpoint_dir", ",", "model_name", ",", "weight_name", ",", "feat_name", ",", "num_classes", "=", "num_classes", ",", "mock_dataset", "=", "mock_dataset", "\n", ")", "\n", "self", ".", "feat_name", "=", "feat_name", "\n", "\n", "from", "torch_points3d", ".", "datasets", ".", "base_dataset", "import", "BaseDataset", "\n", "from", "torch_geometric", ".", "transforms", "import", "FixedPoints", ",", "GridSampling3D", "\n", "\n", "self", ".", "inference_transform", "=", "BaseDataset", ".", "remove_transform", "(", "self", ".", "inference_transform", ",", "[", "GridSampling3D", ",", "FixedPoints", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.inference_transforms.PointNetForward.__call__": [[74, 83], ["data.clone", "inference_transforms.PointNetForward.pos.float", "inference_transforms.PointNetForward.model.set_input", "inference_transforms.PointNetForward.model.get_local_feat().detach", "setattr", "inference_transforms.PointNetForward.inference_transform", "str", "inference_transforms.PointNetForward.model.get_local_feat"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.clone", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.set_input", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.pointnet.SegPointNetModel.get_local_feat"], ["", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "data_c", "=", "data", ".", "clone", "(", ")", "\n", "data_c", ".", "pos", "=", "data_c", ".", "pos", ".", "float", "(", ")", "\n", "if", "self", ".", "inference_transform", ":", "\n", "            ", "data_c", "=", "self", ".", "inference_transform", "(", "data_c", ")", "\n", "", "self", ".", "model", ".", "set_input", "(", "data_c", ",", "data", ".", "pos", ".", "device", ")", "\n", "feat", "=", "self", ".", "model", ".", "get_local_feat", "(", ")", ".", "detach", "(", ")", "\n", "setattr", "(", "data", ",", "str", "(", "self", ".", "feat_name", ")", ",", "feat", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.inference_transforms.PointNetForward.__repr__": [[84, 87], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"{}(model: {}, transform: {})\"", ".", "format", "(", "\n", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "model", ".", "__class__", ".", "__name__", ",", "self", ".", "inference_transform", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.precollate.NormalizeFeature.__init__": [[11, 14], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "feature_name", ",", "standardize", "=", "False", ")", ":", "\n", "        ", "self", ".", "_feature_name", "=", "feature_name", "\n", "self", ".", "_standardize", "=", "standardize", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.precollate.NormalizeFeature.__call__": [[15, 24], ["hasattr", "feature.std", "feature.mean", "feature.min", "feature.max", "feature.min"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.running_stats.RunningStats.std", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.lovasz_loss.mean"], ["", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "assert", "hasattr", "(", "data", ",", "self", ".", "_feature_name", ")", "\n", "feature", "=", "data", "[", "self", ".", "_feature_name", "]", "\n", "if", "self", ".", "_standardize", ":", "\n", "            ", "feature", "=", "(", "feature", "-", "feature", ".", "mean", "(", ")", ")", "/", "(", "feature", ".", "std", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "feature", "=", "(", "feature", "-", "feature", ".", "min", "(", ")", ")", "/", "(", "feature", ".", "max", "(", ")", "-", "feature", ".", "min", "(", ")", ")", "\n", "", "data", "[", "self", ".", "_feature_name", "]", "=", "feature", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.precollate.NormalizeFeature.__repr__": [[25, 27], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"{}(feature_name={}, standardize={})\"", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "_feature_name", ",", "self", ".", "_standardize", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.prebatchcollate.ClampBatchSize.__init__": [[15, 17], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "num_points", "=", "100000", ")", ":", "\n", "        ", "self", ".", "_num_points", "=", "num_points", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.prebatchcollate.ClampBatchSize.__call__": [[18, 41], ["isinstance", "enumerate", "datas_out.append", "sum", "len", "log.warning", "len", "len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "def", "__call__", "(", "self", ",", "datas", ")", ":", "\n", "        ", "assert", "isinstance", "(", "datas", ",", "list", ")", "\n", "batch_id", "=", "0", "\n", "batch_num_points", "=", "0", "\n", "removed_sample", "=", "False", "\n", "datas_out", "=", "[", "]", "\n", "for", "batch_id", ",", "d", "in", "enumerate", "(", "datas", ")", ":", "\n", "            ", "num_points", "=", "datas", "[", "batch_id", "]", ".", "pos", ".", "shape", "[", "0", "]", "\n", "batch_num_points", "+=", "num_points", "\n", "if", "self", ".", "_num_points", "and", "batch_num_points", ">", "self", ".", "_num_points", ":", "\n", "                ", "batch_num_points", "-=", "num_points", "\n", "removed_sample", "=", "True", "\n", "continue", "\n", "", "datas_out", ".", "append", "(", "d", ")", "\n", "\n", "", "if", "removed_sample", ":", "\n", "            ", "num_full_points", "=", "sum", "(", "len", "(", "d", ".", "pos", ")", "for", "d", "in", "datas", ")", "\n", "num_full_batch_size", "=", "len", "(", "datas_out", ")", "\n", "log", ".", "warning", "(", "\n", "f\"\\t\\tCannot fit {num_full_points} points into {self._num_points} points \"", "\n", "f\"limit. Truncating batch size at {num_full_batch_size} out of {len(datas)} with {batch_num_points}.\"", "\n", ")", "\n", "", "return", "datas_out", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.prebatchcollate.ClampBatchSize.__repr__": [[42, 44], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"{}(num_points={})\"", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "_num_points", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.__init__.LotteryTransform.__init__": [[114, 116], ["__init__.instantiate_transforms"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.__init__.instantiate_transforms"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.__init__.LotteryTransform.__call__": [[117, 123], ["numpy.random.randint", "transform", "len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.__init__.LotteryTransform.__repr__": [[124, 130], ["trans.__repr__"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.schedulers.lr_schedulers.LRScheduler.__repr__"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.__init__.ComposeTransform.__init__": [[153, 155], ["__init__.instantiate_transforms"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.__init__.instantiate_transforms"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.__init__.ComposeTransform.__call__": [[156, 158], ["__init__.ComposeTransform.transform"], "methods", ["None"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.__init__.ComposeTransform.__repr__": [[159, 165], ["trans.__repr__"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.schedulers.lr_schedulers.LRScheduler.__repr__"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.__init__.RandomParamTransform.__init__": [[214, 218], ["__init__.RandomParamTransform._instanciate_transform_with_random_params"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.__init__.RandomParamTransform._instanciate_transform_with_random_params"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.__init__.RandomParamTransform._instanciate_transform_with_random_params": [[219, 242], ["dict", "__init__.RandomParamTransform.transform_params.items", "omegaconf.dictconfig.DictConfig", "__init__.instantiate_transform", "dict", "float", "numpy.random.random", "int"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.__init__.instantiate_transform"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.__init__.RandomParamTransform.__call__": [[243, 246], ["__init__.RandomParamTransform._instanciate_transform_with_random_params", "__init__.RandomParamTransform.random_transform"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.__init__.RandomParamTransform._instanciate_transform_with_random_params"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.__init__.RandomParamTransform.__repr__": [[247, 249], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.__init__.instantiate_transform": [[48, 82], ["getattr", "getattr", "getattr.", "transform_option.get", "transform_option.get", "getattr", "getattr.", "getattr.", "getattr.", "ValueError"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.__init__.instantiate_transforms": [[84, 95], ["torch_geometric.Compose", "transforms.append", "__init__.instantiate_transform"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.__init__.instantiate_transform"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.__init__.instantiate_filters": [[97, 102], ["filters.FCompose", "filters.append", "__init__.instantiate_transform"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.__init__.instantiate_transform"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.features.Random3AxisRotation.__init__": [[48, 59], ["numpy.abs", "numpy.abs", "numpy.abs", "Exception"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "apply_rotation", ":", "bool", "=", "True", ",", "rot_x", ":", "float", "=", "None", ",", "rot_y", ":", "float", "=", "None", ",", "rot_z", ":", "float", "=", "None", ")", ":", "\n", "        ", "self", ".", "_apply_rotation", "=", "apply_rotation", "\n", "if", "apply_rotation", ":", "\n", "            ", "if", "(", "rot_x", "is", "None", ")", "and", "(", "rot_y", "is", "None", ")", "and", "(", "rot_z", "is", "None", ")", ":", "\n", "                ", "raise", "Exception", "(", "\"At least one rot_ should be defined\"", ")", "\n", "\n", "", "", "self", ".", "_rot_x", "=", "np", ".", "abs", "(", "rot_x", ")", "if", "rot_x", "else", "0", "\n", "self", ".", "_rot_y", "=", "np", ".", "abs", "(", "rot_y", ")", "if", "rot_y", "else", "0", "\n", "self", ".", "_rot_z", "=", "np", ".", "abs", "(", "rot_z", ")", "if", "rot_z", "else", "0", "\n", "\n", "self", ".", "_degree_angles", "=", "[", "self", ".", "_rot_x", ",", "self", ".", "_rot_y", ",", "self", ".", "_rot_z", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.features.Random3AxisRotation.generate_random_rotation_matrix": [[60, 68], ["torch.zeros", "enumerate", "torch_points3d.utils.geometry.euler_angles_to_rotation_matrix", "float", "random.random"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.utils.geometry.euler_angles_to_rotation_matrix"], ["", "def", "generate_random_rotation_matrix", "(", "self", ")", ":", "\n", "        ", "thetas", "=", "torch", ".", "zeros", "(", "3", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "for", "axis_ind", ",", "deg_angle", "in", "enumerate", "(", "self", ".", "_degree_angles", ")", ":", "\n", "            ", "if", "deg_angle", ">", "0", ":", "\n", "                ", "rand_deg_angle", "=", "random", ".", "random", "(", ")", "*", "2", "*", "deg_angle", "-", "deg_angle", "\n", "rand_radian_angle", "=", "float", "(", "rand_deg_angle", "*", "np", ".", "pi", ")", "/", "180.0", "\n", "thetas", "[", "axis_ind", "]", "=", "rand_radian_angle", "\n", "", "", "return", "euler_angles_to_rotation_matrix", "(", "thetas", ",", "random_order", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.features.Random3AxisRotation.__call__": [[69, 77], ["data.pos.float", "features.Random3AxisRotation.generate_random_rotation_matrix", "getattr", "data.norm.float"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.features.Random3AxisRotation.generate_random_rotation_matrix"], ["", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "if", "self", ".", "_apply_rotation", ":", "\n", "            ", "pos", "=", "data", ".", "pos", ".", "float", "(", ")", "\n", "M", "=", "self", ".", "generate_random_rotation_matrix", "(", ")", "\n", "data", ".", "pos", "=", "pos", "@", "M", ".", "T", "\n", "if", "getattr", "(", "data", ",", "\"norm\"", ",", "None", ")", "is", "not", "None", ":", "\n", "                ", "data", ".", "norm", "=", "data", ".", "norm", ".", "float", "(", ")", "@", "M", ".", "T", "\n", "", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.features.Random3AxisRotation.__repr__": [[78, 81], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"{}(apply_rotation={}, rot_x={}, rot_y={}, rot_z={})\"", ".", "format", "(", "\n", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "_apply_rotation", ",", "self", ".", "_rot_x", ",", "self", ".", "_rot_y", ",", "self", ".", "_rot_z", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.features.RandomTranslation.__init__": [[95, 98], ["torch.tensor", "torch.tensor"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "delta_max", ":", "List", "=", "[", "1.0", ",", "1.0", ",", "1.0", "]", ",", "delta_min", ":", "List", "=", "[", "-", "1.0", ",", "-", "1.0", ",", "-", "1.0", "]", ")", ":", "\n", "        ", "self", ".", "delta_max", "=", "torch", ".", "tensor", "(", "delta_max", ")", "\n", "self", ".", "delta_min", "=", "torch", ".", "tensor", "(", "delta_min", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.features.RandomTranslation.__call__": [[99, 104], ["torch.rand"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "pos", "=", "data", ".", "pos", "\n", "trans", "=", "torch", ".", "rand", "(", "3", ")", "*", "(", "self", ".", "delta_max", "-", "self", ".", "delta_min", ")", "+", "self", ".", "delta_min", "\n", "data", ".", "pos", "=", "pos", "+", "trans", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.features.RandomTranslation.__repr__": [[105, 107], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"{}(delta_min={}, delta_max={})\"", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "delta_min", ",", "self", ".", "delta_max", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.features.AddFeatsByKeys.__init__": [[139, 177], ["len", "Compose", "Exception", "len", "features.AddFeatByKey", "len", "len", "len", "len", "zip", "range", "range"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["def", "__init__", "(", "\n", "self", ",", "\n", "list_add_to_x", ":", "List", "[", "bool", "]", ",", "\n", "feat_names", ":", "List", "[", "str", "]", ",", "\n", "input_nc_feats", ":", "List", "[", "Optional", "[", "int", "]", "]", "=", "None", ",", "\n", "stricts", ":", "List", "[", "bool", "]", "=", "None", ",", "\n", "delete_feats", ":", "List", "[", "bool", "]", "=", "None", ",", "\n", ")", ":", "\n", "\n", "        ", "self", ".", "_feat_names", "=", "feat_names", "\n", "self", ".", "_list_add_to_x", "=", "list_add_to_x", "\n", "self", ".", "_delete_feats", "=", "delete_feats", "\n", "if", "self", ".", "_delete_feats", ":", "\n", "            ", "assert", "len", "(", "self", ".", "_delete_feats", ")", "==", "len", "(", "self", ".", "_feat_names", ")", "\n", "", "from", "torch_geometric", ".", "transforms", "import", "Compose", "\n", "\n", "num_names", "=", "len", "(", "feat_names", ")", "\n", "if", "num_names", "==", "0", ":", "\n", "            ", "raise", "Exception", "(", "\"Expected to have at least one feat_names\"", ")", "\n", "\n", "", "assert", "len", "(", "list_add_to_x", ")", "==", "num_names", "\n", "\n", "if", "input_nc_feats", ":", "\n", "            ", "assert", "len", "(", "input_nc_feats", ")", "==", "num_names", "\n", "", "else", ":", "\n", "            ", "input_nc_feats", "=", "[", "None", "for", "_", "in", "range", "(", "num_names", ")", "]", "\n", "\n", "", "if", "stricts", ":", "\n", "            ", "assert", "len", "(", "stricts", ")", "==", "num_names", "\n", "", "else", ":", "\n", "            ", "stricts", "=", "[", "True", "for", "_", "in", "range", "(", "num_names", ")", "]", "\n", "\n", "", "transforms", "=", "[", "\n", "AddFeatByKey", "(", "add_to_x", ",", "feat_name", ",", "input_nc_feat", "=", "input_nc_feat", ",", "strict", "=", "strict", ")", "\n", "for", "add_to_x", ",", "feat_name", ",", "input_nc_feat", ",", "strict", "in", "zip", "(", "list_add_to_x", ",", "feat_names", ",", "input_nc_feats", ",", "stricts", ")", "\n", "]", "\n", "\n", "self", ".", "transform", "=", "Compose", "(", "transforms", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.features.AddFeatsByKeys._process": [[178, 185], ["features.AddFeatsByKeys.transform", "zip", "delattr"], "methods", ["None"], ["", "def", "_process", "(", "self", ",", "data", ":", "Data", ")", ":", "\n", "        ", "data", "=", "self", ".", "transform", "(", "data", ")", "\n", "if", "self", ".", "_delete_feats", ":", "\n", "            ", "for", "feat_name", ",", "delete_feat", "in", "zip", "(", "self", ".", "_feat_names", ",", "self", ".", "_delete_feats", ")", ":", "\n", "                ", "if", "delete_feat", ":", "\n", "                    ", "delattr", "(", "data", ",", "feat_name", ")", "\n", "", "", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.features.AddFeatsByKeys.__call__": [[186, 192], ["isinstance", "features.AddFeatsByKeys._process", "features.AddFeatsByKeys._process"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.grid_transform.SaveOriginalPosId._process", "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.grid_transform.SaveOriginalPosId._process"], ["", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "if", "isinstance", "(", "data", ",", "list", ")", ":", "\n", "            ", "data", "=", "[", "self", ".", "_process", "(", "d", ")", "for", "d", "in", "data", "]", "\n", "", "else", ":", "\n", "            ", "data", "=", "self", ".", "_process", "(", "data", ")", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.features.AddFeatsByKeys.__repr__": [[193, 198], ["zip"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "msg", "=", "\"\"", "\n", "for", "f", ",", "a", "in", "zip", "(", "self", ".", "_feat_names", ",", "self", ".", "_list_add_to_x", ")", ":", "\n", "            ", "msg", "+=", "\"{}={}, \"", ".", "format", "(", "f", ",", "a", ")", "\n", "", "return", "\"{}({})\"", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "msg", "[", ":", "-", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.features.AddFeatByKey.__init__": [[215, 221], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "add_to_x", ",", "feat_name", ",", "input_nc_feat", "=", "None", ",", "strict", "=", "True", ")", ":", "\n", "\n", "        ", "self", ".", "_add_to_x", ":", "bool", "=", "add_to_x", "\n", "self", ".", "_feat_name", ":", "str", "=", "feat_name", "\n", "self", ".", "_input_nc_feat", "=", "input_nc_feat", "\n", "self", ".", "_strict", ":", "bool", "=", "strict", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.features.AddFeatByKey._process": [[222, 257], ["getattr", "getattr", "Exception", "Exception", "Exception", "feat.unsqueeze.unsqueeze.dim", "feat.unsqueeze.unsqueeze.unsqueeze", "torch.cat", "Exception", "feat.unsqueeze.unsqueeze.dim", "x.unsqueeze.unsqueeze.dim", "x.unsqueeze.unsqueeze.unsqueeze", "feat.unsqueeze.unsqueeze.dim", "feat.unsqueeze.unsqueeze.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat"], ["", "def", "_process", "(", "self", ",", "data", ":", "Data", ")", ":", "\n", "        ", "if", "not", "self", ".", "_add_to_x", ":", "\n", "            ", "return", "data", "\n", "", "feat", "=", "getattr", "(", "data", ",", "self", ".", "_feat_name", ",", "None", ")", "\n", "if", "feat", "is", "None", ":", "\n", "            ", "if", "self", ".", "_strict", ":", "\n", "                ", "raise", "Exception", "(", "\"Data should contain the attribute {}\"", ".", "format", "(", "self", ".", "_feat_name", ")", ")", "\n", "", "else", ":", "\n", "                ", "return", "data", "\n", "", "", "else", ":", "\n", "            ", "if", "self", ".", "_input_nc_feat", ":", "\n", "                ", "feat_dim", "=", "1", "if", "feat", ".", "dim", "(", ")", "==", "1", "else", "feat", ".", "shape", "[", "-", "1", "]", "\n", "if", "self", ".", "_input_nc_feat", "!=", "feat_dim", "and", "self", ".", "_strict", ":", "\n", "                    ", "raise", "Exception", "(", "\"The shape of feat: {} doesn t match {}\"", ".", "format", "(", "feat", ".", "shape", ",", "self", ".", "_input_nc_feat", ")", ")", "\n", "", "", "x", "=", "getattr", "(", "data", ",", "\"x\"", ",", "None", ")", "\n", "if", "x", "is", "None", ":", "\n", "                ", "if", "self", ".", "_strict", "and", "data", ".", "pos", ".", "shape", "[", "0", "]", "!=", "feat", ".", "shape", "[", "0", "]", ":", "\n", "                    ", "raise", "Exception", "(", "\"We expected to have an attribute x\"", ")", "\n", "", "if", "feat", ".", "dim", "(", ")", "==", "1", ":", "\n", "                    ", "feat", "=", "feat", ".", "unsqueeze", "(", "-", "1", ")", "\n", "", "data", ".", "x", "=", "feat", "\n", "", "else", ":", "\n", "                ", "if", "x", ".", "shape", "[", "0", "]", "==", "feat", ".", "shape", "[", "0", "]", ":", "\n", "                    ", "if", "x", ".", "dim", "(", ")", "==", "1", ":", "\n", "                        ", "x", "=", "x", ".", "unsqueeze", "(", "-", "1", ")", "\n", "", "if", "feat", ".", "dim", "(", ")", "==", "1", ":", "\n", "                        ", "feat", "=", "feat", ".", "unsqueeze", "(", "-", "1", ")", "\n", "", "data", ".", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "feat", "]", ",", "dim", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "Exception", "(", "\n", "\"The tensor x and {} can't be concatenated, x: {}, feat: {}\"", ".", "format", "(", "\n", "self", ".", "_feat_name", ",", "x", ".", "pos", ".", "shape", "[", "0", "]", ",", "feat", ".", "pos", ".", "shape", "[", "0", "]", "\n", ")", "\n", ")", "\n", "", "", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.features.AddFeatByKey.__call__": [[258, 264], ["isinstance", "features.AddFeatByKey._process", "features.AddFeatByKey._process"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.grid_transform.SaveOriginalPosId._process", "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.grid_transform.SaveOriginalPosId._process"], ["", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "if", "isinstance", "(", "data", ",", "list", ")", ":", "\n", "            ", "data", "=", "[", "self", ".", "_process", "(", "d", ")", "for", "d", "in", "data", "]", "\n", "", "else", ":", "\n", "            ", "data", "=", "self", ".", "_process", "(", "data", ")", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.features.AddFeatByKey.__repr__": [[265, 268], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"{}(add_to_x: {}, feat_name: {}, strict: {})\"", ".", "format", "(", "\n", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "_add_to_x", ",", "self", ".", "_feat_name", ",", "self", ".", "_strict", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.features.NormalFeature.__call__": [[295, 305], ["getattr", "NotImplementedError", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat"], ["def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "if", "getattr", "(", "data", ",", "\"norm\"", ",", "None", ")", "is", "None", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"TODO: Implement normal computation\"", ")", "\n", "\n", "", "norm", "=", "data", ".", "norm", "\n", "if", "data", ".", "x", "is", "None", ":", "\n", "            ", "data", ".", "x", "=", "norm", "\n", "", "else", ":", "\n", "            ", "data", ".", "x", "=", "torch", ".", "cat", "(", "[", "data", ".", "x", ",", "norm", "]", ",", "-", "1", ")", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.features.PCACompute.__call__": [[350, 355], ["features.batch_pca", "eval.squeeze", "evec.squeeze"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.features.batch_pca"], ["def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "eval", ",", "evec", "=", "batch_pca", "(", "data", ".", "pos", ")", "\n", "data", ".", "eigenvalues", "=", "eval", ".", "squeeze", "(", "0", ")", "\n", "data", ".", "eigenvectors", "=", "evec", ".", "squeeze", "(", "0", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.features.PCACompute.__repr__": [[356, 358], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"{}()\"", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.features.PCAComputePointwise.__init__": [[397, 408], ["torch.cuda.is_available", "torch.cuda.is_available"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "num_neighbors", "=", "40", ",", "r", "=", "None", ",", "use_full_pos", "=", "False", ",", "use_cuda", "=", "False", ",", "\n", "use_faiss", "=", "True", ",", "ncells", "=", "None", ",", "nprobes", "=", "10", ",", "chunk_size", "=", "1000000", ")", ":", "\n", "        ", "self", ".", "num_neighbors", "=", "num_neighbors", "\n", "self", ".", "r", "=", "r", "\n", "self", ".", "use_full_pos", "=", "use_full_pos", "\n", "self", ".", "use_cuda", "=", "use_cuda", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "self", ".", "use_faiss", "=", "use_faiss", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "self", ".", "ncells", "=", "ncells", "\n", "self", ".", "nprobes", "=", "nprobes", "\n", "self", ".", "chunk_size", "=", "chunk_size", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.features.PCAComputePointwise._process": [[409, 475], ["math.ceil", "math.ceil", "math.ceil", "math.ceil", "range", "torch.cat", "torch.cat", "torch.cat.to", "torch.cat.to", "getattr", "xyz_query.contiguous.contiguous.cuda", "xyz_search.contiguous.contiguous.cuda", "torch_points3d.core.spatial_ops.neighbour_finder.RadiusNeighbourFinder", "features.batch_pca", "evec.transpose().flatten.transpose().flatten.transpose().flatten", "torch.cat.append", "torch.cat.append", "getattr", "torch_points3d.core.spatial_ops.neighbour_finder.RadiusNeighbourFinder.find_neighbours", "torch_points3d.core.spatial_ops.neighbour_finder.FAISSGPUKNNNeighbourFinder", "torch_points3d.core.spatial_ops.neighbour_finder.FAISSGPUKNNNeighbourFinder.", "xyz_query.contiguous.contiguous.contiguous", "xyz_search.contiguous.contiguous.contiguous", "d_keops.argKmin", "xyz_neigh_batch.cpu", "xyz_search.contiguous.contiguous.unsqueeze", "xyz_query.contiguous.contiguous.unsqueeze", "pykeops.torch.LazyTensor", "pykeops.torch.LazyTensor", "pykeops.torch.LazyTensor", "pykeops.torch.LazyTensor", "evec.transpose().flatten.transpose().flatten.transpose", "xyz_query[].double", "xyz_search[].double"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.csr.CSRData.cuda", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.csr.CSRData.cuda", "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.features.batch_pca", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.spatial_ops.neighbour_finder.DenseRadiusNeighbourFinder.find_neighbours", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.csr.CSRData.cpu"], ["", "def", "_process", "(", "self", ",", "data", ":", "Data", ")", ":", "\n", "        ", "assert", "getattr", "(", "data", ",", "'pos'", ",", "None", ")", "is", "not", "None", ",", "\"Data must contain a 'pos' attribute.\"", "\n", "assert", "not", "self", ".", "use_full_pos", "or", "getattr", "(", "data", ",", "'full_pos'", ",", "None", ")", "is", "not", "None", ",", "\"Data must contain a 'full_pos' attribute.\"", "\n", "\n", "# Recover the query and search clouds", "\n", "xyz_query", "=", "data", ".", "pos", "\n", "xyz_search", "=", "data", ".", "full_pos", "if", "self", ".", "use_full_pos", "else", "data", ".", "pos", "\n", "\n", "# Move computation to CUDA if required", "\n", "input_device", "=", "xyz_query", ".", "device", "\n", "if", "self", ".", "use_cuda", "and", "not", "xyz_query", ".", "is_cuda", "and", "not", "self", ".", "use_faiss", ":", "\n", "            ", "xyz_query", "=", "xyz_query", ".", "cuda", "(", ")", "\n", "xyz_search", "=", "xyz_search", ".", "cuda", "(", ")", "\n", "\n", "# Compute the neighborhoods", "\n", "", "if", "self", ".", "r", "is", "not", "None", ":", "\n", "# Radius-NN search with torch_points_kernel", "\n", "            ", "sampler", "=", "RadiusNeighbourFinder", "(", "\n", "self", ".", "r", ",", "self", ".", "num_neighbors", ",", "conv_type", "=", "'DENSE'", ")", "\n", "neighbors", "=", "sampler", ".", "find_neighbours", "(", "\n", "xyz_search", ".", "unsqueeze", "(", "0", ")", ",", "xyz_query", ".", "unsqueeze", "(", "0", ")", ")", "[", "0", "]", "\n", "", "elif", "self", ".", "use_faiss", ":", "\n", "# K-NN search with FAISS", "\n", "            ", "nn_finder", "=", "FAISSGPUKNNNeighbourFinder", "(", "\n", "self", ".", "num_neighbors", ",", "ncells", "=", "self", ".", "ncells", ",", "nprobes", "=", "self", ".", "nprobes", ")", "\n", "neighbors", "=", "nn_finder", "(", "xyz_search", ",", "xyz_query", ",", "None", ",", "None", ")", "\n", "", "else", ":", "\n", "# K-NN search with KeOps. If the number of points is greater", "\n", "# than 16 millions, KeOps requires double precision.", "\n", "            ", "xyz_query", "=", "xyz_query", ".", "contiguous", "(", ")", "\n", "xyz_search", "=", "xyz_search", ".", "contiguous", "(", ")", "\n", "if", "xyz_search", ".", "shape", "[", "0", "]", ">", "1.6e7", ":", "\n", "                ", "xyz_query_keops", "=", "LazyTensor", "(", "xyz_query", "[", ":", ",", "None", ",", ":", "]", ".", "double", "(", ")", ")", "\n", "xyz_search_keops", "=", "LazyTensor", "(", "xyz_search", "[", "None", ",", ":", ",", ":", "]", ".", "double", "(", ")", ")", "\n", "", "else", ":", "\n", "                ", "xyz_query_keops", "=", "LazyTensor", "(", "xyz_query", "[", ":", ",", "None", ",", ":", "]", ")", "\n", "xyz_search_keops", "=", "LazyTensor", "(", "xyz_search", "[", "None", ",", ":", ",", ":", "]", ")", "\n", "", "d_keops", "=", "(", "(", "xyz_query_keops", "-", "xyz_search_keops", ")", "**", "2", ")", ".", "sum", "(", "dim", "=", "2", ")", "\n", "neighbors", "=", "d_keops", ".", "argKmin", "(", "self", ".", "num_neighbors", ",", "dim", "=", "1", ")", "\n", "# raise NotImplementedError(", "\n", "#     \"Fast K-NN search has not been implemented yet. Please \"", "\n", "#     \"consider using radius search instead.\")", "\n", "\n", "# Compute PCA for each neighborhood", "\n", "# Note: this is surprisingly slow on GPU, so better run on CPU", "\n", "", "eigenvalues", "=", "[", "]", "\n", "eigenvectors", "=", "[", "]", "\n", "n_chunks", "=", "math", ".", "ceil", "(", "neighbors", ".", "shape", "[", "0", "]", "/", "self", ".", "chunk_size", ")", "\n", "for", "i", "in", "range", "(", "n_chunks", ")", ":", "\n", "            ", "xyz_neigh_batch", "=", "xyz_search", "[", "\n", "neighbors", "[", "i", "*", "self", ".", "chunk_size", ":", "(", "i", "+", "1", ")", "*", "self", ".", "chunk_size", "]", "]", "\n", "eval", ",", "evec", "=", "batch_pca", "(", "xyz_neigh_batch", ".", "cpu", "(", ")", ")", "\n", "evec", "=", "evec", ".", "transpose", "(", "2", ",", "1", ")", ".", "flatten", "(", "1", ")", "\n", "eigenvalues", ".", "append", "(", "eval", ")", "\n", "eigenvectors", ".", "append", "(", "evec", ")", "\n", "", "eigenvalues", "=", "torch", ".", "cat", "(", "eigenvalues", ",", "dim", "=", "0", ")", "\n", "eigenvectors", "=", "torch", ".", "cat", "(", "eigenvectors", ",", "dim", "=", "0", ")", "\n", "\n", "# Save eigendecomposition results in data attributes", "\n", "data", ".", "eigenvalues", "=", "eigenvalues", ".", "to", "(", "input_device", ")", "\n", "data", ".", "eigenvectors", "=", "eigenvectors", ".", "to", "(", "input_device", ")", "\n", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.features.PCAComputePointwise.__call__": [[476, 482], ["isinstance", "features.PCAComputePointwise._process", "features.PCAComputePointwise._process", "tqdm.auto.tqdm.auto.tqdm"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.grid_transform.SaveOriginalPosId._process", "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.grid_transform.SaveOriginalPosId._process"], ["", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "if", "isinstance", "(", "data", ",", "list", ")", ":", "\n", "            ", "data", "=", "[", "self", ".", "_process", "(", "d", ")", "for", "d", "in", "tq", "(", "data", ")", "]", "\n", "", "else", ":", "\n", "            ", "data", "=", "self", ".", "_process", "(", "data", ")", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.features.PCAComputePointwise.__repr__": [[483, 486], ["features.PCAComputePointwise.__dict__.items"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "attr_repr", "=", "', '", ".", "join", "(", "[", "f'{k}={v}'", "for", "k", ",", "v", "in", "self", ".", "__dict__", ".", "items", "(", ")", "]", ")", "\n", "return", "f'{self.__class__.__name__}({attr_repr})'", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.features.EigenFeatures.__init__": [[524, 531], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "norm", "=", "True", ",", "linearity", "=", "True", ",", "planarity", "=", "True", ",", "\n", "scattering", "=", "True", ",", "temperature", "=", "None", ")", ":", "\n", "        ", "self", ".", "norm", "=", "norm", "\n", "self", ".", "linearity", "=", "linearity", "\n", "self", ".", "planarity", "=", "planarity", "\n", "self", ".", "scattering", "=", "scattering", "\n", "self", ".", "temperature", "=", "temperature", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.features.EigenFeatures._process": [[532, 577], ["data.eigenvalues[].sqrt().squeeze", "data.eigenvalues[].sqrt().squeeze", "getattr", "getattr", "data.eigenvalues[].sqrt().squeeze", "data.eigenvalues[].sqrt", "data.eigenvalues[].sqrt", "values.sum().view", "data.eigenvalues[].sqrt", "torch.cat", "values.sum", "linearity.view", "planarity.view", "scattering.view"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat"], ["", "def", "_process", "(", "self", ",", "data", ":", "Data", ")", ":", "\n", "        ", "assert", "getattr", "(", "data", ",", "'eigenvalues'", ",", "None", ")", "is", "not", "None", ",", "\"Data must contain an 'eigenvalues' attribute.\"", "\n", "assert", "getattr", "(", "data", ",", "'eigenvectors'", ",", "None", ")", "is", "not", "None", ",", "\"Data must contain an 'eigenvectors' attribute.\"", "\n", "\n", "if", "self", ".", "norm", ":", "\n", "# The normal is the eigenvector carried by the smallest", "\n", "# eigenvalue", "\n", "            ", "data", ".", "norm", "=", "data", ".", "eigenvectors", "[", ":", ",", ":", "3", "]", "\n", "\n", "# Eigenvalues: 0 <= l0 <= l1 <= l2", "\n", "# Following, [Yang et al. 2015] we use the sqrt of eigenvalues", "\n", "", "v0", "=", "data", ".", "eigenvalues", "[", ":", ",", "0", "]", ".", "sqrt", "(", ")", ".", "squeeze", "(", ")", "\n", "v1", "=", "data", ".", "eigenvalues", "[", ":", ",", "1", "]", ".", "sqrt", "(", ")", ".", "squeeze", "(", ")", "\n", "v2", "=", "data", ".", "eigenvalues", "[", ":", ",", "2", "]", ".", "sqrt", "(", ")", ".", "squeeze", "(", ")", "+", "1e-6", "\n", "\n", "# Compute the eigen features", "\n", "linearity", "=", "(", "v2", "-", "v1", ")", "/", "v2", "\n", "planarity", "=", "(", "v1", "-", "v0", ")", "/", "v2", "\n", "scattering", "=", "v0", "/", "v2", "\n", "\n", "# Compute the softmax version of the features, for more", "\n", "# opinionated geometric information. As a heuristic, set", "\n", "# temperature=5 for clouds of 30 points or more.", "\n", "if", "self", ".", "temperature", ":", "\n", "            ", "values", "=", "(", "self", ".", "temperature", "*", "torch", ".", "cat", "(", "[", "\n", "linearity", ".", "view", "(", "-", "1", ",", "1", ")", ",", "\n", "planarity", ".", "view", "(", "-", "1", ",", "1", ")", ",", "\n", "scattering", ".", "view", "(", "-", "1", ",", "1", ")", "]", ",", "dim", "=", "1", ")", ")", ".", "exp", "(", ")", "\n", "values", "=", "values", "/", "values", ".", "sum", "(", "dim", "=", "1", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "linearity", "=", "values", "[", ":", ",", "0", "]", "\n", "planarity", "=", "values", "[", ":", ",", "1", "]", "\n", "scattering", "=", "values", "[", ":", ",", "2", "]", "\n", "\n", "", "if", "self", ".", "linearity", ":", "\n", "            ", "data", ".", "linearity", "=", "linearity", "\n", "\n", "", "if", "self", ".", "planarity", ":", "\n", "            ", "data", ".", "planarity", "=", "planarity", "\n", "\n", "", "if", "self", ".", "scattering", ":", "\n", "            ", "data", ".", "scattering", "=", "scattering", "\n", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.features.EigenFeatures.__call__": [[578, 584], ["isinstance", "features.EigenFeatures._process", "features.EigenFeatures._process"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.grid_transform.SaveOriginalPosId._process", "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.grid_transform.SaveOriginalPosId._process"], ["", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "if", "isinstance", "(", "data", ",", "list", ")", ":", "\n", "            ", "data", "=", "[", "self", ".", "_process", "(", "d", ")", "for", "d", "in", "data", "]", "\n", "", "else", ":", "\n", "            ", "data", "=", "self", ".", "_process", "(", "data", ")", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.features.EigenFeatures.__repr__": [[585, 588], ["features.EigenFeatures.__dict__.items"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "attr_repr", "=", "', '", ".", "join", "(", "[", "f'{k}={v}'", "for", "k", ",", "v", "in", "self", ".", "__dict__", ".", "items", "(", ")", "]", ")", "\n", "return", "f'{self.__class__.__name__}({attr_repr})'", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.features.AddOnes.__call__": [[595, 599], ["torch.ones().float", "torch.ones"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "num_nodes", "=", "data", ".", "pos", ".", "shape", "[", "0", "]", "\n", "data", ".", "ones", "=", "torch", ".", "ones", "(", "(", "num_nodes", ",", "1", ")", ")", ".", "float", "(", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.features.AddOnes.__repr__": [[600, 602], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"{}()\"", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.features.XYZFeature.__init__": [[617, 628], ["features.XYZFeature._axis.append", "features.XYZFeature._axis.append", "features.XYZFeature._axis.append"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append"], ["def", "__init__", "(", "self", ",", "add_x", "=", "False", ",", "add_y", "=", "False", ",", "add_z", "=", "True", ")", ":", "\n", "        ", "self", ".", "_axis", "=", "[", "]", "\n", "axis_names", "=", "[", "\"x\"", ",", "\"y\"", ",", "\"z\"", "]", "\n", "if", "add_x", ":", "\n", "            ", "self", ".", "_axis", ".", "append", "(", "0", ")", "\n", "", "if", "add_y", ":", "\n", "            ", "self", ".", "_axis", ".", "append", "(", "1", ")", "\n", "", "if", "add_z", ":", "\n", "            ", "self", ".", "_axis", ".", "append", "(", "2", ")", "\n", "\n", "", "self", ".", "_axis_names", "=", "[", "axis_names", "[", "idx_axis", "]", "for", "idx_axis", "in", "self", ".", "_axis", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.features.XYZFeature.__call__": [[629, 635], ["zip", "data.pos[].clone", "setattr"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.image.ImageData.clone"], ["", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "assert", "data", ".", "pos", "is", "not", "None", "\n", "for", "axis_name", ",", "id_axis", "in", "zip", "(", "self", ".", "_axis_names", ",", "self", ".", "_axis", ")", ":", "\n", "            ", "f", "=", "data", ".", "pos", "[", ":", ",", "id_axis", "]", ".", "clone", "(", ")", "\n", "setattr", "(", "data", ",", "\"pos_{}\"", ".", "format", "(", "axis_name", ")", ",", "f", ")", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.features.XYZFeature.__repr__": [[636, 638], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"{}(axis={})\"", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "_axis_names", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.features.compute_planarity": [[271, 287], ["None"], "function", ["None"], ["", "", "def", "compute_planarity", "(", "eigenvalues", ")", ":", "\n", "    ", "r\"\"\"\n    compute the planarity with respect to the eigenvalues of the covariance matrix of the pointcloud\n    let\n    :math:`\\lambda_1, \\lambda_2, \\lambda_3` be the eigenvalues st:\n\n    .. math::\n        \\lambda_1 \\leq \\lambda_2 \\leq \\lambda_3\n\n    then planarity is defined as:\n\n    .. math::\n        planarity = \\frac{\\lambda_2 - \\lambda_1}{\\lambda_3}\n    \"\"\"", "\n", "\n", "return", "(", "eigenvalues", "[", "1", "]", "-", "eigenvalues", "[", "0", "]", ")", "/", "eigenvalues", "[", "2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.features.batch_pca": [[307, 330], ["torch.symeig", "torch.where", "torch.ones", "torch.eye", "xyz.dim", "xyz.unsqueeze", "xyz.mean().unsqueeze", "pos_centered.transpose().bmm", "torch.logical_and", "xyz.dim", "eval.isnan().any", "evec.flatten().isnan().any", "torch.where", "xyz.mean", "pos_centered.transpose", "eval.isnan", "evec.flatten().isnan", "evec.flatten"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.lovasz_loss.mean", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.lovasz_loss.isnan", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.lovasz_loss.isnan"], ["", "", "def", "batch_pca", "(", "xyz", ")", ":", "\n", "    ", "\"\"\"\n    Compute the PCA of a batch of point clouds of size (*, N, M).\n    \"\"\"", "\n", "assert", "2", "<=", "xyz", ".", "dim", "(", ")", "<=", "3", "\n", "xyz", "=", "xyz", ".", "unsqueeze", "(", "0", ")", "if", "xyz", ".", "dim", "(", ")", "==", "2", "else", "xyz", "\n", "\n", "pos_centered", "=", "xyz", "-", "xyz", ".", "mean", "(", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", "\n", "cov_matrix", "=", "pos_centered", ".", "transpose", "(", "1", ",", "2", ")", ".", "bmm", "(", "pos_centered", ")", "/", "pos_centered", ".", "shape", "[", "1", "]", "\n", "eval", ",", "evec", "=", "torch", ".", "symeig", "(", "cov_matrix", ",", "eigenvectors", "=", "True", ")", "\n", "\n", "# If Nan values are computed, return equal eigenvalues and", "\n", "# Identity eigenvectors", "\n", "idx_nan", "=", "torch", ".", "where", "(", "torch", ".", "logical_and", "(", "\n", "eval", ".", "isnan", "(", ")", ".", "any", "(", "1", ")", ",", "evec", ".", "flatten", "(", "1", ")", ".", "isnan", "(", ")", ".", "any", "(", "1", ")", ")", ")", "\n", "eval", "[", "idx_nan", "]", "=", "torch", ".", "ones", "(", "3", ",", "dtype", "=", "eval", ".", "dtype", ",", "device", "=", "xyz", ".", "device", ")", "\n", "evec", "[", "idx_nan", "]", "=", "torch", ".", "eye", "(", "3", ",", "dtype", "=", "evec", ".", "dtype", ",", "device", "=", "xyz", ".", "device", ")", "\n", "\n", "# Precision errors may cause close-to-zero eigenvalues to be", "\n", "# negative. Hard-code these to zero", "\n", "eval", "[", "torch", ".", "where", "(", "eval", "<", "0", ")", "]", "=", "0", "\n", "\n", "return", "eval", ",", "evec", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.grid_transform.GridSampling3D.__init__": [[108, 122], ["log.warning", "log.warning"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ",", "quantize_coords", "=", "False", ",", "mode", "=", "\"mean\"", ",", "verbose", "=", "False", ",", "\n", "setattr_full_pos", "=", "False", ")", ":", "\n", "        ", "self", ".", "_grid_size", "=", "size", "\n", "self", ".", "_quantize_coords", "=", "quantize_coords", "\n", "self", ".", "_mode", "=", "mode", "\n", "self", ".", "_setattr_full_pos", "=", "setattr_full_pos", "\n", "if", "verbose", ":", "\n", "            ", "log", ".", "warning", "(", "\n", "\"If you need to keep track of the position of your points, use \"", "\n", "\"SaveOriginalPosId transform before using GridSampling3D.\"", ")", "\n", "\n", "if", "self", ".", "_mode", "==", "\"last\"", ":", "\n", "                ", "log", ".", "warning", "(", "\n", "\"The tensors within data will be shuffled each time this \"", "\n", "\"transform is applied. Be careful that if an attribute \"", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.grid_transform.GridSampling3D._process": [[125, 152], ["torch.round", "torch.round", "torch.round", "torch.round", "torch_geometric.nn.pool.consecutive.consecutive_cluster", "grid_transform.group_data", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "grid_transform.shuffle_data", "torch_cluster.grid_cluster", "torch_geometric.nn.voxel_grid", "coords[].int", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.grid_transform.group_data", "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.grid_transform.shuffle_data"], ["", "", "", "def", "_process", "(", "self", ",", "data", ")", ":", "\n", "        ", "if", "self", ".", "_mode", "==", "\"last\"", ":", "\n", "            ", "data", "=", "shuffle_data", "(", "data", ")", "\n", "\n", "", "full_pos", "=", "data", ".", "pos", "\n", "coords", "=", "torch", ".", "round", "(", "(", "data", ".", "pos", ")", "/", "self", ".", "_grid_size", ")", "\n", "if", "\"batch\"", "not", "in", "data", ":", "\n", "            ", "cluster", "=", "grid_cluster", "(", "coords", ",", "torch", ".", "tensor", "(", "[", "1", ",", "1", ",", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "cluster", "=", "voxel_grid", "(", "coords", ",", "data", ".", "batch", ",", "1", ")", "\n", "", "cluster", ",", "unique_pos_indices", "=", "consecutive_cluster", "(", "cluster", ")", "\n", "\n", "data", "=", "group_data", "(", "data", ",", "cluster", ",", "unique_pos_indices", ",", "mode", "=", "self", ".", "_mode", ")", "\n", "if", "self", ".", "_quantize_coords", ":", "\n", "            ", "data", ".", "coords", "=", "coords", "[", "unique_pos_indices", "]", ".", "int", "(", ")", "\n", "\n", "", "data", ".", "grid_size", "=", "torch", ".", "tensor", "(", "[", "self", ".", "_grid_size", "]", ")", "\n", "\n", "# Keep track of the initial full-resolution point cloud for", "\n", "# later use. Typically needed for local features computation.", "\n", "# However, for obvious memory-wary considerations, it is", "\n", "# recommended to delete the 'full_pos' attribute as soon as it", "\n", "# is no longer needed.", "\n", "if", "self", ".", "_setattr_full_pos", ":", "\n", "            ", "data", ".", "full_pos", "=", "full_pos", "\n", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.grid_transform.GridSampling3D.__call__": [[153, 159], ["isinstance", "grid_transform.GridSampling3D._process", "grid_transform.GridSampling3D._process"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.grid_transform.SaveOriginalPosId._process", "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.grid_transform.SaveOriginalPosId._process"], ["", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "if", "isinstance", "(", "data", ",", "list", ")", ":", "\n", "            ", "data", "=", "[", "self", ".", "_process", "(", "d", ")", "for", "d", "in", "data", "]", "\n", "", "else", ":", "\n", "            ", "data", "=", "self", ".", "_process", "(", "data", ")", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.grid_transform.GridSampling3D.__repr__": [[160, 163], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"{}(grid_size={}, quantize_coords={}, mode={})\"", ".", "format", "(", "\n", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "_grid_size", ",", "self", ".", "_quantize_coords", ",", "self", ".", "_mode", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.grid_transform.SaveOriginalPosId.__init__": [[173, 175], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "key", "=", "None", ")", ":", "\n", "        ", "self", ".", "KEY", "=", "key", "if", "key", "is", "not", "None", "else", "self", ".", "KEY", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.grid_transform.SaveOriginalPosId._process": [[176, 182], ["hasattr", "setattr", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["None"], ["", "def", "_process", "(", "self", ",", "data", ")", ":", "\n", "        ", "if", "hasattr", "(", "data", ",", "self", ".", "KEY", ")", ":", "\n", "            ", "return", "data", "\n", "\n", "", "setattr", "(", "data", ",", "self", ".", "KEY", ",", "torch", ".", "arange", "(", "0", ",", "data", ".", "pos", ".", "shape", "[", "0", "]", ")", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.grid_transform.SaveOriginalPosId.__call__": [[183, 189], ["isinstance", "grid_transform.SaveOriginalPosId._process", "grid_transform.SaveOriginalPosId._process"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.grid_transform.SaveOriginalPosId._process", "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.grid_transform.SaveOriginalPosId._process"], ["", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "if", "isinstance", "(", "data", ",", "list", ")", ":", "\n", "            ", "data", "=", "[", "self", ".", "_process", "(", "d", ")", "for", "d", "in", "data", "]", "\n", "", "else", ":", "\n", "            ", "data", "=", "self", ".", "_process", "(", "data", ")", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.grid_transform.SaveOriginalPosId.__repr__": [[190, 192], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.grid_transform.ElasticDistortion.__init__": [[210, 217], ["len", "len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["def", "__init__", "(", "\n", "self", ",", "apply_distorsion", ":", "bool", "=", "True", ",", "granularity", ":", "List", "=", "[", "0.2", ",", "0.8", "]", ",", "magnitude", "=", "[", "0.4", ",", "1.6", "]", ",", "\n", ")", ":", "\n", "        ", "assert", "len", "(", "magnitude", ")", "==", "len", "(", "granularity", ")", "\n", "self", ".", "_apply_distorsion", "=", "apply_distorsion", "\n", "self", ".", "_granularity", "=", "granularity", "\n", "self", ".", "_magnitude", "=", "magnitude", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.grid_transform.ElasticDistortion.elastic_distortion": [[218, 244], ["coords.numpy.numpy.numpy", "coords.numpy.numpy.min", "numpy.random.randn().astype", "numpy.random.randn().astype", "range", "scipy.interpolate.RegularGridInterpolator", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "numpy.ones().astype", "numpy.ones().astype", "numpy.ones().astype", "numpy.ones().astype", "numpy.ones().astype", "numpy.ones().astype", "scipy.ndimage.filters.convolve", "scipy.ndimage.filters.convolve", "scipy.ndimage.filters.convolve", "numpy.linspace", "numpy.linspace", "numpy.random.randn", "numpy.random.randn", "zip", "scipy.interpolate.RegularGridInterpolator.", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "numpy.ones", "numpy.ones", "numpy.ones", "numpy.ones", "numpy.ones", "numpy.ones"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "elastic_distortion", "(", "coords", ",", "granularity", ",", "magnitude", ")", ":", "\n", "        ", "coords", "=", "coords", ".", "numpy", "(", ")", "\n", "blurx", "=", "np", ".", "ones", "(", "(", "3", ",", "1", ",", "1", ",", "1", ")", ")", ".", "astype", "(", "\"float32\"", ")", "/", "3", "\n", "blury", "=", "np", ".", "ones", "(", "(", "1", ",", "3", ",", "1", ",", "1", ")", ")", ".", "astype", "(", "\"float32\"", ")", "/", "3", "\n", "blurz", "=", "np", ".", "ones", "(", "(", "1", ",", "1", ",", "3", ",", "1", ")", ")", ".", "astype", "(", "\"float32\"", ")", "/", "3", "\n", "coords_min", "=", "coords", ".", "min", "(", "0", ")", "\n", "\n", "# Create Gaussian noise tensor of the size given by granularity.", "\n", "noise_dim", "=", "(", "(", "coords", "-", "coords_min", ")", ".", "max", "(", "0", ")", "//", "granularity", ")", ".", "astype", "(", "int", ")", "+", "3", "\n", "noise", "=", "np", ".", "random", ".", "randn", "(", "*", "noise_dim", ",", "3", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "# Smoothing.", "\n", "for", "_", "in", "range", "(", "2", ")", ":", "\n", "            ", "noise", "=", "scipy", ".", "ndimage", ".", "filters", ".", "convolve", "(", "noise", ",", "blurx", ",", "mode", "=", "\"constant\"", ",", "cval", "=", "0", ")", "\n", "noise", "=", "scipy", ".", "ndimage", ".", "filters", ".", "convolve", "(", "noise", ",", "blury", ",", "mode", "=", "\"constant\"", ",", "cval", "=", "0", ")", "\n", "noise", "=", "scipy", ".", "ndimage", ".", "filters", ".", "convolve", "(", "noise", ",", "blurz", ",", "mode", "=", "\"constant\"", ",", "cval", "=", "0", ")", "\n", "\n", "# Trilinear interpolate noise filters for each spatial dimensions.", "\n", "", "ax", "=", "[", "\n", "np", ".", "linspace", "(", "d_min", ",", "d_max", ",", "d", ")", "\n", "for", "d_min", ",", "d_max", ",", "d", "in", "zip", "(", "coords_min", "-", "granularity", ",", "coords_min", "+", "granularity", "*", "(", "noise_dim", "-", "2", ")", ",", "noise_dim", ")", "\n", "]", "\n", "interp", "=", "scipy", ".", "interpolate", ".", "RegularGridInterpolator", "(", "ax", ",", "noise", ",", "bounds_error", "=", "0", ",", "fill_value", "=", "0", ")", "\n", "coords", "=", "coords", "+", "interp", "(", "coords", ")", "*", "magnitude", "\n", "return", "torch", ".", "tensor", "(", "coords", ")", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.grid_transform.ElasticDistortion.__call__": [[245, 252], ["random.random", "range", "len", "grid_transform.ElasticDistortion.elastic_distortion"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.grid_transform.ElasticDistortion.elastic_distortion"], ["", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "# coords = data.pos / self._spatial_resolution", "\n", "        ", "if", "self", ".", "_apply_distorsion", ":", "\n", "            ", "if", "random", ".", "random", "(", ")", "<", "0.95", ":", "\n", "                ", "for", "i", "in", "range", "(", "len", "(", "self", ".", "_granularity", ")", ")", ":", "\n", "                    ", "data", ".", "pos", "=", "ElasticDistortion", ".", "elastic_distortion", "(", "data", ".", "pos", ",", "self", ".", "_granularity", "[", "i", "]", ",", "self", ".", "_magnitude", "[", "i", "]", ",", ")", "\n", "", "", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.grid_transform.ElasticDistortion.__repr__": [[253, 256], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"{}(apply_distorsion={}, granularity={}, magnitude={})\"", ".", "format", "(", "\n", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "_apply_distorsion", ",", "self", ".", "_granularity", ",", "self", ".", "_magnitude", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.grid_transform.shuffle_data": [[24, 32], ["torch.randperm", "torch.randperm", "set", "torch.is_tensor", "torch.is_tensor"], "function", ["None"], ["def", "shuffle_data", "(", "data", ")", ":", "\n", "    ", "num_points", "=", "data", ".", "pos", ".", "shape", "[", "0", "]", "\n", "shuffle_idx", "=", "torch", ".", "randperm", "(", "num_points", ")", "\n", "for", "key", "in", "set", "(", "data", ".", "keys", ")", ":", "\n", "        ", "item", "=", "data", "[", "key", "]", "\n", "if", "torch", ".", "is_tensor", "(", "item", ")", "and", "num_points", "==", "item", ".", "shape", "[", "0", "]", ":", "\n", "            ", "data", "[", "key", "]", "=", "item", "[", "shuffle_idx", "]", "\n", "", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.data_transform.grid_transform.group_data": [[34, 85], ["ValueError", "ValueError", "bool", "re.search", "ValueError", "torch.is_tensor", "torch.is_tensor", "torch_scatter.scatter_add.size", "torch_scatter.scatter_add.int", "torch_scatter.scatter_add.min", "torch.one_hot", "torch_scatter.scatter_add", "torch_scatter.scatter_mean", "data[].bool", "torch_scatter.scatter_add.argmax"], "function", ["None"], ["", "def", "group_data", "(", "data", ",", "cluster", "=", "None", ",", "unique_pos_indices", "=", "None", ",", "mode", "=", "\"last\"", ",", "skip_keys", "=", "[", "]", ")", ":", "\n", "    ", "\"\"\" Group data based on indices in cluster.\n    The option ``mode`` controls how data gets agregated within each cluster.\n\n    Parameters\n    ----------\n    data : Data\n        [description]\n    cluster : torch.Tensor\n        Tensor of the same size as the number of points in data. Each element is the cluster index of that point.\n    unique_pos_indices : torch.tensor\n        Tensor containing one index per cluster, this index will be used to select features and labels\n    mode : str\n        Option to select how the features and labels for each voxel is computed. Can be ``last`` or ``mean``.\n        ``last`` selects the last point falling in a voxel as the representent, ``mean`` takes the average.\n    skip_keys: list\n        Keys of attributes to skip in the grouping\n    \"\"\"", "\n", "\n", "assert", "mode", "in", "[", "\"mean\"", ",", "\"last\"", "]", "\n", "if", "mode", "==", "\"mean\"", "and", "cluster", "is", "None", ":", "\n", "        ", "raise", "ValueError", "(", "\"In mean mode the cluster argument needs to be specified\"", ")", "\n", "", "if", "mode", "==", "\"last\"", "and", "unique_pos_indices", "is", "None", ":", "\n", "        ", "raise", "ValueError", "(", "\"In last mode the unique_pos_indices argument needs to be specified\"", ")", "\n", "\n", "", "num_nodes", "=", "data", ".", "num_nodes", "\n", "for", "key", ",", "item", "in", "data", ":", "\n", "        ", "if", "bool", "(", "re", ".", "search", "(", "\"edge\"", ",", "key", ")", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Edges not supported. Wrong data type.\"", ")", "\n", "", "if", "key", "in", "skip_keys", ":", "\n", "            ", "continue", "\n", "\n", "", "if", "torch", ".", "is_tensor", "(", "item", ")", "and", "item", ".", "size", "(", "0", ")", "==", "num_nodes", ":", "\n", "            ", "if", "mode", "==", "\"last\"", "or", "key", "==", "\"batch\"", "or", "key", "==", "SaveOriginalPosId", ".", "KEY", "or", "key", "==", "MAPPING_KEY", ":", "\n", "                ", "data", "[", "key", "]", "=", "item", "[", "unique_pos_indices", "]", "\n", "", "elif", "mode", "==", "\"mean\"", ":", "\n", "                ", "is_item_bool", "=", "item", ".", "dtype", "==", "torch", ".", "bool", "\n", "if", "is_item_bool", ":", "\n", "                    ", "item", "=", "item", ".", "int", "(", ")", "\n", "", "if", "key", "in", "_INTEGER_LABEL_KEYS", ":", "\n", "                    ", "item_min", "=", "item", ".", "min", "(", ")", "\n", "item", "=", "F", ".", "one_hot", "(", "item", "-", "item_min", ")", "\n", "item", "=", "scatter_add", "(", "item", ",", "cluster", ",", "dim", "=", "0", ")", "\n", "data", "[", "key", "]", "=", "item", ".", "argmax", "(", "dim", "=", "-", "1", ")", "+", "item_min", "\n", "", "else", ":", "\n", "                    ", "data", "[", "key", "]", "=", "scatter_mean", "(", "item", ",", "cluster", ",", "dim", "=", "0", ")", "\n", "", "if", "is_item_bool", ":", "\n", "                    ", "data", "[", "key", "]", "=", "data", "[", "key", "]", ".", "bool", "(", ")", "\n", "", "", "", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.dense_modules.Conv2D.__init__": [[6, 13], ["torch.LeakyReLU", "base_modules.Seq.__init__", "dense_modules.Conv2D.append", "torch.Conv2d", "dense_modules.Conv2D.append", "dense_modules.Conv2D.append", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "bias", "=", "True", ",", "bn", "=", "True", ",", "activation", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.01", ")", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "append", "(", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "bias", "=", "bias", ")", ")", "\n", "if", "bn", ":", "\n", "            ", "self", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ")", "\n", "", "if", "activation", ":", "\n", "            ", "self", ".", "append", "(", "activation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.dense_modules.Conv1D.__init__": [[16, 23], ["torch.LeakyReLU", "base_modules.Seq.__init__", "dense_modules.Conv1D.append", "torch.Conv1d", "dense_modules.Conv1D.append", "dense_modules.Conv1D.append", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "bias", "=", "True", ",", "bn", "=", "True", ",", "activation", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.01", ")", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "append", "(", "nn", ".", "Conv1d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "1", ",", "bias", "=", "bias", ")", ")", "\n", "if", "bn", ":", "\n", "            ", "self", ".", "append", "(", "nn", ".", "BatchNorm1d", "(", "out_channels", ")", ")", "\n", "", "if", "activation", ":", "\n", "            ", "self", ".", "append", "(", "activation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.dense_modules.MLP2D.__init__": [[26, 30], ["torch.LeakyReLU", "base_modules.Seq.__init__", "range", "dense_modules.MLP2D.append", "len", "dense_modules.Conv2D"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["    ", "def", "__init__", "(", "self", ",", "channels", ",", "bias", "=", "False", ",", "bn", "=", "True", ",", "activation", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.01", ")", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "channels", ")", "-", "1", ")", ":", "\n", "            ", "self", ".", "append", "(", "Conv2D", "(", "channels", "[", "i", "]", ",", "channels", "[", "i", "+", "1", "]", ",", "bn", "=", "bn", ",", "bias", "=", "bias", ",", "activation", "=", "activation", ")", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.gathering.gather": [[1, 34], ["x.expand.unsqueeze", "x.expand.expand", "idx.expand.unsqueeze", "idx.expand.expand", "x.expand.gather", "enumerate", "len", "enumerate", "x.expand.gather", "ValueError", "x.expand.unsqueeze", "list", "x.expand.expand", "idx.expand.size", "idx.expand.unsqueeze", "list", "idx.expand.expand", "idx.expand.size", "x.expand.size", "x.expand.size", "idx.expand.size"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.gathering.gather", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.gathering.gather"], ["def", "gather", "(", "x", ",", "idx", ",", "method", "=", "2", ")", ":", "\n", "    ", "\"\"\"\n    https://github.com/pytorch/pytorch/issues/15245\n    implementation of a custom gather operation for faster backwards.\n    :param x: input with shape [N, D_1, ... D_d]\n    :param idx: indexing with shape [n_1, ..., n_m]\n    :param method: Choice of the method\n    :return: x[idx] with shape [n_1, ..., n_m, D_1, ... D_d]\n    \"\"\"", "\n", "idx", "[", "idx", "==", "-", "1", "]", "=", "x", ".", "shape", "[", "0", "]", "-", "1", "# Shadow point", "\n", "if", "method", "==", "0", ":", "\n", "        ", "return", "x", "[", "idx", "]", "\n", "", "elif", "method", "==", "1", ":", "\n", "        ", "x", "=", "x", ".", "unsqueeze", "(", "1", ")", "\n", "x", "=", "x", ".", "expand", "(", "(", "-", "1", ",", "idx", ".", "shape", "[", "-", "1", "]", ",", "-", "1", ")", ")", "\n", "idx", "=", "idx", ".", "unsqueeze", "(", "2", ")", "\n", "idx", "=", "idx", ".", "expand", "(", "(", "-", "1", ",", "-", "1", ",", "x", ".", "shape", "[", "-", "1", "]", ")", ")", "\n", "return", "x", ".", "gather", "(", "0", ",", "idx", ")", "\n", "", "elif", "method", "==", "2", ":", "\n", "        ", "for", "i", ",", "ni", "in", "enumerate", "(", "idx", ".", "size", "(", ")", "[", "1", ":", "]", ")", ":", "\n", "            ", "x", "=", "x", ".", "unsqueeze", "(", "i", "+", "1", ")", "\n", "new_s", "=", "list", "(", "x", ".", "size", "(", ")", ")", "\n", "new_s", "[", "i", "+", "1", "]", "=", "ni", "\n", "x", "=", "x", ".", "expand", "(", "new_s", ")", "\n", "", "n", "=", "len", "(", "idx", ".", "size", "(", ")", ")", "\n", "for", "i", ",", "di", "in", "enumerate", "(", "x", ".", "size", "(", ")", "[", "n", ":", "]", ")", ":", "\n", "            ", "idx", "=", "idx", ".", "unsqueeze", "(", "i", "+", "n", ")", "\n", "new_s", "=", "list", "(", "idx", ".", "size", "(", ")", ")", "\n", "new_s", "[", "i", "+", "n", "]", "=", "di", "\n", "idx", "=", "idx", ".", "expand", "(", "new_s", ")", "\n", "", "return", "x", ".", "gather", "(", "0", ",", "idx", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Unkown method\"", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.BaseModule.nb_params": [[13, 22], ["filter", "sum", "base_modules.BaseModule.parameters", "numpy.prod", "p.size"], "methods", ["None"], ["@", "property", "\n", "def", "nb_params", "(", "self", ")", ":", "\n", "        ", "\"\"\"This property is used to return the number of trainable\n        parameters for a given layer. It is useful for debugging and\n        reproducibility.\n        \"\"\"", "\n", "model_parameters", "=", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "self", ".", "parameters", "(", ")", ")", "\n", "self", ".", "_nb_params", "=", "sum", "(", "[", "np", ".", "prod", "(", "p", ".", "size", "(", ")", ")", "for", "p", "in", "model_parameters", "]", ")", "\n", "return", "self", ".", "_nb_params", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Identity.__init__": [[31, 33], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Identity", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Identity.forward": [[34, 36], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "data", ")", ":", "\n", "        ", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.UnaryConv.__init__": [[52, 58], ["torch.nn.Module.__init__", "torch.nn.parameter.Parameter", "base_modules.weight_variable"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.weight_variable"], ["    ", "def", "__init__", "(", "self", ",", "kernel_shape", ")", ":", "\n", "        ", "\"\"\"\n        1x1 convolution on point cloud (we can even call it a mini pointnet)\n        \"\"\"", "\n", "super", "(", "UnaryConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "weight", "=", "Parameter", "(", "weight_variable", "(", "kernel_shape", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.UnaryConv.forward": [[59, 64], ["torch.matmul"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "features", ")", ":", "\n", "        ", "\"\"\"\n        features(Torch Tensor): size N x d d is the size of inputs\n        \"\"\"", "\n", "return", "torch", ".", "matmul", "(", "features", ",", "self", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.UnaryConv.__repr__": [[65, 67], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"UnaryConv {}\"", ".", "format", "(", "self", ".", "weight", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.MultiHeadClassifier.__init__": [[86, 107], ["torch.nn.Module.__init__", "len", "torch.zeros", "enumerate", "base_modules.MLP", "base_modules.UnaryConv", "torch.nn.parameter.Parameter", "cat_to_seg.values", "max", "max", "min", "base_modules.MultiHeadClassifier.channel_rasing.add_module", "torch.zeros", "len", "max", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.MLP", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["def", "__init__", "(", "self", ",", "in_features", ",", "cat_to_seg", ",", "dropout_proba", "=", "0.5", ",", "bn_momentum", "=", "0.1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_cat_to_seg", "=", "{", "}", "\n", "self", ".", "_num_categories", "=", "len", "(", "cat_to_seg", ")", "\n", "self", ".", "_max_seg_count", "=", "0", "\n", "self", ".", "_max_seg", "=", "0", "\n", "self", ".", "_shifts", "=", "torch", ".", "zeros", "(", "(", "self", ".", "_num_categories", ",", ")", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "for", "i", ",", "seg", "in", "enumerate", "(", "cat_to_seg", ".", "values", "(", ")", ")", ":", "\n", "            ", "self", ".", "_max_seg_count", "=", "max", "(", "self", ".", "_max_seg_count", ",", "len", "(", "seg", ")", ")", "\n", "self", ".", "_max_seg", "=", "max", "(", "self", ".", "_max_seg", ",", "max", "(", "seg", ")", ")", "\n", "self", ".", "_shifts", "[", "i", "]", "=", "min", "(", "seg", ")", "\n", "self", ".", "_cat_to_seg", "[", "i", "]", "=", "seg", "\n", "\n", "", "self", ".", "channel_rasing", "=", "MLP", "(", "\n", "[", "in_features", ",", "self", ".", "_num_categories", "*", "in_features", "]", ",", "bn_momentum", "=", "bn_momentum", ",", "bias", "=", "False", "\n", ")", "\n", "if", "dropout_proba", ":", "\n", "            ", "self", ".", "channel_rasing", ".", "add_module", "(", "\"Dropout\"", ",", "nn", ".", "Dropout", "(", "p", "=", "dropout_proba", ")", ")", "\n", "\n", "", "self", ".", "classifier", "=", "UnaryConv", "(", "(", "self", ".", "_num_categories", ",", "in_features", ",", "self", ".", "_max_seg_count", ")", ")", "\n", "self", ".", "_bias", "=", "Parameter", "(", "torch", ".", "zeros", "(", "self", ".", "_max_seg_count", ",", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.MultiHeadClassifier.forward": [[108, 129], ["base_modules.MultiHeadClassifier._shifts.to", "base_modules.MultiHeadClassifier.channel_rasing", "features.transpose.transpose.reshape", "features.transpose.transpose.transpose", "category_labels.unsqueeze().repeat().long", "features.transpose.transpose.gather().squeeze", "torch.nn.functional.log_softmax", "torch.zeros().to", "torch.unique", "features.transpose.transpose.dim", "base_modules.MultiHeadClassifier.classifier", "category_labels.unsqueeze().repeat", "features.transpose.transpose.gather", "torch.zeros", "cat.item", "category_labels.unsqueeze", "len"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.gathering.gather", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "def", "forward", "(", "self", ",", "features", ",", "category_labels", ",", "**", "kwargs", ")", ":", "\n", "        ", "assert", "features", ".", "dim", "(", ")", "==", "2", "\n", "self", ".", "_shifts", "=", "self", ".", "_shifts", ".", "to", "(", "features", ".", "device", ")", "\n", "in_dim", "=", "features", ".", "shape", "[", "-", "1", "]", "\n", "features", "=", "self", ".", "channel_rasing", "(", "features", ")", "\n", "features", "=", "features", ".", "reshape", "(", "(", "-", "1", ",", "self", ".", "_num_categories", ",", "in_dim", ")", ")", "\n", "features", "=", "features", ".", "transpose", "(", "0", ",", "1", ")", "# [num_categories, num_points, in_dim]", "\n", "features", "=", "self", ".", "classifier", "(", "features", ")", "+", "self", ".", "_bias", "# [num_categories, num_points, max_seg]", "\n", "ind", "=", "category_labels", ".", "unsqueeze", "(", "-", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "features", ".", "shape", "[", "-", "1", "]", ")", ".", "long", "(", ")", "\n", "\n", "logits", "=", "features", ".", "gather", "(", "0", ",", "ind", ")", ".", "squeeze", "(", "0", ")", "\n", "softmax", "=", "torch", ".", "nn", ".", "functional", ".", "log_softmax", "(", "logits", ",", "dim", "=", "-", "1", ")", "\n", "\n", "output", "=", "torch", ".", "zeros", "(", "logits", ".", "shape", "[", "0", "]", ",", "self", ".", "_max_seg", "+", "1", ")", ".", "to", "(", "features", ".", "device", ")", "\n", "cats_in_batch", "=", "torch", ".", "unique", "(", "category_labels", ")", "\n", "for", "cat", "in", "cats_in_batch", ":", "\n", "            ", "cat_mask", "=", "category_labels", "==", "cat", "\n", "seg_indices", "=", "self", ".", "_cat_to_seg", "[", "cat", ".", "item", "(", ")", "]", "\n", "probs", "=", "softmax", "[", "cat_mask", ",", ":", "len", "(", "seg_indices", ")", "]", "\n", "output", "[", "cat_mask", ",", "seg_indices", "[", "0", "]", ":", "seg_indices", "[", "-", "1", "]", "+", "1", "]", "=", "probs", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.FastBatchNorm1d.__init__": [[132, 135], ["torch.nn.Module.__init__", "torch.nn.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ",", "momentum", "=", "0.1", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "batch_norm", "=", "nn", ".", "BatchNorm1d", "(", "num_features", ",", "momentum", "=", "momentum", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.FastBatchNorm1d._forward_dense": [[136, 138], ["base_modules.FastBatchNorm1d.batch_norm().permute", "base_modules.FastBatchNorm1d.batch_norm", "x.permute"], "methods", ["None"], ["", "def", "_forward_dense", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "batch_norm", "(", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.FastBatchNorm1d._forward_sparse": [[139, 149], ["x.transpose.transpose.unsqueeze", "x.transpose.transpose.transpose", "base_modules.FastBatchNorm1d.batch_norm", "x.transpose.transpose.transpose", "x.transpose.transpose.squeeze"], "methods", ["None"], ["", "def", "_forward_sparse", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\" Batch norm 1D is not optimised for 2D tensors. The first dimension is supposed to be\n        the batch and therefore not very large. So we introduce a custom version that leverages BatchNorm1D\n        in a more optimised way\n        \"\"\"", "\n", "x", "=", "x", ".", "unsqueeze", "(", "2", ")", "\n", "x", "=", "x", ".", "transpose", "(", "0", ",", "2", ")", "\n", "x", "=", "self", ".", "batch_norm", "(", "x", ")", "\n", "x", "=", "x", ".", "transpose", "(", "0", ",", "2", ")", "\n", "return", "x", ".", "squeeze", "(", "dim", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.FastBatchNorm1d.forward": [[150, 157], ["x.dim", "base_modules.FastBatchNorm1d._forward_sparse", "x.dim", "base_modules.FastBatchNorm1d._forward_dense", "ValueError", "x.dim"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.FastBatchNorm1d._forward_sparse", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.FastBatchNorm1d._forward_dense"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "x", ".", "dim", "(", ")", "==", "2", ":", "\n", "            ", "return", "self", ".", "_forward_sparse", "(", "x", ")", "\n", "", "elif", "x", ".", "dim", "(", ")", "==", "3", ":", "\n", "            ", "return", "self", ".", "_forward_dense", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Non supported number of dimensions {}\"", ".", "format", "(", "x", ".", "dim", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.__init__": [[160, 163], ["torch.nn.Sequential.__init__"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_num_modules", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.Seq.append": [[164, 168], ["base_modules.Seq.add_module", "str"], "methods", ["None"], ["", "def", "append", "(", "self", ",", "module", ")", ":", "\n", "        ", "self", ".", "add_module", "(", "str", "(", "self", ".", "_num_modules", ")", ",", "module", ")", "\n", "self", ".", "_num_modules", "+=", "1", "\n", "return", "self", "\n", "", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.weight_variable": [[24, 28], ["torch.empty", "torch.nn.init.xavier_normal_"], "function", ["None"], ["", "", "def", "weight_variable", "(", "shape", ")", ":", "\n", "    ", "initial", "=", "torch", ".", "empty", "(", "shape", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "torch", ".", "nn", ".", "init", ".", "xavier_normal_", "(", "initial", ")", "\n", "return", "initial", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.base_modules.MLP": [[38, 47], ["torch.nn.LeakyReLU", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Linear", "base_modules.FastBatchNorm1d", "range", "len"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "", "def", "MLP", "(", "channels", ",", "activation", "=", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "bn_momentum", "=", "0.1", ",", "bias", "=", "True", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "*", "[", "\n", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "channels", "[", "i", "-", "1", "]", ",", "channels", "[", "i", "]", ",", "bias", "=", "bias", ")", ",", "\n", "FastBatchNorm1d", "(", "channels", "[", "i", "]", ",", "momentum", "=", "bn_momentum", ")", ",", "\n", "activation", ",", "\n", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "channels", ")", ")", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.spatial_transform.BaseLinearTransformSTNkD.__init__": [[15, 28], ["super().__init__", "torch.nn.Linear", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.eye().view().repeat", "torch.eye().view", "torch.eye"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["def", "__init__", "(", "self", ",", "nn", ",", "nn_feat_size", ",", "k", "=", "3", ",", "batch_size", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "nn", "=", "nn", "\n", "self", ".", "k", "=", "k", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "\n", "# fully connected layer to regress the global feature to a k-d linear transform", "\n", "# the transform is initialized to the identity", "\n", "self", ".", "fc_layer", "=", "Linear", "(", "nn_feat_size", ",", "k", "*", "k", ")", "\n", "torch", ".", "nn", ".", "init", ".", "constant_", "(", "self", ".", "fc_layer", ".", "weight", ",", "0", ")", "\n", "torch", ".", "nn", ".", "init", ".", "constant_", "(", "self", ".", "fc_layer", ".", "bias", ",", "0", ")", "\n", "self", ".", "identity", "=", "torch", ".", "eye", "(", "k", ")", ".", "view", "(", "1", ",", "k", "*", "k", ")", ".", "repeat", "(", "batch_size", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.spatial_transform.BaseLinearTransformSTNkD.forward": [[29, 55], ["spatial_transform.BaseLinearTransformSTNkD.nn", "spatial_transform.BaseLinearTransformSTNkD.fc_layer", "trans.view.view.view", "spatial_transform.BaseLinearTransformSTNkD.identity.to", "trans_x.squeeze().dim", "trans_x.view", "torch.bmm", "torch.cat.view", "torch.bmm", "torch.cat", "len", "torch.cat", "trans_x.squeeze"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.nn.torchsparse.cat"], ["", "def", "forward", "(", "self", ",", "feat_x", ",", "trans_x", ",", "batch", ")", ":", "\n", "        ", "\"\"\"\n            Learns and applies a linear transformation to trans_x based on feat_x.\n            feat_x and trans_x may be the same or different.\n        \"\"\"", "\n", "global_feature", "=", "self", ".", "nn", "(", "feat_x", ",", "batch", ")", "\n", "trans", "=", "self", ".", "fc_layer", "(", "global_feature", ")", "\n", "\n", "# needed so that transform is initialized to identity", "\n", "trans", "=", "trans", "+", "self", ".", "identity", ".", "to", "(", "feat_x", ".", "device", ")", "\n", "trans", "=", "trans", ".", "view", "(", "-", "1", ",", "self", ".", "k", ",", "self", ".", "k", ")", "\n", "self", ".", "trans", "=", "trans", "\n", "\n", "# convert trans_x from (N, K) to (B, N, K) to do batched matrix multiplication", "\n", "# batch_x = trans_x.view(self.batch_size, -1, trans_x.shape[1])", "\n", "if", "trans_x", ".", "squeeze", "(", ")", ".", "dim", "(", ")", "==", "2", ":", "\n", "            ", "batch_x", "=", "trans_x", ".", "view", "(", "trans_x", ".", "shape", "[", "0", "]", ",", "1", ",", "trans_x", ".", "shape", "[", "1", "]", ")", "\n", "x_transformed", "=", "torch", ".", "bmm", "(", "batch_x", "[", ":", ",", ":", ",", ":", "trans", ".", "shape", "[", "-", "1", "]", "]", ",", "trans", "[", "batch", "]", ")", "\n", "if", "batch_x", ".", "shape", "[", "-", "1", "]", ">", "trans", ".", "shape", "[", "-", "1", "]", ":", "\n", "                ", "x_transformed", "=", "torch", ".", "cat", "(", "[", "x_transformed", ",", "batch_x", "[", ":", ",", ":", ",", "trans", ".", "shape", "[", "-", "1", "]", ":", "]", "]", ",", "dim", "=", "-", "1", ")", "\n", "", "return", "x_transformed", ".", "view", "(", "len", "(", "trans_x", ")", ",", "trans_x", ".", "shape", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "x_transformed", "=", "torch", ".", "bmm", "(", "trans_x", "[", ":", ",", ":", ",", ":", "trans", ".", "shape", "[", "-", "1", "]", "]", ",", "trans", ")", "\n", "if", "trans_x", ".", "shape", "[", "-", "1", "]", ">", "trans", ".", "shape", "[", "-", "1", "]", ":", "\n", "                ", "x_transformed", "=", "torch", ".", "cat", "(", "[", "x_transformed", ",", "trans_x", "[", ":", ",", ":", ",", "trans", ".", "shape", "[", "-", "1", "]", ":", "]", "]", ",", "dim", "=", "-", "1", ")", "\n", "", "return", "x_transformed", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.spatial_transform.BaseLinearTransformSTNkD.get_orthogonal_regularization_loss": [[56, 66], ["torch.mean", "torch.norm", "torch.bmm", "spatial_transform.BaseLinearTransformSTNkD.identity.to().view", "spatial_transform.BaseLinearTransformSTNkD.trans.transpose", "spatial_transform.BaseLinearTransformSTNkD.identity.to"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.lovasz_loss.mean", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to"], ["", "", "def", "get_orthogonal_regularization_loss", "(", "self", ")", ":", "\n", "        ", "loss", "=", "torch", ".", "mean", "(", "\n", "torch", ".", "norm", "(", "\n", "torch", ".", "bmm", "(", "self", ".", "trans", ",", "self", ".", "trans", ".", "transpose", "(", "2", ",", "1", ")", ")", "\n", "-", "self", ".", "identity", ".", "to", "(", "self", ".", "trans", ".", "device", ")", ".", "view", "(", "-", "1", ",", "self", ".", "k", ",", "self", ".", "k", ")", ",", "\n", "dim", "=", "(", "1", ",", "2", ")", ",", "\n", ")", "\n", ")", "\n", "\n", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.regularizer.regularizers._Regularizer.__init__": [[9, 12], ["object.__init__"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["def", "__init__", "(", "self", ",", "model", ")", ":", "\n", "        ", "super", "(", "_Regularizer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model", "=", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.regularizer.regularizers._Regularizer.regularized_param": [[13, 15], ["None"], "methods", ["None"], ["", "def", "regularized_param", "(", "self", ",", "param_weights", ",", "reg_loss_function", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.regularizer.regularizers._Regularizer.regularized_all_param": [[16, 18], ["None"], "methods", ["None"], ["", "def", "regularized_all_param", "(", "self", ",", "reg_loss_function", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.regularizer.regularizers.L1Regularizer.__init__": [[25, 28], ["regularizers._Regularizer.__init__"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["def", "__init__", "(", "self", ",", "model", ",", "lambda_reg", "=", "0.01", ")", ":", "\n", "        ", "super", "(", "L1Regularizer", ",", "self", ")", ".", "__init__", "(", "model", "=", "model", ")", "\n", "self", ".", "lambda_reg", "=", "lambda_reg", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.regularizer.regularizers.L1Regularizer.regularized_param": [[29, 32], ["regularizers.L1Regularizer.__add_l1"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.regularizer.regularizers.ElasticNetRegularizer.__add_l1"], ["", "def", "regularized_param", "(", "self", ",", "param_weights", ",", "reg_loss_function", ")", ":", "\n", "        ", "reg_loss_function", "+=", "self", ".", "lambda_reg", "*", "L1Regularizer", ".", "__add_l1", "(", "var", "=", "param_weights", ")", "\n", "return", "reg_loss_function", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.regularizer.regularizers.L1Regularizer.regularized_all_param": [[33, 42], ["regularizers.L1Regularizer.model.named_parameters", "model_param_name.endswith", "regularizers.L1Regularizer.__add_l1"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.regularizer.regularizers.ElasticNetRegularizer.__add_l1"], ["", "def", "regularized_all_param", "(", "self", ",", "reg_loss_function", ")", ":", "\n", "        ", "for", "model_param_name", ",", "model_param_value", "in", "self", ".", "model", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "(", "\n", "model_param_name", ".", "endswith", "(", "\"weight\"", ")", "\n", "and", "\"1.weight\"", "not", "in", "model_param_name", "\n", "and", "\"bn\"", "not", "in", "model_param_name", "\n", ")", ":", "\n", "                ", "reg_loss_function", "+=", "self", ".", "lambda_reg", "*", "L1Regularizer", ".", "__add_l1", "(", "var", "=", "model_param_value", ")", "\n", "", "", "return", "reg_loss_function", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.regularizer.regularizers.L1Regularizer.__add_l1": [[43, 46], ["var.abs().sum", "var.abs"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "__add_l1", "(", "var", ")", ":", "\n", "        ", "return", "var", ".", "abs", "(", ")", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.regularizer.regularizers.L2Regularizer.__init__": [[53, 56], ["regularizers._Regularizer.__init__"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["def", "__init__", "(", "self", ",", "model", ",", "lambda_reg", "=", "0.01", ")", ":", "\n", "        ", "super", "(", "L2Regularizer", ",", "self", ")", ".", "__init__", "(", "model", "=", "model", ")", "\n", "self", ".", "lambda_reg", "=", "lambda_reg", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.regularizer.regularizers.L2Regularizer.regularized_param": [[57, 60], ["regularizers.L2Regularizer.__add_l2"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.regularizer.regularizers.ElasticNetRegularizer.__add_l2"], ["", "def", "regularized_param", "(", "self", ",", "param_weights", ",", "reg_loss_function", ")", ":", "\n", "        ", "reg_loss_function", "+=", "self", ".", "lambda_reg", "*", "L2Regularizer", ".", "__add_l2", "(", "var", "=", "param_weights", ")", "\n", "return", "reg_loss_function", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.regularizer.regularizers.L2Regularizer.regularized_all_param": [[61, 70], ["regularizers.L2Regularizer.model.named_parameters", "model_param_name.endswith", "regularizers.L2Regularizer.__add_l2"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.regularizer.regularizers.ElasticNetRegularizer.__add_l2"], ["", "def", "regularized_all_param", "(", "self", ",", "reg_loss_function", ")", ":", "\n", "        ", "for", "model_param_name", ",", "model_param_value", "in", "self", ".", "model", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "(", "\n", "model_param_name", ".", "endswith", "(", "\"weight\"", ")", "\n", "and", "\"1.weight\"", "not", "in", "model_param_name", "\n", "and", "\"bn\"", "not", "in", "model_param_name", "\n", ")", ":", "\n", "                ", "reg_loss_function", "+=", "self", ".", "lambda_reg", "*", "L2Regularizer", ".", "__add_l2", "(", "var", "=", "model_param_value", ")", "\n", "", "", "return", "reg_loss_function", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.regularizer.regularizers.L2Regularizer.__add_l2": [[71, 74], ["var.pow().sum", "var.pow"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "__add_l2", "(", "var", ")", ":", "\n", "        ", "return", "var", ".", "pow", "(", "2", ")", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.regularizer.regularizers.ElasticNetRegularizer.__init__": [[81, 85], ["regularizers._Regularizer.__init__"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["def", "__init__", "(", "self", ",", "model", ",", "lambda_reg", "=", "0.01", ",", "alpha_reg", "=", "0.01", ")", ":", "\n", "        ", "super", "(", "ElasticNetRegularizer", ",", "self", ")", ".", "__init__", "(", "model", "=", "model", ")", "\n", "self", ".", "lambda_reg", "=", "lambda_reg", "\n", "self", ".", "alpha_reg", "=", "alpha_reg", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.regularizer.regularizers.ElasticNetRegularizer.regularized_param": [[86, 92], ["regularizers.ElasticNetRegularizer.__add_l2", "regularizers.ElasticNetRegularizer.__add_l1"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.regularizer.regularizers.ElasticNetRegularizer.__add_l2", "home.repos.pwc.inspect_result.drprojects_deepviewagg.regularizer.regularizers.ElasticNetRegularizer.__add_l1"], ["", "def", "regularized_param", "(", "self", ",", "param_weights", ",", "reg_loss_function", ")", ":", "\n", "        ", "reg_loss_function", "+=", "self", ".", "lambda_reg", "*", "(", "\n", "(", "(", "1", "-", "self", ".", "alpha_reg", ")", "*", "ElasticNetRegularizer", ".", "__add_l2", "(", "var", "=", "param_weights", ")", ")", "\n", "+", "(", "self", ".", "alpha_reg", "*", "ElasticNetRegularizer", ".", "__add_l1", "(", "var", "=", "param_weights", ")", ")", "\n", ")", "\n", "return", "reg_loss_function", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.regularizer.regularizers.ElasticNetRegularizer.regularized_all_param": [[93, 101], ["regularizers.ElasticNetRegularizer.model.named_parameters", "model_param_name.endswith", "regularizers.ElasticNetRegularizer.__add_l2", "regularizers.ElasticNetRegularizer.__add_l1"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.regularizer.regularizers.ElasticNetRegularizer.__add_l2", "home.repos.pwc.inspect_result.drprojects_deepviewagg.regularizer.regularizers.ElasticNetRegularizer.__add_l1"], ["", "def", "regularized_all_param", "(", "self", ",", "reg_loss_function", ")", ":", "\n", "        ", "for", "model_param_name", ",", "model_param_value", "in", "self", ".", "model", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "model_param_name", ".", "endswith", "(", "\"weight\"", ")", ":", "\n", "                ", "reg_loss_function", "+=", "self", ".", "lambda_reg", "*", "(", "\n", "(", "(", "1", "-", "self", ".", "alpha_reg", ")", "*", "ElasticNetRegularizer", ".", "__add_l2", "(", "var", "=", "model_param_value", ")", ")", "\n", "+", "(", "self", ".", "alpha_reg", "*", "ElasticNetRegularizer", ".", "__add_l1", "(", "var", "=", "model_param_value", ")", ")", "\n", ")", "\n", "", "", "return", "reg_loss_function", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.regularizer.regularizers.ElasticNetRegularizer.__add_l1": [[102, 105], ["var.abs().sum", "var.abs"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "__add_l1", "(", "var", ")", ":", "\n", "        ", "return", "var", ".", "abs", "(", ")", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.regularizer.regularizers.ElasticNetRegularizer.__add_l2": [[106, 109], ["var.pow().sum", "var.pow"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "__add_l2", "(", "var", ")", ":", "\n", "        ", "return", "var", ".", "pow", "(", "2", ")", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.regularizer.regularizers.GroupSparseLassoRegularizer.__init__": [[116, 121], ["regularizers._Regularizer.__init__", "regularizers.GroupLassoRegularizer", "regularizers.L1Regularizer"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["def", "__init__", "(", "self", ",", "model", ",", "lambda_reg", "=", "0.01", ")", ":", "\n", "        ", "super", "(", "GroupSparseLassoRegularizer", ",", "self", ")", ".", "__init__", "(", "model", "=", "model", ")", "\n", "self", ".", "lambda_reg", "=", "lambda_reg", "\n", "self", ".", "reg_l2_l1", "=", "GroupLassoRegularizer", "(", "model", "=", "self", ".", "model", ",", "lambda_reg", "=", "self", ".", "lambda_reg", ")", "\n", "self", ".", "reg_l1", "=", "L1Regularizer", "(", "model", "=", "self", ".", "model", ",", "lambda_reg", "=", "self", ".", "lambda_reg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.regularizer.regularizers.GroupSparseLassoRegularizer.regularized_param": [[122, 129], ["regularizers.GroupSparseLassoRegularizer.reg_l2_l1.regularized_param", "regularizers.GroupSparseLassoRegularizer.reg_l1.regularized_param"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.regularizer.regularizers.GroupLassoRegularizer.regularized_param", "home.repos.pwc.inspect_result.drprojects_deepviewagg.regularizer.regularizers.GroupLassoRegularizer.regularized_param"], ["", "def", "regularized_param", "(", "self", ",", "param_weights", ",", "reg_loss_function", ")", ":", "\n", "        ", "reg_loss_function", "=", "self", ".", "lambda_reg", "*", "(", "\n", "self", ".", "reg_l2_l1", ".", "regularized_param", "(", "param_weights", "=", "param_weights", ",", "reg_loss_function", "=", "reg_loss_function", ")", "\n", "+", "self", ".", "reg_l1", ".", "regularized_param", "(", "param_weights", "=", "param_weights", ",", "reg_loss_function", "=", "reg_loss_function", ")", "\n", ")", "\n", "\n", "return", "reg_loss_function", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.regularizer.regularizers.GroupSparseLassoRegularizer.regularized_all_param": [[130, 137], ["regularizers.GroupSparseLassoRegularizer.reg_l2_l1.regularized_all_param", "regularizers.GroupSparseLassoRegularizer.reg_l1.regularized_all_param"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.regularizer.regularizers.GroupLassoRegularizer.regularized_all_param", "home.repos.pwc.inspect_result.drprojects_deepviewagg.regularizer.regularizers.GroupLassoRegularizer.regularized_all_param"], ["", "def", "regularized_all_param", "(", "self", ",", "reg_loss_function", ")", ":", "\n", "        ", "reg_loss_function", "=", "self", ".", "lambda_reg", "*", "(", "\n", "self", ".", "reg_l2_l1", ".", "regularized_all_param", "(", "reg_loss_function", "=", "reg_loss_function", ")", "\n", "+", "self", ".", "reg_l1", ".", "regularized_all_param", "(", "reg_loss_function", "=", "reg_loss_function", ")", "\n", ")", "\n", "\n", "return", "reg_loss_function", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.regularizer.regularizers.GroupLassoRegularizer.__init__": [[146, 149], ["regularizers._Regularizer.__init__"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["def", "__init__", "(", "self", ",", "model", ",", "lambda_reg", "=", "0.01", ")", ":", "\n", "        ", "super", "(", "GroupLassoRegularizer", ",", "self", ")", ".", "__init__", "(", "model", "=", "model", ")", "\n", "self", ".", "lambda_reg", "=", "lambda_reg", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.regularizer.regularizers.GroupLassoRegularizer.regularized_param": [[150, 170], ["regularizers.GroupLassoRegularizer.__inputs_groups_reg", "regularizers.GroupLassoRegularizer.__inputs_groups_reg", "print", "regularizers.GroupLassoRegularizer.__bias_groups_reg"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.regularizer.regularizers.GroupLassoRegularizer.__inputs_groups_reg", "home.repos.pwc.inspect_result.drprojects_deepviewagg.regularizer.regularizers.GroupLassoRegularizer.__inputs_groups_reg", "home.repos.pwc.inspect_result.drprojects_deepviewagg.regularizer.regularizers.GroupLassoRegularizer.__bias_groups_reg"], ["", "def", "regularized_param", "(", "self", ",", "param_weights", ",", "reg_loss_function", ",", "group_name", "=", "\"input_group\"", ")", ":", "\n", "        ", "if", "group_name", "==", "\"input_group\"", ":", "\n", "            ", "reg_loss_function", "+=", "self", ".", "lambda_reg", "*", "GroupLassoRegularizer", ".", "__inputs_groups_reg", "(", "\n", "layer_weights", "=", "param_weights", "\n", ")", "# apply the group norm on the input value", "\n", "", "elif", "group_name", "==", "\"hidden_group\"", ":", "\n", "            ", "reg_loss_function", "+=", "self", ".", "lambda_reg", "*", "GroupLassoRegularizer", ".", "__inputs_groups_reg", "(", "\n", "layer_weights", "=", "param_weights", "\n", ")", "# apply the group norm on every hidden layer", "\n", "", "elif", "group_name", "==", "\"bias_group\"", ":", "\n", "            ", "reg_loss_function", "+=", "self", ".", "lambda_reg", "*", "GroupLassoRegularizer", ".", "__bias_groups_reg", "(", "\n", "bias_weights", "=", "param_weights", "\n", ")", "# apply the group norm on the bias", "\n", "", "else", ":", "\n", "            ", "print", "(", "\n", "\"The group {} is not supported yet. Please try one of this: [input_group, hidden_group, bias_group]\"", ".", "format", "(", "\n", "group_name", "\n", ")", "\n", ")", "\n", "", "return", "reg_loss_function", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.regularizer.regularizers.GroupLassoRegularizer.regularized_all_param": [[171, 182], ["regularizers.GroupLassoRegularizer.model.named_parameters", "model_param_name.endswith", "model_param_name.endswith", "regularizers.GroupLassoRegularizer.__inputs_groups_reg", "regularizers.GroupLassoRegularizer.__bias_groups_reg"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.regularizer.regularizers.GroupLassoRegularizer.__inputs_groups_reg", "home.repos.pwc.inspect_result.drprojects_deepviewagg.regularizer.regularizers.GroupLassoRegularizer.__bias_groups_reg"], ["", "def", "regularized_all_param", "(", "self", ",", "reg_loss_function", ")", ":", "\n", "        ", "for", "model_param_name", ",", "model_param_value", "in", "self", ".", "model", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "model_param_name", ".", "endswith", "(", "\"weight\"", ")", ":", "\n", "                ", "reg_loss_function", "+=", "self", ".", "lambda_reg", "*", "GroupLassoRegularizer", ".", "__inputs_groups_reg", "(", "\n", "layer_weights", "=", "model_param_value", "\n", ")", "\n", "", "if", "model_param_name", ".", "endswith", "(", "\"bias\"", ")", ":", "\n", "                ", "reg_loss_function", "+=", "self", ".", "lambda_reg", "*", "GroupLassoRegularizer", ".", "__bias_groups_reg", "(", "\n", "bias_weights", "=", "model_param_value", "\n", ")", "\n", "", "", "return", "reg_loss_function", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.regularizer.regularizers.GroupLassoRegularizer.__grouplasso_reg": [[183, 189], ["groups.norm().sum", "groups.norm", "groups.norm"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "__grouplasso_reg", "(", "groups", ",", "dim", ")", ":", "\n", "        ", "if", "dim", "==", "-", "1", ":", "\n", "# We only have single group", "\n", "            ", "return", "groups", ".", "norm", "(", "2", ")", "\n", "", "return", "groups", ".", "norm", "(", "2", ",", "dim", "=", "dim", ")", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.regularizer.regularizers.GroupLassoRegularizer.__inputs_groups_reg": [[190, 193], ["regularizers.GroupLassoRegularizer.__grouplasso_reg"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.regularizer.regularizers.GroupLassoRegularizer.__grouplasso_reg"], ["", "@", "staticmethod", "\n", "def", "__inputs_groups_reg", "(", "layer_weights", ")", ":", "\n", "        ", "return", "GroupLassoRegularizer", ".", "__grouplasso_reg", "(", "groups", "=", "layer_weights", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.regularizer.regularizers.GroupLassoRegularizer.__bias_groups_reg": [[194, 197], ["regularizers.GroupLassoRegularizer.__grouplasso_reg"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.regularizer.regularizers.GroupLassoRegularizer.__grouplasso_reg"], ["", "@", "staticmethod", "\n", "def", "__bias_groups_reg", "(", "bias_weights", ")", ":", "\n", "        ", "return", "GroupLassoRegularizer", ".", "__grouplasso_reg", "(", "groups", "=", "bias_weights", ",", "dim", "=", "-", "1", ")", "# ou 0 i dont know yet", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.initializer.initializer.init_weights": [[5, 27], ["print", "net.apply", "hasattr", "torch.nn.init.normal_", "hasattr", "torch.nn.init.constant_", "classname.find", "torch.nn.init.normal_", "torch.nn.init.constant_", "classname.find", "classname.find", "torch.nn.init.xavier_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.orthogonal_", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.pair.MultiScalePair.apply"], ["def", "init_weights", "(", "net", ",", "init_type", "=", "\"normal\"", ",", "gain", "=", "0.02", ")", ":", "\n", "    ", "def", "init_func", "(", "m", ")", ":", "\n", "        ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "hasattr", "(", "m", ",", "\"weight\"", ")", "and", "(", "classname", ".", "find", "(", "\"Conv\"", ")", "!=", "-", "1", "or", "classname", ".", "find", "(", "\"Linear\"", ")", "!=", "-", "1", ")", ":", "\n", "            ", "if", "init_type", "==", "\"normal\"", ":", "\n", "                ", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "0.0", ",", "gain", ")", "\n", "", "elif", "init_type", "==", "\"xavier\"", ":", "\n", "                ", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "gain", ")", "\n", "", "elif", "init_type", "==", "\"kaiming\"", ":", "\n", "                ", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ".", "data", ",", "a", "=", "0", ",", "mode", "=", "\"fan_in\"", ")", "\n", "", "elif", "init_type", "==", "\"orthogonal\"", ":", "\n", "                ", "init", ".", "orthogonal_", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "gain", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", "\"initialization method [%s] is not implemented\"", "%", "init_type", ")", "\n", "", "if", "hasattr", "(", "m", ",", "\"bias\"", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "", "", "elif", "classname", ".", "find", "(", "\"BatchNorm2d\"", ")", "!=", "-", "1", ":", "\n", "            ", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "1.0", ",", "gain", ")", "\n", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "\n", "", "", "print", "(", "\"initialize network with %s\"", "%", "init_type", ")", "\n", "net", ".", "apply", "(", "init_func", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.initializer.initializer.init_net": [[29, 36], ["initializer.init_weights", "len", "torch.cuda.is_available", "torch.nn.DataParallel.to", "torch.nn.DataParallel"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.initializer.initializer.init_weights", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.models.base_model.BaseModel.to"], ["", "def", "init_net", "(", "net", ",", "init_type", "=", "\"normal\"", ",", "init_gain", "=", "0.02", ",", "gpu_ids", "=", "[", "]", ")", ":", "\n", "    ", "if", "len", "(", "gpu_ids", ")", ">", "0", ":", "\n", "        ", "assert", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "net", ".", "to", "(", "gpu_ids", "[", "0", "]", ")", "\n", "net", "=", "torch", ".", "nn", ".", "DataParallel", "(", "net", ",", "gpu_ids", ")", "\n", "", "init_weights", "(", "net", ",", "init_type", ",", "gain", "=", "init_gain", ")", "\n", "return", "net", "\n", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.schedulers.bn_schedulers.BNMomentumScheduler.__init__": [[36, 48], ["bn_schedulers.BNMomentumScheduler.step", "isinstance", "RuntimeError", "type"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.schedulers.lr_schedulers.LRScheduler.step"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "bn_lambda", ",", "update_scheduler_on", ",", "last_epoch", "=", "-", "1", ",", "setter", "=", "set_bn_momentum_default", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "model", ",", "nn", ".", "Module", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Class '{}' is not a PyTorch nn Module\"", ".", "format", "(", "type", "(", "model", ")", ".", "__name__", ")", ")", "\n", "\n", "", "self", ".", "model", "=", "model", "\n", "self", ".", "setter", "=", "setter", "\n", "self", ".", "bn_lambda", "=", "bn_lambda", "\n", "self", ".", "_current_momemtum", "=", "None", "\n", "self", ".", "step", "(", "last_epoch", "+", "1", ")", "\n", "self", ".", "last_epoch", "=", "last_epoch", "\n", "self", ".", "_scheduler_opt", "=", "None", "\n", "self", ".", "_update_scheduler_on", "=", "update_scheduler_on", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.schedulers.bn_schedulers.BNMomentumScheduler.update_scheduler_on": [[49, 52], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "update_scheduler_on", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_update_scheduler_on", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.schedulers.bn_schedulers.BNMomentumScheduler.scheduler_opt": [[57, 60], ["None"], "methods", ["None"], ["", "@", "scheduler_opt", ".", "setter", "\n", "def", "scheduler_opt", "(", "self", ",", "scheduler_opt", ")", ":", "\n", "        ", "self", ".", "_scheduler_opt", "=", "scheduler_opt", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.schedulers.bn_schedulers.BNMomentumScheduler.step": [[61, 72], ["bn_schedulers.BNMomentumScheduler.bn_lambda", "log.info", "bn_schedulers.BNMomentumScheduler.model.apply", "bn_schedulers.BNMomentumScheduler.setter"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.pair.MultiScalePair.apply"], ["", "def", "step", "(", "self", ",", "epoch", "=", "None", ")", ":", "\n", "\n", "        ", "if", "epoch", "is", "None", ":", "\n", "            ", "epoch", "=", "self", ".", "last_epoch", "+", "1", "\n", "\n", "", "self", ".", "last_epoch", "=", "epoch", "\n", "new_momemtum", "=", "self", ".", "bn_lambda", "(", "epoch", ")", "\n", "if", "self", ".", "_current_momemtum", "!=", "new_momemtum", ":", "\n", "            ", "self", ".", "_current_momemtum", "=", "new_momemtum", "\n", "log", ".", "info", "(", "\"Setting batchnorm momentum at {}\"", ".", "format", "(", "new_momemtum", ")", ")", "\n", "self", ".", "model", ".", "apply", "(", "self", ".", "setter", "(", "new_momemtum", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.schedulers.bn_schedulers.BNMomentumScheduler.state_dict": [[73, 77], ["bn_schedulers.BNMomentumScheduler.bn_lambda"], "methods", ["None"], ["", "", "def", "state_dict", "(", "self", ")", ":", "\n", "        ", "return", "{", "\n", "\"current_momemtum\"", ":", "self", ".", "bn_lambda", "(", "self", ".", "last_epoch", ")", ",", "\n", "\"last_epoch\"", ":", "self", ".", "last_epoch", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.schedulers.bn_schedulers.BNMomentumScheduler.load_state_dict": [[79, 82], ["None"], "methods", ["None"], ["", "def", "load_state_dict", "(", "self", ",", "state_dict", ")", ":", "\n", "        ", "self", ".", "last_epoch", "=", "state_dict", "[", "\"last_epoch\"", "]", "\n", "self", ".", "current_momemtum", "=", "state_dict", "[", "\"current_momemtum\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.schedulers.bn_schedulers.BNMomentumScheduler.__repr__": [[83, 86], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"{}(base_momentum: {}, update_scheduler_on={})\"", ".", "format", "(", "\n", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "_current_momemtum", ",", "self", ".", "_update_scheduler_on", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.schedulers.bn_schedulers.set_bn_momentum_default": [[23, 33], ["isinstance"], "function", ["None"], ["def", "set_bn_momentum_default", "(", "bn_momentum", ")", ":", "\n", "    ", "\"\"\"\n    This function return a function which will assign `bn_momentum` to every module instance within `BATCH_NORM_MODULES`.\n    \"\"\"", "\n", "\n", "def", "fn", "(", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "BATCH_NORM_MODULES", ")", ":", "\n", "            ", "m", ".", "momentum", "=", "bn_momentum", "\n", "\n", "", "", "return", "fn", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.schedulers.bn_schedulers.instantiate_bn_scheduler": [[89, 113], ["bn_scheduler_opt.get", "bn_scheduler_opt.get", "bn_schedulers.BNMomentumScheduler", "omegaconf.OmegaConf.to_container", "bn_scheduler_opt.get", "NotImplementedError", "max", "int"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get"], ["", "", "def", "instantiate_bn_scheduler", "(", "model", ",", "bn_scheduler_opt", ")", ":", "\n", "    ", "\"\"\"Return a batch normalization scheduler\n    Parameters:\n        model          -- the nn network\n        bn_scheduler_opt (option class) -- dict containing all the params to build the scheduler\u3000\n                              opt.bn_policy is the name of learning rate policy: lambda_rule | step | plateau | cosine\n                              opt.params contains the scheduler_params to construct the scheduler\n    See https://pytorch.org/docs/stable/optim.html for more details.\n    \"\"\"", "\n", "update_scheduler_on", "=", "bn_scheduler_opt", ".", "get", "(", "\"update_scheduler_on\"", ")", "\n", "bn_scheduler_params", "=", "bn_scheduler_opt", ".", "get", "(", "\"params\"", ")", "\n", "if", "bn_scheduler_opt", ".", "get", "(", "\"bn_policy\"", ")", "==", "\"step_decay\"", ":", "\n", "        ", "bn_lambda", "=", "lambda", "e", ":", "max", "(", "\n", "bn_scheduler_params", ".", "bn_momentum", "\n", "*", "bn_scheduler_params", ".", "bn_decay", "**", "(", "int", "(", "e", "//", "bn_scheduler_params", ".", "decay_step", ")", ")", ",", "\n", "bn_scheduler_params", ".", "bn_clip", ",", "\n", ")", "\n", "\n", "", "else", ":", "\n", "        ", "return", "NotImplementedError", "(", "\"bn_policy [%s] is not implemented\"", ",", "bn_scheduler_opt", ".", "bn_policy", ")", "\n", "\n", "", "bn_scheduler", "=", "BNMomentumScheduler", "(", "model", ",", "bn_lambda", ",", "update_scheduler_on", ")", "\n", "bn_scheduler", ".", "scheduler_opt", "=", "OmegaConf", ".", "to_container", "(", "bn_scheduler_opt", ")", "\n", "return", "bn_scheduler", "\n", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.schedulers.lr_schedulers.LambdaStepLR.__init__": [[47, 49], ["torch.optim.lr_scheduler.LambdaLR.__init__"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "optimizer", ",", "lr_lambda", ",", "last_step", "=", "-", "1", ")", ":", "\n", "        ", "super", "(", "LambdaStepLR", ",", "self", ")", ".", "__init__", "(", "optimizer", ",", "lr_lambda", ",", "last_step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.schedulers.lr_schedulers.LambdaStepLR.last_step": [[55, 58], ["None"], "methods", ["None"], ["", "@", "last_step", ".", "setter", "\n", "def", "last_step", "(", "self", ",", "v", ")", ":", "\n", "        ", "self", ".", "last_epoch", "=", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.schedulers.lr_schedulers.PolyLR.__init__": [[63, 67], ["lr_schedulers.LambdaStepLR.__init__", "lambda_func", "lambda_func", "composite_func"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["def", "__init__", "(", "self", ",", "optimizer", ",", "max_iter", ",", "power", "=", "0.9", ",", "last_step", "=", "-", "1", ")", ":", "\n", "        ", "lambda_func", "=", "lambda", "s", ":", "(", "1", "-", "s", "/", "(", "max_iter", "+", "1", ")", ")", "**", "power", "\n", "composite_func", "=", "lambda", "s", ":", "lambda_func", "(", "max_iter", ")", "if", "s", ">", "max_iter", "else", "lambda_func", "(", "s", ")", "\n", "super", "(", "PolyLR", ",", "self", ")", ".", "__init__", "(", "optimizer", ",", "lambda", "s", ":", "composite_func", "(", "s", ")", ",", "last_step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.schedulers.lr_schedulers.SquaredLR.__init__": [[72, 74], ["lr_schedulers.LambdaStepLR.__init__"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["def", "__init__", "(", "self", ",", "optimizer", ",", "max_iter", ",", "last_step", "=", "-", "1", ")", ":", "\n", "        ", "super", "(", "SquaredLR", ",", "self", ")", ".", "__init__", "(", "optimizer", ",", "lambda", "s", ":", "(", "1", "-", "s", "/", "(", "max_iter", "+", "1", ")", ")", "**", "2", ",", "last_step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.schedulers.lr_schedulers.ExpLR.__init__": [[77, 82], ["lr_schedulers.LambdaStepLR.__init__"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "optimizer", ",", "step_size", ",", "gamma", "=", "0.9", ",", "last_step", "=", "-", "1", ")", ":", "\n", "# (0.9 ** 21.854) = 0.1, (0.95 ** 44.8906) = 0.1", "\n", "# To get 0.1 every N using gamma 0.9, N * log(0.9)/log(0.1) = 0.04575749 N", "\n", "# To get 0.1 every N using gamma g, g ** N = 0.1 -> N * log(g) = log(0.1) -> g = np.exp(log(0.1) / N)", "\n", "        ", "super", "(", "ExpLR", ",", "self", ")", ".", "__init__", "(", "optimizer", ",", "lambda", "s", ":", "gamma", "**", "(", "s", "/", "step_size", ")", ",", "last_step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.schedulers.lr_schedulers.LRScheduler.__init__": [[89, 93], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "scheduler", ",", "scheduler_params", ",", "update_scheduler_on", ")", ":", "\n", "        ", "self", ".", "_scheduler", "=", "scheduler", "\n", "self", ".", "_scheduler_params", "=", "scheduler_params", "\n", "self", ".", "_update_scheduler_on", "=", "update_scheduler_on", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.schedulers.lr_schedulers.LRScheduler.scheduler": [[94, 97], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "scheduler", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_scheduler", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.schedulers.lr_schedulers.LRScheduler.scheduler_opt": [[98, 101], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "scheduler_opt", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_scheduler", ".", "_scheduler_opt", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.schedulers.lr_schedulers.LRScheduler.__repr__": [[102, 105], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"{}({}, update_scheduler_on={})\"", ".", "format", "(", "\n", "self", ".", "_scheduler", ".", "__class__", ".", "__name__", ",", "self", ".", "_scheduler_params", ",", "self", ".", "_update_scheduler_on", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.schedulers.lr_schedulers.LRScheduler.step": [[107, 109], ["lr_schedulers.LRScheduler._scheduler.step"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.schedulers.lr_schedulers.LRScheduler.step"], ["", "def", "step", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_scheduler", ".", "step", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.schedulers.lr_schedulers.LRScheduler.state_dict": [[110, 112], ["lr_schedulers.LRScheduler._scheduler.state_dict"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.schedulers.lr_schedulers.LRScheduler.state_dict"], ["", "def", "state_dict", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_scheduler", ".", "state_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.schedulers.lr_schedulers.LRScheduler.load_state_dict": [[113, 115], ["lr_schedulers.LRScheduler._scheduler.load_state_dict"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.schedulers.lr_schedulers.LRScheduler.load_state_dict"], ["", "def", "load_state_dict", "(", "self", ",", "state_dict", ")", ":", "\n", "        ", "self", ".", "_scheduler", ".", "load_state_dict", "(", "state_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.schedulers.lr_schedulers.collect_params": [[15, 44], ["params.get", "params.get", "params.get", "Exception", "lr_schedulers.collect_params.check_params"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get"], ["def", "collect_params", "(", "params", ",", "update_scheduler_on", ")", ":", "\n", "    ", "\"\"\"\n    This function enable to handle if params contains on_epoch and on_iter or not.\n    \"\"\"", "\n", "on_epoch_params", "=", "params", ".", "get", "(", "\"on_epoch\"", ")", "\n", "on_batch_params", "=", "params", ".", "get", "(", "\"on_num_batch\"", ")", "\n", "on_sample_params", "=", "params", ".", "get", "(", "\"on_num_sample\"", ")", "\n", "\n", "def", "check_params", "(", "params", ")", ":", "\n", "        ", "if", "params", "is", "not", "None", ":", "\n", "            ", "return", "params", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\n", "\"The lr_scheduler doesn't have policy {}. Options: {}\"", ".", "format", "(", "update_scheduler_on", ",", "SchedulerUpdateOn", ")", "\n", ")", "\n", "\n", "", "", "if", "on_epoch_params", "or", "on_batch_params", "or", "on_sample_params", ":", "\n", "        ", "if", "update_scheduler_on", "==", "SchedulerUpdateOn", ".", "ON_EPOCH", ".", "value", ":", "\n", "            ", "return", "check_params", "(", "on_epoch_params", ")", "\n", "", "elif", "update_scheduler_on", "==", "SchedulerUpdateOn", ".", "ON_NUM_BATCH", ".", "value", ":", "\n", "            ", "return", "check_params", "(", "on_batch_params", ")", "\n", "", "elif", "update_scheduler_on", "==", "SchedulerUpdateOn", ".", "ON_NUM_SAMPLE", ".", "value", ":", "\n", "            ", "return", "check_params", "(", "on_sample_params", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\n", "\"The provided update_scheduler_on {} isn't within {}\"", ".", "format", "(", "update_scheduler_on", ",", "SchedulerUpdateOn", ")", "\n", ")", "\n", "", "", "else", ":", "\n", "        ", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.schedulers.lr_schedulers.repr": [[84, 86], ["None"], "function", ["None"], ["", "", "def", "repr", "(", "self", ",", "scheduler_params", "=", "{", "}", ")", ":", "\n", "    ", "return", "\"{}({})\"", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "scheduler_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.schedulers.lr_schedulers.instantiate_scheduler": [[117, 145], ["getattr", "lr_schedulers.collect_params", "getattr.", "setattr", "lr_schedulers.LRScheduler", "getattr", "getattr.lower", "NotImplementedError", "omegaconf.OmegaConf.to_container", "getattr", "log.info"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.schedulers.lr_schedulers.collect_params"], ["", "", "def", "instantiate_scheduler", "(", "optimizer", ",", "scheduler_opt", ")", ":", "\n", "    ", "\"\"\"Return a learning rate scheduler\n    Parameters:\n        optimizer          -- the optimizer of the network\n        scheduler_opt (option class) -- dict containing all the params to build the scheduler\u3000\n                              opt.lr_policy is the name of learning rate policy: lambda_rule | step | plateau | cosine\n                              opt.params contains the scheduler_params to construct the scheduler\n    See https://pytorch.org/docs/stable/optim.html for more details.\n    \"\"\"", "\n", "\n", "update_scheduler_on", "=", "scheduler_opt", ".", "update_scheduler_on", "\n", "scheduler_cls_name", "=", "getattr", "(", "scheduler_opt", ",", "\"class\"", ")", "\n", "scheduler_params", "=", "collect_params", "(", "scheduler_opt", ".", "params", ",", "update_scheduler_on", ")", "\n", "\n", "try", ":", "\n", "        ", "scheduler_cls", "=", "getattr", "(", "lr_scheduler", ",", "scheduler_cls_name", ")", "\n", "", "except", ":", "\n", "        ", "scheduler_cls", "=", "getattr", "(", "_custom_lr_scheduler", ",", "scheduler_cls_name", ")", "\n", "log", ".", "info", "(", "\"Created custom lr scheduler\"", ")", "\n", "\n", "", "if", "scheduler_cls_name", ".", "lower", "(", ")", "==", "\"ReduceLROnPlateau\"", ".", "lower", "(", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"This scheduler is not fully supported yet\"", ")", "\n", "\n", "", "scheduler", "=", "scheduler_cls", "(", "optimizer", ",", "**", "scheduler_params", ")", "\n", "# used to re_create the scheduler", "\n", "\n", "setattr", "(", "scheduler", ",", "\"_scheduler_opt\"", ",", "OmegaConf", ".", "to_container", "(", "scheduler_opt", ")", ")", "\n", "return", "LRScheduler", "(", "scheduler", ",", "scheduler_params", ",", "update_scheduler_on", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.huber_loss.HuberLoss.__init__": [[55, 58], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "delta", "=", "0.1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_delta", "=", "delta", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.huber_loss.HuberLoss.forward": [[59, 61], ["huber_loss.huber_loss"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.huber_loss.huber_loss"], ["", "def", "forward", "(", "self", ",", "error", ")", ":", "\n", "        ", "return", "huber_loss", "(", "error", ",", "self", ".", "_delta", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.huber_loss.nn_distance": [[4, 32], ["pc1.unsqueeze().repeat", "pc2.unsqueeze().repeat", "torch.min", "torch.min", "torch.sum", "pc1.unsqueeze", "pc2.unsqueeze", "huber_loss.huber_loss", "torch.sum", "torch.sum", "torch.abs"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.huber_loss.huber_loss"], ["def", "nn_distance", "(", "pc1", ",", "pc2", ",", "l1smooth", "=", "False", ",", "delta", "=", "1.0", ",", "l1", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Input:\n        pc1: (B,N,C) torch tensor\n        pc2: (B,M,C) torch tensor\n        l1smooth: bool, whether to use l1smooth loss\n        delta: scalar, the delta used in l1smooth loss\n    Output:\n        dist1: (B,N) torch float32 tensor\n        idx1: (B,N) torch int64 tensor\n        dist2: (B,M) torch float32 tensor\n        idx2: (B,M) torch int64 tensor\n    \"\"\"", "\n", "N", "=", "pc1", ".", "shape", "[", "1", "]", "\n", "M", "=", "pc2", ".", "shape", "[", "1", "]", "\n", "pc1_expand_tile", "=", "pc1", ".", "unsqueeze", "(", "2", ")", ".", "repeat", "(", "1", ",", "1", ",", "M", ",", "1", ")", "\n", "pc2_expand_tile", "=", "pc2", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "N", ",", "1", ",", "1", ")", "\n", "pc_diff", "=", "pc1_expand_tile", "-", "pc2_expand_tile", "\n", "\n", "if", "l1smooth", ":", "\n", "        ", "pc_dist", "=", "torch", ".", "sum", "(", "huber_loss", "(", "pc_diff", ",", "delta", ")", ",", "dim", "=", "-", "1", ")", "# (B,N,M)", "\n", "", "elif", "l1", ":", "\n", "        ", "pc_dist", "=", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "pc_diff", ")", ",", "dim", "=", "-", "1", ")", "# (B,N,M)", "\n", "", "else", ":", "\n", "        ", "pc_dist", "=", "torch", ".", "sum", "(", "pc_diff", "**", "2", ",", "dim", "=", "-", "1", ")", "# (B,N,M)", "\n", "", "dist1", ",", "idx1", "=", "torch", ".", "min", "(", "pc_dist", ",", "dim", "=", "2", ")", "# (B,N)", "\n", "dist2", ",", "idx2", "=", "torch", ".", "min", "(", "pc_dist", ",", "dim", "=", "1", ")", "# (B,M)", "\n", "return", "dist1", ",", "idx1", ",", "dist2", ",", "idx2", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.huber_loss.huber_loss": [[34, 52], ["torch.abs", "torch.clamp"], "function", ["None"], ["", "def", "huber_loss", "(", "error", ",", "delta", "=", "1.0", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        error: Torch tensor (d1,d2,...,dk)\n    Returns:\n        loss: Torch tensor (d1,d2,...,dk)\n\n    x = error = pred - gt or dist(pred,gt)\n    0.5 * |x|^2                 if |x|<=d\n    0.5 * d^2 + d * (|x|-d)     if |x|>d\n    Ref: https://github.com/charlesq34/frustum-pointnets/blob/master/models/model_util.py\n    \"\"\"", "\n", "abs_error", "=", "torch", ".", "abs", "(", "error", ")", "\n", "# quadratic = torch.min(abs_error, torch.FloatTensor([delta]))", "\n", "quadratic", "=", "torch", ".", "clamp", "(", "abs_error", ",", "max", "=", "delta", ")", "\n", "linear", "=", "abs_error", "-", "quadratic", "\n", "loss", "=", "0.5", "*", "quadratic", "**", "2", "+", "delta", "*", "linear", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.panoptic_losses.offset_loss": [[6, 23], ["torch.sum", "torch.norm", "torch.norm", "torch.abs", "torch.sum", "torch.sum", "torch.norm.unsqueeze", "torch.norm.unsqueeze"], "function", ["None"], ["def", "offset_loss", "(", "pred_offsets", ",", "gt_offsets", ",", "total_instance_points", ")", ":", "\n", "    ", "\"\"\" Computes the L1 norm between prediction and ground truth and\n    also computes cosine similarity between both vectors.\n    see https://arxiv.org/pdf/2004.01658.pdf equations 2 and 3\n    \"\"\"", "\n", "pt_diff", "=", "pred_offsets", "-", "gt_offsets", "\n", "pt_dist", "=", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "pt_diff", ")", ",", "dim", "=", "-", "1", ")", "\n", "offset_norm_loss", "=", "torch", ".", "sum", "(", "pt_dist", ")", "/", "(", "total_instance_points", "+", "1e-6", ")", "\n", "\n", "gt_offsets_norm", "=", "torch", ".", "norm", "(", "gt_offsets", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "# (N), float", "\n", "gt_offsets_", "=", "gt_offsets", "/", "(", "gt_offsets_norm", ".", "unsqueeze", "(", "-", "1", ")", "+", "1e-8", ")", "\n", "pred_offsets_norm", "=", "torch", ".", "norm", "(", "pred_offsets", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "pred_offsets_", "=", "pred_offsets", "/", "(", "pred_offsets_norm", ".", "unsqueeze", "(", "-", "1", ")", "+", "1e-8", ")", "\n", "direction_diff", "=", "-", "(", "gt_offsets_", "*", "pred_offsets_", ")", ".", "sum", "(", "-", "1", ")", "# (N)", "\n", "offset_dir_loss", "=", "torch", ".", "sum", "(", "direction_diff", ")", "/", "(", "total_instance_points", "+", "1e-6", ")", "\n", "\n", "return", "{", "\"offset_norm_loss\"", ":", "offset_norm_loss", ",", "\"offset_dir_loss\"", ":", "offset_dir_loss", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.panoptic_losses.instance_iou_loss": [[25, 47], ["torch.logical_and", "torch.zeros_like", "torch.nn.functional.binary_cross_entropy", "len", "torch_points_kernels.instance_iou().max", "torch.logical_not", "torch.logical_not", "torch.sum", "torch_points_kernels.instance_iou"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "def", "instance_iou_loss", "(", "\n", "predicted_clusters", ":", "List", "[", "torch", ".", "Tensor", "]", ",", "\n", "cluster_scores", ":", "torch", ".", "Tensor", ",", "\n", "instance_labels", ":", "torch", ".", "Tensor", ",", "\n", "batch", ":", "torch", ".", "Tensor", ",", "\n", "min_iou_threshold", "=", "0.25", ",", "\n", "max_iou_threshold", "=", "0.75", ",", "\n", ")", ":", "\n", "    ", "\"\"\" Loss that promotes higher scores for clusters with higher instance iou,\n    see https://arxiv.org/pdf/2004.01658.pdf equation (7)\n    \"\"\"", "\n", "assert", "len", "(", "predicted_clusters", ")", "==", "cluster_scores", ".", "shape", "[", "0", "]", "\n", "ious", "=", "instance_iou", "(", "predicted_clusters", ",", "instance_labels", ",", "batch", ")", ".", "max", "(", "1", ")", "[", "0", "]", "\n", "lower_mask", "=", "ious", "<", "min_iou_threshold", "\n", "higher_mask", "=", "ious", ">", "max_iou_threshold", "\n", "middle_mask", "=", "torch", ".", "logical_and", "(", "torch", ".", "logical_not", "(", "lower_mask", ")", ",", "torch", ".", "logical_not", "(", "higher_mask", ")", ")", "\n", "assert", "torch", ".", "sum", "(", "lower_mask", "+", "higher_mask", "+", "middle_mask", ")", "==", "ious", ".", "shape", "[", "0", "]", "\n", "shat", "=", "torch", ".", "zeros_like", "(", "ious", ")", "\n", "iou_middle", "=", "ious", "[", "middle_mask", "]", "\n", "shat", "[", "higher_mask", "]", "=", "1", "\n", "shat", "[", "middle_mask", "]", "=", "(", "iou_middle", "-", "min_iou_threshold", ")", "/", "(", "max_iou_threshold", "-", "min_iou_threshold", ")", "\n", "return", "torch", ".", "nn", ".", "functional", ".", "binary_cross_entropy", "(", "cluster_scores", ",", "shat", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.dirichlet_loss.DirichletLoss.__init__": [[14, 18], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["def", "__init__", "(", "self", ",", "r", ",", "aggr", "=", "torch", ".", "mean", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_r", "=", "r", "\n", "self", ".", "_aggr", "=", "aggr", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.dirichlet_loss.DirichletLoss.forward": [[19, 27], ["dirichlet_loss.dirichlet_loss"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.dirichlet_loss.dirichlet_loss"], ["", "def", "forward", "(", "self", ",", "pos", ",", "f", ",", "batch_idx", "=", "None", ")", ":", "\n", "        ", "\"\"\" Computes the Dirichlet loss (or L2 norm of the gradient) of f\n        Arguments:\n            pos -- [N,3] (or [B,N,3] for dense format)  location of each point\n            f -- [N] (or [B,N] for dense format)  Value of a function at each points\n            batch_idx -- [N] Batch id of each point (Only for sparse format)\n        \"\"\"", "\n", "return", "dirichlet_loss", "(", "self", ".", "_r", ",", "pos", ",", "f", ",", "batch_idx", "=", "batch_idx", ",", "aggr", "=", "self", ".", "_aggr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.dirichlet_loss.dirichlet_loss": [[29, 44], ["dirichlet_loss._dirichlet_dense", "dirichlet_loss._dirichlet_sparse", "f.dim", "pos.dim", "f.dim", "pos.dim"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.dirichlet_loss._dirichlet_dense", "home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.dirichlet_loss._dirichlet_sparse"], ["", "", "def", "dirichlet_loss", "(", "r", ",", "pos", ",", "f", ",", "batch_idx", "=", "None", ",", "aggr", "=", "torch", ".", "mean", ")", ":", "\n", "    ", "\"\"\" Computes the Dirichlet loss (or L2 norm of the gradient) of f\n    Arguments:\n        r -- Radius for the beighbour search\n        pos -- [N,3] (or [B,N,3] for dense format)  location of each point\n        f -- [N] (or [B,N] for dense format)  Value of a function at each points\n        batch_idx -- [N] Batch id of each point (Only for sparse format)\n        aggr -- aggregation function for the final loss value\n    \"\"\"", "\n", "if", "batch_idx", "is", "None", ":", "\n", "        ", "assert", "f", ".", "dim", "(", ")", "==", "2", "and", "pos", ".", "dim", "(", ")", "==", "3", "\n", "return", "_dirichlet_dense", "(", "r", ",", "pos", ",", "f", ",", "aggr", ")", "\n", "", "else", ":", "\n", "        ", "assert", "f", ".", "dim", "(", ")", "==", "1", "and", "pos", ".", "dim", "(", ")", "==", "2", "\n", "return", "_dirichlet_sparse", "(", "r", ",", "pos", ",", "f", ",", "batch_idx", ",", "aggr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.dirichlet_loss._dirichlet_dense": [[46, 49], ["dirichlet_loss._variance_estimator_dense", "aggr"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.dirichlet_loss._variance_estimator_dense"], ["", "", "def", "_dirichlet_dense", "(", "r", ",", "pos", ",", "f", ",", "aggr", ")", ":", "\n", "    ", "variances", "=", "_variance_estimator_dense", "(", "r", ",", "pos", ",", "f", ")", "\n", "return", "1", "/", "2.0", "*", "aggr", "(", "variances", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.dirichlet_loss._variance_estimator_dense": [[51, 56], ["[].reshape().long", "f.gather().reshape", "gradient.sum", "[].reshape", "f.gather", "f.unsqueeze().repeat", "f.unsqueeze", "torch_points_kernels.ball_query"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.gathering.gather"], ["", "def", "_variance_estimator_dense", "(", "r", ",", "pos", ",", "f", ")", ":", "\n", "    ", "nei_idx", "=", "tp", ".", "ball_query", "(", "r", ",", "_MAX_NEIGHBOURS", ",", "pos", ",", "pos", ",", "sort", "=", "True", ")", "[", "0", "]", ".", "reshape", "(", "pos", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ".", "long", "(", ")", "# [B,N * nei]", "\n", "f_neighboors", "=", "f", ".", "gather", "(", "1", ",", "nei_idx", ")", ".", "reshape", "(", "f", ".", "shape", "[", "0", "]", ",", "f", ".", "shape", "[", "1", "]", ",", "-", "1", ")", "# [B,N , nei]", "\n", "gradient", "=", "(", "f", ".", "unsqueeze", "(", "-", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "f_neighboors", ".", "shape", "[", "-", "1", "]", ")", "-", "f_neighboors", ")", "**", "2", "# [B,N,nei]", "\n", "return", "gradient", ".", "sum", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.dirichlet_loss._dirichlet_sparse": [[58, 61], ["dirichlet_loss._variance_estimator_sparse", "aggr"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.dirichlet_loss._variance_estimator_sparse"], ["", "def", "_dirichlet_sparse", "(", "r", ",", "pos", ",", "f", ",", "batch_idx", ",", "aggr", ")", ":", "\n", "    ", "variances", "=", "_variance_estimator_sparse", "(", "r", ",", "pos", ",", "f", ",", "batch_idx", ")", "\n", "return", "1", "/", "2.0", "*", "aggr", "(", "variances", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.dirichlet_loss._variance_estimator_sparse": [[63, 74], ["torch_scatter.scatter_add", "torch.no_grad", "torch_cluster.radius", "pos.size"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.kitti360.KITTI360Cylinder.radius"], ["", "def", "_variance_estimator_sparse", "(", "r", ",", "pos", ",", "f", ",", "batch_idx", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "assign_index", "=", "radius", "(", "pos", ",", "pos", ",", "r", ",", "batch_x", "=", "batch_idx", ",", "batch_y", "=", "batch_idx", ")", "\n", "y_idx", ",", "x_idx", "=", "assign_index", "\n", "# diff = pos[x_idx] - pos[y_idx]", "\n", "# squared_distance = (diff * diff).sum(dim=-1, keepdim=True)", "\n", "# weights = 1.0 / torch.clamp(squared_distance, min=1e-16)", "\n", "\n", "grad_f", "=", "(", "f", "[", "x_idx", "]", "-", "f", "[", "y_idx", "]", ")", "**", "2", "\n", "", "y", "=", "scatter_add", "(", "grad_f", ",", "y_idx", ",", "dim", "=", "0", ",", "dim_size", "=", "pos", ".", "size", "(", "0", ")", ")", "\n", "return", "y", "\n", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.__init__.instantiate_loss_or_miner": [[23, 62], ["getattr", "getattr.", "option.get", "option.get", "getattr", "getattr.", "getattr.", "getattr.", "getattr", "getattr", "NotImplementedError", "ValueError", "ValueError"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.metric_losses.ContrastiveHardestNegativeLoss.__init__": [[62, 68], ["torch.Module.__init__", "torch.Module.__init__", "torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["def", "__init__", "(", "self", ",", "pos_thresh", ",", "neg_thresh", ",", "num_pos", "=", "5192", ",", "num_hn_samples", "=", "2048", ")", ":", "\n", "        ", "nn", ".", "Module", ".", "__init__", "(", "self", ")", "\n", "self", ".", "pos_thresh", "=", "pos_thresh", "\n", "self", ".", "neg_thresh", "=", "neg_thresh", "\n", "self", ".", "num_pos", "=", "num_pos", "\n", "self", ".", "num_hn_samples", "=", "num_hn_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.metric_losses.ContrastiveHardestNegativeLoss.contrastive_hardest_negative_loss": [[69, 114], ["len", "max", "numpy.random.choice", "numpy.random.choice", "sample_pos_pairs[].long", "sample_pos_pairs[].long", "metric_losses.pdist", "metric_losses.pdist", "pdist.min", "pdist.min", "metric_losses._hash", "metric_losses._hash", "metric_losses._hash", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.relu", "torch.relu", "torch.relu", "torch.relu().pow", "torch.relu().pow", "torch.relu().pow", "torch.relu().pow", "torch.relu().pow", "torch.relu().pow", "len", "len", "min", "min", "numpy.random.choice", "isinstance", "numpy.array", "numpy.logical_not", "numpy.logical_not", "torch.relu.mean", "D01ind.cpu().numpy", "D10ind.cpu().numpy", "sample_pos_pairs[].long.numpy", "sample_pos_pairs[].long.numpy", "numpy.isin", "numpy.isin", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu().pow.mean", "torch.relu().pow.mean", "D01ind.cpu", "D10ind.cpu"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.metric_losses.pdist", "home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.metric_losses.pdist", "home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.metric_losses._hash", "home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.metric_losses._hash", "home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.metric_losses._hash", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.lovasz_loss.mean", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.lovasz_loss.mean", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.lovasz_loss.mean", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.csr.CSRData.cpu", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.csr.CSRData.cpu"], ["", "def", "contrastive_hardest_negative_loss", "(", "self", ",", "F0", ",", "F1", ",", "positive_pairs", ",", "thresh", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Generate negative pairs\n        \"\"\"", "\n", "N0", ",", "N1", "=", "len", "(", "F0", ")", ",", "len", "(", "F1", ")", "\n", "N_pos_pairs", "=", "len", "(", "positive_pairs", ")", "\n", "hash_seed", "=", "max", "(", "N0", ",", "N1", ")", "\n", "sel0", "=", "np", ".", "random", ".", "choice", "(", "N0", ",", "min", "(", "N0", ",", "self", ".", "num_hn_samples", ")", ",", "replace", "=", "False", ")", "\n", "sel1", "=", "np", ".", "random", ".", "choice", "(", "N1", ",", "min", "(", "N1", ",", "self", ".", "num_hn_samples", ")", ",", "replace", "=", "False", ")", "\n", "\n", "if", "N_pos_pairs", ">", "self", ".", "num_pos", ":", "\n", "            ", "pos_sel", "=", "np", ".", "random", ".", "choice", "(", "N_pos_pairs", ",", "self", ".", "num_pos", ",", "replace", "=", "False", ")", "\n", "sample_pos_pairs", "=", "positive_pairs", "[", "pos_sel", "]", "\n", "", "else", ":", "\n", "            ", "sample_pos_pairs", "=", "positive_pairs", "\n", "\n", "# Find negatives for all F1[positive_pairs[:, 1]]", "\n", "", "subF0", ",", "subF1", "=", "F0", "[", "sel0", "]", ",", "F1", "[", "sel1", "]", "\n", "\n", "pos_ind0", "=", "sample_pos_pairs", "[", ":", ",", "0", "]", ".", "long", "(", ")", "\n", "pos_ind1", "=", "sample_pos_pairs", "[", ":", ",", "1", "]", ".", "long", "(", ")", "\n", "posF0", ",", "posF1", "=", "F0", "[", "pos_ind0", "]", ",", "F1", "[", "pos_ind1", "]", "\n", "\n", "D01", "=", "pdist", "(", "posF0", ",", "subF1", ",", "dist_type", "=", "\"L2\"", ")", "\n", "D10", "=", "pdist", "(", "posF1", ",", "subF0", ",", "dist_type", "=", "\"L2\"", ")", "\n", "\n", "D01min", ",", "D01ind", "=", "D01", ".", "min", "(", "1", ")", "\n", "D10min", ",", "D10ind", "=", "D10", ".", "min", "(", "1", ")", "\n", "\n", "if", "not", "isinstance", "(", "positive_pairs", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "positive_pairs", "=", "np", ".", "array", "(", "positive_pairs", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "\n", "", "pos_keys", "=", "_hash", "(", "positive_pairs", ",", "hash_seed", ")", "\n", "\n", "D01ind", "=", "sel1", "[", "D01ind", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "]", "\n", "D10ind", "=", "sel0", "[", "D10ind", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "]", "\n", "neg_keys0", "=", "_hash", "(", "[", "pos_ind0", ".", "numpy", "(", ")", ",", "D01ind", "]", ",", "hash_seed", ")", "\n", "neg_keys1", "=", "_hash", "(", "[", "D10ind", ",", "pos_ind1", ".", "numpy", "(", ")", "]", ",", "hash_seed", ")", "\n", "\n", "mask0", "=", "torch", ".", "from_numpy", "(", "np", ".", "logical_not", "(", "np", ".", "isin", "(", "neg_keys0", ",", "pos_keys", ",", "assume_unique", "=", "False", ")", ")", ")", "\n", "mask1", "=", "torch", ".", "from_numpy", "(", "np", ".", "logical_not", "(", "np", ".", "isin", "(", "neg_keys1", ",", "pos_keys", ",", "assume_unique", "=", "False", ")", ")", ")", "\n", "pos_loss", "=", "F", ".", "relu", "(", "(", "posF0", "-", "posF1", ")", ".", "pow", "(", "2", ")", ".", "sum", "(", "1", ")", "-", "self", ".", "pos_thresh", ")", "\n", "neg_loss0", "=", "F", ".", "relu", "(", "self", ".", "neg_thresh", "-", "D01min", "[", "mask0", "]", ")", ".", "pow", "(", "2", ")", "\n", "neg_loss1", "=", "F", ".", "relu", "(", "self", ".", "neg_thresh", "-", "D10min", "[", "mask1", "]", ")", ".", "pow", "(", "2", ")", "\n", "return", "pos_loss", ".", "mean", "(", ")", ",", "(", "neg_loss0", ".", "mean", "(", ")", "+", "neg_loss1", ".", "mean", "(", ")", ")", "/", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.metric_losses.ContrastiveHardestNegativeLoss.forward": [[115, 120], ["metric_losses.ContrastiveHardestNegativeLoss.contrastive_hardest_negative_loss", "matches.detach().cpu", "matches.detach"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.metric_losses.ContrastiveHardestNegativeLoss.contrastive_hardest_negative_loss", "home.repos.pwc.inspect_result.drprojects_deepviewagg.multimodal.csr.CSRData.cpu"], ["", "def", "forward", "(", "self", ",", "F0", ",", "F1", ",", "matches", ",", "xyz0", "=", "None", ",", "xyz1", "=", "None", ")", ":", "\n", "\n", "        ", "pos_loss", ",", "neg_loss", "=", "self", ".", "contrastive_hardest_negative_loss", "(", "F0", ",", "F1", ",", "matches", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "\n", "return", "pos_loss", "+", "neg_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.metric_losses.BatchHardContrastiveLoss.__init__": [[136, 141], ["torch.Module.__init__", "torch.Module.__init__", "torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__", "home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["def", "__init__", "(", "self", ",", "pos_thresh", ",", "neg_thresh", ",", "min_dist", "=", "0.15", ")", ":", "\n", "        ", "nn", ".", "Module", ".", "__init__", "(", "self", ")", "\n", "self", ".", "pos_thresh", "=", "pos_thresh", "\n", "self", ".", "neg_thresh", "=", "neg_thresh", "\n", "self", ".", "min_dist", "=", "min_dist", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.metric_losses.BatchHardContrastiveLoss.forward": [[142, 163], ["range", "torch.relu().pow", "torch.relu().pow", "torch.relu().pow", "metric_losses.pdist", "torch.relu().pow", "torch.relu().pow", "torch.relu().pow", "len", "len", "torch.relu().pow.mean", "neg_loss.mean", "torch.relu().pow", "torch.relu().pow", "torch.relu().pow", "len", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.metric_losses.pdist", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.lovasz_loss.mean", "home.repos.pwc.inspect_result.drprojects_deepviewagg.metrics.lovasz_loss.mean", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["", "def", "forward", "(", "self", ",", "F0", ",", "F1", ",", "positive_pairs", ",", "xyz0", "=", "None", ",", "xyz1", "=", "None", ")", ":", "\n", "\n", "        ", "posF0", "=", "F0", "[", "positive_pairs", "[", ":", ",", "0", "]", "]", "\n", "posF1", "=", "F1", "[", "positive_pairs", "[", ":", ",", "1", "]", "]", "\n", "\n", "subxyz0", "=", "xyz0", "[", "positive_pairs", "[", ":", ",", "0", "]", "]", "\n", "false_negative", "=", "pdist", "(", "subxyz0", ",", "subxyz0", ",", "dist_type", "=", "\"L2\"", ")", ">", "self", ".", "min_dist", "\n", "# dists = pdist(posF0, posF1, dist_type=\"L2\").view(-1)", "\n", "furthest_pos", ",", "_", "=", "(", "posF0", "-", "posF1", ")", ".", "pow", "(", "2", ")", ".", "max", "(", "1", ")", "\n", "neg_loss", "=", "F", ".", "relu", "(", "self", ".", "neg_thresh", "-", "(", "posF0", "[", "0", "]", "-", "posF1", "[", "false_negative", "[", "0", "]", "]", ")", ".", "pow", "(", "2", ")", ".", "sum", "(", "1", ")", ".", "min", "(", ")", ")", ".", "pow", "(", "2", ")", "/", "len", "(", "\n", "posF0", "\n", ")", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "posF0", ")", ")", ":", "\n", "            ", "neg_loss", "+=", "F", ".", "relu", "(", "self", ".", "neg_thresh", "-", "(", "posF0", "[", "i", "]", "-", "posF1", "[", "false_negative", "[", "i", "]", "]", ")", ".", "pow", "(", "2", ")", ".", "sum", "(", "1", ")", ".", "min", "(", ")", ")", ".", "pow", "(", "\n", "2", "\n", ")", "/", "len", "(", "posF0", ")", "\n", "\n", "", "pos_loss", "=", "F", ".", "relu", "(", "furthest_pos", "-", "self", ".", "pos_thresh", ")", ".", "pow", "(", "2", ")", "\n", "# neg_loss = F.relu(self.neg_thresh - closest_neg)", "\n", "return", "pos_loss", ".", "mean", "(", ")", "+", "neg_loss", ".", "mean", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.metric_losses._hash": [[7, 20], ["isinstance", "numpy.zeros", "range", "isinstance", "len", "len"], "function", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len", "home.repos.pwc.inspect_result.drprojects_deepviewagg.segmentation.semantickitti.SemanticKitti.len"], ["def", "_hash", "(", "arr", ",", "M", ")", ":", "\n", "    ", "if", "isinstance", "(", "arr", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "N", ",", "D", "=", "arr", ".", "shape", "\n", "", "else", ":", "\n", "        ", "N", ",", "D", "=", "len", "(", "arr", "[", "0", "]", ")", ",", "len", "(", "arr", ")", "\n", "\n", "", "hash_vec", "=", "np", ".", "zeros", "(", "N", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "for", "d", "in", "range", "(", "D", ")", ":", "\n", "        ", "if", "isinstance", "(", "arr", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "hash_vec", "+=", "arr", "[", ":", ",", "d", "]", "*", "M", "**", "d", "\n", "", "else", ":", "\n", "            ", "hash_vec", "+=", "arr", "[", "d", "]", "*", "M", "**", "d", "\n", "", "", "return", "hash_vec", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.metric_losses.pdist": [[22, 30], ["torch.sum", "torch.sum", "torch.sum", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sum", "torch.sum", "torch.sum", "NotImplementedError", "A.unsqueeze", "B.unsqueeze", "A.unsqueeze", "B.unsqueeze"], "function", ["None"], ["", "def", "pdist", "(", "A", ",", "B", ",", "dist_type", "=", "\"L2\"", ")", ":", "\n", "    ", "if", "dist_type", "==", "\"L2\"", ":", "\n", "        ", "D2", "=", "torch", ".", "sum", "(", "(", "A", ".", "unsqueeze", "(", "1", ")", "-", "B", ".", "unsqueeze", "(", "0", ")", ")", ".", "pow", "(", "2", ")", ",", "2", ")", "\n", "return", "torch", ".", "sqrt", "(", "D2", "+", "1e-7", ")", "\n", "", "elif", "dist_type", "==", "\"SquareL2\"", ":", "\n", "        ", "return", "torch", ".", "sum", "(", "(", "A", ".", "unsqueeze", "(", "1", ")", "-", "B", ".", "unsqueeze", "(", "0", ")", ")", ".", "pow", "(", "2", ")", ",", "2", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"Not implemented\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.LossAnnealer.__init__": [[25, 29], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["n_points", "=", "deformed_kpoints", ".", "shape", "[", "1", "]", "\n", "repulsive_loss", "=", "0", "\n", "for", "i", "in", "range", "(", "n_points", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "other_points", "=", "torch", ".", "cat", "(", "[", "deformed_kpoints", "[", ":", ",", ":", "i", ",", ":", "]", ",", "deformed_kpoints", "[", ":", ",", "i", "+", "1", ":", ",", ":", "]", "]", ",", "dim", "=", "1", ")", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.LossAnnealer.forward": [[30, 36], ["kwargs.get"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get"], ["", "distances", "=", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "(", "other_points", "-", "deformed_kpoints", "[", ":", ",", "i", ":", "i", "+", "1", ",", ":", "]", ")", "**", "2", ",", "dim", "=", "-", "1", ")", ")", "\n", "repulsion_force", "=", "torch", ".", "sum", "(", "torch", ".", "pow", "(", "torch", ".", "relu", "(", "1.5", "-", "distances", ")", ",", "2", ")", ",", "dim", "=", "1", ")", "\n", "repulsive_loss", "+=", "torch", ".", "mean", "(", "repulsion_force", ")", "\n", "", "return", "repulsive_loss", "\n", "\n", "\n", "", "def", "permissive_loss", "(", "deformed_kpoints", ",", "radius", ")", ":", "\n"]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.LossFactory.__init__": [[39, 59], ["super().__init__", "losses.FocalLoss", "losses.WrapperKLDivLoss"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], ["\n", "norm_deformed_normalized", "=", "torch", ".", "norm", "(", "deformed_kpoints", ",", "p", "=", "2", ",", "dim", "=", "-", "1", ")", "/", "float", "(", "radius", ")", "\n", "permissive_loss", "=", "torch", ".", "mean", "(", "norm_deformed_normalized", "[", "norm_deformed_normalized", ">", "1.0", "]", ")", "\n", "return", "permissive_loss", "\n", "", ""]], "home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.LossFactory.forward": [[60, 66], ["collections.OrderedDict", "losses.filter_valid", "losses.LossFactory._loss_func", "kwargs.get"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.filter_valid", "home.repos.pwc.inspect_result.drprojects_deepviewagg.registration.base3dmatch.Base3DMatch.get"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.FocalLoss.__init__": [[69, 77], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.FocalLoss.forward": [[78, 95], ["torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "logpt.view.view.view", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "loss.sum", "target.unsqueeze", "logpt.view.view.data.exp", "losses.FocalLoss._alphas.gather", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.gathering.gather", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.gathering.gather", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.gathering.gather", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.gathering.gather", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.gathering.gather", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.gathering.gather", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.gathering.gather", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.gathering.gather", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.gathering.gather", "home.repos.pwc.inspect_result.drprojects_deepviewagg.common_modules.gathering.gather"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__": [[98, 100], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.__init__"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.WrapperKLDivLoss.forward": [[101, 106], ["torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "segm_size.unsqueeze().float", "torch.nn.modules.loss.KLDivLoss", "torch.nn.modules.loss.KLDivLoss", "torch.nn.modules.loss.KLDivLoss", "torch.nn.modules.loss.KLDivLoss", "torch.nn.modules.loss.KLDivLoss", "torch.nn.modules.loss.KLDivLoss", "torch.nn.modules.loss.KLDivLoss", "torch.nn.modules.loss.KLDivLoss", "torch.nn.modules.loss.KLDivLoss", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "segm_size.unsqueeze"], "methods", ["None"], []], "home.repos.pwc.inspect_result.drprojects_deepviewagg.losses.losses.filter_valid": [[12, 18], ["None"], "function", ["None"], ["kpmin", "=", "sq_distance", ".", "min", "(", "dim", "=", "1", ")", "[", "0", "]", "\n", "normalised_kpmin", "=", "kpmin", "/", "(", "radius", "**", "2", ")", "\n", "return", "torch", ".", "mean", "(", "normalised_kpmin", ")", "\n", "\n", "\n", "", "def", "repulsion_loss", "(", "deformed_kpoints", ",", "radius", ")", ":", "\n", "    "]]}