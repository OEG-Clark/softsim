{"home.repos.pwc.inspect_result.zezhishao_d2stgnn.None.main.main": [[18, 172], ["utils.train.set_config", "argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "torch.device", "setproctitle.setproctitle", "time.time", "utils.load_data.load_adj", "time.time", "print", "torch.tensor().to", "utils.log.TrainLogger", "utils.log.TrainLogger.print_model_args", "utils.log.TrainLogger.print_optim_args", "models.model.D2STGNN().to", "models.trainer", "utils.train.EarlyStopping", "print", "models.trainer.set_resume_lr_and_cl", "open", "yaml.load", "[].split", "time.time", "pickle.load", "time.time", "print", "time.time", "utils.load_data.load_dataset", "pickle.dump", "time.time", "print", "pickle.load", "pickle.load", "torch.tensor().to", "len", "len", "len", "range", "print", "print", "models.trainer.test", "open", "open", "open", "open", "torch.tensor", "models.model.D2STGNN", "str", "utils.train.load_model", "utils.train.load_model", "time.time", "dataloader[].shuffle", "enumerate", "time.time", "train_time.append", "np.mean", "np.mean", "np.mean", "time.time", "models.trainer.eval", "time.time", "val_time.append", "str", "print", "utils.train.EarlyStopping.", "models.trainer.test", "torch.tensor", "len", "models.trainer.lr_scheduler.get_last_lr", "dataloader[].get_iterator", "utils.train.data_reshaper", "utils.train.data_reshaper", "models.trainer.train", "print", "train_loss.append", "train_mape.append", "train_rmse.append", "models.trainer.lr_scheduler.step", "time.strftime", "log.format", "print", "np.mean", "np.mean", "time.localtime"], "function", ["home.repos.pwc.inspect_result.zezhishao_d2stgnn.utils.train.set_config", "home.repos.pwc.inspect_result.zezhishao_d2stgnn.utils.load_data.load_adj", "home.repos.pwc.inspect_result.zezhishao_d2stgnn.utils.log.TrainLogger.print_model_args", "home.repos.pwc.inspect_result.zezhishao_d2stgnn.utils.log.TrainLogger.print_optim_args", "home.repos.pwc.inspect_result.zezhishao_d2stgnn.models.trainer.trainer.set_resume_lr_and_cl", "home.repos.pwc.inspect_result.zezhishao_d2stgnn.utils.load_data.load_dataset", "home.repos.pwc.inspect_result.zezhishao_d2stgnn.models.trainer.trainer.test", "home.repos.pwc.inspect_result.zezhishao_d2stgnn.utils.train.load_model", "home.repos.pwc.inspect_result.zezhishao_d2stgnn.utils.train.load_model", "home.repos.pwc.inspect_result.zezhishao_d2stgnn.dataloader.dataloader.DataLoader.shuffle", "home.repos.pwc.inspect_result.zezhishao_d2stgnn.models.trainer.trainer.eval", "home.repos.pwc.inspect_result.zezhishao_d2stgnn.models.trainer.trainer.test", "home.repos.pwc.inspect_result.zezhishao_d2stgnn.dataloader.dataloader.DataLoader.get_iterator", "home.repos.pwc.inspect_result.zezhishao_d2stgnn.utils.train.data_reshaper", "home.repos.pwc.inspect_result.zezhishao_d2stgnn.utils.train.data_reshaper", "home.repos.pwc.inspect_result.zezhishao_d2stgnn.models.trainer.trainer.train"], ["def", "main", "(", "**", "kwargs", ")", ":", "\n", "    ", "set_config", "(", "0", ")", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ",", "default", "=", "'METR-LA'", ",", "help", "=", "'Dataset name.'", ")", "\n", "# parser.add_argument('--dataset', type=str, default='PEMS-BAY', help='Dataset name.')", "\n", "# parser.add_argument('--dataset', type=str, default='PEMS04', help='Dataset name.')", "\n", "# parser.add_argument('--dataset', type=str, default='PEMS08', help='Dataset name.')", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "config_path", "=", "\"configs/\"", "+", "args", ".", "dataset", "+", "\".yaml\"", "\n", "\n", "with", "open", "(", "config_path", ")", "as", "f", ":", "\n", "        ", "config", "=", "yaml", ".", "load", "(", "f", ",", "Loader", "=", "yaml", ".", "FullLoader", ")", "\n", "\n", "", "data_dir", "=", "config", "[", "'data_args'", "]", "[", "'data_dir'", "]", "\n", "dataset_name", "=", "config", "[", "'data_args'", "]", "[", "'data_dir'", "]", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", "\n", "\n", "device", "=", "torch", ".", "device", "(", "config", "[", "'start_up'", "]", "[", "'device'", "]", ")", "\n", "save_path", "=", "'output/'", "+", "config", "[", "'start_up'", "]", "[", "'model_name'", "]", "+", "\"_\"", "+", "dataset_name", "+", "\".pt\"", "# the best model", "\n", "save_path_resume", "=", "'output/'", "+", "config", "[", "'start_up'", "]", "[", "'model_name'", "]", "+", "\"_\"", "+", "dataset_name", "+", "\"_resume.pt\"", "# the resume model", "\n", "load_pkl", "=", "config", "[", "'start_up'", "]", "[", "'load_pkl'", "]", "\n", "model_name", "=", "config", "[", "'start_up'", "]", "[", "'model_name'", "]", "\n", "\n", "only_test", "=", "config", "[", "'start_up'", "]", "[", "'only_test'", "]", "\n", "resume", "=", "config", "[", "'start_up'", "]", "[", "'resume'", "]", "\n", "resume_best", "=", "config", "[", "'start_up'", "]", "[", "'resume_best'", "]", "\n", "\n", "model_name", "=", "config", "[", "'start_up'", "]", "[", "'model_name'", "]", "\n", "setproctitle", ".", "setproctitle", "(", "\"{0}.{1}@S22\"", ".", "format", "(", "model_name", ",", "dataset_name", ")", ")", "\n", "\n", "# ========================== load dataset, adjacent matrix, node embeddings ====================== #", "\n", "if", "load_pkl", ":", "\n", "        ", "t1", "=", "time", ".", "time", "(", ")", "\n", "dataloader", "=", "pickle", ".", "load", "(", "open", "(", "'output/dataloader_'", "+", "dataset_name", "+", "'.pkl'", ",", "'rb'", ")", ")", "\n", "t2", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\"Load dataset: {:.2f}s...\"", ".", "format", "(", "t2", "-", "t1", ")", ")", "\n", "", "else", ":", "\n", "        ", "t1", "=", "time", ".", "time", "(", ")", "\n", "batch_size", "=", "config", "[", "'model_args'", "]", "[", "'batch_size'", "]", "\n", "dataloader", "=", "load_dataset", "(", "data_dir", ",", "batch_size", ",", "batch_size", ",", "batch_size", ",", "dataset_name", ")", "\n", "pickle", ".", "dump", "(", "dataloader", ",", "open", "(", "'output/dataloader_'", "+", "dataset_name", "+", "'.pkl'", ",", "'wb'", ")", ")", "\n", "t2", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\"Load dataset: {:.2f}s...\"", ".", "format", "(", "t2", "-", "t1", ")", ")", "\n", "", "scaler", "=", "dataloader", "[", "'scaler'", "]", "\n", "\n", "if", "dataset_name", "==", "'PEMS04'", "or", "dataset_name", "==", "'PEMS08'", ":", "# traffic flow", "\n", "        ", "_min", "=", "pickle", ".", "load", "(", "open", "(", "\"datasets/{0}/min.pkl\"", ".", "format", "(", "dataset_name", ")", ",", "'rb'", ")", ")", "\n", "_max", "=", "pickle", ".", "load", "(", "open", "(", "\"datasets/{0}/max.pkl\"", ".", "format", "(", "dataset_name", ")", ",", "'rb'", ")", ")", "\n", "", "else", ":", "\n", "        ", "_min", "=", "None", "\n", "_max", "=", "None", "\n", "\n", "", "t1", "=", "time", ".", "time", "(", ")", "\n", "adj_mx", ",", "adj_ori", "=", "load_adj", "(", "config", "[", "'data_args'", "]", "[", "'adj_data_path'", "]", ",", "config", "[", "'data_args'", "]", "[", "'adj_type'", "]", ")", "\n", "t2", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\"Load adjacent matrix: {:.2f}s...\"", ".", "format", "(", "t2", "-", "t1", ")", ")", "\n", "\n", "\n", "# ================================ Hyper Parameters ================================= #", "\n", "# model parameters", "\n", "model_args", "=", "config", "[", "'model_args'", "]", "\n", "model_args", "[", "'device'", "]", "=", "device", "\n", "model_args", "[", "'num_nodes'", "]", "=", "adj_mx", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "model_args", "[", "'adjs'", "]", "=", "[", "torch", ".", "tensor", "(", "i", ")", ".", "to", "(", "device", ")", "for", "i", "in", "adj_mx", "]", "\n", "model_args", "[", "'adjs_ori'", "]", "=", "torch", ".", "tensor", "(", "adj_ori", ")", ".", "to", "(", "device", ")", "\n", "model_args", "[", "'dataset'", "]", "=", "dataset_name", "\n", "\n", "# training strategy parametes", "\n", "optim_args", "=", "config", "[", "'optim_args'", "]", "\n", "optim_args", "[", "'cl_steps'", "]", "=", "optim_args", "[", "'cl_epochs'", "]", "*", "len", "(", "dataloader", "[", "'train_loader'", "]", ")", "\n", "optim_args", "[", "'warm_steps'", "]", "=", "optim_args", "[", "'warm_epochs'", "]", "*", "len", "(", "dataloader", "[", "'train_loader'", "]", ")", "\n", "# ============================= Model and Trainer ============================= #", "\n", "# log", "\n", "logger", "=", "TrainLogger", "(", "model_name", ",", "dataset_name", ")", "\n", "logger", ".", "print_model_args", "(", "model_args", ",", "ban", "=", "[", "'adjs'", ",", "'adjs_ori'", ",", "'node_emb'", "]", ")", "\n", "logger", ".", "print_optim_args", "(", "optim_args", ")", "\n", "\n", "# init the model", "\n", "model", "=", "D2STGNN", "(", "**", "model_args", ")", ".", "to", "(", "device", ")", "\n", "\n", "# get a trainer", "\n", "engine", "=", "trainer", "(", "scaler", ",", "model", ",", "**", "optim_args", ")", "\n", "early_stopping", "=", "EarlyStopping", "(", "optim_args", "[", "'patience'", "]", ",", "save_path", ")", "\n", "\n", "# begin training:", "\n", "train_time", "=", "[", "]", "# training time", "\n", "val_time", "=", "[", "]", "# validate time", "\n", "\n", "print", "(", "\"Whole trainining iteration is \"", "+", "str", "(", "len", "(", "dataloader", "[", "'train_loader'", "]", ")", ")", ")", "\n", "\n", "# resume model & load parameters", "\n", "if", "resume", ":", "\n", "        ", "resume_epoch", "=", "config", "[", "'start_up'", "]", "[", "'resume_epoch'", "]", "\n", "if", "resume_best", ":", "\n", "            ", "model", "=", "load_model", "(", "model", ",", "save_path", ")", "\n", "", "else", ":", "\n", "            ", "model", "=", "load_model", "(", "model", ",", "save_path_resume", ")", "\n", "", "", "else", ":", "\n", "        ", "resume_epoch", "=", "0", "\n", "\n", "", "batch_num", "=", "resume_epoch", "*", "len", "(", "dataloader", "[", "'train_loader'", "]", ")", "# batch number (maybe used in schedule sampling)", "\n", "\n", "engine", ".", "set_resume_lr_and_cl", "(", "resume_epoch", ",", "batch_num", ")", "\n", "# =============================================================== Training ================================================================= #", "\n", "if", "not", "only_test", ":", "\n", "        ", "for", "epoch", "in", "range", "(", "resume_epoch", "+", "1", ",", "optim_args", "[", "'epochs'", "]", ")", ":", "\n", "# train a epoch", "\n", "            ", "time_train_start", "=", "time", ".", "time", "(", ")", "\n", "\n", "current_learning_rate", "=", "engine", ".", "lr_scheduler", ".", "get_last_lr", "(", ")", "[", "0", "]", "\n", "train_loss", "=", "[", "]", "\n", "train_mape", "=", "[", "]", "\n", "train_rmse", "=", "[", "]", "\n", "dataloader", "[", "'train_loader'", "]", ".", "shuffle", "(", ")", "# traing data shuffle when starting a new epoch.", "\n", "for", "itera", ",", "(", "x", ",", "y", ")", "in", "enumerate", "(", "dataloader", "[", "'train_loader'", "]", ".", "get_iterator", "(", ")", ")", ":", "\n", "                ", "trainx", "=", "data_reshaper", "(", "x", ",", "device", ")", "\n", "trainy", "=", "data_reshaper", "(", "y", ",", "device", ")", "\n", "mae", ",", "mape", ",", "rmse", "=", "engine", ".", "train", "(", "trainx", ",", "trainy", ",", "batch_num", "=", "batch_num", ",", "_max", "=", "_max", ",", "_min", "=", "_min", ")", "\n", "print", "(", "\"{0}: {1}\"", ".", "format", "(", "itera", ",", "mae", ")", ",", "end", "=", "'\\r'", ")", "\n", "train_loss", ".", "append", "(", "mae", ")", "\n", "train_mape", ".", "append", "(", "mape", ")", "\n", "train_rmse", ".", "append", "(", "rmse", ")", "\n", "batch_num", "+=", "1", "\n", "", "time_train_end", "=", "time", ".", "time", "(", ")", "\n", "train_time", ".", "append", "(", "time_train_end", "-", "time_train_start", ")", "\n", "\n", "current_learning_rate", "=", "engine", ".", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "\n", "\n", "if", "engine", ".", "if_lr_scheduler", ":", "\n", "                ", "engine", ".", "lr_scheduler", ".", "step", "(", ")", "\n", "# record history loss", "\n", "", "mtrain_loss", "=", "np", ".", "mean", "(", "train_loss", ")", "\n", "mtrain_mape", "=", "np", ".", "mean", "(", "train_mape", ")", "\n", "mtrain_rmse", "=", "np", ".", "mean", "(", "train_rmse", ")", "\n", "# =============================================================== Validation ================================================================= #", "\n", "time_val_start", "=", "time", ".", "time", "(", ")", "\n", "mvalid_loss", ",", "mvalid_mape", ",", "mvalid_rmse", ",", "=", "engine", ".", "eval", "(", "device", ",", "dataloader", ",", "model_name", ",", "_max", "=", "_max", ",", "_min", "=", "_min", ")", "\n", "time_val_end", "=", "time", ".", "time", "(", ")", "\n", "val_time", ".", "append", "(", "time_val_end", "-", "time_val_start", ")", "\n", "\n", "curr_time", "=", "str", "(", "time", ".", "strftime", "(", "\"%d-%H-%M\"", ",", "time", ".", "localtime", "(", ")", ")", ")", "\n", "log", "=", "'Current Time: '", "+", "curr_time", "+", "' | Epoch: {:03d} | Train_Loss: {:.4f} | Train_MAPE: {:.4f} | Train_RMSE: {:.4f} | Valid_Loss: {:.4f} | Valid_RMSE: {:.4f} | Valid_MAPE: {:.4f} | LR: {:.6f}'", "\n", "print", "(", "log", ".", "format", "(", "epoch", ",", "mtrain_loss", ",", "mtrain_mape", ",", "mtrain_rmse", ",", "mvalid_loss", ",", "mvalid_rmse", ",", "mvalid_mape", ",", "current_learning_rate", ")", ")", "\n", "early_stopping", "(", "mvalid_loss", ",", "engine", ".", "model", ")", "\n", "if", "early_stopping", ".", "early_stop", ":", "\n", "                ", "print", "(", "'Early stopping!'", ")", "\n", "break", "\n", "# =============================================================== Test ================================================================= #", "\n", "", "engine", ".", "test", "(", "model", ",", "save_path_resume", ",", "device", ",", "dataloader", ",", "scaler", ",", "model_name", ",", "_max", "=", "_max", ",", "_min", "=", "_min", ",", "loss", "=", "engine", ".", "loss", ",", "dataset_name", "=", "dataset_name", ")", "\n", "\n", "", "print", "(", "\"Average Training Time: {:.4f} secs/epoch\"", ".", "format", "(", "np", ".", "mean", "(", "train_time", ")", ")", ")", "\n", "print", "(", "\"Average Inference Time: {:.4f} secs/epoch\"", ".", "format", "(", "np", ".", "mean", "(", "val_time", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "engine", ".", "test", "(", "model", ",", "save_path_resume", ",", "device", ",", "dataloader", ",", "scaler", ",", "model_name", ",", "save", "=", "False", ",", "_max", "=", "_max", ",", "_min", "=", "_min", ",", "loss", "=", "engine", ".", "loss", ",", "dataset_name", "=", "dataset_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.utils.load_data.StandardScaler.__init__": [[67, 70], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "mean", ",", "std", ")", ":", "\n", "        ", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.utils.load_data.StandardScaler.transform": [[71, 73], ["None"], "methods", ["None"], ["", "def", "transform", "(", "self", ",", "data", ")", ":", "\n", "        ", "return", "(", "data", "-", "self", ".", "mean", ")", "/", "self", ".", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.utils.load_data.StandardScaler.inverse_transform": [[74, 76], ["None"], "methods", ["None"], ["", "def", "inverse_transform", "(", "self", ",", "data", ")", ":", "\n", "        ", "return", "(", "data", "*", "self", ".", "std", ")", "+", "self", ".", "mean", "\n", "\n"]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.utils.load_data.re_normalization": [[9, 20], ["None"], "function", ["None"], ["def", "re_normalization", "(", "x", ",", "mean", ",", "std", ")", ":", "\n", "    ", "r\"\"\"\n    Standard re-normalization\n\n    mean: float\n        Mean of data\n    std: float\n        Standard of data\n    \"\"\"", "\n", "x", "=", "x", "*", "std", "+", "mean", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.utils.load_data.max_min_normalization": [[22, 34], ["None"], "function", ["None"], ["", "def", "max_min_normalization", "(", "x", ",", "_max", ",", "_min", ")", ":", "\n", "    ", "r\"\"\"\n    Max-min normalization\n\n    _max: float\n        Max\n    _min: float\n        Min\n    \"\"\"", "\n", "x", "=", "1.", "*", "(", "x", "-", "_min", ")", "/", "(", "_max", "-", "_min", ")", "\n", "x", "=", "x", "*", "2.", "-", "1.", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.utils.load_data.re_max_min_normalization": [[36, 48], ["None"], "function", ["None"], ["", "def", "re_max_min_normalization", "(", "x", ",", "_max", ",", "_min", ")", ":", "\n", "    ", "r\"\"\"\n    Max-min re-normalization\n\n    _max: float\n        Max\n    _min: float\n        Min\n    \"\"\"", "\n", "x", "=", "(", "x", "+", "1.", ")", "/", "2.", "\n", "x", "=", "1.", "*", "x", "*", "(", "_max", "-", "_min", ")", "+", "_min", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.utils.load_data.load_pickle": [[78, 104], ["open", "pickle.load", "print", "open", "pickle.load"], "function", ["None"], ["", "", "def", "load_pickle", "(", "pickle_file", ")", ":", "\n", "    ", "r\"\"\"\n    Description:\n    -----------\n    Load pickle data.\n    \n    Parameters:\n    -----------\n    pickle_file: str\n        File path.\n\n    Returns:\n    -----------\n    pickle_data: any\n        Pickle data.\n    \"\"\"", "\n", "try", ":", "\n", "        ", "with", "open", "(", "pickle_file", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "pickle_data", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "", "except", "UnicodeDecodeError", "as", "e", ":", "\n", "        ", "with", "open", "(", "pickle_file", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "pickle_data", "=", "pickle", ".", "load", "(", "f", ",", "encoding", "=", "'latin1'", ")", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "        ", "print", "(", "'Unable to load data '", ",", "pickle_file", ",", "':'", ",", "e", ")", "\n", "raise", "\n", "", "return", "pickle_data", "\n", "\n"]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.utils.load_data.load_dataset": [[105, 172], ["numpy.load", "pickle.load", "pickle.load", "numpy.squeeze", "numpy.squeeze", "numpy.squeeze", "load_data.max_min_normalization", "numpy.transpose", "load_data.max_min_normalization", "numpy.transpose", "load_data.max_min_normalization", "numpy.transpose", "dataloader.DataLoader", "dataloader.DataLoader", "dataloader.DataLoader", "load_data.StandardScaler", "dataloader.DataLoader", "dataloader.DataLoader", "dataloader.DataLoader", "os.path.join", "open", "open", "numpy.transpose", "numpy.transpose", "numpy.transpose", "load_data.StandardScaler.transform", "load_data.StandardScaler.transform", "[].mean", "[].std"], "function", ["home.repos.pwc.inspect_result.zezhishao_d2stgnn.utils.load_data.max_min_normalization", "home.repos.pwc.inspect_result.zezhishao_d2stgnn.utils.load_data.max_min_normalization", "home.repos.pwc.inspect_result.zezhishao_d2stgnn.utils.load_data.max_min_normalization", "home.repos.pwc.inspect_result.zezhishao_d2stgnn.utils.load_data.StandardScaler.transform", "home.repos.pwc.inspect_result.zezhishao_d2stgnn.utils.load_data.StandardScaler.transform"], ["", "def", "load_dataset", "(", "data_dir", ",", "batch_size", ",", "valid_batch_size", ",", "test_batch_size", ",", "dataset_name", ")", ":", "\n", "    ", "r\"\"\"\n    Description:\n    -----------\n    Load the whole datasets.\n\n    Parameters:\n    -----------\n    data_dir: str\n        Dictionary of data, e.g., 'datasets/METR'.\n    batch_size: int\n        Batch size.\n    valid_batch_size: int\n        Valid batchs size.\n    test_batch_size: int\n        test batch size.\n    \n    Returns:\n    -----------\n    datasets:\n    \n    \"\"\"", "\n", "data_dict", "=", "{", "}", "\n", "# read data: train_x, train_y, val_x, val_y, test_x, test_y", "\n", "# the data has been processed and stored in datasets/{dataset}/{mode}.npz", "\n", "for", "mode", "in", "[", "'train'", ",", "'val'", ",", "'test'", "]", ":", "\n", "        ", "_", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "mode", "+", "'.npz'", ")", ")", "\n", "# length  = int(len(_['x']) * 0.1)", "\n", "# data_dict['x_' + mode]  = _['x'][:length, :, :, :]", "\n", "# data_dict['y_' + mode]  = _['y'][:length, :, :, :]", "\n", "data_dict", "[", "'x_'", "+", "mode", "]", "=", "_", "[", "'x'", "]", "\n", "data_dict", "[", "'y_'", "+", "mode", "]", "=", "_", "[", "'y'", "]", "\n", "", "if", "dataset_name", "==", "'PEMS04'", "or", "dataset_name", "==", "'PEMS08'", ":", "# traffic flow", "\n", "        ", "_min", "=", "pickle", ".", "load", "(", "open", "(", "\"datasets/\"", "+", "dataset_name", "+", "\"/min.pkl\"", ",", "'rb'", ")", ")", "\n", "_max", "=", "pickle", ".", "load", "(", "open", "(", "\"datasets/\"", "+", "dataset_name", "+", "\"/max.pkl\"", ",", "'rb'", ")", ")", "\n", "\n", "# normalization", "\n", "y_train", "=", "np", ".", "squeeze", "(", "np", ".", "transpose", "(", "data_dict", "[", "'y_train'", "]", ",", "axes", "=", "[", "0", ",", "2", ",", "1", ",", "3", "]", ")", ",", "axis", "=", "-", "1", ")", "\n", "y_val", "=", "np", ".", "squeeze", "(", "np", ".", "transpose", "(", "data_dict", "[", "'y_val'", "]", ",", "axes", "=", "[", "0", ",", "2", ",", "1", ",", "3", "]", ")", ",", "axis", "=", "-", "1", ")", "\n", "y_test", "=", "np", ".", "squeeze", "(", "np", ".", "transpose", "(", "data_dict", "[", "'y_test'", "]", ",", "axes", "=", "[", "0", ",", "2", ",", "1", ",", "3", "]", ")", ",", "axis", "=", "-", "1", ")", "\n", "\n", "y_train_new", "=", "max_min_normalization", "(", "y_train", ",", "_max", "[", ":", ",", ":", ",", "0", ",", ":", "]", ",", "_min", "[", ":", ",", ":", ",", "0", ",", ":", "]", ")", "\n", "data_dict", "[", "'y_train'", "]", "=", "np", ".", "transpose", "(", "y_train_new", ",", "axes", "=", "[", "0", ",", "2", ",", "1", "]", ")", "\n", "y_val_new", "=", "max_min_normalization", "(", "y_val", ",", "_max", "[", ":", ",", ":", ",", "0", ",", ":", "]", ",", "_min", "[", ":", ",", ":", ",", "0", ",", ":", "]", ")", "\n", "data_dict", "[", "'y_val'", "]", "=", "np", ".", "transpose", "(", "y_val_new", ",", "axes", "=", "[", "0", ",", "2", ",", "1", "]", ")", "\n", "y_test_new", "=", "max_min_normalization", "(", "y_test", ",", "_max", "[", ":", ",", ":", ",", "0", ",", ":", "]", ",", "_min", "[", ":", ",", ":", ",", "0", ",", ":", "]", ")", "\n", "data_dict", "[", "'y_test'", "]", "=", "np", ".", "transpose", "(", "y_test_new", ",", "axes", "=", "[", "0", ",", "2", ",", "1", "]", ")", "\n", "\n", "data_dict", "[", "'train_loader'", "]", "=", "DataLoader", "(", "data_dict", "[", "'x_train'", "]", ",", "data_dict", "[", "'y_train'", "]", ",", "batch_size", ",", "shuffle", "=", "True", ")", "\n", "data_dict", "[", "'val_loader'", "]", "=", "DataLoader", "(", "data_dict", "[", "'x_val'", "]", ",", "data_dict", "[", "'y_val'", "]", ",", "valid_batch_size", ")", "\n", "data_dict", "[", "'test_loader'", "]", "=", "DataLoader", "(", "data_dict", "[", "'x_test'", "]", ",", "data_dict", "[", "'y_test'", "]", ",", "test_batch_size", ")", "\n", "data_dict", "[", "'scaler'", "]", "=", "re_max_min_normalization", "\n", "\n", "", "else", ":", "# traffic speed", "\n", "        ", "scaler", "=", "StandardScaler", "(", "mean", "=", "data_dict", "[", "'x_train'", "]", "[", "...", ",", "0", "]", ".", "mean", "(", ")", ",", "std", "=", "data_dict", "[", "'x_train'", "]", "[", "...", ",", "0", "]", ".", "std", "(", ")", ")", "# we only see the training data.", "\n", "\n", "for", "mode", "in", "[", "'train'", ",", "'val'", ",", "'test'", "]", ":", "\n", "# continue", "\n", "            ", "data_dict", "[", "'x_'", "+", "mode", "]", "[", "...", ",", "0", "]", "=", "scaler", ".", "transform", "(", "data_dict", "[", "'x_'", "+", "mode", "]", "[", "...", ",", "0", "]", ")", "\n", "data_dict", "[", "'y_'", "+", "mode", "]", "[", "...", ",", "0", "]", "=", "scaler", ".", "transform", "(", "data_dict", "[", "'y_'", "+", "mode", "]", "[", "...", ",", "0", "]", ")", "\n", "\n", "", "data_dict", "[", "'train_loader'", "]", "=", "DataLoader", "(", "data_dict", "[", "'x_train'", "]", ",", "data_dict", "[", "'y_train'", "]", ",", "batch_size", ",", "shuffle", "=", "True", ")", "\n", "data_dict", "[", "'val_loader'", "]", "=", "DataLoader", "(", "data_dict", "[", "'x_val'", "]", ",", "data_dict", "[", "'y_val'", "]", ",", "valid_batch_size", ")", "\n", "data_dict", "[", "'test_loader'", "]", "=", "DataLoader", "(", "data_dict", "[", "'x_test'", "]", ",", "data_dict", "[", "'y_test'", "]", ",", "test_batch_size", ")", "\n", "data_dict", "[", "'scaler'", "]", "=", "scaler", "\n", "\n", "", "return", "data_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.utils.load_data.load_adj": [[173, 214], ["load_data.load_pickle", "load_data.load_pickle", "calculate_scaled_laplacian().astype().todense", "calculate_symmetric_normalized_laplacian().astype().todense", "calculate_scaled_laplacian().astype", "symmetric_message_passing_adj().astype().todense", "calculate_symmetric_normalized_laplacian().astype", "calculate_scaled_laplacian", "symmetric_message_passing_adj().astype", "transition_matrix", "calculate_symmetric_normalized_laplacian", "transition_matrix", "transition_matrix", "numpy.diag().astype().todense", "symmetric_message_passing_adj", "numpy.diag().astype", "numpy.diag", "numpy.ones"], "function", ["home.repos.pwc.inspect_result.zezhishao_d2stgnn.sensor_graph.describe_adjs.load_pickle", "home.repos.pwc.inspect_result.zezhishao_d2stgnn.sensor_graph.describe_adjs.load_pickle", "home.repos.pwc.inspect_result.zezhishao_d2stgnn.utils.cal_adj.calculate_scaled_laplacian", "home.repos.pwc.inspect_result.zezhishao_d2stgnn.utils.cal_adj.transition_matrix", "home.repos.pwc.inspect_result.zezhishao_d2stgnn.utils.cal_adj.calculate_symmetric_normalized_laplacian", "home.repos.pwc.inspect_result.zezhishao_d2stgnn.utils.cal_adj.transition_matrix", "home.repos.pwc.inspect_result.zezhishao_d2stgnn.utils.cal_adj.transition_matrix", "home.repos.pwc.inspect_result.zezhishao_d2stgnn.utils.cal_adj.symmetric_message_passing_adj"], ["", "def", "load_adj", "(", "file_path", ",", "adj_type", ")", ":", "\n", "    ", "r\"\"\"\n    Description:\n    -----------\n    Load adjacent matrix and preprocessed it.\n\n    Parameters:\n    -----------\n    file_path: str\n        Adjacent matrix file path (pickle file).\n    adj_type: str\n        How to preprocess adj matrix.\n    \n    Returns:\n    -----------\n        adj_matrix    \n    \"\"\"", "\n", "try", ":", "\n", "# METR and PEMS_BAY", "\n", "        ", "sensor_ids", ",", "sensor_id_to_ind", ",", "adj_mx", "=", "load_pickle", "(", "file_path", ")", "\n", "", "except", ":", "\n", "# PEMS04", "\n", "        ", "adj_mx", "=", "load_pickle", "(", "file_path", ")", "\n", "", "if", "adj_type", "==", "\"scalap\"", ":", "\n", "        ", "adj", "=", "[", "calculate_scaled_laplacian", "(", "adj_mx", ")", ".", "astype", "(", "np", ".", "float32", ")", ".", "todense", "(", ")", "]", "\n", "", "elif", "adj_type", "==", "\"normlap\"", ":", "\n", "        ", "adj", "=", "[", "calculate_symmetric_normalized_laplacian", "(", "adj_mx", ")", ".", "astype", "(", "np", ".", "float32", ")", ".", "todense", "(", ")", "]", "\n", "", "elif", "adj_type", "==", "\"symnadj\"", ":", "\n", "        ", "adj", "=", "[", "symmetric_message_passing_adj", "(", "adj_mx", ")", ".", "astype", "(", "np", ".", "float32", ")", ".", "todense", "(", ")", "]", "\n", "", "elif", "adj_type", "==", "\"transition\"", ":", "\n", "        ", "adj", "=", "[", "transition_matrix", "(", "adj_mx", ")", ".", "T", "]", "\n", "", "elif", "adj_type", "==", "\"doubletransition\"", ":", "\n", "        ", "adj", "=", "[", "transition_matrix", "(", "adj_mx", ")", ".", "T", ",", "transition_matrix", "(", "adj_mx", ".", "T", ")", ".", "T", "]", "\n", "", "elif", "adj_type", "==", "\"identity\"", ":", "\n", "        ", "adj", "=", "[", "np", ".", "diag", "(", "np", ".", "ones", "(", "adj_mx", ".", "shape", "[", "0", "]", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", ".", "todense", "(", ")", "]", "\n", "", "elif", "adj_type", "==", "'original'", ":", "\n", "        ", "adj", "=", "adj_mx", "\n", "", "else", ":", "\n", "        ", "error", "=", "0", "\n", "assert", "error", ",", "\"adj type not defined\"", "\n", "", "return", "adj", ",", "adj_mx", "\n", "", ""]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.utils.train.EarlyStopping.__init__": [[36, 54], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "patience", ",", "save_path", ",", "verbose", "=", "False", ",", "delta", "=", "0", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            patience (int): How long to wait after last time validation loss improved.\n                            Default: 7\n            verbose (bool): If True, prints a message for each validation loss improvement.\n                            Default: False\n            delta (float): Minimum change in the monitored quantity to qualify as an improvement.\n                            Default: 0\n        \"\"\"", "\n", "self", ".", "patience", "=", "patience", "\n", "self", ".", "verbose", "=", "verbose", "\n", "self", ".", "counter", "=", "0", "\n", "self", ".", "best_score", "=", "None", "\n", "self", ".", "early_stop", "=", "False", "\n", "self", ".", "val_loss_min", "=", "np", ".", "Inf", "\n", "self", ".", "delta", "=", "delta", "\n", "self", ".", "save_path", "=", "save_path", "\n", "\n"]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.utils.train.EarlyStopping.__call__": [[55, 71], ["train.EarlyStopping.save_checkpoint", "print", "train.EarlyStopping.save_checkpoint"], "methods", ["home.repos.pwc.inspect_result.zezhishao_d2stgnn.utils.train.EarlyStopping.save_checkpoint", "home.repos.pwc.inspect_result.zezhishao_d2stgnn.utils.train.EarlyStopping.save_checkpoint"], ["", "def", "__call__", "(", "self", ",", "val_loss", ",", "model", ")", ":", "\n", "\n", "        ", "score", "=", "-", "val_loss", "\n", "\n", "if", "self", ".", "best_score", "is", "None", ":", "\n", "            ", "self", ".", "best_score", "=", "score", "\n", "self", ".", "save_checkpoint", "(", "val_loss", ",", "model", ")", "\n", "", "elif", "score", "<", "self", ".", "best_score", "-", "self", ".", "delta", ":", "\n", "            ", "self", ".", "counter", "+=", "1", "\n", "print", "(", "f'EarlyStopping counter: {self.counter} out of {self.patience}'", ")", "\n", "if", "self", ".", "counter", ">=", "self", ".", "patience", ":", "\n", "                ", "self", ".", "early_stop", "=", "True", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "best_score", "=", "score", "\n", "self", ".", "save_checkpoint", "(", "val_loss", ",", "model", ")", "\n", "self", ".", "counter", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.utils.train.EarlyStopping.save_checkpoint": [[72, 78], ["train.save_model", "print"], "methods", ["home.repos.pwc.inspect_result.zezhishao_d2stgnn.utils.train.save_model"], ["", "", "def", "save_checkpoint", "(", "self", ",", "val_loss", ",", "model", ")", ":", "\n", "        ", "\"\"\"Saves model when validation loss decrease.\"\"\"", "\n", "if", "self", ".", "verbose", ":", "\n", "            ", "print", "(", "f'Validation loss decreased ({self.val_loss_min:.6f} --> {val_loss:.6f}).  Saving model ...'", ")", "\n", "", "save_model", "(", "model", ",", "self", ".", "save_path", ")", "\n", "self", ".", "val_loss_min", "=", "val_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.utils.train.set_config": [[5, 19], ["torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed_all", "random.seed", "numpy.random.seed"], "function", ["None"], ["def", "set_config", "(", "seed", "=", "0", ")", ":", "\n", "    ", "r\"\"\"\n    Set seed.\n\n    seed: int\n        The seed.\n    \"\"\"", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.utils.train.save_model": [[20, 25], ["torch.save", "model.state_dict"], "function", ["None"], ["", "def", "save_model", "(", "model", ",", "save_path", ")", ":", "\n", "    ", "r\"\"\"\n    save model parameters.\n    \"\"\"", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.utils.train.load_model": [[26, 32], ["model.load_state_dict", "torch.load"], "function", ["None"], ["", "def", "load_model", "(", "model", ",", "save_path", ")", ":", "\n", "    ", "r\"\"\"\n    load model parameters\n    \"\"\"", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "save_path", ")", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.utils.train.data_reshaper": [[80, 88], ["torch.Tensor().to", "torch.Tensor"], "function", ["None"], ["", "", "def", "data_reshaper", "(", "data", ",", "device", ")", ":", "\n", "    ", "r\"\"\"\n    Description:\n    -----------\n    Reshape data to any models.\n    \"\"\"", "\n", "data", "=", "torch", ".", "Tensor", "(", "data", ")", ".", "to", "(", "device", ")", "\n", "return", "data", "\n", "", ""]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.utils.cal_adj.check_nan_inf": [[8, 17], ["torch.any", "torch.any", "torch.isnan", "torch.isinf", "Exception"], "function", ["None"], ["def", "check_nan_inf", "(", "tensor", ",", "raise_ex", "=", "True", ")", ":", "\n", "# nan", "\n", "    ", "nan", "=", "torch", ".", "any", "(", "torch", ".", "isnan", "(", "tensor", ")", ")", "\n", "# inf", "\n", "inf", "=", "torch", ".", "any", "(", "torch", ".", "isinf", "(", "tensor", ")", ")", "\n", "# raise", "\n", "if", "raise_ex", "and", "(", "nan", "or", "inf", ")", ":", "\n", "        ", "raise", "Exception", "(", "{", "\"nan\"", ":", "nan", ",", "\"inf\"", ":", "inf", "}", ")", "\n", "", "return", "{", "\"nan\"", ":", "nan", ",", "\"inf\"", ":", "inf", "}", ",", "nan", "or", "inf", "\n", "\n"]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.utils.cal_adj.remove_nan_inf": [[18, 22], ["torch.where", "torch.where", "torch.isnan", "torch.zeros_like", "torch.isinf", "torch.zeros_like"], "function", ["None"], ["", "def", "remove_nan_inf", "(", "tensor", ")", ":", "\n", "    ", "tensor", "=", "torch", ".", "where", "(", "torch", ".", "isnan", "(", "tensor", ")", ",", "torch", ".", "zeros_like", "(", "tensor", ")", ",", "tensor", ")", "\n", "tensor", "=", "torch", ".", "where", "(", "torch", ".", "isinf", "(", "tensor", ")", ",", "torch", ".", "zeros_like", "(", "tensor", ")", ",", "tensor", ")", "\n", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.utils.cal_adj.calculate_symmetric_normalized_laplacian": [[23, 50], ["scipy.coo_matrix", "numpy.array", "numpy.power().flatten", "scipy.diags", "sp.coo_matrix.sum", "scipy.eye", "sp.diags.dot().dot().tocoo", "numpy.power", "numpy.isinf", "sp.diags.dot().dot", "sp.diags.dot"], "function", ["None"], ["", "def", "calculate_symmetric_normalized_laplacian", "(", "adj", ")", ":", "\n", "    ", "r\"\"\"\n    Description:\n    -----------\n    Calculate Symmetric Normalized Laplacian. \n    Assuming unnormalized laplacian matrix is `L = D - A`,\n    then symmetric normalized laplacian matrix is: \n    `L^{Sym} =  D^-1/2 L D^-1/2 =  D^-1/2 (D-A) D^-1/2 = I - D^-1/2 A D^-1/2`\n    For node `i` and `j` where `i!=j`, L^{sym}_{ij} <=0.\n\n    Parameters:\n    -----------\n    adj: np.ndarray\n        Adjacent matrix A\n\n    Returns:\n    -----------\n    symmetric_normalized_laplacian: np.matrix\n        Symmetric normalized laplacian L^{Sym}\n    \"\"\"", "\n", "adj", "=", "sp", ".", "coo_matrix", "(", "adj", ")", "\n", "D", "=", "np", ".", "array", "(", "adj", ".", "sum", "(", "1", ")", ")", "\n", "D_inv_sqrt", "=", "np", ".", "power", "(", "D", ",", "-", "0.5", ")", ".", "flatten", "(", ")", "# diagonals of D^{-1/2}", "\n", "D_inv_sqrt", "[", "np", ".", "isinf", "(", "D_inv_sqrt", ")", "]", "=", "0.", "\n", "matrix_D_inv_sqrt", "=", "sp", ".", "diags", "(", "D_inv_sqrt", ")", "# D^{-1/2}", "\n", "symmetric_normalized_laplacian", "=", "sp", ".", "eye", "(", "adj", ".", "shape", "[", "0", "]", ")", "-", "matrix_D_inv_sqrt", ".", "dot", "(", "adj", ")", ".", "dot", "(", "matrix_D_inv_sqrt", ")", ".", "tocoo", "(", ")", "\n", "return", "symmetric_normalized_laplacian", "\n", "\n"]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.utils.cal_adj.calculate_scaled_laplacian": [[51, 81], ["cal_adj.calculate_symmetric_normalized_laplacian", "scipy.csr_matrix", "scipy.identity", "numpy.maximum.reduce", "scipy.sparse.linalg.eigsh"], "function", ["home.repos.pwc.inspect_result.zezhishao_d2stgnn.utils.cal_adj.calculate_symmetric_normalized_laplacian"], ["", "def", "calculate_scaled_laplacian", "(", "adj", ",", "lambda_max", "=", "2", ",", "undirected", "=", "True", ")", ":", "\n", "    ", "r\"\"\"\n    Description:\n    -----------\n    Re-scaled the eigenvalue to [-1, 1] by scaled the normalized laplacian matrix for chebyshev pol.\n    According to `2017 ICLR GCN`, the lambda max is set to 2, and the graph is set to undirected.\n    Note that rescale the laplacian matrix is equal to rescale the eigenvalue matrix.\n    `L_{scaled} = (2 / lambda_max * L) - I`\n\n    Parameters:\n    -----------\n    adj: np.ndarray\n        Adjacent matrix A\n\n    Returns:\n    -----------\n    L_res: np.matrix\n        The rescaled laplacian matrix.\n    \"\"\"", "\n", "if", "undirected", ":", "\n", "        ", "adj", "=", "np", ".", "maximum", ".", "reduce", "(", "[", "adj", ",", "adj", ".", "T", "]", ")", "\n", "", "L", "=", "calculate_symmetric_normalized_laplacian", "(", "adj", ")", "\n", "if", "lambda_max", "is", "None", ":", "# manually cal the max lambda", "\n", "        ", "lambda_max", ",", "_", "=", "linalg", ".", "eigsh", "(", "L", ",", "1", ",", "which", "=", "'LM'", ")", "\n", "lambda_max", "=", "lambda_max", "[", "0", "]", "\n", "", "L", "=", "sp", ".", "csr_matrix", "(", "L", ")", "\n", "M", ",", "_", "=", "L", ".", "shape", "\n", "I", "=", "sp", ".", "identity", "(", "M", ",", "format", "=", "'csr'", ",", "dtype", "=", "L", ".", "dtype", ")", "\n", "L_res", "=", "(", "2", "/", "lambda_max", "*", "L", ")", "-", "I", "\n", "return", "L_res", "\n", "\n"]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.utils.cal_adj.symmetric_message_passing_adj": [[82, 107], ["print", "scipy.coo_matrix", "numpy.array", "numpy.power().flatten", "scipy.diags", "sp.diags.dot().transpose().dot().astype().todense", "sp.coo_matrix.sum", "numpy.power", "numpy.isinf", "sp.diags.dot().transpose().dot().astype", "sp.diags.dot().transpose().dot", "sp.diags.dot().transpose", "sp.diags.dot"], "function", ["None"], ["", "def", "symmetric_message_passing_adj", "(", "adj", ")", ":", "\n", "    ", "r\"\"\"\n    Description:\n    -----------\n    Calculate the renormalized message passing adj in `GCN`.\n\n    Parameters:\n    -----------\n    adj: np.ndarray\n        Adjacent matrix A\n\n    Returns:\n    -----------\n    mp_adj:np.matrix\n        Renormalized message passing adj in `GCN`.\n    \"\"\"", "\n", "# add self loop", "\n", "print", "(", "\"calculating the renormalized message passing adj, please ensure that self-loop has added to adj.\"", ")", "\n", "adj", "=", "sp", ".", "coo_matrix", "(", "adj", ")", "\n", "rowsum", "=", "np", ".", "array", "(", "adj", ".", "sum", "(", "1", ")", ")", "\n", "d_inv_sqrt", "=", "np", ".", "power", "(", "rowsum", ",", "-", "0.5", ")", ".", "flatten", "(", ")", "\n", "d_inv_sqrt", "[", "np", ".", "isinf", "(", "d_inv_sqrt", ")", "]", "=", "0.", "\n", "d_mat_inv_sqrt", "=", "sp", ".", "diags", "(", "d_inv_sqrt", ")", "\n", "mp_adj", "=", "d_mat_inv_sqrt", ".", "dot", "(", "adj", ")", ".", "transpose", "(", ")", ".", "dot", "(", "d_mat_inv_sqrt", ")", ".", "astype", "(", "np", ".", "float32", ")", ".", "todense", "(", ")", "\n", "return", "mp_adj", "\n", "\n"]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.utils.cal_adj.transition_matrix": [[108, 133], ["scipy.coo_matrix", "numpy.array().flatten", "numpy.power().flatten", "scipy.diags", "sp.diags.dot().astype().todense", "numpy.array", "numpy.power", "numpy.isinf", "sp.diags.dot().astype", "sp.coo_matrix.sum", "sp.diags.dot"], "function", ["None"], ["", "def", "transition_matrix", "(", "adj", ")", ":", "\n", "    ", "r\"\"\"\n    Description:\n    -----------\n    Calculate the transition matrix `P` proposed in DCRNN and Graph WaveNet.\n    P = D^{-1}A = A/rowsum(A)\n\n    Parameters:\n    -----------\n    adj: np.ndarray\n        Adjacent matrix A\n\n    Returns:\n    -----------\n    P:np.matrix\n        Renormalized message passing adj in `GCN`.\n    \"\"\"", "\n", "adj", "=", "sp", ".", "coo_matrix", "(", "adj", ")", "\n", "rowsum", "=", "np", ".", "array", "(", "adj", ".", "sum", "(", "1", ")", ")", ".", "flatten", "(", ")", "\n", "d_inv", "=", "np", ".", "power", "(", "rowsum", ",", "-", "1", ")", ".", "flatten", "(", ")", "\n", "d_inv", "[", "np", ".", "isinf", "(", "d_inv", ")", "]", "=", "0.", "\n", "d_mat", "=", "sp", ".", "diags", "(", "d_inv", ")", "\n", "# P = d_mat.dot(adj)", "\n", "P", "=", "d_mat", ".", "dot", "(", "adj", ")", ".", "astype", "(", "np", ".", "float32", ")", ".", "todense", "(", ")", "\n", "return", "P", "\n", "", ""]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.utils.log.TrainLogger.__init__": [[33, 51], ["time.strftime", "cur_time.replace.replace.replace", "os.makedirs", "shutil.copytree", "shutil.copytree", "shutil.copyfile", "time.localtime", "shutil.copyfile", "shutil.copyfile"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "model_name", ",", "dataset", ")", ":", "\n", "        ", "path", "=", "'log/'", "\n", "cur_time", "=", "time", ".", "strftime", "(", "\"%Y-%m-%d %H:%M:%S\"", ",", "time", ".", "localtime", "(", ")", ")", "\n", "cur_time", "=", "cur_time", ".", "replace", "(", "\" \"", ",", "\"-\"", ")", "\n", "# mkdir", "\n", "os", ".", "makedirs", "(", "path", "+", "cur_time", ")", "\n", "# pwd = os.getcwd() + \"/\"", "\n", "# copy model files", "\n", "shutil", ".", "copytree", "(", "'models'", ",", "path", "+", "cur_time", "+", "\"/models\"", ")", "# copy models", "\n", "shutil", ".", "copytree", "(", "'configs'", ",", "path", "+", "cur_time", "+", "\"/configs\"", ")", "# copy models", "\n", "shutil", ".", "copyfile", "(", "'main.py'", ",", "path", "+", "cur_time", "+", "\"/main.py\"", ")", "# copy models", "\n", "# backup model parameters", "\n", "try", ":", "\n", "            ", "shutil", ".", "copyfile", "(", "'output/'", "+", "model_name", "+", "\"_\"", "+", "dataset", "+", "\".pt\"", ",", "path", "+", "cur_time", "+", "\"/\"", "+", "model_name", "+", "\"_\"", "+", "dataset", "+", "\".pt\"", ")", "\n", "shutil", ".", "copyfile", "(", "'output/'", "+", "model_name", "+", "\"_\"", "+", "dataset", "+", "\"_resume\"", "+", "\".pt\"", ",", "path", "+", "cur_time", "+", "\"/\"", "+", "model_name", "+", "\"_\"", "+", "dataset", "+", "\"_resume.pt\"", ")", "\n", "", "except", ":", "\n", "# No model_para.pt", "\n", "            ", "pass", "\n", "", "", "def", "__print", "(", "self", ",", "dic", ",", "note", "=", "None", ",", "ban", "=", "[", "]", ")", ":", "\n"]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.utils.log.TrainLogger.__print": [[51, 58], ["print", "dic.items", "print", "print"], "methods", ["None"], ["", "", "def", "__print", "(", "self", ",", "dic", ",", "note", "=", "None", ",", "ban", "=", "[", "]", ")", ":", "\n", "        ", "print", "(", "\"=============== \"", "+", "note", "+", "\" =================\"", ")", "\n", "for", "key", ",", "value", "in", "dic", ".", "items", "(", ")", ":", "\n", "            ", "if", "key", "in", "ban", ":", "\n", "                ", "continue", "\n", "", "print", "(", "'|%20s:|%20s|'", "%", "(", "key", ",", "value", ")", ")", "\n", "", "print", "(", "\"--------------------------------------------\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.utils.log.TrainLogger.print_model_args": [[59, 61], ["log.TrainLogger.__print"], "methods", ["home.repos.pwc.inspect_result.zezhishao_d2stgnn.utils.log.TrainLogger.__print"], ["", "def", "print_model_args", "(", "self", ",", "model_args", ",", "ban", "=", "[", "]", ")", ":", "\n", "        ", "self", ".", "__print", "(", "model_args", ",", "note", "=", "'model args'", ",", "ban", "=", "ban", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.utils.log.TrainLogger.print_optim_args": [[62, 64], ["log.TrainLogger.__print"], "methods", ["home.repos.pwc.inspect_result.zezhishao_d2stgnn.utils.log.TrainLogger.__print"], ["", "def", "print_optim_args", "(", "self", ",", "optim_args", ",", "ban", "=", "[", "]", ")", ":", "\n", "        ", "self", ".", "__print", "(", "optim_args", ",", "note", "=", "'optim args'", ",", "ban", "=", "ban", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.utils.log.clock": [[5, 17], ["time.perf_counter", "func", "print", "time.perf_counter"], "function", ["None"], ["def", "clock", "(", "func", ")", ":", "\n", "    ", "r\"\"\"\n    time counter\n    \"\"\"", "\n", "def", "clocked", "(", "*", "args", ",", "**", "kw", ")", ":", "\n", "        ", "t0", "=", "time", ".", "perf_counter", "(", ")", "\n", "result", "=", "func", "(", "*", "args", ",", "**", "kw", ")", "\n", "elapsed", "=", "time", ".", "perf_counter", "(", ")", "-", "t0", "\n", "name", "=", "func", ".", "__name__", "\n", "print", "(", "'[%0.8fs] %s'", "%", "(", "elapsed", ",", "name", ")", ")", "\n", "return", "result", "\n", "", "return", "clocked", "\n", "\n"]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.dataloader.dataset.TrafficDataset.__init__": [[12, 24], ["torch.utils.data.Dataset.__init__", "len", "numpy.repeat", "numpy.repeat", "numpy.concatenate", "numpy.concatenate", "len"], "methods", ["home.repos.pwc.inspect_result.zezhishao_d2stgnn.InherentBlock.forecast.Forecast.__init__"], ["    ", "def", "__init__", "(", "self", ",", "xs", ",", "ys", ",", "batch_size", ",", "pad", "=", "True", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "pad", ":", "\n", "            ", "num_padding", "=", "(", "batch_size", "-", "(", "len", "(", "xs", ")", "%", "batch_size", ")", ")", "%", "batch_size", "\n", "x_padding", "=", "np", ".", "repeat", "(", "xs", "[", "-", "1", ":", "]", ",", "num_padding", ",", "axis", "=", "0", ")", "\n", "y_padding", "=", "np", ".", "repeat", "(", "ys", "[", "-", "1", ":", "]", ",", "num_padding", ",", "axis", "=", "0", ")", "\n", "xs", "=", "np", ".", "concatenate", "(", "[", "xs", ",", "x_padding", "]", ",", "axis", "=", "0", ")", "\n", "ys", "=", "np", ".", "concatenate", "(", "[", "ys", ",", "y_padding", "]", ",", "axis", "=", "0", ")", "\n", "", "self", ".", "history", "=", "xs", "\n", "self", ".", "future", "=", "ys", "\n", "\n", "self", ".", "size", "=", "len", "(", "xs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.dataloader.dataset.TrafficDataset.__len__": [[25, 27], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "            ", "return", "self", ".", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.dataloader.dataset.TrafficDataset.__getitem__": [[28, 32], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "xi", "=", "self", ".", "history", "[", "idx", "]", "\n", "yi", "=", "self", ".", "future", "[", "idx", "]", "\n", "return", "xi", ",", "yi", "\n", "\n"]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.dataloader.dataset.load_dataset_my": [[33, 62], ["utils.load_data.StandardScaler", "dataset.TrafficDataset", "dataset.TrafficDataset", "dataset.TrafficDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "numpy.load", "utils.load_data.StandardScaler.transform", "utils.load_data.StandardScaler.transform", "os.path.join", "[].mean", "[].std"], "function", ["home.repos.pwc.inspect_result.zezhishao_d2stgnn.utils.load_data.StandardScaler.transform", "home.repos.pwc.inspect_result.zezhishao_d2stgnn.utils.load_data.StandardScaler.transform"], ["", "", "def", "load_dataset_my", "(", "data_dir", ",", "batch_size", ",", "valid_batch_size", ",", "test_batch_size", ")", ":", "\n", "    ", "data_dict", "=", "{", "}", "\n", "for", "mode", "in", "[", "'train'", ",", "'val'", ",", "'test'", "]", ":", "\n", "        ", "_", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "mode", "+", "'.npz'", ")", ")", "\n", "# length  = int(len(_['x']) * 0.1)", "\n", "# data_dict['x_' + mode]  = _['x'][:length, :, :, :]", "\n", "# data_dict['y_' + mode]  = _['y'][:length, :, :, :]", "\n", "data_dict", "[", "'x_'", "+", "mode", "]", "=", "_", "[", "'x'", "]", "\n", "data_dict", "[", "'y_'", "+", "mode", "]", "=", "_", "[", "'y'", "]", "\n", "", "scaler", "=", "StandardScaler", "(", "mean", "=", "data_dict", "[", "'x_train'", "]", "[", "...", ",", "0", "]", ".", "mean", "(", ")", ",", "std", "=", "data_dict", "[", "'x_train'", "]", "[", "...", ",", "0", "]", ".", "std", "(", ")", ")", "# we only see the training data.", "\n", "# data standardization ", "\n", "for", "mode", "in", "[", "'train'", ",", "'val'", ",", "'test'", "]", ":", "\n", "# continue", "\n", "        ", "data_dict", "[", "'x_'", "+", "mode", "]", "[", "...", ",", "0", "]", "=", "scaler", ".", "transform", "(", "data_dict", "[", "'x_'", "+", "mode", "]", "[", "...", ",", "0", "]", ")", "\n", "data_dict", "[", "'y_'", "+", "mode", "]", "[", "...", ",", "0", "]", "=", "scaler", ".", "transform", "(", "data_dict", "[", "'y_'", "+", "mode", "]", "[", "...", ",", "0", "]", ")", "\n", "", "train_data", "=", "TrafficDataset", "(", "data_dict", "[", "'x_train'", "]", ",", "data_dict", "[", "'y_train'", "]", ",", "batch_size", ")", "\n", "val_data", "=", "TrafficDataset", "(", "data_dict", "[", "'x_val'", "]", ",", "data_dict", "[", "'y_val'", "]", ",", "batch_size", ")", "\n", "test_data", "=", "TrafficDataset", "(", "data_dict", "[", "'x_test'", "]", ",", "data_dict", "[", "'y_test'", "]", ",", "batch_size", ")", "\n", "\n", "train_dataloader", "=", "DataLoader", "(", "train_data", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "32", ")", "\n", "val_dataloader", "=", "DataLoader", "(", "val_data", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "32", ")", "\n", "test_dataloader", "=", "DataLoader", "(", "test_data", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "32", ")", "\n", "\n", "data_dict", "[", "'train_loader'", "]", "=", "train_dataloader", "\n", "data_dict", "[", "'val_loader'", "]", "=", "val_dataloader", "\n", "data_dict", "[", "'test_loader'", "]", "=", "test_dataloader", "\n", "data_dict", "[", "'scaler'", "]", "=", "scaler", "\n", "\n", "return", "data_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.dataloader.dataset.iter_dataloader_my": [[66, 78], ["enumerate", "enumerate", "enumerate"], "function", ["None"], ["@", "clock", "\n", "def", "iter_dataloader_my", "(", "data_dict", ")", ":", "\n", "    ", "train_dataloader", "=", "data_dict", "[", "'train_loader'", "]", "\n", "val_dataloader", "=", "data_dict", "[", "'val_loader'", "]", "\n", "test_dataloader", "=", "data_dict", "[", "'test_loader'", "]", "\n", "\n", "for", "itera", ",", "(", "x", ",", "y", ")", "in", "enumerate", "(", "train_dataloader", ")", ":", "\n", "        ", "pass", "\n", "", "for", "itera", ",", "(", "x", ",", "y", ")", "in", "enumerate", "(", "val_dataloader", ")", ":", "\n", "        ", "pass", "\n", "", "for", "itera", ",", "(", "x", ",", "y", ")", "in", "enumerate", "(", "test_dataloader", ")", ":", "\n", "        ", "pass", "\n", "", "", "@", "clock", "\n"]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.dataloader.dataset.iter_dataloader": [[78, 90], ["enumerate", "enumerate", "enumerate", "train_dataloader.get_iterator", "val_dataloader.get_iterator", "test_dataloader.get_iterator"], "function", ["home.repos.pwc.inspect_result.zezhishao_d2stgnn.dataloader.dataloader.DataLoader.get_iterator", "home.repos.pwc.inspect_result.zezhishao_d2stgnn.dataloader.dataloader.DataLoader.get_iterator", "home.repos.pwc.inspect_result.zezhishao_d2stgnn.dataloader.dataloader.DataLoader.get_iterator"], ["", "", "@", "clock", "\n", "def", "iter_dataloader", "(", "data_dict", ")", ":", "\n", "    ", "train_dataloader", "=", "data_dict", "[", "'train_loader'", "]", "\n", "val_dataloader", "=", "data_dict", "[", "'val_loader'", "]", "\n", "test_dataloader", "=", "data_dict", "[", "'test_loader'", "]", "\n", "\n", "for", "itera", ",", "(", "x", ",", "y", ")", "in", "enumerate", "(", "train_dataloader", ".", "get_iterator", "(", ")", ")", ":", "\n", "        ", "pass", "\n", "", "for", "itera", ",", "(", "x", ",", "y", ")", "in", "enumerate", "(", "val_dataloader", ".", "get_iterator", "(", ")", ")", ":", "\n", "        ", "pass", "\n", "", "for", "itera", ",", "(", "x", ",", "y", ")", "in", "enumerate", "(", "test_dataloader", ".", "get_iterator", "(", ")", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.dataloader.dataloader.DataLoader.__init__": [[36, 53], ["len", "int", "numpy.repeat", "numpy.repeat", "numpy.concatenate", "numpy.concatenate", "dataloader.DataLoader.shuffle", "len"], "methods", ["home.repos.pwc.inspect_result.zezhishao_d2stgnn.dataloader.dataloader.DataLoader.shuffle"], ["def", "__init__", "(", "self", ",", "xs", ",", "ys", ",", "batch_size", ",", "pad_with_last_sample", "=", "True", ",", "shuffle", "=", "False", ")", ":", "\n", "        ", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "current_ind", "=", "0", "\n", "\n", "if", "pad_with_last_sample", ":", "\n", "            ", "num_padding", "=", "(", "batch_size", "-", "(", "len", "(", "xs", ")", "%", "batch_size", ")", ")", "%", "batch_size", "\n", "x_padding", "=", "np", ".", "repeat", "(", "xs", "[", "-", "1", ":", "]", ",", "num_padding", ",", "axis", "=", "0", ")", "\n", "y_padding", "=", "np", ".", "repeat", "(", "ys", "[", "-", "1", ":", "]", ",", "num_padding", ",", "axis", "=", "0", ")", "\n", "xs", "=", "np", ".", "concatenate", "(", "[", "xs", ",", "x_padding", "]", ",", "axis", "=", "0", ")", "\n", "ys", "=", "np", ".", "concatenate", "(", "[", "ys", ",", "y_padding", "]", ",", "axis", "=", "0", ")", "\n", "\n", "", "self", ".", "size", "=", "len", "(", "xs", ")", "\n", "self", ".", "num_batch", "=", "int", "(", "self", ".", "size", "//", "self", ".", "batch_size", ")", "\n", "self", ".", "xs", "=", "xs", "\n", "self", ".", "ys", "=", "ys", "\n", "if", "shuffle", ":", "\n", "            ", "self", ".", "shuffle", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.dataloader.dataloader.DataLoader.shuffle": [[54, 59], ["numpy.random.permutation"], "methods", ["None"], ["", "", "def", "shuffle", "(", "self", ")", ":", "\n", "        ", "permutation", "=", "np", ".", "random", ".", "permutation", "(", "self", ".", "size", ")", "\n", "xs", ",", "ys", "=", "self", ".", "xs", "[", "permutation", "]", ",", "self", ".", "ys", "[", "permutation", "]", "\n", "self", ".", "xs", "=", "xs", "\n", "self", ".", "ys", "=", "ys", "\n", "\n"]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.dataloader.dataloader.DataLoader.__len__": [[60, 62], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.dataloader.dataloader.DataLoader.get_iterator": [[63, 90], ["dataloader.DataLoader.get_iterator._wrapper"], "methods", ["None"], ["", "def", "get_iterator", "(", "self", ")", ":", "\n", "        ", "r\"\"\"\n        Description:\n        -----------\n        Fetch a batch of data.\n\n        Parameters:\n        -----------\n        None\n\n        Returns:\n        -----------\n        (xi, yi): tuple\n            xi: batch_size x T_in x num_nodes x features.\n            yi: batch_size x T_out x num_nodes x features.\n        \"\"\"", "\n", "self", ".", "current_ind", "=", "0", "\n", "def", "_wrapper", "(", ")", ":", "\n", "            ", "while", "self", ".", "current_ind", "<", "self", ".", "num_batch", ":", "\n", "                ", "start_ind", "=", "self", ".", "batch_size", "*", "self", ".", "current_ind", "\n", "end_ind", "=", "min", "(", "self", ".", "size", ",", "self", ".", "batch_size", "*", "(", "self", ".", "current_ind", "+", "1", ")", ")", "\n", "x_i", "=", "self", ".", "xs", "[", "start_ind", ":", "end_ind", ",", "...", "]", "\n", "y_i", "=", "self", ".", "ys", "[", "start_ind", ":", "end_ind", ",", "...", "]", "\n", "yield", "(", "x_i", ",", "y_i", ")", "\n", "self", ".", "current_ind", "+=", "1", "\n", "\n", "", "", "return", "_wrapper", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.sensor_graph.describe_adjs.load_pickle": [[3, 29], ["open", "pickle.load", "print", "open", "pickle.load"], "function", ["None"], ["def", "load_pickle", "(", "pickle_file", ")", ":", "\n", "    ", "r\"\"\"\n    Description:\n    -----------\n    Load pickle data.\n    \n    Parameters:\n    -----------\n    pickle_file: str\n        File path.\n\n    Returns:\n    -----------\n    pickle_data: any\n        Pickle data.\n    \"\"\"", "\n", "try", ":", "\n", "        ", "with", "open", "(", "pickle_file", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "pickle_data", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "", "except", "UnicodeDecodeError", "as", "e", ":", "\n", "        ", "with", "open", "(", "pickle_file", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "pickle_data", "=", "pickle", ".", "load", "(", "f", ",", "encoding", "=", "'latin1'", ")", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "        ", "print", "(", "'Unable to load data '", ",", "pickle_file", ",", "':'", ",", "e", ")", "\n", "raise", "\n", "", "return", "pickle_data", "\n", "\n"]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.PEMS04.generate_training_data.MinMaxnormalization": [[18, 48], ["train.max", "train.min", "print", "print", "generate_training_data.MinMaxnormalization.normalize"], "function", ["None"], ["def", "MinMaxnormalization", "(", "train", ",", "val", ",", "test", ")", ":", "\n", "    ", "'''\n    Parameters\n    ----------\n    train, val, test: np.ndarray (B,N,F,T)\n    Returns\n    ----------\n    stats: dict, two keys: mean and std\n    train_norm, val_norm, test_norm: np.ndarray,\n                                     shape is the same as original\n    '''", "\n", "\n", "assert", "train", ".", "shape", "[", "1", ":", "]", "==", "val", ".", "shape", "[", "1", ":", "]", "and", "val", ".", "shape", "[", "1", ":", "]", "==", "test", ".", "shape", "[", "1", ":", "]", "# ensure the num of nodes is the same", "\n", "\n", "_max", "=", "train", ".", "max", "(", "axis", "=", "(", "0", ",", "1", ",", "3", ")", ",", "keepdims", "=", "True", ")", "\n", "_min", "=", "train", ".", "min", "(", "axis", "=", "(", "0", ",", "1", ",", "3", ")", ",", "keepdims", "=", "True", ")", "\n", "\n", "print", "(", "'_max.shape:'", ",", "_max", ".", "shape", ")", "\n", "print", "(", "'_min.shape:'", ",", "_min", ".", "shape", ")", "\n", "\n", "def", "normalize", "(", "x", ")", ":", "\n", "        ", "x", "=", "1.", "*", "(", "x", "-", "_min", ")", "/", "(", "_max", "-", "_min", ")", "\n", "x", "=", "2.", "*", "x", "-", "1.", "\n", "return", "x", "\n", "\n", "", "train_norm", "=", "normalize", "(", "train", ")", "\n", "val_norm", "=", "normalize", "(", "val", ")", "\n", "test_norm", "=", "normalize", "(", "test", ")", "\n", "\n", "return", "{", "'_max'", ":", "_max", ",", "'_min'", ":", "_min", "}", ",", "train_norm", ",", "val_norm", ",", "test_norm", "\n", "\n"]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.PEMS04.generate_training_data.generate_graph_seq2seq_io_data": [[50, 93], ["numpy.concatenate", "abs", "abs", "range", "numpy.stack", "numpy.stack", "numpy.array", "numpy.tile().transpose", "feature_list.append", "numpy.array", "numpy.tile().transpose", "feature_list.append", "min", "np.stack.append", "np.stack.append", "abs", "range", "numpy.tile", "range", "numpy.tile", "max"], "function", ["None"], ["", "def", "generate_graph_seq2seq_io_data", "(", "\n", "data", ",", "x_offsets", ",", "y_offsets", ",", "add_time_in_day", "=", "True", ",", "add_day_in_week", "=", "True", ",", "scaler", "=", "None", "\n", ")", ":", "\n", "    ", "\"\"\"\n    Generate samples from\n    :param df:\n    :param x_offsets:\n    :param y_offsets:\n    :param add_time_in_day:\n    :param add_day_in_week:\n    :param scaler:\n    :return:\n    # x: (epoch_size, input_length, num_nodes, input_dim)\n    # y: (epoch_size, output_length, num_nodes, output_dim)\n    \"\"\"", "\n", "num_samples", ",", "num_nodes", ",", "_", "=", "data", ".", "shape", "\n", "# add_time_in_day = False", "\n", "# add_day_in_week = False", "\n", "feature_list", "=", "[", "data", "[", "...", ",", "0", ":", "num_feat", "]", "]", "\n", "if", "add_time_in_day", ":", "\n", "# numerical time_in_day", "\n", "        ", "time_ind", "=", "[", "i", "%", "288", "/", "288", "for", "i", "in", "range", "(", "num_samples", ")", "]", "\n", "time_ind", "=", "np", ".", "array", "(", "time_ind", ")", "\n", "time_in_day", "=", "np", ".", "tile", "(", "time_ind", ",", "[", "1", ",", "num_nodes", ",", "1", "]", ")", ".", "transpose", "(", "(", "2", ",", "1", ",", "0", ")", ")", "\n", "feature_list", ".", "append", "(", "time_in_day", ")", "\n", "\n", "", "if", "add_day_in_week", ":", "\n", "# numerical day_in_week", "\n", "        ", "day_in_week", "=", "[", "(", "i", "//", "288", ")", "%", "7", "for", "i", "in", "range", "(", "num_samples", ")", "]", "\n", "day_in_week", "=", "np", ".", "array", "(", "day_in_week", ")", "\n", "day_in_week", "=", "np", ".", "tile", "(", "day_in_week", ",", "[", "1", ",", "num_nodes", ",", "1", "]", ")", ".", "transpose", "(", "(", "2", ",", "1", ",", "0", ")", ")", "\n", "feature_list", ".", "append", "(", "day_in_week", ")", "\n", "\n", "", "data", "=", "np", ".", "concatenate", "(", "feature_list", ",", "axis", "=", "-", "1", ")", "\n", "x", ",", "y", "=", "[", "]", ",", "[", "]", "\n", "min_t", "=", "abs", "(", "min", "(", "x_offsets", ")", ")", "\n", "max_t", "=", "abs", "(", "num_samples", "-", "abs", "(", "max", "(", "y_offsets", ")", ")", ")", "# Exclusive", "\n", "for", "t", "in", "range", "(", "min_t", ",", "max_t", ")", ":", "# t is the index of the last observation.", "\n", "        ", "x", ".", "append", "(", "data", "[", "t", "+", "x_offsets", ",", "...", "]", ")", "\n", "y", ".", "append", "(", "data", "[", "t", "+", "y_offsets", ",", "...", "]", ")", "\n", "", "x", "=", "np", ".", "stack", "(", "x", ",", "axis", "=", "0", ")", "\n", "y", "=", "np", ".", "stack", "(", "y", ",", "axis", "=", "0", ")", "\n", "return", "x", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.PEMS04.generate_training_data.generate_train_val_test": [[95, 163], ["numpy.sort", "numpy.sort", "generate_training_data.generate_graph_seq2seq_io_data", "print", "round", "round", "numpy.transpose", "numpy.transpose", "numpy.transpose", "generate_training_data.MinMaxnormalization", "numpy.transpose", "numpy.transpose", "numpy.transpose", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "pickle.dump", "pickle.dump", "numpy.load", "numpy.concatenate", "numpy.arange", "print", "numpy.savez_compressed", "open", "open", "os.path.join", "numpy.arange", "locals", "locals", "np.sort.reshape", "np.sort.reshape", "list", "list"], "function", ["home.repos.pwc.inspect_result.zezhishao_d2stgnn.PEMS-BAY.generate_training_data.generate_graph_seq2seq_io_data", "home.repos.pwc.inspect_result.zezhishao_d2stgnn.PEMS08.generate_training_data.MinMaxnormalization"], ["", "def", "generate_train_val_test", "(", "args", ")", ":", "\n", "    ", "seq_length_x", ",", "seq_length_y", "=", "args", ".", "seq_length_x", ",", "args", ".", "seq_length_y", "\n", "data", "=", "np", ".", "load", "(", "args", ".", "traffic_df_filename", ")", "[", "'data'", "]", "\n", "\n", "# 0 is the latest observed sample.", "\n", "x_offsets", "=", "np", ".", "sort", "(", "np", ".", "concatenate", "(", "(", "np", ".", "arange", "(", "-", "(", "seq_length_x", "-", "1", ")", ",", "1", ",", "1", ")", ",", ")", ")", ")", "\n", "# Predict the next one hour", "\n", "y_offsets", "=", "np", ".", "sort", "(", "np", ".", "arange", "(", "args", ".", "y_start", ",", "(", "seq_length_y", "+", "1", ")", ",", "1", ")", ")", "\n", "# x: (num_samples, input_length, num_nodes, input_dim)", "\n", "# y: (num_samples, output_length, num_nodes, output_dim)", "\n", "x", ",", "y", "=", "generate_graph_seq2seq_io_data", "(", "\n", "data", ",", "\n", "x_offsets", "=", "x_offsets", ",", "\n", "y_offsets", "=", "y_offsets", ",", "\n", "add_time_in_day", "=", "True", ",", "\n", "add_day_in_week", "=", "args", ".", "dow", ",", "\n", ")", "\n", "\n", "print", "(", "\"x shape: \"", ",", "x", ".", "shape", ",", "\", y shape: \"", ",", "y", ".", "shape", ")", "\n", "# Write the data into npz file.", "\n", "num_samples", "=", "x", ".", "shape", "[", "0", "]", "\n", "num_test", "=", "round", "(", "num_samples", "*", "0.2", ")", "\n", "num_train", "=", "round", "(", "num_samples", "*", "0.6", ")", "\n", "num_val", "=", "num_samples", "-", "num_test", "-", "num_train", "\n", "x_train", ",", "y_train", "=", "x", "[", ":", "num_train", "]", ",", "y", "[", ":", "num_train", "]", "[", "...", ",", "0", ":", "1", "]", "\n", "x_val", ",", "y_val", "=", "(", "\n", "x", "[", "num_train", ":", "num_train", "+", "num_val", "]", ",", "\n", "y", "[", "num_train", ":", "num_train", "+", "num_val", "]", "[", "...", ",", "0", ":", "1", "]", ",", "\n", ")", "\n", "x_test", ",", "y_test", "=", "x", "[", "-", "num_test", ":", "]", ",", "y", "[", "-", "num_test", ":", "]", "[", "...", ",", "0", ":", "1", "]", "\n", "\n", "# =========== Do it for minmaxnorm ============ #", "\n", "x_train_norm", "=", "x_train", "[", ":", ",", ":", ",", ":", ",", ":", "num_feat", "]", "\n", "x_train_time", "=", "x_train", "[", ":", ",", ":", ",", ":", ",", "num_feat", ":", "]", "\n", "x_val_norm", "=", "x_val", "[", ":", ",", ":", ",", ":", ",", ":", "num_feat", "]", "\n", "x_val_time", "=", "x_val", "[", ":", ",", ":", ",", ":", ",", "num_feat", ":", "]", "\n", "x_test_norm", "=", "x_test", "[", ":", ",", ":", ",", ":", ",", ":", "num_feat", "]", "\n", "x_test_time", "=", "x_test", "[", ":", ",", ":", ",", ":", ",", "num_feat", ":", "]", "\n", "\n", "x_train_norm", "=", "np", ".", "transpose", "(", "x_train_norm", ",", "axes", "=", "[", "0", ",", "2", ",", "3", ",", "1", "]", ")", "\n", "x_val_norm", "=", "np", ".", "transpose", "(", "x_val_norm", ",", "axes", "=", "[", "0", ",", "2", ",", "3", ",", "1", "]", ")", "\n", "x_test_norm", "=", "np", ".", "transpose", "(", "x_test_norm", ",", "axes", "=", "[", "0", ",", "2", ",", "3", ",", "1", "]", ")", "\n", "\n", "stat", ",", "x_train_norm", ",", "x_val_norm", ",", "x_test_norm", "=", "MinMaxnormalization", "(", "x_train_norm", ",", "x_val_norm", ",", "x_test_norm", ")", "\n", "\n", "x_train_norm", "=", "np", ".", "transpose", "(", "x_train_norm", ",", "axes", "=", "[", "0", ",", "3", ",", "1", ",", "2", "]", ")", "\n", "x_val_norm", "=", "np", ".", "transpose", "(", "x_val_norm", ",", "axes", "=", "[", "0", ",", "3", ",", "1", ",", "2", "]", ")", "\n", "x_test_norm", "=", "np", ".", "transpose", "(", "x_test_norm", ",", "axes", "=", "[", "0", ",", "3", ",", "1", ",", "2", "]", ")", "\n", "_max", "=", "stat", "[", "'_max'", "]", "\n", "_min", "=", "stat", "[", "'_min'", "]", "\n", "\n", "x_train", "=", "np", ".", "concatenate", "(", "[", "x_train_norm", ",", "x_train_time", "]", ",", "axis", "=", "-", "1", ")", "\n", "x_val", "=", "np", ".", "concatenate", "(", "[", "x_val_norm", ",", "x_val_time", "]", ",", "axis", "=", "-", "1", ")", "\n", "x_test", "=", "np", ".", "concatenate", "(", "[", "x_test_norm", ",", "x_test_time", "]", ",", "axis", "=", "-", "1", ")", "\n", "# ============================================= #", "\n", "for", "cat", "in", "[", "\"train\"", ",", "\"val\"", ",", "\"test\"", "]", ":", "\n", "        ", "_x", ",", "_y", "=", "locals", "(", ")", "[", "\"x_\"", "+", "cat", "]", ",", "locals", "(", ")", "[", "\"y_\"", "+", "cat", "]", "\n", "print", "(", "cat", ",", "\"x: \"", ",", "_x", ".", "shape", ",", "\"y:\"", ",", "_y", ".", "shape", ")", "\n", "np", ".", "savez_compressed", "(", "\n", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "f\"{cat}.npz\"", ")", ",", "\n", "x", "=", "_x", ",", "\n", "y", "=", "_y", ",", "\n", "x_offsets", "=", "x_offsets", ".", "reshape", "(", "list", "(", "x_offsets", ".", "shape", ")", "+", "[", "1", "]", ")", ",", "\n", "y_offsets", "=", "y_offsets", ".", "reshape", "(", "list", "(", "y_offsets", ".", "shape", ")", "+", "[", "1", "]", ")", ",", "\n", ")", "\n", "\n", "", "pickle", ".", "dump", "(", "_max", ",", "open", "(", "\"datasets/PEMS04/max.pkl\"", ",", "'wb'", ")", ")", "\n", "pickle", ".", "dump", "(", "_min", ",", "open", "(", "\"datasets/PEMS04/min.pkl\"", ",", "'wb'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.PEMS04.generate_adj_mx.get_adjacency_matrix": [[5, 51], ["numpy.load", "numpy.zeros", "numpy.zeros", "int", "int", "int", "int", "open", "open", "f.readline", "csv.reader", "open", "f.readline", "csv.reader", "int", "enumerate", "len", "int", "int", "float", "len", "int", "int", "float", "f.read().strip().split", "f.read().strip", "f.read"], "function", ["None"], ["def", "get_adjacency_matrix", "(", "distance_df_filename", ",", "num_of_vertices", ",", "id_filename", "=", "None", ")", ":", "\n", "    ", "'''\n    Parameters\n    ----------\n    distance_df_filename: str, path of the csv file contains edges information\n\n    num_of_vertices: int, the number of vertices\n\n    Returns\n    ----------\n    A: np.ndarray, adjacency matrix\n\n    '''", "\n", "if", "'npy'", "in", "distance_df_filename", ":", "\n", "        ", "adj_mx", "=", "np", ".", "load", "(", "distance_df_filename", ")", "\n", "return", "adj_mx", ",", "None", "\n", "", "else", ":", "\n", "        ", "A", "=", "np", ".", "zeros", "(", "(", "int", "(", "num_of_vertices", ")", ",", "int", "(", "num_of_vertices", ")", ")", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "distaneA", "=", "np", ".", "zeros", "(", "(", "int", "(", "num_of_vertices", ")", ",", "int", "(", "num_of_vertices", ")", ")", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "# distance file\u4e2d\u7684id\u5e76\u4e0d\u662f\u4ece0\u5f00\u59cb\u7684 \u6240\u4ee5\u8981\u8fdb\u884c\u91cd\u65b0\u7684\u6620\u5c04\uff1bid_filename\u662f\u8282\u70b9\u7684\u987a\u5e8f", "\n", "if", "id_filename", ":", "\n", "            ", "with", "open", "(", "id_filename", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "id_dict", "=", "{", "int", "(", "i", ")", ":", "idx", "for", "idx", ",", "i", "in", "enumerate", "(", "f", ".", "read", "(", ")", ".", "strip", "(", ")", ".", "split", "(", "'\\n'", ")", ")", "}", "# \u628a\u8282\u70b9id\uff08idx\uff09\u6620\u5c04\u6210\u4ece0\u5f00\u59cb\u7684\u7d22\u5f15", "\n", "", "with", "open", "(", "distance_df_filename", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "f", ".", "readline", "(", ")", "# \u7565\u8fc7\u8868\u5934\u90a3\u4e00\u884c", "\n", "reader", "=", "csv", ".", "reader", "(", "f", ")", "\n", "for", "row", "in", "reader", ":", "\n", "                    ", "if", "len", "(", "row", ")", "!=", "3", ":", "\n", "                        ", "continue", "\n", "", "i", ",", "j", ",", "distance", "=", "int", "(", "row", "[", "0", "]", ")", ",", "int", "(", "row", "[", "1", "]", ")", ",", "float", "(", "row", "[", "2", "]", ")", "\n", "A", "[", "id_dict", "[", "i", "]", ",", "id_dict", "[", "j", "]", "]", "=", "1", "\n", "distaneA", "[", "id_dict", "[", "i", "]", ",", "id_dict", "[", "j", "]", "]", "=", "distance", "\n", "", "", "return", "A", ",", "distaneA", "\n", "", "else", ":", "# distance file\u4e2d\u7684id\u76f4\u63a5\u4ece0\u5f00\u59cb", "\n", "            ", "with", "open", "(", "distance_df_filename", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "f", ".", "readline", "(", ")", "\n", "reader", "=", "csv", ".", "reader", "(", "f", ")", "\n", "for", "row", "in", "reader", ":", "\n", "                    ", "if", "len", "(", "row", ")", "!=", "3", ":", "\n", "                        ", "continue", "\n", "", "i", ",", "j", ",", "distance", "=", "int", "(", "row", "[", "0", "]", ")", ",", "int", "(", "row", "[", "1", "]", ")", ",", "float", "(", "row", "[", "2", "]", ")", "\n", "A", "[", "i", ",", "j", "]", "=", "1", "\n", "distaneA", "[", "i", ",", "j", "]", "=", "distance", "\n", "", "", "return", "A", ",", "distaneA", "\n", "\n"]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.PEMS04.generate_adj_mx.get_adjacency_matrix_2direction": [[101, 151], ["numpy.load", "numpy.zeros", "numpy.zeros", "int", "int", "int", "int", "open", "open", "f.readline", "csv.reader", "open", "f.readline", "csv.reader", "int", "enumerate", "len", "int", "int", "float", "len", "int", "int", "float", "f.read().strip().split", "f.read().strip", "f.read"], "function", ["None"], ["", "", "", "def", "get_adjacency_matrix_2direction", "(", "distance_df_filename", ",", "num_of_vertices", ",", "id_filename", "=", "None", ")", ":", "\n", "    ", "'''\n    Parameters\n    ----------\n    distance_df_filename: str, path of the csv file contains edges information\n\n    num_of_vertices: int, the number of vertices\n\n    Returns\n    ----------\n    A: np.ndarray, adjacency matrix\n\n    '''", "\n", "if", "'npy'", "in", "distance_df_filename", ":", "\n", "        ", "adj_mx", "=", "np", ".", "load", "(", "distance_df_filename", ")", "\n", "return", "adj_mx", ",", "None", "\n", "", "else", ":", "\n", "        ", "A", "=", "np", ".", "zeros", "(", "(", "int", "(", "num_of_vertices", ")", ",", "int", "(", "num_of_vertices", ")", ")", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "distaneA", "=", "np", ".", "zeros", "(", "(", "int", "(", "num_of_vertices", ")", ",", "int", "(", "num_of_vertices", ")", ")", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "# distance file\u4e2d\u7684id\u5e76\u4e0d\u662f\u4ece0\u5f00\u59cb\u7684 \u6240\u4ee5\u8981\u8fdb\u884c\u91cd\u65b0\u7684\u6620\u5c04\uff1bid_filename\u662f\u8282\u70b9\u7684\u987a\u5e8f", "\n", "if", "id_filename", ":", "\n", "            ", "with", "open", "(", "id_filename", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "id_dict", "=", "{", "int", "(", "i", ")", ":", "idx", "for", "idx", ",", "i", "in", "enumerate", "(", "f", ".", "read", "(", ")", ".", "strip", "(", ")", ".", "split", "(", "'\\n'", ")", ")", "}", "# \u628a\u8282\u70b9id\uff08idx\uff09\u6620\u5c04\u6210\u4ece0\u5f00\u59cb\u7684\u7d22\u5f15", "\n", "", "with", "open", "(", "distance_df_filename", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "f", ".", "readline", "(", ")", "# \u7565\u8fc7\u8868\u5934\u90a3\u4e00\u884c", "\n", "reader", "=", "csv", ".", "reader", "(", "f", ")", "\n", "for", "row", "in", "reader", ":", "\n", "                    ", "if", "len", "(", "row", ")", "!=", "3", ":", "\n", "                        ", "continue", "\n", "", "i", ",", "j", ",", "distance", "=", "int", "(", "row", "[", "0", "]", ")", ",", "int", "(", "row", "[", "1", "]", ")", ",", "float", "(", "row", "[", "2", "]", ")", "\n", "A", "[", "id_dict", "[", "i", "]", ",", "id_dict", "[", "j", "]", "]", "=", "1", "\n", "A", "[", "id_dict", "[", "j", "]", ",", "id_dict", "[", "i", "]", "]", "=", "1", "\n", "distaneA", "[", "id_dict", "[", "i", "]", ",", "id_dict", "[", "j", "]", "]", "=", "distance", "\n", "distaneA", "[", "id_dict", "[", "j", "]", ",", "id_dict", "[", "i", "]", "]", "=", "distance", "\n", "", "", "return", "A", ",", "distaneA", "\n", "", "else", ":", "# distance file\u4e2d\u7684id\u76f4\u63a5\u4ece0\u5f00\u59cb", "\n", "            ", "with", "open", "(", "distance_df_filename", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "f", ".", "readline", "(", ")", "\n", "reader", "=", "csv", ".", "reader", "(", "f", ")", "\n", "for", "row", "in", "reader", ":", "\n", "                    ", "if", "len", "(", "row", ")", "!=", "3", ":", "\n", "                        ", "continue", "\n", "", "i", ",", "j", ",", "distance", "=", "int", "(", "row", "[", "0", "]", ")", ",", "int", "(", "row", "[", "1", "]", ")", ",", "float", "(", "row", "[", "2", "]", ")", "\n", "A", "[", "i", ",", "j", "]", "=", "1", "\n", "A", "[", "j", ",", "i", "]", "=", "1", "\n", "distaneA", "[", "i", ",", "j", "]", "=", "distance", "\n", "distaneA", "[", "j", ",", "i", "]", "=", "distance", "\n", "", "", "return", "A", ",", "distaneA", "\n", "\n"]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.METR-LA.generate_training_data.generate_graph_seq2seq_io_data": [[13, 73], ["print", "numpy.expand_dims", "numpy.concatenate", "abs", "abs", "range", "numpy.stack", "numpy.stack", "numpy.tile().transpose", "feature_list.append", "numpy.tile().transpose", "feature_list.append", "min", "np.stack.append", "np.stack.append", "numpy.timedelta64", "list", "torch.tensor().unsqueeze().expand().unsqueeze().numpy", "torch.tensor().unsqueeze().expand().unsqueeze().numpy", "feature_list.append", "list", "torch.tensor().unsqueeze().expand().unsqueeze().numpy", "torch.tensor().unsqueeze().expand().unsqueeze().numpy", "feature_list.append", "abs", "df.index.values.astype", "numpy.tile", "range", "numpy.tile", "range", "max", "torch.tensor().unsqueeze().expand().unsqueeze", "torch.tensor().unsqueeze().expand().unsqueeze", "torch.tensor().unsqueeze().expand().unsqueeze", "torch.tensor().unsqueeze().expand().unsqueeze", "torch.tensor().unsqueeze().expand", "torch.tensor().unsqueeze().expand", "torch.tensor().unsqueeze().expand", "torch.tensor().unsqueeze().expand", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "function", ["None"], ["\n", "\n", "num_feat", "=", "1", "\n", "\n", "# https://github.com/guoshnBJTU/ASTGNN/blob/main/prepareData.py#L110", "\n", "def", "MinMaxnormalization", "(", "train", ",", "val", ",", "test", ")", ":", "\n", "    ", "'''\n    Parameters\n    ----------\n    train, val, test: np.ndarray (B,N,F,T)\n    Returns\n    ----------\n    stats: dict, two keys: mean and std\n    train_norm, val_norm, test_norm: np.ndarray,\n                                     shape is the same as original\n    '''", "\n", "\n", "assert", "train", ".", "shape", "[", "1", ":", "]", "==", "val", ".", "shape", "[", "1", ":", "]", "and", "val", ".", "shape", "[", "1", ":", "]", "==", "test", ".", "shape", "[", "1", ":", "]", "# ensure the num of nodes is the same", "\n", "\n", "_max", "=", "train", ".", "max", "(", "axis", "=", "(", "0", ",", "1", ",", "3", ")", ",", "keepdims", "=", "True", ")", "\n", "_min", "=", "train", ".", "min", "(", "axis", "=", "(", "0", ",", "1", ",", "3", ")", ",", "keepdims", "=", "True", ")", "\n", "\n", "print", "(", "'_max.shape:'", ",", "_max", ".", "shape", ")", "\n", "print", "(", "'_min.shape:'", ",", "_min", ".", "shape", ")", "\n", "\n", "def", "normalize", "(", "x", ")", ":", "\n", "        ", "x", "=", "1.", "*", "(", "x", "-", "_min", ")", "/", "(", "_max", "-", "_min", ")", "\n", "x", "=", "2.", "*", "x", "-", "1.", "\n", "return", "x", "\n", "\n", "", "train_norm", "=", "normalize", "(", "train", ")", "\n", "val_norm", "=", "normalize", "(", "val", ")", "\n", "test_norm", "=", "normalize", "(", "test", ")", "\n", "\n", "return", "{", "'_max'", ":", "_max", ",", "'_min'", ":", "_min", "}", ",", "train_norm", ",", "val_norm", ",", "test_norm", "\n", "\n", "\n", "", "def", "generate_graph_seq2seq_io_data", "(", "\n", "data", ",", "x_offsets", ",", "y_offsets", ",", "add_time_in_day", "=", "True", ",", "add_day_in_week", "=", "True", ",", "scaler", "=", "None", "\n", ")", ":", "\n", "    ", "\"\"\"\n    Generate samples from\n    :param df:\n    :param x_offsets:\n    :param y_offsets:\n    :param add_time_in_day:\n    :param add_day_in_week:\n    :param scaler:\n    :return:\n    # x: (epoch_size, input_length, num_nodes, input_dim)\n    # y: (epoch_size, output_length, num_nodes, output_dim)\n    \"\"\"", "\n", "num_samples", ",", "num_nodes", ",", "_", "=", "data", ".", "shape", "\n", "# add_time_in_day = False", "\n", "# add_day_in_week = False", "\n", "feature_list", "=", "[", "data", "[", "...", ",", "0", ":", "num_feat", "]", "]", "\n", "if", "add_time_in_day", ":", "\n", "# numerical time_in_day", "\n", "        ", "time_ind", "=", "[", "i", "%", "288", "/", "288", "for", "i", "in", "range", "(", "num_samples", ")", "]", "\n", "time_ind", "=", "np", ".", "array", "(", "time_ind", ")", "\n", "time_in_day", "=", "np", ".", "tile", "(", "time_ind", ",", "[", "1", ",", "num_nodes", ",", "1", "]", ")", ".", "transpose", "(", "(", "2", ",", "1", ",", "0", ")", ")", "\n"]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.METR-LA.generate_training_data.generate_train_val_test": [[75, 114], ["pandas.read_hdf", "numpy.sort", "numpy.sort", "generate_training_data.generate_graph_seq2seq_io_data", "print", "round", "round", "numpy.concatenate", "numpy.arange", "print", "numpy.savez_compressed", "os.path.join", "numpy.arange", "locals", "locals", "np.sort.reshape", "np.sort.reshape", "list", "list"], "function", ["home.repos.pwc.inspect_result.zezhishao_d2stgnn.PEMS-BAY.generate_training_data.generate_graph_seq2seq_io_data"], ["\n", "", "if", "add_day_in_week", ":", "\n", "# numerical day_in_week", "\n", "        ", "day_in_week", "=", "[", "(", "i", "//", "288", ")", "%", "7", "for", "i", "in", "range", "(", "num_samples", ")", "]", "\n", "day_in_week", "=", "np", ".", "array", "(", "day_in_week", ")", "\n", "day_in_week", "=", "np", ".", "tile", "(", "day_in_week", ",", "[", "1", ",", "num_nodes", ",", "1", "]", ")", ".", "transpose", "(", "(", "2", ",", "1", ",", "0", ")", ")", "\n", "feature_list", ".", "append", "(", "day_in_week", ")", "\n", "\n", "", "data", "=", "np", ".", "concatenate", "(", "feature_list", ",", "axis", "=", "-", "1", ")", "\n", "x", ",", "y", "=", "[", "]", ",", "[", "]", "\n", "min_t", "=", "abs", "(", "min", "(", "x_offsets", ")", ")", "\n", "max_t", "=", "abs", "(", "num_samples", "-", "abs", "(", "max", "(", "y_offsets", ")", ")", ")", "# Exclusive", "\n", "for", "t", "in", "range", "(", "min_t", ",", "max_t", ")", ":", "# t is the index of the last observation.", "\n", "        ", "x", ".", "append", "(", "data", "[", "t", "+", "x_offsets", ",", "...", "]", ")", "\n", "y", ".", "append", "(", "data", "[", "t", "+", "y_offsets", ",", "...", "]", ")", "\n", "", "x", "=", "np", ".", "stack", "(", "x", ",", "axis", "=", "0", ")", "\n", "y", "=", "np", ".", "stack", "(", "y", ",", "axis", "=", "0", ")", "\n", "return", "x", ",", "y", "\n", "\n", "\n", "", "def", "generate_train_val_test", "(", "args", ")", ":", "\n", "    ", "seq_length_x", ",", "seq_length_y", "=", "args", ".", "seq_length_x", ",", "args", ".", "seq_length_y", "\n", "data", "=", "np", ".", "load", "(", "args", ".", "traffic_df_filename", ")", "[", "'data'", "]", "\n", "\n", "# 0 is the latest observed sample.", "\n", "x_offsets", "=", "np", ".", "sort", "(", "np", ".", "concatenate", "(", "(", "np", ".", "arange", "(", "-", "(", "seq_length_x", "-", "1", ")", ",", "1", ",", "1", ")", ",", ")", ")", ")", "\n", "# Predict the next one hour", "\n", "y_offsets", "=", "np", ".", "sort", "(", "np", ".", "arange", "(", "args", ".", "y_start", ",", "(", "seq_length_y", "+", "1", ")", ",", "1", ")", ")", "\n", "# x: (num_samples, input_length, num_nodes, input_dim)", "\n", "# y: (num_samples, output_length, num_nodes, output_dim)", "\n", "x", ",", "y", "=", "generate_graph_seq2seq_io_data", "(", "\n", "data", ",", "\n", "x_offsets", "=", "x_offsets", ",", "\n", "y_offsets", "=", "y_offsets", ",", "\n", "add_time_in_day", "=", "True", ",", "\n", "add_day_in_week", "=", "args", ".", "dow", ",", "\n", ")", "\n", "\n", "print", "(", "\"x shape: \"", ",", "x", ".", "shape", ",", "\", y shape: \"", ",", "y", ".", "shape", ")", "\n", "# Write the data into npz file.", "\n"]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.PEMS08.generate_training_data.MinMaxnormalization": [[18, 48], ["train.max", "train.min", "print", "print", "generate_training_data.MinMaxnormalization.normalize"], "function", ["None"], ["def", "MinMaxnormalization", "(", "train", ",", "val", ",", "test", ")", ":", "\n", "    ", "'''\n    Parameters\n    ----------\n    train, val, test: np.ndarray (B,N,F,T)\n    Returns\n    ----------\n    stats: dict, two keys: mean and std\n    train_norm, val_norm, test_norm: np.ndarray,\n                                     shape is the same as original\n    '''", "\n", "\n", "assert", "train", ".", "shape", "[", "1", ":", "]", "==", "val", ".", "shape", "[", "1", ":", "]", "and", "val", ".", "shape", "[", "1", ":", "]", "==", "test", ".", "shape", "[", "1", ":", "]", "# ensure the num of nodes is the same", "\n", "\n", "_max", "=", "train", ".", "max", "(", "axis", "=", "(", "0", ",", "1", ",", "3", ")", ",", "keepdims", "=", "True", ")", "\n", "_min", "=", "train", ".", "min", "(", "axis", "=", "(", "0", ",", "1", ",", "3", ")", ",", "keepdims", "=", "True", ")", "\n", "\n", "print", "(", "'_max.shape:'", ",", "_max", ".", "shape", ")", "\n", "print", "(", "'_min.shape:'", ",", "_min", ".", "shape", ")", "\n", "\n", "def", "normalize", "(", "x", ")", ":", "\n", "        ", "x", "=", "1.", "*", "(", "x", "-", "_min", ")", "/", "(", "_max", "-", "_min", ")", "\n", "x", "=", "2.", "*", "x", "-", "1.", "\n", "return", "x", "\n", "\n", "", "train_norm", "=", "normalize", "(", "train", ")", "\n", "val_norm", "=", "normalize", "(", "val", ")", "\n", "test_norm", "=", "normalize", "(", "test", ")", "\n", "\n", "return", "{", "'_max'", ":", "_max", ",", "'_min'", ":", "_min", "}", ",", "train_norm", ",", "val_norm", ",", "test_norm", "\n", "\n"]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.PEMS08.generate_training_data.generate_graph_seq2seq_io_data": [[50, 93], ["numpy.concatenate", "abs", "abs", "range", "numpy.stack", "numpy.stack", "numpy.array", "numpy.tile().transpose", "feature_list.append", "numpy.array", "numpy.tile().transpose", "feature_list.append", "min", "np.stack.append", "np.stack.append", "abs", "range", "numpy.tile", "range", "numpy.tile", "max"], "function", ["None"], ["", "def", "generate_graph_seq2seq_io_data", "(", "\n", "data", ",", "x_offsets", ",", "y_offsets", ",", "add_time_in_day", "=", "True", ",", "add_day_in_week", "=", "True", ",", "scaler", "=", "None", "\n", ")", ":", "\n", "    ", "\"\"\"\n    Generate samples from\n    :param df:\n    :param x_offsets:\n    :param y_offsets:\n    :param add_time_in_day:\n    :param add_day_in_week:\n    :param scaler:\n    :return:\n    # x: (epoch_size, input_length, num_nodes, input_dim)\n    # y: (epoch_size, output_length, num_nodes, output_dim)\n    \"\"\"", "\n", "num_samples", ",", "num_nodes", ",", "_", "=", "data", ".", "shape", "\n", "# add_time_in_day = False", "\n", "# add_day_in_week = False", "\n", "feature_list", "=", "[", "data", "[", "...", ",", "0", ":", "num_feat", "]", "]", "\n", "if", "add_time_in_day", ":", "\n", "# numerical time_in_day", "\n", "        ", "time_ind", "=", "[", "i", "%", "288", "/", "288", "for", "i", "in", "range", "(", "num_samples", ")", "]", "\n", "time_ind", "=", "np", ".", "array", "(", "time_ind", ")", "\n", "time_in_day", "=", "np", ".", "tile", "(", "time_ind", ",", "[", "1", ",", "num_nodes", ",", "1", "]", ")", ".", "transpose", "(", "(", "2", ",", "1", ",", "0", ")", ")", "\n", "feature_list", ".", "append", "(", "time_in_day", ")", "\n", "\n", "", "if", "add_day_in_week", ":", "\n", "# numerical day_in_week", "\n", "        ", "day_in_week", "=", "[", "(", "i", "//", "288", ")", "%", "7", "for", "i", "in", "range", "(", "num_samples", ")", "]", "\n", "day_in_week", "=", "np", ".", "array", "(", "day_in_week", ")", "\n", "day_in_week", "=", "np", ".", "tile", "(", "day_in_week", ",", "[", "1", ",", "num_nodes", ",", "1", "]", ")", ".", "transpose", "(", "(", "2", ",", "1", ",", "0", ")", ")", "\n", "feature_list", ".", "append", "(", "day_in_week", ")", "\n", "\n", "", "data", "=", "np", ".", "concatenate", "(", "feature_list", ",", "axis", "=", "-", "1", ")", "\n", "x", ",", "y", "=", "[", "]", ",", "[", "]", "\n", "min_t", "=", "abs", "(", "min", "(", "x_offsets", ")", ")", "\n", "max_t", "=", "abs", "(", "num_samples", "-", "abs", "(", "max", "(", "y_offsets", ")", ")", ")", "# Exclusive", "\n", "for", "t", "in", "range", "(", "min_t", ",", "max_t", ")", ":", "# t is the index of the last observation.", "\n", "        ", "x", ".", "append", "(", "data", "[", "t", "+", "x_offsets", ",", "...", "]", ")", "\n", "y", ".", "append", "(", "data", "[", "t", "+", "y_offsets", ",", "...", "]", ")", "\n", "", "x", "=", "np", ".", "stack", "(", "x", ",", "axis", "=", "0", ")", "\n", "y", "=", "np", ".", "stack", "(", "y", ",", "axis", "=", "0", ")", "\n", "return", "x", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.PEMS08.generate_training_data.generate_train_val_test": [[95, 163], ["numpy.sort", "numpy.sort", "generate_training_data.generate_graph_seq2seq_io_data", "print", "round", "numpy.transpose", "numpy.transpose", "numpy.transpose", "generate_training_data.MinMaxnormalization", "numpy.transpose", "numpy.transpose", "numpy.transpose", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "pickle.dump", "pickle.dump", "numpy.load", "numpy.concatenate", "numpy.arange", "round", "print", "numpy.savez_compressed", "open", "open", "os.path.join", "numpy.arange", "locals", "locals", "np.sort.reshape", "np.sort.reshape", "list", "list"], "function", ["home.repos.pwc.inspect_result.zezhishao_d2stgnn.PEMS-BAY.generate_training_data.generate_graph_seq2seq_io_data", "home.repos.pwc.inspect_result.zezhishao_d2stgnn.PEMS08.generate_training_data.MinMaxnormalization"], ["", "def", "generate_train_val_test", "(", "args", ")", ":", "\n", "    ", "seq_length_x", ",", "seq_length_y", "=", "args", ".", "seq_length_x", ",", "args", ".", "seq_length_y", "\n", "data", "=", "np", ".", "load", "(", "args", ".", "traffic_df_filename", ")", "[", "'data'", "]", "\n", "\n", "# 0 is the latest observed sample.", "\n", "x_offsets", "=", "np", ".", "sort", "(", "np", ".", "concatenate", "(", "(", "np", ".", "arange", "(", "-", "(", "seq_length_x", "-", "1", ")", ",", "1", ",", "1", ")", ",", ")", ")", ")", "\n", "# Predict the next one hour", "\n", "y_offsets", "=", "np", ".", "sort", "(", "np", ".", "arange", "(", "args", ".", "y_start", ",", "(", "seq_length_y", "+", "1", ")", ",", "1", ")", ")", "\n", "# x: (num_samples, input_length, num_nodes, input_dim)", "\n", "# y: (num_samples, output_length, num_nodes, output_dim)", "\n", "x", ",", "y", "=", "generate_graph_seq2seq_io_data", "(", "\n", "data", ",", "\n", "x_offsets", "=", "x_offsets", ",", "\n", "y_offsets", "=", "y_offsets", ",", "\n", "add_time_in_day", "=", "True", ",", "\n", "add_day_in_week", "=", "args", ".", "dow", ",", "\n", ")", "\n", "\n", "print", "(", "\"x shape: \"", ",", "x", ".", "shape", ",", "\", y shape: \"", ",", "y", ".", "shape", ")", "\n", "# Write the data into npz file.", "\n", "num_samples", "=", "x", ".", "shape", "[", "0", "]", "\n", "num_test", "=", "round", "(", "num_samples", "*", "0.2", ")", "\n", "num_train", "=", "round", "(", "num_samples", "*", "0.6", ")", "\n", "num_val", "=", "num_samples", "-", "num_test", "-", "num_train", "\n", "x_train", ",", "y_train", "=", "x", "[", ":", "num_train", "]", ",", "y", "[", ":", "num_train", "]", "[", "...", ",", "0", ":", "1", "]", "\n", "x_val", ",", "y_val", "=", "(", "\n", "x", "[", "num_train", ":", "num_train", "+", "num_val", "]", ",", "\n", "y", "[", "num_train", ":", "num_train", "+", "num_val", "]", "[", "...", ",", "0", ":", "1", "]", ",", "\n", ")", "\n", "x_test", ",", "y_test", "=", "x", "[", "-", "num_test", ":", "]", ",", "y", "[", "-", "num_test", ":", "]", "[", "...", ",", "0", ":", "1", "]", "\n", "\n", "# =========== Do it for minmaxnorm ============ #", "\n", "x_train_norm", "=", "x_train", "[", ":", ",", ":", ",", ":", ",", ":", "num_feat", "]", "\n", "x_train_time", "=", "x_train", "[", ":", ",", ":", ",", ":", ",", "num_feat", ":", "]", "\n", "x_val_norm", "=", "x_val", "[", ":", ",", ":", ",", ":", ",", ":", "num_feat", "]", "\n", "x_val_time", "=", "x_val", "[", ":", ",", ":", ",", ":", ",", "num_feat", ":", "]", "\n", "x_test_norm", "=", "x_test", "[", ":", ",", ":", ",", ":", ",", ":", "num_feat", "]", "\n", "x_test_time", "=", "x_test", "[", ":", ",", ":", ",", ":", ",", "num_feat", ":", "]", "\n", "\n", "x_train_norm", "=", "np", ".", "transpose", "(", "x_train_norm", ",", "axes", "=", "[", "0", ",", "2", ",", "3", ",", "1", "]", ")", "\n", "x_val_norm", "=", "np", ".", "transpose", "(", "x_val_norm", ",", "axes", "=", "[", "0", ",", "2", ",", "3", ",", "1", "]", ")", "\n", "x_test_norm", "=", "np", ".", "transpose", "(", "x_test_norm", ",", "axes", "=", "[", "0", ",", "2", ",", "3", ",", "1", "]", ")", "\n", "\n", "stat", ",", "x_train_norm", ",", "x_val_norm", ",", "x_test_norm", "=", "MinMaxnormalization", "(", "x_train_norm", ",", "x_val_norm", ",", "x_test_norm", ")", "\n", "\n", "x_train_norm", "=", "np", ".", "transpose", "(", "x_train_norm", ",", "axes", "=", "[", "0", ",", "3", ",", "1", ",", "2", "]", ")", "\n", "x_val_norm", "=", "np", ".", "transpose", "(", "x_val_norm", ",", "axes", "=", "[", "0", ",", "3", ",", "1", ",", "2", "]", ")", "\n", "x_test_norm", "=", "np", ".", "transpose", "(", "x_test_norm", ",", "axes", "=", "[", "0", ",", "3", ",", "1", ",", "2", "]", ")", "\n", "_max", "=", "stat", "[", "'_max'", "]", "\n", "_min", "=", "stat", "[", "'_min'", "]", "\n", "\n", "x_train", "=", "np", ".", "concatenate", "(", "[", "x_train_norm", ",", "x_train_time", "]", ",", "axis", "=", "-", "1", ")", "\n", "x_val", "=", "np", ".", "concatenate", "(", "[", "x_val_norm", ",", "x_val_time", "]", ",", "axis", "=", "-", "1", ")", "\n", "x_test", "=", "np", ".", "concatenate", "(", "[", "x_test_norm", ",", "x_test_time", "]", ",", "axis", "=", "-", "1", ")", "\n", "# ============================================= #", "\n", "for", "cat", "in", "[", "\"train\"", ",", "\"val\"", ",", "\"test\"", "]", ":", "\n", "        ", "_x", ",", "_y", "=", "locals", "(", ")", "[", "\"x_\"", "+", "cat", "]", ",", "locals", "(", ")", "[", "\"y_\"", "+", "cat", "]", "\n", "print", "(", "cat", ",", "\"x: \"", ",", "_x", ".", "shape", ",", "\"y:\"", ",", "_y", ".", "shape", ")", "\n", "np", ".", "savez_compressed", "(", "\n", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "f\"{cat}.npz\"", ")", ",", "\n", "x", "=", "_x", ",", "\n", "y", "=", "_y", ",", "\n", "x_offsets", "=", "x_offsets", ".", "reshape", "(", "list", "(", "x_offsets", ".", "shape", ")", "+", "[", "1", "]", ")", ",", "\n", "y_offsets", "=", "y_offsets", ".", "reshape", "(", "list", "(", "y_offsets", ".", "shape", ")", "+", "[", "1", "]", ")", ",", "\n", ")", "\n", "\n", "", "pickle", ".", "dump", "(", "_max", ",", "open", "(", "\"datasets/PEMS04/max.pkl\"", ",", "'wb'", ")", ")", "\n", "pickle", ".", "dump", "(", "_min", ",", "open", "(", "\"datasets/PEMS04/min.pkl\"", ",", "'wb'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.PEMS08.generate_adj_mx.get_adjacency_matrix": [[5, 51], ["numpy.load", "numpy.zeros", "numpy.zeros", "int", "int", "int", "int", "open", "open", "f.readline", "csv.reader", "open", "f.readline", "csv.reader", "int", "enumerate", "len", "int", "int", "float", "len", "int", "int", "float", "f.read().strip().split", "f.read().strip", "f.read"], "function", ["None"], ["def", "get_adjacency_matrix", "(", "distance_df_filename", ",", "num_of_vertices", ",", "id_filename", "=", "None", ")", ":", "\n", "    ", "'''\n    Parameters\n    ----------\n    distance_df_filename: str, path of the csv file contains edges information\n\n    num_of_vertices: int, the number of vertices\n\n    Returns\n    ----------\n    A: np.ndarray, adjacency matrix\n\n    '''", "\n", "if", "'npy'", "in", "distance_df_filename", ":", "\n", "        ", "adj_mx", "=", "np", ".", "load", "(", "distance_df_filename", ")", "\n", "return", "adj_mx", ",", "None", "\n", "", "else", ":", "\n", "        ", "A", "=", "np", ".", "zeros", "(", "(", "int", "(", "num_of_vertices", ")", ",", "int", "(", "num_of_vertices", ")", ")", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "distaneA", "=", "np", ".", "zeros", "(", "(", "int", "(", "num_of_vertices", ")", ",", "int", "(", "num_of_vertices", ")", ")", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "# distance file\u4e2d\u7684id\u5e76\u4e0d\u662f\u4ece0\u5f00\u59cb\u7684 \u6240\u4ee5\u8981\u8fdb\u884c\u91cd\u65b0\u7684\u6620\u5c04\uff1bid_filename\u662f\u8282\u70b9\u7684\u987a\u5e8f", "\n", "if", "id_filename", ":", "\n", "            ", "with", "open", "(", "id_filename", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "id_dict", "=", "{", "int", "(", "i", ")", ":", "idx", "for", "idx", ",", "i", "in", "enumerate", "(", "f", ".", "read", "(", ")", ".", "strip", "(", ")", ".", "split", "(", "'\\n'", ")", ")", "}", "# \u628a\u8282\u70b9id\uff08idx\uff09\u6620\u5c04\u6210\u4ece0\u5f00\u59cb\u7684\u7d22\u5f15", "\n", "", "with", "open", "(", "distance_df_filename", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "f", ".", "readline", "(", ")", "# \u7565\u8fc7\u8868\u5934\u90a3\u4e00\u884c", "\n", "reader", "=", "csv", ".", "reader", "(", "f", ")", "\n", "for", "row", "in", "reader", ":", "\n", "                    ", "if", "len", "(", "row", ")", "!=", "3", ":", "\n", "                        ", "continue", "\n", "", "i", ",", "j", ",", "distance", "=", "int", "(", "row", "[", "0", "]", ")", ",", "int", "(", "row", "[", "1", "]", ")", ",", "float", "(", "row", "[", "2", "]", ")", "\n", "A", "[", "id_dict", "[", "i", "]", ",", "id_dict", "[", "j", "]", "]", "=", "1", "\n", "distaneA", "[", "id_dict", "[", "i", "]", ",", "id_dict", "[", "j", "]", "]", "=", "distance", "\n", "", "", "return", "A", ",", "distaneA", "\n", "", "else", ":", "# distance file\u4e2d\u7684id\u76f4\u63a5\u4ece0\u5f00\u59cb", "\n", "            ", "with", "open", "(", "distance_df_filename", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "f", ".", "readline", "(", ")", "\n", "reader", "=", "csv", ".", "reader", "(", "f", ")", "\n", "for", "row", "in", "reader", ":", "\n", "                    ", "if", "len", "(", "row", ")", "!=", "3", ":", "\n", "                        ", "continue", "\n", "", "i", ",", "j", ",", "distance", "=", "int", "(", "row", "[", "0", "]", ")", ",", "int", "(", "row", "[", "1", "]", ")", ",", "float", "(", "row", "[", "2", "]", ")", "\n", "A", "[", "i", ",", "j", "]", "=", "1", "\n", "distaneA", "[", "i", ",", "j", "]", "=", "distance", "\n", "", "", "return", "A", ",", "distaneA", "\n", "\n"]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.PEMS08.generate_adj_mx.get_adjacency_matrix_2direction": [[101, 151], ["numpy.load", "numpy.zeros", "numpy.zeros", "int", "int", "int", "int", "open", "open", "f.readline", "csv.reader", "open", "f.readline", "csv.reader", "int", "enumerate", "len", "int", "int", "float", "len", "int", "int", "float", "f.read().strip().split", "f.read().strip", "f.read"], "function", ["None"], ["", "", "", "def", "get_adjacency_matrix_2direction", "(", "distance_df_filename", ",", "num_of_vertices", ",", "id_filename", "=", "None", ")", ":", "\n", "    ", "'''\n    Parameters\n    ----------\n    distance_df_filename: str, path of the csv file contains edges information\n\n    num_of_vertices: int, the number of vertices\n\n    Returns\n    ----------\n    A: np.ndarray, adjacency matrix\n\n    '''", "\n", "if", "'npy'", "in", "distance_df_filename", ":", "\n", "        ", "adj_mx", "=", "np", ".", "load", "(", "distance_df_filename", ")", "\n", "return", "adj_mx", ",", "None", "\n", "", "else", ":", "\n", "        ", "A", "=", "np", ".", "zeros", "(", "(", "int", "(", "num_of_vertices", ")", ",", "int", "(", "num_of_vertices", ")", ")", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "distaneA", "=", "np", ".", "zeros", "(", "(", "int", "(", "num_of_vertices", ")", ",", "int", "(", "num_of_vertices", ")", ")", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "# distance file\u4e2d\u7684id\u5e76\u4e0d\u662f\u4ece0\u5f00\u59cb\u7684 \u6240\u4ee5\u8981\u8fdb\u884c\u91cd\u65b0\u7684\u6620\u5c04\uff1bid_filename\u662f\u8282\u70b9\u7684\u987a\u5e8f", "\n", "if", "id_filename", ":", "\n", "            ", "with", "open", "(", "id_filename", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "id_dict", "=", "{", "int", "(", "i", ")", ":", "idx", "for", "idx", ",", "i", "in", "enumerate", "(", "f", ".", "read", "(", ")", ".", "strip", "(", ")", ".", "split", "(", "'\\n'", ")", ")", "}", "# \u628a\u8282\u70b9id\uff08idx\uff09\u6620\u5c04\u6210\u4ece0\u5f00\u59cb\u7684\u7d22\u5f15", "\n", "", "with", "open", "(", "distance_df_filename", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "f", ".", "readline", "(", ")", "# \u7565\u8fc7\u8868\u5934\u90a3\u4e00\u884c", "\n", "reader", "=", "csv", ".", "reader", "(", "f", ")", "\n", "for", "row", "in", "reader", ":", "\n", "                    ", "if", "len", "(", "row", ")", "!=", "3", ":", "\n", "                        ", "continue", "\n", "", "i", ",", "j", ",", "distance", "=", "int", "(", "row", "[", "0", "]", ")", ",", "int", "(", "row", "[", "1", "]", ")", ",", "float", "(", "row", "[", "2", "]", ")", "\n", "A", "[", "id_dict", "[", "i", "]", ",", "id_dict", "[", "j", "]", "]", "=", "1", "\n", "A", "[", "id_dict", "[", "j", "]", ",", "id_dict", "[", "i", "]", "]", "=", "1", "\n", "distaneA", "[", "id_dict", "[", "i", "]", ",", "id_dict", "[", "j", "]", "]", "=", "distance", "\n", "distaneA", "[", "id_dict", "[", "j", "]", ",", "id_dict", "[", "i", "]", "]", "=", "distance", "\n", "", "", "return", "A", ",", "distaneA", "\n", "", "else", ":", "# distance file\u4e2d\u7684id\u76f4\u63a5\u4ece0\u5f00\u59cb", "\n", "            ", "with", "open", "(", "distance_df_filename", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "f", ".", "readline", "(", ")", "\n", "reader", "=", "csv", ".", "reader", "(", "f", ")", "\n", "for", "row", "in", "reader", ":", "\n", "                    ", "if", "len", "(", "row", ")", "!=", "3", ":", "\n", "                        ", "continue", "\n", "", "i", ",", "j", ",", "distance", "=", "int", "(", "row", "[", "0", "]", ")", ",", "int", "(", "row", "[", "1", "]", ")", ",", "float", "(", "row", "[", "2", "]", ")", "\n", "A", "[", "i", ",", "j", "]", "=", "1", "\n", "A", "[", "j", ",", "i", "]", "=", "1", "\n", "distaneA", "[", "i", ",", "j", "]", "=", "distance", "\n", "distaneA", "[", "j", ",", "i", "]", "=", "distance", "\n", "", "", "return", "A", ",", "distaneA", "\n", "\n"]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.PEMS-BAY.generate_training_data.generate_graph_seq2seq_io_data": [[13, 73], ["print", "numpy.expand_dims", "numpy.concatenate", "abs", "abs", "range", "numpy.stack", "numpy.stack", "numpy.tile().transpose", "feature_list.append", "numpy.tile().transpose", "feature_list.append", "min", "np.stack.append", "np.stack.append", "numpy.timedelta64", "list", "torch.tensor().unsqueeze().expand().unsqueeze().numpy", "torch.tensor().unsqueeze().expand().unsqueeze().numpy", "feature_list.append", "list", "torch.tensor().unsqueeze().expand().unsqueeze().numpy", "torch.tensor().unsqueeze().expand().unsqueeze().numpy", "feature_list.append", "abs", "df.index.values.astype", "numpy.tile", "range", "numpy.tile", "range", "max", "torch.tensor().unsqueeze().expand().unsqueeze", "torch.tensor().unsqueeze().expand().unsqueeze", "torch.tensor().unsqueeze().expand().unsqueeze", "torch.tensor().unsqueeze().expand().unsqueeze", "torch.tensor().unsqueeze().expand", "torch.tensor().unsqueeze().expand", "torch.tensor().unsqueeze().expand", "torch.tensor().unsqueeze().expand", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "function", ["None"], ["\n", "\n", "num_feat", "=", "1", "\n", "\n", "# https://github.com/guoshnBJTU/ASTGNN/blob/main/prepareData.py#L110", "\n", "def", "MinMaxnormalization", "(", "train", ",", "val", ",", "test", ")", ":", "\n", "    ", "'''\n    Parameters\n    ----------\n    train, val, test: np.ndarray (B,N,F,T)\n    Returns\n    ----------\n    stats: dict, two keys: mean and std\n    train_norm, val_norm, test_norm: np.ndarray,\n                                     shape is the same as original\n    '''", "\n", "\n", "assert", "train", ".", "shape", "[", "1", ":", "]", "==", "val", ".", "shape", "[", "1", ":", "]", "and", "val", ".", "shape", "[", "1", ":", "]", "==", "test", ".", "shape", "[", "1", ":", "]", "# ensure the num of nodes is the same", "\n", "\n", "_max", "=", "train", ".", "max", "(", "axis", "=", "(", "0", ",", "1", ",", "3", ")", ",", "keepdims", "=", "True", ")", "\n", "_min", "=", "train", ".", "min", "(", "axis", "=", "(", "0", ",", "1", ",", "3", ")", ",", "keepdims", "=", "True", ")", "\n", "\n", "print", "(", "'_max.shape:'", ",", "_max", ".", "shape", ")", "\n", "print", "(", "'_min.shape:'", ",", "_min", ".", "shape", ")", "\n", "\n", "def", "normalize", "(", "x", ")", ":", "\n", "        ", "x", "=", "1.", "*", "(", "x", "-", "_min", ")", "/", "(", "_max", "-", "_min", ")", "\n", "x", "=", "2.", "*", "x", "-", "1.", "\n", "return", "x", "\n", "\n", "", "train_norm", "=", "normalize", "(", "train", ")", "\n", "val_norm", "=", "normalize", "(", "val", ")", "\n", "test_norm", "=", "normalize", "(", "test", ")", "\n", "\n", "return", "{", "'_max'", ":", "_max", ",", "'_min'", ":", "_min", "}", ",", "train_norm", ",", "val_norm", ",", "test_norm", "\n", "\n", "\n", "", "def", "generate_graph_seq2seq_io_data", "(", "\n", "data", ",", "x_offsets", ",", "y_offsets", ",", "add_time_in_day", "=", "True", ",", "add_day_in_week", "=", "True", ",", "scaler", "=", "None", "\n", ")", ":", "\n", "    ", "\"\"\"\n    Generate samples from\n    :param df:\n    :param x_offsets:\n    :param y_offsets:\n    :param add_time_in_day:\n    :param add_day_in_week:\n    :param scaler:\n    :return:\n    # x: (epoch_size, input_length, num_nodes, input_dim)\n    # y: (epoch_size, output_length, num_nodes, output_dim)\n    \"\"\"", "\n", "num_samples", ",", "num_nodes", ",", "_", "=", "data", ".", "shape", "\n", "# add_time_in_day = False", "\n", "# add_day_in_week = False", "\n", "feature_list", "=", "[", "data", "[", "...", ",", "0", ":", "num_feat", "]", "]", "\n", "if", "add_time_in_day", ":", "\n", "# numerical time_in_day", "\n", "        ", "time_ind", "=", "[", "i", "%", "288", "/", "288", "for", "i", "in", "range", "(", "num_samples", ")", "]", "\n", "time_ind", "=", "np", ".", "array", "(", "time_ind", ")", "\n", "time_in_day", "=", "np", ".", "tile", "(", "time_ind", ",", "[", "1", ",", "num_nodes", ",", "1", "]", ")", ".", "transpose", "(", "(", "2", ",", "1", ",", "0", ")", ")", "\n"]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.PEMS-BAY.generate_training_data.generate_train_val_test": [[75, 114], ["pandas.read_hdf", "numpy.sort", "numpy.sort", "generate_training_data.generate_graph_seq2seq_io_data", "print", "round", "round", "numpy.concatenate", "numpy.arange", "print", "numpy.savez_compressed", "os.path.join", "numpy.arange", "locals", "locals", "np.sort.reshape", "np.sort.reshape", "list", "list"], "function", ["home.repos.pwc.inspect_result.zezhishao_d2stgnn.PEMS-BAY.generate_training_data.generate_graph_seq2seq_io_data"], ["\n", "", "if", "add_day_in_week", ":", "\n", "# numerical day_in_week", "\n", "        ", "day_in_week", "=", "[", "(", "i", "//", "288", ")", "%", "7", "for", "i", "in", "range", "(", "num_samples", ")", "]", "\n", "day_in_week", "=", "np", ".", "array", "(", "day_in_week", ")", "\n", "day_in_week", "=", "np", ".", "tile", "(", "day_in_week", ",", "[", "1", ",", "num_nodes", ",", "1", "]", ")", ".", "transpose", "(", "(", "2", ",", "1", ",", "0", ")", ")", "\n", "feature_list", ".", "append", "(", "day_in_week", ")", "\n", "\n", "", "data", "=", "np", ".", "concatenate", "(", "feature_list", ",", "axis", "=", "-", "1", ")", "\n", "x", ",", "y", "=", "[", "]", ",", "[", "]", "\n", "min_t", "=", "abs", "(", "min", "(", "x_offsets", ")", ")", "\n", "max_t", "=", "abs", "(", "num_samples", "-", "abs", "(", "max", "(", "y_offsets", ")", ")", ")", "# Exclusive", "\n", "for", "t", "in", "range", "(", "min_t", ",", "max_t", ")", ":", "# t is the index of the last observation.", "\n", "        ", "x", ".", "append", "(", "data", "[", "t", "+", "x_offsets", ",", "...", "]", ")", "\n", "y", ".", "append", "(", "data", "[", "t", "+", "y_offsets", ",", "...", "]", ")", "\n", "", "x", "=", "np", ".", "stack", "(", "x", ",", "axis", "=", "0", ")", "\n", "y", "=", "np", ".", "stack", "(", "y", ",", "axis", "=", "0", ")", "\n", "return", "x", ",", "y", "\n", "\n", "\n", "", "def", "generate_train_val_test", "(", "args", ")", ":", "\n", "    ", "seq_length_x", ",", "seq_length_y", "=", "args", ".", "seq_length_x", ",", "args", ".", "seq_length_y", "\n", "data", "=", "np", ".", "load", "(", "args", ".", "traffic_df_filename", ")", "[", "'data'", "]", "\n", "\n", "# 0 is the latest observed sample.", "\n", "x_offsets", "=", "np", ".", "sort", "(", "np", ".", "concatenate", "(", "(", "np", ".", "arange", "(", "-", "(", "seq_length_x", "-", "1", ")", ",", "1", ",", "1", ")", ",", ")", ")", ")", "\n", "# Predict the next one hour", "\n", "y_offsets", "=", "np", ".", "sort", "(", "np", ".", "arange", "(", "args", ".", "y_start", ",", "(", "seq_length_y", "+", "1", ")", ",", "1", ")", ")", "\n", "# x: (num_samples, input_length, num_nodes, input_dim)", "\n", "# y: (num_samples, output_length, num_nodes, output_dim)", "\n", "x", ",", "y", "=", "generate_graph_seq2seq_io_data", "(", "\n", "data", ",", "\n", "x_offsets", "=", "x_offsets", ",", "\n", "y_offsets", "=", "y_offsets", ",", "\n", "add_time_in_day", "=", "True", ",", "\n", "add_day_in_week", "=", "args", ".", "dow", ",", "\n", ")", "\n", "\n", "print", "(", "\"x shape: \"", ",", "x", ".", "shape", ",", "\", y shape: \"", ",", "y", ".", "shape", ")", "\n", "# Write the data into npz file.", "\n"]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.models.trainer.trainer.__init__": [[34, 64], ["torch.Adam", "torch.Adam", "trainer.trainer.model.parameters", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "scaler", ",", "model", ",", "**", "optim_args", ")", ":", "\n", "        ", "self", ".", "model", "=", "model", "# init model", "\n", "self", ".", "scaler", "=", "scaler", "# data scaler", "\n", "self", ".", "output_seq_len", "=", "optim_args", "[", "'output_seq_len'", "]", "# output sequence length", "\n", "self", ".", "print_model_structure", "=", "optim_args", "[", "'print_model'", "]", "\n", "\n", "# training strategy parametes", "\n", "## adam optimizer", "\n", "self", ".", "lrate", "=", "optim_args", "[", "'lrate'", "]", "\n", "self", ".", "wdecay", "=", "optim_args", "[", "'wdecay'", "]", "\n", "self", ".", "eps", "=", "optim_args", "[", "'eps'", "]", "\n", "## learning rate scheduler", "\n", "self", ".", "if_lr_scheduler", "=", "optim_args", "[", "'lr_schedule'", "]", "\n", "self", ".", "lr_sche_steps", "=", "optim_args", "[", "'lr_sche_steps'", "]", "\n", "self", ".", "lr_decay_ratio", "=", "optim_args", "[", "'lr_decay_ratio'", "]", "\n", "## curriculum learning", "\n", "self", ".", "if_cl", "=", "optim_args", "[", "'if_cl'", "]", "\n", "self", ".", "cl_steps", "=", "optim_args", "[", "'cl_steps'", "]", "\n", "self", ".", "cl_len", "=", "0", "if", "self", ".", "if_cl", "else", "self", ".", "output_seq_len", "\n", "## warmup", "\n", "self", ".", "warm_steps", "=", "optim_args", "[", "'warm_steps'", "]", "\n", "\n", "# Adam optimizer", "\n", "self", ".", "optimizer", "=", "optim", ".", "Adam", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "lrate", ",", "weight_decay", "=", "self", ".", "wdecay", ",", "eps", "=", "self", ".", "eps", ")", "\n", "# learning rate scheduler", "\n", "self", ".", "lr_scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "self", ".", "optimizer", ",", "milestones", "=", "self", ".", "lr_sche_steps", ",", "gamma", "=", "self", ".", "lr_decay_ratio", ")", "if", "self", ".", "if_lr_scheduler", "else", "None", "\n", "\n", "# loss", "\n", "self", ".", "loss", "=", "masked_mae", "\n", "self", ".", "clip", "=", "5", "# gradient clip", "\n", "\n"]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.models.trainer.trainer.set_resume_lr_and_cl": [[65, 83], ["range", "print", "int"], "methods", ["None"], ["", "def", "set_resume_lr_and_cl", "(", "self", ",", "epoch_num", ",", "batch_num", ")", ":", "\n", "        ", "if", "batch_num", "==", "0", ":", "\n", "            ", "return", "\n", "", "else", ":", "\n", "            ", "for", "_", "in", "range", "(", "batch_num", ")", ":", "\n", "# curriculum learning", "\n", "                ", "if", "_", "<", "self", ".", "warm_steps", ":", "# warmupping", "\n", "                    ", "self", ".", "cl_len", "=", "self", ".", "output_seq_len", "\n", "", "elif", "_", "==", "self", ".", "warm_steps", ":", "\n", "# init curriculum learning", "\n", "                    ", "self", ".", "cl_len", "=", "1", "\n", "for", "param_group", "in", "self", ".", "optimizer", ".", "param_groups", ":", "\n", "                        ", "param_group", "[", "\"lr\"", "]", "=", "self", ".", "lrate", "\n", "", "", "else", ":", "\n", "# begin curriculum learning", "\n", "                    ", "if", "(", "_", "-", "self", ".", "warm_steps", ")", "%", "self", ".", "cl_steps", "==", "0", "and", "self", ".", "cl_len", "<", "self", ".", "output_seq_len", ":", "\n", "                        ", "self", ".", "cl_len", "+=", "int", "(", "self", ".", "if_cl", ")", "\n", "", "", "", "print", "(", "\"resume training from epoch{0}, where learn_rate={1} and curriculum learning length={2}\"", ".", "format", "(", "epoch_num", ",", "self", ".", "lrate", ",", "self", ".", "cl_len", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.models.trainer.trainer.print_model": [[84, 96], ["torchinfo.torchinfo.summary", "trainer.trainer.model.named_parameters", "print", "int", "print"], "methods", ["None"], ["", "", "def", "print_model", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "self", ".", "print_model_structure", "and", "int", "(", "kwargs", "[", "'batch_num'", "]", ")", "==", "0", ":", "\n", "            ", "summary", "(", "self", ".", "model", ",", "input_data", "=", "input", ")", "\n", "parameter_num", "=", "0", "\n", "for", "name", ",", "param", "in", "self", ".", "model", ".", "named_parameters", "(", ")", ":", "\n", "                ", "if", "param", ".", "requires_grad", ":", "\n", "                    ", "print", "(", "name", ",", "param", ".", "shape", ")", "\n", "", "tmp", "=", "1", "\n", "for", "_", "in", "param", ".", "shape", ":", "\n", "                    ", "tmp", "=", "tmp", "*", "_", "\n", "", "parameter_num", "+=", "tmp", "\n", "", "print", "(", "\"Parameter size: {0}\"", ".", "format", "(", "parameter_num", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.models.trainer.trainer.train": [[97, 142], ["trainer.trainer.model.train", "trainer.trainer.optimizer.zero_grad", "trainer.trainer.print_model", "trainer.trainer.model", "output.transpose.transpose.transpose", "loss.backward", "trainer.trainer.optimizer.step", "models.losses.masked_mape", "models.losses.masked_rmse", "trainer.trainer.scaler().transpose().squeeze", "trainer.trainer.scaler().transpose().squeeze", "trainer.trainer.loss", "trainer.trainer.scaler.inverse_transform", "trainer.trainer.scaler.inverse_transform", "trainer.trainer.loss", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "trainer.trainer.item", "models.losses.masked_mape.item", "models.losses.masked_rmse.item", "print", "trainer.trainer.model.parameters", "int", "trainer.trainer.scaler().transpose", "trainer.trainer.scaler().transpose", "trainer.trainer.scaler", "trainer.trainer.scaler", "output.transpose.transpose.transpose().unsqueeze", "trainer.trainer.transpose().unsqueeze", "output.transpose.transpose.transpose", "trainer.trainer.transpose"], "methods", ["home.repos.pwc.inspect_result.zezhishao_d2stgnn.models.trainer.trainer.train", "home.repos.pwc.inspect_result.zezhishao_d2stgnn.models.trainer.trainer.print_model", "home.repos.pwc.inspect_result.zezhishao_d2stgnn.models.losses.masked_mape", "home.repos.pwc.inspect_result.zezhishao_d2stgnn.models.losses.masked_rmse", "home.repos.pwc.inspect_result.zezhishao_d2stgnn.utils.load_data.StandardScaler.inverse_transform", "home.repos.pwc.inspect_result.zezhishao_d2stgnn.utils.load_data.StandardScaler.inverse_transform"], ["", "", "def", "train", "(", "self", ",", "input", ",", "real_val", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "model", ".", "train", "(", ")", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "self", ".", "print_model", "(", "**", "kwargs", ")", "\n", "\n", "output", "=", "self", ".", "model", "(", "input", ")", "\n", "output", "=", "output", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n", "# curriculum learning", "\n", "if", "kwargs", "[", "'batch_num'", "]", "<", "self", ".", "warm_steps", ":", "# warmupping", "\n", "            ", "self", ".", "cl_len", "=", "self", ".", "output_seq_len", "\n", "", "elif", "kwargs", "[", "'batch_num'", "]", "==", "self", ".", "warm_steps", ":", "\n", "# init curriculum learning", "\n", "            ", "self", ".", "cl_len", "=", "1", "\n", "for", "param_group", "in", "self", ".", "optimizer", ".", "param_groups", ":", "\n", "                ", "param_group", "[", "\"lr\"", "]", "=", "self", ".", "lrate", "\n", "", "print", "(", "\"======== Start curriculum learning... reset the learning rate to {0}. ========\"", ".", "format", "(", "self", ".", "lrate", ")", ")", "\n", "", "else", ":", "\n", "# begin curriculum learning", "\n", "            ", "if", "(", "kwargs", "[", "'batch_num'", "]", "-", "self", ".", "warm_steps", ")", "%", "self", ".", "cl_steps", "==", "0", "and", "self", ".", "cl_len", "<=", "self", ".", "output_seq_len", ":", "\n", "                ", "self", ".", "cl_len", "+=", "int", "(", "self", ".", "if_cl", ")", "\n", "# scale data and calculate loss", "\n", "", "", "if", "kwargs", "[", "'_max'", "]", "is", "not", "None", ":", "# traffic flow", "\n", "            ", "predict", "=", "self", ".", "scaler", "(", "output", ".", "transpose", "(", "1", ",", "2", ")", ".", "unsqueeze", "(", "-", "1", ")", ",", "kwargs", "[", "\"_max\"", "]", "[", "0", ",", "0", ",", "0", ",", "0", "]", ",", "kwargs", "[", "\"_min\"", "]", "[", "0", ",", "0", ",", "0", ",", "0", "]", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "real_val", "=", "self", ".", "scaler", "(", "real_val", ".", "transpose", "(", "1", ",", "2", ")", ".", "unsqueeze", "(", "-", "1", ")", ",", "kwargs", "[", "\"_max\"", "]", "[", "0", ",", "0", ",", "0", ",", "0", "]", ",", "kwargs", "[", "\"_min\"", "]", "[", "0", ",", "0", ",", "0", ",", "0", "]", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "mae_loss", "=", "self", ".", "loss", "(", "predict", "[", ":", ",", ":", "self", ".", "cl_len", ",", ":", "]", ",", "real_val", "[", ":", ",", ":", "self", ".", "cl_len", ",", ":", "]", ")", "\n", "", "else", ":", "\n", "## inverse transform for both predict and real value.", "\n", "            ", "predict", "=", "self", ".", "scaler", ".", "inverse_transform", "(", "output", ")", "\n", "real_val", "=", "self", ".", "scaler", ".", "inverse_transform", "(", "real_val", "[", ":", ",", ":", ",", ":", ",", "0", "]", ")", "\n", "## loss", "\n", "mae_loss", "=", "self", ".", "loss", "(", "predict", "[", ":", ",", ":", "self", ".", "cl_len", ",", ":", "]", ",", "real_val", "[", ":", ",", ":", "self", ".", "cl_len", ",", ":", "]", ",", "0", ")", "\n", "", "loss", "=", "mae_loss", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "# gradient clip and optimization", "\n", "if", "self", ".", "clip", "is", "not", "None", ":", "\n", "            ", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "self", ".", "clip", ")", "\n", "", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "# metrics", "\n", "mape", "=", "masked_mape", "(", "predict", ",", "real_val", ",", "0.0", ")", "\n", "rmse", "=", "masked_rmse", "(", "predict", ",", "real_val", ",", "0.0", ")", "\n", "return", "mae_loss", ".", "item", "(", ")", ",", "mape", ".", "item", "(", ")", ",", "rmse", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.models.trainer.trainer.eval": [[143, 181], ["trainer.trainer.model.eval", "enumerate", "numpy.mean", "numpy.mean", "numpy.mean", "dataloader[].get_iterator", "utils.train.data_reshaper", "utils.train.data_reshaper", "trainer.trainer.model", "output.transpose.transpose.transpose", "trainer.trainer.loss().item", "models.losses.masked_mape().item", "models.losses.masked_rmse().item", "print", "valid_loss.append", "valid_mape.append", "valid_rmse.append", "trainer.trainer.scaler", "trainer.trainer.scaler", "trainer.trainer.scaler.inverse_transform", "trainer.trainer.scaler.inverse_transform", "output.transpose.transpose.transpose().unsqueeze", "utils.train.data_reshaper.transpose().unsqueeze", "trainer.trainer.loss", "models.losses.masked_mape", "models.losses.masked_rmse", "output.transpose.transpose.transpose", "utils.train.data_reshaper.transpose"], "methods", ["home.repos.pwc.inspect_result.zezhishao_d2stgnn.models.trainer.trainer.eval", "home.repos.pwc.inspect_result.zezhishao_d2stgnn.dataloader.dataloader.DataLoader.get_iterator", "home.repos.pwc.inspect_result.zezhishao_d2stgnn.utils.train.data_reshaper", "home.repos.pwc.inspect_result.zezhishao_d2stgnn.utils.train.data_reshaper", "home.repos.pwc.inspect_result.zezhishao_d2stgnn.utils.load_data.StandardScaler.inverse_transform", "home.repos.pwc.inspect_result.zezhishao_d2stgnn.utils.load_data.StandardScaler.inverse_transform", "home.repos.pwc.inspect_result.zezhishao_d2stgnn.models.losses.masked_mape", "home.repos.pwc.inspect_result.zezhishao_d2stgnn.models.losses.masked_rmse"], ["", "def", "eval", "(", "self", ",", "device", ",", "dataloader", ",", "model_name", ",", "**", "kwargs", ")", ":", "\n", "# val a epoch", "\n", "        ", "valid_loss", "=", "[", "]", "\n", "valid_mape", "=", "[", "]", "\n", "valid_rmse", "=", "[", "]", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "for", "itera", ",", "(", "x", ",", "y", ")", "in", "enumerate", "(", "dataloader", "[", "'val_loader'", "]", ".", "get_iterator", "(", ")", ")", ":", "\n", "            ", "testx", "=", "data_reshaper", "(", "x", ",", "device", ")", "\n", "testy", "=", "data_reshaper", "(", "y", ",", "device", ")", "\n", "# for dstgnn", "\n", "output", "=", "self", ".", "model", "(", "testx", ")", "\n", "output", "=", "output", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n", "# scale data", "\n", "if", "kwargs", "[", "'_max'", "]", "is", "not", "None", ":", "# traffic flow", "\n", "## inverse transform for both predict and real value.", "\n", "                ", "predict", "=", "self", ".", "scaler", "(", "output", ".", "transpose", "(", "1", ",", "2", ")", ".", "unsqueeze", "(", "-", "1", ")", ",", "kwargs", "[", "\"_max\"", "]", "[", "0", ",", "0", ",", "0", ",", "0", "]", ",", "kwargs", "[", "\"_min\"", "]", "[", "0", ",", "0", ",", "0", ",", "0", "]", ")", "\n", "real_val", "=", "self", ".", "scaler", "(", "testy", ".", "transpose", "(", "1", ",", "2", ")", ".", "unsqueeze", "(", "-", "1", ")", ",", "kwargs", "[", "\"_max\"", "]", "[", "0", ",", "0", ",", "0", ",", "0", "]", ",", "kwargs", "[", "\"_min\"", "]", "[", "0", ",", "0", ",", "0", ",", "0", "]", ")", "\n", "", "else", ":", "\n", "                ", "predict", "=", "self", ".", "scaler", ".", "inverse_transform", "(", "output", ")", "\n", "real_val", "=", "self", ".", "scaler", ".", "inverse_transform", "(", "testy", "[", ":", ",", ":", ",", ":", ",", "0", "]", ")", "\n", "\n", "# metrics", "\n", "", "loss", "=", "self", ".", "loss", "(", "predict", ",", "real_val", ",", "0.0", ")", ".", "item", "(", ")", "\n", "mape", "=", "masked_mape", "(", "predict", ",", "real_val", ",", "0.0", ")", ".", "item", "(", ")", "\n", "rmse", "=", "masked_rmse", "(", "predict", ",", "real_val", ",", "0.0", ")", ".", "item", "(", ")", "\n", "\n", "print", "(", "\"test: {0}\"", ".", "format", "(", "loss", ")", ",", "end", "=", "'\\r'", ")", "\n", "\n", "valid_loss", ".", "append", "(", "loss", ")", "\n", "valid_mape", ".", "append", "(", "mape", ")", "\n", "valid_rmse", ".", "append", "(", "rmse", ")", "\n", "\n", "", "mvalid_loss", "=", "np", ".", "mean", "(", "valid_loss", ")", "\n", "mvalid_mape", "=", "np", ".", "mean", "(", "valid_mape", ")", "\n", "mvalid_rmse", "=", "np", ".", "mean", "(", "valid_rmse", ")", "\n", "\n", "return", "mvalid_loss", ",", "mvalid_mape", ",", "mvalid_rmse", "\n", "\n"]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.models.trainer.trainer.test": [[182, 243], ["model.eval", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "scaler.transpose", "enumerate", "torch.where", "torch.where", "torch.where", "torch.where", "range", "print", "dataloader[].get_iterator", "utils.train.data_reshaper", "utils.train.data_reshaper().transpose", "outputs.append", "y_list.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "scaler", "scaler", "scaler.inverse_transform", "log.format", "utils.train.save_model", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model", "scaler.squeeze", "scaler.inverse_transform.squeeze", "scaler.inverse_transform", "sklearn.metrics.mean_absolute_error", "models.losses.masked_rmse().item", "models.losses.masked_mape().item", "print", "amae.append", "amape.append", "armse.append", "models.losses.metric", "print", "amae.append", "amape.append", "armse.append", "numpy.mean", "numpy.mean", "utils.train.data_reshaper", "scaler.size", "scaler.size", "pred.cpu().numpy", "real.cpu().numpy", "log.format", "log.format", "numpy.mean", "models.losses.masked_rmse", "models.losses.masked_mape", "pred.cpu", "real.cpu"], "methods", ["home.repos.pwc.inspect_result.zezhishao_d2stgnn.models.trainer.trainer.eval", "home.repos.pwc.inspect_result.zezhishao_d2stgnn.dataloader.dataloader.DataLoader.get_iterator", "home.repos.pwc.inspect_result.zezhishao_d2stgnn.utils.train.data_reshaper", "home.repos.pwc.inspect_result.zezhishao_d2stgnn.utils.load_data.StandardScaler.inverse_transform", "home.repos.pwc.inspect_result.zezhishao_d2stgnn.utils.train.save_model", "home.repos.pwc.inspect_result.zezhishao_d2stgnn.utils.load_data.StandardScaler.inverse_transform", "home.repos.pwc.inspect_result.zezhishao_d2stgnn.models.losses.metric", "home.repos.pwc.inspect_result.zezhishao_d2stgnn.utils.train.data_reshaper", "home.repos.pwc.inspect_result.zezhishao_d2stgnn.models.losses.masked_rmse", "home.repos.pwc.inspect_result.zezhishao_d2stgnn.models.losses.masked_mape"], ["", "@", "staticmethod", "\n", "def", "test", "(", "model", ",", "save_path_resume", ",", "device", ",", "dataloader", ",", "scaler", ",", "model_name", ",", "save", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "# test", "\n", "        ", "model", ".", "eval", "(", ")", "\n", "outputs", "=", "[", "]", "\n", "realy", "=", "torch", ".", "Tensor", "(", "dataloader", "[", "'y_test'", "]", ")", ".", "to", "(", "device", ")", "\n", "realy", "=", "realy", ".", "transpose", "(", "1", ",", "2", ")", "\n", "y_list", "=", "[", "]", "\n", "for", "itera", ",", "(", "x", ",", "y", ")", "in", "enumerate", "(", "dataloader", "[", "'test_loader'", "]", ".", "get_iterator", "(", ")", ")", ":", "\n", "            ", "testx", "=", "data_reshaper", "(", "x", ",", "device", ")", "\n", "testy", "=", "data_reshaper", "(", "y", ",", "device", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "preds", "=", "model", "(", "testx", ")", "\n", "\n", "", "outputs", ".", "append", "(", "preds", ")", "\n", "y_list", ".", "append", "(", "testy", ")", "\n", "", "yhat", "=", "torch", ".", "cat", "(", "outputs", ",", "dim", "=", "0", ")", "[", ":", "realy", ".", "size", "(", "0", ")", ",", "...", "]", "\n", "y_list", "=", "torch", ".", "cat", "(", "y_list", ",", "dim", "=", "0", ")", "[", ":", "realy", ".", "size", "(", "0", ")", ",", "...", "]", "\n", "\n", "assert", "torch", ".", "where", "(", "y_list", "==", "realy", ")", "\n", "\n", "# scale data", "\n", "if", "kwargs", "[", "'_max'", "]", "is", "not", "None", ":", "# traffic flow", "\n", "            ", "realy", "=", "scaler", "(", "realy", ".", "squeeze", "(", "-", "1", ")", ",", "kwargs", "[", "\"_max\"", "]", "[", "0", ",", "0", ",", "0", ",", "0", "]", ",", "kwargs", "[", "\"_min\"", "]", "[", "0", ",", "0", ",", "0", ",", "0", "]", ")", "\n", "yhat", "=", "scaler", "(", "yhat", ".", "squeeze", "(", "-", "1", ")", ",", "kwargs", "[", "\"_max\"", "]", "[", "0", ",", "0", ",", "0", ",", "0", "]", ",", "kwargs", "[", "\"_min\"", "]", "[", "0", ",", "0", ",", "0", ",", "0", "]", ")", "\n", "", "else", ":", "\n", "            ", "realy", "=", "scaler", ".", "inverse_transform", "(", "realy", ")", "[", ":", ",", ":", ",", ":", ",", "0", "]", "\n", "yhat", "=", "scaler", ".", "inverse_transform", "(", "yhat", ")", "\n", "\n", "# summarize the results.", "\n", "", "amae", "=", "[", "]", "\n", "amape", "=", "[", "]", "\n", "armse", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "12", ")", ":", "\n", "# For horizon i, only calculate the metrics **at that time** slice here.", "\n", "            ", "pred", "=", "yhat", "[", ":", ",", ":", ",", "i", "]", "\n", "real", "=", "realy", "[", ":", ",", ":", ",", "i", "]", "\n", "if", "kwargs", "[", "'dataset_name'", "]", "==", "'PEMS04'", "or", "kwargs", "[", "'dataset_name'", "]", "==", "'PEMS08'", ":", "# traffic flow dataset follows mae metric used in ASTGNN.", "\n", "                ", "mae", "=", "mean_absolute_error", "(", "pred", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "real", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "rmse", "=", "masked_rmse", "(", "pred", ",", "real", ",", "0.0", ")", ".", "item", "(", ")", "\n", "mape", "=", "masked_mape", "(", "pred", ",", "real", ",", "0.0", ")", ".", "item", "(", ")", "\n", "log", "=", "'Evaluate best model on test data for horizon {:d}, Test MAE: {:.4f}, Test RMSE: {:.4f}, Test MAPE: {:.4f}'", "\n", "print", "(", "log", ".", "format", "(", "i", "+", "1", ",", "mae", ",", "rmse", ",", "mape", ")", ")", "\n", "amae", ".", "append", "(", "mae", ")", "\n", "amape", ".", "append", "(", "mape", ")", "\n", "armse", ".", "append", "(", "rmse", ")", "\n", "", "else", ":", "# traffic speed datasets follow the metrics released by GWNet and DCRNN.", "\n", "                ", "metrics", "=", "metric", "(", "pred", ",", "real", ")", "\n", "log", "=", "'Evaluate best model on test data for horizon {:d}, Test MAE: {:.4f}, Test RMSE: {:.4f}, Test MAPE: {:.4f}'", "\n", "print", "(", "log", ".", "format", "(", "i", "+", "1", ",", "metrics", "[", "0", "]", ",", "metrics", "[", "2", "]", ",", "metrics", "[", "1", "]", ")", ")", "\n", "amae", ".", "append", "(", "metrics", "[", "0", "]", ")", "# mae", "\n", "amape", ".", "append", "(", "metrics", "[", "1", "]", ")", "# mape", "\n", "armse", ".", "append", "(", "metrics", "[", "2", "]", ")", "# rmse", "\n", "\n", "", "", "log", "=", "'(On average over 12 horizons) Test MAE: {:.2f} | Test RMSE: {:.2f} | Test MAPE: {:.2f}% |'", "\n", "print", "(", "log", ".", "format", "(", "np", ".", "mean", "(", "amae", ")", ",", "np", ".", "mean", "(", "armse", ")", ",", "np", ".", "mean", "(", "amape", ")", "*", "100", ")", ")", "\n", "\n", "if", "save", ":", "\n", "            ", "save_model", "(", "model", ",", "save_path_resume", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.models.trainer.masked_mape_np": [[21, 32], ["numpy.errstate", "numpy.isnan", "np.not_equal.astype", "numpy.mean", "numpy.abs", "numpy.nan_to_num", "numpy.not_equal", "numpy.divide", "numpy.mean", "numpy.isnan", "numpy.subtract().astype", "numpy.subtract"], "function", ["None"], ["def", "masked_mape_np", "(", "y_true", ",", "y_pred", ",", "null_val", "=", "np", ".", "nan", ")", ":", "\n", "    ", "with", "np", ".", "errstate", "(", "divide", "=", "'ignore'", ",", "invalid", "=", "'ignore'", ")", ":", "\n", "        ", "if", "np", ".", "isnan", "(", "null_val", ")", ":", "\n", "            ", "mask", "=", "~", "np", ".", "isnan", "(", "y_true", ")", "\n", "", "else", ":", "\n", "            ", "mask", "=", "np", ".", "not_equal", "(", "y_true", ",", "null_val", ")", "\n", "", "mask", "=", "mask", ".", "astype", "(", "'float32'", ")", "\n", "mask", "/=", "np", ".", "mean", "(", "mask", ")", "\n", "mape", "=", "np", ".", "abs", "(", "np", ".", "divide", "(", "np", ".", "subtract", "(", "y_pred", ",", "y_true", ")", ".", "astype", "(", "'float32'", ")", ",", "y_true", ")", ")", "\n", "mape", "=", "np", ".", "nan_to_num", "(", "mask", "*", "mape", ")", "\n", "return", "np", ".", "mean", "(", "mape", ")", "*", "100", "\n", "\n"]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.models.model.DecoupleLayer.__init__": [[11, 16], ["torch.Module.__init__", "models.Decouple.estimation_gate.EstimationGate", "models.DiffusionBlock.DifBlock", "models.InherentBlock.InhBlock"], "methods", ["home.repos.pwc.inspect_result.zezhishao_d2stgnn.InherentBlock.forecast.Forecast.__init__"], ["    ", "def", "__init__", "(", "self", ",", "hidden_dim", ",", "fk_dim", "=", "256", ",", "first", "=", "False", ",", "**", "model_args", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "spatial_gate", "=", "EstimationGate", "(", "model_args", "[", "'node_hidden'", "]", ",", "model_args", "[", "'time_emb_dim'", "]", ",", "64", ",", "model_args", "[", "'seq_length'", "]", ")", "\n", "self", ".", "spa_layer", "=", "DifBlock", "(", "hidden_dim", ",", "fk_dim", "=", "fk_dim", ",", "**", "model_args", ")", "\n", "self", ".", "tem_layer", "=", "InhBlock", "(", "hidden_dim", ",", "fk_dim", "=", "fk_dim", ",", "first", "=", "first", ",", "**", "model_args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.models.model.DecoupleLayer.forward": [[17, 22], ["model.DecoupleLayer.spatial_gate", "model.DecoupleLayer.spa_layer", "model.DecoupleLayer.tem_layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "X", ",", "dynamic_graph", ",", "static_graph", ",", "E_u", ",", "E_d", ",", "T_D", ",", "D_W", ")", ":", "\n", "        ", "X_spa", "=", "self", ".", "spatial_gate", "(", "E_u", ",", "E_d", ",", "T_D", ",", "D_W", ",", "X", ")", "\n", "spa_backcast_seq_res", ",", "spa_forecast_hidden", "=", "self", ".", "spa_layer", "(", "X", "=", "X", ",", "X_spa", "=", "X_spa", ",", "dynamic_graph", "=", "dynamic_graph", ",", "static_graph", "=", "static_graph", ")", "\n", "tem_backcast_seq_res", ",", "tem_forecast_hidden", "=", "self", ".", "tem_layer", "(", "spa_backcast_seq_res", ")", "\n", "return", "tem_backcast_seq_res", ",", "spa_forecast_hidden", ",", "tem_forecast_hidden", "\n", "\n"]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.models.model.D2STGNN.__init__": [[24, 70], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "model.D2STGNN.reset_parameter", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "model.D2STGNN.layers.append", "models.DynamicGraphConv.DyGraphCons.DynamicGraphConstructor", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "model.DecoupleLayer", "model.DecoupleLayer"], "methods", ["home.repos.pwc.inspect_result.zezhishao_d2stgnn.InherentBlock.forecast.Forecast.__init__", "home.repos.pwc.inspect_result.zezhishao_d2stgnn.models.model.D2STGNN.reset_parameter"], ["    ", "def", "__init__", "(", "self", ",", "**", "model_args", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "# attributes", "\n", "self", ".", "_in_feat", "=", "model_args", "[", "'num_feat'", "]", "\n", "self", ".", "_hidden_dim", "=", "model_args", "[", "'num_hidden'", "]", "\n", "self", ".", "_node_dim", "=", "model_args", "[", "'node_hidden'", "]", "\n", "self", ".", "_forecast_dim", "=", "256", "\n", "self", ".", "_output_hidden", "=", "512", "\n", "self", ".", "_output_dim", "=", "model_args", "[", "'seq_length'", "]", "\n", "\n", "self", ".", "_num_nodes", "=", "model_args", "[", "'num_nodes'", "]", "\n", "self", ".", "_k_s", "=", "model_args", "[", "'k_s'", "]", "\n", "self", ".", "_k_t", "=", "model_args", "[", "'k_t'", "]", "\n", "self", ".", "_num_layers", "=", "5", "\n", "\n", "model_args", "[", "'use_pre'", "]", "=", "False", "\n", "model_args", "[", "'dy_graph'", "]", "=", "True", "\n", "model_args", "[", "'sta_graph'", "]", "=", "True", "\n", "\n", "self", ".", "_model_args", "=", "model_args", "\n", "\n", "# start embedding layer", "\n", "self", ".", "embedding", "=", "nn", ".", "Linear", "(", "self", ".", "_in_feat", ",", "self", ".", "_hidden_dim", ")", "\n", "\n", "# time embedding", "\n", "self", ".", "T_i_D_emb", "=", "nn", ".", "Parameter", "(", "torch", ".", "empty", "(", "288", ",", "model_args", "[", "'time_emb_dim'", "]", ")", ")", "\n", "self", ".", "D_i_W_emb", "=", "nn", ".", "Parameter", "(", "torch", ".", "empty", "(", "7", ",", "model_args", "[", "'time_emb_dim'", "]", ")", ")", "\n", "\n", "# Decoupled Spatial Temporal Layer", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", "[", "DecoupleLayer", "(", "self", ".", "_hidden_dim", ",", "fk_dim", "=", "self", ".", "_forecast_dim", ",", "first", "=", "True", ",", "**", "model_args", ")", "]", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "_num_layers", "-", "1", ")", ":", "\n", "            ", "self", ".", "layers", ".", "append", "(", "DecoupleLayer", "(", "self", ".", "_hidden_dim", ",", "fk_dim", "=", "self", ".", "_forecast_dim", ",", "**", "model_args", ")", ")", "\n", "\n", "# dynamic and static hidden graph constructor", "\n", "", "if", "model_args", "[", "'dy_graph'", "]", ":", "\n", "            ", "self", ".", "dynamic_graph_constructor", "=", "DynamicGraphConstructor", "(", "**", "model_args", ")", "\n", "\n", "# node embeddings", "\n", "", "self", ".", "node_emb_u", "=", "nn", ".", "Parameter", "(", "torch", ".", "empty", "(", "self", ".", "_num_nodes", ",", "self", ".", "_node_dim", ")", ")", "\n", "self", ".", "node_emb_d", "=", "nn", ".", "Parameter", "(", "torch", ".", "empty", "(", "self", ".", "_num_nodes", ",", "self", ".", "_node_dim", ")", ")", "\n", "\n", "# output layer", "\n", "self", ".", "out_fc_1", "=", "nn", ".", "Linear", "(", "self", ".", "_forecast_dim", ",", "self", ".", "_output_hidden", ")", "\n", "self", ".", "out_fc_2", "=", "nn", ".", "Linear", "(", "self", ".", "_output_hidden", ",", "model_args", "[", "'gap'", "]", ")", "\n", "\n", "self", ".", "reset_parameter", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.models.model.D2STGNN.reset_parameter": [[71, 76], ["torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_"], "methods", ["None"], ["", "def", "reset_parameter", "(", "self", ")", ":", "\n", "        ", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "node_emb_u", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "node_emb_d", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "T_i_D_emb", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "D_i_W_emb", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.models.model.D2STGNN._graph_constructor": [[77, 89], ["model.D2STGNN.dynamic_graph_constructor", "torch.softmax", "torch.softmax", "torch.softmax", "torch.relu", "torch.relu", "torch.relu", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm"], "methods", ["None"], ["", "def", "_graph_constructor", "(", "self", ",", "**", "inputs", ")", ":", "\n", "        ", "E_d", "=", "inputs", "[", "'E_d'", "]", "\n", "E_u", "=", "inputs", "[", "'E_u'", "]", "\n", "if", "self", ".", "_model_args", "[", "'sta_graph'", "]", ":", "\n", "            ", "static_graph", "=", "[", "F", ".", "softmax", "(", "F", ".", "relu", "(", "torch", ".", "mm", "(", "E_d", ",", "E_u", ".", "T", ")", ")", ",", "dim", "=", "1", ")", "]", "\n", "", "else", ":", "\n", "            ", "static_graph", "=", "[", "]", "\n", "", "if", "self", ".", "_model_args", "[", "'dy_graph'", "]", ":", "\n", "            ", "dynamic_graph", "=", "self", ".", "dynamic_graph_constructor", "(", "**", "inputs", ")", "\n", "", "else", ":", "\n", "            ", "dynamic_graph", "=", "[", "]", "\n", "", "return", "static_graph", ",", "dynamic_graph", "\n", "\n"]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.models.model.D2STGNN._prepare_inputs": [[90, 102], ["X[].type"], "methods", ["None"], ["", "def", "_prepare_inputs", "(", "self", ",", "X", ")", ":", "\n", "        ", "num_feat", "=", "self", ".", "_model_args", "[", "'num_feat'", "]", "\n", "# node embeddings", "\n", "node_emb_u", "=", "self", ".", "node_emb_u", "# [N, d]", "\n", "node_emb_d", "=", "self", ".", "node_emb_d", "# [N, d]", "\n", "# time slot embedding", "\n", "T_i_D", "=", "self", ".", "T_i_D_emb", "[", "(", "X", "[", ":", ",", ":", ",", ":", ",", "num_feat", "]", "*", "288", ")", ".", "type", "(", "torch", ".", "LongTensor", ")", "]", "# [B, L, N, d]", "\n", "D_i_W", "=", "self", ".", "D_i_W_emb", "[", "(", "X", "[", ":", ",", ":", ",", ":", ",", "num_feat", "+", "1", "]", ")", ".", "type", "(", "torch", ".", "LongTensor", ")", "]", "# [B, L, N, d]", "\n", "# traffic signals", "\n", "X", "=", "X", "[", ":", ",", ":", ",", ":", ",", ":", "num_feat", "]", "\n", "\n", "return", "X", ",", "node_emb_u", ",", "node_emb_d", ",", "T_i_D", ",", "D_i_W", "\n", "\n"]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.models.model.D2STGNN.forward": [[103, 139], ["model.D2STGNN._prepare_inputs", "model.D2STGNN._graph_constructor", "model.D2STGNN.embedding", "enumerate", "sum", "sum", "model.D2STGNN.out_fc_2", "forecast.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous().view", "layer", "spa_forecast_hidden_list.append", "tem_forecast_hidden_list.append", "torch.relu", "torch.relu", "torch.relu", "model.D2STGNN.out_fc_1", "forecast.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous", "torch.relu", "torch.relu", "torch.relu", "forecast.transpose().contiguous().view.transpose().contiguous().view.transpose"], "methods", ["home.repos.pwc.inspect_result.zezhishao_d2stgnn.models.model.D2STGNN._prepare_inputs", "home.repos.pwc.inspect_result.zezhishao_d2stgnn.models.model.D2STGNN._graph_constructor"], ["", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "        ", "r\"\"\"\n\n        Args:\n            X (Tensor): Input data with shape: [B, L, N, C]\n        Returns:\n\n        \"\"\"", "\n", "# ==================== Prepare Input Data ==================== #", "\n", "X", ",", "E_u", ",", "E_d", ",", "T_D", ",", "D_W", "=", "self", ".", "_prepare_inputs", "(", "X", ")", "\n", "\n", "# ========================= Construct Graphs ========================== #", "\n", "static_graph", ",", "dynamic_graph", "=", "self", ".", "_graph_constructor", "(", "E_u", "=", "E_u", ",", "E_d", "=", "E_d", ",", "X", "=", "X", ",", "T_D", "=", "T_D", ",", "D_W", "=", "D_W", ")", "\n", "\n", "# Start embedding layer", "\n", "X", "=", "self", ".", "embedding", "(", "X", ")", "\n", "\n", "spa_forecast_hidden_list", "=", "[", "]", "\n", "tem_forecast_hidden_list", "=", "[", "]", "\n", "\n", "tem_backcast_seq_res", "=", "X", "\n", "for", "index", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "            ", "tem_backcast_seq_res", ",", "spa_forecast_hidden", ",", "tem_forecast_hidden", "=", "layer", "(", "tem_backcast_seq_res", ",", "dynamic_graph", ",", "static_graph", ",", "E_u", ",", "E_d", ",", "T_D", ",", "D_W", ")", "\n", "spa_forecast_hidden_list", ".", "append", "(", "spa_forecast_hidden", ")", "\n", "tem_forecast_hidden_list", ".", "append", "(", "tem_forecast_hidden", ")", "\n", "\n", "# Output Layer", "\n", "", "spa_forecast_hidden", "=", "sum", "(", "spa_forecast_hidden_list", ")", "\n", "tem_forecast_hidden", "=", "sum", "(", "tem_forecast_hidden_list", ")", "\n", "forecast_hidden", "=", "spa_forecast_hidden", "+", "tem_forecast_hidden", "\n", "\n", "# regression layer", "\n", "forecast", "=", "self", ".", "out_fc_2", "(", "F", ".", "relu", "(", "self", ".", "out_fc_1", "(", "F", ".", "relu", "(", "forecast_hidden", ")", ")", ")", ")", "\n", "forecast", "=", "forecast", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", ".", "view", "(", "forecast", ".", "shape", "[", "0", "]", ",", "forecast", ".", "shape", "[", "2", "]", ",", "-", "1", ")", "\n", "\n", "return", "forecast", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.models.losses.masked_mse": [[5, 17], ["numpy.isnan", "torch.where.float", "torch.mean", "torch.where", "torch.where", "torch.mean", "torch.isnan", "torch.zeros_like", "torch.isnan", "torch.zeros_like", "torch.isnan"], "function", ["None"], ["def", "masked_mse", "(", "preds", ",", "labels", ",", "null_val", "=", "np", ".", "nan", ")", ":", "\n", "    ", "if", "np", ".", "isnan", "(", "null_val", ")", ":", "\n", "        ", "mask", "=", "~", "torch", ".", "isnan", "(", "labels", ")", "\n", "", "else", ":", "\n", "        ", "mask", "=", "(", "labels", "!=", "null_val", ")", "\n", "", "mask", "=", "mask", ".", "float", "(", ")", "\n", "mask", "/=", "torch", ".", "mean", "(", "(", "mask", ")", ")", "\n", "mask", "=", "torch", ".", "where", "(", "torch", ".", "isnan", "(", "mask", ")", ",", "torch", ".", "zeros_like", "(", "mask", ")", ",", "mask", ")", "\n", "loss", "=", "(", "preds", "-", "labels", ")", "**", "2", "\n", "loss", "=", "loss", "*", "mask", "\n", "loss", "=", "torch", ".", "where", "(", "torch", ".", "isnan", "(", "loss", ")", ",", "torch", ".", "zeros_like", "(", "loss", ")", ",", "loss", ")", "\n", "return", "torch", ".", "mean", "(", "loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.models.losses.masked_rmse": [[18, 20], ["torch.sqrt", "losses.masked_mse"], "function", ["home.repos.pwc.inspect_result.zezhishao_d2stgnn.models.losses.masked_mse"], ["", "def", "masked_rmse", "(", "preds", ",", "labels", ",", "null_val", "=", "np", ".", "nan", ")", ":", "\n", "    ", "return", "torch", ".", "sqrt", "(", "masked_mse", "(", "preds", "=", "preds", ",", "labels", "=", "labels", ",", "null_val", "=", "null_val", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.models.losses.masked_mae_loss": [[21, 29], ["mask.mean", "torch.abs", "torch.abs.mean"], "function", ["None"], ["", "def", "masked_mae_loss", "(", "y_pred", ",", "y_true", ")", ":", "\n", "    ", "mask", "=", "(", "y_true", "!=", "0", ")", ".", "float", "(", ")", "\n", "mask", "/=", "mask", ".", "mean", "(", ")", "\n", "loss", "=", "torch", ".", "abs", "(", "y_pred", "-", "y_true", ")", "\n", "loss", "=", "loss", "*", "mask", "\n", "# trick for nans: https://discuss.pytorch.org/t/how-to-set-nan-in-tensor-to-0/3918/3", "\n", "loss", "[", "loss", "!=", "loss", "]", "=", "0", "\n", "return", "loss", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.models.losses.masked_mae": [[30, 42], ["numpy.isnan", "torch.where.float", "torch.mean", "torch.where", "torch.abs", "torch.where", "torch.mean", "torch.isnan", "torch.zeros_like", "torch.isnan", "torch.zeros_like", "torch.isnan"], "function", ["None"], ["", "def", "masked_mae", "(", "preds", ",", "labels", ",", "null_val", "=", "np", ".", "nan", ")", ":", "\n", "    ", "if", "np", ".", "isnan", "(", "null_val", ")", ":", "\n", "        ", "mask", "=", "~", "torch", ".", "isnan", "(", "labels", ")", "\n", "", "else", ":", "\n", "        ", "mask", "=", "(", "labels", "!=", "null_val", ")", "\n", "", "mask", "=", "mask", ".", "float", "(", ")", "\n", "mask", "/=", "torch", ".", "mean", "(", "(", "mask", ")", ")", "\n", "mask", "=", "torch", ".", "where", "(", "torch", ".", "isnan", "(", "mask", ")", ",", "torch", ".", "zeros_like", "(", "mask", ")", ",", "mask", ")", "\n", "loss", "=", "torch", ".", "abs", "(", "preds", "-", "labels", ")", "\n", "loss", "=", "loss", "*", "mask", "\n", "loss", "=", "torch", ".", "where", "(", "torch", ".", "isnan", "(", "loss", ")", ",", "torch", ".", "zeros_like", "(", "loss", ")", ",", "loss", ")", "\n", "return", "torch", ".", "mean", "(", "loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.models.losses.masked_huber": [[43, 47], ["torch.nn.SmoothL1Loss", "torch.nn.SmoothL1Loss."], "function", ["None"], ["", "def", "masked_huber", "(", "preds", ",", "labels", ",", "null_val", "=", "np", ".", "nan", ")", ":", "\n", "    ", "crit", "=", "torch", ".", "nn", ".", "SmoothL1Loss", "(", ")", "\n", "# crit = torch.nn.MSELoss()", "\n", "return", "crit", "(", "preds", ",", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.models.losses.masked_mape": [[49, 61], ["numpy.isnan", "torch.where.float", "torch.mean", "torch.where", "torch.where", "torch.mean", "torch.isnan", "torch.zeros_like", "torch.abs", "torch.isnan", "torch.zeros_like", "torch.isnan"], "function", ["None"], ["", "def", "masked_mape", "(", "preds", ",", "labels", ",", "null_val", "=", "np", ".", "nan", ")", ":", "\n", "    ", "if", "np", ".", "isnan", "(", "null_val", ")", ":", "\n", "        ", "mask", "=", "~", "torch", ".", "isnan", "(", "labels", ")", "\n", "", "else", ":", "\n", "        ", "mask", "=", "(", "labels", "!=", "null_val", ")", "\n", "", "mask", "=", "mask", ".", "float", "(", ")", "\n", "mask", "/=", "torch", ".", "mean", "(", "(", "mask", ")", ")", "\n", "mask", "=", "torch", ".", "where", "(", "torch", ".", "isnan", "(", "mask", ")", ",", "torch", ".", "zeros_like", "(", "mask", ")", ",", "mask", ")", "\n", "loss", "=", "torch", ".", "abs", "(", "preds", "-", "labels", ")", "/", "labels", "\n", "loss", "=", "loss", "*", "mask", "\n", "loss", "=", "torch", ".", "where", "(", "torch", ".", "isnan", "(", "loss", ")", ",", "torch", ".", "zeros_like", "(", "loss", ")", ",", "loss", ")", "\n", "return", "torch", ".", "mean", "(", "loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.models.losses.metric": [[63, 68], ["masked_mae().item", "masked_mape().item", "masked_rmse().item", "losses.masked_mae", "losses.masked_mape", "losses.masked_rmse"], "function", ["home.repos.pwc.inspect_result.zezhishao_d2stgnn.models.losses.masked_mae", "home.repos.pwc.inspect_result.zezhishao_d2stgnn.models.losses.masked_mape", "home.repos.pwc.inspect_result.zezhishao_d2stgnn.models.losses.masked_rmse"], ["", "def", "metric", "(", "pred", ",", "real", ")", ":", "\n", "    ", "mae", "=", "masked_mae", "(", "pred", ",", "real", ",", "0.0", ")", ".", "item", "(", ")", "\n", "mape", "=", "masked_mape", "(", "pred", ",", "real", ",", "0.0", ")", ".", "item", "(", ")", "\n", "rmse", "=", "masked_rmse", "(", "pred", ",", "real", ",", "0.0", ")", ".", "item", "(", ")", "\n", "return", "mae", ",", "mape", ",", "rmse", "\n", "", ""]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.Decouple.residual_decomp.ResidualDecomp.__init__": [[7, 11], ["torch.Module.__init__", "torch.LayerNorm", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.zezhishao_d2stgnn.InherentBlock.forecast.Forecast.__init__"], ["def", "__init__", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ln", "=", "nn", ".", "LayerNorm", "(", "input_shape", "[", "-", "1", "]", ")", "\n", "self", ".", "ac", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.Decouple.residual_decomp.ResidualDecomp.forward": [[12, 16], ["residual_decomp.ResidualDecomp.ln", "residual_decomp.ResidualDecomp.ac"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "u", "=", "x", "-", "self", ".", "ac", "(", "y", ")", "\n", "u", "=", "self", ".", "ln", "(", "u", ")", "\n", "return", "u", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.Decouple.estimation_gate.EstimationGate.__init__": [[8, 13], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.zezhishao_d2stgnn.InherentBlock.forecast.Forecast.__init__"], ["def", "__init__", "(", "self", ",", "node_emb_dim", ",", "time_emb_dim", ",", "hidden_dim", ",", "input_seq_len", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "FC1", "=", "nn", ".", "Linear", "(", "2", "*", "node_emb_dim", "+", "time_emb_dim", "*", "2", ",", "hidden_dim", ")", "\n", "self", ".", "act", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "FC2", "=", "nn", ".", "Linear", "(", "hidden_dim", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.Decouple.estimation_gate.EstimationGate.forward": [[14, 23], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "estimation_gate.EstimationGate.FC1", "estimation_gate.EstimationGate.act", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "node_embedding1.unsqueeze().unsqueeze().expand", "node_embedding2.unsqueeze().unsqueeze().expand", "estimation_gate.EstimationGate.FC2", "node_embedding1.unsqueeze().unsqueeze", "node_embedding2.unsqueeze().unsqueeze", "node_embedding1.unsqueeze", "node_embedding2.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "node_embedding1", ",", "node_embedding2", ",", "T_D", ",", "D_W", ",", "X", ")", ":", "\n", "        ", "B", ",", "L", ",", "N", ",", "D", "=", "T_D", ".", "shape", "\n", "spatial_gate_feat", "=", "torch", ".", "cat", "(", "[", "T_D", ",", "D_W", ",", "node_embedding1", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "B", ",", "L", ",", "-", "1", ",", "-", "1", ")", ",", "node_embedding2", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "B", ",", "L", ",", "-", "1", ",", "-", "1", ")", "]", ",", "dim", "=", "-", "1", ")", "\n", "hidden", "=", "self", ".", "FC1", "(", "spatial_gate_feat", ")", "\n", "hidden", "=", "self", ".", "act", "(", "hidden", ")", "\n", "# activation", "\n", "spatial_gate", "=", "torch", ".", "sigmoid", "(", "self", ".", "FC2", "(", "hidden", ")", ")", "[", ":", ",", "-", "X", ".", "shape", "[", "1", "]", ":", ",", ":", ",", ":", "]", "\n", "X", "=", "X", "*", "spatial_gate", "\n", "return", "X", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.DiffusionBlock.forecast.Forecast.__init__": [[5, 11], ["torch.Module.__init__", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.zezhishao_d2stgnn.InherentBlock.forecast.Forecast.__init__"], ["    ", "def", "__init__", "(", "self", ",", "hidden_dim", ",", "fk_dim", "=", "None", ",", "**", "model_args", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "k_t", "=", "model_args", "[", "'k_t'", "]", "\n", "self", ".", "output_seq_len", "=", "model_args", "[", "'seq_length'", "]", "\n", "self", ".", "forecast_fc", "=", "nn", ".", "Linear", "(", "hidden_dim", ",", "fk_dim", ")", "\n", "self", ".", "model_args", "=", "model_args", "\n", "\n"]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.DiffusionBlock.forecast.Forecast.forward": [[12, 31], ["forecast.Forecast.append", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "forecast.Forecast.forecast_fc", "H[].unsqueeze", "forecast.Forecast.append", "int", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "st_l_conv", "len"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "X", ",", "H", ",", "st_l_conv", ",", "dynamic_graph", ",", "static_graph", ")", ":", "\n", "        ", "[", "B", ",", "seq_len_remain", ",", "B", ",", "D", "]", "=", "H", ".", "shape", "\n", "[", "B", ",", "seq_len_input", ",", "B", ",", "D", "]", "=", "X", ".", "shape", "\n", "\n", "predict", "=", "[", "]", "\n", "history", "=", "X", "\n", "predict", ".", "append", "(", "H", "[", ":", ",", "-", "1", ",", ":", ",", ":", "]", ".", "unsqueeze", "(", "1", ")", ")", "\n", "for", "_", "in", "range", "(", "int", "(", "self", ".", "output_seq_len", "/", "self", ".", "model_args", "[", "'gap'", "]", ")", "-", "1", ")", ":", "\n", "            ", "_1", "=", "predict", "[", "-", "self", ".", "k_t", ":", "]", "\n", "if", "len", "(", "_1", ")", "<", "self", ".", "k_t", ":", "\n", "                ", "sub", "=", "self", ".", "k_t", "-", "len", "(", "_1", ")", "\n", "_2", "=", "history", "[", ":", ",", "-", "sub", ":", ",", ":", ",", ":", "]", "\n", "_1", "=", "torch", ".", "cat", "(", "[", "_2", "]", "+", "_1", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "                ", "_1", "=", "torch", ".", "cat", "(", "_1", ",", "dim", "=", "1", ")", "\n", "", "predict", ".", "append", "(", "st_l_conv", "(", "_1", ",", "dynamic_graph", ",", "static_graph", ")", ")", "\n", "", "predict", "=", "torch", ".", "cat", "(", "predict", ",", "dim", "=", "1", ")", "\n", "predict", "=", "self", ".", "forecast_fc", "(", "predict", ")", "\n", "return", "predict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.DiffusionBlock.dif_block.DifBlock.__init__": [[7, 19], ["torch.Module.__init__", "models.DiffusionBlock.dif_model.STLocalizedConv", "models.Decouple.residual_decomp.ResidualDecomp", "models.DiffusionBlock.forecast.Forecast", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.zezhishao_d2stgnn.InherentBlock.forecast.Forecast.__init__"], ["    ", "def", "__init__", "(", "self", ",", "hidden_dim", ",", "fk_dim", "=", "256", ",", "use_pre", "=", "None", ",", "dy_graph", "=", "None", ",", "sta_graph", "=", "None", ",", "**", "model_args", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pre_defined_graph", "=", "model_args", "[", "'adjs'", "]", "\n", "\n", "self", ".", "localized_st_conv", "=", "STLocalizedConv", "(", "hidden_dim", ",", "pre_defined_graph", "=", "self", ".", "pre_defined_graph", ",", "use_pre", "=", "use_pre", ",", "dy_graph", "=", "dy_graph", ",", "sta_graph", "=", "sta_graph", ",", "**", "model_args", ")", "\n", "\n", "# sub and norm", "\n", "self", ".", "residual_decompose", "=", "ResidualDecomp", "(", "[", "-", "1", ",", "-", "1", ",", "-", "1", ",", "hidden_dim", "]", ")", "\n", "# forecast", "\n", "self", ".", "forecast_branch", "=", "Forecast", "(", "hidden_dim", ",", "fk_dim", "=", "fk_dim", ",", "**", "model_args", ")", "\n", "# backcast", "\n", "self", ".", "backcast_branch", "=", "nn", ".", "Linear", "(", "hidden_dim", ",", "hidden_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.DiffusionBlock.dif_block.DifBlock.forward": [[20, 32], ["dif_block.DifBlock.localized_st_conv", "dif_block.DifBlock.forecast_branch", "dif_block.DifBlock.backcast_branch", "dif_block.DifBlock.residual_decompose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "X", ",", "X_spa", ",", "dynamic_graph", ",", "static_graph", ")", ":", "\n", "        ", "Z", "=", "self", ".", "localized_st_conv", "(", "X_spa", ",", "dynamic_graph", ",", "static_graph", ")", "\n", "# forecast branch", "\n", "forecast_hidden", "=", "self", ".", "forecast_branch", "(", "X_spa", ",", "Z", ",", "self", ".", "localized_st_conv", ",", "dynamic_graph", ",", "static_graph", ")", "\n", "# backcast branch", "\n", "backcast_seq", "=", "self", ".", "backcast_branch", "(", "Z", ")", "\n", "# Residual Decomposition", "\n", "backcast_seq", "=", "backcast_seq", "\n", "X", "=", "X", "[", ":", ",", "-", "backcast_seq", ".", "shape", "[", "1", "]", ":", ",", ":", ",", ":", "]", "\n", "backcast_seq_res", "=", "self", ".", "residual_decompose", "(", "X", ",", "backcast_seq", ")", "\n", "\n", "return", "backcast_seq_res", ",", "forecast_hidden", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.DiffusionBlock.dif_model.STLocalizedConv.__init__": [[5, 29], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "dif_model.STLocalizedConv.get_graph", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "int", "len", "int", "int", "int", "len", "len", "int"], "methods", ["home.repos.pwc.inspect_result.zezhishao_d2stgnn.InherentBlock.forecast.Forecast.__init__", "home.repos.pwc.inspect_result.zezhishao_d2stgnn.DiffusionBlock.dif_model.STLocalizedConv.get_graph"], ["    ", "def", "__init__", "(", "self", ",", "hidden_dim", ",", "pre_defined_graph", "=", "None", ",", "use_pre", "=", "None", ",", "dy_graph", "=", "None", ",", "sta_graph", "=", "None", ",", "**", "model_args", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "# gated temporal conv", "\n", "self", ".", "k_s", "=", "model_args", "[", "'k_s'", "]", "\n", "self", ".", "k_t", "=", "model_args", "[", "'k_t'", "]", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "\n", "# graph conv", "\n", "self", ".", "pre_defined_graph", "=", "pre_defined_graph", "\n", "self", ".", "use_predefined_graph", "=", "use_pre", "\n", "self", ".", "use_dynamic_hidden_graph", "=", "dy_graph", "\n", "self", ".", "use_static__hidden_graph", "=", "sta_graph", "\n", "\n", "self", ".", "support_len", "=", "len", "(", "self", ".", "pre_defined_graph", ")", "+", "int", "(", "dy_graph", ")", "+", "int", "(", "sta_graph", ")", "\n", "self", ".", "num_matric", "=", "(", "int", "(", "use_pre", ")", "*", "len", "(", "self", ".", "pre_defined_graph", ")", "+", "len", "(", "self", ".", "pre_defined_graph", ")", "*", "int", "(", "dy_graph", ")", "+", "int", "(", "sta_graph", ")", ")", "*", "self", ".", "k_s", "+", "1", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "model_args", "[", "'dropout'", "]", ")", "\n", "self", ".", "pre_defined_graph", "=", "self", ".", "get_graph", "(", "self", ".", "pre_defined_graph", ")", "\n", "\n", "self", ".", "fc_list_updt", "=", "nn", ".", "Linear", "(", "self", ".", "k_t", "*", "hidden_dim", ",", "self", ".", "k_t", "*", "hidden_dim", ",", "bias", "=", "False", ")", "\n", "self", ".", "gcn_updt", "=", "nn", ".", "Linear", "(", "self", ".", "hidden_dim", "*", "self", ".", "num_matric", ",", "self", ".", "hidden_dim", ")", "\n", "\n", "# others", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "hidden_dim", ")", "\n", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.DiffusionBlock.dif_model.STLocalizedConv.gconv": [[30, 43], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "dif_model.STLocalizedConv.gcn_updt", "dif_model.STLocalizedConv.dropout", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "dif_model.STLocalizedConv.append", "len", "graph.unsqueeze.unsqueeze.unsqueeze"], "methods", ["None"], ["", "def", "gconv", "(", "self", ",", "support", ",", "X_k", ",", "X_0", ")", ":", "\n", "        ", "out", "=", "[", "X_0", "]", "\n", "for", "graph", "in", "support", ":", "\n", "            ", "if", "len", "(", "graph", ".", "shape", ")", "==", "2", ":", "# staitic or predefined graph", "\n", "                ", "pass", "\n", "", "else", ":", "\n", "                ", "graph", "=", "graph", ".", "unsqueeze", "(", "1", ")", "\n", "", "H_k", "=", "torch", ".", "matmul", "(", "graph", ",", "X_k", ")", "\n", "out", ".", "append", "(", "H_k", ")", "\n", "", "out", "=", "torch", ".", "cat", "(", "out", ",", "dim", "=", "-", "1", ")", "\n", "out", "=", "self", ".", "gcn_updt", "(", "out", ")", "\n", "out", "=", "self", ".", "dropout", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.DiffusionBlock.dif_model.STLocalizedConv.get_graph": [[44, 61], ["torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "graph_ordered.append", "range", "graph.reshape.reshape.unsqueeze().expand", "graph.reshape.reshape.reshape", "st_local_graph.append", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "graph_ordered.append", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "graph.reshape.reshape.unsqueeze"], "methods", ["None"], ["", "def", "get_graph", "(", "self", ",", "support", ")", ":", "\n", "# Only used in static including static hidden graph and predefined graph, but not used for dynamic graph.", "\n", "        ", "graph_ordered", "=", "[", "]", "\n", "mask", "=", "1", "-", "torch", ".", "eye", "(", "support", "[", "0", "]", ".", "shape", "[", "0", "]", ")", ".", "to", "(", "support", "[", "0", "]", ".", "device", ")", "\n", "for", "graph", "in", "support", ":", "\n", "            ", "k_1_order", "=", "graph", "# 1 order", "\n", "graph_ordered", ".", "append", "(", "k_1_order", "*", "mask", ")", "\n", "for", "k", "in", "range", "(", "2", ",", "self", ".", "k_s", "+", "1", ")", ":", "# e.g., order = 3, k=[2, 3]; order = 2, k=[2]", "\n", "                ", "k_1_order", "=", "torch", ".", "matmul", "(", "graph", ",", "k_1_order", ")", "\n", "graph_ordered", ".", "append", "(", "k_1_order", "*", "mask", ")", "\n", "# get st localed graph", "\n", "", "", "st_local_graph", "=", "[", "]", "\n", "for", "graph", "in", "graph_ordered", ":", "\n", "            ", "graph", "=", "graph", ".", "unsqueeze", "(", "-", "2", ")", ".", "expand", "(", "-", "1", ",", "self", ".", "k_t", ",", "-", "1", ")", "\n", "graph", "=", "graph", ".", "reshape", "(", "graph", ".", "shape", "[", "0", "]", ",", "graph", ".", "shape", "[", "1", "]", "*", "graph", ".", "shape", "[", "2", "]", ")", "\n", "st_local_graph", ".", "append", "(", "graph", ")", "# [num_nodes, kernel_size x num_nodes]", "\n", "", "return", "st_local_graph", "# [order, num_nodes, kernel_size x num_nodes]", "\n", "\n"]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.DiffusionBlock.dif_model.STLocalizedConv.forward": [[62, 88], ["X.reshape.reshape.unfold().permute", "X.reshape.reshape.reshape", "dif_model.STLocalizedConv.fc_list_updt", "dif_model.STLocalizedConv.activation", "out.view.view.view", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "out.view.view.transpose().reshape", "dif_model.STLocalizedConv.gconv", "X.reshape.reshape.unfold", "dif_model.STLocalizedConv.get_graph", "out.view.view.transpose"], "methods", ["home.repos.pwc.inspect_result.zezhishao_d2stgnn.DiffusionBlock.dif_model.STLocalizedConv.gconv", "home.repos.pwc.inspect_result.zezhishao_d2stgnn.DiffusionBlock.dif_model.STLocalizedConv.get_graph"], ["", "def", "forward", "(", "self", ",", "X", ",", "dynamic_graph", ",", "static_graph", ")", ":", "\n", "# X: [bs, seq, nodes, feat]", "\n", "        ", "X", "=", "X", ".", "unfold", "(", "1", ",", "self", ".", "k_t", ",", "1", ")", ".", "permute", "(", "0", ",", "1", ",", "2", ",", "4", ",", "3", ")", "# [bs, seq, num_nodes, ks, num_feat]", "\n", "batch_size", ",", "seq_len", ",", "num_nodes", ",", "kernel_size", ",", "num_feat", "=", "X", ".", "shape", "# seq_len is changing", "\n", "\n", "# support", "\n", "support", "=", "[", "]", "\n", "## predefined graph", "\n", "if", "self", ".", "use_predefined_graph", ":", "\n", "            ", "support", "=", "support", "+", "self", ".", "pre_defined_graph", "\n", "## dynamic graph", "\n", "", "if", "self", ".", "use_dynamic_hidden_graph", ":", "\n", "            ", "support", "=", "support", "+", "dynamic_graph", "# k_order is caled in dynamic_graph_constructor component ", "\n", "## predefined graphs and static hidden graphs", "\n", "", "if", "self", ".", "use_static__hidden_graph", ":", "\n", "            ", "support", "=", "support", "+", "self", ".", "get_graph", "(", "static_graph", ")", "\n", "\n", "# parallelize", "\n", "", "X", "=", "X", ".", "reshape", "(", "batch_size", ",", "seq_len", ",", "num_nodes", ",", "kernel_size", "*", "num_feat", ")", "\n", "out", "=", "self", ".", "fc_list_updt", "(", "X", ")", "# batch_size, seq_len, num_nodes, kernel_size * hidden_dim", "\n", "out", "=", "self", ".", "activation", "(", "out", ")", "\n", "out", "=", "out", ".", "view", "(", "batch_size", ",", "seq_len", ",", "num_nodes", ",", "kernel_size", ",", "num_feat", ")", "\n", "X_0", "=", "torch", ".", "mean", "(", "out", ",", "dim", "=", "-", "2", ")", "\n", "X_k", "=", "out", ".", "transpose", "(", "-", "3", ",", "-", "2", ")", ".", "reshape", "(", "batch_size", ",", "seq_len", ",", "kernel_size", "*", "num_nodes", ",", "num_feat", ")", "# batch_size, seq_len, kernel_size x num_nodes, hidden_dim", "\n", "hidden", "=", "self", ".", "gconv", "(", "support", ",", "X_k", ",", "X_0", ")", "# Nx3N 3NxD -> NxD: batch_size, seq_len, num_nodes, hidden_dim", "\n", "return", "hidden", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.DynamicGraphConv.DyGraphCons.DynamicGraphConstructor.__init__": [[5, 17], ["torch.Module.__init__", "DistanceFunction", "Mask", "Normalizer", "MultiOrder"], "methods", ["home.repos.pwc.inspect_result.zezhishao_d2stgnn.InherentBlock.forecast.Forecast.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "model_args", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "# model args", "\n", "self", ".", "k_s", "=", "model_args", "[", "'k_s'", "]", "# spatial order", "\n", "self", ".", "k_t", "=", "model_args", "[", "'k_t'", "]", "# temporal kernel size", "\n", "self", ".", "hidden_dim", "=", "model_args", "[", "'num_hidden'", "]", "# hidden dimension of ", "\n", "self", ".", "node_dim", "=", "model_args", "[", "'node_hidden'", "]", "# trainable node embedding dimension", "\n", "\n", "self", ".", "distance_function", "=", "DistanceFunction", "(", "**", "model_args", ")", "\n", "self", ".", "mask", "=", "Mask", "(", "**", "model_args", ")", "\n", "self", ".", "normalizer", "=", "Normalizer", "(", ")", "\n", "self", ".", "multi_order", "=", "MultiOrder", "(", "order", "=", "self", ".", "k_s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.DynamicGraphConv.DyGraphCons.DynamicGraphConstructor.st_localization": [[18, 26], ["k_order_graph.reshape.reshape.unsqueeze().expand", "k_order_graph.reshape.reshape.reshape", "st_local_graph.append", "k_order_graph.reshape.reshape.unsqueeze"], "methods", ["None"], ["", "def", "st_localization", "(", "self", ",", "graph_ordered", ")", ":", "\n", "        ", "st_local_graph", "=", "[", "]", "\n", "for", "modality_i", "in", "graph_ordered", ":", "\n", "            ", "for", "k_order_graph", "in", "modality_i", ":", "\n", "                ", "k_order_graph", "=", "k_order_graph", ".", "unsqueeze", "(", "-", "2", ")", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "self", ".", "k_t", ",", "-", "1", ")", "\n", "k_order_graph", "=", "k_order_graph", ".", "reshape", "(", "k_order_graph", ".", "shape", "[", "0", "]", ",", "k_order_graph", ".", "shape", "[", "1", "]", ",", "k_order_graph", ".", "shape", "[", "2", "]", "*", "k_order_graph", ".", "shape", "[", "3", "]", ")", "\n", "st_local_graph", ".", "append", "(", "k_order_graph", ")", "\n", "", "", "return", "st_local_graph", "\n", "\n"]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.DynamicGraphConv.DyGraphCons.DynamicGraphConstructor.forward": [[27, 45], ["DyGraphCons.DynamicGraphConstructor.distance_function", "DyGraphCons.DynamicGraphConstructor.mask", "DyGraphCons.DynamicGraphConstructor.normalizer", "DyGraphCons.DynamicGraphConstructor.multi_order", "DyGraphCons.DynamicGraphConstructor.st_localization"], "methods", ["home.repos.pwc.inspect_result.zezhishao_d2stgnn.DynamicGraphConv.DyGraphCons.DynamicGraphConstructor.st_localization"], ["", "def", "forward", "(", "self", ",", "**", "inputs", ")", ":", "\n", "        ", "X", "=", "inputs", "[", "'X'", "]", "\n", "E_d", "=", "inputs", "[", "'E_d'", "]", "\n", "E_u", "=", "inputs", "[", "'E_u'", "]", "\n", "T_D", "=", "inputs", "[", "'T_D'", "]", "\n", "D_W", "=", "inputs", "[", "'D_W'", "]", "\n", "# distance calculation", "\n", "dist_mx", "=", "self", ".", "distance_function", "(", "X", ",", "E_d", ",", "E_u", ",", "T_D", ",", "D_W", ")", "\n", "# mask", "\n", "dist_mx", "=", "self", ".", "mask", "(", "dist_mx", ")", "\n", "# normalization", "\n", "dist_mx", "=", "self", ".", "normalizer", "(", "dist_mx", ")", "\n", "# multi order", "\n", "mul_mx", "=", "self", ".", "multi_order", "(", "dist_mx", ")", "\n", "# spatial temporal localization", "\n", "dynamic_graphs", "=", "self", ".", "st_localization", "(", "mul_mx", ")", "\n", "\n", "return", "dynamic_graphs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.Utils.distance.DistanceFunction.__init__": [[7, 26], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.zezhishao_d2stgnn.InherentBlock.forecast.Forecast.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "model_args", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "# attributes", "\n", "self", ".", "hidden_dim", "=", "model_args", "[", "'num_hidden'", "]", "\n", "self", ".", "node_dim", "=", "model_args", "[", "'node_hidden'", "]", "\n", "self", ".", "time_slot_emb_dim", "=", "self", ".", "hidden_dim", "\n", "self", ".", "input_seq_len", "=", "model_args", "[", "'seq_length'", "]", "\n", "# Time Series Feature Extraction", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "model_args", "[", "'dropout'", "]", ")", "\n", "self", ".", "fc_ts_emb1", "=", "nn", ".", "Linear", "(", "self", ".", "input_seq_len", ",", "self", ".", "hidden_dim", "*", "2", ")", "\n", "self", ".", "fc_ts_emb2", "=", "nn", ".", "Linear", "(", "self", ".", "hidden_dim", "*", "2", ",", "self", ".", "hidden_dim", ")", "\n", "self", ".", "ts_feat_dim", "=", "self", ".", "hidden_dim", "\n", "# Time Slot Embedding Extraction", "\n", "self", ".", "time_slot_embedding", "=", "nn", ".", "Linear", "(", "model_args", "[", "'time_emb_dim'", "]", ",", "self", ".", "time_slot_emb_dim", ")", "\n", "# Distance Score", "\n", "self", ".", "all_feat_dim", "=", "self", ".", "ts_feat_dim", "+", "self", ".", "node_dim", "+", "model_args", "[", "'time_emb_dim'", "]", "*", "2", "\n", "self", ".", "WQ", "=", "nn", ".", "Linear", "(", "self", ".", "all_feat_dim", ",", "self", ".", "hidden_dim", ",", "bias", "=", "False", ")", "\n", "self", ".", "WK", "=", "nn", ".", "Linear", "(", "self", ".", "all_feat_dim", ",", "self", ".", "hidden_dim", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm1d", "(", "self", ".", "hidden_dim", "*", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.Utils.distance.DistanceFunction.reset_parameters": [[27, 32], ["torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "for", "q_vec", "in", "self", ".", "q_vecs", ":", "\n", "            ", "nn", ".", "init", ".", "xavier_normal_", "(", "q_vec", ".", "data", ")", "\n", "", "for", "bias", "in", "self", ".", "biases", ":", "\n", "            ", "nn", ".", "init", ".", "zeros_", "(", "bias", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.Utils.distance.DistanceFunction.forward": [[33, 58], ["X[].transpose().contiguous", "X.view.view.view", "distance.DistanceFunction.fc_ts_emb2", "dy_feat.view.view.view", "E_d.unsqueeze().expand", "E_u.unsqueeze().expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "distance.DistanceFunction.dropout", "distance.DistanceFunction.WQ", "distance.DistanceFunction.WK", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "adjacent_list.append", "X[].transpose", "distance.DistanceFunction.bn", "E_d.unsqueeze", "E_u.unsqueeze", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "math.sqrt", "torch.relu", "torch.relu", "torch.relu", "distance.DistanceFunction.transpose", "distance.DistanceFunction.fc_ts_emb1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "X", ",", "E_d", ",", "E_u", ",", "T_D", ",", "D_W", ")", ":", "\n", "# last pooling", "\n", "        ", "T_D", "=", "T_D", "[", ":", ",", "-", "1", ",", ":", ",", ":", "]", "\n", "D_W", "=", "D_W", "[", ":", ",", "-", "1", ",", ":", ",", ":", "]", "\n", "# dynamic information", "\n", "X", "=", "X", "[", ":", ",", ":", ",", ":", ",", "0", "]", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "# X->[batch_size, seq_len, num_nodes]->[batch_size, num_nodes, seq_len]", "\n", "[", "batch_size", ",", "num_nodes", ",", "seq_len", "]", "=", "X", ".", "shape", "\n", "X", "=", "X", ".", "view", "(", "batch_size", "*", "num_nodes", ",", "seq_len", ")", "\n", "dy_feat", "=", "self", ".", "fc_ts_emb2", "(", "self", ".", "dropout", "(", "self", ".", "bn", "(", "F", ".", "relu", "(", "self", ".", "fc_ts_emb1", "(", "X", ")", ")", ")", ")", ")", "# [batchsize, num_nodes, hidden_dim]", "\n", "dy_feat", "=", "dy_feat", ".", "view", "(", "batch_size", ",", "num_nodes", ",", "-", "1", ")", "\n", "# node embedding", "\n", "emb1", "=", "E_d", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "batch_size", ",", "-", "1", ",", "-", "1", ")", "\n", "emb2", "=", "E_u", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "batch_size", ",", "-", "1", ",", "-", "1", ")", "\n", "# distance calculation", "\n", "X1", "=", "torch", ".", "cat", "(", "[", "dy_feat", ",", "T_D", ",", "D_W", ",", "emb1", "]", ",", "dim", "=", "-", "1", ")", "# hidden state for calculating distance", "\n", "X2", "=", "torch", ".", "cat", "(", "[", "dy_feat", ",", "T_D", ",", "D_W", ",", "emb2", "]", ",", "dim", "=", "-", "1", ")", "# hidden state for calculating distance", "\n", "X", "=", "[", "X1", ",", "X2", "]", "\n", "adjacent_list", "=", "[", "]", "\n", "for", "_", "in", "X", ":", "\n", "            ", "Q", "=", "self", ".", "WQ", "(", "_", ")", "\n", "K", "=", "self", ".", "WK", "(", "_", ")", "\n", "QKT", "=", "torch", ".", "bmm", "(", "Q", ",", "K", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ")", "/", "math", ".", "sqrt", "(", "self", ".", "hidden_dim", ")", "\n", "W", "=", "torch", ".", "softmax", "(", "QKT", ",", "dim", "=", "-", "1", ")", "\n", "adjacent_list", ".", "append", "(", "W", ")", "\n", "", "return", "adjacent_list", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.Utils.normalizer.Normalizer.__init__": [[6, 8], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.zezhishao_d2stgnn.InherentBlock.forecast.Forecast.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.Utils.normalizer.Normalizer._norm": [[9, 15], ["torch.sum", "torch.sum", "torch.sum", "torch.sum", "utils.cal_adj.remove_nan_inf", "torch.diag_embed", "torch.diag_embed", "torch.diag_embed", "torch.diag_embed", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm"], "methods", ["home.repos.pwc.inspect_result.zezhishao_d2stgnn.utils.cal_adj.remove_nan_inf"], ["", "def", "_norm", "(", "self", ",", "graph", ")", ":", "\n", "        ", "degree", "=", "torch", ".", "sum", "(", "graph", ",", "dim", "=", "2", ")", "\n", "degree", "=", "remove_nan_inf", "(", "1", "/", "degree", ")", "\n", "degree", "=", "torch", ".", "diag_embed", "(", "degree", ")", "\n", "P", "=", "torch", ".", "bmm", "(", "degree", ",", "graph", ")", "\n", "return", "P", "\n", "\n"]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.Utils.normalizer.Normalizer.forward": [[16, 18], ["normalizer.Normalizer._norm"], "methods", ["home.repos.pwc.inspect_result.zezhishao_d2stgnn.Utils.normalizer.Normalizer._norm"], ["", "def", "forward", "(", "self", ",", "adj", ")", ":", "\n", "        ", "return", "[", "self", ".", "_norm", "(", "_", ")", "for", "_", "in", "adj", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.Utils.normalizer.MultiOrder.__init__": [[20, 23], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.zezhishao_d2stgnn.InherentBlock.forecast.Forecast.__init__"], ["    ", "def", "__init__", "(", "self", ",", "order", "=", "2", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "order", "=", "order", "\n", "\n"]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.Utils.normalizer.MultiOrder._multi_order": [[24, 34], ["torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "graph_ordered.append", "range", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "graph_ordered.append", "torch.eye", "torch.eye", "torch.eye", "torch.eye"], "methods", ["None"], ["", "def", "_multi_order", "(", "self", ",", "graph", ")", ":", "\n", "        ", "graph_ordered", "=", "[", "]", "\n", "k_1_order", "=", "graph", "# 1 order", "\n", "mask", "=", "torch", ".", "eye", "(", "graph", ".", "shape", "[", "1", "]", ")", ".", "to", "(", "graph", ".", "device", ")", "\n", "mask", "=", "1", "-", "mask", "\n", "graph_ordered", ".", "append", "(", "k_1_order", "*", "mask", ")", "\n", "for", "k", "in", "range", "(", "2", ",", "self", ".", "order", "+", "1", ")", ":", "# e.g., order = 3, k=[2, 3]; order = 2, k=[2]", "\n", "            ", "k_1_order", "=", "torch", ".", "matmul", "(", "k_1_order", ",", "graph", ")", "\n", "graph_ordered", ".", "append", "(", "k_1_order", "*", "mask", ")", "\n", "", "return", "graph_ordered", "\n", "\n"]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.Utils.normalizer.MultiOrder.forward": [[35, 37], ["normalizer.MultiOrder._multi_order"], "methods", ["home.repos.pwc.inspect_result.zezhishao_d2stgnn.Utils.normalizer.MultiOrder._multi_order"], ["", "def", "forward", "(", "self", ",", "adj", ")", ":", "\n", "        ", "return", "[", "self", ".", "_multi_order", "(", "_", ")", "for", "_", "in", "adj", "]", "", "", "", ""]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.Utils.mask.Mask.__init__": [[5, 8], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.zezhishao_d2stgnn.InherentBlock.forecast.Forecast.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "model_args", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mask", "=", "model_args", "[", "'adjs'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.Utils.mask.Mask._mask": [[9, 12], ["mask.to", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like"], "methods", ["None"], ["", "def", "_mask", "(", "self", ",", "index", ",", "adj", ")", ":", "\n", "        ", "mask", "=", "self", ".", "mask", "[", "index", "]", "+", "torch", ".", "ones_like", "(", "self", ".", "mask", "[", "index", "]", ")", "*", "1e-7", "\n", "return", "mask", ".", "to", "(", "adj", ".", "device", ")", "*", "adj", "\n", "\n"]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.Utils.mask.Mask.forward": [[13, 18], ["enumerate", "result.append", "mask.Mask._mask"], "methods", ["home.repos.pwc.inspect_result.zezhishao_d2stgnn.Utils.mask.Mask._mask"], ["", "def", "forward", "(", "self", ",", "adj", ")", ":", "\n", "        ", "result", "=", "[", "]", "\n", "for", "index", ",", "_", "in", "enumerate", "(", "adj", ")", ":", "\n", "            ", "result", ".", "append", "(", "self", ".", "_mask", "(", "index", ",", "_", ")", ")", "\n", "", "return", "result", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.InherentBlock.inh_model.RNNLayer.__init__": [[6, 11], ["torch.Module.__init__", "torch.GRUCell", "torch.GRUCell", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.zezhishao_d2stgnn.InherentBlock.forecast.Forecast.__init__"], ["    ", "def", "__init__", "(", "self", ",", "hidden_dim", ",", "dropout", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "self", ".", "gru_cell", "=", "nn", ".", "GRUCell", "(", "hidden_dim", ",", "hidden_dim", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.InherentBlock.inh_model.RNNLayer.forward": [[12, 23], ["X.transpose().reshape.transpose().reshape.transpose().reshape", "torch.zeros_like", "torch.zeros_like", "range", "torch.stack", "torch.stack", "inh_model.RNNLayer.dropout", "inh_model.RNNLayer.gru_cell", "inh_model.RNNLayer.append", "X.transpose().reshape.transpose().reshape.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "        ", "[", "batch_size", ",", "seq_len", ",", "num_nodes", ",", "hidden_dim", "]", "=", "X", ".", "shape", "\n", "X", "=", "X", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "batch_size", "*", "num_nodes", ",", "seq_len", ",", "hidden_dim", ")", "\n", "hx", "=", "th", ".", "zeros_like", "(", "X", "[", ":", ",", "0", ",", ":", "]", ")", "\n", "output", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "X", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "hx", "=", "self", ".", "gru_cell", "(", "X", "[", ":", ",", "_", ",", ":", "]", ",", "hx", ")", "\n", "output", ".", "append", "(", "hx", ")", "\n", "", "output", "=", "th", ".", "stack", "(", "output", ",", "dim", "=", "0", ")", "\n", "output", "=", "self", ".", "dropout", "(", "output", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.InherentBlock.inh_model.TransformerLayer.__init__": [[25, 29], ["torch.Module.__init__", "torch.nn.MultiheadAttention", "torch.nn.MultiheadAttention", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.zezhishao_d2stgnn.InherentBlock.forecast.Forecast.__init__"], ["    ", "def", "__init__", "(", "self", ",", "hidden_dim", ",", "num_heads", "=", "4", ",", "dropout", "=", "None", ",", "bias", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "multi_head_self_attention", "=", "MultiheadAttention", "(", "hidden_dim", ",", "num_heads", ",", "dropout", "=", "dropout", ",", "bias", "=", "bias", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.InherentBlock.inh_model.TransformerLayer.forward": [[30, 34], ["inh_model.TransformerLayer.dropout", "inh_model.TransformerLayer.multi_head_self_attention"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "X", ",", "K", ",", "V", ")", ":", "\n", "        ", "Z", "=", "self", ".", "multi_head_self_attention", "(", "X", ",", "K", ",", "V", ")", "[", "0", "]", "\n", "Z", "=", "self", ".", "dropout", "(", "Z", ")", "\n", "return", "Z", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.InherentBlock.inh_block.PositionalEncoding.__init__": [[9, 18], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "inh_block.PositionalEncoding.register_buffer", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "math.log"], "methods", ["home.repos.pwc.inspect_result.zezhishao_d2stgnn.InherentBlock.forecast.Forecast.__init__"], ["    ", "def", "__init__", "(", "self", ",", "d_model", ",", "dropout", "=", "None", ",", "max_len", ":", "int", "=", "5000", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout", ")", "\n", "position", "=", "torch", ".", "arange", "(", "max_len", ")", ".", "unsqueeze", "(", "1", ")", "\n", "div_term", "=", "torch", ".", "exp", "(", "torch", ".", "arange", "(", "0", ",", "d_model", ",", "2", ")", "*", "(", "-", "math", ".", "log", "(", "10000.0", ")", "/", "d_model", ")", ")", "\n", "pe", "=", "torch", ".", "zeros", "(", "max_len", ",", "1", ",", "d_model", ")", "\n", "pe", "[", ":", ",", "0", ",", "0", ":", ":", "2", "]", "=", "torch", ".", "sin", "(", "position", "*", "div_term", ")", "\n", "pe", "[", ":", ",", "0", ",", "1", ":", ":", "2", "]", "=", "torch", ".", "cos", "(", "position", "*", "div_term", ")", "\n", "self", ".", "register_buffer", "(", "'pe'", ",", "pe", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.InherentBlock.inh_block.PositionalEncoding.forward": [[19, 23], ["inh_block.PositionalEncoding.dropout", "inh_block.PositionalEncoding.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "        ", "X", "=", "X", "+", "self", ".", "pe", "[", ":", "X", ".", "size", "(", "0", ")", "]", "\n", "X", "=", "self", ".", "dropout", "(", "X", ")", "\n", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.InherentBlock.inh_block.InhBlock.__init__": [[25, 42], ["torch.Module.__init__", "models.InherentBlock.inh_model.RNNLayer", "models.InherentBlock.inh_model.TransformerLayer", "models.InherentBlock.forecast.Forecast", "torch.Linear", "torch.Linear", "models.Decouple.residual_decomp.ResidualDecomp", "inh_block.PositionalEncoding"], "methods", ["home.repos.pwc.inspect_result.zezhishao_d2stgnn.InherentBlock.forecast.Forecast.__init__"], ["    ", "def", "__init__", "(", "self", ",", "hidden_dim", ",", "num_heads", "=", "4", ",", "bias", "=", "True", ",", "fk_dim", "=", "256", ",", "first", "=", "None", ",", "**", "model_args", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_feat", "=", "hidden_dim", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "\n", "if", "first", ":", "\n", "            ", "self", ".", "pos_encoder", "=", "PositionalEncoding", "(", "hidden_dim", ",", "model_args", "[", "'dropout'", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "pos_encoder", "=", "None", "\n", "", "self", ".", "rnn_layer", "=", "RNNLayer", "(", "hidden_dim", ",", "model_args", "[", "'dropout'", "]", ")", "\n", "self", ".", "transformer_layer", "=", "TransformerLayer", "(", "hidden_dim", ",", "num_heads", ",", "model_args", "[", "'dropout'", "]", ",", "bias", ")", "\n", "# forecast", "\n", "self", ".", "forecast_block", "=", "Forecast", "(", "hidden_dim", ",", "fk_dim", ",", "**", "model_args", ")", "\n", "# backcast", "\n", "self", ".", "backcast_fc", "=", "nn", ".", "Linear", "(", "hidden_dim", ",", "hidden_dim", ")", "\n", "# sub residual", "\n", "self", ".", "sub_and_norm", "=", "ResidualDecomp", "(", "[", "-", "1", ",", "-", "1", ",", "-", "1", ",", "hidden_dim", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.InherentBlock.inh_block.InhBlock.forward": [[43, 66], ["inh_block.InhBlock.rnn_layer", "inh_block.InhBlock.transformer_layer", "inh_block.InhBlock.forecast_block", "Z.transpose.transpose.reshape", "Z.transpose.transpose.transpose", "inh_block.InhBlock.backcast_fc", "inh_block.InhBlock.sub_and_norm", "inh_block.InhBlock.pos_encoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "        ", "[", "batch_size", ",", "seq_len", ",", "num_nodes", ",", "num_feat", "]", "=", "X", ".", "shape", "\n", "# Temporal Model", "\n", "## RNN", "\n", "RNN_H_raw", "=", "self", ".", "rnn_layer", "(", "X", ")", "\n", "## Positional Encoding", "\n", "if", "self", ".", "pos_encoder", "is", "not", "None", ":", "\n", "            ", "RNN_H", "=", "self", ".", "pos_encoder", "(", "RNN_H_raw", ")", "\n", "", "else", ":", "\n", "            ", "RNN_H", "=", "RNN_H_raw", "\n", "## MultiHead Self Attention", "\n", "", "Z", "=", "self", ".", "transformer_layer", "(", "RNN_H", ",", "RNN_H", ",", "RNN_H", ")", "\n", "\n", "# forecast branch", "\n", "forecast_hidden", "=", "self", ".", "forecast_block", "(", "X", ",", "RNN_H_raw", ",", "Z", ",", "self", ".", "transformer_layer", ",", "self", ".", "rnn_layer", ",", "self", ".", "pos_encoder", ")", "\n", "\n", "# backcast branch", "\n", "Z", "=", "Z", ".", "reshape", "(", "seq_len", ",", "batch_size", ",", "num_nodes", ",", "num_feat", ")", "\n", "Z", "=", "Z", ".", "transpose", "(", "0", ",", "1", ")", "\n", "backcast_seq", "=", "self", ".", "backcast_fc", "(", "Z", ")", "\n", "backcast_seq_res", "=", "self", ".", "sub_and_norm", "(", "X", ",", "backcast_seq", ")", "\n", "\n", "return", "backcast_seq_res", ",", "forecast_hidden", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.InherentBlock.forecast.Forecast.__init__": [[5, 11], ["torch.Module.__init__", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.zezhishao_d2stgnn.InherentBlock.forecast.Forecast.__init__"], ["    ", "def", "__init__", "(", "self", ",", "hidden_dim", ",", "fk_dim", "=", "None", ",", "**", "model_args", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "k_t", "=", "model_args", "[", "'k_t'", "]", "\n", "self", ".", "output_seq_len", "=", "model_args", "[", "'seq_length'", "]", "\n", "self", ".", "forecast_fc", "=", "nn", ".", "Linear", "(", "hidden_dim", ",", "fk_dim", ")", "\n", "self", ".", "model_args", "=", "model_args", "\n", "\n"]], "home.repos.pwc.inspect_result.zezhishao_d2stgnn.InherentBlock.forecast.Forecast.forward": [[12, 34], ["range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "forecast.Forecast.reshape", "forecast.Forecast.transpose", "forecast.Forecast.forecast_fc", "Z[].unsqueeze", "rnn_layer.gru_cell().unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "transformer_layer", "forecast.Forecast.append", "int", "pe", "rnn_layer.gru_cell"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "X", ",", "H", ",", "st_l_conv", ",", "dynamic_graph", ",", "static_graph", ")", ":", "\n", "        ", "[", "B", ",", "seq_len_remain", ",", "B", ",", "D", "]", "=", "H", ".", "shape", "\n", "[", "B", ",", "seq_len_input", ",", "B", ",", "D", "]", "=", "X", ".", "shape", "\n", "\n", "predict", "=", "[", "]", "\n", "history", "=", "X", "\n", "predict", ".", "append", "(", "H", "[", ":", ",", "-", "1", ",", ":", ",", ":", "]", ".", "unsqueeze", "(", "1", ")", ")", "\n", "for", "_", "in", "range", "(", "int", "(", "self", ".", "output_seq_len", "/", "self", ".", "model_args", "[", "'gap'", "]", ")", "-", "1", ")", ":", "\n", "            ", "_1", "=", "predict", "[", "-", "self", ".", "k_t", ":", "]", "\n", "if", "len", "(", "_1", ")", "<", "self", ".", "k_t", ":", "\n", "                ", "sub", "=", "self", ".", "k_t", "-", "len", "(", "_1", ")", "\n", "_2", "=", "history", "[", ":", ",", "-", "sub", ":", ",", ":", ",", ":", "]", "\n", "_1", "=", "torch", ".", "cat", "(", "[", "_2", "]", "+", "_1", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "                ", "_1", "=", "torch", ".", "cat", "(", "_1", ",", "dim", "=", "1", ")", "\n", "", "predict", ".", "append", "(", "st_l_conv", "(", "_1", ",", "dynamic_graph", ",", "static_graph", ")", ")", "\n", "", "predict", "=", "torch", ".", "cat", "(", "predict", ",", "dim", "=", "1", ")", "\n", "predict", "=", "self", ".", "forecast_fc", "(", "predict", ")", "\n", "return", "predict", "\n", "", "", ""]]}