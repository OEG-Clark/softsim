{"home.repos.pwc.inspect_result.expectopatronum_mml2020-experiments.None.analyse_components.get_counts_for_model": [[15, 29], ["numpy.array", "numpy.array", "counts_random.append", "counts_pos.append"], "function", ["None"], ["", "def", "get_counts_for_model", "(", "results", ")", ":", "\n", "    ", "counts_for_model", "=", "{", "'top_k'", ":", "0", ",", "'n_examples'", ":", "0", ",", "'random'", ":", "[", "]", ",", "'pos'", ":", "[", "]", ",", "'k'", ":", "[", "]", "}", "\n", "counts_random", "=", "[", "]", "\n", "counts_pos", "=", "[", "]", "\n", "for", "item", "in", "results", ":", "\n", "        ", "label", "=", "results", "[", "item", "]", "[", "'label'", "]", "\n", "counts_for_model", "[", "'top_k'", "]", "+=", "label", "==", "results", "[", "item", "]", "[", "'pred_top_k'", "]", "\n", "counts_for_model", "[", "'n_examples'", "]", "+=", "1", "\n", "counts_random", ".", "append", "(", "results", "[", "item", "]", "[", "'pred_random'", "]", "==", "label", ")", "\n", "counts_pos", ".", "append", "(", "results", "[", "item", "]", "[", "'pred_pos'", "]", "==", "label", ")", "\n", "counts_for_model", "[", "'k'", "]", "=", "results", "[", "item", "]", "[", "'k'", "]", "\n", "", "counts_for_model", "[", "'random'", "]", "=", "np", ".", "array", "(", "counts_random", ")", "\n", "counts_for_model", "[", "'pos'", "]", "=", "np", ".", "array", "(", "counts_pos", ")", "\n", "return", "counts_for_model", "\n", "\n"]], "home.repos.pwc.inspect_result.expectopatronum_mml2020-experiments.None.utils.dill_dump": [[18, 20], ["dill.dump", "open"], "function", ["None"], ["def", "dill_dump", "(", "x", ",", "path", ")", ":", "\n", "    ", "dill", ".", "dump", "(", "x", ",", "open", "(", "path", ",", "\"wb\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.expectopatronum_mml2020-experiments.None.utils.dill_load": [[22, 24], ["dill.load", "open"], "function", ["None"], ["", "def", "dill_load", "(", "path", ")", ":", "\n", "    ", "return", "dill", ".", "load", "(", "open", "(", "path", ",", "\"rb\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.expectopatronum_mml2020-experiments.None.utils.composition_fn": [[26, 30], ["torch.is_tensor", "x.detach().cpu().numpy.detach().cpu().numpy", "x.detach().cpu().numpy.detach().cpu", "x.detach().cpu().numpy.detach"], "function", ["None"], ["", "def", "composition_fn", "(", "x", ")", ":", "\n", "    ", "if", "torch", ".", "is_tensor", "(", "x", ")", ":", "\n", "        ", "x", "=", "x", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.expectopatronum_mml2020-experiments.None.utils.prepare_audio": [[57, 74], ["preprocessing.mtat_read.Processor", "preprocessing.mtat_read.Processor.get_npy", "len", "torch.zeros", "range", "snippet_starts.append", "torch.tensor().unsqueeze", "torch.tensor"], "function", ["None"], ["def", "prepare_audio", "(", "audio_path", ",", "input_length", ",", "nr_chunks", "=", "None", ",", "return_snippet_starts", "=", "False", ")", ":", "\n", "# based on code in Minz Won's repo", "\n", "    ", "if", "nr_chunks", "is", "None", ":", "\n", "        ", "nr_chunks", "=", "input_length", "\n", "", "processor", "=", "Processor", "(", ")", "\n", "raw", "=", "processor", ".", "get_npy", "(", "audio_path", ")", "\n", "length", "=", "len", "(", "raw", ")", "\n", "snippet_starts", "=", "[", "]", "\n", "\n", "hop", "=", "(", "length", "-", "input_length", ")", "//", "nr_chunks", "\n", "x", "=", "torch", ".", "zeros", "(", "nr_chunks", ",", "input_length", ")", "\n", "for", "i", "in", "range", "(", "nr_chunks", ")", ":", "\n", "        ", "snippet_starts", ".", "append", "(", "i", "*", "hop", ")", "\n", "x", "[", "i", "]", "=", "torch", ".", "tensor", "(", "raw", "[", "i", "*", "hop", ":", "i", "*", "hop", "+", "input_length", "]", ")", ".", "unsqueeze", "(", "0", ")", "\n", "", "if", "return_snippet_starts", ":", "\n", "        ", "return", "x", ",", "snippet_starts", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.expectopatronum_mml2020-experiments.None.utils.create_predict_fn": [[76, 89], ["torch.zeros", "range", "torch.autograd.Variable.cuda", "torch.autograd.Variable", "model", "y.detach().cpu().numpy.detach().cpu().numpy", "numpy.array", "len", "len", "torch.Tensor().unsqueeze", "y.detach().cpu().numpy.detach().cpu", "torch.Tensor", "y.detach().cpu().numpy.detach"], "function", ["None"], ["", "def", "create_predict_fn", "(", "model", ",", "config", ")", ":", "\n", "# this wrapper is used to created a configurable predict_fn that only takes x", "\n", "# and return y in the right format", "\n", "    ", "def", "predict_fn", "(", "x_array", ")", ":", "\n", "        ", "x", "=", "torch", ".", "zeros", "(", "len", "(", "x_array", ")", ",", "config", ".", "input_length", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "x_array", ")", ")", ":", "\n", "            ", "x", "[", "i", "]", "=", "torch", ".", "Tensor", "(", "x_array", "[", "i", "]", ")", ".", "unsqueeze", "(", "0", ")", "\n", "", "x", "=", "x", ".", "cuda", "(", ")", "\n", "x", "=", "Variable", "(", "x", ")", "\n", "y", "=", "model", "(", "x", ")", "\n", "y", "=", "y", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "return", "np", ".", "array", "(", "y", ")", "\n", "", "return", "predict_fn", "\n", "\n"]], "home.repos.pwc.inspect_result.expectopatronum_mml2020-experiments.None.utils.get_model": [[91, 103], ["training.eval.Predict.get_model", "torch.cuda.is_available", "Predict.get_model.load_state_dict", "Predict.get_model.cuda", "Predict.get_model.eval", "torch.load", "torch.load"], "function", ["home.repos.pwc.inspect_result.expectopatronum_mml2020-experiments.None.utils.get_model"], ["", "def", "get_model", "(", "config", ")", ":", "\n", "    ", "model", "=", "Predict", ".", "get_model", "(", "config", ")", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "S", "=", "torch", ".", "load", "(", "config", ".", "model_load_path", ")", "\n", "", "else", ":", "\n", "        ", "S", "=", "torch", ".", "load", "(", "config", ".", "model_load_path", ",", "map_location", "=", "\"cpu\"", ")", "\n", "\n", "", "model", ".", "load_state_dict", "(", "S", ")", "\n", "model", ".", "cuda", "(", ")", "\n", "model", ".", "eval", "(", ")", "\n", "return", "model", "", "", ""]]}