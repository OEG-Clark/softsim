{"home.repos.pwc.inspect_result.CRIPAC-DIG_NGNN.None.main_score.cm_ggnn": [[15, 269], ["numpy.sqrt", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "range", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.trainable_variables", "tensorflow.nn.sigmoid", "tensorflow.reduce_mean", "tensorflow.get_variable_scope().reuse_variables", "tensorflow.variable_scope", "model.model_score_in_out.GNN", "tensorflow.get_variable_scope().reuse_variables", "model.model_score_in_out.GNN", "tensorflow.matmul", "tensorflow.nn.sigmoid", "tensorflow.matmul", "tensorflow.maximum", "tensorflow.matmul", "tensorflow.nn.sigmoid", "tensorflow.matmul", "tensorflow.maximum", "print", "tensorflow.train.AdamOptimizer().minimize", "tensorflow.train.MomentumOptimizer().minimize", "tensorflow.train.RMSPropOptimizer().minimize", "tensorflow.train.AdadeltaOptimizer().minimize", "tensorflow.Session", "sess.run", "tensorflow.train.Saver", "util.load_data_score_graph.load_train_size", "print", "int", "print", "range", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.contrib.layers.l2_regularizer", "tensorflow.initialize_all_variables", "tensorflow.global_variables_initializer", "range", "print", "print", "print", "int", "range", "print", "float", "print", "print", "print", "print", "tensorflow.get_variable_scope", "tensorflow.get_variable_scope", "tensorflow.train.AdamOptimizer", "tensorflow.train.MomentumOptimizer", "tensorflow.train.RMSPropOptimizer", "tensorflow.train.AdadeltaOptimizer", "int", "int", "util.load_data_score_graph.load_train_data", "sess.run", "numpy.asarray", "range", "tf.train.Saver.save", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "sess.run", "range", "str", "tensorflow.__version__.split", "tensorflow.__version__.split", "print", "print", "int", "range", "print", "float", "print", "print", "print", "print", "a.append", "numpy.argmax", "datetime.now", "sess.run", "numpy.asarray", "range", "range", "str", "a.append", "numpy.argmax", "datetime.now"], "function", ["home.repos.pwc.inspect_result.CRIPAC-DIG_NGNN.model.model_multimodal.GNN", "home.repos.pwc.inspect_result.CRIPAC-DIG_NGNN.model.model_multimodal.GNN", "home.repos.pwc.inspect_result.CRIPAC-DIG_NGNN.util.load_data_multimodal.load_train_size", "home.repos.pwc.inspect_result.CRIPAC-DIG_NGNN.util.load_data_multimodal.load_train_data"], ["def", "cm_ggnn", "(", "batch_size", ",", "hidden_size", ",", "n_steps", ",", "learning_rate", ",", "G", ",", "num_category", ",", "opt", ",", "i", ",", "beta", ")", ":", "\n", "\n", "    ", "hidden_stdv", "=", "np", ".", "sqrt", "(", "1.", "/", "(", "hidden_size", ")", ")", "\n", "if", "i", "==", "0", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "\"cm_ggnn\"", ",", "reuse", "=", "None", ")", ":", "\n", "# w_conf1 = tf.Variable(tf.random_normal([2048+hidden_size, hidden_size]), name='gnn/w/conf_1')", "\n", "            ", "w_conf2", "=", "tf", ".", "get_variable", "(", "name", "=", "'gnn/w/conf_2'", ",", "shape", "=", "[", "hidden_size", ",", "1", "]", ",", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "hidden_stdv", ")", ")", "\n", "# w_score1 = tf.Variable(tf.random_normal([2048 + hidden_size, hidden_size]), name='gnn/w/score_1')", "\n", "w_score2", "=", "tf", ".", "get_variable", "(", "name", "=", "'gnn/w/score_2'", ",", "shape", "=", "[", "hidden_size", ",", "1", "]", ",", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "hidden_stdv", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "tf", ".", "get_variable_scope", "(", ")", ".", "reuse_variables", "(", ")", "\n", "\n", "#################feed#######################", "\n", "", "image_pos", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "batch_size", ",", "num_category", ",", "2048", "]", ")", "\n", "image_neg", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "batch_size", ",", "num_category", ",", "2048", "]", ")", "\n", "graph_pos", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "batch_size", ",", "num_category", ",", "num_category", "]", ")", "\n", "graph_neg", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "batch_size", ",", "num_category", ",", "num_category", "]", ")", "\n", "\n", "##################GGNN's output###################", "\n", "with", "tf", ".", "variable_scope", "(", "\"gnn\"", ",", "reuse", "=", "None", ")", ":", "\n", "        ", "state_pos", ",", "test1", "=", "GNN", "(", "image_pos", ",", "batch_size", ",", "hidden_size", ",", "n_steps", ",", "num_category", ",", "graph_pos", ")", "#output: [batch_size, num_category, 2048]", "\n", "tf", ".", "get_variable_scope", "(", ")", ".", "reuse_variables", "(", ")", "\n", "state_neg", ",", "test2", "=", "GNN", "(", "image_neg", ",", "batch_size", ",", "hidden_size", ",", "n_steps", ",", "num_category", ",", "graph_neg", ")", "\n", "\n", "##################predict positive###################", "\n", "", "for", "j", "in", "range", "(", "num_category", ")", ":", "\n", "# state_image_pos = tf.concat([tf.reshape(state_pos[:, j, :], [-1, hidden_size]),", "\n", "#                              tf.reshape(image_pos[:, j, :], [-1, 2048])], 1)", "\n", "# conf_pos = tf.matmul(state_image_pos, w_conf1)", "\n", "# conf_pos = tf.nn.tanh(conf_pos)", "\n", "# conf_pos = tf.reshape(tf.matmul(conf_pos, w_conf2), [-1])", "\n", "# conf_pos = tf.nn.sigmoid(conf_pos)", "\n", "        ", "conf_pos", "=", "tf", ".", "matmul", "(", "tf", ".", "reshape", "(", "state_pos", "[", ":", ",", "j", ",", ":", "]", ",", "[", "-", "1", ",", "hidden_size", "]", ")", ",", "w_conf2", ")", "\n", "conf_pos", "=", "tf", ".", "nn", ".", "sigmoid", "(", "conf_pos", ")", "\n", "\n", "# score_pos = tf.matmul(state_image_pos, w_score1)", "\n", "# score_pos = tf.nn.tanh(score_pos)", "\n", "# score_pos = tf.reshape(tf.matmul(score_pos, w_score2), [-1])", "\n", "# score_pos = tf.nn.tanh(score_pos)", "\n", "score_pos", "=", "tf", ".", "matmul", "(", "tf", ".", "reshape", "(", "state_pos", "[", ":", ",", "j", ",", ":", "]", ",", "[", "-", "1", ",", "hidden_size", "]", ")", ",", "w_score2", ")", "\n", "# score_pos = tf.nn.relu(score_pos)", "\n", "score_pos", "=", "tf", ".", "maximum", "(", "0.01", "*", "score_pos", ",", "score_pos", ")", "\n", "\n", "# state_image_neg = tf.concat([tf.reshape(state_neg[:, j, :], [-1, hidden_size]),", "\n", "#                              tf.reshape(image_neg[:, j, :], [-1, 2048])], 1)", "\n", "# conf_neg = tf.matmul(state_image_neg, w_conf1)", "\n", "# conf_neg = tf.nn.tanh(conf_neg)", "\n", "# conf_neg = tf.reshape(tf.matmul(conf_neg, w_conf2), [-1])", "\n", "# conf_neg = tf.nn.sigmoid(conf_neg)", "\n", "conf_neg", "=", "tf", ".", "matmul", "(", "tf", ".", "reshape", "(", "state_neg", "[", ":", ",", "j", ",", ":", "]", ",", "[", "-", "1", ",", "hidden_size", "]", ")", ",", "w_conf2", ")", "\n", "conf_neg", "=", "tf", ".", "nn", ".", "sigmoid", "(", "conf_neg", ")", "\n", "\n", "# score_neg = tf.matmul(state_image_neg, w_score1)", "\n", "# score_neg = tf.nn.tanh(score_neg)", "\n", "# score_neg = tf.reshape(tf.matmul(score_neg, w_score2), [-1])", "\n", "# score_neg = tf.nn.tanh(score_neg)", "\n", "score_neg", "=", "tf", ".", "matmul", "(", "tf", ".", "reshape", "(", "state_neg", "[", ":", ",", "j", ",", ":", "]", ",", "[", "-", "1", ",", "hidden_size", "]", ")", ",", "w_score2", ")", "\n", "# score_neg = tf.nn.relu(score_neg)", "\n", "score_neg", "=", "tf", ".", "maximum", "(", "0.01", "*", "score_neg", ",", "score_neg", ")", "\n", "\n", "\n", "if", "j", "==", "0", ":", "\n", "            ", "s_pos", "=", "score_pos", "*", "conf_pos", "\n", "s_neg", "=", "score_neg", "*", "conf_neg", "\n", "", "else", ":", "\n", "            ", "s_pos", "+=", "score_pos", "*", "conf_pos", "\n", "s_neg", "+=", "score_neg", "*", "conf_neg", "\n", "\n", "", "", "s_pos", "=", "tf", ".", "reshape", "(", "s_pos", ",", "[", "-", "1", ",", "1", "]", ")", "\n", "s_neg", "=", "tf", ".", "reshape", "(", "s_neg", ",", "[", "-", "1", ",", "1", "]", ")", "\n", "\n", "s_pos", "=", "tf", ".", "reshape", "(", "s_pos", ",", "[", "batch_size", ",", "1", "]", ")", "\n", "s_neg", "=", "tf", ".", "reshape", "(", "s_neg", ",", "[", "batch_size", ",", "1", "]", ")", "\n", "s_pos_mean", "=", "tf", ".", "reduce_mean", "(", "s_pos", ")", "\n", "s_neg_mean", "=", "tf", ".", "reduce_mean", "(", "s_neg", ")", "\n", "##################cost, optimizer###################", "\n", "cost_parameter", "=", "0.", "\n", "num_parameter", "=", "0.", "\n", "for", "variable", "in", "tf", ".", "trainable_variables", "(", ")", ":", "\n", "        ", "print", "(", "variable", ")", "\n", "cost_parameter", "+=", "tf", ".", "contrib", ".", "layers", ".", "l2_regularizer", "(", "beta", ")", "(", "variable", ")", "\n", "num_parameter", "+=", "1.", "\n", "", "cost_parameter", "/=", "num_parameter", "\n", "score", "=", "tf", ".", "nn", ".", "sigmoid", "(", "s_pos", "-", "s_neg", ")", "\n", "score_mean", "=", "tf", ".", "reduce_mean", "(", "score", ")", "\n", "cost", "=", "-", "score_mean", "\n", "\n", "if", "opt", "==", "'Adam'", ":", "\n", "        ", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", ")", ".", "minimize", "(", "cost", ")", "\n", "", "if", "opt", "==", "'Momentum'", ":", "\n", "        ", "optimizer", "=", "tf", ".", "train", ".", "MomentumOptimizer", "(", "learning_rate", ",", "0.9", ")", ".", "minimize", "(", "cost", ")", "\n", "", "if", "opt", "==", "'RMSProp'", ":", "\n", "        ", "optimizer", "=", "tf", ".", "train", ".", "RMSPropOptimizer", "(", "learning_rate", ")", ".", "minimize", "(", "cost", ")", "\n", "", "if", "opt", "==", "'Adadelta'", ":", "\n", "        ", "optimizer", "=", "tf", ".", "train", ".", "AdadeltaOptimizer", "(", "learning_rate", ")", ".", "minimize", "(", "cost", ")", "\n", "\n", "\n", "", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICES\"", "]", "=", "'0'", "\n", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "\n", "# initialize the graph", "\n", "# 2017-03-02 if using tensorflow >= 0.12", "\n", "        ", "if", "int", "(", "(", "tf", ".", "__version__", ")", ".", "split", "(", "'.'", ")", "[", "1", "]", ")", "<", "12", "and", "int", "(", "(", "tf", ".", "__version__", ")", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", "<", "1", ":", "\n", "            ", "init", "=", "tf", ".", "initialize_all_variables", "(", ")", "\n", "", "else", ":", "\n", "            ", "init", "=", "tf", ".", "global_variables_initializer", "(", ")", "\n", "", "sess", ".", "run", "(", "init", ")", "\n", "\n", "######record######", "\n", "best_accurancy", "=", "0.", "\n", "best_epoch", "=", "0", "\n", "saver", "=", "tf", ".", "train", ".", "Saver", "(", ")", "\n", "\n", "train_size", ",", "train_size_", "=", "load_train_size", "(", ")", "\n", "print", "(", "'train_size is %d'", "%", "train_size_", ")", "\n", "train_batch", "=", "int", "(", "train_size_", "/", "batch_size", ")", "\n", "print", "(", "'train_batch is %d'", "%", "train_batch", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "20", ")", ":", "\n", "#########train##########", "\n", "            ", "no_count", "=", "0", "\n", "c_all", "=", "0.", "\n", "score_all", "=", "0.", "\n", "para_all", "=", "0.", "\n", "dis_pos_all", "=", "0.", "\n", "dis_neg_all", "=", "0.", "\n", "for", "i", "in", "range", "(", "train_batch", ")", ":", "\n", "                ", "train_image_pos", ",", "train_image_neg", ",", "train_graph_pos", ",", "train_graph_neg", ",", "size_", "=", "load_train_data", "(", "i", ",", "batch_size", ")", "\n", "if", "size_", ">=", "batch_size", ":", "\n", "                    ", "image_pos_", "=", "train_image_pos", "[", "0", ":", "batch_size", "]", "\n", "image_neg_", "=", "train_image_neg", "[", "0", ":", "batch_size", "]", "\n", "train_graph_pos_", "=", "train_graph_pos", "[", "0", ":", "batch_size", "]", "\n", "train_graph_neg_", "=", "train_graph_neg", "[", "0", ":", "batch_size", "]", "\n", "# _, c, c_pred, dis_pos_, dis_neg_, conf_pos_, conf_neg_ = sess.run([optimizer, cost, cost_pred,", "\n", "#                                                         dis_pos_mean, dis_neg_mean, conf_pos_mean, conf_neg_mean],", "\n", "_", ",", "c", ",", "score", ",", "c_parameter", ",", "dis_pos_", ",", "dis_neg_", "=", "sess", ".", "run", "(", "\n", "[", "optimizer", ",", "cost", ",", "score_mean", ",", "cost_parameter", ",", "\n", "s_pos_mean", ",", "s_neg_mean", "]", ",", "\n", "feed_dict", "=", "{", "image_pos", ":", "image_pos_", ",", "\n", "image_neg", ":", "image_neg_", ",", "\n", "graph_pos", ":", "train_graph_pos_", ",", "\n", "graph_neg", ":", "train_graph_neg_", "}", ")", "\n", "c_all", "+=", "c", "\n", "score_all", "+=", "score", "\n", "para_all", "+=", "c_parameter", "\n", "dis_pos_all", "+=", "dis_pos_", "\n", "dis_neg_all", "+=", "dis_neg_", "\n", "\n", "if", "i", "%", "2000", "==", "0", ":", "\n", "                        ", "print", "(", "'now batch: %d, total batch: %d'", "%", "(", "i", ",", "train_batch", ")", ")", "\n", "print", "(", "'less than batch size: %d'", "%", "no_count", ")", "\n", "c_average", "=", "c_all", "/", "(", "i", "+", "1", ")", "\n", "score_average", "=", "score_all", "/", "(", "i", "+", "1", ")", "\n", "para_average", "=", "para_all", "/", "(", "i", "+", "1", ")", "\n", "dis_pos_average", "=", "dis_pos_all", "/", "(", "i", "+", "1", ")", "\n", "dis_neg_average", "=", "dis_neg_all", "/", "(", "i", "+", "1", ")", "\n", "\n", "############test############", "\n", "batches", "=", "int", "(", "(", "test_size", "*", "4", ")", "/", "batch_size", ")", "\n", "right", "=", "0.", "\n", "for", "ii", "in", "range", "(", "batches", ")", ":", "\n", "                            ", "answer", ",", "result_test", ",", "result_state_pos", "=", "sess", ".", "run", "(", "[", "s_pos", ",", "test1", ",", "state_pos", "]", ",", "\n", "feed_dict", "=", "{", "image_pos", ":", "test_image", "[", "ii", "*", "batch_size", ":", "(", "ii", "+", "1", ")", "*", "batch_size", "]", ",", "\n", "graph_pos", ":", "test_graph", "[", "ii", "*", "batch_size", ":", "(", "ii", "+", "1", ")", "*", "batch_size", "]", "}", "\n", ")", "\n", "answer", "=", "np", ".", "asarray", "(", "answer", ")", "\n", "\n", "for", "j", "in", "range", "(", "batch_size", "/", "4", ")", ":", "\n", "                                ", "a", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "j", "*", "4", ",", "(", "j", "+", "1", ")", "*", "4", ")", ":", "\n", "                                    ", "a", ".", "append", "(", "answer", "[", "k", "]", "[", "0", "]", ")", "\n", "", "if", "np", ".", "argmax", "(", "a", ")", "==", "0", ":", "\n", "                                    ", "right", "+=", "1.", "\n", "\n", "", "", "", "print", "(", "answer", ")", "\n", "# print(\"result_state(0 row)\")", "\n", "# print(result_state_pos[0])", "\n", "# print(\"result_test(0 row)\")", "\n", "# print(result_test[0])", "\n", "# print(\"graph_nodes\")", "\n", "# for graph_ in test_graph[ii * batch_size:(ii + 1) * batch_size]:", "\n", "#     print (look_enable_node(graph_))", "\n", "\n", "accurancy", "=", "float", "(", "right", "/", "test_size", ")", "\n", "\n", "if", "accurancy", ">", "best_accurancy", ":", "\n", "                            ", "best_accurancy", "=", "accurancy", "\n", "best_epoch", "=", "epoch", "\n", "# saver.save(sess, \"trained_model/cm_ggnn.ckpt\")", "\n", "\n", "", "print", "(", "'now():'", "+", "str", "(", "datetime", ".", "now", "(", ")", ")", ")", "\n", "print", "(", "\"Train Epoch:\"", ",", "'%d'", "%", "epoch", ",", "\"Batch:\"", ",", "'%d'", "%", "i", ",", "\n", "\"total cost:\"", ",", "\"{:.9f}\"", ".", "format", "(", "c_average", ")", ",", "\"pred score distance:\"", ",", "\"{:.9f}\"", ".", "format", "(", "score_average", ")", ",", "\n", "\"parameter cost:\"", ",", "\"{:.9f}\"", ".", "format", "(", "para_average", ")", ",", "\"postive score:\"", ",", "\"{:.9f}\"", ".", "format", "(", "dis_pos_average", ")", ",", "\n", "\"negative score:\"", ",", "\"{:.9f}\"", ".", "format", "(", "dis_neg_average", ")", ",", "\n", "\"accurancy:\"", ",", "\".{:.9f}\"", ".", "format", "(", "accurancy", ")", ")", "\n", "print", "(", "\"Epoch:\"", ",", "'%d'", "%", "epoch", ",", "\"finished\"", ",", "\"Best accurancy: %f\"", "%", "best_accurancy", ",", "\n", "\"Best epoch: %d\"", "%", "best_epoch", ")", "\n", "print", "(", "\"batch_size: %d, hidden_size: %d, n_steps: %d, learning_rate: %f\"", "%", "(", "\n", "batch_size", ",", "hidden_size", ",", "n_steps", ",", "learning_rate", ")", ")", "\n", "\n", "", "", "else", ":", "\n", "                    ", "no_count", "+=", "1", "\n", "\n", "", "", "c_average", "=", "c_all", "/", "train_batch", "\n", "score_average", "=", "score_all", "/", "train_batch", "\n", "para_average", "=", "para_all", "/", "train_batch", "\n", "dis_pos_average", "=", "dis_pos_all", "/", "train_batch", "\n", "dis_neg_average", "=", "dis_neg_all", "/", "train_batch", "\n", "\n", "print", "(", "\"Train Epoch:\"", ",", "'%d'", "%", "epoch", ",", "\"finished\"", ",", "\n", "\"total cost:\"", ",", "\"{:.9f}\"", ".", "format", "(", "c_average", ")", ",", "\"pred score distance:\"", ",", "\"{:.9f}\"", ".", "format", "(", "score_average", ")", ",", "\n", "\"parameter cost:\"", ",", "\"{:.9f}\"", ".", "format", "(", "para_average", ")", ",", "\n", "\"postive score:\"", ",", "\"{:.9f}\"", ".", "format", "(", "dis_pos_average", ")", ",", "\"negative score:\"", ",", "\"{:.9f}\"", ".", "format", "(", "dis_neg_average", ")", ")", "\n", "print", "(", "\"Epoch:\"", ",", "'%d'", "%", "epoch", ",", "\"finished\"", ",", "\"Best accurancy: %f\"", "%", "best_accurancy", ",", "\n", "\"Best epoch: %d\"", "%", "best_epoch", ")", "\n", "print", "(", "\"batch_size: %d, hidden_size: %d, n_steps: %d, learning_rate: %f\"", "%", "(", "\n", "batch_size", ",", "hidden_size", ",", "n_steps", ",", "learning_rate", ")", ")", "\n", "\n", "############test############", "\n", "batches", "=", "int", "(", "(", "test_size", "*", "4", ")", "/", "batch_size", ")", "\n", "right", "=", "0.", "\n", "for", "i", "in", "range", "(", "batches", ")", ":", "\n", "                ", "answer", ",", "result_state_pos", "=", "sess", ".", "run", "(", "[", "s_pos", ",", "state_pos", "]", ",", "\n", "feed_dict", "=", "{", "image_pos", ":", "test_image", "[", "i", "*", "batch_size", ":", "(", "i", "+", "1", ")", "*", "batch_size", "]", ",", "\n", "graph_pos", ":", "test_graph", "[", "i", "*", "batch_size", ":", "(", "i", "+", "1", ")", "*", "batch_size", "]", "}", "\n", ")", "\n", "answer", "=", "np", ".", "asarray", "(", "answer", ")", "\n", "\n", "for", "j", "in", "range", "(", "batch_size", "/", "4", ")", ":", "\n", "                    ", "a", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "j", "*", "4", ",", "(", "j", "+", "1", ")", "*", "4", ")", ":", "\n", "                        ", "a", ".", "append", "(", "answer", "[", "k", "]", "[", "0", "]", ")", "\n", "", "if", "np", ".", "argmax", "(", "a", ")", "==", "0", ":", "\n", "                        ", "right", "+=", "1.", "\n", "", "", "", "print", "(", "answer", ")", "\n", "# print(\"result_state_pos\")", "\n", "# # print(result_state_pos)", "\n", "accurancy", "=", "float", "(", "right", "/", "test_size", ")", "\n", "print", "(", "\"Test Epoch:\"", ",", "'%d'", "%", "epoch", ",", "\"accuracy:\"", ",", "\"{:.9f}\"", ".", "format", "(", "accurancy", ")", ")", "\n", "\n", "if", "accurancy", ">", "best_accurancy", ":", "\n", "                ", "best_accurancy", "=", "accurancy", "\n", "best_epoch", "=", "epoch", "\n", "saver", ".", "save", "(", "sess", ",", "\"trained_model/cm_ggnn.ckpt\"", ")", "\n", "\n", "", "print", "(", "'now():'", "+", "str", "(", "datetime", ".", "now", "(", ")", ")", ")", "\n", "print", "(", "\"batch_size: %d, hidden_size: %d, n_steps: %d, learning_rate: %f\"", "%", "(", "\n", "batch_size", ",", "hidden_size", ",", "n_steps", ",", "learning_rate", ")", ")", "\n", "print", "(", "\"Epoch:\"", ",", "'%d'", "%", "epoch", ",", "\"finished\"", ",", "\"Best accurancy: %f\"", "%", "best_accurancy", ",", "\n", "\"Best epoch: %d\"", "%", "best_epoch", ")", "\n", "\n", "\n", "", "", "return", "best_accurancy", "\n", "\n"]], "home.repos.pwc.inspect_result.CRIPAC-DIG_NGNN.None.main_score.look_enable_node": [[271, 278], ["numpy.sum", "enumerate", "index_list.append"], "function", ["None"], ["", "def", "look_enable_node", "(", "graph", ")", ":", "\n", "    ", "if_enable", "=", "np", ".", "sum", "(", "graph", ",", "axis", "=", "1", ")", "\n", "index_list", "=", "[", "]", "\n", "for", "index", ",", "value", "in", "enumerate", "(", "if_enable", ")", ":", "\n", "        ", "if", "value", ">", "0", ":", "\n", "            ", "index_list", ".", "append", "(", "index", ")", "\n", "", "", "return", "index_list", "\n", "\n"]], "home.repos.pwc.inspect_result.CRIPAC-DIG_NGNN.None.main_multi_modal.cm_ggnn": [[19, 328], ["numpy.sqrt", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "range", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.trainable_variables", "tensorflow.nn.sigmoid", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.variable_scope", "model_multimodal_1.GNN", "tensorflow.get_variable_scope().reuse_variables", "model_multimodal_1.GNN", "tensorflow.variable_scope", "model_multimodal_1.GNN", "tensorflow.get_variable_scope().reuse_variables", "model_multimodal_1.GNN", "tensorflow.nn.sigmoid", "tensorflow.reshape", "tensorflow.maximum", "tensorflow.reshape", "tensorflow.nn.sigmoid", "tensorflow.reshape", "tensorflow.maximum", "tensorflow.reshape", "tensorflow.nn.sigmoid", "tensorflow.reshape", "tensorflow.maximum", "tensorflow.reshape", "tensorflow.nn.sigmoid", "tensorflow.reshape", "tensorflow.maximum", "tensorflow.reshape", "print", "tensorflow.square", "tensorflow.train.AdamOptimizer().minimize", "tensorflow.train.MomentumOptimizer().minimize", "tensorflow.train.RMSPropOptimizer().minimize", "tensorflow.train.AdadeltaOptimizer().minimize", "tensorflow.Session", "sess.run", "tensorflow.train.Saver", "load_data_multimodal.load_train_size", "print", "int", "print", "range", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.variable_scope", "tensorflow.get_variable_scope().reuse_variables", "tensorflow.reshape", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.reshape", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.reshape", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.reshape", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.concat", "tensorflow.concat", "tensorflow.contrib.layers.l2_regularizer", "tensorflow.initialize_all_variables", "tensorflow.global_variables_initializer", "range", "print", "print", "print", "int", "range", "print", "float", "int", "range", "print", "float", "print", "print", "print", "print", "tensorflow.get_variable_scope", "tensorflow.get_variable_scope", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.train.AdamOptimizer", "tensorflow.train.MomentumOptimizer", "tensorflow.train.RMSPropOptimizer", "tensorflow.train.AdadeltaOptimizer", "int", "int", "load_data_multimodal.load_train_data", "load_data_multimodal.load_fitb_data", "sess.run", "numpy.asarray", "range", "load_data_multimodal.load_auc_data", "sess.run", "numpy.asarray", "range", "tf.train.Saver.save", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.get_variable_scope", "sess.run", "range", "range", "str", "tensorflow.__version__.split", "tensorflow.__version__.split", "print", "print", "load_data_multimodal.load_test_size", "int", "range", "print", "float", "load_data_multimodal.load_test_size", "int", "range", "print", "float", "print", "print", "print", "print", "a.append", "numpy.argmax", "a.append", "numpy.argmax", "datetime.now", "load_data_multimodal.load_fitb_data", "sess.run", "numpy.asarray", "range", "load_data_multimodal.load_auc_data", "sess.run", "numpy.asarray", "range", "range", "range", "str", "a.append", "numpy.argmax", "a.append", "numpy.argmax", "datetime.now"], "function", ["home.repos.pwc.inspect_result.CRIPAC-DIG_NGNN.model.model_multimodal.GNN", "home.repos.pwc.inspect_result.CRIPAC-DIG_NGNN.model.model_multimodal.GNN", "home.repos.pwc.inspect_result.CRIPAC-DIG_NGNN.model.model_multimodal.GNN", "home.repos.pwc.inspect_result.CRIPAC-DIG_NGNN.model.model_multimodal.GNN", "home.repos.pwc.inspect_result.CRIPAC-DIG_NGNN.util.load_data_multimodal.load_train_size", "home.repos.pwc.inspect_result.CRIPAC-DIG_NGNN.util.load_data_multimodal.load_train_data", "home.repos.pwc.inspect_result.CRIPAC-DIG_NGNN.util.load_data_multimodal.load_fitb_data", "home.repos.pwc.inspect_result.CRIPAC-DIG_NGNN.util.load_data_multimodal.load_auc_data", "home.repos.pwc.inspect_result.CRIPAC-DIG_NGNN.util.load_data_multimodal.load_test_size", "home.repos.pwc.inspect_result.CRIPAC-DIG_NGNN.util.load_data_multimodal.load_test_size", "home.repos.pwc.inspect_result.CRIPAC-DIG_NGNN.util.load_data_multimodal.load_fitb_data", "home.repos.pwc.inspect_result.CRIPAC-DIG_NGNN.util.load_data_multimodal.load_auc_data"], ["def", "cm_ggnn", "(", "batch_size", ",", "image_hidden_size", ",", "text_hidden_size", ",", "n_steps", ",", "learning_rate", ",", "G", ",", "num_category", ",", "opt", ",", "i", ",", "beta", ")", ":", "\n", "\n", "    ", "hidden_stdv", "=", "np", ".", "sqrt", "(", "1.", "/", "(", "image_hidden_size", ")", ")", "\n", "if", "i", "==", "0", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "\"cm_ggnn\"", ",", "reuse", "=", "None", ")", ":", "\n", "            ", "w_conf_image", "=", "tf", ".", "get_variable", "(", "name", "=", "'gnn/w/conf_image'", ",", "shape", "=", "[", "image_hidden_size", ",", "1", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "hidden_stdv", ")", ")", "\n", "w_score_image", "=", "tf", ".", "get_variable", "(", "name", "=", "'gnn/w/score_image'", ",", "shape", "=", "[", "image_hidden_size", ",", "1", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "hidden_stdv", ")", ")", "\n", "w_conf_text", "=", "tf", ".", "get_variable", "(", "name", "=", "'gnn/w/conf_text'", ",", "shape", "=", "[", "text_hidden_size", ",", "1", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "hidden_stdv", ")", ")", "\n", "w_score_text", "=", "tf", ".", "get_variable", "(", "name", "=", "'gnn/w/score_text'", ",", "shape", "=", "[", "text_hidden_size", ",", "1", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "hidden_stdv", ")", ")", "\n", "#w_atten = tf.get_variable(name='gnn/w/atten', shape=[num_category, num_category], initializer=tf.random_normal_initializer(num_stdv))", "\n", "", "", "else", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "\"cm_ggnn\"", ")", ":", "\n", "            ", "tf", ".", "get_variable_scope", "(", ")", ".", "reuse_variables", "(", ")", "\n", "\n", "#################feed#######################", "\n", "", "", "image_pos", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "batch_size", ",", "num_category", ",", "2048", "]", ")", "\n", "image_neg", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "batch_size", ",", "num_category", ",", "2048", "]", ")", "\n", "text_pos", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "batch_size", ",", "num_category", ",", "2757", "]", ")", "\n", "text_neg", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "batch_size", ",", "num_category", ",", "2757", "]", ")", "\n", "graph_pos", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "batch_size", ",", "num_category", ",", "num_category", "]", ")", "\n", "graph_neg", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "batch_size", ",", "num_category", ",", "num_category", "]", ")", "\n", "\n", "##################GGNN's output###################", "\n", "with", "tf", ".", "variable_scope", "(", "\"gnn_image\"", ",", "reuse", "=", "None", ")", ":", "\n", "        ", "image_state_pos", ",", "image_ini", "=", "GNN", "(", "'image'", ",", "image_pos", ",", "batch_size", ",", "image_hidden_size", ",", "n_steps", ",", "num_category", ",", "graph_pos", ")", "#output: [batch_size, num_category, 2048]", "\n", "tf", ".", "get_variable_scope", "(", ")", ".", "reuse_variables", "(", ")", "\n", "image_state_neg", ",", "text_ini", "=", "GNN", "(", "'image'", ",", "image_neg", ",", "batch_size", ",", "image_hidden_size", ",", "n_steps", ",", "num_category", ",", "graph_neg", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "\"gnn_text\"", ",", "reuse", "=", "None", ")", ":", "\n", "        ", "text_state_pos", ",", "test2", "=", "GNN", "(", "'text'", ",", "text_pos", ",", "batch_size", ",", "text_hidden_size", ",", "n_steps", ",", "num_category", ",", "graph_pos", ")", "\n", "tf", ".", "get_variable_scope", "(", ")", ".", "reuse_variables", "(", ")", "\n", "text_state_neg", ",", "test2", "=", "GNN", "(", "'text'", ",", "text_neg", ",", "batch_size", ",", "text_hidden_size", ",", "n_steps", ",", "num_category", ",", "graph_neg", ")", "\n", "\n", "##################predict positive###################", "\n", "", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "\n", "        ", "image_conf_pos", "=", "tf", ".", "nn", ".", "sigmoid", "(", "tf", ".", "reshape", "(", "tf", ".", "matmul", "(", "image_state_pos", "[", "i", "]", ",", "w_conf_image", ")", ",", "[", "1", ",", "num_category", "]", ")", ")", "\n", "image_score_pos", "=", "tf", ".", "reshape", "(", "tf", ".", "matmul", "(", "image_state_pos", "[", "i", "]", ",", "w_score_image", ")", ",", "[", "num_category", ",", "1", "]", ")", "\n", "image_score_pos", "=", "tf", ".", "maximum", "(", "0.01", "*", "image_score_pos", ",", "image_score_pos", ")", "\n", "image_score_pos", "=", "tf", ".", "reshape", "(", "tf", ".", "matmul", "(", "image_conf_pos", ",", "image_score_pos", ")", ",", "[", "1", "]", ")", "\n", "text_conf_pos", "=", "tf", ".", "nn", ".", "sigmoid", "(", "tf", ".", "reshape", "(", "tf", ".", "matmul", "(", "text_state_pos", "[", "i", "]", ",", "w_conf_text", ")", ",", "[", "1", ",", "num_category", "]", ")", ")", "\n", "text_score_pos", "=", "tf", ".", "reshape", "(", "tf", ".", "matmul", "(", "text_state_pos", "[", "i", "]", ",", "w_score_text", ")", ",", "[", "num_category", ",", "1", "]", ")", "\n", "text_score_pos", "=", "tf", ".", "maximum", "(", "0.01", "*", "text_score_pos", ",", "text_score_pos", ")", "\n", "text_score_pos", "=", "tf", ".", "reshape", "(", "tf", ".", "matmul", "(", "text_conf_pos", ",", "text_score_pos", ")", ",", "[", "1", "]", ")", "\n", "score_pos", "=", "beta", "*", "image_score_pos", "+", "(", "1", "-", "beta", ")", "*", "text_score_pos", "\n", "\n", "\n", "image_conf_neg", "=", "tf", ".", "nn", ".", "sigmoid", "(", "tf", ".", "reshape", "(", "tf", ".", "matmul", "(", "image_state_neg", "[", "i", "]", ",", "w_conf_image", ")", ",", "[", "1", ",", "num_category", "]", ")", ")", "\n", "image_score_neg", "=", "tf", ".", "reshape", "(", "tf", ".", "matmul", "(", "image_state_neg", "[", "i", "]", ",", "w_score_image", ")", ",", "[", "num_category", ",", "1", "]", ")", "\n", "image_score_neg", "=", "tf", ".", "maximum", "(", "0.01", "*", "image_score_neg", ",", "image_score_neg", ")", "\n", "image_score_neg", "=", "tf", ".", "reshape", "(", "tf", ".", "matmul", "(", "image_conf_neg", ",", "image_score_neg", ")", ",", "[", "1", "]", ")", "\n", "text_conf_neg", "=", "tf", ".", "nn", ".", "sigmoid", "(", "tf", ".", "reshape", "(", "tf", ".", "matmul", "(", "text_state_neg", "[", "i", "]", ",", "w_conf_text", ")", ",", "[", "1", ",", "num_category", "]", ")", ")", "\n", "text_score_neg", "=", "tf", ".", "reshape", "(", "tf", ".", "matmul", "(", "text_state_neg", "[", "i", "]", ",", "w_score_text", ")", ",", "[", "num_category", ",", "1", "]", ")", "\n", "text_score_neg", "=", "tf", ".", "maximum", "(", "0.01", "*", "text_score_neg", ",", "text_score_neg", ")", "\n", "text_score_neg", "=", "tf", ".", "reshape", "(", "tf", ".", "matmul", "(", "text_conf_neg", ",", "text_score_neg", ")", ",", "[", "1", "]", ")", "\n", "score_neg", "=", "beta", "*", "image_score_neg", "+", "(", "1", "-", "beta", ")", "*", "text_score_neg", "\n", "\n", "if", "i", "==", "0", ":", "\n", "            ", "s_pos", "=", "score_pos", "\n", "s_neg", "=", "score_neg", "\n", "", "else", ":", "\n", "            ", "s_pos", "=", "tf", ".", "concat", "(", "[", "s_pos", ",", "score_pos", "]", ",", "0", ")", "\n", "s_neg", "=", "tf", ".", "concat", "(", "[", "s_neg", ",", "score_neg", "]", ",", "0", ")", "\n", "\n", "", "", "s_pos", "=", "tf", ".", "reshape", "(", "s_pos", ",", "[", "batch_size", ",", "1", "]", ")", "\n", "s_neg", "=", "tf", ".", "reshape", "(", "s_neg", ",", "[", "batch_size", ",", "1", "]", ")", "\n", "\n", "s_pos_mean", "=", "tf", ".", "reduce_mean", "(", "s_pos", ")", "\n", "s_neg_mean", "=", "tf", ".", "reduce_mean", "(", "s_neg", ")", "\n", "\n", "##################cost, optimizer###################", "\n", "cost_parameter", "=", "0.", "\n", "num_parameter", "=", "0.", "\n", "for", "variable", "in", "tf", ".", "trainable_variables", "(", ")", ":", "\n", "        ", "print", "(", "variable", ")", "\n", "cost_parameter", "+=", "tf", ".", "contrib", ".", "layers", ".", "l2_regularizer", "(", "0.1", ")", "(", "variable", ")", "\n", "num_parameter", "+=", "1.", "\n", "", "cost_parameter", "/=", "num_parameter", "\n", "score", "=", "tf", ".", "nn", ".", "sigmoid", "(", "s_pos", "-", "s_neg", ")", "\n", "score_mean", "=", "tf", ".", "reduce_mean", "(", "score", ")", "\n", "cost_vt", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "square", "(", "image_ini", "-", "text_ini", ")", ")", "\n", "cost", "=", "-", "score_mean", "+", "5", "*", "cost_vt", "\n", "\n", "if", "opt", "==", "'Adam'", ":", "\n", "        ", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", ")", ".", "minimize", "(", "cost", ")", "\n", "", "if", "opt", "==", "'Momentum'", ":", "\n", "        ", "optimizer", "=", "tf", ".", "train", ".", "MomentumOptimizer", "(", "learning_rate", ",", "0.9", ")", ".", "minimize", "(", "cost", ")", "\n", "", "if", "opt", "==", "'RMSProp'", ":", "\n", "        ", "optimizer", "=", "tf", ".", "train", ".", "RMSPropOptimizer", "(", "learning_rate", ")", ".", "minimize", "(", "cost", ")", "\n", "", "if", "opt", "==", "'Adadelta'", ":", "\n", "        ", "optimizer", "=", "tf", ".", "train", ".", "AdadeltaOptimizer", "(", "learning_rate", ")", ".", "minimize", "(", "cost", ")", "\n", "\n", "\n", "", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICES\"", "]", "=", "'1'", "\n", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "\n", "# initialize the graph", "\n", "# 2017-03-02 if using tensorflow >= 0.12", "\n", "        ", "if", "int", "(", "(", "tf", ".", "__version__", ")", ".", "split", "(", "'.'", ")", "[", "1", "]", ")", "<", "12", "and", "int", "(", "(", "tf", ".", "__version__", ")", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", "<", "1", ":", "\n", "            ", "init", "=", "tf", ".", "initialize_all_variables", "(", ")", "\n", "", "else", ":", "\n", "            ", "init", "=", "tf", ".", "global_variables_initializer", "(", ")", "\n", "", "sess", ".", "run", "(", "init", ")", "\n", "\n", "######record######", "\n", "best_accurancy", "=", "0.", "\n", "best_auc", "=", "0.", "\n", "best_epoch", "=", "0", "\n", "saver", "=", "tf", ".", "train", ".", "Saver", "(", ")", "\n", "\n", "train_size", ",", "train_size_", "=", "load_train_size", "(", ")", "\n", "print", "(", "'train_size is %d'", "%", "train_size_", ")", "\n", "train_batch", "=", "int", "(", "train_size_", "/", "batch_size", ")", "\n", "print", "(", "'train_batch is %d'", "%", "train_batch", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "30", ")", ":", "\n", "#########train##########", "\n", "            ", "test_interval", "=", "2000", "\n", "if", "epoch", ">", "10", ":", "\n", "                ", "test_interval", "=", "1000", "\n", "\n", "", "no_count", "=", "0", "\n", "c_all", "=", "0.", "\n", "score_all", "=", "0.", "\n", "vt_all", "=", "0.", "\n", "dis_pos_all", "=", "0.", "\n", "dis_neg_all", "=", "0.", "\n", "for", "i", "in", "range", "(", "train_batch", ")", ":", "\n", "                ", "train_image_pos", ",", "train_image_neg", ",", "train_text_pos", ",", "train_text_neg", ",", "train_graph_pos", ",", "train_graph_neg", ",", "size_", "=", "load_train_data", "(", "i", ",", "batch_size", ",", "train_outfit_list", ")", "\n", "if", "size_", ">=", "batch_size", ":", "\n", "                    ", "image_pos_", "=", "train_image_pos", "[", "0", ":", "batch_size", "]", "\n", "image_neg_", "=", "train_image_neg", "[", "0", ":", "batch_size", "]", "\n", "text_pos_", "=", "train_text_pos", "[", "0", ":", "batch_size", "]", "\n", "text_neg_", "=", "train_text_neg", "[", "0", ":", "batch_size", "]", "\n", "train_graph_pos_", "=", "train_graph_pos", "[", "0", ":", "batch_size", "]", "\n", "train_graph_neg_", "=", "train_graph_neg", "[", "0", ":", "batch_size", "]", "\n", "# _, c, c_pred, dis_pos_, dis_neg_, conf_pos_, conf_neg_ = sess.run([optimizer, cost, cost_pred,", "\n", "#                                                         dis_pos_mean, dis_neg_mean, conf_pos_mean, conf_neg_mean],", "\n", "_", ",", "c", ",", "score", ",", "c_vt", ",", "dis_pos_", ",", "dis_neg_", "=", "sess", ".", "run", "(", "\n", "[", "optimizer", ",", "cost", ",", "score_mean", ",", "cost_vt", ",", "\n", "s_pos_mean", ",", "s_neg_mean", "]", ",", "\n", "feed_dict", "=", "{", "image_pos", ":", "image_pos_", ",", "\n", "image_neg", ":", "image_neg_", ",", "\n", "text_pos", ":", "text_pos_", ",", "\n", "text_neg", ":", "text_neg_", ",", "\n", "graph_pos", ":", "train_graph_pos_", ",", "\n", "graph_neg", ":", "train_graph_neg_", "}", ")", "\n", "c_all", "+=", "c", "\n", "score_all", "+=", "score", "\n", "vt_all", "+=", "c_vt", "\n", "dis_pos_all", "+=", "dis_pos_", "\n", "dis_neg_all", "+=", "dis_neg_", "\n", "\n", "\n", "if", "i", "%", "test_interval", "==", "0", ":", "\n", "                        ", "print", "(", "'now batch: %d, total batch: %d'", "%", "(", "i", ",", "train_batch", ")", ")", "\n", "print", "(", "'less than batch size: %d'", "%", "no_count", ")", "\n", "c_average", "=", "c_all", "/", "(", "i", "+", "1", ")", "\n", "score_average", "=", "score_all", "/", "(", "i", "+", "1", ")", "\n", "vt_average", "=", "vt_all", "/", "(", "i", "+", "1", ")", "\n", "dis_pos_average", "=", "dis_pos_all", "/", "(", "i", "+", "1", ")", "\n", "dis_neg_average", "=", "dis_neg_all", "/", "(", "i", "+", "1", ")", "\n", "\n", "############test############", "\n", "test_size_fitb", "=", "load_test_size", "(", ")", "\n", "batches", "=", "int", "(", "(", "test_size_fitb", "*", "4", ")", "/", "batch_size", ")", "\n", "right", "=", "0.", "\n", "for", "ii", "in", "range", "(", "batches", ")", ":", "\n", "                            ", "test_fitb", "=", "load_fitb_data", "(", "ii", ",", "batch_size", ",", "test_outfit_list", ")", "\n", "answer", "=", "sess", ".", "run", "(", "[", "s_pos", "]", ",", "feed_dict", "=", "{", "image_pos", ":", "test_fitb", "[", "0", "]", ",", "\n", "text_pos", ":", "test_fitb", "[", "1", "]", ",", "\n", "graph_pos", ":", "test_fitb", "[", "2", "]", "}", ")", "\n", "\n", "answer", "=", "np", ".", "asarray", "(", "answer", "[", "0", "]", ")", "\n", "\n", "for", "j", "in", "range", "(", "batch_size", "/", "4", ")", ":", "\n", "                                ", "a", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "j", "*", "4", ",", "(", "j", "+", "1", ")", "*", "4", ")", ":", "\n", "                                    ", "a", ".", "append", "(", "answer", "[", "k", "]", "[", "0", "]", ")", "\n", "", "if", "np", ".", "argmax", "(", "a", ")", "==", "0", ":", "\n", "                                    ", "right", "+=", "1.", "\n", "\n", "", "", "", "print", "(", "answer", ")", "\n", "accurancy", "=", "float", "(", "right", "/", "test_size_fitb", ")", "\n", "if", "accurancy", ">", "best_accurancy", ":", "\n", "                            ", "best_accurancy", "=", "accurancy", "\n", "best_epoch", "=", "epoch", "\n", "\n", "####### AUC #######", "\n", "", "test_size_auc", "=", "load_test_size", "(", ")", "\n", "batches", "=", "int", "(", "(", "test_size_auc", "*", "2", ")", "/", "batch_size", ")", "\n", "right", "=", "0.", "\n", "for", "ii", "in", "range", "(", "batches", ")", ":", "\n", "                            ", "test_auc", "=", "load_auc_data", "(", "ii", ",", "batch_size", ",", "test_outfit_list", ")", "\n", "answer", "=", "sess", ".", "run", "(", "[", "s_pos", "]", ",", "feed_dict", "=", "{", "image_pos", ":", "test_auc", "[", "0", "]", ",", "\n", "text_pos", ":", "test_auc", "[", "1", "]", ",", "\n", "graph_pos", ":", "test_auc", "[", "2", "]", "}", ")", "\n", "answer", "=", "np", ".", "asarray", "(", "answer", "[", "0", "]", ")", "\n", "\n", "for", "j", "in", "range", "(", "batch_size", "/", "2", ")", ":", "\n", "                                ", "a", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "j", "*", "2", ",", "(", "j", "+", "1", ")", "*", "2", ")", ":", "\n", "                                    ", "a", ".", "append", "(", "answer", "[", "k", "]", "[", "0", "]", ")", "\n", "", "if", "np", ".", "argmax", "(", "a", ")", "==", "0", ":", "\n", "                                    ", "right", "+=", "1.", "\n", "\n", "", "", "", "print", "(", "answer", ")", "\n", "auc", "=", "float", "(", "right", "/", "test_size_auc", ")", "\n", "\n", "if", "auc", ">", "best_auc", ":", "\n", "                            ", "best_auc", "=", "auc", "\n", "# saver.save(sess, \"trained_model/cm_ggnn.ckpt\")", "\n", "\n", "", "print", "(", "'now():'", "+", "str", "(", "datetime", ".", "now", "(", ")", ")", ")", "\n", "print", "(", "\"Train Epoch:\"", ",", "'%d'", "%", "epoch", ",", "\"Batch:\"", ",", "'%d'", "%", "i", ",", "\n", "\"total cost:\"", ",", "\"{:.9f}\"", ".", "format", "(", "c_average", ")", ",", "\"pred score distance:\"", ",", "\n", "\"{:.9f}\"", ".", "format", "(", "score_average", ")", ",", "\n", "\"vt cost:\"", ",", "\"{:.9f}\"", ".", "format", "(", "vt_average", ")", ",", "\"postive score:\"", ",", "\n", "\"{:.9f}\"", ".", "format", "(", "dis_pos_average", ")", ",", "\n", "\"negative score:\"", ",", "\"{:.9f}\"", ".", "format", "(", "dis_neg_average", ")", ",", "\n", "\"accurancy:\"", ",", "\".{:.9f}\"", ".", "format", "(", "accurancy", ")", ",", "\"auc:\"", ",", "\".{:.9f}\"", ".", "format", "(", "auc", ")", ")", "\n", "print", "(", "\"Epoch:\"", ",", "'%d'", "%", "epoch", ",", "\"finished\"", ",", "\"Best accurancy: %f\"", "%", "best_accurancy", ",", "\n", "\"Best auc: %f\"", "%", "best_auc", ",", "\n", "\"Best epoch: %d\"", "%", "best_epoch", ")", "\n", "print", "(", "\"batch_size: %d, image_hidden_size: %d, text_hidden_size: %d, n_steps: %d, learning_rate: %f\"", "%", "(", "\n", "batch_size", ",", "image_hidden_size", ",", "text_hidden_size", ",", "n_steps", ",", "learning_rate", ")", ")", "\n", "\n", "", "", "else", ":", "\n", "                    ", "no_count", "+=", "1", "\n", "\n", "", "", "c_average", "=", "c_all", "/", "train_batch", "\n", "score_average", "=", "score_all", "/", "train_batch", "\n", "vt_average", "=", "vt_all", "/", "train_batch", "\n", "dis_pos_average", "=", "dis_pos_all", "/", "train_batch", "\n", "dis_neg_average", "=", "dis_neg_all", "/", "train_batch", "\n", "\n", "print", "(", "\"Train Epoch:\"", ",", "'%d'", "%", "epoch", ",", "\"finished\"", ",", "\n", "\"total cost:\"", ",", "\"{:.9f}\"", ".", "format", "(", "c_average", ")", ",", "\"pred score distance:\"", ",", "\"{:.9f}\"", ".", "format", "(", "score_average", ")", ",", "\n", "\"vt cost:\"", ",", "\"{:.9f}\"", ".", "format", "(", "vt_average", ")", ",", "\n", "\"postive score:\"", ",", "\"{:.9f}\"", ".", "format", "(", "dis_pos_average", ")", ",", "\"negative score:\"", ",", "\n", "\"{:.9f}\"", ".", "format", "(", "dis_neg_average", ")", ")", "\n", "print", "(", "\"Epoch:\"", ",", "'%d'", "%", "epoch", ",", "\"finished\"", ",", "\"Best accurancy: %f\"", "%", "best_accurancy", ",", "\"Best auc: %f\"", "%", "best_auc", ",", "\n", "\"Best epoch: %d\"", "%", "best_epoch", ")", "\n", "print", "(", "\"batch_size: %d, image_hidden_size: %d, image_hidden_size: %d, n_steps: %d, learning_rate: %f\"", "%", "(", "\n", "batch_size", ",", "image_hidden_size", ",", "text_hidden_size", ",", "n_steps", ",", "learning_rate", ")", ")", "\n", "\n", "############test############", "\n", "batches", "=", "int", "(", "(", "test_size_fitb", "*", "4", ")", "/", "batch_size", ")", "\n", "right", "=", "0.", "\n", "for", "i", "in", "range", "(", "batches", ")", ":", "\n", "                ", "test_fitb", "=", "load_fitb_data", "(", "i", ",", "batch_size", ",", "test_outfit_list", ")", "\n", "answer", "=", "sess", ".", "run", "(", "[", "s_pos", "]", ",", "feed_dict", "=", "{", "image_pos", ":", "test_fitb", "[", "0", "]", ",", "\n", "text_pos", ":", "test_fitb", "[", "1", "]", ",", "\n", "graph_pos", ":", "test_fitb", "[", "2", "]", "}", ")", "\n", "\n", "answer", "=", "np", ".", "asarray", "(", "answer", "[", "0", "]", ")", "\n", "\n", "for", "j", "in", "range", "(", "batch_size", "/", "4", ")", ":", "\n", "                    ", "a", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "j", "*", "4", ",", "(", "j", "+", "1", ")", "*", "4", ")", ":", "\n", "                        ", "a", ".", "append", "(", "answer", "[", "k", "]", "[", "0", "]", ")", "\n", "", "if", "np", ".", "argmax", "(", "a", ")", "==", "0", ":", "\n", "                        ", "right", "+=", "1.", "\n", "", "", "", "print", "(", "answer", ")", "\n", "accurancy", "=", "float", "(", "right", "/", "test_size_fitb", ")", "\n", "\n", "##### AUC #####", "\n", "batches", "=", "int", "(", "(", "test_size_auc", "*", "2", ")", "/", "batch_size", ")", "\n", "right", "=", "0.", "\n", "for", "i", "in", "range", "(", "batches", ")", ":", "\n", "                ", "test_auc", "=", "load_auc_data", "(", "i", ",", "batch_size", ",", "test_outfit_list", ")", "\n", "answer", "=", "sess", ".", "run", "(", "[", "s_pos", "]", ",", "feed_dict", "=", "{", "image_pos", ":", "test_auc", "[", "0", "]", ",", "\n", "text_pos", ":", "test_auc", "[", "1", "]", ",", "\n", "graph_pos", ":", "test_auc", "[", "2", "]", "}", ")", "\n", "answer", "=", "np", ".", "asarray", "(", "answer", "[", "0", "]", ")", "\n", "\n", "for", "j", "in", "range", "(", "batch_size", "/", "2", ")", ":", "\n", "                    ", "a", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "j", "*", "2", ",", "(", "j", "+", "1", ")", "*", "2", ")", ":", "\n", "                        ", "a", ".", "append", "(", "answer", "[", "k", "]", "[", "0", "]", ")", "\n", "", "if", "np", ".", "argmax", "(", "a", ")", "==", "0", ":", "\n", "                        ", "right", "+=", "1.", "\n", "\n", "", "", "", "print", "(", "answer", ")", "\n", "auc", "=", "float", "(", "right", "/", "test_size_auc", ")", "\n", "\n", "if", "auc", ">", "best_auc", ":", "\n", "                ", "best_auc", "=", "auc", "\n", "best_epoch", "=", "epoch", "\n", "\n", "", "if", "accurancy", ">", "best_accurancy", ":", "\n", "                ", "best_accurancy", "=", "accurancy", "\n", "best_epoch", "=", "epoch", "\n", "saver", ".", "save", "(", "sess", ",", "\"multi_modal_1/cm_ggnn.ckpt\"", ")", "\n", "\n", "", "print", "(", "\"Test Epoch:\"", ",", "'%d'", "%", "epoch", ",", "\"accuracy:\"", ",", "\"{:.9f}\"", ".", "format", "(", "accurancy", ")", ",", "\"auc:\"", ",", "\"{:.9f}\"", ".", "format", "(", "auc", ")", ")", "\n", "\n", "print", "(", "'now():'", "+", "str", "(", "datetime", ".", "now", "(", ")", ")", ")", "\n", "print", "(", "\"batch_size: %d, image_hidden_size: %d, text_hidden_size: %d, n_steps: %d, learning_rate: %f\"", "%", "(", "\n", "batch_size", ",", "image_hidden_size", ",", "text_hidden_size", ",", "n_steps", ",", "learning_rate", ")", ")", "\n", "print", "(", "\"Epoch:\"", ",", "'%d'", "%", "epoch", ",", "\"finished\"", ",", "\"Best accurancy: %f\"", "%", "best_accurancy", ",", "\"Best auc: %f\"", "%", "best_auc", ",", "\n", "\"Best epoch: %d\"", "%", "best_epoch", ")", "\n", "\n", "", "", "return", "best_accurancy", "\n", "\n"]], "home.repos.pwc.inspect_result.CRIPAC-DIG_NGNN.None.main_multi_modal.look_enable_node": [[330, 337], ["numpy.sum", "enumerate", "index_list.append"], "function", ["None"], ["", "def", "look_enable_node", "(", "graph", ")", ":", "\n", "    ", "if_enable", "=", "np", ".", "sum", "(", "graph", ",", "axis", "=", "1", ")", "\n", "index_list", "=", "[", "]", "\n", "for", "index", ",", "value", "in", "enumerate", "(", "if_enable", ")", ":", "\n", "        ", "if", "value", ">", "0", ":", "\n", "            ", "index_list", ".", "append", "(", "index", ")", "\n", "", "", "return", "index_list", "\n", "\n"]], "home.repos.pwc.inspect_result.CRIPAC-DIG_NGNN.model.model_score_in_out.weights": [[8, 33], ["numpy.sqrt", "numpy.sqrt", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "str", "str", "str", "str"], "function", ["None"], ["def", "weights", "(", "name", ",", "hidden_size", ",", "i", ")", ":", "\n", "    ", "image_stdv", "=", "np", ".", "sqrt", "(", "1.", "/", "(", "2048", ")", ")", "\n", "hidden_stdv", "=", "np", ".", "sqrt", "(", "1.", "/", "(", "hidden_size", ")", ")", "\n", "if", "name", "==", "'in_image'", ":", "\n", "        ", "w", "=", "tf", ".", "get_variable", "(", "name", "=", "'w/in_image_'", "+", "str", "(", "i", ")", ",", "\n", "shape", "=", "[", "2048", ",", "hidden_size", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "stddev", "=", "image_stdv", ")", ")", "\n", "#w = tf.get_variable(name='gnn/w/in_image_', shape=[2048, hidden_size], initializer=tf.random_normal_initializer)", "\n", "", "if", "name", "==", "'out_image'", ":", "\n", "        ", "w", "=", "tf", ".", "get_variable", "(", "name", "=", "'w/out_image_'", "+", "str", "(", "i", ")", ",", "\n", "shape", "=", "[", "hidden_size", ",", "2048", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "stddev", "=", "image_stdv", ")", ")", "\n", "#w = tf.get_variable(name='w/out_image_', shape=[hidden_size, 2048], initializer=tf.random_normal_initializer)", "\n", "", "if", "name", "==", "'hidden_state_out'", ":", "\n", "        ", "w", "=", "tf", ".", "get_variable", "(", "name", "=", "'w/hidden_state_out'", "+", "str", "(", "i", ")", ",", "\n", "shape", "=", "[", "hidden_size", ",", "hidden_size", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "stddev", "=", "hidden_stdv", ")", ")", "\n", "#w = tf.get_variable(name='w/hidden_state_out_' + str(i), shape=[hidden_size, hidden_size], initializer=tf.random_normal_initializer)", "\n", "", "if", "name", "==", "'hidden_state_in'", ":", "\n", "#w = tf.get_variable(name='w/hidden_state_in_', shape=[hidden_size, hidden_size], initializer=tf.random_normal_initializer)", "\n", "        ", "w", "=", "tf", ".", "get_variable", "(", "name", "=", "'w/hidden_state_in_'", "+", "str", "(", "i", ")", ",", "\n", "shape", "=", "[", "hidden_size", ",", "hidden_size", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "stddev", "=", "hidden_stdv", ")", ")", "\n", "\n", "", "return", "w", "\n", "\n"]], "home.repos.pwc.inspect_result.CRIPAC-DIG_NGNN.model.model_score_in_out.biases": [[35, 55], ["numpy.sqrt", "numpy.sqrt", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "str", "str", "str"], "function", ["None"], ["", "def", "biases", "(", "name", ",", "hidden_size", ",", "i", ")", ":", "\n", "    ", "image_stdv", "=", "np", ".", "sqrt", "(", "1.", "/", "(", "2048", ")", ")", "\n", "hidden_stdv", "=", "np", ".", "sqrt", "(", "1.", "/", "(", "hidden_size", ")", ")", "\n", "if", "name", "==", "'hidden_state_out'", ":", "\n", "        ", "b", "=", "tf", ".", "get_variable", "(", "name", "=", "'b/hidden_state_out'", "+", "str", "(", "i", ")", ",", "shape", "=", "[", "hidden_size", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "stddev", "=", "hidden_stdv", ")", ")", "\n", "# b = tf.get_variable(name='b/hidden_state_out', shape=[hidden_size],", "\n", "#                 initializer=tf.random_normal_initializer)", "\n", "", "if", "name", "==", "'hidden_state_in'", ":", "\n", "        ", "b", "=", "tf", ".", "get_variable", "(", "name", "=", "'b/hidden_state_in'", "+", "str", "(", "i", ")", ",", "shape", "=", "[", "hidden_size", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "stddev", "=", "hidden_stdv", ")", ")", "\n", "# b = tf.get_variable(name='b/hidden_state_in', shape=[hidden_size],", "\n", "#                 initializer=tf.random_normal_initializer)", "\n", "", "if", "name", "==", "'out_image'", ":", "\n", "# b = tf.get_variable(name='b/out_image_', shape=[2048],", "\n", "#                     initializer=tf.random_normal_initializer)", "\n", "        ", "b", "=", "tf", ".", "get_variable", "(", "name", "=", "'b/out_image_'", "+", "str", "(", "i", ")", ",", "shape", "=", "[", "2048", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "stddev", "=", "image_stdv", ")", ")", "\n", "\n", "", "return", "b", "\n", "\n"]], "home.repos.pwc.inspect_result.CRIPAC-DIG_NGNN.model.model_score_in_out.message_pass": [[57, 97], ["model_score_in_out.weights", "tensorflow.reshape", "range", "tensorflow.reshape", "tensorflow.transpose", "tensorflow.matmul", "range", "tensorflow.reshape", "tensorflow.transpose", "tensorflow.reshape", "range", "tensorflow.reshape", "tensorflow.matmul", "model_score_in_out.weights", "tensorflow.reshape", "tensorflow.concat", "tensorflow.matmul", "tensorflow.concat", "tensorflow.matmul", "tensorflow.reshape", "tensorflow.concat", "tensorflow.reshape", "tensorflow.matmul", "model_score_in_out.weights", "tensorflow.matmul", "tensorflow.reshape", "model_score_in_out.weights"], "function", ["home.repos.pwc.inspect_result.CRIPAC-DIG_NGNN.model.model_multimodal.weights", "home.repos.pwc.inspect_result.CRIPAC-DIG_NGNN.model.model_multimodal.weights", "home.repos.pwc.inspect_result.CRIPAC-DIG_NGNN.model.model_multimodal.weights", "home.repos.pwc.inspect_result.CRIPAC-DIG_NGNN.model.model_multimodal.weights"], ["", "def", "message_pass", "(", "x", ",", "hidden_size", ",", "batch_size", ",", "num_category", ",", "graph", ")", ":", "\n", "\n", "\n", "    ", "w_hidden_state", "=", "weights", "(", "'hidden_state_out'", ",", "hidden_size", ",", "0", ")", "\n", "#b_hidden_state = biases('hidden_state_out', hidden_size, 0)", "\n", "x_all", "=", "tf", ".", "reshape", "(", "tf", ".", "matmul", "(", "\n", "tf", ".", "reshape", "(", "x", "[", ":", ",", "0", ",", ":", "]", ",", "[", "batch_size", ",", "hidden_size", "]", ")", ",", "\n", "w_hidden_state", ")", ",", "\n", "[", "batch_size", ",", "hidden_size", "]", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "num_category", ")", ":", "\n", "        ", "w_hidden_state", "=", "weights", "(", "'hidden_state_out'", ",", "hidden_size", ",", "i", ")", "\n", "#b_hidden_state = biases('hidden_state_out', hidden_size, i)", "\n", "x_all_", "=", "tf", ".", "reshape", "(", "tf", ".", "matmul", "(", "\n", "tf", ".", "reshape", "(", "x", "[", ":", ",", "i", ",", ":", "]", ",", "[", "batch_size", ",", "hidden_size", "]", ")", ",", "\n", "w_hidden_state", ")", ",", "\n", "[", "batch_size", ",", "hidden_size", "]", ")", "\n", "x_all", "=", "tf", ".", "concat", "(", "[", "x_all", ",", "x_all_", "]", ",", "1", ")", "\n", "", "x_all", "=", "tf", ".", "reshape", "(", "x_all", ",", "[", "batch_size", ",", "num_category", ",", "hidden_size", "]", ")", "\n", "x_all", "=", "tf", ".", "transpose", "(", "x_all", ",", "(", "0", ",", "2", ",", "1", ")", ")", "# [batch_size, hidden_size, num_category]", "\n", "\n", "x_", "=", "x_all", "[", "0", "]", "\n", "graph_", "=", "graph", "[", "0", "]", "\n", "x", "=", "tf", ".", "matmul", "(", "x_", ",", "graph_", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "batch_size", ")", ":", "\n", "        ", "x_", "=", "x_all", "[", "i", "]", "\n", "graph_", "=", "graph", "[", "i", "]", "\n", "x_", "=", "tf", ".", "matmul", "(", "x_", ",", "graph_", ")", "\n", "x", "=", "tf", ".", "concat", "(", "[", "x", ",", "x_", "]", ",", "0", ")", "\n", "", "x", "=", "tf", ".", "reshape", "(", "x", ",", "[", "batch_size", ",", "hidden_size", ",", "num_category", "]", ")", "\n", "x", "=", "tf", ".", "transpose", "(", "x", ",", "(", "0", ",", "2", ",", "1", ")", ")", "\n", "\n", "x_", "=", "tf", ".", "reshape", "(", "tf", ".", "matmul", "(", "x", "[", ":", ",", "0", ",", ":", "]", ",", "weights", "(", "'hidden_state_in'", ",", "hidden_size", ",", "0", ")", ")", ",", "\n", "[", "batch_size", ",", "hidden_size", "]", ")", "\n", "for", "j", "in", "range", "(", "1", ",", "num_category", ")", ":", "\n", "        ", "_x", "=", "tf", ".", "reshape", "(", "tf", ".", "matmul", "(", "x", "[", ":", ",", "j", ",", ":", "]", ",", "weights", "(", "'hidden_state_in'", ",", "hidden_size", ",", "j", ")", ")", ",", "\n", "[", "batch_size", ",", "hidden_size", "]", ")", "\n", "x_", "=", "tf", ".", "concat", "(", "[", "x_", ",", "_x", "]", ",", "1", ")", "\n", "", "x", "=", "tf", ".", "reshape", "(", "x_", ",", "[", "batch_size", ",", "num_category", ",", "hidden_size", "]", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.CRIPAC-DIG_NGNN.model.model_score_in_out.GNN": [[100, 152], ["tensorflow.contrib.rnn.GRUCell", "model_score_in_out.weights", "tensorflow.reshape", "range", "tensorflow.reshape", "tensorflow.nn.tanh", "tensorflow.reduce_sum", "tensorflow.cast", "tensorflow.matmul", "model_score_in_out.weights", "tensorflow.concat", "tensorflow.cast", "tensorflow.variable_scope", "range", "model_score_in_out.message_pass", "tensorflow.contrib.rnn.GRUCell.", "tensorflow.transpose", "tensorflow.multiply", "tensorflow.transpose", "range", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.get_variable_scope().reuse_variables", "tensorflow.contrib.rnn.GRUCell.", "tensorflow.transpose", "tensorflow.multiply", "tensorflow.transpose", "tensorflow.concat", "tensorflow.matmul", "tensorflow.get_variable_scope"], "function", ["home.repos.pwc.inspect_result.CRIPAC-DIG_NGNN.model.model_multimodal.weights", "home.repos.pwc.inspect_result.CRIPAC-DIG_NGNN.model.model_multimodal.weights", "home.repos.pwc.inspect_result.CRIPAC-DIG_NGNN.model.model_multimodal.message_pass"], ["", "def", "GNN", "(", "image", ",", "batch_size", ",", "hidden_size", ",", "n_steps", ",", "num_category", ",", "graph", ")", ":", "\n", "\n", "    ", "gru_cell", "=", "GRUCell", "(", "hidden_size", ")", "\n", "w_in_image", "=", "weights", "(", "'in_image'", ",", "hidden_size", ",", "0", ")", "\n", "h0", "=", "tf", ".", "reshape", "(", "tf", ".", "matmul", "(", "image", "[", ":", ",", "0", ",", ":", "]", ",", "w_in_image", ")", ",", "[", "batch_size", ",", "hidden_size", "]", ")", "#initialize h0 [batchsize, hidden_state]", "\n", "for", "i", "in", "range", "(", "1", ",", "num_category", ")", ":", "\n", "        ", "w_in_image", "=", "weights", "(", "'in_image'", ",", "hidden_size", ",", "i", ")", "\n", "h0", "=", "tf", ".", "concat", "(", "[", "h0", ",", "tf", ".", "reshape", "(", "\n", "tf", ".", "matmul", "(", "image", "[", ":", ",", "i", ",", ":", "]", ",", "w_in_image", ")", ",", "[", "batch_size", ",", "hidden_size", "]", ")", "\n", "]", ",", "1", ")", "\n", "", "h0", "=", "tf", ".", "reshape", "(", "h0", ",", "[", "batch_size", ",", "num_category", ",", "hidden_size", "]", ")", "# h0: [batchsize, num_category, hidden_state]", "\n", "# print (h0)", "\n", "h0", "=", "tf", ".", "nn", ".", "tanh", "(", "h0", ")", "\n", "state", "=", "h0", "\n", "sum_graph", "=", "tf", ".", "reduce_sum", "(", "graph", ",", "reduction_indices", "=", "1", ")", "\n", "enable_node", "=", "tf", ".", "cast", "(", "tf", ".", "cast", "(", "sum_graph", ",", "dtype", "=", "bool", ")", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "\"gnn\"", ")", ":", "\n", "        ", "for", "step", "in", "range", "(", "n_steps", ")", ":", "\n", "            ", "if", "step", ">", "0", ":", "tf", ".", "get_variable_scope", "(", ")", ".", "reuse_variables", "(", ")", "\n", "#state = state * mask_x", "\n", "x", "=", "message_pass", "(", "state", ",", "hidden_size", ",", "batch_size", ",", "num_category", ",", "graph", ")", "\n", "# x = tf.reshape(x, [batch_size*num_category, hidden_size])", "\n", "# state = tf.reshape(state, [batch_size*num_category, hidden_size])", "\n", "(", "x_new", ",", "state_new", ")", "=", "gru_cell", "(", "x", "[", "0", "]", ",", "state", "[", "0", "]", ")", "\n", "state_new", "=", "tf", ".", "transpose", "(", "state_new", ",", "(", "1", ",", "0", ")", ")", "\n", "state_new", "=", "tf", ".", "multiply", "(", "state_new", ",", "enable_node", "[", "0", "]", ")", "\n", "state_new", "=", "tf", ".", "transpose", "(", "state_new", ",", "(", "1", ",", "0", ")", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "batch_size", ")", ":", "\n", "                ", "(", "x_", ",", "state_", ")", "=", "gru_cell", "(", "x", "[", "i", "]", ",", "state", "[", "i", "]", ")", "##input of GRUCell must be 2 rank, not 3 rank", "\n", "state_", "=", "tf", ".", "transpose", "(", "state_", ",", "(", "1", ",", "0", ")", ")", "\n", "state_", "=", "tf", ".", "multiply", "(", "state_", ",", "enable_node", "[", "i", "]", ")", "\n", "state_", "=", "tf", ".", "transpose", "(", "state_", ",", "(", "1", ",", "0", ")", ")", "\n", "state_new", "=", "tf", ".", "concat", "(", "[", "state_new", ",", "state_", "]", ",", "0", ")", "\n", "#x = tf.reshape(x, [batch_size, num_category, hidden_size])", "\n", "", "state", "=", "tf", ".", "reshape", "(", "state_new", ",", "[", "batch_size", ",", "num_category", ",", "hidden_size", "]", ")", "##restore: 2 rank to 3 rank", "\n", "#state = state * mask_x", "\n", "#state = tf.nn.dropout(state, keep_prob)", "\n", "\n", "# w_out_image = weights('out_image', hidden_size, 0)", "\n", "# b_out_image = biases('out_image', hidden_size, 0)", "\n", "# output = tf.reshape(tf.matmul(state[:, 0, :], w_out_image) + b_out_image, [batch_size, 2048]) #initialize output : [batchsize, 2048]", "\n", "# for i in range(1, num_category):", "\n", "#     w_out_image = weights('out_image', hidden_size, i)", "\n", "#     b_out_image = biases('out_image', hidden_size, i)", "\n", "#     output = tf.concat([output, tf.reshape(", "\n", "#         tf.matmul(state[:, i, :], w_out_image) + b_out_image,", "\n", "#                        [batch_size, 2048])], 1)", "\n", "# output = tf.reshape(output, [batch_size, num_category, 2048])", "\n", "# output = tf.nn.tanh(output)", "\n", "\n", "", "", "return", "state", ",", "h0", "\n", "\n"]], "home.repos.pwc.inspect_result.CRIPAC-DIG_NGNN.model.model_multimodal.weights": [[8, 55], ["numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "str", "str", "str", "str", "str", "str", "str", "str"], "function", ["None"], ["def", "weights", "(", "name", ",", "hidden_size", ",", "i", ")", ":", "\n", "    ", "image_stdv", "=", "np", ".", "sqrt", "(", "1.", "/", "(", "2048", ")", ")", "\n", "text_stdv", "=", "np", ".", "sqrt", "(", "1.", "/", "(", "2757", ")", ")", "\n", "hidden_stdv", "=", "np", ".", "sqrt", "(", "1.", "/", "(", "hidden_size", ")", ")", "\n", "if", "name", "==", "'in_image'", ":", "\n", "        ", "w", "=", "tf", ".", "get_variable", "(", "name", "=", "'w/in_image_'", "+", "str", "(", "i", ")", ",", "\n", "shape", "=", "[", "2048", ",", "hidden_size", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "stddev", "=", "image_stdv", ")", ")", "\n", "#w = tf.get_variable(name='gnn/w/in_image_', shape=[2048, hidden_size], initializer=tf.random_normal_initializer)", "\n", "", "if", "name", "==", "'out_image'", ":", "\n", "        ", "w", "=", "tf", ".", "get_variable", "(", "name", "=", "'w/out_image_'", "+", "str", "(", "i", ")", ",", "\n", "shape", "=", "[", "hidden_size", ",", "2048", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "stddev", "=", "image_stdv", ")", ")", "\n", "#w = tf.get_variable(name='w/out_image_', shape=[hidden_size, 2048], initializer=tf.random_normal_initializer)", "\n", "", "if", "name", "==", "'in_text'", ":", "\n", "        ", "w", "=", "tf", ".", "get_variable", "(", "name", "=", "'w/in_text_'", "+", "str", "(", "i", ")", ",", "\n", "shape", "=", "[", "2757", ",", "hidden_size", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "stddev", "=", "image_stdv", ")", ")", "\n", "#w = tf.get_variable(name='gnn/w/in_image_', shape=[2048, hidden_size], initializer=tf.random_normal_initializer)", "\n", "", "if", "name", "==", "'out_text'", ":", "\n", "        ", "w", "=", "tf", ".", "get_variable", "(", "name", "=", "'w/out_text_'", "+", "str", "(", "i", ")", ",", "\n", "shape", "=", "[", "hidden_size", ",", "2757", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "stddev", "=", "image_stdv", ")", ")", "\n", "#w = tf.get_variable(name='w/out_image_', shape=[hidden_size, 2048], initializer=tf.random_normal_initializer)", "\n", "", "if", "name", "==", "'image_hidden_state_out'", ":", "\n", "        ", "w", "=", "tf", ".", "get_variable", "(", "name", "=", "'w/image_hidden_state_out'", "+", "str", "(", "i", ")", ",", "\n", "shape", "=", "[", "hidden_size", ",", "hidden_size", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "stddev", "=", "hidden_stdv", ")", ")", "\n", "#w = tf.get_variable(name='w/hidden_state_out_' + str(i), shape=[hidden_size, hidden_size], initializer=tf.random_normal_initializer)", "\n", "", "if", "name", "==", "'image_hidden_state_in'", ":", "\n", "#w = tf.get_variable(name='w/hidden_state_in_', shape=[hidden_size, hidden_size], initializer=tf.random_normal_initializer)", "\n", "        ", "w", "=", "tf", ".", "get_variable", "(", "name", "=", "'w/image_hidden_state_in_'", "+", "str", "(", "i", ")", ",", "\n", "shape", "=", "[", "hidden_size", ",", "hidden_size", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "stddev", "=", "hidden_stdv", ")", ")", "\n", "", "if", "name", "==", "'text_hidden_state_out'", ":", "\n", "        ", "w", "=", "tf", ".", "get_variable", "(", "name", "=", "'w/text_hidden_state_out'", "+", "str", "(", "i", ")", ",", "\n", "shape", "=", "[", "hidden_size", ",", "hidden_size", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "stddev", "=", "hidden_stdv", ")", ")", "\n", "#w = tf.get_variable(name='w/hidden_state_out_' + str(i), shape=[hidden_size, hidden_size], initializer=tf.random_normal_initializer)", "\n", "", "if", "name", "==", "'text_hidden_state_in'", ":", "\n", "#w = tf.get_variable(name='w/hidden_state_in_', shape=[hidden_size, hidden_size], initializer=tf.random_normal_initializer)", "\n", "        ", "w", "=", "tf", ".", "get_variable", "(", "name", "=", "'w/text_hidden_state_in_'", "+", "str", "(", "i", ")", ",", "\n", "shape", "=", "[", "hidden_size", ",", "hidden_size", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "stddev", "=", "hidden_stdv", ")", ")", "\n", "\n", "\n", "", "return", "w", "\n", "\n"]], "home.repos.pwc.inspect_result.CRIPAC-DIG_NGNN.model.model_multimodal.biases": [[57, 92], ["numpy.sqrt", "numpy.sqrt", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "str", "str", "str", "str", "str", "str"], "function", ["None"], ["", "def", "biases", "(", "name", ",", "hidden_size", ",", "i", ")", ":", "\n", "    ", "image_stdv", "=", "np", ".", "sqrt", "(", "1.", "/", "(", "2048", ")", ")", "\n", "hidden_stdv", "=", "np", ".", "sqrt", "(", "1.", "/", "(", "hidden_size", ")", ")", "\n", "if", "name", "==", "'image_hidden_state_out'", ":", "\n", "        ", "b", "=", "tf", ".", "get_variable", "(", "name", "=", "'b/image_hidden_state_out'", "+", "str", "(", "i", ")", ",", "shape", "=", "[", "hidden_size", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "stddev", "=", "hidden_stdv", ")", ")", "\n", "# b = tf.get_variable(name='b/hidden_state_out', shape=[hidden_size],", "\n", "#                 initializer=tf.random_normal_initializer)", "\n", "", "if", "name", "==", "'image_hidden_state_in'", ":", "\n", "        ", "b", "=", "tf", ".", "get_variable", "(", "name", "=", "'b/image_hidden_state_in'", "+", "str", "(", "i", ")", ",", "shape", "=", "[", "hidden_size", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "stddev", "=", "hidden_stdv", ")", ")", "\n", "# b = tf.get_variable(name='b/hidden_state_in', shape=[hidden_size],", "\n", "#                 initializer=tf.random_normal_initializer)", "\n", "", "if", "name", "==", "'text_hidden_state_out'", ":", "\n", "        ", "b", "=", "tf", ".", "get_variable", "(", "name", "=", "'b/text_hidden_state_out'", "+", "str", "(", "i", ")", ",", "shape", "=", "[", "hidden_size", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "stddev", "=", "hidden_stdv", ")", ")", "\n", "# b = tf.get_variable(name='b/hidden_state_out', shape=[hidden_size],", "\n", "#                 initializer=tf.random_normal_initializer)", "\n", "", "if", "name", "==", "'text_hidden_state_in'", ":", "\n", "        ", "b", "=", "tf", ".", "get_variable", "(", "name", "=", "'b/text_hidden_state_in'", "+", "str", "(", "i", ")", ",", "shape", "=", "[", "hidden_size", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "stddev", "=", "hidden_stdv", ")", ")", "\n", "# b = tf.get_variable(name='b/hidden_state_in', shape=[hidden_size],", "\n", "#                 initializer=tf.random_normal_initializer)", "\n", "", "if", "name", "==", "'out_image'", ":", "\n", "# b = tf.get_variable(name='b/out_image_', shape=[2048],", "\n", "#                     initializer=tf.random_normal_initializer)", "\n", "        ", "b", "=", "tf", ".", "get_variable", "(", "name", "=", "'b/out_image_'", "+", "str", "(", "i", ")", ",", "shape", "=", "[", "2048", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "stddev", "=", "image_stdv", ")", ")", "\n", "", "if", "name", "==", "'out_text'", ":", "\n", "# b = tf.get_variable(name='b/out_image_', shape=[2048],", "\n", "#                     initializer=tf.random_normal_initializer)", "\n", "        ", "b", "=", "tf", ".", "get_variable", "(", "name", "=", "'b/out_text_'", "+", "str", "(", "i", ")", ",", "shape", "=", "[", "2757", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "stddev", "=", "image_stdv", ")", ")", "\n", "\n", "", "return", "b", "\n", "\n"]], "home.repos.pwc.inspect_result.CRIPAC-DIG_NGNN.model.model_multimodal.message_pass": [[94, 133], ["model_multimodal.weights", "tensorflow.reshape", "range", "tensorflow.reshape", "tensorflow.transpose", "tensorflow.matmul", "range", "tensorflow.reshape", "tensorflow.transpose", "tensorflow.reshape", "range", "tensorflow.reshape", "tensorflow.matmul", "model_multimodal.weights", "tensorflow.reshape", "tensorflow.concat", "tensorflow.matmul", "tensorflow.concat", "tensorflow.matmul", "tensorflow.reshape", "tensorflow.concat", "tensorflow.reshape", "tensorflow.matmul", "model_multimodal.weights", "tensorflow.matmul", "tensorflow.reshape", "model_multimodal.weights"], "function", ["home.repos.pwc.inspect_result.CRIPAC-DIG_NGNN.model.model_multimodal.weights", "home.repos.pwc.inspect_result.CRIPAC-DIG_NGNN.model.model_multimodal.weights", "home.repos.pwc.inspect_result.CRIPAC-DIG_NGNN.model.model_multimodal.weights", "home.repos.pwc.inspect_result.CRIPAC-DIG_NGNN.model.model_multimodal.weights"], ["", "def", "message_pass", "(", "label", ",", "x", ",", "hidden_size", ",", "batch_size", ",", "num_category", ",", "graph", ")", ":", "\n", "\n", "    ", "w_hidden_state", "=", "weights", "(", "label", "+", "'_hidden_state_out'", ",", "hidden_size", ",", "0", ")", "\n", "#b_hidden_state = biases('hidden_state_out', hidden_size, 0)", "\n", "x_all", "=", "tf", ".", "reshape", "(", "tf", ".", "matmul", "(", "\n", "tf", ".", "reshape", "(", "x", "[", ":", ",", "0", ",", ":", "]", ",", "[", "batch_size", ",", "hidden_size", "]", ")", ",", "\n", "w_hidden_state", ")", ",", "\n", "[", "batch_size", ",", "hidden_size", "]", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "num_category", ")", ":", "\n", "        ", "w_hidden_state", "=", "weights", "(", "label", "+", "'_hidden_state_out'", ",", "hidden_size", ",", "i", ")", "\n", "#b_hidden_state = biases('hidden_state_out', hidden_size, i)", "\n", "x_all_", "=", "tf", ".", "reshape", "(", "tf", ".", "matmul", "(", "\n", "tf", ".", "reshape", "(", "x", "[", ":", ",", "i", ",", ":", "]", ",", "[", "batch_size", ",", "hidden_size", "]", ")", ",", "\n", "w_hidden_state", ")", ",", "\n", "[", "batch_size", ",", "hidden_size", "]", ")", "\n", "x_all", "=", "tf", ".", "concat", "(", "[", "x_all", ",", "x_all_", "]", ",", "1", ")", "\n", "", "x_all", "=", "tf", ".", "reshape", "(", "x_all", ",", "[", "batch_size", ",", "num_category", ",", "hidden_size", "]", ")", "\n", "x_all", "=", "tf", ".", "transpose", "(", "x_all", ",", "(", "0", ",", "2", ",", "1", ")", ")", "# [batch_size, hidden_size, num_category]", "\n", "\n", "x_", "=", "x_all", "[", "0", "]", "\n", "graph_", "=", "graph", "[", "0", "]", "\n", "x", "=", "tf", ".", "matmul", "(", "x_", ",", "graph_", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "batch_size", ")", ":", "\n", "        ", "x_", "=", "x_all", "[", "i", "]", "\n", "graph_", "=", "graph", "[", "i", "]", "\n", "x_", "=", "tf", ".", "matmul", "(", "x_", ",", "graph_", ")", "\n", "x", "=", "tf", ".", "concat", "(", "[", "x", ",", "x_", "]", ",", "0", ")", "\n", "", "x", "=", "tf", ".", "reshape", "(", "x", ",", "[", "batch_size", ",", "hidden_size", ",", "num_category", "]", ")", "\n", "x", "=", "tf", ".", "transpose", "(", "x", ",", "(", "0", ",", "2", ",", "1", ")", ")", "\n", "\n", "x_", "=", "tf", ".", "reshape", "(", "tf", ".", "matmul", "(", "x", "[", ":", ",", "0", ",", ":", "]", ",", "weights", "(", "label", "+", "'_hidden_state_in'", ",", "hidden_size", ",", "0", ")", ")", ",", "\n", "[", "batch_size", ",", "hidden_size", "]", ")", "\n", "for", "j", "in", "range", "(", "1", ",", "num_category", ")", ":", "\n", "        ", "_x", "=", "tf", ".", "reshape", "(", "tf", ".", "matmul", "(", "x", "[", ":", ",", "j", ",", ":", "]", ",", "weights", "(", "label", "+", "'_hidden_state_in'", ",", "hidden_size", ",", "j", ")", ")", ",", "\n", "[", "batch_size", ",", "hidden_size", "]", ")", "\n", "x_", "=", "tf", ".", "concat", "(", "[", "x_", ",", "_x", "]", ",", "1", ")", "\n", "", "x", "=", "tf", ".", "reshape", "(", "x_", ",", "[", "batch_size", ",", "num_category", ",", "hidden_size", "]", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.CRIPAC-DIG_NGNN.model.model_multimodal.GNN": [[137, 190], ["tensorflow.contrib.rnn.GRUCell", "model_multimodal.weights", "tensorflow.reshape", "range", "tensorflow.reshape", "tensorflow.nn.tanh", "tensorflow.reduce_sum", "tensorflow.cast", "tensorflow.matmul", "model_multimodal.weights", "tensorflow.concat", "tensorflow.cast", "tensorflow.variable_scope", "range", "model_multimodal.message_pass", "tensorflow.contrib.rnn.GRUCell.", "tensorflow.transpose", "tensorflow.multiply", "tensorflow.transpose", "range", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.get_variable_scope().reuse_variables", "tensorflow.contrib.rnn.GRUCell.", "tensorflow.transpose", "tensorflow.multiply", "tensorflow.transpose", "tensorflow.concat", "tensorflow.matmul", "tensorflow.get_variable_scope"], "function", ["home.repos.pwc.inspect_result.CRIPAC-DIG_NGNN.model.model_multimodal.weights", "home.repos.pwc.inspect_result.CRIPAC-DIG_NGNN.model.model_multimodal.weights", "home.repos.pwc.inspect_result.CRIPAC-DIG_NGNN.model.model_multimodal.message_pass"], ["", "def", "GNN", "(", "label", ",", "data", ",", "batch_size", ",", "hidden_size", ",", "n_steps", ",", "num_category", ",", "graph", ")", ":", "\n", "\n", "    ", "gru_cell", "=", "GRUCell", "(", "hidden_size", ")", "\n", "w_in", "=", "weights", "(", "'in_'", "+", "label", ",", "hidden_size", ",", "0", ")", "\n", "h0", "=", "tf", ".", "reshape", "(", "tf", ".", "matmul", "(", "data", "[", ":", ",", "0", ",", ":", "]", ",", "w_in", ")", ",", "[", "batch_size", ",", "hidden_size", "]", ")", "#initialize h0 [batchsize, hidden_state]", "\n", "for", "i", "in", "range", "(", "1", ",", "num_category", ")", ":", "\n", "        ", "w_in", "=", "weights", "(", "'in_'", "+", "label", ",", "hidden_size", ",", "i", ")", "\n", "h0", "=", "tf", ".", "concat", "(", "[", "h0", ",", "tf", ".", "reshape", "(", "\n", "tf", ".", "matmul", "(", "data", "[", ":", ",", "i", ",", ":", "]", ",", "w_in", ")", ",", "[", "batch_size", ",", "hidden_size", "]", ")", "\n", "]", ",", "1", ")", "\n", "", "h0", "=", "tf", ".", "reshape", "(", "h0", ",", "[", "batch_size", ",", "num_category", ",", "hidden_size", "]", ")", "# h0: [batchsize, num_category, hidden_state]", "\n", "ini", "=", "h0", "\n", "h0", "=", "tf", ".", "nn", ".", "tanh", "(", "h0", ")", "\n", "\n", "state", "=", "h0", "\n", "sum_graph", "=", "tf", ".", "reduce_sum", "(", "graph", ",", "reduction_indices", "=", "1", ")", "\n", "enable_node", "=", "tf", ".", "cast", "(", "tf", ".", "cast", "(", "sum_graph", ",", "dtype", "=", "bool", ")", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "\"gnn\"", ")", ":", "\n", "        ", "for", "step", "in", "range", "(", "n_steps", ")", ":", "\n", "            ", "if", "step", ">", "0", ":", "tf", ".", "get_variable_scope", "(", ")", ".", "reuse_variables", "(", ")", "\n", "# state = state * mask_x", "\n", "x", "=", "message_pass", "(", "label", ",", "state", ",", "hidden_size", ",", "batch_size", ",", "num_category", ",", "graph", ")", "\n", "# x = tf.reshape(x, [batch_size*num_category, hidden_size])", "\n", "# state = tf.reshape(state, [batch_size*num_category, hidden_size])", "\n", "(", "x_new", ",", "state_new", ")", "=", "gru_cell", "(", "x", "[", "0", "]", ",", "state", "[", "0", "]", ")", "\n", "state_new", "=", "tf", ".", "transpose", "(", "state_new", ",", "(", "1", ",", "0", ")", ")", "\n", "state_new", "=", "tf", ".", "multiply", "(", "state_new", ",", "enable_node", "[", "0", "]", ")", "\n", "state_new", "=", "tf", ".", "transpose", "(", "state_new", ",", "(", "1", ",", "0", ")", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "batch_size", ")", ":", "\n", "                ", "(", "x_", ",", "state_", ")", "=", "gru_cell", "(", "x", "[", "i", "]", ",", "state", "[", "i", "]", ")", "# #input of GRUCell must be 2 rank, not 3 rank", "\n", "state_", "=", "tf", ".", "transpose", "(", "state_", ",", "(", "1", ",", "0", ")", ")", "\n", "state_", "=", "tf", ".", "multiply", "(", "state_", ",", "enable_node", "[", "i", "]", ")", "\n", "state_", "=", "tf", ".", "transpose", "(", "state_", ",", "(", "1", ",", "0", ")", ")", "\n", "state_new", "=", "tf", ".", "concat", "(", "[", "state_new", ",", "state_", "]", ",", "0", ")", "\n", "# x = tf.reshape(x, [batch_size, num_category, hidden_size])", "\n", "", "state", "=", "tf", ".", "reshape", "(", "state_new", ",", "[", "batch_size", ",", "num_category", ",", "hidden_size", "]", ")", "# #restore: 2 rank to 3 rank", "\n", "# state = state * mask_x", "\n", "# state = tf.nn.dropout(state, keep_prob)", "\n", "\n", "# w_out_image = weights('out_image', hidden_size, 0)", "\n", "# b_out_image = biases('out_image', hidden_size, 0)", "\n", "# output = tf.reshape(tf.matmul(state[:, 0, :], w_out_image) + b_out_image, [batch_size, 2048]) #initialize output : [batchsize, 2048]", "\n", "# for i in range(1, num_category):", "\n", "#     w_out_image = weights('out_image', hidden_size, i)", "\n", "#     b_out_image = biases('out_image', hidden_size, i)", "\n", "#     output = tf.concat([output, tf.reshape(", "\n", "#         tf.matmul(state[:, i, :], w_out_image) + b_out_image,", "\n", "#                        [batch_size, 2048])], 1)", "\n", "# output = tf.reshape(output, [batch_size, num_category, 2048])", "\n", "# output = tf.nn.tanh(output)", "\n", "\n", "", "", "return", "state", ",", "ini", "\n", "\n"]], "home.repos.pwc.inspect_result.CRIPAC-DIG_NGNN.util.load_data_score_graph.load_train_data": [[47, 114], ["open", "json.load", "len", "int", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "load_data_score_graph.reuniform_graph", "load_data_score_graph.reuniform_graph", "len", "range", "range", "j_list.append", "j_list.append", "range", "list_pos.append", "list_neg.append", "random.randint", "len", "int", "json.load", "open", "random.choice", "json.load", "list_.append", "open", "str", "str", "str", "random.choice", "str"], "function", ["home.repos.pwc.inspect_result.CRIPAC-DIG_NGNN.util.load_data_score_graph.reuniform_graph", "home.repos.pwc.inspect_result.CRIPAC-DIG_NGNN.util.load_data_score_graph.reuniform_graph"], ["def", "load_train_data", "(", "i", ",", "batch_size", ")", ":", "\n", "    ", "ftrain", "=", "open", "(", "'train_no_dup_new_1000.json'", ",", "'r'", ")", "\n", "outfit_list", "=", "json", ".", "load", "(", "ftrain", ")", "\n", "size", "=", "len", "(", "outfit_list", ")", "\n", "size_", "=", "size", "*", "per_outfit", "\n", "time", "=", "int", "(", "batch_size", "/", "per_outfit", ")", "\n", "i", "=", "i", "*", "time", "\n", "\n", "image_pos", "=", "np", ".", "zeros", "(", "(", "batch_size", ",", "num_category", ",", "2048", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "image_neg", "=", "np", ".", "zeros", "(", "(", "batch_size", ",", "num_category", ",", "2048", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "graph_pos", "=", "np", ".", "zeros", "(", "(", "batch_size", ",", "num_category", ",", "num_category", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "graph_neg", "=", "np", ".", "zeros", "(", "(", "batch_size", ",", "num_category", ",", "num_category", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "now_size", "=", "0", "\n", "\n", "for", "outfit", "in", "outfit_list", "[", "i", ":", "i", "+", "time", "]", ":", "\n", "        ", "ii", "=", "outfit", "[", "'items_index'", "]", "\n", "ci", "=", "outfit", "[", "'items_category'", "]", "\n", "sid", "=", "outfit", "[", "'set_id'", "]", "\n", "len_", "=", "len", "(", "ii", ")", "\n", "j_list", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "len_", ")", ":", "\n", "            ", "j_list", ".", "append", "(", "j", ")", "\n", "", "for", "j", "in", "range", "(", "per_outfit", "-", "len_", ")", ":", "\n", "            ", "j_list", ".", "append", "(", "random", ".", "randint", "(", "0", ",", "len_", "-", "1", ")", ")", "\n", "", "for", "j", "in", "j_list", ":", "\n", "            ", "list_", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "len", "(", "ii", ")", ")", ":", "\n", "                ", "cid", "=", "ci", "[", "k", "]", "\n", "iid", "=", "ii", "[", "k", "]", "\n", "rcid", "=", "int", "(", "cid2rcid", "[", "str", "(", "cid", ")", "]", ")", "\n", "feature", "=", "json", ".", "load", "(", "open", "(", "feature_path", "+", "str", "(", "sid", ")", "+", "'_'", "+", "str", "(", "iid", ")", "+", "'.json'", ")", ")", "\n", "if", "k", "==", "j", ":", "#if k==j k is y,else k is x", "\n", "                    ", "image_pos", "[", "now_size", "]", "[", "rcid", "]", "=", "feature", "\n", "rcid_pos", "=", "rcid", "\n", "# for a in category_item:", "\n", "#     if a['id'] == cid:", "\n", "#         i = a", "\n", "#         break", "\n", "i", "=", "random", ".", "choice", "(", "category_item", ")", "\n", "rcid_neg", "=", "cid2rcid", "[", "str", "(", "i", "[", "'id'", "]", ")", "]", "\n", "image_neg", "[", "now_size", "]", "[", "rcid_neg", "]", "=", "json", ".", "load", "(", "open", "(", "feature_path", "+", "random", ".", "choice", "(", "i", "[", "'items'", "]", ")", "+", "'.json'", ")", ")", "\n", "\n", "", "else", ":", "\n", "                    ", "image_neg", "[", "now_size", "]", "[", "rcid", "]", "=", "feature", "\n", "image_pos", "[", "now_size", "]", "[", "rcid", "]", "=", "feature", "\n", "list_", ".", "append", "(", "rcid", ")", "\n", "\n", "", "", "list_pos", "=", "list_", "[", ":", "]", "\n", "list_pos", ".", "append", "(", "rcid_pos", ")", "\n", "for", "a", "in", "list_pos", ":", "\n", "                ", "for", "b", "in", "list_pos", ":", "\n", "                    ", "if", "b", "!=", "a", ":", "\n", "                        ", "graph_pos", "[", "now_size", "]", "[", "a", "]", "[", "b", "]", "=", "1.", "# total_graph[a][b]", "\n", "# total_graph[a][b] = 1.", "\n", "", "", "", "list_neg", "=", "list_", "[", ":", "]", "\n", "list_neg", ".", "append", "(", "rcid_neg", ")", "\n", "for", "a", "in", "list_neg", ":", "\n", "                ", "for", "b", "in", "list_neg", ":", "\n", "                    ", "if", "b", "!=", "a", ":", "\n", "                        ", "graph_neg", "[", "now_size", "]", "[", "a", "]", "[", "b", "]", "=", "1.", "# total_graph[a][b]", "\n", "\n", "", "", "", "now_size", "+=", "1", "\n", "\n", "", "", "graph_pos", "=", "reuniform_graph", "(", "graph_pos", ")", "\n", "graph_neg", "=", "reuniform_graph", "(", "graph_neg", ")", "\n", "\n", "return", "image_pos", ",", "image_neg", ",", "graph_pos", ",", "graph_neg", ",", "size_", "\n", "\n"]], "home.repos.pwc.inspect_result.CRIPAC-DIG_NGNN.util.load_data_score_graph.load_train_size": [[116, 122], ["open", "json.load", "len"], "function", ["None"], ["", "def", "load_train_size", "(", ")", ":", "\n", "    ", "ftrain", "=", "open", "(", "'train_no_dup_new_1000.json'", ",", "'r'", ")", "\n", "train_list", "=", "json", ".", "load", "(", "ftrain", ")", "\n", "train_size", "=", "len", "(", "train_list", ")", "\n", "train_size_", "=", "per_outfit", "*", "train_size", "\n", "return", "train_size", ",", "train_size_", "\n", "\n"]], "home.repos.pwc.inspect_result.CRIPAC-DIG_NGNN.util.load_data_score_graph.load_graph": [[124, 126], ["None"], "function", ["None"], ["", "def", "load_graph", "(", ")", ":", "\n", "    ", "return", "total_graph", "\n", "\n"]], "home.repos.pwc.inspect_result.CRIPAC-DIG_NGNN.util.load_data_score_graph.load_num_category": [[128, 130], ["None"], "function", ["None"], ["", "def", "load_num_category", "(", ")", ":", "\n", "    ", "return", "num_category", "\n", "\n"]], "home.repos.pwc.inspect_result.CRIPAC-DIG_NGNN.util.load_data_score_graph.reuniform_graph": [[156, 169], ["len", "len", "graph.astype.astype", "range", "numpy.sum", "range", "float"], "function", ["None"], ["", "def", "reuniform_graph", "(", "graph", ")", ":", "\n", "# graph_size = (size_, num_category, num_category)", "\n", "    ", "size_", "=", "len", "(", "graph", ")", "\n", "num_category", "=", "len", "(", "graph", "[", "0", "]", ")", "\n", "graph", "=", "graph", ".", "astype", "(", "np", ".", "float32", ")", "\n", "for", "idx", "in", "range", "(", "size_", ")", ":", "\n", "        ", "sum_g", "=", "np", ".", "sum", "(", "graph", "[", "idx", "]", ",", "axis", "=", "0", ")", "\n", "for", "jdx", "in", "range", "(", "num_category", ")", ":", "\n", "            ", "if", "sum_g", "[", "jdx", "]", "!=", "0", ":", "\n", "                ", "tempt", "=", "graph", "[", "idx", "]", "[", "jdx", "]", "/", "float", "(", "sum_g", "[", "jdx", "]", ")", "\n", "graph", "[", "idx", "]", "[", "jdx", "]", "=", "tempt", "\n", "\n", "", "", "", "return", "graph", "\n", "\n"]], "home.repos.pwc.inspect_result.CRIPAC-DIG_NGNN.util.load_data_multimodal.load_graph": [[28, 30], ["None"], "function", ["None"], ["def", "load_graph", "(", ")", ":", "\n", "    ", "return", "total_graph", "\n", "\n"]], "home.repos.pwc.inspect_result.CRIPAC-DIG_NGNN.util.load_data_multimodal.load_num_category": [[31, 33], ["None"], "function", ["None"], ["", "def", "load_num_category", "(", ")", ":", "\n", "    ", "return", "num_category", "\n", "\n"]], "home.repos.pwc.inspect_result.CRIPAC-DIG_NGNN.util.load_data_multimodal.load_train_data": [[34, 104], ["int", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "len", "range", "range", "j_list.append", "j_list.append", "range", "list_pos.append", "list_neg.append", "random.randint", "len", "int", "json.load", "json.load", "open", "open", "random.choice", "random.choice", "json.load", "json.load", "list_.append", "open", "open", "str", "str", "str", "str", "str", "str"], "function", ["None"], ["", "def", "load_train_data", "(", "i", ",", "batch_size", ",", "outfit_list", ")", ":", "\n", "\n", "    ", "size_", "=", "batch_size", "\n", "time", "=", "int", "(", "batch_size", "/", "per_outfit", ")", "\n", "i", "=", "i", "*", "time", "\n", "\n", "image_pos", "=", "np", ".", "zeros", "(", "(", "size_", ",", "num_category", ",", "2048", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "image_neg", "=", "np", ".", "zeros", "(", "(", "size_", ",", "num_category", ",", "2048", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "text_pos", "=", "np", ".", "zeros", "(", "(", "size_", ",", "num_category", ",", "2757", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "text_neg", "=", "np", ".", "zeros", "(", "(", "size_", ",", "num_category", ",", "2757", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "graph_pos", "=", "np", ".", "zeros", "(", "(", "size_", ",", "num_category", ",", "num_category", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "graph_neg", "=", "np", ".", "zeros", "(", "(", "size_", ",", "num_category", ",", "num_category", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "now_size", "=", "0", "\n", "\n", "for", "outfit", "in", "outfit_list", "[", "i", ":", "i", "+", "time", "]", ":", "\n", "        ", "ii", "=", "outfit", "[", "'items_index'", "]", "\n", "ci", "=", "outfit", "[", "'items_category'", "]", "\n", "sid", "=", "outfit", "[", "'set_id'", "]", "\n", "len_", "=", "len", "(", "ii", ")", "\n", "j_list", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "len_", ")", ":", "\n", "            ", "j_list", ".", "append", "(", "j", ")", "\n", "", "for", "j", "in", "range", "(", "per_outfit", "-", "len_", ")", ":", "\n", "            ", "j_list", ".", "append", "(", "random", ".", "randint", "(", "0", ",", "len_", "-", "1", ")", ")", "\n", "", "for", "j", "in", "j_list", ":", "\n", "            ", "list_", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "len", "(", "ii", ")", ")", ":", "\n", "                ", "cid", "=", "ci", "[", "k", "]", "\n", "iid", "=", "ii", "[", "k", "]", "\n", "rcid", "=", "int", "(", "cid2rcid", "[", "str", "(", "cid", ")", "]", ")", "\n", "image_feature", "=", "json", ".", "load", "(", "open", "(", "image_feature_path", "+", "str", "(", "sid", ")", "+", "'_'", "+", "str", "(", "iid", ")", "+", "'.json'", ")", ")", "\n", "text_feature", "=", "json", ".", "load", "(", "open", "(", "text_feature_path", "+", "str", "(", "sid", ")", "+", "'_'", "+", "str", "(", "iid", ")", "+", "'.json'", ")", ")", "\n", "if", "k", "==", "j", ":", "#if k==j k is y,else k is x", "\n", "                    ", "image_pos", "[", "now_size", "]", "[", "rcid", "]", "=", "image_feature", "\n", "text_pos", "[", "now_size", "]", "[", "rcid", "]", "=", "text_feature", "\n", "rcid_pos", "=", "rcid", "\n", "# for a in category_item:", "\n", "#     if a['id'] == cid:", "\n", "#         i = a", "\n", "#         break", "\n", "i", "=", "random", ".", "choice", "(", "category_item", ")", "\n", "rcid_neg", "=", "cid2rcid", "[", "str", "(", "i", "[", "'id'", "]", ")", "]", "\n", "ri", "=", "random", ".", "choice", "(", "i", "[", "'items'", "]", ")", "\n", "image_neg", "[", "now_size", "]", "[", "rcid_neg", "]", "=", "json", ".", "load", "(", "open", "(", "image_feature_path", "+", "ri", "+", "'.json'", ")", ")", "\n", "text_neg", "[", "now_size", "]", "[", "rcid_neg", "]", "=", "json", ".", "load", "(", "open", "(", "text_feature_path", "+", "ri", "+", "'.json'", ")", ")", "\n", "\n", "", "else", ":", "\n", "                    ", "image_neg", "[", "now_size", "]", "[", "rcid", "]", "=", "image_feature", "\n", "image_pos", "[", "now_size", "]", "[", "rcid", "]", "=", "image_feature", "\n", "text_neg", "[", "now_size", "]", "[", "rcid", "]", "=", "text_feature", "\n", "text_pos", "[", "now_size", "]", "[", "rcid", "]", "=", "text_feature", "\n", "list_", ".", "append", "(", "rcid", ")", "\n", "\n", "", "", "list_pos", "=", "list_", "[", ":", "]", "\n", "list_pos", ".", "append", "(", "rcid_pos", ")", "\n", "for", "a", "in", "list_pos", ":", "\n", "                ", "for", "b", "in", "list_pos", ":", "\n", "                    ", "if", "b", "!=", "a", ":", "\n", "                        ", "graph_pos", "[", "now_size", "]", "[", "a", "]", "[", "b", "]", "=", "1.", "\n", "total_graph", "[", "a", "]", "[", "b", "]", "=", "1.", "\n", "", "", "", "list_neg", "=", "list_", "[", ":", "]", "\n", "list_neg", ".", "append", "(", "rcid_neg", ")", "\n", "for", "a", "in", "list_neg", ":", "\n", "                ", "for", "b", "in", "list_neg", ":", "\n", "                    ", "if", "b", "!=", "a", ":", "\n", "                        ", "graph_neg", "[", "now_size", "]", "[", "a", "]", "[", "b", "]", "=", "1.", "\n", "\n", "", "", "", "now_size", "+=", "1", "\n", "\n", "", "", "return", "image_pos", ",", "image_neg", ",", "text_pos", ",", "text_neg", ",", "graph_pos", ",", "graph_neg", ",", "size_", "\n", "\n"]], "home.repos.pwc.inspect_result.CRIPAC-DIG_NGNN.util.load_data_multimodal.load_train_size": [[106, 112], ["open", "json.load", "len"], "function", ["None"], ["", "def", "load_train_size", "(", ")", ":", "\n", "    ", "ftrain", "=", "open", "(", "'train_no_dup_new_100.json'", ",", "'r'", ")", "\n", "train_list", "=", "json", ".", "load", "(", "ftrain", ")", "\n", "train_size", "=", "len", "(", "train_list", ")", "\n", "train_size_", "=", "per_outfit", "*", "train_size", "\n", "return", "train_size", ",", "train_size_", "\n", "\n"]], "home.repos.pwc.inspect_result.CRIPAC-DIG_NGNN.util.load_data_multimodal.load_fitb_data": [[114, 214], ["int", "load_data_multimodal.load_num_category", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "len", "len", "random.randint", "range", "rl_pos.append", "numpy.zeros", "rl_w1.append", "numpy.zeros", "rl_w2.append", "numpy.zeros", "rl_w3.append", "numpy.zeros", "len", "int", "json.load", "json.load", "open", "open", "random.choice", "random.choice", "json.load", "json.load", "random.choice", "random.choice", "json.load", "json.load", "random.choice", "random.choice", "json.load", "json.load", "rcid_list.append", "open", "open", "open", "open", "open", "open", "str", "str", "str", "str", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.CRIPAC-DIG_NGNN.util.load_data_multimodal.load_num_category"], ["", "def", "load_fitb_data", "(", "index", ",", "batch_size", ",", "outfit_list", ")", ":", "\n", "\n", "    ", "time", "=", "int", "(", "batch_size", "/", "4", ")", "\n", "num_category", "=", "load_num_category", "(", ")", "\n", "\n", "image", "=", "np", ".", "zeros", "(", "(", "batch_size", ",", "num_category", ",", "2048", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "text", "=", "np", ".", "zeros", "(", "(", "batch_size", ",", "num_category", ",", "2757", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "graph", "=", "np", ".", "zeros", "(", "(", "batch_size", ",", "num_category", ",", "num_category", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "outfit_list_", "=", "outfit_list", "[", "index", "*", "time", ":", "(", "index", "+", "1", ")", "*", "time", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "outfit_list_", ")", ")", ":", "\n", "        ", "outfit", "=", "outfit_list_", "[", "i", "]", "\n", "ii", "=", "outfit", "[", "'items_index'", "]", "\n", "ci", "=", "outfit", "[", "'items_category'", "]", "\n", "sid", "=", "outfit", "[", "'set_id'", "]", "\n", "rcid_list", "=", "[", "]", "\n", "length", "=", "len", "(", "ii", ")", "\n", "blank_index", "=", "random", ".", "randint", "(", "0", ",", "length", "-", "1", ")", "\n", "for", "j", "in", "range", "(", "len", "(", "ii", ")", ")", ":", "\n", "            ", "cid", "=", "ci", "[", "j", "]", "\n", "iid", "=", "ii", "[", "j", "]", "\n", "rcid", "=", "int", "(", "cid2rcid", "[", "str", "(", "cid", ")", "]", ")", "\n", "image_feature", "=", "json", ".", "load", "(", "open", "(", "image_feature_path", "+", "str", "(", "sid", ")", "+", "'_'", "+", "str", "(", "iid", ")", "+", "'.json'", ")", ")", "\n", "text_feature", "=", "json", ".", "load", "(", "open", "(", "text_feature_path", "+", "str", "(", "sid", ")", "+", "'_'", "+", "str", "(", "iid", ")", "+", "'.json'", ")", ")", "\n", "if", "j", "==", "blank_index", ":", "\n", "                ", "rcid_pos", "=", "rcid", "\n", "image", "[", "i", "*", "4", "]", "[", "rcid", "]", "=", "image_feature", "\n", "text", "[", "i", "*", "4", "]", "[", "rcid", "]", "=", "text_feature", "\n", "# r1 = random.choice(category_item)", "\n", "# feature_w1[rcid] = json.load(open(feature_path + random.choice(r1['items']) + '.json'))", "\n", "# category_y[i * 4 + 1] = rcid", "\n", "# r2 = random.choice(category_item)", "\n", "# feature_w2[rcid] = json.load(open(feature_path + random.choice(r2['items']) + '.json'))", "\n", "# category_y[i * 4 + 2] = rcid", "\n", "# r3 = random.choice(category_item)", "\n", "# feature_w3[rcid] = json.load(open(feature_path + random.choice(r3['items']) + '.json'))", "\n", "# category_y[i * 4 + 3] = rcid", "\n", "r1", "=", "random", ".", "choice", "(", "category_item", ")", "\n", "rcid_w1", "=", "cid2rcid", "[", "str", "(", "r1", "[", "'id'", "]", ")", "]", "\n", "r11", "=", "random", ".", "choice", "(", "r1", "[", "'items'", "]", ")", "\n", "image", "[", "i", "*", "4", "+", "1", "]", "[", "rcid_w1", "]", "=", "json", ".", "load", "(", "open", "(", "image_feature_path", "+", "r11", "+", "'.json'", ")", ")", "\n", "text", "[", "i", "*", "4", "+", "1", "]", "[", "rcid_w1", "]", "=", "json", ".", "load", "(", "open", "(", "text_feature_path", "+", "r11", "+", "'.json'", ")", ")", "\n", "r2", "=", "random", ".", "choice", "(", "category_item", ")", "\n", "rcid_w2", "=", "cid2rcid", "[", "str", "(", "r2", "[", "'id'", "]", ")", "]", "\n", "r22", "=", "random", ".", "choice", "(", "r2", "[", "'items'", "]", ")", "\n", "image", "[", "i", "*", "4", "+", "2", "]", "[", "rcid_w2", "]", "=", "json", ".", "load", "(", "open", "(", "image_feature_path", "+", "r22", "+", "'.json'", ")", ")", "\n", "text", "[", "i", "*", "4", "+", "2", "]", "[", "rcid_w2", "]", "=", "json", ".", "load", "(", "open", "(", "text_feature_path", "+", "r22", "+", "'.json'", ")", ")", "\n", "r3", "=", "random", ".", "choice", "(", "category_item", ")", "\n", "rcid_w3", "=", "cid2rcid", "[", "str", "(", "r3", "[", "'id'", "]", ")", "]", "\n", "r33", "=", "random", ".", "choice", "(", "r3", "[", "'items'", "]", ")", "\n", "image", "[", "i", "*", "4", "+", "3", "]", "[", "rcid_w3", "]", "=", "json", ".", "load", "(", "open", "(", "image_feature_path", "+", "r33", "+", "'.json'", ")", ")", "\n", "text", "[", "i", "*", "4", "+", "3", "]", "[", "rcid_w3", "]", "=", "json", ".", "load", "(", "open", "(", "text_feature_path", "+", "r33", "+", "'.json'", ")", ")", "\n", "\n", "", "else", ":", "\n", "                ", "rcid_list", ".", "append", "(", "rcid", ")", "\n", "image", "[", "i", "*", "4", "]", "[", "rcid", "]", "=", "image_feature", "\n", "image", "[", "i", "*", "4", "+", "1", "]", "[", "rcid", "]", "=", "image_feature", "\n", "image", "[", "i", "*", "4", "+", "2", "]", "[", "rcid", "]", "=", "image_feature", "\n", "image", "[", "i", "*", "4", "+", "3", "]", "[", "rcid", "]", "=", "image_feature", "\n", "text", "[", "i", "*", "4", "]", "[", "rcid", "]", "=", "text_feature", "\n", "text", "[", "i", "*", "4", "+", "1", "]", "[", "rcid", "]", "=", "text_feature", "\n", "text", "[", "i", "*", "4", "+", "2", "]", "[", "rcid", "]", "=", "text_feature", "\n", "text", "[", "i", "*", "4", "+", "3", "]", "[", "rcid", "]", "=", "text_feature", "\n", "\n", "", "", "rl_pos", "=", "rcid_list", "[", ":", "]", "\n", "rl_pos", ".", "append", "(", "rcid_pos", ")", "\n", "g1", "=", "np", ".", "zeros", "(", "(", "num_category", ",", "num_category", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "a", "in", "rl_pos", ":", "\n", "            ", "for", "b", "in", "rl_pos", ":", "\n", "                ", "if", "b", "!=", "a", ":", "\n", "                    ", "g1", "[", "a", "]", "[", "b", "]", "=", "1.", "\n", "", "", "", "graph", "[", "i", "*", "4", "]", "=", "g1", "\n", "\n", "rl_w1", "=", "rcid_list", "[", ":", "]", "\n", "rl_w1", ".", "append", "(", "rcid_w1", ")", "\n", "g2", "=", "np", ".", "zeros", "(", "(", "num_category", ",", "num_category", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "a", "in", "rl_w1", ":", "\n", "            ", "for", "b", "in", "rl_w1", ":", "\n", "                ", "if", "b", "!=", "a", ":", "\n", "                    ", "g2", "[", "a", "]", "[", "b", "]", "=", "1.", "\n", "", "", "", "graph", "[", "i", "*", "4", "+", "1", "]", "=", "g2", "\n", "\n", "rl_w2", "=", "rcid_list", "[", ":", "]", "\n", "rl_w2", ".", "append", "(", "rcid_w2", ")", "\n", "g3", "=", "np", ".", "zeros", "(", "(", "num_category", ",", "num_category", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "a", "in", "rl_w2", ":", "\n", "            ", "for", "b", "in", "rl_w2", ":", "\n", "                ", "if", "b", "!=", "a", ":", "\n", "                    ", "g3", "[", "a", "]", "[", "b", "]", "=", "1.", "\n", "", "", "", "graph", "[", "i", "*", "4", "+", "2", "]", "=", "g3", "\n", "\n", "rl_w3", "=", "rcid_list", "[", ":", "]", "\n", "rl_w3", ".", "append", "(", "rcid_w3", ")", "\n", "g4", "=", "np", ".", "zeros", "(", "(", "num_category", ",", "num_category", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "a", "in", "rl_w3", ":", "\n", "            ", "for", "b", "in", "rl_w3", ":", "\n", "                ", "if", "b", "!=", "a", ":", "\n", "                    ", "g4", "[", "a", "]", "[", "b", "]", "=", "1.", "\n", "", "", "", "graph", "[", "i", "*", "4", "+", "3", "]", "=", "g4", "\n", "\n", "", "return", "image", ",", "text", ",", "graph", "\n", "\n"]], "home.repos.pwc.inspect_result.CRIPAC-DIG_NGNN.util.load_data_multimodal.load_test_size": [[215, 221], ["open", "json.load", "len"], "function", ["None"], ["", "def", "load_test_size", "(", ")", ":", "\n", "    ", "ftest", "=", "open", "(", "'test_no_dup_new_100.json'", ",", "'r'", ")", "\n", "test_list", "=", "json", ".", "load", "(", "ftest", ")", "\n", "test_size", "=", "len", "(", "test_list", ")", "\n", "\n", "return", "test_size", "\n", "\n"]], "home.repos.pwc.inspect_result.CRIPAC-DIG_NGNN.util.load_data_multimodal.load_auc_data": [[224, 275], ["int", "load_data_multimodal.load_num_category", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "len", "len", "range", "range", "numpy.zeros", "numpy.zeros", "int", "json.load", "json.load", "graph_pos.append", "random.choice", "random.choice", "json.load", "json.load", "graph_neg.append", "open", "open", "open", "open", "str", "str", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.CRIPAC-DIG_NGNN.util.load_data_multimodal.load_num_category"], ["", "def", "load_auc_data", "(", "index", ",", "batch_size", ",", "outfit_list", ")", ":", "\n", "\n", "    ", "time", "=", "int", "(", "batch_size", "/", "2", ")", "\n", "\n", "num_category", "=", "load_num_category", "(", ")", "\n", "\n", "image", "=", "np", ".", "zeros", "(", "(", "batch_size", ",", "num_category", ",", "2048", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "text", "=", "np", ".", "zeros", "(", "(", "batch_size", ",", "num_category", ",", "2757", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "graph", "=", "np", ".", "zeros", "(", "(", "batch_size", ",", "num_category", ",", "num_category", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "outfit_list_", "=", "outfit_list", "[", "index", "*", "time", ":", "(", "index", "+", "1", ")", "*", "time", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "outfit_list_", ")", ")", ":", "\n", "        ", "outfit", "=", "outfit_list_", "[", "i", "]", "\n", "ii", "=", "outfit", "[", "'items_index'", "]", "\n", "ci", "=", "outfit", "[", "'items_category'", "]", "\n", "sid", "=", "outfit", "[", "'set_id'", "]", "\n", "rcid_list", "=", "[", "]", "\n", "length", "=", "len", "(", "ii", ")", "\n", "graph_pos", "=", "[", "]", "\n", "graph_neg", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "length", ")", ":", "\n", "            ", "cid", "=", "ci", "[", "j", "]", "\n", "iid", "=", "ii", "[", "j", "]", "\n", "rcid", "=", "int", "(", "cid2rcid", "[", "str", "(", "cid", ")", "]", ")", "\n", "image_feature", "=", "json", ".", "load", "(", "open", "(", "image_feature_path", "+", "str", "(", "sid", ")", "+", "'_'", "+", "str", "(", "iid", ")", "+", "'.json'", ")", ")", "\n", "image", "[", "i", "*", "2", "]", "[", "rcid", "]", "=", "image_feature", "\n", "text_feature", "=", "json", ".", "load", "(", "open", "(", "text_feature_path", "+", "str", "(", "sid", ")", "+", "'_'", "+", "str", "(", "iid", ")", "+", "'.json'", ")", ")", "\n", "text", "[", "i", "*", "2", "]", "[", "rcid", "]", "=", "text_feature", "\n", "graph_pos", ".", "append", "(", "rcid", ")", "\n", "", "for", "j", "in", "range", "(", "length", ")", ":", "\n", "            ", "r", "=", "random", ".", "choice", "(", "category_item", ")", "\n", "rcid_w", "=", "cid2rcid", "[", "str", "(", "r", "[", "'id'", "]", ")", "]", "\n", "rr", "=", "random", ".", "choice", "(", "r", "[", "'items'", "]", ")", "\n", "image", "[", "i", "*", "2", "+", "1", "]", "[", "rcid_w", "]", "=", "json", ".", "load", "(", "open", "(", "image_feature_path", "+", "rr", "+", "'.json'", ")", ")", "\n", "text", "[", "i", "*", "2", "+", "1", "]", "[", "rcid_w", "]", "=", "json", ".", "load", "(", "open", "(", "text_feature_path", "+", "rr", "+", "'.json'", ")", ")", "\n", "graph_neg", ".", "append", "(", "rcid_w", ")", "\n", "\n", "", "g", "=", "np", ".", "zeros", "(", "(", "num_category", ",", "num_category", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "a", "in", "graph_pos", ":", "\n", "            ", "for", "b", "in", "graph_pos", ":", "\n", "                ", "if", "b", "!=", "a", ":", "\n", "                    ", "g", "[", "a", "]", "[", "b", "]", "=", "1.", "\n", "", "", "", "graph", "[", "i", "*", "2", "]", "=", "g", "\n", "\n", "g", "=", "np", ".", "zeros", "(", "(", "num_category", ",", "num_category", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "a", "in", "graph_neg", ":", "\n", "            ", "for", "b", "in", "graph_neg", ":", "\n", "                ", "if", "b", "!=", "a", ":", "\n", "                    ", "g", "[", "a", "]", "[", "b", "]", "=", "1.", "\n", "", "", "", "graph", "[", "i", "*", "2", "+", "1", "]", "=", "g", "\n", "\n", "", "return", "image", ",", "text", ",", "graph", "\n", "\n"]], "home.repos.pwc.inspect_result.CRIPAC-DIG_NGNN.NGNN.main_score.cm_ggnn": [[15, 269], ["numpy.sqrt", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "range", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.trainable_variables", "tensorflow.nn.sigmoid", "tensorflow.reduce_mean", "tensorflow.get_variable_scope().reuse_variables", "tensorflow.variable_scope", "model.model_score_in_out.GNN", "tensorflow.get_variable_scope().reuse_variables", "model.model_score_in_out.GNN", "tensorflow.matmul", "tensorflow.nn.sigmoid", "tensorflow.matmul", "tensorflow.maximum", "tensorflow.matmul", "tensorflow.nn.sigmoid", "tensorflow.matmul", "tensorflow.maximum", "print", "tensorflow.train.AdamOptimizer().minimize", "tensorflow.train.MomentumOptimizer().minimize", "tensorflow.train.RMSPropOptimizer().minimize", "tensorflow.train.AdadeltaOptimizer().minimize", "tensorflow.Session", "sess.run", "tensorflow.train.Saver", "util.load_data_score_graph.load_train_size", "print", "int", "print", "range", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.contrib.layers.l2_regularizer", "tensorflow.initialize_all_variables", "tensorflow.global_variables_initializer", "range", "print", "print", "print", "int", "range", "print", "float", "print", "print", "print", "print", "tensorflow.get_variable_scope", "tensorflow.get_variable_scope", "tensorflow.train.AdamOptimizer", "tensorflow.train.MomentumOptimizer", "tensorflow.train.RMSPropOptimizer", "tensorflow.train.AdadeltaOptimizer", "int", "int", "util.load_data_score_graph.load_train_data", "sess.run", "numpy.asarray", "range", "tf.train.Saver.save", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "sess.run", "range", "str", "tensorflow.__version__.split", "tensorflow.__version__.split", "print", "print", "int", "range", "print", "float", "print", "print", "print", "print", "a.append", "numpy.argmax", "datetime.now", "sess.run", "numpy.asarray", "range", "range", "str", "a.append", "numpy.argmax", "datetime.now"], "function", ["home.repos.pwc.inspect_result.CRIPAC-DIG_NGNN.model.model_multimodal.GNN", "home.repos.pwc.inspect_result.CRIPAC-DIG_NGNN.model.model_multimodal.GNN", "home.repos.pwc.inspect_result.CRIPAC-DIG_NGNN.util.load_data_multimodal.load_train_size", "home.repos.pwc.inspect_result.CRIPAC-DIG_NGNN.util.load_data_multimodal.load_train_data"], ["def", "cm_ggnn", "(", "batch_size", ",", "hidden_size", ",", "n_steps", ",", "learning_rate", ",", "G", ",", "num_category", ",", "opt", ",", "i", ",", "beta", ")", ":", "\n", "\n", "    ", "hidden_stdv", "=", "np", ".", "sqrt", "(", "1.", "/", "(", "hidden_size", ")", ")", "\n", "if", "i", "==", "0", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "\"cm_ggnn\"", ",", "reuse", "=", "None", ")", ":", "\n", "# w_conf1 = tf.Variable(tf.random_normal([2048+hidden_size, hidden_size]), name='gnn/w/conf_1')", "\n", "            ", "w_conf2", "=", "tf", ".", "get_variable", "(", "name", "=", "'gnn/w/conf_2'", ",", "shape", "=", "[", "hidden_size", ",", "1", "]", ",", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "hidden_stdv", ")", ")", "\n", "# w_score1 = tf.Variable(tf.random_normal([2048 + hidden_size, hidden_size]), name='gnn/w/score_1')", "\n", "w_score2", "=", "tf", ".", "get_variable", "(", "name", "=", "'gnn/w/score_2'", ",", "shape", "=", "[", "hidden_size", ",", "1", "]", ",", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "hidden_stdv", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "tf", ".", "get_variable_scope", "(", ")", ".", "reuse_variables", "(", ")", "\n", "\n", "#################feed#######################", "\n", "", "image_pos", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "batch_size", ",", "num_category", ",", "2048", "]", ")", "\n", "image_neg", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "batch_size", ",", "num_category", ",", "2048", "]", ")", "\n", "graph_pos", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "batch_size", ",", "num_category", ",", "num_category", "]", ")", "\n", "graph_neg", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "batch_size", ",", "num_category", ",", "num_category", "]", ")", "\n", "\n", "##################GGNN's output###################", "\n", "with", "tf", ".", "variable_scope", "(", "\"gnn\"", ",", "reuse", "=", "None", ")", ":", "\n", "        ", "state_pos", ",", "test1", "=", "GNN", "(", "image_pos", ",", "batch_size", ",", "hidden_size", ",", "n_steps", ",", "num_category", ",", "graph_pos", ")", "#output: [batch_size, num_category, 2048]", "\n", "tf", ".", "get_variable_scope", "(", ")", ".", "reuse_variables", "(", ")", "\n", "state_neg", ",", "test2", "=", "GNN", "(", "image_neg", ",", "batch_size", ",", "hidden_size", ",", "n_steps", ",", "num_category", ",", "graph_neg", ")", "\n", "\n", "##################predict positive###################", "\n", "", "for", "j", "in", "range", "(", "num_category", ")", ":", "\n", "# state_image_pos = tf.concat([tf.reshape(state_pos[:, j, :], [-1, hidden_size]),", "\n", "#                              tf.reshape(image_pos[:, j, :], [-1, 2048])], 1)", "\n", "# conf_pos = tf.matmul(state_image_pos, w_conf1)", "\n", "# conf_pos = tf.nn.tanh(conf_pos)", "\n", "# conf_pos = tf.reshape(tf.matmul(conf_pos, w_conf2), [-1])", "\n", "# conf_pos = tf.nn.sigmoid(conf_pos)", "\n", "        ", "conf_pos", "=", "tf", ".", "matmul", "(", "tf", ".", "reshape", "(", "state_pos", "[", ":", ",", "j", ",", ":", "]", ",", "[", "-", "1", ",", "hidden_size", "]", ")", ",", "w_conf2", ")", "\n", "conf_pos", "=", "tf", ".", "nn", ".", "sigmoid", "(", "conf_pos", ")", "\n", "\n", "# score_pos = tf.matmul(state_image_pos, w_score1)", "\n", "# score_pos = tf.nn.tanh(score_pos)", "\n", "# score_pos = tf.reshape(tf.matmul(score_pos, w_score2), [-1])", "\n", "# score_pos = tf.nn.tanh(score_pos)", "\n", "score_pos", "=", "tf", ".", "matmul", "(", "tf", ".", "reshape", "(", "state_pos", "[", ":", ",", "j", ",", ":", "]", ",", "[", "-", "1", ",", "hidden_size", "]", ")", ",", "w_score2", ")", "\n", "# score_pos = tf.nn.relu(score_pos)", "\n", "score_pos", "=", "tf", ".", "maximum", "(", "0.01", "*", "score_pos", ",", "score_pos", ")", "\n", "\n", "# state_image_neg = tf.concat([tf.reshape(state_neg[:, j, :], [-1, hidden_size]),", "\n", "#                              tf.reshape(image_neg[:, j, :], [-1, 2048])], 1)", "\n", "# conf_neg = tf.matmul(state_image_neg, w_conf1)", "\n", "# conf_neg = tf.nn.tanh(conf_neg)", "\n", "# conf_neg = tf.reshape(tf.matmul(conf_neg, w_conf2), [-1])", "\n", "# conf_neg = tf.nn.sigmoid(conf_neg)", "\n", "conf_neg", "=", "tf", ".", "matmul", "(", "tf", ".", "reshape", "(", "state_neg", "[", ":", ",", "j", ",", ":", "]", ",", "[", "-", "1", ",", "hidden_size", "]", ")", ",", "w_conf2", ")", "\n", "conf_neg", "=", "tf", ".", "nn", ".", "sigmoid", "(", "conf_neg", ")", "\n", "\n", "# score_neg = tf.matmul(state_image_neg, w_score1)", "\n", "# score_neg = tf.nn.tanh(score_neg)", "\n", "# score_neg = tf.reshape(tf.matmul(score_neg, w_score2), [-1])", "\n", "# score_neg = tf.nn.tanh(score_neg)", "\n", "score_neg", "=", "tf", ".", "matmul", "(", "tf", ".", "reshape", "(", "state_neg", "[", ":", ",", "j", ",", ":", "]", ",", "[", "-", "1", ",", "hidden_size", "]", ")", ",", "w_score2", ")", "\n", "# score_neg = tf.nn.relu(score_neg)", "\n", "score_neg", "=", "tf", ".", "maximum", "(", "0.01", "*", "score_neg", ",", "score_neg", ")", "\n", "\n", "\n", "if", "j", "==", "0", ":", "\n", "            ", "s_pos", "=", "score_pos", "*", "conf_pos", "\n", "s_neg", "=", "score_neg", "*", "conf_neg", "\n", "", "else", ":", "\n", "            ", "s_pos", "+=", "score_pos", "*", "conf_pos", "\n", "s_neg", "+=", "score_neg", "*", "conf_neg", "\n", "\n", "", "", "s_pos", "=", "tf", ".", "reshape", "(", "s_pos", ",", "[", "-", "1", ",", "1", "]", ")", "\n", "s_neg", "=", "tf", ".", "reshape", "(", "s_neg", ",", "[", "-", "1", ",", "1", "]", ")", "\n", "\n", "s_pos", "=", "tf", ".", "reshape", "(", "s_pos", ",", "[", "batch_size", ",", "1", "]", ")", "\n", "s_neg", "=", "tf", ".", "reshape", "(", "s_neg", ",", "[", "batch_size", ",", "1", "]", ")", "\n", "s_pos_mean", "=", "tf", ".", "reduce_mean", "(", "s_pos", ")", "\n", "s_neg_mean", "=", "tf", ".", "reduce_mean", "(", "s_neg", ")", "\n", "##################cost, optimizer###################", "\n", "cost_parameter", "=", "0.", "\n", "num_parameter", "=", "0.", "\n", "for", "variable", "in", "tf", ".", "trainable_variables", "(", ")", ":", "\n", "        ", "print", "(", "variable", ")", "\n", "cost_parameter", "+=", "tf", ".", "contrib", ".", "layers", ".", "l2_regularizer", "(", "beta", ")", "(", "variable", ")", "\n", "num_parameter", "+=", "1.", "\n", "", "cost_parameter", "/=", "num_parameter", "\n", "score", "=", "tf", ".", "nn", ".", "sigmoid", "(", "s_pos", "-", "s_neg", ")", "\n", "score_mean", "=", "tf", ".", "reduce_mean", "(", "score", ")", "\n", "cost", "=", "-", "score_mean", "\n", "\n", "if", "opt", "==", "'Adam'", ":", "\n", "        ", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", ")", ".", "minimize", "(", "cost", ")", "\n", "", "if", "opt", "==", "'Momentum'", ":", "\n", "        ", "optimizer", "=", "tf", ".", "train", ".", "MomentumOptimizer", "(", "learning_rate", ",", "0.9", ")", ".", "minimize", "(", "cost", ")", "\n", "", "if", "opt", "==", "'RMSProp'", ":", "\n", "        ", "optimizer", "=", "tf", ".", "train", ".", "RMSPropOptimizer", "(", "learning_rate", ")", ".", "minimize", "(", "cost", ")", "\n", "", "if", "opt", "==", "'Adadelta'", ":", "\n", "        ", "optimizer", "=", "tf", ".", "train", ".", "AdadeltaOptimizer", "(", "learning_rate", ")", ".", "minimize", "(", "cost", ")", "\n", "\n", "\n", "", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICES\"", "]", "=", "'0'", "\n", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "\n", "# initialize the graph", "\n", "# 2017-03-02 if using tensorflow >= 0.12", "\n", "        ", "if", "int", "(", "(", "tf", ".", "__version__", ")", ".", "split", "(", "'.'", ")", "[", "1", "]", ")", "<", "12", "and", "int", "(", "(", "tf", ".", "__version__", ")", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", "<", "1", ":", "\n", "            ", "init", "=", "tf", ".", "initialize_all_variables", "(", ")", "\n", "", "else", ":", "\n", "            ", "init", "=", "tf", ".", "global_variables_initializer", "(", ")", "\n", "", "sess", ".", "run", "(", "init", ")", "\n", "\n", "######record######", "\n", "best_accurancy", "=", "0.", "\n", "best_epoch", "=", "0", "\n", "saver", "=", "tf", ".", "train", ".", "Saver", "(", ")", "\n", "\n", "train_size", ",", "train_size_", "=", "load_train_size", "(", ")", "\n", "print", "(", "'train_size is %d'", "%", "train_size_", ")", "\n", "train_batch", "=", "int", "(", "train_size_", "/", "batch_size", ")", "\n", "print", "(", "'train_batch is %d'", "%", "train_batch", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "20", ")", ":", "\n", "#########train##########", "\n", "            ", "no_count", "=", "0", "\n", "c_all", "=", "0.", "\n", "score_all", "=", "0.", "\n", "para_all", "=", "0.", "\n", "dis_pos_all", "=", "0.", "\n", "dis_neg_all", "=", "0.", "\n", "for", "i", "in", "range", "(", "train_batch", ")", ":", "\n", "                ", "train_image_pos", ",", "train_image_neg", ",", "train_graph_pos", ",", "train_graph_neg", ",", "size_", "=", "load_train_data", "(", "i", ",", "batch_size", ")", "\n", "if", "size_", ">=", "batch_size", ":", "\n", "                    ", "image_pos_", "=", "train_image_pos", "[", "0", ":", "batch_size", "]", "\n", "image_neg_", "=", "train_image_neg", "[", "0", ":", "batch_size", "]", "\n", "train_graph_pos_", "=", "train_graph_pos", "[", "0", ":", "batch_size", "]", "\n", "train_graph_neg_", "=", "train_graph_neg", "[", "0", ":", "batch_size", "]", "\n", "# _, c, c_pred, dis_pos_, dis_neg_, conf_pos_, conf_neg_ = sess.run([optimizer, cost, cost_pred,", "\n", "#                                                         dis_pos_mean, dis_neg_mean, conf_pos_mean, conf_neg_mean],", "\n", "_", ",", "c", ",", "score", ",", "c_parameter", ",", "dis_pos_", ",", "dis_neg_", "=", "sess", ".", "run", "(", "\n", "[", "optimizer", ",", "cost", ",", "score_mean", ",", "cost_parameter", ",", "\n", "s_pos_mean", ",", "s_neg_mean", "]", ",", "\n", "feed_dict", "=", "{", "image_pos", ":", "image_pos_", ",", "\n", "image_neg", ":", "image_neg_", ",", "\n", "graph_pos", ":", "train_graph_pos_", ",", "\n", "graph_neg", ":", "train_graph_neg_", "}", ")", "\n", "c_all", "+=", "c", "\n", "score_all", "+=", "score", "\n", "para_all", "+=", "c_parameter", "\n", "dis_pos_all", "+=", "dis_pos_", "\n", "dis_neg_all", "+=", "dis_neg_", "\n", "\n", "if", "i", "%", "2000", "==", "0", ":", "\n", "                        ", "print", "(", "'now batch: %d, total batch: %d'", "%", "(", "i", ",", "train_batch", ")", ")", "\n", "print", "(", "'less than batch size: %d'", "%", "no_count", ")", "\n", "c_average", "=", "c_all", "/", "(", "i", "+", "1", ")", "\n", "score_average", "=", "score_all", "/", "(", "i", "+", "1", ")", "\n", "para_average", "=", "para_all", "/", "(", "i", "+", "1", ")", "\n", "dis_pos_average", "=", "dis_pos_all", "/", "(", "i", "+", "1", ")", "\n", "dis_neg_average", "=", "dis_neg_all", "/", "(", "i", "+", "1", ")", "\n", "\n", "############test############", "\n", "batches", "=", "int", "(", "(", "test_size", "*", "4", ")", "/", "batch_size", ")", "\n", "right", "=", "0.", "\n", "for", "ii", "in", "range", "(", "batches", ")", ":", "\n", "                            ", "answer", ",", "result_test", ",", "result_state_pos", "=", "sess", ".", "run", "(", "[", "s_pos", ",", "test1", ",", "state_pos", "]", ",", "\n", "feed_dict", "=", "{", "image_pos", ":", "test_image", "[", "ii", "*", "batch_size", ":", "(", "ii", "+", "1", ")", "*", "batch_size", "]", ",", "\n", "graph_pos", ":", "test_graph", "[", "ii", "*", "batch_size", ":", "(", "ii", "+", "1", ")", "*", "batch_size", "]", "}", "\n", ")", "\n", "answer", "=", "np", ".", "asarray", "(", "answer", ")", "\n", "\n", "for", "j", "in", "range", "(", "batch_size", "/", "4", ")", ":", "\n", "                                ", "a", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "j", "*", "4", ",", "(", "j", "+", "1", ")", "*", "4", ")", ":", "\n", "                                    ", "a", ".", "append", "(", "answer", "[", "k", "]", "[", "0", "]", ")", "\n", "", "if", "np", ".", "argmax", "(", "a", ")", "==", "0", ":", "\n", "                                    ", "right", "+=", "1.", "\n", "\n", "", "", "", "print", "(", "answer", ")", "\n", "# print(\"result_state(0 row)\")", "\n", "# print(result_state_pos[0])", "\n", "# print(\"result_test(0 row)\")", "\n", "# print(result_test[0])", "\n", "# print(\"graph_nodes\")", "\n", "# for graph_ in test_graph[ii * batch_size:(ii + 1) * batch_size]:", "\n", "#     print (look_enable_node(graph_))", "\n", "\n", "accurancy", "=", "float", "(", "right", "/", "test_size", ")", "\n", "\n", "if", "accurancy", ">", "best_accurancy", ":", "\n", "                            ", "best_accurancy", "=", "accurancy", "\n", "best_epoch", "=", "epoch", "\n", "# saver.save(sess, \"trained_model/cm_ggnn.ckpt\")", "\n", "\n", "", "print", "(", "'now():'", "+", "str", "(", "datetime", ".", "now", "(", ")", ")", ")", "\n", "print", "(", "\"Train Epoch:\"", ",", "'%d'", "%", "epoch", ",", "\"Batch:\"", ",", "'%d'", "%", "i", ",", "\n", "\"total cost:\"", ",", "\"{:.9f}\"", ".", "format", "(", "c_average", ")", ",", "\"pred score distance:\"", ",", "\"{:.9f}\"", ".", "format", "(", "score_average", ")", ",", "\n", "\"parameter cost:\"", ",", "\"{:.9f}\"", ".", "format", "(", "para_average", ")", ",", "\"postive score:\"", ",", "\"{:.9f}\"", ".", "format", "(", "dis_pos_average", ")", ",", "\n", "\"negative score:\"", ",", "\"{:.9f}\"", ".", "format", "(", "dis_neg_average", ")", ",", "\n", "\"accurancy:\"", ",", "\".{:.9f}\"", ".", "format", "(", "accurancy", ")", ")", "\n", "print", "(", "\"Epoch:\"", ",", "'%d'", "%", "epoch", ",", "\"finished\"", ",", "\"Best accurancy: %f\"", "%", "best_accurancy", ",", "\n", "\"Best epoch: %d\"", "%", "best_epoch", ")", "\n", "print", "(", "\"batch_size: %d, hidden_size: %d, n_steps: %d, learning_rate: %f\"", "%", "(", "\n", "batch_size", ",", "hidden_size", ",", "n_steps", ",", "learning_rate", ")", ")", "\n", "\n", "", "", "else", ":", "\n", "                    ", "no_count", "+=", "1", "\n", "\n", "", "", "c_average", "=", "c_all", "/", "train_batch", "\n", "score_average", "=", "score_all", "/", "train_batch", "\n", "para_average", "=", "para_all", "/", "train_batch", "\n", "dis_pos_average", "=", "dis_pos_all", "/", "train_batch", "\n", "dis_neg_average", "=", "dis_neg_all", "/", "train_batch", "\n", "\n", "print", "(", "\"Train Epoch:\"", ",", "'%d'", "%", "epoch", ",", "\"finished\"", ",", "\n", "\"total cost:\"", ",", "\"{:.9f}\"", ".", "format", "(", "c_average", ")", ",", "\"pred score distance:\"", ",", "\"{:.9f}\"", ".", "format", "(", "score_average", ")", ",", "\n", "\"parameter cost:\"", ",", "\"{:.9f}\"", ".", "format", "(", "para_average", ")", ",", "\n", "\"postive score:\"", ",", "\"{:.9f}\"", ".", "format", "(", "dis_pos_average", ")", ",", "\"negative score:\"", ",", "\"{:.9f}\"", ".", "format", "(", "dis_neg_average", ")", ")", "\n", "print", "(", "\"Epoch:\"", ",", "'%d'", "%", "epoch", ",", "\"finished\"", ",", "\"Best accurancy: %f\"", "%", "best_accurancy", ",", "\n", "\"Best epoch: %d\"", "%", "best_epoch", ")", "\n", "print", "(", "\"batch_size: %d, hidden_size: %d, n_steps: %d, learning_rate: %f\"", "%", "(", "\n", "batch_size", ",", "hidden_size", ",", "n_steps", ",", "learning_rate", ")", ")", "\n", "\n", "############test############", "\n", "batches", "=", "int", "(", "(", "test_size", "*", "4", ")", "/", "batch_size", ")", "\n", "right", "=", "0.", "\n", "for", "i", "in", "range", "(", "batches", ")", ":", "\n", "                ", "answer", ",", "result_state_pos", "=", "sess", ".", "run", "(", "[", "s_pos", ",", "state_pos", "]", ",", "\n", "feed_dict", "=", "{", "image_pos", ":", "test_image", "[", "i", "*", "batch_size", ":", "(", "i", "+", "1", ")", "*", "batch_size", "]", ",", "\n", "graph_pos", ":", "test_graph", "[", "i", "*", "batch_size", ":", "(", "i", "+", "1", ")", "*", "batch_size", "]", "}", "\n", ")", "\n", "answer", "=", "np", ".", "asarray", "(", "answer", ")", "\n", "\n", "for", "j", "in", "range", "(", "batch_size", "/", "4", ")", ":", "\n", "                    ", "a", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "j", "*", "4", ",", "(", "j", "+", "1", ")", "*", "4", ")", ":", "\n", "                        ", "a", ".", "append", "(", "answer", "[", "k", "]", "[", "0", "]", ")", "\n", "", "if", "np", ".", "argmax", "(", "a", ")", "==", "0", ":", "\n", "                        ", "right", "+=", "1.", "\n", "", "", "", "print", "(", "answer", ")", "\n", "# print(\"result_state_pos\")", "\n", "# # print(result_state_pos)", "\n", "accurancy", "=", "float", "(", "right", "/", "test_size", ")", "\n", "print", "(", "\"Test Epoch:\"", ",", "'%d'", "%", "epoch", ",", "\"accuracy:\"", ",", "\"{:.9f}\"", ".", "format", "(", "accurancy", ")", ")", "\n", "\n", "if", "accurancy", ">", "best_accurancy", ":", "\n", "                ", "best_accurancy", "=", "accurancy", "\n", "best_epoch", "=", "epoch", "\n", "saver", ".", "save", "(", "sess", ",", "\"trained_model/cm_ggnn.ckpt\"", ")", "\n", "\n", "", "print", "(", "'now():'", "+", "str", "(", "datetime", ".", "now", "(", ")", ")", ")", "\n", "print", "(", "\"batch_size: %d, hidden_size: %d, n_steps: %d, learning_rate: %f\"", "%", "(", "\n", "batch_size", ",", "hidden_size", ",", "n_steps", ",", "learning_rate", ")", ")", "\n", "print", "(", "\"Epoch:\"", ",", "'%d'", "%", "epoch", ",", "\"finished\"", ",", "\"Best accurancy: %f\"", "%", "best_accurancy", ",", "\n", "\"Best epoch: %d\"", "%", "best_epoch", ")", "\n", "\n", "\n", "", "", "return", "best_accurancy", "\n", "\n"]], "home.repos.pwc.inspect_result.CRIPAC-DIG_NGNN.NGNN.main_score.look_enable_node": [[271, 278], ["numpy.sum", "enumerate", "index_list.append"], "function", ["None"], ["", "def", "look_enable_node", "(", "graph", ")", ":", "\n", "    ", "if_enable", "=", "np", ".", "sum", "(", "graph", ",", "axis", "=", "1", ")", "\n", "index_list", "=", "[", "]", "\n", "for", "index", ",", "value", "in", "enumerate", "(", "if_enable", ")", ":", "\n", "        ", "if", "value", ">", "0", ":", "\n", "            ", "index_list", ".", "append", "(", "index", ")", "\n", "", "", "return", "index_list", "\n", "\n"]]}