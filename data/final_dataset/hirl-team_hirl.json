{"home.repos.pwc.inspect_result.hirl-team_hirl.None.launch._find_free_port": [[12, 18], ["socket.socket", "socket.socket.bind", "socket.socket.close", "socket.socket.getsockname"], "function", ["None"], ["def", "_find_free_port", "(", ")", ":", "\n", "    ", "sock", "=", "socket", ".", "socket", "(", "socket", ".", "AF_INET", ",", "socket", ".", "SOCK_STREAM", ")", "\n", "sock", ".", "bind", "(", "(", "\"\"", ",", "0", ")", ")", "\n", "port", "=", "sock", ".", "getsockname", "(", ")", "[", "1", "]", "\n", "sock", ".", "close", "(", ")", "\n", "return", "port", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.None.launch._get_rand_port": [[20, 22], ["random.randrange"], "function", ["None"], ["", "def", "_get_rand_port", "(", ")", ":", "\n", "    ", "return", "random", ".", "randrange", "(", "20000", ",", "60000", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.None.launch.init_workdir": [[24, 28], ["os.path.dirname", "os.chdir", "sys.path.insert", "os.path.abspath"], "function", ["None"], ["", "def", "init_workdir", "(", ")", ":", "\n", "    ", "ROOT", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", "\n", "os", ".", "chdir", "(", "ROOT", ")", "\n", "sys", ".", "path", ".", "insert", "(", "0", ",", "ROOT", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.tools.train.parse_args": [[9, 16], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_known_args"], "function", ["None"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\"Running pretrain scheme\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--config\"", ",", "\"-c\"", ",", "type", "=", "str", ",", "\n", "help", "=", "\"which config file to use\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--local_rank\"", ",", "type", "=", "int", ",", "default", "=", "-", "1", ")", "\n", "args", ",", "other_args", "=", "parser", ".", "parse_known_args", "(", ")", "\n", "return", "args", ",", "other_args", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.eval_common.eval_knn.DatasetBuilder.build_imagenet": [[23, 28], ["eval_knn.ReturnIndexDataset", "eval_knn.ReturnIndexDataset", "os.path.join", "os.path.join"], "methods", ["None"], ["def", "build_imagenet", "(", "self", ",", "args", ")", ":", "\n", "        ", "data_path", "=", "args", ".", "data", "\n", "dataset_train", "=", "ReturnIndexDataset", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "\"train\"", ")", ",", "transform", "=", "self", ".", "transform", ")", "\n", "dataset_val", "=", "ReturnIndexDataset", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "\"val\"", ")", ",", "transform", "=", "self", ".", "transform", ")", "\n", "return", "dataset_train", ",", "dataset_val", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.eval_common.eval_knn.ReturnIndexDataset.__getitem__": [[30, 33], ["torchvision.datasets.ImageFolder.__getitem__"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.transfer.base.Places205Dataset.__getitem__"], ["    ", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "img", ",", "label", "=", "super", "(", "ReturnIndexDataset", ",", "self", ")", ".", "__getitem__", "(", "idx", ")", "\n", "return", "img", ",", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.eval_common.eval_knn.extract_feature_pipeline": [[34, 123], ["eval_knn.DatasetBuilder", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "model.cuda", "eval_knn.extract_feature_pipeline.load_pretrained_weights"], "function", ["None"], ["", "", "def", "extract_feature_pipeline", "(", "args", ")", ":", "\n", "\n", "    ", "data_builder", "=", "DatasetBuilder", "(", ")", "\n", "dataset_train", ",", "dataset_val", "=", "getattr", "(", "data_builder", ",", "\"build_imagenet\"", ")", "(", "args", ")", "\n", "# ============ preparing data ... ============", "\n", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "DistributedSampler", "(", "dataset_train", ",", "shuffle", "=", "False", ")", "\n", "data_loader_train", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset_train", ",", "\n", "sampler", "=", "sampler", ",", "\n", "batch_size", "=", "args", ".", "batch_size_per_gpu", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ",", "\n", "pin_memory", "=", "True", ",", "\n", "drop_last", "=", "False", ",", "\n", ")", "\n", "data_loader_val", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset_val", ",", "\n", "batch_size", "=", "args", ".", "batch_size_per_gpu", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ",", "\n", "pin_memory", "=", "True", ",", "\n", "drop_last", "=", "False", ",", "\n", ")", "\n", "print", "(", "f\"Data loaded with {len(dataset_train)} train and {len(dataset_val)} val imgs.\"", ")", "\n", "\n", "if", "args", ".", "arch", "in", "resnet", ".", "__dict__", ".", "keys", "(", ")", ":", "\n", "        ", "model", "=", "resnet", ".", "__dict__", "[", "args", ".", "arch", "]", "(", "num_classes", "=", "0", ")", "\n", "model", ".", "fc", "=", "nn", ".", "Identity", "(", ")", "\n", "", "elif", "args", ".", "arch", "in", "vt", ".", "__dict__", ".", "keys", "(", ")", ":", "\n", "        ", "model", "=", "vt", ".", "__dict__", "[", "args", ".", "arch", "]", "(", "\n", "patch_size", "=", "args", ".", "patch_size", ",", "\n", "num_classes", "=", "0", ",", "\n", "use_mean_pooling", "=", "False", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "f\"Architecture {args.arch} non supported\"", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "", "model", ".", "cuda", "(", ")", "\n", "\n", "def", "load_pretrained_weights", "(", "model", ",", "pretrained", ",", "backbone_prefix", "=", "None", ",", "model_prefix", "=", "\"model\"", ",", "filtered_keys", "=", "[", "]", ")", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "pretrained", ",", "map_location", "=", "\"cpu\"", ")", "\n", "if", "len", "(", "model_prefix", ")", ":", "\n", "            ", "checkpoint_model", "=", "checkpoint", "[", "model_prefix", "]", "\n", "", "else", ":", "\n", "            ", "checkpoint_model", "=", "checkpoint", "\n", "## automatically remove ddp prefix", "\n", "", "if", "all", "(", "[", "k", ".", "startswith", "(", "\"module.\"", ")", "for", "k", "in", "checkpoint_model", ".", "keys", "(", ")", "]", ")", ":", "\n", "            ", "print", "(", "\"remove ddp prefix from model.\"", ")", "\n", "checkpoint_model", "=", "{", "k", ".", "replace", "(", "\"module.\"", ",", "\"\"", ")", ":", "v", "for", "k", ",", "v", "in", "checkpoint_model", ".", "items", "(", ")", "}", "\n", "\n", "", "if", "backbone_prefix", ":", "\n", "            ", "checkpoint_model", "=", "{", "k", "[", "len", "(", "backbone_prefix", ")", "+", "1", ":", "]", ":", "v", "for", "k", ",", "v", "in", "checkpoint_model", ".", "items", "(", ")", "if", "k", ".", "startswith", "(", "backbone_prefix", ")", "}", "\n", "\n", "", "state_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "## remove head / fc", "\n", "removed_keys", "=", "list", "(", ")", "\n", "for", "key", "in", "checkpoint_model", ".", "keys", "(", ")", ":", "\n", "            ", "if", "key", "not", "in", "state_dict", "or", "key", "in", "filtered_keys", "or", "checkpoint_model", "[", "key", "]", ".", "shape", "!=", "state_dict", "[", "key", "]", ".", "shape", ":", "\n", "                ", "removed_keys", ".", "append", "(", "key", ")", "\n", "\n", "", "", "print", "(", "\"removed keys in pretrained model: {}\"", ".", "format", "(", "removed_keys", ")", ")", "\n", "for", "key", "in", "removed_keys", ":", "\n", "            ", "checkpoint_model", ".", "pop", "(", "key", ")", "\n", "\n", "", "msg", "=", "model", ".", "load_state_dict", "(", "checkpoint_model", ",", "strict", "=", "False", ")", "\n", "print", "(", "\"loading message: {}\"", ".", "format", "(", "msg", ")", ")", "\n", "return", "msg", "\n", "\n", "", "load_pretrained_weights", "(", "model", ",", "args", ".", "pretrained", ",", "args", ".", "backbone_prefix", ",", "args", ".", "model_prefix", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "# ============ extract features ... ============", "\n", "print", "(", "\"Extracting features for train set...\"", ")", "\n", "train_features", "=", "extract_features", "(", "model", ",", "data_loader_train", ",", "args", ".", "use_cuda", ")", "\n", "print", "(", "\"Extracting features for val set...\"", ")", "\n", "test_features", "=", "extract_features", "(", "model", ",", "data_loader_val", ",", "args", ".", "use_cuda", ")", "\n", "\n", "# by default, l2 normalization would be applied", "\n", "if", "dist", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "        ", "train_features", "=", "nn", ".", "functional", ".", "normalize", "(", "train_features", ",", "dim", "=", "1", ",", "p", "=", "2", ")", "\n", "test_features", "=", "nn", ".", "functional", ".", "normalize", "(", "test_features", ",", "dim", "=", "1", ",", "p", "=", "2", ")", "\n", "\n", "", "train_labels", "=", "torch", ".", "tensor", "(", "[", "s", "[", "-", "1", "]", "for", "s", "in", "dataset_train", ".", "samples", "]", ")", ".", "long", "(", ")", "\n", "test_labels", "=", "torch", ".", "tensor", "(", "[", "s", "[", "-", "1", "]", "for", "s", "in", "dataset_val", ".", "samples", "]", ")", ".", "long", "(", ")", "\n", "\n", "# save features and labels", "\n", "if", "args", ".", "dump_features", "and", "dist", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "        ", "torch", ".", "save", "(", "train_features", ".", "cpu", "(", ")", ",", "os", ".", "path", ".", "join", "(", "args", ".", "dump_features", ",", "\"trainfeat.pth\"", ")", ")", "\n", "torch", ".", "save", "(", "test_features", ".", "cpu", "(", ")", ",", "os", ".", "path", ".", "join", "(", "args", ".", "dump_features", ",", "\"testfeat.pth\"", ")", ")", "\n", "torch", ".", "save", "(", "train_labels", ".", "cpu", "(", ")", ",", "os", ".", "path", ".", "join", "(", "args", ".", "dump_features", ",", "\"trainlabels.pth\"", ")", ")", "\n", "torch", ".", "save", "(", "test_labels", ".", "cpu", "(", ")", ",", "os", ".", "path", ".", "join", "(", "args", ".", "dump_features", ",", "\"testlabels.pth\"", ")", ")", "\n", "", "return", "train_features", ",", "test_features", ",", "train_labels", ",", "test_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.eval_common.eval_knn.forward_single_vit": [[124, 133], ["model.get_intermediate_layers", "torch.cat().clone", "torch.cat().clone", "torch.cat().clone", "torch.cat", "torch.cat", "torch.cat"], "function", ["home.repos.pwc.inspect_result.hirl-team_hirl.backbones.vision_transformer.VisionTransformer.get_intermediate_layers"], ["", "def", "forward_single_vit", "(", "samples", ",", "model", ",", "n_last_blocks", "=", "1", ")", ":", "\n", "    ", "\"\"\"\n    modified forward function for vit architecture.\n    \"\"\"", "\n", "intermediate_output", "=", "model", ".", "get_intermediate_layers", "(", "samples", ",", "n_last_blocks", ")", "\n", "output", "=", "[", "x", "[", ":", ",", "0", "]", "for", "x", "in", "intermediate_output", "]", "# [CLS] Token for ViT", "\n", "\n", "feats", "=", "torch", ".", "cat", "(", "output", ",", "dim", "=", "-", "1", ")", ".", "clone", "(", ")", "\n", "return", "feats", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.eval_common.eval_knn.is_vit": [[134, 139], ["isinstance"], "function", ["None"], ["", "def", "is_vit", "(", "model", ")", ":", "\n", "    ", "if", "isinstance", "(", "model", ",", "vt", ".", "VisionTransformer", ")", ":", "\n", "        ", "return", "True", "\n", "", "else", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.eval_common.eval_knn.extract_features": [[140, 209], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "hirl.utils.misc.MetricLogger", "misc.MetricLogger.log_every", "samples.cuda.cuda", "index.cuda.cuda", "eval_knn.is_vit", "torch.empty", "torch.empty", "torch.empty", "list", "torch.distributed.all_gather", "torch.distributed.all_gather", "torch.distributed.all_gather", "torch.distributed.all_gather.wait", "torch.cat", "torch.cat", "torch.cat", "torch.empty", "torch.empty", "torch.empty", "list", "torch.distributed.all_gather", "torch.distributed.all_gather", "torch.distributed.all_gather", "torch.distributed.all_gather.wait", "torch.zeros", "torch.zeros", "torch.zeros", "print", "torch.get_world_size", "index.cuda.size", "torch.empty.unbind", "torch.get_world_size", "forward_single_vit.size", "forward_single_vit.size", "torch.empty.unbind", "get_rank", "v.norm", "eval_knn.forward_single_vit", "utils.multi_scale", "model().clone", "torch.get_rank", "len", "features.cuda.cuda", "features.cuda.index_copy_", "features.cuda.index_copy_", "eval_knn.forward_single_vit", "torch.cat", "torch.cat", "torch.cat", "torch.cat.cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "samples.cuda.clone", "torch.nn.functional.interpolate", "model", "torch.cat", "torch.cat", "torch.cat"], "function", ["home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.MetricLogger.log_every", "home.repos.pwc.inspect_result.hirl-team_hirl.eval_common.eval_knn.is_vit", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_world_size", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_world_size", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_rank", "home.repos.pwc.inspect_result.hirl-team_hirl.eval_common.eval_knn.forward_single_vit", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_rank", "home.repos.pwc.inspect_result.hirl-team_hirl.eval_common.eval_knn.forward_single_vit"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "extract_features", "(", "model", ",", "data_loader", ",", "n_last_blocks", "=", "1", ",", "use_cuda", "=", "True", ",", "multiscale", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Notes:\n    - n_last_blocks and avg_pool would be omiited if not using vit.\n    \"\"\"", "\n", "metric_logger", "=", "misc", ".", "MetricLogger", "(", "delimiter", "=", "\"  \"", ")", "\n", "features", "=", "None", "\n", "for", "samples", ",", "index", "in", "metric_logger", ".", "log_every", "(", "data_loader", ",", "10", ")", ":", "\n", "        ", "samples", "=", "samples", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "index", "=", "index", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "if", "is_vit", "(", "model", ")", ":", "# different embedding scheme for vit", "\n", "            ", "if", "multiscale", ":", "\n", "                ", "v", "=", "None", "\n", "for", "s", "in", "[", "1", ",", "1", "/", "2", "**", "(", "1", "/", "2", ")", ",", "1", "/", "2", "]", ":", "# we use 3 different scales", "\n", "                    ", "if", "s", "==", "1", ":", "\n", "                        ", "inp", "=", "samples", ".", "clone", "(", ")", "\n", "", "else", ":", "\n", "                        ", "inp", "=", "nn", ".", "functional", ".", "interpolate", "(", "samples", ",", "scale_factor", "=", "s", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "", "feats", "=", "forward_single_vit", "(", "inp", ")", "\n", "if", "v", "is", "None", ":", "\n", "                        ", "v", "=", "feats", "\n", "", "else", ":", "\n", "                        ", "v", "+=", "feats", "\n", "", "", "v", "/=", "3", "\n", "v", "/=", "v", ".", "norm", "(", ")", "\n", "feats", "=", "v", "\n", "", "else", ":", "\n", "                ", "feats", "=", "forward_single_vit", "(", "samples", ",", "model", ",", "n_last_blocks", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "multiscale", ":", "\n", "                ", "feats", "=", "utils", ".", "multi_scale", "(", "samples", ",", "model", ")", "\n", "", "else", ":", "\n", "                ", "feats", "=", "model", "(", "samples", ")", ".", "clone", "(", ")", "\n", "\n", "# init storage feature matrix", "\n", "", "", "if", "dist", ".", "get_rank", "(", ")", "==", "0", "and", "features", "is", "None", ":", "\n", "            ", "features", "=", "torch", ".", "zeros", "(", "len", "(", "data_loader", ".", "dataset", ")", ",", "feats", ".", "shape", "[", "-", "1", "]", ")", "\n", "if", "use_cuda", ":", "\n", "                ", "features", "=", "features", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "", "print", "(", "f\"Storing features into tensor of shape {features.shape}\"", ")", "\n", "\n", "# get indexes from all processes", "\n", "", "y_all", "=", "torch", ".", "empty", "(", "dist", ".", "get_world_size", "(", ")", ",", "index", ".", "size", "(", "0", ")", ",", "dtype", "=", "index", ".", "dtype", ",", "device", "=", "index", ".", "device", ")", "\n", "y_l", "=", "list", "(", "y_all", ".", "unbind", "(", "0", ")", ")", "\n", "y_all_reduce", "=", "torch", ".", "distributed", ".", "all_gather", "(", "y_l", ",", "index", ",", "async_op", "=", "True", ")", "\n", "y_all_reduce", ".", "wait", "(", ")", "\n", "index_all", "=", "torch", ".", "cat", "(", "y_l", ")", "\n", "\n", "# share features between processes", "\n", "feats_all", "=", "torch", ".", "empty", "(", "\n", "dist", ".", "get_world_size", "(", ")", ",", "\n", "feats", ".", "size", "(", "0", ")", ",", "\n", "feats", ".", "size", "(", "1", ")", ",", "\n", "dtype", "=", "feats", ".", "dtype", ",", "\n", "device", "=", "feats", ".", "device", ",", "\n", ")", "\n", "output_l", "=", "list", "(", "feats_all", ".", "unbind", "(", "0", ")", ")", "\n", "output_all_reduce", "=", "torch", ".", "distributed", ".", "all_gather", "(", "output_l", ",", "feats", ",", "async_op", "=", "True", ")", "\n", "output_all_reduce", ".", "wait", "(", ")", "\n", "\n", "# update storage feature matrix", "\n", "if", "get_rank", "(", ")", "==", "0", ":", "\n", "            ", "if", "use_cuda", ":", "\n", "                ", "features", ".", "index_copy_", "(", "0", ",", "index_all", ",", "torch", ".", "cat", "(", "output_l", ")", ")", "\n", "", "else", ":", "\n", "                ", "features", ".", "index_copy_", "(", "0", ",", "index_all", ".", "cpu", "(", ")", ",", "torch", ".", "cat", "(", "output_l", ")", ".", "cpu", "(", ")", ")", "\n", "", "", "", "return", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.eval_common.eval_knn.knn_classifier": [[211, 253], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "train_features.t.t", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "range", "torch.mm", "torch.mm", "torch.mm", "torch.mm.topk", "train_labels.view().expand", "torch.gather", "torch.gather", "torch.gather", "torch.zeros().cuda.resize_().zero_", "torch.zeros().cuda.scatter_", "distances.clone().div_().exp_", "torch.sum", "torch.sum", "torch.sum", "torch.sum.sort", "predictions.eq", "targets.size", "torch.zeros", "torch.zeros", "torch.zeros", "torch.gather.view", "torch.mul", "torch.mul", "torch.mul", "targets.data.view", "predictions.eq.narrow().sum().item", "predictions.eq.narrow().sum().item", "min", "train_labels.view", "torch.zeros().cuda.resize_", "distances.clone().div_", "torch.zeros().cuda.view", "distances.clone().div_().exp_.view", "min", "predictions.eq.narrow().sum", "predictions.eq.narrow().sum", "distances.clone", "predictions.eq.narrow", "predictions.eq.narrow", "min"], "function", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "knn_classifier", "(", "train_features", ",", "train_labels", ",", "test_features", ",", "\n", "test_labels", ",", "k", ",", "T", ",", "num_classes", "=", "1000", ",", ")", ":", "\n", "    ", "top1", ",", "top5", ",", "total", "=", "0.0", ",", "0.0", ",", "0", "\n", "train_features", "=", "train_features", ".", "t", "(", ")", "\n", "num_test_images", ",", "num_chunks", "=", "test_labels", ".", "shape", "[", "0", "]", ",", "100", "\n", "imgs_per_chunk", "=", "num_test_images", "//", "num_chunks", "\n", "retrieval_one_hot", "=", "torch", ".", "zeros", "(", "k", ",", "num_classes", ")", ".", "cuda", "(", ")", "\n", "for", "idx", "in", "range", "(", "0", ",", "num_test_images", ",", "imgs_per_chunk", ")", ":", "\n", "# get the features for test images", "\n", "        ", "features", "=", "test_features", "[", "\n", "idx", ":", "min", "(", "(", "idx", "+", "imgs_per_chunk", ")", ",", "num_test_images", ")", ",", ":", "\n", "]", "\n", "targets", "=", "test_labels", "[", "idx", ":", "min", "(", "(", "idx", "+", "imgs_per_chunk", ")", ",", "num_test_images", ")", "]", "\n", "batch_size", "=", "targets", ".", "shape", "[", "0", "]", "\n", "\n", "# calculate the dot product and compute top-k neighbors", "\n", "similarity", "=", "torch", ".", "mm", "(", "features", ",", "train_features", ")", "\n", "distances", ",", "indices", "=", "similarity", ".", "topk", "(", "k", ",", "largest", "=", "True", ",", "sorted", "=", "True", ")", "\n", "candidates", "=", "train_labels", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand", "(", "batch_size", ",", "-", "1", ")", "\n", "retrieved_neighbors", "=", "torch", ".", "gather", "(", "candidates", ",", "1", ",", "indices", ")", "\n", "\n", "retrieval_one_hot", ".", "resize_", "(", "batch_size", "*", "k", ",", "num_classes", ")", ".", "zero_", "(", ")", "\n", "retrieval_one_hot", ".", "scatter_", "(", "1", ",", "retrieved_neighbors", ".", "view", "(", "-", "1", ",", "1", ")", ",", "1", ")", "\n", "distances_transform", "=", "distances", ".", "clone", "(", ")", ".", "div_", "(", "T", ")", ".", "exp_", "(", ")", "\n", "probs", "=", "torch", ".", "sum", "(", "\n", "torch", ".", "mul", "(", "\n", "retrieval_one_hot", ".", "view", "(", "batch_size", ",", "-", "1", ",", "num_classes", ")", ",", "\n", "distances_transform", ".", "view", "(", "batch_size", ",", "-", "1", ",", "1", ")", ",", "\n", ")", ",", "\n", "1", ",", "\n", ")", "\n", "_", ",", "predictions", "=", "probs", ".", "sort", "(", "1", ",", "True", ")", "\n", "\n", "# find the predictions that match the target", "\n", "correct", "=", "predictions", ".", "eq", "(", "targets", ".", "data", ".", "view", "(", "-", "1", ",", "1", ")", ")", "\n", "top1", "=", "top1", "+", "correct", ".", "narrow", "(", "1", ",", "0", ",", "1", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "top5", "=", "top5", "+", "correct", ".", "narrow", "(", "1", ",", "0", ",", "min", "(", "5", ",", "k", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "# top5 does not make sense if k < 5", "\n", "total", "+=", "targets", ".", "size", "(", "0", ")", "\n", "", "top1", "=", "top1", "*", "100.0", "/", "total", "\n", "top5", "=", "top5", "*", "100.0", "/", "total", "\n", "return", "top1", ",", "top5", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.eval_common.eval_knn.parse_args_knn": [[254, 283], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.hirl-team_hirl.eval_common.eval_clustering.parse_args"], ["", "def", "parse_args_knn", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "'Evaluation with weighted k-NN'", ")", "\n", "parser", ".", "add_argument", "(", "'--n_last_blocks'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "help", "=", "\"\"\"Concatenate [CLS] tokens\n        for the `n` last blocks. `n=1` all the time for k-NN evaluation is used in iBOT/DINO/MoCoV3.\"\"\"", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size_per_gpu'", ",", "default", "=", "128", ",", "type", "=", "int", ",", "help", "=", "'Per-GPU batch-size'", ")", "\n", "parser", ".", "add_argument", "(", "'--nb_knn'", ",", "default", "=", "[", "10", ",", "20", ",", "100", ",", "200", "]", ",", "nargs", "=", "'+'", ",", "type", "=", "int", ",", "\n", "help", "=", "'Number of NN to use. 20 is usually working the best.'", ")", "\n", "parser", ".", "add_argument", "(", "'--temperature'", ",", "default", "=", "0.07", ",", "type", "=", "float", ",", "\n", "help", "=", "'Temperature used in the voting coefficient'", ")", "\n", "parser", ".", "add_argument", "(", "'--pretrained'", ",", "default", "=", "''", ",", "type", "=", "str", ",", "help", "=", "\"Path to pretrained weights to evaluate.\"", ")", "\n", "parser", ".", "add_argument", "(", "'--use_cuda'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "\n", "help", "=", "\"Store features in GPU.\"", ")", "\n", "parser", ".", "add_argument", "(", "'--arch'", ",", "default", "=", "'resnet50'", ",", "type", "=", "str", ",", "help", "=", "'Architecture'", ")", "\n", "parser", ".", "add_argument", "(", "\"--checkpoint_key\"", ",", "default", "=", "\"state_dict\"", ",", "type", "=", "str", ",", "\n", "help", "=", "'Key to use in the checkpoint'", ")", "\n", "parser", ".", "add_argument", "(", "'--patch_size'", ",", "default", "=", "16", ",", "type", "=", "int", ",", "help", "=", "'Patch resolution of the model.'", ")", "\n", "parser", ".", "add_argument", "(", "'--dump_features'", ",", "default", "=", "None", ",", "\n", "help", "=", "'Path where to save computed features, empty for no saving'", ")", "\n", "parser", ".", "add_argument", "(", "'--load_features'", ",", "default", "=", "None", ",", "help", "=", "\"\"\"If the features have\n        already been computed, where to find them.\"\"\"", ")", "\n", "parser", ".", "add_argument", "(", "'--num_workers'", ",", "default", "=", "10", ",", "type", "=", "int", ",", "help", "=", "'Number of data loading workers per GPU.'", ")", "\n", "parser", ".", "add_argument", "(", "\"--dist_url\"", ",", "default", "=", "\"env://\"", ",", "type", "=", "str", ",", "help", "=", "\"\"\"url used to set up\n        distributed training; \"\"\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--local_rank\"", ",", "default", "=", "0", ",", "type", "=", "int", ",", "help", "=", "\"Please ignore and do not set this argument.\"", ")", "\n", "parser", ".", "add_argument", "(", "'--data'", ",", "type", "=", "str", ",", "default", "=", "\"./datasets/Imagenet1K/ILSVRC/Data/CLS-LOC\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--backbone_prefix\"", ",", "type", "=", "str", ",", "default", "=", "\"backbone\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--model_prefix\"", ",", "type", "=", "str", ",", "default", "=", "\"model\"", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.eval_common.eval_clustering.ReturnIndexDataset.__getitem__": [[18, 21], ["torchvision.datasets.ImageFolder.__getitem__"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.transfer.base.Places205Dataset.__getitem__"], ["    ", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "img", ",", "label", "=", "super", "(", "ReturnIndexDataset", ",", "self", ")", ".", "__getitem__", "(", "idx", ")", "\n", "return", "img", ",", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.eval_common.eval_clustering.eval_pred": [[22, 28], ["sklearn.metrics.normalized_mutual_info_score", "sklearn.metrics.adjusted_mutual_info_score", "hirl.utils.clustering.get_y_preds", "sklearn.metrics.accuracy_score", "len", "set"], "function", ["home.repos.pwc.inspect_result.hirl-team_hirl.utils.clustering.get_y_preds"], ["", "", "def", "eval_pred", "(", "label", ",", "pred", ")", ":", "\n", "    ", "nmi", "=", "metrics", ".", "normalized_mutual_info_score", "(", "label", ",", "pred", ")", "\n", "ami", "=", "metrics", ".", "adjusted_mutual_info_score", "(", "label", ",", "pred", ")", "\n", "pred_adjusted", "=", "get_y_preds", "(", "label", ",", "pred", ",", "len", "(", "set", "(", "label", ")", ")", ")", "\n", "acc", "=", "metrics", ".", "accuracy_score", "(", "pred_adjusted", ",", "label", ")", "\n", "return", "nmi", ",", "ami", ",", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.eval_common.eval_clustering.run_clustering": [[29, 65], ["enumerate", "torch.barrier", "hirl.utils.clustering.run_hkmeans.items", "[].cpu().long", "print", "print", "int", "cluster_result[].append", "cluster_result[].append", "cluster_result[].append", "torch.get_rank", "features.cpu().numpy.cpu().numpy", "hirl.utils.clustering.run_hkmeans", "args.num_classes.split", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "cluster_result[].append", "cluster_result[].append", "torch.broadcast", "[].cpu", "len", "[].cpu().long.max", "len", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "features.cpu().numpy.cpu", "[].cpu().long.unique", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "len", "int", "int", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "int", "int", "int"], "function", ["home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_rank", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.clustering.run_hkmeans", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.SmoothedValue.max"], ["", "def", "run_clustering", "(", "features", ",", "args", ")", ":", "\n", "    ", "\"\"\"\n    eval clustering result by kmeans clustering with features and labels.\n\n    Args:\n        features: torch.tensor([N, D])\n        labels: torch.tensor([N,])\n    Returns:\n        dict(acc, nmi, ami)\n    \"\"\"", "\n", "num_clusters", "=", "[", "int", "(", "x", ")", "for", "x", "in", "args", ".", "num_classes", ".", "split", "(", "\",\"", ")", "]", "\n", "\n", "cluster_result", "=", "{", "'im2cluster'", ":", "[", "]", ",", "'centroids'", ":", "[", "]", ",", "'density'", ":", "[", "]", ",", "'cluster2cluster'", ":", "[", "]", ",", "'logits'", ":", "[", "]", "}", "\n", "for", "i", ",", "num_cluster", "in", "enumerate", "(", "num_clusters", ")", ":", "\n", "        ", "cluster_result", "[", "'im2cluster'", "]", ".", "append", "(", "torch", ".", "zeros", "(", "len", "(", "features", ")", ",", "dtype", "=", "torch", ".", "long", ")", ".", "cuda", "(", ")", ")", "\n", "cluster_result", "[", "'centroids'", "]", ".", "append", "(", "torch", ".", "zeros", "(", "int", "(", "num_cluster", ")", ",", "features", ".", "shape", "[", "-", "1", "]", ")", ".", "cuda", "(", ")", ")", "\n", "cluster_result", "[", "'density'", "]", ".", "append", "(", "torch", ".", "zeros", "(", "int", "(", "num_cluster", ")", ")", ".", "cuda", "(", ")", ")", "\n", "if", "i", "<", "(", "len", "(", "num_clusters", ")", "-", "1", ")", ":", "\n", "            ", "cluster_result", "[", "'cluster2cluster'", "]", ".", "append", "(", "torch", ".", "zeros", "(", "int", "(", "num_cluster", ")", ",", "dtype", "=", "torch", ".", "long", ")", ".", "cuda", "(", ")", ")", "\n", "cluster_result", "[", "'logits'", "]", ".", "append", "(", "torch", ".", "zeros", "(", "[", "int", "(", "num_cluster", ")", ",", "int", "(", "num_clusters", "[", "i", "+", "1", "]", ")", "]", ")", ".", "cuda", "(", ")", ")", "\n", "\n", "", "", "if", "dist", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "        ", "features", "[", "torch", ".", "norm", "(", "features", ",", "dim", "=", "1", ")", ">", "1.5", "]", "/=", "2", "\n", "features", "=", "features", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "cluster_result", "=", "run_hkmeans", "(", "features", ",", "num_clusters", ")", "\n", "\n", "", "dist", ".", "barrier", "(", ")", "\n", "for", "k", ",", "data_list", "in", "cluster_result", ".", "items", "(", ")", ":", "\n", "        ", "for", "data_tensor", "in", "data_list", ":", "\n", "            ", "dist", ".", "broadcast", "(", "data_tensor", ",", "0", ",", "async_op", "=", "False", ")", "\n", "\n", "", "", "im2cluster", "=", "cluster_result", "[", "'im2cluster'", "]", "[", "-", "1", "]", ".", "cpu", "(", ")", ".", "long", "(", ")", "# [N,]", "\n", "print", "(", "\"number of unique clusters: {}\"", ".", "format", "(", "len", "(", "im2cluster", ".", "unique", "(", ")", ")", ")", ")", "\n", "print", "(", "\"max cluster id {}\"", ".", "format", "(", "im2cluster", ".", "max", "(", ")", ")", ")", "\n", "\n", "return", "im2cluster", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.eval_common.eval_clustering.extract_features": [[67, 89], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model.eval", "hirl.utils.misc.MetricLogger", "[].cuda", "model", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "print", "enumerate", "torch.barrier", "torch.all_reduce", "torch.zeros().cuda.cpu", "misc.MetricLogger.log_every", "image.cuda.cuda", "torch.normalize", "F.normalize.detach", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "model", "next", "len", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "iter"], "function", ["home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.MetricLogger.log_every"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "extract_features", "(", "model", ",", "loader", ",", "args", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "header", "=", "'Feature Extraction'", "\n", "log_interval", "=", "100", "\n", "metric_logger", "=", "misc", ".", "MetricLogger", "(", "delimiter", "=", "\"  \"", ")", "\n", "## lazy feat dim", "\n", "image", "=", "next", "(", "iter", "(", "loader", ")", ")", "[", "0", "]", ".", "cuda", "(", ")", "\n", "feat", "=", "model", "(", "image", ")", "\n", "feat_dim", "=", "feat", ".", "shape", "[", "-", "1", "]", "\n", "\n", "features", "=", "torch", ".", "zeros", "(", "len", "(", "loader", ".", "dataset", ")", ",", "feat_dim", ")", ".", "cuda", "(", ")", "\n", "print", "(", "\"feature shape: {}\"", ".", "format", "(", "features", ".", "shape", ")", ")", "\n", "\n", "for", "it", ",", "(", "image", ",", "index", ")", "in", "enumerate", "(", "metric_logger", ".", "log_every", "(", "loader", ",", "log_interval", ",", "header", ")", ")", ":", "\n", "        ", "image", "=", "image", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "feat", "=", "F", ".", "normalize", "(", "model", "(", "image", ")", ",", "dim", "=", "-", "1", ")", "\n", "features", "[", "index", "]", "=", "feat", ".", "detach", "(", ")", "\n", "", "dist", ".", "barrier", "(", ")", "\n", "dist", ".", "all_reduce", "(", "features", ",", "op", "=", "dist", ".", "ReduceOp", ".", "SUM", ")", "\n", "features", "[", "torch", ".", "norm", "(", "features", ",", "dim", "=", "1", ")", ">", "1.5", "]", "/=", "2", "\n", "return", "features", ".", "cpu", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.eval_common.eval_clustering.run": [[90, 165], ["torchvision.transforms.Compose", "eval_clustering.ReturnIndexDataset", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "model.cuda", "eval_clustering.run.load_pretrained_weights"], "function", ["None"], ["", "def", "run", "(", "args", ")", ":", "\n", "# ============ preparing data ... ============", "\n", "    ", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "256", ",", "interpolation", "=", "3", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.485", ",", "0.456", ",", "0.406", ")", ",", "(", "0.229", ",", "0.224", ",", "0.225", ")", ")", ",", "\n", "]", ")", "\n", "\n", "dataset_val", "=", "ReturnIndexDataset", "(", "os", ".", "path", ".", "join", "(", "args", ".", "data", ",", "\"val\"", ")", ",", "transform", "=", "transform", ")", "\n", "test_sampler", "=", "torch", ".", "utils", ".", "data", ".", "DistributedSampler", "(", "dataset_val", ",", "shuffle", "=", "False", ")", "\n", "\n", "data_loader_val", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset_val", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "num_workers", "=", "10", ",", "\n", "sampler", "=", "test_sampler", ",", "\n", "pin_memory", "=", "True", ",", "\n", "drop_last", "=", "False", ",", "\n", ")", "\n", "print", "(", "f\"Data loaded with {len(dataset_val)} val imgs.\"", ")", "\n", "\n", "if", "args", ".", "arch", "in", "resnet", ".", "__dict__", ".", "keys", "(", ")", ":", "\n", "        ", "model", "=", "resnet", ".", "__dict__", "[", "args", ".", "arch", "]", "(", "num_classes", "=", "0", ")", "\n", "model", ".", "fc", "=", "nn", ".", "Identity", "(", ")", "\n", "", "elif", "args", ".", "arch", "in", "vt", ".", "__dict__", ".", "keys", "(", ")", ":", "\n", "        ", "model", "=", "vt", ".", "__dict__", "[", "args", ".", "arch", "]", "(", "\n", "patch_size", "=", "args", ".", "patch_size", ",", "\n", "num_classes", "=", "0", ",", "\n", "use_mean_pooling", "=", "False", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "f\"Architecture {args.arch} non supported\"", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "", "model", ".", "cuda", "(", ")", "\n", "\n", "def", "load_pretrained_weights", "(", "model", ",", "pretrained", ",", "backbone_prefix", "=", "None", ",", "model_prefix", "=", "\"model\"", ",", "filtered_keys", "=", "[", "]", ")", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "pretrained", ",", "map_location", "=", "\"cpu\"", ")", "\n", "if", "len", "(", "model_prefix", ")", ":", "\n", "            ", "checkpoint_model", "=", "checkpoint", "[", "model_prefix", "]", "\n", "", "else", ":", "\n", "            ", "checkpoint_model", "=", "checkpoint", "\n", "## automatically remove ddp prefix", "\n", "", "if", "all", "(", "[", "k", ".", "startswith", "(", "\"module.\"", ")", "for", "k", "in", "checkpoint_model", ".", "keys", "(", ")", "]", ")", ":", "\n", "            ", "print", "(", "\"remove ddp prefix from model.\"", ")", "\n", "checkpoint_model", "=", "{", "k", ".", "replace", "(", "\"module.\"", ",", "\"\"", ")", ":", "v", "for", "k", ",", "v", "in", "checkpoint_model", ".", "items", "(", ")", "}", "\n", "\n", "", "if", "backbone_prefix", ":", "\n", "            ", "checkpoint_model", "=", "{", "k", "[", "len", "(", "backbone_prefix", ")", "+", "1", ":", "]", ":", "v", "for", "k", ",", "v", "in", "checkpoint_model", ".", "items", "(", ")", "if", "k", ".", "startswith", "(", "backbone_prefix", ")", "}", "\n", "\n", "", "state_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "## remove head / fc", "\n", "removed_keys", "=", "list", "(", ")", "\n", "for", "key", "in", "checkpoint_model", ".", "keys", "(", ")", ":", "\n", "            ", "if", "key", "not", "in", "state_dict", "or", "key", "in", "filtered_keys", "or", "checkpoint_model", "[", "key", "]", ".", "shape", "!=", "state_dict", "[", "key", "]", ".", "shape", ":", "\n", "                ", "removed_keys", ".", "append", "(", "key", ")", "\n", "\n", "", "", "print", "(", "\"removed keys in pretrained model: {}\"", ".", "format", "(", "removed_keys", ")", ")", "\n", "for", "key", "in", "removed_keys", ":", "\n", "            ", "checkpoint_model", ".", "pop", "(", "key", ")", "\n", "\n", "", "msg", "=", "model", ".", "load_state_dict", "(", "checkpoint_model", ",", "strict", "=", "False", ")", "\n", "print", "(", "\"loading message: {}\"", ".", "format", "(", "msg", ")", ")", "\n", "return", "msg", "\n", "\n", "", "load_pretrained_weights", "(", "model", ",", "args", ".", "pretrained", ",", "args", ".", "backbone_prefix", ",", "args", ".", "model_prefix", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "# ============ extract features... ============", "\n", "test_labels", "=", "torch", ".", "tensor", "(", "[", "s", "[", "-", "1", "]", "for", "s", "in", "dataset_val", ".", "samples", "]", ")", ".", "long", "(", ")", "\n", "test_features", "=", "extract_features", "(", "model", ",", "data_loader_val", ",", "args", ")", "\n", "\n", "im2cluster", "=", "run_clustering", "(", "test_features", ",", "args", ")", "\n", "nmi", ",", "ami", ",", "acc", "=", "eval_pred", "(", "test_labels", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "im2cluster", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "return_dict", "=", "dict", "(", "nmi", "=", "nmi", ",", "ami", "=", "ami", ",", "acc", "=", "acc", ")", "\n", "return", "return_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.eval_common.eval_clustering.parse_args": [[166, 180], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_known_args"], "function", ["None"], ["", "def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "'Evaluation with kmeans clustering on ImageNet'", ")", "\n", "parser", ".", "add_argument", "(", "\"--arch\"", ",", "type", "=", "str", ",", "default", "=", "\"resnet50\"", ",", "help", "=", "\"Architecture of network.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--backbone_prefix\"", ",", "type", "=", "str", ",", "default", "=", "\"backbone\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--model_prefix\"", ",", "type", "=", "str", ",", "default", "=", "\"model\"", ")", "\n", "parser", ".", "add_argument", "(", "'--pretrained'", ",", "default", "=", "''", ",", "type", "=", "str", ",", "help", "=", "\"Path to pretrained weights to evaluate.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--num_classes\"", ",", "type", "=", "str", ",", "default", "=", "\"1000\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--batch_size\"", ",", "\"-bs\"", ",", "type", "=", "int", ",", "default", "=", "64", ")", "\n", "parser", ".", "add_argument", "(", "'--data'", ",", "type", "=", "str", ",", "default", "=", "\"./datasets/Imagenet1K/ILSVRC/Data/CLS-LOC\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--local_rank\"", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "\"--dist_url\"", ",", "default", "=", "\"env://\"", ",", "type", "=", "str", ",", "help", "=", "\"\"\"url used to set up\n        distributed training; \"\"\"", ")", "\n", "args", ",", "other_args", "=", "parser", ".", "parse_known_args", "(", ")", "\n", "return", "args", ",", "other_args", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.utils.transforms.GaussianBlur.__init__": [[11, 15], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "p", "=", "0.5", ",", "radius_min", "=", "0.1", ",", "radius_max", "=", "2.", ")", ":", "\n", "        ", "self", ".", "prob", "=", "p", "\n", "self", ".", "radius_min", "=", "radius_min", "\n", "self", ".", "radius_max", "=", "radius_max", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.utils.transforms.GaussianBlur.__call__": [[16, 24], ["img.filter", "random.random", "PIL.ImageFilter.GaussianBlur", "random.uniform"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "do_it", "=", "random", ".", "random", "(", ")", "<=", "self", ".", "prob", "\n", "if", "not", "do_it", ":", "\n", "            ", "return", "img", "\n", "\n", "", "return", "img", ".", "filter", "(", "\n", "ImageFilter", ".", "GaussianBlur", "(", "\n", "radius", "=", "random", ".", "uniform", "(", "self", ".", "radius_min", ",", "self", ".", "radius_max", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.utils.transforms.Solarization.__init__": [[31, 33], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "p", ")", ":", "\n", "        ", "self", ".", "p", "=", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.utils.transforms.Solarization.__call__": [[34, 39], ["random.random", "PIL.ImageOps.solarize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "self", ".", "p", ":", "\n", "            ", "return", "ImageOps", ".", "solarize", "(", "img", ")", "\n", "", "else", ":", "\n", "            ", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.utils.transforms.PermutePatch.__init__": [[45, 47], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "psz", ")", ":", "\n", "        ", "self", ".", "psz", "=", "psz", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.utils.transforms.PermutePatch.__call__": [[48, 63], ["range", "random.shuffle", "PIL.Image.new", "range", "range", "range", "imgs.append", "PIL.Image.new.paste", "img.crop"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "imgs", "=", "[", "]", "\n", "imgwidth", ",", "imgheight", "=", "img", ".", "size", "\n", "for", "i", "in", "range", "(", "0", ",", "imgheight", ",", "self", ".", "psz", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "0", ",", "imgwidth", ",", "self", ".", "psz", ")", ":", "\n", "                ", "box", "=", "(", "j", ",", "i", ",", "j", "+", "self", ".", "psz", ",", "i", "+", "self", ".", "psz", ")", "\n", "imgs", ".", "append", "(", "img", ".", "crop", "(", "box", ")", ")", "\n", "", "", "random", ".", "shuffle", "(", "imgs", ")", "\n", "new_img", "=", "Image", ".", "new", "(", "'RGB'", ",", "(", "imgwidth", ",", "imgheight", ")", ")", "\n", "k", "=", "0", "\n", "for", "i", "in", "range", "(", "0", ",", "imgheight", ",", "self", ".", "psz", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "0", ",", "imgwidth", ",", "self", ".", "psz", ")", ":", "\n", "                ", "new_img", ".", "paste", "(", "imgs", "[", "k", "]", ",", "(", "j", ",", "i", ")", ")", "\n", "k", "+=", "1", "\n", "", "", "return", "new_img", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.utils.transforms.HideAndSeek.__init__": [[68, 71], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "ratio", ",", "psz", ")", ":", "\n", "        ", "self", ".", "ratio", "=", "ratio", "\n", "self", ".", "psz", "=", "psz", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.utils.transforms.HideAndSeek.__call__": [[72, 85], ["int", "numpy.random.choice", "PIL.ImageDraw.Draw", "zip", "numpy.arange", "PIL.ImageDraw.Draw.rectangle"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "imgwidth", ",", "imgheight", "=", "img", ".", "size", "\n", "numw", ",", "numh", "=", "imgwidth", "//", "self", ".", "psz", ",", "imgheight", "//", "self", ".", "psz", "\n", "mask_num", "=", "int", "(", "numw", "*", "numh", "*", "self", ".", "ratio", ")", "\n", "mask_patch", "=", "np", ".", "random", ".", "choice", "(", "np", ".", "arange", "(", "numw", "*", "numh", ")", ",", "mask_num", ",", "replace", "=", "False", ")", "\n", "mask_w", ",", "mask_h", "=", "mask_patch", "%", "numh", ",", "mask_patch", "//", "numh", "\n", "draw", "=", "ImageDraw", ".", "Draw", "(", "img", ")", "\n", "for", "mw", ",", "mh", "in", "zip", "(", "mask_w", ",", "mask_h", ")", ":", "\n", "            ", "draw", ".", "rectangle", "(", "(", "mw", "*", "self", ".", "psz", ",", "\n", "mh", "*", "self", ".", "psz", ",", "\n", "(", "mw", "+", "1", ")", "*", "self", ".", "psz", ",", "\n", "(", "mh", "+", "1", ")", "*", "self", ".", "psz", ")", ",", "fill", "=", "\"black\"", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.utils.transforms.DataAugmentationDINO.__init__": [[87, 125], ["torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.RandomApply", "torchvision.transforms.RandomGrayscale", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.RandomResizedCrop", "torchvision.transforms.GaussianBlur", "torchvision.transforms.RandomResizedCrop", "torchvision.transforms.GaussianBlur", "torchvision.transforms.Solarization", "torchvision.transforms.RandomResizedCrop", "torchvision.transforms.GaussianBlur", "torchvision.transforms.ColorJitter"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "global_crops_scale", ",", "local_crops_scale", ",", "global_crops_number", ",", "local_crops_number", ")", ":", "\n", "        ", "flip_and_color_jitter", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomHorizontalFlip", "(", "p", "=", "0.5", ")", ",", "\n", "transforms", ".", "RandomApply", "(", "\n", "[", "transforms", ".", "ColorJitter", "(", "brightness", "=", "0.4", ",", "contrast", "=", "0.4", ",", "saturation", "=", "0.2", ",", "hue", "=", "0.1", ")", "]", ",", "\n", "p", "=", "0.8", "\n", ")", ",", "\n", "transforms", ".", "RandomGrayscale", "(", "p", "=", "0.2", ")", ",", "\n", "]", ")", "\n", "normalize", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.485", ",", "0.456", ",", "0.406", ")", ",", "(", "0.229", ",", "0.224", ",", "0.225", ")", ")", ",", "\n", "]", ")", "\n", "\n", "self", ".", "global_crops_number", "=", "global_crops_number", "\n", "# transformation for the first global crop", "\n", "self", ".", "global_transfo1", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "224", ",", "scale", "=", "global_crops_scale", ",", "interpolation", "=", "Image", ".", "BICUBIC", ")", ",", "\n", "flip_and_color_jitter", ",", "\n", "GaussianBlur", "(", "1.0", ")", ",", "\n", "normalize", ",", "\n", "]", ")", "\n", "## Note: an extra solarization is applied on other global crops | why doing so?", "\n", "# transformation for the rest of global crops", "\n", "self", ".", "global_transfo2", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "224", ",", "scale", "=", "global_crops_scale", ",", "interpolation", "=", "Image", ".", "BICUBIC", ")", ",", "\n", "flip_and_color_jitter", ",", "\n", "GaussianBlur", "(", "0.1", ")", ",", "\n", "Solarization", "(", "0.2", ")", ",", "\n", "normalize", ",", "\n", "]", ")", "\n", "# transformation for the local crops", "\n", "self", ".", "local_crops_number", "=", "local_crops_number", "\n", "self", ".", "local_transfo", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "96", ",", "scale", "=", "local_crops_scale", ",", "interpolation", "=", "Image", ".", "BICUBIC", ")", ",", "\n", "flip_and_color_jitter", ",", "\n", "GaussianBlur", "(", "p", "=", "0.5", ")", ",", "\n", "normalize", ",", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.utils.transforms.DataAugmentationDINO.__call__": [[127, 135], ["crops.append", "range", "range", "torchvision.transforms.DataAugmentationDINO.global_transfo1", "crops.append", "crops.append", "torchvision.transforms.DataAugmentationDINO.global_transfo2", "torchvision.transforms.DataAugmentationDINO.local_transfo"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "image", ")", ":", "\n", "        ", "crops", "=", "[", "]", "\n", "crops", ".", "append", "(", "self", ".", "global_transfo1", "(", "image", ")", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "global_crops_number", "-", "1", ")", ":", "\n", "            ", "crops", ".", "append", "(", "self", ".", "global_transfo2", "(", "image", ")", ")", "\n", "", "for", "_", "in", "range", "(", "self", ".", "local_crops_number", ")", ":", "\n", "            ", "crops", ".", "append", "(", "self", ".", "local_transfo", "(", "image", ")", ")", "\n", "", "return", "crops", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.utils.transforms.DataAugmentationMoCoV3.__init__": [[149, 188], ["torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.RandomApply", "torchvision.transforms.RandomGrayscale", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.RandomResizedCrop", "torchvision.transforms.GaussianBlur", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.RandomResizedCrop", "torchvision.transforms.GaussianBlur", "torchvision.transforms.Solarization", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.RandomResizedCrop", "torchvision.transforms.GaussianBlur", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ColorJitter"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "global_crops_scale", ",", "local_crops_scale", ",", "global_crops_number", ",", "local_crops_number", ")", ":", "\n", "        ", "color_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomApply", "(", "\n", "[", "transforms", ".", "ColorJitter", "(", "brightness", "=", "0.4", ",", "contrast", "=", "0.4", ",", "saturation", "=", "0.2", ",", "hue", "=", "0.1", ")", "]", ",", "\n", "p", "=", "0.8", "\n", ")", ",", "\n", "transforms", ".", "RandomGrayscale", "(", "p", "=", "0.2", ")", ",", "\n", "]", ")", "\n", "normalize", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.485", ",", "0.456", ",", "0.406", ")", ",", "(", "0.229", ",", "0.224", ",", "0.225", ")", ")", ",", "\n", "]", ")", "\n", "\n", "# transformation for global crops", "\n", "self", ".", "global_crops_number", "=", "global_crops_number", "\n", "self", ".", "global_transform1", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "224", ",", "scale", "=", "global_crops_scale", ")", ",", "\n", "color_transform", ",", "\n", "GaussianBlur", "(", "1.0", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "normalize", "\n", "]", ")", "\n", "self", ".", "global_transform2", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "224", ",", "scale", "=", "global_crops_scale", ")", ",", "\n", "color_transform", ",", "\n", "GaussianBlur", "(", "0.1", ")", ",", "\n", "Solarization", "(", "0.2", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "normalize", "\n", "]", ")", "\n", "\n", "# transformation for the local crops", "\n", "self", ".", "local_crops_number", "=", "local_crops_number", "\n", "self", ".", "local_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "96", ",", "scale", "=", "local_crops_scale", ")", ",", "\n", "color_transform", ",", "\n", "GaussianBlur", "(", "p", "=", "0.5", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "normalize", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.utils.transforms.DataAugmentationMoCoV3.__call__": [[190, 198], ["crops.append", "range", "range", "torchvision.transforms.DataAugmentationMoCoV3.global_transform1", "crops.append", "crops.append", "torchvision.transforms.DataAugmentationMoCoV3.global_transform2", "torchvision.transforms.DataAugmentationMoCoV3.local_transform"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "image", ")", ":", "\n", "        ", "crops", "=", "[", "]", "\n", "crops", ".", "append", "(", "self", ".", "global_transform1", "(", "image", ")", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "global_crops_number", "-", "1", ")", ":", "\n", "            ", "crops", ".", "append", "(", "self", ".", "global_transform2", "(", "image", ")", ")", "\n", "", "for", "_", "in", "range", "(", "self", ".", "local_crops_number", ")", ":", "\n", "            ", "crops", ".", "append", "(", "self", ".", "local_transform", "(", "image", ")", ")", "\n", "", "return", "crops", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.utils.transforms.SingleCropTransform.__init__": [[204, 225], ["torchvision.transforms.Compose", "torchvision.transforms.RandomApply", "torchvision.transforms.RandomGrayscale", "torchvision.transforms.GaussianBlur", "base_augmentations.extend", "base_augmentations.extend", "base_augmentations.append", "base_augmentations.extend", "base_augmentations.extend", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ColorJitter", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.RandomResizedCrop"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size_crop", ",", "min_scale_crop", ",", "max_scale_crop", ",", "color_scale", "=", "0.5", ",", "color_first", "=", "True", ")", ":", "\n", "\n", "        ", "color_transform", "=", "[", "transforms", ".", "RandomApply", "(", "[", "transforms", ".", "ColorJitter", "(", "0.8", "*", "color_scale", ",", "0.8", "*", "color_scale", ",", "0.8", "*", "color_scale", ",", "0.2", "*", "color_scale", ")", "]", ",", "p", "=", "0.8", ")", ",", "\n", "transforms", ".", "RandomGrayscale", "(", "p", "=", "0.2", ")", ",", "\n", "GaussianBlur", "(", "p", "=", "0.5", ",", "radius_min", "=", "0.1", ",", "radius_max", "=", "2.0", ")", ",", "]", "\n", "\n", "base_augmentations", "=", "[", "]", "\n", "if", "color_first", ":", "\n", "            ", "base_augmentations", ".", "extend", "(", "color_transform", ")", "\n", "base_augmentations", ".", "extend", "(", "[", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "]", ")", "\n", "", "else", ":", "\n", "            ", "base_augmentations", ".", "append", "(", "transforms", ".", "RandomHorizontalFlip", "(", ")", ")", "\n", "base_augmentations", ".", "extend", "(", "color_transform", ")", "\n", "base_augmentations", ".", "extend", "(", "[", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "]", ")", "\n", "\n", "\n", "", "self", ".", "trans", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "size_crop", ",", "scale", "=", "(", "min_scale_crop", ",", "max_scale_crop", ")", ")", ",", "]", "+", "base_augmentations", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.utils.transforms.SingleCropTransform.__call__": [[226, 230], ["torchvision.transforms.SingleCropTransform.trans", "torchvision.transforms.SingleCropTransform.trans"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "        ", "q", "=", "self", ".", "trans", "(", "x", ")", "\n", "k", "=", "self", ".", "trans", "(", "x", ")", "\n", "return", "[", "q", ",", "k", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.utils.transforms.MultiCropsTransform.__init__": [[244, 279], ["torchvision.transforms.Compose", "range", "print", "len", "len", "len", "len", "len", "len", "torchvision.transforms.RandomApply", "torchvision.transforms.RandomGrayscale", "torchvision.transforms.GaussianBlur", "base_augmentations.extend", "base_augmentations.extend", "base_augmentations.append", "base_augmentations.extend", "base_augmentations.extend", "len", "torchvision.transforms.RandomResizedCrop", "torchvision.transforms.Compose", "all_trans.extend", "torchvision.transforms.RandomHorizontalFlip", "len", "torchvision.transforms.ColorJitter", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.RandomResizedCrop"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size_crops", ",", "nmb_crops", ",", "min_scale_crops", ",", "max_scale_crops", ",", "color_scale", "=", "0.5", ",", "color_first", "=", "True", ")", ":", "\n", "        ", "assert", "len", "(", "size_crops", ")", "==", "len", "(", "nmb_crops", ")", "\n", "assert", "len", "(", "min_scale_crops", ")", "==", "len", "(", "nmb_crops", ")", "\n", "assert", "len", "(", "max_scale_crops", ")", "==", "len", "(", "nmb_crops", ")", "\n", "# transformation for query", "\n", "color_transform", "=", "[", "transforms", ".", "RandomApply", "(", "[", "transforms", ".", "ColorJitter", "(", "0.8", "*", "color_scale", ",", "0.8", "*", "color_scale", ",", "0.8", "*", "color_scale", ",", "0.2", "*", "color_scale", ")", "]", ",", "p", "=", "0.8", ")", ",", "\n", "transforms", ".", "RandomGrayscale", "(", "p", "=", "0.2", ")", ",", "\n", "GaussianBlur", "(", "p", "=", "0.5", ",", "radius_min", "=", "0.1", ",", "radius_max", "=", "2.0", ")", ",", "]", "\n", "\n", "base_augmentations", "=", "[", "]", "\n", "if", "color_first", ":", "\n", "            ", "base_augmentations", ".", "extend", "(", "color_transform", ")", "\n", "base_augmentations", ".", "extend", "(", "[", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "]", ")", "\n", "", "else", ":", "\n", "            ", "base_augmentations", ".", "append", "(", "transforms", ".", "RandomHorizontalFlip", "(", ")", ")", "\n", "base_augmentations", ".", "extend", "(", "color_transform", ")", "\n", "base_augmentations", ".", "extend", "(", "[", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "]", ")", "\n", "\n", "\n", "", "trans_q", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "RandomResizedCrop", "(", "size_crops", "[", "0", "]", ",", "\n", "scale", "=", "(", "min_scale_crops", "[", "0", "]", ",", "max_scale_crops", "[", "0", "]", ")", ")", "]", "+", "base_augmentations", ")", "\n", "all_trans", "=", "[", "trans_q", "]", "\n", "\n", "# transformations for keys", "\n", "nmb_crops", "[", "0", "]", "-=", "1", "# remove the query from the first crop count", "\n", "for", "i", "in", "range", "(", "len", "(", "size_crops", ")", ")", ":", "\n", "            ", "crop", "=", "transforms", ".", "RandomResizedCrop", "(", "size_crops", "[", "i", "]", ",", "scale", "=", "(", "min_scale_crops", "[", "i", "]", ",", "max_scale_crops", "[", "i", "]", ")", ")", "\n", "trans_k", "=", "transforms", ".", "Compose", "(", "[", "crop", "]", "+", "base_augmentations", ")", "\n", "all_trans", ".", "extend", "(", "[", "trans_k", "]", "*", "nmb_crops", "[", "i", "]", ")", "\n", "\n", "", "self", ".", "all_trans", "=", "all_trans", "\n", "print", "(", "\"In total, we have %d transformations.\"", "%", "(", "len", "(", "self", ".", "all_trans", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.utils.transforms.MultiCropsTransform.__call__": [[280, 283], ["list", "map", "trans"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "        ", "multi_crops", "=", "list", "(", "map", "(", "lambda", "trans", ":", "trans", "(", "x", ")", ",", "self", ".", "all_trans", ")", ")", "\n", "return", "multi_crops", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.utils.transforms.MultiAugmentationWrapper.__init__": [[286, 289], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "trans", ",", "num_views", "=", "2", ")", "->", "None", ":", "\n", "        ", "self", ".", "trans", "=", "trans", "\n", "self", ".", "num_views", "=", "num_views", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.utils.transforms.MultiAugmentationWrapper.__call__": [[290, 292], ["torchvision.transforms.MultiAugmentationWrapper.trans", "range"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "[", "self", ".", "trans", "(", "x", ")", "for", "_", "in", "range", "(", "self", ".", "num_views", ")", "]", "", "", "", ""]], "home.repos.pwc.inspect_result.hirl-team_hirl.utils.clustering.run_hkmeans": [[9, 94], ["print", "enumerate", "int", "faiss.Clustering", "faiss.StandardGpuResources", "faiss.GpuIndexFlatConfig", "faiss.GpuIndexFlatL2", "enumerate", "faiss.vector_to_array().reshape", "numpy.zeros", "enumerate", "torch.Tensor().cuda.max", "enumerate", "torch.Tensor().cuda.clip", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.functional.normalize", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "results[].append", "results[].append", "results[].append", "faiss.Clustering.train", "faiss.GpuIndexFlatL2.search", "faiss.Clustering.train", "faiss.GpuIndexFlatL2.search", "int", "Dcluster[].append", "numpy.array", "results[].append", "list", "len", "print", "numpy.percentile", "numpy.percentile", "torch.Tensor().cuda.mean", "torch.mm", "torch.mm", "results[].append", "[].cpu().numpy", "[].cpu().numpy", "range", "faiss.vector_to_array", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "set", "len", "len", "torch.Tensor", "torch.Tensor", "nn.functional.normalize.t", "torch.mm.cuda", "torch.Tensor", "torch.Tensor", "torch.LongTensor", "torch.LongTensor", "[].cpu().numpy", "numpy.log", "[].cpu", "[].cpu", "torch.LongTensor", "torch.LongTensor", "[].cpu", "len", "numpy.asarray"], "function", ["home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.SmoothedValue.max"], ["def", "run_hkmeans", "(", "x", ",", "num_clusters", ",", "base_temperature", "=", "0.2", ",", "local_rank", "=", "0", ",", "niters", "=", "20", ",", "nredos", "=", "5", ")", ":", "\n", "    ", "\"\"\"\n    This function is a hierarchical \n    k-means: the centroids of current hierarchy is used\n    to perform k-means in next step.\n    \"\"\"", "\n", "\n", "print", "(", "'performing kmeans clustering'", ")", "\n", "results", "=", "{", "'im2cluster'", ":", "[", "]", ",", "'centroids'", ":", "[", "]", ",", "'density'", ":", "[", "]", ",", "'cluster2cluster'", ":", "[", "]", ",", "'logits'", ":", "[", "]", "}", "\n", "\n", "for", "seed", ",", "num_cluster", "in", "enumerate", "(", "num_clusters", ")", ":", "\n", "# intialize faiss clustering parameters", "\n", "        ", "d", "=", "x", ".", "shape", "[", "1", "]", "\n", "k", "=", "int", "(", "num_cluster", ")", "\n", "clus", "=", "faiss", ".", "Clustering", "(", "d", ",", "k", ")", "\n", "clus", ".", "verbose", "=", "True", "\n", "clus", ".", "niter", "=", "niters", "\n", "clus", ".", "nredo", "=", "nredos", "\n", "clus", ".", "seed", "=", "seed", "\n", "clus", ".", "max_points_per_centroid", "=", "1000", "\n", "clus", ".", "min_points_per_centroid", "=", "10", "\n", "\n", "res", "=", "faiss", ".", "StandardGpuResources", "(", ")", "\n", "cfg", "=", "faiss", ".", "GpuIndexFlatConfig", "(", ")", "\n", "cfg", ".", "useFloat16", "=", "False", "\n", "cfg", ".", "device", "=", "local_rank", "\n", "index", "=", "faiss", ".", "GpuIndexFlatL2", "(", "res", ",", "d", ",", "cfg", ")", "\n", "if", "seed", "==", "0", ":", "# the first hierarchy from instance directly", "\n", "            ", "clus", ".", "train", "(", "x", ",", "index", ")", "\n", "D", ",", "I", "=", "index", ".", "search", "(", "x", ",", "1", ")", "# for each sample, find cluster distance and assignments", "\n", "", "else", ":", "\n", "# the input of higher hierarchy is the centorid of lower one", "\n", "            ", "clus", ".", "train", "(", "results", "[", "'centroids'", "]", "[", "seed", "-", "1", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "index", ")", "\n", "D", ",", "I", "=", "index", ".", "search", "(", "results", "[", "'centroids'", "]", "[", "seed", "-", "1", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "1", ")", "\n", "\n", "", "im2cluster", "=", "[", "int", "(", "n", "[", "0", "]", ")", "for", "n", "in", "I", "]", "\n", "# sample-to-centroid distances for each cluster ", "\n", "## centroid in lower level to higher level", "\n", "Dcluster", "=", "[", "[", "]", "for", "c", "in", "range", "(", "k", ")", "]", "\n", "for", "im", ",", "i", "in", "enumerate", "(", "im2cluster", ")", ":", "\n", "            ", "Dcluster", "[", "i", "]", ".", "append", "(", "D", "[", "im", "]", "[", "0", "]", ")", "\n", "\n", "# get cluster centroids", "\n", "", "centroids", "=", "faiss", ".", "vector_to_array", "(", "clus", ".", "centroids", ")", ".", "reshape", "(", "k", ",", "d", ")", "\n", "\n", "if", "seed", ">", "0", ":", "# the im2cluster of higher hierarchy is the index of previous hierachy", "\n", "            ", "im2cluster", "=", "np", ".", "array", "(", "im2cluster", ")", "# enable batch indexing", "\n", "results", "[", "'cluster2cluster'", "]", ".", "append", "(", "torch", ".", "LongTensor", "(", "im2cluster", ")", ".", "cuda", "(", ")", ")", "\n", "im2cluster", "=", "im2cluster", "[", "results", "[", "'im2cluster'", "]", "[", "seed", "-", "1", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "]", "\n", "im2cluster", "=", "list", "(", "im2cluster", ")", "\n", "\n", "", "if", "len", "(", "set", "(", "im2cluster", ")", ")", "==", "1", ":", "\n", "            ", "print", "(", "\"Warning! All samples are assigned to one cluster\"", ")", "\n", "\n", "# concentration estimation (phi)        ", "\n", "", "density", "=", "np", ".", "zeros", "(", "k", ")", "\n", "for", "i", ",", "dist", "in", "enumerate", "(", "Dcluster", ")", ":", "\n", "            ", "if", "len", "(", "dist", ")", ">", "1", ":", "\n", "                ", "d", "=", "(", "np", ".", "asarray", "(", "dist", ")", "**", "0.5", ")", ".", "mean", "(", ")", "/", "np", ".", "log", "(", "len", "(", "dist", ")", "+", "10", ")", "\n", "density", "[", "i", "]", "=", "d", "\n", "\n", "#if cluster only has one point, use the max to estimate its concentration        ", "\n", "", "", "dmax", "=", "density", ".", "max", "(", ")", "\n", "for", "i", ",", "dist", "in", "enumerate", "(", "Dcluster", ")", ":", "\n", "            ", "if", "len", "(", "dist", ")", "<=", "1", ":", "\n", "                ", "density", "[", "i", "]", "=", "dmax", "\n", "\n", "", "", "density", "=", "density", ".", "clip", "(", "np", ".", "percentile", "(", "density", ",", "10", ")", ",", "np", ".", "percentile", "(", "density", ",", "90", ")", ")", "\n", "density", "=", "base_temperature", "*", "density", "/", "density", ".", "mean", "(", ")", "\n", "\n", "# convert to cuda Tensors for broadcast", "\n", "centroids", "=", "torch", ".", "Tensor", "(", "centroids", ")", ".", "cuda", "(", ")", "\n", "centroids", "=", "nn", ".", "functional", ".", "normalize", "(", "centroids", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "if", "seed", ">", "0", ":", "#maintain a logits from lower prototypes to higher", "\n", "            ", "proto_logits", "=", "torch", ".", "mm", "(", "results", "[", "'centroids'", "]", "[", "-", "1", "]", ",", "centroids", ".", "t", "(", ")", ")", "\n", "results", "[", "'logits'", "]", ".", "append", "(", "proto_logits", ".", "cuda", "(", ")", ")", "\n", "\n", "\n", "", "density", "=", "torch", ".", "Tensor", "(", "density", ")", ".", "cuda", "(", ")", "\n", "im2cluster", "=", "torch", ".", "LongTensor", "(", "im2cluster", ")", ".", "cuda", "(", ")", "\n", "results", "[", "'centroids'", "]", ".", "append", "(", "centroids", ")", "\n", "results", "[", "'density'", "]", ".", "append", "(", "density", ")", "\n", "results", "[", "'im2cluster'", "]", ".", "append", "(", "im2cluster", ")", "\n", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.utils.clustering.calculate_cost_matrix": [[95, 108], ["numpy.zeros", "range", "numpy.sum", "range"], "function", ["None"], ["", "def", "calculate_cost_matrix", "(", "C", ",", "n_clusters", ")", ":", "\n", "    ", "\"\"\"\n    this actually assumes n_clusters_pred == n_clusters_gt\n    \"\"\"", "\n", "cost_matrix", "=", "np", ".", "zeros", "(", "(", "n_clusters", ",", "n_clusters", ")", ")", "\n", "# cost_matrix[i,j] will be the cost of assigning cluster i to label j", "\n", "for", "j", "in", "range", "(", "n_clusters", ")", ":", "\n", "        ", "s", "=", "np", ".", "sum", "(", "C", "[", ":", ",", "j", "]", ")", "# number of examples in cluster j", "\n", "for", "i", "in", "range", "(", "n_clusters", ")", ":", "\n", "            ", "t", "=", "C", "[", "i", ",", "j", "]", "\n", "# cost is defined as number of examples in cluster i - confusion matrix (i, j) ", "\n", "cost_matrix", "[", "j", ",", "i", "]", "=", "s", "-", "t", "\n", "", "", "return", "cost_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.utils.clustering.get_cluster_labels_from_indices": [[109, 115], ["len", "numpy.zeros", "range"], "function", ["None"], ["", "def", "get_cluster_labels_from_indices", "(", "indices", ")", ":", "\n", "    ", "n_clusters", "=", "len", "(", "indices", ")", "\n", "cluster_labels", "=", "np", ".", "zeros", "(", "n_clusters", ")", "\n", "for", "i", "in", "range", "(", "n_clusters", ")", ":", "\n", "        ", "cluster_labels", "[", "i", "]", "=", "indices", "[", "i", "]", "[", "1", "]", "\n", "", "return", "cluster_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.utils.clustering.get_y_preds": [[116, 142], ["sklearn.metrics.confusion_matrix", "clustering.calculate_cost_matrix", "munkres.Munkres().compute", "clustering.get_cluster_labels_from_indices", "numpy.min", "munkres.Munkres", "numpy.min"], "function", ["home.repos.pwc.inspect_result.hirl-team_hirl.utils.clustering.calculate_cost_matrix", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.clustering.get_cluster_labels_from_indices"], ["", "def", "get_y_preds", "(", "y_true", ",", "cluster_assignments", ",", "n_clusters", ")", ":", "\n", "    ", "\"\"\"\n    Computes the predicted labels, where label assignments now\n    correspond to the actual labels in y_true (as estimated by Munkres)\n    cluster_assignments:    array of labels, outputted by kmeans\n    y_true:                 true labels\n    n_clusters:             number of clusters in the dataset (number of groundtruth clusters)\n    returns:    a tuple containing the accuracy and confusion matrix,\n                in that order\n\n    Note:\n    1. the cost matrix is in size [n_clusters, n_clusters].\n    2. The number of cluster in cluster_assignments should be >= n_clusters.\n    \"\"\"", "\n", "## Note: confusion matrix would be of size [M, M], M = max(y_true.max(), cluster_assignments.max())", "\n", "confusion_matrix", "=", "metrics", ".", "confusion_matrix", "(", "y_true", ",", "cluster_assignments", ",", "labels", "=", "None", ")", "\n", "# confision_matrix[i, j]: number of samples assigned with ground truth label i and clustering label j.", "\n", "# compute accuracy based on optimal 1:1 assignment of clusters to labels", "\n", "cost_matrix", "=", "calculate_cost_matrix", "(", "confusion_matrix", ",", "n_clusters", ")", "\n", "indices", "=", "Munkres", "(", ")", ".", "compute", "(", "cost_matrix", ")", "# this is used to find the best 1 to 1 matching.", "\n", "kmeans_to_true_cluster_labels", "=", "get_cluster_labels_from_indices", "(", "indices", ")", "\n", "\n", "if", "np", ".", "min", "(", "cluster_assignments", ")", "!=", "0", ":", "\n", "        ", "cluster_assignments", "=", "cluster_assignments", "-", "np", ".", "min", "(", "cluster_assignments", ")", "\n", "", "y_pred", "=", "kmeans_to_true_cluster_labels", "[", "cluster_assignments", "]", "\n", "return", "y_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.utils.clustering.eval_pred": [[143, 152], ["sklearn.metrics.normalized_mutual_info_score", "sklearn.metrics.adjusted_rand_score", "sklearn.metrics.fowlkes_mallows_score", "clustering.get_y_preds", "sklearn.metrics.accuracy_score", "len", "set"], "function", ["home.repos.pwc.inspect_result.hirl-team_hirl.utils.clustering.get_y_preds"], ["", "def", "eval_pred", "(", "label", ",", "pred", ",", "calc_acc", "=", "False", ")", ":", "\n", "    ", "nmi", "=", "metrics", ".", "normalized_mutual_info_score", "(", "label", ",", "pred", ")", "\n", "ari", "=", "metrics", ".", "adjusted_rand_score", "(", "label", ",", "pred", ")", "\n", "f", "=", "metrics", ".", "fowlkes_mallows_score", "(", "label", ",", "pred", ")", "\n", "if", "not", "calc_acc", ":", "\n", "        ", "return", "nmi", ",", "ari", ",", "f", ",", "-", "1", "\n", "", "pred_adjusted", "=", "get_y_preds", "(", "label", ",", "pred", ",", "len", "(", "set", "(", "label", ")", ")", ")", "\n", "acc", "=", "metrics", ".", "accuracy_score", "(", "pred_adjusted", ",", "label", ")", "\n", "return", "nmi", ",", "ari", ",", "f", ",", "acc", "", "", ""]], "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.SmoothedValue.__init__": [[43, 50], ["collections.deque"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "window_size", "=", "20", ",", "fmt", "=", "None", ")", ":", "\n", "        ", "if", "fmt", "is", "None", ":", "\n", "            ", "fmt", "=", "\"{median:.6f} ({global_avg:.6f})\"", "\n", "", "self", ".", "deque", "=", "deque", "(", "maxlen", "=", "window_size", ")", "\n", "self", ".", "total", "=", "0.0", "\n", "self", ".", "count", "=", "0", "\n", "self", ".", "fmt", "=", "fmt", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.SmoothedValue.update": [[51, 55], ["misc.SmoothedValue.deque.append"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "value", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "deque", ".", "append", "(", "value", ")", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "total", "+=", "value", "*", "n", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.SmoothedValue.synchronize_between_processes": [[56, 68], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.barrier", "torch.barrier", "torch.all_reduce", "torch.all_reduce", "t.tolist.tolist.tolist", "int", "torch.is_dist_avail_and_initialized"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.is_dist_avail_and_initialized"], ["", "def", "synchronize_between_processes", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Warning: does not synchronize the deque!\n        \"\"\"", "\n", "if", "not", "is_dist_avail_and_initialized", "(", ")", ":", "\n", "            ", "return", "\n", "", "t", "=", "torch", ".", "tensor", "(", "[", "self", ".", "count", ",", "self", ".", "total", "]", ",", "dtype", "=", "torch", ".", "float64", ",", "device", "=", "'cuda'", ")", "\n", "dist", ".", "barrier", "(", ")", "\n", "dist", ".", "all_reduce", "(", "t", ")", "\n", "t", "=", "t", ".", "tolist", "(", ")", "\n", "self", ".", "count", "=", "int", "(", "t", "[", "0", "]", ")", "\n", "self", ".", "total", "=", "t", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.SmoothedValue.median": [[69, 73], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor.median().item", "torch.tensor.median().item", "list", "torch.tensor.median", "torch.tensor.median"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.SmoothedValue.median", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.SmoothedValue.median"], ["", "@", "property", "\n", "def", "median", "(", "self", ")", ":", "\n", "        ", "d", "=", "torch", ".", "tensor", "(", "list", "(", "self", ".", "deque", ")", ")", "\n", "return", "d", ".", "median", "(", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.SmoothedValue.avg": [[74, 78], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor.mean().item", "torch.tensor.mean().item", "list", "torch.tensor.mean", "torch.tensor.mean"], "methods", ["None"], ["", "@", "property", "\n", "def", "avg", "(", "self", ")", ":", "\n", "        ", "d", "=", "torch", ".", "tensor", "(", "list", "(", "self", ".", "deque", ")", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "return", "d", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.SmoothedValue.global_avg": [[79, 82], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "global_avg", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "total", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.SmoothedValue.max": [[83, 86], ["misc.SmoothedValue.max"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.SmoothedValue.max"], ["", "@", "property", "\n", "def", "max", "(", "self", ")", ":", "\n", "        ", "return", "max", "(", "self", ".", "deque", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.SmoothedValue.value": [[87, 90], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "value", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "deque", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.SmoothedValue.__str__": [[91, 98], ["misc.SmoothedValue.fmt.format"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "fmt", ".", "format", "(", "\n", "median", "=", "self", ".", "median", ",", "\n", "avg", "=", "self", ".", "avg", ",", "\n", "global_avg", "=", "self", ".", "global_avg", ",", "\n", "max", "=", "self", ".", "max", ",", "\n", "value", "=", "self", ".", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.MetricLogger.__init__": [[100, 103], ["collections.defaultdict"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "delimiter", "=", "\"\\t\"", ")", ":", "\n", "        ", "self", ".", "meters", "=", "defaultdict", "(", "SmoothedValue", ")", "\n", "self", ".", "delimiter", "=", "delimiter", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.MetricLogger.update": [[104, 110], ["kwargs.items", "isinstance", "isinstance", "misc.MetricLogger.meters[].update", "v.item.item.item"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.AverageMeter.update"], ["", "def", "update", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "for", "k", ",", "v", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "v", ",", "torch", ".", "Tensor", ")", ":", "\n", "                ", "v", "=", "v", ".", "item", "(", ")", "\n", "", "assert", "isinstance", "(", "v", ",", "(", "float", ",", "int", ")", ")", "\n", "self", ".", "meters", "[", "k", "]", ".", "update", "(", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.MetricLogger.__getattr__": [[111, 118], ["AttributeError", "type"], "methods", ["None"], ["", "", "def", "__getattr__", "(", "self", ",", "attr", ")", ":", "\n", "        ", "if", "attr", "in", "self", ".", "meters", ":", "\n", "            ", "return", "self", ".", "meters", "[", "attr", "]", "\n", "", "if", "attr", "in", "self", ".", "__dict__", ":", "\n", "            ", "return", "self", ".", "__dict__", "[", "attr", "]", "\n", "", "raise", "AttributeError", "(", "\"'{}' object has no attribute '{}'\"", ".", "format", "(", "\n", "type", "(", "self", ")", ".", "__name__", ",", "attr", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.MetricLogger.__str__": [[119, 126], ["misc.MetricLogger.meters.items", "misc.MetricLogger.delimiter.join", "loss_str.append", "str"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "loss_str", "=", "[", "]", "\n", "for", "name", ",", "meter", "in", "self", ".", "meters", ".", "items", "(", ")", ":", "\n", "            ", "loss_str", ".", "append", "(", "\n", "\"{}: {}\"", ".", "format", "(", "name", ",", "str", "(", "meter", ")", ")", "\n", ")", "\n", "", "return", "self", ".", "delimiter", ".", "join", "(", "loss_str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.MetricLogger.synchronize_between_processes": [[127, 130], ["misc.MetricLogger.meters.values", "meter.synchronize_between_processes"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.MetricLogger.synchronize_between_processes"], ["", "def", "synchronize_between_processes", "(", "self", ")", ":", "\n", "        ", "for", "meter", "in", "self", ".", "meters", ".", "values", "(", ")", ":", "\n", "            ", "meter", ".", "synchronize_between_processes", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.MetricLogger.add_meter": [[131, 133], ["None"], "methods", ["None"], ["", "", "def", "add_meter", "(", "self", ",", "name", ",", "meter", ")", ":", "\n", "        ", "self", ".", "meters", "[", "name", "]", "=", "meter", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.MetricLogger.log_every": [[134, 187], ["time.time", "time.time", "misc.SmoothedValue", "misc.SmoothedValue", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "str", "print", "misc.MetricLogger.delimiter.join", "misc.MetricLogger.delimiter.join", "misc.SmoothedValue.update", "misc.SmoothedValue.update", "time.time", "time.time", "datetime.timedelta", "str", "str", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "len", "time.time", "time.time", "datetime.timedelta", "print", "print", "int", "len", "str", "len", "len", "misc.MetricLogger.format", "misc.MetricLogger.format", "len", "int", "len", "len", "str", "str", "str", "str", "str", "str", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.AverageMeter.update"], ["", "def", "log_every", "(", "self", ",", "iterable", ",", "print_freq", ",", "header", "=", "None", ")", ":", "\n", "        ", "i", "=", "0", "\n", "if", "not", "header", ":", "\n", "            ", "header", "=", "''", "\n", "", "start_time", "=", "time", ".", "time", "(", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "iter_time", "=", "SmoothedValue", "(", "fmt", "=", "'{avg:.6f}'", ")", "\n", "data_time", "=", "SmoothedValue", "(", "fmt", "=", "'{avg:.6f}'", ")", "\n", "space_fmt", "=", "':'", "+", "str", "(", "len", "(", "str", "(", "len", "(", "iterable", ")", ")", ")", ")", "+", "'d'", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "log_msg", "=", "self", ".", "delimiter", ".", "join", "(", "[", "\n", "header", ",", "\n", "'[{0'", "+", "space_fmt", "+", "'}/{1}]'", ",", "\n", "'eta: {eta}'", ",", "\n", "'{meters}'", ",", "\n", "'time: {time}'", ",", "\n", "'data: {data}'", ",", "\n", "'max mem: {memory:.0f}'", "\n", "]", ")", "\n", "", "else", ":", "\n", "            ", "log_msg", "=", "self", ".", "delimiter", ".", "join", "(", "[", "\n", "header", ",", "\n", "'[{0'", "+", "space_fmt", "+", "'}/{1}]'", ",", "\n", "'eta: {eta}'", ",", "\n", "'{meters}'", ",", "\n", "'time: {time}'", ",", "\n", "'data: {data}'", "\n", "]", ")", "\n", "", "MB", "=", "1024.0", "*", "1024.0", "\n", "for", "obj", "in", "iterable", ":", "\n", "            ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "yield", "obj", "\n", "iter_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "if", "i", "%", "print_freq", "==", "0", "or", "i", "==", "len", "(", "iterable", ")", "-", "1", ":", "\n", "                ", "eta_seconds", "=", "iter_time", ".", "global_avg", "*", "(", "len", "(", "iterable", ")", "-", "i", ")", "\n", "eta_string", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "int", "(", "eta_seconds", ")", ")", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                    ", "print", "(", "log_msg", ".", "format", "(", "\n", "i", ",", "len", "(", "iterable", ")", ",", "eta", "=", "eta_string", ",", "\n", "meters", "=", "str", "(", "self", ")", ",", "\n", "time", "=", "str", "(", "iter_time", ")", ",", "data", "=", "str", "(", "data_time", ")", ",", "\n", "memory", "=", "torch", ".", "cuda", ".", "max_memory_allocated", "(", ")", "/", "MB", ")", ")", "\n", "", "else", ":", "\n", "                    ", "print", "(", "log_msg", ".", "format", "(", "\n", "i", ",", "len", "(", "iterable", ")", ",", "eta", "=", "eta_string", ",", "\n", "meters", "=", "str", "(", "self", ")", ",", "\n", "time", "=", "str", "(", "iter_time", ")", ",", "data", "=", "str", "(", "data_time", ")", ")", ")", "\n", "", "", "i", "+=", "1", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "", "total_time", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "total_time_str", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "int", "(", "total_time", ")", ")", ")", "\n", "print", "(", "'{} Total time: {} ({:.6f} s / it)'", ".", "format", "(", "\n", "header", ",", "total_time_str", ",", "total_time", "/", "len", "(", "iterable", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.LARS.__init__": [[250, 256], ["dict", "super().__init__"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.pretrain.dino.DINORunner.__init__"], ["def", "__init__", "(", "self", ",", "params", ",", "lr", "=", "0", ",", "weight_decay", "=", "0", ",", "momentum", "=", "0.9", ",", "eta", "=", "0.001", ",", "\n", "weight_decay_filter", "=", "None", ",", "lars_adaptation_filter", "=", "None", ")", ":", "\n", "        ", "defaults", "=", "dict", "(", "lr", "=", "lr", ",", "weight_decay", "=", "weight_decay", ",", "momentum", "=", "momentum", ",", "\n", "eta", "=", "eta", ",", "weight_decay_filter", "=", "weight_decay_filter", ",", "\n", "lars_adaptation_filter", "=", "lars_adaptation_filter", ")", "\n", "super", "(", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.LARS.step": [[257, 285], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "mu.mul_().add_", "p.add_", "dp.mul.mul.add", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.where", "torch.where", "torch.where", "torch.where", "dp.mul.mul.mul", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.where", "torch.where", "torch.where", "torch.where", "mu.mul_"], "methods", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "step", "(", "self", ")", ":", "\n", "        ", "for", "g", "in", "self", ".", "param_groups", ":", "\n", "            ", "for", "p", "in", "g", "[", "'params'", "]", ":", "\n", "                ", "dp", "=", "p", ".", "grad", "\n", "\n", "if", "dp", "is", "None", ":", "\n", "                    ", "continue", "\n", "\n", "", "if", "p", ".", "ndim", "!=", "1", ":", "\n", "                    ", "dp", "=", "dp", ".", "add", "(", "p", ",", "alpha", "=", "g", "[", "'weight_decay'", "]", ")", "\n", "\n", "", "if", "p", ".", "ndim", "!=", "1", ":", "\n", "                    ", "param_norm", "=", "torch", ".", "norm", "(", "p", ")", "\n", "update_norm", "=", "torch", ".", "norm", "(", "dp", ")", "\n", "one", "=", "torch", ".", "ones_like", "(", "param_norm", ")", "\n", "q", "=", "torch", ".", "where", "(", "param_norm", ">", "0.", ",", "\n", "torch", ".", "where", "(", "update_norm", ">", "0", ",", "\n", "(", "g", "[", "'eta'", "]", "*", "param_norm", "/", "update_norm", ")", ",", "one", ")", ",", "one", ")", "\n", "dp", "=", "dp", ".", "mul", "(", "q", ")", "\n", "\n", "", "param_state", "=", "self", ".", "state", "[", "p", "]", "\n", "if", "'mu'", "not", "in", "param_state", ":", "\n", "                    ", "param_state", "[", "'mu'", "]", "=", "torch", ".", "zeros_like", "(", "p", ")", "\n", "", "mu", "=", "param_state", "[", "'mu'", "]", "\n", "mu", ".", "mul_", "(", "g", "[", "'momentum'", "]", ")", ".", "add_", "(", "dp", ")", "\n", "\n", "p", ".", "add_", "(", "mu", ",", "alpha", "=", "-", "g", "[", "'lr'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.AverageMeter.__init__": [[311, 315], ["misc.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.AverageMeter.reset"], ["def", "__init__", "(", "self", ",", "name", ",", "fmt", "=", "':f'", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "fmt", "=", "fmt", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.AverageMeter.reset": [[316, 321], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.AverageMeter.update": [[322, 327], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.AverageMeter.__str__": [[328, 331], ["fmtstr.format"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "fmtstr", "=", "'{name} {val'", "+", "self", ".", "fmt", "+", "'} ({avg'", "+", "self", ".", "fmt", "+", "'})'", "\n", "return", "fmtstr", ".", "format", "(", "**", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.ProgressMeter.__init__": [[334, 338], ["misc.ProgressMeter._get_batch_fmtstr"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.ProgressMeter._get_batch_fmtstr"], ["    ", "def", "__init__", "(", "self", ",", "num_batches", ",", "meters", ",", "prefix", "=", "\"\"", ")", ":", "\n", "        ", "self", ".", "batch_fmtstr", "=", "self", ".", "_get_batch_fmtstr", "(", "num_batches", ")", "\n", "self", ".", "meters", "=", "meters", "\n", "self", ".", "prefix", "=", "prefix", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.ProgressMeter.display": [[339, 347], ["print", "isinstance", "misc.ProgressMeter.batch_fmtstr.format", "isinstance", "str", "str", "meter.items"], "methods", ["None"], ["", "def", "display", "(", "self", ",", "batch", ")", ":", "\n", "        ", "entries", "=", "[", "self", ".", "prefix", "+", "self", ".", "batch_fmtstr", ".", "format", "(", "batch", ")", "]", "\n", "for", "meter", "in", "self", ".", "meters", ":", "\n", "            ", "if", "isinstance", "(", "meter", ",", "AverageMeter", ")", ":", "\n", "                ", "entries", "+=", "[", "str", "(", "meter", ")", "]", "\n", "", "elif", "isinstance", "(", "meter", ",", "dict", ")", ":", "\n", "                ", "entries", "+=", "[", "str", "(", "v", ")", "for", "(", "k", ",", "v", ")", "in", "meter", ".", "items", "(", ")", "]", "\n", "", "", "print", "(", "'\\t'", ".", "join", "(", "entries", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.ProgressMeter._get_batch_fmtstr": [[348, 352], ["len", "str", "str", "fmt.format"], "methods", ["None"], ["", "def", "_get_batch_fmtstr", "(", "self", ",", "num_batches", ")", ":", "\n", "        ", "num_digits", "=", "len", "(", "str", "(", "num_batches", "//", "1", ")", ")", "\n", "fmt", "=", "'{:'", "+", "str", "(", "num_digits", ")", "+", "'d}'", "\n", "return", "'['", "+", "fmt", "+", "'/'", "+", "fmt", ".", "format", "(", "num_batches", ")", "+", "']'", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.NativeScalerWithGradNormCount.__init__": [[436, 438], ["torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "enabled", "=", "True", ")", ":", "\n", "        ", "self", ".", "_scaler", "=", "torch", ".", "cuda", ".", "amp", ".", "GradScaler", "(", "enabled", "=", "enabled", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.NativeScalerWithGradNormCount.__call__": [[439, 459], ["misc.NativeScalerWithGradNormCount._scaler.scale().backward", "misc.NativeScalerWithGradNormCount._scaler.step", "misc.NativeScalerWithGradNormCount._scaler.update", "misc.NativeScalerWithGradNormCount._scaler.scale", "misc.NativeScalerWithGradNormCount._scaler.unscale_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "misc.NativeScalerWithGradNormCount._scaler.unscale_", "misc.get_grad_norm_"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.LARS.step", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.get_grad_norm_"], ["", "def", "__call__", "(", "self", ",", "loss", ",", "optimizer", ",", "clip_grad", "=", "None", ",", "parameters", "=", "None", ",", "create_graph", "=", "False", ",", "update_grad", "=", "True", ",", "\n", "fixed_parameters", "=", "None", ")", ":", "\n", "        ", "self", ".", "_scaler", ".", "scale", "(", "loss", ")", ".", "backward", "(", "create_graph", "=", "create_graph", ")", "\n", "if", "update_grad", ":", "\n", "            ", "if", "clip_grad", ":", "\n", "                ", "assert", "parameters", "is", "not", "None", "\n", "self", ".", "_scaler", ".", "unscale_", "(", "optimizer", ")", "# unscale the gradients of optimizer's assigned params in-place", "\n", "norm", "=", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "parameters", ",", "clip_grad", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "_scaler", ".", "unscale_", "(", "optimizer", ")", "\n", "norm", "=", "get_grad_norm_", "(", "parameters", ")", "\n", "# cancel some gradients if provided.", "\n", "", "if", "fixed_parameters", "is", "not", "None", ":", "\n", "                ", "for", "param", "in", "fixed_parameters", ":", "\n", "                    ", "param", ".", "grad", "=", "None", "\n", "", "", "self", ".", "_scaler", ".", "step", "(", "optimizer", ")", "\n", "self", ".", "_scaler", ".", "update", "(", ")", "\n", "", "else", ":", "\n", "            ", "norm", "=", "None", "\n", "", "return", "norm", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.NativeScalerWithGradNormCount.state_dict": [[460, 462], ["misc.NativeScalerWithGradNormCount._scaler.state_dict"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.NativeScalerWithGradNormCount.state_dict"], ["", "def", "state_dict", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_scaler", ".", "state_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.NativeScalerWithGradNormCount.load_state_dict": [[463, 472], ["misc.NativeScalerWithGradNormCount.check_state_dict", "misc.NativeScalerWithGradNormCount._scaler.load_state_dict", "print"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.NativeScalerWithGradNormCount.check_state_dict", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.NativeScalerWithGradNormCount.load_state_dict"], ["", "def", "load_state_dict", "(", "self", ",", "state_dict", ")", ":", "\n", "        ", "\"\"\"\n        if use_fp16 is False and then loaded with true\n        would raise error. a state dict check is performed here\n        \"\"\"", "\n", "if", "self", ".", "check_state_dict", "(", "state_dict", ")", ":", "\n", "            ", "self", ".", "_scaler", ".", "load_state_dict", "(", "state_dict", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"loading failed because the state dict is not valid.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.NativeScalerWithGradNormCount.check_state_dict": [[473, 478], ["all"], "methods", ["None"], ["", "", "def", "check_state_dict", "(", "self", ",", "state_dict", ")", ":", "\n", "        ", "if", "all", "(", "[", "x", "in", "state_dict", "for", "x", "in", "self", ".", "valid_state_key", "]", ")", ":", "\n", "            ", "return", "True", "\n", "", "else", ":", "\n", "            ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.ImageFolderInstance.__getitem__": [[568, 574], ["misc.ImageFolderInstance.loader", "misc.ImageFolderInstance.transform"], "methods", ["None"], ["def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "path", ",", "target", "=", "self", ".", "samples", "[", "index", "]", "\n", "sample", "=", "self", ".", "loader", "(", "path", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "sample", "=", "self", ".", "transform", "(", "sample", ")", "\n", "", "return", "{", "\"images\"", ":", "sample", ",", "\"index\"", ":", "index", ",", "\"targets\"", ":", "target", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.ImageFolderMask.__init__": [[579, 592], ["torchvision.ImageFolder.__init__", "tuple", "isinstance", "map", "isinstance", "isinstance", "isinstance", "len", "len", "len", "math.log"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.pretrain.dino.DINORunner.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "patch_size", ",", "pred_ratio", ",", "pred_ratio_var", ",", "pred_aspect_ratio", ",", "\n", "pred_shape", "=", "'block'", ",", "pred_start_epoch", "=", "0", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ImageFolderMask", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "psz", "=", "patch_size", "\n", "self", ".", "pred_ratio", "=", "pred_ratio", "[", "0", "]", "if", "isinstance", "(", "pred_ratio", ",", "list", ")", "and", "len", "(", "pred_ratio", ")", "==", "1", "else", "pred_ratio", "\n", "self", ".", "pred_ratio_var", "=", "pred_ratio_var", "[", "0", "]", "if", "isinstance", "(", "pred_ratio_var", ",", "list", ")", "and", "len", "(", "pred_ratio_var", ")", "==", "1", "else", "pred_ratio_var", "\n", "if", "isinstance", "(", "self", ".", "pred_ratio", ",", "list", ")", "and", "not", "isinstance", "(", "self", ".", "pred_ratio_var", ",", "list", ")", ":", "\n", "            ", "self", ".", "pred_ratio_var", "=", "[", "self", ".", "pred_ratio_var", "]", "*", "len", "(", "self", ".", "pred_ratio", ")", "\n", "", "self", ".", "log_aspect_ratio", "=", "tuple", "(", "map", "(", "lambda", "x", ":", "math", ".", "log", "(", "x", ")", ",", "pred_aspect_ratio", ")", ")", "\n", "self", ".", "pred_shape", "=", "pred_shape", "\n", "self", ".", "pred_start_epoch", "=", "pred_start_epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.ImageFolderMask.get_pred_ratio": [[593, 610], ["isinstance", "hasattr", "zip", "random.choice", "random.choice.append", "random.uniform", "random.uniform"], "methods", ["None"], ["", "def", "get_pred_ratio", "(", "self", ")", ":", "\n", "        ", "if", "hasattr", "(", "self", ",", "'epoch'", ")", "and", "self", ".", "epoch", "<", "self", ".", "pred_start_epoch", ":", "\n", "            ", "return", "0", "\n", "\n", "", "if", "isinstance", "(", "self", ".", "pred_ratio", ",", "list", ")", ":", "\n", "            ", "pred_ratio", "=", "[", "]", "\n", "for", "prm", ",", "prv", "in", "zip", "(", "self", ".", "pred_ratio", ",", "self", ".", "pred_ratio_var", ")", ":", "\n", "                ", "assert", "prm", ">=", "prv", "\n", "pr", "=", "random", ".", "uniform", "(", "prm", "-", "prv", ",", "prm", "+", "prv", ")", "if", "prv", ">", "0", "else", "prm", "\n", "pred_ratio", ".", "append", "(", "pr", ")", "\n", "", "pred_ratio", "=", "random", ".", "choice", "(", "pred_ratio", ")", "\n", "", "else", ":", "\n", "            ", "assert", "self", ".", "pred_ratio", ">=", "self", ".", "pred_ratio_var", "\n", "pred_ratio", "=", "random", ".", "uniform", "(", "self", ".", "pred_ratio", "-", "self", ".", "pred_ratio_var", ",", "self", ".", "pred_ratio", "+", "self", ".", "pred_ratio_var", ")", "if", "self", ".", "pred_ratio_var", ">", "0", "else", "self", ".", "pred_ratio", "\n", "\n", "", "return", "pred_ratio", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.ImageFolderMask.set_epoch": [[611, 613], ["None"], "methods", ["None"], ["", "def", "set_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "epoch", "=", "epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.ImageFolderMask.__getitem__": [[614, 678], ["misc.ImageFolderInstance.__getitem__", "masks.append", "numpy.zeros", "misc.ImageFolderMask.get_pred_ratio", "range", "numpy.hstack().astype", "numpy.random.shuffle", "mask.reshape.reshape.reshape", "random.uniform", "math.exp", "int", "int", "random.uniform", "round", "round", "random.randint", "random.randint", "mask[].sum", "numpy.hstack", "min", "math.sqrt", "math.sqrt", "range", "range", "numpy.zeros", "numpy.ones", "int", "int"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.transfer.base.Places205Dataset.__getitem__", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.ImageFolderMask.get_pred_ratio"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "output", "=", "super", "(", "ImageFolderMask", ",", "self", ")", ".", "__getitem__", "(", "index", ")", "\n", "\n", "masks", "=", "[", "]", "\n", "for", "img", "in", "output", "[", "\"images\"", "]", ":", "\n", "            ", "try", ":", "\n", "                ", "H", ",", "W", "=", "img", ".", "shape", "[", "1", "]", "//", "self", ".", "psz", ",", "img", ".", "shape", "[", "2", "]", "//", "self", ".", "psz", "\n", "", "except", ":", "\n", "# skip non-image", "\n", "                ", "continue", "\n", "\n", "", "high", "=", "self", ".", "get_pred_ratio", "(", ")", "*", "H", "*", "W", "\n", "\n", "if", "self", ".", "pred_shape", "==", "'block'", ":", "\n", "# following BEiT (https://arxiv.org/abs/2106.08254), see at", "\n", "# https://github.com/microsoft/unilm/blob/b94ec76c36f02fb2b0bf0dcb0b8554a2185173cd/beit/masking_generator.py#L55", "\n", "                ", "mask", "=", "np", ".", "zeros", "(", "(", "H", ",", "W", ")", ",", "dtype", "=", "bool", ")", "\n", "mask_count", "=", "0", "\n", "while", "mask_count", "<", "high", ":", "\n", "                    ", "max_mask_patches", "=", "high", "-", "mask_count", "\n", "\n", "delta", "=", "0", "\n", "for", "attempt", "in", "range", "(", "10", ")", ":", "\n", "                        ", "low", "=", "(", "min", "(", "H", ",", "W", ")", "//", "3", ")", "**", "2", "\n", "target_area", "=", "random", ".", "uniform", "(", "low", ",", "max_mask_patches", ")", "\n", "aspect_ratio", "=", "math", ".", "exp", "(", "random", ".", "uniform", "(", "*", "self", ".", "log_aspect_ratio", ")", ")", "\n", "h", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "target_area", "*", "aspect_ratio", ")", ")", ")", "\n", "w", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "target_area", "/", "aspect_ratio", ")", ")", ")", "\n", "if", "w", "<", "W", "and", "h", "<", "H", ":", "\n", "                            ", "top", "=", "random", ".", "randint", "(", "0", ",", "H", "-", "h", ")", "\n", "left", "=", "random", ".", "randint", "(", "0", ",", "W", "-", "w", ")", "\n", "\n", "num_masked", "=", "mask", "[", "top", ":", "top", "+", "h", ",", "left", ":", "left", "+", "w", "]", ".", "sum", "(", ")", "\n", "if", "0", "<", "h", "*", "w", "-", "num_masked", "<=", "max_mask_patches", ":", "\n", "                                ", "for", "i", "in", "range", "(", "top", ",", "top", "+", "h", ")", ":", "\n", "                                    ", "for", "j", "in", "range", "(", "left", ",", "left", "+", "w", ")", ":", "\n", "                                        ", "if", "mask", "[", "i", ",", "j", "]", "==", "0", ":", "\n", "                                            ", "mask", "[", "i", ",", "j", "]", "=", "1", "\n", "delta", "+=", "1", "\n", "\n", "", "", "", "", "", "if", "delta", ">", "0", ":", "\n", "                            ", "break", "\n", "\n", "", "", "if", "delta", "==", "0", ":", "\n", "                        ", "break", "\n", "", "else", ":", "\n", "                        ", "mask_count", "+=", "delta", "\n", "\n", "", "", "", "elif", "self", ".", "pred_shape", "==", "'rand'", ":", "\n", "                ", "mask", "=", "np", ".", "hstack", "(", "[", "\n", "np", ".", "zeros", "(", "H", "*", "W", "-", "int", "(", "high", ")", ")", ",", "\n", "np", ".", "ones", "(", "int", "(", "high", ")", ")", ",", "\n", "]", ")", ".", "astype", "(", "bool", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "mask", ")", "\n", "mask", "=", "mask", ".", "reshape", "(", "H", ",", "W", ")", "\n", "\n", "", "else", ":", "\n", "# no implementation", "\n", "                ", "assert", "False", "\n", "\n", "", "masks", ".", "append", "(", "mask", ")", "\n", "\n", "", "output", "[", "\"masks\"", "]", "=", "masks", "\n", "return", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.cosine_scheduler": [[16, 28], ["numpy.array", "numpy.arange", "numpy.concatenate", "numpy.linspace", "len", "numpy.cos", "len"], "function", ["None"], ["def", "cosine_scheduler", "(", "base_value", ",", "final_value", ",", "epochs", ",", "niter_per_ep", ",", "warmup_epochs", "=", "0", ",", "start_warmup_value", "=", "0", ")", ":", "\n", "    ", "warmup_schedule", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "warmup_iters", "=", "warmup_epochs", "*", "niter_per_ep", "\n", "if", "warmup_epochs", ">", "0", ":", "\n", "        ", "warmup_schedule", "=", "np", ".", "linspace", "(", "start_warmup_value", ",", "base_value", ",", "warmup_iters", ")", "\n", "\n", "", "iters", "=", "np", ".", "arange", "(", "epochs", "*", "niter_per_ep", "-", "warmup_iters", ")", "\n", "schedule", "=", "final_value", "+", "0.5", "*", "(", "base_value", "-", "final_value", ")", "*", "(", "1", "+", "np", ".", "cos", "(", "np", ".", "pi", "*", "iters", "/", "len", "(", "iters", ")", ")", ")", "\n", "\n", "schedule", "=", "np", ".", "concatenate", "(", "(", "warmup_schedule", ",", "schedule", ")", ")", "\n", "assert", "len", "(", "schedule", ")", "==", "epochs", "*", "niter_per_ep", "\n", "return", "schedule", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.fix_random_seeds": [[30, 37], ["torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "numpy.random.seed"], "function", ["None"], ["", "def", "fix_random_seeds", "(", "seed", "=", "31", ")", ":", "\n", "    ", "\"\"\"\n    Fix random seeds.\n    \"\"\"", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.accuracy": [[189, 204], ["torch.no_grad", "torch.no_grad", "max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].view().contiguous().float().sum", "res.append", "correct[].view().contiguous().float().sum.mul_", "target.view", "correct[].view().contiguous().float", "correct[].view().contiguous", "correct[].view"], "function", ["home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.SmoothedValue.max"], ["", "", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the accuracy over the k top predictions for the specified values of k\"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "            ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "contiguous", "(", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc._no_grad_trunc_normal_": [[205, 239], ["warnings.warn", "torch.no_grad", "torch.no_grad", "misc._no_grad_trunc_normal_.norm_cdf"], "function", ["None"], ["", "", "def", "_no_grad_trunc_normal_", "(", "tensor", ",", "mean", ",", "std", ",", "a", ",", "b", ")", ":", "\n", "# Cut & paste from PyTorch official master until it's in a few official releases - RW", "\n", "# Method based on https://people.sc.fsu.edu/~jburkardt/presentations/truncated_normal.pdf", "\n", "    ", "def", "norm_cdf", "(", "x", ")", ":", "\n", "# Computes standard normal cumulative distribution function", "\n", "        ", "return", "(", "1.", "+", "math", ".", "erf", "(", "x", "/", "math", ".", "sqrt", "(", "2.", ")", ")", ")", "/", "2.", "\n", "\n", "", "if", "(", "mean", "<", "a", "-", "2", "*", "std", ")", "or", "(", "mean", ">", "b", "+", "2", "*", "std", ")", ":", "\n", "        ", "warnings", ".", "warn", "(", "\"mean is more than 2 std from [a, b] in nn.init.trunc_normal_. \"", "\n", "\"The distribution of values may be incorrect.\"", ",", "\n", "stacklevel", "=", "2", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# Values are generated by using a truncated uniform distribution and", "\n", "# then using the inverse CDF for the normal distribution.", "\n", "# Get upper and lower cdf values", "\n", "        ", "l", "=", "norm_cdf", "(", "(", "a", "-", "mean", ")", "/", "std", ")", "\n", "u", "=", "norm_cdf", "(", "(", "b", "-", "mean", ")", "/", "std", ")", "\n", "\n", "# Uniformly fill tensor with values from [l, u], then translate to", "\n", "# [2l-1, 2u-1].", "\n", "tensor", ".", "uniform_", "(", "2", "*", "l", "-", "1", ",", "2", "*", "u", "-", "1", ")", "\n", "\n", "# Use inverse cdf transform for normal distribution to get truncated", "\n", "# standard normal", "\n", "tensor", ".", "erfinv_", "(", ")", "\n", "\n", "# Transform to proper mean, std", "\n", "tensor", ".", "mul_", "(", "std", "*", "math", ".", "sqrt", "(", "2.", ")", ")", "\n", "tensor", ".", "add_", "(", "mean", ")", "\n", "\n", "# Clamp to ensure it's in the proper range", "\n", "tensor", ".", "clamp_", "(", "min", "=", "a", ",", "max", "=", "b", ")", "\n", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.trunc_normal_": [[241, 244], ["misc._no_grad_trunc_normal_"], "function", ["home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc._no_grad_trunc_normal_"], ["", "", "def", "trunc_normal_", "(", "tensor", ",", "mean", "=", "0.", ",", "std", "=", "1.", ",", "a", "=", "-", "2.", ",", "b", "=", "2.", ")", ":", "\n", "# type: (Tensor, float, float, float, float) -> Tensor", "\n", "    ", "return", "_no_grad_trunc_normal_", "(", "tensor", ",", "mean", ",", "std", ",", "a", ",", "b", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.get_params_groups": [[287, 299], ["model.named_parameters", "name.endswith", "not_regularized.append", "regularized.append", "len"], "function", ["None"], ["", "", "", "", "def", "get_params_groups", "(", "model", ")", ":", "\n", "    ", "regularized", "=", "[", "]", "\n", "not_regularized", "=", "[", "]", "\n", "for", "name", ",", "param", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "if", "not", "param", ".", "requires_grad", ":", "\n", "            ", "continue", "\n", "# we do not regularize biases nor Norm parameters", "\n", "", "if", "name", ".", "endswith", "(", "\".bias\"", ")", "or", "len", "(", "param", ".", "shape", ")", "==", "1", ":", "\n", "            ", "not_regularized", ".", "append", "(", "param", ")", "\n", "", "else", ":", "\n", "            ", "regularized", ".", "append", "(", "param", ")", "\n", "", "", "return", "[", "{", "'params'", ":", "regularized", "}", ",", "{", "'params'", ":", "not_regularized", ",", "'weight_decay'", ":", "0.", "}", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.has_batchnorms": [[301, 307], ["model.named_modules", "isinstance"], "function", ["None"], ["", "def", "has_batchnorms", "(", "model", ")", ":", "\n", "    ", "bn_types", "=", "(", "nn", ".", "BatchNorm1d", ",", "nn", ".", "BatchNorm2d", ",", "nn", ".", "BatchNorm3d", ",", "nn", ".", "SyncBatchNorm", ")", "\n", "for", "name", ",", "module", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "module", ",", "bn_types", ")", ":", "\n", "            ", "return", "True", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.concat_all_gather": [[353, 365], ["torch.no_grad", "torch.no_grad", "torch.distributed.all_gather", "torch.distributed.all_gather", "torch.cat", "torch.cat", "torch.ones_like", "torch.ones_like", "range", "torch.distributed.get_world_size", "torch.distributed.get_world_size"], "function", ["home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_world_size", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_world_size"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "concat_all_gather", "(", "tensor", ")", ":", "\n", "    ", "\"\"\"\n    Performs all_gather operation on the provided tensors.\n    *** Warning ***: torch.distributed.all_gather has no gradient.\n    \"\"\"", "\n", "tensors_gather", "=", "[", "torch", ".", "ones_like", "(", "tensor", ")", "\n", "for", "_", "in", "range", "(", "torch", ".", "distributed", ".", "get_world_size", "(", ")", ")", "]", "\n", "torch", ".", "distributed", ".", "all_gather", "(", "tensors_gather", ",", "tensor", ",", "async_op", "=", "False", ")", "\n", "\n", "output", "=", "torch", ".", "cat", "(", "tensors_gather", ",", "dim", "=", "0", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.param_groups_lrd": [[366, 411], ["list", "model.named_parameters", "list", "len", "misc.get_layer_id_for_vit", "[].append", "[].append", "param_groups.values", "range"], "function", ["home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.get_layer_id_for_vit"], ["", "def", "param_groups_lrd", "(", "model", ",", "weight_decay", "=", "0.05", ",", "no_weight_decay_list", "=", "[", "]", ",", "layer_decay", "=", ".75", ")", ":", "\n", "    ", "\"\"\"\n    Parameter groups for layer-wise lr decay\n    Following BEiT: https://github.com/microsoft/unilm/blob/master/beit/optim_factory.py#L58\n    \"\"\"", "\n", "param_group_names", "=", "{", "}", "\n", "param_groups", "=", "{", "}", "\n", "\n", "num_layers", "=", "len", "(", "model", ".", "blocks", ")", "+", "1", "\n", "\n", "layer_scales", "=", "list", "(", "layer_decay", "**", "(", "num_layers", "-", "i", ")", "for", "i", "in", "range", "(", "num_layers", "+", "1", ")", ")", "\n", "\n", "for", "n", ",", "p", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "if", "not", "p", ".", "requires_grad", ":", "\n", "            ", "continue", "\n", "\n", "# no decay: all 1D parameters and model specific ones", "\n", "", "if", "p", ".", "ndim", "==", "1", "or", "n", "in", "no_weight_decay_list", ":", "\n", "            ", "g_decay", "=", "\"no_decay\"", "\n", "this_decay", "=", "0.", "\n", "", "else", ":", "\n", "            ", "g_decay", "=", "\"decay\"", "\n", "this_decay", "=", "weight_decay", "\n", "\n", "", "layer_id", "=", "get_layer_id_for_vit", "(", "n", ",", "num_layers", ")", "\n", "group_name", "=", "\"layer_%d_%s\"", "%", "(", "layer_id", ",", "g_decay", ")", "\n", "\n", "if", "group_name", "not", "in", "param_group_names", ":", "\n", "            ", "this_scale", "=", "layer_scales", "[", "layer_id", "]", "\n", "\n", "param_group_names", "[", "group_name", "]", "=", "{", "\n", "\"lr_scale\"", ":", "this_scale", ",", "\n", "\"weight_decay\"", ":", "this_decay", ",", "\n", "\"params\"", ":", "[", "]", ",", "\n", "}", "\n", "param_groups", "[", "group_name", "]", "=", "{", "\n", "\"lr_scale\"", ":", "this_scale", ",", "\n", "\"weight_decay\"", ":", "this_decay", ",", "\n", "\"params\"", ":", "[", "]", ",", "\n", "}", "\n", "\n", "", "param_group_names", "[", "group_name", "]", "[", "\"params\"", "]", ".", "append", "(", "n", ")", "\n", "param_groups", "[", "group_name", "]", "[", "\"params\"", "]", ".", "append", "(", "p", ")", "\n", "\n", "", "return", "list", "(", "param_groups", ".", "values", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.get_layer_id_for_vit": [[412, 425], ["name.startswith", "name.startswith", "int", "name.split"], "function", ["None"], ["", "def", "get_layer_id_for_vit", "(", "name", ",", "num_layers", ")", ":", "\n", "    ", "\"\"\"\n    Assign a parameter with its layer id\n    Following BEiT: https://github.com/microsoft/unilm/blob/master/beit/optim_factory.py#L33\n    \"\"\"", "\n", "if", "name", "in", "[", "'cls_token'", ",", "'pos_embed'", "]", ":", "\n", "        ", "return", "0", "\n", "", "elif", "name", ".", "startswith", "(", "'patch_embed'", ")", ":", "\n", "        ", "return", "0", "\n", "", "elif", "name", ".", "startswith", "(", "'blocks'", ")", ":", "\n", "        ", "return", "int", "(", "name", ".", "split", "(", "'.'", ")", "[", "1", "]", ")", "+", "1", "\n", "", "else", ":", "\n", "        ", "return", "num_layers", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.get_grad_norm_": [[479, 492], ["isinstance", "float", "len", "torch.tensor", "torch.tensor", "max", "torch.norm", "torch.norm", "torch.stack", "torch.stack", "p.grad.detach().abs().max().to", "torch.norm().to", "torch.norm().to", "p.grad.detach().abs().max", "torch.norm", "torch.norm", "p.grad.detach().abs", "p.grad.detach", "p.grad.detach"], "function", ["home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.SmoothedValue.max", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.SmoothedValue.max"], ["", "", "", "def", "get_grad_norm_", "(", "parameters", ",", "norm_type", ":", "float", "=", "2.0", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "if", "isinstance", "(", "parameters", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "parameters", "=", "[", "parameters", "]", "\n", "", "parameters", "=", "[", "p", "for", "p", "in", "parameters", "if", "p", ".", "grad", "is", "not", "None", "]", "\n", "norm_type", "=", "float", "(", "norm_type", ")", "\n", "if", "len", "(", "parameters", ")", "==", "0", ":", "\n", "        ", "return", "torch", ".", "tensor", "(", "0.", ")", "\n", "", "device", "=", "parameters", "[", "0", "]", ".", "grad", ".", "device", "\n", "if", "norm_type", "==", "inf", ":", "\n", "        ", "total_norm", "=", "max", "(", "p", ".", "grad", ".", "detach", "(", ")", ".", "abs", "(", ")", ".", "max", "(", ")", ".", "to", "(", "device", ")", "for", "p", "in", "parameters", ")", "\n", "", "else", ":", "\n", "        ", "total_norm", "=", "torch", ".", "norm", "(", "torch", ".", "stack", "(", "[", "torch", ".", "norm", "(", "p", ".", "grad", ".", "detach", "(", ")", ",", "norm_type", ")", ".", "to", "(", "device", ")", "for", "p", "in", "parameters", "]", ")", ",", "norm_type", ")", "\n", "", "return", "total_norm", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.get_2d_sincos_pos_embed": [[493, 509], ["numpy.arange", "numpy.arange", "numpy.meshgrid", "numpy.stack", "grid.reshape.reshape", "misc.get_2d_sincos_pos_embed_from_grid", "numpy.concatenate", "numpy.zeros"], "function", ["home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.get_2d_sincos_pos_embed_from_grid"], ["", "def", "get_2d_sincos_pos_embed", "(", "embed_dim", ",", "grid_size", ",", "cls_token", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    grid_size: int of the grid height and width\n    return:\n    pos_embed: [grid_size*grid_size, embed_dim] or [1+grid_size*grid_size, embed_dim] (w/ or w/o cls_token)\n    \"\"\"", "\n", "grid_h", "=", "np", ".", "arange", "(", "grid_size", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "grid_w", "=", "np", ".", "arange", "(", "grid_size", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "grid", "=", "np", ".", "meshgrid", "(", "grid_w", ",", "grid_h", ")", "# here w goes first", "\n", "grid", "=", "np", ".", "stack", "(", "grid", ",", "axis", "=", "0", ")", "\n", "\n", "grid", "=", "grid", ".", "reshape", "(", "[", "2", ",", "1", ",", "grid_size", ",", "grid_size", "]", ")", "\n", "pos_embed", "=", "get_2d_sincos_pos_embed_from_grid", "(", "embed_dim", ",", "grid", ")", "\n", "if", "cls_token", ":", "\n", "        ", "pos_embed", "=", "np", ".", "concatenate", "(", "[", "np", ".", "zeros", "(", "[", "1", ",", "embed_dim", "]", ")", ",", "pos_embed", "]", ",", "axis", "=", "0", ")", "\n", "", "return", "pos_embed", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.get_2d_sincos_pos_embed_from_grid": [[510, 519], ["misc.get_1d_sincos_pos_embed_from_grid", "misc.get_1d_sincos_pos_embed_from_grid", "numpy.concatenate"], "function", ["home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.get_1d_sincos_pos_embed_from_grid", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.get_1d_sincos_pos_embed_from_grid"], ["", "def", "get_2d_sincos_pos_embed_from_grid", "(", "embed_dim", ",", "grid", ")", ":", "\n", "    ", "assert", "embed_dim", "%", "2", "==", "0", "\n", "\n", "# use half of dimensions to encode grid_h", "\n", "emb_h", "=", "get_1d_sincos_pos_embed_from_grid", "(", "embed_dim", "//", "2", ",", "grid", "[", "0", "]", ")", "# (H*W, D/2)", "\n", "emb_w", "=", "get_1d_sincos_pos_embed_from_grid", "(", "embed_dim", "//", "2", ",", "grid", "[", "1", "]", ")", "# (H*W, D/2)", "\n", "\n", "emb", "=", "np", ".", "concatenate", "(", "[", "emb_h", ",", "emb_w", "]", ",", "axis", "=", "1", ")", "# (H*W, D)", "\n", "return", "emb", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.get_1d_sincos_pos_embed_from_grid": [[520, 539], ["numpy.arange", "pos.reshape.reshape", "numpy.einsum", "numpy.sin", "numpy.cos", "numpy.concatenate"], "function", ["None"], ["", "def", "get_1d_sincos_pos_embed_from_grid", "(", "embed_dim", ",", "pos", ")", ":", "\n", "    ", "\"\"\"\n    embed_dim: output dimension for each position\n    pos: a list of positions to be encoded: size (M,)\n    out: (M, D)\n    \"\"\"", "\n", "assert", "embed_dim", "%", "2", "==", "0", "\n", "omega", "=", "np", ".", "arange", "(", "embed_dim", "//", "2", ",", "dtype", "=", "np", ".", "float", ")", "\n", "omega", "/=", "embed_dim", "/", "2.", "\n", "omega", "=", "1.", "/", "10000", "**", "omega", "# (D/2,)", "\n", "\n", "pos", "=", "pos", ".", "reshape", "(", "-", "1", ")", "# (M,)", "\n", "out", "=", "np", ".", "einsum", "(", "'m,d->md'", ",", "pos", ",", "omega", ")", "# (M, D/2), outer product", "\n", "\n", "emb_sin", "=", "np", ".", "sin", "(", "out", ")", "# (M, D/2)", "\n", "emb_cos", "=", "np", ".", "cos", "(", "out", ")", "# (M, D/2)", "\n", "\n", "emb", "=", "np", ".", "concatenate", "(", "[", "emb_sin", ",", "emb_cos", "]", ",", "axis", "=", "1", ")", "# (M, D)", "\n", "return", "emb", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.interpolate_pos_embed": [[540, 562], ["int", "int", "print", "pos_tokens.permute().flatten.reshape().permute", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "pos_tokens.permute().flatten.permute().flatten", "torch.cat", "torch.cat", "pos_tokens.permute().flatten.reshape", "pos_tokens.permute().flatten.permute"], "function", ["None"], ["", "def", "interpolate_pos_embed", "(", "model", ",", "checkpoint_model", ")", ":", "\n", "    ", "if", "'pos_embed'", "in", "checkpoint_model", ":", "\n", "        ", "pos_embed_checkpoint", "=", "checkpoint_model", "[", "'pos_embed'", "]", "\n", "embedding_size", "=", "pos_embed_checkpoint", ".", "shape", "[", "-", "1", "]", "\n", "num_patches", "=", "model", ".", "patch_embed", ".", "num_patches", "\n", "num_extra_tokens", "=", "model", ".", "pos_embed", ".", "shape", "[", "-", "2", "]", "-", "num_patches", "\n", "# height (== width) for the checkpoint position embedding", "\n", "orig_size", "=", "int", "(", "(", "pos_embed_checkpoint", ".", "shape", "[", "-", "2", "]", "-", "num_extra_tokens", ")", "**", "0.5", ")", "\n", "# height (== width) for the new position embedding", "\n", "new_size", "=", "int", "(", "num_patches", "**", "0.5", ")", "\n", "# class_token and dist_token are kept unchanged", "\n", "if", "orig_size", "!=", "new_size", ":", "\n", "            ", "print", "(", "\"Position interpolate from %dx%d to %dx%d\"", "%", "(", "orig_size", ",", "orig_size", ",", "new_size", ",", "new_size", ")", ")", "\n", "extra_tokens", "=", "pos_embed_checkpoint", "[", ":", ",", ":", "num_extra_tokens", "]", "\n", "# only the position tokens are interpolated", "\n", "pos_tokens", "=", "pos_embed_checkpoint", "[", ":", ",", "num_extra_tokens", ":", "]", "\n", "pos_tokens", "=", "pos_tokens", ".", "reshape", "(", "-", "1", ",", "orig_size", ",", "orig_size", ",", "embedding_size", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "pos_tokens", "=", "torch", ".", "nn", ".", "functional", ".", "interpolate", "(", "\n", "pos_tokens", ",", "size", "=", "(", "new_size", ",", "new_size", ")", ",", "mode", "=", "'bicubic'", ",", "align_corners", "=", "False", ")", "\n", "pos_tokens", "=", "pos_tokens", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "flatten", "(", "1", ",", "2", ")", "\n", "new_pos_embed", "=", "torch", ".", "cat", "(", "(", "extra_tokens", ",", "pos_tokens", ")", ",", "dim", "=", "1", ")", "\n", "checkpoint_model", "[", "'pos_embed'", "]", "=", "new_pos_embed", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.init_distributed_mode": [[7, 40], ["dist.is_dist_avail_and_initialized", "torch.init_process_group", "torch.cuda.set_device", "torch.cuda.set_device", "dist.setup_for_distributed.print", "torch.barrier", "dist.setup_for_distributed", "int", "int", "int", "int", "torch.cuda.is_available", "torch.cuda.is_available", "datetime.timedelta", "torch.cuda.device_count", "torch.cuda.device_count", "dist.setup_for_distributed.print", "dist.setup_for_distributed.print", "sys.exit"], "function", ["home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.is_dist_avail_and_initialized", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.setup_for_distributed"], ["def", "init_distributed_mode", "(", "args", ")", ":", "\n", "    ", "if", "is_dist_avail_and_initialized", "(", ")", ":", "\n", "        ", "return", "\n", "", "if", "'RANK'", "in", "os", ".", "environ", "and", "'WORLD_SIZE'", "in", "os", ".", "environ", ":", "\n", "        ", "args", ".", "rank", "=", "int", "(", "os", ".", "environ", "[", "\"RANK\"", "]", ")", "\n", "args", ".", "world_size", "=", "int", "(", "os", ".", "environ", "[", "'WORLD_SIZE'", "]", ")", "\n", "args", ".", "gpu", "=", "int", "(", "os", ".", "environ", "[", "'LOCAL_RANK'", "]", ")", "\n", "\n", "", "elif", "'SLURM_PROCID'", "in", "os", ".", "environ", ":", "\n", "        ", "args", ".", "rank", "=", "int", "(", "os", ".", "environ", "[", "'SLURM_PROCID'", "]", ")", "\n", "args", ".", "gpu", "=", "args", ".", "rank", "%", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "", "elif", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "print", "(", "'Will run the code on one GPU.'", ")", "\n", "args", ".", "rank", ",", "args", ".", "gpu", ",", "args", ".", "world_size", "=", "0", ",", "0", ",", "1", "\n", "os", ".", "environ", "[", "'MASTER_ADDR'", "]", "=", "'127.0.0.1'", "\n", "os", ".", "environ", "[", "'MASTER_PORT'", "]", "=", "'29500'", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Does not support training without GPU.'", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "dist", ".", "init_process_group", "(", "\n", "backend", "=", "\"nccl\"", ",", "\n", "init_method", "=", "args", ".", "dist_url", ",", "\n", "world_size", "=", "args", ".", "world_size", ",", "\n", "timeout", "=", "datetime", ".", "timedelta", "(", "hours", "=", "2", ")", ",", "\n", "rank", "=", "args", ".", "rank", ",", "\n", ")", "\n", "\n", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "print", "(", "'| distributed init (rank {}): {}'", ".", "format", "(", "\n", "args", ".", "rank", ",", "args", ".", "dist_url", ")", ",", "flush", "=", "True", ")", "\n", "dist", ".", "barrier", "(", ")", "\n", "setup_for_distributed", "(", "args", ".", "rank", "==", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.setup_for_distributed": [[41, 54], ["kwargs.pop", "builtin_print"], "function", ["None"], ["", "def", "setup_for_distributed", "(", "is_master", ")", ":", "\n", "    ", "\"\"\"\n    This function disables printing when not in master process\n    \"\"\"", "\n", "import", "builtins", "as", "__builtin__", "\n", "builtin_print", "=", "__builtin__", ".", "print", "\n", "\n", "def", "print", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "force", "=", "kwargs", ".", "pop", "(", "'force'", ",", "False", ")", "\n", "if", "is_master", "or", "force", ":", "\n", "            ", "builtin_print", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "", "", "__builtin__", ".", "print", "=", "print", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.is_dist_avail_and_initialized": [[55, 61], ["torch.is_available", "torch.is_initialized"], "function", ["None"], ["", "def", "is_dist_avail_and_initialized", "(", ")", ":", "\n", "    ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "False", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "False", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_world_size": [[63, 67], ["torch.get_world_size", "dist.is_dist_avail_and_initialized"], "function", ["home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_world_size", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.is_dist_avail_and_initialized"], ["", "def", "get_world_size", "(", ")", ":", "\n", "    ", "if", "not", "is_dist_avail_and_initialized", "(", ")", ":", "\n", "        ", "return", "1", "\n", "", "return", "dist", ".", "get_world_size", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_rank": [[69, 73], ["torch.get_rank", "dist.is_dist_avail_and_initialized"], "function", ["home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_rank", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.is_dist_avail_and_initialized"], ["", "def", "get_rank", "(", ")", ":", "\n", "    ", "if", "not", "is_dist_avail_and_initialized", "(", ")", ":", "\n", "        ", "return", "0", "\n", "", "return", "dist", ".", "get_rank", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.is_main_process": [[74, 76], ["dist.get_rank"], "function", ["home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_rank"], ["", "def", "is_main_process", "(", ")", ":", "\n", "    ", "return", "get_rank", "(", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.save_on_master": [[77, 80], ["dist.is_main_process", "torch.save", "torch.save"], "function", ["home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.is_main_process"], ["", "def", "save_on_master", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "is_main_process", "(", ")", ":", "\n", "        ", "torch", ".", "save", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.all_reduce_mean": [[82, 91], ["dist.get_world_size", "torch.tensor().cuda", "torch.tensor().cuda", "torch.all_reduce", "torch.tensor().cuda.item", "torch.tensor", "torch.tensor"], "function", ["home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_world_size"], ["", "", "def", "all_reduce_mean", "(", "x", ")", ":", "\n", "    ", "world_size", "=", "get_world_size", "(", ")", "\n", "if", "world_size", ">", "1", ":", "\n", "        ", "x_reduce", "=", "torch", ".", "tensor", "(", "x", ")", ".", "cuda", "(", ")", "\n", "dist", ".", "all_reduce", "(", "x_reduce", ")", "\n", "x_reduce", "/=", "world_size", "\n", "return", "x_reduce", ".", "item", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hirl-team_hirl.utils.config_utils.is_number_or_bool_or_none": [[4, 10], ["float"], "function", ["None"], ["def", "is_number_or_bool_or_none", "(", "x", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "float", "(", "x", ")", "\n", "return", "True", "\n", "", "except", "ValueError", ":", "\n", "        ", "return", "x", "in", "[", "'True'", ",", "'False'", ",", "'None'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.utils.config_utils.add_quotation_to_string": [[12, 36], ["s_mark.replace.split", "chr", "s_mark.replace.replace", "s.find", "config_utils.is_number_or_bool_or_none", "split_chars.append", "len", "value.startswith", "value.endswith", "value.startswith", "value.endswith", "len"], "function", ["home.repos.pwc.inspect_result.hirl-team_hirl.utils.config_utils.is_number_or_bool_or_none"], ["", "", "def", "add_quotation_to_string", "(", "s", ":", "str", ",", "\n", "split_chars", ":", "List", "[", "str", "]", "=", "None", ")", "->", "str", ":", "\n", "    ", "if", "split_chars", "is", "None", ":", "\n", "        ", "split_chars", "=", "[", "'['", ",", "']'", ",", "'{'", ",", "'}'", ",", "','", ",", "' '", "]", "\n", "if", "'{'", "in", "s", "and", "'}'", "in", "s", ":", "\n", "            ", "split_chars", ".", "append", "(", "':'", ")", "\n", "", "", "s_mark", ",", "marker", "=", "s", ",", "chr", "(", "1", ")", "\n", "for", "split_char", "in", "split_chars", ":", "\n", "        ", "s_mark", "=", "s_mark", ".", "replace", "(", "split_char", ",", "marker", ")", "\n", "\n", "", "s_quoted", "=", "''", "\n", "for", "value", "in", "s_mark", ".", "split", "(", "marker", ")", ":", "\n", "        ", "if", "len", "(", "value", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "", "st", "=", "s", ".", "find", "(", "value", ")", "\n", "if", "is_number_or_bool_or_none", "(", "value", ")", ":", "\n", "            ", "s_quoted", "+=", "s", "[", ":", "st", "]", "+", "value", "\n", "", "elif", "value", ".", "startswith", "(", "\"'\"", ")", "and", "value", ".", "endswith", "(", "\"'\"", ")", "or", "value", ".", "startswith", "(", "'\"'", ")", "and", "value", ".", "endswith", "(", "'\"'", ")", ":", "\n", "            ", "s_quoted", "+=", "s", "[", ":", "st", "]", "+", "value", "\n", "", "else", ":", "\n", "            ", "s_quoted", "+=", "s", "[", ":", "st", "]", "+", "'\"'", "+", "value", "+", "'\"'", "\n", "", "s", "=", "s", "[", "st", "+", "len", "(", "value", ")", ":", "]", "\n", "\n", "", "return", "s_quoted", "+", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.utils.config_utils.update_config": [[37, 60], ["config_utils._2adict", "enumerate", "len", "str_argv.split", "config_utils.update_config.resolve_cfg_with_legality_check"], "function", ["home.repos.pwc.inspect_result.hirl-team_hirl.utils.config_utils._2adict"], ["", "def", "update_config", "(", "cfg", ":", "adict", ",", "\n", "cfg_argv", ":", "List", "[", "str", "]", ",", "\n", "delimiter", ":", "str", "=", "'='", ")", "->", "None", ":", "\n", "    ", "def", "resolve_cfg_with_legality_check", "(", "keys", ":", "List", "[", "str", "]", ")", "->", "Tuple", "[", "adict", ",", "str", "]", ":", "\n", "        ", "obj", ",", "obj_repr", "=", "cfg", ",", "'cfg'", "\n", "for", "idx", ",", "sub_key", "in", "enumerate", "(", "keys", ")", ":", "\n", "            ", "if", "not", "isinstance", "(", "obj", ",", "adict", ")", "or", "sub_key", "not", "in", "obj", ":", "\n", "                ", "raise", "ValueError", "(", "f'Undefined attribute \"{sub_key}\" detected for \"{obj_repr}\"'", ")", "\n", "", "if", "idx", "<", "len", "(", "keys", ")", "-", "1", ":", "\n", "                ", "obj", "=", "obj", ".", "get", "(", "sub_key", ")", "\n", "obj_repr", "+=", "f'.{sub_key}'", "\n", "", "", "return", "obj", ",", "sub_key", "\n", "\n", "", "if", "len", "(", "cfg_argv", ")", "==", "0", ":", "\n", "        ", "return", "\n", "", "_2adict", "(", "cfg", ")", "\n", "\n", "for", "str_argv", "in", "cfg_argv", ":", "\n", "        ", "item", "=", "str_argv", ".", "split", "(", "delimiter", ",", "1", ")", "\n", "assert", "len", "(", "item", ")", "==", "2", ",", "\"Error argv (must be key=value): \"", "+", "str_argv", "\n", "key", ",", "value", "=", "item", "\n", "obj", ",", "leaf", "=", "resolve_cfg_with_legality_check", "(", "key", ".", "split", "(", "'.'", ")", ")", "\n", "obj", "[", "leaf", "]", "=", "eval", "(", "add_quotation_to_string", "(", "value", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.utils.config_utils._2adict": [[61, 65], ["cfg.items", "addict.Dict"], "function", ["None"], ["", "", "def", "_2adict", "(", "cfg", ")", ":", "\n", "    ", "for", "key", ",", "value", "in", "cfg", ".", "items", "(", ")", ":", "\n", "        ", "if", "key", "!=", "'model_bak'", ":", "\n", "            ", "cfg", "[", "key", "]", "=", "adict", "(", "tmp", "=", "value", ")", "[", "'tmp'", "]", "", "", "", "", ""]], "home.repos.pwc.inspect_result.hirl-team_hirl.layers.dino_head.DINOHead.__init__": [[22, 61], ["torch.Module.__init__", "dino_head.DINOHead._build_norm", "dino_head.DINOHead._build_norm", "dino_head.DINOHead._build_act", "max", "dino_head.DINOHead.apply", "layers.append", "range", "common.CustomSequential", "torch.utils.weight_norm", "dino_head.DINOHead.last_layer.weight_g.data.fill_", "torch.Linear", "torch.Linear", "torch.Linear", "layers.append", "layers.append", "layers.append", "layers.append", "layers.append", "torch.Linear", "torch.Linear", "layers.append", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.pretrain.dino.DINORunner.__init__", "home.repos.pwc.inspect_result.hirl-team_hirl.layers.dino_head.DINOHead._build_norm", "home.repos.pwc.inspect_result.hirl-team_hirl.layers.dino_head.DINOHead._build_norm", "home.repos.pwc.inspect_result.hirl-team_hirl.layers.dino_head.DINOHead._build_act", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.SmoothedValue.max"], ["def", "__init__", "(", "self", ",", "in_dim", ",", "out_dim", ",", "norm", "=", "None", ",", "act", "=", "'gelu'", ",", "last_norm", "=", "None", ",", "\n", "nlayers", "=", "3", ",", "hidden_dim", "=", "2048", ",", "bottleneck_dim", "=", "256", ",", "norm_last_layer", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "norm", "=", "self", ".", "_build_norm", "(", "norm", ",", "hidden_dim", ")", "\n", "last_norm", "=", "self", ".", "_build_norm", "(", "last_norm", ",", "out_dim", ",", "affine", "=", "False", ",", "**", "kwargs", ")", "\n", "act", "=", "self", ".", "_build_act", "(", "act", ")", "\n", "\n", "nlayers", "=", "max", "(", "nlayers", ",", "1", ")", "\n", "if", "nlayers", "==", "1", ":", "\n", "            ", "if", "bottleneck_dim", ">", "0", ":", "\n", "                ", "self", ".", "mlp", "=", "nn", ".", "Linear", "(", "in_dim", ",", "bottleneck_dim", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "mlp", "=", "nn", ".", "Linear", "(", "in_dim", ",", "out_dim", ")", "\n", "", "", "else", ":", "\n", "            ", "layers", "=", "[", "nn", ".", "Linear", "(", "in_dim", ",", "hidden_dim", ")", "]", "\n", "if", "norm", "is", "not", "None", ":", "\n", "                ", "layers", ".", "append", "(", "norm", ")", "\n", "", "layers", ".", "append", "(", "act", ")", "\n", "for", "_", "in", "range", "(", "nlayers", "-", "2", ")", ":", "\n", "                ", "layers", ".", "append", "(", "nn", ".", "Linear", "(", "hidden_dim", ",", "hidden_dim", ")", ")", "\n", "if", "norm", "is", "not", "None", ":", "\n", "                    ", "layers", ".", "append", "(", "norm", ")", "\n", "", "layers", ".", "append", "(", "act", ")", "\n", "", "if", "bottleneck_dim", ">", "0", ":", "\n", "                ", "layers", ".", "append", "(", "nn", ".", "Linear", "(", "hidden_dim", ",", "bottleneck_dim", ")", ")", "\n", "", "else", ":", "\n", "                ", "layers", ".", "append", "(", "nn", ".", "Linear", "(", "hidden_dim", ",", "out_dim", ")", ")", "\n", "", "self", ".", "mlp", "=", "CustomSequential", "(", "*", "layers", ")", "\n", "", "self", ".", "apply", "(", "self", ".", "_init_weights", ")", "\n", "\n", "if", "bottleneck_dim", ">", "0", ":", "\n", "            ", "self", ".", "last_layer", "=", "nn", ".", "utils", ".", "weight_norm", "(", "nn", ".", "Linear", "(", "bottleneck_dim", ",", "out_dim", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "last_layer", ".", "weight_g", ".", "data", ".", "fill_", "(", "1", ")", "\n", "if", "norm_last_layer", ":", "\n", "                ", "self", ".", "last_layer", ".", "weight_g", ".", "requires_grad", "=", "False", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "last_layer", "=", "None", "\n", "\n", "", "self", ".", "last_norm", "=", "last_norm", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.layers.dino_head.DINOHead._init_weights": [[62, 67], ["isinstance", "hirl.utils.misc.trunc_normal_", "isinstance", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.trunc_normal_"], ["", "def", "_init_weights", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "trunc_normal_", "(", "m", ".", "weight", ",", "std", "=", ".02", ")", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.layers.dino_head.DINOHead.forward": [[68, 76], ["dino_head.DINOHead.mlp", "torch.functional.normalize", "dino_head.DINOHead.last_layer", "dino_head.DINOHead.last_norm"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "mlp", "(", "x", ")", "\n", "if", "self", ".", "last_layer", "is", "not", "None", ":", "\n", "            ", "x", "=", "nn", ".", "functional", ".", "normalize", "(", "x", ",", "dim", "=", "-", "1", ",", "p", "=", "2", ")", "\n", "x", "=", "self", ".", "last_layer", "(", "x", ")", "\n", "", "if", "self", ".", "last_norm", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "last_norm", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.layers.dino_head.DINOHead._build_norm": [[77, 91], ["torch.BatchNorm1d", "torch.SyncBatchNorm", "common.CSyncBatchNorm", "common.PSyncBatchNorm", "torch.LayerNorm"], "methods", ["None"], ["", "def", "_build_norm", "(", "self", ",", "norm", ",", "hidden_dim", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "norm", "==", "'bn'", ":", "\n", "            ", "norm", "=", "nn", ".", "BatchNorm1d", "(", "hidden_dim", ",", "**", "kwargs", ")", "\n", "", "elif", "norm", "==", "'syncbn'", ":", "\n", "            ", "norm", "=", "nn", ".", "SyncBatchNorm", "(", "hidden_dim", ",", "**", "kwargs", ")", "\n", "", "elif", "norm", "==", "'csyncbn'", ":", "\n", "            ", "norm", "=", "CSyncBatchNorm", "(", "hidden_dim", ",", "**", "kwargs", ")", "\n", "", "elif", "norm", "==", "'psyncbn'", ":", "\n", "            ", "norm", "=", "PSyncBatchNorm", "(", "hidden_dim", ",", "**", "kwargs", ")", "\n", "", "elif", "norm", "==", "'ln'", ":", "\n", "            ", "norm", "=", "nn", ".", "LayerNorm", "(", "hidden_dim", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "            ", "assert", "norm", "is", "None", ",", "\"unknown norm type {}\"", ".", "format", "(", "norm", ")", "\n", "", "return", "norm", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.layers.dino_head.DINOHead._build_act": [[92, 100], ["torch.ReLU", "torch.GELU"], "methods", ["None"], ["", "def", "_build_act", "(", "self", ",", "act", ")", ":", "\n", "        ", "if", "act", "==", "'relu'", ":", "\n", "            ", "act", "=", "nn", ".", "ReLU", "(", ")", "\n", "", "elif", "act", "==", "'gelu'", ":", "\n", "            ", "act", "=", "nn", ".", "GELU", "(", ")", "\n", "", "else", ":", "\n", "            ", "assert", "False", ",", "\"unknown act type {}\"", ".", "format", "(", "act", ")", "\n", "", "return", "act", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hirl-team_hirl.layers.common.CSyncBatchNorm.__init__": [[10, 16], ["torch.SyncBatchNorm.__init__"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.pretrain.dino.DINORunner.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "*", "args", ",", "\n", "with_var", "=", "False", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "CSyncBatchNorm", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "with_var", "=", "with_var", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.layers.common.CSyncBatchNorm.forward": [[17, 27], ["super().forward", "super().forward", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.pipelines.hirl.HIRL.forward", "home.repos.pwc.inspect_result.hirl-team_hirl.pipelines.hirl.HIRL.forward"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# center norm", "\n", "        ", "self", ".", "training", "=", "False", "\n", "if", "not", "self", ".", "with_var", ":", "\n", "            ", "self", ".", "running_var", "=", "torch", ".", "ones_like", "(", "self", ".", "running_var", ")", "\n", "", "normed_x", "=", "super", "(", "CSyncBatchNorm", ",", "self", ")", ".", "forward", "(", "x", ")", "\n", "# udpate center", "\n", "self", ".", "training", "=", "True", "\n", "_", "=", "super", "(", "CSyncBatchNorm", ",", "self", ")", ".", "forward", "(", "x", ")", "\n", "return", "normed_x", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.layers.common.PSyncBatchNorm.__init__": [[29, 46], ["min", "list", "print", "print", "print", "torch.SyncBatchNorm.__init__", "hirl.utils.dist.get_world_size", "hirl.utils.dist.get_world_size", "range", "torch.distributed.new_group", "torch.distributed.new_group", "torch.distributed.new_group", "torch.distributed.new_group", "torch.distributed.new_group", "torch.distributed.new_group", "torch.distributed.new_group", "torch.distributed.new_group", "torch.distributed.new_group", "hirl.utils.dist.get_rank", "hirl.utils.dist.get_world_size", "hirl.utils.dist.get_world_size", "range"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.pretrain.dino.DINORunner.__init__", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_world_size", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_world_size", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_rank", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_world_size", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_world_size"], ["    ", "def", "__init__", "(", "self", ",", "\n", "*", "args", ",", "\n", "bunch_size", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "procs_per_bunch", "=", "min", "(", "bunch_size", ",", "dist", ".", "get_world_size", "(", ")", ")", "\n", "assert", "dist", ".", "get_world_size", "(", ")", "%", "procs_per_bunch", "==", "0", "\n", "n_bunch", "=", "dist", ".", "get_world_size", "(", ")", "//", "procs_per_bunch", "\n", "#", "\n", "ranks", "=", "list", "(", "range", "(", "dist", ".", "get_world_size", "(", ")", ")", ")", "\n", "print", "(", "'---ALL RANKS----\\n{}'", ".", "format", "(", "ranks", ")", ")", "\n", "rank_groups", "=", "[", "ranks", "[", "i", "*", "procs_per_bunch", ":", "(", "i", "+", "1", ")", "*", "procs_per_bunch", "]", "for", "i", "in", "range", "(", "n_bunch", ")", "]", "\n", "print", "(", "'---RANK GROUPS----\\n{}'", ".", "format", "(", "rank_groups", ")", ")", "\n", "process_groups", "=", "[", "torch", ".", "distributed", ".", "new_group", "(", "pids", ")", "for", "pids", "in", "rank_groups", "]", "\n", "bunch_id", "=", "dist", ".", "get_rank", "(", ")", "//", "procs_per_bunch", "\n", "process_group", "=", "process_groups", "[", "bunch_id", "]", "\n", "print", "(", "'---CURRENT GROUP----\\n{}'", ".", "format", "(", "process_group", ")", ")", "\n", "super", "(", "PSyncBatchNorm", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "process_group", "=", "process_group", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.layers.common.CustomSequential.forward": [[50, 60], ["len", "isinstance", "list", "list.insert", "inv_perm.pop", "module().permute", "module", "range", "list", "range", "module", "module.permute"], "methods", ["None"], ["def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "for", "module", "in", "self", ":", "\n", "            ", "dim", "=", "len", "(", "input", ".", "shape", ")", "\n", "if", "isinstance", "(", "module", ",", "self", ".", "bn_types", ")", "and", "dim", ">", "2", ":", "\n", "                ", "perm", "=", "list", "(", "range", "(", "dim", "-", "1", ")", ")", ";", "perm", ".", "insert", "(", "1", ",", "dim", "-", "1", ")", "\n", "inv_perm", "=", "list", "(", "range", "(", "dim", ")", ")", "+", "[", "1", "]", ";", "inv_perm", ".", "pop", "(", "1", ")", "\n", "input", "=", "module", "(", "input", ".", "permute", "(", "*", "perm", ")", ")", ".", "permute", "(", "*", "inv_perm", ")", "\n", "", "else", ":", "\n", "                ", "input", "=", "module", "(", "input", ")", "\n", "", "", "return", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.layers.common.MLP.__init__": [[75, 106], ["torch.Module.__init__", "isinstance", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "isinstance", "getattr", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "len", "common.MLP.layers.append", "common.MLP.layers.append", "common.MLP.batch_norms.append", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "len", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "len"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.pretrain.dino.DINORunner.__init__"], ["def", "__init__", "(", "self", ",", "input_dim", ",", "hidden_dims", ",", "short_cut", "=", "False", ",", "batch_norm", "=", "False", ",", "\n", "activation", "=", "\"relu\"", ",", "dropout", "=", "0", ")", ":", "\n", "        ", "super", "(", "MLP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "not", "isinstance", "(", "hidden_dims", ",", "Sequence", ")", ":", "\n", "            ", "hidden_dims", "=", "[", "hidden_dims", "]", "\n", "", "self", ".", "dims", "=", "[", "input_dim", "]", "+", "hidden_dims", "\n", "self", ".", "short_cut", "=", "short_cut", "\n", "\n", "if", "isinstance", "(", "activation", ",", "str", ")", ":", "\n", "            ", "self", ".", "activation", "=", "getattr", "(", "F", ",", "activation", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "activation", "=", "activation", "\n", "", "if", "dropout", ":", "\n", "            ", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "dropout", "=", "None", "\n", "\n", "", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "dims", ")", "-", "1", ")", ":", "\n", "            ", "if", "batch_norm", "and", "i", "<", "len", "(", "self", ".", "dims", ")", "-", "2", ":", "\n", "# Not use bias when the linear layer is followed by BN", "\n", "                ", "self", ".", "layers", ".", "append", "(", "nn", ".", "Linear", "(", "self", ".", "dims", "[", "i", "]", ",", "self", ".", "dims", "[", "i", "+", "1", "]", ",", "bias", "=", "False", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "layers", ".", "append", "(", "nn", ".", "Linear", "(", "self", ".", "dims", "[", "i", "]", ",", "self", ".", "dims", "[", "i", "+", "1", "]", ")", ")", "\n", "", "", "if", "batch_norm", ":", "\n", "            ", "self", ".", "batch_norms", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "dims", ")", "-", "2", ")", ":", "\n", "                ", "self", ".", "batch_norms", ".", "append", "(", "nn", ".", "BatchNorm1d", "(", "self", ".", "dims", "[", "i", "+", "1", "]", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "batch_norms", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.layers.common.MLP.forward": [[107, 125], ["enumerate", "layer", "common.MLP.activation", "len", "common.MLP.flatten", "common.MLP.dropout"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "\"\"\"\"\"\"", "\n", "layer_input", "=", "input", "\n", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "            ", "hidden", "=", "layer", "(", "layer_input", ")", "\n", "if", "i", "<", "len", "(", "self", ".", "layers", ")", "-", "1", ":", "\n", "                ", "if", "self", ".", "batch_norms", ":", "\n", "                    ", "x", "=", "hidden", ".", "flatten", "(", "0", ",", "-", "2", ")", "\n", "hidden", "=", "self", ".", "batch_norms", "[", "i", "]", "(", "x", ")", ".", "view_as", "(", "hidden", ")", "\n", "", "hidden", "=", "self", ".", "activation", "(", "hidden", ")", "\n", "if", "self", ".", "dropout", ":", "\n", "                    ", "hidden", "=", "self", ".", "dropout", "(", "hidden", ")", "\n", "", "", "if", "self", ".", "short_cut", "and", "hidden", ".", "shape", "==", "layer_input", ".", "shape", ":", "\n", "                ", "hidden", "=", "hidden", "+", "layer_input", "\n", "", "layer_input", "=", "hidden", "\n", "\n", "", "return", "hidden", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.layers.common.MultiCropWrapper.__init__": [[139, 148], ["torch.Module.__init__", "torch.Identity", "torch.Identity", "torch.Identity", "torch.Identity", "torch.Identity", "torch.Identity", "torch.Identity", "torch.Identity", "torch.Identity"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.pretrain.dino.DINORunner.__init__"], ["def", "__init__", "(", "self", ",", "backbone", ",", "head", "=", "None", ")", ":", "\n", "        ", "super", "(", "MultiCropWrapper", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# disable layers dedicated to ImageNet labels classification", "\n", "backbone", ".", "fc", ",", "backbone", ".", "head", "=", "nn", ".", "Identity", "(", ")", ",", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "backbone", "=", "backbone", "\n", "if", "head", "is", "None", ":", "\n", "            ", "self", ".", "head", "=", "nn", ".", "Identity", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "head", "=", "head", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.layers.common.MultiCropWrapper.forward": [[149, 178], ["torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.cumsum", "common.MultiCropWrapper.head", "isinstance", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "common.MultiCropWrapper.backbone", "torch.unique_consecutive", "torch.unique_consecutive", "torch.unique_consecutive", "torch.unique_consecutive", "torch.unique_consecutive", "torch.unique_consecutive", "torch.unique_consecutive", "torch.unique_consecutive", "torch.unique_consecutive", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "kwargs.update", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "dict"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.AverageMeter.update"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "mask", "=", "None", ",", "return_backbone_feat", "=", "False", ",", "\n", "**", "kwargs", ")", ":", "\n", "# convert to list", "\n", "        ", "if", "not", "isinstance", "(", "x", ",", "list", ")", ":", "\n", "            ", "x", "=", "[", "x", "]", "\n", "mask", "=", "[", "mask", "]", "if", "mask", "is", "not", "None", "else", "None", "\n", "", "idx_crops", "=", "torch", ".", "cumsum", "(", "torch", ".", "unique_consecutive", "(", "\n", "torch", ".", "tensor", "(", "[", "inp", ".", "shape", "[", "-", "1", "]", "for", "inp", "in", "x", "]", ")", ",", "\n", "return_counts", "=", "True", ",", "\n", ")", "[", "1", "]", ",", "0", ")", "\n", "start_idx", "=", "0", "\n", "for", "end_idx", "in", "idx_crops", ":", "\n", "            ", "inp_x", "=", "torch", ".", "cat", "(", "x", "[", "start_idx", ":", "end_idx", "]", ")", "\n", "\n", "if", "mask", "is", "not", "None", ":", "\n", "                ", "inp_m", "=", "torch", ".", "cat", "(", "mask", "[", "start_idx", ":", "end_idx", "]", ")", "\n", "kwargs", ".", "update", "(", "dict", "(", "mask", "=", "inp_m", ")", ")", "\n", "\n", "", "_out", "=", "self", ".", "backbone", "(", "inp_x", ",", "**", "kwargs", ")", "\n", "if", "start_idx", "==", "0", ":", "\n", "                ", "output", "=", "_out", "\n", "", "else", ":", "\n", "                ", "output", "=", "torch", ".", "cat", "(", "(", "output", ",", "_out", ")", ")", "\n", "", "start_idx", "=", "end_idx", "\n", "# Run the head forward on the concatenated features.", "\n", "", "output_", "=", "self", ".", "head", "(", "output", ")", "\n", "if", "return_backbone_feat", ":", "\n", "            ", "return", "output", ",", "output_", "\n", "", "return", "output_", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hirl-team_hirl.layers.ibot_head.iBOTHead.__init__": [[21, 54], ["dino_head.DINOHead.__init__", "ibot_head.iBOTHead._build_norm", "torch.utils.weight_norm", "ibot_head.iBOTHead.last_layer2.weight_g.data.fill_", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.pretrain.dino.DINORunner.__init__", "home.repos.pwc.inspect_result.hirl-team_hirl.layers.dino_head.DINOHead._build_norm"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "patch_out_dim", "=", "8192", ",", "norm", "=", "None", ",", "act", "=", "'gelu'", ",", "last_norm", "=", "None", ",", "\n", "nlayers", "=", "3", ",", "hidden_dim", "=", "2048", ",", "bottleneck_dim", "=", "256", ",", "norm_last_layer", "=", "False", ",", "\n", "shared_head", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "super", "(", "iBOTHead", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "\n", "norm", "=", "norm", ",", "\n", "act", "=", "act", ",", "\n", "last_norm", "=", "last_norm", ",", "\n", "nlayers", "=", "nlayers", ",", "\n", "hidden_dim", "=", "hidden_dim", ",", "\n", "bottleneck_dim", "=", "bottleneck_dim", ",", "\n", "norm_last_layer", "=", "norm_last_layer", ",", "\n", "**", "kwargs", ")", "\n", "\n", "if", "not", "shared_head", ":", "\n", "            ", "if", "bottleneck_dim", ">", "0", ":", "\n", "                ", "self", ".", "last_layer2", "=", "nn", ".", "utils", ".", "weight_norm", "(", "nn", ".", "Linear", "(", "bottleneck_dim", ",", "patch_out_dim", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "last_layer2", ".", "weight_g", ".", "data", ".", "fill_", "(", "1", ")", "\n", "if", "norm_last_layer", ":", "\n", "                    ", "self", ".", "last_layer2", ".", "weight_g", ".", "requires_grad", "=", "False", "\n", "", "", "else", ":", "\n", "                ", "self", ".", "mlp2", "=", "nn", ".", "Linear", "(", "hidden_dim", ",", "patch_out_dim", ")", "\n", "self", ".", "last_layer2", "=", "None", "\n", "\n", "", "self", ".", "last_norm2", "=", "self", ".", "_build_norm", "(", "last_norm", ",", "patch_out_dim", ",", "affine", "=", "False", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "            ", "if", "bottleneck_dim", ">", "0", ":", "\n", "                ", "self", ".", "last_layer2", "=", "self", ".", "last_layer", "\n", "", "else", ":", "\n", "                ", "self", ".", "mlp2", "=", "self", ".", "mlp", "[", "-", "1", "]", "\n", "self", ".", "last_layer2", "=", "None", "\n", "\n", "", "self", ".", "last_norm2", "=", "self", ".", "last_norm", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.layers.ibot_head.iBOTHead.forward": [[55, 74], ["len", "super().forward", "ibot_head.iBOTHead.mlp", "torch.functional.normalize", "ibot_head.iBOTHead.last_layer", "ibot_head.iBOTHead.last_layer2", "ibot_head.iBOTHead.mlp2", "ibot_head.iBOTHead.last_norm", "ibot_head.iBOTHead.last_norm2"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.pipelines.hirl.HIRL.forward"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "len", "(", "x", ".", "shape", ")", "==", "2", ":", "\n", "            ", "return", "super", "(", "iBOTHead", ",", "self", ")", ".", "forward", "(", "x", ")", "\n", "\n", "", "if", "self", ".", "last_layer", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "mlp", "(", "x", ")", "\n", "x", "=", "nn", ".", "functional", ".", "normalize", "(", "x", ",", "dim", "=", "-", "1", ",", "p", "=", "2", ")", "\n", "x1", "=", "self", ".", "last_layer", "(", "x", "[", ":", ",", "0", "]", ")", "\n", "x2", "=", "self", ".", "last_layer2", "(", "x", "[", ":", ",", "1", ":", "]", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "mlp", "[", ":", "-", "1", "]", "(", "x", ")", "\n", "x1", "=", "self", ".", "mlp", "[", "-", "1", "]", "(", "x", "[", ":", ",", "0", "]", ")", "\n", "x2", "=", "self", ".", "mlp2", "(", "x", "[", ":", ",", "1", ":", "]", ")", "\n", "\n", "", "if", "self", ".", "last_norm", "is", "not", "None", ":", "\n", "            ", "x1", "=", "self", ".", "last_norm", "(", "x1", ")", "\n", "x2", "=", "self", ".", "last_norm2", "(", "x2", ")", "\n", "\n", "", "return", "x1", ",", "x2", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hirl-team_hirl.models.simsiam.SimSiam.__init__": [[16, 61], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.CosineSimilarity", "torch.CosineSimilarity", "project_layer.register_forward_hook", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "dict", "isinstance", "isinstance", "len", "len", "simsiam.SimSiam.encoder.named_modules"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.pretrain.dino.DINORunner.__init__"], ["def", "__init__", "(", "self", ",", "base_arch", "=", "\"resnet50\"", ",", "dim", "=", "2048", ",", "pred_dim", "=", "512", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "SimSiam", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# create the encoder", "\n", "# num_classes is the output fc dimension, zero-initialize last BNs", "\n", "self", ".", "encoder", "=", "models", ".", "__dict__", "[", "base_arch", "]", "(", "num_classes", "=", "dim", ",", "zero_init_residual", "=", "True", ")", "\n", "\n", "self", ".", "backbone", "=", "self", ".", "encoder", "\n", "\n", "# build a 3-layer projector", "\n", "prev_dim", "=", "self", ".", "encoder", ".", "fc", ".", "weight", ".", "shape", "[", "1", "]", "\n", "self", ".", "encoder", ".", "fc", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "prev_dim", ",", "prev_dim", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "prev_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "# first layer", "\n", "nn", ".", "Linear", "(", "prev_dim", ",", "prev_dim", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "prev_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "# second layer", "\n", "self", ".", "encoder", ".", "fc", ",", "\n", "nn", ".", "BatchNorm1d", "(", "dim", ",", "affine", "=", "False", ")", ")", "# output layer", "\n", "# hack: not use bias as it is followed by BN", "\n", "self", ".", "encoder", ".", "fc", "[", "6", "]", ".", "bias", ".", "requires_grad", "=", "False", "\n", "\n", "# build a 2-layer predictor", "\n", "self", ".", "predictor", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "dim", ",", "pred_dim", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "pred_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "# hidden layer", "\n", "nn", ".", "Linear", "(", "pred_dim", ",", "dim", ")", ")", "# output layer", "\n", "\n", "self", ".", "criterion", "=", "nn", ".", "CosineSimilarity", "(", "dim", "=", "1", ")", "\n", "\n", "# create hooks for the embeddings before and after projection", "\n", "self", ".", "entangled_dim", "=", "prev_dim", "\n", "self", ".", "inst_dim", "=", "dim", "\n", "self", ".", "_embeddings", "=", "{", "}", "\n", "def", "hook_function", "(", "module", ",", "input_emb", ",", "output_emb", ")", ":", "\n", "# always unpack the input and output first", "\n", "            ", "if", "isinstance", "(", "input_emb", ",", "tuple", ")", "and", "len", "(", "input_emb", ")", "==", "1", ":", "\n", "                ", "input_emb", "=", "input_emb", "[", "0", "]", "\n", "", "if", "isinstance", "(", "output_emb", ",", "tuple", ")", "and", "len", "(", "output_emb", ")", "==", "1", ":", "\n", "                ", "output_emb", "=", "output_emb", "[", "0", "]", "\n", "", "self", ".", "_embeddings", "[", "\"entangled_emb\"", "]", "=", "input_emb", "\n", "self", ".", "_embeddings", "[", "\"inst_emb\"", "]", "=", "output_emb", "\n", "\n", "", "project_layer", "=", "dict", "(", "[", "*", "self", ".", "encoder", ".", "named_modules", "(", ")", "]", ")", "[", "\"fc\"", "]", "\n", "project_layer", ".", "register_forward_hook", "(", "hook_function", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.models.simsiam.SimSiam.get_loss": [[62, 74], ["list", "enumerate", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "enumerate", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "list.append", "simsiam.SimSiam.criterion().mean", "simsiam.SimSiam.criterion"], "methods", ["None"], ["", "def", "get_loss", "(", "self", ",", "predictions", ",", "targets", ")", ":", "\n", "        ", "losses", "=", "list", "(", ")", "\n", "for", "pred_id", ",", "pred", "in", "enumerate", "(", "predictions", ")", ":", "\n", "            ", "for", "target_id", ",", "target", "in", "enumerate", "(", "targets", ")", ":", "\n", "                ", "if", "pred_id", "!=", "target_id", ":", "# cross prediction", "\n", "                    ", "loss", "=", "-", "self", ".", "criterion", "(", "pred", ",", "target", ")", ".", "mean", "(", ")", "\n", "losses", ".", "append", "(", "loss", ")", "\n", "\n", "# average over view", "\n", "", "", "", "loss", "=", "torch", ".", "stack", "(", "losses", ",", "0", ")", ".", "mean", "(", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.models.simsiam.SimSiam.forward_feature": [[75, 82], ["simsiam.SimSiam.predictor", "simsiam.SimSiam.encoder", "simsiam.SimSiam.encoder", "simsiam.SimSiam.encoder"], "methods", ["None"], ["", "def", "forward_feature", "(", "self", ",", "images", ")", ":", "\n", "        ", "if", "self", ".", "hook_on_predictor", ":", "\n", "            ", "return", "self", ".", "predictor", "(", "self", ".", "encoder", "(", "images", ")", ")", "\n", "", "elif", "self", ".", "hook_on_predictor_hidden", ":", "\n", "            ", "return", "self", ".", "predictor", "[", "0", "]", "(", "self", ".", "encoder", "(", "images", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "encoder", "(", "images", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.models.simsiam.SimSiam.forward": [[83, 117], ["list", "list", "dict", "enumerate", "simsiam.SimSiam.get_loss", "dict", "simsiam.SimSiam.encoder", "simsiam.SimSiam.predictor", "simsiam.SimSiam.encoder().detach", "list.append", "list.append", "simsiam.SimSiam._embeddings.items", "simsiam.SimSiam.encoder"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.models.ibot.iBOT.get_loss"], ["", "", "def", "forward", "(", "self", ",", "images", ",", "return_hooks", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Given a list of images, compute cross-view predictive loss.\n\n        Args:\n            images (list of torch.Tensor [N,C,H,W]): image tensors. The first two \n                elements are global views.\n            return_hooks (bool): whether return the hidden output by hook function. (default: False)\n\n        Returns:\n            output_dict: dict with the following fields:\n                ``loss`` (torch.Tensor [1,]): loss for backward.\n                ``embeddings``: dict used for further loss computation in hirl.\n        \"\"\"", "\n", "predictions", "=", "list", "(", ")", "\n", "targets", "=", "list", "(", ")", "\n", "embedding_dict", "=", "dict", "(", ")", "\n", "for", "vid", ",", "im", "in", "enumerate", "(", "images", ")", ":", "\n", "            ", "feat", "=", "self", ".", "encoder", "(", "im", ")", "\n", "pred", "=", "self", ".", "predictor", "(", "feat", ")", "\n", "if", "vid", "==", "0", ":", "\n", "                ", "for", "k", ",", "v", "in", "self", ".", "_embeddings", ".", "items", "(", ")", ":", "\n", "                    ", "embedding_dict", "[", "k", "]", "=", "v", "\n", "", "", "target", "=", "self", ".", "encoder", "(", "im", ")", ".", "detach", "(", ")", "\n", "predictions", ".", "append", "(", "pred", ")", "\n", "targets", ".", "append", "(", "target", ")", "\n", "\n", "", "loss", "=", "self", ".", "get_loss", "(", "predictions", ",", "targets", ")", "\n", "\n", "output_dict", "=", "dict", "(", "loss", "=", "loss", ")", "\n", "if", "return_hooks", ":", "\n", "            ", "output_dict", "[", "\"embeddings\"", "]", "=", "embedding_dict", "\n", "\n", "", "return", "output_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.models.simsiam.simsiam_resnet50": [[118, 120], ["simsiam.SimSiam"], "function", ["None"], ["", "", "def", "simsiam_resnet50", "(", "**", "kwargs", ")", ":", "\n", "    ", "return", "SimSiam", "(", "base_arch", "=", "\"resnet50\"", ",", "**", "kwargs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.hirl-team_hirl.models.dino.DINO.__init__": [[30, 88], ["torch.Module.__init__", "dino.DINO.teacher.load_state_dict", "print", "dino.DINO.teacher.parameters", "hirl.layers.MultiCropWrapper", "hirl.layers.MultiCropWrapper", "dino.DINO.student.head.mlp.register_forward_hook", "dino.DINO.register_buffer", "dino.DINO.student.state_dict", "hirl.layers.DINOHead", "hirl.layers.DINOHead", "isinstance", "isinstance", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "isinstance", "isinstance", "len", "len"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.pretrain.dino.DINORunner.__init__", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.NativeScalerWithGradNormCount.load_state_dict", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.NativeScalerWithGradNormCount.state_dict"], ["def", "__init__", "(", "self", ",", "teacher", ",", "student", ",", "out_dim", "=", "8192", ",", "\n", "global_crops_number", "=", "2", ",", "local_crops_number", "=", "10", ",", "\n", "student_temperature", "=", "0.1", ",", "cls_temperature", "=", "0.07", ",", "\n", "center_momentum", "=", "0.9", ",", "teacher_momentum", "=", "0.996", ",", "\n", "norm_last_layer", "=", "False", ",", "norm_in_head", "=", "None", ",", "act_in_head", "=", "\"gelu\"", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "## init teacher and student", "\n", "self", ".", "teacher", "=", "teacher", "\n", "self", ".", "student", "=", "student", "\n", "\n", "self", ".", "backbone", "=", "self", ".", "teacher", "\n", "\n", "## ensure that the teacher and the student share the same weight", "\n", "msg", "=", "self", ".", "teacher", ".", "load_state_dict", "(", "self", ".", "student", ".", "state_dict", "(", ")", ",", "strict", "=", "False", ")", "\n", "print", "(", "\"data copying from student to teacher with msg: {}\"", ".", "format", "(", "msg", ")", ")", "\n", "for", "param_teacher", "in", "self", ".", "teacher", ".", "parameters", "(", ")", ":", "\n", "            ", "param_teacher", ".", "requires_grad", "=", "False", "\n", "\n", "", "embed_dim", "=", "self", ".", "student", ".", "embed_dim", "\n", "\n", "self", ".", "student", "=", "layers", ".", "MultiCropWrapper", "(", "student", ",", "layers", ".", "DINOHead", "(", "\n", "embed_dim", ",", "out_dim", ",", "\n", "norm", "=", "norm_in_head", ",", "act", "=", "act_in_head", ",", "\n", "norm_last_layer", "=", "norm_last_layer", ",", "\n", ")", ")", "\n", "self", ".", "teacher", "=", "layers", ".", "MultiCropWrapper", "(", "\n", "teacher", ",", "layers", ".", "DINOHead", "(", "\n", "embed_dim", ",", "out_dim", ",", "\n", "norm", "=", "norm_in_head", ",", "act", "=", "act_in_head", "\n", ")", ",", "\n", ")", "\n", "\n", "# create hooks for the embeddings before and after projection", "\n", "self", ".", "entangled_dim", "=", "self", ".", "student", ".", "head", ".", "mlp", ".", "weight", ".", "shape", "[", "1", "]", "if", "isinstance", "(", "self", ".", "student", ".", "head", ".", "mlp", ",", "nn", ".", "Linear", ")", "else", "self", ".", "student", ".", "head", ".", "mlp", "[", "0", "]", ".", "weight", ".", "shape", "[", "1", "]", "\n", "self", ".", "inst_dim", "=", "self", ".", "student", ".", "head", ".", "mlp", ".", "weight", ".", "shape", "[", "0", "]", "if", "isinstance", "(", "self", ".", "student", ".", "head", ".", "mlp", ",", "nn", ".", "Linear", ")", "else", "self", ".", "student", ".", "head", ".", "mlp", "[", "-", "1", "]", ".", "weight", ".", "shape", "[", "0", "]", "\n", "self", ".", "_embeddings", "=", "{", "}", "\n", "def", "hook_function", "(", "module", ",", "input_emb", ",", "output_emb", ")", ":", "\n", "            ", "if", "isinstance", "(", "input_emb", ",", "tuple", ")", "and", "len", "(", "input_emb", ")", "==", "1", ":", "\n", "                ", "input_emb", "=", "input_emb", "[", "0", "]", "\n", "", "if", "isinstance", "(", "output_emb", ",", "tuple", ")", "and", "len", "(", "output_emb", ")", "==", "1", ":", "\n", "                ", "output_emb", "=", "output_emb", "[", "0", "]", "\n", "", "self", ".", "_embeddings", "[", "\"entangled_cls_emb\"", "]", "=", "input_emb", "\n", "self", ".", "_embeddings", "[", "\"inst_cls_emb\"", "]", "=", "output_emb", "\n", "", "self", ".", "student", ".", "head", ".", "mlp", ".", "register_forward_hook", "(", "hook_function", ")", "\n", "\n", "self", ".", "student_temperature", "=", "student_temperature", "\n", "self", ".", "cls_temperature", "=", "cls_temperature", "\n", "\n", "self", ".", "center_momentum", "=", "center_momentum", "\n", "self", ".", "teacher_momentum", "=", "teacher_momentum", "\n", "\n", "self", ".", "global_crops_number", "=", "global_crops_number", "\n", "self", ".", "local_crops_number", "=", "local_crops_number", "\n", "self", ".", "ncrops", "=", "global_crops_number", "+", "local_crops_number", "\n", "self", ".", "register_buffer", "(", "\"center\"", ",", "torch", ".", "zeros", "(", "1", ",", "out_dim", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.models.dino.DINO.get_loss": [[89, 115], ["torch.cat.chunk", "torch.cat.chunk", "torch.cat.chunk", "torch.cat.chunk", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "teacher_cls_c.detach().chunk.detach().chunk.detach().chunk", "range", "dict", "dino.DINO.update_center", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "range", "teacher_cls_c.detach().chunk.detach().chunk.detach", "len", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum.mean", "torch.sum.mean", "torch.sum.mean", "torch.sum.mean", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.models.ibot.iBOT.update_center"], ["", "def", "get_loss", "(", "self", ",", "student_cls", ",", "teacher_cls", ",", "student_local_cls", ",", "\n", "cls_temperature", ")", ":", "\n", "        ", "if", "student_local_cls", "is", "not", "None", ":", "\n", "            ", "student_cls", "=", "torch", ".", "cat", "(", "[", "student_cls", ",", "student_local_cls", "]", ")", "\n", "\n", "", "student_cls", "=", "student_cls", "/", "self", ".", "student_temperature", "\n", "student_cls_c", "=", "student_cls", ".", "chunk", "(", "self", ".", "ncrops", ")", "\n", "\n", "\n", "teacher_cls_c", "=", "F", ".", "softmax", "(", "(", "teacher_cls", "-", "self", ".", "center", ")", "/", "cls_temperature", ",", "dim", "=", "-", "1", ")", "\n", "teacher_cls_c", "=", "teacher_cls_c", ".", "detach", "(", ")", ".", "chunk", "(", "self", ".", "global_crops_number", ")", "\n", "\n", "total_loss", ",", "n_loss_terms", "=", "0", ",", "0", "\n", "for", "q", "in", "range", "(", "len", "(", "teacher_cls_c", ")", ")", ":", "\n", "            ", "for", "v", "in", "range", "(", "len", "(", "student_cls_c", ")", ")", ":", "\n", "                ", "if", "v", "==", "q", ":", "\n", "                    ", "continue", "\n", "", "else", ":", "\n", "                    ", "loss", "=", "torch", ".", "sum", "(", "-", "teacher_cls_c", "[", "q", "]", "*", "F", ".", "log_softmax", "(", "student_cls_c", "[", "v", "]", ",", "dim", "=", "-", "1", ")", ",", "dim", "=", "-", "1", ")", "\n", "total_loss", "+=", "loss", ".", "mean", "(", ")", "\n", "n_loss_terms", "+=", "1", "\n", "\n", "", "", "", "total_loss", "=", "total_loss", "/", "n_loss_terms", "\n", "total_loss", "=", "dict", "(", "cls_loss", "=", "total_loss", ",", "loss", "=", "total_loss", ")", "\n", "self", ".", "update_center", "(", "teacher_cls", ")", "\n", "return", "total_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.models.dino.DINO.update_center": [[116, 122], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.all_reduce", "torch.all_reduce", "torch.all_reduce", "torch.all_reduce", "len", "torch.get_world_size", "torch.get_world_size", "torch.get_world_size", "torch.get_world_size"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_world_size", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_world_size", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_world_size", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_world_size"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "update_center", "(", "self", ",", "teacher_cls", ")", ":", "\n", "        ", "cls_center", "=", "torch", ".", "sum", "(", "teacher_cls", ",", "dim", "=", "0", ",", "keepdim", "=", "True", ")", "\n", "dist", ".", "all_reduce", "(", "cls_center", ")", "\n", "cls_center", "=", "cls_center", "/", "(", "len", "(", "teacher_cls", ")", "*", "dist", ".", "get_world_size", "(", ")", ")", "\n", "self", ".", "center", "=", "self", ".", "center", "*", "self", ".", "center_momentum", "+", "cls_center", "*", "(", "1", "-", "self", ".", "center_momentum", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.models.dino.DINO.momentum_update_teacher": [[123, 141], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "student.named_parameters", "teacher.named_parameters", "list", "zip", "isinstance", "isinstance", "names_q.append", "params_q.append", "names_k.append", "params_k.append", "param_k.data.mul_().add_", "set", "set", "zip", "zip", "param_k.data.mul_", "param_q.detach"], "methods", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "momentum_update_teacher", "(", "self", ",", "momentum", "=", "None", ")", ":", "\n", "        ", "m", "=", "momentum", "if", "momentum", "is", "not", "None", "else", "self", ".", "teacher_momentum", "\n", "student", "=", "self", ".", "student", ".", "module", "if", "isinstance", "(", "self", ".", "student", ",", "DistributedDataParallel", ")", "else", "self", ".", "student", "\n", "teacher", "=", "self", ".", "teacher", ".", "module", "if", "isinstance", "(", "self", ".", "teacher", ",", "DistributedDataParallel", ")", "else", "self", ".", "teacher", "\n", "\n", "names_q", ",", "params_q", ",", "names_k", ",", "params_k", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "name_q", ",", "param_q", "in", "student", ".", "named_parameters", "(", ")", ":", "\n", "            ", "names_q", ".", "append", "(", "name_q", ")", "\n", "params_q", ".", "append", "(", "param_q", ")", "\n", "", "for", "name_k", ",", "param_k", "in", "teacher", ".", "named_parameters", "(", ")", ":", "\n", "            ", "names_k", ".", "append", "(", "name_k", ")", "\n", "params_k", ".", "append", "(", "param_k", ")", "\n", "", "names_common", "=", "list", "(", "set", "(", "names_q", ")", "&", "set", "(", "names_k", ")", ")", "\n", "params_q", "=", "[", "param_q", "for", "name_q", ",", "param_q", "in", "zip", "(", "names_q", ",", "params_q", ")", "if", "name_q", "in", "names_common", "]", "\n", "params_k", "=", "[", "param_k", "for", "name_k", ",", "param_k", "in", "zip", "(", "names_k", ",", "params_k", ")", "if", "name_k", "in", "names_common", "]", "\n", "for", "param_q", ",", "param_k", "in", "zip", "(", "params_q", ",", "params_k", ")", ":", "\n", "            ", "param_k", ".", "data", ".", "mul_", "(", "m", ")", ".", "add_", "(", "(", "1", "-", "m", ")", "*", "param_q", ".", "detach", "(", ")", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.models.dino.DINO.forward_feature": [[142, 145], ["dino.DINO.teacher.backbone", "dino.DINO.teacher.head.mlp"], "methods", ["None"], ["", "", "def", "forward_feature", "(", "self", ",", "images", ")", ":", "\n", "        ", "feature", "=", "self", ".", "teacher", ".", "backbone", "(", "images", ")", "\n", "return", "self", ".", "teacher", ".", "head", ".", "mlp", "(", "feature", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.models.dino.DINO.forward": [[146, 201], ["dino.DINO.momentum_update_teacher", "dino.DINO.teacher", "dino.DINO.student", "collections.defaultdict", "dino.DINO._embeddings.items", "dino.DINO.get_loss", "dino.DINO.update", "embedding_dict[].append", "len", "dino.DINO.student", "dino.DINO._embeddings.items", "embedding_dict[].extend", "dino.DINO.chunk", "dino.DINO.chunk", "list", "v.chunk"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.models.ibot.iBOT.momentum_update_teacher", "home.repos.pwc.inspect_result.hirl-team_hirl.models.ibot.iBOT.get_loss", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.AverageMeter.update"], ["", "def", "forward", "(", "self", ",", "imgs", ",", "masks", "=", "None", ",", "global_crops_number", "=", "None", ",", "\n", "cls_temperature", "=", "None", ",", "return_hooks", "=", "False", ",", "\n", "teacher_momentum", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Given a list of images and corresponding masks, compute cross-view \n        cluster assignment prediction loss.\n\n        Args:\n            imgs (list of torch.Tensor [N,C,H,W]): image tensors. \n            masks (list of torch.Tensor [N,C,H,W]): mask tensors.\n            global_crops_number (int, optional): number of global crops. Use \n                self.global_crops_number if set as None. (default: None)\n            cls_temperature (float, optional) temperature on teacher cls token output. \n                Use self.cls_temperature if set as None. (default: None)\n            return_hooks (bool): whether return the hidden output by hook function. (default: False)\n            teacher_momentum (float, optional): momentum for teacher network update.\n                Use self.teacher_momentum if set as None. (default: None)\n\n        Returns:\n            output_dict: dict with the following fields:\n                ``loss`` (torch.Tensor [1,]): loss for backward.\n                ``probs_teacher`` (list of torch.Tensor [N, C]): teacher output indicating the \n                    \"probability\" of cluster assignment.\n                ``probs_student`` (list of torch.Tensor [N, C]): student output indicating the \n                    \"probability\" of cluster assignment.\n                ``embeddings``: dict used for further loss computation in hirl.\n        \"\"\"", "\n", "## momentumly update teacher", "\n", "self", ".", "momentum_update_teacher", "(", "teacher_momentum", ")", "\n", "global_crops_number", "=", "global_crops_number", "if", "global_crops_number", "is", "not", "None", "else", "self", ".", "global_crops_number", "\n", "teacher_output", "=", "self", ".", "teacher", "(", "imgs", "[", ":", "global_crops_number", "]", ")", "\n", "student_output", "=", "self", ".", "student", "(", "imgs", "[", ":", "global_crops_number", "]", ")", "\n", "\n", "## only 1 global crop", "\n", "embedding_dict", "=", "defaultdict", "(", "list", ")", "\n", "batch_size", "=", "imgs", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "for", "k", ",", "v", "in", "self", ".", "_embeddings", ".", "items", "(", ")", ":", "\n", "            ", "embedding_dict", "[", "k", "]", ".", "append", "(", "v", "[", ":", "batch_size", "]", ")", "\n", "\n", "", "if", "len", "(", "imgs", ")", ">", "global_crops_number", ":", "\n", "            ", "student_local_cls", "=", "self", ".", "student", "(", "imgs", "[", "global_crops_number", ":", "]", ",", "mask", "=", "None", ")", "\n", "for", "k", ",", "v", "in", "self", ".", "_embeddings", ".", "items", "(", ")", ":", "\n", "                ", "embedding_dict", "[", "k", "]", ".", "extend", "(", "list", "(", "v", ".", "chunk", "(", "self", ".", "local_crops_number", ")", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "student_local_cls", "=", "None", "\n", "\n", "", "cls_temperature", "=", "cls_temperature", "if", "cls_temperature", "is", "not", "None", "else", "self", ".", "cls_temperature", "\n", "\n", "output_dict", "=", "self", ".", "get_loss", "(", "student_output", ",", "teacher_output", ",", "student_local_cls", ",", "cls_temperature", ")", "\n", "output_dict", ".", "update", "(", "{", "\"probs_teacher\"", ":", "teacher_output", ".", "chunk", "(", "global_crops_number", ")", ",", "\n", "\"probs_student\"", ":", "student_output", ".", "chunk", "(", "global_crops_number", ")", "}", ")", "\n", "if", "return_hooks", ":", "\n", "            ", "output_dict", "[", "\"embeddings\"", "]", "=", "embedding_dict", "\n", "\n", "", "return", "output_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.models.dino.dino_vit_small": [[203, 209], ["vit_small", "vit_small", "dino.DINO"], "function", ["home.repos.pwc.inspect_result.hirl-team_hirl.backbones.vision_transformer.vit_small", "home.repos.pwc.inspect_result.hirl-team_hirl.backbones.vision_transformer.vit_small"], ["", "", "def", "dino_vit_small", "(", "drop_path_rate", ",", "**", "kwargs", ")", ":", "\n", "    ", "student", "=", "vit_small", "(", "patch_size", "=", "16", ",", "return_all_tokens", "=", "False", ",", "\n", "drop_path_rate", "=", "drop_path_rate", ")", "\n", "teacher", "=", "vit_small", "(", "patch_size", "=", "16", ",", "return_all_tokens", "=", "False", ")", "\n", "model", "=", "DINO", "(", "teacher", ",", "student", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.models.dino.dino_vit_base": [[210, 216], ["vit_base", "vit_base", "dino.DINO"], "function", ["home.repos.pwc.inspect_result.hirl-team_hirl.backbones.vision_transformer.vit_base", "home.repos.pwc.inspect_result.hirl-team_hirl.backbones.vision_transformer.vit_base"], ["", "def", "dino_vit_base", "(", "drop_path_rate", ",", "**", "kwargs", ")", ":", "\n", "    ", "student", "=", "vit_base", "(", "patch_size", "=", "16", ",", "return_all_tokens", "=", "False", ",", "\n", "drop_path_rate", "=", "drop_path_rate", ")", "\n", "teacher", "=", "vit_base", "(", "patch_size", "=", "16", ",", "return_all_tokens", "=", "False", ")", "\n", "model", "=", "DINO", "(", "teacher", ",", "student", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.models.dino.dino_vit_large": [[217, 223], ["vit_large", "vit_large", "dino.DINO"], "function", ["home.repos.pwc.inspect_result.hirl-team_hirl.backbones.vision_transformer.vit_large", "home.repos.pwc.inspect_result.hirl-team_hirl.backbones.vision_transformer.vit_large"], ["", "def", "dino_vit_large", "(", "drop_path_rate", ",", "**", "kwargs", ")", ":", "\n", "    ", "student", "=", "vit_large", "(", "patch_size", "=", "16", ",", "return_all_tokens", "=", "False", ",", "\n", "drop_path_rate", "=", "drop_path_rate", ")", "\n", "teacher", "=", "vit_large", "(", "patch_size", "=", "16", ",", "return_all_tokens", "=", "False", ")", "\n", "model", "=", "DINO", "(", "teacher", ",", "student", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.models.mocov3.MomentumContrastV3.__init__": [[22, 59], ["torch.Module.__init__", "mocov3.MomentumContrastV3._build_mlp", "mocov3.MomentumContrastV3._build_mlp", "mocov3.MomentumContrastV3._build_mlp", "zip", "project_layer.register_forward_hook", "mocov3.MomentumContrastV3.encoder_q.parameters", "mocov3.MomentumContrastV3.encoder_k.parameters", "param_k.data.copy_", "dict", "isinstance", "isinstance", "len", "len", "mocov3.MomentumContrastV3.encoder_q.named_modules"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.pretrain.dino.DINORunner.__init__", "home.repos.pwc.inspect_result.hirl-team_hirl.models.mocov3.MomentumContrastV3._build_mlp", "home.repos.pwc.inspect_result.hirl-team_hirl.models.mocov3.MomentumContrastV3._build_mlp", "home.repos.pwc.inspect_result.hirl-team_hirl.models.mocov3.MomentumContrastV3._build_mlp"], ["def", "__init__", "(", "self", ",", "encoder_q", ",", "encoder_k", ",", "dim", "=", "256", ",", "mlp_dim", "=", "4096", ",", "T", "=", "0.2", ",", "\n", "multi_crop", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "encoder_q", "=", "encoder_q", "\n", "self", ".", "encoder_k", "=", "encoder_k", "\n", "self", ".", "backbone", "=", "self", ".", "encoder_q", "\n", "self", ".", "T", "=", "T", "\n", "self", ".", "multi_crop", "=", "multi_crop", "\n", "\n", "# projectors", "\n", "hidden_dim", "=", "self", ".", "encoder_q", ".", "head", ".", "weight", ".", "shape", "[", "1", "]", "\n", "del", "self", ".", "encoder_q", ".", "head", ",", "self", ".", "encoder_k", ".", "head", "\n", "self", ".", "encoder_q", ".", "head", "=", "self", ".", "_build_mlp", "(", "3", ",", "hidden_dim", ",", "mlp_dim", ",", "dim", ")", "\n", "self", ".", "encoder_k", ".", "head", "=", "self", ".", "_build_mlp", "(", "3", ",", "hidden_dim", ",", "mlp_dim", ",", "dim", ")", "\n", "# predictor", "\n", "self", ".", "predictor", "=", "self", ".", "_build_mlp", "(", "2", ",", "dim", ",", "mlp_dim", ",", "dim", ")", "\n", "\n", "# initialize key encoder's parameters as those of query encoder; not update key encoder with gradients ", "\n", "for", "param_q", ",", "param_k", "in", "zip", "(", "self", ".", "encoder_q", ".", "parameters", "(", ")", ",", "self", ".", "encoder_k", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "param_k", ".", "data", ".", "copy_", "(", "param_q", ".", "data", ")", "\n", "param_k", ".", "requires_grad", "=", "False", "\n", "\n", "# create hooks for the embeddings before and after projection", "\n", "", "self", ".", "entangled_dim", "=", "hidden_dim", "\n", "self", ".", "inst_dim", "=", "dim", "\n", "self", ".", "_embeddings", "=", "{", "}", "\n", "def", "hook_function", "(", "module", ",", "input_emb", ",", "output_emb", ")", ":", "\n", "# always unpack the input and output first", "\n", "            ", "if", "isinstance", "(", "input_emb", ",", "tuple", ")", "and", "len", "(", "input_emb", ")", "==", "1", ":", "\n", "                ", "input_emb", "=", "input_emb", "[", "0", "]", "\n", "", "if", "isinstance", "(", "output_emb", ",", "tuple", ")", "and", "len", "(", "output_emb", ")", "==", "1", ":", "\n", "                ", "output_emb", "=", "output_emb", "[", "0", "]", "\n", "", "self", ".", "_embeddings", "[", "\"entangled_cls_emb\"", "]", "=", "input_emb", "\n", "self", ".", "_embeddings", "[", "\"inst_cls_emb\"", "]", "=", "output_emb", "\n", "", "project_layer", "=", "dict", "(", "[", "*", "self", ".", "encoder_q", ".", "named_modules", "(", ")", "]", ")", "[", "\"head\"", "]", "\n", "project_layer", ".", "register_forward_hook", "(", "hook_function", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.models.mocov3.MomentumContrastV3._build_mlp": [[60, 76], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "mlp.append", "torch.Linear", "torch.Linear", "torch.Linear", "mlp.append", "mlp.append", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "mlp.append", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["None"], ["", "def", "_build_mlp", "(", "self", ",", "num_layers", ",", "input_dim", ",", "mlp_dim", ",", "output_dim", ",", "last_bn", "=", "True", ")", ":", "\n", "        ", "mlp", "=", "[", "]", "\n", "for", "l", "in", "range", "(", "num_layers", ")", ":", "\n", "            ", "dim1", "=", "input_dim", "if", "l", "==", "0", "else", "mlp_dim", "\n", "dim2", "=", "output_dim", "if", "l", "==", "num_layers", "-", "1", "else", "mlp_dim", "\n", "\n", "mlp", ".", "append", "(", "nn", ".", "Linear", "(", "dim1", ",", "dim2", ",", "bias", "=", "False", ")", ")", "\n", "if", "l", "<", "num_layers", "-", "1", ":", "\n", "                ", "mlp", ".", "append", "(", "nn", ".", "BatchNorm1d", "(", "dim2", ")", ")", "\n", "mlp", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "", "elif", "last_bn", ":", "\n", "# follow SimCLR's design: https://github.com/google-research/simclr/blob/master/model_util.py#L157", "\n", "# for simplicity, we further removed gamma in BN", "\n", "                ", "mlp", ".", "append", "(", "nn", ".", "BatchNorm1d", "(", "dim2", ",", "affine", "=", "False", ")", ")", "\n", "\n", "", "", "return", "nn", ".", "Sequential", "(", "*", "mlp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.models.mocov3.MomentumContrastV3.concat_all_gather": [[77, 87], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.distributed.all_gather", "torch.distributed.all_gather", "torch.distributed.all_gather", "torch.distributed.all_gather", "torch.distributed.all_gather", "torch.distributed.all_gather", "torch.distributed.all_gather", "torch.distributed.all_gather", "torch.distributed.all_gather", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "range", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_world_size", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_world_size", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_world_size", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_world_size", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_world_size", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_world_size", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_world_size", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_world_size", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_world_size"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "concat_all_gather", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        Performs `all_gather` operation on the provided tensors.\n        Warning: torch.distributed.all_gather has no gradient.\n        \"\"\"", "\n", "x_gather", "=", "[", "torch", ".", "ones_like", "(", "x", ")", "for", "_", "in", "range", "(", "torch", ".", "distributed", ".", "get_world_size", "(", ")", ")", "]", "\n", "torch", ".", "distributed", ".", "all_gather", "(", "x_gather", ",", "x", ",", "async_op", "=", "False", ")", "\n", "output", "=", "torch", ".", "cat", "(", "x_gather", ",", "dim", "=", "0", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.models.mocov3.MomentumContrastV3.momentum_update_key_encoder": [[88, 90], ["mocov3.MomentumContrastV3._momentum_update_key_encoder"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.models.moco.MomentumContrast._momentum_update_key_encoder"], ["", "def", "momentum_update_key_encoder", "(", "self", ")", ":", "\n", "        ", "self", ".", "_momentum_update_key_encoder", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.models.mocov3.MomentumContrastV3._momentum_update_key_encoder": [[91, 98], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "zip", "mocov3.MomentumContrastV3.encoder_q.parameters", "mocov3.MomentumContrastV3.encoder_k.parameters"], "methods", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_momentum_update_key_encoder", "(", "self", ",", "m", ")", ":", "\n", "        ", "\"\"\"\n        Momentum update of the key encoder\n        \"\"\"", "\n", "for", "param_q", ",", "param_k", "in", "zip", "(", "self", ".", "encoder_q", ".", "parameters", "(", ")", ",", "self", ".", "encoder_k", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "param_k", ".", "data", "=", "param_k", ".", "data", "*", "m", "+", "param_q", ".", "data", "*", "(", "1.", "-", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.models.mocov3.MomentumContrastV3.extract_key_feat": [[99, 107], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "mocov3.MomentumContrastV3.encoder_k", "torch.normalize", "torch.normalize", "torch.normalize"], "methods", ["None"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "extract_key_feat", "(", "self", ",", "im_k", ")", ":", "\n", "        ", "\"\"\"\n        Feature extraction of key image.\n        \"\"\"", "\n", "k", "=", "self", ".", "encoder_k", "(", "im_k", ")", "\n", "k", "=", "F", ".", "normalize", "(", "k", ",", "dim", "=", "1", ")", "\n", "return", "k", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.models.mocov3.MomentumContrastV3.extract_feat": [[108, 140], ["mocov3.MomentumContrastV3.predictor", "collections.defaultdict", "mocov3.MomentumContrastV3._embeddings.items", "mocov3.MomentumContrastV3.predictor", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "mocov3.MomentumContrastV3.encoder_q", "embedding_dict[].append", "mocov3.MomentumContrastV3.encoder_q", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "mocov3.MomentumContrastV3._momentum_update_key_encoder", "list", "enumerate", "mocov3.MomentumContrastV3.encoder_q", "mocov3.MomentumContrastV3.extract_key_feat", "mocov3.MomentumContrastV3.extract_key_feat", "mocov3.MomentumContrastV3.predictor", "mocov3.MomentumContrastV3._embeddings.items", "torch.normalize", "torch.normalize", "torch.normalize", "list.append", "mocov3.MomentumContrastV3.encoder_q", "embedding_dict[].append"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.models.moco.MomentumContrast._momentum_update_key_encoder", "home.repos.pwc.inspect_result.hirl-team_hirl.models.moco.MomentumContrast.extract_key_feat", "home.repos.pwc.inspect_result.hirl-team_hirl.models.moco.MomentumContrast.extract_key_feat"], ["", "def", "extract_feat", "(", "self", ",", "images", ",", "m", ",", "is_eval", "=", "False", ")", ":", "\n", "# global views", "\n", "        ", "if", "is_eval", ":", "\n", "            ", "return", "F", ".", "normalize", "(", "self", ".", "encoder_q", "(", "images", ")", ",", "dim", "=", "1", ")", "\n", "\n", "", "im_q", ",", "im_k", "=", "images", "[", "0", "]", ",", "images", "[", "1", "]", "\n", "## get query", "\n", "q1", "=", "self", ".", "predictor", "(", "self", ".", "encoder_q", "(", "im_q", ")", ")", "# queries: NxC", "\n", "embedding_dict", "=", "defaultdict", "(", "list", ")", "\n", "for", "key", ",", "val", "in", "self", ".", "_embeddings", ".", "items", "(", ")", ":", "\n", "            ", "embedding_dict", "[", "key", "]", ".", "append", "(", "val", ")", "\n", "", "q2", "=", "self", ".", "predictor", "(", "self", ".", "encoder_q", "(", "im_k", ")", ")", "\n", "\n", "q1", "=", "F", ".", "normalize", "(", "q1", ",", "dim", "=", "1", ")", "\n", "q2", "=", "F", ".", "normalize", "(", "q2", ",", "dim", "=", "1", ")", "\n", "q", "=", "[", "q1", ",", "q2", "]", "\n", "## get key", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "_momentum_update_key_encoder", "(", "m", ")", "# update once ", "\n", "k1", ",", "k2", "=", "self", ".", "extract_key_feat", "(", "im_q", ")", ",", "self", ".", "extract_key_feat", "(", "im_k", ")", "\n", "k", "=", "[", "k2", ",", "k1", "]", "\n", "## get local views", "\n", "", "local_views", "=", "None", "\n", "if", "self", ".", "multi_crop", ":", "\n", "            ", "local_views", "=", "list", "(", ")", "\n", "for", "n", ",", "im_local", "in", "enumerate", "(", "images", "[", "2", ":", "]", ")", ":", "\n", "                ", "local_q", "=", "self", ".", "predictor", "(", "self", ".", "encoder_q", "(", "im_local", ")", ")", "\n", "for", "key", ",", "val", "in", "self", ".", "_embeddings", ".", "items", "(", ")", ":", "\n", "                    ", "embedding_dict", "[", "key", "]", ".", "append", "(", "val", ")", "\n", "", "local_q", "=", "F", ".", "normalize", "(", "local_q", ",", "dim", "=", "1", ")", "\n", "local_views", ".", "append", "(", "local_q", ")", "\n", "", "", "return", "q", ",", "k", ",", "local_views", ",", "embedding_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.models.mocov3.MomentumContrastV3.compute_local_logits": [[141, 152], ["local_targets.append", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_rank", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_rank", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_rank", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_rank", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_rank", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_rank", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_rank", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_rank", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_rank"], ["", "def", "compute_local_logits", "(", "self", ",", "k", ",", "local_views", ")", ":", "\n", "        ", "\"\"\"\n        Compute the logits and targets for local views.\n        \"\"\"", "\n", "local_logits", "=", "[", "torch", ".", "einsum", "(", "'nc,mc->nm'", ",", "[", "local_view", ",", "k", "]", ")", "/", "self", ".", "T", "for", "local_view", "in", "local_views", "]", "\n", "local_targets", "=", "[", "]", "\n", "for", "logits", "in", "local_logits", ":", "\n", "            ", "N", "=", "logits", ".", "shape", "[", "0", "]", "\n", "local_targets", ".", "append", "(", "torch", ".", "arange", "(", "N", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "logits", ".", "device", ")", "+", "N", "*", "torch", ".", "distributed", ".", "get_rank", "(", ")", ")", "\n", "\n", "", "return", "local_logits", ",", "local_targets", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.models.mocov3.MomentumContrastV3.get_loss": [[153, 165], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "zip", "len", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy"], "methods", ["None"], ["", "def", "get_loss", "(", "self", ",", "logits", ",", "targets", ",", "local_logits", ",", "local_targets", ")", ":", "\n", "        ", "loss", "=", "torch", ".", "tensor", "(", "0", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "logits", ".", "device", ")", "\n", "loss_global", "=", "F", ".", "cross_entropy", "(", "logits", ",", "targets", ")", "*", "(", "2", "*", "self", ".", "T", ")", "\n", "loss", "+=", "loss_global", "\n", "\n", "if", "local_logits", "is", "not", "None", ":", "\n", "            ", "loss_local", "=", "torch", ".", "tensor", "(", "0", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "logits", ".", "device", ")", "\n", "for", "logit", ",", "target", "in", "zip", "(", "local_logits", ",", "local_targets", ")", ":", "\n", "                ", "loss_local", "+=", "F", ".", "cross_entropy", "(", "logit", ",", "target", ")", "*", "(", "2", "*", "self", ".", "T", ")", "\n", "loss_local", "/=", "len", "(", "local_logits", ")", "\n", "", "loss", "+=", "loss_local", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.models.mocov3.MomentumContrastV3.forward_feature": [[166, 168], ["mocov3.MomentumContrastV3.encoder_k"], "methods", ["None"], ["", "def", "forward_feature", "(", "self", ",", "images", ")", ":", "\n", "        ", "return", "self", ".", "encoder_k", "(", "images", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.models.mocov3.MomentumContrastV3.forward": [[169, 237], ["isinstance", "mocov3.MomentumContrastV3.extract_feat", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "enumerate", "dict", "len", "mocov3.MomentumContrastV3.extract_feat", "mocov3.MomentumContrastV3.concat_all_gather", "mocov3.MomentumContrastV3.get_loss", "logits.append", "targets.append", "local_logits.append", "local_targets.append", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "mocov3.MomentumContrastV3.compute_local_logits", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.models.moco.MomentumContrast.extract_feat", "home.repos.pwc.inspect_result.hirl-team_hirl.models.moco.MomentumContrast.extract_feat", "home.repos.pwc.inspect_result.hirl-team_hirl.models.moco.MomentumContrast.concat_all_gather", "home.repos.pwc.inspect_result.hirl-team_hirl.models.ibot.iBOT.get_loss", "home.repos.pwc.inspect_result.hirl-team_hirl.models.moco.MomentumContrast.compute_local_logits", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_rank", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_rank", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_rank", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_rank", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_rank", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_rank", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_rank", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_rank", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_rank"], ["", "def", "forward", "(", "self", ",", "images", ",", "m", ",", "return_hooks", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Given a list of images, compute cross-view contrastive loss within mini batch.\n\n        Args:\n            images (list of torch.Tensor [N,C,H,W]): image tensors. The first two \n                elements are global views.\n            m (float): momentum for updating the momentum encoder.\n            return_hooks (bool): whether return the hidden output by hook function. (default: False)\n\n        Returns:\n            output_dict: dict with the following fields:\n                ``loss`` (torch.Tensor [1,]): loss for backward.\n                ``logits`` (torch.Tensor [N, queue_length+1]): computed contrastive logits between global views.\n                ``local_logits`` (list of torch.Tensor [N, queue_length+1]): computed contrastive logits between \n                    local views and global views.\n                ``targets`` (torch.Tensor [N, ]): indicating the positive pair index between global views.\n                ``local_targets`` (list of torch.Tensor [N,]) indicating the positive pair index between local views and global views.\n                ``embeddings``: dict used for further loss computation in hirl.\n        \"\"\"", "\n", "## if images is not a list but a tensor, just extract feature", "\n", "if", "isinstance", "(", "images", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "images", "=", "[", "images", "]", "\n", "", "if", "len", "(", "images", ")", "==", "1", ":", "\n", "            ", "image_emb", "=", "self", ".", "extract_feat", "(", "images", "[", "0", "]", ",", "is_eval", "=", "True", ")", "\n", "if", "return_hooks", ":", "\n", "                ", "return", "image_emb", ",", "self", ".", "_embeddings", "\n", "", "else", ":", "\n", "                ", "return", "image_emb", "\n", "\n", "", "", "queries", ",", "keys", ",", "local_views", ",", "embedding_dict", "=", "self", ".", "extract_feat", "(", "images", ",", "m", ")", "\n", "## Note: q is a list, k is a list", "\n", "image_emb", "=", "queries", "+", "keys", "+", "local_views", "if", "self", ".", "multi_crop", "else", "(", "queries", "+", "keys", ")", "\n", "\n", "losses", "=", "torch", ".", "tensor", "(", "0", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "images", "[", "0", "]", ".", "device", ")", "\n", "logits", "=", "[", "]", "\n", "targets", "=", "[", "]", "\n", "local_logits", "=", "[", "]", "\n", "local_targets", "=", "[", "]", "\n", "\n", "for", "q_id", ",", "q", "in", "enumerate", "(", "queries", ")", ":", "\n", "# derive logits and targets for contrastive learning", "\n", "            ", "k", "=", "keys", "[", "q_id", "]", "# already cross viewd in extract_feat()", "\n", "k", "=", "self", ".", "concat_all_gather", "(", "k", ")", "\n", "logit", "=", "torch", ".", "einsum", "(", "'nc,mc->nm'", ",", "[", "q", ",", "k", "]", ")", "/", "self", ".", "T", "\n", "N", "=", "logit", ".", "shape", "[", "0", "]", "\n", "target", "=", "torch", ".", "arange", "(", "N", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "logit", ".", "device", ")", "+", "N", "*", "torch", ".", "distributed", ".", "get_rank", "(", ")", "\n", "local_logit", ",", "local_target", "=", "None", ",", "None", "\n", "if", "self", ".", "multi_crop", ":", "\n", "                ", "local_logit", ",", "local_target", "=", "self", ".", "compute_local_logits", "(", "k", ",", "local_views", ")", "\n", "\n", "", "loss", "=", "self", ".", "get_loss", "(", "logit", ",", "target", ",", "local_logit", ",", "local_target", ")", "\n", "losses", "+=", "loss", "\n", "logits", ".", "append", "(", "logit", ")", "\n", "targets", ".", "append", "(", "target", ")", "\n", "local_logits", ".", "append", "(", "local_logit", ")", "\n", "local_targets", ".", "append", "(", "local_target", ")", "\n", "\n", "", "output_dict", "=", "dict", "(", "loss", "=", "losses", ",", "\n", "logits", "=", "logits", ",", "\n", "local_logits", "=", "local_logits", ",", "\n", "targets", "=", "targets", ",", "\n", "local_targets", "=", "local_targets", ",", "\n", ")", "\n", "if", "return_hooks", ":", "\n", "            ", "output_dict", "[", "\"embeddings\"", "]", "=", "embedding_dict", "\n", "\n", "", "return", "output_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.models.mocov3.mocov3_vit_small_single_crop": [[239, 244], ["vit_small", "vit_small", "mocov3.MomentumContrastV3"], "function", ["home.repos.pwc.inspect_result.hirl-team_hirl.backbones.vision_transformer.vit_small", "home.repos.pwc.inspect_result.hirl-team_hirl.backbones.vision_transformer.vit_small"], ["", "", "def", "mocov3_vit_small_single_crop", "(", "**", "kwargs", ")", ":", "\n", "    ", "encoder_q", "=", "vit_small", "(", "patch_size", "=", "16", ",", "num_classes", "=", "4096", ",", "sincos_pos_emb", "=", "True", ",", "mocov3_init", "=", "True", ",", "use_head", "=", "True", ")", "\n", "encoder_k", "=", "vit_small", "(", "patch_size", "=", "16", ",", "num_classes", "=", "4096", ",", "sincos_pos_emb", "=", "True", ",", "mocov3_init", "=", "True", ",", "use_head", "=", "True", ")", "\n", "model", "=", "MomentumContrastV3", "(", "encoder_q", ",", "encoder_k", ",", "multi_crop", "=", "False", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.models.mocov3.mocov3_vit_small_multi_crop": [[245, 250], ["vit_small", "vit_small", "mocov3.MomentumContrastV3"], "function", ["home.repos.pwc.inspect_result.hirl-team_hirl.backbones.vision_transformer.vit_small", "home.repos.pwc.inspect_result.hirl-team_hirl.backbones.vision_transformer.vit_small"], ["", "def", "mocov3_vit_small_multi_crop", "(", "**", "kwargs", ")", ":", "\n", "    ", "encoder_q", "=", "vit_small", "(", "patch_size", "=", "16", ",", "num_classes", "=", "4096", ",", "sincos_pos_emb", "=", "True", ",", "mocov3_init", "=", "True", ",", "use_head", "=", "True", ")", "\n", "encoder_k", "=", "vit_small", "(", "patch_size", "=", "16", ",", "num_classes", "=", "4096", ",", "sincos_pos_emb", "=", "True", ",", "mocov3_init", "=", "True", ",", "use_head", "=", "True", ")", "\n", "model", "=", "MomentumContrastV3", "(", "encoder_q", ",", "encoder_k", ",", "multi_crop", "=", "True", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.models.mocov3.mocov3_vit_base_single_crop": [[251, 256], ["vit_base", "vit_base", "mocov3.MomentumContrastV3"], "function", ["home.repos.pwc.inspect_result.hirl-team_hirl.backbones.vision_transformer.vit_base", "home.repos.pwc.inspect_result.hirl-team_hirl.backbones.vision_transformer.vit_base"], ["", "def", "mocov3_vit_base_single_crop", "(", "**", "kwargs", ")", ":", "\n", "    ", "encoder_q", "=", "vit_base", "(", "patch_size", "=", "16", ",", "num_classes", "=", "4096", ",", "sincos_pos_emb", "=", "True", ",", "mocov3_init", "=", "True", ",", "use_head", "=", "True", ")", "\n", "encoder_k", "=", "vit_base", "(", "patch_size", "=", "16", ",", "num_classes", "=", "4096", ",", "sincos_pos_emb", "=", "True", ",", "mocov3_init", "=", "True", ",", "use_head", "=", "True", ")", "\n", "model", "=", "MomentumContrastV3", "(", "encoder_q", ",", "encoder_k", ",", "multi_crop", "=", "False", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.models.mocov3.mocov3_vit_base_multi_crop": [[257, 262], ["vit_base", "vit_base", "mocov3.MomentumContrastV3"], "function", ["home.repos.pwc.inspect_result.hirl-team_hirl.backbones.vision_transformer.vit_base", "home.repos.pwc.inspect_result.hirl-team_hirl.backbones.vision_transformer.vit_base"], ["", "def", "mocov3_vit_base_multi_crop", "(", "**", "kwargs", ")", ":", "\n", "    ", "encoder_q", "=", "vit_base", "(", "patch_size", "=", "16", ",", "num_classes", "=", "4096", ",", "sincos_pos_emb", "=", "True", ",", "mocov3_init", "=", "True", ",", "use_head", "=", "True", ")", "\n", "encoder_k", "=", "vit_base", "(", "patch_size", "=", "16", ",", "num_classes", "=", "4096", ",", "sincos_pos_emb", "=", "True", ",", "mocov3_init", "=", "True", ",", "use_head", "=", "True", ")", "\n", "model", "=", "MomentumContrastV3", "(", "encoder_q", ",", "encoder_k", ",", "multi_crop", "=", "True", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.models.mocov3.mocov3_vit_large_single_crop": [[263, 268], ["vit_large", "vit_large", "mocov3.MomentumContrastV3"], "function", ["home.repos.pwc.inspect_result.hirl-team_hirl.backbones.vision_transformer.vit_large", "home.repos.pwc.inspect_result.hirl-team_hirl.backbones.vision_transformer.vit_large"], ["", "def", "mocov3_vit_large_single_crop", "(", "**", "kwargs", ")", ":", "\n", "    ", "encoder_q", "=", "vit_large", "(", "patch_size", "=", "16", ",", "num_classes", "=", "4096", ",", "sincos_pos_emb", "=", "True", ",", "mocov3_init", "=", "True", ",", "use_head", "=", "True", ")", "\n", "encoder_k", "=", "vit_large", "(", "patch_size", "=", "16", ",", "num_classes", "=", "4096", ",", "sincos_pos_emb", "=", "True", ",", "mocov3_init", "=", "True", ",", "use_head", "=", "True", ")", "\n", "model", "=", "MomentumContrastV3", "(", "encoder_q", ",", "encoder_k", ",", "multi_crop", "=", "False", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.models.mocov3.mocov3_vit_large_multi_crop": [[269, 274], ["vit_large", "vit_large", "mocov3.MomentumContrastV3"], "function", ["home.repos.pwc.inspect_result.hirl-team_hirl.backbones.vision_transformer.vit_large", "home.repos.pwc.inspect_result.hirl-team_hirl.backbones.vision_transformer.vit_large"], ["", "def", "mocov3_vit_large_multi_crop", "(", "**", "kwargs", ")", ":", "\n", "    ", "encoder_q", "=", "vit_large", "(", "patch_size", "=", "16", ",", "num_classes", "=", "4096", ",", "sincos_pos_emb", "=", "True", ",", "mocov3_init", "=", "True", ",", "use_head", "=", "True", ")", "\n", "encoder_k", "=", "vit_large", "(", "patch_size", "=", "16", ",", "num_classes", "=", "4096", ",", "sincos_pos_emb", "=", "True", ",", "mocov3_init", "=", "True", ",", "use_head", "=", "True", ")", "\n", "model", "=", "MomentumContrastV3", "(", "encoder_q", ",", "encoder_k", ",", "multi_crop", "=", "True", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.hirl-team_hirl.models.swav.SwAV.__init__": [[29, 79], ["torch.Module.__init__", "hirl.utils.dist.get_world_size", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "swav.SwAV.apply", "project_layer.register_forward_hook", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "swav.SwAV.register_buffer", "dict", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "isinstance", "isinstance", "len", "len", "swav.SwAV.encoder.named_modules"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.pretrain.dino.DINORunner.__init__", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_world_size"], ["def", "__init__", "(", "self", ",", "base_arch", "=", "\"resnet50\"", ",", "dim", "=", "128", ",", "batch_size", "=", "64", ",", "queue_length", "=", "0", ",", "T", "=", "0.1", ",", "epsilon", "=", "0.05", ",", "mlp", "=", "True", ",", "\n", "hidden_mlp", "=", "2048", ",", "num_proto", "=", "3000", ",", "num_sinkhorn", "=", "3", ",", "multi_crop", "=", "False", ",", "normalize", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "world_size", "=", "dist", ".", "get_world_size", "(", ")", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "queue_length", "=", "queue_length", "\n", "self", ".", "T", "=", "T", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "self", ".", "num_proto", "=", "num_proto", "\n", "self", ".", "num_sinkhorn", "=", "num_sinkhorn", "\n", "self", ".", "multi_crop", "=", "multi_crop", "\n", "self", ".", "normalize", "=", "normalize", "\n", "\n", "# create encoder and projection head", "\n", "self", ".", "encoder", "=", "models", ".", "__dict__", "[", "base_arch", "]", "(", "num_classes", "=", "dim", ")", "\n", "self", ".", "backbone", "=", "self", ".", "encoder", "\n", "dim_mlp", "=", "self", ".", "encoder", ".", "fc", ".", "weight", ".", "shape", "[", "1", "]", "\n", "if", "mlp", ":", "\n", "## with a batch norm", "\n", "            ", "self", ".", "encoder", ".", "fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "dim_mlp", ",", "hidden_mlp", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "hidden_mlp", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "hidden_mlp", ",", "dim", ")", "\n", ")", "\n", "\n", "# create prototypes and queue", "\n", "", "self", ".", "prototypes", "=", "nn", ".", "Linear", "(", "dim", ",", "num_proto", ",", "bias", "=", "False", ")", "\n", "self", ".", "queue_length", "-=", "self", ".", "queue_length", "%", "(", "self", ".", "world_size", "*", "self", ".", "batch_size", ")", "\n", "self", ".", "use_queue", "=", "self", ".", "queue_length", ">=", "self", ".", "world_size", "\n", "if", "self", ".", "use_queue", ":", "\n", "            ", "self", ".", "register_buffer", "(", "\"queue\"", ",", "torch", ".", "zeros", "(", "2", ",", "self", ".", "queue_length", "//", "self", ".", "world_size", ",", "dim", ")", ")", "\n", "\n", "# initialize model weights", "\n", "", "self", ".", "apply", "(", "self", ".", "_init_weights", ")", "\n", "\n", "# create hooks for the embeddings before and after projection", "\n", "self", ".", "entangled_dim", "=", "dim_mlp", "\n", "self", ".", "inst_dim", "=", "dim", "\n", "self", ".", "_embeddings", "=", "{", "}", "\n", "def", "hook_function", "(", "module", ",", "input_emb", ",", "output_emb", ")", ":", "\n", "            ", "if", "isinstance", "(", "input_emb", ",", "tuple", ")", "and", "len", "(", "input_emb", ")", "==", "1", ":", "\n", "                ", "input_emb", "=", "input_emb", "[", "0", "]", "\n", "", "if", "isinstance", "(", "output_emb", ",", "tuple", ")", "and", "len", "(", "output_emb", ")", "==", "1", ":", "\n", "                ", "output_emb", "=", "output_emb", "[", "0", "]", "\n", "", "self", ".", "_embeddings", "[", "\"entangled_emb\"", "]", "=", "input_emb", "\n", "self", ".", "_embeddings", "[", "\"inst_emb\"", "]", "=", "output_emb", "\n", "", "project_layer", "=", "dict", "(", "[", "*", "self", ".", "encoder", ".", "named_modules", "(", ")", "]", ")", "[", "\"fc\"", "]", "\n", "project_layer", ".", "register_forward_hook", "(", "hook_function", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.models.swav.SwAV._init_weights": [[80, 86], ["isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["", "def", "_init_weights", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "            ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "\"fan_out\"", ",", "nonlinearity", "=", "\"relu\"", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.models.swav.SwAV.extract_feat": [[87, 113], ["swav.SwAV.encoder", "collections.defaultdict", "swav.SwAV._embeddings.items", "swav.SwAV.encoder", "embedding_dict[].append", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "swav.SwAV.encoder", "local_views.append", "swav.SwAV._embeddings.items", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "embedding_dict[].append"], "methods", ["None"], ["", "", "def", "extract_feat", "(", "self", ",", "images", ")", ":", "\n", "# extract feature of global views", "\n", "        ", "im_q", ",", "im_k", "=", "images", "[", "0", "]", ",", "images", "[", "1", "]", "\n", "q", "=", "self", ".", "encoder", "(", "im_q", ")", "\n", "embedding_dict", "=", "defaultdict", "(", "list", ")", "\n", "for", "k", ",", "v", "in", "self", ".", "_embeddings", ".", "items", "(", ")", ":", "\n", "            ", "embedding_dict", "[", "k", "]", ".", "append", "(", "v", ")", "\n", "\n", "", "k", "=", "self", ".", "encoder", "(", "im_k", ")", "\n", "if", "self", ".", "normalize", ":", "\n", "            ", "q", "=", "F", ".", "normalize", "(", "q", ",", "dim", "=", "1", ")", "\n", "k", "=", "F", ".", "normalize", "(", "k", ",", "dim", "=", "1", ")", "\n", "\n", "# extract features of local views", "\n", "", "if", "self", ".", "multi_crop", ":", "\n", "            ", "local_views", "=", "[", "]", "\n", "for", "im_local", "in", "images", "[", "2", ":", "]", ":", "\n", "                ", "local_q", "=", "self", ".", "encoder", "(", "im_local", ")", "\n", "if", "self", ".", "normalize", ":", "\n", "                    ", "local_q", "=", "F", ".", "normalize", "(", "local_q", ",", "dim", "=", "1", ")", "\n", "", "local_views", ".", "append", "(", "local_q", ")", "\n", "for", "key", ",", "v", "in", "self", ".", "_embeddings", ".", "items", "(", ")", ":", "\n", "                    ", "embedding_dict", "[", "key", "]", ".", "append", "(", "v", ")", "\n", "", "", "return", "q", ",", "k", ",", "local_views", ",", "embedding_dict", "\n", "", "else", ":", "\n", "            ", "return", "q", ",", "k", ",", "None", ",", "embedding_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.models.swav.SwAV.distributed_sinkhorn": [[114, 138], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.exp().t", "torch.exp().t", "torch.exp().t", "torch.exp().t", "torch.exp().t", "torch.exp().t", "torch.exp().t", "torch.exp().t", "torch.exp().t", "torch.exp().t", "torch.exp().t", "torch.exp().t", "torch.exp().t", "torch.exp().t", "torch.exp().t", "torch.exp().t", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.all_reduce", "torch.all_reduce", "torch.all_reduce", "torch.all_reduce", "range", "torch.exp().t.t", "torch.exp().t.t", "torch.exp().t.t", "torch.exp().t.t", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.all_reduce", "torch.all_reduce", "torch.all_reduce", "torch.all_reduce", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp"], "methods", ["None"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "distributed_sinkhorn", "(", "self", ",", "logit", ")", ":", "\n", "        ", "\"\"\"\n        Clustering assignment by iterative Sinkhorn-Knopp algorithm (designed for distributed training).\n        \"\"\"", "\n", "Q", "=", "torch", ".", "exp", "(", "logit", "/", "self", ".", "epsilon", ")", ".", "t", "(", ")", "# [D, N]", "\n", "B", "=", "Q", ".", "shape", "[", "1", "]", "*", "self", ".", "world_size", "\n", "K", "=", "Q", ".", "shape", "[", "0", "]", "\n", "\n", "sum_Q", "=", "torch", ".", "sum", "(", "Q", ")", "\n", "torch_dist", ".", "all_reduce", "(", "sum_Q", ")", "\n", "Q", "/=", "sum_Q", "\n", "\n", "for", "it", "in", "range", "(", "self", ".", "num_sinkhorn", ")", ":", "\n", "            ", "sum_row", "=", "torch", ".", "sum", "(", "Q", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "torch_dist", ".", "all_reduce", "(", "sum_row", ")", "\n", "Q", "/=", "sum_row", "\n", "Q", "/=", "K", "\n", "\n", "Q", "/=", "torch", ".", "sum", "(", "Q", ",", "dim", "=", "0", ",", "keepdim", "=", "True", ")", "\n", "Q", "/=", "B", "\n", "\n", "", "Q", "*=", "B", "\n", "return", "Q", ".", "t", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.models.swav.SwAV.get_loss": [[139, 174], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "enumerate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "_tgt_logits.append", "_src_logits.append", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "tgt_emb.detach.detach.detach", "torch.cat.detach", "torch.cat.detach", "torch.cat.detach", "torch.cat.detach", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "swav.SwAV.queue[].clone", "swav.SwAV.distributed_sinkhorn", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "swav.SwAV.prototypes"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.models.swav.SwAV.distributed_sinkhorn"], ["", "def", "get_loss", "(", "self", ",", "q", ",", "k", ",", "logit_q", ",", "logit_k", ",", "logit_local", ")", ":", "\n", "        ", "loss", "=", "torch", ".", "tensor", "(", "0", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "q", ".", "device", ")", "\n", "_tgt_logits", "=", "[", "]", "\n", "_src_logits", "=", "[", "]", "\n", "crops", "=", "[", "(", "q", ",", "logit_q", ")", ",", "(", "k", ",", "logit_k", ")", "]", "\n", "\n", "for", "crop_id", ",", "(", "tgt_crop_id", ",", "src_crop_id", ")", "in", "enumerate", "(", "[", "(", "0", ",", "1", ")", ",", "(", "1", ",", "0", ")", "]", ")", ":", "\n", "            ", "tgt_emb", ",", "tgt_logit", "=", "crops", "[", "tgt_crop_id", "]", "\n", "src_emb", ",", "src_logit", "=", "crops", "[", "src_crop_id", "]", "\n", "\n", "# get prediction target", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "tgt_emb", "=", "tgt_emb", ".", "detach", "(", ")", "\n", "tgt_logit", "=", "tgt_logit", ".", "detach", "(", ")", "\n", "if", "self", ".", "use_queue", ":", "\n", "                    ", "if", "not", "torch", ".", "all", "(", "self", ".", "queue", "[", "crop_id", ",", "-", "1", ",", ":", "]", "==", "0", ")", ":", "\n", "                        ", "tgt_logit", "=", "torch", ".", "cat", "(", "[", "self", ".", "prototypes", "(", "self", ".", "queue", "[", "crop_id", "]", ")", ",", "tgt_logit", "]", ",", "dim", "=", "0", ")", "\n", "", "self", ".", "queue", "[", "crop_id", ",", "self", ".", "batch_size", ":", "]", "=", "self", ".", "queue", "[", "crop_id", ",", ":", "-", "self", ".", "batch_size", "]", ".", "clone", "(", ")", "\n", "self", ".", "queue", "[", "crop_id", ",", ":", "self", ".", "batch_size", "]", "=", "tgt_emb", "\n", "# Sinkhorn iteration", "\n", "", "tgt_assignment", "=", "self", ".", "distributed_sinkhorn", "(", "tgt_logit", ")", "[", "-", "self", ".", "batch_size", ":", "]", "\n", "\n", "# loss of clustering assignment prediction", "\n", "", "all_src_logit", "=", "torch", ".", "cat", "(", "[", "src_logit", "]", "+", "logit_local", ",", "dim", "=", "0", ")", "# ((N_local + 1) * B, K)", "\n", "all_src_logit", "/=", "self", ".", "T", "\n", "all_q", "=", "torch", ".", "cat", "(", "[", "tgt_assignment", "]", "*", "(", "len", "(", "logit_local", ")", "+", "1", ")", ",", "dim", "=", "0", ")", "# ((N_local + 1) * B, K)", "\n", "loss_", "=", "-", "torch", ".", "mean", "(", "torch", ".", "sum", "(", "all_q", "*", "F", ".", "log_softmax", "(", "all_src_logit", ",", "dim", "=", "1", ")", ",", "dim", "=", "1", ")", ")", "\n", "loss", "+=", "loss_", "\n", "_tgt_logits", ".", "append", "(", "all_q", ")", "\n", "_src_logits", ".", "append", "(", "all_src_logit", ")", "\n", "\n", "", "loss", "/=", "2", "## average over crops for assignment", "\n", "_tgt_logit", "=", "torch", ".", "cat", "(", "_tgt_logits", ",", "dim", "=", "0", ")", "\n", "_src_logit", "=", "torch", ".", "cat", "(", "_src_logits", ",", "dim", "=", "0", ")", "\n", "return", "loss", ",", "_tgt_logit", ",", "_src_logit", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.models.swav.SwAV.forward_feature": [[175, 177], ["swav.SwAV.encoder"], "methods", ["None"], ["", "def", "forward_feature", "(", "self", ",", "images", ")", ":", "\n", "        ", "return", "self", ".", "encoder", "(", "images", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.models.swav.SwAV.forward": [[178, 221], ["swav.SwAV.extract_feat", "swav.SwAV.prototypes", "swav.SwAV.prototypes", "swav.SwAV.get_loss", "dict", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "swav.SwAV.prototypes.weight.data.clone", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "swav.SwAV.prototypes.weight.copy_", "swav.SwAV.prototypes"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.models.moco.MomentumContrast.extract_feat", "home.repos.pwc.inspect_result.hirl-team_hirl.models.ibot.iBOT.get_loss"], ["", "def", "forward", "(", "self", ",", "images", ",", "return_hooks", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Given a list of images, compute cross-view cluster assignment prediction loss with sinkhorn \n        assignment algorithm.\n\n        Args:\n            images (list of torch.Tensor [N,C,H,W]): image tensors. The first two \n                elements are global views.\n            return_hooks (bool): whether return the hidden output by hook function. (default: False)\n\n        Returns:\n            output_dict: dict with the following fields:\n                ``loss`` (torch.Tensor [1,]): loss for backward.\n                ``target_logits`` (list of torch.Tensor [N,C]) cluster assignment logits for \n                    target views.\n                ``source_logits`` (list of torch.Tensor [N,C]) cluster assignment logits for \n                    source views.\n                ``embeddings``: dict used for further loss computation in hirl.\n        \"\"\"", "\n", "# normalize prototypes", "\n", "if", "self", ".", "normalize", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "weight", "=", "self", ".", "prototypes", ".", "weight", ".", "data", ".", "clone", "(", ")", "\n", "weight", "=", "F", ".", "normalize", "(", "weight", ",", "dim", "=", "1", ",", "p", "=", "2", ")", "\n", "self", ".", "prototypes", ".", "weight", ".", "copy_", "(", "weight", ")", "\n", "\n", "# feature extraction", "\n", "", "", "q", ",", "k", ",", "local_views", ",", "embedding_dict", "=", "self", ".", "extract_feat", "(", "images", ")", "\n", "image_emb", "=", "[", "q", ",", "k", "]", "+", "local_views", "if", "self", ".", "multi_crop", "else", "[", "q", ",", "k", "]", "\n", "logit_q", "=", "self", ".", "prototypes", "(", "q", ")", "\n", "logit_k", "=", "self", ".", "prototypes", "(", "k", ")", "\n", "logit_local", "=", "[", "self", ".", "prototypes", "(", "local_view", ")", "for", "local_view", "in", "local_views", "]", "if", "self", ".", "multi_crop", "else", "[", "]", "\n", "\n", "loss", ",", "tgt_logit", ",", "src_logit", "=", "self", ".", "get_loss", "(", "q", ",", "k", ",", "logit_q", ",", "logit_k", ",", "logit_local", ")", "\n", "\n", "output_dict", "=", "dict", "(", "loss", "=", "loss", ",", "\n", "target_logits", "=", "tgt_logit", ",", "\n", "source_logits", "=", "src_logit", ")", "\n", "\n", "if", "return_hooks", ":", "\n", "            ", "output_dict", "[", "\"embeddings\"", "]", "=", "embedding_dict", "\n", "\n", "", "return", "output_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.models.swav.swav_resnet50_single_crop": [[223, 227], ["swav.SwAV"], "function", ["None"], ["", "", "def", "swav_resnet50_single_crop", "(", "batch_size", "=", "64", ",", "queue_length", "=", "0", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "SwAV", "(", "base_arch", "=", "\"resnet50\"", ",", "batch_size", "=", "batch_size", ",", "queue_length", "=", "queue_length", ",", "\n", "multi_crop", "=", "False", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.models.swav.swav_resnet50_multi_crop": [[228, 232], ["swav.SwAV"], "function", ["None"], ["", "def", "swav_resnet50_multi_crop", "(", "batch_size", "=", "64", ",", "queue_length", "=", "0", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "SwAV", "(", "base_arch", "=", "\"resnet50\"", ",", "batch_size", "=", "batch_size", ",", "queue_length", "=", "queue_length", ",", "\n", "multi_crop", "=", "True", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.models.moco.MomentumContrast.__init__": [[21, 64], ["torch.Module.__init__", "zip", "project_layer.register_forward_hook", "moco.MomentumContrast.register_buffer", "torch.normalize", "torch.normalize", "torch.normalize", "moco.MomentumContrast.register_buffer", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "moco.MomentumContrast.encoder_q.parameters", "moco.MomentumContrast.encoder_k.parameters", "param_k.data.copy_", "dict", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "isinstance", "isinstance", "len", "len", "moco.MomentumContrast.encoder_q.named_modules"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.pretrain.dino.DINORunner.__init__"], ["def", "__init__", "(", "self", ",", "base_arch", "=", "\"resnet50\"", ",", "dim", "=", "128", ",", "queue_length", "=", "16384", ",", "m", "=", "0.999", ",", "T", "=", "0.2", ",", "\n", "mlp", "=", "True", ",", "multi_crop", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "queue_length", "=", "queue_length", "\n", "self", ".", "m", "=", "m", "\n", "self", ".", "T", "=", "T", "\n", "self", ".", "multi_crop", "=", "multi_crop", "\n", "\n", "# create encoders and projection heads", "\n", "self", ".", "encoder_q", "=", "models", ".", "__dict__", "[", "base_arch", "]", "(", "num_classes", "=", "dim", ")", "\n", "self", ".", "encoder_k", "=", "models", ".", "__dict__", "[", "base_arch", "]", "(", "num_classes", "=", "dim", ")", "\n", "\n", "self", ".", "backbone", "=", "self", ".", "encoder_q", "\n", "\n", "dim_mlp", "=", "self", ".", "encoder_q", ".", "fc", ".", "weight", ".", "shape", "[", "1", "]", "\n", "if", "mlp", ":", "\n", "            ", "self", ".", "encoder_q", ".", "fc", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "dim_mlp", ",", "dim_mlp", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "self", ".", "encoder_q", ".", "fc", ")", "\n", "self", ".", "encoder_k", ".", "fc", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "dim_mlp", ",", "dim_mlp", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "self", ".", "encoder_k", ".", "fc", ")", "\n", "\n", "# initialize key encoder's parameters as those of query encoder; not update key encoder with gradients ", "\n", "", "for", "param_q", ",", "param_k", "in", "zip", "(", "self", ".", "encoder_q", ".", "parameters", "(", ")", ",", "self", ".", "encoder_k", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "param_k", ".", "data", ".", "copy_", "(", "param_q", ".", "data", ")", "\n", "param_k", ".", "requires_grad", "=", "False", "\n", "\n", "# create hooks for the embeddings before and after projection", "\n", "", "self", ".", "entangled_dim", "=", "dim_mlp", "\n", "self", ".", "inst_dim", "=", "dim", "\n", "self", ".", "_embeddings", "=", "{", "}", "\n", "def", "hook_function", "(", "module", ",", "input_emb", ",", "output_emb", ")", ":", "\n", "            ", "if", "isinstance", "(", "input_emb", ",", "tuple", ")", "and", "len", "(", "input_emb", ")", "==", "1", ":", "\n", "                ", "input_emb", "=", "input_emb", "[", "0", "]", "\n", "", "if", "isinstance", "(", "output_emb", ",", "tuple", ")", "and", "len", "(", "output_emb", ")", "==", "1", ":", "\n", "                ", "output_emb", "=", "output_emb", "[", "0", "]", "\n", "", "self", ".", "_embeddings", "[", "\"entangled_emb\"", "]", "=", "input_emb", "\n", "self", ".", "_embeddings", "[", "\"inst_emb\"", "]", "=", "output_emb", "\n", "", "project_layer", "=", "dict", "(", "[", "*", "self", ".", "encoder_q", ".", "named_modules", "(", ")", "]", ")", "[", "\"fc\"", "]", "\n", "project_layer", ".", "register_forward_hook", "(", "hook_function", ")", "\n", "\n", "# create the queue", "\n", "self", ".", "register_buffer", "(", "\"queue\"", ",", "torch", ".", "randn", "(", "dim", ",", "queue_length", ")", ")", "\n", "self", ".", "queue", "=", "F", ".", "normalize", "(", "self", ".", "queue", ",", "dim", "=", "0", ")", "\n", "self", ".", "register_buffer", "(", "\"queue_ptr\"", ",", "torch", ".", "zeros", "(", "1", ",", "dtype", "=", "torch", ".", "long", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.models.moco.MomentumContrast.concat_all_gather": [[65, 71], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.distributed.all_gather", "torch.distributed.all_gather", "torch.distributed.all_gather", "torch.distributed.all_gather", "torch.distributed.all_gather", "torch.distributed.all_gather", "torch.distributed.all_gather", "torch.distributed.all_gather", "torch.distributed.all_gather", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "range", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_world_size", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_world_size", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_world_size", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_world_size", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_world_size", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_world_size", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_world_size", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_world_size", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_world_size"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "concat_all_gather", "(", "self", ",", "x", ")", ":", "\n", "        ", "x_gather", "=", "[", "torch", ".", "ones_like", "(", "x", ")", "for", "_", "in", "range", "(", "torch", ".", "distributed", ".", "get_world_size", "(", ")", ")", "]", "\n", "torch", ".", "distributed", ".", "all_gather", "(", "x_gather", ",", "x", ",", "async_op", "=", "False", ")", "\n", "output", "=", "torch", ".", "cat", "(", "x_gather", ",", "dim", "=", "0", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.models.moco.MomentumContrast.momentum_update_key_encoder": [[72, 74], ["moco.MomentumContrast._momentum_update_key_encoder"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.models.moco.MomentumContrast._momentum_update_key_encoder"], ["", "def", "momentum_update_key_encoder", "(", "self", ")", ":", "\n", "        ", "self", ".", "_momentum_update_key_encoder", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.models.moco.MomentumContrast._momentum_update_key_encoder": [[75, 79], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "zip", "moco.MomentumContrast.encoder_q.parameters", "moco.MomentumContrast.encoder_k.parameters"], "methods", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_momentum_update_key_encoder", "(", "self", ")", ":", "\n", "        ", "for", "param_q", ",", "param_k", "in", "zip", "(", "self", ".", "encoder_q", ".", "parameters", "(", ")", ",", "self", ".", "encoder_k", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "param_k", ".", "data", "=", "param_k", ".", "data", "*", "self", ".", "m", "+", "param_q", ".", "data", "*", "(", "1.", "-", "self", ".", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.models.moco.MomentumContrast._dequeue_and_enqueue": [[80, 91], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "moco.MomentumContrast.concat_all_gather", "int"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.models.moco.MomentumContrast.concat_all_gather"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_dequeue_and_enqueue", "(", "self", ",", "keys", ")", ":", "\n", "        ", "keys", "=", "self", ".", "concat_all_gather", "(", "keys", ")", "\n", "batch_size", "=", "keys", ".", "shape", "[", "0", "]", "\n", "ptr", "=", "int", "(", "self", ".", "queue_ptr", ")", "\n", "assert", "self", ".", "queue_length", "%", "batch_size", "==", "0", "\n", "\n", "# replace the keys at ptr (dequeue and enqueue)", "\n", "self", ".", "queue", "[", ":", ",", "ptr", ":", "ptr", "+", "batch_size", "]", "=", "keys", ".", "T", "\n", "ptr", "=", "(", "ptr", "+", "batch_size", ")", "%", "self", ".", "queue_length", "\n", "self", ".", "queue_ptr", "[", "0", "]", "=", "ptr", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.models.moco.MomentumContrast._batch_shuffle_ddp": [[92, 113], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "moco.MomentumContrast.concat_all_gather", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.distributed.broadcast", "torch.distributed.broadcast", "torch.distributed.broadcast", "torch.distributed.broadcast", "torch.distributed.broadcast", "torch.distributed.broadcast", "torch.distributed.broadcast", "torch.distributed.broadcast", "torch.distributed.broadcast", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.randperm().cuda.view", "torch.randperm().cuda.view", "torch.randperm().cuda.view", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.models.moco.MomentumContrast.concat_all_gather", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_rank", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_rank", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_rank", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_rank", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_rank", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_rank", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_rank", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_rank", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_rank"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_batch_shuffle_ddp", "(", "self", ",", "x", ")", ":", "\n", "# gather from all gpus", "\n", "        ", "batch_size_this", "=", "x", ".", "shape", "[", "0", "]", "\n", "x_gather", "=", "self", ".", "concat_all_gather", "(", "x", ")", "\n", "batch_size_all", "=", "x_gather", ".", "shape", "[", "0", "]", "\n", "num_gpus", "=", "batch_size_all", "//", "batch_size_this", "\n", "\n", "# random shuffle index", "\n", "idx_shuffle", "=", "torch", ".", "randperm", "(", "batch_size_all", ")", ".", "cuda", "(", ")", "\n", "\n", "# broadcast to all gpus", "\n", "torch", ".", "distributed", ".", "broadcast", "(", "idx_shuffle", ",", "src", "=", "0", ")", "\n", "\n", "# index for restoring", "\n", "idx_unshuffle", "=", "torch", ".", "argsort", "(", "idx_shuffle", ")", "\n", "\n", "# shuffle index for this gpu", "\n", "gpu_idx", "=", "torch", ".", "distributed", ".", "get_rank", "(", ")", "\n", "idx_this", "=", "idx_shuffle", ".", "view", "(", "num_gpus", ",", "-", "1", ")", "[", "gpu_idx", "]", "\n", "return", "x_gather", "[", "idx_this", "]", ",", "idx_unshuffle", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.models.moco.MomentumContrast._batch_unshuffle_ddp": [[114, 126], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "moco.MomentumContrast.concat_all_gather", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "idx_unshuffle.view"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.models.moco.MomentumContrast.concat_all_gather", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_rank", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_rank", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_rank", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_rank", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_rank", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_rank", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_rank", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_rank", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_rank"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_batch_unshuffle_ddp", "(", "self", ",", "x", ",", "idx_unshuffle", ")", ":", "\n", "# gather from all gpus", "\n", "        ", "batch_size_this", "=", "x", ".", "shape", "[", "0", "]", "\n", "x_gather", "=", "self", ".", "concat_all_gather", "(", "x", ")", "\n", "batch_size_all", "=", "x_gather", ".", "shape", "[", "0", "]", "\n", "num_gpus", "=", "batch_size_all", "//", "batch_size_this", "\n", "\n", "# restore index for this gpu", "\n", "gpu_idx", "=", "torch", ".", "distributed", ".", "get_rank", "(", ")", "\n", "idx_this", "=", "idx_unshuffle", ".", "view", "(", "num_gpus", ",", "-", "1", ")", "[", "gpu_idx", "]", "\n", "return", "x_gather", "[", "idx_this", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.models.moco.MomentumContrast.extract_key_feat": [[127, 138], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "moco.MomentumContrast._momentum_update_key_encoder", "moco.MomentumContrast._batch_shuffle_ddp", "moco.MomentumContrast.encoder_k", "torch.normalize", "torch.normalize", "torch.normalize", "moco.MomentumContrast._batch_unshuffle_ddp"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.models.moco.MomentumContrast._momentum_update_key_encoder", "home.repos.pwc.inspect_result.hirl-team_hirl.models.moco.MomentumContrast._batch_shuffle_ddp", "home.repos.pwc.inspect_result.hirl-team_hirl.models.moco.MomentumContrast._batch_unshuffle_ddp"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "extract_key_feat", "(", "self", ",", "im_k", ")", ":", "\n", "        ", "self", ".", "_momentum_update_key_encoder", "(", ")", "\n", "# shuffle for making use of BN", "\n", "im_k", ",", "idx_unshuffle", "=", "self", ".", "_batch_shuffle_ddp", "(", "im_k", ")", "\n", "\n", "k", "=", "self", ".", "encoder_k", "(", "im_k", ")", "\n", "k", "=", "F", ".", "normalize", "(", "k", ",", "dim", "=", "1", ")", "\n", "# undo shuffle", "\n", "k", "=", "self", ".", "_batch_unshuffle_ddp", "(", "k", ",", "idx_unshuffle", ")", "\n", "return", "k", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.models.moco.MomentumContrast.extract_feat": [[139, 166], ["moco.MomentumContrast.encoder_q", "dict", "moco.MomentumContrast._embeddings.items", "torch.functional.normalize", "torch.functional.normalize", "torch.functional.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "moco.MomentumContrast.extract_key_feat", "list", "enumerate", "moco.MomentumContrast.extract_key_feat", "moco.MomentumContrast.encoder_q", "moco.MomentumContrast.encoder_q", "torch.functional.normalize", "torch.functional.normalize", "torch.functional.normalize", "list.append"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.models.moco.MomentumContrast.extract_key_feat", "home.repos.pwc.inspect_result.hirl-team_hirl.models.moco.MomentumContrast.extract_key_feat"], ["", "def", "extract_feat", "(", "self", ",", "images", ",", "is_eval", "=", "False", ")", ":", "\n", "# global views", "\n", "        ", "if", "is_eval", ":", "\n", "            ", "return", "F", ".", "normalize", "(", "self", ".", "encoder_q", "(", "images", ")", ",", "dim", "=", "1", ")", "\n", "\n", "", "im_q", ",", "im_k", "=", "images", "[", "0", "]", ",", "images", "[", "1", "]", "\n", "q", "=", "self", ".", "encoder_q", "(", "im_q", ")", "# queries: NxC", "\n", "\n", "embedding_dict", "=", "dict", "(", ")", "\n", "for", "k", ",", "v", "in", "self", ".", "_embeddings", ".", "items", "(", ")", ":", "\n", "            ", "embedding_dict", "[", "k", "]", "=", "v", "\n", "\n", "", "q", "=", "nn", ".", "functional", ".", "normalize", "(", "q", ",", "dim", "=", "1", ")", "\n", "# compute key features", "\n", "if", "self", ".", "multi_crop", ":", "\n", "            ", "k", "=", "self", ".", "extract_key_feat", "(", "im_k", ")", "\n", "local_views", "=", "list", "(", ")", "\n", "for", "n", ",", "im_local", "in", "enumerate", "(", "images", "[", "2", ":", "]", ")", ":", "\n", "                ", "local_q", "=", "self", ".", "encoder_q", "(", "im_local", ")", "\n", "local_q", "=", "nn", ".", "functional", ".", "normalize", "(", "local_q", ",", "dim", "=", "1", ")", "\n", "local_views", ".", "append", "(", "local_q", ")", "\n", "\n", "", "return", "q", ",", "k", ",", "local_views", ",", "embedding_dict", "\n", "", "else", ":", "\n", "            ", "k", "=", "self", ".", "extract_key_feat", "(", "im_k", ")", "\n", "# compute query features", "\n", "return", "q", ",", "k", ",", "None", ",", "embedding_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.models.moco.MomentumContrast.compute_local_logits": [[167, 173], ["torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "zip", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "moco.MomentumContrast.queue.clone().detach", "moco.MomentumContrast.queue.clone"], "methods", ["None"], ["", "", "def", "compute_local_logits", "(", "self", ",", "k", ",", "local_views", ")", ":", "\n", "        ", "l_pos_list", "=", "[", "torch", ".", "einsum", "(", "'nc,nc->n'", ",", "[", "local_view", ",", "k", "]", ")", ".", "unsqueeze", "(", "-", "1", ")", "for", "local_view", "in", "local_views", "]", "\n", "l_neg_list", "=", "[", "torch", ".", "einsum", "(", "'nc,ck->nk'", ",", "[", "local_view", ",", "self", ".", "queue", ".", "clone", "(", ")", ".", "detach", "(", ")", "]", ")", "for", "local_view", "in", "local_views", "]", "\n", "local_logits", "=", "[", "torch", ".", "cat", "(", "[", "l_pos", ",", "l_neg", "]", ",", "dim", "=", "1", ")", "/", "self", ".", "T", "for", "(", "l_pos", ",", "l_neg", ")", "in", "zip", "(", "l_pos_list", ",", "l_neg_list", ")", "]", "\n", "local_labels", "=", "[", "torch", ".", "zeros", "(", "logit", ".", "shape", "[", "0", "]", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "logit", ".", "device", ")", "for", "logit", "in", "local_logits", "]", "\n", "return", "local_logits", ",", "local_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.models.moco.MomentumContrast.get_loss": [[174, 185], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "zip", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy"], "methods", ["None"], ["", "def", "get_loss", "(", "self", ",", "logits", ",", "targets", ",", "local_logits", ",", "local_targets", ")", ":", "\n", "        ", "loss", "=", "torch", ".", "tensor", "(", "0", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "logits", ".", "device", ")", "\n", "loss_global", "=", "F", ".", "cross_entropy", "(", "logits", ",", "targets", ")", "\n", "loss", "+=", "loss_global", "\n", "\n", "if", "local_logits", "is", "not", "None", ":", "\n", "            ", "loss_local", "=", "torch", ".", "tensor", "(", "0", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "logits", ".", "device", ")", "\n", "for", "logit", ",", "target", "in", "zip", "(", "local_logits", ",", "local_targets", ")", ":", "\n", "                ", "loss_local", "+=", "F", ".", "cross_entropy", "(", "logit", ",", "target", ")", "\n", "", "loss", "+=", "loss_local", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.models.moco.MomentumContrast.forward_feature": [[186, 188], ["moco.MomentumContrast.encoder_k"], "methods", ["None"], ["", "def", "forward_feature", "(", "self", ",", "images", ")", ":", "\n", "        ", "return", "self", ".", "encoder_k", "(", "images", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.models.moco.MomentumContrast.forward": [[189, 244], ["isinstance", "moco.MomentumContrast.extract_feat", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "moco.MomentumContrast._dequeue_and_enqueue", "moco.MomentumContrast.get_loss", "dict", "len", "moco.MomentumContrast.extract_feat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "moco.MomentumContrast.compute_local_logits", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "moco.MomentumContrast.queue.clone().detach", "moco.MomentumContrast.queue.clone"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.models.moco.MomentumContrast.extract_feat", "home.repos.pwc.inspect_result.hirl-team_hirl.models.moco.MomentumContrast._dequeue_and_enqueue", "home.repos.pwc.inspect_result.hirl-team_hirl.models.ibot.iBOT.get_loss", "home.repos.pwc.inspect_result.hirl-team_hirl.models.moco.MomentumContrast.extract_feat", "home.repos.pwc.inspect_result.hirl-team_hirl.models.moco.MomentumContrast.compute_local_logits"], ["", "def", "forward", "(", "self", ",", "images", ",", "return_hooks", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Given a list of images, compute cross-view contrastive loss with a \n        negative sample queue.\n\n        Args:\n            images (list of torch.Tensor [N,C,H,W]): image tensors. The first two \n                elements are global views.\n            return_hooks (bool): whether return the hidden output by hook function. (default: False)\n\n        Returns:\n            output_dict: dict with the following fields:\n                ``loss`` (torch.Tensor [1,]): loss for backward.\n                ``logits`` (torch.Tensor [N, queue_length+1]): computed contrastive logits between global views.\n                ``local_logits`` (list of torch.Tensor [N, queue_length+1]): computed contrastive logits between \n                    local views and global views.\n                ``targets`` (torch.Tensor [N, ]): indicating the positive pair index between global views.\n                ``local_targets`` (list of torch.Tensor [N,]) indicating the positive pair index between local views and global views.\n                ``embeddings``: dict used for further loss computation in hirl.\n        \"\"\"", "\n", "## if images is not a list but a tensor, just extract feature", "\n", "if", "isinstance", "(", "images", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "images", "=", "[", "images", "]", "\n", "", "if", "len", "(", "images", ")", "==", "1", ":", "\n", "            ", "image_emb", "=", "self", ".", "extract_feat", "(", "images", ",", "is_eval", "=", "True", ")", "\n", "if", "return_hooks", ":", "\n", "                ", "return", "image_emb", ",", "self", ".", "_embeddings", "\n", "", "else", ":", "\n", "                ", "return", "image_emb", "\n", "\n", "", "", "q", ",", "k", ",", "local_views", ",", "embedding_dict", "=", "self", ".", "extract_feat", "(", "images", ")", "\n", "image_emb", "=", "[", "q", ",", "k", "]", "+", "local_views", "if", "self", ".", "multi_crop", "else", "[", "q", ",", "k", "]", "\n", "\n", "# derive logits and targets for contrastive learning", "\n", "l_pos", "=", "torch", ".", "einsum", "(", "'nc,nc->n'", ",", "[", "q", ",", "k", "]", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "l_neg", "=", "torch", ".", "einsum", "(", "'nc,ck->nk'", ",", "[", "q", ",", "self", ".", "queue", ".", "clone", "(", ")", ".", "detach", "(", ")", "]", ")", "\n", "logits", "=", "torch", ".", "cat", "(", "[", "l_pos", ",", "l_neg", "]", ",", "dim", "=", "1", ")", "/", "self", ".", "T", "\n", "targets", "=", "torch", ".", "zeros", "(", "logits", ".", "shape", "[", "0", "]", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "logits", ".", "device", ")", "\n", "local_logits", ",", "local_targets", "=", "None", ",", "None", "\n", "if", "self", ".", "multi_crop", ":", "\n", "            ", "local_logits", ",", "local_targets", "=", "self", ".", "compute_local_logits", "(", "k", ",", "local_views", ")", "\n", "", "self", ".", "_dequeue_and_enqueue", "(", "k", ")", "\n", "\n", "loss", "=", "self", ".", "get_loss", "(", "logits", ",", "targets", ",", "local_logits", ",", "local_targets", ")", "\n", "\n", "output_dict", "=", "dict", "(", "loss", "=", "loss", ",", "\n", "logits", "=", "logits", ",", "\n", "local_logits", "=", "local_logits", ",", "\n", "targets", "=", "targets", ",", "\n", "local_targets", "=", "local_targets", ",", "\n", ")", "\n", "if", "return_hooks", ":", "\n", "            ", "output_dict", "[", "\"embeddings\"", "]", "=", "embedding_dict", "\n", "\n", "", "return", "output_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.models.moco.moco_resnet50_single_crop": [[246, 249], ["moco.MomentumContrast"], "function", ["None"], ["", "", "def", "moco_resnet50_single_crop", "(", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "MomentumContrast", "(", "base_arch", "=", "\"resnet50\"", ",", "multi_crop", "=", "False", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.models.moco.moco_resnet50_multi_crop": [[250, 253], ["moco.MomentumContrast"], "function", ["None"], ["", "def", "moco_resnet50_multi_crop", "(", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "MomentumContrast", "(", "base_arch", "=", "\"resnet50\"", ",", "multi_crop", "=", "True", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.models.moco.moco_resnet50": [[254, 257], ["moco.MomentumContrast"], "function", ["None"], ["", "def", "moco_resnet50", "(", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "MomentumContrast", "(", "base_arch", "=", "\"resnet50\"", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.models.ibot.iBOT.__init__": [[38, 110], ["torch.Module.__init__", "ibot.iBOT.teacher.load_state_dict", "print", "ibot.iBOT.teacher.parameters", "hirl.layers.MultiCropWrapper", "hirl.layers.MultiCropWrapper", "ibot.iBOT.student.head.mlp.register_forward_hook", "ibot.iBOT.register_buffer", "ibot.iBOT.register_buffer", "ibot.iBOT.student.state_dict", "hirl.layers.iBOTHead", "hirl.layers.iBOTHead", "isinstance", "isinstance", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "isinstance", "isinstance", "len", "len"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.pretrain.dino.DINORunner.__init__", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.NativeScalerWithGradNormCount.load_state_dict", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.NativeScalerWithGradNormCount.state_dict"], ["def", "__init__", "(", "self", ",", "teacher", ",", "student", ",", "out_dim", "=", "8192", ",", "patch_out_dim", "=", "8192", ",", "\n", "global_crops_number", "=", "2", ",", "local_crops_number", "=", "0", ",", "\n", "student_temperature", "=", "0.1", ",", "cls_temperature", "=", "0.07", ",", "patch_temperature", "=", "0.07", ",", "\n", "center_momentum", "=", "0.9", ",", "center_momentum2", "=", "0.9", ",", "teacher_momentum", "=", "0.996", ",", "\n", "lambda1", "=", "1.0", ",", "lambda2", "=", "1.0", ",", "\n", "norm_last_layer", "=", "False", ",", "norm_in_head", "=", "None", ",", "act_in_head", "=", "\"gelu\"", ",", "\n", "shared_head", "=", "True", ",", "shared_head_teacher", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "## init teacher and student", "\n", "self", ".", "teacher", "=", "teacher", "\n", "self", ".", "student", "=", "student", "\n", "\n", "self", ".", "backbone", "=", "self", ".", "teacher", "\n", "\n", "## ensure that the teacher and the student share the same weight", "\n", "msg", "=", "self", ".", "teacher", ".", "load_state_dict", "(", "self", ".", "student", ".", "state_dict", "(", ")", ",", "strict", "=", "False", ")", "\n", "print", "(", "\"data copying from student to teacher with msg: {}\"", ".", "format", "(", "msg", ")", ")", "\n", "for", "param_teacher", "in", "self", ".", "teacher", ".", "parameters", "(", ")", ":", "\n", "            ", "param_teacher", ".", "requires_grad", "=", "False", "\n", "\n", "", "embed_dim", "=", "self", ".", "student", ".", "embed_dim", "\n", "\n", "self", ".", "student", "=", "layers", ".", "MultiCropWrapper", "(", "student", ",", "layers", ".", "iBOTHead", "(", "\n", "embed_dim", ",", "out_dim", ",", "patch_out_dim", "=", "patch_out_dim", ",", "\n", "norm", "=", "norm_in_head", ",", "act", "=", "act_in_head", ",", "\n", "norm_last_layer", "=", "norm_last_layer", ",", "shared_head", "=", "shared_head", ",", "\n", ")", ")", "\n", "self", ".", "teacher", "=", "layers", ".", "MultiCropWrapper", "(", "\n", "teacher", ",", "layers", ".", "iBOTHead", "(", "\n", "embed_dim", ",", "out_dim", ",", "\n", "patch_out_dim", "=", "patch_out_dim", ",", "norm", "=", "norm_in_head", ",", "\n", "act", "=", "act_in_head", ",", "shared_head", "=", "shared_head_teacher", ",", "\n", ")", ",", "\n", ")", "\n", "\n", "# create hooks for the embeddings before and after projection", "\n", "self", ".", "entangled_dim", "=", "self", ".", "student", ".", "head", ".", "mlp", ".", "weight", ".", "shape", "[", "1", "]", "if", "isinstance", "(", "self", ".", "student", ".", "head", ".", "mlp", ",", "nn", ".", "Linear", ")", "else", "self", ".", "student", ".", "head", ".", "mlp", "[", "0", "]", ".", "weight", ".", "shape", "[", "1", "]", "\n", "self", ".", "inst_dim", "=", "self", ".", "student", ".", "head", ".", "mlp", ".", "weight", ".", "shape", "[", "0", "]", "if", "isinstance", "(", "self", ".", "student", ".", "head", ".", "mlp", ",", "nn", ".", "Linear", ")", "else", "self", ".", "student", ".", "head", ".", "mlp", "[", "-", "1", "]", ".", "weight", ".", "shape", "[", "0", "]", "\n", "self", ".", "_embeddings", "=", "{", "}", "\n", "def", "hook_function", "(", "module", ",", "input_emb", ",", "output_emb", ")", ":", "\n", "            ", "if", "isinstance", "(", "input_emb", ",", "tuple", ")", "and", "len", "(", "input_emb", ")", "==", "1", ":", "\n", "                ", "input_emb", "=", "input_emb", "[", "0", "]", "\n", "", "if", "isinstance", "(", "output_emb", ",", "tuple", ")", "and", "len", "(", "output_emb", ")", "==", "1", ":", "\n", "                ", "output_emb", "=", "output_emb", "[", "0", "]", "\n", "", "entangled_cls_emb", "=", "input_emb", "[", ":", ",", "0", "]", "\n", "entangled_mean_emb", "=", "torch", ".", "mean", "(", "input_emb", "[", ":", ",", "1", ":", "]", ",", "dim", "=", "1", ")", "\n", "inst_cls_emb", "=", "output_emb", "[", ":", ",", "0", "]", "\n", "inst_mean_emb", "=", "torch", ".", "mean", "(", "output_emb", "[", ":", ",", "1", ":", "]", ",", "dim", "=", "1", ")", "\n", "self", ".", "_embeddings", "[", "\"entangled_cls_emb\"", "]", "=", "entangled_cls_emb", "\n", "self", ".", "_embeddings", "[", "\"entangled_mean_emb\"", "]", "=", "entangled_mean_emb", "\n", "self", ".", "_embeddings", "[", "\"inst_cls_emb\"", "]", "=", "inst_cls_emb", "\n", "self", ".", "_embeddings", "[", "\"inst_mean_emb\"", "]", "=", "inst_mean_emb", "\n", "\n", "", "self", ".", "student", ".", "head", ".", "mlp", ".", "register_forward_hook", "(", "hook_function", ")", "\n", "\n", "self", ".", "student_temperature", "=", "student_temperature", "\n", "self", ".", "cls_temperature", "=", "cls_temperature", "\n", "self", ".", "patch_temperature", "=", "patch_temperature", "\n", "\n", "self", ".", "center_momentum", "=", "center_momentum", "\n", "self", ".", "center_momentum2", "=", "center_momentum2", "\n", "self", ".", "teacher_momentum", "=", "teacher_momentum", "\n", "\n", "self", ".", "global_crops_number", "=", "global_crops_number", "\n", "self", ".", "local_crops_number", "=", "local_crops_number", "\n", "self", ".", "ncrops", "=", "global_crops_number", "+", "local_crops_number", "\n", "self", ".", "register_buffer", "(", "\"center\"", ",", "torch", ".", "zeros", "(", "1", ",", "out_dim", ")", ")", "\n", "self", ".", "register_buffer", "(", "\"center2\"", ",", "torch", ".", "zeros", "(", "1", ",", "1", ",", "patch_out_dim", ")", ")", "\n", "self", ".", "lambda1", "=", "lambda1", "\n", "self", ".", "lambda2", "=", "lambda2", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.models.ibot.iBOT.get_loss": [[112, 152], ["torch.cat.chunk", "torch.cat.chunk", "torch.cat.chunk", "torch.cat.chunk", "student_patch.chunk", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "teacher_cls_c.detach().chunk.detach().chunk.detach().chunk", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "teacher_patch_c.detach().chunk.detach().chunk.detach().chunk", "range", "dict", "ibot.iBOT.update_center", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "range", "teacher_cls_c.detach().chunk.detach().chunk.detach", "teacher_patch_c.detach().chunk.detach().chunk.detach", "len", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "student_mask[].flatten", "torch.sum.mean", "torch.sum.mean", "torch.sum.mean", "torch.sum.mean", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum.mean", "torch.sum.mean", "torch.sum.mean", "torch.sum.mean", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "student_mask[].flatten.sum().clamp", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "student_mask[].flatten.float", "student_mask[].flatten.sum"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.models.ibot.iBOT.update_center"], ["", "def", "get_loss", "(", "self", ",", "student_output", ",", "teacher_output", ",", "student_local_cls", ",", "student_mask", ",", "\n", "cls_temperature", ",", "patch_temperature", ")", ":", "\n", "        ", "student_cls", ",", "student_patch", "=", "student_output", "\n", "teacher_cls", ",", "teacher_patch", "=", "teacher_output", "\n", "\n", "if", "student_local_cls", "is", "not", "None", ":", "\n", "            ", "student_cls", "=", "torch", ".", "cat", "(", "[", "student_cls", ",", "student_local_cls", "]", ")", "\n", "\n", "# [CLS] and patch for global patches", "\n", "", "student_cls", "=", "student_cls", "/", "self", ".", "student_temperature", "\n", "student_cls_c", "=", "student_cls", ".", "chunk", "(", "self", ".", "ncrops", ")", "\n", "student_patch", "=", "student_patch", "/", "self", ".", "student_temperature", "\n", "student_patch_c", "=", "student_patch", ".", "chunk", "(", "self", ".", "global_crops_number", ")", "\n", "\n", "\n", "teacher_cls_c", "=", "F", ".", "softmax", "(", "(", "teacher_cls", "-", "self", ".", "center", ")", "/", "cls_temperature", ",", "dim", "=", "-", "1", ")", "\n", "teacher_cls_c", "=", "teacher_cls_c", ".", "detach", "(", ")", ".", "chunk", "(", "self", ".", "global_crops_number", ")", "\n", "teacher_patch_c", "=", "F", ".", "softmax", "(", "(", "teacher_patch", "-", "self", ".", "center2", ")", "/", "patch_temperature", ",", "dim", "=", "-", "1", ")", "\n", "teacher_patch_c", "=", "teacher_patch_c", ".", "detach", "(", ")", ".", "chunk", "(", "self", ".", "global_crops_number", ")", "\n", "\n", "total_loss1", ",", "n_loss_terms1", "=", "0", ",", "0", "\n", "total_loss2", ",", "n_loss_terms2", "=", "0", ",", "0", "\n", "for", "q", "in", "range", "(", "len", "(", "teacher_cls_c", ")", ")", ":", "\n", "            ", "for", "v", "in", "range", "(", "len", "(", "student_cls_c", ")", ")", ":", "\n", "                ", "if", "v", "==", "q", ":", "\n", "                    ", "loss2", "=", "torch", ".", "sum", "(", "-", "teacher_patch_c", "[", "q", "]", "*", "F", ".", "log_softmax", "(", "student_patch_c", "[", "v", "]", ",", "dim", "=", "-", "1", ")", ",", "dim", "=", "-", "1", ")", "# [N, M] | N is batch size, M is number of patches", "\n", "mask", "=", "student_mask", "[", "v", "]", ".", "flatten", "(", "-", "2", ",", "-", "1", ")", "# [N, H, W] => [N, M]", "\n", "loss2", "=", "torch", ".", "sum", "(", "loss2", "*", "mask", ".", "float", "(", ")", ",", "dim", "=", "-", "1", ")", "/", "mask", ".", "sum", "(", "dim", "=", "-", "1", ")", ".", "clamp", "(", "min", "=", "1.0", ")", "\n", "total_loss2", "+=", "loss2", ".", "mean", "(", ")", "\n", "n_loss_terms2", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "loss1", "=", "torch", ".", "sum", "(", "-", "teacher_cls_c", "[", "q", "]", "*", "F", ".", "log_softmax", "(", "student_cls_c", "[", "v", "]", ",", "dim", "=", "-", "1", ")", ",", "dim", "=", "-", "1", ")", "\n", "total_loss1", "+=", "loss1", ".", "mean", "(", ")", "\n", "n_loss_terms1", "+=", "1", "\n", "\n", "", "", "", "total_loss1", "=", "total_loss1", "/", "n_loss_terms1", "*", "self", ".", "lambda1", "\n", "total_loss2", "=", "total_loss2", "/", "n_loss_terms2", "*", "self", ".", "lambda2", "\n", "total_loss", "=", "dict", "(", "cls", "=", "total_loss1", ",", "patch", "=", "total_loss2", ",", "loss", "=", "total_loss1", "+", "total_loss2", ")", "\n", "self", ".", "update_center", "(", "teacher_cls", ",", "teacher_patch", ")", "\n", "return", "total_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.models.ibot.iBOT.update_center": [[154, 165], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.all_reduce", "torch.all_reduce", "torch.all_reduce", "torch.all_reduce", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.all_reduce", "torch.all_reduce", "torch.all_reduce", "torch.all_reduce", "teacher_patch.mean", "len", "torch.get_world_size", "torch.get_world_size", "torch.get_world_size", "torch.get_world_size", "len", "torch.get_world_size", "torch.get_world_size", "torch.get_world_size", "torch.get_world_size"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_world_size", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_world_size", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_world_size", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_world_size", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_world_size", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_world_size", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_world_size", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_world_size"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "update_center", "(", "self", ",", "teacher_cls", ",", "teacher_patch", ")", ":", "\n", "        ", "cls_center", "=", "torch", ".", "sum", "(", "teacher_cls", ",", "dim", "=", "0", ",", "keepdim", "=", "True", ")", "\n", "dist", ".", "all_reduce", "(", "cls_center", ")", "\n", "cls_center", "=", "cls_center", "/", "(", "len", "(", "teacher_cls", ")", "*", "dist", ".", "get_world_size", "(", ")", ")", "\n", "self", ".", "center", "=", "self", ".", "center", "*", "self", ".", "center_momentum", "+", "cls_center", "*", "(", "1", "-", "self", ".", "center_momentum", ")", "\n", "\n", "patch_center", "=", "torch", ".", "sum", "(", "teacher_patch", ".", "mean", "(", "1", ")", ",", "dim", "=", "0", ",", "keepdim", "=", "True", ")", "\n", "dist", ".", "all_reduce", "(", "patch_center", ")", "\n", "patch_center", "=", "patch_center", "/", "(", "len", "(", "teacher_patch", ")", "*", "dist", ".", "get_world_size", "(", ")", ")", "\n", "self", ".", "center2", "=", "self", ".", "center2", "*", "self", ".", "center_momentum2", "+", "patch_center", "*", "(", "1", "-", "self", ".", "center_momentum2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.models.ibot.iBOT.momentum_update_teacher": [[166, 184], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "student.named_parameters", "teacher.named_parameters", "list", "zip", "isinstance", "isinstance", "names_q.append", "params_q.append", "names_k.append", "params_k.append", "param_k.data.mul_().add_", "set", "set", "zip", "zip", "param_k.data.mul_", "param_q.detach"], "methods", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "momentum_update_teacher", "(", "self", ",", "momentum", "=", "None", ")", ":", "\n", "        ", "m", "=", "momentum", "if", "momentum", "is", "not", "None", "else", "self", ".", "teacher_momentum", "\n", "student", "=", "self", ".", "student", ".", "module", "if", "isinstance", "(", "self", ".", "student", ",", "DistributedDataParallel", ")", "else", "self", ".", "student", "\n", "teacher", "=", "self", ".", "teacher", ".", "module", "if", "isinstance", "(", "self", ".", "teacher", ",", "DistributedDataParallel", ")", "else", "self", ".", "teacher", "\n", "\n", "names_q", ",", "params_q", ",", "names_k", ",", "params_k", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "name_q", ",", "param_q", "in", "student", ".", "named_parameters", "(", ")", ":", "\n", "            ", "names_q", ".", "append", "(", "name_q", ")", "\n", "params_q", ".", "append", "(", "param_q", ")", "\n", "", "for", "name_k", ",", "param_k", "in", "teacher", ".", "named_parameters", "(", ")", ":", "\n", "            ", "names_k", ".", "append", "(", "name_k", ")", "\n", "params_k", ".", "append", "(", "param_k", ")", "\n", "", "names_common", "=", "list", "(", "set", "(", "names_q", ")", "&", "set", "(", "names_k", ")", ")", "\n", "params_q", "=", "[", "param_q", "for", "name_q", ",", "param_q", "in", "zip", "(", "names_q", ",", "params_q", ")", "if", "name_q", "in", "names_common", "]", "\n", "params_k", "=", "[", "param_k", "for", "name_k", ",", "param_k", "in", "zip", "(", "names_k", ",", "params_k", ")", "if", "name_k", "in", "names_common", "]", "\n", "for", "param_q", ",", "param_k", "in", "zip", "(", "params_q", ",", "params_k", ")", ":", "\n", "            ", "param_k", ".", "data", ".", "mul_", "(", "m", ")", ".", "add_", "(", "(", "1", "-", "m", ")", "*", "param_q", ".", "detach", "(", ")", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.models.ibot.iBOT.forward_feature": [[185, 188], ["ibot.iBOT.teacher.backbone", "ibot.iBOT.teacher.head.mlp"], "methods", ["None"], ["", "", "def", "forward_feature", "(", "self", ",", "images", ")", ":", "\n", "        ", "feature", "=", "self", ".", "teacher", ".", "backbone", "(", "images", ")", "\n", "return", "self", ".", "teacher", ".", "head", ".", "mlp", "(", "feature", ")", "[", ":", ",", "0", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.models.ibot.iBOT.forward": [[189, 247], ["ibot.iBOT.momentum_update_teacher", "ibot.iBOT.teacher", "ibot.iBOT.student", "collections.defaultdict", "ibot.iBOT._embeddings.items", "ibot.iBOT.get_loss", "ibot.iBOT.update", "embedding_dict[].append", "len", "ibot.iBOT._embeddings.items", "ibot.iBOT.student", "embedding_dict[].extend", "teacher_output[].chunk", "student_output[].chunk", "list", "v.chunk"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.models.ibot.iBOT.momentum_update_teacher", "home.repos.pwc.inspect_result.hirl-team_hirl.models.ibot.iBOT.get_loss", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.AverageMeter.update"], ["", "def", "forward", "(", "self", ",", "imgs", ",", "masks", "=", "None", ",", "global_crops_number", "=", "None", ",", "\n", "cls_temperature", "=", "None", ",", "patch_temperature", "=", "None", ",", "return_hooks", "=", "False", ",", "\n", "teacher_momentum", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Given a list of images and corresponding masks, compute cross-view \n        cluster assignment prediction loss and masked patch prediction loss.\n\n        Args:\n            imgs (list of torch.Tensor [N,C,H,W]): image tensors.\n            masks (list of torch.Tensor [N,C,H,W]): mask tensors.\n            global_crops_number (int, optional): number of global crops. Use \n                self.global_crops_number if set as None. (default: None)\n            cls_temperature (float, optional) temperature on teacher cls token output. \n                Use self.cls_temperature if set as None. (default: None)\n            return_hooks (bool): whether return the hidden output by hook function. (default: False)\n            teacher_momentum (float, optional): momentum for teacher network update.\n                Use self.teacher_momentum if set as None. (default: None)\n\n        Returns:\n            output_dict: dict with the following fields:\n                ``loss`` (torch.Tensor [1,]): loss for backward.\n                ``probs_teacher`` (list of torch.Tensor [N, C]): teacher output indicating the \n                    \"probability\" of cluster assignment.\n                ``probs_student`` (list of torch.Tensor [N, C]): student output indicating the \n                    \"probability\" of cluster assignment.\n                ``embeddings``: dict used for further loss computation in hirl.\n        \"\"\"", "\n", "## momentumly update teacher", "\n", "self", ".", "momentum_update_teacher", "(", "teacher_momentum", ")", "\n", "\n", "global_crops_number", "=", "global_crops_number", "if", "global_crops_number", "is", "not", "None", "else", "self", ".", "global_crops_number", "\n", "teacher_output", "=", "self", ".", "teacher", "(", "imgs", "[", ":", "global_crops_number", "]", ")", "\n", "student_output", "=", "self", ".", "student", "(", "imgs", "[", ":", "global_crops_number", "]", ",", "\n", "mask", "=", "masks", "[", ":", "global_crops_number", "]", ")", "\n", "\n", "embedding_dict", "=", "defaultdict", "(", "list", ")", "\n", "batch_size", "=", "imgs", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "for", "k", ",", "v", "in", "self", ".", "_embeddings", ".", "items", "(", ")", ":", "\n", "            ", "embedding_dict", "[", "k", "]", ".", "append", "(", "v", "[", ":", "batch_size", "]", ")", "\n", "\n", "", "if", "len", "(", "imgs", ")", ">", "global_crops_number", ":", "\n", "            ", "student_local_cls", "=", "self", ".", "student", "(", "imgs", "[", "global_crops_number", ":", "]", ",", "mask", "=", "None", ")", "[", "0", "]", "\n", "for", "k", ",", "v", "in", "self", ".", "_embeddings", ".", "items", "(", ")", ":", "\n", "                ", "embedding_dict", "[", "k", "]", ".", "extend", "(", "list", "(", "v", ".", "chunk", "(", "self", ".", "local_crops_number", ")", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "student_local_cls", "=", "None", "\n", "\n", "", "cls_temperature", "=", "cls_temperature", "if", "cls_temperature", "is", "not", "None", "else", "self", ".", "cls_temperature", "\n", "patch_temperature", "=", "patch_temperature", "if", "patch_temperature", "is", "not", "None", "else", "self", ".", "patch_temperature", "\n", "\n", "output_dict", "=", "self", ".", "get_loss", "(", "student_output", ",", "teacher_output", ",", "student_local_cls", ",", "\n", "masks", ",", "cls_temperature", ",", "patch_temperature", ")", "\n", "output_dict", ".", "update", "(", "{", "\"probs_teacher\"", ":", "teacher_output", "[", "0", "]", ".", "chunk", "(", "global_crops_number", ")", ",", "\n", "\"probs_student\"", ":", "student_output", "[", "0", "]", ".", "chunk", "(", "global_crops_number", ")", "}", ")", "\n", "if", "return_hooks", ":", "\n", "            ", "output_dict", "[", "\"embeddings\"", "]", "=", "embedding_dict", "\n", "\n", "", "return", "output_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.models.ibot.ibot_vit_small": [[248, 254], ["vit_small", "vit_small", "ibot.iBOT"], "function", ["home.repos.pwc.inspect_result.hirl-team_hirl.backbones.vision_transformer.vit_small", "home.repos.pwc.inspect_result.hirl-team_hirl.backbones.vision_transformer.vit_small"], ["", "", "def", "ibot_vit_small", "(", "drop_path_rate", ",", "masked_im_modeling", ",", "**", "kwargs", ")", ":", "\n", "    ", "student", "=", "vit_small", "(", "patch_size", "=", "16", ",", "return_all_tokens", "=", "True", ",", "\n", "drop_path_rate", "=", "drop_path_rate", ",", "masked_im_modeling", "=", "masked_im_modeling", ")", "\n", "teacher", "=", "vit_small", "(", "patch_size", "=", "16", ",", "return_all_tokens", "=", "True", ")", "\n", "model", "=", "iBOT", "(", "teacher", ",", "student", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.models.ibot.ibot_vit_base": [[255, 261], ["vit_base", "vit_base", "ibot.iBOT"], "function", ["home.repos.pwc.inspect_result.hirl-team_hirl.backbones.vision_transformer.vit_base", "home.repos.pwc.inspect_result.hirl-team_hirl.backbones.vision_transformer.vit_base"], ["", "def", "ibot_vit_base", "(", "drop_path_rate", ",", "masked_im_modeling", ",", "**", "kwargs", ")", ":", "\n", "    ", "student", "=", "vit_base", "(", "patch_size", "=", "16", ",", "return_all_tokens", "=", "True", ",", "\n", "drop_path_rate", "=", "drop_path_rate", ",", "masked_im_modeling", "=", "masked_im_modeling", ")", "\n", "teacher", "=", "vit_base", "(", "patch_size", "=", "16", ",", "return_all_tokens", "=", "True", ")", "\n", "model", "=", "iBOT", "(", "teacher", ",", "student", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.models.ibot.ibot_vit_large": [[262, 268], ["vit_large", "vit_large", "ibot.iBOT"], "function", ["home.repos.pwc.inspect_result.hirl-team_hirl.backbones.vision_transformer.vit_large", "home.repos.pwc.inspect_result.hirl-team_hirl.backbones.vision_transformer.vit_large"], ["", "def", "ibot_vit_large", "(", "drop_path_rate", ",", "masked_im_modeling", ",", "**", "kwargs", ")", ":", "\n", "    ", "student", "=", "vit_large", "(", "patch_size", "=", "16", ",", "return_all_tokens", "=", "True", ",", "\n", "drop_path_rate", "=", "drop_path_rate", ",", "masked_im_modeling", "=", "masked_im_modeling", ")", "\n", "teacher", "=", "vit_large", "(", "patch_size", "=", "16", ",", "return_all_tokens", "=", "True", ")", "\n", "model", "=", "iBOT", "(", "teacher", ",", "student", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.backbones.vision_transformer.DropPath.__init__": [[26, 29], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.pretrain.dino.DINORunner.__init__"], ["def", "__init__", "(", "self", ",", "drop_prob", "=", "None", ")", ":", "\n", "        ", "super", "(", "DropPath", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "drop_prob", "=", "drop_prob", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.backbones.vision_transformer.DropPath.forward": [[30, 32], ["vision_transformer.drop_path"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.backbones.vision_transformer.drop_path"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "drop_path", "(", "x", ",", "self", ".", "drop_prob", ",", "self", ".", "training", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.backbones.vision_transformer.Mlp.__init__": [[35, 43], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "act_layer", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.pretrain.dino.DINORunner.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "hidden_features", "=", "None", ",", "out_features", "=", "None", ",", "act_layer", "=", "nn", ".", "GELU", ",", "drop", "=", "0.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "out_features", "=", "out_features", "or", "in_features", "\n", "hidden_features", "=", "hidden_features", "or", "in_features", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "in_features", ",", "hidden_features", ")", "\n", "self", ".", "act", "=", "act_layer", "(", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "hidden_features", ",", "out_features", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "drop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.backbones.vision_transformer.Mlp.forward": [[44, 51], ["vision_transformer.Mlp.fc1", "vision_transformer.Mlp.act", "vision_transformer.Mlp.drop", "vision_transformer.Mlp.fc2", "vision_transformer.Mlp.drop"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "self", ".", "act", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.backbones.vision_transformer.Attention.__init__": [[54, 64], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.pretrain.dino.DINORunner.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "num_heads", "=", "8", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "attn_drop", "=", "0.", ",", "proj_drop", "=", "0.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "head_dim", "=", "dim", "//", "num_heads", "\n", "self", ".", "scale", "=", "qk_scale", "or", "head_dim", "**", "-", "0.5", "\n", "\n", "self", ".", "qkv", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", "*", "3", ",", "bias", "=", "qkv_bias", ")", "\n", "self", ".", "attn_drop", "=", "nn", ".", "Dropout", "(", "attn_drop", ")", "\n", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ")", "\n", "self", ".", "proj_drop", "=", "nn", ".", "Dropout", "(", "proj_drop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.backbones.vision_transformer.Attention.forward": [[65, 78], ["vision_transformer.Attention.qkv().reshape().permute", "vision_transformer.Attention.softmax", "vision_transformer.Attention.attn_drop", "vision_transformer.Attention.proj", "vision_transformer.Attention.proj_drop", "vision_transformer.Attention.qkv().reshape", "k.transpose", "vision_transformer.Attention.qkv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "B", ",", "N", ",", "C", "=", "x", ".", "shape", "\n", "qkv", "=", "self", ".", "qkv", "(", "x", ")", ".", "reshape", "(", "B", ",", "N", ",", "3", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "2", ",", "0", ",", "3", ",", "1", ",", "4", ")", "\n", "q", ",", "k", ",", "v", "=", "qkv", "[", "0", "]", ",", "qkv", "[", "1", "]", ",", "qkv", "[", "2", "]", "\n", "\n", "attn", "=", "(", "q", "@", "k", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", "*", "self", ".", "scale", "\n", "attn", "=", "attn", ".", "softmax", "(", "dim", "=", "-", "1", ")", "\n", "attn", "=", "self", ".", "attn_drop", "(", "attn", ")", "\n", "\n", "x", "=", "(", "attn", "@", "v", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "B", ",", "N", ",", "C", ")", "\n", "x", "=", "self", ".", "proj", "(", "x", ")", "\n", "x", "=", "self", ".", "proj_drop", "(", "x", ")", "\n", "return", "x", ",", "attn", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.backbones.vision_transformer.Block.__init__": [[81, 97], ["torch.Module.__init__", "norm_layer", "vision_transformer.Attention", "norm_layer", "int", "vision_transformer.Mlp", "vision_transformer.DropPath", "torch.Identity", "torch.Identity", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.pretrain.dino.DINORunner.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "num_heads", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop", "=", "0.", ",", "\n", "attn_drop", "=", "0.", ",", "drop_path", "=", "0.", ",", "act_layer", "=", "nn", ".", "GELU", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ",", "init_values", "=", "0", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm1", "=", "norm_layer", "(", "dim", ")", "\n", "self", ".", "attn", "=", "Attention", "(", "\n", "dim", ",", "num_heads", "=", "num_heads", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "attn_drop", "=", "attn_drop", ",", "proj_drop", "=", "drop", ")", "\n", "self", ".", "drop_path", "=", "DropPath", "(", "drop_path", ")", "if", "drop_path", ">", "0.", "else", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "norm2", "=", "norm_layer", "(", "dim", ")", "\n", "mlp_hidden_dim", "=", "int", "(", "dim", "*", "mlp_ratio", ")", "\n", "self", ".", "mlp", "=", "Mlp", "(", "in_features", "=", "dim", ",", "hidden_features", "=", "mlp_hidden_dim", ",", "act_layer", "=", "act_layer", ",", "drop", "=", "drop", ")", "\n", "\n", "if", "init_values", ">", "0", ":", "\n", "            ", "self", ".", "gamma_1", "=", "nn", ".", "Parameter", "(", "init_values", "*", "torch", ".", "ones", "(", "(", "dim", ")", ")", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "gamma_2", "=", "nn", ".", "Parameter", "(", "init_values", "*", "torch", ".", "ones", "(", "(", "dim", ")", ")", ",", "requires_grad", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "gamma_1", ",", "self", ".", "gamma_2", "=", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.backbones.vision_transformer.Block.forward": [[98, 109], ["vision_transformer.Block.attn", "vision_transformer.Block.norm1", "vision_transformer.Block.drop_path", "vision_transformer.Block.drop_path", "vision_transformer.Block.drop_path", "vision_transformer.Block.drop_path", "vision_transformer.Block.mlp", "vision_transformer.Block.norm2", "vision_transformer.Block.mlp", "vision_transformer.Block.norm2"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.backbones.vision_transformer.drop_path", "home.repos.pwc.inspect_result.hirl-team_hirl.backbones.vision_transformer.drop_path", "home.repos.pwc.inspect_result.hirl-team_hirl.backbones.vision_transformer.drop_path", "home.repos.pwc.inspect_result.hirl-team_hirl.backbones.vision_transformer.drop_path"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "return_attention", "=", "False", ")", ":", "\n", "        ", "y", ",", "attn", "=", "self", ".", "attn", "(", "self", ".", "norm1", "(", "x", ")", ")", "\n", "if", "return_attention", ":", "\n", "            ", "return", "attn", "\n", "", "if", "self", ".", "gamma_1", "is", "None", ":", "\n", "            ", "x", "=", "x", "+", "self", ".", "drop_path", "(", "y", ")", "\n", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "mlp", "(", "self", ".", "norm2", "(", "x", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "gamma_1", "*", "y", ")", "\n", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "gamma_2", "*", "self", ".", "mlp", "(", "self", ".", "norm2", "(", "x", ")", ")", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.backbones.vision_transformer.PatchEmbed.__init__": [[115, 127], ["torch.Module.__init__", "timm.models.layers.helpers.to_2tuple", "timm.models.layers.helpers.to_2tuple", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.Identity", "torch.Identity"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.pretrain.dino.DINORunner.__init__"], ["def", "__init__", "(", "self", ",", "img_size", "=", "224", ",", "patch_size", "=", "16", ",", "in_chans", "=", "3", ",", "embed_dim", "=", "768", ",", "norm_layer", "=", "None", ",", "flatten", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "img_size", "=", "to_2tuple", "(", "img_size", ")", "\n", "patch_size", "=", "to_2tuple", "(", "patch_size", ")", "\n", "self", ".", "img_size", "=", "img_size", "\n", "self", ".", "patch_size", "=", "patch_size", "\n", "self", ".", "grid_size", "=", "(", "img_size", "[", "0", "]", "//", "patch_size", "[", "0", "]", ",", "img_size", "[", "1", "]", "//", "patch_size", "[", "1", "]", ")", "\n", "self", ".", "num_patches", "=", "self", ".", "grid_size", "[", "0", "]", "*", "self", ".", "grid_size", "[", "1", "]", "\n", "self", ".", "flatten", "=", "flatten", "\n", "\n", "self", ".", "proj", "=", "nn", ".", "Conv2d", "(", "in_chans", ",", "embed_dim", ",", "kernel_size", "=", "patch_size", ",", "stride", "=", "patch_size", ")", "\n", "self", ".", "norm", "=", "norm_layer", "(", "embed_dim", ")", "if", "norm_layer", "else", "nn", ".", "Identity", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.backbones.vision_transformer.PatchEmbed.forward": [[128, 135], ["vision_transformer.PatchEmbed.proj", "vision_transformer.PatchEmbed.norm", "x.flatten().transpose.flatten().transpose.flatten().transpose", "x.flatten().transpose.flatten().transpose.flatten"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "B", ",", "C", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "x", "=", "self", ".", "proj", "(", "x", ")", "\n", "if", "self", ".", "flatten", ":", "\n", "            ", "x", "=", "x", ".", "flatten", "(", "2", ")", ".", "transpose", "(", "1", ",", "2", ")", "# BCHW -> BNC", "\n", "", "x", "=", "self", ".", "norm", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.backbones.vision_transformer.VisionTransformer.__init__": [[138, 188], ["functools.partial", "torch.Module.__init__", "embed_layer", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Dropout", "torch.Dropout", "torch.ModuleList", "torch.ModuleList", "hirl.utils.misc.trunc_normal_", "hirl.utils.misc.trunc_normal_", "vision_transformer.VisionTransformer.apply", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "x.item", "torch.Identity", "torch.Identity", "norm_layer", "norm_layer", "torch.Linear", "torch.Linear", "torch.Identity", "torch.Identity", "torch.Parameter", "torch.Parameter", "vision_transformer.VisionTransformer.build_2d_sincos_position_embedding", "vision_transformer.VisionTransformer._mocov3_weight_init", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "vision_transformer.Block", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.pretrain.dino.DINORunner.__init__", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.trunc_normal_", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.trunc_normal_", "home.repos.pwc.inspect_result.hirl-team_hirl.backbones.vision_transformer.VisionTransformer.build_2d_sincos_position_embedding", "home.repos.pwc.inspect_result.hirl-team_hirl.backbones.vision_transformer.VisionTransformer._mocov3_weight_init"], ["def", "__init__", "(", "self", ",", "img_size", "=", "[", "224", "]", ",", "patch_size", "=", "16", ",", "in_chans", "=", "3", ",", "num_classes", "=", "0", ",", "embed_dim", "=", "768", ",", "depth", "=", "12", ",", "\n", "num_heads", "=", "12", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop_rate", "=", "0.", ",", "attn_drop_rate", "=", "0.", ",", "\n", "drop_path_rate", "=", "0.", ",", "embed_layer", "=", "PatchEmbed", ",", "norm_layer", "=", "partial", "(", "nn", ".", "LayerNorm", ",", "eps", "=", "1e-6", ")", ",", "return_all_tokens", "=", "False", ",", "\n", "init_values", "=", "0", ",", "use_mean_pooling", "=", "False", ",", "masked_im_modeling", "=", "False", ",", "use_head", "=", "False", ",", "\n", "sincos_pos_emb", "=", "False", ",", "mocov3_init", "=", "False", ",", "random_patch_projection", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_features", "=", "self", ".", "embed_dim", "=", "embed_dim", "\n", "self", ".", "return_all_tokens", "=", "return_all_tokens", "\n", "self", ".", "in_chans", "=", "in_chans", "\n", "self", ".", "patch_embed", "=", "embed_layer", "(", "\n", "img_size", "=", "img_size", "[", "0", "]", ",", "patch_size", "=", "patch_size", ",", "in_chans", "=", "in_chans", ",", "embed_dim", "=", "embed_dim", ")", "\n", "num_patches", "=", "self", ".", "patch_embed", ".", "num_patches", "\n", "\n", "self", ".", "cls_token", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "1", ",", "embed_dim", ")", ")", "\n", "self", ".", "pos_embed", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "num_patches", "+", "1", ",", "embed_dim", ")", ")", "\n", "self", ".", "pos_drop", "=", "nn", ".", "Dropout", "(", "p", "=", "drop_rate", ")", "\n", "\n", "dpr", "=", "[", "x", ".", "item", "(", ")", "for", "x", "in", "torch", ".", "linspace", "(", "0", ",", "drop_path_rate", ",", "depth", ")", "]", "# stochastic depth decay rule", "\n", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", "[", "\n", "Block", "(", "\n", "dim", "=", "embed_dim", ",", "num_heads", "=", "num_heads", ",", "mlp_ratio", "=", "mlp_ratio", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "attn_drop", "=", "attn_drop_rate", ",", "drop_path", "=", "dpr", "[", "i", "]", ",", "norm_layer", "=", "norm_layer", ",", "\n", "init_values", "=", "init_values", ")", "\n", "for", "i", "in", "range", "(", "depth", ")", "]", ")", "\n", "\n", "self", ".", "use_mean_embedding", "=", "use_mean_pooling", "\n", "self", ".", "norm", "=", "nn", ".", "Identity", "(", ")", "if", "use_mean_pooling", "else", "norm_layer", "(", "embed_dim", ")", "\n", "self", ".", "fc_norm", "=", "norm_layer", "(", "embed_dim", ")", "if", "use_mean_pooling", "else", "None", "\n", "# Classifier head", "\n", "self", ".", "head", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "num_classes", ")", "if", "num_classes", ">", "0", "else", "nn", ".", "Identity", "(", ")", "\n", "\n", "trunc_normal_", "(", "self", ".", "pos_embed", ",", "std", "=", ".02", ")", "\n", "trunc_normal_", "(", "self", ".", "cls_token", ",", "std", "=", ".02", ")", "\n", "self", ".", "apply", "(", "self", ".", "_init_weights", ")", "\n", "\n", "# masked image modeling", "\n", "self", ".", "masked_im_modeling", "=", "masked_im_modeling", "\n", "if", "masked_im_modeling", ":", "\n", "            ", "self", ".", "masked_embed", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "embed_dim", ")", ")", "\n", "\n", "# head usage", "\n", "", "self", ".", "use_head", "=", "use_head", "\n", "\n", "# positional embedding with sin and cos", "\n", "if", "sincos_pos_emb", ":", "\n", "            ", "self", ".", "build_2d_sincos_position_embedding", "(", ")", "\n", "\n", "# weight initialization following MoCo v3", "\n", "", "if", "mocov3_init", ":", "\n", "            ", "self", ".", "_mocov3_weight_init", "(", "random_patch_projection", "=", "random_patch_projection", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.backbones.vision_transformer.VisionTransformer._init_weights": [[189, 197], ["isinstance", "hirl.utils.misc.trunc_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.trunc_normal_"], ["", "", "def", "_init_weights", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "trunc_normal_", "(", "m", ".", "weight", ",", "std", "=", ".02", ")", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.backbones.vision_transformer.VisionTransformer._mocov3_weight_init": [[198, 220], ["vision_transformer.VisionTransformer.named_modules", "torch.init.normal_", "torch.init.normal_", "isinstance", "isinstance", "math.sqrt", "torch.init.uniform_", "torch.init.uniform_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "print", "math.sqrt", "torch.init.uniform_", "torch.init.uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "float", "float", "functools.reduce"], "methods", ["None"], ["", "", "def", "_mocov3_weight_init", "(", "self", ",", "random_patch_projection", "=", "True", ")", ":", "\n", "        ", "for", "name", ",", "m", "in", "self", ".", "named_modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "if", "'qkv'", "in", "name", ":", "\n", "# treat the weights of Q, K, V separately", "\n", "                    ", "val", "=", "math", ".", "sqrt", "(", "6.", "/", "float", "(", "m", ".", "weight", ".", "shape", "[", "0", "]", "//", "3", "+", "m", ".", "weight", ".", "shape", "[", "1", "]", ")", ")", "\n", "nn", ".", "init", ".", "uniform_", "(", "m", ".", "weight", ",", "-", "val", ",", "val", ")", "\n", "", "else", ":", "\n", "                    ", "nn", ".", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ")", "\n", "", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "", "", "nn", ".", "init", ".", "normal_", "(", "self", ".", "cls_token", ",", "std", "=", "1e-6", ")", "\n", "\n", "if", "isinstance", "(", "self", ".", "patch_embed", ",", "PatchEmbed", ")", ":", "\n", "# xavier_uniform initialization", "\n", "            ", "val", "=", "math", ".", "sqrt", "(", "6.", "/", "float", "(", "3", "*", "reduce", "(", "mul", ",", "self", ".", "patch_embed", ".", "patch_size", ",", "1", ")", "+", "self", ".", "embed_dim", ")", ")", "\n", "nn", ".", "init", ".", "uniform_", "(", "self", ".", "patch_embed", ".", "proj", ".", "weight", ",", "-", "val", ",", "val", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "self", ".", "patch_embed", ".", "proj", ".", "bias", ")", "\n", "if", "random_patch_projection", ":", "\n", "                ", "self", ".", "patch_embed", ".", "proj", ".", "weight", ".", "requires_grad", "=", "False", "\n", "self", ".", "patch_embed", ".", "proj", ".", "bias", ".", "requires_grad", "=", "False", "\n", "", "else", ":", "\n", "                ", "print", "(", "\"random patch projection is off!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.backbones.vision_transformer.VisionTransformer.interpolate_pos_encoding": [[221, 244], ["torch.functional.interpolate", "torch.functional.interpolate", "patch_pos_embed.permute().view.permute().view.permute().view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "isinstance", "patch_pos_embed.permute().view.permute().view.reshape().permute", "int", "int", "patch_pos_embed.permute().view.permute().view.permute", "class_pos_embed.unsqueeze", "patch_pos_embed.permute().view.permute().view.reshape", "int", "int", "math.sqrt", "math.sqrt", "math.sqrt", "math.sqrt"], "methods", ["None"], ["", "", "", "def", "interpolate_pos_encoding", "(", "self", ",", "x", ",", "w", ",", "h", ")", ":", "\n", "        ", "patch_size", "=", "self", ".", "patch_embed", ".", "patch_size", "\n", "patch_size", "=", "patch_size", "[", "0", "]", "if", "isinstance", "(", "patch_size", ",", "tuple", ")", "else", "patch_size", "\n", "npatch", "=", "x", ".", "shape", "[", "1", "]", "-", "1", "\n", "N", "=", "self", ".", "pos_embed", ".", "shape", "[", "1", "]", "-", "1", "\n", "if", "npatch", "==", "N", "and", "w", "==", "h", ":", "\n", "            ", "return", "self", ".", "pos_embed", "\n", "", "class_pos_embed", "=", "self", ".", "pos_embed", "[", ":", ",", "0", "]", "\n", "patch_pos_embed", "=", "self", ".", "pos_embed", "[", ":", ",", "1", ":", "]", "\n", "dim", "=", "x", ".", "shape", "[", "-", "1", "]", "\n", "w0", "=", "w", "//", "patch_size", "\n", "h0", "=", "h", "//", "patch_size", "\n", "# we add a small number to avoid floating point error in the interpolation", "\n", "# see discussion at https://github.com/facebookresearch/dino/issues/8", "\n", "w0", ",", "h0", "=", "w0", "+", "0.1", ",", "h0", "+", "0.1", "\n", "patch_pos_embed", "=", "nn", ".", "functional", ".", "interpolate", "(", "\n", "patch_pos_embed", ".", "reshape", "(", "1", ",", "int", "(", "math", ".", "sqrt", "(", "N", ")", ")", ",", "int", "(", "math", ".", "sqrt", "(", "N", ")", ")", ",", "dim", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ",", "\n", "scale_factor", "=", "(", "w0", "/", "math", ".", "sqrt", "(", "N", ")", ",", "h0", "/", "math", ".", "sqrt", "(", "N", ")", ")", ",", "\n", "mode", "=", "'bicubic'", ",", "\n", ")", "\n", "assert", "int", "(", "w0", ")", "==", "patch_pos_embed", ".", "shape", "[", "-", "2", "]", "and", "int", "(", "h0", ")", "==", "patch_pos_embed", ".", "shape", "[", "-", "1", "]", "\n", "patch_pos_embed", "=", "patch_pos_embed", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "view", "(", "1", ",", "-", "1", ",", "dim", ")", "\n", "return", "torch", ".", "cat", "(", "(", "class_pos_embed", ".", "unsqueeze", "(", "0", ")", ",", "patch_pos_embed", ")", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.backbones.vision_transformer.VisionTransformer.build_2d_sincos_position_embedding": [[245, 262], ["torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.Parameter", "torch.Parameter", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.arange.flatten", "torch.arange.flatten", "torch.arange.flatten", "torch.arange.flatten", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.cos", "torch.cos", "torch.cos", "torch.cos"], "methods", ["None"], ["", "def", "build_2d_sincos_position_embedding", "(", "self", ",", "temperature", "=", "10000.", ")", ":", "\n", "        ", "h", ",", "w", "=", "self", ".", "patch_embed", ".", "grid_size", "\n", "grid_w", "=", "torch", ".", "arange", "(", "w", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "grid_h", "=", "torch", ".", "arange", "(", "h", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "grid_w", ",", "grid_h", "=", "torch", ".", "meshgrid", "(", "grid_w", ",", "grid_h", ")", "\n", "assert", "self", ".", "embed_dim", "%", "4", "==", "0", ",", "'Embed dimension must be divisible by 4 for 2D sin-cos position embedding'", "\n", "pos_dim", "=", "self", ".", "embed_dim", "//", "4", "\n", "omega", "=", "torch", ".", "arange", "(", "pos_dim", ",", "dtype", "=", "torch", ".", "float32", ")", "/", "pos_dim", "\n", "omega", "=", "1.", "/", "(", "temperature", "**", "omega", ")", "\n", "out_w", "=", "torch", ".", "einsum", "(", "'m,d->md'", ",", "[", "grid_w", ".", "flatten", "(", ")", ",", "omega", "]", ")", "\n", "out_h", "=", "torch", ".", "einsum", "(", "'m,d->md'", ",", "[", "grid_h", ".", "flatten", "(", ")", ",", "omega", "]", ")", "\n", "pos_emb", "=", "torch", ".", "cat", "(", "[", "torch", ".", "sin", "(", "out_w", ")", ",", "torch", ".", "cos", "(", "out_w", ")", ",", "torch", ".", "sin", "(", "out_h", ")", ",", "torch", ".", "cos", "(", "out_h", ")", "]", ",", "dim", "=", "1", ")", "[", "None", ",", ":", ",", ":", "]", "\n", "\n", "# assert self.num_tokens == 1, 'Assuming one and only one token, [cls]'", "\n", "pe_token", "=", "torch", ".", "zeros", "(", "[", "1", ",", "1", ",", "self", ".", "embed_dim", "]", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "self", ".", "pos_embed", "=", "nn", ".", "Parameter", "(", "torch", ".", "cat", "(", "[", "pe_token", ",", "pos_emb", "]", ",", "dim", "=", "1", ")", ")", "\n", "self", ".", "pos_embed", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.backbones.vision_transformer.VisionTransformer.prepare_tokens": [[263, 281], ["vision_transformer.VisionTransformer.patch_embed", "vision_transformer.VisionTransformer.flatten().transpose", "vision_transformer.VisionTransformer.cls_token.expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "vision_transformer.VisionTransformer.pos_drop", "vision_transformer.VisionTransformer.mask_model", "vision_transformer.VisionTransformer.interpolate_pos_encoding", "vision_transformer.VisionTransformer.flatten"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.backbones.vision_transformer.VisionTransformer.mask_model", "home.repos.pwc.inspect_result.hirl-team_hirl.backbones.vision_transformer.VisionTransformer.interpolate_pos_encoding"], ["", "def", "prepare_tokens", "(", "self", ",", "x", ",", "mask", "=", "None", ")", ":", "\n", "        ", "B", ",", "nc", ",", "w", ",", "h", "=", "x", ".", "shape", "\n", "# patch linear embedding", "\n", "x", "=", "self", ".", "patch_embed", "(", "x", ")", "\n", "\n", "# mask image modeling", "\n", "if", "mask", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "mask_model", "(", "x", ",", "mask", ")", "\n", "", "x", "=", "x", ".", "flatten", "(", "2", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n", "# add the [CLS] token to the embed patch tokens", "\n", "cls_tokens", "=", "self", ".", "cls_token", ".", "expand", "(", "B", ",", "-", "1", ",", "-", "1", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "cls_tokens", ",", "x", ")", ",", "dim", "=", "1", ")", "\n", "\n", "# add positional encoding to each token", "\n", "x", "=", "x", "+", "self", ".", "interpolate_pos_encoding", "(", "x", ",", "w", ",", "h", ")", "\n", "\n", "return", "self", ".", "pos_drop", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.backbones.vision_transformer.VisionTransformer.forward": [[282, 303], ["vision_transformer.VisionTransformer.prepare_tokens", "blk", "vision_transformer.VisionTransformer.fc_norm", "vision_transformer.VisionTransformer.norm", "vision_transformer.VisionTransformer.head", "x[].mean"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.backbones.vision_transformer.VisionTransformer.prepare_tokens"], ["", "def", "forward", "(", "self", ",", "x", ",", "return_all_tokens", "=", "None", ",", "mask", "=", "None", ",", "use_head", "=", "None", ")", ":", "\n", "# mim   ", "\n", "        ", "x", "=", "self", ".", "prepare_tokens", "(", "x", ",", "mask", "=", "mask", ")", "\n", "\n", "for", "blk", "in", "self", ".", "blocks", ":", "\n", "            ", "x", "=", "blk", "(", "x", ")", "\n", "\n", "", "if", "self", ".", "use_mean_embedding", ":", "# apply norm layer on mean pooling", "\n", "            ", "x", "[", ":", ",", "0", "]", "=", "self", ".", "fc_norm", "(", "x", "[", ":", ",", "1", ":", ",", ":", "]", ".", "mean", "(", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "norm", "(", "x", ")", "# apply norm layer for all", "\n", "\n", "", "return_all_tokens", "=", "self", ".", "return_all_tokens", "if", "return_all_tokens", "is", "None", "else", "return_all_tokens", "\n", "if", "return_all_tokens", ":", "\n", "            ", "return", "x", "\n", "", "use_head", "=", "self", ".", "use_head", "if", "use_head", "is", "None", "else", "use_head", "\n", "if", "use_head", ":", "\n", "            ", "return", "self", ".", "head", "(", "x", "[", ":", ",", "0", "]", ")", "\n", "", "else", ":", "\n", "            ", "return", "x", "[", ":", ",", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.backbones.vision_transformer.VisionTransformer.get_last_selfattention": [[304, 312], ["vision_transformer.VisionTransformer.prepare_tokens", "enumerate", "blk", "blk", "len"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.backbones.vision_transformer.VisionTransformer.prepare_tokens"], ["", "", "def", "get_last_selfattention", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "prepare_tokens", "(", "x", ")", "\n", "for", "i", ",", "blk", "in", "enumerate", "(", "self", ".", "blocks", ")", ":", "\n", "            ", "if", "i", "<", "len", "(", "self", ".", "blocks", ")", "-", "1", ":", "\n", "                ", "x", "=", "blk", "(", "x", ")", "\n", "", "else", ":", "\n", "# return attention of the last block", "\n", "                ", "return", "blk", "(", "x", ",", "return_attention", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.backbones.vision_transformer.VisionTransformer.get_intermediate_layers": [[313, 322], ["vision_transformer.VisionTransformer.prepare_tokens", "enumerate", "blk", "output.append", "len", "vision_transformer.VisionTransformer.norm"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.backbones.vision_transformer.VisionTransformer.prepare_tokens"], ["", "", "", "def", "get_intermediate_layers", "(", "self", ",", "x", ",", "n", "=", "1", ")", ":", "\n", "        ", "x", "=", "self", ".", "prepare_tokens", "(", "x", ")", "\n", "# we return the output tokens from the `n` last blocks", "\n", "output", "=", "[", "]", "\n", "for", "i", ",", "blk", "in", "enumerate", "(", "self", ".", "blocks", ")", ":", "\n", "            ", "x", "=", "blk", "(", "x", ")", "\n", "if", "len", "(", "self", ".", "blocks", ")", "-", "i", "<=", "n", ":", "\n", "                ", "output", ".", "append", "(", "self", ".", "norm", "(", "x", ")", ")", "\n", "", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.backbones.vision_transformer.VisionTransformer.get_num_layers": [[323, 325], ["len"], "methods", ["None"], ["", "def", "get_num_layers", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "blocks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.backbones.vision_transformer.VisionTransformer.mask_model": [[326, 333], ["vision_transformer.VisionTransformer.masked_embed.to", "x.permute"], "methods", ["None"], ["", "def", "mask_model", "(", "self", ",", "x", ",", "mask", ")", ":", "\n", "        ", "\"\"\"\n        [N, D, H, W] => [N, H, W, D] \n        replace the embedding of masked position with masked token.\n        \"\"\"", "\n", "x", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "[", "mask", ",", ":", "]", "=", "self", ".", "masked_embed", ".", "to", "(", "x", ".", "dtype", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.backbones.vision_transformer.VisionTransformer.no_weight_decay": [[334, 337], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "no_weight_decay", "(", "self", ")", ":", "\n", "        ", "return", "{", "'pos_embed'", ",", "'cls_token'", ",", "'dist_token'", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.backbones.vision_transformer.drop_path": [[12, 21], ["random_tensor.floor_", "torch.rand", "torch.rand", "x.div"], "function", ["None"], ["def", "drop_path", "(", "x", ",", "drop_prob", ":", "float", "=", "0.", ",", "training", ":", "bool", "=", "False", ")", ":", "\n", "    ", "if", "drop_prob", "==", "0.", "or", "not", "training", ":", "\n", "        ", "return", "x", "\n", "", "keep_prob", "=", "1", "-", "drop_prob", "\n", "shape", "=", "(", "x", ".", "shape", "[", "0", "]", ",", ")", "+", "(", "1", ",", ")", "*", "(", "x", ".", "ndim", "-", "1", ")", "# work with diff dim tensors, not just 2D ConvNets", "\n", "random_tensor", "=", "keep_prob", "+", "torch", ".", "rand", "(", "shape", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "\n", "random_tensor", ".", "floor_", "(", ")", "# binarize", "\n", "output", "=", "x", ".", "div", "(", "keep_prob", ")", "*", "random_tensor", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.backbones.vision_transformer.vit_tiny": [[338, 343], ["vision_transformer.VisionTransformer"], "function", ["None"], ["", "", "def", "vit_tiny", "(", "patch_size", "=", "16", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "VisionTransformer", "(", "\n", "patch_size", "=", "patch_size", ",", "embed_dim", "=", "192", ",", "depth", "=", "12", ",", "num_heads", "=", "3", ",", "mlp_ratio", "=", "4", ",", "\n", "qkv_bias", "=", "True", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.backbones.vision_transformer.vit_small": [[344, 349], ["vision_transformer.VisionTransformer"], "function", ["None"], ["", "def", "vit_small", "(", "patch_size", "=", "16", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "VisionTransformer", "(", "\n", "patch_size", "=", "patch_size", ",", "embed_dim", "=", "384", ",", "depth", "=", "12", ",", "num_heads", "=", "6", ",", "mlp_ratio", "=", "4", ",", "\n", "qkv_bias", "=", "True", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.backbones.vision_transformer.vit_base": [[350, 355], ["vision_transformer.VisionTransformer"], "function", ["None"], ["", "def", "vit_base", "(", "patch_size", "=", "16", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "VisionTransformer", "(", "\n", "patch_size", "=", "patch_size", ",", "embed_dim", "=", "768", ",", "depth", "=", "12", ",", "num_heads", "=", "12", ",", "mlp_ratio", "=", "4", ",", "\n", "qkv_bias", "=", "True", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.backbones.vision_transformer.vit_large": [[356, 361], ["vision_transformer.VisionTransformer"], "function", ["None"], ["", "def", "vit_large", "(", "patch_size", "=", "16", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "VisionTransformer", "(", "\n", "patch_size", "=", "patch_size", ",", "embed_dim", "=", "1024", ",", "depth", "=", "24", ",", "num_heads", "=", "16", ",", "mlp_ratio", "=", "4", ",", "\n", "qkv_bias", "=", "True", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.backbones.vision_transformer.vit_huge": [[362, 366], ["vision_transformer.VisionTransformer"], "function", ["None"], ["", "def", "vit_huge", "(", "patch_size", "=", "14", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "VisionTransformer", "(", "patch_size", "=", "patch_size", ",", "embed_dim", "=", "1280", ",", "depth", "=", "32", ",", "num_heads", "=", "16", ",", "\n", "mlp_ratio", "=", "4", ",", "qkv_bias", "=", "True", ",", "**", "kwargs", ")", "\n", "return", "model", "", "", ""]], "home.repos.pwc.inspect_result.hirl-team_hirl.pipelines.hirl.HIRL.__init__": [[26, 42], ["torch.Module.__init__", "len", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "hirl.layers.MLP", "hirl.HIRL.projections.append"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.pretrain.dino.DINORunner.__init__"], ["def", "__init__", "(", "self", ",", "model", ",", "num_cluster", ",", "num_neg_path", "=", "1000", ",", "train_emb", "=", "\"cnn\"", ",", "\n", "num_mlp_layer", "=", "2", ",", "activation", "=", "\"relu\"", ",", "batch_norm", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "num_cluster", "=", "num_cluster", "\n", "self", ".", "num_hierarchy", "=", "len", "(", "num_cluster", ")", "\n", "self", ".", "num_neg_path", "=", "num_neg_path", "\n", "self", ".", "emb_key", "=", "self", ".", "emb_keys", "[", "train_emb", "]", "\n", "\n", "self", ".", "input_dim", "=", "model", ".", "inst_dim", "\n", "hidden_dims", "=", "[", "self", ".", "input_dim", "]", "*", "self", ".", "num_hierarchy", "\n", "self", ".", "projections", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_hierarchy", ")", ":", "\n", "            ", "projection", "=", "layers", ".", "MLP", "(", "self", ".", "input_dim", ",", "[", "hidden_dims", "[", "i", "]", "]", "*", "num_mlp_layer", ",", "activation", "=", "activation", ",", "batch_norm", "=", "batch_norm", ")", "\n", "self", ".", "projections", ".", "append", "(", "projection", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.pipelines.hirl.HIRL.sample_neg_path": [[43, 65], ["range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.any().to", "torch.any().to", "torch.any().to", "torch.any().to", "torch.any().to", "torch.any().to", "torch.any().to", "torch.any().to", "torch.any().to", "torch.multinomial().view", "torch.multinomial().view", "torch.multinomial().view", "torch.multinomial().view", "torch.multinomial().view", "torch.multinomial().view", "torch.multinomial().view", "torch.multinomial().view", "torch.multinomial().view", "torch.stack.append", "torch.stack.append", "torch.stack.append", "[].view", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.any", "torch.any", "torch.any", "torch.any", "torch.any", "torch.any", "torch.any", "torch.any", "torch.any", "len", "len", "range", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.stack.unsqueeze", "torch.stack.unsqueeze", "torch.stack.unsqueeze", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "len", "[].view.view"], "methods", ["None"], ["", "", "def", "sample_neg_path", "(", "self", ",", "index", ",", "cluster_result", ")", ":", "\n", "        ", "im2cluster", "=", "cluster_result", "[", "\"im2cluster\"", "]", "\n", "centroids", "=", "cluster_result", "[", "\"centroids\"", "]", "\n", "cluster2cluster", "=", "cluster_result", "[", "\"cluster2cluster\"", "]", "\n", "\n", "# sample negative paths", "\n", "neg_im2cluster", "=", "[", "]", "\n", "for", "hierarchy_id", "in", "range", "(", "self", ".", "num_hierarchy", ")", ":", "\n", "            ", "if", "hierarchy_id", "==", "0", ":", "\n", "                ", "im2cluster_", "=", "torch", ".", "multinomial", "(", "torch", ".", "ones", "(", "centroids", "[", "0", "]", ".", "shape", "[", "0", "]", ",", "device", "=", "centroids", "[", "0", "]", ".", "device", ")", ",", "\n", "len", "(", "index", ")", "*", "self", ".", "num_neg_path", ",", "replacement", "=", "True", ")", ".", "view", "(", "len", "(", "index", ")", ",", "-", "1", ")", "\n", "neg_im2cluster", ".", "append", "(", "im2cluster_", ")", "\n", "", "else", ":", "\n", "                ", "im2cluster_", "=", "cluster2cluster", "[", "hierarchy_id", "-", "1", "]", "[", "im2cluster_", ".", "view", "(", "-", "1", ")", "]", ".", "view", "(", "len", "(", "index", ")", ",", "-", "1", ")", "\n", "neg_im2cluster", ".", "append", "(", "im2cluster_", ")", "\n", "", "", "neg_im2cluster", "=", "torch", ".", "stack", "(", "neg_im2cluster", ",", "dim", "=", "-", "1", ")", "# [N, N_neg, L]", "\n", "\n", "# get true negatives", "\n", "pos_im2cluster", "=", "torch", ".", "stack", "(", "[", "im2cluster", "[", "hid", "]", "[", "index", "]", "for", "hid", "in", "range", "(", "self", ".", "num_hierarchy", ")", "]", ",", "dim", "=", "-", "1", ")", "# [N, L]", "\n", "true_negative", "=", "torch", ".", "any", "(", "neg_im2cluster", "!=", "pos_im2cluster", ".", "unsqueeze", "(", "1", ")", ",", "dim", "=", "-", "1", ")", ".", "to", "(", "torch", ".", "long", ")", "# [N, N_neg]", "\n", "\n", "return", "neg_im2cluster", ",", "true_negative", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.pipelines.hirl.HIRL.semantic_path_discrimination_loss": [[66, 90], ["torch.normalize.view", "torch.normalize", "torch.normalize", "torch.normalize", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.normalize", "torch.normalize", "torch.normalize", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.normalize", "torch.normalize", "torch.normalize", "[].view", "range", "true_negative.sum", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "enumerate", "torch.normalize.unsqueeze().repeat", "torch.normalize.unsqueeze", "neg_im2cluster[].view"], "methods", ["None"], ["", "def", "semantic_path_discrimination_loss", "(", "self", ",", "semantic_embs", ",", "index", ",", "cluster_result", ",", "neg_im2cluster", ",", "true_negative", ")", ":", "\n", "        ", "centroids", "=", "cluster_result", "[", "\"centroids\"", "]", "\n", "im2cluster", "=", "cluster_result", "[", "\"im2cluster\"", "]", "\n", "\n", "# BCE loss for positive paths", "\n", "batch_size", "=", "semantic_embs", ".", "shape", "[", "0", "]", "\n", "semantic_embs", "=", "semantic_embs", ".", "view", "(", "batch_size", ",", "self", ".", "num_hierarchy", ",", "-", "1", ")", "# [N, L, D]", "\n", "semantic_embs", "=", "F", ".", "normalize", "(", "semantic_embs", ",", "dim", "=", "-", "1", ")", "\n", "pos_path", "=", "torch", ".", "stack", "(", "[", "F", ".", "normalize", "(", "centroids", "[", "h_id", "]", "[", "cluster_label", "[", "index", "]", "]", ",", "dim", "=", "-", "1", ")", "for", "(", "h_id", ",", "cluster_label", ")", "in", "enumerate", "(", "im2cluster", ")", "]", ",", "dim", "=", "1", ")", "# [N, L, D]", "\n", "pos_path_sim", "=", "torch", ".", "prod", "(", "(", "(", "(", "semantic_embs", "*", "pos_path", ")", ".", "sum", "(", "-", "1", ")", "+", "1", ")", "/", "2", ")", ",", "dim", "=", "1", ")", "# [N,]", "\n", "semantic_loss", "=", "-", "torch", ".", "log", "(", "pos_path_sim", "+", "self", ".", "eps", ")", "\n", "\n", "# BCE loss for negative paths", "\n", "neg_paths", "=", "[", "F", ".", "normalize", "(", "centroids", "[", "h_id", "]", "[", "neg_im2cluster", "[", ":", ",", ":", ",", "h_id", "]", ".", "view", "(", "-", "1", ")", "]", ".", "view", "(", "batch_size", ",", "self", ".", "num_neg_path", ",", "-", "1", ")", ",", "dim", "=", "-", "1", ")", "for", "h_id", "in", "range", "(", "self", ".", "num_hierarchy", ")", "]", "\n", "neg_paths", "=", "torch", ".", "stack", "(", "neg_paths", ",", "-", "2", ")", "# [N, N_neg, L, D]", "\n", "neg_prototype_sim", "=", "(", "semantic_embs", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "self", ".", "num_neg_path", ",", "1", ",", "1", ")", "*", "neg_paths", ")", ".", "sum", "(", "-", "1", ")", "# [N, N_neg, L]", "\n", "neg_path_sim", "=", "torch", ".", "prod", "(", "(", "neg_prototype_sim", "+", "1", ")", "/", "2", ",", "dim", "=", "-", "1", ")", "# [N, N_neg]", "\n", "neg_path_sim_loss", "=", "-", "torch", ".", "log", "(", "1", "-", "neg_path_sim", "+", "self", ".", "eps", ")", "\n", "neg_path_sim_loss", "=", "(", "neg_path_sim_loss", "*", "true_negative", ")", ".", "sum", "(", "-", "1", ")", "/", "(", "true_negative", ".", "sum", "(", "-", "1", ")", "+", "self", ".", "eps", ")", "# [N,]", "\n", "\n", "semantic_loss", "=", "torch", ".", "stack", "(", "[", "semantic_loss", ",", "neg_path_sim_loss", "]", ",", "dim", "=", "-", "1", ")", ".", "mean", "(", ")", "\n", "return", "semantic_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.pipelines.hirl.HIRL.forward_feature": [[91, 93], ["hirl.HIRL.model.forward_feature"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.pipelines.hirl.HIRL.forward_feature"], ["", "def", "forward_feature", "(", "self", ",", "images", ")", ":", "\n", "        ", "return", "self", ".", "model", ".", "forward_feature", "(", "images", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.pipelines.hirl.HIRL.forward": [[94, 128], ["hirl.HIRL.model", "image_loss.item", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "hirl.HIRL.sample_neg_path", "hirl.HIRL.semantic_path_discrimination_loss", "hirl.HIRL.item", "isinstance", "torch.normalize", "torch.normalize", "torch.normalize", "torch.cat.append", "torch.cat.append", "torch.cat.append"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.pipelines.hirl.HIRL.sample_neg_path", "home.repos.pwc.inspect_result.hirl-team_hirl.pipelines.hirl.HIRL.semantic_path_discrimination_loss"], ["", "def", "forward", "(", "self", ",", "images", ",", "index", ",", "cluster_result", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            images (torch.tensor or list[torch.tensor]): a batch of input images.\n            index (torch.tensor): the indices of training samples.\n            cluster_result (dict): cluster assignments, centroids and density. \n\n        Returns:\n            output_dict (dict): all outputs (e.g., losses and embeddings).\n        \"\"\"", "\n", "output_dict", "=", "self", ".", "model", "(", "images", ",", "return_hooks", "=", "True", ",", "**", "kwargs", ")", "\n", "image_loss", ",", "embedding_dict", "=", "output_dict", "[", "\"loss\"", "]", ",", "output_dict", "[", "\"embeddings\"", "]", "\n", "loss", "=", "image_loss", "\n", "output_dict", "[", "\"image_loss\"", "]", "=", "image_loss", ".", "item", "(", ")", "\n", "\n", "# Apply semantic modeling loss in the second training stage", "\n", "if", "cluster_result", "is", "not", "None", ":", "\n", "            ", "all_img_emb", "=", "embedding_dict", "[", "self", ".", "emb_key", "]", "\n", "img_emb", "=", "all_img_emb", "[", "0", "]", "if", "isinstance", "(", "all_img_emb", ",", "list", ")", "else", "all_img_emb", "\n", "semantic_embs", "=", "[", "]", "\n", "for", "hierarchy_id", "in", "range", "(", "self", ".", "num_hierarchy", ")", ":", "\n", "                ", "semantic_emb", "=", "self", ".", "projections", "[", "hierarchy_id", "]", "(", "img_emb", ")", "\n", "semantic_emb", "=", "F", ".", "normalize", "(", "semantic_emb", ",", "dim", "=", "-", "1", ")", "\n", "semantic_embs", ".", "append", "(", "semantic_emb", ")", "\n", "\n", "", "semantic_embs", "=", "torch", ".", "cat", "(", "semantic_embs", ",", "dim", "=", "-", "1", ")", "\n", "neg_im2cluster", ",", "true_negative", "=", "self", ".", "sample_neg_path", "(", "index", ",", "cluster_result", ")", "\n", "semantic_loss", "=", "self", ".", "semantic_path_discrimination_loss", "(", "semantic_embs", ",", "index", ",", "cluster_result", ",", "\n", "neg_im2cluster", ",", "true_negative", ")", "\n", "loss", "+=", "semantic_loss", "\n", "output_dict", "[", "\"semantic_loss\"", "]", "=", "semantic_loss", ".", "item", "(", ")", "\n", "\n", "", "output_dict", "[", "\"loss\"", "]", "=", "loss", "\n", "return", "output_dict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hirl-team_hirl.runners.base.BaseRunner.__init__": [[28, 48], ["object.__init__", "hirl.init_distributed_mode", "hirl.init_distributed_mode", "hirl.get_rank", "hirl.get_rank", "hirl.utils.misc.fix_random_seeds", "hirl.utils.misc.fix_random_seeds", "print", "base.BaseRunner.custom_initialize", "base.BaseRunner.build_dataset", "base.BaseRunner.build_model", "base.BaseRunner.build_optimizer", "base.BaseRunner.build_scaler", "os.path.exists", "os.makedirs", "base.BaseRunner.resume", "sorted", "str", "args.to_dict().items", "args.to_dict"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.pretrain.dino.DINORunner.__init__", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.init_distributed_mode", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.init_distributed_mode", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_rank", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_rank", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.fix_random_seeds", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.fix_random_seeds", "home.repos.pwc.inspect_result.hirl-team_hirl.runners.base.BaseRunner.custom_initialize", "home.repos.pwc.inspect_result.hirl-team_hirl.pretrain.ibot.iBOTRunner.build_dataset", "home.repos.pwc.inspect_result.hirl-team_hirl.pretrain.ibot.iBOTRunner.build_model", "home.repos.pwc.inspect_result.hirl-team_hirl.pretrain.ibot.iBOTRunner.build_optimizer", "home.repos.pwc.inspect_result.hirl-team_hirl.runners.base.StandardDownstreamRunner.build_scaler", "home.repos.pwc.inspect_result.hirl-team_hirl.runners.base.StandardDownstreamRunner.resume"], ["    ", "def", "__init__", "(", "self", ",", "args", ":", "adict", ",", "resume", "=", "True", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "dist_utils", ".", "init_distributed_mode", "(", "self", ".", "args", ")", "\n", "self", ".", "local_rank", "=", "args", ".", "local_rank", "\n", "self", ".", "rank", "=", "dist_utils", ".", "get_rank", "(", ")", "\n", "misc", ".", "fix_random_seeds", "(", "self", ".", "args", ".", "seed", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "print", "(", "\"\\n\"", ".", "join", "(", "\"%s: %s\"", "%", "(", "k", ",", "str", "(", "v", ")", ")", "for", "k", ",", "v", "in", "sorted", "(", "args", ".", "to_dict", "(", ")", ".", "items", "(", ")", ")", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "args", ".", "output_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "args", ".", "output_dir", ",", "exist_ok", "=", "True", ")", "\n", "", "self", ".", "custom_initialize", "(", ")", "\n", "\n", "self", ".", "build_dataset", "(", "self", ".", "args", ")", "\n", "self", ".", "build_model", "(", "self", ".", "args", ")", "\n", "self", ".", "build_optimizer", "(", "self", ".", "args", ")", "\n", "self", ".", "build_scaler", "(", "self", ".", "args", ")", "\n", "if", "resume", ":", "\n", "            ", "self", ".", "resume", "(", "self", ".", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.runners.base.BaseRunner.custom_initialize": [[49, 57], ["os.makedirs", "os.path.exists", "os.path.join", "os.path.join"], "methods", ["None"], ["", "", "def", "custom_initialize", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        we use this function to perform auto-resume from save dir.\n        \"\"\"", "\n", "\n", "os", ".", "makedirs", "(", "self", ".", "args", ".", "output_dir", ",", "exist_ok", "=", "True", ")", "\n", "if", "self", ".", "args", ".", "autoresume", "and", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "output_dir", ",", "\"latest.pth\"", ")", ")", ":", "\n", "            ", "self", ".", "args", ".", "resume", "=", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "output_dir", ",", "\"latest.pth\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.runners.base.BaseRunner.custom_end": [[58, 60], ["None"], "methods", ["None"], ["", "", "def", "custom_end", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.runners.base.BaseRunner.build_dataset": [[61, 63], ["None"], "methods", ["None"], ["", "def", "build_dataset", "(", "self", ",", "args", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.runners.base.BaseRunner.build_model": [[64, 66], ["None"], "methods", ["None"], ["", "def", "build_model", "(", "self", ",", "args", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.runners.base.BaseRunner.build_optimizer": [[67, 69], ["None"], "methods", ["None"], ["", "def", "build_optimizer", "(", "self", ",", "args", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.runners.base.BaseRunner.build_scaler": [[70, 72], ["None"], "methods", ["None"], ["", "def", "build_scaler", "(", "self", ",", "args", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.runners.base.BaseRunner.resume": [[73, 75], ["None"], "methods", ["None"], ["", "def", "resume", "(", "self", ",", "args", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.runners.base.BaseRunner.run": [[76, 78], ["None"], "methods", ["None"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.runners.base.BaseRunner.train_one_epoch": [[79, 81], ["None"], "methods", ["None"], ["", "def", "train_one_epoch", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.runners.base.BaseRunner.save_model": [[82, 86], ["torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "os.path.join"], "methods", ["None"], ["", "def", "save_model", "(", "self", ",", "save_dict", ",", "epoch", ")", ":", "\n", "        ", "torch", ".", "save", "(", "save_dict", ",", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "output_dir", ",", "'latest.pth'", ")", ")", "\n", "if", "(", "epoch", "%", "self", ".", "args", ".", "save_interval", "==", "0", ")", "and", "epoch", ":", "\n", "            ", "torch", ".", "save", "(", "save_dict", ",", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "output_dir", ",", "f'checkpoint_{epoch:04}.pth'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.runners.base.BaseRunner.restart_from_checkpoint": [[87, 123], ["print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "kwargs.items", "os.path.isfile", "print", "value.load_state_dict", "print", "value.load_state_dict", "print", "print"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.NativeScalerWithGradNormCount.load_state_dict", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.NativeScalerWithGradNormCount.load_state_dict"], ["", "", "def", "restart_from_checkpoint", "(", "self", ",", "ckp_path", ",", "run_variables", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Re-start from checkpoint; \n        load the key into the value of kwargs\n        kwargs in the format: \n            { key (str): value(nn.Module)}\n        \"\"\"", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "ckp_path", ")", ":", "\n", "            ", "return", "\n", "", "print", "(", "\"Found checkpoint at {}\"", ".", "format", "(", "ckp_path", ")", ")", "\n", "\n", "# open checkpoint file", "\n", "checkpoint", "=", "torch", ".", "load", "(", "ckp_path", ",", "map_location", "=", "\"cpu\"", ")", "\n", "\n", "# key is what to look for in the checkpoint file", "\n", "# value is the object to load", "\n", "# example: {'state_dict': model}", "\n", "for", "key", ",", "value", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "            ", "if", "key", "in", "checkpoint", "and", "value", "is", "not", "None", ":", "\n", "                ", "try", ":", "\n", "                    ", "msg", "=", "value", ".", "load_state_dict", "(", "checkpoint", "[", "key", "]", ",", "strict", "=", "False", ")", "\n", "print", "(", "\"=> loaded '{}' from checkpoint '{}' with msg {}\"", ".", "format", "(", "key", ",", "ckp_path", ",", "msg", ")", ")", "\n", "", "except", "TypeError", ":", "\n", "                    ", "try", ":", "\n", "                        ", "msg", "=", "value", ".", "load_state_dict", "(", "checkpoint", "[", "key", "]", ")", "\n", "print", "(", "\"=> loaded '{}' from checkpoint: '{}'\"", ".", "format", "(", "key", ",", "ckp_path", ")", ")", "\n", "", "except", "ValueError", ":", "\n", "                        ", "print", "(", "\"=> failed to load '{}' from checkpoint: '{}'\"", ".", "format", "(", "key", ",", "ckp_path", ")", ")", "\n", "", "", "", "else", ":", "\n", "                ", "print", "(", "\"=> key '{}' not found in checkpoint: '{}'\"", ".", "format", "(", "key", ",", "ckp_path", ")", ")", "\n", "\n", "# re load variable important for the run", "\n", "", "", "if", "run_variables", "is", "not", "None", ":", "\n", "            ", "for", "var_name", "in", "run_variables", ":", "\n", "                ", "if", "var_name", "in", "checkpoint", ":", "\n", "                    ", "run_variables", "[", "var_name", "]", "=", "checkpoint", "[", "var_name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.runners.base.BaseRunner.log_metrics": [[124, 126], ["None"], "methods", ["None"], ["", "", "", "", "def", "log_metrics", "(", "self", ",", "metric_logger", ",", "output_dict", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.runners.base.StandardPretrainRunner.to_ddp": [[131, 140], ["torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel"], "methods", ["None"], ["def", "to_ddp", "(", "self", ",", "model", ",", "args", ")", ":", "\n", "        ", "\"\"\"\n        some runners may have specific to_ddp operation. \n        For example, iBOT and DINO...\n        \"\"\"", "\n", "model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "model", ",", "device_ids", "=", "[", "args", ".", "gpu", "]", ",", "find_unused_parameters", "=", "True", ")", "\n", "model_without_ddp", "=", "model", ".", "module", "\n", "self", ".", "model_without_ddp", "=", "model_without_ddp", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.runners.base.StandardPretrainRunner.build_dataset": [[141, 165], ["args.dataset.transform.pop", "args.dataset.pop", "args.dataset.pop", "hirl.get_world_size", "hirl.get_world_size", "hirl.get_rank", "hirl.get_rank", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "print", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "NotImplementedError", "str"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_world_size", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_world_size", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_rank", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_rank"], ["", "def", "build_dataset", "(", "self", ",", "args", ")", ":", "\n", "        ", "transform_class", "=", "args", ".", "dataset", ".", "transform", ".", "pop", "(", "\"name\"", ")", "\n", "transform_args", "=", "args", ".", "dataset", ".", "pop", "(", "\"transform\"", ")", "\n", "train_transform", "=", "utils", ".", "transforms", ".", "__dict__", "[", "transform_class", "]", "(", "**", "transform_args", ")", "\n", "\n", "dataset_class", "=", "args", ".", "dataset", ".", "pop", "(", "\"name\"", ")", "\n", "## first find it in our utils, then torchvision", "\n", "if", "dataset_class", "in", "utils", ".", "loader", ".", "__dict__", ":", "\n", "            ", "dataset", "=", "utils", ".", "loader", ".", "__dict__", "[", "dataset_class", "]", "(", "transform", "=", "train_transform", ",", "**", "args", ".", "dataset", ")", "\n", "", "elif", "dataset_class", "in", "torchvision_dataset", ".", "__dict__", ":", "\n", "            ", "dataset", "=", "torchvision_dataset", ".", "__dict__", "[", "dataset_class", "]", "(", "transform", "=", "train_transform", ",", "**", "args", ".", "dataset", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"dataset class {} not found.\"", ".", "format", "(", "dataset_class", ")", ")", "\n", "\n", "", "num_tasks", "=", "dist_utils", ".", "get_world_size", "(", ")", "\n", "global_rank", "=", "dist_utils", ".", "get_rank", "(", ")", "\n", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "DistributedSampler", "(", "dataset", ",", "num_replicas", "=", "num_tasks", ",", "rank", "=", "global_rank", ",", "shuffle", "=", "True", ")", "\n", "print", "(", "\"Training sampler = %s\"", "%", "str", "(", "sampler", ")", ")", "\n", "\n", "data_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "sampler", "=", "sampler", ",", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ",", "pin_memory", "=", "True", ",", "drop_last", "=", "True", ")", "\n", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "data_loader", "=", "data_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.runners.base.StandardPretrainRunner.build_model": [[166, 174], ["args.model.pop", "base.StandardPretrainRunner.to_ddp"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.runners.base.StandardPretrainRunner.to_ddp"], ["", "def", "build_model", "(", "self", ",", "args", ")", ":", "\n", "        ", "\"\"\"\n        a general model building function\n        \"\"\"", "\n", "model_class", "=", "args", ".", "model", ".", "pop", "(", "\"name\"", ")", "\n", "model", "=", "pretrain_models", ".", "__dict__", "[", "model_class", "]", "(", "**", "args", ".", "model", ")", "\n", "model", "=", "self", ".", "to_ddp", "(", "model", ",", "args", ")", "\n", "self", ".", "model", "=", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.runners.base.StandardPretrainRunner.build_optimizer": [[175, 196], ["print", "print", "print", "base.StandardPretrainRunner.model.parameters", "args.optimizer.pop", "hirl.get_world_size", "hirl.get_world_size", "getattr"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_world_size", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_world_size"], ["", "def", "build_optimizer", "(", "self", ",", "args", ")", ":", "\n", "        ", "\"\"\"\n        a general and standard optimizer building function\n        \"\"\"", "\n", "eff_batch_size", "=", "args", ".", "batch_size", "*", "args", ".", "accum_iter", "*", "dist_utils", ".", "get_world_size", "(", ")", "\n", "\n", "args", ".", "lr", "=", "args", ".", "lr", "*", "eff_batch_size", "/", "256", "\n", "\n", "print", "(", "\"actual lr: %.2e\"", "%", "args", ".", "lr", ")", "\n", "\n", "print", "(", "\"accumulate grad iterations: %d\"", "%", "args", ".", "accum_iter", ")", "\n", "print", "(", "\"effective batch size: %d\"", "%", "eff_batch_size", ")", "\n", "\n", "optimizer_class", "=", "args", ".", "optimizer", ".", "name", "\n", "optimizer_params", "=", "args", ".", "optimizer", ".", "params", "\n", "\n", "param_groups", "=", "self", ".", "model", ".", "parameters", "(", ")", "\n", "optimizer_class", "=", "args", ".", "optimizer", ".", "pop", "(", "\"name\"", ")", "\n", "optimizer", "=", "getattr", "(", "torch", ".", "optim", ",", "optimizer_class", ")", "(", "param_groups", ",", "**", "optimizer_params", ")", "\n", "\n", "self", ".", "optimizer", "=", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.runners.base.StandardPretrainRunner.build_scaler": [[197, 207], ["args.get", "hirl.utils.misc.NativeScalerWithGradNormCount", "hirl.utils.misc.NativeScalerWithGradNormCount", "print"], "methods", ["None"], ["", "def", "build_scaler", "(", "self", ",", "args", ")", ":", "\n", "        ", "\"\"\"\n        support for auto mix precision (amp)\n        \"\"\"", "\n", "use_fp16", "=", "args", ".", "get", "(", "\"use_fp16\"", ",", "False", ")", "\n", "args", ".", "use_fp16", "=", "use_fp16", "\n", "if", "args", ".", "use_fp16", ":", "\n", "            ", "print", "(", "\"auto mix precision enabled!\"", ")", "\n", "", "loss_scaler", "=", "NativeScaler", "(", "args", ".", "use_fp16", ")", "\n", "self", ".", "loss_scaler", "=", "loss_scaler", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.runners.base.StandardPretrainRunner.resume": [[208, 220], ["isinstance", "os.path.exists", "base.StandardPretrainRunner.restart_from_checkpoint"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.runners.base.BaseRunner.restart_from_checkpoint"], ["", "def", "resume", "(", "self", ",", "args", ")", ":", "\n", "        ", "to_restore", "=", "{", "\"epoch\"", ":", "0", "}", "\n", "if", "isinstance", "(", "args", ".", "resume", ",", "str", ")", "and", "os", ".", "path", ".", "exists", "(", "args", ".", "resume", ")", ":", "\n", "\n", "            ", "self", ".", "restart_from_checkpoint", "(", "args", ".", "resume", ",", "\n", "run_variables", "=", "to_restore", ",", "\n", "model", "=", "self", ".", "model", ",", "\n", "optimizer", "=", "self", ".", "optimizer", ",", "\n", "loss_scaler", "=", "self", ".", "loss_scaler", "\n", ")", "\n", "", "start_epoch", "=", "to_restore", "[", "\"epoch\"", "]", "\n", "self", ".", "start_epoch", "=", "start_epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.runners.base.StandardPretrainRunner.set_epoch": [[221, 234], ["hasattr", "base.StandardPretrainRunner.data_loader.sampler.set_epoch", "hasattr", "hasattr", "base.StandardPretrainRunner.model.module.set_epoch", "base.StandardPretrainRunner.model.set_epoch"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.pretrain.ibot.iBOTRunner.set_epoch", "home.repos.pwc.inspect_result.hirl-team_hirl.pretrain.ibot.iBOTRunner.set_epoch", "home.repos.pwc.inspect_result.hirl-team_hirl.pretrain.ibot.iBOTRunner.set_epoch"], ["", "def", "set_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "\"\"\"\n        set epochs before training. By default, set the \n        distributed sampler epoch.\n        \"\"\"", "\n", "if", "hasattr", "(", "self", ".", "model", ",", "\"module\"", ")", ":", "## ddp model", "\n", "            ", "if", "hasattr", "(", "self", ".", "model", ".", "module", ",", "\"set_epoch\"", ")", ":", "\n", "                ", "self", ".", "model", ".", "module", ".", "set_epoch", "(", "epoch", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "hasattr", "(", "self", ".", "model", ",", "\"set_epoch\"", ")", ":", "# no ddp model", "\n", "                ", "self", ".", "model", ".", "set_epoch", "(", "epoch", ")", "\n", "", "", "self", ".", "data_loader", ".", "sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "self", ".", "epoch", "=", "epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.runners.base.StandardPretrainRunner.set_iter": [[235, 237], ["None"], "methods", ["None"], ["", "def", "set_iter", "(", "self", ",", "it", ")", ":", "\n", "        ", "self", ".", "it", "=", "it", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.runners.base.StandardPretrainRunner.set_iter_per_epoch": [[238, 240], ["None"], "methods", ["None"], ["", "def", "set_iter_per_epoch", "(", "self", ",", "iter_per_epoch", ")", ":", "\n", "        ", "self", ".", "iter_per_epoch", "=", "iter_per_epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.runners.base.StandardPretrainRunner.custom_save_dict": [[241, 247], ["base.StandardPretrainRunner.model.state_dict", "base.StandardPretrainRunner.optimizer.state_dict", "base.StandardPretrainRunner.loss_scaler.state_dict"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.NativeScalerWithGradNormCount.state_dict", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.NativeScalerWithGradNormCount.state_dict", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.NativeScalerWithGradNormCount.state_dict"], ["", "@", "property", "\n", "def", "custom_save_dict", "(", "self", ")", ":", "\n", "        ", "return", "{", "\n", "'model'", ":", "self", ".", "model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "self", ".", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "\"loss_scaler\"", ":", "self", ".", "loss_scaler", ".", "state_dict", "(", ")", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.runners.base.StandardPretrainRunner.run": [[249, 273], ["time.time", "print", "base.StandardPretrainRunner.model.train", "range", "str", "print", "base.StandardPretrainRunner.set_epoch", "base.StandardPretrainRunner.train_one_epoch", "save_dict.update", "base.StandardPretrainRunner.save_model", "hirl.is_main_process", "hirl.is_main_process", "time.time", "datetime.timedelta", "base.StandardPretrainRunner.args.to_dict", "f.write", "int", "base.StandardPretrainRunner.items", "json.dumps", "pathlib.Path"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.pretrain.ibot.iBOTRunner.set_epoch", "home.repos.pwc.inspect_result.hirl-team_hirl.downstream.finetune.FinetuneRunner.train_one_epoch", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.hirl-team_hirl.runners.base.BaseRunner.save_model", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.is_main_process", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.is_main_process"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "f\"Start training for {self.args.epochs} epochs\"", ")", "\n", "self", ".", "model", ".", "train", "(", ")", "\n", "for", "epoch", "in", "range", "(", "self", ".", "start_epoch", ",", "self", ".", "args", ".", "epochs", ")", ":", "\n", "            ", "self", ".", "set_epoch", "(", "epoch", ")", "\n", "train_stats", "=", "self", ".", "train_one_epoch", "(", "epoch", ")", "\n", "# save model", "\n", "save_dict", "=", "{", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'args'", ":", "self", ".", "args", ".", "to_dict", "(", ")", ",", "\n", "}", "\n", "save_dict", ".", "update", "(", "self", ".", "custom_save_dict", ")", "\n", "\n", "self", ".", "save_model", "(", "save_dict", ",", "epoch", ")", "\n", "log_stats", "=", "{", "**", "{", "f'train_{k}'", ":", "v", "for", "k", ",", "v", "in", "train_stats", ".", "items", "(", ")", "}", ",", "\n", "'epoch'", ":", "epoch", "}", "\n", "if", "dist_utils", ".", "is_main_process", "(", ")", ":", "\n", "                ", "with", "(", "Path", "(", "self", ".", "args", ".", "output_dir", ")", "/", "\"log.txt\"", ")", ".", "open", "(", "\"a\"", ")", "as", "f", ":", "\n", "                    ", "f", ".", "write", "(", "json", ".", "dumps", "(", "log_stats", ")", "+", "\"\\n\"", ")", "\n", "\n", "", "", "", "total_time", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "total_time_str", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "int", "(", "total_time", ")", ")", ")", "\n", "print", "(", "'Training time {}'", ".", "format", "(", "total_time_str", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.runners.base.StandardPretrainRunner.adjust_learning_rate": [[274, 276], ["None"], "methods", ["None"], ["", "def", "adjust_learning_rate", "(", "self", ",", "optimizer", ",", "epoch", ",", "args", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.runners.base.StandardPretrainRunner.forward_batch": [[277, 294], ["isinstance", "image.cuda", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "base.StandardPretrainRunner.model"], "methods", ["None"], ["", "def", "forward_batch", "(", "self", ",", "batch", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        a standard batch forwarding function. This \n        could be used for CNN-based pre-training (moco, swav, simsiam)\n        \"\"\"", "\n", "\n", "images", "=", "batch", "[", "\"images\"", "]", "\n", "if", "not", "isinstance", "(", "images", ",", "list", ")", ":", "\n", "            ", "images", "=", "[", "images", "]", "\n", "", "images", "=", "[", "image", ".", "cuda", "(", "non_blocking", "=", "True", ")", "for", "image", "in", "images", "]", "\n", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", "self", ".", "args", ".", "use_fp16", ")", ":", "\n", "            ", "output_dict", "=", "self", ".", "model", "(", "images", ",", "**", "kwargs", ")", "\n", "\n", "", "if", "\"targets\"", "in", "batch", ":", "\n", "            ", "image_labels", "=", "batch", "[", "\"targets\"", "]", "\n", "output_dict", "[", "\"image_labels\"", "]", "=", "image_labels", "\n", "", "return", "output_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.runners.base.StandardPretrainRunner.eval_after_epoch": [[295, 297], ["dict"], "methods", ["None"], ["", "def", "eval_after_epoch", "(", "self", ")", ":", "\n", "        ", "return", "dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.runners.base.StandardPretrainRunner.step_optimizer": [[298, 313], ["base.StandardPretrainRunner.loss_scaler", "base.StandardPretrainRunner.optimizer.zero_grad", "base.StandardPretrainRunner.model.parameters"], "methods", ["None"], ["", "def", "step_optimizer", "(", "self", ",", "loss", ",", "it", ",", "accum_iter", ",", "clip_grad", ")", ":", "\n", "        ", "\"\"\"\n        update model parameter according to iteration\n\n        Args:\n            loss: Tensor\n            it (int): current iteration (total)\n            accum_iter (int): how many iterations to accumulate the gradient\n            clip_grad: (float / None): if has value, clip gradients.\n        \"\"\"", "\n", "loss", "=", "loss", "/", "accum_iter", "\n", "self", ".", "loss_scaler", "(", "loss", ",", "self", ".", "optimizer", ",", "parameters", "=", "self", ".", "model", ".", "parameters", "(", ")", ",", "\n", "update_grad", "=", "(", "it", "+", "1", ")", "%", "accum_iter", "==", "0", ",", "clip_grad", "=", "clip_grad", ",", ")", "\n", "if", "(", "it", "+", "1", ")", "%", "accum_iter", "==", "0", ":", "\n", "            ", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.runners.base.StandardPretrainRunner.train_one_epoch": [[314, 364], ["hirl.utils.misc.MetricLogger", "hirl.utils.misc.MetricLogger", "base.StandardPretrainRunner.args.get", "base.StandardPretrainRunner.args.get", "base.StandardPretrainRunner.set_iter_per_epoch", "base.StandardPretrainRunner.args.get", "base.StandardPretrainRunner.args.get", "base.StandardPretrainRunner.model.train", "enumerate", "hirl.utils.misc.MetricLogger.synchronize_between_processes", "print", "base.StandardPretrainRunner.eval_after_epoch", "return_dict.update", "len", "hirl.utils.misc.MetricLogger.log_every", "base.StandardPretrainRunner.set_iter", "base.StandardPretrainRunner.adjust_learning_rate", "base.StandardPretrainRunner.forward_batch", "loss.item", "base.StandardPretrainRunner.step_optimizer", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "hirl.utils.misc.MetricLogger.update", "hirl.utils.misc.MetricLogger.update", "base.StandardPretrainRunner.log_metrics", "math.isfinite", "print", "sys.exit", "hirl.utils.misc.MetricLogger.meters.items"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.runners.base.StandardPretrainRunner.set_iter_per_epoch", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.MetricLogger.synchronize_between_processes", "home.repos.pwc.inspect_result.hirl-team_hirl.pretrain.dino.DINORunner.eval_after_epoch", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.MetricLogger.log_every", "home.repos.pwc.inspect_result.hirl-team_hirl.runners.base.StandardPretrainRunner.set_iter", "home.repos.pwc.inspect_result.hirl-team_hirl.pretrain.moco.MoCoRunner.adjust_learning_rate", "home.repos.pwc.inspect_result.hirl-team_hirl.pretrain.ibot.iBOTRunner.forward_batch", "home.repos.pwc.inspect_result.hirl-team_hirl.pretrain.dino.DINORunner.step_optimizer", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.hirl-team_hirl.pretrain.moco.MoCoRunner.log_metrics"], ["", "", "def", "train_one_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "\"\"\"\n        A standard train_one_epoch function including:\n        - clip grad\n        - gradient accumulation\n        - iter-wise learning rate adjust\n        - metric logging\n        \"\"\"", "\n", "metric_logger", "=", "misc", ".", "MetricLogger", "(", "delimiter", "=", "\"  \"", ")", "\n", "header", "=", "'Epoch: [{}/{}]'", ".", "format", "(", "epoch", ",", "self", ".", "args", ".", "epochs", ")", "\n", "log_interval", "=", "self", ".", "args", ".", "get", "(", "\"log_interval\"", ",", "10", ")", "\n", "iter_per_epoch", "=", "self", ".", "args", ".", "get", "(", "\"iter_per_epoch\"", ",", "-", "1", ")", "\n", "iter_per_epoch", "=", "len", "(", "self", ".", "data_loader", ")", "if", "iter_per_epoch", "<", "0", "else", "iter_per_epoch", "\n", "self", ".", "set_iter_per_epoch", "(", "iter_per_epoch", ")", "\n", "accum_iter", "=", "self", ".", "args", ".", "get", "(", "\"accum_iter\"", ",", "1", ")", "\n", "clip_grad", "=", "self", ".", "args", ".", "get", "(", "\"clip_grad\"", ",", "None", ")", "\n", "\n", "self", ".", "model", ".", "train", "(", ")", "\n", "for", "it", ",", "(", "batch", ")", "in", "enumerate", "(", "metric_logger", ".", "log_every", "(", "self", ".", "data_loader", ",", "log_interval", ",", "header", ")", ")", ":", "\n", "            ", "if", "it", ">=", "iter_per_epoch", ":", "\n", "                ", "break", "\n", "", "it", "=", "iter_per_epoch", "*", "epoch", "+", "it", "# global training iteration", "\n", "self", ".", "set_iter", "(", "it", ")", "\n", "self", ".", "adjust_learning_rate", "(", "self", ".", "optimizer", ",", "it", "/", "iter_per_epoch", ",", "self", ".", "args", ")", "\n", "output_dict", "=", "self", ".", "forward_batch", "(", "batch", ")", "\n", "\n", "loss", "=", "output_dict", "[", "\"loss\"", "]", "\n", "loss_value", "=", "loss", ".", "item", "(", ")", "\n", "if", "not", "math", ".", "isfinite", "(", "loss_value", ")", ":", "\n", "                ", "print", "(", "\"Loss is {}, stopping training\"", ".", "format", "(", "loss_value", ")", ",", "force", "=", "True", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "self", ".", "step_optimizer", "(", "loss", ",", "it", ",", "accum_iter", ",", "clip_grad", ")", "\n", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "# record training status", "\n", "metric_logger", ".", "update", "(", "loss", "=", "loss_value", ")", "\n", "metric_logger", ".", "update", "(", "lr", "=", "self", ".", "optimizer", ".", "param_groups", "[", "0", "]", "[", "\"lr\"", "]", ")", "\n", "\n", "## specific logging", "\n", "self", ".", "log_metrics", "(", "metric_logger", ",", "output_dict", ")", "\n", "\n", "# gather the stats from all processes", "\n", "", "metric_logger", ".", "synchronize_between_processes", "(", ")", "\n", "print", "(", "\"Averaged stats:\"", ",", "metric_logger", ")", "\n", "return_dict", "=", "{", "k", ":", "meter", ".", "global_avg", "for", "k", ",", "meter", "in", "metric_logger", ".", "meters", ".", "items", "(", ")", "}", "\n", "## maybe eval after epoch", "\n", "eval_results", "=", "self", ".", "eval_after_epoch", "(", ")", "\n", "return_dict", ".", "update", "(", "eval_results", ")", "\n", "return", "return_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.runners.base.StandardDownstreamRunner.custom_end": [[374, 384], ["os.path.join", "json.dumps", "open", "f.write"], "methods", ["None"], ["def", "custom_end", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        save metric file.\n        \"\"\"", "\n", "if", "self", ".", "local_rank", "==", "0", ":", "\n", "            ", "local_metric_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "output_dir", ",", "\"metric.json\"", ")", "\n", "metric_dict", "=", "{", "\"acc\"", ":", "self", ".", "metric", "}", "\n", "json_string", "=", "json", ".", "dumps", "(", "metric_dict", ")", "\n", "with", "open", "(", "local_metric_file", ",", "\"w\"", ")", "as", "f", ":", "\n", "                ", "f", ".", "write", "(", "json_string", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.runners.base.StandardDownstreamRunner.build_transform": [[385, 387], ["None"], "methods", ["None"], ["", "", "", "def", "build_transform", "(", "self", ",", "is_train", ",", "args", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.runners.base.StandardDownstreamRunner.build_train_dataset": [[388, 391], ["torchvision.datasets.ImageFolder", "os.path.join"], "methods", ["None"], ["", "def", "build_train_dataset", "(", "self", ",", "args", ",", "transform", ")", ":", "\n", "        ", "return", "datasets", ".", "ImageFolder", "(", "os", ".", "path", ".", "join", "(", "args", ".", "data_path", ",", "\"train\"", ")", ",", "\n", "transform", "=", "transform", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.runners.base.StandardDownstreamRunner.build_val_dataset": [[392, 395], ["torchvision.datasets.ImageFolder", "os.path.join"], "methods", ["None"], ["", "def", "build_val_dataset", "(", "self", ",", "args", ",", "transform", ")", ":", "\n", "            ", "return", "datasets", ".", "ImageFolder", "(", "os", ".", "path", ".", "join", "(", "args", ".", "data_path", ",", "\"val\"", ")", ",", "\n", "transform", "=", "transform", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.runners.base.StandardDownstreamRunner.build_dataset": [[396, 436], ["base.StandardDownstreamRunner.build_transform", "base.StandardDownstreamRunner.build_transform", "base.StandardDownstreamRunner.build_train_dataset", "base.StandardDownstreamRunner.build_val_dataset", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.SequentialSampler", "torch.utils.data.SequentialSampler", "torch.utils.data.SequentialSampler", "torch.utils.data.SequentialSampler", "torch.utils.data.SequentialSampler", "torch.utils.data.SequentialSampler", "torch.utils.data.SequentialSampler", "torch.utils.data.SequentialSampler", "torch.utils.data.SequentialSampler", "hirl.get_world_size", "hirl.get_world_size", "hirl.get_rank", "hirl.get_rank", "print", "int", "len", "hirl.get_world_size", "hirl.get_world_size", "hirl.get_world_size", "hirl.get_world_size", "hirl.get_rank", "hirl.get_rank"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.downstream.finetune.FinetuneRunner.build_transform", "home.repos.pwc.inspect_result.hirl-team_hirl.downstream.finetune.FinetuneRunner.build_transform", "home.repos.pwc.inspect_result.hirl-team_hirl.transfer.finetune_places.Places205FinetuneRunner.build_train_dataset", "home.repos.pwc.inspect_result.hirl-team_hirl.transfer.finetune_places.Places205FinetuneRunner.build_val_dataset", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_world_size", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_world_size", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_rank", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_rank", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_world_size", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_world_size", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_world_size", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_world_size", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_rank", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_rank"], ["", "def", "build_dataset", "(", "self", ",", "args", ")", ":", "\n", "        ", "\"\"\"\n        downstream dataset has its training and valid dataset. \n        \"\"\"", "\n", "transform_train", "=", "self", ".", "build_transform", "(", "True", ",", "args", ")", "\n", "transform_val", "=", "self", ".", "build_transform", "(", "False", ",", "args", ")", "\n", "\n", "dataset_train", "=", "self", ".", "build_train_dataset", "(", "args", ",", "transform_train", ")", "\n", "dataset_val", "=", "self", ".", "build_val_dataset", "(", "args", ",", "transform_val", ")", "\n", "\n", "sampler_train", "=", "torch", ".", "utils", ".", "data", ".", "DistributedSampler", "(", "\n", "dataset_train", ",", "num_replicas", "=", "dist_utils", ".", "get_world_size", "(", ")", ",", "rank", "=", "dist_utils", ".", "get_rank", "(", ")", ",", "shuffle", "=", "True", ")", "\n", "\n", "if", "args", ".", "dist_eval", ":", "\n", "            ", "if", "len", "(", "dataset_val", ")", "%", "dist_utils", ".", "get_world_size", "(", ")", "!=", "0", ":", "\n", "                ", "print", "(", "'Warning: Enabling distributed evaluation with an eval dataset not divisible by process number. '", "\n", "'This will slightly alter validation results as extra duplicate entries are added to achieve '", "\n", "'equal num of samples per-process.'", ")", "\n", "", "sampler_val", "=", "torch", ".", "utils", ".", "data", ".", "DistributedSampler", "(", "\n", "dataset_val", ",", "num_replicas", "=", "dist_utils", ".", "get_world_size", "(", ")", ",", "rank", "=", "dist_utils", ".", "get_rank", "(", ")", ",", "shuffle", "=", "True", ")", "# shuffle=True to reduce monitor bias", "\n", "", "else", ":", "\n", "            ", "sampler_val", "=", "torch", ".", "utils", ".", "data", ".", "SequentialSampler", "(", "dataset_val", ")", "\n", "\n", "", "loader_train", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset_train", ",", "sampler", "=", "sampler_train", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ",", "\n", "pin_memory", "=", "True", ",", "drop_last", "=", "True", ",", "\n", ")", "\n", "loader_val", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset_val", ",", "sampler", "=", "sampler_val", ",", "\n", "batch_size", "=", "int", "(", "args", ".", "batch_size", ")", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ",", "\n", "pin_memory", "=", "True", ",", "drop_last", "=", "False", "\n", ")", "\n", "\n", "self", ".", "dataset_train", "=", "dataset_train", "\n", "self", ".", "dataset_val", "=", "dataset_val", "\n", "self", ".", "loader_train", "=", "loader_train", "\n", "self", ".", "loader_val", "=", "loader_val", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.runners.base.StandardDownstreamRunner.build_model": [[437, 467], ["torch.SyncBatchNorm.convert_sync_batchnorm.cuda", "args.get", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "base.StandardDownstreamRunner.build_criterion", "hirl.backbones.vision_transformer.__dict__.keys", "hirl.backbones.vision_transformer.__dict__.keys", "torch.SyncBatchNorm.convert_sync_batchnorm", "torch.SyncBatchNorm.convert_sync_batchnorm", "torch.SyncBatchNorm.convert_sync_batchnorm", "torchvision.models.resnet.__dict__.keys"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.downstream.finetune.FinetuneRunner.build_criterion"], ["", "def", "build_model", "(", "self", ",", "args", ")", ":", "\n", "        ", "\"\"\"\n        specific tricks:\n        - use_syncbn: set True for swav/hirl/mocov2...semisup evaluation.\n        \"\"\"", "\n", "if", "args", ".", "arch", "in", "vt", ".", "__dict__", ".", "keys", "(", ")", ":", "\n", "            ", "model", "=", "vt", ".", "__dict__", "[", "args", ".", "arch", "]", "(", "\n", "patch_size", "=", "args", ".", "patch_size", ",", "\n", "use_mean_pooling", "=", "args", ".", "use_mean_pooling", ",", "\n", "drop_path_rate", "=", "args", ".", "drop_path_rate", ",", "\n", "num_classes", "=", "args", ".", "num_classes", ",", "\n", "use_head", "=", "True", "\n", ")", "\n", "", "elif", "args", ".", "arch", "in", "resnet", ".", "__dict__", ".", "keys", "(", ")", ":", "\n", "            ", "model", "=", "resnet", ".", "__dict__", "[", "args", ".", "arch", "]", "(", "num_classes", "=", "args", ".", "num_classes", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "model", "=", "model", ".", "cuda", "(", ")", "\n", "\n", "use_syncbn", "=", "args", ".", "get", "(", "\"use_syncbn\"", ",", "False", ")", "\n", "if", "use_syncbn", ":", "\n", "            ", "model", "=", "nn", ".", "SyncBatchNorm", ".", "convert_sync_batchnorm", "(", "model", ")", "\n", "\n", "", "model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "model", ",", "device_ids", "=", "[", "args", ".", "gpu", "]", ")", "\n", "model_without_ddp", "=", "model", ".", "module", "\n", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "model_without_ddp", "=", "model_without_ddp", "\n", "\n", "self", ".", "build_criterion", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.runners.base.StandardDownstreamRunner.build_criterion": [[468, 476], ["torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss"], "methods", ["None"], ["", "def", "build_criterion", "(", "self", ",", "args", ")", ":", "\n", "        ", "\"\"\"\n        build criterion is called after build model. \n        For a standard downstream runner, just use nn.CrossEntropy\n\n        \"\"\"", "\n", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "self", ".", "criterion", "=", "criterion", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.runners.base.StandardDownstreamRunner.build_optimizer": [[477, 534], ["print", "print", "print", "print", "hirl.get_world_size", "hirl.get_world_size", "print", "getattr", "hirl.utils.misc.param_groups_lrd", "hirl.utils.misc.param_groups_lrd", "getattr", "print", "apex.parallel.LARC.LARC", "print", "hirl.utils.misc.get_params_groups", "hirl.utils.misc.get_params_groups", "base.StandardDownstreamRunner.model_without_ddp.named_parameters", "base.StandardDownstreamRunner.model_without_ddp.parameters", "list", "list", "head_params.append", "trunk_params.append"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_world_size", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_world_size", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.param_groups_lrd", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.param_groups_lrd", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.get_params_groups", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.get_params_groups"], ["", "def", "build_optimizer", "(", "self", ",", "args", ")", ":", "\n", "        ", "\"\"\"\n        a standard optimizer building function that support \n        every optimizer. Some specific tricks supported:\n        - layer decay (MAE, iBOT finetune): support applying \n            layer-wise learning rate decay on the optimizer\n        - no weight decay on bias\n        - different learning rate from trunk and head\n        \"\"\"", "\n", "## batch size linear scaling rule", "\n", "eff_batch_size", "=", "args", ".", "batch_size", "*", "args", ".", "accum_iter", "*", "dist_utils", ".", "get_world_size", "(", ")", "\n", "args", ".", "lr", "=", "args", ".", "lr", "*", "eff_batch_size", "/", "256", "\n", "\n", "print", "(", "\"actual lr: %.2e\"", "%", "args", ".", "lr", ")", "\n", "\n", "print", "(", "\"accumulate grad iterations: %d\"", "%", "args", ".", "accum_iter", ")", "\n", "print", "(", "\"effective batch size: %d\"", "%", "eff_batch_size", ")", "\n", "\n", "optimizer_class", "=", "args", ".", "optimizer", ".", "name", "\n", "optimizer_params", "=", "args", ".", "optimizer", ".", "params", "\n", "\n", "layer_decay", "=", "args", ".", "optimizer", ".", "layer_decay", "\n", "\n", "if", "layer_decay", ":", "\n", "            ", "print", "(", "\"enable layer-wise learning rate decay with a factor of {}\"", ".", "format", "(", "layer_decay", ")", ")", "\n", "no_weight_decay_list", "=", "getattr", "(", "self", ".", "model_without_ddp", ",", "\"no_weight_decay\"", ",", "[", "]", ")", "\n", "param_groups", "=", "misc", ".", "param_groups_lrd", "(", "self", ".", "model_without_ddp", ",", "\n", "args", ".", "optimizer", ".", "params", ".", "weight_decay", ",", "\n", "no_weight_decay_list", "=", "no_weight_decay_list", ",", "\n", "layer_decay", "=", "layer_decay", "\n", ")", "\n", "", "elif", "args", ".", "optimizer", ".", "no_weight_decay_on_bias", ":", "\n", "            ", "print", "(", "\"no weight decay on bias enabled!\"", ")", "\n", "param_groups", "=", "misc", ".", "get_params_groups", "(", "self", ".", "model_without_ddp", ")", "\n", "", "elif", "args", ".", "lr_last_layer", ":", "# note: this  lr is not scaled according to batch size.", "\n", "## if pecified different lr, apply it to head/fc", "\n", "            ", "trunk_params", ",", "head_params", "=", "list", "(", ")", ",", "list", "(", ")", "\n", "for", "name", ",", "param", "in", "self", ".", "model_without_ddp", ".", "named_parameters", "(", ")", ":", "\n", "                ", "if", "\"fc\"", "in", "name", "or", "\"head\"", "in", "name", ":", "\n", "                    ", "head_params", ".", "append", "(", "param", ")", "\n", "", "else", ":", "\n", "                    ", "trunk_params", ".", "append", "(", "param", ")", "\n", "", "", "param_groups", "=", "[", "{", "\"params\"", ":", "trunk_params", "}", ",", "{", "\"params\"", ":", "head_params", ",", "\"lr\"", ":", "args", ".", "lr_last_layer", "}", "]", "\n", "\n", "", "else", ":", "\n", "            ", "param_groups", "=", "self", ".", "model_without_ddp", ".", "parameters", "(", ")", "\n", "\n", "\n", "", "optimizer", "=", "getattr", "(", "torch", ".", "optim", ",", "optimizer_class", ")", "(", "param_groups", ",", "lr", "=", "args", ".", "lr", ",", "\n", "**", "optimizer_params", ")", "\n", "\n", "if", "args", ".", "optimizer", ".", "use_lars", ":", "\n", "            ", "print", "(", "\"use lars optimizer\"", ")", "\n", "optimizer", "=", "LARC", "(", "optimizer", "=", "optimizer", ",", "trust_coefficient", "=", "0.001", ",", "clip", "=", "False", ")", "\n", "\n", "", "print", "(", "\"optimizer: {}\"", ".", "format", "(", "optimizer", ")", ")", "\n", "self", ".", "optimizer", "=", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.runners.base.StandardDownstreamRunner.build_scaler": [[535, 545], ["args.get", "hirl.utils.misc.NativeScalerWithGradNormCount", "hirl.utils.misc.NativeScalerWithGradNormCount", "print"], "methods", ["None"], ["", "def", "build_scaler", "(", "self", ",", "args", ")", ":", "\n", "        ", "\"\"\"\n        support for auto mix precision (amp)\n        \"\"\"", "\n", "use_fp16", "=", "args", ".", "get", "(", "\"use_fp16\"", ",", "False", ")", "\n", "args", ".", "use_fp16", "=", "use_fp16", "\n", "if", "args", ".", "use_fp16", ":", "\n", "            ", "print", "(", "\"auto mix precision enabled!\"", ")", "\n", "", "loss_scaler", "=", "NativeScaler", "(", "args", ".", "use_fp16", ")", "\n", "self", ".", "loss_scaler", "=", "loss_scaler", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.runners.base.StandardDownstreamRunner.load_pretrain": [[546, 587], ["torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "args.get", "all", "print", "base.StandardDownstreamRunner.model_without_ddp.state_dict", "list", "checkpoint_model.keys", "print", "isinstance", "base.StandardDownstreamRunner.model_without_ddp.load_state_dict", "print", "zip", "isinstance", "print", "checkpoint_model.pop", "hirl.utils.misc.interpolate_pos_embed", "hirl.utils.misc.interpolate_pos_embed", "base.StandardDownstreamRunner.model.parameters", "base.StandardDownstreamRunner.model_without_ddp.parameters", "k.startswith", "k.replace", "list.append", "torch.allclose", "torch.allclose", "torch.allclose", "torch.allclose", "torch.allclose", "torch.allclose", "torch.allclose", "torch.allclose", "torch.allclose", "print", "print", "hirl.backbones.vision_transformer.trunc_normal_", "hirl.backbones.vision_transformer.trunc_normal_", "checkpoint_model.keys", "checkpoint_model.items", "checkpoint_model.items", "k.startswith", "len"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.NativeScalerWithGradNormCount.state_dict", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.NativeScalerWithGradNormCount.load_state_dict", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.interpolate_pos_embed", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.interpolate_pos_embed", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.trunc_normal_", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.trunc_normal_"], ["", "def", "load_pretrain", "(", "self", ",", "args", ")", ":", "\n", "        ", "\"\"\"\n        load pretrain from a checkpoint.\n        \"\"\"", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "pretrained", ",", "map_location", "=", "\"cpu\"", ")", "\n", "model_prefix", "=", "args", ".", "get", "(", "\"model_prefix\"", ",", "\"model\"", ")", "\n", "checkpoint_model", "=", "checkpoint", "[", "model_prefix", "]", "\n", "## automatically remove ddp prefix", "\n", "if", "all", "(", "[", "k", ".", "startswith", "(", "\"module.\"", ")", "for", "k", "in", "checkpoint_model", ".", "keys", "(", ")", "]", ")", ":", "\n", "            ", "print", "(", "\"remove ddp prefix from model.\"", ")", "\n", "checkpoint_model", "=", "{", "k", ".", "replace", "(", "\"module.\"", ",", "\"\"", ")", ":", "v", "for", "k", ",", "v", "in", "checkpoint_model", ".", "items", "(", ")", "}", "\n", "\n", "", "print", "(", "\"backbone prefix: {}\"", ".", "format", "(", "args", ".", "backbone_prefix", ")", ")", "\n", "if", "args", ".", "backbone_prefix", ":", "\n", "            ", "checkpoint_model", "=", "{", "k", "[", "len", "(", "args", ".", "backbone_prefix", ")", "+", "1", ":", "]", ":", "v", "for", "k", ",", "v", "in", "checkpoint_model", ".", "items", "(", ")", "if", "k", ".", "startswith", "(", "args", ".", "backbone_prefix", ")", "}", "\n", "\n", "", "state_dict", "=", "self", ".", "model_without_ddp", ".", "state_dict", "(", ")", "\n", "## remove head / fc", "\n", "removed_keys", "=", "list", "(", ")", "\n", "for", "key", "in", "checkpoint_model", ".", "keys", "(", ")", ":", "\n", "            ", "if", "key", "not", "in", "state_dict", "or", "key", "in", "self", ".", "filtered_keys", "or", "checkpoint_model", "[", "key", "]", ".", "shape", "!=", "state_dict", "[", "key", "]", ".", "shape", ":", "\n", "                ", "removed_keys", ".", "append", "(", "key", ")", "\n", "\n", "", "", "print", "(", "\"removed keys in pretrained model: {}\"", ".", "format", "(", "removed_keys", ")", ")", "\n", "for", "key", "in", "removed_keys", ":", "\n", "            ", "checkpoint_model", ".", "pop", "(", "key", ")", "\n", "\n", "", "if", "isinstance", "(", "self", ".", "model_without_ddp", ",", "VisionTransformer", ")", ":", "\n", "            ", "misc", ".", "interpolate_pos_embed", "(", "self", ".", "model_without_ddp", ",", "checkpoint_model", ")", "\n", "\n", "", "msg", "=", "self", ".", "model_without_ddp", ".", "load_state_dict", "(", "checkpoint_model", ",", "strict", "=", "False", ")", "\n", "print", "(", "\"loading message: {}\"", ".", "format", "(", "msg", ")", ")", "\n", "\n", "for", "param1", ",", "param2", "in", "zip", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "self", ".", "model_without_ddp", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "if", "not", "torch", ".", "allclose", "(", "param1", ",", "param2", ")", ":", "\n", "                ", "print", "(", "\"unmatch between model and model_without_ddp detected!!!\"", ")", "\n", "\n", "", "", "if", "isinstance", "(", "self", ".", "model_without_ddp", ",", "VisionTransformer", ")", ":", "\n", "            ", "if", "args", ".", "trunc_normal", ":", "\n", "                ", "print", "(", "\"manually initialize the fc layer\"", ")", "\n", "trunc_normal_", "(", "self", ".", "model_without_ddp", ".", "head", ".", "weight", ",", "std", "=", "2e-5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.runners.base.StandardDownstreamRunner.resume": [[588, 607], ["os.path.exists", "base.StandardDownstreamRunner.load_pretrain", "isinstance", "os.path.exists", "base.StandardDownstreamRunner.restart_from_checkpoint"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.runners.base.StandardDownstreamRunner.load_pretrain", "home.repos.pwc.inspect_result.hirl-team_hirl.runners.base.BaseRunner.restart_from_checkpoint"], ["", "", "", "def", "resume", "(", "self", ",", "args", ")", ":", "\n", "        ", "\"\"\"\n        For a downstream /finetune runner. The resume function \n        should also act as a pretrain loading function.\n        \"\"\"", "\n", "## load pretrain", "\n", "if", "os", ".", "path", ".", "exists", "(", "args", ".", "pretrained", ")", ":", "\n", "            ", "self", ".", "load_pretrain", "(", "args", ")", "\n", "\n", "", "to_restore", "=", "{", "\"epoch\"", ":", "0", "}", "\n", "if", "isinstance", "(", "args", ".", "resume", ",", "str", ")", "and", "os", ".", "path", ".", "exists", "(", "args", ".", "resume", ")", ":", "\n", "            ", "self", ".", "restart_from_checkpoint", "(", "args", ".", "resume", ",", "\n", "run_variables", "=", "to_restore", ",", "\n", "model", "=", "self", ".", "model", ",", "\n", "optimizer", "=", "self", ".", "optimizer", ",", "\n", "loss_scaler", "=", "self", ".", "loss_scaler", "\n", ")", "\n", "", "start_epoch", "=", "to_restore", "[", "\"epoch\"", "]", "\n", "self", ".", "start_epoch", "=", "start_epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.runners.base.StandardDownstreamRunner.set_epoch": [[608, 614], ["base.StandardDownstreamRunner.loader_train.sampler.set_epoch"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.pretrain.ibot.iBOTRunner.set_epoch"], ["", "def", "set_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "\"\"\"\n        set epochs before training. By default, set the \n        distributed sampler epoch.\n        \"\"\"", "\n", "self", ".", "loader_train", ".", "sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.runners.base.StandardDownstreamRunner.custom_save_dict": [[615, 621], ["base.StandardDownstreamRunner.model.state_dict", "base.StandardDownstreamRunner.optimizer.state_dict", "base.StandardDownstreamRunner.loss_scaler.state_dict"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.NativeScalerWithGradNormCount.state_dict", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.NativeScalerWithGradNormCount.state_dict", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.NativeScalerWithGradNormCount.state_dict"], ["", "@", "property", "\n", "def", "custom_save_dict", "(", "self", ")", ":", "\n", "        ", "return", "{", "\n", "'model'", ":", "self", ".", "model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "self", ".", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "\"loss_scaler\"", ":", "self", ".", "loss_scaler", ".", "state_dict", "(", ")", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.runners.base.StandardDownstreamRunner.run": [[623, 664], ["time.time", "print", "base.StandardDownstreamRunner.model.train", "range", "str", "print", "base.StandardDownstreamRunner.custom_end", "base.StandardDownstreamRunner.set_epoch", "base.StandardDownstreamRunner.train_one_epoch", "base.StandardDownstreamRunner.evaluate", "save_dict.update", "base.StandardDownstreamRunner.save_model", "hirl.is_main_process", "hirl.is_main_process", "print", "time.time", "datetime.timedelta", "base.StandardDownstreamRunner.args.to_dict", "f.write", "int", "base.StandardDownstreamRunner.items", "base.StandardDownstreamRunner.items", "json.dumps", "pathlib.Path"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.runners.base.StandardDownstreamRunner.custom_end", "home.repos.pwc.inspect_result.hirl-team_hirl.pretrain.ibot.iBOTRunner.set_epoch", "home.repos.pwc.inspect_result.hirl-team_hirl.downstream.finetune.FinetuneRunner.train_one_epoch", "home.repos.pwc.inspect_result.hirl-team_hirl.runners.base.StandardDownstreamRunner.evaluate", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.hirl-team_hirl.runners.base.BaseRunner.save_model", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.is_main_process", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.is_main_process"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        A standard running process for imagenet downstream tasks.\n        \"\"\"", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "max_accuracy", "=", "0.0", "\n", "print", "(", "f\"Start training for {self.args.epochs} epochs\"", ")", "\n", "self", ".", "model", ".", "train", "(", ")", "\n", "for", "epoch", "in", "range", "(", "self", ".", "start_epoch", ",", "self", ".", "args", ".", "epochs", ")", ":", "\n", "            ", "self", ".", "set_epoch", "(", "epoch", ")", "\n", "train_stats", "=", "self", ".", "train_one_epoch", "(", "epoch", ")", "\n", "val_stats", "=", "self", ".", "evaluate", "(", ")", "\n", "# save model", "\n", "save_dict", "=", "{", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'args'", ":", "self", ".", "args", ".", "to_dict", "(", ")", ",", "\n", "}", "\n", "save_dict", ".", "update", "(", "self", ".", "custom_save_dict", ")", "\n", "\n", "self", ".", "save_model", "(", "save_dict", ",", "epoch", ")", "\n", "\n", "log_stats", "=", "{", "**", "{", "f'train_{k}'", ":", "v", "for", "k", ",", "v", "in", "train_stats", ".", "items", "(", ")", "}", ",", "\n", "**", "{", "f'test_{k}'", ":", "v", "for", "k", ",", "v", "in", "val_stats", ".", "items", "(", ")", "}", ",", "\n", "'epoch'", ":", "epoch", "}", "\n", "\n", "if", "dist_utils", ".", "is_main_process", "(", ")", ":", "\n", "                ", "with", "(", "Path", "(", "self", ".", "args", ".", "output_dir", ")", "/", "\"log.txt\"", ")", ".", "open", "(", "\"a\"", ")", "as", "f", ":", "\n", "                    ", "f", ".", "write", "(", "json", ".", "dumps", "(", "log_stats", ")", "+", "\"\\n\"", ")", "\n", "\n", "## best logging", "\n", "", "", "if", "max_accuracy", "<", "val_stats", "[", "\"acc1\"", "]", ":", "\n", "                ", "max_accuracy", "=", "val_stats", "[", "\"acc1\"", "]", "\n", "\n", "", "print", "(", "f'Max accuracy: {max_accuracy:.2f}%'", ")", "\n", "\n", "\n", "", "total_time", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "total_time_str", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "int", "(", "total_time", ")", ")", ")", "\n", "print", "(", "'Training time {}'", ".", "format", "(", "total_time_str", ")", ")", "\n", "self", ".", "metric", "=", "max_accuracy", "\n", "self", ".", "custom_end", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.runners.base.StandardDownstreamRunner.train_one_epoch": [[665, 667], ["None"], "methods", ["None"], ["", "def", "train_one_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.runners.base.StandardDownstreamRunner.evaluate": [[668, 702], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "hirl.utils.misc.MetricLogger", "hirl.utils.misc.MetricLogger", "base.StandardDownstreamRunner.model.eval", "hirl.utils.misc.MetricLogger.log_every", "hirl.utils.misc.MetricLogger.synchronize_between_processes", "print", "images.cuda.cuda.cuda", "target.cuda.cuda.cuda", "timm.utils.accuracy", "hirl.utils.misc.MetricLogger.update", "hirl.utils.misc.MetricLogger.meters[].update", "hirl.utils.misc.MetricLogger.meters[].update", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "base.StandardDownstreamRunner.model", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "acc1.item", "acc5.item", "hirl.utils.misc.MetricLogger.meters.items", "torch.nn.CrossEntropyLoss.item"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.MetricLogger.log_every", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.MetricLogger.synchronize_between_processes", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.accuracy", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.AverageMeter.update"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "evaluate", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        a standard downstream evaluate process.\n        \"\"\"", "\n", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n", "metric_logger", "=", "misc", ".", "MetricLogger", "(", "delimiter", "=", "\"  \"", ")", "\n", "header", "=", "'Test:'", "\n", "# switch to evaluation mode", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n", "for", "batch", "in", "metric_logger", ".", "log_every", "(", "self", ".", "loader_val", ",", "10", ",", "header", ")", ":", "\n", "            ", "images", ",", "target", "=", "batch", "[", "0", "]", ",", "batch", "[", "-", "1", "]", "\n", "images", "=", "images", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "target", "=", "target", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "# compute output", "\n", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", "self", ".", "args", ".", "use_fp16", ")", ":", "\n", "                ", "output", "=", "self", ".", "model", "(", "images", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "\n", "", "acc1", ",", "acc5", "=", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "\n", "batch_size", "=", "images", ".", "shape", "[", "0", "]", "\n", "metric_logger", ".", "update", "(", "loss", "=", "loss", ".", "item", "(", ")", ")", "\n", "metric_logger", ".", "meters", "[", "'acc1'", "]", ".", "update", "(", "acc1", ".", "item", "(", ")", ",", "n", "=", "batch_size", ")", "\n", "metric_logger", ".", "meters", "[", "'acc5'", "]", ".", "update", "(", "acc5", ".", "item", "(", ")", ",", "n", "=", "batch_size", ")", "\n", "# gather the stats from all processes", "\n", "", "metric_logger", ".", "synchronize_between_processes", "(", ")", "\n", "print", "(", "'* Acc@1 {top1.global_avg:.3f} Acc@5 {top5.global_avg:.3f} loss {losses.global_avg:.3f}'", "\n", ".", "format", "(", "top1", "=", "metric_logger", ".", "acc1", ",", "top5", "=", "metric_logger", ".", "acc5", ",", "losses", "=", "metric_logger", ".", "loss", ")", ")", "\n", "\n", "return", "{", "k", ":", "meter", ".", "global_avg", "for", "k", ",", "meter", "in", "metric_logger", ".", "meters", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.runners.base.StandardDownstreamRunner.adjust_learning_rate": [[703, 705], ["None"], "methods", ["None"], ["", "def", "adjust_learning_rate", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hirl-team_hirl.transfer.base.Places205Dataset.__init__": [[5, 24], ["os.path.expanduser", "os.path.join", "os.path.join", "os.path.join", "open", "file.readline", "file.readline.strip", "file.readline.split", "base.Places205Dataset.img_files.append", "base.Places205Dataset.labels.append", "file.readline", "int"], "methods", ["None"], ["import", "sys", "\n", "import", "time", "\n", "from", "pathlib", "import", "Path", "\n", "\n", "import", "hirl", ".", "models", "as", "pretrain_models", "\n", "import", "hirl", ".", "utils", ".", "dist", "as", "dist_utils", "\n", "import", "torch", "\n", "import", "torch", ".", "backends", ".", "cudnn", "as", "cudnn", "\n", "import", "torch", ".", "nn", "as", "nn", "\n", "import", "torchvision", ".", "datasets", "as", "torchvision_dataset", "\n", "from", "addict", "import", "Dict", "as", "adict", "\n", "from", "apex", ".", "parallel", ".", "LARC", "import", "LARC", "\n", "from", "hirl", "import", "utils", "\n", "from", "hirl", ".", "backbones", "import", "vision_transformer", "as", "vt", "\n", "from", "hirl", ".", "backbones", ".", "vision_transformer", "import", "VisionTransformer", ",", "trunc_normal_", "\n", "from", "hirl", ".", "utils", "import", "misc", "\n", "from", "hirl", ".", "utils", ".", "misc", "import", "NativeScalerWithGradNormCount", "as", "NativeScaler", "\n", "from", "timm", ".", "utils", "import", "accuracy", "\n", "from", "torchvision", "import", "datasets", "\n", "from", "torchvision", ".", "models", "import", "resnet", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.transfer.base.Places205Dataset.__getitem__": [[25, 41], ["os.path.join", "PIL.Image.open().convert", "base.Places205Dataset.transform", "base.Places205Dataset.target_transform", "PIL.Image.open"], "methods", ["None"], ["\n", "\n", "class", "BaseRunner", "(", "object", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "args", ":", "adict", ",", "resume", "=", "True", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "dist_utils", ".", "init_distributed_mode", "(", "self", ".", "args", ")", "\n", "self", ".", "local_rank", "=", "args", ".", "local_rank", "\n", "self", ".", "rank", "=", "dist_utils", ".", "get_rank", "(", ")", "\n", "misc", ".", "fix_random_seeds", "(", "self", ".", "args", ".", "seed", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "print", "(", "\"\\n\"", ".", "join", "(", "\"%s: %s\"", "%", "(", "k", ",", "str", "(", "v", ")", ")", "for", "k", ",", "v", "in", "sorted", "(", "args", ".", "to_dict", "(", ")", ".", "items", "(", ")", ")", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "args", ".", "output_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "args", ".", "output_dir", ",", "exist_ok", "=", "True", ")", "\n", "", "self", ".", "custom_initialize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.transfer.base.Places205Dataset.__len__": [[42, 44], ["len"], "methods", ["None"], ["self", ".", "build_dataset", "(", "self", ".", "args", ")", "\n", "self", ".", "build_model", "(", "self", ".", "args", ")", "\n", "self", ".", "build_optimizer", "(", "self", ".", "args", ")", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.transfer.finetune_places.Places205FinetuneRunner.build_train_dataset": [[5, 8], ["base.Places205Dataset"], "methods", ["None"], ["    ", "def", "build_train_dataset", "(", "self", ",", "args", ",", "transform", ")", ":", "\n", "        ", "dataset", "=", "Places205Dataset", "(", "args", ".", "data_path", ",", "\"train\"", ",", "transform", ")", "\n", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.transfer.finetune_places.Places205FinetuneRunner.build_val_dataset": [[9, 12], ["base.Places205Dataset"], "methods", ["None"], ["", "def", "build_val_dataset", "(", "self", ",", "args", ",", "transform", ")", ":", "\n", "        ", "dataset", "=", "Places205Dataset", "(", "args", ".", "data_path", ",", "\"val\"", ",", "transform", ")", "\n", "return", "dataset", "", "", "", ""]], "home.repos.pwc.inspect_result.hirl-team_hirl.downstream.lincls.LinclsRunner.build_transform": [[19, 33], ["torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.RandomResizedCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize"], "methods", ["None"], ["def", "build_transform", "(", "self", ",", "is_train", ",", "args", ")", ":", "\n", "        ", "if", "is_train", ":", "\n", "            ", "return", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "224", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.485", ",", "0.456", ",", "0.406", ")", ",", "(", "0.229", ",", "0.224", ",", "0.225", ")", ")", ",", "\n", "]", ")", "\n", "", "else", ":", "\n", "            ", "return", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "256", ",", "interpolation", "=", "3", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.485", ",", "0.456", ",", "0.406", ")", ",", "(", "0.229", ",", "0.224", ",", "0.225", ")", ")", ",", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.downstream.lincls.LinclsRunner.build_model": [[35, 66], ["args.get", "torch.nn.parallel.DistributedDataParallel.cuda", "torch.nn.parallel.DistributedDataParallel.cuda", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "lincls.LinclsRunner.fix_trunk", "lincls.LinclsRunner.build_criterion", "dict", "hirl.backbones.vision_transformer.__dict__.keys", "args.get", "torch.Linear", "torch.Linear", "torchvision.models.resnet.__dict__.keys", "int"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.downstream.lincls.LinclsRunner.fix_trunk", "home.repos.pwc.inspect_result.hirl-team_hirl.downstream.finetune.FinetuneRunner.build_criterion"], ["", "", "def", "build_model", "(", "self", ",", "args", ")", ":", "\n", "        ", "arch_kwargs", "=", "args", ".", "get", "(", "\"arch_kwargs\"", ",", "dict", "(", ")", ")", "\n", "if", "args", ".", "arch", "in", "vt", ".", "__dict__", ".", "keys", "(", ")", ":", "\n", "            ", "model", "=", "vt", ".", "__dict__", "[", "args", ".", "arch", "]", "(", "\n", "patch_size", "=", "args", ".", "patch_size", ",", "\n", "use_mean_pooling", "=", "args", ".", "use_mean_pooling", ",", "\n", "drop_path_rate", "=", "args", ".", "drop_path_rate", ",", "\n", "num_classes", "=", "args", ".", "num_classes", ",", "\n", "use_head", "=", "True", ",", "**", "arch_kwargs", "\n", ")", "\n", "## special head dimension for n_last_blocks", "\n", "if", "args", ".", "get", "(", "\"n_last_blocks\"", ",", "0", ")", ":", "\n", "                ", "embed_dim", "=", "model", ".", "embed_dim", "*", "(", "args", ".", "n_last_blocks", "+", "int", "(", "args", ".", "use_mean_pooling", ")", ")", "\n", "del", "model", ".", "head", "\n", "model", ".", "head", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "args", ".", "num_classes", ")", "\n", "", "", "elif", "args", ".", "arch", "in", "resnet", ".", "__dict__", ".", "keys", "(", ")", ":", "\n", "            ", "model", "=", "resnet", ".", "__dict__", "[", "args", ".", "arch", "]", "(", "num_classes", "=", "args", ".", "num_classes", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "model", "=", "model", ".", "cuda", "(", ")", "\n", "model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "model", ",", "device_ids", "=", "[", "args", ".", "gpu", "]", ",", "\n", "find_unused_parameters", "=", "True", ")", "\n", "model_without_ddp", "=", "model", ".", "module", "\n", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "model_without_ddp", "=", "model_without_ddp", "\n", "\n", "## lincls specific: fix trunk", "\n", "self", ".", "fix_trunk", "(", "args", ")", "\n", "self", ".", "build_criterion", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.downstream.lincls.LinclsRunner.fix_trunk": [[67, 82], ["lincls.LinclsRunner.model_without_ddp.named_parameters", "lincls.LinclsRunner.model_without_ddp.fc.parameters", "lincls.LinclsRunner.model_without_ddp.fc.weight.data.normal_", "lincls.LinclsRunner.model_without_ddp.fc.bias.data.zero_", "lincls.LinclsRunner.model_without_ddp.head.parameters", "lincls.LinclsRunner.model_without_ddp.head.weight.data.normal_", "lincls.LinclsRunner.model_without_ddp.head.bias.data.zero_"], "methods", ["None"], ["", "def", "fix_trunk", "(", "self", ",", "args", ")", ":", "\n", "        ", "for", "name", ",", "param", "in", "self", ".", "model_without_ddp", ".", "named_parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "\n", "", "if", "\"resnet\"", "in", "args", ".", "arch", ":", "#resnet ", "\n", "            ", "for", "param", "in", "self", ".", "model_without_ddp", ".", "fc", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "True", "\n", "## init fc layer (used in mocov2)", "\n", "", "self", ".", "model_without_ddp", ".", "fc", ".", "weight", ".", "data", ".", "normal_", "(", "mean", "=", "0.0", ",", "std", "=", "0.01", ")", "\n", "self", ".", "model_without_ddp", ".", "fc", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "\"vit\"", "in", "args", ".", "arch", ":", "\n", "            ", "for", "param", "in", "self", ".", "model_without_ddp", ".", "head", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "True", "\n", "", "self", ".", "model_without_ddp", ".", "head", ".", "weight", ".", "data", ".", "normal_", "(", "mean", "=", "0.0", ",", "std", "=", "0.01", ")", "\n", "self", ".", "model_without_ddp", ".", "head", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.downstream.lincls.LinclsRunner.build_criterion": [[83, 86], ["torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss"], "methods", ["None"], ["", "", "def", "build_criterion", "(", "self", ",", "args", ")", ":", "\n", "        ", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "self", ".", "criterion", "=", "criterion", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.downstream.lincls.LinclsRunner.train_one_epoch": [[87, 148], ["lincls.LinclsRunner.model.train", "hirl.utils.misc.MetricLogger", "hirl.utils.misc.MetricLogger.add_meter", "lincls.LinclsRunner.args.get", "lincls.LinclsRunner.args.get", "lincls.LinclsRunner.args.get", "lincls.LinclsRunner.args.get", "lincls.LinclsRunner.optimizer.zero_grad", "enumerate", "hirl.utils.misc.MetricLogger.synchronize_between_processes", "print", "hirl.utils.misc.SmoothedValue", "len", "hirl.utils.misc.MetricLogger.log_every", "samples.cuda.cuda.cuda", "targets.cuda.cuda.cuda", "lincls.LinclsRunner.item", "lincls.LinclsRunner.loss_scaler", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "hirl.utils.misc.MetricLogger.update", "hirl.utils.misc.MetricLogger.update", "lincls.LinclsRunner.adjust_learning_rate", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "lincls.LinclsRunner.criterion", "math.isfinite", "print", "sys.exit", "lincls.LinclsRunner.optimizer.zero_grad", "hirl.utils.misc.MetricLogger.meters.items", "len", "lincls.LinclsRunner.model_without_ddp.get_intermediate_layers", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "lincls.LinclsRunner.model_without_ddp.head", "lincls.LinclsRunner.model", "lincls.LinclsRunner.model.parameters", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "outputs.reshape.reshape.reshape", "outputs.reshape.reshape.unsqueeze", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.MetricLogger.add_meter", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.MetricLogger.synchronize_between_processes", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.MetricLogger.log_every", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.hirl-team_hirl.pretrain.moco.MoCoRunner.adjust_learning_rate", "home.repos.pwc.inspect_result.hirl-team_hirl.backbones.vision_transformer.VisionTransformer.get_intermediate_layers"], ["", "def", "train_one_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "model", ".", "train", "(", "True", ")", "\n", "metric_logger", "=", "misc", ".", "MetricLogger", "(", "delimiter", "=", "\"  \"", ")", "\n", "metric_logger", ".", "add_meter", "(", "'lr'", ",", "misc", ".", "SmoothedValue", "(", "window_size", "=", "1", ",", "fmt", "=", "'{value:.6f}'", ")", ")", "\n", "header", "=", "'Epoch: [{}/{}]'", ".", "format", "(", "epoch", ",", "self", ".", "args", ".", "epochs", ")", "\n", "log_interval", "=", "self", ".", "args", ".", "get", "(", "\"log_interval\"", ",", "10", ")", "\n", "iter_per_epoch", "=", "self", ".", "args", ".", "get", "(", "\"iter_per_epoch\"", ",", "-", "1", ")", "\n", "iter_per_epoch", "=", "len", "(", "self", ".", "loader_train", ")", "if", "iter_per_epoch", "<", "0", "else", "iter_per_epoch", "\n", "\n", "accum_iter", "=", "self", ".", "args", ".", "get", "(", "\"accum_iter\"", ",", "1", ")", "\n", "clip_grad", "=", "self", ".", "args", ".", "get", "(", "\"clip_grad\"", ",", "None", ")", "\n", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "for", "it", ",", "(", "samples", ",", "targets", ")", "in", "enumerate", "(", "metric_logger", ".", "log_every", "(", "self", ".", "loader_train", ",", "log_interval", ",", "header", ")", ")", ":", "\n", "            ", "if", "it", ">=", "iter_per_epoch", ":", "\n", "                ", "break", "\n", "\n", "", "it", "=", "len", "(", "self", ".", "loader_train", ")", "*", "epoch", "+", "it", "# global training iteration", "\n", "# we use a per iteration (instead of per epoch) lr scheduler", "\n", "if", "it", "%", "accum_iter", "==", "0", ":", "# TODO: merge the code style", "\n", "                ", "self", ".", "adjust_learning_rate", "(", "self", ".", "optimizer", ",", "it", "/", "len", "(", "self", ".", "loader_train", ")", ",", "self", ".", "args", ")", "\n", "\n", "", "samples", "=", "samples", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "targets", "=", "targets", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", "self", ".", "args", ".", "use_fp16", ")", ":", "\n", "                ", "if", "\"vit\"", "in", "self", ".", "args", ".", "arch", "and", "self", ".", "args", ".", "n_last_blocks", ":", "\n", "                    ", "intermediate_out", "=", "self", ".", "model_without_ddp", ".", "get_intermediate_layers", "(", "samples", ",", "self", ".", "args", ".", "n_last_blocks", ")", "\n", "outputs", "=", "torch", ".", "cat", "(", "[", "x", "[", ":", ",", "0", "]", "for", "x", "in", "intermediate_out", "]", ",", "dim", "=", "-", "1", ")", "\n", "if", "self", ".", "args", ".", "use_mean_pooling", ":", "\n", "                        ", "outputs", "=", "torch", ".", "cat", "(", "(", "outputs", ".", "unsqueeze", "(", "-", "1", ")", ",", "torch", ".", "mean", "(", "intermediate_out", "[", "-", "1", "]", "[", ":", ",", "1", ":", "]", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ")", ",", "dim", "=", "-", "1", ")", "\n", "outputs", "=", "outputs", ".", "reshape", "(", "outputs", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "", "outputs", "=", "self", ".", "model_without_ddp", ".", "head", "(", "outputs", ")", "\n", "", "else", ":", "# normal inference", "\n", "                    ", "outputs", "=", "self", ".", "model", "(", "samples", ")", "\n", "\n", "", "loss", "=", "self", ".", "criterion", "(", "outputs", ",", "targets", ")", "\n", "\n", "", "loss_value", "=", "loss", ".", "item", "(", ")", "\n", "\n", "if", "not", "math", ".", "isfinite", "(", "loss_value", ")", ":", "\n", "                ", "print", "(", "\"Loss is {}, stopping training\"", ".", "format", "(", "loss_value", ")", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "loss", "=", "loss", "/", "accum_iter", "\n", "self", ".", "loss_scaler", "(", "loss", ",", "self", ".", "optimizer", ",", "parameters", "=", "self", ".", "model", ".", "parameters", "(", ")", ",", "\n", "update_grad", "=", "(", "it", "+", "1", ")", "%", "accum_iter", "==", "0", ",", "clip_grad", "=", "clip_grad", ")", "\n", "if", "(", "it", "+", "1", ")", "%", "accum_iter", "==", "0", ":", "\n", "                ", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "\n", "metric_logger", ".", "update", "(", "loss", "=", "loss_value", ")", "\n", "\n", "lr", "=", "self", ".", "optimizer", ".", "param_groups", "[", "0", "]", "[", "\"lr\"", "]", "\n", "metric_logger", ".", "update", "(", "lr", "=", "lr", ")", "\n", "\n", "", "metric_logger", ".", "synchronize_between_processes", "(", ")", "\n", "print", "(", "\"Averaged stats:\"", ",", "metric_logger", ")", "\n", "return", "{", "k", ":", "meter", ".", "global_avg", "for", "k", ",", "meter", "in", "metric_logger", ".", "meters", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.downstream.lincls.LinclsRunner.adjust_learning_rate": [[150, 168], ["math.cos"], "methods", ["None"], ["", "def", "adjust_learning_rate", "(", "self", ",", "optimizer", ",", "epoch", ",", "args", ")", ":", "\n", "        ", "if", "args", ".", "cos", ":", "\n", "            ", "if", "epoch", "<", "args", ".", "warmup_epochs", ":", "\n", "                ", "lr", "=", "args", ".", "lr", "*", "epoch", "/", "args", ".", "warmup_epochs", "\n", "", "else", ":", "\n", "                ", "lr", "=", "args", ".", "min_lr", "+", "(", "args", ".", "lr", "-", "args", ".", "min_lr", ")", "*", "0.5", "*", "(", "1.", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "(", "epoch", "-", "args", ".", "warmup_epochs", ")", "/", "(", "args", ".", "epochs", "-", "args", ".", "warmup_epochs", ")", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "lr", "=", "args", ".", "lr", "\n", "for", "milestone", "in", "args", ".", "schedule", ":", "\n", "                ", "lr", "*=", "0.1", "if", "epoch", ">=", "milestone", "else", "1.", "\n", "\n", "", "", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "            ", "if", "\"lr_scale\"", "in", "param_group", ":", "\n", "                ", "param_group", "[", "\"lr\"", "]", "=", "lr", "*", "param_group", "[", "\"lr_scale\"", "]", "\n", "", "else", ":", "\n", "                ", "param_group", "[", "\"lr\"", "]", "=", "lr", "\n", "", "", "return", "lr", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hirl-team_hirl.downstream.finetune.FinetuneRunner.build_transform": [[21, 67], ["args.get", "int", "t.append", "t.append", "t.append", "t.append", "torchvision.transforms.Compose", "timm.data.create_transform", "torchvision.transforms.Normalize", "torchvision.transforms.Compose", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.RandomResizedCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor"], "methods", ["None"], ["def", "build_transform", "(", "self", ",", "is_train", ",", "args", ")", ":", "\n", "        ", "mean", "=", "IMAGENET_DEFAULT_MEAN", "\n", "std", "=", "IMAGENET_DEFAULT_STD", "\n", "# train transform", "\n", "if", "is_train", ":", "\n", "            ", "use_timm_aug", "=", "args", ".", "get", "(", "\"timm_aug\"", ",", "True", ")", "\n", "if", "use_timm_aug", ":", "\n", "# this should always dispatch to transforms_imagenet_train", "\n", "                ", "transform", "=", "create_transform", "(", "\n", "input_size", "=", "args", ".", "input_size", ",", "\n", "is_training", "=", "True", ",", "\n", "color_jitter", "=", "args", ".", "color_jitter", ",", "\n", "auto_augment", "=", "args", ".", "auto_aug_policy", ",", "\n", "interpolation", "=", "'bicubic'", ",", "\n", "re_prob", "=", "args", ".", "reprob", ",", "\n", "re_mode", "=", "args", ".", "remode", ",", "\n", "re_count", "=", "args", ".", "recount", ",", "\n", "mean", "=", "mean", ",", "\n", "std", "=", "std", ",", "\n", ")", "\n", "", "else", ":", "\n", "## for mocov2, simsiam and swav", "\n", "                ", "normalize", "=", "transforms", ".", "Normalize", "(", "\n", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.228", ",", "0.224", ",", "0.225", "]", ")", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "224", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "]", ")", "\n", "", "return", "transform", "\n", "", "else", ":", "\n", "# eval transform", "\n", "            ", "t", "=", "[", "]", "\n", "if", "args", ".", "input_size", "<=", "224", ":", "\n", "                ", "crop_pct", "=", "224", "/", "256", "\n", "", "else", ":", "\n", "                ", "crop_pct", "=", "1.0", "\n", "", "size", "=", "int", "(", "args", ".", "input_size", "/", "crop_pct", ")", "\n", "t", ".", "append", "(", "\n", "transforms", ".", "Resize", "(", "size", ",", "interpolation", "=", "PIL", ".", "Image", ".", "BICUBIC", ")", ",", "# to maintain same ratio w.r.t. 224 images", "\n", ")", "\n", "t", ".", "append", "(", "transforms", ".", "CenterCrop", "(", "args", ".", "input_size", ")", ")", "\n", "\n", "t", ".", "append", "(", "transforms", ".", "ToTensor", "(", ")", ")", "\n", "t", ".", "append", "(", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", ")", "\n", "return", "transforms", ".", "Compose", "(", "t", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.downstream.finetune.FinetuneRunner.build_criterion": [[68, 93], ["print", "print", "print", "timm.data.mixup.Mixup", "timm.loss.SoftTargetCrossEntropy", "timm.loss.LabelSmoothingCrossEntropy", "torch.nn.CrossEntropyLoss", "str"], "methods", ["None"], ["", "", "def", "build_criterion", "(", "self", ",", "args", ")", ":", "\n", "        ", "\"\"\"\n        with mixup enabled.\n        \"\"\"", "\n", "## build criterion", "\n", "mixup_fn", "=", "None", "\n", "mixup_active", "=", "args", ".", "mixup", ">", "0", "or", "args", ".", "cutmix", ">", "0.", "or", "args", ".", "cutmix_minmax", "is", "not", "None", "\n", "if", "mixup_active", ":", "\n", "            ", "print", "(", "\"Mixup is activated!\"", ")", "\n", "mixup_fn", "=", "Mixup", "(", "\n", "mixup_alpha", "=", "args", ".", "mixup", ",", "cutmix_alpha", "=", "args", ".", "cutmix", ",", "cutmix_minmax", "=", "args", ".", "cutmix_minmax", ",", "\n", "prob", "=", "args", ".", "mixup_prob", ",", "switch_prob", "=", "args", ".", "mixup_switch_prob", ",", "mode", "=", "args", ".", "mixup_mode", ",", "\n", "label_smoothing", "=", "args", ".", "smoothing", ",", "num_classes", "=", "args", ".", "num_classes", ")", "\n", "", "if", "mixup_fn", "is", "not", "None", ":", "\n", "# smoothing is handled with mixup label transform", "\n", "            ", "criterion", "=", "SoftTargetCrossEntropy", "(", ")", "\n", "", "elif", "args", ".", "smoothing", ">", "0.", ":", "\n", "            ", "criterion", "=", "LabelSmoothingCrossEntropy", "(", "smoothing", "=", "args", ".", "smoothing", ")", "\n", "", "else", ":", "\n", "            ", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n", "", "print", "(", "\"criterion = %s\"", "%", "str", "(", "criterion", ")", ")", "\n", "print", "(", "\"mixup function: {}\"", ".", "format", "(", "mixup_fn", ")", ")", "\n", "self", ".", "criterion", "=", "criterion", "\n", "self", ".", "mixup_fn", "=", "mixup_fn", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.downstream.finetune.FinetuneRunner.train_one_epoch": [[94, 148], ["finetune.FinetuneRunner.model.train", "hirl.utils.misc.MetricLogger", "hirl.utils.misc.MetricLogger.add_meter", "finetune.FinetuneRunner.args.get", "finetune.FinetuneRunner.args.get", "finetune.FinetuneRunner.args.get", "finetune.FinetuneRunner.args.get", "finetune.FinetuneRunner.optimizer.zero_grad", "enumerate", "hirl.utils.misc.MetricLogger.synchronize_between_processes", "print", "hirl.utils.misc.SmoothedValue", "len", "hirl.utils.misc.MetricLogger.log_every", "samples.cuda.cuda.cuda", "targets.cuda.cuda.cuda", "finetune.FinetuneRunner.item", "finetune.FinetuneRunner.loss_scaler", "torch.cuda.synchronize", "hirl.utils.misc.MetricLogger.update", "hirl.utils.misc.MetricLogger.update", "finetune.FinetuneRunner.adjust_learning_rate", "finetune.FinetuneRunner.mixup_fn", "torch.cuda.amp.autocast", "finetune.FinetuneRunner.model", "finetune.FinetuneRunner.criterion", "math.isfinite", "print", "sys.exit", "finetune.FinetuneRunner.optimizer.zero_grad", "hirl.utils.misc.MetricLogger.meters.items", "len", "finetune.FinetuneRunner.model.parameters", "len"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.MetricLogger.add_meter", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.MetricLogger.synchronize_between_processes", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.MetricLogger.log_every", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.hirl-team_hirl.pretrain.moco.MoCoRunner.adjust_learning_rate"], ["", "def", "train_one_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "model", ".", "train", "(", "True", ")", "\n", "metric_logger", "=", "misc", ".", "MetricLogger", "(", "delimiter", "=", "\"  \"", ")", "\n", "metric_logger", ".", "add_meter", "(", "'lr'", ",", "misc", ".", "SmoothedValue", "(", "window_size", "=", "1", ",", "fmt", "=", "'{value:.6f}'", ")", ")", "\n", "header", "=", "'Epoch: [{}/{}]'", ".", "format", "(", "epoch", ",", "self", ".", "args", ".", "epochs", ")", "\n", "log_interval", "=", "self", ".", "args", ".", "get", "(", "\"log_interval\"", ",", "10", ")", "\n", "iter_per_epoch", "=", "self", ".", "args", ".", "get", "(", "\"iter_per_epoch\"", ",", "-", "1", ")", "\n", "iter_per_epoch", "=", "len", "(", "self", ".", "loader_train", ")", "if", "iter_per_epoch", "<", "0", "else", "iter_per_epoch", "\n", "\n", "accum_iter", "=", "self", ".", "args", ".", "get", "(", "\"accum_iter\"", ",", "1", ")", "\n", "clip_grad", "=", "self", ".", "args", ".", "get", "(", "\"clip_grad\"", ",", "None", ")", "\n", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "for", "it", ",", "(", "samples", ",", "targets", ")", "in", "enumerate", "(", "metric_logger", ".", "log_every", "(", "self", ".", "loader_train", ",", "log_interval", ",", "header", ")", ")", ":", "\n", "            ", "if", "it", ">=", "iter_per_epoch", ":", "\n", "                ", "break", "\n", "\n", "", "it", "=", "len", "(", "self", ".", "loader_train", ")", "*", "epoch", "+", "it", "# global training iteration", "\n", "if", "it", "%", "accum_iter", "==", "0", ":", "\n", "                ", "self", ".", "adjust_learning_rate", "(", "self", ".", "optimizer", ",", "it", "/", "len", "(", "self", ".", "loader_train", ")", ",", "self", ".", "args", ")", "\n", "\n", "", "samples", "=", "samples", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "targets", "=", "targets", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "if", "self", ".", "mixup_fn", "is", "not", "None", ":", "\n", "                ", "samples", ",", "targets", "=", "self", ".", "mixup_fn", "(", "samples", ",", "targets", ")", "\n", "\n", "", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", "self", ".", "args", ".", "use_fp16", ")", ":", "\n", "                ", "outputs", "=", "self", ".", "model", "(", "samples", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "outputs", ",", "targets", ")", "\n", "\n", "", "loss_value", "=", "loss", ".", "item", "(", ")", "\n", "\n", "if", "not", "math", ".", "isfinite", "(", "loss_value", ")", ":", "\n", "                ", "print", "(", "\"Loss is {}, stopping training\"", ".", "format", "(", "loss_value", ")", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "loss", "=", "loss", "/", "accum_iter", "\n", "self", ".", "loss_scaler", "(", "loss", ",", "self", ".", "optimizer", ",", "parameters", "=", "self", ".", "model", ".", "parameters", "(", ")", ",", "\n", "update_grad", "=", "(", "it", "+", "1", ")", "%", "accum_iter", "==", "0", ",", "clip_grad", "=", "clip_grad", ")", "\n", "if", "(", "it", "+", "1", ")", "%", "accum_iter", "==", "0", ":", "\n", "                ", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "\n", "metric_logger", ".", "update", "(", "loss", "=", "loss_value", ")", "\n", "\n", "lr", "=", "self", ".", "optimizer", ".", "param_groups", "[", "0", "]", "[", "\"lr\"", "]", "\n", "metric_logger", ".", "update", "(", "lr", "=", "lr", ")", "\n", "\n", "", "metric_logger", ".", "synchronize_between_processes", "(", ")", "\n", "print", "(", "\"Averaged stats:\"", ",", "metric_logger", ")", "\n", "return", "{", "k", ":", "meter", ".", "global_avg", "for", "k", ",", "meter", "in", "metric_logger", ".", "meters", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.downstream.finetune.FinetuneRunner.adjust_learning_rate": [[149, 176], ["args.get", "args.get", "args.get", "math.cos"], "methods", ["None"], ["", "def", "adjust_learning_rate", "(", "self", ",", "optimizer", ",", "epoch", ",", "args", ")", ":", "\n", "        ", "\"\"\"Decay the learning rate with half-cycle cosine after warmup (from MAE)\n        \"\"\"", "\n", "use_cos", "=", "args", ".", "get", "(", "\"cos\"", ",", "True", ")", "\n", "if", "use_cos", ":", "\n", "            ", "if", "epoch", "<", "args", ".", "warmup_epochs", ":", "\n", "                ", "start_lr", "=", "args", ".", "get", "(", "\"start_lr\"", ",", "None", ")", "\n", "if", "start_lr", ":", "\n", "                    ", "lr", "=", "start_lr", "+", "(", "args", ".", "lr", "-", "start_lr", ")", "*", "epoch", "/", "args", ".", "warmup_epochs", "\n", "", "else", ":", "\n", "                    ", "lr", "=", "args", ".", "lr", "*", "epoch", "/", "args", ".", "warmup_epochs", "\n", "", "", "else", ":", "\n", "                ", "lr", "=", "args", ".", "min_lr", "+", "(", "args", ".", "lr", "-", "args", ".", "min_lr", ")", "*", "0.5", "*", "(", "1.", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "(", "epoch", "-", "args", ".", "warmup_epochs", ")", "/", "(", "args", ".", "epochs", "-", "args", ".", "warmup_epochs", ")", ")", ")", "\n", "", "", "elif", "args", ".", "get", "(", "\"schedule\"", ",", "None", ")", ":", "\n", "            ", "lr", "=", "args", ".", "lr", "\n", "for", "milestone", "in", "args", ".", "schedule", ":", "\n", "                ", "lr", "*=", "args", ".", "gamma", "if", "epoch", ">=", "milestone", "else", "1.", "\n", "", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "# for vit layer decay", "\n", "", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "            ", "if", "\"lr_scale\"", "in", "param_group", ":", "\n", "                ", "param_group", "[", "\"lr\"", "]", "=", "lr", "*", "param_group", "[", "\"lr_scale\"", "]", "\n", "", "else", ":", "\n", "                ", "param_group", "[", "\"lr\"", "]", "=", "lr", "\n", "", "", "return", "lr", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hirl-team_hirl.downstream.semisup.SemiSupRunner.build_dataset": [[16, 74], ["semisup.SemiSupRunner.build_transform", "semisup.SemiSupRunner.build_transform", "torchvision.datasets.ImageFolder", "torchvision.datasets.ImageFolder", "args.get", "torch.utils.data.DistributedSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "os.path.join", "os.path.join", "os.path.join", "print", "torch.utils.data.DistributedSampler", "torch.utils.data.SequentialSampler", "open", "f.readlines", "hirl.utils.dist.get_world_size", "hirl.utils.dist.get_rank", "print", "int", "os.path.join", "len", "hirl.utils.dist.get_world_size", "hirl.utils.dist.get_world_size", "hirl.utils.dist.get_rank", "x.split", "li.split", "li.split"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.downstream.finetune.FinetuneRunner.build_transform", "home.repos.pwc.inspect_result.hirl-team_hirl.downstream.finetune.FinetuneRunner.build_transform", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_world_size", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_rank", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_world_size", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_world_size", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_rank"], ["def", "build_dataset", "(", "self", ",", "args", ")", ":", "\n", "        ", "\"\"\"\n        Enable passing a label file indicating the subset to use.\n        \"\"\"", "\n", "transform_train", "=", "self", ".", "build_transform", "(", "True", ",", "args", ")", "\n", "transform_val", "=", "self", ".", "build_transform", "(", "False", ",", "args", ")", "\n", "\n", "dataset_train", "=", "datasets", ".", "ImageFolder", "(", "os", ".", "path", ".", "join", "(", "args", ".", "data_path", ",", "\"train\"", ")", ",", "\n", "transform", "=", "transform_train", ")", "\n", "dataset_val", "=", "datasets", ".", "ImageFolder", "(", "os", ".", "path", ".", "join", "(", "args", ".", "data_path", ",", "\"val\"", ")", ",", "\n", "transform", "=", "transform_val", ")", "\n", "\n", "### training subset (only support for imagenet) ###", "\n", "labels_perc", "=", "args", ".", "get", "(", "\"labels_perc\"", ",", "None", ")", "\n", "if", "labels_perc", ":", "\n", "            ", "subset_file", "=", "\"hirl/misc/{}percent.txt\"", ".", "format", "(", "labels_perc", ")", "\n", "with", "open", "(", "subset_file", ",", "\"r\"", ")", "as", "f", ":", "\n", "                ", "list_imgs", "=", "f", ".", "readlines", "(", ")", "\n", "list_imgs", "=", "[", "x", ".", "split", "(", "\"\\n\"", ")", "[", "0", "]", "for", "x", "in", "list_imgs", "]", "\n", "", "train_data_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data_path", ",", "'train'", ")", "\n", "dataset_train", ".", "samples", "=", "[", "(", "\n", "os", ".", "path", ".", "join", "(", "train_data_path", ",", "li", ".", "split", "(", "'_'", ")", "[", "0", "]", ",", "li", ")", ",", "\n", "dataset_train", ".", "class_to_idx", "[", "li", ".", "split", "(", "'_'", ")", "[", "0", "]", "]", "\n", ")", "for", "li", "in", "list_imgs", "]", "\n", "\n", "print", "(", "\"Training with {} percent of training data\"", ".", "format", "(", "labels_perc", ")", ")", "\n", "###################################################", "\n", "\n", "", "sampler_train", "=", "torch", ".", "utils", ".", "data", ".", "DistributedSampler", "(", "\n", "dataset_train", ",", "num_replicas", "=", "dist_utils", ".", "get_world_size", "(", ")", ",", "rank", "=", "dist_utils", ".", "get_rank", "(", ")", ",", "shuffle", "=", "True", ")", "\n", "\n", "if", "args", ".", "dist_eval", ":", "\n", "            ", "if", "len", "(", "dataset_val", ")", "%", "dist_utils", ".", "get_world_size", "(", ")", "!=", "0", ":", "\n", "                ", "print", "(", "'Warning: Enabling distributed evaluation with an eval dataset not divisible by process number. '", "\n", "'This will slightly alter validation results as extra duplicate entries are added to achieve '", "\n", "'equal num of samples per-process.'", ")", "\n", "", "sampler_val", "=", "torch", ".", "utils", ".", "data", ".", "DistributedSampler", "(", "\n", "dataset_val", ",", "num_replicas", "=", "dist_utils", ".", "get_world_size", "(", ")", ",", "rank", "=", "dist_utils", ".", "get_rank", "(", ")", ",", "shuffle", "=", "True", ")", "# shuffle=True to reduce monitor bias", "\n", "", "else", ":", "\n", "            ", "sampler_val", "=", "torch", ".", "utils", ".", "data", ".", "SequentialSampler", "(", "dataset_val", ")", "\n", "\n", "", "loader_train", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset_train", ",", "sampler", "=", "sampler_train", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ",", "\n", "pin_memory", "=", "True", ",", "drop_last", "=", "True", ",", "\n", ")", "\n", "loader_val", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset_val", ",", "sampler", "=", "sampler_val", ",", "\n", "batch_size", "=", "int", "(", "args", ".", "batch_size", ")", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ",", "\n", "pin_memory", "=", "True", ",", "drop_last", "=", "False", "\n", ")", "\n", "\n", "self", ".", "dataset_train", "=", "dataset_train", "\n", "self", ".", "dataset_val", "=", "dataset_val", "\n", "self", ".", "loader_train", "=", "loader_train", "\n", "self", ".", "loader_val", "=", "loader_val", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hirl-team_hirl.pretrain.simsiam.SimSiamRunner.build_dataset": [[18, 33], ["hirl.utils.misc.ImageFolderInstance", "print", "hirl.utils.dist.get_world_size", "hirl.utils.dist.get_rank", "torch.utils.data.DistributedSampler", "print", "torch.utils.data.DataLoader", "hirl.utils.transforms.MultiCropsTransform", "hirl.utils.transforms.SingleCropTransform", "os.path.join", "str"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_world_size", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_rank"], ["\n", "# create the encoder", "\n", "# num_classes is the output fc dimension, zero-initialize last BNs", "\n", "self", ".", "encoder", "=", "models", ".", "__dict__", "[", "base_arch", "]", "(", "num_classes", "=", "dim", ",", "zero_init_residual", "=", "True", ")", "\n", "\n", "self", ".", "backbone", "=", "self", ".", "encoder", "\n", "\n", "# build a 3-layer projector", "\n", "prev_dim", "=", "self", ".", "encoder", ".", "fc", ".", "weight", ".", "shape", "[", "1", "]", "\n", "self", ".", "encoder", ".", "fc", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "prev_dim", ",", "prev_dim", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "prev_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "# first layer", "\n", "nn", ".", "Linear", "(", "prev_dim", ",", "prev_dim", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "prev_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "# second layer", "\n", "self", ".", "encoder", ".", "fc", ",", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.pretrain.simsiam.SimSiamRunner.build_model": [[34, 49], ["torch.nn.parallel.DistributedDataParallel.cuda", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "print", "torch.nn.parallel.DistributedDataParallel", "str"], "methods", ["None"], ["nn", ".", "BatchNorm1d", "(", "dim", ",", "affine", "=", "False", ")", ")", "# output layer", "\n", "# hack: not use bias as it is followed by BN", "\n", "self", ".", "encoder", ".", "fc", "[", "6", "]", ".", "bias", ".", "requires_grad", "=", "False", "\n", "\n", "# build a 2-layer predictor", "\n", "self", ".", "predictor", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "dim", ",", "pred_dim", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "pred_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "# hidden layer", "\n", "nn", ".", "Linear", "(", "pred_dim", ",", "dim", ")", ")", "# output layer", "\n", "\n", "self", ".", "criterion", "=", "nn", ".", "CosineSimilarity", "(", "dim", "=", "1", ")", "\n", "\n", "# create hooks for the embeddings before and after projection", "\n", "self", ".", "entangled_dim", "=", "prev_dim", "\n", "self", ".", "inst_dim", "=", "dim", "\n", "self", ".", "_embeddings", "=", "{", "}", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.pretrain.simsiam.SimSiamRunner.build_optimizer": [[50, 69], ["print", "print", "print", "torch.optim.SGD", "hirl.utils.dist.get_world_size", "model.parameters", "model.encoder.parameters", "model.predictor.parameters"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_world_size"], ["def", "hook_function", "(", "module", ",", "input_emb", ",", "output_emb", ")", ":", "\n", "# always unpack the input and output first", "\n", "            ", "if", "isinstance", "(", "input_emb", ",", "tuple", ")", "and", "len", "(", "input_emb", ")", "==", "1", ":", "\n", "                ", "input_emb", "=", "input_emb", "[", "0", "]", "\n", "", "if", "isinstance", "(", "output_emb", ",", "tuple", ")", "and", "len", "(", "output_emb", ")", "==", "1", ":", "\n", "                ", "output_emb", "=", "output_emb", "[", "0", "]", "\n", "", "self", ".", "_embeddings", "[", "\"entangled_emb\"", "]", "=", "input_emb", "\n", "self", ".", "_embeddings", "[", "\"inst_emb\"", "]", "=", "output_emb", "\n", "\n", "", "project_layer", "=", "dict", "(", "[", "*", "self", ".", "encoder", ".", "named_modules", "(", ")", "]", ")", "[", "\"fc\"", "]", "\n", "project_layer", ".", "register_forward_hook", "(", "hook_function", ")", "\n", "\n", "", "def", "get_loss", "(", "self", ",", "predictions", ",", "targets", ")", ":", "\n", "        ", "losses", "=", "list", "(", ")", "\n", "for", "pred_id", ",", "pred", "in", "enumerate", "(", "predictions", ")", ":", "\n", "            ", "for", "target_id", ",", "target", "in", "enumerate", "(", "targets", ")", ":", "\n", "                ", "if", "pred_id", "!=", "target_id", ":", "# cross prediction", "\n", "                    ", "loss", "=", "-", "self", ".", "criterion", "(", "pred", ",", "target", ")", ".", "mean", "(", ")", "\n", "losses", ".", "append", "(", "loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.pretrain.simsiam.SimSiamRunner.adjust_learning_rate": [[70, 84], ["math.floor", "math.cos"], "methods", ["None"], ["# average over view", "\n", "", "", "", "loss", "=", "torch", ".", "stack", "(", "losses", ",", "0", ")", ".", "mean", "(", ")", "\n", "\n", "return", "loss", "\n", "\n", "", "def", "forward_feature", "(", "self", ",", "images", ")", ":", "\n", "        ", "if", "self", ".", "hook_on_predictor", ":", "\n", "            ", "return", "self", ".", "predictor", "(", "self", ".", "encoder", "(", "images", ")", ")", "\n", "", "elif", "self", ".", "hook_on_predictor_hidden", ":", "\n", "            ", "return", "self", ".", "predictor", "[", "0", "]", "(", "self", ".", "encoder", "(", "images", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "encoder", "(", "images", ")", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "images", ",", "return_hooks", "=", "False", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.hirl-team_hirl.pretrain.dino.DINORunner.__init__": [[28, 31], ["hirl.runners.StandardPretrainRunner.__init__", "collections.defaultdict"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.pretrain.dino.DINORunner.__init__"], ["\n", "def", "__init__", "(", "self", ",", "teacher", ",", "student", ",", "out_dim", "=", "8192", ",", "\n", "global_crops_number", "=", "2", ",", "local_crops_number", "=", "10", ",", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.pretrain.dino.DINORunner.build_dataset": [[32, 54], ["hirl.utils.transforms.DataAugmentationDINO", "hirl.utils.misc.ImageFolderInstance", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "os.path.join", "len"], "methods", ["None"], ["student_temperature", "=", "0.1", ",", "cls_temperature", "=", "0.07", ",", "\n", "center_momentum", "=", "0.9", ",", "teacher_momentum", "=", "0.996", ",", "\n", "norm_last_layer", "=", "False", ",", "norm_in_head", "=", "None", ",", "act_in_head", "=", "\"gelu\"", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "## init teacher and student", "\n", "self", ".", "teacher", "=", "teacher", "\n", "self", ".", "student", "=", "student", "\n", "\n", "self", ".", "backbone", "=", "self", ".", "teacher", "\n", "\n", "## ensure that the teacher and the student share the same weight", "\n", "msg", "=", "self", ".", "teacher", ".", "load_state_dict", "(", "self", ".", "student", ".", "state_dict", "(", ")", ",", "strict", "=", "False", ")", "\n", "print", "(", "\"data copying from student to teacher with msg: {}\"", ".", "format", "(", "msg", ")", ")", "\n", "for", "param_teacher", "in", "self", ".", "teacher", ".", "parameters", "(", ")", ":", "\n", "            ", "param_teacher", ".", "requires_grad", "=", "False", "\n", "\n", "", "embed_dim", "=", "self", ".", "student", ".", "embed_dim", "\n", "\n", "self", ".", "student", "=", "layers", ".", "MultiCropWrapper", "(", "student", ",", "layers", ".", "DINOHead", "(", "\n", "embed_dim", ",", "out_dim", ",", "\n", "norm", "=", "norm_in_head", ",", "act", "=", "act_in_head", ",", "\n", "norm_last_layer", "=", "norm_last_layer", ",", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.pretrain.dino.DINORunner.build_model": [[55, 78], ["model.cuda.cuda.cuda", "hirl.utils.misc.has_batchnorms", "torch.parallel.DistributedDataParallel", "torch.parallel.DistributedDataParallel", "torch.SyncBatchNorm.convert_sync_batchnorm", "torch.SyncBatchNorm.convert_sync_batchnorm", "torch.SyncBatchNorm.convert_sync_batchnorm", "torch.SyncBatchNorm.convert_sync_batchnorm"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.has_batchnorms"], [")", ")", "\n", "self", ".", "teacher", "=", "layers", ".", "MultiCropWrapper", "(", "\n", "teacher", ",", "layers", ".", "DINOHead", "(", "\n", "embed_dim", ",", "out_dim", ",", "\n", "norm", "=", "norm_in_head", ",", "act", "=", "act_in_head", "\n", ")", ",", "\n", ")", "\n", "\n", "# create hooks for the embeddings before and after projection", "\n", "self", ".", "entangled_dim", "=", "self", ".", "student", ".", "head", ".", "mlp", ".", "weight", ".", "shape", "[", "1", "]", "if", "isinstance", "(", "self", ".", "student", ".", "head", ".", "mlp", ",", "nn", ".", "Linear", ")", "else", "self", ".", "student", ".", "head", ".", "mlp", "[", "0", "]", ".", "weight", ".", "shape", "[", "1", "]", "\n", "self", ".", "inst_dim", "=", "self", ".", "student", ".", "head", ".", "mlp", ".", "weight", ".", "shape", "[", "0", "]", "if", "isinstance", "(", "self", ".", "student", ".", "head", ".", "mlp", ",", "nn", ".", "Linear", ")", "else", "self", ".", "student", ".", "head", ".", "mlp", "[", "-", "1", "]", ".", "weight", ".", "shape", "[", "0", "]", "\n", "self", ".", "_embeddings", "=", "{", "}", "\n", "def", "hook_function", "(", "module", ",", "input_emb", ",", "output_emb", ")", ":", "\n", "            ", "if", "isinstance", "(", "input_emb", ",", "tuple", ")", "and", "len", "(", "input_emb", ")", "==", "1", ":", "\n", "                ", "input_emb", "=", "input_emb", "[", "0", "]", "\n", "", "if", "isinstance", "(", "output_emb", ",", "tuple", ")", "and", "len", "(", "output_emb", ")", "==", "1", ":", "\n", "                ", "output_emb", "=", "output_emb", "[", "0", "]", "\n", "", "self", ".", "_embeddings", "[", "\"entangled_cls_emb\"", "]", "=", "input_emb", "\n", "self", ".", "_embeddings", "[", "\"inst_cls_emb\"", "]", "=", "output_emb", "\n", "", "self", ".", "student", ".", "head", ".", "mlp", ".", "register_forward_hook", "(", "hook_function", ")", "\n", "\n", "self", ".", "student_temperature", "=", "student_temperature", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.pretrain.dino.DINORunner.build_optimizer": [[79, 128], ["print", "print", "print", "hirl.utils.misc.get_params_groups", "hirl.utils.misc.cosine_scheduler", "hirl.utils.misc.cosine_scheduler", "hirl.utils.misc.cosine_scheduler", "numpy.concatenate", "print", "hirl.utils.dist.get_world_size", "torch.optim.AdamW", "torch.optim.AdamW", "torch.optim.AdamW", "torch.optim.AdamW", "len", "len", "len", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "numpy.linspace", "hirl.utils.misc.LARS", "NotImplementedError", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.get_params_groups", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.cosine_scheduler", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.cosine_scheduler", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.cosine_scheduler", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_world_size"], ["self", ".", "cls_temperature", "=", "cls_temperature", "\n", "\n", "self", ".", "center_momentum", "=", "center_momentum", "\n", "self", ".", "teacher_momentum", "=", "teacher_momentum", "\n", "\n", "self", ".", "global_crops_number", "=", "global_crops_number", "\n", "self", ".", "local_crops_number", "=", "local_crops_number", "\n", "self", ".", "ncrops", "=", "global_crops_number", "+", "local_crops_number", "\n", "self", ".", "register_buffer", "(", "\"center\"", ",", "torch", ".", "zeros", "(", "1", ",", "out_dim", ")", ")", "\n", "\n", "", "def", "get_loss", "(", "self", ",", "student_cls", ",", "teacher_cls", ",", "student_local_cls", ",", "\n", "cls_temperature", ")", ":", "\n", "        ", "if", "student_local_cls", "is", "not", "None", ":", "\n", "            ", "student_cls", "=", "torch", ".", "cat", "(", "[", "student_cls", ",", "student_local_cls", "]", ")", "\n", "\n", "", "student_cls", "=", "student_cls", "/", "self", ".", "student_temperature", "\n", "student_cls_c", "=", "student_cls", ".", "chunk", "(", "self", ".", "ncrops", ")", "\n", "\n", "\n", "teacher_cls_c", "=", "F", ".", "softmax", "(", "(", "teacher_cls", "-", "self", ".", "center", ")", "/", "cls_temperature", ",", "dim", "=", "-", "1", ")", "\n", "teacher_cls_c", "=", "teacher_cls_c", ".", "detach", "(", ")", ".", "chunk", "(", "self", ".", "global_crops_number", ")", "\n", "\n", "total_loss", ",", "n_loss_terms", "=", "0", ",", "0", "\n", "for", "q", "in", "range", "(", "len", "(", "teacher_cls_c", ")", ")", ":", "\n", "            ", "for", "v", "in", "range", "(", "len", "(", "student_cls_c", ")", ")", ":", "\n", "                ", "if", "v", "==", "q", ":", "\n", "                    ", "continue", "\n", "", "else", ":", "\n", "                    ", "loss", "=", "torch", ".", "sum", "(", "-", "teacher_cls_c", "[", "q", "]", "*", "F", ".", "log_softmax", "(", "student_cls_c", "[", "v", "]", ",", "dim", "=", "-", "1", ")", ",", "dim", "=", "-", "1", ")", "\n", "total_loss", "+=", "loss", ".", "mean", "(", ")", "\n", "n_loss_terms", "+=", "1", "\n", "\n", "", "", "", "total_loss", "=", "total_loss", "/", "n_loss_terms", "\n", "total_loss", "=", "dict", "(", "cls_loss", "=", "total_loss", ",", "loss", "=", "total_loss", ")", "\n", "self", ".", "update_center", "(", "teacher_cls", ")", "\n", "return", "total_loss", "\n", "\n", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "update_center", "(", "self", ",", "teacher_cls", ")", ":", "\n", "        ", "cls_center", "=", "torch", ".", "sum", "(", "teacher_cls", ",", "dim", "=", "0", ",", "keepdim", "=", "True", ")", "\n", "dist", ".", "all_reduce", "(", "cls_center", ")", "\n", "cls_center", "=", "cls_center", "/", "(", "len", "(", "teacher_cls", ")", "*", "dist", ".", "get_world_size", "(", ")", ")", "\n", "self", ".", "center", "=", "self", ".", "center", "*", "self", ".", "center_momentum", "+", "cls_center", "*", "(", "1", "-", "self", ".", "center_momentum", ")", "\n", "\n", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "momentum_update_teacher", "(", "self", ",", "momentum", "=", "None", ")", ":", "\n", "        ", "m", "=", "momentum", "if", "momentum", "is", "not", "None", "else", "self", ".", "teacher_momentum", "\n", "student", "=", "self", ".", "student", ".", "module", "if", "isinstance", "(", "self", ".", "student", ",", "DistributedDataParallel", ")", "else", "self", ".", "student", "\n", "teacher", "=", "self", ".", "teacher", ".", "module", "if", "isinstance", "(", "self", ".", "teacher", ",", "DistributedDataParallel", ")", "else", "self", ".", "teacher", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.pretrain.dino.DINORunner.forward_batch": [[129, 134], ["super().forward_batch"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.pretrain.ibot.iBOTRunner.forward_batch"], ["names_q", ",", "params_q", ",", "names_k", ",", "params_k", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "name_q", ",", "param_q", "in", "student", ".", "named_parameters", "(", ")", ":", "\n", "            ", "names_q", ".", "append", "(", "name_q", ")", "\n", "params_q", ".", "append", "(", "param_q", ")", "\n", "", "for", "name_k", ",", "param_k", "in", "teacher", ".", "named_parameters", "(", ")", ":", "\n", "            ", "names_k", ".", "append", "(", "name_k", ")", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.pretrain.dino.DINORunner.log_metrics": [[135, 152], ["output_dict.pop", "output_dict.pop", "output_dict.pop", "hirl.utils.misc.concat_all_gather", "hirl.utils.misc.concat_all_gather", "hirl.models.dino.DINORunner.buffer_dict[].append", "hirl.models.dino.DINORunner.buffer_dict[].append", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "metric_logger.update", "metric_logger.update", "hirl.utils.misc.concat_all_gather.size", "hirl.utils.misc.concat_all_gather", "probs1[].max", "probs2[].max", "output_dict.pop.to"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.models.moco.MomentumContrast.concat_all_gather", "home.repos.pwc.inspect_result.hirl-team_hirl.models.moco.MomentumContrast.concat_all_gather", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.hirl-team_hirl.models.moco.MomentumContrast.concat_all_gather", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.SmoothedValue.max", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.SmoothedValue.max"], ["params_k", ".", "append", "(", "param_k", ")", "\n", "", "names_common", "=", "list", "(", "set", "(", "names_q", ")", "&", "set", "(", "names_k", ")", ")", "\n", "params_q", "=", "[", "param_q", "for", "name_q", ",", "param_q", "in", "zip", "(", "names_q", ",", "params_q", ")", "if", "name_q", "in", "names_common", "]", "\n", "params_k", "=", "[", "param_k", "for", "name_k", ",", "param_k", "in", "zip", "(", "names_k", ",", "params_k", ")", "if", "name_k", "in", "names_common", "]", "\n", "for", "param_q", ",", "param_k", "in", "zip", "(", "params_q", ",", "params_k", ")", ":", "\n", "            ", "param_k", ".", "data", ".", "mul_", "(", "m", ")", ".", "add_", "(", "(", "1", "-", "m", ")", "*", "param_q", ".", "detach", "(", ")", ".", "data", ")", "\n", "\n", "", "", "def", "forward_feature", "(", "self", ",", "images", ")", ":", "\n", "        ", "feature", "=", "self", ".", "teacher", ".", "backbone", "(", "images", ")", "\n", "return", "self", ".", "teacher", ".", "head", ".", "mlp", "(", "feature", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "imgs", ",", "masks", "=", "None", ",", "global_crops_number", "=", "None", ",", "\n", "cls_temperature", "=", "None", ",", "return_hooks", "=", "False", ",", "\n", "teacher_momentum", "=", "None", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.hirl-team_hirl.pretrain.dino.DINORunner.step_optimizer": [[153, 173], ["hirl.models.dino.DINORunner.loss_scaler", "list", "hirl.models.dino.DINORunner.model.named_parameters", "hirl.models.dino.DINORunner.optimizer.zero_grad", "hirl.models.dino.DINORunner.model.parameters", "list.append"], "methods", ["None"], ["\n", "## momentumly update teacher", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.pretrain.dino.DINORunner.eval_after_epoch": [[174, 187], ["torch.cat().cpu().detach().numpy", "torch.cat().cpu().detach().numpy", "torch.cat().cpu().detach().numpy", "torch.cat().cpu().detach().numpy", "torch.cat().cpu().detach().numpy", "torch.cat().cpu().detach().numpy", "torch.cat().cpu().detach().numpy", "torch.cat().cpu().detach().numpy", "hirl.utils.clustering.eval_pred", "print", "list", "list", "torch.cat().cpu().detach", "torch.cat().cpu().detach", "torch.cat().cpu().detach", "torch.cat().cpu().detach", "torch.cat().cpu().detach", "torch.cat().cpu().detach", "torch.cat().cpu().detach", "torch.cat().cpu().detach", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.utils.clustering.eval_pred"], ["self", ".", "momentum_update_teacher", "(", "teacher_momentum", ")", "\n", "global_crops_number", "=", "global_crops_number", "if", "global_crops_number", "is", "not", "None", "else", "self", ".", "global_crops_number", "\n", "teacher_output", "=", "self", ".", "teacher", "(", "imgs", "[", ":", "global_crops_number", "]", ")", "\n", "student_output", "=", "self", ".", "student", "(", "imgs", "[", ":", "global_crops_number", "]", ")", "\n", "\n", "## only 1 global crop", "\n", "embedding_dict", "=", "defaultdict", "(", "list", ")", "\n", "batch_size", "=", "imgs", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "for", "k", ",", "v", "in", "self", ".", "_embeddings", ".", "items", "(", ")", ":", "\n", "            ", "embedding_dict", "[", "k", "]", ".", "append", "(", "v", "[", ":", "batch_size", "]", ")", "\n", "\n", "", "if", "len", "(", "imgs", ")", ">", "global_crops_number", ":", "\n", "            ", "student_local_cls", "=", "self", ".", "student", "(", "imgs", "[", "global_crops_number", ":", "]", ",", "mask", "=", "None", ")", "\n", "for", "k", ",", "v", "in", "self", ".", "_embeddings", ".", "items", "(", ")", ":", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.pretrain.dino.DINORunner.adjust_learning_rate": [[188, 196], ["args.get", "enumerate", "len", "int", "int"], "methods", ["None"], ["                ", "embedding_dict", "[", "k", "]", ".", "extend", "(", "list", "(", "v", ".", "chunk", "(", "self", ".", "local_crops_number", ")", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "student_local_cls", "=", "None", "\n", "\n", "", "cls_temperature", "=", "cls_temperature", "if", "cls_temperature", "is", "not", "None", "else", "self", ".", "cls_temperature", "\n", "\n", "output_dict", "=", "self", ".", "get_loss", "(", "student_output", ",", "teacher_output", ",", "student_local_cls", ",", "cls_temperature", ")", "\n", "output_dict", ".", "update", "(", "{", "\"probs_teacher\"", ":", "teacher_output", ".", "chunk", "(", "global_crops_number", ")", ",", "\n", "\"probs_student\"", ":", "student_output", ".", "chunk", "(", "global_crops_number", ")", "}", ")", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.pretrain.mocov3.MoCoV3Runner.build_dataset": [[19, 34], ["hirl.utils.transforms.DataAugmentationMoCoV3", "hirl.utils.misc.ImageFolderInstance", "print", "hirl.utils.dist.get_world_size", "hirl.utils.dist.get_rank", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "print", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "os.path.join", "str"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_world_size", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_rank"], ["\n", "def", "__init__", "(", "self", ",", "encoder_q", ",", "encoder_k", ",", "dim", "=", "256", ",", "mlp_dim", "=", "4096", ",", "T", "=", "0.2", ",", "\n", "multi_crop", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "encoder_q", "=", "encoder_q", "\n", "self", ".", "encoder_k", "=", "encoder_k", "\n", "self", ".", "backbone", "=", "self", ".", "encoder_q", "\n", "self", ".", "T", "=", "T", "\n", "self", ".", "multi_crop", "=", "multi_crop", "\n", "\n", "# projectors", "\n", "hidden_dim", "=", "self", ".", "encoder_q", ".", "head", ".", "weight", ".", "shape", "[", "1", "]", "\n", "del", "self", ".", "encoder_q", ".", "head", ",", "self", ".", "encoder_k", ".", "head", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.pretrain.mocov3.MoCoV3Runner.build_model": [[35, 44], ["args.get", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "torch.nn.parallel.DistributedDataParallel.cuda", "torch.nn.parallel.DistributedDataParallel.cuda", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel"], "methods", ["None"], ["self", ".", "encoder_q", ".", "head", "=", "self", ".", "_build_mlp", "(", "3", ",", "hidden_dim", ",", "mlp_dim", ",", "dim", ")", "\n", "self", ".", "encoder_k", ".", "head", "=", "self", ".", "_build_mlp", "(", "3", ",", "hidden_dim", ",", "mlp_dim", ",", "dim", ")", "\n", "# predictor", "\n", "self", ".", "predictor", "=", "self", ".", "_build_mlp", "(", "2", ",", "dim", ",", "mlp_dim", ",", "dim", ")", "\n", "\n", "# initialize key encoder's parameters as those of query encoder; not update key encoder with gradients ", "\n", "for", "param_q", ",", "param_k", "in", "zip", "(", "self", ".", "encoder_q", ".", "parameters", "(", ")", ",", "self", ".", "encoder_k", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "param_k", ".", "data", ".", "copy_", "(", "param_q", ".", "data", ")", "\n", "param_k", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.pretrain.mocov3.MoCoV3Runner.build_optimizer": [[45, 61], ["print", "print", "print", "hirl.utils.dist.get_world_size", "hirl.utils.misc.LARS", "model.parameters", "torch.optim.AdamW", "torch.optim.AdamW", "torch.optim.AdamW", "torch.optim.AdamW", "NotImplementedError", "model.parameters"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_world_size"], ["# create hooks for the embeddings before and after projection", "\n", "", "self", ".", "entangled_dim", "=", "hidden_dim", "\n", "self", ".", "inst_dim", "=", "dim", "\n", "self", ".", "_embeddings", "=", "{", "}", "\n", "def", "hook_function", "(", "module", ",", "input_emb", ",", "output_emb", ")", ":", "\n", "# always unpack the input and output first", "\n", "            ", "if", "isinstance", "(", "input_emb", ",", "tuple", ")", "and", "len", "(", "input_emb", ")", "==", "1", ":", "\n", "                ", "input_emb", "=", "input_emb", "[", "0", "]", "\n", "", "if", "isinstance", "(", "output_emb", ",", "tuple", ")", "and", "len", "(", "output_emb", ")", "==", "1", ":", "\n", "                ", "output_emb", "=", "output_emb", "[", "0", "]", "\n", "", "self", ".", "_embeddings", "[", "\"entangled_cls_emb\"", "]", "=", "input_emb", "\n", "self", ".", "_embeddings", "[", "\"inst_cls_emb\"", "]", "=", "output_emb", "\n", "", "project_layer", "=", "dict", "(", "[", "*", "self", ".", "encoder_q", ".", "named_modules", "(", ")", "]", ")", "[", "\"head\"", "]", "\n", "project_layer", ".", "register_forward_hook", "(", "hook_function", ")", "\n", "\n", "", "def", "_build_mlp", "(", "self", ",", "num_layers", ",", "input_dim", ",", "mlp_dim", ",", "output_dim", ",", "last_bn", "=", "True", ")", ":", "\n", "        ", "mlp", "=", "[", "]", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.pretrain.mocov3.MoCoV3Runner.adjust_learning_rate": [[62, 70], ["math.cos"], "methods", ["None"], ["for", "l", "in", "range", "(", "num_layers", ")", ":", "\n", "            ", "dim1", "=", "input_dim", "if", "l", "==", "0", "else", "mlp_dim", "\n", "dim2", "=", "output_dim", "if", "l", "==", "num_layers", "-", "1", "else", "mlp_dim", "\n", "\n", "mlp", ".", "append", "(", "nn", ".", "Linear", "(", "dim1", ",", "dim2", ",", "bias", "=", "False", ")", ")", "\n", "if", "l", "<", "num_layers", "-", "1", ":", "\n", "                ", "mlp", ".", "append", "(", "nn", ".", "BatchNorm1d", "(", "dim2", ")", ")", "\n", "mlp", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "", "elif", "last_bn", ":", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.pretrain.mocov3.MoCoV3Runner.adjust_moco_momentum": [[71, 76], ["math.cos"], "methods", ["None"], ["# follow SimCLR's design: https://github.com/google-research/simclr/blob/master/model_util.py#L157", "\n", "# for simplicity, we further removed gamma in BN", "\n", "                ", "mlp", ".", "append", "(", "nn", ".", "BatchNorm1d", "(", "dim2", ",", "affine", "=", "False", ")", ")", "\n", "\n", "", "", "return", "nn", ".", "Sequential", "(", "*", "mlp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.pretrain.mocov3.MoCoV3Runner.forward_batch": [[77, 94], ["isinstance", "image.cuda", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "hirl.models.mocov3.MoCoV3Runner.args.get", "hirl.models.mocov3.MoCoV3Runner.model", "hirl.models.mocov3.MoCoV3Runner.adjust_moco_momentum"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.pretrain.mocov3.MoCoV3Runner.adjust_moco_momentum"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "concat_all_gather", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        Performs `all_gather` operation on the provided tensors.\n        Warning: torch.distributed.all_gather has no gradient.\n        \"\"\"", "\n", "x_gather", "=", "[", "torch", ".", "ones_like", "(", "x", ")", "for", "_", "in", "range", "(", "torch", ".", "distributed", ".", "get_world_size", "(", ")", ")", "]", "\n", "torch", ".", "distributed", ".", "all_gather", "(", "x_gather", ",", "x", ",", "async_op", "=", "False", ")", "\n", "output", "=", "torch", ".", "cat", "(", "x_gather", ",", "dim", "=", "0", ")", "\n", "return", "output", "\n", "\n", "", "def", "momentum_update_key_encoder", "(", "self", ")", ":", "\n", "        ", "self", ".", "_momentum_update_key_encoder", "(", ")", "\n", "\n", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_momentum_update_key_encoder", "(", "self", ",", "m", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.hirl-team_hirl.pretrain.mocov3.MoCoV3Runner.log_metrics": [[95, 114], ["enumerate", "zip", "torch.cross_entropy().item", "torch.cross_entropy().item", "[].item", "metric_logger.update", "metric_logger.update", "enumerate", "metric_logger.update", "torch.cross_entropy", "torch.cross_entropy", "zip", "torch.cross_entropy().item", "torch.cross_entropy().item", "metric_logger.update", "[].item", "metric_logger.update", "hirl.utils.misc.accuracy", "torch.cross_entropy", "torch.cross_entropy", "hirl.utils.misc.accuracy"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.accuracy", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.accuracy"], ["\n", "for", "param_q", ",", "param_k", "in", "zip", "(", "self", ".", "encoder_q", ".", "parameters", "(", ")", ",", "self", ".", "encoder_k", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "param_k", ".", "data", "=", "param_k", ".", "data", "*", "m", "+", "param_q", ".", "data", "*", "(", "1.", "-", "m", ")", "\n", "\n", "", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "extract_key_feat", "(", "self", ",", "im_k", ")", ":", "\n", "        ", "\"\"\"\n        Feature extraction of key image.\n        \"\"\"", "\n", "k", "=", "self", ".", "encoder_k", "(", "im_k", ")", "\n", "k", "=", "F", ".", "normalize", "(", "k", ",", "dim", "=", "1", ")", "\n", "return", "k", "\n", "\n", "", "def", "extract_feat", "(", "self", ",", "images", ",", "m", ",", "is_eval", "=", "False", ")", ":", "\n", "# global views", "\n", "        ", "if", "is_eval", ":", "\n", "            ", "return", "F", ".", "normalize", "(", "self", ".", "encoder_q", "(", "images", ")", ",", "dim", "=", "1", ")", "\n", "\n", "", "im_q", ",", "im_k", "=", "images", "[", "0", "]", ",", "images", "[", "1", "]", "\n", "## get query", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.pretrain.hirl.HIRLRunner": [[21, 196], ["getattr", "DynamicHIRLRunner", "args.pop", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "super().build_dataset", "torchvision.transforms.Compose", "hirl.utils.misc.ImageFolderInstance", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "super().build_model", "args.pipeline.pop", "hirl..model.cuda", "torch.parallel.DistributedDataParallel", "super().build_optimizer", "hirl..optimizer.add_param_group", "hirl..model_without_ddp.eval", "hirl.utils.misc.MetricLogger", "hirl..args.get", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "enumerate", "torch.barrier", "torch.all_reduce", "features.numpy.cpu", "enumerate", "torch.barrier", "hirl.utils.clustering.run_hkmeans.items", "time.time", "print", "hirl..model.train", "range", "str", "print", "dict", "hirl..args.get", "super().forward_batch", "dict.update", "super().log_metrics", "misc.MetricLogger.update", "os.path.join", "getattr", "hirl..model_without_ddp.projections.parameters", "misc.MetricLogger.log_every", "images.cuda.cuda", "hirl..model_without_ddp.forward_feature", "torch.normalize", "cluster_result[].append", "cluster_result[].append", "cluster_result[].append", "torch.get_rank", "features.numpy.numpy", "hirl.utils.clustering.run_hkmeans", "hirl..set_epoch", "hirl..train_one_epoch", "save_dict.update", "hirl..save_model", "hirl.is_main_process", "time.time", "datetime.timedelta", "misc.MetricLogger.update", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "hirl.get_world_size", "hirl.get_rank", "hirl..model_without_ddp.cpu", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "cluster_result[].append", "cluster_result[].append", "torch.broadcast", "time.time", "hirl..compute_feature", "time.time", "print", "time.time", "hirl..run_clustering", "time.time", "print", "hirl..args.to_dict", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "hirl..model_without_ddp.forward_feature", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "range", "int", "len", "len", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "hirl.get_rank", "torch.save", "torch.save", "torch.save", "torch.save", "f.write", "int", "isinstance", "key_imgs.cuda", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "len", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "str", "str", "os.path.join", "hirl..items", "len", "[].t", "len", "int", "int", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "datetime.timedelta", "datetime.timedelta", "json.dumps", "int", "pathlib.Path", "int", "int", "int", "int"], "function", ["home.repos.pwc.inspect_result.hirl-team_hirl.pretrain.ibot.iBOTRunner.build_dataset", "home.repos.pwc.inspect_result.hirl-team_hirl.pretrain.ibot.iBOTRunner.build_model", "home.repos.pwc.inspect_result.hirl-team_hirl.pretrain.ibot.iBOTRunner.build_optimizer", "home.repos.pwc.inspect_result.hirl-team_hirl.pretrain.ibot.iBOTRunner.forward_batch", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.hirl-team_hirl.pretrain.moco.MoCoRunner.log_metrics", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.MetricLogger.log_every", "home.repos.pwc.inspect_result.hirl-team_hirl.pipelines.hirl.HIRL.forward_feature", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_rank", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.clustering.run_hkmeans", "home.repos.pwc.inspect_result.hirl-team_hirl.pretrain.ibot.iBOTRunner.set_epoch", "home.repos.pwc.inspect_result.hirl-team_hirl.downstream.finetune.FinetuneRunner.train_one_epoch", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.hirl-team_hirl.runners.base.BaseRunner.save_model", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.is_main_process", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_world_size", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_rank", "home.repos.pwc.inspect_result.hirl-team_hirl.eval_common.eval_clustering.run_clustering", "home.repos.pwc.inspect_result.hirl-team_hirl.pipelines.hirl.HIRL.forward_feature", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_rank"], ["\n", "\n", "emb_keys", "=", "{", "\"cnn\"", ":", "\"inst_emb\"", ",", "\"vit_cls\"", ":", "\"inst_cls_emb\"", ",", "\"vit_mean\"", ":", "\"inst_mean_emb\"", "}", "\n", "eps", "=", "1e-6", "\n", "\n", "def", "__init__", "(", "self", ",", "model", ",", "num_cluster", ",", "num_neg_path", "=", "1000", ",", "train_emb", "=", "\"cnn\"", ",", "\n", "num_mlp_layer", "=", "2", ",", "activation", "=", "\"relu\"", ",", "batch_norm", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "num_cluster", "=", "num_cluster", "\n", "self", ".", "num_hierarchy", "=", "len", "(", "num_cluster", ")", "\n", "self", ".", "num_neg_path", "=", "num_neg_path", "\n", "self", ".", "emb_key", "=", "self", ".", "emb_keys", "[", "train_emb", "]", "\n", "\n", "self", ".", "input_dim", "=", "model", ".", "inst_dim", "\n", "hidden_dims", "=", "[", "self", ".", "input_dim", "]", "*", "self", ".", "num_hierarchy", "\n", "self", ".", "projections", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_hierarchy", ")", ":", "\n", "            ", "projection", "=", "layers", ".", "MLP", "(", "self", ".", "input_dim", ",", "[", "hidden_dims", "[", "i", "]", "]", "*", "num_mlp_layer", ",", "activation", "=", "activation", ",", "batch_norm", "=", "batch_norm", ")", "\n", "self", ".", "projections", ".", "append", "(", "projection", ")", "\n", "\n", "", "", "def", "sample_neg_path", "(", "self", ",", "index", ",", "cluster_result", ")", ":", "\n", "        ", "im2cluster", "=", "cluster_result", "[", "\"im2cluster\"", "]", "\n", "centroids", "=", "cluster_result", "[", "\"centroids\"", "]", "\n", "cluster2cluster", "=", "cluster_result", "[", "\"cluster2cluster\"", "]", "\n", "\n", "# sample negative paths", "\n", "neg_im2cluster", "=", "[", "]", "\n", "for", "hierarchy_id", "in", "range", "(", "self", ".", "num_hierarchy", ")", ":", "\n", "            ", "if", "hierarchy_id", "==", "0", ":", "\n", "                ", "im2cluster_", "=", "torch", ".", "multinomial", "(", "torch", ".", "ones", "(", "centroids", "[", "0", "]", ".", "shape", "[", "0", "]", ",", "device", "=", "centroids", "[", "0", "]", ".", "device", ")", ",", "\n", "len", "(", "index", ")", "*", "self", ".", "num_neg_path", ",", "replacement", "=", "True", ")", ".", "view", "(", "len", "(", "index", ")", ",", "-", "1", ")", "\n", "neg_im2cluster", ".", "append", "(", "im2cluster_", ")", "\n", "", "else", ":", "\n", "                ", "im2cluster_", "=", "cluster2cluster", "[", "hierarchy_id", "-", "1", "]", "[", "im2cluster_", ".", "view", "(", "-", "1", ")", "]", ".", "view", "(", "len", "(", "index", ")", ",", "-", "1", ")", "\n", "neg_im2cluster", ".", "append", "(", "im2cluster_", ")", "\n", "", "", "neg_im2cluster", "=", "torch", ".", "stack", "(", "neg_im2cluster", ",", "dim", "=", "-", "1", ")", "# [N, N_neg, L]", "\n", "\n", "# get true negatives", "\n", "pos_im2cluster", "=", "torch", ".", "stack", "(", "[", "im2cluster", "[", "hid", "]", "[", "index", "]", "for", "hid", "in", "range", "(", "self", ".", "num_hierarchy", ")", "]", ",", "dim", "=", "-", "1", ")", "# [N, L]", "\n", "true_negative", "=", "torch", ".", "any", "(", "neg_im2cluster", "!=", "pos_im2cluster", ".", "unsqueeze", "(", "1", ")", ",", "dim", "=", "-", "1", ")", ".", "to", "(", "torch", ".", "long", ")", "# [N, N_neg]", "\n", "\n", "return", "neg_im2cluster", ",", "true_negative", "\n", "\n", "", "def", "semantic_path_discrimination_loss", "(", "self", ",", "semantic_embs", ",", "index", ",", "cluster_result", ",", "neg_im2cluster", ",", "true_negative", ")", ":", "\n", "        ", "centroids", "=", "cluster_result", "[", "\"centroids\"", "]", "\n", "im2cluster", "=", "cluster_result", "[", "\"im2cluster\"", "]", "\n", "\n", "# BCE loss for positive paths", "\n", "batch_size", "=", "semantic_embs", ".", "shape", "[", "0", "]", "\n", "semantic_embs", "=", "semantic_embs", ".", "view", "(", "batch_size", ",", "self", ".", "num_hierarchy", ",", "-", "1", ")", "# [N, L, D]", "\n", "semantic_embs", "=", "F", ".", "normalize", "(", "semantic_embs", ",", "dim", "=", "-", "1", ")", "\n", "pos_path", "=", "torch", ".", "stack", "(", "[", "F", ".", "normalize", "(", "centroids", "[", "h_id", "]", "[", "cluster_label", "[", "index", "]", "]", ",", "dim", "=", "-", "1", ")", "for", "(", "h_id", ",", "cluster_label", ")", "in", "enumerate", "(", "im2cluster", ")", "]", ",", "dim", "=", "1", ")", "# [N, L, D]", "\n", "pos_path_sim", "=", "torch", ".", "prod", "(", "(", "(", "(", "semantic_embs", "*", "pos_path", ")", ".", "sum", "(", "-", "1", ")", "+", "1", ")", "/", "2", ")", ",", "dim", "=", "1", ")", "# [N,]", "\n", "semantic_loss", "=", "-", "torch", ".", "log", "(", "pos_path_sim", "+", "self", ".", "eps", ")", "\n", "\n", "# BCE loss for negative paths", "\n", "neg_paths", "=", "[", "F", ".", "normalize", "(", "centroids", "[", "h_id", "]", "[", "neg_im2cluster", "[", ":", ",", ":", ",", "h_id", "]", ".", "view", "(", "-", "1", ")", "]", ".", "view", "(", "batch_size", ",", "self", ".", "num_neg_path", ",", "-", "1", ")", ",", "dim", "=", "-", "1", ")", "for", "h_id", "in", "range", "(", "self", ".", "num_hierarchy", ")", "]", "\n", "neg_paths", "=", "torch", ".", "stack", "(", "neg_paths", ",", "-", "2", ")", "# [N, N_neg, L, D]", "\n", "neg_prototype_sim", "=", "(", "semantic_embs", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "self", ".", "num_neg_path", ",", "1", ",", "1", ")", "*", "neg_paths", ")", ".", "sum", "(", "-", "1", ")", "# [N, N_neg, L]", "\n", "neg_path_sim", "=", "torch", ".", "prod", "(", "(", "neg_prototype_sim", "+", "1", ")", "/", "2", ",", "dim", "=", "-", "1", ")", "# [N, N_neg]", "\n", "neg_path_sim_loss", "=", "-", "torch", ".", "log", "(", "1", "-", "neg_path_sim", "+", "self", ".", "eps", ")", "\n", "neg_path_sim_loss", "=", "(", "neg_path_sim_loss", "*", "true_negative", ")", ".", "sum", "(", "-", "1", ")", "/", "(", "true_negative", ".", "sum", "(", "-", "1", ")", "+", "self", ".", "eps", ")", "# [N,]", "\n", "\n", "semantic_loss", "=", "torch", ".", "stack", "(", "[", "semantic_loss", ",", "neg_path_sim_loss", "]", ",", "dim", "=", "-", "1", ")", ".", "mean", "(", ")", "\n", "return", "semantic_loss", "\n", "\n", "", "def", "forward_feature", "(", "self", ",", "images", ")", ":", "\n", "        ", "return", "self", ".", "model", ".", "forward_feature", "(", "images", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "images", ",", "index", ",", "cluster_result", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            images (torch.tensor or list[torch.tensor]): a batch of input images.\n            index (torch.tensor): the indices of training samples.\n            cluster_result (dict): cluster assignments, centroids and density. \n\n        Returns:\n            output_dict (dict): all outputs (e.g., losses and embeddings).\n        \"\"\"", "\n", "output_dict", "=", "self", ".", "model", "(", "images", ",", "return_hooks", "=", "True", ",", "**", "kwargs", ")", "\n", "image_loss", ",", "embedding_dict", "=", "output_dict", "[", "\"loss\"", "]", ",", "output_dict", "[", "\"embeddings\"", "]", "\n", "loss", "=", "image_loss", "\n", "output_dict", "[", "\"image_loss\"", "]", "=", "image_loss", ".", "item", "(", ")", "\n", "\n", "# Apply semantic modeling loss in the second training stage", "\n", "if", "cluster_result", "is", "not", "None", ":", "\n", "            ", "all_img_emb", "=", "embedding_dict", "[", "self", ".", "emb_key", "]", "\n", "img_emb", "=", "all_img_emb", "[", "0", "]", "if", "isinstance", "(", "all_img_emb", ",", "list", ")", "else", "all_img_emb", "\n", "semantic_embs", "=", "[", "]", "\n", "for", "hierarchy_id", "in", "range", "(", "self", ".", "num_hierarchy", ")", ":", "\n", "                ", "semantic_emb", "=", "self", ".", "projections", "[", "hierarchy_id", "]", "(", "img_emb", ")", "\n", "semantic_emb", "=", "F", ".", "normalize", "(", "semantic_emb", ",", "dim", "=", "-", "1", ")", "\n", "semantic_embs", ".", "append", "(", "semantic_emb", ")", "\n", "\n", "", "semantic_embs", "=", "torch", ".", "cat", "(", "semantic_embs", ",", "dim", "=", "-", "1", ")", "\n", "neg_im2cluster", ",", "true_negative", "=", "self", ".", "sample_neg_path", "(", "index", ",", "cluster_result", ")", "\n", "semantic_loss", "=", "self", ".", "semantic_path_discrimination_loss", "(", "semantic_embs", ",", "index", ",", "cluster_result", ",", "\n", "neg_im2cluster", ",", "true_negative", ")", "\n", "loss", "+=", "semantic_loss", "\n", "output_dict", "[", "\"semantic_loss\"", "]", "=", "semantic_loss", ".", "item", "(", ")", "\n", "\n", "", "output_dict", "[", "\"loss\"", "]", "=", "loss", "\n", "return", "output_dict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hirl-team_hirl.pretrain.swav.SwAVRunner.build_dataset": [[20, 40], ["args.get", "args.get", "hirl.utils.misc.ImageFolderInstance", "print", "print", "hirl.utils.dist.get_world_size", "hirl.utils.dist.get_rank", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "print", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "hirl.utils.transforms.MultiCropsTransform", "hirl.utils.transforms.SingleCropTransform", "os.path.join", "str"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_world_size", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_rank"], ["\n", "def", "__init__", "(", "self", ",", "base_arch", "=", "\"resnet50\"", ",", "dim", "=", "128", ",", "batch_size", "=", "64", ",", "queue_length", "=", "0", ",", "T", "=", "0.1", ",", "epsilon", "=", "0.05", ",", "mlp", "=", "True", ",", "\n", "hidden_mlp", "=", "2048", ",", "num_proto", "=", "3000", ",", "num_sinkhorn", "=", "3", ",", "multi_crop", "=", "False", ",", "normalize", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "world_size", "=", "dist", ".", "get_world_size", "(", ")", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "queue_length", "=", "queue_length", "\n", "self", ".", "T", "=", "T", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "self", ".", "num_proto", "=", "num_proto", "\n", "self", ".", "num_sinkhorn", "=", "num_sinkhorn", "\n", "self", ".", "multi_crop", "=", "multi_crop", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.pretrain.swav.SwAVRunner.build_model": [[41, 53], ["torch.SyncBatchNorm.convert_sync_batchnorm", "torch.SyncBatchNorm.convert_sync_batchnorm", "torch.nn.parallel.DistributedDataParallel.cuda", "torch.nn.parallel.DistributedDataParallel.cuda", "print", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "str"], "methods", ["None"], ["self", ".", "normalize", "=", "normalize", "\n", "\n", "# create encoder and projection head", "\n", "self", ".", "encoder", "=", "models", ".", "__dict__", "[", "base_arch", "]", "(", "num_classes", "=", "dim", ")", "\n", "self", ".", "backbone", "=", "self", ".", "encoder", "\n", "dim_mlp", "=", "self", ".", "encoder", ".", "fc", ".", "weight", ".", "shape", "[", "1", "]", "\n", "if", "mlp", ":", "\n", "## with a batch norm", "\n", "            ", "self", ".", "encoder", ".", "fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "dim_mlp", ",", "hidden_mlp", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "hidden_mlp", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "hidden_mlp", ",", "dim", ")", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.pretrain.swav.SwAVRunner.build_optimizer": [[54, 71], ["print", "print", "print", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "print", "hirl.utils.dist.get_world_size", "model.parameters", "print", "apex.parallel.LARC.LARC"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_world_size"], [")", "\n", "\n", "# create prototypes and queue", "\n", "", "self", ".", "prototypes", "=", "nn", ".", "Linear", "(", "dim", ",", "num_proto", ",", "bias", "=", "False", ")", "\n", "self", ".", "queue_length", "-=", "self", ".", "queue_length", "%", "(", "self", ".", "world_size", "*", "self", ".", "batch_size", ")", "\n", "self", ".", "use_queue", "=", "self", ".", "queue_length", ">=", "self", ".", "world_size", "\n", "if", "self", ".", "use_queue", ":", "\n", "            ", "self", ".", "register_buffer", "(", "\"queue\"", ",", "torch", ".", "zeros", "(", "2", ",", "self", ".", "queue_length", "//", "self", ".", "world_size", ",", "dim", ")", ")", "\n", "\n", "# initialize model weights", "\n", "", "self", ".", "apply", "(", "self", ".", "_init_weights", ")", "\n", "\n", "# create hooks for the embeddings before and after projection", "\n", "self", ".", "entangled_dim", "=", "dim_mlp", "\n", "self", ".", "inst_dim", "=", "dim", "\n", "self", ".", "_embeddings", "=", "{", "}", "\n", "def", "hook_function", "(", "module", ",", "input_emb", ",", "output_emb", ")", ":", "\n", "            ", "if", "isinstance", "(", "input_emb", ",", "tuple", ")", "and", "len", "(", "input_emb", ")", "==", "1", ":", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.pretrain.swav.SwAVRunner.adjust_learning_rate": [[72, 100], ["args.get", "args.get", "args.get", "len", "args.get", "hirl.models.swav.SwAVRunner.model_without_ddp.named_parameters", "hirl.models.swav.SwAVRunner.model_without_ddp.named_parameters", "print", "math.cos"], "methods", ["None"], ["                ", "input_emb", "=", "input_emb", "[", "0", "]", "\n", "", "if", "isinstance", "(", "output_emb", ",", "tuple", ")", "and", "len", "(", "output_emb", ")", "==", "1", ":", "\n", "                ", "output_emb", "=", "output_emb", "[", "0", "]", "\n", "", "self", ".", "_embeddings", "[", "\"entangled_emb\"", "]", "=", "input_emb", "\n", "self", ".", "_embeddings", "[", "\"inst_emb\"", "]", "=", "output_emb", "\n", "", "project_layer", "=", "dict", "(", "[", "*", "self", ".", "encoder", ".", "named_modules", "(", ")", "]", ")", "[", "\"fc\"", "]", "\n", "project_layer", ".", "register_forward_hook", "(", "hook_function", ")", "\n", "\n", "", "def", "_init_weights", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "            ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "\"fan_out\"", ",", "nonlinearity", "=", "\"relu\"", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "", "", "def", "extract_feat", "(", "self", ",", "images", ")", ":", "\n", "# extract feature of global views", "\n", "        ", "im_q", ",", "im_k", "=", "images", "[", "0", "]", ",", "images", "[", "1", "]", "\n", "q", "=", "self", ".", "encoder", "(", "im_q", ")", "\n", "embedding_dict", "=", "defaultdict", "(", "list", ")", "\n", "for", "k", ",", "v", "in", "self", ".", "_embeddings", ".", "items", "(", ")", ":", "\n", "            ", "embedding_dict", "[", "k", "]", ".", "append", "(", "v", ")", "\n", "\n", "", "k", "=", "self", ".", "encoder", "(", "im_k", ")", "\n", "if", "self", ".", "normalize", ":", "\n", "            ", "q", "=", "F", ".", "normalize", "(", "q", ",", "dim", "=", "1", ")", "\n", "k", "=", "F", ".", "normalize", "(", "k", ",", "dim", "=", "1", ")", "\n", "\n", "# extract features of local views", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.pretrain.swav.SwAVRunner.log_metrics": [[101, 106], ["metric_logger.update", "src_logit.argmax", "tgt_logit.argmax"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.AverageMeter.update"], ["", "if", "self", ".", "multi_crop", ":", "\n", "            ", "local_views", "=", "[", "]", "\n", "for", "im_local", "in", "images", "[", "2", ":", "]", ":", "\n", "                ", "local_q", "=", "self", ".", "encoder", "(", "im_local", ")", "\n", "if", "self", ".", "normalize", ":", "\n", "                    ", "local_q", "=", "F", ".", "normalize", "(", "local_q", ",", "dim", "=", "1", ")", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.pretrain.moco.MoCoRunner.build_dataset": [[19, 34], ["hirl.utils.misc.ImageFolderInstance", "print", "hirl.utils.dist.get_world_size", "hirl.utils.dist.get_rank", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "print", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "hirl.utils.transforms.MultiCropsTransform", "hirl.utils.transforms.SingleCropTransform", "os.path.join", "str"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_world_size", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_rank"], ["\n", "def", "__init__", "(", "self", ",", "base_arch", "=", "\"resnet50\"", ",", "dim", "=", "128", ",", "queue_length", "=", "16384", ",", "m", "=", "0.999", ",", "T", "=", "0.2", ",", "\n", "mlp", "=", "True", ",", "multi_crop", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "queue_length", "=", "queue_length", "\n", "self", ".", "m", "=", "m", "\n", "self", ".", "T", "=", "T", "\n", "self", ".", "multi_crop", "=", "multi_crop", "\n", "\n", "# create encoders and projection heads", "\n", "self", ".", "encoder_q", "=", "models", ".", "__dict__", "[", "base_arch", "]", "(", "num_classes", "=", "dim", ")", "\n", "self", ".", "encoder_k", "=", "models", ".", "__dict__", "[", "base_arch", "]", "(", "num_classes", "=", "dim", ")", "\n", "\n", "self", ".", "backbone", "=", "self", ".", "encoder_q", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.pretrain.moco.MoCoRunner.build_model": [[35, 46], ["torch.nn.parallel.DistributedDataParallel.cuda", "torch.nn.parallel.DistributedDataParallel.cuda", "print", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "str"], "methods", ["None"], ["\n", "dim_mlp", "=", "self", ".", "encoder_q", ".", "fc", ".", "weight", ".", "shape", "[", "1", "]", "\n", "if", "mlp", ":", "\n", "            ", "self", ".", "encoder_q", ".", "fc", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "dim_mlp", ",", "dim_mlp", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "self", ".", "encoder_q", ".", "fc", ")", "\n", "self", ".", "encoder_k", ".", "fc", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "dim_mlp", ",", "dim_mlp", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "self", ".", "encoder_k", ".", "fc", ")", "\n", "\n", "# initialize key encoder's parameters as those of query encoder; not update key encoder with gradients ", "\n", "", "for", "param_q", ",", "param_k", "in", "zip", "(", "self", ".", "encoder_q", ".", "parameters", "(", ")", ",", "self", ".", "encoder_k", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "param_k", ".", "data", ".", "copy_", "(", "param_q", ".", "data", ")", "\n", "param_k", ".", "requires_grad", "=", "False", "\n", "\n", "# create hooks for the embeddings before and after projection", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.pretrain.moco.MoCoRunner.build_optimizer": [[47, 59], ["print", "print", "print", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "hirl.utils.dist.get_world_size", "model.parameters"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.utils.dist.get_world_size"], ["", "self", ".", "entangled_dim", "=", "dim_mlp", "\n", "self", ".", "inst_dim", "=", "dim", "\n", "self", ".", "_embeddings", "=", "{", "}", "\n", "def", "hook_function", "(", "module", ",", "input_emb", ",", "output_emb", ")", ":", "\n", "            ", "if", "isinstance", "(", "input_emb", ",", "tuple", ")", "and", "len", "(", "input_emb", ")", "==", "1", ":", "\n", "                ", "input_emb", "=", "input_emb", "[", "0", "]", "\n", "", "if", "isinstance", "(", "output_emb", ",", "tuple", ")", "and", "len", "(", "output_emb", ")", "==", "1", ":", "\n", "                ", "output_emb", "=", "output_emb", "[", "0", "]", "\n", "", "self", ".", "_embeddings", "[", "\"entangled_emb\"", "]", "=", "input_emb", "\n", "self", ".", "_embeddings", "[", "\"inst_emb\"", "]", "=", "output_emb", "\n", "", "project_layer", "=", "dict", "(", "[", "*", "self", ".", "encoder_q", ".", "named_modules", "(", ")", "]", ")", "[", "\"fc\"", "]", "\n", "project_layer", ".", "register_forward_hook", "(", "hook_function", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.pretrain.moco.MoCoRunner.adjust_learning_rate": [[60, 69], ["math.floor", "math.cos"], "methods", ["None"], ["# create the queue", "\n", "self", ".", "register_buffer", "(", "\"queue\"", ",", "torch", ".", "randn", "(", "dim", ",", "queue_length", ")", ")", "\n", "self", ".", "queue", "=", "F", ".", "normalize", "(", "self", ".", "queue", ",", "dim", "=", "0", ")", "\n", "self", ".", "register_buffer", "(", "\"queue_ptr\"", ",", "torch", ".", "zeros", "(", "1", ",", "dtype", "=", "torch", ".", "long", ")", ")", "\n", "\n", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "concat_all_gather", "(", "self", ",", "x", ")", ":", "\n", "        ", "x_gather", "=", "[", "torch", ".", "ones_like", "(", "x", ")", "for", "_", "in", "range", "(", "torch", ".", "distributed", ".", "get_world_size", "(", ")", ")", "]", "\n", "torch", ".", "distributed", ".", "all_gather", "(", "x_gather", ",", "x", ",", "async_op", "=", "False", ")", "\n", "output", "=", "torch", ".", "cat", "(", "x_gather", ",", "dim", "=", "0", ")", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.pretrain.moco.MoCoRunner.log_metrics": [[70, 88], ["torch.cross_entropy().item", "torch.cross_entropy().item", "metric_logger.update", "[].item", "metric_logger.update", "enumerate", "metric_logger.update", "torch.cross_entropy", "torch.cross_entropy", "zip", "torch.cross_entropy().item", "torch.cross_entropy().item", "metric_logger.update", "[].item", "metric_logger.update", "hirl.utils.misc.accuracy", "torch.cross_entropy", "torch.cross_entropy", "hirl.utils.misc.accuracy"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.accuracy", "home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.accuracy"], ["return", "output", "\n", "\n", "", "def", "momentum_update_key_encoder", "(", "self", ")", ":", "\n", "        ", "self", ".", "_momentum_update_key_encoder", "(", ")", "\n", "\n", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_momentum_update_key_encoder", "(", "self", ")", ":", "\n", "        ", "for", "param_q", ",", "param_k", "in", "zip", "(", "self", ".", "encoder_q", ".", "parameters", "(", ")", ",", "self", ".", "encoder_k", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "param_k", ".", "data", "=", "param_k", ".", "data", "*", "self", ".", "m", "+", "param_q", ".", "data", "*", "(", "1.", "-", "self", ".", "m", ")", "\n", "\n", "", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_dequeue_and_enqueue", "(", "self", ",", "keys", ")", ":", "\n", "        ", "keys", "=", "self", ".", "concat_all_gather", "(", "keys", ")", "\n", "batch_size", "=", "keys", ".", "shape", "[", "0", "]", "\n", "ptr", "=", "int", "(", "self", ".", "queue_ptr", ")", "\n", "assert", "self", ".", "queue_length", "%", "batch_size", "==", "0", "\n", "\n", "# replace the keys at ptr (dequeue and enqueue)", "\n", "self", ".", "queue", "[", ":", ",", "ptr", ":", "ptr", "+", "batch_size", "]", "=", "keys", ".", "T", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.pretrain.ibot.iBOTRunner.build_dataset": [[20, 51], ["hirl.utils.transforms.DataAugmentationiBOT", "hirl.utils.misc.ImageFolderMask", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "os.path.join", "len"], "methods", ["None"], ["\n", "def", "__init__", "(", "self", ",", "teacher", ",", "student", ",", "out_dim", "=", "8192", ",", "patch_out_dim", "=", "8192", ",", "\n", "global_crops_number", "=", "2", ",", "local_crops_number", "=", "0", ",", "\n", "student_temperature", "=", "0.1", ",", "cls_temperature", "=", "0.07", ",", "patch_temperature", "=", "0.07", ",", "\n", "center_momentum", "=", "0.9", ",", "center_momentum2", "=", "0.9", ",", "teacher_momentum", "=", "0.996", ",", "\n", "lambda1", "=", "1.0", ",", "lambda2", "=", "1.0", ",", "\n", "norm_last_layer", "=", "False", ",", "norm_in_head", "=", "None", ",", "act_in_head", "=", "\"gelu\"", ",", "\n", "shared_head", "=", "True", ",", "shared_head_teacher", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "## init teacher and student", "\n", "self", ".", "teacher", "=", "teacher", "\n", "self", ".", "student", "=", "student", "\n", "\n", "self", ".", "backbone", "=", "self", ".", "teacher", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.pretrain.ibot.iBOTRunner.build_model": [[52, 81], ["model.cuda.cuda.cuda", "hirl.utils.misc.has_batchnorms", "torch.parallel.DistributedDataParallel", "torch.parallel.DistributedDataParallel", "torch.SyncBatchNorm.convert_sync_batchnorm", "torch.SyncBatchNorm.convert_sync_batchnorm", "torch.SyncBatchNorm.convert_sync_batchnorm", "torch.SyncBatchNorm.convert_sync_batchnorm"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.utils.misc.has_batchnorms"], ["## ensure that the teacher and the student share the same weight", "\n", "msg", "=", "self", ".", "teacher", ".", "load_state_dict", "(", "self", ".", "student", ".", "state_dict", "(", ")", ",", "strict", "=", "False", ")", "\n", "print", "(", "\"data copying from student to teacher with msg: {}\"", ".", "format", "(", "msg", ")", ")", "\n", "for", "param_teacher", "in", "self", ".", "teacher", ".", "parameters", "(", ")", ":", "\n", "            ", "param_teacher", ".", "requires_grad", "=", "False", "\n", "\n", "", "embed_dim", "=", "self", ".", "student", ".", "embed_dim", "\n", "\n", "self", ".", "student", "=", "layers", ".", "MultiCropWrapper", "(", "student", ",", "layers", ".", "iBOTHead", "(", "\n", "embed_dim", ",", "out_dim", ",", "patch_out_dim", "=", "patch_out_dim", ",", "\n", "norm", "=", "norm_in_head", ",", "act", "=", "act_in_head", ",", "\n", "norm_last_layer", "=", "norm_last_layer", ",", "shared_head", "=", "shared_head", ",", "\n", ")", ")", "\n", "self", ".", "teacher", "=", "layers", ".", "MultiCropWrapper", "(", "\n", "teacher", ",", "layers", ".", "iBOTHead", "(", "\n", "embed_dim", ",", "out_dim", ",", "\n", "patch_out_dim", "=", "patch_out_dim", ",", "norm", "=", "norm_in_head", ",", "\n", "act", "=", "act_in_head", ",", "shared_head", "=", "shared_head_teacher", ",", "\n", ")", ",", "\n", ")", "\n", "\n", "# create hooks for the embeddings before and after projection", "\n", "self", ".", "entangled_dim", "=", "self", ".", "student", ".", "head", ".", "mlp", ".", "weight", ".", "shape", "[", "1", "]", "if", "isinstance", "(", "self", ".", "student", ".", "head", ".", "mlp", ",", "nn", ".", "Linear", ")", "else", "self", ".", "student", ".", "head", ".", "mlp", "[", "0", "]", ".", "weight", ".", "shape", "[", "1", "]", "\n", "self", ".", "inst_dim", "=", "self", ".", "student", ".", "head", ".", "mlp", ".", "weight", ".", "shape", "[", "0", "]", "if", "isinstance", "(", "self", ".", "student", ".", "head", ".", "mlp", ",", "nn", ".", "Linear", ")", "else", "self", ".", "student", ".", "head", ".", "mlp", "[", "-", "1", "]", ".", "weight", ".", "shape", "[", "0", "]", "\n", "self", ".", "_embeddings", "=", "{", "}", "\n", "def", "hook_function", "(", "module", ",", "input_emb", ",", "output_emb", ")", ":", "\n", "            ", "if", "isinstance", "(", "input_emb", ",", "tuple", ")", "and", "len", "(", "input_emb", ")", "==", "1", ":", "\n", "                ", "input_emb", "=", "input_emb", "[", "0", "]", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.pretrain.ibot.iBOTRunner.build_optimizer": [[82, 103], ["super().build_optimizer", "print", "numpy.concatenate", "numpy.concatenate", "numpy.linspace", "numpy.linspace", "numpy.ones", "numpy.ones", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.pretrain.ibot.iBOTRunner.build_optimizer"], ["", "if", "isinstance", "(", "output_emb", ",", "tuple", ")", "and", "len", "(", "output_emb", ")", "==", "1", ":", "\n", "                ", "output_emb", "=", "output_emb", "[", "0", "]", "\n", "", "entangled_cls_emb", "=", "input_emb", "[", ":", ",", "0", "]", "\n", "entangled_mean_emb", "=", "torch", ".", "mean", "(", "input_emb", "[", ":", ",", "1", ":", "]", ",", "dim", "=", "1", ")", "\n", "inst_cls_emb", "=", "output_emb", "[", ":", ",", "0", "]", "\n", "inst_mean_emb", "=", "torch", ".", "mean", "(", "output_emb", "[", ":", ",", "1", ":", "]", ",", "dim", "=", "1", ")", "\n", "self", ".", "_embeddings", "[", "\"entangled_cls_emb\"", "]", "=", "entangled_cls_emb", "\n", "self", ".", "_embeddings", "[", "\"entangled_mean_emb\"", "]", "=", "entangled_mean_emb", "\n", "self", ".", "_embeddings", "[", "\"inst_cls_emb\"", "]", "=", "inst_cls_emb", "\n", "self", ".", "_embeddings", "[", "\"inst_mean_emb\"", "]", "=", "inst_mean_emb", "\n", "\n", "", "self", ".", "student", ".", "head", ".", "mlp", ".", "register_forward_hook", "(", "hook_function", ")", "\n", "\n", "self", ".", "student_temperature", "=", "student_temperature", "\n", "self", ".", "cls_temperature", "=", "cls_temperature", "\n", "self", ".", "patch_temperature", "=", "patch_temperature", "\n", "\n", "self", ".", "center_momentum", "=", "center_momentum", "\n", "self", ".", "center_momentum2", "=", "center_momentum2", "\n", "self", ".", "teacher_momentum", "=", "teacher_momentum", "\n", "\n", "self", ".", "global_crops_number", "=", "global_crops_number", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.pretrain.ibot.iBOTRunner.set_epoch": [[104, 110], ["super().set_epoch", "hirl.models.ibot.iBOTRunner.data_loader.dataset.set_epoch"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.pretrain.ibot.iBOTRunner.set_epoch", "home.repos.pwc.inspect_result.hirl-team_hirl.pretrain.ibot.iBOTRunner.set_epoch"], ["self", ".", "local_crops_number", "=", "local_crops_number", "\n", "self", ".", "ncrops", "=", "global_crops_number", "+", "local_crops_number", "\n", "self", ".", "register_buffer", "(", "\"center\"", ",", "torch", ".", "zeros", "(", "1", ",", "out_dim", ")", ")", "\n", "self", ".", "register_buffer", "(", "\"center2\"", ",", "torch", ".", "zeros", "(", "1", ",", "1", ",", "patch_out_dim", ")", ")", "\n", "self", ".", "lambda1", "=", "lambda1", "\n", "self", ".", "lambda2", "=", "lambda2", "\n", "\n"]], "home.repos.pwc.inspect_result.hirl-team_hirl.pretrain.ibot.iBOTRunner.forward_batch": [[111, 117], ["super().forward_batch", "msk.cuda"], "methods", ["home.repos.pwc.inspect_result.hirl-team_hirl.pretrain.ibot.iBOTRunner.forward_batch"], ["\n", "", "def", "get_loss", "(", "self", ",", "student_output", ",", "teacher_output", ",", "student_local_cls", ",", "student_mask", ",", "\n", "cls_temperature", ",", "patch_temperature", ")", ":", "\n", "        ", "student_cls", ",", "student_patch", "=", "student_output", "\n", "teacher_cls", ",", "teacher_patch", "=", "teacher_output", "\n", "\n", "if", "student_local_cls", "is", "not", "None", ":", "\n"]]}