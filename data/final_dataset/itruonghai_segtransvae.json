{"home.repos.pwc.inspect_result.itruonghai_segtransvae.None.trainer.BRATS.__init__": [[30, 47], ["pytorch_lightning.LightningModule.__init__", "models.SegTransVAE.SegTransVAE", "loss.loss.Loss_VAE", "monai.losses.DiceLoss", "monai.transforms.Compose", "monai.transforms.EnsureType", "monai.transforms.Activations", "monai.transforms.AsDiscrete"], "methods", ["home.repos.pwc.inspect_result.itruonghai_segtransvae.loss.loss.Loss_VAE.__init__"], ["    ", "def", "__init__", "(", "self", ",", "use_VAE", "=", "True", ",", "lr", "=", "1e-4", ",", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "use_vae", "=", "use_VAE", "\n", "self", ".", "lr", "=", "lr", "\n", "self", ".", "model", "=", "SegTransVAE", "(", "(", "128", ",", "128", ",", "128", ")", ",", "8", ",", "4", ",", "3", ",", "768", ",", "8", ",", "4", ",", "3072", ",", "use_VAE", "=", "use_VAE", ")", "\n", "\n", "self", ".", "loss_vae", "=", "Loss_VAE", "(", ")", "\n", "self", ".", "dice_loss", "=", "DiceLoss", "(", "to_onehot_y", "=", "False", ",", "sigmoid", "=", "True", ",", "squared_pred", "=", "True", ")", "\n", "self", ".", "post_trans_images", "=", "Compose", "(", "\n", "[", "EnsureType", "(", ")", ",", "\n", "Activations", "(", "sigmoid", "=", "True", ")", ",", "\n", "AsDiscrete", "(", "threshold_values", "=", "True", ")", ",", "\n", "]", "\n", ")", "\n", "\n", "self", ".", "best_val_dice", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.itruonghai_segtransvae.None.trainer.BRATS.forward": [[48, 50], ["trainer.BRATS.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "is_validation", "=", "True", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "x", ",", "is_validation", ")", "\n", "", "def", "training_step", "(", "self", ",", "batch", ",", "batch_index", ")", ":", "\n"]], "home.repos.pwc.inspect_result.itruonghai_segtransvae.None.trainer.BRATS.training_step": [[50, 93], ["trainer.BRATS.log", "trainer.BRATS.forward", "trainer.BRATS.dice_loss", "trainer.BRATS.forward", "trainer.BRATS.loss_vae", "trainer.BRATS.dice_loss", "trainer.BRATS.log", "trainer.BRATS.log", "matplotlib.subplots", "ax[].imshow", "ax[].set_title", "ax[].imshow", "ax[].set_title", "ax[].imshow", "ax[].set_title", "ax[].imshow", "ax[].set_title", "ax[].imshow", "ax[].set_title", "ax[].imshow", "ax[].set_title", "tensorboard.add_figure", "inputs.detach().cpu", "recon_batch.detach().cpu().float", "labels.detach().cpu().float", "trainer.BRATS.sigmoid().detach().cpu().float", "labels.detach().cpu().float", "trainer.BRATS.sigmoid().detach().cpu().float", "inputs.detach", "recon_batch.detach().cpu", "labels.detach().cpu", "trainer.BRATS.sigmoid().detach().cpu", "labels.detach().cpu", "trainer.BRATS.sigmoid().detach().cpu", "recon_batch.detach", "labels.detach", "trainer.BRATS.sigmoid().detach", "labels.detach", "trainer.BRATS.sigmoid().detach", "trainer.BRATS.sigmoid", "trainer.BRATS.sigmoid"], "methods", ["home.repos.pwc.inspect_result.itruonghai_segtransvae.loss.loss.Loss_VAE.forward", "home.repos.pwc.inspect_result.itruonghai_segtransvae.loss.loss.Loss_VAE.forward"], ["", "def", "training_step", "(", "self", ",", "batch", ",", "batch_index", ")", ":", "\n", "        ", "inputs", ",", "labels", "=", "(", "batch", "[", "'image'", "]", ",", "batch", "[", "'label'", "]", ")", "\n", "\n", "if", "not", "self", ".", "use_vae", ":", "\n", "            ", "outputs", "=", "self", ".", "forward", "(", "inputs", ",", "is_validation", "=", "False", ")", "\n", "loss", "=", "self", ".", "dice_loss", "(", "outputs", ",", "labels", ")", "\n", "", "else", ":", "\n", "            ", "outputs", ",", "recon_batch", ",", "mu", ",", "sigma", "=", "self", ".", "forward", "(", "inputs", ",", "is_validation", "=", "False", ")", "\n", "vae_loss", "=", "self", ".", "loss_vae", "(", "recon_batch", ",", "inputs", ",", "mu", ",", "sigma", ")", "\n", "dice_loss", "=", "self", ".", "dice_loss", "(", "outputs", ",", "labels", ")", "\n", "loss", "=", "dice_loss", "+", "1", "/", "(", "4", "*", "128", "*", "128", "*", "128", ")", "*", "vae_loss", "\n", "self", ".", "log", "(", "'train/vae_loss'", ",", "vae_loss", ")", "\n", "self", ".", "log", "(", "'train/dice_loss'", ",", "dice_loss", ")", "\n", "if", "batch_index", "==", "10", ":", "\n", "\n", "                ", "tensorboard", "=", "self", ".", "logger", ".", "experiment", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "nrows", "=", "1", ",", "ncols", "=", "6", ",", "figsize", "=", "(", "10", ",", "5", ")", ")", "\n", "\n", "\n", "ax", "[", "0", "]", ".", "imshow", "(", "inputs", ".", "detach", "(", ")", ".", "cpu", "(", ")", "[", "0", "]", "[", "0", "]", "[", ":", ",", ":", ",", "80", "]", ",", "cmap", "=", "'gray'", ")", "\n", "ax", "[", "0", "]", ".", "set_title", "(", "\"Input\"", ")", "\n", "\n", "ax", "[", "1", "]", ".", "imshow", "(", "recon_batch", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "float", "(", ")", "[", "0", "]", "[", "0", "]", "[", ":", ",", ":", ",", "80", "]", ",", "cmap", "=", "'gray'", ")", "\n", "ax", "[", "1", "]", ".", "set_title", "(", "\"Reconstruction\"", ")", "\n", "\n", "ax", "[", "2", "]", ".", "imshow", "(", "labels", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "float", "(", ")", "[", "0", "]", "[", "0", "]", "[", ":", ",", ":", ",", "80", "]", ",", "cmap", "=", "'gray'", ")", "\n", "ax", "[", "2", "]", ".", "set_title", "(", "\"Labels TC\"", ")", "\n", "\n", "ax", "[", "3", "]", ".", "imshow", "(", "outputs", ".", "sigmoid", "(", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "float", "(", ")", "[", "0", "]", "[", "0", "]", "[", ":", ",", ":", ",", "80", "]", ",", "cmap", "=", "'gray'", ")", "\n", "ax", "[", "3", "]", ".", "set_title", "(", "\"TC\"", ")", "\n", "\n", "ax", "[", "4", "]", ".", "imshow", "(", "labels", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "float", "(", ")", "[", "0", "]", "[", "2", "]", "[", ":", ",", ":", ",", "80", "]", ",", "cmap", "=", "'gray'", ")", "\n", "ax", "[", "4", "]", ".", "set_title", "(", "\"Labels ET\"", ")", "\n", "\n", "ax", "[", "5", "]", ".", "imshow", "(", "outputs", ".", "sigmoid", "(", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "float", "(", ")", "[", "0", "]", "[", "2", "]", "[", ":", ",", ":", ",", "80", "]", ",", "cmap", "=", "'gray'", ")", "\n", "ax", "[", "5", "]", ".", "set_title", "(", "\"ET\"", ")", "\n", "\n", "\n", "tensorboard", ".", "add_figure", "(", "'train_visualize'", ",", "fig", ",", "self", ".", "current_epoch", ")", "\n", "\n", "", "", "self", ".", "log", "(", "'train/loss'", ",", "loss", ")", "\n", "\n", "return", "loss", "\n", "", "def", "validation_step", "(", "self", ",", "batch", ",", "batch_index", ")", ":", "\n"]], "home.repos.pwc.inspect_result.itruonghai_segtransvae.None.trainer.BRATS.validation_step": [[93, 109], ["monai.inferers.sliding_window_inference", "trainer.BRATS.dice_loss", "trainer.BRATS.post_trans_images", "trainer.BRATS.loss.DiceScore", "trainer.BRATS.loss.DiceScore", "trainer.BRATS.loss.DiceScore"], "methods", ["home.repos.pwc.inspect_result.itruonghai_segtransvae.loss.loss.DiceScore", "home.repos.pwc.inspect_result.itruonghai_segtransvae.loss.loss.DiceScore", "home.repos.pwc.inspect_result.itruonghai_segtransvae.loss.loss.DiceScore"], ["", "def", "validation_step", "(", "self", ",", "batch", ",", "batch_index", ")", ":", "\n", "        ", "inputs", ",", "labels", "=", "(", "batch", "[", "'image'", "]", ",", "batch", "[", "'label'", "]", ")", "\n", "roi_size", "=", "(", "128", ",", "128", ",", "128", ")", "\n", "sw_batch_size", "=", "1", "\n", "outputs", "=", "sliding_window_inference", "(", "\n", "inputs", ",", "roi_size", ",", "sw_batch_size", ",", "self", ".", "model", ",", "overlap", "=", "0.5", ")", "\n", "loss", "=", "self", ".", "dice_loss", "(", "outputs", ",", "labels", ")", "\n", "\n", "\n", "val_outputs", "=", "self", ".", "post_trans_images", "(", "outputs", ")", "\n", "metric_tc", "=", "DiceScore", "(", "y_pred", "=", "val_outputs", "[", ":", ",", "0", ":", "1", "]", ",", "y", "=", "labels", "[", ":", ",", "0", ":", "1", "]", ",", "include_background", "=", "True", ")", "\n", "metric_wt", "=", "DiceScore", "(", "y_pred", "=", "val_outputs", "[", ":", ",", "1", ":", "2", "]", ",", "y", "=", "labels", "[", ":", ",", "1", ":", "2", "]", ",", "include_background", "=", "True", ")", "\n", "metric_et", "=", "DiceScore", "(", "y_pred", "=", "val_outputs", "[", ":", ",", "2", ":", "3", "]", ",", "y", "=", "labels", "[", ":", ",", "2", ":", "3", "]", ",", "include_background", "=", "True", ")", "\n", "mean_val_dice", "=", "(", "metric_tc", "+", "metric_wt", "+", "metric_et", ")", "/", "3", "\n", "return", "{", "'val_loss'", ":", "loss", ",", "'val_mean_dice'", ":", "mean_val_dice", ",", "'val_dice_tc'", ":", "metric_tc", ",", "\n", "'val_dice_wt'", ":", "metric_wt", ",", "'val_dice_et'", ":", "metric_et", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.itruonghai_segtransvae.None.trainer.BRATS.validation_epoch_end": [[110, 140], ["torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "trainer.BRATS.log", "trainer.BRATS.log", "trainer.BRATS.log", "trainer.BRATS.log", "trainer.BRATS.log", "os.makedirs", "print", "open", "csv.writer", "csv.writer.writerow", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "open", "csv.writer", "csv.writer.writerow", "torch.stack().mean.item", "torch.stack().mean.item", "torch.stack().mean.item", "torch.stack().mean.item", "torch.stack().mean.item", "torch.stack().mean.item", "torch.stack().mean.item", "torch.stack().mean.item", "torch.stack().mean.item", "torch.stack().mean.item", "torch.stack().mean.item", "torch.stack().mean.item"], "methods", ["None"], ["", "def", "validation_epoch_end", "(", "self", ",", "outputs", ")", ":", "\n", "        ", "loss", "=", "torch", ".", "stack", "(", "[", "x", "[", "'val_loss'", "]", "for", "x", "in", "outputs", "]", ")", ".", "mean", "(", ")", "\n", "mean_val_dice", "=", "torch", ".", "stack", "(", "[", "x", "[", "'val_mean_dice'", "]", "for", "x", "in", "outputs", "]", ")", ".", "mean", "(", ")", "\n", "metric_tc", "=", "torch", ".", "stack", "(", "[", "x", "[", "'val_dice_tc'", "]", "for", "x", "in", "outputs", "]", ")", ".", "mean", "(", ")", "\n", "metric_wt", "=", "torch", ".", "stack", "(", "[", "x", "[", "'val_dice_wt'", "]", "for", "x", "in", "outputs", "]", ")", ".", "mean", "(", ")", "\n", "metric_et", "=", "torch", ".", "stack", "(", "[", "x", "[", "'val_dice_et'", "]", "for", "x", "in", "outputs", "]", ")", ".", "mean", "(", ")", "\n", "self", ".", "log", "(", "'val/Loss'", ",", "loss", ")", "\n", "self", ".", "log", "(", "'val/MeanDiceScore'", ",", "mean_val_dice", ")", "\n", "self", ".", "log", "(", "'val/DiceTC'", ",", "metric_tc", ")", "\n", "self", ".", "log", "(", "'val/DiceWT'", ",", "metric_wt", ")", "\n", "self", ".", "log", "(", "'val/DiceET'", ",", "metric_et", ")", "\n", "os", ".", "makedirs", "(", "self", ".", "logger", ".", "log_dir", ",", "exist_ok", "=", "True", ")", "\n", "if", "self", ".", "current_epoch", "==", "0", ":", "\n", "            ", "with", "open", "(", "'{}/metric_log.csv'", ".", "format", "(", "self", ".", "logger", ".", "log_dir", ")", ",", "'w'", ")", "as", "f", ":", "\n", "                ", "writer", "=", "csv", ".", "writer", "(", "f", ")", "\n", "writer", ".", "writerow", "(", "[", "'Epoch'", ",", "'Mean Dice Score'", ",", "'Dice TC'", ",", "'Dice WT'", ",", "'Dice ET'", "]", ")", "\n", "", "", "with", "open", "(", "'{}/metric_log.csv'", ".", "format", "(", "self", ".", "logger", ".", "log_dir", ")", ",", "'a'", ")", "as", "f", ":", "\n", "            ", "writer", "=", "csv", ".", "writer", "(", "f", ")", "\n", "writer", ".", "writerow", "(", "[", "self", ".", "current_epoch", ",", "mean_val_dice", ".", "item", "(", ")", ",", "metric_tc", ".", "item", "(", ")", ",", "metric_wt", ".", "item", "(", ")", ",", "metric_et", ".", "item", "(", ")", "]", ")", "\n", "\n", "", "if", "mean_val_dice", ">", "self", ".", "best_val_dice", ":", "\n", "            ", "self", ".", "best_val_dice", "=", "mean_val_dice", "\n", "self", ".", "best_val_epoch", "=", "self", ".", "current_epoch", "\n", "", "print", "(", "\n", "f\"\\n Current epoch: {self.current_epoch} Current mean dice: {mean_val_dice:.4f}\"", "\n", "f\" tc: {metric_tc:.4f} wt: {metric_wt:.4f} et: {metric_et:.4f}\"", "\n", "f\"\\n Best mean dice: {self.best_val_dice}\"", "\n", "f\" at epoch: {self.best_val_epoch}\"", "\n", ")", "\n", "return", "{", "'val_MeanDiceScore'", ":", "mean_val_dice", "}", "\n", "", "def", "test_step", "(", "self", ",", "batch", ",", "batch_index", ")", ":", "\n"]], "home.repos.pwc.inspect_result.itruonghai_segtransvae.None.trainer.BRATS.test_step": [[140, 155], ["monai.inferers.sliding_window_inference", "trainer.BRATS.dice_loss", "trainer.BRATS.post_trans_images", "trainer.BRATS.loss.DiceScore", "trainer.BRATS.loss.DiceScore", "trainer.BRATS.loss.DiceScore"], "methods", ["home.repos.pwc.inspect_result.itruonghai_segtransvae.loss.loss.DiceScore", "home.repos.pwc.inspect_result.itruonghai_segtransvae.loss.loss.DiceScore", "home.repos.pwc.inspect_result.itruonghai_segtransvae.loss.loss.DiceScore"], ["", "def", "test_step", "(", "self", ",", "batch", ",", "batch_index", ")", ":", "\n", "        ", "inputs", ",", "labels", "=", "(", "batch", "[", "'image'", "]", ",", "batch", "[", "'label'", "]", ")", "\n", "\n", "roi_size", "=", "(", "128", ",", "128", ",", "128", ")", "\n", "sw_batch_size", "=", "1", "\n", "test_outputs", "=", "sliding_window_inference", "(", "\n", "inputs", ",", "roi_size", ",", "sw_batch_size", ",", "self", ".", "forward", ",", "overlap", "=", "0.5", ")", "\n", "loss", "=", "self", ".", "dice_loss", "(", "test_outputs", ",", "labels", ")", "\n", "test_outputs", "=", "self", ".", "post_trans_images", "(", "test_outputs", ")", "\n", "metric_tc", "=", "DiceScore", "(", "y_pred", "=", "test_outputs", "[", ":", ",", "0", ":", "1", "]", ",", "y", "=", "labels", "[", ":", ",", "0", ":", "1", "]", ",", "include_background", "=", "True", ")", "\n", "metric_wt", "=", "DiceScore", "(", "y_pred", "=", "test_outputs", "[", ":", ",", "1", ":", "2", "]", ",", "y", "=", "labels", "[", ":", ",", "1", ":", "2", "]", ",", "include_background", "=", "True", ")", "\n", "metric_et", "=", "DiceScore", "(", "y_pred", "=", "test_outputs", "[", ":", ",", "2", ":", "3", "]", ",", "y", "=", "labels", "[", ":", ",", "2", ":", "3", "]", ",", "include_background", "=", "True", ")", "\n", "mean_test_dice", "=", "(", "metric_tc", "+", "metric_wt", "+", "metric_et", ")", "/", "3", "\n", "return", "{", "'test_loss'", ":", "loss", ",", "'test_mean_dice'", ":", "mean_test_dice", ",", "'test_dice_tc'", ":", "metric_tc", ",", "\n", "'test_dice_wt'", ":", "metric_wt", ",", "'test_dice_et'", ":", "metric_et", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.itruonghai_segtransvae.None.trainer.BRATS.test_epoch_end": [[156, 174], ["torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "trainer.BRATS.log", "trainer.BRATS.log", "trainer.BRATS.log", "trainer.BRATS.log", "trainer.BRATS.log", "open", "csv.writer", "csv.writer.writerow", "csv.writer.writerow", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["None"], ["", "def", "test_epoch_end", "(", "self", ",", "outputs", ")", ":", "\n", "        ", "loss", "=", "torch", ".", "stack", "(", "[", "x", "[", "'test_loss'", "]", "for", "x", "in", "outputs", "]", ")", ".", "mean", "(", ")", "\n", "mean_test_dice", "=", "torch", ".", "stack", "(", "[", "x", "[", "'test_mean_dice'", "]", "for", "x", "in", "outputs", "]", ")", ".", "mean", "(", ")", "\n", "metric_tc", "=", "torch", ".", "stack", "(", "[", "x", "[", "'test_dice_tc'", "]", "for", "x", "in", "outputs", "]", ")", ".", "mean", "(", ")", "\n", "metric_wt", "=", "torch", ".", "stack", "(", "[", "x", "[", "'test_dice_wt'", "]", "for", "x", "in", "outputs", "]", ")", ".", "mean", "(", ")", "\n", "metric_et", "=", "torch", ".", "stack", "(", "[", "x", "[", "'test_dice_et'", "]", "for", "x", "in", "outputs", "]", ")", ".", "mean", "(", ")", "\n", "self", ".", "log", "(", "'test/Loss'", ",", "loss", ")", "\n", "self", ".", "log", "(", "'test/MeanDiceScore'", ",", "mean_test_dice", ")", "\n", "self", ".", "log", "(", "'test/DiceTC'", ",", "metric_tc", ")", "\n", "self", ".", "log", "(", "'test/DiceWT'", ",", "metric_wt", ")", "\n", "self", ".", "log", "(", "'test/DiceET'", ",", "metric_et", ")", "\n", "\n", "with", "open", "(", "'{}/test_log.csv'", ".", "format", "(", "self", ".", "logger", ".", "log_dir", ")", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "writer", "=", "csv", ".", "writer", "(", "f", ")", "\n", "writer", ".", "writerow", "(", "[", "\"Mean Test Dice\"", ",", "\"Dice TC\"", ",", "\"Dice WT\"", ",", "\"Dice ET\"", "]", ")", "\n", "writer", ".", "writerow", "(", "[", "mean_test_dice", ",", "metric_tc", ",", "metric_wt", ",", "metric_et", "]", ")", "\n", "\n", "", "return", "{", "'test_MeanDiceScore'", ":", "mean_test_dice", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.itruonghai_segtransvae.None.trainer.BRATS.configure_optimizers": [[176, 186], ["torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "trainer.BRATS.model.parameters"], "methods", ["None"], ["", "def", "configure_optimizers", "(", "self", ")", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "self", ".", "model", ".", "parameters", "(", ")", ",", "self", ".", "lr", ",", "weight_decay", "=", "1e-5", ",", "amsgrad", "=", "True", "\n", ")", "\n", "#         optimizer = AdaBelief(self.model.parameters(), ", "\n", "#                             lr=self.lr, eps=1e-16, ", "\n", "#                             betas=(0.9,0.999), weight_decouple = True, ", "\n", "#                             rectify = False)", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "optimizer", ",", "200", ")", "\n", "return", "[", "optimizer", "]", ",", "[", "scheduler", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.itruonghai_segtransvae.None.trainer.BRATS.train_dataloader": [[187, 189], ["data.brats.get_train_dataloader"], "methods", ["home.repos.pwc.inspect_result.itruonghai_segtransvae.data.brats.get_train_dataloader"], ["", "def", "train_dataloader", "(", "self", ")", ":", "\n", "        ", "return", "get_train_dataloader", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itruonghai_segtransvae.None.trainer.BRATS.val_dataloader": [[190, 192], ["data.brats.get_val_dataloader"], "methods", ["home.repos.pwc.inspect_result.itruonghai_segtransvae.data.brats.get_val_dataloader"], ["", "def", "val_dataloader", "(", "self", ")", ":", "\n", "        ", "return", "get_val_dataloader", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itruonghai_segtransvae.None.trainer.BRATS.test_dataloader": [[193, 195], ["data.brats.get_test_dataloader"], "methods", ["home.repos.pwc.inspect_result.itruonghai_segtransvae.data.brats.get_test_dataloader"], ["", "def", "test_dataloader", "(", "self", ")", ":", "\n", "        ", "return", "get_test_dataloader", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itruonghai_segtransvae.models.Decoder.Upsample.__init__": [[7, 12], ["torch.Module.__init__", "torch.Conv3d", "torch.Conv3d", "torch.ConvTranspose3d", "torch.ConvTranspose3d", "torch.Conv3d", "torch.Conv3d"], "methods", ["home.repos.pwc.inspect_result.itruonghai_segtransvae.loss.loss.Loss_VAE.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channel", ",", "out_channel", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv3d", "(", "in_channel", ",", "out_channel", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "deconv", "=", "nn", ".", "ConvTranspose3d", "(", "out_channel", ",", "out_channel", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv3d", "(", "out_channel", "*", "2", ",", "out_channel", ",", "kernel_size", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itruonghai_segtransvae.models.Decoder.Upsample.forward": [[13, 17], ["Decoder.Upsample.deconv", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "Decoder.Upsample.conv2", "Decoder.Upsample.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "prev", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "deconv", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "y", "=", "torch", ".", "cat", "(", "(", "prev", ",", "x", ")", ",", "dim", "=", "1", ")", "\n", "return", "self", ".", "conv2", "(", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itruonghai_segtransvae.models.Decoder.FinalConv.__init__": [[19, 32], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv3d", "torch.Conv3d", "torch.GroupNorm", "torch.GroupNorm", "torch.InstanceNorm3d", "torch.InstanceNorm3d"], "methods", ["home.repos.pwc.inspect_result.itruonghai_segtransvae.loss.loss.Loss_VAE.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", "=", "32", ",", "norm", "=", "\"instance\"", ")", ":", "\n", "        ", "super", "(", "FinalConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm", "==", "\"batch\"", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm3d", "(", "num_features", "=", "in_channels", ")", "\n", "", "elif", "norm", "==", "\"group\"", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "GroupNorm", "(", "num_groups", "=", "8", ",", "num_channels", "=", "in_channels", ")", "\n", "", "elif", "norm", "==", "'instance'", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "InstanceNorm3d", "(", "in_channels", ")", "\n", "\n", "", "self", ".", "layer", "=", "nn", ".", "Sequential", "(", "\n", "norm_layer", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv3d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.itruonghai_segtransvae.models.Decoder.FinalConv.forward": [[33, 35], ["Decoder.FinalConv.layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "layer", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itruonghai_segtransvae.models.Decoder.Decoder.__init__": [[37, 53], ["torch.Module.__init__", "Decoder.Upsample", "models.ResNetBlock.ResNetBlock", "Decoder.Upsample", "models.ResNetBlock.ResNetBlock", "Decoder.Upsample", "models.ResNetBlock.ResNetBlock", "Decoder.FinalConv"], "methods", ["home.repos.pwc.inspect_result.itruonghai_segtransvae.loss.loss.Loss_VAE.__init__"], ["    ", "def", "__init__", "(", "self", ",", "img_dim", ",", "patch_dim", ",", "embedding_dim", ",", "num_classes", "=", "3", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "img_dim", "=", "img_dim", "\n", "self", ".", "patch_dim", "=", "patch_dim", "\n", "self", ".", "embedding_dim", "=", "embedding_dim", "\n", "\n", "self", ".", "decoder_upsample_1", "=", "Upsample", "(", "128", ",", "64", ")", "\n", "self", ".", "decoder_block_1", "=", "ResNetBlock", "(", "64", ")", "\n", "\n", "self", ".", "decoder_upsample_2", "=", "Upsample", "(", "64", ",", "32", ")", "\n", "self", ".", "decoder_block_2", "=", "ResNetBlock", "(", "32", ")", "\n", "\n", "self", ".", "decoder_upsample_3", "=", "Upsample", "(", "32", ",", "16", ")", "\n", "self", ".", "decoder_block_3", "=", "ResNetBlock", "(", "16", ")", "\n", "\n", "self", ".", "endconv", "=", "FinalConv", "(", "16", ",", "num_classes", ")", "\n", "# self.normalize = nn.Sigmoid()", "\n"]], "home.repos.pwc.inspect_result.itruonghai_segtransvae.models.Decoder.Decoder.forward": [[55, 67], ["Decoder.Decoder.decoder_upsample_1", "Decoder.Decoder.decoder_block_1", "Decoder.Decoder.decoder_upsample_2", "Decoder.Decoder.decoder_block_2", "Decoder.Decoder.decoder_upsample_3", "Decoder.Decoder.decoder_block_3", "Decoder.Decoder.endconv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x1", ",", "x2", ",", "x3", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "decoder_upsample_1", "(", "x3", ",", "x", ")", "\n", "x", "=", "self", ".", "decoder_block_1", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "decoder_upsample_2", "(", "x2", ",", "x", ")", "\n", "x", "=", "self", ".", "decoder_block_2", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "decoder_upsample_3", "(", "x1", ",", "x", ")", "\n", "x", "=", "self", ".", "decoder_block_3", "(", "x", ")", "\n", "\n", "y", "=", "self", ".", "endconv", "(", "x", ")", "\n", "return", "y", "", "", "", ""]], "home.repos.pwc.inspect_result.itruonghai_segtransvae.models.Transformer.PreNorm.__init__": [[12, 16], ["torch.nn.Module.__init__", "torch.nn.LayerNorm"], "methods", ["home.repos.pwc.inspect_result.itruonghai_segtransvae.loss.loss.Loss_VAE.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "function", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm", "=", "nn", ".", "LayerNorm", "(", "dim", ")", "\n", "self", ".", "function", "=", "function", "\n", "\n"]], "home.repos.pwc.inspect_result.itruonghai_segtransvae.models.Transformer.PreNorm.forward": [[17, 19], ["Transformer.PreNorm.function", "Transformer.PreNorm.norm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "function", "(", "self", ".", "norm", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itruonghai_segtransvae.models.Transformer.FeedForward.__init__": [[22, 30], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.GELU", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.itruonghai_segtransvae.loss.loss.Loss_VAE.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "hidden_dim", ",", "dropout", "=", "0.0", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "net", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "dim", ",", "hidden_dim", ")", ",", "\n", "nn", ".", "GELU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "dropout", ")", ",", "\n", "nn", ".", "Linear", "(", "hidden_dim", ",", "dim", ")", ",", "\n", "nn", ".", "Dropout", "(", "dropout", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.itruonghai_segtransvae.models.Transformer.FeedForward.forward": [[32, 34], ["Transformer.FeedForward.net"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "net", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itruonghai_segtransvae.models.Transformer.Attention.__init__": [[36, 51], ["torch.nn.Module.__init__", "torch.nn.Softmax", "torch.nn.Linear", "torch.nn.Sequential", "torch.nn.Identity", "torch.nn.Linear", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.itruonghai_segtransvae.loss.loss.Loss_VAE.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "heads", ",", "dim_head", ",", "dropout", "=", "0.0", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "all_head_size", "=", "heads", "*", "dim_head", "\n", "project_out", "=", "not", "(", "heads", "==", "1", "and", "dim_head", "==", "dim", ")", "\n", "\n", "self", ".", "heads", "=", "heads", "\n", "self", ".", "scale", "=", "dim_head", "**", "-", "0.5", "\n", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "\n", "self", ".", "to_qkv", "=", "nn", ".", "Linear", "(", "dim", ",", "all_head_size", "*", "3", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "to_out", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "all_head_size", ",", "dim", ")", ",", "\n", "nn", ".", "Dropout", "(", "dropout", ")", "\n", ")", "if", "project_out", "else", "nn", ".", "Identity", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itruonghai_segtransvae.models.Transformer.Attention.forward": [[52, 64], ["Transformer.Attention.to_qkv().chunk", "map", "Transformer.Attention.softmax", "torch.matmul", "einops.rearrange", "Transformer.Attention.to_out", "torch.matmul", "Transformer.Attention.to_qkv", "einops.rearrange", "k.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "qkv", "=", "self", ".", "to_qkv", "(", "x", ")", ".", "chunk", "(", "3", ",", "dim", "=", "-", "1", ")", "\n", "#(batch, heads * dim_head) -> (batch, all_head_size)", "\n", "q", ",", "k", ",", "v", "=", "map", "(", "lambda", "t", ":", "rearrange", "(", "t", ",", "'b n (h d) -> b h n d'", ",", "h", "=", "self", ".", "heads", ")", ",", "qkv", ")", "\n", "\n", "dots", "=", "torch", ".", "matmul", "(", "q", ",", "k", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ")", "*", "self", ".", "scale", "\n", "\n", "atten", "=", "self", ".", "softmax", "(", "dots", ")", "\n", "\n", "out", "=", "torch", ".", "matmul", "(", "atten", ",", "v", ")", "\n", "out", "=", "rearrange", "(", "out", ",", "'b h n d -> b n (h d)'", ")", "\n", "return", "self", ".", "to_out", "(", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itruonghai_segtransvae.models.Transformer.Transformer.__init__": [[66, 73], ["torch.nn.Module.__init__", "torch.nn.ModuleList", "range", "Transformer.Transformer.layers.append", "torch.nn.ModuleList", "Transformer.PreNorm", "Transformer.PreNorm", "Transformer.Attention", "Transformer.FeedForward"], "methods", ["home.repos.pwc.inspect_result.itruonghai_segtransvae.loss.loss.Loss_VAE.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "depth", ",", "heads", ",", "dim_head", ",", "mlp_dim", ",", "dropout", "=", "0.0", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", "[", "]", ")", "\n", "for", "_", "in", "range", "(", "depth", ")", ":", "\n", "            ", "self", ".", "layers", ".", "append", "(", "nn", ".", "ModuleList", "(", "[", "\n", "PreNorm", "(", "dim", ",", "Attention", "(", "dim", ",", "heads", ",", "dim_head", ",", "dropout", ")", ")", ",", "\n", "PreNorm", "(", "dim", ",", "FeedForward", "(", "dim", ",", "mlp_dim", ",", "dropout", ")", ")", "\n", "]", ")", ")", "\n"]], "home.repos.pwc.inspect_result.itruonghai_segtransvae.models.Transformer.Transformer.forward": [[74, 79], ["attention", "feedforward"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "for", "attention", ",", "feedforward", "in", "self", ".", "layers", ":", "\n", "            ", "x", "=", "attention", "(", "x", ")", "+", "x", "\n", "x", "=", "feedforward", "(", "x", ")", "+", "x", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.itruonghai_segtransvae.models.Transformer.FixedPositionalEncoding.__init__": [[81, 94], ["torch.nn.Module.__init__", "torch.zeros", "torch.arange().unsqueeze", "torch.exp", "torch.sin", "torch.cos", "pe.unsqueeze().transpose.unsqueeze().transpose.unsqueeze().transpose", "Transformer.FixedPositionalEncoding.register_buffer", "torch.arange", "torch.arange().float", "pe.unsqueeze().transpose.unsqueeze().transpose.unsqueeze", "torch.arange", "torch.log", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.itruonghai_segtransvae.loss.loss.Loss_VAE.__init__"], ["    ", "def", "__init__", "(", "self", ",", "embedding_dim", ",", "max_length", "=", "768", ")", ":", "\n", "        ", "super", "(", "FixedPositionalEncoding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "pe", "=", "torch", ".", "zeros", "(", "max_length", ",", "embedding_dim", ")", "\n", "position", "=", "torch", ".", "arange", "(", "0", ",", "max_length", ",", "dtype", "=", "torch", ".", "float", ")", ".", "unsqueeze", "(", "1", ")", "\n", "div_term", "=", "torch", ".", "exp", "(", "\n", "torch", ".", "arange", "(", "0", ",", "embedding_dim", ",", "2", ")", ".", "float", "(", ")", "\n", "*", "(", "-", "torch", ".", "log", "(", "torch", ".", "tensor", "(", "10000.0", ")", ")", "/", "embedding_dim", ")", "\n", ")", "\n", "pe", "[", ":", ",", "0", ":", ":", "2", "]", "=", "torch", ".", "sin", "(", "position", "*", "div_term", ")", "\n", "pe", "[", ":", ",", "1", ":", ":", "2", "]", "=", "torch", ".", "cos", "(", "position", "*", "div_term", ")", "\n", "pe", "=", "pe", ".", "unsqueeze", "(", "0", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "self", ".", "register_buffer", "(", "'pe'", ",", "pe", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itruonghai_segtransvae.models.Transformer.FixedPositionalEncoding.forward": [[95, 98], ["x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", "+", "self", ".", "pe", "[", ":", "x", ".", "size", "(", "0", ")", ",", ":", "]", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.itruonghai_segtransvae.models.Transformer.LearnedPositionalEncoding.__init__": [[101, 105], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.itruonghai_segtransvae.loss.loss.Loss_VAE.__init__"], ["    ", "def", "__init__", "(", "self", ",", "embedding_dim", ",", "seq_length", ")", ":", "\n", "        ", "super", "(", "LearnedPositionalEncoding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "seq_length", "=", "seq_length", "\n", "self", ".", "position_embeddings", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "seq_length", ",", "embedding_dim", ")", ")", "#8x", "\n", "\n"]], "home.repos.pwc.inspect_result.itruonghai_segtransvae.models.Transformer.LearnedPositionalEncoding.forward": [[106, 110], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "position_ids", "=", "None", ")", ":", "\n", "        ", "position_embeddings", "=", "self", ".", "position_embeddings", "\n", "#         print(x.shape, self.position_embeddings.shape)", "\n", "return", "x", "+", "position_embeddings", "\n", "", "", ""]], "home.repos.pwc.inspect_result.itruonghai_segtransvae.models.Transformer.pair": [[7, 9], ["isinstance"], "function", ["None"], ["def", "pair", "(", "t", ")", ":", "\n", "    ", "return", "t", "if", "isinstance", "(", "t", ",", "tuple", ")", "else", "(", "t", ",", "t", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itruonghai_segtransvae.models.ResNetBlock.ResNetBlock.__init__": [[16, 25], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "ResNetBlock.normalization", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv3d", "torch.Conv3d", "ResNetBlock.normalization", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv3d", "torch.Conv3d"], "methods", ["home.repos.pwc.inspect_result.itruonghai_segtransvae.loss.loss.Loss_VAE.__init__", "home.repos.pwc.inspect_result.itruonghai_segtransvae.models.ResNetBlock.normalization", "home.repos.pwc.inspect_result.itruonghai_segtransvae.models.ResNetBlock.normalization"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "norm", "=", "'instance'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "resnetblock", "=", "nn", ".", "Sequential", "(", "\n", "normalization", "(", "in_channels", ",", "norm", "=", "norm", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv3d", "(", "in_channels", ",", "in_channels", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "normalization", "(", "in_channels", ",", "norm", "=", "norm", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv3d", "(", "in_channels", ",", "in_channels", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.itruonghai_segtransvae.models.ResNetBlock.ResNetBlock.forward": [[27, 30], ["ResNetBlock.ResNetBlock.resnetblock"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "self", ".", "resnetblock", "(", "x", ")", "\n", "return", "y", "+", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.itruonghai_segtransvae.models.ResNetBlock.normalization": [[5, 15], ["torch.BatchNorm3d", "torch.GroupNorm", "torch.InstanceNorm3d", "ValueError"], "function", ["None"], ["def", "normalization", "(", "planes", ",", "norm", "=", "'instance'", ")", ":", "\n", "    ", "if", "norm", "==", "'bn'", ":", "\n", "        ", "m", "=", "nn", ".", "BatchNorm3d", "(", "planes", ")", "\n", "", "elif", "norm", "==", "'gn'", ":", "\n", "        ", "m", "=", "nn", ".", "GroupNorm", "(", "8", ",", "planes", ")", "\n", "", "elif", "norm", "==", "'instance'", ":", "\n", "        ", "m", "=", "nn", ".", "InstanceNorm3d", "(", "planes", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Does not support this kind of norm.\"", ")", "\n", "", "return", "m", "\n", "", "class", "ResNetBlock", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.itruonghai_segtransvae.models.Encoder.InitConv.__init__": [[7, 12], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Dropout3d", "torch.Dropout3d", "torch.Dropout3d"], "methods", ["home.repos.pwc.inspect_result.itruonghai_segtransvae.loss.loss.Loss_VAE.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", "=", "4", ",", "out_channels", "=", "16", ",", "dropout", "=", "0.2", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "Dropout3d", "(", "dropout", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.itruonghai_segtransvae.models.Encoder.InitConv.forward": [[13, 16], ["Encoder.InitConv.layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "self", ".", "layer", "(", "x", ")", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.itruonghai_segtransvae.models.Encoder.DownSample.__init__": [[19, 22], ["torch.Module.__init__", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d"], "methods", ["home.repos.pwc.inspect_result.itruonghai_segtransvae.loss.loss.Loss_VAE.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv3d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.itruonghai_segtransvae.models.Encoder.DownSample.forward": [[22, 24], ["Encoder.DownSample.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "conv", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itruonghai_segtransvae.models.Encoder.Encoder.__init__": [[26, 45], ["torch.Module.__init__", "Encoder.InitConv", "models.ResNetBlock.ResNetBlock", "Encoder.DownSample", "models.ResNetBlock.ResNetBlock", "models.ResNetBlock.ResNetBlock", "Encoder.DownSample", "models.ResNetBlock.ResNetBlock", "models.ResNetBlock.ResNetBlock", "Encoder.DownSample", "models.ResNetBlock.ResNetBlock", "models.ResNetBlock.ResNetBlock", "models.ResNetBlock.ResNetBlock", "models.ResNetBlock.ResNetBlock"], "methods", ["home.repos.pwc.inspect_result.itruonghai_segtransvae.loss.loss.Loss_VAE.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "base_channels", ",", "dropout", "=", "0.2", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "init_conv", "=", "InitConv", "(", "in_channels", ",", "base_channels", ",", "dropout", "=", "dropout", ")", "\n", "self", ".", "encoder_block1", "=", "ResNetBlock", "(", "in_channels", "=", "base_channels", ")", "\n", "self", ".", "encoder_down1", "=", "DownSample", "(", "base_channels", ",", "base_channels", "*", "2", ")", "\n", "\n", "self", ".", "encoder_block2_1", "=", "ResNetBlock", "(", "base_channels", "*", "2", ")", "\n", "self", ".", "encoder_block2_2", "=", "ResNetBlock", "(", "base_channels", "*", "2", ")", "\n", "self", ".", "encoder_down2", "=", "DownSample", "(", "base_channels", "*", "2", ",", "base_channels", "*", "4", ")", "\n", "\n", "self", ".", "encoder_block3_1", "=", "ResNetBlock", "(", "base_channels", "*", "4", ")", "\n", "self", ".", "encoder_block3_2", "=", "ResNetBlock", "(", "base_channels", "*", "4", ")", "\n", "self", ".", "encoder_down3", "=", "DownSample", "(", "base_channels", "*", "4", ",", "base_channels", "*", "8", ")", "\n", "\n", "self", ".", "encoder_block4_1", "=", "ResNetBlock", "(", "base_channels", "*", "8", ")", "\n", "self", ".", "encoder_block4_2", "=", "ResNetBlock", "(", "base_channels", "*", "8", ")", "\n", "self", ".", "encoder_block4_3", "=", "ResNetBlock", "(", "base_channels", "*", "8", ")", "\n", "self", ".", "encoder_block4_4", "=", "ResNetBlock", "(", "base_channels", "*", "8", ")", "\n", "# self.encoder_down3 = EncoderDown(base_channels * 8, base_channels * 16)", "\n"]], "home.repos.pwc.inspect_result.itruonghai_segtransvae.models.Encoder.Encoder.forward": [[46, 63], ["Encoder.Encoder.init_conv", "Encoder.Encoder.encoder_block1", "Encoder.Encoder.encoder_down1", "Encoder.Encoder.encoder_block2_2", "Encoder.Encoder.encoder_down2", "Encoder.Encoder.encoder_block3_2", "Encoder.Encoder.encoder_down3", "Encoder.Encoder.encoder_block4_4", "Encoder.Encoder.encoder_block2_1", "Encoder.Encoder.encoder_block3_1", "Encoder.Encoder.encoder_block4_3", "Encoder.Encoder.encoder_block4_2", "Encoder.Encoder.encoder_block4_1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "init_conv", "(", "x", ")", "#(1, 16, 128, 128, 128)", "\n", "\n", "x1", "=", "self", ".", "encoder_block1", "(", "x", ")", "\n", "x1_down", "=", "self", ".", "encoder_down1", "(", "x1", ")", "#(1, 32, 64, 64, 64)", "\n", "\n", "x2", "=", "self", ".", "encoder_block2_2", "(", "self", ".", "encoder_block2_1", "(", "x1_down", ")", ")", "\n", "x2_down", "=", "self", ".", "encoder_down2", "(", "x2", ")", "#(1, 64, 32, 32, 32)", "\n", "\n", "x3", "=", "self", ".", "encoder_block3_2", "(", "self", ".", "encoder_block3_1", "(", "x2_down", ")", ")", "\n", "x3_down", "=", "self", ".", "encoder_down3", "(", "x3", ")", "#(1, 128, 16, 16, 16)", "\n", "\n", "output", "=", "self", ".", "encoder_block4_4", "(", "\n", "self", ".", "encoder_block4_3", "(", "\n", "self", ".", "encoder_block4_2", "(", "\n", "self", ".", "encoder_block4_1", "(", "x3_down", ")", ")", ")", ")", "#(1, 128, 16, 16, 16)", "\n", "return", "x1", ",", "x2", ",", "x3", ",", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.itruonghai_segtransvae.models.SegTransVAE.SegTransVAE.__init__": [[9, 63], ["torch.Module.__init__", "int", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "models.Transformer.Transformer", "torch.LayerNorm", "torch.LayerNorm", "models.Encoder.Encoder", "torch.InstanceNorm3d", "torch.InstanceNorm3d", "torch.LeakyReLU", "torch.LeakyReLU", "SegTransVAE.FeatureMapping", "SegTransVAE.FeatureMapping1", "models.Decoder.Decoder", "models.Transformer.LearnedPositionalEncoding", "torch.Conv3d", "torch.Conv3d", "models.VAE.VAE", "models.Transformer.FixedPositionalEncoding"], "methods", ["home.repos.pwc.inspect_result.itruonghai_segtransvae.loss.loss.Loss_VAE.__init__"], ["    ", "def", "__init__", "(", "self", ",", "img_dim", ",", "patch_dim", ",", "num_channels", ",", "num_classes", ",", "\n", "embedding_dim", ",", "num_heads", ",", "num_layers", ",", "hidden_dim", ",", "in_channels_vae", ",", "\n", "dropout", "=", "0.0", ",", "attention_dropout", "=", "0.0", ",", "\n", "conv_patch_representation", "=", "True", ",", "positional_encoding", "=", "'learned'", ",", "\n", "use_VAE", "=", "False", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "embedding_dim", "%", "num_heads", "==", "0", "\n", "assert", "img_dim", "[", "0", "]", "%", "patch_dim", "==", "0", "and", "img_dim", "[", "1", "]", "%", "patch_dim", "==", "0", "and", "img_dim", "[", "2", "]", "%", "patch_dim", "==", "0", "\n", "\n", "self", ".", "img_dim", "=", "img_dim", "\n", "self", ".", "embedding_dim", "=", "embedding_dim", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "patch_dim", "=", "patch_dim", "\n", "self", ".", "num_channels", "=", "num_channels", "\n", "self", ".", "in_channels_vae", "=", "in_channels_vae", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "attention_dropout", "=", "attention_dropout", "\n", "self", ".", "conv_patch_representation", "=", "conv_patch_representation", "\n", "self", ".", "use_VAE", "=", "use_VAE", "\n", "\n", "self", ".", "num_patches", "=", "int", "(", "(", "img_dim", "[", "0", "]", "//", "patch_dim", ")", "*", "(", "img_dim", "[", "1", "]", "//", "patch_dim", ")", "*", "(", "img_dim", "[", "2", "]", "//", "patch_dim", ")", ")", "\n", "self", ".", "seq_length", "=", "self", ".", "num_patches", "\n", "self", ".", "flatten_dim", "=", "128", "*", "num_channels", "\n", "\n", "self", ".", "linear_encoding", "=", "nn", ".", "Linear", "(", "self", ".", "flatten_dim", ",", "self", ".", "embedding_dim", ")", "\n", "if", "positional_encoding", "==", "\"learned\"", ":", "\n", "            ", "self", ".", "position_encoding", "=", "LearnedPositionalEncoding", "(", "\n", "self", ".", "embedding_dim", ",", "self", ".", "seq_length", "\n", ")", "\n", "", "elif", "positional_encoding", "==", "\"fixed\"", ":", "\n", "            ", "self", ".", "position_encoding", "=", "FixedPositionalEncoding", "(", "\n", "self", ".", "embedding_dim", ",", "\n", ")", "\n", "", "self", ".", "pe_dropout", "=", "nn", ".", "Dropout", "(", "self", ".", "dropout", ")", "\n", "\n", "self", ".", "transformer", "=", "Transformer", "(", "\n", "embedding_dim", ",", "num_layers", ",", "num_heads", ",", "embedding_dim", "//", "num_heads", ",", "hidden_dim", ",", "dropout", "\n", ")", "\n", "self", ".", "pre_head_ln", "=", "nn", ".", "LayerNorm", "(", "embedding_dim", ")", "\n", "\n", "if", "self", ".", "conv_patch_representation", ":", "\n", "            ", "self", ".", "conv_x", "=", "nn", ".", "Conv3d", "(", "128", ",", "self", ".", "embedding_dim", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "", "self", ".", "encoder", "=", "Encoder", "(", "self", ".", "num_channels", ",", "16", ")", "\n", "self", ".", "bn", "=", "nn", ".", "InstanceNorm3d", "(", "128", ")", "\n", "self", ".", "relu", "=", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "\n", "self", ".", "FeatureMapping", "=", "FeatureMapping", "(", "in_channel", "=", "self", ".", "embedding_dim", ",", "out_channel", "=", "self", ".", "in_channels_vae", ")", "\n", "self", ".", "FeatureMapping1", "=", "FeatureMapping1", "(", "in_channel", "=", "self", ".", "in_channels_vae", ")", "\n", "self", ".", "decoder", "=", "Decoder", "(", "self", ".", "img_dim", ",", "self", ".", "patch_dim", ",", "self", ".", "embedding_dim", ",", "num_classes", ")", "\n", "\n", "self", ".", "vae_input", "=", "(", "1", ",", "self", ".", "in_channels_vae", ",", "img_dim", "[", "0", "]", "//", "8", ",", "img_dim", "[", "1", "]", "//", "8", ",", "img_dim", "[", "2", "]", "//", "8", ")", "\n", "if", "use_VAE", ":", "\n", "            ", "self", ".", "vae", "=", "VAE", "(", "input_shape", "=", "self", ".", "vae_input", ",", "latent_dim", "=", "256", ",", "num_channels", "=", "self", ".", "num_channels", ")", "\n", "", "", "def", "encode", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.itruonghai_segtransvae.models.SegTransVAE.SegTransVAE.encode": [[63, 77], ["SegTransVAE.SegTransVAE.position_encoding", "SegTransVAE.SegTransVAE.pe_dropout", "SegTransVAE.SegTransVAE.transformer", "SegTransVAE.SegTransVAE.pre_head_ln", "SegTransVAE.SegTransVAE.encoder", "SegTransVAE.SegTransVAE.bn", "SegTransVAE.SegTransVAE.relu", "SegTransVAE.SegTransVAE.conv_x", "x.view.view.permute().contiguous", "x.view.view.view", "x.view.view.size", "x.view.view.permute"], "methods", ["None"], ["", "", "def", "encode", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "conv_patch_representation", ":", "\n", "            ", "x1", ",", "x2", ",", "x3", ",", "x", "=", "self", ".", "encoder", "(", "x", ")", "\n", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv_x", "(", "x", ")", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "4", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ",", "self", ".", "embedding_dim", ")", "\n", "", "x", "=", "self", ".", "position_encoding", "(", "x", ")", "\n", "x", "=", "self", ".", "pe_dropout", "(", "x", ")", "\n", "x", "=", "self", ".", "transformer", "(", "x", ")", "\n", "x", "=", "self", ".", "pre_head_ln", "(", "x", ")", "\n", "\n", "return", "x1", ",", "x2", ",", "x3", ",", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.itruonghai_segtransvae.models.SegTransVAE.SegTransVAE.decode": [[78, 84], ["SegTransVAE.SegTransVAE.decoder"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "x1", ",", "x2", ",", "x3", ",", "x", ")", ":", "\n", "#x: (1, 4096, 512) -> (1, 16, 16, 16, 512)", "\n", "#         print(\"In decode...\")", "\n", "#         print(\" x1: {} \\n x2: {} \\n x3: {} \\n x: {}\".format( x1.shape, x2.shape, x3.shape, x.shape))", "\n", "#         break", "\n", "        ", "return", "self", ".", "decoder", "(", "x1", ",", "x2", ",", "x3", ",", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itruonghai_segtransvae.models.SegTransVAE.SegTransVAE.forward": [[85, 102], ["SegTransVAE.SegTransVAE.encode", "SegTransVAE.SegTransVAE.view", "SegTransVAE.SegTransVAE.permute().contiguous", "SegTransVAE.SegTransVAE.FeatureMapping", "SegTransVAE.SegTransVAE.FeatureMapping1", "SegTransVAE.SegTransVAE.decode", "SegTransVAE.SegTransVAE.size", "SegTransVAE.SegTransVAE.vae", "SegTransVAE.SegTransVAE.permute"], "methods", ["home.repos.pwc.inspect_result.itruonghai_segtransvae.models.SegTransVAE.SegTransVAE.encode", "home.repos.pwc.inspect_result.itruonghai_segtransvae.models.SegTransVAE.SegTransVAE.decode"], ["", "def", "forward", "(", "self", ",", "x", ",", "is_validation", "=", "True", ")", ":", "\n", "        ", "x1", ",", "x2", ",", "x3", ",", "x", "=", "self", ".", "encode", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "\n", "self", ".", "img_dim", "[", "0", "]", "//", "self", ".", "patch_dim", ",", "\n", "self", ".", "img_dim", "[", "1", "]", "//", "self", ".", "patch_dim", ",", "\n", "self", ".", "img_dim", "[", "2", "]", "//", "self", ".", "patch_dim", ",", "\n", "self", ".", "embedding_dim", ")", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "4", ",", "1", ",", "2", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "x", "=", "self", ".", "FeatureMapping", "(", "x", ")", "\n", "x", "=", "self", ".", "FeatureMapping1", "(", "x", ")", "\n", "if", "self", ".", "use_VAE", "and", "not", "is_validation", ":", "\n", "            ", "vae_out", ",", "mu", ",", "sigma", "=", "self", ".", "vae", "(", "x", ")", "\n", "", "y", "=", "self", ".", "decode", "(", "x1", ",", "x2", ",", "x3", ",", "x", ")", "\n", "if", "self", ".", "use_VAE", "and", "not", "is_validation", ":", "\n", "            ", "return", "y", ",", "vae_out", ",", "mu", ",", "sigma", "\n", "", "else", ":", "\n", "            ", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.itruonghai_segtransvae.models.SegTransVAE.FeatureMapping.__init__": [[105, 123], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.Conv3d", "torch.Conv3d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv3d", "torch.Conv3d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.InstanceNorm3d", "torch.InstanceNorm3d", "torch.InstanceNorm3d", "torch.InstanceNorm3d"], "methods", ["home.repos.pwc.inspect_result.itruonghai_segtransvae.loss.loss.Loss_VAE.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channel", ",", "out_channel", ",", "norm", "=", "'instance'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "norm", "==", "'bn'", ":", "\n", "            ", "norm_layer_1", "=", "nn", ".", "BatchNorm3d", "(", "out_channel", ")", "\n", "norm_layer_2", "=", "nn", ".", "BatchNorm3d", "(", "out_channel", ")", "\n", "", "elif", "norm", "==", "'gn'", ":", "\n", "            ", "norm_layer_1", "=", "nn", ".", "GroupNorm", "(", "8", ",", "out_channel", ")", "\n", "norm_layer_2", "=", "nn", ".", "GroupNorm", "(", "8", ",", "out_channel", ")", "\n", "", "elif", "norm", "==", "'instance'", ":", "\n", "            ", "norm_layer_1", "=", "nn", ".", "InstanceNorm3d", "(", "out_channel", ")", "\n", "norm_layer_2", "=", "nn", ".", "InstanceNorm3d", "(", "out_channel", ")", "\n", "", "self", ".", "feature_mapping", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "in_channel", ",", "out_channel", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "norm_layer_1", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv3d", "(", "out_channel", ",", "out_channel", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "norm_layer_2", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.itruonghai_segtransvae.models.SegTransVAE.FeatureMapping.forward": [[125, 127], ["SegTransVAE.FeatureMapping.feature_mapping"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "feature_mapping", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itruonghai_segtransvae.models.SegTransVAE.FeatureMapping1.__init__": [[130, 148], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.Conv3d", "torch.Conv3d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv3d", "torch.Conv3d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.InstanceNorm3d", "torch.InstanceNorm3d", "torch.InstanceNorm3d", "torch.InstanceNorm3d"], "methods", ["home.repos.pwc.inspect_result.itruonghai_segtransvae.loss.loss.Loss_VAE.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channel", ",", "norm", "=", "'instance'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "norm", "==", "'bn'", ":", "\n", "            ", "norm_layer_1", "=", "nn", ".", "BatchNorm3d", "(", "in_channel", ")", "\n", "norm_layer_2", "=", "nn", ".", "BatchNorm3d", "(", "in_channel", ")", "\n", "", "elif", "norm", "==", "'gn'", ":", "\n", "            ", "norm_layer_1", "=", "nn", ".", "GroupNorm", "(", "8", ",", "in_channel", ")", "\n", "norm_layer_2", "=", "nn", ".", "GroupNorm", "(", "8", ",", "in_channel", ")", "\n", "", "elif", "norm", "==", "'instance'", ":", "\n", "            ", "norm_layer_1", "=", "nn", ".", "InstanceNorm3d", "(", "in_channel", ")", "\n", "norm_layer_2", "=", "nn", ".", "InstanceNorm3d", "(", "in_channel", ")", "\n", "", "self", ".", "feature_mapping1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "in_channel", ",", "in_channel", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "norm_layer_1", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv3d", "(", "in_channel", ",", "in_channel", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "norm_layer_2", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.itruonghai_segtransvae.models.SegTransVAE.FeatureMapping1.forward": [[149, 152], ["SegTransVAE.FeatureMapping1.feature_mapping1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "self", ".", "feature_mapping1", "(", "x", ")", "\n", "return", "x", "+", "y", "\n", "", "", ""]], "home.repos.pwc.inspect_result.itruonghai_segtransvae.models.VAE.VAE.__init__": [[15, 76], ["torch.Module.__init__", "torch.Conv3d", "torch.Conv3d", "VAE.calculate_total_dimension", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv3d", "torch.Conv3d", "torch.Upsample", "torch.Upsample", "torch.Conv3d", "torch.Conv3d", "torch.Upsample", "torch.Upsample", "models.ResNetBlock.ResNetBlock", "torch.Conv3d", "torch.Conv3d", "torch.Upsample", "torch.Upsample", "models.ResNetBlock.ResNetBlock", "torch.Conv3d", "torch.Conv3d", "torch.Upsample", "torch.Upsample", "models.ResNetBlock.ResNetBlock", "torch.InstanceNorm3d", "torch.InstanceNorm3d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv3d", "torch.Conv3d"], "methods", ["home.repos.pwc.inspect_result.itruonghai_segtransvae.loss.loss.Loss_VAE.__init__", "home.repos.pwc.inspect_result.itruonghai_segtransvae.models.VAE.calculate_total_dimension"], ["    ", "def", "__init__", "(", "self", ",", "input_shape", ",", "latent_dim", ",", "num_channels", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_shape", "=", "input_shape", "\n", "self", ".", "in_channels", "=", "input_shape", "[", "1", "]", "#input_shape[0] is batch size", "\n", "self", ".", "latent_dim", "=", "latent_dim", "\n", "self", ".", "encoder_channels", "=", "self", ".", "in_channels", "//", "16", "\n", "\n", "#Encoder", "\n", "self", ".", "VAE_reshape", "=", "nn", ".", "Conv3d", "(", "self", ".", "in_channels", ",", "self", ".", "encoder_channels", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "# self.VAE_reshape = nn.Sequential(", "\n", "#     nn.GroupNorm(8, self.in_channels), ", "\n", "#     nn.ReLU(),", "\n", "#     nn.Conv3d(self.in_channels, self.encoder_channels, ", "\n", "#              kernel_size = 3, stride = 2, padding=1),", "\n", "# )", "\n", "\n", "flatten_input_shape", "=", "calculate_total_dimension", "(", "input_shape", ")", "\n", "flatten_input_shape_after_vae_reshape", "=", "flatten_input_shape", "*", "self", ".", "encoder_channels", "//", "(", "8", "*", "self", ".", "in_channels", ")", "\n", "\n", "#Convert from total dimension to latent space", "\n", "self", ".", "to_latent_space", "=", "nn", ".", "Linear", "(", "\n", "flatten_input_shape_after_vae_reshape", "//", "self", ".", "in_channels", ",", "1", ")", "\n", "\n", "self", ".", "mean", "=", "nn", ".", "Linear", "(", "self", ".", "in_channels", ",", "self", ".", "latent_dim", ")", "\n", "self", ".", "logvar", "=", "nn", ".", "Linear", "(", "self", ".", "in_channels", ",", "self", ".", "latent_dim", ")", "\n", "#         self.epsilon = nn.Parameter(torch.randn(1, latent_dim))", "\n", "\n", "#Decoder", "\n", "self", ".", "to_original_dimension", "=", "nn", ".", "Linear", "(", "self", ".", "latent_dim", ",", "flatten_input_shape_after_vae_reshape", ")", "\n", "self", ".", "Reconstruct", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv3d", "(", "\n", "self", ".", "encoder_channels", ",", "self", ".", "in_channels", ",", "\n", "stride", "=", "1", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", ",", "\n", "\n", "nn", ".", "Conv3d", "(", "\n", "self", ".", "in_channels", ",", "self", ".", "in_channels", "//", "2", ",", "\n", "stride", "=", "1", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", ",", "\n", "ResNetBlock", "(", "self", ".", "in_channels", "//", "2", ")", ",", "\n", "\n", "nn", ".", "Conv3d", "(", "\n", "self", ".", "in_channels", "//", "2", ",", "self", ".", "in_channels", "//", "4", ",", "\n", "stride", "=", "1", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", ",", "\n", "ResNetBlock", "(", "self", ".", "in_channels", "//", "4", ")", ",", "\n", "\n", "nn", ".", "Conv3d", "(", "\n", "self", ".", "in_channels", "//", "4", ",", "self", ".", "in_channels", "//", "8", ",", "\n", "stride", "=", "1", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", ",", "\n", "ResNetBlock", "(", "self", ".", "in_channels", "//", "8", ")", ",", "\n", "\n", "nn", ".", "InstanceNorm3d", "(", "self", ".", "in_channels", "//", "8", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv3d", "(", "\n", "self", ".", "in_channels", "//", "8", ",", "num_channels", ",", "\n", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "#             nn.Sigmoid()", "\n"]], "home.repos.pwc.inspect_result.itruonghai_segtransvae.models.VAE.VAE.forward": [[80, 100], ["VAE.VAE.VAE_reshape", "x.view.view.view", "VAE.VAE.to_latent_space", "x.view.view.view", "VAE.VAE.mean", "VAE.VAE.logvar", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "VAE.VAE.to_original_dimension", "y.view.view.view", "VAE.VAE.Reconstruct", "torch.exp", "torch.exp", "torch.exp", "torch.exp"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "#x has shape = input_shape", "\n", "#Encoder", "\n", "# print(x.shape)", "\n", "        ", "x", "=", "self", ".", "VAE_reshape", "(", "x", ")", "\n", "shape", "=", "x", ".", "shape", "\n", "\n", "x", "=", "x", ".", "view", "(", "self", ".", "in_channels", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "to_latent_space", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "1", ",", "self", ".", "in_channels", ")", "\n", "\n", "mean", "=", "self", ".", "mean", "(", "x", ")", "\n", "logvar", "=", "self", ".", "logvar", "(", "x", ")", "\n", "#         sigma = torch.exp(0.5 * logvar)", "\n", "epsilon", "=", "torch", ".", "randn_like", "(", "logvar", ")", "\n", "sample", "=", "mean", "+", "epsilon", "*", "torch", ".", "exp", "(", "logvar", ")", "\n", "\n", "#Decoder", "\n", "y", "=", "self", ".", "to_original_dimension", "(", "sample", ")", "\n", "y", "=", "y", ".", "view", "(", "*", "shape", ")", "\n", "return", "self", ".", "Reconstruct", "(", "y", ")", ",", "mean", ",", "logvar", "\n", "", "def", "total_params", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.itruonghai_segtransvae.models.VAE.VAE.total_params": [[100, 103], ["sum", "format", "p.numel", "VAE.VAE.parameters"], "methods", ["None"], ["", "def", "total_params", "(", "self", ")", ":", "\n", "        ", "total", "=", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "self", ".", "parameters", "(", ")", ")", "\n", "return", "format", "(", "total", ",", "','", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itruonghai_segtransvae.models.VAE.VAE.total_trainable_params": [[104, 107], ["sum", "format", "p.numel", "VAE.VAE.parameters"], "methods", ["None"], ["", "def", "total_trainable_params", "(", "self", ")", ":", "\n", "        ", "total_trainable", "=", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "self", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", ")", "\n", "return", "format", "(", "total_trainable", ",", "','", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itruonghai_segtransvae.models.VAE.calculate_total_dimension": [[8, 13], ["None"], "function", ["None"], ["def", "calculate_total_dimension", "(", "a", ")", ":", "\n", "    ", "res", "=", "1", "\n", "for", "x", "in", "a", ":", "\n", "        ", "res", "*=", "x", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.itruonghai_segtransvae.data.brats.ConvertToMultiChannelBasedOnBratsClassesd.__call__": [[35, 51], ["dict", "result.append", "result.append", "result.append", "numpy.stack().astype", "numpy.logical_or", "numpy.logical_or", "numpy.logical_or", "numpy.stack"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "d", "=", "dict", "(", "data", ")", "\n", "for", "key", "in", "self", ".", "keys", ":", "\n", "            ", "result", "=", "[", "]", "\n", "# merge label 1 and label 4 to construct TC", "\n", "result", ".", "append", "(", "np", ".", "logical_or", "(", "d", "[", "key", "]", "==", "1", ",", "d", "[", "key", "]", "==", "4", ")", ")", "\n", "# merge labels 1, 2 and 4 to construct WT", "\n", "result", ".", "append", "(", "\n", "np", ".", "logical_or", "(", "\n", "np", ".", "logical_or", "(", "d", "[", "key", "]", "==", "1", ",", "d", "[", "key", "]", "==", "4", ")", ",", "d", "[", "key", "]", "==", "2", "\n", ")", "\n", ")", "\n", "# label 4 is ET", "\n", "result", ".", "append", "(", "d", "[", "key", "]", "==", "4", ")", "\n", "d", "[", "key", "]", "=", "np", ".", "stack", "(", "result", ",", "axis", "=", "0", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "", "return", "d", "\n", "", "", "def", "get_train_dataloader", "(", ")", ":", "\n"]], "home.repos.pwc.inspect_result.itruonghai_segtransvae.data.brats.get_train_dataloader": [[51, 86], ["monai.transforms.Compose", "monai.data.Dataset", "monai.data.DataLoader", "monai.transforms.LoadImaged", "brats.ConvertToMultiChannelBasedOnBratsClassesd", "monai.transforms.CenterSpatialCropd", "monai.transforms.RandFlipd", "monai.transforms.RandFlipd", "monai.transforms.RandFlipd", "monai.transforms.NormalizeIntensityd", "monai.transforms.RandScaleIntensityd", "monai.transforms.RandShiftIntensityd", "monai.transforms.ToTensord"], "function", ["None"], ["", "", "def", "get_train_dataloader", "(", ")", ":", "\n", "\n", "    ", "train_transform", "=", "Compose", "(", "\n", "[", "\n", "LoadImaged", "(", "keys", "=", "[", "\"image\"", ",", "\"label\"", "]", ")", ",", "\n", "ConvertToMultiChannelBasedOnBratsClassesd", "(", "keys", "=", "[", "'label'", "]", ")", ",", "\n", "# RandSpatialCropd(keys=[\"image\", \"label\"],", "\n", "#                 roi_size = [128,128,128], ", "\n", "#                 #  roi_size = [96,96,96],", "\n", "#                 random_size = False),", "\n", "CenterSpatialCropd", "(", "keys", "=", "[", "\"image\"", ",", "\"label\"", "]", ",", "\n", "roi_size", "=", "[", "128", ",", "128", ",", "128", "]", ",", "\n", ")", ",", "\n", "RandFlipd", "(", "keys", "=", "[", "\"image\"", ",", "\"label\"", "]", ",", "\n", "prob", "=", "0.5", ",", "\n", "spatial_axis", "=", "0", ")", ",", "\n", "RandFlipd", "(", "keys", "=", "[", "\"image\"", ",", "\"label\"", "]", ",", "\n", "prob", "=", "0.5", ",", "\n", "spatial_axis", "=", "1", ")", ",", "\n", "RandFlipd", "(", "keys", "=", "[", "\"image\"", ",", "\"label\"", "]", ",", "\n", "prob", "=", "0.5", ",", "\n", "spatial_axis", "=", "2", ")", ",", "\n", "NormalizeIntensityd", "(", "keys", "=", "\"image\"", ",", "\n", "nonzero", "=", "True", ",", "\n", "channel_wise", "=", "True", ")", ",", "\n", "RandScaleIntensityd", "(", "keys", "=", "\"image\"", ",", "prob", "=", "1", ",", "factors", "=", "0.1", ")", ",", "\n", "RandShiftIntensityd", "(", "keys", "=", "\"image\"", ",", "prob", "=", "1", ",", "offsets", "=", "0.1", ")", ",", "\n", "ToTensord", "(", "keys", "=", "[", "\"image\"", ",", "\"label\"", "]", ")", ",", "\n", "]", "\n", ")", "\n", "train_ds", "=", "Dataset", "(", "data", "=", "train_files", ",", "transform", "=", "train_transform", ")", "\n", "train_loader", "=", "DataLoader", "(", "train_ds", ",", "batch_size", "=", "1", ",", "shuffle", "=", "True", ",", "num_workers", "=", "4", ")", "\n", "\n", "\n", "return", "train_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.itruonghai_segtransvae.data.brats.get_val_dataloader": [[87, 106], ["monai.transforms.Compose", "monai.data.Dataset", "monai.data.DataLoader", "monai.transforms.LoadImaged", "brats.ConvertToMultiChannelBasedOnBratsClassesd", "monai.transforms.CenterSpatialCropd", "monai.transforms.NormalizeIntensityd", "monai.transforms.ToTensord"], "function", ["None"], ["", "def", "get_val_dataloader", "(", ")", ":", "\n", "    ", "val_transform", "=", "Compose", "(", "\n", "[", "\n", "LoadImaged", "(", "keys", "=", "[", "\"image\"", ",", "\"label\"", "]", ")", ",", "\n", "ConvertToMultiChannelBasedOnBratsClassesd", "(", "\n", "keys", "=", "[", "'label'", "]", ")", ",", "\n", "CenterSpatialCropd", "(", "keys", "=", "[", "\"image\"", ",", "\"label\"", "]", ",", "\n", "roi_size", "=", "[", "128", ",", "128", ",", "128", "]", ",", "\n", ")", ",", "\n", "NormalizeIntensityd", "(", "keys", "=", "\"image\"", ",", "\n", "nonzero", "=", "True", ",", "\n", "channel_wise", "=", "True", ")", ",", "\n", "ToTensord", "(", "keys", "=", "[", "\"image\"", ",", "\"label\"", "]", ")", ",", "\n", "]", "\n", ")", "\n", "val_ds", "=", "Dataset", "(", "data", "=", "val_files", ",", "transform", "=", "val_transform", ")", "\n", "val_loader", "=", "DataLoader", "(", "val_ds", ",", "batch_size", "=", "1", ",", "shuffle", "=", "False", ",", "num_workers", "=", "4", ")", "\n", "\n", "return", "val_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.itruonghai_segtransvae.data.brats.get_test_dataloader": [[107, 126], ["monai.transforms.Compose", "monai.data.Dataset", "monai.data.DataLoader", "monai.transforms.LoadImaged", "brats.ConvertToMultiChannelBasedOnBratsClassesd", "monai.transforms.CenterSpatialCropd", "monai.transforms.NormalizeIntensityd", "monai.transforms.ToTensord"], "function", ["None"], ["", "def", "get_test_dataloader", "(", ")", ":", "\n", "    ", "test_transform", "=", "Compose", "(", "\n", "[", "\n", "LoadImaged", "(", "keys", "=", "[", "\"image\"", ",", "\"label\"", "]", ")", ",", "\n", "ConvertToMultiChannelBasedOnBratsClassesd", "(", "\n", "keys", "=", "[", "'label'", "]", ")", ",", "\n", "CenterSpatialCropd", "(", "keys", "=", "[", "\"image\"", ",", "\"label\"", "]", ",", "\n", "roi_size", "=", "[", "128", ",", "128", ",", "128", "]", ",", "\n", ")", ",", "\n", "NormalizeIntensityd", "(", "keys", "=", "\"image\"", ",", "\n", "nonzero", "=", "True", ",", "\n", "channel_wise", "=", "True", ")", ",", "\n", "ToTensord", "(", "keys", "=", "[", "\"image\"", ",", "\"label\"", "]", ")", ",", "\n", "]", "\n", ")", "\n", "test_ds", "=", "Dataset", "(", "data", "=", "test_files", ",", "transform", "=", "test_transform", ")", "\n", "test_loader", "=", "DataLoader", "(", "test_ds", ",", "batch_size", "=", "1", ",", "shuffle", "=", "False", ",", "num_workers", "=", "4", ")", "\n", "\n", "return", "test_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.itruonghai_segtransvae.loss.loss.Loss_VAE.__init__": [[6, 9], ["torch.Module.__init__", "torch.MSELoss", "torch.MSELoss"], "methods", ["home.repos.pwc.inspect_result.itruonghai_segtransvae.loss.loss.Loss_VAE.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mse", "=", "nn", ".", "MSELoss", "(", "reduction", "=", "'sum'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itruonghai_segtransvae.loss.loss.Loss_VAE.forward": [[10, 15], ["loss.Loss_VAE.mse", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "log_var.exp", "mu.pow"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "recon_x", ",", "x", ",", "mu", ",", "log_var", ")", ":", "\n", "        ", "mse", "=", "self", ".", "mse", "(", "recon_x", ",", "x", ")", "\n", "kld", "=", "-", "0.5", "*", "torch", ".", "sum", "(", "1", "+", "log_var", "-", "mu", ".", "pow", "(", "2", ")", "-", "log_var", ".", "exp", "(", ")", ")", "\n", "loss", "=", "mse", "+", "kld", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.itruonghai_segtransvae.loss.loss.DiceScore": [[16, 55], ["y.float.float", "y_pred.float.float", "len", "list", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.where", "torch.where", "ValueError", "range", "torch.tensor", "torch.tensor", "float"], "function", ["None"], ["", "", "def", "DiceScore", "(", "\n", "y_pred", ":", "torch", ".", "Tensor", ",", "\n", "y", ":", "torch", ".", "Tensor", ",", "\n", "include_background", ":", "bool", "=", "True", ",", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"Computes Dice score metric from full size Tensor and collects average.\n    Args:\n        y_pred: input data to compute, typical segmentation model output.\n            It must be one-hot format and first dim is batch, example shape: [16, 3, 32, 32]. The values\n            should be binarized.\n        y: ground truth to compute mean dice metric. It must be one-hot format and first dim is batch.\n            The values should be binarized.\n        include_background: whether to skip Dice computation on the first channel of\n            the predicted output. Defaults to True.\n    Returns:\n        Dice scores per batch and per class, (shape [batch_size, num_classes]).\n    Raises:\n        ValueError: when `y_pred` and `y` have different shapes.\n    \"\"\"", "\n", "\n", "y", "=", "y", ".", "float", "(", ")", "\n", "y_pred", "=", "y_pred", ".", "float", "(", ")", "\n", "\n", "if", "y", ".", "shape", "!=", "y_pred", ".", "shape", ":", "\n", "        ", "raise", "ValueError", "(", "\"y_pred and y should have same shapes.\"", ")", "\n", "\n", "# reducing only spatial dimensions (not batch nor channels)", "\n", "", "n_len", "=", "len", "(", "y_pred", ".", "shape", ")", "\n", "reduce_axis", "=", "list", "(", "range", "(", "2", ",", "n_len", ")", ")", "\n", "intersection", "=", "torch", ".", "sum", "(", "y", "*", "y_pred", ",", "dim", "=", "reduce_axis", ")", "\n", "\n", "y_o", "=", "torch", ".", "sum", "(", "y", ",", "reduce_axis", ")", "\n", "y_pred_o", "=", "torch", ".", "sum", "(", "y_pred", ",", "dim", "=", "reduce_axis", ")", "\n", "denominator", "=", "y_o", "+", "y_pred_o", "\n", "\n", "return", "torch", ".", "where", "(", "\n", "denominator", ">", "0", ",", "\n", "(", "2.0", "*", "intersection", ")", "/", "denominator", ",", "\n", "torch", ".", "tensor", "(", "float", "(", "\"1\"", ")", ",", "device", "=", "y_o", ".", "device", ")", ",", "\n", ")", "\n"]]}