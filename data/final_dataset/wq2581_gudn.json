{"home.repos.pwc.inspect_result.wq2581_gudn.None.main.init": [[10, 16], ["transformers.logging.set_verbosity_error", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed_all", "torch.device"], "function", ["None"], ["def", "init", "(", "config", ")", ":", "\n", "    ", "logging", ".", "set_verbosity_error", "(", ")", "\n", "torch", ".", "manual_seed", "(", "config", "[", "'seed'", "]", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "config", "[", "'seed'", "]", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "config", "[", "'seed'", "]", ")", "\n", "config", "[", "'device'", "]", "=", "torch", ".", "device", "(", "f\"cuda:{config['gpu_id']}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wq2581_gudn.None.main.build_train_model": [[18, 54], ["print", "dataset.get_label_num", "print", "transformers.BertModel.from_pretrained().to", "transformers.BertTokenizer.from_pretrained", "print", "model.ClassifyNet().to", "print", "dataset.get_train_data_loader", "print", "dataset.get_test_data_loader", "print", "torch.nn.BCEWithLogitsLoss", "print", "torch.nn.MSELoss", "print", "transformers.AdamW", "print", "transformers.get_scheduler", "ClassifyNet().to.load_state_dict", "transformers.BertModel.from_pretrained", "model.ClassifyNet", "torch.load", "BertModel.from_pretrained().to.parameters", "ClassifyNet().to.parameters", "len"], "function", ["home.repos.pwc.inspect_result.wq2581_gudn.None.dataset.get_label_num", "home.repos.pwc.inspect_result.wq2581_gudn.None.dataset.get_train_data_loader", "home.repos.pwc.inspect_result.wq2581_gudn.None.dataset.get_test_data_loader"], ["", "def", "build_train_model", "(", "config", ")", ":", "\n", "    ", "print", "(", "\"get label number\"", ")", "\n", "label_number", "=", "get_label_num", "(", "config", "[", "'dataset'", "]", ")", "\n", "\n", "print", "(", "\"build bert model\"", ")", "\n", "bert", "=", "BertModel", ".", "from_pretrained", "(", "f\"./checkpoint/{config['dataset']}/{config['checkpoint_epoch']}\"", "if", "config", "[", "'use_checkpoint'", "]", "else", "config", "[", "'bert_version'", "]", ")", ".", "to", "(", "config", "[", "'device'", "]", ")", "\n", "tokenizer", "=", "BertTokenizer", ".", "from_pretrained", "(", "f\"./checkpoint/{config['dataset']}/{config['checkpoint_epoch']}\"", "if", "config", "[", "'use_checkpoint'", "]", "else", "config", "[", "'bert_version'", "]", ")", "\n", "\n", "print", "(", "\"build ClassifyNet model\"", ")", "\n", "classify_net", "=", "ClassifyNet", "(", "label_number", "=", "label_number", ",", "feature_layers", "=", "10", ",", "bert_hidden_size", "=", "bert", ".", "config", ".", "hidden_size", ")", ".", "to", "(", "config", "[", "'device'", "]", ")", "\n", "if", "config", "[", "'use_checkpoint'", "]", ":", "\n", "        ", "classify_net", ".", "load_state_dict", "(", "torch", ".", "load", "(", "f\"./checkpoint/{config['dataset']}/{config['checkpoint_epoch']}/student_model_file.bin\"", ")", ")", "\n", "\n", "", "print", "(", "\"build train data loader\"", ")", "\n", "train_data_loader", "=", "get_train_data_loader", "(", "config", "[", "'dataset'", "]", ",", "tokenizer", "=", "tokenizer", ",", "batch_size", "=", "config", "[", "'train_batch_size'", "]", ")", "\n", "\n", "print", "(", "\"build test data loader\"", ")", "\n", "test_data_loader", "=", "get_test_data_loader", "(", "config", "[", "'dataset'", "]", ",", "tokenizer", "=", "tokenizer", ",", "batch_size", "=", "config", "[", "'train_batch_size'", "]", ")", "\n", "\n", "print", "(", "\"build BCE loss\"", ")", "\n", "classify_loss_function", "=", "torch", ".", "nn", ".", "BCEWithLogitsLoss", "(", ")", "\n", "\n", "print", "(", "\"build MSE loss\"", ")", "\n", "mse_loss_function", "=", "torch", ".", "nn", ".", "MSELoss", "(", ")", "\n", "\n", "print", "(", "\"build optimizer\"", ")", "\n", "bert_train_parameters", "=", "[", "parameter", "for", "parameter", "in", "bert", ".", "parameters", "(", ")", "if", "parameter", ".", "requires_grad", "]", "\n", "classify_net_train_parameters", "=", "[", "parameter", "for", "parameter", "in", "classify_net", ".", "parameters", "(", ")", "if", "parameter", ".", "requires_grad", "]", "\n", "parameters", "=", "bert_train_parameters", "+", "classify_net_train_parameters", "\n", "optimizer", "=", "AdamW", "(", "parameters", ",", "lr", "=", "config", "[", "'lr'", "]", ")", "\n", "\n", "print", "(", "\"build lr_scheduler\"", ")", "\n", "lr_scheduler", "=", "get_scheduler", "(", "\"linear\"", ",", "optimizer", "=", "optimizer", ",", "num_warmup_steps", "=", "0", ",", "\n", "num_training_steps", "=", "config", "[", "'epochs'", "]", "*", "len", "(", "train_data_loader", ")", ")", "\n", "\n", "return", "train_data_loader", ",", "test_data_loader", ",", "bert", ",", "classify_net", ",", "tokenizer", ",", "classify_loss_function", ",", "mse_loss_function", ",", "optimizer", ",", "lr_scheduler", "\n", "\n"]], "home.repos.pwc.inspect_result.wq2581_gudn.None.main.run_train_batch": [[57, 95], ["batch_text_input_ids.to.to", "batch_text_padding_mask.to.to", "batch_text_token_type_ids.to.to", "batch_label_input_ids.to.to", "batch_label_padding_mask.to.to", "batch_label_token_type_ids.to.to", "batch_label_one_hot.to.to", "bert", "classify_net", "classify_loss_function", "bert", "mse_loss_function", "classify_net", "classify_loss_function", "optimizer.zero_grad", "loss.backward", "optimizer.step", "lr_scheduler.step"], "function", ["None"], ["", "def", "run_train_batch", "(", "config", ",", "data", ",", "bert", ",", "classify_net", ",", "classify_loss_function", ",", "mse_loss_function", ",", "optimizer", ",", "lr_scheduler", ")", ":", "\n", "    ", "batch_text_input_ids", ",", "batch_text_padding_mask", ",", "batch_text_token_type_ids", ",", "batch_label_input_ids", ",", "batch_label_padding_mask", ",", "batch_label_token_type_ids", ",", "batch_label_one_hot", "=", "data", "\n", "\n", "batch_text_input_ids", "=", "batch_text_input_ids", ".", "to", "(", "config", "[", "'device'", "]", ")", "\n", "batch_text_padding_mask", "=", "batch_text_padding_mask", ".", "to", "(", "config", "[", "'device'", "]", ")", "\n", "batch_text_token_type_ids", "=", "batch_text_token_type_ids", ".", "to", "(", "config", "[", "'device'", "]", ")", "\n", "batch_label_input_ids", "=", "batch_label_input_ids", ".", "to", "(", "config", "[", "'device'", "]", ")", "\n", "batch_label_padding_mask", "=", "batch_label_padding_mask", ".", "to", "(", "config", "[", "'device'", "]", ")", "\n", "batch_label_token_type_ids", "=", "batch_label_token_type_ids", ".", "to", "(", "config", "[", "'device'", "]", ")", "\n", "batch_label_one_hot", "=", "batch_label_one_hot", ".", "to", "(", "config", "[", "'device'", "]", ")", "\n", "\n", "\n", "text_bert_out", "=", "bert", "(", "input_ids", "=", "batch_text_input_ids", ",", "attention_mask", "=", "batch_text_padding_mask", ",", "\n", "token_type_ids", "=", "batch_text_token_type_ids", ",", "output_hidden_states", "=", "True", ")", "\n", "\n", "out", "=", "classify_net", "(", "text_bert_out", ")", "\n", "text_classify_loss", "=", "classify_loss_function", "(", "out", ",", "batch_label_one_hot", ")", "\n", "\n", "\n", "label_bert_out", "=", "bert", "(", "input_ids", "=", "batch_label_input_ids", ",", "attention_mask", "=", "batch_label_padding_mask", ",", "\n", "token_type_ids", "=", "batch_label_token_type_ids", ",", "output_hidden_states", "=", "True", ")", "\n", "\n", "\n", "mse_loss", "=", "mse_loss_function", "(", "text_bert_out", "[", "'pooler_output'", "]", ",", "label_bert_out", "[", "'pooler_output'", "]", ")", "\n", "\n", "out", "=", "classify_net", "(", "label_bert_out", ")", "\n", "label_classify_loss", "=", "classify_loss_function", "(", "out", ",", "batch_label_one_hot", ")", "\n", "\n", "loss", "=", "text_classify_loss", "+", "mse_loss", "+", "label_classify_loss", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "lr_scheduler", ".", "step", "(", ")", "\n", "\n", "return", "text_classify_loss", ",", "mse_loss", ",", "label_classify_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.wq2581_gudn.None.main.run_test_batch": [[98, 118], ["batch_text_input_ids.to.to", "batch_text_padding_mask.to.to", "batch_text_token_type_ids.to.to", "batch_label_one_hot.to.to", "bert", "classify_net", "loss_function", "accuracy.calc"], "function", ["home.repos.pwc.inspect_result.wq2581_gudn.None.util.Accuracy.calc"], ["", "def", "run_test_batch", "(", "config", ",", "data", ",", "bert", ",", "classify_net", ",", "loss_function", ",", "accuracy", ")", ":", "\n", "    ", "batch_text_input_ids", ",", "batch_text_padding_mask", ",", "batch_text_token_type_ids", ",", "batch_label_input_ids", ",", "batch_label_padding_mask", ",", "batch_label_token_type_ids", ",", "batch_label_one_hot", "=", "data", "\n", "\n", "batch_text_input_ids", "=", "batch_text_input_ids", ".", "to", "(", "config", "[", "'device'", "]", ")", "\n", "batch_text_padding_mask", "=", "batch_text_padding_mask", ".", "to", "(", "config", "[", "'device'", "]", ")", "\n", "batch_text_token_type_ids", "=", "batch_text_token_type_ids", ".", "to", "(", "config", "[", "'device'", "]", ")", "\n", "batch_label_one_hot", "=", "batch_label_one_hot", ".", "to", "(", "config", "[", "'device'", "]", ")", "\n", "\n", "bert_out", "=", "bert", "(", "input_ids", "=", "batch_text_input_ids", ",", "attention_mask", "=", "batch_text_padding_mask", ",", "\n", "token_type_ids", "=", "batch_text_token_type_ids", ",", "output_hidden_states", "=", "True", ")", "\n", "\n", "out", "=", "classify_net", "(", "bert_out", ")", "\n", "\n", "loss", "=", "loss_function", "(", "out", ",", "batch_label_one_hot", ")", "\n", "\n", "accuracy", ".", "calc", "(", "out", ",", "batch_label_one_hot", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.wq2581_gudn.None.main_multi_gpu.init": [[13, 19], ["transformers.logging.set_verbosity_error", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device"], "function", ["None"], ["def", "init", "(", "config", ")", ":", "\n", "    ", "logging", ".", "set_verbosity_error", "(", ")", "\n", "torch", ".", "manual_seed", "(", "config", "[", "'seed'", "]", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "config", "[", "'seed'", "]", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "config", "[", "'seed'", "]", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "device", "=", "config", "[", "'device'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wq2581_gudn.None.main_multi_gpu.build_train_model": [[21, 64], ["print", "dataset.get_label_num", "print", "transformers.BertModel.from_pretrained", "transformers.BertTokenizer.from_pretrained", "print", "model.BertWrapper().to", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "print", "model.ClassifyNet().to", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "print", "dataset.get_train_sampler_data_loader", "print", "dataset.get_test_data_loader", "print", "torch.nn.BCEWithLogitsLoss", "torch.nn.BCEWithLogitsLoss", "torch.nn.BCEWithLogitsLoss", "print", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "print", "transformers.AdamW", "print", "transformers.get_scheduler", "torch.nn.parallel.DistributedDataParallel.load_state_dict", "model.BertWrapper", "model.ClassifyNet", "torch.load", "torch.load", "torch.load", "torch.nn.parallel.DistributedDataParallel.parameters", "torch.nn.parallel.DistributedDataParallel.parameters", "len"], "function", ["home.repos.pwc.inspect_result.wq2581_gudn.None.dataset.get_label_num", "home.repos.pwc.inspect_result.wq2581_gudn.None.dataset.get_train_sampler_data_loader", "home.repos.pwc.inspect_result.wq2581_gudn.None.dataset.get_test_data_loader"], ["", "def", "build_train_model", "(", "config", ")", ":", "\n", "    ", "print", "(", "\"get label number\"", ")", "\n", "label_number", "=", "get_label_num", "(", "config", "[", "'dataset'", "]", ")", "\n", "\n", "print", "(", "\"build bert model\"", ")", "\n", "bert", "=", "BertModel", ".", "from_pretrained", "(", "f\"./checkpoint/{config['dataset']}/{config['checkpoint_epoch']}\"", "if", "config", "[", "'use_checkpoint'", "]", "else", "config", "[", "'bert_version'", "]", ")", "\n", "tokenizer", "=", "BertTokenizer", ".", "from_pretrained", "(", "f\"./checkpoint/{config['dataset']}/{config['checkpoint_epoch']}\"", "if", "config", "[", "'use_checkpoint'", "]", "else", "config", "[", "'bert_version'", "]", ")", "\n", "bert_hidden_size", "=", "bert", ".", "config", ".", "hidden_size", "\n", "\n", "print", "(", "\"build BertWrapper model\"", ")", "\n", "bertWrapper", "=", "BertWrapper", "(", "bert", ")", ".", "to", "(", "config", "[", "'device'", "]", ")", "\n", "bertWrapper", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "bertWrapper", ",", "device_ids", "=", "[", "config", "[", "'device_id'", "]", "[", "config", "[", "'local_rank'", "]", "]", "]", ",", "output_device", "=", "config", "[", "'device_id'", "]", "[", "config", "[", "'local_rank'", "]", "]", ")", "\n", "\n", "print", "(", "\"build ClassifyNet model\"", ")", "\n", "classify_net", "=", "ClassifyNet", "(", "label_number", "=", "label_number", ",", "feature_layers", "=", "10", ",", "bert_hidden_size", "=", "bert_hidden_size", ")", ".", "to", "(", "config", "[", "'device'", "]", ")", "\n", "if", "config", "[", "'use_checkpoint'", "]", ":", "\n", "        ", "classify_net", ".", "load_state_dict", "(", "torch", ".", "load", "(", "f\"./checkpoint/{config['dataset']}/{config['checkpoint_epoch']}/student_model_file.bin\"", ")", ")", "\n", "", "classify_net", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "classify_net", ",", "device_ids", "=", "[", "config", "[", "'device_id'", "]", "[", "config", "[", "'local_rank'", "]", "]", "]", ",", "output_device", "=", "config", "[", "'device_id'", "]", "[", "config", "[", "'local_rank'", "]", "]", ")", "\n", "\n", "print", "(", "\"build train data loader\"", ")", "\n", "train_data_loader", ",", "train_sampler", "=", "get_train_sampler_data_loader", "(", "config", "[", "'dataset'", "]", ",", "tokenizer", ",", "batch_size", "=", "config", "[", "'train_batch_size'", "]", ",", "num_workers", "=", "config", "[", "'num_workers'", "]", ")", "\n", "\n", "print", "(", "\"build test data loader\"", ")", "\n", "test_data_loader", "=", "get_test_data_loader", "(", "config", "[", "'dataset'", "]", ",", "tokenizer", ",", "batch_size", "=", "config", "[", "'train_batch_size'", "]", ",", "num_workers", "=", "config", "[", "'num_workers'", "]", ")", "\n", "\n", "print", "(", "\"build BCE loss\"", ")", "\n", "classify_loss_function", "=", "torch", ".", "nn", ".", "BCEWithLogitsLoss", "(", ")", "\n", "\n", "print", "(", "\"build MSE loss\"", ")", "\n", "mse_loss_function", "=", "torch", ".", "nn", ".", "MSELoss", "(", ")", "\n", "\n", "print", "(", "\"build optimizer\"", ")", "\n", "bert_train_parameters", "=", "[", "parameter", "for", "parameter", "in", "bertWrapper", ".", "parameters", "(", ")", "if", "parameter", ".", "requires_grad", "]", "\n", "classify_net_train_parameters", "=", "[", "parameter", "for", "parameter", "in", "classify_net", ".", "parameters", "(", ")", "if", "parameter", ".", "requires_grad", "]", "\n", "parameters", "=", "bert_train_parameters", "+", "classify_net_train_parameters", "\n", "\n", "optimizer", "=", "AdamW", "(", "parameters", ",", "lr", "=", "config", "[", "'lr'", "]", ")", "\n", "\n", "print", "(", "\"build lr_scheduler\"", ")", "\n", "lr_scheduler", "=", "get_scheduler", "(", "\"linear\"", ",", "optimizer", "=", "optimizer", ",", "num_warmup_steps", "=", "0", ",", "\n", "num_training_steps", "=", "config", "[", "'epochs'", "]", "*", "len", "(", "train_data_loader", ")", ")", "\n", "\n", "return", "train_data_loader", ",", "train_sampler", ",", "test_data_loader", ",", "bertWrapper", ",", "classify_net", ",", "tokenizer", ",", "classify_loss_function", ",", "mse_loss_function", ",", "optimizer", ",", "lr_scheduler", "\n", "\n"]], "home.repos.pwc.inspect_result.wq2581_gudn.None.main_multi_gpu.run_train_batch": [[67, 100], ["batch_text_input_ids.to.to", "batch_text_padding_mask.to.to", "batch_text_token_type_ids.to.to", "batch_label_input_ids.to.to", "batch_label_padding_mask.to.to", "batch_label_token_type_ids.to.to", "batch_label_one_hot.to.to", "bertWrapper", "classify_net", "classify_loss_function", "mse_loss_function", "classify_net", "classify_loss_function", "optimizer.zero_grad", "loss.backward", "optimizer.step", "lr_scheduler.step"], "function", ["None"], ["", "def", "run_train_batch", "(", "device", ",", "data", ",", "bertWrapper", ",", "classify_net", ",", "classify_loss_function", ",", "mse_loss_function", ",", "optimizer", ",", "lr_scheduler", ")", ":", "\n", "    ", "batch_text_input_ids", ",", "batch_text_padding_mask", ",", "batch_text_token_type_ids", ",", "batch_label_input_ids", ",", "batch_label_padding_mask", ",", "batch_label_token_type_ids", ",", "batch_label_one_hot", "=", "data", "\n", "\n", "batch_text_input_ids", "=", "batch_text_input_ids", ".", "to", "(", "device", ")", "\n", "batch_text_padding_mask", "=", "batch_text_padding_mask", ".", "to", "(", "device", ")", "\n", "batch_text_token_type_ids", "=", "batch_text_token_type_ids", ".", "to", "(", "device", ")", "\n", "batch_label_input_ids", "=", "batch_label_input_ids", ".", "to", "(", "device", ")", "\n", "batch_label_padding_mask", "=", "batch_label_padding_mask", ".", "to", "(", "device", ")", "\n", "batch_label_token_type_ids", "=", "batch_label_token_type_ids", ".", "to", "(", "device", ")", "\n", "batch_label_one_hot", "=", "batch_label_one_hot", ".", "to", "(", "device", ")", "\n", "\n", "\n", "text_bert_out", ",", "label_bert_out", "=", "bertWrapper", "(", "input_ids", "=", "[", "batch_text_input_ids", ",", "batch_label_input_ids", "]", ",", "\n", "attention_mask", "=", "[", "batch_text_padding_mask", ",", "batch_label_padding_mask", "]", ",", "\n", "token_type_ids", "=", "[", "batch_text_token_type_ids", ",", "batch_label_token_type_ids", "]", ")", "\n", "\n", "out", "=", "classify_net", "(", "text_bert_out", ")", "\n", "text_classify_loss", "=", "classify_loss_function", "(", "out", ",", "batch_label_one_hot", ")", "\n", "\n", "\n", "mse_loss", "=", "mse_loss_function", "(", "text_bert_out", ".", "pooler_output", ",", "label_bert_out", ".", "pooler_output", ")", "\n", "\n", "out", "=", "classify_net", "(", "label_bert_out", ")", "\n", "label_classify_loss", "=", "classify_loss_function", "(", "out", ",", "batch_label_one_hot", ")", "\n", "\n", "loss", "=", "text_classify_loss", "+", "mse_loss", "+", "label_classify_loss", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "lr_scheduler", ".", "step", "(", ")", "\n", "\n", "return", "text_classify_loss", ",", "mse_loss", ",", "label_classify_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.wq2581_gudn.None.main_multi_gpu.run_test_batch": [[102, 123], ["batch_text_input_ids.to.to", "batch_text_padding_mask.to.to", "batch_text_token_type_ids.to.to", "batch_label_one_hot.to.to", "bertWrapper", "classify_net", "loss_function", "accuracy.calc"], "function", ["home.repos.pwc.inspect_result.wq2581_gudn.None.util.Accuracy.calc"], ["", "def", "run_test_batch", "(", "device", ",", "data", ",", "bertWrapper", ",", "classify_net", ",", "loss_function", ",", "accuracy", ")", ":", "\n", "    ", "batch_text_input_ids", ",", "batch_text_padding_mask", ",", "batch_text_token_type_ids", ",", "batch_label_input_ids", ",", "batch_label_padding_mask", ",", "batch_label_token_type_ids", ",", "batch_label_one_hot", "=", "data", "\n", "\n", "batch_text_input_ids", "=", "batch_text_input_ids", ".", "to", "(", "device", ")", "\n", "batch_text_padding_mask", "=", "batch_text_padding_mask", ".", "to", "(", "device", ")", "\n", "batch_text_token_type_ids", "=", "batch_text_token_type_ids", ".", "to", "(", "device", ")", "\n", "batch_label_one_hot", "=", "batch_label_one_hot", ".", "to", "(", "device", ")", "\n", "\n", "bert_out", "=", "bertWrapper", "(", "input_ids", "=", "[", "batch_text_input_ids", "]", ",", "\n", "attention_mask", "=", "[", "batch_text_padding_mask", "]", ",", "\n", "token_type_ids", "=", "[", "batch_text_token_type_ids", "]", ")", "\n", "\n", "out", "=", "classify_net", "(", "bert_out", ")", "\n", "\n", "loss", "=", "loss_function", "(", "out", ",", "batch_label_one_hot", ")", "\n", "\n", "accuracy", ".", "calc", "(", "out", ",", "batch_label_one_hot", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.wq2581_gudn.None.main_multi_gpu.main_worker": [[125, 132], ["torch.init_process_group", "torch.device", "torch.device", "torch.device", "main_multi_gpu.train"], "function", ["home.repos.pwc.inspect_result.wq2581_gudn.None.main_multi_gpu.train"], ["", "def", "main_worker", "(", "local_rank", ",", "number_of_gpus_per_node", ",", "config", ")", ":", "\n", "    ", "dist", ".", "init_process_group", "(", "backend", "=", "'nccl'", ",", "init_method", "=", "'tcp://127.0.0.1:23233'", ",", "world_size", "=", "number_of_gpus_per_node", ",", "rank", "=", "local_rank", ")", "\n", "\n", "config", "[", "'device'", "]", "=", "torch", ".", "device", "(", "f\"cuda:{config['device_id'][local_rank]}\"", ")", "\n", "config", "[", "'local_rank'", "]", "=", "local_rank", "\n", "\n", "train", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wq2581_gudn.None.main_multi_gpu.launch_worker": [[134, 141], ["torch.init_process_group", "torch.device", "torch.device", "torch.device", "main_multi_gpu.train"], "function", ["home.repos.pwc.inspect_result.wq2581_gudn.None.main_multi_gpu.train"], ["", "def", "launch_worker", "(", "local_rank", ",", "config", ")", ":", "\n", "    ", "dist", ".", "init_process_group", "(", "backend", "=", "'nccl'", ")", "\n", "\n", "config", "[", "'device'", "]", "=", "torch", ".", "device", "(", "f\"cuda:{config['device_id'][local_rank]}\"", ")", "\n", "config", "[", "'local_rank'", "]", "=", "local_rank", "\n", "\n", "train", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wq2581_gudn.None.main_multi_gpu.train": [[143, 176], ["print", "main_multi_gpu.init", "util.Accuracy", "main_multi_gpu.build_train_model", "range", "train_sampler.set_epoch", "bertWrapper.train", "classify_net.train", "tqdm.tqdm", "torch.no_grad", "torch.no_grad", "torch.no_grad", "bertWrapper.eval", "classify_net.eval", "util.Accuracy.reset_acc", "main_multi_gpu.run_train_batch", "batch.set_description", "tqdm.tqdm", "util.save", "print", "main_multi_gpu.run_test_batch", "run_test_batch.item", "batch.set_description", "bertWrapper.module.get_bert", "text_classify_loss.item", "mse_loss.item", "label_classify_loss.item", "util.Accuracy.get_acc1", "util.Accuracy.get_acc3", "util.Accuracy.get_acc5", "run_test_batch.item", "util.Accuracy.get_total"], "function", ["home.repos.pwc.inspect_result.wq2581_gudn.None.main_multi_gpu.init", "home.repos.pwc.inspect_result.wq2581_gudn.None.main_multi_gpu.build_train_model", "home.repos.pwc.inspect_result.wq2581_gudn.None.main_multi_gpu.train", "home.repos.pwc.inspect_result.wq2581_gudn.None.main_multi_gpu.train", "home.repos.pwc.inspect_result.wq2581_gudn.None.util.Accuracy.reset_acc", "home.repos.pwc.inspect_result.wq2581_gudn.None.main_multi_gpu.run_train_batch", "home.repos.pwc.inspect_result.wq2581_gudn.None.util.save", "home.repos.pwc.inspect_result.wq2581_gudn.None.main_multi_gpu.run_test_batch", "home.repos.pwc.inspect_result.wq2581_gudn.None.model.BertWrapper.get_bert", "home.repos.pwc.inspect_result.wq2581_gudn.None.util.Accuracy.get_acc1", "home.repos.pwc.inspect_result.wq2581_gudn.None.util.Accuracy.get_acc3", "home.repos.pwc.inspect_result.wq2581_gudn.None.util.Accuracy.get_acc5", "home.repos.pwc.inspect_result.wq2581_gudn.None.util.Accuracy.get_total"], ["", "def", "train", "(", "config", ")", ":", "\n", "    ", "print", "(", "f\"start dataset {config['dataset']}\"", ")", "\n", "\n", "init", "(", "config", ")", "\n", "\n", "accuracy", "=", "Accuracy", "(", ")", "\n", "\n", "train_data_loader", ",", "train_sampler", ",", "test_data_loader", ",", "bertWrapper", ",", "classify_net", ",", "tokenizer", ",", "loss_function", ",", "mse_loss_function", ",", "optimizer", ",", "lr_scheduler", "=", "build_train_model", "(", "config", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "config", "[", "'epochs'", "]", ")", ":", "\n", "        ", "train_sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "bertWrapper", ".", "train", "(", ")", "\n", "classify_net", ".", "train", "(", ")", "\n", "with", "tqdm", "(", "train_data_loader", ",", "ncols", "=", "200", ")", "as", "batch", ":", "\n", "            ", "for", "data", "in", "batch", ":", "\n", "                ", "text_classify_loss", ",", "mse_loss", ",", "label_classify_loss", "=", "run_train_batch", "(", "config", "[", "'device'", "]", ",", "data", ",", "bertWrapper", ",", "classify_net", ",", "loss_function", ",", "mse_loss_function", ",", "optimizer", ",", "lr_scheduler", ")", "\n", "batch", ".", "set_description", "(", "f\"train device_id:{config['device_id'][config['local_rank']]}, epoch:{epoch + 1}/{config['epochs']}, text_classify_loss:{text_classify_loss.item()}, mse_loss:{mse_loss.item()}, label_classify_loss:{label_classify_loss.item()}\"", ")", "\n", "\n", "", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "bertWrapper", ".", "eval", "(", ")", "\n", "classify_net", ".", "eval", "(", ")", "\n", "accuracy", ".", "reset_acc", "(", ")", "\n", "loss", "=", "0", "\n", "with", "tqdm", "(", "test_data_loader", ",", "ncols", "=", "200", ")", "as", "batch", ":", "\n", "                ", "for", "data", "in", "batch", ":", "\n", "                    ", "_loss", "=", "run_test_batch", "(", "config", "[", "'device'", "]", ",", "data", ",", "bertWrapper", ",", "classify_net", ",", "loss_function", ",", "accuracy", ")", "\n", "loss", "+=", "_loss", ".", "item", "(", ")", "\n", "batch", ".", "set_description", "(", "f\"test device_id:{config['device_id'][config['local_rank']]}, epoch:{epoch + 1}/{config['epochs']}, loss:{_loss.item()}\"", ")", "\n", "\n", "", "", "if", "config", "[", "'local_rank'", "]", "==", "0", ":", "\n", "                ", "save", "(", "config", "[", "'dataset'", "]", ",", "epoch", ",", "mark", ",", "bertWrapper", ".", "module", ".", "get_bert", "(", ")", ",", "tokenizer", ",", "classify_net", ")", "\n", "\n", "print", "(", "f\"test epoch:{epoch + 1}/{config['epochs']} loss:{loss / accuracy.get_total()} p1:{accuracy.get_acc1()} p3:{accuracy.get_acc3()} p5:{accuracy.get_acc5()}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wq2581_gudn.None.dataset.AppDataset.__init__": [[13, 23], ["torch.utils.data.Dataset.__init__", "util.read_configuration", "open", "open", "json.load", "pickle.load"], "methods", ["home.repos.pwc.inspect_result.wq2581_gudn.None.util.Accuracy.__init__", "home.repos.pwc.inspect_result.wq2581_gudn.None.util.read_configuration"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "data_type", ",", "tokenizer", ")", ":", "\n", "        ", "super", "(", "AppDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "config", "=", "read_configuration", "(", "\"./config.yaml\"", ")", "\n", "\n", "with", "open", "(", "f\"./data/{dataset}/processed_{data_type}.json\"", ",", "\"r\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "data_file", ",", "open", "(", "f\"./data/{dataset}/label_dict.pkl\"", ",", "\"rb\"", ")", "as", "dict_file", ":", "\n", "            ", "self", ".", "json_data_list", "=", "json", ".", "load", "(", "data_file", ")", "\n", "self", ".", "label_dict", "=", "pickle", ".", "load", "(", "dict_file", ")", "\n", "self", ".", "tokenizer", "=", "tokenizer", "\n", "\n"]], "home.repos.pwc.inspect_result.wq2581_gudn.None.dataset.AppDataset.__getitem__": [[26, 34], ["dataset.AppDataset.tokenizer.encode", "dataset.AppDataset.tokenizer.encode", "torch.zeros().scatter", "torch.tensor", "torch.tensor", "torch.zeros", "len"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "json_data", "=", "self", ".", "json_data_list", "[", "item", "]", "\n", "text_encoder", "=", "self", ".", "tokenizer", ".", "encode", "(", "json_data", "[", "'text'", "]", ",", "add_special_tokens", "=", "True", ",", "max_length", "=", "512", ",", "truncation", "=", "True", ")", "\n", "label_encoder", "=", "self", ".", "tokenizer", ".", "encode", "(", "\" \"", ".", "join", "(", "json_data", "[", "'label'", "]", ")", ",", "add_special_tokens", "=", "True", ")", "\n", "label_one_hot", "=", "torch", ".", "zeros", "(", "len", "(", "self", ".", "label_dict", ")", ")", ".", "scatter", "(", "0", ",", "\n", "torch", ".", "tensor", "(", "[", "self", ".", "label_dict", "[", "data", "]", "for", "data", "in", "json_data", "[", "\"label\"", "]", "]", ")", ",", "\n", "torch", ".", "tensor", "(", "[", "1.0", "for", "_", "in", "json_data", "[", "\"label\"", "]", "]", ")", ")", "\n", "return", "text_encoder", ",", "label_encoder", ",", "label_one_hot", "\n", "\n"]], "home.repos.pwc.inspect_result.wq2581_gudn.None.dataset.AppDataset.__len__": [[35, 37], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "json_data_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wq2581_gudn.None.dataset.AppDataset.process_data": [[38, 64], ["torch.load", "tqdm.tqdm.tqdm", "torch.save", "dataset.AppDataset.tokenizer.encode", "dataset.AppDataset.tokenizer.encode", "torch.zeros().scatter_", "text_encoder_list.append", "label_encoder_list.append", "label_one_hot_list.append", "torch.tensor", "torch.zeros", "len"], "methods", ["home.repos.pwc.inspect_result.wq2581_gudn.None.util.save"], ["", "def", "process_data", "(", "self", ",", "cache_save_path", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "data", "=", "torch", ".", "load", "(", "cache_save_path", ")", "\n", "return", "data", "[", "\"text_encoder_list\"", "]", ",", "data", "[", "\"label_encoder_list\"", "]", ",", "data", "[", "\"label_one_hot_list\"", "]", "\n", "", "except", "FileNotFoundError", ":", "\n", "            ", "text_encoder_list", "=", "[", "]", "\n", "label_encoder_list", "=", "[", "]", "\n", "label_one_hot_list", "=", "[", "]", "\n", "for", "json_data", "in", "tqdm", "(", "self", ".", "json_data_list", ")", ":", "\n", "                ", "text_encoder", "=", "self", ".", "tokenizer", ".", "encode", "(", "json_data", "[", "'text'", "]", ",", "add_special_tokens", "=", "True", ",", "max_length", "=", "512", ",", "truncation", "=", "True", ")", "\n", "label_encoder", "=", "self", ".", "tokenizer", ".", "encode", "(", "\" \"", ".", "join", "(", "json_data", "[", "'label'", "]", ")", ",", "add_special_tokens", "=", "True", ")", "\n", "label_one_hot", "=", "torch", ".", "zeros", "(", "len", "(", "self", ".", "label_dict", ")", ")", ".", "scatter_", "(", "0", ",", "torch", ".", "tensor", "(", "\n", "[", "self", ".", "label_dict", "[", "data", "]", "for", "data", "in", "json_data", "[", "\"label\"", "]", "]", ")", ",", "1", ")", "\n", "\n", "text_encoder_list", ".", "append", "(", "text_encoder", ")", "\n", "label_encoder_list", ".", "append", "(", "label_encoder", ")", "\n", "label_one_hot_list", ".", "append", "(", "label_one_hot", ")", "\n", "\n", "", "data", "=", "{", "\n", "\"text_encoder_list\"", ":", "text_encoder_list", ",", "\n", "\"label_encoder_list\"", ":", "label_encoder_list", ",", "\n", "\"label_one_hot_list\"", ":", "label_one_hot_list", "\n", "}", "\n", "torch", ".", "save", "(", "data", ",", "cache_save_path", ")", "\n", "\n", "return", "text_encoder_list", ",", "label_encoder_list", ",", "label_one_hot_list", "\n", "\n"]], "home.repos.pwc.inspect_result.wq2581_gudn.None.dataset.bert_collate_fn": [[66, 81], ["dataset.padding", "dataset.padding", "batch_text.append", "batch_label.append", "batch_label_one_hot.append", "torch.stack"], "function", ["home.repos.pwc.inspect_result.wq2581_gudn.None.dataset.padding", "home.repos.pwc.inspect_result.wq2581_gudn.None.dataset.padding"], ["", "", "", "def", "bert_collate_fn", "(", "batches", ")", ":", "\n", "    ", "batch_text", "=", "[", "]", "\n", "batch_label", "=", "[", "]", "\n", "batch_label_one_hot", "=", "[", "]", "\n", "for", "batch", "in", "batches", ":", "\n", "        ", "batch_text", ".", "append", "(", "batch", "[", "0", "]", ")", "\n", "batch_label", ".", "append", "(", "batch", "[", "1", "]", ")", "\n", "batch_label_one_hot", ".", "append", "(", "batch", "[", "2", "]", ")", "\n", "\n", "", "batch_text_input_ids", ",", "text_padding_mask", ",", "text_token_type_ids", "=", "padding", "(", "batch_text", ",", "0", ")", "\n", "batch_label_input_ids", ",", "label_padding_mask", ",", "label_token_type_ids", "=", "padding", "(", "batch_label", ",", "0", ")", "\n", "\n", "return", "batch_text_input_ids", ",", "text_padding_mask", ",", "text_token_type_ids", ",", "batch_label_input_ids", ",", "label_padding_mask", ",", "label_token_type_ids", ",", "torch", ".", "stack", "(", "batch_label_one_hot", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wq2581_gudn.None.dataset.padding": [[84, 94], ["torch.as_tensor", "torch.as_tensor", "torch.zeros", "max", "len", "len", "len", "len"], "function", ["None"], ["", "def", "padding", "(", "inputs", ",", "pad_idx", ",", "max_len", "=", "None", ")", ":", "\n", "    ", "if", "max_len", "is", "None", ":", "\n", "        ", "lengths", "=", "[", "len", "(", "inp", ")", "for", "inp", "in", "inputs", "]", "\n", "max_len", "=", "max", "(", "lengths", ")", "\n", "", "padded_inputs", "=", "torch", ".", "as_tensor", "(", "[", "inp", "+", "[", "pad_idx", "]", "*", "(", "max_len", "-", "len", "(", "inp", ")", ")", "for", "inp", "in", "inputs", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "# mask", "\n", "masks", "=", "torch", ".", "as_tensor", "(", "[", "[", "1", "]", "*", "len", "(", "inp", ")", "+", "[", "0", "]", "*", "(", "max_len", "-", "len", "(", "inp", ")", ")", "for", "inp", "in", "inputs", "]", ",", "dtype", "=", "torch", ".", "int", ")", "\n", "# token_type_ids", "\n", "token_type_ids", "=", "torch", ".", "zeros", "(", "padded_inputs", ".", "shape", ",", "dtype", "=", "torch", ".", "int", ")", "\n", "return", "padded_inputs", ",", "masks", ",", "token_type_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.wq2581_gudn.None.dataset.get_train_data_loader": [[96, 101], ["dataset.AppDataset", "torch.utils.data.DataLoader"], "function", ["None"], ["", "def", "get_train_data_loader", "(", "dataset", ",", "tokenizer", ",", "batch_size", "=", "16", ",", "num_workers", "=", "6", ")", ":", "\n", "    ", "train_dataset", "=", "AppDataset", "(", "dataset", ",", "\"train\"", ",", "tokenizer", ")", "\n", "train_data_loader", "=", "DataLoader", "(", "dataset", "=", "train_dataset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "num_workers", ",", "collate_fn", "=", "bert_collate_fn", ")", "\n", "\n", "return", "train_data_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.wq2581_gudn.None.dataset.get_test_data_loader": [[103, 108], ["dataset.AppDataset", "torch.utils.data.DataLoader"], "function", ["None"], ["", "def", "get_test_data_loader", "(", "dataset", ",", "tokenizer", ",", "batch_size", "=", "16", ",", "num_workers", "=", "6", ")", ":", "\n", "    ", "test_dataset", "=", "AppDataset", "(", "dataset", ",", "\"test\"", ",", "tokenizer", ")", "\n", "test_data_loader", "=", "DataLoader", "(", "dataset", "=", "test_dataset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "num_workers", ",", "collate_fn", "=", "bert_collate_fn", ")", "\n", "\n", "return", "test_data_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.wq2581_gudn.None.dataset.get_train_sampler_data_loader": [[110, 116], ["dataset.AppDataset", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.DataLoader"], "function", ["None"], ["", "def", "get_train_sampler_data_loader", "(", "dataset", ",", "tokenizer", ",", "batch_size", "=", "16", ",", "num_workers", "=", "6", ",", "num_replicas", "=", "None", ",", "rank", "=", "None", ")", ":", "\n", "    ", "train_dataset", "=", "AppDataset", "(", "dataset", ",", "\"train\"", ",", "tokenizer", ")", "\n", "train_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "train_dataset", ",", "num_replicas", "=", "num_replicas", ",", "rank", "=", "rank", ")", "\n", "train_data_loader", "=", "DataLoader", "(", "dataset", "=", "train_dataset", ",", "batch_size", "=", "batch_size", ",", "num_workers", "=", "num_workers", ",", "pin_memory", "=", "True", ",", "collate_fn", "=", "bert_collate_fn", ",", "sampler", "=", "train_sampler", ")", "\n", "\n", "return", "train_data_loader", ",", "train_sampler", "\n", "\n"]], "home.repos.pwc.inspect_result.wq2581_gudn.None.dataset.get_test_sampler_data_loader": [[118, 124], ["dataset.AppDataset", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.DataLoader"], "function", ["None"], ["", "def", "get_test_sampler_data_loader", "(", "dataset", ",", "tokenizer", ",", "batch_size", "=", "16", ",", "num_workers", "=", "6", ",", "num_replicas", "=", "None", ",", "rank", "=", "None", ")", ":", "\n", "    ", "test_dataset", "=", "AppDataset", "(", "dataset", ",", "\"test\"", ",", "tokenizer", ")", "\n", "test_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "test_dataset", ",", "num_replicas", "=", "num_replicas", ",", "rank", "=", "rank", ")", "\n", "test_data_loader", "=", "DataLoader", "(", "dataset", "=", "test_dataset", ",", "batch_size", "=", "batch_size", ",", "num_workers", "=", "num_workers", ",", "pin_memory", "=", "True", ",", "collate_fn", "=", "bert_collate_fn", ",", "sampler", "=", "test_sampler", ")", "\n", "\n", "return", "test_data_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.wq2581_gudn.None.dataset.get_label_num": [[126, 130], ["open", "pickle.load", "len"], "function", ["None"], ["", "def", "get_label_num", "(", "dataset", ")", ":", "\n", "    ", "with", "open", "(", "f\"./data/{dataset}/label_dict.pkl\"", ",", "\"rb\"", ")", "as", "file", ":", "\n", "        ", "label_dict", "=", "pickle", ".", "load", "(", "file", ")", "\n", "return", "len", "(", "label_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wq2581_gudn.None.cluster.get_sparse_feature": [[12, 16], ["sklearn.datasets.load_svmlight_file", "i.replace().split", "sklearn.preprocessing.normalize", "numpy.array", "open", "i.replace"], "function", ["None"], ["def", "get_sparse_feature", "(", "feature_file", ",", "label_file", ")", ":", "\n", "    ", "sparse_x", ",", "_", "=", "load_svmlight_file", "(", "feature_file", ",", "multilabel", "=", "True", ")", "\n", "sparse_labels", "=", "[", "i", ".", "replace", "(", "'\\n'", ",", "''", ")", ".", "split", "(", ")", "for", "i", "in", "open", "(", "label_file", ")", "]", "\n", "return", "normalize", "(", "sparse_x", ")", ",", "np", ".", "array", "(", "sparse_labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wq2581_gudn.None.cluster.build_tree_by_level": [[17, 53], ["print", "cluster.get_sparse_feature", "sklearn.preprocessing.MultiLabelBinarizer", "sklearn.preprocessing.MultiLabelBinarizer.fit_transform", "joblib.dump", "print", "sklearn.preprocessing.normalize", "print", "range", "print", "os.path.exists", "numpy.asarray", "scipy.sparse.csr_matrix", "scipy.sparse.csc_matrix", "len", "print", "numpy.load", "sum", "len", "levels.index", "print", "numpy.save", "print", "numpy.arange", "len", "numpy.asarray", "len", "list", "numpy.save", "len", "cluster.split_node", "numpy.asarray", "len"], "function", ["home.repos.pwc.inspect_result.wq2581_gudn.None.cluster.get_sparse_feature", "home.repos.pwc.inspect_result.wq2581_gudn.None.util.save", "home.repos.pwc.inspect_result.wq2581_gudn.None.util.save", "home.repos.pwc.inspect_result.wq2581_gudn.None.cluster.split_node"], ["", "def", "build_tree_by_level", "(", "sparse_data_x", ",", "sparse_data_y", ",", "eps", ":", "float", ",", "max_leaf", ":", "int", ",", "levels", ":", "list", ",", "groups_path", ")", ":", "\n", "    ", "print", "(", "'Clustering'", ")", "\n", "sparse_x", ",", "sparse_labels", "=", "get_sparse_feature", "(", "sparse_data_x", ",", "sparse_data_y", ")", "\n", "mlb", "=", "MultiLabelBinarizer", "(", "sparse_output", "=", "True", ")", "\n", "sparse_y", "=", "mlb", ".", "fit_transform", "(", "sparse_labels", ")", "\n", "joblib", ".", "dump", "(", "mlb", ",", "groups_path", "+", "'mlb'", ")", "\n", "print", "(", "'Getting Labels Feature'", ")", "\n", "labels_f", "=", "normalize", "(", "csr_matrix", "(", "sparse_y", ".", "T", ")", "@", "csc_matrix", "(", "sparse_x", ")", ")", "\n", "print", "(", "F'Start Clustering {levels}'", ")", "\n", "levels", ",", "q", "=", "[", "2", "**", "x", "for", "x", "in", "levels", "]", ",", "None", "\n", "for", "i", "in", "range", "(", "len", "(", "levels", ")", "-", "1", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "        ", "if", "os", ".", "path", ".", "exists", "(", "F'{groups_path}-Level-{i}.npy'", ")", ":", "\n", "            ", "print", "(", "F'{groups_path}-Level-{i}.npy'", ")", "\n", "labels_list", "=", "np", ".", "load", "(", "F'{groups_path}-Level-{i}.npy'", ",", "allow_pickle", "=", "True", ")", "\n", "q", "=", "[", "(", "labels_i", ",", "labels_f", "[", "labels_i", "]", ")", "for", "labels_i", "in", "labels_list", "]", "\n", "break", "\n", "", "", "if", "q", "is", "None", ":", "\n", "        ", "q", "=", "[", "(", "np", ".", "arange", "(", "labels_f", ".", "shape", "[", "0", "]", ")", ",", "labels_f", ")", "]", "\n", "", "while", "q", ":", "\n", "        ", "labels_list", "=", "np", ".", "asarray", "(", "[", "x", "[", "0", "]", "for", "x", "in", "q", "]", ")", "\n", "assert", "sum", "(", "len", "(", "labels", ")", "for", "labels", "in", "labels_list", ")", "==", "labels_f", ".", "shape", "[", "0", "]", "\n", "if", "len", "(", "labels_list", ")", "in", "levels", ":", "\n", "            ", "level", "=", "levels", ".", "index", "(", "len", "(", "labels_list", ")", ")", "\n", "print", "(", "F'Finish Clustering Level-{level}'", ")", "\n", "np", ".", "save", "(", "F'{groups_path}-Level-{level}.npy'", ",", "np", ".", "asarray", "(", "labels_list", ")", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "F'Finish Clustering {len(labels_list)}'", ")", "\n", "", "next_q", "=", "[", "]", "\n", "for", "node_i", ",", "node_f", "in", "q", ":", "\n", "            ", "if", "len", "(", "node_i", ")", ">", "max_leaf", ":", "\n", "                ", "next_q", "+=", "list", "(", "split_node", "(", "node_i", ",", "node_f", ",", "eps", ")", ")", "\n", "", "else", ":", "\n", "                ", "np", ".", "save", "(", "F'{groups_path}-last.npy'", ",", "np", ".", "asarray", "(", "labels_list", ")", ")", "\n", "", "", "q", "=", "next_q", "\n", "", "print", "(", "'Finish Clustering'", ")", "\n", "return", "mlb", "\n", "\n"]], "home.repos.pwc.inspect_result.wq2581_gudn.None.cluster.split_node": [[55, 68], ["len", "numpy.random.choice", "numpy.arange", "labels_f[].toarray", "numpy.argsort", "sklearn.preprocessing.normalize", "numpy.asarray", "dis[].sum", "dis[].sum", "numpy.squeeze", "numpy.squeeze", "numpy.asarray", "numpy.asarray", "labels_f[].sum", "labels_f[].sum"], "function", ["None"], ["", "def", "split_node", "(", "labels_i", ":", "np", ".", "ndarray", ",", "labels_f", ":", "csr_matrix", ",", "eps", ":", "float", ")", ":", "\n", "    ", "n", "=", "len", "(", "labels_i", ")", "\n", "c1", ",", "c2", "=", "np", ".", "random", ".", "choice", "(", "np", ".", "arange", "(", "n", ")", ",", "2", ",", "replace", "=", "False", ")", "\n", "centers", ",", "old_dis", ",", "new_dis", "=", "labels_f", "[", "[", "c1", ",", "c2", "]", "]", ".", "toarray", "(", ")", ",", "-", "10000.0", ",", "-", "1.0", "\n", "l_labels_i", ",", "r_labels_i", "=", "None", ",", "None", "\n", "while", "new_dis", "-", "old_dis", ">=", "eps", ":", "\n", "        ", "dis", "=", "labels_f", "@", "centers", ".", "T", "# N, 2", "\n", "partition", "=", "np", ".", "argsort", "(", "dis", "[", ":", ",", "1", "]", "-", "dis", "[", ":", ",", "0", "]", ")", "\n", "l_labels_i", ",", "r_labels_i", "=", "partition", "[", ":", "n", "//", "2", "]", ",", "partition", "[", "n", "//", "2", ":", "]", "\n", "old_dis", ",", "new_dis", "=", "new_dis", ",", "(", "dis", "[", "l_labels_i", ",", "0", "]", ".", "sum", "(", ")", "+", "dis", "[", "r_labels_i", ",", "1", "]", ".", "sum", "(", ")", ")", "/", "n", "\n", "centers", "=", "normalize", "(", "np", ".", "asarray", "(", "[", "np", ".", "squeeze", "(", "np", ".", "asarray", "(", "labels_f", "[", "l_labels_i", "]", ".", "sum", "(", "axis", "=", "0", ")", ")", ")", ",", "\n", "np", ".", "squeeze", "(", "np", ".", "asarray", "(", "labels_f", "[", "r_labels_i", "]", ".", "sum", "(", "axis", "=", "0", ")", ")", ")", "]", ")", ")", "\n", "", "return", "(", "labels_i", "[", "l_labels_i", "]", ",", "labels_f", "[", "l_labels_i", "]", ")", ",", "(", "labels_i", "[", "r_labels_i", "]", ",", "labels_f", "[", "r_labels_i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wq2581_gudn.None.model.ClassifyNet.__init__": [[8, 14], ["super().__init__", "torch.nn.Dropout", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.wq2581_gudn.None.util.Accuracy.__init__"], ["    ", "def", "__init__", "(", "self", ",", "label_number", ",", "feature_layers", ",", "bert_hidden_size", ")", ":", "\n", "        ", "super", "(", "ClassifyNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "feature_layers", "=", "feature_layers", "\n", "self", ".", "dropout", "=", "torch", ".", "nn", ".", "Dropout", "(", "0.5", ")", "\n", "self", ".", "linear", "=", "torch", ".", "nn", ".", "Linear", "(", "feature_layers", "*", "bert_hidden_size", ",", "label_number", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wq2581_gudn.None.model.ClassifyNet.forward": [[15, 22], ["torch.cat", "model.ClassifyNet.dropout", "model.ClassifyNet.linear", "range"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "x", "[", "'hidden_states'", "]", "\n", "out", "=", "torch", ".", "cat", "(", "[", "out", "[", "-", "i", "]", "[", ":", ",", "0", "]", "for", "i", "in", "range", "(", "1", ",", "self", ".", "feature_layers", "+", "1", ")", "]", ",", "dim", "=", "-", "1", ")", "\n", "out", "=", "self", ".", "dropout", "(", "out", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.wq2581_gudn.None.model.BertWrapper.__init__": [[24, 27], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.wq2581_gudn.None.util.Accuracy.__init__"], ["    ", "def", "__init__", "(", "self", ",", "bert", ":", "BertModel", ")", ":", "\n", "        ", "super", "(", "BertWrapper", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bert", "=", "bert", "\n", "\n"]], "home.repos.pwc.inspect_result.wq2581_gudn.None.model.BertWrapper.forward": [[28, 43], ["len", "model.BertWrapper.bert", "model.BertWrapper.bert", "model.BertWrapper.bert"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", ",", "attention_mask", ",", "token_type_ids", ")", ":", "\n", "        ", "if", "len", "(", "input_ids", ")", "==", "1", ":", "\n", "            ", "return", "self", ".", "bert", "(", "input_ids", "=", "input_ids", "[", "0", "]", ",", "\n", "attention_mask", "=", "attention_mask", "[", "0", "]", ",", "\n", "token_type_ids", "=", "token_type_ids", "[", "0", "]", ",", "\n", "output_hidden_states", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "bert", "(", "input_ids", "=", "input_ids", "[", "0", "]", ",", "\n", "attention_mask", "=", "attention_mask", "[", "0", "]", ",", "\n", "token_type_ids", "=", "token_type_ids", "[", "0", "]", ",", "\n", "output_hidden_states", "=", "True", ")", ",", "self", ".", "bert", "(", "input_ids", "=", "input_ids", "[", "1", "]", ",", "\n", "attention_mask", "=", "attention_mask", "[", "1", "]", ",", "\n", "token_type_ids", "=", "token_type_ids", "[", "1", "]", ",", "\n", "output_hidden_states", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wq2581_gudn.None.model.BertWrapper.get_bert": [[44, 46], ["None"], "methods", ["None"], ["", "", "def", "get_bert", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "bert", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wq2581_gudn.None.GUDN_500k.ClassifyNet.__init__": [[7, 14], ["super().__init__", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.wq2581_gudn.None.util.Accuracy.__init__"], ["    ", "def", "__init__", "(", "self", ",", "feature_layers", ",", "bert_hidden_size", ")", ":", "\n", "        ", "super", "(", "ClassifyNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cluster_number", "=", "8192", "\n", "self", ".", "feature_layers", "=", "feature_layers", "\n", "self", ".", "dropout", "=", "torch", ".", "nn", ".", "Dropout", "(", "0.5", ")", "\n", "self", ".", "linear", "=", "torch", ".", "nn", ".", "Linear", "(", "feature_layers", "*", "bert_hidden_size", ",", "self", ".", "cluster_number", ")", "\n", "self", ".", "l1", "=", "torch", ".", "nn", ".", "Linear", "(", "self", ".", "cluster_number", ",", "3000", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wq2581_gudn.None.GUDN_500k.ClassifyNet.forward": [[15, 68], ["torch.cat", "GUDN_500k.ClassifyNet.dropout", "GUDN_500k.ClassifyNet.linear", "labels.to", "torch.masked_select().detach().cpu", "labels.to.sum().detach().cpu", "torch.topk", "zip", "max", "np.stack", "np.stack", "enumerate", "GUDN_500k.ClassifyNet.l1", "GUDN_500k.ClassifyNet.embed", "emb.unsqueeze.unsqueeze.unsqueeze", "torch.bmm().squeeze", "scores.cpu().detach().numpy", "indices.cpu().detach().numpy", "np.stack.append", "np.stack.append", "np.concatenate", "np.concatenate", "labels.to.sum().detach().cpu.numpy", "set", "new_labels.append", "torch.masked_select().detach", "labels.to.sum().detach", "np.pad", "np.pad", "target_candidates[].numpy", "torch.tensor", "len", "new_labels[].sum", "set", "list", "torch.bmm", "range", "scores.cpu().detach", "indices.cpu().detach", "np.full", "range", "torch.masked_select", "labels.to.sum", "zip", "scores.cpu", "indices.cpu", "[].item"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "labels", ")", ":", "\n", "        ", "out", "=", "x", "[", "'hidden_states'", "]", "\n", "out", "=", "torch", ".", "cat", "(", "[", "out", "[", "-", "i", "]", "[", ":", ",", "0", "]", "for", "i", "in", "range", "(", "1", ",", "self", ".", "feature_layers", "+", "1", ")", "]", ",", "dim", "=", "-", "1", ")", "\n", "out", "=", "self", ".", "dropout", "(", "out", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "\n", "\n", "l", "=", "labels", ".", "to", "(", "dtype", "=", "torch", ".", "bool", ")", "\n", "target_candidates", "=", "torch", ".", "masked_select", "(", "candidates", ",", "l", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "target_candidates_num", "=", "l", ".", "sum", "(", "dim", "=", "1", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "logits", "=", "out", "\n", "if", "group_gd", "is", "not", "None", ":", "\n", "            ", "logits", "+=", "group_gd", "\n", "", "scores", ",", "indices", "=", "torch", ".", "topk", "(", "logits", ",", "k", "=", "10", ")", "\n", "scores", ",", "indices", "=", "scores", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "indices", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "candidates", ",", "candidates_scores", "=", "[", "]", ",", "[", "]", "\n", "for", "index", ",", "score", "in", "zip", "(", "indices", ",", "scores", ")", ":", "\n", "            ", "candidates", ".", "append", "(", "self", ".", "group_y", "[", "index", "]", ")", "\n", "candidates_scores", ".", "append", "(", "[", "np", ".", "full", "(", "c", ".", "shape", ",", "s", ")", "for", "c", ",", "s", "in", "zip", "(", "candidates", "[", "-", "1", "]", ",", "score", ")", "]", ")", "\n", "candidates", "[", "-", "1", "]", "=", "np", ".", "concatenate", "(", "candidates", "[", "-", "1", "]", ")", "\n", "candidates_scores", "[", "-", "1", "]", "=", "np", ".", "concatenate", "(", "candidates_scores", "[", "-", "1", "]", ")", "\n", "", "max_candidates", "=", "max", "(", "[", "i", ".", "shape", "[", "0", "]", "for", "i", "in", "candidates", "]", ")", "\n", "candidates", "=", "np", ".", "stack", "(", "[", "np", ".", "pad", "(", "i", ",", "(", "0", ",", "max_candidates", "-", "i", ".", "shape", "[", "0", "]", ")", ",", "mode", "=", "'edge'", ")", "for", "i", "in", "candidates", "]", ")", "\n", "candidates_scores", "=", "np", ".", "stack", "(", "[", "np", ".", "pad", "(", "i", ",", "(", "0", ",", "max_candidates", "-", "i", ".", "shape", "[", "0", "]", ")", ",", "mode", "=", "'edge'", ")", "for", "i", "in", "candidates_scores", "]", ")", "\n", "groups", ",", "candidates", ",", "group_candidates_scores", "=", "indices", ",", "candidates", ",", "candidates_scores", "\n", "bs", "=", "0", "#start", "\n", "new_labels", "=", "[", "]", "\n", "for", "i", ",", "n", "in", "enumerate", "(", "target_candidates_num", ".", "numpy", "(", ")", ")", ":", "\n", "\n", "            ", "be", "=", "bs", "+", "n", "#end", "\n", "c", "=", "set", "(", "target_candidates", "[", "bs", ":", "be", "]", ".", "numpy", "(", ")", ")", "\n", "\n", "c2", "=", "candidates", "[", "i", "]", "\n", "\n", "new_labels", ".", "append", "(", "torch", ".", "tensor", "(", "[", "1.0", "if", "i", "in", "c", "else", "0.0", "for", "i", "in", "c2", "]", ")", ")", "\n", "if", "len", "(", "c", ")", "!=", "new_labels", "[", "-", "1", "]", ".", "sum", "(", ")", ":", "\n", "                ", "s_c2", "=", "set", "(", "c2", ")", "\n", "for", "cc", "in", "list", "(", "c", ")", ":", "\n", "                    ", "if", "cc", "in", "s_c2", ":", "\n", "                        ", "continue", "\n", "", "for", "j", "in", "range", "(", "new_labels", "[", "-", "1", "]", ".", "shape", "[", "0", "]", ")", ":", "\n", "                        ", "if", "new_labels", "[", "-", "1", "]", "[", "j", "]", ".", "item", "(", ")", "!=", "1", ":", "\n", "                            ", "c2", "[", "j", "]", "=", "cc", "\n", "new_labels", "[", "-", "1", "]", "[", "j", "]", "=", "1.0", "\n", "break", "\n", "", "", "", "", "bs", "=", "be", "\n", "\n", "", "emb", "=", "self", ".", "l1", "(", "logits", ")", "\n", "embed_weights", "=", "self", ".", "embed", "(", "candidates", ")", "\n", "emb", "=", "emb", ".", "unsqueeze", "(", "-", "1", ")", "\n", "logits", "=", "torch", ".", "bmm", "(", "embed_weights", ",", "emb", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "\n", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.wq2581_gudn.None.util.NLP.__init__": [[10, 13], ["spacy.load", "util.NLP.nlp.add_pipe", "util.NLP.nlp.create_pipe"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "path", ")", ":", "\n", "        ", "self", ".", "nlp", "=", "spacy", ".", "load", "(", "path", ",", "disable", "=", "[", "'ner'", ",", "'parser'", ",", "'tagger'", "]", ")", "\n", "self", ".", "nlp", ".", "add_pipe", "(", "self", ".", "nlp", ".", "create_pipe", "(", "'sentencizer'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wq2581_gudn.None.util.NLP.sent_tokenize": [[14, 18], ["util.NLP.nlp", "sent.string.strip"], "methods", ["None"], ["", "def", "sent_tokenize", "(", "self", ",", "text", ")", ":", "\n", "        ", "doc", "=", "self", ".", "nlp", "(", "text", ")", "\n", "sentences", "=", "[", "sent", ".", "string", ".", "strip", "(", ")", "for", "sent", "in", "doc", ".", "sents", "]", "\n", "return", "sentences", "\n", "\n"]], "home.repos.pwc.inspect_result.wq2581_gudn.None.util.NLP.word_tokenize": [[19, 27], ["text.lower.lower.split", "text.lower.lower.lower", "util.NLP.nlp.tokenizer"], "methods", ["None"], ["", "def", "word_tokenize", "(", "self", ",", "text", ",", "lower", "=", "False", ")", ":", "# create a tokenizer function", "\n", "        ", "if", "text", "is", "None", ":", "\n", "            ", "return", "text", "\n", "", "text", "=", "' '", ".", "join", "(", "text", ".", "split", "(", ")", ")", "\n", "if", "lower", ":", "\n", "            ", "text", "=", "text", ".", "lower", "(", ")", "\n", "", "toks", "=", "[", "tok", ".", "text", "for", "tok", "in", "self", ".", "nlp", ".", "tokenizer", "(", "text", ")", "]", "\n", "return", "' '", ".", "join", "(", "toks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wq2581_gudn.None.util.Accuracy.__init__": [[30, 36], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.wq2581_gudn.None.util.Accuracy.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Accuracy", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "total", "=", "0", "\n", "self", ".", "acc1", "=", "0", "\n", "self", ".", "acc3", "=", "0", "\n", "self", ".", "acc5", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.wq2581_gudn.None.util.Accuracy.calc": [[37, 43], ["util.Accuracy.get_accuracy"], "methods", ["home.repos.pwc.inspect_result.wq2581_gudn.None.util.get_accuracy"], ["", "def", "calc", "(", "self", ",", "logits", ",", "labels", ")", ":", "\n", "        ", "acc1", ",", "acc3", ",", "acc5", ",", "total", "=", "get_accuracy", "(", "logits", ",", "labels", ")", "\n", "self", ".", "total", "+=", "total", "\n", "self", ".", "acc1", "+=", "acc1", "\n", "self", ".", "acc3", "+=", "acc3", "\n", "self", ".", "acc5", "+=", "acc5", "\n", "\n"]], "home.repos.pwc.inspect_result.wq2581_gudn.None.util.Accuracy.get_accuracy": [[44, 59], ["torch.topk", "enumerate", "logits.detach().cpu", "indices[].numpy.cpu().numpy", "set", "indices[].numpy", "len", "len", "len", "logits.detach", "indices[].numpy.cpu", "numpy.nonzero", "set", "set", "set"], "methods", ["None"], ["", "def", "get_accuracy", "(", "self", ",", "logits", ",", "labels", ")", ":", "\n", "        ", "scores", ",", "indices", "=", "torch", ".", "topk", "(", "logits", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "k", "=", "10", ")", "\n", "\n", "acc1", ",", "acc3", ",", "acc5", ",", "total", "=", "0", ",", "0", ",", "0", ",", "0", "\n", "for", "index", ",", "label", "in", "enumerate", "(", "labels", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ":", "\n", "            ", "label", "=", "set", "(", "np", ".", "nonzero", "(", "label", ")", "[", "0", "]", ")", "\n", "\n", "labels", "=", "indices", "[", "index", ",", ":", "5", "]", ".", "numpy", "(", ")", "\n", "\n", "acc1", "+=", "len", "(", "set", "(", "[", "labels", "[", "0", "]", "]", ")", "&", "label", ")", "\n", "acc3", "+=", "len", "(", "set", "(", "labels", "[", ":", "3", "]", ")", "&", "label", ")", "\n", "acc5", "+=", "len", "(", "set", "(", "labels", "[", ":", "5", "]", ")", "&", "label", ")", "\n", "total", "+=", "1", "\n", "\n", "", "return", "acc1", ",", "acc3", ",", "acc5", ",", "total", "\n", "\n"]], "home.repos.pwc.inspect_result.wq2581_gudn.None.util.Accuracy.reset_acc": [[60, 65], ["None"], "methods", ["None"], ["", "def", "reset_acc", "(", "self", ")", ":", "\n", "        ", "self", ".", "total", "=", "0", "\n", "self", ".", "acc1", "=", "0", "\n", "self", ".", "acc3", "=", "0", "\n", "self", ".", "acc5", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.wq2581_gudn.None.util.Accuracy.get_acc1": [[66, 68], ["None"], "methods", ["None"], ["", "def", "get_acc1", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "acc1", "/", "self", ".", "total", "\n", "\n"]], "home.repos.pwc.inspect_result.wq2581_gudn.None.util.Accuracy.get_acc3": [[69, 71], ["None"], "methods", ["None"], ["", "def", "get_acc3", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "acc3", "/", "self", ".", "total", "/", "3", "\n", "\n"]], "home.repos.pwc.inspect_result.wq2581_gudn.None.util.Accuracy.get_acc5": [[72, 74], ["None"], "methods", ["None"], ["", "def", "get_acc5", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "acc5", "/", "self", ".", "total", "/", "5", "\n", "\n"]], "home.repos.pwc.inspect_result.wq2581_gudn.None.util.Accuracy.get_total": [[75, 77], ["None"], "methods", ["None"], ["", "def", "get_total", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "total", "\n", "\n"]], "home.repos.pwc.inspect_result.wq2581_gudn.None.util.get_accuracy": [[80, 95], ["torch.topk", "enumerate", "logits.detach().cpu", "indices[].numpy.cpu().numpy", "set", "indices[].numpy", "len", "len", "len", "logits.detach", "indices[].numpy.cpu", "numpy.nonzero", "set", "set", "set"], "function", ["None"], ["", "", "def", "get_accuracy", "(", "logits", ",", "labels", ")", ":", "\n", "    ", "scores", ",", "indices", "=", "torch", ".", "topk", "(", "logits", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "k", "=", "10", ")", "\n", "\n", "acc1", ",", "acc3", ",", "acc5", ",", "total", "=", "0", ",", "0", ",", "0", ",", "0", "\n", "for", "index", ",", "label", "in", "enumerate", "(", "labels", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ":", "\n", "        ", "label", "=", "set", "(", "np", ".", "nonzero", "(", "label", ")", "[", "0", "]", ")", "\n", "\n", "labels", "=", "indices", "[", "index", ",", ":", "5", "]", ".", "numpy", "(", ")", "\n", "\n", "acc1", "+=", "len", "(", "set", "(", "[", "labels", "[", "0", "]", "]", ")", "&", "label", ")", "\n", "acc3", "+=", "len", "(", "set", "(", "labels", "[", ":", "3", "]", ")", "&", "label", ")", "\n", "acc5", "+=", "len", "(", "set", "(", "labels", "[", ":", "5", "]", ")", "&", "label", ")", "\n", "total", "+=", "1", "\n", "\n", "", "return", "acc1", ",", "acc3", ",", "acc5", ",", "total", "\n", "\n"]], "home.repos.pwc.inspect_result.wq2581_gudn.None.util.read_configuration": [[97, 114], ["yaml_loader.add_implicit_resolver", "re.compile", "list", "open", "yaml.load", "f.read"], "function", ["None"], ["", "def", "read_configuration", "(", "config_file", ")", ":", "\n", "    ", "yaml_loader", "=", "yaml", ".", "FullLoader", "\n", "yaml_loader", ".", "add_implicit_resolver", "(", "\n", "u'tag:yaml.org,2002:float'", ",", "\n", "re", ".", "compile", "(", "u'''^(?:\n                 [-+]?(?:[0-9][0-9_]*)\\\\.[0-9_]*(?:[eE][-+]?[0-9]+)?\n                |[-+]?(?:[0-9][0-9_]*)(?:[eE][-+]?[0-9]+)\n                |\\\\.[0-9_]+(?:[eE][-+][0-9]+)?\n                |[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+\\\\.[0-9_]*\n                |[-+]?\\\\.(?:inf|Inf|INF)\n                |\\\\.(?:nan|NaN|NAN))$'''", ",", "re", ".", "X", ")", ",", "\n", "list", "(", "u'-+0123456789.'", ")", ")", "\n", "\n", "with", "open", "(", "config_file", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "config_dict", "=", "yaml", ".", "load", "(", "f", ".", "read", "(", ")", ",", "Loader", "=", "yaml_loader", ")", "\n", "\n", "", "return", "config_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.wq2581_gudn.None.util.save": [[116, 133], ["model_to_save.save_pretrained", "tokenizer.save_pretrained", "print", "os.path.exists", "os.makedirs", "hasattr", "torch.save", "open", "mark_file.write", "os.path.join", "os.path.join", "hasattr", "model.module.state_dict"], "function", ["home.repos.pwc.inspect_result.wq2581_gudn.None.util.save"], ["", "def", "save", "(", "dataset", ",", "epoch_idx", ",", "mark", ",", "plm", ",", "tokenizer", ",", "*", "other_models", ")", ":", "\n", "    ", "save_dir", "=", "f\"./checkpoint/{dataset}/{epoch_idx}\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_dir", ")", "\n", "\n", "", "model_to_save", "=", "plm", ".", "module", "if", "hasattr", "(", "plm", ",", "'module'", ")", "else", "plm", "\n", "\n", "model_to_save", ".", "save_pretrained", "(", "save_dir", ")", "\n", "tokenizer", ".", "save_pretrained", "(", "save_dir", ")", "\n", "\n", "for", "model", "in", "other_models", ":", "\n", "        ", "torch", ".", "save", "(", "model", ".", "module", ".", "state_dict", "(", ")", "if", "hasattr", "(", "model", ",", "'module'", ")", "else", "model", ",", "os", ".", "path", ".", "join", "(", "save_dir", ",", "\"student_model_file.bin\"", ")", ")", "\n", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "\"mark.txt\"", ")", ",", "\"w\"", ",", "encoding", "=", "\"UTF-8\"", ")", "as", "mark_file", ":", "\n", "        ", "mark_file", ".", "write", "(", "mark", ")", "\n", "\n", "", "print", "(", "f\"save model to path {save_dir} success\"", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.wq2581_gudn.process.process_EURLex.clear_text": [[9, 12], ["text.replace().replace().replace().replace", "nlp.word_tokenize", "text.replace().replace().replace", "text.replace().replace", "text.replace"], "function", ["home.repos.pwc.inspect_result.wq2581_gudn.None.util.NLP.word_tokenize"], ["def", "clear_text", "(", "text", ":", "str", ")", ":", "\n", "    ", "result", "=", "text", ".", "replace", "(", "'\"'", ",", "\" \"", ")", ".", "replace", "(", "\"\\n\"", ",", "\" \"", ")", ".", "replace", "(", "\"'\"", ",", "\" \"", ")", ".", "replace", "(", "\"`\"", ",", "\" \"", ")", "\n", "return", "nlp", ".", "word_tokenize", "(", "result", ",", "lower", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wq2581_gudn.process.process_EURLex.build_label_dict": [[14, 20], ["open", "open", "pickle.dump", "file.read().splitlines", "enumerate", "file.read"], "function", ["None"], ["", "def", "build_label_dict", "(", ")", ":", "\n", "    ", "with", "open", "(", "\"../data/EURLex-4k/labels.txt\"", ",", "\"r\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "file", ":", "\n", "        ", "label_list", "=", "[", "data", "for", "data", "in", "file", ".", "read", "(", ")", ".", "splitlines", "(", ")", "]", "\n", "label_dict", "=", "{", "label", ":", "idx", "for", "idx", ",", "label", "in", "enumerate", "(", "label_list", ")", "}", "\n", "with", "open", "(", "\"../data/EURLex-4k/label_dict.pkl\"", ",", "\"wb\"", ")", "as", "pkl_file", ":", "\n", "            ", "pickle", ".", "dump", "(", "label_dict", ",", "pkl_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wq2581_gudn.process.process_EURLex.build_data_csv_2_json": [[22, 39], ["pandas.read_csv", "list", "zip", "dict", "process_EURLex.clear_text", "list.append", "open", "json.dump", "label.split"], "function", ["home.repos.pwc.inspect_result.wq2581_gudn.process.process_EURLex.clear_text"], ["", "", "", "def", "build_data_csv_2_json", "(", ")", ":", "\n", "    ", "file_name_list", "=", "[", "\"train.csv\"", ",", "\"test.csv\"", "]", "\n", "for", "file_name", "in", "file_name_list", ":", "\n", "        ", "csv_data", "=", "pandas", ".", "read_csv", "(", "f\"../data/EURLex-4k/{file_name}\"", ",", "header", "=", "0", ")", "\n", "text_list", "=", "csv_data", "[", "'text'", "]", "\n", "label_list", "=", "csv_data", "[", "'label'", "]", "\n", "\n", "data_list", "=", "list", "(", ")", "\n", "for", "text", ",", "label", "in", "zip", "(", "text_list", ",", "label_list", ")", ":", "\n", "            ", "temp_dict", "=", "dict", "(", ")", "\n", "temp_dict", "[", "\"text\"", "]", "=", "clear_text", "(", "text", ")", "\n", "temp_dict", "[", "\"label\"", "]", "=", "[", "data", "for", "data", "in", "label", ".", "split", "(", "\",\"", ")", "]", "\n", "\n", "data_list", ".", "append", "(", "temp_dict", ")", "\n", "\n", "", "with", "open", "(", "f\"../data/EURLex-4k/processed_{file_name[:-4]}.json\"", ",", "\"w\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "file", ":", "\n", "            ", "json", ".", "dump", "(", "data_list", ",", "file", ")", "\n", "\n"]]}