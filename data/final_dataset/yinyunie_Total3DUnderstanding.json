{"home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.None.demo.parse_detections": [[29, 36], ["bdb2D_pos.append", "size_cls.append", "configs.data_config.NYU40CLASSES.index"], "function", ["None"], ["def", "parse_detections", "(", "detections", ")", ":", "\n", "    ", "bdb2D_pos", "=", "[", "]", "\n", "size_cls", "=", "[", "]", "\n", "for", "det", "in", "detections", ":", "\n", "        ", "bdb2D_pos", ".", "append", "(", "det", "[", "'bbox'", "]", ")", "\n", "size_cls", ".", "append", "(", "NYU40CLASSES", ".", "index", "(", "det", "[", "'class'", "]", ")", ")", "\n", "", "return", "bdb2D_pos", ",", "size_cls", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.None.demo.get_g_features": [[37, 55], ["len", "torch.zeros", "torch.from_numpy().unsqueeze().float", "torch.exp", "torch.sin", "torch.cos", "torch.zeros.view", "len", "math.log", "math.log", "enumerate", "enumerate", "torch.from_numpy().unsqueeze", "torch.arange().float", "torch.from_numpy", "torch.arange", "math.log", "numpy.array"], "function", ["None"], ["", "def", "get_g_features", "(", "bdb2D_pos", ")", ":", "\n", "    ", "n_objects", "=", "len", "(", "bdb2D_pos", ")", "\n", "g_feature", "=", "[", "[", "(", "(", "loc2", "[", "0", "]", "+", "loc2", "[", "2", "]", ")", "/", "2.", "-", "(", "loc1", "[", "0", "]", "+", "loc1", "[", "2", "]", ")", "/", "2.", ")", "/", "(", "loc1", "[", "2", "]", "-", "loc1", "[", "0", "]", ")", ",", "\n", "(", "(", "loc2", "[", "1", "]", "+", "loc2", "[", "3", "]", ")", "/", "2.", "-", "(", "loc1", "[", "1", "]", "+", "loc1", "[", "3", "]", ")", "/", "2.", ")", "/", "(", "loc1", "[", "3", "]", "-", "loc1", "[", "1", "]", ")", ",", "\n", "math", ".", "log", "(", "(", "loc2", "[", "2", "]", "-", "loc2", "[", "0", "]", ")", "/", "(", "loc1", "[", "2", "]", "-", "loc1", "[", "0", "]", ")", ")", ",", "\n", "math", ".", "log", "(", "(", "loc2", "[", "3", "]", "-", "loc2", "[", "1", "]", ")", "/", "(", "loc1", "[", "3", "]", "-", "loc1", "[", "1", "]", ")", ")", "]", "for", "id1", ",", "loc1", "in", "enumerate", "(", "bdb2D_pos", ")", "\n", "for", "id2", ",", "loc2", "in", "enumerate", "(", "bdb2D_pos", ")", "]", "\n", "\n", "locs", "=", "[", "num", "for", "loc", "in", "g_feature", "for", "num", "in", "loc", "]", "\n", "\n", "pe", "=", "torch", ".", "zeros", "(", "len", "(", "locs", ")", ",", "d_model", ")", "\n", "position", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "locs", ")", ")", ".", "unsqueeze", "(", "1", ")", ".", "float", "(", ")", "\n", "div_term", "=", "torch", ".", "exp", "(", "torch", ".", "arange", "(", "0", ",", "d_model", ",", "2", ")", ".", "float", "(", ")", "*", "-", "(", "math", ".", "log", "(", "10000.", ")", "/", "d_model", ")", ")", "\n", "pe", "[", ":", ",", "0", ":", ":", "2", "]", "=", "torch", ".", "sin", "(", "position", "*", "div_term", ")", "\n", "pe", "[", ":", ",", "1", ":", ":", "2", "]", "=", "torch", ".", "cos", "(", "position", "*", "div_term", ")", "\n", "\n", "return", "pe", ".", "view", "(", "n_objects", "*", "n_objects", ",", "rel_cfg", ".", "d_g", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.None.demo.load_demo_data": [[56, 114], ["os.path.join", "os.path.exists", "os.path.join", "os.path.exists", "os.path.join", "PIL.Image.open().convert", "numpy.loadtxt", "dict", "demo.parse_detections", "demo.get_g_features", "torch.zeros", "torch.stack", "data_transforms", "dict", "numpy.array", "models.total3d.dataloader.collate_fn", "data[].to", "[].float().to", "[].to", "[].float().to", "[].float().to", "torch.cat", "torch.zeros().to", "[].float().to", "open", "json.load", "data[].to.crop", "data_transforms", "[].to.append", "PIL.Image.open", "len", "len", "[].float", "[].float", "[].float", "torch.tensor", "torch.cumsum", "torch.zeros", "[].float", "range", "torch.pow", "range", "len", "[].float().to.size", "[].float().to.size", "torch.argmax", "cls.item"], "function", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.None.demo.parse_detections", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.None.demo.get_g_features", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.total3d.dataloader.collate_fn", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.CheckpointIO.load"], ["", "def", "load_demo_data", "(", "demo_path", ",", "device", ")", ":", "\n", "    ", "img_path", "=", "os", ".", "path", ".", "join", "(", "demo_path", ",", "'img.jpg'", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "img_path", ")", "\n", "\n", "cam_K_path", "=", "os", ".", "path", ".", "join", "(", "demo_path", ",", "'cam_K.txt'", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "cam_K_path", ")", "\n", "\n", "detection_path", "=", "os", ".", "path", ".", "join", "(", "demo_path", ",", "'detections.json'", ")", "\n", "assert", "detection_path", "\n", "\n", "'''preprocess'''", "\n", "image", "=", "Image", ".", "open", "(", "img_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "cam_K", "=", "np", ".", "loadtxt", "(", "cam_K_path", ")", "\n", "with", "open", "(", "detection_path", ",", "'r'", ")", "as", "file", ":", "\n", "        ", "detections", "=", "json", ".", "load", "(", "file", ")", "\n", "", "boxes", "=", "dict", "(", ")", "\n", "\n", "bdb2D_pos", ",", "size_cls", "=", "parse_detections", "(", "detections", ")", "\n", "\n", "# obtain geometric features", "\n", "boxes", "[", "'g_feature'", "]", "=", "get_g_features", "(", "bdb2D_pos", ")", "\n", "\n", "# encode class", "\n", "cls_codes", "=", "torch", ".", "zeros", "(", "[", "len", "(", "size_cls", ")", ",", "len", "(", "NYU40CLASSES", ")", "]", ")", "\n", "cls_codes", "[", "range", "(", "len", "(", "size_cls", ")", ")", ",", "size_cls", "]", "=", "1", "\n", "boxes", "[", "'size_cls'", "]", "=", "cls_codes", "\n", "\n", "# get object images", "\n", "patch", "=", "[", "]", "\n", "for", "bdb", "in", "bdb2D_pos", ":", "\n", "        ", "img", "=", "image", ".", "crop", "(", "(", "bdb", "[", "0", "]", ",", "bdb", "[", "1", "]", ",", "bdb", "[", "2", "]", ",", "bdb", "[", "3", "]", ")", ")", "\n", "img", "=", "data_transforms", "(", "img", ")", "\n", "patch", ".", "append", "(", "img", ")", "\n", "", "boxes", "[", "'patch'", "]", "=", "torch", ".", "stack", "(", "patch", ")", "\n", "image", "=", "data_transforms", "(", "image", ")", "\n", "camera", "=", "dict", "(", ")", "\n", "camera", "[", "'K'", "]", "=", "cam_K", "\n", "boxes", "[", "'bdb2D_pos'", "]", "=", "np", ".", "array", "(", "bdb2D_pos", ")", "\n", "\n", "\"\"\"assemble data\"\"\"", "\n", "data", "=", "collate_fn", "(", "[", "{", "'image'", ":", "image", ",", "'boxes_batch'", ":", "boxes", ",", "'camera'", ":", "camera", "}", "]", ")", "\n", "image", "=", "data", "[", "'image'", "]", ".", "to", "(", "device", ")", "\n", "K", "=", "data", "[", "'camera'", "]", "[", "'K'", "]", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "patch", "=", "data", "[", "'boxes_batch'", "]", "[", "'patch'", "]", ".", "to", "(", "device", ")", "\n", "size_cls", "=", "data", "[", "'boxes_batch'", "]", "[", "'size_cls'", "]", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "g_features", "=", "data", "[", "'boxes_batch'", "]", "[", "'g_feature'", "]", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "split", "=", "data", "[", "'obj_split'", "]", "\n", "rel_pair_counts", "=", "torch", ".", "cat", "(", "[", "torch", ".", "tensor", "(", "[", "0", "]", ")", ",", "torch", ".", "cumsum", "(", "\n", "torch", ".", "pow", "(", "data", "[", "'obj_split'", "]", "[", ":", ",", "1", "]", "-", "data", "[", "'obj_split'", "]", "[", ":", ",", "0", "]", ",", "2", ")", ",", "0", ")", "]", ",", "0", ")", "\n", "cls_codes", "=", "torch", ".", "zeros", "(", "[", "size_cls", ".", "size", "(", "0", ")", ",", "9", "]", ")", ".", "to", "(", "device", ")", "\n", "cls_codes", "[", "range", "(", "size_cls", ".", "size", "(", "0", ")", ")", ",", "[", "NYU37_TO_PIX3D_CLS_MAPPING", "[", "cls", ".", "item", "(", ")", "]", "for", "cls", "in", "\n", "torch", ".", "argmax", "(", "size_cls", ",", "dim", "=", "1", ")", "]", "]", "=", "1", "\n", "bdb2D_pos", "=", "data", "[", "'boxes_batch'", "]", "[", "'bdb2D_pos'", "]", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "\n", "input_data", "=", "{", "'image'", ":", "image", ",", "'K'", ":", "K", ",", "'patch'", ":", "patch", ",", "'g_features'", ":", "g_features", ",", "\n", "'size_cls'", ":", "size_cls", ",", "'split'", ":", "split", ",", "'rel_pair_counts'", ":", "rel_pair_counts", ",", "\n", "'cls_codes'", ":", "cls_codes", ",", "'bdb2D_pos'", ":", "bdb2D_pos", "}", "\n", "return", "input_data", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.None.demo.run": [[115, 232], ["net_utils.utils.CheckpointIO", "configs.config_utils.mount_external_config", "configs.config_utils.mount_external_config.log_string", "configs.config_utils.mount_external_config.log_string", "net_utils.utils.load_device", "configs.config_utils.mount_external_config.log_string", "net_utils.utils.load_model", "net_utils.utils.CheckpointIO.register_modules", "configs.config_utils.mount_external_config.log_string", "net_utils.utils.CheckpointIO.parse_checkpoint", "configs.config_utils.mount_external_config.log_string", "configs.config_utils.mount_external_config.log_string", "demo.load_demo_data", "net_utils.utils.load_model.train", "print", "get_layout_bdb_sunrgbd", "get_rotation_matix_result", "torch.stack", "get_bdb_evaluation", "configs.config_utils.mount_external_config.config[].replace", "savemat", "[].cpu().tolist", "savemat", "savemat", "[].cpu().numpy", "[].cpu().numpy", "enumerate", "sio.loadmat", "format_bbox", "format_layout", "format_mesh", "numpy.array", "numpy.loadtxt", "Box", "Box.draw_projected_bdb3d", "Box.draw3D", "torch.no_grad", "time.time", "net_utils.utils.load_model.", "time.time", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "int", "os.path.exists", "os.makedirs", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "write_obj", "sio.loadmat", "os.path.join", "sio.loadmat", "glob", "PIL.Image.open().convert", "os.path.join", "[].cpu", "[].cpu", "[].cpu", "os.path.join", "os.path.join", "os.path.join", "lo_bdb3D_out[].cpu().numpy", "cam_R_out[].cpu().numpy", "PIL.Image.open", "os.path.join", "lo_bdb3D_out[].cpu", "cam_R_out[].cpu", "est_data[].transpose"], "function", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.config_utils.mount_external_config", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.config_utils.CONFIG.log_string", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.config_utils.CONFIG.log_string", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.load_device", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.config_utils.CONFIG.log_string", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.load_model", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.CheckpointIO.register_modules", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.config_utils.CONFIG.log_string", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.CheckpointIO.parse_checkpoint", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.config_utils.CONFIG.log_string", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.config_utils.CONFIG.log_string", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.None.demo.load_demo_data", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.None.train_epoch.train", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.libs.get_layout_bdb_sunrgbd", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.libs.get_rotation_matix_result", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.libs.get_bdb_evaluation", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.visualize.format_bbox", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.visualize.format_layout", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.visualize.format_mesh", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.visualize.Box.draw_projected_bdb3d", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.visualize.Box.draw3D", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.write_obj"], ["", "def", "run", "(", "cfg", ")", ":", "\n", "    ", "'''Begin to run network.'''", "\n", "checkpoint", "=", "CheckpointIO", "(", "cfg", ")", "\n", "\n", "'''Mount external config data'''", "\n", "cfg", "=", "mount_external_config", "(", "cfg", ")", "\n", "\n", "'''Load save path'''", "\n", "cfg", ".", "log_string", "(", "'Data save path: %s'", "%", "(", "cfg", ".", "save_path", ")", ")", "\n", "\n", "'''Load device'''", "\n", "cfg", ".", "log_string", "(", "'Loading device settings.'", ")", "\n", "device", "=", "load_device", "(", "cfg", ")", "\n", "\n", "'''Load net'''", "\n", "cfg", ".", "log_string", "(", "'Loading model.'", ")", "\n", "net", "=", "load_model", "(", "cfg", ",", "device", "=", "device", ")", "\n", "checkpoint", ".", "register_modules", "(", "net", "=", "net", ")", "\n", "cfg", ".", "log_string", "(", "net", ")", "\n", "\n", "'''Load existing checkpoint'''", "\n", "checkpoint", ".", "parse_checkpoint", "(", ")", "\n", "cfg", ".", "log_string", "(", "'-'", "*", "100", ")", "\n", "\n", "'''Load data'''", "\n", "cfg", ".", "log_string", "(", "'Loading data.'", ")", "\n", "data", "=", "load_demo_data", "(", "cfg", ".", "config", "[", "'demo_path'", "]", ",", "device", ")", "\n", "\n", "'''Run demo'''", "\n", "net", ".", "train", "(", "cfg", ".", "config", "[", "'mode'", "]", "==", "'train'", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "start", "=", "time", "(", ")", "\n", "est_data", "=", "net", "(", "data", ")", "\n", "end", "=", "time", "(", ")", "\n", "\n", "", "print", "(", "'Time elapsed: %s.'", "%", "(", "end", "-", "start", ")", ")", "\n", "\n", "'''write and visualize outputs'''", "\n", "from", "net_utils", ".", "libs", "import", "get_layout_bdb_sunrgbd", ",", "get_rotation_matix_result", ",", "get_bdb_evaluation", "\n", "from", "scipy", ".", "io", "import", "savemat", "\n", "from", "libs", ".", "tools", "import", "write_obj", "\n", "\n", "lo_bdb3D_out", "=", "get_layout_bdb_sunrgbd", "(", "cfg", ".", "bins_tensor", ",", "est_data", "[", "'lo_ori_reg_result'", "]", ",", "\n", "torch", ".", "argmax", "(", "est_data", "[", "'lo_ori_cls_result'", "]", ",", "1", ")", ",", "\n", "est_data", "[", "'lo_centroid_result'", "]", ",", "\n", "est_data", "[", "'lo_coeffs_result'", "]", ")", "\n", "# camera orientation for evaluation", "\n", "cam_R_out", "=", "get_rotation_matix_result", "(", "cfg", ".", "bins_tensor", ",", "\n", "torch", ".", "argmax", "(", "est_data", "[", "'pitch_cls_result'", "]", ",", "1", ")", ",", "est_data", "[", "'pitch_reg_result'", "]", ",", "\n", "torch", ".", "argmax", "(", "est_data", "[", "'roll_cls_result'", "]", ",", "1", ")", ",", "est_data", "[", "'roll_reg_result'", "]", ")", "\n", "\n", "# projected center", "\n", "P_result", "=", "torch", ".", "stack", "(", "(", "(", "data", "[", "'bdb2D_pos'", "]", "[", ":", ",", "0", "]", "+", "data", "[", "'bdb2D_pos'", "]", "[", ":", ",", "2", "]", ")", "/", "2", "-", "\n", "(", "data", "[", "'bdb2D_pos'", "]", "[", ":", ",", "2", "]", "-", "data", "[", "'bdb2D_pos'", "]", "[", ":", ",", "0", "]", ")", "*", "est_data", "[", "'offset_2D_result'", "]", "[", ":", ",", "0", "]", ",", "\n", "(", "data", "[", "'bdb2D_pos'", "]", "[", ":", ",", "1", "]", "+", "data", "[", "'bdb2D_pos'", "]", "[", ":", ",", "3", "]", ")", "/", "2", "-", "\n", "(", "data", "[", "'bdb2D_pos'", "]", "[", ":", ",", "3", "]", "-", "data", "[", "'bdb2D_pos'", "]", "[", ":", ",", "1", "]", ")", "*", "est_data", "[", "'offset_2D_result'", "]", "[", ":", ",", "1", "]", ")", ",", "1", ")", "\n", "\n", "bdb3D_out_form_cpu", ",", "bdb3D_out", "=", "get_bdb_evaluation", "(", "cfg", ".", "bins_tensor", ",", "\n", "torch", ".", "argmax", "(", "est_data", "[", "'ori_cls_result'", "]", ",", "1", ")", ",", "\n", "est_data", "[", "'ori_reg_result'", "]", ",", "\n", "torch", ".", "argmax", "(", "est_data", "[", "'centroid_cls_result'", "]", ",", "1", ")", ",", "\n", "est_data", "[", "'centroid_reg_result'", "]", ",", "\n", "data", "[", "'size_cls'", "]", ",", "est_data", "[", "'size_reg_result'", "]", ",", "P_result", ",", "\n", "data", "[", "'K'", "]", ",", "cam_R_out", ",", "data", "[", "'split'", "]", ",", "return_bdb", "=", "True", ")", "\n", "\n", "# save results", "\n", "nyu40class_ids", "=", "[", "int", "(", "evaluate_bdb", "[", "'classid'", "]", ")", "for", "evaluate_bdb", "in", "bdb3D_out_form_cpu", "]", "\n", "save_path", "=", "cfg", ".", "config", "[", "'demo_path'", "]", ".", "replace", "(", "'inputs'", ",", "'outputs'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_path", ")", "\n", "# save layout", "\n", "", "savemat", "(", "os", ".", "path", ".", "join", "(", "save_path", ",", "'layout.mat'", ")", ",", "\n", "mdict", "=", "{", "'layout'", ":", "lo_bdb3D_out", "[", "0", ",", ":", ",", ":", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "}", ")", "\n", "# save bounding boxes and camera poses", "\n", "interval", "=", "data", "[", "'split'", "]", "[", "0", "]", ".", "cpu", "(", ")", ".", "tolist", "(", ")", "\n", "current_cls", "=", "nyu40class_ids", "[", "interval", "[", "0", "]", ":", "interval", "[", "1", "]", "]", "\n", "\n", "savemat", "(", "os", ".", "path", ".", "join", "(", "save_path", ",", "'bdb_3d.mat'", ")", ",", "\n", "mdict", "=", "{", "'bdb'", ":", "bdb3D_out_form_cpu", "[", "interval", "[", "0", "]", ":", "interval", "[", "1", "]", "]", ",", "'class_id'", ":", "current_cls", "}", ")", "\n", "savemat", "(", "os", ".", "path", ".", "join", "(", "save_path", ",", "'r_ex.mat'", ")", ",", "\n", "mdict", "=", "{", "'cam_R'", ":", "cam_R_out", "[", "0", ",", ":", ",", ":", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "}", ")", "\n", "# save meshes", "\n", "current_faces", "=", "est_data", "[", "'out_faces'", "]", "[", "interval", "[", "0", "]", ":", "interval", "[", "1", "]", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "current_coordinates", "=", "est_data", "[", "'meshes'", "]", ".", "transpose", "(", "1", ",", "2", ")", "[", "interval", "[", "0", "]", ":", "interval", "[", "1", "]", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "for", "obj_id", ",", "obj_cls", "in", "enumerate", "(", "current_cls", ")", ":", "\n", "        ", "file_path", "=", "os", ".", "path", ".", "join", "(", "save_path", ",", "'%s_%s.obj'", "%", "(", "obj_id", ",", "obj_cls", ")", ")", "\n", "\n", "mesh_obj", "=", "{", "'v'", ":", "current_coordinates", "[", "obj_id", "]", ",", "\n", "'f'", ":", "current_faces", "[", "obj_id", "]", "}", "\n", "\n", "write_obj", "(", "file_path", ",", "mesh_obj", ")", "\n", "\n", "#########################################################################", "\n", "#", "\n", "#   Visualization", "\n", "#", "\n", "#########################################################################", "\n", "", "import", "scipy", ".", "io", "as", "sio", "\n", "from", "utils", ".", "visualize", "import", "format_bbox", ",", "format_layout", ",", "format_mesh", ",", "Box", "\n", "from", "glob", "import", "glob", "\n", "\n", "pre_layout_data", "=", "sio", ".", "loadmat", "(", "os", ".", "path", ".", "join", "(", "save_path", ",", "'layout.mat'", ")", ")", "[", "'layout'", "]", "\n", "pre_box_data", "=", "sio", ".", "loadmat", "(", "os", ".", "path", ".", "join", "(", "save_path", ",", "'bdb_3d.mat'", ")", ")", "\n", "\n", "pre_boxes", "=", "format_bbox", "(", "pre_box_data", ",", "'prediction'", ")", "\n", "pre_layout", "=", "format_layout", "(", "pre_layout_data", ")", "\n", "pre_cam_R", "=", "sio", ".", "loadmat", "(", "os", ".", "path", ".", "join", "(", "save_path", ",", "'r_ex.mat'", ")", ")", "[", "'cam_R'", "]", "\n", "\n", "vtk_objects", ",", "pre_boxes", "=", "format_mesh", "(", "glob", "(", "os", ".", "path", ".", "join", "(", "save_path", ",", "'*.obj'", ")", ")", ",", "pre_boxes", ")", "\n", "\n", "image", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "cfg", ".", "config", "[", "'demo_path'", "]", ",", "'img.jpg'", ")", ")", ".", "convert", "(", "'RGB'", ")", ")", "\n", "cam_K", "=", "np", ".", "loadtxt", "(", "os", ".", "path", ".", "join", "(", "cfg", ".", "config", "[", "'demo_path'", "]", ",", "'cam_K.txt'", ")", ")", "\n", "\n", "scene_box", "=", "Box", "(", "image", ",", "None", ",", "cam_K", ",", "None", ",", "pre_cam_R", ",", "None", ",", "pre_layout", ",", "None", ",", "pre_boxes", ",", "'prediction'", ",", "output_mesh", "=", "vtk_objects", ")", "\n", "scene_box", ".", "draw_projected_bdb3d", "(", "'prediction'", ",", "if_save", "=", "True", ",", "save_path", "=", "'%s/3dbbox.png'", "%", "(", "save_path", ")", ")", "\n", "scene_box", ".", "draw3D", "(", "if_save", "=", "True", ",", "save_path", "=", "'%s/recon.png'", "%", "(", "save_path", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.None.main.parse_args": [[8, 16], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.visualize.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "'''PARAMETERS'''", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "'Total 3D Understanding.'", ")", "\n", "parser", ".", "add_argument", "(", "'config'", ",", "type", "=", "str", ",", "default", "=", "'configs/total3d.yaml'", ",", "\n", "help", "=", "'configure file for training or testing.'", ")", "\n", "parser", ".", "add_argument", "(", "'--mode'", ",", "type", "=", "str", ",", "default", "=", "'train'", ",", "help", "=", "'train, test or demo.'", ")", "\n", "parser", ".", "add_argument", "(", "'--demo_path'", ",", "type", "=", "str", ",", "default", "=", "'demo/inputs/1'", ",", "help", "=", "'Please specify the demo path.'", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.None.train_epoch.train_epoch": [[8, 49], ["net_utils.utils.LossRecorder", "trainer.net.train", "trainer.net.set_mode", "cfg.log_string", "cfg.log_string", "cfg.log_string", "enumerate", "cfg.log_string", "net_utils.utils.LossRecorder.loss_recorder.items", "cfg.log_string", "net_utils.utils.LossRecorder.update_loss", "cfg.log_string", "trainer.train_step", "trainer.eval_step", "trainer.visualize_step", "cfg.log_string", "len", "str"], "function", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.None.train_epoch.train", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.models.network.BaseNetwork.set_mode", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.config_utils.CONFIG.log_string", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.config_utils.CONFIG.log_string", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.config_utils.CONFIG.log_string", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.config_utils.CONFIG.log_string", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.config_utils.CONFIG.log_string", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.LossRecorder.update_loss", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.config_utils.CONFIG.log_string", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.models.training.BaseTrainer.train_step", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.total3d.training.Trainer.eval_step", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.total3d.training.Trainer.visualize_step", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.config_utils.CONFIG.log_string"], ["def", "train_epoch", "(", "cfg", ",", "epoch", ",", "trainer", ",", "dataloaders", ")", ":", "\n", "    ", "'''\n    train by epoch\n    :param cfg: configuration file\n    :param epoch: epoch id.\n    :param trainer: specific trainer for networks\n    :param dataloaders: dataloader for training and validation\n    :return:\n    '''", "\n", "for", "phase", "in", "[", "'train'", ",", "'test'", "]", ":", "\n", "        ", "dataloader", "=", "dataloaders", "[", "phase", "]", "\n", "batch_size", "=", "cfg", ".", "config", "[", "phase", "]", "[", "'batch_size'", "]", "\n", "loss_recorder", "=", "LossRecorder", "(", "batch_size", ")", "\n", "# set mode", "\n", "trainer", ".", "net", ".", "train", "(", "phase", "==", "'train'", ")", "\n", "# set subnet mode", "\n", "trainer", ".", "net", ".", "set_mode", "(", ")", "\n", "cfg", ".", "log_string", "(", "'-'", "*", "100", ")", "\n", "cfg", ".", "log_string", "(", "'Switch Phase to %s.'", "%", "(", "phase", ")", ")", "\n", "cfg", ".", "log_string", "(", "'-'", "*", "100", ")", "\n", "for", "iter", ",", "data", "in", "enumerate", "(", "dataloader", ")", ":", "\n", "            ", "if", "phase", "==", "'train'", ":", "\n", "                ", "loss", "=", "trainer", ".", "train_step", "(", "data", ")", "\n", "", "else", ":", "\n", "                ", "loss", "=", "trainer", ".", "eval_step", "(", "data", ")", "\n", "\n", "# visualize intermediate results.", "\n", "", "if", "(", "(", "iter", "+", "1", ")", "%", "cfg", ".", "config", "[", "'log'", "]", "[", "'vis_step'", "]", ")", "==", "0", ":", "\n", "                ", "trainer", ".", "visualize_step", "(", "epoch", ",", "phase", ",", "iter", ",", "data", ")", "\n", "\n", "", "loss_recorder", ".", "update_loss", "(", "loss", ")", "\n", "\n", "if", "(", "(", "iter", "+", "1", ")", "%", "cfg", ".", "config", "[", "'log'", "]", "[", "'print_step'", "]", ")", "==", "0", ":", "\n", "                ", "cfg", ".", "log_string", "(", "'Process: Phase: %s. Epoch %d: %d/%d. Current loss: %s.'", "%", "(", "phase", ",", "epoch", ",", "iter", "+", "1", ",", "len", "(", "dataloader", ")", ",", "str", "(", "loss", ")", ")", ")", "\n", "\n", "", "", "cfg", ".", "log_string", "(", "'='", "*", "100", ")", "\n", "for", "loss_name", ",", "loss_value", "in", "loss_recorder", ".", "loss_recorder", ".", "items", "(", ")", ":", "\n", "            ", "cfg", ".", "log_string", "(", "'Currently the last %s loss (%s) is: %f'", "%", "(", "phase", ",", "loss_name", ",", "loss_value", ".", "avg", ")", ")", "\n", "", "cfg", ".", "log_string", "(", "'='", "*", "100", ")", "\n", "\n", "", "return", "loss_recorder", ".", "loss_recorder", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.None.train_epoch.train": [[50, 89], ["checkpoint.get", "range", "cfg.log_string", "cfg.log_string", "trainer.show_lr", "time.time", "train_epoch.train_epoch", "trainer.eval_loss_parser", "scheduler.step", "cfg.log_string", "checkpoint.register_modules", "checkpoint.save", "cfg.log_string", "checkpoint.save", "cfg.log_string", "cfg.log_string", "train_epoch.items", "cfg.log_string", "cfg.log_string", "time.time"], "function", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.CheckpointIO.get", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.config_utils.CONFIG.log_string", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.config_utils.CONFIG.log_string", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.models.training.BaseTrainer.show_lr", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.None.train_epoch.train_epoch", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.models.training.BaseTrainer.eval_loss_parser", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.config_utils.CONFIG.log_string", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.CheckpointIO.register_modules", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.CheckpointIO.save", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.config_utils.CONFIG.log_string", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.CheckpointIO.save", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.config_utils.CONFIG.log_string", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.config_utils.CONFIG.log_string", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.config_utils.CONFIG.log_string", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.config_utils.CONFIG.log_string"], ["", "def", "train", "(", "cfg", ",", "trainer", ",", "scheduler", ",", "checkpoint", ",", "train_loader", ",", "test_loader", ")", ":", "\n", "    ", "'''\n    train epochs for network\n    :param cfg: configuration file\n    :param scheduler: scheduler for optimizer\n    :param trainer: specific trainer for networks\n    :param checkpoint: network weights.\n    :param train_loader: dataloader for training\n    :param test_loader: dataloader for testing\n    :return:\n    '''", "\n", "start_epoch", "=", "scheduler", ".", "last_epoch", "\n", "total_epochs", "=", "cfg", ".", "config", "[", "'train'", "]", "[", "'epochs'", "]", "\n", "min_eval_loss", "=", "checkpoint", ".", "get", "(", "'min_loss'", ")", "\n", "\n", "dataloaders", "=", "{", "'train'", ":", "train_loader", ",", "'test'", ":", "test_loader", "}", "\n", "\n", "for", "epoch", "in", "range", "(", "start_epoch", ",", "total_epochs", ")", ":", "\n", "        ", "cfg", ".", "log_string", "(", "'-'", "*", "100", ")", "\n", "cfg", ".", "log_string", "(", "'Epoch (%d/%s):'", "%", "(", "epoch", "+", "1", ",", "total_epochs", ")", ")", "\n", "trainer", ".", "show_lr", "(", ")", "\n", "start", "=", "time", "(", ")", "\n", "eval_loss_recorder", "=", "train_epoch", "(", "cfg", ",", "epoch", "+", "1", ",", "trainer", ",", "dataloaders", ")", "\n", "eval_loss", "=", "trainer", ".", "eval_loss_parser", "(", "eval_loss_recorder", ")", "\n", "scheduler", ".", "step", "(", "eval_loss", ")", "\n", "cfg", ".", "log_string", "(", "'Epoch (%d/%s) Time elapsed: (%f).'", "%", "(", "epoch", "+", "1", ",", "total_epochs", ",", "time", "(", ")", "-", "start", ")", ")", "\n", "\n", "# save checkpoint", "\n", "checkpoint", ".", "register_modules", "(", "epoch", "=", "epoch", ",", "min_loss", "=", "eval_loss", ")", "\n", "checkpoint", ".", "save", "(", "'last'", ")", "\n", "cfg", ".", "log_string", "(", "'Saved the latest checkpoint.'", ")", "\n", "if", "epoch", "==", "-", "1", "or", "eval_loss", "<", "min_eval_loss", ":", "\n", "            ", "checkpoint", ".", "save", "(", "'best'", ")", "\n", "min_eval_loss", "=", "eval_loss", "\n", "cfg", ".", "log_string", "(", "'Saved the best checkpoint.'", ")", "\n", "cfg", ".", "log_string", "(", "'='", "*", "100", ")", "\n", "for", "loss_name", ",", "loss_value", "in", "eval_loss_recorder", ".", "items", "(", ")", ":", "\n", "                ", "cfg", ".", "log_string", "(", "'Currently the best test loss (%s) is: %f'", "%", "(", "loss_name", ",", "loss_value", ".", "avg", ")", ")", "\n", "", "cfg", ".", "log_string", "(", "'='", "*", "100", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.None.test_epoch.test_func": [[9, 33], ["net_utils.utils.LossRecorder", "cfg.log_string", "enumerate", "tester.test_step", "tester.visualize_step", "net_utils.utils.LossRecorder.update_loss", "cfg.log_string", "len", "str"], "function", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.config_utils.CONFIG.log_string", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.total3d.testing.Tester.test_step", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.total3d.training.Trainer.visualize_step", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.LossRecorder.update_loss", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.config_utils.CONFIG.log_string"], ["def", "test_func", "(", "cfg", ",", "tester", ",", "test_loader", ")", ":", "\n", "    ", "'''\n    test function.\n    :param cfg: configuration file\n    :param tester: specific tester for networks\n    :param test_loader: dataloader for testing\n    :return:\n    '''", "\n", "batch_size", "=", "cfg", ".", "config", "[", "cfg", ".", "config", "[", "'mode'", "]", "]", "[", "'batch_size'", "]", "\n", "loss_recorder", "=", "LossRecorder", "(", "batch_size", ")", "\n", "cfg", ".", "log_string", "(", "'-'", "*", "100", ")", "\n", "for", "iter", ",", "data", "in", "enumerate", "(", "test_loader", ")", ":", "\n", "        ", "loss", "=", "tester", ".", "test_step", "(", "data", ")", "\n", "\n", "# visualize intermediate results.", "\n", "tester", ".", "visualize_step", "(", "0", ",", "cfg", ".", "config", "[", "'mode'", "]", ",", "iter", ",", "data", ")", "\n", "\n", "loss_recorder", ".", "update_loss", "(", "loss", ")", "\n", "\n", "if", "(", "(", "iter", "+", "1", ")", "%", "cfg", ".", "config", "[", "'log'", "]", "[", "'print_step'", "]", ")", "==", "0", ":", "\n", "            ", "cfg", ".", "log_string", "(", "'Process: Phase: %s. Epoch %d: %d/%d. Current loss: %s.'", "%", "(", "\n", "cfg", ".", "config", "[", "'mode'", "]", ",", "0", ",", "iter", "+", "1", ",", "len", "(", "test_loader", ")", ",", "str", "(", "loss", ")", ")", ")", "\n", "\n", "", "", "return", "loss_recorder", ".", "loss_recorder", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.None.test_epoch.test": [[34, 51], ["cfg.log_string", "tester.net.train", "time.time", "cfg.log_string", "test_func.items", "torch.no_grad", "test_epoch.test_func", "cfg.log_string", "time.time"], "function", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.config_utils.CONFIG.log_string", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.None.train_epoch.train", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.config_utils.CONFIG.log_string", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.None.test_epoch.test_func", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.config_utils.CONFIG.log_string"], ["", "def", "test", "(", "cfg", ",", "tester", ",", "test_loader", ")", ":", "\n", "    ", "'''\n    train epochs for network\n    :param cfg: configuration file\n    :param tester: specific tester for networks\n    :param test_loader: dataloader for testing\n    :return:\n    '''", "\n", "cfg", ".", "log_string", "(", "'-'", "*", "100", ")", "\n", "# set mode", "\n", "tester", ".", "net", ".", "train", "(", "cfg", ".", "config", "[", "'mode'", "]", "==", "'train'", ")", "\n", "start", "=", "time", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "test_loss_recoder", "=", "test_func", "(", "cfg", ",", "tester", ",", "test_loader", ")", "\n", "", "cfg", ".", "log_string", "(", "'Test time elapsed: (%f).'", "%", "(", "time", "(", ")", "-", "start", ")", ")", "\n", "for", "key", ",", "test_loss", "in", "test_loss_recoder", ".", "items", "(", ")", ":", "\n", "        ", "cfg", ".", "log_string", "(", "'Test loss (%s): %f'", "%", "(", "key", ",", "test_loss", ".", "avg", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.None.train.run": [[10, 59], ["net_utils.utils.CheckpointIO", "configs.config_utils.mount_external_config", "configs.config_utils.mount_external_config.log_string", "configs.config_utils.mount_external_config.log_string", "net_utils.utils.load_device", "configs.config_utils.mount_external_config.log_string", "net_utils.utils.load_dataloader", "net_utils.utils.load_dataloader", "configs.config_utils.mount_external_config.log_string", "net_utils.utils.load_model", "net_utils.utils.CheckpointIO.register_modules", "configs.config_utils.mount_external_config.log_string", "configs.config_utils.mount_external_config.log_string", "models.optimizers.load_optimizer", "net_utils.utils.CheckpointIO.register_modules", "configs.config_utils.mount_external_config.log_string", "models.optimizers.load_scheduler", "net_utils.utils.CheckpointIO.register_modules", "net_utils.utils.CheckpointIO.parse_checkpoint", "configs.config_utils.mount_external_config.log_string", "net_utils.utils.load_trainer", "configs.config_utils.mount_external_config.log_string", "configs.config_utils.mount_external_config.log_string", "train_epoch.train", "configs.config_utils.mount_external_config.log_string", "sum", "p.numel", "net_utils.utils.load_model.parameters"], "function", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.config_utils.mount_external_config", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.config_utils.CONFIG.log_string", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.config_utils.CONFIG.log_string", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.load_device", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.config_utils.CONFIG.log_string", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.load_dataloader", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.load_dataloader", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.config_utils.CONFIG.log_string", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.load_model", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.CheckpointIO.register_modules", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.config_utils.CONFIG.log_string", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.config_utils.CONFIG.log_string", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.models.optimizers.load_optimizer", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.CheckpointIO.register_modules", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.config_utils.CONFIG.log_string", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.models.optimizers.load_scheduler", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.CheckpointIO.register_modules", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.CheckpointIO.parse_checkpoint", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.config_utils.CONFIG.log_string", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.load_trainer", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.config_utils.CONFIG.log_string", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.config_utils.CONFIG.log_string", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.None.train_epoch.train", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.config_utils.CONFIG.log_string"], ["def", "run", "(", "cfg", ")", ":", "\n", "    ", "'''Begin to run network.'''", "\n", "checkpoint", "=", "CheckpointIO", "(", "cfg", ")", "\n", "\n", "'''Mount external config data'''", "\n", "cfg", "=", "mount_external_config", "(", "cfg", ")", "\n", "\n", "'''Load save path'''", "\n", "cfg", ".", "log_string", "(", "'Data save path: %s'", "%", "(", "cfg", ".", "save_path", ")", ")", "\n", "\n", "'''Load device'''", "\n", "cfg", ".", "log_string", "(", "'Loading device settings.'", ")", "\n", "device", "=", "load_device", "(", "cfg", ")", "\n", "\n", "'''Load data'''", "\n", "cfg", ".", "log_string", "(", "'Loading dataset.'", ")", "\n", "train_loader", "=", "load_dataloader", "(", "cfg", ".", "config", ",", "mode", "=", "'train'", ")", "\n", "test_loader", "=", "load_dataloader", "(", "cfg", ".", "config", ",", "mode", "=", "'test'", ")", "\n", "\n", "'''Load net'''", "\n", "cfg", ".", "log_string", "(", "'Loading model.'", ")", "\n", "net", "=", "load_model", "(", "cfg", ",", "device", "=", "device", ")", "\n", "checkpoint", ".", "register_modules", "(", "net", "=", "net", ")", "\n", "cfg", ".", "log_string", "(", "net", ")", "\n", "\n", "'''Load optimizer'''", "\n", "cfg", ".", "log_string", "(", "'Loading optimizer.'", ")", "\n", "optimizer", "=", "load_optimizer", "(", "config", "=", "cfg", ".", "config", ",", "net", "=", "net", ")", "\n", "checkpoint", ".", "register_modules", "(", "optimizer", "=", "optimizer", ")", "\n", "\n", "'''Load scheduler'''", "\n", "cfg", ".", "log_string", "(", "'Loading optimizer scheduler.'", ")", "\n", "scheduler", "=", "load_scheduler", "(", "config", "=", "cfg", ".", "config", ",", "optimizer", "=", "optimizer", ")", "\n", "checkpoint", ".", "register_modules", "(", "scheduler", "=", "scheduler", ")", "\n", "\n", "'''Check existing checkpoint (resume or finetune)'''", "\n", "checkpoint", ".", "parse_checkpoint", "(", ")", "\n", "\n", "'''Load trainer'''", "\n", "cfg", ".", "log_string", "(", "'Loading trainer.'", ")", "\n", "trainer", "=", "load_trainer", "(", "cfg", "=", "cfg", ",", "net", "=", "net", ",", "optimizer", "=", "optimizer", ",", "device", "=", "device", ")", "\n", "\n", "'''Start to train'''", "\n", "cfg", ".", "log_string", "(", "'Start to train.'", ")", "\n", "cfg", ".", "log_string", "(", "'Total number of parameters in {0:s}: {1:d}.'", ".", "format", "(", "cfg", ".", "config", "[", "'method'", "]", ",", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "net", ".", "parameters", "(", ")", ")", ")", ")", "\n", "\n", "train", "(", "cfg", "=", "cfg", ",", "trainer", "=", "trainer", ",", "scheduler", "=", "scheduler", ",", "checkpoint", "=", "checkpoint", ",", "train_loader", "=", "train_loader", ",", "test_loader", "=", "test_loader", ")", "\n", "\n", "cfg", ".", "log_string", "(", "'Training finished.'", ")", "", "", ""]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.None.test.run": [[9, 48], ["net_utils.utils.CheckpointIO", "configs.config_utils.mount_external_config", "configs.config_utils.mount_external_config.log_string", "configs.config_utils.mount_external_config.log_string", "net_utils.utils.load_device", "configs.config_utils.mount_external_config.log_string", "net_utils.utils.load_dataloader", "configs.config_utils.mount_external_config.log_string", "net_utils.utils.load_model", "net_utils.utils.CheckpointIO.register_modules", "configs.config_utils.mount_external_config.log_string", "net_utils.utils.CheckpointIO.parse_checkpoint", "configs.config_utils.mount_external_config.log_string", "net_utils.utils.load_tester", "configs.config_utils.mount_external_config.log_string", "configs.config_utils.mount_external_config.log_string", "test_epoch.test", "configs.config_utils.mount_external_config.write_config", "configs.config_utils.mount_external_config.log_string", "sum", "p.numel", "net_utils.utils.load_model.parameters"], "function", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.config_utils.mount_external_config", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.config_utils.CONFIG.log_string", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.config_utils.CONFIG.log_string", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.load_device", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.config_utils.CONFIG.log_string", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.load_dataloader", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.config_utils.CONFIG.log_string", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.load_model", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.CheckpointIO.register_modules", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.config_utils.CONFIG.log_string", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.CheckpointIO.parse_checkpoint", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.config_utils.CONFIG.log_string", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.load_tester", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.config_utils.CONFIG.log_string", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.config_utils.CONFIG.log_string", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.None.test_epoch.test", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.config_utils.CONFIG.write_config", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.config_utils.CONFIG.log_string"], ["def", "run", "(", "cfg", ")", ":", "\n", "    ", "'''Begin to run network.'''", "\n", "checkpoint", "=", "CheckpointIO", "(", "cfg", ")", "\n", "\n", "'''Mount external config data'''", "\n", "cfg", "=", "mount_external_config", "(", "cfg", ")", "\n", "\n", "'''Load save path'''", "\n", "cfg", ".", "log_string", "(", "'Data save path: %s'", "%", "(", "cfg", ".", "save_path", ")", ")", "\n", "\n", "'''Load device'''", "\n", "cfg", ".", "log_string", "(", "'Loading device settings.'", ")", "\n", "device", "=", "load_device", "(", "cfg", ")", "\n", "\n", "'''Load data'''", "\n", "cfg", ".", "log_string", "(", "'Loading dataset.'", ")", "\n", "test_loader", "=", "load_dataloader", "(", "cfg", ".", "config", ",", "mode", "=", "'test'", ")", "\n", "\n", "'''Load net'''", "\n", "cfg", ".", "log_string", "(", "'Loading model.'", ")", "\n", "net", "=", "load_model", "(", "cfg", ",", "device", "=", "device", ")", "\n", "checkpoint", ".", "register_modules", "(", "net", "=", "net", ")", "\n", "cfg", ".", "log_string", "(", "net", ")", "\n", "\n", "'''Load existing checkpoint'''", "\n", "checkpoint", ".", "parse_checkpoint", "(", ")", "\n", "\n", "'''Load tester'''", "\n", "cfg", ".", "log_string", "(", "'Loading tester.'", ")", "\n", "tester", "=", "load_tester", "(", "cfg", "=", "cfg", ",", "net", "=", "net", ",", "device", "=", "device", ")", "\n", "\n", "'''Start to test'''", "\n", "cfg", ".", "log_string", "(", "'Start to test.'", ")", "\n", "cfg", ".", "log_string", "(", "'Total number of parameters in {0:s}: {1:d}.'", ".", "format", "(", "cfg", ".", "config", "[", "'method'", "]", ",", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "net", ".", "parameters", "(", ")", ")", ")", ")", "\n", "\n", "test", "(", "cfg", "=", "cfg", ",", "tester", "=", "tester", ",", "test_loader", "=", "test_loader", ")", "\n", "\n", "cfg", ".", "write_config", "(", ")", "\n", "cfg", ".", "log_string", "(", "'Testing finished.'", ")", "", "", ""]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.vis_tools_sunrgbd.Scene3D_SUNRGBD.__init__": [[31, 58], ["numpy.array", "utils.sunrgbd_utils.get_inst_map", "utils.sunrgbd_utils.cvt_R_ex_to_cam_R", "utils.sunrgbd_utils.get_world_R", "utils.sunrgbd_utils.process_layout", "numpy.diag().dot", "utils.sunrgbd_utils.get_layout_info", "utils.sunrgbd_utils.process_bdb2d", "utils.sunrgbd_utils.process_bdb3d", "utils.sunrgbd_utils.transform_to_world", "PIL.Image.open", "utils.sunrgbd_utils.check_bdb2d", "numpy.diag"], "methods", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_utils.get_inst_map", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_utils.cvt_R_ex_to_cam_R", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.get_world_R", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_utils.process_layout", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.dot", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_utils.get_layout_info", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_utils.process_bdb2d", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_utils.process_bdb3d", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_utils.transform_to_world", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_utils.check_bdb2d"], ["def", "__init__", "(", "self", ",", "sequence", ")", ":", "\n", "        ", "self", ".", "__cam_K", "=", "sequence", ".", "K", "\n", "self", ".", "__img_map", "=", "sequence", ".", "imgrgb", "\n", "self", ".", "__cls_map", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "sequence", ".", "semantic_seg2d", ")", ")", "\n", "self", ".", "__inst_map", ",", "self", ".", "__inst_classes", "=", "get_inst_map", "(", "sequence", ".", "seg2d", ",", "self", ".", "cls_map", ")", "\n", "# self.__inst_classes = get_NYU37_class_id(inst_names)", "\n", "# self.__cls_map = cvt2nyu37class_map(self.__inst_map, self.__inst_classes)", "\n", "self", ".", "__depth_map", "=", "sequence", ".", "imgdepth", "\n", "\n", "cam_R", "=", "cvt_R_ex_to_cam_R", "(", "sequence", ".", "R_ex", ")", "\n", "\n", "# define a world system", "\n", "world_R", "=", "get_world_R", "(", "cam_R", ")", "\n", "\n", "layout", "=", "process_layout", "(", "sequence", ".", "manhattan_layout", ")", "\n", "centroid", "=", "layout", "[", "'centroid'", "]", "\n", "vectors", "=", "np", ".", "diag", "(", "layout", "[", "'coeffs'", "]", ")", ".", "dot", "(", "layout", "[", "'basis'", "]", ")", "\n", "# Set all points relative to layout orientation. (i.e. let layout orientation to be the world system.)", "\n", "# The forward direction (x-axis) of layout orientation should point toward camera forward direction.", "\n", "layout_3D", "=", "get_layout_info", "(", "{", "'centroid'", ":", "centroid", ",", "'vectors'", ":", "vectors", "}", ",", "cam_R", "[", ":", ",", "0", "]", ")", "\n", "\n", "self", ".", "__bdb2d", "=", "process_bdb2d", "(", "check_bdb2d", "(", "sequence", ".", "bdb2d", ",", "sequence", ".", "imgrgb", ".", "shape", ")", ",", "sequence", ".", "imgrgb", ".", "shape", ")", "\n", "\n", "bdb3ds_ws", "=", "process_bdb3d", "(", "sequence", ".", "bdb3d", ")", "\n", "\n", "# transform everything to world system", "\n", "self", ".", "__layout", ",", "self", ".", "__bdb3d", ",", "self", ".", "__cam_R", "=", "transform_to_world", "(", "layout_3D", ",", "bdb3ds_ws", ",", "cam_R", ",", "world_R", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.vis_tools_sunrgbd.Scene3D_SUNRGBD.inst_map": [[62, 65], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "inst_map", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__inst_map", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.vis_tools_sunrgbd.Scene3D_SUNRGBD.cls_map": [[66, 69], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "cls_map", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__cls_map", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.vis_tools_sunrgbd.Scene3D_SUNRGBD.img_map": [[70, 73], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "img_map", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__img_map", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.vis_tools_sunrgbd.Scene3D_SUNRGBD.depth_map": [[74, 77], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "depth_map", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__depth_map", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.vis_tools_sunrgbd.Scene3D_SUNRGBD.cam_K": [[78, 81], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "cam_K", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__cam_K", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.vis_tools_sunrgbd.Scene3D_SUNRGBD.inst_classes": [[82, 85], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "inst_classes", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__inst_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.vis_tools_sunrgbd.Scene3D_SUNRGBD.layout": [[86, 89], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "layout", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__layout", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.vis_tools_sunrgbd.Scene3D_SUNRGBD.cam_R": [[90, 93], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "cam_R", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__cam_R", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.vis_tools_sunrgbd.Scene3D_SUNRGBD.bdb2d": [[94, 97], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "bdb2d", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__bdb2d", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.vis_tools_sunrgbd.Scene3D_SUNRGBD.bdb3d": [[98, 101], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "bdb3d", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__bdb3d", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.vis_tools_sunrgbd.Scene3D_SUNRGBD.draw_projected_bdb3d": [[102, 138], ["PIL.Image.fromarray", "ImageDraw.Draw", "PIL.Image.fromarray.show", "utils.sunrgbd_utils.proj_from_point_to_2d", "utils.sunrgbd_utils.get_corners_of_bb3d_no_index", "ImageDraw.Draw.line", "ImageDraw.Draw.line", "ImageDraw.Draw.line", "ImageDraw.Draw.line", "ImageDraw.Draw.line", "ImageDraw.Draw.line", "ImageDraw.Draw.text", "utils.sunrgbd_utils.proj_from_point_to_2d", "tuple", "tuple", "ImageFont.truetype", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int"], "methods", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_utils.proj_from_point_to_2d", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.libs.get_corners_of_bb3d_no_index", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_utils.proj_from_point_to_2d"], ["", "def", "draw_projected_bdb3d", "(", "self", ")", ":", "\n", "        ", "from", "PIL", "import", "Image", ",", "ImageDraw", ",", "ImageFont", "\n", "\n", "img_map", "=", "Image", ".", "fromarray", "(", "self", ".", "img_map", "[", ":", "]", ")", "\n", "\n", "draw", "=", "ImageDraw", ".", "Draw", "(", "img_map", ")", "\n", "\n", "width", "=", "5", "\n", "\n", "for", "bdb3d", "in", "self", ".", "bdb3d", ":", "\n", "            ", "center_from_3D", ",", "invalid_ids", "=", "proj_from_point_to_2d", "(", "bdb3d", "[", "'centroid'", "]", ",", "self", ".", "cam_K", ",", "self", ".", "cam_R", ")", "\n", "bdb3d_corners", "=", "get_corners_of_bb3d_no_index", "(", "bdb3d", "[", "'basis'", "]", ",", "bdb3d", "[", "'coeffs'", "]", ",", "bdb3d", "[", "'centroid'", "]", ")", "\n", "bdb2D_from_3D", "=", "proj_from_point_to_2d", "(", "bdb3d_corners", ",", "self", ".", "cam_K", ",", "self", ".", "cam_R", ")", "[", "0", "]", "\n", "\n", "# bdb2D_from_3D = np.round(bdb2D_from_3D).astype('int32')", "\n", "bdb2D_from_3D", "=", "[", "tuple", "(", "item", ")", "for", "item", "in", "bdb2D_from_3D", "]", "\n", "\n", "color", "=", "nyu_color_palette", "[", "bdb3d", "[", "'class_id'", "]", "]", "\n", "\n", "draw", ".", "line", "(", "[", "bdb2D_from_3D", "[", "0", "]", ",", "bdb2D_from_3D", "[", "1", "]", ",", "bdb2D_from_3D", "[", "2", "]", ",", "bdb2D_from_3D", "[", "3", "]", ",", "bdb2D_from_3D", "[", "0", "]", "]", ",", "\n", "fill", "=", "(", "int", "(", "color", "[", "0", "]", "*", "255", ")", ",", "int", "(", "color", "[", "1", "]", "*", "255", ")", ",", "int", "(", "color", "[", "2", "]", "*", "255", ")", ")", ",", "width", "=", "width", ")", "\n", "draw", ".", "line", "(", "[", "bdb2D_from_3D", "[", "4", "]", ",", "bdb2D_from_3D", "[", "5", "]", ",", "bdb2D_from_3D", "[", "6", "]", ",", "bdb2D_from_3D", "[", "7", "]", ",", "bdb2D_from_3D", "[", "4", "]", "]", ",", "\n", "fill", "=", "(", "int", "(", "color", "[", "0", "]", "*", "255", ")", ",", "int", "(", "color", "[", "1", "]", "*", "255", ")", ",", "int", "(", "color", "[", "2", "]", "*", "255", ")", ")", ",", "width", "=", "width", ")", "\n", "draw", ".", "line", "(", "[", "bdb2D_from_3D", "[", "0", "]", ",", "bdb2D_from_3D", "[", "4", "]", "]", ",", "\n", "fill", "=", "(", "int", "(", "color", "[", "0", "]", "*", "255", ")", ",", "int", "(", "color", "[", "1", "]", "*", "255", ")", ",", "int", "(", "color", "[", "2", "]", "*", "255", ")", ")", ",", "width", "=", "width", ")", "\n", "draw", ".", "line", "(", "[", "bdb2D_from_3D", "[", "1", "]", ",", "bdb2D_from_3D", "[", "5", "]", "]", ",", "\n", "fill", "=", "(", "int", "(", "color", "[", "0", "]", "*", "255", ")", ",", "int", "(", "color", "[", "1", "]", "*", "255", ")", ",", "int", "(", "color", "[", "2", "]", "*", "255", ")", ")", ",", "width", "=", "width", ")", "\n", "draw", ".", "line", "(", "[", "bdb2D_from_3D", "[", "2", "]", ",", "bdb2D_from_3D", "[", "6", "]", "]", ",", "\n", "fill", "=", "(", "int", "(", "color", "[", "0", "]", "*", "255", ")", ",", "int", "(", "color", "[", "1", "]", "*", "255", ")", ",", "int", "(", "color", "[", "2", "]", "*", "255", ")", ")", ",", "width", "=", "width", ")", "\n", "draw", ".", "line", "(", "[", "bdb2D_from_3D", "[", "3", "]", ",", "bdb2D_from_3D", "[", "7", "]", "]", ",", "\n", "fill", "=", "(", "int", "(", "color", "[", "0", "]", "*", "255", ")", ",", "int", "(", "color", "[", "1", "]", "*", "255", ")", ",", "int", "(", "color", "[", "2", "]", "*", "255", ")", ")", ",", "width", "=", "width", ")", "\n", "\n", "draw", ".", "text", "(", "tuple", "(", "center_from_3D", ")", ",", "NYU40CLASSES", "[", "bdb3d", "[", "'class_id'", "]", "]", ",", "\n", "fill", "=", "(", "int", "(", "color", "[", "0", "]", "*", "255", ")", ",", "int", "(", "color", "[", "1", "]", "*", "255", ")", ",", "int", "(", "color", "[", "2", "]", "*", "255", ")", ")", ",", "font", "=", "ImageFont", ".", "truetype", "(", "\"/usr/share/fonts/truetype/dejavu/DejaVuSansMono-Bold.ttf\"", ",", "20", ")", ")", "\n", "\n", "", "img_map", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.vis_tools_sunrgbd.Scene3D_SUNRGBD.draw_image": [[139, 143], ["matplotlib.imshow", "matplotlib.axis", "matplotlib.show"], "methods", ["None"], ["", "def", "draw_image", "(", "self", ")", ":", "\n", "        ", "plt", ".", "imshow", "(", "self", ".", "img_map", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.vis_tools_sunrgbd.Scene3D_SUNRGBD.draw_cls": [[144, 163], ["numpy.unique", "numpy.zeros_like", "enumerate", "matplotlib.figure", "matplotlib.gca", "matplotlib.gca.imshow", "matplotlib.colorbar", "matplotlib.colorbar.set_ticks", "matplotlib.colorbar.set_ticklabels", "matplotlib.axis", "matplotlib.axis", "matplotlib.show", "color_box.append", "numpy.arange", "matplotlib.colors.ListedColormap", "numpy.zeros_like.max", "len", "numpy.unique", "numpy.zeros_like.max", "numpy.zeros_like.min", "len", "numpy.zeros_like.max", "numpy.zeros_like.min"], "methods", ["None"], ["", "def", "draw_cls", "(", "self", ")", ":", "\n", "        ", "class_ids", "=", "np", ".", "unique", "(", "self", ".", "cls_map", ")", "\n", "color_box", "=", "[", "]", "\n", "\n", "color_map", "=", "np", ".", "zeros_like", "(", "self", ".", "cls_map", ")", "\n", "for", "color_id", ",", "class_id", "in", "enumerate", "(", "class_ids", ")", ":", "\n", "            ", "color_box", ".", "append", "(", "nyu_color_palette", "[", "class_id", "]", ")", "\n", "color_map", "[", "self", ".", "cls_map", "==", "class_id", "]", "=", "color_id", "\n", "\n", "", "plt", ".", "figure", "(", ")", "\n", "ax", "=", "plt", ".", "gca", "(", ")", "\n", "im", "=", "ax", ".", "imshow", "(", "color_map", ",", "cmap", "=", "ListedColormap", "(", "color_box", ")", ")", "\n", "colorbar", "=", "plt", ".", "colorbar", "(", "im", ")", "\n", "colorbar", ".", "set_ticks", "(", "np", ".", "arange", "(", "(", "color_map", ".", "max", "(", ")", "-", "color_map", ".", "min", "(", ")", ")", "/", "(", "2", "*", "len", "(", "class_ids", ")", ")", ",", "color_map", ".", "max", "(", ")", ",", "\n", "(", "color_map", ".", "max", "(", ")", "-", "color_map", ".", "min", "(", ")", ")", "/", "len", "(", "class_ids", ")", ")", ")", "\n", "colorbar", ".", "set_ticklabels", "(", "[", "NYU40CLASSES", "[", "id", "]", "for", "id", "in", "np", ".", "unique", "(", "self", ".", "cls_map", ")", "]", ")", "\n", "plt", ".", "axis", "(", "'equal'", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.vis_tools_sunrgbd.Scene3D_SUNRGBD.draw_inst": [[164, 186], ["numpy.copy", "matplotlib.cla", "vis_tools_sunrgbd.Scene3D_SUNRGBD.inst_classes.items", "matplotlib.axis", "matplotlib.imshow", "matplotlib.show", "matplotlib.gca().text", "numpy.min", "numpy.max", "matplotlib.gca", "dict", "numpy.array", "numpy.argwhere", "numpy.argwhere"], "methods", ["None"], ["", "def", "draw_inst", "(", "self", ")", ":", "\n", "        ", "image", "=", "np", ".", "copy", "(", "self", ".", "img_map", ")", "\n", "\n", "plt", ".", "cla", "(", ")", "\n", "\n", "for", "inst_id", ",", "class_id", "in", "self", ".", "inst_classes", ".", "items", "(", ")", ":", "\n", "            ", "mask", "=", "self", ".", "inst_map", "==", "inst_id", "\n", "\n", "if", "True", "not", "in", "mask", ":", "\n", "                ", "continue", "\n", "\n", "", "color", "=", "(", "255", "*", "np", ".", "array", "(", "nyu_color_palette", "[", "class_id", "]", ")", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "image", "[", "mask", "]", "=", "0.6", "*", "color", "+", "0.4", "*", "image", "[", "mask", "]", "\n", "\n", "centre", "=", "(", "np", ".", "min", "(", "np", ".", "argwhere", "(", "mask", ")", ",", "axis", "=", "0", ")", "+", "np", ".", "max", "(", "np", ".", "argwhere", "(", "mask", ")", ",", "axis", "=", "0", ")", ")", "/", "2.", "\n", "plt", ".", "gca", "(", ")", ".", "text", "(", "centre", "[", "1", "]", ",", "centre", "[", "0", "]", ",", "\n", "'{0:d}:{1:s}'", ".", "format", "(", "inst_id", ",", "NYU40CLASSES", "[", "class_id", "]", ")", ",", "\n", "bbox", "=", "dict", "(", "facecolor", "=", "color", "/", "255.", ",", "alpha", "=", "0.9", ")", ",", "fontsize", "=", "12", ",", "color", "=", "'white'", ")", "\n", "\n", "", "plt", ".", "axis", "(", "\"off\"", ")", "\n", "plt", ".", "imshow", "(", "image", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.vis_tools_sunrgbd.Scene3D_SUNRGBD.draw_2dboxes": [[187, 200], ["matplotlib.cla", "matplotlib.axis", "matplotlib.imshow", "matplotlib.show", "matplotlib.Rectangle", "matplotlib.gca().add_patch", "matplotlib.gca().text", "numpy.array", "matplotlib.gca", "matplotlib.gca", "dict"], "methods", ["None"], ["", "def", "draw_2dboxes", "(", "self", ",", "scale", "=", "1.0", ")", ":", "\n", "        ", "plt", ".", "cla", "(", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "plt", ".", "imshow", "(", "self", ".", "img_map", ")", "\n", "for", "bdb", "in", "self", ".", "bdb2d", ":", "\n", "            ", "bbox", "=", "np", ".", "array", "(", "[", "bdb", "[", "'x1'", "]", ",", "bdb", "[", "'y1'", "]", ",", "bdb", "[", "'x2'", "]", ",", "bdb", "[", "'y2'", "]", "]", ")", "*", "scale", "\n", "color", "=", "nyu_color_palette", "[", "bdb", "[", "'class_id'", "]", "]", "\n", "rect", "=", "plt", ".", "Rectangle", "(", "(", "bbox", "[", "0", "]", ",", "bbox", "[", "1", "]", ")", ",", "bbox", "[", "2", "]", "-", "bbox", "[", "0", "]", ",", "bbox", "[", "3", "]", "-", "bbox", "[", "1", "]", ",", "fill", "=", "False", ",", "edgecolor", "=", "color", ",", "\n", "linewidth", "=", "2.5", ")", "\n", "plt", ".", "gca", "(", ")", ".", "add_patch", "(", "rect", ")", "\n", "plt", ".", "gca", "(", ")", ".", "text", "(", "bbox", "[", "0", "]", ",", "bbox", "[", "1", "]", ",", "'{:s}'", ".", "format", "(", "NYU40CLASSES", "[", "bdb", "[", "'class_id'", "]", "]", ")", ",", "bbox", "=", "dict", "(", "facecolor", "=", "color", ",", "alpha", "=", "0.5", ")", ",", "\n", "fontsize", "=", "9", ",", "color", "=", "'white'", ")", "\n", "", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.vis_tools_sunrgbd.Scene3D_SUNRGBD.set_render": [[201, 271], ["vtk.vtkRenderer", "vtk.vtkRenderer.ResetCamera", "vtk.vtkRenderer.AddActor", "numpy.diag().dot", "vis_tools_sunrgbd.Scene3D_SUNRGBD.get_box_corners", "vis_tools_sunrgbd.Scene3D_SUNRGBD.set_actor", "vis_tools_sunrgbd.Scene3D_SUNRGBD.GetProperty().SetOpacity", "vtk.vtkRenderer.AddActor", "vis_tools_sunrgbd.Scene3D_SUNRGBD.set_actor", "vis_tools_sunrgbd.Scene3D_SUNRGBD.GetProperty().SetOpacity", "vis_tools_sunrgbd.Scene3D_SUNRGBD.GetProperty().SetLineWidth", "vtk.vtkRenderer.AddActor", "range", "range", "vis_tools_sunrgbd.Scene3D_SUNRGBD.set_actor", "vis_tools_sunrgbd.Scene3D_SUNRGBD.GetProperty().SetPointSize", "vtk.vtkRenderer.AddActor", "print", "vtk.vtkRenderer.SetBackground", "vis_tools_sunrgbd.Scene3D_SUNRGBD.set_axes_actor", "vis_tools_sunrgbd.Scene3D_SUNRGBD.set_mapper", "vis_tools_sunrgbd.Scene3D_SUNRGBD.set_mapper", "vis_tools_sunrgbd.Scene3D_SUNRGBD.set_arrow_actor", "vis_tools_sunrgbd.Scene3D_SUNRGBD.GetProperty().SetColor", "vtk.vtkRenderer.AddActor", "vis_tools_sunrgbd.Scene3D_SUNRGBD.set_arrow_actor", "vis_tools_sunrgbd.Scene3D_SUNRGBD.GetProperty().SetColor", "vtk.vtkRenderer.AddActor", "vis_tools_sunrgbd.Scene3D_SUNRGBD.set_mapper", "numpy.diag().dot", "vis_tools_sunrgbd.Scene3D_SUNRGBD.get_box_corners", "vis_tools_sunrgbd.Scene3D_SUNRGBD.set_actor", "vis_tools_sunrgbd.Scene3D_SUNRGBD.GetProperty().SetOpacity", "vtk.vtkRenderer.AddActor", "range", "numpy.diag", "vis_tools_sunrgbd.Scene3D_SUNRGBD.set_cube_prop", "vis_tools_sunrgbd.Scene3D_SUNRGBD.GetProperty", "vis_tools_sunrgbd.Scene3D_SUNRGBD.set_bbox_line_actor", "vis_tools_sunrgbd.Scene3D_SUNRGBD.GetProperty", "vis_tools_sunrgbd.Scene3D_SUNRGBD.GetProperty", "vis_tools_sunrgbd.Scene3D_SUNRGBD.set_points_property", "vis_tools_sunrgbd.Scene3D_SUNRGBD.GetProperty", "vis_tools_sunrgbd.Scene3D_SUNRGBD.set_mapper", "vis_tools_sunrgbd.Scene3D_SUNRGBD.set_arrow_actor", "vis_tools_sunrgbd.Scene3D_SUNRGBD.GetProperty().SetColor", "vtk.vtkRenderer.AddActor", "vis_tools_sunrgbd.Scene3D_SUNRGBD.GetProperty", "vis_tools_sunrgbd.Scene3D_SUNRGBD.GetProperty", "numpy.eye", "numpy.diag", "vis_tools_sunrgbd.Scene3D_SUNRGBD.set_cube_prop", "vis_tools_sunrgbd.Scene3D_SUNRGBD.GetProperty", "vis_tools_sunrgbd.Scene3D_SUNRGBD.GetProperty"], "methods", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.dot", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.vis_tools.Scene3D.get_box_corners", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.vis_tools.Scene3D.set_actor", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.vis_tools.Scene3D.set_actor", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.vis_tools.Scene3D.set_actor", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.vis_tools.Scene3D.set_axes_actor", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.vis_tools.Scene3D.set_mapper", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.vis_tools.Scene3D.set_mapper", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.vis_tools.Scene3D.set_arrow_actor", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.vis_tools.Scene3D.set_arrow_actor", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.vis_tools.Scene3D.set_mapper", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.dot", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.vis_tools.Scene3D.get_box_corners", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.vis_tools.Scene3D.set_actor", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.vis_tools.Scene3D.set_cube_prop", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.vis_tools.Scene3D.set_bbox_line_actor", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.vis_tools.Scene3D.set_points_property", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.vis_tools.Scene3D.set_mapper", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.vis_tools.Scene3D.set_arrow_actor", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.vis_tools.Scene3D.set_cube_prop"], ["", "def", "set_render", "(", "self", ")", ":", "\n", "        ", "renderer", "=", "vtk", ".", "vtkRenderer", "(", ")", "\n", "renderer", ".", "ResetCamera", "(", ")", "\n", "\n", "'''draw layout system'''", "\n", "renderer", ".", "AddActor", "(", "self", ".", "set_axes_actor", "(", ")", ")", "\n", "\n", "'''draw layout bounding box'''", "\n", "centroid", "=", "self", ".", "layout", "[", "'centroid'", "]", "\n", "vectors", "=", "np", ".", "diag", "(", "self", ".", "layout", "[", "'coeffs'", "]", ")", ".", "dot", "(", "self", ".", "layout", "[", "'basis'", "]", ")", "\n", "\n", "corners", ",", "faces", "=", "self", ".", "get_box_corners", "(", "centroid", ",", "vectors", ")", "\n", "color", "=", "(", "200", ",", "200", ",", "200", ")", "\n", "layout_actor", "=", "self", ".", "set_actor", "(", "self", ".", "set_mapper", "(", "self", ".", "set_cube_prop", "(", "corners", ",", "faces", ",", "color", ")", ",", "'box'", ")", ")", "\n", "layout_actor", ".", "GetProperty", "(", ")", ".", "SetOpacity", "(", "0.1", ")", "\n", "renderer", ".", "AddActor", "(", "layout_actor", ")", "\n", "\n", "layout_line_actor", "=", "self", ".", "set_actor", "(", "self", ".", "set_mapper", "(", "self", ".", "set_bbox_line_actor", "(", "corners", ",", "faces", ",", "(", "0", ",", "0", ",", "0", ")", ")", ",", "'box'", ")", ")", "\n", "layout_line_actor", ".", "GetProperty", "(", ")", ".", "SetOpacity", "(", "0.5", ")", "\n", "layout_line_actor", ".", "GetProperty", "(", ")", ".", "SetLineWidth", "(", "3", ")", "\n", "renderer", ".", "AddActor", "(", "layout_line_actor", ")", "\n", "# draw layout orientation", "\n", "color", "=", "[", "[", "1.", ",", "0.", ",", "0.", "]", ",", "[", "0.", ",", "1.", ",", "0.", "]", ",", "[", "0.", ",", "0.", ",", "1.", "]", "]", "\n", "for", "index", "in", "range", "(", "vectors", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "arrow_actor", "=", "self", ".", "set_arrow_actor", "(", "centroid", ",", "vectors", "[", "index", "]", ")", "\n", "arrow_actor", ".", "GetProperty", "(", ")", ".", "SetColor", "(", "color", "[", "index", "]", ")", "\n", "renderer", ".", "AddActor", "(", "arrow_actor", ")", "\n", "\n", "", "'''draw camera coordinate system'''", "\n", "color", "=", "[", "[", "0.", ",", "1.", ",", "1.", "]", ",", "[", "1.", ",", "0.", ",", "1.", "]", ",", "[", "1.", ",", "1.", ",", "0.", "]", "]", "\n", "centroid", "=", "[", "0", ",", "0", ",", "0", "]", "\n", "vectors", "=", "self", ".", "cam_R", ".", "T", "\n", "for", "index", "in", "range", "(", "vectors", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "arrow_actor", "=", "self", ".", "set_arrow_actor", "(", "centroid", ",", "vectors", "[", "index", "]", ")", "\n", "arrow_actor", ".", "GetProperty", "(", ")", ".", "SetColor", "(", "color", "[", "index", "]", ")", "\n", "renderer", ".", "AddActor", "(", "arrow_actor", ")", "\n", "\n", "# '''set camera property'''", "\n", "# camera = self.set_camera(centroid, vectors, self.cam_K)", "\n", "# renderer.SetActiveCamera(camera)", "\n", "\n", "", "'''draw point cloud from depth image'''", "\n", "point_actor", "=", "self", ".", "set_actor", "(", "self", ".", "set_mapper", "(", "self", ".", "set_points_property", "(", "np", ".", "eye", "(", "3", ")", ")", ",", "'box'", ")", ")", "\n", "point_actor", ".", "GetProperty", "(", ")", ".", "SetPointSize", "(", "1", ")", "\n", "renderer", ".", "AddActor", "(", "point_actor", ")", "\n", "\n", "'''draw 3D object bboxes'''", "\n", "print", "(", ")", "\n", "for", "bdb3d", "in", "self", ".", "bdb3d", ":", "\n", "# draw 3D bounding boxes", "\n", "            ", "color", "=", "nyu_color_palette", "[", "bdb3d", "[", "'class_id'", "]", "]", "\n", "# transform from world system to layout system", "\n", "centroid", "=", "bdb3d", "[", "'centroid'", "]", "\n", "vectors", "=", "np", ".", "diag", "(", "bdb3d", "[", "'coeffs'", "]", ")", ".", "dot", "(", "bdb3d", "[", "'basis'", "]", ")", "\n", "corners", ",", "faces", "=", "self", ".", "get_box_corners", "(", "centroid", ",", "vectors", ")", "\n", "bbox_actor", "=", "self", ".", "set_actor", "(", "self", ".", "set_mapper", "(", "self", ".", "set_cube_prop", "(", "corners", ",", "faces", ",", "color", ")", ",", "'box'", ")", ")", "\n", "bbox_actor", ".", "GetProperty", "(", ")", ".", "SetOpacity", "(", "0.3", ")", "\n", "renderer", ".", "AddActor", "(", "bbox_actor", ")", "\n", "\n", "# draw orientations", "\n", "color", "=", "[", "[", "0.8", ",", "0.8", ",", "0.8", "]", ",", "[", "0.8", ",", "0.8", ",", "0.8", "]", ",", "[", "1.", ",", "0.", ",", "0.", "]", "]", "\n", "\n", "for", "index", "in", "range", "(", "vectors", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "arrow_actor", "=", "self", ".", "set_arrow_actor", "(", "centroid", ",", "vectors", "[", "index", "]", ")", "\n", "arrow_actor", ".", "GetProperty", "(", ")", ".", "SetColor", "(", "color", "[", "index", "]", ")", "\n", "renderer", ".", "AddActor", "(", "arrow_actor", ")", "\n", "\n", "", "", "renderer", ".", "SetBackground", "(", "1.", ",", "1.", ",", "1.", ")", "\n", "\n", "return", "renderer", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.preprocess_pix3d.parse_sample": [[18, 69], ["print", "config.classnames.index", "os.path.join", "os.path.exists", "numpy.array", "os.path.join", "libs.tools.read_obj", "libs.tools.sample_pnts_from_obj", "pickle.dump", "PIL.Image.open().convert", "libs.tools.normalize_to_unit_square", "os.path.join", "os.path.exists", "numpy.array", "pickle.dump", "str", "PIL.Image.open().convert().transpose", "PIL.Image.open", "str", "os.path.join", "PIL.Image.open().convert", "PIL.Image.open", "os.path.join"], "function", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.read_obj", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.sample_pnts_from_obj", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.normalize_to_unit_square"], ["def", "parse_sample", "(", "sample_info", ")", ":", "\n", "    ", "sample_id", "=", "sample_info", "[", "0", "]", "\n", "print", "(", "'Processing sample: %d.'", "%", "(", "sample_id", ")", ")", "\n", "sample", "=", "sample_info", "[", "1", "]", "\n", "is_flip", "=", "sample_info", "[", "2", "]", "\n", "\n", "class_id", "=", "config", ".", "classnames", ".", "index", "(", "sample", "[", "'category'", "]", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "config", ".", "train_test_data_path", ",", "str", "(", "sample_id", ")", "+", "'.pkl'", ")", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "save_path", ")", ":", "\n", "        ", "return", "None", "\n", "\n", "", "data", "=", "{", "}", "\n", "data", "[", "'sample_id'", "]", "=", "sample_id", "\n", "\n", "'''get single object image'''", "\n", "img", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "config", ".", "metadata_path", ",", "sample", "[", "'img'", "]", ")", ")", ".", "convert", "(", "'RGB'", ")", ")", "\n", "img", "=", "img", "[", "sample", "[", "'bbox'", "]", "[", "1", "]", ":", "sample", "[", "'bbox'", "]", "[", "3", "]", ",", "sample", "[", "'bbox'", "]", "[", "0", "]", ":", "sample", "[", "'bbox'", "]", "[", "2", "]", "]", "\n", "data", "[", "'img'", "]", "=", "img", "\n", "\n", "'''get object model'''", "\n", "model_path", "=", "os", ".", "path", ".", "join", "(", "config", ".", "metadata_path", ",", "sample", "[", "'model'", "]", ")", "\n", "obj_data", "=", "read_obj", "(", "model_path", ",", "[", "'v'", ",", "'f'", "]", ")", "\n", "sampled_points", "=", "sample_pnts_from_obj", "(", "obj_data", ",", "10000", ",", "mode", "=", "'random'", ")", "\n", "sampled_points", "=", "normalize_to_unit_square", "(", "sampled_points", ")", "[", "0", "]", "\n", "\n", "data", "[", "'gt_3dpoints'", "]", "=", "sampled_points", "\n", "\n", "'''get object category'''", "\n", "data", "[", "'class_id'", "]", "=", "class_id", "\n", "\n", "pickle", ".", "dump", "(", "data", ",", "save_path", ")", "\n", "\n", "if", "is_flip", ":", "\n", "        ", "save_path", "=", "os", ".", "path", ".", "join", "(", "config", ".", "train_test_data_path", ",", "str", "(", "sample_id", ")", "+", "'_flipped.pkl'", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "save_path", ")", ":", "\n", "            ", "return", "None", "\n", "\n", "", "data_flip", "=", "{", "}", "\n", "data_flip", "[", "'sample_id'", "]", "=", "sample_id", "\n", "img_flip", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "config", ".", "metadata_path", ",", "sample", "[", "'img'", "]", ")", ")", ".", "convert", "(", "'RGB'", ")", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", ")", "\n", "x1", "=", "sample", "[", "'img_size'", "]", "[", "0", "]", "-", "1", "-", "sample", "[", "'bbox'", "]", "[", "2", "]", "\n", "x2", "=", "sample", "[", "'img_size'", "]", "[", "0", "]", "-", "1", "-", "sample", "[", "'bbox'", "]", "[", "0", "]", "\n", "y1", "=", "sample", "[", "'bbox'", "]", "[", "1", "]", "\n", "y2", "=", "sample", "[", "'bbox'", "]", "[", "3", "]", "\n", "\n", "img_flip", "=", "img_flip", "[", "y1", ":", "y2", ",", "x1", ":", "x2", "]", "\n", "data_flip", "[", "'img'", "]", "=", "img_flip", "\n", "data_flip", "[", "'gt_3dpoints'", "]", "=", "sampled_points", "\n", "data_flip", "[", "'class_id'", "]", "=", "class_id", "\n", "pickle", ".", "dump", "(", "data_flip", ",", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.vis_tools.Scene3D.__init__": [[32, 44], ["cv2.imread", "libs.tools.cvt2nyuclass_map", "cv2.cvtColor", "libs.tools.get_inst_classes", "utils.sunrgbd_utils.get_cam_KRT", "cv2.imread", "cv2.imread", "cv2.imread"], "methods", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.cvt2nyuclass_map", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.get_inst_classes", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_utils.get_cam_KRT"], ["def", "__init__", "(", "self", ",", "sample", ")", ":", "\n", "# self.cam_paras = sample['cam_paras']", "\n", "        ", "self", ".", "_inst_map", "=", "cv2", ".", "imread", "(", "sample", "[", "'instance_map_path'", "]", ",", "-", "1", ")", "\n", "self", ".", "_cls_map", "=", "cvt2nyuclass_map", "(", "cv2", ".", "imread", "(", "sample", "[", "'category_map_path'", "]", ",", "-", "1", ")", ",", "nyuclass_mapping", ")", "\n", "self", ".", "_img_map", "=", "cv2", ".", "cvtColor", "(", "cv2", ".", "imread", "(", "sample", "[", "'image_path'", "]", ",", "-", "1", ")", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "self", ".", "_depth_map", "=", "cv2", ".", "imread", "(", "sample", "[", "'depth_map_path'", "]", ",", "-", "1", ")", "/", "1000.", "\n", "self", ".", "_inst_classes", "=", "get_inst_classes", "(", "self", ".", "inst_map", ",", "self", ".", "cls_map", ")", "\n", "self", ".", "_layout", "=", "sample", "[", "'room_bbox'", "]", "\n", "self", ".", "_compact_layout", "=", "sample", "[", "'compact_bbox'", "]", "\n", "self", ".", "_instance_info", "=", "sample", "[", "'instance_info'", "]", "\n", "self", ".", "_cam_K", ",", "self", ".", "_cam_R", ",", "self", ".", "_cam_T", "=", "get_cam_KRT", "(", "sample", "[", "'cam_paras'", "]", ",", "\n", "[", "self", ".", "img_map", ".", "shape", "[", "1", "]", ",", "self", ".", "img_map", ".", "shape", "[", "0", "]", "]", ")", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.vis_tools.Scene3D.inst_map": [[44, 47], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "inst_map", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_inst_map", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.vis_tools.Scene3D.cls_map": [[48, 51], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "cls_map", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_cls_map", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.vis_tools.Scene3D.img_map": [[52, 55], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "img_map", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_img_map", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.vis_tools.Scene3D.depth_map": [[56, 59], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "depth_map", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_depth_map", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.vis_tools.Scene3D.cam_K": [[60, 63], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "cam_K", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_cam_K", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.vis_tools.Scene3D.inst_classes": [[64, 67], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "inst_classes", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_inst_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.vis_tools.Scene3D.layout": [[68, 71], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "layout", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_layout", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.vis_tools.Scene3D.compact_layout": [[72, 75], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "compact_layout", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_compact_layout", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.vis_tools.Scene3D.instance_info": [[76, 79], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "instance_info", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_instance_info", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.vis_tools.Scene3D.cam_R": [[80, 83], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "cam_R", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_cam_R", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.vis_tools.Scene3D.cam_T": [[84, 87], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "cam_T", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_cam_T", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.vis_tools.Scene3D.draw_image": [[88, 92], ["matplotlib.pyplot.imshow", "matplotlib.pyplot.axis", "matplotlib.pyplot.show"], "methods", ["None"], ["", "def", "draw_image", "(", "self", ")", ":", "\n", "        ", "plt", ".", "imshow", "(", "self", ".", "img_map", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.vis_tools.Scene3D.draw_cls": [[93, 113], ["numpy.unique", "numpy.zeros_like", "enumerate", "matplotlib.pyplot.figure", "matplotlib.pyplot.gca", "matplotlib.pyplot.gca.imshow", "matplotlib.pyplot.colorbar", "matplotlib.pyplot.colorbar.set_ticks", "matplotlib.pyplot.colorbar.set_ticklabels", "matplotlib.pyplot.axis", "matplotlib.pyplot.axis", "matplotlib.pyplot.show", "color_box.append", "numpy.arange", "matplotlib.colors.ListedColormap", "numpy.zeros_like.max", "len", "numpy.unique", "numpy.zeros_like.max", "numpy.zeros_like.min", "len", "numpy.zeros_like.max", "numpy.zeros_like.min"], "methods", ["None"], ["", "def", "draw_cls", "(", "self", ")", ":", "\n", "\n", "        ", "class_ids", "=", "np", ".", "unique", "(", "self", ".", "cls_map", ")", "\n", "color_box", "=", "[", "]", "\n", "\n", "color_map", "=", "np", ".", "zeros_like", "(", "self", ".", "cls_map", ")", "\n", "for", "color_id", ",", "class_id", "in", "enumerate", "(", "class_ids", ")", ":", "\n", "            ", "color_box", ".", "append", "(", "nyu_color_palette", "[", "class_id", "]", ")", "\n", "color_map", "[", "self", ".", "cls_map", "==", "class_id", "]", "=", "color_id", "\n", "\n", "", "plt", ".", "figure", "(", ")", "\n", "ax", "=", "plt", ".", "gca", "(", ")", "\n", "im", "=", "ax", ".", "imshow", "(", "color_map", ",", "cmap", "=", "ListedColormap", "(", "color_box", ")", ")", "\n", "colorbar", "=", "plt", ".", "colorbar", "(", "im", ")", "\n", "colorbar", ".", "set_ticks", "(", "np", ".", "arange", "(", "(", "color_map", ".", "max", "(", ")", "-", "color_map", ".", "min", "(", ")", ")", "/", "(", "2", "*", "len", "(", "class_ids", ")", ")", ",", "color_map", ".", "max", "(", ")", ",", "\n", "(", "color_map", ".", "max", "(", ")", "-", "color_map", ".", "min", "(", ")", ")", "/", "len", "(", "class_ids", ")", ")", ")", "\n", "colorbar", ".", "set_ticklabels", "(", "[", "NYU40CLASSES", "[", "id", "]", "for", "id", "in", "np", ".", "unique", "(", "self", ".", "cls_map", ")", "]", ")", "\n", "plt", ".", "axis", "(", "'equal'", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.vis_tools.Scene3D.draw_inst": [[114, 137], ["numpy.copy", "matplotlib.pyplot.cla", "vis_tools.Scene3D.inst_classes.items", "matplotlib.pyplot.axis", "matplotlib.pyplot.imshow", "matplotlib.pyplot.show", "matplotlib.pyplot.gca().text", "numpy.min", "numpy.max", "matplotlib.pyplot.gca", "dict", "numpy.array", "numpy.argwhere", "numpy.argwhere"], "methods", ["None"], ["", "def", "draw_inst", "(", "self", ")", ":", "\n", "\n", "        ", "image", "=", "np", ".", "copy", "(", "self", ".", "img_map", ")", "\n", "\n", "plt", ".", "cla", "(", ")", "\n", "\n", "for", "inst_id", ",", "class_id", "in", "self", ".", "inst_classes", ".", "items", "(", ")", ":", "\n", "            ", "mask", "=", "self", ".", "inst_map", "==", "inst_id", "\n", "\n", "if", "True", "not", "in", "mask", ":", "\n", "                ", "continue", "\n", "\n", "", "color", "=", "(", "255", "*", "np", ".", "array", "(", "nyu_color_palette", "[", "class_id", "]", ")", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "image", "[", "mask", "]", "=", "0.6", "*", "color", "+", "0.4", "*", "image", "[", "mask", "]", "\n", "\n", "centre", "=", "(", "np", ".", "min", "(", "np", ".", "argwhere", "(", "mask", ")", ",", "axis", "=", "0", ")", "+", "np", ".", "max", "(", "np", ".", "argwhere", "(", "mask", ")", ",", "axis", "=", "0", ")", ")", "/", "2.", "\n", "plt", ".", "gca", "(", ")", ".", "text", "(", "centre", "[", "1", "]", ",", "centre", "[", "0", "]", ",", "\n", "'{0:d}:{1:s}'", ".", "format", "(", "inst_id", ",", "NYU40CLASSES", "[", "class_id", "]", ")", ",", "\n", "bbox", "=", "dict", "(", "facecolor", "=", "color", "/", "255.", ",", "alpha", "=", "0.9", ")", ",", "fontsize", "=", "12", ",", "color", "=", "'white'", ")", "\n", "\n", "", "plt", ".", "axis", "(", "\"off\"", ")", "\n", "plt", ".", "imshow", "(", "image", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.vis_tools.Scene3D.draw_depth": [[138, 142], ["matplotlib.pyplot.imshow", "matplotlib.pyplot.axis", "matplotlib.pyplot.show"], "methods", ["None"], ["", "def", "draw_depth", "(", "self", ")", ":", "\n", "        ", "plt", ".", "imshow", "(", "self", ".", "depth_map", ",", "cmap", "=", "'Greys'", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.vis_tools.Scene3D.set_axes_actor": [[143, 169], ["vtk.vtkTransform", "vtk.vtkTransform.Translate", "vtk.vtkAxesActor", "vtk.vtkAxesActor.SetUserTransform", "vtk.vtkAxesActor.SetTotalLength", "vtk.vtkAxesActor.SetTipTypeToCone", "vtk.vtkAxesActor.SetConeRadius", "vtk.vtkAxesActor.SetShaftTypeToCylinder", "vtk.vtkAxesActor.SetCylinderRadius", "vtk.vtkTextProperty", "vtk.vtkTextProperty.SetFontSize", "vtk.vtkTextProperty.SetBold", "vtk.vtkTextProperty.SetItalic", "vtk.vtkTextProperty.SetShadow", "vtk.vtkAxesActor.GetXAxisCaptionActor2D", "vtk.vtkAxesActor.GetYAxisCaptionActor2D", "vtk.vtkAxesActor.GetZAxisCaptionActor2D", "label.SetCaptionTextProperty"], "methods", ["None"], ["", "def", "set_axes_actor", "(", "self", ")", ":", "\n", "        ", "'''\n        Set camera coordinate system\n        '''", "\n", "transform", "=", "vtk", ".", "vtkTransform", "(", ")", "\n", "transform", ".", "Translate", "(", "0.", ",", "0.", ",", "0.", ")", "\n", "# self defined", "\n", "axes", "=", "vtk", ".", "vtkAxesActor", "(", ")", "\n", "axes", ".", "SetUserTransform", "(", "transform", ")", "\n", "axes", ".", "SetTotalLength", "(", "0.8", ",", "0.8", ",", "0.8", ")", "\n", "\n", "axes", ".", "SetTipTypeToCone", "(", ")", "\n", "axes", ".", "SetConeRadius", "(", "30e-2", ")", "\n", "axes", ".", "SetShaftTypeToCylinder", "(", ")", "\n", "axes", ".", "SetCylinderRadius", "(", "40e-3", ")", "\n", "\n", "vtk_textproperty", "=", "vtk", ".", "vtkTextProperty", "(", ")", "\n", "vtk_textproperty", ".", "SetFontSize", "(", "1", ")", "\n", "vtk_textproperty", ".", "SetBold", "(", "True", ")", "\n", "vtk_textproperty", ".", "SetItalic", "(", "False", ")", "\n", "vtk_textproperty", ".", "SetShadow", "(", "True", ")", "\n", "\n", "for", "label", "in", "[", "axes", ".", "GetXAxisCaptionActor2D", "(", ")", ",", "axes", ".", "GetYAxisCaptionActor2D", "(", ")", ",", "axes", ".", "GetZAxisCaptionActor2D", "(", ")", "]", ":", "\n", "            ", "label", ".", "SetCaptionTextProperty", "(", "vtk_textproperty", ")", "\n", "\n", "", "return", "axes", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.vis_tools.Scene3D.set_actor": [[170, 180], ["vtk.vtkActor", "vtk.vtkActor.SetMapper"], "methods", ["None"], ["", "def", "set_actor", "(", "self", ",", "mapper", ")", ":", "\n", "        ", "'''\n        vtk general actor\n        :param mapper: vtk shape mapper\n        :return: vtk actor\n        '''", "\n", "actor", "=", "vtk", ".", "vtkActor", "(", ")", "\n", "actor", ".", "SetMapper", "(", "mapper", ")", "\n", "\n", "return", "actor", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.vis_tools.Scene3D.set_mapper": [[181, 200], ["vtk.vtkPolyDataMapper", "vtk.vtkPolyDataMapper.SetInputConnection", "prop.GetOutputPort", "IOError", "vtk.vtkPolyDataMapper.SetInput", "vtk.vtkPolyDataMapper.SetInputData"], "methods", ["None"], ["", "def", "set_mapper", "(", "self", ",", "prop", ",", "mode", ")", ":", "\n", "\n", "        ", "mapper", "=", "vtk", ".", "vtkPolyDataMapper", "(", ")", "\n", "\n", "if", "mode", "==", "'model'", ":", "\n", "            ", "mapper", ".", "SetInputConnection", "(", "prop", ".", "GetOutputPort", "(", ")", ")", "\n", "\n", "", "elif", "mode", "==", "'box'", ":", "\n", "            ", "if", "vtk", ".", "VTK_MAJOR_VERSION", "<=", "5", ":", "\n", "                ", "mapper", ".", "SetInput", "(", "prop", ")", "\n", "", "else", ":", "\n", "                ", "mapper", ".", "SetInputData", "(", "prop", ")", "\n", "\n", "# mapper.SetScalarRange(0, 7)", "\n", "\n", "", "", "else", ":", "\n", "            ", "raise", "IOError", "(", "'No Mapper mode found.'", ")", "\n", "\n", "", "return", "mapper", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.vis_tools.Scene3D.mkVtkIdList": [[201, 206], ["vtk.vtkIdList", "vtk.vtkIdList.InsertNextId", "int"], "methods", ["None"], ["", "def", "mkVtkIdList", "(", "self", ",", "it", ")", ":", "\n", "        ", "vil", "=", "vtk", ".", "vtkIdList", "(", ")", "\n", "for", "i", "in", "it", ":", "\n", "            ", "vil", ".", "InsertNextId", "(", "int", "(", "i", ")", ")", "\n", "", "return", "vil", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.vis_tools.Scene3D.set_cube_prop": [[207, 237], ["vtk.vtkPolyData", "vtk.vtkPoints", "vtk.vtkCellArray", "vtk.vtkUnsignedCharArray", "vtk.vtkUnsignedCharArray.SetNumberOfComponents", "vtk.vtkUnsignedCharArray.SetName", "numpy.uint8", "range", "range", "range", "vtk.vtkPolyData.SetPoints", "vtk.vtkPolyData.SetPolys", "vtk.vtkPolyData.GetPointData().SetScalars", "vtk.vtkPolyData.GetPointData().SetActiveScalars", "vtk.vtkPoints.InsertPoint", "vtk.vtkCellArray.InsertNextCell", "vtk.vtkUnsignedCharArray.InsertNextTuple3", "numpy.array", "vis_tools.Scene3D.mkVtkIdList", "vtk.vtkPolyData.GetPointData", "vtk.vtkPolyData.GetPointData"], "methods", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.vis_tools.Scene3D.mkVtkIdList"], ["", "def", "set_cube_prop", "(", "self", ",", "corners", ",", "faces", ",", "color", ")", ":", "\n", "\n", "        ", "cube", "=", "vtk", ".", "vtkPolyData", "(", ")", "\n", "points", "=", "vtk", ".", "vtkPoints", "(", ")", "\n", "polys", "=", "vtk", ".", "vtkCellArray", "(", ")", "\n", "colors", "=", "vtk", ".", "vtkUnsignedCharArray", "(", ")", "\n", "colors", ".", "SetNumberOfComponents", "(", "3", ")", "\n", "colors", ".", "SetName", "(", "'Color'", ")", "\n", "\n", "color", "=", "np", ".", "uint8", "(", "np", ".", "array", "(", "color", ")", "*", "255", ")", "\n", "\n", "for", "i", "in", "range", "(", "8", ")", ":", "\n", "            ", "points", ".", "InsertPoint", "(", "i", ",", "corners", "[", "i", "]", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "6", ")", ":", "\n", "            ", "polys", ".", "InsertNextCell", "(", "self", ".", "mkVtkIdList", "(", "faces", "[", "i", "]", ")", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "8", ")", ":", "\n", "            ", "colors", ".", "InsertNextTuple3", "(", "*", "color", ")", "\n", "\n", "# Assign the pieces to the vtkPolyData", "\n", "", "cube", ".", "SetPoints", "(", "points", ")", "\n", "del", "points", "\n", "cube", ".", "SetPolys", "(", "polys", ")", "\n", "del", "polys", "\n", "cube", ".", "GetPointData", "(", ")", ".", "SetScalars", "(", "colors", ")", "\n", "cube", ".", "GetPointData", "(", ")", ".", "SetActiveScalars", "(", "'Color'", ")", "\n", "del", "colors", "\n", "\n", "return", "cube", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.vis_tools.Scene3D.set_bbox_line_actor": [[238, 267], ["numpy.vstack", "numpy.unique", "vtk.vtkPoints", "vtk.vtkCellArray", "vtk.vtkUnsignedCharArray", "vtk.vtkUnsignedCharArray.SetNumberOfComponents", "vtk.vtkUnsignedCharArray.SetName", "vtk.vtkPolyData", "vtk.vtkPolyData.SetPoints", "vtk.vtkPolyData.SetLines", "vtk.vtkPolyData.GetCellData().SetScalars", "numpy.vstack", "numpy.vstack", "numpy.vstack", "numpy.vstack", "numpy.sort", "vtk.vtkPoints.InsertNextPoint", "vtk.vtkLine", "vtk.vtkLine.GetPointIds().SetId", "vtk.vtkLine.GetPointIds().SetId", "vtk.vtkCellArray.InsertNextCell", "vtk.vtkUnsignedCharArray.InsertNextTuple3", "vtk.vtkPolyData.GetCellData", "vtk.vtkLine.GetPointIds", "vtk.vtkLine.GetPointIds", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "methods", ["None"], ["", "def", "set_bbox_line_actor", "(", "self", ",", "corners", ",", "faces", ",", "color", ")", ":", "\n", "        ", "edge_set1", "=", "np", ".", "vstack", "(", "[", "np", ".", "array", "(", "faces", ")", "[", ":", ",", "0", "]", ",", "np", ".", "array", "(", "faces", ")", "[", ":", ",", "1", "]", "]", ")", ".", "T", "\n", "edge_set2", "=", "np", ".", "vstack", "(", "[", "np", ".", "array", "(", "faces", ")", "[", ":", ",", "1", "]", ",", "np", ".", "array", "(", "faces", ")", "[", ":", ",", "2", "]", "]", ")", ".", "T", "\n", "edge_set3", "=", "np", ".", "vstack", "(", "[", "np", ".", "array", "(", "faces", ")", "[", ":", ",", "2", "]", ",", "np", ".", "array", "(", "faces", ")", "[", ":", ",", "3", "]", "]", ")", ".", "T", "\n", "edge_set4", "=", "np", ".", "vstack", "(", "[", "np", ".", "array", "(", "faces", ")", "[", ":", ",", "3", "]", ",", "np", ".", "array", "(", "faces", ")", "[", ":", ",", "0", "]", "]", ")", ".", "T", "\n", "edges", "=", "np", ".", "vstack", "(", "[", "edge_set1", ",", "edge_set2", ",", "edge_set3", ",", "edge_set4", "]", ")", "\n", "edges", "=", "np", ".", "unique", "(", "np", ".", "sort", "(", "edges", ",", "axis", "=", "1", ")", ",", "axis", "=", "0", ")", "\n", "\n", "pts", "=", "vtk", ".", "vtkPoints", "(", ")", "\n", "for", "corner", "in", "corners", ":", "\n", "            ", "pts", ".", "InsertNextPoint", "(", "corner", ")", "\n", "\n", "", "lines", "=", "vtk", ".", "vtkCellArray", "(", ")", "\n", "colors", "=", "vtk", ".", "vtkUnsignedCharArray", "(", ")", "\n", "colors", ".", "SetNumberOfComponents", "(", "3", ")", "\n", "colors", ".", "SetName", "(", "\"Colors\"", ")", "\n", "for", "edge", "in", "edges", ":", "\n", "            ", "line", "=", "vtk", ".", "vtkLine", "(", ")", "\n", "line", ".", "GetPointIds", "(", ")", ".", "SetId", "(", "0", ",", "edge", "[", "0", "]", ")", "\n", "line", ".", "GetPointIds", "(", ")", ".", "SetId", "(", "1", ",", "edge", "[", "1", "]", ")", "\n", "lines", ".", "InsertNextCell", "(", "line", ")", "\n", "colors", ".", "InsertNextTuple3", "(", "*", "color", ")", "\n", "\n", "", "linesPolyData", "=", "vtk", ".", "vtkPolyData", "(", ")", "\n", "linesPolyData", ".", "SetPoints", "(", "pts", ")", "\n", "linesPolyData", ".", "SetLines", "(", "lines", ")", "\n", "linesPolyData", ".", "GetCellData", "(", ")", ".", "SetScalars", "(", "colors", ")", "\n", "\n", "return", "linesPolyData", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.vis_tools.Scene3D.get_box_corners": [[268, 288], ["tuple", "tuple", "tuple", "tuple", "tuple", "tuple", "tuple", "tuple"], "methods", ["None"], ["", "def", "get_box_corners", "(", "self", ",", "center", ",", "vectors", ")", ":", "\n", "        ", "'''\n        Convert box center and vectors to the corner-form\n        :param center:\n        :param vectors:\n        :return: corner points and faces related to the box\n        '''", "\n", "corner_pnts", "=", "[", "None", "]", "*", "8", "\n", "corner_pnts", "[", "0", "]", "=", "tuple", "(", "center", "-", "vectors", "[", "0", "]", "+", "vectors", "[", "1", "]", "-", "vectors", "[", "2", "]", ")", "\n", "corner_pnts", "[", "1", "]", "=", "tuple", "(", "center", "-", "vectors", "[", "0", "]", "+", "vectors", "[", "1", "]", "+", "vectors", "[", "2", "]", ")", "\n", "corner_pnts", "[", "2", "]", "=", "tuple", "(", "center", "+", "vectors", "[", "0", "]", "+", "vectors", "[", "1", "]", "+", "vectors", "[", "2", "]", ")", "\n", "corner_pnts", "[", "3", "]", "=", "tuple", "(", "center", "+", "vectors", "[", "0", "]", "+", "vectors", "[", "1", "]", "-", "vectors", "[", "2", "]", ")", "\n", "corner_pnts", "[", "4", "]", "=", "tuple", "(", "center", "-", "vectors", "[", "0", "]", "-", "vectors", "[", "1", "]", "-", "vectors", "[", "2", "]", ")", "\n", "corner_pnts", "[", "5", "]", "=", "tuple", "(", "center", "-", "vectors", "[", "0", "]", "-", "vectors", "[", "1", "]", "+", "vectors", "[", "2", "]", ")", "\n", "corner_pnts", "[", "6", "]", "=", "tuple", "(", "center", "+", "vectors", "[", "0", "]", "-", "vectors", "[", "1", "]", "+", "vectors", "[", "2", "]", ")", "\n", "corner_pnts", "[", "7", "]", "=", "tuple", "(", "center", "+", "vectors", "[", "0", "]", "-", "vectors", "[", "1", "]", "-", "vectors", "[", "2", "]", ")", "\n", "\n", "faces", "=", "[", "(", "0", ",", "1", ",", "2", ",", "3", ")", ",", "(", "4", ",", "7", ",", "6", ",", "5", ")", ",", "(", "0", ",", "4", ",", "5", ",", "1", ")", ",", "(", "1", ",", "5", ",", "6", ",", "2", ")", ",", "(", "2", ",", "6", ",", "7", ",", "3", ")", ",", "(", "0", ",", "3", ",", "7", ",", "4", ")", "]", "\n", "\n", "return", "corner_pnts", ",", "faces", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.vis_tools.Scene3D.read_transform_model": [[289, 343], ["vtk.vtkOBJReader", "vtk.vtkOBJReader.SetFileName", "vtk.vtkOBJReader.Update", "vtk.vtkOBJReader.GetOutput", "vtk.util.numpy_support.vtk_to_numpy().astype", "utils.sunrgbd_utils.correct_flipped_objects", "numpy.hstack", "numpy.hstack.max", "numpy.hstack.min", "numpy.array", "transform_mat.dot", "numpy.array.dot", "vtk.util.numpy_support.numpy_to_vtk", "vtk.vtkOBJReader.GetOutput.GetPoints().SetData", "vtk.vtkOBJReader.Update", "numpy.array().reshape", "transform_mat.dot", "transform_mat[].dot", "vtk.util.numpy_support.vtk_to_numpy", "numpy.ones", "numpy.linalg.det", "vtk.vtkOBJReader.GetOutput.GetPoints", "vtk.vtkOBJReader.GetOutput.GetPoints().GetData", "numpy.array", "vtk.vtkOBJReader.GetOutput.GetPoints"], "methods", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_utils.correct_flipped_objects", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.dot", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.dot", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.dot", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.dot", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.det"], ["", "def", "read_transform_model", "(", "self", ",", "instance", ",", "layout_R", ")", ":", "\n", "        ", "'''\n        read object model to vtk object type, and transform it from object system to camera coordinate system.\n        (with its bounding box)\n        :param instance: model path of instance.\n        :return: vtk object (with bounding box) in transformed coordinate system.\n        '''", "\n", "object", "=", "vtk", ".", "vtkOBJReader", "(", ")", "\n", "object", ".", "SetFileName", "(", "instance", "[", "'model_path'", "]", "[", "0", "]", ")", "\n", "object", ".", "Update", "(", ")", "\n", "\n", "# transform point values", "\n", "# get points from object", "\n", "polydata", "=", "object", ".", "GetOutput", "(", ")", "\n", "# read points using vtk_to_numpy", "\n", "points", "=", "vtk_to_numpy", "(", "polydata", ".", "GetPoints", "(", ")", ".", "GetData", "(", ")", ")", ".", "astype", "(", "np", ".", "float", ")", "\n", "\n", "# get transformation matrix (to tranform from object system to world system)", "\n", "transform_mat", "=", "np", ".", "array", "(", "instance", "[", "'obj_property'", "]", "[", "'transform'", "]", ")", ".", "reshape", "(", "4", ",", "-", "1", ")", ".", "T", "\n", "\n", "# correct those wrongly labeled objects to correct frontal direction.", "\n", "points", ",", "transform_mat", ",", "_", ",", "_", "=", "correct_flipped_objects", "(", "points", ",", "transform_mat", ",", "instance", "[", "'model_path'", "]", "[", "0", "]", ")", "\n", "\n", "points", "=", "np", ".", "hstack", "(", "[", "points", ",", "np", ".", "ones", "(", "[", "points", ".", "shape", "[", "0", "]", ",", "1", "]", ")", "]", ")", "\n", "\n", "# for bounding box (get center-vector form)", "\n", "max_point", "=", "points", ".", "max", "(", "0", ")", "\n", "min_point", "=", "points", ".", "min", "(", "0", ")", "\n", "center", "=", "(", "max_point", "+", "min_point", ")", "/", "2.", "\n", "sizes", "=", "(", "max_point", "-", "min_point", ")", "/", "2.", "\n", "vectors", "=", "np", ".", "array", "(", "[", "[", "sizes", "[", "0", "]", ",", "0.", ",", "0.", "]", ",", "[", "0.", ",", "sizes", "[", "1", "]", ",", "0.", "]", ",", "[", "0.", ",", "0.", ",", "sizes", "[", "2", "]", "]", "]", ")", "\n", "\n", "points", "=", "transform_mat", ".", "dot", "(", "points", ".", "T", ")", ".", "T", "\n", "\n", "# for bounding box (transform to world system)", "\n", "center", "=", "transform_mat", ".", "dot", "(", "center", ")", "\n", "vectors", "=", "transform_mat", "[", ":", "3", ",", ":", "3", "]", ".", "dot", "(", "vectors", ".", "T", ")", ".", "T", "\n", "\n", "# make sure vectors are in upright and right-hand system", "\n", "vectors", "[", "1", ",", ":", "]", "=", "vectors", "[", "1", ",", ":", "]", "if", "vectors", "[", "1", ",", "1", "]", ">=", "0", "else", "-", "vectors", "[", "1", ",", ":", "]", "\n", "vectors", "[", "0", ",", ":", "]", "=", "vectors", "[", "0", ",", ":", "]", "if", "np", ".", "linalg", ".", "det", "(", "vectors", ")", ">=", "0", "else", "-", "vectors", "[", "0", ",", ":", "]", "\n", "\n", "# transform from world system to layout system", "\n", "points", "=", "(", "points", "[", ":", ",", ":", "3", "]", "-", "self", ".", "cam_T", ")", ".", "dot", "(", "layout_R", ")", "\n", "\n", "# for the bounding box (transform from world system to layout system)", "\n", "center_layout", "=", "(", "center", "[", ":", "3", "]", "-", "self", ".", "cam_T", ")", ".", "dot", "(", "layout_R", ")", "\n", "vectors_layout", "=", "vectors", ".", "dot", "(", "layout_R", ")", "\n", "\n", "points_array", "=", "numpy_to_vtk", "(", "points", ",", "deep", "=", "True", ")", "\n", "polydata", ".", "GetPoints", "(", ")", ".", "SetData", "(", "points_array", ")", "\n", "object", ".", "Update", "(", ")", "\n", "\n", "return", "object", ",", "(", "center_layout", ",", "vectors_layout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.vis_tools.Scene3D.set_arrow_actor": [[345, 407], ["vtk.vtkArrowSource", "vtk.vtkArrowSource.SetTipLength", "vtk.vtkArrowSource.SetTipRadius", "vtk.vtkArrowSource.SetShaftRadius", "vtk.vtkMath", "vtk.vtkMath.Subtract", "vtk.vtkMath.Norm", "vtk.vtkMath.Normalize", "random.uniform", "random.uniform", "random.uniform", "vtk.vtkMath.Cross", "vtk.vtkMath.Normalize", "vtk.vtkMath.Cross", "vtk.vtkMatrix4x4", "vtk.vtkMatrix4x4.Identity", "range", "vtk.vtkTransform", "vtk.vtkTransform.Translate", "vtk.vtkTransform.Concatenate", "vtk.vtkTransform.Scale", "vtk.vtkPolyDataMapper", "vtk.vtkActor", "vtk.vtkPolyDataMapper.SetInputConnection", "vtk.vtkActor.SetUserMatrix", "vtk.vtkActor.SetMapper", "vtk.vtkMatrix4x4.SetElement", "vtk.vtkMatrix4x4.SetElement", "vtk.vtkMatrix4x4.SetElement", "vtk.vtkArrowSource.GetOutputPort", "vtk.vtkTransform.GetMatrix", "numpy.linalg.norm", "range", "range", "range", "range"], "methods", ["None"], ["", "def", "set_arrow_actor", "(", "self", ",", "startpoint", ",", "vector", ")", ":", "\n", "        ", "'''\n        Design an actor to draw an arrow from startpoint to startpoint + vector.\n        :param startpoint: 3D point\n        :param vector: 3D vector\n        :return: an vtk arrow actor\n        '''", "\n", "arrow_source", "=", "vtk", ".", "vtkArrowSource", "(", ")", "\n", "arrow_source", ".", "SetTipLength", "(", "0.2", ")", "\n", "arrow_source", ".", "SetTipRadius", "(", "0.08", ")", "\n", "arrow_source", ".", "SetShaftRadius", "(", "0.02", ")", "\n", "\n", "vector", "=", "vector", "/", "np", ".", "linalg", ".", "norm", "(", "vector", ")", "*", "0.5", "\n", "\n", "endpoint", "=", "startpoint", "+", "vector", "\n", "\n", "# compute a basis", "\n", "normalisedX", "=", "[", "0", "for", "i", "in", "range", "(", "3", ")", "]", "\n", "normalisedY", "=", "[", "0", "for", "i", "in", "range", "(", "3", ")", "]", "\n", "normalisedZ", "=", "[", "0", "for", "i", "in", "range", "(", "3", ")", "]", "\n", "\n", "# the X axis is a vector from start to end", "\n", "math", "=", "vtk", ".", "vtkMath", "(", ")", "\n", "math", ".", "Subtract", "(", "endpoint", ",", "startpoint", ",", "normalisedX", ")", "\n", "length", "=", "math", ".", "Norm", "(", "normalisedX", ")", "\n", "math", ".", "Normalize", "(", "normalisedX", ")", "\n", "\n", "# the Z axis is an arbitrary vector cross X", "\n", "arbitrary", "=", "[", "0", "for", "i", "in", "range", "(", "3", ")", "]", "\n", "arbitrary", "[", "0", "]", "=", "random", ".", "uniform", "(", "-", "10", ",", "10", ")", "\n", "arbitrary", "[", "1", "]", "=", "random", ".", "uniform", "(", "-", "10", ",", "10", ")", "\n", "arbitrary", "[", "2", "]", "=", "random", ".", "uniform", "(", "-", "10", ",", "10", ")", "\n", "math", ".", "Cross", "(", "normalisedX", ",", "arbitrary", ",", "normalisedZ", ")", "\n", "math", ".", "Normalize", "(", "normalisedZ", ")", "\n", "\n", "\n", "# the Y axis is Z cross X", "\n", "math", ".", "Cross", "(", "normalisedZ", ",", "normalisedX", ",", "normalisedY", ")", "\n", "\n", "# create the direction cosine matrix", "\n", "matrix", "=", "vtk", ".", "vtkMatrix4x4", "(", ")", "\n", "matrix", ".", "Identity", "(", ")", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "            ", "matrix", ".", "SetElement", "(", "i", ",", "0", ",", "normalisedX", "[", "i", "]", ")", "\n", "matrix", ".", "SetElement", "(", "i", ",", "1", ",", "normalisedY", "[", "i", "]", ")", "\n", "matrix", ".", "SetElement", "(", "i", ",", "2", ",", "normalisedZ", "[", "i", "]", ")", "\n", "\n", "# apply the transform", "\n", "", "transform", "=", "vtk", ".", "vtkTransform", "(", ")", "\n", "transform", ".", "Translate", "(", "startpoint", ")", "\n", "transform", ".", "Concatenate", "(", "matrix", ")", "\n", "transform", ".", "Scale", "(", "length", ",", "length", ",", "length", ")", "\n", "\n", "# create a mapper and an actor for the arrow", "\n", "mapper", "=", "vtk", ".", "vtkPolyDataMapper", "(", ")", "\n", "actor", "=", "vtk", ".", "vtkActor", "(", ")", "\n", "\n", "mapper", ".", "SetInputConnection", "(", "arrow_source", ".", "GetOutputPort", "(", ")", ")", "\n", "actor", ".", "SetUserMatrix", "(", "transform", ".", "GetMatrix", "(", ")", ")", "\n", "actor", ".", "SetMapper", "(", "mapper", ")", "\n", "\n", "return", "actor", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.vis_tools.Scene3D.set_points_property": [[408, 461], ["numpy.meshgrid", "points_cam.dot().dot", "vtk.vtkPoints", "vtk.vtkCellArray", "vtk.vtkUnsignedCharArray", "vtk.vtkUnsignedCharArray.SetNumberOfComponents", "vtk.vtkUnsignedCharArray.SetName", "zip", "vtk.vtkPolyData", "vtk.vtkPolyData.SetPoints", "vtk.vtkPolyData.SetVerts", "vtk.vtkPolyData.GetPointData().SetScalars", "vtk.vtkPolyData.GetPointData().SetActiveScalars", "range", "range", "u.reshape", "v.reshape", "numpy.vstack", "vtk.vtkPoints.InsertNextPoint", "vtk.vtkUnsignedCharArray.InsertNextTuple3", "vtk.vtkCellArray.InsertNextCell", "vtk.vtkCellArray.InsertCellPoint", "numpy.argwhere", "points_cam.dot", "vtk.vtkPolyData.GetPointData", "vtk.vtkPolyData.GetPointData"], "methods", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.dot", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.dot"], ["", "def", "set_points_property", "(", "self", ",", "layout_R", ")", ":", "\n", "\n", "        ", "u", ",", "v", "=", "np", ".", "meshgrid", "(", "range", "(", "self", ".", "depth_map", ".", "shape", "[", "1", "]", ")", ",", "range", "(", "self", ".", "depth_map", ".", "shape", "[", "0", "]", ")", ")", "\n", "u", "=", "u", ".", "reshape", "(", "[", "1", ",", "-", "1", "]", ")", "[", "0", "]", "\n", "v", "=", "v", ".", "reshape", "(", "[", "1", ",", "-", "1", "]", ")", "[", "0", "]", "\n", "color_indices", "=", "self", ".", "img_map", "[", "v", ",", "u", "]", "\n", "\n", "z_cam", "=", "self", ".", "depth_map", "[", "v", ",", "u", "]", "\n", "\n", "# remove zeros", "\n", "non_zero_indices", "=", "np", ".", "argwhere", "(", "z_cam", ")", ".", "T", "[", "0", "]", "\n", "z_cam", "=", "z_cam", "[", "non_zero_indices", "]", "\n", "u", "=", "u", "[", "non_zero_indices", "]", "\n", "v", "=", "v", "[", "non_zero_indices", "]", "\n", "color_indices", "=", "color_indices", "[", "non_zero_indices", "]", "\n", "\n", "# calculate coordinates", "\n", "x_cam", "=", "(", "u", "-", "self", ".", "cam_K", "[", "0", "]", "[", "2", "]", ")", "*", "z_cam", "/", "self", ".", "cam_K", "[", "0", "]", "[", "0", "]", "\n", "y_cam", "=", "(", "v", "-", "self", ".", "cam_K", "[", "1", "]", "[", "2", "]", ")", "*", "z_cam", "/", "self", ".", "cam_K", "[", "1", "]", "[", "1", "]", "\n", "\n", "# transform to toward-up-right coordinate system", "\n", "x3", "=", "z_cam", "\n", "y3", "=", "-", "y_cam", "\n", "z3", "=", "x_cam", "\n", "\n", "# transform from camera system to layout system", "\n", "points_cam", "=", "np", ".", "vstack", "(", "[", "x3", ",", "y3", ",", "z3", "]", ")", ".", "T", "\n", "points_layout", "=", "points_cam", ".", "dot", "(", "self", ".", "cam_R", ".", "T", ")", ".", "dot", "(", "layout_R", ")", "\n", "x3", "=", "points_layout", "[", ":", ",", "0", "]", "\n", "y3", "=", "points_layout", "[", ":", ",", "1", "]", "\n", "z3", "=", "points_layout", "[", ":", ",", "2", "]", "\n", "\n", "points", "=", "vtk", ".", "vtkPoints", "(", ")", "\n", "vertices", "=", "vtk", ".", "vtkCellArray", "(", ")", "\n", "colors", "=", "vtk", ".", "vtkUnsignedCharArray", "(", ")", "\n", "colors", ".", "SetNumberOfComponents", "(", "3", ")", "\n", "colors", ".", "SetName", "(", "'Color'", ")", "\n", "\n", "for", "x", ",", "y", ",", "z", ",", "c", "in", "zip", "(", "x3", ",", "y3", ",", "z3", ",", "color_indices", ")", ":", "\n", "            ", "id", "=", "points", ".", "InsertNextPoint", "(", "[", "x", ",", "y", ",", "z", "]", ")", "\n", "colors", ".", "InsertNextTuple3", "(", "*", "c", ")", "\n", "vertices", ".", "InsertNextCell", "(", "1", ")", "\n", "vertices", ".", "InsertCellPoint", "(", "id", ")", "\n", "\n", "# Create a polydata object", "\n", "", "point", "=", "vtk", ".", "vtkPolyData", "(", ")", "\n", "# Set the points and vertices we created as the geometry and topology of the polydata", "\n", "point", ".", "SetPoints", "(", "points", ")", "\n", "point", ".", "SetVerts", "(", "vertices", ")", "\n", "point", ".", "GetPointData", "(", ")", ".", "SetScalars", "(", "colors", ")", "\n", "point", ".", "GetPointData", "(", ")", ".", "SetActiveScalars", "(", "'Color'", ")", "\n", "\n", "return", "point", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.vis_tools.Scene3D.proj_layout_to_img": [[462, 486], ["voxel_points.dot().dot", "numpy.array", "points_cam.dot.dot.dot", "vis_tools.Scene3D.cam_K.dot", "pixels[].T.astype", "numpy.where", "voxel_points.dot"], "methods", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.dot", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.dot", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.dot", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.dot"], ["", "def", "proj_layout_to_img", "(", "self", ",", "voxel_points", ",", "layout_R", ")", ":", "\n", "\n", "        ", "points_cam", "=", "voxel_points", ".", "dot", "(", "layout_R", ".", "T", ")", ".", "dot", "(", "self", ".", "cam_R", ")", "\n", "\n", "# convert to traditional image coordinate system", "\n", "T_cam", "=", "np", ".", "array", "(", "[", "[", "0.", ",", "0.", ",", "1.", "]", ",", "[", "0.", ",", "-", "1.", ",", "0.", "]", ",", "[", "1.", ",", "0.", ",", "0.", "]", "]", ")", "\n", "points_cam", "=", "points_cam", ".", "dot", "(", "T_cam", ".", "T", ")", "\n", "# delete those points whose depth value is non-positive.", "\n", "invalid_ids", "=", "np", ".", "where", "(", "points_cam", "[", ":", ",", "2", "]", "<=", "0", ")", "[", "0", "]", "\n", "points_cam", "[", "invalid_ids", ",", "2", "]", "=", "0.0001", "\n", "\n", "points_cam_h", "=", "points_cam", "/", "points_cam", "[", ":", ",", "2", "]", "[", ":", ",", "None", "]", "\n", "pixels", "=", "self", ".", "cam_K", ".", "dot", "(", "points_cam_h", ".", "T", ")", "\n", "\n", "pixels", "=", "pixels", "[", ":", "2", ",", ":", "]", ".", "T", ".", "astype", "(", "np", ".", "int", ")", "\n", "\n", "idx", "=", "(", "0", "<=", "pixels", "[", ":", ",", "0", "]", ")", "&", "(", "pixels", "[", ":", ",", "0", "]", "<", "self", ".", "img_map", ".", "shape", "[", "1", "]", ")", "&", "(", "0", "<=", "pixels", "[", ":", ",", "1", "]", ")", "&", "(", "pixels", "[", ":", ",", "1", "]", "<", "self", ".", "img_map", ".", "shape", "[", "0", "]", ")", "\n", "\n", "pixels", "=", "pixels", "[", "idx", "]", "\n", "\n", "return", "pixels", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.vis_tools.Scene3D.set_camera": [[487, 494], ["vtk.vtkCamera", "vtk.vtkCamera.SetPosition", "vtk.vtkCamera.SetFocalPoint", "vtk.vtkCamera.SetViewUp", "vtk.vtkCamera.SetViewAngle", "numpy.arctan"], "methods", ["None"], ["", "def", "set_camera", "(", "self", ",", "position", ",", "focal_point", ",", "cam_K", ")", ":", "\n", "        ", "camera", "=", "vtk", ".", "vtkCamera", "(", ")", "\n", "camera", ".", "SetPosition", "(", "*", "position", ")", "\n", "camera", ".", "SetFocalPoint", "(", "*", "focal_point", "[", "0", "]", ")", "\n", "camera", ".", "SetViewUp", "(", "*", "focal_point", "[", "1", "]", ")", "\n", "camera", ".", "SetViewAngle", "(", "(", "2", "*", "np", ".", "arctan", "(", "cam_K", "[", "1", "]", "[", "2", "]", "/", "cam_K", "[", "0", "]", "[", "0", "]", ")", ")", "/", "np", ".", "pi", "*", "180", ")", "\n", "return", "camera", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.vis_tools.Scene3D.set_render": [[495, 598], ["vtk.vtkRenderer", "vtk.vtkRenderer.ResetCamera", "libs.tools.get_world_R", "vtk.vtkRenderer.AddActor", "center.dot.dot.dot", "numpy.diag().dot.dot", "libs.tools.get_world_R.T.dot", "utils.sunrgbd_utils.get_layout_info", "numpy.diag().dot", "vis_tools.Scene3D.get_box_corners", "vis_tools.Scene3D.set_actor", "vis_tools.Scene3D.GetProperty().SetOpacity", "vtk.vtkRenderer.AddActor", "range", "range", "vis_tools.Scene3D.set_actor", "vis_tools.Scene3D.GetProperty().SetPointSize", "vtk.vtkRenderer.AddActor", "numpy.zeros_like", "vtk.vtkRenderer.SetBackground", "vis_tools.Scene3D.set_axes_actor", "vis_tools.Scene3D.set_mapper", "vis_tools.Scene3D.set_arrow_actor", "vis_tools.Scene3D.GetProperty().SetColor", "vtk.vtkRenderer.AddActor", "vis_tools.Scene3D.set_arrow_actor", "vis_tools.Scene3D.GetProperty().SetColor", "vtk.vtkRenderer.AddActor", "vis_tools.Scene3D.set_mapper", "vis_tools.Scene3D.read_transform_model", "vis_tools.Scene3D.set_actor", "vis_tools.Scene3D.GetProperty().SetColor", "vtk.vtkRenderer.AddActor", "vis_tools.Scene3D.get_box_corners", "vis_tools.Scene3D.set_actor", "vis_tools.Scene3D.GetProperty().SetOpacity", "vtk.vtkRenderer.AddActor", "range", "numpy.diag", "vis_tools.Scene3D.set_cube_prop", "vis_tools.Scene3D.GetProperty", "vis_tools.Scene3D.set_points_property", "vis_tools.Scene3D.GetProperty", "vis_tools.Scene3D.set_mapper", "vis_tools.Scene3D.set_mapper", "vis_tools.Scene3D.set_arrow_actor", "vis_tools.Scene3D.GetProperty().SetColor", "vtk.vtkRenderer.AddActor", "vis_tools.Scene3D.GetProperty", "vis_tools.Scene3D.GetProperty", "vis_tools.Scene3D.GetProperty", "vis_tools.Scene3D.set_cube_prop", "vis_tools.Scene3D.GetProperty", "vis_tools.Scene3D.GetProperty"], "methods", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.get_world_R", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.dot", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.dot", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.dot", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_utils.get_layout_info", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.dot", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.vis_tools.Scene3D.get_box_corners", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.vis_tools.Scene3D.set_actor", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.vis_tools.Scene3D.set_actor", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.vis_tools.Scene3D.set_axes_actor", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.vis_tools.Scene3D.set_mapper", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.vis_tools.Scene3D.set_arrow_actor", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.vis_tools.Scene3D.set_arrow_actor", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.vis_tools.Scene3D.set_mapper", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.vis_tools.Scene3D.read_transform_model", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.vis_tools.Scene3D.set_actor", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.vis_tools.Scene3D.get_box_corners", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.vis_tools.Scene3D.set_actor", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.vis_tools.Scene3D.set_cube_prop", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.vis_tools.Scene3D.set_points_property", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.vis_tools.Scene3D.set_mapper", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.vis_tools.Scene3D.set_mapper", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.vis_tools.Scene3D.set_arrow_actor", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.vis_tools.Scene3D.set_cube_prop"], ["", "def", "set_render", "(", "self", ")", ":", "\n", "        ", "renderer", "=", "vtk", ".", "vtkRenderer", "(", ")", "\n", "renderer", ".", "ResetCamera", "(", ")", "\n", "\n", "'''set world system'''", "\n", "world_R", "=", "get_world_R", "(", "self", ".", "cam_R", ")", "\n", "\n", "'''draw world system'''", "\n", "renderer", ".", "AddActor", "(", "self", ".", "set_axes_actor", "(", ")", ")", "\n", "\n", "'''draw compact layout (bounding box)'''", "\n", "center", ",", "vectors", "=", "self", ".", "compact_layout", "\n", "# move layout center to camera center", "\n", "center", "-=", "self", ".", "cam_T", "\n", "# transform layout and camera to world system", "\n", "center", "=", "center", ".", "dot", "(", "world_R", ")", "\n", "vectors", "=", "vectors", ".", "dot", "(", "world_R", ")", "\n", "cam_R", "=", "(", "world_R", ".", "T", ")", ".", "dot", "(", "self", ".", "cam_R", ")", "\n", "\n", "# Set layout points forward the toward direction of camera", "\n", "layout_3D", "=", "get_layout_info", "(", "{", "'centroid'", ":", "center", ",", "'vectors'", ":", "vectors", "}", ",", "cam_R", "[", ":", ",", "0", "]", ")", "\n", "center", "=", "layout_3D", "[", "'centroid'", "]", "\n", "vectors", "=", "np", ".", "diag", "(", "layout_3D", "[", "'coeffs'", "]", ")", ".", "dot", "(", "layout_3D", "[", "'basis'", "]", ")", "\n", "\n", "corners", ",", "faces", "=", "self", ".", "get_box_corners", "(", "center", ",", "vectors", ")", "\n", "color", "=", "(", "200", ",", "200", ",", "200", ")", "\n", "layout_actor", "=", "self", ".", "set_actor", "(", "self", ".", "set_mapper", "(", "self", ".", "set_cube_prop", "(", "corners", ",", "faces", ",", "color", ")", ",", "'box'", ")", ")", "\n", "layout_actor", ".", "GetProperty", "(", ")", ".", "SetOpacity", "(", "0.1", ")", "\n", "renderer", ".", "AddActor", "(", "layout_actor", ")", "\n", "\n", "# draw layout orientation", "\n", "color", "=", "[", "[", "0.", ",", "1.", ",", "1.", "]", ",", "[", "1.", ",", "0.", ",", "1.", "]", ",", "[", "1.", ",", "1.", ",", "0.", "]", "]", "\n", "for", "index", "in", "range", "(", "vectors", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "arrow_actor", "=", "self", ".", "set_arrow_actor", "(", "center", ",", "vectors", "[", "index", "]", ")", "\n", "arrow_actor", ".", "GetProperty", "(", ")", ".", "SetColor", "(", "color", "[", "index", "]", ")", "\n", "renderer", ".", "AddActor", "(", "arrow_actor", ")", "\n", "\n", "# '''draw full room layout (bounding box)'''", "\n", "# sizes = (np.array(self.layout['max']) - np.array(self.layout['min']))/2.", "\n", "# center = (np.array(self.layout['min']) + np.array(self.layout['max'])) / 2.", "\n", "# vectors = np.array([[sizes[0], 0., 0.], [0., sizes[1], 0.], [0., 0., sizes[2]]])", "\n", "#", "\n", "# # transform box to world system", "\n", "# center = (center - self.cam_T).dot(world_R)", "\n", "# vectors = vectors.dot(world_R)", "\n", "#", "\n", "# corners, faces = self.get_box_corners(center, vectors)", "\n", "# color = (200, 200, 200)", "\n", "# layout_actor = self.set_actor(self.set_mapper(self.set_cube_prop(corners, faces, color), 'box'))", "\n", "# layout_actor.GetProperty().SetOpacity(0.3)", "\n", "# renderer.AddActor(layout_actor)", "\n", "\n", "", "'''draw camera coordinate system'''", "\n", "color", "=", "[", "[", "0.", ",", "1.", ",", "1.", "]", ",", "[", "1.", ",", "0.", ",", "1.", "]", ",", "[", "1.", ",", "1.", ",", "0.", "]", "]", "\n", "center", "=", "[", "0", ",", "0", ",", "0", "]", "\n", "vectors", "=", "cam_R", ".", "T", "\n", "for", "index", "in", "range", "(", "vectors", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "arrow_actor", "=", "self", ".", "set_arrow_actor", "(", "center", ",", "vectors", "[", "index", "]", ")", "\n", "arrow_actor", ".", "GetProperty", "(", ")", ".", "SetColor", "(", "color", "[", "index", "]", ")", "\n", "renderer", ".", "AddActor", "(", "arrow_actor", ")", "\n", "\n", "# '''set camera property'''", "\n", "# camera = self.set_camera(center, vectors, self.cam_K)", "\n", "# renderer.SetActiveCamera(camera)", "\n", "\n", "", "'''draw point cloud from depth image'''", "\n", "point_actor", "=", "self", ".", "set_actor", "(", "self", ".", "set_mapper", "(", "self", ".", "set_points_property", "(", "world_R", ")", ",", "'box'", ")", ")", "\n", "point_actor", ".", "GetProperty", "(", ")", ".", "SetPointSize", "(", "2", ")", "\n", "renderer", ".", "AddActor", "(", "point_actor", ")", "\n", "\n", "'''draw 3D objects (models with bounding boxes and orientations)'''", "\n", "voxel_image", "=", "np", ".", "zeros_like", "(", "self", ".", "img_map", ")", "\n", "for", "instance", "in", "self", ".", "instance_info", ":", "\n", "# only present in-room object-type stuff", "\n", "            ", "if", "not", "instance", "[", "'inroom'", "]", "or", "instance", "[", "'type'", "]", "!=", "'Object'", ":", "\n", "                ", "continue", "\n", "\n", "", "object", ",", "bbox", "=", "self", ".", "read_transform_model", "(", "instance", ",", "world_R", ")", "\n", "color", "=", "nyu_color_palette", "[", "self", ".", "inst_classes", "[", "instance", "[", "'inst_id'", "]", "]", "]", "\n", "\n", "# draw 3D object models", "\n", "object_actor", "=", "self", ".", "set_actor", "(", "self", ".", "set_mapper", "(", "object", ",", "'model'", ")", ")", "\n", "object_actor", ".", "GetProperty", "(", ")", ".", "SetColor", "(", "color", ")", "\n", "renderer", ".", "AddActor", "(", "object_actor", ")", "\n", "\n", "# draw 3D object bounding boxes", "\n", "center", ",", "vectors", "=", "bbox", "\n", "corners", ",", "faces", "=", "self", ".", "get_box_corners", "(", "center", ",", "vectors", ")", "\n", "bbox_actor", "=", "self", ".", "set_actor", "(", "self", ".", "set_mapper", "(", "self", ".", "set_cube_prop", "(", "corners", ",", "faces", ",", "color", ")", ",", "'box'", ")", ")", "\n", "bbox_actor", ".", "GetProperty", "(", ")", ".", "SetOpacity", "(", "0.3", ")", "\n", "renderer", ".", "AddActor", "(", "bbox_actor", ")", "\n", "\n", "# draw orientations", "\n", "color", "=", "[", "[", "0.8", ",", "0.8", ",", "0.8", "]", ",", "[", "0.8", ",", "0.8", ",", "0.8", "]", ",", "[", "1.", ",", "0.", ",", "0.", "]", "]", "\n", "\n", "for", "index", "in", "range", "(", "vectors", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "arrow_actor", "=", "self", ".", "set_arrow_actor", "(", "center", ",", "vectors", "[", "index", "]", ")", "\n", "arrow_actor", ".", "GetProperty", "(", ")", ".", "SetColor", "(", "color", "[", "index", "]", ")", "\n", "renderer", ".", "AddActor", "(", "arrow_actor", ")", "\n", "\n", "", "", "renderer", ".", "SetBackground", "(", "1.", ",", "1.", ",", "1.", ")", "\n", "\n", "return", "renderer", ",", "voxel_image", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.vis_tools.Scene3D.set_render_window": [[599, 610], ["vtk.vtkRenderWindow", "vis_tools.Scene3D.set_render", "vtk.vtkRenderWindow.AddRenderer", "vtk.vtkRenderWindow.SetSize", "isinstance", "matplotlib.pyplot.imshow", "matplotlib.pyplot.show"], "methods", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.visualize.Box.set_render"], ["", "def", "set_render_window", "(", "self", ")", ":", "\n", "\n", "        ", "render_window", "=", "vtk", ".", "vtkRenderWindow", "(", ")", "\n", "renderer", ",", "voxel_proj", "=", "self", ".", "set_render", "(", ")", "\n", "render_window", ".", "AddRenderer", "(", "renderer", ")", "\n", "render_window", ".", "SetSize", "(", "self", ".", "img_map", ".", "shape", "[", "1", "]", ",", "self", ".", "img_map", ".", "shape", "[", "0", "]", ")", "\n", "\n", "if", "isinstance", "(", "voxel_proj", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "plt", ".", "imshow", "(", "voxel_proj", ")", ";", "plt", ".", "show", "(", ")", "\n", "\n", "", "return", "render_window", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.vis_tools.Scene3D.draw3D": [[611, 620], ["vtk.vtkRenderWindowInteractor", "vis_tools.Scene3D.set_render_window", "vtk.vtkRenderWindowInteractor.SetRenderWindow", "vis_tools.Scene3D.Render", "vtk.vtkRenderWindowInteractor.Start"], "methods", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.vis_tools.Scene3D.set_render_window"], ["", "def", "draw3D", "(", "self", ")", ":", "\n", "        ", "'''\n        Visualize 3D models with their bounding boxes.\n        '''", "\n", "render_window_interactor", "=", "vtk", ".", "vtkRenderWindowInteractor", "(", ")", "\n", "render_window", "=", "self", ".", "set_render_window", "(", ")", "\n", "render_window_interactor", ".", "SetRenderWindow", "(", "render_window", ")", "\n", "render_window", ".", "Render", "(", ")", "\n", "render_window_interactor", ".", "Start", "(", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.visualize.Box.__init__": [[159, 174], ["utils.vis_tools.Scene3D.__init__"], "methods", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.data_config.Config.__init__"], ["    ", "def", "__init__", "(", "self", ",", "img_map", ",", "depth_map", ",", "cam_K", ",", "gt_cam_R", ",", "pre_cam_R", ",", "gt_layout", ",", "pre_layout", ",", "gt_boxes", ",", "pre_boxes", ",", "type", ",", "output_mesh", ")", ":", "\n", "        ", "super", "(", "Scene3D", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_cam_K", "=", "cam_K", "\n", "self", ".", "gt_cam_R", "=", "gt_cam_R", "\n", "self", ".", "_cam_R", "=", "gt_cam_R", "\n", "self", ".", "pre_cam_R", "=", "pre_cam_R", "\n", "self", ".", "gt_layout", "=", "gt_layout", "\n", "self", ".", "pre_layout", "=", "pre_layout", "\n", "self", ".", "gt_boxes", "=", "gt_boxes", "\n", "self", ".", "pre_boxes", "=", "pre_boxes", "\n", "self", ".", "mode", "=", "type", "\n", "self", ".", "_img_map", "=", "img_map", "\n", "self", ".", "_depth_map", "=", "depth_map", "\n", "if", "self", ".", "mode", "==", "'prediction'", ":", "\n", "            ", "self", ".", "output_mesh", "=", "output_mesh", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.visualize.Box.draw_projected_bdb3d": [[175, 225], ["Image.fromarray", "ImageDraw.Draw", "zip", "Image.fromarray.show", "utils.sunrgbd_utils.proj_from_point_to_2d", "utils.sunrgbd_utils.get_corners_of_bb3d_no_index", "ImageDraw.Draw.line", "ImageDraw.Draw.line", "ImageDraw.Draw.line", "ImageDraw.Draw.line", "ImageDraw.Draw.line", "ImageDraw.Draw.line", "ImageDraw.Draw.text", "Image.fromarray.save", "utils.sunrgbd_utils.proj_from_point_to_2d", "tuple", "tuple", "os.path.exists", "os.makedirs", "ImageFont.truetype", "os.path.dirname", "os.path.dirname", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int"], "methods", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_utils.proj_from_point_to_2d", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.libs.get_corners_of_bb3d_no_index", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.CheckpointIO.save", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_utils.proj_from_point_to_2d"], ["", "", "def", "draw_projected_bdb3d", "(", "self", ",", "type", "=", "'prediction'", ",", "if_save", "=", "True", ",", "save_path", "=", "''", ")", ":", "\n", "        ", "from", "PIL", "import", "Image", ",", "ImageDraw", ",", "ImageFont", "\n", "\n", "img_map", "=", "Image", ".", "fromarray", "(", "self", ".", "img_map", "[", ":", "]", ")", "\n", "\n", "draw", "=", "ImageDraw", ".", "Draw", "(", "img_map", ")", "\n", "\n", "width", "=", "5", "\n", "\n", "if", "type", "==", "'prediction'", ":", "\n", "            ", "boxes", "=", "self", ".", "pre_boxes", "\n", "cam_R", "=", "self", ".", "pre_cam_R", "\n", "", "else", ":", "\n", "            ", "boxes", "=", "self", ".", "gt_boxes", "\n", "cam_R", "=", "self", ".", "gt_cam_R", "\n", "\n", "", "for", "coeffs", ",", "centroid", ",", "class_id", ",", "basis", "in", "zip", "(", "boxes", "[", "'coeffs'", "]", ",", "boxes", "[", "'centroid'", "]", ",", "boxes", "[", "'class_id'", "]", ",", "boxes", "[", "'basis'", "]", ")", ":", "\n", "            ", "if", "class_id", "not", "in", "RECON_3D_CLS", ":", "\n", "                ", "continue", "\n", "", "center_from_3D", ",", "invalid_ids", "=", "proj_from_point_to_2d", "(", "centroid", ",", "self", ".", "cam_K", ",", "cam_R", ")", "\n", "bdb3d_corners", "=", "get_corners_of_bb3d_no_index", "(", "basis", ",", "coeffs", ",", "centroid", ")", "\n", "bdb2D_from_3D", "=", "proj_from_point_to_2d", "(", "bdb3d_corners", ",", "self", ".", "cam_K", ",", "cam_R", ")", "[", "0", "]", "\n", "\n", "# bdb2D_from_3D = np.round(bdb2D_from_3D).astype('int32')", "\n", "bdb2D_from_3D", "=", "[", "tuple", "(", "item", ")", "for", "item", "in", "bdb2D_from_3D", "]", "\n", "\n", "color", "=", "nyu_color_palette", "[", "class_id", "]", "\n", "\n", "draw", ".", "line", "(", "[", "bdb2D_from_3D", "[", "0", "]", ",", "bdb2D_from_3D", "[", "1", "]", ",", "bdb2D_from_3D", "[", "2", "]", ",", "bdb2D_from_3D", "[", "3", "]", ",", "bdb2D_from_3D", "[", "0", "]", "]", ",", "\n", "fill", "=", "(", "int", "(", "color", "[", "0", "]", "*", "255", ")", ",", "int", "(", "color", "[", "1", "]", "*", "255", ")", ",", "int", "(", "color", "[", "2", "]", "*", "255", ")", ")", ",", "width", "=", "width", ")", "\n", "draw", ".", "line", "(", "[", "bdb2D_from_3D", "[", "4", "]", ",", "bdb2D_from_3D", "[", "5", "]", ",", "bdb2D_from_3D", "[", "6", "]", ",", "bdb2D_from_3D", "[", "7", "]", ",", "bdb2D_from_3D", "[", "4", "]", "]", ",", "\n", "fill", "=", "(", "int", "(", "color", "[", "0", "]", "*", "255", ")", ",", "int", "(", "color", "[", "1", "]", "*", "255", ")", ",", "int", "(", "color", "[", "2", "]", "*", "255", ")", ")", ",", "width", "=", "width", ")", "\n", "draw", ".", "line", "(", "[", "bdb2D_from_3D", "[", "0", "]", ",", "bdb2D_from_3D", "[", "4", "]", "]", ",", "\n", "fill", "=", "(", "int", "(", "color", "[", "0", "]", "*", "255", ")", ",", "int", "(", "color", "[", "1", "]", "*", "255", ")", ",", "int", "(", "color", "[", "2", "]", "*", "255", ")", ")", ",", "width", "=", "width", ")", "\n", "draw", ".", "line", "(", "[", "bdb2D_from_3D", "[", "1", "]", ",", "bdb2D_from_3D", "[", "5", "]", "]", ",", "\n", "fill", "=", "(", "int", "(", "color", "[", "0", "]", "*", "255", ")", ",", "int", "(", "color", "[", "1", "]", "*", "255", ")", ",", "int", "(", "color", "[", "2", "]", "*", "255", ")", ")", ",", "width", "=", "width", ")", "\n", "draw", ".", "line", "(", "[", "bdb2D_from_3D", "[", "2", "]", ",", "bdb2D_from_3D", "[", "6", "]", "]", ",", "\n", "fill", "=", "(", "int", "(", "color", "[", "0", "]", "*", "255", ")", ",", "int", "(", "color", "[", "1", "]", "*", "255", ")", ",", "int", "(", "color", "[", "2", "]", "*", "255", ")", ")", ",", "width", "=", "width", ")", "\n", "draw", ".", "line", "(", "[", "bdb2D_from_3D", "[", "3", "]", ",", "bdb2D_from_3D", "[", "7", "]", "]", ",", "\n", "fill", "=", "(", "int", "(", "color", "[", "0", "]", "*", "255", ")", ",", "int", "(", "color", "[", "1", "]", "*", "255", ")", ",", "int", "(", "color", "[", "2", "]", "*", "255", ")", ")", ",", "width", "=", "width", ")", "\n", "\n", "draw", ".", "text", "(", "tuple", "(", "center_from_3D", ")", ",", "NYU40CLASSES", "[", "class_id", "]", ",", "\n", "fill", "=", "(", "int", "(", "color", "[", "0", "]", "*", "255", ")", ",", "int", "(", "color", "[", "1", "]", "*", "255", ")", ",", "int", "(", "color", "[", "2", "]", "*", "255", ")", ")", ",", "font", "=", "ImageFont", ".", "truetype", "(", "\"/usr/share/fonts/truetype/dejavu/DejaVuSansMono-Bold.ttf\"", ",", "20", ")", ")", "\n", "\n", "", "img_map", ".", "show", "(", ")", "\n", "\n", "if", "if_save", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "dirname", "(", "save_path", ")", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "save_path", ")", ")", "\n", "", "img_map", ".", "save", "(", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.visualize.Box.get_bbox_actor": [[226, 232], ["visualize.Box.get_box_corners", "visualize.Box.set_actor", "visualize.Box.GetProperty().SetOpacity", "visualize.Box.set_mapper", "enumerate", "visualize.Box.set_cube_prop", "visualize.Box.GetProperty"], "methods", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.vis_tools.Scene3D.get_box_corners", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.vis_tools.Scene3D.set_actor", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.vis_tools.Scene3D.set_mapper", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.vis_tools.Scene3D.set_cube_prop"], ["", "", "def", "get_bbox_actor", "(", "self", ",", "box", ",", "color", ",", "opacity", ")", ":", "\n", "        ", "vectors", "=", "[", "box", "[", "'coeffs'", "]", "[", "basis_id", "]", "*", "basis", "for", "basis_id", ",", "basis", "in", "enumerate", "(", "box", "[", "'basis'", "]", ")", "]", "\n", "corners", ",", "faces", "=", "self", ".", "get_box_corners", "(", "box", "[", "'centroid'", "]", ",", "vectors", ")", "\n", "bbox_actor", "=", "self", ".", "set_actor", "(", "self", ".", "set_mapper", "(", "self", ".", "set_cube_prop", "(", "corners", ",", "faces", ",", "color", ")", ",", "'box'", ")", ")", "\n", "bbox_actor", ".", "GetProperty", "(", ")", ".", "SetOpacity", "(", "opacity", ")", "\n", "return", "bbox_actor", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.visualize.Box.get_bbox_line_actor": [[233, 240], ["visualize.Box.get_box_corners", "visualize.Box.set_actor", "visualize.Box.GetProperty().SetOpacity", "visualize.Box.GetProperty().SetLineWidth", "visualize.Box.set_mapper", "enumerate", "visualize.Box.set_bbox_line_actor", "visualize.Box.GetProperty", "visualize.Box.GetProperty"], "methods", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.vis_tools.Scene3D.get_box_corners", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.vis_tools.Scene3D.set_actor", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.vis_tools.Scene3D.set_mapper", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.vis_tools.Scene3D.set_bbox_line_actor"], ["", "def", "get_bbox_line_actor", "(", "self", ",", "box", ",", "color", ",", "opacity", ",", "width", "=", "10", ")", ":", "\n", "        ", "vectors", "=", "[", "box", "[", "'coeffs'", "]", "[", "basis_id", "]", "*", "basis", "for", "basis_id", ",", "basis", "in", "enumerate", "(", "box", "[", "'basis'", "]", ")", "]", "\n", "corners", ",", "faces", "=", "self", ".", "get_box_corners", "(", "box", "[", "'centroid'", "]", ",", "vectors", ")", "\n", "bbox_actor", "=", "self", ".", "set_actor", "(", "self", ".", "set_mapper", "(", "self", ".", "set_bbox_line_actor", "(", "corners", ",", "faces", ",", "color", ")", ",", "'box'", ")", ")", "\n", "bbox_actor", ".", "GetProperty", "(", ")", ".", "SetOpacity", "(", "opacity", ")", "\n", "bbox_actor", ".", "GetProperty", "(", ")", ".", "SetLineWidth", "(", "width", ")", "\n", "return", "bbox_actor", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.visualize.Box.get_orientation_actor": [[241, 247], ["visualize.Box.set_arrow_actor", "visualize.Box.GetProperty().SetColor", "visualize.Box.GetProperty"], "methods", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.vis_tools.Scene3D.set_arrow_actor"], ["", "def", "get_orientation_actor", "(", "self", ",", "centroid", ",", "vector", ",", "color", ")", ":", "\n", "\n", "        ", "arrow_actor", "=", "self", ".", "set_arrow_actor", "(", "centroid", ",", "vector", ")", "\n", "arrow_actor", ".", "GetProperty", "(", ")", ".", "SetColor", "(", "color", ")", "\n", "\n", "return", "arrow_actor", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.visualize.Box.get_voxel_actor": [[248, 256], ["visualize.Box.get_box_corners", "visualize.Box.set_actor", "voxel_actors.append", "visualize.Box.set_mapper", "visualize.Box.set_cube_prop"], "methods", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.vis_tools.Scene3D.get_box_corners", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.vis_tools.Scene3D.set_actor", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.vis_tools.Scene3D.set_mapper", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.vis_tools.Scene3D.set_cube_prop"], ["", "def", "get_voxel_actor", "(", "self", ",", "voxels", ",", "voxel_vector", ",", "color", ")", ":", "\n", "# draw each voxel", "\n", "        ", "voxel_actors", "=", "[", "]", "\n", "for", "point", "in", "voxels", ":", "\n", "            ", "corners", ",", "faces", "=", "self", ".", "get_box_corners", "(", "point", ",", "voxel_vector", ")", "\n", "voxel_actor", "=", "self", ".", "set_actor", "(", "self", ".", "set_mapper", "(", "self", ".", "set_cube_prop", "(", "corners", ",", "faces", ",", "color", ")", ",", "'box'", ")", ")", "\n", "voxel_actors", ".", "append", "(", "voxel_actor", ")", "\n", "", "return", "voxel_actors", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.visualize.Box.set_render": [[257, 373], ["vtk.vtkRenderer", "vtk.vtkRenderer.ResetCamera", "vtk.vtkRenderer.SetBackground", "visualize.Box.set_camera", "vtk.vtkRenderer.SetActiveCamera", "visualize.Box.set_camera", "vtk.vtkRenderer.SetActiveCamera", "visualize.Box.get_bbox_actor", "vtk.vtkRenderer.AddActor", "visualize.Box.get_bbox_line_actor", "vtk.vtkRenderer.AddActor", "visualize.Box.get_bbox_actor", "vtk.vtkRenderer.AddActor", "visualize.Box.get_bbox_line_actor", "vtk.vtkRenderer.AddActor", "zip", "zip", "enumerate", "visualize.Box.get_bbox_actor", "vtk.vtkRenderer.AddActor", "range", "visualize.Box.get_bbox_actor", "vtk.vtkRenderer.AddActor", "range", "visualize.Box.set_actor", "visualize.Box.GetProperty().SetColor", "vtk.vtkRenderer.AddActor", "visualize.Box.get_orientation_actor", "vtk.vtkRenderer.AddActor", "visualize.Box.get_orientation_actor", "vtk.vtkRenderer.AddActor", "visualize.Box.set_mapper", "enumerate", "enumerate", "visualize.Box.GetProperty"], "methods", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.vis_tools.Scene3D.set_camera", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.vis_tools.Scene3D.set_camera", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.visualize.Box.get_bbox_actor", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.visualize.Box.get_bbox_line_actor", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.visualize.Box.get_bbox_actor", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.visualize.Box.get_bbox_line_actor", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.visualize.Box.get_bbox_actor", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.visualize.Box.get_bbox_actor", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.vis_tools.Scene3D.set_actor", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.visualize.Box.get_orientation_actor", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.visualize.Box.get_orientation_actor", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.vis_tools.Scene3D.set_mapper"], ["", "def", "set_render", "(", "self", ")", ":", "\n", "        ", "renderer", "=", "vtk", ".", "vtkRenderer", "(", ")", "\n", "renderer", ".", "ResetCamera", "(", ")", "\n", "\n", "# '''draw layout system'''", "\n", "# renderer.AddActor(self.set_axes_actor())", "\n", "\n", "'''draw gt camera orientation'''", "\n", "if", "self", ".", "mode", "==", "'gt'", "or", "self", ".", "mode", "==", "'both'", ":", "\n", "            ", "color", "=", "[", "[", "1.", ",", "0.", ",", "0.", "]", ",", "[", "1.", ",", "0.", ",", "0.", "]", ",", "[", "1.", ",", "0.", ",", "0.", "]", "]", "\n", "center", "=", "[", "0", ",", "0", ",", "0", "]", "\n", "vectors", "=", "self", ".", "gt_cam_R", ".", "T", "\n", "# for index in range(vectors.shape[0]):", "\n", "#     arrow_actor = self.set_arrow_actor(center, vectors[index])", "\n", "#     arrow_actor.GetProperty().SetColor(color[index])", "\n", "#     renderer.AddActor(arrow_actor)", "\n", "'''set camera property'''", "\n", "camera", "=", "self", ".", "set_camera", "(", "center", ",", "vectors", ",", "self", ".", "cam_K", ")", "\n", "renderer", ".", "SetActiveCamera", "(", "camera", ")", "\n", "\n", "", "'''draw predicted camera orientation'''", "\n", "if", "self", ".", "mode", "==", "'prediction'", "or", "self", ".", "mode", "==", "'both'", ":", "\n", "            ", "color", "=", "[", "[", "0.", ",", "1.", ",", "1.", "]", ",", "[", "1.", ",", "0.", ",", "1.", "]", ",", "[", "1.", ",", "1.", ",", "0.", "]", "]", "\n", "center", "=", "[", "0", ",", "0", ",", "0", "]", "\n", "vectors", "=", "self", ".", "pre_cam_R", ".", "T", "\n", "# for index in range(vectors.shape[0]):", "\n", "#     arrow_actor = self.set_arrow_actor(center, vectors[index])", "\n", "#     arrow_actor.GetProperty().SetColor(color[index])", "\n", "#     renderer.AddActor(arrow_actor)", "\n", "'''set camera property'''", "\n", "camera", "=", "self", ".", "set_camera", "(", "center", ",", "vectors", ",", "self", ".", "cam_K", ")", "\n", "renderer", ".", "SetActiveCamera", "(", "camera", ")", "\n", "\n", "", "'''draw gt layout'''", "\n", "if", "self", ".", "mode", "==", "'gt'", "or", "self", ".", "mode", "==", "'both'", ":", "\n", "            ", "color", "=", "(", "255", ",", "0", ",", "0", ")", "\n", "opacity", "=", "0.2", "\n", "layout_actor", "=", "self", ".", "get_bbox_actor", "(", "self", ".", "gt_layout", ",", "color", ",", "opacity", ")", "\n", "renderer", ".", "AddActor", "(", "layout_actor", ")", "\n", "layout_line_actor", "=", "self", ".", "get_bbox_line_actor", "(", "self", ".", "gt_layout", ",", "color", ",", "1.", ")", "\n", "renderer", ".", "AddActor", "(", "layout_line_actor", ")", "\n", "\n", "", "'''draw predicted layout'''", "\n", "if", "self", ".", "mode", "==", "'prediction'", "or", "self", ".", "mode", "==", "'both'", ":", "\n", "            ", "color", "=", "(", "75", ",", "75", ",", "75", ")", "\n", "opacity", "=", "0.2", "\n", "layout_actor", "=", "self", ".", "get_bbox_actor", "(", "self", ".", "pre_layout", ",", "color", ",", "opacity", ")", "\n", "renderer", ".", "AddActor", "(", "layout_actor", ")", "\n", "layout_line_actor", "=", "self", ".", "get_bbox_line_actor", "(", "self", ".", "pre_layout", ",", "(", "75", ",", "75", ",", "75", ")", ",", "1.", ")", "\n", "renderer", ".", "AddActor", "(", "layout_line_actor", ")", "\n", "\n", "", "'''draw gt obj bounding boxes'''", "\n", "if", "self", ".", "mode", "==", "'gt'", "or", "self", ".", "mode", "==", "'both'", ":", "\n", "            ", "for", "coeffs", ",", "centroid", ",", "class_id", ",", "basis", "in", "zip", "(", "self", ".", "gt_boxes", "[", "'coeffs'", "]", ",", "\n", "self", ".", "gt_boxes", "[", "'centroid'", "]", ",", "\n", "self", ".", "gt_boxes", "[", "'class_id'", "]", ",", "\n", "self", ".", "gt_boxes", "[", "'basis'", "]", ")", ":", "\n", "                ", "if", "class_id", "not", "in", "RECON_3D_CLS", ":", "\n", "                    ", "continue", "\n", "", "color", "=", "[", "1.", ",", "0.", ",", "0.", "]", "\n", "opacity", "=", "0.2", "\n", "box", "=", "{", "'coeffs'", ":", "coeffs", ",", "'centroid'", ":", "centroid", ",", "'class_id'", ":", "class_id", ",", "'basis'", ":", "basis", "}", "\n", "bbox_actor", "=", "self", ".", "get_bbox_actor", "(", "box", ",", "color", ",", "opacity", ")", "\n", "renderer", ".", "AddActor", "(", "bbox_actor", ")", "\n", "\n", "# draw orientations", "\n", "color", "=", "[", "[", "0.8", ",", "0.8", ",", "0.8", "]", ",", "[", "0.8", ",", "0.8", ",", "0.8", "]", ",", "[", "1.", ",", "0.", ",", "0.", "]", "]", "\n", "vectors", "=", "[", "box", "[", "'coeffs'", "]", "[", "v_id", "]", "*", "vector", "for", "v_id", ",", "vector", "in", "enumerate", "(", "box", "[", "'basis'", "]", ")", "]", "\n", "\n", "for", "index", "in", "range", "(", "3", ")", ":", "\n", "                    ", "arrow_actor", "=", "self", ".", "get_orientation_actor", "(", "box", "[", "'centroid'", "]", ",", "vectors", "[", "index", "]", ",", "color", "[", "index", "]", ")", "\n", "renderer", ".", "AddActor", "(", "arrow_actor", ")", "\n", "\n", "", "", "", "'''draw predicted obj bounding boxes'''", "\n", "if", "self", ".", "mode", "==", "'prediction'", "or", "self", ".", "mode", "==", "'both'", ":", "\n", "            ", "for", "coeffs", ",", "centroid", ",", "class_id", ",", "basis", "in", "zip", "(", "self", ".", "pre_boxes", "[", "'coeffs'", "]", ",", "\n", "self", ".", "pre_boxes", "[", "'centroid'", "]", ",", "\n", "self", ".", "pre_boxes", "[", "'class_id'", "]", ",", "\n", "self", ".", "pre_boxes", "[", "'basis'", "]", ")", ":", "\n", "                ", "if", "class_id", "not", "in", "RECON_3D_CLS", ":", "\n", "                    ", "continue", "\n", "", "color", "=", "nyu_color_palette", "[", "class_id", "]", "\n", "opacity", "=", "0.2", "\n", "box", "=", "{", "'coeffs'", ":", "coeffs", ",", "'centroid'", ":", "centroid", ",", "'class_id'", ":", "class_id", ",", "'basis'", ":", "basis", "}", "\n", "bbox_actor", "=", "self", ".", "get_bbox_actor", "(", "box", ",", "color", ",", "opacity", ")", "\n", "renderer", ".", "AddActor", "(", "bbox_actor", ")", "\n", "\n", "# draw orientations", "\n", "color", "=", "[", "[", "0.8", ",", "0.8", ",", "0.8", "]", ",", "[", "0.8", ",", "0.8", ",", "0.8", "]", ",", "[", "1.", ",", "0.", ",", "0.", "]", "]", "\n", "vectors", "=", "[", "box", "[", "'coeffs'", "]", "[", "v_id", "]", "*", "vector", "for", "v_id", ",", "vector", "in", "enumerate", "(", "box", "[", "'basis'", "]", ")", "]", "\n", "\n", "for", "index", "in", "range", "(", "3", ")", ":", "\n", "                    ", "arrow_actor", "=", "self", ".", "get_orientation_actor", "(", "box", "[", "'centroid'", "]", ",", "vectors", "[", "index", "]", ",", "color", "[", "index", "]", ")", "\n", "renderer", ".", "AddActor", "(", "arrow_actor", ")", "\n", "\n", "# draw mesh", "\n", "", "", "", "if", "self", ".", "mode", "==", "'prediction'", "and", "self", ".", "output_mesh", ":", "\n", "            ", "for", "obj_idx", ",", "class_id", "in", "enumerate", "(", "self", ".", "pre_boxes", "[", "'class_id'", "]", ")", ":", "\n", "                ", "if", "class_id", "not", "in", "RECON_3D_CLS", ":", "\n", "                    ", "continue", "\n", "", "color", "=", "nyu_color_palette", "[", "class_id", "]", "\n", "\n", "object", "=", "self", ".", "output_mesh", "[", "obj_idx", "]", "\n", "\n", "object_actor", "=", "self", ".", "set_actor", "(", "self", ".", "set_mapper", "(", "object", ",", "'model'", ")", ")", "\n", "object_actor", ".", "GetProperty", "(", ")", ".", "SetColor", "(", "color", ")", "\n", "renderer", ".", "AddActor", "(", "object_actor", ")", "\n", "\n", "# '''draw point cloud'''", "\n", "# point_actor = self.set_actor(self.set_mapper(self.set_points_property(np.eye(3)), 'box'))", "\n", "# point_actor.GetProperty().SetPointSize(1)", "\n", "# renderer.AddActor(point_actor)", "\n", "\n", "", "", "renderer", ".", "SetBackground", "(", "1.", ",", "1.", ",", "1.", ")", "\n", "\n", "return", "renderer", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.visualize.Box.draw3D": [[374, 394], ["vtk.vtkRenderWindowInteractor", "visualize.Box.set_render_window", "vtk.vtkRenderWindowInteractor.SetRenderWindow", "visualize.Box.Render", "vtk.vtkRenderWindowInteractor.Start", "vtk.vtkWindowToImageFilter", "vtk.vtkPNGWriter", "vtk.vtkWindowToImageFilter.SetInput", "vtk.vtkWindowToImageFilter.Update", "vtk.vtkPNGWriter.SetInputConnection", "vtk.vtkPNGWriter.SetFileName", "vtk.vtkPNGWriter.Write", "os.path.exists", "os.makedirs", "vtk.vtkWindowToImageFilter.GetOutputPort", "os.path.dirname", "os.path.dirname"], "methods", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.vis_tools.Scene3D.set_render_window"], ["", "def", "draw3D", "(", "self", ",", "if_save", ",", "save_path", ")", ":", "\n", "        ", "'''\n        Visualize 3D models with their bounding boxes.\n        '''", "\n", "render_window_interactor", "=", "vtk", ".", "vtkRenderWindowInteractor", "(", ")", "\n", "render_window", "=", "self", ".", "set_render_window", "(", ")", "\n", "render_window_interactor", ".", "SetRenderWindow", "(", "render_window", ")", "\n", "render_window", ".", "Render", "(", ")", "\n", "render_window_interactor", ".", "Start", "(", ")", "\n", "\n", "if", "if_save", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "dirname", "(", "save_path", ")", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "save_path", ")", ")", "\n", "", "im", "=", "vtk", ".", "vtkWindowToImageFilter", "(", ")", "\n", "writer", "=", "vtk", ".", "vtkPNGWriter", "(", ")", "\n", "im", ".", "SetInput", "(", "render_window", ")", "\n", "im", ".", "Update", "(", ")", "\n", "writer", ".", "SetInputConnection", "(", "im", ".", "GetOutputPort", "(", ")", ")", "\n", "writer", ".", "SetFileName", "(", "save_path", ")", "\n", "writer", ".", "Write", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.visualize.num_from_bins": [[19, 29], ["None"], "function", ["None"], ["def", "num_from_bins", "(", "bins", ",", "cls", ",", "reg", ")", ":", "\n", "    ", "\"\"\"\n    :param bins: b x 2 tensors\n    :param cls: b long tensors\n    :param reg: b tensors\n    :return: bin_center: b tensors\n    \"\"\"", "\n", "bin_width", "=", "(", "bins", "[", "0", "]", "[", "1", "]", "-", "bins", "[", "0", "]", "[", "0", "]", ")", "\n", "bin_center", "=", "(", "bins", "[", "cls", ",", "0", "]", "+", "bins", "[", "cls", ",", "1", "]", ")", "/", "2", "\n", "return", "bin_center", "+", "reg", "*", "bin_width", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.visualize.get_rotation_matrix": [[30, 37], ["visualize.num_from_bins", "visualize.num_from_bins", "libs.tools.R_from_yaw_pitch_roll", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.libs.num_from_bins", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.libs.num_from_bins", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.R_from_yaw_pitch_roll"], ["", "def", "get_rotation_matrix", "(", "cam_data", ",", "bin", ")", ":", "\n", "\n", "    ", "pitch", "=", "num_from_bins", "(", "np", ".", "array", "(", "bin", "[", "'pitch_bin'", "]", ")", ",", "cam_data", "[", "'pitch_cls'", "]", ",", "cam_data", "[", "'pitch_reg'", "]", ")", "\n", "roll", "=", "num_from_bins", "(", "np", ".", "array", "(", "bin", "[", "'roll_bin'", "]", ")", ",", "cam_data", "[", "'roll_cls'", "]", ",", "cam_data", "[", "'roll_reg'", "]", ")", "\n", "R", "=", "R_from_yaw_pitch_roll", "(", "0.", ",", "pitch", ",", "roll", ")", "\n", "\n", "return", "R", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.visualize.format_mesh": [[39, 77], ["int", "int", "vtk.vtkOBJReader", "vtk.vtkOBJReader.SetFileName", "vtk.vtkOBJReader.Update", "vtk.vtkOBJReader.GetOutput", "vtk.util.numpy_support.vtk_to_numpy().astype", "points.dot.dot().dot", "points.dot.dot", "vtk.util.numpy_support.numpy_to_vtk", "object.GetOutput.GetPoints().SetData", "vtk.vtkOBJReader.Update", "numpy.diag", "os.path.basename().split", "filename.split", "[].split", "vtk.util.numpy_support.vtk_to_numpy", "points.dot.max", "points.dot.min", "points.dot.max", "points.dot.min", "points.dot.dot", "object.GetOutput.GetPoints", "object.GetOutput.GetPoints().GetData", "numpy.diag", "os.path.basename", "filename.split", "object.GetOutput.GetPoints"], "function", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.dot", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.dot", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.dot"], ["", "def", "format_mesh", "(", "obj_files", ",", "bboxes", ")", ":", "\n", "\n", "    ", "vtk_objects", "=", "{", "}", "\n", "\n", "for", "obj_file", "in", "obj_files", ":", "\n", "        ", "filename", "=", "'.'", ".", "join", "(", "os", ".", "path", ".", "basename", "(", "obj_file", ")", ".", "split", "(", "'.'", ")", "[", ":", "-", "1", "]", ")", "\n", "obj_idx", "=", "int", "(", "filename", ".", "split", "(", "'_'", ")", "[", "0", "]", ")", "\n", "class_id", "=", "int", "(", "filename", ".", "split", "(", "'_'", ")", "[", "1", "]", ".", "split", "(", "' '", ")", "[", "0", "]", ")", "\n", "assert", "bboxes", "[", "'class_id'", "]", "[", "obj_idx", "]", "==", "class_id", "\n", "\n", "object", "=", "vtk", ".", "vtkOBJReader", "(", ")", "\n", "object", ".", "SetFileName", "(", "obj_file", ")", "\n", "object", ".", "Update", "(", ")", "\n", "\n", "# get points from object", "\n", "polydata", "=", "object", ".", "GetOutput", "(", ")", "\n", "# read points using vtk_to_numpy", "\n", "points", "=", "vtk_to_numpy", "(", "polydata", ".", "GetPoints", "(", ")", ".", "GetData", "(", ")", ")", ".", "astype", "(", "np", ".", "float", ")", "\n", "\n", "mesh_center", "=", "(", "points", ".", "max", "(", "0", ")", "+", "points", ".", "min", "(", "0", ")", ")", "/", "2.", "\n", "points", "=", "points", "-", "mesh_center", "\n", "\n", "mesh_coef", "=", "(", "points", ".", "max", "(", "0", ")", "-", "points", ".", "min", "(", "0", ")", ")", "/", "2.", "\n", "points", "=", "points", ".", "dot", "(", "np", ".", "diag", "(", "1.", "/", "mesh_coef", ")", ")", ".", "dot", "(", "np", ".", "diag", "(", "bboxes", "[", "'coeffs'", "]", "[", "obj_idx", "]", ")", ")", "\n", "\n", "# set orientation", "\n", "points", "=", "points", ".", "dot", "(", "bboxes", "[", "'basis'", "]", "[", "obj_idx", "]", ")", "\n", "\n", "# move to center", "\n", "points", "=", "points", "+", "bboxes", "[", "'centroid'", "]", "[", "obj_idx", "]", "\n", "\n", "points_array", "=", "numpy_to_vtk", "(", "points", ",", "deep", "=", "True", ")", "\n", "polydata", ".", "GetPoints", "(", ")", ".", "SetData", "(", "points_array", ")", "\n", "object", ".", "Update", "(", ")", "\n", "\n", "vtk_objects", "[", "obj_idx", "]", "=", "object", "\n", "\n", "", "return", "vtk_objects", ",", "bboxes", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.visualize.get_bdb_form_from_corners": [[78, 97], ["numpy.linalg.norm", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.stack", "numpy.dot", "numpy.dot", "numpy.dot", "numpy.stack", "numpy.diag", "numpy.diag", "numpy.diag"], "function", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.dot", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.dot", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.dot"], ["", "def", "get_bdb_form_from_corners", "(", "corners", ")", ":", "\n", "    ", "vec_0", "=", "(", "corners", "[", ":", ",", "2", ",", ":", "]", "-", "corners", "[", ":", ",", "1", ",", ":", "]", ")", "/", "2.", "\n", "vec_1", "=", "(", "corners", "[", ":", ",", "0", ",", ":", "]", "-", "corners", "[", ":", ",", "4", ",", ":", "]", ")", "/", "2.", "\n", "vec_2", "=", "(", "corners", "[", ":", ",", "1", ",", ":", "]", "-", "corners", "[", ":", ",", "0", ",", ":", "]", ")", "/", "2.", "\n", "\n", "coeffs_0", "=", "np", ".", "linalg", ".", "norm", "(", "vec_0", ",", "axis", "=", "1", ")", "\n", "coeffs_1", "=", "np", ".", "linalg", ".", "norm", "(", "vec_1", ",", "axis", "=", "1", ")", "\n", "coeffs_2", "=", "np", ".", "linalg", ".", "norm", "(", "vec_2", ",", "axis", "=", "1", ")", "\n", "coeffs", "=", "np", ".", "stack", "(", "[", "coeffs_0", ",", "coeffs_1", ",", "coeffs_2", "]", ",", "axis", "=", "1", ")", "\n", "\n", "centroid", "=", "(", "corners", "[", ":", ",", "0", ",", ":", "]", "+", "corners", "[", ":", ",", "6", ",", ":", "]", ")", "/", "2.", "\n", "\n", "basis_0", "=", "np", ".", "dot", "(", "np", ".", "diag", "(", "1", "/", "coeffs_0", ")", ",", "vec_0", ")", "\n", "basis_1", "=", "np", ".", "dot", "(", "np", ".", "diag", "(", "1", "/", "coeffs_1", ")", ",", "vec_1", ")", "\n", "basis_2", "=", "np", ".", "dot", "(", "np", ".", "diag", "(", "1", "/", "coeffs_2", ")", ",", "vec_2", ")", "\n", "\n", "basis", "=", "np", ".", "stack", "(", "[", "basis_0", ",", "basis_1", ",", "basis_2", "]", ",", "axis", "=", "1", ")", "\n", "\n", "return", "{", "'basis'", ":", "basis", ",", "'coeffs'", ":", "coeffs", ",", "'centroid'", ":", "centroid", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.visualize.format_bbox": [[98, 128], ["range", "numpy.stack", "numpy.stack", "numpy.stack", "visualize.get_bdb_form_from_corners", "box[].tolist", "len", "basis_list.append", "centroid_list.append", "coeff_list.append"], "function", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.libs.get_bdb_form_from_corners"], ["", "def", "format_bbox", "(", "box", ",", "type", ")", ":", "\n", "\n", "    ", "if", "type", "==", "'prediction'", ":", "\n", "        ", "boxes", "=", "{", "}", "\n", "basis_list", "=", "[", "]", "\n", "centroid_list", "=", "[", "]", "\n", "coeff_list", "=", "[", "]", "\n", "\n", "# convert bounding boxes", "\n", "box_data", "=", "box", "[", "'bdb'", "]", "[", "0", "]", "\n", "\n", "for", "index", "in", "range", "(", "len", "(", "box_data", ")", ")", ":", "\n", "            ", "basis", "=", "box_data", "[", "index", "]", "[", "'basis'", "]", "[", "0", "]", "[", "0", "]", "\n", "centroid", "=", "box_data", "[", "index", "]", "[", "'centroid'", "]", "[", "0", "]", "[", "0", "]", "[", "0", "]", "\n", "coeffs", "=", "box_data", "[", "index", "]", "[", "'coeffs'", "]", "[", "0", "]", "[", "0", "]", "[", "0", "]", "\n", "basis_list", ".", "append", "(", "basis", ")", "\n", "centroid_list", ".", "append", "(", "centroid", ")", "\n", "coeff_list", ".", "append", "(", "coeffs", ")", "\n", "\n", "", "boxes", "[", "'basis'", "]", "=", "np", ".", "stack", "(", "basis_list", ",", "0", ")", "\n", "boxes", "[", "'centroid'", "]", "=", "np", ".", "stack", "(", "centroid_list", ",", "0", ")", "\n", "boxes", "[", "'coeffs'", "]", "=", "np", ".", "stack", "(", "coeff_list", ",", "0", ")", "\n", "boxes", "[", "'class_id'", "]", "=", "box", "[", "'class_id'", "]", "[", "0", "]", "\n", "\n", "", "else", ":", "\n", "\n", "        ", "boxes", "=", "get_bdb_form_from_corners", "(", "box", "[", "'bdb3D'", "]", ")", "\n", "boxes", "[", "'class_id'", "]", "=", "box", "[", "'size_cls'", "]", ".", "tolist", "(", ")", "\n", "\n", "", "return", "boxes", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.visualize.format_layout": [[129, 155], ["numpy.linalg.norm", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.array", "numpy.array", "layout_data.max", "layout_data.min"], "function", ["None"], ["", "def", "format_layout", "(", "layout_data", ")", ":", "\n", "\n", "    ", "layout_bdb", "=", "{", "}", "\n", "\n", "centroid", "=", "(", "layout_data", ".", "max", "(", "0", ")", "+", "layout_data", ".", "min", "(", "0", ")", ")", "/", "2.", "\n", "\n", "vector_z", "=", "(", "layout_data", "[", "1", "]", "-", "layout_data", "[", "0", "]", ")", "/", "2.", "\n", "coeff_z", "=", "np", ".", "linalg", ".", "norm", "(", "vector_z", ")", "\n", "basis_z", "=", "vector_z", "/", "coeff_z", "\n", "\n", "vector_x", "=", "(", "layout_data", "[", "2", "]", "-", "layout_data", "[", "1", "]", ")", "/", "2.", "\n", "coeff_x", "=", "np", ".", "linalg", ".", "norm", "(", "vector_x", ")", "\n", "basis_x", "=", "vector_x", "/", "coeff_x", "\n", "\n", "vector_y", "=", "(", "layout_data", "[", "0", "]", "-", "layout_data", "[", "4", "]", ")", "/", "2.", "\n", "coeff_y", "=", "np", ".", "linalg", ".", "norm", "(", "vector_y", ")", "\n", "basis_y", "=", "vector_y", "/", "coeff_y", "\n", "\n", "basis", "=", "np", ".", "array", "(", "[", "basis_x", ",", "basis_y", ",", "basis_z", "]", ")", "\n", "coeffs", "=", "np", ".", "array", "(", "[", "coeff_x", ",", "coeff_y", ",", "coeff_z", "]", ")", "\n", "\n", "layout_bdb", "[", "'coeffs'", "]", "=", "coeffs", "\n", "layout_bdb", "[", "'centroid'", "]", "=", "centroid", "\n", "layout_bdb", "[", "'basis'", "]", "=", "basis", "\n", "\n", "return", "layout_bdb", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.visualize.parse_args": [[395, 403], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.visualize.parse_args"], ["", "", "", "def", "parse_args", "(", ")", ":", "\n", "    ", "'''PARAMETERS'''", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'3D visualization of Total3D results.'", ")", "\n", "parser", ".", "add_argument", "(", "'--result_path'", ",", "type", "=", "str", ",", "default", "=", "'out/total3d/joint_train_new/visualization'", ",", "\n", "help", "=", "'Results exported from test.py.'", ")", "\n", "parser", ".", "add_argument", "(", "'--sequence_id'", ",", "type", "=", "int", ",", "default", "=", "274", ",", "\n", "help", "=", "'Give the sequence id in test set you want to visualize.'", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_config.SUNRGBD_CONFIG.__init__": [[16, 35], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.exists", "sunrgbd_config.SUNRGBD_CONFIG.__save_nyuclass_mapping"], "methods", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_config.SUNRGBD_CONFIG.__save_nyuclass_mapping"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Configuration of SUNRGBD data paths.\n        \"\"\"", "\n", "self", ".", "metadata_path", "=", "'./data/sunrgbd'", "\n", "self", ".", "data_root", "=", "os", ".", "path", ".", "join", "(", "self", ".", "metadata_path", ",", "'Dataset'", ")", "\n", "self", ".", "clean_data_root", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_root", ",", "'data_clean'", ")", "\n", "self", ".", "datasource_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_root", ",", "'SUNRGBD'", ")", "\n", "self", ".", "class_mapping_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "metadata_path", ",", "'class_mapping_from_toolbox.csv'", ")", "\n", "self", ".", "obj_avg_size_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "metadata_path", ",", "'preprocessed/size_avg_category.pkl'", ")", "\n", "self", ".", "layout_avg_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "metadata_path", ",", "'preprocessed/layout_avg_file.pkl'", ")", "\n", "# denote those samples that are wrongly labeled.", "\n", "self", ".", "error_samples", "=", "[", "936", ",", "1044", ",", "1711", ",", "2644", ",", "8619", ",", "\n", "8713", ",", "8929", ",", "8947", ",", "9166", ",", "9215", ",", "\n", "9249", ",", "9257", ",", "9298", ",", "9325", ",", "9560", ",", "9578", "]", "\n", "# self.class_mapping_894_to_40 = os.path.join(self.metadata_path, 'classMapping40.mat')", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "class_mapping_file", ")", ":", "\n", "            ", "self", ".", "__save_nyuclass_mapping", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_config.SUNRGBD_CONFIG.__save_nyuclass_mapping": [[36, 67], ["os.path.join", "sio.loadmat", "pd.DataFrame", "pd.DataFrame", "pd.merge", "pd.merge.to_csv", "names_6585[].lower", "list", "range", "range", "len"], "methods", ["None"], ["", "", "def", "__save_nyuclass_mapping", "(", "self", ")", ":", "\n", "\n", "        ", "import", "pandas", "as", "pd", "\n", "import", "scipy", ".", "io", "as", "sio", "\n", "from", "configs", ".", "data_config", "import", "NYU40CLASSES", "\n", "\n", "# read data", "\n", "class_mapping_sunrgbd_to_37", "=", "os", ".", "path", ".", "join", "(", "self", ".", "metadata_path", ",", "'SUNRGBD_37_mapping.mat'", ")", "\n", "mapping_file", "=", "sio", ".", "loadmat", "(", "class_mapping_sunrgbd_to_37", ")", "\n", "\n", "mapping_list", "=", "mapping_file", "[", "'SUNRGBD_37_mapping_unique'", "]", "\n", "names_6585", "=", "[", "'void'", "]", "+", "[", "mapping_file", "[", "'seglistall'", "]", "[", "0", "]", "[", "i", "]", "[", "0", "]", "for", "i", "in", "\n", "range", "(", "len", "(", "mapping_file", "[", "'seglistall'", "]", "[", "0", "]", ")", ")", "]", "\n", "# construct data frame", "\n", "labels_37", "=", "pd", ".", "DataFrame", "(", "{", "\n", "'Label_37'", ":", "list", "(", "range", "(", "0", ",", "38", ")", ")", ",", "\n", "'Name_37'", ":", "NYU40CLASSES", "[", ":", "38", "]", "\n", "}", ")", "\n", "\n", "parsing", "=", "mapping_list", "[", ":", ",", "0", "]", "\n", "unique", "=", "mapping_list", "[", ":", ",", "1", "]", "\n", "\n", "Name_6585", "=", "[", "names_6585", "[", "index", "]", ".", "lower", "(", ")", "for", "index", "in", "parsing", "]", "\n", "\n", "labels_full", "=", "pd", ".", "DataFrame", "(", "{", "\n", "'Label_6585'", ":", "parsing", ",", "\n", "'Label_37'", ":", "unique", ",", "\n", "'Name_6585'", ":", "Name_6585", "}", ")", "\n", "\n", "final_dataset", "=", "pd", ".", "merge", "(", "labels_full", ",", "labels_37", ")", "\n", "final_dataset", ".", "to_csv", "(", "self", ".", "class_mapping_file", ",", "sep", "=", "','", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_config.SUNRGBD_DATA.__init__": [[71, 81], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "K", ",", "R", ",", "scene_types", ",", "rgb_img", ",", "depth_map", ",", "layout_3D", ",", "sample_id", ",", "room_name", ",", "instance_data", ")", ":", "\n", "        ", "self", ".", "__cam_K", "=", "K", "\n", "self", ".", "__cam_R", "=", "R", "\n", "self", ".", "__scene_types", "=", "scene_types", "\n", "self", ".", "__rgb_img", "=", "rgb_img", "\n", "self", ".", "__depth_map", "=", "depth_map", "\n", "self", ".", "__layout_3D", "=", "layout_3D", "\n", "self", ".", "__sample_id", "=", "sample_id", "\n", "self", ".", "__room_name", "=", "room_name", "\n", "self", ".", "__instance_data", "=", "instance_data", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_config.SUNRGBD_DATA.__str__": [[82, 84], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "'room name: {}, sample id: {}'", ".", "format", "(", "self", ".", "__room_name", ",", "self", ".", "__sample_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_config.SUNRGBD_DATA.__repr__": [[85, 87], ["sunrgbd_config.SUNRGBD_DATA.__str__"], "methods", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_utils.SUNRGBDData.__str__"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__str__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_config.SUNRGBD_DATA.cam_K": [[88, 91], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "cam_K", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__cam_K", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_config.SUNRGBD_DATA.cam_R": [[92, 95], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "cam_R", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__cam_R", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_config.SUNRGBD_DATA.scene_types": [[96, 99], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "scene_types", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__scene_types", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_config.SUNRGBD_DATA.rgb_img": [[100, 103], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "rgb_img", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__rgb_img", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_config.SUNRGBD_DATA.depth_map": [[104, 107], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "depth_map", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__depth_map", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_config.SUNRGBD_DATA.layout_3D": [[108, 111], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "layout_3D", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__layout_3D", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_config.SUNRGBD_DATA.sample_id": [[112, 115], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "sample_id", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__sample_id", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_config.SUNRGBD_DATA.room_name": [[116, 119], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "room_name", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__room_name", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_config.SUNRGBD_DATA.instance_data": [[120, 123], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "instance_data", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__instance_data", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.generate_data.get_avg_data_by_sample": [[26, 51], ["print", "range", "utils.sunrgbd_utils.readsunrgbdframe", "utils.sunrgbd_utils.process_sunrgbd_frame", "len", "sizes_category[].append"], "function", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_utils.readsunrgbdframe", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_utils.process_sunrgbd_frame"], ["def", "get_avg_data_by_sample", "(", "sample_input", ")", ":", "\n", "\n", "    ", "i", ",", "sunrgbd_config", "=", "sample_input", "\n", "print", "(", "'Processing SUNRGBD sample ID: %d.'", "%", "(", "i", "+", "1", ")", ")", "\n", "\n", "# initiate sizes of objects for each category", "\n", "sizes_category", "=", "{", "}", "\n", "for", "class_id", "in", "range", "(", "len", "(", "NYU40CLASSES", ")", ")", ":", "\n", "        ", "sizes_category", "[", "class_id", "]", "=", "[", "]", "\n", "\n", "# get parse sunrgbd data", "\n", "", "sequence", "=", "readsunrgbdframe", "(", "sunrgbd_config", ",", "image_id", "=", "i", "+", "1", ")", "\n", "frame", "=", "process_sunrgbd_frame", "(", "sequence", ",", "flip", "=", "False", ")", "\n", "\n", "# get layout information", "\n", "layout_centroid", "=", "frame", ".", "layout_3D", "[", "'centroid'", "]", "\n", "layout_coeffs", "=", "frame", ".", "layout_3D", "[", "'coeffs'", "]", "\n", "\n", "# get object size information", "\n", "for", "bdb3d", "in", "frame", ".", "instance_data", "[", "'bdb3d'", "]", ":", "\n", "        ", "sizes_category", "[", "bdb3d", "[", "'class_id'", "]", "]", ".", "append", "(", "bdb3d", "[", "'coeffs'", "]", ")", "\n", "\n", "", "sample_output", "=", "[", "sizes_category", ",", "layout_centroid", ",", "layout_coeffs", "]", "\n", "\n", "return", "sample_output", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.generate_data.write_avg_data": [[52, 115], ["multiprocessing.Pool", "multiprocessing.Pool.map", "multiprocessing.Pool.close", "multiprocessing.Pool.join", "range", "print", "print", "print", "print", "numpy.vstack().mean", "sizes_category.items", "numpy.average().tolist", "numpy.average().tolist", "len", "layout_centroid.append", "layout_coeffs.append", "sizes_category_sample.items", "numpy.array().mean", "numpy.array().mean", "open", "pickle.dump", "open", "pickle.dump", "range", "numpy.vstack", "print", "numpy.average", "numpy.average", "numpy.average", "numpy.array", "numpy.array", "numpy.vstack"], "function", ["None"], ["", "def", "write_avg_data", "(", "sunrgbd_config", ")", ":", "\n", "    ", "'''\n    get the average object sizes (by category), average layout centroid depth and average layout coefficients.\n    '''", "\n", "\n", "# prepare samples for multi_processing", "\n", "sample_inputs", "=", "[", "(", "i", ",", "sunrgbd_config", ")", "for", "i", "in", "range", "(", "10335", ")", "if", "(", "i", "+", "1", ")", "not", "in", "sunrgbd_config", ".", "error_samples", "]", "\n", "\n", "p", "=", "Pool", "(", ")", "\n", "avg_data", "=", "p", ".", "map", "(", "get_avg_data_by_sample", ",", "sample_inputs", ")", "\n", "p", ".", "close", "(", ")", "\n", "p", ".", "join", "(", ")", "\n", "\n", "# initiate sizes of objects for each category", "\n", "sizes_category", "=", "{", "}", "\n", "for", "class_id", "in", "range", "(", "len", "(", "NYU40CLASSES", ")", ")", ":", "\n", "        ", "sizes_category", "[", "class_id", "]", "=", "[", "]", "\n", "\n", "# the two lists below is just to mark down the layout avg centroid and avg coeffs", "\n", "", "layout_centroid", "=", "[", "]", "\n", "layout_coeffs", "=", "[", "]", "\n", "\n", "# combine all samples", "\n", "for", "avg_sample", "in", "avg_data", ":", "\n", "        ", "sizes_category_sample", "=", "avg_sample", "[", "0", "]", "\n", "layout_centroid_sample", "=", "avg_sample", "[", "1", "]", "\n", "layout_coeffs_sample", "=", "avg_sample", "[", "2", "]", "\n", "\n", "layout_centroid", ".", "append", "(", "layout_centroid_sample", ")", "\n", "layout_coeffs", ".", "append", "(", "layout_coeffs_sample", ")", "\n", "\n", "for", "key", ",", "value", "in", "sizes_category_sample", ".", "items", "(", ")", ":", "\n", "            ", "sizes_category", "[", "key", "]", "+=", "value", "\n", "\n", "\n", "", "", "print", "(", "'Average layout centroid:'", ")", "\n", "print", "(", "np", ".", "array", "(", "layout_centroid", ")", ".", "mean", "(", "axis", "=", "0", ")", ")", "\n", "print", "(", "'Average layout coefficients:'", ")", "\n", "print", "(", "np", ".", "array", "(", "layout_coeffs", ")", ".", "mean", "(", "axis", "=", "0", ")", ")", "\n", "\n", "mean_size", "=", "np", ".", "vstack", "(", "[", "np", ".", "vstack", "(", "sizes_category", "[", "key", "]", ")", "for", "key", "in", "sizes_category", "if", "sizes_category", "[", "key", "]", "]", ")", ".", "mean", "(", "0", ")", "\n", "\n", "size_avg_category", "=", "{", "}", "\n", "for", "class_id", ",", "sizes", "in", "sizes_category", ".", "items", "(", ")", ":", "\n", "        ", "if", "not", "sizes_category", "[", "class_id", "]", ":", "\n", "# if a category does not exist, use the average size for initialization", "\n", "            ", "size_avg_category", "[", "class_id", "]", "=", "mean_size", "\n", "print", "(", "'Class: %s does not exists in database.'", "%", "(", "NYU40CLASSES", "[", "class_id", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "size_avg_category", "[", "class_id", "]", "=", "np", ".", "average", "(", "sizes_category", "[", "class_id", "]", ",", "0", ")", "\n", "\n", "# write object average size for each category", "\n", "", "", "with", "open", "(", "sunrgbd_config", ".", "obj_avg_size_file", ",", "'wb'", ")", "as", "file", ":", "\n", "        ", "pickle", ".", "dump", "(", "size_avg_category", ",", "file", ",", "protocol", "=", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n", "# use the new avg information to generate ground truth.", "\n", "", "dict", "=", "{", "}", "\n", "dict", "[", "'layout_centroid_avg'", "]", "=", "np", ".", "average", "(", "layout_centroid", ",", "axis", "=", "0", ")", ".", "tolist", "(", ")", "\n", "dict", "[", "'layout_coeffs_avg'", "]", "=", "np", ".", "average", "(", "layout_coeffs", ",", "axis", "=", "0", ")", ".", "tolist", "(", ")", "\n", "\n", "# write layout average data for each category", "\n", "with", "open", "(", "sunrgbd_config", ".", "layout_avg_file", ",", "'wb'", ")", "as", "file", ":", "\n", "        ", "pickle", ".", "dump", "(", "dict", ",", "file", ",", "protocol", "=", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.generate_data.save_gt_result": [[116, 264], ["print", "utils.sunrgbd_utils.readsunrgbdframe", "utils.sunrgbd_utils.process_sunrgbd_frame", "enumerate", "libs.tools.camera_cls_reg_sunrgbd", "libs.tools.ori_cls_reg", "libs.tools.layout_size_avg_residual", "utils.sunrgbd_utils.get_corners_of_bb3d_no_index", "libs.tools.list_of_dict_to_dict_of_list", "utils.sunrgbd_utils.proj_from_point_to_2d", "utils.sunrgbd_utils.get_corners_of_bb3d_no_index", "enumerate", "libs.tools.ori_cls_reg", "libs.tools.obj_size_avg_residual", "libs.tools.bin_cls_reg", "delta_2D.append", "delta_2D.append", "boxes_out.append", "os.path.join", "os.path.join", "open", "pickle.dump", "utils.sunrgbd_utils.proj_from_point_to_2d", "max", "max", "min", "min", "utils.sunrgbd_utils.check_bdb", "print", "instances.append", "numpy.linalg.norm", "bdb2D_from_3D[].min", "bdb2D_from_3D[].min", "bdb2D_from_3D[].max", "bdb2D_from_3D[].max", "net_utils.libs.get_iou", "float", "float", "float", "float", "str", "str"], "function", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_utils.readsunrgbdframe", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_utils.process_sunrgbd_frame", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.camera_cls_reg_sunrgbd", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.ori_cls_reg", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.layout_size_avg_residual", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.libs.get_corners_of_bb3d_no_index", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.list_of_dict_to_dict_of_list", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_utils.proj_from_point_to_2d", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.libs.get_corners_of_bb3d_no_index", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.ori_cls_reg", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.obj_size_avg_residual", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.bin_cls_reg", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_utils.proj_from_point_to_2d", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_utils.check_bdb", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.libs.get_iou"], ["", "", "def", "save_gt_result", "(", "sample_input", ")", ":", "\n", "    ", "i", "=", "sample_input", "[", "0", "]", "\n", "gt_config", "=", "sample_input", "[", "1", "]", "\n", "sunrgbd_config", "=", "sample_input", "[", "2", "]", "\n", "metadata", "=", "sample_input", "[", "3", "]", "\n", "iou_threshold", "=", "sample_input", "[", "4", "]", "\n", "flip", "=", "sample_input", "[", "5", "]", "\n", "\n", "bin", "=", "gt_config", ".", "bins", "\n", "print", "(", "'Processing sample ID: %d.'", "%", "(", "i", "+", "1", ")", ")", "\n", "sequence", "=", "readsunrgbdframe", "(", "sunrgbd_config", ",", "image_id", "=", "i", "+", "1", ")", "\n", "frame", "=", "process_sunrgbd_frame", "(", "sequence", ",", "flip", ")", "\n", "\n", "# get 2D 3D bboxes of each object.", "\n", "instances", "=", "[", "]", "\n", "\n", "for", "bdb3d_idx", ",", "bdb3d", "in", "enumerate", "(", "frame", ".", "instance_data", "[", "'bdb3d'", "]", ")", ":", "\n", "\n", "        ", "center_from_3D", ",", "invalid_ids", "=", "proj_from_point_to_2d", "(", "bdb3d", "[", "'centroid'", "]", ",", "frame", ".", "cam_K", ",", "frame", ".", "cam_R", ")", "\n", "\n", "# fiter out objects whose 3D center is behind the camera center as we did in SUNCG dataset,", "\n", "# even though its not possible in SUNRGBD dataset.", "\n", "if", "invalid_ids", ".", "size", ":", "\n", "            ", "continue", "\n", "\n", "", "bdb3d_corners", "=", "get_corners_of_bb3d_no_index", "(", "bdb3d", "[", "'basis'", "]", ",", "bdb3d", "[", "'coeffs'", "]", ",", "bdb3d", "[", "'centroid'", "]", ")", "\n", "\n", "bdb2D_from_3D", "=", "proj_from_point_to_2d", "(", "bdb3d_corners", ",", "frame", ".", "cam_K", ",", "frame", ".", "cam_R", ")", "[", "0", "]", "\n", "\n", "bdb2D_from_3D", "=", "{", "'x1'", ":", "max", "(", "bdb2D_from_3D", "[", ":", ",", "0", "]", ".", "min", "(", ")", ",", "0", ")", ",", "\n", "'y1'", ":", "max", "(", "bdb2D_from_3D", "[", ":", ",", "1", "]", ".", "min", "(", ")", ",", "0", ")", ",", "\n", "'x2'", ":", "min", "(", "bdb2D_from_3D", "[", ":", ",", "0", "]", ".", "max", "(", ")", ",", "frame", ".", "rgb_img", ".", "shape", "[", "1", "]", "-", "1", ")", ",", "\n", "'y2'", ":", "min", "(", "bdb2D_from_3D", "[", ":", ",", "1", "]", ".", "max", "(", ")", ",", "frame", ".", "rgb_img", ".", "shape", "[", "0", "]", "-", "1", ")", "}", "\n", "\n", "if", "not", "check_bdb", "(", "bdb2D_from_3D", ",", "frame", ".", "rgb_img", ".", "shape", "[", "1", "]", "-", "1", ",", "frame", ".", "rgb_img", ".", "shape", "[", "0", "]", "-", "1", ")", ":", "\n", "            ", "print", "(", "'bdb2d from 3d gt: NYU class: %s is not valid'", "%", "(", "bdb3d", "[", "'class_id'", "]", ")", ")", "\n", "continue", "\n", "\n", "# find the corresponding 2D bbox.", "\n", "", "max_iou", "=", "0", "\n", "iou_idx", "=", "-", "1", "\n", "\n", "for", "bdb2d_idx", ",", "bdb2d", "in", "enumerate", "(", "frame", ".", "instance_data", "[", "'bdb2d'", "]", ")", ":", "\n", "            ", "if", "bdb2d", "[", "'class_id'", "]", "==", "bdb3d", "[", "'class_id'", "]", ":", "\n", "                ", "iou", "=", "get_iou", "(", "bdb2D_from_3D", ",", "bdb2d", ")", "\n", "if", "iou", ">", "iou_threshold", "and", "iou", ">", "max_iou", ":", "\n", "                    ", "iou_idx", "=", "bdb2d_idx", "\n", "max_iou", "=", "iou", "\n", "\n", "", "", "", "if", "iou_idx", ">=", "0", ":", "\n", "            ", "instance", "=", "{", "'id'", ":", "bdb3d_idx", ",", "\n", "'class_id'", ":", "bdb3d", "[", "'class_id'", "]", ",", "\n", "'bdb2D'", ":", "frame", ".", "instance_data", "[", "'bdb2d'", "]", "[", "iou_idx", "]", ",", "\n", "'bdb3D'", ":", "bdb3d", ",", "\n", "'bdb3D_corners'", ":", "bdb3d_corners", ",", "\n", "'bdb2D_from_3D'", ":", "bdb2D_from_3D", ",", "\n", "'projected_2D_center'", ":", "center_from_3D", ",", "\n", "'mask'", ":", "frame", ".", "instance_data", "[", "'inst_masks'", "]", "[", "iou_idx", "]", "}", "\n", "\n", "instances", ".", "append", "(", "instance", ")", "\n", "\n", "# filter out a sample without any objects", "\n", "", "", "if", "not", "instances", ":", "\n", "        ", "return", "None", "\n", "\n", "", "'''get camera information'''", "\n", "camera", "=", "{", "}", "\n", "camera", "[", "'pitch_cls'", "]", ",", "camera", "[", "'pitch_reg'", "]", ",", "camera", "[", "'roll_cls'", "]", ",", "camera", "[", "'roll_reg'", "]", "=", "camera_cls_reg_sunrgbd", "(", "frame", ".", "cam_R", ",", "bin", ",", "i", "+", "1", ")", "\n", "camera", "[", "'K'", "]", "=", "frame", ".", "cam_K", "\n", "\n", "'''get layout information'''", "\n", "layout", "=", "{", "}", "\n", "# layout basis is not needed, we regard it as world system, hence its an identity matrix.", "\n", "l_centroid", "=", "frame", ".", "layout_3D", "[", "'centroid'", "]", "\n", "l_coeffs", "=", "frame", ".", "layout_3D", "[", "'coeffs'", "]", "\n", "l_basis", "=", "frame", ".", "layout_3D", "[", "'basis'", "]", "\n", "\n", "layout", "[", "'ori_cls'", "]", ",", "layout", "[", "'ori_reg'", "]", "=", "ori_cls_reg", "(", "l_basis", "[", "0", ",", ":", "]", ",", "bin", "[", "'layout_ori_bin'", "]", ")", "\n", "\n", "# use the way for object bbox estimation to predict layout bbox.", "\n", "layout", "[", "'centroid_reg'", "]", "=", "l_centroid", "-", "bin", "[", "'layout_centroid_avg'", "]", "\n", "layout", "[", "'coeffs_reg'", "]", "=", "layout_size_avg_residual", "(", "l_coeffs", ",", "bin", "[", "'layout_coeffs_avg'", "]", ")", "\n", "\n", "layout", "[", "'bdb3D'", "]", "=", "get_corners_of_bb3d_no_index", "(", "frame", ".", "layout_3D", "[", "'basis'", "]", ",", "frame", ".", "layout_3D", "[", "'coeffs'", "]", ",", "\n", "frame", ".", "layout_3D", "[", "'centroid'", "]", ")", "\n", "\n", "'''get object instance information'''", "\n", "boxes_out", "=", "[", "]", "\n", "\n", "for", "instance", "in", "instances", ":", "\n", "        ", "box_set", "=", "{", "}", "\n", "# Note that z-axis (3rd dimension) points toward the frontal direction", "\n", "box_set", "[", "'ori_cls'", "]", ",", "box_set", "[", "'ori_reg'", "]", "=", "ori_cls_reg", "(", "instance", "[", "'bdb3D'", "]", "[", "'basis'", "]", "[", "2", ",", ":", "]", ",", "bin", "[", "'ori_bin'", "]", ")", "\n", "\n", "box_set", "[", "'size_reg'", "]", "=", "obj_size_avg_residual", "(", "instance", "[", "'bdb3D'", "]", "[", "'coeffs'", "]", ",", "metadata", "[", "'size_avg_category'", "]", ",", "\n", "instance", "[", "'class_id'", "]", ")", "\n", "\n", "box_set", "[", "'bdb3D'", "]", "=", "instance", "[", "'bdb3D_corners'", "]", "\n", "\n", "bdb2D_from_3D", "=", "instance", "[", "'bdb2D_from_3D'", "]", "\n", "\n", "box_set", "[", "'bdb2D_from_3D'", "]", "=", "[", "bdb2D_from_3D", "[", "'x1'", "]", "/", "float", "(", "frame", ".", "cam_K", "[", "0", "]", "[", "2", "]", ")", ",", "\n", "bdb2D_from_3D", "[", "'y1'", "]", "/", "float", "(", "frame", ".", "cam_K", "[", "1", "]", "[", "2", "]", ")", ",", "\n", "bdb2D_from_3D", "[", "'x2'", "]", "/", "float", "(", "frame", ".", "cam_K", "[", "0", "]", "[", "2", "]", ")", ",", "\n", "bdb2D_from_3D", "[", "'y2'", "]", "/", "float", "(", "frame", ".", "cam_K", "[", "1", "]", "[", "2", "]", ")", "]", "\n", "\n", "box_set", "[", "'bdb2D_pos'", "]", "=", "[", "instance", "[", "'bdb2D'", "]", "[", "'x1'", "]", ",", "\n", "instance", "[", "'bdb2D'", "]", "[", "'y1'", "]", ",", "\n", "instance", "[", "'bdb2D'", "]", "[", "'x2'", "]", ",", "\n", "instance", "[", "'bdb2D'", "]", "[", "'y2'", "]", "]", "\n", "\n", "box_set", "[", "'centroid_cls'", "]", ",", "box_set", "[", "'centroid_reg'", "]", "=", "bin_cls_reg", "(", "bin", "[", "'centroid_bin'", "]", ",", "\n", "np", ".", "linalg", ".", "norm", "(", "instance", "[", "'bdb3D'", "]", "[", "'centroid'", "]", ")", ")", "\n", "\n", "# The shift between projected 2D center (from 3D centroid ) and 2D bounding box center", "\n", "delta_2D", "=", "[", "]", "\n", "delta_2D", ".", "append", "(", "\n", "(", "(", "box_set", "[", "'bdb2D_pos'", "]", "[", "0", "]", "+", "box_set", "[", "'bdb2D_pos'", "]", "[", "2", "]", ")", "/", "2.", "-", "instance", "[", "'projected_2D_center'", "]", "[", "0", "]", ")", "/", "(", "\n", "box_set", "[", "'bdb2D_pos'", "]", "[", "2", "]", "-", "box_set", "[", "'bdb2D_pos'", "]", "[", "0", "]", ")", ")", "\n", "delta_2D", ".", "append", "(", "\n", "(", "(", "box_set", "[", "'bdb2D_pos'", "]", "[", "1", "]", "+", "box_set", "[", "'bdb2D_pos'", "]", "[", "3", "]", ")", "/", "2.", "-", "instance", "[", "'projected_2D_center'", "]", "[", "1", "]", ")", "/", "(", "\n", "box_set", "[", "'bdb2D_pos'", "]", "[", "3", "]", "-", "box_set", "[", "'bdb2D_pos'", "]", "[", "1", "]", ")", ")", "\n", "box_set", "[", "'delta_2D'", "]", "=", "delta_2D", "\n", "box_set", "[", "'size_cls'", "]", "=", "instance", "[", "'class_id'", "]", "\n", "box_set", "[", "'mask'", "]", "=", "instance", "[", "'mask'", "]", "\n", "boxes_out", ".", "append", "(", "box_set", ")", "\n", "\n", "", "if", "not", "boxes_out", ":", "\n", "        ", "return", "None", "\n", "\n", "", "data", "=", "{", "}", "\n", "data", "[", "'rgb_img'", "]", "=", "frame", ".", "rgb_img", "\n", "data", "[", "'depth_map'", "]", "=", "frame", ".", "depth_map", "\n", "data", "[", "'boxes'", "]", "=", "list_of_dict_to_dict_of_list", "(", "boxes_out", ")", "\n", "data", "[", "'camera'", "]", "=", "camera", "\n", "data", "[", "'layout'", "]", "=", "layout", "\n", "data", "[", "'sequence_id'", "]", "=", "frame", ".", "sample_id", "\n", "\n", "if", "not", "flip", ":", "\n", "        ", "save_path", "=", "os", ".", "path", ".", "join", "(", "gt_config", ".", "train_test_data_path", ",", "str", "(", "data", "[", "'sequence_id'", "]", ")", "+", "'.pkl'", ")", "\n", "", "else", ":", "\n", "        ", "save_path", "=", "os", ".", "path", ".", "join", "(", "gt_config", ".", "train_test_data_path", ",", "str", "(", "data", "[", "'sequence_id'", "]", ")", "+", "'_flip.pkl'", ")", "\n", "\n", "", "with", "open", "(", "save_path", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "data", ",", "f", ",", "protocol", "=", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n", "", "return", "(", "frame", ".", "sample_id", ",", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.generate_data.preprocess": [[265, 294], ["range", "multiprocessing.Pool", "multiprocessing.Pool.map", "multiprocessing.Pool.close", "multiprocessing.Pool.join", "test_path_list.append", "train_path_list.append"], "function", ["None"], ["", "def", "preprocess", "(", "sunrgbd_config", ",", "gt_config", ",", "metadata", ",", "iou_threshold", "=", "0.1", ",", "flip", "=", "False", ",", "data_range", "=", "range", "(", "10335", ")", ")", ":", "\n", "    ", "'''\n    generate groundtruth data for training.\n    :param samples: all samples from each viewpoint.\n    :param metadata: required prior data for ground-truth generation.\n    :param flip: flip objects to augment data.\n    '''", "\n", "# save result by multi-processing", "\n", "sample_inputs", "=", "[", "(", "i", ",", "gt_config", ",", "sunrgbd_config", ",", "metadata", ",", "iou_threshold", ",", "flip", ")", "for", "i", "in", "data_range", "if", "(", "i", "+", "1", ")", "not", "in", "sunrgbd_config", ".", "error_samples", "]", "\n", "\n", "p", "=", "Pool", "(", "processes", "=", "4", ")", "\n", "save_outputs", "=", "p", ".", "map", "(", "save_gt_result", ",", "sample_inputs", ")", "\n", "p", ".", "close", "(", ")", "\n", "p", ".", "join", "(", ")", "\n", "\n", "# remove empty output", "\n", "save_outputs", "=", "[", "item", "for", "item", "in", "save_outputs", "if", "item", "]", "\n", "\n", "train_path_list", "=", "[", "]", "\n", "test_path_list", "=", "[", "]", "\n", "\n", "for", "sample_id", ",", "save_path", "in", "save_outputs", ":", "\n", "# get the path for data loading for training and testing", "\n", "        ", "if", "sample_id", "<=", "5050", ":", "\n", "            ", "test_path_list", ".", "append", "(", "save_path", ")", "\n", "", "else", ":", "\n", "            ", "train_path_list", ".", "append", "(", "save_path", ")", "\n", "\n", "", "", "return", "train_path_list", ",", "test_path_list", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_utils.SUNRGBDData.__init__": [[234, 253], ["numpy.shape"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "K", ",", "R_ex", ",", "R_tilt", ",", "bdb2d", ",", "bdb3d", ",", "gt3dcorner", ",", "imgdepth", ",", "imgrgb", ",", "seg2d", ",", "semantic_seg2d", ",", "manhattan_layout", ",", "\n", "sequence_name", ",", "sequence_id", ",", "scene_type", ")", ":", "\n", "        ", "self", ".", "_K", "=", "K", "\n", "# R_ex.T is the left-hand camera coordinates -> world coordinates transformation P_world = R_ex*P_camera", "\n", "self", ".", "_R_ex", "=", "R_ex", "\n", "# R_tilt is the right-hand camera coordinates  -> world coordinates transformation P_world = R_tilt*P_camera(after transformed to x, z, -y)", "\n", "self", ".", "_R_tilt", "=", "R_tilt", "\n", "self", ".", "_bdb2d", "=", "bdb2d", "\n", "self", ".", "_bdb3d", "=", "bdb3d", "\n", "self", ".", "_gt3dcorner", "=", "gt3dcorner", "\n", "self", ".", "_imgdepth", "=", "imgdepth", "\n", "self", ".", "_imgrgb", "=", "imgrgb", "\n", "self", ".", "_seg2d", "=", "seg2d", "\n", "self", ".", "_semantic_seg2d", "=", "semantic_seg2d", "\n", "self", ".", "_manhattan_layout", "=", "manhattan_layout", "\n", "self", ".", "_sequence_name", "=", "sequence_name", "\n", "self", ".", "_sequence_id", "=", "sequence_id", "\n", "self", ".", "_height", ",", "self", ".", "_width", "=", "np", ".", "shape", "(", "self", ".", "_imgrgb", ")", "[", ":", "2", "]", "\n", "self", ".", "_scene_type", "=", "scene_type", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_utils.SUNRGBDData.__str__": [[254, 256], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "'sequence_name: {}, sequence_id: {}'", ".", "format", "(", "self", ".", "_sequence_name", ",", "self", ".", "_sequence_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_utils.SUNRGBDData.__repr__": [[257, 259], ["sunrgbd_utils.SUNRGBDData.__str__"], "methods", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_utils.SUNRGBDData.__str__"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__str__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_utils.SUNRGBDData.width": [[260, 263], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "width", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_width", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_utils.SUNRGBDData.height": [[264, 267], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "height", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_height", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_utils.SUNRGBDData.K": [[268, 271], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "K", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_K", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_utils.SUNRGBDData.R_ex": [[272, 275], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "R_ex", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_R_ex", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_utils.SUNRGBDData.R_tilt": [[276, 279], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "R_tilt", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_R_tilt", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_utils.SUNRGBDData.bdb2d": [[280, 283], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "bdb2d", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_bdb2d", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_utils.SUNRGBDData.bdb3d": [[284, 287], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "bdb3d", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_bdb3d", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_utils.SUNRGBDData.gt3dcorner": [[288, 291], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "gt3dcorner", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_gt3dcorner", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_utils.SUNRGBDData.imgdepth": [[292, 295], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "imgdepth", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_imgdepth", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_utils.SUNRGBDData.imgrgb": [[296, 299], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "imgrgb", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_imgrgb", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_utils.SUNRGBDData.seg2d": [[300, 303], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "seg2d", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_seg2d", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_utils.SUNRGBDData.semantic_seg2d": [[304, 307], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "semantic_seg2d", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_semantic_seg2d", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_utils.SUNRGBDData.manhattan_layout": [[308, 311], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "manhattan_layout", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_manhattan_layout", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_utils.SUNRGBDData.sequence_name": [[312, 315], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "sequence_name", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_sequence_name", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_utils.SUNRGBDData.sequence_id": [[316, 319], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "sequence_id", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_sequence_id", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_utils.SUNRGBDData.scene_type": [[320, 323], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "scene_type", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_scene_type", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_utils.get_cam_KRT": [[17, 47], ["numpy.linalg.norm", "numpy.linalg.norm", "numpy.cross", "numpy.linalg.norm", "numpy.array", "numpy.vstack", "numpy.tan", "numpy.tan"], "function", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.cross"], ["def", "get_cam_KRT", "(", "cam_paras", ",", "im_size", ")", ":", "\n", "    ", "'''\n    Get the camera intrinsic matrix, rotation matrix and origin point.\n\n    A point [x, y, z] in world coordinate system can be transformed to the camera system by:\n    [x, y, z].dot(R)\n    :param cam_paras: camera parameters with SUNCG form.\n    :param im_size: [width, height] of an image.\n    :return: R, ori_pnt\n    '''", "\n", "ori_pnt", "=", "cam_paras", "[", ":", "3", "]", "\n", "toward", "=", "cam_paras", "[", "3", ":", "6", "]", "# x-axis", "\n", "toward", "/=", "np", ".", "linalg", ".", "norm", "(", "toward", ")", "\n", "up", "=", "cam_paras", "[", "6", ":", "9", "]", "# y-axis", "\n", "up", "/=", "np", ".", "linalg", ".", "norm", "(", "up", ")", "\n", "right", "=", "np", ".", "cross", "(", "toward", ",", "up", ")", "# z-axis", "\n", "right", "/=", "np", ".", "linalg", ".", "norm", "(", "right", ")", "\n", "R", "=", "np", ".", "vstack", "(", "[", "toward", ",", "up", ",", "right", "]", ")", ".", "T", "# columns respectively corresponds to toward, up, right vectors.", "\n", "\n", "fov_x", "=", "cam_paras", "[", "9", "]", "\n", "fov_y", "=", "cam_paras", "[", "10", "]", "\n", "width", "=", "im_size", "[", "0", "]", "\n", "height", "=", "im_size", "[", "1", "]", "\n", "\n", "f_x", "=", "width", "/", "(", "2", "*", "np", ".", "tan", "(", "fov_x", ")", ")", "\n", "f_y", "=", "height", "/", "(", "2", "*", "np", ".", "tan", "(", "fov_y", ")", ")", "\n", "\n", "K", "=", "np", ".", "array", "(", "[", "[", "f_x", ",", "0.", ",", "(", "width", "-", "1", ")", "/", "2.", "]", ",", "[", "0.", ",", "f_y", ",", "(", "height", "-", "1", ")", "/", "2.", "]", ",", "[", "0.", ",", "0.", ",", "1.", "]", "]", ")", "\n", "\n", "return", "K", ",", "R", ",", "ori_pnt", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_utils.rotate_towards_cam_front": [[48, 71], ["numpy.array", "numpy.linalg.matrix_power().dot", "vector.dot", "range", "numpy.linalg.matrix_power"], "function", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.dot", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.dot"], ["", "def", "rotate_towards_cam_front", "(", "normal", ",", "point", ",", "frontal_basis_id", ")", ":", "\n", "    ", "'''\n    roate normal in horizontal plane with pi/2 to make it the same direction with point.\n    '''", "\n", "\n", "rot_matrix", "=", "np", ".", "array", "(", "[", "[", "0", ",", "0", ",", "1", "]", ",", "[", "0", ",", "1", ",", "0", "]", ",", "[", "-", "1", ",", "0", ",", "0", "]", "]", ")", "\n", "\n", "rotated_normals", "=", "[", "np", ".", "linalg", ".", "matrix_power", "(", "rot_matrix", ",", "i", ")", ".", "dot", "(", "normal", ")", "for", "i", "in", "range", "(", "4", ")", "]", "\n", "\n", "max_dot_value", "=", "0.", "\n", "best_normal", "=", "None", "\n", "best_hori_id", "=", "None", "\n", "\n", "hori_id", "=", "1", "-", "frontal_basis_id", "\n", "for", "vector", "in", "rotated_normals", ":", "\n", "        ", "dot_value", "=", "vector", ".", "dot", "(", "point", ")", "\n", "hori_id", "=", "1", "-", "hori_id", "\n", "if", "dot_value", ">", "max_dot_value", ":", "\n", "            ", "max_dot_value", "=", "dot_value", "\n", "best_normal", "=", "vector", "\n", "best_hori_id", "=", "hori_id", "\n", "\n", "", "", "return", "best_normal", ",", "best_hori_id", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_utils.get_layout_info": [[72, 101], ["numpy.linalg.norm", "numpy.array", "sunrgbd_utils.rotate_towards_cam_front", "numpy.cross", "numpy.array", "numpy.vstack", "numpy.linalg.norm"], "function", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_utils.rotate_towards_cam_front", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.cross"], ["", "def", "get_layout_info", "(", "layout_3D", ",", "cam_front", ")", ":", "\n", "    ", "'''\n    get the layout bbox center, sizes and orientation.\n    We rotate the forward vector of layout (by pi/2), to make its dot product (with camera forward vector) to be maximal.\n    '''", "\n", "center", "=", "layout_3D", "[", "'centroid'", "]", "\n", "vectors", "=", "layout_3D", "[", "'vectors'", "]", "\n", "coeffs", "=", "np", ".", "linalg", ".", "norm", "(", "vectors", ",", "axis", "=", "1", ")", "\n", "basis", "=", "np", ".", "array", "(", "[", "vector", "/", "np", ".", "linalg", ".", "norm", "(", "vector", ")", "for", "vector", "in", "vectors", "]", ")", "\n", "\n", "# frontal axis", "\n", "horizontal_dims", "=", "[", "0", ",", "2", "]", "# must be two dimensional. It means x and z axis are the horizontal axes.", "\n", "horizontal_id", "=", "0", "# we rotate the x-axis (horizontal_dims[horizontal_id]) toward cam front.", "\n", "frontal_basis", "=", "basis", "[", "0", ",", ":", "]", "\n", "frontal_basis", ",", "horizontal_id", "=", "rotate_towards_cam_front", "(", "frontal_basis", ",", "cam_front", ",", "horizontal_id", ")", "\n", "\n", "up_basis", "=", "basis", "[", "1", ",", ":", "]", "\n", "right_basis", "=", "np", ".", "cross", "(", "frontal_basis", ",", "up_basis", ")", "\n", "\n", "frontal_coeff", "=", "coeffs", "[", "horizontal_dims", "[", "horizontal_id", "]", "]", "\n", "up_coeff", "=", "coeffs", "[", "1", "]", "\n", "right_coeff", "=", "coeffs", "[", "horizontal_dims", "[", "1", "-", "horizontal_id", "]", "]", "\n", "\n", "layout", "=", "{", "}", "\n", "layout", "[", "'centroid'", "]", "=", "center", "\n", "layout", "[", "'coeffs'", "]", "=", "np", ".", "array", "(", "[", "frontal_coeff", ",", "up_coeff", ",", "right_coeff", "]", ")", "\n", "layout", "[", "'basis'", "]", "=", "np", ".", "vstack", "(", "[", "frontal_basis", ",", "up_basis", ",", "right_basis", "]", ")", "\n", "\n", "return", "layout", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_utils.correct_flipped_objects": [[103, 129], ["numpy.array", "obj_points.dot.dot", "transform_matrix[].dot", "isinstance", "isinstance", "model_path.split", "numpy.rot90", "sampled_points.dot.dot"], "function", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.dot", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.dot", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.dot"], ["", "def", "correct_flipped_objects", "(", "obj_points", ",", "transform_matrix", ",", "model_path", ",", "voxels", "=", "None", ",", "sampled_points", "=", "None", ",", "flipped_objects_in_sunrgbd", "=", "[", "]", ")", ":", "\n", "    ", "'''\n    correct those wrongly labeled objects to correct orientation.\n    :param obj_points: obj points\n    :param model_path: the path of the obj model.\n    :param transform_matrix: original transfrom matrix from object system to world system\n    :return:\n    '''", "\n", "\n", "# These objects are with an opposite frontal direction.", "\n", "\n", "if", "model_path", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "in", "flipped_objects_in_sunrgbd", ":", "\n", "\n", "        ", "R", "=", "np", ".", "array", "(", "[", "[", "-", "1.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "0.", ",", "1.", ",", "0.", "]", ",", "\n", "[", "0.", ",", "0.", ",", "-", "1.", "]", "]", ")", "\n", "obj_points", "=", "obj_points", ".", "dot", "(", "R", ")", "\n", "\n", "transform_matrix", "[", ":", "3", ",", ":", "3", "]", "=", "transform_matrix", "[", ":", "3", ",", ":", "3", "]", ".", "dot", "(", "R", ")", "\n", "\n", "if", "isinstance", "(", "voxels", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "voxels", "=", "np", ".", "rot90", "(", "voxels", ",", "2", ",", "(", "0", ",", "2", ")", ")", "\n", "", "if", "isinstance", "(", "sampled_points", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "sampled_points", "=", "sampled_points", ".", "dot", "(", "R", ")", "\n", "\n", "", "", "return", "obj_points", ",", "transform_matrix", ",", "voxels", ",", "sampled_points", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_utils.proj_from_point_to_2d": [[131, 168], ["numpy.copy", "numpy.copy", "numpy.copy", "np.copy.dot", "numpy.array", "p_cam.dot.dot", "len", "numpy.where", "np.copy.dot"], "function", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.dot", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.dot", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.dot"], ["", "def", "proj_from_point_to_2d", "(", "_points", ",", "_K", ",", "_R", ")", ":", "\n", "    ", "'''\n    To project 3d points from world system to 2D image plane.\n    Note: The origin center of world system has been moved to the cam center.\n    :param points: Nx3 vector\n    :param K: 3x3 intrinsic matrix\n    :param R: Camera orientation. R:=[v1, v2, v3], the three column vectors respectively denote the toward, up,\n              right vector relative to the world system.\n    :return:\n    '''", "\n", "points", "=", "np", ".", "copy", "(", "_points", ")", "\n", "K", "=", "np", ".", "copy", "(", "_K", ")", "\n", "R", "=", "np", ".", "copy", "(", "_R", ")", "\n", "\n", "D_FLAG", "=", "0", "\n", "if", "len", "(", "points", ".", "shape", ")", "==", "1", ":", "\n", "        ", "points", "=", "points", "[", "None", ",", ":", "]", "\n", "D_FLAG", "=", "1", "\n", "\n", "", "p_cam", "=", "points", ".", "dot", "(", "R", ")", "\n", "# convert to traditional image coordinate system", "\n", "T_cam", "=", "np", ".", "array", "(", "[", "[", "0.", ",", "0.", ",", "1.", "]", ",", "[", "0.", ",", "-", "1.", ",", "0.", "]", ",", "[", "1.", ",", "0.", ",", "0.", "]", "]", ")", "\n", "p_cam", "=", "p_cam", ".", "dot", "(", "T_cam", ".", "T", ")", "\n", "\n", "# delete those points whose depth value is non-positive.", "\n", "invalid_ids", "=", "np", ".", "where", "(", "p_cam", "[", ":", ",", "2", "]", "<=", "0", ")", "[", "0", "]", "\n", "p_cam", "[", "invalid_ids", ",", "2", "]", "=", "0.0001", "\n", "\n", "p_cam_h", "=", "p_cam", "/", "p_cam", "[", ":", ",", "2", "]", "[", ":", ",", "None", "]", "\n", "pixels", "=", "(", "K", ".", "dot", "(", "p_cam_h", ".", "T", ")", ")", ".", "T", "\n", "\n", "if", "D_FLAG", "==", "1", ":", "\n", "        ", "pixels", "=", "pixels", "[", "0", "]", "[", ":", "2", "]", "\n", "", "else", ":", "\n", "        ", "pixels", "=", "pixels", "[", ":", ",", ":", "2", "]", "\n", "\n", "", "return", "pixels", ",", "invalid_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_utils.get_corners_of_bb3d_no_index": [[169, 183], ["numpy.zeros", "numpy.abs", "numpy.tile"], "function", ["None"], ["", "def", "get_corners_of_bb3d_no_index", "(", "basis", ",", "coeffs", ",", "centroid", ")", ":", "\n", "    ", "corners", "=", "np", ".", "zeros", "(", "(", "8", ",", "3", ")", ")", "\n", "coeffs", "=", "np", ".", "abs", "(", "coeffs", ")", "\n", "corners", "[", "0", ",", ":", "]", "=", "-", "basis", "[", "0", ",", ":", "]", "*", "coeffs", "[", "0", "]", "+", "basis", "[", "1", ",", ":", "]", "*", "coeffs", "[", "1", "]", "-", "basis", "[", "2", ",", ":", "]", "*", "coeffs", "[", "2", "]", "\n", "corners", "[", "1", ",", ":", "]", "=", "-", "basis", "[", "0", ",", ":", "]", "*", "coeffs", "[", "0", "]", "+", "basis", "[", "1", ",", ":", "]", "*", "coeffs", "[", "1", "]", "+", "basis", "[", "2", ",", ":", "]", "*", "coeffs", "[", "2", "]", "\n", "corners", "[", "2", ",", ":", "]", "=", "+", "basis", "[", "0", ",", ":", "]", "*", "coeffs", "[", "0", "]", "+", "basis", "[", "1", ",", ":", "]", "*", "coeffs", "[", "1", "]", "+", "basis", "[", "2", ",", ":", "]", "*", "coeffs", "[", "2", "]", "\n", "corners", "[", "3", ",", ":", "]", "=", "+", "basis", "[", "0", ",", ":", "]", "*", "coeffs", "[", "0", "]", "+", "basis", "[", "1", ",", ":", "]", "*", "coeffs", "[", "1", "]", "-", "basis", "[", "2", ",", ":", "]", "*", "coeffs", "[", "2", "]", "\n", "\n", "corners", "[", "4", ",", ":", "]", "=", "-", "basis", "[", "0", ",", ":", "]", "*", "coeffs", "[", "0", "]", "-", "basis", "[", "1", ",", ":", "]", "*", "coeffs", "[", "1", "]", "-", "basis", "[", "2", ",", ":", "]", "*", "coeffs", "[", "2", "]", "\n", "corners", "[", "5", ",", ":", "]", "=", "-", "basis", "[", "0", ",", ":", "]", "*", "coeffs", "[", "0", "]", "-", "basis", "[", "1", ",", ":", "]", "*", "coeffs", "[", "1", "]", "+", "basis", "[", "2", ",", ":", "]", "*", "coeffs", "[", "2", "]", "\n", "corners", "[", "6", ",", ":", "]", "=", "+", "basis", "[", "0", ",", ":", "]", "*", "coeffs", "[", "0", "]", "-", "basis", "[", "1", ",", ":", "]", "*", "coeffs", "[", "1", "]", "+", "basis", "[", "2", ",", ":", "]", "*", "coeffs", "[", "2", "]", "\n", "corners", "[", "7", ",", ":", "]", "=", "+", "basis", "[", "0", ",", ":", "]", "*", "coeffs", "[", "0", "]", "-", "basis", "[", "1", ",", ":", "]", "*", "coeffs", "[", "1", "]", "-", "basis", "[", "2", ",", ":", "]", "*", "coeffs", "[", "2", "]", "\n", "corners", "=", "corners", "+", "np", ".", "tile", "(", "centroid", ",", "(", "8", ",", "1", ")", ")", "\n", "return", "corners", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_utils.read_seg2d_data": [[185, 230], ["len", "range", "[].lower", "list", "list", "seg_list.append", "open", "json.load", "content.replace.replace", "json.loads", "len", "map", "map", "open", "type", "type", "data_file.readlines", "i.isdigit"], "function", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.CheckpointIO.load"], ["", "def", "read_seg2d_data", "(", "seg2d_path", ")", ":", "\n", "\n", "# load seg 2d data.", "\n", "    ", "try", ":", "\n", "        ", "with", "open", "(", "seg2d_path", ",", "encoding", "=", "'utf-8'", ")", "as", "data_file", ":", "\n", "            ", "seg2d_data", "=", "json", ".", "load", "(", "data_file", ")", "\n", "", "", "except", "Exception", "as", "err", ":", "\n", "        ", "with", "open", "(", "seg2d_path", ",", "'r'", ")", "as", "data_file", ":", "\n", "            ", "content", "=", "data_file", ".", "readlines", "(", ")", "[", "0", "]", "\n", "", "if", "\"\\\\\"", "in", "content", ":", "\n", "            ", "error_string", "=", "\"\\\\\"", "\n", "", "else", ":", "\n", "            ", "error_string", "=", "content", "[", "err", ".", "pos", "-", "1", ":", "err", ".", "pos", "+", "7", "]", "\n", "", "content", "=", "content", ".", "replace", "(", "error_string", ",", "\"\"", ")", "\n", "seg2d_data", "=", "json", ".", "loads", "(", "content", ")", "\n", "\n", "", "number_of_anot", "=", "len", "(", "seg2d_data", "[", "\"frames\"", "]", "[", "0", "]", "[", "\"polygon\"", "]", ")", "\n", "\n", "seg_list", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "number_of_anot", ")", ":", "\n", "        ", "x", "=", "seg2d_data", "[", "\"frames\"", "]", "[", "0", "]", "[", "\"polygon\"", "]", "[", "i", "]", "[", "\"x\"", "]", "\n", "y", "=", "seg2d_data", "[", "\"frames\"", "]", "[", "0", "]", "[", "\"polygon\"", "]", "[", "i", "]", "[", "\"y\"", "]", "\n", "idx_obj", "=", "seg2d_data", "[", "\"frames\"", "]", "[", "0", "]", "[", "\"polygon\"", "]", "[", "i", "]", "[", "\"object\"", "]", "\n", "\n", "if", "idx_obj", ">=", "len", "(", "seg2d_data", "[", "'objects'", "]", ")", ":", "\n", "            ", "continue", "\n", "\n", "", "label", "=", "seg2d_data", "[", "'objects'", "]", "[", "idx_obj", "]", "[", "\"name\"", "]", ".", "lower", "(", ")", "\n", "label", "=", "''", ".", "join", "(", "i", "for", "i", "in", "label", "if", "not", "i", ".", "isdigit", "(", ")", ")", "\n", "\n", "if", "type", "(", "x", ")", "!=", "list", "or", "type", "(", "y", ")", "!=", "list", ":", "\n", "            ", "continue", "\n", "\n", "", "all_points_x", "=", "list", "(", "map", "(", "round", ",", "x", ")", ")", "\n", "all_points_y", "=", "list", "(", "map", "(", "round", ",", "y", ")", ")", "\n", "\n", "seg_data", "=", "{", "'polygon'", ":", "\n", "{", "'x'", ":", "all_points_x", ",", "\n", "'y'", ":", "all_points_y", "}", ",", "\n", "'name'", ":", "label", "}", "\n", "\n", "seg_list", ".", "append", "(", "seg_data", ")", "\n", "\n", "", "return", "seg_list", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_utils.readsunrgbdframe": [[324, 377], ["f.close", "img_info[].replace", "img_info[].replace", "os.path.join", "os.path.join", "numpy.array", "numpy.array().astype", "sunrgbd_utils.read_seg2d_data", "os.path.join", "numpy.array().dot().dot", "sunrgbd_utils.SUNRGBDData", "open", "open", "pickle.load", "os.path.dirname", "PIL.Image.open", "np.array().astype.astype", "pickle.load.keys", "os.path.exists", "scipy.io.loadmat", "numpy.array", "os.path.join", "line.replace", "image_list.index", "os.path.join", "os.path.dirname", "numpy.array", "scipy.io.loadmat", "open", "f.readline", "os.path.join", "numpy.array().dot", "PIL.Image.open", "os.path.join", "str", "str", "numpy.array", "str"], "function", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_utils.read_seg2d_data", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.dot", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.CheckpointIO.load", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.dot"], ["", "", "def", "readsunrgbdframe", "(", "config", ",", "image_name", "=", "None", ",", "image_id", "=", "None", ")", ":", "\n", "    ", "clean_data_path", "=", "config", ".", "clean_data_root", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "clean_data_path", ",", "'imagelist.txt'", ")", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "image_list", "=", "[", "line", ".", "replace", "(", "'\\n'", ",", "''", ")", "for", "line", "in", "f", "]", "\n", "", "f", ".", "close", "(", ")", "\n", "if", "image_name", ":", "\n", "        ", "image_id", "=", "image_list", ".", "index", "(", "image_name", ")", "+", "1", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "clean_data_path", ",", "'data_all'", ",", "str", "(", "image_id", ")", "+", "'.pkl'", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "img_info", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "# change data root manually", "\n", "", "img_info", "[", "'imgrgb_path'", "]", "=", "img_info", "[", "'imgrgb_path'", "]", ".", "replace", "(", "'/home/siyuan/Documents/Dataset/SUNRGBD_ALL'", ",", "config", ".", "data_root", ")", "\n", "img_info", "[", "'imgdepth_path'", "]", "=", "img_info", "[", "'imgdepth_path'", "]", ".", "replace", "(", "'/home/siyuan/Documents/Dataset/SUNRGBD_ALL'", ",", "config", ".", "data_root", ")", "\n", "img_info", "[", "'seg2d_path'", "]", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "dirname", "(", "img_info", "[", "'imgdepth_path'", "]", ")", ")", ",", "'annotation2Dfinal'", ",", "'index.json'", ")", "\n", "img_info", "[", "'semantic_seg_path'", "]", "=", "os", ".", "path", ".", "join", "(", "config", ".", "data_root", ",", "'SUNRGBD/train_test_labels'", ",", "\"img-{0:06d}.png\"", ".", "format", "(", "image_id", ")", ")", "\n", "# load rgb img", "\n", "img_info", "[", "'imgrgb'", "]", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "img_info", "[", "'imgrgb_path'", "]", ")", ")", "\n", "\n", "# load depth img", "\n", "imgdepth", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "img_info", "[", "'imgdepth_path'", "]", ")", ")", ".", "astype", "(", "'uint16'", ")", "\n", "imgdepth", "=", "(", "imgdepth", ">>", "3", ")", "|", "(", "imgdepth", "<<", "13", ")", "\n", "imgdepth", "=", "imgdepth", ".", "astype", "(", "'single'", ")", "/", "1000", "\n", "imgdepth", "[", "imgdepth", ">", "8", "]", "=", "8", "\n", "img_info", "[", "'imgdepth'", "]", "=", "imgdepth", "\n", "\n", "if", "'gt3dcorner'", "not", "in", "img_info", ".", "keys", "(", ")", ":", "\n", "        ", "img_info", "[", "'gt3dcorner'", "]", "=", "None", "\n", "\n", "# load segmentation", "\n", "", "img_info", "[", "'seg2d'", "]", "=", "read_seg2d_data", "(", "img_info", "[", "'seg2d_path'", "]", ")", "\n", "# img_info['seg2d'] = None", "\n", "\n", "img_info", "[", "'manhattan_layout'", "]", "=", "loadmat", "(", "os", ".", "path", ".", "join", "(", "sunrgbd_config", ".", "data_root", ",", "'3dlayout'", ",", "str", "(", "image_id", ")", "+", "'.mat'", ")", ")", "[", "'manhattan_layout'", "]", ".", "T", "\n", "\n", "scene_category_path", "=", "os", ".", "path", ".", "join", "(", "config", ".", "data_root", ",", "img_info", "[", "'sequence_name'", "]", ",", "'scene.txt'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "scene_category_path", ")", ":", "\n", "        ", "scene_category", "=", "None", "\n", "", "else", ":", "\n", "        ", "with", "open", "(", "scene_category_path", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "scene_category", "=", "f", ".", "readline", "(", ")", "\n", "\n", "# use updated R_tilt", "\n", "", "", "R_tilt", "=", "loadmat", "(", "os", ".", "path", ".", "join", "(", "sunrgbd_config", ".", "data_root", ",", "'updated_rtilt'", ",", "str", "(", "image_id", ")", "+", "'.mat'", ")", ")", "[", "'r_tilt'", "]", "\n", "R_ex", "=", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "0", "]", ",", "[", "0", ",", "0", ",", "-", "1", "]", ",", "[", "0", ",", "1", ",", "0", "]", "]", ")", ".", "dot", "(", "R_tilt", ")", ".", "dot", "(", "\n", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "0", "]", ",", "[", "0", ",", "0", ",", "1", "]", ",", "[", "0", ",", "-", "1", ",", "0", "]", "]", ")", ")", "\n", "\n", "img_info", "[", "'R_tilt'", "]", "=", "R_tilt", "\n", "img_info", "[", "'R_ex'", "]", "=", "R_ex", "\n", "\n", "data_frame", "=", "SUNRGBDData", "(", "img_info", "[", "'K'", "]", ",", "img_info", "[", "'R_ex'", "]", ",", "img_info", "[", "'R_tilt'", "]", ",", "img_info", "[", "'bdb2d'", "]", ",", "img_info", "[", "'bdb3d'", "]", ",", "\n", "img_info", "[", "'gt3dcorner'", "]", ",", "img_info", "[", "'imgdepth'", "]", ",", "img_info", "[", "'imgrgb'", "]", ",", "img_info", "[", "'seg2d'", "]", ",", "img_info", "[", "'semantic_seg_path'", "]", ",", "\n", "img_info", "[", "'manhattan_layout'", "]", ",", "img_info", "[", "'sequence_name'", "]", ",", "image_id", ",", "scene_category", ")", "\n", "return", "data_frame", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_utils.cvt_R_ex_to_cam_R": [[379, 387], ["numpy.array", "np.array.T.dot().dot", "np.array.T.dot"], "function", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.dot", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.dot"], ["", "def", "cvt_R_ex_to_cam_R", "(", "R_ex", ")", ":", "\n", "    ", "'''\n    convert SUNRGBD camera R_ex matrix to transform objects from world system to camera system\n    both under the 'toward-up-right' system.\n    :return: cam_R matrix\n    '''", "\n", "trans_mat", "=", "np", ".", "array", "(", "[", "[", "0", ",", "0", ",", "1", "]", ",", "[", "0", ",", "-", "1", ",", "0", "]", ",", "[", "1", ",", "0", ",", "0", "]", "]", ")", "\n", "return", "(", "trans_mat", ".", "T", ")", ".", "dot", "(", "R_ex", ")", ".", "dot", "(", "trans_mat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_utils.get_layout_bdb_from_corners": [[390, 421], ["layout_t[].max", "layout_t[].min", "numpy.linalg.norm", "numpy.linalg.norm", "libs.tools.normalize_point", "numpy.cross", "numpy.array", "numpy.array", "numpy.array", "numpy.linalg.det", "numpy.argsort", "float", "float"], "function", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.normalize_point", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.cross", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.det"], ["", "def", "get_layout_bdb_from_corners", "(", "layout_t", ")", ":", "\n", "    ", "'''\n    get coeffs, basis, centroid from corners\n    :param corners: 8x3 numpy array corners of a 3D bounding box\n    [toward, up, right] coordinates\n    :return: bounding box parameters\n    '''", "\n", "\n", "y_max", "=", "layout_t", "[", ":", ",", "1", "]", ".", "max", "(", ")", "\n", "y_min", "=", "layout_t", "[", ":", ",", "1", "]", ".", "min", "(", ")", "\n", "points_2d", "=", "layout_t", "[", "layout_t", "[", ":", ",", "1", "]", "==", "y_max", ",", ":", "]", "\n", "points_2d", "=", "points_2d", "[", "np", ".", "argsort", "(", "points_2d", "[", ":", ",", "0", "]", ")", ",", ":", "]", "\n", "\n", "vector1", "=", "points_2d", "[", "3", "]", "-", "points_2d", "[", "1", "]", "\n", "vector2", "=", "points_2d", "[", "1", "]", "-", "points_2d", "[", "0", "]", "\n", "\n", "coeff1", "=", "np", ".", "linalg", ".", "norm", "(", "vector1", ")", "\n", "coeff2", "=", "np", ".", "linalg", ".", "norm", "(", "vector2", ")", "\n", "\n", "vector1", "=", "normalize_point", "(", "vector1", ")", "\n", "vector2", "=", "np", ".", "cross", "(", "vector1", ",", "[", "0", ",", "1", ",", "0", "]", ")", "\n", "\n", "centroid", "=", "np", ".", "array", "(", "\n", "[", "points_2d", "[", "0", ",", "0", "]", "+", "points_2d", "[", "3", ",", "0", "]", ",", "float", "(", "y_max", ")", "+", "float", "(", "y_min", ")", ",", "points_2d", "[", "0", ",", "2", "]", "+", "points_2d", "[", "3", ",", "2", "]", "]", ")", "*", "0.5", "\n", "\n", "basis", "=", "np", ".", "array", "(", "[", "vector1", ",", "[", "0", ",", "1", ",", "0", "]", ",", "vector2", "]", ")", "\n", "coeffs", "=", "np", ".", "array", "(", "[", "coeff1", ",", "y_max", "-", "y_min", ",", "coeff2", "]", ")", "*", "0.5", "\n", "assert", "np", ".", "linalg", ".", "det", "(", "basis", ")", ">", "0.", "\n", "bdb", "=", "{", "'centroid'", ":", "centroid", ",", "'basis'", ":", "basis", ",", "'coeffs'", ":", "coeffs", "}", "\n", "\n", "return", "bdb", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_utils.process_layout": [[423, 434], ["numpy.array", "sunrgbd_utils.get_layout_bdb_from_corners", "np.array.dot"], "function", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_utils.get_layout_bdb_from_corners", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.dot"], ["", "def", "process_layout", "(", "layout", ")", ":", "\n", "    ", "'''\n    transform sunrgbd layout to toward-up-right form.\n    :param layout: sunrgbd layout\n    :return: toward-up-right form.\n    '''", "\n", "\n", "trans_mat", "=", "np", ".", "array", "(", "[", "[", "0.", ",", "1.", ",", "0.", "]", ",", "[", "0.", ",", "0.", ",", "1.", "]", ",", "[", "1.", ",", "0.", ",", "0.", "]", "]", ")", "\n", "layout_t", "=", "(", "trans_mat", ".", "dot", "(", "layout", ".", "T", ")", ")", ".", "T", "\n", "bdb", "=", "get_layout_bdb_from_corners", "(", "layout_t", ")", "\n", "return", "bdb", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_utils.check_bdb": [[436, 459], ["None"], "function", ["None"], ["", "def", "check_bdb", "(", "bdb2d", ",", "m", ",", "n", ")", ":", "\n", "    ", "\"\"\"\n        Check valid a bounding box is valid\n\n        Parameters\n        ----------\n        bdb2d: dict\n            Keys: {'x1', 'x2', 'y1', 'y2'}\n            The (x1, y1) position is at the top left corner,\n            the (x2, y2) position is at the bottom right corner\n        m: int\n            width\n        n: int\n            height\n\n        Returns\n        -------\n        valid: bool\n    \"\"\"", "\n", "if", "bdb2d", "[", "'x1'", "]", ">=", "bdb2d", "[", "'x2'", "]", "or", "bdb2d", "[", "'y1'", "]", ">=", "bdb2d", "[", "'y2'", "]", "or", "bdb2d", "[", "'x1'", "]", ">", "m", "or", "bdb2d", "[", "'y1'", "]", ">", "n", ":", "\n", "        ", "return", "False", "\n", "", "else", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_utils.check_bdb2d": [[461, 469], ["sunrgbd_utils.check_bdb", "result.append", "print"], "function", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_utils.check_bdb"], ["", "", "def", "check_bdb2d", "(", "bdb2ds", ",", "img_shape", ")", ":", "\n", "    ", "result", "=", "[", "]", "\n", "for", "bdb2d", "in", "bdb2ds", ":", "\n", "        ", "if", "check_bdb", "(", "bdb2d", ",", "img_shape", "[", "1", "]", "-", "1", ",", "img_shape", "[", "0", "]", "-", "1", ")", ":", "\n", "            ", "result", ".", "append", "(", "bdb2d", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'ground truth not valid'", ")", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_utils.find_close_name": [[471, 483], ["max", "jellyfish.jaro_distance"], "function", ["None"], ["", "def", "find_close_name", "(", "name", ",", "label_list", ")", ":", "\n", "    ", "'''\n    find a close name from label list\n    :param name: input name\n    :param label_list: name dictionary\n    :return: close name.\n    '''", "\n", "leve", "=", "{", "}", "\n", "for", "label", "in", "label_list", ":", "\n", "        ", "leve", "[", "label", "]", "=", "jf", ".", "jaro_distance", "(", "name", ",", "label", ")", "\n", "\n", "", "return", "max", "(", "leve", ",", "key", "=", "leve", ".", "get", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_utils.cvt2nyu37class_map": [[485, 493], ["numpy.zeros_like", "mapping.items"], "function", ["None"], ["", "def", "cvt2nyu37class_map", "(", "inst_map", ",", "mapping", ")", ":", "\n", "\n", "    ", "class_map", "=", "np", ".", "zeros_like", "(", "inst_map", ")", "\n", "\n", "for", "key", ",", "value", "in", "mapping", ".", "items", "(", ")", ":", "\n", "        ", "class_map", "[", "inst_map", "==", "key", "]", "=", "value", "\n", "\n", "", "return", "class_map", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_utils.get_inst_map": [[494, 515], ["numpy.zeros_like", "enumerate", "numpy.zeros_like", "cv2.fillConvexPoly", "numpy.unique", "cv2.fillConvexPoly", "len", "numpy.vstack", "counts.argmax", "numpy.vstack", "numpy.nonzero"], "function", ["None"], ["", "def", "get_inst_map", "(", "seg2d_data", ",", "cls_map", ")", ":", "\n", "    ", "'''\n    get 2D instance map from segmented polygons.\n    :param seg2d_data: polygon data for each segmented object.\n    :param cls_map: semantic cls maps.\n    :return: 2D instance map with NYU37 labels.\n    '''", "\n", "\n", "inst_map", "=", "np", ".", "zeros_like", "(", "cls_map", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "inst_cls", "=", "{", "}", "\n", "\n", "for", "inst_id", ",", "inst", "in", "enumerate", "(", "seg2d_data", ")", ":", "\n", "        ", "mask", "=", "np", ".", "zeros_like", "(", "cls_map", ")", "\n", "cv2", ".", "fillConvexPoly", "(", "mask", ",", "np", ".", "vstack", "(", "[", "inst", "[", "'polygon'", "]", "[", "'x'", "]", ",", "inst", "[", "'polygon'", "]", "[", "'y'", "]", "]", ")", ".", "T", ",", "1", ")", "\n", "labels", ",", "counts", "=", "np", ".", "unique", "(", "cls_map", "[", "np", ".", "nonzero", "(", "mask", ")", "]", ",", "return_counts", "=", "True", ")", "\n", "if", "len", "(", "counts", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "", "inst_cls", "[", "inst_id", "+", "1", "]", "=", "labels", "[", "counts", ".", "argmax", "(", ")", "]", "\n", "cv2", ".", "fillConvexPoly", "(", "inst_map", ",", "np", ".", "vstack", "(", "[", "inst", "[", "'polygon'", "]", "[", "'x'", "]", ",", "inst", "[", "'polygon'", "]", "[", "'y'", "]", "]", ")", ".", "T", ",", "inst_id", "+", "1", ")", "\n", "\n", "", "return", "inst_map", ",", "inst_cls", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_utils.get_campact_layout": [[516, 586], ["numpy.meshgrid", "points_cam.dot().dot", "get_corners_of_bb3d_no_index().dot", "numpy.array", "numpy.array", "copy.deepcopy", "np.array.dot", "range", "range", "u.reshape", "v.reshape", "numpy.vstack", "np.vstack.append", "numpy.vstack", "min", "max", "min", "min", "max", "points_cloud[].min", "min", "max", "max", "min", "numpy.argwhere", "points_cam.dot", "sunrgbd_utils.get_corners_of_bb3d_no_index", "get_corners_of_bb3d_no_index().dot", "points_cloud[].min", "instance_corners[].min", "min", "instance_corners[].max", "max", "instance_corners[].min", "max", "instance_corners[].min", "min", "instance_corners[].max", "layout_corners[].max", "points_cloud[].max", "points_cloud[].min", "layout_corners[].min", "layout_corners[].min", "points_cloud[].min", "layout_corners[].max", "points_cloud[].max", "layout_corners[].max", "points_cloud[].max", "points_cloud[].min", "layout_corners[].min", "layout_corners[].min", "points_cloud[].min", "layout_corners[].max", "points_cloud[].max", "sunrgbd_utils.get_corners_of_bb3d_no_index"], "function", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.dot", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.dot", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.dot", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.dot", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.libs.get_corners_of_bb3d_no_index", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.dot", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.libs.get_corners_of_bb3d_no_index"], ["", "def", "get_campact_layout", "(", "layout", ",", "depth_map", ",", "cam_K", ",", "cam_R", ",", "bdb3ds", ")", ":", "\n", "\n", "# get 3d points cloud from depth map", "\n", "    ", "u", ",", "v", "=", "np", ".", "meshgrid", "(", "range", "(", "depth_map", ".", "shape", "[", "1", "]", ")", ",", "range", "(", "depth_map", ".", "shape", "[", "0", "]", ")", ")", "\n", "u", "=", "u", ".", "reshape", "(", "[", "1", ",", "-", "1", "]", ")", "[", "0", "]", "\n", "v", "=", "v", ".", "reshape", "(", "[", "1", ",", "-", "1", "]", ")", "[", "0", "]", "\n", "\n", "z_cam", "=", "depth_map", "[", "v", ",", "u", "]", "\n", "\n", "# remove zeros", "\n", "non_zero_indices", "=", "np", ".", "argwhere", "(", "z_cam", ")", ".", "T", "[", "0", "]", "\n", "z_cam", "=", "z_cam", "[", "non_zero_indices", "]", "\n", "u", "=", "u", "[", "non_zero_indices", "]", "\n", "v", "=", "v", "[", "non_zero_indices", "]", "\n", "\n", "# calculate coordinates", "\n", "x_cam", "=", "(", "u", "-", "cam_K", "[", "0", "]", "[", "2", "]", ")", "*", "z_cam", "/", "cam_K", "[", "0", "]", "[", "0", "]", "\n", "y_cam", "=", "(", "v", "-", "cam_K", "[", "1", "]", "[", "2", "]", ")", "*", "z_cam", "/", "cam_K", "[", "1", "]", "[", "1", "]", "\n", "\n", "# transform to toward-up-right coordinate system", "\n", "x3", "=", "z_cam", "\n", "y3", "=", "-", "y_cam", "\n", "z3", "=", "x_cam", "\n", "\n", "# transform from camera system to layout system", "\n", "points_cam", "=", "np", ".", "vstack", "(", "[", "x3", ",", "y3", ",", "z3", "]", ")", ".", "T", "\n", "points_cloud", "=", "points_cam", ".", "dot", "(", "cam_R", ".", "T", ")", ".", "dot", "(", "layout", "[", "'basis'", "]", ".", "T", ")", "\n", "\n", "# layout corners in layout system", "\n", "layout_corners", "=", "get_corners_of_bb3d_no_index", "(", "layout", "[", "'basis'", "]", ",", "layout", "[", "'coeffs'", "]", ",", "layout", "[", "'centroid'", "]", ")", ".", "dot", "(", "layout", "[", "'basis'", "]", ".", "T", ")", "\n", "\n", "# instance corners in layout system", "\n", "instance_corners", "=", "[", "]", "\n", "for", "bdb3d", "in", "bdb3ds", ":", "\n", "        ", "instance_corners", ".", "append", "(", "get_corners_of_bb3d_no_index", "(", "bdb3d", "[", "'basis'", "]", ",", "bdb3d", "[", "'coeffs'", "]", ",", "bdb3d", "[", "'centroid'", "]", ")", ".", "dot", "(", "layout", "[", "'basis'", "]", ".", "T", ")", ")", "\n", "\n", "", "if", "instance_corners", ":", "\n", "\n", "        ", "instance_corners", "=", "np", ".", "vstack", "(", "instance_corners", ")", "\n", "\n", "# scope", "\n", "x_min", "=", "min", "(", "points_cloud", "[", ":", ",", "0", "]", ".", "min", "(", ")", ",", "instance_corners", "[", ":", ",", "0", "]", ".", "min", "(", ")", ")", "\n", "x_max", "=", "max", "(", "min", "(", "layout_corners", "[", ":", ",", "0", "]", ".", "max", "(", ")", ",", "points_cloud", "[", ":", ",", "0", "]", ".", "max", "(", ")", ")", ",", "instance_corners", "[", ":", ",", "0", "]", ".", "max", "(", ")", ")", "\n", "\n", "y_min", "=", "min", "(", "max", "(", "points_cloud", "[", ":", ",", "1", "]", ".", "min", "(", ")", ",", "layout_corners", "[", ":", ",", "1", "]", ".", "min", "(", ")", ")", ",", "instance_corners", "[", ":", ",", "1", "]", ".", "min", "(", ")", ")", "\n", "y_max", "=", "y_min", "+", "3.", "\n", "\n", "z_min", "=", "min", "(", "max", "(", "layout_corners", "[", ":", ",", "2", "]", ".", "min", "(", ")", ",", "points_cloud", "[", ":", ",", "2", "]", ".", "min", "(", ")", ")", ",", "instance_corners", "[", ":", ",", "2", "]", ".", "min", "(", ")", ")", "\n", "z_max", "=", "max", "(", "min", "(", "layout_corners", "[", ":", ",", "2", "]", ".", "max", "(", ")", ",", "points_cloud", "[", ":", ",", "2", "]", ".", "max", "(", ")", ")", ",", "instance_corners", "[", ":", ",", "2", "]", ".", "max", "(", ")", ")", "\n", "\n", "", "else", ":", "\n", "# scope", "\n", "        ", "x_min", "=", "points_cloud", "[", ":", ",", "0", "]", ".", "min", "(", ")", "\n", "x_max", "=", "min", "(", "layout_corners", "[", ":", ",", "0", "]", ".", "max", "(", ")", ",", "points_cloud", "[", ":", ",", "0", "]", ".", "max", "(", ")", ")", "\n", "\n", "y_min", "=", "max", "(", "points_cloud", "[", ":", ",", "1", "]", ".", "min", "(", ")", ",", "layout_corners", "[", ":", ",", "1", "]", ".", "min", "(", ")", ")", "\n", "y_max", "=", "y_min", "+", "3.", "\n", "\n", "z_min", "=", "max", "(", "layout_corners", "[", ":", ",", "2", "]", ".", "min", "(", ")", ",", "points_cloud", "[", ":", ",", "2", "]", ".", "min", "(", ")", ")", "\n", "z_max", "=", "min", "(", "layout_corners", "[", ":", ",", "2", "]", ".", "max", "(", ")", ",", "points_cloud", "[", ":", ",", "2", "]", ".", "max", "(", ")", ")", "\n", "\n", "", "new_layout_centroid", "=", "np", ".", "array", "(", "[", "(", "x_min", "+", "x_max", ")", "/", "2.", ",", "(", "y_min", "+", "y_max", ")", "/", "2.", ",", "(", "z_min", "+", "z_max", ")", "/", "2.", "]", ")", "\n", "new_layout_coeffs", "=", "np", ".", "array", "(", "[", "(", "x_max", "-", "x_min", ")", "/", "2.", ",", "(", "y_max", "-", "y_min", ")", "/", "2.", ",", "(", "z_max", "-", "z_min", ")", "/", "2.", "]", ")", "\n", "\n", "new_layout", "=", "deepcopy", "(", "layout", ")", "\n", "\n", "new_layout", "[", "'centroid'", "]", "=", "new_layout_centroid", ".", "dot", "(", "layout", "[", "'basis'", "]", ")", "\n", "new_layout", "[", "'coeffs'", "]", "=", "new_layout_coeffs", "\n", "\n", "return", "new_layout", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_utils.get_NYU37_class_id": [[587, 609], ["class_mapping.Name_6585.values.astype", "enumerate", "name.lower.lower", "class_mapping[].Label_37.item", "sunrgbd_utils.find_close_name", "i.isdigit"], "function", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_utils.find_close_name"], ["", "def", "get_NYU37_class_id", "(", "names", ")", ":", "\n", "    ", "'''\n    get the NYU class id for each class name.\n    :param names: class names\n    :return: nyu id.\n    '''", "\n", "\n", "Name_6585", "=", "class_mapping", ".", "Name_6585", ".", "values", ".", "astype", "(", "'str'", ")", "\n", "\n", "nyu37class_dict", "=", "{", "}", "\n", "\n", "for", "inst_id", ",", "name", "in", "enumerate", "(", "names", ")", ":", "\n", "\n", "# process name", "\n", "        ", "name", "=", "name", ".", "lower", "(", ")", "\n", "name", "=", "''", ".", "join", "(", "i", "for", "i", "in", "name", "if", "not", "i", ".", "isdigit", "(", ")", ")", "\n", "\n", "# match name in class_mapping", "\n", "name", "=", "name", "if", "name", "in", "Name_6585", "else", "find_close_name", "(", "name", ",", "Name_6585", ")", "\n", "nyu37class_dict", "[", "inst_id", "+", "1", "]", "=", "class_mapping", "[", "class_mapping", ".", "Name_6585", "==", "name", "]", ".", "Label_37", ".", "item", "(", ")", "\n", "\n", "", "return", "nyu37class_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_utils.process_bdb2d": [[611, 633], ["max", "max", "min", "min", "bdb2ds_t_list.append", "bdb2d.keys", "sunrgbd_utils.get_NYU37_class_id"], "function", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_utils.get_NYU37_class_id"], ["", "def", "process_bdb2d", "(", "bdb2ds", ",", "img_shape", ")", ":", "\n", "\n", "    ", "bdb2ds_t_list", "=", "[", "]", "\n", "\n", "for", "bdb2d", "in", "bdb2ds", ":", "\n", "\n", "        ", "bdb2ds_t", "=", "{", "}", "\n", "\n", "if", "'class_id'", "in", "bdb2d", ".", "keys", "(", ")", ":", "\n", "            ", "class_id", "=", "bdb2d", "[", "'class_id'", "]", "\n", "", "else", ":", "\n", "            ", "class_id", "=", "get_NYU37_class_id", "(", "[", "bdb2d", "[", "'classname'", "]", "]", ")", "[", "1", "]", "\n", "\n", "", "bdb2ds_t", "[", "'class_id'", "]", "=", "class_id", "\n", "bdb2ds_t", "[", "'x1'", "]", "=", "max", "(", "bdb2d", "[", "'x1'", "]", ",", "0", ")", "\n", "bdb2ds_t", "[", "'y1'", "]", "=", "max", "(", "bdb2d", "[", "'y1'", "]", ",", "0", ")", "\n", "bdb2ds_t", "[", "'x2'", "]", "=", "min", "(", "bdb2d", "[", "'x2'", "]", ",", "img_shape", "[", "1", "]", "-", "1", ")", "\n", "bdb2ds_t", "[", "'y2'", "]", "=", "min", "(", "bdb2d", "[", "'y2'", "]", ",", "img_shape", "[", "0", "]", "-", "1", ")", "\n", "\n", "bdb2ds_t_list", ".", "append", "(", "bdb2ds_t", ")", "\n", "\n", "", "return", "bdb2ds_t_list", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_utils.process_msk": [[635, 705], ["numpy.stack", "enumerate", "enumerate", "enumerate", "numpy.sum", "numpy.sum", "candidate_inst_masks[].sum().astype", "numpy.argwhere", "np.argwhere.min", "np.argwhere.max", "target_inst_masks.append", "numpy.zeros_like", "cv2.fillConvexPoly", "numpy.unique", "inst_cls.append", "np.stack.append", "numpy.zeros_like", "cv2.fillConvexPoly", "numpy.unique", "inst_cls.append", "np.stack.append", "target_inst_masks.append", "candidate_inst_masks.reshape", "in_box_inst_masks.reshape", "target_inst_masks.append", "len", "len", "enumerate", "candidate_inst_masks[].sum", "numpy.vstack", "len", "len", "numpy.vstack", "numpy.nonzero", "counts.argmax", "numpy.nonzero", "counts.argmax", "numpy.array"], "function", ["None"], ["", "def", "process_msk", "(", "bdb2ds", ",", "cls_masks", ",", "seg2d", ",", "flip_seg", "=", "False", ")", ":", "\n", "    ", "'''\n    get instance masks from semantic masks\n    :param bdb2ds: instance bounding boxes\n    :param cls_masks: semantic masks\n    :return: instance masks with each entry as instance id.\n    '''", "\n", "# recover the NYU 37 class label for each object", "\n", "inst_cls", "=", "[", "]", "\n", "inst_masks", "=", "[", "]", "\n", "\n", "if", "not", "flip_seg", ":", "\n", "        ", "for", "inst_id", ",", "inst", "in", "enumerate", "(", "seg2d", ")", ":", "\n", "            ", "if", "(", "'polygon'", "not", "in", "inst", ")", "or", "(", "'x'", "not", "in", "inst", "[", "'polygon'", "]", ")", "or", "(", "'y'", "not", "in", "inst", "[", "'polygon'", "]", ")", "or", "(", "\n", "not", "inst", "[", "'polygon'", "]", "[", "'x'", "]", ")", "or", "(", "not", "inst", "[", "'polygon'", "]", "[", "'y'", "]", ")", ":", "\n", "                ", "continue", "\n", "\n", "", "mask", "=", "np", ".", "zeros_like", "(", "cls_masks", ")", "\n", "cv2", ".", "fillConvexPoly", "(", "mask", ",", "np", ".", "vstack", "(", "[", "inst", "[", "'polygon'", "]", "[", "'x'", "]", ",", "inst", "[", "'polygon'", "]", "[", "'y'", "]", "]", ")", ".", "T", ",", "1", ")", "\n", "labels", ",", "counts", "=", "np", ".", "unique", "(", "cls_masks", "[", "np", ".", "nonzero", "(", "mask", ")", "]", ",", "return_counts", "=", "True", ")", "\n", "if", "len", "(", "counts", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "", "inst_cls", ".", "append", "(", "labels", "[", "counts", ".", "argmax", "(", ")", "]", ")", "\n", "inst_masks", ".", "append", "(", "mask", ")", "\n", "", "", "else", ":", "\n", "\n", "        ", "for", "inst_id", ",", "inst", "in", "enumerate", "(", "seg2d", ")", ":", "\n", "            ", "if", "(", "'polygon'", "not", "in", "inst", ")", "or", "(", "'x'", "not", "in", "inst", "[", "'polygon'", "]", ")", "or", "(", "'y'", "not", "in", "inst", "[", "'polygon'", "]", ")", "or", "len", "(", "\n", "inst", "[", "'polygon'", "]", "[", "'x'", "]", ")", "==", "0", "or", "len", "(", "inst", "[", "'polygon'", "]", "[", "'y'", "]", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "\n", "", "mask", "=", "np", ".", "zeros_like", "(", "cls_masks", ")", "\n", "cv2", ".", "fillConvexPoly", "(", "mask", ",", "\n", "np", ".", "vstack", "(", "[", "mask", ".", "shape", "[", "1", "]", "-", "1", "-", "np", ".", "array", "(", "inst", "[", "'polygon'", "]", "[", "'x'", "]", ")", ",", "inst", "[", "'polygon'", "]", "[", "'y'", "]", "]", ")", ".", "T", ",", "\n", "1", ")", "\n", "labels", ",", "counts", "=", "np", ".", "unique", "(", "cls_masks", "[", "np", ".", "nonzero", "(", "mask", ")", "]", ",", "return_counts", "=", "True", ")", "\n", "if", "len", "(", "counts", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "", "inst_cls", ".", "append", "(", "labels", "[", "counts", ".", "argmax", "(", ")", "]", ")", "\n", "inst_masks", ".", "append", "(", "mask", ")", "\n", "\n", "", "", "inst_masks", "=", "np", ".", "stack", "(", "inst_masks", ")", "\n", "\n", "target_inst_masks", "=", "[", "]", "\n", "for", "inst_id", ",", "bdb2d", "in", "enumerate", "(", "bdb2ds", ")", ":", "\n", "        ", "candidate_inst_ids", "=", "[", "idx", "for", "idx", ",", "cls", "in", "enumerate", "(", "inst_cls", ")", "if", "cls", "==", "bdb2d", "[", "'class_id'", "]", "]", "\n", "\n", "if", "not", "candidate_inst_ids", ":", "\n", "            ", "target_inst_masks", ".", "append", "(", "None", ")", "\n", "continue", "\n", "\n", "", "candidate_inst_masks", "=", "inst_masks", "[", "candidate_inst_ids", "]", "\n", "\n", "n_pixel_for_each_inst", "=", "np", ".", "sum", "(", "candidate_inst_masks", ".", "reshape", "(", "candidate_inst_masks", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ",", "axis", "=", "1", ")", "\n", "in_box_inst_masks", "=", "candidate_inst_masks", "[", ":", ",", "bdb2d", "[", "'y1'", "]", ":", "bdb2d", "[", "'y2'", "]", "+", "1", ",", "bdb2d", "[", "'x1'", "]", ":", "bdb2d", "[", "'x2'", "]", "+", "1", "]", "\n", "n_in_box_pixel_for_each_inst", "=", "np", ".", "sum", "(", "in_box_inst_masks", ".", "reshape", "(", "in_box_inst_masks", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ",", "axis", "=", "1", ")", "\n", "in_box_ratio", "=", "n_in_box_pixel_for_each_inst", "/", "n_pixel_for_each_inst", "\n", "\n", "if", "True", "not", "in", "(", "in_box_ratio", ">=", "0.8", ")", ":", "\n", "            ", "target_inst_masks", ".", "append", "(", "None", ")", "\n", "continue", "\n", "\n", "", "target_inst_mask", "=", "candidate_inst_masks", "[", "in_box_ratio", ">=", "0.8", "]", ".", "sum", "(", "0", ")", ".", "astype", "(", "np", ".", "bool", ")", "\n", "locs", "=", "np", ".", "argwhere", "(", "target_inst_mask", ")", "\n", "y1", ",", "x1", "=", "locs", ".", "min", "(", "0", ")", "\n", "y2", ",", "x2", "=", "locs", ".", "max", "(", "0", ")", "\n", "target_inst_mask", "=", "{", "'msk_bdb'", ":", "[", "x1", ",", "y1", ",", "x2", ",", "y2", "]", ",", "'msk'", ":", "target_inst_mask", "[", "y1", ":", "y2", "+", "1", ",", "x1", ":", "x2", "+", "1", "]", ",", "'class_id'", ":", "bdb2d", "[", "'class_id'", "]", "}", "\n", "target_inst_masks", ".", "append", "(", "target_inst_mask", ")", "\n", "\n", "", "return", "target_inst_masks", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_utils.process_bdb3d": [[707, 735], ["numpy.array", "np.array.dot", "bdb3d[].astype", "np.array.dot", "numpy.array", "numpy.linalg.norm", "numpy.array", "bdb3ds_t.append", "numpy.linalg.det", "sunrgbd_utils.get_NYU37_class_id", "np.array.dot", "numpy.linalg.det", "libs.tools.normalize_point", "numpy.diag().dot", "numpy.diag"], "function", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.dot", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.dot", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.det", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_utils.get_NYU37_class_id", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.dot", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.det", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.normalize_point", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.dot"], ["", "def", "process_bdb3d", "(", "bdb3ds", ")", ":", "\n", "    ", "'''\n    transform sunrgbd layout to toward-up-right form in world system.\n    :param layout: sunrgbd layout\n    :return: toward-up-right form.\n    '''", "\n", "trans_mat", "=", "np", ".", "array", "(", "[", "[", "0.", ",", "1.", ",", "0.", "]", ",", "[", "0.", ",", "0.", ",", "1.", "]", ",", "[", "1.", ",", "0.", ",", "0.", "]", "]", ")", "\n", "bdb3ds_t", "=", "[", "]", "\n", "for", "bdb3d", "in", "bdb3ds", ":", "\n", "        ", "centroid", "=", "trans_mat", ".", "dot", "(", "bdb3d", "[", "'centroid'", "]", "[", "0", "]", ")", "\n", "coeffs", "=", "bdb3d", "[", "'coeffs'", "]", "[", "0", "]", "\n", "basis", "=", "bdb3d", "[", "'basis'", "]", ".", "astype", "(", "'float32'", ")", "\n", "vectors", "=", "trans_mat", ".", "dot", "(", "(", "trans_mat", ".", "dot", "(", "(", "np", ".", "diag", "(", "coeffs", ")", ".", "dot", "(", "basis", ")", ")", ".", "T", ")", ")", ".", "T", ")", "\n", "\n", "# let z-axis face forward (consistent with suncg data.)", "\n", "vectors", "=", "np", ".", "array", "(", "[", "vectors", "[", "2", "]", ",", "vectors", "[", "1", "]", ",", "-", "vectors", "[", "0", "]", "]", ")", "\n", "vectors", "[", "0", "]", "=", "vectors", "[", "0", "]", "if", "np", ".", "linalg", ".", "det", "(", "vectors", ")", ">", "0.", "else", "-", "vectors", "[", "0", "]", "\n", "\n", "bdb3d_t", "=", "{", "}", "\n", "bdb3d_t", "[", "'coeffs'", "]", "=", "np", ".", "linalg", ".", "norm", "(", "vectors", ",", "axis", "=", "1", ")", "\n", "bdb3d_t", "[", "'basis'", "]", "=", "np", ".", "array", "(", "[", "normalize_point", "(", "vector", ")", "for", "vector", "in", "vectors", "]", ")", "\n", "if", "np", ".", "linalg", ".", "det", "(", "vectors", ")", "<=", "0.", ":", "\n", "            ", "continue", "\n", "", "bdb3d_t", "[", "'centroid'", "]", "=", "centroid", "\n", "bdb3d_t", "[", "'class_id'", "]", "=", "get_NYU37_class_id", "(", "bdb3d", "[", "'classname'", "]", ")", "[", "1", "]", "\n", "bdb3ds_t", ".", "append", "(", "bdb3d_t", ")", "\n", "\n", "", "return", "bdb3ds_t", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_utils.transform_to_world": [[737, 760], ["copy.deepcopy", "layout[].dot", "layout[].dot", "world_R.T.dot", "copy.deepcopy", "bdb3d[].dot", "bdb3d[].dot", "new_bdb3ds.append"], "function", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.dot", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.dot", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.dot", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.dot", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.dot"], ["", "def", "transform_to_world", "(", "layout", ",", "bdb3ds", ",", "cam_R", ",", "world_R", ")", ":", "\n", "    ", "'''\n    transform scene to global world system\n    :param layout_3D:\n    :param bdb3ds_ws:\n    :param cam_R:\n    :param world_R:\n    :return:\n    '''", "\n", "new_layout", "=", "deepcopy", "(", "layout", ")", "\n", "new_layout", "[", "'centroid'", "]", "=", "layout", "[", "'centroid'", "]", ".", "dot", "(", "world_R", ")", "# layout centroid in world system", "\n", "new_layout", "[", "'basis'", "]", "=", "layout", "[", "'basis'", "]", ".", "dot", "(", "world_R", ")", "# layout vectors in world system", "\n", "\n", "new_cam_R", "=", "(", "world_R", ".", "T", ")", ".", "dot", "(", "cam_R", ")", "\n", "\n", "new_bdb3ds", "=", "[", "]", "\n", "for", "bdb3d", "in", "bdb3ds", ":", "\n", "        ", "new_bdb3d", "=", "deepcopy", "(", "bdb3d", ")", "\n", "new_bdb3d", "[", "'centroid'", "]", "=", "bdb3d", "[", "'centroid'", "]", ".", "dot", "(", "world_R", ")", "\n", "new_bdb3d", "[", "'basis'", "]", "=", "bdb3d", "[", "'basis'", "]", ".", "dot", "(", "world_R", ")", "\n", "new_bdb3ds", ".", "append", "(", "new_bdb3d", ")", "\n", "\n", "", "return", "new_layout", ",", "new_bdb3ds", ",", "new_cam_R", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_utils.flip_layout": [[762, 789], ["layout[].dot", "centroid_flip.dot.dot", "numpy.diag().dot().dot", "vectors_flip.dot.dot", "numpy.linalg.norm", "numpy.array", "numpy.diag().dot", "libs.tools.normalize_point", "numpy.linalg.det", "numpy.diag"], "function", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.dot", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.dot", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.dot", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.dot", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.dot", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.normalize_point", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.det"], ["", "def", "flip_layout", "(", "layout", ",", "cam_R", ",", "cam_R_flip", ")", ":", "\n", "    ", "'''\n    transform and flip sunrgbd layout to toward-up-right form.\n    :param layout: sunrgbd layout\n    :return: toward-up-right form.\n    '''", "\n", "\n", "# layout is the layout coordinates in world system (toward-up-right form).", "\n", "centroid_flip", "=", "layout", "[", "'centroid'", "]", ".", "dot", "(", "cam_R", ")", "# layout centroid in camera system", "\n", "centroid_flip", "[", "2", "]", "=", "-", "1", "*", "centroid_flip", "[", "2", "]", "# flip right-coordinate values", "\n", "centroid_flip", "=", "centroid_flip", ".", "dot", "(", "cam_R_flip", ".", "T", ")", "# transform back to world system", "\n", "\n", "vectors_flip", "=", "np", ".", "diag", "(", "layout", "[", "'coeffs'", "]", ")", ".", "dot", "(", "layout", "[", "'basis'", "]", ")", ".", "dot", "(", "cam_R", ")", "# layout vectors in camera system", "\n", "vectors_flip", "[", ":", ",", "2", "]", "=", "-", "1", "*", "vectors_flip", "[", ":", ",", "2", "]", "# flip right-coordinate values", "\n", "vectors_flip", "=", "vectors_flip", ".", "dot", "(", "cam_R_flip", ".", "T", ")", "# transform back to world system", "\n", "\n", "coeffs_flip", "=", "np", ".", "linalg", ".", "norm", "(", "vectors_flip", ",", "axis", "=", "1", ")", "\n", "basis_flip", "=", "np", ".", "array", "(", "[", "normalize_point", "(", "vector", ")", "for", "vector", "in", "vectors_flip", "]", ")", "\n", "\n", "basis_flip", "[", "2", ",", ":", "]", "=", "basis_flip", "[", "2", ",", ":", "]", "if", "np", ".", "linalg", ".", "det", "(", "basis_flip", ")", ">", "0", "else", "-", "basis_flip", "[", "2", ",", ":", "]", "\n", "\n", "bdb_flip", "=", "{", "}", "\n", "bdb_flip", "[", "'basis'", "]", "=", "basis_flip", "\n", "bdb_flip", "[", "'coeffs'", "]", "=", "coeffs_flip", "\n", "bdb_flip", "[", "'centroid'", "]", "=", "centroid_flip", "\n", "\n", "return", "bdb_flip", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_utils.flip_bdb2d": [[790, 799], ["copy.deepcopy", "enumerate"], "function", ["None"], ["", "def", "flip_bdb2d", "(", "bdb2ds", ",", "im_width", ")", ":", "\n", "\n", "    ", "bdb2ds_flip", "=", "deepcopy", "(", "bdb2ds", ")", "\n", "\n", "for", "bdb_idx", ",", "bdb2d", "in", "enumerate", "(", "bdb2ds", ")", ":", "\n", "        ", "bdb2ds_flip", "[", "bdb_idx", "]", "[", "'x1'", "]", "=", "im_width", "-", "1", "-", "bdb2d", "[", "'x2'", "]", "\n", "bdb2ds_flip", "[", "bdb_idx", "]", "[", "'x2'", "]", "=", "im_width", "-", "1", "-", "bdb2d", "[", "'x1'", "]", "\n", "\n", "", "return", "bdb2ds_flip", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_utils.flip_bdb3d": [[801, 825], ["copy.deepcopy", "enumerate", "bdb3d[].dot", "centroid_flip.dot.dot", "numpy.diag().dot().dot", "vectors_flip.dot.dot", "numpy.linalg.norm", "numpy.array", "numpy.diag().dot", "libs.tools.normalize_point", "numpy.linalg.det", "numpy.diag"], "function", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.dot", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.dot", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.dot", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.dot", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.dot", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.normalize_point", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.det"], ["", "def", "flip_bdb3d", "(", "bdb3ds", ",", "cam_R", ",", "cam_R_flip", ")", ":", "\n", "\n", "    ", "bdb3ds_flip", "=", "deepcopy", "(", "bdb3ds", ")", "\n", "\n", "for", "bdb_idx", ",", "bdb3d", "in", "enumerate", "(", "bdb3ds", ")", ":", "\n", "        ", "centroid_flip", "=", "bdb3d", "[", "'centroid'", "]", ".", "dot", "(", "cam_R", ")", "# transform bdb centroid to camera system", "\n", "centroid_flip", "[", "2", "]", "=", "-", "1", "*", "centroid_flip", "[", "2", "]", "# flip right-coordinate", "\n", "centroid_flip", "=", "centroid_flip", ".", "dot", "(", "cam_R_flip", ".", "T", ")", "# transform back to world system", "\n", "\n", "vectors_flip", "=", "np", ".", "diag", "(", "bdb3d", "[", "'coeffs'", "]", ")", ".", "dot", "(", "bdb3d", "[", "'basis'", "]", ")", ".", "dot", "(", "cam_R", ")", "# transform vectors to camera system", "\n", "vectors_flip", "[", ":", ",", "2", "]", "=", "-", "1", "*", "vectors_flip", "[", ":", ",", "2", "]", "# flip right-coordinate", "\n", "vectors_flip", "=", "vectors_flip", ".", "dot", "(", "cam_R_flip", ".", "T", ")", "# transform back to world system", "\n", "\n", "coeffs_flip", "=", "np", ".", "linalg", ".", "norm", "(", "vectors_flip", ",", "axis", "=", "1", ")", "\n", "basis_flip", "=", "np", ".", "array", "(", "[", "normalize_point", "(", "vector", ")", "for", "vector", "in", "vectors_flip", "]", ")", "\n", "\n", "# keep the basis_flip[2,:] vector, because it stands for the forward direction of an object.", "\n", "basis_flip", "[", "0", ",", ":", "]", "=", "basis_flip", "[", "0", ",", ":", "]", "if", "np", ".", "linalg", ".", "det", "(", "basis_flip", ")", ">", "0", "else", "-", "basis_flip", "[", "0", ",", ":", "]", "\n", "\n", "bdb3ds_flip", "[", "bdb_idx", "]", "[", "'basis'", "]", "=", "basis_flip", "\n", "bdb3ds_flip", "[", "bdb_idx", "]", "[", "'coeffs'", "]", "=", "coeffs_flip", "\n", "bdb3ds_flip", "[", "bdb_idx", "]", "[", "'centroid'", "]", "=", "centroid_flip", "\n", "\n", "", "return", "bdb3ds_flip", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_utils.process_sunrgbd_frame": [[826, 914], ["sunrgbd_utils.cvt_R_ex_to_cam_R", "libs.tools.get_world_R", "sunrgbd_utils.process_layout", "numpy.diag().dot", "sunrgbd_utils.get_layout_info", "sunrgbd_utils.process_bdb2d", "numpy.array", "sunrgbd_utils.process_msk", "sunrgbd_utils.process_bdb3d", "sunrgbd_utils.transform_to_world", "utils.sunrgbd_config.SUNRGBD_DATA", "copy.deepcopy", "sunrgbd_utils.cvt_R_ex_to_cam_R", "libs.tools.yaw_pitch_roll_from_R", "libs.tools.R_from_yaw_pitch_roll", "sunrgbd_utils.process_layout", "numpy.diag().dot", "sunrgbd_utils.get_layout_info", "sunrgbd_utils.flip_layout", "sunrgbd_utils.process_bdb2d", "sunrgbd_utils.flip_bdb2d", "numpy.array", "sunrgbd_utils.process_msk", "sunrgbd_utils.process_bdb3d", "sunrgbd_utils.flip_bdb3d", "numpy.array", "numpy.array", "utils.sunrgbd_config.SUNRGBD_DATA", "sunrgbd_utils.check_bdb2d", "PIL.Image.open", "sunrgbd_utils.check_bdb2d", "PIL.Image.open().transpose", "PIL.Image.fromarray().transpose", "PIL.Image.fromarray().transpose", "numpy.diag", "numpy.diag", "PIL.Image.open", "PIL.Image.fromarray", "PIL.Image.fromarray"], "function", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_utils.cvt_R_ex_to_cam_R", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.get_world_R", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_utils.process_layout", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.dot", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_utils.get_layout_info", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_utils.process_bdb2d", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_utils.process_msk", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_utils.process_bdb3d", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_utils.transform_to_world", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_utils.cvt_R_ex_to_cam_R", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.yaw_pitch_roll_from_R", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.R_from_yaw_pitch_roll", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_utils.process_layout", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.dot", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_utils.get_layout_info", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_utils.flip_layout", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_utils.process_bdb2d", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_utils.flip_bdb2d", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_utils.process_msk", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_utils.process_bdb3d", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_utils.flip_bdb3d", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_utils.check_bdb2d", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.utils.sunrgbd_utils.check_bdb2d"], ["", "def", "process_sunrgbd_frame", "(", "sample", ",", "flip", "=", "False", ")", ":", "\n", "    ", "'''\n    Read SUNRGBD frame and transform all 3D data to 'toward-up-right' layout system.\n    :param sample: SUNRGBD frame\n    :return:\n    '''", "\n", "# TODO: define global coordinate system", "\n", "if", "not", "flip", ":", "\n", "        ", "cam_K", "=", "sample", ".", "K", "\n", "cam_R", "=", "cvt_R_ex_to_cam_R", "(", "sample", ".", "R_ex", ")", "# camera_rotation matrix in world system", "\n", "\n", "# define a world system", "\n", "world_R", "=", "get_world_R", "(", "cam_R", ")", "\n", "\n", "layout", "=", "process_layout", "(", "sample", ".", "manhattan_layout", ")", "# layout bbox in world system", "\n", "\n", "centroid", "=", "layout", "[", "'centroid'", "]", "\n", "vectors", "=", "np", ".", "diag", "(", "layout", "[", "'coeffs'", "]", ")", ".", "dot", "(", "layout", "[", "'basis'", "]", ")", "\n", "\n", "# Set all points relative to layout orientation. (i.e. let layout orientation to be the world system.)", "\n", "# The forward direction (x-axis) of layout orientation should point toward camera forward direction.", "\n", "layout_3D", "=", "get_layout_info", "(", "{", "'centroid'", ":", "centroid", ",", "'vectors'", ":", "vectors", "}", ",", "cam_R", "[", ":", ",", "0", "]", ")", "\n", "\n", "bdb2ds", "=", "process_bdb2d", "(", "check_bdb2d", "(", "sample", ".", "bdb2d", ",", "sample", ".", "imgrgb", ".", "shape", ")", ",", "sample", ".", "imgrgb", ".", "shape", ")", "\n", "masks", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "sample", ".", "semantic_seg2d", ")", ")", "\n", "masks", "=", "process_msk", "(", "bdb2ds", ",", "masks", ",", "sample", ".", "seg2d", ",", "flip_seg", "=", "False", ")", "\n", "bdb3ds_ws", "=", "process_bdb3d", "(", "sample", ".", "bdb3d", ")", "# bdb3d in old world system", "\n", "\n", "# transform everything to world system", "\n", "layout_3D", ",", "bdb3ds_ws", ",", "cam_R", "=", "transform_to_world", "(", "layout_3D", ",", "bdb3ds_ws", ",", "cam_R", ",", "world_R", ")", "\n", "\n", "instance_info_list", "=", "{", "}", "# bdb2d and bdb3d in layout system", "\n", "\n", "instance_info_list", "[", "'bdb2d'", "]", "=", "bdb2ds", "\n", "instance_info_list", "[", "'bdb3d'", "]", "=", "bdb3ds_ws", "\n", "instance_info_list", "[", "'inst_masks'", "]", "=", "masks", "\n", "# layout_3D = get_campact_layout(layout_3D, sample.imgdepth, cam_K, cam_R, bdb3ds_ws)", "\n", "\n", "frame", "=", "SUNRGBD_DATA", "(", "cam_K", ",", "cam_R", ",", "sample", ".", "scene_type", ",", "sample", ".", "imgrgb", ",", "sample", ".", "imgdepth", ",", "layout_3D", ",", "sample", ".", "sequence_id", ",", "\n", "sample", ".", "sequence_name", ",", "instance_info_list", ")", "\n", "", "else", ":", "\n", "        ", "img_shape", "=", "sample", ".", "imgrgb", ".", "shape", "[", ":", "2", "]", "\n", "\n", "cam_K_flip", "=", "deepcopy", "(", "sample", ".", "K", ")", "\n", "cam_K_flip", "[", "0", "]", "[", "2", "]", "=", "img_shape", "[", "1", "]", "-", "cam_K_flip", "[", "0", "]", "[", "2", "]", "# flip cam_K", "\n", "\n", "# camera vectors in world system.", "\n", "cam_R", "=", "cvt_R_ex_to_cam_R", "(", "sample", ".", "R_ex", ")", "# camera_rotation matrix in world system", "\n", "_", ",", "pitch", ",", "roll", "=", "yaw_pitch_roll_from_R", "(", "cam_R", ")", "\n", "# flip camera R", "\n", "cam_R_flip", "=", "R_from_yaw_pitch_roll", "(", "0", ",", "pitch", ",", "-", "roll", ")", "\n", "\n", "# get ordinary layout first in world system.", "\n", "layout", "=", "process_layout", "(", "sample", ".", "manhattan_layout", ")", "# layout bbox in world system", "\n", "\n", "centroid", "=", "layout", "[", "'centroid'", "]", "\n", "vectors", "=", "np", ".", "diag", "(", "layout", "[", "'coeffs'", "]", ")", ".", "dot", "(", "layout", "[", "'basis'", "]", ")", "\n", "\n", "# The forward direction (x-axis) of layout orientation should point toward camera forward direction.", "\n", "layout_3D", "=", "get_layout_info", "(", "{", "'centroid'", ":", "centroid", ",", "'vectors'", ":", "vectors", "}", ",", "cam_R", "[", ":", ",", "0", "]", ")", "\n", "\n", "# flip layout (we now need to horienzontally flip layout in camera system first and transform it back to world system.)", "\n", "layout_3D_flip", "=", "flip_layout", "(", "layout_3D", ",", "cam_R", ",", "cam_R_flip", ")", "# flipped layout bbox in world system", "\n", "\n", "# Set all points relative to layout orientation. (i.e. let layout orientation to be the world system.)", "\n", "bdb2ds", "=", "process_bdb2d", "(", "check_bdb2d", "(", "sample", ".", "bdb2d", ",", "sample", ".", "imgrgb", ".", "shape", ")", ",", "sample", ".", "imgrgb", ".", "shape", ")", "\n", "bdb2ds_flip", "=", "flip_bdb2d", "(", "bdb2ds", ",", "sample", ".", "imgrgb", ".", "shape", "[", "1", "]", ")", "\n", "masks", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "sample", ".", "semantic_seg2d", ")", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", ")", "\n", "masks", "=", "process_msk", "(", "bdb2ds_flip", ",", "masks", ",", "sample", ".", "seg2d", ",", "flip_seg", "=", "True", ")", "\n", "bdb3ds_ws", "=", "process_bdb3d", "(", "sample", ".", "bdb3d", ")", "# bdb3d in world system", "\n", "bdb3ds_ws_flip", "=", "flip_bdb3d", "(", "bdb3ds_ws", ",", "cam_R", ",", "cam_R_flip", ")", "\n", "\n", "instance_info_list", "=", "{", "}", "# bdb2d and bdb3d in layout system", "\n", "\n", "instance_info_list", "[", "'bdb2d'", "]", "=", "bdb2ds_flip", "\n", "instance_info_list", "[", "'bdb3d'", "]", "=", "bdb3ds_ws_flip", "\n", "instance_info_list", "[", "'inst_masks'", "]", "=", "masks", "\n", "# # get compact layout", "\n", "# depth_img_flip = np.array(Image.fromarray(sample.imgdepth).transpose(Image.FLIP_LEFT_RIGHT))", "\n", "# layout_3D_flip = get_campact_layout(layout_3D_flip, depth_img_flip, cam_K_flip, cam_R_flip, bdb3ds_ws_flip)", "\n", "\n", "# flip image in the end.", "\n", "rgb_img", "=", "np", ".", "array", "(", "Image", ".", "fromarray", "(", "sample", ".", "imgrgb", ")", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", ")", "\n", "depth_map", "=", "np", ".", "array", "(", "Image", ".", "fromarray", "(", "sample", ".", "imgdepth", ")", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", ")", "\n", "frame", "=", "SUNRGBD_DATA", "(", "cam_K_flip", ",", "cam_R_flip", ",", "sample", ".", "scene_type", ",", "rgb_img", ",", "depth_map", ",", "layout_3D_flip", ",", "\n", "sample", ".", "sequence_id", ",", "sample", ".", "sequence_name", ",", "instance_info_list", ")", "\n", "\n", "", "return", "frame", "", "", ""]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.chamfer_distance.chamfer_distance.ChamferDistanceFunction.forward": [[11, 35], ["xyz1.contiguous.contiguous.size", "xyz2.contiguous.contiguous.size", "xyz1.contiguous.contiguous.contiguous", "xyz2.contiguous.contiguous.contiguous", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "ctx.save_for_backward", "cd.forward", "dist1.cuda.cuda.cuda", "dist2.cuda.cuda.cuda", "idx1.cuda.cuda.cuda", "idx2.cuda.cuda.cuda", "cd.forward_cuda"], "methods", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.modules.object_detection.Bdb3DNet.forward"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "xyz1", ",", "xyz2", ")", ":", "\n", "        ", "batchsize", ",", "n", ",", "_", "=", "xyz1", ".", "size", "(", ")", "\n", "_", ",", "m", ",", "_", "=", "xyz2", ".", "size", "(", ")", "\n", "xyz1", "=", "xyz1", ".", "contiguous", "(", ")", "\n", "xyz2", "=", "xyz2", ".", "contiguous", "(", ")", "\n", "dist1", "=", "torch", ".", "zeros", "(", "batchsize", ",", "n", ")", "\n", "dist2", "=", "torch", ".", "zeros", "(", "batchsize", ",", "m", ")", "\n", "\n", "idx1", "=", "torch", ".", "zeros", "(", "batchsize", ",", "n", ",", "dtype", "=", "torch", ".", "int", ")", "\n", "idx2", "=", "torch", ".", "zeros", "(", "batchsize", ",", "m", ",", "dtype", "=", "torch", ".", "int", ")", "\n", "\n", "if", "not", "xyz1", ".", "is_cuda", ":", "\n", "            ", "cd", ".", "forward", "(", "xyz1", ",", "xyz2", ",", "dist1", ",", "dist2", ",", "idx1", ",", "idx2", ")", "\n", "", "else", ":", "\n", "            ", "dist1", "=", "dist1", ".", "cuda", "(", ")", "\n", "dist2", "=", "dist2", ".", "cuda", "(", ")", "\n", "idx1", "=", "idx1", ".", "cuda", "(", ")", "\n", "idx2", "=", "idx2", ".", "cuda", "(", ")", "\n", "cd", ".", "forward_cuda", "(", "xyz1", ",", "xyz2", ",", "dist1", ",", "dist2", ",", "idx1", ",", "idx2", ")", "\n", "\n", "", "ctx", ".", "save_for_backward", "(", "xyz1", ",", "xyz2", ",", "idx1", ",", "idx2", ")", "\n", "\n", "return", "dist1", ",", "dist2", ",", "idx1", ",", "idx2", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.chamfer_distance.chamfer_distance.ChamferDistanceFunction.backward": [[36, 54], ["graddist1.contiguous.contiguous.contiguous", "graddist2.contiguous.contiguous.contiguous", "torch.zeros", "torch.zeros", "xyz1.size", "xyz2.size", "cd.backward", "gradxyz1.cuda.cuda.cuda", "gradxyz2.cuda.cuda.cuda", "cd.backward_cuda"], "methods", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.chamfer_distance.chamfer_distance.ChamferDistanceFunction.backward"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "graddist1", ",", "graddist2", ",", "*", "args", ")", ":", "\n", "        ", "xyz1", ",", "xyz2", ",", "idx1", ",", "idx2", "=", "ctx", ".", "saved_tensors", "\n", "\n", "graddist1", "=", "graddist1", ".", "contiguous", "(", ")", "\n", "graddist2", "=", "graddist2", ".", "contiguous", "(", ")", "\n", "\n", "gradxyz1", "=", "torch", ".", "zeros", "(", "xyz1", ".", "size", "(", ")", ")", "\n", "gradxyz2", "=", "torch", ".", "zeros", "(", "xyz2", ".", "size", "(", ")", ")", "\n", "\n", "if", "not", "graddist1", ".", "is_cuda", ":", "\n", "            ", "cd", ".", "backward", "(", "xyz1", ",", "xyz2", ",", "gradxyz1", ",", "gradxyz2", ",", "graddist1", ",", "graddist2", ",", "idx1", ",", "idx2", ")", "\n", "", "else", ":", "\n", "            ", "gradxyz1", "=", "gradxyz1", ".", "cuda", "(", ")", "\n", "gradxyz2", "=", "gradxyz2", ".", "cuda", "(", ")", "\n", "cd", ".", "backward_cuda", "(", "xyz1", ",", "xyz2", ",", "gradxyz1", ",", "gradxyz2", ",", "graddist1", ",", "graddist2", ",", "idx1", ",", "idx2", ")", "\n", "\n", "", "return", "gradxyz1", ",", "gradxyz2", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.chamfer_distance.chamfer_distance.ChamferDistance.forward": [[57, 59], ["ChamferDistanceFunction.apply"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "xyz1", ",", "xyz2", ")", ":", "\n", "        ", "return", "ChamferDistanceFunction", ".", "apply", "(", "xyz1", ",", "xyz2", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.libs.to_dict_tensor": [[12, 28], ["copy.copy", "copy.copy.items", "torch.from_numpy", "torch.from_numpy", "numpy.array", "value_new.cuda.type", "value_new.cuda.float", "value_new.cuda.cuda"], "function", ["None"], ["def", "to_dict_tensor", "(", "dicts", ",", "if_cuda", ")", ":", "\n", "    ", "'''\n    Store dict to torch tensor.\n    :param dicts:\n    :param if_cuda:\n    :return:\n    '''", "\n", "dicts_new", "=", "copy", ".", "copy", "(", "dicts", ")", "\n", "for", "key", ",", "value", "in", "dicts_new", ".", "items", "(", ")", ":", "\n", "        ", "value_new", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "value", ")", ")", "\n", "if", "value_new", ".", "type", "(", ")", "==", "'torch.DoubleTensor'", ":", "\n", "            ", "value_new", "=", "value_new", ".", "float", "(", ")", "\n", "", "if", "if_cuda", ":", "\n", "            ", "value_new", "=", "value_new", ".", "cuda", "(", ")", "\n", "", "dicts_new", "[", "key", "]", "=", "value_new", "\n", "", "return", "dicts_new", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.libs.num_from_bins": [[29, 39], ["None"], "function", ["None"], ["", "def", "num_from_bins", "(", "bins", ",", "cls", ",", "reg", ")", ":", "\n", "    ", "\"\"\"\n    :param bins: b x 2 tensors\n    :param cls: b long tensors\n    :param reg: b tensors\n    :return: bin_center: b tensors\n    \"\"\"", "\n", "bin_width", "=", "(", "bins", "[", "0", "]", "[", "1", "]", "-", "bins", "[", "0", "]", "[", "0", "]", ")", "\n", "bin_center", "=", "(", "bins", "[", "cls", ",", "0", "]", "+", "bins", "[", "cls", ",", "1", "]", ")", "/", "2", "\n", "return", "bin_center", "+", "reg", "*", "bin_width", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.libs.R_from_yaw_pitch_roll": [[40, 61], ["yaw.size", "torch.zeros().cuda", "torch.zeros().cuda", "torch.sin", "torch.sin", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.zeros", "torch.zeros", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.cos", "torch.cos", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.sin", "torch.sin", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.sin", "torch.sin", "torch.cos", "torch.cos", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin"], "function", ["None"], ["", "def", "R_from_yaw_pitch_roll", "(", "yaw", ",", "pitch", ",", "roll", ")", ":", "\n", "    ", "'''\n    get rotation matrix from predicted camera yaw, pitch, roll angles.\n    :param yaw: batch_size x 1 tensor\n    :param pitch: batch_size x 1 tensor\n    :param roll: batch_size x 1 tensor\n    :return: camera rotation matrix\n    '''", "\n", "n", "=", "yaw", ".", "size", "(", "0", ")", "\n", "R", "=", "torch", ".", "zeros", "(", "(", "n", ",", "3", ",", "3", ")", ")", ".", "cuda", "(", ")", "\n", "R", "[", ":", ",", "0", ",", "0", "]", "=", "torch", ".", "cos", "(", "yaw", ")", "*", "torch", ".", "cos", "(", "pitch", ")", "\n", "R", "[", ":", ",", "0", ",", "1", "]", "=", "torch", ".", "sin", "(", "yaw", ")", "*", "torch", ".", "sin", "(", "roll", ")", "-", "torch", ".", "cos", "(", "yaw", ")", "*", "torch", ".", "cos", "(", "roll", ")", "*", "torch", ".", "sin", "(", "pitch", ")", "\n", "R", "[", ":", ",", "0", ",", "2", "]", "=", "torch", ".", "cos", "(", "roll", ")", "*", "torch", ".", "sin", "(", "yaw", ")", "+", "torch", ".", "cos", "(", "yaw", ")", "*", "torch", ".", "sin", "(", "pitch", ")", "*", "torch", ".", "sin", "(", "roll", ")", "\n", "R", "[", ":", ",", "1", ",", "0", "]", "=", "torch", ".", "sin", "(", "pitch", ")", "\n", "R", "[", ":", ",", "1", ",", "1", "]", "=", "torch", ".", "cos", "(", "pitch", ")", "*", "torch", ".", "cos", "(", "roll", ")", "\n", "R", "[", ":", ",", "1", ",", "2", "]", "=", "-", "torch", ".", "cos", "(", "pitch", ")", "*", "torch", ".", "sin", "(", "roll", ")", "\n", "R", "[", ":", ",", "2", ",", "0", "]", "=", "-", "torch", ".", "cos", "(", "pitch", ")", "*", "torch", ".", "sin", "(", "yaw", ")", "\n", "R", "[", ":", ",", "2", ",", "1", "]", "=", "torch", ".", "cos", "(", "yaw", ")", "*", "torch", ".", "sin", "(", "roll", ")", "+", "torch", ".", "cos", "(", "roll", ")", "*", "torch", ".", "sin", "(", "yaw", ")", "*", "torch", ".", "sin", "(", "pitch", ")", "\n", "R", "[", ":", ",", "2", ",", "2", "]", "=", "torch", ".", "cos", "(", "yaw", ")", "*", "torch", ".", "cos", "(", "roll", ")", "-", "torch", ".", "sin", "(", "yaw", ")", "*", "torch", ".", "sin", "(", "pitch", ")", "*", "torch", ".", "sin", "(", "roll", ")", "\n", "\n", "return", "R", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.libs.get_rotation_matrix_gt": [[62, 70], ["libs.num_from_bins", "libs.num_from_bins", "libs.R_from_yaw_pitch_roll", "torch.zeros_like", "torch.zeros_like"], "function", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.libs.num_from_bins", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.libs.num_from_bins", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.R_from_yaw_pitch_roll"], ["", "def", "get_rotation_matrix_gt", "(", "bins_tensor", ",", "pitch_cls_gt", ",", "pitch_reg_gt", ",", "roll_cls_gt", ",", "roll_reg_gt", ")", ":", "\n", "    ", "'''\n    get rotation matrix from predicted camera pitch, roll angles.\n    '''", "\n", "pitch", "=", "num_from_bins", "(", "bins_tensor", "[", "'pitch_bin'", "]", ",", "pitch_cls_gt", ",", "pitch_reg_gt", ")", "\n", "roll", "=", "num_from_bins", "(", "bins_tensor", "[", "'roll_bin'", "]", ",", "roll_cls_gt", ",", "roll_reg_gt", ")", "\n", "r_ex", "=", "R_from_yaw_pitch_roll", "(", "torch", ".", "zeros_like", "(", "pitch", ")", ",", "pitch", ",", "roll", ")", "\n", "return", "r_ex", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.libs.get_mask_status": [[71, 80], ["enumerate", "numpy.array", "range", "obj_status_flag.append", "obj_status_flag.append"], "function", ["None"], ["", "def", "get_mask_status", "(", "masks", ",", "split", ")", ":", "\n", "    ", "obj_status_flag", "=", "[", "]", "\n", "for", "batch_id", ",", "interval", "in", "enumerate", "(", "split", ")", ":", "\n", "        ", "for", "obj_id", "in", "range", "(", "interval", "[", "1", "]", "-", "interval", "[", "0", "]", ")", ":", "\n", "            ", "if", "masks", "[", "batch_id", "]", "[", "obj_id", "]", ":", "\n", "                ", "obj_status_flag", ".", "append", "(", "1", ")", "\n", "", "else", ":", "\n", "                ", "obj_status_flag", ".", "append", "(", "0", ")", "\n", "", "", "", "return", "np", ".", "array", "(", "obj_status_flag", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.libs.layout_basis_from_ori": [[81, 98], ["ori.size", "torch.zeros().cuda", "torch.zeros().cuda", "torch.sin", "torch.sin", "torch.cos", "torch.cos", "torch.sin", "torch.sin", "torch.cos", "torch.cos", "torch.zeros", "torch.zeros"], "function", ["None"], ["", "def", "layout_basis_from_ori", "(", "ori", ")", ":", "\n", "    ", "\"\"\"\n    :param ori: orientation angle\n    :return: basis: 3x3 matrix\n            the basis in 3D coordinates\n    \"\"\"", "\n", "n", "=", "ori", ".", "size", "(", "0", ")", "\n", "\n", "basis", "=", "torch", ".", "zeros", "(", "(", "n", ",", "3", ",", "3", ")", ")", ".", "cuda", "(", ")", "\n", "\n", "basis", "[", ":", ",", "0", ",", "0", "]", "=", "torch", ".", "sin", "(", "ori", ")", "\n", "basis", "[", ":", ",", "0", ",", "2", "]", "=", "torch", ".", "cos", "(", "ori", ")", "\n", "basis", "[", ":", ",", "1", ",", "1", "]", "=", "1", "\n", "basis", "[", ":", ",", "2", ",", "0", "]", "=", "-", "torch", ".", "cos", "(", "ori", ")", "\n", "basis", "[", ":", ",", "2", ",", "2", "]", "=", "torch", ".", "sin", "(", "ori", ")", "\n", "\n", "return", "basis", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.libs.get_corners_of_bb3d": [[99, 122], ["basis.size", "torch.zeros().cuda", "torch.zeros().cuda", "coeffs.view().expand.view().expand", "centroid.view().expand.view().expand", "torch.zeros", "torch.zeros", "coeffs.view().expand.view", "centroid.view().expand.view"], "function", ["None"], ["", "def", "get_corners_of_bb3d", "(", "basis", ",", "coeffs", ",", "centroid", ")", ":", "\n", "    ", "\"\"\"\n    :param basis: n x 3 x 3 tensor\n    :param coeffs: n x 3 tensor\n    :param centroid:  n x 3 tensor\n    :return: corners n x 8 x 3 tensor\n    \"\"\"", "\n", "n", "=", "basis", ".", "size", "(", "0", ")", "\n", "corners", "=", "torch", ".", "zeros", "(", "(", "n", ",", "8", ",", "3", ")", ")", ".", "cuda", "(", ")", "\n", "coeffs", "=", "coeffs", ".", "view", "(", "n", ",", "3", ",", "1", ")", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "3", ")", "\n", "centroid", "=", "centroid", ".", "view", "(", "n", ",", "1", ",", "3", ")", ".", "expand", "(", "-", "1", ",", "8", ",", "-", "1", ")", "\n", "corners", "[", ":", ",", "0", ",", ":", "]", "=", "-", "basis", "[", ":", ",", "0", ",", ":", "]", "*", "coeffs", "[", ":", ",", "0", ",", ":", "]", "+", "basis", "[", ":", ",", "1", ",", ":", "]", "*", "coeffs", "[", ":", ",", "1", ",", ":", "]", "-", "basis", "[", ":", ",", "2", ",", ":", "]", "*", "coeffs", "[", ":", ",", "2", ",", ":", "]", "\n", "corners", "[", ":", ",", "1", ",", ":", "]", "=", "-", "basis", "[", ":", ",", "0", ",", ":", "]", "*", "coeffs", "[", ":", ",", "0", ",", ":", "]", "+", "basis", "[", ":", ",", "1", ",", ":", "]", "*", "coeffs", "[", ":", ",", "1", ",", ":", "]", "+", "basis", "[", ":", ",", "2", ",", ":", "]", "*", "coeffs", "[", ":", ",", "2", ",", ":", "]", "\n", "corners", "[", ":", ",", "2", ",", ":", "]", "=", "basis", "[", ":", ",", "0", ",", ":", "]", "*", "coeffs", "[", ":", ",", "0", ",", ":", "]", "+", "basis", "[", ":", ",", "1", ",", ":", "]", "*", "coeffs", "[", ":", ",", "1", ",", ":", "]", "+", "basis", "[", ":", ",", "2", ",", ":", "]", "*", "coeffs", "[", ":", ",", "2", ",", ":", "]", "\n", "corners", "[", ":", ",", "3", ",", ":", "]", "=", "basis", "[", ":", ",", "0", ",", ":", "]", "*", "coeffs", "[", ":", ",", "0", ",", ":", "]", "+", "basis", "[", ":", ",", "1", ",", ":", "]", "*", "coeffs", "[", ":", ",", "1", ",", ":", "]", "-", "basis", "[", ":", ",", "2", ",", ":", "]", "*", "coeffs", "[", ":", ",", "2", ",", ":", "]", "\n", "\n", "corners", "[", ":", ",", "4", ",", ":", "]", "=", "-", "basis", "[", ":", ",", "0", ",", ":", "]", "*", "coeffs", "[", ":", ",", "0", ",", ":", "]", "-", "basis", "[", ":", ",", "1", ",", ":", "]", "*", "coeffs", "[", ":", ",", "1", ",", ":", "]", "-", "basis", "[", ":", ",", "2", ",", ":", "]", "*", "coeffs", "[", ":", ",", "2", ",", ":", "]", "\n", "corners", "[", ":", ",", "5", ",", ":", "]", "=", "-", "basis", "[", ":", ",", "0", ",", ":", "]", "*", "coeffs", "[", ":", ",", "0", ",", ":", "]", "-", "basis", "[", ":", ",", "1", ",", ":", "]", "*", "coeffs", "[", ":", ",", "1", ",", ":", "]", "+", "basis", "[", ":", ",", "2", ",", ":", "]", "*", "coeffs", "[", ":", ",", "2", ",", ":", "]", "\n", "corners", "[", ":", ",", "6", ",", ":", "]", "=", "basis", "[", ":", ",", "0", ",", ":", "]", "*", "coeffs", "[", ":", ",", "0", ",", ":", "]", "-", "basis", "[", ":", ",", "1", ",", ":", "]", "*", "coeffs", "[", ":", ",", "1", ",", ":", "]", "+", "basis", "[", ":", ",", "2", ",", ":", "]", "*", "coeffs", "[", ":", ",", "2", ",", ":", "]", "\n", "corners", "[", ":", ",", "7", ",", ":", "]", "=", "basis", "[", ":", ",", "0", ",", ":", "]", "*", "coeffs", "[", ":", ",", "0", ",", ":", "]", "-", "basis", "[", ":", ",", "1", ",", ":", "]", "*", "coeffs", "[", ":", ",", "1", ",", ":", "]", "-", "basis", "[", ":", ",", "2", ",", ":", "]", "*", "coeffs", "[", ":", ",", "2", ",", ":", "]", "\n", "corners", "=", "corners", "+", "centroid", "\n", "\n", "return", "corners", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.libs.get_layout_bdb_sunrgbd": [[123, 146], ["torch.gather().squeeze", "torch.gather().squeeze", "libs.num_from_bins", "libs.layout_basis_from_ori", "libs.get_corners_of_bb3d", "torch.gather", "torch.gather", "lo_ori_cls.view().expand", "lo_ori_cls.size", "lo_ori_cls.view", "lo_ori_cls.size"], "function", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.libs.num_from_bins", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.libs.layout_basis_from_ori", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.libs.get_corners_of_bb3d"], ["", "def", "get_layout_bdb_sunrgbd", "(", "bins_tensor", ",", "lo_ori_reg", ",", "lo_ori_cls", ",", "centroid_reg", ",", "coeffs_reg", ")", ":", "\n", "    ", "\"\"\"\n    get the eight corners of 3D bounding box\n    :param bins_tensor:\n    :param lo_ori_reg: layout orientation regression results\n    :param lo_ori_cls: layout orientation classification results\n    :param centroid_reg: layout centroid regression results\n    :param coeffs_reg: layout coefficients regression results\n    :return: bdb: b x 8 x 3 tensor: the bounding box of layout in layout system.\n    \"\"\"", "\n", "\n", "ori_reg", "=", "torch", ".", "gather", "(", "lo_ori_reg", ",", "1", ",", "lo_ori_cls", ".", "view", "(", "lo_ori_cls", ".", "size", "(", "0", ")", ",", "1", ")", ".", "expand", "(", "lo_ori_cls", ".", "size", "(", "0", ")", ",", "1", ")", ")", ".", "squeeze", "(", "1", ")", "\n", "ori", "=", "num_from_bins", "(", "bins_tensor", "[", "'layout_ori_bin'", "]", ",", "lo_ori_cls", ",", "ori_reg", ")", "\n", "\n", "basis", "=", "layout_basis_from_ori", "(", "ori", ")", "\n", "\n", "centroid_reg", "=", "centroid_reg", "+", "bins_tensor", "[", "'layout_centroid_avg'", "]", "\n", "\n", "coeffs_reg", "=", "(", "coeffs_reg", "+", "1", ")", "*", "bins_tensor", "[", "'layout_coeffs_avg'", "]", "\n", "\n", "bdb", "=", "get_corners_of_bb3d", "(", "basis", ",", "coeffs_reg", ",", "centroid_reg", ")", "\n", "\n", "return", "bdb", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.libs.get_bdb_form_from_corners": [[147, 167], ["torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.cat", "torch.cat", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.cat", "torch.cat", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "mask_status.nonzero", "torch.norm.unsqueeze", "torch.norm.unsqueeze", "torch.norm.unsqueeze", "torch.mm.unsqueeze", "torch.mm.unsqueeze", "torch.mm.unsqueeze"], "function", ["None"], ["", "def", "get_bdb_form_from_corners", "(", "corners_orig", ",", "mask_status", ")", ":", "\n", "    ", "corners", "=", "corners_orig", "[", "mask_status", ".", "nonzero", "(", ")", "]", "\n", "vec_0", "=", "(", "corners", "[", ":", ",", "2", ",", ":", "]", "-", "corners", "[", ":", ",", "1", ",", ":", "]", ")", "/", "2.", "\n", "vec_1", "=", "(", "corners", "[", ":", ",", "0", ",", ":", "]", "-", "corners", "[", ":", ",", "4", ",", ":", "]", ")", "/", "2.", "\n", "vec_2", "=", "(", "corners", "[", ":", ",", "1", ",", ":", "]", "-", "corners", "[", ":", ",", "0", ",", ":", "]", ")", "/", "2.", "\n", "\n", "coeffs_0", "=", "torch", ".", "norm", "(", "vec_0", ",", "dim", "=", "1", ")", "\n", "coeffs_1", "=", "torch", ".", "norm", "(", "vec_1", ",", "dim", "=", "1", ")", "\n", "coeffs_2", "=", "torch", ".", "norm", "(", "vec_2", ",", "dim", "=", "1", ")", "\n", "coeffs", "=", "torch", ".", "cat", "(", "[", "coeffs_0", ".", "unsqueeze", "(", "-", "1", ")", ",", "coeffs_1", ".", "unsqueeze", "(", "-", "1", ")", ",", "coeffs_2", ".", "unsqueeze", "(", "-", "1", ")", "]", ",", "-", "1", ")", "\n", "\n", "centroid", "=", "(", "corners", "[", ":", ",", "0", ",", ":", "]", "+", "corners", "[", ":", ",", "6", ",", ":", "]", ")", "/", "2.", "\n", "\n", "basis_0", "=", "torch", ".", "mm", "(", "torch", ".", "diag", "(", "1", "/", "coeffs_0", ")", ",", "vec_0", ")", "\n", "basis_1", "=", "torch", ".", "mm", "(", "torch", ".", "diag", "(", "1", "/", "coeffs_1", ")", ",", "vec_1", ")", "\n", "basis_2", "=", "torch", ".", "mm", "(", "torch", ".", "diag", "(", "1", "/", "coeffs_2", ")", ",", "vec_2", ")", "\n", "\n", "basis", "=", "torch", ".", "cat", "(", "[", "basis_0", ".", "unsqueeze", "(", "1", ")", ",", "basis_1", ".", "unsqueeze", "(", "1", ")", ",", "basis_2", ".", "unsqueeze", "(", "1", ")", "]", ",", "dim", "=", "1", ")", "\n", "\n", "return", "{", "'basis'", ":", "basis", ",", "'coeffs'", ":", "coeffs", ",", "'centroid'", ":", "centroid", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.libs.recover_points_to_world_sys": [[169, 199], ["mesh_coordinates.transpose.transpose", "enumerate", "torch.cat", "torch.cat", "mesh_center.detach.detach", "mesh_coef.detach.detach", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "mesh_coordinates_in_world_sys.append", "torch.mm", "torch.mm", "torch.diag", "torch.diag", "[].view", "torch.mm.unsqueeze", "torch.diag", "torch.diag", "torch.mm.max", "torch.mm.min", "torch.mm.max", "torch.mm.min"], "function", ["None"], ["", "def", "recover_points_to_world_sys", "(", "bdb3D", ",", "mesh_coordinates", ")", ":", "\n", "    ", "'''\n    Get 3D point cloud from mesh with estimated position and orientation.\n    :param bdb3D: 3D object bounding boxes with keys ['coeffs', 'basis', 'centroid'].\n    :param mesh_coordinates: Number_of_objects x Number_of_points x 3.\n    :param mask_status: indicate whether the object has a mask.\n    :return: points on world system\n    '''", "\n", "mesh_coordinates", "=", "mesh_coordinates", ".", "transpose", "(", "1", ",", "2", ")", "\n", "mesh_coordinates_in_world_sys", "=", "[", "]", "\n", "\n", "for", "obj_idx", ",", "mesh_coordinate", "in", "enumerate", "(", "mesh_coordinates", ")", ":", "\n", "        ", "mesh_center", "=", "(", "mesh_coordinate", ".", "max", "(", "dim", "=", "0", ")", "[", "0", "]", "+", "mesh_coordinate", ".", "min", "(", "dim", "=", "0", ")", "[", "0", "]", ")", "/", "2.", "\n", "mesh_center", "=", "mesh_center", ".", "detach", "(", ")", "\n", "mesh_coordinate", "=", "mesh_coordinate", "-", "mesh_center", "\n", "\n", "mesh_coef", "=", "(", "mesh_coordinate", ".", "max", "(", "dim", "=", "0", ")", "[", "0", "]", "-", "mesh_coordinate", ".", "min", "(", "dim", "=", "0", ")", "[", "0", "]", ")", "/", "2.", "\n", "mesh_coef", "=", "mesh_coef", ".", "detach", "(", ")", "\n", "mesh_coordinate", "=", "torch", ".", "mm", "(", "torch", ".", "mm", "(", "mesh_coordinate", ",", "torch", ".", "diag", "(", "1.", "/", "mesh_coef", ")", ")", ",", "\n", "torch", ".", "diag", "(", "bdb3D", "[", "'coeffs'", "]", "[", "obj_idx", "]", ")", ")", "\n", "\n", "# set orientation", "\n", "mesh_coordinate", "=", "torch", ".", "mm", "(", "mesh_coordinate", ",", "bdb3D", "[", "'basis'", "]", "[", "obj_idx", "]", ")", "\n", "\n", "# move to center", "\n", "mesh_coordinate", "=", "mesh_coordinate", "+", "bdb3D", "[", "'centroid'", "]", "[", "obj_idx", "]", ".", "view", "(", "1", ",", "3", ")", "\n", "\n", "mesh_coordinates_in_world_sys", ".", "append", "(", "mesh_coordinate", ".", "unsqueeze", "(", "0", ")", ")", "\n", "\n", "", "return", "torch", ".", "cat", "(", "mesh_coordinates_in_world_sys", ",", "dim", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.libs.get_rotation_matix_result": [[200, 213], ["torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "libs.num_from_bins", "libs.num_from_bins", "libs.R_from_yaw_pitch_roll", "torch.zeros_like", "torch.zeros_like", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "pitch_cls_gt.view().expand", "roll_cls_gt.view().expand", "pitch_cls_gt.size", "roll_cls_gt.size", "pitch_cls_gt.view", "roll_cls_gt.view", "pitch_cls_gt.size", "roll_cls_gt.size"], "function", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.libs.num_from_bins", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.libs.num_from_bins", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.R_from_yaw_pitch_roll"], ["", "def", "get_rotation_matix_result", "(", "bins_tensor", ",", "pitch_cls_gt", ",", "pitch_reg_result", ",", "roll_cls_gt", ",", "roll_reg_result", ")", ":", "\n", "    ", "'''\n    get rotation matrix from predicted camera pitch, roll angles.\n    '''", "\n", "\n", "pitch_result", "=", "torch", ".", "gather", "(", "pitch_reg_result", ",", "1", ",", "\n", "pitch_cls_gt", ".", "view", "(", "pitch_cls_gt", ".", "size", "(", "0", ")", ",", "1", ")", ".", "expand", "(", "pitch_cls_gt", ".", "size", "(", "0", ")", ",", "1", ")", ")", ".", "squeeze", "(", "1", ")", "\n", "roll_result", "=", "torch", ".", "gather", "(", "roll_reg_result", ",", "1", ",", "\n", "roll_cls_gt", ".", "view", "(", "roll_cls_gt", ".", "size", "(", "0", ")", ",", "1", ")", ".", "expand", "(", "roll_cls_gt", ".", "size", "(", "0", ")", ",", "1", ")", ")", ".", "squeeze", "(", "1", ")", "\n", "pitch", "=", "num_from_bins", "(", "bins_tensor", "[", "'pitch_bin'", "]", ",", "pitch_cls_gt", ",", "pitch_result", ")", "\n", "roll", "=", "num_from_bins", "(", "bins_tensor", "[", "'roll_bin'", "]", ",", "roll_cls_gt", ",", "roll_result", ")", "\n", "cam_R", "=", "R_from_yaw_pitch_roll", "(", "torch", ".", "zeros_like", "(", "pitch", ")", ",", "pitch", ",", "roll", ")", "\n", "return", "cam_R", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.libs.rgb_to_world": [[215, 247], ["p.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.stack().view", "torch.stack().view", "torch.bmm", "torch.bmm", "torch.sqrt", "torch.sqrt", "K[].expand", "cam_R[].expand", "torch.stack", "torch.stack", "enumerate", "enumerate"], "function", ["None"], ["", "def", "rgb_to_world", "(", "p", ",", "depth", ",", "K", ",", "cam_R", ",", "split", ")", ":", "\n", "    ", "\"\"\"\n    Given pixel location and depth, camera parameters, to recover world coordinates.\n    :param p: n x 2 tensor\n    :param depth: b tensor\n    :param k: b x 3 x 3 tensor\n    :param cam_R: b x 3 x 3 tensor\n    :param split: b x 2 split tensor.\n    :return: p_world_right: n x 3 tensor in right hand coordinate\n    \"\"\"", "\n", "\n", "n", "=", "p", ".", "size", "(", "0", ")", "\n", "\n", "K_ex", "=", "torch", ".", "cat", "(", "[", "K", "[", "index", "]", ".", "expand", "(", "interval", "[", "1", "]", "-", "interval", "[", "0", "]", ",", "-", "1", ",", "-", "1", ")", "for", "index", ",", "interval", "in", "enumerate", "(", "split", ")", "]", ",", "0", ")", "\n", "cam_R_ex", "=", "torch", ".", "cat", "(", "[", "cam_R", "[", "index", "]", ".", "expand", "(", "interval", "[", "1", "]", "-", "interval", "[", "0", "]", ",", "-", "1", ",", "-", "1", ")", "for", "index", ",", "interval", "in", "enumerate", "(", "split", ")", "]", ",", "0", ")", "\n", "\n", "x_temp", "=", "(", "p", "[", ":", ",", "0", "]", "-", "K_ex", "[", ":", ",", "0", ",", "2", "]", ")", "/", "K_ex", "[", ":", ",", "0", ",", "0", "]", "\n", "y_temp", "=", "(", "p", "[", ":", ",", "1", "]", "-", "K_ex", "[", ":", ",", "1", ",", "2", "]", ")", "/", "K_ex", "[", ":", ",", "1", ",", "1", "]", "\n", "z_temp", "=", "1", "\n", "ratio", "=", "depth", "/", "torch", ".", "sqrt", "(", "x_temp", "**", "2", "+", "y_temp", "**", "2", "+", "z_temp", "**", "2", ")", "\n", "x_cam", "=", "x_temp", "*", "ratio", "\n", "y_cam", "=", "y_temp", "*", "ratio", "\n", "z_cam", "=", "z_temp", "*", "ratio", "\n", "\n", "# transform to toward-up-right coordinate system", "\n", "x3", "=", "z_cam", "\n", "y3", "=", "-", "y_cam", "\n", "z3", "=", "x_cam", "\n", "\n", "p_cam", "=", "torch", ".", "stack", "(", "(", "x3", ",", "y3", ",", "z3", ")", ",", "1", ")", ".", "view", "(", "n", ",", "3", ",", "1", ")", "# n x 3", "\n", "p_world", "=", "torch", ".", "bmm", "(", "cam_R_ex", ",", "p_cam", ")", "\n", "return", "p_world", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.libs.basis_from_ori": [[249, 267], ["ori.size", "torch.zeros().cuda", "torch.zeros().cuda", "torch.cos", "torch.cos", "torch.sin", "torch.sin", "torch.cos", "torch.cos", "torch.sin", "torch.sin", "torch.zeros", "torch.zeros"], "function", ["None"], ["", "def", "basis_from_ori", "(", "ori", ")", ":", "\n", "    ", "\"\"\"\n    :param ori: torch tensor\n            the orientation angle\n    :return: basis: 3x3 tensor\n            the basis in 3D coordinates\n    \"\"\"", "\n", "n", "=", "ori", ".", "size", "(", "0", ")", "\n", "\n", "basis", "=", "torch", ".", "zeros", "(", "(", "n", ",", "3", ",", "3", ")", ")", ".", "cuda", "(", ")", "\n", "\n", "basis", "[", ":", ",", "0", ",", "0", "]", "=", "torch", ".", "cos", "(", "ori", ")", "\n", "basis", "[", ":", ",", "0", ",", "2", "]", "=", "-", "torch", ".", "sin", "(", "ori", ")", "\n", "basis", "[", ":", ",", "1", ",", "1", "]", "=", "1", "\n", "basis", "[", ":", ",", "2", ",", "0", "]", "=", "torch", ".", "sin", "(", "ori", ")", "\n", "basis", "[", ":", ",", "2", ",", "2", "]", "=", "torch", ".", "cos", "(", "ori", ")", "\n", "\n", "return", "basis", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.libs.get_bdb_3d_result": [[268, 292], ["torch.argmax", "torch.argmax", "torch.gather().squeeze", "torch.gather().squeeze", "libs.num_from_bins", "libs.rgb_to_world", "torch.gather().squeeze", "torch.gather().squeeze", "libs.num_from_bins", "libs.basis_from_ori", "libs.get_corners_of_bb3d", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "centroid_cls_gt.view().expand", "ori_cls_gt.view().expand", "centroid_cls_gt.size", "ori_cls_gt.size", "centroid_cls_gt.view", "ori_cls_gt.view", "centroid_cls_gt.size", "ori_cls_gt.size"], "function", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.libs.num_from_bins", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.libs.rgb_to_world", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.libs.num_from_bins", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.libs.basis_from_ori", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.libs.get_corners_of_bb3d"], ["", "def", "get_bdb_3d_result", "(", "bins_tensor", ",", "ori_cls_gt", ",", "ori_reg_result", ",", "centroid_cls_gt", ",", "centroid_reg_result", ",", "size_cls_gt", ",", "\n", "size_reg_result", ",", "P", ",", "K", ",", "cam_R", ",", "split", ")", ":", "\n", "\n", "# coeffs", "\n", "    ", "size_cls_gt", "=", "torch", ".", "argmax", "(", "size_cls_gt", ",", "1", ")", "\n", "coeffs", "=", "(", "size_reg_result", "+", "1", ")", "*", "bins_tensor", "[", "'avg_size'", "]", "[", "size_cls_gt", ",", ":", "]", "# b x 3", "\n", "\n", "# centroid", "\n", "centroid_reg", "=", "torch", ".", "gather", "(", "centroid_reg_result", ",", "1", ",", "\n", "centroid_cls_gt", ".", "view", "(", "centroid_cls_gt", ".", "size", "(", "0", ")", ",", "1", ")", ".", "expand", "(", "centroid_cls_gt", ".", "size", "(", "0", ")", ",", "\n", "1", ")", ")", ".", "squeeze", "(", "1", ")", "\n", "centroid_depth", "=", "num_from_bins", "(", "bins_tensor", "[", "'centroid_bin'", "]", ",", "centroid_cls_gt", ",", "centroid_reg", ")", "\n", "centroid", "=", "rgb_to_world", "(", "P", ",", "centroid_depth", ",", "K", ",", "cam_R", ",", "split", ")", "# b x 3", "\n", "\n", "# basis", "\n", "ori_reg", "=", "torch", ".", "gather", "(", "ori_reg_result", ",", "1", ",", "\n", "ori_cls_gt", ".", "view", "(", "ori_cls_gt", ".", "size", "(", "0", ")", ",", "1", ")", ".", "expand", "(", "ori_cls_gt", ".", "size", "(", "0", ")", ",", "1", ")", ")", ".", "squeeze", "(", "1", ")", "\n", "ori", "=", "num_from_bins", "(", "bins_tensor", "[", "'ori_bin'", "]", ",", "ori_cls_gt", ",", "ori_reg", ")", "\n", "basis", "=", "basis_from_ori", "(", "ori", ")", "\n", "bdb", "=", "get_corners_of_bb3d", "(", "basis", ",", "coeffs", ",", "centroid", ")", "\n", "\n", "bdb_form", "=", "{", "'basis'", ":", "basis", ",", "'coeffs'", ":", "coeffs", ",", "'centroid'", ":", "centroid", "}", "\n", "\n", "return", "bdb", ",", "bdb_form", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.libs.project_3d_points_to_2d": [[294, 316], ["points3d.size", "torch.bmm", "torch.bmm", "torch.FloatTensor().expand().cuda", "torch.FloatTensor().expand().cuda", "torch.bmm", "torch.bmm", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.stack", "torch.stack", "torch.transpose", "torch.transpose", "torch.stack", "torch.stack", "torch.bmm", "torch.bmm", "torch.FloatTensor().expand", "torch.FloatTensor().expand", "torch.nn.functional.threshold", "torch.FloatTensor", "torch.FloatTensor"], "function", ["None"], ["", "def", "project_3d_points_to_2d", "(", "points3d", ",", "cam_R_ex", ",", "K_ex", ")", ":", "\n", "    ", "\"\"\"\n    project 3d points to 2d\n    :param points3d: n x 8 x 3 tensor; n equals to number of boxes.\n    :param cam_R_ex: n x 3 x 3 tensor\n    :param K_ex: n x 3 x 3 tensor\n    :return:\n    \"\"\"", "\n", "n", "=", "points3d", ".", "size", "(", "0", ")", "\n", "\n", "points_cam_ori", "=", "torch", ".", "bmm", "(", "points3d", ",", "cam_R_ex", ")", "\n", "T_cam", "=", "torch", ".", "FloatTensor", "(", "[", "[", "0.", ",", "0.", ",", "1.", "]", ",", "[", "0.", ",", "-", "1.", ",", "0.", "]", ",", "[", "1.", ",", "0.", ",", "0.", "]", "]", ")", ".", "expand", "(", "n", ",", "-", "1", ",", "-", "1", ")", ".", "cuda", "(", ")", "\n", "points_cam", "=", "torch", ".", "bmm", "(", "points_cam_ori", ",", "torch", ".", "transpose", "(", "T_cam", ",", "1", ",", "2", ")", ")", "\n", "points_cam_positive", "=", "torch", ".", "transpose", "(", "\n", "torch", ".", "stack", "(", "(", "points_cam", "[", ":", ",", ":", ",", "0", "]", ",", "points_cam", "[", ":", ",", ":", ",", "1", "]", ",", "F", ".", "threshold", "(", "points_cam", "[", ":", ",", ":", ",", "2", "]", ",", "0.0001", ",", "0.0001", ")", ")", ",", "2", ")", ",", "1", ",", "\n", "2", ")", "# b x 3 x 8", "\n", "\n", "points_2d_ori", "=", "torch", ".", "transpose", "(", "torch", ".", "bmm", "(", "K_ex", ",", "points_cam_positive", ")", ",", "1", ",", "2", ")", "# b x 8 x 3", "\n", "points_2d", "=", "torch", ".", "stack", "(", "\n", "(", "points_2d_ori", "[", ":", ",", ":", ",", "0", "]", "/", "points_2d_ori", "[", ":", ",", ":", ",", "2", "]", ",", "points_2d_ori", "[", ":", ",", ":", ",", "1", "]", "/", "points_2d_ori", "[", ":", ",", ":", ",", "2", "]", ")", ",", "\n", "2", ")", "# n x 8 x 2", "\n", "return", "points_2d", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.libs.get_bdb_2d_result": [[318, 345], ["bdb3d.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "libs.project_3d_points_to_2d", "torch.stack", "torch.stack", "torch.min", "torch.min", "K_ex[].float", "torch.min", "torch.min", "K_ex[].float", "torch.min", "torch.min", "K_ex[].float", "torch.min", "torch.min", "K_ex[].float", "K[].expand", "cam_R[].expand", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "enumerate", "enumerate", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "function", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.libs.project_3d_points_to_2d"], ["", "def", "get_bdb_2d_result", "(", "bdb3d", ",", "cam_R", ",", "K", ",", "split", ")", ":", "\n", "    ", "\"\"\"\n    :param bins_tensor:\n    :param bdb3d: n x 8 x 3 tensor: n equals to the number of objects in all batches.\n    :param cam_R: b x 3 x 3 tensor: b - batch number\n    :param K: b x 3 x 3 tensor: b - batch number\n    :return:\n    \"\"\"", "\n", "n", "=", "bdb3d", ".", "size", "(", "0", ")", "\n", "# convert K to n x 3 x 3", "\n", "K_ex", "=", "torch", ".", "cat", "(", "[", "K", "[", "index", "]", ".", "expand", "(", "interval", "[", "1", "]", "-", "interval", "[", "0", "]", ",", "-", "1", ",", "-", "1", ")", "for", "index", ",", "interval", "in", "enumerate", "(", "split", ")", "]", ",", "0", ")", "\n", "cam_R_ex", "=", "torch", ".", "cat", "(", "\n", "[", "cam_R", "[", "index", "]", ".", "expand", "(", "interval", "[", "1", "]", "-", "interval", "[", "0", "]", ",", "-", "1", ",", "-", "1", ")", "for", "index", ",", "interval", "in", "enumerate", "(", "split", ")", "]", ",", "0", ")", "\n", "\n", "points_2d", "=", "project_3d_points_to_2d", "(", "bdb3d", ",", "cam_R_ex", ",", "K_ex", ")", "# n x 8 x 2", "\n", "\n", "x1", "=", "torch", ".", "min", "(", "torch", ".", "max", "(", "torch", ".", "min", "(", "points_2d", "[", ":", ",", ":", ",", "0", "]", ",", "dim", "=", "1", ")", "[", "0", "]", ",", "torch", ".", "zeros", "(", "n", ")", ".", "cuda", "(", ")", ")", ",", "\n", "2", "*", "K_ex", "[", ":", ",", "0", ",", "2", "]", ")", "/", "(", "K_ex", "[", ":", ",", "0", ",", "2", "]", ".", "float", "(", ")", ")", "\n", "y1", "=", "torch", ".", "min", "(", "torch", ".", "max", "(", "torch", ".", "min", "(", "points_2d", "[", ":", ",", ":", ",", "1", "]", ",", "dim", "=", "1", ")", "[", "0", "]", ",", "torch", ".", "zeros", "(", "n", ")", ".", "cuda", "(", ")", ")", ",", "\n", "2", "*", "K_ex", "[", ":", ",", "1", ",", "2", "]", ")", "/", "(", "K_ex", "[", ":", ",", "1", ",", "2", "]", ".", "float", "(", ")", ")", "\n", "\n", "x2", "=", "torch", ".", "min", "(", "torch", ".", "max", "(", "torch", ".", "max", "(", "points_2d", "[", ":", ",", ":", ",", "0", "]", ",", "dim", "=", "1", ")", "[", "0", "]", ",", "torch", ".", "zeros", "(", "n", ")", ".", "cuda", "(", ")", ")", ",", "\n", "2", "*", "K_ex", "[", ":", ",", "0", ",", "2", "]", ")", "/", "(", "K_ex", "[", ":", ",", "0", ",", "2", "]", ".", "float", "(", ")", ")", "\n", "y2", "=", "torch", ".", "min", "(", "torch", ".", "max", "(", "torch", ".", "max", "(", "points_2d", "[", ":", ",", ":", ",", "1", "]", ",", "dim", "=", "1", ")", "[", "0", "]", ",", "torch", ".", "zeros", "(", "n", ")", ".", "cuda", "(", ")", ")", ",", "\n", "2", "*", "K_ex", "[", ":", ",", "1", ",", "2", "]", ")", "/", "(", "K_ex", "[", ":", ",", "1", ",", "2", "]", ".", "float", "(", ")", ")", "\n", "\n", "return", "torch", ".", "stack", "(", "(", "x1", ",", "y1", ",", "x2", ",", "y2", ")", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.libs.physical_violation": [[346, 367], ["bdb_3d.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.max", "torch.max", "torch.min", "torch.min", "torch.max", "torch.max", "torch.min", "torch.min", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.zeros().cuda", "torch.zeros().cuda", "layout_max[].expand", "layout_min[].expand", "enumerate", "enumerate", "torch.zeros", "torch.zeros"], "function", ["None"], ["", "def", "physical_violation", "(", "bdb_layout", ",", "bdb_3d", ",", "split", ")", ":", "\n", "    ", "'''\n    compute the loss of physical violation\n    :param bdb_layout: b x 8 x 3 tensor\n    :param bdb_3d: n x 8 x 3 tensor\n    :param split: b x 2 tensor\n    :return:\n    '''", "\n", "n", "=", "bdb_3d", ".", "size", "(", "0", ")", "\n", "layout_max", "=", "torch", ".", "max", "(", "bdb_layout", ",", "dim", "=", "1", ")", "[", "0", "]", "# b x 3", "\n", "layout_min", "=", "torch", ".", "min", "(", "bdb_layout", ",", "dim", "=", "1", ")", "[", "0", "]", "# b x 3", "\n", "\n", "layout_max_ex", "=", "torch", ".", "cat", "(", "[", "layout_max", "[", "index", "]", ".", "expand", "(", "interval", "[", "1", "]", "-", "interval", "[", "0", "]", ",", "-", "1", ")", "for", "index", ",", "interval", "in", "enumerate", "(", "split", ")", "]", ",", "0", ")", "# n x 3", "\n", "layout_min_ex", "=", "torch", ".", "cat", "(", "[", "layout_min", "[", "index", "]", ".", "expand", "(", "interval", "[", "1", "]", "-", "interval", "[", "0", "]", ",", "-", "1", ")", "for", "index", ",", "interval", "in", "enumerate", "(", "split", ")", "]", ",", "0", ")", "# n x 3", "\n", "\n", "bdb_max", "=", "torch", ".", "max", "(", "bdb_3d", ",", "dim", "=", "1", ")", "[", "0", "]", "# n x 3", "\n", "bdb_min", "=", "torch", ".", "min", "(", "bdb_3d", ",", "dim", "=", "1", ")", "[", "0", "]", "# n x 3", "\n", "\n", "violation", "=", "F", ".", "relu", "(", "bdb_max", "-", "layout_max_ex", ")", "+", "F", ".", "relu", "(", "layout_min_ex", "-", "bdb_min", ")", "# n x 3", "\n", "\n", "return", "violation", ",", "torch", ".", "zeros", "(", "n", ",", "3", ")", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.libs.get_bdb_evaluation": [[368, 386], ["libs.get_bdb_3d_result", "ori_cls_gt.size", "torch.argmax", "torch.argmax", "basis[].cpu().numpy", "coeffs[].cpu().numpy", "centroid[].squeeze().cpu().numpy", "class_id[].cpu().numpy", "range", "basis[].cpu", "coeffs[].cpu", "centroid[].squeeze().cpu", "class_id[].cpu", "centroid[].squeeze"], "function", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.libs.get_bdb_3d_result"], ["", "def", "get_bdb_evaluation", "(", "bins_tensor", ",", "ori_cls_gt", ",", "ori_reg_result", ",", "centroid_cls_gt", ",", "centroid_reg_result", ",", "size_cls_gt", ",", "\n", "size_reg_result", ",", "P", ",", "K", ",", "cam_R", ",", "split", ",", "return_bdb", "=", "False", ")", ":", "\n", "\n", "    ", "bdb", ",", "bdb_form", "=", "get_bdb_3d_result", "(", "bins_tensor", ",", "ori_cls_gt", ",", "ori_reg_result", ",", "centroid_cls_gt", ",", "centroid_reg_result", ",", "\n", "size_cls_gt", ",", "size_reg_result", ",", "P", ",", "K", ",", "cam_R", ",", "split", ")", "\n", "\n", "n", "=", "ori_cls_gt", ".", "size", "(", "0", ")", "\n", "basis", "=", "bdb_form", "[", "'basis'", "]", "\n", "coeffs", "=", "bdb_form", "[", "'coeffs'", "]", "\n", "centroid", "=", "bdb_form", "[", "'centroid'", "]", "\n", "class_id", "=", "torch", ".", "argmax", "(", "size_cls_gt", ",", "1", ")", "\n", "bdb_output", "=", "[", "{", "'basis'", ":", "basis", "[", "i", ",", ":", ",", ":", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "'coeffs'", ":", "coeffs", "[", "i", ",", ":", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "'centroid'", ":", "centroid", "[", "i", ",", ":", "]", ".", "squeeze", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "'classid'", ":", "class_id", "[", "i", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "}", "for", "i", "in", "\n", "range", "(", "n", ")", "]", "\n", "if", "not", "return_bdb", ":", "\n", "        ", "return", "bdb_output", "\n", "", "else", ":", "\n", "        ", "return", "bdb_output", ",", "bdb", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.libs.get_corners_of_bb3d_no_index": [[387, 401], ["numpy.zeros", "numpy.abs", "numpy.tile"], "function", ["None"], ["", "", "def", "get_corners_of_bb3d_no_index", "(", "basis", ",", "coeffs", ",", "centroid", ")", ":", "\n", "    ", "corners", "=", "np", ".", "zeros", "(", "(", "8", ",", "3", ")", ")", "\n", "coeffs", "=", "np", ".", "abs", "(", "coeffs", ")", "\n", "corners", "[", "0", ",", ":", "]", "=", "-", "basis", "[", "0", ",", ":", "]", "*", "coeffs", "[", "0", "]", "+", "basis", "[", "1", ",", ":", "]", "*", "coeffs", "[", "1", "]", "-", "basis", "[", "2", ",", ":", "]", "*", "coeffs", "[", "2", "]", "\n", "corners", "[", "1", ",", ":", "]", "=", "-", "basis", "[", "0", ",", ":", "]", "*", "coeffs", "[", "0", "]", "+", "basis", "[", "1", ",", ":", "]", "*", "coeffs", "[", "1", "]", "+", "basis", "[", "2", ",", ":", "]", "*", "coeffs", "[", "2", "]", "\n", "corners", "[", "2", ",", ":", "]", "=", "+", "basis", "[", "0", ",", ":", "]", "*", "coeffs", "[", "0", "]", "+", "basis", "[", "1", ",", ":", "]", "*", "coeffs", "[", "1", "]", "+", "basis", "[", "2", ",", ":", "]", "*", "coeffs", "[", "2", "]", "\n", "corners", "[", "3", ",", ":", "]", "=", "+", "basis", "[", "0", ",", ":", "]", "*", "coeffs", "[", "0", "]", "+", "basis", "[", "1", ",", ":", "]", "*", "coeffs", "[", "1", "]", "-", "basis", "[", "2", ",", ":", "]", "*", "coeffs", "[", "2", "]", "\n", "\n", "corners", "[", "4", ",", ":", "]", "=", "-", "basis", "[", "0", ",", ":", "]", "*", "coeffs", "[", "0", "]", "-", "basis", "[", "1", ",", ":", "]", "*", "coeffs", "[", "1", "]", "-", "basis", "[", "2", ",", ":", "]", "*", "coeffs", "[", "2", "]", "\n", "corners", "[", "5", ",", ":", "]", "=", "-", "basis", "[", "0", ",", ":", "]", "*", "coeffs", "[", "0", "]", "-", "basis", "[", "1", ",", ":", "]", "*", "coeffs", "[", "1", "]", "+", "basis", "[", "2", ",", ":", "]", "*", "coeffs", "[", "2", "]", "\n", "corners", "[", "6", ",", ":", "]", "=", "+", "basis", "[", "0", ",", ":", "]", "*", "coeffs", "[", "0", "]", "-", "basis", "[", "1", ",", ":", "]", "*", "coeffs", "[", "1", "]", "+", "basis", "[", "2", ",", ":", "]", "*", "coeffs", "[", "2", "]", "\n", "corners", "[", "7", ",", ":", "]", "=", "+", "basis", "[", "0", ",", ":", "]", "*", "coeffs", "[", "0", "]", "-", "basis", "[", "1", ",", ":", "]", "*", "coeffs", "[", "1", "]", "-", "basis", "[", "2", ",", ":", "]", "*", "coeffs", "[", "2", "]", "\n", "corners", "=", "corners", "+", "np", ".", "tile", "(", "centroid", ",", "(", "8", ",", "1", ")", ")", "\n", "return", "corners", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.libs.change_key": [[402, 414], ["copy.deepcopy", "copy.deepcopy.pop", "copy.deepcopy.pop", "copy.deepcopy.pop", "copy.deepcopy.pop", "copy.deepcopy.keys", "copy.deepcopy.keys"], "function", ["None"], ["", "def", "change_key", "(", "bbox", ")", ":", "\n", "    ", "if", "'u1'", "not", "in", "bbox", ".", "keys", "(", ")", "and", "'x1'", "in", "bbox", ".", "keys", "(", ")", ":", "\n", "        ", "bbox", "=", "deepcopy", "(", "bbox", ")", "\n", "bbox", "[", "'u1'", "]", "=", "bbox", "[", "'x1'", "]", "\n", "bbox", "[", "'v1'", "]", "=", "bbox", "[", "'y1'", "]", "\n", "bbox", "[", "'u2'", "]", "=", "bbox", "[", "'x2'", "]", "\n", "bbox", "[", "'v2'", "]", "=", "bbox", "[", "'y2'", "]", "\n", "bbox", ".", "pop", "(", "'x1'", ",", "None", ")", "\n", "bbox", ".", "pop", "(", "'x2'", ",", "None", ")", "\n", "bbox", ".", "pop", "(", "'y1'", ",", "None", ")", "\n", "bbox", ".", "pop", "(", "'y2'", ",", "None", ")", "\n", "", "return", "bbox", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.libs.get_iou": [[415, 467], ["libs.change_key", "libs.change_key", "max", "max", "min", "min", "float"], "function", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.libs.change_key", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.libs.change_key"], ["", "def", "get_iou", "(", "bb1", ",", "bb2", ")", ":", "\n", "    ", "\"\"\"\n        Calculate the Intersection over Union (IoU) of two bounding boxes.\n\n        Parameters\n        ----------\n        bb1 : dict\n            Keys: {'u1', 'v1', 'u2', 'v2'}\n            The (u1, v1) position is at the top left corner,\n            The (u2, v2) position is at the bottom right corner\n        bb2 : dict\n            Keys: {'u1', 'v1', 'u2', 'v2'}\n            The (u1, v1) position is at the top left corner,\n            The (u2, v2) position is at the bottom right corner\n\n        Returns\n        -------\n        float\n            in [0, 1]\n    \"\"\"", "\n", "bb1", "=", "change_key", "(", "bb1", ")", "\n", "bb2", "=", "change_key", "(", "bb2", ")", "\n", "\n", "assert", "bb1", "[", "'u1'", "]", "<=", "bb1", "[", "'u2'", "]", "\n", "assert", "bb1", "[", "'v1'", "]", "<=", "bb1", "[", "'v2'", "]", "\n", "assert", "bb2", "[", "'u1'", "]", "<=", "bb2", "[", "'u2'", "]", "\n", "assert", "bb2", "[", "'v1'", "]", "<=", "bb2", "[", "'v2'", "]", "\n", "\n", "# determine the coordinates of the intersection rectangle", "\n", "u_left", "=", "max", "(", "bb1", "[", "'u1'", "]", ",", "bb2", "[", "'u1'", "]", ")", "\n", "v_top", "=", "max", "(", "bb1", "[", "'v1'", "]", ",", "bb2", "[", "'v1'", "]", ")", "\n", "u_right", "=", "min", "(", "bb1", "[", "'u2'", "]", ",", "bb2", "[", "'u2'", "]", ")", "\n", "v_bottom", "=", "min", "(", "bb1", "[", "'v2'", "]", ",", "bb2", "[", "'v2'", "]", ")", "\n", "\n", "if", "u_right", "<", "u_left", "or", "v_bottom", "<", "v_top", ":", "\n", "        ", "return", "0.0", "\n", "\n", "# The intersection of two axis-aligned bounding boxes is always an", "\n", "# axis-aligned bounding box", "\n", "", "intersection_area", "=", "(", "u_right", "-", "u_left", ")", "*", "(", "v_bottom", "-", "v_top", ")", "\n", "\n", "# compute the area of both AABBs", "\n", "bb1_area", "=", "(", "bb1", "[", "'u2'", "]", "-", "bb1", "[", "'u1'", "]", ")", "*", "(", "bb1", "[", "'v2'", "]", "-", "bb1", "[", "'v1'", "]", ")", "\n", "bb2_area", "=", "(", "bb2", "[", "'u2'", "]", "-", "bb2", "[", "'u1'", "]", ")", "*", "(", "bb2", "[", "'v2'", "]", "-", "bb2", "[", "'v1'", "]", ")", "\n", "\n", "# compute the intersection over union by taking the intersection", "\n", "# area and dividing it by the sum of prediction + ground-truth", "\n", "# areas - the interesection area", "\n", "iou", "=", "intersection_area", "/", "float", "(", "bb1_area", "+", "bb2_area", "-", "intersection_area", ")", "\n", "assert", "iou", ">=", "0.0", "\n", "assert", "iou", "<=", "1.0", "\n", "return", "iou", "", "", ""]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.registry.Registry.__init__": [[8, 11], ["dict"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "name", ")", ":", "\n", "        ", "self", ".", "_name", "=", "name", "\n", "self", ".", "_module_dict", "=", "dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.registry.Registry.__repr__": [[12, 16], ["list", "registry.Registry._module_dict.keys"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "format_str", "=", "self", ".", "__class__", ".", "__name__", "+", "'(name={}, items={})'", ".", "format", "(", "\n", "self", ".", "_name", ",", "list", "(", "self", ".", "_module_dict", ".", "keys", "(", ")", ")", ")", "\n", "return", "format_str", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.registry.Registry.name": [[17, 20], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_name", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.registry.Registry.module_dict": [[21, 24], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "module_dict", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_module_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.registry.Registry.get": [[25, 30], ["registry.Registry._module_dict.get", "registry.Registry._module_dict.get"], "methods", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.CheckpointIO.get", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.CheckpointIO.get"], ["", "def", "get", "(", "self", ",", "key", ",", "alter_key", "=", "None", ")", ":", "\n", "        ", "if", "key", "in", "self", ".", "_module_dict", ":", "\n", "            ", "return", "self", ".", "_module_dict", ".", "get", "(", "key", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "_module_dict", ".", "get", "(", "alter_key", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.registry.Registry._register_module": [[31, 45], ["inspect.isclass", "TypeError", "KeyError", "type"], "methods", ["None"], ["", "", "def", "_register_module", "(", "self", ",", "module_class", ")", ":", "\n", "        ", "'''\n        register a module.\n        :param module_class (`nn.Module`): Module to be registered.\n        :return:\n        '''", "\n", "if", "not", "inspect", ".", "isclass", "(", "module_class", ")", ":", "\n", "            ", "raise", "TypeError", "(", "'module must be a class, but got {}'", ".", "format", "(", "\n", "type", "(", "module_class", ")", ")", ")", "\n", "", "module_name", "=", "module_class", ".", "__name__", "\n", "if", "module_name", "in", "self", ".", "_module_dict", ":", "\n", "            ", "raise", "KeyError", "(", "'{} is already registered in {}'", ".", "format", "(", "\n", "module_name", ",", "self", ".", "name", ")", ")", "\n", "", "self", ".", "_module_dict", "[", "module_name", "]", "=", "module_class", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.registry.Registry.register_module": [[46, 49], ["registry.Registry._register_module"], "methods", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.registry.Registry._register_module"], ["", "def", "register_module", "(", "self", ",", "cls", ")", ":", "\n", "        ", "self", ".", "_register_module", "(", "cls", ")", "\n", "return", "cls", "", "", "", ""]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.misc.weights_init": [[8, 15], ["classname.find", "m.weight.data.normal_", "classname.find", "m.weight.data.normal_", "m.bias.data.fill_"], "function", ["None"], ["def", "weights_init", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0.0", ",", "0.02", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "1.0", ",", "0.02", ")", "\n", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.misc.load_template": [[17, 28], ["open", "pickle.load", "torch.from_numpy().float", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().type", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "sphere_obj[].todense", "sphere_obj[].todense", "configs.data_config.number_pnts_on_template"], "function", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.CheckpointIO.load"], ["", "", "def", "load_template", "(", "number", ")", ":", "\n", "    ", "file_name", "=", "'./data/sphere%d.pkl'", "%", "(", "number", ")", "\n", "\n", "with", "open", "(", "file_name", ",", "'rb'", ")", "as", "file", ":", "\n", "        ", "sphere_obj", "=", "pickle", ".", "load", "(", "file", ")", "\n", "sphere_points_normals", "=", "torch", ".", "from_numpy", "(", "sphere_obj", "[", "'v'", "]", ")", ".", "float", "(", ")", "\n", "sphere_faces", "=", "torch", ".", "from_numpy", "(", "sphere_obj", "[", "'f'", "]", ")", ".", "long", "(", ")", "\n", "sphere_adjacency", "=", "torch", ".", "from_numpy", "(", "sphere_obj", "[", "'adjacency'", "]", ".", "todense", "(", ")", ")", ".", "long", "(", ")", "\n", "sphere_edges", "=", "torch", ".", "from_numpy", "(", "sphere_obj", "[", "'edges'", "]", ")", ".", "long", "(", ")", "\n", "sphere_edge2face", "=", "torch", ".", "from_numpy", "(", "sphere_obj", "[", "'edge2face'", "]", ".", "todense", "(", ")", ")", ".", "type", "(", "torch", ".", "uint8", ")", "\n", "", "return", "sphere_points_normals", ",", "sphere_faces", ",", "sphere_adjacency", ",", "sphere_edges", ",", "sphere_edge2face", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.misc.sample_points_on_edges": [[32, 65], ["np.diff.reshape", "torch.from_numpy().float().to", "np.diff.transpose", "np.diff.transpose().contiguous", "np.diff.expand().contiguous", "np.diff.view", "torch.gather", "torch.gather", "torch.cat().view", "torch.bmm().contiguous", "new_point_set.transpose().contiguous.view", "new_point_set.transpose().contiguous.transpose().contiguous", "new_point_set.transpose().contiguous.view", "new_point_set.transpose().contiguous.transpose().contiguous", "numpy.diff", "points.transpose", "points.transpose", "numpy.sort", "numpy.ones", "torch.from_numpy().float", "np.diff.transpose", "np.diff.expand", "edges.size", "edges.size", "edges.size", "edges.size", "torch.cat", "torch.bmm", "new_point_set.transpose().contiguous.transpose", "new_point_set.transpose().contiguous.transpose", "numpy.vstack", "torch.from_numpy", "torch.gather.unsqueeze", "torch.gather.unsqueeze", "numpy.zeros", "numpy.random.uniform", "numpy.ones"], "function", ["None"], ["def", "sample_points_on_edges", "(", "points", ",", "edges", ",", "quantity", "=", "1", ",", "mode", "=", "'train'", ")", ":", "\n", "    ", "n_batch", "=", "edges", ".", "shape", "[", "0", "]", "\n", "n_edges", "=", "edges", ".", "shape", "[", "1", "]", "\n", "\n", "if", "mode", "==", "'train'", ":", "\n", "# if the sampling rate is larger than 1, we randomly pick points on faces.", "\n", "        ", "weights", "=", "np", ".", "diff", "(", "np", ".", "sort", "(", "np", ".", "vstack", "(", "\n", "[", "np", ".", "zeros", "(", "(", "1", ",", "n_edges", "*", "quantity", ")", ")", ",", "np", ".", "random", ".", "uniform", "(", "0", ",", "1", ",", "size", "=", "(", "1", ",", "n_edges", "*", "quantity", ")", ")", ",", "\n", "np", ".", "ones", "(", "(", "1", ",", "n_edges", "*", "quantity", ")", ")", "]", ")", ",", "axis", "=", "0", ")", ",", "axis", "=", "0", ")", "\n", "", "else", ":", "\n", "# if in test mode, we pick the central point on faces.", "\n", "        ", "weights", "=", "0.5", "*", "np", ".", "ones", "(", "(", "2", ",", "n_edges", "*", "quantity", ")", ")", "\n", "\n", "", "weights", "=", "weights", ".", "reshape", "(", "[", "2", ",", "quantity", ",", "n_edges", "]", ")", "\n", "weights", "=", "torch", ".", "from_numpy", "(", "weights", ")", ".", "float", "(", ")", ".", "to", "(", "points", ".", "device", ")", "\n", "weights", "=", "weights", ".", "transpose", "(", "1", ",", "2", ")", "\n", "weights", "=", "weights", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "weights", "=", "weights", ".", "expand", "(", "n_batch", ",", "n_edges", ",", "2", ",", "quantity", ")", ".", "contiguous", "(", ")", "\n", "weights", "=", "weights", ".", "view", "(", "n_batch", "*", "n_edges", ",", "2", ",", "quantity", ")", "\n", "\n", "left_nodes", "=", "torch", ".", "gather", "(", "points", ".", "transpose", "(", "1", ",", "2", ")", ",", "1", ",", "\n", "(", "edges", "[", ":", ",", ":", ",", "0", "]", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "expand", "(", "edges", ".", "size", "(", "0", ")", ",", "edges", ".", "size", "(", "1", ")", ",", "3", ")", ")", "\n", "right_nodes", "=", "torch", ".", "gather", "(", "points", ".", "transpose", "(", "1", ",", "2", ")", ",", "1", ",", "\n", "(", "edges", "[", ":", ",", ":", ",", "1", "]", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "expand", "(", "edges", ".", "size", "(", "0", ")", ",", "edges", ".", "size", "(", "1", ")", ",", "3", ")", ")", "\n", "\n", "edge_points", "=", "torch", ".", "cat", "(", "[", "left_nodes", ".", "unsqueeze", "(", "-", "1", ")", ",", "right_nodes", ".", "unsqueeze", "(", "-", "1", ")", "]", ",", "-", "1", ")", ".", "view", "(", "n_batch", "*", "n_edges", ",", "3", ",", "2", ")", "\n", "\n", "new_point_set", "=", "torch", ".", "bmm", "(", "edge_points", ",", "weights", ")", ".", "contiguous", "(", ")", "\n", "new_point_set", "=", "new_point_set", ".", "view", "(", "n_batch", ",", "n_edges", ",", "3", ",", "quantity", ")", "\n", "new_point_set", "=", "new_point_set", ".", "transpose", "(", "2", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "new_point_set", "=", "new_point_set", ".", "view", "(", "n_batch", ",", "n_edges", "*", "quantity", ",", "3", ")", "\n", "new_point_set", "=", "new_point_set", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "return", "new_point_set", "\n", "", ""]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.CheckpointIO.__init__": [[20, 30], ["utils.CheckpointIO._module_dict.update"], "methods", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.AverageMeter.update"], ["def", "__init__", "(", "self", ",", "cfg", ",", "**", "kwargs", ")", ":", "\n", "        ", "'''\n        initialize model and optimizer.\n        :param cfg: configuration file\n        :param kwargs: model, optimizer and other specs.\n        '''", "\n", "self", ".", "cfg", "=", "cfg", "\n", "self", ".", "_module_dict", "=", "kwargs", "\n", "self", ".", "_module_dict", ".", "update", "(", "{", "'epoch'", ":", "0", ",", "'min_loss'", ":", "1e8", "}", ")", "\n", "self", ".", "_saved_filename", "=", "'model_last.pth'", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.CheckpointIO.module_dict": [[31, 34], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "module_dict", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_module_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.CheckpointIO.saved_filename": [[35, 38], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "saved_filename", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_saved_filename", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.CheckpointIO.is_url": [[39, 43], ["urllib.parse.urlparse"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "is_url", "(", "url", ")", ":", "\n", "        ", "scheme", "=", "urllib", ".", "parse", ".", "urlparse", "(", "url", ")", ".", "scheme", "\n", "return", "scheme", "in", "(", "'http'", ",", "'https'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.CheckpointIO.get": [[44, 46], ["utils.CheckpointIO._module_dict.get"], "methods", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.CheckpointIO.get"], ["", "def", "get", "(", "self", ",", "key", ")", ":", "\n", "        ", "return", "self", ".", "_module_dict", ".", "get", "(", "key", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.CheckpointIO.register_modules": [[47, 51], ["utils.CheckpointIO._module_dict.update"], "methods", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.AverageMeter.update"], ["", "def", "register_modules", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "''' Registers modules in current module dictionary.\n        '''", "\n", "self", ".", "_module_dict", ".", "update", "(", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.CheckpointIO.save": [[52, 71], ["utils.CheckpointIO._module_dict.items", "torch.save", "torch.save", "torch.save", "torch.save", "hasattr", "utils.CheckpointIO.saved_filename.replace", "os.path.join", "v.state_dict"], "methods", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.CheckpointIO.save", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.CheckpointIO.save", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.CheckpointIO.save", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.CheckpointIO.save"], ["", "def", "save", "(", "self", ",", "suffix", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "'''\n        save the current module dictionary.\n        :param kwargs:\n        :return:\n        '''", "\n", "outdict", "=", "kwargs", "\n", "for", "k", ",", "v", "in", "self", ".", "_module_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "hasattr", "(", "v", ",", "'state_dict'", ")", ":", "\n", "                ", "outdict", "[", "k", "]", "=", "v", ".", "state_dict", "(", ")", "\n", "", "else", ":", "\n", "                ", "outdict", "[", "k", "]", "=", "v", "\n", "\n", "", "", "if", "not", "suffix", ":", "\n", "            ", "filename", "=", "self", ".", "saved_filename", "\n", "", "else", ":", "\n", "            ", "filename", "=", "self", ".", "saved_filename", ".", "replace", "(", "'last'", ",", "suffix", ")", "\n", "\n", "", "torch", ".", "save", "(", "outdict", ",", "os", ".", "path", ".", "join", "(", "self", ".", "cfg", ".", "config", "[", "'log'", "]", "[", "'path'", "]", ",", "filename", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.CheckpointIO.load": [[72, 83], ["utils.CheckpointIO.is_url", "utils.CheckpointIO.load_url", "utils.CheckpointIO.load_file"], "methods", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.CheckpointIO.is_url", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.CheckpointIO.load_url", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.CheckpointIO.load_file"], ["", "def", "load", "(", "self", ",", "filename", ",", "*", "domain", ")", ":", "\n", "        ", "'''\n        load a module dictionary from local file or url.\n        :param filename (str): name of saved module dictionary\n        :return:\n        '''", "\n", "\n", "if", "self", ".", "is_url", "(", "filename", ")", ":", "\n", "            ", "return", "self", ".", "load_url", "(", "filename", ",", "*", "domain", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "load_file", "(", "filename", ",", "*", "domain", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.CheckpointIO.parse_checkpoint": [[84, 99], ["utils.CheckpointIO.cfg.log_string", "utils.CheckpointIO.resume", "utils.CheckpointIO.cfg.log_string", "utils.CheckpointIO.finetune", "utils.CheckpointIO.cfg.log_string"], "methods", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.config_utils.CONFIG.log_string", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.CheckpointIO.resume", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.config_utils.CONFIG.log_string", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.CheckpointIO.finetune", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.config_utils.CONFIG.log_string"], ["", "", "def", "parse_checkpoint", "(", "self", ")", ":", "\n", "        ", "'''\n        check if resume or finetune from existing checkpoint.\n        :return:\n        '''", "\n", "if", "self", ".", "cfg", ".", "config", "[", "'resume'", "]", ":", "\n", "# resume everything including net weights, optimizer, last epoch, last loss.", "\n", "            ", "self", ".", "cfg", ".", "log_string", "(", "'Begin to resume from the last checkpoint.'", ")", "\n", "self", ".", "resume", "(", ")", "\n", "", "elif", "self", ".", "cfg", ".", "config", "[", "'finetune'", "]", ":", "\n", "# only load net weights.", "\n", "            ", "self", ".", "cfg", ".", "log_string", "(", "'Begin to finetune from the existing weight.'", ")", "\n", "self", ".", "finetune", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "cfg", ".", "log_string", "(", "'Begin to train from scratch.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.CheckpointIO.finetune": [[100, 116], ["isinstance", "os.path.exists", "utils.CheckpointIO.cfg.log_string", "utils.CheckpointIO.load", "utils.CheckpointIO.cfg.log_string"], "methods", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.config_utils.CONFIG.log_string", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.CheckpointIO.load", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.config_utils.CONFIG.log_string"], ["", "", "def", "finetune", "(", "self", ")", ":", "\n", "        ", "'''\n        finetune fron existing checkpoint\n        :return:\n        '''", "\n", "if", "isinstance", "(", "self", ".", "cfg", ".", "config", "[", "'weight'", "]", ",", "str", ")", ":", "\n", "            ", "weight_paths", "=", "[", "self", ".", "cfg", ".", "config", "[", "'weight'", "]", "]", "\n", "", "else", ":", "\n", "            ", "weight_paths", "=", "self", ".", "cfg", ".", "config", "[", "'weight'", "]", "\n", "\n", "", "for", "weight_path", "in", "weight_paths", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "exists", "(", "weight_path", ")", ":", "\n", "                ", "self", ".", "cfg", ".", "log_string", "(", "'Warning: finetune failed: the weight path %s is invalid. Begin to train from scratch.'", "%", "(", "weight_path", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "load", "(", "weight_path", ",", "'net'", ")", "\n", "self", ".", "cfg", ".", "log_string", "(", "'Weights for finetuning loaded.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.CheckpointIO.resume": [[117, 136], ["os.path.dirname", "os.listdir", "os.listdir.sort", "utils.CheckpointIO.cfg.log_string", "os.path.join", "os.path.exists", "utils.CheckpointIO.load", "utils.CheckpointIO.cfg.log_string"], "methods", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.config_utils.CONFIG.log_string", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.CheckpointIO.load", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.config_utils.CONFIG.log_string"], ["", "", "", "def", "resume", "(", "self", ")", ":", "\n", "        ", "'''\n        resume the lastest checkpoint\n        :return:\n        '''", "\n", "checkpoint_root", "=", "os", ".", "path", ".", "dirname", "(", "self", ".", "cfg", ".", "save_path", ")", "\n", "saved_log_paths", "=", "os", ".", "listdir", "(", "checkpoint_root", ")", "\n", "saved_log_paths", ".", "sort", "(", "reverse", "=", "True", ")", "\n", "\n", "for", "last_path", "in", "saved_log_paths", ":", "\n", "            ", "last_checkpoint", "=", "os", ".", "path", ".", "join", "(", "checkpoint_root", ",", "last_path", ",", "self", ".", "saved_filename", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "last_checkpoint", ")", ":", "\n", "                ", "continue", "\n", "", "else", ":", "\n", "                ", "self", ".", "load", "(", "last_checkpoint", ")", "\n", "self", ".", "cfg", ".", "log_string", "(", "'Last checkpoint resumed.'", ")", "\n", "return", "\n", "\n", "", "", "self", ".", "cfg", ".", "log_string", "(", "'Warning: resume failed: No checkpoint available. Begin to train from scratch.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.CheckpointIO.load_file": [[137, 151], ["os.path.exists", "utils.CheckpointIO.cfg.log_string", "torch.load", "torch.load", "torch.load", "torch.load", "utils.CheckpointIO.parse_state_dict"], "methods", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.config_utils.CONFIG.log_string", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.CheckpointIO.load", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.CheckpointIO.load", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.CheckpointIO.load", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.CheckpointIO.load", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.CheckpointIO.parse_state_dict"], ["", "def", "load_file", "(", "self", ",", "filename", ",", "*", "domain", ")", ":", "\n", "        ", "'''\n        load a module dictionary from file.\n        :param filename: name of saved module dictionary\n        :return:\n        '''", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "filename", ")", ":", "\n", "            ", "self", ".", "cfg", ".", "log_string", "(", "'Loading checkpoint from %s.'", "%", "(", "filename", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "filename", ")", "\n", "scalars", "=", "self", ".", "parse_state_dict", "(", "checkpoint", ",", "*", "domain", ")", "\n", "return", "scalars", "\n", "", "else", ":", "\n", "            ", "raise", "FileExistsError", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.CheckpointIO.load_url": [[152, 162], ["utils.CheckpointIO.cfg.log_string", "torch.utils.model_zoo.load_url", "torch.utils.model_zoo.load_url", "utils.CheckpointIO.parse_state_dict"], "methods", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.config_utils.CONFIG.log_string", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.CheckpointIO.load_url", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.CheckpointIO.load_url", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.CheckpointIO.parse_state_dict"], ["", "", "def", "load_url", "(", "self", ",", "url", ",", "*", "domain", ")", ":", "\n", "        ", "'''\n        load a module dictionary from url.\n        :param url: url to a saved model\n        :return:\n        '''", "\n", "self", ".", "cfg", ".", "log_string", "(", "'Loading checkpoint from %s.'", "%", "(", "url", ")", ")", "\n", "state_dict", "=", "model_zoo", ".", "load_url", "(", "url", ",", "progress", "=", "True", ")", "\n", "scalars", "=", "self", ".", "parse_state_dict", "(", "state_dict", ",", "domain", ")", "\n", "return", "scalars", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.CheckpointIO.parse_state_dict": [[163, 196], ["utils.CheckpointIO._module_dict.items", "hasattr", "utils.CheckpointIO.cfg.log_string", "utils.CheckpointIO.cfg.log_string", "utils.CheckpointIO._module_dict.update", "checkpoint.items", "value.load_state_dict", "value.load_weight", "scalars.keys"], "methods", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.config_utils.CONFIG.log_string", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.config_utils.CONFIG.log_string", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.models.network.BaseNetwork.load_weight"], ["", "def", "parse_state_dict", "(", "self", ",", "checkpoint", ",", "*", "domain", ")", ":", "\n", "        ", "'''\n        parse state_dict of model and return scalars\n        :param checkpoint: state_dict of model\n        :return:\n        '''", "\n", "for", "key", ",", "value", "in", "self", ".", "_module_dict", ".", "items", "(", ")", ":", "\n", "\n", "# only load specific key names.", "\n", "            ", "if", "domain", "and", "(", "key", "not", "in", "domain", ")", ":", "\n", "                ", "continue", "\n", "\n", "", "if", "key", "in", "checkpoint", ":", "\n", "                ", "if", "hasattr", "(", "value", ",", "'load_state_dict'", ")", ":", "\n", "                    ", "if", "key", "!=", "'net'", ":", "\n", "                        ", "value", ".", "load_state_dict", "(", "checkpoint", "[", "key", "]", ")", "\n", "", "else", ":", "\n", "                        ", "'''load weights module by module'''", "\n", "value", ".", "load_weight", "(", "checkpoint", "[", "key", "]", ")", "\n", "", "", "else", ":", "\n", "                    ", "self", ".", "_module_dict", ".", "update", "(", "{", "key", ":", "checkpoint", "[", "key", "]", "}", ")", "\n", "", "", "else", ":", "\n", "                ", "self", ".", "cfg", ".", "log_string", "(", "'Warning: Could not find %s in checkpoint!'", "%", "key", ")", "\n", "\n", "", "", "if", "not", "domain", ":", "\n", "# remaining weights in state_dict that not found in our models.", "\n", "            ", "scalars", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "checkpoint", ".", "items", "(", ")", "if", "k", "not", "in", "self", ".", "_module_dict", "}", "\n", "if", "scalars", ":", "\n", "                ", "self", ".", "cfg", ".", "log_string", "(", "'Warning: the remaining modules %s in checkpoint are not found in our current setting.'", "%", "(", "scalars", ".", "keys", "(", ")", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "scalars", "=", "{", "}", "\n", "\n", "", "return", "scalars", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.AverageMeter.__init__": [[281, 283], ["utils.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.AverageMeter.reset": [[284, 289], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.AverageMeter.update": [[290, 299], ["isinstance", "sum", "len"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "# current value", "\n", "if", "not", "isinstance", "(", "val", ",", "list", ")", ":", "\n", "            ", "self", ".", "sum", "+=", "val", "*", "n", "# accumulated sum, n = batch_size", "\n", "self", ".", "count", "+=", "n", "# accumulated count", "\n", "", "else", ":", "\n", "            ", "self", ".", "sum", "+=", "sum", "(", "val", ")", "\n", "self", ".", "count", "+=", "len", "(", "val", ")", "\n", "", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "# current average value", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.LossRecorder.__init__": [[301, 309], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "batch_size", "=", "1", ")", ":", "\n", "        ", "'''\n        Log loss data\n        :param config: configuration file.\n        :param phase: train, validation or test.\n        '''", "\n", "self", ".", "_batch_size", "=", "batch_size", "\n", "self", ".", "_loss_recorder", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.LossRecorder.batch_size": [[310, 313], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "batch_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.LossRecorder.loss_recorder": [[314, 317], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "loss_recorder", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_loss_recorder", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.LossRecorder.update_loss": [[318, 323], ["loss_dict.items", "utils.LossRecorder._loss_recorder[].update", "utils.AverageMeter"], "methods", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.AverageMeter.update"], ["", "def", "update_loss", "(", "self", ",", "loss_dict", ")", ":", "\n", "        ", "for", "key", ",", "item", "in", "loss_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "key", "not", "in", "self", ".", "_loss_recorder", ":", "\n", "                ", "self", ".", "_loss_recorder", "[", "key", "]", "=", "AverageMeter", "(", ")", "\n", "", "self", ".", "_loss_recorder", "[", "key", "]", ".", "update", "(", "item", ",", "self", ".", "_batch_size", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.initiate_environment": [[197, 209], ["torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "numpy.random.seed", "random.seed"], "function", ["None"], ["", "", "def", "initiate_environment", "(", "config", ")", ":", "\n", "    ", "'''\n    initiate randomness.\n    :param config:\n    :return:\n    '''", "\n", "torch", ".", "manual_seed", "(", "config", "[", "'seed'", "]", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "config", "[", "'seed'", "]", ")", "\n", "np", ".", "random", ".", "seed", "(", "config", "[", "'seed'", "]", ")", "\n", "random", ".", "seed", "(", "config", "[", "'seed'", "]", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "enabled", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.load_device": [[210, 223], ["torch.cuda.is_available", "torch.cuda.is_available", "cfg.log_string", "cfg.log_string", "torch.device", "torch.device", "cfg.log_string", "torch.device", "torch.device"], "function", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.config_utils.CONFIG.log_string", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.config_utils.CONFIG.log_string", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.config_utils.CONFIG.log_string"], ["", "def", "load_device", "(", "cfg", ")", ":", "\n", "    ", "'''\n    load device settings\n    :param config:\n    :return:\n    '''", "\n", "if", "cfg", ".", "config", "[", "'device'", "]", "[", "'use_gpu'", "]", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "cfg", ".", "log_string", "(", "'GPU mode is on.'", ")", "\n", "cfg", ".", "log_string", "(", "'GPU Ids: %s used.'", "%", "(", "cfg", ".", "config", "[", "'device'", "]", "[", "'gpu_ids'", "]", ")", ")", "\n", "return", "torch", ".", "device", "(", "\"cuda\"", ")", "\n", "", "else", ":", "\n", "        ", "cfg", ".", "log_string", "(", "'CPU mode is on.'", ")", "\n", "return", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.load_model": [[224, 237], ["cfg.log_string", "cfg.log_string", "sys.exit", "models.registers.METHODS.get"], "function", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.config_utils.CONFIG.log_string", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.config_utils.CONFIG.log_string", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.CheckpointIO.get"], ["", "", "def", "load_model", "(", "cfg", ",", "device", ")", ":", "\n", "    ", "'''\n    load specific network from configuration file\n    :param config: configuration file\n    :param device: torch.device\n    :return:\n    '''", "\n", "if", "cfg", ".", "config", "[", "'method'", "]", "not", "in", "METHODS", ".", "module_dict", ":", "\n", "        ", "cfg", ".", "log_string", "(", "'The method %s is not defined, please check the correct name.'", "%", "(", "cfg", ".", "config", "[", "'method'", "]", ")", ")", "\n", "cfg", ".", "log_string", "(", "'Exit now.'", ")", "\n", "sys", ".", "exit", "(", "0", ")", "\n", "\n", "", "return", "METHODS", ".", "get", "(", "cfg", ".", "config", "[", "'method'", "]", ")", "(", "cfg", ")", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.load_trainer": [[238, 252], ["method_paths[].config.get_trainer"], "function", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.total3d.config.get_trainer"], ["", "def", "load_trainer", "(", "cfg", ",", "net", ",", "optimizer", ",", "device", ")", ":", "\n", "    ", "'''\n    load trainer for training and validation\n    :param cfg: configuration file\n    :param net: nn.Module network\n    :param optimizer: torch.optim\n    :param device: torch.device\n    :return:\n    '''", "\n", "trainer", "=", "method_paths", "[", "cfg", ".", "config", "[", "'method'", "]", "]", ".", "config", ".", "get_trainer", "(", "cfg", "=", "cfg", ",", "\n", "net", "=", "net", ",", "\n", "optimizer", "=", "optimizer", ",", "\n", "device", "=", "device", ")", "\n", "return", "trainer", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.load_tester": [[253, 265], ["method_paths[].config.get_tester"], "function", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.total3d.config.get_tester"], ["", "def", "load_tester", "(", "cfg", ",", "net", ",", "device", ")", ":", "\n", "    ", "'''\n    load tester for testing\n    :param cfg: configuration file\n    :param net: nn.Module network\n    :param device: torch.device\n    :return:\n    '''", "\n", "tester", "=", "method_paths", "[", "cfg", ".", "config", "[", "'method'", "]", "]", ".", "config", ".", "get_tester", "(", "cfg", "=", "cfg", ",", "\n", "net", "=", "net", ",", "\n", "device", "=", "device", ")", "\n", "return", "tester", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.load_dataloader": [[266, 276], ["method_paths[].config.get_dataloader"], "function", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.total3d.config.get_dataloader"], ["", "def", "load_dataloader", "(", "config", ",", "mode", ")", ":", "\n", "    ", "'''\n    load dataloader\n    :param config: configuration file.\n    :param mode: 'train', 'val' or 'test'.\n    :return:\n    '''", "\n", "dataloader", "=", "method_paths", "[", "config", "[", "'method'", "]", "]", ".", "config", ".", "get_dataloader", "(", "config", "=", "config", ",", "\n", "mode", "=", "mode", ")", "\n", "return", "dataloader", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.models.eval_metrics.get_iou_cuboid": [[7, 41], ["shapely.geometry.polygon.Polygon", "shapely.geometry.polygon.Polygon", "shapely.geometry.polygon.Polygon.intersection", "max", "min", "max"], "function", ["None"], ["def", "get_iou_cuboid", "(", "cu1", ",", "cu2", ")", ":", "\n", "    ", "\"\"\"\n        Calculate the Intersection over Union (IoU) of two 3D cuboid.\n\n        Parameters\n        ----------\n        cu1 : numpy array, 8x3\n        cu2 : numpy array, 8x3\n\n        Returns\n        -------\n        float\n            in [0, 1]\n    \"\"\"", "\n", "\n", "# 2D projection on the horizontal plane (z-x plane)", "\n", "polygon2D_1", "=", "Polygon", "(", "\n", "[", "(", "cu1", "[", "0", "]", "[", "2", "]", ",", "cu1", "[", "0", "]", "[", "0", "]", ")", ",", "(", "cu1", "[", "1", "]", "[", "2", "]", ",", "cu1", "[", "1", "]", "[", "0", "]", ")", ",", "(", "cu1", "[", "2", "]", "[", "2", "]", ",", "cu1", "[", "2", "]", "[", "0", "]", ")", ",", "(", "cu1", "[", "3", "]", "[", "2", "]", ",", "cu1", "[", "3", "]", "[", "0", "]", ")", "]", ")", "\n", "\n", "polygon2D_2", "=", "Polygon", "(", "\n", "[", "(", "cu2", "[", "0", "]", "[", "2", "]", ",", "cu2", "[", "0", "]", "[", "0", "]", ")", ",", "(", "cu2", "[", "1", "]", "[", "2", "]", ",", "cu2", "[", "1", "]", "[", "0", "]", ")", ",", "(", "cu2", "[", "2", "]", "[", "2", "]", ",", "cu2", "[", "2", "]", "[", "0", "]", ")", ",", "(", "cu2", "[", "3", "]", "[", "2", "]", ",", "cu2", "[", "3", "]", "[", "0", "]", ")", "]", ")", "\n", "\n", "# 2D intersection area of the two projections.", "\n", "intersect_2D", "=", "polygon2D_1", ".", "intersection", "(", "polygon2D_2", ")", ".", "area", "\n", "\n", "# the volume of the intersection part of cu1 and cu2", "\n", "inter_vol", "=", "intersect_2D", "*", "max", "(", "0.0", ",", "min", "(", "cu1", "[", "0", "]", "[", "1", "]", ",", "cu2", "[", "0", "]", "[", "1", "]", ")", "-", "max", "(", "cu1", "[", "4", "]", "[", "1", "]", ",", "cu2", "[", "4", "]", "[", "1", "]", ")", ")", "\n", "\n", "# the volume of cu1 and cu2", "\n", "vol1", "=", "polygon2D_1", ".", "area", "*", "(", "cu1", "[", "0", "]", "[", "1", "]", "-", "cu1", "[", "4", "]", "[", "1", "]", ")", "\n", "vol2", "=", "polygon2D_2", ".", "area", "*", "(", "cu2", "[", "0", "]", "[", "1", "]", "-", "cu2", "[", "4", "]", "[", "1", "]", ")", "\n", "\n", "# return 3D IoU", "\n", "return", "inter_vol", "/", "(", "vol1", "+", "vol2", "-", "inter_vol", ")", "", "", ""]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.models.network.BaseNetwork.__init__": [[12, 34], ["torch.Module.__init__", "cfg.config[].items", "network.BaseNetwork.freeze_modules", "network.BaseNetwork.load_optim_spec", "network.BaseNetwork.add_module", "setattr", "models.registers.MODULES.get", "models.registers.LOSSES.get", "[].get"], "methods", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.data_config.Config.__init__", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.models.network.BaseNetwork.freeze_modules", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.models.network.BaseNetwork.load_optim_spec", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.CheckpointIO.get", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.CheckpointIO.get", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.CheckpointIO.get"], ["def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "'''\n        load submodules for the network.\n        :param config: customized configurations.\n        '''", "\n", "super", "(", "BaseNetwork", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cfg", "=", "cfg", "\n", "\n", "'''load network blocks'''", "\n", "for", "phase_name", ",", "net_spec", "in", "cfg", ".", "config", "[", "'model'", "]", ".", "items", "(", ")", ":", "\n", "            ", "method_name", "=", "net_spec", "[", "'method'", "]", "\n", "# load specific optimizer parameters", "\n", "optim_spec", "=", "self", ".", "load_optim_spec", "(", "cfg", ".", "config", ",", "net_spec", ")", "\n", "subnet", "=", "MODULES", ".", "get", "(", "method_name", ")", "(", "cfg", ".", "config", ",", "optim_spec", ")", "\n", "self", ".", "add_module", "(", "phase_name", ",", "subnet", ")", "\n", "\n", "'''load corresponding loss functions'''", "\n", "setattr", "(", "self", ",", "phase_name", "+", "'_loss'", ",", "LOSSES", ".", "get", "(", "self", ".", "cfg", ".", "config", "[", "'model'", "]", "[", "phase_name", "]", "[", "'loss'", "]", ",", "'Null'", ")", "(", "\n", "self", ".", "cfg", ".", "config", "[", "'model'", "]", "[", "phase_name", "]", ".", "get", "(", "'weight'", ",", "1", ")", ")", ")", "\n", "\n", "", "'''freeze submodules or not'''", "\n", "self", ".", "freeze_modules", "(", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.models.network.BaseNetwork.freeze_modules": [[35, 47], ["getattr().parameters", "cfg.log_string", "hasattr", "getattr"], "methods", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.config_utils.CONFIG.log_string"], ["", "def", "freeze_modules", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "'''\n        Freeze modules in training\n        '''", "\n", "if", "cfg", ".", "config", "[", "'mode'", "]", "==", "'train'", ":", "\n", "            ", "freeze_layers", "=", "cfg", ".", "config", "[", "'train'", "]", "[", "'freeze'", "]", "\n", "for", "layer", "in", "freeze_layers", ":", "\n", "                ", "if", "not", "hasattr", "(", "self", ",", "layer", ")", ":", "\n", "                    ", "continue", "\n", "", "for", "param", "in", "getattr", "(", "self", ",", "layer", ")", ".", "parameters", "(", ")", ":", "\n", "                    ", "param", ".", "requires_grad", "=", "False", "\n", "", "cfg", ".", "log_string", "(", "'The module: %s is fixed.'", "%", "(", "layer", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.models.network.BaseNetwork.set_mode": [[48, 64], ["network.BaseNetwork.named_children", "network.BaseNetwork.modules", "child.train", "m._get_name().find", "m.eval", "m._get_name"], "methods", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.None.train_epoch.train"], ["", "", "", "def", "set_mode", "(", "self", ")", ":", "\n", "        ", "'''\n        Set train/eval mode for the network.\n        :param phase: train or eval\n        :return:\n        '''", "\n", "freeze_layers", "=", "self", ".", "cfg", ".", "config", "[", "'train'", "]", "[", "'freeze'", "]", "\n", "for", "name", ",", "child", "in", "self", ".", "named_children", "(", ")", ":", "\n", "            ", "if", "name", "in", "freeze_layers", ":", "\n", "                ", "child", ".", "train", "(", "False", ")", "\n", "\n", "# turn off BatchNorm if batch_size == 1.", "\n", "", "", "if", "self", ".", "cfg", ".", "config", "[", "self", ".", "cfg", ".", "config", "[", "'mode'", "]", "]", "[", "'batch_size'", "]", "==", "1", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "m", ".", "_get_name", "(", ")", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "                    ", "m", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.models.network.BaseNetwork.load_weight": [[65, 73], ["network.BaseNetwork.state_dict", "network.BaseNetwork.cfg.log_string", "network.BaseNetwork.update", "network.BaseNetwork.load_state_dict", "pretrained_model.items", "str", "set", "key.split"], "methods", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.config_utils.CONFIG.log_string", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.AverageMeter.update"], ["", "", "", "", "def", "load_weight", "(", "self", ",", "pretrained_model", ")", ":", "\n", "        ", "model_dict", "=", "self", ".", "state_dict", "(", ")", "\n", "pretrained_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "pretrained_model", ".", "items", "(", ")", "if", "\n", "k", "in", "model_dict", "}", "\n", "self", ".", "cfg", ".", "log_string", "(", "\n", "str", "(", "set", "(", "[", "key", ".", "split", "(", "'.'", ")", "[", "0", "]", "for", "key", "in", "model_dict", "if", "key", "not", "in", "pretrained_dict", "]", ")", ")", "+", "' subnet missed.'", ")", "\n", "model_dict", ".", "update", "(", "pretrained_dict", ")", "\n", "self", ".", "load_state_dict", "(", "model_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.models.network.BaseNetwork.load_optim_spec": [[74, 85], ["net_spec.keys"], "methods", ["None"], ["", "def", "load_optim_spec", "(", "self", ",", "config", ",", "net_spec", ")", ":", "\n", "# load specific optimizer parameters", "\n", "        ", "if", "config", "[", "'mode'", "]", "==", "'train'", ":", "\n", "            ", "if", "'optimizer'", "in", "net_spec", ".", "keys", "(", ")", ":", "\n", "                ", "optim_spec", "=", "net_spec", "[", "'optimizer'", "]", "\n", "", "else", ":", "\n", "                ", "optim_spec", "=", "config", "[", "'optimizer'", "]", "# else load default optimizer", "\n", "", "", "else", ":", "\n", "            ", "optim_spec", "=", "None", "\n", "\n", "", "return", "optim_spec", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.models.network.BaseNetwork.forward": [[86, 90], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "''' Performs a forward step.\n        '''", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.models.network.BaseNetwork.loss": [[91, 95], ["None"], "methods", ["None"], ["", "def", "loss", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "''' calculate losses.\n        '''", "\n", "raise", "NotImplementedError", "", "", "", ""]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.models.loss.BaseLoss.__init__": [[113, 116], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "weight", "=", "1", ")", ":", "\n", "        ", "'''initialize loss module'''", "\n", "self", ".", "weight", "=", "weight", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.models.loss.Null.__call__": [[120, 122], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "loss", ")", ":", "\n", "        ", "return", "self", ".", "weight", "*", "torch", ".", "mean", "(", "loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.models.loss.SVRLoss.__call__": [[125, 178], ["torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "enumerate", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "zip", "mesh_coordinates_result.transpose.transpose.transpose", "edge_vec.view.view.view", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "len", "len", "points_from_edges_by_step.transpose().contiguous.transpose().contiguous.transpose().contiguous", "dist_chamfer", "idx2.long.long.long", "torch.mean.view", "torch.mean.view", "torch.mean.view", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "binary_cls_criterion", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "dist_chamfer", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "edge_vec.view.view.size", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "len", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "edge_vec.view.view.size", "edge_vec.view.view.size", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "points_from_edges_by_step.transpose().contiguous.transpose().contiguous.transpose", "est_data[].size", "est_data[].size", "est_data[].size", "est_data[].size", "range", "range", "gt_data[].size", "gt_data[].size"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "est_data", ",", "gt_data", ",", "subnetworks", ",", "face_sampling_rate", ")", ":", "\n", "        ", "device", "=", "est_data", "[", "'mesh_coordinates_results'", "]", "[", "0", "]", ".", "device", "\n", "# chamfer losses", "\n", "chamfer_loss", "=", "torch", ".", "tensor", "(", "0.", ")", ".", "to", "(", "device", ")", "\n", "edge_loss", "=", "torch", ".", "tensor", "(", "0.", ")", ".", "to", "(", "device", ")", "\n", "boundary_loss", "=", "torch", ".", "tensor", "(", "0.", ")", ".", "to", "(", "device", ")", "\n", "\n", "for", "stage_id", ",", "mesh_coordinates_result", "in", "enumerate", "(", "est_data", "[", "'mesh_coordinates_results'", "]", ")", ":", "\n", "            ", "mesh_coordinates_result", "=", "mesh_coordinates_result", ".", "transpose", "(", "1", ",", "2", ")", "\n", "# points to points chamfer loss", "\n", "dist1", ",", "dist2", "=", "dist_chamfer", "(", "gt_data", "[", "'mesh_points'", "]", ",", "mesh_coordinates_result", ")", "[", ":", "2", "]", "\n", "chamfer_loss", "+=", "(", "torch", ".", "mean", "(", "dist1", ")", ")", "+", "(", "torch", ".", "mean", "(", "dist2", ")", ")", "\n", "\n", "# boundary loss", "\n", "if", "stage_id", "==", "subnetworks", "-", "1", ":", "\n", "                ", "if", "1", "in", "est_data", "[", "'boundary_point_ids'", "]", ":", "\n", "                    ", "boundary_loss", "=", "torch", ".", "mean", "(", "dist2", "[", "est_data", "[", "'boundary_point_ids'", "]", "]", ")", "\n", "\n", "# edge loss", "\n", "", "", "edge_vec", "=", "torch", ".", "gather", "(", "mesh_coordinates_result", ",", "1", ",", "\n", "(", "est_data", "[", "'output_edges'", "]", "[", ":", ",", ":", ",", "0", "]", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "expand", "(", "est_data", "[", "'output_edges'", "]", ".", "size", "(", "0", ")", ",", "\n", "est_data", "[", "'output_edges'", "]", ".", "size", "(", "1", ")", ",", "3", ")", ")", "-", "torch", ".", "gather", "(", "mesh_coordinates_result", ",", "1", ",", "\n", "(", "est_data", "[", "'output_edges'", "]", "[", ":", ",", ":", ",", "1", "]", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "expand", "(", "est_data", "[", "'output_edges'", "]", ".", "size", "(", "0", ")", ",", "\n", "est_data", "[", "'output_edges'", "]", ".", "size", "(", "1", ")", ",", "3", ")", ")", "\n", "\n", "edge_vec", "=", "edge_vec", ".", "view", "(", "edge_vec", ".", "size", "(", "0", ")", "*", "edge_vec", ".", "size", "(", "1", ")", ",", "edge_vec", ".", "size", "(", "2", ")", ")", "\n", "edge_loss", "+=", "torch", ".", "mean", "(", "torch", ".", "pow", "(", "torch", ".", "norm", "(", "edge_vec", ",", "p", "=", "2", ",", "dim", "=", "1", ")", ",", "2", ")", ")", "\n", "\n", "", "chamfer_loss", "=", "100", "*", "chamfer_loss", "/", "len", "(", "est_data", "[", "'mesh_coordinates_results'", "]", ")", "\n", "edge_loss", "=", "100", "*", "edge_loss", "/", "len", "(", "est_data", "[", "'mesh_coordinates_results'", "]", ")", "\n", "boundary_loss", "=", "100", "*", "boundary_loss", "\n", "\n", "# face distance losses", "\n", "face_loss", "=", "torch", ".", "tensor", "(", "0.", ")", ".", "to", "(", "device", ")", "\n", "for", "points_from_edges_by_step", ",", "points_indicator_by_step", "in", "zip", "(", "est_data", "[", "'points_from_edges'", "]", ",", "est_data", "[", "'point_indicators'", "]", ")", ":", "\n", "            ", "points_from_edges_by_step", "=", "points_from_edges_by_step", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "_", ",", "dist2_face", ",", "_", ",", "idx2", "=", "dist_chamfer", "(", "gt_data", "[", "'mesh_points'", "]", ",", "points_from_edges_by_step", ")", "\n", "idx2", "=", "idx2", ".", "long", "(", ")", "\n", "dist2_face", "=", "dist2_face", ".", "view", "(", "dist2_face", ".", "shape", "[", "0", "]", ",", "dist2_face", ".", "shape", "[", "1", "]", "//", "face_sampling_rate", ",", "\n", "face_sampling_rate", ")", "\n", "\n", "# average distance to nearest face.", "\n", "dist2_face", "=", "torch", ".", "mean", "(", "dist2_face", ",", "dim", "=", "2", ")", "\n", "local_dens", "=", "gt_data", "[", "'densities'", "]", "[", ":", ",", "idx2", "[", ":", "]", "]", "[", "range", "(", "gt_data", "[", "'densities'", "]", ".", "size", "(", "0", ")", ")", ",", "range", "(", "gt_data", "[", "'densities'", "]", ".", "size", "(", "0", ")", ")", ",", ":", "]", "\n", "in_mesh", "=", "(", "dist2_face", "<=", "local_dens", ")", ".", "float", "(", ")", "\n", "face_loss", "+=", "binary_cls_criterion", "(", "points_indicator_by_step", ",", "in_mesh", ")", "\n", "\n", "", "if", "est_data", "[", "'points_from_edges'", "]", ":", "\n", "            ", "face_loss", "=", "face_loss", "/", "len", "(", "est_data", "[", "'points_from_edges'", "]", ")", "\n", "\n", "", "return", "{", "'chamfer_loss'", ":", "chamfer_loss", ",", "'face_loss'", ":", "0.01", "*", "face_loss", ",", "\n", "'edge_loss'", ":", "0.1", "*", "edge_loss", ",", "'boundary_loss'", ":", "0.5", "*", "boundary_loss", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.models.loss.PoseLoss.__call__": [[181, 198], ["loss.cls_reg_loss", "loss.cls_reg_loss", "loss.cls_reg_loss", "net_utils.libs.get_layout_bdb_sunrgbd", "reg_criterion", "reg_criterion", "reg_criterion"], "methods", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.models.loss.cls_reg_loss", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.models.loss.cls_reg_loss", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.models.loss.cls_reg_loss", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.libs.get_layout_bdb_sunrgbd"], ["    ", "def", "__call__", "(", "self", ",", "est_data", ",", "gt_data", ",", "bins_tensor", ")", ":", "\n", "        ", "pitch_cls_loss", ",", "pitch_reg_loss", "=", "cls_reg_loss", "(", "est_data", "[", "'pitch_cls_result'", "]", ",", "gt_data", "[", "'pitch_cls'", "]", ",", "est_data", "[", "'pitch_reg_result'", "]", ",", "gt_data", "[", "'pitch_reg'", "]", ")", "\n", "roll_cls_loss", ",", "roll_reg_loss", "=", "cls_reg_loss", "(", "est_data", "[", "'roll_cls_result'", "]", ",", "gt_data", "[", "'roll_cls'", "]", ",", "est_data", "[", "'roll_reg_result'", "]", ",", "gt_data", "[", "'roll_reg'", "]", ")", "\n", "lo_ori_cls_loss", ",", "lo_ori_reg_loss", "=", "cls_reg_loss", "(", "est_data", "[", "'lo_ori_cls_result'", "]", ",", "gt_data", "[", "'lo_ori_cls'", "]", ",", "est_data", "[", "'lo_ori_reg_result'", "]", ",", "gt_data", "[", "'lo_ori_reg'", "]", ")", "\n", "lo_centroid_loss", "=", "reg_criterion", "(", "est_data", "[", "'lo_centroid_result'", "]", ",", "gt_data", "[", "'lo_centroid'", "]", ")", "*", "cls_reg_ratio", "\n", "lo_coeffs_loss", "=", "reg_criterion", "(", "est_data", "[", "'lo_coeffs_result'", "]", ",", "gt_data", "[", "'lo_coeffs'", "]", ")", "*", "cls_reg_ratio", "\n", "\n", "lo_bdb3D_result", "=", "get_layout_bdb_sunrgbd", "(", "bins_tensor", ",", "est_data", "[", "'lo_ori_reg_result'", "]", ",", "gt_data", "[", "'lo_ori_cls'", "]", ",", "est_data", "[", "'lo_centroid_result'", "]", ",", "\n", "est_data", "[", "'lo_coeffs_result'", "]", ")", "\n", "# layout bounding box corner loss", "\n", "lo_corner_loss", "=", "cls_reg_ratio", "*", "reg_criterion", "(", "lo_bdb3D_result", ",", "gt_data", "[", "'lo_bdb3D'", "]", ")", "\n", "\n", "return", "{", "'pitch_cls_loss'", ":", "pitch_cls_loss", ",", "'pitch_reg_loss'", ":", "pitch_reg_loss", ",", "\n", "'roll_cls_loss'", ":", "roll_cls_loss", ",", "'roll_reg_loss'", ":", "roll_reg_loss", ",", "\n", "'lo_ori_cls_loss'", ":", "lo_ori_cls_loss", ",", "'lo_ori_reg_loss'", ":", "lo_ori_reg_loss", ",", "\n", "'lo_centroid_loss'", ":", "lo_centroid_loss", ",", "'lo_coeffs_loss'", ":", "lo_coeffs_loss", ",", "\n", "'lo_corner_loss'", ":", "lo_corner_loss", "}", ",", "{", "'lo_bdb3D_result'", ":", "lo_bdb3D_result", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.models.loss.DetLoss.__call__": [[201, 212], ["loss.cls_reg_loss", "loss.cls_reg_loss", "reg_criterion", "reg_criterion"], "methods", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.models.loss.cls_reg_loss", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.models.loss.cls_reg_loss"], ["    ", "def", "__call__", "(", "self", ",", "est_data", ",", "gt_data", ")", ":", "\n", "# calculate loss", "\n", "        ", "size_reg_loss", "=", "reg_criterion", "(", "est_data", "[", "'size_reg_result'", "]", ",", "gt_data", "[", "'size_reg'", "]", ")", "*", "cls_reg_ratio", "\n", "ori_cls_loss", ",", "ori_reg_loss", "=", "cls_reg_loss", "(", "est_data", "[", "'ori_cls_result'", "]", ",", "gt_data", "[", "'ori_cls'", "]", ",", "est_data", "[", "'ori_reg_result'", "]", ",", "gt_data", "[", "'ori_reg'", "]", ")", "\n", "centroid_cls_loss", ",", "centroid_reg_loss", "=", "cls_reg_loss", "(", "est_data", "[", "'centroid_cls_result'", "]", ",", "gt_data", "[", "'centroid_cls'", "]", ",", "\n", "est_data", "[", "'centroid_reg_result'", "]", ",", "gt_data", "[", "'centroid_reg'", "]", ")", "\n", "offset_2D_loss", "=", "reg_criterion", "(", "est_data", "[", "'offset_2D_result'", "]", ",", "gt_data", "[", "'offset_2D'", "]", ")", "\n", "\n", "return", "{", "'size_reg_loss'", ":", "size_reg_loss", ",", "'ori_cls_loss'", ":", "ori_cls_loss", ",", "'ori_reg_loss'", ":", "ori_reg_loss", ",", "\n", "'centroid_cls_loss'", ":", "centroid_cls_loss", ",", "'centroid_reg_loss'", ":", "centroid_reg_loss", ",", "\n", "'offset_2D_loss'", ":", "offset_2D_loss", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.models.loss.ReconLoss.__call__": [[215, 231], ["net_utils.libs.get_bdb_form_from_corners", "net_utils.libs.recover_points_to_world_sys", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "loss.get_point_loss"], "methods", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.libs.get_bdb_form_from_corners", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.libs.recover_points_to_world_sys", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.models.loss.get_point_loss"], ["    ", "def", "__call__", "(", "self", ",", "est_data", ",", "gt_data", ",", "extra_results", ")", ":", "\n", "        ", "if", "gt_data", "[", "'mask_flag'", "]", "==", "0", ":", "\n", "            ", "point_loss", "=", "0.", "\n", "", "else", ":", "\n", "# get the world coordinates for each 3d object.", "\n", "            ", "bdb3D_form", "=", "get_bdb_form_from_corners", "(", "extra_results", "[", "'bdb3D_result'", "]", ",", "gt_data", "[", "'mask_status'", "]", ")", "\n", "obj_points_in_world_sys", "=", "recover_points_to_world_sys", "(", "bdb3D_form", ",", "est_data", "[", "'meshes'", "]", ")", "\n", "point_loss", "=", "100", "*", "get_point_loss", "(", "obj_points_in_world_sys", ",", "extra_results", "[", "'cam_R_result'", "]", ",", "\n", "gt_data", "[", "'K'", "]", ",", "gt_data", "[", "'depth_maps'", "]", ",", "bdb3D_form", ",", "gt_data", "[", "'split'", "]", ",", "\n", "gt_data", "[", "'obj_masks'", "]", ",", "gt_data", "[", "'mask_status'", "]", ")", "\n", "\n", "# remove samples without depth map", "\n", "if", "torch", ".", "isnan", "(", "point_loss", ")", ":", "\n", "                ", "point_loss", "=", "0.", "\n", "\n", "", "", "return", "{", "'mesh_loss'", ":", "point_loss", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.models.loss.JointLoss.__call__": [[234, 271], ["net_utils.libs.get_rotation_matix_result", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "net_utils.libs.get_bdb_3d_result", "net_utils.libs.get_bdb_2d_result", "net_utils.libs.physical_violation", "reg_criterion", "reg_criterion", "mse_criterion"], "methods", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.libs.get_rotation_matix_result", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.libs.get_bdb_3d_result", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.libs.get_bdb_2d_result", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.libs.physical_violation"], ["    ", "def", "__call__", "(", "self", ",", "est_data", ",", "gt_data", ",", "bins_tensor", ",", "layout_results", ")", ":", "\n", "# predicted camera rotation", "\n", "        ", "cam_R_result", "=", "get_rotation_matix_result", "(", "bins_tensor", ",", "\n", "gt_data", "[", "'pitch_cls'", "]", ",", "est_data", "[", "'pitch_reg_result'", "]", ",", "\n", "gt_data", "[", "'roll_cls'", "]", ",", "est_data", "[", "'roll_reg_result'", "]", ")", "\n", "\n", "# projected center", "\n", "P_result", "=", "torch", ".", "stack", "(", "\n", "(", "(", "gt_data", "[", "'bdb2D_pos'", "]", "[", ":", ",", "0", "]", "+", "gt_data", "[", "'bdb2D_pos'", "]", "[", ":", ",", "2", "]", ")", "/", "2", "-", "(", "gt_data", "[", "'bdb2D_pos'", "]", "[", ":", ",", "2", "]", "-", "gt_data", "[", "'bdb2D_pos'", "]", "[", ":", ",", "0", "]", ")", "*", "est_data", "[", "'offset_2D_result'", "]", "[", ":", ",", "0", "]", ",", "\n", "(", "gt_data", "[", "'bdb2D_pos'", "]", "[", ":", ",", "1", "]", "+", "gt_data", "[", "'bdb2D_pos'", "]", "[", ":", ",", "3", "]", ")", "/", "2", "-", "(", "gt_data", "[", "'bdb2D_pos'", "]", "[", ":", ",", "3", "]", "-", "gt_data", "[", "'bdb2D_pos'", "]", "[", ":", ",", "1", "]", ")", "*", "est_data", "[", "'offset_2D_result'", "]", "[", ":", ",", "1", "]", ")", ",", "1", ")", "\n", "\n", "# retrieved 3D bounding box", "\n", "bdb3D_result", ",", "_", "=", "get_bdb_3d_result", "(", "bins_tensor", ",", "\n", "gt_data", "[", "'ori_cls'", "]", ",", "\n", "est_data", "[", "'ori_reg_result'", "]", ",", "\n", "gt_data", "[", "'centroid_cls'", "]", ",", "\n", "est_data", "[", "'centroid_reg_result'", "]", ",", "\n", "gt_data", "[", "'size_cls'", "]", ",", "\n", "est_data", "[", "'size_reg_result'", "]", ",", "\n", "P_result", ",", "\n", "gt_data", "[", "'K'", "]", ",", "\n", "cam_R_result", ",", "\n", "gt_data", "[", "'split'", "]", ")", "\n", "\n", "# 3D bounding box corner loss", "\n", "corner_loss", "=", "5", "*", "cls_reg_ratio", "*", "reg_criterion", "(", "bdb3D_result", ",", "gt_data", "[", "'bdb3D'", "]", ")", "\n", "\n", "# 2D bdb loss", "\n", "bdb2D_result", "=", "get_bdb_2d_result", "(", "bdb3D_result", ",", "cam_R_result", ",", "gt_data", "[", "'K'", "]", ",", "gt_data", "[", "'split'", "]", ")", "\n", "bdb2D_loss", "=", "20", "*", "cls_reg_ratio", "*", "reg_criterion", "(", "bdb2D_result", ",", "gt_data", "[", "'bdb2D_from_3D_gt'", "]", ")", "\n", "\n", "# physical violation loss", "\n", "phy_violation", ",", "phy_gt", "=", "physical_violation", "(", "layout_results", "[", "'lo_bdb3D_result'", "]", ",", "bdb3D_result", ",", "gt_data", "[", "'split'", "]", ")", "\n", "phy_loss", "=", "20", "*", "mse_criterion", "(", "phy_violation", ",", "phy_gt", ")", "\n", "\n", "return", "{", "'phy_loss'", ":", "phy_loss", ",", "'bdb2D_loss'", ":", "bdb2D_loss", ",", "'corner_loss'", ":", "corner_loss", "}", ",", "{", "'cam_R_result'", ":", "cam_R_result", ",", "'bdb3D_result'", ":", "bdb3D_result", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.models.loss.cls_reg_loss": [[21, 30], ["cls_criterion", "torch.gather.squeeze", "reg_criterion", "len", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather.size", "cls_gt.view().expand", "cls_gt.view().expand", "reg_gt.size", "reg_gt.size", "reg_gt.size", "cls_gt.view", "cls_gt.view", "reg_gt.size", "reg_gt.size"], "function", ["None"], ["def", "cls_reg_loss", "(", "cls_result", ",", "cls_gt", ",", "reg_result", ",", "reg_gt", ")", ":", "\n", "    ", "cls_loss", "=", "cls_criterion", "(", "cls_result", ",", "cls_gt", ")", "\n", "if", "len", "(", "reg_result", ".", "size", "(", ")", ")", "==", "3", ":", "\n", "        ", "reg_result", "=", "torch", ".", "gather", "(", "reg_result", ",", "1", ",", "cls_gt", ".", "view", "(", "reg_gt", ".", "size", "(", "0", ")", ",", "1", ",", "1", ")", ".", "expand", "(", "reg_gt", ".", "size", "(", "0", ")", ",", "1", ",", "reg_gt", ".", "size", "(", "1", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "reg_result", "=", "torch", ".", "gather", "(", "reg_result", ",", "1", ",", "cls_gt", ".", "view", "(", "reg_gt", ".", "size", "(", "0", ")", ",", "1", ")", ".", "expand", "(", "reg_gt", ".", "size", "(", "0", ")", ",", "1", ")", ")", "\n", "", "reg_result", "=", "reg_result", ".", "squeeze", "(", "1", ")", "\n", "reg_loss", "=", "reg_criterion", "(", "reg_result", ",", "reg_gt", ")", "\n", "return", "cls_loss", ",", "cls_reg_ratio", "*", "reg_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.models.loss.get_point_loss": [[31, 110], ["enumerate", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "u.float.t().to", "v.float.t().to", "u.float.reshape", "v.float.reshape", "u.float.float", "v.float.float", "torch.cat", "torch.cat", "torch.cat", "torch.mm", "torch.mm", "torch.mm", "depth_maps[].size", "enumerate", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "cam_R[].t", "range", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "u_s.t().long.t().long", "v_s.t().long.t().long", "index_dep.reshape.reshape", "torch.sum", "torch.sum", "torch.sum", "torch.mean", "torch.mean", "torch.mean", "depth_maps[].size", "depth_maps[].size", "u.float.t", "v.float.t", "z_cam.unsqueeze", "x_cam.unsqueeze", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "obj_msk.reshape().nonzero", "len", "torch.nonzero().t", "torch.nonzero().t", "torch.nonzero().t", "torch.sum.nelement", "dist_chamfer", "torch.tensor", "torch.tensor", "torch.tensor", "y_cam.unsqueeze", "u_s.t().long.t", "v_s.t().long.t", "torch.abs", "torch.abs", "torch.abs", "object_pnts.unsqueeze", "points_in_world_sys[].unsqueeze", "obj_msk.reshape", "torch.mm", "torch.mm", "torch.mm", "torch.nonzero", "torch.nonzero", "torch.nonzero", "[].t", "[].view"], "function", ["None"], ["", "def", "get_point_loss", "(", "points_in_world_sys", ",", "cam_R", ",", "cam_K", ",", "depth_maps", ",", "bdb3D_form", ",", "split", ",", "obj_masks", ",", "mask_status", ")", ":", "\n", "    ", "'''\n    get the depth loss for each mesh.\n    :param points_in_world_sys: Number_of_objects x Number_of_points x 3\n    :param cam_R: Number_of_scenes x 3 x 3\n    :param cam_K: Number_of_scenes x 3 x 3\n    :param depth_maps: Number_of_scenes depth maps in a list\n    :param split: Number_of_scenes x 2 matrix\n    :return: depth loss\n    '''", "\n", "depth_loss", "=", "0.", "\n", "n_objects", "=", "0", "\n", "masked_object_id", "=", "-", "1", "\n", "\n", "device", "=", "points_in_world_sys", ".", "device", "\n", "\n", "for", "scene_id", ",", "obj_interval", "in", "enumerate", "(", "split", ")", ":", "\n", "# map depth to 3d points in camera system.", "\n", "        ", "u", ",", "v", "=", "torch", ".", "meshgrid", "(", "torch", ".", "arange", "(", "0", ",", "depth_maps", "[", "scene_id", "]", ".", "size", "(", "1", ")", ")", ",", "torch", ".", "arange", "(", "0", ",", "depth_maps", "[", "scene_id", "]", ".", "size", "(", "0", ")", ")", ")", "\n", "u", "=", "u", ".", "t", "(", ")", ".", "to", "(", "device", ")", "\n", "v", "=", "v", ".", "t", "(", ")", ".", "to", "(", "device", ")", "\n", "u", "=", "u", ".", "reshape", "(", "-", "1", ")", "\n", "v", "=", "v", ".", "reshape", "(", "-", "1", ")", "\n", "z_cam", "=", "depth_maps", "[", "scene_id", "]", "[", "v", ",", "u", "]", "\n", "u", "=", "u", ".", "float", "(", ")", "\n", "v", "=", "v", ".", "float", "(", ")", "\n", "\n", "# non_zero_indices = torch.nonzero(z_cam).t()[0]", "\n", "# z_cam = z_cam[non_zero_indices]", "\n", "# u = u[non_zero_indices]", "\n", "# v = v[non_zero_indices]", "\n", "\n", "# calculate coordinates", "\n", "x_cam", "=", "(", "u", "-", "cam_K", "[", "scene_id", "]", "[", "0", "]", "[", "2", "]", ")", "*", "z_cam", "/", "cam_K", "[", "scene_id", "]", "[", "0", "]", "[", "0", "]", "\n", "y_cam", "=", "(", "v", "-", "cam_K", "[", "scene_id", "]", "[", "1", "]", "[", "2", "]", ")", "*", "z_cam", "/", "cam_K", "[", "scene_id", "]", "[", "1", "]", "[", "1", "]", "\n", "\n", "# transform to toward-up-right coordinate system", "\n", "points_world", "=", "torch", ".", "cat", "(", "[", "z_cam", ".", "unsqueeze", "(", "-", "1", ")", ",", "-", "y_cam", ".", "unsqueeze", "(", "-", "1", ")", ",", "x_cam", ".", "unsqueeze", "(", "-", "1", ")", "]", ",", "-", "1", ")", "\n", "# transform from camera system to world system", "\n", "points_world", "=", "torch", ".", "mm", "(", "points_world", ",", "cam_R", "[", "scene_id", "]", ".", "t", "(", ")", ")", "\n", "\n", "n_columns", "=", "depth_maps", "[", "scene_id", "]", ".", "size", "(", "1", ")", "\n", "\n", "for", "loc_id", ",", "obj_id", "in", "enumerate", "(", "range", "(", "*", "obj_interval", ")", ")", ":", "\n", "            ", "if", "mask_status", "[", "obj_id", "]", "==", "0", ":", "\n", "                ", "continue", "\n", "", "masked_object_id", "+=", "1", "\n", "\n", "bdb2d", "=", "obj_masks", "[", "scene_id", "]", "[", "loc_id", "]", "[", "'msk_bdb'", "]", "\n", "obj_msk", "=", "obj_masks", "[", "scene_id", "]", "[", "loc_id", "]", "[", "'msk'", "]", "\n", "\n", "u_s", ",", "v_s", "=", "torch", ".", "meshgrid", "(", "torch", ".", "arange", "(", "bdb2d", "[", "0", "]", ",", "bdb2d", "[", "2", "]", "+", "1", ")", ",", "torch", ".", "arange", "(", "bdb2d", "[", "1", "]", ",", "bdb2d", "[", "3", "]", "+", "1", ")", ")", "\n", "u_s", "=", "u_s", ".", "t", "(", ")", ".", "long", "(", ")", "\n", "v_s", "=", "v_s", ".", "t", "(", ")", ".", "long", "(", ")", "\n", "index_dep", "=", "u_s", "+", "n_columns", "*", "v_s", "\n", "index_dep", "=", "index_dep", ".", "reshape", "(", "-", "1", ")", "\n", "in_object_indices", "=", "obj_msk", ".", "reshape", "(", "-", "1", ")", ".", "nonzero", "(", ")", "[", "0", "]", "\n", "\n", "# remove holes in depth maps", "\n", "if", "len", "(", "in_object_indices", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "\n", "", "object_pnts", "=", "points_world", "[", "index_dep", ",", ":", "]", "[", "in_object_indices", ",", ":", "]", "\n", "# remove noisy points that out of bounding boxes", "\n", "inner_idx", "=", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "\n", "torch", ".", "mm", "(", "object_pnts", "-", "bdb3D_form", "[", "'centroid'", "]", "[", "masked_object_id", "]", ".", "view", "(", "1", ",", "3", ")", ",", "bdb3D_form", "[", "'basis'", "]", "[", "masked_object_id", "]", ".", "t", "(", ")", ")", ")", ">", "\n", "bdb3D_form", "[", "'coeffs'", "]", "[", "masked_object_id", "]", ",", "dim", "=", "1", ")", "\n", "\n", "inner_idx", "=", "torch", ".", "nonzero", "(", "inner_idx", "==", "0", ")", ".", "t", "(", ")", "[", "0", "]", "\n", "\n", "if", "inner_idx", ".", "nelement", "(", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "\n", "", "object_pnts", "=", "object_pnts", "[", "inner_idx", ",", ":", "]", "\n", "\n", "dist_1", "=", "dist_chamfer", "(", "object_pnts", ".", "unsqueeze", "(", "0", ")", ",", "points_in_world_sys", "[", "masked_object_id", "]", ".", "unsqueeze", "(", "0", ")", ")", "[", "0", "]", "\n", "depth_loss", "+=", "torch", ".", "mean", "(", "dist_1", ")", "\n", "n_objects", "+=", "1", "\n", "", "", "return", "depth_loss", "/", "n_objects", "if", "n_objects", ">", "0", "else", "torch", ".", "tensor", "(", "0.", ")", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.models.testing.BaseTester.__init__": [[9, 13], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "cfg", ",", "net", ",", "device", "=", "None", ")", ":", "\n", "        ", "self", ".", "cfg", "=", "cfg", "\n", "self", ".", "net", "=", "net", "\n", "self", ".", "device", "=", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.models.testing.BaseTester.visualize_step": [[14, 18], ["None"], "methods", ["None"], ["", "def", "visualize_step", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "''' Performs a visualization step.\n        '''", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.models.testing.BaseTester.get_metric_values": [[19, 24], ["None"], "methods", ["None"], ["", "def", "get_metric_values", "(", "self", ",", "est_data", ",", "gt_data", ")", ":", "\n", "        ", "''' Performs a evaluation step.\n        '''", "\n", "# camera orientation error", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.models.training.BaseTrainer.__init__": [[9, 14], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "cfg", ",", "net", ",", "optimizer", ",", "device", "=", "None", ")", ":", "\n", "        ", "self", ".", "cfg", "=", "cfg", "\n", "self", ".", "net", "=", "net", "\n", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "device", "=", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.models.training.BaseTrainer.show_lr": [[15, 22], ["training.BaseTrainer.cfg.log_string", "range", "len", "str"], "methods", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.config_utils.CONFIG.log_string"], ["", "def", "show_lr", "(", "self", ")", ":", "\n", "        ", "'''\n        display current learning rates\n        :return:\n        '''", "\n", "lrs", "=", "[", "self", ".", "optimizer", ".", "param_groups", "[", "i", "]", "[", "'lr'", "]", "for", "i", "in", "range", "(", "len", "(", "self", ".", "optimizer", ".", "param_groups", ")", ")", "]", "\n", "self", ".", "cfg", ".", "log_string", "(", "'Current learning rates are: '", "+", "str", "(", "lrs", ")", "+", "'.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.models.training.BaseTrainer.train_step": [[23, 36], ["training.BaseTrainer.optimizer.zero_grad", "training.BaseTrainer.compute_loss", "loss[].backward", "training.BaseTrainer.optimizer.step", "loss[].item"], "methods", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.total3d.training.Trainer.compute_loss", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.chamfer_distance.chamfer_distance.ChamferDistanceFunction.backward"], ["", "def", "train_step", "(", "self", ",", "data", ")", ":", "\n", "        ", "'''\n        performs a step training\n        :param data (dict): data dictionary\n        :return:\n        '''", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", "=", "self", ".", "compute_loss", "(", "data", ")", "\n", "loss", "[", "'total'", "]", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "loss", "[", "'total'", "]", "=", "loss", "[", "'total'", "]", ".", "item", "(", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.models.training.BaseTrainer.eval_loss_parser": [[37, 44], ["None"], "methods", ["None"], ["", "def", "eval_loss_parser", "(", "self", ",", "loss_recorder", ")", ":", "\n", "        ", "'''\n        get the eval\n        :param loss_recorder: loss recorder for all losses.\n        :return:\n        '''", "\n", "return", "loss_recorder", "[", "'total'", "]", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.models.training.BaseTrainer.compute_loss": [[45, 49], ["None"], "methods", ["None"], ["", "def", "compute_loss", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "''' Performs a training step.\n        '''", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.models.training.BaseTrainer.eval_step": [[50, 54], ["None"], "methods", ["None"], ["", "def", "eval_step", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "''' Performs an evaluation step.\n        '''", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.models.training.BaseTrainer.visualize_step": [[55, 59], ["None"], "methods", ["None"], ["", "def", "visualize_step", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "''' Performs a visualization step.\n        '''", "\n", "raise", "NotImplementedError", "", "", "", ""]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.models.datasets.SUNRGBD.__init__": [[9, 20], ["os.path.join", "open", "json.load"], "methods", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.CheckpointIO.load"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "mode", ")", ":", "\n", "        ", "'''\n        initiate SUNRGBD dataset for data loading\n        :param config: config file\n        :param mode: train/val/test mode\n        '''", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "mode", "=", "mode", "\n", "split_file", "=", "os", ".", "path", ".", "join", "(", "config", "[", "'data'", "]", "[", "'split'", "]", ",", "mode", "+", "'.json'", ")", "\n", "with", "open", "(", "split_file", ")", "as", "file", ":", "\n", "            ", "self", ".", "split", "=", "json", ".", "load", "(", "file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.models.datasets.SUNRGBD.__len__": [[21, 23], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "split", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.models.datasets.PIX3D.__init__": [[26, 37], ["os.path.join", "open", "json.load"], "methods", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.CheckpointIO.load"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "mode", ")", ":", "\n", "        ", "'''\n        initiate PIX3D dataset for data loading\n        :param config: config file\n        :param mode: train/val/test mode\n        '''", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "mode", "=", "mode", "\n", "split_file", "=", "os", ".", "path", ".", "join", "(", "config", "[", "'data'", "]", "[", "'split'", "]", ",", "mode", "+", "'.json'", ")", "\n", "with", "open", "(", "split_file", ")", "as", "file", ":", "\n", "            ", "self", ".", "split", "=", "json", ".", "load", "(", "file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.models.datasets.PIX3D.__len__": [[38, 40], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "split", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.models.optimizers.has_optim_in_children": [[6, 21], ["subnet.children", "hasattr", "optimizers.has_optim_in_children"], "function", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.models.optimizers.has_optim_in_children"], ["def", "has_optim_in_children", "(", "subnet", ")", ":", "\n", "    ", "'''\n    check if there is specific optim parameters in a subnet.\n    :param subnet:\n    :return:\n    '''", "\n", "label", "=", "False", "\n", "for", "module", "in", "subnet", ".", "children", "(", ")", ":", "\n", "        ", "if", "hasattr", "(", "module", ",", "'optim_spec'", ")", "and", "module", ".", "optim_spec", ":", "\n", "            ", "label", "=", "True", "\n", "break", "\n", "", "else", ":", "\n", "            ", "label", "=", "has_optim_in_children", "(", "module", ")", "\n", "\n", "", "", "return", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.models.optimizers.find_optim_module": [[22, 40], ["net.children", "hasattr", "optimizers.has_optim_in_children", "optimizers.find_optim_module", "optimizers.find_optim_module"], "function", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.models.optimizers.has_optim_in_children", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.models.optimizers.find_optim_module", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.models.optimizers.find_optim_module"], ["", "def", "find_optim_module", "(", "net", ")", ":", "\n", "    ", "'''\n    classify modules in a net into has specific optim specs or not.\n    :param net:\n    :return:\n    '''", "\n", "module_optim_pairs", "=", "[", "]", "\n", "other_modules", "=", "[", "]", "\n", "for", "module", "in", "net", ".", "children", "(", ")", ":", "\n", "        ", "if", "hasattr", "(", "module", ",", "'optim_spec'", ")", ":", "\n", "            ", "module_optim_pairs", "+=", "[", "{", "'module'", ":", "module", ",", "'optim_spec'", ":", "module", ".", "optim_spec", "}", "]", "\n", "", "elif", "not", "has_optim_in_children", "(", "module", ")", ":", "\n", "            ", "other_modules", "+=", "[", "module", "]", "\n", "", "else", ":", "\n", "            ", "module_optim_pairs", "+=", "find_optim_module", "(", "module", ")", "[", "0", "]", "\n", "other_modules", "+=", "find_optim_module", "(", "module", ")", "[", "1", "]", "\n", "\n", "", "", "return", "module_optim_pairs", ",", "other_modules", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.models.optimizers.load_scheduler": [[41, 54], ["torch.optim.lr_scheduler.ReduceLROnPlateau", "float", "float"], "function", ["None"], ["", "def", "load_scheduler", "(", "config", ",", "optimizer", ")", ":", "\n", "    ", "'''\n    get scheduler for optimizer.\n    :param config: configuration file\n    :param optimizer: torch optimizer\n    :return:\n    '''", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "ReduceLROnPlateau", "(", "optimizer", ",", "mode", "=", "'min'", ",", "\n", "factor", "=", "float", "(", "config", "[", "'scheduler'", "]", "[", "'factor'", "]", ")", ",", "\n", "patience", "=", "config", "[", "'scheduler'", "]", "[", "'patience'", "]", ",", "\n", "threshold", "=", "float", "(", "config", "[", "'scheduler'", "]", "[", "'threshold'", "]", ")", ",", "\n", "verbose", "=", "True", ")", "\n", "return", "scheduler", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.models.optimizers.load_optimizer": [[55, 107], ["optimizers.find_optim_module", "list", "optim_params.append", "torch.optim.Adam", "list", "optim_params.append", "torch.optim.SGD", "optim_params.append", "list", "optim_params.append", "list", "module.parameters", "filter", "float", "tuple", "float", "float", "module.parameters", "filter", "filter", "float", "tuple", "float", "float", "filter", "float", "module[].parameters", "module[].parameters"], "function", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.models.optimizers.find_optim_module"], ["", "def", "load_optimizer", "(", "config", ",", "net", ")", ":", "\n", "    ", "'''\n    get optimizer for networks\n    :param config: configuration file\n    :param model: nn.Module network\n    :return:\n    '''", "\n", "\n", "module_optim_pairs", ",", "other_modules", "=", "find_optim_module", "(", "net", ")", "\n", "default_optim_spec", "=", "config", "[", "'optimizer'", "]", "\n", "\n", "optim_params", "=", "[", "]", "\n", "\n", "if", "config", "[", "'optimizer'", "]", "[", "'method'", "]", "==", "'Adam'", ":", "\n", "        ", "'''collect parameters with specific optimizer spec'''", "\n", "for", "module", "in", "module_optim_pairs", ":", "\n", "            ", "optim_params", ".", "append", "(", "{", "'params'", ":", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "module", "[", "'module'", "]", ".", "parameters", "(", ")", ")", ",", "\n", "'lr'", ":", "float", "(", "module", "[", "'optim_spec'", "]", "[", "'lr'", "]", ")", ",", "\n", "'betas'", ":", "tuple", "(", "module", "[", "'optim_spec'", "]", "[", "'betas'", "]", ")", ",", "\n", "'eps'", ":", "float", "(", "module", "[", "'optim_spec'", "]", "[", "'eps'", "]", ")", ",", "\n", "'weight_decay'", ":", "float", "(", "module", "[", "'optim_spec'", "]", "[", "'weight_decay'", "]", ")", "}", ")", "\n", "\n", "", "'''collect parameters with default optimizer spec'''", "\n", "other_params", "=", "list", "(", ")", "\n", "for", "module", "in", "other_modules", ":", "\n", "            ", "other_params", "+=", "list", "(", "module", ".", "parameters", "(", ")", ")", "\n", "\n", "", "optim_params", ".", "append", "(", "{", "'params'", ":", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "other_params", ")", "}", ")", "\n", "\n", "'''define optimizer'''", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "optim_params", ",", "\n", "lr", "=", "float", "(", "default_optim_spec", "[", "'lr'", "]", ")", ",", "\n", "betas", "=", "tuple", "(", "default_optim_spec", "[", "'betas'", "]", ")", ",", "\n", "eps", "=", "float", "(", "default_optim_spec", "[", "'eps'", "]", ")", ",", "\n", "weight_decay", "=", "float", "(", "default_optim_spec", "[", "'weight_decay'", "]", ")", ")", "\n", "\n", "", "else", ":", "\n", "# use SGD optimizer.", "\n", "        ", "for", "module", "in", "module_optim_pairs", ":", "\n", "            ", "optim_params", ".", "append", "(", "{", "'params'", ":", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "module", "[", "'module'", "]", ".", "parameters", "(", ")", ")", ",", "\n", "'lr'", ":", "float", "(", "module", "[", "'optim_spec'", "]", "[", "'lr'", "]", ")", "}", ")", "\n", "\n", "", "other_params", "=", "list", "(", ")", "\n", "for", "module", "in", "other_modules", ":", "\n", "            ", "other_params", "+=", "list", "(", "module", ".", "parameters", "(", ")", ")", "\n", "\n", "", "optim_params", ".", "append", "(", "{", "'params'", ":", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "other_params", ")", "}", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "optim_params", ",", "\n", "lr", "=", "config", "[", "'optimizer'", "]", "[", "'lr'", "]", ",", "\n", "momentum", "=", "0.9", ")", "\n", "\n", "", "return", "optimizer", "\n", "", ""]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.modules.resnet.BasicBlock.__init__": [[27, 36], ["torch.Module.__init__", "resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.data_config.Config.__init__", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.modules.resnet.conv3x3", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.modules.resnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.modules.resnet.BasicBlock.forward": [[37, 54], ["resnet.BasicBlock.conv1", "resnet.BasicBlock.bn1", "resnet.BasicBlock.relu", "resnet.BasicBlock.conv2", "resnet.BasicBlock.bn2", "resnet.BasicBlock.relu", "resnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.modules.resnet.Bottleneck.__init__": [[59, 71], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.data_config.Config.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.modules.resnet.Bottleneck.forward": [[72, 93], ["resnet.Bottleneck.conv1", "resnet.Bottleneck.bn1", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv2", "resnet.Bottleneck.bn2", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv3", "resnet.Bottleneck.bn3", "resnet.Bottleneck.relu", "resnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.modules.resnet.ResNet.__init__": [[151, 173], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "torch.AvgPool2d", "torch.AvgPool2d", "resnet.ResNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.data_config.Config.__init__", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.modules.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.modules.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.modules.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.modules.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "7", ",", "stride", "=", "1", ")", "\n", "# self.fc = nn.Linear(512 * block.expansion, num_classes)", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.modules.resnet.ResNet._make_layer": [[174, 190], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.modules.resnet.ResNet.forward": [[191, 207], ["resnet.ResNet.conv1", "resnet.ResNet.bn1", "resnet.ResNet.relu", "resnet.ResNet.maxpool", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4", "resnet.ResNet.avgpool", "x.view.view.view", "x.view.view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "# x = self.fc(x)", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.modules.resnet.ResNet_Full.__init__": [[209, 213], ["resnet.ResNet.__init__", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.data_config.Config.__init__"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "super", "(", "ResNet_Full", ",", "self", ")", ".", "__init__", "(", "block", ",", "layers", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "7", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.modules.resnet.ResNet_Full.forward": [[214, 230], ["resnet.ResNet_Full.conv1", "resnet.ResNet_Full.bn1", "resnet.ResNet_Full.relu", "resnet.ResNet_Full.maxpool", "resnet.ResNet_Full.layer1", "resnet.ResNet_Full.layer2", "resnet.ResNet_Full.layer3", "resnet.ResNet_Full.layer4", "resnet.ResNet_Full.avgpool", "resnet.ResNet_Full.view", "resnet.ResNet_Full.fc", "resnet.ResNet_Full.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.modules.resnet.conv3x3": [[18, 22], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.modules.resnet.resnet18_full": [[231, 241], ["resnet.ResNet_Full", "ResNet_Full.load_state_dict", "torch.load_url"], "function", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.CheckpointIO.load_url"], ["", "", "def", "resnet18_full", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-18 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet_Full", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet18'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.modules.resnet.resnet18": [[242, 252], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.CheckpointIO.load_url"], ["", "def", "resnet18", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-18 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet18'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.modules.resnet.resnet34": [[254, 264], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.CheckpointIO.load_url"], ["", "def", "resnet34", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-34 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet34'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.modules.resnet.resnet50": [[266, 276], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.CheckpointIO.load_url"], ["", "def", "resnet50", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet50'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.modules.resnet.resnet101": [[278, 288], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.CheckpointIO.load_url"], ["", "def", "resnet101", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet101'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.modules.resnet.resnet152": [[290, 300], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.CheckpointIO.load_url"], ["", "def", "resnet152", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-152 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet152'", "]", ")", ")", "\n", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.modules.network.MGNet.__init__": [[13, 38], ["models.network.BaseNetwork.__init__", "cfg.config[].items", "torch.nn.DataParallel", "network.MGNet.freeze_modules", "network.MGNet.load_optim_spec", "network.MGNet.add_module", "setattr", "models.registers.MODULES.get", "models.registers.LOSSES.get", "[].get"], "methods", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.data_config.Config.__init__", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.models.network.BaseNetwork.freeze_modules", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.models.network.BaseNetwork.load_optim_spec", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.CheckpointIO.get", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.CheckpointIO.get", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.CheckpointIO.get"], ["        ", "'''\n        load submodules for the network.\n        :param config: customized configurations.\n        '''", "\n", "super", "(", "BaseNetwork", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cfg", "=", "cfg", "\n", "\n", "'''load network blocks'''", "\n", "for", "phase_name", ",", "net_spec", "in", "cfg", ".", "config", "[", "'model'", "]", ".", "items", "(", ")", ":", "\n", "            ", "method_name", "=", "net_spec", "[", "'method'", "]", "\n", "# load specific optimizer parameters", "\n", "optim_spec", "=", "self", ".", "load_optim_spec", "(", "cfg", ".", "config", ",", "net_spec", ")", "\n", "subnet", "=", "MODULES", ".", "get", "(", "method_name", ")", "(", "cfg", ".", "config", ",", "optim_spec", ")", "\n", "self", ".", "add_module", "(", "phase_name", ",", "subnet", ")", "\n", "\n", "'''load corresponding loss functions'''", "\n", "setattr", "(", "self", ",", "phase_name", "+", "'_loss'", ",", "LOSSES", ".", "get", "(", "self", ".", "cfg", ".", "config", "[", "'model'", "]", "[", "phase_name", "]", "[", "'loss'", "]", ",", "'Null'", ")", "(", "\n", "self", ".", "cfg", ".", "config", "[", "'model'", "]", "[", "phase_name", "]", ".", "get", "(", "'weight'", ",", "1", ")", ")", ")", "\n", "\n", "", "'''freeze submodules or not'''", "\n", "self", ".", "freeze_modules", "(", "cfg", ")", "\n", "\n", "", "def", "freeze_modules", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "'''\n        Freeze modules in training\n        '''", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.modules.network.MGNet.forward": [[39, 46], ["network.MGNet.mesh_reconstruction"], "methods", ["None"], ["if", "cfg", ".", "config", "[", "'mode'", "]", "==", "'train'", ":", "\n", "            ", "freeze_layers", "=", "cfg", ".", "config", "[", "'train'", "]", "[", "'freeze'", "]", "\n", "for", "layer", "in", "freeze_layers", ":", "\n", "                ", "if", "not", "hasattr", "(", "self", ",", "layer", ")", ":", "\n", "                    ", "continue", "\n", "", "for", "param", "in", "getattr", "(", "self", ",", "layer", ")", ".", "parameters", "(", ")", ":", "\n", "                    ", "param", ".", "requires_grad", "=", "False", "\n", "", "cfg", ".", "log_string", "(", "'The module: %s is fixed.'", "%", "(", "layer", ")", ")", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.modules.network.MGNet.loss": [[47, 57], ["network.MGNet.mesh_reconstruction_loss", "sum", "network.MGNet.items", "network.MGNet.values", "item.item"], "methods", ["None"], ["\n", "", "", "", "def", "set_mode", "(", "self", ")", ":", "\n", "        ", "'''\n        Set train/eval mode for the network.\n        :param phase: train or eval\n        :return:\n        '''", "\n", "freeze_layers", "=", "self", ".", "cfg", ".", "config", "[", "'train'", "]", "[", "'freeze'", "]", "\n", "for", "name", ",", "child", "in", "self", ".", "named_children", "(", ")", ":", "\n", "            ", "if", "name", "in", "freeze_layers", ":", "\n", "                ", "child", ".", "train", "(", "False", ")", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.modules.layout_estimation.PoseNet.__init__": [[15, 57], ["torch.Module.__init__", "len", "len", "len", "models.modules.resnet.resnet34", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "layout_estimation.PoseNet.modules", "torch.load_url", "torch.load_url", "torch.load_url", "layout_estimation.PoseNet.resnet.state_dict", "layout_estimation.PoseNet.update", "layout_estimation.PoseNet.resnet.load_state_dict", "isinstance", "m.weight.data.normal_", "hasattr", "torch.load_url.items", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.data_config.Config.__init__", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.modules.resnet.resnet34", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.CheckpointIO.load_url", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.CheckpointIO.load_url", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.CheckpointIO.load_url", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.AverageMeter.update"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "optim_spec", "=", "None", ")", ":", "\n", "        ", "super", "(", "PoseNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "'''Optimizer parameters used in training'''", "\n", "self", ".", "optim_spec", "=", "optim_spec", "\n", "\n", "'''Module parameters'''", "\n", "bin", "=", "cfg", ".", "dataset_config", ".", "bins", "\n", "self", ".", "PITCH_BIN", "=", "len", "(", "bin", "[", "'pitch_bin'", "]", ")", "\n", "self", ".", "ROLL_BIN", "=", "len", "(", "bin", "[", "'roll_bin'", "]", ")", "\n", "self", ".", "LO_ORI_BIN", "=", "len", "(", "bin", "[", "'layout_ori_bin'", "]", ")", "\n", "\n", "'''Modules'''", "\n", "self", ".", "resnet", "=", "resnet", ".", "resnet34", "(", "pretrained", "=", "False", ")", "\n", "self", ".", "fc_1", "=", "nn", ".", "Linear", "(", "2048", ",", "1024", ")", "\n", "self", ".", "fc_2", "=", "nn", ".", "Linear", "(", "1024", ",", "(", "self", ".", "PITCH_BIN", "+", "self", ".", "ROLL_BIN", ")", "*", "2", ")", "\n", "\n", "# fc for layout", "\n", "self", ".", "fc_layout", "=", "nn", ".", "Linear", "(", "2048", ",", "2048", ")", "\n", "# for layout orientation", "\n", "self", ".", "fc_3", "=", "nn", ".", "Linear", "(", "2048", ",", "1024", ")", "\n", "self", ".", "fc_4", "=", "nn", ".", "Linear", "(", "1024", ",", "self", ".", "LO_ORI_BIN", "*", "2", ")", "\n", "# for layout centroid and coefficients", "\n", "self", ".", "fc_5", "=", "nn", ".", "Linear", "(", "2048", ",", "1024", ")", "\n", "self", ".", "fc_6", "=", "nn", ".", "Linear", "(", "1024", ",", "6", ")", "\n", "\n", "self", ".", "relu_1", "=", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "\n", "self", ".", "dropout_1", "=", "nn", ".", "Dropout", "(", "p", "=", "0.5", ")", "\n", "\n", "# initiate weights", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "if", "hasattr", "(", "m", ".", "bias", ",", "'data'", ")", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "# load pretrained resnet", "\n", "", "", "", "pretrained_dict", "=", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet34'", "]", ")", "\n", "model_dict", "=", "self", ".", "resnet", ".", "state_dict", "(", ")", "\n", "pretrained_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", "if", "k", "in", "model_dict", "}", "\n", "model_dict", ".", "update", "(", "pretrained_dict", ")", "\n", "self", ".", "resnet", ".", "load_state_dict", "(", "model_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.modules.layout_estimation.PoseNet.forward": [[59, 93], ["layout_estimation.PoseNet.resnet", "layout_estimation.PoseNet.fc_1", "layout_estimation.PoseNet.relu_1", "layout_estimation.PoseNet.dropout_1", "layout_estimation.PoseNet.fc_2", "layout_estimation.PoseNet.fc_layout", "layout_estimation.PoseNet.relu_1", "layout_estimation.PoseNet.dropout_1", "layout_estimation.PoseNet.fc_3", "layout_estimation.PoseNet.relu_1", "layout_estimation.PoseNet.dropout_1", "layout_estimation.PoseNet.fc_4", "layout_estimation.PoseNet.fc_5", "layout_estimation.PoseNet.relu_1", "layout_estimation.PoseNet.dropout_1", "layout_estimation.PoseNet.fc_6"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "resnet", "(", "x", ")", "\n", "\n", "# branch for camera parameters", "\n", "cam", "=", "self", ".", "fc_1", "(", "x", ")", "\n", "cam", "=", "self", ".", "relu_1", "(", "cam", ")", "\n", "cam", "=", "self", ".", "dropout_1", "(", "cam", ")", "\n", "cam", "=", "self", ".", "fc_2", "(", "cam", ")", "\n", "pitch_reg", "=", "cam", "[", ":", ",", "0", ":", "self", ".", "PITCH_BIN", "]", "\n", "pitch_cls", "=", "cam", "[", ":", ",", "self", ".", "PITCH_BIN", ":", "self", ".", "PITCH_BIN", "*", "2", "]", "\n", "roll_reg", "=", "cam", "[", ":", ",", "self", ".", "PITCH_BIN", "*", "2", ":", "self", ".", "PITCH_BIN", "*", "2", "+", "self", ".", "ROLL_BIN", "]", "\n", "roll_cls", "=", "cam", "[", ":", ",", "self", ".", "PITCH_BIN", "*", "2", "+", "self", ".", "ROLL_BIN", ":", "self", ".", "PITCH_BIN", "*", "2", "+", "self", ".", "ROLL_BIN", "*", "2", "]", "\n", "\n", "# branch for layout orientation, centroid and coefficients", "\n", "lo", "=", "self", ".", "fc_layout", "(", "x", ")", "\n", "lo", "=", "self", ".", "relu_1", "(", "lo", ")", "\n", "lo", "=", "self", ".", "dropout_1", "(", "lo", ")", "\n", "# branch for layout orientation", "\n", "lo_ori", "=", "self", ".", "fc_3", "(", "lo", ")", "\n", "lo_ori", "=", "self", ".", "relu_1", "(", "lo_ori", ")", "\n", "lo_ori", "=", "self", ".", "dropout_1", "(", "lo_ori", ")", "\n", "lo_ori", "=", "self", ".", "fc_4", "(", "lo_ori", ")", "\n", "lo_ori_reg", "=", "lo_ori", "[", ":", ",", ":", "self", ".", "LO_ORI_BIN", "]", "\n", "lo_ori_cls", "=", "lo_ori", "[", ":", ",", "self", ".", "LO_ORI_BIN", ":", "]", "\n", "\n", "# branch for layout centroid and coefficients", "\n", "lo_ct", "=", "self", ".", "fc_5", "(", "lo", ")", "\n", "lo_ct", "=", "self", ".", "relu_1", "(", "lo_ct", ")", "\n", "lo_ct", "=", "self", ".", "dropout_1", "(", "lo_ct", ")", "\n", "lo_ct", "=", "self", ".", "fc_6", "(", "lo_ct", ")", "\n", "lo_centroid", "=", "lo_ct", "[", ":", ",", ":", "3", "]", "\n", "lo_coeffs", "=", "lo_ct", "[", ":", ",", "3", ":", "]", "\n", "\n", "return", "pitch_reg", ",", "roll_reg", ",", "pitch_cls", ",", "roll_cls", ",", "lo_ori_reg", ",", "lo_ori_cls", ",", "lo_centroid", ",", "lo_coeffs", "", "", "", ""]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.modules.mesh_reconstruction.PointGenCon.__init__": [[16, 27], ["torch.Module.__init__", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.data_config.Config.__init__"], ["    ", "def", "__init__", "(", "self", ",", "bottleneck_size", "=", "2500", ",", "output_dim", "=", "3", ")", ":", "\n", "        ", "super", "(", "PointGenCon", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "torch", ".", "nn", ".", "Conv1d", "(", "bottleneck_size", ",", "bottleneck_size", ",", "1", ")", "\n", "self", ".", "conv2", "=", "torch", ".", "nn", ".", "Conv1d", "(", "bottleneck_size", ",", "bottleneck_size", "//", "2", ",", "1", ")", "\n", "self", ".", "conv3", "=", "torch", ".", "nn", ".", "Conv1d", "(", "bottleneck_size", "//", "2", ",", "bottleneck_size", "//", "4", ",", "1", ")", "\n", "self", ".", "conv4", "=", "torch", ".", "nn", ".", "Conv1d", "(", "bottleneck_size", "//", "4", ",", "output_dim", ",", "1", ")", "\n", "\n", "self", ".", "th", "=", "nn", ".", "Tanh", "(", ")", "\n", "self", ".", "bn1", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "bottleneck_size", ")", "\n", "self", ".", "bn2", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "bottleneck_size", "//", "2", ")", "\n", "self", ".", "bn3", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "bottleneck_size", "//", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.modules.mesh_reconstruction.PointGenCon.forward": [[28, 34], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "mesh_reconstruction.PointGenCon.th", "mesh_reconstruction.PointGenCon.bn1", "mesh_reconstruction.PointGenCon.bn2", "mesh_reconstruction.PointGenCon.bn3", "mesh_reconstruction.PointGenCon.conv4", "mesh_reconstruction.PointGenCon.conv1", "mesh_reconstruction.PointGenCon.conv2", "mesh_reconstruction.PointGenCon.conv3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "th", "(", "self", ".", "conv4", "(", "x", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.modules.mesh_reconstruction.EREstimate.__init__": [[36, 46], ["torch.Module.__init__", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.data_config.Config.__init__"], ["    ", "def", "__init__", "(", "self", ",", "bottleneck_size", "=", "2500", ",", "output_dim", "=", "3", ")", ":", "\n", "        ", "super", "(", "EREstimate", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "torch", ".", "nn", ".", "Conv1d", "(", "bottleneck_size", ",", "bottleneck_size", ",", "1", ")", "\n", "self", ".", "conv2", "=", "torch", ".", "nn", ".", "Conv1d", "(", "bottleneck_size", ",", "bottleneck_size", "//", "2", ",", "1", ")", "\n", "self", ".", "conv3", "=", "torch", ".", "nn", ".", "Conv1d", "(", "bottleneck_size", "//", "2", ",", "bottleneck_size", "//", "4", ",", "1", ")", "\n", "self", ".", "conv4", "=", "torch", ".", "nn", ".", "Conv1d", "(", "bottleneck_size", "//", "4", ",", "output_dim", ",", "1", ")", "\n", "\n", "self", ".", "bn1", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "bottleneck_size", ")", "\n", "self", ".", "bn2", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "bottleneck_size", "//", "2", ")", "\n", "self", ".", "bn3", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "bottleneck_size", "//", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.modules.mesh_reconstruction.EREstimate.forward": [[47, 53], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "mesh_reconstruction.EREstimate.conv4", "mesh_reconstruction.EREstimate.bn1", "mesh_reconstruction.EREstimate.bn2", "mesh_reconstruction.EREstimate.bn3", "mesh_reconstruction.EREstimate.conv1", "mesh_reconstruction.EREstimate.conv2", "mesh_reconstruction.EREstimate.conv3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "conv4", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.modules.mesh_reconstruction.DensTMNet.__init__": [[57, 89], ["torch.Module.__init__", "models.modules.resnet.resnet18_full", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "mesh_reconstruction.DensTMNet.apply", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.load_url", "torch.load_url", "torch.load_url", "torch.load_url", "mesh_reconstruction.DensTMNet.encoder.state_dict", "mesh_reconstruction.DensTMNet.update", "mesh_reconstruction.DensTMNet.encoder.load_state_dict", "mesh_reconstruction.PointGenCon", "range", "mesh_reconstruction.EREstimate", "torch.load_url.items", "range", "max", "k.startswith"], "methods", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.data_config.Config.__init__", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.modules.resnet.resnet18_full", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.CheckpointIO.load_url", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.CheckpointIO.load_url", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.CheckpointIO.load_url", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.CheckpointIO.load_url", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.AverageMeter.update"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "optim_spec", "=", "None", ",", "bottleneck_size", "=", "1024", ",", "n_classes", "=", "pix3d_n_classes", ",", "pretrained_encoder", "=", "True", ")", ":", "\n", "        ", "super", "(", "DensTMNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "'''Optimizer parameters used in training'''", "\n", "self", ".", "optim_spec", "=", "optim_spec", "\n", "\n", "'''Module parameters'''", "\n", "self", ".", "num_points", "=", "number_pnts_on_template", "\n", "self", ".", "subnetworks", "=", "cfg", ".", "config", "[", "'data'", "]", "[", "'tmn_subnetworks'", "]", "\n", "self", ".", "train_e_e", "=", "cfg", ".", "config", "[", "'data'", "]", "[", "'with_edge_classifier'", "]", "\n", "\n", "'''Modules'''", "\n", "self", ".", "encoder", "=", "resnet", ".", "resnet18_full", "(", "pretrained", "=", "False", ",", "num_classes", "=", "1024", ")", "\n", "self", ".", "decoders", "=", "nn", ".", "ModuleList", "(", "\n", "[", "PointGenCon", "(", "bottleneck_size", "=", "3", "+", "bottleneck_size", "+", "n_classes", ")", "for", "i", "in", "range", "(", "0", ",", "self", ".", "subnetworks", ")", "]", ")", "\n", "\n", "if", "self", ".", "train_e_e", ":", "\n", "            ", "self", ".", "error_estimators", "=", "nn", ".", "ModuleList", "(", "\n", "[", "EREstimate", "(", "bottleneck_size", "=", "3", "+", "bottleneck_size", "+", "n_classes", ",", "output_dim", "=", "1", ")", "for", "i", "in", "range", "(", "0", ",", "max", "(", "self", ".", "subnetworks", "-", "1", ",", "1", ")", ")", "]", ")", "\n", "\n", "self", ".", "face_samples", "=", "cfg", ".", "config", "[", "'data'", "]", "[", "'face_samples'", "]", "\n", "\n", "# initialize weight", "\n", "", "self", ".", "apply", "(", "weights_init", ")", "\n", "\n", "# initialize resnet", "\n", "if", "pretrained_encoder", ":", "\n", "            ", "pretrained_dict", "=", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet18'", "]", ")", "\n", "model_dict", "=", "self", ".", "encoder", ".", "state_dict", "(", ")", "\n", "pretrained_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", "if", "k", "in", "model_dict", "and", "not", "k", ".", "startswith", "(", "'fc.'", ")", "}", "\n", "model_dict", ".", "update", "(", "pretrained_dict", ")", "\n", "self", ".", "encoder", ".", "load_state_dict", "(", "model_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.modules.mesh_reconstruction.DensTMNet.unfreeze_parts": [[90, 100], ["mesh_reconstruction.DensTMNet.parameters", "print", "mesh_reconstruction.DensTMNet.encoder.parameters", "print"], "methods", ["None"], ["", "", "def", "unfreeze_parts", "(", "self", ",", "loose_parts", ")", ":", "\n", "# freeze all", "\n", "        ", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "", "print", "(", "'All layers freezed.'", ")", "\n", "# unfreeze parts", "\n", "if", "'encoder'", "in", "loose_parts", ":", "\n", "            ", "for", "param", "in", "self", ".", "encoder", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "True", "\n", "", "print", "(", "'Encoder unfrozen.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.modules.mesh_reconstruction.DensTMNet.freeze_encoder": [[101, 105], ["mesh_reconstruction.DensTMNet.encoder.parameters", "print"], "methods", ["None"], ["", "", "def", "freeze_encoder", "(", "self", ")", ":", "\n", "        ", "for", "param", "in", "self", ".", "encoder", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "", "print", "(", "'Encoder freezed.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.modules.mesh_reconstruction.DensTMNet.freeze_by_stage": [[106, 124], ["mesh_reconstruction.DensTMNet.parameters", "print", "mesh_reconstruction.DensTMNet.decoders[].parameters", "print", "hasattr", "mesh_reconstruction.DensTMNet.error_estimators[].parameters", "print"], "methods", ["None"], ["", "def", "freeze_by_stage", "(", "self", ",", "stage", ",", "loose_parts", ")", ":", "\n", "        ", "if", "stage", ">=", "1", ":", "\n", "# freeze all", "\n", "            ", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "", "print", "(", "'All layers freezed.'", ")", "\n", "\n", "if", "'decoder'", "in", "loose_parts", ":", "\n", "# unfreeze the last sub-network of decoders.", "\n", "                ", "for", "param", "in", "self", ".", "decoders", "[", "-", "1", "]", ".", "parameters", "(", ")", ":", "\n", "                    ", "param", ".", "requires_grad", "=", "True", "\n", "", "print", "(", "'Decoder unfrozen.'", ")", "\n", "\n", "", "if", "'ee'", "in", "loose_parts", "and", "hasattr", "(", "self", ",", "'error_estimators'", ")", ":", "\n", "# unfreeze the last sub-network of error estimators.", "\n", "                ", "for", "param", "in", "self", ".", "error_estimators", "[", "-", "1", "]", ".", "parameters", "(", ")", ":", "\n", "                    ", "param", ".", "requires_grad", "=", "True", "\n", "", "print", "(", "'EE unfrozen.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.modules.mesh_reconstruction.DensTMNet.forward": [[125, 214], ["torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "net_utils.misc.sphere_edges.clone().unsqueeze().to", "current_edges.repeat.repeat.repeat", "image[].contiguous", "mesh_reconstruction.DensTMNet.encoder", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "sphere_points_normals[].t().expand().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "range", "net_utils.misc.sphere_faces.clone().unsqueeze().to", "current_faces.repeat.repeat.repeat", "torch.cat.unsqueeze().expand().contiguous", "torch.cat.unsqueeze().expand().contiguous", "torch.cat.unsqueeze().expand().contiguous", "torch.cat.unsqueeze().expand().contiguous", "torch.cat().contiguous", "torch.cat().contiguous", "torch.cat().contiguous", "torch.cat().contiguous", "torch.cat().contiguous", "torch.cat().contiguous", "torch.cat().contiguous", "torch.cat().contiguous", "torch.cat().contiguous", "torch.cat().contiguous", "torch.cat().contiguous", "torch.cat().contiguous", "torch.cat().contiguous", "torch.cat().contiguous", "torch.cat().contiguous", "torch.cat().contiguous", "out_shape_points.append", "net_utils.misc.sphere_edges.clone().unsqueeze", "sphere_points_normals[].t().expand", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "net_utils.misc.sample_points_on_edges", "out_sampled_mesh_points.append", "torch.cat.unsqueeze().expand().contiguous", "torch.cat.unsqueeze().expand().contiguous", "torch.cat.unsqueeze().expand().contiguous", "torch.cat.unsqueeze().expand().contiguous", "torch.cat().contiguous", "torch.cat().contiguous", "torch.cat().contiguous", "torch.cat().contiguous", "torch.cat().contiguous", "torch.cat().contiguous", "torch.cat().contiguous", "torch.cat().contiguous", "torch.cat().contiguous", "torch.cat().contiguous", "torch.cat().contiguous", "torch.cat().contiguous", "torch.cat().contiguous", "torch.cat().contiguous", "torch.cat().contiguous", "torch.cat().contiguous", "torch.mean.view", "torch.mean.view", "torch.mean.view", "torch.mean.view", "torch.mean.squeeze", "torch.mean.squeeze", "torch.mean.squeeze", "torch.mean.squeeze", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "out_indicators.append", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.unique.append", "torch.unique.append", "torch.unique.append", "torch.unique.append", "range", "net_utils.misc.sphere_faces.clone().unsqueeze", "torch.cat.unsqueeze().expand", "torch.cat.unsqueeze().expand", "torch.cat.unsqueeze().expand", "torch.cat.unsqueeze().expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "range", "net_utils.misc.sphere_edges.clone", "sphere_points_normals[].t", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "sphere_points_normals[].t().expand().to.size", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.unsqueeze().expand", "torch.cat.unsqueeze().expand", "torch.cat.unsqueeze().expand", "torch.cat.unsqueeze().expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "len", "net_utils.misc.sphere_faces.clone", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "len", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "net_utils.misc.sample_points_on_edges.size", "sphere_adjacency[].sum", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "sphere_edge2face[].sum().type", "sphere_edge2face[].sum"], "methods", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.misc.sample_points_on_edges"], ["", "", "", "def", "forward", "(", "self", ",", "image", ",", "size_cls", ",", "threshold", "=", "0.1", ",", "factor", "=", "1.", ")", ":", "\n", "        ", "mode", "=", "'train'", "if", "self", ".", "training", "else", "'test'", "\n", "device", "=", "image", ".", "device", "\n", "\n", "n_batch", "=", "image", ".", "size", "(", "0", ")", "\n", "n_edges", "=", "sphere_edges", ".", "shape", "[", "0", "]", "\n", "\n", "if", "mode", "==", "'test'", ":", "\n", "            ", "current_faces", "=", "sphere_faces", ".", "clone", "(", ")", ".", "unsqueeze", "(", "0", ")", ".", "to", "(", "device", ")", "\n", "current_faces", "=", "current_faces", ".", "repeat", "(", "n_batch", ",", "1", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "current_faces", "=", "None", "\n", "\n", "", "current_edges", "=", "sphere_edges", ".", "clone", "(", ")", ".", "unsqueeze", "(", "0", ")", ".", "to", "(", "device", ")", "\n", "current_edges", "=", "current_edges", ".", "repeat", "(", "n_batch", ",", "1", ",", "1", ")", "\n", "\n", "# image encoding", "\n", "image", "=", "image", "[", ":", ",", ":", "3", ",", ":", ",", ":", "]", ".", "contiguous", "(", ")", "\n", "image", "=", "self", ".", "encoder", "(", "image", ")", "\n", "image", "=", "torch", ".", "cat", "(", "[", "image", ",", "size_cls", "]", ",", "1", ")", "\n", "\n", "current_shape_grid", "=", "sphere_points_normals", "[", ":", ",", ":", "3", "]", ".", "t", "(", ")", ".", "expand", "(", "n_batch", ",", "3", ",", "self", ".", "num_points", ")", ".", "to", "(", "device", ")", "\n", "\n", "# outputs for saving", "\n", "out_shape_points", "=", "[", "]", "\n", "out_sampled_mesh_points", "=", "[", "]", "\n", "out_indicators", "=", "[", "]", "\n", "\n", "# boundary faces for boundary refinement", "\n", "boundary_point_ids", "=", "torch", ".", "zeros", "(", "size", "=", "(", "n_batch", ",", "self", ".", "num_points", ")", ",", "dtype", "=", "torch", ".", "uint8", ")", ".", "to", "(", "device", ")", "\n", "remove_edges_list", "=", "[", "]", "\n", "\n", "# AtlasNet deformation + topoly modification", "\n", "for", "i", "in", "range", "(", "self", ".", "subnetworks", ")", ":", "\n", "            ", "current_image_grid", "=", "image", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "image", ".", "size", "(", "0", ")", ",", "image", ".", "size", "(", "1", ")", ",", "\n", "current_shape_grid", ".", "size", "(", "2", ")", ")", ".", "contiguous", "(", ")", "\n", "current_image_grid", "=", "torch", ".", "cat", "(", "(", "current_shape_grid", ",", "current_image_grid", ")", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "current_shape_grid", "=", "current_shape_grid", "+", "self", ".", "decoders", "[", "i", "]", "(", "current_image_grid", ")", "\n", "\n", "# save deformed point cloud", "\n", "out_shape_points", ".", "append", "(", "current_shape_grid", ")", "\n", "\n", "if", "i", "==", "self", ".", "subnetworks", "-", "1", "and", "self", ".", "subnetworks", ">", "1", ":", "\n", "                ", "remove_edges_list", "=", "[", "item", "for", "item", "in", "remove_edges_list", "if", "len", "(", "item", ")", "]", "\n", "if", "remove_edges_list", ":", "\n", "                    ", "remove_edges_list", "=", "torch", ".", "unique", "(", "torch", ".", "cat", "(", "remove_edges_list", ")", ",", "dim", "=", "0", ")", "\n", "for", "batch_id", "in", "range", "(", "n_batch", ")", ":", "\n", "                        ", "rm_edges", "=", "remove_edges_list", "[", "remove_edges_list", "[", ":", ",", "0", "]", "==", "batch_id", ",", "1", "]", "\n", "if", "len", "(", "rm_edges", ")", ">", "0", ":", "\n", "                            ", "rm_candidates", ",", "counts", "=", "torch", ".", "unique", "(", "sphere_edges", "[", "rm_edges", "]", ",", "return_counts", "=", "True", ")", "\n", "boundary_ids", "=", "counts", "<", "sphere_adjacency", "[", "rm_candidates", "-", "1", "]", ".", "sum", "(", "1", ")", "\n", "boundary_point_ids", "[", "batch_id", "]", "[", "rm_candidates", "[", "boundary_ids", "]", "-", "1", "]", "=", "1", "\n", "\n", "", "", "", "return", "out_shape_points", ",", "out_sampled_mesh_points", ",", "out_indicators", ",", "current_edges", ",", "boundary_point_ids", ",", "current_faces", "\n", "\n", "", "if", "self", ".", "train_e_e", ":", "\n", "# sampling from deformed mesh", "\n", "                ", "sampled_points", "=", "sample_points_on_edges", "(", "current_shape_grid", ",", "current_edges", ",", "quantity", "=", "self", ".", "face_samples", ",", "mode", "=", "mode", ")", "\n", "\n", "# save sampled points from deformed mesh", "\n", "out_sampled_mesh_points", ".", "append", "(", "sampled_points", ")", "\n", "\n", "# preprare for face error estimation", "\n", "current_image_grid", "=", "image", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "image", ".", "size", "(", "0", ")", ",", "image", ".", "size", "(", "1", ")", ",", "sampled_points", ".", "size", "(", "2", ")", ")", ".", "contiguous", "(", ")", "\n", "current_image_grid", "=", "torch", ".", "cat", "(", "(", "sampled_points", ",", "current_image_grid", ")", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "\n", "# estimate the distance from deformed points to gt mesh.", "\n", "indicators", "=", "self", ".", "error_estimators", "[", "i", "]", "(", "current_image_grid", ")", "\n", "indicators", "=", "indicators", ".", "view", "(", "n_batch", ",", "1", ",", "n_edges", ",", "self", ".", "face_samples", ")", "\n", "indicators", "=", "indicators", ".", "squeeze", "(", "1", ")", "\n", "indicators", "=", "torch", ".", "mean", "(", "indicators", ",", "dim", "=", "2", ")", "\n", "\n", "# save estimated distance values from deformed points to gt mesh.", "\n", "out_indicators", ".", "append", "(", "indicators", ")", "\n", "# remove faces and modify the topology", "\n", "remove_edges", "=", "torch", ".", "nonzero", "(", "torch", ".", "sigmoid", "(", "indicators", ")", "<", "threshold", ")", "\n", "remove_edges_list", ".", "append", "(", "remove_edges", ")", "\n", "\n", "for", "batch_id", "in", "range", "(", "n_batch", ")", ":", "\n", "                    ", "rm_edges", "=", "remove_edges", "[", "remove_edges", "[", ":", ",", "0", "]", "==", "batch_id", ",", "1", "]", "\n", "if", "len", "(", "rm_edges", ")", ">", "0", ":", "\n", "# cutting edges in training", "\n", "                        ", "current_edges", "[", "batch_id", "]", "[", "rm_edges", ",", ":", "]", "=", "1", "\n", "if", "mode", "==", "'test'", ":", "\n", "                            ", "current_faces", "[", "batch_id", "]", "[", "sphere_edge2face", "[", "rm_edges", "]", ".", "sum", "(", "0", ")", ".", "type", "(", "torch", ".", "bool", ")", ",", ":", "]", "=", "1", "\n", "\n", "", "", "", "threshold", "*=", "factor", "\n", "\n", "", "", "return", "out_shape_points", ",", "out_sampled_mesh_points", ",", "out_indicators", ",", "current_edges", ",", "boundary_point_ids", ",", "current_faces", "", "", "", ""]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.modules.relation_net.RelationNet.__init__": [[13, 30], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Threshold", "torch.Threshold", "torch.Softmax", "torch.Softmax", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Conv1d", "torch.Conv1d"], "methods", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.data_config.Config.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "RelationNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# branch to estimate geometric weights", "\n", "self", ".", "fc_g", "=", "nn", ".", "Linear", "(", "rel_cfg", ".", "d_g", ",", "rel_cfg", ".", "Nr", ")", "\n", "self", ".", "threshold", "=", "nn", ".", "Threshold", "(", "1e-6", ",", "1e-6", ")", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "\n", "\n", "# branch to estimate appearance weights", "\n", "self", ".", "fc_K", "=", "nn", ".", "Linear", "(", "2048", ",", "rel_cfg", ".", "d_k", "*", "rel_cfg", ".", "Nr", ")", "\n", "self", ".", "fc_Q", "=", "nn", ".", "Linear", "(", "2048", ",", "rel_cfg", ".", "d_k", "*", "rel_cfg", ".", "Nr", ")", "\n", "\n", "# # to ensemble appearance and geometric feature", "\n", "# self.fc_V = nn.Linear(2048, 2048)", "\n", "\n", "# control scale", "\n", "self", ".", "conv_s", "=", "nn", ".", "Conv1d", "(", "1", ",", "1", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.modules.relation_net.RelationNet.forward": [[32, 102], ["relation_net.RelationNet.fc_g", "relation_net.RelationNet.threshold", "g_weights.transpose.transpose.transpose", "relation_net.RelationNet.fc_K", "relation_net.RelationNet.fc_Q", "k_features.view().transpose.view().transpose.view().transpose", "q_features.view().transpose.view().transpose.view().transpose", "a_features.view().transpose", "enumerate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "relation_net.RelationNet.conv_s().squeeze", "torch.div", "torch.div", "torch.div", "torch.div", "sample_g_weights.view.view.view", "relation_net.RelationNet.softmax", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "sample_r_feature.view().transpose.view().transpose.view().transpose", "relation_net.RelationNet.append", "k_features.view().transpose.view().transpose.view", "q_features.view().transpose.view().transpose.view", "a_features.view", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "math.sqrt", "sample_g_weights.view.view.size", "sample_v_features.transpose", "relation_net.RelationNet.conv_s", "a_features.size", "sample_q_features.transpose", "torch.log", "torch.log", "torch.log", "torch.log", "sample_r_feature.view().transpose.view().transpose.view", "relation_net.RelationNet.unsqueeze", "sample_r_feature.view().transpose.view().transpose.size", "sample_r_feature.view().transpose.view().transpose.size", "sample_r_feature.view().transpose.view().transpose.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "a_features", ",", "g_features", ",", "split", ",", "rel_pair_counts", ")", ":", "\n", "        ", "'''\n        Extract relational features from appearance feature and geometric feature (see Hu et al. [2]).\n        :param a_features: Patch_size x 2048 (Appearance_feature_size)\n        a_features records the ResNet-34 feature for each object in Patch.\n        :param g_features: SUM(N_i^2) x 64 (i.e. Number_of_object_pairs x Geometric_feature_size)\n        g_features records the geometric features (64-D) between each pair of objects (see Hu et al. [2]). So the dimension\n        is Number_of_pairs_in_images x 64 (or SUM(N_i^2) x 64). N_i is the number of objects in the i-th image.\n        :param split: Batch_size x 2\n        split records which batch a object belongs to.\n        e.g. split = torch.tensor([[0, 5], [5, 8]]) when batch size is 2, and there are 5 objects in the first batch and\n        3 objects in the second batch.\n        Then the first 5 objects in the whole patch belongs to the first batch, and the rest belongs to the second batch.\n        :param rel_pair_counts: (Batch_size + 1)\n        rel_pair_counts records which batch a geometric feature belongs to, and gives the start and end index.\n        e.g. rel_pair_counts = torch.tensor([0, 49, 113]).\n        The batch size is two. The first 49 geometric features are from the first batch.\n        The index begins from 0 and ends at 49. The second 64 geometric features are from the second batch.\n        The index begins from 49 and ends at 113.\n        :return: Relational features for each object.\n        '''", "\n", "# branch to estimate geometric weights", "\n", "g_weights", "=", "self", ".", "fc_g", "(", "g_features", ")", "\n", "g_weights", "=", "self", ".", "threshold", "(", "g_weights", ")", "\n", "# Nr x num_pairs_in_batch x dim", "\n", "g_weights", "=", "g_weights", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n", "# branch to estimate appearance weights", "\n", "k_features", "=", "self", ".", "fc_K", "(", "a_features", ")", "\n", "q_features", "=", "self", ".", "fc_Q", "(", "a_features", ")", "\n", "\n", "# divided by batch and relational group", "\n", "# Nr x num_objects_in_batch x dim", "\n", "k_features", "=", "k_features", ".", "view", "(", "-", "1", ",", "rel_cfg", ".", "Nr", ",", "rel_cfg", ".", "d_k", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "q_features", "=", "q_features", ".", "view", "(", "-", "1", ",", "rel_cfg", ".", "Nr", ",", "rel_cfg", ".", "d_k", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n", "# relational features for final weighting", "\n", "# v_features = self.fc_V(a_features).view(a_features.size(0), rel_cfg.Nr, -1).transpose(0, 1)", "\n", "v_features", "=", "a_features", ".", "view", "(", "a_features", ".", "size", "(", "0", ")", ",", "rel_cfg", ".", "Nr", ",", "-", "1", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n", "# to estimate appearance weight", "\n", "r_features", "=", "[", "]", "\n", "\n", "for", "interval_idx", ",", "interval", "in", "enumerate", "(", "split", ")", ":", "\n", "            ", "sample_k_features", "=", "k_features", "[", ":", ",", "interval", "[", "0", "]", ":", "interval", "[", "1", "]", ",", ":", "]", "\n", "sample_q_features", "=", "q_features", "[", ":", ",", "interval", "[", "0", "]", ":", "interval", "[", "1", "]", ",", ":", "]", "\n", "\n", "sample_a_weights", "=", "torch", ".", "div", "(", "torch", ".", "bmm", "(", "sample_k_features", ",", "sample_q_features", ".", "transpose", "(", "1", ",", "2", ")", ")", ",", "math", ".", "sqrt", "(", "rel_cfg", ".", "d_k", ")", ")", "\n", "\n", "sample_g_weights", "=", "g_weights", "[", ":", ",", "rel_pair_counts", "[", "interval_idx", "]", ":", "rel_pair_counts", "[", "interval_idx", "+", "1", "]", "]", "\n", "sample_g_weights", "=", "sample_g_weights", ".", "view", "(", "sample_g_weights", ".", "size", "(", "0", ")", ",", "interval", "[", "1", "]", "-", "interval", "[", "0", "]", ",", "interval", "[", "1", "]", "-", "interval", "[", "0", "]", ")", "\n", "\n", "fin_weight", "=", "self", ".", "softmax", "(", "torch", ".", "log", "(", "sample_g_weights", ")", "+", "sample_a_weights", ")", "\n", "\n", "# # mask the weight from objects themselves.", "\n", "# fin_weight-=torch.diag_embed(torch.diagonal(fin_weight, dim1=-2, dim2=-1))", "\n", "\n", "sample_v_features", "=", "v_features", "[", ":", ",", "interval", "[", "0", "]", ":", "interval", "[", "1", "]", ",", ":", "]", "\n", "\n", "sample_r_feature", "=", "torch", ".", "bmm", "(", "sample_v_features", ".", "transpose", "(", "1", ",", "2", ")", ",", "fin_weight", ")", "\n", "\n", "sample_r_feature", "=", "sample_r_feature", ".", "view", "(", "sample_r_feature", ".", "size", "(", "0", ")", "*", "sample_r_feature", ".", "size", "(", "1", ")", ",", "\n", "sample_r_feature", ".", "size", "(", "2", ")", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n", "r_features", ".", "append", "(", "sample_r_feature", ")", "\n", "\n", "", "r_features", "=", "torch", ".", "cat", "(", "r_features", ",", "0", ")", "\n", "r_features", "=", "self", ".", "conv_s", "(", "r_features", ".", "unsqueeze", "(", "1", ")", ")", ".", "squeeze", "(", "1", ")", "\n", "\n", "return", "r_features", "", "", "", ""]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.modules.network.TOTAL3D.__init__": [[14, 60], ["models.network.BaseNetwork.__init__", "cfg.config[].items", "setattr", "network.TOTAL3D.freeze_modules", "cfg.log_string", "ModuleNotFoundError", "network.TOTAL3D.load_optim_spec", "network.TOTAL3D.add_module", "setattr", "torch.nn.DataParallel", "torch.nn.DataParallel", "models.registers.MODULES.get", "models.registers.LOSSES.get", "models.registers.LOSSES.get", "[].get"], "methods", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.data_config.Config.__init__", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.models.network.BaseNetwork.freeze_modules", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.config_utils.CONFIG.log_string", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.models.network.BaseNetwork.load_optim_spec", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.CheckpointIO.get", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.CheckpointIO.get", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.CheckpointIO.get", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.CheckpointIO.get"], ["\n", "super", "(", "BaseNetwork", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cfg", "=", "cfg", "\n", "\n", "'''load network blocks'''", "\n", "for", "phase_name", ",", "net_spec", "in", "cfg", ".", "config", "[", "'model'", "]", ".", "items", "(", ")", ":", "\n", "            ", "method_name", "=", "net_spec", "[", "'method'", "]", "\n", "# load specific optimizer parameters", "\n", "optim_spec", "=", "self", ".", "load_optim_spec", "(", "cfg", ".", "config", ",", "net_spec", ")", "\n", "subnet", "=", "MODULES", ".", "get", "(", "method_name", ")", "(", "cfg", ".", "config", ",", "optim_spec", ")", "\n", "self", ".", "add_module", "(", "phase_name", ",", "subnet", ")", "\n", "\n", "'''load corresponding loss functions'''", "\n", "setattr", "(", "self", ",", "phase_name", "+", "'_loss'", ",", "LOSSES", ".", "get", "(", "self", ".", "cfg", ".", "config", "[", "'model'", "]", "[", "phase_name", "]", "[", "'loss'", "]", ",", "'Null'", ")", "(", "\n", "self", ".", "cfg", ".", "config", "[", "'model'", "]", "[", "phase_name", "]", ".", "get", "(", "'weight'", ",", "1", ")", ")", ")", "\n", "\n", "", "'''freeze submodules or not'''", "\n", "self", ".", "freeze_modules", "(", "cfg", ")", "\n", "\n", "", "def", "freeze_modules", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "'''\n        Freeze modules in training\n        '''", "\n", "if", "cfg", ".", "config", "[", "'mode'", "]", "==", "'train'", ":", "\n", "            ", "freeze_layers", "=", "cfg", ".", "config", "[", "'train'", "]", "[", "'freeze'", "]", "\n", "for", "layer", "in", "freeze_layers", ":", "\n", "                ", "if", "not", "hasattr", "(", "self", ",", "layer", ")", ":", "\n", "                    ", "continue", "\n", "", "for", "param", "in", "getattr", "(", "self", ",", "layer", ")", ".", "parameters", "(", ")", ":", "\n", "                    ", "param", ".", "requires_grad", "=", "False", "\n", "", "cfg", ".", "log_string", "(", "'The module: %s is fixed.'", "%", "(", "layer", ")", ")", "\n", "\n", "", "", "", "def", "set_mode", "(", "self", ")", ":", "\n", "        ", "'''\n        Set train/eval mode for the network.\n        :param phase: train or eval\n        :return:\n        '''", "\n", "freeze_layers", "=", "self", ".", "cfg", ".", "config", "[", "'train'", "]", "[", "'freeze'", "]", "\n", "for", "name", ",", "child", "in", "self", ".", "named_children", "(", ")", ":", "\n", "            ", "if", "name", "in", "freeze_layers", ":", "\n", "                ", "child", ".", "train", "(", "False", ")", "\n", "\n", "# turn off BatchNorm if batch_size == 1.", "\n", "", "", "if", "self", ".", "cfg", ".", "config", "[", "self", ".", "cfg", ".", "config", "[", "'mode'", "]", "]", "[", "'batch_size'", "]", "==", "1", ":", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.modules.network.TOTAL3D.forward": [[61, 109], ["network.TOTAL3D.layout_estimation", "network.TOTAL3D.object_detection", "network.TOTAL3D.mesh_reconstruction", "network.TOTAL3D.mesh_reconstruction"], "methods", ["None"], ["            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "m", ".", "_get_name", "(", ")", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "                    ", "m", ".", "eval", "(", ")", "\n", "\n", "", "", "", "", "def", "load_weight", "(", "self", ",", "pretrained_model", ")", ":", "\n", "        ", "model_dict", "=", "self", ".", "state_dict", "(", ")", "\n", "pretrained_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "pretrained_model", ".", "items", "(", ")", "if", "\n", "k", "in", "model_dict", "}", "\n", "self", ".", "cfg", ".", "log_string", "(", "\n", "str", "(", "set", "(", "[", "key", ".", "split", "(", "'.'", ")", "[", "0", "]", "for", "key", "in", "model_dict", "if", "key", "not", "in", "pretrained_dict", "]", ")", ")", "+", "' subnet missed.'", ")", "\n", "model_dict", ".", "update", "(", "pretrained_dict", ")", "\n", "self", ".", "load_state_dict", "(", "model_dict", ")", "\n", "\n", "", "def", "load_optim_spec", "(", "self", ",", "config", ",", "net_spec", ")", ":", "\n", "# load specific optimizer parameters", "\n", "        ", "if", "config", "[", "'mode'", "]", "==", "'train'", ":", "\n", "            ", "if", "'optimizer'", "in", "net_spec", ".", "keys", "(", ")", ":", "\n", "                ", "optim_spec", "=", "net_spec", "[", "'optimizer'", "]", "\n", "", "else", ":", "\n", "                ", "optim_spec", "=", "config", "[", "'optimizer'", "]", "# else load default optimizer", "\n", "", "", "else", ":", "\n", "            ", "optim_spec", "=", "None", "\n", "\n", "", "return", "optim_spec", "\n", "\n", "", "def", "forward", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "''' Performs a forward step.\n        '''", "\n", "raise", "NotImplementedError", "\n", "\n", "", "def", "loss", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "''' calculate losses.\n        '''", "\n", "raise", "NotImplementedError", "", "", "", ""]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.modules.network.TOTAL3D.loss": [[110, 145], ["network.TOTAL3D.layout_estimation_loss", "sum", "layout_loss.items", "network.TOTAL3D.object_detection_loss", "sum", "network.TOTAL3D.items", "network.TOTAL3D.joint_loss", "network.TOTAL3D.mesh_reconstruction_loss", "network.TOTAL3D.items", "joint_loss.items", "layout_loss.values", "value.item", "network.TOTAL3D.values", "value.item", "sum", "sum", "float", "value.item", "joint_loss.values", "network.TOTAL3D.values"], "methods", ["None"], []], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.modules.object_detection.Bdb3DNet.__init__": [[17, 66], ["torch.Module.__init__", "len", "len", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel", "models.total3d.modules.relation_net.RelationNet", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "object_detection.Bdb3DNet.modules", "torch.load_url", "torch.load_url", "torch.load_url", "object_detection.Bdb3DNet.resnet.state_dict", "object_detection.Bdb3DNet.update", "object_detection.Bdb3DNet.resnet.load_state_dict", "models.modules.resnet.resnet34", "isinstance", "len", "len", "len", "len", "m.weight.data.normal_", "hasattr", "torch.load_url.items", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.data_config.Config.__init__", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.CheckpointIO.load_url", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.CheckpointIO.load_url", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.CheckpointIO.load_url", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.modules.resnet.resnet34"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "optim_spec", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bdb3DNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "'''Optimizer parameters used in training'''", "\n", "self", ".", "optim_spec", "=", "optim_spec", "\n", "\n", "'''Module parameters'''", "\n", "bin", "=", "cfg", ".", "dataset_config", ".", "bins", "\n", "self", ".", "OBJ_ORI_BIN", "=", "len", "(", "bin", "[", "'ori_bin'", "]", ")", "\n", "self", ".", "OBJ_CENTER_BIN", "=", "len", "(", "bin", "[", "'centroid_bin'", "]", ")", "\n", "\n", "# set up neural network blocks", "\n", "self", ".", "resnet", "=", "nn", ".", "DataParallel", "(", "resnet", ".", "resnet34", "(", "pretrained", "=", "False", ")", ")", "\n", "\n", "# set up relational network blocks", "\n", "self", ".", "relnet", "=", "RelationNet", "(", ")", "\n", "\n", "# branch to predict the size", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "2048", "+", "len", "(", "NYU40CLASSES", ")", ",", "128", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "128", ",", "3", ")", "\n", "\n", "# branch to predict the orientation", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "2048", "+", "len", "(", "NYU40CLASSES", ")", ",", "128", ")", "\n", "self", ".", "fc4", "=", "nn", ".", "Linear", "(", "128", ",", "self", ".", "OBJ_ORI_BIN", "*", "2", ")", "\n", "\n", "# branch to predict the centroid", "\n", "self", ".", "fc5", "=", "nn", ".", "Linear", "(", "2048", "+", "len", "(", "NYU40CLASSES", ")", ",", "128", ")", "\n", "self", ".", "fc_centroid", "=", "nn", ".", "Linear", "(", "128", ",", "self", ".", "OBJ_CENTER_BIN", "*", "2", ")", "\n", "\n", "# branch to predict the 2D offset", "\n", "self", ".", "fc_off_1", "=", "nn", ".", "Linear", "(", "2048", "+", "len", "(", "NYU40CLASSES", ")", ",", "128", ")", "\n", "self", ".", "fc_off_2", "=", "nn", ".", "Linear", "(", "128", ",", "2", ")", "\n", "\n", "self", ".", "relu_1", "=", "nn", ".", "LeakyReLU", "(", "0.2", ")", "\n", "self", ".", "dropout_1", "=", "nn", ".", "Dropout", "(", "p", "=", "0.5", ")", "\n", "\n", "# initialize weights", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "if", "hasattr", "(", "m", ".", "bias", ",", "'data'", ")", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "# initialize resnet weights", "\n", "", "", "", "pretrained_dict", "=", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet34'", "]", ")", "\n", "model_dict", "=", "self", ".", "resnet", ".", "state_dict", "(", ")", "\n", "pretrained_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", "if", "k", "in", "model_dict", "}", "\n", "model_dict", ".", "update", "(", "pretrained_dict", ")", "\n", "self", ".", "resnet", ".", "load_state_dict", "(", "model_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.modules.object_detection.Bdb3DNet.forward": [[67, 141], ["object_detection.Bdb3DNet.resnet", "a_features.view.view.view", "object_detection.Bdb3DNet.relnet", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "object_detection.Bdb3DNet.fc1", "object_detection.Bdb3DNet.relu_1", "object_detection.Bdb3DNet.dropout_1", "object_detection.Bdb3DNet.fc2", "object_detection.Bdb3DNet.fc3", "object_detection.Bdb3DNet.relu_1", "object_detection.Bdb3DNet.dropout_1", "object_detection.Bdb3DNet.fc4", "ori.view.view.view", "object_detection.Bdb3DNet.fc5", "object_detection.Bdb3DNet.relu_1", "object_detection.Bdb3DNet.dropout_1", "object_detection.Bdb3DNet.fc_centroid", "centroid.view.view.view", "object_detection.Bdb3DNet.fc_off_1", "object_detection.Bdb3DNet.relu_1", "object_detection.Bdb3DNet.dropout_1", "object_detection.Bdb3DNet.fc_off_2", "a_features.view.view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "size_cls", ",", "g_features", ",", "split", ",", "rel_pair_counts", ")", ":", "\n", "        ", "'''\n        Extract relational features for object bounding box estimation.\n\n        The definition of 'batch' in train.py indicates the number of images we process in a single forward broadcasting.\n        In this implementation, we speed-up the efficiency by processing all objects in a batch in parallel.\n\n        As each image contains various number (N_i) of objects, it refers to an issue to assign which image an object belongs to.\n        We address the problem by involving a look-up table in 'split'.\n\n        Therefore, The meaning of 'batch' in this function actually refers to a 'patch' of objects.\n\n        :param x: Patch_size x Channel_size x Height x Width\n        :param size_cls: Patches x Number_of_classes.\n        :param g_features: SUM(N_i^2) x 64\n        g_features records the geometric features (64-D) between each pair of objects (see Hu et al. [2]). So the dimension\n        is Number_of_pairs_in_images x 64 (or SUM(N_i^2) x 64). N_i is the number of objects in the i-th image.\n        :param split: Batch_size x 2\n        split records which batch a object belongs to.\n        e.g. split = torch.tensor([[0, 5], [5, 8]]) when batch size is 2, and there are 5 objects in the first batch and\n        3 objects in the second batch.\n        Then the first 5 objects in the whole patch belongs to the first batch, and the rest belongs to the second batch.\n        :param rel_pair_counts: (Batch_size + 1)\n        rel_pair_counts records which batch a geometric feature belongs to, and gives the start and end index.\n        e.g. rel_pair_counts = torch.tensor([0, 49, 113]).\n        The batch size is two. The first 49 geometric features are from the first batch.\n        The index begins from 0 and ends at 49. The second 64 geometric features are from the second batch.\n        The index begins from 49 and ends at 113.\n        :return: Object bounding box properties.\n        '''", "\n", "\n", "# get appearance feature from resnet.", "\n", "a_features", "=", "self", ".", "resnet", "(", "x", ")", "\n", "a_features", "=", "a_features", ".", "view", "(", "a_features", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "# extract relational features from other objects.", "\n", "r_features", "=", "self", ".", "relnet", "(", "a_features", ",", "g_features", ",", "split", ",", "rel_pair_counts", ")", "\n", "\n", "a_r_features", "=", "torch", ".", "add", "(", "a_features", ",", "r_features", ")", "\n", "\n", "# add object category information", "\n", "a_r_features", "=", "torch", ".", "cat", "(", "[", "a_r_features", ",", "size_cls", "]", ",", "1", ")", "\n", "\n", "# branch to predict the size", "\n", "size", "=", "self", ".", "fc1", "(", "a_r_features", ")", "\n", "size", "=", "self", ".", "relu_1", "(", "size", ")", "\n", "size", "=", "self", ".", "dropout_1", "(", "size", ")", "\n", "size", "=", "self", ".", "fc2", "(", "size", ")", "\n", "\n", "# branch to predict the orientation", "\n", "ori", "=", "self", ".", "fc3", "(", "a_r_features", ")", "\n", "ori", "=", "self", ".", "relu_1", "(", "ori", ")", "\n", "ori", "=", "self", ".", "dropout_1", "(", "ori", ")", "\n", "ori", "=", "self", ".", "fc4", "(", "ori", ")", "\n", "ori", "=", "ori", ".", "view", "(", "-", "1", ",", "self", ".", "OBJ_ORI_BIN", ",", "2", ")", "\n", "ori_reg", "=", "ori", "[", ":", ",", ":", ",", "0", "]", "\n", "ori_cls", "=", "ori", "[", ":", ",", ":", ",", "1", "]", "\n", "\n", "# branch to predict the centroid", "\n", "centroid", "=", "self", ".", "fc5", "(", "a_r_features", ")", "\n", "centroid", "=", "self", ".", "relu_1", "(", "centroid", ")", "\n", "centroid", "=", "self", ".", "dropout_1", "(", "centroid", ")", "\n", "centroid", "=", "self", ".", "fc_centroid", "(", "centroid", ")", "\n", "centroid", "=", "centroid", ".", "view", "(", "-", "1", ",", "self", ".", "OBJ_CENTER_BIN", ",", "2", ")", "\n", "centroid_cls", "=", "centroid", "[", ":", ",", ":", ",", "0", "]", "\n", "centroid_reg", "=", "centroid", "[", ":", ",", ":", ",", "1", "]", "\n", "\n", "# branch to predict the 2D offset", "\n", "offset", "=", "self", ".", "fc_off_1", "(", "a_r_features", ")", "\n", "offset", "=", "self", ".", "relu_1", "(", "offset", ")", "\n", "offset", "=", "self", ".", "dropout_1", "(", "offset", ")", "\n", "offset", "=", "self", ".", "fc_off_2", "(", "offset", ")", "\n", "\n", "return", "size", ",", "ori_reg", ",", "ori_cls", ",", "centroid_reg", ",", "centroid_cls", ",", "offset", "", "", "", ""]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.mgnet.config.get_trainer": [[8, 10], ["training.Trainer"], "function", ["None"], ["def", "get_trainer", "(", "cfg", ",", "net", ",", "optimizer", ",", "device", "=", "None", ")", ":", "\n", "    ", "return", "Trainer", "(", "cfg", "=", "cfg", ",", "net", "=", "net", ",", "optimizer", "=", "optimizer", ",", "device", "=", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.mgnet.config.get_tester": [[11, 13], ["testing.Tester"], "function", ["None"], ["", "def", "get_tester", "(", "cfg", ",", "net", ",", "device", "=", "None", ")", ":", "\n", "    ", "return", "Tester", "(", "cfg", "=", "cfg", ",", "net", "=", "net", ",", "device", "=", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.mgnet.config.get_dataloader": [[14, 16], ["dataloader.MGNet_dataloader"], "function", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.mgnet.dataloader.MGNet_dataloader"], ["", "def", "get_dataloader", "(", "config", ",", "mode", ")", ":", "\n", "    ", "return", "MGNet_dataloader", "(", "config", "=", "config", ",", "mode", "=", "mode", ")", "", "", ""]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.mgnet.testing.Tester.__init__": [[17, 19], ["models.testing.BaseTester.__init__"], "methods", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.data_config.Config.__init__"], ["raise", "NotImplementedError", "\n", "\n", "", "def", "get_metric_values", "(", "self", ",", "est_data", ",", "gt_data", ")", ":", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.mgnet.testing.Tester.get_metric_values": [[20, 39], ["[].transpose", "range", "[].item", "chamfer_values.append", "dist_chamfer", "os.path.join", "libs.tools.write_obj", "[].unsqueeze", "current_coordinates.unsqueeze", "current_coordinates.cpu().numpy", "current_faces.cpu().numpy", "[].nonzero", "torch.mean", "torch.mean", "[].item", "current_coordinates.cpu", "current_faces.cpu"], "methods", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.write_obj"], ["        ", "''' Performs a evaluation step.\n        '''", "\n", "# camera orientation error", "\n", "raise", "NotImplementedError", "\n", "\n", "\n", "\n", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.mgnet.testing.Tester.test_step": [[40, 52], ["testing.Tester.to_device", "testing.Tester.net", "testing.Tester.get_metric_values"], "methods", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.total3d.training.Trainer.to_device", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.total3d.testing.Tester.get_metric_values"], []], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.mgnet.testing.Tester.visualize_step": [[53, 57], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.mgnet.training.Trainer.eval_step": [[11, 20], ["training.Trainer.compute_loss", "loss[].item"], "methods", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.total3d.training.Trainer.compute_loss"], ["self", ".", "net", "=", "net", "\n", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "device", "=", "device", "\n", "\n", "", "def", "show_lr", "(", "self", ")", ":", "\n", "        ", "'''\n        display current learning rates\n        :return:\n        '''", "\n", "lrs", "=", "[", "self", ".", "optimizer", ".", "param_groups", "[", "i", "]", "[", "'lr'", "]", "for", "i", "in", "range", "(", "len", "(", "self", ".", "optimizer", ".", "param_groups", ")", ")", "]", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.mgnet.training.Trainer.visualize_step": [[21, 25], ["None"], "methods", ["None"], ["self", ".", "cfg", ".", "log_string", "(", "'Current learning rates are: '", "+", "str", "(", "lrs", ")", "+", "'.'", ")", "\n", "\n", "", "def", "train_step", "(", "self", ",", "data", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.mgnet.training.Trainer.to_device": [[26, 34], ["data[].to", "data[].float().to", "data[].float().to", "data[].float().to", "data[].float", "data[].float", "data[].float"], "methods", ["None"], ["\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", "=", "self", ".", "compute_loss", "(", "data", ")", "\n", "loss", "[", "'total'", "]", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "loss", "[", "'total'", "]", "=", "loss", "[", "'total'", "]", ".", "item", "(", ")", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.mgnet.training.Trainer.compute_loss": [[35, 50], ["training.Trainer.to_device", "training.Trainer.net", "training.Trainer.net.loss"], "methods", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.total3d.training.Trainer.to_device", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.modules.network.TOTAL3D.loss"], ["return", "loss", "\n", "\n", "", "def", "eval_loss_parser", "(", "self", ",", "loss_recorder", ")", ":", "\n", "        ", "'''\n        get the eval\n        :param loss_recorder: loss recorder for all losses.\n        :return:\n        '''", "\n", "return", "loss_recorder", "[", "'total'", "]", ".", "avg", "\n", "\n", "", "def", "compute_loss", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "''' Performs a training step.\n        '''", "\n", "raise", "NotImplementedError", "\n", "\n", "", "def", "eval_step", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.mgnet.dataloader.MGNet_Dataset.__init__": [[40, 42], ["models.datasets.PIX3D.__init__"], "methods", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.data_config.Config.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "mode", ")", ":", "\n", "        ", "super", "(", "MGNet_Dataset", ",", "self", ")", ".", "__init__", "(", "config", ",", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.mgnet.dataloader.MGNet_Dataset.__getitem__": [[43, 73], ["PIL.Image.fromarray", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "scipy.spatial.cKDTree", "scipy.spatial.cKDTree.query", "numpy.array", "open", "pickle.load", "numpy.random.choice", "data_transforms", "max"], "methods", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.CheckpointIO.load"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "file_path", "=", "self", ".", "split", "[", "index", "]", "\n", "with", "open", "(", "file_path", ",", "'rb'", ")", "as", "file", ":", "\n", "            ", "sequence", "=", "pickle", ".", "load", "(", "file", ")", "\n", "\n", "", "image", "=", "Image", ".", "fromarray", "(", "sequence", "[", "'img'", "]", ")", "\n", "class_id", "=", "sequence", "[", "'class_id'", "]", "\n", "gt_points", "=", "sequence", "[", "'gt_3dpoints'", "]", "\n", "\n", "data_transforms", "=", "data_transforms_crop", "if", "self", ".", "mode", "==", "'train'", "else", "data_transforms_nocrop", "\n", "\n", "cls_codes", "=", "torch", ".", "zeros", "(", "pix3d_n_classes", ")", "\n", "cls_codes", "[", "class_id", "]", "=", "1", "\n", "\n", "tree", "=", "cKDTree", "(", "gt_points", ")", "\n", "dists", ",", "indices", "=", "tree", ".", "query", "(", "gt_points", ",", "k", "=", "neighbors", ")", "\n", "densities", "=", "np", ".", "array", "(", "[", "max", "(", "dists", "[", "point_set", ",", "1", "]", ")", "**", "2", "for", "point_set", "in", "indices", "]", ")", "\n", "\n", "if", "self", ".", "mode", "==", "'train'", ":", "\n", "            ", "p_ids", "=", "np", ".", "random", ".", "choice", "(", "gt_points", ".", "shape", "[", "0", "]", ",", "num_samples_on_each_model", ",", "replace", "=", "False", ")", "\n", "gt_points", "=", "gt_points", "[", "p_ids", ",", ":", "]", "\n", "densities", "=", "densities", "[", "p_ids", "]", "\n", "\n", "", "sample", "=", "{", "'sequence_id'", ":", "sequence", "[", "'sample_id'", "]", ",", "\n", "'img'", ":", "data_transforms", "(", "image", ")", ",", "\n", "'cls'", ":", "cls_codes", ",", "\n", "'mesh_points'", ":", "gt_points", ",", "\n", "'densities'", ":", "densities", "}", "\n", "\n", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.mgnet.dataloader.recursive_convert_to_torch": [[74, 92], ["torch.is_tensor", "torch.is_tensor", "isinstance", "type", "torch.zeros().type", "torch.zeros().type", "torch.from_numpy", "torch.from_numpy", "torch.LongTensor", "torch.LongTensor", "isinstance", "torch.DoubleTensor", "torch.DoubleTensor", "isinstance", "torch.zeros", "torch.zeros", "isinstance", "dataloader.recursive_convert_to_torch", "dataloader.recursive_convert_to_torch"], "function", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.total3d.dataloader.recursive_convert_to_torch", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.total3d.dataloader.recursive_convert_to_torch"], ["", "", "def", "recursive_convert_to_torch", "(", "elem", ")", ":", "\n", "    ", "if", "torch", ".", "is_tensor", "(", "elem", ")", ":", "\n", "        ", "return", "elem", "\n", "", "elif", "type", "(", "elem", ")", ".", "__module__", "==", "'numpy'", ":", "\n", "        ", "if", "elem", ".", "size", "==", "0", ":", "\n", "            ", "return", "torch", ".", "zeros", "(", "elem", ".", "shape", ")", ".", "type", "(", "torch", ".", "DoubleTensor", ")", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "from_numpy", "(", "elem", ")", "\n", "", "", "elif", "isinstance", "(", "elem", ",", "int", ")", ":", "\n", "        ", "return", "torch", ".", "LongTensor", "(", "[", "elem", "]", ")", "\n", "", "elif", "isinstance", "(", "elem", ",", "float", ")", ":", "\n", "        ", "return", "torch", ".", "DoubleTensor", "(", "[", "elem", "]", ")", "\n", "", "elif", "isinstance", "(", "elem", ",", "collections", ".", "Mapping", ")", ":", "\n", "        ", "return", "{", "key", ":", "recursive_convert_to_torch", "(", "elem", "[", "key", "]", ")", "for", "key", "in", "elem", "}", "\n", "", "elif", "isinstance", "(", "elem", ",", "collections", ".", "Sequence", ")", ":", "\n", "        ", "return", "[", "recursive_convert_to_torch", "(", "samples", ")", "for", "samples", "in", "elem", "]", "\n", "", "else", ":", "\n", "        ", "return", "elem", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.mgnet.dataloader.collate_fn": [[93, 108], ["default_collate"], "function", ["None"], ["", "", "def", "collate_fn", "(", "batch", ")", ":", "\n", "    ", "\"\"\"\n    Data collater.\n\n    Assumes each instance is a dict.\n    Applies different collation rules for each field.\n    Args:\n        batches: List of loaded elements via Dataset.__getitem__\n    \"\"\"", "\n", "collated_batch", "=", "{", "}", "\n", "# iterate over keys", "\n", "for", "key", "in", "batch", "[", "0", "]", ":", "\n", "        ", "collated_batch", "[", "key", "]", "=", "default_collate", "(", "[", "elem", "[", "key", "]", "for", "elem", "in", "batch", "]", ")", "\n", "\n", "", "return", "collated_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.mgnet.dataloader.MGNet_dataloader": [[109, 116], ["torch.utils.data.DataLoader", "dataloader.MGNet_Dataset"], "function", ["None"], ["", "def", "MGNet_dataloader", "(", "config", ",", "mode", "=", "'train'", ")", ":", "\n", "    ", "dataloader", "=", "DataLoader", "(", "dataset", "=", "MGNet_Dataset", "(", "config", ",", "mode", ")", ",", "\n", "num_workers", "=", "config", "[", "'device'", "]", "[", "'num_workers'", "]", ",", "\n", "batch_size", "=", "config", "[", "mode", "]", "[", "'batch_size'", "]", ",", "\n", "shuffle", "=", "(", "mode", "==", "'train'", ")", ",", "\n", "collate_fn", "=", "collate_fn", ")", "\n", "return", "dataloader", "\n", "", ""]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.total3d.config.get_trainer": [[8, 10], ["training.Trainer"], "function", ["None"], ["def", "get_trainer", "(", "cfg", ",", "net", ",", "optimizer", ",", "device", "=", "None", ")", ":", "\n", "    ", "return", "Trainer", "(", "cfg", "=", "cfg", ",", "net", "=", "net", ",", "optimizer", "=", "optimizer", ",", "device", "=", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.total3d.config.get_tester": [[11, 13], ["testing.Tester"], "function", ["None"], ["", "def", "get_tester", "(", "cfg", ",", "net", ",", "device", "=", "None", ")", ":", "\n", "    ", "return", "Tester", "(", "cfg", "=", "cfg", ",", "net", "=", "net", ",", "device", "=", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.total3d.config.get_dataloader": [[14, 16], ["dataloader.Total3D_dataloader"], "function", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.total3d.dataloader.Total3D_dataloader"], ["", "def", "get_dataloader", "(", "config", ",", "mode", ")", ":", "\n", "    ", "return", "MGNet_dataloader", "(", "config", "=", "config", ",", "mode", "=", "mode", ")", "", "", ""]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.total3d.testing.Tester.__init__": [[21, 23], ["models.testing.BaseTester.__init__"], "methods", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.data_config.Config.__init__"], ["\n", "# camera orientation error", "\n", "raise", "NotImplementedError", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.total3d.testing.Tester.to_device": [[24, 100], ["data[].to", "[].float().to", "[].long().to", "[].float().to", "[].long().to", "[].float().to", "[].long().to", "[].float().to", "[].float().to", "[].float().to", "[].to", "[].float().to", "[].float().to", "[].float().to", "[].float().to", "[].long().to", "[].float().to", "[].long().to", "[].float().to", "torch.cat", "[].float().to", "[].float().to", "net_utils.libs.get_rotation_matrix_gt", "torch.zeros().to", "[].float().to", "[].float().to", "depth.float().to", "[].float", "[].long", "[].float", "[].long", "[].float", "[].long", "[].float", "[].float", "[].float", "[].float", "[].float", "[].float", "[].float", "[].long", "[].float", "[].long", "[].float", "torch.tensor", "torch.cumsum", "[].float", "[].float", "torch.zeros", "[].float", "[].float", "torch.pow", "depth.float", "range", "[].float().to.size", "[].float().to.size", "torch.argmax", "cls.item"], "methods", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.libs.get_rotation_matrix_gt"], ["\n", "\n", "\n", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.total3d.testing.Tester.get_metric_values": [[102, 192], ["net_utils.libs.get_layout_bdb_sunrgbd", "enumerate", "net_utils.libs.get_rotation_matix_result", "torch.stack", "net_utils.libs.get_bdb_evaluation", "net_utils.libs.get_bdb_2d_result", "enumerate", "numpy.mean", "torch.argmax", "models.eval_metrics.get_iou_cuboid", "layout_iou.append", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "int", "models.eval_metrics.get_iou_cuboid", "bdb2D_out[].cpu().numpy", "[].cpu().numpy", "net_utils.libs.get_iou", "nyu40class_ids.append", "IoU3D.append", "IoU2D.append", "enumerate", "lo_bdb3D_out[].cpu().numpy", "[].cpu().numpy", "net_utils.libs.get_corners_of_bb3d_no_index", "[].cpu().numpy", "os.path.join", "scipy.io.savemat", "[].cpu().tolist", "scipy.io.savemat", "scipy.io.savemat", "[].cpu().numpy", "[].cpu().numpy", "enumerate", "bdb2D_out[].cpu", "[].cpu", "str", "os.path.exists", "os.mkdir", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "libs.tools.write_obj", "lo_bdb3D_out[].cpu", "[].cpu", "[].cpu", "sequence_id.item", "[].cpu", "[].cpu", "[].cpu", "lo_bdb3D_out[].cpu().numpy", "cam_R_out[].cpu().numpy", "lo_bdb3D_out[].cpu", "cam_R_out[].cpu", "est_data[].transpose"], "methods", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.libs.get_layout_bdb_sunrgbd", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.libs.get_rotation_matix_result", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.libs.get_bdb_evaluation", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.libs.get_bdb_2d_result", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.models.eval_metrics.get_iou_cuboid", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.models.eval_metrics.get_iou_cuboid", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.libs.get_iou", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.libs.get_corners_of_bb3d_no_index", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.write_obj"], []], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.total3d.testing.Tester.test_step": [[193, 205], ["testing.Tester.to_device", "testing.Tester.net", "testing.Tester.get_metric_values"], "methods", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.total3d.training.Trainer.to_device", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.total3d.testing.Tester.get_metric_values"], []], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.total3d.testing.Tester.visualize_step": [[206, 210], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.total3d.training.Trainer.eval_step": [[14, 23], ["training.Trainer.compute_loss", "loss[].item"], "methods", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.total3d.training.Trainer.compute_loss"], ["\n", "", "def", "show_lr", "(", "self", ")", ":", "\n", "        ", "'''\n        display current learning rates\n        :return:\n        '''", "\n", "lrs", "=", "[", "self", ".", "optimizer", ".", "param_groups", "[", "i", "]", "[", "'lr'", "]", "for", "i", "in", "range", "(", "len", "(", "self", ".", "optimizer", ".", "param_groups", ")", ")", "]", "\n", "self", ".", "cfg", ".", "log_string", "(", "'Current learning rates are: '", "+", "str", "(", "lrs", ")", "+", "'.'", ")", "\n", "\n", "", "def", "train_step", "(", "self", ",", "data", ")", ":", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.total3d.training.Trainer.visualize_step": [[24, 28], ["None"], "methods", ["None"], ["        ", "'''\n        performs a step training\n        :param data (dict): data dictionary\n        :return:\n        '''", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.total3d.training.Trainer.to_device": [[29, 115], ["data[].to", "[].float().to", "[].long().to", "[].float().to", "[].long().to", "[].float().to", "[].long().to", "[].float().to", "[].float().to", "[].float().to", "[].to", "[].float().to", "[].float().to", "[].float().to", "[].float().to", "[].long().to", "[].float().to", "[].long().to", "[].float().to", "torch.cat", "[].float().to", "[].float().to", "net_utils.libs.get_rotation_matrix_gt", "net_utils.libs.get_mask_status", "torch.zeros().to", "[].float().to", "[].float().to", "depth.float().to", "[].float", "[].long", "[].float", "[].long", "[].float", "[].long", "[].float", "[].float", "[].float", "[].float", "[].float", "[].float", "[].float", "[].long", "[].float", "[].long", "[].float", "torch.tensor", "torch.cumsum", "[].float", "[].float", "torch.zeros", "net_utils.libs.get_mask_status.nonzero", "net_utils.libs.get_mask_status.nonzero", "[].float", "[].float", "torch.pow", "depth.float", "range", "[].float().to.size", "[].float().to.size", "torch.argmax", "cls.item"], "methods", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.libs.get_rotation_matrix_gt", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.libs.get_mask_status"], ["self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", "=", "self", ".", "compute_loss", "(", "data", ")", "\n", "loss", "[", "'total'", "]", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "loss", "[", "'total'", "]", "=", "loss", "[", "'total'", "]", ".", "item", "(", ")", "\n", "return", "loss", "\n", "\n", "", "def", "eval_loss_parser", "(", "self", ",", "loss_recorder", ")", ":", "\n", "        ", "'''\n        get the eval\n        :param loss_recorder: loss recorder for all losses.\n        :return:\n        '''", "\n", "return", "loss_recorder", "[", "'total'", "]", ".", "avg", "\n", "\n", "", "def", "compute_loss", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "''' Performs a training step.\n        '''", "\n", "raise", "NotImplementedError", "\n", "\n", "", "def", "eval_step", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "''' Performs an evaluation step.\n        '''", "\n", "raise", "NotImplementedError", "\n", "\n", "", "def", "visualize_step", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "''' Performs a visualization step.\n        '''", "\n", "raise", "NotImplementedError", "", "", "", ""]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.total3d.training.Trainer.compute_loss": [[116, 131], ["training.Trainer.to_device", "training.Trainer.net", "training.Trainer.net.loss"], "methods", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.total3d.training.Trainer.to_device", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.modules.network.TOTAL3D.loss"], []], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.total3d.dataloader.Total3D_Dataset.__init__": [[41, 43], ["models.datasets.SUNRGBD.__init__"], "methods", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.data_config.Config.__init__"], ["        ", "super", "(", "MGNet_Dataset", ",", "self", ")", ".", "__init__", "(", "config", ",", "mode", ")", "\n", "\n", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.total3d.dataloader.Total3D_Dataset.__getitem__": [[44, 97], ["PIL.Image.fromarray", "PIL.Image.fromarray", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.from_numpy().unsqueeze().float", "torch.from_numpy().unsqueeze().float", "torch.from_numpy().unsqueeze().float", "torch.from_numpy().unsqueeze().float", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.zeros.view", "torch.zeros.view", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "data_transforms_nocrop", "open", "pickle.load", "len", "data_transforms_nocrop.crop", "data_transforms", "patch.append", "pil2tensor().squeeze", "math.log", "math.log", "enumerate", "enumerate", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "len", "len", "range", "pil2tensor", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "math.log", "len", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.CheckpointIO.load"], ["        ", "file_path", "=", "self", ".", "split", "[", "index", "]", "\n", "with", "open", "(", "file_path", ",", "'rb'", ")", "as", "file", ":", "\n", "            ", "sequence", "=", "pickle", ".", "load", "(", "file", ")", "\n", "\n", "", "image", "=", "Image", ".", "fromarray", "(", "sequence", "[", "'img'", "]", ")", "\n", "class_id", "=", "sequence", "[", "'class_id'", "]", "\n", "gt_points", "=", "sequence", "[", "'gt_3dpoints'", "]", "\n", "\n", "data_transforms", "=", "data_transforms_crop", "if", "self", ".", "mode", "==", "'train'", "else", "data_transforms_nocrop", "\n", "\n", "cls_codes", "=", "torch", ".", "zeros", "(", "pix3d_n_classes", ")", "\n", "cls_codes", "[", "class_id", "]", "=", "1", "\n", "\n", "tree", "=", "cKDTree", "(", "gt_points", ")", "\n", "dists", ",", "indices", "=", "tree", ".", "query", "(", "gt_points", ",", "k", "=", "neighbors", ")", "\n", "densities", "=", "np", ".", "array", "(", "[", "max", "(", "dists", "[", "point_set", ",", "1", "]", ")", "**", "2", "for", "point_set", "in", "indices", "]", ")", "\n", "\n", "if", "self", ".", "mode", "==", "'train'", ":", "\n", "            ", "p_ids", "=", "np", ".", "random", ".", "choice", "(", "gt_points", ".", "shape", "[", "0", "]", ",", "num_samples_on_each_model", ",", "replace", "=", "False", ")", "\n", "gt_points", "=", "gt_points", "[", "p_ids", ",", ":", "]", "\n", "densities", "=", "densities", "[", "p_ids", "]", "\n", "\n", "", "sample", "=", "{", "'sequence_id'", ":", "sequence", "[", "'sample_id'", "]", ",", "\n", "'img'", ":", "data_transforms", "(", "image", ")", ",", "\n", "'cls'", ":", "cls_codes", ",", "\n", "'mesh_points'", ":", "gt_points", ",", "\n", "'densities'", ":", "densities", "}", "\n", "\n", "return", "sample", "\n", "\n", "", "", "def", "recursive_convert_to_torch", "(", "elem", ")", ":", "\n", "    ", "if", "torch", ".", "is_tensor", "(", "elem", ")", ":", "\n", "        ", "return", "elem", "\n", "", "elif", "type", "(", "elem", ")", ".", "__module__", "==", "'numpy'", ":", "\n", "        ", "if", "elem", ".", "size", "==", "0", ":", "\n", "            ", "return", "torch", ".", "zeros", "(", "elem", ".", "shape", ")", ".", "type", "(", "torch", ".", "DoubleTensor", ")", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "from_numpy", "(", "elem", ")", "\n", "", "", "elif", "isinstance", "(", "elem", ",", "int", ")", ":", "\n", "        ", "return", "torch", ".", "LongTensor", "(", "[", "elem", "]", ")", "\n", "", "elif", "isinstance", "(", "elem", ",", "float", ")", ":", "\n", "        ", "return", "torch", ".", "DoubleTensor", "(", "[", "elem", "]", ")", "\n", "", "elif", "isinstance", "(", "elem", ",", "collections", ".", "Mapping", ")", ":", "\n", "        ", "return", "{", "key", ":", "recursive_convert_to_torch", "(", "elem", "[", "key", "]", ")", "for", "key", "in", "elem", "}", "\n", "", "elif", "isinstance", "(", "elem", ",", "collections", ".", "Sequence", ")", ":", "\n", "        ", "return", "[", "recursive_convert_to_torch", "(", "samples", ")", "for", "samples", "in", "elem", "]", "\n", "", "else", ":", "\n", "        ", "return", "elem", "\n", "\n", "", "", "def", "collate_fn", "(", "batch", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.total3d.dataloader.recursive_convert_to_torch": [[98, 116], ["torch.is_tensor", "torch.is_tensor", "isinstance", "type", "torch.zeros().type", "torch.zeros().type", "torch.from_numpy", "torch.from_numpy", "torch.LongTensor", "torch.LongTensor", "isinstance", "torch.DoubleTensor", "torch.DoubleTensor", "isinstance", "torch.zeros", "torch.zeros", "isinstance", "dataloader.recursive_convert_to_torch", "dataloader.recursive_convert_to_torch"], "function", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.total3d.dataloader.recursive_convert_to_torch", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.total3d.dataloader.recursive_convert_to_torch"], ["\n", "collated_batch", "=", "{", "}", "\n", "# iterate over keys", "\n", "for", "key", "in", "batch", "[", "0", "]", ":", "\n", "        ", "collated_batch", "[", "key", "]", "=", "default_collate", "(", "[", "elem", "[", "key", "]", "for", "elem", "in", "batch", "]", ")", "\n", "\n", "", "return", "collated_batch", "\n", "\n", "", "def", "MGNet_dataloader", "(", "config", ",", "mode", "=", "'train'", ")", ":", "\n", "    ", "dataloader", "=", "DataLoader", "(", "dataset", "=", "MGNet_Dataset", "(", "config", ",", "mode", ")", ",", "\n", "num_workers", "=", "config", "[", "'device'", "]", "[", "'num_workers'", "]", ",", "\n", "batch_size", "=", "config", "[", "mode", "]", "[", "'batch_size'", "]", ",", "\n", "shuffle", "=", "(", "mode", "==", "'train'", ")", ",", "\n", "collate_fn", "=", "collate_fn", ")", "\n", "return", "dataloader", "\n", "", ""]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.total3d.dataloader.collate_fn": [[117, 147], ["torch.tensor", "torch.tensor", "dict", "default_collate", "sum", "sum", "range", "torch.cat", "torch.cat", "len", "dataloader.recursive_convert_to_torch"], "function", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.total3d.dataloader.recursive_convert_to_torch"], []], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.total3d.dataloader.Total3D_dataloader": [[148, 155], ["torch.utils.data.DataLoader", "dataloader.Total3D_Dataset"], "function", ["None"], []], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.sample_pnts_from_obj": [[22, 93], ["data.keys", "numpy.array", "tools.calculate_face_area", "numpy.sum", "numpy.random.choice", "numpy.unique", "zip", "numpy.vstack", "enumerate", "numpy.vstack", "len", "numpy.diff", "all_pnts[].T.dot", "new_pnts.append", "len", "int", "numpy.stack", "np.vstack.reshape", "numpy.vstack", "new_pnts.append", "int", "numpy.sort", "[].T.dot", "numpy.hstack", "int", "numpy.meshgrid", "np.vstack.sum", "all_pnts[].T.dot", "[].T.dot", "numpy.hstack", "numpy.vstack", "int", "numpy.math.factorial", "int", "item.split", "item.split", "numpy.zeros", "numpy.random.uniform", "numpy.ones", "item.split", "numpy.linspace", "item.split", "range", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "len"], "function", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.calculate_face_area", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.dot", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.dot", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.dot", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.dot"], ["def", "sample_pnts_from_obj", "(", "data", ",", "n_pnts", "=", "5000", ",", "mode", "=", "'uniform'", ")", ":", "\n", "# sample points on each object mesh.", "\n", "\n", "    ", "flags", "=", "data", ".", "keys", "(", ")", "\n", "\n", "all_pnts", "=", "data", "[", "'v'", "]", "[", ":", ",", ":", "3", "]", "\n", "\n", "area_list", "=", "np", ".", "array", "(", "calculate_face_area", "(", "data", ")", ")", "\n", "distribution", "=", "area_list", "/", "np", ".", "sum", "(", "area_list", ")", "\n", "\n", "# sample points the probability depends on the face area", "\n", "new_pnts", "=", "[", "]", "\n", "if", "mode", "==", "'random'", ":", "\n", "\n", "        ", "random_face_ids", "=", "np", ".", "random", ".", "choice", "(", "len", "(", "data", "[", "'f'", "]", ")", ",", "n_pnts", ",", "replace", "=", "True", ",", "p", "=", "distribution", ")", "\n", "random_face_ids", ",", "sample_counts", "=", "np", ".", "unique", "(", "random_face_ids", ",", "return_counts", "=", "True", ")", "\n", "\n", "for", "face_id", ",", "sample_count", "in", "zip", "(", "random_face_ids", ",", "sample_counts", ")", ":", "\n", "\n", "            ", "face", "=", "data", "[", "'f'", "]", "[", "face_id", "]", "\n", "\n", "vid_in_face", "=", "[", "int", "(", "item", ".", "split", "(", "'/'", ")", "[", "0", "]", ")", "for", "item", "in", "face", "]", "\n", "\n", "weights", "=", "np", ".", "diff", "(", "np", ".", "sort", "(", "np", ".", "vstack", "(", "\n", "[", "np", ".", "zeros", "(", "(", "1", ",", "sample_count", ")", ")", ",", "np", ".", "random", ".", "uniform", "(", "0", ",", "1", ",", "size", "=", "(", "len", "(", "vid_in_face", ")", "-", "1", ",", "sample_count", ")", ")", ",", "\n", "np", ".", "ones", "(", "(", "1", ",", "sample_count", ")", ")", "]", ")", ",", "axis", "=", "0", ")", ",", "axis", "=", "0", ")", "\n", "\n", "new_pnt", "=", "all_pnts", "[", "np", ".", "array", "(", "vid_in_face", ")", "-", "1", "]", ".", "T", ".", "dot", "(", "weights", ")", "\n", "\n", "if", "'vn'", "in", "flags", ":", "\n", "                ", "nid_in_face", "=", "[", "int", "(", "item", ".", "split", "(", "'/'", ")", "[", "2", "]", ")", "for", "item", "in", "face", "]", "\n", "new_normal", "=", "data", "[", "'vn'", "]", "[", "np", ".", "array", "(", "nid_in_face", ")", "-", "1", "]", ".", "T", ".", "dot", "(", "weights", ")", "\n", "new_pnt", "=", "np", ".", "hstack", "(", "[", "new_pnt", ",", "new_normal", "]", ")", "\n", "\n", "\n", "", "new_pnts", ".", "append", "(", "new_pnt", ".", "T", ")", "\n", "\n", "", "random_pnts", "=", "np", ".", "vstack", "(", "new_pnts", ")", "\n", "\n", "", "else", ":", "\n", "\n", "        ", "for", "face_idx", ",", "face", "in", "enumerate", "(", "data", "[", "'f'", "]", ")", ":", "\n", "            ", "vid_in_face", "=", "[", "int", "(", "item", ".", "split", "(", "'/'", ")", "[", "0", "]", ")", "for", "item", "in", "face", "]", "\n", "\n", "n_pnts_on_face", "=", "distribution", "[", "face_idx", "]", "*", "n_pnts", "\n", "\n", "if", "n_pnts_on_face", "<", "1", ":", "\n", "                ", "continue", "\n", "\n", "", "dim", "=", "len", "(", "vid_in_face", ")", "\n", "npnts_dim", "=", "(", "np", ".", "math", ".", "factorial", "(", "dim", "-", "1", ")", "*", "n_pnts_on_face", ")", "**", "(", "1", "/", "(", "dim", "-", "1", ")", ")", "\n", "npnts_dim", "=", "int", "(", "npnts_dim", ")", "\n", "\n", "weights", "=", "np", ".", "stack", "(", "np", ".", "meshgrid", "(", "*", "[", "np", ".", "linspace", "(", "0", ",", "1", ",", "npnts_dim", ")", "for", "_", "in", "range", "(", "dim", "-", "1", ")", "]", ")", ",", "0", ")", "\n", "weights", "=", "weights", ".", "reshape", "(", "dim", "-", "1", ",", "-", "1", ")", "\n", "last_column", "=", "1", "-", "weights", ".", "sum", "(", "0", ")", "\n", "weights", "=", "np", ".", "vstack", "(", "[", "weights", ",", "last_column", "]", ")", "\n", "weights", "=", "weights", "[", ":", ",", "last_column", ">=", "0", "]", "\n", "\n", "new_pnt", "=", "(", "all_pnts", "[", "np", ".", "array", "(", "vid_in_face", ")", "-", "1", "]", ".", "T", ".", "dot", "(", "weights", ")", ")", ".", "T", "\n", "\n", "if", "'vn'", "in", "flags", ":", "\n", "                ", "nid_in_face", "=", "[", "int", "(", "item", ".", "split", "(", "'/'", ")", "[", "2", "]", ")", "for", "item", "in", "face", "]", "\n", "new_normal", "=", "data", "[", "'vn'", "]", "[", "np", ".", "array", "(", "nid_in_face", ")", "-", "1", "]", ".", "T", ".", "dot", "(", "weights", ")", "\n", "new_pnt", "=", "np", ".", "hstack", "(", "[", "new_pnt", ",", "new_normal", "]", ")", "\n", "\n", "", "new_pnts", ".", "append", "(", "new_pnt", ")", "\n", "\n", "", "random_pnts", "=", "np", ".", "vstack", "(", "new_pnts", ")", "\n", "\n", "", "return", "random_pnts", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.normalize_to_unit_square": [[94, 102], ["point_shapenet.max", "points.max", "points.min"], "function", ["None"], ["", "def", "normalize_to_unit_square", "(", "points", ")", ":", "\n", "    ", "centre", "=", "(", "points", ".", "max", "(", "0", ")", "+", "points", ".", "min", "(", "0", ")", ")", "/", "2.", "\n", "point_shapenet", "=", "points", "-", "centre", "\n", "\n", "scale", "=", "point_shapenet", ".", "max", "(", ")", "\n", "point_shapenet", "=", "point_shapenet", "/", "scale", "\n", "\n", "return", "point_shapenet", ",", "centre", ",", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.read_obj": [[103, 129], ["open", "open.close", "re.split", "data.keys", "numpy.array().astype", "data.keys", "numpy.array().astype", "data.keys", "numpy.array().astype", "re.split.strip", "data[].append", "numpy.array", "numpy.array", "numpy.array"], "function", ["None"], ["", "def", "read_obj", "(", "model_path", ",", "flags", "=", "(", "'v'", ")", ")", ":", "\n", "    ", "fid", "=", "open", "(", "model_path", ",", "'r'", ")", "\n", "\n", "data", "=", "{", "}", "\n", "\n", "for", "head", "in", "flags", ":", "\n", "        ", "data", "[", "head", "]", "=", "[", "]", "\n", "\n", "", "for", "line", "in", "fid", ":", "\n", "# line = line.strip().split(' ')", "\n", "        ", "line", "=", "re", ".", "split", "(", "'\\s+'", ",", "line", ".", "strip", "(", ")", ")", "\n", "if", "line", "[", "0", "]", "in", "flags", ":", "\n", "            ", "data", "[", "line", "[", "0", "]", "]", ".", "append", "(", "line", "[", "1", ":", "]", ")", "\n", "\n", "", "", "fid", ".", "close", "(", ")", "\n", "\n", "if", "'v'", "in", "data", ".", "keys", "(", ")", ":", "\n", "        ", "data", "[", "'v'", "]", "=", "np", ".", "array", "(", "data", "[", "'v'", "]", ")", ".", "astype", "(", "np", ".", "float", ")", "\n", "\n", "", "if", "'vt'", "in", "data", ".", "keys", "(", ")", ":", "\n", "        ", "data", "[", "'vt'", "]", "=", "np", ".", "array", "(", "data", "[", "'vt'", "]", ")", ".", "astype", "(", "np", ".", "float", ")", "\n", "\n", "", "if", "'vn'", "in", "data", ".", "keys", "(", ")", ":", "\n", "        ", "data", "[", "'vn'", "]", "=", "np", ".", "array", "(", "data", "[", "'vn'", "]", ")", ".", "astype", "(", "np", ".", "float", ")", "\n", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.write_obj": [[130, 138], ["open", "file.write", "file.write", "tuple", "tuple", "len", "len"], "function", ["None"], ["", "def", "write_obj", "(", "objfile", ",", "data", ")", ":", "\n", "\n", "    ", "with", "open", "(", "objfile", ",", "'w+'", ")", "as", "file", ":", "\n", "        ", "for", "item", "in", "data", "[", "'v'", "]", ":", "\n", "            ", "file", ".", "write", "(", "'v'", "+", "' %f'", "*", "len", "(", "item", ")", "%", "tuple", "(", "item", ")", "+", "'\\n'", ")", "\n", "\n", "", "for", "item", "in", "data", "[", "'f'", "]", ":", "\n", "            ", "file", ".", "write", "(", "'f'", "+", "' %s'", "*", "len", "(", "item", ")", "%", "tuple", "(", "item", ")", "+", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.read_pkl": [[140, 144], ["open", "pickle.load"], "function", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.CheckpointIO.load"], ["", "", "", "def", "read_pkl", "(", "pkl_file", ")", ":", "\n", "    ", "with", "open", "(", "pkl_file", ",", "'rb'", ")", "as", "file", ":", "\n", "        ", "data", "=", "pickle", ".", "load", "(", "file", ")", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.read_json": [[145, 149], ["open", "json.load"], "function", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.CheckpointIO.load"], ["", "def", "read_json", "(", "json_file", ")", ":", "\n", "    ", "with", "open", "(", "json_file", ",", "'r'", ")", "as", "file", ":", "\n", "        ", "json_data", "=", "json", ".", "load", "(", "file", ")", "\n", "", "return", "json_data", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.write_split": [[150, 159], ["numpy.random.choice", "numpy.setdiff1d", "dict", "np.random.choice.tolist", "np.setdiff1d.tolist", "int", "range", "open", "json.dump"], "function", ["None"], ["", "def", "write_split", "(", "sample_num", ",", "split_file", ",", "train_ratio", "=", "0.8", ")", ":", "\n", "    ", "train_ids", "=", "np", ".", "random", ".", "choice", "(", "sample_num", ",", "int", "(", "sample_num", "*", "train_ratio", ")", ",", "replace", "=", "False", ")", "\n", "test_ids", "=", "np", ".", "setdiff1d", "(", "range", "(", "sample_num", ")", ",", "train_ids", ")", "\n", "split_data", "=", "dict", "(", ")", "\n", "split_data", "[", "u'train_ids'", "]", "=", "train_ids", ".", "tolist", "(", ")", "\n", "split_data", "[", "u'test_ids'", "]", "=", "test_ids", ".", "tolist", "(", ")", "\n", "\n", "with", "open", "(", "split_file", ",", "'w'", ")", "as", "file", ":", "\n", "        ", "json", ".", "dump", "(", "split_data", ",", "file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.proj_pnt_to_img": [[160, 214], ["numpy.linalg.norm", "numpy.linalg.norm", "numpy.cross", "numpy.linalg.norm", "numpy.array", "numpy.array", "p_cam.dot.dot", "np.array.dot", "pixels[].T.astype", "numpy.zeros", "np.zeros.astype", "numpy.vstack", "numpy.where", "scipy.spatial.ConvexHull", "cv2.fillPoly", "numpy.tan", "numpy.tan", "numpy.array", "cv2.fillConvexPoly"], "function", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.cross", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.dot", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.dot"], ["", "", "def", "proj_pnt_to_img", "(", "cam_paras", ",", "point", ",", "faces", ",", "im_size", ",", "convex_hull", "=", "False", ")", ":", "\n", "    ", "'''\n    Project points from world system to image plane.\n    :param cam_paras: a list of [camera origin (3-d), toward vec (3-d), up vec (3-d), fov_x, fov_y, quality_value]\n    :param point: Nx3 points.\n    :param faces: faces related to points.\n    :param im_size: [width, height]\n    :param convex_hull: Only use convex instead of rendering.\n    :return: Mask image of object on the image.\n    '''", "\n", "if", "point", ".", "shape", "[", "1", "]", "==", "4", ":", "\n", "        ", "point", "=", "point", "[", ":", ",", ":", "3", "]", "\n", "\n", "", "ori_pnt", "=", "cam_paras", "[", ":", "3", "]", "\n", "toward", "=", "cam_paras", "[", "3", ":", "6", "]", "# x-axis", "\n", "toward", "/=", "np", ".", "linalg", ".", "norm", "(", "toward", ")", "\n", "up", "=", "cam_paras", "[", "6", ":", "9", "]", "# y-axis", "\n", "up", "/=", "np", ".", "linalg", ".", "norm", "(", "up", ")", "\n", "right", "=", "np", ".", "cross", "(", "toward", ",", "up", ")", "# z-axis", "\n", "right", "/=", "np", ".", "linalg", ".", "norm", "(", "right", ")", "\n", "width", ",", "height", "=", "im_size", "\n", "foc_w", "=", "width", "/", "(", "2.", "*", "np", ".", "tan", "(", "cam_paras", "[", "9", "]", ")", ")", "\n", "foc_h", "=", "height", "/", "(", "2.", "*", "np", ".", "tan", "(", "cam_paras", "[", "10", "]", ")", ")", "\n", "K", "=", "np", ".", "array", "(", "[", "[", "foc_w", ",", "0.", ",", "(", "width", "-", "1", ")", "/", "2.", "]", ",", "[", "0", ",", "foc_h", ",", "(", "height", "-", "1", ")", "/", "2.", "]", ",", "[", "0.", ",", "0.", ",", "1.", "]", "]", ")", "\n", "\n", "R", "=", "np", ".", "vstack", "(", "[", "toward", ",", "up", ",", "right", "]", ")", ".", "T", "# columns respectively corresponds to toward, up, right vectors.", "\n", "p_cam", "=", "(", "point", "-", "ori_pnt", ")", ".", "dot", "(", "R", ")", "\n", "\n", "# convert to traditional image coordinate system", "\n", "T_cam", "=", "np", ".", "array", "(", "[", "[", "0.", ",", "0.", ",", "1.", "]", ",", "[", "0.", ",", "-", "1.", ",", "0.", "]", ",", "[", "1.", ",", "0.", ",", "0.", "]", "]", ")", "\n", "p_cam", "=", "p_cam", ".", "dot", "(", "T_cam", ".", "T", ")", "\n", "\n", "# delete those points whose depth value is non-positive.", "\n", "invalid_ids", "=", "np", ".", "where", "(", "p_cam", "[", ":", ",", "2", "]", "<=", "0", ")", "[", "0", "]", "\n", "\n", "p_cam", "[", "invalid_ids", ",", "2", "]", "=", "0.0001", "\n", "\n", "p_cam_h", "=", "p_cam", "/", "p_cam", "[", ":", ",", "2", "]", "[", ":", ",", "None", "]", "\n", "pixels", "=", "K", ".", "dot", "(", "p_cam_h", ".", "T", ")", "\n", "\n", "pixels", "=", "pixels", "[", ":", "2", ",", ":", "]", ".", "T", ".", "astype", "(", "np", ".", "int", ")", "\n", "\n", "new_image", "=", "np", ".", "zeros", "(", "[", "height", ",", "width", "]", ",", "np", ".", "uint8", ")", "\n", "if", "convex_hull", ":", "\n", "        ", "chull", "=", "ConvexHull", "(", "pixels", ")", "\n", "pixel_polygon", "=", "pixels", "[", "chull", ".", "vertices", ",", ":", "]", "\n", "cv2", ".", "fillPoly", "(", "new_image", ",", "[", "pixel_polygon", "]", ",", "255", ")", "\n", "", "else", ":", "\n", "        ", "polys", "=", "[", "np", ".", "array", "(", "[", "pixels", "[", "index", "-", "1", "]", "for", "index", "in", "face", "]", ")", "for", "face", "in", "faces", "]", "\n", "# cv2.fillPoly(new_image, polys, 255)", "\n", "for", "poly", "in", "polys", ":", "\n", "            ", "cv2", ".", "fillConvexPoly", "(", "new_image", ",", "poly", ",", "255", ")", "\n", "\n", "", "", "return", "new_image", ".", "astype", "(", "np", ".", "bool", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.cvt2nyuclass_map": [[215, 230], ["numpy.unique", "numpy.zeros_like"], "function", ["None"], ["", "def", "cvt2nyuclass_map", "(", "class_map", ",", "nyuclass_mapping", ")", ":", "\n", "    ", "'''\n    convert suncg classes in semantic map to nyu classes\n    :param class_map: semantic segmentation map with suncg classes.\n    :return nyu_class_map: semantic segmentation map with nyu40 classes.\n    '''", "\n", "\n", "old_classes", "=", "np", ".", "unique", "(", "class_map", ")", "\n", "\n", "nyu_class_map", "=", "np", ".", "zeros_like", "(", "class_map", ")", "\n", "\n", "for", "class_id", "in", "old_classes", ":", "\n", "        ", "nyu_class_map", "[", "class_map", "==", "class_id", "]", "=", "nyuclass_mapping", "[", "nyuclass_mapping", "[", ":", ",", "0", "]", "==", "class_id", ",", "1", "]", "\n", "\n", "", "return", "nyu_class_map", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.get_inst_classes": [[231, 240], ["numpy.unique", "dict", "numpy.unique", "counts.argmax"], "function", ["None"], ["", "def", "get_inst_classes", "(", "inst_map", ",", "cls_map", ")", ":", "\n", "# get the class id for each instance", "\n", "    ", "instance_ids", "=", "np", ".", "unique", "(", "inst_map", ")", "\n", "class_ids", "=", "dict", "(", ")", "\n", "for", "inst_id", "in", "instance_ids", ":", "\n", "        ", "classes", ",", "counts", "=", "np", ".", "unique", "(", "cls_map", "[", "inst_map", "==", "inst_id", "]", ",", "return_counts", "=", "True", ")", "\n", "class_ids", "[", "inst_id", "]", "=", "classes", "[", "counts", ".", "argmax", "(", ")", "]", "\n", "\n", "", "return", "class_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.yaw_pitch_roll_from_R": [[241, 254], ["numpy.arctan", "numpy.arctan", "numpy.arctan", "numpy.sqrt"], "function", ["None"], ["", "def", "yaw_pitch_roll_from_R", "(", "cam_R", ")", ":", "\n", "    ", "'''\n    get the yaw, pitch, roll angle from the camera rotation matrix.\n    :param cam_R: Camera orientation. R:=[v1, v2, v3], the three column vectors respectively denote the toward, up,\n    right vector relative to the world system.\n    Hence, the R = R_y(yaw)*R_z(pitch)*R_x(roll).\n    :return: yaw, pitch, roll angles.\n    '''", "\n", "yaw", "=", "np", ".", "arctan", "(", "-", "cam_R", "[", "2", "]", "[", "0", "]", "/", "cam_R", "[", "0", "]", "[", "0", "]", ")", "\n", "pitch", "=", "np", ".", "arctan", "(", "cam_R", "[", "1", "]", "[", "0", "]", "/", "np", ".", "sqrt", "(", "cam_R", "[", "0", "]", "[", "0", "]", "**", "2", "+", "cam_R", "[", "2", "]", "[", "0", "]", "**", "2", ")", ")", "\n", "roll", "=", "np", ".", "arctan", "(", "-", "cam_R", "[", "1", "]", "[", "2", "]", "/", "cam_R", "[", "1", "]", "[", "1", "]", ")", "\n", "\n", "return", "yaw", ",", "pitch", ",", "roll", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.R_from_yaw_pitch_roll": [[255, 274], ["numpy.zeros", "numpy.sin", "numpy.cos", "numpy.cos", "numpy.cos", "numpy.cos", "numpy.sin", "numpy.sin", "numpy.sin", "numpy.sin", "numpy.sin", "numpy.cos", "numpy.sin", "numpy.sin", "numpy.cos", "numpy.cos", "numpy.cos", "numpy.sin", "numpy.sin", "numpy.cos", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.cos", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin", "numpy.sin", "numpy.sin"], "function", ["None"], ["", "def", "R_from_yaw_pitch_roll", "(", "yaw", ",", "pitch", ",", "roll", ")", ":", "\n", "    ", "'''\n    Retrieve the camera rotation from yaw, pitch, roll angles.\n    Camera orientation. R:=[v1, v2, v3], the three column vectors respectively denote the toward, up,\n    right vector relative to the world system.\n\n    Hence, the R = R_y(yaw)*R_z(pitch)*R_x(roll).\n    '''", "\n", "R", "=", "np", ".", "zeros", "(", "(", "3", ",", "3", ")", ")", "\n", "R", "[", "0", ",", "0", "]", "=", "np", ".", "cos", "(", "yaw", ")", "*", "np", ".", "cos", "(", "pitch", ")", "\n", "R", "[", "0", ",", "1", "]", "=", "np", ".", "sin", "(", "yaw", ")", "*", "np", ".", "sin", "(", "roll", ")", "-", "np", ".", "cos", "(", "yaw", ")", "*", "np", ".", "cos", "(", "roll", ")", "*", "np", ".", "sin", "(", "pitch", ")", "\n", "R", "[", "0", ",", "2", "]", "=", "np", ".", "cos", "(", "roll", ")", "*", "np", ".", "sin", "(", "yaw", ")", "+", "np", ".", "cos", "(", "yaw", ")", "*", "np", ".", "sin", "(", "pitch", ")", "*", "np", ".", "sin", "(", "roll", ")", "\n", "R", "[", "1", ",", "0", "]", "=", "np", ".", "sin", "(", "pitch", ")", "\n", "R", "[", "1", ",", "1", "]", "=", "np", ".", "cos", "(", "pitch", ")", "*", "np", ".", "cos", "(", "roll", ")", "\n", "R", "[", "1", ",", "2", "]", "=", "-", "np", ".", "cos", "(", "pitch", ")", "*", "np", ".", "sin", "(", "roll", ")", "\n", "R", "[", "2", ",", "0", "]", "=", "-", "np", ".", "cos", "(", "pitch", ")", "*", "np", ".", "sin", "(", "yaw", ")", "\n", "R", "[", "2", ",", "1", "]", "=", "np", ".", "cos", "(", "yaw", ")", "*", "np", ".", "sin", "(", "roll", ")", "+", "np", ".", "cos", "(", "roll", ")", "*", "np", ".", "sin", "(", "yaw", ")", "*", "np", ".", "sin", "(", "pitch", ")", "\n", "R", "[", "2", ",", "2", "]", "=", "np", ".", "cos", "(", "yaw", ")", "*", "np", ".", "cos", "(", "roll", ")", "-", "np", ".", "sin", "(", "yaw", ")", "*", "np", ".", "sin", "(", "pitch", ")", "*", "np", ".", "sin", "(", "roll", ")", "\n", "return", "R", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.normalize_point": [[275, 280], ["numpy.linalg.norm"], "function", ["None"], ["", "def", "normalize_point", "(", "v", ")", ":", "\n", "    ", "norm", "=", "np", ".", "linalg", ".", "norm", "(", "v", ")", "\n", "if", "norm", "==", "0", ":", "\n", "       ", "return", "v", "\n", "", "return", "v", "/", "norm", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.get_world_R": [[281, 298], ["copy.deepcopy", "tools.normalize_point", "numpy.array", "numpy.cross", "numpy.vstack"], "function", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.normalize_point", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.cross"], ["", "def", "get_world_R", "(", "cam_R", ")", ":", "\n", "    ", "'''\n    set a world system from camera matrix\n    :param cam_R:\n    :return:\n    '''", "\n", "toward_vec", "=", "deepcopy", "(", "cam_R", "[", ":", ",", "0", "]", ")", "\n", "toward_vec", "[", "1", "]", "=", "0.", "\n", "toward_vec", "=", "normalize_point", "(", "toward_vec", ")", "\n", "up_vec", "=", "np", ".", "array", "(", "[", "0.", ",", "1.", ",", "0.", "]", ")", "\n", "right_vec", "=", "np", ".", "cross", "(", "toward_vec", ",", "up_vec", ")", "\n", "\n", "world_R", "=", "np", ".", "vstack", "(", "[", "toward_vec", ",", "up_vec", ",", "right_vec", "]", ")", ".", "T", "\n", "# yaw, _, _ = yaw_pitch_roll_from_R(cam_R)", "\n", "# world_R = R_from_yaw_pitch_roll(yaw, 0., 0.)", "\n", "\n", "return", "world_R", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.bin_cls_reg": [[299, 318], ["dist.index", "float", "min", "float", "float", "abs", "float", "float"], "function", ["None"], ["", "def", "bin_cls_reg", "(", "bins", ",", "loc", ")", ":", "\n", "    ", "'''\n    Given bins and value, compute where the value locates and the distance to the center.\n\n    :param bins: list\n    The bins, eg. [[-x, 0], [0, x]]\n    :param loc: float\n    The location\n    :return cls: int, bin index.\n    indicates which bin is the location for classification.\n    :return reg: float, [-0.5, 0.5].\n    the distance to the center of the corresponding bin.\n    '''", "\n", "width_bin", "=", "bins", "[", "0", "]", "[", "1", "]", "-", "bins", "[", "0", "]", "[", "0", "]", "\n", "# get the distance to the center from each bin.", "\n", "dist", "=", "(", "[", "float", "(", "abs", "(", "loc", "-", "float", "(", "bn", "[", "0", "]", "+", "bn", "[", "1", "]", ")", "/", "2", ")", ")", "for", "bn", "in", "bins", "]", ")", "\n", "cls", "=", "dist", ".", "index", "(", "min", "(", "dist", ")", ")", "\n", "reg", "=", "float", "(", "loc", "-", "float", "(", "bins", "[", "cls", "]", "[", "0", "]", "+", "bins", "[", "cls", "]", "[", "1", "]", ")", "/", "2", ")", "/", "float", "(", "width_bin", ")", "\n", "return", "cls", ",", "reg", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.camera_cls_reg_sunrgbd": [[319, 341], ["tools.yaw_pitch_roll_from_R", "tools.bin_cls_reg", "tools.bin_cls_reg"], "function", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.yaw_pitch_roll_from_R", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.bin_cls_reg", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.bin_cls_reg"], ["", "def", "camera_cls_reg_sunrgbd", "(", "cam_R", ",", "bin", ",", "sample_id", ")", ":", "\n", "    ", "'''\n    Generate ground truth data for camera parameters (classification with regression manner).\n    (yaw, pitch, roll)\n    :param cam_R: Camera orientation. R:=[v1, v2, v3], the three column vectors respectively denote the toward, up,\n    right vector relative to the world system.\n    :param bin: ranges for classification and regression.\n    :return: class labels and regression targets.\n    '''", "\n", "pitch_bin", "=", "bin", "[", "'pitch_bin'", "]", "\n", "roll_bin", "=", "bin", "[", "'roll_bin'", "]", "\n", "_", ",", "pitch", ",", "roll", "=", "yaw_pitch_roll_from_R", "(", "cam_R", ")", "\n", "\n", "pitch_cls", ",", "pitch_reg", "=", "bin_cls_reg", "(", "pitch_bin", ",", "pitch", ")", "\n", "roll_cls", ",", "roll_reg", "=", "bin_cls_reg", "(", "roll_bin", ",", "roll", ")", "\n", "\n", "# with open('/home/ynie1/Projects/im2volume/data/sunrgbd/preprocessed/pitch.txt','a') as file:", "\n", "#     file.write('%d, %f\\n' % (sample_id, pitch))", "\n", "# with open('/home/ynie1/Projects/im2volume/data/sunrgbd/preprocessed/roll.txt','a') as file:", "\n", "#     file.write('%d, %f\\n' % (sample_id, roll))", "\n", "\n", "return", "pitch_cls", ",", "pitch_reg", ",", "roll_cls", ",", "roll_reg", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.camera_cls_reg": [[342, 362], ["tools.yaw_pitch_roll_from_R", "tools.bin_cls_reg", "tools.bin_cls_reg", "abs"], "function", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.yaw_pitch_roll_from_R", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.bin_cls_reg", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.bin_cls_reg"], ["", "def", "camera_cls_reg", "(", "cam_R", ",", "bin", ")", ":", "\n", "    ", "'''\n    Generate ground truth data for camera parameters (classification with regression manner).\n    (yaw, pitch, roll)\n    :param cam_R: Camera orientation. R:=[v1, v2, v3], the three column vectors respectively denote the toward, up,\n    right vector relative to the world system.\n    :param bin: ranges for classification and regression.\n    :return: class labels and regression targets.\n    '''", "\n", "pitch_bin", "=", "bin", "[", "'pitch_bin'", "]", "\n", "roll_bin", "=", "bin", "[", "'roll_bin'", "]", "\n", "_", ",", "pitch", ",", "roll", "=", "yaw_pitch_roll_from_R", "(", "cam_R", ")", "\n", "\n", "# remove eps for zeros. SUNCG cameras do not have roll angles.", "\n", "roll", "=", "0.", "if", "abs", "(", "roll", ")", "<", "0.001", "else", "roll", "\n", "\n", "pitch_cls", ",", "pitch_reg", "=", "bin_cls_reg", "(", "pitch_bin", ",", "pitch", ")", "\n", "roll_cls", ",", "roll_reg", "=", "bin_cls_reg", "(", "roll_bin", ",", "roll", ")", "\n", "\n", "return", "pitch_cls", ",", "pitch_reg", ",", "roll_cls", ",", "roll_reg", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.layout_centroid_depth_avg_residual": [[363, 373], ["None"], "function", ["None"], ["", "def", "layout_centroid_depth_avg_residual", "(", "centroid_depth", ",", "avg_depth", ")", ":", "\n", "    ", "\"\"\"\n    get the residual of the centroid depth of layout\n    :param centroid depth: layout centroid depth\n    :param avg depth: layout centroid average depth\n    :return: regression value\n    \"\"\"", "\n", "reg", "=", "(", "centroid_depth", "-", "avg_depth", ")", "/", "avg_depth", "\n", "\n", "return", "reg", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.layout_size_avg_residual": [[374, 383], ["None"], "function", ["None"], ["", "def", "layout_size_avg_residual", "(", "coeffs", ",", "avg", ")", ":", "\n", "    ", "\"\"\"\n    get the residual of the centroid of layout\n    :param coeffs: layout coeffs\n    :param avg: layout centroid average\n    :return: regression value\n    \"\"\"", "\n", "reg", "=", "(", "coeffs", "-", "avg", ")", "/", "avg", "\n", "return", "reg", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.layout_basis_from_ori_sungrbd": [[384, 399], ["numpy.zeros", "numpy.sin", "numpy.cos", "numpy.sin", "numpy.cos"], "function", ["None"], ["", "def", "layout_basis_from_ori_sungrbd", "(", "ori", ")", ":", "\n", "    ", "\"\"\"\n    :param ori: orientation angle\n    :return: basis: 3x3 matrix\n            the basis in 3D coordinates\n    \"\"\"", "\n", "basis", "=", "np", ".", "zeros", "(", "(", "3", ",", "3", ")", ")", "\n", "\n", "basis", "[", "0", ",", "0", "]", "=", "np", ".", "sin", "(", "ori", ")", "\n", "basis", "[", "0", ",", "2", "]", "=", "np", ".", "cos", "(", "ori", ")", "\n", "basis", "[", "1", ",", "1", "]", "=", "1", "\n", "basis", "[", "2", ",", "0", "]", "=", "-", "np", ".", "cos", "(", "ori", ")", "\n", "basis", "[", "2", ",", "2", "]", "=", "np", ".", "sin", "(", "ori", ")", "\n", "\n", "return", "basis", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.ori_cls_reg": [[400, 418], ["numpy.arctan2", "tools.bin_cls_reg"], "function", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.bin_cls_reg"], ["", "def", "ori_cls_reg", "(", "orientation", ",", "ori_bin", ")", ":", "\n", "    ", "'''\n    Generating the ground truth for object orientation\n\n    :param orientation: numpy array\n    orientation vector of the object.\n    :param ori_bin: list\n    The bins, eg. [[-x, 0], [0, x]]\n    :return cls: int, bin index.\n    indicates which bin is the location for classification.\n    :return reg: float, [-0.5, 0.5].\n    the distance to the center of the corresponding bin.\n    '''", "\n", "# Note that z-axis (3rd dimension) points toward the frontal direction", "\n", "# The orientation angle is along the y-axis (up-toward axis)", "\n", "angle", "=", "np", ".", "arctan2", "(", "orientation", "[", "0", "]", ",", "orientation", "[", "2", "]", ")", "\n", "cls", ",", "reg", "=", "bin_cls_reg", "(", "ori_bin", ",", "angle", ")", "\n", "return", "cls", ",", "reg", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.obj_size_avg_residual": [[419, 428], ["None"], "function", ["None"], ["", "def", "obj_size_avg_residual", "(", "coeffs", ",", "avg_size", ",", "class_id", ")", ":", "\n", "    ", "\"\"\"\n    :param coeffs: object sizes\n    :param size_template: dictionary that saves the mean size of each category\n    :param class_id: nyu class id.\n    :return: size residual ground truth normalized by the average size\n    \"\"\"", "\n", "size_residual", "=", "(", "coeffs", "-", "avg_size", "[", "class_id", "]", ")", "/", "avg_size", "[", "class_id", "]", "\n", "return", "size_residual", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.list_of_dict_to_dict_of_list": [[429, 442], ["dic[].keys", "numpy.array", "new_dic[].append"], "function", ["None"], ["", "def", "list_of_dict_to_dict_of_list", "(", "dic", ")", ":", "\n", "    ", "'''\n    From a list of dict to a dict of list\n    Each returned value is numpy array\n    '''", "\n", "new_dic", "=", "{", "}", "\n", "keys", "=", "dic", "[", "0", "]", ".", "keys", "(", ")", "\n", "for", "key", "in", "keys", ":", "\n", "        ", "new_dic", "[", "key", "]", "=", "[", "]", "\n", "for", "di", "in", "dic", ":", "\n", "            ", "new_dic", "[", "key", "]", ".", "append", "(", "di", "[", "key", "]", ")", "\n", "", "new_dic", "[", "key", "]", "=", "np", ".", "array", "(", "new_dic", "[", "key", "]", ")", "\n", "", "return", "new_dic", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.det": [[445, 447], ["None"], "function", ["None"], ["", "def", "det", "(", "a", ")", ":", "\n", "    ", "return", "a", "[", "0", "]", "[", "0", "]", "*", "a", "[", "1", "]", "[", "1", "]", "*", "a", "[", "2", "]", "[", "2", "]", "+", "a", "[", "0", "]", "[", "1", "]", "*", "a", "[", "1", "]", "[", "2", "]", "*", "a", "[", "2", "]", "[", "0", "]", "+", "a", "[", "0", "]", "[", "2", "]", "*", "a", "[", "1", "]", "[", "0", "]", "*", "a", "[", "2", "]", "[", "1", "]", "-", "a", "[", "0", "]", "[", "2", "]", "*", "a", "[", "1", "]", "[", "1", "]", "*", "a", "[", "2", "]", "[", "0", "]", "-", "a", "[", "0", "]", "[", "1", "]", "*", "a", "[", "1", "]", "[", "0", "]", "*", "a", "[", "2", "]", "[", "2", "]", "-", "a", "[", "0", "]", "[", "0", "]", "*", "a", "[", "1", "]", "[", "2", "]", "*", "a", "[", "2", "]", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.unit_normal": [[449, 464], ["tools.det", "tools.det", "tools.det"], "function", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.det", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.det", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.det"], ["", "def", "unit_normal", "(", "a", ",", "b", ",", "c", ")", ":", "\n", "    ", "x", "=", "det", "(", "[", "[", "1", ",", "a", "[", "1", "]", ",", "a", "[", "2", "]", "]", ",", "\n", "[", "1", ",", "b", "[", "1", "]", ",", "b", "[", "2", "]", "]", ",", "\n", "[", "1", ",", "c", "[", "1", "]", ",", "c", "[", "2", "]", "]", "]", ")", "\n", "y", "=", "det", "(", "[", "[", "a", "[", "0", "]", ",", "1", ",", "a", "[", "2", "]", "]", ",", "\n", "[", "b", "[", "0", "]", ",", "1", ",", "b", "[", "2", "]", "]", ",", "\n", "[", "c", "[", "0", "]", ",", "1", ",", "c", "[", "2", "]", "]", "]", ")", "\n", "z", "=", "det", "(", "[", "[", "a", "[", "0", "]", ",", "a", "[", "1", "]", ",", "1", "]", ",", "\n", "[", "b", "[", "0", "]", ",", "b", "[", "1", "]", ",", "1", "]", ",", "\n", "[", "c", "[", "0", "]", ",", "c", "[", "1", "]", ",", "1", "]", "]", ")", "\n", "magnitude", "=", "(", "x", "**", "2", "+", "y", "**", "2", "+", "z", "**", "2", ")", "**", ".5", "\n", "if", "magnitude", "==", "0.", ":", "\n", "        ", "return", "(", "0.", ",", "0.", ",", "0.", ")", "\n", "", "else", ":", "\n", "        ", "return", "(", "x", "/", "magnitude", ",", "y", "/", "magnitude", ",", "z", "/", "magnitude", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.dot": [[466, 468], ["None"], "function", ["None"], ["", "", "def", "dot", "(", "a", ",", "b", ")", ":", "\n", "    ", "return", "a", "[", "0", "]", "*", "b", "[", "0", "]", "+", "a", "[", "1", "]", "*", "b", "[", "1", "]", "+", "a", "[", "2", "]", "*", "b", "[", "2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.cross": [[470, 475], ["None"], "function", ["None"], ["", "def", "cross", "(", "a", ",", "b", ")", ":", "\n", "    ", "x", "=", "a", "[", "1", "]", "*", "b", "[", "2", "]", "-", "a", "[", "2", "]", "*", "b", "[", "1", "]", "\n", "y", "=", "a", "[", "2", "]", "*", "b", "[", "0", "]", "-", "a", "[", "0", "]", "*", "b", "[", "2", "]", "\n", "z", "=", "a", "[", "0", "]", "*", "b", "[", "1", "]", "-", "a", "[", "1", "]", "*", "b", "[", "0", "]", "\n", "return", "(", "x", ",", "y", ",", "z", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.get_area": [[477, 495], ["range", "tools.dot", "abs", "len", "len", "tools.cross", "tools.unit_normal", "len"], "function", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.dot", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.cross", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.unit_normal"], ["", "def", "get_area", "(", "poly", ")", ":", "\n", "    ", "if", "len", "(", "poly", ")", "<", "3", ":", "# not a plane - no area", "\n", "        ", "return", "0", "\n", "\n", "", "total", "=", "[", "0", ",", "0", ",", "0", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "poly", ")", ")", ":", "\n", "        ", "vi1", "=", "poly", "[", "i", "]", "\n", "if", "i", "is", "len", "(", "poly", ")", "-", "1", ":", "\n", "            ", "vi2", "=", "poly", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "vi2", "=", "poly", "[", "i", "+", "1", "]", "\n", "", "prod", "=", "cross", "(", "vi1", ",", "vi2", ")", "\n", "total", "[", "0", "]", "+=", "prod", "[", "0", "]", "\n", "total", "[", "1", "]", "+=", "prod", "[", "1", "]", "\n", "total", "[", "2", "]", "+=", "prod", "[", "2", "]", "\n", "\n", "", "result", "=", "dot", "(", "total", ",", "unit_normal", "(", "poly", "[", "0", "]", ",", "poly", "[", "1", "]", ",", "poly", "[", "2", "]", ")", ")", "\n", "return", "abs", "(", "result", "/", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.calculate_face_area": [[496, 506], ["tools.get_area", "face_areas.append", "int", "[].tolist", "item.split", "numpy.array"], "function", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.get_area"], ["", "def", "calculate_face_area", "(", "data", ")", ":", "\n", "\n", "    ", "face_areas", "=", "[", "]", "\n", "\n", "for", "face", "in", "data", "[", "'f'", "]", ":", "\n", "        ", "vid_in_face", "=", "[", "int", "(", "item", ".", "split", "(", "'/'", ")", "[", "0", "]", ")", "for", "item", "in", "face", "]", "\n", "face_area", "=", "get_area", "(", "data", "[", "'v'", "]", "[", "np", ".", "array", "(", "vid_in_face", ")", "-", "1", ",", ":", "3", "]", ".", "tolist", "(", ")", ")", "\n", "face_areas", ".", "append", "(", "face_area", ")", "\n", "\n", "", "return", "face_areas", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.libs.tools.write_logfile": [[507, 512], ["print", "open", "f.write"], "function", ["None"], ["", "def", "write_logfile", "(", "text", ",", "log_file", ")", ":", "\n", "# print and record loss", "\n", "    ", "print", "(", "text", ")", "\n", "with", "open", "(", "log_file", ",", "'a'", ")", "as", "f", ":", "# open and append", "\n", "        ", "f", ".", "write", "(", "text", "+", "'\\n'", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.pix3d_config.Config.__init__": [[10, 25], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ")", ":", "\n", "        ", "\"\"\"\n        Configuration of data paths.\n        \"\"\"", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "root_path", "=", "'./data/'", "+", "self", ".", "dataset", "\n", "self", ".", "train_split", "=", "self", ".", "root_path", "+", "'/splits/train.json'", "\n", "self", ".", "test_split", "=", "self", ".", "root_path", "+", "'/splits/test.json'", "\n", "self", ".", "metadata_path", "=", "self", ".", "root_path", "+", "'/metadata'", "\n", "self", ".", "train_test_data_path", "=", "self", ".", "root_path", "+", "'/train_test_data'", "\n", "if", "dataset", "==", "'pix3d'", ":", "\n", "            ", "self", ".", "metadata_file", "=", "self", ".", "metadata_path", "+", "'/pix3d.json'", "\n", "self", ".", "classnames", "=", "[", "'misc'", ",", "\n", "'bed'", ",", "'bookcase'", ",", "'chair'", ",", "'desk'", ",", "'sofa'", ",", "\n", "'table'", ",", "'tool'", ",", "'wardrobe'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.config_utils.CONFIG.__init__": [[32, 52], ["config_utils.CONFIG.read_to_dict", "config_utils.CONFIG.load_logger", "config_utils.CONFIG.update_config", "os.path.join", "config_utils.CONFIG.update_config", "os.path.exists", "os.mkdir"], "methods", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.config_utils.CONFIG.read_to_dict", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.config_utils.CONFIG.load_logger", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.config_utils.CONFIG.update_config", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.config_utils.CONFIG.update_config"], ["def", "__init__", "(", "self", ",", "input", "=", "None", ")", ":", "\n", "        ", "'''\n        Loads config file\n        :param path (str): path to config file\n        :return:\n        '''", "\n", "self", ".", "config", "=", "self", ".", "read_to_dict", "(", "input", ")", "\n", "self", ".", "_logger", ",", "self", ".", "_save_path", "=", "self", ".", "load_logger", "(", ")", "\n", "\n", "# update save_path to config file", "\n", "self", ".", "update_config", "(", "log", "=", "{", "'path'", ":", "self", ".", "_save_path", "}", ")", "\n", "\n", "# update visualization path", "\n", "vis_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_save_path", ",", "self", ".", "config", "[", "'log'", "]", "[", "'vis_path'", "]", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "vis_path", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "vis_path", ")", "\n", "", "self", ".", "update_config", "(", "log", "=", "{", "'vis_path'", ":", "vis_path", "}", ")", "\n", "\n", "# initiate device environments", "\n", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICES\"", "]", "=", "self", ".", "config", "[", "'device'", "]", "[", "'gpu_ids'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.config_utils.CONFIG.logger": [[53, 56], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "logger", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_logger", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.config_utils.CONFIG.save_path": [[57, 60], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "save_path", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_save_path", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.config_utils.CONFIG.load_logger": [[61, 79], ["os.path.join", "os.path.join", "logging.FileHandler", "logging.Formatter", "logging.FileHandler.setFormatter", "logging.getLogger", "logging.getLogger.setLevel", "logging.getLogger.addHandler", "datetime.datetime.datetime.now().isoformat", "os.path.exists", "os.makedirs", "datetime.datetime.datetime.now"], "methods", ["None"], ["", "def", "load_logger", "(", "self", ")", ":", "\n", "# set file handler", "\n", "        ", "save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "config", "[", "'log'", "]", "[", "'path'", "]", ",", "datetime", ".", "now", "(", ")", ".", "isoformat", "(", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "save_path", ")", "\n", "\n", "", "logfile", "=", "os", ".", "path", ".", "join", "(", "save_path", ",", "'log.txt'", ")", "\n", "file_handler", "=", "logging", ".", "FileHandler", "(", "logfile", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "'%(asctime)s - %(name)s - %(levelname)s - %(message)s'", ")", "\n", "file_handler", ".", "setFormatter", "(", "formatter", ")", "\n", "self", ".", "__file_handler", "=", "file_handler", "\n", "\n", "# configure logger", "\n", "logger", "=", "logging", ".", "getLogger", "(", "'Empty'", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "logger", ".", "addHandler", "(", "file_handler", ")", "\n", "\n", "return", "logger", ",", "save_path", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.config_utils.CONFIG.log_string": [[80, 83], ["config_utils.CONFIG._logger.info", "print"], "methods", ["None"], ["", "def", "log_string", "(", "self", ",", "content", ")", ":", "\n", "        ", "self", ".", "_logger", ".", "info", "(", "content", ")", "\n", "print", "(", "content", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.config_utils.CONFIG.read_to_dict": [[84, 99], ["dict", "isinstance", "os.path.isfile", "input.endswith", "isinstance", "ValueError", "ValueError", "open", "yaml.load"], "methods", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.CheckpointIO.load"], ["", "def", "read_to_dict", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "not", "input", ":", "\n", "            ", "return", "dict", "(", ")", "\n", "", "if", "isinstance", "(", "input", ",", "str", ")", "and", "os", ".", "path", ".", "isfile", "(", "input", ")", ":", "\n", "            ", "if", "input", ".", "endswith", "(", "'yaml'", ")", ":", "\n", "                ", "with", "open", "(", "input", ",", "'r'", ")", "as", "f", ":", "\n", "                    ", "config", "=", "yaml", ".", "load", "(", "f", ",", "Loader", "=", "yaml", ".", "FullLoader", ")", "\n", "", "", "else", ":", "\n", "                ", "ValueError", "(", "'Config file should be with the format of *.yaml'", ")", "\n", "", "", "elif", "isinstance", "(", "input", ",", "dict", ")", ":", "\n", "            ", "config", "=", "input", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Unrecognized input type (i.e. not *.yaml file nor dict).'", ")", "\n", "\n", "", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.config_utils.CONFIG.update_config": [[100, 117], ["dict", "config_utils.CONFIG.read_to_dict", "config_utils.update_recursive", "config_utils.CONFIG.__update_logger", "dict.update", "config_utils.CONFIG.read_to_dict"], "methods", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.config_utils.CONFIG.read_to_dict", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.config_utils.update_recursive", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.config_utils.CONFIG.__update_logger", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.config_utils.CONFIG.read_to_dict"], ["", "def", "update_config", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "'''\n        update config and corresponding logger setting\n        :param input: dict settings add to config file\n        :return:\n        '''", "\n", "cfg1", "=", "dict", "(", ")", "\n", "for", "item", "in", "args", ":", "\n", "            ", "cfg1", ".", "update", "(", "self", ".", "read_to_dict", "(", "item", ")", ")", "\n", "\n", "", "cfg2", "=", "self", ".", "read_to_dict", "(", "kwargs", ")", "\n", "\n", "new_cfg", "=", "{", "**", "cfg1", ",", "**", "cfg2", "}", "\n", "\n", "update_recursive", "(", "self", ".", "config", ",", "new_cfg", ")", "\n", "# when update config file, the corresponding logger should also be updated.", "\n", "self", ".", "__update_logger", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.config_utils.CONFIG.write_config": [[118, 123], ["os.path.join", "open", "yaml.dump"], "methods", ["None"], ["", "def", "write_config", "(", "self", ")", ":", "\n", "        ", "output_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_save_path", ",", "'out_config.yaml'", ")", "\n", "\n", "with", "open", "(", "output_file", ",", "'w'", ")", "as", "file", ":", "\n", "            ", "yaml", ".", "dump", "(", "self", ".", "config", ",", "file", ",", "default_flow_style", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.config_utils.CONFIG.__update_logger": [[124, 131], ["logging.getLogger", "logging.getLogger.setLevel", "logging.getLogger.addHandler"], "methods", ["None"], ["", "", "def", "__update_logger", "(", "self", ")", ":", "\n", "# configure logger", "\n", "        ", "name", "=", "self", ".", "config", "[", "'mode'", "]", "if", "'mode'", "in", "self", ".", "config", "else", "self", ".", "_logger", ".", "name", "\n", "logger", "=", "logging", ".", "getLogger", "(", "name", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "logger", ".", "addHandler", "(", "self", ".", "__file_handler", ")", "\n", "self", ".", "_logger", "=", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.config_utils.update_recursive": [[12, 27], ["dict2.items", "isinstance", "dict", "config_utils.update_recursive"], "function", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.config_utils.update_recursive"], ["def", "update_recursive", "(", "dict1", ",", "dict2", ")", ":", "\n", "    ", "''' Update two config dictionaries recursively.\n\n    Args:\n        dict1 (dict): first dictionary to be updated\n        dict2 (dict): second dictionary which entries should be used\n\n    '''", "\n", "for", "k", ",", "v", "in", "dict2", ".", "items", "(", ")", ":", "\n", "        ", "if", "k", "not", "in", "dict1", ":", "\n", "            ", "dict1", "[", "k", "]", "=", "dict", "(", ")", "\n", "", "if", "isinstance", "(", "v", ",", "dict", ")", ":", "\n", "            ", "update_recursive", "(", "dict1", "[", "k", "]", ",", "v", ")", "\n", "", "else", ":", "\n", "            ", "dict1", "[", "k", "]", "=", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.config_utils.mount_external_config": [[132, 139], ["configs.data_config.Config", "net_utils.libs.to_dict_tensor", "setattr", "setattr"], "function", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.libs.to_dict_tensor"], ["", "", "def", "mount_external_config", "(", "cfg", ")", ":", "\n", "    ", "if", "cfg", ".", "config", "[", "'data'", "]", "[", "'dataset'", "]", "==", "'sunrgbd'", ":", "\n", "        ", "dataset_config", "=", "Data_Config", "(", "'sunrgbd'", ")", "\n", "bins_tensor", "=", "to_dict_tensor", "(", "dataset_config", ".", "bins", ",", "if_cuda", "=", "cfg", ".", "config", "[", "'device'", "]", "[", "'use_gpu'", "]", ")", "\n", "setattr", "(", "cfg", ",", "'dataset_config'", ",", "dataset_config", ")", "\n", "setattr", "(", "cfg", ",", "'bins_tensor'", ",", "bins_tensor", ")", "\n", "", "return", "cfg", "\n", "", ""]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.data_config.Relation_Config.__init__": [[12, 16], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "d_g", "=", "64", "\n", "self", ".", "d_k", "=", "64", "\n", "self", ".", "Nr", "=", "16", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.data_config.Config.__init__": [[48, 63], ["os.path.join", "os.path.join", "os.path.join", "data_config.Config.__initiate_bins", "os.path.exists", "os.mkdir"], "methods", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.data_config.Config.__initiate_bins"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ")", ":", "\n", "        ", "\"\"\"\n        Configuration of data paths.\n        \"\"\"", "\n", "self", ".", "dataset", "=", "dataset", "\n", "\n", "if", "self", ".", "dataset", "==", "'sunrgbd'", ":", "\n", "            ", "self", ".", "metadata_path", "=", "'./data/sunrgbd'", "\n", "self", ".", "train_test_data_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "metadata_path", ",", "'sunrgbd_train_test_data'", ")", "\n", "self", ".", "__size_avg_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "metadata_path", ",", "'preprocessed/size_avg_category.pkl'", ")", "\n", "self", ".", "__layout_avg_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "metadata_path", ",", "'preprocessed/layout_avg_file.pkl'", ")", "\n", "self", ".", "bins", "=", "self", ".", "__initiate_bins", "(", ")", "\n", "self", ".", "evaluation_path", "=", "'./evaluation/sunrgbd'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "train_test_data_path", ")", ":", "\n", "                ", "os", ".", "mkdir", "(", "self", ".", "train_test_data_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.configs.data_config.Config.__initiate_bins": [[64, 123], ["os.path.exists", "float", "os.path.exists", "numpy.vstack", "NameError", "IOError", "IOError", "open", "pickle.load", "range", "range", "range", "range", "open", "pickle.load", "range", "range", "len"], "methods", ["home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.CheckpointIO.load", "home.repos.pwc.inspect_result.yinyunie_Total3DUnderstanding.net_utils.utils.CheckpointIO.load"], ["", "", "", "def", "__initiate_bins", "(", "self", ")", ":", "\n", "        ", "bin", "=", "{", "}", "\n", "\n", "if", "self", ".", "dataset", "==", "'sunrgbd'", ":", "\n", "# there are faithful priors for layout locations, we can use it for regression.", "\n", "            ", "if", "os", ".", "path", ".", "exists", "(", "self", ".", "__layout_avg_file", ")", ":", "\n", "                ", "with", "open", "(", "self", ".", "__layout_avg_file", ",", "'rb'", ")", "as", "file", ":", "\n", "                    ", "layout_avg_dict", "=", "pickle", ".", "load", "(", "file", ")", "\n", "", "", "else", ":", "\n", "                ", "raise", "IOError", "(", "'No layout average file in %s. Please check.'", "%", "(", "self", ".", "__layout_avg_file", ")", ")", "\n", "\n", "", "bin", "[", "'layout_centroid_avg'", "]", "=", "layout_avg_dict", "[", "'layout_centroid_avg'", "]", "\n", "bin", "[", "'layout_coeffs_avg'", "]", "=", "layout_avg_dict", "[", "'layout_coeffs_avg'", "]", "\n", "\n", "'''layout orientation bin'''", "\n", "NUM_LAYOUT_ORI_BIN", "=", "2", "\n", "ORI_LAYOUT_BIN_WIDTH", "=", "np", ".", "pi", "/", "4", "\n", "bin", "[", "'layout_ori_bin'", "]", "=", "[", "[", "np", ".", "pi", "/", "4", "+", "i", "*", "ORI_LAYOUT_BIN_WIDTH", ",", "np", ".", "pi", "/", "4", "+", "(", "i", "+", "1", ")", "*", "ORI_LAYOUT_BIN_WIDTH", "]", "for", "i", "in", "range", "(", "NUM_LAYOUT_ORI_BIN", ")", "]", "\n", "\n", "'''camera bin'''", "\n", "PITCH_NUMBER_BINS", "=", "2", "\n", "PITCH_WIDTH", "=", "40", "*", "np", ".", "pi", "/", "180", "\n", "ROLL_NUMBER_BINS", "=", "2", "\n", "ROLL_WIDTH", "=", "20", "*", "np", ".", "pi", "/", "180", "\n", "\n", "# pitch_bin = [[-60 * np.pi/180, -20 * np.pi/180], [-20 * np.pi/180, 20 * np.pi/180]]", "\n", "bin", "[", "'pitch_bin'", "]", "=", "[", "[", "-", "60.0", "*", "np", ".", "pi", "/", "180", "+", "i", "*", "PITCH_WIDTH", ",", "-", "60.0", "*", "np", ".", "pi", "/", "180", "+", "(", "i", "+", "1", ")", "*", "PITCH_WIDTH", "]", "for", "\n", "i", "in", "range", "(", "PITCH_NUMBER_BINS", ")", "]", "\n", "# roll_bin = [[-20 * np.pi/180, 0 * np.pi/180], [0 * np.pi/180, 20 * np.pi/180]]", "\n", "bin", "[", "'roll_bin'", "]", "=", "[", "[", "-", "20.0", "*", "np", ".", "pi", "/", "180", "+", "i", "*", "ROLL_WIDTH", ",", "-", "20.0", "*", "np", ".", "pi", "/", "180", "+", "(", "i", "+", "1", ")", "*", "ROLL_WIDTH", "]", "for", "i", "in", "\n", "range", "(", "ROLL_NUMBER_BINS", ")", "]", "\n", "\n", "'''bbox orin, size and centroid bin'''", "\n", "# orientation bin", "\n", "NUM_ORI_BIN", "=", "6", "\n", "ORI_BIN_WIDTH", "=", "float", "(", "2", "*", "np", ".", "pi", "/", "NUM_ORI_BIN", ")", "# 60 degrees width for each bin.", "\n", "# orientation bin ranges from -np.pi to np.pi.", "\n", "bin", "[", "'ori_bin'", "]", "=", "[", "[", "(", "i", "-", "NUM_ORI_BIN", "/", "2", ")", "*", "ORI_BIN_WIDTH", ",", "(", "i", "-", "NUM_ORI_BIN", "/", "2", "+", "1", ")", "*", "ORI_BIN_WIDTH", "]", "for", "i", "\n", "in", "range", "(", "NUM_ORI_BIN", ")", "]", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "self", ".", "__size_avg_path", ")", ":", "\n", "                ", "with", "open", "(", "self", ".", "__size_avg_path", ",", "'rb'", ")", "as", "file", ":", "\n", "                    ", "avg_size", "=", "pickle", ".", "load", "(", "file", ")", "\n", "", "", "else", ":", "\n", "                ", "raise", "IOError", "(", "'No object average size file in %s. Please check.'", "%", "(", "self", ".", "__size_avg_path", ")", ")", "\n", "\n", "", "bin", "[", "'avg_size'", "]", "=", "np", ".", "vstack", "(", "[", "avg_size", "[", "key", "]", "for", "key", "in", "range", "(", "len", "(", "avg_size", ")", ")", "]", ")", "\n", "\n", "# for each object bbox, the distance between camera and object centroid will be estimated.", "\n", "\n", "NUM_DEPTH_BIN", "=", "6", "\n", "DEPTH_WIDTH", "=", "1.0", "\n", "# centroid_bin = [0, 6]", "\n", "bin", "[", "'centroid_bin'", "]", "=", "[", "[", "i", "*", "DEPTH_WIDTH", ",", "(", "i", "+", "1", ")", "*", "DEPTH_WIDTH", "]", "for", "i", "in", "\n", "range", "(", "NUM_DEPTH_BIN", ")", "]", "\n", "", "else", ":", "\n", "            ", "raise", "NameError", "(", "'Please specify a correct dataset name.'", ")", "\n", "\n", "", "return", "bin", "\n", "", "", ""]]}