{"home.repos.pwc.inspect_result.saikatdutta_NME-VFI.None.gridnet.lateral_block.__init__": [[7, 20], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.PReLU", "torch.PReLU", "torch.Conv2d", "torch.Conv2d", "torch.PReLU", "torch.PReLU", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.saikatdutta_NME-VFI.None.gridnet3d.Grid3DNet.__init__"], ["\t", "def", "__init__", "(", "self", ",", "inChannels", ",", "outChannels", ",", "res_conn", "=", "True", ")", ":", "\n", "\n", "\t\t", "super", "(", "lateral_block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "block", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "PReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "inChannels", ",", "outChannels", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "PReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "outChannels", ",", "outChannels", ",", "3", ",", "1", ",", "1", ")", "\n", "\n", "\n", ")", "\n", "self", ".", "res_conn", "=", "res_conn", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_NME-VFI.None.gridnet.lateral_block.forward": [[21, 26], ["gridnet.lateral_block.block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "x1", "=", "self", ".", "block", "(", "x", ")", "\n", "if", "(", "self", ".", "res_conn", ")", ":", "\n", "\t\t\t", "x1", "=", "x", "+", "x1", "\n", "", "return", "x1", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_NME-VFI.None.gridnet.down_block.__init__": [[29, 38], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.PReLU", "torch.PReLU", "torch.Conv2d", "torch.Conv2d", "torch.PReLU", "torch.PReLU", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.saikatdutta_NME-VFI.None.gridnet3d.Grid3DNet.__init__"], ["\t", "def", "__init__", "(", "self", ",", "inChannels", ",", "outChannels", ")", ":", "\n", "\n", "\t\t", "super", "(", "down_block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "block", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "PReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "inChannels", ",", "outChannels", ",", "3", ",", "2", ",", "1", ")", ",", "\n", "nn", ".", "PReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "outChannels", ",", "outChannels", ",", "3", ",", "1", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_NME-VFI.None.gridnet.down_block.forward": [[42, 45], ["gridnet.down_block.block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "x1", "=", "self", ".", "block", "(", "x", ")", "\n", "return", "x1", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_NME-VFI.None.gridnet.up_block.__init__": [[49, 59], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Upsample", "torch.Upsample", "torch.PReLU", "torch.PReLU", "torch.Conv2d", "torch.Conv2d", "torch.PReLU", "torch.PReLU", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.saikatdutta_NME-VFI.None.gridnet3d.Grid3DNet.__init__"], ["\t", "def", "__init__", "(", "self", ",", "inChannels", ",", "outChannels", ")", ":", "\n", "\n", "\t\t", "super", "(", "up_block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "block", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ")", ",", "\n", "nn", ".", "PReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "inChannels", ",", "outChannels", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "PReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "outChannels", ",", "outChannels", ",", "3", ",", "1", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_NME-VFI.None.gridnet.up_block.forward": [[63, 66], ["gridnet.up_block.block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "x1", "=", "self", ".", "block", "(", "x", ")", "\n", "return", "x1", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_NME-VFI.None.gridnet.GridNet.__init__": [[71, 117], ["torch.Module.__init__", "gridnet.lateral_block", "gridnet.lateral_block", "gridnet.lateral_block", "gridnet.lateral_block", "gridnet.lateral_block", "gridnet.lateral_block", "gridnet.lateral_block", "gridnet.lateral_block", "gridnet.lateral_block", "gridnet.lateral_block", "gridnet.lateral_block", "gridnet.lateral_block", "gridnet.lateral_block", "gridnet.lateral_block", "gridnet.lateral_block", "gridnet.lateral_block", "gridnet.lateral_block", "gridnet.down_block", "gridnet.down_block", "gridnet.down_block", "gridnet.down_block", "gridnet.down_block", "gridnet.down_block", "gridnet.up_block", "gridnet.up_block", "gridnet.up_block", "gridnet.up_block", "gridnet.up_block", "gridnet.up_block"], "methods", ["home.repos.pwc.inspect_result.saikatdutta_NME-VFI.None.gridnet3d.Grid3DNet.__init__"], ["\t", "def", "__init__", "(", "self", ",", "inChannels", ",", "outChannels", ",", "channel_list", "=", "[", "32", ",", "64", ",", "96", "]", ")", ":", "\n", "\n", "\t\t", "super", "(", "GridNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "c1", ",", "c2", ",", "c3", "=", "channel_list", "\n", "\n", "self", ".", "Lin", "=", "lateral_block", "(", "inChannels", ",", "c1", ",", "False", ")", "\n", "\n", "#row0", "\n", "self", ".", "L00", "=", "lateral_block", "(", "c1", ",", "c1", ")", "\n", "self", ".", "L01", "=", "lateral_block", "(", "c1", ",", "c1", ")", "\n", "self", ".", "L02", "=", "lateral_block", "(", "c1", ",", "c1", ")", "\n", "self", ".", "L03", "=", "lateral_block", "(", "c1", ",", "c1", ")", "\n", "self", ".", "L04", "=", "lateral_block", "(", "c1", ",", "c1", ")", "\n", "\n", "#row1", "\n", "self", ".", "L10", "=", "lateral_block", "(", "c2", ",", "c2", ")", "\n", "self", ".", "L11", "=", "lateral_block", "(", "c2", ",", "c2", ")", "\n", "self", ".", "L12", "=", "lateral_block", "(", "c2", ",", "c2", ")", "\n", "self", ".", "L13", "=", "lateral_block", "(", "c2", ",", "c2", ")", "\n", "self", ".", "L14", "=", "lateral_block", "(", "c2", ",", "c2", ")", "\n", "\n", "#row2", "\n", "self", ".", "L20", "=", "lateral_block", "(", "c3", ",", "c3", ")", "\n", "self", ".", "L21", "=", "lateral_block", "(", "c3", ",", "c3", ")", "\n", "self", ".", "L22", "=", "lateral_block", "(", "c3", ",", "c3", ")", "\n", "self", ".", "L23", "=", "lateral_block", "(", "c3", ",", "c3", ")", "\n", "self", ".", "L24", "=", "lateral_block", "(", "c3", ",", "c3", ")", "\n", "\n", "self", ".", "Lout", "=", "lateral_block", "(", "c1", ",", "outChannels", ",", "False", ")", "\n", "\n", "self", ".", "d00", "=", "down_block", "(", "c1", ",", "c2", ")", "\n", "self", ".", "d01", "=", "down_block", "(", "c1", ",", "c2", ")", "\n", "self", ".", "d02", "=", "down_block", "(", "c1", ",", "c2", ")", "\n", "\n", "self", ".", "d10", "=", "down_block", "(", "c2", ",", "c3", ")", "\n", "self", ".", "d11", "=", "down_block", "(", "c2", ",", "c3", ")", "\n", "self", ".", "d12", "=", "down_block", "(", "c2", ",", "c3", ")", "\n", "\n", "self", ".", "u00", "=", "up_block", "(", "c2", ",", "c1", ")", "\n", "self", ".", "u01", "=", "up_block", "(", "c2", ",", "c1", ")", "\n", "self", ".", "u02", "=", "up_block", "(", "c2", ",", "c1", ")", "\n", "\n", "self", ".", "u10", "=", "up_block", "(", "c3", ",", "c2", ")", "\n", "self", ".", "u11", "=", "up_block", "(", "c3", ",", "c2", ")", "\n", "self", ".", "u12", "=", "up_block", "(", "c3", ",", "c2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_NME-VFI.None.gridnet.GridNet.forward": [[118, 160], ["gridnet.GridNet.Lin", "gridnet.GridNet.L00", "gridnet.GridNet.L01", "gridnet.GridNet.L02", "gridnet.GridNet.d00", "gridnet.GridNet.d01", "gridnet.GridNet.d02", "gridnet.GridNet.L10", "gridnet.GridNet.L11", "gridnet.GridNet.L12", "gridnet.GridNet.d10", "gridnet.GridNet.d11", "gridnet.GridNet.d12", "gridnet.GridNet.L20", "gridnet.GridNet.L21", "gridnet.GridNet.L22", "gridnet.GridNet.u10", "gridnet.GridNet.L23", "gridnet.GridNet.u11", "gridnet.GridNet.L24", "gridnet.GridNet.u12", "gridnet.GridNet.L13", "gridnet.GridNet.L14", "gridnet.GridNet.u00", "gridnet.GridNet.u01", "gridnet.GridNet.u02", "gridnet.GridNet.L03", "gridnet.GridNet.L04", "gridnet.GridNet.Lout"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "\t\t", "out_Lin", "=", "self", ".", "Lin", "(", "x", ")", "\n", "out_L00", "=", "self", ".", "L00", "(", "out_Lin", ")", "\n", "out_L01", "=", "self", ".", "L01", "(", "out_L00", ")", "\n", "out_L02", "=", "self", ".", "L02", "(", "out_L01", ")", "\n", "\n", "\n", "out_d00", "=", "self", ".", "d00", "(", "out_Lin", ")", "\n", "out_d01", "=", "self", ".", "d01", "(", "out_L00", ")", "\n", "out_d02", "=", "self", ".", "d02", "(", "out_L01", ")", "\n", "\n", "out_L10", "=", "self", ".", "L10", "(", "out_d00", ")", "\n", "out_L11", "=", "self", ".", "L11", "(", "out_d01", "+", "out_L10", ")", "\n", "out_L12", "=", "self", ".", "L12", "(", "out_d02", "+", "out_L11", ")", "\n", "\n", "out_d10", "=", "self", ".", "d10", "(", "out_d00", ")", "\n", "out_d11", "=", "self", ".", "d11", "(", "out_L10", "+", "out_d01", ")", "\n", "out_d12", "=", "self", ".", "d12", "(", "out_L11", "+", "out_d02", ")", "\n", "\n", "out_L20", "=", "self", ".", "L20", "(", "out_d10", ")", "\n", "out_L21", "=", "self", ".", "L21", "(", "out_d11", "+", "out_L20", ")", "\n", "out_L22", "=", "self", ".", "L22", "(", "out_d12", "+", "out_L21", ")", "\n", "\n", "out_u10", "=", "self", ".", "u10", "(", "out_L22", ")", "\n", "out_L23", "=", "self", ".", "L23", "(", "out_L22", ")", "\n", "out_u11", "=", "self", ".", "u11", "(", "out_L23", ")", "\n", "out_L24", "=", "self", ".", "L24", "(", "out_L23", ")", "\n", "out_u12", "=", "self", ".", "u12", "(", "out_L24", ")", "\n", "\n", "out_L13", "=", "self", ".", "L13", "(", "out_u10", "+", "out_L12", ")", "\n", "out_L14", "=", "self", ".", "L14", "(", "out_u11", "+", "out_L13", ")", "\n", "out_u00", "=", "self", ".", "u00", "(", "out_u10", "+", "out_L12", ")", "\n", "out_u01", "=", "self", ".", "u01", "(", "out_u11", "+", "out_L13", ")", "\n", "out_u02", "=", "self", ".", "u02", "(", "out_u12", "+", "out_L14", ")", "\n", "\n", "out_L03", "=", "self", ".", "L03", "(", "out_u00", "+", "out_L02", ")", "\n", "out_L04", "=", "self", ".", "L04", "(", "out_u01", "+", "out_L03", ")", "\n", "\n", "out_final", "=", "self", ".", "Lout", "(", "out_L04", "+", "out_u02", ")", "\n", "\n", "return", "out_final", ",", "out_L04", "+", "out_u02", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_NME-VFI.None.flow_reversal.FlowReversal.__init__": [[10, 12], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.saikatdutta_NME-VFI.None.gridnet3d.Grid3DNet.__init__"], ["def", "__init__", "(", "self", ",", ")", ":", "\n", "        ", "super", "(", "FlowReversal", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_NME-VFI.None.flow_reversal.FlowReversal.forward": [[14, 64], ["img.size", "x.repeat.repeat.repeat", "y.repeat.repeat.repeat", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "flow_reversal.FlowReversal.get_gaussian_weights", "flow_reversal.FlowReversal.sample_one", "flow_reversal.FlowReversal.sample_one", "flow_reversal.FlowReversal.sample_one", "flow_reversal.FlowReversal.sample_one"], "methods", ["home.repos.pwc.inspect_result.saikatdutta_NME-VFI.None.flow_reversal.FlowReversal.get_gaussian_weights", "home.repos.pwc.inspect_result.saikatdutta_NME-VFI.None.flow_reversal.FlowReversal.sample_one", "home.repos.pwc.inspect_result.saikatdutta_NME-VFI.None.flow_reversal.FlowReversal.sample_one", "home.repos.pwc.inspect_result.saikatdutta_NME-VFI.None.flow_reversal.FlowReversal.sample_one", "home.repos.pwc.inspect_result.saikatdutta_NME-VFI.None.flow_reversal.FlowReversal.sample_one"], ["", "def", "forward", "(", "self", ",", "img", ",", "flo", ")", ":", "\n", "        ", "\"\"\"\n            -img: image (N, C, H, W)\n            -flo: optical flow (N, 2, H, W)\n            elements of flo is in [0, H] and [0, W] for dx, dy\n\n        \"\"\"", "\n", "\n", "\n", "# (x1, y1)\t\t(x1, y2)", "\n", "# +---------------+", "\n", "# |\t\t\t\t  |", "\n", "# |\to(x, y) \t  |", "\n", "# |\t\t\t\t  |", "\n", "# |\t\t\t\t  |", "\n", "# |\t\t\t\t  |", "\n", "# |\t\t\t\t  |", "\n", "# +---------------+", "\n", "# (x2, y1)\t\t(x2, y2)", "\n", "\n", "\n", "N", ",", "C", ",", "_", ",", "_", "=", "img", ".", "size", "(", ")", "\n", "\n", "# translate start-point optical flow to end-point optical flow", "\n", "y", "=", "flo", "[", ":", ",", "0", ":", "1", ":", ",", ":", "]", "\n", "x", "=", "flo", "[", ":", ",", "1", ":", "2", ",", ":", ",", ":", "]", "\n", "\n", "x", "=", "x", ".", "repeat", "(", "1", ",", "C", ",", "1", ",", "1", ")", "\n", "y", "=", "y", ".", "repeat", "(", "1", ",", "C", ",", "1", ",", "1", ")", "\n", "\n", "# Four point of square (x1, y1), (x1, y2), (x2, y1), (y2, y2)", "\n", "x1", "=", "torch", ".", "floor", "(", "x", ")", "\n", "x2", "=", "x1", "+", "1", "\n", "y1", "=", "torch", ".", "floor", "(", "y", ")", "\n", "y2", "=", "y1", "+", "1", "\n", "\n", "# firstly, get gaussian weights", "\n", "w11", ",", "w12", ",", "w21", ",", "w22", "=", "self", ".", "get_gaussian_weights", "(", "x", ",", "y", ",", "x1", ",", "x2", ",", "y1", ",", "y2", ")", "\n", "\n", "# secondly, sample each weighted corner", "\n", "img11", ",", "o11", "=", "self", ".", "sample_one", "(", "img", ",", "x1", ",", "y1", ",", "w11", ")", "\n", "img12", ",", "o12", "=", "self", ".", "sample_one", "(", "img", ",", "x1", ",", "y2", ",", "w12", ")", "\n", "img21", ",", "o21", "=", "self", ".", "sample_one", "(", "img", ",", "x2", ",", "y1", ",", "w21", ")", "\n", "img22", ",", "o22", "=", "self", ".", "sample_one", "(", "img", ",", "x2", ",", "y2", ",", "w22", ")", "\n", "\n", "\n", "imgw", "=", "img11", "+", "img12", "+", "img21", "+", "img22", "\n", "o", "=", "o11", "+", "o12", "+", "o21", "+", "o22", "\n", "\n", "return", "imgw", ",", "o", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_NME-VFI.None.flow_reversal.FlowReversal.get_gaussian_weights": [[66, 73], ["torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp"], "methods", ["None"], ["", "def", "get_gaussian_weights", "(", "self", ",", "x", ",", "y", ",", "x1", ",", "x2", ",", "y1", ",", "y2", ")", ":", "\n", "        ", "w11", "=", "torch", ".", "exp", "(", "-", "(", "(", "x", "-", "x1", ")", "**", "2", "+", "(", "y", "-", "y1", ")", "**", "2", ")", ")", "\n", "w12", "=", "torch", ".", "exp", "(", "-", "(", "(", "x", "-", "x1", ")", "**", "2", "+", "(", "y", "-", "y2", ")", "**", "2", ")", ")", "\n", "w21", "=", "torch", ".", "exp", "(", "-", "(", "(", "x", "-", "x2", ")", "**", "2", "+", "(", "y", "-", "y1", ")", "**", "2", ")", ")", "\n", "w22", "=", "torch", ".", "exp", "(", "-", "(", "(", "x", "-", "x2", ")", "**", "2", "+", "(", "y", "-", "y2", ")", "**", "2", ")", ")", "\n", "\n", "return", "w11", ",", "w12", ",", "w21", ",", "w22", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_NME-VFI.None.flow_reversal.FlowReversal.sample_one": [[75, 119], ["img.size", "shiftx.view", "shifty.view", "[].cuda().long().repeat().view", "[].cuda().long().repeat().view", "weight.view", "img.view", "torch.arange().view().long().cuda().repeat().view", "torch.arange().view().long().cuda().repeat().view", "torch.arange().view().long().cuda().repeat().view", "torch.arange().view().long().cuda().repeat().view", "torch.arange().view().long().cuda().repeat().view", "torch.arange().view().long().cuda().repeat().view", "torch.arange().view().long().cuda().repeat().view", "torch.arange().view().long().cuda().repeat().view", "torch.arange().view().long().cuda().repeat().view", "torch.arange().view().long().cuda().repeat().view", "torch.arange().view().long().cuda().repeat().view", "torch.arange().view().long().cuda().repeat().view", "torch.arange().view().long().cuda().repeat().view", "torch.arange().view().long().cuda().repeat().view", "torch.arange().view().long().cuda().repeat().view", "torch.arange().view().long().cuda().repeat().view", "torch.arange().view().long().cuda().repeat().view", "torch.arange().view().long().cuda().repeat().view", "torch.masked_select().clone().cuda", "torch.masked_select().clone().cuda", "torch.masked_select().clone().cuda", "torch.masked_select().clone().cuda", "torch.masked_select().clone().cuda", "torch.masked_select().clone().cuda", "torch.masked_select().clone().cuda", "torch.masked_select().clone().cuda", "torch.masked_select().clone().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda.put_", "torch.zeros().cuda.put_", "torch.zeros().cuda.put_", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda.put_", "torch.zeros().cuda.put_", "torch.zeros().cuda.put_", "shiftx.view.long", "shifty.view.long", "idxy.lt", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.zeros().cuda.view", "torch.zeros().cuda.view", "torch.zeros().cuda.view", "torch.zeros().cuda.view", "torch.zeros().cuda.view", "torch.zeros().cuda.view", "[].cuda().long().repeat", "[].cuda().long().repeat", "torch.arange().view().long().cuda().repeat", "torch.arange().view().long().cuda().repeat", "torch.arange().view().long().cuda().repeat", "torch.arange().view().long().cuda().repeat", "torch.arange().view().long().cuda().repeat", "torch.arange().view().long().cuda().repeat", "torch.arange().view().long().cuda().repeat", "torch.arange().view().long().cuda().repeat", "torch.arange().view().long().cuda().repeat", "torch.arange().view().long().cuda().repeat", "torch.arange().view().long().cuda().repeat", "torch.arange().view().long().cuda().repeat", "torch.arange().view().long().cuda().repeat", "torch.arange().view().long().cuda().repeat", "torch.arange().view().long().cuda().repeat", "torch.arange().view().long().cuda().repeat", "torch.arange().view().long().cuda().repeat", "torch.arange().view().long().cuda().repeat", "idxy.ge", "torch.masked_select().clone", "torch.masked_select().clone", "torch.masked_select().clone", "torch.masked_select().clone", "torch.masked_select().clone", "torch.masked_select().clone", "torch.masked_select().clone", "torch.masked_select().clone", "torch.masked_select().clone", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "idxx.ge", "idxx.lt", "[].cuda().long", "[].cuda().long", "torch.arange().view().long().cuda", "torch.arange().view().long().cuda", "torch.arange().view().long().cuda", "torch.arange().view().long().cuda", "torch.arange().view().long().cuda", "torch.arange().view().long().cuda", "torch.arange().view().long().cuda", "torch.arange().view().long().cuda", "torch.arange().view().long().cuda", "torch.arange().view().long().cuda", "torch.arange().view().long().cuda", "torch.arange().view().long().cuda", "torch.arange().view().long().cuda", "torch.arange().view().long().cuda", "torch.arange().view().long().cuda", "torch.arange().view().long().cuda", "torch.arange().view().long().cuda", "torch.arange().view().long().cuda", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "[].cuda", "[].cuda", "torch.arange().view().long", "torch.arange().view().long", "torch.arange().view().long", "torch.arange().view().long", "torch.arange().view().long", "torch.arange().view().long", "torch.arange().view().long", "torch.arange().view().long", "torch.arange().view().long", "torch.arange().view().long", "torch.arange().view().long", "torch.arange().view().long", "torch.arange().view().long", "torch.arange().view().long", "torch.arange().view().long", "torch.arange().view().long", "torch.arange().view().long", "torch.arange().view().long", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["None"], ["", "def", "sample_one", "(", "self", ",", "img", ",", "shiftx", ",", "shifty", ",", "weight", ")", ":", "\n", "        ", "\"\"\"\n        Input:\n            -img (N, C, H, W)\n            -shiftx, shifty (N, c, H, W)\n        \"\"\"", "\n", "\n", "N", ",", "C", ",", "H", ",", "W", "=", "img", ".", "size", "(", ")", "\n", "\n", "\n", "# flatten all (all restored as Tensors)", "\n", "flat_shiftx", "=", "shiftx", ".", "view", "(", "-", "1", ")", "\n", "flat_shifty", "=", "shifty", ".", "view", "(", "-", "1", ")", "\n", "flat_basex", "=", "torch", ".", "arange", "(", "0", ",", "H", ",", "requires_grad", "=", "False", ")", ".", "view", "(", "-", "1", ",", "1", ")", "[", "None", ",", "None", "]", ".", "cuda", "(", ")", ".", "long", "(", ")", ".", "repeat", "(", "N", ",", "C", ",", "1", ",", "W", ")", ".", "view", "(", "-", "1", ")", "\n", "flat_basey", "=", "torch", ".", "arange", "(", "0", ",", "W", ",", "requires_grad", "=", "False", ")", ".", "view", "(", "1", ",", "-", "1", ")", "[", "None", ",", "None", "]", ".", "cuda", "(", ")", ".", "long", "(", ")", ".", "repeat", "(", "N", ",", "C", ",", "H", ",", "1", ")", ".", "view", "(", "-", "1", ")", "\n", "flat_weight", "=", "weight", ".", "view", "(", "-", "1", ")", "\n", "flat_img", "=", "img", ".", "view", "(", "-", "1", ")", "\n", "\n", "\n", "# The corresponding positions in I1", "\n", "idxn", "=", "torch", ".", "arange", "(", "0", ",", "N", ",", "requires_grad", "=", "False", ")", ".", "view", "(", "N", ",", "1", ",", "1", ",", "1", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", ".", "repeat", "(", "1", ",", "C", ",", "H", ",", "W", ")", ".", "view", "(", "-", "1", ")", "\n", "idxc", "=", "torch", ".", "arange", "(", "0", ",", "C", ",", "requires_grad", "=", "False", ")", ".", "view", "(", "1", ",", "C", ",", "1", ",", "1", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", ".", "repeat", "(", "N", ",", "1", ",", "H", ",", "W", ")", ".", "view", "(", "-", "1", ")", "\n", "# ttype = flat_basex.type()", "\n", "idxx", "=", "flat_shiftx", ".", "long", "(", ")", "+", "flat_basex", "\n", "idxy", "=", "flat_shifty", ".", "long", "(", ")", "+", "flat_basey", "\n", "\n", "\n", "# recording the inside part the shifted", "\n", "mask", "=", "idxx", ".", "ge", "(", "0", ")", "&", "idxx", ".", "lt", "(", "H", ")", "&", "idxy", ".", "ge", "(", "0", ")", "&", "idxy", ".", "lt", "(", "W", ")", "\n", "\n", "# Mask off points out of boundaries", "\n", "ids", "=", "(", "idxn", "*", "C", "*", "H", "*", "W", "+", "idxc", "*", "H", "*", "W", "+", "idxx", "*", "W", "+", "idxy", ")", "\n", "ids_mask", "=", "torch", ".", "masked_select", "(", "ids", ",", "mask", ")", ".", "clone", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "# Note here! accmulate fla must be true for proper bp", "\n", "img_warp", "=", "torch", ".", "zeros", "(", "[", "N", "*", "C", "*", "H", "*", "W", ",", "]", ")", ".", "cuda", "(", ")", "\n", "img_warp", ".", "put_", "(", "ids_mask", ",", "torch", ".", "masked_select", "(", "flat_img", "*", "flat_weight", ",", "mask", ")", ",", "accumulate", "=", "True", ")", "\n", "\n", "one_warp", "=", "torch", ".", "zeros", "(", "[", "N", "*", "C", "*", "H", "*", "W", ",", "]", ")", ".", "cuda", "(", ")", "\n", "one_warp", ".", "put_", "(", "ids_mask", ",", "torch", ".", "masked_select", "(", "flat_weight", ",", "mask", ")", ",", "accumulate", "=", "True", ")", "\n", "\n", "\n", "\n", "return", "img_warp", ".", "view", "(", "N", ",", "C", ",", "H", ",", "W", ")", ",", "one_warp", ".", "view", "(", "N", ",", "C", ",", "H", ",", "W", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_NME-VFI.None.eval.FrameDataset.__init__": [[37, 42], ["pandas.read_csv"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "csv_file", ",", "data_root", "=", "'./'", ",", "transform", "=", "None", ")", ":", "\n", "\n", "        ", "self", ".", "data", "=", "pd", ".", "read_csv", "(", "csv_file", ")", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "data_root", "=", "data_root", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_NME-VFI.None.eval.FrameDataset.__len__": [[43, 45], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_NME-VFI.None.eval.FrameDataset.__getitem__": [[46, 64], ["PIL.Image.open", "PIL.Image.open", "PIL.Image.open", "PIL.Image.open", "PIL.Image.open", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "eval.FrameDataset.transform", "eval.FrameDataset.transform", "eval.FrameDataset.transform", "eval.FrameDataset.transform", "eval.FrameDataset.transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "t", "=", "self", ".", "data", ".", "iloc", "[", "idx", ",", "5", "]", "\n", "\n", "frame0", "=", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_root", ",", "self", ".", "data", ".", "iloc", "[", "idx", ",", "0", "]", ")", ")", "\n", "frame1", "=", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_root", ",", "self", ".", "data", ".", "iloc", "[", "idx", ",", "1", "]", ")", ")", "\n", "frame2", "=", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_root", ",", "self", ".", "data", ".", "iloc", "[", "idx", ",", "2", "]", ")", ")", "\n", "frame3", "=", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_root", ",", "self", ".", "data", ".", "iloc", "[", "idx", ",", "3", "]", ")", ")", "\n", "framet", "=", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_root", ",", "self", ".", "data", ".", "iloc", "[", "idx", ",", "4", "]", ")", ")", "\n", "\n", "\n", "if", "self", ".", "transform", ":", "\n", "            ", "frame0", "=", "self", ".", "transform", "(", "frame0", ")", "\n", "frame1", "=", "self", ".", "transform", "(", "frame1", ")", "\n", "frame2", "=", "self", ".", "transform", "(", "frame2", ")", "\n", "frame3", "=", "self", ".", "transform", "(", "frame3", ")", "\n", "framet", "=", "self", ".", "transform", "(", "framet", ")", "\n", "\n", "", "return", "(", "frame0", ",", "frame1", ",", "frame2", ",", "frame3", ",", "framet", ",", "t", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_NME-VFI.None.eval.to_image": [[22, 30], ["torch.clamp", "im_tensor.detach().cpu().squeeze.detach().cpu().squeeze", "numpy.transpose", "numpy.uint8", "im_tensor.detach().cpu().squeeze.numpy", "im_tensor.detach().cpu().squeeze.detach().cpu", "im_tensor.detach().cpu().squeeze.detach"], "function", ["None"], ["def", "to_image", "(", "im_tensor", ")", ":", "\n", "    ", "im_tensor", "=", "torch", ".", "clamp", "(", "im_tensor", ",", "0", ",", "1", ")", "\n", "im_tensor", "=", "im_tensor", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "squeeze", "(", ")", "\n", "im", "=", "np", ".", "transpose", "(", "im_tensor", ".", "numpy", "(", ")", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "im", "=", "im", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "im", "=", "np", ".", "uint8", "(", "im", "*", "255", ")", "\n", "\n", "return", "im", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_NME-VFI.None.eval.count_parameters": [[31, 33], ["sum", "p.numel", "model.parameters"], "function", ["None"], ["", "def", "count_parameters", "(", "model", ")", ":", "\n", "    ", "return", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_NME-VFI.None.model.SmallMaskNet.__init__": [[55, 60], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.saikatdutta_NME-VFI.None.gridnet3d.Grid3DNet.__init__"], ["def", "__init__", "(", "self", ",", "input", ",", "output", ")", ":", "\n", "        ", "super", "(", "SmallMaskNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "input", ",", "32", ",", "5", ",", "padding", "=", "2", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "32", ",", "16", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "16", ",", "output", ",", "3", ",", "padding", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_NME-VFI.None.model.SmallMaskNet.forward": [[61, 66], ["torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "model.SmallMaskNet.conv3", "model.SmallMaskNet.conv1", "model.SmallMaskNet.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "F", ".", "leaky_relu", "(", "self", ".", "conv1", "(", "x", ")", ",", "negative_slope", "=", "0.1", ")", "\n", "x", "=", "F", ".", "leaky_relu", "(", "self", ".", "conv2", "(", "x", ")", ",", "negative_slope", "=", "0.1", ")", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_NME-VFI.None.model.InterpNet.__init__": [[68, 79], ["torch.Module.__init__", "gridnet3d.Grid3DNet", "models.pwcnet_occ_bi.PWCNet", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "gridnet.GridNet", "model.SmallMaskNet", "flow_reversal.FlowReversal"], "methods", ["home.repos.pwc.inspect_result.saikatdutta_NME-VFI.None.gridnet3d.Grid3DNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "\n", "        ", "super", "(", "InterpNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "fnet", "=", "Grid3DNet", "(", "6", ",", "32", ",", "channel_list", "=", "[", "16", ",", "32", ",", "64", "]", ")", "\n", "self", ".", "flownet", "=", "PWCNet", "(", ")", "\n", "\n", "self", ".", "flo_layer", "=", "nn", ".", "Conv3d", "(", "32", ",", "4", ",", "(", "3", ",", "3", ",", "3", ")", ",", "(", "1", ",", "1", ",", "1", ")", ",", "(", "0", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "refinenet", "=", "GridNet", "(", "16", ",", "8", ")", "\n", "self", ".", "masknet", "=", "SmallMaskNet", "(", "38", ",", "1", ")", "\n", "self", ".", "fwarp", "=", "FlowReversal", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_NME-VFI.None.model.InterpNet.forward": [[81, 184], ["torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "model.InterpNet.flownet", "model.InterpNet.flownet", "model.InterpNet.flownet", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "model.InterpNet.fnet", "model.InterpNet.flo_layer", "model.InterpNet.fwarp", "model.InterpNet.fwarp", "model.backwarp", "model.backwarp", "model.InterpNet.refinenet", "model.backwarp", "model.backwarp", "torch.sigmoid().repeat", "torch.sigmoid().repeat", "torch.sigmoid().repeat", "torch.sigmoid().repeat", "torch.sigmoid().repeat", "torch.sigmoid().repeat", "torch.sigmoid().repeat", "torch.sigmoid().repeat", "torch.sigmoid().repeat", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "model.backwarp", "model.backwarp", "norm1[].clone", "norm2[].clone", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.backwarp", "model.backwarp", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "model.InterpNet.masknet", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.saikatdutta_NME-VFI.None.model.backwarp", "home.repos.pwc.inspect_result.saikatdutta_NME-VFI.None.model.backwarp", "home.repos.pwc.inspect_result.saikatdutta_NME-VFI.None.model.backwarp", "home.repos.pwc.inspect_result.saikatdutta_NME-VFI.None.model.backwarp", "home.repos.pwc.inspect_result.saikatdutta_NME-VFI.None.model.backwarp", "home.repos.pwc.inspect_result.saikatdutta_NME-VFI.None.model.backwarp", "home.repos.pwc.inspect_result.saikatdutta_NME-VFI.None.model.backwarp", "home.repos.pwc.inspect_result.saikatdutta_NME-VFI.None.model.backwarp"], ["", "def", "forward", "(", "self", ",", "I0_in", ",", "I1_in", ",", "I2_in", ",", "I3_in", ",", "t", "=", "0.5", ")", ":", "\n", "\n", "        ", "B", ",", "C", ",", "H", ",", "W", "=", "I0_in", ".", "shape", "\n", "\n", "if", "(", "H", "%", "64", "==", "0", ")", ":", "\n", "            ", "h1", "=", "H", "\n", "", "else", ":", "\n", "            ", "h1", "=", "(", "(", "H", "//", "64", ")", "+", "1", ")", "*", "64", "\n", "\n", "\n", "", "if", "(", "W", "%", "64", "==", "0", ")", ":", "\n", "            ", "w1", "=", "W", "\n", "", "else", ":", "\n", "            ", "w1", "=", "(", "(", "W", "//", "64", ")", "+", "1", ")", "*", "64", "\n", "\n", "", "I0", "=", "F", ".", "interpolate", "(", "I0_in", ",", "(", "h1", ",", "w1", ")", ",", "mode", "=", "'bilinear'", ")", "\n", "I1", "=", "F", ".", "interpolate", "(", "I1_in", ",", "(", "h1", ",", "w1", ")", ",", "mode", "=", "'bilinear'", ")", "\n", "I2", "=", "F", ".", "interpolate", "(", "I2_in", ",", "(", "h1", ",", "w1", ")", ",", "mode", "=", "'bilinear'", ")", "\n", "I3", "=", "F", ".", "interpolate", "(", "I3_in", ",", "(", "h1", ",", "w1", ")", ",", "mode", "=", "'bilinear'", ")", "\n", "\n", "out01", "=", "self", ".", "flownet", "(", "{", "'input1'", ":", "I0", ",", "'input2'", ":", "I1", "}", ")", "\n", "out12", "=", "self", ".", "flownet", "(", "{", "'input1'", ":", "I1", ",", "'input2'", ":", "I2", "}", ")", "\n", "out23", "=", "self", ".", "flownet", "(", "{", "'input1'", ":", "I2", ",", "'input2'", ":", "I3", "}", ")", "\n", "\n", "F_0_1", "=", "out01", "[", "'flow_f'", "]", "\n", "occ_0_1", "=", "torch", ".", "sigmoid", "(", "out01", "[", "'occ_f'", "]", ")", "\n", "\n", "F_1_0", "=", "out01", "[", "'flow_b'", "]", "\n", "occ_1_0", "=", "torch", ".", "sigmoid", "(", "out01", "[", "'occ_b'", "]", ")", "\n", "\n", "F_1_2", "=", "out12", "[", "'flow_f'", "]", "\n", "occ_1_2", "=", "torch", ".", "sigmoid", "(", "out12", "[", "'occ_f'", "]", ")", "\n", "\n", "F_2_1", "=", "out12", "[", "'flow_b'", "]", "\n", "occ_2_1", "=", "torch", ".", "sigmoid", "(", "out12", "[", "'occ_b'", "]", ")", "\n", "\n", "F_2_3", "=", "out23", "[", "'flow_f'", "]", "\n", "occ_2_3", "=", "torch", ".", "sigmoid", "(", "out23", "[", "'occ_f'", "]", ")", "\n", "\n", "F_3_2", "=", "out23", "[", "'flow_b'", "]", "\n", "occ_3_2", "=", "torch", ".", "sigmoid", "(", "out23", "[", "'occ_b'", "]", ")", "\n", "\n", "F_0_x", "=", "torch", ".", "zeros_like", "(", "F_0_1", ")", "\n", "occ_0_x", "=", "torch", ".", "zeros_like", "(", "occ_0_1", ")", "\n", "\n", "F_3_y", "=", "torch", ".", "zeros_like", "(", "F_0_1", ")", "\n", "occ_3_y", "=", "torch", ".", "zeros_like", "(", "occ_0_1", ")", "\n", "\n", "feat0", "=", "torch", ".", "cat", "(", "[", "F_0_x", ",", "occ_0_x", ",", "F_0_1", ",", "occ_0_1", "]", ",", "dim", "=", "1", ")", "\n", "feat1", "=", "torch", ".", "cat", "(", "[", "F_1_0", ",", "occ_1_0", ",", "F_1_2", ",", "occ_1_2", "]", ",", "dim", "=", "1", ")", "\n", "feat2", "=", "torch", ".", "cat", "(", "[", "F_2_1", ",", "occ_2_1", ",", "F_2_3", ",", "occ_2_3", "]", ",", "dim", "=", "1", ")", "\n", "feat3", "=", "torch", ".", "cat", "(", "[", "F_3_2", ",", "occ_3_2", ",", "F_3_y", ",", "occ_3_y", "]", ",", "dim", "=", "1", ")", "\n", "\n", "input_feats", "=", "torch", ".", "stack", "(", "[", "feat0", ",", "feat1", ",", "feat2", ",", "feat3", "]", ",", "dim", "=", "2", ")", "\n", "\n", "feats", "=", "self", ".", "fnet", "(", "input_feats", ")", "\n", "flo_rep", "=", "self", ".", "flo_layer", "(", "feats", ")", "\n", "\n", "F_1_t", "=", "flo_rep", "[", ":", ",", "0", ":", "2", ",", "0", ",", ":", ",", ":", "]", "*", "t", "+", "flo_rep", "[", ":", ",", "2", ":", "4", ",", "0", ",", ":", ",", ":", "]", "*", "t", "**", "2", "\n", "F_2_t", "=", "flo_rep", "[", ":", ",", "0", ":", "2", ",", "1", ",", ":", ",", ":", "]", "*", "(", "1", "-", "t", ")", "+", "flo_rep", "[", ":", ",", "2", ":", "4", ",", "1", ",", ":", ",", ":", "]", "*", "(", "1", "-", "t", ")", "**", "2", "\n", "\n", "\n", "# Flow Reversal", "\n", "Ft1", ",", "norm1", "=", "self", ".", "fwarp", "(", "F_1_t", ",", "F_1_t", ")", "\n", "Ft1", "=", "-", "Ft1", "\n", "Ft2", ",", "norm2", "=", "self", ".", "fwarp", "(", "F_2_t", ",", "F_2_t", ")", "\n", "Ft2", "=", "-", "Ft2", "\n", "\n", "Ft1", "[", "norm1", ">", "0", "]", "=", "Ft1", "[", "norm1", ">", "0", "]", "/", "norm1", "[", "norm1", ">", "0", "]", ".", "clone", "(", ")", "\n", "Ft2", "[", "norm2", ">", "0", "]", "=", "Ft2", "[", "norm2", ">", "0", "]", "/", "norm2", "[", "norm2", ">", "0", "]", ".", "clone", "(", ")", "\n", "\n", "I1t", "=", "backwarp", "(", "I1", ",", "Ft1", ")", "\n", "I2t", "=", "backwarp", "(", "I2", ",", "Ft2", ")", "\n", "\n", "output", ",", "feature", "=", "self", ".", "refinenet", "(", "torch", ".", "cat", "(", "[", "I1", ",", "I2", ",", "I1t", ",", "I2t", ",", "Ft1", ",", "Ft2", "]", ",", "dim", "=", "1", ")", ")", "\n", "\n", "# Adaptive filtering", "\n", "Ft1r", "=", "backwarp", "(", "Ft1", ",", "10", "*", "torch", ".", "tanh", "(", "output", "[", ":", ",", "4", ":", "6", "]", ")", ")", "+", "output", "[", ":", ",", ":", "2", "]", "\n", "Ft2r", "=", "backwarp", "(", "Ft2", ",", "10", "*", "torch", ".", "tanh", "(", "output", "[", ":", ",", "6", ":", "8", "]", ")", ")", "+", "output", "[", ":", ",", "2", ":", "4", "]", "\n", "\n", "I1tf", "=", "backwarp", "(", "I1", ",", "Ft1r", ")", "\n", "I2tf", "=", "backwarp", "(", "I2", ",", "Ft2r", ")", "\n", "\n", "M", "=", "torch", ".", "sigmoid", "(", "self", ".", "masknet", "(", "torch", ".", "cat", "(", "[", "I1tf", ",", "I2tf", ",", "feature", "]", ",", "dim", "=", "1", ")", ")", ")", ".", "repeat", "(", "1", ",", "3", ",", "1", ",", "1", ")", "\n", "\n", "Ft1r", "=", "F", ".", "interpolate", "(", "Ft1r", ",", "(", "H", ",", "W", ")", ",", "mode", "=", "'bilinear'", ")", "\n", "Ft2r", "=", "F", ".", "interpolate", "(", "Ft2r", ",", "(", "H", ",", "W", ")", ",", "mode", "=", "'bilinear'", ")", "\n", "\n", "Ft1r", "[", ":", ",", "0", ",", ":", ",", ":", "]", "=", "Ft1r", "[", ":", ",", "0", ",", ":", ",", ":", "]", "*", "(", "W", "/", "w1", ")", "\n", "Ft1r", "[", ":", ",", "1", ",", ":", ",", ":", "]", "=", "Ft1r", "[", ":", ",", "1", ",", ":", ",", ":", "]", "*", "(", "H", "/", "h1", ")", "\n", "\n", "Ft2r", "[", ":", ",", "0", ",", ":", ",", ":", "]", "=", "Ft2r", "[", ":", ",", "0", ",", ":", ",", ":", "]", "*", "(", "W", "/", "w1", ")", "\n", "Ft2r", "[", ":", ",", "1", ",", ":", ",", ":", "]", "=", "Ft2r", "[", ":", ",", "1", ",", ":", ",", ":", "]", "*", "(", "H", "/", "h1", ")", "\n", "\n", "M", "=", "F", ".", "interpolate", "(", "M", ",", "(", "H", ",", "W", ")", ",", "mode", "=", "'bilinear'", ")", "\n", "\n", "I1tf", "=", "backwarp", "(", "I1_in", ",", "Ft1r", ")", "\n", "I2tf", "=", "backwarp", "(", "I2_in", ",", "Ft2r", ")", "\n", "\n", "Ft_p", "=", "(", "(", "1", "-", "t", ")", "*", "M", "*", "I1tf", "+", "t", "*", "(", "1", "-", "M", ")", "*", "I2tf", ")", "/", "(", "(", "1", "-", "t", ")", "*", "M", "+", "t", "*", "(", "1", "-", "M", ")", ")", "\n", "\n", "\n", "return", "Ft_p", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_NME-VFI.None.model.convert_ckpt": [[20, 28], ["collections.OrderedDict", "state_dict.items"], "function", ["None"], ["def", "convert_ckpt", "(", "state_dict", ")", ":", "\n", "\n", "    ", "new_state_dict", "=", "OrderedDict", "(", ")", "\n", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "        ", "name", "=", "k", "[", "7", ":", "]", "# remove `module.`", "\n", "new_state_dict", "[", "name", "]", "=", "v", "\n", "\n", "", "return", "new_state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_NME-VFI.None.model.backwarp": [[30, 52], ["img.size", "numpy.meshgrid", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.stack", "torch.stack", "torch.stack", "torch.nn.functional.grid_sample", "torch.nn.functional.grid_sample", "torch.nn.functional.grid_sample", "numpy.arange", "numpy.arange", "torch.tensor().cuda.unsqueeze().expand_as().float", "torch.tensor().cuda.unsqueeze().expand_as().float", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor().cuda.unsqueeze().expand_as", "torch.tensor().cuda.unsqueeze().expand_as", "torch.tensor().cuda.unsqueeze", "torch.tensor().cuda.unsqueeze"], "function", ["None"], ["", "def", "backwarp", "(", "img", ",", "flow", ")", ":", "\n", "    ", "_", ",", "_", ",", "H", ",", "W", "=", "img", ".", "size", "(", ")", "\n", "\n", "u", "=", "flow", "[", ":", ",", "0", ",", ":", ",", ":", "]", "\n", "v", "=", "flow", "[", ":", ",", "1", ",", ":", ",", ":", "]", "\n", "\n", "gridX", ",", "gridY", "=", "np", ".", "meshgrid", "(", "np", ".", "arange", "(", "W", ")", ",", "np", ".", "arange", "(", "H", ")", ")", "\n", "\n", "gridX", "=", "torch", ".", "tensor", "(", "gridX", ",", "requires_grad", "=", "False", ",", ")", ".", "cuda", "(", ")", "\n", "gridY", "=", "torch", ".", "tensor", "(", "gridY", ",", "requires_grad", "=", "False", ",", ")", ".", "cuda", "(", ")", "\n", "x", "=", "gridX", ".", "unsqueeze", "(", "0", ")", ".", "expand_as", "(", "u", ")", ".", "float", "(", ")", "+", "u", "\n", "y", "=", "gridY", ".", "unsqueeze", "(", "0", ")", ".", "expand_as", "(", "v", ")", ".", "float", "(", ")", "+", "v", "\n", "# range -1 to 1", "\n", "x", "=", "2", "*", "(", "x", "/", "W", "-", "0.5", ")", "\n", "y", "=", "2", "*", "(", "y", "/", "H", "-", "0.5", ")", "\n", "# stacking X and Y", "\n", "grid", "=", "torch", ".", "stack", "(", "(", "x", ",", "y", ")", ",", "dim", "=", "3", ")", "\n", "\n", "# Sample pixels using bilinear interpolation.", "\n", "imgOut", "=", "torch", ".", "nn", ".", "functional", ".", "grid_sample", "(", "img", ",", "grid", ")", "\n", "\n", "return", "imgOut", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_NME-VFI.None.gridnet3d.lateral_block.__init__": [[8, 21], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d"], "methods", ["home.repos.pwc.inspect_result.saikatdutta_NME-VFI.None.gridnet3d.Grid3DNet.__init__"], ["\t", "def", "__init__", "(", "self", ",", "cin", ",", "cout", ",", "kernel_size", "=", "(", "3", ",", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "1", ",", "1", ")", ",", "res_conn", "=", "True", ")", ":", "\n", "\n", "\t\t", "super", "(", "lateral_block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "block", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "PReLU", "(", ")", ",", "\n", "nn", ".", "Conv3d", "(", "cin", ",", "cout", ",", "kernel_size", ",", "stride", ",", "padding", ")", ",", "\n", "nn", ".", "PReLU", "(", ")", ",", "\n", "nn", ".", "Conv3d", "(", "cout", ",", "cout", ",", "kernel_size", ",", "stride", ",", "padding", ")", "\n", "\n", ")", "\n", "\n", "self", ".", "res_conn", "=", "res_conn", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_NME-VFI.None.gridnet3d.lateral_block.forward": [[22, 27], ["gridnet3d.lateral_block.block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "x1", "=", "self", ".", "block", "(", "x", ")", "\n", "if", "(", "self", ".", "res_conn", ")", ":", "\n", "\t\t\t", "x1", "=", "x", "+", "x1", "\n", "", "return", "x1", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_NME-VFI.None.gridnet3d.down_block.__init__": [[31, 40], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d"], "methods", ["home.repos.pwc.inspect_result.saikatdutta_NME-VFI.None.gridnet3d.Grid3DNet.__init__"], ["\t", "def", "__init__", "(", "self", ",", "cin", ",", "cout", ",", "kernel_size", "=", "(", "3", ",", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ",", "1", ")", ")", ":", "\n", "\n", "\t\t", "super", "(", "down_block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "block", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "PReLU", "(", ")", ",", "\n", "nn", ".", "Conv3d", "(", "cin", ",", "cout", ",", "kernel_size", ",", "(", "1", ",", "2", ",", "2", ")", ",", "padding", ")", ",", "\n", "nn", ".", "PReLU", "(", ")", ",", "\n", "nn", ".", "Conv3d", "(", "cout", ",", "cout", ",", "kernel_size", ",", "(", "1", ",", "1", ",", "1", ")", ",", "padding", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_NME-VFI.None.gridnet3d.down_block.forward": [[43, 46], ["gridnet3d.down_block.block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "x1", "=", "self", ".", "block", "(", "x", ")", "\n", "return", "x1", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_NME-VFI.None.gridnet3d.up_block.__init__": [[50, 60], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d"], "methods", ["home.repos.pwc.inspect_result.saikatdutta_NME-VFI.None.gridnet3d.Grid3DNet.__init__"], ["\t", "def", "__init__", "(", "self", ",", "cin", ",", "cout", ",", "kernel_size", "=", "(", "3", ",", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "1", ",", "1", ")", ")", ":", "\n", "\n", "\t\t", "super", "(", "up_block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "block", "=", "nn", ".", "Sequential", "(", "\n", "# nn.Upsample(scale_factor=[1,2,2], mode= 'bilinear'),", "\n", "nn", ".", "PReLU", "(", ")", ",", "\n", "nn", ".", "Conv3d", "(", "cin", ",", "cout", ",", "kernel_size", ",", "stride", ",", "padding", ")", ",", "\n", "nn", ".", "PReLU", "(", ")", ",", "\n", "nn", ".", "Conv3d", "(", "cout", ",", "cout", ",", "kernel_size", ",", "stride", ",", "padding", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_NME-VFI.None.gridnet3d.up_block.forward": [[64, 68], ["torch.upsample", "torch.upsample", "torch.upsample", "gridnet3d.up_block.block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "x1", "=", "F", ".", "upsample", "(", "x", ",", "scale_factor", "=", "(", "1", ",", "2", ",", "2", ")", ",", "mode", "=", "'trilinear'", ")", "\n", "x1", "=", "self", ".", "block", "(", "x1", ")", "\n", "return", "x1", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_NME-VFI.None.gridnet3d.Grid3DNet.__init__": [[72, 118], ["torch.Module.__init__", "gridnet3d.lateral_block", "gridnet3d.lateral_block", "gridnet3d.lateral_block", "gridnet3d.lateral_block", "gridnet3d.lateral_block", "gridnet3d.lateral_block", "gridnet3d.lateral_block", "gridnet3d.lateral_block", "gridnet3d.lateral_block", "gridnet3d.lateral_block", "gridnet3d.lateral_block", "gridnet3d.lateral_block", "gridnet3d.lateral_block", "gridnet3d.lateral_block", "gridnet3d.lateral_block", "gridnet3d.lateral_block", "gridnet3d.lateral_block", "gridnet3d.down_block", "gridnet3d.down_block", "gridnet3d.down_block", "gridnet3d.down_block", "gridnet3d.down_block", "gridnet3d.down_block", "gridnet3d.up_block", "gridnet3d.up_block", "gridnet3d.up_block", "gridnet3d.up_block", "gridnet3d.up_block", "gridnet3d.up_block"], "methods", ["home.repos.pwc.inspect_result.saikatdutta_NME-VFI.None.gridnet3d.Grid3DNet.__init__"], ["\t", "def", "__init__", "(", "self", ",", "inChannels", ",", "outChannels", ",", "channel_list", "=", "[", "32", ",", "64", ",", "96", "]", ")", ":", "\n", "\n", "\t\t", "super", "(", "Grid3DNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "c1", ",", "c2", ",", "c3", "=", "channel_list", "\n", "\n", "self", ".", "Lin", "=", "lateral_block", "(", "inChannels", ",", "c1", ",", "res_conn", "=", "False", ")", "\n", "\n", "#row0", "\n", "self", ".", "L00", "=", "lateral_block", "(", "c1", ",", "c1", ")", "\n", "self", ".", "L01", "=", "lateral_block", "(", "c1", ",", "c1", ")", "\n", "self", ".", "L02", "=", "lateral_block", "(", "c1", ",", "c1", ")", "\n", "self", ".", "L03", "=", "lateral_block", "(", "c1", ",", "c1", ")", "\n", "self", ".", "L04", "=", "lateral_block", "(", "c1", ",", "c1", ")", "\n", "\n", "#row1", "\n", "self", ".", "L10", "=", "lateral_block", "(", "c2", ",", "c2", ")", "\n", "self", ".", "L11", "=", "lateral_block", "(", "c2", ",", "c2", ")", "\n", "self", ".", "L12", "=", "lateral_block", "(", "c2", ",", "c2", ")", "\n", "self", ".", "L13", "=", "lateral_block", "(", "c2", ",", "c2", ")", "\n", "self", ".", "L14", "=", "lateral_block", "(", "c2", ",", "c2", ")", "\n", "\n", "#row2", "\n", "self", ".", "L20", "=", "lateral_block", "(", "c3", ",", "c3", ")", "\n", "self", ".", "L21", "=", "lateral_block", "(", "c3", ",", "c3", ")", "\n", "self", ".", "L22", "=", "lateral_block", "(", "c3", ",", "c3", ")", "\n", "self", ".", "L23", "=", "lateral_block", "(", "c3", ",", "c3", ")", "\n", "self", ".", "L24", "=", "lateral_block", "(", "c3", ",", "c3", ")", "\n", "\n", "self", ".", "Lout", "=", "lateral_block", "(", "c1", ",", "outChannels", ",", "res_conn", "=", "False", ")", "\n", "\n", "self", ".", "d00", "=", "down_block", "(", "c1", ",", "c2", ")", "\n", "self", ".", "d01", "=", "down_block", "(", "c1", ",", "c2", ")", "\n", "self", ".", "d02", "=", "down_block", "(", "c1", ",", "c2", ")", "\n", "\n", "self", ".", "d10", "=", "down_block", "(", "c2", ",", "c3", ")", "\n", "self", ".", "d11", "=", "down_block", "(", "c2", ",", "c3", ")", "\n", "self", ".", "d12", "=", "down_block", "(", "c2", ",", "c3", ")", "\n", "\n", "self", ".", "u00", "=", "up_block", "(", "c2", ",", "c1", ")", "\n", "self", ".", "u01", "=", "up_block", "(", "c2", ",", "c1", ")", "\n", "self", ".", "u02", "=", "up_block", "(", "c2", ",", "c1", ")", "\n", "\n", "self", ".", "u10", "=", "up_block", "(", "c3", ",", "c2", ")", "\n", "self", ".", "u11", "=", "up_block", "(", "c3", ",", "c2", ")", "\n", "self", ".", "u12", "=", "up_block", "(", "c3", ",", "c2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_NME-VFI.None.gridnet3d.Grid3DNet.forward": [[119, 164], ["gridnet3d.Grid3DNet.Lin", "gridnet3d.Grid3DNet.L00", "gridnet3d.Grid3DNet.L01", "gridnet3d.Grid3DNet.L02", "gridnet3d.Grid3DNet.d00", "gridnet3d.Grid3DNet.d01", "gridnet3d.Grid3DNet.d02", "gridnet3d.Grid3DNet.L10", "gridnet3d.Grid3DNet.L11", "gridnet3d.Grid3DNet.L12", "gridnet3d.Grid3DNet.d10", "gridnet3d.Grid3DNet.d11", "gridnet3d.Grid3DNet.d12", "gridnet3d.Grid3DNet.L20", "gridnet3d.Grid3DNet.L21", "gridnet3d.Grid3DNet.L22", "gridnet3d.Grid3DNet.u10", "gridnet3d.Grid3DNet.L23", "gridnet3d.Grid3DNet.u11", "gridnet3d.Grid3DNet.L24", "gridnet3d.Grid3DNet.u12", "gridnet3d.Grid3DNet.L13", "gridnet3d.Grid3DNet.L14", "gridnet3d.Grid3DNet.u00", "gridnet3d.Grid3DNet.u01", "gridnet3d.Grid3DNet.u02", "gridnet3d.Grid3DNet.L03", "gridnet3d.Grid3DNet.L04", "gridnet3d.Grid3DNet.Lout"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "\t\t", "out_Lin", "=", "self", ".", "Lin", "(", "x", ")", "\n", "out_L00", "=", "self", ".", "L00", "(", "out_Lin", ")", "\n", "out_L01", "=", "self", ".", "L01", "(", "out_L00", ")", "\n", "out_L02", "=", "self", ".", "L02", "(", "out_L01", ")", "\n", "\n", "\n", "out_d00", "=", "self", ".", "d00", "(", "out_Lin", ")", "\n", "out_d01", "=", "self", ".", "d01", "(", "out_L00", ")", "\n", "out_d02", "=", "self", ".", "d02", "(", "out_L01", ")", "\n", "\n", "\n", "out_L10", "=", "self", ".", "L10", "(", "out_d00", ")", "\n", "out_L11", "=", "self", ".", "L11", "(", "out_d01", "+", "out_L10", ")", "\n", "out_L12", "=", "self", ".", "L12", "(", "out_d02", "+", "out_L11", ")", "\n", "\n", "out_d10", "=", "self", ".", "d10", "(", "out_d00", ")", "\n", "out_d11", "=", "self", ".", "d11", "(", "out_L10", "+", "out_d01", ")", "\n", "out_d12", "=", "self", ".", "d12", "(", "out_L11", "+", "out_d02", ")", "\n", "\n", "out_L20", "=", "self", ".", "L20", "(", "out_d10", ")", "\n", "out_L21", "=", "self", ".", "L21", "(", "out_d11", "+", "out_L20", ")", "\n", "out_L22", "=", "self", ".", "L22", "(", "out_d12", "+", "out_L21", ")", "\n", "\n", "\n", "out_u10", "=", "self", ".", "u10", "(", "out_L22", ")", "\n", "out_L23", "=", "self", ".", "L23", "(", "out_L22", ")", "\n", "out_u11", "=", "self", ".", "u11", "(", "out_L23", ")", "\n", "out_L24", "=", "self", ".", "L24", "(", "out_L23", ")", "\n", "out_u12", "=", "self", ".", "u12", "(", "out_L24", ")", "\n", "\n", "out_L13", "=", "self", ".", "L13", "(", "out_u10", "+", "out_L12", ")", "\n", "out_L14", "=", "self", ".", "L14", "(", "out_u11", "+", "out_L13", ")", "\n", "out_u00", "=", "self", ".", "u00", "(", "out_u10", "+", "out_L12", ")", "\n", "out_u01", "=", "self", ".", "u01", "(", "out_u11", "+", "out_L13", ")", "\n", "out_u02", "=", "self", ".", "u02", "(", "out_u12", "+", "out_L14", ")", "\n", "\n", "\n", "out_L03", "=", "self", ".", "L03", "(", "out_u00", "+", "out_L02", ")", "\n", "out_L04", "=", "self", ".", "L04", "(", "out_u01", "+", "out_L03", ")", "\n", "\n", "out_final", "=", "self", ".", "Lout", "(", "out_L04", "+", "out_u02", ")", "\n", "\n", "return", "out_final", "\n", "\n"]]}