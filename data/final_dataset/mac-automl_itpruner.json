{"home.repos.pwc.inspect_result.mac-automl_itpruner.ToyExample.cal_FLOPs.print_model_parm_flops": [[11, 97], ["cal_FLOPs.print_model_parm_flops.foo"], "function", ["None"], ["def", "print_model_parm_flops", "(", "one_shot_model", ")", ":", "\n", "    ", "prods", "=", "{", "}", "\n", "def", "save_hook", "(", "name", ")", ":", "\n", "        ", "def", "hook_per", "(", "self", ",", "input", ",", "output", ")", ":", "\n", "            ", "prods", "[", "name", "]", "=", "np", ".", "prod", "(", "input", "[", "0", "]", ".", "shape", ")", "\n", "", "return", "hook_per", "\n", "\n", "", "list_1", "=", "[", "]", "\n", "def", "simple_hook", "(", "self", ",", "input", ",", "output", ")", ":", "\n", "        ", "list_1", ".", "append", "(", "np", ".", "prod", "(", "input", "[", "0", "]", ".", "shape", ")", ")", "\n", "", "list_2", "=", "{", "}", "\n", "def", "simple_hook2", "(", "self", ",", "input", ",", "output", ")", ":", "\n", "        ", "list_2", "[", "'names'", "]", "=", "np", ".", "prod", "(", "input", "[", "0", "]", ".", "shape", ")", "\n", "\n", "\n", "", "multiply_adds", "=", "False", "\n", "list_conv", "=", "[", "]", "\n", "def", "conv_hook", "(", "self", ",", "input", ",", "output", ")", ":", "\n", "        ", "batch_size", ",", "input_channels", ",", "input_height", ",", "input_width", "=", "input", "[", "0", "]", ".", "size", "(", ")", "\n", "output_channels", ",", "output_height", ",", "output_width", "=", "output", "[", "0", "]", ".", "size", "(", ")", "\n", "\n", "kernel_ops", "=", "self", ".", "kernel_size", "[", "0", "]", "*", "self", ".", "kernel_size", "[", "1", "]", "*", "(", "self", ".", "in_channels", "/", "self", ".", "groups", ")", "*", "(", "2", "if", "multiply_adds", "else", "1", ")", "\n", "bias_ops", "=", "1", "if", "self", ".", "bias", "is", "not", "None", "else", "0", "\n", "\n", "params", "=", "output_channels", "*", "(", "kernel_ops", "+", "bias_ops", ")", "\n", "flops", "=", "batch_size", "*", "params", "*", "output_height", "*", "output_width", "\n", "\n", "list_conv", ".", "append", "(", "flops", ")", "\n", "\n", "\n", "", "list_linear", "=", "[", "]", "\n", "def", "linear_hook", "(", "self", ",", "input", ",", "output", ")", ":", "\n", "        ", "batch_size", "=", "input", "[", "0", "]", ".", "size", "(", "0", ")", "if", "input", "[", "0", "]", ".", "dim", "(", ")", "==", "2", "else", "1", "\n", "\n", "weight_ops", "=", "self", ".", "weight", ".", "nelement", "(", ")", "*", "(", "2", "if", "multiply_adds", "else", "1", ")", "\n", "bias_ops", "=", "self", ".", "bias", ".", "nelement", "(", ")", "\n", "\n", "flops", "=", "batch_size", "*", "(", "weight_ops", "+", "bias_ops", ")", "\n", "list_linear", ".", "append", "(", "flops", ")", "\n", "\n", "", "list_bn", "=", "[", "]", "\n", "def", "bn_hook", "(", "self", ",", "input", ",", "output", ")", ":", "\n", "        ", "list_bn", ".", "append", "(", "input", "[", "0", "]", ".", "nelement", "(", ")", ")", "\n", "\n", "", "list_relu", "=", "[", "]", "\n", "def", "relu_hook", "(", "self", ",", "input", ",", "output", ")", ":", "\n", "        ", "list_relu", ".", "append", "(", "input", "[", "0", "]", ".", "nelement", "(", ")", ")", "\n", "\n", "", "list_pooling", "=", "[", "]", "\n", "def", "pooling_hook", "(", "self", ",", "input", ",", "output", ")", ":", "\n", "        ", "batch_size", ",", "input_channels", ",", "input_height", ",", "input_width", "=", "input", "[", "0", "]", ".", "size", "(", ")", "\n", "output_channels", ",", "output_height", ",", "output_width", "=", "output", "[", "0", "]", ".", "size", "(", ")", "\n", "\n", "kernel_ops", "=", "self", ".", "kernel_size", "*", "self", ".", "kernel_size", "\n", "bias_ops", "=", "0", "\n", "params", "=", "output_channels", "*", "(", "kernel_ops", "+", "bias_ops", ")", "\n", "flops", "=", "batch_size", "*", "params", "*", "output_height", "*", "output_width", "\n", "\n", "list_pooling", ".", "append", "(", "flops", ")", "\n", "\n", "", "def", "foo", "(", "net", ")", ":", "\n", "        ", "childrens", "=", "list", "(", "net", ".", "children", "(", ")", ")", "\n", "if", "not", "childrens", ":", "\n", "            ", "if", "isinstance", "(", "net", ",", "torch", ".", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "net", ".", "register_forward_hook", "(", "conv_hook", ")", "\n", "", "if", "isinstance", "(", "net", ",", "torch", ".", "nn", ".", "Linear", ")", ":", "\n", "                ", "net", ".", "register_forward_hook", "(", "linear_hook", ")", "\n", "", "if", "isinstance", "(", "net", ",", "torch", ".", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "net", ".", "register_forward_hook", "(", "bn_hook", ")", "\n", "", "if", "isinstance", "(", "net", ",", "torch", ".", "nn", ".", "ReLU", ")", ":", "\n", "                ", "net", ".", "register_forward_hook", "(", "relu_hook", ")", "\n", "", "if", "isinstance", "(", "net", ",", "torch", ".", "nn", ".", "MaxPool2d", ")", "or", "isinstance", "(", "net", ",", "torch", ".", "nn", ".", "AvgPool2d", ")", ":", "\n", "                ", "net", ".", "register_forward_hook", "(", "pooling_hook", ")", "\n", "", "return", "\n", "", "for", "c", "in", "childrens", ":", "\n", "            ", "foo", "(", "c", ")", "\n", "\n", "", "", "foo", "(", "one_shot_model", ")", "\n", "input", "=", "Variable", "(", "torch", ".", "rand", "(", "3", ",", "224", ",", "224", ")", ".", "unsqueeze", "(", "0", ")", ",", "requires_grad", "=", "True", ")", ".", "cuda", "(", ")", "\n", "out", "=", "one_shot_model", "(", "input", ")", "\n", "\n", "total_flops", "=", "(", "sum", "(", "list_conv", ")", "+", "sum", "(", "list_linear", ")", "+", "sum", "(", "list_bn", ")", "+", "sum", "(", "list_relu", ")", "+", "sum", "(", "list_pooling", ")", ")", "\n", "M_flops", "=", "total_flops", "/", "1e6", "\n", "#print('  + Number of FLOPs: %.2fM' % (M_flops))", "\n", "\n", "return", "M_flops", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.ToyExample.run_manager.RunConfig.__init__": [[23, 54], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "n_epochs", ",", "init_lr", ",", "lr_schedule_type", ",", "lr_schedule_param", ",", "\n", "dataset", ",", "train_batch_size", ",", "test_batch_size", ",", "\n", "opt_type", ",", "opt_param", ",", "weight_decay", ",", "label_smoothing", ",", "no_decay_keys", ",", "\n", "model_init", ",", "init_div_groups", ",", "validation_frequency", ",", "print_frequency", ",", "local_rank", ",", "world_size", ",", "sync_bn", ",", "\n", "warm_epoch", ")", ":", "\n", "        ", "self", ".", "n_epochs", "=", "n_epochs", "\n", "self", ".", "init_lr", "=", "init_lr", "\n", "self", ".", "lr_schedule_type", "=", "lr_schedule_type", "\n", "self", ".", "lr_schedule_param", "=", "lr_schedule_param", "\n", "self", ".", "warm_epoch", "=", "warm_epoch", "\n", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "train_batch_size", "=", "train_batch_size", "\n", "self", ".", "test_batch_size", "=", "test_batch_size", "\n", "\n", "self", ".", "opt_type", "=", "opt_type", "\n", "self", ".", "opt_param", "=", "opt_param", "\n", "self", ".", "weight_decay", "=", "weight_decay", "\n", "self", ".", "label_smoothing", "=", "label_smoothing", "\n", "self", ".", "no_decay_keys", "=", "no_decay_keys", "\n", "\n", "self", ".", "model_init", "=", "model_init", "\n", "self", ".", "init_div_groups", "=", "init_div_groups", "\n", "self", ".", "validation_frequency", "=", "validation_frequency", "\n", "self", ".", "print_frequency", "=", "print_frequency", "\n", "\n", "self", ".", "_data_provider", "=", "None", "\n", "self", ".", "_train_iter", ",", "self", ".", "_valid_iter", ",", "self", ".", "_test_iter", "=", "None", ",", "None", ",", "None", "\n", "self", ".", "local_rank", "=", "local_rank", "\n", "self", ".", "world_size", "=", "world_size", "\n", "self", ".", "sync_bn", "=", "sync_bn", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.ToyExample.run_manager.RunConfig.config": [[55, 62], ["key.startswith"], "methods", ["None"], ["", "@", "property", "\n", "def", "config", "(", "self", ")", ":", "\n", "        ", "config", "=", "{", "}", "\n", "for", "key", "in", "self", ".", "__dict__", ":", "\n", "            ", "if", "not", "key", ".", "startswith", "(", "'_'", ")", ":", "\n", "                ", "config", "[", "key", "]", "=", "self", ".", "__dict__", "[", "key", "]", "\n", "", "", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.ToyExample.run_manager.RunConfig.copy": [[63, 65], ["run_manager.RunConfig"], "methods", ["None"], ["", "def", "copy", "(", "self", ")", ":", "\n", "        ", "return", "RunConfig", "(", "**", "self", ".", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.ToyExample.run_manager.RunConfig._calc_learning_rate": [[68, 81], ["ValueError", "math.cos"], "methods", ["None"], ["def", "_calc_learning_rate", "(", "self", ",", "epoch", ",", "batch", "=", "0", ",", "nBatch", "=", "None", ",", "warm_epoch", "=", "5", ")", ":", "\n", "        ", "if", "self", ".", "lr_schedule_type", "==", "'cosine'", ":", "\n", "            ", "T_total", "=", "self", ".", "n_epochs", "*", "nBatch", "\n", "T_cur", "=", "epoch", "*", "nBatch", "+", "batch", "\n", "T_warm", "=", "warm_epoch", "*", "nBatch", "\n", "if", "T_cur", "<", "T_warm", ":", "\n", "                ", "lr", "=", "T_cur", "/", "T_warm", "*", "self", ".", "init_lr", "\n", "", "else", ":", "\n", "                ", "lr", "=", "0.5", "*", "self", ".", "init_lr", "*", "(", "1", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "(", "T_cur", "-", "T_warm", ")", "/", "(", "T_total", "-", "T_warm", ")", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'do not support: %s'", "%", "self", ".", "lr_schedule_type", ")", "\n", "", "return", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.ToyExample.run_manager.RunConfig.adjust_learning_rate": [[82, 89], ["run_manager.RunConfig._calc_learning_rate"], "methods", ["home.repos.pwc.inspect_result.mac-automl_itpruner.Cifar.run_manager.RunConfig._calc_learning_rate"], ["", "def", "adjust_learning_rate", "(", "self", ",", "optimizer", ",", "epoch", ",", "batch", "=", "0", ",", "nBatch", "=", "None", ")", ":", "\n", "        ", "\"\"\" adjust learning of a given optimizer and return the new learning rate \"\"\"", "\n", "new_lr", "=", "self", ".", "_calc_learning_rate", "(", "\n", "epoch", ",", "batch", ",", "nBatch", ",", "self", ".", "warm_epoch", ")", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "new_lr", "\n", "", "return", "new_lr", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.ToyExample.run_manager.RunConfig.data_config": [[92, 95], ["None"], "methods", ["None"], ["@", "property", "\n", "def", "data_config", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.ToyExample.run_manager.RunConfig.data_provider": [[106, 109], ["None"], "methods", ["None"], ["", "@", "data_provider", ".", "setter", "\n", "def", "data_provider", "(", "self", ",", "val", ")", ":", "\n", "        ", "self", ".", "_data_provider", "=", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.ToyExample.run_manager.RunConfig.train_loader": [[110, 113], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "train_loader", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "data_provider", ".", "train", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.ToyExample.run_manager.RunConfig.valid_loader": [[114, 117], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "valid_loader", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "data_provider", ".", "valid", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.ToyExample.run_manager.RunConfig.test_loader": [[118, 121], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "test_loader", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "data_provider", ".", "test", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.ToyExample.run_manager.RunConfig.build_optimizer": [[124, 141], ["opt_param.get", "opt_param.get", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD"], "methods", ["None"], ["def", "build_optimizer", "(", "self", ",", "net_params", ")", ":", "\n", "        ", "if", "self", ".", "opt_type", "==", "'sgd'", ":", "\n", "            ", "opt_param", "=", "{", "}", "if", "self", ".", "opt_param", "is", "None", "else", "self", ".", "opt_param", "\n", "momentum", ",", "nesterov", "=", "opt_param", ".", "get", "(", "\n", "'momentum'", ",", "0.9", ")", ",", "opt_param", ".", "get", "(", "'nesterov'", ",", "True", ")", "\n", "if", "self", ".", "no_decay_keys", ":", "\n", "                ", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "[", "\n", "{", "'params'", ":", "net_params", "[", "0", "]", ",", "\n", "'weight_decay'", ":", "self", ".", "weight_decay", "}", ",", "\n", "{", "'params'", ":", "net_params", "[", "1", "]", ",", "'weight_decay'", ":", "0", "}", ",", "\n", "]", ",", "lr", "=", "self", ".", "init_lr", ",", "momentum", "=", "momentum", ",", "nesterov", "=", "nesterov", ")", "\n", "", "else", ":", "\n", "                ", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "net_params", ",", "self", ".", "init_lr", ",", "momentum", "=", "momentum", ",", "nesterov", "=", "nesterov", ",", "\n", "weight_decay", "=", "self", ".", "weight_decay", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "return", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.ToyExample.run_manager.RunManager.__init__": [[144, 185], ["torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "run_manager.RunManager.net.init_model", "run_manager.RunManager.net.cuda", "print", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "apex.parallel.DistributedDataParallel", "run_manager.RunManager.print_net_info", "apex.parallel.convert_syncbn_model", "run_manager.RunManager.run_config.no_decay_keys.split", "run_manager.RunManager.run_config.build_optimizer", "run_manager.RunManager.run_config.build_optimizer", "float", "run_manager.RunManager.net.weight_parameters", "run_manager.RunManager.net.get_parameters", "run_manager.RunManager.net.get_parameters"], "methods", ["home.repos.pwc.inspect_result.mac-automl_itpruner.nets.base_models.MyNetwork.init_model", "home.repos.pwc.inspect_result.mac-automl_itpruner.Cifar.run_manager.RunManager.print_net_info", "home.repos.pwc.inspect_result.mac-automl_itpruner.Cifar.run_manager.RunConfig.build_optimizer", "home.repos.pwc.inspect_result.mac-automl_itpruner.Cifar.run_manager.RunConfig.build_optimizer", "home.repos.pwc.inspect_result.mac-automl_itpruner.nets.base_models.MyNetwork.weight_parameters", "home.repos.pwc.inspect_result.mac-automl_itpruner.nets.base_models.MyNetwork.get_parameters", "home.repos.pwc.inspect_result.mac-automl_itpruner.nets.base_models.MyNetwork.get_parameters"], ["    ", "def", "__init__", "(", "self", ",", "path", ",", "net", ",", "run_config", ":", "RunConfig", ",", "out_log", "=", "True", ")", ":", "\n", "        ", "self", ".", "path", "=", "path", "\n", "self", ".", "net", "=", "net", "\n", "self", ".", "run_config", "=", "run_config", "\n", "self", ".", "out_log", "=", "out_log", "\n", "\n", "self", ".", "_logs_path", ",", "self", ".", "_save_path", "=", "None", ",", "None", "\n", "self", ".", "best_acc", "=", "0", "\n", "self", ".", "start_epoch", "=", "0", "\n", "gpu", "=", "self", ".", "run_config", ".", "local_rank", "\n", "torch", ".", "cuda", ".", "set_device", "(", "gpu", ")", "\n", "\n", "# initialize model (default)", "\n", "self", ".", "net", ".", "init_model", "(", "run_config", ".", "model_init", ",", "run_config", ".", "init_div_groups", ")", "\n", "\n", "# net info", "\n", "self", ".", "net", "=", "self", ".", "net", ".", "cuda", "(", ")", "\n", "if", "run_config", ".", "local_rank", "==", "0", ":", "\n", "            ", "self", ".", "print_net_info", "(", ")", "\n", "\n", "", "if", "self", ".", "run_config", ".", "sync_bn", ":", "\n", "            ", "self", ".", "net", "=", "apex", ".", "parallel", ".", "convert_syncbn_model", "(", "self", ".", "net", ")", "\n", "", "print", "(", "'local_rank: %d'", "%", "self", ".", "run_config", ".", "local_rank", ")", "\n", "\n", "self", ".", "run_config", ".", "init_lr", "=", "self", ".", "run_config", ".", "init_lr", "*", "float", "(", "\n", "self", ".", "run_config", ".", "train_batch_size", "*", "self", ".", "run_config", ".", "world_size", ")", "/", "256.", "\n", "self", ".", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "if", "self", ".", "run_config", ".", "no_decay_keys", ":", "\n", "            ", "keys", "=", "self", ".", "run_config", ".", "no_decay_keys", ".", "split", "(", "'#'", ")", "\n", "self", ".", "optimizer", "=", "self", ".", "run_config", ".", "build_optimizer", "(", "[", "\n", "# parameters with weight decay", "\n", "self", ".", "net", ".", "get_parameters", "(", "keys", ",", "mode", "=", "'exclude'", ")", ",", "\n", "# parameters without weight decay", "\n", "self", ".", "net", ".", "get_parameters", "(", "keys", ",", "mode", "=", "'include'", ")", ",", "\n", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "optimizer", "=", "self", ".", "run_config", ".", "build_optimizer", "(", "\n", "self", ".", "net", ".", "weight_parameters", "(", ")", ")", "\n", "# self.net, self.optimizer = amp.initialize(self.net, self.optimizer, opt_level='O1')", "\n", "", "self", ".", "net", "=", "DDP", "(", "self", ".", "net", ",", "delay_allreduce", "=", "True", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.ToyExample.run_manager.RunManager.save_path": [[188, 195], ["os.path.join", "os.makedirs"], "methods", ["None"], ["@", "property", "\n", "def", "save_path", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_save_path", "is", "None", ":", "\n", "            ", "save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "path", ",", "'checkpoint'", ")", "\n", "os", ".", "makedirs", "(", "save_path", ",", "exist_ok", "=", "True", ")", "\n", "self", ".", "_save_path", "=", "save_path", "\n", "", "return", "self", ".", "_save_path", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.ToyExample.run_manager.RunManager.logs_path": [[196, 203], ["os.path.join", "os.makedirs"], "methods", ["None"], ["", "@", "property", "\n", "def", "logs_path", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_logs_path", "is", "None", ":", "\n", "            ", "logs_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "path", ",", "'logs'", ")", "\n", "os", ".", "makedirs", "(", "logs_path", ",", "exist_ok", "=", "True", ")", "\n", "self", ".", "_logs_path", "=", "logs_path", "\n", "", "return", "self", ".", "_logs_path", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.ToyExample.run_manager.RunManager.reset_model": [[206, 244], ["run_manager.RunManager.net.init_model", "run_manager.RunManager.net.cuda", "print", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "apex.parallel.DistributedDataParallel", "utils.get_unpruned_weights", "run_manager.RunManager.print_net_info", "apex.parallel.convert_syncbn_model", "run_manager.RunManager.run_config.no_decay_keys.split", "run_manager.RunManager.run_config.build_optimizer", "run_manager.RunManager.run_config.build_optimizer", "print", "print", "run_manager.RunManager.net.weight_parameters", "run_manager.RunManager.net.get_parameters", "run_manager.RunManager.net.get_parameters"], "methods", ["home.repos.pwc.inspect_result.mac-automl_itpruner.nets.base_models.MyNetwork.init_model", "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.pytorch_utils.get_unpruned_weights", "home.repos.pwc.inspect_result.mac-automl_itpruner.Cifar.run_manager.RunManager.print_net_info", "home.repos.pwc.inspect_result.mac-automl_itpruner.Cifar.run_manager.RunConfig.build_optimizer", "home.repos.pwc.inspect_result.mac-automl_itpruner.Cifar.run_manager.RunConfig.build_optimizer", "home.repos.pwc.inspect_result.mac-automl_itpruner.nets.base_models.MyNetwork.weight_parameters", "home.repos.pwc.inspect_result.mac-automl_itpruner.nets.base_models.MyNetwork.get_parameters", "home.repos.pwc.inspect_result.mac-automl_itpruner.nets.base_models.MyNetwork.get_parameters"], ["def", "reset_model", "(", "self", ",", "model", ",", "model_origin", "=", "None", ")", ":", "\n", "        ", "self", ".", "net", "=", "model", "\n", "self", ".", "net", ".", "init_model", "(", "self", ".", "run_config", ".", "model_init", ",", "\n", "self", ".", "run_config", ".", "init_div_groups", ")", "\n", "if", "model_origin", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "run_config", ".", "local_rank", "==", "0", ":", "\n", "                ", "print", "(", "'-'", "*", "30", "+", "' start pruning '", "+", "'-'", "*", "30", ")", "\n", "", "get_unpruned_weights", "(", "self", ".", "net", ",", "model_origin", ")", "\n", "if", "self", ".", "run_config", ".", "local_rank", "==", "0", ":", "\n", "                ", "print", "(", "'-'", "*", "30", "+", "' end pruning '", "+", "'-'", "*", "30", ")", "\n", "# net info", "\n", "", "", "self", ".", "net", "=", "self", ".", "net", ".", "cuda", "(", ")", "\n", "if", "self", ".", "run_config", ".", "local_rank", "==", "0", ":", "\n", "            ", "self", ".", "print_net_info", "(", ")", "\n", "\n", "", "if", "self", ".", "run_config", ".", "sync_bn", ":", "\n", "            ", "self", ".", "net", "=", "apex", ".", "parallel", ".", "convert_syncbn_model", "(", "self", ".", "net", ")", "\n", "", "print", "(", "'local_rank: %d'", "%", "self", ".", "run_config", ".", "local_rank", ")", "\n", "\n", "self", ".", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "if", "self", ".", "run_config", ".", "no_decay_keys", ":", "\n", "            ", "keys", "=", "self", ".", "run_config", ".", "no_decay_keys", ".", "split", "(", "'#'", ")", "\n", "self", ".", "optimizer", "=", "self", ".", "run_config", ".", "build_optimizer", "(", "[", "\n", "# parameters with weight decay", "\n", "self", ".", "net", ".", "get_parameters", "(", "keys", ",", "mode", "=", "'exclude'", ")", ",", "\n", "# parameters without weight decay", "\n", "self", ".", "net", ".", "get_parameters", "(", "keys", ",", "mode", "=", "'include'", ")", ",", "\n", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "optimizer", "=", "self", ".", "run_config", ".", "build_optimizer", "(", "\n", "self", ".", "net", ".", "weight_parameters", "(", ")", ")", "\n", "# model, self.optimizer = amp.initialize(model, self.optimizer,", "\n", "#                                        opt_level='O2',", "\n", "#                                        keep_batchnorm_fp32=True,", "\n", "#                                        loss_scale=1.0", "\n", "#                                        )", "\n", "", "self", ".", "net", "=", "DDP", "(", "self", ".", "net", ",", "delay_allreduce", "=", "True", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "# if model_origin!=None:", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.ToyExample.run_manager.RunManager.net_flops": [[252, 260], ["torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "list", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torchprofile.profile_macs", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "net_flops", "(", "self", ")", ":", "\n", "        ", "data_shape", "=", "[", "1", "]", "+", "list", "(", "self", ".", "run_config", ".", "data_provider", ".", "data_shape", ")", "\n", "\n", "net", "=", "self", ".", "net", "\n", "input_var", "=", "torch", ".", "zeros", "(", "data_shape", ")", ".", "cuda", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "flops", "=", "profile_macs", "(", "net", ",", "input_var", ")", "\n", "", "return", "flops", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.ToyExample.run_manager.RunManager.print_net_info": [[261, 283], ["utils.count_parameters", "run_manager.RunManager.net_flops", "str", "print", "print", "print", "open", "fout.write", "str", "json.dumps"], "methods", ["home.repos.pwc.inspect_result.mac-automl_itpruner.utils.pytorch_utils.count_parameters", "home.repos.pwc.inspect_result.mac-automl_itpruner.Cifar.run_manager.RunManager.net_flops"], ["", "def", "print_net_info", "(", "self", ")", ":", "\n", "# parameters", "\n", "        ", "total_params", "=", "count_parameters", "(", "self", ".", "net", ")", "\n", "if", "self", ".", "out_log", ":", "\n", "            ", "print", "(", "'Total training params: %.2fM'", "%", "(", "total_params", "/", "1e6", ")", ")", "\n", "", "net_info", "=", "{", "\n", "'param'", ":", "'%.2fM'", "%", "(", "total_params", "/", "1e6", ")", ",", "\n", "}", "\n", "\n", "# flops", "\n", "flops", "=", "self", ".", "net_flops", "(", ")", "\n", "if", "self", ".", "out_log", ":", "\n", "            ", "print", "(", "'Total FLOPs: %.1fM'", "%", "(", "flops", "/", "1e6", ")", ")", "\n", "", "net_info", "[", "'flops'", "]", "=", "'%.1fM'", "%", "(", "flops", "/", "1e6", ")", "\n", "\n", "# config", "\n", "if", "self", ".", "out_log", ":", "\n", "            ", "print", "(", "'Net config: '", "+", "str", "(", "self", ".", "net", ".", "config", ")", ")", "\n", "", "net_info", "[", "'config'", "]", "=", "str", "(", "self", ".", "net", ".", "config", ")", "\n", "\n", "with", "open", "(", "'%s/net_info.txt'", "%", "self", ".", "logs_path", ",", "'w'", ")", "as", "fout", ":", "\n", "            ", "fout", ".", "write", "(", "json", ".", "dumps", "(", "net_info", ",", "indent", "=", "4", ")", "+", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.ToyExample.run_manager.RunManager.save_model": [[286, 304], ["os.path.join", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "open", "fout.write", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "run_manager.RunManager.net.module.state_dict"], "methods", ["home.repos.pwc.inspect_result.mac-automl_itpruner.utils.utils.WarmUpCosineLRScheduler.state_dict"], ["def", "save_model", "(", "self", ",", "checkpoint", "=", "None", ",", "is_best", "=", "False", ",", "model_name", "=", "None", ")", ":", "\n", "        ", "if", "checkpoint", "is", "None", ":", "\n", "            ", "checkpoint", "=", "{", "'state_dict'", ":", "self", ".", "net", ".", "module", ".", "state_dict", "(", ")", "}", "\n", "\n", "", "if", "model_name", "is", "None", ":", "\n", "            ", "model_name", "=", "'checkpoint.pth.tar'", "\n", "\n", "# add `dataset` info to the checkpoint", "\n", "", "checkpoint", "[", "'dataset'", "]", "=", "self", ".", "run_config", ".", "dataset", "\n", "latest_fname", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_path", ",", "'latest.txt'", ")", "\n", "model_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_path", ",", "model_name", ")", "\n", "with", "open", "(", "latest_fname", ",", "'w'", ")", "as", "fout", ":", "\n", "            ", "fout", ".", "write", "(", "model_path", "+", "'\\n'", ")", "\n", "", "torch", ".", "save", "(", "checkpoint", ",", "model_path", ")", "\n", "\n", "if", "is_best", ":", "\n", "            ", "best_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_path", ",", "'model_best.pth.tar'", ")", "\n", "torch", ".", "save", "(", "{", "'state_dict'", ":", "checkpoint", "[", "'state_dict'", "]", "}", ",", "best_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.ToyExample.run_manager.RunManager.load_model": [[305, 345], ["os.path.join", "os.path.exists", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "run_manager.RunManager.net.module.load_state_dict", "int", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "numpy.random.seed", "open", "fin.readline", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "time.time", "run_manager.RunManager.optimizer.load_state_dict", "print", "os.path.exists", "open", "fout.write", "print"], "methods", ["home.repos.pwc.inspect_result.mac-automl_itpruner.utils.utils.WarmUpCosineLRScheduler.load_state_dict", "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.utils.WarmUpCosineLRScheduler.load_state_dict"], ["", "", "def", "load_model", "(", "self", ",", "model_fname", "=", "None", ")", ":", "\n", "        ", "latest_fname", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_path", ",", "'latest.txt'", ")", "\n", "if", "model_fname", "is", "None", "and", "os", ".", "path", ".", "exists", "(", "latest_fname", ")", ":", "\n", "            ", "with", "open", "(", "latest_fname", ",", "'r'", ")", "as", "fin", ":", "\n", "                ", "model_fname", "=", "fin", ".", "readline", "(", ")", "\n", "if", "model_fname", "[", "-", "1", "]", "==", "'\\n'", ":", "\n", "                    ", "model_fname", "=", "model_fname", "[", ":", "-", "1", "]", "\n", "# noinspection PyBroadException", "\n", "", "", "", "try", ":", "\n", "            ", "if", "model_fname", "is", "None", "or", "not", "os", ".", "path", ".", "exists", "(", "model_fname", ")", ":", "\n", "                ", "model_fname", "=", "'%s/checkpoint.pth.tar'", "%", "self", ".", "save_path", "\n", "with", "open", "(", "latest_fname", ",", "'w'", ")", "as", "fout", ":", "\n", "                    ", "fout", ".", "write", "(", "model_fname", "+", "'\\n'", ")", "\n", "", "", "if", "self", ".", "out_log", ":", "\n", "                ", "print", "(", "\"=> loading checkpoint '{}'\"", ".", "format", "(", "model_fname", ")", ")", "\n", "\n", "", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                ", "checkpoint", "=", "torch", ".", "load", "(", "model_fname", ")", "\n", "", "else", ":", "\n", "                ", "checkpoint", "=", "torch", ".", "load", "(", "model_fname", ",", "map_location", "=", "'cpu'", ")", "\n", "\n", "", "self", ".", "net", ".", "module", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "# set new manual seed", "\n", "new_manual_seed", "=", "int", "(", "time", ".", "time", "(", ")", ")", "\n", "torch", ".", "manual_seed", "(", "new_manual_seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "new_manual_seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "new_manual_seed", ")", "\n", "\n", "if", "'epoch'", "in", "checkpoint", ":", "\n", "                ", "self", ".", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "+", "1", "\n", "", "if", "'best_acc'", "in", "checkpoint", ":", "\n", "                ", "self", ".", "best_acc", "=", "checkpoint", "[", "'best_acc'", "]", "\n", "", "if", "'optimizer'", "in", "checkpoint", ":", "\n", "                ", "self", ".", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "\n", "", "if", "self", ".", "out_log", ":", "\n", "                ", "print", "(", "\"=> loaded checkpoint '{}'\"", ".", "format", "(", "model_fname", ")", ")", "\n", "", "", "except", "Exception", ":", "\n", "            ", "if", "self", ".", "out_log", ":", "\n", "                ", "print", "(", "'fail to load checkpoint from %s'", "%", "self", ".", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.ToyExample.run_manager.RunManager.save_config": [[346, 358], ["os.makedirs", "os.path.join", "json.dump", "os.path.join", "json.dump", "open", "print", "open", "print"], "methods", ["None"], ["", "", "", "def", "save_config", "(", "self", ",", "print_info", "=", "True", ")", ":", "\n", "        ", "\"\"\" dump run_config and net_config to the model_folder \"\"\"", "\n", "os", ".", "makedirs", "(", "self", ".", "path", ",", "exist_ok", "=", "True", ")", "\n", "net_save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "path", ",", "'net.config'", ")", "\n", "json", ".", "dump", "(", "self", ".", "net", ".", "module", ".", "config", ",", "open", "(", "net_save_path", ",", "'w'", ")", ",", "indent", "=", "4", ")", "\n", "if", "print_info", ":", "\n", "            ", "print", "(", "'Network configs dump to %s'", "%", "net_save_path", ")", "\n", "\n", "", "run_save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "path", ",", "'run.config'", ")", "\n", "json", ".", "dump", "(", "self", ".", "run_config", ".", "config", ",", "open", "(", "run_save_path", ",", "'w'", ")", ",", "indent", "=", "4", ")", "\n", "if", "print_info", ":", "\n", "            ", "print", "(", "'Run configs dump to %s'", "%", "run_save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.ToyExample.run_manager.RunManager.write_log": [[361, 381], ["print", "open", "fout.write", "fout.flush", "open", "fout.write", "fout.flush", "open", "fout.write", "fout.flush", "os.path.join", "os.path.join", "fout.write", "os.path.join", "fout.write"], "methods", ["None"], ["def", "write_log", "(", "self", ",", "log_str", ",", "prefix", ",", "should_print", "=", "True", ")", ":", "\n", "        ", "\"\"\" prefix: valid, train, test \"\"\"", "\n", "if", "prefix", "in", "[", "'valid'", ",", "'test'", "]", ":", "\n", "            ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "logs_path", ",", "'valid_console.txt'", ")", ",", "'a'", ")", "as", "fout", ":", "\n", "                ", "fout", ".", "write", "(", "log_str", "+", "'\\n'", ")", "\n", "fout", ".", "flush", "(", ")", "\n", "", "", "if", "prefix", "in", "[", "'valid'", ",", "'test'", ",", "'train'", "]", ":", "\n", "            ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "logs_path", ",", "'train_console.txt'", ")", ",", "'a'", ")", "as", "fout", ":", "\n", "                ", "if", "prefix", "in", "[", "'valid'", ",", "'test'", "]", ":", "\n", "                    ", "fout", ".", "write", "(", "'='", "*", "10", ")", "\n", "", "fout", ".", "write", "(", "log_str", "+", "'\\n'", ")", "\n", "fout", ".", "flush", "(", ")", "\n", "", "", "if", "prefix", "in", "[", "'prune'", "]", ":", "\n", "            ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "logs_path", ",", "'prune_console.txt'", ")", ",", "'a'", ")", "as", "fout", ":", "\n", "                ", "if", "prefix", "in", "[", "'valid'", ",", "'test'", "]", ":", "\n", "                    ", "fout", ".", "write", "(", "'='", "*", "10", ")", "\n", "", "fout", ".", "write", "(", "log_str", "+", "'\\n'", ")", "\n", "fout", ".", "flush", "(", ")", "\n", "", "", "if", "should_print", ":", "\n", "            ", "print", "(", "log_str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.ToyExample.run_manager.RunManager.validate": [[382, 442], ["utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "time.time", "run_manager.RunManager.run_config.valid_loader.reset", "run_manager.RunManager.run_config.test_loader.reset", "net.train", "net.eval", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "net", "run_manager.RunManager.criterion", "utils.accuracy", "run_manager.RunManager.reduce_tensor", "run_manager.RunManager.reduce_tensor", "run_manager.RunManager.reduce_tensor", "utils.AverageMeter.update", "utils.AverageMeter.update", "utils.AverageMeter.update", "utils.AverageMeter.update", "time.time", "data[].cuda", "data[].cuda", "images.size", "images.size", "images.size", "print", "time.time", "len", "len"], "methods", ["home.repos.pwc.inspect_result.mac-automl_itpruner.utils.utils.AverageMeter.reset", "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.utils.AverageMeter.reset", "home.repos.pwc.inspect_result.mac-automl_itpruner.learners.basic_learner.BasicLearner.train", "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.utils.accuracy", "home.repos.pwc.inspect_result.mac-automl_itpruner.Cifar.run_manager.RunManager.reduce_tensor", "home.repos.pwc.inspect_result.mac-automl_itpruner.Cifar.run_manager.RunManager.reduce_tensor", "home.repos.pwc.inspect_result.mac-automl_itpruner.Cifar.run_manager.RunManager.reduce_tensor", "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.utils.AverageMeter.update"], ["", "", "def", "validate", "(", "self", ",", "is_test", "=", "True", ",", "net", "=", "None", ",", "use_train_mode", "=", "False", ",", "return_top5", "=", "False", ")", ":", "\n", "        ", "if", "is_test", ":", "\n", "            ", "data_loader", "=", "self", ".", "run_config", ".", "test_loader", "\n", "", "else", ":", "\n", "            ", "data_loader", "=", "self", ".", "run_config", ".", "valid_loader", "\n", "\n", "", "if", "net", "is", "None", ":", "\n", "            ", "net", "=", "self", ".", "net", "\n", "\n", "", "if", "use_train_mode", ":", "\n", "            ", "net", ".", "train", "(", ")", "\n", "", "else", ":", "\n", "            ", "net", ".", "eval", "(", ")", "\n", "", "batch_time", "=", "AverageMeter", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "top1", "=", "AverageMeter", "(", ")", "\n", "top5", "=", "AverageMeter", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "# noinspection PyUnresolvedReferences", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "i", ",", "data", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "                ", "images", ",", "labels", "=", "data", "[", "0", "]", ".", "cuda", "(", "non_blocking", "=", "True", ")", ",", "data", "[", "1", "]", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "# images, labels = data[0].cuda(), data[1].cuda()", "\n", "# compute output", "\n", "output", "=", "net", "(", "images", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "output", ",", "labels", ")", "\n", "# measure accuracy and record loss", "\n", "acc1", ",", "acc5", "=", "accuracy", "(", "output", ",", "labels", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "reduced_loss", "=", "self", ".", "reduce_tensor", "(", "loss", ".", "data", ")", "\n", "acc1", "=", "self", ".", "reduce_tensor", "(", "acc1", ")", "\n", "acc5", "=", "self", ".", "reduce_tensor", "(", "acc5", ")", "\n", "losses", ".", "update", "(", "reduced_loss", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "acc1", "[", "0", "]", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "acc5", "[", "0", "]", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "self", ".", "run_config", ".", "print_frequency", "==", "0", "or", "i", "+", "1", "==", "len", "(", "data_loader", ")", ":", "\n", "                    ", "if", "is_test", ":", "\n", "                        ", "prefix", "=", "'Test'", "\n", "", "else", ":", "\n", "                        ", "prefix", "=", "'Valid'", "\n", "", "test_log", "=", "prefix", "+", "': [{0}/{1}]\\t'", "'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "'Loss {loss.val:.4f} ({loss.avg:.4f})\\t'", "'Top-1 acc {top1.val:.3f} ({top1.avg:.3f})'", ".", "format", "(", "i", ",", "len", "(", "data_loader", ")", "-", "1", ",", "\n", "batch_time", "=", "batch_time", ",", "loss", "=", "losses", ",", "top1", "=", "top1", ")", "\n", "if", "return_top5", ":", "\n", "                        ", "test_log", "+=", "'\\tTop-5 acc {top5.val:.3f} ({top5.avg:.3f})'", ".", "format", "(", "\n", "top5", "=", "top5", ")", "\n", "", "print", "(", "test_log", ")", "\n", "", "", "", "self", ".", "run_config", ".", "valid_loader", ".", "reset", "(", ")", "\n", "self", ".", "run_config", ".", "test_loader", ".", "reset", "(", ")", "\n", "if", "return_top5", ":", "\n", "            ", "return", "losses", ".", "avg", ",", "top1", ".", "avg", ",", "top5", ".", "avg", "\n", "", "else", ":", "\n", "            ", "return", "losses", ".", "avg", ",", "top1", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.ToyExample.run_manager.RunManager.train_bn": [[443, 459], ["run_manager.RunManager.net.modules", "run_manager.RunManager.net.train", "range", "print", "isinstance", "enumerate", "print", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "run_manager.RunManager.net", "data[].cuda", "data[].cuda"], "methods", ["home.repos.pwc.inspect_result.mac-automl_itpruner.learners.basic_learner.BasicLearner.train"], ["", "", "def", "train_bn", "(", "self", ",", "epochs", "=", "1", ")", ":", "\n", "        ", "if", "self", ".", "run_config", ".", "local_rank", "==", "0", ":", "\n", "            ", "print", "(", "'training bn'", ")", "\n", "", "for", "m", "in", "self", ".", "net", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "running_mean", "=", "torch", ".", "zeros_like", "(", "m", ".", "running_mean", ")", "\n", "m", ".", "running_var", "=", "torch", ".", "ones_like", "(", "m", ".", "running_var", ")", "\n", "", "", "self", ".", "net", ".", "train", "(", ")", "\n", "for", "i", "in", "range", "(", "epochs", ")", ":", "\n", "            ", "for", "_", ",", "data", "in", "enumerate", "(", "self", ".", "run_config", ".", "train_loader", ")", ":", "\n", "                ", "images", ",", "labels", "=", "data", "[", "0", "]", ".", "cuda", "(", "\n", "non_blocking", "=", "True", ")", ",", "data", "[", "1", "]", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "output", "=", "self", ".", "net", "(", "images", ")", "\n", "del", "output", ",", "images", ",", "labels", "\n", "", "", "if", "self", ".", "run_config", ".", "local_rank", "==", "0", ":", "\n", "            ", "print", "(", "'training bn finished'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.ToyExample.run_manager.RunManager.train_one_epoch": [[460, 507], ["utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "run_manager.RunManager.net.train", "time.time", "enumerate", "utils.AverageMeter.update", "adjust_lr_func", "run_manager.RunManager.net", "utils.accuracy", "run_manager.RunManager.reduce_tensor", "run_manager.RunManager.reduce_tensor", "run_manager.RunManager.reduce_tensor", "utils.AverageMeter.update", "utils.AverageMeter.update", "utils.AverageMeter.update", "run_manager.RunManager.net.zero_grad", "run_manager.RunManager.backward", "run_manager.RunManager.optimizer.step", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "utils.AverageMeter.update", "time.time", "data[].cuda", "data[].cuda", "utils.cross_entropy_with_label_smoothing", "run_manager.RunManager.criterion", "images.size", "images.size", "images.size", "run_manager.RunManager.train.train_log_func", "run_manager.RunManager.write_log", "time.time", "time.time", "len"], "methods", ["home.repos.pwc.inspect_result.mac-automl_itpruner.learners.basic_learner.BasicLearner.train", "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.utils.accuracy", "home.repos.pwc.inspect_result.mac-automl_itpruner.Cifar.run_manager.RunManager.reduce_tensor", "home.repos.pwc.inspect_result.mac-automl_itpruner.Cifar.run_manager.RunManager.reduce_tensor", "home.repos.pwc.inspect_result.mac-automl_itpruner.Cifar.run_manager.RunManager.reduce_tensor", "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.utils.WarmUpCosineLRScheduler.step", "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.pytorch_utils.cross_entropy_with_label_smoothing", "home.repos.pwc.inspect_result.mac-automl_itpruner.Cifar.run_manager.RunManager.write_log"], ["", "", "def", "train_one_epoch", "(", "self", ",", "adjust_lr_func", ",", "train_log_func", ",", "epoch", ")", ":", "\n", "        ", "batch_time", "=", "AverageMeter", "(", ")", "\n", "data_time", "=", "AverageMeter", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "top1", "=", "AverageMeter", "(", ")", "\n", "top5", "=", "AverageMeter", "(", ")", "\n", "\n", "# switch to train mode", "\n", "self", ".", "net", ".", "train", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "self", ".", "run_config", ".", "train_loader", ")", ":", "\n", "            ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "new_lr", "=", "adjust_lr_func", "(", "i", ")", "\n", "images", ",", "labels", "=", "data", "[", "0", "]", ".", "cuda", "(", "\n", "non_blocking", "=", "True", ")", ",", "data", "[", "1", "]", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "# compute output", "\n", "output", "=", "self", ".", "net", "(", "images", ")", "\n", "if", "self", ".", "run_config", ".", "label_smoothing", ">", "0", ":", "\n", "                ", "loss", "=", "cross_entropy_with_label_smoothing", "(", "\n", "output", ",", "labels", ",", "self", ".", "run_config", ".", "label_smoothing", ")", "\n", "", "else", ":", "\n", "                ", "loss", "=", "self", ".", "criterion", "(", "output", ",", "labels", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "", "acc1", ",", "acc5", "=", "accuracy", "(", "output", ",", "labels", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "reduced_loss", "=", "self", ".", "reduce_tensor", "(", "loss", ".", "data", ")", "\n", "acc1", "=", "self", ".", "reduce_tensor", "(", "acc1", ")", "\n", "acc5", "=", "self", ".", "reduce_tensor", "(", "acc5", ")", "\n", "losses", ".", "update", "(", "reduced_loss", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "acc1", "[", "0", "]", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "acc5", "[", "0", "]", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "\n", "# compute gradient and do SGD step", "\n", "self", ".", "net", ".", "zero_grad", "(", ")", "# or self.optimizer.zero_grad()", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "(", "i", "%", "self", ".", "run_config", ".", "print_frequency", "==", "0", "or", "i", "+", "1", "==", "len", "(", "self", ".", "run_config", ".", "train_loader", ")", ")", "and", "self", ".", "run_config", ".", "local_rank", "==", "0", ":", "\n", "                ", "batch_log", "=", "train_log_func", "(", "\n", "i", ",", "batch_time", ",", "data_time", ",", "losses", ",", "top1", ",", "top5", ",", "new_lr", ")", "\n", "self", ".", "write_log", "(", "batch_log", ",", "'train'", ")", "\n", "", "", "return", "top1", ",", "top5", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.ToyExample.run_manager.RunManager.train": [[508, 573], ["range", "time.time", "run_manager.RunManager.train_one_epoch", "int", "run_manager.RunManager.run_config.train_loader.reset", "run_manager.RunManager.run_config.valid_loader.reset", "run_manager.RunManager.run_config.test_loader.reset", "print", "time.time", "print", "run_manager.RunManager.validate", "max", "run_manager.RunManager.save_model", "len", "run_manager.RunManager.run_config.adjust_learning_rate", "run_manager.RunManager.train.train_log_func"], "methods", ["home.repos.pwc.inspect_result.mac-automl_itpruner.Cifar.run_manager.RunManager.train_one_epoch", "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.utils.AverageMeter.reset", "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.utils.AverageMeter.reset", "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.utils.AverageMeter.reset", "home.repos.pwc.inspect_result.mac-automl_itpruner.Cifar.run_manager.RunManager.validate", "home.repos.pwc.inspect_result.mac-automl_itpruner.learners.basic_learner.BasicLearner.save_model", "home.repos.pwc.inspect_result.mac-automl_itpruner.Cifar.run_manager.RunConfig.adjust_learning_rate"], ["", "def", "train", "(", "self", ",", "print_top5", "=", "False", ")", ":", "\n", "        ", "def", "train_log_func", "(", "epoch_", ",", "i", ",", "batch_time", ",", "data_time", ",", "losses", ",", "top1", ",", "top5", ",", "lr", ")", ":", "\n", "            ", "batch_log", "=", "'Train [{0}][{1}/{2}]\\t'", "'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "'Data {data_time.val:.3f} ({data_time.avg:.3f})\\t'", "'Loss {losses.val:.4f} ({losses.avg:.4f})\\t'", "'Top-1 acc {top1.val:.3f} ({top1.avg:.3f})'", ".", "format", "(", "epoch_", "+", "1", ",", "i", ",", "len", "(", "self", ".", "run_config", ".", "train_loader", ")", "-", "1", ",", "\n", "batch_time", "=", "batch_time", ",", "data_time", "=", "data_time", ",", "losses", "=", "losses", ",", "top1", "=", "top1", ")", "\n", "if", "print_top5", ":", "\n", "                ", "batch_log", "+=", "'\\tTop-5 acc {top5.val:.3f} ({top5.avg:.3f})'", ".", "format", "(", "\n", "top5", "=", "top5", ")", "\n", "", "batch_log", "+=", "'\\tlr {lr:.5f}'", ".", "format", "(", "lr", "=", "lr", ")", "\n", "return", "batch_log", "\n", "\n", "", "for", "epoch", "in", "range", "(", "self", ".", "start_epoch", ",", "self", ".", "run_config", ".", "n_epochs", ")", ":", "\n", "            ", "if", "self", ".", "run_config", ".", "local_rank", "==", "0", ":", "\n", "                ", "print", "(", "'\\n'", ",", "'-'", "*", "30", ",", "'Train epoch: %d'", "%", "\n", "(", "epoch", "+", "1", ")", ",", "'-'", "*", "30", ",", "'\\n'", ")", "\n", "\n", "", "end", "=", "time", ".", "time", "(", ")", "\n", "train_top1", ",", "train_top5", "=", "self", ".", "train_one_epoch", "(", "\n", "lambda", "i", ":", "self", ".", "run_config", ".", "adjust_learning_rate", "(", "\n", "self", ".", "optimizer", ",", "epoch", ",", "i", ",", "len", "(", "self", ".", "run_config", ".", "train_loader", ")", ")", ",", "\n", "lambda", "i", ",", "batch_time", ",", "data_time", ",", "losses", ",", "top1", ",", "top5", ",", "new_lr", ":", "\n", "train_log_func", "(", "epoch", ",", "i", ",", "batch_time", ",", "data_time", ",", "\n", "losses", ",", "top1", ",", "top5", ",", "new_lr", ")", ",", "\n", "epoch", "\n", ")", "\n", "time_per_epoch", "=", "time", ".", "time", "(", ")", "-", "end", "\n", "seconds_left", "=", "int", "(", "\n", "(", "self", ".", "run_config", ".", "n_epochs", "-", "epoch", "-", "1", ")", "*", "time_per_epoch", ")", "\n", "if", "self", ".", "run_config", ".", "local_rank", "==", "0", ":", "\n", "                ", "print", "(", "'Time per epoch: %s, Est. complete in: %s'", "%", "(", "\n", "str", "(", "timedelta", "(", "seconds", "=", "time_per_epoch", ")", ")", ",", "\n", "str", "(", "timedelta", "(", "seconds", "=", "seconds_left", ")", ")", ")", ")", "\n", "\n", "", "if", "(", "epoch", "+", "1", ")", "%", "self", ".", "run_config", ".", "validation_frequency", "==", "0", ":", "\n", "                ", "val_loss", ",", "val_acc", ",", "val_acc5", "=", "self", ".", "validate", "(", "\n", "is_test", "=", "False", ",", "return_top5", "=", "True", ")", "\n", "is_best", "=", "val_acc", ">", "self", ".", "best_acc", "\n", "self", ".", "best_acc", "=", "max", "(", "self", ".", "best_acc", ",", "val_acc", ")", "\n", "val_log", "=", "'Valid [{0}/{1}]\\tloss {2:.3f}\\ttop-1 acc {3:.3f} ({4:.3f})'", ".", "format", "(", "epoch", "+", "1", ",", "self", ".", "run_config", ".", "n_epochs", ",", "\n", "val_loss", ",", "val_acc", ",", "self", ".", "best_acc", ")", "\n", "if", "print_top5", ":", "\n", "                    ", "val_log", "+=", "'\\ttop-5 acc {0:.3f}\\tTrain top-1 {top1.avg:.3f}\\ttop-5 {top5.avg:.3f}'", ".", "format", "(", "val_acc5", ",", "top1", "=", "train_top1", ",", "top5", "=", "train_top5", ")", "\n", "", "else", ":", "\n", "                    ", "val_log", "+=", "'\\tTrain top-1 {top1.avg:.3f}'", ".", "format", "(", "\n", "top1", "=", "train_top1", ")", "\n", "", "if", "self", ".", "run_config", ".", "local_rank", "==", "0", ":", "\n", "                    ", "self", ".", "write_log", "(", "val_log", ",", "'valid'", ")", "\n", "", "", "else", ":", "\n", "                ", "is_best", "=", "False", "\n", "", "if", "self", ".", "run_config", ".", "local_rank", "==", "0", ":", "\n", "                ", "self", ".", "save_model", "(", "{", "\n", "'epoch'", ":", "epoch", ",", "\n", "'best_acc'", ":", "self", ".", "best_acc", ",", "\n", "'optimizer'", ":", "self", ".", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'state_dict'", ":", "self", ".", "net", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "is_best", "=", "is_best", ")", "\n", "", "self", ".", "run_config", ".", "train_loader", ".", "reset", "(", ")", "\n", "self", ".", "run_config", ".", "valid_loader", ".", "reset", "(", ")", "\n", "self", ".", "run_config", ".", "test_loader", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.ToyExample.run_manager.RunManager.reduce_tensor": [[574, 579], ["tensor.clone", "torch.all_reduce", "torch.all_reduce", "torch.all_reduce", "torch.all_reduce", "torch.all_reduce"], "methods", ["None"], ["", "", "def", "reduce_tensor", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "rt", "=", "tensor", ".", "clone", "(", ")", "\n", "dist", ".", "all_reduce", "(", "rt", ",", "op", "=", "dist", ".", "ReduceOp", ".", "SUM", ")", "\n", "rt", "/=", "self", ".", "run_config", ".", "world_size", "\n", "return", "rt", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.get_data_iter.Cutout.__init__": [[19, 21], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "length", ")", ":", "\n", "        ", "self", ".", "length", "=", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.get_data_iter.Cutout.__call__": [[22, 38], ["numpy.ones", "numpy.random.randint", "numpy.random.randint", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip", "torch.from_numpy", "mask.expand_as.expand_as.expand_as", "img.size", "img.size"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "h", ",", "w", "=", "img", ".", "size", "(", "1", ")", ",", "img", ".", "size", "(", "2", ")", "\n", "mask", "=", "np", ".", "ones", "(", "(", "h", ",", "w", ")", ",", "np", ".", "float32", ")", "\n", "y", "=", "np", ".", "random", ".", "randint", "(", "h", ")", "\n", "x", "=", "np", ".", "random", ".", "randint", "(", "w", ")", "\n", "\n", "y1", "=", "np", ".", "clip", "(", "y", "-", "self", ".", "length", "//", "2", ",", "0", ",", "h", ")", "\n", "y2", "=", "np", ".", "clip", "(", "y", "+", "self", ".", "length", "//", "2", ",", "0", ",", "h", ")", "\n", "x1", "=", "np", ".", "clip", "(", "x", "-", "self", ".", "length", "//", "2", ",", "0", ",", "w", ")", "\n", "x2", "=", "np", ".", "clip", "(", "x", "+", "self", ".", "length", "//", "2", ",", "0", ",", "w", ")", "\n", "\n", "mask", "[", "y1", ":", "y2", ",", "x1", ":", "x2", "]", "=", "0.", "\n", "mask", "=", "torch", ".", "from_numpy", "(", "mask", ")", "\n", "mask", "=", "mask", ".", "expand_as", "(", "img", ")", "\n", "img", "*=", "mask", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.get_data_iter.DALIDataloader.__init__": [[81, 92], ["nvidia.dali.plugin.pytorch.DALIGenericIterator.__init__", "nvidia.dali.plugin.pytorch.DALIGenericIterator.__init__"], "methods", ["home.repos.pwc.inspect_result.mac-automl_itpruner.nets.__init__.SearchRunConfig.__init__", "home.repos.pwc.inspect_result.mac-automl_itpruner.nets.__init__.SearchRunConfig.__init__"], ["    ", "def", "__init__", "(", "self", ",", "pipeline", ",", "size", ",", "batch_size", ",", "output_map", "=", "[", "\"data\"", ",", "\"label\"", "]", ",", "auto_reset", "=", "True", ",", "onehot_label", "=", "False", ",", "dataset", "=", "'imagenet'", ")", ":", "\n", "        ", "self", ".", "_size_all", "=", "size", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "onehot_label", "=", "onehot_label", "\n", "self", ".", "output_map", "=", "output_map", "\n", "if", "dataset", "!=", "'cifar10'", ":", "\n", "            ", "super", "(", ")", ".", "__init__", "(", "pipelines", "=", "pipeline", ",", "reader_name", "=", "\"Reader\"", ",", "\n", "fill_last_batch", "=", "False", ",", "output_map", "=", "output_map", ")", "\n", "", "else", ":", "\n", "            ", "super", "(", ")", ".", "__init__", "(", "pipelines", "=", "pipeline", ",", "size", "=", "size", ",", "auto_reset", "=", "auto_reset", ",", "\n", "output_map", "=", "output_map", ",", "fill_last_batch", "=", "True", ",", "last_batch_padded", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.get_data_iter.DALIDataloader.__next__": [[93, 103], ["super().__next__", "[].squeeze", "data[].squeeze().long", "data[].squeeze"], "methods", ["home.repos.pwc.inspect_result.mac-automl_itpruner.utils.get_data_iter.CIFAR_INPUT_ITER.__next__"], ["", "", "def", "__next__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_first_batch", "is", "not", "None", ":", "\n", "            ", "batch", "=", "self", ".", "_first_batch", "\n", "self", ".", "_first_batch", "=", "None", "\n", "return", "[", "batch", "[", "0", "]", "[", "'data'", "]", ",", "batch", "[", "0", "]", "[", "'label'", "]", ".", "squeeze", "(", ")", "]", "\n", "", "data", "=", "super", "(", ")", ".", "__next__", "(", ")", "[", "0", "]", "\n", "if", "self", ".", "onehot_label", ":", "\n", "            ", "return", "[", "data", "[", "self", ".", "output_map", "[", "0", "]", "]", ",", "data", "[", "self", ".", "output_map", "[", "1", "]", "]", ".", "squeeze", "(", ")", ".", "long", "(", ")", "]", "\n", "", "else", ":", "\n", "            ", "return", "[", "data", "[", "self", ".", "output_map", "[", "0", "]", "]", ",", "data", "[", "self", ".", "output_map", "[", "1", "]", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.get_data_iter.DALIDataloader.__len__": [[104, 109], ["None"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_size_all", "%", "self", ".", "batch_size", "==", "0", ":", "\n", "            ", "return", "self", ".", "_size_all", "//", "self", ".", "batch_size", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "_size_all", "//", "self", ".", "batch_size", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.get_data_iter.HybridTrainPipe.__init__": [[112, 145], ["nvidia.dali.pipeline.Pipeline.__init__", "nvidia.FileReader", "nvidia.FileReader", "nvidia.Resize", "nvidia.Resize", "nvidia.CropMirrorNormalize", "nvidia.CropMirrorNormalize", "nvidia.CoinFlip", "nvidia.CoinFlip", "print", "nvidia.HostDecoderRandomCrop", "nvidia.HostDecoderRandomCrop", "nvidia.ImageDecoderRandomCrop", "nvidia.ImageDecoderRandomCrop"], "methods", ["home.repos.pwc.inspect_result.mac-automl_itpruner.nets.__init__.SearchRunConfig.__init__"], ["    ", "def", "__init__", "(", "self", ",", "batch_size", ",", "num_threads", ",", "device_id", ",", "data_dir", ",", "crop", ",", "manual_seed", ",", "dali_cpu", "=", "False", ",", "local_rank", "=", "0", ",", "world_size", "=", "1", ")", ":", "\n", "        ", "super", "(", "HybridTrainPipe", ",", "self", ")", ".", "__init__", "(", "batch_size", ",", "\n", "num_threads", ",", "device_id", ",", "seed", "=", "manual_seed", ")", "\n", "self", ".", "input", "=", "ops", ".", "FileReader", "(", "file_root", "=", "data_dir", ",", "shard_id", "=", "local_rank", ",", "\n", "num_shards", "=", "world_size", ",", "random_shuffle", "=", "True", ",", "pad_last_batch", "=", "True", ")", "\n", "# let user decide which pipeline works him bets for RN version he runs", "\n", "if", "dali_cpu", ":", "\n", "            ", "dali_device", "=", "\"cpu\"", "\n", "self", ".", "decode", "=", "ops", ".", "HostDecoderRandomCrop", "(", "device", "=", "dali_device", ",", "output_type", "=", "types", ".", "RGB", ",", "\n", "random_aspect_ratio", "=", "[", "\n", "0.8", ",", "1.25", "]", ",", "\n", "random_area", "=", "[", "0.1", ",", "1.0", "]", ",", "\n", "num_attempts", "=", "100", ")", "\n", "", "else", ":", "\n", "            ", "dali_device", "=", "\"gpu\"", "\n", "# This padding sets the size of the internal nvJPEG buffers to be able to handle all images from full-sized ImageNet", "\n", "# without additional reallocations", "\n", "self", ".", "decode", "=", "ops", ".", "ImageDecoderRandomCrop", "(", "device", "=", "\"mixed\"", ",", "output_type", "=", "types", ".", "RGB", ",", "\n", "device_memory_padding", "=", "211025920", ",", "host_memory_padding", "=", "140544512", ",", "\n", "random_aspect_ratio", "=", "[", "\n", "0.8", ",", "1.25", "]", ",", "\n", "random_area", "=", "[", "0.1", ",", "1.0", "]", ",", "\n", "num_attempts", "=", "100", ")", "\n", "", "self", ".", "res", "=", "ops", ".", "Resize", "(", "device", "=", "dali_device", ",", "resize_x", "=", "crop", ",", "\n", "resize_y", "=", "crop", ",", "interp_type", "=", "types", ".", "INTERP_TRIANGULAR", ")", "\n", "self", ".", "cmnp", "=", "ops", ".", "CropMirrorNormalize", "(", "device", "=", "\"gpu\"", ",", "\n", "dtype", "=", "types", ".", "FLOAT", ",", "\n", "output_layout", "=", "types", ".", "NCHW", ",", "\n", "crop", "=", "(", "crop", ",", "crop", ")", ",", "\n", "mean", "=", "[", "0.485", "*", "255", ",", "0.456", "*", "255", ",", "0.406", "*", "255", "]", ",", "\n", "std", "=", "[", "0.229", "*", "255", ",", "0.224", "*", "255", ",", "0.225", "*", "255", "]", ")", "\n", "self", ".", "coin", "=", "ops", ".", "CoinFlip", "(", "probability", "=", "0.5", ")", "\n", "print", "(", "'DALI \"{0}\" variant'", ".", "format", "(", "dali_device", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.get_data_iter.HybridTrainPipe.define_graph": [[146, 153], ["get_data_iter.HybridTrainPipe.coin", "get_data_iter.HybridTrainPipe.input", "get_data_iter.HybridTrainPipe.decode", "get_data_iter.HybridTrainPipe.res", "get_data_iter.HybridTrainPipe.cmnp", "get_data_iter.HybridTrainPipe.gpu"], "methods", ["None"], ["", "def", "define_graph", "(", "self", ")", ":", "\n", "        ", "rng", "=", "self", ".", "coin", "(", ")", "\n", "self", ".", "jpegs", ",", "self", ".", "labels", "=", "self", ".", "input", "(", "name", "=", "\"Reader\"", ")", "\n", "images", "=", "self", ".", "decode", "(", "self", ".", "jpegs", ")", "\n", "images", "=", "self", ".", "res", "(", "images", ")", "\n", "output", "=", "self", ".", "cmnp", "(", "images", ".", "gpu", "(", ")", ",", "mirror", "=", "rng", ")", "\n", "return", "[", "output", ",", "self", ".", "labels", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.get_data_iter.HybridValPipe.__init__": [[156, 170], ["nvidia.dali.pipeline.Pipeline.__init__", "nvidia.FileReader", "nvidia.FileReader", "nvidia.ImageDecoder", "nvidia.ImageDecoder", "nvidia.Resize", "nvidia.Resize", "nvidia.CropMirrorNormalize", "nvidia.CropMirrorNormalize"], "methods", ["home.repos.pwc.inspect_result.mac-automl_itpruner.nets.__init__.SearchRunConfig.__init__"], ["    ", "def", "__init__", "(", "self", ",", "batch_size", ",", "num_threads", ",", "device_id", ",", "data_dir", ",", "crop", ",", "size", ",", "manual_seed", ",", "local_rank", "=", "0", ",", "world_size", "=", "1", ")", ":", "\n", "        ", "super", "(", "HybridValPipe", ",", "self", ")", ".", "__init__", "(", "batch_size", ",", "\n", "num_threads", ",", "device_id", ",", "seed", "=", "manual_seed", ")", "\n", "self", ".", "input", "=", "ops", ".", "FileReader", "(", "file_root", "=", "data_dir", ",", "shard_id", "=", "local_rank", ",", "num_shards", "=", "world_size", ",", "\n", "random_shuffle", "=", "True", ")", "\n", "self", ".", "decode", "=", "ops", ".", "ImageDecoder", "(", "device", "=", "\"mixed\"", ",", "output_type", "=", "types", ".", "RGB", ")", "\n", "self", ".", "res", "=", "ops", ".", "Resize", "(", "device", "=", "\"gpu\"", ",", "resize_shorter", "=", "size", ",", "\n", "interp_type", "=", "types", ".", "INTERP_TRIANGULAR", ")", "\n", "self", ".", "cmnp", "=", "ops", ".", "CropMirrorNormalize", "(", "device", "=", "\"gpu\"", ",", "\n", "dtype", "=", "types", ".", "FLOAT", ",", "\n", "output_layout", "=", "types", ".", "NCHW", ",", "\n", "crop", "=", "(", "crop", ",", "crop", ")", ",", "\n", "mean", "=", "[", "0.485", "*", "255", ",", "0.456", "*", "255", ",", "0.406", "*", "255", "]", ",", "\n", "std", "=", "[", "0.229", "*", "255", ",", "0.224", "*", "255", ",", "0.225", "*", "255", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.get_data_iter.HybridValPipe.define_graph": [[171, 177], ["get_data_iter.HybridValPipe.input", "get_data_iter.HybridValPipe.decode", "get_data_iter.HybridValPipe.res", "get_data_iter.HybridValPipe.cmnp"], "methods", ["None"], ["", "def", "define_graph", "(", "self", ")", ":", "\n", "        ", "self", ".", "jpegs", ",", "self", ".", "labels", "=", "self", ".", "input", "(", "name", "=", "\"Reader\"", ")", "\n", "images", "=", "self", ".", "decode", "(", "self", ".", "jpegs", ")", "\n", "images", "=", "self", ".", "res", "(", "images", ")", "\n", "output", "=", "self", ".", "cmnp", "(", "images", ")", "\n", "return", "[", "output", ",", "self", ".", "labels", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.get_data_iter.HybridTrainPipe_CIFAR.__init__": [[198, 217], ["nvidia.dali.pipeline.Pipeline.__init__", "iter", "nvidia.ExternalSource", "nvidia.ExternalSource", "nvidia.ExternalSource", "nvidia.ExternalSource", "nvidia.Paste", "nvidia.Paste", "nvidia.Uniform", "nvidia.Uniform", "nvidia.Crop", "nvidia.Crop", "nvidia.CropMirrorNormalize", "nvidia.CropMirrorNormalize", "nvidia.CoinFlip", "nvidia.CoinFlip", "nvidia.Flip", "nvidia.Flip", "get_data_iter.CIFAR_INPUT_ITER"], "methods", ["home.repos.pwc.inspect_result.mac-automl_itpruner.nets.__init__.SearchRunConfig.__init__"], ["    ", "def", "__init__", "(", "self", ",", "batch_size", ",", "num_threads", ",", "device_id", ",", "data_dir", ",", "crop", ",", "manual_seed", ",", "dali_cpu", "=", "False", ",", "local_rank", "=", "0", ",", "world_size", "=", "1", ",", "\n", "cutout", "=", "0", ")", ":", "\n", "        ", "super", "(", "HybridTrainPipe_CIFAR", ",", "self", ")", ".", "__init__", "(", "\n", "batch_size", ",", "num_threads", ",", "device_id", ",", "seed", "=", "manual_seed", ")", "\n", "self", ".", "iterator", "=", "iter", "(", "CIFAR_INPUT_ITER", "(", "\n", "batch_size", ",", "'train'", ",", "root", "=", "data_dir", ")", ")", "\n", "dali_device", "=", "\"gpu\"", "\n", "self", ".", "input", "=", "ops", ".", "ExternalSource", "(", ")", "\n", "self", ".", "input_label", "=", "ops", ".", "ExternalSource", "(", ")", "\n", "self", ".", "pad", "=", "ops", ".", "Paste", "(", "device", "=", "dali_device", ",", "ratio", "=", "1.25", ",", "fill_value", "=", "0", ")", "\n", "self", ".", "uniform", "=", "ops", ".", "Uniform", "(", "range", "=", "(", "0.", ",", "1.", ")", ")", "\n", "self", ".", "crop", "=", "ops", ".", "Crop", "(", "device", "=", "dali_device", ",", "crop_h", "=", "32", ",", "crop_w", "=", "32", ")", "\n", "self", ".", "cmnp", "=", "ops", ".", "CropMirrorNormalize", "(", "device", "=", "\"gpu\"", ",", "\n", "output_layout", "=", "types", ".", "NCHW", ",", "\n", "mean", "=", "[", "125.31", ",", "122.95", ",", "113.87", "]", ",", "\n", "std", "=", "[", "63.0", ",", "62.09", ",", "66.70", "]", "\n", ")", "\n", "self", ".", "coin", "=", "ops", ".", "CoinFlip", "(", "probability", "=", "0.5", ")", "\n", "self", ".", "flip", "=", "ops", ".", "Flip", "(", "device", "=", "\"gpu\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.get_data_iter.HybridTrainPipe_CIFAR.iter_setup": [[218, 222], ["get_data_iter.HybridTrainPipe_CIFAR.iterator.next", "get_data_iter.HybridTrainPipe_CIFAR.feed_input", "get_data_iter.HybridTrainPipe_CIFAR.feed_input"], "methods", ["None"], ["", "def", "iter_setup", "(", "self", ")", ":", "\n", "        ", "(", "images", ",", "labels", ")", "=", "self", ".", "iterator", ".", "next", "(", ")", "\n", "self", ".", "feed_input", "(", "self", ".", "jpegs", ",", "images", ")", "\n", "self", ".", "feed_input", "(", "self", ".", "labels", ",", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.get_data_iter.HybridTrainPipe_CIFAR.define_graph": [[223, 234], ["get_data_iter.HybridTrainPipe_CIFAR.coin", "get_data_iter.HybridTrainPipe_CIFAR.input", "get_data_iter.HybridTrainPipe_CIFAR.input_label", "get_data_iter.HybridTrainPipe_CIFAR.pad", "get_data_iter.HybridTrainPipe_CIFAR.crop", "get_data_iter.HybridTrainPipe_CIFAR.flip", "get_data_iter.HybridTrainPipe_CIFAR.cmnp", "get_data_iter.HybridTrainPipe_CIFAR.gpu", "get_data_iter.HybridTrainPipe_CIFAR.uniform", "get_data_iter.HybridTrainPipe_CIFAR.uniform"], "methods", ["None"], ["", "def", "define_graph", "(", "self", ")", ":", "\n", "        ", "rng", "=", "self", ".", "coin", "(", ")", "\n", "self", ".", "jpegs", "=", "self", ".", "input", "(", "name", "=", "\"Reader\"", ")", "\n", "self", ".", "labels", "=", "self", ".", "input_label", "(", ")", "\n", "output", "=", "self", ".", "jpegs", "\n", "output", "=", "self", ".", "pad", "(", "output", ".", "gpu", "(", ")", ")", "\n", "output", "=", "self", ".", "crop", "(", "output", ",", "crop_pos_x", "=", "self", ".", "uniform", "(", ")", ",", "\n", "crop_pos_y", "=", "self", ".", "uniform", "(", ")", ")", "\n", "output", "=", "self", ".", "flip", "(", "output", ",", "horizontal", "=", "rng", ")", "\n", "output", "=", "self", ".", "cmnp", "(", "output", ")", "\n", "return", "[", "output", ",", "self", ".", "labels", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.get_data_iter.HybridValPipe_CIFAR.__init__": [[237, 253], ["nvidia.dali.pipeline.Pipeline.__init__", "iter", "nvidia.ExternalSource", "nvidia.ExternalSource", "nvidia.ExternalSource", "nvidia.ExternalSource", "nvidia.Paste", "nvidia.Paste", "nvidia.Uniform", "nvidia.Uniform", "nvidia.Crop", "nvidia.Crop", "nvidia.CoinFlip", "nvidia.CoinFlip", "nvidia.Flip", "nvidia.Flip", "nvidia.CropMirrorNormalize", "nvidia.CropMirrorNormalize", "get_data_iter.CIFAR_INPUT_ITER"], "methods", ["home.repos.pwc.inspect_result.mac-automl_itpruner.nets.__init__.SearchRunConfig.__init__"], ["    ", "def", "__init__", "(", "self", ",", "batch_size", ",", "num_threads", ",", "device_id", ",", "data_dir", ",", "crop", ",", "size", ",", "manual_seed", ",", "local_rank", "=", "0", ",", "world_size", "=", "1", ")", ":", "\n", "        ", "super", "(", "HybridValPipe_CIFAR", ",", "self", ")", ".", "__init__", "(", "\n", "batch_size", ",", "num_threads", ",", "device_id", ",", "seed", "=", "manual_seed", ")", "\n", "self", ".", "iterator", "=", "iter", "(", "CIFAR_INPUT_ITER", "(", "\n", "batch_size", ",", "'val'", ",", "root", "=", "data_dir", ")", ")", "\n", "self", ".", "input", "=", "ops", ".", "ExternalSource", "(", ")", "\n", "self", ".", "input_label", "=", "ops", ".", "ExternalSource", "(", ")", "\n", "self", ".", "pad", "=", "ops", ".", "Paste", "(", "device", "=", "\"gpu\"", ",", "ratio", "=", "1.", ",", "fill_value", "=", "0", ")", "\n", "self", ".", "uniform", "=", "ops", ".", "Uniform", "(", "range", "=", "(", "0.", ",", "1.", ")", ")", "\n", "self", ".", "crop", "=", "ops", ".", "Crop", "(", "device", "=", "\"gpu\"", ",", "crop_h", "=", "32", ",", "crop_w", "=", "32", ")", "\n", "self", ".", "coin", "=", "ops", ".", "CoinFlip", "(", "probability", "=", "0.5", ")", "\n", "self", ".", "flip", "=", "ops", ".", "Flip", "(", "device", "=", "\"gpu\"", ")", "\n", "self", ".", "cmnp", "=", "ops", ".", "CropMirrorNormalize", "(", "device", "=", "\"gpu\"", ",", "\n", "output_layout", "=", "types", ".", "NCHW", ",", "\n", "mean", "=", "[", "125.31", ",", "122.95", ",", "113.87", "]", ",", "\n", "std", "=", "[", "63.0", ",", "62.09", ",", "66.70", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.get_data_iter.HybridValPipe_CIFAR.iter_setup": [[255, 259], ["get_data_iter.HybridValPipe_CIFAR.iterator.next", "get_data_iter.HybridValPipe_CIFAR.feed_input", "get_data_iter.HybridValPipe_CIFAR.feed_input"], "methods", ["None"], ["", "def", "iter_setup", "(", "self", ")", ":", "\n", "        ", "(", "images", ",", "labels", ")", "=", "self", ".", "iterator", ".", "next", "(", ")", "\n", "self", ".", "feed_input", "(", "self", ".", "jpegs", ",", "images", ")", "# can only in HWC order", "\n", "self", ".", "feed_input", "(", "self", ".", "labels", ",", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.get_data_iter.HybridValPipe_CIFAR.define_graph": [[260, 268], ["get_data_iter.HybridValPipe_CIFAR.input", "get_data_iter.HybridValPipe_CIFAR.input_label", "get_data_iter.HybridValPipe_CIFAR.pad", "get_data_iter.HybridValPipe_CIFAR.cmnp", "get_data_iter.HybridValPipe_CIFAR.gpu", "get_data_iter.HybridValPipe_CIFAR.gpu"], "methods", ["None"], ["", "def", "define_graph", "(", "self", ")", ":", "\n", "        ", "self", ".", "jpegs", "=", "self", ".", "input", "(", "name", "=", "\"Reader\"", ")", "\n", "self", ".", "labels", "=", "self", ".", "input_label", "(", ")", "\n", "# rng = self.coin()", "\n", "output", "=", "self", ".", "jpegs", "\n", "output", "=", "self", ".", "pad", "(", "output", ".", "gpu", "(", ")", ")", "\n", "output", "=", "self", ".", "cmnp", "(", "output", ".", "gpu", "(", ")", ")", "\n", "return", "[", "output", ",", "self", ".", "labels", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.get_data_iter.CIFAR_INPUT_ITER.__init__": [[284, 313], ["numpy.vstack().reshape", "numpy.vstack", "get_data_iter.CIFAR_INPUT_ITER.data.transpose", "numpy.save", "numpy.load", "os.path.join", "open", "get_data_iter.CIFAR_INPUT_ITER.data.append", "numpy.vstack", "pickle.load", "pickle.load", "get_data_iter.CIFAR_INPUT_ITER.targets.extend", "get_data_iter.CIFAR_INPUT_ITER.targets.extend"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "batch_size", ",", "data_type", "=", "'train'", ",", "root", "=", "'/userhome/data/cifar10'", ")", ":", "\n", "        ", "self", ".", "root", "=", "root", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "train", "=", "(", "data_type", "==", "'train'", ")", "\n", "if", "self", ".", "train", ":", "\n", "            ", "downloaded_list", "=", "self", ".", "train_list", "\n", "", "else", ":", "\n", "            ", "downloaded_list", "=", "self", ".", "test_list", "\n", "\n", "", "self", ".", "data", "=", "[", "]", "\n", "self", ".", "targets", "=", "[", "]", "\n", "for", "file_name", ",", "checksum", "in", "downloaded_list", ":", "\n", "            ", "file_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "base_folder", ",", "file_name", ")", "\n", "with", "open", "(", "file_path", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "if", "sys", ".", "version_info", "[", "0", "]", "==", "2", ":", "\n", "                    ", "entry", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "else", ":", "\n", "                    ", "entry", "=", "pickle", ".", "load", "(", "f", ",", "encoding", "=", "'latin1'", ")", "\n", "", "self", ".", "data", ".", "append", "(", "entry", "[", "'data'", "]", ")", "\n", "if", "'labels'", "in", "entry", ":", "\n", "                    ", "self", ".", "targets", ".", "extend", "(", "entry", "[", "'labels'", "]", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "targets", ".", "extend", "(", "entry", "[", "'fine_labels'", "]", ")", "\n", "\n", "", "", "", "self", ".", "data", "=", "np", ".", "vstack", "(", "self", ".", "data", ")", ".", "reshape", "(", "-", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "self", ".", "targets", "=", "np", ".", "vstack", "(", "self", ".", "targets", ")", "\n", "self", ".", "data", "=", "self", ".", "data", ".", "transpose", "(", "(", "0", ",", "2", ",", "3", ",", "1", ")", ")", "# convert to HWC", "\n", "np", ".", "save", "(", "\"cifar.npy\"", ",", "self", ".", "data", ")", "\n", "self", ".", "data", "=", "np", ".", "load", "(", "'cifar.npy'", ")", "# to serialize, increase locality", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.get_data_iter.CIFAR_INPUT_ITER.__iter__": [[314, 318], ["len"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "self", ".", "i", "=", "0", "\n", "self", ".", "n", "=", "len", "(", "self", ".", "data", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.get_data_iter.CIFAR_INPUT_ITER.__next__": [[319, 331], ["range", "batch.append", "labels.append", "sklearn.utils.shuffle"], "methods", ["None"], ["", "def", "__next__", "(", "self", ")", ":", "\n", "        ", "batch", "=", "[", "]", "\n", "labels", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "self", ".", "batch_size", ")", ":", "\n", "            ", "if", "self", ".", "train", "and", "self", ".", "i", "%", "self", ".", "n", "==", "0", ":", "\n", "                ", "self", ".", "data", ",", "self", ".", "targets", "=", "shuffle", "(", "\n", "self", ".", "data", ",", "self", ".", "targets", ",", "random_state", "=", "0", ")", "\n", "", "img", ",", "label", "=", "self", ".", "data", "[", "self", ".", "i", "]", ",", "self", ".", "targets", "[", "self", ".", "i", "]", "\n", "batch", ".", "append", "(", "img", ")", "\n", "labels", ".", "append", "(", "label", ")", "\n", "self", ".", "i", "=", "(", "self", ".", "i", "+", "1", ")", "%", "self", ".", "n", "\n", "", "return", "(", "batch", ",", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.get_data_iter.cutout_func": [[40, 56], ["numpy.ones", "numpy.random.randint", "numpy.random.randint", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip", "mask.reshape.reshape", "img.size", "img.size"], "function", ["None"], ["", "", "def", "cutout_func", "(", "img", ",", "length", "=", "16", ")", ":", "\n", "    ", "h", ",", "w", "=", "img", ".", "size", "(", "1", ")", ",", "img", ".", "size", "(", "2", ")", "\n", "mask", "=", "np", ".", "ones", "(", "(", "h", ",", "w", ")", ",", "np", ".", "float32", ")", "\n", "y", "=", "np", ".", "random", ".", "randint", "(", "h", ")", "\n", "x", "=", "np", ".", "random", ".", "randint", "(", "w", ")", "\n", "\n", "y1", "=", "np", ".", "clip", "(", "y", "-", "length", "//", "2", ",", "0", ",", "h", ")", "\n", "y2", "=", "np", ".", "clip", "(", "y", "+", "length", "//", "2", ",", "0", ",", "h", ")", "\n", "x1", "=", "np", ".", "clip", "(", "x", "-", "length", "//", "2", ",", "0", ",", "w", ")", "\n", "x2", "=", "np", ".", "clip", "(", "x", "+", "length", "//", "2", ",", "0", ",", "w", ")", "\n", "\n", "mask", "[", "y1", ":", "y2", ",", "x1", ":", "x2", "]", "=", "0.", "\n", "# mask = torch.from_numpy(mask)", "\n", "mask", "=", "mask", ".", "reshape", "(", "img", ".", "shape", ")", "\n", "img", "*=", "mask", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.get_data_iter.cutout_batch": [[58, 78], ["range", "torch.cat().cuda", "img.size", "img.size", "img.size", "numpy.ones", "numpy.random.randint", "numpy.random.randint", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip", "torch.from_numpy", "mask.expand_as().unsqueeze.expand_as().unsqueeze", "torch.cat().cuda.append", "torch.cat", "mask.expand_as().unsqueeze.expand_as"], "function", ["None"], ["", "def", "cutout_batch", "(", "img", ",", "length", "=", "16", ")", ":", "\n", "    ", "h", ",", "w", "=", "img", ".", "size", "(", "2", ")", ",", "img", ".", "size", "(", "3", ")", "\n", "masks", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "img", ".", "size", "(", "0", ")", ")", ":", "\n", "        ", "mask", "=", "np", ".", "ones", "(", "(", "h", ",", "w", ")", ",", "np", ".", "float32", ")", "\n", "y", "=", "np", ".", "random", ".", "randint", "(", "h", ")", "\n", "x", "=", "np", ".", "random", ".", "randint", "(", "w", ")", "\n", "\n", "y1", "=", "np", ".", "clip", "(", "y", "-", "length", "//", "2", ",", "0", ",", "h", ")", "\n", "y2", "=", "np", ".", "clip", "(", "y", "+", "length", "//", "2", ",", "0", ",", "h", ")", "\n", "x1", "=", "np", ".", "clip", "(", "x", "-", "length", "//", "2", ",", "0", ",", "w", ")", "\n", "x2", "=", "np", ".", "clip", "(", "x", "+", "length", "//", "2", ",", "0", ",", "w", ")", "\n", "\n", "mask", "[", "y1", ":", "y2", ",", "x1", ":", "x2", "]", "=", "0.", "\n", "mask", "=", "torch", ".", "from_numpy", "(", "mask", ")", "\n", "mask", "=", "mask", ".", "expand_as", "(", "img", "[", "0", "]", ")", ".", "unsqueeze", "(", "0", ")", "\n", "masks", ".", "append", "(", "mask", ")", "\n", "", "masks", "=", "torch", ".", "cat", "(", "masks", ")", ".", "cuda", "(", ")", "\n", "img", "*=", "masks", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.get_data_iter.get_imagenet_iter": [[179, 195], ["get_data_iter.HybridTrainPipe", "HybridTrainPipe.build", "get_data_iter.DALIDataloader", "get_data_iter.HybridValPipe", "HybridValPipe.build", "get_data_iter.DALIDataloader"], "function", ["None"], ["", "", "def", "get_imagenet_iter", "(", "data_type", ",", "image_dir", ",", "batch_size", ",", "num_threads", ",", "device_id", ",", "num_gpus", ",", "crop", ",", "manual_seed", ",", "val_size", "=", "256", ",", "world_size", "=", "1", ",", "\n", "local_rank", "=", "0", ")", ":", "\n", "    ", "if", "data_type", "==", "'train'", ":", "\n", "        ", "pip_train", "=", "HybridTrainPipe", "(", "batch_size", "=", "batch_size", ",", "num_threads", "=", "num_threads", ",", "device_id", "=", "local_rank", ",", "manual_seed", "=", "manual_seed", ",", "\n", "data_dir", "=", "image_dir", ",", "crop", "=", "crop", ",", "world_size", "=", "world_size", ",", "local_rank", "=", "local_rank", ")", "\n", "pip_train", ".", "build", "(", ")", "\n", "dali_iter_train", "=", "DALIDataloader", "(", "\n", "pipeline", "=", "pip_train", ",", "size", "=", "IMAGENET_IMAGES_NUM_TRAIN", "//", "world_size", ",", "batch_size", "=", "batch_size", ",", "onehot_label", "=", "True", ")", "\n", "return", "dali_iter_train", "\n", "", "elif", "data_type", "==", "'val'", ":", "\n", "        ", "pip_val", "=", "HybridValPipe", "(", "batch_size", "=", "batch_size", ",", "num_threads", "=", "num_threads", ",", "device_id", "=", "local_rank", ",", "manual_seed", "=", "manual_seed", ",", "\n", "data_dir", "=", "image_dir", ",", "crop", "=", "crop", ",", "size", "=", "val_size", ",", "world_size", "=", "world_size", ",", "local_rank", "=", "local_rank", ")", "\n", "pip_val", ".", "build", "(", ")", "\n", "dali_iter_val", "=", "DALIDataloader", "(", "\n", "pipeline", "=", "pip_val", ",", "size", "=", "IMAGENET_IMAGES_NUM_TEST", "//", "world_size", ",", "batch_size", "=", "batch_size", ",", "onehot_label", "=", "True", ")", "\n", "return", "dali_iter_val", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.get_data_iter.get_cifar_iter": [[335, 351], ["get_data_iter.HybridTrainPipe_CIFAR", "HybridTrainPipe_CIFAR.build", "get_data_iter.DALIDataloader", "get_data_iter.HybridValPipe_CIFAR", "HybridValPipe_CIFAR.build", "get_data_iter.DALIDataloader"], "function", ["None"], ["", "def", "get_cifar_iter", "(", "data_type", ",", "image_dir", ",", "batch_size", ",", "num_threads", ",", "manual_seed", ",", "local_rank", "=", "0", ",", "world_size", "=", "1", ",", "val_size", "=", "32", ",", "cutout", "=", "0", ")", ":", "\n", "    ", "if", "data_type", "==", "'train'", ":", "\n", "        ", "pip_train", "=", "HybridTrainPipe_CIFAR", "(", "batch_size", "=", "batch_size", ",", "num_threads", "=", "num_threads", ",", "device_id", "=", "local_rank", ",", "\n", "data_dir", "=", "image_dir", ",", "\n", "crop", "=", "32", ",", "world_size", "=", "world_size", ",", "local_rank", "=", "local_rank", ",", "cutout", "=", "cutout", ",", "manual_seed", "=", "manual_seed", ")", "\n", "pip_train", ".", "build", "(", ")", "\n", "dali_iter_train", "=", "DALIDataloader", "(", "pipeline", "=", "pip_train", ",", "size", "=", "CIFAR_IMAGES_NUM_TRAIN", "//", "world_size", ",", "batch_size", "=", "batch_size", ",", "onehot_label", "=", "True", ",", "dataset", "=", "'cifar10'", ")", "\n", "return", "dali_iter_train", "\n", "\n", "", "elif", "data_type", "==", "'val'", ":", "\n", "        ", "pip_val", "=", "HybridValPipe_CIFAR", "(", "batch_size", "=", "batch_size", ",", "num_threads", "=", "num_threads", ",", "device_id", "=", "local_rank", ",", "\n", "data_dir", "=", "image_dir", ",", "\n", "crop", "=", "32", ",", "size", "=", "val_size", ",", "world_size", "=", "world_size", ",", "local_rank", "=", "local_rank", ",", "manual_seed", "=", "manual_seed", ")", "\n", "pip_val", ".", "build", "(", ")", "\n", "dali_iter_val", "=", "DALIDataloader", "(", "pipeline", "=", "pip_val", ",", "size", "=", "CIFAR_IMAGES_NUM_TEST", "//", "world_size", ",", "batch_size", "=", "batch_size", ",", "onehot_label", "=", "True", ",", "dataset", "=", "'cifar10'", ")", "\n", "return", "dali_iter_val", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.pytorch_utils.AverageMeter.__init__": [[190, 195], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.pytorch_utils.AverageMeter.reset": [[196, 201], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.pytorch_utils.AverageMeter.update": [[202, 207], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.pytorch_utils._make_divisible": [[6, 24], ["max", "int"], "function", ["None"], ["def", "_make_divisible", "(", "v", ",", "divisor", "=", "8", ",", "min_value", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    This function is taken from the original tf repo.\n    It ensures that all layers have a channel number that is divisible by 8\n    It can be seen here:\n    https://github.com/tensorflow/models/blob/master/research/slim/nets/mobilenet/mobilenet.py\n    :param v:\n    :param divisor:\n    :param min_value:\n    :return:\n    \"\"\"", "\n", "if", "min_value", "is", "None", ":", "\n", "        ", "min_value", "=", "divisor", "\n", "", "new_v", "=", "max", "(", "min_value", ",", "int", "(", "v", "+", "divisor", "/", "2", ")", "//", "divisor", "*", "divisor", ")", "\n", "# Make sure that round down does not go down by more than 10%.", "\n", "if", "new_v", "<", "0.9", "*", "v", ":", "\n", "        ", "new_v", "+=", "divisor", "\n", "", "return", "new_v", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.pytorch_utils.build_activation": [[25, 38], ["torch.ReLU", "torch.ReLU6", "torch.Tanh", "torch.Sigmoid", "ValueError"], "function", ["None"], ["", "def", "build_activation", "(", "act_func", ",", "inplace", "=", "True", ")", ":", "\n", "    ", "if", "act_func", "==", "'relu'", ":", "\n", "        ", "return", "nn", ".", "ReLU", "(", "inplace", "=", "inplace", ")", "\n", "", "elif", "act_func", "==", "'relu6'", ":", "\n", "        ", "return", "nn", ".", "ReLU6", "(", "inplace", "=", "inplace", ")", "\n", "", "elif", "act_func", "==", "'tanh'", ":", "\n", "        ", "return", "nn", ".", "Tanh", "(", ")", "\n", "", "elif", "act_func", "==", "'sigmoid'", ":", "\n", "        ", "return", "nn", ".", "Sigmoid", "(", ")", "\n", "", "elif", "act_func", "is", "None", ":", "\n", "        ", "return", "None", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'do not support: %s'", "%", "act_func", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.pytorch_utils.raw2cfg": [[39, 71], ["range", "range", "model.cfg2flops", "len", "max", "min", "len", "pytorch_utils._make_divisible", "print", "abs", "str", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.mac-automl_itpruner.nets.resnet_cifar.ResNet_CIFAR.cfg2flops", "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.pytorch_utils._make_divisible"], ["", "", "def", "raw2cfg", "(", "model", ",", "raw_ratios", ",", "flops", ",", "p", "=", "False", ",", "div", "=", "8", ")", ":", "\n", "    ", "left", "=", "0", "\n", "right", "=", "50", "\n", "scale", "=", "0", "\n", "cfg", "=", "None", "\n", "current_flops", "=", "0", "\n", "base_channels", "=", "model", ".", "config", "[", "'cfg_base'", "]", "\n", "cnt", "=", "0", "\n", "while", "(", "True", ")", ":", "\n", "        ", "cnt", "+=", "1", "\n", "scale", "=", "(", "left", "+", "right", ")", "/", "2", "\n", "scaled_ratios", "=", "raw_ratios", "*", "scale", "\n", "for", "i", "in", "range", "(", "len", "(", "scaled_ratios", ")", ")", ":", "\n", "            ", "scaled_ratios", "[", "i", "]", "=", "max", "(", "0.1", ",", "scaled_ratios", "[", "i", "]", ")", "\n", "scaled_ratios", "[", "i", "]", "=", "min", "(", "1", ",", "scaled_ratios", "[", "i", "]", ")", "\n", "", "cfg", "=", "(", "base_channels", "*", "scaled_ratios", ")", ".", "astype", "(", "int", ")", ".", "tolist", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "cfg", ")", ")", ":", "\n", "            ", "cfg", "[", "i", "]", "=", "_make_divisible", "(", "cfg", "[", "i", "]", ",", "div", ")", "# 8 divisible channels", "\n", "", "current_flops", "=", "model", ".", "cfg2flops", "(", "cfg", ")", "\n", "if", "cnt", ">", "20", ":", "\n", "            ", "break", "\n", "", "if", "abs", "(", "current_flops", "-", "flops", ")", "/", "flops", "<", "0.01", ":", "\n", "            ", "break", "\n", "", "if", "p", ":", "\n", "            ", "print", "(", "str", "(", "current_flops", ")", "+", "'---'", "+", "str", "(", "flops", ")", "+", "'---left: '", "+", "str", "(", "left", ")", "+", "'---right: '", "+", "str", "(", "right", ")", "+", "'---cfg: '", "+", "str", "(", "cfg", ")", ")", "\n", "", "if", "current_flops", "<", "flops", ":", "\n", "            ", "left", "=", "scale", "\n", "", "elif", "current_flops", ">", "flops", ":", "\n", "            ", "right", "=", "scale", "\n", "", "else", ":", "\n", "            ", "break", "\n", "", "", "return", "cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.pytorch_utils.weight2mask": [[72, 80], ["weight.abs().clone", "torch.sum", "torch.sum", "torch.argsort", "torch.argsort", "arg_max[].tolist", "numpy.zeros", "weight.abs"], "function", ["None"], ["", "def", "weight2mask", "(", "weight", ",", "keep_c", ")", ":", "# simple L1 pruning", "\n", "    ", "weight_copy", "=", "weight", ".", "abs", "(", ")", ".", "clone", "(", ")", "\n", "L1_norm", "=", "torch", ".", "sum", "(", "weight_copy", ",", "dim", "=", "(", "1", ",", "2", ",", "3", ")", ")", "\n", "arg_max", "=", "torch", ".", "argsort", "(", "L1_norm", ",", "descending", "=", "True", ")", "\n", "arg_max_rev", "=", "arg_max", "[", ":", "keep_c", "]", ".", "tolist", "(", ")", "\n", "mask", "=", "np", ".", "zeros", "(", "weight", ".", "shape", "[", "0", "]", ")", "\n", "mask", "[", "arg_max_rev", "]", "=", "1", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.pytorch_utils.get_unpruned_weights": [[81, 140], ["zip", "model_origin.named_modules", "model.named_modules", "isinstance", "isinstance", "m0[].weight.data.clone", "masks.append", "isinstance", "m0[].weight.data.clone", "m0[].bias.data.clone", "m0[].running_mean.clone", "m0[].running_var.clone", "m0[].endswith", "numpy.squeeze", "m0[].weight.data[].clone", "m0[].endswith", "numpy.squeeze", "m0[].weight.data[].clone.clone", "masks.append", "numpy.squeeze", "m0[].weight.data[].clone", "m0[].bias.data[].clone", "m0[].running_mean[].clone", "m0[].running_var[].clone", "len", "numpy.argwhere", "numpy.resize", "masks.append", "numpy.argwhere", "numpy.resize", "w[].clone", "m0[].weight.data[].clone", "numpy.argwhere", "numpy.resize", "pytorch_utils.weight2mask", "pytorch_utils.weight2mask", "m0[].weight.data[].clone.clone", "np.resize.tolist", "np.resize.tolist", "np.resize.tolist", "np.resize.tolist", "np.resize.tolist", "np.resize.tolist", "np.resize.tolist"], "function", ["home.repos.pwc.inspect_result.mac-automl_itpruner.utils.pytorch_utils.weight2mask", "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.pytorch_utils.weight2mask"], ["", "def", "get_unpruned_weights", "(", "model", ",", "model_origin", ")", ":", "\n", "    ", "masks", "=", "[", "]", "\n", "for", "[", "m0", ",", "m1", "]", "in", "zip", "(", "model_origin", ".", "named_modules", "(", ")", ",", "model", ".", "named_modules", "(", ")", ")", ":", "\n", "        ", "if", "isinstance", "(", "m0", "[", "1", "]", ",", "nn", ".", "Conv2d", ")", ":", "\n", "            ", "if", "m0", "[", "1", "]", ".", "weight", ".", "data", ".", "shape", "!=", "m1", "[", "1", "]", ".", "weight", ".", "data", ".", "shape", ":", "\n", "                ", "flag", "=", "False", "\n", "if", "m0", "[", "1", "]", ".", "weight", ".", "data", ".", "shape", "[", "1", "]", "!=", "m1", "[", "1", "]", ".", "weight", ".", "data", ".", "shape", "[", "1", "]", ":", "\n", "                    ", "assert", "len", "(", "masks", ")", ">", "0", ",", "\"masks is empty!\"", "\n", "if", "m0", "[", "0", "]", ".", "endswith", "(", "'downsample.conv'", ")", ":", "\n", "                        ", "if", "model", ".", "config", "[", "'depth'", "]", ">=", "50", ":", "\n", "                            ", "mask", "=", "masks", "[", "-", "4", "]", "\n", "", "else", ":", "\n", "                            ", "mask", "=", "masks", "[", "-", "3", "]", "\n", "", "", "else", ":", "\n", "                        ", "mask", "=", "masks", "[", "-", "1", "]", "\n", "", "idx", "=", "np", ".", "squeeze", "(", "np", ".", "argwhere", "(", "mask", ")", ")", "\n", "if", "idx", ".", "size", "==", "1", ":", "\n", "                        ", "idx", "=", "np", ".", "resize", "(", "idx", ",", "(", "1", ",", ")", ")", "\n", "", "w", "=", "m0", "[", "1", "]", ".", "weight", ".", "data", "[", ":", ",", "idx", ".", "tolist", "(", ")", ",", ":", ",", ":", "]", ".", "clone", "(", ")", "\n", "flag", "=", "True", "\n", "if", "m0", "[", "1", "]", ".", "weight", ".", "data", ".", "shape", "[", "0", "]", "==", "m1", "[", "1", "]", ".", "weight", ".", "data", ".", "shape", "[", "0", "]", ":", "\n", "                        ", "masks", ".", "append", "(", "None", ")", "\n", "", "", "if", "m0", "[", "1", "]", ".", "weight", ".", "data", ".", "shape", "[", "0", "]", "!=", "m1", "[", "1", "]", ".", "weight", ".", "data", ".", "shape", "[", "0", "]", ":", "\n", "                    ", "if", "m0", "[", "0", "]", ".", "endswith", "(", "'downsample.conv'", ")", ":", "\n", "                        ", "mask", "=", "masks", "[", "-", "1", "]", "\n", "", "else", ":", "\n", "                        ", "if", "flag", ":", "\n", "                            ", "mask", "=", "weight2mask", "(", "w", ".", "clone", "(", ")", ",", "m1", "[", "1", "]", ".", "weight", ".", "data", ".", "shape", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                            ", "mask", "=", "weight2mask", "(", "m0", "[", "1", "]", ".", "weight", ".", "data", ",", "m1", "[", "1", "]", ".", "weight", ".", "data", ".", "shape", "[", "0", "]", ")", "\n", "", "", "idx", "=", "np", ".", "squeeze", "(", "np", ".", "argwhere", "(", "mask", ")", ")", "\n", "if", "idx", ".", "size", "==", "1", ":", "\n", "                        ", "idx", "=", "np", ".", "resize", "(", "idx", ",", "(", "1", ",", ")", ")", "\n", "", "if", "flag", ":", "\n", "                        ", "w", "=", "w", "[", "idx", ".", "tolist", "(", ")", ",", ":", ",", ":", ",", ":", "]", ".", "clone", "(", ")", "\n", "", "else", ":", "\n", "                        ", "w", "=", "m0", "[", "1", "]", ".", "weight", ".", "data", "[", "idx", ".", "tolist", "(", ")", ",", ":", ",", ":", ",", ":", "]", ".", "clone", "(", ")", "\n", "", "m1", "[", "1", "]", ".", "weight", ".", "data", "=", "w", ".", "clone", "(", ")", "\n", "masks", ".", "append", "(", "mask", ")", "\n", "", "continue", "\n", "", "else", ":", "\n", "                ", "m1", "[", "1", "]", ".", "weight", ".", "data", "=", "m0", "[", "1", "]", ".", "weight", ".", "data", ".", "clone", "(", ")", "\n", "masks", ".", "append", "(", "None", ")", "\n", "", "", "elif", "isinstance", "(", "m0", "[", "1", "]", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "            ", "assert", "isinstance", "(", "m1", "[", "1", "]", ",", "nn", ".", "BatchNorm2d", ")", ",", "\"There should not be bn layer here.\"", "\n", "if", "m0", "[", "1", "]", ".", "weight", ".", "data", ".", "shape", "!=", "m1", "[", "1", "]", ".", "weight", ".", "data", ".", "shape", ":", "\n", "                ", "mask", "=", "masks", "[", "-", "1", "]", "\n", "idx", "=", "np", ".", "squeeze", "(", "np", ".", "argwhere", "(", "mask", ")", ")", "\n", "if", "idx", ".", "size", "==", "1", ":", "\n", "                    ", "idx", "=", "np", ".", "resize", "(", "idx", ",", "(", "1", ",", ")", ")", "\n", "", "m1", "[", "1", "]", ".", "weight", ".", "data", "=", "m0", "[", "1", "]", ".", "weight", ".", "data", "[", "idx", ".", "tolist", "(", ")", "]", ".", "clone", "(", ")", "\n", "m1", "[", "1", "]", ".", "bias", ".", "data", "=", "m0", "[", "1", "]", ".", "bias", ".", "data", "[", "idx", ".", "tolist", "(", ")", "]", ".", "clone", "(", ")", "\n", "m1", "[", "1", "]", ".", "running_mean", "=", "m0", "[", "1", "]", ".", "running_mean", "[", "idx", ".", "tolist", "(", ")", "]", ".", "clone", "(", ")", "\n", "m1", "[", "1", "]", ".", "running_var", "=", "m0", "[", "1", "]", ".", "running_var", "[", "idx", ".", "tolist", "(", ")", "]", ".", "clone", "(", ")", "\n", "continue", "\n", "", "m1", "[", "1", "]", ".", "weight", ".", "data", "=", "m0", "[", "1", "]", ".", "weight", ".", "data", ".", "clone", "(", ")", "\n", "m1", "[", "1", "]", ".", "bias", ".", "data", "=", "m0", "[", "1", "]", ".", "bias", ".", "data", ".", "clone", "(", ")", "\n", "m1", "[", "1", "]", ".", "running_mean", "=", "m0", "[", "1", "]", ".", "running_mean", ".", "clone", "(", ")", "\n", "m1", "[", "1", "]", ".", "running_var", "=", "m0", "[", "1", "]", ".", "running_var", ".", "clone", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.pytorch_utils.cross_entropy_with_label_smoothing": [[142, 152], ["torch.LogSoftmax", "pred.size", "torch.unsqueeze", "torch.unsqueeze", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like.scatter_", "torch.mean", "torch.mean", "torch.sum", "torch.sum", "nn.LogSoftmax."], "function", ["None"], ["", "", "", "def", "cross_entropy_with_label_smoothing", "(", "pred", ",", "target", ",", "label_smoothing", "=", "0.1", ")", ":", "\n", "    ", "logsoftmax", "=", "nn", ".", "LogSoftmax", "(", "dim", "=", "1", ")", "\n", "n_classes", "=", "pred", ".", "size", "(", "1", ")", "\n", "# convert to one-hot", "\n", "target", "=", "torch", ".", "unsqueeze", "(", "target", ",", "1", ")", "\n", "soft_target", "=", "torch", ".", "zeros_like", "(", "pred", ")", "\n", "soft_target", ".", "scatter_", "(", "1", ",", "target", ",", "1", ")", "\n", "# label smoothing", "\n", "soft_target", "=", "soft_target", "*", "(", "1", "-", "label_smoothing", ")", "+", "label_smoothing", "/", "n_classes", "\n", "return", "torch", ".", "mean", "(", "torch", ".", "sum", "(", "-", "soft_target", "*", "logsoftmax", "(", "pred", ")", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.pytorch_utils.count_parameters": [[154, 157], ["sum", "p.numel", "model.parameters"], "function", ["None"], ["", "def", "count_parameters", "(", "model", ")", ":", "\n", "    ", "total_params", "=", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", ")", "\n", "return", "total_params", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.pytorch_utils.detach_variable": [[159, 166], ["isinstance", "tuple", "inputs.detach", "pytorch_utils.detach_variable"], "function", ["home.repos.pwc.inspect_result.mac-automl_itpruner.utils.pytorch_utils.detach_variable"], ["", "def", "detach_variable", "(", "inputs", ")", ":", "\n", "    ", "if", "isinstance", "(", "inputs", ",", "tuple", ")", ":", "\n", "        ", "return", "tuple", "(", "[", "detach_variable", "(", "x", ")", "for", "x", "in", "inputs", "]", ")", "\n", "", "else", ":", "\n", "        ", "x", "=", "inputs", ".", "detach", "(", ")", "\n", "x", ".", "requires_grad", "=", "inputs", ".", "requires_grad", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.pytorch_utils.accuracy": [[168, 182], ["max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].reshape().float().sum", "res.append", "correct[].reshape().float().sum.mul_", "target.view", "correct[].reshape().float", "correct[].reshape"], "function", ["None"], ["", "", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\" Computes the precision@k for the specified values of k \"\"\"", "\n", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "        ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "reshape", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.dist_utils.init_dist": [[8, 23], ["str", "int", "int", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.init_process_group", "torch.get_start_method", "torch.set_start_method", "str"], "function", ["None"], ["def", "init_dist", "(", "backend", "=", "'nccl'", ",", "\n", "master_ip", "=", "'tcp://127.0.0.1'", ",", "\n", "port", "=", "6669", ")", ":", "\n", "    ", "if", "mp", ".", "get_start_method", "(", "allow_none", "=", "True", ")", "is", "None", ":", "\n", "        ", "mp", ".", "set_start_method", "(", "'spawn'", ")", "\n", "", "os", ".", "environ", "[", "'MASTER_ADDR'", "]", "=", "master_ip", "\n", "os", ".", "environ", "[", "'MASTER_PORT'", "]", "=", "str", "(", "port", ")", "\n", "rank", "=", "int", "(", "os", ".", "environ", "[", "'RANK'", "]", ")", "\n", "world_size", "=", "int", "(", "os", ".", "environ", "[", "'WORLD_SIZE'", "]", ")", "\n", "num_gpus", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "rank", "%", "num_gpus", ")", "\n", "dist_url", "=", "master_ip", "+", "':'", "+", "str", "(", "port", ")", "\n", "dist", ".", "init_process_group", "(", "backend", "=", "backend", ",", "init_method", "=", "dist_url", ",", "world_size", "=", "world_size", ",", "rank", "=", "rank", ")", "\n", "return", "rank", ",", "world_size", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.dist_utils.average_gradients": [[25, 29], ["model.parameters", "torch.all_reduce"], "function", ["None"], ["", "def", "average_gradients", "(", "model", ")", ":", "\n", "    ", "for", "param", "in", "model", ".", "parameters", "(", ")", ":", "\n", "        ", "if", "param", ".", "requires_grad", "and", "not", "(", "param", ".", "grad", "is", "None", ")", ":", "\n", "            ", "dist", ".", "all_reduce", "(", "param", ".", "grad", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.dist_utils.average_group_gradients": [[31, 35], ["torch.all_reduce"], "function", ["None"], ["", "", "", "def", "average_group_gradients", "(", "group_params", ")", ":", "\n", "    ", "for", "param", "in", "group_params", ":", "\n", "        ", "if", "param", ".", "requires_grad", "and", "not", "(", "param", ".", "grad", "is", "None", ")", ":", "\n", "            ", "dist", ".", "all_reduce", "(", "param", ".", "grad", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.dist_utils.sync_bn_stat": [[37, 46], ["model.modules", "type", "torch.all_reduce", "mod.running_mean.data.div_", "torch.all_reduce", "mod.running_var.data.div_"], "function", ["None"], ["", "", "", "def", "sync_bn_stat", "(", "model", ",", "world_size", ")", ":", "\n", "    ", "if", "world_size", "==", "1", ":", "\n", "        ", "return", "\n", "", "for", "mod", "in", "model", ".", "modules", "(", ")", ":", "\n", "        ", "if", "type", "(", "mod", ")", "==", "nn", ".", "BatchNorm2d", ":", "\n", "            ", "dist", ".", "all_reduce", "(", "mod", ".", "running_mean", ".", "data", ")", "\n", "mod", ".", "running_mean", ".", "data", ".", "div_", "(", "world_size", ")", "\n", "dist", ".", "all_reduce", "(", "mod", ".", "running_var", ".", "data", ")", "\n", "mod", ".", "running_var", ".", "data", ".", "div_", "(", "world_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.dist_utils.broadcast_params": [[48, 51], ["model.state_dict().values", "torch.broadcast", "model.state_dict"], "function", ["home.repos.pwc.inspect_result.mac-automl_itpruner.utils.utils.WarmUpCosineLRScheduler.state_dict"], ["", "", "", "def", "broadcast_params", "(", "model", ")", ":", "\n", "    ", "for", "p", "in", "model", ".", "state_dict", "(", ")", ".", "values", "(", ")", ":", "\n", "        ", "dist", ".", "broadcast", "(", "p", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.dist_utils.reduce_vars": [[53, 62], ["torch.all_reduce", "vars_result.append"], "function", ["None"], ["", "", "def", "reduce_vars", "(", "vars_list", ",", "world_size", ")", ":", "\n", "    ", "if", "world_size", "==", "1", ":", "\n", "        ", "return", "\n", "", "vars_result", "=", "[", "]", "\n", "for", "var", "in", "vars_list", ":", "\n", "        ", "var", "=", "var", "/", "world_size", "\n", "dist", ".", "all_reduce", "(", "var", ")", "\n", "vars_result", ".", "append", "(", "var", ")", "\n", "", "return", "vars_result", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.dist_utils.sync_adam_optimizer": [[64, 67], ["None"], "function", ["None"], ["", "def", "sync_adam_optimizer", "(", "opt", ",", "world_size", ")", ":", "\n", "# use this when using Adam for parallel training", "\n", "    ", "pass", "\n", "", ""]], "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.helper.init_logging": [[7, 24], ["logging.getLogger", "logging.getLogger.setLevel", "logging.Formatter", "logging.FileHandler", "logging.FileHandler.setFormatter", "logging.getLogger.addHandler", "logging.StreamHandler", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler", "os.path.isdir", "print", "os.makedirs", "os.path.dirname", "os.path.dirname"], "function", ["None"], ["def", "init_logging", "(", "log_path", ")", ":", "\n", "\n", "  ", "if", "not", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "dirname", "(", "log_path", ")", ")", ":", "\n", "    ", "print", "(", "\"Log path does not exist. Create a new one.\"", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "log_path", ")", ")", "\n", "\n", "", "log", "=", "logging", ".", "getLogger", "(", ")", "\n", "log", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "logFormatter", "=", "logging", ".", "Formatter", "(", "'%(asctime)s [%(levelname)s]: %(message)s'", ")", "\n", "\n", "fileHandler", "=", "logging", ".", "FileHandler", "(", "log_path", ")", "\n", "fileHandler", ".", "setFormatter", "(", "logFormatter", ")", "\n", "log", ".", "addHandler", "(", "fileHandler", ")", "\n", "\n", "consoleHandler", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "consoleHandler", ".", "setFormatter", "(", "logFormatter", ")", "\n", "log", ".", "addHandler", "(", "consoleHandler", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.helper.print_args": [[26, 29], ["zip", "args.keys", "args.values", "logging.info"], "function", ["None"], ["", "def", "print_args", "(", "args", ")", ":", "\n", "  ", "for", "k", ",", "v", "in", "zip", "(", "args", ".", "keys", "(", ")", ",", "args", ".", "values", "(", ")", ")", ":", "\n", "    ", "logging", ".", "info", "(", "\"{0}: {1}\"", ".", "format", "(", "k", ",", "v", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.helper.generate_job_id": [[31, 33], ["random.sample"], "function", ["None"], ["", "", "def", "generate_job_id", "(", ")", ":", "\n", "  ", "return", "''", ".", "join", "(", "random", ".", "sample", "(", "string", ".", "ascii_letters", "+", "string", ".", "digits", ",", "8", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.compute_flops.lookup_table_flops": [[11, 99], ["compute_flops.lookup_table_flops.foo"], "function", ["None"], ["def", "lookup_table_flops", "(", "model", ",", "candidate_width", ",", "alphas", "=", "None", ",", "input_res", "=", "32", ",", "multiply_adds", "=", "False", ")", ":", "\n", "    ", "if", "alphas", "is", "None", ":", "\n", "        ", "for", "n", ",", "v", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "'alphas'", "in", "n", ":", "\n", "                ", "alphas", "=", "v", "\n", "", "", "", "num_conv", "=", "alphas", ".", "shape", "[", "0", "]", "\n", "device", "=", "alphas", ".", "device", "\n", "\n", "# obtain the feature map sizes", "\n", "list_bn", "=", "[", "]", "\n", "def", "bn_hook", "(", "self", ",", "input", ",", "output", ")", ":", "\n", "        ", "if", "input", "[", "0", "]", ".", "ndimension", "(", ")", "==", "4", ":", "\n", "            ", "list_bn", ".", "append", "(", "input", "[", "0", "]", ".", "shape", ")", "\n", "\n", "", "", "def", "foo", "(", "net", ")", ":", "\n", "        ", "childrens", "=", "list", "(", "net", ".", "children", "(", ")", ")", "\n", "if", "not", "childrens", ":", "\n", "            ", "if", "isinstance", "(", "net", ",", "torch", ".", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "net", ".", "register_forward_hook", "(", "bn_hook", ")", "\n", "", "return", "\n", "", "for", "c", "in", "childrens", ":", "\n", "            ", "foo", "(", "c", ")", "\n", "\n", "", "", "foo", "(", "model", ")", "\n", "input_", "=", "torch", ".", "rand", "(", "1", ",", "3", ",", "input_res", ",", "input_res", ")", ".", "to", "(", "alphas", ".", "device", ")", "\n", "input_", ".", "requires_grad", "=", "True", "\n", "# print('alphas:', alphas)", "\n", "# print('inputs:', input_)", "\n", "if", "torch", ".", "cuda", ".", "device_count", "(", ")", ">", "1", ":", "\n", "        ", "model", ".", "module", ".", "register_buffer", "(", "'alphas_tmp'", ",", "alphas", ".", "data", ")", "\n", "", "else", ":", "\n", "        ", "model", ".", "register_buffer", "(", "'alphas_tmp'", ",", "alphas", ".", "data", ")", "\n", "", "out", "=", "model", "(", "input_", ")", "\n", "\n", "# TODO: only appliable for resnet_20s: 2 convs followed by 1 shortcut", "\n", "list_main_bn", "=", "[", "]", "\n", "num_width", "=", "len", "(", "candidate_width", ")", "\n", "\n", "for", "i", ",", "b", "in", "enumerate", "(", "list_bn", ")", ":", "\n", "        ", "if", "i", "//", "num_width", "==", "0", "or", "(", "(", "i", "-", "num_width", ")", "//", "(", "num_width", "**", "2", ")", ">=", "0", "and", "(", "(", "i", "-", "num_width", ")", "//", "(", "num_width", ")", "**", "2", ")", "%", "3", "!=", "2", ")", ":", "\n", "            ", "list_main_bn", ".", "append", "(", "b", ")", "\n", "", "", "assert", "len", "(", "list_main_bn", ")", "==", "(", "num_width", "+", "num_width", "**", "2", "*", "(", "num_conv", "-", "1", ")", ")", ",", "'wrong list of feature map length'", "\n", "\n", "# start compute flops for each branch", "\n", "# first obtain the kernel shapes, a list of length: num_width + num_width**2 * num_conv", "\n", "\n", "def", "kernel_shape_types", "(", "candidate_width", ")", ":", "\n", "        ", "kshape_types", "=", "[", "]", "\n", "first_kshape_types", "=", "[", "]", "\n", "for", "i", "in", "candidate_width", ":", "\n", "            ", "first_kshape_types", ".", "append", "(", "(", "i", ",", "3", ",", "3", ",", "3", ")", ")", "\n", "\n", "", "for", "i", "in", "candidate_width", ":", "\n", "            ", "for", "j", "in", "candidate_width", ":", "\n", "                ", "kshape_types", ".", "append", "(", "(", "i", ",", "j", ",", "3", ",", "3", ")", ")", "# [co, ci, k, k]", "\n", "", "", "return", "kshape_types", ",", "first_kshape_types", "\n", "\n", "", "kshape_types", ",", "first_kshape_types", "=", "kernel_shape_types", "(", "candidate_width", ")", "\n", "k_shapes", "=", "[", "]", "\n", "layer_idx", "=", "0", "\n", "for", "v", "in", "model", ".", "parameters", "(", ")", ":", "\n", "        ", "if", "v", ".", "ndimension", "(", ")", "==", "4", "and", "v", ".", "shape", "[", "2", "]", "==", "3", ":", "\n", "            ", "if", "layer_idx", "==", "0", ":", "\n", "                ", "k_shapes", "+=", "first_kshape_types", "\n", "", "else", ":", "\n", "                ", "k_shapes", "+=", "kshape_types", "\n", "", "layer_idx", "+=", "1", "\n", "\n", "# compute flops", "\n", "", "", "flops", "=", "[", "]", "# a list of length: num_width + num_width**2 * num_conv", "\n", "for", "idx", ",", "a_shape", "in", "enumerate", "(", "list_main_bn", ")", ":", "\n", "        ", "n", ",", "ci", ",", "h", ",", "w", "=", "a_shape", "\n", "k_shape", "=", "k_shapes", "[", "idx", "]", "\n", "co", ",", "ci", ",", "k", ",", "_", "=", "k_shape", "\n", "flop", "=", "co", "*", "ci", "*", "k", "*", "k", "*", "h", "*", "w", "\n", "flops", ".", "append", "(", "flop", ")", "\n", "\n", "# reshape flops back to list. len == num_conv", "\n", "", "table_flops", "=", "[", "]", "\n", "table_flops", ".", "append", "(", "torch", ".", "Tensor", "(", "flops", "[", ":", "num_width", "]", ")", ".", "to", "(", "device", ")", ")", "\n", "for", "layer_idx", "in", "range", "(", "num_conv", "-", "1", ")", ":", "\n", "        ", "tmp", "=", "flops", "[", "num_width", "+", "layer_idx", "*", "num_width", "**", "2", ":", "num_width", "+", "(", "layer_idx", "+", "1", ")", "*", "num_width", "**", "2", "]", "\n", "assert", "len", "(", "tmp", ")", "==", "num_width", "**", "2", ",", "'need have %d elements in %d layer'", "%", "(", "num_width", "**", "2", ",", "layer_idx", "+", "1", ")", "\n", "table_flops", ".", "append", "(", "torch", ".", "Tensor", "(", "tmp", ")", ".", "to", "(", "device", ")", ")", "\n", "\n", "", "return", "table_flops", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.compute_flops.print_model_param_nums": [[101, 105], ["sum", "print", "param.nelement", "model.parameters"], "function", ["None"], ["", "def", "print_model_param_nums", "(", "model", ",", "multiply_adds", "=", "False", ")", ":", "\n", "    ", "total", "=", "sum", "(", "[", "param", ".", "nelement", "(", ")", "for", "param", "in", "model", ".", "parameters", "(", ")", "]", ")", "\n", "print", "(", "'  + Number of original params: %.8fM'", "%", "(", "total", "/", "1e6", ")", ")", "\n", "return", "total", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.compute_flops.print_model_param_flops": [[107, 201], ["model.cuda.cuda", "compute_flops.lookup_table_flops.foo"], "function", ["None"], ["", "def", "print_model_param_flops", "(", "model", ",", "input_res", ",", "multiply_adds", "=", "False", ")", ":", "\n", "\n", "    ", "prods", "=", "{", "}", "\n", "def", "save_hook", "(", "name", ")", ":", "\n", "        ", "def", "hook_per", "(", "self", ",", "input", ",", "output", ")", ":", "\n", "            ", "prods", "[", "name", "]", "=", "np", ".", "prod", "(", "input", "[", "0", "]", ".", "shape", ")", "\n", "", "return", "hook_per", "\n", "\n", "", "list_conv", "=", "[", "]", "\n", "def", "conv_hook", "(", "self", ",", "input", ",", "output", ")", ":", "\n", "        ", "batch_size", ",", "input_channels", ",", "input_height", ",", "input_width", "=", "input", "[", "0", "]", ".", "size", "(", ")", "\n", "output_channels", ",", "output_height", ",", "output_width", "=", "output", "[", "0", "]", ".", "size", "(", ")", "\n", "\n", "kernel_ops", "=", "self", ".", "kernel_size", "[", "0", "]", "*", "self", ".", "kernel_size", "[", "1", "]", "*", "(", "self", ".", "in_channels", "/", "self", ".", "groups", ")", "\n", "bias_ops", "=", "1", "if", "self", ".", "bias", "is", "not", "None", "else", "0", "\n", "\n", "params", "=", "output_channels", "*", "(", "kernel_ops", "+", "bias_ops", ")", "\n", "flops", "=", "(", "kernel_ops", "*", "(", "2", "if", "multiply_adds", "else", "1", ")", "+", "bias_ops", ")", "*", "output_channels", "*", "output_height", "*", "output_width", "*", "batch_size", "\n", "list_conv", ".", "append", "(", "flops", ")", "\n", "\n", "", "list_linear", "=", "[", "]", "\n", "def", "linear_hook", "(", "self", ",", "input", ",", "output", ")", ":", "\n", "        ", "batch_size", "=", "input", "[", "0", "]", ".", "size", "(", "0", ")", "if", "input", "[", "0", "]", ".", "dim", "(", ")", "==", "2", "else", "1", "\n", "\n", "weight_ops", "=", "self", ".", "weight", ".", "nelement", "(", ")", "*", "(", "2", "if", "multiply_adds", "else", "1", ")", "\n", "bias_ops", "=", "self", ".", "bias", ".", "nelement", "(", ")", "if", "self", ".", "bias", "is", "not", "None", "else", "0", "\n", "\n", "flops", "=", "batch_size", "*", "(", "weight_ops", "+", "bias_ops", ")", "\n", "list_linear", ".", "append", "(", "flops", ")", "\n", "\n", "", "list_bn", "=", "[", "]", "\n", "def", "bn_hook", "(", "self", ",", "input", ",", "output", ")", ":", "\n", "        ", "list_bn", ".", "append", "(", "input", "[", "0", "]", ".", "nelement", "(", ")", "*", "2", ")", "\n", "\n", "", "list_relu", "=", "[", "]", "\n", "def", "relu_hook", "(", "self", ",", "input", ",", "output", ")", ":", "\n", "        ", "list_relu", ".", "append", "(", "input", "[", "0", "]", ".", "nelement", "(", ")", ")", "\n", "\n", "", "list_pooling", "=", "[", "]", "\n", "def", "pooling_hook", "(", "self", ",", "input", ",", "output", ")", ":", "\n", "        ", "batch_size", ",", "input_channels", ",", "input_height", ",", "input_width", "=", "input", "[", "0", "]", ".", "size", "(", ")", "\n", "output_channels", ",", "output_height", ",", "output_width", "=", "output", "[", "0", "]", ".", "size", "(", ")", "\n", "\n", "kernel_ops", "=", "self", ".", "kernel_size", "*", "self", ".", "kernel_size", "\n", "bias_ops", "=", "0", "\n", "params", "=", "0", "\n", "flops", "=", "(", "kernel_ops", "+", "bias_ops", ")", "*", "output_channels", "*", "output_height", "*", "output_width", "*", "batch_size", "\n", "list_pooling", ".", "append", "(", "flops", ")", "\n", "\n", "", "list_upsample", "=", "[", "]", "\n", "# For bilinear upsample", "\n", "def", "upsample_hook", "(", "self", ",", "input", ",", "output", ")", ":", "\n", "        ", "batch_size", ",", "input_channels", ",", "input_height", ",", "input_width", "=", "input", "[", "0", "]", ".", "size", "(", ")", "\n", "output_channels", ",", "output_height", ",", "output_width", "=", "output", "[", "0", "]", ".", "size", "(", ")", "\n", "\n", "flops", "=", "output_height", "*", "output_width", "*", "output_channels", "*", "batch_size", "*", "12", "\n", "list_upsample", ".", "append", "(", "flops", ")", "\n", "\n", "", "def", "foo", "(", "net", ")", ":", "\n", "        ", "childrens", "=", "list", "(", "net", ".", "children", "(", ")", ")", "\n", "if", "not", "childrens", ":", "\n", "            ", "if", "isinstance", "(", "net", ",", "torch", ".", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "net", ".", "register_forward_hook", "(", "conv_hook", ")", "\n", "", "if", "isinstance", "(", "net", ",", "torch", ".", "nn", ".", "Linear", ")", ":", "\n", "                ", "net", ".", "register_forward_hook", "(", "linear_hook", ")", "\n", "# if isinstance(net, torch.nn.BatchNorm2d):", "\n", "#     net.register_forward_hook(bn_hook)", "\n", "# if isinstance(net, torch.nn.ReLU):", "\n", "#     net.register_forward_hook(relu_hook)", "\n", "# if isinstance(net, torch.nn.MaxPool2d) or isinstance(net, torch.nn.AvgPool2d):", "\n", "#     net.register_forward_hook(pooling_hook)", "\n", "# if isinstance(net, torch.nn.Upsample):", "\n", "#     net.register_forward_hook(upsample_hook)", "\n", "", "return", "\n", "", "for", "c", "in", "childrens", ":", "\n", "            ", "foo", "(", "c", ")", "\n", "\n", "", "", "model", "=", "model", ".", "cuda", "(", ")", "\n", "foo", "(", "model", ")", "\n", "input_", "=", "torch", ".", "rand", "(", "3", ",", "3", ",", "input_res", ",", "input_res", ")", ".", "cuda", "(", ")", "\n", "input_", ".", "requires_grad", "=", "True", "\n", "out", "=", "model", "(", "input_", ")", "\n", "\n", "total_flops", "=", "(", "sum", "(", "list_conv", ")", "+", "sum", "(", "list_linear", ")", "+", "sum", "(", "list_bn", ")", "+", "sum", "(", "list_relu", ")", "+", "sum", "(", "list_pooling", ")", "+", "sum", "(", "list_upsample", ")", ")", "\n", "total_flops", "/=", "3", "\n", "\n", "print", "(", "'  + Number of FLOPs of original model: %.8fG'", "%", "(", "total_flops", "/", "1e9", ")", ")", "\n", "# print('list_conv', list_conv)", "\n", "# print('list_linear', list_linear)", "\n", "# print('list_bn', list_bn)", "\n", "# print('list_relu', list_relu)", "\n", "# print('list_pooling', list_pooling)", "\n", "\n", "return", "total_flops", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.utils.CrossEntropyLabelSmooth.__init__": [[16, 21], ["torch.Module.__init__", "torch.LogSoftmax", "torch.LogSoftmax", "torch.LogSoftmax", "torch.LogSoftmax"], "methods", ["home.repos.pwc.inspect_result.mac-automl_itpruner.nets.__init__.SearchRunConfig.__init__"], ["  ", "def", "__init__", "(", "self", ",", "num_classes", ",", "epsilon", ")", ":", "\n", "    ", "super", "(", "CrossEntropyLabelSmooth", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "self", ".", "logsoftmax", "=", "nn", ".", "LogSoftmax", "(", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.utils.CrossEntropyLabelSmooth.forward": [[22, 28], ["utils.CrossEntropyLabelSmooth.logsoftmax", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_.unsqueeze", "torch.zeros_like().scatter_.unsqueeze", "torch.zeros_like().scatter_.unsqueeze", "torch.zeros_like().scatter_.unsqueeze", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "targets", ")", ":", "\n", "    ", "log_probs", "=", "self", ".", "logsoftmax", "(", "inputs", ")", "\n", "targets", "=", "torch", ".", "zeros_like", "(", "log_probs", ")", ".", "scatter_", "(", "1", ",", "targets", ".", "unsqueeze", "(", "1", ")", ",", "1", ")", "\n", "targets", "=", "(", "1", "-", "self", ".", "epsilon", ")", "*", "targets", "+", "self", ".", "epsilon", "/", "self", ".", "num_classes", "\n", "loss", "=", "(", "-", "targets", "*", "log_probs", ")", ".", "mean", "(", "0", ")", ".", "sum", "(", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.utils.AverageMeter.__init__": [[32, 36], ["utils.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.mac-automl_itpruner.utils.utils.AverageMeter.reset"], ["def", "__init__", "(", "self", ",", "name", ",", "fmt", "=", "':f'", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "fmt", "=", "fmt", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.utils.AverageMeter.reset": [[37, 42], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.utils.AverageMeter.update": [[43, 48], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.utils.AverageMeter.__str__": [[49, 52], ["fmtstr.format"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "fmtstr", "=", "'{name} {val'", "+", "self", ".", "fmt", "+", "'} ({avg'", "+", "self", ".", "fmt", "+", "'})'", "\n", "return", "fmtstr", ".", "format", "(", "**", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.utils.ProgressMeter.__init__": [[56, 60], ["utils.ProgressMeter._get_batch_fmtstr"], "methods", ["home.repos.pwc.inspect_result.mac-automl_itpruner.utils.utils.ProgressMeter._get_batch_fmtstr"], ["def", "__init__", "(", "self", ",", "num_batches", ",", "*", "meters", ",", "prefix", "=", "\"\"", ")", ":", "\n", "    ", "self", ".", "batch_fmtstr", "=", "self", ".", "_get_batch_fmtstr", "(", "num_batches", ")", "\n", "self", ".", "meters", "=", "meters", "\n", "self", ".", "prefix", "=", "prefix", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.utils.ProgressMeter.show": [[61, 65], ["logging.info", "str", "utils.ProgressMeter.batch_fmtstr.format"], "methods", ["None"], ["", "def", "show", "(", "self", ",", "batch", ")", ":", "\n", "    ", "entries", "=", "[", "self", ".", "prefix", "+", "self", ".", "batch_fmtstr", ".", "format", "(", "batch", ")", "]", "\n", "entries", "+=", "[", "str", "(", "meter", ")", "for", "meter", "in", "self", ".", "meters", "]", "\n", "logging", ".", "info", "(", "' '", ".", "join", "(", "entries", ")", ")", "\n", "# print(' '.join(entries))", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.utils.ProgressMeter._get_batch_fmtstr": [[67, 71], ["len", "str", "str", "fmt.format"], "methods", ["None"], ["", "def", "_get_batch_fmtstr", "(", "self", ",", "num_batches", ")", ":", "\n", "    ", "num_digits", "=", "len", "(", "str", "(", "num_batches", "//", "1", ")", ")", "\n", "fmt", "=", "'{:'", "+", "str", "(", "num_digits", ")", "+", "'d}'", "\n", "return", "'['", "+", "fmt", "+", "'/'", "+", "fmt", ".", "format", "(", "num_batches", ")", "+", "']'", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.utils.keydefaultdict.__missing__": [[173, 179], ["KeyError", "utils.keydefaultdict.default_factory"], "methods", ["None"], ["    ", "def", "__missing__", "(", "self", ",", "key", ")", ":", "\n", "        ", "if", "self", ".", "default_factory", "is", "None", ":", "\n", "            ", "raise", "KeyError", "(", "key", ")", "\n", "", "else", ":", "\n", "            ", "ret", "=", "self", "[", "key", "]", "=", "self", ".", "default_factory", "(", "key", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.utils.WarmUpCosineLRScheduler.__init__": [[185, 213], ["list", "isinstance", "TypeError", "enumerate", "map", "group.setdefault", "KeyError", "type"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "optimizer", ",", "T_max", ",", "eta_min", ",", "base_lr", ",", "warmup_lr", ",", "warmup_steps", ",", "last_iter", "=", "-", "1", ")", ":", "\n", "# Attach optimizer", "\n", "        ", "if", "not", "isinstance", "(", "optimizer", ",", "torch", ".", "optim", ".", "Optimizer", ")", ":", "\n", "            ", "raise", "TypeError", "(", "'{} is not an Optimizer'", ".", "format", "(", "\n", "type", "(", "optimizer", ")", ".", "__name__", ")", ")", "\n", "", "self", ".", "optimizer", "=", "optimizer", "\n", "\n", "# Initialize step and base learning rates", "\n", "if", "last_iter", "==", "-", "1", ":", "\n", "            ", "for", "group", "in", "optimizer", ".", "param_groups", ":", "\n", "                ", "group", ".", "setdefault", "(", "'initial_lr'", ",", "group", "[", "'lr'", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "for", "i", ",", "group", "in", "enumerate", "(", "optimizer", ".", "param_groups", ")", ":", "\n", "                ", "if", "'initial_lr'", "not", "in", "group", ":", "\n", "                    ", "raise", "KeyError", "(", "\"param 'initial_lr' is not specified \"", "\n", "\"in param_groups[{}] when resuming an optimizer\"", ".", "format", "(", "i", ")", ")", "\n", "", "", "", "self", ".", "base_lrs", "=", "list", "(", "map", "(", "lambda", "group", ":", "group", "[", "'initial_lr'", "]", ",", "optimizer", ".", "param_groups", ")", ")", "\n", "self", ".", "last_iter", "=", "last_iter", "\n", "\n", "assert", "warmup_steps", "<", "T_max", "\n", "self", ".", "T_max", "=", "T_max", "\n", "self", ".", "eta_min", "=", "eta_min", "\n", "\n", "# warmup settings", "\n", "self", ".", "base_lr", "=", "base_lr", "\n", "self", ".", "warmup_lr", "=", "warmup_lr", "\n", "self", ".", "warmup_step", "=", "warmup_steps", "\n", "self", ".", "warmup_k", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.utils.WarmUpCosineLRScheduler.state_dict": [[214, 216], ["utils.WarmUpCosineLRScheduler.__dict__.items"], "methods", ["None"], ["", "def", "state_dict", "(", "self", ")", ":", "\n", "        ", "return", "{", "key", ":", "value", "for", "key", ",", "value", "in", "self", ".", "__dict__", ".", "items", "(", ")", "if", "key", "!=", "'optimizer'", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.utils.WarmUpCosineLRScheduler.load_state_dict": [[217, 219], ["utils.WarmUpCosineLRScheduler.__dict__.update"], "methods", ["home.repos.pwc.inspect_result.mac-automl_itpruner.utils.utils.AverageMeter.update"], ["", "def", "load_state_dict", "(", "self", ",", "state_dict", ")", ":", "\n", "        ", "self", ".", "__dict__", ".", "update", "(", "state_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.utils.WarmUpCosineLRScheduler.get_lr": [[220, 222], ["list", "map"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "return", "list", "(", "map", "(", "lambda", "group", ":", "group", "[", "'lr'", "]", ",", "self", ".", "optimizer", ".", "param_groups", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.utils.WarmUpCosineLRScheduler.step": [[223, 242], ["zip", "math.cos"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "this_iter", "=", "None", ")", ":", "\n", "        ", "if", "this_iter", "is", "None", ":", "\n", "            ", "this_iter", "=", "self", ".", "last_iter", "+", "1", "\n", "", "self", ".", "last_iter", "=", "this_iter", "\n", "\n", "# get lr during warmup stage", "\n", "if", "self", ".", "warmup_step", ">", "0", "and", "this_iter", "<", "self", ".", "warmup_step", ":", "\n", "            ", "if", "self", ".", "warmup_k", "is", "None", ":", "\n", "                ", "self", ".", "warmup_k", "=", "(", "self", ".", "warmup_lr", "-", "self", ".", "base_lr", ")", "/", "self", ".", "warmup_step", "\n", "", "scale", "=", "(", "self", ".", "warmup_k", "*", "this_iter", "+", "self", ".", "base_lr", ")", "/", "self", ".", "base_lr", "\n", "# get lr during cosine annealing", "\n", "", "else", ":", "\n", "            ", "step_ratio", "=", "(", "this_iter", "-", "self", ".", "warmup_step", ")", "/", "(", "self", ".", "T_max", "-", "self", ".", "warmup_step", ")", "\n", "scale", "=", "self", ".", "eta_min", "+", "(", "self", ".", "warmup_lr", "-", "self", ".", "eta_min", ")", "*", "(", "1", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "step_ratio", ")", ")", "/", "2", "\n", "scale", "/=", "self", ".", "base_lr", "\n", "\n", "", "values", "=", "[", "scale", "*", "lr", "for", "lr", "in", "self", ".", "base_lrs", "]", "\n", "for", "param_group", ",", "lr", "in", "zip", "(", "self", ".", "optimizer", ".", "param_groups", ",", "values", ")", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.utils.accuracy": [[73, 91], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].reshape().float().sum", "res.append", "correct[].reshape().float().sum.mul_", "target.view", "correct[].reshape().float", "correct[].reshape"], "function", ["None"], ["", "", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "  ", "\"\"\"Computes the accuracy over the k top predictions for the specified values of k\n     Code taken from torchvision.\n  \"\"\"", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "    ", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "        ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "reshape", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.utils.accuracy_seen_unseen": [[92, 125], ["list", "range", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "torch.zeros().byte().cuda", "torch.zeros().byte().cuda", "torch.zeros().byte().cuda", "torch.zeros().byte().cuda", "torch.ones().byte().cuda", "torch.ones().byte().cuda", "torch.ones().byte().cuda", "torch.ones().byte().cuda", "pred[].eq", "pred[].eq", "target.view().expand_as", "target[].view().expand_as", "target[].view().expand_as", "seen_correct[].view().float().sum", "seen_accs.append", "unseen_correct[].view().float().sum", "unseen_accs.append", "correct[].view().float().sum", "res.append", "torch.zeros().byte", "torch.zeros().byte", "torch.zeros().byte", "torch.zeros().byte", "torch.ones().byte", "torch.ones().byte", "torch.ones().byte", "torch.ones().byte", "seen_correct[].view().float().sum.mul_", "unseen_correct[].view().float().sum.mul_", "correct[].view().float().sum.mul_", "target.view", "target[].view", "target[].view", "seen_correct[].view().float", "unseen_correct[].view().float", "correct[].view().float", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "seen_correct[].view", "unseen_correct[].view", "correct[].view"], "function", ["None"], ["", "", "def", "accuracy_seen_unseen", "(", "output", ",", "target", ",", "seen_classes", ",", "topk", "=", "(", "1.", ")", ")", ":", "\n", "  ", "\"\"\" Compute the acc of seen classes and unseen classes seperately.\"\"\"", "\n", "seen_classes", "=", "list", "(", "range", "(", "seen_classes", ")", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "    ", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "seen_ind", "=", "torch", ".", "zeros", "(", "target", ".", "shape", "[", "0", "]", ")", ".", "byte", "(", ")", ".", "cuda", "(", ")", "\n", "unseen_ind", "=", "torch", ".", "ones", "(", "target", ".", "shape", "[", "0", "]", ")", ".", "byte", "(", ")", ".", "cuda", "(", ")", "\n", "for", "v", "in", "seen_classes", ":", "\n", "      ", "seen_ind", "+=", "(", "target", "==", "v", ")", "\n", "", "unseen_ind", "-=", "seen_ind", "\n", "\n", "seen_correct", "=", "pred", "[", ":", ",", "seen_ind", "]", ".", "eq", "(", "target", "[", "seen_ind", "]", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", "[", ":", ",", "seen_ind", "]", ")", ")", "\n", "unseen_correct", "=", "pred", "[", ":", ",", "unseen_ind", "]", ".", "eq", "(", "target", "[", "unseen_ind", "]", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", "[", ":", ",", "unseen_ind", "]", ")", ")", "\n", "\n", "seen_num", "=", "seen_correct", ".", "shape", "[", "1", "]", "\n", "res", "=", "[", "]", "\n", "seen_accs", "=", "[", "]", "\n", "unseen_accs", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "        ", "seen_correct_k", "=", "seen_correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "seen_accs", ".", "append", "(", "seen_correct_k", ".", "mul_", "(", "100.0", "/", "(", "seen_num", "+", "1e-10", ")", ")", ")", "\n", "unseen_correct_k", "=", "unseen_correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "unseen_accs", ".", "append", "(", "unseen_correct_k", ".", "mul_", "(", "100.0", "/", "(", "batch_size", "-", "seen_num", "+", "1e-10", ")", ")", ")", "\n", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "\n", "", "return", "res", ",", "seen_accs", ",", "unseen_accs", ",", "seen_num", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.utils.is_last_layer": [[126, 132], ["W.ndimension"], "function", ["None"], ["", "", "def", "is_last_layer", "(", "layer", ")", ":", "\n", "  ", "W", "=", "layer", ".", "weight", "\n", "if", "W", ".", "ndimension", "(", ")", "==", "2", "and", "(", "W", ".", "shape", "[", "0", "]", "==", "10", "or", "W", ".", "shape", "[", "0", "]", "==", "100", "or", "W", ".", "shape", "[", "0", "]", "==", "1000", ")", ":", "\n", "    ", "return", "True", "\n", "", "else", ":", "\n", "    ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.utils.is_first_layer": [[134, 143], ["isinstance", "W.ndimension"], "function", ["None"], ["", "", "def", "is_first_layer", "(", "layer", ")", ":", "\n", "  ", "if", "isinstance", "(", "layer", ",", "nn", ".", "Conv2d", ")", ":", "\n", "    ", "W", "=", "layer", ".", "weight", "\n", "if", "W", ".", "ndimension", "(", ")", "==", "4", "and", "(", "W", ".", "shape", "[", "1", "]", "==", "3", "or", "W", ".", "shape", "[", "1", "]", "==", "1", ")", ":", "\n", "      ", "return", "True", "\n", "", "else", ":", "\n", "      ", "return", "False", "\n", "", "", "else", ":", "\n", "    ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.utils.reinitialize_conv_weights": [[145, 153], ["print", "model.parameters", "W.ndimension", "torch.init.kaiming_uniform_", "math.sqrt"], "function", ["None"], ["", "", "def", "reinitialize_conv_weights", "(", "model", ",", "init_first", "=", "False", ")", ":", "\n", "  ", "\"\"\" Only re-initialize the kernels for conv layers \"\"\"", "\n", "print", "(", "\"re-intializing conv weights done. evaluating...\"", ")", "\n", "for", "W", "in", "model", ".", "parameters", "(", ")", ":", "\n", "    ", "if", "W", ".", "ndimension", "(", ")", "==", "4", ":", "\n", "      ", "if", "W", ".", "shape", "[", "1", "]", "==", "3", "and", "not", "init_first", ":", "\n", "        ", "continue", "# do not init first conv layer", "\n", "", "nn", ".", "init", ".", "kaiming_uniform_", "(", "W", ",", "a", "=", "math", ".", "sqrt", "(", "5", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.utils.weights_init": [[155, 170], ["isinstance", "m.weight.data.uniform_", "isinstance", "math.sqrt", "m.bias.data.uniform_", "m.weight.data.uniform_", "math.sqrt", "m.bias.data.uniform_", "m.weight.size"], "function", ["None"], ["", "", "", "def", "weights_init", "(", "m", ")", ":", "\n", "  ", "\"\"\" default param initializer in pytorch. \"\"\"", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "    ", "n", "=", "m", ".", "in_channels", "\n", "for", "k", "in", "m", ".", "kernel_size", ":", "\n", "      ", "n", "*=", "k", "\n", "", "stdv", "=", "1.", "/", "math", ".", "sqrt", "(", "n", ")", "\n", "m", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "        ", "m", ".", "bias", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "    ", "stdv", "=", "1.", "/", "math", ".", "sqrt", "(", "m", ".", "weight", ".", "size", "(", "1", ")", ")", "\n", "m", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "        ", "m", ".", "bias", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.model_profiling.Timer.__init__": [[19, 23], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "verbose", "=", "False", ")", ":", "\n", "        ", "self", ".", "verbose", "=", "verbose", "\n", "self", ".", "start", "=", "None", "\n", "self", ".", "end", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.model_profiling.Timer.__enter__": [[24, 27], ["time.time"], "methods", ["None"], ["", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "self", ".", "start", "=", "time", ".", "time", "(", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.model_profiling.Timer.__exit__": [[28, 33], ["time.time", "print"], "methods", ["None"], ["", "def", "__exit__", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "self", ".", "end", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "time", "=", "self", ".", "end", "-", "self", ".", "start", "\n", "if", "self", ".", "verbose", ":", "\n", "            ", "print", "(", "'Elapsed time: %f ms.'", "%", "self", ".", "time", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.model_profiling.get_params": [[35, 39], ["numpy.sum", "numpy.prod", "list", "model_profiling..parameters", "w.size"], "function", ["None"], ["", "", "", "def", "get_params", "(", "self", ")", ":", "\n", "    ", "\"\"\"get number of params in module\"\"\"", "\n", "return", "np", ".", "sum", "(", "\n", "[", "np", ".", "prod", "(", "list", "(", "w", ".", "size", "(", ")", ")", ")", "for", "w", "in", "self", ".", "parameters", "(", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.model_profiling.run_forward": [[41, 47], ["int", "model_profiling.Timer", "range", "model_profiling..forward", "torch.cuda.synchronize", "torch.cuda.synchronize"], "function", ["home.repos.pwc.inspect_result.mac-automl_itpruner.nets.resnet_20s_decode.ResNetDecode.forward"], ["", "def", "run_forward", "(", "self", ",", "input", ")", ":", "\n", "    ", "with", "Timer", "(", ")", "as", "t", ":", "\n", "        ", "for", "_", "in", "range", "(", "num_forwards", ")", ":", "\n", "            ", "self", ".", "forward", "(", "*", "input", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "", "", "return", "int", "(", "t", ".", "time", "*", "1e9", "/", "num_forwards", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.model_profiling.conv_module_name_filter": [[49, 61], ["name.replace.replace"], "function", ["None"], ["", "def", "conv_module_name_filter", "(", "name", ")", ":", "\n", "    ", "\"\"\"filter module name to have a short view\"\"\"", "\n", "filters", "=", "{", "\n", "'kernel_size'", ":", "'k'", ",", "\n", "'stride'", ":", "'s'", ",", "\n", "'padding'", ":", "'pad'", ",", "\n", "'bias'", ":", "'b'", ",", "\n", "'groups'", ":", "'g'", ",", "\n", "}", "\n", "for", "k", "in", "filters", ":", "\n", "        ", "name", "=", "name", ".", "replace", "(", "k", ",", "filters", "[", "k", "]", ")", "\n", "", "return", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.model_profiling.module_profiling": [[63, 129], ["input[].size", "output.size", "type", "isinstance", "model_profiling.get_params", "model_profiling.run_forward", "model_profiling.conv_module_name_filter", "isinstance", "print", "model_profiling..__repr__", "model_profiling.get_params", "model_profiling.run_forward", "model_profiling.conv_module_name_filter", "isinstance", "model_profiling..__repr__", "model_profiling.get_params", "model_profiling.run_forward", "model_profiling..__repr__", "isinstance", "model_profiling.run_forward", "model_profiling..__repr__", "isinstance", "model_profiling.run_forward", "model_profiling..__repr__", "model_profiling..children", "model_profiling..name.ljust", "getattr", "getattr", "getattr", "print", "getattr", "type"], "function", ["home.repos.pwc.inspect_result.mac-automl_itpruner.models.mobilenet_imagenet.MobileNetV2.get_params", "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.model_profiling.run_forward", "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.model_profiling.conv_module_name_filter", "home.repos.pwc.inspect_result.mac-automl_itpruner.models.mobilenet_imagenet.MobileNetV2.get_params", "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.model_profiling.run_forward", "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.model_profiling.conv_module_name_filter", "home.repos.pwc.inspect_result.mac-automl_itpruner.models.mobilenet_imagenet.MobileNetV2.get_params", "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.model_profiling.run_forward", "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.model_profiling.run_forward", "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.model_profiling.run_forward"], ["", "def", "module_profiling", "(", "self", ",", "input", ",", "output", ",", "verbose", ")", ":", "\n", "    ", "ins", "=", "input", "[", "0", "]", ".", "size", "(", ")", "\n", "outs", "=", "output", ".", "size", "(", ")", "\n", "# NOTE: There are some difference between type and isinstance, thus please", "\n", "# be careful.", "\n", "t", "=", "type", "(", "self", ")", "\n", "if", "isinstance", "(", "self", ",", "nn", ".", "Conv2d", ")", ":", "\n", "        ", "self", ".", "n_macs", "=", "(", "ins", "[", "1", "]", "*", "outs", "[", "1", "]", "*", "\n", "self", ".", "kernel_size", "[", "0", "]", "*", "self", ".", "kernel_size", "[", "1", "]", "*", "\n", "outs", "[", "2", "]", "*", "outs", "[", "3", "]", "//", "self", ".", "groups", ")", "*", "outs", "[", "0", "]", "\n", "self", ".", "n_params", "=", "get_params", "(", "self", ")", "\n", "self", ".", "n_seconds", "=", "run_forward", "(", "self", ",", "input", ")", "\n", "self", ".", "name", "=", "conv_module_name_filter", "(", "self", ".", "__repr__", "(", ")", ")", "\n", "", "elif", "isinstance", "(", "self", ",", "nn", ".", "ConvTranspose2d", ")", ":", "\n", "        ", "self", ".", "n_macs", "=", "(", "ins", "[", "1", "]", "*", "outs", "[", "1", "]", "*", "\n", "self", ".", "kernel_size", "[", "0", "]", "*", "self", ".", "kernel_size", "[", "1", "]", "*", "\n", "outs", "[", "2", "]", "*", "outs", "[", "3", "]", "//", "self", ".", "groups", ")", "*", "outs", "[", "0", "]", "\n", "self", ".", "n_params", "=", "get_params", "(", "self", ")", "\n", "self", ".", "n_seconds", "=", "run_forward", "(", "self", ",", "input", ")", "\n", "self", ".", "name", "=", "conv_module_name_filter", "(", "self", ".", "__repr__", "(", ")", ")", "\n", "", "elif", "isinstance", "(", "self", ",", "nn", ".", "Linear", ")", ":", "\n", "        ", "self", ".", "n_macs", "=", "ins", "[", "1", "]", "*", "outs", "[", "1", "]", "*", "outs", "[", "0", "]", "\n", "self", ".", "n_params", "=", "get_params", "(", "self", ")", "\n", "self", ".", "n_seconds", "=", "run_forward", "(", "self", ",", "input", ")", "\n", "self", ".", "name", "=", "self", ".", "__repr__", "(", ")", "\n", "", "elif", "isinstance", "(", "self", ",", "nn", ".", "AvgPool2d", ")", ":", "\n", "# NOTE: this function is correct only when stride == kernel size", "\n", "        ", "self", ".", "n_macs", "=", "ins", "[", "1", "]", "*", "ins", "[", "2", "]", "*", "ins", "[", "3", "]", "*", "ins", "[", "0", "]", "\n", "self", ".", "n_params", "=", "0", "\n", "self", ".", "n_seconds", "=", "run_forward", "(", "self", ",", "input", ")", "\n", "self", ".", "name", "=", "self", ".", "__repr__", "(", ")", "\n", "", "elif", "isinstance", "(", "self", ",", "nn", ".", "AdaptiveAvgPool2d", ")", ":", "\n", "# NOTE: this function is correct only when stride == kernel size", "\n", "        ", "self", ".", "n_macs", "=", "ins", "[", "1", "]", "*", "ins", "[", "2", "]", "*", "ins", "[", "3", "]", "*", "ins", "[", "0", "]", "\n", "self", ".", "n_params", "=", "0", "\n", "self", ".", "n_seconds", "=", "run_forward", "(", "self", ",", "input", ")", "\n", "self", ".", "name", "=", "self", ".", "__repr__", "(", ")", "\n", "", "else", ":", "\n", "# This works only in depth-first travel of modules.", "\n", "        ", "self", ".", "n_macs", "=", "0", "\n", "self", ".", "n_params", "=", "0", "\n", "self", ".", "n_seconds", "=", "0", "\n", "num_children", "=", "0", "\n", "for", "m", "in", "self", ".", "children", "(", ")", ":", "\n", "            ", "self", ".", "n_macs", "+=", "getattr", "(", "m", ",", "'n_macs'", ",", "0", ")", "\n", "self", ".", "n_params", "+=", "getattr", "(", "m", ",", "'n_params'", ",", "0", ")", "\n", "self", ".", "n_seconds", "+=", "getattr", "(", "m", ",", "'n_seconds'", ",", "0", ")", "\n", "num_children", "+=", "1", "\n", "", "ignore_zeros_t", "=", "[", "\n", "nn", ".", "BatchNorm2d", ",", "nn", ".", "Dropout2d", ",", "nn", ".", "Dropout", ",", "nn", ".", "Sequential", ",", "\n", "nn", ".", "ReLU6", ",", "nn", ".", "ReLU", ",", "nn", ".", "MaxPool2d", ",", "\n", "nn", ".", "modules", ".", "padding", ".", "ZeroPad2d", ",", "nn", ".", "modules", ".", "activation", ".", "Sigmoid", ",", "\n", "]", "\n", "if", "(", "not", "getattr", "(", "self", ",", "'ignore_model_profiling'", ",", "False", ")", "and", "\n", "self", ".", "n_macs", "==", "0", "and", "\n", "t", "not", "in", "ignore_zeros_t", ")", ":", "\n", "            ", "print", "(", "\n", "'WARNING: leaf module {} has zero n_macs.'", ".", "format", "(", "type", "(", "self", ")", ")", ")", "\n", "", "return", "\n", "", "if", "verbose", ":", "\n", "        ", "print", "(", "\n", "self", ".", "name", ".", "ljust", "(", "name_space", ",", "' '", ")", "+", "\n", "'{:,}'", ".", "format", "(", "self", ".", "n_params", ")", ".", "rjust", "(", "params_space", ",", "' '", ")", "+", "\n", "'{:,}'", ".", "format", "(", "self", ".", "n_macs", ")", ".", "rjust", "(", "macs_space", ",", "' '", ")", "+", "\n", "'{:,}'", ".", "format", "(", "self", ".", "n_seconds", ")", ".", "rjust", "(", "seconds_space", ",", "' '", ")", ")", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.model_profiling.add_profiling_hooks": [[131, 136], ["model_profiling_hooks.append", "m.register_forward_hook", "model_profiling.module_profiling"], "function", ["home.repos.pwc.inspect_result.mac-automl_itpruner.utils.model_profiling.module_profiling"], ["", "def", "add_profiling_hooks", "(", "m", ",", "verbose", ")", ":", "\n", "    ", "global", "model_profiling_hooks", "\n", "model_profiling_hooks", ".", "append", "(", "\n", "m", ".", "register_forward_hook", "(", "lambda", "m", ",", "input", ",", "output", ":", "module_profiling", "(", "\n", "m", ",", "input", ",", "output", ",", "verbose", "=", "verbose", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.model_profiling.remove_profiling_hooks": [[138, 143], ["h.remove"], "function", ["None"], ["", "def", "remove_profiling_hooks", "(", ")", ":", "\n", "    ", "global", "model_profiling_hooks", "\n", "for", "h", "in", "model_profiling_hooks", ":", "\n", "        ", "h", ".", "remove", "(", ")", "\n", "", "model_profiling_hooks", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.model_profiling.model_profiling": [[145, 189], ["model.to.eval", "torch.rand", "torch.rand", "torch.device", "torch.device", "model.to.to", "data.to.to", "model.to.apply", "print", "model.to.", "print", "model_profiling.remove_profiling_hooks", "print", "print", "model_profiling.add_profiling_hooks"], "function", ["home.repos.pwc.inspect_result.mac-automl_itpruner.utils.model_profiling.remove_profiling_hooks", "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.model_profiling.add_profiling_hooks"], ["", "def", "model_profiling", "(", "model", ",", "height", ",", "width", ",", "batch", "=", "1", ",", "channel", "=", "3", ",", "use_cuda", "=", "True", ",", "\n", "verbose", "=", "True", ")", ":", "\n", "    ", "\"\"\" Pytorch model profiling with input image size\n    (batch, channel, height, width).\n    The function exams the number of multiply-accumulates (n_macs).\n\n    Args:\n        model: pytorch model\n        height: int\n        width: int\n        batch: int\n        channel: int\n        use_cuda: bool\n\n    Returns:\n        macs: int\n        params: int\n\n    \"\"\"", "\n", "model", ".", "eval", "(", ")", "\n", "data", "=", "torch", ".", "rand", "(", "batch", ",", "channel", ",", "height", ",", "width", ")", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "use_cuda", "else", "\"cpu\"", ")", "\n", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "data", "=", "data", ".", "to", "(", "device", ")", "\n", "model", ".", "apply", "(", "lambda", "m", ":", "add_profiling_hooks", "(", "m", ",", "verbose", "=", "verbose", ")", ")", "\n", "print", "(", "\n", "'Item'", ".", "ljust", "(", "name_space", ",", "' '", ")", "+", "\n", "'params'", ".", "rjust", "(", "macs_space", ",", "' '", ")", "+", "\n", "'macs'", ".", "rjust", "(", "macs_space", ",", "' '", ")", "+", "\n", "'nanosecs'", ".", "rjust", "(", "seconds_space", ",", "' '", ")", ")", "\n", "if", "verbose", ":", "\n", "        ", "print", "(", "''", ".", "center", "(", "\n", "name_space", "+", "params_space", "+", "macs_space", "+", "seconds_space", ",", "'-'", ")", ")", "\n", "", "model", "(", "data", ")", "\n", "if", "verbose", ":", "\n", "        ", "print", "(", "''", ".", "center", "(", "\n", "name_space", "+", "params_space", "+", "macs_space", "+", "seconds_space", ",", "'-'", ")", ")", "\n", "", "print", "(", "\n", "'Total'", ".", "ljust", "(", "name_space", ",", "' '", ")", "+", "\n", "'{:,}'", ".", "format", "(", "model", ".", "n_params", ")", ".", "rjust", "(", "params_space", ",", "' '", ")", "+", "\n", "'{:,}'", ".", "format", "(", "model", ".", "n_macs", ")", ".", "rjust", "(", "macs_space", ",", "' '", ")", "+", "\n", "'{:,}'", ".", "format", "(", "model", ".", "n_seconds", ")", ".", "rjust", "(", "seconds_space", ",", "' '", ")", ")", "\n", "remove_profiling_hooks", "(", ")", "\n", "return", "model", ".", "n_macs", ",", "model", ".", "n_params", "\n", "", ""]], "home.repos.pwc.inspect_result.mac-automl_itpruner.models.vgg.VGG_CIFAR.__init__": [[21, 45], ["models.base_models.MyNetwork.__init__", "list", "list.insert", "list.insert", "list.insert", "list.insert", "vgg.VGG_CIFAR.make_layers", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.mac-automl_itpruner.nets.__init__.SearchRunConfig.__init__", "home.repos.pwc.inspect_result.mac-automl_itpruner.models.vgg.VGG_CIFAR.make_layers"], ["    ", "def", "__init__", "(", "self", ",", "cfg", "=", "None", ",", "cutout", "=", "True", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "VGG_CIFAR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "cfg", "is", "None", ":", "\n", "            ", "cfg", "=", "[", "64", ",", "64", ",", "128", ",", "128", ",", "256", ",", "256", ",", "\n", "256", ",", "512", ",", "512", ",", "512", ",", "512", ",", "512", ",", "512", "]", "\n", "", "self", ".", "cutout", "=", "cutout", "\n", "self", ".", "cfg", "=", "cfg", "\n", "_cfg", "=", "list", "(", "cfg", ")", "\n", "_cfg", ".", "insert", "(", "2", ",", "'M'", ")", "\n", "_cfg", ".", "insert", "(", "5", ",", "'M'", ")", "\n", "_cfg", ".", "insert", "(", "9", ",", "'M'", ")", "\n", "_cfg", ".", "insert", "(", "13", ",", "'M'", ")", "\n", "self", ".", "_cfg", "=", "_cfg", "\n", "self", ".", "feature", "=", "self", ".", "make_layers", "(", "_cfg", ",", "True", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "2", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "cfg", "[", "-", "1", "]", ",", "512", ")", ",", "\n", "# nn.BatchNorm1d(512),", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "num_classes", ")", "\n", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "classifier_param", "=", "(", "\n", "self", ".", "cfg", "[", "-", "1", "]", "+", "1", ")", "*", "512", "+", "(", "512", "+", "1", ")", "*", "num_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.models.vgg.VGG_CIFAR.make_layers": [[46, 70], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "collections.OrderedDict", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["", "def", "make_layers", "(", "self", ",", "cfg", ",", "batch_norm", "=", "False", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "in_channels", "=", "3", "\n", "pool_index", "=", "0", "\n", "conv_index", "=", "0", "\n", "for", "v", "in", "cfg", ":", "\n", "            ", "if", "v", "==", "'M'", ":", "\n", "                ", "layers", "+=", "[", "(", "'maxpool_%d'", "%", "pool_index", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ")", "]", "\n", "pool_index", "+=", "1", "\n", "", "else", ":", "\n", "                ", "conv2d", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "v", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "conv_index", "+=", "1", "\n", "if", "batch_norm", ":", "\n", "                    ", "bn", "=", "nn", ".", "BatchNorm2d", "(", "v", ")", "\n", "layers", "+=", "[", "(", "'conv_%d'", "%", "conv_index", ",", "conv2d", ")", ",", "(", "'bn_%d'", "%", "conv_index", ",", "bn", ")", ",", "\n", "(", "'relu_%d'", "%", "conv_index", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "]", "\n", "", "else", ":", "\n", "                    ", "layers", "+=", "[", "(", "'conv_%d'", "%", "conv_index", ",", "conv2d", ")", ",", "\n", "(", "'relu_%d'", "%", "conv_index", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "]", "\n", "", "in_channels", "=", "v", "\n", "", "", "self", ".", "conv_num", "=", "conv_index", "\n", "return", "nn", ".", "Sequential", "(", "OrderedDict", "(", "layers", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.models.vgg.VGG_CIFAR.cfg2param": [[71, 85], ["list", "list.insert", "list.insert", "list.insert", "list.insert", "isinstance"], "methods", ["None"], ["", "def", "cfg2param", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "total_param", "=", "self", ".", "classifier_param", "\n", "c_in", "=", "3", "\n", "_cfg", "=", "list", "(", "cfg", ")", "\n", "_cfg", ".", "insert", "(", "2", ",", "'M'", ")", "\n", "_cfg", ".", "insert", "(", "5", ",", "'M'", ")", "\n", "_cfg", ".", "insert", "(", "9", ",", "'M'", ")", "\n", "_cfg", ".", "insert", "(", "13", ",", "'M'", ")", "\n", "for", "c_out", "in", "_cfg", ":", "\n", "            ", "if", "isinstance", "(", "c_out", ",", "int", ")", ":", "\n", "                ", "total_param", "+=", "3", "*", "3", "*", "c_in", "*", "c_out", "+", "2", "*", "c_out", "\n", "c_in", "=", "c_out", "\n", "", "", "total_param", "+=", "512", "*", "(", "_cfg", "[", "-", "1", "]", "+", "1", ")", "\n", "return", "total_param", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.models.vgg.VGG_CIFAR.cfg2flops": [[86, 114], ["list", "list.insert", "list.insert", "list.insert", "list.insert"], "methods", ["None"], ["", "def", "cfg2flops", "(", "self", ",", "cfg", ")", ":", "# to simplify, only count convolution flops", "\n", "        ", "_cfg", "=", "list", "(", "cfg", ")", "\n", "_cfg", ".", "insert", "(", "2", ",", "'M'", ")", "\n", "_cfg", ".", "insert", "(", "5", ",", "'M'", ")", "\n", "_cfg", ".", "insert", "(", "9", ",", "'M'", ")", "\n", "_cfg", ".", "insert", "(", "13", ",", "'M'", ")", "\n", "input_size", "=", "32", "\n", "num_classes", "=", "10", "\n", "total_flops", "=", "0", "\n", "c_in", "=", "3", "\n", "for", "c_out", "in", "_cfg", ":", "\n", "            ", "if", "c_out", "!=", "'M'", ":", "\n", "                ", "total_flops", "+=", "3", "*", "3", "*", "c_in", "*", "c_out", "*", "input_size", "*", "input_size", "# conv", "\n", "total_flops", "+=", "4", "*", "c_out", "*", "input_size", "*", "input_size", "# bn", "\n", "total_flops", "+=", "input_size", "*", "input_size", "*", "c_out", "# relu", "\n", "c_in", "=", "c_out", "\n", "", "else", ":", "\n", "                ", "input_size", "/=", "2", "\n", "total_flops", "+=", "2", "*", "input_size", "*", "input_size", "*", "c_in", "# max pool", "\n", "", "", "input_size", "/=", "2", "\n", "total_flops", "+=", "3", "*", "input_size", "*", "input_size", "*", "_cfg", "[", "-", "1", "]", "# avg pool", "\n", "total_flops", "+=", "(", "2", "*", "input_size", "*", "input_size", "*", "\n", "_cfg", "[", "-", "1", "]", "-", "1", ")", "*", "input_size", "*", "input_size", "*", "512", "# fc", "\n", "total_flops", "+=", "4", "*", "_cfg", "[", "-", "1", "]", "*", "input_size", "*", "input_size", "# bn_1d", "\n", "total_flops", "+=", "input_size", "*", "input_size", "*", "512", "# relu", "\n", "total_flops", "+=", "(", "2", "*", "input_size", "*", "input_size", "*", "512", "-", "1", ")", "*", "input_size", "*", "input_size", "*", "num_classes", "# fc", "\n", "return", "total_flops", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.models.vgg.VGG_CIFAR.cfg2flops_perlayer": [[115, 151], ["list", "list.insert", "list.insert", "list.insert", "list.insert", "numpy.zeros", "range", "range"], "methods", ["None"], ["", "def", "cfg2flops_perlayer", "(", "self", ",", "cfg", ",", "length", ")", ":", "# to simplify, only count convolution flops", "\n", "        ", "_cfg", "=", "list", "(", "cfg", ")", "\n", "_cfg", ".", "insert", "(", "2", ",", "'M'", ")", "\n", "_cfg", ".", "insert", "(", "5", ",", "'M'", ")", "\n", "_cfg", ".", "insert", "(", "9", ",", "'M'", ")", "\n", "_cfg", ".", "insert", "(", "13", ",", "'M'", ")", "\n", "input_size", "=", "32", "\n", "num_classes", "=", "10", "\n", "flops_singlecfg", "=", "[", "0", "for", "j", "in", "range", "(", "length", ")", "]", "\n", "flops_doublecfg", "=", "np", ".", "zeros", "(", "(", "length", ",", "length", ")", ")", "\n", "flops_squarecfg", "=", "[", "0", "for", "j", "in", "range", "(", "length", ")", "]", "\n", "c_in", "=", "3", "\n", "count", "=", "0", "\n", "for", "c_out", "in", "_cfg", ":", "\n", "            ", "if", "c_out", "!=", "'M'", "and", "count", "==", "0", ":", "\n", "                ", "flops_singlecfg", "[", "count", "]", "+=", "3", "*", "3", "*", "c_in", "*", "c_out", "*", "input_size", "*", "input_size", "# conv", "\n", "flops_singlecfg", "[", "count", "]", "+=", "4", "*", "c_out", "*", "input_size", "*", "input_size", "# bn", "\n", "flops_singlecfg", "[", "count", "]", "+=", "input_size", "*", "input_size", "*", "c_out", "# relu", "\n", "c_in", "=", "c_out", "\n", "count", "+=", "1", "\n", "", "elif", "c_out", "!=", "'M'", "and", "count", "!=", "0", ":", "\n", "                ", "flops_doublecfg", "[", "count", "-", "1", "]", "[", "count", "]", "+=", "3", "*", "3", "*", "c_in", "*", "c_out", "*", "input_size", "*", "input_size", "# conv", "\n", "flops_doublecfg", "[", "count", "]", "[", "count", "-", "1", "]", "+=", "3", "*", "3", "*", "c_in", "*", "c_out", "*", "input_size", "*", "input_size", "\n", "flops_singlecfg", "[", "count", "]", "+=", "4", "*", "c_out", "*", "input_size", "*", "input_size", "# bn", "\n", "flops_singlecfg", "[", "count", "]", "+=", "input_size", "*", "input_size", "*", "c_out", "# relu", "\n", "c_in", "=", "c_out", "\n", "count", "+=", "1", "\n", "", "else", ":", "\n", "                ", "input_size", "/=", "2", "\n", "flops_singlecfg", "[", "count", "-", "1", "]", "+=", "2", "*", "input_size", "*", "input_size", "*", "c_in", "# max pool", "\n", "", "", "input_size", "/=", "2", "\n", "flops_singlecfg", "[", "count", "-", "1", "]", "+=", "3", "*", "input_size", "*", "input_size", "*", "_cfg", "[", "-", "1", "]", "# avg pool", "\n", "flops_singlecfg", "[", "count", "-", "1", "]", "+=", "(", "2", "*", "input_size", "*", "input_size", "*", "_cfg", "[", "-", "1", "]", ")", "*", "input_size", "*", "input_size", "*", "512", "# fc", "\n", "flops_singlecfg", "[", "count", "-", "1", "]", "+=", "4", "*", "_cfg", "[", "-", "1", "]", "*", "input_size", "*", "input_size", "# bn_1d", "\n", "\n", "return", "flops_singlecfg", ",", "flops_doublecfg", ",", "flops_squarecfg", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.models.vgg.VGG_CIFAR.forward": [[152, 161], ["vgg.VGG_CIFAR.feature", "vgg.VGG_CIFAR.avgpool", "utils.cutout_batch.view", "vgg.VGG_CIFAR.classifier", "utils.cutout_batch.size", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "utils.cutout_batch"], "methods", ["home.repos.pwc.inspect_result.mac-automl_itpruner.utils.get_data_iter.cutout_batch"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "training", "and", "self", ".", "cutout", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "x", "=", "cutout_batch", "(", "x", ",", "16", ")", "\n", "", "", "x", "=", "self", ".", "feature", "(", "x", ")", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "y", "=", "self", ".", "classifier", "(", "x", ")", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.models.vgg.VGG_CIFAR.feature_extract": [[162, 172], ["_layer", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "utils.cutout_batch", "type", "tensor.append"], "methods", ["home.repos.pwc.inspect_result.mac-automl_itpruner.utils.get_data_iter.cutout_batch"], ["", "def", "feature_extract", "(", "self", ",", "x", ")", ":", "\n", "        ", "tensor", "=", "[", "]", "\n", "if", "self", ".", "training", "and", "self", ".", "cutout", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "x", "=", "cutout_batch", "(", "x", ",", "16", ")", "\n", "", "", "for", "_layer", "in", "self", ".", "feature", ":", "\n", "            ", "x", "=", "_layer", "(", "x", ")", "\n", "if", "type", "(", "_layer", ")", "is", "nn", ".", "ReLU", ":", "\n", "                ", "tensor", ".", "append", "(", "x", ")", "\n", "", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.models.vgg.VGG_CIFAR.config": [[173, 180], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "config", "(", "self", ")", ":", "\n", "        ", "return", "{", "\n", "'name'", ":", "self", ".", "__class__", ".", "__name__", ",", "\n", "'cfg'", ":", "self", ".", "cfg", ",", "\n", "'cfg_base'", ":", "[", "64", ",", "64", ",", "128", ",", "128", ",", "256", ",", "256", ",", "256", ",", "512", ",", "512", ",", "512", ",", "512", ",", "512", ",", "512", "]", ",", "\n", "'dataset'", ":", "'cifar10'", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.models.base_models.MyNetwork.forward": [[7, 9], ["None"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.models.base_models.MyNetwork.feature_extract": [[10, 12], ["None"], "methods", ["None"], ["", "def", "feature_extract", "(", "self", ",", "x", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.models.base_models.MyNetwork.config": [[13, 16], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "config", "(", "self", ")", ":", "# should include name/cfg/cfg_base/dataset", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.models.base_models.MyNetwork.cfg2params": [[17, 19], ["None"], "methods", ["None"], ["", "def", "cfg2params", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.models.base_models.MyNetwork.cfg2flops": [[20, 22], ["None"], "methods", ["None"], ["", "def", "cfg2flops", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.models.base_models.MyNetwork.set_bn_param": [[23, 29], ["base_models.MyNetwork.modules", "isinstance", "isinstance"], "methods", ["None"], ["", "def", "set_bn_param", "(", "self", ",", "momentum", ",", "eps", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm1d", ")", ":", "\n", "                ", "m", ".", "momentum", "=", "momentum", "\n", "m", ".", "eps", "=", "eps", "\n", "", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.models.base_models.MyNetwork.get_bn_param": [[30, 38], ["base_models.MyNetwork.modules", "isinstance", "isinstance"], "methods", ["None"], ["", "def", "get_bn_param", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm1d", ")", ":", "\n", "                ", "return", "{", "\n", "'momentum'", ":", "m", ".", "momentum", ",", "\n", "'eps'", ":", "m", ".", "eps", ",", "\n", "}", "\n", "", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.models.base_models.MyNetwork.init_model": [[39, 69], ["base_models.MyNetwork.modules", "isinstance", "isinstance", "m.weight.data.normal_", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "math.sqrt", "m.weight.data.normal_", "m.weight.data.uniform_", "isinstance", "math.sqrt", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "math.sqrt", "m.bias.data.zero_", "m.weight.data.fill_", "m.bias.data.zero_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "m.weight.size"], "methods", ["None"], ["", "def", "init_model", "(", "self", ",", "model_init", ",", "init_div_groups", "=", "False", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "if", "model_init", "==", "'he_fout'", ":", "\n", "                    ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "if", "init_div_groups", ":", "\n", "                        ", "n", "/=", "m", ".", "groups", "\n", "", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "model_init", "==", "'he_fin'", ":", "\n", "                    ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "in_channels", "\n", "if", "init_div_groups", ":", "\n", "                        ", "n", "/=", "m", ".", "groups", "\n", "", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "model_init", "==", "'xavier_normal'", ":", "\n", "                    ", "nn", ".", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ".", "data", ")", "\n", "", "elif", "model_init", "==", "'xavier_uniform'", ":", "\n", "                    ", "nn", ".", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ".", "data", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "NotImplementedError", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "stdv", "=", "1.", "/", "math", ".", "sqrt", "(", "m", ".", "weight", ".", "size", "(", "1", ")", ")", "\n", "m", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm1d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.models.base_models.MyNetwork.get_parameters": [[70, 94], ["base_models.MyNetwork.named_parameters", "base_models.MyNetwork.named_parameters", "base_models.MyNetwork.named_parameters", "ValueError"], "methods", ["None"], ["", "", "", "def", "get_parameters", "(", "self", ",", "keys", "=", "None", ",", "mode", "=", "'include'", ")", ":", "\n", "        ", "if", "keys", "is", "None", ":", "\n", "            ", "for", "name", ",", "param", "in", "self", ".", "named_parameters", "(", ")", ":", "\n", "                ", "yield", "param", "\n", "", "", "elif", "mode", "==", "'include'", ":", "\n", "            ", "for", "name", ",", "param", "in", "self", ".", "named_parameters", "(", ")", ":", "\n", "                ", "flag", "=", "False", "\n", "for", "key", "in", "keys", ":", "\n", "                    ", "if", "key", "in", "name", ":", "\n", "                        ", "flag", "=", "True", "\n", "break", "\n", "", "", "if", "flag", ":", "\n", "                    ", "yield", "param", "\n", "", "", "", "elif", "mode", "==", "'exclude'", ":", "\n", "            ", "for", "name", ",", "param", "in", "self", ".", "named_parameters", "(", ")", ":", "\n", "                ", "flag", "=", "True", "\n", "for", "key", "in", "keys", ":", "\n", "                    ", "if", "key", "in", "name", ":", "\n", "                        ", "flag", "=", "False", "\n", "break", "\n", "", "", "if", "flag", ":", "\n", "                    ", "yield", "param", "\n", "", "", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'do not support: %s'", "%", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.models.base_models.MyNetwork.weight_parameters": [[95, 97], ["base_models.MyNetwork.get_parameters"], "methods", ["home.repos.pwc.inspect_result.mac-automl_itpruner.nets.base_models.MyNetwork.get_parameters"], ["", "", "def", "weight_parameters", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "get_parameters", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mac-automl_itpruner.models.__init__.TrainRunConfig.__init__": [[9, 28], ["run_manager.RunConfig.__init__", "print", "kwargs.keys"], "methods", ["home.repos.pwc.inspect_result.mac-automl_itpruner.nets.__init__.SearchRunConfig.__init__"], []], "home.repos.pwc.inspect_result.mac-automl_itpruner.models.__init__.TrainRunConfig.data_config": [[29, 38], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.mac-automl_itpruner.models.__init__.SearchRunConfig.__init__": [[41, 66], ["run_manager.RunConfig.__init__", "print", "kwargs.keys"], "methods", ["home.repos.pwc.inspect_result.mac-automl_itpruner.nets.__init__.SearchRunConfig.__init__"], []], "home.repos.pwc.inspect_result.mac-automl_itpruner.models.__init__.SearchRunConfig.data_config": [[67, 76], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.mac-automl_itpruner.models.mobilenet_imagenet.InvertedResidual.__init__": [[28, 53], ["torch.Module.__init__", "round", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "collections.OrderedDict", "collections.OrderedDict", "collections.OrderedDict", "collections.OrderedDict", "collections.OrderedDict", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU6", "torch.Conv2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU6", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU6", "torch.Conv2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.mac-automl_itpruner.nets.__init__.SearchRunConfig.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inp", ",", "oup", ",", "stride", ",", "expand_ratio", ")", ":", "\n", "        ", "super", "(", "InvertedResidual", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "assert", "stride", "in", "[", "1", ",", "2", "]", "\n", "\n", "hidden_dim", "=", "round", "(", "inp", "*", "expand_ratio", ")", "\n", "self", ".", "use_res_connect", "=", "self", ".", "stride", "==", "1", "and", "inp", "==", "oup", "\n", "\n", "if", "expand_ratio", "==", "1", ":", "\n", "            ", "dw", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "(", "'conv'", ",", "nn", ".", "Conv2d", "(", "hidden_dim", ",", "hidden_dim", ",", "3", ",", "stride", ",", "1", ",", "groups", "=", "hidden_dim", ",", "bias", "=", "False", ")", ")", ",", "\n", "(", "'bn'", ",", "nn", ".", "BatchNorm2d", "(", "hidden_dim", ")", ")", ",", "\n", "(", "'relu'", ",", "nn", ".", "ReLU6", "(", "inplace", "=", "True", ")", ")", "]", ")", ")", "\n", "pw", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "(", "'conv'", ",", "nn", ".", "Conv2d", "(", "hidden_dim", ",", "oup", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ")", ",", "\n", "(", "'bn'", ",", "nn", ".", "BatchNorm2d", "(", "oup", ")", ")", "]", ")", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "dw", ",", "pw", ")", "\n", "", "else", ":", "\n", "            ", "pw", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "(", "'conv'", ",", "nn", ".", "Conv2d", "(", "inp", ",", "hidden_dim", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ")", ",", "\n", "(", "'bn'", ",", "nn", ".", "BatchNorm2d", "(", "hidden_dim", ")", ")", ",", "\n", "(", "'relu'", ",", "nn", ".", "ReLU6", "(", "inplace", "=", "True", ")", ")", "]", ")", ")", "\n", "dw", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "(", "'conv'", ",", "nn", ".", "Conv2d", "(", "hidden_dim", ",", "hidden_dim", ",", "3", ",", "stride", ",", "1", ",", "groups", "=", "hidden_dim", ",", "bias", "=", "False", ")", ")", ",", "\n", "(", "'bn'", ",", "nn", ".", "BatchNorm2d", "(", "hidden_dim", ")", ")", ",", "\n", "(", "'relu'", ",", "nn", ".", "ReLU6", "(", "inplace", "=", "True", ")", ")", "]", ")", ")", "\n", "pwl", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "(", "'conv'", ",", "nn", ".", "Conv2d", "(", "hidden_dim", ",", "oup", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ")", ",", "\n", "(", "'bn'", ",", "nn", ".", "BatchNorm2d", "(", "oup", ")", ")", "]", ")", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "pw", ",", "dw", ",", "pwl", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.models.mobilenet_imagenet.InvertedResidual.forward": [[54, 59], ["mobilenet_imagenet.InvertedResidual.conv", "mobilenet_imagenet.InvertedResidual.conv"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "use_res_connect", ":", "\n", "            ", "return", "x", "+", "self", ".", "conv", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "conv", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.models.mobilenet_imagenet.MobileNetV2.__init__": [[61, 105], ["MyNetwork.__init__", "mobilenet_imagenet.MobileNetV2.features.append", "torch.Sequential", "torch.Sequential", "mobilenet_imagenet.conv_bn", "range", "mobilenet_imagenet.conv_1x1_bn", "torch.Linear", "mobilenet_imagenet.MobileNetV2.features.append", "mobilenet_imagenet.MobileNetV2.features.append", "block", "block"], "methods", ["home.repos.pwc.inspect_result.mac-automl_itpruner.nets.__init__.SearchRunConfig.__init__", "home.repos.pwc.inspect_result.mac-automl_itpruner.models.mobilenet_imagenet.conv_bn", "home.repos.pwc.inspect_result.mac-automl_itpruner.models.mobilenet_imagenet.conv_1x1_bn"], ["    ", "def", "__init__", "(", "self", ",", "cfg", "=", "None", ",", "num_classes", "=", "1000", ",", "dropout", "=", "0.2", ")", ":", "\n", "        ", "super", "(", "MobileNetV2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "block", "=", "InvertedResidual", "\n", "if", "cfg", "==", "None", ":", "\n", "            ", "cfg", "=", "[", "32", ",", "16", ",", "24", ",", "32", ",", "64", ",", "96", ",", "160", ",", "320", "]", "\n", "", "input_channel", "=", "cfg", "[", "0", "]", "\n", "interverted_residual_setting", "=", "[", "\n", "# t, c, n, s", "\n", "[", "1", ",", "cfg", "[", "1", "]", ",", "1", ",", "1", "]", ",", "\n", "[", "6", ",", "cfg", "[", "2", "]", ",", "2", ",", "2", "]", ",", "\n", "[", "6", ",", "cfg", "[", "3", "]", ",", "3", ",", "2", "]", ",", "\n", "[", "6", ",", "cfg", "[", "4", "]", ",", "4", ",", "2", "]", ",", "\n", "[", "6", ",", "cfg", "[", "5", "]", ",", "3", ",", "1", "]", ",", "\n", "[", "6", ",", "cfg", "[", "6", "]", ",", "3", ",", "2", "]", ",", "\n", "[", "6", ",", "cfg", "[", "7", "]", ",", "1", ",", "1", "]", ",", "\n", "]", "\n", "\n", "# building first layer", "\n", "# input_channel = int(input_channel * width_mult)", "\n", "self", ".", "cfg", "=", "cfg", "\n", "self", ".", "cfgs_base", "=", "[", "32", ",", "16", ",", "24", ",", "32", ",", "64", ",", "96", ",", "160", ",", "320", "]", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "last_channel", "=", "1280", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "features", "=", "[", "conv_bn", "(", "3", ",", "input_channel", ",", "2", ")", "]", "\n", "self", ".", "interverted_residual_setting", "=", "interverted_residual_setting", "\n", "# building inverted residual blocks", "\n", "for", "t", ",", "c", ",", "n", ",", "s", "in", "interverted_residual_setting", ":", "\n", "            ", "output_channel", "=", "c", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "                ", "if", "i", "==", "0", ":", "\n", "                    ", "self", ".", "features", ".", "append", "(", "block", "(", "input_channel", ",", "output_channel", ",", "s", ",", "expand_ratio", "=", "t", ")", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "features", ".", "append", "(", "block", "(", "input_channel", ",", "output_channel", ",", "1", ",", "expand_ratio", "=", "t", ")", ")", "\n", "", "input_channel", "=", "output_channel", "\n", "# building last several layers", "\n", "", "", "self", ".", "features", ".", "append", "(", "conv_1x1_bn", "(", "input_channel", ",", "self", ".", "last_channel", ")", ")", "\n", "# make it nn.Sequential", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "features", ")", "\n", "\n", "# building classifier", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "# nn.Dropout(self.dropout),", "\n", "nn", ".", "Linear", "(", "self", ".", "last_channel", ",", "num_classes", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.models.mobilenet_imagenet.MobileNetV2.cfg2params": [[107, 137], ["range", "round"], "methods", ["None"], ["", "def", "cfg2params", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "params", "=", "0.", "\n", "params", "+=", "(", "3", "*", "3", "*", "3", "*", "cfg", "[", "0", "]", "+", "2", "*", "cfg", "[", "0", "]", ")", "# first layer", "\n", "input_channel", "=", "cfg", "[", "0", "]", "\n", "for", "t", ",", "c", ",", "n", ",", "s", "in", "self", ".", "interverted_residual_setting", ":", "\n", "            ", "output_channel", "=", "c", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "                ", "hidden_dim", "=", "round", "(", "input_channel", "*", "t", ")", "\n", "if", "i", "==", "0", ":", "\n", "# self.features.append(block(input_channel, output_channel, s, expand_ratio=t))", "\n", "                    ", "if", "t", "==", "1", ":", "\n", "                        ", "params", "+=", "(", "3", "*", "3", "*", "hidden_dim", "+", "2", "*", "hidden_dim", ")", "\n", "params", "+=", "(", "1", "*", "1", "*", "hidden_dim", "*", "output_channel", "+", "2", "*", "output_channel", ")", "\n", "", "else", ":", "\n", "                        ", "params", "+=", "(", "1", "*", "1", "*", "input_channel", "*", "hidden_dim", "+", "2", "*", "hidden_dim", ")", "\n", "params", "+=", "(", "3", "*", "3", "*", "hidden_dim", "+", "2", "*", "hidden_dim", ")", "\n", "params", "+=", "(", "1", "*", "1", "*", "hidden_dim", "*", "output_channel", "+", "2", "*", "output_channel", ")", "\n", "", "", "else", ":", "\n", "# self.features.append(block(input_channel, output_channel, 1, expand_ratio=t))", "\n", "                    ", "if", "t", "==", "1", ":", "\n", "                        ", "params", "+=", "(", "3", "*", "3", "*", "hidden_dim", "+", "2", "*", "hidden_dim", ")", "\n", "params", "+=", "(", "1", "*", "1", "*", "hidden_dim", "*", "output_channel", "+", "2", "*", "output_channel", ")", "\n", "", "else", ":", "\n", "                        ", "params", "+=", "(", "1", "*", "1", "*", "input_channel", "*", "hidden_dim", "+", "2", "*", "hidden_dim", ")", "\n", "params", "+=", "(", "3", "*", "3", "*", "hidden_dim", "+", "2", "*", "hidden_dim", ")", "\n", "params", "+=", "(", "1", "*", "1", "*", "hidden_dim", "*", "output_channel", "+", "2", "*", "output_channel", ")", "\n", "", "", "input_channel", "=", "output_channel", "\n", "", "", "params", "+=", "(", "1", "*", "1", "*", "input_channel", "*", "self", ".", "last_channel", "+", "2", "*", "self", ".", "last_channel", ")", "# final 1x1 conv", "\n", "params", "+=", "(", "(", "self", ".", "last_channel", "+", "1", ")", "*", "self", ".", "num_classes", ")", "# fc layer", "\n", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.models.mobilenet_imagenet.MobileNetV2.cfg2flops": [[138, 184], ["range", "round"], "methods", ["None"], ["", "def", "cfg2flops", "(", "self", ",", "cfg", ")", ":", "# to simplify, only count convolution flops", "\n", "        ", "interverted_residual_setting", "=", "[", "\n", "# t, c, n, s", "\n", "[", "1", ",", "cfg", "[", "1", "]", ",", "1", ",", "1", "]", ",", "\n", "[", "6", ",", "cfg", "[", "2", "]", ",", "2", ",", "2", "]", ",", "\n", "[", "6", ",", "cfg", "[", "3", "]", ",", "3", ",", "2", "]", ",", "\n", "[", "6", ",", "cfg", "[", "4", "]", ",", "4", ",", "2", "]", ",", "\n", "[", "6", ",", "cfg", "[", "5", "]", ",", "3", ",", "1", "]", ",", "\n", "[", "6", ",", "cfg", "[", "6", "]", ",", "3", ",", "2", "]", ",", "\n", "[", "6", ",", "cfg", "[", "7", "]", ",", "1", ",", "1", "]", ",", "\n", "]", "\n", "size", "=", "224", "\n", "flops", "=", "0.", "\n", "size", "=", "size", "//", "2", "\n", "flops", "+=", "(", "3", "*", "3", "*", "3", "*", "cfg", "[", "0", "]", "+", "0", "*", "cfg", "[", "0", "]", ")", "*", "size", "*", "size", "# first layer", "\n", "input_channel", "=", "cfg", "[", "0", "]", "\n", "for", "t", ",", "c", ",", "n", ",", "s", "in", "interverted_residual_setting", ":", "\n", "            ", "output_channel", "=", "c", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "                ", "hidden_dim", "=", "round", "(", "input_channel", "*", "t", ")", "\n", "if", "i", "==", "0", ":", "\n", "                    ", "if", "s", "==", "2", ":", "\n", "                        ", "size", "=", "size", "//", "2", "\n", "# self.features.append(block(input_channel, output_channel, s, expand_ratio=t))", "\n", "", "if", "t", "==", "1", ":", "\n", "                        ", "flops", "+=", "(", "3", "*", "3", "*", "hidden_dim", "+", "0", "*", "hidden_dim", ")", "*", "size", "*", "size", "\n", "flops", "+=", "(", "1", "*", "1", "*", "hidden_dim", "*", "output_channel", "+", "0", "*", "output_channel", ")", "*", "size", "*", "size", "\n", "", "else", ":", "\n", "                        ", "size", "=", "size", "*", "s", "\n", "flops", "+=", "(", "1", "*", "1", "*", "input_channel", "*", "hidden_dim", "+", "0", "*", "hidden_dim", ")", "*", "size", "*", "size", "\n", "size", "=", "size", "//", "s", "\n", "flops", "+=", "(", "3", "*", "3", "*", "hidden_dim", "+", "0", "*", "hidden_dim", ")", "*", "size", "*", "size", "\n", "flops", "+=", "(", "1", "*", "1", "*", "hidden_dim", "*", "output_channel", "+", "0", "*", "output_channel", ")", "*", "size", "*", "size", "\n", "", "", "else", ":", "\n", "# self.features.append(block(input_channel, output_channel, 1, expand_ratio=t))", "\n", "                    ", "if", "t", "==", "1", ":", "\n", "                        ", "flops", "+=", "(", "3", "*", "3", "*", "hidden_dim", "+", "0", "*", "hidden_dim", ")", "*", "size", "*", "size", "\n", "flops", "+=", "(", "1", "*", "1", "*", "hidden_dim", "*", "output_channel", "+", "0", "*", "output_channel", ")", "*", "size", "*", "size", "\n", "", "else", ":", "\n", "                        ", "flops", "+=", "(", "1", "*", "1", "*", "input_channel", "*", "hidden_dim", "+", "0", "*", "hidden_dim", ")", "*", "size", "*", "size", "\n", "flops", "+=", "(", "3", "*", "3", "*", "hidden_dim", "+", "0", "*", "hidden_dim", ")", "*", "size", "*", "size", "\n", "flops", "+=", "(", "1", "*", "1", "*", "hidden_dim", "*", "output_channel", "+", "0", "*", "output_channel", ")", "*", "size", "*", "size", "\n", "", "", "input_channel", "=", "output_channel", "\n", "", "", "flops", "+=", "(", "1", "*", "1", "*", "input_channel", "*", "self", ".", "last_channel", "+", "0", "*", "self", ".", "last_channel", ")", "*", "size", "*", "size", "# final 1x1 conv", "\n", "flops", "+=", "(", "(", "2", "*", "self", ".", "last_channel", "-", "1", ")", "*", "self", ".", "num_classes", ")", "# fc layer", "\n", "return", "flops", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.models.mobilenet_imagenet.MobileNetV2.cfg2flops_perlayer": [[185, 237], ["numpy.zeros", "range", "range", "range", "round"], "methods", ["None"], ["", "def", "cfg2flops_perlayer", "(", "self", ",", "cfg", ",", "length", ")", ":", "# to simplify, only count convolution flops", "\n", "        ", "interverted_residual_setting", "=", "[", "\n", "# t, c, n, s", "\n", "[", "1", ",", "cfg", "[", "1", "]", ",", "1", ",", "1", "]", ",", "\n", "[", "6", ",", "cfg", "[", "2", "]", ",", "2", ",", "2", "]", ",", "\n", "[", "6", ",", "cfg", "[", "3", "]", ",", "3", ",", "2", "]", ",", "\n", "[", "6", ",", "cfg", "[", "4", "]", ",", "4", ",", "2", "]", ",", "\n", "[", "6", ",", "cfg", "[", "5", "]", ",", "3", ",", "1", "]", ",", "\n", "[", "6", ",", "cfg", "[", "6", "]", ",", "3", ",", "2", "]", ",", "\n", "[", "6", ",", "cfg", "[", "7", "]", ",", "1", ",", "1", "]", ",", "\n", "]", "\n", "size", "=", "224", "\n", "flops_singlecfg", "=", "[", "0", "for", "j", "in", "range", "(", "length", ")", "]", "\n", "flops_doublecfg", "=", "np", ".", "zeros", "(", "(", "length", ",", "length", ")", ")", "\n", "flops_squarecfg", "=", "[", "0", "for", "j", "in", "range", "(", "length", ")", "]", "\n", "size", "=", "size", "//", "2", "\n", "flops_singlecfg", "[", "0", "]", "+=", "(", "3", "*", "3", "*", "3", "*", "cfg", "[", "0", "]", "+", "0", "*", "cfg", "[", "0", "]", ")", "*", "size", "*", "size", "# first layer", "\n", "input_channel", "=", "cfg", "[", "0", "]", "\n", "count", "=", "0", "\n", "for", "t", ",", "c", ",", "n", ",", "s", "in", "interverted_residual_setting", ":", "\n", "            ", "output_channel", "=", "c", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "                ", "hidden_dim", "=", "round", "(", "input_channel", "*", "t", ")", "\n", "if", "i", "==", "0", ":", "\n", "                    ", "if", "s", "==", "2", ":", "\n", "                        ", "size", "=", "size", "//", "2", "\n", "# self.features.append(block(input_channel, output_channel, s, expand_ratio=t))", "\n", "", "if", "t", "==", "1", ":", "\n", "                        ", "flops_singlecfg", "[", "count", "]", "+=", "(", "3", "*", "3", "*", "hidden_dim", "+", "0", "*", "hidden_dim", ")", "*", "size", "*", "size", "\n", "flops_doublecfg", "[", "count", "+", "1", "]", "[", "count", "]", "+=", "(", "1", "*", "1", "*", "hidden_dim", "*", "output_channel", "+", "0", "*", "output_channel", ")", "*", "size", "*", "size", "\n", "flops_doublecfg", "[", "count", "]", "[", "count", "+", "1", "]", "+=", "(", "1", "*", "1", "*", "hidden_dim", "*", "output_channel", "+", "0", "*", "output_channel", ")", "*", "size", "*", "size", "\n", "", "else", ":", "\n", "                        ", "size", "=", "size", "*", "s", "\n", "flops_squarecfg", "[", "count", "]", "+=", "(", "1", "*", "1", "*", "input_channel", "*", "hidden_dim", "+", "0", "*", "hidden_dim", ")", "*", "size", "*", "size", "\n", "size", "=", "size", "//", "s", "\n", "flops_singlecfg", "[", "count", "]", "+=", "(", "3", "*", "3", "*", "hidden_dim", "+", "0", "*", "hidden_dim", ")", "*", "size", "*", "size", "\n", "flops_doublecfg", "[", "count", "]", "[", "count", "+", "1", "]", "+=", "(", "1", "*", "1", "*", "hidden_dim", "*", "output_channel", "+", "0", "*", "output_channel", ")", "*", "size", "*", "size", "\n", "flops_doublecfg", "[", "count", "+", "1", "]", "[", "count", "]", "+=", "(", "1", "*", "1", "*", "hidden_dim", "*", "output_channel", "+", "0", "*", "output_channel", ")", "*", "size", "*", "size", "\n", "", "", "else", ":", "\n", "# self.features.append(block(input_channel, output_channel, 1, expand_ratio=t))", "\n", "                    ", "if", "t", "==", "1", ":", "\n", "                        ", "flops_singlecfg", "[", "count", "+", "1", "]", "+=", "(", "3", "*", "3", "*", "hidden_dim", "+", "0", "*", "hidden_dim", ")", "*", "size", "*", "size", "\n", "flops_squarecfg", "[", "count", "+", "1", "]", "+=", "(", "1", "*", "1", "*", "hidden_dim", "*", "output_channel", "+", "0", "*", "output_channel", ")", "*", "size", "*", "size", "\n", "", "else", ":", "\n", "                        ", "flops_squarecfg", "[", "count", "+", "1", "]", "+=", "(", "1", "*", "1", "*", "input_channel", "*", "hidden_dim", "+", "0", "*", "hidden_dim", ")", "*", "size", "*", "size", "\n", "flops_singlecfg", "[", "count", "+", "1", "]", "+=", "(", "3", "*", "3", "*", "hidden_dim", "+", "0", "*", "hidden_dim", ")", "*", "size", "*", "size", "\n", "flops_squarecfg", "[", "count", "+", "1", "]", "+=", "(", "1", "*", "1", "*", "hidden_dim", "*", "output_channel", "+", "0", "*", "output_channel", ")", "*", "size", "*", "size", "\n", "", "", "input_channel", "=", "output_channel", "\n", "", "count", "+=", "1", "\n", "", "flops_singlecfg", "[", "count", "]", "+=", "(", "1", "*", "1", "*", "input_channel", "*", "self", ".", "last_channel", "+", "0", "*", "self", ".", "last_channel", ")", "*", "size", "*", "size", "# final 1x1 conv", "\n", "\n", "return", "flops_singlecfg", ",", "flops_doublecfg", ",", "flops_squarecfg", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.models.mobilenet_imagenet.MobileNetV2.get_flops": [[238, 240], ["mobilenet_imagenet.MobileNetV2.cfg2flops"], "methods", ["home.repos.pwc.inspect_result.mac-automl_itpruner.nets.resnet_cifar.ResNet_CIFAR.cfg2flops"], ["", "def", "get_flops", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "cfg2flops", "(", "cfg", "=", "self", ".", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.models.mobilenet_imagenet.MobileNetV2.get_params": [[241, 243], ["mobilenet_imagenet.MobileNetV2.cfg2param"], "methods", ["home.repos.pwc.inspect_result.mac-automl_itpruner.models.mobilenet_imagenet.MobileNet.cfg2param"], ["", "def", "get_params", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "cfg2param", "(", "self", ".", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.models.mobilenet_imagenet.MobileNetV2.forward": [[244, 249], ["mobilenet_imagenet.MobileNetV2.features", "mobilenet_imagenet.MobileNetV2.mean().mean", "mobilenet_imagenet.MobileNetV2.classifier", "mobilenet_imagenet.MobileNetV2.mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "x", ".", "mean", "(", "3", ")", ".", "mean", "(", "2", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.models.mobilenet_imagenet.MobileNetV2.feature_extract": [[250, 260], ["_layer", "type", "tensor.append"], "methods", ["None"], ["", "def", "feature_extract", "(", "self", ",", "x", ")", ":", "\n", "        ", "tensor", "=", "[", "]", "\n", "count", "=", "0", "\n", "for", "_layer", "in", "self", ".", "features", ":", "\n", "            ", "x", "=", "_layer", "(", "x", ")", "\n", "if", "type", "(", "_layer", ")", "is", "InvertedResidual", ":", "\n", "                ", "count", "+=", "1", "\n", "", "if", "count", "in", "[", "1", ",", "3", ",", "6", ",", "10", ",", "13", ",", "16", ",", "17", "]", ":", "\n", "                ", "tensor", ".", "append", "(", "x", ")", "\n", "", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.models.mobilenet_imagenet.MobileNetV2.config": [[261, 268], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "config", "(", "self", ")", ":", "\n", "        ", "return", "{", "\n", "'name'", ":", "self", ".", "__class__", ".", "__name__", ",", "\n", "'cfg'", ":", "self", ".", "cfg", ",", "\n", "'cfg_base'", ":", "self", ".", "cfgs_base", ",", "\n", "'dataset'", ":", "'ImageNet'", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.models.mobilenet_imagenet.MobileNet.__init__": [[272, 286], ["MyNetwork.__init__", "mobilenet_imagenet.conv_bn", "mobilenet_imagenet.MobileNet._make_layers", "torch.Sequential", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.mac-automl_itpruner.nets.__init__.SearchRunConfig.__init__", "home.repos.pwc.inspect_result.mac-automl_itpruner.models.mobilenet_imagenet.conv_bn", "home.repos.pwc.inspect_result.mac-automl_itpruner.models.mobilenet_imagenet.MobileNet._make_layers"], ["    ", "def", "__init__", "(", "self", ",", "cfg", "=", "None", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "super", "(", "MobileNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "cfg", "==", "None", ":", "\n", "            ", "cfg", "=", "[", "32", ",", "64", ",", "128", ",", "128", ",", "256", ",", "256", ",", "512", ",", "512", ",", "512", ",", "512", ",", "512", ",", "512", ",", "1024", ",", "1024", "]", "\n", "", "self", ".", "cfg", "=", "cfg", "\n", "self", ".", "cfgs_base", "=", "[", "32", ",", "64", ",", "128", ",", "128", ",", "256", ",", "256", ",", "512", ",", "512", ",", "512", ",", "512", ",", "512", ",", "512", ",", "1024", ",", "1024", "]", "\n", "self", ".", "_cfg", "=", "[", "cfg", "[", "1", "]", ",", "(", "cfg", "[", "2", "]", ",", "2", ")", ",", "cfg", "[", "3", "]", ",", "(", "cfg", "[", "4", "]", ",", "2", ")", ",", "cfg", "[", "5", "]", ",", "(", "cfg", "[", "6", "]", ",", "2", ")", ",", "cfg", "[", "7", "]", ",", "cfg", "[", "8", "]", ",", "cfg", "[", "9", "]", ",", "cfg", "[", "10", "]", ",", "cfg", "[", "11", "]", ",", "(", "cfg", "[", "12", "]", ",", "2", ")", ",", "cfg", "[", "13", "]", "]", "\n", "in_planes", "=", "cfg", "[", "0", "]", "\n", "self", ".", "conv1", "=", "conv_bn", "(", "3", ",", "in_planes", ",", "stride", "=", "2", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "features", "=", "self", ".", "_make_layers", "(", "in_planes", ",", "self", ".", "_cfg", ",", "conv_dw", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "cfg", "[", "-", "1", "]", ",", "num_classes", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.models.mobilenet_imagenet.MobileNet.forward": [[288, 294], ["mobilenet_imagenet.MobileNet.conv1", "mobilenet_imagenet.MobileNet.features", "mobilenet_imagenet.MobileNet.mean().mean", "mobilenet_imagenet.MobileNet.classifier", "mobilenet_imagenet.MobileNet.mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "x", ".", "mean", "(", "3", ")", ".", "mean", "(", "2", ")", "# global average pooling", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.models.mobilenet_imagenet.MobileNet._make_layers": [[295, 303], ["torch.Sequential", "layers.append", "isinstance", "isinstance", "layer"], "methods", ["None"], ["", "def", "_make_layers", "(", "self", ",", "in_planes", ",", "cfg", ",", "layer", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "x", "in", "cfg", ":", "\n", "            ", "out_planes", "=", "x", "if", "isinstance", "(", "x", ",", "int", ")", "else", "x", "[", "0", "]", "\n", "stride", "=", "1", "if", "isinstance", "(", "x", ",", "int", ")", "else", "x", "[", "1", "]", "\n", "layers", ".", "append", "(", "layer", "(", "in_planes", ",", "out_planes", ",", "stride", ")", ")", "\n", "in_planes", "=", "out_planes", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.models.mobilenet_imagenet.MobileNet.cfg2param": [[304, 314], ["range", "len"], "methods", ["None"], ["", "def", "cfg2param", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "params", "=", "0.", "\n", "params", "+=", "(", "3", "*", "3", "*", "3", "*", "cfg", "[", "0", "]", "+", "2", "*", "cfg", "[", "0", "]", ")", "# first layer", "\n", "in_c", "=", "cfg", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "cfg", ")", ")", ":", "\n", "            ", "out_c", "=", "cfg", "[", "i", "]", "\n", "params", "+=", "(", "3", "*", "3", "*", "in_c", "+", "2", "*", "in_c", "+", "1", "*", "1", "*", "in_c", "*", "out_c", "+", "2", "*", "out_c", ")", "\n", "in_c", "=", "out_c", "\n", "", "params", "+=", "(", "(", "out_c", "+", "1", ")", "*", "self", ".", "num_classes", ")", "# fc layer", "\n", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.models.mobilenet_imagenet.MobileNet.cfg2flops": [[315, 329], ["range", "len"], "methods", ["None"], ["", "def", "cfg2flops", "(", "self", ",", "cfg", ")", ":", "# to simplify, only count convolution flops", "\n", "        ", "size", "=", "224", "\n", "flops", "=", "0.", "\n", "size", "=", "size", "//", "2", "\n", "flops", "+=", "(", "3", "*", "3", "*", "3", "*", "cfg", "[", "0", "]", "+", "0", "*", "cfg", "[", "0", "]", ")", "*", "size", "*", "size", "# first layer", "\n", "in_c", "=", "cfg", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "cfg", ")", ")", ":", "\n", "            ", "if", "i", "in", "[", "2", ",", "4", ",", "6", ",", "12", "]", ":", "\n", "                ", "size", "=", "size", "//", "2", "\n", "", "out_c", "=", "cfg", "[", "i", "]", "\n", "flops", "+=", "(", "3", "*", "3", "*", "in_c", "+", "0", "*", "in_c", "+", "1", "*", "1", "*", "in_c", "*", "out_c", "+", "0", "*", "out_c", ")", "*", "size", "*", "size", "\n", "in_c", "=", "out_c", "\n", "", "flops", "+=", "(", "(", "2", "*", "out_c", "-", "1", ")", "*", "self", ".", "num_classes", ")", "# fc layer", "\n", "return", "flops", "\n", "", "def", "cfg2flops_perlayer", "(", "self", ",", "cfg", ",", "length", ")", ":", "# to simplify, only count convolution flops", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.models.mobilenet_imagenet.MobileNet.cfg2flops_perlayer": [[329, 347], ["numpy.zeros", "range", "len", "range", "range"], "methods", ["None"], ["", "def", "cfg2flops_perlayer", "(", "self", ",", "cfg", ",", "length", ")", ":", "# to simplify, only count convolution flops", "\n", "        ", "size", "=", "224", "\n", "flops_singlecfg", "=", "[", "0", "for", "j", "in", "range", "(", "length", ")", "]", "\n", "flops_doublecfg", "=", "np", ".", "zeros", "(", "(", "length", ",", "length", ")", ")", "\n", "flops_squarecfg", "=", "[", "0", "for", "j", "in", "range", "(", "length", ")", "]", "\n", "size", "=", "size", "//", "2", "\n", "flops_singlecfg", "[", "0", "]", "+=", "(", "3", "*", "3", "*", "3", "*", "cfg", "[", "0", "]", "+", "0", "*", "cfg", "[", "0", "]", ")", "*", "size", "*", "size", "# first layer", "\n", "in_c", "=", "cfg", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "cfg", ")", ")", ":", "\n", "            ", "if", "i", "in", "[", "2", ",", "4", ",", "6", ",", "12", "]", ":", "\n", "                ", "size", "=", "size", "//", "2", "\n", "", "out_c", "=", "cfg", "[", "i", "]", "\n", "flops_singlecfg", "[", "i", "-", "1", "]", "+=", "3", "*", "3", "*", "in_c", "*", "size", "*", "size", "\n", "flops_doublecfg", "[", "i", "-", "1", "]", "[", "i", "]", "+=", "1", "*", "1", "*", "in_c", "*", "out_c", "*", "size", "*", "size", "\n", "flops_doublecfg", "[", "i", "]", "[", "i", "-", "1", "]", "+=", "1", "*", "1", "*", "in_c", "*", "out_c", "*", "size", "*", "size", "\n", "in_c", "=", "out_c", "\n", "", "flops_singlecfg", "[", "length", "-", "1", "]", "+=", "2", "*", "out_c", "*", "self", ".", "num_classes", "# fc layer", "\n", "return", "flops_singlecfg", ",", "flops_doublecfg", ",", "flops_squarecfg", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.models.mobilenet_imagenet.MobileNet.feature_extract": [[348, 360], ["mobilenet_imagenet.MobileNet.conv1", "_layer.mean().mean", "mobilenet_imagenet.MobileNet.classifier", "tensor.append", "_layer", "type", "tensor.append", "_layer.mean"], "methods", ["None"], ["", "def", "feature_extract", "(", "self", ",", "x", ")", ":", "\n", "        ", "tensor", "=", "[", "]", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "for", "_layer", "in", "self", ".", "features", ":", "\n", "            ", "x", "=", "_layer", "(", "x", ")", "\n", "if", "type", "(", "_layer", ")", "is", "nn", ".", "Sequential", ":", "\n", "                ", "tensor", ".", "append", "(", "x", ")", "\n", "", "", "x", "=", "x", ".", "mean", "(", "3", ")", ".", "mean", "(", "2", ")", "# global average pooling", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "tensor", ".", "append", "(", "x", ")", "\n", "\n", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.models.mobilenet_imagenet.MobileNet.config": [[361, 368], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "config", "(", "self", ")", ":", "\n", "        ", "return", "{", "\n", "'name'", ":", "self", ".", "__class__", ".", "__name__", ",", "\n", "'cfg'", ":", "self", ".", "cfg", ",", "\n", "'cfg_base'", ":", "self", ".", "cfgs_base", ",", "\n", "'dataset'", ":", "'ImageNet'", ",", "\n", "}", ""]], "home.repos.pwc.inspect_result.mac-automl_itpruner.models.mobilenet_imagenet.conv_bn": [[7, 11], ["torch.Sequential", "collections.OrderedDict", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU6"], "function", ["None"], ["def", "conv_bn", "(", "inp", ",", "oup", ",", "stride", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "(", "'conv'", ",", "nn", ".", "Conv2d", "(", "inp", ",", "oup", ",", "3", ",", "stride", ",", "1", ",", "bias", "=", "False", ")", ")", ",", "\n", "(", "'bn'", ",", "nn", ".", "BatchNorm2d", "(", "oup", ")", ")", ",", "\n", "(", "'relu'", ",", "nn", ".", "ReLU6", "(", "inplace", "=", "True", ")", ")", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.models.mobilenet_imagenet.conv_1x1_bn": [[13, 17], ["torch.Sequential", "collections.OrderedDict", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU6"], "function", ["None"], ["", "def", "conv_1x1_bn", "(", "inp", ",", "oup", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "(", "'conv'", ",", "nn", ".", "Conv2d", "(", "inp", ",", "oup", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ")", ",", "\n", "(", "'bn'", ",", "nn", ".", "BatchNorm2d", "(", "oup", ")", ")", ",", "\n", "(", "'relu'", ",", "nn", ".", "ReLU6", "(", "inplace", "=", "True", ")", ")", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.models.mobilenet_imagenet.conv_dw": [[18, 26], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "collections.OrderedDict", "collections.OrderedDict", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU"], "function", ["None"], ["", "def", "conv_dw", "(", "inp", ",", "oup", ",", "stride", ")", ":", "\n", "    ", "conv1", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "(", "'conv'", ",", "nn", ".", "Conv2d", "(", "inp", ",", "inp", ",", "3", ",", "stride", ",", "1", ",", "groups", "=", "inp", ",", "bias", "=", "False", ")", ")", ",", "\n", "(", "'bn'", ",", "nn", ".", "BatchNorm2d", "(", "inp", ")", ")", ",", "\n", "(", "'relu'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "]", ")", ")", "\n", "conv2", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "(", "'conv'", ",", "nn", ".", "Conv2d", "(", "inp", ",", "oup", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ")", ",", "\n", "(", "'bn'", ",", "nn", ".", "BatchNorm2d", "(", "oup", ")", ")", ",", "\n", "(", "'relu'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "]", ")", ")", "\n", "return", "nn", ".", "Sequential", "(", "conv1", ",", "conv2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.models.resnet_imagenet.BasicBlock.__init__": [[16, 34], ["torch.Module.__init__", "resnet_imagenet.conv3x3", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "resnet_imagenet.conv3x3", "norm_layer", "resnet_imagenet.conv3x3", "norm_layer", "collections.OrderedDict", "collections.OrderedDict"], "methods", ["home.repos.pwc.inspect_result.mac-automl_itpruner.nets.__init__.SearchRunConfig.__init__", "home.repos.pwc.inspect_result.mac-automl_itpruner.models.resnet_imagenet.conv3x3", "home.repos.pwc.inspect_result.mac-automl_itpruner.models.resnet_imagenet.conv3x3", "home.repos.pwc.inspect_result.mac-automl_itpruner.models.resnet_imagenet.conv3x3"], ["    ", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes_1", ",", "planes_2", "=", "0", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes_1", ",", "stride", ")", "\n", "bn1", "=", "norm_layer", "(", "planes_1", ")", "\n", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "if", "planes_2", "==", "0", ":", "\n", "            ", "conv2", "=", "conv3x3", "(", "planes_1", ",", "inplanes", ")", "\n", "bn2", "=", "norm_layer", "(", "inplanes", ")", "\n", "", "else", ":", "\n", "            ", "conv2", "=", "conv3x3", "(", "planes_1", ",", "planes_2", ")", "\n", "bn2", "=", "norm_layer", "(", "planes_2", ")", "\n", "", "self", ".", "relu", "=", "relu", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "(", "'conv'", ",", "conv1", ")", ",", "(", "'bn'", ",", "bn1", ")", ",", "(", "'relu'", ",", "relu", ")", "]", ")", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "(", "'conv'", ",", "conv2", ")", ",", "(", "'bn'", ",", "bn2", ")", "]", ")", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.models.resnet_imagenet.BasicBlock.forward": [[35, 45], ["resnet_imagenet.BasicBlock.conv1", "resnet_imagenet.BasicBlock.conv2", "resnet_imagenet.BasicBlock.relu", "resnet_imagenet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.models.resnet_imagenet.Bottleneck.__init__": [[48, 69], ["torch.Module.__init__", "resnet_imagenet.conv1x1", "norm_layer", "resnet_imagenet.conv3x3", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "resnet_imagenet.conv1x1", "norm_layer", "resnet_imagenet.conv1x1", "norm_layer", "collections.OrderedDict", "collections.OrderedDict", "collections.OrderedDict"], "methods", ["home.repos.pwc.inspect_result.mac-automl_itpruner.nets.__init__.SearchRunConfig.__init__", "home.repos.pwc.inspect_result.mac-automl_itpruner.models.resnet_imagenet.conv1x1", "home.repos.pwc.inspect_result.mac-automl_itpruner.models.resnet_imagenet.conv3x3", "home.repos.pwc.inspect_result.mac-automl_itpruner.models.resnet_imagenet.conv1x1", "home.repos.pwc.inspect_result.mac-automl_itpruner.models.resnet_imagenet.conv1x1"], ["    ", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes_1", ",", "planes_2", ",", "planes_3", "=", "0", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "conv1", "=", "conv1x1", "(", "inplanes", ",", "planes_1", ")", "\n", "bn1", "=", "norm_layer", "(", "planes_1", ")", "\n", "conv2", "=", "conv3x3", "(", "planes_1", ",", "planes_2", ",", "stride", ")", "\n", "bn2", "=", "norm_layer", "(", "planes_2", ")", "\n", "if", "planes_3", "==", "0", ":", "\n", "            ", "conv3", "=", "conv1x1", "(", "planes_2", ",", "inplanes", ")", "\n", "bn3", "=", "norm_layer", "(", "inplanes", ")", "\n", "", "else", ":", "\n", "            ", "conv3", "=", "conv1x1", "(", "planes_2", ",", "planes_3", ")", "\n", "bn3", "=", "norm_layer", "(", "planes_3", ")", "\n", "", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "relu", "=", "relu", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "(", "'conv'", ",", "conv1", ")", ",", "(", "'bn'", ",", "bn1", ")", ",", "(", "'relu'", ",", "relu", ")", "]", ")", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "(", "'conv'", ",", "conv2", ")", ",", "(", "'bn'", ",", "bn2", ")", ",", "(", "'relu'", ",", "relu", ")", "]", ")", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "(", "'conv'", ",", "conv3", ")", ",", "(", "'bn'", ",", "bn3", ")", "]", ")", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.models.resnet_imagenet.Bottleneck.forward": [[70, 80], ["resnet_imagenet.Bottleneck.conv1", "resnet_imagenet.Bottleneck.conv2", "resnet_imagenet.Bottleneck.conv3", "resnet_imagenet.Bottleneck.relu", "resnet_imagenet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.models.resnet_imagenet.ResNet_ImageNet.__init__": [[83, 126], ["MyNetwork.__init__", "torch.Sequential", "torch.Sequential", "torch.MaxPool2d", "torch.MaxPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "collections.OrderedDict", "resnet_imagenet.ResNet_ImageNet._make_layer", "resnet_imagenet.ResNet_ImageNet._make_layer", "resnet_imagenet.ResNet_ImageNet._make_layer", "resnet_imagenet.ResNet_ImageNet._make_layer", "torch.Linear", "torch.Linear", "resnet_imagenet.ResNet_ImageNet._make_layer", "resnet_imagenet.ResNet_ImageNet._make_layer", "resnet_imagenet.ResNet_ImageNet._make_layer", "resnet_imagenet.ResNet_ImageNet._make_layer", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.mac-automl_itpruner.nets.__init__.SearchRunConfig.__init__", "home.repos.pwc.inspect_result.mac-automl_itpruner.nets.resnet_20s_decode.ResNetDecode._make_layer", "home.repos.pwc.inspect_result.mac-automl_itpruner.nets.resnet_20s_decode.ResNetDecode._make_layer", "home.repos.pwc.inspect_result.mac-automl_itpruner.nets.resnet_20s_decode.ResNetDecode._make_layer", "home.repos.pwc.inspect_result.mac-automl_itpruner.nets.resnet_20s_decode.ResNetDecode._make_layer", "home.repos.pwc.inspect_result.mac-automl_itpruner.nets.resnet_20s_decode.ResNetDecode._make_layer", "home.repos.pwc.inspect_result.mac-automl_itpruner.nets.resnet_20s_decode.ResNetDecode._make_layer", "home.repos.pwc.inspect_result.mac-automl_itpruner.nets.resnet_20s_decode.ResNetDecode._make_layer", "home.repos.pwc.inspect_result.mac-automl_itpruner.nets.resnet_20s_decode.ResNetDecode._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "cfg", "=", "None", ",", "depth", "=", "18", ",", "block", "=", "BasicBlock", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "super", "(", "ResNet_ImageNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cfgs_base", "=", "{", "18", ":", "[", "64", ",", "64", ",", "64", ",", "64", ",", "128", ",", "128", ",", "128", ",", "256", ",", "256", ",", "256", ",", "512", ",", "512", ",", "512", "]", ",", "\n", "34", ":", "[", "64", ",", "64", ",", "64", ",", "64", ",", "64", ",", "128", ",", "128", ",", "128", ",", "128", ",", "128", ",", "256", ",", "256", ",", "256", ",", "256", ",", "256", ",", "256", ",", "256", ",", "512", ",", "512", ",", "512", ",", "512", "]", ",", "\n", "50", ":", "[", "64", ",", "64", ",", "64", ",", "256", ",", "64", ",", "64", ",", "64", ",", "64", ",", "128", ",", "128", ",", "512", ",", "128", ",", "128", ",", "128", ",", "128", ",", "128", ",", "128", ",", "256", ",", "256", ",", "1024", ",", "256", ",", "256", ",", "256", ",", "256", ",", "256", ",", "256", ",", "256", ",", "256", ",", "256", ",", "256", ",", "512", ",", "512", ",", "2048", ",", "512", ",", "512", ",", "512", ",", "512", "]", "}", "\n", "if", "depth", "==", "18", ":", "\n", "            ", "block", "=", "BasicBlock", "\n", "blocks", "=", "[", "2", ",", "2", ",", "2", ",", "2", "]", "\n", "_cfg", "=", "self", ".", "cfgs_base", "[", "18", "]", "\n", "", "elif", "depth", "==", "34", ":", "\n", "            ", "block", "=", "BasicBlock", "\n", "blocks", "=", "[", "3", ",", "4", ",", "6", ",", "3", "]", "\n", "_cfg", "=", "self", ".", "cfgs_base", "[", "34", "]", "\n", "", "elif", "depth", "==", "50", ":", "\n", "            ", "block", "=", "Bottleneck", "\n", "blocks", "=", "[", "3", ",", "4", ",", "6", ",", "3", "]", "\n", "_cfg", "=", "self", ".", "cfgs_base", "[", "50", "]", "\n", "", "if", "cfg", "==", "None", ":", "\n", "            ", "cfg", "=", "_cfg", "\n", "", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "_norm_layer", "=", "norm_layer", "\n", "self", ".", "depth", "=", "depth", "\n", "self", ".", "cfg", "=", "cfg", "\n", "self", ".", "inplanes", "=", "cfg", "[", "0", "]", "\n", "self", ".", "blocks", "=", "blocks", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "(", "'conv'", ",", "nn", ".", "Conv2d", "(", "3", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", ")", ",", "\n", "(", "'bn'", ",", "norm_layer", "(", "self", ".", "inplanes", ")", ")", ",", "\n", "(", "'relu'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "]", ")", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "if", "depth", "!=", "50", ":", "\n", "            ", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "cfg", "[", "1", ":", "blocks", "[", "0", "]", "+", "2", "]", ",", "blocks", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "cfg", "[", "blocks", "[", "0", "]", "+", "2", ":", "blocks", "[", "0", "]", "+", "2", "+", "blocks", "[", "1", "]", "+", "1", "]", ",", "blocks", "[", "1", "]", ",", "stride", "=", "2", ",", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "cfg", "[", "blocks", "[", "0", "]", "+", "blocks", "[", "1", "]", "+", "3", ":", "blocks", "[", "0", "]", "+", "blocks", "[", "1", "]", "+", "blocks", "[", "2", "]", "+", "4", "]", ",", "blocks", "[", "2", "]", ",", "stride", "=", "2", ",", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "cfg", "[", "blocks", "[", "0", "]", "+", "blocks", "[", "1", "]", "+", "blocks", "[", "2", "]", "+", "4", ":", "]", ",", "blocks", "[", "3", "]", ",", "stride", "=", "2", ",", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "cfg", "[", "blocks", "[", "0", "]", "+", "blocks", "[", "1", "]", "+", "blocks", "[", "2", "]", "+", "5", "]", ",", "num_classes", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "cfg", "[", "1", ":", "2", "*", "blocks", "[", "0", "]", "+", "2", "]", ",", "blocks", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "cfg", "[", "2", "*", "blocks", "[", "0", "]", "+", "2", ":", "2", "*", "blocks", "[", "0", "]", "+", "2", "+", "2", "*", "blocks", "[", "1", "]", "+", "1", "]", ",", "blocks", "[", "1", "]", ",", "stride", "=", "2", ",", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "cfg", "[", "2", "*", "blocks", "[", "0", "]", "+", "2", "*", "blocks", "[", "1", "]", "+", "3", ":", "2", "*", "blocks", "[", "0", "]", "+", "2", "*", "blocks", "[", "1", "]", "+", "2", "*", "blocks", "[", "2", "]", "+", "4", "]", ",", "blocks", "[", "2", "]", ",", "stride", "=", "2", ",", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "cfg", "[", "2", "*", "blocks", "[", "0", "]", "+", "2", "*", "blocks", "[", "1", "]", "+", "2", "*", "blocks", "[", "2", "]", "+", "4", ":", "]", ",", "blocks", "[", "3", "]", ",", "stride", "=", "2", ",", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "cfg", "[", "2", "*", "blocks", "[", "0", "]", "+", "2", "*", "blocks", "[", "1", "]", "+", "2", "*", "blocks", "[", "2", "]", "+", "6", "]", ",", "num_classes", ")", "\n", "", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.models.resnet_imagenet.ResNet_ImageNet._make_layer": [[127, 154], ["torch.Sequential", "torch.Sequential", "layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "range", "torch.Sequential", "torch.Sequential", "collections.OrderedDict", "block", "layers.append", "collections.OrderedDict", "block", "layers.append", "block", "block", "resnet_imagenet.conv1x1", "norm_layer", "resnet_imagenet.conv1x1", "norm_layer"], "methods", ["home.repos.pwc.inspect_result.mac-automl_itpruner.models.resnet_imagenet.conv1x1", "home.repos.pwc.inspect_result.mac-automl_itpruner.models.resnet_imagenet.conv1x1"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "norm_layer", "=", "self", ".", "_norm_layer", "\n", "downsample", "=", "None", "\n", "if", "self", ".", "depth", "==", "50", ":", "\n", "            ", "first_planes", "=", "planes", "[", "0", ":", "3", "]", "\n", "# downsample at each 1'st layer, for pruning", "\n", "downsample", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "(", "'conv'", ",", "conv1x1", "(", "self", ".", "inplanes", ",", "first_planes", "[", "-", "1", "]", ",", "stride", ")", ")", ",", "\n", "(", "'bn'", ",", "norm_layer", "(", "first_planes", "[", "-", "1", "]", ")", ")", "]", ")", ")", "\n", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "first_planes", "[", "0", "]", ",", "first_planes", "[", "1", "]", ",", "first_planes", "[", "2", "]", ",", "stride", ",", "downsample", ",", "norm_layer", ")", ")", "\n", "self", ".", "inplanes", "=", "first_planes", "[", "-", "1", "]", "\n", "later_planes", "=", "planes", "[", "3", ":", "3", "+", "2", "*", "(", "blocks", "-", "1", ")", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "                ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "later_planes", "[", "2", "*", "(", "i", "-", "1", ")", "]", ",", "later_planes", "[", "2", "*", "(", "i", "-", "1", ")", "+", "1", "]", ",", "norm_layer", "=", "norm_layer", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "", "else", ":", "\n", "            ", "first_planes", "=", "planes", "[", "0", ":", "2", "]", "\n", "# downsample at each 1'st layer, for pruning", "\n", "downsample", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "(", "'conv'", ",", "conv1x1", "(", "self", ".", "inplanes", ",", "first_planes", "[", "-", "1", "]", ",", "stride", ")", ")", ",", "\n", "(", "'bn'", ",", "norm_layer", "(", "first_planes", "[", "-", "1", "]", ")", ")", "]", ")", ")", "\n", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "first_planes", "[", "0", "]", ",", "first_planes", "[", "1", "]", ",", "stride", ",", "downsample", ",", "norm_layer", ")", ")", "\n", "self", ".", "inplanes", "=", "first_planes", "[", "-", "1", "]", "\n", "later_planes", "=", "planes", "[", "2", ":", "2", "+", "blocks", "-", "1", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "                ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "later_planes", "[", "i", "-", "1", "]", ",", "norm_layer", "=", "norm_layer", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.models.resnet_imagenet.ResNet_ImageNet.cfg2params": [[155, 200], ["range", "range"], "methods", ["None"], ["", "", "def", "cfg2params", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "blocks", "=", "self", ".", "blocks", "\n", "params", "=", "0.", "\n", "params", "+=", "(", "3", "*", "7", "*", "7", "*", "cfg", "[", "0", "]", "+", "2", "*", "cfg", "[", "0", "]", ")", "# first layer", "\n", "inplanes", "=", "cfg", "[", "0", "]", "\n", "if", "self", ".", "depth", "!=", "50", ":", "\n", "            ", "sub_cfgs", "=", "[", "cfg", "[", "1", ":", "blocks", "[", "0", "]", "+", "2", "]", ",", "\n", "cfg", "[", "blocks", "[", "0", "]", "+", "2", ":", "blocks", "[", "0", "]", "+", "2", "+", "blocks", "[", "1", "]", "+", "1", "]", ",", "\n", "cfg", "[", "blocks", "[", "0", "]", "+", "blocks", "[", "1", "]", "+", "3", ":", "blocks", "[", "0", "]", "+", "blocks", "[", "1", "]", "+", "blocks", "[", "2", "]", "+", "4", "]", ",", "\n", "cfg", "[", "blocks", "[", "0", "]", "+", "blocks", "[", "1", "]", "+", "blocks", "[", "2", "]", "+", "4", ":", "]", "]", "\n", "", "else", ":", "\n", "            ", "sub_cfgs", "=", "[", "cfg", "[", "1", ":", "2", "*", "blocks", "[", "0", "]", "+", "2", "]", ",", "\n", "cfg", "[", "2", "*", "blocks", "[", "0", "]", "+", "2", ":", "2", "*", "blocks", "[", "0", "]", "+", "2", "+", "2", "*", "blocks", "[", "1", "]", "+", "1", "]", ",", "\n", "cfg", "[", "2", "*", "blocks", "[", "0", "]", "+", "2", "*", "blocks", "[", "1", "]", "+", "3", ":", "2", "*", "blocks", "[", "0", "]", "+", "2", "*", "blocks", "[", "1", "]", "+", "2", "*", "blocks", "[", "2", "]", "+", "4", "]", ",", "\n", "cfg", "[", "2", "*", "blocks", "[", "0", "]", "+", "2", "*", "blocks", "[", "1", "]", "+", "2", "*", "blocks", "[", "2", "]", "+", "4", ":", "]", "]", "\n", "", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "            ", "planes", "=", "sub_cfgs", "[", "i", "]", "\n", "if", "self", ".", "depth", "!=", "50", ":", "\n", "                ", "first_planes", "=", "planes", "[", "0", ":", "2", "]", "\n", "later_planes", "=", "planes", "[", "2", ":", "2", "+", "blocks", "[", "i", "]", "-", "1", "]", "\n", "", "else", ":", "\n", "                ", "first_planes", "=", "planes", "[", "0", ":", "3", "]", "\n", "later_planes", "=", "planes", "[", "3", ":", "3", "+", "2", "*", "(", "blocks", "[", "i", "]", "-", "1", ")", "]", "\n", "", "params", "+=", "(", "inplanes", "*", "1", "*", "1", "*", "first_planes", "[", "-", "1", "]", "+", "2", "*", "first_planes", "[", "-", "1", "]", ")", "# downsample layer", "\n", "if", "self", ".", "depth", "!=", "50", ":", "\n", "                ", "params", "+=", "(", "inplanes", "*", "3", "*", "3", "*", "first_planes", "[", "0", "]", "+", "2", "*", "first_planes", "[", "0", "]", ")", "\n", "params", "+=", "(", "first_planes", "[", "0", "]", "*", "3", "*", "3", "*", "first_planes", "[", "1", "]", "+", "2", "*", "first_planes", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "                ", "params", "+=", "(", "inplanes", "*", "1", "*", "1", "*", "first_planes", "[", "0", "]", "+", "2", "*", "first_planes", "[", "0", "]", ")", "\n", "params", "+=", "(", "first_planes", "[", "0", "]", "*", "3", "*", "3", "*", "first_planes", "[", "1", "]", "+", "2", "*", "first_planes", "[", "1", "]", ")", "\n", "params", "+=", "(", "first_planes", "[", "1", "]", "*", "1", "*", "1", "*", "first_planes", "[", "2", "]", "+", "2", "*", "first_planes", "[", "2", "]", ")", "\n", "", "for", "j", "in", "range", "(", "1", ",", "self", ".", "blocks", "[", "i", "]", ")", ":", "\n", "                ", "inplanes", "=", "first_planes", "[", "-", "1", "]", "\n", "if", "self", ".", "depth", "!=", "50", ":", "\n", "                    ", "params", "+=", "(", "inplanes", "*", "3", "*", "3", "*", "later_planes", "[", "j", "-", "1", "]", "+", "2", "*", "later_planes", "[", "j", "-", "1", "]", ")", "\n", "params", "+=", "(", "later_planes", "[", "j", "-", "1", "]", "*", "3", "*", "3", "*", "inplanes", "+", "2", "*", "inplanes", ")", "\n", "", "else", ":", "\n", "                    ", "params", "+=", "(", "inplanes", "*", "1", "*", "1", "*", "later_planes", "[", "2", "*", "(", "j", "-", "1", ")", "]", "+", "2", "*", "later_planes", "[", "2", "*", "(", "j", "-", "1", ")", "]", ")", "\n", "params", "+=", "(", "later_planes", "[", "2", "*", "(", "j", "-", "1", ")", "]", "*", "3", "*", "3", "*", "later_planes", "[", "2", "*", "(", "j", "-", "1", ")", "+", "1", "]", "+", "2", "*", "later_planes", "[", "2", "*", "(", "j", "-", "1", ")", "+", "1", "]", ")", "\n", "params", "+=", "(", "later_planes", "[", "2", "*", "(", "j", "-", "1", ")", "+", "1", "]", "*", "1", "*", "1", "*", "inplanes", "+", "2", "*", "inplanes", ")", "\n", "", "", "", "if", "self", ".", "depth", "==", "50", ":", "\n", "            ", "params", "+=", "(", "cfg", "[", "2", "*", "blocks", "[", "0", "]", "+", "2", "*", "blocks", "[", "1", "]", "+", "2", "*", "blocks", "[", "2", "]", "+", "6", "]", "+", "1", ")", "*", "self", ".", "num_classes", "\n", "", "else", ":", "\n", "            ", "params", "+=", "(", "cfg", "[", "blocks", "[", "0", "]", "+", "blocks", "[", "1", "]", "+", "blocks", "[", "2", "]", "+", "5", "]", "+", "1", ")", "*", "self", ".", "num_classes", "\n", "", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.models.resnet_imagenet.ResNet_ImageNet.cfg2flops": [[201, 251], ["range", "range"], "methods", ["None"], ["", "def", "cfg2flops", "(", "self", ",", "cfg", ")", ":", "# to simplify, only count convolution flops", "\n", "        ", "blocks", "=", "self", ".", "blocks", "\n", "flops", "=", "0.", "\n", "size", "=", "224", "\n", "size", "/=", "2", "# first conv layer s=2", "\n", "flops", "+=", "(", "3", "*", "7", "*", "7", "*", "cfg", "[", "0", "]", "*", "size", "*", "size", "+", "5", "*", "cfg", "[", "0", "]", "*", "size", "*", "size", ")", "# first layer, conv+bn+relu", "\n", "inplanes", "=", "cfg", "[", "0", "]", "\n", "size", "/=", "2", "# pooling s=2", "\n", "flops", "+=", "(", "3", "*", "3", "*", "cfg", "[", "0", "]", "*", "size", "*", "size", ")", "# maxpooling", "\n", "if", "self", ".", "depth", "!=", "50", ":", "\n", "            ", "sub_cfgs", "=", "[", "cfg", "[", "1", ":", "blocks", "[", "0", "]", "+", "2", "]", ",", "\n", "cfg", "[", "blocks", "[", "0", "]", "+", "2", ":", "blocks", "[", "0", "]", "+", "2", "+", "blocks", "[", "1", "]", "+", "1", "]", ",", "\n", "cfg", "[", "blocks", "[", "0", "]", "+", "blocks", "[", "1", "]", "+", "3", ":", "blocks", "[", "0", "]", "+", "blocks", "[", "1", "]", "+", "blocks", "[", "2", "]", "+", "4", "]", ",", "\n", "cfg", "[", "blocks", "[", "0", "]", "+", "blocks", "[", "1", "]", "+", "blocks", "[", "2", "]", "+", "4", ":", "]", "]", "\n", "", "else", ":", "\n", "            ", "sub_cfgs", "=", "[", "cfg", "[", "1", ":", "2", "*", "blocks", "[", "0", "]", "+", "2", "]", ",", "\n", "cfg", "[", "2", "*", "blocks", "[", "0", "]", "+", "2", ":", "2", "*", "blocks", "[", "0", "]", "+", "2", "+", "2", "*", "blocks", "[", "1", "]", "+", "1", "]", ",", "\n", "cfg", "[", "2", "*", "blocks", "[", "0", "]", "+", "2", "*", "blocks", "[", "1", "]", "+", "3", ":", "2", "*", "blocks", "[", "0", "]", "+", "2", "*", "blocks", "[", "1", "]", "+", "2", "*", "blocks", "[", "2", "]", "+", "4", "]", ",", "\n", "cfg", "[", "2", "*", "blocks", "[", "0", "]", "+", "2", "*", "blocks", "[", "1", "]", "+", "2", "*", "blocks", "[", "2", "]", "+", "4", ":", "]", "]", "\n", "", "for", "i", "in", "range", "(", "4", ")", ":", "# each layer", "\n", "            ", "planes", "=", "sub_cfgs", "[", "i", "]", "\n", "if", "self", ".", "depth", "!=", "50", ":", "\n", "                ", "first_planes", "=", "planes", "[", "0", ":", "2", "]", "\n", "later_planes", "=", "planes", "[", "2", ":", "2", "+", "blocks", "[", "i", "]", "-", "1", "]", "\n", "", "else", ":", "\n", "                ", "first_planes", "=", "planes", "[", "0", ":", "3", "]", "\n", "later_planes", "=", "planes", "[", "3", ":", "3", "+", "2", "*", "(", "blocks", "[", "i", "]", "-", "1", ")", "]", "\n", "", "if", "i", "in", "[", "1", ",", "2", ",", "3", "]", ":", "\n", "                ", "size", "/=", "2", "\n", "", "flops", "+=", "(", "inplanes", "*", "1", "*", "1", "*", "first_planes", "[", "-", "1", "]", "+", "5", "*", "first_planes", "[", "-", "1", "]", ")", "*", "size", "*", "size", "# downsample layer", "\n", "if", "self", ".", "depth", "!=", "50", ":", "\n", "                ", "flops", "+=", "(", "inplanes", "*", "3", "*", "3", "*", "first_planes", "[", "0", "]", "+", "5", "*", "first_planes", "[", "0", "]", ")", "*", "size", "*", "size", "\n", "flops", "+=", "(", "first_planes", "[", "0", "]", "*", "3", "*", "3", "*", "first_planes", "[", "1", "]", "+", "5", "*", "first_planes", "[", "1", "]", ")", "*", "size", "*", "size", "\n", "", "else", ":", "\n", "                ", "size", "*=", "2", "\n", "flops", "+=", "(", "inplanes", "*", "1", "*", "1", "*", "first_planes", "[", "0", "]", "+", "5", "*", "first_planes", "[", "0", "]", ")", "*", "size", "*", "size", "\n", "size", "/=", "2", "\n", "flops", "+=", "(", "first_planes", "[", "0", "]", "*", "3", "*", "3", "*", "first_planes", "[", "1", "]", "+", "5", "*", "first_planes", "[", "1", "]", ")", "*", "size", "*", "size", "\n", "flops", "+=", "(", "first_planes", "[", "1", "]", "*", "1", "*", "1", "*", "first_planes", "[", "2", "]", "+", "5", "*", "first_planes", "[", "2", "]", ")", "*", "size", "*", "size", "\n", "", "for", "j", "in", "range", "(", "1", ",", "self", ".", "blocks", "[", "i", "]", ")", ":", "\n", "                ", "inplanes", "=", "first_planes", "[", "-", "1", "]", "\n", "if", "self", ".", "depth", "!=", "50", ":", "\n", "                    ", "flops", "+=", "(", "inplanes", "*", "3", "*", "3", "*", "later_planes", "[", "j", "-", "1", "]", "+", "5", "*", "later_planes", "[", "j", "-", "1", "]", ")", "*", "size", "*", "size", "\n", "flops", "+=", "(", "later_planes", "[", "j", "-", "1", "]", "*", "3", "*", "3", "*", "inplanes", "+", "5", "*", "inplanes", ")", "*", "size", "*", "size", "\n", "", "else", ":", "\n", "                    ", "flops", "+=", "(", "inplanes", "*", "1", "*", "1", "*", "later_planes", "[", "2", "*", "(", "j", "-", "1", ")", "]", "+", "5", "*", "later_planes", "[", "2", "*", "(", "j", "-", "1", ")", "]", ")", "*", "size", "*", "size", "\n", "flops", "+=", "(", "later_planes", "[", "2", "*", "(", "j", "-", "1", ")", "]", "*", "3", "*", "3", "*", "later_planes", "[", "2", "*", "(", "j", "-", "1", ")", "+", "1", "]", "+", "5", "*", "later_planes", "[", "2", "*", "(", "j", "-", "1", ")", "+", "1", "]", ")", "*", "size", "*", "size", "\n", "flops", "+=", "(", "later_planes", "[", "2", "*", "(", "j", "-", "1", ")", "+", "1", "]", "*", "1", "*", "1", "*", "inplanes", "+", "5", "*", "inplanes", ")", "*", "size", "*", "size", "\n", "", "", "", "flops", "+=", "(", "2", "*", "cfg", "[", "-", "1", "]", "+", "1", ")", "*", "self", ".", "num_classes", "\n", "return", "flops", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.models.resnet_imagenet.ResNet_ImageNet.cfg2flops_perlayer": [[252, 342], ["numpy.zeros", "range", "range", "range", "range"], "methods", ["None"], ["", "def", "cfg2flops_perlayer", "(", "self", ",", "cfg", ",", "length", ")", ":", "# to simplify, only count convolution flops", "\n", "        ", "blocks", "=", "self", ".", "blocks", "\n", "flops_singlecfg", "=", "[", "0", "for", "j", "in", "range", "(", "length", ")", "]", "\n", "flops_doublecfg", "=", "np", ".", "zeros", "(", "(", "length", ",", "length", ")", ")", "\n", "flops_squarecfg", "=", "[", "0", "for", "j", "in", "range", "(", "length", ")", "]", "\n", "size", "=", "224", "\n", "size", "/=", "2", "# first conv layer s=2", "\n", "flops_singlecfg", "[", "0", "]", "+=", "(", "3", "*", "7", "*", "7", "*", "cfg", "[", "0", "]", "*", "size", "*", "size", "+", "5", "*", "cfg", "[", "0", "]", "*", "size", "*", "size", ")", "# first layer, conv+bn+relu", "\n", "inplanes", "=", "cfg", "[", "0", "]", "\n", "size", "/=", "2", "# pooling s=2", "\n", "flops_singlecfg", "[", "0", "]", "+=", "(", "3", "*", "3", "*", "cfg", "[", "0", "]", "*", "size", "*", "size", ")", "# maxpooling", "\n", "if", "self", ".", "depth", "!=", "50", ":", "\n", "            ", "count", "=", "2", "\n", "", "else", ":", "\n", "            ", "count", "=", "3", "\n", "", "count1", "=", "0", "\n", "if", "self", ".", "depth", "!=", "50", ":", "\n", "            ", "sub_cfgs", "=", "[", "cfg", "[", "1", ":", "blocks", "[", "0", "]", "+", "2", "]", ",", "\n", "cfg", "[", "blocks", "[", "0", "]", "+", "2", ":", "blocks", "[", "0", "]", "+", "2", "+", "blocks", "[", "1", "]", "+", "1", "]", ",", "\n", "cfg", "[", "blocks", "[", "0", "]", "+", "blocks", "[", "1", "]", "+", "3", ":", "blocks", "[", "0", "]", "+", "blocks", "[", "1", "]", "+", "blocks", "[", "2", "]", "+", "4", "]", ",", "\n", "cfg", "[", "blocks", "[", "0", "]", "+", "blocks", "[", "1", "]", "+", "blocks", "[", "2", "]", "+", "4", ":", "]", "]", "\n", "", "else", ":", "\n", "            ", "sub_cfgs", "=", "[", "cfg", "[", "1", ":", "2", "*", "blocks", "[", "0", "]", "+", "2", "]", ",", "\n", "cfg", "[", "2", "*", "blocks", "[", "0", "]", "+", "2", ":", "2", "*", "blocks", "[", "0", "]", "+", "2", "+", "2", "*", "blocks", "[", "1", "]", "+", "1", "]", ",", "\n", "cfg", "[", "2", "*", "blocks", "[", "0", "]", "+", "2", "*", "blocks", "[", "1", "]", "+", "3", ":", "2", "*", "blocks", "[", "0", "]", "+", "2", "*", "blocks", "[", "1", "]", "+", "2", "*", "blocks", "[", "2", "]", "+", "4", "]", ",", "\n", "cfg", "[", "2", "*", "blocks", "[", "0", "]", "+", "2", "*", "blocks", "[", "1", "]", "+", "2", "*", "blocks", "[", "2", "]", "+", "4", ":", "]", "]", "\n", "", "for", "i", "in", "range", "(", "4", ")", ":", "# each layer", "\n", "            ", "planes", "=", "sub_cfgs", "[", "i", "]", "\n", "if", "self", ".", "depth", "!=", "50", ":", "\n", "                ", "first_planes", "=", "planes", "[", "0", ":", "2", "]", "\n", "later_planes", "=", "planes", "[", "2", ":", "2", "+", "blocks", "[", "i", "]", "-", "1", "]", "\n", "", "else", ":", "\n", "                ", "first_planes", "=", "planes", "[", "0", ":", "3", "]", "\n", "later_planes", "=", "planes", "[", "3", ":", "3", "+", "2", "*", "(", "blocks", "[", "i", "]", "-", "1", ")", "]", "\n", "", "if", "i", "in", "[", "1", ",", "2", ",", "3", "]", ":", "\n", "                ", "size", "/=", "2", "\n", "if", "self", ".", "depth", "!=", "50", ":", "\n", "                    ", "count", "+=", "blocks", "[", "i", "-", "1", "]", "+", "1", "\n", "", "else", ":", "\n", "                    ", "count", "+=", "2", "*", "blocks", "[", "i", "-", "1", "]", "+", "1", "\n", "", "", "flops_doublecfg", "[", "count", "]", "[", "count1", "]", "+=", "inplanes", "*", "1", "*", "1", "*", "first_planes", "[", "-", "1", "]", "*", "size", "*", "size", "# downsample layer", "\n", "flops_doublecfg", "[", "count1", "]", "[", "count", "]", "+=", "inplanes", "*", "1", "*", "1", "*", "first_planes", "[", "-", "1", "]", "*", "size", "*", "size", "\n", "flops_singlecfg", "[", "count", "]", "+=", "5", "*", "first_planes", "[", "-", "1", "]", "*", "size", "*", "size", "\n", "if", "self", ".", "depth", "!=", "50", ":", "\n", "                ", "flops_doublecfg", "[", "count", "-", "1", "]", "[", "count1", "]", "+=", "inplanes", "*", "3", "*", "3", "*", "first_planes", "[", "0", "]", "*", "size", "*", "size", "\n", "flops_doublecfg", "[", "count1", "]", "[", "count", "-", "1", "]", "+=", "inplanes", "*", "3", "*", "3", "*", "first_planes", "[", "0", "]", "*", "size", "*", "size", "\n", "flops_singlecfg", "[", "count", "-", "1", "]", "+=", "5", "*", "first_planes", "[", "0", "]", "*", "size", "*", "size", "\n", "\n", "flops_doublecfg", "[", "count", "-", "1", "]", "[", "count", "]", "+=", "first_planes", "[", "0", "]", "*", "3", "*", "3", "*", "first_planes", "[", "1", "]", "*", "size", "*", "size", "\n", "flops_doublecfg", "[", "count", "]", "[", "count", "-", "1", "]", "+=", "first_planes", "[", "0", "]", "*", "3", "*", "3", "*", "first_planes", "[", "1", "]", "*", "size", "*", "size", "\n", "flops_singlecfg", "[", "count", "]", "+=", "5", "*", "first_planes", "[", "1", "]", "*", "size", "*", "size", "\n", "", "else", ":", "\n", "                ", "size", "*=", "2", "\n", "flops_doublecfg", "[", "count", "-", "2", "]", "[", "count1", "]", "+=", "inplanes", "*", "1", "*", "1", "*", "first_planes", "[", "0", "]", "*", "size", "*", "size", "\n", "flops_doublecfg", "[", "count1", "]", "[", "count", "-", "2", "]", "+=", "inplanes", "*", "1", "*", "1", "*", "first_planes", "[", "0", "]", "*", "size", "*", "size", "\n", "flops_singlecfg", "[", "count", "-", "2", "]", "+=", "5", "*", "first_planes", "[", "0", "]", "*", "size", "*", "size", "\n", "\n", "size", "/=", "2", "\n", "flops_doublecfg", "[", "count", "-", "2", "]", "[", "count", "-", "1", "]", "+=", "first_planes", "[", "0", "]", "*", "3", "*", "3", "*", "first_planes", "[", "1", "]", "*", "size", "*", "size", "\n", "flops_doublecfg", "[", "count", "-", "1", "]", "[", "count", "-", "2", "]", "+=", "first_planes", "[", "0", "]", "*", "3", "*", "3", "*", "first_planes", "[", "1", "]", "*", "size", "*", "size", "\n", "flops_singlecfg", "[", "count", "-", "1", "]", "+=", "5", "*", "first_planes", "[", "1", "]", "*", "size", "*", "size", "\n", "\n", "flops_doublecfg", "[", "count", "]", "[", "count", "-", "1", "]", "+=", "first_planes", "[", "1", "]", "*", "1", "*", "1", "*", "first_planes", "[", "2", "]", "*", "size", "*", "size", "\n", "flops_doublecfg", "[", "count", "-", "1", "]", "[", "count", "]", "+=", "first_planes", "[", "1", "]", "*", "1", "*", "1", "*", "first_planes", "[", "2", "]", "*", "size", "*", "size", "\n", "flops_singlecfg", "[", "count", "]", "+=", "5", "*", "first_planes", "[", "2", "]", "*", "size", "*", "size", "\n", "", "for", "j", "in", "range", "(", "1", ",", "self", ".", "blocks", "[", "i", "]", ")", ":", "\n", "                ", "inplanes", "=", "first_planes", "[", "-", "1", "]", "\n", "count1", "=", "count", "\n", "if", "self", ".", "depth", "!=", "50", ":", "\n", "                    ", "flops_doublecfg", "[", "count1", "]", "[", "count", "+", "j", "]", "+=", "inplanes", "*", "3", "*", "3", "*", "later_planes", "[", "j", "-", "1", "]", "*", "size", "*", "size", "\n", "flops_doublecfg", "[", "count", "+", "j", "]", "[", "count1", "]", "+=", "inplanes", "*", "3", "*", "3", "*", "later_planes", "[", "j", "-", "1", "]", "*", "size", "*", "size", "\n", "flops_singlecfg", "[", "count", "+", "j", "]", "+=", "5", "*", "later_planes", "[", "j", "-", "1", "]", "*", "size", "*", "size", "\n", "\n", "flops_doublecfg", "[", "count1", "]", "[", "count", "+", "j", "]", "+=", "later_planes", "[", "j", "-", "1", "]", "*", "3", "*", "3", "*", "inplanes", "*", "size", "*", "size", "\n", "flops_doublecfg", "[", "count", "+", "j", "]", "[", "count1", "]", "+=", "later_planes", "[", "j", "-", "1", "]", "*", "3", "*", "3", "*", "inplanes", "*", "size", "*", "size", "\n", "flops_singlecfg", "[", "count1", "]", "+=", "5", "*", "inplanes", "*", "size", "*", "size", "\n", "", "else", ":", "\n", "                    ", "flops_doublecfg", "[", "count1", "]", "[", "count", "+", "1", "+", "2", "*", "(", "j", "-", "1", ")", "]", "+=", "inplanes", "*", "1", "*", "1", "*", "later_planes", "[", "2", "*", "(", "j", "-", "1", ")", "]", "*", "size", "*", "size", "\n", "flops_doublecfg", "[", "count", "+", "1", "+", "2", "*", "(", "j", "-", "1", ")", "]", "[", "count1", "]", "+=", "inplanes", "*", "1", "*", "1", "*", "later_planes", "[", "2", "*", "(", "j", "-", "1", ")", "]", "*", "size", "*", "size", "\n", "flops_singlecfg", "[", "count", "+", "1", "+", "2", "*", "(", "j", "-", "1", ")", "]", "+=", "5", "*", "later_planes", "[", "2", "*", "(", "j", "-", "1", ")", "]", "*", "size", "*", "size", "\n", "\n", "flops_doublecfg", "[", "count", "+", "2", "+", "2", "*", "(", "j", "-", "1", ")", "]", "[", "count", "+", "1", "+", "2", "*", "(", "j", "-", "1", ")", "]", "+=", "later_planes", "[", "2", "*", "(", "j", "-", "1", ")", "]", "*", "3", "*", "3", "*", "later_planes", "[", "2", "*", "(", "j", "-", "1", ")", "+", "1", "]", "*", "size", "*", "size", "\n", "flops_doublecfg", "[", "count", "+", "1", "+", "2", "*", "(", "j", "-", "1", ")", "]", "[", "count", "+", "2", "+", "2", "*", "(", "j", "-", "1", ")", "]", "+=", "later_planes", "[", "2", "*", "(", "j", "-", "1", ")", "]", "*", "3", "*", "3", "*", "later_planes", "[", "2", "*", "(", "j", "-", "1", ")", "+", "1", "]", "*", "size", "*", "size", "\n", "flops_singlecfg", "[", "count", "+", "2", "+", "2", "*", "(", "j", "-", "1", ")", "]", "+=", "5", "*", "later_planes", "[", "2", "*", "(", "j", "-", "1", ")", "+", "1", "]", "*", "size", "*", "size", "\n", "\n", "flops_doublecfg", "[", "count", "+", "2", "+", "2", "*", "(", "j", "-", "1", ")", "]", "[", "count1", "]", "+=", "later_planes", "[", "2", "*", "(", "j", "-", "1", ")", "+", "1", "]", "*", "1", "*", "1", "*", "inplanes", "*", "size", "*", "size", "\n", "flops_doublecfg", "[", "count1", "]", "[", "count", "+", "2", "+", "2", "*", "(", "j", "-", "1", ")", "]", "+=", "later_planes", "[", "2", "*", "(", "j", "-", "1", ")", "+", "1", "]", "*", "1", "*", "1", "*", "inplanes", "*", "size", "*", "size", "\n", "flops_singlecfg", "[", "count1", "]", "+=", "5", "*", "inplanes", "*", "size", "*", "size", "\n", "", "", "", "flops_singlecfg", "[", "-", "1", "]", "+=", "(", "2", "*", "cfg", "[", "-", "1", "]", "+", "1", ")", "*", "self", ".", "num_classes", "\n", "return", "flops_singlecfg", ",", "flops_doublecfg", ",", "flops_squarecfg", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.models.resnet_imagenet.ResNet_ImageNet.forward": [[343, 357], ["resnet_imagenet.ResNet_ImageNet.conv1", "resnet_imagenet.ResNet_ImageNet.maxpool", "resnet_imagenet.ResNet_ImageNet.layer1", "resnet_imagenet.ResNet_ImageNet.layer2", "resnet_imagenet.ResNet_ImageNet.layer3", "resnet_imagenet.ResNet_ImageNet.layer4", "resnet_imagenet.ResNet_ImageNet.avgpool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "resnet_imagenet.ResNet_ImageNet.fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.models.resnet_imagenet.ResNet_ImageNet.feature_extract": [[358, 388], ["resnet_imagenet.ResNet_ImageNet.conv1", "tensor.append", "resnet_imagenet.ResNet_ImageNet.maxpool", "block", "tensor.append", "tensor.append", "tensor.append", "tensor.append", "block", "tensor.append", "tensor.append", "tensor.append", "block", "block.conv1", "block.conv1", "block.conv2", "block.conv1", "block.conv2", "block.conv1", "block.conv1"], "methods", ["None"], ["", "def", "feature_extract", "(", "self", ",", "x", ")", ":", "\n", "        ", "tensor", "=", "[", "]", "\n", "count", "=", "0", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "tensor", ".", "append", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "if", "self", ".", "depth", "!=", "50", ":", "\n", "            ", "for", "_layer", "in", "[", "self", ".", "layer1", ",", "self", ".", "layer2", ",", "self", ".", "layer3", ",", "self", ".", "layer4", "]", ":", "\n", "                ", "for", "block", "in", "_layer", ":", "\n", "                    ", "if", "count", "==", "0", ":", "\n", "                        ", "tensor", ".", "append", "(", "block", ".", "conv1", "(", "x", ")", ")", "\n", "", "x", "=", "block", "(", "x", ")", "\n", "tensor", ".", "append", "(", "x", ")", "\n", "count", "+=", "1", "\n", "", "count", "=", "0", "\n", "", "", "else", ":", "\n", "            ", "for", "_layer", "in", "[", "self", ".", "layer1", ",", "self", ".", "layer2", ",", "self", ".", "layer3", ",", "self", ".", "layer4", "]", ":", "\n", "                ", "count", "=", "0", "\n", "for", "block", "in", "_layer", ":", "\n", "                    ", "if", "count", "==", "0", ":", "\n", "                        ", "tensor", ".", "append", "(", "block", ".", "conv1", "(", "x", ")", ")", "\n", "tensor", ".", "append", "(", "block", ".", "conv2", "(", "block", ".", "conv1", "(", "x", ")", ")", ")", "\n", "x", "=", "block", "(", "x", ")", "\n", "tensor", ".", "append", "(", "x", ")", "\n", "", "else", ":", "\n", "                        ", "tensor", ".", "append", "(", "block", ".", "conv1", "(", "x", ")", ")", "\n", "tensor", ".", "append", "(", "block", ".", "conv2", "(", "block", ".", "conv1", "(", "x", ")", ")", ")", "\n", "x", "=", "block", "(", "x", ")", "\n", "", "count", "+=", "1", "\n", "", "", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.models.resnet_imagenet.ResNet_ImageNet.config": [[389, 397], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "config", "(", "self", ")", ":", "\n", "        ", "return", "{", "\n", "'name'", ":", "self", ".", "__class__", ".", "__name__", ",", "\n", "'depth'", ":", "self", ".", "depth", ",", "\n", "'cfg'", ":", "self", ".", "cfg", ",", "\n", "'cfg_base'", ":", "self", ".", "cfgs_base", "[", "self", ".", "depth", "]", ",", "\n", "'dataset'", ":", "'ImageNet'", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.models.resnet_imagenet.conv3x3": [[8, 10], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "groups", "=", "1", ",", "padding", "=", "1", ")", ":", "\n", "    ", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.models.resnet_imagenet.conv1x1": [[11, 13], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.data_providers.cifar10.CifarDataProvider.__init__": [[6, 15], ["utils.get_cifar_iter", "utils.get_cifar_iter"], "methods", ["home.repos.pwc.inspect_result.mac-automl_itpruner.utils.get_data_iter.get_cifar_iter", "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.get_data_iter.get_cifar_iter"], ["    ", "def", "__init__", "(", "self", ",", "save_path", "=", "None", ",", "train_batch_size", "=", "256", ",", "test_batch_size", "=", "500", ",", "valid_size", "=", "None", ",", "\n", "n_worker", "=", "8", ",", "manual_seed", "=", "12", ",", "local_rank", "=", "0", ",", "world_size", "=", "1", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "self", ".", "_save_path", "=", "save_path", "\n", "self", ".", "valid", "=", "None", "\n", "self", ".", "train", "=", "get_cifar_iter", "(", "'train'", ",", "self", ".", "save_path", ",", "train_batch_size", ",", "n_worker", ",", "cutout", "=", "16", ",", "manual_seed", "=", "manual_seed", ")", "\n", "self", ".", "test", "=", "get_cifar_iter", "(", "'val'", ",", "self", ".", "save_path", ",", "test_batch_size", ",", "n_worker", ",", "cutout", "=", "16", ",", "manual_seed", "=", "manual_seed", ")", "\n", "if", "self", ".", "valid", "is", "None", ":", "\n", "            ", "self", ".", "valid", "=", "self", ".", "test", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.data_providers.cifar10.CifarDataProvider.name": [[16, 19], ["None"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "name", "(", ")", ":", "\n", "        ", "return", "'cifar10'", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.data_providers.cifar10.CifarDataProvider.data_shape": [[20, 23], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "data_shape", "(", "self", ")", ":", "\n", "        ", "return", "3", ",", "32", ",", "32", "# C, H, W", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.data_providers.cifar10.CifarDataProvider.n_classes": [[24, 27], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "n_classes", "(", "self", ")", ":", "\n", "        ", "return", "10", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.data_providers.cifar10.CifarDataProvider.save_path": [[28, 33], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "save_path", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_save_path", "is", "None", ":", "\n", "            ", "self", ".", "_save_path", "=", "'/userhome/data/cifar10'", "\n", "", "return", "self", ".", "_save_path", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mac-automl_itpruner.data_providers.__init__.DataProvider.name": [[4, 8], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.mac-automl_itpruner.data_providers.__init__.DataProvider.data_shape": [[9, 13], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.mac-automl_itpruner.data_providers.__init__.DataProvider.n_classes": [[14, 18], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.mac-automl_itpruner.data_providers.__init__.DataProvider.save_path": [[19, 23], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.mac-automl_itpruner.data_providers.__init__.DataProvider.data_url": [[24, 28], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.mac-automl_itpruner.data_providers.imagenet.ImagenetDataProvider.__init__": [[39, 58], ["utils.get_imagenet_iter", "utils.get_imagenet_iter", "torch.cuda.device_count", "torch.cuda.device_count"], "methods", ["home.repos.pwc.inspect_result.mac-automl_itpruner.utils.get_data_iter.get_imagenet_iter", "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.get_data_iter.get_imagenet_iter"], ["    ", "def", "__init__", "(", "self", ",", "save_path", "=", "None", ",", "train_batch_size", "=", "256", ",", "test_batch_size", "=", "512", ",", "valid_size", "=", "None", ",", "\n", "n_worker", "=", "24", ",", "manual_seed", "=", "12", ",", "load_type", "=", "'dali'", ",", "local_rank", "=", "0", ",", "world_size", "=", "1", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "self", ".", "_save_path", "=", "save_path", "\n", "self", ".", "valid", "=", "None", "\n", "if", "valid_size", "is", "not", "None", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "self", ".", "train", "=", "utils", ".", "get_imagenet_iter", "(", "data_type", "=", "'train'", ",", "image_dir", "=", "self", ".", "train_path", ",", "\n", "batch_size", "=", "train_batch_size", ",", "num_threads", "=", "n_worker", ",", "\n", "device_id", "=", "local_rank", ",", "manual_seed", "=", "manual_seed", ",", "\n", "num_gpus", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", ",", "crop", "=", "self", ".", "image_size", ",", "\n", "val_size", "=", "self", ".", "image_size", ",", "world_size", "=", "world_size", ",", "local_rank", "=", "local_rank", ")", "\n", "self", ".", "test", "=", "utils", ".", "get_imagenet_iter", "(", "data_type", "=", "'val'", ",", "image_dir", "=", "self", ".", "valid_path", ",", "manual_seed", "=", "manual_seed", ",", "\n", "batch_size", "=", "test_batch_size", ",", "num_threads", "=", "n_worker", ",", "device_id", "=", "local_rank", ",", "\n", "num_gpus", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", ",", "crop", "=", "self", ".", "image_size", ",", "\n", "val_size", "=", "256", ",", "world_size", "=", "world_size", ",", "local_rank", "=", "local_rank", ")", "\n", "", "if", "self", ".", "valid", "is", "None", ":", "\n", "            ", "self", ".", "valid", "=", "self", ".", "test", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.data_providers.imagenet.ImagenetDataProvider.name": [[59, 62], ["None"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "name", "(", ")", ":", "\n", "        ", "return", "'imagenet'", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.data_providers.imagenet.ImagenetDataProvider.data_shape": [[63, 66], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "data_shape", "(", "self", ")", ":", "\n", "        ", "return", "3", ",", "self", ".", "image_size", ",", "self", ".", "image_size", "# C, H, W", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.data_providers.imagenet.ImagenetDataProvider.n_classes": [[67, 70], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "n_classes", "(", "self", ")", ":", "\n", "        ", "return", "1000", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.data_providers.imagenet.ImagenetDataProvider.save_path": [[71, 76], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "save_path", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_save_path", "is", "None", ":", "\n", "            ", "self", ".", "_save_path", "=", "'/userhome/data/imagenet'", "\n", "", "return", "self", ".", "_save_path", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.data_providers.imagenet.ImagenetDataProvider.data_url": [[77, 80], ["ValueError"], "methods", ["None"], ["", "@", "property", "\n", "def", "data_url", "(", "self", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'unable to download ImageNet'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.data_providers.imagenet.ImagenetDataProvider.train_path": [[81, 84], ["os.path.join"], "methods", ["None"], ["", "@", "property", "\n", "def", "train_path", "(", "self", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "self", ".", "save_path", ",", "'train'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.data_providers.imagenet.ImagenetDataProvider.valid_path": [[85, 88], ["os.path.join"], "methods", ["None"], ["", "@", "property", "\n", "def", "valid_path", "(", "self", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "self", ".", "_save_path", ",", "'val'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.data_providers.imagenet.ImagenetDataProvider.resize_value": [[89, 92], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "resize_value", "(", "self", ")", ":", "\n", "        ", "return", "256", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.data_providers.imagenet.ImagenetDataProvider.image_size": [[93, 96], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "image_size", "(", "self", ")", ":", "\n", "        ", "return", "224", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mac-automl_itpruner.data_providers.imagenet.make_imagenet_subset": [[10, 36], ["os.path.join", "os.path.join", "sorted", "numpy.random.shuffle", "print", "print", "class_name_list.append", "os.path.join", "os.path.join", "shutil.copytree", "print", "os.path.join", "os.path.join", "shutil.copytree", "print", "train_folder.split", "os.scandir", "f.is_dir"], "function", ["None"], ["def", "make_imagenet_subset", "(", "path2subset", ",", "n_sub_classes", ",", "path2imagenet", "=", "'/userhome/memory_data/imagenet'", ")", ":", "\n", "    ", "imagenet_train_folder", "=", "os", ".", "path", ".", "join", "(", "path2imagenet", ",", "'train'", ")", "\n", "imagenet_val_folder", "=", "os", ".", "path", ".", "join", "(", "path2imagenet", ",", "'val'", ")", "\n", "\n", "subfolders", "=", "sorted", "(", "[", "f", ".", "path", "for", "f", "in", "os", ".", "scandir", "(", "imagenet_train_folder", ")", "if", "f", ".", "is_dir", "(", ")", "]", ")", "\n", "# np.random.seed(DataProvider.VALID_SEED)", "\n", "np", ".", "random", ".", "shuffle", "(", "subfolders", ")", "\n", "\n", "chosen_train_folders", "=", "subfolders", "[", ":", "n_sub_classes", "]", "\n", "class_name_list", "=", "[", "]", "\n", "for", "train_folder", "in", "chosen_train_folders", ":", "\n", "        ", "class_name", "=", "train_folder", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "class_name_list", ".", "append", "(", "class_name", ")", "\n", "\n", "", "print", "(", "'=> Start building subset%d'", "%", "n_sub_classes", ")", "\n", "for", "cls_name", "in", "class_name_list", ":", "\n", "        ", "src_train_folder", "=", "os", ".", "path", ".", "join", "(", "imagenet_train_folder", ",", "cls_name", ")", "\n", "target_train_folder", "=", "os", ".", "path", ".", "join", "(", "path2subset", ",", "'train/%s'", "%", "cls_name", ")", "\n", "shutil", ".", "copytree", "(", "src_train_folder", ",", "target_train_folder", ")", "\n", "print", "(", "'Train: %s -> %s'", "%", "(", "src_train_folder", ",", "target_train_folder", ")", ")", "\n", "\n", "src_val_folder", "=", "os", ".", "path", ".", "join", "(", "imagenet_val_folder", ",", "cls_name", ")", "\n", "target_val_folder", "=", "os", ".", "path", ".", "join", "(", "path2subset", ",", "'val/%s'", "%", "cls_name", ")", "\n", "shutil", ".", "copytree", "(", "src_val_folder", ",", "target_val_folder", ")", "\n", "print", "(", "'Val: %s -> %s'", "%", "(", "src_val_folder", ",", "target_val_folder", ")", ")", "\n", "", "print", "(", "'=> Finish building subset%d'", "%", "n_sub_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.Imagenet.cal_FLOPs.print_model_parm_flops": [[11, 97], ["cal_FLOPs.print_model_parm_flops.foo"], "function", ["None"], ["def", "print_model_parm_flops", "(", "one_shot_model", ")", ":", "\n", "    ", "prods", "=", "{", "}", "\n", "def", "save_hook", "(", "name", ")", ":", "\n", "        ", "def", "hook_per", "(", "self", ",", "input", ",", "output", ")", ":", "\n", "            ", "prods", "[", "name", "]", "=", "np", ".", "prod", "(", "input", "[", "0", "]", ".", "shape", ")", "\n", "", "return", "hook_per", "\n", "\n", "", "list_1", "=", "[", "]", "\n", "def", "simple_hook", "(", "self", ",", "input", ",", "output", ")", ":", "\n", "        ", "list_1", ".", "append", "(", "np", ".", "prod", "(", "input", "[", "0", "]", ".", "shape", ")", ")", "\n", "", "list_2", "=", "{", "}", "\n", "def", "simple_hook2", "(", "self", ",", "input", ",", "output", ")", ":", "\n", "        ", "list_2", "[", "'names'", "]", "=", "np", ".", "prod", "(", "input", "[", "0", "]", ".", "shape", ")", "\n", "\n", "\n", "", "multiply_adds", "=", "False", "\n", "list_conv", "=", "[", "]", "\n", "def", "conv_hook", "(", "self", ",", "input", ",", "output", ")", ":", "\n", "        ", "batch_size", ",", "input_channels", ",", "input_height", ",", "input_width", "=", "input", "[", "0", "]", ".", "size", "(", ")", "\n", "output_channels", ",", "output_height", ",", "output_width", "=", "output", "[", "0", "]", ".", "size", "(", ")", "\n", "\n", "kernel_ops", "=", "self", ".", "kernel_size", "[", "0", "]", "*", "self", ".", "kernel_size", "[", "1", "]", "*", "(", "self", ".", "in_channels", "/", "self", ".", "groups", ")", "*", "(", "2", "if", "multiply_adds", "else", "1", ")", "\n", "bias_ops", "=", "1", "if", "self", ".", "bias", "is", "not", "None", "else", "0", "\n", "\n", "params", "=", "output_channels", "*", "(", "kernel_ops", "+", "bias_ops", ")", "\n", "flops", "=", "batch_size", "*", "params", "*", "output_height", "*", "output_width", "\n", "\n", "list_conv", ".", "append", "(", "flops", ")", "\n", "\n", "\n", "", "list_linear", "=", "[", "]", "\n", "def", "linear_hook", "(", "self", ",", "input", ",", "output", ")", ":", "\n", "        ", "batch_size", "=", "input", "[", "0", "]", ".", "size", "(", "0", ")", "if", "input", "[", "0", "]", ".", "dim", "(", ")", "==", "2", "else", "1", "\n", "\n", "weight_ops", "=", "self", ".", "weight", ".", "nelement", "(", ")", "*", "(", "2", "if", "multiply_adds", "else", "1", ")", "\n", "bias_ops", "=", "self", ".", "bias", ".", "nelement", "(", ")", "\n", "\n", "flops", "=", "batch_size", "*", "(", "weight_ops", "+", "bias_ops", ")", "\n", "list_linear", ".", "append", "(", "flops", ")", "\n", "\n", "", "list_bn", "=", "[", "]", "\n", "def", "bn_hook", "(", "self", ",", "input", ",", "output", ")", ":", "\n", "        ", "list_bn", ".", "append", "(", "input", "[", "0", "]", ".", "nelement", "(", ")", ")", "\n", "\n", "", "list_relu", "=", "[", "]", "\n", "def", "relu_hook", "(", "self", ",", "input", ",", "output", ")", ":", "\n", "        ", "list_relu", ".", "append", "(", "input", "[", "0", "]", ".", "nelement", "(", ")", ")", "\n", "\n", "", "list_pooling", "=", "[", "]", "\n", "def", "pooling_hook", "(", "self", ",", "input", ",", "output", ")", ":", "\n", "        ", "batch_size", ",", "input_channels", ",", "input_height", ",", "input_width", "=", "input", "[", "0", "]", ".", "size", "(", ")", "\n", "output_channels", ",", "output_height", ",", "output_width", "=", "output", "[", "0", "]", ".", "size", "(", ")", "\n", "\n", "kernel_ops", "=", "self", ".", "kernel_size", "*", "self", ".", "kernel_size", "\n", "bias_ops", "=", "0", "\n", "params", "=", "output_channels", "*", "(", "kernel_ops", "+", "bias_ops", ")", "\n", "flops", "=", "batch_size", "*", "params", "*", "output_height", "*", "output_width", "\n", "\n", "list_pooling", ".", "append", "(", "flops", ")", "\n", "\n", "", "def", "foo", "(", "net", ")", ":", "\n", "        ", "childrens", "=", "list", "(", "net", ".", "children", "(", ")", ")", "\n", "if", "not", "childrens", ":", "\n", "            ", "if", "isinstance", "(", "net", ",", "torch", ".", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "net", ".", "register_forward_hook", "(", "conv_hook", ")", "\n", "", "if", "isinstance", "(", "net", ",", "torch", ".", "nn", ".", "Linear", ")", ":", "\n", "                ", "net", ".", "register_forward_hook", "(", "linear_hook", ")", "\n", "", "if", "isinstance", "(", "net", ",", "torch", ".", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "net", ".", "register_forward_hook", "(", "bn_hook", ")", "\n", "", "if", "isinstance", "(", "net", ",", "torch", ".", "nn", ".", "ReLU", ")", ":", "\n", "                ", "net", ".", "register_forward_hook", "(", "relu_hook", ")", "\n", "", "if", "isinstance", "(", "net", ",", "torch", ".", "nn", ".", "MaxPool2d", ")", "or", "isinstance", "(", "net", ",", "torch", ".", "nn", ".", "AvgPool2d", ")", ":", "\n", "                ", "net", ".", "register_forward_hook", "(", "pooling_hook", ")", "\n", "", "return", "\n", "", "for", "c", "in", "childrens", ":", "\n", "            ", "foo", "(", "c", ")", "\n", "\n", "", "", "foo", "(", "one_shot_model", ")", "\n", "input", "=", "Variable", "(", "torch", ".", "rand", "(", "3", ",", "224", ",", "224", ")", ".", "unsqueeze", "(", "0", ")", ",", "requires_grad", "=", "True", ")", ".", "cuda", "(", ")", "\n", "out", "=", "one_shot_model", "(", "input", ")", "\n", "\n", "total_flops", "=", "(", "sum", "(", "list_conv", ")", "+", "sum", "(", "list_linear", ")", "+", "sum", "(", "list_bn", ")", "+", "sum", "(", "list_relu", ")", "+", "sum", "(", "list_pooling", ")", ")", "\n", "M_flops", "=", "total_flops", "/", "1e6", "\n", "#print('  + Number of FLOPs: %.2fM' % (M_flops))", "\n", "\n", "return", "M_flops", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.Imagenet.run_manager.RunConfig.__init__": [[23, 54], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "n_epochs", ",", "init_lr", ",", "lr_schedule_type", ",", "lr_schedule_param", ",", "\n", "dataset", ",", "train_batch_size", ",", "test_batch_size", ",", "\n", "opt_type", ",", "opt_param", ",", "weight_decay", ",", "label_smoothing", ",", "no_decay_keys", ",", "\n", "model_init", ",", "init_div_groups", ",", "validation_frequency", ",", "print_frequency", ",", "local_rank", ",", "world_size", ",", "sync_bn", ",", "\n", "warm_epoch", ")", ":", "\n", "        ", "self", ".", "n_epochs", "=", "n_epochs", "\n", "self", ".", "init_lr", "=", "init_lr", "\n", "self", ".", "lr_schedule_type", "=", "lr_schedule_type", "\n", "self", ".", "lr_schedule_param", "=", "lr_schedule_param", "\n", "self", ".", "warm_epoch", "=", "warm_epoch", "\n", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "train_batch_size", "=", "train_batch_size", "\n", "self", ".", "test_batch_size", "=", "test_batch_size", "\n", "\n", "self", ".", "opt_type", "=", "opt_type", "\n", "self", ".", "opt_param", "=", "opt_param", "\n", "self", ".", "weight_decay", "=", "weight_decay", "\n", "self", ".", "label_smoothing", "=", "label_smoothing", "\n", "self", ".", "no_decay_keys", "=", "no_decay_keys", "\n", "\n", "self", ".", "model_init", "=", "model_init", "\n", "self", ".", "init_div_groups", "=", "init_div_groups", "\n", "self", ".", "validation_frequency", "=", "validation_frequency", "\n", "self", ".", "print_frequency", "=", "print_frequency", "\n", "\n", "self", ".", "_data_provider", "=", "None", "\n", "self", ".", "_train_iter", ",", "self", ".", "_valid_iter", ",", "self", ".", "_test_iter", "=", "None", ",", "None", ",", "None", "\n", "self", ".", "local_rank", "=", "local_rank", "\n", "self", ".", "world_size", "=", "world_size", "\n", "self", ".", "sync_bn", "=", "sync_bn", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.Imagenet.run_manager.RunConfig.config": [[55, 62], ["key.startswith"], "methods", ["None"], ["", "@", "property", "\n", "def", "config", "(", "self", ")", ":", "\n", "        ", "config", "=", "{", "}", "\n", "for", "key", "in", "self", ".", "__dict__", ":", "\n", "            ", "if", "not", "key", ".", "startswith", "(", "'_'", ")", ":", "\n", "                ", "config", "[", "key", "]", "=", "self", ".", "__dict__", "[", "key", "]", "\n", "", "", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.Imagenet.run_manager.RunConfig.copy": [[63, 65], ["run_manager.RunConfig"], "methods", ["None"], ["", "def", "copy", "(", "self", ")", ":", "\n", "        ", "return", "RunConfig", "(", "**", "self", ".", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.Imagenet.run_manager.RunConfig._calc_learning_rate": [[68, 81], ["ValueError", "math.cos"], "methods", ["None"], ["def", "_calc_learning_rate", "(", "self", ",", "epoch", ",", "batch", "=", "0", ",", "nBatch", "=", "None", ",", "warm_epoch", "=", "5", ")", ":", "\n", "        ", "if", "self", ".", "lr_schedule_type", "==", "'cosine'", ":", "\n", "            ", "T_total", "=", "self", ".", "n_epochs", "*", "nBatch", "\n", "T_cur", "=", "epoch", "*", "nBatch", "+", "batch", "\n", "T_warm", "=", "warm_epoch", "*", "nBatch", "\n", "if", "T_cur", "<", "T_warm", ":", "\n", "                ", "lr", "=", "T_cur", "/", "T_warm", "*", "self", ".", "init_lr", "\n", "", "else", ":", "\n", "                ", "lr", "=", "0.5", "*", "self", ".", "init_lr", "*", "(", "1", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "(", "T_cur", "-", "T_warm", ")", "/", "(", "T_total", "-", "T_warm", ")", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'do not support: %s'", "%", "self", ".", "lr_schedule_type", ")", "\n", "", "return", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.Imagenet.run_manager.RunConfig.adjust_learning_rate": [[82, 89], ["run_manager.RunConfig._calc_learning_rate"], "methods", ["home.repos.pwc.inspect_result.mac-automl_itpruner.Cifar.run_manager.RunConfig._calc_learning_rate"], ["", "def", "adjust_learning_rate", "(", "self", ",", "optimizer", ",", "epoch", ",", "batch", "=", "0", ",", "nBatch", "=", "None", ")", ":", "\n", "        ", "\"\"\" adjust learning of a given optimizer and return the new learning rate \"\"\"", "\n", "new_lr", "=", "self", ".", "_calc_learning_rate", "(", "\n", "epoch", ",", "batch", ",", "nBatch", ",", "self", ".", "warm_epoch", ")", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "new_lr", "\n", "", "return", "new_lr", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.Imagenet.run_manager.RunConfig.data_config": [[92, 95], ["None"], "methods", ["None"], ["@", "property", "\n", "def", "data_config", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.Imagenet.run_manager.RunConfig.data_provider": [[106, 109], ["None"], "methods", ["None"], ["", "@", "data_provider", ".", "setter", "\n", "def", "data_provider", "(", "self", ",", "val", ")", ":", "\n", "        ", "self", ".", "_data_provider", "=", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.Imagenet.run_manager.RunConfig.train_loader": [[110, 113], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "train_loader", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "data_provider", ".", "train", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.Imagenet.run_manager.RunConfig.valid_loader": [[114, 117], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "valid_loader", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "data_provider", ".", "valid", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.Imagenet.run_manager.RunConfig.test_loader": [[118, 121], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "test_loader", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "data_provider", ".", "test", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.Imagenet.run_manager.RunConfig.build_optimizer": [[124, 141], ["opt_param.get", "opt_param.get", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD"], "methods", ["None"], ["def", "build_optimizer", "(", "self", ",", "net_params", ")", ":", "\n", "        ", "if", "self", ".", "opt_type", "==", "'sgd'", ":", "\n", "            ", "opt_param", "=", "{", "}", "if", "self", ".", "opt_param", "is", "None", "else", "self", ".", "opt_param", "\n", "momentum", ",", "nesterov", "=", "opt_param", ".", "get", "(", "\n", "'momentum'", ",", "0.9", ")", ",", "opt_param", ".", "get", "(", "'nesterov'", ",", "True", ")", "\n", "if", "self", ".", "no_decay_keys", ":", "\n", "                ", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "[", "\n", "{", "'params'", ":", "net_params", "[", "0", "]", ",", "\n", "'weight_decay'", ":", "self", ".", "weight_decay", "}", ",", "\n", "{", "'params'", ":", "net_params", "[", "1", "]", ",", "'weight_decay'", ":", "0", "}", ",", "\n", "]", ",", "lr", "=", "self", ".", "init_lr", ",", "momentum", "=", "momentum", ",", "nesterov", "=", "nesterov", ")", "\n", "", "else", ":", "\n", "                ", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "net_params", ",", "self", ".", "init_lr", ",", "momentum", "=", "momentum", ",", "nesterov", "=", "nesterov", ",", "\n", "weight_decay", "=", "self", ".", "weight_decay", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "return", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.Imagenet.run_manager.RunManager.__init__": [[144, 185], ["torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "run_manager.RunManager.net.init_model", "run_manager.RunManager.net.cuda", "print", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "apex.parallel.DistributedDataParallel", "run_manager.RunManager.print_net_info", "apex.parallel.convert_syncbn_model", "run_manager.RunManager.run_config.no_decay_keys.split", "run_manager.RunManager.run_config.build_optimizer", "run_manager.RunManager.run_config.build_optimizer", "float", "run_manager.RunManager.net.weight_parameters", "run_manager.RunManager.net.get_parameters", "run_manager.RunManager.net.get_parameters"], "methods", ["home.repos.pwc.inspect_result.mac-automl_itpruner.nets.base_models.MyNetwork.init_model", "home.repos.pwc.inspect_result.mac-automl_itpruner.Cifar.run_manager.RunManager.print_net_info", "home.repos.pwc.inspect_result.mac-automl_itpruner.Cifar.run_manager.RunConfig.build_optimizer", "home.repos.pwc.inspect_result.mac-automl_itpruner.Cifar.run_manager.RunConfig.build_optimizer", "home.repos.pwc.inspect_result.mac-automl_itpruner.nets.base_models.MyNetwork.weight_parameters", "home.repos.pwc.inspect_result.mac-automl_itpruner.nets.base_models.MyNetwork.get_parameters", "home.repos.pwc.inspect_result.mac-automl_itpruner.nets.base_models.MyNetwork.get_parameters"], ["    ", "def", "__init__", "(", "self", ",", "path", ",", "net", ",", "run_config", ":", "RunConfig", ",", "out_log", "=", "True", ")", ":", "\n", "        ", "self", ".", "path", "=", "path", "\n", "self", ".", "net", "=", "net", "\n", "self", ".", "run_config", "=", "run_config", "\n", "self", ".", "out_log", "=", "out_log", "\n", "\n", "self", ".", "_logs_path", ",", "self", ".", "_save_path", "=", "None", ",", "None", "\n", "self", ".", "best_acc", "=", "0", "\n", "self", ".", "start_epoch", "=", "0", "\n", "gpu", "=", "self", ".", "run_config", ".", "local_rank", "\n", "torch", ".", "cuda", ".", "set_device", "(", "gpu", ")", "\n", "\n", "# initialize model (default)", "\n", "self", ".", "net", ".", "init_model", "(", "run_config", ".", "model_init", ",", "run_config", ".", "init_div_groups", ")", "\n", "\n", "# net info", "\n", "self", ".", "net", "=", "self", ".", "net", ".", "cuda", "(", ")", "\n", "if", "run_config", ".", "local_rank", "==", "0", ":", "\n", "            ", "self", ".", "print_net_info", "(", ")", "\n", "\n", "", "if", "self", ".", "run_config", ".", "sync_bn", ":", "\n", "            ", "self", ".", "net", "=", "apex", ".", "parallel", ".", "convert_syncbn_model", "(", "self", ".", "net", ")", "\n", "", "print", "(", "'local_rank: %d'", "%", "self", ".", "run_config", ".", "local_rank", ")", "\n", "\n", "self", ".", "run_config", ".", "init_lr", "=", "self", ".", "run_config", ".", "init_lr", "*", "float", "(", "\n", "self", ".", "run_config", ".", "train_batch_size", "*", "self", ".", "run_config", ".", "world_size", ")", "/", "256.", "\n", "self", ".", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "if", "self", ".", "run_config", ".", "no_decay_keys", ":", "\n", "            ", "keys", "=", "self", ".", "run_config", ".", "no_decay_keys", ".", "split", "(", "'#'", ")", "\n", "self", ".", "optimizer", "=", "self", ".", "run_config", ".", "build_optimizer", "(", "[", "\n", "# parameters with weight decay", "\n", "self", ".", "net", ".", "get_parameters", "(", "keys", ",", "mode", "=", "'exclude'", ")", ",", "\n", "# parameters without weight decay", "\n", "self", ".", "net", ".", "get_parameters", "(", "keys", ",", "mode", "=", "'include'", ")", ",", "\n", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "optimizer", "=", "self", ".", "run_config", ".", "build_optimizer", "(", "\n", "self", ".", "net", ".", "weight_parameters", "(", ")", ")", "\n", "# self.net, self.optimizer = amp.initialize(self.net, self.optimizer, opt_level='O1')", "\n", "", "self", ".", "net", "=", "DDP", "(", "self", ".", "net", ",", "delay_allreduce", "=", "True", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.Imagenet.run_manager.RunManager.save_path": [[188, 195], ["os.path.join", "os.makedirs"], "methods", ["None"], ["@", "property", "\n", "def", "save_path", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_save_path", "is", "None", ":", "\n", "            ", "save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "path", ",", "'checkpoint'", ")", "\n", "os", ".", "makedirs", "(", "save_path", ",", "exist_ok", "=", "True", ")", "\n", "self", ".", "_save_path", "=", "save_path", "\n", "", "return", "self", ".", "_save_path", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.Imagenet.run_manager.RunManager.logs_path": [[196, 203], ["os.path.join", "os.makedirs"], "methods", ["None"], ["", "@", "property", "\n", "def", "logs_path", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_logs_path", "is", "None", ":", "\n", "            ", "logs_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "path", ",", "'logs'", ")", "\n", "os", ".", "makedirs", "(", "logs_path", ",", "exist_ok", "=", "True", ")", "\n", "self", ".", "_logs_path", "=", "logs_path", "\n", "", "return", "self", ".", "_logs_path", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.Imagenet.run_manager.RunManager.reset_model": [[206, 244], ["run_manager.RunManager.net.init_model", "run_manager.RunManager.net.cuda", "print", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "apex.parallel.DistributedDataParallel", "utils.get_unpruned_weights", "run_manager.RunManager.print_net_info", "apex.parallel.convert_syncbn_model", "run_manager.RunManager.run_config.no_decay_keys.split", "run_manager.RunManager.run_config.build_optimizer", "run_manager.RunManager.run_config.build_optimizer", "print", "print", "run_manager.RunManager.net.weight_parameters", "run_manager.RunManager.net.get_parameters", "run_manager.RunManager.net.get_parameters"], "methods", ["home.repos.pwc.inspect_result.mac-automl_itpruner.nets.base_models.MyNetwork.init_model", "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.pytorch_utils.get_unpruned_weights", "home.repos.pwc.inspect_result.mac-automl_itpruner.Cifar.run_manager.RunManager.print_net_info", "home.repos.pwc.inspect_result.mac-automl_itpruner.Cifar.run_manager.RunConfig.build_optimizer", "home.repos.pwc.inspect_result.mac-automl_itpruner.Cifar.run_manager.RunConfig.build_optimizer", "home.repos.pwc.inspect_result.mac-automl_itpruner.nets.base_models.MyNetwork.weight_parameters", "home.repos.pwc.inspect_result.mac-automl_itpruner.nets.base_models.MyNetwork.get_parameters", "home.repos.pwc.inspect_result.mac-automl_itpruner.nets.base_models.MyNetwork.get_parameters"], ["def", "reset_model", "(", "self", ",", "model", ",", "model_origin", "=", "None", ")", ":", "\n", "        ", "self", ".", "net", "=", "model", "\n", "self", ".", "net", ".", "init_model", "(", "self", ".", "run_config", ".", "model_init", ",", "\n", "self", ".", "run_config", ".", "init_div_groups", ")", "\n", "if", "model_origin", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "run_config", ".", "local_rank", "==", "0", ":", "\n", "                ", "print", "(", "'-'", "*", "30", "+", "' start pruning '", "+", "'-'", "*", "30", ")", "\n", "", "get_unpruned_weights", "(", "self", ".", "net", ",", "model_origin", ")", "\n", "if", "self", ".", "run_config", ".", "local_rank", "==", "0", ":", "\n", "                ", "print", "(", "'-'", "*", "30", "+", "' end pruning '", "+", "'-'", "*", "30", ")", "\n", "# net info", "\n", "", "", "self", ".", "net", "=", "self", ".", "net", ".", "cuda", "(", ")", "\n", "if", "self", ".", "run_config", ".", "local_rank", "==", "0", ":", "\n", "            ", "self", ".", "print_net_info", "(", ")", "\n", "\n", "", "if", "self", ".", "run_config", ".", "sync_bn", ":", "\n", "            ", "self", ".", "net", "=", "apex", ".", "parallel", ".", "convert_syncbn_model", "(", "self", ".", "net", ")", "\n", "", "print", "(", "'local_rank: %d'", "%", "self", ".", "run_config", ".", "local_rank", ")", "\n", "\n", "self", ".", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "if", "self", ".", "run_config", ".", "no_decay_keys", ":", "\n", "            ", "keys", "=", "self", ".", "run_config", ".", "no_decay_keys", ".", "split", "(", "'#'", ")", "\n", "self", ".", "optimizer", "=", "self", ".", "run_config", ".", "build_optimizer", "(", "[", "\n", "# parameters with weight decay", "\n", "self", ".", "net", ".", "get_parameters", "(", "keys", ",", "mode", "=", "'exclude'", ")", ",", "\n", "# parameters without weight decay", "\n", "self", ".", "net", ".", "get_parameters", "(", "keys", ",", "mode", "=", "'include'", ")", ",", "\n", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "optimizer", "=", "self", ".", "run_config", ".", "build_optimizer", "(", "\n", "self", ".", "net", ".", "weight_parameters", "(", ")", ")", "\n", "# model, self.optimizer = amp.initialize(model, self.optimizer,", "\n", "#                                        opt_level='O2',", "\n", "#                                        keep_batchnorm_fp32=True,", "\n", "#                                        loss_scale=1.0", "\n", "#                                        )", "\n", "", "self", ".", "net", "=", "DDP", "(", "self", ".", "net", ",", "delay_allreduce", "=", "True", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "# if model_origin!=None:", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.Imagenet.run_manager.RunManager.net_flops": [[252, 260], ["torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "list", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torchprofile.profile_macs", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "net_flops", "(", "self", ")", ":", "\n", "        ", "data_shape", "=", "[", "1", "]", "+", "list", "(", "self", ".", "run_config", ".", "data_provider", ".", "data_shape", ")", "\n", "\n", "net", "=", "self", ".", "net", "\n", "input_var", "=", "torch", ".", "zeros", "(", "data_shape", ")", ".", "cuda", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "flops", "=", "profile_macs", "(", "net", ",", "input_var", ")", "\n", "", "return", "flops", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.Imagenet.run_manager.RunManager.print_net_info": [[261, 283], ["utils.count_parameters", "run_manager.RunManager.net_flops", "str", "print", "print", "print", "open", "fout.write", "str", "json.dumps"], "methods", ["home.repos.pwc.inspect_result.mac-automl_itpruner.utils.pytorch_utils.count_parameters", "home.repos.pwc.inspect_result.mac-automl_itpruner.Cifar.run_manager.RunManager.net_flops"], ["", "def", "print_net_info", "(", "self", ")", ":", "\n", "# parameters", "\n", "        ", "total_params", "=", "count_parameters", "(", "self", ".", "net", ")", "\n", "if", "self", ".", "out_log", ":", "\n", "            ", "print", "(", "'Total training params: %.2fM'", "%", "(", "total_params", "/", "1e6", ")", ")", "\n", "", "net_info", "=", "{", "\n", "'param'", ":", "'%.2fM'", "%", "(", "total_params", "/", "1e6", ")", ",", "\n", "}", "\n", "\n", "# flops", "\n", "flops", "=", "self", ".", "net_flops", "(", ")", "\n", "if", "self", ".", "out_log", ":", "\n", "            ", "print", "(", "'Total FLOPs: %.1fM'", "%", "(", "flops", "/", "1e6", ")", ")", "\n", "", "net_info", "[", "'flops'", "]", "=", "'%.1fM'", "%", "(", "flops", "/", "1e6", ")", "\n", "\n", "# config", "\n", "if", "self", ".", "out_log", ":", "\n", "            ", "print", "(", "'Net config: '", "+", "str", "(", "self", ".", "net", ".", "config", ")", ")", "\n", "", "net_info", "[", "'config'", "]", "=", "str", "(", "self", ".", "net", ".", "config", ")", "\n", "\n", "with", "open", "(", "'%s/net_info.txt'", "%", "self", ".", "logs_path", ",", "'w'", ")", "as", "fout", ":", "\n", "            ", "fout", ".", "write", "(", "json", ".", "dumps", "(", "net_info", ",", "indent", "=", "4", ")", "+", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.Imagenet.run_manager.RunManager.save_model": [[286, 304], ["os.path.join", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "open", "fout.write", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "run_manager.RunManager.net.module.state_dict"], "methods", ["home.repos.pwc.inspect_result.mac-automl_itpruner.utils.utils.WarmUpCosineLRScheduler.state_dict"], ["def", "save_model", "(", "self", ",", "checkpoint", "=", "None", ",", "is_best", "=", "False", ",", "model_name", "=", "None", ")", ":", "\n", "        ", "if", "checkpoint", "is", "None", ":", "\n", "            ", "checkpoint", "=", "{", "'state_dict'", ":", "self", ".", "net", ".", "module", ".", "state_dict", "(", ")", "}", "\n", "\n", "", "if", "model_name", "is", "None", ":", "\n", "            ", "model_name", "=", "'checkpoint.pth.tar'", "\n", "\n", "# add `dataset` info to the checkpoint", "\n", "", "checkpoint", "[", "'dataset'", "]", "=", "self", ".", "run_config", ".", "dataset", "\n", "latest_fname", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_path", ",", "'latest.txt'", ")", "\n", "model_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_path", ",", "model_name", ")", "\n", "with", "open", "(", "latest_fname", ",", "'w'", ")", "as", "fout", ":", "\n", "            ", "fout", ".", "write", "(", "model_path", "+", "'\\n'", ")", "\n", "", "torch", ".", "save", "(", "checkpoint", ",", "model_path", ")", "\n", "\n", "if", "is_best", ":", "\n", "            ", "best_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_path", ",", "'model_best.pth.tar'", ")", "\n", "torch", ".", "save", "(", "{", "'state_dict'", ":", "checkpoint", "[", "'state_dict'", "]", "}", ",", "best_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.Imagenet.run_manager.RunManager.load_model": [[305, 345], ["os.path.join", "os.path.exists", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "run_manager.RunManager.net.module.load_state_dict", "int", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "numpy.random.seed", "open", "fin.readline", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "time.time", "run_manager.RunManager.optimizer.load_state_dict", "print", "os.path.exists", "open", "fout.write", "print"], "methods", ["home.repos.pwc.inspect_result.mac-automl_itpruner.utils.utils.WarmUpCosineLRScheduler.load_state_dict", "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.utils.WarmUpCosineLRScheduler.load_state_dict"], ["", "", "def", "load_model", "(", "self", ",", "model_fname", "=", "None", ")", ":", "\n", "        ", "latest_fname", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_path", ",", "'latest.txt'", ")", "\n", "if", "model_fname", "is", "None", "and", "os", ".", "path", ".", "exists", "(", "latest_fname", ")", ":", "\n", "            ", "with", "open", "(", "latest_fname", ",", "'r'", ")", "as", "fin", ":", "\n", "                ", "model_fname", "=", "fin", ".", "readline", "(", ")", "\n", "if", "model_fname", "[", "-", "1", "]", "==", "'\\n'", ":", "\n", "                    ", "model_fname", "=", "model_fname", "[", ":", "-", "1", "]", "\n", "# noinspection PyBroadException", "\n", "", "", "", "try", ":", "\n", "            ", "if", "model_fname", "is", "None", "or", "not", "os", ".", "path", ".", "exists", "(", "model_fname", ")", ":", "\n", "                ", "model_fname", "=", "'%s/checkpoint.pth.tar'", "%", "self", ".", "save_path", "\n", "with", "open", "(", "latest_fname", ",", "'w'", ")", "as", "fout", ":", "\n", "                    ", "fout", ".", "write", "(", "model_fname", "+", "'\\n'", ")", "\n", "", "", "if", "self", ".", "out_log", ":", "\n", "                ", "print", "(", "\"=> loading checkpoint '{}'\"", ".", "format", "(", "model_fname", ")", ")", "\n", "\n", "", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                ", "checkpoint", "=", "torch", ".", "load", "(", "model_fname", ")", "\n", "", "else", ":", "\n", "                ", "checkpoint", "=", "torch", ".", "load", "(", "model_fname", ",", "map_location", "=", "'cpu'", ")", "\n", "\n", "", "self", ".", "net", ".", "module", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "# set new manual seed", "\n", "new_manual_seed", "=", "int", "(", "time", ".", "time", "(", ")", ")", "\n", "torch", ".", "manual_seed", "(", "new_manual_seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "new_manual_seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "new_manual_seed", ")", "\n", "\n", "if", "'epoch'", "in", "checkpoint", ":", "\n", "                ", "self", ".", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "+", "1", "\n", "", "if", "'best_acc'", "in", "checkpoint", ":", "\n", "                ", "self", ".", "best_acc", "=", "checkpoint", "[", "'best_acc'", "]", "\n", "", "if", "'optimizer'", "in", "checkpoint", ":", "\n", "                ", "self", ".", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "\n", "", "if", "self", ".", "out_log", ":", "\n", "                ", "print", "(", "\"=> loaded checkpoint '{}'\"", ".", "format", "(", "model_fname", ")", ")", "\n", "", "", "except", "Exception", ":", "\n", "            ", "if", "self", ".", "out_log", ":", "\n", "                ", "print", "(", "'fail to load checkpoint from %s'", "%", "self", ".", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.Imagenet.run_manager.RunManager.save_config": [[346, 358], ["os.makedirs", "os.path.join", "json.dump", "os.path.join", "json.dump", "open", "print", "open", "print"], "methods", ["None"], ["", "", "", "def", "save_config", "(", "self", ",", "print_info", "=", "True", ")", ":", "\n", "        ", "\"\"\" dump run_config and net_config to the model_folder \"\"\"", "\n", "os", ".", "makedirs", "(", "self", ".", "path", ",", "exist_ok", "=", "True", ")", "\n", "net_save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "path", ",", "'net.config'", ")", "\n", "json", ".", "dump", "(", "self", ".", "net", ".", "module", ".", "config", ",", "open", "(", "net_save_path", ",", "'w'", ")", ",", "indent", "=", "4", ")", "\n", "if", "print_info", ":", "\n", "            ", "print", "(", "'Network configs dump to %s'", "%", "net_save_path", ")", "\n", "\n", "", "run_save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "path", ",", "'run.config'", ")", "\n", "json", ".", "dump", "(", "self", ".", "run_config", ".", "config", ",", "open", "(", "run_save_path", ",", "'w'", ")", ",", "indent", "=", "4", ")", "\n", "if", "print_info", ":", "\n", "            ", "print", "(", "'Run configs dump to %s'", "%", "run_save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.Imagenet.run_manager.RunManager.write_log": [[361, 381], ["print", "open", "fout.write", "fout.flush", "open", "fout.write", "fout.flush", "open", "fout.write", "fout.flush", "os.path.join", "os.path.join", "fout.write", "os.path.join", "fout.write"], "methods", ["None"], ["def", "write_log", "(", "self", ",", "log_str", ",", "prefix", ",", "should_print", "=", "True", ")", ":", "\n", "        ", "\"\"\" prefix: valid, train, test \"\"\"", "\n", "if", "prefix", "in", "[", "'valid'", ",", "'test'", "]", ":", "\n", "            ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "logs_path", ",", "'valid_console.txt'", ")", ",", "'a'", ")", "as", "fout", ":", "\n", "                ", "fout", ".", "write", "(", "log_str", "+", "'\\n'", ")", "\n", "fout", ".", "flush", "(", ")", "\n", "", "", "if", "prefix", "in", "[", "'valid'", ",", "'test'", ",", "'train'", "]", ":", "\n", "            ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "logs_path", ",", "'train_console.txt'", ")", ",", "'a'", ")", "as", "fout", ":", "\n", "                ", "if", "prefix", "in", "[", "'valid'", ",", "'test'", "]", ":", "\n", "                    ", "fout", ".", "write", "(", "'='", "*", "10", ")", "\n", "", "fout", ".", "write", "(", "log_str", "+", "'\\n'", ")", "\n", "fout", ".", "flush", "(", ")", "\n", "", "", "if", "prefix", "in", "[", "'prune'", "]", ":", "\n", "            ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "logs_path", ",", "'prune_console.txt'", ")", ",", "'a'", ")", "as", "fout", ":", "\n", "                ", "if", "prefix", "in", "[", "'valid'", ",", "'test'", "]", ":", "\n", "                    ", "fout", ".", "write", "(", "'='", "*", "10", ")", "\n", "", "fout", ".", "write", "(", "log_str", "+", "'\\n'", ")", "\n", "fout", ".", "flush", "(", ")", "\n", "", "", "if", "should_print", ":", "\n", "            ", "print", "(", "log_str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.Imagenet.run_manager.RunManager.validate": [[382, 442], ["utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "time.time", "run_manager.RunManager.run_config.valid_loader.reset", "run_manager.RunManager.run_config.test_loader.reset", "net.train", "net.eval", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "net", "run_manager.RunManager.criterion", "utils.accuracy", "run_manager.RunManager.reduce_tensor", "run_manager.RunManager.reduce_tensor", "run_manager.RunManager.reduce_tensor", "utils.AverageMeter.update", "utils.AverageMeter.update", "utils.AverageMeter.update", "utils.AverageMeter.update", "time.time", "data[].cuda", "data[].cuda", "labels.long", "images.size", "images.size", "images.size", "print", "time.time", "len", "len"], "methods", ["home.repos.pwc.inspect_result.mac-automl_itpruner.utils.utils.AverageMeter.reset", "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.utils.AverageMeter.reset", "home.repos.pwc.inspect_result.mac-automl_itpruner.learners.basic_learner.BasicLearner.train", "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.utils.accuracy", "home.repos.pwc.inspect_result.mac-automl_itpruner.Cifar.run_manager.RunManager.reduce_tensor", "home.repos.pwc.inspect_result.mac-automl_itpruner.Cifar.run_manager.RunManager.reduce_tensor", "home.repos.pwc.inspect_result.mac-automl_itpruner.Cifar.run_manager.RunManager.reduce_tensor", "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.utils.AverageMeter.update"], ["", "", "def", "validate", "(", "self", ",", "is_test", "=", "True", ",", "net", "=", "None", ",", "use_train_mode", "=", "False", ",", "return_top5", "=", "False", ")", ":", "\n", "        ", "if", "is_test", ":", "\n", "            ", "data_loader", "=", "self", ".", "run_config", ".", "test_loader", "\n", "", "else", ":", "\n", "            ", "data_loader", "=", "self", ".", "run_config", ".", "valid_loader", "\n", "\n", "", "if", "net", "is", "None", ":", "\n", "            ", "net", "=", "self", ".", "net", "\n", "\n", "", "if", "use_train_mode", ":", "\n", "            ", "net", ".", "train", "(", ")", "\n", "", "else", ":", "\n", "            ", "net", ".", "eval", "(", ")", "\n", "", "batch_time", "=", "AverageMeter", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "top1", "=", "AverageMeter", "(", ")", "\n", "top5", "=", "AverageMeter", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "# noinspection PyUnresolvedReferences", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "i", ",", "data", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "                ", "images", ",", "labels", "=", "data", "[", "0", "]", ".", "cuda", "(", "non_blocking", "=", "True", ")", ",", "data", "[", "1", "]", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "# images, labels = data[0].cuda(), data[1].cuda()", "\n", "# compute output", "\n", "output", "=", "net", "(", "images", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "output", ",", "labels", ")", "\n", "# measure accuracy and record loss", "\n", "acc1", ",", "acc5", "=", "accuracy", "(", "output", ",", "labels", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "reduced_loss", "=", "self", ".", "reduce_tensor", "(", "loss", ".", "data", ")", "\n", "acc1", "=", "self", ".", "reduce_tensor", "(", "acc1", ")", "\n", "acc5", "=", "self", ".", "reduce_tensor", "(", "acc5", ")", "\n", "losses", ".", "update", "(", "reduced_loss", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "acc1", "[", "0", "]", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "acc5", "[", "0", "]", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "self", ".", "run_config", ".", "print_frequency", "==", "0", "or", "i", "+", "1", "==", "len", "(", "data_loader", ")", ":", "\n", "                    ", "if", "is_test", ":", "\n", "                        ", "prefix", "=", "'Test'", "\n", "", "else", ":", "\n", "                        ", "prefix", "=", "'Valid'", "\n", "", "test_log", "=", "prefix", "+", "': [{0}/{1}]\\t'", "'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "'Loss {loss.val:.4f} ({loss.avg:.4f})\\t'", "'Top-1 acc {top1.val:.3f} ({top1.avg:.3f})'", ".", "format", "(", "i", ",", "len", "(", "data_loader", ")", "-", "1", ",", "\n", "batch_time", "=", "batch_time", ",", "loss", "=", "losses", ",", "top1", "=", "top1", ")", "\n", "if", "return_top5", ":", "\n", "                        ", "test_log", "+=", "'\\tTop-5 acc {top5.val:.3f} ({top5.avg:.3f})'", ".", "format", "(", "\n", "top5", "=", "top5", ")", "\n", "", "print", "(", "test_log", ")", "\n", "", "", "", "self", ".", "run_config", ".", "valid_loader", ".", "reset", "(", ")", "\n", "self", ".", "run_config", ".", "test_loader", ".", "reset", "(", ")", "\n", "if", "return_top5", ":", "\n", "            ", "return", "losses", ".", "avg", ",", "top1", ".", "avg", ",", "top5", ".", "avg", "\n", "", "else", ":", "\n", "            ", "return", "losses", ".", "avg", ",", "top1", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.Imagenet.run_manager.RunManager.train_bn": [[443, 459], ["run_manager.RunManager.net.modules", "run_manager.RunManager.net.train", "range", "print", "isinstance", "enumerate", "print", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "run_manager.RunManager.net", "data[].cuda", "data[].cuda"], "methods", ["home.repos.pwc.inspect_result.mac-automl_itpruner.learners.basic_learner.BasicLearner.train"], ["", "", "def", "train_bn", "(", "self", ",", "epochs", "=", "1", ")", ":", "\n", "        ", "if", "self", ".", "run_config", ".", "local_rank", "==", "0", ":", "\n", "            ", "print", "(", "'training bn'", ")", "\n", "", "for", "m", "in", "self", ".", "net", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "running_mean", "=", "torch", ".", "zeros_like", "(", "m", ".", "running_mean", ")", "\n", "m", ".", "running_var", "=", "torch", ".", "ones_like", "(", "m", ".", "running_var", ")", "\n", "", "", "self", ".", "net", ".", "train", "(", ")", "\n", "for", "i", "in", "range", "(", "epochs", ")", ":", "\n", "            ", "for", "_", ",", "data", "in", "enumerate", "(", "self", ".", "run_config", ".", "train_loader", ")", ":", "\n", "                ", "images", ",", "labels", "=", "data", "[", "0", "]", ".", "cuda", "(", "\n", "non_blocking", "=", "True", ")", ",", "data", "[", "1", "]", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "output", "=", "self", ".", "net", "(", "images", ")", "\n", "del", "output", ",", "images", ",", "labels", "\n", "", "", "if", "self", ".", "run_config", ".", "local_rank", "==", "0", ":", "\n", "            ", "print", "(", "'training bn finished'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.Imagenet.run_manager.RunManager.train_one_epoch": [[460, 507], ["utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "run_manager.RunManager.net.train", "time.time", "enumerate", "utils.AverageMeter.update", "adjust_lr_func", "run_manager.RunManager.net", "utils.accuracy", "run_manager.RunManager.reduce_tensor", "run_manager.RunManager.reduce_tensor", "run_manager.RunManager.reduce_tensor", "utils.AverageMeter.update", "utils.AverageMeter.update", "utils.AverageMeter.update", "run_manager.RunManager.net.zero_grad", "run_manager.RunManager.backward", "run_manager.RunManager.optimizer.step", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "utils.AverageMeter.update", "time.time", "data[].cuda", "data[].cuda", "utils.cross_entropy_with_label_smoothing", "run_manager.RunManager.criterion", "images.size", "images.size", "images.size", "run_manager.RunManager.train.train_log_func", "run_manager.RunManager.write_log", "time.time", "time.time", "len"], "methods", ["home.repos.pwc.inspect_result.mac-automl_itpruner.learners.basic_learner.BasicLearner.train", "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.utils.accuracy", "home.repos.pwc.inspect_result.mac-automl_itpruner.Cifar.run_manager.RunManager.reduce_tensor", "home.repos.pwc.inspect_result.mac-automl_itpruner.Cifar.run_manager.RunManager.reduce_tensor", "home.repos.pwc.inspect_result.mac-automl_itpruner.Cifar.run_manager.RunManager.reduce_tensor", "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.utils.WarmUpCosineLRScheduler.step", "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.pytorch_utils.cross_entropy_with_label_smoothing", "home.repos.pwc.inspect_result.mac-automl_itpruner.Cifar.run_manager.RunManager.write_log"], ["", "", "def", "train_one_epoch", "(", "self", ",", "adjust_lr_func", ",", "train_log_func", ",", "epoch", ")", ":", "\n", "        ", "batch_time", "=", "AverageMeter", "(", ")", "\n", "data_time", "=", "AverageMeter", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "top1", "=", "AverageMeter", "(", ")", "\n", "top5", "=", "AverageMeter", "(", ")", "\n", "\n", "# switch to train mode", "\n", "self", ".", "net", ".", "train", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "self", ".", "run_config", ".", "train_loader", ")", ":", "\n", "            ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "new_lr", "=", "adjust_lr_func", "(", "i", ")", "\n", "images", ",", "labels", "=", "data", "[", "0", "]", ".", "cuda", "(", "\n", "non_blocking", "=", "True", ")", ",", "data", "[", "1", "]", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "# compute output", "\n", "output", "=", "self", ".", "net", "(", "images", ")", "\n", "if", "self", ".", "run_config", ".", "label_smoothing", ">", "0", ":", "\n", "                ", "loss", "=", "cross_entropy_with_label_smoothing", "(", "\n", "output", ",", "labels", ",", "self", ".", "run_config", ".", "label_smoothing", ")", "\n", "", "else", ":", "\n", "                ", "loss", "=", "self", ".", "criterion", "(", "output", ",", "labels", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "", "acc1", ",", "acc5", "=", "accuracy", "(", "output", ",", "labels", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "reduced_loss", "=", "self", ".", "reduce_tensor", "(", "loss", ".", "data", ")", "\n", "acc1", "=", "self", ".", "reduce_tensor", "(", "acc1", ")", "\n", "acc5", "=", "self", ".", "reduce_tensor", "(", "acc5", ")", "\n", "losses", ".", "update", "(", "reduced_loss", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "acc1", "[", "0", "]", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "acc5", "[", "0", "]", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "\n", "# compute gradient and do SGD step", "\n", "self", ".", "net", ".", "zero_grad", "(", ")", "# or self.optimizer.zero_grad()", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "(", "i", "%", "self", ".", "run_config", ".", "print_frequency", "==", "0", "or", "i", "+", "1", "==", "len", "(", "self", ".", "run_config", ".", "train_loader", ")", ")", "and", "self", ".", "run_config", ".", "local_rank", "==", "0", ":", "\n", "                ", "batch_log", "=", "train_log_func", "(", "\n", "i", ",", "batch_time", ",", "data_time", ",", "losses", ",", "top1", ",", "top5", ",", "new_lr", ")", "\n", "self", ".", "write_log", "(", "batch_log", ",", "'train'", ")", "\n", "", "", "return", "top1", ",", "top5", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.Imagenet.run_manager.RunManager.train": [[508, 573], ["range", "time.time", "run_manager.RunManager.train_one_epoch", "int", "run_manager.RunManager.run_config.train_loader.reset", "run_manager.RunManager.run_config.valid_loader.reset", "run_manager.RunManager.run_config.test_loader.reset", "print", "time.time", "print", "run_manager.RunManager.validate", "max", "run_manager.RunManager.save_model", "len", "run_manager.RunManager.run_config.adjust_learning_rate", "run_manager.RunManager.train.train_log_func"], "methods", ["home.repos.pwc.inspect_result.mac-automl_itpruner.Cifar.run_manager.RunManager.train_one_epoch", "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.utils.AverageMeter.reset", "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.utils.AverageMeter.reset", "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.utils.AverageMeter.reset", "home.repos.pwc.inspect_result.mac-automl_itpruner.Cifar.run_manager.RunManager.validate", "home.repos.pwc.inspect_result.mac-automl_itpruner.learners.basic_learner.BasicLearner.save_model", "home.repos.pwc.inspect_result.mac-automl_itpruner.Cifar.run_manager.RunConfig.adjust_learning_rate"], ["", "def", "train", "(", "self", ",", "print_top5", "=", "False", ")", ":", "\n", "        ", "def", "train_log_func", "(", "epoch_", ",", "i", ",", "batch_time", ",", "data_time", ",", "losses", ",", "top1", ",", "top5", ",", "lr", ")", ":", "\n", "            ", "batch_log", "=", "'Train [{0}][{1}/{2}]\\t'", "'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "'Data {data_time.val:.3f} ({data_time.avg:.3f})\\t'", "'Loss {losses.val:.4f} ({losses.avg:.4f})\\t'", "'Top-1 acc {top1.val:.3f} ({top1.avg:.3f})'", ".", "format", "(", "epoch_", "+", "1", ",", "i", ",", "len", "(", "self", ".", "run_config", ".", "train_loader", ")", "-", "1", ",", "\n", "batch_time", "=", "batch_time", ",", "data_time", "=", "data_time", ",", "losses", "=", "losses", ",", "top1", "=", "top1", ")", "\n", "if", "print_top5", ":", "\n", "                ", "batch_log", "+=", "'\\tTop-5 acc {top5.val:.3f} ({top5.avg:.3f})'", ".", "format", "(", "\n", "top5", "=", "top5", ")", "\n", "", "batch_log", "+=", "'\\tlr {lr:.5f}'", ".", "format", "(", "lr", "=", "lr", ")", "\n", "return", "batch_log", "\n", "\n", "", "for", "epoch", "in", "range", "(", "self", ".", "start_epoch", ",", "self", ".", "run_config", ".", "n_epochs", ")", ":", "\n", "            ", "if", "self", ".", "run_config", ".", "local_rank", "==", "0", ":", "\n", "                ", "print", "(", "'\\n'", ",", "'-'", "*", "30", ",", "'Train epoch: %d'", "%", "\n", "(", "epoch", "+", "1", ")", ",", "'-'", "*", "30", ",", "'\\n'", ")", "\n", "\n", "", "end", "=", "time", ".", "time", "(", ")", "\n", "train_top1", ",", "train_top5", "=", "self", ".", "train_one_epoch", "(", "\n", "lambda", "i", ":", "self", ".", "run_config", ".", "adjust_learning_rate", "(", "\n", "self", ".", "optimizer", ",", "epoch", ",", "i", ",", "len", "(", "self", ".", "run_config", ".", "train_loader", ")", ")", ",", "\n", "lambda", "i", ",", "batch_time", ",", "data_time", ",", "losses", ",", "top1", ",", "top5", ",", "new_lr", ":", "\n", "train_log_func", "(", "epoch", ",", "i", ",", "batch_time", ",", "data_time", ",", "\n", "losses", ",", "top1", ",", "top5", ",", "new_lr", ")", ",", "\n", "epoch", "\n", ")", "\n", "time_per_epoch", "=", "time", ".", "time", "(", ")", "-", "end", "\n", "seconds_left", "=", "int", "(", "\n", "(", "self", ".", "run_config", ".", "n_epochs", "-", "epoch", "-", "1", ")", "*", "time_per_epoch", ")", "\n", "if", "self", ".", "run_config", ".", "local_rank", "==", "0", ":", "\n", "                ", "print", "(", "'Time per epoch: %s, Est. complete in: %s'", "%", "(", "\n", "str", "(", "timedelta", "(", "seconds", "=", "time_per_epoch", ")", ")", ",", "\n", "str", "(", "timedelta", "(", "seconds", "=", "seconds_left", ")", ")", ")", ")", "\n", "\n", "", "if", "(", "epoch", "+", "1", ")", "%", "self", ".", "run_config", ".", "validation_frequency", "==", "0", ":", "\n", "                ", "val_loss", ",", "val_acc", ",", "val_acc5", "=", "self", ".", "validate", "(", "\n", "is_test", "=", "False", ",", "return_top5", "=", "True", ")", "\n", "is_best", "=", "val_acc", ">", "self", ".", "best_acc", "\n", "self", ".", "best_acc", "=", "max", "(", "self", ".", "best_acc", ",", "val_acc", ")", "\n", "val_log", "=", "'Valid [{0}/{1}]\\tloss {2:.3f}\\ttop-1 acc {3:.3f} ({4:.3f})'", ".", "format", "(", "epoch", "+", "1", ",", "self", ".", "run_config", ".", "n_epochs", ",", "\n", "val_loss", ",", "val_acc", ",", "self", ".", "best_acc", ")", "\n", "if", "print_top5", ":", "\n", "                    ", "val_log", "+=", "'\\ttop-5 acc {0:.3f}\\tTrain top-1 {top1.avg:.3f}\\ttop-5 {top5.avg:.3f}'", ".", "format", "(", "val_acc5", ",", "top1", "=", "train_top1", ",", "top5", "=", "train_top5", ")", "\n", "", "else", ":", "\n", "                    ", "val_log", "+=", "'\\tTrain top-1 {top1.avg:.3f}'", ".", "format", "(", "\n", "top1", "=", "train_top1", ")", "\n", "", "if", "self", ".", "run_config", ".", "local_rank", "==", "0", ":", "\n", "                    ", "self", ".", "write_log", "(", "val_log", ",", "'valid'", ")", "\n", "", "", "else", ":", "\n", "                ", "is_best", "=", "False", "\n", "", "if", "self", ".", "run_config", ".", "local_rank", "==", "0", ":", "\n", "                ", "self", ".", "save_model", "(", "{", "\n", "'epoch'", ":", "epoch", ",", "\n", "'best_acc'", ":", "self", ".", "best_acc", ",", "\n", "'optimizer'", ":", "self", ".", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'state_dict'", ":", "self", ".", "net", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "is_best", "=", "is_best", ")", "\n", "", "self", ".", "run_config", ".", "train_loader", ".", "reset", "(", ")", "\n", "self", ".", "run_config", ".", "valid_loader", ".", "reset", "(", ")", "\n", "self", ".", "run_config", ".", "test_loader", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.Imagenet.run_manager.RunManager.reduce_tensor": [[574, 579], ["tensor.clone", "torch.all_reduce", "torch.all_reduce", "torch.all_reduce", "torch.all_reduce", "torch.all_reduce"], "methods", ["None"], ["", "", "def", "reduce_tensor", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "rt", "=", "tensor", ".", "clone", "(", ")", "\n", "dist", ".", "all_reduce", "(", "rt", ",", "op", "=", "dist", ".", "ReduceOp", ".", "SUM", ")", "\n", "rt", "/=", "self", ".", "run_config", ".", "world_size", "\n", "return", "rt", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mac-automl_itpruner.Cifar.main.set_loader": [[88, 98], ["ValueError", "data_loader.cifar10_loader_train"], "function", ["home.repos.pwc.inspect_result.mac-automl_itpruner.Cifar.data_loader.cifar10_loader_train"], ["def", "set_loader", "(", "args", ")", ":", "\n", "  ", "sampler", "=", "None", "\n", "\n", "if", "args", ".", "dataset", "==", "'cifar10'", ":", "\n", "    ", "if", "args", ".", "learner", "in", "[", "'vanilla'", "]", ":", "\n", "      ", "loaders", "=", "cifar10_loader_train", "(", "args", ",", "num_workers", "=", "4", ")", "\n", "", "", "else", ":", "\n", "    ", "raise", "ValueError", "(", "\"Unknown dataset\"", ")", "\n", "\n", "", "return", "loaders", ",", "sampler", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.Cifar.main.set_learner": [[100, 105], ["ValueError"], "function", ["None"], ["", "def", "set_learner", "(", "args", ")", ":", "\n", "  ", "if", "args", ".", "learner", "==", "'vanilla'", ":", "\n", "    ", "return", "BasicLearner", "\n", "", "else", ":", "\n", "    ", "raise", "ValueError", "(", "\"Unknown learner\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.Cifar.main.main": [[107, 195], ["parser.parse_args", "str", "torch.device", "torch.device", "torch.device", "torch.device", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "nets.model_helper.ModelHelper", "nets.model_helper.ModelHelper.get_model", "model_helper.get_model.cuda", "main.set_loader", "main.set_learner", "set_learner.", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "utils.dist_utils.init_dist", "print", "print", "numpy.random.seed", "random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "print", "print", "print", "print", "utils.helper.print_args", "logging.info", "utils.dist_utils.broadcast_params", "learner_fn.train", "torch.destroy_process_group", "traceback.print_exc", "utils.helper.generate_job_id", "utils.helper.init_logging", "vars", "learner_fn.evaluate", "torch.destroy_process_group", "os.path.join", "utils.helper.generate_job_id", "utils.helper.init_logging", "utils.helper.init_logging", "learner_fn.finetune", "os.path.join", "os.path.join", "learner_fn.misc", "os.path.dirname", "os.path.dirname"], "function", ["home.repos.pwc.inspect_result.mac-automl_itpruner.nets.model_helper.ModelHelper.get_model", "home.repos.pwc.inspect_result.mac-automl_itpruner.Cifar.main.set_loader", "home.repos.pwc.inspect_result.mac-automl_itpruner.Cifar.main.set_learner", "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.dist_utils.init_dist", "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.helper.print_args", "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.dist_utils.broadcast_params", "home.repos.pwc.inspect_result.mac-automl_itpruner.learners.basic_learner.BasicLearner.train", "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.helper.generate_job_id", "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.helper.init_logging", "home.repos.pwc.inspect_result.mac-automl_itpruner.learners.basic_learner.BasicLearner.evaluate", "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.helper.generate_job_id", "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.helper.init_logging", "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.helper.init_logging", "home.repos.pwc.inspect_result.mac-automl_itpruner.learners.basic_learner.BasicLearner.finetune", "home.repos.pwc.inspect_result.mac-automl_itpruner.learners.basic_learner.BasicLearner.misc"], ["", "", "def", "main", "(", ")", ":", "\n", "##################### Preliminaries ##################", "\n", "  ", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICES\"", "]", "=", "str", "(", "args", ".", "gpu_id", ")", "\n", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "ngpus_per_node", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "args", ".", "distributed", "=", "True", "if", "ngpus_per_node", ">", "1", "else", "False", "\n", "#####################################################", "\n", "\n", "try", ":", "\n", "    ", "if", "args", ".", "distributed", ":", "\n", "      ", "rank", ",", "world_size", "=", "init_dist", "(", "backend", "=", "args", ".", "dist_backend", ",", "master_ip", "=", "args", ".", "dist_url", ",", "port", "=", "args", ".", "port", ")", "\n", "args", ".", "rank", "=", "rank", "\n", "args", ".", "world_size", "=", "world_size", "\n", "print", "(", "\"Distributed Enabled. Rank %d initalized\"", "%", "args", ".", "rank", ")", "\n", "", "else", ":", "\n", "      ", "print", "(", "\"Single model training...\"", ")", "\n", "\n", "", "if", "args", ".", "fix_random", ":", "\n", "# init seed within each thread", "\n", "      ", "manualSeed", "=", "args", ".", "seed", "\n", "np", ".", "random", ".", "seed", "(", "manualSeed", ")", "\n", "random", ".", "seed", "(", "manualSeed", ")", "\n", "torch", ".", "manual_seed", "(", "manualSeed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "manualSeed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "manualSeed", ")", "\n", "# NOTE: literally you should uncomment the following, but slower", "\n", "cudnn", ".", "deterministic", "=", "True", "\n", "cudnn", ".", "benchmark", "=", "False", "\n", "print", "(", "'Warning: You have chosen to seed training. '", "\n", "'This will turn on the CUDNN deterministic setting, '", "\n", "'which can slow down your training considerably! '", "\n", "'You may see unexpected behavior when restarting '", "\n", "'from checkpoints.'", ")", "\n", "", "else", ":", "\n", "      ", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "", "if", "args", ".", "rank", "==", "0", ":", "\n", "# either single GPU or multi GPU with rank = 0", "\n", "      ", "print", "(", "\"+++++++++++++++++++++++++\"", ")", "\n", "print", "(", "\"torch version:\"", ",", "torch", ".", "__version__", ")", "\n", "print", "(", "\"+++++++++++++++++++++++++\"", ")", "\n", "\n", "# setup logging", "\n", "if", "args", ".", "exec_mode", "in", "[", "'train'", ",", "'misc'", "]", ":", "\n", "        ", "args", ".", "job_id", "=", "generate_job_id", "(", ")", "\n", "init_logging", "(", "os", ".", "path", ".", "join", "(", "args", ".", "save_path", ",", "'_'", ".", "join", "(", "[", "args", ".", "model_type", ",", "args", ".", "learner", "]", ")", ",", "args", ".", "job_id", ",", "'record.log'", ")", ")", "\n", "", "elif", "args", ".", "exec_mode", "==", "'finetune'", ":", "\n", "        ", "args", ".", "job_id", "=", "generate_job_id", "(", ")", "\n", "init_logging", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "args", ".", "load_path", ")", ",", "'ft_record.log'", ")", ")", "\n", "", "else", ":", "\n", "        ", "init_logging", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "args", ".", "load_path", ")", ",", "args", ".", "load_path_log", ")", ")", "\n", "\n", "", "print_args", "(", "vars", "(", "args", ")", ")", "\n", "logging", ".", "info", "(", "\"Using GPU: \"", "+", "args", ".", "gpu_id", ")", "\n", "\n", "# create model", "\n", "", "model_helper", "=", "ModelHelper", "(", ")", "\n", "model", "=", "model_helper", ".", "get_model", "(", "args", ")", "\n", "model", ".", "cuda", "(", ")", "\n", "\n", "if", "args", ".", "distributed", ":", "\n", "# share the same initialization", "\n", "      ", "broadcast_params", "(", "model", ")", "\n", "\n", "", "loaders", ",", "sampler", "=", "set_loader", "(", "args", ")", "\n", "learner_fn", "=", "set_learner", "(", "args", ")", "\n", "learner", "=", "learner_fn", "(", "model", ",", "loaders", ",", "args", ",", "device", ")", "\n", "\n", "if", "args", ".", "exec_mode", "==", "'train'", ":", "\n", "      ", "learner", ".", "train", "(", "sampler", ")", "\n", "", "elif", "args", ".", "exec_mode", "==", "'eval'", ":", "\n", "      ", "learner", ".", "evaluate", "(", ")", "\n", "", "elif", "args", ".", "exec_mode", "==", "'finetune'", ":", "\n", "      ", "learner", ".", "finetune", "(", "sampler", ")", "\n", "", "elif", "args", ".", "exec_mode", "==", "'misc'", ":", "\n", "      ", "learner", ".", "misc", "(", ")", "\n", "\n", "", "if", "args", ".", "distributed", ":", "\n", "      ", "dist", ".", "destroy_process_group", "(", ")", "\n", "", "return", "0", "\n", "\n", "", "except", ":", "\n", "    ", "traceback", ".", "print_exc", "(", ")", "\n", "if", "args", ".", "distributed", ":", "\n", "      ", "dist", ".", "destroy_process_group", "(", ")", "\n", "", "return", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.Cifar.data_loader.cifar10_loader_search": [[16, 61], ["torchvision.transforms.Normalize", "torchvision.datasets.CIFAR10", "torchvision.datasets.CIFAR10", "len", "list", "int", "int", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "range", "numpy.floor", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.ToTensor", "torchvision.transforms.Lambda", "torchvision.transforms.ToPILImage", "torchvision.transforms.RandomCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor", "torchvision.transforms.ToTensor", "torch.pad().data.squeeze", "torch.pad", "torch.autograd.Variable", "x.unsqueeze"], "function", ["None"], ["def", "cifar10_loader_search", "(", "args", ",", "num_workers", "=", "4", ")", ":", "\n", "  ", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "x", "/", "255.0", "for", "x", "in", "[", "125.3", ",", "123.0", ",", "113.9", "]", "]", ",", "\n", "std", "=", "[", "x", "/", "255.0", "for", "x", "in", "[", "63.0", ",", "62.1", ",", "66.7", "]", "]", ")", "\n", "if", "args", ".", "data_aug", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "      ", "transform_train", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Lambda", "(", "lambda", "x", ":", "F", ".", "pad", "(", "\n", "Variable", "(", "x", ".", "unsqueeze", "(", "0", ")", ",", "requires_grad", "=", "False", ")", ",", "\n", "(", "4", ",", "4", ",", "4", ",", "4", ")", ",", "mode", "=", "'reflect'", ")", ".", "data", ".", "squeeze", "(", ")", ")", ",", "\n", "transforms", ".", "ToPILImage", "(", ")", ",", "\n", "transforms", ".", "RandomCrop", "(", "32", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", "\n", "transform_test", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "\n", "]", ")", "\n", "", "", "else", ":", "\n", "      ", "transform_train", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.4914", ",", "0.4822", ",", "0.4465", ")", ",", "(", "0.2023", ",", "0.1994", ",", "0.2010", ")", ")", ",", "\n", "]", ")", "\n", "transform_test", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.4914", ",", "0.4822", ",", "0.4465", ")", ",", "(", "0.2023", ",", "0.1994", ",", "0.2010", ")", ")", ",", "\n", "]", ")", "\n", "", "trainset", "=", "datasets", ".", "CIFAR10", "(", "root", "=", "args", ".", "data_path", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "transform_train", ")", "\n", "testset", "=", "datasets", ".", "CIFAR10", "(", "root", "=", "args", ".", "data_path", ",", "train", "=", "False", ",", "transform", "=", "transform_test", ")", "\n", "\n", "num_train", "=", "len", "(", "trainset", ")", "\n", "indices", "=", "list", "(", "range", "(", "num_train", ")", ")", "\n", "split", "=", "int", "(", "np", ".", "floor", "(", "args", ".", "train_portion", "*", "num_train", "*", "args", ".", "total_portion", ")", ")", "# we now add a portion_total arg to just use smaller number of data", "\n", "split_upb", "=", "int", "(", "num_train", "*", "args", ".", "total_portion", ")", "\n", "\n", "train_loader", "=", "DataLoader", "(", "trainset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "sampler", "=", "sampler", ".", "SubsetRandomSampler", "(", "indices", "[", ":", "split", "]", ")", ",", "\n", "num_workers", "=", "num_workers", ",", "pin_memory", "=", "True", ")", "\n", "valid_loader", "=", "DataLoader", "(", "trainset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "sampler", "=", "sampler", ".", "SubsetRandomSampler", "(", "indices", "[", "split", ":", "split_upb", "]", ")", ",", "\n", "num_workers", "=", "num_workers", ",", "pin_memory", "=", "True", ")", "\n", "test_loader", "=", "DataLoader", "(", "testset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "num_workers", ",", "pin_memory", "=", "True", ")", "\n", "return", "train_loader", ",", "valid_loader", ",", "test_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.Cifar.data_loader.cifar10_loader_train": [[62, 99], ["torchvision.transforms.Normalize", "torchvision.datasets.CIFAR10", "torchvision.datasets.CIFAR10", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.ToTensor", "torchvision.transforms.Lambda", "torchvision.transforms.ToPILImage", "torchvision.transforms.RandomCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor", "torchvision.transforms.ToTensor", "torch.pad().data.squeeze", "torch.pad", "torch.autograd.Variable", "x.unsqueeze"], "function", ["None"], ["", "def", "cifar10_loader_train", "(", "args", ",", "num_workers", "=", "4", ")", ":", "\n", "  ", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "x", "/", "255.0", "for", "x", "in", "[", "125.3", ",", "123.0", ",", "113.9", "]", "]", ",", "\n", "std", "=", "[", "x", "/", "255.0", "for", "x", "in", "[", "63.0", ",", "62.1", ",", "66.7", "]", "]", ")", "\n", "if", "args", ".", "data_aug", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "      ", "transform_train", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Lambda", "(", "lambda", "x", ":", "F", ".", "pad", "(", "Variable", "(", "x", ".", "unsqueeze", "(", "0", ")", ",", "requires_grad", "=", "False", ")", ",", "\n", "(", "4", ",", "4", ",", "4", ",", "4", ")", ",", "mode", "=", "'reflect'", ")", ".", "data", ".", "squeeze", "(", ")", ")", ",", "\n", "transforms", ".", "ToPILImage", "(", ")", ",", "\n", "transforms", ".", "RandomCrop", "(", "32", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", "\n", "transform_test", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "\n", "]", ")", "\n", "", "", "else", ":", "\n", "      ", "transform_train", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.4914", ",", "0.4822", ",", "0.4465", ")", ",", "(", "0.2023", ",", "0.1994", ",", "0.2010", ")", ")", ",", "\n", "]", ")", "\n", "transform_test", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.4914", ",", "0.4822", ",", "0.4465", ")", ",", "(", "0.2023", ",", "0.1994", ",", "0.2010", ")", ")", ",", "\n", "]", ")", "\n", "\n", "", "trainset", "=", "datasets", ".", "CIFAR10", "(", "root", "=", "args", ".", "data_path", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "transform_train", ")", "\n", "testset", "=", "datasets", ".", "CIFAR10", "(", "root", "=", "args", ".", "data_path", ",", "train", "=", "False", ",", "transform", "=", "transform_test", ")", "\n", "\n", "train_loader", "=", "DataLoader", "(", "trainset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "num_workers", ",", "pin_memory", "=", "True", ")", "\n", "test_loader", "=", "DataLoader", "(", "testset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "num_workers", ",", "pin_memory", "=", "True", ")", "\n", "return", "train_loader", ",", "test_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.Cifar.data_loader.cifar100_loader": [[100, 134], ["torchvision.transforms.Normalize", "torchvision.datasets.CIFAR100", "torchvision.datasets.CIFAR100", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.ToTensor", "torchvision.transforms.Lambda", "torchvision.transforms.ToPILImage", "torchvision.transforms.RandomCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor", "torchvision.transforms.ToTensor", "torch.pad().data.squeeze", "torch.pad", "torch.autograd.Variable", "x.unsqueeze"], "function", ["None"], ["", "def", "cifar100_loader", "(", "args", ",", "num_workers", "=", "4", ")", ":", "\n", "  ", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "x", "/", "255.0", "for", "x", "in", "[", "125.3", ",", "123.0", ",", "113.9", "]", "]", ",", "\n", "std", "=", "[", "x", "/", "255.0", "for", "x", "in", "[", "63.0", ",", "62.1", ",", "66.7", "]", "]", ")", "\n", "if", "args", ".", "data_aug", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "      ", "transform_train", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Lambda", "(", "lambda", "x", ":", "F", ".", "pad", "(", "\n", "Variable", "(", "x", ".", "unsqueeze", "(", "0", ")", ",", "requires_grad", "=", "False", ")", ",", "\n", "(", "4", ",", "4", ",", "4", ",", "4", ")", ",", "mode", "=", "'reflect'", ")", ".", "data", ".", "squeeze", "(", ")", ")", ",", "\n", "transforms", ".", "ToPILImage", "(", ")", ",", "\n", "transforms", ".", "RandomCrop", "(", "32", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", "\n", "transform_test", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "\n", "]", ")", "\n", "", "", "else", ":", "\n", "      ", "transform_train", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.4914", ",", "0.4822", ",", "0.4465", ")", ",", "(", "0.2023", ",", "0.1994", ",", "0.2010", ")", ")", ",", "\n", "]", ")", "\n", "transform_test", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.4914", ",", "0.4822", ",", "0.4465", ")", ",", "(", "0.2023", ",", "0.1994", ",", "0.2010", ")", ")", ",", "\n", "]", ")", "\n", "", "trainset", "=", "datasets", ".", "CIFAR100", "(", "root", "=", "args", ".", "data_path", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "transform_train", ")", "\n", "testset", "=", "datasets", ".", "CIFAR100", "(", "root", "=", "args", ".", "data_path", ",", "train", "=", "False", ",", "download", "=", "True", ",", "transform", "=", "transform_test", ")", "\n", "train_loader", "=", "DataLoader", "(", "trainset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "num_workers", ",", "pin_memory", "=", "True", ")", "\n", "test_loader", "=", "DataLoader", "(", "testset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "num_workers", ",", "pin_memory", "=", "True", ")", "\n", "return", "train_loader", ",", "test_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.Cifar.data_loader.ilsvrc12_loader_train": [[136, 171], ["os.path.join", "os.path.join", "torchvision.transforms.Normalize", "torchvision.datasets.ImageFolder", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.transforms.Compose", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torchvision.datasets.ImageFolder", "torchvision.transforms.Compose", "torchvision.transforms.RandomResizedCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor"], "function", ["None"], ["", "def", "ilsvrc12_loader_train", "(", "args", ",", "num_workers", "=", "4", ")", ":", "\n", "  ", "traindir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data_path", ",", "'train'", ")", "\n", "testdir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data_path", ",", "'val'", ")", "\n", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "\n", "train_dataset", "=", "datasets", ".", "ImageFolder", "(", "\n", "traindir", ",", "\n", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "224", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", ")", "\n", "\n", "if", "args", ".", "distributed", ":", "\n", "    ", "train_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "train_dataset", ")", "\n", "", "else", ":", "\n", "    ", "train_sampler", "=", "None", "\n", "\n", "", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_dataset", ",", "batch_size", "=", "args", ".", "batch_size", "//", "args", ".", "world_size", ",", "shuffle", "=", "(", "train_sampler", "is", "None", ")", ",", "\n", "num_workers", "=", "num_workers", ",", "pin_memory", "=", "True", ",", "sampler", "=", "train_sampler", ")", "\n", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "datasets", ".", "ImageFolder", "(", "testdir", ",", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", ")", ",", "\n", "batch_size", "=", "args", ".", "batch_size", "//", "args", ".", "world_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "num_workers", ",", "pin_memory", "=", "True", ")", "\n", "\n", "return", "[", "train_loader", ",", "test_loader", "]", ",", "train_sampler", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.Cifar.run_manager.RunConfig.__init__": [[23, 54], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "n_epochs", ",", "init_lr", ",", "lr_schedule_type", ",", "lr_schedule_param", ",", "\n", "dataset", ",", "train_batch_size", ",", "test_batch_size", ",", "\n", "opt_type", ",", "opt_param", ",", "weight_decay", ",", "label_smoothing", ",", "no_decay_keys", ",", "\n", "model_init", ",", "init_div_groups", ",", "validation_frequency", ",", "print_frequency", ",", "local_rank", ",", "world_size", ",", "sync_bn", ",", "\n", "warm_epoch", ")", ":", "\n", "        ", "self", ".", "n_epochs", "=", "n_epochs", "\n", "self", ".", "init_lr", "=", "init_lr", "\n", "self", ".", "lr_schedule_type", "=", "lr_schedule_type", "\n", "self", ".", "lr_schedule_param", "=", "lr_schedule_param", "\n", "self", ".", "warm_epoch", "=", "warm_epoch", "\n", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "train_batch_size", "=", "train_batch_size", "\n", "self", ".", "test_batch_size", "=", "test_batch_size", "\n", "\n", "self", ".", "opt_type", "=", "opt_type", "\n", "self", ".", "opt_param", "=", "opt_param", "\n", "self", ".", "weight_decay", "=", "weight_decay", "\n", "self", ".", "label_smoothing", "=", "label_smoothing", "\n", "self", ".", "no_decay_keys", "=", "no_decay_keys", "\n", "\n", "self", ".", "model_init", "=", "model_init", "\n", "self", ".", "init_div_groups", "=", "init_div_groups", "\n", "self", ".", "validation_frequency", "=", "validation_frequency", "\n", "self", ".", "print_frequency", "=", "print_frequency", "\n", "\n", "self", ".", "_data_provider", "=", "None", "\n", "self", ".", "_train_iter", ",", "self", ".", "_valid_iter", ",", "self", ".", "_test_iter", "=", "None", ",", "None", ",", "None", "\n", "self", ".", "local_rank", "=", "local_rank", "\n", "self", ".", "world_size", "=", "world_size", "\n", "self", ".", "sync_bn", "=", "sync_bn", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.Cifar.run_manager.RunConfig.config": [[55, 62], ["key.startswith"], "methods", ["None"], ["", "@", "property", "\n", "def", "config", "(", "self", ")", ":", "\n", "        ", "config", "=", "{", "}", "\n", "for", "key", "in", "self", ".", "__dict__", ":", "\n", "            ", "if", "not", "key", ".", "startswith", "(", "'_'", ")", ":", "\n", "                ", "config", "[", "key", "]", "=", "self", ".", "__dict__", "[", "key", "]", "\n", "", "", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.Cifar.run_manager.RunConfig.copy": [[63, 65], ["run_manager.RunConfig"], "methods", ["None"], ["", "def", "copy", "(", "self", ")", ":", "\n", "        ", "return", "RunConfig", "(", "**", "self", ".", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.Cifar.run_manager.RunConfig._calc_learning_rate": [[68, 81], ["ValueError", "math.cos"], "methods", ["None"], ["def", "_calc_learning_rate", "(", "self", ",", "epoch", ",", "batch", "=", "0", ",", "nBatch", "=", "None", ",", "warm_epoch", "=", "5", ")", ":", "\n", "        ", "if", "self", ".", "lr_schedule_type", "==", "'cosine'", ":", "\n", "            ", "T_total", "=", "self", ".", "n_epochs", "*", "nBatch", "\n", "T_cur", "=", "epoch", "*", "nBatch", "+", "batch", "\n", "T_warm", "=", "warm_epoch", "*", "nBatch", "\n", "if", "T_cur", "<", "T_warm", ":", "\n", "                ", "lr", "=", "T_cur", "/", "T_warm", "*", "self", ".", "init_lr", "\n", "", "else", ":", "\n", "                ", "lr", "=", "0.5", "*", "self", ".", "init_lr", "*", "(", "1", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "(", "T_cur", "-", "T_warm", ")", "/", "(", "T_total", "-", "T_warm", ")", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'do not support: %s'", "%", "self", ".", "lr_schedule_type", ")", "\n", "", "return", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.Cifar.run_manager.RunConfig.adjust_learning_rate": [[82, 89], ["run_manager.RunConfig._calc_learning_rate"], "methods", ["home.repos.pwc.inspect_result.mac-automl_itpruner.Cifar.run_manager.RunConfig._calc_learning_rate"], ["", "def", "adjust_learning_rate", "(", "self", ",", "optimizer", ",", "epoch", ",", "batch", "=", "0", ",", "nBatch", "=", "None", ")", ":", "\n", "        ", "\"\"\" adjust learning of a given optimizer and return the new learning rate \"\"\"", "\n", "new_lr", "=", "self", ".", "_calc_learning_rate", "(", "\n", "epoch", ",", "batch", ",", "nBatch", ",", "self", ".", "warm_epoch", ")", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "new_lr", "\n", "", "return", "new_lr", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.Cifar.run_manager.RunConfig.data_config": [[92, 95], ["None"], "methods", ["None"], ["@", "property", "\n", "def", "data_config", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.Cifar.run_manager.RunConfig.data_provider": [[106, 109], ["None"], "methods", ["None"], ["", "@", "data_provider", ".", "setter", "\n", "def", "data_provider", "(", "self", ",", "val", ")", ":", "\n", "        ", "self", ".", "_data_provider", "=", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.Cifar.run_manager.RunConfig.train_loader": [[110, 113], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "train_loader", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "data_provider", ".", "train", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.Cifar.run_manager.RunConfig.valid_loader": [[114, 117], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "valid_loader", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "data_provider", ".", "valid", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.Cifar.run_manager.RunConfig.test_loader": [[118, 121], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "test_loader", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "data_provider", ".", "test", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.Cifar.run_manager.RunConfig.build_optimizer": [[124, 141], ["opt_param.get", "opt_param.get", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD"], "methods", ["None"], ["def", "build_optimizer", "(", "self", ",", "net_params", ")", ":", "\n", "        ", "if", "self", ".", "opt_type", "==", "'sgd'", ":", "\n", "            ", "opt_param", "=", "{", "}", "if", "self", ".", "opt_param", "is", "None", "else", "self", ".", "opt_param", "\n", "momentum", ",", "nesterov", "=", "opt_param", ".", "get", "(", "\n", "'momentum'", ",", "0.9", ")", ",", "opt_param", ".", "get", "(", "'nesterov'", ",", "True", ")", "\n", "if", "self", ".", "no_decay_keys", ":", "\n", "                ", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "[", "\n", "{", "'params'", ":", "net_params", "[", "0", "]", ",", "\n", "'weight_decay'", ":", "self", ".", "weight_decay", "}", ",", "\n", "{", "'params'", ":", "net_params", "[", "1", "]", ",", "'weight_decay'", ":", "0", "}", ",", "\n", "]", ",", "lr", "=", "self", ".", "init_lr", ",", "momentum", "=", "momentum", ",", "nesterov", "=", "nesterov", ")", "\n", "", "else", ":", "\n", "                ", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "net_params", ",", "self", ".", "init_lr", ",", "momentum", "=", "momentum", ",", "nesterov", "=", "nesterov", ",", "\n", "weight_decay", "=", "self", ".", "weight_decay", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "return", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.Cifar.run_manager.RunManager.__init__": [[144, 185], ["torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "run_manager.RunManager.net.init_model", "run_manager.RunManager.net.cuda", "print", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "apex.parallel.DistributedDataParallel", "run_manager.RunManager.print_net_info", "apex.parallel.convert_syncbn_model", "run_manager.RunManager.run_config.no_decay_keys.split", "run_manager.RunManager.run_config.build_optimizer", "run_manager.RunManager.run_config.build_optimizer", "float", "run_manager.RunManager.net.weight_parameters", "run_manager.RunManager.net.get_parameters", "run_manager.RunManager.net.get_parameters"], "methods", ["home.repos.pwc.inspect_result.mac-automl_itpruner.nets.base_models.MyNetwork.init_model", "home.repos.pwc.inspect_result.mac-automl_itpruner.Cifar.run_manager.RunManager.print_net_info", "home.repos.pwc.inspect_result.mac-automl_itpruner.Cifar.run_manager.RunConfig.build_optimizer", "home.repos.pwc.inspect_result.mac-automl_itpruner.Cifar.run_manager.RunConfig.build_optimizer", "home.repos.pwc.inspect_result.mac-automl_itpruner.nets.base_models.MyNetwork.weight_parameters", "home.repos.pwc.inspect_result.mac-automl_itpruner.nets.base_models.MyNetwork.get_parameters", "home.repos.pwc.inspect_result.mac-automl_itpruner.nets.base_models.MyNetwork.get_parameters"], ["    ", "def", "__init__", "(", "self", ",", "path", ",", "net", ",", "run_config", ":", "RunConfig", ",", "out_log", "=", "True", ")", ":", "\n", "        ", "self", ".", "path", "=", "path", "\n", "self", ".", "net", "=", "net", "\n", "self", ".", "run_config", "=", "run_config", "\n", "self", ".", "out_log", "=", "out_log", "\n", "\n", "self", ".", "_logs_path", ",", "self", ".", "_save_path", "=", "None", ",", "None", "\n", "self", ".", "best_acc", "=", "0", "\n", "self", ".", "start_epoch", "=", "0", "\n", "gpu", "=", "self", ".", "run_config", ".", "local_rank", "\n", "torch", ".", "cuda", ".", "set_device", "(", "gpu", ")", "\n", "\n", "# initialize model (default)", "\n", "self", ".", "net", ".", "init_model", "(", "run_config", ".", "model_init", ",", "run_config", ".", "init_div_groups", ")", "\n", "\n", "# net info", "\n", "self", ".", "net", "=", "self", ".", "net", ".", "cuda", "(", ")", "\n", "if", "run_config", ".", "local_rank", "==", "0", ":", "\n", "            ", "self", ".", "print_net_info", "(", ")", "\n", "\n", "", "if", "self", ".", "run_config", ".", "sync_bn", ":", "\n", "            ", "self", ".", "net", "=", "apex", ".", "parallel", ".", "convert_syncbn_model", "(", "self", ".", "net", ")", "\n", "", "print", "(", "'local_rank: %d'", "%", "self", ".", "run_config", ".", "local_rank", ")", "\n", "\n", "self", ".", "run_config", ".", "init_lr", "=", "self", ".", "run_config", ".", "init_lr", "*", "float", "(", "\n", "self", ".", "run_config", ".", "train_batch_size", "*", "self", ".", "run_config", ".", "world_size", ")", "/", "256.", "\n", "self", ".", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "if", "self", ".", "run_config", ".", "no_decay_keys", ":", "\n", "            ", "keys", "=", "self", ".", "run_config", ".", "no_decay_keys", ".", "split", "(", "'#'", ")", "\n", "self", ".", "optimizer", "=", "self", ".", "run_config", ".", "build_optimizer", "(", "[", "\n", "# parameters with weight decay", "\n", "self", ".", "net", ".", "get_parameters", "(", "keys", ",", "mode", "=", "'exclude'", ")", ",", "\n", "# parameters without weight decay", "\n", "self", ".", "net", ".", "get_parameters", "(", "keys", ",", "mode", "=", "'include'", ")", ",", "\n", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "optimizer", "=", "self", ".", "run_config", ".", "build_optimizer", "(", "\n", "self", ".", "net", ".", "weight_parameters", "(", ")", ")", "\n", "# self.net, self.optimizer = amp.initialize(self.net, self.optimizer, opt_level='O1')", "\n", "", "self", ".", "net", "=", "DDP", "(", "self", ".", "net", ",", "delay_allreduce", "=", "True", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.Cifar.run_manager.RunManager.save_path": [[188, 195], ["os.path.join", "os.makedirs"], "methods", ["None"], ["@", "property", "\n", "def", "save_path", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_save_path", "is", "None", ":", "\n", "            ", "save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "path", ",", "'checkpoint'", ")", "\n", "os", ".", "makedirs", "(", "save_path", ",", "exist_ok", "=", "True", ")", "\n", "self", ".", "_save_path", "=", "save_path", "\n", "", "return", "self", ".", "_save_path", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.Cifar.run_manager.RunManager.logs_path": [[196, 203], ["os.path.join", "os.makedirs"], "methods", ["None"], ["", "@", "property", "\n", "def", "logs_path", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_logs_path", "is", "None", ":", "\n", "            ", "logs_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "path", ",", "'logs'", ")", "\n", "os", ".", "makedirs", "(", "logs_path", ",", "exist_ok", "=", "True", ")", "\n", "self", ".", "_logs_path", "=", "logs_path", "\n", "", "return", "self", ".", "_logs_path", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.Cifar.run_manager.RunManager.reset_model": [[206, 244], ["run_manager.RunManager.net.init_model", "run_manager.RunManager.net.cuda", "print", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "apex.parallel.DistributedDataParallel", "utils.get_unpruned_weights", "run_manager.RunManager.print_net_info", "apex.parallel.convert_syncbn_model", "run_manager.RunManager.run_config.no_decay_keys.split", "run_manager.RunManager.run_config.build_optimizer", "run_manager.RunManager.run_config.build_optimizer", "print", "print", "run_manager.RunManager.net.weight_parameters", "run_manager.RunManager.net.get_parameters", "run_manager.RunManager.net.get_parameters"], "methods", ["home.repos.pwc.inspect_result.mac-automl_itpruner.nets.base_models.MyNetwork.init_model", "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.pytorch_utils.get_unpruned_weights", "home.repos.pwc.inspect_result.mac-automl_itpruner.Cifar.run_manager.RunManager.print_net_info", "home.repos.pwc.inspect_result.mac-automl_itpruner.Cifar.run_manager.RunConfig.build_optimizer", "home.repos.pwc.inspect_result.mac-automl_itpruner.Cifar.run_manager.RunConfig.build_optimizer", "home.repos.pwc.inspect_result.mac-automl_itpruner.nets.base_models.MyNetwork.weight_parameters", "home.repos.pwc.inspect_result.mac-automl_itpruner.nets.base_models.MyNetwork.get_parameters", "home.repos.pwc.inspect_result.mac-automl_itpruner.nets.base_models.MyNetwork.get_parameters"], ["def", "reset_model", "(", "self", ",", "model", ",", "model_origin", "=", "None", ")", ":", "\n", "        ", "self", ".", "net", "=", "model", "\n", "self", ".", "net", ".", "init_model", "(", "self", ".", "run_config", ".", "model_init", ",", "\n", "self", ".", "run_config", ".", "init_div_groups", ")", "\n", "if", "model_origin", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "run_config", ".", "local_rank", "==", "0", ":", "\n", "                ", "print", "(", "'-'", "*", "30", "+", "' start pruning '", "+", "'-'", "*", "30", ")", "\n", "", "get_unpruned_weights", "(", "self", ".", "net", ",", "model_origin", ")", "\n", "if", "self", ".", "run_config", ".", "local_rank", "==", "0", ":", "\n", "                ", "print", "(", "'-'", "*", "30", "+", "' end pruning '", "+", "'-'", "*", "30", ")", "\n", "# net info", "\n", "", "", "self", ".", "net", "=", "self", ".", "net", ".", "cuda", "(", ")", "\n", "if", "self", ".", "run_config", ".", "local_rank", "==", "0", ":", "\n", "            ", "self", ".", "print_net_info", "(", ")", "\n", "\n", "", "if", "self", ".", "run_config", ".", "sync_bn", ":", "\n", "            ", "self", ".", "net", "=", "apex", ".", "parallel", ".", "convert_syncbn_model", "(", "self", ".", "net", ")", "\n", "", "print", "(", "'local_rank: %d'", "%", "self", ".", "run_config", ".", "local_rank", ")", "\n", "\n", "self", ".", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "if", "self", ".", "run_config", ".", "no_decay_keys", ":", "\n", "            ", "keys", "=", "self", ".", "run_config", ".", "no_decay_keys", ".", "split", "(", "'#'", ")", "\n", "self", ".", "optimizer", "=", "self", ".", "run_config", ".", "build_optimizer", "(", "[", "\n", "# parameters with weight decay", "\n", "self", ".", "net", ".", "get_parameters", "(", "keys", ",", "mode", "=", "'exclude'", ")", ",", "\n", "# parameters without weight decay", "\n", "self", ".", "net", ".", "get_parameters", "(", "keys", ",", "mode", "=", "'include'", ")", ",", "\n", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "optimizer", "=", "self", ".", "run_config", ".", "build_optimizer", "(", "\n", "self", ".", "net", ".", "weight_parameters", "(", ")", ")", "\n", "# model, self.optimizer = amp.initialize(model, self.optimizer,", "\n", "#                                        opt_level='O2',", "\n", "#                                        keep_batchnorm_fp32=True,", "\n", "#                                        loss_scale=1.0", "\n", "#                                        )", "\n", "", "self", ".", "net", "=", "DDP", "(", "self", ".", "net", ",", "delay_allreduce", "=", "True", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "# if model_origin!=None:", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.Cifar.run_manager.RunManager.net_flops": [[252, 260], ["torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "list", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torchprofile.profile_macs", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "net_flops", "(", "self", ")", ":", "\n", "        ", "data_shape", "=", "[", "1", "]", "+", "list", "(", "self", ".", "run_config", ".", "data_provider", ".", "data_shape", ")", "\n", "\n", "net", "=", "self", ".", "net", "\n", "input_var", "=", "torch", ".", "zeros", "(", "data_shape", ")", ".", "cuda", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "flops", "=", "profile_macs", "(", "net", ",", "input_var", ")", "\n", "", "return", "flops", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.Cifar.run_manager.RunManager.print_net_info": [[261, 283], ["utils.count_parameters", "run_manager.RunManager.net_flops", "str", "print", "print", "print", "open", "fout.write", "str", "json.dumps"], "methods", ["home.repos.pwc.inspect_result.mac-automl_itpruner.utils.pytorch_utils.count_parameters", "home.repos.pwc.inspect_result.mac-automl_itpruner.Cifar.run_manager.RunManager.net_flops"], ["", "def", "print_net_info", "(", "self", ")", ":", "\n", "# parameters", "\n", "        ", "total_params", "=", "count_parameters", "(", "self", ".", "net", ")", "\n", "if", "self", ".", "out_log", ":", "\n", "            ", "print", "(", "'Total training params: %.2fM'", "%", "(", "total_params", "/", "1e6", ")", ")", "\n", "", "net_info", "=", "{", "\n", "'param'", ":", "'%.2fM'", "%", "(", "total_params", "/", "1e6", ")", ",", "\n", "}", "\n", "\n", "# flops", "\n", "flops", "=", "self", ".", "net_flops", "(", ")", "\n", "if", "self", ".", "out_log", ":", "\n", "            ", "print", "(", "'Total FLOPs: %.1fM'", "%", "(", "flops", "/", "1e6", ")", ")", "\n", "", "net_info", "[", "'flops'", "]", "=", "'%.1fM'", "%", "(", "flops", "/", "1e6", ")", "\n", "\n", "# config", "\n", "if", "self", ".", "out_log", ":", "\n", "            ", "print", "(", "'Net config: '", "+", "str", "(", "self", ".", "net", ".", "config", ")", ")", "\n", "", "net_info", "[", "'config'", "]", "=", "str", "(", "self", ".", "net", ".", "config", ")", "\n", "\n", "with", "open", "(", "'%s/net_info.txt'", "%", "self", ".", "logs_path", ",", "'w'", ")", "as", "fout", ":", "\n", "            ", "fout", ".", "write", "(", "json", ".", "dumps", "(", "net_info", ",", "indent", "=", "4", ")", "+", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.Cifar.run_manager.RunManager.save_model": [[286, 304], ["os.path.join", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "open", "fout.write", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "run_manager.RunManager.net.module.state_dict"], "methods", ["home.repos.pwc.inspect_result.mac-automl_itpruner.utils.utils.WarmUpCosineLRScheduler.state_dict"], ["def", "save_model", "(", "self", ",", "checkpoint", "=", "None", ",", "is_best", "=", "False", ",", "model_name", "=", "None", ")", ":", "\n", "        ", "if", "checkpoint", "is", "None", ":", "\n", "            ", "checkpoint", "=", "{", "'state_dict'", ":", "self", ".", "net", ".", "module", ".", "state_dict", "(", ")", "}", "\n", "\n", "", "if", "model_name", "is", "None", ":", "\n", "            ", "model_name", "=", "'checkpoint.pth.tar'", "\n", "\n", "# add `dataset` info to the checkpoint", "\n", "", "checkpoint", "[", "'dataset'", "]", "=", "self", ".", "run_config", ".", "dataset", "\n", "latest_fname", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_path", ",", "'latest.txt'", ")", "\n", "model_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_path", ",", "model_name", ")", "\n", "with", "open", "(", "latest_fname", ",", "'w'", ")", "as", "fout", ":", "\n", "            ", "fout", ".", "write", "(", "model_path", "+", "'\\n'", ")", "\n", "", "torch", ".", "save", "(", "checkpoint", ",", "model_path", ")", "\n", "\n", "if", "is_best", ":", "\n", "            ", "best_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_path", ",", "'model_best.pth.tar'", ")", "\n", "torch", ".", "save", "(", "{", "'state_dict'", ":", "checkpoint", "[", "'state_dict'", "]", "}", ",", "best_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.Cifar.run_manager.RunManager.load_model": [[305, 345], ["os.path.join", "os.path.exists", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "run_manager.RunManager.net.module.load_state_dict", "int", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "numpy.random.seed", "open", "fin.readline", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "time.time", "run_manager.RunManager.optimizer.load_state_dict", "print", "os.path.exists", "open", "fout.write", "print"], "methods", ["home.repos.pwc.inspect_result.mac-automl_itpruner.utils.utils.WarmUpCosineLRScheduler.load_state_dict", "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.utils.WarmUpCosineLRScheduler.load_state_dict"], ["", "", "def", "load_model", "(", "self", ",", "model_fname", "=", "None", ")", ":", "\n", "        ", "latest_fname", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_path", ",", "'latest.txt'", ")", "\n", "if", "model_fname", "is", "None", "and", "os", ".", "path", ".", "exists", "(", "latest_fname", ")", ":", "\n", "            ", "with", "open", "(", "latest_fname", ",", "'r'", ")", "as", "fin", ":", "\n", "                ", "model_fname", "=", "fin", ".", "readline", "(", ")", "\n", "if", "model_fname", "[", "-", "1", "]", "==", "'\\n'", ":", "\n", "                    ", "model_fname", "=", "model_fname", "[", ":", "-", "1", "]", "\n", "# noinspection PyBroadException", "\n", "", "", "", "try", ":", "\n", "            ", "if", "model_fname", "is", "None", "or", "not", "os", ".", "path", ".", "exists", "(", "model_fname", ")", ":", "\n", "                ", "model_fname", "=", "'%s/checkpoint.pth.tar'", "%", "self", ".", "save_path", "\n", "with", "open", "(", "latest_fname", ",", "'w'", ")", "as", "fout", ":", "\n", "                    ", "fout", ".", "write", "(", "model_fname", "+", "'\\n'", ")", "\n", "", "", "if", "self", ".", "out_log", ":", "\n", "                ", "print", "(", "\"=> loading checkpoint '{}'\"", ".", "format", "(", "model_fname", ")", ")", "\n", "\n", "", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                ", "checkpoint", "=", "torch", ".", "load", "(", "model_fname", ")", "\n", "", "else", ":", "\n", "                ", "checkpoint", "=", "torch", ".", "load", "(", "model_fname", ",", "map_location", "=", "'cpu'", ")", "\n", "\n", "", "self", ".", "net", ".", "module", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "# set new manual seed", "\n", "new_manual_seed", "=", "int", "(", "time", ".", "time", "(", ")", ")", "\n", "torch", ".", "manual_seed", "(", "new_manual_seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "new_manual_seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "new_manual_seed", ")", "\n", "\n", "if", "'epoch'", "in", "checkpoint", ":", "\n", "                ", "self", ".", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "+", "1", "\n", "", "if", "'best_acc'", "in", "checkpoint", ":", "\n", "                ", "self", ".", "best_acc", "=", "checkpoint", "[", "'best_acc'", "]", "\n", "", "if", "'optimizer'", "in", "checkpoint", ":", "\n", "                ", "self", ".", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "\n", "", "if", "self", ".", "out_log", ":", "\n", "                ", "print", "(", "\"=> loaded checkpoint '{}'\"", ".", "format", "(", "model_fname", ")", ")", "\n", "", "", "except", "Exception", ":", "\n", "            ", "if", "self", ".", "out_log", ":", "\n", "                ", "print", "(", "'fail to load checkpoint from %s'", "%", "self", ".", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.Cifar.run_manager.RunManager.save_config": [[346, 358], ["os.makedirs", "os.path.join", "json.dump", "os.path.join", "json.dump", "open", "print", "open", "print"], "methods", ["None"], ["", "", "", "def", "save_config", "(", "self", ",", "print_info", "=", "True", ")", ":", "\n", "        ", "\"\"\" dump run_config and net_config to the model_folder \"\"\"", "\n", "os", ".", "makedirs", "(", "self", ".", "path", ",", "exist_ok", "=", "True", ")", "\n", "net_save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "path", ",", "'net.config'", ")", "\n", "json", ".", "dump", "(", "self", ".", "net", ".", "module", ".", "config", ",", "open", "(", "net_save_path", ",", "'w'", ")", ",", "indent", "=", "4", ")", "\n", "if", "print_info", ":", "\n", "            ", "print", "(", "'Network configs dump to %s'", "%", "net_save_path", ")", "\n", "\n", "", "run_save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "path", ",", "'run.config'", ")", "\n", "json", ".", "dump", "(", "self", ".", "run_config", ".", "config", ",", "open", "(", "run_save_path", ",", "'w'", ")", ",", "indent", "=", "4", ")", "\n", "if", "print_info", ":", "\n", "            ", "print", "(", "'Run configs dump to %s'", "%", "run_save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.Cifar.run_manager.RunManager.write_log": [[361, 381], ["print", "open", "fout.write", "fout.flush", "open", "fout.write", "fout.flush", "open", "fout.write", "fout.flush", "os.path.join", "os.path.join", "fout.write", "os.path.join", "fout.write"], "methods", ["None"], ["def", "write_log", "(", "self", ",", "log_str", ",", "prefix", ",", "should_print", "=", "True", ")", ":", "\n", "        ", "\"\"\" prefix: valid, train, test \"\"\"", "\n", "if", "prefix", "in", "[", "'valid'", ",", "'test'", "]", ":", "\n", "            ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "logs_path", ",", "'valid_console.txt'", ")", ",", "'a'", ")", "as", "fout", ":", "\n", "                ", "fout", ".", "write", "(", "log_str", "+", "'\\n'", ")", "\n", "fout", ".", "flush", "(", ")", "\n", "", "", "if", "prefix", "in", "[", "'valid'", ",", "'test'", ",", "'train'", "]", ":", "\n", "            ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "logs_path", ",", "'train_console.txt'", ")", ",", "'a'", ")", "as", "fout", ":", "\n", "                ", "if", "prefix", "in", "[", "'valid'", ",", "'test'", "]", ":", "\n", "                    ", "fout", ".", "write", "(", "'='", "*", "10", ")", "\n", "", "fout", ".", "write", "(", "log_str", "+", "'\\n'", ")", "\n", "fout", ".", "flush", "(", ")", "\n", "", "", "if", "prefix", "in", "[", "'prune'", "]", ":", "\n", "            ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "logs_path", ",", "'prune_console.txt'", ")", ",", "'a'", ")", "as", "fout", ":", "\n", "                ", "if", "prefix", "in", "[", "'valid'", ",", "'test'", "]", ":", "\n", "                    ", "fout", ".", "write", "(", "'='", "*", "10", ")", "\n", "", "fout", ".", "write", "(", "log_str", "+", "'\\n'", ")", "\n", "fout", ".", "flush", "(", ")", "\n", "", "", "if", "should_print", ":", "\n", "            ", "print", "(", "log_str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.Cifar.run_manager.RunManager.validate": [[382, 442], ["utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "time.time", "run_manager.RunManager.run_config.valid_loader.reset", "run_manager.RunManager.run_config.test_loader.reset", "net.train", "net.eval", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "net", "run_manager.RunManager.criterion", "utils.accuracy", "run_manager.RunManager.reduce_tensor", "run_manager.RunManager.reduce_tensor", "run_manager.RunManager.reduce_tensor", "utils.AverageMeter.update", "utils.AverageMeter.update", "utils.AverageMeter.update", "utils.AverageMeter.update", "time.time", "data[].cuda", "data[].cuda", "images.size", "images.size", "images.size", "print", "time.time", "len", "len"], "methods", ["home.repos.pwc.inspect_result.mac-automl_itpruner.utils.utils.AverageMeter.reset", "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.utils.AverageMeter.reset", "home.repos.pwc.inspect_result.mac-automl_itpruner.learners.basic_learner.BasicLearner.train", "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.utils.accuracy", "home.repos.pwc.inspect_result.mac-automl_itpruner.Cifar.run_manager.RunManager.reduce_tensor", "home.repos.pwc.inspect_result.mac-automl_itpruner.Cifar.run_manager.RunManager.reduce_tensor", "home.repos.pwc.inspect_result.mac-automl_itpruner.Cifar.run_manager.RunManager.reduce_tensor", "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.utils.AverageMeter.update"], ["", "", "def", "validate", "(", "self", ",", "is_test", "=", "True", ",", "net", "=", "None", ",", "use_train_mode", "=", "False", ",", "return_top5", "=", "False", ")", ":", "\n", "        ", "if", "is_test", ":", "\n", "            ", "data_loader", "=", "self", ".", "run_config", ".", "test_loader", "\n", "", "else", ":", "\n", "            ", "data_loader", "=", "self", ".", "run_config", ".", "valid_loader", "\n", "\n", "", "if", "net", "is", "None", ":", "\n", "            ", "net", "=", "self", ".", "net", "\n", "\n", "", "if", "use_train_mode", ":", "\n", "            ", "net", ".", "train", "(", ")", "\n", "", "else", ":", "\n", "            ", "net", ".", "eval", "(", ")", "\n", "", "batch_time", "=", "AverageMeter", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "top1", "=", "AverageMeter", "(", ")", "\n", "top5", "=", "AverageMeter", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "# noinspection PyUnresolvedReferences", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "i", ",", "data", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "                ", "images", ",", "labels", "=", "data", "[", "0", "]", ".", "cuda", "(", "non_blocking", "=", "True", ")", ",", "data", "[", "1", "]", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "# images, labels = data[0].cuda(), data[1].cuda()", "\n", "# compute output", "\n", "output", "=", "net", "(", "images", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "output", ",", "labels", ")", "\n", "# measure accuracy and record loss", "\n", "acc1", ",", "acc5", "=", "accuracy", "(", "output", ",", "labels", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "reduced_loss", "=", "self", ".", "reduce_tensor", "(", "loss", ".", "data", ")", "\n", "acc1", "=", "self", ".", "reduce_tensor", "(", "acc1", ")", "\n", "acc5", "=", "self", ".", "reduce_tensor", "(", "acc5", ")", "\n", "losses", ".", "update", "(", "reduced_loss", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "acc1", "[", "0", "]", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "acc5", "[", "0", "]", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "self", ".", "run_config", ".", "print_frequency", "==", "0", "or", "i", "+", "1", "==", "len", "(", "data_loader", ")", ":", "\n", "                    ", "if", "is_test", ":", "\n", "                        ", "prefix", "=", "'Test'", "\n", "", "else", ":", "\n", "                        ", "prefix", "=", "'Valid'", "\n", "", "test_log", "=", "prefix", "+", "': [{0}/{1}]\\t'", "'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "'Loss {loss.val:.4f} ({loss.avg:.4f})\\t'", "'Top-1 acc {top1.val:.3f} ({top1.avg:.3f})'", ".", "format", "(", "i", ",", "len", "(", "data_loader", ")", "-", "1", ",", "\n", "batch_time", "=", "batch_time", ",", "loss", "=", "losses", ",", "top1", "=", "top1", ")", "\n", "if", "return_top5", ":", "\n", "                        ", "test_log", "+=", "'\\tTop-5 acc {top5.val:.3f} ({top5.avg:.3f})'", ".", "format", "(", "\n", "top5", "=", "top5", ")", "\n", "", "print", "(", "test_log", ")", "\n", "", "", "", "self", ".", "run_config", ".", "valid_loader", ".", "reset", "(", ")", "\n", "self", ".", "run_config", ".", "test_loader", ".", "reset", "(", ")", "\n", "if", "return_top5", ":", "\n", "            ", "return", "losses", ".", "avg", ",", "top1", ".", "avg", ",", "top5", ".", "avg", "\n", "", "else", ":", "\n", "            ", "return", "losses", ".", "avg", ",", "top1", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.Cifar.run_manager.RunManager.train_bn": [[443, 459], ["run_manager.RunManager.net.modules", "run_manager.RunManager.net.train", "range", "print", "isinstance", "enumerate", "print", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "run_manager.RunManager.net", "data[].cuda", "data[].cuda"], "methods", ["home.repos.pwc.inspect_result.mac-automl_itpruner.learners.basic_learner.BasicLearner.train"], ["", "", "def", "train_bn", "(", "self", ",", "epochs", "=", "1", ")", ":", "\n", "        ", "if", "self", ".", "run_config", ".", "local_rank", "==", "0", ":", "\n", "            ", "print", "(", "'training bn'", ")", "\n", "", "for", "m", "in", "self", ".", "net", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "running_mean", "=", "torch", ".", "zeros_like", "(", "m", ".", "running_mean", ")", "\n", "m", ".", "running_var", "=", "torch", ".", "ones_like", "(", "m", ".", "running_var", ")", "\n", "", "", "self", ".", "net", ".", "train", "(", ")", "\n", "for", "i", "in", "range", "(", "epochs", ")", ":", "\n", "            ", "for", "_", ",", "data", "in", "enumerate", "(", "self", ".", "run_config", ".", "train_loader", ")", ":", "\n", "                ", "images", ",", "labels", "=", "data", "[", "0", "]", ".", "cuda", "(", "\n", "non_blocking", "=", "True", ")", ",", "data", "[", "1", "]", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "output", "=", "self", ".", "net", "(", "images", ")", "\n", "del", "output", ",", "images", ",", "labels", "\n", "", "", "if", "self", ".", "run_config", ".", "local_rank", "==", "0", ":", "\n", "            ", "print", "(", "'training bn finished'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.Cifar.run_manager.RunManager.train_one_epoch": [[460, 507], ["utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "run_manager.RunManager.net.train", "time.time", "enumerate", "utils.AverageMeter.update", "adjust_lr_func", "run_manager.RunManager.net", "utils.accuracy", "run_manager.RunManager.reduce_tensor", "run_manager.RunManager.reduce_tensor", "run_manager.RunManager.reduce_tensor", "utils.AverageMeter.update", "utils.AverageMeter.update", "utils.AverageMeter.update", "run_manager.RunManager.net.zero_grad", "run_manager.RunManager.backward", "run_manager.RunManager.optimizer.step", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "utils.AverageMeter.update", "time.time", "data[].cuda", "data[].cuda", "utils.cross_entropy_with_label_smoothing", "run_manager.RunManager.criterion", "images.size", "images.size", "images.size", "run_manager.RunManager.train.train_log_func", "run_manager.RunManager.write_log", "time.time", "time.time", "len"], "methods", ["home.repos.pwc.inspect_result.mac-automl_itpruner.learners.basic_learner.BasicLearner.train", "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.utils.accuracy", "home.repos.pwc.inspect_result.mac-automl_itpruner.Cifar.run_manager.RunManager.reduce_tensor", "home.repos.pwc.inspect_result.mac-automl_itpruner.Cifar.run_manager.RunManager.reduce_tensor", "home.repos.pwc.inspect_result.mac-automl_itpruner.Cifar.run_manager.RunManager.reduce_tensor", "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.utils.WarmUpCosineLRScheduler.step", "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.pytorch_utils.cross_entropy_with_label_smoothing", "home.repos.pwc.inspect_result.mac-automl_itpruner.Cifar.run_manager.RunManager.write_log"], ["", "", "def", "train_one_epoch", "(", "self", ",", "adjust_lr_func", ",", "train_log_func", ",", "epoch", ")", ":", "\n", "        ", "batch_time", "=", "AverageMeter", "(", ")", "\n", "data_time", "=", "AverageMeter", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "top1", "=", "AverageMeter", "(", ")", "\n", "top5", "=", "AverageMeter", "(", ")", "\n", "\n", "# switch to train mode", "\n", "self", ".", "net", ".", "train", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "self", ".", "run_config", ".", "train_loader", ")", ":", "\n", "            ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "new_lr", "=", "adjust_lr_func", "(", "i", ")", "\n", "images", ",", "labels", "=", "data", "[", "0", "]", ".", "cuda", "(", "\n", "non_blocking", "=", "True", ")", ",", "data", "[", "1", "]", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "# compute output", "\n", "output", "=", "self", ".", "net", "(", "images", ")", "\n", "if", "self", ".", "run_config", ".", "label_smoothing", ">", "0", ":", "\n", "                ", "loss", "=", "cross_entropy_with_label_smoothing", "(", "\n", "output", ",", "labels", ",", "self", ".", "run_config", ".", "label_smoothing", ")", "\n", "", "else", ":", "\n", "                ", "loss", "=", "self", ".", "criterion", "(", "output", ",", "labels", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "", "acc1", ",", "acc5", "=", "accuracy", "(", "output", ",", "labels", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "reduced_loss", "=", "self", ".", "reduce_tensor", "(", "loss", ".", "data", ")", "\n", "acc1", "=", "self", ".", "reduce_tensor", "(", "acc1", ")", "\n", "acc5", "=", "self", ".", "reduce_tensor", "(", "acc5", ")", "\n", "losses", ".", "update", "(", "reduced_loss", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "acc1", "[", "0", "]", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "acc5", "[", "0", "]", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "\n", "# compute gradient and do SGD step", "\n", "self", ".", "net", ".", "zero_grad", "(", ")", "# or self.optimizer.zero_grad()", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "(", "i", "%", "self", ".", "run_config", ".", "print_frequency", "==", "0", "or", "i", "+", "1", "==", "len", "(", "self", ".", "run_config", ".", "train_loader", ")", ")", "and", "self", ".", "run_config", ".", "local_rank", "==", "0", ":", "\n", "                ", "batch_log", "=", "train_log_func", "(", "\n", "i", ",", "batch_time", ",", "data_time", ",", "losses", ",", "top1", ",", "top5", ",", "new_lr", ")", "\n", "self", ".", "write_log", "(", "batch_log", ",", "'train'", ")", "\n", "", "", "return", "top1", ",", "top5", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.Cifar.run_manager.RunManager.train": [[508, 573], ["range", "time.time", "run_manager.RunManager.train_one_epoch", "int", "run_manager.RunManager.run_config.train_loader.reset", "run_manager.RunManager.run_config.valid_loader.reset", "run_manager.RunManager.run_config.test_loader.reset", "print", "time.time", "print", "run_manager.RunManager.validate", "max", "run_manager.RunManager.save_model", "len", "run_manager.RunManager.run_config.adjust_learning_rate", "run_manager.RunManager.train.train_log_func"], "methods", ["home.repos.pwc.inspect_result.mac-automl_itpruner.Cifar.run_manager.RunManager.train_one_epoch", "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.utils.AverageMeter.reset", "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.utils.AverageMeter.reset", "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.utils.AverageMeter.reset", "home.repos.pwc.inspect_result.mac-automl_itpruner.Cifar.run_manager.RunManager.validate", "home.repos.pwc.inspect_result.mac-automl_itpruner.learners.basic_learner.BasicLearner.save_model", "home.repos.pwc.inspect_result.mac-automl_itpruner.Cifar.run_manager.RunConfig.adjust_learning_rate"], ["", "def", "train", "(", "self", ",", "print_top5", "=", "False", ")", ":", "\n", "        ", "def", "train_log_func", "(", "epoch_", ",", "i", ",", "batch_time", ",", "data_time", ",", "losses", ",", "top1", ",", "top5", ",", "lr", ")", ":", "\n", "            ", "batch_log", "=", "'Train [{0}][{1}/{2}]\\t'", "'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "'Data {data_time.val:.3f} ({data_time.avg:.3f})\\t'", "'Loss {losses.val:.4f} ({losses.avg:.4f})\\t'", "'Top-1 acc {top1.val:.3f} ({top1.avg:.3f})'", ".", "format", "(", "epoch_", "+", "1", ",", "i", ",", "len", "(", "self", ".", "run_config", ".", "train_loader", ")", "-", "1", ",", "\n", "batch_time", "=", "batch_time", ",", "data_time", "=", "data_time", ",", "losses", "=", "losses", ",", "top1", "=", "top1", ")", "\n", "if", "print_top5", ":", "\n", "                ", "batch_log", "+=", "'\\tTop-5 acc {top5.val:.3f} ({top5.avg:.3f})'", ".", "format", "(", "\n", "top5", "=", "top5", ")", "\n", "", "batch_log", "+=", "'\\tlr {lr:.5f}'", ".", "format", "(", "lr", "=", "lr", ")", "\n", "return", "batch_log", "\n", "\n", "", "for", "epoch", "in", "range", "(", "self", ".", "start_epoch", ",", "self", ".", "run_config", ".", "n_epochs", ")", ":", "\n", "            ", "if", "self", ".", "run_config", ".", "local_rank", "==", "0", ":", "\n", "                ", "print", "(", "'\\n'", ",", "'-'", "*", "30", ",", "'Train epoch: %d'", "%", "\n", "(", "epoch", "+", "1", ")", ",", "'-'", "*", "30", ",", "'\\n'", ")", "\n", "\n", "", "end", "=", "time", ".", "time", "(", ")", "\n", "train_top1", ",", "train_top5", "=", "self", ".", "train_one_epoch", "(", "\n", "lambda", "i", ":", "self", ".", "run_config", ".", "adjust_learning_rate", "(", "\n", "self", ".", "optimizer", ",", "epoch", ",", "i", ",", "len", "(", "self", ".", "run_config", ".", "train_loader", ")", ")", ",", "\n", "lambda", "i", ",", "batch_time", ",", "data_time", ",", "losses", ",", "top1", ",", "top5", ",", "new_lr", ":", "\n", "train_log_func", "(", "epoch", ",", "i", ",", "batch_time", ",", "data_time", ",", "\n", "losses", ",", "top1", ",", "top5", ",", "new_lr", ")", ",", "\n", "epoch", "\n", ")", "\n", "time_per_epoch", "=", "time", ".", "time", "(", ")", "-", "end", "\n", "seconds_left", "=", "int", "(", "\n", "(", "self", ".", "run_config", ".", "n_epochs", "-", "epoch", "-", "1", ")", "*", "time_per_epoch", ")", "\n", "if", "self", ".", "run_config", ".", "local_rank", "==", "0", ":", "\n", "                ", "print", "(", "'Time per epoch: %s, Est. complete in: %s'", "%", "(", "\n", "str", "(", "timedelta", "(", "seconds", "=", "time_per_epoch", ")", ")", ",", "\n", "str", "(", "timedelta", "(", "seconds", "=", "seconds_left", ")", ")", ")", ")", "\n", "\n", "", "if", "(", "epoch", "+", "1", ")", "%", "self", ".", "run_config", ".", "validation_frequency", "==", "0", ":", "\n", "                ", "val_loss", ",", "val_acc", ",", "val_acc5", "=", "self", ".", "validate", "(", "\n", "is_test", "=", "False", ",", "return_top5", "=", "True", ")", "\n", "is_best", "=", "val_acc", ">", "self", ".", "best_acc", "\n", "self", ".", "best_acc", "=", "max", "(", "self", ".", "best_acc", ",", "val_acc", ")", "\n", "val_log", "=", "'Valid [{0}/{1}]\\tloss {2:.3f}\\ttop-1 acc {3:.3f} ({4:.3f})'", ".", "format", "(", "epoch", "+", "1", ",", "self", ".", "run_config", ".", "n_epochs", ",", "\n", "val_loss", ",", "val_acc", ",", "self", ".", "best_acc", ")", "\n", "if", "print_top5", ":", "\n", "                    ", "val_log", "+=", "'\\ttop-5 acc {0:.3f}\\tTrain top-1 {top1.avg:.3f}\\ttop-5 {top5.avg:.3f}'", ".", "format", "(", "val_acc5", ",", "top1", "=", "train_top1", ",", "top5", "=", "train_top5", ")", "\n", "", "else", ":", "\n", "                    ", "val_log", "+=", "'\\tTrain top-1 {top1.avg:.3f}'", ".", "format", "(", "\n", "top1", "=", "train_top1", ")", "\n", "", "if", "self", ".", "run_config", ".", "local_rank", "==", "0", ":", "\n", "                    ", "self", ".", "write_log", "(", "val_log", ",", "'valid'", ")", "\n", "", "", "else", ":", "\n", "                ", "is_best", "=", "False", "\n", "", "if", "self", ".", "run_config", ".", "local_rank", "==", "0", ":", "\n", "                ", "self", ".", "save_model", "(", "{", "\n", "'epoch'", ":", "epoch", ",", "\n", "'best_acc'", ":", "self", ".", "best_acc", ",", "\n", "'optimizer'", ":", "self", ".", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'state_dict'", ":", "self", ".", "net", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "is_best", "=", "is_best", ")", "\n", "", "self", ".", "run_config", ".", "train_loader", ".", "reset", "(", ")", "\n", "self", ".", "run_config", ".", "valid_loader", ".", "reset", "(", ")", "\n", "self", ".", "run_config", ".", "test_loader", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.Cifar.run_manager.RunManager.reduce_tensor": [[574, 579], ["tensor.clone", "torch.all_reduce", "torch.all_reduce", "torch.all_reduce", "torch.all_reduce", "torch.all_reduce"], "methods", ["None"], ["", "", "def", "reduce_tensor", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "rt", "=", "tensor", ".", "clone", "(", ")", "\n", "dist", ".", "all_reduce", "(", "rt", ",", "op", "=", "dist", ".", "ReduceOp", ".", "SUM", ")", "\n", "rt", "/=", "self", ".", "run_config", ".", "world_size", "\n", "return", "rt", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mac-automl_itpruner.learners.basic_learner.BasicLearner.__init__": [[18, 28], ["basic_learner.BasicLearner.__build_path", "basic_learner.BasicLearner.setup_optim", "torch.CrossEntropyLoss().cuda", "torch.CrossEntropyLoss().cuda", "torch.CrossEntropyLoss().cuda", "torch.CrossEntropyLoss().cuda", "basic_learner.BasicLearner.check_is_primary", "tensorboardX.SummaryWriter", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "os.path.dirname"], "methods", ["home.repos.pwc.inspect_result.mac-automl_itpruner.learners.basic_learner.BasicLearner.__build_path", "home.repos.pwc.inspect_result.mac-automl_itpruner.learners.basic_learner.BasicLearner.setup_optim", "home.repos.pwc.inspect_result.mac-automl_itpruner.learners.basic_learner.BasicLearner.check_is_primary"], ["def", "__init__", "(", "self", ",", "model", ",", "loaders", ",", "args", ",", "device", ")", ":", "\n", "    ", "self", ".", "args", "=", "args", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "__build_path", "(", ")", "\n", "self", ".", "train_loader", ",", "self", ".", "test_loader", "=", "loaders", "\n", "self", ".", "setup_optim", "(", ")", "\n", "self", ".", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "cuda", "(", ")", "\n", "if", "self", ".", "check_is_primary", "(", ")", ":", "\n", "      ", "self", ".", "writer", "=", "SummaryWriter", "(", "os", ".", "path", ".", "dirname", "(", "self", ".", "save_path", ")", ")", "\n", "# self.add_graph()", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.learners.basic_learner.BasicLearner.train": [[30, 57], ["basic_learner.BasicLearner.warm_up_lr", "range", "basic_learner.BasicLearner.model.train", "basic_learner.BasicLearner.check_is_primary", "basic_learner.BasicLearner.epoch", "basic_learner.BasicLearner.check_is_primary", "train_sampler.set_epoch", "logging.info", "basic_learner.BasicLearner.writer.add_scalar", "basic_learner.BasicLearner.writer.add_scalar", "basic_learner.BasicLearner.lr_scheduler.step", "basic_learner.BasicLearner.check_is_primary", "basic_learner.BasicLearner.evaluate", "basic_learner.BasicLearner.check_is_primary", "logging.info", "basic_learner.BasicLearner.save_model"], "methods", ["home.repos.pwc.inspect_result.mac-automl_itpruner.learners.basic_learner.BasicLearner.warm_up_lr", "home.repos.pwc.inspect_result.mac-automl_itpruner.learners.basic_learner.BasicLearner.train", "home.repos.pwc.inspect_result.mac-automl_itpruner.learners.basic_learner.BasicLearner.check_is_primary", "home.repos.pwc.inspect_result.mac-automl_itpruner.learners.basic_learner.BasicLearner.epoch", "home.repos.pwc.inspect_result.mac-automl_itpruner.learners.basic_learner.BasicLearner.check_is_primary", "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.utils.WarmUpCosineLRScheduler.step", "home.repos.pwc.inspect_result.mac-automl_itpruner.learners.basic_learner.BasicLearner.check_is_primary", "home.repos.pwc.inspect_result.mac-automl_itpruner.learners.basic_learner.BasicLearner.evaluate", "home.repos.pwc.inspect_result.mac-automl_itpruner.learners.basic_learner.BasicLearner.check_is_primary", "home.repos.pwc.inspect_result.mac-automl_itpruner.learners.basic_learner.BasicLearner.save_model"], ["", "", "def", "train", "(", "self", ",", "train_sampler", "=", "None", ")", ":", "\n", "    ", "self", ".", "warm_up_lr", "(", ")", "\n", "for", "epoch", "in", "range", "(", "self", ".", "args", ".", "epochs", ")", ":", "\n", "      ", "if", "self", ".", "args", ".", "distributed", ":", "\n", "        ", "assert", "train_sampler", "!=", "None", "\n", "train_sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "\n", "", "self", ".", "model", ".", "train", "(", ")", "\n", "if", "self", ".", "check_is_primary", "(", ")", ":", "\n", "        ", "logging", ".", "info", "(", "\"Training at Epoch: %d\"", "%", "epoch", ")", "\n", "", "train_acc", ",", "train_loss", "=", "self", ".", "epoch", "(", "True", ")", "\n", "\n", "if", "self", ".", "check_is_primary", "(", ")", ":", "\n", "        ", "self", ".", "writer", ".", "add_scalar", "(", "'train_acc'", ",", "train_acc", ",", "epoch", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'train_loss'", ",", "train_loss", ",", "epoch", ")", "\n", "\n", "", "if", "self", ".", "lr_scheduler", ":", "\n", "        ", "self", ".", "lr_scheduler", ".", "step", "(", ")", "\n", "\n", "", "if", "(", "epoch", "+", "1", ")", "%", "self", ".", "args", ".", "eval_epoch", "==", "0", ":", "\n", "# evaluate every GPU, but we only show the results on a single one.!", "\n", "        ", "if", "self", ".", "check_is_primary", "(", ")", ":", "\n", "          ", "logging", ".", "info", "(", "\"Evaluation at Epoch: %d\"", "%", "epoch", ")", "\n", "", "self", ".", "evaluate", "(", "True", ",", "epoch", ")", "\n", "\n", "if", "self", ".", "check_is_primary", "(", ")", ":", "\n", "          ", "self", ".", "save_model", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.learners.basic_learner.BasicLearner.evaluate": [[58, 74], ["basic_learner.BasicLearner.model.eval", "sync_bn_stat", "basic_learner.BasicLearner.load_model", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "basic_learner.BasicLearner.epoch", "basic_learner.BasicLearner.check_is_primary", "basic_learner.BasicLearner.writer.add_scalar", "basic_learner.BasicLearner.writer.add_scalar"], "methods", ["home.repos.pwc.inspect_result.mac-automl_itpruner.utils.dist_utils.sync_bn_stat", "home.repos.pwc.inspect_result.mac-automl_itpruner.learners.basic_learner.BasicLearner.load_model", "home.repos.pwc.inspect_result.mac-automl_itpruner.learners.basic_learner.BasicLearner.epoch", "home.repos.pwc.inspect_result.mac-automl_itpruner.learners.basic_learner.BasicLearner.check_is_primary"], ["", "", "", "", "def", "evaluate", "(", "self", ",", "is_train", "=", "False", ",", "epoch", "=", "None", ")", ":", "\n", "    ", "self", ".", "model", ".", "eval", "(", ")", "\n", "# NOTE: syncronizing the BN statistics", "\n", "if", "self", ".", "args", ".", "distributed", ":", "\n", "      ", "sync_bn_stat", "(", "self", ".", "model", ",", "self", ".", "args", ".", "world_size", ")", "\n", "\n", "", "if", "not", "is_train", ":", "\n", "      ", "self", ".", "load_model", "(", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "      ", "test_acc", ",", "test_loss", "=", "self", ".", "epoch", "(", "False", ")", "\n", "\n", "", "if", "is_train", "and", "epoch", "and", "self", ".", "check_is_primary", "(", ")", ":", "\n", "      ", "self", ".", "writer", ".", "add_scalar", "(", "'test_acc'", ",", "test_acc", ",", "epoch", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'test_loss'", ",", "test_loss", ",", "epoch", ")", "\n", "", "return", "test_acc", ",", "test_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.learners.basic_learner.BasicLearner.finetune": [[75, 102], ["basic_learner.BasicLearner.load_model", "basic_learner.BasicLearner.evaluate", "range", "basic_learner.BasicLearner.model.train", "basic_learner.BasicLearner.epoch", "basic_learner.BasicLearner.check_is_primary", "basic_learner.BasicLearner.check_is_primary", "train_sampler.set_epoch", "basic_learner.BasicLearner.writer.add_scalar", "basic_learner.BasicLearner.writer.add_scalar", "basic_learner.BasicLearner.check_is_primary", "basic_learner.BasicLearner.evaluate", "basic_learner.BasicLearner.save_model", "logging.info"], "methods", ["home.repos.pwc.inspect_result.mac-automl_itpruner.learners.basic_learner.BasicLearner.load_model", "home.repos.pwc.inspect_result.mac-automl_itpruner.learners.basic_learner.BasicLearner.evaluate", "home.repos.pwc.inspect_result.mac-automl_itpruner.learners.basic_learner.BasicLearner.train", "home.repos.pwc.inspect_result.mac-automl_itpruner.learners.basic_learner.BasicLearner.epoch", "home.repos.pwc.inspect_result.mac-automl_itpruner.learners.basic_learner.BasicLearner.check_is_primary", "home.repos.pwc.inspect_result.mac-automl_itpruner.learners.basic_learner.BasicLearner.check_is_primary", "home.repos.pwc.inspect_result.mac-automl_itpruner.learners.basic_learner.BasicLearner.check_is_primary", "home.repos.pwc.inspect_result.mac-automl_itpruner.learners.basic_learner.BasicLearner.evaluate", "home.repos.pwc.inspect_result.mac-automl_itpruner.learners.basic_learner.BasicLearner.save_model"], ["", "def", "finetune", "(", "self", ",", "train_sampler", ")", ":", "\n", "    ", "self", ".", "load_model", "(", ")", "\n", "self", ".", "evaluate", "(", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "self", ".", "args", ".", "epochs", ")", ":", "\n", "      ", "if", "self", ".", "args", ".", "distributed", ":", "\n", "        ", "assert", "train_sampler", "!=", "None", "\n", "train_sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "\n", "", "self", ".", "model", ".", "train", "(", ")", "\n", "\n", "# NOTE: use the preset learning rate for all epochs.", "\n", "ft_acc", ",", "ft_loss", "=", "self", ".", "epoch", "(", "True", ")", "\n", "\n", "if", "self", ".", "check_is_primary", "(", ")", ":", "\n", "        ", "self", ".", "writer", ".", "add_scalar", "(", "'ft_acc'", ",", "ft_acc", ",", "epoch", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'ft_loss'", ",", "ft_loss", ",", "epoch", ")", "\n", "\n", "# evaluate every k step", "\n", "", "if", "(", "epoch", "+", "1", ")", "%", "self", ".", "args", ".", "eval_epoch", "==", "0", ":", "\n", "        ", "if", "self", ".", "check_is_primary", "(", ")", ":", "\n", "          ", "logging", ".", "info", "(", "\"Evaluation at Epoch: %d\"", "%", "epoch", ")", "\n", "", "self", ".", "evaluate", "(", "True", ",", "epoch", ")", "\n", "\n", "# save the model", "\n", "", "if", "self", ".", "check_is_primary", "(", ")", ":", "\n", "        ", "self", ".", "save_model", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.learners.basic_learner.BasicLearner.misc": [[103, 105], ["NotImplementedError"], "methods", ["None"], ["", "", "", "def", "misc", "(", "self", ")", ":", "\n", "    ", "raise", "NotImplementedError", "(", "\"Misc functions are implemented in sub classes\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.learners.basic_learner.BasicLearner.epoch": [[106, 160], ["AverageMeter", "AverageMeter", "AverageMeter", "AverageMeter", "len", "ProgressMeter", "time.time", "enumerate", "basic_learner.BasicLearner.model", "accuracy", "loss.data.clone", "AverageMeter.update", "AverageMeter.update", "AverageMeter.update", "AverageMeter.update", "time.time", "X.to", "y.to", "basic_learner.BasicLearner.criterion", "acc1.clone", "acc5.clone", "torch.all_reduce", "torch.all_reduce", "torch.all_reduce", "torch.all_reduce", "torch.all_reduce", "torch.all_reduce", "torch.all_reduce", "torch.all_reduce", "torch.all_reduce", "torch.all_reduce", "torch.all_reduce", "torch.all_reduce", "basic_learner.BasicLearner.opt.zero_grad", "loss.backward", "basic_learner.BasicLearner.opt.step", "reduced_acc1[].item", "reduced_acc5[].item", "loss.data.clone.item", "basic_learner.BasicLearner.check_is_primary", "ProgressMeter.show", "average_gradients", "time.time"], "methods", ["home.repos.pwc.inspect_result.mac-automl_itpruner.utils.utils.accuracy", "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.utils.WarmUpCosineLRScheduler.step", "home.repos.pwc.inspect_result.mac-automl_itpruner.learners.basic_learner.BasicLearner.check_is_primary", "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.utils.ProgressMeter.show", "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.dist_utils.average_gradients"], ["", "def", "epoch", "(", "self", ",", "is_train", ")", ":", "\n", "    ", "\"\"\" Rewrite this function if necessary in the sub-classes. \"\"\"", "\n", "\n", "loader", "=", "self", ".", "train_loader", "if", "is_train", "else", "self", ".", "test_loader", "\n", "\n", "# setup statistics", "\n", "batch_time", "=", "AverageMeter", "(", "'Time'", ",", "':3.3f'", ")", "\n", "# data_time = AverageMeter('Data', ':6.3f')", "\n", "losses", "=", "AverageMeter", "(", "'Loss'", ",", "':.4e'", ")", "\n", "top1", "=", "AverageMeter", "(", "'Acc@1'", ",", "':3.3f'", ")", "\n", "top5", "=", "AverageMeter", "(", "'Acc@5'", ",", "':3.3f'", ")", "\n", "metrics", "=", "[", "batch_time", ",", "top1", ",", "top5", ",", "losses", "]", "\n", "\n", "loader_len", "=", "len", "(", "loader", ")", "\n", "progress", "=", "ProgressMeter", "(", "loader_len", ",", "*", "metrics", ",", "prefix", "=", "'Job id: %s, '", "%", "self", ".", "args", ".", "job_id", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "for", "idx", ",", "(", "X", ",", "y", ")", "in", "enumerate", "(", "loader", ")", ":", "\n", "\n", "# data_time.update(time.time() - end)", "\n", "      ", "X", ",", "y", "=", "X", ".", "to", "(", "self", ".", "device", ")", ",", "y", ".", "to", "(", "self", ".", "device", ")", "\n", "yp", "=", "self", ".", "model", "(", "X", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "yp", ",", "y", ")", "/", "self", ".", "args", ".", "world_size", "\n", "\n", "acc1", ",", "acc5", "=", "accuracy", "(", "yp", ",", "y", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "\n", "reduced_loss", "=", "loss", ".", "data", ".", "clone", "(", ")", "\n", "reduced_acc1", "=", "acc1", ".", "clone", "(", ")", "/", "self", ".", "args", ".", "world_size", "\n", "reduced_acc5", "=", "acc5", ".", "clone", "(", ")", "/", "self", ".", "args", ".", "world_size", "\n", "\n", "if", "self", ".", "args", ".", "distributed", ":", "\n", "        ", "dist", ".", "all_reduce", "(", "reduced_loss", ")", "\n", "dist", ".", "all_reduce", "(", "reduced_acc1", ")", "\n", "dist", ".", "all_reduce", "(", "reduced_acc5", ")", "\n", "\n", "", "if", "is_train", ":", "\n", "        ", "self", ".", "opt", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "if", "self", ".", "args", ".", "distributed", ":", "\n", "          ", "average_gradients", "(", "self", ".", "model", ")", "# NOTE: important", "\n", "", "self", ".", "opt", ".", "step", "(", ")", "\n", "\n", "# update statistics", "\n", "", "top1", ".", "update", "(", "reduced_acc1", "[", "0", "]", ".", "item", "(", ")", ",", "X", ".", "shape", "[", "0", "]", ")", "\n", "top5", ".", "update", "(", "reduced_acc5", "[", "0", "]", ".", "item", "(", ")", ",", "X", ".", "shape", "[", "0", "]", ")", "\n", "losses", ".", "update", "(", "reduced_loss", ".", "item", "(", ")", ",", "X", ".", "shape", "[", "0", "]", ")", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "# show the training/evaluating statistics", "\n", "if", "self", ".", "check_is_primary", "(", ")", "and", "(", "(", "idx", "%", "self", ".", "args", ".", "print_freq", "==", "0", ")", "or", "(", "idx", "+", "1", ")", "%", "loader_len", "==", "0", ")", ":", "\n", "        ", "progress", ".", "show", "(", "idx", ")", "\n", "\n", "", "", "return", "top1", ".", "avg", ",", "losses", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.learners.basic_learner.BasicLearner.setup_optim": [[161, 193], ["basic_learner.BasicLearner.args.model_type.startswith", "torch.SGD", "torch.SGD", "torch.SGD", "torch.SGD", "torch.lr_scheduler.MultiStepLR", "torch.lr_scheduler.MultiStepLR", "torch.lr_scheduler.MultiStepLR", "torch.lr_scheduler.MultiStepLR", "basic_learner.BasicLearner.model.parameters", "basic_learner.BasicLearner.args.model_type.startswith", "basic_learner.BasicLearner.args.model_type.startswith", "torch.SGD", "torch.SGD", "torch.SGD", "torch.SGD", "basic_learner.BasicLearner.args.model_type.startswith", "basic_learner.BasicLearner.model.parameters", "torch.lr_scheduler.CosineAnnealingLR", "torch.lr_scheduler.CosineAnnealingLR", "torch.lr_scheduler.CosineAnnealingLR", "torch.lr_scheduler.CosineAnnealingLR", "torch.SGD", "torch.SGD", "torch.SGD", "torch.SGD", "torch.lr_scheduler.MultiStepLR", "torch.lr_scheduler.MultiStepLR", "torch.lr_scheduler.MultiStepLR", "torch.lr_scheduler.MultiStepLR", "basic_learner.BasicLearner.args.model_type.startswith", "int", "int", "torch.lr_scheduler.MultiStepLR", "torch.lr_scheduler.MultiStepLR", "torch.lr_scheduler.MultiStepLR", "torch.lr_scheduler.MultiStepLR", "ValueError", "basic_learner.BasicLearner.model.parameters", "torch.SGD", "torch.SGD", "torch.SGD", "torch.SGD", "torch.lr_scheduler.CosineAnnealingLR", "torch.lr_scheduler.CosineAnnealingLR", "torch.lr_scheduler.CosineAnnealingLR", "torch.lr_scheduler.CosineAnnealingLR", "ValueError", "basic_learner.BasicLearner.model.parameters", "int", "int", "int", "int", "int"], "methods", ["None"], ["", "def", "setup_optim", "(", "self", ")", ":", "\n", "    ", "if", "self", ".", "args", ".", "model_type", ".", "startswith", "(", "'model_'", ")", ":", "\n", "      ", "self", ".", "opt", "=", "optim", ".", "SGD", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "args", ".", "lr", ",", "momentum", "=", "self", ".", "args", ".", "momentum", ",", "nesterov", "=", "self", ".", "args", ".", "nesterov", ",", "weight_decay", "=", "self", ".", "args", ".", "weight_decay", ")", "\n", "self", ".", "lr_scheduler", "=", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "self", ".", "opt", ",", "milestones", "=", "[", "int", "(", "self", ".", "args", ".", "epochs", "*", "0.5", ")", ",", "int", "(", "self", ".", "args", ".", "epochs", "*", "0.75", ")", "]", ")", "\n", "\n", "", "elif", "self", ".", "args", ".", "model_type", ".", "startswith", "(", "'resnet_'", ")", "or", "self", ".", "args", ".", "model_type", ".", "startswith", "(", "'vgg_'", ")", ":", "\n", "      ", "self", ".", "opt", "=", "optim", ".", "SGD", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "args", ".", "lr", ",", "momentum", "=", "self", ".", "args", ".", "momentum", ",", "nesterov", "=", "self", ".", "args", ".", "nesterov", ",", "weight_decay", "=", "self", ".", "args", ".", "weight_decay", ")", "\n", "if", "self", ".", "args", ".", "lr_decy_type", "==", "'cosine'", ":", "\n", "        ", "self", ".", "lr_scheduler", "=", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "self", ".", "opt", ",", "self", ".", "args", ".", "epochs", ",", "eta_min", "=", "0", ")", "\n", "", "elif", "self", ".", "args", ".", "lr_decy_type", "==", "'multi_step'", ":", "\n", "        ", "self", ".", "lr_scheduler", "=", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "self", ".", "opt", ",", "milestones", "=", "[", "int", "(", "self", ".", "args", ".", "epochs", "*", "0.5", ")", ",", "int", "(", "self", ".", "args", ".", "epochs", "*", "0.75", ")", "]", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Unknown decy type\"", ")", "\n", "\n", "", "", "elif", "self", ".", "args", ".", "model_type", ".", "startswith", "(", "'wideresnet'", ")", ":", "\n", "      ", "self", ".", "opt", "=", "optim", ".", "SGD", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "args", ".", "lr", ",", "momentum", "=", "self", ".", "args", ".", "momentum", ",", "nesterov", "=", "self", ".", "args", ".", "nesterov", ",", "weight_decay", "=", "self", ".", "args", ".", "weight_decay", ")", "\n", "self", ".", "lr_scheduler", "=", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "self", ".", "opt", ",", "milestones", "=", "[", "int", "(", "self", ".", "args", ".", "epochs", "*", "0.3", ")", ",", "int", "(", "self", ".", "args", ".", "epochs", "*", "0.6", ")", ",", "int", "(", "self", ".", "args", ".", "epochs", "*", "0.8", ")", "]", ",", "gamma", "=", "0.2", ")", "\n", "\n", "", "elif", "self", ".", "args", ".", "model_type", ".", "startswith", "(", "'mobilenet_v2'", ")", ":", "\n", "# default: 150 epochs, 5e-2 lr with cosine, 4e-5 wd, no dropout", "\n", "      ", "self", ".", "opt", "=", "optim", ".", "SGD", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "args", ".", "lr", ",", "momentum", "=", "self", ".", "args", ".", "momentum", ",", "nesterov", "=", "self", ".", "args", ".", "nesterov", ",", "weight_decay", "=", "self", ".", "args", ".", "weight_decay", ")", "\n", "self", ".", "lr_scheduler", "=", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "self", ".", "opt", ",", "self", ".", "args", ".", "epochs", ",", "eta_min", "=", "0", ")", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "\"Unknown model, failed to initalize optim\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.learners.basic_learner.BasicLearner.add_graph": [[194, 199], ["torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "basic_learner.BasicLearner.writer.add_graph"], "methods", ["home.repos.pwc.inspect_result.mac-automl_itpruner.learners.basic_learner.BasicLearner.add_graph"], ["", "", "def", "add_graph", "(", "self", ")", ":", "\n", "# create dummy input", "\n", "    ", "x", "=", "torch", ".", "randn", "(", "self", ".", "args", ".", "batch_size", ",", "3", ",", "32", ",", "32", ")", "\n", "with", "self", ".", "writer", ":", "\n", "      ", "self", ".", "writer", ".", "add_graph", "(", "self", ".", "model", ",", "(", "x", ",", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.learners.basic_learner.BasicLearner.__build_path": [[200, 210], ["os.path.join", "os.path.dirname", "os.path.join"], "methods", ["None"], ["", "", "def", "__build_path", "(", "self", ")", ":", "\n", "    ", "if", "self", ".", "args", ".", "exec_mode", "==", "'finetune'", ":", "\n", "      ", "self", ".", "load_path", "=", "self", ".", "args", ".", "load_path", "\n", "self", ".", "save_path", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "self", ".", "load_path", ")", ",", "'model_ft.pt'", ")", "\n", "", "elif", "self", ".", "args", ".", "exec_mode", "==", "'train'", ":", "\n", "      ", "self", ".", "save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "save_path", ",", "'_'", ".", "join", "(", "[", "self", ".", "args", ".", "model_type", ",", "self", ".", "args", ".", "learner", "]", ")", ",", "self", ".", "args", ".", "job_id", ",", "'model.pt'", ")", "\n", "self", ".", "load_path", "=", "self", ".", "save_path", "\n", "", "else", ":", "\n", "      ", "self", ".", "load_path", "=", "self", ".", "args", ".", "load_path", "\n", "self", ".", "save_path", "=", "self", ".", "load_path", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.learners.basic_learner.BasicLearner.warm_up_lr": [[211, 217], ["basic_learner.BasicLearner.args.model_type.endswith", "basic_learner.BasicLearner.args.model_type.endswith"], "methods", ["None"], ["", "", "def", "warm_up_lr", "(", "self", ")", ":", "\n", "    ", "if", "self", ".", "args", ".", "model_type", ".", "endswith", "(", "'1202'", ")", "or", "self", ".", "args", ".", "model_type", ".", "endswith", "(", "'110'", ")", ":", "\n", "      ", "for", "param", "in", "self", ".", "opt", ".", "param_groups", ":", "\n", "        ", "param", "[", "'lr'", "]", "=", "0.1", "*", "self", ".", "args", ".", "lr", "\n", "", "", "else", ":", "\n", "      ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.learners.basic_learner.BasicLearner.check_is_primary": [[218, 224], ["None"], "methods", ["None"], ["", "", "def", "check_is_primary", "(", "self", ")", ":", "\n", "    ", "if", "(", "self", ".", "args", ".", "distributed", "and", "self", ".", "args", ".", "rank", "==", "0", ")", "or", "not", "self", ".", "args", ".", "distributed", ":", "\n", "      ", "return", "True", "\n", "", "else", ":", "\n", "      ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.learners.basic_learner.BasicLearner.save_model": [[225, 230], ["torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "logging.info", "basic_learner.BasicLearner.model.state_dict", "basic_learner.BasicLearner.opt.state_dict"], "methods", ["home.repos.pwc.inspect_result.mac-automl_itpruner.utils.utils.WarmUpCosineLRScheduler.state_dict", "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.utils.WarmUpCosineLRScheduler.state_dict"], ["", "", "def", "save_model", "(", "self", ")", ":", "\n", "    ", "state", "=", "{", "'state_dict'", ":", "self", ".", "model", ".", "state_dict", "(", ")", ",", "'optimizer'", ":", "self", ".", "opt", ".", "state_dict", "(", ")", "}", "\n", "torch", ".", "save", "(", "state", ",", "self", ".", "save_path", ")", "\n", "logging", ".", "info", "(", "\"Model stored at: \"", "+", "self", ".", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.learners.basic_learner.BasicLearner.load_model": [[231, 245], ["basic_learner.BasicLearner.model.load_state_dict", "basic_learner.BasicLearner.opt.load_state_dict", "logging.info", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "broadcast_params", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device"], "methods", ["home.repos.pwc.inspect_result.mac-automl_itpruner.utils.utils.WarmUpCosineLRScheduler.load_state_dict", "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.utils.WarmUpCosineLRScheduler.load_state_dict", "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.dist_utils.broadcast_params"], ["", "def", "load_model", "(", "self", ")", ":", "\n", "    ", "if", "self", ".", "args", ".", "distributed", ":", "\n", "# read parameters to each GPU seperately", "\n", "      ", "loc", "=", "'cuda:{}'", ".", "format", "(", "torch", ".", "cuda", ".", "current_device", "(", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "self", ".", "load_path", ",", "map_location", "=", "loc", ")", "\n", "", "else", ":", "\n", "      ", "checkpoint", "=", "torch", ".", "load", "(", "self", ".", "load_path", ")", "\n", "\n", "", "self", ".", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "self", ".", "opt", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "logging", ".", "info", "(", "\"Model succesfully restored from %s\"", "%", "self", ".", "load_path", ")", "\n", "\n", "if", "self", ".", "args", ".", "distributed", ":", "\n", "      ", "broadcast_params", "(", "self", ".", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.nets.se_module.SELayer.__init__": [[6, 14], ["torch.nn.Module.__init__", "torch.nn.AdaptiveAvgPool2d", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.mac-automl_itpruner.nets.__init__.SearchRunConfig.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channel", ",", "reduction", "=", "16", ")", ":", "\n", "        ", "super", "(", "SELayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "channel", ",", "channel", "//", "reduction", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "channel", "//", "reduction", ",", "channel", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.nets.se_module.SELayer.forward": [[16, 21], ["x.size", "se_module.SELayer.avg_pool().view", "se_module.SELayer.fc().view", "se_module.SELayer.expand_as", "se_module.SELayer.avg_pool", "se_module.SELayer.fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "b", ",", "c", ",", "_", ",", "_", "=", "x", ".", "size", "(", ")", "\n", "y", "=", "self", ".", "avg_pool", "(", "x", ")", ".", "view", "(", "b", ",", "c", ")", "\n", "y", "=", "self", ".", "fc", "(", "y", ")", ".", "view", "(", "b", ",", "c", ",", "1", ",", "1", ")", "\n", "return", "x", "*", "y", ".", "expand_as", "(", "x", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mac-automl_itpruner.nets.model_helper.ModelHelper.__init__": [[7, 9], ["None"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ")", ":", "\n", "    ", "self", ".", "model_dict", "=", "{", "'resnet_decode'", ":", "resnet_decode", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.nets.model_helper.ModelHelper.get_model": [[10, 29], ["model_helper.ModelHelper.__get_number_class", "model_helper.ModelHelper.model_dict.keys", "ValueError", "ValueError", "int", "print", "print", "print_model_param_nums", "print_model_param_flops", "args.cfg.split"], "methods", ["home.repos.pwc.inspect_result.mac-automl_itpruner.nets.model_helper.ModelHelper.__get_number_class", "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.compute_flops.print_model_param_nums", "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.compute_flops.print_model_param_flops"], ["", "def", "get_model", "(", "self", ",", "args", ")", ":", "\n", "    ", "if", "args", ".", "model_type", "not", "in", "self", ".", "model_dict", ".", "keys", "(", ")", ":", "\n", "      ", "raise", "ValueError", "(", "'Wrong model type.'", ")", "\n", "\n", "", "num_classes", "=", "self", ".", "__get_number_class", "(", "args", ".", "dataset", ")", "\n", "\n", "if", "'decode'", "in", "args", ".", "model_type", ":", "\n", "      ", "if", "args", ".", "cfg", "==", "''", ":", "\n", "        ", "raise", "ValueError", "(", "'Running decoding model. Empty cfg!'", ")", "\n", "", "cfg", "=", "[", "int", "(", "v", ")", "for", "v", "in", "args", ".", "cfg", ".", "split", "(", "','", ")", "]", "\n", "model", "=", "self", ".", "model_dict", "[", "args", ".", "model_type", "]", "(", "cfg", ",", "num_classes", ",", "args", ".", "se", ",", "args", ".", "se_reduction", ")", "\n", "if", "args", ".", "rank", "==", "0", ":", "\n", "        ", "print", "(", "model", ")", "\n", "print", "(", "\"Flops and params:\"", ")", "\n", "resol", "=", "32", "if", "args", ".", "dataset", "==", "'cifar10'", "else", "224", "\n", "print_model_param_nums", "(", "model", ")", "\n", "print_model_param_flops", "(", "model", ",", "resol", ",", "multiply_adds", "=", "False", ")", "\n", "\n", "", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.nets.model_helper.ModelHelper.__get_number_class": [[30, 39], ["None"], "methods", ["None"], ["", "def", "__get_number_class", "(", "self", ",", "dataset", ")", ":", "\n", "# determine the number of classes", "\n", "    ", "if", "dataset", "==", "'cifar10'", ":", "\n", "      ", "num_classes", "=", "10", "\n", "", "elif", "dataset", "==", "'cifar100'", ":", "\n", "      ", "num_classes", "=", "100", "\n", "", "elif", "dataset", "==", "'ilsvrc_12'", ":", "\n", "      ", "num_classes", "=", "1000", "\n", "", "return", "num_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.nets.model_helper.test": [[40, 44], ["model_helper.ModelHelper", "ModelHelper.model_dict.keys", "print", "model_helper.ModelHelper.get_model"], "function", ["home.repos.pwc.inspect_result.mac-automl_itpruner.nets.model_helper.ModelHelper.get_model"], ["", "", "def", "test", "(", ")", ":", "\n", "  ", "mh", "=", "ModelHelper", "(", ")", "\n", "for", "k", "in", "mh", ".", "model_dict", ".", "keys", "(", ")", ":", "\n", "    ", "print", "(", "mh", ".", "get_model", "(", "k", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.nets.base_models.MyNetwork.forward": [[7, 9], ["None"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.nets.base_models.MyNetwork.feature_extract": [[10, 12], ["None"], "methods", ["None"], ["", "def", "feature_extract", "(", "self", ",", "x", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.nets.base_models.MyNetwork.config": [[13, 16], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "config", "(", "self", ")", ":", "# should include name/cfg/cfg_base/dataset", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.nets.base_models.MyNetwork.cfg2params": [[17, 19], ["None"], "methods", ["None"], ["", "def", "cfg2params", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.nets.base_models.MyNetwork.cfg2flops": [[20, 22], ["None"], "methods", ["None"], ["", "def", "cfg2flops", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.nets.base_models.MyNetwork.set_bn_param": [[23, 29], ["base_models.MyNetwork.modules", "isinstance", "isinstance"], "methods", ["None"], ["", "def", "set_bn_param", "(", "self", ",", "momentum", ",", "eps", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm1d", ")", ":", "\n", "                ", "m", ".", "momentum", "=", "momentum", "\n", "m", ".", "eps", "=", "eps", "\n", "", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.nets.base_models.MyNetwork.get_bn_param": [[30, 38], ["base_models.MyNetwork.modules", "isinstance", "isinstance"], "methods", ["None"], ["", "def", "get_bn_param", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm1d", ")", ":", "\n", "                ", "return", "{", "\n", "'momentum'", ":", "m", ".", "momentum", ",", "\n", "'eps'", ":", "m", ".", "eps", ",", "\n", "}", "\n", "", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.nets.base_models.MyNetwork.init_model": [[39, 69], ["base_models.MyNetwork.modules", "isinstance", "isinstance", "m.weight.data.normal_", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "math.sqrt", "m.weight.data.normal_", "m.weight.data.uniform_", "isinstance", "math.sqrt", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "math.sqrt", "m.bias.data.zero_", "m.weight.data.fill_", "m.bias.data.zero_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "m.weight.size"], "methods", ["None"], ["", "def", "init_model", "(", "self", ",", "model_init", ",", "init_div_groups", "=", "False", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "if", "model_init", "==", "'he_fout'", ":", "\n", "                    ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "if", "init_div_groups", ":", "\n", "                        ", "n", "/=", "m", ".", "groups", "\n", "", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "model_init", "==", "'he_fin'", ":", "\n", "                    ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "in_channels", "\n", "if", "init_div_groups", ":", "\n", "                        ", "n", "/=", "m", ".", "groups", "\n", "", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "model_init", "==", "'xavier_normal'", ":", "\n", "                    ", "nn", ".", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ".", "data", ")", "\n", "", "elif", "model_init", "==", "'xavier_uniform'", ":", "\n", "                    ", "nn", ".", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ".", "data", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "NotImplementedError", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "stdv", "=", "1.", "/", "math", ".", "sqrt", "(", "m", ".", "weight", ".", "size", "(", "1", ")", ")", "\n", "m", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm1d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.nets.base_models.MyNetwork.get_parameters": [[70, 94], ["base_models.MyNetwork.named_parameters", "base_models.MyNetwork.named_parameters", "base_models.MyNetwork.named_parameters", "ValueError"], "methods", ["None"], ["", "", "", "def", "get_parameters", "(", "self", ",", "keys", "=", "None", ",", "mode", "=", "'include'", ")", ":", "\n", "        ", "if", "keys", "is", "None", ":", "\n", "            ", "for", "name", ",", "param", "in", "self", ".", "named_parameters", "(", ")", ":", "\n", "                ", "yield", "param", "\n", "", "", "elif", "mode", "==", "'include'", ":", "\n", "            ", "for", "name", ",", "param", "in", "self", ".", "named_parameters", "(", ")", ":", "\n", "                ", "flag", "=", "False", "\n", "for", "key", "in", "keys", ":", "\n", "                    ", "if", "key", "in", "name", ":", "\n", "                        ", "flag", "=", "True", "\n", "break", "\n", "", "", "if", "flag", ":", "\n", "                    ", "yield", "param", "\n", "", "", "", "elif", "mode", "==", "'exclude'", ":", "\n", "            ", "for", "name", ",", "param", "in", "self", ".", "named_parameters", "(", ")", ":", "\n", "                ", "flag", "=", "True", "\n", "for", "key", "in", "keys", ":", "\n", "                    ", "if", "key", "in", "name", ":", "\n", "                        ", "flag", "=", "False", "\n", "break", "\n", "", "", "if", "flag", ":", "\n", "                    ", "yield", "param", "\n", "", "", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'do not support: %s'", "%", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.nets.base_models.MyNetwork.weight_parameters": [[95, 97], ["base_models.MyNetwork.get_parameters"], "methods", ["home.repos.pwc.inspect_result.mac-automl_itpruner.nets.base_models.MyNetwork.get_parameters"], ["", "", "def", "weight_parameters", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "get_parameters", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mac-automl_itpruner.nets.resnet_cifar.LambdaLayer.__init__": [[17, 20], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.mac-automl_itpruner.nets.__init__.SearchRunConfig.__init__"], ["    ", "def", "__init__", "(", "self", ",", "lambd", ")", ":", "\n", "        ", "super", "(", "LambdaLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "lambd", "=", "lambd", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.nets.resnet_cifar.LambdaLayer.forward": [[21, 23], ["resnet_cifar.LambdaLayer.lambd"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "lambd", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.nets.resnet_cifar.BasicBlock.__init__": [[27, 48], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "collections.OrderedDict", "collections.OrderedDict", "resnet_cifar.LambdaLayer", "resnet_cifar.LambdaLayer", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad"], "methods", ["home.repos.pwc.inspect_result.mac-automl_itpruner.nets.__init__.SearchRunConfig.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ",", "affine", "=", "True", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "affine", "=", "affine", ")", "\n", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "affine", "=", "affine", ")", "\n", "\n", "self", ".", "conv_bn1", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "(", "'conv'", ",", "conv1", ")", ",", "(", "'bn'", ",", "bn1", ")", "]", ")", ")", "\n", "self", ".", "conv_bn2", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "(", "'conv'", ",", "conv2", ")", ",", "(", "'bn'", ",", "bn2", ")", "]", ")", ")", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "planes", ":", "\n", "            ", "if", "stride", "!=", "1", ":", "\n", "                ", "self", ".", "shortcut", "=", "LambdaLayer", "(", "\n", "lambda", "x", ":", "F", ".", "pad", "(", "x", "[", ":", ",", ":", ",", ":", ":", "2", ",", ":", ":", "2", "]", ",", "\n", "(", "0", ",", "0", ",", "0", ",", "0", ",", "(", "planes", "-", "in_planes", ")", "//", "2", ",", "\n", "planes", "-", "in_planes", "-", "(", "planes", "-", "in_planes", ")", "//", "2", ")", ",", "\"constant\"", ",", "0", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "shortcut", "=", "LambdaLayer", "(", "\n", "lambda", "x", ":", "F", ".", "pad", "(", "x", "[", ":", ",", ":", ",", ":", ",", ":", "]", ",", "\n", "(", "0", ",", "0", ",", "0", ",", "0", ",", "(", "planes", "-", "in_planes", ")", "//", "2", ",", "\n", "planes", "-", "in_planes", "-", "(", "planes", "-", "in_planes", ")", "//", "2", ")", ",", "\"constant\"", ",", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.nets.resnet_cifar.BasicBlock.forward": [[49, 55], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet_cifar.BasicBlock.conv_bn2", "resnet_cifar.BasicBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet_cifar.BasicBlock.conv_bn1"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "conv_bn1", "(", "x", ")", ")", "\n", "out", "=", "self", ".", "conv_bn2", "(", "out", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.nets.resnet_cifar.ResNet_CIFAR.__init__": [[58, 96], ["MyNetwork.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "resnet_cifar.ResNet_CIFAR._make_layer", "resnet_cifar.ResNet_CIFAR._make_layer", "resnet_cifar.ResNet_CIFAR._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "resnet_cifar.ResNet_CIFAR.apply", "range", "collections.OrderedDict", "cfg_base.append"], "methods", ["home.repos.pwc.inspect_result.mac-automl_itpruner.nets.__init__.SearchRunConfig.__init__", "home.repos.pwc.inspect_result.mac-automl_itpruner.nets.resnet_20s_decode.ResNetDecode._make_layer", "home.repos.pwc.inspect_result.mac-automl_itpruner.nets.resnet_20s_decode.ResNetDecode._make_layer", "home.repos.pwc.inspect_result.mac-automl_itpruner.nets.resnet_20s_decode.ResNetDecode._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "depth", "=", "20", ",", "num_classes", "=", "10", ",", "cfg", "=", "None", ",", "cutout", "=", "False", ")", ":", "\n", "        ", "super", "(", "ResNet_CIFAR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "(", "depth", "-", "2", ")", "%", "6", "==", "0", ",", "'depth should be 6n+2'", "\n", "cfg_base", "=", "[", "]", "\n", "n", "=", "(", "depth", "-", "2", ")", "//", "6", "\n", "for", "i", "in", "[", "16", ",", "32", ",", "64", "]", ":", "\n", "            ", "for", "j", "in", "range", "(", "n", ")", ":", "\n", "                ", "cfg_base", ".", "append", "(", "i", ")", "\n", "\n", "", "", "if", "cfg", "is", "None", ":", "\n", "            ", "cfg", "=", "cfg_base", "\n", "", "num_blocks", "=", "[", "]", "\n", "if", "depth", "==", "20", ":", "\n", "            ", "num_blocks", "=", "[", "3", ",", "3", ",", "3", "]", "\n", "", "elif", "depth", "==", "32", ":", "\n", "            ", "num_blocks", "=", "[", "5", ",", "5", ",", "5", "]", "\n", "", "elif", "depth", "==", "44", ":", "\n", "            ", "num_blocks", "=", "[", "7", ",", "7", ",", "7", "]", "\n", "", "elif", "depth", "==", "56", ":", "\n", "            ", "num_blocks", "=", "[", "9", ",", "9", ",", "9", "]", "\n", "", "elif", "depth", "==", "110", ":", "\n", "            ", "num_blocks", "=", "[", "18", ",", "18", ",", "18", "]", "\n", "", "block", "=", "BasicBlock", "\n", "self", ".", "cfg_base", "=", "cfg_base", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "num_blocks", "=", "num_blocks", "\n", "self", ".", "cutout", "=", "cutout", "\n", "self", ".", "cfg", "=", "cfg", "\n", "self", ".", "in_planes", "=", "16", "\n", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "16", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "16", ")", "\n", "self", ".", "conv_bn", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "(", "'conv'", ",", "conv1", ")", ",", "(", "'bn'", ",", "bn1", ")", "]", ")", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "cfg", "[", "0", ":", "n", "]", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "cfg", "[", "n", ":", "2", "*", "n", "]", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "cfg", "[", "2", "*", "n", ":", "]", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "cfg", "[", "-", "1", "]", ",", "num_classes", ")", "\n", "self", ".", "apply", "(", "_weights_init", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.nets.resnet_cifar.ResNet_CIFAR._make_layer": [[97, 104], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "len", "layers.append", "collections.OrderedDict", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "strides", ")", ")", ":", "\n", "            ", "layers", ".", "append", "(", "(", "'block_%d'", "%", "i", ",", "block", "(", "self", ".", "in_planes", ",", "planes", "[", "i", "]", ",", "strides", "[", "i", "]", ")", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "[", "i", "]", "\n", "", "return", "nn", ".", "Sequential", "(", "OrderedDict", "(", "layers", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.nets.resnet_cifar.ResNet_CIFAR.forward": [[105, 117], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet_cifar.ResNet_CIFAR.layer1", "resnet_cifar.ResNet_CIFAR.layer2", "resnet_cifar.ResNet_CIFAR.layer3", "resnet_cifar.ResNet_CIFAR.pool", "resnet_cifar.ResNet_CIFAR.view", "resnet_cifar.ResNet_CIFAR.linear", "resnet_cifar.ResNet_CIFAR.conv_bn", "resnet_cifar.ResNet_CIFAR.size", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "cutout_batch"], "methods", ["home.repos.pwc.inspect_result.mac-automl_itpruner.models.mobilenet_imagenet.conv_bn", "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.get_data_iter.cutout_batch"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "training", "and", "self", ".", "cutout", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "x", "=", "cutout_batch", "(", "x", ",", "16", ")", "\n", "", "", "out", "=", "F", ".", "relu", "(", "self", ".", "conv_bn", "(", "x", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "pool", "(", "out", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.nets.resnet_cifar.ResNet_CIFAR.feature_extract": [[118, 131], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet_cifar.ResNet_CIFAR.conv_bn", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "cutout_batch", "_layer", "type", "tensor.append"], "methods", ["home.repos.pwc.inspect_result.mac-automl_itpruner.models.mobilenet_imagenet.conv_bn", "home.repos.pwc.inspect_result.mac-automl_itpruner.utils.get_data_iter.cutout_batch"], ["", "def", "feature_extract", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "training", "and", "self", ".", "cutout", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "x", "=", "cutout_batch", "(", "x", ",", "16", ")", "\n", "", "", "tensor", "=", "[", "]", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "conv_bn", "(", "x", ")", ")", "\n", "for", "i", "in", "[", "self", ".", "layer1", ",", "self", ".", "layer2", ",", "self", ".", "layer3", "]", ":", "\n", "            ", "for", "_layer", "in", "i", ":", "\n", "                ", "out", "=", "_layer", "(", "out", ")", "\n", "if", "type", "(", "_layer", ")", "is", "BasicBlock", ":", "\n", "                    ", "tensor", ".", "append", "(", "out", ")", "\n", "\n", "", "", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.nets.resnet_cifar.ResNet_CIFAR.cfg2params": [[132, 148], ["range", "range"], "methods", ["None"], ["", "def", "cfg2params", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "params", "=", "0", "\n", "params", "+=", "(", "3", "*", "3", "*", "3", "*", "16", "+", "16", "*", "2", ")", "# conv1+bn1", "\n", "in_c", "=", "16", "\n", "cfg_idx", "=", "0", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "            ", "num_blocks", "=", "self", ".", "num_blocks", "[", "i", "]", "\n", "for", "j", "in", "range", "(", "num_blocks", ")", ":", "\n", "                ", "c", "=", "cfg", "[", "cfg_idx", "]", "\n", "params", "+=", "(", "in_c", "*", "3", "*", "3", "*", "c", "+", "2", "*", "c", "+", "c", "*", "3", "*", "3", "*", "c", "+", "2", "*", "c", ")", "# per block params", "\n", "if", "in_c", "!=", "c", ":", "\n", "                    ", "params", "+=", "in_c", "*", "c", "# shortcut", "\n", "", "in_c", "=", "c", "\n", "cfg_idx", "+=", "1", "\n", "", "", "params", "+=", "(", "self", ".", "cfg", "[", "-", "1", "]", "+", "1", ")", "*", "self", ".", "num_classes", "# fc layer", "\n", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.nets.resnet_cifar.ResNet_CIFAR.cfg2flops": [[149, 168], ["range", "range"], "methods", ["None"], ["", "def", "cfg2flops", "(", "self", ",", "cfg", ")", ":", "# to simplify, only count convolution flops", "\n", "        ", "size", "=", "32", "\n", "flops", "=", "0", "\n", "flops", "+=", "(", "3", "*", "3", "*", "3", "*", "16", "*", "32", "*", "32", "+", "16", "*", "32", "*", "32", "*", "4", ")", "# conv1+bn1", "\n", "in_c", "=", "16", "\n", "cfg_idx", "=", "0", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "            ", "num_blocks", "=", "self", ".", "num_blocks", "[", "i", "]", "\n", "if", "i", "==", "1", "or", "i", "==", "2", ":", "\n", "                ", "size", "=", "size", "//", "2", "\n", "", "for", "j", "in", "range", "(", "num_blocks", ")", ":", "\n", "                ", "c", "=", "cfg", "[", "cfg_idx", "]", "\n", "flops", "+=", "(", "in_c", "*", "3", "*", "3", "*", "c", "*", "size", "*", "size", "+", "c", "*", "size", "*", "size", "*", "4", "+", "c", "*", "3", "*", "3", "*", "c", "*", "size", "*", "size", "+", "c", "*", "size", "*", "size", "*", "4", ")", "# per block flops", "\n", "if", "in_c", "!=", "c", ":", "\n", "                    ", "flops", "+=", "in_c", "*", "c", "*", "size", "*", "size", "# shortcut", "\n", "", "in_c", "=", "c", "\n", "cfg_idx", "+=", "1", "\n", "", "", "flops", "+=", "(", "2", "*", "self", ".", "cfg", "[", "-", "1", "]", "+", "1", ")", "*", "self", ".", "num_classes", "# fc layer", "\n", "return", "flops", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.nets.resnet_cifar.ResNet_CIFAR.cfg2flops_perlayer": [[169, 199], ["np.zeros", "range", "range", "range", "range"], "methods", ["None"], ["", "def", "cfg2flops_perlayer", "(", "self", ",", "cfg", ",", "length", ")", ":", "# to simplify, only count convolution flops", "\n", "        ", "size", "=", "32", "\n", "flops_singlecfg", "=", "[", "0", "for", "j", "in", "range", "(", "length", ")", "]", "\n", "flops_doublecfg", "=", "np", ".", "zeros", "(", "(", "length", ",", "length", ")", ")", "\n", "flops_squarecfg", "=", "[", "0", "for", "j", "in", "range", "(", "length", ")", "]", "\n", "\n", "in_c", "=", "16", "\n", "cfg_idx", "=", "0", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "            ", "num_blocks", "=", "self", ".", "num_blocks", "[", "i", "]", "\n", "if", "i", "==", "1", "or", "i", "==", "2", ":", "\n", "                ", "size", "=", "size", "//", "2", "\n", "", "for", "j", "in", "range", "(", "num_blocks", ")", ":", "\n", "                ", "c", "=", "cfg", "[", "cfg_idx", "]", "\n", "if", "i", "==", "0", "and", "j", "==", "0", ":", "\n", "                    ", "flops_singlecfg", "[", "cfg_idx", "]", "+=", "(", "c", "*", "size", "*", "size", "*", "4", "+", "c", "*", "size", "*", "size", "*", "4", "+", "in_c", "*", "3", "*", "3", "*", "c", "*", "size", "*", "size", ")", "\n", "flops_squarecfg", "[", "cfg_idx", "]", "+=", "c", "*", "3", "*", "3", "*", "c", "*", "size", "*", "size", "\n", "", "else", ":", "\n", "                    ", "flops_singlecfg", "[", "cfg_idx", "]", "+=", "(", "c", "*", "size", "*", "size", "*", "4", "+", "c", "*", "size", "*", "size", "*", "4", ")", "\n", "flops_doublecfg", "[", "cfg_idx", "-", "1", "]", "[", "cfg_idx", "]", "+=", "in_c", "*", "3", "*", "3", "*", "c", "*", "size", "*", "size", "\n", "flops_doublecfg", "[", "cfg_idx", "]", "[", "cfg_idx", "-", "1", "]", "+=", "in_c", "*", "3", "*", "3", "*", "c", "*", "size", "*", "size", "\n", "flops_squarecfg", "[", "cfg_idx", "]", "+=", "(", "c", "*", "3", "*", "3", "*", "c", "*", "size", "*", "size", ")", "\n", "", "if", "in_c", "!=", "c", ":", "\n", "                    ", "flops_doublecfg", "[", "cfg_idx", "]", "[", "cfg_idx", "-", "1", "]", "+=", "in_c", "*", "c", "*", "size", "*", "size", "# shortcut", "\n", "flops_doublecfg", "[", "cfg_idx", "-", "1", "]", "[", "cfg_idx", "]", "+=", "in_c", "*", "c", "*", "size", "*", "size", "\n", "", "in_c", "=", "c", "\n", "cfg_idx", "+=", "1", "\n", "\n", "", "", "flops_singlecfg", "[", "-", "1", "]", "+=", "2", "*", "self", ".", "cfg", "[", "-", "1", "]", "*", "self", ".", "num_classes", "# fc layer", "\n", "return", "flops_singlecfg", ",", "flops_doublecfg", ",", "flops_squarecfg", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.nets.resnet_cifar.ResNet_CIFAR.config": [[200, 207], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "config", "(", "self", ")", ":", "\n", "        ", "return", "{", "\n", "'name'", ":", "self", ".", "__class__", ".", "__name__", ",", "\n", "'cfg'", ":", "self", ".", "cfg", ",", "\n", "'cfg_base'", ":", "self", ".", "cfg_base", ",", "\n", "'dataset'", ":", "'cifar10'", ",", "\n", "}", ""]], "home.repos.pwc.inspect_result.mac-automl_itpruner.nets.resnet_cifar._weights_init": [[9, 14], ["isinstance", "isinstance", "torch.kaiming_normal"], "function", ["None"], ["def", "_weights_init", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "# print(classname)", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "        ", "init", ".", "kaiming_normal", "(", "m", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.nets.resnet_20s_decode.DShortCut.__init__": [[26, 38], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.mac-automl_itpruner.nets.__init__.SearchRunConfig.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cin", ",", "cout", ",", "has_avg", ",", "has_BN", ",", "affine", "=", "True", ")", ":", "\n", "        ", "super", "(", "DShortCut", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "cin", ",", "cout", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "if", "has_avg", ":", "\n", "          ", "self", ".", "avg", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", "\n", "", "else", ":", "\n", "          ", "self", ".", "avg", "=", "None", "\n", "\n", "", "if", "has_BN", ":", "\n", "          ", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "cout", ",", "affine", "=", "affine", ")", "\n", "", "else", ":", "\n", "          ", "self", ".", "bn", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.nets.resnet_20s_decode.DShortCut.forward": [[39, 49], ["resnet_20s_decode.DShortCut.conv", "resnet_20s_decode.DShortCut.avg", "resnet_20s_decode.DShortCut.bn"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "avg", ":", "\n", "          ", "out", "=", "self", ".", "avg", "(", "x", ")", "\n", "", "else", ":", "\n", "          ", "out", "=", "x", "\n", "\n", "", "out", "=", "self", ".", "conv", "(", "out", ")", "\n", "if", "self", ".", "bn", ":", "\n", "          ", "out", "=", "self", ".", "bn", "(", "out", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.nets.resnet_20s_decode.BasicBlock.__init__": [[67, 97], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "len", "nets.se_module.SELayer", "resnet_20s_decode.DShortCut", "resnet_20s_decode.DShortCut", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential"], "methods", ["home.repos.pwc.inspect_result.mac-automl_itpruner.nets.__init__.SearchRunConfig.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "cfg", ",", "stride", "=", "1", ",", "affine", "=", "True", ",", "se", "=", "False", ",", "se_reduction", "=", "-", "1", ")", ":", "\n", "        ", "\"\"\" Args:\n          in_planes: an int, the input chanels;\n          cfg: a list of int, the mid and output channels;\n          se: whether use SE module or not\n          se_reduction: the mid width for se module\n        \"\"\"", "\n", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "len", "(", "cfg", ")", "==", "2", ",", "'wrong cfg length'", "\n", "mid_planes", ",", "planes", "=", "cfg", "[", "0", "]", ",", "cfg", "[", "1", "]", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "mid_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "mid_planes", ",", "affine", "=", "affine", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "mid_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "affine", "=", "affine", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n", "self", ".", "se", "=", "se", "\n", "self", ".", "se_reduction", "=", "se_reduction", "\n", "if", "self", ".", "se", ":", "\n", "            ", "assert", "se_reduction", ">", "0", ",", "\"Must specify se reduction > 0\"", "\n", "self", ".", "se_module", "=", "SELayer", "(", "planes", ",", "se_reduction", ")", "\n", "\n", "", "if", "stride", "==", "2", ":", "\n", "            ", "self", ".", "shortcut", "=", "DShortCut", "(", "in_planes", ",", "planes", ",", "has_avg", "=", "True", ",", "has_BN", "=", "False", ")", "\n", "", "elif", "in_planes", "!=", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "DShortCut", "(", "in_planes", ",", "planes", ",", "has_avg", "=", "False", ",", "has_BN", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.nets.resnet_20s_decode.BasicBlock.forward": [[98, 107], ["resnet_20s_decode.BasicBlock.relu1", "resnet_20s_decode.BasicBlock.bn2", "resnet_20s_decode.BasicBlock.shortcut", "resnet_20s_decode.BasicBlock.relu2", "resnet_20s_decode.BasicBlock.bn1", "resnet_20s_decode.BasicBlock.conv2", "resnet_20s_decode.BasicBlock.se_module", "resnet_20s_decode.BasicBlock.conv1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "relu1", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "if", "self", ".", "se", ":", "\n", "          ", "out", "=", "self", ".", "se_module", "(", "out", ")", "\n", "\n", "", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "self", ".", "relu2", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.nets.resnet_20s_decode.ResNetDecode.__init__": [[113, 136], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "resnet_20s_decode.ResNetDecode._make_layer", "resnet_20s_decode.ResNetDecode._make_layer", "resnet_20s_decode.ResNetDecode._make_layer", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "resnet_20s_decode.ResNetDecode.apply", "len", "len"], "methods", ["home.repos.pwc.inspect_result.mac-automl_itpruner.nets.__init__.SearchRunConfig.__init__", "home.repos.pwc.inspect_result.mac-automl_itpruner.nets.resnet_20s_decode.ResNetDecode._make_layer", "home.repos.pwc.inspect_result.mac-automl_itpruner.nets.resnet_20s_decode.ResNetDecode._make_layer", "home.repos.pwc.inspect_result.mac-automl_itpruner.nets.resnet_20s_decode.ResNetDecode._make_layer"], ["def", "__init__", "(", "self", ",", "block", ",", "cfg", ",", "num_classes", "=", "10", ",", "affine", "=", "True", ",", "se", "=", "False", ",", "se_reduction", "=", "-", "1", ")", ":", "\n", "        ", "super", "(", "ResNetDecode", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# self.in_planes = 16", "\n", "self", ".", "cfg", "=", "cfg", "\n", "self", ".", "affine", "=", "affine", "\n", "self", ".", "se", "=", "se", "\n", "self", ".", "se_reduction", "=", "se_reduction", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "self", ".", "cfg", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "cfg", "[", "0", "]", ",", "affine", "=", "self", ".", "affine", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", ")", "\n", "num_blocks", "=", "[", "(", "len", "(", "self", ".", "cfg", ")", "-", "1", ")", "//", "2", "//", "3", "]", "*", "3", "# [3] * 3", "\n", "\n", "count", "=", "1", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "self", ".", "cfg", "[", "count", "-", "1", ":", "count", "+", "num_blocks", "[", "0", "]", "*", "2", "-", "1", "]", ",", "self", ".", "cfg", "[", "count", ":", "count", "+", "num_blocks", "[", "0", "]", "*", "2", "]", ",", "stride", "=", "1", ")", "\n", "count", "+=", "num_blocks", "[", "0", "]", "*", "2", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "self", ".", "cfg", "[", "count", "-", "1", ":", "count", "+", "num_blocks", "[", "1", "]", "*", "2", "-", "1", "]", ",", "self", ".", "cfg", "[", "count", ":", "count", "+", "num_blocks", "[", "1", "]", "*", "2", "]", ",", "stride", "=", "2", ")", "\n", "count", "+=", "num_blocks", "[", "1", "]", "*", "2", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "self", ".", "cfg", "[", "count", "-", "1", ":", "count", "+", "num_blocks", "[", "2", "]", "*", "2", "-", "1", "]", ",", "self", ".", "cfg", "[", "count", ":", "count", "+", "num_blocks", "[", "2", "]", "*", "2", "]", ",", "stride", "=", "2", ")", "\n", "count", "+=", "num_blocks", "[", "2", "]", "*", "2", "\n", "assert", "count", "==", "len", "(", "self", ".", "cfg", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "self", ".", "cfg", "[", "-", "1", "]", ",", "num_classes", ")", "\n", "self", ".", "apply", "(", "_weights_init", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.nets.resnet_20s_decode.ResNetDecode._make_layer": [[137, 147], ["torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "enumerate", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "len", "torch.ModuleList.append", "len", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "cfg", ",", "stride", ")", ":", "\n", "        ", "num_block", "=", "len", "(", "cfg", ")", "//", "2", "\n", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_block", "-", "1", ")", "\n", "layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "count", "=", "0", "\n", "for", "idx", ",", "stride", "in", "enumerate", "(", "strides", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "planes", "[", "count", "]", ",", "cfg", "[", "count", ":", "count", "+", "2", "]", ",", "stride", ",", "affine", "=", "self", ".", "affine", ",", "se", "=", "self", ".", "se", ",", "se_reduction", "=", "self", ".", "se_reduction", ")", ")", "\n", "count", "+=", "2", "\n", "", "assert", "count", "==", "len", "(", "cfg", ")", ",", "'cfg and block num mismatch'", "\n", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.nets.resnet_20s_decode.ResNetDecode.forward": [[148, 159], ["resnet_20s_decode.ResNetDecode.relu1", "resnet_20s_decode.ResNetDecode.layer1", "resnet_20s_decode.ResNetDecode.layer2", "resnet_20s_decode.ResNetDecode.layer3", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d.", "resnet_20s_decode.ResNetDecode.view", "resnet_20s_decode.ResNetDecode.linear", "resnet_20s_decode.ResNetDecode.bn1", "resnet_20s_decode.ResNetDecode.size", "resnet_20s_decode.ResNetDecode.conv1", "resnet_20s_decode.ResNetDecode.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "relu1", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "out", ".", "size", "(", ")", "[", "3", "]", ")", "\n", "out", "=", "avgpool", "(", "out", ")", "\n", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.nets.resnet_20s_decode._weights_init": [[18, 23], ["isinstance", "isinstance", "torch.kaiming_normal_"], "function", ["None"], ["def", "_weights_init", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "# print(classname)", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "        ", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.nets.resnet_20s_decode.ChannelWiseInterV2": [[51, 62], ["inputs.size", "inputs.dim", "inputs.size", "torch.functional.adaptive_avg_pool3d", "torch.AvgPool2d"], "function", ["None"], ["", "", "def", "ChannelWiseInterV2", "(", "inputs", ",", "oC", ",", "downsample", "=", "False", ")", ":", "\n", "    ", "assert", "inputs", ".", "dim", "(", ")", "==", "4", ",", "'invalid dimension : {:}'", ".", "format", "(", "inputs", ".", "size", "(", ")", ")", "\n", "batch", ",", "C", ",", "H", ",", "W", "=", "inputs", ".", "size", "(", ")", "\n", "\n", "if", "downsample", ":", "\n", "      ", "inputs", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", "(", "inputs", ")", "\n", "H", ",", "W", "=", "inputs", ".", "shape", "[", "2", "]", ",", "inputs", ".", "shape", "[", "3", "]", "\n", "", "if", "C", "==", "oC", ":", "\n", "      ", "return", "inputs", "\n", "", "else", ":", "\n", "      ", "return", "nn", ".", "functional", ".", "adaptive_avg_pool3d", "(", "inputs", ",", "(", "oC", ",", "H", ",", "W", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.nets.resnet_20s_decode.resnet_decode": [[160, 162], ["resnet_20s_decode.ResNetDecode"], "function", ["None"], ["", "", "def", "resnet_decode", "(", "cfg", ",", "num_classes", ",", "se", "=", "False", ",", "se_reduction", "=", "-", "1", ")", ":", "\n", "  ", "return", "ResNetDecode", "(", "BasicBlock", ",", "cfg", ",", "num_classes", "=", "num_classes", ",", "se", "=", "se", ",", "se_reduction", "=", "se_reduction", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.mac-automl_itpruner.nets.__init__.TrainRunConfig.__init__": [[6, 26], ["run_manager.RunConfig.__init__", "print", "kwargs.keys"], "methods", ["home.repos.pwc.inspect_result.mac-automl_itpruner.nets.__init__.SearchRunConfig.__init__"], []], "home.repos.pwc.inspect_result.mac-automl_itpruner.nets.__init__.TrainRunConfig.data_config": [[27, 37], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.mac-automl_itpruner.nets.__init__.SearchRunConfig.__init__": [[41, 66], ["run_manager.RunConfig.__init__", "print", "kwargs.keys"], "methods", ["home.repos.pwc.inspect_result.mac-automl_itpruner.nets.__init__.SearchRunConfig.__init__"], []], "home.repos.pwc.inspect_result.mac-automl_itpruner.nets.__init__.SearchRunConfig.data_config": [[67, 76], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.mac-automl_itpruner.CKA.cka.gram_linear": [[5, 15], ["x.dot"], "function", ["None"], ["def", "gram_linear", "(", "x", ")", ":", "\n", "    ", "\"\"\"Compute Gram (kernel) matrix for a linear kernel.\n\n  Args:\n    x: A num_examples x num_features matrix of features.\n\n  Returns:\n    A num_examples x num_examples Gram matrix of examples.\n  \"\"\"", "\n", "return", "x", ".", "dot", "(", "x", ".", "T", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.CKA.cka.gram_rbf": [[17, 34], ["x.dot", "numpy.diag", "numpy.median", "numpy.exp"], "function", ["None"], ["", "def", "gram_rbf", "(", "x", ",", "threshold", "=", "1.0", ")", ":", "\n", "    ", "\"\"\"Compute Gram (kernel) matrix for an RBF kernel.\n\n  Args:\n    x: A num_examples x num_features matrix of features.\n    threshold: Fraction of median Euclidean distance to use as RBF kernel\n      bandwidth. (This is the heuristic we use in the paper. There are other\n      possible ways to set the bandwidth; we didn't try them.)\n\n  Returns:\n    A num_examples x num_examples Gram matrix of examples.\n  \"\"\"", "\n", "dot_products", "=", "x", ".", "dot", "(", "x", ".", "T", ")", "\n", "sq_norms", "=", "np", ".", "diag", "(", "dot_products", ")", "\n", "sq_distances", "=", "-", "2", "*", "dot_products", "+", "sq_norms", "[", ":", ",", "None", "]", "+", "sq_norms", "[", "None", ",", ":", "]", "\n", "sq_median_distance", "=", "np", ".", "median", "(", "sq_distances", ")", "\n", "return", "np", ".", "exp", "(", "-", "sq_distances", "/", "(", "2", "*", "threshold", "**", "2", "*", "sq_median_distance", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.CKA.cka.center_gram": [[36, 73], ["gram.copy.copy", "numpy.allclose", "ValueError", "numpy.fill_diagonal", "numpy.fill_diagonal", "numpy.mean", "numpy.sum", "numpy.sum", "numpy.mean"], "function", ["home.repos.pwc.inspect_result.mac-automl_itpruner.Cifar.run_manager.RunConfig.copy"], ["", "def", "center_gram", "(", "gram", ",", "unbiased", "=", "False", ")", ":", "\n", "    ", "\"\"\"Center a symmetric Gram matrix.\n\n  This is equvialent to centering the (possibly infinite-dimensional) features\n  induced by the kernel before computing the Gram matrix.\n\n  Args:\n    gram: A num_examples x num_examples symmetric matrix.\n    unbiased: Whether to adjust the Gram matrix in order to compute an unbiased\n      estimate of HSIC. Note that this estimator may be negative.\n\n  Returns:\n    A symmetric matrix with centered columns and rows.\n  \"\"\"", "\n", "if", "not", "np", ".", "allclose", "(", "gram", ",", "gram", ".", "T", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'Input must be a symmetric matrix.'", ")", "\n", "", "gram", "=", "gram", ".", "copy", "(", ")", "\n", "\n", "if", "unbiased", ":", "\n", "# This formulation of the U-statistic, from Szekely, G. J., & Rizzo, M.", "\n", "# L. (2014). Partial distance correlation with methods for dissimilarities.", "\n", "# The Annals of Statistics, 42(6), 2382-2412, seems to be more numerically", "\n", "# stable than the alternative from Song et al. (2007).", "\n", "        ", "n", "=", "gram", ".", "shape", "[", "0", "]", "\n", "np", ".", "fill_diagonal", "(", "gram", ",", "0", ")", "\n", "means", "=", "np", ".", "sum", "(", "gram", ",", "0", ",", "dtype", "=", "np", ".", "float64", ")", "/", "(", "n", "-", "2", ")", "\n", "means", "-=", "np", ".", "sum", "(", "means", ")", "/", "(", "2", "*", "(", "n", "-", "1", ")", ")", "\n", "gram", "-=", "means", "[", ":", ",", "None", "]", "\n", "gram", "-=", "means", "[", "None", ",", ":", "]", "\n", "np", ".", "fill_diagonal", "(", "gram", ",", "0", ")", "\n", "", "else", ":", "\n", "        ", "means", "=", "np", ".", "mean", "(", "gram", ",", "0", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "means", "-=", "np", ".", "mean", "(", "means", ")", "/", "2", "\n", "gram", "-=", "means", "[", ":", ",", "None", "]", "\n", "gram", "-=", "means", "[", "None", ",", ":", "]", "\n", "\n", "", "return", "gram", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.CKA.cka.cka": [[75, 96], ["cka.center_gram", "cka.center_gram", "center_gram.ravel().dot", "numpy.linalg.norm", "numpy.linalg.norm", "center_gram.ravel", "center_gram.ravel"], "function", ["home.repos.pwc.inspect_result.mac-automl_itpruner.CKA.cka.center_gram", "home.repos.pwc.inspect_result.mac-automl_itpruner.CKA.cka.center_gram"], ["", "def", "cka", "(", "gram_x", ",", "gram_y", ",", "debiased", "=", "False", ")", ":", "\n", "    ", "\"\"\"Compute CKA.\n\n  Args:\n    gram_x: A num_examples x num_examples Gram matrix.\n    gram_y: A num_examples x num_examples Gram matrix.\n    debiased: Use unbiased estimator of HSIC. CKA may still be biased.\n\n  Returns:\n    The value of CKA between X and Y.\n  \"\"\"", "\n", "gram_x", "=", "center_gram", "(", "gram_x", ",", "unbiased", "=", "debiased", ")", "\n", "gram_y", "=", "center_gram", "(", "gram_y", ",", "unbiased", "=", "debiased", ")", "\n", "\n", "# Note: To obtain HSIC, this should be divided by (n-1)**2 (biased variant) or", "\n", "# n*(n-3) (unbiased variant), but this cancels for CKA.", "\n", "scaled_hsic", "=", "gram_x", ".", "ravel", "(", ")", ".", "dot", "(", "gram_y", ".", "ravel", "(", ")", ")", "\n", "\n", "normalization_x", "=", "np", ".", "linalg", ".", "norm", "(", "gram_x", ")", "\n", "normalization_y", "=", "np", ".", "linalg", ".", "norm", "(", "gram_y", ")", "\n", "return", "scaled_hsic", "/", "(", "normalization_x", "*", "normalization_y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.CKA.cka._debiased_dot_product_similarity_helper": [[98, 107], ["sum_squared_rows_x.dot"], "function", ["None"], ["", "def", "_debiased_dot_product_similarity_helper", "(", "\n", "xty", ",", "sum_squared_rows_x", ",", "sum_squared_rows_y", ",", "squared_norm_x", ",", "squared_norm_y", ",", "\n", "n", ")", ":", "\n", "    ", "\"\"\"Helper for computing debiased dot product similarity (i.e. linear HSIC).\"\"\"", "\n", "# This formula can be derived by manipulating the unbiased estimator from", "\n", "# Song et al. (2007).", "\n", "return", "(", "\n", "xty", "-", "n", "/", "(", "n", "-", "2.", ")", "*", "sum_squared_rows_x", ".", "dot", "(", "sum_squared_rows_y", ")", "\n", "+", "squared_norm_x", "*", "squared_norm_y", "/", "(", "(", "n", "-", "1", ")", "*", "(", "n", "-", "2", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mac-automl_itpruner.CKA.cka.feature_space_linear_cka": [[153, 194], ["numpy.linalg.norm", "numpy.linalg.norm", "numpy.mean", "numpy.mean", "numpy.linalg.norm", "features_x.T.dot", "features_y.T.dot", "numpy.einsum", "numpy.einsum", "numpy.sum", "numpy.sum", "cka._debiased_dot_product_similarity_helper", "numpy.sqrt", "numpy.sqrt", "features_x.T.dot", "cka._debiased_dot_product_similarity_helper", "cka._debiased_dot_product_similarity_helper"], "function", ["home.repos.pwc.inspect_result.mac-automl_itpruner.CKA.cka._debiased_dot_product_similarity_helper", "home.repos.pwc.inspect_result.mac-automl_itpruner.CKA.cka._debiased_dot_product_similarity_helper", "home.repos.pwc.inspect_result.mac-automl_itpruner.CKA.cka._debiased_dot_product_similarity_helper"], ["", "def", "feature_space_linear_cka", "(", "features_x", ",", "features_y", ",", "debiased", "=", "False", ")", ":", "\n", "  ", "\"\"\"Compute CKA with a linear kernel, in feature space.\n\n  This is typically faster than computing the Gram matrix when there are fewer\n  features than examples.\n\n  Args:\n    features_x: A num_examples x num_features matrix of features.\n    features_y: A num_examples x num_features matrix of features.\n    debiased: Use unbiased estimator of dot product similarity. CKA may still be\n      biased. Note that this estimator may be negative.\n\n  Returns:\n    The value of CKA between X and Y.\n  \"\"\"", "\n", "features_x", "=", "features_x", "-", "np", ".", "mean", "(", "features_x", ",", "0", ",", "keepdims", "=", "True", ")", "\n", "features_y", "=", "features_y", "-", "np", ".", "mean", "(", "features_y", ",", "0", ",", "keepdims", "=", "True", ")", "\n", "\n", "dot_product_similarity", "=", "np", ".", "linalg", ".", "norm", "(", "features_x", ".", "T", ".", "dot", "(", "features_y", ")", ")", "**", "2", "\n", "normalization_x", "=", "np", ".", "linalg", ".", "norm", "(", "features_x", ".", "T", ".", "dot", "(", "features_x", ")", ")", "\n", "normalization_y", "=", "np", ".", "linalg", ".", "norm", "(", "features_y", ".", "T", ".", "dot", "(", "features_y", ")", ")", "\n", "\n", "if", "debiased", ":", "\n", "    ", "n", "=", "features_x", ".", "shape", "[", "0", "]", "\n", "# Equivalent to np.sum(features_x ** 2, 1) but avoids an intermediate array.", "\n", "sum_squared_rows_x", "=", "np", ".", "einsum", "(", "'ij,ij->i'", ",", "features_x", ",", "features_x", ")", "\n", "sum_squared_rows_y", "=", "np", ".", "einsum", "(", "'ij,ij->i'", ",", "features_y", ",", "features_y", ")", "\n", "squared_norm_x", "=", "np", ".", "sum", "(", "sum_squared_rows_x", ")", "\n", "squared_norm_y", "=", "np", ".", "sum", "(", "sum_squared_rows_y", ")", "\n", "\n", "dot_product_similarity", "=", "_debiased_dot_product_similarity_helper", "(", "\n", "dot_product_similarity", ",", "sum_squared_rows_x", ",", "sum_squared_rows_y", ",", "\n", "squared_norm_x", ",", "squared_norm_y", ",", "n", ")", "\n", "normalization_x", "=", "np", ".", "sqrt", "(", "_debiased_dot_product_similarity_helper", "(", "\n", "normalization_x", "**", "2", ",", "sum_squared_rows_x", ",", "sum_squared_rows_x", ",", "\n", "squared_norm_x", ",", "squared_norm_x", ",", "n", ")", ")", "\n", "normalization_y", "=", "np", ".", "sqrt", "(", "_debiased_dot_product_similarity_helper", "(", "\n", "normalization_y", "**", "2", ",", "sum_squared_rows_y", ",", "sum_squared_rows_y", ",", "\n", "squared_norm_y", ",", "squared_norm_y", ",", "n", ")", ")", "\n", "\n", "", "return", "dot_product_similarity", "/", "(", "normalization_x", "*", "normalization_y", ")", "", "", ""]]}