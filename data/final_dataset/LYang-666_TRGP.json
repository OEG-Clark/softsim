{"home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_five_dataset.BasicBlock.__init__": [[42, 58], ["torch.Module.__init__", "main_five_dataset.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "main_five_dataset.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "collections.OrderedDict", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.LYang-666_TRGP.dataloader.miniimagenet.DatasetGen.__init__", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_mini_dataset.conv3x3", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_mini_dataset.conv3x3"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "in_planes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "track_running_stats", "=", "False", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "track_running_stats", "=", "False", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ",", "track_running_stats", "=", "False", ")", "\n", ")", "\n", "", "self", ".", "act", "=", "OrderedDict", "(", ")", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_five_dataset.BasicBlock.forward": [[59, 85], ["torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "main_five_dataset.BasicBlock.bn2", "main_five_dataset.BasicBlock.shortcut", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "main_five_dataset.BasicBlock.bn2", "main_five_dataset.BasicBlock.shortcut", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "main_five_dataset.BasicBlock.bn1", "main_five_dataset.BasicBlock.conv2", "main_five_dataset.BasicBlock.bn1", "main_five_dataset.BasicBlock.conv2", "main_five_dataset.BasicBlock.conv1", "main_five_dataset.BasicBlock.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "space1", "=", "[", "None", "]", ",", "space2", "=", "[", "None", "]", ")", ":", "\n", "        ", "if", "space1", "[", "0", "]", "is", "not", "None", "or", "space2", "[", "0", "]", "is", "not", "None", ":", "\n", "            ", "self", ".", "count", "=", "self", ".", "count", "%", "2", "\n", "self", ".", "act", "[", "'conv_{}'", ".", "format", "(", "self", ".", "count", ")", "]", "=", "x", "\n", "self", ".", "count", "+=", "1", "\n", "out", "=", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ",", "space1", "=", "space1", "[", "0", "]", ",", "space2", "=", "space2", "[", "0", "]", ")", ")", ")", "\n", "self", ".", "count", "=", "self", ".", "count", "%", "2", "\n", "self", ".", "act", "[", "'conv_{}'", ".", "format", "(", "self", ".", "count", ")", "]", "=", "out", "\n", "self", ".", "count", "+=", "1", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ",", "space1", "=", "space1", "[", "1", "]", ",", "space2", "=", "space2", "[", "1", "]", ")", ")", "\n", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "\n", "out", "=", "relu", "(", "out", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "count", "=", "self", ".", "count", "%", "2", "\n", "self", ".", "act", "[", "'conv_{}'", ".", "format", "(", "self", ".", "count", ")", "]", "=", "x", "\n", "self", ".", "count", "+=", "1", "\n", "out", "=", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "self", ".", "count", "=", "self", ".", "count", "%", "2", "\n", "self", ".", "act", "[", "'conv_{}'", ".", "format", "(", "self", ".", "count", ")", "]", "=", "out", "\n", "self", ".", "count", "+=", "1", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "relu", "(", "out", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_five_dataset.ResNet.__init__": [[87, 102], ["torch.Module.__init__", "main_five_dataset.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "main_five_dataset.ResNet._make_layer", "main_five_dataset.ResNet._make_layer", "main_five_dataset.ResNet._make_layer", "main_five_dataset.ResNet._make_layer", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "collections.OrderedDict", "main_five_dataset.ResNet.linear.append", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.LYang-666_TRGP.dataloader.miniimagenet.DatasetGen.__init__", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_mini_dataset.conv3x3", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_mini_dataset.ResNet._make_layer", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_mini_dataset.ResNet._make_layer", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_mini_dataset.ResNet._make_layer", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_mini_dataset.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "taskcla", ",", "nf", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "nf", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "3", ",", "nf", "*", "1", ",", "1", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "nf", "*", "1", ",", "track_running_stats", "=", "False", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "nf", "*", "1", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "nf", "*", "2", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "nf", "*", "4", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "nf", "*", "8", ",", "num_blocks", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "taskcla", "=", "taskcla", "\n", "self", ".", "linear", "=", "torch", ".", "nn", ".", "ModuleList", "(", ")", "\n", "for", "t", ",", "n", "in", "self", ".", "taskcla", ":", "\n", "            ", "self", ".", "linear", ".", "append", "(", "nn", ".", "Linear", "(", "nf", "*", "8", "*", "block", ".", "expansion", "*", "4", ",", "n", ",", "bias", "=", "False", ")", ")", "\n", "", "self", ".", "act", "=", "OrderedDict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_five_dataset.ResNet._make_layer": [[103, 110], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_five_dataset.ResNet.forward": [[111, 149], ["x.size", "x.view", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "out.view.view.view", "x.view", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "main_five_dataset.ResNet.layer1", "main_five_dataset.ResNet.layer2", "main_five_dataset.ResNet.layer3", "main_five_dataset.ResNet.layer4", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "out.view.view.view", "main_five_dataset.ResNet.bn1", "out.view.view.size", "y.append", "main_five_dataset.ResNet.bn1", "out.view.view.size", "y.append", "main_five_dataset.ResNet.conv1", "main_five_dataset.ResNet.conv1", "x.view", "x.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "space1", "=", "[", "None", "]", ",", "space2", "=", "[", "None", "]", ")", ":", "\n", "\n", "        ", "bsz", "=", "x", ".", "size", "(", "0", ")", "\n", "if", "space1", "[", "0", "]", "is", "not", "None", "or", "space2", "[", "0", "]", "is", "not", "None", ":", "\n", "            ", "self", ".", "act", "[", "'conv_in'", "]", "=", "x", ".", "view", "(", "bsz", ",", "3", ",", "32", ",", "32", ")", "\n", "out", "=", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ".", "view", "(", "bsz", ",", "3", ",", "32", ",", "32", ")", ",", "space1", "=", "space1", "[", "0", "]", ",", "space2", "=", "space2", "[", "0", "]", ")", ")", ")", "\n", "\n", "out", "=", "self", ".", "layer1", "[", "0", "]", "(", "out", ",", "space1", "=", "space1", "[", "1", ":", "3", "]", ",", "space2", "=", "space2", "[", "1", ":", "3", "]", ")", "\n", "out", "=", "self", ".", "layer1", "[", "1", "]", "(", "out", ",", "space1", "=", "space1", "[", "3", ":", "5", "]", ",", "space2", "=", "space2", "[", "3", ":", "5", "]", ")", "\n", "out", "=", "self", ".", "layer2", "[", "0", "]", "(", "out", ",", "space1", "=", "space1", "[", "5", ":", "8", "]", ",", "space2", "=", "space2", "[", "5", ":", "8", "]", ")", "\n", "out", "=", "self", ".", "layer2", "[", "1", "]", "(", "out", ",", "space1", "=", "space1", "[", "8", ":", "10", "]", ",", "space2", "=", "space2", "[", "8", ":", "10", "]", ")", "\n", "out", "=", "self", ".", "layer3", "[", "0", "]", "(", "out", ",", "space1", "=", "space1", "[", "10", ":", "13", "]", ",", "space2", "=", "space2", "[", "10", ":", "13", "]", ")", "\n", "out", "=", "self", ".", "layer3", "[", "1", "]", "(", "out", ",", "space1", "=", "space1", "[", "13", ":", "15", "]", ",", "space2", "=", "space2", "[", "13", ":", "15", "]", ")", "\n", "out", "=", "self", ".", "layer4", "[", "0", "]", "(", "out", ",", "space1", "=", "space1", "[", "15", ":", "18", "]", ",", "space2", "=", "space2", "[", "15", ":", "18", "]", ")", "\n", "out", "=", "self", ".", "layer4", "[", "1", "]", "(", "out", ",", "space1", "=", "space1", "[", "18", ":", "20", "]", ",", "space2", "=", "space2", "[", "18", ":", "20", "]", ")", "\n", "\n", "# out = self.layer1(out, space1=space1[1:6], space2 = space2[1:6] )", "\n", "# out = self.layer2(out, space1=space1[6:10], space2 = space2[6:10])", "\n", "# out = self.layer3(out, space1=space1[10:14], space2 = space2[10:14])", "\n", "# out = self.layer4(out, space1=space1[14:19], space2 = space2[14:19])", "\n", "out", "=", "avg_pool2d", "(", "out", ",", "2", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "y", "=", "[", "]", "\n", "for", "t", ",", "i", "in", "self", ".", "taskcla", ":", "\n", "                ", "y", ".", "append", "(", "self", ".", "linear", "[", "t", "]", "(", "out", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "act", "[", "'conv_in'", "]", "=", "x", ".", "view", "(", "bsz", ",", "3", ",", "32", ",", "32", ")", "\n", "out", "=", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ".", "view", "(", "bsz", ",", "3", ",", "32", ",", "32", ")", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "avg_pool2d", "(", "out", ",", "2", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "y", "=", "[", "]", "\n", "for", "t", ",", "i", "in", "self", ".", "taskcla", ":", "\n", "                ", "y", ".", "append", "(", "self", ".", "linear", "[", "t", "]", "(", "out", ")", ")", "\n", "", "", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_five_dataset.compute_conv_output_size": [[30, 32], ["int", "numpy.floor", "float"], "function", ["None"], ["def", "compute_conv_output_size", "(", "Lin", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ")", ":", "\n", "    ", "return", "int", "(", "np", ".", "floor", "(", "(", "Lin", "+", "2", "*", "padding", "-", "dilation", "*", "(", "kernel_size", "-", "1", ")", "-", "1", ")", "/", "float", "(", "stride", ")", "+", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_five_dataset.conv3x3": [[33, 36], ["layers.Conv2d"], "function", ["None"], ["", "def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "return", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "", "def", "conv7x7", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_five_dataset.conv7x7": [[36, 39], ["layers.Conv2d"], "function", ["None"], ["", "def", "conv7x7", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "return", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "7", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_five_dataset.ResNet18": [[150, 152], ["main_five_dataset.ResNet"], "function", ["None"], ["", "", "def", "ResNet18", "(", "taskcla", ",", "nf", "=", "32", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "taskcla", ",", "nf", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_five_dataset.get_model": [[153, 155], ["copy.deepcopy", "model.state_dict"], "function", ["None"], ["", "def", "get_model", "(", "model", ")", ":", "\n", "    ", "return", "deepcopy", "(", "model", ".", "state_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_five_dataset.set_model_": [[156, 159], ["model.load_state_dict", "copy.deepcopy"], "function", ["None"], ["", "def", "set_model_", "(", "model", ",", "state_dict", ")", ":", "\n", "    ", "model", ".", "load_state_dict", "(", "deepcopy", "(", "state_dict", ")", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_five_dataset.save_model": [[160, 171], ["torch.save", "torch.save", "torch.save", "torch.save", "print", "model.state_dict"], "function", ["None"], ["", "def", "save_model", "(", "model", ",", "memory", ",", "savename", ")", ":", "\n", "    ", "ckpt", "=", "{", "\n", "'model'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'memory'", ":", "memory", ",", "\n", "}", "\n", "\n", "# Save to file.", "\n", "torch", ".", "save", "(", "ckpt", ",", "savename", "+", "'checkpoint.pt'", ")", "\n", "print", "(", "savename", ")", "\n", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_five_dataset.adjust_learning_rate": [[172, 178], ["None"], "function", ["None"], ["", "def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "args", ")", ":", "\n", "    ", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "if", "(", "epoch", "==", "1", ")", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "args", ".", "lr", "\n", "", "else", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "/=", "args", ".", "lr_factor", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_five_dataset.train": [[180, 196], ["model.train", "numpy.arange", "numpy.random.shuffle", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "range", "x.size", "len", "optimizer.zero_grad", "model", "criterion", "criterion.backward", "optimizer.step", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "len", "data.to", "y[].to"], "function", ["home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.train"], ["", "", "", "def", "train", "(", "args", ",", "model", ",", "device", ",", "x", ",", "y", ",", "optimizer", ",", "criterion", ",", "task_id", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "r", "=", "np", ".", "arange", "(", "x", ".", "size", "(", "0", ")", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "r", ")", "\n", "r", "=", "torch", ".", "LongTensor", "(", "r", ")", ".", "to", "(", "device", ")", "\n", "# Loop batches", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "r", ")", ",", "args", ".", "batch_size_train", ")", ":", "\n", "        ", "if", "i", "+", "args", ".", "batch_size_train", "<=", "len", "(", "r", ")", ":", "b", "=", "r", "[", "i", ":", "i", "+", "args", ".", "batch_size_train", "]", "\n", "else", ":", "b", "=", "r", "[", "i", ":", "]", "\n", "data", "=", "x", "[", "b", "]", "\n", "data", ",", "target", "=", "data", ".", "to", "(", "device", ")", ",", "y", "[", "b", "]", ".", "to", "(", "device", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "loss", "=", "criterion", "(", "output", "[", "task_id", "]", ",", "target", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_five_dataset.train_projected_regime": [[197, 226], ["model.train", "numpy.arange", "numpy.random.shuffle", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "range", "x.size", "len", "optimizer.zero_grad", "model", "criterion", "criterion.backward", "enumerate", "optimizer.step", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "len", "data.to", "y[].to", "model.named_parameters", "params.grad.data.size", "len", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "params.grad.data.fill_", "params.size", "params.size", "len", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "params.size", "params.grad.data.view"], "function", ["home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.train"], ["", "", "def", "train_projected_regime", "(", "args", ",", "model", ",", "device", ",", "x", ",", "y", ",", "optimizer", ",", "criterion", ",", "memory", ",", "task_name", ",", "task_name_list", ",", "space_list_all", ",", "task_id", ",", "feature_mat", ",", "space1", "=", "[", "None", ",", "None", ",", "None", "]", ",", "space2", "=", "[", "None", ",", "None", ",", "None", "]", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "r", "=", "np", ".", "arange", "(", "x", ".", "size", "(", "0", ")", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "r", ")", "\n", "r", "=", "torch", ".", "LongTensor", "(", "r", ")", ".", "to", "(", "device", ")", "\n", "# Loop batches", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "r", ")", ",", "args", ".", "batch_size_train", ")", ":", "\n", "        ", "if", "i", "+", "args", ".", "batch_size_train", "<=", "len", "(", "r", ")", ":", "b", "=", "r", "[", "i", ":", "i", "+", "args", ".", "batch_size_train", "]", "\n", "else", ":", "b", "=", "r", "[", "i", ":", "]", "\n", "data", "=", "x", "[", "b", "]", "\n", "data", ",", "target", "=", "data", ".", "to", "(", "device", ")", ",", "y", "[", "b", "]", ".", "to", "(", "device", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "output", "=", "model", "(", "data", ",", "space1", "=", "space1", ",", "space2", "=", "space2", ")", "\n", "loss", "=", "criterion", "(", "output", "[", "task_id", "]", ",", "target", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "kk", "=", "0", "\n", "for", "k", ",", "(", "m", ",", "params", ")", "in", "enumerate", "(", "model", ".", "named_parameters", "(", ")", ")", ":", "\n", "            ", "if", "len", "(", "params", ".", "size", "(", ")", ")", "==", "4", "and", "'weight'", "in", "m", ":", "\n", "                ", "sz", "=", "params", ".", "grad", ".", "data", ".", "size", "(", "0", ")", "\n", "params", ".", "grad", ".", "data", "=", "params", ".", "grad", ".", "data", "-", "torch", ".", "mm", "(", "params", ".", "grad", ".", "data", ".", "view", "(", "sz", ",", "-", "1", ")", ",", "feature_mat", "[", "kk", "]", ")", ".", "view", "(", "params", ".", "size", "(", ")", ")", "\n", "\n", "kk", "+=", "1", "\n", "", "elif", "len", "(", "params", ".", "size", "(", ")", ")", "==", "1", "and", "task_id", "!=", "0", ":", "\n", "                ", "params", ".", "grad", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n", "", "", "optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_five_dataset.test": [[228, 254], ["model.eval", "numpy.arange", "numpy.random.shuffle", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "x.size", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "range", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "len", "model", "criterion", "output[].argmax", "output[].argmax.eq().sum().item", "len", "len", "data.to", "y[].to", "criterion.data.cpu().numpy().item", "len", "output[].argmax.eq().sum", "criterion.data.cpu().numpy", "output[].argmax.eq", "target.view_as", "criterion.data.cpu"], "function", ["None"], ["", "", "def", "test", "(", "args", ",", "model", ",", "device", ",", "x", ",", "y", ",", "criterion", ",", "task_id", ",", "space1", "=", "[", "None", ",", "None", ",", "None", "]", ",", "space2", "=", "[", "None", ",", "None", ",", "None", "]", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "total_loss", "=", "0", "\n", "total_num", "=", "0", "\n", "correct", "=", "0", "\n", "r", "=", "np", ".", "arange", "(", "x", ".", "size", "(", "0", ")", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "r", ")", "\n", "r", "=", "torch", ".", "LongTensor", "(", "r", ")", ".", "to", "(", "device", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# Loop batches", "\n", "        ", "for", "i", "in", "range", "(", "0", ",", "len", "(", "r", ")", ",", "args", ".", "batch_size_test", ")", ":", "\n", "            ", "if", "i", "+", "args", ".", "batch_size_test", "<=", "len", "(", "r", ")", ":", "b", "=", "r", "[", "i", ":", "i", "+", "args", ".", "batch_size_test", "]", "\n", "else", ":", "b", "=", "r", "[", "i", ":", "]", "\n", "data", "=", "x", "[", "b", "]", "\n", "data", ",", "target", "=", "data", ".", "to", "(", "device", ")", ",", "y", "[", "b", "]", ".", "to", "(", "device", ")", "\n", "output", "=", "model", "(", "data", ",", "space1", "=", "space1", ",", "space2", "=", "space2", ")", "\n", "loss", "=", "criterion", "(", "output", "[", "task_id", "]", ",", "target", ")", "\n", "pred", "=", "output", "[", "task_id", "]", ".", "argmax", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "correct", "+=", "pred", ".", "eq", "(", "target", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "total_loss", "+=", "loss", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "item", "(", ")", "*", "len", "(", "b", ")", "\n", "total_num", "+=", "len", "(", "b", ")", "\n", "\n", "", "", "acc", "=", "100.", "*", "correct", "/", "total_num", "\n", "final_loss", "=", "total_loss", "/", "total_num", "\n", "return", "final_loss", ",", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_five_dataset.get_representation_and_gradient": [[255, 333], ["net.eval", "numpy.arange", "numpy.random.shuffle", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "net.eval", "net", "act_list.extend", "range", "range", "print", "print", "print", "range", "print", "x.size", "example_data.to", "y[].to", "len", "main_five_dataset.compute_conv_output_size", "numpy.zeros", "torch.pad().detach().cpu().numpy", "range", "mat_list.append", "len", "mat_final.append", "len", "print", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "range", "main_five_dataset.compute_conv_output_size", "numpy.zeros", "act_list[].detach().cpu().numpy", "range", "mat_sc_list.append", "mat_final.append", "torch.pad().detach().cpu", "range", "range", "act[].reshape", "act_list[].detach().cpu", "range", "torch.pad().detach", "act[].reshape", "act_list[].detach", "torch.pad"], "function", ["home.repos.pwc.inspect_result.LYang-666_TRGP.None.utilis.compute_conv_output_size", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.utilis.compute_conv_output_size"], ["", "def", "get_representation_and_gradient", "(", "net", ",", "device", ",", "optimizer", ",", "criterion", ",", "task_id", ",", "x", ",", "y", "=", "None", ")", ":", "\n", "# Collect activations by forward pass", "\n", "    ", "net", ".", "eval", "(", ")", "\n", "r", "=", "np", ".", "arange", "(", "x", ".", "size", "(", "0", ")", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "r", ")", "\n", "r", "=", "torch", ".", "LongTensor", "(", "r", ")", ".", "to", "(", "device", ")", "\n", "b", "=", "r", "[", "0", ":", "100", "]", "# ns=100 examples ", "\n", "example_data", "=", "x", "[", "b", "]", "\n", "example_data", ",", "target", "=", "example_data", ".", "to", "(", "device", ")", ",", "y", "[", "b", "]", ".", "to", "(", "device", ")", "\n", "grad_list", "=", "[", "]", "# list contains gradient of each layer", "\n", "act_list", "=", "[", "]", "\n", "\n", "net", ".", "eval", "(", ")", "\n", "example_out", "=", "net", "(", "example_data", ")", "\n", "\n", "act_list", ".", "extend", "(", "[", "net", ".", "act", "[", "'conv_in'", "]", ",", "\n", "net", ".", "layer1", "[", "0", "]", ".", "act", "[", "'conv_0'", "]", ",", "net", ".", "layer1", "[", "0", "]", ".", "act", "[", "'conv_1'", "]", ",", "net", ".", "layer1", "[", "1", "]", ".", "act", "[", "'conv_0'", "]", ",", "net", ".", "layer1", "[", "1", "]", ".", "act", "[", "'conv_1'", "]", ",", "\n", "net", ".", "layer2", "[", "0", "]", ".", "act", "[", "'conv_0'", "]", ",", "net", ".", "layer2", "[", "0", "]", ".", "act", "[", "'conv_1'", "]", ",", "net", ".", "layer2", "[", "1", "]", ".", "act", "[", "'conv_0'", "]", ",", "net", ".", "layer2", "[", "1", "]", ".", "act", "[", "'conv_1'", "]", ",", "\n", "net", ".", "layer3", "[", "0", "]", ".", "act", "[", "'conv_0'", "]", ",", "net", ".", "layer3", "[", "0", "]", ".", "act", "[", "'conv_1'", "]", ",", "net", ".", "layer3", "[", "1", "]", ".", "act", "[", "'conv_0'", "]", ",", "net", ".", "layer3", "[", "1", "]", ".", "act", "[", "'conv_1'", "]", ",", "\n", "net", ".", "layer4", "[", "0", "]", ".", "act", "[", "'conv_0'", "]", ",", "net", ".", "layer4", "[", "0", "]", ".", "act", "[", "'conv_1'", "]", ",", "net", ".", "layer4", "[", "1", "]", ".", "act", "[", "'conv_0'", "]", ",", "net", ".", "layer4", "[", "1", "]", ".", "act", "[", "'conv_1'", "]", "]", ")", "\n", "\n", "batch_list", "=", "[", "10", ",", "10", ",", "10", ",", "10", ",", "10", ",", "10", ",", "10", ",", "10", ",", "50", ",", "50", ",", "50", ",", "100", ",", "100", ",", "100", ",", "100", ",", "100", ",", "100", "]", "#scaled", "\n", "# network arch ", "\n", "stride_list", "=", "[", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "2", ",", "1", ",", "1", ",", "1", ",", "2", ",", "1", ",", "1", ",", "1", ",", "2", ",", "1", ",", "1", ",", "1", "]", "\n", "map_list", "=", "[", "32", ",", "32", ",", "32", ",", "32", ",", "32", ",", "32", ",", "16", ",", "16", ",", "16", ",", "16", ",", "8", ",", "8", ",", "8", ",", "8", ",", "4", ",", "4", ",", "4", "]", "\n", "in_channel", "=", "[", "3", ",", "20", ",", "20", ",", "20", ",", "20", ",", "20", ",", "40", ",", "40", ",", "40", ",", "40", ",", "80", ",", "80", ",", "80", ",", "80", ",", "160", ",", "160", ",", "160", "]", "\n", "\n", "pad", "=", "1", "\n", "sc_list", "=", "[", "5", ",", "9", ",", "13", "]", "\n", "p1d", "=", "(", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "mat_final", "=", "[", "]", "# list containing GPM Matrices ", "\n", "mat_list", "=", "[", "]", "\n", "mat_sc_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "stride_list", ")", ")", ":", "\n", "        ", "if", "i", "==", "0", ":", "\n", "            ", "ksz", "=", "3", "\n", "", "else", ":", "\n", "            ", "ksz", "=", "3", "\n", "", "bsz", "=", "batch_list", "[", "i", "]", "\n", "st", "=", "stride_list", "[", "i", "]", "\n", "k", "=", "0", "\n", "s", "=", "compute_conv_output_size", "(", "map_list", "[", "i", "]", ",", "ksz", ",", "stride_list", "[", "i", "]", ",", "pad", ")", "\n", "mat", "=", "np", ".", "zeros", "(", "(", "ksz", "*", "ksz", "*", "in_channel", "[", "i", "]", ",", "s", "*", "s", "*", "bsz", ")", ")", "\n", "act", "=", "F", ".", "pad", "(", "act_list", "[", "i", "]", ",", "p1d", ",", "\"constant\"", ",", "0", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "for", "kk", "in", "range", "(", "bsz", ")", ":", "\n", "            ", "for", "ii", "in", "range", "(", "s", ")", ":", "\n", "                ", "for", "jj", "in", "range", "(", "s", ")", ":", "\n", "                    ", "mat", "[", ":", ",", "k", "]", "=", "act", "[", "kk", ",", ":", ",", "st", "*", "ii", ":", "ksz", "+", "st", "*", "ii", ",", "st", "*", "jj", ":", "ksz", "+", "st", "*", "jj", "]", ".", "reshape", "(", "-", "1", ")", "\n", "k", "+=", "1", "\n", "", "", "", "mat_list", ".", "append", "(", "mat", ")", "\n", "# For Shortcut Connection", "\n", "if", "i", "in", "sc_list", ":", "\n", "            ", "k", "=", "0", "\n", "s", "=", "compute_conv_output_size", "(", "map_list", "[", "i", "]", ",", "1", ",", "stride_list", "[", "i", "]", ")", "\n", "mat", "=", "np", ".", "zeros", "(", "(", "1", "*", "1", "*", "in_channel", "[", "i", "]", ",", "s", "*", "s", "*", "bsz", ")", ")", "\n", "act", "=", "act_list", "[", "i", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "for", "kk", "in", "range", "(", "bsz", ")", ":", "\n", "                ", "for", "ii", "in", "range", "(", "s", ")", ":", "\n", "                    ", "for", "jj", "in", "range", "(", "s", ")", ":", "\n", "                        ", "mat", "[", ":", ",", "k", "]", "=", "act", "[", "kk", ",", ":", ",", "st", "*", "ii", ":", "1", "+", "st", "*", "ii", ",", "st", "*", "jj", ":", "1", "+", "st", "*", "jj", "]", ".", "reshape", "(", "-", "1", ")", "\n", "k", "+=", "1", "\n", "", "", "", "mat_sc_list", ".", "append", "(", "mat", ")", "\n", "\n", "", "", "ik", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "mat_list", ")", ")", ":", "\n", "        ", "mat_final", ".", "append", "(", "mat_list", "[", "i", "]", ")", "\n", "if", "i", "in", "[", "6", ",", "10", ",", "14", "]", ":", "\n", "            ", "mat_final", ".", "append", "(", "mat_sc_list", "[", "ik", "]", ")", "\n", "ik", "+=", "1", "\n", "\n", "", "", "print", "(", "'-'", "*", "30", ")", "\n", "print", "(", "'Representation Matrix'", ")", "\n", "print", "(", "'-'", "*", "30", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "mat_final", ")", ")", ":", "\n", "        ", "print", "(", "'Layer {} : {}'", ".", "format", "(", "i", "+", "1", ",", "mat_final", "[", "i", "]", ".", "shape", ")", ")", "\n", "", "print", "(", "'-'", "*", "30", ")", "\n", "grad_list_avg", "=", "[", "]", "\n", "return", "mat_final", ",", "grad_list", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_five_dataset.get_space_and_grad": [[335, 438], ["main_five_dataset.print_log", "main_five_dataset.print_log", "main_five_dataset.print_log", "main_five_dataset.print_log", "range", "main_five_dataset.print_log", "range", "range", "len", "print", "len", "numpy.linalg.svd", "numpy.sum", "space_list_all.append", "len", "main_five_dataset.print_log", "main_five_dataset.print_log", "numpy.dot", "range", "numpy.array", "numpy.linalg.svd", "numpy.dot", "numpy.linalg.svd", "numpy.hstack", "len", "range", "main_five_dataset.print_log", "main_five_dataset.print_log", "numpy.hstack", "main_five_dataset.print_log", "main_five_dataset.print_log", "main_five_dataset.print_log", "numpy.cumsum", "activation.transpose", "numpy.dot", "np.array.append", "numpy.dot", "numpy.argsort", "numpy.sort", "len", "len", "numpy.hstack", "str", "space_list_all[].transpose", "numpy.dot", "space_list_all[].transpose", "len", "space.transpose", "numpy.linalg.norm", "str"], "function", ["home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log"], ["", "def", "get_space_and_grad", "(", "model", ",", "mat_list", ",", "grad_list", ",", "threshold", ",", "memory", ",", "task_name", ",", "task_name_list", ",", "task_id", ",", "space_list_all", ")", ":", "\n", "    ", "print_log", "(", "'Threshold:{}'", ".", "format", "(", "threshold", ")", ",", "log", ")", "\n", "Ours", "=", "True", "\n", "if", "task_name", "==", "'cifar10'", ":", "\n", "# After First Task ", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "mat_list", ")", ")", ":", "\n", "            ", "activation", "=", "mat_list", "[", "i", "]", "\n", "# gradient = grad_list[i]", "\n", "\n", "U", ",", "S", ",", "Vh", "=", "np", ".", "linalg", ".", "svd", "(", "activation", ",", "full_matrices", "=", "False", ")", "\n", "# criteria (Eq-5)", "\n", "sval_total", "=", "(", "S", "**", "2", ")", ".", "sum", "(", ")", "\n", "sval_ratio", "=", "(", "S", "**", "2", ")", "/", "sval_total", "\n", "r", "=", "np", ".", "sum", "(", "np", ".", "cumsum", "(", "sval_ratio", ")", "<", "threshold", "[", "i", "]", ")", "#+1  ", "\n", "\n", "# save into memory", "\n", "memory", "[", "task_name", "]", "[", "str", "(", "i", ")", "]", "[", "'space_list'", "]", "=", "U", "[", ":", ",", "0", ":", "r", "]", "\n", "# memory[task_name][str(i)]['grad_list'] = gradient", "\n", "\n", "space_list_all", ".", "append", "(", "U", "[", ":", ",", "0", ":", "r", "]", ")", "\n", "\n", "", "", "else", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "mat_list", ")", ")", ":", "\n", "\n", "            ", "activation", "=", "mat_list", "[", "i", "]", "\n", "\n", "if", "Ours", ":", "\n", "#=1. calculate the projection using previous space", "\n", "                ", "print_log", "(", "'activation shape:{}'", ".", "format", "(", "activation", ".", "shape", ")", ",", "log", ")", "\n", "print_log", "(", "'space shape:{}'", ".", "format", "(", "space_list_all", "[", "i", "]", ".", "shape", ")", ",", "log", ")", "\n", "delta", "=", "[", "]", "\n", "R2", "=", "np", ".", "dot", "(", "activation", ",", "activation", ".", "transpose", "(", ")", ")", "\n", "for", "ki", "in", "range", "(", "space_list_all", "[", "i", "]", ".", "shape", "[", "1", "]", ")", ":", "\n", "                    ", "space", "=", "space_list_all", "[", "i", "]", ".", "transpose", "(", ")", "[", "ki", "]", "\n", "# print(space.shape)", "\n", "delta_i", "=", "np", ".", "dot", "(", "np", ".", "dot", "(", "space", ".", "transpose", "(", ")", ",", "R2", ")", ",", "space", ")", "\n", "# print(delta_i)", "\n", "delta", ".", "append", "(", "delta_i", ")", "\n", "", "delta", "=", "np", ".", "array", "(", "delta", ")", "\n", "\n", "#=2  following the GPM to get the sigma (S**2)", "\n", "U1", ",", "S1", ",", "Vh1", "=", "np", ".", "linalg", ".", "svd", "(", "activation", ",", "full_matrices", "=", "False", ")", "\n", "sval_total", "=", "(", "S1", "**", "2", ")", ".", "sum", "(", ")", "\n", "\n", "act_hat", "=", "activation", "\n", "\n", "act_hat", "-=", "np", ".", "dot", "(", "np", ".", "dot", "(", "space_list_all", "[", "i", "]", ",", "space_list_all", "[", "i", "]", ".", "transpose", "(", ")", ")", ",", "activation", ")", "\n", "U", ",", "S", ",", "Vh", "=", "np", ".", "linalg", ".", "svd", "(", "act_hat", ",", "full_matrices", "=", "False", ")", "\n", "sigma", "=", "S", "**", "2", "\n", "\n", "#=3 stack delta and sigma in a same list, then sort in descending order", "\n", "stack", "=", "np", ".", "hstack", "(", "(", "delta", ",", "sigma", ")", ")", "#[0,..30, 31..99]", "\n", "stack_index", "=", "np", ".", "argsort", "(", "stack", ")", "[", ":", ":", "-", "1", "]", "#[99, 0, 4,7...]", "\n", "stack", "=", "np", ".", "sort", "(", "stack", ")", "[", ":", ":", "-", "1", "]", "\n", "\n", "#=4 select the most import basis", "\n", "r_pre", "=", "len", "(", "delta", ")", "\n", "r", "=", "0", "\n", "accumulated_sval", "=", "0", "\n", "for", "ii", "in", "range", "(", "len", "(", "stack", ")", ")", ":", "\n", "                    ", "if", "accumulated_sval", "<", "threshold", "[", "i", "]", "*", "sval_total", ":", "\n", "                        ", "accumulated_sval", "+=", "stack", "[", "ii", "]", "\n", "r", "+=", "1", "\n", "if", "r", "==", "activation", ".", "shape", "[", "0", "]", ":", "\n", "                            ", "break", "\n", "", "", "else", ":", "\n", "                        ", "break", "\n", "\n", "", "", "print_log", "(", "'threshold for selecting:{}'", ".", "format", "(", "np", ".", "linalg", ".", "norm", "(", "activation", ")", "**", "2", ")", ",", "log", ")", "\n", "print_log", "(", "\"total ranking r = {}\"", ".", "format", "(", "r", ")", ",", "log", ")", "\n", "\n", "#=5 save the corresponding space", "\n", "Ui", "=", "np", ".", "hstack", "(", "(", "space_list_all", "[", "i", "]", ",", "U", ")", ")", "\n", "sel_index", "=", "stack_index", "[", ":", "r", "]", "\n", "# this is the current space", "\n", "U_new", "=", "Ui", "[", ":", ",", "sel_index", "]", "\n", "# calculate how many space from current new task", "\n", "sel_index_from_U", "=", "sel_index", "[", "sel_index", ">", "r_pre", "]", "\n", "\n", "if", "len", "(", "sel_index_from_U", ")", ">", "0", ":", "\n", "# update the overall space without overlap", "\n", "                    ", "total_U", "=", "np", ".", "hstack", "(", "(", "space_list_all", "[", "i", "]", ",", "Ui", "[", ":", ",", "sel_index_from_U", "]", ")", ")", "\n", "\n", "space_list_all", "[", "i", "]", "=", "total_U", "\n", "\n", "", "print_log", "(", "\"the number of space for current task:{}\"", ".", "format", "(", "r", ")", ",", "log", ")", "\n", "print_log", "(", "'the new increased space:{}, the threshold for new space:{}'", ".", "format", "(", "len", "(", "sel_index_from_U", ")", ",", "r_pre", ")", ",", "log", ")", "\n", "\n", "print_log", "(", "\"Ui shape:{}\"", ".", "format", "(", "Ui", "[", ":", ",", "sel_index", "]", ".", "shape", ")", ",", "log", ")", "\n", "\n", "memory", "[", "task_name", "]", "[", "str", "(", "i", ")", "]", "[", "'space_list'", "]", "=", "Ui", "[", ":", ",", "sel_index", "]", "\n", "\n", "\n", "\n", "", "", "", "print_log", "(", "'-'", "*", "40", ",", "log", ")", "\n", "print_log", "(", "'Gradient Constraints Summary'", ",", "log", ")", "\n", "print_log", "(", "'-'", "*", "40", ",", "log", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "mat_list", ")", ")", ":", "\n", "        ", "print", "(", "'Layer {} : {}/{}'", ".", "format", "(", "i", "+", "1", ",", "space_list_all", "[", "i", "]", ".", "shape", "[", "1", "]", ",", "space_list_all", "[", "i", "]", ".", "shape", "[", "0", "]", ")", ")", "\n", "", "print_log", "(", "'-'", "*", "40", ",", "log", ")", "\n", "\n", "return", "space_list_all", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_five_dataset.grad_proj_cond": [[439, 517], ["numpy.arange", "numpy.random.shuffle", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "list", "optimizer.zero_grad", "net", "criterion", "criterion.backward", "enumerate", "range", "x.size", "example_data.to", "y[].to", "net.act.keys", "net.named_parameters", "range", "gradient_norm_lists_tasks.append", "range", "range", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "params.grad.data.detach().cpu().numpy", "grad.reshape.reshape", "grad_list.append", "len", "main_five_dataset.print_log", "numpy.dot", "numpy.linalg.norm", "projection_norm_lists.append", "numpy.linalg.norm", "main_five_dataset.print_log", "len", "main_five_dataset.print_log", "len", "range", "range", "len", "numpy.dot", "len", "main_five_dataset.print_log", "len", "range", "numpy.array", "main_five_dataset.print_log", "params.grad.data.detach().cpu", "space_list.transpose", "len", "np.array.append", "numpy.argpartition", "str", "str", "params.grad.data.detach", "str", "str", "str", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log"], ["", "def", "grad_proj_cond", "(", "args", ",", "net", ",", "x", ",", "y", ",", "memory", ",", "task_name", ",", "task_id", ",", "task_name_list", ",", "device", ",", "optimizer", ",", "criterion", ")", ":", "\n", "\n", "# calcuate the gradient for current task before training", "\n", "    ", "steps", "=", "1", "\n", "r", "=", "np", ".", "arange", "(", "x", ".", "size", "(", "0", ")", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "r", ")", "\n", "r", "=", "torch", ".", "LongTensor", "(", "r", ")", ".", "to", "(", "device", ")", "\n", "b", "=", "r", "[", "0", ":", "100", "*", "5", "]", "# Take 125*10 random samples", "\n", "example_data", "=", "x", "[", "b", "]", "\n", "example_data", ",", "target", "=", "example_data", ".", "to", "(", "device", ")", ",", "y", "[", "b", "]", ".", "to", "(", "device", ")", "\n", "\n", "grad_list", "=", "[", "]", "# list contains gradient of each layer", "\n", "act_key", "=", "list", "(", "net", ".", "act", ".", "keys", "(", ")", ")", "\n", "#print('task id:{}'.format(task_id))", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "example_out", "=", "net", "(", "example_data", ")", "\n", "\n", "loss", "=", "criterion", "(", "example_out", "[", "task_id", "]", ",", "target", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "k_conv", "=", "0", "\n", "for", "k", ",", "(", "m", ",", "params", ")", "in", "enumerate", "(", "net", ".", "named_parameters", "(", ")", ")", ":", "\n", "        ", "if", "len", "(", "params", ".", "shape", ")", "==", "4", "and", "'weight'", "in", "m", ":", "\n", "\n", "            ", "grad", "=", "params", ".", "grad", ".", "data", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "grad", "=", "grad", ".", "reshape", "(", "grad", ".", "shape", "[", "0", "]", ",", "grad", ".", "shape", "[", "1", "]", "*", "grad", ".", "shape", "[", "2", "]", "*", "grad", ".", "shape", "[", "3", "]", ")", "\n", "grad_list", ".", "append", "(", "grad", ")", "\n", "k_conv", "+=", "1", "\n", "\n", "\n", "\n", "# project on each task subspace", "\n", "", "", "gradient_norm_lists_tasks", "=", "[", "]", "\n", "for", "task_index", "in", "range", "(", "task_id", ")", ":", "\n", "        ", "projection_norm_lists", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "grad_list", ")", ")", ":", "#layer", "\n", "            ", "space_list", "=", "memory", "[", "task_name_list", "[", "task_index", "]", "]", "[", "str", "(", "i", ")", "]", "[", "'space_list'", "]", "\n", "print_log", "(", "\"Task:{}, layer:{}, space shape:{}\"", ".", "format", "(", "task_index", ",", "i", ",", "space_list", ".", "shape", ")", ",", "log", ")", "\n", "# grad_list is the grad for current task", "\n", "projection", "=", "np", ".", "dot", "(", "grad_list", "[", "i", "]", ",", "np", ".", "dot", "(", "space_list", ",", "space_list", ".", "transpose", "(", ")", ")", ")", "\n", "\n", "projection_norm", "=", "np", ".", "linalg", ".", "norm", "(", "projection", ")", "\n", "\n", "projection_norm_lists", ".", "append", "(", "projection_norm", ")", "\n", "gradient_norm", "=", "np", ".", "linalg", ".", "norm", "(", "grad_list", "[", "i", "]", ")", "\n", "print_log", "(", "'Task:{}, Layer:{}, project_norm:{}, threshold for regime 1:{}'", ".", "format", "(", "task_index", ",", "i", ",", "projection_norm", ",", "eplison_1", "*", "gradient_norm", ")", ",", "log", ")", "\n", "\n", "\n", "if", "projection_norm", "<=", "eplison_1", "*", "gradient_norm", ":", "\n", "                ", "memory", "[", "task_name", "]", "[", "str", "(", "i", ")", "]", "[", "'regime'", "]", "[", "task_index", "]", "=", "'1'", "\n", "", "else", ":", "\n", "                ", "memory", "[", "task_name", "]", "[", "str", "(", "i", ")", "]", "[", "'regime'", "]", "[", "task_index", "]", "=", "'2'", "\n", "\n", "", "", "gradient_norm_lists_tasks", ".", "append", "(", "projection_norm_lists", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "grad_list", ")", ")", ":", "\n", "            ", "print_log", "(", "'Layer:{}, Regime:{}'", ".", "format", "(", "i", ",", "memory", "[", "task_name", "]", "[", "str", "(", "i", ")", "]", "[", "'regime'", "]", "[", "task_index", "]", ")", ",", "log", ")", "\n", "# select top-k related tasks according to the projection norm, k = 2 in general (k= 1 for task 2)", "\n", "", "", "if", "task_id", "==", "1", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "grad_list", ")", ")", ":", "\n", "            ", "memory", "[", "task_name", "]", "[", "str", "(", "i", ")", "]", "[", "'selected_task'", "]", "=", "[", "0", "]", "\n", "", "", "else", ":", "\n", "        ", "if", "task_id", "==", "2", ":", "\n", "            ", "for", "layer", "in", "range", "(", "len", "(", "grad_list", ")", ")", ":", "\n", "                ", "memory", "[", "task_name", "]", "[", "str", "(", "layer", ")", "]", "[", "'selected_task'", "]", "=", "[", "1", "]", "\n", "print_log", "(", "'Layer:{}, selected task ID:{}'", ".", "format", "(", "layer", ",", "memory", "[", "task_name", "]", "[", "str", "(", "layer", ")", "]", "[", "'selected_task'", "]", ")", ",", "log", ")", "\n", "", "", "else", ":", "\n", "            ", "k", "=", "2", "\n", "for", "layer", "in", "range", "(", "len", "(", "grad_list", ")", ")", ":", "\n", "                ", "task_norm", "=", "[", "]", "\n", "for", "t", "in", "range", "(", "len", "(", "gradient_norm_lists_tasks", ")", ")", ":", "\n", "                    ", "norm", "=", "gradient_norm_lists_tasks", "[", "t", "]", "[", "layer", "]", "\n", "task_norm", ".", "append", "(", "norm", ")", "\n", "", "task_norm", "=", "np", ".", "array", "(", "task_norm", ")", "\n", "idx", "=", "np", ".", "argpartition", "(", "task_norm", ",", "-", "k", ")", "[", "-", "k", ":", "]", "\n", "memory", "[", "task_name", "]", "[", "str", "(", "layer", ")", "]", "[", "'selected_task'", "]", "=", "idx", "\n", "print_log", "(", "'Layer:{}, selected task ID:{}'", ".", "format", "(", "layer", ",", "memory", "[", "task_name", "]", "[", "str", "(", "layer", ")", "]", "[", "'selected_task'", "]", ")", ",", "log", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_five_dataset.main": [[520, 834], ["time.time", "torch.device", "torch.device", "torch.device", "torch.device", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "numpy.random.seed", "data_loader.get", "numpy.zeros", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "numpy.save", "main_five_dataset.print_log", "main_five_dataset.print_log", "main_five_dataset.print_log", "numpy.mean", "main_five_dataset.print_log", "main_five_dataset.print_log", "main_five_dataset.print_log", "pandas.DataFrame", "seaborn.set", "seaborn.heatmap", "matplotlib.show", "numpy.array", "task_name_list.append", "main_five_dataset.print_log", "main_five_dataset.print_log", "main_five_dataset.print_log", "task_list.append", "main_five_dataset.print_log", "main_five_dataset.print_log", "main_five_dataset.print_log", "main_five_dataset.print_log", "range", "main_five_dataset.save_model", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "ResNet18().to", "enumerate", "main_five_dataset.print_log", "enumerate", "main_five_dataset.print_log", "main_five_dataset.get_model", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "range", "print", "acc_list_all.append", "main_five_dataset.set_model_", "main_five_dataset.print_log", "main_five_dataset.test", "main_five_dataset.print_log", "main_five_dataset.get_representation_and_gradient", "main_five_dataset.get_space_and_grad", "main_five_dataset.print_log", "enumerate", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "range", "main_five_dataset.print_log", "main_five_dataset.grad_proj_cond", "range", "main_five_dataset.print_log", "range", "print", "acc_list_all.append", "main_five_dataset.set_model_", "range", "main_five_dataset.print_log", "main_five_dataset.get_representation_and_gradient", "main_five_dataset.get_space_and_grad", "ResNet18().to.named_parameters", "numpy.array", "main_five_dataset.print_log", "range", "main_five_dataset.print_log", "range", "main_five_dataset.print_log", "numpy.array", "acc_matrix[].mean", "ResNet18().to.named_parameters", "main_five_dataset.print_log", "ResNet18().to.named_parameters", "time.time", "main_five_dataset.train", "time.time", "main_five_dataset.test", "main_five_dataset.print_log", "main_five_dataset.test", "acc_list.append", "main_five_dataset.print_log", "main_five_dataset.print_log", "ResNet18().to.named_parameters", "len", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "main_five_dataset.print_log", "feature_mat.append", "enumerate", "main_five_dataset.print_log", "main_five_dataset.print_log", "time.time", "main_five_dataset.train_projected_regime", "time.time", "main_five_dataset.test", "main_five_dataset.print_log", "main_five_dataset.test", "acc_list.append", "checking_inner", "main_five_dataset.print_log", "main_five_dataset.print_log", "main_five_dataset.test", "main_five_dataset.print_log", "range", "main_five_dataset.test", "main_five_dataset.print_log", "main_five_dataset.print_log", "numpy.diag", "main_five_dataset.ResNet18", "len", "main_five_dataset.print_log", "ResNet18().to.named_parameters", "main_five_dataset.get_model", "main_five_dataset.print_log", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "ResNet18().to.named_parameters", "ResNet18().to.named_parameters", "main_five_dataset.get_model", "main_five_dataset.print_log", "enumerate", "time.time", "main_five_dataset.print_log", "main_five_dataset.adjust_learning_rate", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "main_five_dataset.print_log", "main_five_dataset.adjust_learning_rate", "str", "main_five_dataset.print_log", "str", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "numpy.dot", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "main_five_dataset.print_log", "params.size", "params.size", "space_list_all[].transpose", "str", "str", "str", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "ResNet18().to.named_parameters", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "ResNet18().to.named_parameters", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "str", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "[].to", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "[].to", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.LYang-666_TRGP.dataloader.miniimagenet.DatasetGen.get", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.save_model", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.utilis.get_model", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.set_model_", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.test", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.get_representation_and_gradient", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.get_space_and_grad", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.grad_proj_cond", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.set_model_", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.get_representation_and_gradient", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.get_space_and_grad", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.train", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.test", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.test", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.train_projected_regime", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.test", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.test", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.test", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.test", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_mini_dataset.ResNet18", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.utilis.get_model", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.utilis.get_model", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.adjust_learning_rate", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.adjust_learning_rate", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log"], ["", "", "", "", "def", "main", "(", "args", ")", ":", "\n", "    ", "tstart", "=", "time", ".", "time", "(", ")", "\n", "## Device Setting ", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "\n", "## Load CIFAR100 DATASET", "\n", "from", "dataloader", "import", "five_datasets", "as", "data_loader", "\n", "data", ",", "taskcla", ",", "inputsize", "=", "data_loader", ".", "get", "(", "pc_valid", "=", "args", ".", "pc_valid", ")", "\n", "\n", "acc_matrix", "=", "np", ".", "zeros", "(", "(", "5", ",", "5", ")", ")", "\n", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n", "task_id", "=", "0", "\n", "task_list", "=", "[", "]", "\n", "task_name_list", "=", "[", "]", "\n", "memory", "=", "{", "}", "\n", "acc_list_all", "=", "[", "]", "\n", "\n", "epochs_back", "=", "[", "]", "\n", "\n", "for", "k", ",", "ncla", "in", "taskcla", ":", "\n", "# specify threshold hyperparameter", "\n", "        ", "threshold", "=", "np", ".", "array", "(", "[", "0.965", "]", "*", "20", ")", "\n", "task_name", "=", "data", "[", "k", "]", "[", "'name'", "]", "\n", "task_name_list", ".", "append", "(", "task_name", ")", "\n", "print_log", "(", "'*'", "*", "100", ",", "log", ")", "\n", "print_log", "(", "'Task {:2d} ({:s})'", ".", "format", "(", "k", ",", "data", "[", "k", "]", "[", "'name'", "]", ")", ",", "log", ")", "\n", "print_log", "(", "'*'", "*", "100", ",", "log", ")", "\n", "xtrain", "=", "data", "[", "k", "]", "[", "'train'", "]", "[", "'x'", "]", "\n", "ytrain", "=", "data", "[", "k", "]", "[", "'train'", "]", "[", "'y'", "]", "\n", "xvalid", "=", "data", "[", "k", "]", "[", "'valid'", "]", "[", "'x'", "]", "\n", "yvalid", "=", "data", "[", "k", "]", "[", "'valid'", "]", "[", "'y'", "]", "\n", "xtest", "=", "data", "[", "k", "]", "[", "'test'", "]", "[", "'x'", "]", "\n", "ytest", "=", "data", "[", "k", "]", "[", "'test'", "]", "[", "'y'", "]", "\n", "task_list", ".", "append", "(", "k", ")", "\n", "\n", "lr", "=", "args", ".", "lr", "\n", "best_loss", "=", "np", ".", "inf", "\n", "print_log", "(", "'-'", "*", "40", ",", "log", ")", "\n", "print_log", "(", "'Task ID :{} | Learning Rate : {}'", ".", "format", "(", "task_id", ",", "lr", ")", ",", "log", ")", "\n", "print_log", "(", "'-'", "*", "40", ",", "log", ")", "\n", "\n", "if", "task_id", "==", "0", ":", "\n", "            ", "model", "=", "ResNet18", "(", "taskcla", ",", "20", ")", ".", "to", "(", "device", ")", "# base filters: 20", "\n", "\n", "for", "k_t", ",", "(", "m", ",", "param", ")", "in", "enumerate", "(", "model", ".", "named_parameters", "(", ")", ")", ":", "\n", "                ", "print_log", "(", "(", "k_t", ",", "m", ",", "param", ".", "shape", ")", ",", "log", ")", "\n", "\n", "", "memory", "[", "task_name", "]", "=", "{", "}", "\n", "\n", "print_log", "(", "'Model parameters ---'", ",", "log", ")", "\n", "kk", "=", "0", "\n", "for", "k_t", ",", "(", "m", ",", "param", ")", "in", "enumerate", "(", "model", ".", "named_parameters", "(", ")", ")", ":", "\n", "                ", "if", "len", "(", "param", ".", "shape", ")", "==", "4", ":", "\n", "                    ", "print_log", "(", "(", "k_t", ",", "m", ",", "param", ".", "shape", ")", ",", "log", ")", "\n", "memory", "[", "task_name", "]", "[", "str", "(", "kk", ")", "]", "=", "{", "\n", "'space_list'", ":", "{", "}", ",", "\n", "'grad_list'", ":", "{", "}", ",", "\n", "'regime'", ":", "{", "}", ",", "\n", "}", "\n", "kk", "+=", "1", "\n", "\n", "", "", "print_log", "(", "'-'", "*", "40", ",", "log", ")", "\n", "\n", "best_model", "=", "get_model", "(", "model", ")", "\n", "space_list_all", "=", "[", "]", "\n", "normal_param", "=", "[", "\n", "param", "for", "name", ",", "param", "in", "model", ".", "named_parameters", "(", ")", "\n", "if", "not", "'scale'", "in", "name", "\n", "]", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "[", "\n", "{", "'params'", ":", "normal_param", "}", "\n", "]", ",", "\n", "lr", "=", "lr", "\n", ")", "\n", "acc_list", "=", "[", "]", "\n", "for", "epoch", "in", "range", "(", "1", ",", "args", ".", "n_epochs", "+", "1", ")", ":", "\n", "# Train", "\n", "                ", "clock0", "=", "time", ".", "time", "(", ")", "\n", "train", "(", "args", ",", "model", ",", "device", ",", "xtrain", ",", "ytrain", ",", "optimizer", ",", "criterion", ",", "k", ")", "\n", "clock1", "=", "time", ".", "time", "(", ")", "\n", "tr_loss", ",", "tr_acc", "=", "test", "(", "args", ",", "model", ",", "device", ",", "xtrain", ",", "ytrain", ",", "criterion", ",", "k", ")", "\n", "print_log", "(", "'Epoch {:3d} | Train: loss={:.3f}, acc={:5.1f}% | time={:5.1f}ms |'", ".", "format", "(", "epoch", ",", "tr_loss", ",", "tr_acc", ",", "1000", "*", "(", "clock1", "-", "clock0", ")", ")", ",", "log", ")", "\n", "# Validate", "\n", "valid_loss", ",", "valid_acc", "=", "test", "(", "args", ",", "model", ",", "device", ",", "xvalid", ",", "yvalid", ",", "criterion", ",", "k", ")", "\n", "acc_list", ".", "append", "(", "valid_acc", ")", "\n", "print_log", "(", "' Valid: loss={:.3f}, acc={:5.1f}% |'", ".", "format", "(", "valid_loss", ",", "valid_acc", ")", ",", "log", ")", "\n", "# Adapt lr", "\n", "if", "valid_loss", "<", "best_loss", ":", "\n", "                    ", "best_loss", "=", "valid_loss", "\n", "best_model", "=", "get_model", "(", "model", ")", "\n", "patience", "=", "args", ".", "lr_patience", "\n", "print_log", "(", "' *'", ",", "log", ")", "\n", "", "else", ":", "\n", "                    ", "patience", "-=", "1", "\n", "if", "patience", "<=", "0", ":", "\n", "                        ", "lr", "/=", "args", ".", "lr_factor", "\n", "print_log", "(", "' lr={:.1e}'", ".", "format", "(", "lr", ")", ",", "log", ")", "\n", "if", "lr", "<", "args", ".", "lr_min", ":", "\n", "                            ", "print_log", "(", "\"\"", ",", "log", ")", "\n", "break", "\n", "", "patience", "=", "args", ".", "lr_patience", "\n", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "args", ")", "\n", "", "", "print_log", "(", "\"\"", ",", "log", ")", "\n", "", "print", "(", "acc_list", ")", "\n", "acc_list_all", ".", "append", "(", "acc_list", ")", "\n", "set_model_", "(", "model", ",", "best_model", ")", "\n", "# Test", "\n", "print_log", "(", "'-'", "*", "40", ",", "log", ")", "\n", "test_loss", ",", "test_acc", "=", "test", "(", "args", ",", "model", ",", "device", ",", "xtest", ",", "ytest", ",", "criterion", ",", "k", ")", "\n", "print_log", "(", "'Test: loss={:.3f} , acc={:5.1f}%'", ".", "format", "(", "test_loss", ",", "test_acc", ")", ",", "log", ")", "\n", "# Memory Update  ", "\n", "mat_list", ",", "grad_list", "=", "get_representation_and_gradient", "(", "model", ",", "device", ",", "optimizer", ",", "criterion", ",", "k", ",", "xtrain", ",", "ytrain", ")", "\n", "space_list_all", "=", "get_space_and_grad", "(", "model", ",", "mat_list", ",", "grad_list", ",", "threshold", ",", "memory", ",", "task_name", ",", "task_name_list", ",", "task_id", ",", "space_list_all", ")", "\n", "\n", "", "else", ":", "\n", "            ", "memory", "[", "task_name", "]", "=", "{", "}", "\n", "\n", "kk", "=", "0", "\n", "print_log", "(", "\"reinit the scale for each task\"", ",", "log", ")", "\n", "for", "k_t", ",", "(", "m", ",", "params", ")", "in", "enumerate", "(", "model", ".", "named_parameters", "(", ")", ")", ":", "\n", "# create the saved memory", "\n", "                ", "if", "'weight'", "in", "m", "and", "'bn'", "not", "in", "m", ":", "\n", "\n", "                    ", "memory", "[", "task_name", "]", "[", "str", "(", "kk", ")", "]", "=", "{", "\n", "'space_list'", ":", "{", "}", ",", "\n", "'grad_list'", ":", "{", "}", ",", "\n", "'space_mat_list'", ":", "{", "}", ",", "\n", "'scale1'", ":", "{", "}", ",", "\n", "'scale2'", ":", "{", "}", ",", "\n", "'regime'", ":", "{", "}", ",", "\n", "'selected_task'", ":", "{", "}", "\n", "}", "\n", "kk", "+=", "1", "\n", "#reinitialize the scale", "\n", "", "if", "'scale'", "in", "m", ":", "\n", "                    ", "mask", "=", "torch", ".", "eye", "(", "params", ".", "size", "(", "0", ")", ",", "params", ".", "size", "(", "1", ")", ")", ".", "to", "(", "device", ")", "\n", "\n", "params", ".", "data", "=", "mask", "\n", "# print(\"-----------------\")", "\n", "", "", "normal_param", "=", "[", "\n", "param", "for", "name", ",", "param", "in", "model", ".", "named_parameters", "(", ")", "\n", "if", "not", "'scale'", "in", "name", "\n", "]", "\n", "\n", "scale_param", "=", "[", "\n", "param", "for", "name", ",", "param", "in", "model", ".", "named_parameters", "(", ")", "\n", "if", "'scale'", "in", "name", "\n", "]", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "[", "\n", "{", "'params'", ":", "normal_param", "}", ",", "\n", "{", "'params'", ":", "scale_param", ",", "'weight_decay'", ":", "0", ",", "'lr'", ":", "lr", "}", "\n", "]", ",", "\n", "lr", "=", "lr", "\n", ")", "\n", "\n", "feature_mat", "=", "[", "]", "\n", "# Projection Matrix Precomputation", "\n", "for", "i", "in", "range", "(", "len", "(", "space_list_all", ")", ")", ":", "\n", "                 ", "Uf", "=", "torch", ".", "Tensor", "(", "np", ".", "dot", "(", "space_list_all", "[", "i", "]", ",", "space_list_all", "[", "i", "]", ".", "transpose", "(", ")", ")", ")", ".", "to", "(", "device", ")", "\n", "print_log", "(", "'Layer {} - Projection Matrix shape: {}'", ".", "format", "(", "i", "+", "1", ",", "Uf", ".", "shape", ")", ",", "log", ")", "\n", "feature_mat", ".", "append", "(", "Uf", ")", "\n", "\n", "#==1 gradient projection condition", "\n", "", "print_log", "(", "'excute gradient projection condition'", ",", "log", ")", "\n", "grad_proj_cond", "(", "args", ",", "model", ",", "xtrain", ",", "ytrain", ",", "memory", ",", "task_name", ",", "task_id", ",", "task_name_list", ",", "device", ",", "optimizer", ",", "criterion", ")", "\n", "\n", "# select the regime 2, which need to learn scale", "\n", "space1", "=", "[", "None", "]", "*", "20", "\n", "space2", "=", "[", "None", "]", "*", "20", "\n", "for", "i", "in", "range", "(", "20", ")", ":", "\n", "                ", "for", "k", ",", "task_sel", "in", "enumerate", "(", "memory", "[", "task_name", "]", "[", "str", "(", "i", ")", "]", "[", "'selected_task'", "]", ")", ":", "\n", "                    ", "if", "memory", "[", "task_name", "]", "[", "str", "(", "i", ")", "]", "[", "'regime'", "]", "[", "task_sel", "]", "==", "'2'", "or", "memory", "[", "task_name", "]", "[", "str", "(", "i", ")", "]", "[", "'regime'", "]", "[", "task_sel", "]", "==", "'3'", ":", "\n", "                        ", "if", "k", "==", "0", ":", "\n", "# change the np array to torch tensor", "\n", "                            ", "space1", "[", "i", "]", "=", "torch", ".", "FloatTensor", "(", "memory", "[", "task_name_list", "[", "task_sel", "]", "]", "[", "str", "(", "i", ")", "]", "[", "'space_list'", "]", ")", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "\n", "                            ", "space2", "[", "i", "]", "=", "torch", ".", "FloatTensor", "(", "memory", "[", "task_name_list", "[", "task_sel", "]", "]", "[", "str", "(", "i", ")", "]", "[", "'space_list'", "]", ")", ".", "to", "(", "device", ")", "\n", "", "", "", "", "if", "space1", "[", "0", "]", "is", "not", "None", ":", "\n", "                ", "print_log", "(", "'space1 is not None!'", ",", "log", ")", "\n", "", "if", "space2", "[", "0", "]", "is", "not", "None", ":", "\n", "                ", "print_log", "(", "'space2 is not None!'", ",", "log", ")", "\n", "\n", "", "print_log", "(", "'-'", "*", "40", ",", "log", ")", "\n", "acc_list", "=", "[", "]", "\n", "\n", "for", "epoch", "in", "range", "(", "1", ",", "args", ".", "n_epochs", "+", "1", ")", ":", "\n", "# Train ", "\n", "\n", "                ", "clock0", "=", "time", ".", "time", "(", ")", "\n", "train_projected_regime", "(", "args", ",", "model", ",", "device", ",", "xtrain", ",", "ytrain", ",", "optimizer", ",", "criterion", ",", "memory", ",", "task_name", ",", "task_name_list", ",", "space_list_all", ",", "task_id", ",", "feature_mat", ",", "space1", "=", "space1", ",", "space2", "=", "space2", ")", "\n", "clock1", "=", "time", ".", "time", "(", ")", "\n", "tr_loss", ",", "tr_acc", "=", "test", "(", "args", ",", "model", ",", "device", ",", "xtrain", ",", "ytrain", ",", "criterion", ",", "task_id", ",", "space1", "=", "space1", ",", "space2", "=", "space2", ")", "\n", "print_log", "(", "'Epoch {:3d} | Train: loss={:.3f}, acc={:5.1f}% | time={:5.1f}ms |'", ".", "format", "(", "epoch", ",", "tr_loss", ",", "tr_acc", ",", "1000", "*", "(", "clock1", "-", "clock0", ")", ")", ",", "log", ")", "\n", "# Validate", "\n", "valid_loss", ",", "valid_acc", "=", "test", "(", "args", ",", "model", ",", "device", ",", "xvalid", ",", "yvalid", ",", "criterion", ",", "task_id", ",", "space1", "=", "space1", ",", "space2", "=", "space2", ")", "\n", "acc_list", ".", "append", "(", "valid_acc", ")", "\n", "flag", "=", "checking_inner", "(", "args", ",", "model", ",", "memory", ",", "task_name", ",", "task_id", ",", "task_name_list", ",", "epoch", ")", "\n", "\n", "print_log", "(", "' Valid: loss={:.3f}, acc={:5.1f}% |'", ".", "format", "(", "valid_loss", ",", "valid_acc", ")", ",", "log", ")", "\n", "# Adapt lr", "\n", "if", "valid_loss", "<", "best_loss", ":", "\n", "                    ", "best_loss", "=", "valid_loss", "\n", "best_model", "=", "get_model", "(", "model", ")", "\n", "patience", "=", "args", ".", "lr_patience", "\n", "print_log", "(", "' *'", ",", "log", ")", "\n", "", "else", ":", "\n", "                    ", "patience", "-=", "1", "\n", "if", "patience", "<=", "0", ":", "\n", "                        ", "lr", "/=", "args", ".", "lr_factor", "\n", "print_log", "(", "' lr={:.1e}'", ".", "format", "(", "lr", ")", ",", "log", ")", "\n", "if", "lr", "<", "args", ".", "lr_min", ":", "\n", "                            ", "print_log", "(", "\"\"", ",", "log", ")", "\n", "break", "\n", "", "patience", "=", "args", ".", "lr_patience", "\n", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "args", ")", "\n", "", "", "print_log", "(", "\"\"", ",", "log", ")", "\n", "", "print", "(", "acc_list", ")", "\n", "acc_list_all", ".", "append", "(", "acc_list", ")", "\n", "set_model_", "(", "model", ",", "best_model", ")", "\n", "# Test ", "\n", "test_acc_sum", "=", "0", "\n", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "                ", "test_loss", ",", "test_acc", "=", "test", "(", "args", ",", "model", ",", "device", ",", "xtest", ",", "ytest", ",", "criterion", ",", "task_id", ",", "space1", "=", "space1", ",", "space2", "=", "space2", ")", "\n", "print_log", "(", "'Test: loss={:.3f} , acc={:5.1f}%'", ".", "format", "(", "test_loss", ",", "test_acc", ")", ",", "log", ")", "\n", "test_acc_sum", "+=", "test_acc", "\n", "", "test_acc_sum", "=", "test_acc_sum", "/", "10.", "\n", "print_log", "(", "'Average acc={:5.1f}%'", ".", "format", "(", "test_acc_sum", ")", ",", "log", ")", "\n", "# Memory Update ", "\n", "mat_list", ",", "grad_list", "=", "get_representation_and_gradient", "(", "model", ",", "device", ",", "optimizer", ",", "criterion", ",", "task_id", ",", "xtrain", ",", "ytrain", ")", "\n", "space_list_all", "=", "get_space_and_grad", "(", "model", ",", "mat_list", ",", "grad_list", ",", "threshold", ",", "memory", ",", "task_name", ",", "task_name_list", ",", "task_id", ",", "space_list_all", ")", "\n", "# save the scale value to memory", "\n", "idx1", "=", "0", "\n", "idx2", "=", "0", "\n", "for", "m", ",", "params", "in", "model", ".", "named_parameters", "(", ")", ":", "# layer ", "\n", "                ", "if", "'scale1'", "in", "m", ":", "\n", "                    ", "memory", "[", "task_name", "]", "[", "str", "(", "idx1", ")", "]", "[", "'scale1'", "]", "=", "params", ".", "data", "\n", "idx1", "+=", "1", "\n", "", "if", "'scale2'", "in", "m", ":", "\n", "                    ", "memory", "[", "task_name", "]", "[", "str", "(", "idx2", ")", "]", "[", "'scale2'", "]", "=", "params", ".", "data", "\n", "idx2", "+=", "1", "\n", "\n", "# save accuracy ", "\n", "", "", "", "jj", "=", "0", "\n", "for", "ii", "in", "np", ".", "array", "(", "task_list", ")", "[", "0", ":", "task_id", "+", "1", "]", ":", "\n", "            ", "xtest", "=", "data", "[", "ii", "]", "[", "'test'", "]", "[", "'x'", "]", "\n", "ytest", "=", "data", "[", "ii", "]", "[", "'test'", "]", "[", "'y'", "]", "\n", "# select the regime 2, which need to learn scale", "\n", "space1", "=", "[", "None", "]", "*", "20", "\n", "space2", "=", "[", "None", "]", "*", "20", "\n", "task_test", "=", "data", "[", "ii", "]", "[", "'name'", "]", "\n", "print_log", "(", "'current testing task:{}'", ".", "format", "(", "task_test", ")", ",", "log", ")", "\n", "\n", "\n", "if", "ii", ">", "0", ":", "\n", "                ", "for", "i", "in", "range", "(", "20", ")", ":", "\n", "                    ", "for", "k", ",", "task_sel", "in", "enumerate", "(", "memory", "[", "task_test", "]", "[", "str", "(", "i", ")", "]", "[", "'selected_task'", "]", ")", ":", "\n", "# print(memory[task_name]['regime'][task_sel])", "\n", "                        ", "if", "memory", "[", "task_test", "]", "[", "str", "(", "i", ")", "]", "[", "'regime'", "]", "[", "task_sel", "]", "==", "'2'", "or", "memory", "[", "task_name", "]", "[", "str", "(", "i", ")", "]", "[", "'regime'", "]", "[", "task_sel", "]", "==", "'3'", ":", "\n", "                            ", "if", "k", "==", "0", ":", "\n", "\n", "                                ", "space1", "[", "i", "]", "=", "torch", ".", "FloatTensor", "(", "memory", "[", "task_name_list", "[", "task_sel", "]", "]", "[", "str", "(", "i", ")", "]", "[", "'space_list'", "]", ")", ".", "to", "(", "device", ")", "\n", "idx", "=", "0", "\n", "for", "m", ",", "params", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "                                    ", "if", "'scale1'", "in", "m", ":", "\n", "                                        ", "params", ".", "data", "=", "memory", "[", "task_test", "]", "[", "str", "(", "idx", ")", "]", "[", "'scale1'", "]", ".", "to", "(", "device", ")", "\n", "idx", "+=", "1", "\n", "", "", "", "else", ":", "\n", "\n", "                                ", "space2", "[", "i", "]", "=", "torch", ".", "FloatTensor", "(", "memory", "[", "task_name_list", "[", "task_sel", "]", "]", "[", "str", "(", "i", ")", "]", "[", "'space_list'", "]", ")", ".", "to", "(", "device", ")", "\n", "idx", "=", "0", "\n", "for", "m", ",", "params", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "                                    ", "if", "'scale2'", "in", "m", ":", "\n", "                                        ", "params", ".", "data", "=", "memory", "[", "task_test", "]", "[", "str", "(", "idx", ")", "]", "[", "'scale2'", "]", ".", "to", "(", "device", ")", "\n", "idx", "+=", "1", "\n", "\n", "", "", "", "", "", "", "", "test_acc_sum", "=", "0", "\n", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "                ", "test_loss", ",", "test_acc", "=", "test", "(", "args", ",", "model", ",", "device", ",", "xtest", ",", "ytest", ",", "criterion", ",", "ii", ",", "space1", "=", "space1", ",", "space2", "=", "space2", ")", "\n", "print_log", "(", "'Test: loss={:.3f} , acc={:5.1f}%'", ".", "format", "(", "test_loss", ",", "test_acc", ")", ",", "log", ")", "\n", "test_acc_sum", "+=", "test_acc", "\n", "", "acc_matrix", "[", "task_id", ",", "jj", "]", "=", "test_acc_sum", "/", "5.", "\n", "#_, acc_matrix[task_id,jj] = test(args, model, device, xtest, ytest,criterion,ii, space1=space1, space2=space2) ", "\n", "jj", "+=", "1", "\n", "", "print_log", "(", "'Accuracies ='", ",", "log", ")", "\n", "for", "i_a", "in", "range", "(", "task_id", "+", "1", ")", ":", "\n", "            ", "print_log", "(", "'\\t'", ",", "log", ")", "\n", "for", "j_a", "in", "range", "(", "acc_matrix", ".", "shape", "[", "1", "]", ")", ":", "\n", "                ", "print_log", "(", "'{:5.1f}% '", ".", "format", "(", "acc_matrix", "[", "i_a", ",", "j_a", "]", ")", ",", "log", ",", "end", "=", "''", ")", "\n", "", "print_log", "(", "\"\"", ",", "log", ")", "\n", "# update task id ", "\n", "", "task_id", "+=", "1", "\n", "save_model", "(", "model", ",", "memory", ",", "args", ".", "savename", ")", "\n", "", "np", ".", "save", "(", "'five_ours.npy'", ",", "acc_list_all", ")", "\n", "print_log", "(", "'-'", "*", "50", ",", "log", ")", "\n", "# Simulation Results ", "\n", "print_log", "(", "'Task Order : {}'", ".", "format", "(", "np", ".", "array", "(", "task_list", ")", ")", ",", "log", ")", "\n", "print_log", "(", "'Final Avg Accuracy: {:5.2f}%'", ".", "format", "(", "acc_matrix", "[", "-", "1", "]", ".", "mean", "(", ")", ")", ",", "log", ")", "\n", "bwt", "=", "np", ".", "mean", "(", "(", "acc_matrix", "[", "-", "1", "]", "-", "np", ".", "diag", "(", "acc_matrix", ")", ")", "[", ":", "-", "1", "]", ")", "\n", "print_log", "(", "'Backward transfer: {:5.2f}%'", ".", "format", "(", "bwt", ")", ",", "log", ")", "\n", "print_log", "(", "'[Elapsed time = {:.1f} ms]'", ".", "format", "(", "(", "time", ".", "time", "(", ")", "-", "tstart", ")", "*", "1000", ")", ",", "log", ")", "\n", "print_log", "(", "'-'", "*", "50", ",", "log", ")", "\n", "# Plots", "\n", "array", "=", "acc_matrix", "\n", "df_cm", "=", "pd", ".", "DataFrame", "(", "array", ",", "index", "=", "[", "i", "for", "i", "in", "[", "\"T1\"", ",", "\"T2\"", ",", "\"T3\"", ",", "\"T4\"", ",", "\"T5\"", "]", "]", ",", "\n", "columns", "=", "[", "i", "for", "i", "in", "[", "\"T1\"", ",", "\"T2\"", ",", "\"T3\"", ",", "\"T4\"", ",", "\"T5\"", "]", "]", ")", "\n", "sn", ".", "set", "(", "font_scale", "=", "1.4", ")", "\n", "sn", ".", "heatmap", "(", "df_cm", ",", "annot", "=", "True", ",", "annot_kws", "=", "{", "\"size\"", ":", "10", "}", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_five_dataset.print_log": [[835, 842], ["log.write", "log.flush", "print", "print"], "function", ["None"], ["", "def", "print_log", "(", "print_string", ",", "log", ",", "end", "=", "None", ")", ":", "\n", "    ", "if", "end", "is", "not", "None", ":", "\n", "        ", "print", "(", "\"{}\"", ".", "format", "(", "print_string", ")", ",", "end", "=", "''", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"{}\"", ".", "format", "(", "print_string", ")", ")", "\n", "", "log", ".", "write", "(", "'{}\\n'", ".", "format", "(", "print_string", ")", ")", "\n", "log", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100.Pre_Model.__init__": [[35, 37], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "model", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100.Pre_Model.add": [[38, 40], ["None"], "methods", ["None"], ["", "def", "add", "(", "self", ",", "model", ")", ":", "\n", "        ", "self", ".", "model", "=", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100.Pre_Model.update": [[41, 43], ["main_cifar100.Pre_Model.model.load_state_dict", "copy.deepcopy", "model.state_dict"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "model", ")", ":", "\n", "        ", "self", ".", "model", ".", "load_state_dict", "(", "deepcopy", "(", "model", ".", "state_dict", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100.Conv2d.__init__": [[47, 71], ["torch.Conv2d.__init__", "main_cifar100.Conv2d.weight.data.new", "main_cifar100.Conv2d.fill_", "main_cifar100.Conv2d.fill_diagonal_", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "main_cifar100.Conv2d.weight.size", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "main_cifar100.Conv2d.weight.size", "main_cifar100.Conv2d.weight.size", "torch.ones().view", "torch.ones().view", "torch.ones().view", "torch.ones().view", "torch.ones().view", "torch.ones().view", "torch.ones().view", "torch.ones().view", "torch.ones().view", "torch.ones().view", "torch.ones().view", "torch.ones().view", "torch.ones().view", "torch.ones().view", "torch.ones().view", "torch.ones().view", "torch.ones().view", "torch.ones().view", "torch.ones().view", "torch.ones().view", "torch.ones().view", "torch.ones().view", "torch.ones().view", "torch.ones().view", "torch.ones().view", "torch.ones().view", "torch.ones().view", "torch.ones().view", "torch.ones().view", "torch.ones().view", "torch.ones().view", "torch.ones().view", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.LYang-666_TRGP.dataloader.miniimagenet.DatasetGen.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "padding", "=", "0", ",", "\n", "stride", "=", "1", ",", "\n", "dilation", "=", "1", ",", "\n", "groups", "=", "1", ",", "\n", "bias", "=", "True", ")", ":", "\n", "        ", "super", "(", "Conv2d", ",", "self", ")", ".", "__init__", "(", "in_channels", ",", "out_channels", ",", "\n", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "bias", ")", "\n", "# define the scale v", "\n", "size", "=", "self", ".", "weight", ".", "size", "(", "1", ")", "*", "self", ".", "weight", ".", "size", "(", "2", ")", "*", "self", ".", "weight", ".", "size", "(", "3", ")", "\n", "scale", "=", "self", ".", "weight", ".", "data", ".", "new", "(", "size", ",", "size", ")", "\n", "scale", ".", "fill_", "(", "0.", ")", "\n", "# initialize the diagonal as 1", "\n", "scale", ".", "fill_diagonal_", "(", "1.", ")", "\n", "# self.scale1 = scale.cuda()", "\n", "self", ".", "scale1", "=", "nn", ".", "Parameter", "(", "scale", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "scale2", "=", "nn", ".", "Parameter", "(", "scale", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "noise", "=", "False", "\n", "if", "self", ".", "noise", ":", "\n", "            ", "self", ".", "alpha_w1", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "self", ".", "out_channels", ")", ".", "view", "(", "-", "1", ",", "1", ",", "1", ",", "1", ")", "*", "0.02", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "alpha_w2", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "self", ".", "out_channels", ")", ".", "view", "(", "-", "1", ",", "1", ",", "1", ",", "1", ")", "*", "0.02", ",", "requires_grad", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100.Conv2d.forward": [[72, 125], ["torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "main_cifar100.Conv2d.weight.grad.data.size", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "main_cifar100.Conv2d.weight.std().item", "main_cifar100.Conv2d.weight.clone().normal_", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "space1.transpose", "main_cifar100.Conv2d.weight.size", "main_cifar100.Conv2d.weight.size", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "space2.transpose", "main_cifar100.Conv2d.weight.size", "main_cifar100.Conv2d.weight.size", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "space1.transpose", "main_cifar100.Conv2d.weight.size", "main_cifar100.Conv2d.weight.size", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "space2.transpose", "main_cifar100.Conv2d.weight.size", "main_cifar100.Conv2d.weight.size", "main_cifar100.Conv2d.weight.std", "main_cifar100.Conv2d.weight.clone", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "space1.size", "space1.size", "main_cifar100.Conv2d.weight.view", "main_cifar100.Conv2d.weight.view", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "space2.size", "space2.size", "main_cifar100.Conv2d.weight.view", "main_cifar100.Conv2d.weight.view", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "space1.size", "space1.size", "main_cifar100.Conv2d.weight.view", "main_cifar100.Conv2d.weight.view", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "space2.size", "space2.size", "main_cifar100.Conv2d.weight.view", "main_cifar100.Conv2d.weight.view", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "space1.transpose", "space2.transpose", "space1.transpose", "space2.transpose"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ",", "space1", "=", "None", ",", "space2", "=", "None", ")", ":", "\n", "\n", "        ", "if", "self", ".", "noise", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "std", "=", "self", ".", "weight", ".", "std", "(", ")", ".", "item", "(", ")", "\n", "noise", "=", "self", ".", "weight", ".", "clone", "(", ")", ".", "normal_", "(", "0", ",", "std", ")", "\n", "", "", "if", "space1", "is", "not", "None", "or", "space2", "is", "not", "None", ":", "\n", "            ", "sz", "=", "self", ".", "weight", ".", "grad", ".", "data", ".", "size", "(", "0", ")", "\n", "\n", "if", "space2", "is", "None", ":", "\n", "                ", "real_scale1", "=", "self", ".", "scale1", "[", ":", "space1", ".", "size", "(", "1", ")", ",", ":", "space1", ".", "size", "(", "1", ")", "]", "\n", "norm_project", "=", "torch", ".", "mm", "(", "torch", ".", "mm", "(", "space1", ",", "real_scale1", ")", ",", "space1", ".", "transpose", "(", "1", ",", "0", ")", ")", "\n", "#[chout, chinxkxk]  [chinxkxk, chinxkxk]", "\n", "proj_weight", "=", "torch", ".", "mm", "(", "self", ".", "weight", ".", "view", "(", "sz", ",", "-", "1", ")", ",", "norm_project", ")", ".", "view", "(", "self", ".", "weight", ".", "size", "(", ")", ")", "\n", "diag_weight", "=", "torch", ".", "mm", "(", "self", ".", "weight", ".", "view", "(", "sz", ",", "-", "1", ")", ",", "torch", ".", "mm", "(", "space1", ",", "space1", ".", "transpose", "(", "1", ",", "0", ")", ")", ")", ".", "view", "(", "self", ".", "weight", ".", "size", "(", ")", ")", "\n", "if", "self", ".", "noise", "and", "self", ".", "training", ":", "\n", "                    ", "masked_weight", "=", "proj_weight", "+", "self", ".", "weight", "-", "diag_weight", "+", "self", ".", "alpha_w2", "*", "noise", "*", "self", ".", "noise", "\n", "", "else", ":", "\n", "                    ", "masked_weight", "=", "proj_weight", "+", "self", ".", "weight", "-", "diag_weight", "\n", "\n", "", "", "if", "space1", "is", "None", ":", "\n", "\n", "                ", "real_scale2", "=", "self", ".", "scale2", "[", ":", "space2", ".", "size", "(", "1", ")", ",", ":", "space2", ".", "size", "(", "1", ")", "]", "\n", "norm_project", "=", "torch", ".", "mm", "(", "torch", ".", "mm", "(", "space2", ",", "real_scale2", ")", ",", "space2", ".", "transpose", "(", "1", ",", "0", ")", ")", "\n", "\n", "proj_weight", "=", "torch", ".", "mm", "(", "self", ".", "weight", ".", "view", "(", "sz", ",", "-", "1", ")", ",", "norm_project", ")", ".", "view", "(", "self", ".", "weight", ".", "size", "(", ")", ")", "\n", "diag_weight", "=", "torch", ".", "mm", "(", "self", ".", "weight", ".", "view", "(", "sz", ",", "-", "1", ")", ",", "torch", ".", "mm", "(", "space2", ",", "space2", ".", "transpose", "(", "1", ",", "0", ")", ")", ")", ".", "view", "(", "self", ".", "weight", ".", "size", "(", ")", ")", "\n", "\n", "if", "self", ".", "noise", ":", "\n", "                    ", "masked_weight", "=", "proj_weight", "+", "self", ".", "weight", "-", "diag_weight", "+", "self", ".", "alpha_w2", "*", "noise", "*", "self", ".", "noise", "\n", "", "else", ":", "\n", "                    ", "masked_weight", "=", "proj_weight", "+", "self", ".", "weight", "-", "diag_weight", "\n", "", "", "if", "space1", "is", "not", "None", "and", "space2", "is", "not", "None", ":", "\n", "                ", "real_scale1", "=", "self", ".", "scale1", "[", ":", "space1", ".", "size", "(", "1", ")", ",", ":", "space1", ".", "size", "(", "1", ")", "]", "\n", "norm_project1", "=", "torch", ".", "mm", "(", "torch", ".", "mm", "(", "space1", ",", "real_scale1", ")", ",", "space1", ".", "transpose", "(", "1", ",", "0", ")", ")", "\n", "proj_weight1", "=", "torch", ".", "mm", "(", "self", ".", "weight", ".", "view", "(", "sz", ",", "-", "1", ")", ",", "norm_project1", ")", ".", "view", "(", "self", ".", "weight", ".", "size", "(", ")", ")", "\n", "diag_weight1", "=", "torch", ".", "mm", "(", "self", ".", "weight", ".", "view", "(", "sz", ",", "-", "1", ")", ",", "torch", ".", "mm", "(", "space1", ",", "space1", ".", "transpose", "(", "1", ",", "0", ")", ")", ")", ".", "view", "(", "self", ".", "weight", ".", "size", "(", ")", ")", "\n", "\n", "real_scale2", "=", "self", ".", "scale2", "[", ":", "space2", ".", "size", "(", "1", ")", ",", ":", "space2", ".", "size", "(", "1", ")", "]", "\n", "norm_project2", "=", "torch", ".", "mm", "(", "torch", ".", "mm", "(", "space2", ",", "real_scale2", ")", ",", "space2", ".", "transpose", "(", "1", ",", "0", ")", ")", "\n", "proj_weight2", "=", "torch", ".", "mm", "(", "self", ".", "weight", ".", "view", "(", "sz", ",", "-", "1", ")", ",", "norm_project2", ")", ".", "view", "(", "self", ".", "weight", ".", "size", "(", ")", ")", "\n", "diag_weight2", "=", "torch", ".", "mm", "(", "self", ".", "weight", ".", "view", "(", "sz", ",", "-", "1", ")", ",", "torch", ".", "mm", "(", "space2", ",", "space2", ".", "transpose", "(", "1", ",", "0", ")", ")", ")", ".", "view", "(", "self", ".", "weight", ".", "size", "(", ")", ")", "\n", "\n", "if", "self", ".", "noise", ":", "\n", "                    ", "masked_weight", "=", "proj_weight1", "-", "diag_weight1", "+", "proj_weight2", "-", "diag_weight2", "+", "self", ".", "weight", "+", "(", "(", "self", ".", "alpha_w2", "+", "self", ".", "alpha_w1", ")", "/", "2", ")", "*", "noise", "*", "self", ".", "noise", "\n", "", "else", ":", "\n", "                    ", "masked_weight", "=", "proj_weight1", "-", "diag_weight1", "+", "proj_weight2", "-", "diag_weight2", "+", "self", ".", "weight", "\n", "\n", "", "", "", "else", ":", "\n", "            ", "masked_weight", "=", "self", ".", "weight", "\n", "\n", "", "return", "F", ".", "conv2d", "(", "input", ",", "masked_weight", ",", "self", ".", "bias", ",", "self", ".", "stride", ",", "\n", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "groups", ")", "\n", "# Define specific linear layer", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100.Linear.__init__": [[128, 144], ["torch.Linear.__init__", "main_cifar100.Linear.weight.data.new", "main_cifar100.Linear.fill_", "main_cifar100.Linear.fill_diagonal_", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "main_cifar100.Linear.weight.size", "main_cifar100.Linear.weight.size", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "main_cifar100.Linear.weight.size", "main_cifar100.Linear.weight.size"], "methods", ["home.repos.pwc.inspect_result.LYang-666_TRGP.dataloader.miniimagenet.DatasetGen.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ",", "bias", "=", "True", ")", ":", "\n", "        ", "super", "(", "Linear", ",", "self", ")", ".", "__init__", "(", "in_features", ",", "out_features", ",", "bias", "=", "bias", ")", "\n", "\n", "\n", "# define the scale v", "\n", "scale", "=", "self", ".", "weight", ".", "data", ".", "new", "(", "self", ".", "weight", ".", "size", "(", "1", ")", ",", "self", ".", "weight", ".", "size", "(", "1", ")", ")", "\n", "scale", ".", "fill_", "(", "0.", ")", "\n", "# initialize the diagonal as 1", "\n", "scale", ".", "fill_diagonal_", "(", "1.", ")", "\n", "# self.scale1 = scale.cuda()", "\n", "self", ".", "scale1", "=", "nn", ".", "Parameter", "(", "scale", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "scale2", "=", "nn", ".", "Parameter", "(", "scale", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "noise", "=", "False", "\n", "if", "self", ".", "noise", ":", "\n", "            ", "self", ".", "alpha_w1", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "self", ".", "weight", ".", "size", "(", ")", ")", "*", "0.1", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "alpha_w2", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "self", ".", "weight", ".", "size", "(", ")", ")", "*", "0.1", ",", "requires_grad", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100.Linear.forward": [[147, 203], ["torch.linear", "torch.linear", "torch.linear", "torch.linear", "main_cifar100.Linear.weight.grad.data.size", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "main_cifar100.Linear.weight.std().item", "main_cifar100.Linear.weight.clone().normal_", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "space1.transpose", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "space2.transpose", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "space1.transpose", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "space2.transpose", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "main_cifar100.Linear.weight.std", "main_cifar100.Linear.weight.clone", "space1.transpose", "space2.transpose", "space1.transpose", "space2.transpose", "space1.size", "space1.size", "space2.size", "space2.size", "space1.size", "space1.size", "space2.size", "space2.size"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ",", "space1", "=", "None", ",", "space2", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "noise", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "std", "=", "self", ".", "weight", ".", "std", "(", ")", ".", "item", "(", ")", "\n", "noise", "=", "self", ".", "weight", ".", "clone", "(", ")", ".", "normal_", "(", "0", ",", "std", ")", "\n", "", "", "if", "space1", "is", "not", "None", "or", "space2", "is", "not", "None", ":", "\n", "            ", "sz", "=", "self", ".", "weight", ".", "grad", ".", "data", ".", "size", "(", "0", ")", "\n", "\n", "if", "space2", "is", "None", ":", "\n", "\n", "                ", "real_scale1", "=", "self", ".", "scale1", "[", ":", "space1", ".", "size", "(", "1", ")", ",", ":", "space1", ".", "size", "(", "1", ")", "]", "\n", "norm_project", "=", "torch", ".", "mm", "(", "torch", ".", "mm", "(", "space1", ",", "real_scale1", ")", ",", "space1", ".", "transpose", "(", "1", ",", "0", ")", ")", "\n", "\n", "proj_weight", "=", "torch", ".", "mm", "(", "self", ".", "weight", ",", "norm_project", ")", "\n", "\n", "diag_weight", "=", "torch", ".", "mm", "(", "self", ".", "weight", ",", "torch", ".", "mm", "(", "space1", ",", "space1", ".", "transpose", "(", "1", ",", "0", ")", ")", ")", "\n", "# masked_weight = proj_weight + self.weight - diag_weight ", "\n", "if", "self", ".", "noise", "and", "self", ".", "training", ":", "\n", "                    ", "masked_weight", "=", "proj_weight", "+", "self", ".", "weight", "-", "diag_weight", "+", "self", ".", "alpha_w2", "*", "noise", "*", "self", ".", "noise", "\n", "", "else", ":", "\n", "                    ", "masked_weight", "=", "proj_weight", "+", "self", ".", "weight", "-", "diag_weight", "\n", "\n", "", "", "if", "space1", "is", "None", ":", "\n", "\n", "                ", "real_scale2", "=", "self", ".", "scale2", "[", ":", "space2", ".", "size", "(", "1", ")", ",", ":", "space2", ".", "size", "(", "1", ")", "]", "\n", "norm_project", "=", "torch", ".", "mm", "(", "torch", ".", "mm", "(", "space2", ",", "real_scale2", ")", ",", "space2", ".", "transpose", "(", "1", ",", "0", ")", ")", "\n", "\n", "proj_weight", "=", "torch", ".", "mm", "(", "self", ".", "weight", ",", "norm_project", ")", "\n", "diag_weight", "=", "torch", ".", "mm", "(", "self", ".", "weight", ",", "torch", ".", "mm", "(", "space2", ",", "space2", ".", "transpose", "(", "1", ",", "0", ")", ")", ")", "\n", "\n", "#masked_weight = proj_weight + self.weight - diag_weight", "\n", "if", "self", ".", "noise", "and", "self", ".", "training", ":", "\n", "                    ", "masked_weight", "=", "proj_weight", "+", "self", ".", "weight", "-", "diag_weight", "+", "self", ".", "alpha_w2", "*", "noise", "*", "self", ".", "noise", "\n", "", "else", ":", "\n", "                    ", "masked_weight", "=", "proj_weight", "+", "self", ".", "weight", "-", "diag_weight", "\n", "\n", "", "", "if", "space1", "is", "not", "None", "and", "space2", "is", "not", "None", ":", "\n", "                ", "real_scale1", "=", "self", ".", "scale1", "[", ":", "space1", ".", "size", "(", "1", ")", ",", ":", "space1", ".", "size", "(", "1", ")", "]", "\n", "norm_project1", "=", "torch", ".", "mm", "(", "torch", ".", "mm", "(", "space1", ",", "real_scale1", ")", ",", "space1", ".", "transpose", "(", "1", ",", "0", ")", ")", "\n", "proj_weight1", "=", "torch", ".", "mm", "(", "self", ".", "weight", ",", "norm_project1", ")", "\n", "diag_weight1", "=", "torch", ".", "mm", "(", "self", ".", "weight", ",", "torch", ".", "mm", "(", "space1", ",", "space1", ".", "transpose", "(", "1", ",", "0", ")", ")", ")", "\n", "\n", "real_scale2", "=", "self", ".", "scale2", "[", ":", "space2", ".", "size", "(", "1", ")", ",", ":", "space2", ".", "size", "(", "1", ")", "]", "\n", "norm_project2", "=", "torch", ".", "mm", "(", "torch", ".", "mm", "(", "space2", ",", "real_scale2", ")", ",", "space2", ".", "transpose", "(", "1", ",", "0", ")", ")", "\n", "proj_weight2", "=", "torch", ".", "mm", "(", "self", ".", "weight", ",", "norm_project2", ")", "\n", "diag_weight2", "=", "torch", ".", "mm", "(", "self", ".", "weight", ",", "torch", ".", "mm", "(", "space2", ",", "space2", ".", "transpose", "(", "1", ",", "0", ")", ")", ")", "\n", "\n", "#masked_weight = proj_weight1 - diag_weight1 + proj_weight2 - diag_weight2 + self.weight", "\n", "if", "self", ".", "noise", "and", "self", ".", "training", ":", "\n", "                    ", "masked_weight", "=", "proj_weight1", "-", "diag_weight1", "+", "proj_weight2", "-", "diag_weight2", "+", "self", ".", "weight", "+", "(", "(", "self", ".", "alpha_w2", "+", "self", ".", "alpha_w1", ")", "/", "2", ")", "*", "noise", "*", "self", ".", "noise", "\n", "", "else", ":", "\n", "                    ", "masked_weight", "=", "proj_weight1", "-", "diag_weight1", "+", "proj_weight2", "-", "diag_weight2", "+", "self", ".", "weight", "\n", "\n", "", "", "", "else", ":", "\n", "            ", "masked_weight", "=", "self", ".", "weight", "\n", "", "return", "F", ".", "linear", "(", "input", ",", "masked_weight", ",", "self", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100.AlexNet.__init__": [[209, 253], ["torch.Module.__init__", "collections.OrderedDict", "main_cifar100.AlexNet.map.append", "main_cifar100.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "main_cifar100.compute_conv_output_size", "main_cifar100.AlexNet.ksize.append", "main_cifar100.AlexNet.in_channel.append", "main_cifar100.AlexNet.map.append", "main_cifar100.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "main_cifar100.compute_conv_output_size", "main_cifar100.AlexNet.ksize.append", "main_cifar100.AlexNet.in_channel.append", "main_cifar100.AlexNet.map.append", "main_cifar100.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "main_cifar100.compute_conv_output_size", "main_cifar100.AlexNet.ksize.append", "main_cifar100.AlexNet.in_channel.append", "main_cifar100.AlexNet.map.append", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "main_cifar100.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "main_cifar100.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "main_cifar100.AlexNet.map.extend", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "main_cifar100.AlexNet.fc3.append", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.LYang-666_TRGP.dataloader.miniimagenet.DatasetGen.__init__", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.utilis.compute_conv_output_size", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.utilis.compute_conv_output_size", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.utilis.compute_conv_output_size"], ["    ", "def", "__init__", "(", "self", ",", "taskcla", ")", ":", "\n", "        ", "super", "(", "AlexNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "act", "=", "OrderedDict", "(", ")", "\n", "self", ".", "map", "=", "[", "]", "\n", "self", ".", "ksize", "=", "[", "]", "\n", "self", ".", "in_channel", "=", "[", "]", "\n", "self", ".", "map", ".", "append", "(", "32", ")", "\n", "self", ".", "conv1", "=", "Conv2d", "(", "3", ",", "64", ",", "4", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "track_running_stats", "=", "False", ")", "\n", "s", "=", "compute_conv_output_size", "(", "32", ",", "4", ")", "\n", "s", "=", "s", "//", "2", "\n", "self", ".", "ksize", ".", "append", "(", "4", ")", "\n", "self", ".", "in_channel", ".", "append", "(", "3", ")", "\n", "self", ".", "map", ".", "append", "(", "s", ")", "\n", "self", ".", "conv2", "=", "Conv2d", "(", "64", ",", "128", ",", "3", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "128", ",", "track_running_stats", "=", "False", ")", "\n", "s", "=", "compute_conv_output_size", "(", "s", ",", "3", ")", "\n", "s", "=", "s", "//", "2", "\n", "self", ".", "ksize", ".", "append", "(", "3", ")", "\n", "self", ".", "in_channel", ".", "append", "(", "64", ")", "\n", "self", ".", "map", ".", "append", "(", "s", ")", "\n", "self", ".", "conv3", "=", "Conv2d", "(", "128", ",", "256", ",", "2", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "256", ",", "track_running_stats", "=", "False", ")", "\n", "s", "=", "compute_conv_output_size", "(", "s", ",", "2", ")", "\n", "s", "=", "s", "//", "2", "\n", "self", ".", "smid", "=", "s", "\n", "self", ".", "ksize", ".", "append", "(", "2", ")", "\n", "self", ".", "in_channel", ".", "append", "(", "128", ")", "\n", "self", ".", "map", ".", "append", "(", "256", "*", "self", ".", "smid", "*", "self", ".", "smid", ")", "\n", "self", ".", "maxpool", "=", "torch", ".", "nn", ".", "MaxPool2d", "(", "2", ")", "\n", "self", ".", "relu", "=", "torch", ".", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "drop1", "=", "torch", ".", "nn", ".", "Dropout", "(", "0.2", ")", "\n", "self", ".", "drop2", "=", "torch", ".", "nn", ".", "Dropout", "(", "0.5", ")", "\n", "\n", "self", ".", "fc1", "=", "Linear", "(", "256", "*", "self", ".", "smid", "*", "self", ".", "smid", ",", "2048", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn4", "=", "nn", ".", "BatchNorm1d", "(", "2048", ",", "track_running_stats", "=", "False", ")", "\n", "self", ".", "fc2", "=", "Linear", "(", "2048", ",", "2048", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn5", "=", "nn", ".", "BatchNorm1d", "(", "2048", ",", "track_running_stats", "=", "False", ")", "\n", "self", ".", "map", ".", "extend", "(", "[", "2048", "]", ")", "\n", "\n", "self", ".", "taskcla", "=", "taskcla", "\n", "self", ".", "fc3", "=", "torch", ".", "nn", ".", "ModuleList", "(", ")", "\n", "for", "t", ",", "n", "in", "self", ".", "taskcla", ":", "\n", "            ", "self", ".", "fc3", ".", "append", "(", "torch", ".", "nn", ".", "Linear", "(", "2048", ",", "n", ",", "bias", "=", "False", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100.AlexNet.forward": [[254, 306], ["copy.deepcopy", "main_cifar100.AlexNet.size", "main_cifar100.AlexNet.conv1", "main_cifar100.AlexNet.maxpool", "main_cifar100.AlexNet.conv2", "main_cifar100.AlexNet.maxpool", "main_cifar100.AlexNet.conv3", "main_cifar100.AlexNet.maxpool", "main_cifar100.AlexNet.view", "main_cifar100.AlexNet.fc1", "main_cifar100.AlexNet.drop2", "main_cifar100.AlexNet.fc2", "main_cifar100.AlexNet.drop2", "main_cifar100.AlexNet.conv1", "main_cifar100.AlexNet.maxpool", "main_cifar100.AlexNet.conv2", "main_cifar100.AlexNet.maxpool", "main_cifar100.AlexNet.conv3", "main_cifar100.AlexNet.maxpool", "main_cifar100.AlexNet.view", "main_cifar100.AlexNet.fc1", "main_cifar100.AlexNet.drop2", "main_cifar100.AlexNet.fc2", "main_cifar100.AlexNet.drop2", "main_cifar100.AlexNet.drop1", "main_cifar100.AlexNet.drop1", "main_cifar100.AlexNet.drop2", "main_cifar100.AlexNet.relu", "main_cifar100.AlexNet.relu", "y.append", "main_cifar100.AlexNet.drop1", "main_cifar100.AlexNet.drop1", "main_cifar100.AlexNet.drop2", "main_cifar100.AlexNet.relu", "main_cifar100.AlexNet.relu", "y.append", "main_cifar100.AlexNet.relu", "main_cifar100.AlexNet.relu", "main_cifar100.AlexNet.relu", "main_cifar100.AlexNet.bn4", "main_cifar100.AlexNet.bn5", "main_cifar100.AlexNet.relu", "main_cifar100.AlexNet.relu", "main_cifar100.AlexNet.relu", "main_cifar100.AlexNet.bn4", "main_cifar100.AlexNet.bn5", "main_cifar100.AlexNet.bn1", "main_cifar100.AlexNet.bn2", "main_cifar100.AlexNet.bn3", "main_cifar100.AlexNet.bn1", "main_cifar100.AlexNet.bn2", "main_cifar100.AlexNet.bn3"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "space1", "=", "[", "None", ",", "None", ",", "None", ",", "None", ",", "None", "]", ",", "space2", "=", "[", "None", ",", "None", ",", "None", ",", "None", ",", "None", "]", ")", ":", "\n", "        ", "bsz", "=", "deepcopy", "(", "x", ".", "size", "(", "0", ")", ")", "\n", "if", "space1", "[", "0", "]", "is", "not", "None", "or", "space2", "[", "0", "]", "is", "not", "None", ":", "\n", "            ", "self", ".", "act", "[", "'conv1'", "]", "=", "x", "\n", "x", "=", "self", ".", "conv1", "(", "x", ",", "space1", "=", "space1", "[", "0", "]", ",", "space2", "=", "space2", "[", "0", "]", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "self", ".", "drop1", "(", "self", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", ")", ")", "\n", "\n", "self", ".", "act", "[", "'conv2'", "]", "=", "x", "\n", "x", "=", "self", ".", "conv2", "(", "x", ",", "space1", "=", "space1", "[", "1", "]", ",", "space2", "=", "space2", "[", "1", "]", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "self", ".", "drop1", "(", "self", ".", "relu", "(", "self", ".", "bn2", "(", "x", ")", ")", ")", ")", "\n", "\n", "self", ".", "act", "[", "'conv3'", "]", "=", "x", "\n", "x", "=", "self", ".", "conv3", "(", "x", ",", "space1", "=", "space1", "[", "2", "]", ",", "space2", "=", "space2", "[", "2", "]", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "self", ".", "drop2", "(", "self", ".", "relu", "(", "self", ".", "bn3", "(", "x", ")", ")", ")", ")", "\n", "\n", "x", "=", "x", ".", "view", "(", "bsz", ",", "-", "1", ")", "\n", "self", ".", "act", "[", "'fc1'", "]", "=", "x", "\n", "x", "=", "self", ".", "fc1", "(", "x", ",", "space1", "=", "space1", "[", "3", "]", ",", "space2", "=", "space2", "[", "3", "]", ")", "\n", "x", "=", "self", ".", "drop2", "(", "self", ".", "relu", "(", "self", ".", "bn4", "(", "x", ")", ")", ")", "\n", "\n", "self", ".", "act", "[", "'fc2'", "]", "=", "x", "\n", "x", "=", "self", ".", "fc2", "(", "x", ",", "space1", "=", "space1", "[", "4", "]", ",", "space2", "=", "space2", "[", "4", "]", ")", "\n", "x", "=", "self", ".", "drop2", "(", "self", ".", "relu", "(", "self", ".", "bn5", "(", "x", ")", ")", ")", "\n", "y", "=", "[", "]", "\n", "for", "t", ",", "i", "in", "self", ".", "taskcla", ":", "\n", "                ", "y", ".", "append", "(", "self", ".", "fc3", "[", "t", "]", "(", "x", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "act", "[", "'conv1'", "]", "=", "x", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "self", ".", "drop1", "(", "self", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", ")", ")", "\n", "\n", "self", ".", "act", "[", "'conv2'", "]", "=", "x", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "self", ".", "drop1", "(", "self", ".", "relu", "(", "self", ".", "bn2", "(", "x", ")", ")", ")", ")", "\n", "\n", "self", ".", "act", "[", "'conv3'", "]", "=", "x", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "self", ".", "drop2", "(", "self", ".", "relu", "(", "self", ".", "bn3", "(", "x", ")", ")", ")", ")", "\n", "\n", "x", "=", "x", ".", "view", "(", "bsz", ",", "-", "1", ")", "\n", "self", ".", "act", "[", "'fc1'", "]", "=", "x", "\n", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "self", ".", "drop2", "(", "self", ".", "relu", "(", "self", ".", "bn4", "(", "x", ")", ")", ")", "\n", "\n", "self", ".", "act", "[", "'fc2'", "]", "=", "x", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "x", "=", "self", ".", "drop2", "(", "self", ".", "relu", "(", "self", ".", "bn5", "(", "x", ")", ")", ")", "\n", "y", "=", "[", "]", "\n", "for", "t", ",", "i", "in", "self", ".", "taskcla", ":", "\n", "                ", "y", ".", "append", "(", "self", ".", "fc3", "[", "t", "]", "(", "x", ")", ")", "\n", "\n", "", "", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100.compute_conv_output_size": [[205, 207], ["int", "numpy.floor", "float"], "function", ["None"], ["", "", "def", "compute_conv_output_size", "(", "Lin", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ")", ":", "\n", "    ", "return", "int", "(", "np", ".", "floor", "(", "(", "Lin", "+", "2", "*", "padding", "-", "dilation", "*", "(", "kernel_size", "-", "1", ")", "-", "1", ")", "/", "float", "(", "stride", ")", "+", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100.get_model": [[307, 309], ["copy.deepcopy", "model.state_dict"], "function", ["None"], ["", "", "def", "get_model", "(", "model", ")", ":", "\n", "    ", "return", "deepcopy", "(", "model", ".", "state_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100.set_model_": [[310, 313], ["model.load_state_dict", "copy.deepcopy"], "function", ["None"], ["", "def", "set_model_", "(", "model", ",", "state_dict", ")", ":", "\n", "    ", "model", ".", "load_state_dict", "(", "deepcopy", "(", "state_dict", ")", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100.save_model": [[314, 325], ["torch.save", "torch.save", "torch.save", "torch.save", "print", "model.state_dict"], "function", ["None"], ["", "def", "save_model", "(", "model", ",", "memory", ",", "savename", ")", ":", "\n", "    ", "ckpt", "=", "{", "\n", "'model'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'memory'", ":", "memory", ",", "\n", "}", "\n", "\n", "# Save to file.", "\n", "torch", ".", "save", "(", "ckpt", ",", "savename", "+", "'checkpoint.pt'", ")", "\n", "print", "(", "savename", ")", "\n", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100.adjust_learning_rate": [[326, 332], ["None"], "function", ["None"], ["", "def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "args", ")", ":", "\n", "    ", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "if", "(", "epoch", "==", "1", ")", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "args", ".", "lr", "\n", "", "else", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "/=", "args", ".", "lr_factor", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100.train": [[333, 349], ["model.train", "numpy.arange", "numpy.random.shuffle", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "range", "x.size", "len", "optimizer.zero_grad", "model", "criterion", "criterion.backward", "optimizer.step", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "len", "data.to", "y[].to"], "function", ["home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.train"], ["", "", "", "def", "train", "(", "args", ",", "model", ",", "device", ",", "x", ",", "y", ",", "optimizer", ",", "criterion", ",", "task_id", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "r", "=", "np", ".", "arange", "(", "x", ".", "size", "(", "0", ")", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "r", ")", "\n", "r", "=", "torch", ".", "LongTensor", "(", "r", ")", ".", "to", "(", "device", ")", "\n", "# Loop batches", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "r", ")", ",", "args", ".", "batch_size_train", ")", ":", "\n", "        ", "if", "i", "+", "args", ".", "batch_size_train", "<=", "len", "(", "r", ")", ":", "b", "=", "r", "[", "i", ":", "i", "+", "args", ".", "batch_size_train", "]", "\n", "else", ":", "b", "=", "r", "[", "i", ":", "]", "\n", "data", "=", "x", "[", "b", "]", "\n", "data", ",", "target", "=", "data", ".", "to", "(", "device", ")", ",", "y", "[", "b", "]", ".", "to", "(", "device", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "loss", "=", "criterion", "(", "output", "[", "task_id", "]", ",", "target", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100.train_projected_regime": [[352, 387], ["model.train", "numpy.arange", "numpy.random.shuffle", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "range", "x.size", "len", "optimizer.zero_grad", "model", "criterion", "criterion.backward", "enumerate", "optimizer.step", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "len", "data.to", "y[].to", "model.named_parameters", "params.grad.data.size", "len", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "params.grad.data.fill_", "params.size", "params.size", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "len", "params.grad.data.view", "params.size"], "function", ["home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.train"], ["", "", "def", "train_projected_regime", "(", "args", ",", "model", ",", "device", ",", "x", ",", "y", ",", "optimizer", ",", "criterion", ",", "memory", ",", "task_name", ",", "task_name_list", ",", "space_list_all", ",", "task_id", ",", "feature_mat", ",", "epoch", ",", "space1", "=", "[", "None", ",", "None", ",", "None", "]", ",", "space2", "=", "[", "None", ",", "None", ",", "None", "]", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "r", "=", "np", ".", "arange", "(", "x", ".", "size", "(", "0", ")", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "r", ")", "\n", "r", "=", "torch", ".", "LongTensor", "(", "r", ")", ".", "to", "(", "device", ")", "\n", "\n", "\n", "# Loop batches", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "r", ")", ",", "args", ".", "batch_size_train", ")", ":", "\n", "\n", "        ", "if", "i", "+", "args", ".", "batch_size_train", "<=", "len", "(", "r", ")", ":", "b", "=", "r", "[", "i", ":", "i", "+", "args", ".", "batch_size_train", "]", "\n", "else", ":", "b", "=", "r", "[", "i", ":", "]", "\n", "data", "=", "x", "[", "b", "]", "\n", "data", ",", "target", "=", "data", ".", "to", "(", "device", ")", ",", "y", "[", "b", "]", ".", "to", "(", "device", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "output", "=", "model", "(", "data", ",", "space1", "=", "space1", ",", "space2", "=", "space2", ")", "\n", "loss", "=", "criterion", "(", "output", "[", "task_id", "]", ",", "target", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "kk", "=", "0", "\n", "for", "k", ",", "(", "m", ",", "params", ")", "in", "enumerate", "(", "model", ".", "named_parameters", "(", ")", ")", ":", "\n", "            ", "if", "'weight'", "in", "m", ":", "\n", "                ", "if", "k", "<", "21", "and", "len", "(", "params", ".", "size", "(", ")", ")", "!=", "1", ":", "\n", "                    ", "sz", "=", "params", ".", "grad", ".", "data", ".", "size", "(", "0", ")", "\n", "params", ".", "grad", ".", "data", "=", "params", ".", "grad", ".", "data", "-", "torch", ".", "mm", "(", "params", ".", "grad", ".", "data", ".", "view", "(", "sz", ",", "-", "1", ")", ",", "feature_mat", "[", "kk", "]", ")", ".", "view", "(", "params", ".", "size", "(", ")", ")", "\n", "\n", "\n", "kk", "+=", "1", "\n", "", "elif", "(", "k", "<", "1", "and", "len", "(", "params", ".", "size", "(", ")", ")", "==", "1", ")", "and", "task_id", "!=", "0", ":", "\n", "                    ", "params", ".", "grad", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n", "\n", "", "", "", "optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100.test": [[390, 416], ["model.eval", "numpy.arange", "numpy.random.shuffle", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "x.size", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "range", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "len", "model", "criterion", "output[].argmax", "output[].argmax.eq().sum().item", "len", "len", "data.to", "y[].to", "criterion.data.cpu().numpy().item", "len", "output[].argmax.eq().sum", "criterion.data.cpu().numpy", "output[].argmax.eq", "target.view_as", "criterion.data.cpu"], "function", ["None"], ["", "", "def", "test", "(", "args", ",", "model", ",", "device", ",", "x", ",", "y", ",", "criterion", ",", "task_id", ",", "space1", "=", "[", "None", ",", "None", ",", "None", "]", ",", "space2", "=", "[", "None", ",", "None", ",", "None", "]", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "total_loss", "=", "0", "\n", "total_num", "=", "0", "\n", "correct", "=", "0", "\n", "r", "=", "np", ".", "arange", "(", "x", ".", "size", "(", "0", ")", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "r", ")", "\n", "r", "=", "torch", ".", "LongTensor", "(", "r", ")", ".", "to", "(", "device", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# Loop batches", "\n", "        ", "for", "i", "in", "range", "(", "0", ",", "len", "(", "r", ")", ",", "args", ".", "batch_size_test", ")", ":", "\n", "            ", "if", "i", "+", "args", ".", "batch_size_test", "<=", "len", "(", "r", ")", ":", "b", "=", "r", "[", "i", ":", "i", "+", "args", ".", "batch_size_test", "]", "\n", "else", ":", "b", "=", "r", "[", "i", ":", "]", "\n", "data", "=", "x", "[", "b", "]", "\n", "data", ",", "target", "=", "data", ".", "to", "(", "device", ")", ",", "y", "[", "b", "]", ".", "to", "(", "device", ")", "\n", "output", "=", "model", "(", "data", ",", "space1", "=", "space1", ",", "space2", "=", "space2", ")", "\n", "loss", "=", "criterion", "(", "output", "[", "task_id", "]", ",", "target", ")", "\n", "pred", "=", "output", "[", "task_id", "]", ".", "argmax", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "correct", "+=", "pred", ".", "eq", "(", "target", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "total_loss", "+=", "loss", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "item", "(", ")", "*", "len", "(", "b", ")", "\n", "total_num", "+=", "len", "(", "b", ")", "\n", "\n", "", "", "acc", "=", "100.", "*", "correct", "/", "total_num", "\n", "final_loss", "=", "total_loss", "/", "total_num", "\n", "return", "final_loss", ",", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100.get_representation_and_gradient": [[417, 469], ["numpy.arange", "numpy.random.shuffle", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "list", "net.eval", "net", "range", "main_cifar100.print_log", "main_cifar100.print_log", "main_cifar100.print_log", "range", "main_cifar100.print_log", "x.size", "example_data.to", "y[].to", "net.act.keys", "len", "len", "main_cifar100.print_log", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "main_cifar100.compute_conv_output_size", "numpy.zeros", "net.act[].detach().cpu().numpy", "range", "mat_list.append", "net.act[].detach().cpu().numpy", "act[].transpose", "mat_list.append", "range", "net.act[].detach().cpu", "range", "net.act[].detach().cpu", "act[].reshape", "net.act[].detach", "net.act[].detach"], "function", ["home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.utilis.compute_conv_output_size"], ["", "def", "get_representation_and_gradient", "(", "args", ",", "net", ",", "device", ",", "optimizer", ",", "criterion", ",", "task_id", ",", "x", ",", "y", "=", "None", ")", ":", "\n", "    ", "'''\n    aim to get the representation (activation) and gradient(optimal) of each layer\n    '''", "\n", "\n", "# Collect activations by forward pass", "\n", "steps", "=", "1", "\n", "r", "=", "np", ".", "arange", "(", "x", ".", "size", "(", "0", ")", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "r", ")", "\n", "r", "=", "torch", ".", "LongTensor", "(", "r", ")", ".", "to", "(", "device", ")", "\n", "b", "=", "r", "[", "0", ":", "125", "]", "# Take 125 random samples ", "\n", "example_data", "=", "x", "[", "b", "]", "\n", "example_data", ",", "target", "=", "example_data", ".", "to", "(", "device", ")", ",", "y", "[", "b", "]", ".", "to", "(", "device", ")", "\n", "\n", "batch_list", "=", "[", "2", "*", "12", ",", "100", ",", "100", ",", "125", ",", "125", "]", "\n", "mat_list", "=", "[", "]", "\n", "grad_list", "=", "[", "]", "# list contains gradient of each layer", "\n", "act_key", "=", "list", "(", "net", ".", "act", ".", "keys", "(", ")", ")", "\n", "grad_list_steps", "=", "[", "]", "\n", "grad_list_avg", "=", "[", "]", "\n", "\n", "\n", "net", ".", "eval", "(", ")", "\n", "example_out", "=", "net", "(", "example_data", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "net", ".", "map", ")", ")", ":", "\n", "        ", "bsz", "=", "batch_list", "[", "i", "]", "\n", "k", "=", "0", "\n", "if", "i", "<", "3", ":", "\n", "            ", "ksz", "=", "net", ".", "ksize", "[", "i", "]", "\n", "s", "=", "compute_conv_output_size", "(", "net", ".", "map", "[", "i", "]", ",", "net", ".", "ksize", "[", "i", "]", ")", "\n", "# logging.info(\"s:{}\".format(s))", "\n", "mat", "=", "np", ".", "zeros", "(", "(", "net", ".", "ksize", "[", "i", "]", "*", "net", ".", "ksize", "[", "i", "]", "*", "net", ".", "in_channel", "[", "i", "]", ",", "s", "*", "s", "*", "bsz", ")", ")", "\n", "act", "=", "net", ".", "act", "[", "act_key", "[", "i", "]", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "for", "kk", "in", "range", "(", "bsz", ")", ":", "\n", "                ", "for", "ii", "in", "range", "(", "s", ")", ":", "\n", "                    ", "for", "jj", "in", "range", "(", "s", ")", ":", "\n", "                        ", "mat", "[", ":", ",", "k", "]", "=", "act", "[", "kk", ",", ":", ",", "ii", ":", "ksz", "+", "ii", ",", "jj", ":", "ksz", "+", "jj", "]", ".", "reshape", "(", "-", "1", ")", "\n", "k", "+=", "1", "\n", "", "", "", "mat_list", ".", "append", "(", "mat", ")", "\n", "", "else", ":", "\n", "            ", "act", "=", "net", ".", "act", "[", "act_key", "[", "i", "]", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "activation", "=", "act", "[", "0", ":", "bsz", "]", ".", "transpose", "(", ")", "\n", "mat_list", ".", "append", "(", "activation", ")", "\n", "\n", "", "", "print_log", "(", "'-'", "*", "30", ",", "log", ")", "\n", "print_log", "(", "'Representation Matrix'", ",", "log", ")", "\n", "print_log", "(", "'-'", "*", "30", ",", "log", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "mat_list", ")", ")", ":", "\n", "        ", "print_log", "(", "'Layer {} : {}'", ".", "format", "(", "i", "+", "1", ",", "mat_list", "[", "i", "]", ".", "shape", ")", ",", "log", ")", "\n", "", "print_log", "(", "'-'", "*", "30", ",", "log", ")", "\n", "return", "mat_list", ",", "grad_list", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100.get_space_and_grad": [[471, 625], ["main_cifar100.print_log", "main_cifar100.print_log", "main_cifar100.print_log", "main_cifar100.print_log", "range", "main_cifar100.print_log", "range", "range", "print", "len", "numpy.linalg.svd", "numpy.sum", "space_list_all.append", "len", "main_cifar100.print_log", "main_cifar100.print_log", "numpy.dot", "range", "numpy.array", "numpy.linalg.svd", "numpy.dot", "numpy.linalg.svd", "numpy.hstack", "len", "range", "main_cifar100.print_log", "main_cifar100.print_log", "numpy.hstack", "main_cifar100.print_log", "main_cifar100.print_log", "main_cifar100.print_log", "numpy.linalg.svd", "range", "numpy.linalg.svd", "range", "numpy.hstack", "main_cifar100.print_log", "numpy.cumsum", "activation.transpose", "numpy.dot", "np.array.append", "numpy.dot", "numpy.argsort", "numpy.sort", "len", "len", "numpy.hstack", "numpy.array", "numpy.dot", "main_cifar100.print_log", "str", "space_list_all[].transpose", "numpy.dot", "space_list_all[].transpose", "len", "numpy.dot", "space.transpose", "numpy.linalg.norm", "str", "space_list.transpose", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log"], ["", "def", "get_space_and_grad", "(", "args", ",", "model", ",", "mat_list", ",", "grad_list", ",", "threshold", ",", "memory", ",", "task_name", ",", "task_name_list", ",", "task_id", ",", "space_list_all", ")", ":", "\n", "    ", "'''\n    Get the space for each layer\n    '''", "\n", "print_log", "(", "'Threshold:{}'", ".", "format", "(", "threshold", ")", ",", "log", ")", "\n", "Ours", "=", "True", "\n", "if", "task_name", "==", "'cifar100-0'", ":", "\n", "# After First Task ", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "mat_list", ")", ")", ":", "\n", "            ", "activation", "=", "mat_list", "[", "i", "]", "\n", "# gradient = grad_list[i]", "\n", "\n", "U", ",", "S", ",", "Vh", "=", "np", ".", "linalg", ".", "svd", "(", "activation", ",", "full_matrices", "=", "False", ")", "\n", "# criteria (Eq-5)", "\n", "sval_total", "=", "(", "S", "**", "2", ")", ".", "sum", "(", ")", "\n", "sval_ratio", "=", "(", "S", "**", "2", ")", "/", "sval_total", "\n", "r", "=", "np", ".", "sum", "(", "np", ".", "cumsum", "(", "sval_ratio", ")", "<", "threshold", "[", "i", "]", ")", "#+1  ", "\n", "\n", "# save into memory", "\n", "memory", "[", "task_name", "]", "[", "str", "(", "i", ")", "]", "[", "'space_list'", "]", "=", "U", "[", ":", ",", "0", ":", "r", "]", "\n", "# memory[task_name][str(i)]['grad_list'] = gradient", "\n", "\n", "space_list_all", ".", "append", "(", "U", "[", ":", ",", "0", ":", "r", "]", ")", "\n", "\n", "\n", "\n", "", "", "else", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "mat_list", ")", ")", ":", "\n", "            ", "activation", "=", "mat_list", "[", "i", "]", "\n", "\n", "\n", "if", "Ours", ":", "\n", "#=1. calculate the projection using previous space", "\n", "                ", "print_log", "(", "'activation shape:{}'", ".", "format", "(", "activation", ".", "shape", ")", ",", "log", ")", "\n", "print_log", "(", "'space shape:{}'", ".", "format", "(", "space_list_all", "[", "i", "]", ".", "shape", ")", ",", "log", ")", "\n", "#delta = np.dot(np.dot(space_list_all[i],space_list_all[i].transpose()),activation)", "\n", "delta", "=", "[", "]", "\n", "R2", "=", "np", ".", "dot", "(", "activation", ",", "activation", ".", "transpose", "(", ")", ")", "\n", "for", "ki", "in", "range", "(", "space_list_all", "[", "i", "]", ".", "shape", "[", "1", "]", ")", ":", "\n", "                    ", "space", "=", "space_list_all", "[", "i", "]", ".", "transpose", "(", ")", "[", "ki", "]", "\n", "# print(space.shape)", "\n", "delta_i", "=", "np", ".", "dot", "(", "np", ".", "dot", "(", "space", ".", "transpose", "(", ")", ",", "R2", ")", ",", "space", ")", "\n", "# print(delta_i)", "\n", "delta", ".", "append", "(", "delta_i", ")", "\n", "", "delta", "=", "np", ".", "array", "(", "delta", ")", "\n", "\n", "#=2  following the GPM to get the sigma (S**2)", "\n", "U1", ",", "S1", ",", "Vh1", "=", "np", ".", "linalg", ".", "svd", "(", "activation", ",", "full_matrices", "=", "False", ")", "\n", "sval_total", "=", "(", "S1", "**", "2", ")", ".", "sum", "(", ")", "\n", "\n", "act_hat", "=", "activation", "\n", "\n", "act_hat", "-=", "np", ".", "dot", "(", "np", ".", "dot", "(", "space_list_all", "[", "i", "]", ",", "space_list_all", "[", "i", "]", ".", "transpose", "(", ")", ")", ",", "activation", ")", "\n", "U", ",", "S", ",", "Vh", "=", "np", ".", "linalg", ".", "svd", "(", "act_hat", ",", "full_matrices", "=", "False", ")", "\n", "sigma", "=", "S", "**", "2", "\n", "\n", "#=3 stack delta and sigma in a same list, then sort in descending order", "\n", "stack", "=", "np", ".", "hstack", "(", "(", "delta", ",", "sigma", ")", ")", "#[0,..30, 31..99]", "\n", "stack_index", "=", "np", ".", "argsort", "(", "stack", ")", "[", ":", ":", "-", "1", "]", "#[99, 0, 4,7...]", "\n", "#print('stack index:{}'.format(stack_index))", "\n", "stack", "=", "np", ".", "sort", "(", "stack", ")", "[", ":", ":", "-", "1", "]", "\n", "\n", "#=4 select the most import basis", "\n", "r_pre", "=", "len", "(", "delta", ")", "\n", "r", "=", "0", "\n", "accumulated_sval", "=", "0", "\n", "for", "ii", "in", "range", "(", "len", "(", "stack", ")", ")", ":", "\n", "                    ", "if", "accumulated_sval", "<", "threshold", "[", "i", "]", "*", "sval_total", ":", "\n", "                        ", "accumulated_sval", "+=", "stack", "[", "ii", "]", "\n", "r", "+=", "1", "\n", "if", "r", "==", "activation", ".", "shape", "[", "0", "]", ":", "\n", "                            ", "break", "\n", "", "", "else", ":", "\n", "                        ", "break", "\n", "# if r == 0:", "\n", "#     print ('Skip Updating GPM for layer: {}'.format(i+1)) ", "\n", "#     continue        ", "\n", "", "", "print_log", "(", "'threshold for selecting:{}'", ".", "format", "(", "np", ".", "linalg", ".", "norm", "(", "activation", ")", "**", "2", ")", ",", "log", ")", "\n", "print_log", "(", "\"total ranking r = {}\"", ".", "format", "(", "r", ")", ",", "log", ")", "\n", "\n", "#=5 save the corresponding space", "\n", "Ui", "=", "np", ".", "hstack", "(", "(", "space_list_all", "[", "i", "]", ",", "U", ")", ")", "\n", "sel_index", "=", "stack_index", "[", ":", "r", "]", "\n", "#print('sel_index:{}'.format(sel_index))", "\n", "# this is the current space", "\n", "U_new", "=", "Ui", "[", ":", ",", "sel_index", "]", "\n", "# calculate how many space from current new task", "\n", "sel_index_from_U", "=", "sel_index", "[", "sel_index", ">", "r_pre", "]", "\n", "# print(sel_index)", "\n", "# print(sel_index_from_U)", "\n", "if", "len", "(", "sel_index_from_U", ")", ">", "0", ":", "\n", "# update the overall space without overlap", "\n", "                    ", "total_U", "=", "np", ".", "hstack", "(", "(", "space_list_all", "[", "i", "]", ",", "Ui", "[", ":", ",", "sel_index_from_U", "]", ")", ")", "\n", "space_list_all", "[", "i", "]", "=", "total_U", "\n", "", "else", ":", "\n", "                    ", "space_list_all", "[", "i", "]", "=", "np", ".", "array", "(", "space_list_all", "[", "i", "]", ")", "\n", "# else:", "\n", "#     continue", "\n", "#print(\"Ui shape:{}\".format(Ui.shape))", "\n", "", "print_log", "(", "\"the number of space for current task:{}\"", ".", "format", "(", "r", ")", ",", "log", ")", "\n", "print_log", "(", "'the new increased space:{}, the threshold for new space:{}'", ".", "format", "(", "len", "(", "sel_index_from_U", ")", ",", "r_pre", ")", ",", "log", ")", "\n", "\n", "print_log", "(", "\"Ui shape:{}\"", ".", "format", "(", "Ui", "[", ":", ",", "sel_index", "]", ".", "shape", ")", ",", "log", ")", "\n", "memory", "[", "task_name", "]", "[", "str", "(", "i", ")", "]", "[", "'space_list'", "]", "=", "Ui", "[", ":", ",", "sel_index", "]", "\n", "\n", "", "else", ":", "\n", "                ", "U1", ",", "S1", ",", "Vh1", "=", "np", ".", "linalg", ".", "svd", "(", "activation", ",", "full_matrices", "=", "False", ")", "\n", "sval_total", "=", "(", "S1", "**", "2", ")", ".", "sum", "(", ")", "\n", "# Projected Representation (Eq-8)", "\n", "# Go through all the previous tasks", "\n", "act_hat", "=", "activation", "\n", "for", "task_index", "in", "range", "(", "task_id", ")", ":", "\n", "                    ", "space_list", "=", "memory", "[", "task_name_list", "[", "task_index", "]", "]", "[", "str", "(", "i", ")", "]", "[", "'space_list'", "]", "\n", "act_hat", "-=", "np", ".", "dot", "(", "np", ".", "dot", "(", "space_list", ",", "space_list", ".", "transpose", "(", ")", ")", ",", "activation", ")", "\n", "\n", "", "U", ",", "S", ",", "Vh", "=", "np", ".", "linalg", ".", "svd", "(", "act_hat", ",", "full_matrices", "=", "False", ")", "\n", "\n", "#update GPM", "\n", "# criteria (Eq-9)", "\n", "sval_hat", "=", "(", "S", "**", "2", ")", ".", "sum", "(", ")", "\n", "sval_ratio", "=", "(", "S", "**", "2", ")", "/", "sval_total", "\n", "accumulated_sval", "=", "(", "sval_total", "-", "sval_hat", ")", "/", "sval_total", "\n", "\n", "r", "=", "0", "\n", "for", "ii", "in", "range", "(", "sval_ratio", ".", "shape", "[", "0", "]", ")", ":", "\n", "                    ", "if", "accumulated_sval", "<", "threshold", "[", "i", "]", ":", "\n", "                        ", "accumulated_sval", "+=", "sval_ratio", "[", "ii", "]", "\n", "r", "+=", "1", "\n", "", "else", ":", "\n", "                        ", "break", "\n", "", "", "if", "r", "==", "0", ":", "\n", "                    ", "print_log", "(", "'Skip Updating GPM for layer: {}'", ".", "format", "(", "i", "+", "1", ")", ",", "log", ")", "\n", "\n", "", "Ui", "=", "np", ".", "hstack", "(", "(", "space_list_all", "[", "i", "]", ",", "U", "[", ":", ",", "0", ":", "r", "]", ")", ")", "\n", "print_log", "(", "'Ui shape:{}'", ".", "format", "(", "Ui", ".", "shape", ")", ",", "log", ")", "\n", "if", "Ui", ".", "shape", "[", "1", "]", ">", "Ui", ".", "shape", "[", "0", "]", ":", "\n", "                    ", "space_list_all", "[", "i", "]", "=", "Ui", "[", ":", ",", "0", ":", "Ui", ".", "shape", "[", "0", "]", "]", "\n", "", "else", ":", "\n", "                    ", "space_list_all", "[", "i", "]", "=", "Ui", "\n", "", "if", "r", "==", "0", ":", "\n", "                    ", "memory", "[", "task_name", "]", "[", "str", "(", "i", ")", "]", "[", "'space_list'", "]", "=", "space_list", "\n", "", "else", ":", "\n", "                    ", "memory", "[", "task_name", "]", "[", "str", "(", "i", ")", "]", "[", "'space_list'", "]", "=", "U", "[", ":", ",", "0", ":", "r", "]", "\n", "\n", "\n", "", "", "", "", "print_log", "(", "'-'", "*", "40", ",", "log", ")", "\n", "print_log", "(", "'Gradient Constraints Summary'", ",", "log", ")", "\n", "print_log", "(", "'-'", "*", "40", ",", "log", ")", "\n", "\n", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "        ", "print", "(", "'Layer {} : {}/{}'", ".", "format", "(", "i", "+", "1", ",", "space_list_all", "[", "i", "]", ".", "shape", "[", "1", "]", ",", "space_list_all", "[", "i", "]", ".", "shape", "[", "0", "]", ")", ")", "\n", "", "print_log", "(", "'-'", "*", "40", ",", "log", ")", "\n", "\n", "return", "space_list_all", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100.grad_proj_cond": [[626, 713], ["numpy.arange", "numpy.random.shuffle", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "list", "range", "range", "main_cifar100.print_log", "main_cifar100.print_log", "x.size", "example_data.to", "y[].to", "net.act.keys", "optimizer.zero_grad", "net", "criterion", "criterion.backward", "enumerate", "range", "gradient_norm_lists_tasks.append", "range", "range", "range", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "net.named_parameters", "len", "main_cifar100.print_log", "numpy.dot", "numpy.linalg.norm", "projection_norm_lists.append", "numpy.linalg.norm", "main_cifar100.print_log", "len", "main_cifar100.print_log", "len", "len", "range", "numpy.array", "main_cifar100.print_log", "numpy.dot", "len", "np.array.append", "numpy.argpartition", "len", "params.grad.data.detach().cpu().numpy", "params.grad.data.detach().cpu().numpy.reshape", "grad_list.append", "space_list.transpose", "params.grad.data.detach().cpu().numpy", "grad_list.append", "str", "str", "str", "params.grad.data.detach().cpu", "params.grad.data.detach().cpu().numpy", "grad_list.append", "params.grad.data.detach().cpu", "str", "str", "str", "params.grad.data.detach", "params.grad.data.detach().cpu", "str", "params.grad.data.detach", "params.grad.data.detach"], "function", ["home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log"], ["", "def", "grad_proj_cond", "(", "args", ",", "net", ",", "x", ",", "y", ",", "memory", ",", "task_name", ",", "task_id", ",", "task_name_list", ",", "device", ",", "optimizer", ",", "criterion", ")", ":", "\n", "    ", "'''\n    get the regime descision \n    '''", "\n", "\n", "# calcuate the gradient for current task before training", "\n", "steps", "=", "1", "\n", "r", "=", "np", ".", "arange", "(", "x", ".", "size", "(", "0", ")", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "r", ")", "\n", "r", "=", "torch", ".", "LongTensor", "(", "r", ")", ".", "to", "(", "device", ")", "\n", "b", "=", "r", "[", "0", ":", "125", "]", "# Take 125*10 random samples", "\n", "example_data", "=", "x", "[", "b", "]", "\n", "example_data", ",", "target", "=", "example_data", ".", "to", "(", "device", ")", ",", "y", "[", "b", "]", ".", "to", "(", "device", ")", "\n", "\n", "batch_list", "=", "[", "2", "*", "12", ",", "100", ",", "100", ",", "125", ",", "125", "]", "\n", "grad_list", "=", "[", "]", "# list contains gradient of each layer", "\n", "act_key", "=", "list", "(", "net", ".", "act", ".", "keys", "(", ")", ")", "\n", "#print('task id:{}'.format(task_id))", "\n", "for", "i", "in", "range", "(", "1", ")", ":", "\n", "\n", "        ", "optimizer", ".", "zero_grad", "(", ")", "\n", "example_out", "=", "net", "(", "example_data", ")", "\n", "\n", "loss", "=", "criterion", "(", "example_out", "[", "task_id", "]", ",", "target", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "k_linear", "=", "0", "\n", "for", "k", ",", "(", "m", ",", "params", ")", "in", "enumerate", "(", "net", ".", "named_parameters", "(", ")", ")", ":", "\n", "            ", "if", "'weight'", "in", "m", "and", "'bn'", "not", "in", "m", ":", "\n", "                ", "if", "len", "(", "params", ".", "shape", ")", "==", "4", ":", "\n", "\n", "                    ", "grad", "=", "params", ".", "grad", ".", "data", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "grad", "=", "grad", ".", "reshape", "(", "grad", ".", "shape", "[", "0", "]", ",", "grad", ".", "shape", "[", "1", "]", "*", "grad", ".", "shape", "[", "2", "]", "*", "grad", ".", "shape", "[", "3", "]", ")", "\n", "grad_list", ".", "append", "(", "grad", ")", "\n", "", "else", ":", "\n", "                    ", "if", "'fc3'", "in", "m", "and", "k_linear", "==", "task_id", ":", "\n", "                        ", "grad", "=", "params", ".", "grad", ".", "data", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "grad_list", ".", "append", "(", "grad", ")", "\n", "k_linear", "+=", "1", "\n", "", "elif", "'fc3'", "not", "in", "m", ":", "\n", "                        ", "grad", "=", "params", ".", "grad", ".", "data", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "grad_list", ".", "append", "(", "grad", ")", "\n", "\n", "# project on each task subspace", "\n", "", "", "", "", "", "gradient_norm_lists_tasks", "=", "[", "]", "\n", "for", "task_index", "in", "range", "(", "task_id", ")", ":", "\n", "        ", "projection_norm_lists", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "grad_list", ")", ")", ":", "#layer", "\n", "            ", "space_list", "=", "memory", "[", "task_name_list", "[", "task_index", "]", "]", "[", "str", "(", "i", ")", "]", "[", "'space_list'", "]", "\n", "print_log", "(", "\"Task:{}, layer:{}, space shape:{}\"", ".", "format", "(", "task_index", ",", "i", ",", "space_list", ".", "shape", ")", ",", "log", ")", "\n", "# grad_list is the grad for current task", "\n", "projection", "=", "np", ".", "dot", "(", "grad_list", "[", "i", "]", ",", "np", ".", "dot", "(", "space_list", ",", "space_list", ".", "transpose", "(", ")", ")", ")", "\n", "projection_norm", "=", "np", ".", "linalg", ".", "norm", "(", "projection", ")", "\n", "\n", "projection_norm_lists", ".", "append", "(", "projection_norm", ")", "\n", "gradient_norm", "=", "np", ".", "linalg", ".", "norm", "(", "grad_list", "[", "i", "]", ")", "\n", "print_log", "(", "'Task:{}, Layer:{}, project_norm:{}, threshold for regime 1:{}'", ".", "format", "(", "task_index", ",", "i", ",", "projection_norm", ",", "Eplison_1", "*", "gradient_norm", ")", ",", "log", ")", "\n", "\n", "# make decision if Regime 1", "\n", "# logging.info('project_norm:{}, threshold for regime 1:{}'.format(projection_norm, eplison_1 * gradient_norm))", "\n", "if", "projection_norm", "<=", "Eplison_1", "*", "gradient_norm", ":", "\n", "                ", "memory", "[", "task_name", "]", "[", "str", "(", "i", ")", "]", "[", "'regime'", "]", "[", "task_index", "]", "=", "'1'", "\n", "", "else", ":", "\n", "\n", "                ", "memory", "[", "task_name", "]", "[", "str", "(", "i", ")", "]", "[", "'regime'", "]", "[", "task_index", "]", "=", "'2'", "\n", "", "", "gradient_norm_lists_tasks", ".", "append", "(", "projection_norm_lists", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "grad_list", ")", ")", ":", "\n", "            ", "print_log", "(", "'Layer:{}, Regime:{}'", ".", "format", "(", "i", ",", "memory", "[", "task_name", "]", "[", "str", "(", "i", ")", "]", "[", "'regime'", "]", "[", "task_index", "]", ")", ",", "log", ")", "\n", "\n", "", "", "print_log", "(", "'-'", "*", "20", ",", "log", ")", "\n", "print_log", "(", "'selected top-2 tasks:'", ",", "log", ")", "\n", "if", "task_id", "==", "1", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "grad_list", ")", ")", ":", "\n", "            ", "memory", "[", "task_name", "]", "[", "str", "(", "i", ")", "]", "[", "'selected_task'", "]", "=", "[", "0", "]", "\n", "", "", "else", ":", "\n", "        ", "k", "=", "2", "\n", "\n", "for", "layer", "in", "range", "(", "len", "(", "grad_list", ")", ")", ":", "\n", "            ", "task_norm", "=", "[", "]", "\n", "for", "t", "in", "range", "(", "len", "(", "gradient_norm_lists_tasks", ")", ")", ":", "\n", "                ", "norm", "=", "gradient_norm_lists_tasks", "[", "t", "]", "[", "layer", "]", "\n", "task_norm", ".", "append", "(", "norm", ")", "\n", "", "task_norm", "=", "np", ".", "array", "(", "task_norm", ")", "\n", "idx", "=", "np", ".", "argpartition", "(", "task_norm", ",", "-", "k", ")", "[", "-", "k", ":", "]", "\n", "memory", "[", "task_name", "]", "[", "str", "(", "layer", ")", "]", "[", "'selected_task'", "]", "=", "idx", "\n", "print_log", "(", "'Layer:{}, selected task ID:{}'", ".", "format", "(", "layer", ",", "memory", "[", "task_name", "]", "[", "str", "(", "layer", ")", "]", "[", "'selected_task'", "]", ")", ",", "log", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100.main": [[719, 1034], ["time.time", "torch.device", "torch.device", "torch.device", "torch.device", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "numpy.random.seed", "cf100.get", "numpy.zeros", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "main_cifar100.print_log", "main_cifar100.print_log", "main_cifar100.print_log", "numpy.mean", "main_cifar100.print_log", "main_cifar100.print_log", "main_cifar100.print_log", "pandas.DataFrame", "seaborn.set", "seaborn.heatmap", "sn.heatmap.figure.savefig", "matplotlib.show", "task_name_list.append", "main_cifar100.print_log", "main_cifar100.print_log", "main_cifar100.print_log", "task_list.append", "main_cifar100.print_log", "main_cifar100.print_log", "main_cifar100.print_log", "main_cifar100.print_log", "range", "main_cifar100.save_model", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "numpy.array", "AlexNet().to", "enumerate", "main_cifar100.print_log", "enumerate", "main_cifar100.print_log", "main_cifar100.get_model", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "range", "print", "main_cifar100.set_model_", "main_cifar100.print_log", "main_cifar100.test", "main_cifar100.print_log", "main_cifar100.get_representation_and_gradient", "main_cifar100.get_space_and_grad", "main_cifar100.print_log", "enumerate", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "range", "main_cifar100.print_log", "main_cifar100.grad_proj_cond", "range", "main_cifar100.print_log", "range", "main_cifar100.set_model_", "print", "print", "range", "main_cifar100.print_log", "main_cifar100.get_representation_and_gradient", "main_cifar100.get_space_and_grad", "AlexNet().to.named_parameters", "numpy.array", "main_cifar100.print_log", "range", "main_cifar100.print_log", "range", "main_cifar100.print_log", "numpy.array", "acc_matrix[].mean", "numpy.array", "AlexNet().to.named_parameters", "print", "AlexNet().to.named_parameters", "time.time", "main_cifar100.train", "time.time", "main_cifar100.test", "main_cifar100.print_log", "main_cifar100.test", "acc_list.append", "main_cifar100.print_log", "main_cifar100.print_log", "AlexNet().to.named_parameters", "len", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "main_cifar100.print_log", "feature_mat.append", "enumerate", "main_cifar100.print_log", "main_cifar100.print_log", "time.time", "main_cifar100.train_projected_regime", "time.time", "main_cifar100.test", "main_cifar100.print_log", "main_cifar100.test", "main_cifar100.print_log", "acc_list.append", "main_cifar100.print_log", "main_cifar100.test", "main_cifar100.print_log", "range", "main_cifar100.test", "main_cifar100.print_log", "acc_lines.append", "numpy.diag", "main_cifar100.AlexNet", "main_cifar100.print_log", "AlexNet().to.named_parameters", "main_cifar100.get_model", "main_cifar100.print_log", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "AlexNet().to.named_parameters", "AlexNet().to.named_parameters", "main_cifar100.get_model", "main_cifar100.print_log", "enumerate", "time.time", "main_cifar100.print_log", "main_cifar100.adjust_learning_rate", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "main_cifar100.print_log", "main_cifar100.adjust_learning_rate", "str", "main_cifar100.print_log", "str", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "numpy.dot", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "main_cifar100.print_log", "params.size", "params.size", "space_list_all[].transpose", "str", "str", "str", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "AlexNet().to.named_parameters", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "AlexNet().to.named_parameters", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "str", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "[].to", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "[].to", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.LYang-666_TRGP.dataloader.miniimagenet.DatasetGen.get", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.save_model", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.utilis.get_model", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.set_model_", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.test", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.get_representation_and_gradient", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.get_space_and_grad", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.grad_proj_cond", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.set_model_", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.get_representation_and_gradient", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.get_space_and_grad", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.train", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.test", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.test", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.train_projected_regime", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.test", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.test", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.test", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.test", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.utilis.get_model", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.utilis.get_model", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.adjust_learning_rate", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.adjust_learning_rate", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log"], ["", "", "", "def", "main", "(", "args", ")", ":", "\n", "    ", "tstart", "=", "time", ".", "time", "(", ")", "\n", "## Device Setting ", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "## Load CIFAR100 DATASET", "\n", "from", "dataloader", "import", "cifar100", "as", "cf100", "\n", "data", ",", "taskcla", ",", "inputsize", "=", "cf100", ".", "get", "(", "seed", "=", "args", ".", "seed", ",", "pc_valid", "=", "args", ".", "pc_valid", ")", "\n", "\n", "acc_matrix", "=", "np", ".", "zeros", "(", "(", "10", ",", "10", ")", ")", "\n", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n", "task_id", "=", "0", "\n", "task_list", "=", "[", "]", "\n", "task_name_list", "=", "[", "]", "\n", "memory", "=", "{", "}", "\n", "\n", "epochs_back", "=", "[", "]", "\n", "for", "k", ",", "ncla", "in", "taskcla", ":", "\n", "# specify threshold hyperparameter", "\n", "\n", "        ", "threshold", "=", "np", ".", "array", "(", "[", "0.97", "]", "*", "5", ")", "+", "task_id", "*", "np", ".", "array", "(", "[", "0.003", "]", "*", "5", ")", "\n", "task_name", "=", "data", "[", "k", "]", "[", "'name'", "]", "\n", "task_name_list", ".", "append", "(", "task_name", ")", "\n", "print_log", "(", "'*'", "*", "100", ",", "log", ")", "\n", "print_log", "(", "'Task {:2d} ({:s})'", ".", "format", "(", "k", ",", "data", "[", "k", "]", "[", "'name'", "]", ")", ",", "log", ")", "\n", "print_log", "(", "'*'", "*", "100", ",", "log", ")", "\n", "xtrain", "=", "data", "[", "k", "]", "[", "'train'", "]", "[", "'x'", "]", "\n", "ytrain", "=", "data", "[", "k", "]", "[", "'train'", "]", "[", "'y'", "]", "\n", "xvalid", "=", "data", "[", "k", "]", "[", "'valid'", "]", "[", "'x'", "]", "\n", "yvalid", "=", "data", "[", "k", "]", "[", "'valid'", "]", "[", "'y'", "]", "\n", "xtest", "=", "data", "[", "k", "]", "[", "'test'", "]", "[", "'x'", "]", "\n", "ytest", "=", "data", "[", "k", "]", "[", "'test'", "]", "[", "'y'", "]", "\n", "task_list", ".", "append", "(", "k", ")", "\n", "\n", "lr", "=", "args", ".", "lr", "\n", "best_loss", "=", "np", ".", "inf", "\n", "print_log", "(", "'-'", "*", "40", ",", "log", ")", "\n", "print_log", "(", "'Task ID :{} | Learning Rate : {}'", ".", "format", "(", "task_id", ",", "lr", ")", ",", "log", ")", "\n", "print_log", "(", "'-'", "*", "40", ",", "log", ")", "\n", "\n", "if", "task_id", "==", "0", ":", "\n", "            ", "model", "=", "AlexNet", "(", "taskcla", ")", ".", "to", "(", "device", ")", "\n", "for", "k_t", ",", "(", "m", ",", "param", ")", "in", "enumerate", "(", "model", ".", "named_parameters", "(", ")", ")", ":", "\n", "                ", "print", "(", "k_t", ",", "m", ",", "param", ".", "shape", ")", "\n", "", "memory", "[", "task_name", "]", "=", "{", "}", "\n", "\n", "print_log", "(", "'Model parameters ---'", ",", "log", ")", "\n", "kk", "=", "0", "\n", "for", "k_t", ",", "(", "m", ",", "param", ")", "in", "enumerate", "(", "model", ".", "named_parameters", "(", ")", ")", ":", "\n", "                ", "if", "'weight'", "in", "m", "and", "'bn'", "not", "in", "m", ":", "\n", "                    ", "print_log", "(", "(", "k_t", ",", "m", ",", "param", ".", "shape", ")", ",", "log", ")", "\n", "memory", "[", "task_name", "]", "[", "str", "(", "kk", ")", "]", "=", "{", "\n", "'space_list'", ":", "{", "}", ",", "\n", "'grad_list'", ":", "{", "}", ",", "\n", "'regime'", ":", "{", "}", ",", "\n", "}", "\n", "kk", "+=", "1", "\n", "\n", "", "", "print_log", "(", "'-'", "*", "40", ",", "log", ")", "\n", "\n", "best_model", "=", "get_model", "(", "model", ")", "\n", "space_list_all", "=", "[", "]", "\n", "normal_param", "=", "[", "\n", "param", "for", "name", ",", "param", "in", "model", ".", "named_parameters", "(", ")", "\n", "if", "not", "'scale'", "in", "name", "\n", "]", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "[", "\n", "{", "'params'", ":", "normal_param", "}", "\n", "]", ",", "\n", "lr", "=", "lr", "\n", ")", "\n", "acc_list", "=", "[", "]", "\n", "for", "epoch", "in", "range", "(", "1", ",", "args", ".", "n_epochs", "+", "1", ")", ":", "\n", "# Train", "\n", "                ", "clock0", "=", "time", ".", "time", "(", ")", "\n", "train", "(", "args", ",", "model", ",", "device", ",", "xtrain", ",", "ytrain", ",", "optimizer", ",", "criterion", ",", "k", ")", "\n", "clock1", "=", "time", ".", "time", "(", ")", "\n", "tr_loss", ",", "tr_acc", "=", "test", "(", "args", ",", "model", ",", "device", ",", "xtrain", ",", "ytrain", ",", "criterion", ",", "k", ")", "\n", "print_log", "(", "'Epoch {:3d} | Train: loss={:.3f}, acc={:5.1f}% | time={:5.1f}ms |'", ".", "format", "(", "epoch", ",", "tr_loss", ",", "tr_acc", ",", "1000", "*", "(", "clock1", "-", "clock0", ")", ")", ",", "log", ")", "\n", "# Validate", "\n", "valid_loss", ",", "valid_acc", "=", "test", "(", "args", ",", "model", ",", "device", ",", "xvalid", ",", "yvalid", ",", "criterion", ",", "k", ")", "\n", "acc_list", ".", "append", "(", "valid_acc", ")", "\n", "print_log", "(", "' Valid: loss={:.3f}, acc={:5.1f}% |'", ".", "format", "(", "valid_loss", ",", "valid_acc", ")", ",", "log", ")", "\n", "\n", "# check the inner and threshold for regime 3", "\n", "\n", "# Adapt lr", "\n", "if", "valid_loss", "<", "best_loss", ":", "\n", "                    ", "best_loss", "=", "valid_loss", "\n", "best_model", "=", "get_model", "(", "model", ")", "\n", "patience", "=", "args", ".", "lr_patience", "\n", "print_log", "(", "' *'", ",", "log", ")", "\n", "", "else", ":", "\n", "                    ", "patience", "-=", "1", "\n", "if", "patience", "<=", "0", ":", "\n", "                        ", "lr", "/=", "args", ".", "lr_factor", "\n", "print_log", "(", "' lr={:.1e}'", ".", "format", "(", "lr", ")", ",", "log", ")", "\n", "if", "lr", "<", "args", ".", "lr_min", ":", "\n", "                            ", "print_log", "(", "\"\"", ",", "log", ")", "\n", "break", "\n", "", "patience", "=", "args", ".", "lr_patience", "\n", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "args", ")", "\n", "", "", "print_log", "(", "\"\"", ",", "log", ")", "\n", "", "print", "(", "acc_list", ")", "\n", "set_model_", "(", "model", ",", "best_model", ")", "\n", "# Test", "\n", "print_log", "(", "'-'", "*", "40", ",", "log", ")", "\n", "test_loss", ",", "test_acc", "=", "test", "(", "args", ",", "model", ",", "device", ",", "xtest", ",", "ytest", ",", "criterion", ",", "k", ")", "\n", "print_log", "(", "'Test: loss={:.3f} , acc={:5.1f}%'", ".", "format", "(", "test_loss", ",", "test_acc", ")", ",", "log", ")", "\n", "# Memory Update  ", "\n", "mat_list", ",", "grad_list", "=", "get_representation_and_gradient", "(", "args", ",", "model", ",", "device", ",", "optimizer", ",", "criterion", ",", "k", ",", "xtrain", ",", "ytrain", ")", "\n", "space_list_all", "=", "get_space_and_grad", "(", "args", ",", "model", ",", "mat_list", ",", "grad_list", ",", "threshold", ",", "memory", ",", "task_name", ",", "task_name_list", ",", "task_id", ",", "space_list_all", ")", "\n", "\n", "", "else", ":", "\n", "            ", "memory", "[", "task_name", "]", "=", "{", "}", "\n", "kk", "=", "0", "\n", "print_log", "(", "\"reinit the scale for each task\"", ",", "log", ")", "\n", "for", "k_t", ",", "(", "m", ",", "params", ")", "in", "enumerate", "(", "model", ".", "named_parameters", "(", ")", ")", ":", "\n", "# create the saved memory", "\n", "                ", "if", "'weight'", "in", "m", "and", "'bn'", "not", "in", "m", ":", "\n", "\n", "                    ", "memory", "[", "task_name", "]", "[", "str", "(", "kk", ")", "]", "=", "{", "\n", "'space_list'", ":", "{", "}", ",", "\n", "'grad_list'", ":", "{", "}", ",", "\n", "'space_mat_list'", ":", "{", "}", ",", "\n", "'scale1'", ":", "{", "}", ",", "\n", "'scale2'", ":", "{", "}", ",", "\n", "'regime'", ":", "{", "}", ",", "\n", "'selected_task'", ":", "{", "}", ",", "\n", "}", "\n", "kk", "+=", "1", "\n", "#reinitialize the scale", "\n", "", "if", "'scale'", "in", "m", ":", "\n", "                    ", "mask", "=", "torch", ".", "eye", "(", "params", ".", "size", "(", "0", ")", ",", "params", ".", "size", "(", "1", ")", ")", ".", "to", "(", "device", ")", "\n", "params", ".", "data", "=", "mask", "\n", "# print(\"-----------------\")", "\n", "", "", "normal_param", "=", "[", "\n", "param", "for", "name", ",", "param", "in", "model", ".", "named_parameters", "(", ")", "\n", "if", "not", "'scale'", "in", "name", "\n", "]", "\n", "\n", "scale_param", "=", "[", "\n", "param", "for", "name", ",", "param", "in", "model", ".", "named_parameters", "(", ")", "\n", "if", "'scale'", "in", "name", "\n", "]", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "[", "\n", "{", "'params'", ":", "normal_param", "}", ",", "\n", "{", "'params'", ":", "scale_param", ",", "'weight_decay'", ":", "0", ",", "'lr'", ":", "lr", "}", "\n", "]", ",", "\n", "lr", "=", "lr", "\n", ")", "\n", "\n", "feature_mat", "=", "[", "]", "\n", "# Projection Matrix Precomputation", "\n", "for", "i", "in", "range", "(", "len", "(", "model", ".", "act", ")", ")", ":", "\n", "                ", "Uf", "=", "torch", ".", "Tensor", "(", "np", ".", "dot", "(", "space_list_all", "[", "i", "]", ",", "space_list_all", "[", "i", "]", ".", "transpose", "(", ")", ")", ")", ".", "to", "(", "device", ")", "\n", "print_log", "(", "'Layer {} - Projection Matrix shape: {}'", ".", "format", "(", "i", "+", "1", ",", "Uf", ".", "shape", ")", ",", "log", ")", "\n", "feature_mat", ".", "append", "(", "Uf", ")", "\n", "\n", "#==1 gradient projection condition", "\n", "", "print_log", "(", "'=== excute gradient projection condition'", ",", "log", ")", "\n", "grad_proj_cond", "(", "args", ",", "model", ",", "xtrain", ",", "ytrain", ",", "memory", ",", "task_name", ",", "task_id", ",", "task_name_list", ",", "device", ",", "optimizer", ",", "criterion", ")", "\n", "# select the regime 2, which need to learn scale", "\n", "space1", "=", "[", "None", ",", "None", ",", "None", ",", "None", ",", "None", "]", "\n", "space2", "=", "[", "None", ",", "None", ",", "None", ",", "None", ",", "None", "]", "\n", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "                ", "for", "k", ",", "task_sel", "in", "enumerate", "(", "memory", "[", "task_name", "]", "[", "str", "(", "i", ")", "]", "[", "'selected_task'", "]", ")", ":", "\n", "# logging.info('regime:{}'.format(memory[task_name]['regime'][task_sel]))", "\n", "                    ", "if", "memory", "[", "task_name", "]", "[", "str", "(", "i", ")", "]", "[", "'regime'", "]", "[", "task_sel", "]", "==", "'2'", "or", "memory", "[", "task_name", "]", "[", "str", "(", "i", ")", "]", "[", "'regime'", "]", "[", "task_sel", "]", "==", "'3'", ":", "\n", "                        ", "if", "k", "==", "0", ":", "\n", "# space1 = []", "\n", "#for i in range(5):", "\n", "# change the np array to torch tensor", "\n", "                            ", "space1", "[", "i", "]", "=", "torch", ".", "FloatTensor", "(", "memory", "[", "task_name_list", "[", "task_sel", "]", "]", "[", "str", "(", "i", ")", "]", "[", "'space_list'", "]", ")", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "# space2 = []", "\n", "# for i in range(5):", "\n", "                            ", "space2", "[", "i", "]", "=", "torch", ".", "FloatTensor", "(", "memory", "[", "task_name_list", "[", "task_sel", "]", "]", "[", "str", "(", "i", ")", "]", "[", "'space_list'", "]", ")", ".", "to", "(", "device", ")", "\n", "", "", "", "", "if", "space1", "[", "0", "]", "is", "not", "None", ":", "\n", "                ", "print_log", "(", "'space1 is not None!'", ",", "log", ")", "\n", "", "if", "space2", "[", "0", "]", "is", "not", "None", ":", "\n", "                ", "print_log", "(", "'space2 is not None!'", ",", "log", ")", "\n", "\n", "", "print_log", "(", "'-'", "*", "40", ",", "log", ")", "\n", "acc_list", "=", "[", "]", "\n", "pre_model", "=", "None", "\n", "for", "epoch", "in", "range", "(", "1", ",", "args", ".", "n_epochs", "+", "1", ")", ":", "\n", "# Train ", "\n", "\n", "                ", "clock0", "=", "time", ".", "time", "(", ")", "\n", "train_projected_regime", "(", "args", ",", "model", ",", "device", ",", "xtrain", ",", "ytrain", ",", "optimizer", ",", "criterion", ",", "memory", ",", "task_name", ",", "task_name_list", ",", "space_list_all", ",", "task_id", ",", "feature_mat", ",", "epoch", ",", "space1", "=", "space1", ",", "space2", "=", "space2", ")", "\n", "clock1", "=", "time", ".", "time", "(", ")", "\n", "tr_loss", ",", "tr_acc", "=", "test", "(", "args", ",", "model", ",", "device", ",", "xtrain", ",", "ytrain", ",", "criterion", ",", "task_id", ",", "space1", "=", "space1", ",", "space2", "=", "space2", ")", "\n", "print_log", "(", "'Epoch {:3d} | Train: loss={:.3f}, acc={:5.1f}% | time={:5.1f}ms |'", ".", "format", "(", "epoch", ",", "tr_loss", ",", "tr_acc", ",", "1000", "*", "(", "clock1", "-", "clock0", ")", ")", ",", "log", ")", "\n", "# Validate", "\n", "valid_loss", ",", "valid_acc", "=", "test", "(", "args", ",", "model", ",", "device", ",", "xvalid", ",", "yvalid", ",", "criterion", ",", "task_id", ",", "space1", "=", "space1", ",", "space2", "=", "space2", ")", "\n", "print_log", "(", "' Valid: loss={:.3f}, acc={:5.1f}% |'", ".", "format", "(", "valid_loss", ",", "valid_acc", ")", ",", "log", ")", "\n", "acc_list", ".", "append", "(", "valid_acc", ")", "\n", "\n", "# Adapt lr", "\n", "if", "valid_loss", "<", "best_loss", ":", "\n", "                    ", "best_loss", "=", "valid_loss", "\n", "best_model", "=", "get_model", "(", "model", ")", "\n", "patience", "=", "args", ".", "lr_patience", "\n", "print_log", "(", "' *'", ",", "log", ")", "\n", "", "else", ":", "\n", "                    ", "patience", "-=", "1", "\n", "if", "patience", "<=", "0", ":", "\n", "                        ", "lr", "/=", "args", ".", "lr_factor", "\n", "print_log", "(", "' lr={:.1e}'", ".", "format", "(", "lr", ")", ",", "log", ")", "\n", "if", "lr", "<", "args", ".", "lr_min", ":", "\n", "                            ", "print_log", "(", "\"\"", ",", "log", ")", "\n", "break", "\n", "", "patience", "=", "args", ".", "lr_patience", "\n", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "args", ")", "\n", "", "", "print_log", "(", "\"\"", ",", "log", ")", "\n", "", "set_model_", "(", "model", ",", "best_model", ")", "\n", "print", "(", "epochs_back", ")", "\n", "# Test ", "\n", "print", "(", "acc_list", ")", "\n", "test_acc_sum", "=", "0", "\n", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "                ", "test_loss", ",", "test_acc", "=", "test", "(", "args", ",", "model", ",", "device", ",", "xtest", ",", "ytest", ",", "criterion", ",", "task_id", ",", "space1", "=", "space1", ",", "space2", "=", "space2", ")", "\n", "print_log", "(", "'Test: loss={:.3f} , acc={:5.1f}%'", ".", "format", "(", "test_loss", ",", "test_acc", ")", ",", "log", ")", "\n", "test_acc_sum", "+=", "test_acc", "\n", "", "test_acc_sum", "=", "test_acc_sum", "/", "10.", "\n", "print_log", "(", "'Average acc={:5.1f}%'", ".", "format", "(", "test_acc_sum", ")", ",", "log", ")", "\n", "# Memory Update ", "\n", "mat_list", ",", "grad_list", "=", "get_representation_and_gradient", "(", "args", ",", "model", ",", "device", ",", "optimizer", ",", "criterion", ",", "task_id", ",", "xtrain", ",", "ytrain", ")", "\n", "space_list_all", "=", "get_space_and_grad", "(", "args", ",", "model", ",", "mat_list", ",", "grad_list", ",", "threshold", ",", "memory", ",", "task_name", ",", "task_name_list", ",", "task_id", ",", "space_list_all", ")", "\n", "# save the scale value to memory", "\n", "idx1", "=", "0", "\n", "idx2", "=", "0", "\n", "for", "m", ",", "params", "in", "model", ".", "named_parameters", "(", ")", ":", "# layer ", "\n", "                ", "if", "'scale1'", "in", "m", ":", "\n", "                    ", "memory", "[", "task_name", "]", "[", "str", "(", "idx1", ")", "]", "[", "'scale1'", "]", "=", "params", ".", "data", "\n", "idx1", "+=", "1", "\n", "", "if", "'scale2'", "in", "m", ":", "\n", "                    ", "memory", "[", "task_name", "]", "[", "str", "(", "idx2", ")", "]", "[", "'scale2'", "]", "=", "params", ".", "data", "\n", "idx2", "+=", "1", "\n", "# save accuracy ", "\n", "", "", "", "jj", "=", "0", "\n", "for", "ii", "in", "np", ".", "array", "(", "task_list", ")", "[", "0", ":", "task_id", "+", "1", "]", ":", "\n", "            ", "xtest", "=", "data", "[", "ii", "]", "[", "'test'", "]", "[", "'x'", "]", "\n", "ytest", "=", "data", "[", "ii", "]", "[", "'test'", "]", "[", "'y'", "]", "\n", "# select the regime 2, which need to learn scale", "\n", "space1", "=", "[", "None", ",", "None", ",", "None", ",", "None", ",", "None", "]", "\n", "space2", "=", "[", "None", ",", "None", ",", "None", ",", "None", ",", "None", "]", "\n", "task_test", "=", "data", "[", "ii", "]", "[", "'name'", "]", "\n", "print_log", "(", "'current testing task:{}'", ".", "format", "(", "task_test", ")", ",", "log", ")", "\n", "\n", "\n", "if", "ii", ">", "0", ":", "\n", "                ", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "                    ", "for", "k", ",", "task_sel", "in", "enumerate", "(", "memory", "[", "task_test", "]", "[", "str", "(", "i", ")", "]", "[", "'selected_task'", "]", ")", ":", "\n", "# print(memory[task_name]['regime'][task_sel])", "\n", "                        ", "if", "memory", "[", "task_test", "]", "[", "str", "(", "i", ")", "]", "[", "'regime'", "]", "[", "task_sel", "]", "==", "'2'", "or", "memory", "[", "task_name", "]", "[", "str", "(", "i", ")", "]", "[", "'regime'", "]", "[", "task_sel", "]", "==", "'3'", ":", "\n", "                            ", "if", "k", "==", "0", ":", "\n", "# space1 = []", "\n", "# change the np array to torch tensor", "\n", "                                ", "space1", "[", "i", "]", "=", "torch", ".", "FloatTensor", "(", "memory", "[", "task_name_list", "[", "task_sel", "]", "]", "[", "str", "(", "i", ")", "]", "[", "'space_list'", "]", ")", ".", "to", "(", "device", ")", "\n", "idx", "=", "0", "\n", "for", "m", ",", "params", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "                                    ", "if", "'scale1'", "in", "m", ":", "\n", "                                        ", "params", ".", "data", "=", "memory", "[", "task_test", "]", "[", "str", "(", "idx", ")", "]", "[", "'scale1'", "]", ".", "to", "(", "device", ")", "\n", "idx", "+=", "1", "\n", "", "", "", "else", ":", "\n", "#space2 = []", "\n", "                                ", "space2", "[", "i", "]", "=", "torch", ".", "FloatTensor", "(", "memory", "[", "task_name_list", "[", "task_sel", "]", "]", "[", "str", "(", "i", ")", "]", "[", "'space_list'", "]", ")", ".", "to", "(", "device", ")", "\n", "idx", "=", "0", "\n", "for", "m", ",", "params", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "                                    ", "if", "'scale2'", "in", "m", ":", "\n", "                                        ", "params", ".", "data", "=", "memory", "[", "task_test", "]", "[", "str", "(", "idx", ")", "]", "[", "'scale2'", "]", ".", "to", "(", "device", ")", "\n", "idx", "+=", "1", "\n", "\n", "\n", "", "", "", "", "", "", "", "test_acc_sum", "=", "0", "\n", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "                ", "test_loss", ",", "test_acc", "=", "test", "(", "args", ",", "model", ",", "device", ",", "xtest", ",", "ytest", ",", "criterion", ",", "ii", ",", "space1", "=", "space1", ",", "space2", "=", "space2", ")", "\n", "print_log", "(", "'Test: loss={:.3f} , acc={:5.1f}%'", ".", "format", "(", "test_loss", ",", "test_acc", ")", ",", "log", ")", "\n", "test_acc_sum", "+=", "test_acc", "\n", "", "acc_matrix", "[", "task_id", ",", "jj", "]", "=", "test_acc_sum", "/", "10.", "\n", "#_, acc_matrix[task_id,jj] = test(args, model, device, xtest, ytest,criterion,ii, space1=space1, space2=space2) ", "\n", "jj", "+=", "1", "\n", "", "print_log", "(", "'Accuracies ='", ",", "log", ")", "\n", "for", "i_a", "in", "range", "(", "task_id", "+", "1", ")", ":", "\n", "            ", "print_log", "(", "'\\t'", ",", "log", ")", "\n", "acc_lines", "=", "[", "]", "\n", "for", "j_a", "in", "range", "(", "acc_matrix", ".", "shape", "[", "1", "]", ")", ":", "\n", "                ", "acc_lines", ".", "append", "(", "acc_matrix", "[", "i_a", ",", "j_a", "]", ")", "\n", "# print_log('{:5.1f}% '.format(acc_matrix[i_a,j_a]), log, end='')", "\n", "", "print_log", "(", "acc_lines", ",", "log", ")", "\n", "# update task id ", "\n", "", "task_id", "+=", "1", "\n", "save_model", "(", "model", ",", "memory", ",", "args", ".", "savename", ")", "\n", "", "print_log", "(", "'-'", "*", "50", ",", "log", ")", "\n", "# Simulation Results ", "\n", "print_log", "(", "'Task Order : {}'", ".", "format", "(", "np", ".", "array", "(", "task_list", ")", ")", ",", "log", ")", "\n", "print_log", "(", "'Final Avg Accuracy: {:5.2f}%'", ".", "format", "(", "acc_matrix", "[", "-", "1", "]", ".", "mean", "(", ")", ")", ",", "log", ")", "\n", "bwt", "=", "np", ".", "mean", "(", "(", "acc_matrix", "[", "-", "1", "]", "-", "np", ".", "diag", "(", "acc_matrix", ")", ")", "[", ":", "-", "1", "]", ")", "\n", "print_log", "(", "'Backward transfer: {:5.2f}%'", ".", "format", "(", "bwt", ")", ",", "log", ")", "\n", "print_log", "(", "'[Elapsed time = {:.1f} ms]'", ".", "format", "(", "(", "time", ".", "time", "(", ")", "-", "tstart", ")", "*", "1000", ")", ",", "log", ")", "\n", "print_log", "(", "'-'", "*", "50", ",", "log", ")", "\n", "# Plots", "\n", "array", "=", "acc_matrix", "\n", "df_cm", "=", "pd", ".", "DataFrame", "(", "array", ",", "index", "=", "[", "i", "for", "i", "in", "[", "\"T1\"", ",", "\"T2\"", ",", "\"T3\"", ",", "\"T4\"", ",", "\"T5\"", ",", "\"T6\"", ",", "\"T7\"", ",", "\"T8\"", ",", "\"T9\"", ",", "\"T10\"", "]", "]", ",", "\n", "columns", "=", "[", "i", "for", "i", "in", "[", "\"T1\"", ",", "\"T2\"", ",", "\"T3\"", ",", "\"T4\"", ",", "\"T5\"", ",", "\"T6\"", ",", "\"T7\"", ",", "\"T8\"", ",", "\"T9\"", ",", "\"T10\"", "]", "]", ")", "\n", "sn", ".", "set", "(", "font_scale", "=", "1.4", ")", "\n", "ax", "=", "sn", ".", "heatmap", "(", "df_cm", ",", "annot", "=", "True", ",", "annot_kws", "=", "{", "\"size\"", ":", "10", "}", ")", "\n", "ax", ".", "figure", ".", "savefig", "(", "args", ".", "savename", "+", "'fig.pdf'", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100.print_log": [[1036, 1043], ["log.write", "log.flush", "print", "print"], "function", ["None"], ["", "def", "print_log", "(", "print_string", ",", "log", ",", "end", "=", "None", ")", ":", "\n", "    ", "if", "end", "is", "not", "None", ":", "\n", "        ", "print", "(", "\"{}\"", ".", "format", "(", "print_string", ")", ",", "end", "=", "''", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"{}\"", ".", "format", "(", "print_string", ")", ")", "\n", "", "log", ".", "write", "(", "'{}\\n'", ".", "format", "(", "print_string", ")", ")", "\n", "log", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_pmnist.MLPNet.__init__": [[31, 37], ["torch.Module.__init__", "collections.OrderedDict", "layers.Linear", "layers.Linear", "layers.Linear"], "methods", ["home.repos.pwc.inspect_result.LYang-666_TRGP.dataloader.miniimagenet.DatasetGen.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_hidden", "=", "100", ",", "n_outputs", "=", "10", ")", ":", "\n", "        ", "super", "(", "MLPNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "act", "=", "OrderedDict", "(", ")", "\n", "self", ".", "lin1", "=", "Linear", "(", "784", ",", "n_hidden", ",", "bias", "=", "False", ")", "\n", "self", ".", "lin2", "=", "Linear", "(", "n_hidden", ",", "n_hidden", ",", "bias", "=", "False", ")", "\n", "self", ".", "fc1", "=", "Linear", "(", "n_hidden", ",", "n_outputs", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_pmnist.MLPNet.forward": [[39, 60], ["main_pmnist.MLPNet.lin1", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "main_pmnist.MLPNet.lin2", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "main_pmnist.MLPNet.fc1", "main_pmnist.MLPNet.lin1", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "main_pmnist.MLPNet.lin2", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "main_pmnist.MLPNet.fc1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "space1", "=", "[", "None", ",", "None", ",", "None", "]", ",", "space2", "=", "[", "None", ",", "None", ",", "None", "]", ")", ":", "\n", "# regime 2:", "\n", "        ", "if", "space1", "[", "0", "]", "is", "not", "None", "or", "space2", "[", "0", "]", "is", "not", "None", ":", "\n", "            ", "self", ".", "act", "[", "'Lin1'", "]", "=", "x", "\n", "x", "=", "self", ".", "lin1", "(", "x", ",", "space1", "=", "space1", "[", "0", "]", ",", "space2", "=", "space2", "[", "0", "]", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "self", ".", "act", "[", "'Lin2'", "]", "=", "x", "\n", "x", "=", "self", ".", "lin2", "(", "x", ",", "space1", "=", "space1", "[", "1", "]", ",", "space2", "=", "space2", "[", "1", "]", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "self", ".", "act", "[", "'fc1'", "]", "=", "x", "\n", "x", "=", "self", ".", "fc1", "(", "x", ",", "space1", "=", "space1", "[", "2", "]", ",", "space2", "=", "space2", "[", "2", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "act", "[", "'Lin1'", "]", "=", "x", "\n", "x", "=", "self", ".", "lin1", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "self", ".", "act", "[", "'Lin2'", "]", "=", "x", "\n", "x", "=", "self", ".", "lin2", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "self", ".", "act", "[", "'fc1'", "]", "=", "x", "\n", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_pmnist.get_model": [[62, 64], ["copy.deepcopy", "model.state_dict"], "function", ["None"], ["", "", "def", "get_model", "(", "model", ")", ":", "\n", "    ", "return", "deepcopy", "(", "model", ".", "state_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_pmnist.set_model": [[65, 68], ["model.load_state_dict", "copy.deepcopy"], "function", ["None"], ["", "def", "set_model", "(", "model", ",", "state_dict", ")", ":", "\n", "    ", "model", ".", "load_state_dict", "(", "deepcopy", "(", "state_dict", ")", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_pmnist.save_model": [[69, 80], ["torch.save", "torch.save", "torch.save", "torch.save", "print", "model.state_dict"], "function", ["None"], ["", "def", "save_model", "(", "model", ",", "memory", ",", "savename", ")", ":", "\n", "    ", "ckpt", "=", "{", "\n", "'model'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'memory'", ":", "memory", ",", "\n", "}", "\n", "\n", "# Save to file.", "\n", "torch", ".", "save", "(", "ckpt", ",", "savename", "+", "'checkpoint.pt'", ")", "\n", "print", "(", "savename", ")", "\n", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_pmnist.train": [[81, 97], ["model.train", "numpy.arange", "numpy.random.shuffle", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "range", "x.size", "len", "x[].view", "optimizer.zero_grad", "model", "criterion", "criterion.backward", "optimizer.step", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "len", "x[].view.to", "y[].to"], "function", ["home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.train"], ["", "def", "train", "(", "args", ",", "model", ",", "device", ",", "x", ",", "y", ",", "optimizer", ",", "criterion", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "r", "=", "np", ".", "arange", "(", "x", ".", "size", "(", "0", ")", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "r", ")", "\n", "r", "=", "torch", ".", "LongTensor", "(", "r", ")", ".", "to", "(", "device", ")", "\n", "# Loop batches", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "r", ")", ",", "args", ".", "batch_size_train", ")", ":", "\n", "        ", "if", "i", "+", "args", ".", "batch_size_train", "<=", "len", "(", "r", ")", ":", "b", "=", "r", "[", "i", ":", "i", "+", "args", ".", "batch_size_train", "]", "\n", "else", ":", "b", "=", "r", "[", "i", ":", "]", "\n", "data", "=", "x", "[", "b", "]", ".", "view", "(", "-", "1", ",", "28", "*", "28", ")", "\n", "data", ",", "target", "=", "data", ".", "to", "(", "device", ")", ",", "y", "[", "b", "]", ".", "to", "(", "device", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_pmnist.train_projected": [[98, 119], ["model.train", "numpy.arange", "numpy.random.shuffle", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "range", "x.size", "len", "x[].view", "optimizer.zero_grad", "model", "criterion", "criterion.backward", "enumerate", "optimizer.step", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "len", "x[].view.to", "y[].to", "model.named_parameters", "params.grad.data.size", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "params.size", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "params.grad.data.view"], "function", ["home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.train"], ["", "", "def", "train_projected", "(", "args", ",", "model", ",", "device", ",", "x", ",", "y", ",", "optimizer", ",", "criterion", ",", "feature_mat", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "r", "=", "np", ".", "arange", "(", "x", ".", "size", "(", "0", ")", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "r", ")", "\n", "r", "=", "torch", ".", "LongTensor", "(", "r", ")", ".", "to", "(", "device", ")", "\n", "# Loop batches", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "r", ")", ",", "args", ".", "batch_size_train", ")", ":", "\n", "        ", "if", "i", "+", "args", ".", "batch_size_train", "<=", "len", "(", "r", ")", ":", "b", "=", "r", "[", "i", ":", "i", "+", "args", ".", "batch_size_train", "]", "\n", "else", ":", "b", "=", "r", "[", "i", ":", "]", "\n", "data", "=", "x", "[", "b", "]", ".", "view", "(", "-", "1", ",", "28", "*", "28", ")", "\n", "data", ",", "target", "=", "data", ".", "to", "(", "device", ")", ",", "y", "[", "b", "]", ".", "to", "(", "device", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "# Gradient Projections ", "\n", "for", "k", ",", "(", "m", ",", "params", ")", "in", "enumerate", "(", "model", ".", "named_parameters", "(", ")", ")", ":", "\n", "            ", "sz", "=", "params", ".", "grad", ".", "data", ".", "size", "(", "0", ")", "\n", "params", ".", "grad", ".", "data", "=", "params", ".", "grad", ".", "data", "-", "torch", ".", "mm", "(", "params", ".", "grad", ".", "data", ".", "view", "(", "sz", ",", "-", "1", ")", ",", "feature_mat", "[", "k", "]", ")", ".", "view", "(", "params", ".", "size", "(", ")", ")", "\n", "", "optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_pmnist.train_projected_regime": [[121, 149], ["model.train", "numpy.arange", "numpy.random.shuffle", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "range", "x.size", "len", "x[].view", "optimizer.zero_grad", "model", "criterion", "criterion.backward", "enumerate", "optimizer.step", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "len", "x[].view.to", "y[].to", "model.named_parameters", "params.grad.data.size", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "params.size", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "params.grad.data.view"], "function", ["home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.train"], ["", "", "def", "train_projected_regime", "(", "args", ",", "model", ",", "device", ",", "x", ",", "y", ",", "optimizer", ",", "criterion", ",", "memory", ",", "task_name", ",", "task_name_list", ",", "task_id", ",", "feature_mat", ",", "space1", "=", "[", "None", ",", "None", ",", "None", "]", ",", "space2", "=", "[", "None", ",", "None", ",", "None", "]", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "r", "=", "np", ".", "arange", "(", "x", ".", "size", "(", "0", ")", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "r", ")", "\n", "r", "=", "torch", ".", "LongTensor", "(", "r", ")", ".", "to", "(", "device", ")", "\n", "\n", "# Loop batches", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "r", ")", ",", "args", ".", "batch_size_train", ")", ":", "\n", "        ", "if", "i", "+", "args", ".", "batch_size_train", "<=", "len", "(", "r", ")", ":", "b", "=", "r", "[", "i", ":", "i", "+", "args", ".", "batch_size_train", "]", "\n", "else", ":", "b", "=", "r", "[", "i", ":", "]", "\n", "data", "=", "x", "[", "b", "]", ".", "view", "(", "-", "1", ",", "28", "*", "28", ")", "\n", "data", ",", "target", "=", "data", ".", "to", "(", "device", ")", ",", "y", "[", "b", "]", ".", "to", "(", "device", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "output", "=", "model", "(", "data", ",", "space1", "=", "space1", ",", "space2", "=", "space2", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "kk", "=", "0", "\n", "for", "k", ",", "(", "m", ",", "params", ")", "in", "enumerate", "(", "model", ".", "named_parameters", "(", ")", ")", ":", "\n", "            ", "if", "'weight'", "in", "m", ":", "\n", "                ", "sz", "=", "params", ".", "grad", ".", "data", ".", "size", "(", "0", ")", "\n", "params", ".", "grad", ".", "data", "=", "params", ".", "grad", ".", "data", "-", "torch", ".", "mm", "(", "params", ".", "grad", ".", "data", ".", "view", "(", "sz", ",", "-", "1", ")", ",", "feature_mat", "[", "kk", "]", ")", ".", "view", "(", "params", ".", "size", "(", ")", ")", "\n", "kk", "+=", "1", "\n", "\n", "\n", "", "", "optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_pmnist.test": [[150, 176], ["model.eval", "numpy.arange", "numpy.random.shuffle", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "x.size", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "range", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "len", "x[].view", "model", "criterion", "model.argmax", "output.argmax.eq().sum().item", "len", "len", "x[].view.to", "y[].to", "criterion.data.cpu().numpy().item", "len", "output.argmax.eq().sum", "criterion.data.cpu().numpy", "output.argmax.eq", "target.view_as", "criterion.data.cpu"], "function", ["None"], ["", "", "def", "test", "(", "args", ",", "model", ",", "device", ",", "x", ",", "y", ",", "criterion", ",", "space1", "=", "[", "None", ",", "None", ",", "None", "]", ",", "space2", "=", "[", "None", ",", "None", ",", "None", "]", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "total_loss", "=", "0", "\n", "total_num", "=", "0", "\n", "correct", "=", "0", "\n", "r", "=", "np", ".", "arange", "(", "x", ".", "size", "(", "0", ")", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "r", ")", "\n", "r", "=", "torch", ".", "LongTensor", "(", "r", ")", ".", "to", "(", "device", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# Loop batches", "\n", "        ", "for", "i", "in", "range", "(", "0", ",", "len", "(", "r", ")", ",", "args", ".", "batch_size_test", ")", ":", "\n", "            ", "if", "i", "+", "args", ".", "batch_size_test", "<=", "len", "(", "r", ")", ":", "b", "=", "r", "[", "i", ":", "i", "+", "args", ".", "batch_size_test", "]", "\n", "else", ":", "b", "=", "r", "[", "i", ":", "]", "\n", "data", "=", "x", "[", "b", "]", ".", "view", "(", "-", "1", ",", "28", "*", "28", ")", "\n", "data", ",", "target", "=", "data", ".", "to", "(", "device", ")", ",", "y", "[", "b", "]", ".", "to", "(", "device", ")", "\n", "output", "=", "model", "(", "data", ",", "space1", "=", "space1", ",", "space2", "=", "space2", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "pred", "=", "output", ".", "argmax", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "correct", "+=", "pred", ".", "eq", "(", "target", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "total_loss", "+=", "loss", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "item", "(", ")", "*", "len", "(", "b", ")", "\n", "total_num", "+=", "len", "(", "b", ")", "\n", "\n", "", "", "acc", "=", "100.", "*", "correct", "/", "total_num", "\n", "final_loss", "=", "total_loss", "/", "total_num", "\n", "return", "final_loss", ",", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_pmnist.get_representation_and_gradient": [[177, 211], ["numpy.arange", "numpy.random.shuffle", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "x[].view", "list", "net.eval", "net", "range", "print", "print", "print", "range", "print", "x.size", "x[].view.to", "y[].to", "net.act.keys", "len", "net.act[].detach().cpu().numpy", "act[].transpose", "mat_list.append", "len", "print", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "net.act[].detach().cpu", "net.act[].detach"], "function", ["None"], ["", "def", "get_representation_and_gradient", "(", "net", ",", "device", ",", "optimizer", ",", "criterion", ",", "task_id", ",", "x", ",", "y", "=", "None", ")", ":", "\n", "# Collect activations by forward pass", "\n", "# Collect gradient by backward pass", "\n", "# net.eval()", "\n", "    ", "steps", "=", "1", "\n", "r", "=", "np", ".", "arange", "(", "x", ".", "size", "(", "0", ")", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "r", ")", "\n", "r", "=", "torch", ".", "LongTensor", "(", "r", ")", ".", "to", "(", "device", ")", "\n", "b", "=", "r", "[", "0", ":", "300", "]", "# Take random training samples", "\n", "example_data", "=", "x", "[", "b", "]", ".", "view", "(", "-", "1", ",", "28", "*", "28", ")", "\n", "example_data", ",", "target", "=", "example_data", ".", "to", "(", "device", ")", ",", "y", "[", "b", "]", ".", "to", "(", "device", ")", "\n", "\n", "batch_list", "=", "[", "300", ",", "300", ",", "300", "]", "\n", "mat_list", "=", "[", "]", "# list contains representation matrix of each layer", "\n", "grad_list", "=", "[", "]", "# list contains gradient of each layer", "\n", "act_key", "=", "list", "(", "net", ".", "act", ".", "keys", "(", ")", ")", "\n", "# example_out  = net(example_data)", "\n", "\n", "net", ".", "eval", "(", ")", "\n", "example_out", "=", "net", "(", "example_data", ")", "\n", "\n", "for", "k", "in", "range", "(", "len", "(", "act_key", ")", ")", ":", "\n", "        ", "bsz", "=", "batch_list", "[", "k", "]", "\n", "act", "=", "net", ".", "act", "[", "act_key", "[", "k", "]", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "activation", "=", "act", "[", "0", ":", "bsz", "]", ".", "transpose", "(", ")", "\n", "mat_list", ".", "append", "(", "activation", ")", "\n", "\n", "", "print", "(", "'-'", "*", "30", ")", "\n", "print", "(", "'Representation Matrix'", ")", "\n", "print", "(", "'-'", "*", "30", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "mat_list", ")", ")", ":", "\n", "        ", "print", "(", "'Layer {} : {}'", ".", "format", "(", "i", "+", "1", ",", "mat_list", "[", "i", "]", ".", "shape", ")", ")", "\n", "", "print", "(", "'-'", "*", "30", ")", "\n", "return", "mat_list", ",", "grad_list", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_pmnist.get_space_and_grad": [[212, 364], ["print", "main_pmnist.print_log", "main_pmnist.print_log", "main_pmnist.print_log", "range", "main_pmnist.print_log", "range", "range", "print", "len", "numpy.linalg.svd", "numpy.sum", "space_list_all.append", "len", "main_pmnist.print_log", "main_pmnist.print_log", "numpy.dot", "range", "numpy.array", "numpy.linalg.svd", "numpy.dot", "numpy.linalg.svd", "numpy.hstack", "len", "range", "main_pmnist.print_log", "main_pmnist.print_log", "numpy.hstack", "main_pmnist.print_log", "main_pmnist.print_log", "numpy.linalg.svd", "range", "numpy.linalg.svd", "range", "range", "numpy.hstack", "main_pmnist.print_log", "numpy.cumsum", "activation.transpose", "numpy.dot", "np.array.append", "numpy.dot", "numpy.argsort", "numpy.sort", "len", "len", "numpy.hstack", "numpy.array", "numpy.dot", "main_pmnist.print_log", "feature_list.append", "str", "space_list_all[].transpose", "numpy.dot", "space_list_all[].transpose", "len", "numpy.dot", "space.transpose", "numpy.linalg.norm", "str", "space_list.transpose", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log"], ["", "def", "get_space_and_grad", "(", "model", ",", "mat_list", ",", "grad_list", ",", "threshold", ",", "memory", ",", "task_name", ",", "task_name_list", ",", "task_id", ",", "space_list_all", ")", ":", "\n", "    ", "print", "(", "'Threshold: '", ",", "threshold", ")", "\n", "Ours", "=", "True", "\n", "if", "task_name", "==", "'pmnist-0'", ":", "\n", "# After First Task ", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "mat_list", ")", ")", ":", "\n", "            ", "activation", "=", "mat_list", "[", "i", "]", "\n", "\n", "U", ",", "S", ",", "Vh", "=", "np", ".", "linalg", ".", "svd", "(", "activation", ",", "full_matrices", "=", "False", ")", "\n", "# criteria (Eq-5)", "\n", "sval_total", "=", "(", "S", "**", "2", ")", ".", "sum", "(", ")", "\n", "sval_ratio", "=", "(", "S", "**", "2", ")", "/", "sval_total", "\n", "r", "=", "np", ".", "sum", "(", "np", ".", "cumsum", "(", "sval_ratio", ")", "<", "threshold", "[", "i", "]", ")", "#+1  ", "\n", "\n", "# save into memory", "\n", "memory", "[", "task_name", "]", "[", "str", "(", "i", ")", "]", "[", "'space_list'", "]", "=", "U", "[", ":", ",", "0", ":", "r", "]", "\n", "\n", "space_list_all", ".", "append", "(", "U", "[", ":", ",", "0", ":", "r", "]", ")", "\n", "\n", "\n", "", "", "else", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "mat_list", ")", ")", ":", "\n", "            ", "activation", "=", "mat_list", "[", "i", "]", "\n", "\n", "if", "Ours", ":", "\n", "#=1. calculate the projection using previous space", "\n", "                ", "print_log", "(", "'activation shape:{}'", ".", "format", "(", "activation", ".", "shape", ")", ",", "log", ")", "\n", "print_log", "(", "'space shape:{}'", ".", "format", "(", "space_list_all", "[", "i", "]", ".", "shape", ")", ",", "log", ")", "\n", "delta", "=", "[", "]", "\n", "R2", "=", "np", ".", "dot", "(", "activation", ",", "activation", ".", "transpose", "(", ")", ")", "\n", "for", "ki", "in", "range", "(", "space_list_all", "[", "i", "]", ".", "shape", "[", "1", "]", ")", ":", "\n", "                    ", "space", "=", "space_list_all", "[", "i", "]", ".", "transpose", "(", ")", "[", "ki", "]", "\n", "# print(space.shape)", "\n", "delta_i", "=", "np", ".", "dot", "(", "np", ".", "dot", "(", "space", ".", "transpose", "(", ")", ",", "R2", ")", ",", "space", ")", "\n", "# print(delta_i)", "\n", "delta", ".", "append", "(", "delta_i", ")", "\n", "", "delta", "=", "np", ".", "array", "(", "delta", ")", "\n", "\n", "#=2  following the GPM to get the sigma (S**2)", "\n", "U1", ",", "S1", ",", "Vh1", "=", "np", ".", "linalg", ".", "svd", "(", "activation", ",", "full_matrices", "=", "False", ")", "\n", "sval_total", "=", "(", "S1", "**", "2", ")", ".", "sum", "(", ")", "\n", "\n", "act_hat", "=", "activation", "\n", "act_hat", "-=", "np", ".", "dot", "(", "np", ".", "dot", "(", "space_list_all", "[", "i", "]", ",", "space_list_all", "[", "i", "]", ".", "transpose", "(", ")", ")", ",", "activation", ")", "\n", "U", ",", "S", ",", "Vh", "=", "np", ".", "linalg", ".", "svd", "(", "act_hat", ",", "full_matrices", "=", "False", ")", "\n", "sigma", "=", "S", "**", "2", "\n", "\n", "\n", "#=3 stack delta and sigma in a same list, then sort in descending order", "\n", "stack", "=", "np", ".", "hstack", "(", "(", "delta", ",", "sigma", ")", ")", "#[0,..30, 31..99]", "\n", "stack_index", "=", "np", ".", "argsort", "(", "stack", ")", "[", ":", ":", "-", "1", "]", "#[99, 0, 4,7...]", "\n", "#print('stack index:{}'.format(stack_index))", "\n", "stack", "=", "np", ".", "sort", "(", "stack", ")", "[", ":", ":", "-", "1", "]", "\n", "\n", "#=4 select the most import basis", "\n", "r_pre", "=", "len", "(", "delta", ")", "\n", "r", "=", "0", "\n", "accumulated_sval", "=", "0", "\n", "for", "ii", "in", "range", "(", "len", "(", "stack", ")", ")", ":", "\n", "                    ", "if", "accumulated_sval", "<", "threshold", "[", "i", "]", "*", "sval_total", ":", "\n", "                        ", "accumulated_sval", "+=", "stack", "[", "ii", "]", "\n", "r", "+=", "1", "\n", "if", "r", "==", "activation", ".", "shape", "[", "0", "]", ":", "\n", "                            ", "break", "\n", "", "", "else", ":", "\n", "                        ", "break", "\n", "# if r == 0:", "\n", "#     print ('Skip Updating GPM for layer: {}'.format(i+1)) ", "\n", "#     continue        ", "\n", "", "", "print_log", "(", "'threshold for selecting:{}'", ".", "format", "(", "np", ".", "linalg", ".", "norm", "(", "activation", ")", "**", "2", ")", ",", "log", ")", "\n", "print_log", "(", "\"total ranking r = {}\"", ".", "format", "(", "r", ")", ",", "log", ")", "\n", "\n", "#=5 save the corresponding space", "\n", "Ui", "=", "np", ".", "hstack", "(", "(", "space_list_all", "[", "i", "]", ",", "U", ")", ")", "\n", "sel_index", "=", "stack_index", "[", ":", "r", "]", "\n", "#print('sel_index:{}'.format(sel_index))", "\n", "# this is the current space", "\n", "U_new", "=", "Ui", "[", ":", ",", "sel_index", "]", "\n", "# calculate how many space from current new task", "\n", "sel_index_from_U", "=", "sel_index", "[", "sel_index", ">", "r_pre", "]", "\n", "# print(sel_index)", "\n", "# print(sel_index_from_U)", "\n", "if", "len", "(", "sel_index_from_U", ")", ">", "0", ":", "\n", "# update the overall space without overlap", "\n", "                    ", "total_U", "=", "np", ".", "hstack", "(", "(", "space_list_all", "[", "i", "]", ",", "Ui", "[", ":", ",", "sel_index_from_U", "]", ")", ")", "\n", "\n", "space_list_all", "[", "i", "]", "=", "total_U", "\n", "", "else", ":", "\n", "                    ", "space_list_all", "[", "i", "]", "=", "np", ".", "array", "(", "space_list_all", "[", "i", "]", ")", "\n", "\n", "", "print_log", "(", "\"the number of space for current task:{}\"", ".", "format", "(", "r", ")", ",", "log", ")", "\n", "print_log", "(", "'the new increased space:{}, the threshold for new space:{}'", ".", "format", "(", "len", "(", "sel_index_from_U", ")", ",", "r_pre", ")", ",", "log", ")", "\n", "\n", "memory", "[", "task_name", "]", "[", "str", "(", "i", ")", "]", "[", "'space_list'", "]", "=", "Ui", "[", ":", ",", "sel_index", "]", "\n", "\n", "", "else", ":", "\n", "                ", "U1", ",", "S1", ",", "Vh1", "=", "np", ".", "linalg", ".", "svd", "(", "activation", ",", "full_matrices", "=", "False", ")", "\n", "sval_total", "=", "(", "S1", "**", "2", ")", ".", "sum", "(", ")", "\n", "# Projected Representation (Eq-8)", "\n", "# Go through all the previous tasks", "\n", "act_hat", "=", "activation", "\n", "for", "task_index", "in", "range", "(", "task_id", ")", ":", "\n", "                    ", "space_list", "=", "memory", "[", "task_name_list", "[", "task_index", "]", "]", "[", "str", "(", "i", ")", "]", "[", "'space_list'", "]", "\n", "act_hat", "-=", "np", ".", "dot", "(", "np", ".", "dot", "(", "space_list", ",", "space_list", ".", "transpose", "(", ")", ")", ",", "activation", ")", "\n", "\n", "", "U", ",", "S", ",", "Vh", "=", "np", ".", "linalg", ".", "svd", "(", "act_hat", ",", "full_matrices", "=", "False", ")", "\n", "\n", "\n", "#update GPM", "\n", "# criteria (Eq-9)", "\n", "sval_hat", "=", "(", "S", "**", "2", ")", ".", "sum", "(", ")", "\n", "sval_ratio", "=", "(", "S", "**", "2", ")", "/", "sval_total", "\n", "accumulated_sval", "=", "(", "sval_total", "-", "sval_hat", ")", "/", "sval_total", "\n", "\n", "r", "=", "0", "\n", "for", "ii", "in", "range", "(", "sval_ratio", ".", "shape", "[", "0", "]", ")", ":", "\n", "                    ", "if", "accumulated_sval", "<", "threshold", "[", "i", "]", ":", "\n", "                        ", "accumulated_sval", "+=", "sval_ratio", "[", "ii", "]", "\n", "r", "+=", "1", "\n", "", "else", ":", "\n", "                        ", "break", "\n", "", "", "if", "r", "==", "0", ":", "\n", "                    ", "print_log", "(", "'Skip Updating GPM for layer: {}'", ".", "format", "(", "i", "+", "1", ")", ",", "log", ")", "\n", "\n", "", "feature_list", "=", "[", "]", "\n", "for", "task_index", "in", "range", "(", "task_id", ")", ":", "\n", "                    ", "space_list", "=", "memory", "[", "task_name_list", "[", "task_index", "]", "]", "[", "str", "(", "i", ")", "]", "[", "'space_list'", "]", "\n", "feature_list", ".", "append", "(", "space_list", ")", "\n", "\n", "", "Ui", "=", "np", ".", "hstack", "(", "(", "space_list_all", "[", "i", "]", ",", "U", "[", ":", ",", "0", ":", "r", "]", ")", ")", "\n", "print_log", "(", "'Ui shape:{}'", ".", "format", "(", "Ui", ".", "shape", ")", ",", "log", ")", "\n", "if", "Ui", ".", "shape", "[", "1", "]", ">", "Ui", ".", "shape", "[", "0", "]", ":", "\n", "                    ", "space_list_all", "[", "i", "]", "=", "Ui", "[", ":", ",", "0", ":", "Ui", ".", "shape", "[", "0", "]", "]", "\n", "", "else", ":", "\n", "                    ", "space_list_all", "[", "i", "]", "=", "Ui", "\n", "\n", "", "if", "r", "==", "0", ":", "\n", "                    ", "memory", "[", "task_name", "]", "[", "str", "(", "i", ")", "]", "[", "'space_list'", "]", "=", "space_list", "\n", "# print(memory[task_name][str(i)]['space_list'])", "\n", "", "else", ":", "\n", "                    ", "memory", "[", "task_name", "]", "[", "str", "(", "i", ")", "]", "[", "'space_list'", "]", "=", "U", "[", ":", ",", "0", ":", "r", "]", "\n", "\n", "\n", "", "", "", "", "print_log", "(", "'-'", "*", "40", ",", "log", ")", "\n", "print_log", "(", "'Gradient Constraints Summary'", ",", "log", ")", "\n", "print_log", "(", "'-'", "*", "40", ",", "log", ")", "\n", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "        ", "print", "(", "'Layer {} : {}/{}'", ".", "format", "(", "i", "+", "1", ",", "space_list_all", "[", "i", "]", ".", "shape", "[", "1", "]", ",", "space_list_all", "[", "i", "]", ".", "shape", "[", "0", "]", ")", ")", "\n", "", "print_log", "(", "'-'", "*", "40", ",", "log", ")", "\n", "\n", "return", "space_list_all", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_pmnist.grad_proj_cond": [[367, 448], ["numpy.arange", "numpy.random.shuffle", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "x[].view", "list", "range", "range", "main_pmnist.print_log", "main_pmnist.print_log", "x.size", "x[].view.to", "y[].to", "net.act.keys", "optimizer.zero_grad", "net", "criterion", "criterion.backward", "enumerate", "range", "gradient_norm_lists_tasks.append", "range", "range", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "net.named_parameters", "len", "main_pmnist.print_log", "numpy.dot", "numpy.linalg.norm", "projection_norm_lists.append", "numpy.linalg.norm", "main_pmnist.print_log", "len", "main_pmnist.print_log", "len", "range", "range", "params.grad.data.detach().cpu().numpy", "grad_list.append", "numpy.dot", "len", "main_pmnist.print_log", "len", "range", "numpy.array", "main_pmnist.print_log", "space_list.transpose", "len", "np.array.append", "numpy.argpartition", "params.grad.data.detach().cpu", "str", "str", "str", "str", "params.grad.data.detach", "str", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log"], ["", "def", "grad_proj_cond", "(", "args", ",", "net", ",", "x", ",", "y", ",", "memory", ",", "task_name", ",", "task_id", ",", "task_name_list", ",", "device", ",", "optimizer", ",", "criterion", ")", ":", "\n", "\n", "# calcuate the gradient for current task before training", "\n", "    ", "steps", "=", "1", "\n", "r", "=", "np", ".", "arange", "(", "x", ".", "size", "(", "0", ")", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "r", ")", "\n", "r", "=", "torch", ".", "LongTensor", "(", "r", ")", ".", "to", "(", "device", ")", "\n", "b", "=", "r", "[", "0", ":", "300", "]", "# Take random training samples", "\n", "example_data", "=", "x", "[", "b", "]", ".", "view", "(", "-", "1", ",", "28", "*", "28", ")", "\n", "example_data", ",", "target", "=", "example_data", ".", "to", "(", "device", ")", ",", "y", "[", "b", "]", ".", "to", "(", "device", ")", "\n", "\n", "batch_list", "=", "[", "300", ",", "300", ",", "300", "]", "\n", "grad_list", "=", "[", "]", "# list contains gradient of each layer", "\n", "act_key", "=", "list", "(", "net", ".", "act", ".", "keys", "(", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "steps", ")", ":", "\n", "        ", "optimizer", ".", "zero_grad", "(", ")", "\n", "example_out", "=", "net", "(", "example_data", ")", "\n", "\n", "loss", "=", "criterion", "(", "example_out", ",", "target", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "for", "k", ",", "(", "m", ",", "params", ")", "in", "enumerate", "(", "net", ".", "named_parameters", "(", ")", ")", ":", "\n", "            ", "if", "'weight'", "in", "m", ":", "\n", "                ", "grad", "=", "params", ".", "grad", ".", "data", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "grad_list", ".", "append", "(", "grad", ")", "\n", "\n", "\n", "# project on each task subspace", "\n", "", "", "", "gradient_norm_lists_tasks", "=", "[", "]", "\n", "# ratio_tasks = []", "\n", "for", "task_index", "in", "range", "(", "task_id", ")", ":", "\n", "        ", "projection_norm_lists", "=", "[", "]", "\n", "\n", "# ratio_layers = []", "\n", "for", "i", "in", "range", "(", "len", "(", "grad_list", ")", ")", ":", "#layer", "\n", "            ", "space_list", "=", "memory", "[", "task_name_list", "[", "task_index", "]", "]", "[", "str", "(", "i", ")", "]", "[", "'space_list'", "]", "\n", "print_log", "(", "\"Task:{}, layer:{}, space shape:{}\"", ".", "format", "(", "task_index", ",", "i", ",", "space_list", ".", "shape", ")", ",", "log", ")", "\n", "# grad_list is the grad for current task", "\n", "projection", "=", "np", ".", "dot", "(", "grad_list", "[", "i", "]", ",", "np", ".", "dot", "(", "space_list", ",", "space_list", ".", "transpose", "(", ")", ")", ")", "\n", "\n", "projection_norm", "=", "np", ".", "linalg", ".", "norm", "(", "projection", ")", "\n", "\n", "projection_norm_lists", ".", "append", "(", "projection_norm", ")", "\n", "gradient_norm", "=", "np", ".", "linalg", ".", "norm", "(", "grad_list", "[", "i", "]", ")", "\n", "print_log", "(", "'Task:{}, Layer:{}, project_norm:{}, threshold for regime 1:{}'", ".", "format", "(", "task_index", ",", "i", ",", "projection_norm", ",", "eplison_1", "*", "gradient_norm", ")", ",", "log", ")", "\n", "\n", "\n", "if", "projection_norm", "<=", "eplison_1", "*", "gradient_norm", ":", "\n", "                ", "memory", "[", "task_name", "]", "[", "str", "(", "i", ")", "]", "[", "'regime'", "]", "[", "task_index", "]", "=", "'1'", "\n", "", "else", ":", "\n", "\n", "                ", "memory", "[", "task_name", "]", "[", "str", "(", "i", ")", "]", "[", "'regime'", "]", "[", "task_index", "]", "=", "'2'", "\n", "# ratio_tasks.append(ratio_layers)", "\n", "\n", "", "", "gradient_norm_lists_tasks", ".", "append", "(", "projection_norm_lists", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "grad_list", ")", ")", ":", "\n", "            ", "print_log", "(", "'Layer:{}, Regime:{}'", ".", "format", "(", "i", ",", "memory", "[", "task_name", "]", "[", "str", "(", "i", ")", "]", "[", "'regime'", "]", "[", "task_index", "]", ")", ",", "log", ")", "\n", "# select top-k related tasks according to the projection norm, k = 2 in general (k= 1 for task 2)", "\n", "", "", "print_log", "(", "'-'", "*", "20", ",", "log", ")", "\n", "print_log", "(", "'selected top-2 tasks:'", ",", "log", ")", "\n", "if", "task_id", "==", "1", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "grad_list", ")", ")", ":", "\n", "            ", "memory", "[", "task_name", "]", "[", "str", "(", "i", ")", "]", "[", "'selected_task'", "]", "=", "[", "0", "]", "\n", "", "", "else", ":", "\n", "        ", "if", "task_id", "==", "2", ":", "\n", "            ", "for", "layer", "in", "range", "(", "len", "(", "grad_list", ")", ")", ":", "\n", "                ", "memory", "[", "task_name", "]", "[", "str", "(", "layer", ")", "]", "[", "'selected_task'", "]", "=", "[", "1", "]", "\n", "print_log", "(", "'Layer:{}, selected task ID:{}'", ".", "format", "(", "layer", ",", "memory", "[", "task_name", "]", "[", "str", "(", "layer", ")", "]", "[", "'selected_task'", "]", ")", ",", "log", ")", "\n", "", "", "else", ":", "\n", "            ", "k", "=", "2", "\n", "\n", "for", "layer", "in", "range", "(", "len", "(", "grad_list", ")", ")", ":", "\n", "                ", "task_norm", "=", "[", "]", "\n", "for", "t", "in", "range", "(", "len", "(", "gradient_norm_lists_tasks", ")", ")", ":", "\n", "                    ", "norm", "=", "gradient_norm_lists_tasks", "[", "t", "]", "[", "layer", "]", "\n", "task_norm", ".", "append", "(", "norm", ")", "\n", "", "task_norm", "=", "np", ".", "array", "(", "task_norm", ")", "\n", "idx", "=", "np", ".", "argpartition", "(", "task_norm", ",", "-", "k", ")", "[", "-", "k", ":", "]", "\n", "memory", "[", "task_name", "]", "[", "str", "(", "layer", ")", "]", "[", "'selected_task'", "]", "=", "idx", "\n", "print_log", "(", "'Layer:{}, selected task ID:{}'", ".", "format", "(", "layer", ",", "memory", "[", "task_name", "]", "[", "str", "(", "layer", ")", "]", "[", "'selected_task'", "]", ")", ",", "log", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_pmnist.main": [[452, 724], ["time.time", "torch.device", "torch.device", "torch.device", "torch.device", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "numpy.random.seed", "pmd.get", "numpy.zeros", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "main_pmnist.print_log", "main_pmnist.print_log", "main_pmnist.print_log", "numpy.mean", "main_pmnist.print_log", "main_pmnist.print_log", "main_pmnist.print_log", "pandas.DataFrame", "seaborn.set", "seaborn.heatmap", "matplotlib.show", "numpy.array", "task_name_list.append", "main_pmnist.print_log", "main_pmnist.print_log", "main_pmnist.print_log", "task_list.append", "main_pmnist.print_log", "main_pmnist.print_log", "main_pmnist.print_log", "main_pmnist.print_log", "range", "main_pmnist.save_model", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "MLPNet().to", "main_pmnist.print_log", "enumerate", "main_pmnist.print_log", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "range", "print", "acc_list_all.append", "main_pmnist.print_log", "main_pmnist.test", "main_pmnist.print_log", "main_pmnist.get_representation_and_gradient", "main_pmnist.get_space_and_grad", "enumerate", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "range", "main_pmnist.print_log", "main_pmnist.grad_proj_cond", "main_pmnist.print_log", "range", "main_pmnist.print_log", "range", "print", "acc_list_all.append", "print", "main_pmnist.test", "main_pmnist.print_log", "main_pmnist.get_representation_and_gradient", "main_pmnist.get_space_and_grad", "MLPNet().to.named_parameters", "numpy.array", "main_pmnist.print_log", "main_pmnist.test", "main_pmnist.print_log", "range", "numpy.array", "acc_matrix[].mean", "MLPNet().to.named_parameters", "time.time", "main_pmnist.train", "time.time", "main_pmnist.test", "main_pmnist.print_log", "main_pmnist.test", "acc_list.append", "main_pmnist.print_log", "print", "MLPNet().to.named_parameters", "len", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "main_pmnist.print_log", "feature_mat.append", "enumerate", "main_pmnist.print_log", "main_pmnist.print_log", "time.time", "main_pmnist.train_projected_regime", "time.time", "main_pmnist.test", "main_pmnist.print_log", "main_pmnist.test", "acc_list.append", "main_pmnist.print_log", "print", "range", "main_pmnist.print_log", "numpy.diag", "main_pmnist.MLPNet", "print", "MLPNet().to.named_parameters", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "MLPNet().to.named_parameters", "MLPNet().to.named_parameters", "enumerate", "time.time", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "str", "str", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "numpy.dot", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "params.size", "params.size", "space_list_all[].transpose", "str", "str", "str", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "MLPNet().to.named_parameters", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "MLPNet().to.named_parameters", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "str", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "[].to", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "[].to", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.LYang-666_TRGP.dataloader.miniimagenet.DatasetGen.get", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.save_model", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.test", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.get_representation_and_gradient", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.get_space_and_grad", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.grad_proj_cond", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.test", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.get_representation_and_gradient", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.get_space_and_grad", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.test", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.train", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.test", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.test", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.train_projected_regime", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.test", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.test", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log"], ["", "", "", "", "def", "main", "(", "args", ")", ":", "\n", "    ", "tstart", "=", "time", ".", "time", "(", ")", "\n", "## Device Setting ", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "## Load PMNIST DATASET", "\n", "from", "dataloader", "import", "pmnist", "as", "pmd", "\n", "data", ",", "taskcla", ",", "inputsize", "=", "pmd", ".", "get", "(", "seed", "=", "args", ".", "seed", ",", "pc_valid", "=", "args", ".", "pc_valid", ")", "\n", "\n", "acc_matrix", "=", "np", ".", "zeros", "(", "(", "10", ",", "10", ")", ")", "\n", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n", "task_id", "=", "0", "\n", "task_list", "=", "[", "]", "\n", "task_name_list", "=", "[", "]", "\n", "memory", "=", "{", "}", "\n", "\n", "acc_list_all", "=", "[", "]", "\n", "\n", "# ratios = []", "\n", "epochs_back", "=", "[", "]", "\n", "for", "k", ",", "ncla", "in", "taskcla", ":", "\n", "\n", "# specify threshold hyperparameter", "\n", "        ", "threshold", "=", "np", ".", "array", "(", "[", "0.95", ",", "0.99", ",", "0.99", "]", ")", "\n", "task_name", "=", "data", "[", "k", "]", "[", "'name'", "]", "\n", "task_name_list", ".", "append", "(", "task_name", ")", "\n", "print_log", "(", "'*'", "*", "100", ",", "log", ")", "\n", "print_log", "(", "'Task {:2d} ({:s})'", ".", "format", "(", "k", ",", "data", "[", "k", "]", "[", "'name'", "]", ")", ",", "log", ")", "\n", "print_log", "(", "'*'", "*", "100", ",", "log", ")", "\n", "xtrain", "=", "data", "[", "k", "]", "[", "'train'", "]", "[", "'x'", "]", "\n", "ytrain", "=", "data", "[", "k", "]", "[", "'train'", "]", "[", "'y'", "]", "\n", "xvalid", "=", "data", "[", "k", "]", "[", "'valid'", "]", "[", "'x'", "]", "\n", "yvalid", "=", "data", "[", "k", "]", "[", "'valid'", "]", "[", "'y'", "]", "\n", "xtest", "=", "data", "[", "k", "]", "[", "'test'", "]", "[", "'x'", "]", "\n", "ytest", "=", "data", "[", "k", "]", "[", "'test'", "]", "[", "'y'", "]", "\n", "task_list", ".", "append", "(", "k", ")", "\n", "\n", "lr", "=", "args", ".", "lr", "\n", "print_log", "(", "'-'", "*", "40", ",", "log", ")", "\n", "print_log", "(", "'Task ID :{} | Learning Rate : {}'", ".", "format", "(", "task_id", ",", "lr", ")", ",", "log", ")", "\n", "print_log", "(", "'-'", "*", "40", ",", "log", ")", "\n", "\n", "if", "task_id", "==", "0", ":", "\n", "            ", "model", "=", "MLPNet", "(", "args", ".", "n_hidden", ",", "args", ".", "n_outputs", ")", ".", "to", "(", "device", ")", "\n", "memory", "[", "task_name", "]", "=", "{", "}", "\n", "#memory[task_name]['regime'] = 10 * [0]", "\n", "print_log", "(", "'Model parameters ---'", ",", "log", ")", "\n", "k", "=", "0", "\n", "for", "k_t", ",", "(", "m", ",", "param", ")", "in", "enumerate", "(", "model", ".", "named_parameters", "(", ")", ")", ":", "\n", "                ", "if", "'weight'", "in", "m", ":", "\n", "                    ", "print", "(", "k", ",", "m", ",", "param", ".", "shape", ")", "\n", "# create the saved memory", "\n", "memory", "[", "task_name", "]", "[", "str", "(", "k", ")", "]", "=", "{", "\n", "'space_list'", ":", "{", "}", ",", "\n", "'grad_list'", ":", "{", "}", ",", "\n", "'regime'", ":", "{", "}", ",", "\n", "}", "\n", "k", "+=", "1", "\n", "", "", "print_log", "(", "'-'", "*", "40", ",", "log", ")", "\n", "\n", "space_list_all", "=", "[", "]", "\n", "# coord_list = []", "\n", "normal_param", "=", "[", "\n", "param", "for", "name", ",", "param", "in", "model", ".", "named_parameters", "(", ")", "\n", "if", "not", "'scale'", "in", "name", "\n", "]", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "[", "\n", "{", "'params'", ":", "normal_param", "}", "\n", "]", ",", "\n", "lr", "=", "lr", "\n", ")", "\n", "acc_list", "=", "[", "]", "\n", "for", "epoch", "in", "range", "(", "1", ",", "args", ".", "n_epochs", "+", "1", ")", ":", "\n", "# Train", "\n", "                ", "clock0", "=", "time", ".", "time", "(", ")", "\n", "train", "(", "args", ",", "model", ",", "device", ",", "xtrain", ",", "ytrain", ",", "optimizer", ",", "criterion", ")", "\n", "clock1", "=", "time", ".", "time", "(", ")", "\n", "tr_loss", ",", "tr_acc", "=", "test", "(", "args", ",", "model", ",", "device", ",", "xtrain", ",", "ytrain", ",", "criterion", ")", "\n", "print_log", "(", "'Epoch {:3d} | Train: loss={:.3f}, acc={:5.1f}% | time={:5.1f}ms |'", ".", "format", "(", "epoch", ",", "tr_loss", ",", "tr_acc", ",", "1000", "*", "(", "clock1", "-", "clock0", ")", ")", ",", "log", ")", "\n", "# Validate", "\n", "valid_loss", ",", "valid_acc", "=", "test", "(", "args", ",", "model", ",", "device", ",", "xvalid", ",", "yvalid", ",", "criterion", ")", "\n", "acc_list", ".", "append", "(", "valid_acc", ")", "\n", "print_log", "(", "' Valid: loss={:.3f}, acc={:5.1f}% |'", ".", "format", "(", "valid_loss", ",", "valid_acc", ")", ",", "log", ")", "\n", "print", "(", ")", "\n", "", "print", "(", "acc_list", ")", "\n", "acc_list_all", ".", "append", "(", "acc_list", ")", "\n", "# Test", "\n", "print_log", "(", "'-'", "*", "40", ",", "log", ")", "\n", "test_loss", ",", "test_acc", "=", "test", "(", "args", ",", "model", ",", "device", ",", "xtest", ",", "ytest", ",", "criterion", ")", "\n", "print_log", "(", "'Test: loss={:.3f} , acc={:5.1f}%'", ".", "format", "(", "test_loss", ",", "test_acc", ")", ",", "log", ")", "\n", "# Memory Update  ", "\n", "mat_list", ",", "grad_list", "=", "get_representation_and_gradient", "(", "model", ",", "device", ",", "optimizer", ",", "criterion", ",", "task_id", ",", "xtrain", ",", "ytrain", ")", "\n", "space_list_all", "=", "get_space_and_grad", "(", "model", ",", "mat_list", ",", "grad_list", ",", "threshold", ",", "memory", ",", "task_name", ",", "task_name_list", ",", "task_id", ",", "space_list_all", ")", "\n", "\n", "", "else", ":", "\n", "            ", "memory", "[", "task_name", "]", "=", "{", "}", "\n", "\n", "k", "=", "0", "\n", "for", "k_t", ",", "(", "m", ",", "params", ")", "in", "enumerate", "(", "model", ".", "named_parameters", "(", ")", ")", ":", "\n", "# create the saved memory", "\n", "                ", "if", "'weight'", "in", "m", ":", "\n", "\n", "                    ", "memory", "[", "task_name", "]", "[", "str", "(", "k", ")", "]", "=", "{", "\n", "'space_list'", ":", "{", "}", ",", "\n", "'grad_list'", ":", "{", "}", ",", "\n", "'space_mat_list'", ":", "{", "}", ",", "\n", "'scale1'", ":", "{", "}", ",", "\n", "'scale2'", ":", "{", "}", ",", "\n", "'regime'", ":", "{", "}", ",", "\n", "'selected_task'", ":", "{", "}", ",", "\n", "# 'ratio':{},", "\n", "}", "\n", "k", "+=", "1", "\n", "#reinitialize the scale", "\n", "", "if", "'scale'", "in", "m", ":", "\n", "                    ", "mask", "=", "torch", ".", "eye", "(", "params", ".", "size", "(", "0", ")", ",", "params", ".", "size", "(", "1", ")", ")", ".", "to", "(", "device", ")", "\n", "params", ".", "data", "=", "mask", "\n", "", "", "normal_param", "=", "[", "\n", "param", "for", "name", ",", "param", "in", "model", ".", "named_parameters", "(", ")", "\n", "if", "not", "'scale'", "in", "name", "\n", "]", "\n", "\n", "scale_param", "=", "[", "\n", "param", "for", "name", ",", "param", "in", "model", ".", "named_parameters", "(", ")", "\n", "if", "'scale'", "in", "name", "\n", "]", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "[", "\n", "{", "'params'", ":", "normal_param", "}", ",", "\n", "{", "'params'", ":", "scale_param", ",", "'weight_decay'", ":", "0", ",", "'lr'", ":", "lr", "}", "\n", "]", ",", "\n", "lr", "=", "lr", "\n", ")", "\n", "feature_mat", "=", "[", "]", "\n", "# Projection Matrix Precomputation", "\n", "for", "i", "in", "range", "(", "len", "(", "space_list_all", ")", ")", ":", "\n", "                 ", "Uf", "=", "torch", ".", "Tensor", "(", "np", ".", "dot", "(", "space_list_all", "[", "i", "]", ",", "space_list_all", "[", "i", "]", ".", "transpose", "(", ")", ")", ")", ".", "to", "(", "device", ")", "\n", "print_log", "(", "'Layer {} - Projection Matrix shape: {}'", ".", "format", "(", "i", "+", "1", ",", "Uf", ".", "shape", ")", ",", "log", ")", "\n", "feature_mat", ".", "append", "(", "Uf", ")", "\n", "\n", "\n", "#==1 gradient projection condition", "\n", "", "print_log", "(", "'excute gradient projection condition'", ",", "log", ")", "\n", "grad_proj_cond", "(", "args", ",", "model", ",", "xtrain", ",", "ytrain", ",", "memory", ",", "task_name", ",", "task_id", ",", "task_name_list", ",", "device", ",", "optimizer", ",", "criterion", ")", "\n", "\n", "# optimizer = optim.SGD(model.parameters(), lr=args.lr)", "\n", "print_log", "(", "'-'", "*", "40", ",", "log", ")", "\n", "\n", "# select the regime 2, which need to learn scale", "\n", "space1", "=", "[", "None", ",", "None", ",", "None", "]", "\n", "space2", "=", "[", "None", ",", "None", ",", "None", "]", "\n", "\n", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "#layer", "\n", "                ", "for", "k", ",", "task_sel", "in", "enumerate", "(", "memory", "[", "task_name", "]", "[", "str", "(", "i", ")", "]", "[", "'selected_task'", "]", ")", ":", "#task loop", "\n", "                    ", "if", "memory", "[", "task_name", "]", "[", "str", "(", "i", ")", "]", "[", "'regime'", "]", "[", "task_sel", "]", "==", "'2'", "or", "memory", "[", "task_name", "]", "[", "str", "(", "i", ")", "]", "[", "'regime'", "]", "[", "task_sel", "]", "==", "'3'", ":", "\n", "                        ", "if", "k", "==", "0", ":", "\n", "# change the np array to torch tensor", "\n", "                            ", "space1", "[", "i", "]", "=", "torch", ".", "tensor", "(", "memory", "[", "task_name_list", "[", "task_sel", "]", "]", "[", "str", "(", "i", ")", "]", "[", "'space_list'", "]", ")", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "                            ", "space2", "[", "i", "]", "=", "torch", ".", "tensor", "(", "memory", "[", "task_name_list", "[", "task_sel", "]", "]", "[", "str", "(", "i", ")", "]", "[", "'space_list'", "]", ")", ".", "to", "(", "device", ")", "\n", "\n", "", "", "", "", "if", "space1", "[", "0", "]", "is", "not", "None", ":", "\n", "                ", "print_log", "(", "'space1 is not None!'", ",", "log", ")", "\n", "", "if", "space2", "[", "1", "]", "is", "not", "None", ":", "\n", "                ", "print_log", "(", "'space2 is not None!'", ",", "log", ")", "\n", "\n", "", "print_log", "(", "'-'", "*", "40", ",", "log", ")", "\n", "acc_list", "=", "[", "]", "\n", "\n", "for", "epoch", "in", "range", "(", "1", ",", "args", ".", "n_epochs", "+", "1", ")", ":", "\n", "\n", "                ", "clock0", "=", "time", ".", "time", "(", ")", "\n", "train_projected_regime", "(", "args", ",", "model", ",", "device", ",", "xtrain", ",", "ytrain", ",", "optimizer", ",", "criterion", ",", "memory", ",", "task_name", ",", "task_name_list", ",", "task_id", ",", "feature_mat", ",", "space1", "=", "space1", ",", "space2", "=", "space2", ")", "\n", "clock1", "=", "time", ".", "time", "(", ")", "\n", "tr_loss", ",", "tr_acc", "=", "test", "(", "args", ",", "model", ",", "device", ",", "xtrain", ",", "ytrain", ",", "criterion", ",", "space1", "=", "space1", ",", "space2", "=", "space2", ")", "\n", "print_log", "(", "'Epoch {:3d} | Train: loss={:.3f}, acc={:5.1f}% | time={:5.1f}ms |'", ".", "format", "(", "epoch", ",", "tr_loss", ",", "tr_acc", ",", "1000", "*", "(", "clock1", "-", "clock0", ")", ")", ",", "log", ")", "\n", "# Validate", "\n", "valid_loss", ",", "valid_acc", "=", "test", "(", "args", ",", "model", ",", "device", ",", "xvalid", ",", "yvalid", ",", "criterion", ",", "space1", "=", "space1", ",", "space2", "=", "space2", ")", "\n", "acc_list", ".", "append", "(", "valid_acc", ")", "\n", "\n", "print_log", "(", "' Valid: loss={:.3f}, acc={:5.1f}% |'", ".", "format", "(", "valid_loss", ",", "valid_acc", ")", ",", "log", ")", "\n", "print", "(", ")", "\n", "\n", "", "print", "(", "acc_list", ")", "\n", "acc_list_all", ".", "append", "(", "acc_list", ")", "\n", "print", "(", "epochs_back", ")", "\n", "\n", "# Test ", "\n", "test_loss", ",", "test_acc", "=", "test", "(", "args", ",", "model", ",", "device", ",", "xtest", ",", "ytest", ",", "criterion", ",", "space1", "=", "space1", ",", "space2", "=", "space2", ")", "\n", "print_log", "(", "'Test: loss={:.3f} , acc={:5.1f}%'", ".", "format", "(", "test_loss", ",", "test_acc", ")", ",", "log", ")", "\n", "\n", "# Memory Update  ", "\n", "mat_list", ",", "grad_list", "=", "get_representation_and_gradient", "(", "model", ",", "device", ",", "optimizer", ",", "criterion", ",", "task_id", ",", "xtrain", ",", "ytrain", ")", "\n", "space_list_all", "=", "get_space_and_grad", "(", "model", ",", "mat_list", ",", "grad_list", ",", "threshold", ",", "memory", ",", "task_name", ",", "task_name_list", ",", "task_id", ",", "space_list_all", ")", "\n", "# save the scale value to memory", "\n", "idx1", "=", "0", "\n", "idx2", "=", "0", "\n", "for", "m", ",", "params", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "                ", "if", "'scale1'", "in", "m", ":", "\n", "                    ", "memory", "[", "task_name", "]", "[", "str", "(", "idx1", ")", "]", "[", "'scale1'", "]", "=", "params", ".", "data", "\n", "idx1", "+=", "1", "\n", "", "if", "'scale2'", "in", "m", ":", "\n", "                    ", "memory", "[", "task_name", "]", "[", "str", "(", "idx2", ")", "]", "[", "'scale2'", "]", "=", "params", ".", "data", "\n", "idx2", "+=", "1", "\n", "# save accuracy ", "\n", "", "", "", "jj", "=", "0", "\n", "for", "ii", "in", "np", ".", "array", "(", "task_list", ")", "[", "0", ":", "task_id", "+", "1", "]", ":", "\n", "            ", "xtest", "=", "data", "[", "ii", "]", "[", "'test'", "]", "[", "'x'", "]", "\n", "ytest", "=", "data", "[", "ii", "]", "[", "'test'", "]", "[", "'y'", "]", "\n", "# select the regime 2, which need to learn scale", "\n", "space1", "=", "[", "None", ",", "None", ",", "None", "]", "\n", "space2", "=", "[", "None", ",", "None", ",", "None", "]", "\n", "task_test", "=", "data", "[", "ii", "]", "[", "'name'", "]", "\n", "print_log", "(", "'current testing task:{}'", ".", "format", "(", "task_test", ")", ",", "log", ")", "\n", "if", "ii", ">", "0", ":", "\n", "\n", "                ", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "                    ", "for", "k", ",", "task_sel", "in", "enumerate", "(", "memory", "[", "task_test", "]", "[", "str", "(", "i", ")", "]", "[", "'selected_task'", "]", ")", ":", "\n", "                        ", "if", "memory", "[", "task_test", "]", "[", "str", "(", "i", ")", "]", "[", "'regime'", "]", "[", "task_sel", "]", "==", "'2'", "or", "memory", "[", "task_name", "]", "[", "str", "(", "i", ")", "]", "[", "'regime'", "]", "[", "task_sel", "]", "==", "'3'", ":", "\n", "                            ", "if", "k", "==", "0", ":", "\n", "# change the np array to torch tensor", "\n", "                                ", "space1", "[", "i", "]", "=", "torch", ".", "tensor", "(", "memory", "[", "task_name_list", "[", "task_sel", "]", "]", "[", "str", "(", "i", ")", "]", "[", "'space_list'", "]", ")", ".", "to", "(", "device", ")", "\n", "idx", "=", "0", "\n", "for", "m", ",", "params", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "                                    ", "if", "'scale1'", "in", "m", ":", "\n", "                                        ", "params", ".", "data", "=", "memory", "[", "task_test", "]", "[", "str", "(", "idx", ")", "]", "[", "'scale1'", "]", ".", "to", "(", "device", ")", "\n", "idx", "+=", "1", "\n", "", "", "", "else", ":", "\n", "                                ", "space2", "[", "i", "]", "=", "torch", ".", "tensor", "(", "memory", "[", "task_name_list", "[", "task_sel", "]", "]", "[", "str", "(", "i", ")", "]", "[", "'space_list'", "]", ")", ".", "to", "(", "device", ")", "\n", "idx", "=", "0", "\n", "for", "m", ",", "params", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "                                    ", "if", "'scale2'", "in", "m", ":", "\n", "                                        ", "params", ".", "data", "=", "memory", "[", "task_test", "]", "[", "str", "(", "idx", ")", "]", "[", "'scale2'", "]", ".", "to", "(", "device", ")", "\n", "idx", "+=", "1", "\n", "\n", "", "", "", "", "", "", "", "_", ",", "acc_matrix", "[", "task_id", ",", "jj", "]", "=", "test", "(", "args", ",", "model", ",", "device", ",", "xtest", ",", "ytest", ",", "criterion", ",", "space1", "=", "space1", ",", "space2", "=", "space2", ")", "\n", "jj", "+=", "1", "\n", "", "print_log", "(", "'Accuracies ='", ",", "log", ")", "\n", "for", "i_a", "in", "range", "(", "task_id", "+", "1", ")", ":", "\n", "            ", "print_log", "(", "'\\t'", ",", "log", ")", "\n", "for", "j_a", "in", "range", "(", "acc_matrix", ".", "shape", "[", "1", "]", ")", ":", "\n", "                ", "print_log", "(", "'{:5.1f}% '", ".", "format", "(", "acc_matrix", "[", "i_a", ",", "j_a", "]", ")", ",", "log", ",", "end", "=", "''", ")", "\n", "# for i_a in range(task_id+1):", "\n", "#     print('\\t',end='')", "\n", "#     for j_a in range(acc_matrix.shape[1]):", "\n", "#         print('{:5.1f}% '.format(acc_matrix[i_a,j_a]),end='')", "\n", "#     print()", "\n", "# update task id ", "\n", "", "", "task_id", "+=", "1", "\n", "save_model", "(", "model", ",", "memory", ",", "args", ".", "savename", ")", "\n", "\n", "", "print_log", "(", "'-'", "*", "50", ",", "log", ")", "\n", "# Simulation Results ", "\n", "print_log", "(", "'Task Order : {}'", ".", "format", "(", "np", ".", "array", "(", "task_list", ")", ")", ",", "log", ")", "\n", "print_log", "(", "'Final Avg Accuracy: {:5.2f}%'", ".", "format", "(", "acc_matrix", "[", "-", "1", "]", ".", "mean", "(", ")", ")", ",", "log", ")", "\n", "bwt", "=", "np", ".", "mean", "(", "(", "acc_matrix", "[", "-", "1", "]", "-", "np", ".", "diag", "(", "acc_matrix", ")", ")", "[", ":", "-", "1", "]", ")", "\n", "print_log", "(", "'Backward transfer: {:5.2f}%'", ".", "format", "(", "bwt", ")", ",", "log", ")", "\n", "print_log", "(", "'[Elapsed time = {:.1f} ms]'", ".", "format", "(", "(", "time", ".", "time", "(", ")", "-", "tstart", ")", "*", "1000", ")", ",", "log", ")", "\n", "print_log", "(", "'-'", "*", "50", ",", "log", ")", "\n", "# Plots", "\n", "array", "=", "acc_matrix", "\n", "df_cm", "=", "pd", ".", "DataFrame", "(", "array", ",", "index", "=", "[", "i", "for", "i", "in", "[", "\"T1\"", ",", "\"T2\"", ",", "\"T3\"", ",", "\"T4\"", ",", "\"T5\"", ",", "\"T6\"", ",", "\"T7\"", ",", "\"T8\"", ",", "\"T9\"", ",", "\"T10\"", "]", "]", ",", "\n", "columns", "=", "[", "i", "for", "i", "in", "[", "\"T1\"", ",", "\"T2\"", ",", "\"T3\"", ",", "\"T4\"", ",", "\"T5\"", ",", "\"T6\"", ",", "\"T7\"", ",", "\"T8\"", ",", "\"T9\"", ",", "\"T10\"", "]", "]", ")", "\n", "sn", ".", "set", "(", "font_scale", "=", "1.4", ")", "# for label size", "\n", "sn", ".", "heatmap", "(", "df_cm", ",", "annot", "=", "True", ",", "annot_kws", "=", "{", "\"size\"", ":", "10", "}", ")", "\n", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_pmnist.print_log": [[726, 733], ["log.write", "log.flush", "print", "print"], "function", ["None"], ["", "def", "print_log", "(", "print_string", ",", "log", ",", "end", "=", "None", ")", ":", "\n", "    ", "if", "end", "is", "not", "None", ":", "\n", "        ", "print", "(", "\"{}\"", ".", "format", "(", "print_string", ")", ",", "end", "=", "''", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"{}\"", ".", "format", "(", "print_string", ")", ")", "\n", "", "log", ".", "write", "(", "'{}\\n'", ".", "format", "(", "print_string", ")", ")", "\n", "log", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_mini_dataset.BasicBlock.__init__": [[43, 59], ["torch.Module.__init__", "main_mini_dataset.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "main_mini_dataset.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "collections.OrderedDict", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.LYang-666_TRGP.dataloader.miniimagenet.DatasetGen.__init__", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_mini_dataset.conv3x3", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_mini_dataset.conv3x3"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "in_planes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "track_running_stats", "=", "False", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "track_running_stats", "=", "False", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ",", "track_running_stats", "=", "False", ")", "\n", ")", "\n", "", "self", ".", "act", "=", "OrderedDict", "(", ")", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_mini_dataset.BasicBlock.forward": [[60, 86], ["torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "main_mini_dataset.BasicBlock.bn2", "main_mini_dataset.BasicBlock.shortcut", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "main_mini_dataset.BasicBlock.bn2", "main_mini_dataset.BasicBlock.shortcut", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "main_mini_dataset.BasicBlock.bn1", "main_mini_dataset.BasicBlock.conv2", "main_mini_dataset.BasicBlock.bn1", "main_mini_dataset.BasicBlock.conv2", "main_mini_dataset.BasicBlock.conv1", "main_mini_dataset.BasicBlock.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "space1", "=", "[", "None", "]", ",", "space2", "=", "[", "None", "]", ")", ":", "\n", "        ", "if", "space1", "[", "0", "]", "is", "not", "None", "or", "space2", "[", "0", "]", "is", "not", "None", ":", "\n", "            ", "self", ".", "count", "=", "self", ".", "count", "%", "2", "\n", "self", ".", "act", "[", "'conv_{}'", ".", "format", "(", "self", ".", "count", ")", "]", "=", "x", "\n", "self", ".", "count", "+=", "1", "\n", "out", "=", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ",", "space1", "=", "space1", "[", "0", "]", ",", "space2", "=", "space2", "[", "0", "]", ")", ")", ")", "\n", "self", ".", "count", "=", "self", ".", "count", "%", "2", "\n", "self", ".", "act", "[", "'conv_{}'", ".", "format", "(", "self", ".", "count", ")", "]", "=", "out", "\n", "self", ".", "count", "+=", "1", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ",", "space1", "=", "space1", "[", "1", "]", ",", "space2", "=", "space2", "[", "1", "]", ")", ")", "\n", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "\n", "out", "=", "relu", "(", "out", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "count", "=", "self", ".", "count", "%", "2", "\n", "self", ".", "act", "[", "'conv_{}'", ".", "format", "(", "self", ".", "count", ")", "]", "=", "x", "\n", "self", ".", "count", "+=", "1", "\n", "out", "=", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "self", ".", "count", "=", "self", ".", "count", "%", "2", "\n", "self", ".", "act", "[", "'conv_{}'", ".", "format", "(", "self", ".", "count", ")", "]", "=", "out", "\n", "self", ".", "count", "+=", "1", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "relu", "(", "out", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_mini_dataset.ResNet.__init__": [[88, 103], ["torch.Module.__init__", "main_mini_dataset.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "main_mini_dataset.ResNet._make_layer", "main_mini_dataset.ResNet._make_layer", "main_mini_dataset.ResNet._make_layer", "main_mini_dataset.ResNet._make_layer", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "collections.OrderedDict", "main_mini_dataset.ResNet.linear.append", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.LYang-666_TRGP.dataloader.miniimagenet.DatasetGen.__init__", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_mini_dataset.conv3x3", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_mini_dataset.ResNet._make_layer", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_mini_dataset.ResNet._make_layer", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_mini_dataset.ResNet._make_layer", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_mini_dataset.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "taskcla", ",", "nf", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "nf", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "3", ",", "nf", "*", "1", ",", "2", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "nf", "*", "1", ",", "track_running_stats", "=", "False", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "nf", "*", "1", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "nf", "*", "2", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "nf", "*", "4", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "nf", "*", "8", ",", "num_blocks", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "taskcla", "=", "taskcla", "\n", "self", ".", "linear", "=", "torch", ".", "nn", ".", "ModuleList", "(", ")", "\n", "for", "t", ",", "n", "in", "self", ".", "taskcla", ":", "\n", "            ", "self", ".", "linear", ".", "append", "(", "nn", ".", "Linear", "(", "nf", "*", "8", "*", "block", ".", "expansion", "*", "9", ",", "n", ",", "bias", "=", "False", ")", ")", "\n", "", "self", ".", "act", "=", "OrderedDict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_mini_dataset.ResNet._make_layer": [[104, 111], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_mini_dataset.ResNet.forward": [[112, 157], ["x.size", "x.view", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "out.view.view.view", "x.view", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "main_mini_dataset.ResNet.layer1", "main_mini_dataset.ResNet.layer2", "main_mini_dataset.ResNet.layer3", "main_mini_dataset.ResNet.layer4", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "out.view.view.view", "main_mini_dataset.ResNet.bn1", "out.view.view.size", "y.append", "main_mini_dataset.ResNet.bn1", "out.view.view.size", "y.append", "main_mini_dataset.ResNet.conv1", "main_mini_dataset.ResNet.conv1", "x.view", "x.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "space1", "=", "[", "None", "]", ",", "space2", "=", "[", "None", "]", ")", ":", "\n", "\n", "        ", "bsz", "=", "x", ".", "size", "(", "0", ")", "\n", "if", "space1", "[", "0", "]", "is", "not", "None", "or", "space2", "[", "0", "]", "is", "not", "None", ":", "\n", "            ", "self", ".", "act", "[", "'conv_in'", "]", "=", "x", ".", "view", "(", "bsz", ",", "3", ",", "84", ",", "84", ")", "\n", "out", "=", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ".", "view", "(", "bsz", ",", "3", ",", "84", ",", "84", ")", ",", "space1", "=", "space1", "[", "0", "]", ",", "space2", "=", "space2", "[", "0", "]", ")", ")", ")", "\n", "\n", "out", "=", "self", ".", "layer1", "[", "0", "]", "(", "out", ",", "space1", "=", "space1", "[", "1", ":", "3", "]", ",", "space2", "=", "space2", "[", "1", ":", "3", "]", ")", "\n", "out", "=", "self", ".", "layer1", "[", "1", "]", "(", "out", ",", "space1", "=", "space1", "[", "3", ":", "5", "]", ",", "space2", "=", "space2", "[", "3", ":", "5", "]", ")", "\n", "out", "=", "self", ".", "layer2", "[", "0", "]", "(", "out", ",", "space1", "=", "space1", "[", "5", ":", "8", "]", ",", "space2", "=", "space2", "[", "5", ":", "8", "]", ")", "\n", "out", "=", "self", ".", "layer2", "[", "1", "]", "(", "out", ",", "space1", "=", "space1", "[", "8", ":", "10", "]", ",", "space2", "=", "space2", "[", "8", ":", "10", "]", ")", "\n", "out", "=", "self", ".", "layer3", "[", "0", "]", "(", "out", ",", "space1", "=", "space1", "[", "10", ":", "13", "]", ",", "space2", "=", "space2", "[", "10", ":", "13", "]", ")", "\n", "out", "=", "self", ".", "layer3", "[", "1", "]", "(", "out", ",", "space1", "=", "space1", "[", "13", ":", "15", "]", ",", "space2", "=", "space2", "[", "13", ":", "15", "]", ")", "\n", "out", "=", "self", ".", "layer4", "[", "0", "]", "(", "out", ",", "space1", "=", "space1", "[", "15", ":", "18", "]", ",", "space2", "=", "space2", "[", "15", ":", "18", "]", ")", "\n", "out", "=", "self", ".", "layer4", "[", "1", "]", "(", "out", ",", "space1", "=", "space1", "[", "18", ":", "20", "]", ",", "space2", "=", "space2", "[", "18", ":", "20", "]", ")", "\n", "\n", "# out = self.layer1(out, space1=space1[1:6], space2 = space2[1:6] )", "\n", "# out = self.layer2(out, space1=space1[6:10], space2 = space2[6:10])", "\n", "# out = self.layer3(out, space1=space1[10:14], space2 = space2[10:14])", "\n", "# out = self.layer4(out, space1=space1[14:19], space2 = space2[14:19])", "\n", "out", "=", "avg_pool2d", "(", "out", ",", "2", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "y", "=", "[", "]", "\n", "for", "t", ",", "i", "in", "self", ".", "taskcla", ":", "\n", "                ", "y", ".", "append", "(", "self", ".", "linear", "[", "t", "]", "(", "out", ")", ")", "\n", "", "", "else", ":", "\n", "# print(x.shape)", "\n", "            ", "self", ".", "act", "[", "'conv_in'", "]", "=", "x", ".", "view", "(", "bsz", ",", "3", ",", "84", ",", "84", ")", "\n", "out", "=", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ".", "view", "(", "bsz", ",", "3", ",", "84", ",", "84", ")", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "# print(out.size())", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "# print(out.size())", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "# print(out.size())", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "# print(out.size())", "\n", "out", "=", "avg_pool2d", "(", "out", ",", "2", ")", "\n", "# print(out.size())", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "# print(out.size())", "\n", "y", "=", "[", "]", "\n", "for", "t", ",", "i", "in", "self", ".", "taskcla", ":", "\n", "                ", "y", ".", "append", "(", "self", ".", "linear", "[", "t", "]", "(", "out", ")", ")", "\n", "", "", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_mini_dataset.compute_conv_output_size": [[31, 33], ["int", "numpy.floor", "float"], "function", ["None"], ["def", "compute_conv_output_size", "(", "Lin", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ")", ":", "\n", "    ", "return", "int", "(", "np", ".", "floor", "(", "(", "Lin", "+", "2", "*", "padding", "-", "dilation", "*", "(", "kernel_size", "-", "1", ")", "-", "1", ")", "/", "float", "(", "stride", ")", "+", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_mini_dataset.conv3x3": [[34, 37], ["layers.Conv2d"], "function", ["None"], ["", "def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "return", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "", "def", "conv7x7", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_mini_dataset.conv7x7": [[37, 40], ["layers.Conv2d"], "function", ["None"], ["", "def", "conv7x7", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "return", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "7", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_mini_dataset.ResNet18": [[158, 160], ["main_mini_dataset.ResNet"], "function", ["None"], ["", "", "def", "ResNet18", "(", "taskcla", ",", "nf", "=", "32", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "taskcla", ",", "nf", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_mini_dataset.get_model": [[161, 163], ["copy.deepcopy", "model.state_dict"], "function", ["None"], ["", "def", "get_model", "(", "model", ")", ":", "\n", "    ", "return", "deepcopy", "(", "model", ".", "state_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_mini_dataset.set_model_": [[164, 167], ["model.load_state_dict", "copy.deepcopy"], "function", ["None"], ["", "def", "set_model_", "(", "model", ",", "state_dict", ")", ":", "\n", "    ", "model", ".", "load_state_dict", "(", "deepcopy", "(", "state_dict", ")", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_mini_dataset.save_model": [[168, 180], ["torch.save", "torch.save", "torch.save", "torch.save", "print", "model.state_dict"], "function", ["None"], ["", "def", "save_model", "(", "model", ",", "memory", ",", "savename", ")", ":", "\n", "    ", "ckpt", "=", "{", "\n", "'model'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'memory'", ":", "memory", ",", "\n", "}", "\n", "\n", "# Save to file.", "\n", "torch", ".", "save", "(", "ckpt", ",", "savename", "+", "'checkpoint.pt'", ")", "\n", "print", "(", "savename", ")", "\n", "\n", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_mini_dataset.adjust_learning_rate": [[181, 187], ["None"], "function", ["None"], ["", "def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "args", ")", ":", "\n", "    ", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "if", "(", "epoch", "==", "1", ")", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "args", ".", "lr", "\n", "", "else", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "/=", "args", ".", "lr_factor", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_mini_dataset.train": [[189, 205], ["model.train", "numpy.arange", "numpy.random.shuffle", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "range", "x.size", "len", "optimizer.zero_grad", "model", "criterion", "criterion.backward", "optimizer.step", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "len", "data.to", "y[].to"], "function", ["home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.train"], ["", "", "", "def", "train", "(", "args", ",", "model", ",", "device", ",", "x", ",", "y", ",", "optimizer", ",", "criterion", ",", "task_id", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "r", "=", "np", ".", "arange", "(", "x", ".", "size", "(", "0", ")", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "r", ")", "\n", "r", "=", "torch", ".", "LongTensor", "(", "r", ")", ".", "to", "(", "device", ")", "\n", "# Loop batches", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "r", ")", ",", "args", ".", "batch_size_train", ")", ":", "\n", "        ", "if", "i", "+", "args", ".", "batch_size_train", "<=", "len", "(", "r", ")", ":", "b", "=", "r", "[", "i", ":", "i", "+", "args", ".", "batch_size_train", "]", "\n", "else", ":", "b", "=", "r", "[", "i", ":", "]", "\n", "data", "=", "x", "[", "b", "]", "\n", "data", ",", "target", "=", "data", ".", "to", "(", "device", ")", ",", "y", "[", "b", "]", ".", "to", "(", "device", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "loss", "=", "criterion", "(", "output", "[", "task_id", "]", ",", "target", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_mini_dataset.train_projected_regime": [[206, 236], ["model.train", "numpy.arange", "numpy.random.shuffle", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "range", "x.size", "len", "optimizer.zero_grad", "model", "criterion", "criterion.backward", "enumerate", "optimizer.step", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "len", "data.to", "y[].to", "model.named_parameters", "params.grad.data.size", "len", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "params.grad.data.fill_", "params.size", "params.size", "len", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "params.size", "params.grad.data.view"], "function", ["home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.train"], ["", "", "def", "train_projected_regime", "(", "args", ",", "model", ",", "device", ",", "x", ",", "y", ",", "optimizer", ",", "criterion", ",", "memory", ",", "task_name", ",", "task_name_list", ",", "space_list_all", ",", "task_id", ",", "feature_mat", ",", "space1", "=", "[", "None", ",", "None", ",", "None", "]", ",", "space2", "=", "[", "None", ",", "None", ",", "None", "]", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "r", "=", "np", ".", "arange", "(", "x", ".", "size", "(", "0", ")", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "r", ")", "\n", "r", "=", "torch", ".", "LongTensor", "(", "r", ")", ".", "to", "(", "device", ")", "\n", "# Loop batches", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "r", ")", ",", "args", ".", "batch_size_train", ")", ":", "\n", "        ", "if", "i", "+", "args", ".", "batch_size_train", "<=", "len", "(", "r", ")", ":", "b", "=", "r", "[", "i", ":", "i", "+", "args", ".", "batch_size_train", "]", "\n", "else", ":", "b", "=", "r", "[", "i", ":", "]", "\n", "data", "=", "x", "[", "b", "]", "\n", "# print(i)", "\n", "\n", "data", ",", "target", "=", "data", ".", "to", "(", "device", ")", ",", "y", "[", "b", "]", ".", "to", "(", "device", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "output", "=", "model", "(", "data", ",", "space1", "=", "space1", ",", "space2", "=", "space2", ")", "\n", "loss", "=", "criterion", "(", "output", "[", "task_id", "]", ",", "target", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "kk", "=", "0", "\n", "for", "k", ",", "(", "m", ",", "params", ")", "in", "enumerate", "(", "model", ".", "named_parameters", "(", ")", ")", ":", "\n", "            ", "if", "len", "(", "params", ".", "size", "(", ")", ")", "==", "4", "and", "'weight'", "in", "m", ":", "\n", "                ", "sz", "=", "params", ".", "grad", ".", "data", ".", "size", "(", "0", ")", "\n", "params", ".", "grad", ".", "data", "=", "params", ".", "grad", ".", "data", "-", "torch", ".", "mm", "(", "params", ".", "grad", ".", "data", ".", "view", "(", "sz", ",", "-", "1", ")", ",", "feature_mat", "[", "kk", "]", ")", ".", "view", "(", "params", ".", "size", "(", ")", ")", "\n", "\n", "kk", "+=", "1", "\n", "", "elif", "len", "(", "params", ".", "size", "(", ")", ")", "==", "1", "and", "task_id", "!=", "0", ":", "\n", "                ", "params", ".", "grad", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n", "", "", "optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_mini_dataset.test": [[239, 265], ["model.eval", "numpy.arange", "numpy.random.shuffle", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "x.size", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "range", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "len", "model", "criterion", "output[].argmax", "output[].argmax.eq().sum().item", "len", "len", "data.to", "y[].to", "criterion.data.cpu().numpy().item", "len", "output[].argmax.eq().sum", "criterion.data.cpu().numpy", "output[].argmax.eq", "target.view_as", "criterion.data.cpu"], "function", ["None"], ["", "", "def", "test", "(", "args", ",", "model", ",", "device", ",", "x", ",", "y", ",", "criterion", ",", "task_id", ",", "space1", "=", "[", "None", ",", "None", ",", "None", "]", ",", "space2", "=", "[", "None", ",", "None", ",", "None", "]", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "total_loss", "=", "0", "\n", "total_num", "=", "0", "\n", "correct", "=", "0", "\n", "r", "=", "np", ".", "arange", "(", "x", ".", "size", "(", "0", ")", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "r", ")", "\n", "r", "=", "torch", ".", "LongTensor", "(", "r", ")", ".", "to", "(", "device", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# Loop batches", "\n", "        ", "for", "i", "in", "range", "(", "0", ",", "len", "(", "r", ")", ",", "args", ".", "batch_size_test", ")", ":", "\n", "            ", "if", "i", "+", "args", ".", "batch_size_test", "<=", "len", "(", "r", ")", ":", "b", "=", "r", "[", "i", ":", "i", "+", "args", ".", "batch_size_test", "]", "\n", "else", ":", "b", "=", "r", "[", "i", ":", "]", "\n", "data", "=", "x", "[", "b", "]", "\n", "data", ",", "target", "=", "data", ".", "to", "(", "device", ")", ",", "y", "[", "b", "]", ".", "to", "(", "device", ")", "\n", "output", "=", "model", "(", "data", ",", "space1", "=", "space1", ",", "space2", "=", "space2", ")", "\n", "loss", "=", "criterion", "(", "output", "[", "task_id", "]", ",", "target", ")", "\n", "pred", "=", "output", "[", "task_id", "]", ".", "argmax", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "correct", "+=", "pred", ".", "eq", "(", "target", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "total_loss", "+=", "loss", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "item", "(", ")", "*", "len", "(", "b", ")", "\n", "total_num", "+=", "len", "(", "b", ")", "\n", "\n", "", "", "acc", "=", "100.", "*", "correct", "/", "total_num", "\n", "final_loss", "=", "total_loss", "/", "total_num", "\n", "return", "final_loss", ",", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_mini_dataset.get_representation_and_gradient": [[266, 345], ["numpy.arange", "numpy.random.shuffle", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "net.eval", "net", "act_list.extend", "range", "range", "print", "print", "print", "range", "print", "x.size", "example_data.to", "y[].to", "len", "main_mini_dataset.compute_conv_output_size", "numpy.zeros", "torch.pad().detach().cpu().numpy", "range", "mat_list.append", "len", "mat_final.append", "len", "print", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "range", "main_mini_dataset.compute_conv_output_size", "numpy.zeros", "act_list[].detach().cpu().numpy", "range", "mat_sc_list.append", "mat_final.append", "torch.pad().detach().cpu", "range", "range", "act[].reshape", "act_list[].detach().cpu", "range", "torch.pad().detach", "act[].reshape", "act_list[].detach", "torch.pad"], "function", ["home.repos.pwc.inspect_result.LYang-666_TRGP.None.utilis.compute_conv_output_size", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.utilis.compute_conv_output_size"], ["", "def", "get_representation_and_gradient", "(", "net", ",", "device", ",", "optimizer", ",", "criterion", ",", "task_id", ",", "x", ",", "y", "=", "None", ")", ":", "\n", "# Collect activations by forward pass", "\n", "\n", "    ", "r", "=", "np", ".", "arange", "(", "x", ".", "size", "(", "0", ")", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "r", ")", "\n", "r", "=", "torch", ".", "LongTensor", "(", "r", ")", ".", "to", "(", "device", ")", "\n", "b", "=", "r", "[", "0", ":", "100", "]", "# ns=100 examples ", "\n", "example_data", "=", "x", "[", "b", "]", "\n", "example_data", ",", "target", "=", "example_data", ".", "to", "(", "device", ")", ",", "y", "[", "b", "]", ".", "to", "(", "device", ")", "\n", "grad_list", "=", "[", "]", "# list contains gradient of each layer", "\n", "\n", "\n", "net", ".", "eval", "(", ")", "\n", "example_out", "=", "net", "(", "example_data", ")", "\n", "\n", "act_list", "=", "[", "]", "\n", "act_list", ".", "extend", "(", "[", "net", ".", "act", "[", "'conv_in'", "]", ",", "\n", "net", ".", "layer1", "[", "0", "]", ".", "act", "[", "'conv_0'", "]", ",", "net", ".", "layer1", "[", "0", "]", ".", "act", "[", "'conv_1'", "]", ",", "net", ".", "layer1", "[", "1", "]", ".", "act", "[", "'conv_0'", "]", ",", "net", ".", "layer1", "[", "1", "]", ".", "act", "[", "'conv_1'", "]", ",", "\n", "net", ".", "layer2", "[", "0", "]", ".", "act", "[", "'conv_0'", "]", ",", "net", ".", "layer2", "[", "0", "]", ".", "act", "[", "'conv_1'", "]", ",", "net", ".", "layer2", "[", "1", "]", ".", "act", "[", "'conv_0'", "]", ",", "net", ".", "layer2", "[", "1", "]", ".", "act", "[", "'conv_1'", "]", ",", "\n", "net", ".", "layer3", "[", "0", "]", ".", "act", "[", "'conv_0'", "]", ",", "net", ".", "layer3", "[", "0", "]", ".", "act", "[", "'conv_1'", "]", ",", "net", ".", "layer3", "[", "1", "]", ".", "act", "[", "'conv_0'", "]", ",", "net", ".", "layer3", "[", "1", "]", ".", "act", "[", "'conv_1'", "]", ",", "\n", "net", ".", "layer4", "[", "0", "]", ".", "act", "[", "'conv_0'", "]", ",", "net", ".", "layer4", "[", "0", "]", ".", "act", "[", "'conv_1'", "]", ",", "net", ".", "layer4", "[", "1", "]", ".", "act", "[", "'conv_0'", "]", ",", "net", ".", "layer4", "[", "1", "]", ".", "act", "[", "'conv_1'", "]", "]", ")", "\n", "\n", "batch_list", "=", "[", "10", ",", "10", ",", "10", ",", "10", ",", "10", ",", "10", ",", "10", ",", "10", ",", "50", ",", "50", ",", "50", ",", "100", ",", "100", ",", "100", ",", "100", ",", "100", ",", "100", "]", "#scaled", "\n", "# network arch ", "\n", "\n", "stride_list", "=", "[", "2", ",", "1", ",", "1", ",", "1", ",", "1", ",", "2", ",", "1", ",", "1", ",", "1", ",", "2", ",", "1", ",", "1", ",", "1", ",", "2", ",", "1", ",", "1", ",", "1", "]", "\n", "map_list", "=", "[", "84", ",", "42", ",", "42", ",", "42", ",", "42", ",", "42", ",", "21", ",", "21", ",", "21", ",", "21", ",", "11", ",", "11", ",", "11", ",", "11", ",", "6", ",", "6", ",", "6", "]", "\n", "in_channel", "=", "[", "3", ",", "20", ",", "20", ",", "20", ",", "20", ",", "20", ",", "40", ",", "40", ",", "40", ",", "40", ",", "80", ",", "80", ",", "80", ",", "80", ",", "160", ",", "160", ",", "160", "]", "\n", "pad", "=", "1", "\n", "sc_list", "=", "[", "5", ",", "9", ",", "13", "]", "\n", "p1d", "=", "(", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "mat_final", "=", "[", "]", "# list containing GPM Matrices ", "\n", "mat_list", "=", "[", "]", "\n", "mat_sc_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "stride_list", ")", ")", ":", "\n", "        ", "if", "i", "==", "0", ":", "\n", "            ", "ksz", "=", "3", "\n", "", "else", ":", "\n", "            ", "ksz", "=", "3", "\n", "", "bsz", "=", "batch_list", "[", "i", "]", "\n", "st", "=", "stride_list", "[", "i", "]", "\n", "k", "=", "0", "\n", "s", "=", "compute_conv_output_size", "(", "map_list", "[", "i", "]", ",", "ksz", ",", "stride_list", "[", "i", "]", ",", "pad", ")", "\n", "mat", "=", "np", ".", "zeros", "(", "(", "ksz", "*", "ksz", "*", "in_channel", "[", "i", "]", ",", "s", "*", "s", "*", "bsz", ")", ")", "\n", "act", "=", "F", ".", "pad", "(", "act_list", "[", "i", "]", ",", "p1d", ",", "\"constant\"", ",", "0", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "for", "kk", "in", "range", "(", "bsz", ")", ":", "\n", "            ", "for", "ii", "in", "range", "(", "s", ")", ":", "\n", "                ", "for", "jj", "in", "range", "(", "s", ")", ":", "\n", "                    ", "mat", "[", ":", ",", "k", "]", "=", "act", "[", "kk", ",", ":", ",", "st", "*", "ii", ":", "ksz", "+", "st", "*", "ii", ",", "st", "*", "jj", ":", "ksz", "+", "st", "*", "jj", "]", ".", "reshape", "(", "-", "1", ")", "\n", "k", "+=", "1", "\n", "", "", "", "mat_list", ".", "append", "(", "mat", ")", "\n", "# For Shortcut Connection", "\n", "if", "i", "in", "sc_list", ":", "\n", "            ", "k", "=", "0", "\n", "s", "=", "compute_conv_output_size", "(", "map_list", "[", "i", "]", ",", "1", ",", "stride_list", "[", "i", "]", ")", "\n", "mat", "=", "np", ".", "zeros", "(", "(", "1", "*", "1", "*", "in_channel", "[", "i", "]", ",", "s", "*", "s", "*", "bsz", ")", ")", "\n", "act", "=", "act_list", "[", "i", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "for", "kk", "in", "range", "(", "bsz", ")", ":", "\n", "                ", "for", "ii", "in", "range", "(", "s", ")", ":", "\n", "                    ", "for", "jj", "in", "range", "(", "s", ")", ":", "\n", "                        ", "mat", "[", ":", ",", "k", "]", "=", "act", "[", "kk", ",", ":", ",", "st", "*", "ii", ":", "1", "+", "st", "*", "ii", ",", "st", "*", "jj", ":", "1", "+", "st", "*", "jj", "]", ".", "reshape", "(", "-", "1", ")", "\n", "k", "+=", "1", "\n", "", "", "", "mat_sc_list", ".", "append", "(", "mat", ")", "\n", "\n", "", "", "ik", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "mat_list", ")", ")", ":", "\n", "        ", "mat_final", ".", "append", "(", "mat_list", "[", "i", "]", ")", "\n", "if", "i", "in", "[", "6", ",", "10", ",", "14", "]", ":", "\n", "            ", "mat_final", ".", "append", "(", "mat_sc_list", "[", "ik", "]", ")", "\n", "ik", "+=", "1", "\n", "\n", "", "", "print", "(", "'-'", "*", "30", ")", "\n", "print", "(", "'Representation Matrix'", ")", "\n", "print", "(", "'-'", "*", "30", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "mat_final", ")", ")", ":", "\n", "        ", "print", "(", "'Layer {} : {}'", ".", "format", "(", "i", "+", "1", ",", "mat_final", "[", "i", "]", ".", "shape", ")", ")", "\n", "", "print", "(", "'-'", "*", "30", ")", "\n", "\n", "return", "mat_final", ",", "grad_list", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_mini_dataset.get_space_and_grad": [[347, 454], ["main_mini_dataset.print_log", "main_mini_dataset.print_log", "main_mini_dataset.print_log", "main_mini_dataset.print_log", "print", "range", "main_mini_dataset.print_log", "range", "range", "len", "len", "print", "len", "numpy.linalg.svd", "numpy.sum", "space_list_all.append", "len", "main_mini_dataset.print_log", "main_mini_dataset.print_log", "numpy.dot", "range", "numpy.array", "numpy.linalg.svd", "numpy.dot", "numpy.linalg.svd", "numpy.hstack", "len", "range", "main_mini_dataset.print_log", "main_mini_dataset.print_log", "numpy.hstack", "main_mini_dataset.print_log", "main_mini_dataset.print_log", "main_mini_dataset.print_log", "numpy.cumsum", "activation.transpose", "numpy.dot", "np.array.append", "numpy.dot", "numpy.argsort", "numpy.sort", "len", "len", "numpy.hstack", "numpy.array", "str", "space_list_all[].transpose", "numpy.dot", "space_list_all[].transpose", "len", "space.transpose", "numpy.linalg.norm", "str"], "function", ["home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log"], ["", "def", "get_space_and_grad", "(", "model", ",", "mat_list", ",", "grad_list", ",", "threshold", ",", "memory", ",", "task_name", ",", "task_name_list", ",", "task_id", ",", "space_list_all", ")", ":", "\n", "    ", "print_log", "(", "'Threshold:{}'", ".", "format", "(", "threshold", ")", ",", "log", ")", "\n", "Ours", "=", "True", "\n", "if", "task_name", "==", "'iMiniImageNet-0-[61, 49, 86, 78, 5]'", ":", "\n", "# After First Task ", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "mat_list", ")", ")", ":", "\n", "            ", "activation", "=", "mat_list", "[", "i", "]", "\n", "# gradient = grad_list[i]", "\n", "\n", "U", ",", "S", ",", "Vh", "=", "np", ".", "linalg", ".", "svd", "(", "activation", ",", "full_matrices", "=", "False", ")", "\n", "# criteria (Eq-5)", "\n", "sval_total", "=", "(", "S", "**", "2", ")", ".", "sum", "(", ")", "\n", "sval_ratio", "=", "(", "S", "**", "2", ")", "/", "sval_total", "\n", "r", "=", "np", ".", "sum", "(", "np", ".", "cumsum", "(", "sval_ratio", ")", "<", "threshold", "[", "i", "]", ")", "#+1  ", "\n", "\n", "# save into memory", "\n", "memory", "[", "task_name", "]", "[", "str", "(", "i", ")", "]", "[", "'space_list'", "]", "=", "U", "[", ":", ",", "0", ":", "r", "]", "\n", "# memory[task_name][str(i)]['grad_list'] = gradient", "\n", "\n", "space_list_all", ".", "append", "(", "U", "[", ":", ",", "0", ":", "r", "]", ")", "\n", "\n", "", "", "else", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "mat_list", ")", ")", ":", "\n", "\n", "            ", "activation", "=", "mat_list", "[", "i", "]", "\n", "# gradient = grad_list[i]", "\n", "\n", "if", "Ours", ":", "\n", "#=1. calculate the projection using previous space", "\n", "                ", "print_log", "(", "'activation shape:{}'", ".", "format", "(", "activation", ".", "shape", ")", ",", "log", ")", "\n", "print_log", "(", "'space shape:{}'", ".", "format", "(", "space_list_all", "[", "i", "]", ".", "shape", ")", ",", "log", ")", "\n", "delta", "=", "[", "]", "\n", "R2", "=", "np", ".", "dot", "(", "activation", ",", "activation", ".", "transpose", "(", ")", ")", "\n", "for", "ki", "in", "range", "(", "space_list_all", "[", "i", "]", ".", "shape", "[", "1", "]", ")", ":", "\n", "                    ", "space", "=", "space_list_all", "[", "i", "]", ".", "transpose", "(", ")", "[", "ki", "]", "\n", "# print(space.shape)", "\n", "delta_i", "=", "np", ".", "dot", "(", "np", ".", "dot", "(", "space", ".", "transpose", "(", ")", ",", "R2", ")", ",", "space", ")", "\n", "# print(delta_i)", "\n", "delta", ".", "append", "(", "delta_i", ")", "\n", "", "delta", "=", "np", ".", "array", "(", "delta", ")", "\n", "\n", "#=2  following the GPM to get the sigma (S**2)", "\n", "U1", ",", "S1", ",", "Vh1", "=", "np", ".", "linalg", ".", "svd", "(", "activation", ",", "full_matrices", "=", "False", ")", "\n", "sval_total", "=", "(", "S1", "**", "2", ")", ".", "sum", "(", ")", "\n", "\n", "act_hat", "=", "activation", "\n", "\n", "act_hat", "-=", "np", ".", "dot", "(", "np", ".", "dot", "(", "space_list_all", "[", "i", "]", ",", "space_list_all", "[", "i", "]", ".", "transpose", "(", ")", ")", ",", "activation", ")", "\n", "U", ",", "S", ",", "Vh", "=", "np", ".", "linalg", ".", "svd", "(", "act_hat", ",", "full_matrices", "=", "False", ")", "\n", "sigma", "=", "S", "**", "2", "\n", "\n", "#=3 stack delta and sigma in a same list, then sort in descending order", "\n", "stack", "=", "np", ".", "hstack", "(", "(", "delta", ",", "sigma", ")", ")", "#[0,..30, 31..99]", "\n", "stack_index", "=", "np", ".", "argsort", "(", "stack", ")", "[", ":", ":", "-", "1", "]", "#[99, 0, 4,7...]", "\n", "#print('stack index:{}'.format(stack_index))", "\n", "stack", "=", "np", ".", "sort", "(", "stack", ")", "[", ":", ":", "-", "1", "]", "\n", "\n", "#=4 select the most import bases", "\n", "r_pre", "=", "len", "(", "delta", ")", "\n", "r", "=", "0", "\n", "accumulated_sval", "=", "0", "\n", "for", "ii", "in", "range", "(", "len", "(", "stack", ")", ")", ":", "\n", "                    ", "if", "accumulated_sval", "<", "threshold", "[", "i", "]", "*", "sval_total", ":", "\n", "                        ", "accumulated_sval", "+=", "stack", "[", "ii", "]", "\n", "r", "+=", "1", "\n", "if", "r", "==", "activation", ".", "shape", "[", "0", "]", ":", "\n", "                            ", "break", "\n", "", "", "else", ":", "\n", "                        ", "break", "\n", "\n", "", "", "print_log", "(", "'threshold for selecting:{}'", ".", "format", "(", "np", ".", "linalg", ".", "norm", "(", "activation", ")", "**", "2", ")", ",", "log", ")", "\n", "print_log", "(", "\"total ranking r = {}\"", ".", "format", "(", "r", ")", ",", "log", ")", "\n", "\n", "#=5 save the corresponding space", "\n", "Ui", "=", "np", ".", "hstack", "(", "(", "space_list_all", "[", "i", "]", ",", "U", ")", ")", "\n", "sel_index", "=", "stack_index", "[", ":", "r", "]", "\n", "# this is the current space", "\n", "U_new", "=", "Ui", "[", ":", ",", "sel_index", "]", "\n", "# calculate how many space from current new task", "\n", "sel_index_from_U", "=", "sel_index", "[", "sel_index", ">", "r_pre", "]", "\n", "\n", "if", "len", "(", "sel_index_from_U", ")", ">", "0", ":", "\n", "# update the overall space without overlap", "\n", "                    ", "total_U", "=", "np", ".", "hstack", "(", "(", "space_list_all", "[", "i", "]", ",", "Ui", "[", ":", ",", "sel_index_from_U", "]", ")", ")", "\n", "\n", "space_list_all", "[", "i", "]", "=", "total_U", "\n", "", "else", ":", "\n", "                    ", "space_list_all", "[", "i", "]", "=", "np", ".", "array", "(", "space_list_all", "[", "i", "]", ")", "\n", "\n", "", "print_log", "(", "\"the number of space for current task:{}\"", ".", "format", "(", "r", ")", ",", "log", ")", "\n", "print_log", "(", "'the new increased space:{}, the threshold for new space:{}'", ".", "format", "(", "len", "(", "sel_index_from_U", ")", ",", "r_pre", ")", ",", "log", ")", "\n", "\n", "print_log", "(", "\"Ui shape:{}\"", ".", "format", "(", "Ui", "[", ":", ",", "sel_index", "]", ".", "shape", ")", ",", "log", ")", "\n", "\n", "memory", "[", "task_name", "]", "[", "str", "(", "i", ")", "]", "[", "'space_list'", "]", "=", "Ui", "[", ":", ",", "sel_index", "]", "\n", "\n", "\n", "\n", "", "", "", "print_log", "(", "'-'", "*", "40", ",", "log", ")", "\n", "print_log", "(", "'Gradient Constraints Summary'", ",", "log", ")", "\n", "print_log", "(", "'-'", "*", "40", ",", "log", ")", "\n", "print", "(", "len", "(", "mat_list", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "mat_list", ")", ")", ":", "\n", "        ", "print", "(", "'Layer {} : {}/{}'", ".", "format", "(", "i", "+", "1", ",", "space_list_all", "[", "i", "]", ".", "shape", "[", "1", "]", ",", "space_list_all", "[", "i", "]", ".", "shape", "[", "0", "]", ")", ")", "\n", "", "print_log", "(", "'-'", "*", "40", ",", "log", ")", "\n", "\n", "return", "space_list_all", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_mini_dataset.grad_proj_cond": [[455, 537], ["numpy.arange", "numpy.random.shuffle", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "list", "optimizer.zero_grad", "net", "criterion", "criterion.backward", "enumerate", "range", "main_mini_dataset.print_log", "main_mini_dataset.print_log", "x.size", "example_data.to", "y[].to", "net.act.keys", "net.named_parameters", "range", "gradient_norm_lists_tasks.append", "range", "range", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "params.grad.data.detach().cpu().numpy", "grad.reshape.reshape", "grad_list.append", "len", "main_mini_dataset.print_log", "numpy.dot", "numpy.linalg.norm", "projection_norm_lists.append", "numpy.linalg.norm", "main_mini_dataset.print_log", "len", "main_mini_dataset.print_log", "len", "range", "range", "len", "numpy.dot", "len", "main_mini_dataset.print_log", "len", "range", "numpy.array", "main_mini_dataset.print_log", "params.grad.data.detach().cpu", "space_list.transpose", "len", "np.array.append", "numpy.argpartition", "str", "str", "params.grad.data.detach", "str", "str", "str", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log"], ["", "def", "grad_proj_cond", "(", "args", ",", "net", ",", "x", ",", "y", ",", "memory", ",", "task_name", ",", "task_id", ",", "task_name_list", ",", "device", ",", "optimizer", ",", "criterion", ")", ":", "\n", "\n", "# calcuate the gradient for current task before training", "\n", "    ", "steps", "=", "1", "\n", "r", "=", "np", ".", "arange", "(", "x", ".", "size", "(", "0", ")", ")", "\n", "\n", "np", ".", "random", ".", "shuffle", "(", "r", ")", "\n", "r", "=", "torch", ".", "LongTensor", "(", "r", ")", ".", "to", "(", "device", ")", "\n", "b", "=", "r", "[", "0", ":", "100", "*", "5", "]", "# Take 125*10 random samples", "\n", "example_data", "=", "x", "[", "b", "]", "\n", "example_data", ",", "target", "=", "example_data", ".", "to", "(", "device", ")", ",", "y", "[", "b", "]", ".", "to", "(", "device", ")", "\n", "\n", "grad_list", "=", "[", "]", "# list contains gradient of each layer", "\n", "act_key", "=", "list", "(", "net", ".", "act", ".", "keys", "(", ")", ")", "\n", "#print('task id:{}'.format(task_id))", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "example_out", "=", "net", "(", "example_data", ")", "\n", "\n", "loss", "=", "criterion", "(", "example_out", "[", "task_id", "]", ",", "target", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "# optimizer.step()", "\n", "k_conv", "=", "0", "\n", "for", "k", ",", "(", "m", ",", "params", ")", "in", "enumerate", "(", "net", ".", "named_parameters", "(", ")", ")", ":", "\n", "        ", "if", "len", "(", "params", ".", "shape", ")", "==", "4", "and", "'weight'", "in", "m", ":", "\n", "\n", "            ", "grad", "=", "params", ".", "grad", ".", "data", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "grad", "=", "grad", ".", "reshape", "(", "grad", ".", "shape", "[", "0", "]", ",", "grad", ".", "shape", "[", "1", "]", "*", "grad", ".", "shape", "[", "2", "]", "*", "grad", ".", "shape", "[", "3", "]", ")", "\n", "grad_list", ".", "append", "(", "grad", ")", "\n", "k_conv", "+=", "1", "\n", "\n", "\n", "# project on each task subspace", "\n", "", "", "gradient_norm_lists_tasks", "=", "[", "]", "\n", "for", "task_index", "in", "range", "(", "task_id", ")", ":", "\n", "        ", "projection_norm_lists", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "grad_list", ")", ")", ":", "#layer", "\n", "            ", "space_list", "=", "memory", "[", "task_name_list", "[", "task_index", "]", "]", "[", "str", "(", "i", ")", "]", "[", "'space_list'", "]", "\n", "print_log", "(", "\"Task:{}, layer:{}, space shape:{}\"", ".", "format", "(", "task_index", ",", "i", ",", "space_list", ".", "shape", ")", ",", "log", ")", "\n", "# grad_list is the grad for current task", "\n", "projection", "=", "np", ".", "dot", "(", "grad_list", "[", "i", "]", ",", "np", ".", "dot", "(", "space_list", ",", "space_list", ".", "transpose", "(", ")", ")", ")", "\n", "\n", "projection_norm", "=", "np", ".", "linalg", ".", "norm", "(", "projection", ")", "\n", "\n", "projection_norm_lists", ".", "append", "(", "projection_norm", ")", "\n", "gradient_norm", "=", "np", ".", "linalg", ".", "norm", "(", "grad_list", "[", "i", "]", ")", "\n", "print_log", "(", "'Task:{}, Layer:{}, project_norm:{}, threshold for regime 1:{}'", ".", "format", "(", "task_index", ",", "i", ",", "projection_norm", ",", "eplison_1", "*", "gradient_norm", ")", ",", "log", ")", "\n", "\n", "\n", "if", "projection_norm", "<=", "eplison_1", "*", "gradient_norm", ":", "\n", "                ", "memory", "[", "task_name", "]", "[", "str", "(", "i", ")", "]", "[", "'regime'", "]", "[", "task_index", "]", "=", "'1'", "\n", "", "else", ":", "\n", "\n", "                ", "memory", "[", "task_name", "]", "[", "str", "(", "i", ")", "]", "[", "'regime'", "]", "[", "task_index", "]", "=", "'2'", "\n", "\n", "", "", "gradient_norm_lists_tasks", ".", "append", "(", "projection_norm_lists", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "grad_list", ")", ")", ":", "\n", "            ", "print_log", "(", "'Layer:{}, Regime:{}'", ".", "format", "(", "i", ",", "memory", "[", "task_name", "]", "[", "str", "(", "i", ")", "]", "[", "'regime'", "]", "[", "task_index", "]", ")", ",", "log", ")", "\n", "# select top-k related tasks according to the projection norm, k = 2 in general (k= 1 for task 2)", "\n", "", "", "print_log", "(", "'-'", "*", "20", ",", "log", ")", "\n", "print_log", "(", "'selected top-2 tasks:'", ",", "log", ")", "\n", "if", "task_id", "==", "1", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "grad_list", ")", ")", ":", "\n", "            ", "memory", "[", "task_name", "]", "[", "str", "(", "i", ")", "]", "[", "'selected_task'", "]", "=", "[", "0", "]", "\n", "", "", "else", ":", "\n", "        ", "if", "task_id", "==", "2", ":", "\n", "            ", "for", "layer", "in", "range", "(", "len", "(", "grad_list", ")", ")", ":", "\n", "                ", "memory", "[", "task_name", "]", "[", "str", "(", "layer", ")", "]", "[", "'selected_task'", "]", "=", "[", "1", "]", "\n", "print_log", "(", "'Layer:{}, selected task ID:{}'", ".", "format", "(", "layer", ",", "memory", "[", "task_name", "]", "[", "str", "(", "layer", ")", "]", "[", "'selected_task'", "]", ")", ",", "log", ")", "\n", "", "", "else", ":", "\n", "            ", "k", "=", "2", "\n", "\n", "for", "layer", "in", "range", "(", "len", "(", "grad_list", ")", ")", ":", "\n", "                ", "task_norm", "=", "[", "]", "\n", "for", "t", "in", "range", "(", "len", "(", "gradient_norm_lists_tasks", ")", ")", ":", "\n", "                    ", "norm", "=", "gradient_norm_lists_tasks", "[", "t", "]", "[", "layer", "]", "\n", "task_norm", ".", "append", "(", "norm", ")", "\n", "", "task_norm", "=", "np", ".", "array", "(", "task_norm", ")", "\n", "idx", "=", "np", ".", "argpartition", "(", "task_norm", ",", "-", "k", ")", "[", "-", "k", ":", "]", "\n", "memory", "[", "task_name", "]", "[", "str", "(", "layer", ")", "]", "[", "'selected_task'", "]", "=", "idx", "\n", "print_log", "(", "'Layer:{}, selected task ID:{}'", ".", "format", "(", "layer", ",", "memory", "[", "task_name", "]", "[", "str", "(", "layer", ")", "]", "[", "'selected_task'", "]", ")", ",", "log", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_mini_dataset.main": [[540, 858], ["time.time", "torch.device", "torch.device", "torch.device", "torch.device", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "numpy.random.seed", "data_loader.DatasetGen", "numpy.zeros", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "numpy.save", "main_mini_dataset.print_log", "main_mini_dataset.print_log", "main_mini_dataset.print_log", "numpy.mean", "main_mini_dataset.print_log", "main_mini_dataset.print_log", "main_mini_dataset.print_log", "pandas.DataFrame", "seaborn.set", "seaborn.heatmap", "matplotlib.show", "numpy.array", "data_loader.DatasetGen.get", "task_name_list.append", "main_mini_dataset.print_log", "main_mini_dataset.print_log", "main_mini_dataset.print_log", "task_list.append", "main_mini_dataset.print_log", "main_mini_dataset.print_log", "main_mini_dataset.print_log", "main_mini_dataset.print_log", "range", "main_mini_dataset.save_model", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "ResNet18().to", "main_mini_dataset.print_log", "enumerate", "main_mini_dataset.print_log", "main_mini_dataset.get_model", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "range", "print", "acc_list_all.append", "main_mini_dataset.set_model_", "main_mini_dataset.print_log", "main_mini_dataset.test", "main_mini_dataset.print_log", "main_mini_dataset.get_representation_and_gradient", "main_mini_dataset.get_space_and_grad", "main_mini_dataset.print_log", "enumerate", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "range", "main_mini_dataset.print_log", "main_mini_dataset.grad_proj_cond", "range", "main_mini_dataset.print_log", "range", "print", "acc_list_all.append", "main_mini_dataset.set_model_", "print", "range", "main_mini_dataset.print_log", "main_mini_dataset.get_representation_and_gradient", "main_mini_dataset.get_space_and_grad", "ResNet18().to.named_parameters", "numpy.array", "main_mini_dataset.print_log", "range", "main_mini_dataset.print_log", "range", "main_mini_dataset.print_log", "numpy.array", "acc_matrix[].mean", "ResNet18().to.named_parameters", "time.time", "main_mini_dataset.train", "time.time", "main_mini_dataset.test", "main_mini_dataset.print_log", "main_mini_dataset.test", "acc_list.append", "main_mini_dataset.print_log", "main_mini_dataset.print_log", "ResNet18().to.named_parameters", "len", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "main_mini_dataset.print_log", "feature_mat.append", "enumerate", "main_mini_dataset.print_log", "main_mini_dataset.print_log", "time.time", "main_mini_dataset.train_projected_regime", "time.time", "main_mini_dataset.test", "main_mini_dataset.print_log", "main_mini_dataset.test", "acc_list.append", "main_mini_dataset.print_log", "main_mini_dataset.print_log", "main_mini_dataset.test", "main_mini_dataset.print_log", "range", "main_mini_dataset.test", "main_mini_dataset.print_log", "main_mini_dataset.print_log", "numpy.diag", "main_mini_dataset.ResNet18", "len", "main_mini_dataset.print_log", "ResNet18().to.named_parameters", "main_mini_dataset.get_model", "main_mini_dataset.print_log", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "ResNet18().to.named_parameters", "ResNet18().to.named_parameters", "main_mini_dataset.get_model", "main_mini_dataset.print_log", "enumerate", "time.time", "main_mini_dataset.print_log", "main_mini_dataset.adjust_learning_rate", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "main_mini_dataset.print_log", "main_mini_dataset.adjust_learning_rate", "str", "main_mini_dataset.print_log", "str", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "numpy.dot", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "main_mini_dataset.print_log", "params.size", "params.size", "space_list_all[].transpose", "str", "str", "str", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "ResNet18().to.named_parameters", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "ResNet18().to.named_parameters", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "str", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "[].to", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "[].to", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.dataloader.miniimagenet.DatasetGen.get", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.save_model", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.utilis.get_model", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.set_model_", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.test", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.get_representation_and_gradient", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.get_space_and_grad", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.grad_proj_cond", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.set_model_", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.get_representation_and_gradient", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.get_space_and_grad", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.train", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.test", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.test", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.train_projected_regime", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.test", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.test", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.test", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.test", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_mini_dataset.ResNet18", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.utilis.get_model", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.utilis.get_model", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.adjust_learning_rate", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.adjust_learning_rate", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log"], ["", "", "", "", "def", "main", "(", "args", ")", ":", "\n", "    ", "tstart", "=", "time", ".", "time", "(", ")", "\n", "## Device Setting ", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "## Load CIFAR100 DATASET", "\n", "from", "dataloader", "import", "miniimagenet", "as", "data_loader", "\n", "dataloader", "=", "data_loader", ".", "DatasetGen", "(", "args", ")", "\n", "taskcla", ",", "inputsize", "=", "dataloader", ".", "taskcla", ",", "dataloader", ".", "inputsize", "\n", "\n", "acc_matrix", "=", "np", ".", "zeros", "(", "(", "20", ",", "20", ")", ")", "\n", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n", "task_id", "=", "0", "\n", "task_list", "=", "[", "]", "\n", "task_name_list", "=", "[", "]", "\n", "memory", "=", "{", "}", "\n", "acc_list_all", "=", "[", "]", "\n", "\n", "epochs_back", "=", "[", "]", "\n", "\n", "for", "k", ",", "ncla", "in", "taskcla", ":", "\n", "# specify threshold hyperparameter", "\n", "\n", "        ", "threshold", "=", "np", ".", "array", "(", "[", "0.985", "]", "*", "20", ")", "\n", "data", "=", "dataloader", ".", "get", "(", "k", ")", "\n", "task_name", "=", "data", "[", "k", "]", "[", "'name'", "]", "\n", "task_name_list", ".", "append", "(", "task_name", ")", "\n", "print_log", "(", "'*'", "*", "100", ",", "log", ")", "\n", "print_log", "(", "'Task {:2d} ({:s})'", ".", "format", "(", "k", ",", "data", "[", "k", "]", "[", "'name'", "]", ")", ",", "log", ")", "\n", "print_log", "(", "'*'", "*", "100", ",", "log", ")", "\n", "\n", "\n", "xtrain", "=", "data", "[", "k", "]", "[", "'train'", "]", "[", "'x'", "]", "\n", "ytrain", "=", "data", "[", "k", "]", "[", "'train'", "]", "[", "'y'", "]", "\n", "xvalid", "=", "data", "[", "k", "]", "[", "'valid'", "]", "[", "'x'", "]", "\n", "yvalid", "=", "data", "[", "k", "]", "[", "'valid'", "]", "[", "'y'", "]", "\n", "xtest", "=", "data", "[", "k", "]", "[", "'test'", "]", "[", "'x'", "]", "\n", "ytest", "=", "data", "[", "k", "]", "[", "'test'", "]", "[", "'y'", "]", "\n", "task_list", ".", "append", "(", "k", ")", "\n", "\n", "lr", "=", "args", ".", "lr", "\n", "best_loss", "=", "np", ".", "inf", "\n", "print_log", "(", "'-'", "*", "40", ",", "log", ")", "\n", "print_log", "(", "'Task ID :{} | Learning Rate : {}'", ".", "format", "(", "task_id", ",", "lr", ")", ",", "log", ")", "\n", "print_log", "(", "'-'", "*", "40", ",", "log", ")", "\n", "\n", "if", "task_id", "==", "0", ":", "\n", "            ", "model", "=", "ResNet18", "(", "taskcla", ",", "20", ")", ".", "to", "(", "device", ")", "# base filters: 20", "\n", "\n", "# for k_t, (m, param) in enumerate(model.named_parameters()):", "\n", "#     print_log ((k_t,m,param.shape), log)", "\n", "\n", "memory", "[", "task_name", "]", "=", "{", "}", "\n", "\n", "print_log", "(", "'Model parameters ---'", ",", "log", ")", "\n", "kk", "=", "0", "\n", "for", "k_t", ",", "(", "m", ",", "param", ")", "in", "enumerate", "(", "model", ".", "named_parameters", "(", ")", ")", ":", "\n", "                ", "if", "len", "(", "param", ".", "shape", ")", "==", "4", ":", "\n", "                    ", "print_log", "(", "(", "k_t", ",", "m", ",", "param", ".", "shape", ")", ",", "log", ")", "\n", "memory", "[", "task_name", "]", "[", "str", "(", "kk", ")", "]", "=", "{", "\n", "'space_list'", ":", "{", "}", ",", "\n", "'grad_list'", ":", "{", "}", ",", "\n", "'regime'", ":", "{", "}", ",", "\n", "}", "\n", "kk", "+=", "1", "\n", "\n", "", "", "print_log", "(", "'-'", "*", "40", ",", "log", ")", "\n", "\n", "best_model", "=", "get_model", "(", "model", ")", "\n", "space_list_all", "=", "[", "]", "\n", "normal_param", "=", "[", "\n", "param", "for", "name", ",", "param", "in", "model", ".", "named_parameters", "(", ")", "\n", "if", "not", "'scale'", "in", "name", "\n", "]", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "[", "\n", "{", "'params'", ":", "normal_param", "}", "\n", "]", ",", "\n", "lr", "=", "lr", "\n", ")", "\n", "acc_list", "=", "[", "]", "\n", "for", "epoch", "in", "range", "(", "1", ",", "args", ".", "n_epochs", "+", "1", ")", ":", "\n", "# Train", "\n", "                ", "clock0", "=", "time", ".", "time", "(", ")", "\n", "train", "(", "args", ",", "model", ",", "device", ",", "xtrain", ",", "ytrain", ",", "optimizer", ",", "criterion", ",", "k", ")", "\n", "clock1", "=", "time", ".", "time", "(", ")", "\n", "tr_loss", ",", "tr_acc", "=", "test", "(", "args", ",", "model", ",", "device", ",", "xtrain", ",", "ytrain", ",", "criterion", ",", "k", ")", "\n", "print_log", "(", "'Epoch {:3d} | Train: loss={:.3f}, acc={:5.1f}% | time={:5.1f}ms |'", ".", "format", "(", "epoch", ",", "tr_loss", ",", "tr_acc", ",", "1000", "*", "(", "clock1", "-", "clock0", ")", ")", ",", "log", ")", "\n", "# Validate", "\n", "valid_loss", ",", "valid_acc", "=", "test", "(", "args", ",", "model", ",", "device", ",", "xvalid", ",", "yvalid", ",", "criterion", ",", "k", ")", "\n", "acc_list", ".", "append", "(", "valid_acc", ")", "\n", "print_log", "(", "' Valid: loss={:.3f}, acc={:5.1f}% |'", ".", "format", "(", "valid_loss", ",", "valid_acc", ")", ",", "log", ")", "\n", "# Adapt lr", "\n", "if", "valid_loss", "<", "best_loss", ":", "\n", "                    ", "best_loss", "=", "valid_loss", "\n", "best_model", "=", "get_model", "(", "model", ")", "\n", "patience", "=", "args", ".", "lr_patience", "\n", "print_log", "(", "' *'", ",", "log", ")", "\n", "", "else", ":", "\n", "                    ", "patience", "-=", "1", "\n", "if", "patience", "<=", "0", ":", "\n", "                        ", "lr", "/=", "args", ".", "lr_factor", "\n", "print_log", "(", "' lr={:.1e}'", ".", "format", "(", "lr", ")", ",", "log", ")", "\n", "if", "lr", "<", "args", ".", "lr_min", ":", "\n", "                            ", "print_log", "(", "\"\"", ",", "log", ")", "\n", "break", "\n", "", "patience", "=", "args", ".", "lr_patience", "\n", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "args", ")", "\n", "", "", "print_log", "(", "\"\"", ",", "log", ")", "\n", "", "print", "(", "acc_list", ")", "\n", "acc_list_all", ".", "append", "(", "acc_list", ")", "\n", "set_model_", "(", "model", ",", "best_model", ")", "\n", "# Test", "\n", "print_log", "(", "'-'", "*", "40", ",", "log", ")", "\n", "test_loss", ",", "test_acc", "=", "test", "(", "args", ",", "model", ",", "device", ",", "xtest", ",", "ytest", ",", "criterion", ",", "k", ")", "\n", "print_log", "(", "'Test: loss={:.3f} , acc={:5.1f}%'", ".", "format", "(", "test_loss", ",", "test_acc", ")", ",", "log", ")", "\n", "# Memory Update  ", "\n", "mat_list", ",", "grad_list", "=", "get_representation_and_gradient", "(", "model", ",", "device", ",", "optimizer", ",", "criterion", ",", "k", ",", "xtrain", ",", "ytrain", ")", "\n", "space_list_all", "=", "get_space_and_grad", "(", "model", ",", "mat_list", ",", "grad_list", ",", "threshold", ",", "memory", ",", "task_name", ",", "task_name_list", ",", "task_id", ",", "space_list_all", ")", "\n", "\n", "", "else", ":", "\n", "            ", "memory", "[", "task_name", "]", "=", "{", "}", "\n", "\n", "kk", "=", "0", "\n", "print_log", "(", "\"reinit the scale for each task\"", ",", "log", ")", "\n", "for", "k_t", ",", "(", "m", ",", "params", ")", "in", "enumerate", "(", "model", ".", "named_parameters", "(", ")", ")", ":", "\n", "# create the saved memory", "\n", "                ", "if", "'weight'", "in", "m", "and", "'bn'", "not", "in", "m", ":", "\n", "\n", "                    ", "memory", "[", "task_name", "]", "[", "str", "(", "kk", ")", "]", "=", "{", "\n", "'space_list'", ":", "{", "}", ",", "\n", "'grad_list'", ":", "{", "}", ",", "\n", "'space_mat_list'", ":", "{", "}", ",", "\n", "'scale1'", ":", "{", "}", ",", "\n", "'scale2'", ":", "{", "}", ",", "\n", "'regime'", ":", "{", "}", ",", "\n", "'selected_task'", ":", "{", "}", ",", "\n", "}", "\n", "kk", "+=", "1", "\n", "#reinitialize the scale", "\n", "", "if", "'scale'", "in", "m", ":", "\n", "                    ", "mask", "=", "torch", ".", "eye", "(", "params", ".", "size", "(", "0", ")", ",", "params", ".", "size", "(", "1", ")", ")", ".", "to", "(", "device", ")", "\n", "\n", "params", ".", "data", "=", "mask", "\n", "# print(\"-----------------\")", "\n", "", "", "normal_param", "=", "[", "\n", "param", "for", "name", ",", "param", "in", "model", ".", "named_parameters", "(", ")", "\n", "if", "not", "'scale'", "in", "name", "\n", "]", "\n", "\n", "scale_param", "=", "[", "\n", "param", "for", "name", ",", "param", "in", "model", ".", "named_parameters", "(", ")", "\n", "if", "'scale'", "in", "name", "\n", "]", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "[", "\n", "{", "'params'", ":", "normal_param", "}", ",", "\n", "{", "'params'", ":", "scale_param", ",", "'weight_decay'", ":", "0", ",", "'lr'", ":", "lr", "}", "\n", "]", ",", "\n", "lr", "=", "lr", "\n", ")", "\n", "\n", "feature_mat", "=", "[", "]", "\n", "# Projection Matrix Precomputation", "\n", "for", "i", "in", "range", "(", "len", "(", "space_list_all", ")", ")", ":", "\n", "                 ", "Uf", "=", "torch", ".", "Tensor", "(", "np", ".", "dot", "(", "space_list_all", "[", "i", "]", ",", "space_list_all", "[", "i", "]", ".", "transpose", "(", ")", ")", ")", ".", "to", "(", "device", ")", "\n", "print_log", "(", "'Layer {} - Projection Matrix shape: {}'", ".", "format", "(", "i", "+", "1", ",", "Uf", ".", "shape", ")", ",", "log", ")", "\n", "feature_mat", ".", "append", "(", "Uf", ")", "\n", "\n", "\n", "#==1 gradient projection condition", "\n", "", "print_log", "(", "'excute gradient projection condition'", ",", "log", ")", "\n", "grad_proj_cond", "(", "args", ",", "model", ",", "xtrain", ",", "ytrain", ",", "memory", ",", "task_name", ",", "task_id", ",", "task_name_list", ",", "device", ",", "optimizer", ",", "criterion", ")", "\n", "# select the regime 2, which need to learn scale", "\n", "space1", "=", "[", "None", "]", "*", "20", "\n", "space2", "=", "[", "None", "]", "*", "20", "\n", "for", "i", "in", "range", "(", "20", ")", ":", "\n", "                ", "for", "k", ",", "task_sel", "in", "enumerate", "(", "memory", "[", "task_name", "]", "[", "str", "(", "i", ")", "]", "[", "'selected_task'", "]", ")", ":", "\n", "                    ", "if", "memory", "[", "task_name", "]", "[", "str", "(", "i", ")", "]", "[", "'regime'", "]", "[", "task_sel", "]", "==", "'2'", "or", "memory", "[", "task_name", "]", "[", "str", "(", "i", ")", "]", "[", "'regime'", "]", "[", "task_sel", "]", "==", "'3'", ":", "\n", "                        ", "if", "k", "==", "0", ":", "\n", "# change the np array to torch tensor", "\n", "                            ", "space1", "[", "i", "]", "=", "torch", ".", "FloatTensor", "(", "memory", "[", "task_name_list", "[", "task_sel", "]", "]", "[", "str", "(", "i", ")", "]", "[", "'space_list'", "]", ")", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "\n", "                            ", "space2", "[", "i", "]", "=", "torch", ".", "FloatTensor", "(", "memory", "[", "task_name_list", "[", "task_sel", "]", "]", "[", "str", "(", "i", ")", "]", "[", "'space_list'", "]", ")", ".", "to", "(", "device", ")", "\n", "", "", "", "", "if", "space1", "[", "0", "]", "is", "not", "None", ":", "\n", "                ", "print_log", "(", "'space1 is not None!'", ",", "log", ")", "\n", "", "if", "space2", "[", "0", "]", "is", "not", "None", ":", "\n", "                ", "print_log", "(", "'space2 is not None!'", ",", "log", ")", "\n", "\n", "", "print_log", "(", "'-'", "*", "40", ",", "log", ")", "\n", "acc_list", "=", "[", "]", "\n", "for", "epoch", "in", "range", "(", "1", ",", "args", ".", "n_epochs", "+", "1", ")", ":", "\n", "# Train ", "\n", "\n", "                ", "clock0", "=", "time", ".", "time", "(", ")", "\n", "train_projected_regime", "(", "args", ",", "model", ",", "device", ",", "xtrain", ",", "ytrain", ",", "optimizer", ",", "criterion", ",", "memory", ",", "task_name", ",", "task_name_list", ",", "space_list_all", ",", "task_id", ",", "feature_mat", ",", "space1", "=", "space1", ",", "space2", "=", "space2", ")", "\n", "clock1", "=", "time", ".", "time", "(", ")", "\n", "tr_loss", ",", "tr_acc", "=", "test", "(", "args", ",", "model", ",", "device", ",", "xtrain", ",", "ytrain", ",", "criterion", ",", "task_id", ",", "space1", "=", "space1", ",", "space2", "=", "space2", ")", "\n", "print_log", "(", "'Epoch {:3d} | Train: loss={:.3f}, acc={:5.1f}% | time={:5.1f}ms |'", ".", "format", "(", "epoch", ",", "tr_loss", ",", "tr_acc", ",", "1000", "*", "(", "clock1", "-", "clock0", ")", ")", ",", "log", ")", "\n", "# Validate", "\n", "valid_loss", ",", "valid_acc", "=", "test", "(", "args", ",", "model", ",", "device", ",", "xvalid", ",", "yvalid", ",", "criterion", ",", "task_id", ",", "space1", "=", "space1", ",", "space2", "=", "space2", ")", "\n", "acc_list", ".", "append", "(", "valid_acc", ")", "\n", "\n", "print_log", "(", "' Valid: loss={:.3f}, acc={:5.1f}% |'", ".", "format", "(", "valid_loss", ",", "valid_acc", ")", ",", "log", ")", "\n", "# Adapt lr", "\n", "if", "valid_loss", "<", "best_loss", ":", "\n", "                    ", "best_loss", "=", "valid_loss", "\n", "best_model", "=", "get_model", "(", "model", ")", "\n", "patience", "=", "args", ".", "lr_patience", "\n", "print_log", "(", "' *'", ",", "log", ")", "\n", "", "else", ":", "\n", "                    ", "patience", "-=", "1", "\n", "if", "patience", "<=", "0", ":", "\n", "                        ", "lr", "/=", "args", ".", "lr_factor", "\n", "print_log", "(", "' lr={:.1e}'", ".", "format", "(", "lr", ")", ",", "log", ")", "\n", "if", "lr", "<", "args", ".", "lr_min", ":", "\n", "                            ", "print_log", "(", "\"\"", ",", "log", ")", "\n", "break", "\n", "", "patience", "=", "args", ".", "lr_patience", "\n", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "args", ")", "\n", "", "", "print_log", "(", "\"\"", ",", "log", ")", "\n", "", "print", "(", "acc_list", ")", "\n", "acc_list_all", ".", "append", "(", "acc_list", ")", "\n", "set_model_", "(", "model", ",", "best_model", ")", "\n", "print", "(", "epochs_back", ")", "\n", "# Test ", "\n", "test_acc_sum", "=", "0", "\n", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "                ", "test_loss", ",", "test_acc", "=", "test", "(", "args", ",", "model", ",", "device", ",", "xtest", ",", "ytest", ",", "criterion", ",", "task_id", ",", "space1", "=", "space1", ",", "space2", "=", "space2", ")", "\n", "print_log", "(", "'Test: loss={:.3f} , acc={:5.1f}%'", ".", "format", "(", "test_loss", ",", "test_acc", ")", ",", "log", ")", "\n", "test_acc_sum", "+=", "test_acc", "\n", "", "test_acc_sum", "=", "test_acc_sum", "/", "10.", "\n", "print_log", "(", "'Average acc={:5.1f}%'", ".", "format", "(", "test_acc_sum", ")", ",", "log", ")", "\n", "# Memory Update ", "\n", "mat_list", ",", "grad_list", "=", "get_representation_and_gradient", "(", "model", ",", "device", ",", "optimizer", ",", "criterion", ",", "task_id", ",", "xtrain", ",", "ytrain", ")", "\n", "space_list_all", "=", "get_space_and_grad", "(", "model", ",", "mat_list", ",", "grad_list", ",", "threshold", ",", "memory", ",", "task_name", ",", "task_name_list", ",", "task_id", ",", "space_list_all", ")", "\n", "# save the scale value to memory", "\n", "idx1", "=", "0", "\n", "idx2", "=", "0", "\n", "for", "m", ",", "params", "in", "model", ".", "named_parameters", "(", ")", ":", "# layer ", "\n", "                ", "if", "'scale1'", "in", "m", ":", "\n", "                    ", "memory", "[", "task_name", "]", "[", "str", "(", "idx1", ")", "]", "[", "'scale1'", "]", "=", "params", ".", "data", "\n", "idx1", "+=", "1", "\n", "", "if", "'scale2'", "in", "m", ":", "\n", "                    ", "memory", "[", "task_name", "]", "[", "str", "(", "idx2", ")", "]", "[", "'scale2'", "]", "=", "params", ".", "data", "\n", "idx2", "+=", "1", "\n", "\n", "# save accuracy ", "\n", "", "", "", "jj", "=", "0", "\n", "for", "ii", "in", "np", ".", "array", "(", "task_list", ")", "[", "0", ":", "task_id", "+", "1", "]", ":", "\n", "            ", "xtest", "=", "data", "[", "ii", "]", "[", "'test'", "]", "[", "'x'", "]", "\n", "ytest", "=", "data", "[", "ii", "]", "[", "'test'", "]", "[", "'y'", "]", "\n", "# select the regime 2, which need to learn scale", "\n", "space1", "=", "[", "None", "]", "*", "20", "\n", "space2", "=", "[", "None", "]", "*", "20", "\n", "task_test", "=", "data", "[", "ii", "]", "[", "'name'", "]", "\n", "print_log", "(", "'current testing task:{}'", ".", "format", "(", "task_test", ")", ",", "log", ")", "\n", "\n", "if", "ii", ">", "0", ":", "\n", "                ", "for", "i", "in", "range", "(", "20", ")", ":", "\n", "                    ", "for", "k", ",", "task_sel", "in", "enumerate", "(", "memory", "[", "task_test", "]", "[", "str", "(", "i", ")", "]", "[", "'selected_task'", "]", ")", ":", "\n", "# print(memory[task_name]['regime'][task_sel])", "\n", "                        ", "if", "memory", "[", "task_test", "]", "[", "str", "(", "i", ")", "]", "[", "'regime'", "]", "[", "task_sel", "]", "==", "'2'", "or", "memory", "[", "task_name", "]", "[", "str", "(", "i", ")", "]", "[", "'regime'", "]", "[", "task_sel", "]", "==", "'3'", ":", "\n", "                            ", "if", "k", "==", "0", ":", "\n", "\n", "                                ", "space1", "[", "i", "]", "=", "torch", ".", "FloatTensor", "(", "memory", "[", "task_name_list", "[", "task_sel", "]", "]", "[", "str", "(", "i", ")", "]", "[", "'space_list'", "]", ")", ".", "to", "(", "device", ")", "\n", "idx", "=", "0", "\n", "for", "m", ",", "params", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "                                    ", "if", "'scale1'", "in", "m", ":", "\n", "                                        ", "params", ".", "data", "=", "memory", "[", "task_test", "]", "[", "str", "(", "idx", ")", "]", "[", "'scale1'", "]", ".", "to", "(", "device", ")", "\n", "idx", "+=", "1", "\n", "", "", "", "else", ":", "\n", "\n", "                                ", "space2", "[", "i", "]", "=", "torch", ".", "FloatTensor", "(", "memory", "[", "task_name_list", "[", "task_sel", "]", "]", "[", "str", "(", "i", ")", "]", "[", "'space_list'", "]", ")", ".", "to", "(", "device", ")", "\n", "idx", "=", "0", "\n", "for", "m", ",", "params", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "                                    ", "if", "'scale2'", "in", "m", ":", "\n", "                                        ", "params", ".", "data", "=", "memory", "[", "task_test", "]", "[", "str", "(", "idx", ")", "]", "[", "'scale2'", "]", ".", "to", "(", "device", ")", "\n", "idx", "+=", "1", "\n", "\n", "", "", "", "", "", "", "", "test_acc_sum", "=", "0", "\n", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "                ", "test_loss", ",", "test_acc", "=", "test", "(", "args", ",", "model", ",", "device", ",", "xtest", ",", "ytest", ",", "criterion", ",", "ii", ",", "space1", "=", "space1", ",", "space2", "=", "space2", ")", "\n", "print_log", "(", "'Test: loss={:.3f} , acc={:5.1f}%'", ".", "format", "(", "test_loss", ",", "test_acc", ")", ",", "log", ")", "\n", "test_acc_sum", "+=", "test_acc", "\n", "", "acc_matrix", "[", "task_id", ",", "jj", "]", "=", "test_acc_sum", "/", "5.", "\n", "#_, acc_matrix[task_id,jj] = test(args, model, device, xtest, ytest,criterion,ii, space1=space1, space2=space2) ", "\n", "jj", "+=", "1", "\n", "", "print_log", "(", "'Accuracies ='", ",", "log", ")", "\n", "for", "i_a", "in", "range", "(", "task_id", "+", "1", ")", ":", "\n", "            ", "print_log", "(", "'\\t'", ",", "log", ")", "\n", "for", "j_a", "in", "range", "(", "acc_matrix", ".", "shape", "[", "1", "]", ")", ":", "\n", "                ", "print_log", "(", "'{:5.1f}% '", ".", "format", "(", "acc_matrix", "[", "i_a", ",", "j_a", "]", ")", ",", "log", ",", "end", "=", "''", ")", "\n", "", "print_log", "(", "\"\"", ",", "log", ")", "\n", "# update task id ", "\n", "", "task_id", "+=", "1", "\n", "save_model", "(", "model", ",", "memory", ",", "args", ".", "savename", ")", "\n", "", "np", ".", "save", "(", "'five_ours.npy'", ",", "acc_list_all", ")", "\n", "print_log", "(", "'-'", "*", "50", ",", "log", ")", "\n", "# Simulation Results ", "\n", "print_log", "(", "'Task Order : {}'", ".", "format", "(", "np", ".", "array", "(", "task_list", ")", ")", ",", "log", ")", "\n", "print_log", "(", "'Final Avg Accuracy: {:5.2f}%'", ".", "format", "(", "acc_matrix", "[", "-", "1", "]", ".", "mean", "(", ")", ")", ",", "log", ")", "\n", "bwt", "=", "np", ".", "mean", "(", "(", "acc_matrix", "[", "-", "1", "]", "-", "np", ".", "diag", "(", "acc_matrix", ")", ")", "[", ":", "-", "1", "]", ")", "\n", "print_log", "(", "'Backward transfer: {:5.2f}%'", ".", "format", "(", "bwt", ")", ",", "log", ")", "\n", "print_log", "(", "'[Elapsed time = {:.1f} ms]'", ".", "format", "(", "(", "time", ".", "time", "(", ")", "-", "tstart", ")", "*", "1000", ")", ",", "log", ")", "\n", "print_log", "(", "'-'", "*", "50", ",", "log", ")", "\n", "# Plots", "\n", "array", "=", "acc_matrix", "\n", "df_cm", "=", "pd", ".", "DataFrame", "(", "array", ",", "index", "=", "[", "i", "for", "i", "in", "[", "\"1\"", ",", "\"2\"", ",", "\"3\"", ",", "\"4\"", ",", "\"5\"", ",", "\"6\"", ",", "\"7\"", ",", "\"8\"", ",", "\"9\"", ",", "\"10\"", ",", "\"11\"", ",", "\"12\"", ",", "\"13\"", ",", "\"14\"", ",", "\"15\"", ",", "\"16\"", ",", "\"17\"", ",", "\"18\"", ",", "\"19\"", ",", "\"20\"", "]", "]", ",", "\n", "columns", "=", "[", "i", "for", "i", "in", "[", "\"1\"", ",", "\"2\"", ",", "\"3\"", ",", "\"4\"", ",", "\"5\"", ",", "\"6\"", ",", "\"7\"", ",", "\"8\"", ",", "\"9\"", ",", "\"10\"", ",", "\"11\"", ",", "\"12\"", ",", "\"13\"", ",", "\"14\"", ",", "\"15\"", ",", "\"16\"", ",", "\"17\"", ",", "\"18\"", ",", "\"19\"", ",", "\"20\"", "]", "]", ")", "\n", "sn", ".", "set", "(", "font_scale", "=", "1.4", ")", "\n", "sn", ".", "heatmap", "(", "df_cm", ",", "annot", "=", "True", ",", "annot_kws", "=", "{", "\"size\"", ":", "10", "}", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_mini_dataset.print_log": [[859, 866], ["log.write", "log.flush", "print", "print"], "function", ["None"], ["", "def", "print_log", "(", "print_string", ",", "log", ",", "end", "=", "None", ")", ":", "\n", "    ", "if", "end", "is", "not", "None", ":", "\n", "        ", "print", "(", "\"{}\"", ".", "format", "(", "print_string", ")", ",", "end", "=", "''", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"{}\"", ".", "format", "(", "print_string", ")", ")", "\n", "", "log", ".", "write", "(", "'{}\\n'", ".", "format", "(", "print_string", ")", ")", "\n", "log", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.LeNet.__init__": [[29, 66], ["torch.Module.__init__", "collections.OrderedDict", "main_cifar100_sup.LeNet.map.append", "layers.Conv2d", "main_cifar100_sup.compute_conv_output_size", "main_cifar100_sup.compute_conv_output_size", "main_cifar100_sup.LeNet.ksize.append", "main_cifar100_sup.LeNet.in_channel.append", "main_cifar100_sup.LeNet.map.append", "layers.Conv2d", "main_cifar100_sup.compute_conv_output_size", "main_cifar100_sup.compute_conv_output_size", "main_cifar100_sup.LeNet.ksize.append", "main_cifar100_sup.LeNet.in_channel.append", "main_cifar100_sup.LeNet.map.append", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.LocalResponseNorm", "torch.nn.LocalResponseNorm", "torch.nn.LocalResponseNorm", "torch.nn.LocalResponseNorm", "torch.nn.LocalResponseNorm", "torch.nn.LocalResponseNorm", "torch.nn.LocalResponseNorm", "torch.nn.LocalResponseNorm", "torch.nn.LocalResponseNorm", "torch.nn.LocalResponseNorm", "torch.nn.LocalResponseNorm", "torch.nn.LocalResponseNorm", "torch.nn.LocalResponseNorm", "torch.nn.LocalResponseNorm", "torch.nn.LocalResponseNorm", "torch.nn.LocalResponseNorm", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "main_cifar100_sup.LeNet.map.extend", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "main_cifar100_sup.LeNet.fc3.append", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.LYang-666_TRGP.dataloader.miniimagenet.DatasetGen.__init__", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.utilis.compute_conv_output_size", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.utilis.compute_conv_output_size", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.utilis.compute_conv_output_size", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.utilis.compute_conv_output_size"], ["    ", "def", "__init__", "(", "self", ",", "taskcla", ")", ":", "\n", "        ", "super", "(", "LeNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "act", "=", "OrderedDict", "(", ")", "\n", "self", ".", "map", "=", "[", "]", "\n", "self", ".", "ksize", "=", "[", "]", "\n", "self", ".", "in_channel", "=", "[", "]", "\n", "\n", "self", ".", "map", ".", "append", "(", "32", ")", "\n", "self", ".", "conv1", "=", "Conv2d", "(", "3", ",", "20", ",", "5", ",", "bias", "=", "False", ",", "padding", "=", "2", ")", "\n", "\n", "s", "=", "compute_conv_output_size", "(", "32", ",", "5", ",", "1", ",", "2", ")", "\n", "s", "=", "compute_conv_output_size", "(", "s", ",", "3", ",", "2", ",", "1", ")", "\n", "self", ".", "ksize", ".", "append", "(", "5", ")", "\n", "self", ".", "in_channel", ".", "append", "(", "3", ")", "\n", "self", ".", "map", ".", "append", "(", "s", ")", "\n", "self", ".", "conv2", "=", "Conv2d", "(", "20", ",", "50", ",", "5", ",", "bias", "=", "False", ",", "padding", "=", "2", ")", "\n", "\n", "s", "=", "compute_conv_output_size", "(", "s", ",", "5", ",", "1", ",", "2", ")", "\n", "s", "=", "compute_conv_output_size", "(", "s", ",", "3", ",", "2", ",", "1", ")", "\n", "self", ".", "ksize", ".", "append", "(", "5", ")", "\n", "self", ".", "in_channel", ".", "append", "(", "20", ")", "\n", "self", ".", "smid", "=", "s", "\n", "self", ".", "map", ".", "append", "(", "50", "*", "self", ".", "smid", "*", "self", ".", "smid", ")", "\n", "self", ".", "maxpool", "=", "torch", ".", "nn", ".", "MaxPool2d", "(", "3", ",", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "relu", "=", "torch", ".", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "drop1", "=", "torch", ".", "nn", ".", "Dropout", "(", "0", ")", "\n", "self", ".", "drop2", "=", "torch", ".", "nn", ".", "Dropout", "(", "0", ")", "\n", "self", ".", "lrn", "=", "torch", ".", "nn", ".", "LocalResponseNorm", "(", "4", ",", "0.001", "/", "9.0", ",", "0.75", ",", "1", ")", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "50", "*", "self", ".", "smid", "*", "self", ".", "smid", ",", "800", ",", "bias", "=", "False", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "800", ",", "500", ",", "bias", "=", "False", ")", "\n", "self", ".", "map", ".", "extend", "(", "[", "800", "]", ")", "\n", "\n", "self", ".", "taskcla", "=", "taskcla", "\n", "self", ".", "fc3", "=", "torch", ".", "nn", ".", "ModuleList", "(", ")", "\n", "for", "t", ",", "n", "in", "self", ".", "taskcla", ":", "\n", "            ", "self", ".", "fc3", ".", "append", "(", "torch", ".", "nn", ".", "Linear", "(", "500", ",", "n", ",", "bias", "=", "False", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.LeNet.forward": [[67, 113], ["copy.deepcopy", "main_cifar100_sup.LeNet.size", "main_cifar100_sup.LeNet.conv1", "main_cifar100_sup.LeNet.maxpool", "main_cifar100_sup.LeNet.conv2", "main_cifar100_sup.LeNet.maxpool", "main_cifar100_sup.LeNet.reshape", "main_cifar100_sup.LeNet.fc1", "main_cifar100_sup.LeNet.drop2", "main_cifar100_sup.LeNet.fc2", "main_cifar100_sup.LeNet.drop2", "main_cifar100_sup.LeNet.conv1", "main_cifar100_sup.LeNet.maxpool", "main_cifar100_sup.LeNet.conv2", "main_cifar100_sup.LeNet.maxpool", "main_cifar100_sup.LeNet.reshape", "main_cifar100_sup.LeNet.fc1", "main_cifar100_sup.LeNet.drop2", "main_cifar100_sup.LeNet.fc2", "main_cifar100_sup.LeNet.drop2", "main_cifar100_sup.LeNet.drop1", "main_cifar100_sup.LeNet.drop1", "main_cifar100_sup.LeNet.relu", "main_cifar100_sup.LeNet.relu", "y.append", "main_cifar100_sup.LeNet.drop1", "main_cifar100_sup.LeNet.drop1", "main_cifar100_sup.LeNet.relu", "main_cifar100_sup.LeNet.relu", "y.append", "main_cifar100_sup.LeNet.lrn", "main_cifar100_sup.LeNet.lrn", "main_cifar100_sup.LeNet.lrn", "main_cifar100_sup.LeNet.lrn", "main_cifar100_sup.LeNet.relu", "main_cifar100_sup.LeNet.relu", "main_cifar100_sup.LeNet.relu", "main_cifar100_sup.LeNet.relu"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "space1", "=", "[", "None", ",", "None", ",", "None", ",", "None", "]", ",", "space2", "=", "[", "None", ",", "None", ",", "None", ",", "None", "]", ")", ":", "\n", "        ", "bsz", "=", "deepcopy", "(", "x", ".", "size", "(", "0", ")", ")", "\n", "if", "space1", "[", "0", "]", "is", "not", "None", "or", "space2", "[", "0", "]", "is", "not", "None", ":", "\n", "            ", "self", ".", "act", "[", "'conv1'", "]", "=", "x", "\n", "x", "=", "self", ".", "conv1", "(", "x", ",", "space1", "=", "space1", "[", "0", "]", ",", "space2", "=", "space2", "[", "0", "]", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "self", ".", "drop1", "(", "self", ".", "lrn", "(", "self", ".", "relu", "(", "x", ")", ")", ")", ")", "\n", "\n", "self", ".", "act", "[", "'conv2'", "]", "=", "x", "\n", "x", "=", "self", ".", "conv2", "(", "x", ",", "space1", "=", "space1", "[", "1", "]", ",", "space2", "=", "space2", "[", "1", "]", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "self", ".", "drop1", "(", "self", ".", "lrn", "(", "self", ".", "relu", "(", "x", ")", ")", ")", ")", "\n", "\n", "x", "=", "x", ".", "reshape", "(", "bsz", ",", "-", "1", ")", "\n", "self", ".", "act", "[", "'fc1'", "]", "=", "x", "\n", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "self", ".", "drop2", "(", "self", ".", "relu", "(", "x", ")", ")", "\n", "\n", "self", ".", "act", "[", "'fc2'", "]", "=", "x", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "x", "=", "self", ".", "drop2", "(", "self", ".", "relu", "(", "x", ")", ")", "\n", "\n", "y", "=", "[", "]", "\n", "for", "t", ",", "i", "in", "self", ".", "taskcla", ":", "\n", "                ", "y", ".", "append", "(", "self", ".", "fc3", "[", "t", "]", "(", "x", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "act", "[", "'conv1'", "]", "=", "x", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "self", ".", "drop1", "(", "self", ".", "lrn", "(", "self", ".", "relu", "(", "x", ")", ")", ")", ")", "\n", "\n", "self", ".", "act", "[", "'conv2'", "]", "=", "x", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "self", ".", "drop1", "(", "self", ".", "lrn", "(", "self", ".", "relu", "(", "x", ")", ")", ")", ")", "\n", "\n", "x", "=", "x", ".", "reshape", "(", "bsz", ",", "-", "1", ")", "\n", "self", ".", "act", "[", "'fc1'", "]", "=", "x", "\n", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "self", ".", "drop2", "(", "self", ".", "relu", "(", "x", ")", ")", "\n", "\n", "self", ".", "act", "[", "'fc2'", "]", "=", "x", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "x", "=", "self", ".", "drop2", "(", "self", ".", "relu", "(", "x", ")", ")", "\n", "\n", "y", "=", "[", "]", "\n", "for", "t", ",", "i", "in", "self", ".", "taskcla", ":", "\n", "                ", "y", ".", "append", "(", "self", ".", "fc3", "[", "t", "]", "(", "x", ")", ")", "\n", "\n", "", "", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.compute_conv_output_size": [[25, 27], ["int", "numpy.floor", "float"], "function", ["None"], ["def", "compute_conv_output_size", "(", "Lin", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ")", ":", "\n", "    ", "return", "int", "(", "np", ".", "floor", "(", "(", "Lin", "+", "2", "*", "padding", "-", "dilation", "*", "(", "kernel_size", "-", "1", ")", "-", "1", ")", "/", "float", "(", "stride", ")", "+", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.init_weights": [[114, 121], ["isinstance", "isinstance", "isinstance", "print", "torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_uniform_"], "function", ["None"], ["", "", "def", "init_weights", "(", "m", ")", ":", "\n", "# print(m)", "\n", "    ", "if", "isinstance", "(", "m", ",", "Linear", ")", "or", "isinstance", "(", "m", ",", "Conv2d", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "# if type(m) == Linear or type(m) == Conv2d:", "\n", "        ", "print", "(", "m", ")", "\n", "# torch.nn.init.xavier_uniform(m.weight)", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_in'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.get_model": [[122, 124], ["copy.deepcopy", "model.state_dict"], "function", ["None"], ["", "", "def", "get_model", "(", "model", ")", ":", "\n", "    ", "return", "deepcopy", "(", "model", ".", "state_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.set_model_": [[125, 128], ["model.load_state_dict", "copy.deepcopy"], "function", ["None"], ["", "def", "set_model_", "(", "model", ",", "state_dict", ")", ":", "\n", "    ", "model", ".", "load_state_dict", "(", "deepcopy", "(", "state_dict", ")", ")", "\n", "return", "\n", "", "def", "save_model", "(", "model", ",", "memory", ",", "savename", ")", ":", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.save_model": [[128, 138], ["torch.save", "torch.save", "torch.save", "torch.save", "print", "model.state_dict"], "function", ["None"], ["", "def", "save_model", "(", "model", ",", "memory", ",", "savename", ")", ":", "\n", "    ", "ckpt", "=", "{", "\n", "'model'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'memory'", ":", "memory", ",", "\n", "}", "\n", "\n", "# Save to file.", "\n", "torch", ".", "save", "(", "ckpt", ",", "savename", "+", "'checkpoint.pt'", ")", "\n", "print", "(", "savename", ")", "\n", "return", "\n", "", "def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "args", ")", ":", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.adjust_learning_rate": [[138, 144], ["None"], "function", ["None"], ["", "def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "args", ")", ":", "\n", "    ", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "if", "(", "epoch", "==", "1", ")", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "args", ".", "lr", "\n", "", "else", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "/=", "args", ".", "lr_factor", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.train": [[145, 161], ["model.train", "numpy.arange", "numpy.random.shuffle", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "range", "x.size", "len", "optimizer.zero_grad", "model", "criterion", "criterion.backward", "optimizer.step", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "len", "data.to", "y[].to"], "function", ["home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.train"], ["", "", "", "def", "train", "(", "args", ",", "model", ",", "device", ",", "x", ",", "y", ",", "optimizer", ",", "criterion", ",", "task_id", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "r", "=", "np", ".", "arange", "(", "x", ".", "size", "(", "0", ")", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "r", ")", "\n", "r", "=", "torch", ".", "LongTensor", "(", "r", ")", ".", "to", "(", "device", ")", "\n", "# Loop batches", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "r", ")", ",", "args", ".", "batch_size_train", ")", ":", "\n", "        ", "if", "i", "+", "args", ".", "batch_size_train", "<=", "len", "(", "r", ")", ":", "b", "=", "r", "[", "i", ":", "i", "+", "args", ".", "batch_size_train", "]", "\n", "else", ":", "b", "=", "r", "[", "i", ":", "]", "\n", "data", "=", "x", "[", "b", "]", "\n", "data", ",", "target", "=", "data", ".", "to", "(", "device", ")", ",", "y", "[", "b", "]", ".", "to", "(", "device", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "loss", "=", "criterion", "(", "output", "[", "task_id", "]", ",", "target", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.train_projected_regime": [[162, 192], ["model.train", "numpy.arange", "numpy.random.shuffle", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "range", "x.size", "len", "optimizer.zero_grad", "model", "criterion", "criterion.backward", "enumerate", "optimizer.step", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "len", "data.to", "y[].to", "model.named_parameters", "params.grad.data.size", "len", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "params.grad.data.fill_", "params.size", "params.size", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "len", "params.grad.data.view", "params.size"], "function", ["home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.train"], ["", "", "def", "train_projected_regime", "(", "args", ",", "model", ",", "device", ",", "x", ",", "y", ",", "optimizer", ",", "criterion", ",", "memory", ",", "task_name", ",", "task_name_list", ",", "space_list_all", ",", "task_id", ",", "feature_mat", ",", "space1", "=", "[", "None", ",", "None", ",", "None", "]", ",", "space2", "=", "[", "None", ",", "None", ",", "None", "]", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "r", "=", "np", ".", "arange", "(", "x", ".", "size", "(", "0", ")", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "r", ")", "\n", "r", "=", "torch", ".", "LongTensor", "(", "r", ")", ".", "to", "(", "device", ")", "\n", "# Loop batches", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "r", ")", ",", "args", ".", "batch_size_train", ")", ":", "\n", "        ", "if", "i", "+", "args", ".", "batch_size_train", "<=", "len", "(", "r", ")", ":", "b", "=", "r", "[", "i", ":", "i", "+", "args", ".", "batch_size_train", "]", "\n", "else", ":", "b", "=", "r", "[", "i", ":", "]", "\n", "data", "=", "x", "[", "b", "]", "\n", "data", ",", "target", "=", "data", ".", "to", "(", "device", ")", ",", "y", "[", "b", "]", ".", "to", "(", "device", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "output", "=", "model", "(", "data", ",", "space1", "=", "space1", ",", "space2", "=", "space2", ")", "\n", "loss", "=", "criterion", "(", "output", "[", "task_id", "]", ",", "target", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "kk", "=", "0", "\n", "for", "k", ",", "(", "m", ",", "params", ")", "in", "enumerate", "(", "model", ".", "named_parameters", "(", ")", ")", ":", "\n", "\n", "            ", "if", "'weight'", "in", "m", ":", "\n", "                ", "if", "k", "<", "8", "and", "len", "(", "params", ".", "size", "(", ")", ")", "!=", "1", ":", "\n", "                    ", "sz", "=", "params", ".", "grad", ".", "data", ".", "size", "(", "0", ")", "\n", "params", ".", "grad", ".", "data", "=", "params", ".", "grad", ".", "data", "-", "torch", ".", "mm", "(", "params", ".", "grad", ".", "data", ".", "view", "(", "sz", ",", "-", "1", ")", ",", "feature_mat", "[", "kk", "]", ")", ".", "view", "(", "params", ".", "size", "(", ")", ")", "\n", "kk", "+=", "1", "\n", "", "elif", "(", "k", "<", "8", "and", "len", "(", "params", ".", "size", "(", ")", ")", "==", "1", ")", "and", "task_id", "!=", "0", ":", "\n", "                    ", "params", ".", "grad", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n", "\n", "", "", "", "optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.test": [[195, 221], ["model.eval", "numpy.arange", "numpy.random.shuffle", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "x.size", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "range", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "len", "model", "criterion", "output[].argmax", "output[].argmax.eq().sum().item", "len", "len", "data.to", "y[].to", "criterion.data.cpu().numpy().item", "len", "output[].argmax.eq().sum", "criterion.data.cpu().numpy", "output[].argmax.eq", "target.view_as", "criterion.data.cpu"], "function", ["None"], ["", "", "def", "test", "(", "args", ",", "model", ",", "device", ",", "x", ",", "y", ",", "criterion", ",", "task_id", ",", "space1", "=", "[", "None", ",", "None", ",", "None", "]", ",", "space2", "=", "[", "None", ",", "None", ",", "None", "]", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "total_loss", "=", "0", "\n", "total_num", "=", "0", "\n", "correct", "=", "0", "\n", "r", "=", "np", ".", "arange", "(", "x", ".", "size", "(", "0", ")", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "r", ")", "\n", "r", "=", "torch", ".", "LongTensor", "(", "r", ")", ".", "to", "(", "device", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# Loop batches", "\n", "        ", "for", "i", "in", "range", "(", "0", ",", "len", "(", "r", ")", ",", "args", ".", "batch_size_test", ")", ":", "\n", "            ", "if", "i", "+", "args", ".", "batch_size_test", "<=", "len", "(", "r", ")", ":", "b", "=", "r", "[", "i", ":", "i", "+", "args", ".", "batch_size_test", "]", "\n", "else", ":", "b", "=", "r", "[", "i", ":", "]", "\n", "data", "=", "x", "[", "b", "]", "\n", "data", ",", "target", "=", "data", ".", "to", "(", "device", ")", ",", "y", "[", "b", "]", ".", "to", "(", "device", ")", "\n", "output", "=", "model", "(", "data", ",", "space1", "=", "space1", ",", "space2", "=", "space2", ")", "\n", "loss", "=", "criterion", "(", "output", "[", "task_id", "]", ",", "target", ")", "\n", "pred", "=", "output", "[", "task_id", "]", ".", "argmax", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "correct", "+=", "pred", ".", "eq", "(", "target", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "total_loss", "+=", "loss", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "item", "(", ")", "*", "len", "(", "b", ")", "\n", "total_num", "+=", "len", "(", "b", ")", "\n", "\n", "", "", "acc", "=", "100.", "*", "correct", "/", "total_num", "\n", "final_loss", "=", "total_loss", "/", "total_num", "\n", "return", "final_loss", ",", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.get_representation_and_gradient": [[222, 272], ["numpy.arange", "numpy.random.shuffle", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "net", "list", "net.eval", "net", "range", "main_cifar100_sup.print_log", "main_cifar100_sup.print_log", "main_cifar100_sup.print_log", "range", "main_cifar100_sup.print_log", "x.size", "example_data.to", "y[].to", "net.act.keys", "len", "len", "main_cifar100_sup.print_log", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "main_cifar100_sup.compute_conv_output_size", "numpy.zeros", "torch.pad().detach().cpu().numpy", "range", "mat_list.append", "net.act[].detach().cpu().numpy", "act[].transpose", "mat_list.append", "range", "torch.pad().detach().cpu", "range", "net.act[].detach().cpu", "act[].reshape", "torch.pad().detach", "net.act[].detach", "torch.pad"], "function", ["home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.utilis.compute_conv_output_size"], ["", "def", "get_representation_and_gradient", "(", "net", ",", "device", ",", "optimizer", ",", "criterion", ",", "task_id", ",", "x", ",", "y", "=", "None", ")", ":", "\n", "# Collect activations by forward pass", "\n", "    ", "steps", "=", "1", "\n", "r", "=", "np", ".", "arange", "(", "x", ".", "size", "(", "0", ")", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "r", ")", "\n", "r", "=", "torch", ".", "LongTensor", "(", "r", ")", ".", "to", "(", "device", ")", "\n", "b", "=", "r", "[", "0", ":", "125", "]", "# Take 125 random samples ", "\n", "example_data", "=", "x", "[", "b", "]", "\n", "example_data", ",", "target", "=", "example_data", ".", "to", "(", "device", ")", ",", "y", "[", "b", "]", ".", "to", "(", "device", ")", "\n", "example_out", "=", "net", "(", "example_data", ")", "\n", "\n", "batch_list", "=", "[", "2", "*", "12", ",", "100", ",", "125", ",", "125", "]", "\n", "pad", "=", "2", "\n", "p1d", "=", "(", "2", ",", "2", ",", "2", ",", "2", ")", "\n", "mat_list", "=", "[", "]", "\n", "act_key", "=", "list", "(", "net", ".", "act", ".", "keys", "(", ")", ")", "\n", "grad_list", "=", "[", "]", "# list contains gradient of each layer", "\n", "\n", "net", ".", "eval", "(", ")", "\n", "example_out", "=", "net", "(", "example_data", ")", "\n", "\n", "# pdb.set_trace()", "\n", "for", "i", "in", "range", "(", "len", "(", "net", ".", "map", ")", ")", ":", "\n", "        ", "bsz", "=", "batch_list", "[", "i", "]", "\n", "k", "=", "0", "\n", "if", "i", "<", "2", ":", "\n", "            ", "ksz", "=", "net", ".", "ksize", "[", "i", "]", "\n", "s", "=", "compute_conv_output_size", "(", "net", ".", "map", "[", "i", "]", ",", "net", ".", "ksize", "[", "i", "]", ",", "1", ",", "pad", ")", "\n", "mat", "=", "np", ".", "zeros", "(", "(", "net", ".", "ksize", "[", "i", "]", "*", "net", ".", "ksize", "[", "i", "]", "*", "net", ".", "in_channel", "[", "i", "]", ",", "s", "*", "s", "*", "bsz", ")", ")", "\n", "act", "=", "F", ".", "pad", "(", "net", ".", "act", "[", "act_key", "[", "i", "]", "]", ",", "p1d", ",", "\"constant\"", ",", "0", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "for", "kk", "in", "range", "(", "bsz", ")", ":", "\n", "                ", "for", "ii", "in", "range", "(", "s", ")", ":", "\n", "                    ", "for", "jj", "in", "range", "(", "s", ")", ":", "\n", "                        ", "mat", "[", ":", ",", "k", "]", "=", "act", "[", "kk", ",", ":", ",", "ii", ":", "ksz", "+", "ii", ",", "jj", ":", "ksz", "+", "jj", "]", ".", "reshape", "(", "-", "1", ")", "#?", "\n", "k", "+=", "1", "\n", "", "", "", "mat_list", ".", "append", "(", "mat", ")", "\n", "", "else", ":", "\n", "            ", "act", "=", "net", ".", "act", "[", "act_key", "[", "i", "]", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "activation", "=", "act", "[", "0", ":", "bsz", "]", ".", "transpose", "(", ")", "\n", "mat_list", ".", "append", "(", "activation", ")", "\n", "\n", "\n", "", "", "print_log", "(", "'-'", "*", "30", ",", "log", ")", "\n", "print_log", "(", "'Representation Matrix'", ",", "log", ")", "\n", "print_log", "(", "'-'", "*", "30", ",", "log", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "mat_list", ")", ")", ":", "\n", "        ", "print_log", "(", "'Layer {} : {}'", ".", "format", "(", "i", "+", "1", ",", "mat_list", "[", "i", "]", ".", "shape", ")", ",", "log", ")", "\n", "", "print_log", "(", "'-'", "*", "30", ",", "log", ")", "\n", "return", "mat_list", ",", "grad_list", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.get_space_and_grad": [[274, 421], ["main_cifar100_sup.print_log", "main_cifar100_sup.print_log", "main_cifar100_sup.print_log", "main_cifar100_sup.print_log", "range", "main_cifar100_sup.print_log", "range", "range", "main_cifar100_sup.print_log", "len", "numpy.linalg.svd", "numpy.sum", "space_list_all.append", "len", "main_cifar100_sup.print_log", "main_cifar100_sup.print_log", "numpy.dot", "range", "numpy.array", "numpy.linalg.svd", "numpy.dot", "numpy.linalg.svd", "numpy.hstack", "len", "range", "main_cifar100_sup.print_log", "main_cifar100_sup.print_log", "numpy.hstack", "main_cifar100_sup.print_log", "main_cifar100_sup.print_log", "main_cifar100_sup.print_log", "numpy.linalg.svd", "range", "numpy.linalg.svd", "range", "numpy.hstack", "main_cifar100_sup.print_log", "numpy.cumsum", "activation.transpose", "numpy.dot", "np.array.append", "numpy.dot", "numpy.argsort", "numpy.sort", "len", "len", "numpy.hstack", "numpy.array", "numpy.dot", "main_cifar100_sup.print_log", "str", "space_list_all[].transpose", "numpy.dot", "space_list_all[].transpose", "len", "numpy.dot", "space.transpose", "numpy.linalg.norm", "str", "space_list.transpose", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log"], ["", "def", "get_space_and_grad", "(", "model", ",", "mat_list", ",", "grad_list", ",", "threshold", ",", "memory", ",", "task_name", ",", "task_name_list", ",", "task_id", ",", "space_list_all", ")", ":", "\n", "    ", "print_log", "(", "'Threshold:{}'", ".", "format", "(", "threshold", ")", ",", "log", ")", "\n", "Ours", "=", "True", "\n", "if", "task_name", "==", "'cifar100-0'", ":", "\n", "# After First Task ", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "mat_list", ")", ")", ":", "\n", "            ", "activation", "=", "mat_list", "[", "i", "]", "\n", "# gradient = grad_list[i]", "\n", "\n", "U", ",", "S", ",", "Vh", "=", "np", ".", "linalg", ".", "svd", "(", "activation", ",", "full_matrices", "=", "False", ")", "\n", "# criteria (Eq-5)", "\n", "sval_total", "=", "(", "S", "**", "2", ")", ".", "sum", "(", ")", "\n", "sval_ratio", "=", "(", "S", "**", "2", ")", "/", "sval_total", "\n", "r", "=", "np", ".", "sum", "(", "np", ".", "cumsum", "(", "sval_ratio", ")", "<", "threshold", "[", "i", "]", ")", "#+1  ", "\n", "\n", "# save into memory", "\n", "memory", "[", "task_name", "]", "[", "str", "(", "i", ")", "]", "[", "'space_list'", "]", "=", "U", "[", ":", ",", "0", ":", "r", "]", "\n", "# memory[task_name][str(i)]['grad_list'] = gradient", "\n", "\n", "space_list_all", ".", "append", "(", "U", "[", ":", ",", "0", ":", "r", "]", ")", "\n", "\n", "", "", "else", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "mat_list", ")", ")", ":", "\n", "            ", "activation", "=", "mat_list", "[", "i", "]", "\n", "\n", "if", "Ours", ":", "\n", "#=1. calculate the projection using previous space", "\n", "                ", "print_log", "(", "'activation shape:{}'", ".", "format", "(", "activation", ".", "shape", ")", ",", "log", ")", "\n", "print_log", "(", "'space shape:{}'", ".", "format", "(", "space_list_all", "[", "i", "]", ".", "shape", ")", ",", "log", ")", "\n", "#delta = np.dot(np.dot(space_list_all[i],space_list_all[i].transpose()),activation)", "\n", "delta", "=", "[", "]", "\n", "R2", "=", "np", ".", "dot", "(", "activation", ",", "activation", ".", "transpose", "(", ")", ")", "\n", "for", "ki", "in", "range", "(", "space_list_all", "[", "i", "]", ".", "shape", "[", "1", "]", ")", ":", "\n", "                    ", "space", "=", "space_list_all", "[", "i", "]", ".", "transpose", "(", ")", "[", "ki", "]", "\n", "# print(space.shape)", "\n", "delta_i", "=", "np", ".", "dot", "(", "np", ".", "dot", "(", "space", ".", "transpose", "(", ")", ",", "R2", ")", ",", "space", ")", "\n", "# print(delta_i)", "\n", "delta", ".", "append", "(", "delta_i", ")", "\n", "", "delta", "=", "np", ".", "array", "(", "delta", ")", "\n", "\n", "#=2  following the GPM to get the sigma (S**2)", "\n", "U1", ",", "S1", ",", "Vh1", "=", "np", ".", "linalg", ".", "svd", "(", "activation", ",", "full_matrices", "=", "False", ")", "\n", "sval_total", "=", "(", "S1", "**", "2", ")", ".", "sum", "(", ")", "\n", "\n", "act_hat", "=", "activation", "\n", "\n", "act_hat", "-=", "np", ".", "dot", "(", "np", ".", "dot", "(", "space_list_all", "[", "i", "]", ",", "space_list_all", "[", "i", "]", ".", "transpose", "(", ")", ")", ",", "activation", ")", "\n", "U", ",", "S", ",", "Vh", "=", "np", ".", "linalg", ".", "svd", "(", "act_hat", ",", "full_matrices", "=", "False", ")", "\n", "sigma", "=", "S", "**", "2", "\n", "\n", "#=3 stack delta and sigma in a same list, then sort in descending order", "\n", "stack", "=", "np", ".", "hstack", "(", "(", "delta", ",", "sigma", ")", ")", "#[0,..30, 31..99]", "\n", "stack_index", "=", "np", ".", "argsort", "(", "stack", ")", "[", ":", ":", "-", "1", "]", "#[99, 0, 4,7...]", "\n", "#print('stack index:{}'.format(stack_index))", "\n", "stack", "=", "np", ".", "sort", "(", "stack", ")", "[", ":", ":", "-", "1", "]", "\n", "\n", "#=4 select the most import basis", "\n", "r_pre", "=", "len", "(", "delta", ")", "\n", "r", "=", "0", "\n", "accumulated_sval", "=", "0", "\n", "for", "ii", "in", "range", "(", "len", "(", "stack", ")", ")", ":", "\n", "                    ", "if", "accumulated_sval", "<", "threshold", "[", "i", "]", "*", "sval_total", ":", "\n", "                        ", "accumulated_sval", "+=", "stack", "[", "ii", "]", "\n", "r", "+=", "1", "\n", "if", "r", "==", "activation", ".", "shape", "[", "0", "]", ":", "\n", "                            ", "break", "\n", "", "", "else", ":", "\n", "                        ", "break", "\n", "# if r == 0:", "\n", "#     print ('Skip Updating GPM for layer: {}'.format(i+1)) ", "\n", "#     continue        ", "\n", "", "", "print_log", "(", "'threshold for selecting:{}'", ".", "format", "(", "np", ".", "linalg", ".", "norm", "(", "activation", ")", "**", "2", ")", ",", "log", ")", "\n", "print_log", "(", "\"total ranking r = {}\"", ".", "format", "(", "r", ")", ",", "log", ")", "\n", "\n", "#=5 save the corresponding space", "\n", "Ui", "=", "np", ".", "hstack", "(", "(", "space_list_all", "[", "i", "]", ",", "U", ")", ")", "\n", "sel_index", "=", "stack_index", "[", ":", "r", "]", "\n", "# this is the current space", "\n", "U_new", "=", "Ui", "[", ":", ",", "sel_index", "]", "\n", "# calculate how many space from current new task", "\n", "sel_index_from_U", "=", "sel_index", "[", "sel_index", ">", "r_pre", "]", "\n", "\n", "if", "len", "(", "sel_index_from_U", ")", ">", "0", ":", "\n", "# update the overall space without overlap", "\n", "                    ", "total_U", "=", "np", ".", "hstack", "(", "(", "space_list_all", "[", "i", "]", ",", "Ui", "[", ":", ",", "sel_index_from_U", "]", ")", ")", "\n", "space_list_all", "[", "i", "]", "=", "total_U", "\n", "", "else", ":", "\n", "                    ", "space_list_all", "[", "i", "]", "=", "np", ".", "array", "(", "space_list_all", "[", "i", "]", ")", "\n", "\n", "", "print_log", "(", "\"the number of space for current task:{}\"", ".", "format", "(", "r", ")", ",", "log", ")", "\n", "print_log", "(", "'the new increased space:{}, the threshold for new space:{}'", ".", "format", "(", "len", "(", "sel_index_from_U", ")", ",", "r_pre", ")", ",", "log", ")", "\n", "\n", "print_log", "(", "\"Ui shape:{}\"", ".", "format", "(", "Ui", "[", ":", ",", "sel_index", "]", ".", "shape", ")", ",", "log", ")", "\n", "memory", "[", "task_name", "]", "[", "str", "(", "i", ")", "]", "[", "'space_list'", "]", "=", "Ui", "[", ":", ",", "sel_index", "]", "\n", "\n", "", "else", ":", "\n", "                ", "U1", ",", "S1", ",", "Vh1", "=", "np", ".", "linalg", ".", "svd", "(", "activation", ",", "full_matrices", "=", "False", ")", "\n", "sval_total", "=", "(", "S1", "**", "2", ")", ".", "sum", "(", ")", "\n", "# Projected Representation (Eq-8)", "\n", "# Go through all the previous tasks", "\n", "act_hat", "=", "activation", "\n", "for", "task_index", "in", "range", "(", "task_id", ")", ":", "\n", "                    ", "space_list", "=", "memory", "[", "task_name_list", "[", "task_index", "]", "]", "[", "str", "(", "i", ")", "]", "[", "'space_list'", "]", "\n", "act_hat", "-=", "np", ".", "dot", "(", "np", ".", "dot", "(", "space_list", ",", "space_list", ".", "transpose", "(", ")", ")", ",", "activation", ")", "\n", "\n", "", "U", ",", "S", ",", "Vh", "=", "np", ".", "linalg", ".", "svd", "(", "act_hat", ",", "full_matrices", "=", "False", ")", "\n", "\n", "\n", "#update GPM", "\n", "# criteria (Eq-9)", "\n", "sval_hat", "=", "(", "S", "**", "2", ")", ".", "sum", "(", ")", "\n", "sval_ratio", "=", "(", "S", "**", "2", ")", "/", "sval_total", "\n", "accumulated_sval", "=", "(", "sval_total", "-", "sval_hat", ")", "/", "sval_total", "\n", "\n", "r", "=", "0", "\n", "for", "ii", "in", "range", "(", "sval_ratio", ".", "shape", "[", "0", "]", ")", ":", "\n", "                    ", "if", "accumulated_sval", "<", "threshold", "[", "i", "]", ":", "\n", "                        ", "accumulated_sval", "+=", "sval_ratio", "[", "ii", "]", "\n", "r", "+=", "1", "\n", "", "else", ":", "\n", "                        ", "break", "\n", "", "", "if", "r", "==", "0", ":", "\n", "                    ", "print_log", "(", "'Skip Updating GPM for layer: {}'", ".", "format", "(", "i", "+", "1", ")", ",", "log", ")", "\n", "\n", "\n", "\n", "", "Ui", "=", "np", ".", "hstack", "(", "(", "space_list_all", "[", "i", "]", ",", "U", "[", ":", ",", "0", ":", "r", "]", ")", ")", "\n", "print_log", "(", "'Ui shape:{}'", ".", "format", "(", "Ui", ".", "shape", ")", ",", "log", ")", "\n", "if", "Ui", ".", "shape", "[", "1", "]", ">", "Ui", ".", "shape", "[", "0", "]", ":", "\n", "                    ", "space_list_all", "[", "i", "]", "=", "Ui", "[", ":", ",", "0", ":", "Ui", ".", "shape", "[", "0", "]", "]", "\n", "", "else", ":", "\n", "                    ", "space_list_all", "[", "i", "]", "=", "Ui", "\n", "", "if", "r", "==", "0", ":", "\n", "                    ", "memory", "[", "task_name", "]", "[", "str", "(", "i", ")", "]", "[", "'space_list'", "]", "=", "space_list", "\n", "# print(memory[task_name][str(i)]['space_list'])", "\n", "", "else", ":", "\n", "                    ", "memory", "[", "task_name", "]", "[", "str", "(", "i", ")", "]", "[", "'space_list'", "]", "=", "U", "[", ":", ",", "0", ":", "r", "]", "\n", "\n", "", "", "", "", "print_log", "(", "'-'", "*", "40", ",", "log", ")", "\n", "print_log", "(", "'Gradient Constraints Summary'", ",", "log", ")", "\n", "print_log", "(", "'-'", "*", "40", ",", "log", ")", "\n", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "        ", "print_log", "(", "'Layer {} : {}/{}'", ".", "format", "(", "i", "+", "1", ",", "space_list_all", "[", "i", "]", ".", "shape", "[", "1", "]", ",", "space_list_all", "[", "i", "]", ".", "shape", "[", "0", "]", ")", ",", "log", ")", "\n", "", "print_log", "(", "'-'", "*", "40", ",", "log", ")", "\n", "\n", "return", "space_list_all", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.grad_proj_cond": [[422, 510], ["numpy.arange", "numpy.random.shuffle", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "list", "range", "range", "x.size", "example_data.to", "y[].to", "net.act.keys", "optimizer.zero_grad", "net", "criterion", "criterion.backward", "enumerate", "range", "gradient_norm_lists_tasks.append", "range", "range", "range", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "net.named_parameters", "len", "main_cifar100_sup.print_log", "numpy.dot", "numpy.linalg.norm", "projection_norm_lists.append", "numpy.linalg.norm", "main_cifar100_sup.print_log", "len", "main_cifar100_sup.print_log", "len", "len", "range", "numpy.array", "print", "main_cifar100_sup.print_log", "numpy.dot", "len", "np.array.append", "numpy.argpartition", "len", "params.grad.data.detach().cpu().numpy", "params.grad.data.detach().cpu().numpy.reshape", "grad_list.append", "space_list.transpose", "params.grad.data.detach().cpu().numpy", "grad_list.append", "str", "str", "str", "params.grad.data.detach().cpu", "params.grad.data.detach().cpu().numpy", "grad_list.append", "params.grad.data.detach().cpu", "str", "str", "str", "params.grad.data.detach", "params.grad.data.detach().cpu", "str", "params.grad.data.detach", "params.grad.data.detach"], "function", ["home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log"], ["", "def", "grad_proj_cond", "(", "net", ",", "x", ",", "y", ",", "memory", ",", "task_name", ",", "task_id", ",", "task_name_list", ",", "device", ",", "optimizer", ",", "criterion", ")", ":", "\n", "    ", "eplison_1", "=", "0.5", "\n", "eplison_2", "=", "0.7", "\n", "\n", "# calcuate the gradient for current task before training", "\n", "steps", "=", "1", "\n", "r", "=", "np", ".", "arange", "(", "x", ".", "size", "(", "0", ")", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "r", ")", "\n", "r", "=", "torch", ".", "LongTensor", "(", "r", ")", ".", "to", "(", "device", ")", "\n", "b", "=", "r", "[", "0", ":", "125", "]", "# Take 125*10 random samples", "\n", "example_data", "=", "x", "[", "b", "]", "\n", "example_data", ",", "target", "=", "example_data", ".", "to", "(", "device", ")", ",", "y", "[", "b", "]", ".", "to", "(", "device", ")", "\n", "\n", "batch_list", "=", "[", "2", "*", "12", ",", "100", ",", "125", ",", "125", "]", "\n", "grad_list", "=", "[", "]", "# list contains gradient of each layer", "\n", "act_key", "=", "list", "(", "net", ".", "act", ".", "keys", "(", ")", ")", "\n", "for", "i", "in", "range", "(", "1", ")", ":", "\n", "\n", "\n", "        ", "optimizer", ".", "zero_grad", "(", ")", "\n", "example_out", "=", "net", "(", "example_data", ")", "\n", "\n", "loss", "=", "criterion", "(", "example_out", "[", "task_id", "]", ",", "target", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "k_linear", "=", "0", "\n", "for", "k", ",", "(", "m", ",", "params", ")", "in", "enumerate", "(", "net", ".", "named_parameters", "(", ")", ")", ":", "\n", "            ", "if", "'weight'", "in", "m", "and", "'bn'", "not", "in", "m", ":", "\n", "                ", "if", "len", "(", "params", ".", "shape", ")", "==", "4", ":", "\n", "\n", "                    ", "grad", "=", "params", ".", "grad", ".", "data", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "grad", "=", "grad", ".", "reshape", "(", "grad", ".", "shape", "[", "0", "]", ",", "grad", ".", "shape", "[", "1", "]", "*", "grad", ".", "shape", "[", "2", "]", "*", "grad", ".", "shape", "[", "3", "]", ")", "\n", "grad_list", ".", "append", "(", "grad", ")", "\n", "", "else", ":", "\n", "                    ", "if", "'fc3'", "in", "m", "and", "k_linear", "==", "task_id", ":", "\n", "                        ", "grad", "=", "params", ".", "grad", ".", "data", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "grad_list", ".", "append", "(", "grad", ")", "\n", "k_linear", "+=", "1", "\n", "", "elif", "'fc3'", "not", "in", "m", ":", "\n", "                        ", "grad", "=", "params", ".", "grad", ".", "data", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "grad_list", ".", "append", "(", "grad", ")", "\n", "\n", "# project on each task subspace", "\n", "#gradient_norm_lists = []", "\n", "", "", "", "", "", "gradient_norm_lists_tasks", "=", "[", "]", "\n", "\n", "for", "task_index", "in", "range", "(", "task_id", ")", ":", "\n", "        ", "projection_norm_sum", "=", "0", "\n", "projection_norm_lists", "=", "[", "]", "\n", "# projection_norm = 0", "\n", "# gradient_norm = 0", "\n", "for", "i", "in", "range", "(", "len", "(", "grad_list", ")", ")", ":", "#layer", "\n", "            ", "space_list", "=", "memory", "[", "task_name_list", "[", "task_index", "]", "]", "[", "str", "(", "i", ")", "]", "[", "'space_list'", "]", "\n", "print_log", "(", "\"Task:{}, layer:{}, space shape:{}\"", ".", "format", "(", "task_index", ",", "i", ",", "space_list", ".", "shape", ")", ",", "log", ")", "\n", "# grad_list is the grad for current task", "\n", "projection", "=", "np", ".", "dot", "(", "grad_list", "[", "i", "]", ",", "np", ".", "dot", "(", "space_list", ",", "space_list", ".", "transpose", "(", ")", ")", ")", "\n", "\n", "projection_norm", "=", "np", ".", "linalg", ".", "norm", "(", "projection", ")", "\n", "\n", "projection_norm_lists", ".", "append", "(", "projection_norm", ")", "\n", "gradient_norm", "=", "np", ".", "linalg", ".", "norm", "(", "grad_list", "[", "i", "]", ")", "\n", "print_log", "(", "'Task:{}, Layer:{}, project_norm:{}, threshold for regime 1:{}'", ".", "format", "(", "task_index", ",", "i", ",", "projection_norm", ",", "eplison_1", "*", "gradient_norm", ")", ",", "log", ")", "\n", "\n", "\n", "if", "projection_norm", "<=", "eplison_1", "*", "gradient_norm", ":", "\n", "                ", "memory", "[", "task_name", "]", "[", "str", "(", "i", ")", "]", "[", "'regime'", "]", "[", "task_index", "]", "=", "'1'", "\n", "", "else", ":", "\n", "                ", "memory", "[", "task_name", "]", "[", "str", "(", "i", ")", "]", "[", "'regime'", "]", "[", "task_index", "]", "=", "'2'", "\n", "\n", "", "", "gradient_norm_lists_tasks", ".", "append", "(", "projection_norm_lists", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "grad_list", ")", ")", ":", "\n", "            ", "print_log", "(", "'Layer:{}, Regime:{}'", ".", "format", "(", "i", ",", "memory", "[", "task_name", "]", "[", "str", "(", "i", ")", "]", "[", "'regime'", "]", "[", "task_index", "]", ")", ",", "log", ")", "\n", "# select top-k related tasks according to the projection norm, k = 2 in general (k= 1 for task 2)", "\n", "", "", "if", "task_id", "==", "1", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "grad_list", ")", ")", ":", "\n", "            ", "memory", "[", "task_name", "]", "[", "str", "(", "i", ")", "]", "[", "'selected_task'", "]", "=", "[", "0", "]", "\n", "", "", "else", ":", "\n", "        ", "k", "=", "2", "\n", "for", "layer", "in", "range", "(", "len", "(", "grad_list", ")", ")", ":", "\n", "            ", "task_norm", "=", "[", "]", "\n", "for", "t", "in", "range", "(", "len", "(", "gradient_norm_lists_tasks", ")", ")", ":", "\n", "                ", "norm", "=", "gradient_norm_lists_tasks", "[", "t", "]", "[", "layer", "]", "\n", "task_norm", ".", "append", "(", "norm", ")", "\n", "", "task_norm", "=", "np", ".", "array", "(", "task_norm", ")", "\n", "print", "(", "task_norm", ".", "shape", ")", "\n", "idx", "=", "np", ".", "argpartition", "(", "task_norm", ",", "-", "k", ")", "[", "-", "k", ":", "]", "\n", "memory", "[", "task_name", "]", "[", "str", "(", "layer", ")", "]", "[", "'selected_task'", "]", "=", "idx", "\n", "print_log", "(", "'Layer:{}, selected task ID:{}'", ".", "format", "(", "layer", ",", "memory", "[", "task_name", "]", "[", "str", "(", "layer", ")", "]", "[", "'selected_task'", "]", ")", ",", "log", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.main": [[511, 818], ["time.time", "torch.device", "torch.device", "torch.device", "torch.device", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "numpy.random.seed", "data_loader.cifar100_superclass_python", "data_loader.cifar100_superclass_python", "print", "numpy.zeros", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "main_cifar100_sup.print_log", "main_cifar100_sup.print_log", "main_cifar100_sup.print_log", "numpy.mean", "main_cifar100_sup.print_log", "main_cifar100_sup.print_log", "main_cifar100_sup.print_log", "pandas.DataFrame", "seaborn.set", "seaborn.heatmap", "matplotlib.show", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "task_name_list.append", "main_cifar100_sup.print_log", "main_cifar100_sup.print_log", "main_cifar100_sup.print_log", "task_list.append", "main_cifar100_sup.print_log", "main_cifar100_sup.print_log", "main_cifar100_sup.print_log", "main_cifar100_sup.print_log", "range", "main_cifar100_sup.save_model", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "numpy.array", "str", "LeNet().to", "enumerate", "main_cifar100_sup.print_log", "enumerate", "main_cifar100_sup.print_log", "LeNet().to.apply", "main_cifar100_sup.get_model", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "range", "main_cifar100_sup.set_model_", "main_cifar100_sup.print_log", "main_cifar100_sup.test", "main_cifar100_sup.print_log", "main_cifar100_sup.get_representation_and_gradient", "main_cifar100_sup.get_space_and_grad", "main_cifar100_sup.print_log", "enumerate", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "range", "main_cifar100_sup.print_log", "main_cifar100_sup.grad_proj_cond", "range", "main_cifar100_sup.print_log", "range", "main_cifar100_sup.set_model_", "main_cifar100_sup.test", "main_cifar100_sup.print_log", "main_cifar100_sup.print_log", "main_cifar100_sup.get_representation_and_gradient", "main_cifar100_sup.get_space_and_grad", "LeNet().to.named_parameters", "numpy.array", "main_cifar100_sup.test", "main_cifar100_sup.print_log", "main_cifar100_sup.print_log", "range", "main_cifar100_sup.print_log", "numpy.array", "acc_matrix[].mean", "numpy.array", "LeNet().to.named_parameters", "print", "LeNet().to.named_parameters", "time.time", "main_cifar100_sup.train", "time.time", "main_cifar100_sup.test", "main_cifar100_sup.print_log", "main_cifar100_sup.test", "main_cifar100_sup.print_log", "main_cifar100_sup.print_log", "LeNet().to.named_parameters", "len", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "main_cifar100_sup.print_log", "feature_mat.append", "enumerate", "main_cifar100_sup.print_log", "main_cifar100_sup.print_log", "time.time", "main_cifar100_sup.train_projected_regime", "time.time", "main_cifar100_sup.test", "main_cifar100_sup.print_log", "main_cifar100_sup.test", "main_cifar100_sup.print_log", "main_cifar100_sup.print_log", "range", "main_cifar100_sup.print_log", "numpy.diag", "main_cifar100_sup.LeNet", "main_cifar100_sup.print_log", "LeNet().to.named_parameters", "main_cifar100_sup.get_model", "main_cifar100_sup.print_log", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "LeNet().to.named_parameters", "LeNet().to.named_parameters", "main_cifar100_sup.get_model", "main_cifar100_sup.print_log", "enumerate", "time.time", "main_cifar100_sup.print_log", "main_cifar100_sup.adjust_learning_rate", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "main_cifar100_sup.print_log", "main_cifar100_sup.adjust_learning_rate", "str", "main_cifar100_sup.print_log", "str", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "numpy.dot", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "main_cifar100_sup.print_log", "params.size", "params.size", "space_list_all[].transpose", "str", "str", "str", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "LeNet().to.named_parameters", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "LeNet().to.named_parameters", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "str", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "[].to", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "[].to", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.LYang-666_TRGP.dataloader.cifar100_superclass.cifar100_superclass_python", "home.repos.pwc.inspect_result.LYang-666_TRGP.dataloader.cifar100_superclass.cifar100_superclass_python", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.save_model", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.utilis.get_model", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.set_model_", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.test", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.get_representation_and_gradient", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.get_space_and_grad", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.grad_proj_cond", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.set_model_", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.test", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.get_representation_and_gradient", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.get_space_and_grad", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.test", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.train", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.test", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.test", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.train_projected_regime", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.test", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.test", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.utilis.get_model", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.utilis.get_model", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.adjust_learning_rate", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.adjust_learning_rate", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log", "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log"], ["", "", "", "def", "main", "(", "args", ")", ":", "\n", "    ", "tstart", "=", "time", ".", "time", "(", ")", "\n", "## Device Setting ", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "# Choose any task order - ref {yoon et al. ICLR 2020}", "\n", "task_order", "=", "[", "np", ".", "array", "(", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", ",", "9", ",", "10", ",", "11", ",", "12", ",", "13", ",", "14", ",", "15", ",", "16", ",", "17", ",", "18", ",", "19", "]", ")", ",", "\n", "np", ".", "array", "(", "[", "15", ",", "12", ",", "5", ",", "9", ",", "7", ",", "16", ",", "18", ",", "17", ",", "1", ",", "0", ",", "3", ",", "8", ",", "11", ",", "14", ",", "10", ",", "6", ",", "2", ",", "4", ",", "13", ",", "19", "]", ")", ",", "\n", "np", ".", "array", "(", "[", "17", ",", "1", ",", "19", ",", "18", ",", "12", ",", "7", ",", "6", ",", "0", ",", "11", ",", "15", ",", "10", ",", "5", ",", "13", ",", "3", ",", "9", ",", "16", ",", "4", ",", "14", ",", "2", ",", "8", "]", ")", ",", "\n", "np", ".", "array", "(", "[", "11", ",", "9", ",", "6", ",", "5", ",", "12", ",", "4", ",", "0", ",", "10", ",", "13", ",", "7", ",", "14", ",", "3", ",", "15", ",", "16", ",", "8", ",", "1", ",", "2", ",", "19", ",", "18", ",", "17", "]", ")", ",", "\n", "np", ".", "array", "(", "[", "6", ",", "14", ",", "0", ",", "11", ",", "12", ",", "17", ",", "13", ",", "4", ",", "9", ",", "1", ",", "7", ",", "19", ",", "8", ",", "10", ",", "3", ",", "15", ",", "18", ",", "5", ",", "2", ",", "16", "]", ")", "]", "\n", "\n", "## Load CIFAR100_SUPERCLASS DATASET", "\n", "from", "dataloader", "import", "cifar100_superclass", "as", "data_loader", "\n", "data", ",", "taskcla", "=", "data_loader", ".", "cifar100_superclass_python", "(", "task_order", "[", "args", ".", "t_order", "]", ",", "group", "=", "5", ",", "validation", "=", "True", ")", "\n", "test_data", ",", "_", "=", "data_loader", ".", "cifar100_superclass_python", "(", "task_order", "[", "args", ".", "t_order", "]", ",", "group", "=", "5", ")", "\n", "print", "(", "taskcla", ")", "\n", "\n", "acc_matrix", "=", "np", ".", "zeros", "(", "(", "20", ",", "20", ")", ")", "\n", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "task_id", "=", "0", "\n", "task_list", "=", "[", "]", "\n", "task_name_list", "=", "[", "]", "\n", "memory", "=", "{", "}", "\n", "for", "k", ",", "ncla", "in", "taskcla", ":", "\n", "# specify threshold hyperparameter", "\n", "\n", "        ", "threshold", "=", "np", ".", "array", "(", "[", "0.98", "]", "*", "5", ")", "+", "task_id", "*", "np", ".", "array", "(", "[", "0.001", "]", "*", "5", ")", "\n", "\n", "task_name", "=", "data", "[", "k", "]", "[", "'name'", "]", "+", "'-'", "+", "str", "(", "k", ")", "\n", "task_name_list", ".", "append", "(", "task_name", ")", "\n", "print_log", "(", "'*'", "*", "100", ",", "log", ")", "\n", "print_log", "(", "'Task {:2d} ({:s})'", ".", "format", "(", "k", ",", "task_name", ")", ",", "log", ")", "\n", "print_log", "(", "'*'", "*", "100", ",", "log", ")", "\n", "xtrain", "=", "data", "[", "k", "]", "[", "'train'", "]", "[", "'x'", "]", "\n", "ytrain", "=", "data", "[", "k", "]", "[", "'train'", "]", "[", "'y'", "]", "\n", "xvalid", "=", "data", "[", "k", "]", "[", "'valid'", "]", "[", "'x'", "]", "\n", "yvalid", "=", "data", "[", "k", "]", "[", "'valid'", "]", "[", "'y'", "]", "\n", "xtest", "=", "test_data", "[", "k", "]", "[", "'test'", "]", "[", "'x'", "]", "\n", "ytest", "=", "test_data", "[", "k", "]", "[", "'test'", "]", "[", "'y'", "]", "\n", "task_list", ".", "append", "(", "k", ")", "\n", "\n", "lr", "=", "args", ".", "lr", "\n", "best_loss", "=", "np", ".", "inf", "\n", "print_log", "(", "'-'", "*", "40", ",", "log", ")", "\n", "print_log", "(", "'Task ID :{} | Learning Rate : {}'", ".", "format", "(", "task_id", ",", "lr", ")", ",", "log", ")", "\n", "print_log", "(", "'-'", "*", "40", ",", "log", ")", "\n", "\n", "if", "task_id", "==", "0", ":", "\n", "            ", "model", "=", "LeNet", "(", "taskcla", ")", ".", "to", "(", "device", ")", "\n", "for", "k_t", ",", "(", "m", ",", "param", ")", "in", "enumerate", "(", "model", ".", "named_parameters", "(", ")", ")", ":", "\n", "                ", "print", "(", "k_t", ",", "m", ",", "param", ".", "shape", ")", "\n", "", "memory", "[", "task_name", "]", "=", "{", "}", "\n", "\n", "print_log", "(", "'Model parameters ---'", ",", "log", ")", "\n", "kk", "=", "0", "\n", "for", "k_t", ",", "(", "m", ",", "param", ")", "in", "enumerate", "(", "model", ".", "named_parameters", "(", ")", ")", ":", "\n", "                ", "if", "'weight'", "in", "m", "and", "'bn'", "not", "in", "m", ":", "\n", "                    ", "print_log", "(", "(", "k_t", ",", "m", ",", "param", ".", "shape", ")", ",", "log", ")", "\n", "memory", "[", "task_name", "]", "[", "str", "(", "kk", ")", "]", "=", "{", "\n", "'space_list'", ":", "{", "}", ",", "\n", "'grad_list'", ":", "{", "}", ",", "\n", "'regime'", ":", "{", "}", ",", "\n", "}", "\n", "kk", "+=", "1", "\n", "\n", "", "", "print_log", "(", "'-'", "*", "40", ",", "log", ")", "\n", "model", ".", "apply", "(", "init_weights", ")", "\n", "best_model", "=", "get_model", "(", "model", ")", "\n", "space_list_all", "=", "[", "]", "\n", "normal_param", "=", "[", "\n", "param", "for", "name", ",", "param", "in", "model", ".", "named_parameters", "(", ")", "\n", "if", "not", "'scale'", "in", "name", "\n", "]", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "[", "\n", "{", "'params'", ":", "normal_param", "}", "\n", "]", ",", "\n", "lr", "=", "lr", "\n", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "1", ",", "args", ".", "n_epochs", "+", "1", ")", ":", "\n", "# Train", "\n", "                ", "clock0", "=", "time", ".", "time", "(", ")", "\n", "train", "(", "args", ",", "model", ",", "device", ",", "xtrain", ",", "ytrain", ",", "optimizer", ",", "criterion", ",", "k", ")", "\n", "clock1", "=", "time", ".", "time", "(", ")", "\n", "tr_loss", ",", "tr_acc", "=", "test", "(", "args", ",", "model", ",", "device", ",", "xtrain", ",", "ytrain", ",", "criterion", ",", "k", ")", "\n", "print_log", "(", "'Epoch {:3d} | Train: loss={:.3f}, acc={:5.1f}% | time={:5.1f}ms |'", ".", "format", "(", "epoch", ",", "tr_loss", ",", "tr_acc", ",", "1000", "*", "(", "clock1", "-", "clock0", ")", ")", ",", "log", ")", "\n", "# Validate", "\n", "valid_loss", ",", "valid_acc", "=", "test", "(", "args", ",", "model", ",", "device", ",", "xvalid", ",", "yvalid", ",", "criterion", ",", "k", ")", "\n", "print_log", "(", "' Valid: loss={:.3f}, acc={:5.1f}% |'", ".", "format", "(", "valid_loss", ",", "valid_acc", ")", ",", "log", ")", "\n", "# Adapt lr", "\n", "if", "valid_loss", "<", "best_loss", ":", "\n", "                    ", "best_loss", "=", "valid_loss", "\n", "best_model", "=", "get_model", "(", "model", ")", "\n", "patience", "=", "args", ".", "lr_patience", "\n", "print_log", "(", "' *'", ",", "log", ")", "\n", "", "else", ":", "\n", "                    ", "patience", "-=", "1", "\n", "if", "patience", "<=", "0", ":", "\n", "                        ", "lr", "/=", "args", ".", "lr_factor", "\n", "print_log", "(", "' lr={:.1e}'", ".", "format", "(", "lr", ")", ",", "log", ")", "\n", "if", "lr", "<", "args", ".", "lr_min", ":", "\n", "                            ", "print_log", "(", "\"\"", ",", "log", ")", "\n", "break", "\n", "", "patience", "=", "args", ".", "lr_patience", "\n", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "args", ")", "\n", "", "", "print_log", "(", "\"\"", ",", "log", ")", "\n", "", "set_model_", "(", "model", ",", "best_model", ")", "\n", "# Test", "\n", "print_log", "(", "'-'", "*", "40", ",", "log", ")", "\n", "test_loss", ",", "test_acc", "=", "test", "(", "args", ",", "model", ",", "device", ",", "xtest", ",", "ytest", ",", "criterion", ",", "k", ")", "\n", "print_log", "(", "'Test: loss={:.3f} , acc={:5.1f}%'", ".", "format", "(", "test_loss", ",", "test_acc", ")", ",", "log", ")", "\n", "# Memory Update  ", "\n", "mat_list", ",", "grad_list", "=", "get_representation_and_gradient", "(", "model", ",", "device", ",", "optimizer", ",", "criterion", ",", "k", ",", "xtrain", ",", "ytrain", ")", "\n", "space_list_all", "=", "get_space_and_grad", "(", "model", ",", "mat_list", ",", "grad_list", ",", "threshold", ",", "memory", ",", "task_name", ",", "task_name_list", ",", "task_id", ",", "space_list_all", ")", "\n", "\n", "", "else", ":", "\n", "            ", "memory", "[", "task_name", "]", "=", "{", "}", "\n", "# memory[task_name]['regime'] = 10 * [0]", "\n", "#memory[task_name]['selected_task'] = []", "\n", "\n", "kk", "=", "0", "\n", "print_log", "(", "\"reinit the scale for each task\"", ",", "log", ")", "\n", "for", "k_t", ",", "(", "m", ",", "params", ")", "in", "enumerate", "(", "model", ".", "named_parameters", "(", ")", ")", ":", "\n", "# create the saved memory", "\n", "                ", "if", "'weight'", "in", "m", "and", "'bn'", "not", "in", "m", ":", "\n", "\n", "                    ", "memory", "[", "task_name", "]", "[", "str", "(", "kk", ")", "]", "=", "{", "\n", "'space_list'", ":", "{", "}", ",", "\n", "'grad_list'", ":", "{", "}", ",", "\n", "'space_mat_list'", ":", "{", "}", ",", "\n", "'scale1'", ":", "{", "}", ",", "\n", "'scale2'", ":", "{", "}", ",", "\n", "'regime'", ":", "{", "}", ",", "\n", "'selected_task'", ":", "{", "}", "\n", "}", "\n", "kk", "+=", "1", "\n", "#reinitialize the scale", "\n", "", "if", "'scale'", "in", "m", ":", "\n", "                    ", "mask", "=", "torch", ".", "eye", "(", "params", ".", "size", "(", "0", ")", ",", "params", ".", "size", "(", "1", ")", ")", ".", "to", "(", "device", ")", "\n", "\n", "params", ".", "data", "=", "mask", "\n", "# print(\"-----------------\")", "\n", "", "", "normal_param", "=", "[", "\n", "param", "for", "name", ",", "param", "in", "model", ".", "named_parameters", "(", ")", "\n", "if", "not", "'scale'", "in", "name", "\n", "]", "\n", "\n", "scale_param", "=", "[", "\n", "param", "for", "name", ",", "param", "in", "model", ".", "named_parameters", "(", ")", "\n", "if", "'scale'", "in", "name", "\n", "]", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "[", "\n", "{", "'params'", ":", "normal_param", "}", ",", "\n", "{", "'params'", ":", "scale_param", ",", "'weight_decay'", ":", "0", ",", "'lr'", ":", "lr", "}", "\n", "]", ",", "\n", "lr", "=", "lr", "\n", ")", "\n", "\n", "feature_mat", "=", "[", "]", "\n", "#Projection Matrix Precomputation", "\n", "for", "i", "in", "range", "(", "len", "(", "model", ".", "act", ")", ")", ":", "\n", "                ", "Uf", "=", "torch", ".", "Tensor", "(", "np", ".", "dot", "(", "space_list_all", "[", "i", "]", ",", "space_list_all", "[", "i", "]", ".", "transpose", "(", ")", ")", ")", ".", "to", "(", "device", ")", "\n", "print_log", "(", "'Layer {} - Projection Matrix shape: {}'", ".", "format", "(", "i", "+", "1", ",", "Uf", ".", "shape", ")", ",", "log", ")", "\n", "feature_mat", ".", "append", "(", "Uf", ")", "\n", "\n", "\n", "#==1 gradient projection condition", "\n", "", "print_log", "(", "'excute gradient projection condition'", ",", "log", ")", "\n", "grad_proj_cond", "(", "model", ",", "xtrain", ",", "ytrain", ",", "memory", ",", "task_name", ",", "task_id", ",", "task_name_list", ",", "device", ",", "optimizer", ",", "criterion", ")", "\n", "\n", "# select the regime 2, which need to learn scale", "\n", "space1", "=", "[", "None", ",", "None", ",", "None", ",", "None", "]", "\n", "space2", "=", "[", "None", ",", "None", ",", "None", ",", "None", "]", "\n", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "                ", "for", "k", ",", "task_sel", "in", "enumerate", "(", "memory", "[", "task_name", "]", "[", "str", "(", "i", ")", "]", "[", "'selected_task'", "]", ")", ":", "\n", "                    ", "if", "memory", "[", "task_name", "]", "[", "str", "(", "i", ")", "]", "[", "'regime'", "]", "[", "task_sel", "]", "==", "'2'", "or", "memory", "[", "task_name", "]", "[", "str", "(", "i", ")", "]", "[", "'regime'", "]", "[", "task_sel", "]", "==", "'3'", ":", "\n", "                        ", "if", "k", "==", "0", ":", "\n", "# change the np array to torch tensor", "\n", "                            ", "space1", "[", "i", "]", "=", "torch", ".", "FloatTensor", "(", "memory", "[", "task_name_list", "[", "task_sel", "]", "]", "[", "str", "(", "i", ")", "]", "[", "'space_list'", "]", ")", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "                            ", "space2", "[", "i", "]", "=", "torch", ".", "FloatTensor", "(", "memory", "[", "task_name_list", "[", "task_sel", "]", "]", "[", "str", "(", "i", ")", "]", "[", "'space_list'", "]", ")", ".", "to", "(", "device", ")", "\n", "", "", "", "", "if", "space1", "[", "0", "]", "is", "not", "None", ":", "\n", "                ", "print_log", "(", "'space1 is not None!'", ",", "log", ")", "\n", "", "if", "space2", "[", "0", "]", "is", "not", "None", ":", "\n", "                ", "print_log", "(", "'space2 is not None!'", ",", "log", ")", "\n", "\n", "", "print_log", "(", "'-'", "*", "40", ",", "log", ")", "\n", "for", "epoch", "in", "range", "(", "1", ",", "args", ".", "n_epochs", "+", "1", ")", ":", "\n", "# Train ", "\n", "                ", "clock0", "=", "time", ".", "time", "(", ")", "\n", "train_projected_regime", "(", "args", ",", "model", ",", "device", ",", "xtrain", ",", "ytrain", ",", "optimizer", ",", "criterion", ",", "memory", ",", "task_name", ",", "task_name_list", ",", "space_list_all", ",", "task_id", ",", "feature_mat", ",", "space1", "=", "space1", ",", "space2", "=", "space2", ")", "\n", "clock1", "=", "time", ".", "time", "(", ")", "\n", "tr_loss", ",", "tr_acc", "=", "test", "(", "args", ",", "model", ",", "device", ",", "xtrain", ",", "ytrain", ",", "criterion", ",", "task_id", ",", "space1", "=", "space1", ",", "space2", "=", "space2", ")", "\n", "print_log", "(", "'Epoch {:3d} | Train: loss={:.3f}, acc={:5.1f}% | time={:5.1f}ms |'", ".", "format", "(", "epoch", ",", "tr_loss", ",", "tr_acc", ",", "1000", "*", "(", "clock1", "-", "clock0", ")", ")", ",", "log", ")", "\n", "# Validate", "\n", "valid_loss", ",", "valid_acc", "=", "test", "(", "args", ",", "model", ",", "device", ",", "xvalid", ",", "yvalid", ",", "criterion", ",", "task_id", ",", "space1", "=", "space1", ",", "space2", "=", "space2", ")", "\n", "print_log", "(", "' Valid: loss={:.3f}, acc={:5.1f}% |'", ".", "format", "(", "valid_loss", ",", "valid_acc", ")", ",", "log", ")", "\n", "# Adapt lr", "\n", "if", "valid_loss", "<", "best_loss", ":", "\n", "                    ", "best_loss", "=", "valid_loss", "\n", "best_model", "=", "get_model", "(", "model", ")", "\n", "patience", "=", "args", ".", "lr_patience", "\n", "print_log", "(", "' *'", ",", "log", ")", "\n", "", "else", ":", "\n", "                    ", "patience", "-=", "1", "\n", "if", "patience", "<=", "0", ":", "\n", "                        ", "lr", "/=", "args", ".", "lr_factor", "\n", "print_log", "(", "' lr={:.1e}'", ".", "format", "(", "lr", ")", ",", "log", ")", "\n", "if", "lr", "<", "args", ".", "lr_min", ":", "\n", "                            ", "print_log", "(", "\"\"", ",", "log", ")", "\n", "break", "\n", "", "patience", "=", "args", ".", "lr_patience", "\n", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "args", ")", "\n", "", "", "print_log", "(", "\"\"", ",", "log", ")", "\n", "", "set_model_", "(", "model", ",", "best_model", ")", "\n", "# Test ", "\n", "test_acc_sum", "=", "0", "\n", "# for i in range(10):", "\n", "test_loss", ",", "test_acc", "=", "test", "(", "args", ",", "model", ",", "device", ",", "xtest", ",", "ytest", ",", "criterion", ",", "task_id", ",", "space1", "=", "space1", ",", "space2", "=", "space2", ")", "\n", "print_log", "(", "'Test: loss={:.3f} , acc={:5.1f}%'", ".", "format", "(", "test_loss", ",", "test_acc", ")", ",", "log", ")", "\n", "# test_acc_sum = test_acc_sum/10.", "\n", "print_log", "(", "'Average acc={:5.1f}%'", ".", "format", "(", "test_acc", ")", ",", "log", ")", "\n", "# Memory Update ", "\n", "mat_list", ",", "grad_list", "=", "get_representation_and_gradient", "(", "model", ",", "device", ",", "optimizer", ",", "criterion", ",", "task_id", ",", "xtrain", ",", "ytrain", ")", "\n", "space_list_all", "=", "get_space_and_grad", "(", "model", ",", "mat_list", ",", "grad_list", ",", "threshold", ",", "memory", ",", "task_name", ",", "task_name_list", ",", "task_id", ",", "space_list_all", ")", "\n", "# save the scale value to memory", "\n", "idx1", "=", "0", "\n", "idx2", "=", "0", "\n", "for", "m", ",", "params", "in", "model", ".", "named_parameters", "(", ")", ":", "# layer ", "\n", "                ", "if", "'scale1'", "in", "m", ":", "\n", "                    ", "memory", "[", "task_name", "]", "[", "str", "(", "idx1", ")", "]", "[", "'scale1'", "]", "=", "params", ".", "data", "\n", "idx1", "+=", "1", "\n", "", "if", "'scale2'", "in", "m", ":", "\n", "                    ", "memory", "[", "task_name", "]", "[", "str", "(", "idx2", ")", "]", "[", "'scale2'", "]", "=", "params", ".", "data", "\n", "idx2", "+=", "1", "\n", "# save accuracy ", "\n", "", "", "", "jj", "=", "0", "\n", "for", "ii", "in", "np", ".", "array", "(", "task_list", ")", "[", "0", ":", "task_id", "+", "1", "]", ":", "\n", "            ", "xtest", "=", "test_data", "[", "ii", "]", "[", "'test'", "]", "[", "'x'", "]", "\n", "ytest", "=", "test_data", "[", "ii", "]", "[", "'test'", "]", "[", "'y'", "]", "\n", "# select the regime 2, which need to learn scale", "\n", "space1", "=", "[", "None", ",", "None", ",", "None", ",", "None", "]", "\n", "space2", "=", "[", "None", ",", "None", ",", "None", ",", "None", "]", "\n", "task_test", "=", "task_name_list", "[", "ii", "]", "\n", "# print_log('current testing task:{}'.format(task_test), log)", "\n", "\n", "\n", "if", "ii", ">", "0", ":", "\n", "                ", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "                    ", "for", "k", ",", "task_sel", "in", "enumerate", "(", "memory", "[", "task_test", "]", "[", "str", "(", "i", ")", "]", "[", "'selected_task'", "]", ")", ":", "\n", "# print(memory[task_name]['regime'][task_sel])", "\n", "                        ", "if", "memory", "[", "task_test", "]", "[", "str", "(", "i", ")", "]", "[", "'regime'", "]", "[", "task_sel", "]", "==", "'2'", "or", "memory", "[", "task_name", "]", "[", "str", "(", "i", ")", "]", "[", "'regime'", "]", "[", "task_sel", "]", "==", "'3'", ":", "\n", "                            ", "if", "k", "==", "0", ":", "\n", "# space1 = []", "\n", "# change the np array to torch tensor", "\n", "                                ", "space1", "[", "i", "]", "=", "torch", ".", "FloatTensor", "(", "memory", "[", "task_name_list", "[", "task_sel", "]", "]", "[", "str", "(", "i", ")", "]", "[", "'space_list'", "]", ")", ".", "to", "(", "device", ")", "\n", "idx", "=", "0", "\n", "for", "m", ",", "params", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "                                    ", "if", "'scale1'", "in", "m", ":", "\n", "                                        ", "params", ".", "data", "=", "memory", "[", "task_test", "]", "[", "str", "(", "idx", ")", "]", "[", "'scale1'", "]", ".", "to", "(", "device", ")", "\n", "idx", "+=", "1", "\n", "", "", "", "else", ":", "\n", "#space2 = []", "\n", "                                ", "space2", "[", "i", "]", "=", "torch", ".", "FloatTensor", "(", "memory", "[", "task_name_list", "[", "task_sel", "]", "]", "[", "str", "(", "i", ")", "]", "[", "'space_list'", "]", ")", ".", "to", "(", "device", ")", "\n", "idx", "=", "0", "\n", "for", "m", ",", "params", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "                                    ", "if", "'scale2'", "in", "m", ":", "\n", "                                        ", "params", ".", "data", "=", "memory", "[", "task_test", "]", "[", "str", "(", "idx", ")", "]", "[", "'scale2'", "]", ".", "to", "(", "device", ")", "\n", "idx", "+=", "1", "\n", "\n", "\n", "", "", "", "", "", "", "", "test_loss", ",", "test_acc", "=", "test", "(", "args", ",", "model", ",", "device", ",", "xtest", ",", "ytest", ",", "criterion", ",", "ii", ",", "space1", "=", "space1", ",", "space2", "=", "space2", ")", "\n", "print_log", "(", "'Test: loss={:.3f} , acc={:5.1f}%'", ".", "format", "(", "test_loss", ",", "test_acc", ")", ",", "log", ")", "\n", "\n", "acc_matrix", "[", "task_id", ",", "jj", "]", "=", "test_acc", "\n", "#_, acc_matrix[task_id,jj] = test(args, model, device, xtest, ytest,criterion,ii, space1=space1, space2=space2) ", "\n", "jj", "+=", "1", "\n", "", "print_log", "(", "'Accuracies ='", ",", "log", ")", "\n", "for", "i_a", "in", "range", "(", "task_id", "+", "1", ")", ":", "\n", "            ", "print_log", "(", "'\\t'", ",", "log", ")", "\n", "for", "j_a", "in", "range", "(", "acc_matrix", ".", "shape", "[", "1", "]", ")", ":", "\n", "                ", "print_log", "(", "'{:5.1f}% '", ".", "format", "(", "acc_matrix", "[", "i_a", ",", "j_a", "]", ")", ",", "log", ",", "end", "=", "''", ")", "\n", "", "print_log", "(", "\"\"", ",", "log", ")", "\n", "# update task id ", "\n", "", "task_id", "+=", "1", "\n", "save_model", "(", "model", ",", "memory", ",", "args", ".", "savename", ")", "\n", "", "print_log", "(", "'-'", "*", "50", ",", "log", ")", "\n", "# Simulation Results ", "\n", "print_log", "(", "'Task Order : {}'", ".", "format", "(", "np", ".", "array", "(", "task_list", ")", ")", ",", "log", ")", "\n", "print_log", "(", "'Final Avg Accuracy: {:5.2f}%'", ".", "format", "(", "acc_matrix", "[", "-", "1", "]", ".", "mean", "(", ")", ")", ",", "log", ")", "\n", "bwt", "=", "np", ".", "mean", "(", "(", "acc_matrix", "[", "-", "1", "]", "-", "np", ".", "diag", "(", "acc_matrix", ")", ")", "[", ":", "-", "1", "]", ")", "\n", "print_log", "(", "'Backward transfer: {:5.2f}%'", ".", "format", "(", "bwt", ")", ",", "log", ")", "\n", "print_log", "(", "'[Elapsed time = {:.1f} ms]'", ".", "format", "(", "(", "time", ".", "time", "(", ")", "-", "tstart", ")", "*", "1000", ")", ",", "log", ")", "\n", "print_log", "(", "'-'", "*", "50", ",", "log", ")", "\n", "# Plots", "\n", "array", "=", "acc_matrix", "\n", "df_cm", "=", "pd", ".", "DataFrame", "(", "array", ",", "index", "=", "[", "i", "for", "i", "in", "[", "\"1\"", ",", "\"2\"", ",", "\"3\"", ",", "\"4\"", ",", "\"5\"", ",", "\"6\"", ",", "\"7\"", ",", "\"8\"", ",", "\"9\"", ",", "\"10\"", ",", "\"11\"", ",", "\"12\"", ",", "\"13\"", ",", "\"14\"", ",", "\"15\"", ",", "\"16\"", ",", "\"17\"", ",", "\"18\"", ",", "\"19\"", ",", "\"20\"", "]", "]", ",", "\n", "columns", "=", "[", "i", "for", "i", "in", "[", "\"1\"", ",", "\"2\"", ",", "\"3\"", ",", "\"4\"", ",", "\"5\"", ",", "\"6\"", ",", "\"7\"", ",", "\"8\"", ",", "\"9\"", ",", "\"10\"", ",", "\"11\"", ",", "\"12\"", ",", "\"13\"", ",", "\"14\"", ",", "\"15\"", ",", "\"16\"", ",", "\"17\"", ",", "\"18\"", ",", "\"19\"", ",", "\"20\"", "]", "]", ")", "\n", "sn", ".", "set", "(", "font_scale", "=", "1.4", ")", "\n", "sn", ".", "heatmap", "(", "df_cm", ",", "annot", "=", "True", ",", "annot_kws", "=", "{", "\"size\"", ":", "10", "}", ")", "\n", "plt", ".", "show", "(", ")", "\n", "", "def", "print_log", "(", "print_string", ",", "log", ",", "end", "=", "None", ")", ":", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100_sup.print_log": [[818, 825], ["log.write", "log.flush", "print", "print"], "function", ["None"], ["", "def", "print_log", "(", "print_string", ",", "log", ",", "end", "=", "None", ")", ":", "\n", "    ", "if", "end", "is", "not", "None", ":", "\n", "        ", "print", "(", "\"{}\"", ".", "format", "(", "print_string", ")", ",", "end", "=", "''", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"{}\"", ".", "format", "(", "print_string", ")", ")", "\n", "", "log", ".", "write", "(", "'{}\\n'", ".", "format", "(", "print_string", ")", ")", "\n", "log", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.layers.Conv2d.__init__": [[8, 33], ["torch.Conv2d.__init__", "layers.Conv2d.weight.data.new", "layers.Conv2d.fill_", "layers.Conv2d.fill_diagonal_", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "layers.Conv2d.weight.size", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "layers.Conv2d.weight.size", "layers.Conv2d.weight.size", "torch.ones().view", "torch.ones().view", "torch.ones().view", "torch.ones().view", "torch.ones().view", "torch.ones().view", "torch.ones().view", "torch.ones().view", "torch.ones().view", "torch.ones().view", "torch.ones().view", "torch.ones().view", "torch.ones().view", "torch.ones().view", "torch.ones().view", "torch.ones().view", "torch.ones().view", "torch.ones().view", "torch.ones().view", "torch.ones().view", "torch.ones().view", "torch.ones().view", "torch.ones().view", "torch.ones().view", "torch.ones().view", "torch.ones().view", "torch.ones().view", "torch.ones().view", "torch.ones().view", "torch.ones().view", "torch.ones().view", "torch.ones().view", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.LYang-666_TRGP.dataloader.miniimagenet.DatasetGen.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "padding", "=", "0", ",", "\n", "stride", "=", "1", ",", "\n", "dilation", "=", "1", ",", "\n", "groups", "=", "1", ",", "\n", "bias", "=", "True", ")", ":", "\n", "        ", "super", "(", "Conv2d", ",", "self", ")", ".", "__init__", "(", "in_channels", ",", "out_channels", ",", "\n", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "bias", ")", "\n", "# define the scale v", "\n", "size", "=", "self", ".", "weight", ".", "size", "(", "1", ")", "*", "self", ".", "weight", ".", "size", "(", "2", ")", "*", "self", ".", "weight", ".", "size", "(", "3", ")", "\n", "scale", "=", "self", ".", "weight", ".", "data", ".", "new", "(", "size", ",", "size", ")", "\n", "scale", ".", "fill_", "(", "0.", ")", "\n", "# initialize the diagonal as 1", "\n", "scale", ".", "fill_diagonal_", "(", "1.", ")", "\n", "# self.scale1 = scale.cuda()", "\n", "self", ".", "scale1", "=", "nn", ".", "Parameter", "(", "scale", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "scale2", "=", "nn", ".", "Parameter", "(", "scale", ",", "requires_grad", "=", "True", ")", "\n", "\n", "self", ".", "noise", "=", "False", "\n", "if", "self", ".", "noise", ":", "\n", "            ", "self", ".", "alpha_w1", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "self", ".", "out_channels", ")", ".", "view", "(", "-", "1", ",", "1", ",", "1", ",", "1", ")", "*", "0.02", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "alpha_w2", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "self", ".", "out_channels", ")", ".", "view", "(", "-", "1", ",", "1", ",", "1", ",", "1", ")", "*", "0.02", ",", "requires_grad", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.layers.Conv2d.forward": [[34, 90], ["torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "layers.Conv2d.weight.grad.data.size", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "layers.Conv2d.weight.std().item", "layers.Conv2d.weight.clone().normal_", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "space1.transpose", "layers.Conv2d.weight.size", "layers.Conv2d.weight.size", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "space2.transpose", "layers.Conv2d.weight.size", "layers.Conv2d.weight.size", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "space1.transpose", "layers.Conv2d.weight.size", "layers.Conv2d.weight.size", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "space2.transpose", "layers.Conv2d.weight.size", "layers.Conv2d.weight.size", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "layers.Conv2d.weight.std", "layers.Conv2d.weight.clone", "space1.size", "space1.size", "layers.Conv2d.weight.view", "layers.Conv2d.weight.view", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "space2.size", "space2.size", "layers.Conv2d.weight.view", "layers.Conv2d.weight.view", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "space1.size", "space1.size", "layers.Conv2d.weight.view", "layers.Conv2d.weight.view", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "space2.size", "space2.size", "layers.Conv2d.weight.view", "layers.Conv2d.weight.view", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "space1.transpose", "space2.transpose", "space1.transpose", "space2.transpose"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ",", "space1", "=", "None", ",", "space2", "=", "None", ")", ":", "\n", "\n", "        ", "if", "space1", "is", "not", "None", "or", "space2", "is", "not", "None", ":", "\n", "            ", "sz", "=", "self", ".", "weight", ".", "grad", ".", "data", ".", "size", "(", "0", ")", "\n", "if", "self", ".", "noise", ":", "\n", "                ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "std", "=", "self", ".", "weight", ".", "std", "(", ")", ".", "item", "(", ")", "\n", "noise", "=", "self", ".", "weight", ".", "clone", "(", ")", ".", "normal_", "(", "0", ",", "std", ")", "\n", "", "", "if", "space2", "is", "None", ":", "\n", "\n", "                ", "real_scale1", "=", "self", ".", "scale1", "[", ":", "space1", ".", "size", "(", "1", ")", ",", ":", "space1", ".", "size", "(", "1", ")", "]", "\n", "# print(real_scale1.type(), space1.type(), self.weight.type())", "\n", "norm_project", "=", "torch", ".", "mm", "(", "torch", ".", "mm", "(", "space1", ",", "real_scale1", ")", ",", "space1", ".", "transpose", "(", "1", ",", "0", ")", ")", "\n", "#[chout, chinxkxk]  [chinxkxk, chinxkxk]", "\n", "proj_weight", "=", "torch", ".", "mm", "(", "self", ".", "weight", ".", "view", "(", "sz", ",", "-", "1", ")", ",", "norm_project", ")", ".", "view", "(", "self", ".", "weight", ".", "size", "(", ")", ")", "\n", "\n", "diag_weight", "=", "torch", ".", "mm", "(", "self", ".", "weight", ".", "view", "(", "sz", ",", "-", "1", ")", ",", "torch", ".", "mm", "(", "space1", ",", "space1", ".", "transpose", "(", "1", ",", "0", ")", ")", ")", ".", "view", "(", "self", ".", "weight", ".", "size", "(", ")", ")", "\n", "if", "self", ".", "noise", "and", "self", ".", "training", ":", "\n", "                    ", "masked_weight", "=", "proj_weight", "+", "self", ".", "weight", "-", "diag_weight", "+", "self", ".", "alpha_w2", "*", "noise", "*", "self", ".", "noise", "\n", "", "else", ":", "\n", "                    ", "masked_weight", "=", "proj_weight", "+", "self", ".", "weight", "-", "diag_weight", "\n", "\n", "", "", "if", "space1", "is", "None", ":", "\n", "\n", "                ", "real_scale2", "=", "self", ".", "scale2", "[", ":", "space2", ".", "size", "(", "1", ")", ",", ":", "space2", ".", "size", "(", "1", ")", "]", "\n", "norm_project", "=", "torch", ".", "mm", "(", "torch", ".", "mm", "(", "space2", ",", "real_scale2", ")", ",", "space2", ".", "transpose", "(", "1", ",", "0", ")", ")", "\n", "\n", "proj_weight", "=", "torch", ".", "mm", "(", "self", ".", "weight", ".", "view", "(", "sz", ",", "-", "1", ")", ",", "norm_project", ")", ".", "view", "(", "self", ".", "weight", ".", "size", "(", ")", ")", "\n", "diag_weight", "=", "torch", ".", "mm", "(", "self", ".", "weight", ".", "view", "(", "sz", ",", "-", "1", ")", ",", "torch", ".", "mm", "(", "space2", ",", "space2", ".", "transpose", "(", "1", ",", "0", ")", ")", ")", ".", "view", "(", "self", ".", "weight", ".", "size", "(", ")", ")", "\n", "\n", "#masked_weight = proj_weight + self.weight - diag_weight", "\n", "if", "self", ".", "noise", "and", "self", ".", "training", ":", "\n", "                    ", "masked_weight", "=", "proj_weight", "+", "self", ".", "weight", "-", "diag_weight", "+", "self", ".", "alpha_w2", "*", "noise", "*", "self", ".", "noise", "\n", "", "else", ":", "\n", "                    ", "masked_weight", "=", "proj_weight", "+", "self", ".", "weight", "-", "diag_weight", "\n", "", "", "if", "space1", "is", "not", "None", "and", "space2", "is", "not", "None", ":", "\n", "                ", "real_scale1", "=", "self", ".", "scale1", "[", ":", "space1", ".", "size", "(", "1", ")", ",", ":", "space1", ".", "size", "(", "1", ")", "]", "\n", "norm_project1", "=", "torch", ".", "mm", "(", "torch", ".", "mm", "(", "space1", ",", "real_scale1", ")", ",", "space1", ".", "transpose", "(", "1", ",", "0", ")", ")", "\n", "proj_weight1", "=", "torch", ".", "mm", "(", "self", ".", "weight", ".", "view", "(", "sz", ",", "-", "1", ")", ",", "norm_project1", ")", ".", "view", "(", "self", ".", "weight", ".", "size", "(", ")", ")", "\n", "diag_weight1", "=", "torch", ".", "mm", "(", "self", ".", "weight", ".", "view", "(", "sz", ",", "-", "1", ")", ",", "torch", ".", "mm", "(", "space1", ",", "space1", ".", "transpose", "(", "1", ",", "0", ")", ")", ")", ".", "view", "(", "self", ".", "weight", ".", "size", "(", ")", ")", "\n", "\n", "real_scale2", "=", "self", ".", "scale2", "[", ":", "space2", ".", "size", "(", "1", ")", ",", ":", "space2", ".", "size", "(", "1", ")", "]", "\n", "norm_project2", "=", "torch", ".", "mm", "(", "torch", ".", "mm", "(", "space2", ",", "real_scale2", ")", ",", "space2", ".", "transpose", "(", "1", ",", "0", ")", ")", "\n", "proj_weight2", "=", "torch", ".", "mm", "(", "self", ".", "weight", ".", "view", "(", "sz", ",", "-", "1", ")", ",", "norm_project2", ")", ".", "view", "(", "self", ".", "weight", ".", "size", "(", ")", ")", "\n", "diag_weight2", "=", "torch", ".", "mm", "(", "self", ".", "weight", ".", "view", "(", "sz", ",", "-", "1", ")", ",", "torch", ".", "mm", "(", "space2", ",", "space2", ".", "transpose", "(", "1", ",", "0", ")", ")", ")", ".", "view", "(", "self", ".", "weight", ".", "size", "(", ")", ")", "\n", "\n", "if", "self", ".", "noise", "and", "self", ".", "training", ":", "\n", "                    ", "masked_weight", "=", "proj_weight1", "-", "diag_weight1", "+", "proj_weight2", "-", "diag_weight2", "+", "self", ".", "weight", "+", "(", "(", "self", ".", "alpha_w2", "+", "self", ".", "alpha_w1", ")", "/", "2", ")", "*", "noise", "*", "self", ".", "noise", "\n", "", "else", ":", "\n", "                    ", "masked_weight", "=", "proj_weight1", "-", "diag_weight1", "+", "proj_weight2", "-", "diag_weight2", "+", "self", ".", "weight", "\n", "\n", "", "", "", "else", ":", "\n", "            ", "masked_weight", "=", "self", ".", "weight", "\n", "\n", "", "return", "F", ".", "conv2d", "(", "input", ",", "masked_weight", ",", "self", ".", "bias", ",", "self", ".", "stride", ",", "\n", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "groups", ")", "\n", "# Define specific linear layer", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.layers.Linear.__init__": [[93, 109], ["torch.Linear.__init__", "layers.Linear.weight.data.new", "layers.Linear.fill_", "layers.Linear.fill_diagonal_", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "layers.Linear.weight.size", "layers.Linear.weight.size", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "layers.Linear.weight.size", "layers.Linear.weight.size"], "methods", ["home.repos.pwc.inspect_result.LYang-666_TRGP.dataloader.miniimagenet.DatasetGen.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ",", "bias", "=", "True", ")", ":", "\n", "        ", "super", "(", "Linear", ",", "self", ")", ".", "__init__", "(", "in_features", ",", "out_features", ",", "bias", "=", "bias", ")", "\n", "\n", "\n", "# define the scale v", "\n", "scale", "=", "self", ".", "weight", ".", "data", ".", "new", "(", "self", ".", "weight", ".", "size", "(", "1", ")", ",", "self", ".", "weight", ".", "size", "(", "1", ")", ")", "\n", "scale", ".", "fill_", "(", "0.", ")", "\n", "# initialize the diagonal as 1", "\n", "scale", ".", "fill_diagonal_", "(", "1.", ")", "\n", "# self.scale1 = scale.cuda()", "\n", "self", ".", "scale1", "=", "nn", ".", "Parameter", "(", "scale", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "scale2", "=", "nn", ".", "Parameter", "(", "scale", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "alpha_w1", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "self", ".", "weight", ".", "size", "(", ")", ")", "*", "0.02", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "alpha_w2", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "self", ".", "weight", ".", "size", "(", ")", ")", "*", "0.02", ",", "requires_grad", "=", "True", ")", "\n", "\n", "self", ".", "noise", "=", "False", "\n", "#self.fixed_scale = scale", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.layers.Linear.forward": [[110, 168], ["torch.linear", "torch.linear", "torch.linear", "torch.linear", "layers.Linear.weight.grad.data.size", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "layers.Linear.weight.std().item", "layers.Linear.weight.clone().normal_", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "space1.transpose", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "space2.transpose", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "space1.transpose", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "space2.transpose", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "space1.transpose", "space2.transpose", "space1.transpose", "space2.transpose", "layers.Linear.weight.std", "layers.Linear.weight.clone", "space1.size", "space1.size", "space2.size", "space2.size", "space1.size", "space1.size", "space2.size", "space2.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "space1", "=", "None", ",", "space2", "=", "None", ")", ":", "\n", "        ", "if", "not", "self", ".", "training", ":", "\n", "           ", "self", ".", "noise", "=", "False", "\n", "\n", "\n", "", "if", "space1", "is", "not", "None", "or", "space2", "is", "not", "None", ":", "\n", "            ", "sz", "=", "self", ".", "weight", ".", "grad", ".", "data", ".", "size", "(", "0", ")", "\n", "if", "self", ".", "noise", ":", "\n", "                ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "std", "=", "self", ".", "weight", ".", "std", "(", ")", ".", "item", "(", ")", "\n", "noise", "=", "self", ".", "weight", ".", "clone", "(", ")", ".", "normal_", "(", "0", ",", "std", ")", "\n", "", "", "if", "space2", "is", "None", ":", "\n", "\n", "                ", "real_scale1", "=", "self", ".", "scale1", "[", ":", "space1", ".", "size", "(", "1", ")", ",", ":", "space1", ".", "size", "(", "1", ")", "]", "\n", "norm_project", "=", "torch", ".", "mm", "(", "torch", ".", "mm", "(", "space1", ",", "real_scale1", ")", ",", "space1", ".", "transpose", "(", "1", ",", "0", ")", ")", "\n", "\n", "proj_weight", "=", "torch", ".", "mm", "(", "self", ".", "weight", ",", "norm_project", ")", "\n", "\n", "diag_weight", "=", "torch", ".", "mm", "(", "self", ".", "weight", ",", "torch", ".", "mm", "(", "space1", ",", "space1", ".", "transpose", "(", "1", ",", "0", ")", ")", ")", "\n", "# masked_weight = proj_weight + self.weight - diag_weight ", "\n", "if", "self", ".", "noise", "and", "self", ".", "training", ":", "\n", "                    ", "masked_weight", "=", "proj_weight", "+", "self", ".", "weight", "-", "diag_weight", "+", "self", ".", "alpha_w2", "*", "noise", "*", "self", ".", "noise", "\n", "", "else", ":", "\n", "                    ", "masked_weight", "=", "proj_weight", "+", "self", ".", "weight", "-", "diag_weight", "\n", "\n", "", "", "if", "space1", "is", "None", ":", "\n", "\n", "                ", "real_scale2", "=", "self", ".", "scale2", "[", ":", "space2", ".", "size", "(", "1", ")", ",", ":", "space2", ".", "size", "(", "1", ")", "]", "\n", "norm_project", "=", "torch", ".", "mm", "(", "torch", ".", "mm", "(", "space2", ",", "real_scale2", ")", ",", "space2", ".", "transpose", "(", "1", ",", "0", ")", ")", "\n", "\n", "proj_weight", "=", "torch", ".", "mm", "(", "self", ".", "weight", ",", "norm_project", ")", "\n", "diag_weight", "=", "torch", ".", "mm", "(", "self", ".", "weight", ",", "torch", ".", "mm", "(", "space2", ",", "space2", ".", "transpose", "(", "1", ",", "0", ")", ")", ")", "\n", "\n", "# masked_weight = proj_weight + self.weight - diag_weight", "\n", "if", "self", ".", "noise", "and", "self", ".", "training", ":", "\n", "                    ", "masked_weight", "=", "proj_weight", "+", "self", ".", "weight", "-", "diag_weight", "+", "self", ".", "alpha_w2", "*", "noise", "*", "self", ".", "noise", "\n", "", "else", ":", "\n", "                    ", "masked_weight", "=", "proj_weight", "+", "self", ".", "weight", "-", "diag_weight", "\n", "", "", "if", "space1", "is", "not", "None", "and", "space2", "is", "not", "None", ":", "\n", "                ", "real_scale1", "=", "self", ".", "scale1", "[", ":", "space1", ".", "size", "(", "1", ")", ",", ":", "space1", ".", "size", "(", "1", ")", "]", "\n", "norm_project1", "=", "torch", ".", "mm", "(", "torch", ".", "mm", "(", "space1", ",", "real_scale1", ")", ",", "space1", ".", "transpose", "(", "1", ",", "0", ")", ")", "\n", "proj_weight1", "=", "torch", ".", "mm", "(", "self", ".", "weight", ",", "norm_project1", ")", "\n", "diag_weight1", "=", "torch", ".", "mm", "(", "self", ".", "weight", ",", "torch", ".", "mm", "(", "space1", ",", "space1", ".", "transpose", "(", "1", ",", "0", ")", ")", ")", "\n", "\n", "real_scale2", "=", "self", ".", "scale2", "[", ":", "space2", ".", "size", "(", "1", ")", ",", ":", "space2", ".", "size", "(", "1", ")", "]", "\n", "norm_project2", "=", "torch", ".", "mm", "(", "torch", ".", "mm", "(", "space2", ",", "real_scale2", ")", ",", "space2", ".", "transpose", "(", "1", ",", "0", ")", ")", "\n", "proj_weight2", "=", "torch", ".", "mm", "(", "self", ".", "weight", ",", "norm_project2", ")", "\n", "diag_weight2", "=", "torch", ".", "mm", "(", "self", ".", "weight", ",", "torch", ".", "mm", "(", "space2", ",", "space2", ".", "transpose", "(", "1", ",", "0", ")", ")", ")", "\n", "\n", "# masked_weight = proj_weight1 - diag_weight1 + proj_weight2 - diag_weight2 + self.weight", "\n", "if", "self", ".", "noise", "and", "self", ".", "training", ":", "\n", "                    ", "masked_weight", "=", "proj_weight1", "-", "diag_weight1", "+", "proj_weight2", "-", "diag_weight2", "+", "self", ".", "weight", "+", "(", "(", "self", ".", "alpha_w2", "+", "self", ".", "alpha_w1", ")", "/", "2", ")", "*", "noise", "*", "self", ".", "noise", "\n", "", "else", ":", "\n", "                    ", "masked_weight", "=", "proj_weight1", "-", "diag_weight1", "+", "proj_weight2", "-", "diag_weight2", "+", "self", ".", "weight", "\n", "\n", "", "", "", "else", ":", "\n", "            ", "masked_weight", "=", "self", ".", "weight", "\n", "", "return", "F", ".", "linear", "(", "input", ",", "masked_weight", ",", "self", ".", "bias", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.utilis.human_format": [[15, 21], ["abs"], "function", ["None"], ["def", "human_format", "(", "num", ")", ":", "\n", "    ", "magnitude", "=", "0", "\n", "while", "abs", "(", "num", ")", ">=", "1000", ":", "\n", "        ", "magnitude", "+=", "1", "\n", "num", "/=", "1000.0", "\n", "", "return", "'%.1f%s'", "%", "(", "num", ",", "[", "''", ",", "'K'", ",", "'M'", ",", "'G'", ",", "'T'", ",", "'P'", "]", "[", "magnitude", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.utilis.report_tr": [[23, 32], ["print", "time.time"], "function", ["None"], ["", "def", "report_tr", "(", "res", ",", "e", ",", "sbatch", ",", "clock0", ",", "clock1", ")", ":", "\n", "# Training performance", "\n", "    ", "print", "(", "\n", "'| Epoch {:3d}, time={:5.1f}ms/{:5.1f}ms | Train losses={:.3f} | T: loss={:.3f}, acc={:5.2f}% | D: loss={:.3f}, acc={:5.1f}%, '", "\n", "'Diff loss:{:.3f} |'", ".", "format", "(", "\n", "e", "+", "1", ",", "\n", "1000", "*", "sbatch", "*", "(", "clock1", "-", "clock0", ")", "/", "res", "[", "'size'", "]", ",", "\n", "1000", "*", "sbatch", "*", "(", "time", ".", "time", "(", ")", "-", "clock1", ")", "/", "res", "[", "'size'", "]", ",", "res", "[", "'loss_tot'", "]", ",", "\n", "res", "[", "'loss_t'", "]", ",", "res", "[", "'acc_t'", "]", ",", "res", "[", "'loss_a'", "]", ",", "res", "[", "'acc_d'", "]", ",", "res", "[", "'loss_d'", "]", ")", ",", "end", "=", "''", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.utilis.report_val": [[33, 37], ["print"], "function", ["None"], ["", "def", "report_val", "(", "res", ")", ":", "\n", "# Validation performance", "\n", "    ", "print", "(", "' Valid losses={:.3f} | T: loss={:.6f}, acc={:5.2f}%, | D: loss={:.3f}, acc={:5.2f}%, Diff loss={:.3f} |'", ".", "format", "(", "\n", "res", "[", "'loss_tot'", "]", ",", "res", "[", "'loss_t'", "]", ",", "res", "[", "'acc_t'", "]", ",", "res", "[", "'loss_a'", "]", ",", "res", "[", "'acc_d'", "]", ",", "res", "[", "'loss_d'", "]", ")", ",", "end", "=", "''", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.utilis.get_model": [[41, 43], ["copy.deepcopy", "model.state_dict"], "function", ["None"], ["", "def", "get_model", "(", "model", ")", ":", "\n", "    ", "return", "deepcopy", "(", "model", ".", "state_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.utilis.compute_conv_output_size": [[46, 48], ["int", "numpy.floor", "float"], "function", ["None"], ["", "def", "compute_conv_output_size", "(", "Lin", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ")", ":", "\n", "    ", "return", "int", "(", "np", ".", "floor", "(", "(", "Lin", "+", "2", "*", "padding", "-", "dilation", "*", "(", "kernel_size", "-", "1", ")", "-", "1", ")", "/", "float", "(", "stride", ")", "+", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.utilis.save_print_log": [[51, 106], ["print", "print", "range", "print", "print", "print", "print", "print", "range", "print", "print", "range", "print", "print", "print", "print", "numpy.diag", "print", "print", "range", "print", "print", "print", "print", "print", "sum", "open", "pickle.dump", "os.path.join", "print", "numpy.mean", "len", "os.path.join", "numpy.diag", "numpy.diag", "numpy.diag"], "function", ["None"], ["", "def", "save_print_log", "(", "taskcla", ",", "acc", ",", "lss", ",", "output_path", ")", ":", "\n", "\n", "    ", "print", "(", "'*'", "*", "100", ")", "\n", "print", "(", "'Accuracies ='", ")", "\n", "for", "i", "in", "range", "(", "acc", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "print", "(", "'\\t'", ",", "end", "=", "','", ")", "\n", "for", "j", "in", "range", "(", "acc", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "print", "(", "'{:5.4f}% '", ".", "format", "(", "acc", "[", "i", ",", "j", "]", ")", ",", "end", "=", "','", ")", "\n", "", "print", "(", ")", "\n", "", "print", "(", "'ACC: {:5.4f}%'", ".", "format", "(", "(", "np", ".", "mean", "(", "acc", "[", "acc", ".", "shape", "[", "0", "]", "-", "1", ",", ":", "]", ")", ")", ")", ")", "\n", "print", "(", ")", "\n", "\n", "print", "(", "'BWD Transfer = '", ")", "\n", "\n", "print", "(", ")", "\n", "print", "(", "\"Diagonal R_ii\"", ")", "\n", "for", "i", "in", "range", "(", "acc", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "print", "(", "'\\t'", ",", "end", "=", "''", ")", "\n", "print", "(", "'{:5.2f}% '", ".", "format", "(", "np", ".", "diag", "(", "acc", ")", "[", "i", "]", ")", ",", "end", "=", "','", ")", "\n", "\n", "\n", "", "print", "(", ")", "\n", "print", "(", "\"Last row\"", ")", "\n", "for", "i", "in", "range", "(", "acc", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "print", "(", "'\\t'", ",", "end", "=", "','", ")", "\n", "print", "(", "'{:5.2f}% '", ".", "format", "(", "acc", "[", "-", "1", "]", "[", "i", "]", ")", ",", "end", "=", "','", ")", "\n", "\n", "", "print", "(", ")", "\n", "# BWT calculated based on GEM paper (https://arxiv.org/abs/1706.08840)", "\n", "gem_bwt", "=", "sum", "(", "acc", "[", "-", "1", "]", "-", "np", ".", "diag", "(", "acc", ")", ")", "/", "(", "len", "(", "acc", "[", "-", "1", "]", ")", "-", "1", ")", "\n", "# BWT calculated based on our UCB paper (https://openreview.net/pdf?id=HklUCCVKDB)", "\n", "ucb_bwt", "=", "(", "acc", "[", "-", "1", "]", "-", "np", ".", "diag", "(", "acc", ")", ")", ".", "mean", "(", ")", "\n", "print", "(", "'BWT: {:5.2f}%'", ".", "format", "(", "gem_bwt", ")", ")", "\n", "# print ('BWT (UCB paper): {:5.2f}%'.format(ucb_bwt))", "\n", "\n", "print", "(", "'*'", "*", "100", ")", "\n", "print", "(", "'Done!'", ")", "\n", "\n", "\n", "logs", "=", "{", "}", "\n", "# save results", "\n", "logs", "[", "'name'", "]", "=", "output_path", "\n", "logs", "[", "'taskcla'", "]", "=", "taskcla", "\n", "logs", "[", "'acc'", "]", "=", "acc", "\n", "logs", "[", "'loss'", "]", "=", "lss", "\n", "logs", "[", "'gem_bwt'", "]", "=", "gem_bwt", "\n", "logs", "[", "'ucb_bwt'", "]", "=", "ucb_bwt", "\n", "logs", "[", "'rii'", "]", "=", "np", ".", "diag", "(", "acc", ")", "\n", "logs", "[", "'rij'", "]", "=", "acc", "[", "-", "1", "]", "\n", "\n", "# pickle", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "output_path", ",", "'logs.p'", ")", ",", "'wb'", ")", "as", "output", ":", "\n", "        ", "pickle", ".", "dump", "(", "logs", ",", "output", ")", "\n", "\n", "", "print", "(", "\"Log file saved in \"", ",", "os", ".", "path", ".", "join", "(", "output_path", ",", "'logs.p'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.utilis.print_log_acc_bwt": [[108, 151], ["print", "print", "range", "numpy.mean", "print", "print", "print", "print", "print", "print", "numpy.diag", "os.path.join", "print", "print", "range", "print", "sum", "open", "pickle.dump", "print", "len", "numpy.diag", "numpy.diag"], "function", ["None"], ["", "def", "print_log_acc_bwt", "(", "taskcla", ",", "acc", ",", "lss", ",", "output_path", ",", "run_id", ")", ":", "\n", "\n", "    ", "print", "(", "'*'", "*", "100", ")", "\n", "print", "(", "'Accuracies ='", ")", "\n", "for", "i", "in", "range", "(", "acc", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "print", "(", "'\\t'", ",", "end", "=", "','", ")", "\n", "for", "j", "in", "range", "(", "acc", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "print", "(", "'{:5.4f}% '", ".", "format", "(", "acc", "[", "i", ",", "j", "]", ")", ",", "end", "=", "','", ")", "\n", "", "print", "(", ")", "\n", "\n", "", "avg_acc", "=", "np", ".", "mean", "(", "acc", "[", "acc", ".", "shape", "[", "0", "]", "-", "1", ",", ":", "]", ")", "\n", "print", "(", "'ACC: {:5.4f}%'", ".", "format", "(", "avg_acc", ")", ")", "\n", "print", "(", ")", "\n", "print", "(", ")", "\n", "# BWT calculated based on GEM paper (https://arxiv.org/abs/1706.08840)", "\n", "gem_bwt", "=", "sum", "(", "acc", "[", "-", "1", "]", "-", "np", ".", "diag", "(", "acc", ")", ")", "/", "(", "len", "(", "acc", "[", "-", "1", "]", ")", "-", "1", ")", "\n", "# BWT calculated based on UCB paper (https://arxiv.org/abs/1906.02425)", "\n", "ucb_bwt", "=", "(", "acc", "[", "-", "1", "]", "-", "np", ".", "diag", "(", "acc", ")", ")", ".", "mean", "(", ")", "\n", "print", "(", "'BWT: {:5.2f}%'", ".", "format", "(", "gem_bwt", ")", ")", "\n", "# print ('BWT (UCB paper): {:5.2f}%'.format(ucb_bwt))", "\n", "\n", "print", "(", "'*'", "*", "100", ")", "\n", "print", "(", "'Done!'", ")", "\n", "\n", "\n", "logs", "=", "{", "}", "\n", "# save results", "\n", "logs", "[", "'name'", "]", "=", "output_path", "\n", "logs", "[", "'taskcla'", "]", "=", "taskcla", "\n", "logs", "[", "'acc'", "]", "=", "acc", "\n", "logs", "[", "'loss'", "]", "=", "lss", "\n", "logs", "[", "'gem_bwt'", "]", "=", "gem_bwt", "\n", "logs", "[", "'ucb_bwt'", "]", "=", "ucb_bwt", "\n", "logs", "[", "'rii'", "]", "=", "np", ".", "diag", "(", "acc", ")", "\n", "logs", "[", "'rij'", "]", "=", "acc", "[", "-", "1", "]", "\n", "\n", "# pickle", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "output_path", ",", "'logs_run_id_{}.p'", ".", "format", "(", "run_id", ")", ")", "\n", "with", "open", "(", "path", ",", "'wb'", ")", "as", "output", ":", "\n", "        ", "pickle", ".", "dump", "(", "logs", ",", "output", ")", "\n", "\n", "", "print", "(", "\"Log file saved in \"", ",", "path", ")", "\n", "return", "avg_acc", ",", "gem_bwt", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.utilis.print_running_acc_bwt": [[153, 160], ["print", "numpy.mean", "print", "print", "sum", "len", "numpy.diag"], "function", ["None"], ["", "def", "print_running_acc_bwt", "(", "acc", ",", "task_num", ")", ":", "\n", "    ", "print", "(", ")", "\n", "acc", "=", "acc", "[", ":", "task_num", "+", "1", ",", ":", "task_num", "+", "1", "]", "\n", "avg_acc", "=", "np", ".", "mean", "(", "acc", "[", "acc", ".", "shape", "[", "0", "]", "-", "1", ",", ":", "]", ")", "\n", "gem_bwt", "=", "sum", "(", "acc", "[", "-", "1", "]", "-", "np", ".", "diag", "(", "acc", ")", ")", "/", "(", "len", "(", "acc", "[", "-", "1", "]", ")", "-", "1", ")", "\n", "print", "(", "'ACC: {:5.4f}%  || BWT: {:5.2f}% '", ".", "format", "(", "avg_acc", ",", "gem_bwt", ")", ")", "\n", "print", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.utilis.make_directories": [[162, 173], ["uuid.uuid4", "os.mkdir", "os.path.join", "os.mkdir", "os.path.join", "os.mkdir", "os.path.exists", "os.mkdir"], "function", ["None"], ["", "def", "make_directories", "(", "args", ")", ":", "\n", "    ", "uid", "=", "uuid", ".", "uuid4", "(", ")", ".", "hex", "\n", "if", "args", ".", "checkpoint", "is", "None", ":", "\n", "        ", "os", ".", "mkdir", "(", "'checkpoints'", ")", "\n", "args", ".", "checkpoint", "=", "os", ".", "path", ".", "join", "(", "'./checkpoints/'", ",", "uid", ")", "\n", "os", ".", "mkdir", "(", "args", ".", "checkpoint", ")", "\n", "", "else", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "checkpoint", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "args", ".", "checkpoint", ")", "\n", "", "args", ".", "checkpoint", "=", "os", ".", "path", ".", "join", "(", "args", ".", "checkpoint", ",", "uid", ")", "\n", "os", ".", "mkdir", "(", "args", ".", "checkpoint", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.utilis.some_sanity_checks": [[177, 196], ["Exception", "Exception", "Exception"], "function", ["None"], ["", "", "def", "some_sanity_checks", "(", "args", ")", ":", "\n", "# Making sure the chosen experiment matches with the number of tasks performed in the paper:", "\n", "    ", "datasets_tasks", "=", "{", "}", "\n", "datasets_tasks", "[", "'mnist5'", "]", "=", "[", "5", "]", "\n", "datasets_tasks", "[", "'pmnist'", "]", "=", "[", "10", ",", "20", ",", "30", ",", "40", "]", "\n", "datasets_tasks", "[", "'cifar100'", "]", "=", "[", "20", "]", "\n", "datasets_tasks", "[", "'miniimagenet'", "]", "=", "[", "20", "]", "\n", "datasets_tasks", "[", "'multidatasets'", "]", "=", "[", "5", "]", "\n", "\n", "\n", "if", "not", "args", ".", "ntasks", "in", "datasets_tasks", "[", "args", ".", "experiment", "]", ":", "\n", "        ", "raise", "Exception", "(", "\"Chosen number of tasks ({}) does not match with {} experiment\"", ".", "format", "(", "args", ".", "ntasks", ",", "args", ".", "experiment", ")", ")", "\n", "\n", "# Making sure if memory usage is happenning:", "\n", "", "if", "args", ".", "use_memory", "==", "'yes'", "and", "not", "args", ".", "samples", ">", "0", ":", "\n", "        ", "raise", "Exception", "(", "\"Flags required to use memory: --use_memory yes --samples n where n>0\"", ")", "\n", "\n", "", "if", "args", ".", "use_memory", "==", "'no'", "and", "args", ".", "samples", ">", "0", ":", "\n", "        ", "raise", "Exception", "(", "\"Flags required to use memory: --use_memory yes --samples n where n>0\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.utilis.save_code": [[199, 212], ["os.getcwd", "os.path.join", "os.path.exists", "os.mkdir", "os.path.join", "utilis.save_code.get_folder"], "function", ["None"], ["", "", "def", "save_code", "(", "args", ")", ":", "\n", "    ", "cwd", "=", "os", ".", "getcwd", "(", ")", "\n", "des", "=", "os", ".", "path", ".", "join", "(", "args", ".", "checkpoint", ",", "'code'", ")", "+", "'/'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "des", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "des", ")", "\n", "\n", "", "def", "get_folder", "(", "folder", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "cwd", ",", "folder", ")", "\n", "\n", "", "folders", "=", "[", "get_folder", "(", "item", ")", "for", "item", "in", "[", "'dataloaders'", ",", "'networks'", ",", "'configs'", ",", "'main.py'", ",", "'acl.py'", ",", "'utils.py'", "]", "]", "\n", "\n", "for", "folder", "in", "folders", ":", "\n", "        ", "call", "(", "'cp -rf {} {}'", ".", "format", "(", "folder", ",", "des", ")", ",", "shell", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.None.utilis.print_time": [[214, 223], ["datetime.now", "datetime.now.strftime", "print"], "function", ["None"], ["", "", "def", "print_time", "(", ")", ":", "\n", "    ", "from", "datetime", "import", "datetime", "\n", "\n", "# datetime object containing current date and time", "\n", "now", "=", "datetime", ".", "now", "(", ")", "\n", "\n", "# dd/mm/YY H:M:S", "\n", "dt_string", "=", "now", ".", "strftime", "(", "\"%d/%m/%Y %H:%M:%S\"", ")", "\n", "print", "(", "\"Job finished at =\"", ",", "dt_string", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.LYang-666_TRGP.dataloader.cifar100.get": [[11, 88], ["list", "print", "range", "data.keys", "data.keys", "os.path.isdir", "os.makedirs", "torchvision.datasets.CIFAR100", "torchvision.datasets.CIFAR100", "range", "data.keys", "numpy.arange", "dict.fromkeys", "len", "numpy.arange", "numpy.array", "int", "torch.LongTensor", "torch.LongTensor", "[].clone", "[].clone", "[].clone", "[].clone", "taskcla.append", "torch.utils.data.DataLoader", "torch.load", "torch.load", "numpy.unique", "[].size", "sklearn.utils.shuffle", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "[].append", "[].append", "torch.stack().view", "torch.LongTensor().view", "torch.save", "torch.save", "os.path.join", "os.path.join", "[].numpy", "str", "str", "len", "target.numpy", "os.path.join", "os.path.join", "os.path.expanduser", "os.path.expanduser", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torch.stack", "torch.LongTensor", "os.path.expanduser", "os.path.expanduser", "numpy.array", "str", "str", "str", "str"], "function", ["None"], ["def", "get", "(", "seed", "=", "0", ",", "pc_valid", "=", "0.10", ")", ":", "\n", "    ", "data", "=", "{", "}", "\n", "taskcla", "=", "[", "]", "\n", "size", "=", "[", "3", ",", "32", ",", "32", "]", "\n", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "file_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "file_dir", ")", "\n", "\n", "mean", "=", "[", "x", "/", "255", "for", "x", "in", "[", "125.3", ",", "123.0", ",", "113.9", "]", "]", "\n", "std", "=", "[", "x", "/", "255", "for", "x", "in", "[", "63.0", ",", "62.1", ",", "66.7", "]", "]", "\n", "\n", "# CIFAR100", "\n", "dat", "=", "{", "}", "\n", "dat", "[", "'train'", "]", "=", "datasets", ".", "CIFAR100", "(", "cf100_dir", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", ",", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", "]", ")", ")", "\n", "dat", "[", "'test'", "]", "=", "datasets", ".", "CIFAR100", "(", "cf100_dir", ",", "train", "=", "False", ",", "download", "=", "True", ",", "transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", ",", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", "]", ")", ")", "\n", "# dat['train'] = datasets.CIFAR100(cf100_dir,train=True,download=False,transform=transforms.Compose([transforms.ToTensor()]))", "\n", "# dat['test']  = datasets.CIFAR100(cf100_dir,train=False,download=False,transform=transforms.Compose([transforms.ToTensor()]))", "\n", "for", "n", "in", "range", "(", "10", ")", ":", "\n", "            ", "data", "[", "n", "]", "=", "{", "}", "\n", "data", "[", "n", "]", "[", "'name'", "]", "=", "'cifar100'", "\n", "data", "[", "n", "]", "[", "'ncla'", "]", "=", "10", "\n", "data", "[", "n", "]", "[", "'train'", "]", "=", "{", "'x'", ":", "[", "]", ",", "'y'", ":", "[", "]", "}", "\n", "data", "[", "n", "]", "[", "'test'", "]", "=", "{", "'x'", ":", "[", "]", ",", "'y'", ":", "[", "]", "}", "\n", "", "for", "s", "in", "[", "'train'", ",", "'test'", "]", ":", "\n", "            ", "loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dat", "[", "s", "]", ",", "batch_size", "=", "1", ",", "shuffle", "=", "False", ")", "\n", "for", "image", ",", "target", "in", "loader", ":", "\n", "                ", "n", "=", "target", ".", "numpy", "(", ")", "[", "0", "]", "\n", "nn", "=", "(", "n", "//", "10", ")", "\n", "data", "[", "nn", "]", "[", "s", "]", "[", "'x'", "]", ".", "append", "(", "image", ")", "# 255 ", "\n", "data", "[", "nn", "]", "[", "s", "]", "[", "'y'", "]", ".", "append", "(", "n", "%", "10", ")", "\n", "\n", "# \"Unify\" and save", "\n", "", "", "for", "t", "in", "data", ".", "keys", "(", ")", ":", "\n", "            ", "for", "s", "in", "[", "'train'", ",", "'test'", "]", ":", "\n", "                ", "data", "[", "t", "]", "[", "s", "]", "[", "'x'", "]", "=", "torch", ".", "stack", "(", "data", "[", "t", "]", "[", "s", "]", "[", "'x'", "]", ")", ".", "view", "(", "-", "1", ",", "size", "[", "0", "]", ",", "size", "[", "1", "]", ",", "size", "[", "2", "]", ")", "\n", "data", "[", "t", "]", "[", "s", "]", "[", "'y'", "]", "=", "torch", ".", "LongTensor", "(", "np", ".", "array", "(", "data", "[", "t", "]", "[", "s", "]", "[", "'y'", "]", ",", "dtype", "=", "int", ")", ")", ".", "view", "(", "-", "1", ")", "\n", "torch", ".", "save", "(", "data", "[", "t", "]", "[", "s", "]", "[", "'x'", "]", ",", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "expanduser", "(", "file_dir", ")", ",", "'data'", "+", "str", "(", "t", ")", "+", "s", "+", "'x.bin'", ")", ")", "\n", "torch", ".", "save", "(", "data", "[", "t", "]", "[", "s", "]", "[", "'y'", "]", ",", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "expanduser", "(", "file_dir", ")", ",", "'data'", "+", "str", "(", "t", ")", "+", "s", "+", "'y.bin'", ")", ")", "\n", "\n", "# Load binary files", "\n", "", "", "", "data", "=", "{", "}", "\n", "# ids=list(shuffle(np.arange(5),random_state=seed))", "\n", "ids", "=", "list", "(", "np", ".", "arange", "(", "10", ")", ")", "\n", "print", "(", "'Task order ='", ",", "ids", ")", "\n", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "        ", "data", "[", "i", "]", "=", "dict", ".", "fromkeys", "(", "[", "'name'", ",", "'ncla'", ",", "'train'", ",", "'test'", "]", ")", "\n", "for", "s", "in", "[", "'train'", ",", "'test'", "]", ":", "\n", "            ", "data", "[", "i", "]", "[", "s", "]", "=", "{", "'x'", ":", "[", "]", ",", "'y'", ":", "[", "]", "}", "\n", "data", "[", "i", "]", "[", "s", "]", "[", "'x'", "]", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "expanduser", "(", "file_dir", ")", ",", "'data'", "+", "str", "(", "ids", "[", "i", "]", ")", "+", "s", "+", "'x.bin'", ")", ")", "\n", "data", "[", "i", "]", "[", "s", "]", "[", "'y'", "]", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "expanduser", "(", "file_dir", ")", ",", "'data'", "+", "str", "(", "ids", "[", "i", "]", ")", "+", "s", "+", "'y.bin'", ")", ")", "\n", "", "data", "[", "i", "]", "[", "'ncla'", "]", "=", "len", "(", "np", ".", "unique", "(", "data", "[", "i", "]", "[", "'train'", "]", "[", "'y'", "]", ".", "numpy", "(", ")", ")", ")", "\n", "if", "data", "[", "i", "]", "[", "'ncla'", "]", "==", "2", ":", "\n", "            ", "data", "[", "i", "]", "[", "'name'", "]", "=", "'cifar10-'", "+", "str", "(", "ids", "[", "i", "]", ")", "\n", "", "else", ":", "\n", "            ", "data", "[", "i", "]", "[", "'name'", "]", "=", "'cifar100-'", "+", "str", "(", "ids", "[", "i", "]", ")", "\n", "\n", "# Validation", "\n", "", "", "for", "t", "in", "data", ".", "keys", "(", ")", ":", "\n", "        ", "r", "=", "np", ".", "arange", "(", "data", "[", "t", "]", "[", "'train'", "]", "[", "'x'", "]", ".", "size", "(", "0", ")", ")", "\n", "r", "=", "np", ".", "array", "(", "shuffle", "(", "r", ",", "random_state", "=", "seed", ")", ",", "dtype", "=", "int", ")", "\n", "nvalid", "=", "int", "(", "pc_valid", "*", "len", "(", "r", ")", ")", "\n", "ivalid", "=", "torch", ".", "LongTensor", "(", "r", "[", ":", "nvalid", "]", ")", "\n", "itrain", "=", "torch", ".", "LongTensor", "(", "r", "[", "nvalid", ":", "]", ")", "\n", "data", "[", "t", "]", "[", "'valid'", "]", "=", "{", "}", "\n", "data", "[", "t", "]", "[", "'valid'", "]", "[", "'x'", "]", "=", "data", "[", "t", "]", "[", "'train'", "]", "[", "'x'", "]", "[", "ivalid", "]", ".", "clone", "(", ")", "\n", "data", "[", "t", "]", "[", "'valid'", "]", "[", "'y'", "]", "=", "data", "[", "t", "]", "[", "'train'", "]", "[", "'y'", "]", "[", "ivalid", "]", ".", "clone", "(", ")", "\n", "data", "[", "t", "]", "[", "'train'", "]", "[", "'x'", "]", "=", "data", "[", "t", "]", "[", "'train'", "]", "[", "'x'", "]", "[", "itrain", "]", ".", "clone", "(", ")", "\n", "data", "[", "t", "]", "[", "'train'", "]", "[", "'y'", "]", "=", "data", "[", "t", "]", "[", "'train'", "]", "[", "'y'", "]", "[", "itrain", "]", ".", "clone", "(", ")", "\n", "\n", "# Others", "\n", "", "n", "=", "0", "\n", "for", "t", "in", "data", ".", "keys", "(", ")", ":", "\n", "        ", "taskcla", ".", "append", "(", "(", "t", ",", "data", "[", "t", "]", "[", "'ncla'", "]", ")", ")", "\n", "n", "+=", "data", "[", "t", "]", "[", "'ncla'", "]", "\n", "", "data", "[", "'ncla'", "]", "=", "n", "\n", "\n", "return", "data", ",", "taskcla", ",", "size", "\n", "", ""]], "home.repos.pwc.inspect_result.LYang-666_TRGP.dataloader.pmnist.get": [[11, 92], ["numpy.array", "data.keys", "data.keys", "list", "sklearn.utils.shuffle", "os.path.isdir", "os.makedirs", "torchvision.datasets.MNIST", "torchvision.datasets.MNIST", "enumerate", "print", "enumerate", "numpy.arange", "numpy.array", "int", "torch.LongTensor", "torch.LongTensor", "[].clone", "[].clone", "[].clone", "[].clone", "taskcla.append", "range", "print", "sys.stdout.flush", "dict.fromkeys", "[].size", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torch.utils.data.DataLoader", "torch.stack().view", "torch.LongTensor().view", "torch.save", "torch.save", "torch.load", "torch.load", "len", "torch.FloatTensor().view.view().numpy", "sklearn.utils.shuffle", "torch.FloatTensor().view", "[].append", "[].append", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torch.stack", "torch.LongTensor", "os.path.expanduser", "os.path.expanduser", "os.path.expanduser", "os.path.expanduser", "torch.FloatTensor().view.view", "torch.FloatTensor", "target.numpy", "numpy.array", "str", "str", "str", "str"], "function", ["None"], ["def", "get", "(", "seed", "=", "0", ",", "fixed_order", "=", "False", ",", "pc_valid", "=", "0.1", ")", ":", "\n", "    ", "data", "=", "{", "}", "\n", "taskcla", "=", "[", "]", "\n", "size", "=", "[", "1", ",", "28", ",", "28", "]", "\n", "\n", "nperm", "=", "10", "# 10 tasks", "\n", "seeds", "=", "np", ".", "array", "(", "list", "(", "range", "(", "nperm", ")", ")", ",", "dtype", "=", "int", ")", "\n", "if", "not", "fixed_order", ":", "\n", "        ", "seeds", "=", "shuffle", "(", "seeds", ",", "random_state", "=", "seed", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "pmnist_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "pmnist_dir", ")", "\n", "# Pre-load", "\n", "# MNIST", "\n", "mean", "=", "(", "0.1307", ",", ")", "\n", "std", "=", "(", "0.3081", ",", ")", "\n", "dat", "=", "{", "}", "\n", "dat", "[", "'train'", "]", "=", "datasets", ".", "MNIST", "(", "mnist_dir", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "transforms", ".", "ToTensor", "(", ")", ",", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", "]", ")", ")", "\n", "dat", "[", "'test'", "]", "=", "datasets", ".", "MNIST", "(", "mnist_dir", ",", "train", "=", "False", ",", "download", "=", "True", ",", "transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "transforms", ".", "ToTensor", "(", ")", ",", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", "]", ")", ")", "\n", "for", "i", ",", "r", "in", "enumerate", "(", "seeds", ")", ":", "\n", "            ", "print", "(", "i", ",", "end", "=", "','", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "data", "[", "i", "]", "=", "{", "}", "\n", "data", "[", "i", "]", "[", "'name'", "]", "=", "'pmnist-{:d}'", ".", "format", "(", "i", ")", "\n", "data", "[", "i", "]", "[", "'ncla'", "]", "=", "10", "\n", "for", "s", "in", "[", "'train'", ",", "'test'", "]", ":", "\n", "                ", "loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dat", "[", "s", "]", ",", "batch_size", "=", "1", ",", "shuffle", "=", "False", ")", "\n", "data", "[", "i", "]", "[", "s", "]", "=", "{", "'x'", ":", "[", "]", ",", "'y'", ":", "[", "]", "}", "\n", "for", "image", ",", "target", "in", "loader", ":", "\n", "                    ", "aux", "=", "image", ".", "view", "(", "-", "1", ")", ".", "numpy", "(", ")", "\n", "aux", "=", "shuffle", "(", "aux", ",", "random_state", "=", "r", "*", "100", "+", "i", ")", "\n", "image", "=", "torch", ".", "FloatTensor", "(", "aux", ")", ".", "view", "(", "size", ")", "\n", "data", "[", "i", "]", "[", "s", "]", "[", "'x'", "]", ".", "append", "(", "image", ")", "\n", "data", "[", "i", "]", "[", "s", "]", "[", "'y'", "]", ".", "append", "(", "target", ".", "numpy", "(", ")", "[", "0", "]", ")", "\n", "\n", "# \"Unify\" and save", "\n", "", "", "for", "s", "in", "[", "'train'", ",", "'test'", "]", ":", "\n", "                ", "data", "[", "i", "]", "[", "s", "]", "[", "'x'", "]", "=", "torch", ".", "stack", "(", "data", "[", "i", "]", "[", "s", "]", "[", "'x'", "]", ")", ".", "view", "(", "-", "1", ",", "size", "[", "0", "]", ",", "size", "[", "1", "]", ",", "size", "[", "2", "]", ")", "\n", "data", "[", "i", "]", "[", "s", "]", "[", "'y'", "]", "=", "torch", ".", "LongTensor", "(", "np", ".", "array", "(", "data", "[", "i", "]", "[", "s", "]", "[", "'y'", "]", ",", "dtype", "=", "int", ")", ")", ".", "view", "(", "-", "1", ")", "\n", "torch", ".", "save", "(", "data", "[", "i", "]", "[", "s", "]", "[", "'x'", "]", ",", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "expanduser", "(", "pmnist_dir", ")", ",", "'data'", "+", "str", "(", "r", ")", "+", "s", "+", "'x.bin'", ")", ")", "\n", "torch", ".", "save", "(", "data", "[", "i", "]", "[", "s", "]", "[", "'y'", "]", ",", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "expanduser", "(", "pmnist_dir", ")", ",", "'data'", "+", "str", "(", "r", ")", "+", "s", "+", "'y.bin'", ")", ")", "\n", "", "", "print", "(", ")", "\n", "\n", "", "else", ":", "\n", "\n", "# Load binary files", "\n", "        ", "for", "i", ",", "r", "in", "enumerate", "(", "seeds", ")", ":", "\n", "            ", "data", "[", "i", "]", "=", "dict", ".", "fromkeys", "(", "[", "'name'", ",", "'ncla'", ",", "'train'", ",", "'test'", "]", ")", "\n", "data", "[", "i", "]", "[", "'ncla'", "]", "=", "10", "\n", "data", "[", "i", "]", "[", "'name'", "]", "=", "'pmnist-{:d}'", ".", "format", "(", "i", ")", "\n", "\n", "# Load", "\n", "for", "s", "in", "[", "'train'", ",", "'test'", "]", ":", "\n", "                ", "data", "[", "i", "]", "[", "s", "]", "=", "{", "'x'", ":", "[", "]", ",", "'y'", ":", "[", "]", "}", "\n", "data", "[", "i", "]", "[", "s", "]", "[", "'x'", "]", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "expanduser", "(", "pmnist_dir", ")", ",", "'data'", "+", "str", "(", "r", ")", "+", "s", "+", "'x.bin'", ")", ")", "\n", "data", "[", "i", "]", "[", "s", "]", "[", "'y'", "]", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "expanduser", "(", "pmnist_dir", ")", ",", "'data'", "+", "str", "(", "r", ")", "+", "s", "+", "'y.bin'", ")", ")", "\n", "\n", "# Validation", "\n", "", "", "", "for", "t", "in", "data", ".", "keys", "(", ")", ":", "\n", "        ", "r", "=", "np", ".", "arange", "(", "data", "[", "t", "]", "[", "'train'", "]", "[", "'x'", "]", ".", "size", "(", "0", ")", ")", "\n", "# r=np.array(shuffle(r,random_state=seed),dtype=int)", "\n", "r", "=", "np", ".", "array", "(", "r", ",", "dtype", "=", "int", ")", "\n", "nvalid", "=", "int", "(", "pc_valid", "*", "len", "(", "r", ")", ")", "\n", "ivalid", "=", "torch", ".", "LongTensor", "(", "r", "[", ":", "nvalid", "]", ")", "\n", "itrain", "=", "torch", ".", "LongTensor", "(", "r", "[", "nvalid", ":", "]", ")", "\n", "data", "[", "t", "]", "[", "'valid'", "]", "=", "{", "}", "\n", "data", "[", "t", "]", "[", "'valid'", "]", "[", "'x'", "]", "=", "data", "[", "t", "]", "[", "'train'", "]", "[", "'x'", "]", "[", "ivalid", "]", ".", "clone", "(", ")", "\n", "data", "[", "t", "]", "[", "'valid'", "]", "[", "'y'", "]", "=", "data", "[", "t", "]", "[", "'train'", "]", "[", "'y'", "]", "[", "ivalid", "]", ".", "clone", "(", ")", "\n", "data", "[", "t", "]", "[", "'train'", "]", "[", "'x'", "]", "=", "data", "[", "t", "]", "[", "'train'", "]", "[", "'x'", "]", "[", "itrain", "]", ".", "clone", "(", ")", "\n", "data", "[", "t", "]", "[", "'train'", "]", "[", "'y'", "]", "=", "data", "[", "t", "]", "[", "'train'", "]", "[", "'y'", "]", "[", "itrain", "]", ".", "clone", "(", ")", "\n", "\n", "# Others", "\n", "", "n", "=", "0", "\n", "for", "t", "in", "data", ".", "keys", "(", ")", ":", "\n", "        ", "taskcla", ".", "append", "(", "(", "t", ",", "data", "[", "t", "]", "[", "'ncla'", "]", ")", ")", "\n", "n", "+=", "data", "[", "t", "]", "[", "'ncla'", "]", "\n", "", "data", "[", "'ncla'", "]", "=", "n", "\n", "\n", "return", "data", ",", "taskcla", ",", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.dataloader.miniimagenet_our.get": [[11, 88], ["list", "print", "range", "data.keys", "data.keys", "os.path.isdir", "os.makedirs", "torchvision.datasets.CIFAR100", "torchvision.datasets.CIFAR100", "range", "data.keys", "numpy.arange", "dict.fromkeys", "len", "numpy.arange", "numpy.array", "int", "torch.LongTensor", "torch.LongTensor", "[].clone", "[].clone", "[].clone", "[].clone", "taskcla.append", "torch.utils.data.DataLoader", "torch.load", "torch.load", "numpy.unique", "[].size", "sklearn.utils.shuffle", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "[].append", "[].append", "torch.stack().view", "torch.LongTensor().view", "torch.save", "torch.save", "os.path.join", "os.path.join", "[].numpy", "str", "str", "len", "target.numpy", "os.path.join", "os.path.join", "os.path.expanduser", "os.path.expanduser", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torch.stack", "torch.LongTensor", "os.path.expanduser", "os.path.expanduser", "numpy.array", "str", "str", "str", "str"], "function", ["None"], ["def", "get", "(", "seed", "=", "0", ",", "pc_valid", "=", "0.2", ")", ":", "\n", "    ", "data", "=", "{", "}", "\n", "taskcla", "=", "[", "]", "\n", "size", "=", "[", "3", ",", "84", ",", "84", "]", "\n", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "file_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "file_dir", ")", "\n", "\n", "# mean=[x/255 for x in [125.3,123.0,113.9]]", "\n", "# std=[x/255 for x in [63.0,62.1,66.7]]", "\n", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", "\n", "# CIFAR100", "\n", "dat", "=", "{", "}", "\n", "dat", "[", "'train'", "]", "=", "datasets", ".", "CIFAR100", "(", "cf100_dir", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", ",", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", "]", ")", ")", "\n", "dat", "[", "'test'", "]", "=", "datasets", ".", "CIFAR100", "(", "cf100_dir", ",", "train", "=", "False", ",", "download", "=", "True", ",", "transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", ",", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", "]", ")", ")", "\n", "\n", "for", "n", "in", "range", "(", "20", ")", ":", "\n", "            ", "data", "[", "n", "]", "=", "{", "}", "\n", "data", "[", "n", "]", "[", "'name'", "]", "=", "'miniimagenet'", "\n", "data", "[", "n", "]", "[", "'ncla'", "]", "=", "20", "\n", "data", "[", "n", "]", "[", "'train'", "]", "=", "{", "'x'", ":", "[", "]", ",", "'y'", ":", "[", "]", "}", "\n", "data", "[", "n", "]", "[", "'test'", "]", "=", "{", "'x'", ":", "[", "]", ",", "'y'", ":", "[", "]", "}", "\n", "", "for", "s", "in", "[", "'train'", ",", "'test'", "]", ":", "\n", "            ", "loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dat", "[", "s", "]", ",", "batch_size", "=", "1", ",", "shuffle", "=", "False", ")", "\n", "for", "image", ",", "target", "in", "loader", ":", "\n", "                ", "n", "=", "target", ".", "numpy", "(", ")", "[", "0", "]", "\n", "nn", "=", "(", "n", "//", "20", ")", "\n", "data", "[", "nn", "]", "[", "s", "]", "[", "'x'", "]", ".", "append", "(", "image", ")", "# 255 ", "\n", "data", "[", "nn", "]", "[", "s", "]", "[", "'y'", "]", ".", "append", "(", "n", "%", "20", ")", "\n", "\n", "# \"Unify\" and save", "\n", "", "", "for", "t", "in", "data", ".", "keys", "(", ")", ":", "\n", "            ", "for", "s", "in", "[", "'train'", ",", "'test'", "]", ":", "\n", "                ", "data", "[", "t", "]", "[", "s", "]", "[", "'x'", "]", "=", "torch", ".", "stack", "(", "data", "[", "t", "]", "[", "s", "]", "[", "'x'", "]", ")", ".", "view", "(", "-", "1", ",", "size", "[", "0", "]", ",", "size", "[", "1", "]", ",", "size", "[", "2", "]", ")", "\n", "data", "[", "t", "]", "[", "s", "]", "[", "'y'", "]", "=", "torch", ".", "LongTensor", "(", "np", ".", "array", "(", "data", "[", "t", "]", "[", "s", "]", "[", "'y'", "]", ",", "dtype", "=", "int", ")", ")", ".", "view", "(", "-", "1", ")", "\n", "torch", ".", "save", "(", "data", "[", "t", "]", "[", "s", "]", "[", "'x'", "]", ",", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "expanduser", "(", "file_dir", ")", ",", "'data'", "+", "str", "(", "t", ")", "+", "s", "+", "'x.bin'", ")", ")", "\n", "torch", ".", "save", "(", "data", "[", "t", "]", "[", "s", "]", "[", "'y'", "]", ",", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "expanduser", "(", "file_dir", ")", ",", "'data'", "+", "str", "(", "t", ")", "+", "s", "+", "'y.bin'", ")", ")", "\n", "\n", "# Load binary files", "\n", "", "", "", "data", "=", "{", "}", "\n", "# ids=list(shuffle(np.arange(5),random_state=seed))", "\n", "ids", "=", "list", "(", "np", ".", "arange", "(", "20", ")", ")", "\n", "print", "(", "'Task order ='", ",", "ids", ")", "\n", "for", "i", "in", "range", "(", "20", ")", ":", "\n", "        ", "data", "[", "i", "]", "=", "dict", ".", "fromkeys", "(", "[", "'name'", ",", "'ncla'", ",", "'train'", ",", "'test'", "]", ")", "\n", "for", "s", "in", "[", "'train'", ",", "'test'", "]", ":", "\n", "            ", "data", "[", "i", "]", "[", "s", "]", "=", "{", "'x'", ":", "[", "]", ",", "'y'", ":", "[", "]", "}", "\n", "data", "[", "i", "]", "[", "s", "]", "[", "'x'", "]", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "expanduser", "(", "file_dir", ")", ",", "'data'", "+", "str", "(", "ids", "[", "i", "]", ")", "+", "s", "+", "'x.bin'", ")", ")", "\n", "data", "[", "i", "]", "[", "s", "]", "[", "'y'", "]", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "expanduser", "(", "file_dir", ")", ",", "'data'", "+", "str", "(", "ids", "[", "i", "]", ")", "+", "s", "+", "'y.bin'", ")", ")", "\n", "", "data", "[", "i", "]", "[", "'ncla'", "]", "=", "len", "(", "np", ".", "unique", "(", "data", "[", "i", "]", "[", "'train'", "]", "[", "'y'", "]", ".", "numpy", "(", ")", ")", ")", "\n", "if", "data", "[", "i", "]", "[", "'ncla'", "]", "==", "2", ":", "\n", "            ", "data", "[", "i", "]", "[", "'name'", "]", "=", "'cifar10-'", "+", "str", "(", "ids", "[", "i", "]", ")", "\n", "", "else", ":", "\n", "            ", "data", "[", "i", "]", "[", "'name'", "]", "=", "'cifar100-'", "+", "str", "(", "ids", "[", "i", "]", ")", "\n", "\n", "# Validation", "\n", "", "", "for", "t", "in", "data", ".", "keys", "(", ")", ":", "\n", "        ", "r", "=", "np", ".", "arange", "(", "data", "[", "t", "]", "[", "'train'", "]", "[", "'x'", "]", ".", "size", "(", "0", ")", ")", "\n", "r", "=", "np", ".", "array", "(", "shuffle", "(", "r", ",", "random_state", "=", "seed", ")", ",", "dtype", "=", "int", ")", "\n", "nvalid", "=", "int", "(", "pc_valid", "*", "len", "(", "r", ")", ")", "\n", "ivalid", "=", "torch", ".", "LongTensor", "(", "r", "[", ":", "nvalid", "]", ")", "\n", "itrain", "=", "torch", ".", "LongTensor", "(", "r", "[", "nvalid", ":", "]", ")", "\n", "data", "[", "t", "]", "[", "'valid'", "]", "=", "{", "}", "\n", "data", "[", "t", "]", "[", "'valid'", "]", "[", "'x'", "]", "=", "data", "[", "t", "]", "[", "'train'", "]", "[", "'x'", "]", "[", "ivalid", "]", ".", "clone", "(", ")", "\n", "data", "[", "t", "]", "[", "'valid'", "]", "[", "'y'", "]", "=", "data", "[", "t", "]", "[", "'train'", "]", "[", "'y'", "]", "[", "ivalid", "]", ".", "clone", "(", ")", "\n", "data", "[", "t", "]", "[", "'train'", "]", "[", "'x'", "]", "=", "data", "[", "t", "]", "[", "'train'", "]", "[", "'x'", "]", "[", "itrain", "]", ".", "clone", "(", ")", "\n", "data", "[", "t", "]", "[", "'train'", "]", "[", "'y'", "]", "=", "data", "[", "t", "]", "[", "'train'", "]", "[", "'y'", "]", "[", "itrain", "]", ".", "clone", "(", ")", "\n", "\n", "# Others", "\n", "", "n", "=", "0", "\n", "for", "t", "in", "data", ".", "keys", "(", ")", ":", "\n", "        ", "taskcla", ".", "append", "(", "(", "t", ",", "data", "[", "t", "]", "[", "'ncla'", "]", ")", ")", "\n", "n", "+=", "data", "[", "t", "]", "[", "'ncla'", "]", "\n", "", "data", "[", "'ncla'", "]", "=", "n", "\n", "\n", "return", "data", ",", "taskcla", ",", "size", "\n", "", ""]], "home.repos.pwc.inspect_result.LYang-666_TRGP.dataloader.cifar100_superclass.cifar100_superclass_python": [[14, 171], ["sclass.append", "sclass.append", "sclass.append", "sclass.append", "sclass.append", "sclass.append", "sclass.append", "sclass.append", "sclass.append", "sclass.append", "sclass.append", "sclass.append", "sclass.append", "sclass.append", "sclass.append", "sclass.append", "sclass.append", "sclass.append", "sclass.append", "sclass.append", "torchvision.datasets.CIFAR100", "torchvision.datasets.CIFAR100", "numpy.array", "numpy.array", "open", "pickle.load", "range", "numpy.concatenate", "data.keys", "numpy.float32", "len", "range", "numpy.take", "numpy.take", "enumerate", "torch.FloatTensor", "torch.LongTensor().view", "taskcla.append", "range", "range", "range", "gimages.swapaxes().swapaxes.reshape", "gimages.swapaxes().swapaxes.swapaxes().swapaxes", "numpy.arange", "numpy.array", "int", "torch.LongTensor", "torch.LongTensor", "[].clone", "[].clone", "[].clone", "[].clone", "range", "argsort_sup[].append", "int", "torch.LongTensor", "[].size", "sklearn.utils.shuffle", "len", "gimages.swapaxes().swapaxes.swapaxes", "numpy.array", "len", "len", "numpy.int32"], "function", ["None"], ["def", "cifar100_superclass_python", "(", "task_order", ",", "group", "=", "5", ",", "validation", "=", "False", ",", "val_ratio", "=", "0.05", ",", "flat", "=", "False", ",", "one_hot", "=", "True", ",", "seed", "=", "0", ")", ":", "\n", "    ", "CIFAR100_LABELS_LIST", "=", "[", "\n", "'apple'", ",", "'aquarium_fish'", ",", "'baby'", ",", "'bear'", ",", "'beaver'", ",", "'bed'", ",", "'bee'", ",", "'beetle'", ",", "\n", "'bicycle'", ",", "'bottle'", ",", "'bowl'", ",", "'boy'", ",", "'bridge'", ",", "'bus'", ",", "'butterfly'", ",", "'camel'", ",", "\n", "'can'", ",", "'castle'", ",", "'caterpillar'", ",", "'cattle'", ",", "'chair'", ",", "'chimpanzee'", ",", "'clock'", ",", "\n", "'cloud'", ",", "'cockroach'", ",", "'couch'", ",", "'crab'", ",", "'crocodile'", ",", "'cup'", ",", "'dinosaur'", ",", "\n", "'dolphin'", ",", "'elephant'", ",", "'flatfish'", ",", "'forest'", ",", "'fox'", ",", "'girl'", ",", "'hamster'", ",", "\n", "'house'", ",", "'kangaroo'", ",", "'keyboard'", ",", "'lamp'", ",", "'lawn_mower'", ",", "'leopard'", ",", "'lion'", ",", "\n", "'lizard'", ",", "'lobster'", ",", "'man'", ",", "'maple_tree'", ",", "'motorcycle'", ",", "'mountain'", ",", "'mouse'", ",", "\n", "'mushroom'", ",", "'oak_tree'", ",", "'orange'", ",", "'orchid'", ",", "'otter'", ",", "'palm_tree'", ",", "'pear'", ",", "\n", "'pickup_truck'", ",", "'pine_tree'", ",", "'plain'", ",", "'plate'", ",", "'poppy'", ",", "'porcupine'", ",", "\n", "'possum'", ",", "'rabbit'", ",", "'raccoon'", ",", "'ray'", ",", "'road'", ",", "'rocket'", ",", "'rose'", ",", "\n", "'sea'", ",", "'seal'", ",", "'shark'", ",", "'shrew'", ",", "'skunk'", ",", "'skyscraper'", ",", "'snail'", ",", "'snake'", ",", "\n", "'spider'", ",", "'squirrel'", ",", "'streetcar'", ",", "'sunflower'", ",", "'sweet_pepper'", ",", "'table'", ",", "\n", "'tank'", ",", "'telephone'", ",", "'television'", ",", "'tiger'", ",", "'tractor'", ",", "'train'", ",", "'trout'", ",", "\n", "'tulip'", ",", "'turtle'", ",", "'wardrobe'", ",", "'whale'", ",", "'willow_tree'", ",", "'wolf'", ",", "'woman'", ",", "\n", "'worm'", "\n", "]", "\n", "\n", "sclass", "=", "[", "]", "\n", "sclass", ".", "append", "(", "' beaver, dolphin, otter, seal, whale,'", ")", "#aquatic mammals", "\n", "sclass", ".", "append", "(", "' aquarium_fish, flatfish, ray, shark, trout,'", ")", "#fish", "\n", "sclass", ".", "append", "(", "' orchid, poppy, rose, sunflower, tulip,'", ")", "#flowers", "\n", "sclass", ".", "append", "(", "' bottle, bowl, can, cup, plate,'", ")", "#food", "\n", "sclass", ".", "append", "(", "' apple, mushroom, orange, pear, sweet_pepper,'", ")", "#fruit and vegetables", "\n", "sclass", ".", "append", "(", "' clock, computer keyboard, lamp, telephone, television,'", ")", "#household electrical devices", "\n", "sclass", ".", "append", "(", "' bed, chair, couch, table, wardrobe,'", ")", "#household furniture", "\n", "sclass", ".", "append", "(", "' bee, beetle, butterfly, caterpillar, cockroach,'", ")", "#insects", "\n", "sclass", ".", "append", "(", "' bear, leopard, lion, tiger, wolf,'", ")", "#large carnivores", "\n", "sclass", ".", "append", "(", "' bridge, castle, house, road, skyscraper,'", ")", "#large man-made outdoor things", "\n", "sclass", ".", "append", "(", "' cloud, forest, mountain, plain, sea,'", ")", "#large natural outdoor scenes", "\n", "sclass", ".", "append", "(", "' camel, cattle, chimpanzee, elephant, kangaroo,'", ")", "#large omnivores and herbivores", "\n", "sclass", ".", "append", "(", "' fox, porcupine, possum, raccoon, skunk,'", ")", "#medium-sized mammals", "\n", "sclass", ".", "append", "(", "' crab, lobster, snail, spider, worm,'", ")", "#non-insect invertebrates", "\n", "sclass", ".", "append", "(", "' baby, boy, girl, man, woman,'", ")", "#people", "\n", "sclass", ".", "append", "(", "' crocodile, dinosaur, lizard, snake, turtle,'", ")", "#reptiles", "\n", "sclass", ".", "append", "(", "' hamster, mouse, rabbit, shrew, squirrel,'", ")", "#small mammals", "\n", "sclass", ".", "append", "(", "' maple_tree, oak_tree, palm_tree, pine_tree, willow_tree,'", ")", "#trees", "\n", "sclass", ".", "append", "(", "' bicycle, bus, motorcycle, pickup_truck, train,'", ")", "#vehicles 1", "\n", "sclass", ".", "append", "(", "' lawn_mower, rocket, streetcar, tank, tractor,'", ")", "#vehicles 2", "\n", "\n", "# sclass.append(' apple, aquarium_fish, baby, bear, beaver,')                      #aquatic mammals", "\n", "# sclass.append(' bed, bee, beetle, bicycle, bottle,')               #fish", "\n", "# sclass.append(' bowl, boy, bridge, bus, butterfly,')                    #flowers", "\n", "# sclass.append(' camel, can, castle, caterpillar, cattle,')                            #food", "\n", "# sclass.append(' chair, chimpanzee, clock, cloud, cockroach,')              #fruit and vegetables", "\n", "# sclass.append(' couch, crab, crocodile, cup, dinosaur,')                       #household furniture", "\n", "# sclass.append(' dolphin, elephant, flatfish, forest, fox,')    #household electrical devices", "\n", "# sclass.append(' girl, hamster, house, kangaroo, keyboard,')           #insects", "\n", "# sclass.append(' lamp, lawn_mower, leopard, lion, lizard,')                         #large carnivores", "\n", "# sclass.append(' lobster, man, maple_tree, motorcycle, mountain,')                  #large man-made outdoor things   ", "\n", "# sclass.append(' mouse, mushroom, oak_tree, orange, orchid,')                      #large natural outdoor scenes    ", "\n", "# sclass.append(' otter, palm_tree, pear, pickup_truck, pine_tree,')            #large omnivores and herbivores    ", "\n", "# sclass.append(' plain, plate, poppy, porcupine, possum,')                   #medium-sized mammals    ", "\n", "# sclass.append(' rabbit, raccoon, ray, road, rocket,')                       #non-insect invertebrates    ", "\n", "# sclass.append(' rose, sea, seal, shark, shrew,')                              #people    ", "\n", "# sclass.append(' skunk, skyscraper, snail, snake, spider,')               #reptiles", "\n", "# sclass.append(' squirrel, streetcar, sunflower, sweet_pepper, table,')                  #small mammals    ", "\n", "# sclass.append(' tank, telephone, television, tiger, tractor,')  #trees", "\n", "# sclass.append(' train, trout, tulip, turtle, wardrobe,')            #vehicles 1    ", "\n", "# sclass.append(' whale, willow_tree, wolf, woman, worm,')             #vehicles 2", "\n", "\n", "# download CIFAR100", "\n", "dataset_train", "=", "datasets", ".", "CIFAR100", "(", "'./data/'", ",", "train", "=", "True", ",", "download", "=", "True", ")", "\n", "dataset_test", "=", "datasets", ".", "CIFAR100", "(", "'./data/'", ",", "train", "=", "False", ",", "download", "=", "True", ")", "\n", "\n", "if", "validation", "==", "True", ":", "\n", "        ", "data_path", "=", "'./data/cifar-100-python/train'", "\n", "", "else", ":", "\n", "        ", "data_path", "=", "'./data/cifar-100-python/test'", "\n", "\n", "", "n_classes", "=", "100", "\n", "size", "=", "[", "3", ",", "32", ",", "32", "]", "\n", "data", "=", "{", "}", "\n", "taskcla", "=", "[", "]", "\n", "mean", "=", "np", ".", "array", "(", "[", "x", "/", "255", "for", "x", "in", "[", "125.3", ",", "123.0", ",", "113.9", "]", "]", ")", "\n", "std", "=", "np", ".", "array", "(", "[", "x", "/", "255", "for", "x", "in", "[", "63.0", ",", "62.1", ",", "66.7", "]", "]", ")", "\n", "\n", "files", "=", "open", "(", "data_path", ",", "'rb'", ")", "\n", "dict", "=", "pickle", ".", "load", "(", "files", ",", "encoding", "=", "'bytes'", ")", "\n", "\n", "# NOTE Image Standardization", "\n", "images", "=", "(", "dict", "[", "b'data'", "]", ")", "\n", "images", "=", "np", ".", "float32", "(", "images", ")", "/", "255", "\n", "labels", "=", "dict", "[", "b'fine_labels'", "]", "\n", "labels_pair", "=", "[", "[", "jj", "for", "jj", "in", "range", "(", "100", ")", "if", "' %s,'", "%", "CIFAR100_LABELS_LIST", "[", "jj", "]", "in", "sclass", "[", "kk", "]", "]", "for", "kk", "in", "range", "(", "20", ")", "]", "\n", "\n", "#flat_pair = np.concatenate(labels_pair)", "\n", "\n", "argsort_sup", "=", "[", "[", "]", "for", "_", "in", "range", "(", "20", ")", "]", "\n", "for", "_i", "in", "range", "(", "len", "(", "images", ")", ")", ":", "\n", "        ", "for", "_j", "in", "range", "(", "20", ")", ":", "\n", "            ", "if", "labels", "[", "_i", "]", "in", "labels_pair", "[", "_j", "]", ":", "\n", "                ", "argsort_sup", "[", "_j", "]", ".", "append", "(", "_i", ")", "\n", "\n", "", "", "", "argsort_sup_c", "=", "np", ".", "concatenate", "(", "argsort_sup", ")", "\n", "\n", "\n", "train_split", "=", "[", "]", "\n", "val_split", "=", "[", "]", "\n", "position", "=", "[", "_k", "for", "_k", "in", "range", "(", "0", ",", "len", "(", "images", ")", "+", "1", ",", "int", "(", "len", "(", "images", ")", "/", "20", ")", ")", "]", "\n", "\n", "\n", "if", "validation", "==", "True", ":", "\n", "        ", "s_train", "=", "'train'", "\n", "s_valid", "=", "'valid'", "\n", "", "else", ":", "\n", "        ", "s_train", "=", "'test'", "\n", "\n", "\n", "", "for", "idx", "in", "task_order", ":", "\n", "        ", "data", "[", "idx", "]", "=", "{", "}", "\n", "data", "[", "idx", "]", "[", "'name'", "]", "=", "'cifar100'", "\n", "data", "[", "idx", "]", "[", "'ncla'", "]", "=", "5", "\n", "data", "[", "idx", "]", "[", "s_train", "]", "=", "{", "'x'", ":", "[", "]", ",", "'y'", ":", "[", "]", "}", "\n", "# print('range : [%d,%d]'%(position[idx], position[idx+1]))", "\n", "gimages", "=", "np", ".", "take", "(", "images", ",", "argsort_sup_c", "[", "position", "[", "idx", "]", ":", "position", "[", "idx", "+", "1", "]", "]", ",", "axis", "=", "0", ")", "\n", "\n", "if", "not", "flat", ":", "\n", "            ", "gimages", "=", "gimages", ".", "reshape", "(", "[", "gimages", ".", "shape", "[", "0", "]", ",", "32", ",", "32", ",", "3", "]", ")", "\n", "\n", "# gimages = (gimages-mean)/std # mean,std normalization", "\n", "gimages", "=", "gimages", ".", "swapaxes", "(", "2", ",", "3", ")", ".", "swapaxes", "(", "1", ",", "2", ")", "\n", "#gimages = tf.image.per_image_standardization(gimages)", "\n", "\n", "", "glabels", "=", "np", ".", "take", "(", "labels", ",", "argsort_sup_c", "[", "position", "[", "idx", "]", ":", "position", "[", "idx", "+", "1", "]", "]", ")", "\n", "for", "_si", ",", "swap", "in", "enumerate", "(", "labels_pair", "[", "idx", "]", ")", ":", "\n", "            ", "glabels", "=", "[", "'%d'", "%", "_si", "if", "x", "==", "swap", "else", "x", "for", "x", "in", "glabels", "]", "\n", "# if idx <2:    ", "\n", "#     imshow(gimages[0])", "\n", "\n", "", "data", "[", "idx", "]", "[", "s_train", "]", "[", "'x'", "]", "=", "torch", ".", "FloatTensor", "(", "gimages", ")", "\n", "\n", "data", "[", "idx", "]", "[", "s_train", "]", "[", "'y'", "]", "=", "torch", ".", "LongTensor", "(", "np", ".", "array", "(", "[", "np", ".", "int32", "(", "glabels", ")", "]", ",", "dtype", "=", "int", ")", ")", ".", "view", "(", "-", "1", ")", "\n", "# print(data[idx][s_train]['x'].max(), data[idx][s_train]['x'].min())", "\n", "\n", "\n", "if", "validation", "==", "True", ":", "\n", "            ", "r", "=", "np", ".", "arange", "(", "data", "[", "idx", "]", "[", "s_train", "]", "[", "'x'", "]", ".", "size", "(", "0", ")", ")", "\n", "r", "=", "np", ".", "array", "(", "shuffle", "(", "r", ",", "random_state", "=", "seed", ")", ",", "dtype", "=", "int", ")", "\n", "nvalid", "=", "int", "(", "val_ratio", "*", "len", "(", "r", ")", ")", "\n", "ivalid", "=", "torch", ".", "LongTensor", "(", "r", "[", ":", "nvalid", "]", ")", "\n", "itrain", "=", "torch", ".", "LongTensor", "(", "r", "[", "nvalid", ":", "]", ")", "\n", "data", "[", "idx", "]", "[", "'valid'", "]", "=", "{", "}", "\n", "data", "[", "idx", "]", "[", "'valid'", "]", "[", "'x'", "]", "=", "data", "[", "idx", "]", "[", "'train'", "]", "[", "'x'", "]", "[", "ivalid", "]", ".", "clone", "(", ")", "\n", "data", "[", "idx", "]", "[", "'valid'", "]", "[", "'y'", "]", "=", "data", "[", "idx", "]", "[", "'train'", "]", "[", "'y'", "]", "[", "ivalid", "]", ".", "clone", "(", ")", "\n", "data", "[", "idx", "]", "[", "'train'", "]", "[", "'x'", "]", "=", "data", "[", "idx", "]", "[", "'train'", "]", "[", "'x'", "]", "[", "itrain", "]", ".", "clone", "(", ")", "\n", "data", "[", "idx", "]", "[", "'train'", "]", "[", "'y'", "]", "=", "data", "[", "idx", "]", "[", "'train'", "]", "[", "'y'", "]", "[", "itrain", "]", ".", "clone", "(", ")", "\n", "# pdb.set_trace()", "\n", "# Others", "\n", "", "", "n", "=", "0", "\n", "for", "t", "in", "data", ".", "keys", "(", ")", ":", "\n", "        ", "taskcla", ".", "append", "(", "(", "t", ",", "data", "[", "t", "]", "[", "'ncla'", "]", ")", ")", "\n", "n", "+=", "data", "[", "t", "]", "[", "'ncla'", "]", "\n", "", "data", "[", "'ncla'", "]", "=", "n", "\n", "\n", "return", "data", ",", "taskcla", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.dataloader.cifar100_superclass.imshow": [[173, 178], ["matplotlib.imshow", "matplotlib.show", "numpy.transpose"], "function", ["home.repos.pwc.inspect_result.LYang-666_TRGP.dataloader.cifar100_superclass.imshow"], ["", "def", "imshow", "(", "img", ")", ":", "\n", "# img = img /2 +0.5 # unnormalize", "\n", "    ", "npimg", "=", "img", "\n", "plt", ".", "imshow", "(", "np", ".", "transpose", "(", "npimg", ",", "(", "1", ",", "2", ",", "0", ")", ")", ")", "\n", "plt", ".", "show", "(", ")", "", "", ""]], "home.repos.pwc.inspect_result.LYang-666_TRGP.dataloader.five_datasets.TrafficSigns.__init__": [[277, 309], ["os.path.expanduser", "os.path.expanduser", "os.path.expanduser", "os.path.expanduser", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "numpy.transpose", "os.path.isfile", "os.path.isfile", "os.path.isfile", "os.path.isfile", "RuntimeError", "print", "five_datasets.TrafficSigns.download", "open", "pickle.load", "open", "pickle.load", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.LYang-666_TRGP.dataloader.five_datasets.notMNIST.download"], ["def", "__init__", "(", "self", ",", "root", ",", "train", "=", "True", ",", "transform", "=", "None", ",", "download", "=", "False", ")", ":", "\n", "        ", "self", ".", "root", "=", "os", ".", "path", ".", "expanduser", "(", "root", ")", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "filename", "=", "\"traffic_signs_dataset.zip\"", "\n", "self", ".", "url", "=", "\"https://d17h27t6h515a5.cloudfront.net/topher/2016/October/580d53ce_traffic-sign-data/traffic-sign-data.zip\"", "\n", "# Other options for the same 32x32 pickled dataset", "\n", "# url=\"https://d17h27t6h515a5.cloudfront.net/topher/2016/November/581faac4_traffic-signs-data/traffic-signs-data.zip\"", "\n", "# url_train=\"https://drive.google.com/open?id=0B5WIzrIVeL0WR1dsTC1FdWEtWFE\"", "\n", "# url_test=\"https://drive.google.com/open?id=0B5WIzrIVeL0WLTlPNlR2RG95S3c\"", "\n", "\n", "fpath", "=", "os", ".", "path", ".", "join", "(", "root", ",", "self", ".", "filename", ")", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "fpath", ")", ":", "\n", "            ", "if", "not", "download", ":", "\n", "               ", "raise", "RuntimeError", "(", "'Dataset not found. You can use download=True to download it'", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "'Downloading from '", "+", "self", ".", "url", ")", "\n", "self", ".", "download", "(", ")", "\n", "\n", "", "", "training_file", "=", "'lab 2 data/train.p'", "\n", "testing_file", "=", "'lab 2 data/test.p'", "\n", "if", "train", ":", "\n", "            ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "root", ",", "training_file", ")", ",", "mode", "=", "'rb'", ")", "as", "f", ":", "\n", "                ", "train", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "self", ".", "data", "=", "train", "[", "'features'", "]", "\n", "self", ".", "labels", "=", "train", "[", "'labels'", "]", "\n", "", "else", ":", "\n", "            ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "root", ",", "testing_file", ")", ",", "mode", "=", "'rb'", ")", "as", "f", ":", "\n", "                ", "test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "self", ".", "data", "=", "test", "[", "'features'", "]", "\n", "self", ".", "labels", "=", "test", "[", "'labels'", "]", "\n", "\n", "", "self", ".", "data", "=", "np", ".", "transpose", "(", "self", ".", "data", ",", "(", "0", ",", "3", ",", "1", ",", "2", ")", ")", "\n", "#print(self.data.shape); sys.exit()", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.dataloader.five_datasets.TrafficSigns.__getitem__": [[311, 326], ["PIL.Image.fromarray", "numpy.transpose", "five_datasets.TrafficSigns.transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Args: index (int): Index\n        Returns: tuple: (image, target) where target is index of the target class.\n        \"\"\"", "\n", "img", ",", "target", "=", "self", ".", "data", "[", "index", "]", ",", "self", ".", "labels", "[", "index", "]", "\n", "\n", "# doing this so that it is consistent with all other datasets", "\n", "# to return a PIL Image", "\n", "img", "=", "Image", ".", "fromarray", "(", "np", ".", "transpose", "(", "img", ",", "(", "1", ",", "2", ",", "0", ")", ")", ")", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "return", "img", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.dataloader.five_datasets.TrafficSigns.__len__": [[327, 329], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.dataloader.five_datasets.TrafficSigns.download": [[330, 347], ["os.path.expanduser", "os.path.expanduser", "os.path.expanduser", "os.path.expanduser", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "urllib.request.urlretrieve", "zipfile.ZipFile", "zipfile.ZipFile.extractall", "zipfile.ZipFile.close", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs"], "methods", ["None"], ["", "def", "download", "(", "self", ")", ":", "\n", "        ", "import", "errno", "\n", "root", "=", "os", ".", "path", ".", "expanduser", "(", "self", ".", "root", ")", "\n", "fpath", "=", "os", ".", "path", ".", "join", "(", "root", ",", "self", ".", "filename", ")", "\n", "\n", "try", ":", "\n", "            ", "os", ".", "makedirs", "(", "root", ")", "\n", "", "except", "OSError", "as", "e", ":", "\n", "            ", "if", "e", ".", "errno", "==", "errno", ".", "EEXIST", ":", "\n", "                ", "pass", "\n", "", "else", ":", "\n", "                ", "raise", "\n", "", "", "urllib", ".", "request", ".", "urlretrieve", "(", "self", ".", "url", ",", "fpath", ")", "\n", "import", "zipfile", "\n", "zip_ref", "=", "zipfile", ".", "ZipFile", "(", "fpath", ",", "'r'", ")", "\n", "zip_ref", ".", "extractall", "(", "root", ")", "\n", "zip_ref", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.dataloader.five_datasets.Facescrub.__init__": [[366, 405], ["os.path.expanduser", "os.path.expanduser", "os.path.expanduser", "os.path.expanduser", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.isfile", "os.path.isfile", "os.path.isfile", "os.path.isfile", "train[].astype", "train[].astype", "test[].astype", "test[].astype", "RuntimeError", "print", "five_datasets.Facescrub.download", "open", "pickle.load", "open", "pickle.load", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.LYang-666_TRGP.dataloader.five_datasets.notMNIST.download"], ["def", "__init__", "(", "self", ",", "root", ",", "train", "=", "True", ",", "transform", "=", "None", ",", "download", "=", "False", ")", ":", "\n", "        ", "self", ".", "root", "=", "os", ".", "path", ".", "expanduser", "(", "root", ")", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "filename", "=", "\"facescrub_100.zip\"", "\n", "self", ".", "url", "=", "\"https://github.com/nkundiushuti/facescrub_subset/blob/master/data/facescrub_100.zip?raw=true\"", "\n", "\n", "fpath", "=", "os", ".", "path", ".", "join", "(", "root", ",", "self", ".", "filename", ")", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "fpath", ")", ":", "\n", "            ", "if", "not", "download", ":", "\n", "               ", "raise", "RuntimeError", "(", "'Dataset not found. You can use download=True to download it'", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "'Downloading from '", "+", "self", ".", "url", ")", "\n", "self", ".", "download", "(", ")", "\n", "\n", "", "", "training_file", "=", "'facescrub_train_100.pkl'", "\n", "testing_file", "=", "'facescrub_test_100.pkl'", "\n", "if", "train", ":", "\n", "            ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "root", ",", "training_file", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "# u = pickle._Unpickler(f)", "\n", "# u.encoding = 'latin1'", "\n", "# train  = u.load()", "\n", "                ", "train", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "self", ".", "data", "=", "train", "[", "'features'", "]", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "self", ".", "labels", "=", "train", "[", "'labels'", "]", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\"\"\"\n            print(self.data.shape)\n            print(self.data.mean())\n            print(self.data.std())\n            print(self.labels.max())\n            #\"\"\"", "\n", "", "else", ":", "\n", "            ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "root", ",", "testing_file", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "# u = pickle._Unpickler(f)", "\n", "# u.encoding = 'latin1'", "\n", "# test  = u.load()", "\n", "                ", "test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "self", ".", "data", "=", "test", "[", "'features'", "]", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "self", ".", "labels", "=", "test", "[", "'labels'", "]", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.dataloader.five_datasets.Facescrub.__getitem__": [[406, 421], ["PIL.Image.fromarray", "numpy.transpose", "five_datasets.Facescrub.transform"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Args: index (int): Index\n        Returns: tuple: (image, target) where target is index of the target class.\n        \"\"\"", "\n", "img", ",", "target", "=", "self", ".", "data", "[", "index", "]", ",", "self", ".", "labels", "[", "index", "]", "\n", "\n", "# doing this so that it is consistent with all other datasets", "\n", "# to return a PIL Image", "\n", "img", "=", "Image", ".", "fromarray", "(", "np", ".", "transpose", "(", "img", ",", "(", "1", ",", "2", ",", "0", ")", ")", ")", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "return", "img", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.dataloader.five_datasets.Facescrub.__len__": [[422, 424], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.dataloader.five_datasets.Facescrub.download": [[425, 444], ["os.path.expanduser", "os.path.expanduser", "os.path.expanduser", "os.path.expanduser", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "urllib.request.urlretrieve", "zipfile.ZipFile", "zipfile.ZipFile.extractall", "zipfile.ZipFile.close", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs"], "methods", ["None"], ["", "def", "download", "(", "self", ")", ":", "\n", "        ", "import", "errno", "\n", "root", "=", "os", ".", "path", ".", "expanduser", "(", "self", ".", "root", ")", "\n", "\n", "fpath", "=", "os", ".", "path", ".", "join", "(", "root", ",", "self", ".", "filename", ")", "\n", "\n", "try", ":", "\n", "            ", "os", ".", "makedirs", "(", "root", ")", "\n", "", "except", "OSError", "as", "e", ":", "\n", "            ", "if", "e", ".", "errno", "==", "errno", ".", "EEXIST", ":", "\n", "                ", "pass", "\n", "", "else", ":", "\n", "                ", "raise", "\n", "", "", "urllib", ".", "request", ".", "urlretrieve", "(", "self", ".", "url", ",", "fpath", ")", "\n", "\n", "import", "zipfile", "\n", "zip_ref", "=", "zipfile", ".", "ZipFile", "(", "fpath", ",", "'r'", ")", "\n", "zip_ref", ".", "extractall", "(", "root", ")", "\n", "zip_ref", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.dataloader.five_datasets.notMNIST.__init__": [[463, 496], ["os.path.expanduser", "os.path.expanduser", "os.path.expanduser", "os.path.expanduser", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.isfile", "os.path.isfile", "os.path.isfile", "os.path.isfile", "train[].astype", "train[].astype", "test[].astype", "test[].astype", "RuntimeError", "print", "five_datasets.notMNIST.download", "open", "pickle.load", "open", "pickle.load", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.LYang-666_TRGP.dataloader.five_datasets.notMNIST.download"], ["def", "__init__", "(", "self", ",", "root", ",", "train", "=", "True", ",", "transform", "=", "None", ",", "download", "=", "False", ")", ":", "\n", "        ", "self", ".", "root", "=", "os", ".", "path", ".", "expanduser", "(", "root", ")", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "filename", "=", "\"notmnist.zip\"", "\n", "self", ".", "url", "=", "\"https://github.com/nkundiushuti/notmnist_convert/blob/master/notmnist.zip?raw=true\"", "\n", "\n", "fpath", "=", "os", ".", "path", ".", "join", "(", "root", ",", "self", ".", "filename", ")", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "fpath", ")", ":", "\n", "            ", "if", "not", "download", ":", "\n", "               ", "raise", "RuntimeError", "(", "'Dataset not found. You can use download=True to download it'", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "'Downloading from '", "+", "self", ".", "url", ")", "\n", "self", ".", "download", "(", ")", "\n", "\n", "", "", "training_file", "=", "'notmnist_train.pkl'", "\n", "testing_file", "=", "'notmnist_test.pkl'", "\n", "if", "train", ":", "\n", "            ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "root", ",", "training_file", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "# u = pickle._Unpickler(f)", "\n", "# u.encoding = 'latin1'", "\n", "# train  = u.load()", "\n", "                ", "train", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "self", ".", "data", "=", "train", "[", "'features'", "]", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "self", ".", "labels", "=", "train", "[", "'labels'", "]", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "", "else", ":", "\n", "            ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "root", ",", "testing_file", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "# u = pickle._Unpickler(f)", "\n", "# u.encoding = 'latin1'", "\n", "# test  = u.load()", "\n", "                ", "test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "self", ".", "data", "=", "test", "[", "'features'", "]", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "self", ".", "labels", "=", "test", "[", "'labels'", "]", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.dataloader.five_datasets.notMNIST.__getitem__": [[498, 512], ["PIL.Image.fromarray", "five_datasets.notMNIST.transform"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Args: index (int): Index\n        Returns: tuple: (image, target) where target is index of the target class.\n        \"\"\"", "\n", "img", ",", "target", "=", "self", ".", "data", "[", "index", "]", ",", "self", ".", "labels", "[", "index", "]", "\n", "# doing this so that it is consistent with all other datasets", "\n", "# to return a PIL Image", "\n", "img", "=", "Image", ".", "fromarray", "(", "img", "[", "0", "]", ")", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "return", "img", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.dataloader.five_datasets.notMNIST.__len__": [[513, 515], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.dataloader.five_datasets.notMNIST.download": [[516, 535], ["os.path.expanduser", "os.path.expanduser", "os.path.expanduser", "os.path.expanduser", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "urllib.request.urlretrieve", "zipfile.ZipFile", "zipfile.ZipFile.extractall", "zipfile.ZipFile.close", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs"], "methods", ["None"], ["", "def", "download", "(", "self", ")", ":", "\n", "        ", "import", "errno", "\n", "root", "=", "os", ".", "path", ".", "expanduser", "(", "self", ".", "root", ")", "\n", "\n", "fpath", "=", "os", ".", "path", ".", "join", "(", "root", ",", "self", ".", "filename", ")", "\n", "\n", "try", ":", "\n", "            ", "os", ".", "makedirs", "(", "root", ")", "\n", "", "except", "OSError", "as", "e", ":", "\n", "            ", "if", "e", ".", "errno", "==", "errno", ".", "EEXIST", ":", "\n", "                ", "pass", "\n", "", "else", ":", "\n", "                ", "raise", "\n", "", "", "urllib", ".", "request", ".", "urlretrieve", "(", "self", ".", "url", ",", "fpath", ")", "\n", "\n", "import", "zipfile", "\n", "zip_ref", "=", "zipfile", ".", "ZipFile", "(", "fpath", ",", "'r'", ")", "\n", "zip_ref", ".", "extractall", "(", "root", ")", "\n", "zip_ref", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.dataloader.five_datasets.get": [[16, 247], ["numpy.arange", "print", "data.keys", "data.keys", "os.path.isdir", "os.path.isdir", "os.makedirs", "os.makedirs", "enumerate", "enumerate", "numpy.arange", "numpy.array", "int", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "[].clone", "[].clone", "[].clone", "[].clone", "taskcla.append", "dict.fromkeys", "[].size", "sklearn.utils.shuffle", "torchvision.datasets.CIFAR10", "torchvision.datasets.CIFAR10", "torch.stack().view", "torch.stack().view", "torch.LongTensor().view", "torch.LongTensor().view", "torch.save", "torch.save", "torch.save", "torch.save", "torch.load", "torch.load", "torch.load", "torch.load", "len", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.datasets.MNIST", "torchvision.datasets.MNIST", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "[].append", "[].append", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.datasets.SVHN", "torchvision.datasets.SVHN", "torch.stack", "torch.stack", "torch.LongTensor", "torch.LongTensor", "os.path.expanduser", "os.path.expanduser", "os.path.expanduser", "os.path.expanduser", "os.path.expanduser", "os.path.expanduser", "os.path.expanduser", "os.path.expanduser", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "image.expand.expand", "[].append", "[].append", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "five_datasets.FashionMNIST", "five_datasets.FashionMNIST", "numpy.array", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "target.numpy", "image.expand.size", "image.expand.size", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "[].append", "[].append", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "five_datasets.notMNIST", "five_datasets.notMNIST", "print", "sys.exit", "print", "sys.exit", "torchvision.transforms.Pad", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.Pad", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "target.numpy", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "image.expand.expand", "[].append", "[].append", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "str", "str", "str", "str", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "target.numpy", "image.expand.size", "image.expand.size", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "image.expand.expand", "[].append", "[].append", "torchvision.transforms.Pad", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.Pad", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "target.numpy", "image.expand.size", "image.expand.size", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "target.numpy"], "function", ["None"], ["def", "get", "(", "seed", "=", "1", ",", "fixed_order", "=", "False", ",", "pc_valid", "=", "0.05", ")", ":", "\n", "    ", "data", "=", "{", "}", "\n", "taskcla", "=", "[", "]", "\n", "size", "=", "[", "3", ",", "32", ",", "32", "]", "\n", "\n", "idata", "=", "np", ".", "arange", "(", "5", ")", "\n", "# if not fixed_order:", "\n", "#     idata=list(shuffle(idata,random_state=seed))", "\n", "print", "(", "'Task order ='", ",", "idata", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "'./data/Five_data/binary_mixture_5_Data/'", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "'./data/Five_data/binary_mixture_5_Data'", ")", "\n", "# Pre-load", "\n", "for", "n", ",", "idx", "in", "enumerate", "(", "idata", ")", ":", "\n", "            ", "if", "idx", "==", "0", ":", "\n", "# CIFAR10", "\n", "                ", "mean", "=", "[", "x", "/", "255", "for", "x", "in", "[", "125.3", ",", "123.0", ",", "113.9", "]", "]", "\n", "std", "=", "[", "x", "/", "255", "for", "x", "in", "[", "63.0", ",", "62.1", ",", "66.7", "]", "]", "\n", "dat", "=", "{", "}", "\n", "dat", "[", "'train'", "]", "=", "datasets", ".", "CIFAR10", "(", "'./data/Five_data/'", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", ",", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", "]", ")", ")", "\n", "dat", "[", "'test'", "]", "=", "datasets", ".", "CIFAR10", "(", "'./data/Five_data/'", ",", "train", "=", "False", ",", "download", "=", "True", ",", "transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", ",", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", "]", ")", ")", "\n", "data", "[", "n", "]", "=", "{", "}", "\n", "data", "[", "n", "]", "[", "'name'", "]", "=", "'cifar10'", "\n", "data", "[", "n", "]", "[", "'ncla'", "]", "=", "10", "\n", "for", "s", "in", "[", "'train'", ",", "'test'", "]", ":", "\n", "                    ", "loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dat", "[", "s", "]", ",", "batch_size", "=", "1", ",", "shuffle", "=", "False", ")", "\n", "data", "[", "n", "]", "[", "s", "]", "=", "{", "'x'", ":", "[", "]", ",", "'y'", ":", "[", "]", "}", "\n", "for", "image", ",", "target", "in", "loader", ":", "\n", "                        ", "data", "[", "n", "]", "[", "s", "]", "[", "'x'", "]", ".", "append", "(", "image", ")", "\n", "data", "[", "n", "]", "[", "s", "]", "[", "'y'", "]", ".", "append", "(", "target", ".", "numpy", "(", ")", "[", "0", "]", ")", "\n", "\n", "# elif idx==1:", "\n", "#     # CIFAR100", "\n", "#     mean=[x/255 for x in [125.3,123.0,113.9]]", "\n", "#     std=[x/255 for x in [63.0,62.1,66.7]]", "\n", "#     dat={}", "\n", "#     dat['train']=datasets.CIFAR100('../dat/',train=True,download=True,transform=transforms.Compose([transforms.ToTensor(),transforms.Normalize(mean,std)]))", "\n", "#     dat['test']=datasets.CIFAR100('../dat/',train=False,download=True,transform=transforms.Compose([transforms.ToTensor(),transforms.Normalize(mean,std)]))", "\n", "#     data[n]={}", "\n", "#     data[n]['name']='cifar100'", "\n", "#     data[n]['ncla']=100", "\n", "#     for s in ['train','test']:", "\n", "#         loader=torch.utils.data.DataLoader(dat[s],batch_size=1,shuffle=False)", "\n", "#         data[n][s]={'x': [],'y': []}", "\n", "#         for image,target in loader:", "\n", "#             data[n][s]['x'].append(image)", "\n", "#             data[n][s]['y'].append(target.numpy()[0])", "\n", "\n", "", "", "", "elif", "idx", "==", "1", ":", "\n", "# MNIST", "\n", "#mean=(0.1307,) # Mean and std without including the padding", "\n", "#std=(0.3081,)", "\n", "                ", "mean", "=", "(", "0.1", ",", ")", "# Mean and std including the padding", "\n", "std", "=", "(", "0.2752", ",", ")", "\n", "dat", "=", "{", "}", "\n", "dat", "[", "'train'", "]", "=", "datasets", ".", "MNIST", "(", "'./data/Five_data/'", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Pad", "(", "padding", "=", "2", ",", "fill", "=", "0", ")", ",", "transforms", ".", "ToTensor", "(", ")", ",", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", "]", ")", ")", "\n", "dat", "[", "'test'", "]", "=", "datasets", ".", "MNIST", "(", "'./data/Five_data/'", ",", "train", "=", "False", ",", "download", "=", "True", ",", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Pad", "(", "padding", "=", "2", ",", "fill", "=", "0", ")", ",", "transforms", ".", "ToTensor", "(", ")", ",", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", "]", ")", ")", "\n", "data", "[", "n", "]", "=", "{", "}", "\n", "data", "[", "n", "]", "[", "'name'", "]", "=", "'mnist'", "\n", "data", "[", "n", "]", "[", "'ncla'", "]", "=", "10", "\n", "for", "s", "in", "[", "'train'", ",", "'test'", "]", ":", "\n", "                    ", "loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dat", "[", "s", "]", ",", "batch_size", "=", "1", ",", "shuffle", "=", "False", ")", "\n", "data", "[", "n", "]", "[", "s", "]", "=", "{", "'x'", ":", "[", "]", ",", "'y'", ":", "[", "]", "}", "\n", "for", "image", ",", "target", "in", "loader", ":", "\n", "                        ", "image", "=", "image", ".", "expand", "(", "1", ",", "3", ",", "image", ".", "size", "(", "2", ")", ",", "image", ".", "size", "(", "3", ")", ")", "# Create 3 equal channels", "\n", "data", "[", "n", "]", "[", "s", "]", "[", "'x'", "]", ".", "append", "(", "image", ")", "\n", "data", "[", "n", "]", "[", "s", "]", "[", "'y'", "]", ".", "append", "(", "target", ".", "numpy", "(", ")", "[", "0", "]", ")", "\n", "\n", "", "", "", "elif", "idx", "==", "2", ":", "\n", "# SVHN", "\n", "                ", "mean", "=", "[", "0.4377", ",", "0.4438", ",", "0.4728", "]", "\n", "std", "=", "[", "0.198", ",", "0.201", ",", "0.197", "]", "\n", "dat", "=", "{", "}", "\n", "dat", "[", "'train'", "]", "=", "datasets", ".", "SVHN", "(", "'./data/Five_data/'", ",", "split", "=", "'train'", ",", "download", "=", "True", ",", "transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", ",", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", "]", ")", ")", "\n", "dat", "[", "'test'", "]", "=", "datasets", ".", "SVHN", "(", "'./data/Five_data/'", ",", "split", "=", "'test'", ",", "download", "=", "True", ",", "transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", ",", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", "]", ")", ")", "\n", "data", "[", "n", "]", "=", "{", "}", "\n", "data", "[", "n", "]", "[", "'name'", "]", "=", "'svhn'", "\n", "data", "[", "n", "]", "[", "'ncla'", "]", "=", "10", "\n", "for", "s", "in", "[", "'train'", ",", "'test'", "]", ":", "\n", "                    ", "loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dat", "[", "s", "]", ",", "batch_size", "=", "1", ",", "shuffle", "=", "False", ")", "\n", "data", "[", "n", "]", "[", "s", "]", "=", "{", "'x'", ":", "[", "]", ",", "'y'", ":", "[", "]", "}", "\n", "for", "image", ",", "target", "in", "loader", ":", "\n", "                        ", "data", "[", "n", "]", "[", "s", "]", "[", "'x'", "]", ".", "append", "(", "image", ")", "\n", "data", "[", "n", "]", "[", "s", "]", "[", "'y'", "]", ".", "append", "(", "target", ".", "numpy", "(", ")", "[", "0", "]", ")", "\n", "\n", "", "", "", "elif", "idx", "==", "3", ":", "\n", "# FashionMNIST", "\n", "                ", "mean", "=", "(", "0.2190", ",", ")", "# Mean and std including the padding", "\n", "std", "=", "(", "0.3318", ",", ")", "\n", "dat", "=", "{", "}", "\n", "dat", "[", "'train'", "]", "=", "FashionMNIST", "(", "'./data/Five_data/fashion_mnist'", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Pad", "(", "padding", "=", "2", ",", "fill", "=", "0", ")", ",", "transforms", ".", "ToTensor", "(", ")", ",", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", "]", ")", ")", "\n", "dat", "[", "'test'", "]", "=", "FashionMNIST", "(", "'./data/Five_data/fashion_mnist'", ",", "train", "=", "False", ",", "download", "=", "True", ",", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Pad", "(", "padding", "=", "2", ",", "fill", "=", "0", ")", ",", "transforms", ".", "ToTensor", "(", ")", ",", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", "]", ")", ")", "\n", "data", "[", "n", "]", "=", "{", "}", "\n", "data", "[", "n", "]", "[", "'name'", "]", "=", "'fashion-mnist'", "\n", "data", "[", "n", "]", "[", "'ncla'", "]", "=", "10", "\n", "for", "s", "in", "[", "'train'", ",", "'test'", "]", ":", "\n", "                    ", "loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dat", "[", "s", "]", ",", "batch_size", "=", "1", ",", "shuffle", "=", "False", ")", "\n", "data", "[", "n", "]", "[", "s", "]", "=", "{", "'x'", ":", "[", "]", ",", "'y'", ":", "[", "]", "}", "\n", "for", "image", ",", "target", "in", "loader", ":", "\n", "                        ", "image", "=", "image", ".", "expand", "(", "1", ",", "3", ",", "image", ".", "size", "(", "2", ")", ",", "image", ".", "size", "(", "3", ")", ")", "# Create 3 equal channels", "\n", "data", "[", "n", "]", "[", "s", "]", "[", "'x'", "]", ".", "append", "(", "image", ")", "\n", "data", "[", "n", "]", "[", "s", "]", "[", "'y'", "]", ".", "append", "(", "target", ".", "numpy", "(", ")", "[", "0", "]", ")", "\n", "\n", "# elif idx == 5:", "\n", "#     # Traffic signs", "\n", "#     mean=[0.3398,0.3117,0.3210]", "\n", "#     std=[0.2755,0.2647,0.2712]", "\n", "#     dat={}", "\n", "#     dat['train']=TrafficSigns('../dat/traffic_signs', train=True, download=True, transform=transforms.Compose([transforms.ToTensor(),transforms.Normalize(mean,std)]))", "\n", "#     dat['test']=TrafficSigns('../dat/traffic_signs', train=False, download=True, transform=transforms.Compose([transforms.ToTensor(),transforms.Normalize(mean,std)]))", "\n", "#     # mean, var = utils.compute_mean_std_dataset(dat['train'])", "\n", "#     data[n]={}", "\n", "#     data[n]['name']='traffic-signs'", "\n", "#     data[n]['ncla']=43", "\n", "#     for s in ['train','test']:", "\n", "#         loader = torch.utils.data.DataLoader(dat[s], batch_size=1, shuffle=False)", "\n", "#         data[n][s] = {'x': [], 'y': []}", "\n", "#         for image, target in loader:", "\n", "#             data[n][s]['x'].append(image)", "\n", "#             data[n][s]['y'].append(target.numpy()[0])", "\n", "# elif idx == 6:", "\n", "#     # Facescrub 100 faces", "\n", "#     mean=[0.5163,0.5569,0.4695]", "\n", "#     std=[0.2307,0.2272,0.2479]", "\n", "#     dat={}", "\n", "#     dat['train']=Facescrub('../dat/facescrub', train=True, download=True, transform=transforms.Compose([transforms.ToTensor(),transforms.Normalize(mean,std)]))", "\n", "#     dat['test']=Facescrub('../dat/facescrub', train=False, download=True, transform=transforms.Compose([transforms.ToTensor(),transforms.Normalize(mean,std)]))", "\n", "#     #mean, std = utils.compute_mean_std_dataset(dat['train']); print(mean,std); sys.exit()", "\n", "#     data[n]={}", "\n", "#     data[n]['name']='facescrub'", "\n", "#     data[n]['ncla']=100", "\n", "#     for s in ['train','test']:", "\n", "#         loader = torch.utils.data.DataLoader(dat[s], batch_size=1, shuffle=False)", "\n", "#         data[n][s] = {'x': [], 'y': []}", "\n", "#         for image, target in loader:", "\n", "#             data[n][s]['x'].append(image)", "\n", "#             data[n][s]['y'].append(target.numpy()[0])", "\n", "", "", "", "elif", "idx", "==", "4", ":", "\n", "# notMNIST A-J letters", "\n", "                ", "mean", "=", "(", "0.4254", ",", ")", "\n", "std", "=", "(", "0.4501", ",", ")", "\n", "dat", "=", "{", "}", "\n", "dat", "[", "'train'", "]", "=", "notMNIST", "(", "'./data/Five_data/notmnist'", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", ",", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", "]", ")", ")", "\n", "dat", "[", "'test'", "]", "=", "notMNIST", "(", "'./data/Five_data/notmnist'", ",", "train", "=", "False", ",", "download", "=", "True", ",", "transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", ",", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", "]", ")", ")", "\n", "#mean, std = utils.compute_mean_std_dataset(dat['train']); print(mean,std); sys.exit()", "\n", "data", "[", "n", "]", "=", "{", "}", "\n", "data", "[", "n", "]", "[", "'name'", "]", "=", "'notmnist'", "\n", "data", "[", "n", "]", "[", "'ncla'", "]", "=", "10", "\n", "for", "s", "in", "[", "'train'", ",", "'test'", "]", ":", "\n", "                    ", "loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dat", "[", "s", "]", ",", "batch_size", "=", "1", ",", "shuffle", "=", "False", ")", "\n", "data", "[", "n", "]", "[", "s", "]", "=", "{", "'x'", ":", "[", "]", ",", "'y'", ":", "[", "]", "}", "\n", "for", "image", ",", "target", "in", "loader", ":", "\n", "                        ", "image", "=", "image", ".", "expand", "(", "1", ",", "3", ",", "image", ".", "size", "(", "2", ")", ",", "image", ".", "size", "(", "3", ")", ")", "\n", "data", "[", "n", "]", "[", "s", "]", "[", "'x'", "]", ".", "append", "(", "image", ")", "\n", "data", "[", "n", "]", "[", "s", "]", "[", "'y'", "]", ".", "append", "(", "target", ".", "numpy", "(", ")", "[", "0", "]", ")", "\n", "", "", "", "else", ":", "\n", "                ", "print", "(", "'ERROR: Undefined data set'", ",", "n", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "#print(n,data[n]['name'],data[n]['ncla'],len(data[n]['train']['x']))", "\n", "\n", "# \"Unify\" and save", "\n", "", "for", "s", "in", "[", "'train'", ",", "'test'", "]", ":", "\n", "                ", "data", "[", "n", "]", "[", "s", "]", "[", "'x'", "]", "=", "torch", ".", "stack", "(", "data", "[", "n", "]", "[", "s", "]", "[", "'x'", "]", ")", ".", "view", "(", "-", "1", ",", "size", "[", "0", "]", ",", "size", "[", "1", "]", ",", "size", "[", "2", "]", ")", "\n", "data", "[", "n", "]", "[", "s", "]", "[", "'y'", "]", "=", "torch", ".", "LongTensor", "(", "np", ".", "array", "(", "data", "[", "n", "]", "[", "s", "]", "[", "'y'", "]", ",", "dtype", "=", "int", ")", ")", ".", "view", "(", "-", "1", ")", "\n", "torch", ".", "save", "(", "data", "[", "n", "]", "[", "s", "]", "[", "'x'", "]", ",", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "expanduser", "(", "'./data/Five_data/binary_mixture_5_Data'", ")", ",", "'data'", "+", "str", "(", "idx", ")", "+", "s", "+", "'x.bin'", ")", ")", "\n", "torch", ".", "save", "(", "data", "[", "n", "]", "[", "s", "]", "[", "'y'", "]", ",", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "expanduser", "(", "'./data/Five_data/binary_mixture_5_Data'", ")", ",", "'data'", "+", "str", "(", "idx", ")", "+", "s", "+", "'y.bin'", ")", ")", "\n", "\n", "", "", "", "else", ":", "\n", "\n", "# Load binary files", "\n", "        ", "for", "n", ",", "idx", "in", "enumerate", "(", "idata", ")", ":", "\n", "            ", "data", "[", "n", "]", "=", "dict", ".", "fromkeys", "(", "[", "'name'", ",", "'ncla'", ",", "'train'", ",", "'test'", "]", ")", "\n", "if", "idx", "==", "0", ":", "\n", "                ", "data", "[", "n", "]", "[", "'name'", "]", "=", "'cifar10'", "\n", "data", "[", "n", "]", "[", "'ncla'", "]", "=", "10", "\n", "# elif idx==1:", "\n", "#     data[n]['name']='cifar100'", "\n", "#     data[n]['ncla']=100", "\n", "", "elif", "idx", "==", "1", ":", "\n", "                ", "data", "[", "n", "]", "[", "'name'", "]", "=", "'mnist'", "\n", "data", "[", "n", "]", "[", "'ncla'", "]", "=", "10", "\n", "", "elif", "idx", "==", "2", ":", "\n", "                ", "data", "[", "n", "]", "[", "'name'", "]", "=", "'svhn'", "\n", "data", "[", "n", "]", "[", "'ncla'", "]", "=", "10", "\n", "", "elif", "idx", "==", "3", ":", "\n", "                ", "data", "[", "n", "]", "[", "'name'", "]", "=", "'fashion-mnist'", "\n", "data", "[", "n", "]", "[", "'ncla'", "]", "=", "10", "\n", "# elif idx==5:", "\n", "#     data[n]['name']='traffic-signs'", "\n", "#     data[n]['ncla']=43", "\n", "# elif idx==6:", "\n", "#     data[n]['name']='facescrub'", "\n", "#     data[n]['ncla']=100", "\n", "", "elif", "idx", "==", "4", ":", "\n", "                ", "data", "[", "n", "]", "[", "'name'", "]", "=", "'notmnist'", "\n", "data", "[", "n", "]", "[", "'ncla'", "]", "=", "10", "\n", "", "else", ":", "\n", "                ", "print", "(", "'ERROR: Undefined data set'", ",", "n", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "\n", "# Load", "\n", "", "for", "s", "in", "[", "'train'", ",", "'test'", "]", ":", "\n", "                ", "data", "[", "n", "]", "[", "s", "]", "=", "{", "'x'", ":", "[", "]", ",", "'y'", ":", "[", "]", "}", "\n", "data", "[", "n", "]", "[", "s", "]", "[", "'x'", "]", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "expanduser", "(", "'./data/Five_data/binary_mixture_5_Data'", ")", ",", "'data'", "+", "str", "(", "idx", ")", "+", "s", "+", "'x.bin'", ")", ")", "\n", "data", "[", "n", "]", "[", "s", "]", "[", "'y'", "]", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "expanduser", "(", "'./data/Five_data/binary_mixture_5_Data'", ")", ",", "'data'", "+", "str", "(", "idx", ")", "+", "s", "+", "'y.bin'", ")", ")", "\n", "\n", "# Validation", "\n", "", "", "", "for", "t", "in", "data", ".", "keys", "(", ")", ":", "\n", "        ", "r", "=", "np", ".", "arange", "(", "data", "[", "t", "]", "[", "'train'", "]", "[", "'x'", "]", ".", "size", "(", "0", ")", ")", "\n", "r", "=", "np", ".", "array", "(", "shuffle", "(", "r", ",", "random_state", "=", "seed", ")", ",", "dtype", "=", "int", ")", "\n", "nvalid", "=", "int", "(", "pc_valid", "*", "len", "(", "r", ")", ")", "\n", "ivalid", "=", "torch", ".", "LongTensor", "(", "r", "[", ":", "nvalid", "]", ")", "\n", "itrain", "=", "torch", ".", "LongTensor", "(", "r", "[", "nvalid", ":", "]", ")", "\n", "data", "[", "t", "]", "[", "'valid'", "]", "=", "{", "}", "\n", "data", "[", "t", "]", "[", "'valid'", "]", "[", "'x'", "]", "=", "data", "[", "t", "]", "[", "'train'", "]", "[", "'x'", "]", "[", "ivalid", "]", ".", "clone", "(", ")", "\n", "data", "[", "t", "]", "[", "'valid'", "]", "[", "'y'", "]", "=", "data", "[", "t", "]", "[", "'train'", "]", "[", "'y'", "]", "[", "ivalid", "]", ".", "clone", "(", ")", "\n", "data", "[", "t", "]", "[", "'train'", "]", "[", "'x'", "]", "=", "data", "[", "t", "]", "[", "'train'", "]", "[", "'x'", "]", "[", "itrain", "]", ".", "clone", "(", ")", "\n", "data", "[", "t", "]", "[", "'train'", "]", "[", "'y'", "]", "=", "data", "[", "t", "]", "[", "'train'", "]", "[", "'y'", "]", "[", "itrain", "]", ".", "clone", "(", ")", "\n", "\n", "# Others", "\n", "", "n", "=", "0", "\n", "for", "t", "in", "data", ".", "keys", "(", ")", ":", "\n", "        ", "taskcla", ".", "append", "(", "(", "t", ",", "data", "[", "t", "]", "[", "'ncla'", "]", ")", ")", "\n", "n", "+=", "data", "[", "t", "]", "[", "'ncla'", "]", "\n", "", "data", "[", "'ncla'", "]", "=", "n", "\n", "\n", "return", "data", ",", "taskcla", ",", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.dataloader.split_miniimagenet.get_total": [[15, 25], ["data.items", "range", "len", "data_x.append", "data_y.append"], "function", ["None"], ["def", "get_total", "(", "data", ")", ":", "\n", "    ", "data_x", ",", "data_y", "=", "[", "]", ",", "[", "]", "\n", "for", "k", ",", "v", "in", "data", ".", "items", "(", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "v", ")", ")", ":", "\n", "            ", "data_x", ".", "append", "(", "v", "[", "i", "]", ")", "\n", "data_y", ".", "append", "(", "k", ")", "\n", "", "", "d", "=", "{", "}", "\n", "d", "[", "'images'", "]", "=", "data_x", "\n", "d", "[", "'labels'", "]", "=", "data_y", "\n", "return", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.dataloader.miniimagenet.MiniImageNet.__init__": [[29, 41], ["super().__init__", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "open", "pickle.load", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.LYang-666_TRGP.dataloader.miniimagenet.DatasetGen.__init__"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "train", ")", ":", "\n", "        ", "super", "(", "MiniImageNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "train", ":", "\n", "            ", "self", ".", "name", "=", "'train'", "\n", "", "else", ":", "\n", "            ", "self", ".", "name", "=", "'test'", "\n", "", "root", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'miniimagenet'", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'{}.pkl'", ".", "format", "(", "self", ".", "name", ")", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "data_dict", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "self", ".", "data", "=", "data_dict", "[", "'images'", "]", "\n", "self", ".", "labels", "=", "data_dict", "[", "'labels'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.dataloader.miniimagenet.MiniImageNet.__len__": [[42, 44], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.dataloader.miniimagenet.MiniImageNet.__getitem__": [[45, 48], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "        ", "img", ",", "label", "=", "self", ".", "data", "[", "i", "]", ",", "self", ".", "labels", "[", "i", "]", "\n", "return", "img", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.dataloader.miniimagenet.iMiniImageNet.__init__": [[52, 91], ["miniimagenet.MiniImageNet.__init__", "range", "numpy.array", "isinstance", "len", "range", "enumerate", "torch.append", "torch.append", "labels.append", "tt.append", "td.append", "miniimagenet.iMiniImageNet.class_indices[].append", "range", "len", "range", "torch.append", "torch.append", "labels.append", "tt.append", "td.append", "len"], "methods", ["home.repos.pwc.inspect_result.LYang-666_TRGP.dataloader.miniimagenet.DatasetGen.__init__"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "classes", ",", "memory_classes", ",", "memory", ",", "task_num", ",", "train", ",", "transform", "=", "None", ")", ":", "\n", "        ", "super", "(", "iMiniImageNet", ",", "self", ")", ".", "__init__", "(", "root", "=", "root", ",", "train", "=", "train", ")", "\n", "\n", "self", ".", "transform", "=", "transform", "\n", "if", "not", "isinstance", "(", "classes", ",", "list", ")", ":", "\n", "            ", "classes", "=", "[", "classes", "]", "\n", "\n", "", "self", ".", "class_mapping", "=", "{", "c", ":", "i", "for", "i", ",", "c", "in", "enumerate", "(", "classes", ")", "}", "\n", "self", ".", "class_indices", "=", "{", "}", "\n", "\n", "for", "cls", "in", "classes", ":", "\n", "            ", "self", ".", "class_indices", "[", "self", ".", "class_mapping", "[", "cls", "]", "]", "=", "[", "]", "\n", "\n", "", "data", "=", "[", "]", "\n", "labels", "=", "[", "]", "\n", "tt", "=", "[", "]", "# task module labels", "\n", "td", "=", "[", "]", "# disctiminator labels", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "data", ")", ")", ":", "\n", "            ", "if", "self", ".", "labels", "[", "i", "]", "in", "classes", ":", "\n", "                ", "data", ".", "append", "(", "self", ".", "data", "[", "i", "]", ")", "\n", "labels", ".", "append", "(", "self", ".", "class_mapping", "[", "self", ".", "labels", "[", "i", "]", "]", ")", "\n", "tt", ".", "append", "(", "task_num", ")", "\n", "td", ".", "append", "(", "task_num", "+", "1", ")", "\n", "self", ".", "class_indices", "[", "self", ".", "class_mapping", "[", "self", ".", "labels", "[", "i", "]", "]", "]", ".", "append", "(", "i", ")", "\n", "\n", "", "", "if", "memory_classes", ":", "\n", "            ", "for", "task_id", "in", "range", "(", "task_num", ")", ":", "\n", "                ", "for", "i", "in", "range", "(", "len", "(", "memory", "[", "task_id", "]", "[", "'x'", "]", ")", ")", ":", "\n", "                    ", "if", "memory", "[", "task_id", "]", "[", "'y'", "]", "[", "i", "]", "in", "range", "(", "len", "(", "memory_classes", "[", "task_id", "]", ")", ")", ":", "\n", "                        ", "data", ".", "append", "(", "memory", "[", "task_id", "]", "[", "'x'", "]", "[", "i", "]", ")", "\n", "labels", ".", "append", "(", "memory", "[", "task_id", "]", "[", "'y'", "]", "[", "i", "]", ")", "\n", "tt", ".", "append", "(", "memory", "[", "task_id", "]", "[", "'tt'", "]", "[", "i", "]", ")", "\n", "td", ".", "append", "(", "memory", "[", "task_id", "]", "[", "'td'", "]", "[", "i", "]", ")", "\n", "\n", "", "", "", "", "self", ".", "data", "=", "np", ".", "array", "(", "data", ")", "\n", "self", ".", "labels", "=", "labels", "\n", "self", ".", "tt", "=", "tt", "\n", "self", ".", "td", "=", "td", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.dataloader.miniimagenet.iMiniImageNet.__getitem__": [[94, 105], ["torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "PIL.Image.fromarray", "miniimagenet.iMiniImageNet.transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "\n", "        ", "img", ",", "target", ",", "tt", ",", "td", "=", "self", ".", "data", "[", "index", "]", ",", "self", ".", "labels", "[", "index", "]", ",", "self", ".", "tt", "[", "index", "]", ",", "self", ".", "td", "[", "index", "]", "\n", "\n", "# doing this so that it is consistent with all other datasets", "\n", "# to return a PIL Image", "\n", "if", "not", "torch", ".", "is_tensor", "(", "img", ")", ":", "\n", "            ", "img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "# return img, target, tt, td", "\n", "", "return", "img", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.dataloader.miniimagenet.iMiniImageNet.__len__": [[110, 112], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.dataloader.miniimagenet.DatasetGen.__init__": [[119, 168], ["object.__init__", "torchvision.transforms.Compose", "numpy.random.seed", "numpy.split", "range", "numpy.random.permutation", "list", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "int", "range"], "methods", ["home.repos.pwc.inspect_result.LYang-666_TRGP.dataloader.miniimagenet.DatasetGen.__init__"], ["def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "DatasetGen", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "seed", "=", "args", ".", "seed", "\n", "self", ".", "batch_size", "=", "64", "\n", "self", ".", "pc_valid", "=", "args", ".", "pc_valid", "\n", "self", ".", "root", "=", "'data'", "\n", "self", ".", "latent_dim", "=", "245", "\n", "self", ".", "use_memory", "=", "'yes'", "\n", "\n", "self", ".", "num_tasks", "=", "20", "\n", "self", ".", "num_classes", "=", "100", "\n", "\n", "self", ".", "num_samples", "=", "0", "\n", "\n", "self", ".", "inputsize", "=", "[", "3", ",", "84", ",", "84", "]", "\n", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", "\n", "\n", "self", ".", "transformation", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "(", "84", ",", "84", ")", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "mean", ",", "std", "=", "std", ")", "]", ")", "\n", "\n", "self", ".", "taskcla", "=", "[", "[", "t", ",", "int", "(", "self", ".", "num_classes", "/", "self", ".", "num_tasks", ")", "]", "for", "t", "in", "range", "(", "self", ".", "num_tasks", ")", "]", "\n", "\n", "self", ".", "indices", "=", "{", "}", "\n", "self", ".", "dataloaders", "=", "{", "}", "\n", "self", ".", "idx", "=", "{", "}", "\n", "\n", "self", ".", "num_workers", "=", "4", "\n", "self", ".", "pin_memory", "=", "True", "\n", "\n", "np", ".", "random", ".", "seed", "(", "self", ".", "seed", ")", "\n", "task_ids", "=", "np", ".", "split", "(", "np", ".", "random", ".", "permutation", "(", "self", ".", "num_classes", ")", ",", "self", ".", "num_tasks", ")", "\n", "self", ".", "task_ids", "=", "[", "list", "(", "arr", ")", "for", "arr", "in", "task_ids", "]", "\n", "\n", "self", ".", "train_set", "=", "{", "}", "\n", "self", ".", "train_split", "=", "{", "}", "\n", "self", ".", "test_set", "=", "{", "}", "\n", "\n", "\n", "self", ".", "task_memory", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "self", ".", "num_tasks", ")", ":", "\n", "            ", "self", ".", "task_memory", "[", "i", "]", "=", "{", "}", "\n", "self", ".", "task_memory", "[", "i", "]", "[", "'x'", "]", "=", "[", "]", "\n", "self", ".", "task_memory", "[", "i", "]", "[", "'y'", "]", "=", "[", "]", "\n", "self", ".", "task_memory", "[", "i", "]", "[", "'tt'", "]", "=", "[", "]", "\n", "self", ".", "task_memory", "[", "i", "]", "[", "'td'", "]", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.dataloader.miniimagenet.DatasetGen.get": [[171, 257], ["sys.stdout.flush", "miniimagenet.iMiniImageNet", "miniimagenet.iMiniImageNet", "int", "torch.utils.data.random_split", "torch.utils.data.random_split", "torch.utils.data.random_split", "torch.utils.data.random_split", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "print", "print", "print", "print", "numpy.floor", "miniimagenet.DatasetGen.update_memory", "len", "len", "len", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.LYang-666_TRGP.dataloader.miniimagenet.DatasetGen.update_memory"], ["", "", "def", "get", "(", "self", ",", "task_id", ")", ":", "\n", "\n", "        ", "self", ".", "dataloaders", "[", "task_id", "]", "=", "{", "}", "\n", "# self.dataloaders[task_id]['train']={'x': [],'y': []}", "\n", "# self.dataloaders[task_id]['test']={'x': [],'y': []}", "\n", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "if", "task_id", "==", "0", ":", "\n", "            ", "memory_classes", "=", "None", "\n", "memory", "=", "None", "\n", "", "else", ":", "\n", "            ", "memory_classes", "=", "self", ".", "task_ids", "\n", "memory", "=", "self", ".", "task_memory", "\n", "\n", "\n", "", "self", ".", "train_set", "[", "task_id", "]", "=", "iMiniImageNet", "(", "root", "=", "self", ".", "root", ",", "classes", "=", "self", ".", "task_ids", "[", "task_id", "]", ",", "\n", "memory_classes", "=", "memory_classes", ",", "memory", "=", "memory", ",", "\n", "task_num", "=", "task_id", ",", "train", "=", "True", ",", "transform", "=", "self", ".", "transformation", ")", "\n", "\n", "self", ".", "test_set", "[", "task_id", "]", "=", "iMiniImageNet", "(", "root", "=", "self", ".", "root", ",", "classes", "=", "self", ".", "task_ids", "[", "task_id", "]", ",", "memory_classes", "=", "None", ",", "\n", "memory", "=", "None", ",", "task_num", "=", "task_id", ",", "train", "=", "False", ",", "transform", "=", "self", ".", "transformation", ")", "\n", "\n", "\n", "split", "=", "int", "(", "np", ".", "floor", "(", "self", ".", "pc_valid", "*", "len", "(", "self", ".", "train_set", "[", "task_id", "]", ")", ")", ")", "\n", "train_split", ",", "valid_split", "=", "torch", ".", "utils", ".", "data", ".", "random_split", "(", "self", ".", "train_set", "[", "task_id", "]", ",", "[", "len", "(", "self", ".", "train_set", "[", "task_id", "]", ")", "-", "split", ",", "split", "]", ")", "\n", "self", ".", "train_split", "[", "task_id", "]", "=", "train_split", "\n", "\n", "# train_loader = torch.utils.data.DataLoader(train_split, batch_size=self.batch_size, num_workers=self.num_workers,", "\n", "#                                            pin_memory=self.pin_memory,shuffle=True)", "\n", "# valid_loader = torch.utils.data.DataLoader(valid_split, batch_size=int(self.batch_size * self.pc_valid),", "\n", "#                                            num_workers=self.num_workers, pin_memory=self.pin_memory,shuffle=True)", "\n", "# test_loader = torch.utils.data.DataLoader(self.test_set[task_id], batch_size=self.batch_size, num_workers=self.num_workers,", "\n", "#                                           pin_memory=self.pin_memory, shuffle=True)", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "train_split", ",", "batch_size", "=", "2450", ",", "num_workers", "=", "self", ".", "num_workers", ",", "\n", "pin_memory", "=", "self", ".", "pin_memory", ",", "shuffle", "=", "True", ")", "\n", "valid_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "valid_split", ",", "batch_size", "=", "50", ",", "\n", "num_workers", "=", "self", ".", "num_workers", ",", "pin_memory", "=", "self", ".", "pin_memory", ",", "shuffle", "=", "True", ")", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "self", ".", "test_set", "[", "task_id", "]", ",", "batch_size", "=", "500", ",", "num_workers", "=", "self", ".", "num_workers", ",", "\n", "pin_memory", "=", "self", ".", "pin_memory", ",", "shuffle", "=", "True", ")", "\n", "# print(train_split.data)", "\n", "\n", "self", ".", "dataloaders", "[", "task_id", "]", "[", "'train'", "]", "=", "{", "'x'", ":", "[", "]", ",", "'y'", ":", "[", "]", "}", "\n", "self", ".", "dataloaders", "[", "task_id", "]", "[", "'valid'", "]", "=", "{", "'x'", ":", "[", "]", ",", "'y'", ":", "[", "]", "}", "\n", "for", "data", ",", "label", "in", "train_loader", ":", "\n", "# self.dataloaders[task_id]['train']['x'].append(data)", "\n", "# self.dataloaders[task_id]['train']['y'].append(label) ", "\n", "            ", "self", ".", "dataloaders", "[", "task_id", "]", "[", "'train'", "]", "[", "'x'", "]", "=", "data", "\n", "self", ".", "dataloaders", "[", "task_id", "]", "[", "'train'", "]", "[", "'y'", "]", "=", "label", "\n", "", "for", "data", ",", "label", "in", "valid_loader", ":", "\n", "            ", "self", ".", "dataloaders", "[", "task_id", "]", "[", "'valid'", "]", "[", "'x'", "]", "=", "data", "\n", "self", ".", "dataloaders", "[", "task_id", "]", "[", "'valid'", "]", "[", "'y'", "]", "=", "label", "\n", "\n", "", "self", ".", "dataloaders", "[", "task_id", "]", "[", "'test'", "]", "=", "{", "'x'", ":", "[", "]", ",", "'y'", ":", "[", "]", "}", "\n", "for", "data", ",", "label", "in", "test_loader", ":", "\n", "            ", "self", ".", "dataloaders", "[", "task_id", "]", "[", "'test'", "]", "[", "'x'", "]", "=", "data", "\n", "self", ".", "dataloaders", "[", "task_id", "]", "[", "'test'", "]", "[", "'y'", "]", "=", "label", "\n", "# print(self.dataloaders[task_id]['train']['x'])", "\n", "# self.dataloaders[task_id]['train']['x'] = np.array(self.dataloaders[task_id]['train']['x'])", "\n", "# self.dataloaders[task_id]['train']['y'] = np.array(self.dataloaders[task_id]['train']['y'])", "\n", "# self.dataloaders[task_id]['valid']['x'] = np.array(self.dataloaders[task_id]['train']['x'])", "\n", "# self.dataloaders[task_id]['valid']['y'] = np.array(self.dataloaders[task_id]['train']['y'])", "\n", "# self.dataloaders[task_id]['test']['x'] = np.array(self.dataloaders[task_id]['train']['x'])", "\n", "# self.dataloaders[task_id]['test']['y'] = np.array(self.dataloaders[task_id]['train']['y'])", "\n", "\n", "\n", "# self.dataloaders[task_id]['train'] = train_loader", "\n", "# self.dataloaders[task_id]['valid'] = valid_loader", "\n", "# self.dataloaders[task_id]['test'] = test_loader", "\n", "", "self", ".", "dataloaders", "[", "task_id", "]", "[", "'name'", "]", "=", "'iMiniImageNet-{}-{}'", ".", "format", "(", "task_id", ",", "self", ".", "task_ids", "[", "task_id", "]", ")", "\n", "# self.dataloaders[task_id]['tsne'] = torch.utils.data.DataLoader(self.test_set[task_id],", "\n", "#                                                                 batch_size=len(test_loader.dataset),", "\n", "#                                                                 num_workers=self.num_workers,", "\n", "#                                                                 pin_memory=self.pin_memory, shuffle=True)", "\n", "\n", "print", "(", "\"Task ID: \"", ",", "task_id", ")", "\n", "print", "(", "\"Training set size:   {} images of {}x{}\"", ".", "format", "(", "len", "(", "train_loader", ".", "dataset", ")", ",", "self", ".", "inputsize", "[", "1", "]", ",", "self", ".", "inputsize", "[", "1", "]", ")", ")", "\n", "print", "(", "\"Validation set size: {} images of {}x{}\"", ".", "format", "(", "len", "(", "valid_loader", ".", "dataset", ")", ",", "self", ".", "inputsize", "[", "1", "]", ",", "self", ".", "inputsize", "[", "1", "]", ")", ")", "\n", "print", "(", "\"Train+Val  set size: {} images of {}x{}\"", ".", "format", "(", "len", "(", "valid_loader", ".", "dataset", ")", "+", "len", "(", "train_loader", ".", "dataset", ")", ",", "self", ".", "inputsize", "[", "1", "]", ",", "self", ".", "inputsize", "[", "1", "]", ")", ")", "\n", "print", "(", "\"Test set size:       {} images of {}x{}\"", ".", "format", "(", "len", "(", "test_loader", ".", "dataset", ")", ",", "self", ".", "inputsize", "[", "1", "]", ",", "self", ".", "inputsize", "[", "1", "]", ")", ")", "\n", "\n", "if", "self", ".", "use_memory", "==", "'yes'", "and", "self", ".", "num_samples", ">", "0", ":", "\n", "            ", "self", ".", "update_memory", "(", "task_id", ")", "\n", "\n", "\n", "", "return", "self", ".", "dataloaders", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.dataloader.miniimagenet.DatasetGen.update_memory": [[260, 279], ["range", "print", "len", "len", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "enumerate", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "[].append", "[].append", "[].append", "[].append", "len", "len"], "methods", ["None"], ["", "def", "update_memory", "(", "self", ",", "task_id", ")", ":", "\n", "        ", "num_samples_per_class", "=", "self", ".", "num_samples", "//", "len", "(", "self", ".", "task_ids", "[", "task_id", "]", ")", "\n", "mem_class_mapping", "=", "{", "i", ":", "i", "for", "i", ",", "c", "in", "enumerate", "(", "self", ".", "task_ids", "[", "task_id", "]", ")", "}", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "task_ids", "[", "task_id", "]", ")", ")", ":", "\n", "            ", "data_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "self", ".", "train_split", "[", "task_id", "]", ",", "batch_size", "=", "1", ",", "\n", "num_workers", "=", "self", ".", "num_workers", ",", "\n", "pin_memory", "=", "self", ".", "pin_memory", ")", "\n", "\n", "randind", "=", "torch", ".", "randperm", "(", "len", "(", "data_loader", ".", "dataset", ")", ")", "[", ":", "num_samples_per_class", "]", "# randomly sample some data", "\n", "\n", "\n", "for", "ind", "in", "randind", ":", "\n", "                ", "self", ".", "task_memory", "[", "task_id", "]", "[", "'x'", "]", ".", "append", "(", "data_loader", ".", "dataset", "[", "ind", "]", "[", "0", "]", ")", "\n", "self", ".", "task_memory", "[", "task_id", "]", "[", "'y'", "]", ".", "append", "(", "mem_class_mapping", "[", "i", "]", ")", "\n", "self", ".", "task_memory", "[", "task_id", "]", "[", "'tt'", "]", ".", "append", "(", "data_loader", ".", "dataset", "[", "ind", "]", "[", "2", "]", ")", "\n", "self", ".", "task_memory", "[", "task_id", "]", "[", "'td'", "]", ".", "append", "(", "data_loader", ".", "dataset", "[", "ind", "]", "[", "3", "]", ")", "\n", "\n", "", "", "print", "(", "'Memory updated by adding {} images'", ".", "format", "(", "len", "(", "self", ".", "task_memory", "[", "task_id", "]", "[", "'x'", "]", ")", ")", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.LYang-666_TRGP.dataloader.utils.gen_bar_updater": [[23, 33], ["torch.utils.model_zoo.tqdm", "torch.utils.model_zoo.tqdm.update"], "function", ["home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100.Pre_Model.update"], ["def", "gen_bar_updater", "(", ")", ":", "\n", "    ", "pbar", "=", "tqdm", "(", "total", "=", "None", ")", "\n", "\n", "def", "bar_update", "(", "count", ",", "block_size", ",", "total_size", ")", ":", "\n", "        ", "if", "pbar", ".", "total", "is", "None", "and", "total_size", ":", "\n", "            ", "pbar", ".", "total", "=", "total_size", "\n", "", "progress_bytes", "=", "count", "*", "block_size", "\n", "pbar", ".", "update", "(", "progress_bytes", "-", "pbar", ".", "n", ")", "\n", "\n", "", "return", "bar_update", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.dataloader.utils.calculate_md5": [[35, 41], ["hashlib.md5", "hashlib.md5.hexdigest", "open", "iter", "hashlib.md5.update", "f.read"], "function", ["home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100.Pre_Model.update"], ["", "def", "calculate_md5", "(", "fpath", ",", "chunk_size", "=", "1024", "*", "1024", ")", ":", "\n", "    ", "md5", "=", "hashlib", ".", "md5", "(", ")", "\n", "with", "open", "(", "fpath", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "for", "chunk", "in", "iter", "(", "lambda", ":", "f", ".", "read", "(", "chunk_size", ")", ",", "b''", ")", ":", "\n", "            ", "md5", ".", "update", "(", "chunk", ")", "\n", "", "", "return", "md5", ".", "hexdigest", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.dataloader.utils.check_md5": [[43, 45], ["utils.calculate_md5"], "function", ["home.repos.pwc.inspect_result.LYang-666_TRGP.dataloader.utils.calculate_md5"], ["", "def", "check_md5", "(", "fpath", ",", "md5", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "md5", "==", "calculate_md5", "(", "fpath", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.dataloader.utils.check_integrity": [[47, 53], ["utils.check_md5", "os.path.isfile", "os.path.isfile"], "function", ["home.repos.pwc.inspect_result.LYang-666_TRGP.dataloader.utils.check_md5"], ["", "def", "check_integrity", "(", "fpath", ",", "md5", "=", "None", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "isfile", "(", "fpath", ")", ":", "\n", "        ", "return", "False", "\n", "", "if", "md5", "is", "None", ":", "\n", "        ", "return", "True", "\n", "", "return", "check_md5", "(", "fpath", ",", "md5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.dataloader.utils.makedir_exist_ok": [[55, 66], ["os.makedirs", "os.makedirs"], "function", ["None"], ["", "def", "makedir_exist_ok", "(", "dirpath", ")", ":", "\n", "    ", "\"\"\"\n    Python2 support for os.makedirs(.., exist_ok=True)\n    \"\"\"", "\n", "try", ":", "\n", "        ", "os", ".", "makedirs", "(", "dirpath", ")", "\n", "", "except", "OSError", "as", "e", ":", "\n", "        ", "if", "e", ".", "errno", "==", "errno", ".", "EEXIST", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "raise", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.dataloader.utils.download_url": [[68, 107], ["os.path.expanduser", "os.path.expanduser", "os.path.join", "os.path.join", "utils.makedir_exist_ok", "utils.check_integrity", "os.path.basename", "os.path.basename", "print", "print", "urllib.request.urlretrieve", "utils.gen_bar_updater", "url.replace.replace", "print", "urllib.request.urlretrieve", "utils.gen_bar_updater"], "function", ["home.repos.pwc.inspect_result.LYang-666_TRGP.dataloader.utils.makedir_exist_ok", "home.repos.pwc.inspect_result.LYang-666_TRGP.dataloader.utils.check_integrity", "home.repos.pwc.inspect_result.LYang-666_TRGP.dataloader.utils.gen_bar_updater", "home.repos.pwc.inspect_result.LYang-666_TRGP.dataloader.utils.gen_bar_updater"], ["", "", "", "def", "download_url", "(", "url", ",", "root", ",", "filename", "=", "None", ",", "md5", "=", "None", ")", ":", "\n", "    ", "\"\"\"Download a file from a url and place it in root.\n\n    Args:\n        url (str): URL to download file from\n        root (str): Directory to place downloaded file in\n        filename (str, optional): Name to save the file under. If None, use the basename of the URL\n        md5 (str, optional): MD5 checksum of the download. If None, do not check\n    \"\"\"", "\n", "from", "six", ".", "moves", "import", "urllib", "\n", "\n", "root", "=", "os", ".", "path", ".", "expanduser", "(", "root", ")", "\n", "if", "not", "filename", ":", "\n", "        ", "filename", "=", "os", ".", "path", ".", "basename", "(", "url", ")", "\n", "", "fpath", "=", "os", ".", "path", ".", "join", "(", "root", ",", "filename", ")", "\n", "\n", "makedir_exist_ok", "(", "root", ")", "\n", "\n", "# downloads file", "\n", "if", "check_integrity", "(", "fpath", ",", "md5", ")", ":", "\n", "        ", "print", "(", "'Using downloaded and verified file: '", "+", "fpath", ")", "\n", "", "else", ":", "\n", "        ", "try", ":", "\n", "            ", "print", "(", "'Downloading '", "+", "url", "+", "' to '", "+", "fpath", ")", "\n", "urllib", ".", "request", ".", "urlretrieve", "(", "\n", "url", ",", "fpath", ",", "\n", "reporthook", "=", "gen_bar_updater", "(", ")", "\n", ")", "\n", "", "except", "(", "urllib", ".", "error", ".", "URLError", ",", "IOError", ")", "as", "e", ":", "\n", "            ", "if", "url", "[", ":", "5", "]", "==", "'https'", ":", "\n", "                ", "url", "=", "url", ".", "replace", "(", "'https:'", ",", "'http:'", ")", "\n", "print", "(", "'Failed download. Trying https -> http instead.'", "\n", "' Downloading '", "+", "url", "+", "' to '", "+", "fpath", ")", "\n", "urllib", ".", "request", ".", "urlretrieve", "(", "\n", "url", ",", "fpath", ",", "\n", "reporthook", "=", "gen_bar_updater", "(", ")", "\n", ")", "\n", "", "else", ":", "\n", "                ", "raise", "e", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.dataloader.utils.list_dir": [[109, 129], ["os.path.expanduser", "os.path.expanduser", "list", "filter", "os.listdir", "os.listdir", "os.path.join", "os.path.join", "os.path.isdir", "os.path.isdir", "os.path.join", "os.path.join"], "function", ["None"], ["", "", "", "", "def", "list_dir", "(", "root", ",", "prefix", "=", "False", ")", ":", "\n", "    ", "\"\"\"List all directories at a given root\n\n    Args:\n        root (str): Path to directory whose folders need to be listed\n        prefix (bool, optional): If true, prepends the path to each result, otherwise\n            only returns the name of the directories found\n    \"\"\"", "\n", "root", "=", "os", ".", "path", ".", "expanduser", "(", "root", ")", "\n", "directories", "=", "list", "(", "\n", "filter", "(", "\n", "lambda", "p", ":", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "root", ",", "p", ")", ")", ",", "\n", "os", ".", "listdir", "(", "root", ")", "\n", ")", "\n", ")", "\n", "\n", "if", "prefix", "is", "True", ":", "\n", "        ", "directories", "=", "[", "os", ".", "path", ".", "join", "(", "root", ",", "d", ")", "for", "d", "in", "directories", "]", "\n", "\n", "", "return", "directories", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.dataloader.utils.list_files": [[131, 153], ["os.path.expanduser", "os.path.expanduser", "list", "filter", "os.listdir", "os.listdir", "os.path.join", "os.path.join", "os.path.isfile", "os.path.isfile", "p.endswith", "os.path.join", "os.path.join"], "function", ["None"], ["", "def", "list_files", "(", "root", ",", "suffix", ",", "prefix", "=", "False", ")", ":", "\n", "    ", "\"\"\"List all files ending with a suffix at a given root\n\n    Args:\n        root (str): Path to directory whose folders need to be listed\n        suffix (str or tuple): Suffix of the files to match, e.g. '.png' or ('.jpg', '.png').\n            It uses the Python \"str.endswith\" method and is passed directly\n        prefix (bool, optional): If true, prepends the path to each result, otherwise\n            only returns the name of the files found\n    \"\"\"", "\n", "root", "=", "os", ".", "path", ".", "expanduser", "(", "root", ")", "\n", "files", "=", "list", "(", "\n", "filter", "(", "\n", "lambda", "p", ":", "os", ".", "path", ".", "isfile", "(", "os", ".", "path", ".", "join", "(", "root", ",", "p", ")", ")", "and", "p", ".", "endswith", "(", "suffix", ")", ",", "\n", "os", ".", "listdir", "(", "root", ")", "\n", ")", "\n", ")", "\n", "\n", "if", "prefix", "is", "True", ":", "\n", "        ", "files", "=", "[", "os", ".", "path", ".", "join", "(", "root", ",", "d", ")", "for", "d", "in", "files", "]", "\n", "\n", "", "return", "files", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.dataloader.utils.download_file_from_google_drive": [[155, 188], ["os.path.expanduser", "os.path.expanduser", "os.path.join", "os.path.join", "utils.makedir_exist_ok", "os.path.isfile", "os.path.isfile", "utils.check_integrity", "print", "requests.Session", "requests.Session.get", "utils._get_confirm_token", "utils._save_response_content", "requests.Session.get"], "function", ["home.repos.pwc.inspect_result.LYang-666_TRGP.dataloader.utils.makedir_exist_ok", "home.repos.pwc.inspect_result.LYang-666_TRGP.dataloader.utils.check_integrity", "home.repos.pwc.inspect_result.LYang-666_TRGP.dataloader.miniimagenet.DatasetGen.get", "home.repos.pwc.inspect_result.LYang-666_TRGP.dataloader.utils._get_confirm_token", "home.repos.pwc.inspect_result.LYang-666_TRGP.dataloader.utils._save_response_content", "home.repos.pwc.inspect_result.LYang-666_TRGP.dataloader.miniimagenet.DatasetGen.get"], ["", "def", "download_file_from_google_drive", "(", "file_id", ",", "root", ",", "filename", "=", "None", ",", "md5", "=", "None", ")", ":", "\n", "    ", "\"\"\"Download a Google Drive file from  and place it in root.\n\n    Args:\n        file_id (str): id of file to be downloaded\n        root (str): Directory to place downloaded file in\n        filename (str, optional): Name to save the file under. If None, use the id of the file.\n        md5 (str, optional): MD5 checksum of the download. If None, do not check\n    \"\"\"", "\n", "# Based on https://stackoverflow.com/questions/38511444/python-download-files-from-google-drive-using-url", "\n", "import", "requests", "\n", "url", "=", "\"https://docs.google.com/uc?export=download\"", "\n", "\n", "root", "=", "os", ".", "path", ".", "expanduser", "(", "root", ")", "\n", "if", "not", "filename", ":", "\n", "        ", "filename", "=", "file_id", "\n", "", "fpath", "=", "os", ".", "path", ".", "join", "(", "root", ",", "filename", ")", "\n", "\n", "makedir_exist_ok", "(", "root", ")", "\n", "\n", "if", "os", ".", "path", ".", "isfile", "(", "fpath", ")", "and", "check_integrity", "(", "fpath", ",", "md5", ")", ":", "\n", "        ", "print", "(", "'Using downloaded and verified file: '", "+", "fpath", ")", "\n", "", "else", ":", "\n", "        ", "session", "=", "requests", ".", "Session", "(", ")", "\n", "\n", "response", "=", "session", ".", "get", "(", "url", ",", "params", "=", "{", "'id'", ":", "file_id", "}", ",", "stream", "=", "True", ")", "\n", "token", "=", "_get_confirm_token", "(", "response", ")", "\n", "\n", "if", "token", ":", "\n", "            ", "params", "=", "{", "'id'", ":", "file_id", ",", "'confirm'", ":", "token", "}", "\n", "response", "=", "session", ".", "get", "(", "url", ",", "params", "=", "params", ",", "stream", "=", "True", ")", "\n", "\n", "", "_save_response_content", "(", "response", ",", "fpath", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.dataloader.utils._get_confirm_token": [[190, 196], ["response.cookies.items", "key.startswith"], "function", ["None"], ["", "", "def", "_get_confirm_token", "(", "response", ")", ":", "\n", "    ", "for", "key", ",", "value", "in", "response", ".", "cookies", ".", "items", "(", ")", ":", "\n", "        ", "if", "key", ".", "startswith", "(", "'download_warning'", ")", ":", "\n", "            ", "return", "value", "\n", "\n", "", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.dataloader.utils._save_response_content": [[198, 208], ["open", "torch.utils.model_zoo.tqdm", "response.iter_content", "torch.utils.model_zoo.tqdm.close", "f.write", "len", "torch.utils.model_zoo.tqdm.update"], "function", ["home.repos.pwc.inspect_result.LYang-666_TRGP.None.main_cifar100.Pre_Model.update"], ["", "def", "_save_response_content", "(", "response", ",", "destination", ",", "chunk_size", "=", "32768", ")", ":", "\n", "    ", "with", "open", "(", "destination", ",", "\"wb\"", ")", "as", "f", ":", "\n", "        ", "pbar", "=", "tqdm", "(", "total", "=", "None", ")", "\n", "progress", "=", "0", "\n", "for", "chunk", "in", "response", ".", "iter_content", "(", "chunk_size", ")", ":", "\n", "            ", "if", "chunk", ":", "# filter out keep-alive new chunks", "\n", "                ", "f", ".", "write", "(", "chunk", ")", "\n", "progress", "+=", "len", "(", "chunk", ")", "\n", "pbar", ".", "update", "(", "progress", "-", "pbar", ".", "n", ")", "\n", "", "", "pbar", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.dataloader.utils._is_tar": [[210, 212], ["filename.endswith"], "function", ["None"], ["", "", "def", "_is_tar", "(", "filename", ")", ":", "\n", "    ", "return", "filename", ".", "endswith", "(", "\".tar\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.dataloader.utils._is_targz": [[214, 216], ["filename.endswith"], "function", ["None"], ["", "def", "_is_targz", "(", "filename", ")", ":", "\n", "    ", "return", "filename", ".", "endswith", "(", "\".tar.gz\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.dataloader.utils._is_gzip": [[218, 220], ["filename.endswith", "filename.endswith"], "function", ["None"], ["", "def", "_is_gzip", "(", "filename", ")", ":", "\n", "    ", "return", "filename", ".", "endswith", "(", "\".gz\"", ")", "and", "not", "filename", ".", "endswith", "(", "\".tar.gz\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.dataloader.utils._is_zip": [[222, 224], ["filename.endswith"], "function", ["None"], ["", "def", "_is_zip", "(", "filename", ")", ":", "\n", "    ", "return", "filename", ".", "endswith", "(", "\".zip\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.dataloader.utils.extract_archive": [[226, 248], ["utils._is_tar", "os.path.dirname", "os.path.dirname", "utils._is_targz", "os.remove", "os.remove", "tarfile.open", "tar.extractall", "utils._is_gzip", "tarfile.open", "tar.extractall", "os.path.join", "os.path.join", "utils._is_zip", "open", "gzip.GzipFile", "out_f.write", "ValueError", "os.path.splitext", "os.path.splitext", "zip_f.read", "zipfile.ZipFile", "z.extractall", "os.path.basename", "os.path.basename"], "function", ["home.repos.pwc.inspect_result.LYang-666_TRGP.dataloader.utils._is_tar", "home.repos.pwc.inspect_result.LYang-666_TRGP.dataloader.utils._is_targz", "home.repos.pwc.inspect_result.LYang-666_TRGP.dataloader.utils._is_gzip", "home.repos.pwc.inspect_result.LYang-666_TRGP.dataloader.utils._is_zip"], ["", "def", "extract_archive", "(", "from_path", ",", "to_path", "=", "None", ",", "remove_finished", "=", "False", ")", ":", "\n", "    ", "if", "to_path", "is", "None", ":", "\n", "        ", "to_path", "=", "os", ".", "path", ".", "dirname", "(", "from_path", ")", "\n", "\n", "", "if", "_is_tar", "(", "from_path", ")", ":", "\n", "        ", "with", "tarfile", ".", "open", "(", "from_path", ",", "'r'", ")", "as", "tar", ":", "\n", "            ", "tar", ".", "extractall", "(", "path", "=", "to_path", ")", "\n", "", "", "elif", "_is_targz", "(", "from_path", ")", ":", "\n", "        ", "with", "tarfile", ".", "open", "(", "from_path", ",", "'r:gz'", ")", "as", "tar", ":", "\n", "            ", "tar", ".", "extractall", "(", "path", "=", "to_path", ")", "\n", "", "", "elif", "_is_gzip", "(", "from_path", ")", ":", "\n", "        ", "to_path", "=", "os", ".", "path", ".", "join", "(", "to_path", ",", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "from_path", ")", ")", "[", "0", "]", ")", "\n", "with", "open", "(", "to_path", ",", "\"wb\"", ")", "as", "out_f", ",", "gzip", ".", "GzipFile", "(", "from_path", ")", "as", "zip_f", ":", "\n", "            ", "out_f", ".", "write", "(", "zip_f", ".", "read", "(", ")", ")", "\n", "", "", "elif", "_is_zip", "(", "from_path", ")", ":", "\n", "        ", "with", "zipfile", ".", "ZipFile", "(", "from_path", ",", "'r'", ")", "as", "z", ":", "\n", "            ", "z", ".", "extractall", "(", "to_path", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Extraction of {} not supported\"", ".", "format", "(", "from_path", ")", ")", "\n", "\n", "", "if", "remove_finished", ":", "\n", "        ", "os", ".", "remove", "(", "from_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.dataloader.utils.download_and_extract_archive": [[250, 263], ["os.path.expanduser", "os.path.expanduser", "utils.download_url", "os.path.join", "os.path.join", "print", "utils.extract_archive", "os.path.basename", "os.path.basename"], "function", ["home.repos.pwc.inspect_result.LYang-666_TRGP.dataloader.utils.download_url", "home.repos.pwc.inspect_result.LYang-666_TRGP.dataloader.utils.extract_archive"], ["", "", "def", "download_and_extract_archive", "(", "url", ",", "download_root", ",", "extract_root", "=", "None", ",", "filename", "=", "None", ",", "\n", "md5", "=", "None", ",", "remove_finished", "=", "False", ")", ":", "\n", "    ", "download_root", "=", "os", ".", "path", ".", "expanduser", "(", "download_root", ")", "\n", "if", "extract_root", "is", "None", ":", "\n", "        ", "extract_root", "=", "download_root", "\n", "", "if", "not", "filename", ":", "\n", "        ", "filename", "=", "os", ".", "path", ".", "basename", "(", "url", ")", "\n", "\n", "", "download_url", "(", "url", ",", "download_root", ",", "filename", ",", "md5", ")", "\n", "\n", "archive", "=", "os", ".", "path", ".", "join", "(", "download_root", ",", "filename", ")", "\n", "print", "(", "\"Extracting {} to {}\"", ".", "format", "(", "archive", ",", "extract_root", ")", ")", "\n", "extract_archive", "(", "archive", ",", "extract_root", ",", "remove_finished", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.dataloader.utils.iterable_to_str": [[265, 267], ["str"], "function", ["None"], ["", "def", "iterable_to_str", "(", "iterable", ")", ":", "\n", "    ", "return", "\"'\"", "+", "\"', '\"", ".", "join", "(", "[", "str", "(", "item", ")", "for", "item", "in", "iterable", "]", ")", "+", "\"'\"", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.dataloader.utils.verify_str_arg": [[269, 292], ["isinstance", "msg.format.format", "ValueError", "ValueError", "msg.format.format", "type", "utils.iterable_to_str"], "function", ["home.repos.pwc.inspect_result.LYang-666_TRGP.dataloader.utils.iterable_to_str"], ["", "def", "verify_str_arg", "(", "value", ",", "arg", "=", "None", ",", "valid_values", "=", "None", ",", "custom_msg", "=", "None", ")", ":", "\n", "    ", "if", "not", "isinstance", "(", "value", ",", "torch", ".", "_six", ".", "string_classes", ")", ":", "\n", "        ", "if", "arg", "is", "None", ":", "\n", "            ", "msg", "=", "\"Expected type str, but got type {type}.\"", "\n", "", "else", ":", "\n", "            ", "msg", "=", "\"Expected type str for argument {arg}, but got type {type}.\"", "\n", "", "msg", "=", "msg", ".", "format", "(", "type", "=", "type", "(", "value", ")", ",", "arg", "=", "arg", ")", "\n", "raise", "ValueError", "(", "msg", ")", "\n", "\n", "", "if", "valid_values", "is", "None", ":", "\n", "        ", "return", "value", "\n", "\n", "", "if", "value", "not", "in", "valid_values", ":", "\n", "        ", "if", "custom_msg", "is", "not", "None", ":", "\n", "            ", "msg", "=", "custom_msg", "\n", "", "else", ":", "\n", "            ", "msg", "=", "(", "\"Unknown value '{value}' for argument {arg}. \"", "\n", "\"Valid values are {{{valid_values}}}.\"", ")", "\n", "msg", "=", "msg", ".", "format", "(", "value", "=", "value", ",", "arg", "=", "arg", ",", "\n", "valid_values", "=", "iterable_to_str", "(", "valid_values", ")", ")", "\n", "", "raise", "ValueError", "(", "msg", ")", "\n", "\n", "", "return", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.dataloader.utils.get_int": [[294, 296], ["int", "codecs.encode"], "function", ["None"], ["", "def", "get_int", "(", "b", ")", ":", "\n", "    ", "return", "int", "(", "codecs", ".", "encode", "(", "b", ",", "'hex'", ")", ",", "16", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.dataloader.utils.open_maybe_compressed_file": [[298, 311], ["path.endswith", "path.endswith", "open", "isinstance", "gzip.open", "lzma.open"], "function", ["None"], ["", "def", "open_maybe_compressed_file", "(", "path", ")", ":", "\n", "    ", "\"\"\"Return a file object that possibly decompresses 'path' on the fly.\n       Decompression occurs when argument `path` is a string and ends with '.gz' or '.xz'.\n    \"\"\"", "\n", "if", "not", "isinstance", "(", "path", ",", "torch", ".", "_six", ".", "string_classes", ")", ":", "\n", "        ", "return", "path", "\n", "", "if", "path", ".", "endswith", "(", "'.gz'", ")", ":", "\n", "        ", "import", "gzip", "\n", "return", "gzip", ".", "open", "(", "path", ",", "'rb'", ")", "\n", "", "if", "path", ".", "endswith", "(", "'.xz'", ")", ":", "\n", "        ", "import", "lzma", "\n", "return", "lzma", ".", "open", "(", "path", ",", "'rb'", ")", "\n", "", "return", "open", "(", "path", ",", "'rb'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.dataloader.utils.read_sn3_pascalvincent_tensor": [[313, 340], ["utils.get_int", "numpy.frombuffer", "torch.from_numpy().view", "hasattr", "utils.open_maybe_compressed_file", "f.read", "utils.get_int", "range", "numpy.prod", "torch.from_numpy", "numpy.dtype", "numpy.dtype", "numpy.dtype", "numpy.dtype", "np.frombuffer.astype"], "function", ["home.repos.pwc.inspect_result.LYang-666_TRGP.dataloader.utils.get_int", "home.repos.pwc.inspect_result.LYang-666_TRGP.dataloader.utils.open_maybe_compressed_file", "home.repos.pwc.inspect_result.LYang-666_TRGP.dataloader.utils.get_int"], ["", "def", "read_sn3_pascalvincent_tensor", "(", "path", ",", "strict", "=", "True", ")", ":", "\n", "    ", "\"\"\"Read a SN3 file in \"Pascal Vincent\" format (Lush file 'libidx/idx-io.lsh').\n       Argument may be a filename, compressed filename, or file object.\n    \"\"\"", "\n", "# typemap", "\n", "if", "not", "hasattr", "(", "read_sn3_pascalvincent_tensor", ",", "'typemap'", ")", ":", "\n", "        ", "read_sn3_pascalvincent_tensor", ".", "typemap", "=", "{", "\n", "8", ":", "(", "torch", ".", "uint8", ",", "np", ".", "uint8", ",", "np", ".", "uint8", ")", ",", "\n", "9", ":", "(", "torch", ".", "int8", ",", "np", ".", "int8", ",", "np", ".", "int8", ")", ",", "\n", "11", ":", "(", "torch", ".", "int16", ",", "np", ".", "dtype", "(", "'>i2'", ")", ",", "'i2'", ")", ",", "\n", "12", ":", "(", "torch", ".", "int32", ",", "np", ".", "dtype", "(", "'>i4'", ")", ",", "'i4'", ")", ",", "\n", "13", ":", "(", "torch", ".", "float32", ",", "np", ".", "dtype", "(", "'>f4'", ")", ",", "'f4'", ")", ",", "\n", "14", ":", "(", "torch", ".", "float64", ",", "np", ".", "dtype", "(", "'>f8'", ")", ",", "'f8'", ")", "}", "\n", "# read", "\n", "", "with", "open_maybe_compressed_file", "(", "path", ")", "as", "f", ":", "\n", "        ", "data", "=", "f", ".", "read", "(", ")", "\n", "# parse", "\n", "", "magic", "=", "get_int", "(", "data", "[", "0", ":", "4", "]", ")", "\n", "nd", "=", "magic", "%", "256", "\n", "ty", "=", "magic", "//", "256", "\n", "assert", "nd", ">=", "1", "and", "nd", "<=", "3", "\n", "assert", "ty", ">=", "8", "and", "ty", "<=", "14", "\n", "m", "=", "read_sn3_pascalvincent_tensor", ".", "typemap", "[", "ty", "]", "\n", "s", "=", "[", "get_int", "(", "data", "[", "4", "*", "(", "i", "+", "1", ")", ":", "4", "*", "(", "i", "+", "2", ")", "]", ")", "for", "i", "in", "range", "(", "nd", ")", "]", "\n", "parsed", "=", "np", ".", "frombuffer", "(", "data", ",", "dtype", "=", "m", "[", "1", "]", ",", "offset", "=", "(", "4", "*", "(", "nd", "+", "1", ")", ")", ")", "\n", "assert", "parsed", ".", "shape", "[", "0", "]", "==", "np", ".", "prod", "(", "s", ")", "or", "not", "strict", "\n", "return", "torch", ".", "from_numpy", "(", "parsed", ".", "astype", "(", "m", "[", "2", "]", ",", "copy", "=", "False", ")", ")", ".", "view", "(", "*", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.dataloader.utils.read_label_file": [[342, 348], ["read_sn3_pascalvincent_tensor.long", "open", "utils.read_sn3_pascalvincent_tensor", "read_sn3_pascalvincent_tensor.ndimension"], "function", ["home.repos.pwc.inspect_result.LYang-666_TRGP.dataloader.utils.read_sn3_pascalvincent_tensor"], ["", "def", "read_label_file", "(", "path", ")", ":", "\n", "    ", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "x", "=", "read_sn3_pascalvincent_tensor", "(", "f", ",", "strict", "=", "False", ")", "\n", "", "assert", "(", "x", ".", "dtype", "==", "torch", ".", "uint8", ")", "\n", "assert", "(", "x", ".", "ndimension", "(", ")", "==", "1", ")", "\n", "return", "x", ".", "long", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LYang-666_TRGP.dataloader.utils.read_image_file": [[350, 356], ["open", "utils.read_sn3_pascalvincent_tensor", "read_sn3_pascalvincent_tensor.ndimension"], "function", ["home.repos.pwc.inspect_result.LYang-666_TRGP.dataloader.utils.read_sn3_pascalvincent_tensor"], ["", "def", "read_image_file", "(", "path", ")", ":", "\n", "    ", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "x", "=", "read_sn3_pascalvincent_tensor", "(", "f", ",", "strict", "=", "False", ")", "\n", "", "assert", "(", "x", ".", "dtype", "==", "torch", ".", "uint8", ")", "\n", "assert", "(", "x", ".", "ndimension", "(", ")", "==", "3", ")", "\n", "return", "x", "", "", ""]]}