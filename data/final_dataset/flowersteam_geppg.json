{"home.repos.pwc.inspect_result.flowersteam_geppg.None.representers.CheetahRepresenter.__init__": [[8, 14], ["numpy.array"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "_description", "=", "[", "'mean_vx'", ",", "'min_z'", "]", "\n", "# define goal space", "\n", "self", ".", "_initial_space", "=", "np", ".", "array", "(", "[", "[", "-", "4", ",", "7", "]", ",", "[", "-", "3", ",", "2", "]", "]", ")", "\n", "self", ".", "_representation", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.None.representers.CheetahRepresenter.represent": [[15, 26], ["numpy.copy", "numpy.array", "numpy.array", "numpy.concatenate", "gep_utils.scale_vec", "representers.CheetahRepresenter._representation.reshape", "obs[].mean", "obs[].min"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.concatenate", "home.repos.pwc.inspect_result.flowersteam_geppg.None.gep_utils.scale_vec", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.mean", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.min"], ["", "def", "represent", "(", "self", ",", "obs_seq", ",", "act_seq", "=", "None", ")", ":", "\n", "        ", "obs", "=", "np", ".", "copy", "(", "obs_seq", ")", "\n", "mean_vx", "=", "np", ".", "array", "(", "[", "obs", "[", "0", ",", "8", ",", ":", "]", ".", "mean", "(", ")", "]", ")", "\n", "min_z", "=", "np", ".", "array", "(", "[", "obs", "[", "0", ",", "0", ",", ":", "]", ".", "min", "(", ")", "]", ")", "\n", "self", ".", "_representation", "=", "np", ".", "concatenate", "(", "[", "mean_vx", ",", "min_z", "]", ",", "axis", "=", "0", ")", "\n", "\n", "# scale representation to [-1,1]^N", "\n", "self", ".", "_representation", "=", "scale_vec", "(", "self", ".", "_representation", ",", "self", ".", "_initial_space", ")", "\n", "self", ".", "_representation", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "\n", "return", "self", ".", "_representation", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.None.representers.CheetahRepresenter.initial_space": [[27, 30], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "initial_space", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_initial_space", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.None.representers.CheetahRepresenter.dim": [[31, 34], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "dim", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_initial_space", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.None.representers.CMCRepresenter.__init__": [[37, 42], ["numpy.array"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "_description", "=", "[", "'max position'", ",", "'range position'", ",", "'spent energy'", "]", "\n", "# define goal space", "\n", "self", ".", "_initial_space", "=", "np", ".", "array", "(", "[", "[", "-", "0.6", ",", "0.6", "]", ",", "[", "0.", ",", "1.8", "]", ",", "[", "0", ",", "100", "]", "]", ")", "# space in which goal are sampled", "\n", "self", ".", "_representation", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.None.representers.CMCRepresenter.represent": [[43, 54], ["numpy.array", "numpy.array", "numpy.array", "numpy.concatenate", "gep_utils.scale_vec", "representers.CMCRepresenter._representation.reshape", "numpy.sum", "numpy.nanmax", "numpy.nanmax", "numpy.nanmin", "numpy.argwhere", "numpy.isnan"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.concatenate", "home.repos.pwc.inspect_result.flowersteam_geppg.None.gep_utils.scale_vec", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.sum"], ["", "def", "represent", "(", "self", ",", "obs_seq", ",", "act_seq", ")", ":", "\n", "        ", "spent_energy", "=", "np", ".", "array", "(", "[", "np", ".", "sum", "(", "act_seq", "[", "0", ",", "0", ",", "np", ".", "argwhere", "(", "~", "np", ".", "isnan", "(", "act_seq", ")", ")", "]", "**", "2", "*", "0.1", ")", "]", ")", "\n", "diff", "=", "np", ".", "array", "(", "[", "np", ".", "nanmax", "(", "obs_seq", "[", "0", ",", "0", ",", ":", "]", ")", "-", "np", ".", "nanmin", "(", "obs_seq", "[", "0", ",", "0", ",", ":", "]", ")", "]", ")", "\n", "max", "=", "np", ".", "array", "(", "[", "np", ".", "nanmax", "(", "obs_seq", "[", "0", ",", "0", ",", ":", "]", ")", "]", ")", "\n", "self", ".", "_representation", "=", "np", ".", "concatenate", "(", "[", "max", ",", "diff", ",", "spent_energy", "]", ",", "axis", "=", "0", ")", "\n", "\n", "# scale representation to [-1,1]^N", "\n", "self", ".", "_representation", "=", "scale_vec", "(", "self", ".", "_representation", ",", "self", ".", "_initial_space", ")", "\n", "self", ".", "_representation", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "\n", "return", "self", ".", "_representation", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.None.representers.CMCRepresenter.initial_space": [[55, 58], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "initial_space", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_initial_space", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.None.representers.CMCRepresenter.dim": [[59, 62], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "dim", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_initial_space", ".", "shape", "[", "0", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.flowersteam_geppg.None.inverse_models.KNNRegressor.__init__": [[7, 19], ["KNeighborsRegressor", "globals", "ImportError"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "n_neighbors", "=", "5", ")", ":", "\n", "\n", "        ", "try", ":", "\n", "            ", "from", "sklearn", ".", "neighbors", "import", "KNeighborsRegressor", "\n", "globals", "(", ")", "[", "'KNeighborsRegressor'", "]", "=", "KNeighborsRegressor", "\n", "", "except", ":", "\n", "            ", "raise", "ImportError", "(", "\"You need sklearn.neighbors to use class {}\"", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ")", ")", "\n", "\n", "", "self", ".", "_model", "=", "KNeighborsRegressor", "(", "n_neighbors", "=", "n_neighbors", ",", "metric", "=", "'euclidean'", ",", "algorithm", "=", "'ball_tree'", ",", "weights", "=", "'distance'", ")", "\n", "self", ".", "_prediction", "=", "None", "\n", "self", ".", "_X", "=", "None", "\n", "self", ".", "_Y", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.None.inverse_models.KNNRegressor.update": [[20, 33], ["inverse_models.KNNRegressor._model.fit", "numpy.copy().reshape", "numpy.copy().reshape", "numpy.concatenate", "numpy.concatenate", "numpy.copy", "numpy.copy", "X.reshape", "Y.reshape"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.concatenate", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.concatenate"], ["", "def", "update", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "        ", "\"\"\"\n        X: representation\n        Y: policy\n        \"\"\"", "\n", "if", "self", ".", "_X", "is", "None", ":", "\n", "            ", "self", ".", "_X", "=", "np", ".", "copy", "(", "X", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "self", ".", "_Y", "=", "np", ".", "copy", "(", "Y", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_X", "=", "np", ".", "concatenate", "(", "[", "self", ".", "_X", ",", "X", ".", "reshape", "(", "1", ",", "-", "1", ")", "]", ",", "axis", "=", "0", ")", "\n", "self", ".", "_Y", "=", "np", ".", "concatenate", "(", "[", "self", ".", "_Y", ",", "Y", ".", "reshape", "(", "1", ",", "-", "1", ")", "]", ",", "axis", "=", "0", ")", "\n", "\n", "", "self", ".", "_model", ".", "fit", "(", "self", ".", "_X", ",", "self", ".", "_Y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.None.inverse_models.KNNRegressor.predict": [[34, 40], ["numpy.copy", "inverse_models.KNNRegressor._model.predict", "numpy.copy.reshape"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.None.inverse_models.KNNRegressor.predict"], ["", "def", "predict", "(", "self", ",", "input_X", ")", ":", "\n", "        ", "\"\"\"\n        input_X: goal (representation)\n        \"\"\"", "\n", "in_knn", "=", "np", ".", "copy", "(", "input_X", ")", "\n", "return", "self", ".", "_model", ".", "predict", "(", "in_knn", ".", "reshape", "(", "1", ",", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.None.inverse_models.KNNRegressor.terminate": [[42, 44], ["None"], "methods", ["None"], ["", "def", "terminate", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.None.inverse_models.KNNRegressor.prediction": [[45, 48], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "prediction", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_prediction", "", "", "", ""]], "home.repos.pwc.inspect_result.flowersteam_geppg.None.gep_utils.create_data_path": [[8, 20], ["os.path.exists", "os.mkdir", "os.path.exists", "print", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.azure_utils.Container.exists", "home.repos.pwc.inspect_result.flowersteam_geppg.common.azure_utils.Container.exists"], ["def", "create_data_path", "(", "saving_folder", ",", "env_id", ",", "trial_id", ")", ":", "\n", "    ", "data_path", "=", "saving_folder", "+", "env_id", "+", "'/'", "+", "str", "(", "trial_id", ")", "+", "'/'", "\n", "if", "os", ".", "path", ".", "exists", "(", "data_path", ")", ":", "\n", "        ", "i", "=", "1", "\n", "while", "os", ".", "path", ".", "exists", "(", "saving_folder", "+", "env_id", "+", "'/'", "+", "str", "(", "trial_id", "+", "100", "*", "i", ")", "+", "'/'", ")", ":", "\n", "            ", "i", "+=", "1", "\n", "", "trial_id", "+=", "i", "*", "100", "\n", "print", "(", "'result_path already exist, trial_id changed to: '", ",", "trial_id", ")", "\n", "", "data_path", "=", "saving_folder", "+", "env_id", "+", "'/'", "+", "str", "(", "trial_id", ")", "+", "'/'", "\n", "os", ".", "mkdir", "(", "data_path", ")", "\n", "\n", "return", "data_path", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.None.gep_utils.scale_vec": [[21, 29], ["numpy.copy", "numpy.diff().squeeze", "numpy.diff"], "function", ["None"], ["", "def", "scale_vec", "(", "vector", ",", "initial_space", ")", ":", "\n", "    ", "\"\"\"\n    Scale vector from initial space to [-1,1]^N\n    \"\"\"", "\n", "vec_in", "=", "np", ".", "copy", "(", "vector", ")", "\n", "vec_out", "=", "(", "vec_in", "-", "initial_space", "[", ":", ",", "0", "]", ")", "*", "2", "/", "np", ".", "diff", "(", "initial_space", ")", ".", "squeeze", "(", ")", "-", "1", "\n", "\n", "return", "vec_out", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.None.gep_utils.sample": [[30, 38], ["numpy.random.random", "numpy.diff().squeeze", "numpy.diff"], "function", ["None"], ["", "def", "sample", "(", "space", ")", ":", "\n", "    ", "\"\"\"\n    Uniform sampling of a vector from the input space.\n    Space must be a 2d-array such that 1st column are the mins and 2nd the max for each dimension\n    \"\"\"", "\n", "vec_out", "=", "np", ".", "random", ".", "random", "(", "space", ".", "shape", "[", "0", "]", ")", "*", "np", ".", "diff", "(", "space", ")", ".", "squeeze", "(", ")", "+", "space", "[", ":", ",", "0", "]", "\n", "\n", "return", "vec_out", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.None.gep_utils.compute_metrics": [[39, 107], ["numpy.copy", "numpy.copy", "numpy.copy", "numpy.copy", "numpy.copy", "numpy.copy", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "range", "range", "metrics.append", "np.copy.mean", "metrics.append", "np.copy.mean", "metrics.append", "np.copy.std", "metrics.append", "normalized_std_obs.sum.sum", "metrics.append", "range", "metrics.append", "[].ravel", "range", "[].ravel.mean", "metrics.append", "sklearn.neighbors.NearestNeighbors", "sklearn.neighbors.NearestNeighbors.fit", "numpy.zeros", "range", "metrics.append", "obs[].ravel", "act[].ravel", "rew[].ravel", "np.zeros.std", "numpy.argwhere", "entropies.append", "numpy.array().mean", "numpy.float", "sklearn.neighbors.NearestNeighbors.kneighbors", "dists_nn[].mean", "np.zeros.mean", "np.zeros.max", "np.zeros.min", "numpy.isnan().sum", "numpy.histogram", "numpy.float", "[].ravel.sum", "all_rep[].reshape", "numpy.isnan", "c_normalized.sum", "numpy.nonzero", "sum", "numpy.array", "numpy.histogramdd", "numpy.isnan", "numpy.argwhere", "numpy.log", "numpy.isnan"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.mean", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.mean", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.std", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.sum", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.mean", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.std", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.mean", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.mean", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.mean", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.max", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.min", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.sum", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.sum", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.sum", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.sum", "home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.log"], ["", "def", "compute_metrics", "(", "gep_memory", ")", ":", "\n", "    ", "metrics", "=", "[", "]", "\n", "#", "\n", "obs", "=", "np", ".", "copy", "(", "gep_memory", "[", "'observations'", "]", ")", "\n", "act", "=", "np", ".", "copy", "(", "gep_memory", "[", "'actions'", "]", ")", "\n", "rew", "=", "np", ".", "copy", "(", "gep_memory", "[", "'rewards'", "]", ")", "\n", "rep", "=", "np", ".", "copy", "(", "gep_memory", "[", "'representations'", "]", ")", "\n", "final_perfs", "=", "np", ".", "copy", "(", "gep_memory", "[", "'final_eval_perfs'", "]", ")", "\n", "train_perfs", "=", "np", ".", "copy", "(", "gep_memory", "[", "'train_perfs'", "]", ")", "\n", "all_obs", "=", "np", ".", "zeros", "(", "[", "obs", ".", "shape", "[", "0", "]", "*", "obs", ".", "shape", "[", "1", "]", ",", "obs", ".", "shape", "[", "2", "]", "]", ")", "\n", "all_act", "=", "np", ".", "zeros", "(", "[", "act", ".", "shape", "[", "0", "]", "*", "act", ".", "shape", "[", "1", "]", ",", "act", ".", "shape", "[", "2", "]", "]", ")", "\n", "all_rew", "=", "np", ".", "zeros", "(", "[", "rew", ".", "shape", "[", "0", "]", "*", "rew", ".", "shape", "[", "1", "]", ",", "rew", ".", "shape", "[", "2", "]", "]", ")", "\n", "all_rep", "=", "rep", "\n", "for", "i", "in", "range", "(", "obs", ".", "shape", "[", "2", "]", ")", ":", "\n", "        ", "all_obs", "[", ":", ",", "i", "]", "=", "obs", "[", ":", ",", ":", ",", "i", "]", ".", "ravel", "(", ")", "\n", "", "for", "i", "in", "range", "(", "act", ".", "shape", "[", "2", "]", ")", ":", "\n", "        ", "all_act", "[", ":", ",", "i", "]", "=", "act", "[", ":", ",", ":", ",", "i", "]", ".", "ravel", "(", ")", "\n", "", "for", "i", "in", "range", "(", "rew", ".", "shape", "[", "2", "]", ")", ":", "\n", "        ", "all_rew", "[", ":", ",", "i", "]", "=", "rew", "[", ":", ",", ":", ",", "i", "]", ".", "ravel", "(", ")", "\n", "\n", "# size of the buffer", "\n", "", "size_buffer", "=", "obs", ".", "shape", "[", "0", "]", "\n", "metrics", ".", "append", "(", "size_buffer", ")", "\n", "# mean eval performance", "\n", "mean_eval_performance", "=", "final_perfs", ".", "mean", "(", ")", "\n", "metrics", ".", "append", "(", "mean_eval_performance", ")", "\n", "# mean training performances", "\n", "mean_train_performance", "=", "train_perfs", ".", "mean", "(", ")", "\n", "metrics", ".", "append", "(", "mean_train_performance", ")", "\n", "# std training performances", "\n", "std_train_performance", "=", "train_perfs", ".", "std", "(", ")", "\n", "metrics", ".", "append", "(", "std_train_performance", ")", "\n", "# std obs", "\n", "normalized_std_obs", "=", "all_obs", ".", "std", "(", "axis", "=", "0", ")", "/", "(", "all_obs", ".", "max", "(", "axis", "=", "0", ")", "-", "all_obs", ".", "min", "(", "axis", "=", "0", ")", ")", "\n", "normalized_std_obs", "=", "normalized_std_obs", ".", "sum", "(", ")", "\n", "metrics", ".", "append", "(", "normalized_std_obs", ")", "\n", "# entropy per dimension (observations)", "\n", "entropies", "=", "[", "]", "\n", "n_bins", "=", "50", "\n", "for", "i", "in", "range", "(", "all_obs", ".", "shape", "[", "1", "]", ")", ":", "\n", "        ", "non_nan", "=", "np", ".", "argwhere", "(", "~", "np", ".", "isnan", "(", "all_obs", "[", ":", ",", "i", "]", ")", ")", "\n", "obs", "=", "all_obs", "[", "non_nan", ",", "i", "]", "\n", "assert", "np", ".", "isnan", "(", "obs", ")", ".", "sum", "(", ")", "==", "0", "\n", "c_normalized", "=", "np", ".", "histogram", "(", "obs", ",", "n_bins", ")", "[", "0", "]", "\n", "c_normalized", "=", "c_normalized", "/", "np", ".", "float", "(", "c_normalized", ".", "sum", "(", ")", ")", "\n", "c_normalized", "=", "c_normalized", "[", "np", ".", "nonzero", "(", "c_normalized", ")", "]", "\n", "entropies", ".", "append", "(", "-", "sum", "(", "c_normalized", "*", "np", ".", "log", "(", "c_normalized", ")", ")", ")", "\n", "", "metrics", ".", "append", "(", "np", ".", "array", "(", "entropies", ")", ".", "mean", "(", ")", ")", "\n", "# coverage goal space", "\n", "all_rep", "=", "all_rep", "[", "np", ".", "argwhere", "(", "~", "np", ".", "isnan", "(", "all_rep", "[", ":", ",", "0", "]", ")", ")", "[", ":", ",", "0", "]", ",", ":", "]", "\n", "uni", "=", "1", "/", "(", "n_bins", "**", "all_rep", ".", "shape", "[", "1", "]", ")", "\n", "c", "=", "np", ".", "histogramdd", "(", "all_rep", ",", "n_bins", ")", "[", "0", "]", ".", "ravel", "(", ")", "\n", "c", "=", "c", "/", "np", ".", "float", "(", "c", ".", "sum", "(", ")", ")", "\n", "for", "i", "in", "range", "(", "c", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "if", "c", "[", "i", "]", "<", "uni", ":", "\n", "            ", "c", "[", "i", "]", "=", "2", "*", "c", "[", "i", "]", "-", "uni", "\n", "", "", "cov_metric", "=", "c", ".", "mean", "(", ")", "\n", "metrics", ".", "append", "(", "cov_metric", ")", "\n", "# diversity score", "\n", "nn", "=", "NearestNeighbors", "(", "n_neighbors", "=", "4", ",", "algorithm", "=", "'ball_tree'", ",", "metric", "=", "'euclidean'", ")", "\n", "nn", ".", "fit", "(", "all_rep", ")", "\n", "dists", "=", "np", ".", "zeros", "(", "[", "all_rep", ".", "shape", "[", "0", "]", "]", ")", "\n", "for", "i", "in", "range", "(", "all_rep", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "dists_nn", ",", "tmp", "=", "nn", ".", "kneighbors", "(", "all_rep", "[", "i", ",", ":", "]", ".", "reshape", "(", "1", ",", "-", "1", ")", ")", "\n", "dists", "[", "i", "]", "=", "dists_nn", "[", "0", ",", "1", ":", "]", ".", "mean", "(", ")", "\n", "", "metrics", ".", "append", "(", "dists", ".", "mean", "(", ")", ")", "\n", "\n", "return", "metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.None.gep_utils.replay_save_video": [[108, 136], ["gym.make", "gym.wrappers.monitoring.video_recorder.VideoRecorder", "gym.make.reset", "numpy.zeros", "range", "print", "gym.wrappers.monitoring.video_recorder.VideoRecorder.close", "cheetah_config", "controller.step().reshape", "gym.make.step", "gym.make.render", "numpy.nansum", "cmc_config", "numpy.copy", "controller.step"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.__init__.VecEnv.close", "home.repos.pwc.inspect_result.flowersteam_geppg.None.configs.cheetah_config", "home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.__init__.VecEnv.step", "home.repos.pwc.inspect_result.flowersteam_geppg.None.configs.cmc_config", "home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.__init__.VecEnv.step"], ["", "def", "replay_save_video", "(", "env_id", ",", "policy", ",", "path_vids", ")", ":", "\n", "\n", "\n", "    ", "if", "env_id", "==", "'HalfCheetah-v2'", ":", "\n", "        ", "from", "configs", "import", "cheetah_config", "\n", "nb_bootstrap", ",", "nb_explorations", ",", "nb_tests", ",", "nb_timesteps", ",", "offline_eval", ",", "controller", ",", "representer", ",", "nb_rep", ",", "engineer_goal", ",", "goal_space", ",", "initial_space", ",", "knn", ",", "noise", ",", "nb_weights", "=", "cheetah_config", "(", ")", "\n", "", "elif", "env_id", "==", "'MountainCarContinuous-v0'", ":", "\n", "        ", "nb_bootstrap", ",", "nb_explorations", ",", "nb_tests", ",", "nb_timesteps", ",", "offline_eval", ",", "controller", ",", "representer", ",", "nb_rep", ",", "engineer_goal", ",", "goal_space", ",", "initial_space", ",", "knn", ",", "noise", ",", "nb_weights", "=", "cmc_config", "(", ")", "\n", "\n", "", "env", "=", "gym", ".", "make", "(", "env_id", ")", "\n", "vid_env", "=", "VideoRecorder", "(", "env", "=", "env", ",", "path", "=", "path_vids", ")", "\n", "obs", "=", "env", ".", "reset", "(", ")", "\n", "rew", "=", "np", ".", "zeros", "(", "[", "nb_timesteps", "+", "1", "]", ")", "\n", "done", "=", "False", "\n", "for", "t", "in", "range", "(", "nb_timesteps", ")", ":", "\n", "        ", "if", "done", ":", "\n", "            ", "break", "\n", "", "act", "=", "controller", ".", "step", "(", "policy", ",", "obs", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "out", "=", "env", ".", "step", "(", "np", ".", "copy", "(", "act", ")", ")", "\n", "env", ".", "render", "(", ")", "\n", "# vid_env.capture_frame()", "\n", "obs", "=", "out", "[", "0", "]", "\n", "rew", "[", "t", "+", "1", "]", "=", "out", "[", "1", "]", "\n", "done", "=", "out", "[", "2", "]", "\n", "", "print", "(", "'Run performance: '", ",", "np", ".", "nansum", "(", "rew", ")", ")", "\n", "vid_env", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.None.gep.run_experiment": [[26, 164], ["gep_utils.create_data_path", "numpy.array().mean", "range", "gym.make", "numpy.array().reshape", "numpy.array().reshape", "numpy.array().reshape", "range", "range", "range", "print", "dict", "np.concatenate.swapaxes", "np.concatenate.swapaxes", "np.concatenate.swapaxes", "numpy.array", "numpy.array", "numpy.array", "gep_utils.compute_metrics", "DDPG_baseline_v2.baselines.ddpg.configs.config.ddpg_config", "DDPG_baseline_v2.baselines.ddpg.main_config.run_ddpg", "configs.cheetah_config", "int", "print", "gep.play_policy", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "train_perfs.append", "print", "gep.random_goal", "gep.play_policy", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "train_perfs.append", "print", "gep.offline_evaluations", "numpy.array().mean", "open", "pickle.dump", "numpy.array", "configs.cmc_config", "int", "numpy.array", "numpy.array", "numpy.array", "numpy.nansum", "gep.offline_evaluations", "numpy.nansum", "gep.offline_evaluations", "int", "numpy.random.random", "numpy.array", "numpy.random.random"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.None.gep_utils.create_data_path", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.mean", "home.repos.pwc.inspect_result.flowersteam_geppg.None.gep_utils.compute_metrics", "home.repos.pwc.inspect_result.flowersteam_geppg.configs.config.ddpg_config", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.main_config.run_ddpg", "home.repos.pwc.inspect_result.flowersteam_geppg.None.configs.cheetah_config", "home.repos.pwc.inspect_result.flowersteam_geppg.None.gep.play_policy", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.concatenate", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.concatenate", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.concatenate", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.None.gep.random_goal", "home.repos.pwc.inspect_result.flowersteam_geppg.None.gep.play_policy", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.concatenate", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.concatenate", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.concatenate", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.None.gep.offline_evaluations", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.mean", "home.repos.pwc.inspect_result.flowersteam_geppg.None.configs.cmc_config", "home.repos.pwc.inspect_result.flowersteam_geppg.None.gep.offline_evaluations", "home.repos.pwc.inspect_result.flowersteam_geppg.None.gep.offline_evaluations"], ["def", "run_experiment", "(", "env_id", ",", "trial", ",", "noise_type", ",", "study", ",", "nb_exploration", ",", "saving_folder", ")", ":", "\n", "\n", "# create data path", "\n", "    ", "data_path", "=", "create_data_path", "(", "saving_folder", ",", "env_id", ",", "trial_id", ")", "\n", "\n", "# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #", "\n", "# GEP", "\n", "# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #", "\n", "\n", "if", "'GEP'", "in", "study", ":", "\n", "# get GEP config", "\n", "        ", "if", "env_id", "==", "'HalfCheetah-v2'", ":", "\n", "            ", "nb_bootstrap", ",", "nb_explorations", ",", "nb_tests", ",", "nb_timesteps", ",", "offline_eval", ",", "controller", ",", "representer", ",", "nb_rep", ",", "engineer_goal", ",", "goal_space", ",", "initial_space", ",", "knn", ",", "noise", ",", "nb_weights", "=", "cheetah_config", "(", ")", "\n", "", "elif", "env_id", "==", "'MountainCarContinuous-v0'", ":", "\n", "            ", "nb_bootstrap", ",", "nb_explorations", ",", "nb_tests", ",", "nb_timesteps", ",", "offline_eval", ",", "controller", ",", "representer", ",", "nb_rep", ",", "engineer_goal", ",", "goal_space", ",", "initial_space", ",", "knn", ",", "noise", ",", "nb_weights", "=", "cmc_config", "(", ")", "\n", "\n", "# overun some settings", "\n", "", "nb_explorations", "=", "nb_exploration", "\n", "nb_tests", "=", "100", "\n", "offline_eval", "=", "(", "1e6", ",", "10", ")", "#(x,y): y evaluation episodes every x (done offline)", "\n", "\n", "train_perfs", "=", "[", "]", "\n", "eval_perfs", "=", "[", "]", "\n", "final_eval_perfs", "=", "[", "]", "\n", "\n", "# compute test indices:", "\n", "test_ind", "=", "range", "(", "int", "(", "offline_eval", "[", "0", "]", ")", "-", "1", ",", "nb_explorations", ",", "int", "(", "offline_eval", "[", "0", "]", ")", ")", "\n", "\n", "# define environment", "\n", "env", "=", "gym", ".", "make", "(", "env_id", ")", "\n", "nb_act", "=", "env", ".", "action_space", ".", "shape", "[", "0", "]", "\n", "nb_obs", "=", "env", ".", "observation_space", ".", "shape", "[", "0", "]", "\n", "nb_rew", "=", "1", "\n", "action_seqs", "=", "np", ".", "array", "(", "[", "]", ")", ".", "reshape", "(", "0", ",", "nb_act", ",", "nb_timesteps", ")", "\n", "observation_seqs", "=", "np", ".", "array", "(", "[", "]", ")", ".", "reshape", "(", "0", ",", "nb_obs", ",", "nb_timesteps", "+", "1", ")", "\n", "reward_seqs", "=", "np", ".", "array", "(", "[", "]", ")", ".", "reshape", "(", "0", ",", "nb_rew", ",", "nb_timesteps", "+", "1", ")", "\n", "\n", "# bootstrap phase", "\n", "# # # # # # # # # # #", "\n", "for", "ep", "in", "range", "(", "nb_bootstrap", ")", ":", "\n", "            ", "print", "(", "'Bootstrap episode #'", ",", "ep", "+", "1", ")", "\n", "# sample policy at random", "\n", "policy", "=", "np", ".", "random", ".", "random", "(", "nb_weights", ")", "*", "2", "-", "1", "\n", "\n", "# play policy and update knn", "\n", "obs", ",", "act", ",", "rew", "=", "play_policy", "(", "policy", ",", "nb_obs", ",", "nb_timesteps", ",", "nb_act", ",", "nb_rew", ",", "env", ",", "controller", ",", "\n", "representer", ",", "knn", ")", "\n", "\n", "# save", "\n", "action_seqs", "=", "np", ".", "concatenate", "(", "[", "action_seqs", ",", "act", "]", ",", "axis", "=", "0", ")", "\n", "observation_seqs", "=", "np", ".", "concatenate", "(", "[", "observation_seqs", ",", "obs", "]", ",", "axis", "=", "0", ")", "\n", "reward_seqs", "=", "np", ".", "concatenate", "(", "[", "reward_seqs", ",", "rew", "]", ",", "axis", "=", "0", ")", "\n", "train_perfs", ".", "append", "(", "np", ".", "nansum", "(", "rew", ")", ")", "\n", "\n", "# offline tests", "\n", "if", "ep", "in", "test_ind", ":", "\n", "                ", "offline_evaluations", "(", "offline_eval", "[", "1", "]", ",", "engineer_goal", ",", "knn", ",", "nb_rew", ",", "nb_timesteps", ",", "env", ",", "\n", "controller", ",", "eval_perfs", ")", "\n", "\n", "# exploration phase", "\n", "# # # # # # # # # # # #", "\n", "", "", "for", "ep", "in", "range", "(", "nb_bootstrap", ",", "nb_explorations", ")", ":", "\n", "            ", "print", "(", "'Random Goal episode #'", ",", "ep", "+", "1", ")", "\n", "\n", "# random goal strategy", "\n", "policy", "=", "random_goal", "(", "nb_rep", ",", "knn", ",", "goal_space", ",", "initial_space", ",", "noise", ",", "nb_weights", ")", "\n", "\n", "# play policy and update knn", "\n", "obs", ",", "act", ",", "rew", "=", "play_policy", "(", "policy", ",", "nb_obs", ",", "nb_timesteps", ",", "nb_act", ",", "nb_rew", ",", "env", ",", "controller", ",", "\n", "representer", ",", "knn", ")", "\n", "\n", "# save", "\n", "action_seqs", "=", "np", ".", "concatenate", "(", "[", "action_seqs", ",", "act", "]", ",", "axis", "=", "0", ")", "\n", "observation_seqs", "=", "np", ".", "concatenate", "(", "[", "observation_seqs", ",", "obs", "]", ",", "axis", "=", "0", ")", "\n", "reward_seqs", "=", "np", ".", "concatenate", "(", "[", "reward_seqs", ",", "rew", "]", ",", "axis", "=", "0", ")", "\n", "train_perfs", ".", "append", "(", "np", ".", "nansum", "(", "rew", ")", ")", "\n", "\n", "# offline tests", "\n", "if", "ep", "in", "test_ind", ":", "\n", "                ", "offline_evaluations", "(", "offline_eval", "[", "1", "]", ",", "engineer_goal", ",", "knn", ",", "nb_rew", ",", "nb_timesteps", ",", "env", ",", "controller", ",", "eval_perfs", ")", "\n", "\n", "# final evaluation phase", "\n", "# # # # # # # # # # # # # # #", "\n", "", "", "for", "ep", "in", "range", "(", "nb_tests", ")", ":", "\n", "            ", "print", "(", "'Test episode #'", ",", "ep", "+", "1", ")", "\n", "best_policy", "=", "offline_evaluations", "(", "1", ",", "engineer_goal", ",", "knn", ",", "nb_rew", ",", "nb_timesteps", ",", "env", ",", "controller", ",", "final_eval_perfs", ")", "\n", "\n", "\n", "", "print", "(", "'Final performance for the run: '", ",", "np", ".", "array", "(", "final_eval_perfs", ")", ".", "mean", "(", ")", ")", "\n", "\n", "# wrap up and save", "\n", "# # # # # # # # # # #", "\n", "gep_memory", "=", "dict", "(", ")", "\n", "gep_memory", "[", "'actions'", "]", "=", "action_seqs", ".", "swapaxes", "(", "1", ",", "2", ")", "\n", "gep_memory", "[", "'observations'", "]", "=", "observation_seqs", ".", "swapaxes", "(", "1", ",", "2", ")", "\n", "gep_memory", "[", "'rewards'", "]", "=", "reward_seqs", ".", "swapaxes", "(", "1", ",", "2", ")", "\n", "gep_memory", "[", "'best_policy'", "]", "=", "best_policy", "\n", "gep_memory", "[", "'train_perfs'", "]", "=", "np", ".", "array", "(", "train_perfs", ")", "\n", "gep_memory", "[", "'eval_perfs'", "]", "=", "np", ".", "array", "(", "eval_perfs", ")", "\n", "gep_memory", "[", "'final_eval_perfs'", "]", "=", "np", ".", "array", "(", "final_eval_perfs", ")", "\n", "gep_memory", "[", "'representations'", "]", "=", "knn", ".", "_X", "\n", "gep_memory", "[", "'policies'", "]", "=", "knn", ".", "_Y", "\n", "gep_memory", "[", "'metrics'", "]", "=", "compute_metrics", "(", "gep_memory", ")", "# compute metrics for buffer analysis", "\n", "\n", "with", "open", "(", "data_path", "+", "'save_gep.pk'", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "gep_memory", ",", "f", ")", "\n", "\n", "\n", "# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #", "\n", "# DDPG", "\n", "# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #", "\n", "\n", "", "", "if", "'PG'", "in", "study", ":", "\n", "\n", "\n", "\n", "# load ddpg config", "\n", "        ", "dict_args", "=", "ddpg_config", "(", "env_id", "=", "env_id", ",", "\n", "study", "=", "study", ",", "\n", "data_path", "=", "data_path", ",", "\n", "noise", "=", "noise_type", ",", "\n", "trial_id", "=", "trial_id", ",", "\n", "seed", "=", "int", "(", "np", ".", "random", ".", "random", "(", ")", "*", "1e6", ")", ",", "\n", "nb_epochs", "=", "1000", ",", "\n", "buffer_location", "=", "None", ",", "\n", "gep_memory", "=", "None", "\n", ")", "\n", "# provide GEP memory to DDPG to fill its replay buffer", "\n", "try", ":", "\n", "            ", "dict_args", "[", "'gep_memory'", "]", "=", "gep_memory", "\n", "", "except", ":", "\n", "            ", "pass", "\n", "\n", "", "run_ddpg", "(", "dict_args", ")", "\n", "\n", "", "return", "np", ".", "array", "(", "final_eval_perfs", ")", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.None.gep.play_policy": [[165, 196], ["numpy.zeros", "numpy.zeros", "numpy.zeros", "np.zeros.fill", "np.zeros.fill", "np.zeros.fill", "env.reset", "range", "representer.represent", "knn.update", "controller.step().reshape", "env.step", "numpy.copy", "controller.step"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.flowersteam_geppg.None.representers.CMCRepresenter.represent", "home.repos.pwc.inspect_result.flowersteam_geppg.common.mpi_running_mean_std.RunningMeanStd.update", "home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.__init__.VecEnv.step", "home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.__init__.VecEnv.step"], ["", "def", "play_policy", "(", "policy", ",", "nb_obs", ",", "nb_timesteps", ",", "nb_act", ",", "nb_rew", ",", "env", ",", "controller", ",", "representer", ",", "knn", ")", ":", "\n", "    ", "\"\"\"\n    Play a policy in the environment for a given number of timesteps, usin a NN controller.\n    Then represent the trajectory and update the inverse model.\n    \"\"\"", "\n", "obs", "=", "np", ".", "zeros", "(", "[", "1", ",", "nb_obs", ",", "nb_timesteps", "+", "1", "]", ")", "\n", "act", "=", "np", ".", "zeros", "(", "[", "1", ",", "nb_act", ",", "nb_timesteps", "]", ")", "\n", "rew", "=", "np", ".", "zeros", "(", "[", "1", ",", "nb_rew", ",", "nb_timesteps", "+", "1", "]", ")", "\n", "obs", ".", "fill", "(", "np", ".", "nan", ")", "\n", "act", ".", "fill", "(", "np", ".", "nan", ")", "\n", "rew", ".", "fill", "(", "np", ".", "nan", ")", "\n", "obs", "[", "0", ",", ":", ",", "0", "]", "=", "env", ".", "reset", "(", ")", "\n", "rew", "[", "0", ",", ":", ",", "0", "]", "=", "0", "\n", "done", "=", "False", "# termination signal", "\n", "for", "t", "in", "range", "(", "nb_timesteps", ")", ":", "\n", "        ", "if", "done", ":", "\n", "            ", "break", "\n", "", "act", "[", "0", ",", ":", ",", "t", "]", "=", "controller", ".", "step", "(", "policy", ",", "obs", "[", "0", ",", ":", ",", "t", "]", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "out", "=", "env", ".", "step", "(", "np", ".", "copy", "(", "act", "[", "0", ",", ":", ",", "t", "]", ")", ")", "\n", "# env.render()", "\n", "obs", "[", "0", ",", ":", ",", "t", "+", "1", "]", "=", "out", "[", "0", "]", "\n", "rew", "[", "0", ",", ":", ",", "t", "+", "1", "]", "=", "out", "[", "1", "]", "\n", "done", "=", "out", "[", "2", "]", "\n", "\n", "# convert the trajectory into a representation (=behavioral descriptor)", "\n", "", "rep", "=", "representer", ".", "represent", "(", "obs", ",", "act", ")", "\n", "\n", "# update inverse model", "\n", "knn", ".", "update", "(", "X", "=", "rep", ",", "Y", "=", "policy", ")", "\n", "\n", "return", "obs", ",", "act", ",", "rew", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.None.gep.offline_evaluations": [[197, 223], ["range", "eval_perfs.append", "knn.predict", "numpy.zeros", "np.zeros.fill", "env.reset", "range", "returns.append", "numpy.array().mean", "controller.step().reshape", "env.step", "out[].squeeze().astype", "numpy.nansum", "numpy.copy", "numpy.array", "controller.step", "out[].squeeze"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.None.inverse_models.KNNRegressor.predict", "home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.mean", "home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.__init__.VecEnv.step", "home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.__init__.VecEnv.step"], ["", "def", "offline_evaluations", "(", "nb_eps", ",", "engineer_goal", ",", "knn", ",", "nb_rew", ",", "nb_timesteps", ",", "env", ",", "controller", ",", "eval_perfs", ")", ":", "\n", "    ", "\"\"\"\n    Play the best policy found in memory to test it. Play it for nb_eps episodes and average the returns.\n    \"\"\"", "\n", "# use scaled engineer goal and find policy of nearest neighbor in representation space", "\n", "best_policy", "=", "knn", ".", "predict", "(", "engineer_goal", ")", "[", "0", ",", ":", "]", "\n", "\n", "returns", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "nb_eps", ")", ":", "\n", "        ", "rew", "=", "np", ".", "zeros", "(", "[", "nb_rew", ",", "nb_timesteps", "+", "1", "]", ")", "\n", "rew", ".", "fill", "(", "np", ".", "nan", ")", "\n", "obs", "=", "env", ".", "reset", "(", ")", "\n", "rew", "[", ":", ",", "0", "]", "=", "0", "\n", "done", "=", "False", "\n", "for", "t", "in", "range", "(", "nb_timesteps", ")", ":", "\n", "            ", "if", "done", ":", "\n", "                ", "break", "\n", "", "act", "=", "controller", ".", "step", "(", "best_policy", ",", "obs", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "out", "=", "env", ".", "step", "(", "np", ".", "copy", "(", "act", ")", ")", "\n", "obs", "=", "out", "[", "0", "]", ".", "squeeze", "(", ")", ".", "astype", "(", "np", ".", "float", ")", "\n", "rew", "[", ":", ",", "t", "+", "1", "]", "=", "out", "[", "1", "]", "\n", "done", "=", "out", "[", "2", "]", "\n", "", "returns", ".", "append", "(", "np", ".", "nansum", "(", "rew", ")", ")", "\n", "", "eval_perfs", ".", "append", "(", "np", ".", "array", "(", "returns", ")", ".", "mean", "(", ")", ")", "\n", "\n", "return", "best_policy", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.None.gep.random_goal": [[225, 242], ["numpy.copy", "gep_utils.scale_vec", "numpy.random.normal", "numpy.clip", "gep_utils.sample", "knn.predict"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.None.gep_utils.scale_vec", "home.repos.pwc.inspect_result.flowersteam_geppg.common.distributions.BernoulliPd.sample", "home.repos.pwc.inspect_result.flowersteam_geppg.None.inverse_models.KNNRegressor.predict"], ["", "def", "random_goal", "(", "nb_rep", ",", "knn", ",", "goal_space", ",", "initial_space", ",", "noise", ",", "nb_weights", ")", ":", "\n", "    ", "\"\"\"\n    Draw a goal, find policy associated to its nearest neighbor in the representation space, add noise to it.\n    \"\"\"", "\n", "# draw goal in goal space", "\n", "goal", "=", "np", ".", "copy", "(", "sample", "(", "goal_space", ")", ")", "\n", "# scale goal to [-1,1]^N", "\n", "goal", "=", "scale_vec", "(", "goal", ",", "initial_space", ")", "\n", "\n", "# find policy of nearest neighbor", "\n", "policy", "=", "knn", ".", "predict", "(", "goal", ")", "[", "0", "]", "\n", "\n", "# add exploration noise", "\n", "policy", "+=", "np", ".", "random", ".", "normal", "(", "0", ",", "noise", "*", "2", ",", "nb_weights", ")", "# noise is scaled by space measure", "\n", "policy_out", "=", "np", ".", "clip", "(", "policy", ",", "-", "1", ",", "1", ")", "\n", "\n", "return", "policy_out", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.None.configs.cheetah_config": [[9, 50], ["numpy.array", "controllers.NNController", "representers.CheetahRepresenter", "numpy.array", "numpy.array", "gep_utils.scale_vec", "inverse_models.KNNRegressor"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.None.gep_utils.scale_vec"], ["def", "cheetah_config", "(", ")", ":", "\n", "\n", "# run parameters", "\n", "    ", "nb_bootstrap", "=", "50", "\n", "nb_explorations", "=", "500", "\n", "nb_tests", "=", "100", "\n", "nb_timesteps", "=", "1000", "\n", "offline_eval", "=", "(", "1e6", ",", "10", ")", "# (x,y): y evaluation episodes every x (done offline)", "\n", "\n", "# controller parameters", "\n", "hidden_sizes", "=", "[", "]", "\n", "controller_tmp", "=", "0.15", "\n", "activation", "=", "'relu'", "\n", "subset_obs", "=", "[", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "11", ",", "12", ",", "13", ",", "14", ",", "15", ",", "16", "]", "\n", "norm_values", "=", "np", ".", "array", "(", "[", "[", "-", "0.18", ",", "0.064", ",", "0.14", ",", "0.17", ",", "0.079", ",", "-", "0.082", ",", "-", "0.08", ",", "-", "0.084", ",", "0.30", ",", "\n", "-", "0.011", ",", "0.0078", ",", "0.0065", ",", "-", "0.055", ",", "0.014", ",", "-", "0.011", ",", "0.073", ",", "0.054", "]", ",", "\n", "[", "0.073", ",", "0.25", ",", "0.22", ",", "0.22", ",", "0.25", ",", "0.35", ",", "0.27", ",", "0.25", ",", "0.64", ",", "0.38", ",", "\n", "1.1", ",", "2.1", ",", "2.9", ",", "3.5", ",", "3.9", ",", "3.5", ",", "3.4", "]", "]", ")", "# to zscore observations", "\n", "scale", "=", "None", "\n", "controller", "=", "NNController", "(", "hidden_sizes", ",", "controller_tmp", ",", "subset_obs", ",", "6", ",", "norm_values", ",", "scale", ",", "activation", ")", "\n", "nb_weights", "=", "controller", ".", "nb_weights", "\n", "\n", "# representer", "\n", "representer", "=", "CheetahRepresenter", "(", ")", "\n", "initial_space", "=", "representer", ".", "initial_space", "\n", "goal_space", "=", "np", ".", "array", "(", "[", "[", "2.", ",", "6.", "]", ",", "[", "-", "0.5", ",", "0.", "]", "]", ")", "# space in which goal are sampled", "\n", "engineer_goal", "=", "np", ".", "array", "(", "[", "6.", ",", "-", "0.2", "]", ")", "# engineer goal", "\n", "# scale engineer goal to [-1,1]^N", "\n", "from", "gep_utils", "import", "scale_vec", "\n", "engineer_goal", "=", "scale_vec", "(", "engineer_goal", ",", "initial_space", ")", "\n", "\n", "nb_rep", "=", "representer", ".", "dim", "\n", "\n", "# inverse model", "\n", "knn", "=", "KNNRegressor", "(", "n_neighbors", "=", "1", ")", "\n", "\n", "# exploration_noise", "\n", "noise", "=", "0.1", "\n", "\n", "return", "nb_bootstrap", ",", "nb_explorations", ",", "nb_tests", ",", "nb_timesteps", ",", "offline_eval", ",", "controller", ",", "representer", ",", "nb_rep", ",", "engineer_goal", ",", "goal_space", ",", "initial_space", ",", "knn", ",", "noise", ",", "nb_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.None.configs.cmc_config": [[51, 86], ["range", "numpy.array", "controllers.NNController", "representers.CMCRepresenter", "numpy.array", "gep_utils.scale_vec", "inverse_models.KNNRegressor"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.None.gep_utils.scale_vec"], ["", "def", "cmc_config", "(", ")", ":", "\n", "\n", "# run parameters", "\n", "    ", "nb_bootstrap", "=", "10", "\n", "nb_explorations", "=", "50", "\n", "nb_tests", "=", "100", "\n", "nb_timesteps", "=", "1000", "\n", "offline_eval", "=", "(", "1e6", ",", "10", ")", "# (x,y): y evaluation episodes every x (done offline)", "\n", "\n", "# controller parameters", "\n", "hidden_sizes", "=", "[", "]", "\n", "controller_tmp", "=", "1.", "\n", "activation", "=", "'relu'", "\n", "subset_obs", "=", "range", "(", "2", ")", "\n", "norm_values", "=", "None", "\n", "scale", "=", "np", ".", "array", "(", "[", "[", "-", "1.2", ",", "0.6", "]", ",", "[", "-", "0.07", ",", "0.07", "]", "]", ")", "\n", "controller", "=", "NNController", "(", "hidden_sizes", ",", "controller_tmp", ",", "subset_obs", ",", "1", ",", "norm_values", ",", "scale", ",", "activation", ")", "\n", "nb_weights", "=", "controller", ".", "nb_weights", "\n", "\n", "# representer", "\n", "representer", "=", "CMCRepresenter", "(", ")", "\n", "initial_space", "=", "representer", ".", "initial_space", "\n", "goal_space", "=", "representer", ".", "initial_space", "# space in which goal are sampled", "\n", "nb_rep", "=", "representer", ".", "dim", "\n", "engineer_goal", "=", "np", ".", "array", "(", "[", "0.5", ",", "1.5", ",", "5.", "]", ")", "# engineer goal", "\n", "# scale engineer goal to [-1,1]^N", "\n", "engineer_goal", "=", "scale_vec", "(", "engineer_goal", ",", "initial_space", ")", "\n", "# inverse model", "\n", "knn", "=", "KNNRegressor", "(", "n_neighbors", "=", "1", ")", "\n", "\n", "# exploration_noise", "\n", "noise", "=", "0.1", "\n", "\n", "return", "nb_bootstrap", ",", "nb_explorations", ",", "nb_tests", ",", "nb_timesteps", ",", "offline_eval", ",", "controller", ",", "representer", ",", "nb_rep", ",", "engineer_goal", ",", "goal_space", ",", "initial_space", ",", "knn", ",", "noise", ",", "nb_weights", "", "", ""]], "home.repos.pwc.inspect_result.flowersteam_geppg.None.controllers.NNController.__init__": [[6, 29], ["range", "len", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "hidden_sizes", ",", "controller_tmp", ",", "subset_obs", ",", "nb_act", ",", "norm_values", ",", "scale", ",", "activation", ")", ":", "\n", "\n", "        ", "self", ".", "_subset_obs", "=", "subset_obs", "\n", "self", ".", "_controller_tmp", "=", "controller_tmp", "\n", "self", ".", "_norm_values", "=", "norm_values", "\n", "self", ".", "_scale", "=", "scale", "# None or space from which observation should be scale to [-1,1]^N", "\n", "\n", "if", "self", ".", "_norm_values", "is", "not", "None", "and", "self", ".", "_subset_obs", "is", "not", "None", ":", "\n", "            ", "self", ".", "_norm_values", "=", "self", ".", "_norm_values", "[", ":", ",", "self", ".", "_subset_obs", "]", "\n", "\n", "", "if", "scale", "is", "not", "None", ":", "\n", "            ", "self", ".", "_min", "=", "self", ".", "_scale", "[", ":", ",", "0", "]", "\n", "self", ".", "_range", "=", "self", ".", "_scale", "[", ":", ",", "1", "]", "-", "self", ".", "_min", "\n", "\n", "", "self", ".", "_layer_sizes", "=", "[", "len", "(", "self", ".", "_subset_obs", ")", "]", "+", "hidden_sizes", "+", "[", "nb_act", "]", "\n", "# compute number of parameters", "\n", "self", ".", "_nb_weights", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "_layer_sizes", ")", "-", "1", ")", ":", "\n", "            ", "self", ".", "_nb_weights", "+=", "self", ".", "_layer_sizes", "[", "i", "]", "*", "self", ".", "_layer_sizes", "[", "i", "+", "1", "]", "\n", "\n", "", "self", ".", "_activation_function", "=", "activation", "\n", "self", ".", "_dtype", "=", "torch", ".", "FloatTensor", "# run on CPU", "\n", "self", ".", "_weights", "=", "None", "# weights of the NN", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.None.controllers.NNController.step": [[30, 79], ["numpy.copy().squeeze", "numpy.copy().squeeze", "range", "torch.from_numpy().type", "torch.from_numpy().type.mm", "range", "numpy.tanh.numpy", "numpy.tanh", "y[].astype", "numpy.clip", "numpy.arange", "controllers.NNController._weights.append", "numpy.tanh.mm", "numpy.longfloat", "numpy.array", "numpy.copy", "numpy.copy", "len", "torch.from_numpy().type", "torch.from_numpy", "len", "numpy.tanh.clamp", "obs.astype", "numpy.ones", "numpy.copy().squeeze.reshape", "numpy.tanh", "torch.from_numpy", "policy_in[].reshape", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append"], ["", "def", "step", "(", "self", ",", "policy", ",", "obs", ")", ":", "\n", "\n", "        ", "obs_in", "=", "np", ".", "copy", "(", "obs", ".", "astype", "(", "np", ".", "float", ")", ")", ".", "squeeze", "(", ")", "\n", "policy_in", "=", "np", ".", "copy", "(", "policy", ")", ".", "squeeze", "(", ")", "\n", "\n", "# format weights", "\n", "self", ".", "_weights", "=", "[", "]", "\n", "index", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "_layer_sizes", ")", "-", "1", ")", ":", "\n", "            ", "ind_weights", "=", "np", ".", "arange", "(", "index", ",", "index", "+", "self", ".", "_layer_sizes", "[", "i", "]", "*", "self", ".", "_layer_sizes", "[", "i", "+", "1", "]", ")", "\n", "index", "=", "index", "+", "(", "self", ".", "_layer_sizes", "[", "i", "]", ")", "*", "self", ".", "_layer_sizes", "[", "i", "+", "1", "]", "\n", "self", ".", "_weights", ".", "append", "(", "torch", ".", "from_numpy", "(", "\n", "policy_in", "[", "ind_weights", "]", ".", "reshape", "(", "[", "self", ".", "_layer_sizes", "[", "i", "]", ",", "self", ".", "_layer_sizes", "[", "i", "+", "1", "]", "]", ")", ")", ".", "type", "(", "self", ".", "_dtype", ")", ")", "\n", "\n", "# take only a subset of observation as input to the NN", "\n", "", "if", "self", ".", "_subset_obs", "is", "not", "None", ":", "\n", "            ", "obs_in", "=", "obs_in", "[", "self", ".", "_subset_obs", "]", "\n", "\n", "# normalize observations (zscore)", "\n", "", "if", "self", ".", "_norm_values", "is", "not", "None", ":", "\n", "            ", "obs_in", "=", "(", "obs_in", "-", "self", ".", "_norm_values", "[", "0", ",", ":", "]", ")", "/", "self", ".", "_norm_values", "[", "1", ",", ":", "]", "\n", "# or scale values to [-1,1]^N if scale is not None", "\n", "", "elif", "self", ".", "_scale", "is", "not", "None", ":", "\n", "            ", "obs_in", "=", "(", "(", "obs_in", "-", "self", ".", "_min", ")", "*", "2", "*", "np", ".", "ones", "(", "[", "2", "]", ")", "/", "self", ".", "_range", ")", "-", "np", ".", "ones", "(", "[", "2", "]", ")", "\n", "\n", "\n", "", "x", "=", "torch", ".", "from_numpy", "(", "obs_in", ".", "reshape", "(", "1", ",", "-", "1", ")", ")", ".", "type", "(", "self", ".", "_dtype", ")", "\n", "\n", "y", "=", "x", ".", "mm", "(", "self", ".", "_weights", "[", "0", "]", ")", "\n", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "_layer_sizes", ")", "-", "2", ")", ":", "\n", "            ", "if", "self", ".", "_activation_function", "==", "'relu'", ":", "\n", "                ", "y", "=", "y", ".", "clamp", "(", "min", "=", "0", ")", "\n", "", "elif", "self", ".", "_activation_function", "==", "'tanh'", ":", "\n", "                ", "y", "=", "np", ".", "tanh", "(", "y", ")", "\n", "", "elif", "self", ".", "_activation_function", "==", "'leakyrelu'", ":", "\n", "                ", "y", "[", "y", "<", "0", "]", "=", "0.01", "*", "y", "[", "y", "<", "0", "]", "\n", "", "y", "=", "y", ".", "mm", "(", "self", ".", "_weights", "[", "i", "+", "1", "]", ")", "\n", "", "y", "=", "y", ".", "numpy", "(", ")", "\n", "y", "=", "np", ".", "tanh", "(", "np", ".", "longfloat", "(", "self", ".", "_controller_tmp", "*", "y", ")", ")", "\n", "\n", "self", ".", "_action", "=", "y", "[", "0", ",", ":", "]", ".", "astype", "(", "np", ".", "float64", ")", "\n", "if", "self", ".", "_action", ".", "size", "==", "1", ":", "\n", "            ", "self", ".", "_action", "=", "np", ".", "array", "(", "[", "self", ".", "_action", "]", ")", "\n", "\n", "", "self", ".", "_action", "=", "np", ".", "clip", "(", "self", ".", "_action", ",", "-", "1", ",", "1", ")", "# just in case..", "\n", "\n", "return", "self", ".", "_action", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.None.controllers.NNController.nb_weights": [[83, 86], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "nb_weights", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_nb_weights", "", "", "", ""]], "home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.OutputFormat.writekvs": [[21, 26], ["None"], "methods", ["None"], ["    ", "def", "writekvs", "(", "self", ",", "kvs", ")", ":", "\n", "        ", "\"\"\"\n        Write key-value pairs\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.OutputFormat.writeseq": [[27, 32], ["None"], "methods", ["None"], ["", "def", "writeseq", "(", "self", ",", "args", ")", ":", "\n", "        ", "\"\"\"\n        Write a sequence of other data (e.g. a logging message)\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.OutputFormat.close": [[33, 35], ["None"], "methods", ["None"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.HumanOutputFormat.__init__": [[38, 40], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "file", ")", ":", "\n", "        ", "self", ".", "file", "=", "file", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.HumanOutputFormat.writekvs": [[41, 70], ["sorted", "max", "max", "sorted", "lines.append", "logger.HumanOutputFormat.file.write", "logger.HumanOutputFormat.file.flush", "kvs.items", "isinstance", "logger.HumanOutputFormat._truncate", "map", "map", "key2str.items", "lines.append", "str", "key2str.keys", "key2str.values", "logger.HumanOutputFormat._truncate", "len", "len"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.max", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.max", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.HumanOutputFormat._truncate", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.HumanOutputFormat._truncate"], ["", "def", "writekvs", "(", "self", ",", "kvs", ")", ":", "\n", "# Create strings for printing", "\n", "        ", "key2str", "=", "{", "}", "\n", "for", "(", "key", ",", "val", ")", "in", "sorted", "(", "kvs", ".", "items", "(", ")", ")", ":", "\n", "            ", "if", "isinstance", "(", "val", ",", "float", ")", ":", "\n", "                ", "valstr", "=", "'%-8.3g'", "%", "(", "val", ",", ")", "\n", "", "else", ":", "\n", "                ", "valstr", "=", "str", "(", "val", ")", "\n", "", "key2str", "[", "self", ".", "_truncate", "(", "key", ")", "]", "=", "self", ".", "_truncate", "(", "valstr", ")", "\n", "\n", "# Find max widths", "\n", "", "keywidth", "=", "max", "(", "map", "(", "len", ",", "key2str", ".", "keys", "(", ")", ")", ")", "\n", "valwidth", "=", "max", "(", "map", "(", "len", ",", "key2str", ".", "values", "(", ")", ")", ")", "\n", "\n", "# Write out the data", "\n", "dashes", "=", "'-'", "*", "(", "keywidth", "+", "valwidth", "+", "7", ")", "\n", "lines", "=", "[", "dashes", "]", "\n", "for", "(", "key", ",", "val", ")", "in", "sorted", "(", "key2str", ".", "items", "(", ")", ")", ":", "\n", "            ", "lines", ".", "append", "(", "'| %s%s | %s%s |'", "%", "(", "\n", "key", ",", "\n", "' '", "*", "(", "keywidth", "-", "len", "(", "key", ")", ")", ",", "\n", "val", ",", "\n", "' '", "*", "(", "valwidth", "-", "len", "(", "val", ")", ")", ",", "\n", ")", ")", "\n", "", "lines", ".", "append", "(", "dashes", ")", "\n", "self", ".", "file", ".", "write", "(", "'\\n'", ".", "join", "(", "lines", ")", "+", "'\\n'", ")", "\n", "\n", "# Flush the output to the file", "\n", "self", ".", "file", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.HumanOutputFormat._truncate": [[71, 73], ["len"], "methods", ["None"], ["", "def", "_truncate", "(", "self", ",", "s", ")", ":", "\n", "        ", "return", "s", "[", ":", "20", "]", "+", "'...'", "if", "len", "(", "s", ")", ">", "23", "else", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.HumanOutputFormat.writeseq": [[74, 79], ["logger.HumanOutputFormat.file.write", "logger.HumanOutputFormat.file.flush", "logger.HumanOutputFormat.file.write", "str"], "methods", ["None"], ["", "def", "writeseq", "(", "self", ",", "args", ")", ":", "\n", "        ", "for", "arg", "in", "args", ":", "\n", "            ", "self", ".", "file", ".", "write", "(", "str", "(", "arg", ")", ")", "\n", "", "self", ".", "file", ".", "write", "(", "'\\n'", ")", "\n", "self", ".", "file", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.JSONOutputFormat.__init__": [[81, 83], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "file", ")", ":", "\n", "        ", "self", ".", "file", "=", "file", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.JSONOutputFormat.writekvs": [[84, 91], ["sorted", "logger.JSONOutputFormat.file.write", "logger.JSONOutputFormat.file.flush", "kvs.items", "hasattr", "v.tolist.tolist.tolist", "json.dumps"], "methods", ["None"], ["", "def", "writekvs", "(", "self", ",", "kvs", ")", ":", "\n", "        ", "for", "k", ",", "v", "in", "sorted", "(", "kvs", ".", "items", "(", ")", ")", ":", "\n", "            ", "if", "hasattr", "(", "v", ",", "'dtype'", ")", ":", "\n", "                ", "v", "=", "v", ".", "tolist", "(", ")", "\n", "kvs", "[", "k", "]", "=", "v", "#[0] #float(v[0])", "\n", "", "", "self", ".", "file", ".", "write", "(", "json", ".", "dumps", "(", "kvs", ")", "+", "'\\n'", ")", "\n", "self", ".", "file", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.TensorBoardOutputFormat.__init__": [[96, 110], ["os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "os.join", "os.join", "pywrap_tensorflow.EventsWriter", "os.abspath", "os.abspath", "compat.as_bytes"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "dir", ",", "exist_ok", "=", "True", ")", "\n", "self", ".", "dir", "=", "dir", "\n", "self", ".", "step", "=", "1", "\n", "prefix", "=", "'events'", "\n", "path", "=", "osp", ".", "join", "(", "osp", ".", "abspath", "(", "dir", ")", ",", "prefix", ")", "\n", "import", "tensorflow", "as", "tf", "\n", "from", "tensorflow", ".", "python", "import", "pywrap_tensorflow", "\n", "from", "tensorflow", ".", "core", ".", "util", "import", "event_pb2", "\n", "from", "tensorflow", ".", "python", ".", "util", "import", "compat", "\n", "self", ".", "tf", "=", "tf", "\n", "self", ".", "event_pb2", "=", "event_pb2", "\n", "self", ".", "pywrap_tensorflow", "=", "pywrap_tensorflow", "\n", "self", ".", "writer", "=", "pywrap_tensorflow", ".", "EventsWriter", "(", "compat", ".", "as_bytes", "(", "path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.TensorBoardOutputFormat.writekvs": [[111, 121], ["logger.TensorBoardOutputFormat.tf.Summary", "logger.TensorBoardOutputFormat.event_pb2.Event", "logger.TensorBoardOutputFormat.writer.WriteEvent", "logger.TensorBoardOutputFormat.writer.Flush", "logger.TensorBoardOutputFormat.tf.Summary.Value", "float", "time.time", "logger.TensorBoardOutputFormat.writekvs.summary_val"], "methods", ["None"], ["", "def", "writekvs", "(", "self", ",", "kvs", ")", ":", "\n", "        ", "def", "summary_val", "(", "k", ",", "v", ")", ":", "\n", "            ", "kwargs", "=", "{", "'tag'", ":", "k", ",", "'simple_value'", ":", "float", "(", "v", ")", "}", "\n", "return", "self", ".", "tf", ".", "Summary", ".", "Value", "(", "**", "kwargs", ")", "\n", "", "summary", "=", "self", ".", "tf", ".", "Summary", "(", "value", "=", "[", "summary_val", "(", "k", ",", "v", ")", "for", "k", ",", "v", "in", "kvs", ".", "items", "(", ")", "]", ")", "\n", "event", "=", "self", ".", "event_pb2", ".", "Event", "(", "wall_time", "=", "time", ".", "time", "(", ")", ",", "summary", "=", "summary", ")", "\n", "event", ".", "step", "=", "self", ".", "step", "# is there any reason why you'd want to specify the step?", "\n", "self", ".", "writer", ".", "WriteEvent", "(", "event", ")", "\n", "self", ".", "writer", ".", "Flush", "(", ")", "\n", "self", ".", "step", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.TensorBoardOutputFormat.close": [[122, 126], ["logger.TensorBoardOutputFormat.writer.Close"], "methods", ["None"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "writer", ":", "\n", "            ", "self", ".", "writer", ".", "Close", "(", ")", "\n", "self", ".", "writer", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.Logger.__init__": [[222, 227], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "dir", ",", "output_formats", ")", ":", "\n", "        ", "self", ".", "name2val", "=", "{", "}", "# values this iteration", "\n", "self", ".", "level", "=", "INFO", "\n", "self", ".", "dir", "=", "dir", "\n", "self", ".", "output_formats", "=", "output_formats", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.Logger.logkv": [[230, 232], ["None"], "methods", ["None"], ["", "def", "logkv", "(", "self", ",", "key", ",", "val", ")", ":", "\n", "        ", "self", ".", "name2val", "[", "key", "]", "=", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.Logger.dumpkvs": [[233, 238], ["logger.Logger.name2val.clear", "fmt.writekvs"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.TensorBoardOutputFormat.writekvs"], ["", "def", "dumpkvs", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "level", "==", "DISABLED", ":", "return", "\n", "for", "fmt", "in", "self", ".", "output_formats", ":", "\n", "            ", "fmt", ".", "writekvs", "(", "self", ".", "name2val", ")", "\n", "", "self", ".", "name2val", ".", "clear", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.Logger.log": [[239, 242], ["logger.Logger._do_log"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.Logger._do_log"], ["", "def", "log", "(", "self", ",", "*", "args", ",", "level", "=", "INFO", ")", ":", "\n", "        ", "if", "self", ".", "level", "<=", "level", ":", "\n", "            ", "self", ".", "_do_log", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.Logger.set_level": [[245, 247], ["None"], "methods", ["None"], ["", "", "def", "set_level", "(", "self", ",", "level", ")", ":", "\n", "        ", "self", ".", "level", "=", "level", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.Logger.get_dir": [[248, 250], ["None"], "methods", ["None"], ["", "def", "get_dir", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "dir", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.Logger.close": [[251, 254], ["fmt.close"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.__init__.VecEnv.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "for", "fmt", "in", "self", ".", "output_formats", ":", "\n", "            ", "fmt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.Logger._do_log": [[257, 260], ["fmt.writeseq"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.HumanOutputFormat.writeseq"], ["", "", "def", "_do_log", "(", "self", ",", "args", ")", ":", "\n", "        ", "for", "fmt", "in", "self", ".", "output_formats", ":", "\n", "            ", "fmt", ".", "writeseq", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.make_output_format": [[128, 142], ["os.makedirs", "os.makedirs", "logger.HumanOutputFormat", "open", "logger.HumanOutputFormat", "os.join", "open", "logger.JSONOutputFormat", "os.join", "logger.TensorBoardOutputFormat", "ValueError", "os.join"], "function", ["None"], ["", "", "", "def", "make_output_format", "(", "format", ",", "ev_dir", ")", ":", "\n", "    ", "os", ".", "makedirs", "(", "ev_dir", ",", "exist_ok", "=", "True", ")", "\n", "if", "format", "==", "'stdout'", ":", "\n", "        ", "return", "HumanOutputFormat", "(", "sys", ".", "stdout", ")", "\n", "", "elif", "format", "==", "'log'", ":", "\n", "        ", "log_file", "=", "open", "(", "osp", ".", "join", "(", "ev_dir", ",", "'log.txt'", ")", ",", "'wt'", ")", "\n", "return", "HumanOutputFormat", "(", "log_file", ")", "\n", "", "elif", "format", "==", "'json'", ":", "\n", "        ", "json_file", "=", "open", "(", "osp", ".", "join", "(", "ev_dir", ",", "'progress.json'", ")", ",", "'wt'", ")", "\n", "return", "JSONOutputFormat", "(", "json_file", ")", "\n", "", "elif", "format", "==", "'tensorboard'", ":", "\n", "        ", "return", "TensorBoardOutputFormat", "(", "osp", ".", "join", "(", "ev_dir", ",", "'tb'", ")", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Unknown format specified: %s'", "%", "(", "format", ",", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.logkv": [[147, 153], ["Logger.CURRENT.logkv"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.logkv"], ["", "", "def", "logkv", "(", "key", ",", "val", ")", ":", "\n", "    ", "\"\"\"\n    Log a value of some diagnostic\n    Call this once for each diagnostic quantity, each iteration\n    \"\"\"", "\n", "Logger", ".", "CURRENT", ".", "logkv", "(", "key", ",", "val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.logkvs": [[154, 160], ["d.items", "logger.logkv"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.logkv"], ["", "def", "logkvs", "(", "d", ")", ":", "\n", "    ", "\"\"\"\n    Log a dictionary of key-value pairs\n    \"\"\"", "\n", "for", "(", "k", ",", "v", ")", "in", "d", ".", "items", "(", ")", ":", "\n", "        ", "logkv", "(", "k", ",", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.dumpkvs": [[161, 169], ["Logger.CURRENT.dumpkvs"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.dumpkvs"], ["", "", "def", "dumpkvs", "(", ")", ":", "\n", "    ", "\"\"\"\n    Write all of the diagnostics from the current iteration\n\n    level: int. (see logger.py docs) If the global logger level is higher than\n                the level argument here, don't print to stdout.\n    \"\"\"", "\n", "Logger", ".", "CURRENT", ".", "dumpkvs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.getkvs": [[170, 172], ["None"], "function", ["None"], ["", "def", "getkvs", "(", ")", ":", "\n", "    ", "return", "Logger", ".", "CURRENT", ".", "name2val", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.log": [[174, 179], ["Logger.CURRENT.log"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.log"], ["", "def", "log", "(", "*", "args", ",", "level", "=", "INFO", ")", ":", "\n", "    ", "\"\"\"\n    Write the sequence of args, with no separators, to the console and output files (if you've configured an output file).\n    \"\"\"", "\n", "Logger", ".", "CURRENT", ".", "log", "(", "*", "args", ",", "level", "=", "level", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.debug": [[181, 183], ["logger.log"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.log"], ["", "def", "debug", "(", "*", "args", ")", ":", "\n", "    ", "log", "(", "*", "args", ",", "level", "=", "DEBUG", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.info": [[185, 187], ["logger.log"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.log"], ["", "def", "info", "(", "*", "args", ")", ":", "\n", "    ", "log", "(", "*", "args", ",", "level", "=", "INFO", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.warn": [[189, 191], ["logger.log"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.log"], ["", "def", "warn", "(", "*", "args", ")", ":", "\n", "    ", "log", "(", "*", "args", ",", "level", "=", "WARN", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.error": [[193, 195], ["logger.log"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.log"], ["", "def", "error", "(", "*", "args", ")", ":", "\n", "    ", "log", "(", "*", "args", ",", "level", "=", "ERROR", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.set_level": [[197, 202], ["Logger.CURRENT.set_level"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.set_level"], ["", "def", "set_level", "(", "level", ")", ":", "\n", "    ", "\"\"\"\n    Set logging threshold on current logger.\n    \"\"\"", "\n", "Logger", ".", "CURRENT", ".", "set_level", "(", "level", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.get_dir": [[203, 209], ["Logger.CURRENT.get_dir"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.get_dir"], ["", "def", "get_dir", "(", ")", ":", "\n", "    ", "\"\"\"\n    Get directory that log files are being written to.\n    will be None if there is no output directory (i.e., if you didn't call start)\n    \"\"\"", "\n", "return", "Logger", ".", "CURRENT", ".", "get_dir", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.configure": [[263, 277], ["logger.Logger", "logger.log", "os.getenv", "os.getenv", "os.join", "logger.make_output_format", "tempfile.gettempdir", "datetime.datetime.now().strftime", "datetime.datetime.now"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.log", "home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.make_output_format"], ["def", "configure", "(", "dir", "=", "None", ",", "format_strs", "=", "None", ")", ":", "\n", "    ", "assert", "Logger", ".", "CURRENT", "is", "Logger", ".", "DEFAULT", ",", "\"Only call logger.configure() when it's in the default state. Try calling logger.reset() first.\"", "\n", "prevlogger", "=", "Logger", ".", "CURRENT", "\n", "if", "dir", "is", "None", ":", "\n", "        ", "dir", "=", "os", ".", "getenv", "(", "'OPENAI_LOGDIR'", ")", "\n", "", "if", "dir", "is", "None", ":", "\n", "        ", "dir", "=", "osp", ".", "join", "(", "tempfile", ".", "gettempdir", "(", ")", ",", "\n", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"openai-%Y-%m-%d-%H-%M-%S-%f\"", ")", ")", "\n", "", "if", "format_strs", "is", "None", ":", "\n", "        ", "format_strs", "=", "LOG_OUTPUT_FORMATS", "\n", "", "output_formats", "=", "[", "make_output_format", "(", "f", ",", "dir", ")", "for", "f", "in", "format_strs", "]", "\n", "Logger", ".", "CURRENT", "=", "Logger", "(", "dir", "=", "dir", ",", "output_formats", "=", "output_formats", ")", "\n", "log", "(", "'Logging to %s'", "%", "dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.reset": [[284, 287], ["logger.log"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.log"], ["", "def", "reset", "(", ")", ":", "\n", "    ", "Logger", ".", "CURRENT", "=", "Logger", ".", "DEFAULT", "\n", "log", "(", "'Reset logger'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger._demo": [[290, 312], ["logger.info", "logger.debug", "logger.set_level", "logger.debug", "os.path.exists", "os.path.exists", "logger.logkv", "logger.dumpkvs", "logger.logkv", "logger.dumpkvs", "shutil.rmtree", "session", "logger.logkv", "logger.logkv", "logger.dumpkvs", "logger.logkv", "logger.logkv", "logger.dumpkvs", "logger.info"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.info", "home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.debug", "home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.set_level", "home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.debug", "home.repos.pwc.inspect_result.flowersteam_geppg.common.azure_utils.Container.exists", "home.repos.pwc.inspect_result.flowersteam_geppg.common.azure_utils.Container.exists", "home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.logkv", "home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.dumpkvs", "home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.logkv", "home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.dumpkvs", "home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.logkv", "home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.logkv", "home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.dumpkvs", "home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.logkv", "home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.logkv", "home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.dumpkvs", "home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.info"], ["", "def", "_demo", "(", ")", ":", "\n", "    ", "info", "(", "\"hi\"", ")", "\n", "debug", "(", "\"shouldn't appear\"", ")", "\n", "set_level", "(", "DEBUG", ")", "\n", "debug", "(", "\"should appear\"", ")", "\n", "dir", "=", "\"/tmp/testlogging\"", "\n", "if", "os", ".", "path", ".", "exists", "(", "dir", ")", ":", "\n", "        ", "shutil", ".", "rmtree", "(", "dir", ")", "\n", "", "with", "session", "(", "dir", "=", "dir", ")", ":", "\n", "        ", "logkv", "(", "\"a\"", ",", "3", ")", "\n", "logkv", "(", "\"b\"", ",", "2.5", ")", "\n", "dumpkvs", "(", ")", "\n", "logkv", "(", "\"b\"", ",", "-", "2.5", ")", "\n", "logkv", "(", "\"a\"", ",", "5.5", ")", "\n", "dumpkvs", "(", ")", "\n", "info", "(", "\"^^^ should see a = 5.5\"", ")", "\n", "\n", "", "logkv", "(", "\"b\"", ",", "-", "2.5", ")", "\n", "dumpkvs", "(", ")", "\n", "\n", "logkv", "(", "\"a\"", ",", "\"longasslongasslongasslongasslongasslongassvalue\"", ")", "\n", "dumpkvs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.noise.AdaptiveParamNoiseSpec.__init__": [[5, 11], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "initial_stddev", "=", "0.1", ",", "desired_action_stddev", "=", "0.1", ",", "adoption_coefficient", "=", "1.01", ")", ":", "\n", "        ", "self", ".", "initial_stddev", "=", "initial_stddev", "\n", "self", ".", "desired_action_stddev", "=", "desired_action_stddev", "\n", "self", ".", "adoption_coefficient", "=", "adoption_coefficient", "\n", "\n", "self", ".", "current_stddev", "=", "initial_stddev", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.noise.AdaptiveParamNoiseSpec.adapt": [[12, 19], ["None"], "methods", ["None"], ["", "def", "adapt", "(", "self", ",", "distance", ")", ":", "\n", "        ", "if", "distance", ">", "self", ".", "desired_action_stddev", ":", "\n", "# Decrease stddev.", "\n", "            ", "self", ".", "current_stddev", "/=", "self", ".", "adoption_coefficient", "\n", "", "else", ":", "\n", "# Increase stddev.", "\n", "            ", "self", ".", "current_stddev", "*=", "self", ".", "adoption_coefficient", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.noise.AdaptiveParamNoiseSpec.get_stats": [[20, 25], ["None"], "methods", ["None"], ["", "", "def", "get_stats", "(", "self", ")", ":", "\n", "        ", "stats", "=", "{", "\n", "'param_noise_stddev'", ":", "self", ".", "current_stddev", ",", "\n", "}", "\n", "return", "stats", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.noise.AdaptiveParamNoiseSpec.__repr__": [[26, 29], ["fmt.format"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "fmt", "=", "'AdaptiveParamNoiseSpec(initial_stddev={}, desired_action_stddev={}, adoption_coefficient={})'", "\n", "return", "fmt", ".", "format", "(", "self", ".", "initial_stddev", ",", "self", ".", "desired_action_stddev", ",", "self", ".", "adoption_coefficient", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.noise.ActionNoise.reset": [[32, 34], ["None"], "methods", ["None"], ["    ", "def", "reset", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.noise.NoNoise.__init__": [[36, 38], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "mu", ",", "sigma", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.noise.NoNoise.__call__": [[39, 41], ["None"], "methods", ["None"], ["", "def", "__call__", "(", "self", ")", ":", "\n", "        ", "return", "0.", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.noise.NoNoise.__repr__": [[42, 44], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'NoNoise'", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.noise.NormalActionNoise.__init__": [[46, 49], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "mu", ",", "sigma", ")", ":", "\n", "        ", "self", ".", "mu", "=", "mu", "\n", "self", ".", "sigma", "=", "sigma", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.noise.NormalActionNoise.__call__": [[50, 52], ["numpy.random.normal"], "methods", ["None"], ["", "def", "__call__", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "random", ".", "normal", "(", "self", ".", "mu", ",", "self", ".", "sigma", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.noise.NormalActionNoise.__repr__": [[53, 55], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'NormalActionNoise(mu={}, sigma={})'", ".", "format", "(", "self", ".", "mu", ",", "self", ".", "sigma", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.noise.OrnsteinUhlenbeckActionNoise.__init__": [[59, 66], ["noise.OrnsteinUhlenbeckActionNoise.reset"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.__init__.VecEnv.reset"], ["    ", "def", "__init__", "(", "self", ",", "mu", ",", "sigma", ",", "theta", "=", ".15", ",", "dt", "=", "1e-2", ",", "x0", "=", "None", ")", ":", "\n", "        ", "self", ".", "theta", "=", "theta", "\n", "self", ".", "mu", "=", "mu", "\n", "self", ".", "sigma", "=", "sigma", "\n", "self", ".", "dt", "=", "dt", "\n", "self", ".", "x0", "=", "x0", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.noise.OrnsteinUhlenbeckActionNoise.__call__": [[67, 71], ["numpy.random.normal", "numpy.sqrt"], "methods", ["None"], ["", "def", "__call__", "(", "self", ")", ":", "\n", "        ", "x", "=", "self", ".", "x_prev", "+", "self", ".", "theta", "*", "(", "self", ".", "mu", "-", "self", ".", "x_prev", ")", "*", "self", ".", "dt", "+", "self", ".", "sigma", "*", "np", ".", "sqrt", "(", "self", ".", "dt", ")", "*", "np", ".", "random", ".", "normal", "(", "size", "=", "self", ".", "mu", ".", "shape", ")", "\n", "self", ".", "x_prev", "=", "x", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.noise.OrnsteinUhlenbeckActionNoise.reset": [[72, 74], ["numpy.zeros_like"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "x_prev", "=", "self", ".", "x0", "if", "self", ".", "x0", "is", "not", "None", "else", "np", ".", "zeros_like", "(", "self", ".", "mu", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.noise.OrnsteinUhlenbeckActionNoise.__repr__": [[75, 77], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'OrnsteinUhlenbeckActionNoise(mu={}, sigma={})'", ".", "format", "(", "self", ".", "mu", ",", "self", ".", "sigma", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.noise.DecreasingOrnsteinUhlenbeckActionNoise.__init__": [[80, 88], ["noise.DecreasingOrnsteinUhlenbeckActionNoise.reset"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.__init__.VecEnv.reset"], ["    ", "def", "__init__", "(", "self", ",", "mu", ",", "sigma", ",", "decreasing_rate", ",", "theta", "=", ".15", ",", "dt", "=", "1e-2", ",", "x0", "=", "None", ")", ":", "\n", "        ", "self", ".", "theta", "=", "theta", "\n", "self", ".", "mu", "=", "mu", "\n", "self", ".", "sigma", "=", "sigma", "\n", "self", ".", "dt", "=", "dt", "\n", "self", ".", "x0", "=", "x0", "\n", "self", ".", "reset", "(", ")", "\n", "self", ".", "decreasing_rate", "=", "decreasing_rate", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.noise.DecreasingOrnsteinUhlenbeckActionNoise.__call__": [[89, 93], ["numpy.random.normal", "numpy.sqrt"], "methods", ["None"], ["", "def", "__call__", "(", "self", ")", ":", "\n", "        ", "x", "=", "self", ".", "x_prev", "+", "self", ".", "theta", "*", "(", "self", ".", "mu", "-", "self", ".", "x_prev", ")", "*", "self", ".", "dt", "+", "self", ".", "sigma", "*", "np", ".", "sqrt", "(", "self", ".", "dt", ")", "*", "np", ".", "random", ".", "normal", "(", "size", "=", "self", ".", "mu", ".", "shape", ")", "\n", "self", ".", "x_prev", "=", "x", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.noise.DecreasingOrnsteinUhlenbeckActionNoise.adapt": [[94, 98], ["any"], "methods", ["None"], ["", "def", "adapt", "(", "self", ")", ":", "\n", "        ", "self", ".", "sigma", "-=", "self", ".", "decreasing_rate", "\n", "if", "any", "(", "self", ".", "sigma", "<", "0", ")", ":", "\n", "            ", "self", ".", "sigma", "*=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.noise.DecreasingOrnsteinUhlenbeckActionNoise.reset": [[99, 101], ["numpy.zeros_like"], "methods", ["None"], ["", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "x_prev", "=", "self", ".", "x0", "if", "self", ".", "x0", "is", "not", "None", "else", "np", ".", "zeros_like", "(", "self", ".", "mu", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.noise.DecreasingOrnsteinUhlenbeckActionNoise.__repr__": [[102, 104], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'DecreasingOrnsteinUhlenbeckActionNoise(mu={}, sigma={}, rate{})'", ".", "format", "(", "self", ".", "mu", ",", "self", ".", "sigma", ",", "self", ".", "decreasing_rate", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.models.Model.__init__": [[6, 8], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "name", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.models.Model.vars": [[9, 12], ["tensorflow.get_collection", "tensorflow.get_collection"], "methods", ["None"], ["", "@", "property", "\n", "def", "vars", "(", "self", ")", ":", "\n", "        ", "return", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "GLOBAL_VARIABLES", ",", "scope", "=", "self", ".", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.models.Model.trainable_vars": [[13, 16], ["tensorflow.get_collection", "tensorflow.get_collection"], "methods", ["None"], ["", "@", "property", "\n", "def", "trainable_vars", "(", "self", ")", ":", "\n", "        ", "return", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "TRAINABLE_VARIABLES", ",", "scope", "=", "self", ".", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.models.Model.perturbable_vars": [[17, 20], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "perturbable_vars", "(", "self", ")", ":", "\n", "        ", "return", "[", "var", "for", "var", "in", "self", ".", "trainable_vars", "if", "'LayerNorm'", "not", "in", "var", ".", "name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.models.Actor.__init__": [[23, 27], ["models.Model.__init__"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.subproc_vec_env.SubprocVecEnv.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nb_actions", ",", "name", "=", "'actor'", ",", "layer_norm", "=", "True", ")", ":", "\n", "        ", "super", "(", "Actor", ",", "self", ")", ".", "__init__", "(", "name", "=", "name", ")", "\n", "self", ".", "nb_actions", "=", "nb_actions", "\n", "self", ".", "layer_norm", "=", "layer_norm", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.models.Actor.__call__": [[28, 47], ["tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.layers.dense", "tensorflow.layers.dense", "tensorflow.nn.relu", "tensorflow.nn.relu", "tensorflow.layers.dense", "tensorflow.layers.dense", "tensorflow.nn.relu", "tensorflow.nn.relu", "tensorflow.layers.dense", "tensorflow.layers.dense", "tensorflow.nn.tanh", "tensorflow.nn.tanh", "scope.reuse_variables", "tensorflow.layers.layer_norm", "tensorflow.layers.layer_norm", "tensorflow.layers.layer_norm", "tensorflow.layers.layer_norm", "tensorflow.random_uniform_initializer", "tensorflow.random_uniform_initializer"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.dense", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.dense", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.dense", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.dense", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.dense", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.dense"], ["", "def", "__call__", "(", "self", ",", "obs", ",", "reuse", "=", "False", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", ")", "as", "scope", ":", "\n", "            ", "if", "reuse", ":", "\n", "                ", "scope", ".", "reuse_variables", "(", ")", "\n", "\n", "", "x", "=", "obs", "\n", "x", "=", "tf", ".", "layers", ".", "dense", "(", "x", ",", "64", ")", "\n", "if", "self", ".", "layer_norm", ":", "\n", "                ", "x", "=", "tc", ".", "layers", ".", "layer_norm", "(", "x", ",", "center", "=", "True", ",", "scale", "=", "True", ")", "\n", "", "x", "=", "tf", ".", "nn", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "tf", ".", "layers", ".", "dense", "(", "x", ",", "64", ")", "\n", "if", "self", ".", "layer_norm", ":", "\n", "                ", "x", "=", "tc", ".", "layers", ".", "layer_norm", "(", "x", ",", "center", "=", "True", ",", "scale", "=", "True", ")", "\n", "", "x", "=", "tf", ".", "nn", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "tf", ".", "layers", ".", "dense", "(", "x", ",", "self", ".", "nb_actions", ",", "kernel_initializer", "=", "tf", ".", "random_uniform_initializer", "(", "minval", "=", "-", "3e-3", ",", "maxval", "=", "3e-3", ")", ")", "\n", "x", "=", "tf", ".", "nn", ".", "tanh", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.models.Critic.__init__": [[50, 53], ["models.Model.__init__"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.subproc_vec_env.SubprocVecEnv.__init__"], ["    ", "def", "__init__", "(", "self", ",", "name", "=", "'critic'", ",", "layer_norm", "=", "True", ")", ":", "\n", "        ", "super", "(", "Critic", ",", "self", ")", ".", "__init__", "(", "name", "=", "name", ")", "\n", "self", ".", "layer_norm", "=", "layer_norm", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.models.Critic.__call__": [[54, 73], ["tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.layers.dense", "tensorflow.layers.dense", "tensorflow.nn.relu", "tensorflow.nn.relu", "tensorflow.concat", "tensorflow.concat", "tensorflow.layers.dense", "tensorflow.layers.dense", "tensorflow.nn.relu", "tensorflow.nn.relu", "tensorflow.layers.dense", "tensorflow.layers.dense", "scope.reuse_variables", "tensorflow.layers.layer_norm", "tensorflow.layers.layer_norm", "tensorflow.layers.layer_norm", "tensorflow.layers.layer_norm", "tensorflow.random_uniform_initializer", "tensorflow.random_uniform_initializer"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.dense", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.dense", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.dense", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.dense", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.dense", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.dense"], ["", "def", "__call__", "(", "self", ",", "obs", ",", "action", ",", "reuse", "=", "False", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", ")", "as", "scope", ":", "\n", "            ", "if", "reuse", ":", "\n", "                ", "scope", ".", "reuse_variables", "(", ")", "\n", "\n", "", "x", "=", "obs", "\n", "x", "=", "tf", ".", "layers", ".", "dense", "(", "x", ",", "64", ")", "\n", "if", "self", ".", "layer_norm", ":", "\n", "                ", "x", "=", "tc", ".", "layers", ".", "layer_norm", "(", "x", ",", "center", "=", "True", ",", "scale", "=", "True", ")", "\n", "", "x", "=", "tf", ".", "nn", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "tf", ".", "concat", "(", "[", "x", ",", "action", "]", ",", "axis", "=", "-", "1", ")", "\n", "x", "=", "tf", ".", "layers", ".", "dense", "(", "x", ",", "64", ")", "\n", "if", "self", ".", "layer_norm", ":", "\n", "                ", "x", "=", "tc", ".", "layers", ".", "layer_norm", "(", "x", ",", "center", "=", "True", ",", "scale", "=", "True", ")", "\n", "", "x", "=", "tf", ".", "nn", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "tf", ".", "layers", ".", "dense", "(", "x", ",", "1", ",", "kernel_initializer", "=", "tf", ".", "random_uniform_initializer", "(", "minval", "=", "-", "3e-3", ",", "maxval", "=", "3e-3", ")", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.models.Critic.output_vars": [[74, 78], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "output_vars", "(", "self", ")", ":", "\n", "        ", "output_vars", "=", "[", "var", "for", "var", "in", "self", ".", "trainable_vars", "if", "'output'", "in", "var", ".", "name", "]", "\n", "return", "output_vars", "\n", "", "", ""]], "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.main_config.run": [[23, 100], ["mpi4py.MPI.COMM_WORLD.Get_rank", "gym.make", "DDPG_baseline_v2.baselines.bench.Monitor", "gym.logger.setLevel", "noise_type.split", "DDPG_baseline_v2.baselines.ddpg.memory.Memory", "DDPG_baseline_v2.baselines.ddpg.models.Critic", "DDPG_baseline_v2.baselines.ddpg.models.Actor", "DDPG_baseline_v2.baselines.logger.info", "tensorflow.reset_default_graph", "DDPG_baseline_v2.baselines.common.misc_util.set_global_seeds", "bench.Monitor.seed", "DDPG_baseline_v2.run_agent", "bench.Monitor.close", "DDPG_baseline_v2.baselines.logger.set_level", "gym.make", "DDPG_baseline_v2.baselines.bench.Monitor", "current_noise_type.strip.strip", "bench.Monitor.seed", "time.time", "bench.Monitor.close", "DDPG_baseline_v2.baselines.logger.info", "DDPG_baseline_v2.baselines.logger.get_dir", "os.path.join", "os.path.join", "int", "DDPG_baseline_v2.baselines.logger.get_dir", "DDPG_baseline_v2.baselines.logger.get_dir", "DDPG_baseline_v2.baselines.logger.get_dir", "os.path.join", "os.path.join", "current_noise_type.strip.split", "AdaptiveParamNoiseSpec", "DDPG_baseline_v2.baselines.logger.get_dir", "current_noise_type.strip.split", "NormalActionNoise", "time.time", "float", "float", "current_noise_type.strip.split", "DecreasingOrnsteinUhlenbeckActionNoise", "np.zeros", "current_noise_type.strip.split", "OrnsteinUhlenbeckActionNoise", "RuntimeError", "float", "np.ones", "np.zeros", "float", "np.ones", "float", "float", "np.zeros", "float", "np.ones"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.info", "home.repos.pwc.inspect_result.flowersteam_geppg.common.misc_util.set_global_seeds", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.training.run_agent", "home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.__init__.VecEnv.close", "home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.set_level", "home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.__init__.VecEnv.close", "home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.info", "home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.get_dir", "home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.get_dir", "home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.get_dir", "home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.get_dir", "home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.get_dir"], ["def", "run", "(", "env_id", ",", "seed", ",", "noise_type", ",", "layer_norm", ",", "evaluation", ",", "study", ",", "buffer_location", ",", "trial_id", ",", "data_path", ",", "max_memory", ",", "\n", "nb_eval_episodes", ",", "**", "kwargs", ")", ":", "\n", "\n", "# Configure things.", "\n", "    ", "rank", "=", "MPI", ".", "COMM_WORLD", ".", "Get_rank", "(", ")", "\n", "if", "rank", "!=", "0", ":", "logger", ".", "set_level", "(", "logger", ".", "DISABLED", ")", "\n", "\n", "# Create envs.", "\n", "env", "=", "gym", ".", "make", "(", "env_id", ")", "\n", "env", "=", "bench", ".", "Monitor", "(", "env", ",", "logger", ".", "get_dir", "(", ")", "and", "os", ".", "path", ".", "join", "(", "logger", ".", "get_dir", "(", ")", ",", "\"%i.monitor.json\"", "%", "rank", ")", ")", "\n", "actions_lbound", "=", "env", ".", "action_space", ".", "low", "\n", "actions_ubound", "=", "env", ".", "action_space", ".", "high", "\n", "gym", ".", "logger", ".", "setLevel", "(", "logging", ".", "WARN", ")", "\n", "\n", "if", "evaluation", "and", "rank", "==", "0", ":", "\n", "        ", "eval_env", "=", "gym", ".", "make", "(", "env_id", ")", "\n", "eval_env", "=", "bench", ".", "Monitor", "(", "eval_env", ",", "logger", ".", "get_dir", "(", ")", "and", "os", ".", "path", ".", "join", "(", "logger", ".", "get_dir", "(", ")", ",", "\"%i.monitor.json\"", "%", "rank", ")", ")", "\n", "", "else", ":", "\n", "        ", "eval_env", "=", "None", "\n", "\n", "# Parse noise_type", "\n", "", "action_noise", "=", "None", "\n", "param_noise", "=", "None", "\n", "nb_actions", "=", "env", ".", "action_space", ".", "shape", "[", "-", "1", "]", "\n", "nb_observations", "=", "env", ".", "observation_space", ".", "shape", "[", "-", "1", "]", "\n", "for", "current_noise_type", "in", "noise_type", ".", "split", "(", "','", ")", ":", "\n", "        ", "current_noise_type", "=", "current_noise_type", ".", "strip", "(", ")", "\n", "if", "current_noise_type", "==", "'none'", ":", "\n", "            ", "pass", "\n", "", "elif", "'adaptive-param'", "in", "current_noise_type", ":", "\n", "            ", "_", ",", "stddev", "=", "current_noise_type", ".", "split", "(", "'_'", ")", "\n", "param_noise", "=", "AdaptiveParamNoiseSpec", "(", "initial_stddev", "=", "float", "(", "stddev", ")", ",", "desired_action_stddev", "=", "float", "(", "stddev", ")", ")", "\n", "", "elif", "'normal'", "in", "current_noise_type", ":", "\n", "            ", "_", ",", "stddev", "=", "current_noise_type", ".", "split", "(", "'_'", ")", "\n", "action_noise", "=", "NormalActionNoise", "(", "mu", "=", "np", ".", "zeros", "(", "nb_actions", ")", ",", "sigma", "=", "float", "(", "stddev", ")", "*", "np", ".", "ones", "(", "nb_actions", ")", ")", "\n", "", "elif", "'decreasing-ou'", "in", "current_noise_type", ":", "\n", "            ", "_", ",", "stddev", "=", "current_noise_type", ".", "split", "(", "'_'", ")", "\n", "action_noise", "=", "DecreasingOrnsteinUhlenbeckActionNoise", "(", "mu", "=", "np", ".", "zeros", "(", "nb_actions", ")", ",", "\n", "sigma", "=", "float", "(", "stddev", ")", "*", "np", ".", "ones", "(", "nb_actions", ")", ",", "\n", "decreasing_rate", "=", "float", "(", "stddev", ")", "/", "float", "(", "kwargs", "[", "'nb_epochs'", "]", ")", ")", "\n", "", "elif", "'ou'", "in", "current_noise_type", ":", "\n", "            ", "_", ",", "stddev", "=", "current_noise_type", ".", "split", "(", "'_'", ")", "\n", "action_noise", "=", "OrnsteinUhlenbeckActionNoise", "(", "mu", "=", "np", ".", "zeros", "(", "nb_actions", ")", ",", "sigma", "=", "float", "(", "stddev", ")", "*", "np", ".", "ones", "(", "nb_actions", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "'unknown noise type \"{}\"'", ".", "format", "(", "current_noise_type", ")", ")", "\n", "\n", "# Configure components.", "\n", "", "", "memory", "=", "Memory", "(", "limit", "=", "int", "(", "max_memory", ")", ",", "\n", "action_shape", "=", "env", ".", "action_space", ".", "shape", ",", "\n", "observation_shape", "=", "env", ".", "observation_space", ".", "shape", "\n", ")", "\n", "\n", "activation_map", "=", "{", "\"relu\"", ":", "tf", ".", "nn", ".", "relu", ",", "\"leaky_relu\"", ":", "U", ".", "lrelu", ",", "\"tanh\"", ":", "tf", ".", "nn", ".", "tanh", "}", "\n", "\n", "critic", "=", "Critic", "(", "layer_norm", "=", "layer_norm", ")", "\n", "actor", "=", "Actor", "(", "nb_actions", ",", "layer_norm", "=", "layer_norm", ")", "\n", "\n", "# Seed everything to make things reproducible.", "\n", "seed", "=", "seed", "+", "1000000", "*", "rank", "\n", "logger", ".", "info", "(", "'rank {}: seed={}, logdir={}'", ".", "format", "(", "rank", ",", "seed", ",", "logger", ".", "get_dir", "(", ")", ")", ")", "\n", "tf", ".", "reset_default_graph", "(", ")", "\n", "set_global_seeds", "(", "seed", ")", "\n", "env", ".", "seed", "(", "seed", ")", "\n", "if", "eval_env", "is", "not", "None", ":", "\n", "        ", "eval_env", ".", "seed", "(", "seed", ")", "\n", "\n", "# Disable logging for rank != 0 to avoid noise.", "\n", "", "if", "rank", "==", "0", ":", "\n", "        ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "", "training", ".", "run_agent", "(", "env", "=", "env", ",", "eval_env", "=", "eval_env", ",", "param_noise", "=", "param_noise", ",", "action_noise", "=", "action_noise", ",", "\n", "actor", "=", "actor", ",", "critic", "=", "critic", ",", "memory", "=", "memory", ",", "study", "=", "study", ",", "buffer_location", "=", "buffer_location", ",", "\n", "trial_id", "=", "trial_id", ",", "data_path", "=", "data_path", ",", "nb_eval_episodes", "=", "nb_eval_episodes", ",", "**", "kwargs", ")", "\n", "env", ".", "close", "(", ")", "\n", "if", "eval_env", "is", "not", "None", ":", "\n", "        ", "eval_env", ".", "close", "(", ")", "\n", "", "if", "rank", "==", "0", ":", "\n", "        ", "logger", ".", "info", "(", "'total runtime: {}s'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.main_config.run_ddpg": [[102, 123], ["DDPG_baseline_v2.baselines.logger.info", "DDPG_baseline_v2.baselines.logger.info", "main_config.run", "open", "pickle.dump", "mpi4py.MPI.COMM_WORLD.Get_rank", "DDPG_baseline_v2.baselines.logger.configure", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.info", "home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.info", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.main_config.run", "home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.configure"], ["", "", "def", "run_ddpg", "(", "dict_args", ")", ":", "\n", "\n", "\n", "    ", "if", "dict_args", "[", "'study'", "]", "in", "[", "'GEP_PG'", ",", "'GEP_FPG'", "]", "and", "dict_args", "[", "'gep_memory'", "]", "is", "None", ":", "\n", "        ", "assert", "dict_args", "[", "'buffer_location'", "]", "is", "not", "None", "\n", "\n", "# save parameters in data_path with pickle", "\n", "", "tmp_mem", "=", "dict_args", "[", "'gep_memory'", "]", "\n", "dict_args", "[", "'gep_memory'", "]", "=", "None", "\n", "with", "open", "(", "dict_args", "[", "'data_path'", "]", "+", "'parameters.save'", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "dict_args", ",", "f", ")", "\n", "", "dict_args", "[", "'gep_memory'", "]", "=", "tmp_mem", "\n", "\n", "if", "MPI", ".", "COMM_WORLD", ".", "Get_rank", "(", ")", "==", "0", ":", "\n", "        ", "logger", ".", "configure", "(", "dir", "=", "dict_args", "[", "'data_path'", "]", ")", "\n", "", "n_timesteps", "=", "dict_args", "[", "'nb_epochs'", "]", "*", "dict_args", "[", "'nb_epoch_cycles'", "]", "*", "dict_args", "[", "'nb_rollout_steps'", "]", "\n", "logger", ".", "info", "(", "'Running study: '", "+", "dict_args", "[", "'study'", "]", "+", "', with noise: '", "+", "dict_args", "[", "'noise_type'", "]", "+", "' for '", "+", "str", "(", "n_timesteps", ")", "+", "' timesteps, trial '", "+", "str", "(", "dict_args", "[", "'trial_id'", "]", ")", ")", "\n", "logger", ".", "info", "(", "'Loading GEP memory? '", "+", "str", "(", "dict_args", "[", "'gep_memory'", "]", "is", "not", "None", ")", ")", "\n", "# Run actual script.", "\n", "\n", "run", "(", "**", "dict_args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.ddpg.DDPG.__init__": [[58, 138], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.clip_by_value", "tensorflow.clip_by_value", "tensorflow.clip_by_value", "tensorflow.clip_by_value", "copy.copy.copy", "copy.copy.copy", "actor", "critic", "ddpg.denormalize", "critic", "ddpg.denormalize", "ddpg.denormalize", "ddpg.DDPG.setup_actor_optimizer", "ddpg.DDPG.setup_critic_optimizer", "ddpg.DDPG.setup_stats", "ddpg.DDPG.setup_target_network_updates", "ddpg.normalize", "ddpg.normalize", "tensorflow.clip_by_value", "tensorflow.clip_by_value", "tensorflow.clip_by_value", "tensorflow.clip_by_value", "copy.copy.copy.", "ddpg.DDPG.setup_param_noise", "ddpg.DDPG.setup_popart", "tensorflow.variable_scope", "tensorflow.variable_scope", "DDPG_baseline_v2.baselines.common.mpi_running_mean_std.RunningMeanStd", "tensorflow.variable_scope", "tensorflow.variable_scope", "DDPG_baseline_v2.baselines.common.mpi_running_mean_std.RunningMeanStd", "copy.copy.copy."], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.ddpg.denormalize", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.ddpg.denormalize", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.ddpg.denormalize", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.ddpg.DDPG.setup_actor_optimizer", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.ddpg.DDPG.setup_critic_optimizer", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.ddpg.DDPG.setup_stats", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.ddpg.DDPG.setup_target_network_updates", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.ddpg.normalize", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.ddpg.normalize", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.ddpg.DDPG.setup_param_noise", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.ddpg.DDPG.setup_popart"], ["    ", "def", "__init__", "(", "self", ",", "actor", ",", "critic", ",", "memory", ",", "observation_shape", ",", "action_shape", ",", "param_noise", "=", "None", ",", "action_noise", "=", "None", ",", "\n", "gamma", "=", "0.99", ",", "tau", "=", "0.001", ",", "normalize_returns", "=", "False", ",", "enable_popart", "=", "False", ",", "normalize_observations", "=", "True", ",", "\n", "batch_size", "=", "128", ",", "observation_range", "=", "(", "-", "5.", ",", "5.", ")", ",", "action_range", "=", "(", "-", "1.", ",", "1.", ")", ",", "return_range", "=", "(", "-", "np", ".", "inf", ",", "np", ".", "inf", ")", ",", "\n", "adaptive_param_noise", "=", "True", ",", "adaptive_param_noise_policy_threshold", "=", ".1", ",", "\n", "critic_l2_reg", "=", "0.", ",", "actor_lr", "=", "1e-4", ",", "critic_lr", "=", "1e-3", ",", "clip_norm", "=", "None", ",", "reward_scale", "=", "1.", ")", ":", "\n", "# Inputs.", "\n", "        ", "self", ".", "obs0", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "(", "None", ",", ")", "+", "observation_shape", ",", "name", "=", "'obs0'", ")", "\n", "self", ".", "obs1", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "(", "None", ",", ")", "+", "observation_shape", ",", "name", "=", "'obs1'", ")", "\n", "self", ".", "terminals1", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "(", "None", ",", "1", ")", ",", "name", "=", "'terminals1'", ")", "\n", "self", ".", "rewards", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "(", "None", ",", "1", ")", ",", "name", "=", "'rewards'", ")", "\n", "self", ".", "actions", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "(", "None", ",", ")", "+", "action_shape", ",", "name", "=", "'actions'", ")", "\n", "self", ".", "critic_target", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "(", "None", ",", "1", ")", ",", "name", "=", "'critic_target'", ")", "\n", "self", ".", "param_noise_stddev", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "(", ")", ",", "name", "=", "'param_noise_stddev'", ")", "\n", "\n", "# Parameters.", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "tau", "=", "tau", "\n", "self", ".", "memory", "=", "memory", "\n", "self", ".", "normalize_observations", "=", "normalize_observations", "\n", "self", ".", "normalize_returns", "=", "normalize_returns", "\n", "self", ".", "action_noise", "=", "action_noise", "\n", "self", ".", "param_noise", "=", "param_noise", "\n", "self", ".", "action_range", "=", "action_range", "\n", "self", ".", "return_range", "=", "return_range", "\n", "self", ".", "observation_range", "=", "observation_range", "\n", "self", ".", "critic", "=", "critic", "\n", "self", ".", "actor", "=", "actor", "\n", "self", ".", "actor_lr", "=", "actor_lr", "\n", "self", ".", "critic_lr", "=", "critic_lr", "\n", "self", ".", "clip_norm", "=", "clip_norm", "\n", "self", ".", "enable_popart", "=", "enable_popart", "\n", "self", ".", "reward_scale", "=", "reward_scale", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "stats_sample", "=", "None", "\n", "self", ".", "critic_l2_reg", "=", "critic_l2_reg", "\n", "\n", "# Observation normalization.", "\n", "if", "self", ".", "normalize_observations", ":", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "'obs_rms'", ")", ":", "\n", "                ", "self", ".", "obs_rms", "=", "RunningMeanStd", "(", "shape", "=", "observation_shape", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "obs_rms", "=", "None", "\n", "", "normalized_obs0", "=", "tf", ".", "clip_by_value", "(", "normalize", "(", "self", ".", "obs0", ",", "self", ".", "obs_rms", ")", ",", "\n", "self", ".", "observation_range", "[", "0", "]", ",", "self", ".", "observation_range", "[", "1", "]", ")", "\n", "normalized_obs1", "=", "tf", ".", "clip_by_value", "(", "normalize", "(", "self", ".", "obs1", ",", "self", ".", "obs_rms", ")", ",", "\n", "self", ".", "observation_range", "[", "0", "]", ",", "self", ".", "observation_range", "[", "1", "]", ")", "\n", "\n", "# Return normalization.", "\n", "if", "self", ".", "normalize_returns", ":", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "'ret_rms'", ")", ":", "\n", "                ", "self", ".", "ret_rms", "=", "RunningMeanStd", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "ret_rms", "=", "None", "\n", "\n", "# Create target networks.", "\n", "", "target_actor", "=", "copy", "(", "actor", ")", "\n", "target_actor", ".", "name", "=", "'target_actor'", "\n", "self", ".", "target_actor", "=", "target_actor", "\n", "target_critic", "=", "copy", "(", "critic", ")", "\n", "target_critic", ".", "name", "=", "'target_critic'", "\n", "self", ".", "target_critic", "=", "target_critic", "\n", "\n", "# Create networks and core TF parts that are shared across setup parts.", "\n", "self", ".", "actor_tf", "=", "actor", "(", "normalized_obs0", ")", "\n", "self", ".", "normalized_critic_tf", "=", "critic", "(", "normalized_obs0", ",", "self", ".", "actions", ")", "\n", "self", ".", "critic_tf", "=", "denormalize", "(", "tf", ".", "clip_by_value", "(", "self", ".", "normalized_critic_tf", ",", "self", ".", "return_range", "[", "0", "]", ",", "self", ".", "return_range", "[", "1", "]", ")", ",", "self", ".", "ret_rms", ")", "\n", "self", ".", "normalized_critic_with_actor_tf", "=", "critic", "(", "normalized_obs0", ",", "self", ".", "actor_tf", ",", "reuse", "=", "True", ")", "\n", "self", ".", "critic_with_actor_tf", "=", "denormalize", "(", "tf", ".", "clip_by_value", "(", "self", ".", "normalized_critic_with_actor_tf", ",", "self", ".", "return_range", "[", "0", "]", ",", "self", ".", "return_range", "[", "1", "]", ")", ",", "self", ".", "ret_rms", ")", "\n", "Q_obs1", "=", "denormalize", "(", "target_critic", "(", "normalized_obs1", ",", "target_actor", "(", "normalized_obs1", ")", ")", ",", "self", ".", "ret_rms", ")", "\n", "self", ".", "target_Q", "=", "self", ".", "rewards", "+", "(", "1.", "-", "self", ".", "terminals1", ")", "*", "gamma", "*", "Q_obs1", "\n", "\n", "# Set up parts.", "\n", "if", "self", ".", "param_noise", "is", "not", "None", ":", "\n", "            ", "self", ".", "setup_param_noise", "(", "normalized_obs0", ")", "\n", "", "self", ".", "setup_actor_optimizer", "(", ")", "\n", "self", ".", "setup_critic_optimizer", "(", ")", "\n", "if", "self", ".", "normalize_returns", "and", "self", ".", "enable_popart", ":", "\n", "            ", "self", ".", "setup_popart", "(", ")", "\n", "", "self", ".", "setup_stats", "(", ")", "\n", "self", ".", "setup_target_network_updates", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.ddpg.DDPG.setup_target_network_updates": [[139, 144], ["ddpg.get_target_updates", "ddpg.get_target_updates"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.ddpg.get_target_updates", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.ddpg.get_target_updates"], ["", "def", "setup_target_network_updates", "(", "self", ")", ":", "\n", "        ", "actor_init_updates", ",", "actor_soft_updates", "=", "get_target_updates", "(", "self", ".", "actor", ".", "vars", ",", "self", ".", "target_actor", ".", "vars", ",", "self", ".", "tau", ")", "\n", "critic_init_updates", ",", "critic_soft_updates", "=", "get_target_updates", "(", "self", ".", "critic", ".", "vars", ",", "self", ".", "target_critic", ".", "vars", ",", "self", ".", "tau", ")", "\n", "self", ".", "target_init_updates", "=", "[", "actor_init_updates", ",", "critic_init_updates", "]", "\n", "self", ".", "target_soft_updates", "=", "[", "actor_soft_updates", ",", "critic_soft_updates", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.ddpg.DDPG.setup_param_noise": [[145, 161], ["copy.copy.copy", "copy.copy.copy.", "DDPG_baseline_v2.baselines.logger.info", "ddpg.get_perturbed_actor_updates", "copy.copy.copy", "copy.copy.copy.", "ddpg.get_perturbed_actor_updates", "tensorflow.sqrt", "tensorflow.sqrt", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.square", "tensorflow.square"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.info", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.ddpg.get_perturbed_actor_updates", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.ddpg.get_perturbed_actor_updates"], ["", "def", "setup_param_noise", "(", "self", ",", "normalized_obs0", ")", ":", "\n", "        ", "assert", "self", ".", "param_noise", "is", "not", "None", "\n", "\n", "# Configure perturbed actor.", "\n", "param_noise_actor", "=", "copy", "(", "self", ".", "actor", ")", "\n", "param_noise_actor", ".", "name", "=", "'param_noise_actor'", "\n", "self", ".", "perturbed_actor_tf", "=", "param_noise_actor", "(", "normalized_obs0", ")", "\n", "logger", ".", "info", "(", "'setting up param noise'", ")", "\n", "self", ".", "perturb_policy_ops", "=", "get_perturbed_actor_updates", "(", "self", ".", "actor", ",", "param_noise_actor", ",", "self", ".", "param_noise_stddev", ")", "\n", "\n", "# Configure separate copy for stddev adoption.", "\n", "adaptive_param_noise_actor", "=", "copy", "(", "self", ".", "actor", ")", "\n", "adaptive_param_noise_actor", ".", "name", "=", "'adaptive_param_noise_actor'", "\n", "adaptive_actor_tf", "=", "adaptive_param_noise_actor", "(", "normalized_obs0", ")", "\n", "self", ".", "perturb_adaptive_policy_ops", "=", "get_perturbed_actor_updates", "(", "self", ".", "actor", ",", "adaptive_param_noise_actor", ",", "self", ".", "param_noise_stddev", ")", "\n", "self", ".", "adaptive_policy_distance", "=", "tf", ".", "sqrt", "(", "tf", ".", "reduce_mean", "(", "tf", ".", "square", "(", "self", ".", "actor_tf", "-", "adaptive_actor_tf", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.ddpg.DDPG.setup_actor_optimizer": [[162, 172], ["DDPG_baseline_v2.baselines.logger.info", "sum", "DDPG_baseline_v2.baselines.logger.info", "DDPG_baseline_v2.baselines.logger.info", "DDPG_baseline_v2.flatgrad", "DDPG_baseline_v2.baselines.common.mpi_adam.MpiAdam", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "var.get_shape().as_list", "functools.reduce", "var.get_shape"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.info", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.sum", "home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.info", "home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.info", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.flatgrad", "home.repos.pwc.inspect_result.flowersteam_geppg.common.segment_tree.SegmentTree.reduce"], ["", "def", "setup_actor_optimizer", "(", "self", ")", ":", "\n", "        ", "logger", ".", "info", "(", "'setting up actor optimizer'", ")", "\n", "self", ".", "actor_loss", "=", "-", "tf", ".", "reduce_mean", "(", "self", ".", "critic_with_actor_tf", ")", "\n", "actor_shapes", "=", "[", "var", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "for", "var", "in", "self", ".", "actor", ".", "trainable_vars", "]", "\n", "actor_nb_params", "=", "sum", "(", "[", "reduce", "(", "lambda", "x", ",", "y", ":", "x", "*", "y", ",", "shape", ")", "for", "shape", "in", "actor_shapes", "]", ")", "\n", "logger", ".", "info", "(", "'  actor shapes: {}'", ".", "format", "(", "actor_shapes", ")", ")", "\n", "logger", ".", "info", "(", "'  actor params: {}'", ".", "format", "(", "actor_nb_params", ")", ")", "\n", "self", ".", "actor_grads", "=", "U", ".", "flatgrad", "(", "self", ".", "actor_loss", ",", "self", ".", "actor", ".", "trainable_vars", ",", "clip_norm", "=", "self", ".", "clip_norm", ")", "\n", "self", ".", "actor_optimizer", "=", "MpiAdam", "(", "var_list", "=", "self", ".", "actor", ".", "trainable_vars", ",", "\n", "beta1", "=", "0.9", ",", "beta2", "=", "0.999", ",", "epsilon", "=", "1e-08", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.ddpg.DDPG.setup_critic_optimizer": [[173, 194], ["DDPG_baseline_v2.baselines.logger.info", "tensorflow.clip_by_value", "tensorflow.clip_by_value", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "sum", "DDPG_baseline_v2.baselines.logger.info", "DDPG_baseline_v2.baselines.logger.info", "DDPG_baseline_v2.flatgrad", "DDPG_baseline_v2.baselines.common.mpi_adam.MpiAdam", "ddpg.normalize", "tensorflow.square", "tensorflow.square", "DDPG_baseline_v2.baselines.logger.info", "tensorflow.layers.apply_regularization", "tensorflow.layers.apply_regularization", "var.get_shape().as_list", "DDPG_baseline_v2.baselines.logger.info", "tensorflow.layers.l2_regularizer", "tensorflow.layers.l2_regularizer", "functools.reduce", "var.get_shape"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.info", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.sum", "home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.info", "home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.info", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.flatgrad", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.ddpg.normalize", "home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.info", "home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.info", "home.repos.pwc.inspect_result.flowersteam_geppg.common.segment_tree.SegmentTree.reduce"], ["", "def", "setup_critic_optimizer", "(", "self", ")", ":", "\n", "        ", "logger", ".", "info", "(", "'setting up critic optimizer'", ")", "\n", "normalized_critic_target_tf", "=", "tf", ".", "clip_by_value", "(", "normalize", "(", "self", ".", "critic_target", ",", "self", ".", "ret_rms", ")", ",", "self", ".", "return_range", "[", "0", "]", ",", "self", ".", "return_range", "[", "1", "]", ")", "\n", "self", ".", "critic_loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "square", "(", "self", ".", "normalized_critic_tf", "-", "normalized_critic_target_tf", ")", ")", "\n", "if", "self", ".", "critic_l2_reg", ">", "0.", ":", "\n", "            ", "critic_reg_vars", "=", "[", "var", "for", "var", "in", "self", ".", "critic", ".", "trainable_vars", "if", "'kernel'", "in", "var", ".", "name", "and", "'output'", "not", "in", "var", ".", "name", "]", "\n", "for", "var", "in", "critic_reg_vars", ":", "\n", "                ", "logger", ".", "info", "(", "'  regularizing: {}'", ".", "format", "(", "var", ".", "name", ")", ")", "\n", "", "logger", ".", "info", "(", "'  applying l2 regularization with {}'", ".", "format", "(", "self", ".", "critic_l2_reg", ")", ")", "\n", "critic_reg", "=", "tc", ".", "layers", ".", "apply_regularization", "(", "\n", "tc", ".", "layers", ".", "l2_regularizer", "(", "self", ".", "critic_l2_reg", ")", ",", "\n", "weights_list", "=", "critic_reg_vars", "\n", ")", "\n", "self", ".", "critic_loss", "+=", "critic_reg", "\n", "", "critic_shapes", "=", "[", "var", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "for", "var", "in", "self", ".", "critic", ".", "trainable_vars", "]", "\n", "critic_nb_params", "=", "sum", "(", "[", "reduce", "(", "lambda", "x", ",", "y", ":", "x", "*", "y", ",", "shape", ")", "for", "shape", "in", "critic_shapes", "]", ")", "\n", "logger", ".", "info", "(", "'  critic shapes: {}'", ".", "format", "(", "critic_shapes", ")", ")", "\n", "logger", ".", "info", "(", "'  critic params: {}'", ".", "format", "(", "critic_nb_params", ")", ")", "\n", "self", ".", "critic_grads", "=", "U", ".", "flatgrad", "(", "self", ".", "critic_loss", ",", "self", ".", "critic", ".", "trainable_vars", ",", "clip_norm", "=", "self", ".", "clip_norm", ")", "\n", "self", ".", "critic_optimizer", "=", "MpiAdam", "(", "var_list", "=", "self", ".", "critic", ".", "trainable_vars", ",", "\n", "beta1", "=", "0.9", ",", "beta2", "=", "0.999", ",", "epsilon", "=", "1e-08", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.ddpg.DDPG.setup_popart": [[195, 212], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "len", "M.assign", "b.assign", "M.get_shape", "b.get_shape"], "methods", ["None"], ["", "def", "setup_popart", "(", "self", ")", ":", "\n", "# See https://arxiv.org/pdf/1602.07714.pdf for details.", "\n", "        ", "self", ".", "old_std", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "1", "]", ",", "name", "=", "'old_std'", ")", "\n", "new_std", "=", "self", ".", "ret_rms", ".", "std", "\n", "self", ".", "old_mean", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "1", "]", ",", "name", "=", "'old_mean'", ")", "\n", "new_mean", "=", "self", ".", "ret_rms", ".", "mean", "\n", "\n", "self", ".", "renormalize_Q_outputs_op", "=", "[", "]", "\n", "for", "vs", "in", "[", "self", ".", "critic", ".", "output_vars", ",", "self", ".", "target_critic", ".", "output_vars", "]", ":", "\n", "            ", "assert", "len", "(", "vs", ")", "==", "2", "\n", "M", ",", "b", "=", "vs", "\n", "assert", "'kernel'", "in", "M", ".", "name", "\n", "assert", "'bias'", "in", "b", ".", "name", "\n", "assert", "M", ".", "get_shape", "(", ")", "[", "-", "1", "]", "==", "1", "\n", "assert", "b", ".", "get_shape", "(", ")", "[", "-", "1", "]", "==", "1", "\n", "self", ".", "renormalize_Q_outputs_op", "+=", "[", "M", ".", "assign", "(", "M", "*", "self", ".", "old_std", "/", "new_std", ")", "]", "\n", "self", ".", "renormalize_Q_outputs_op", "+=", "[", "b", ".", "assign", "(", "(", "b", "*", "self", ".", "old_std", "+", "self", ".", "old_mean", "-", "new_mean", ")", "/", "new_std", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.ddpg.DDPG.setup_stats": [[213, 248], ["tensorflow.reduce_mean", "tensorflow.reduce_mean", "DDPG_baseline_v2.baselines.ddpg.util.reduce_std", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "DDPG_baseline_v2.baselines.ddpg.util.reduce_std", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "DDPG_baseline_v2.baselines.ddpg.util.reduce_std", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "DDPG_baseline_v2.baselines.ddpg.util.reduce_std"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.util.reduce_std", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.util.reduce_std", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.util.reduce_std", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.util.reduce_std"], ["", "", "def", "setup_stats", "(", "self", ")", ":", "\n", "        ", "ops", "=", "[", "]", "\n", "names", "=", "[", "]", "\n", "\n", "if", "self", ".", "normalize_returns", ":", "\n", "            ", "ops", "+=", "[", "self", ".", "ret_rms", ".", "mean", ",", "self", ".", "ret_rms", ".", "std", "]", "\n", "names", "+=", "[", "'ret_rms_mean'", ",", "'ret_rms_std'", "]", "\n", "\n", "", "if", "self", ".", "normalize_observations", ":", "\n", "            ", "ops", "+=", "[", "tf", ".", "reduce_mean", "(", "self", ".", "obs_rms", ".", "mean", ")", ",", "tf", ".", "reduce_mean", "(", "self", ".", "obs_rms", ".", "std", ")", "]", "\n", "names", "+=", "[", "'obs_rms_mean'", ",", "'obs_rms_std'", "]", "\n", "\n", "", "ops", "+=", "[", "tf", ".", "reduce_mean", "(", "self", ".", "critic_tf", ")", "]", "\n", "names", "+=", "[", "'reference_Q_mean'", "]", "\n", "ops", "+=", "[", "reduce_std", "(", "self", ".", "critic_tf", ")", "]", "\n", "names", "+=", "[", "'reference_Q_std'", "]", "\n", "\n", "ops", "+=", "[", "tf", ".", "reduce_mean", "(", "self", ".", "critic_with_actor_tf", ")", "]", "\n", "names", "+=", "[", "'reference_actor_Q_mean'", "]", "\n", "ops", "+=", "[", "reduce_std", "(", "self", ".", "critic_with_actor_tf", ")", "]", "\n", "names", "+=", "[", "'reference_actor_Q_std'", "]", "\n", "\n", "ops", "+=", "[", "tf", ".", "reduce_mean", "(", "self", ".", "actor_tf", ")", "]", "\n", "names", "+=", "[", "'reference_action_mean'", "]", "\n", "ops", "+=", "[", "reduce_std", "(", "self", ".", "actor_tf", ")", "]", "\n", "names", "+=", "[", "'reference_action_std'", "]", "\n", "\n", "if", "self", ".", "param_noise", ":", "\n", "            ", "ops", "+=", "[", "tf", ".", "reduce_mean", "(", "self", ".", "perturbed_actor_tf", ")", "]", "\n", "names", "+=", "[", "'reference_perturbed_action_mean'", "]", "\n", "ops", "+=", "[", "reduce_std", "(", "self", ".", "perturbed_actor_tf", ")", "]", "\n", "names", "+=", "[", "'reference_perturbed_action_std'", "]", "\n", "\n", "", "self", ".", "stats_ops", "=", "ops", "\n", "self", ".", "stats_names", "=", "names", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.ddpg.DDPG.pi": [[249, 267], ["ddpg.DDPG.flatten", "numpy.clip", "ddpg.DDPG.sess.run", "ddpg.DDPG.sess.run", "ddpg.DDPG.action_noise"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.main_config.run", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.main_config.run"], ["", "def", "pi", "(", "self", ",", "obs", ",", "apply_noise", "=", "True", ",", "compute_Q", "=", "True", ")", ":", "\n", "        ", "if", "self", ".", "param_noise", "is", "not", "None", "and", "apply_noise", ":", "\n", "            ", "actor_tf", "=", "self", ".", "perturbed_actor_tf", "\n", "", "else", ":", "\n", "            ", "actor_tf", "=", "self", ".", "actor_tf", "\n", "", "feed_dict", "=", "{", "self", ".", "obs0", ":", "[", "obs", "]", "}", "\n", "if", "compute_Q", ":", "\n", "            ", "action", ",", "q", "=", "self", ".", "sess", ".", "run", "(", "[", "actor_tf", ",", "self", ".", "critic_with_actor_tf", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "", "else", ":", "\n", "            ", "action", "=", "self", ".", "sess", ".", "run", "(", "actor_tf", ",", "feed_dict", "=", "feed_dict", ")", "\n", "q", "=", "None", "\n", "", "action", "=", "action", ".", "flatten", "(", ")", "\n", "if", "self", ".", "action_noise", "is", "not", "None", "and", "apply_noise", ":", "\n", "            ", "noise", "=", "self", ".", "action_noise", "(", ")", "\n", "assert", "noise", ".", "shape", "==", "action", ".", "shape", "\n", "action", "+=", "noise", "\n", "", "action", "=", "np", ".", "clip", "(", "action", ",", "self", ".", "action_range", "[", "0", "]", ",", "self", ".", "action_range", "[", "1", "]", ")", "\n", "return", "action", ",", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.ddpg.DDPG.store_transition": [[269, 274], ["ddpg.DDPG.memory.append", "ddpg.DDPG.obs_rms.update", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.common.mpi_running_mean_std.RunningMeanStd.update"], ["", "def", "store_transition", "(", "self", ",", "obs0", ",", "action", ",", "reward", ",", "obs1", ",", "terminal1", ")", ":", "\n", "        ", "reward", "*=", "self", ".", "reward_scale", "\n", "self", ".", "memory", ".", "append", "(", "obs0", ",", "action", ",", "reward", ",", "obs1", ",", "terminal1", ")", "\n", "if", "self", ".", "normalize_observations", ":", "\n", "            ", "self", ".", "obs_rms", ".", "update", "(", "np", ".", "array", "(", "[", "obs0", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.ddpg.DDPG.train": [[275, 328], ["ddpg.DDPG.memory.sample", "ddpg.DDPG.sess.run", "ddpg.DDPG.actor_optimizer.update", "ddpg.DDPG.critic_optimizer.update", "ddpg.DDPG.sess.run", "ddpg.DDPG.ret_rms.update", "ddpg.DDPG.sess.run", "ddpg.DDPG.sess.run", "ddpg.DDPG.flatten", "batch[].astype", "numpy.array", "numpy.array", "batch[].astype"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.distributions.BernoulliPd.sample", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.main_config.run", "home.repos.pwc.inspect_result.flowersteam_geppg.common.mpi_running_mean_std.RunningMeanStd.update", "home.repos.pwc.inspect_result.flowersteam_geppg.common.mpi_running_mean_std.RunningMeanStd.update", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.main_config.run", "home.repos.pwc.inspect_result.flowersteam_geppg.common.mpi_running_mean_std.RunningMeanStd.update", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.main_config.run", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.main_config.run"], ["", "", "def", "train", "(", "self", ")", ":", "\n", "# Get a batch.", "\n", "        ", "batch", "=", "self", ".", "memory", ".", "sample", "(", "batch_size", "=", "self", ".", "batch_size", ")", "\n", "\n", "if", "self", ".", "normalize_returns", "and", "self", ".", "enable_popart", ":", "\n", "            ", "old_mean", ",", "old_std", ",", "target_Q", "=", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "ret_rms", ".", "mean", ",", "self", ".", "ret_rms", ".", "std", ",", "self", ".", "target_Q", "]", ",", "feed_dict", "=", "{", "\n", "self", ".", "obs1", ":", "batch", "[", "'obs1'", "]", ",", "\n", "self", ".", "rewards", ":", "batch", "[", "'rewards'", "]", ",", "\n", "self", ".", "terminals1", ":", "batch", "[", "'terminals1'", "]", ".", "astype", "(", "'float32'", ")", ",", "\n", "}", ")", "\n", "self", ".", "ret_rms", ".", "update", "(", "target_Q", ".", "flatten", "(", ")", ")", "\n", "self", ".", "sess", ".", "run", "(", "self", ".", "renormalize_Q_outputs_op", ",", "feed_dict", "=", "{", "\n", "self", ".", "old_std", ":", "np", ".", "array", "(", "[", "old_std", "]", ")", ",", "\n", "self", ".", "old_mean", ":", "np", ".", "array", "(", "[", "old_mean", "]", ")", ",", "\n", "}", ")", "\n", "\n", "# Run sanity check. Disabled by default since it slows down things considerably.", "\n", "# print('running sanity check')", "\n", "# target_Q_new, new_mean, new_std = self.sess.run([self.target_Q, self.ret_rms.mean, self.ret_rms.std], feed_dict={", "\n", "#     self.obs1: batch['obs1'],", "\n", "#     self.rewards: batch['rewards'],", "\n", "#     self.terminals1: batch['terminals1'].astype('float32'),", "\n", "# })", "\n", "# print(target_Q_new, target_Q, new_mean, new_std)", "\n", "# assert (np.abs(target_Q - target_Q_new) < 1e-3).all()", "\n", "", "else", ":", "\n", "            ", "target_Q", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "target_Q", ",", "feed_dict", "=", "{", "\n", "self", ".", "obs1", ":", "batch", "[", "'obs1'", "]", ",", "\n", "self", ".", "rewards", ":", "batch", "[", "'rewards'", "]", ",", "\n", "self", ".", "terminals1", ":", "batch", "[", "'terminals1'", "]", ".", "astype", "(", "'float32'", ")", ",", "\n", "}", ")", "\n", "\n", "# Get all gradients and perform a synced update.", "\n", "", "ops", "=", "[", "self", ".", "actor_grads", ",", "self", ".", "actor_loss", ",", "self", ".", "critic_grads", ",", "self", ".", "critic_loss", "]", "\n", "actor_grads", ",", "actor_loss", ",", "critic_grads", ",", "critic_loss", "=", "self", ".", "sess", ".", "run", "(", "ops", ",", "feed_dict", "=", "{", "\n", "self", ".", "obs0", ":", "batch", "[", "'obs0'", "]", ",", "\n", "self", ".", "actions", ":", "batch", "[", "'actions'", "]", ",", "\n", "self", ".", "critic_target", ":", "target_Q", ",", "\n", "}", ")", "\n", "# if self.invert_grads:", "\n", "#     \"\"\"Gradient inverting as described in https://arxiv.org/abs/1511.04143\"\"\"", "\n", "#     for d in range(self.actor.actions_ubound.shape[0]):", "\n", "#         width = self.actor.actions_ubound[d] - self.actor.actions_lbound[d]", "\n", "#         for k in range(self.batch_size):", "\n", "#             if actor_grads[-k][d] >= 0:", "\n", "#                 grads[k][d] *= (high[d] - a_outs[k][d]) / width", "\n", "#             else:", "\n", "#                 grads[k][d] *= (a_outs[k][d] - low[d]) / width", "\n", "\n", "self", ".", "actor_optimizer", ".", "update", "(", "actor_grads", ",", "stepsize", "=", "self", ".", "actor_lr", ")", "\n", "self", ".", "critic_optimizer", ".", "update", "(", "critic_grads", ",", "stepsize", "=", "self", ".", "critic_lr", ")", "\n", "\n", "return", "critic_loss", ",", "actor_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.ddpg.DDPG.initialize": [[329, 335], ["ddpg.DDPG.sess.run", "ddpg.DDPG.actor_optimizer.sync", "ddpg.DDPG.critic_optimizer.sync", "ddpg.DDPG.sess.run", "tensorflow.global_variables_initializer", "tensorflow.global_variables_initializer"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.main_config.run", "home.repos.pwc.inspect_result.flowersteam_geppg.common.mpi_adam.MpiAdam.sync", "home.repos.pwc.inspect_result.flowersteam_geppg.common.mpi_adam.MpiAdam.sync", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.main_config.run"], ["", "def", "initialize", "(", "self", ",", "sess", ")", ":", "\n", "        ", "self", ".", "sess", "=", "sess", "\n", "self", ".", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "self", ".", "actor_optimizer", ".", "sync", "(", ")", "\n", "self", ".", "critic_optimizer", ".", "sync", "(", ")", "\n", "self", ".", "sess", ".", "run", "(", "self", ".", "target_init_updates", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.ddpg.DDPG.update_target_net": [[337, 339], ["ddpg.DDPG.sess.run"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.main_config.run"], ["", "def", "update_target_net", "(", "self", ")", ":", "\n", "        ", "self", ".", "sess", ".", "run", "(", "self", ".", "target_soft_updates", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.ddpg.DDPG.get_stats": [[340, 358], ["ddpg.DDPG.sess.run", "dict", "ddpg.DDPG.memory.sample", "len", "len", "zip", "ddpg.DDPG.param_noise.get_stats"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.main_config.run", "home.repos.pwc.inspect_result.flowersteam_geppg.common.distributions.BernoulliPd.sample", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.ddpg.DDPG.get_stats"], ["", "def", "get_stats", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "stats_sample", "is", "None", ":", "\n", "# Get a sample and keep that fixed for all further computations.", "\n", "# This allows us to estimate the change in value for the same set of inputs.", "\n", "            ", "self", ".", "stats_sample", "=", "self", ".", "memory", ".", "sample", "(", "batch_size", "=", "self", ".", "batch_size", ")", "\n", "", "values", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "stats_ops", ",", "feed_dict", "=", "{", "\n", "self", ".", "obs0", ":", "self", ".", "stats_sample", "[", "'obs0'", "]", ",", "\n", "self", ".", "actions", ":", "self", ".", "stats_sample", "[", "'actions'", "]", ",", "\n", "}", ")", "\n", "\n", "names", "=", "self", ".", "stats_names", "[", ":", "]", "\n", "assert", "len", "(", "names", ")", "==", "len", "(", "values", ")", "\n", "stats", "=", "dict", "(", "zip", "(", "names", ",", "values", ")", ")", "\n", "\n", "if", "self", ".", "param_noise", "is", "not", "None", ":", "\n", "            ", "stats", "=", "{", "**", "stats", ",", "**", "self", ".", "param_noise", ".", "get_stats", "(", ")", "}", "\n", "\n", "", "return", "stats", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.ddpg.DDPG.adapt_param_noise": [[359, 376], ["ddpg.DDPG.memory.sample", "ddpg.DDPG.sess.run", "ddpg.DDPG.sess.run", "DDPG_baseline_v2.baselines.ddpg.util.mpi_mean", "ddpg.DDPG.param_noise.adapt"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.distributions.BernoulliPd.sample", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.main_config.run", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.main_config.run", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.util.mpi_mean", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.noise.DecreasingOrnsteinUhlenbeckActionNoise.adapt"], ["", "def", "adapt_param_noise", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "param_noise", "is", "None", ":", "\n", "            ", "return", "0.", "\n", "\n", "# Perturb a separate copy of the policy to adjust the scale for the next \"real\" perturbation.", "\n", "", "batch", "=", "self", ".", "memory", ".", "sample", "(", "batch_size", "=", "self", ".", "batch_size", ")", "\n", "self", ".", "sess", ".", "run", "(", "self", ".", "perturb_adaptive_policy_ops", ",", "feed_dict", "=", "{", "\n", "self", ".", "param_noise_stddev", ":", "self", ".", "param_noise", ".", "current_stddev", ",", "\n", "}", ")", "\n", "distance", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "adaptive_policy_distance", ",", "feed_dict", "=", "{", "\n", "self", ".", "obs0", ":", "batch", "[", "'obs0'", "]", ",", "\n", "self", ".", "param_noise_stddev", ":", "self", ".", "param_noise", ".", "current_stddev", ",", "\n", "}", ")", "\n", "\n", "mean_distance", "=", "mpi_mean", "(", "distance", ")", "\n", "self", ".", "param_noise", ".", "adapt", "(", "mean_distance", ")", "\n", "return", "mean_distance", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.ddpg.DDPG.adapt_ou_noise": [[377, 379], ["ddpg.DDPG.action_noise.adapt"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.noise.DecreasingOrnsteinUhlenbeckActionNoise.adapt"], ["", "def", "adapt_ou_noise", "(", "self", ")", ":", "\n", "        ", "self", ".", "action_noise", ".", "adapt", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.ddpg.DDPG.reset": [[381, 388], ["ddpg.DDPG.action_noise.reset", "ddpg.DDPG.sess.run"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.main_config.run"], ["", "def", "reset", "(", "self", ")", ":", "\n", "# Reset internal state after an episode is complete.", "\n", "        ", "if", "self", ".", "action_noise", "is", "not", "None", ":", "\n", "            ", "self", ".", "action_noise", ".", "reset", "(", ")", "\n", "", "if", "self", ".", "param_noise", "is", "not", "None", ":", "\n", "            ", "self", ".", "sess", ".", "run", "(", "self", ".", "perturb_policy_ops", ",", "feed_dict", "=", "{", "\n", "self", ".", "param_noise_stddev", ":", "self", ".", "param_noise", ".", "current_stddev", ",", "\n", "}", ")", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.ddpg.normalize": [[15, 19], ["None"], "function", ["None"], ["def", "normalize", "(", "x", ",", "stats", ")", ":", "\n", "    ", "if", "stats", "is", "None", ":", "\n", "        ", "return", "x", "\n", "", "return", "(", "x", "-", "stats", ".", "mean", ")", "/", "stats", ".", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.ddpg.denormalize": [[21, 25], ["None"], "function", ["None"], ["", "def", "denormalize", "(", "x", ",", "stats", ")", ":", "\n", "    ", "if", "stats", "is", "None", ":", "\n", "        ", "return", "x", "\n", "", "return", "x", "*", "stats", ".", "std", "+", "stats", ".", "mean", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.ddpg.get_target_updates": [[27, 39], ["DDPG_baseline_v2.baselines.logger.info", "zip", "len", "len", "DDPG_baseline_v2.baselines.logger.info", "init_updates.append", "soft_updates.append", "len", "len", "len", "len", "tensorflow.group", "tensorflow.group", "tensorflow.assign", "tensorflow.assign"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.info", "home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.info", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append"], ["", "def", "get_target_updates", "(", "vars", ",", "target_vars", ",", "tau", ")", ":", "\n", "    ", "logger", ".", "info", "(", "'setting up target updates ...'", ")", "\n", "soft_updates", "=", "[", "]", "\n", "init_updates", "=", "[", "]", "\n", "assert", "len", "(", "vars", ")", "==", "len", "(", "target_vars", ")", "\n", "for", "var", ",", "target_var", "in", "zip", "(", "vars", ",", "target_vars", ")", ":", "\n", "        ", "logger", ".", "info", "(", "'  {} <- {}'", ".", "format", "(", "target_var", ".", "name", ",", "var", ".", "name", ")", ")", "\n", "init_updates", ".", "append", "(", "tf", ".", "assign", "(", "target_var", ",", "var", ")", ")", "\n", "soft_updates", ".", "append", "(", "tf", ".", "assign", "(", "target_var", ",", "(", "1.", "-", "tau", ")", "*", "target_var", "+", "tau", "*", "var", ")", ")", "\n", "", "assert", "len", "(", "init_updates", ")", "==", "len", "(", "vars", ")", "\n", "assert", "len", "(", "soft_updates", ")", "==", "len", "(", "vars", ")", "\n", "return", "tf", ".", "group", "(", "*", "init_updates", ")", ",", "tf", ".", "group", "(", "*", "soft_updates", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.ddpg.get_perturbed_actor_updates": [[41, 55], ["zip", "tensorflow.group", "len", "len", "len", "len", "len", "len", "DDPG_baseline_v2.baselines.logger.info", "updates.append", "DDPG_baseline_v2.baselines.logger.info", "updates.append", "tensorflow.assign", "tensorflow.assign", "tensorflow.random_normal", "tensorflow.shape"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.info", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.info", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append"], ["", "def", "get_perturbed_actor_updates", "(", "actor", ",", "perturbed_actor", ",", "param_noise_stddev", ")", ":", "\n", "    ", "assert", "len", "(", "actor", ".", "vars", ")", "==", "len", "(", "perturbed_actor", ".", "vars", ")", "\n", "assert", "len", "(", "actor", ".", "perturbable_vars", ")", "==", "len", "(", "perturbed_actor", ".", "perturbable_vars", ")", "\n", "\n", "updates", "=", "[", "]", "\n", "for", "var", ",", "perturbed_var", "in", "zip", "(", "actor", ".", "vars", ",", "perturbed_actor", ".", "vars", ")", ":", "\n", "        ", "if", "var", "in", "actor", ".", "perturbable_vars", ":", "\n", "            ", "logger", ".", "info", "(", "'  {} <- {} + noise'", ".", "format", "(", "perturbed_var", ".", "name", ",", "var", ".", "name", ")", ")", "\n", "updates", ".", "append", "(", "tf", ".", "assign", "(", "perturbed_var", ",", "var", "+", "tf", ".", "random_normal", "(", "tf", ".", "shape", "(", "var", ")", ",", "mean", "=", "0.", ",", "stddev", "=", "param_noise_stddev", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "logger", ".", "info", "(", "'  {} <- {}'", ".", "format", "(", "perturbed_var", ".", "name", ",", "var", ".", "name", ")", ")", "\n", "updates", ".", "append", "(", "tf", ".", "assign", "(", "perturbed_var", ",", "var", ")", ")", "\n", "", "", "assert", "len", "(", "updates", ")", "==", "len", "(", "actor", ".", "vars", ")", "\n", "return", "tf", ".", "group", "(", "*", "updates", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.training.run_agent": [[19, 184], ["mpi4py.MPI.COMM_WORLD.Get_rank", "DDPG_baseline_v2.baselines.logger.info", "DDPG_baseline_v2.baselines.ddpg.ddpg.DDPG", "DDPG_baseline_v2.baselines.logger.info", "DDPG_baseline_v2.baselines.logger.info", "collections.deque", "collections.deque", "tensorflow.train.Saver", "str", "tensorflow.train.Saver", "DDPG_baseline_v2.single_threaded_session", "DDPG_baseline_v2.baselines.ddpg.ddpg.DDPG.initialize", "sess.graph.finalize", "DDPG_baseline_v2.baselines.ddpg.ddpg.DDPG.reset", "env.reset", "time.time", "time.time", "range", "DDPG_baseline_v2.baselines.ddpg.ddpg.DDPG.__dict__.items", "len", "range", "DDPG_baseline_v2.baselines.logger.info", "eval_env.reset", "range", "training.evaluate", "DDPG_baseline_v2.baselines.ddpg.ddpg.DDPG.get_stats", "sorted", "DDPG_baseline_v2.baselines.ddpg.util.mpi_mean", "DDPG_baseline_v2.baselines.ddpg.util.mpi_mean", "DDPG_baseline_v2.baselines.ddpg.util.mpi_mean", "DDPG_baseline_v2.baselines.ddpg.util.mpi_sum", "DDPG_baseline_v2.baselines.ddpg.util.mpi_mean", "DDPG_baseline_v2.baselines.ddpg.util.mpi_std", "DDPG_baseline_v2.baselines.ddpg.util.mpi_mean", "DDPG_baseline_v2.baselines.ddpg.util.mpi_mean", "DDPG_baseline_v2.baselines.ddpg.util.mpi_mean", "DDPG_baseline_v2.baselines.ddpg.util.mpi_mean", "sorted", "DDPG_baseline_v2.baselines.logger.dump_tabular", "DDPG_baseline_v2.baselines.logger.info", "DDPG_baseline_v2.baselines.logger.get_dir", "numpy.abs", "DDPG_baseline_v2.baselines.logger.info", "DDPG_baseline_v2.baselines.ddpg.memory.load_from_geppg", "DDPG_baseline_v2.baselines.logger.info", "DDPG_baseline_v2.baselines.ddpg.memory.load_from_cedric", "DDPG_baseline_v2.baselines.logger.info", "DDPG_baseline_v2.baselines.ddpg.ddpg.DDPG.store_transition", "training.train", "action_noise.adapt", "print", "time.time", "time.time", "agent.get_stats.keys", "DDPG_baseline_v2.baselines.ddpg.util.mpi_mean", "numpy.mean", "DDPG_baseline_v2.baselines.ddpg.util.mpi_mean", "DDPG_baseline_v2.baselines.ddpg.util.mpi_mean", "DDPG_baseline_v2.baselines.ddpg.util.mpi_mean", "DDPG_baseline_v2.baselines.ddpg.util.mpi_mean", "DDPG_baseline_v2.baselines.ddpg.util.mpi_mean", "DDPG_baseline_v2.baselines.ddpg.util.mpi_mean", "DDPG_baseline_v2.baselines.ddpg.util.mpi_mean", "combined_stats.keys", "DDPG_baseline_v2.baselines.logger.record_tabular", "hasattr", "numpy.array", "numpy.array", "numpy.array", "training.rollout", "numpy.mean", "len", "float", "float", "hasattr", "str", "open", "pickle.dump", "open", "pickle.dump", "os.path.join", "env.get_state", "os.path.join", "eval_env.get_state"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.info", "home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.info", "home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.info", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.single_threaded_session", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.initialize", "home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.info", "home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.training.evaluate", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.ddpg.DDPG.get_stats", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.util.mpi_mean", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.util.mpi_mean", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.util.mpi_mean", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.util.mpi_sum", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.util.mpi_mean", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.util.mpi_std", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.util.mpi_mean", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.util.mpi_mean", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.util.mpi_mean", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.util.mpi_mean", "home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.info", "home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.get_dir", "home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.info", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.load_from_geppg", "home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.info", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.load_from_cedric", "home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.info", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.ddpg.DDPG.store_transition", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.training.train", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.noise.DecreasingOrnsteinUhlenbeckActionNoise.adapt", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.util.mpi_mean", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.mean", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.util.mpi_mean", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.util.mpi_mean", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.util.mpi_mean", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.util.mpi_mean", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.util.mpi_mean", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.util.mpi_mean", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.util.mpi_mean", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.training.rollout", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.mean", "home.repos.pwc.inspect_result.flowersteam_geppg.common.misc_util.SimpleMonitor.get_state", "home.repos.pwc.inspect_result.flowersteam_geppg.common.misc_util.SimpleMonitor.get_state"], ["def", "run_agent", "(", "env", ",", "nb_epochs", ",", "nb_epoch_cycles", ",", "render_eval", ",", "reward_scale", ",", "render", ",", "param_noise", ",", "actor", ",", "critic", ",", "\n", "normalize_returns", ",", "normalize_observations", ",", "critic_l2_reg", ",", "actor_lr", ",", "critic_lr", ",", "action_noise", ",", "\n", "popart", ",", "gamma", ",", "clip_norm", ",", "nb_train_steps", ",", "nb_rollout_steps", ",", "nb_eval_steps", ",", "batch_size", ",", "memory", ",", "study", ",", "\n", "buffer_location", ",", "trial_id", ",", "data_path", ",", "nb_eval_episodes", ",", "tau", "=", "0.01", ",", "eval_env", "=", "None", ",", "param_noise_adaption_interval", "=", "50", ",", "\n", "gep_memory", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "rank", "=", "MPI", ".", "COMM_WORLD", ".", "Get_rank", "(", ")", "\n", "\n", "assert", "(", "np", ".", "abs", "(", "env", ".", "action_space", ".", "low", ")", "==", "env", ".", "action_space", ".", "high", ")", ".", "all", "(", ")", "# we assume symmetric actions.", "\n", "max_action", "=", "env", ".", "action_space", ".", "high", "\n", "logger", ".", "info", "(", "'scaling actions by {} before executing in env'", ".", "format", "(", "max_action", ")", ")", "\n", "agent", "=", "DDPG", "(", "actor", ",", "critic", ",", "memory", ",", "env", ".", "observation_space", ".", "shape", ",", "env", ".", "action_space", ".", "shape", ",", "\n", "gamma", "=", "gamma", ",", "tau", "=", "tau", ",", "normalize_returns", "=", "normalize_returns", ",", "normalize_observations", "=", "normalize_observations", ",", "\n", "batch_size", "=", "batch_size", ",", "action_noise", "=", "action_noise", ",", "param_noise", "=", "param_noise", ",", "critic_l2_reg", "=", "critic_l2_reg", ",", "\n", "actor_lr", "=", "actor_lr", ",", "critic_lr", "=", "critic_lr", ",", "enable_popart", "=", "popart", ",", "clip_norm", "=", "clip_norm", ",", "\n", "reward_scale", "=", "reward_scale", ")", "\n", "logger", ".", "info", "(", "'Using agent with the following configuration:'", ")", "\n", "logger", ".", "info", "(", "str", "(", "agent", ".", "__dict__", ".", "items", "(", ")", ")", ")", "\n", "\n", "# Set up logging stuff only for a single worker.", "\n", "if", "rank", "==", "0", ":", "\n", "        ", "saver", "=", "tf", ".", "train", ".", "Saver", "(", ")", "\n", "", "else", ":", "\n", "        ", "saver", "=", "None", "\n", "\n", "", "episode", "=", "0", "\n", "best_score", "=", "-", "1000", "# initialize to negative values to keep track of best score", "\n", "eval_episode_rewards_history", "=", "deque", "(", "maxlen", "=", "100", ")", "\n", "episode_rewards_history", "=", "deque", "(", "maxlen", "=", "100", ")", "\n", "saver_best", "=", "tf", ".", "train", ".", "Saver", "(", "max_to_keep", "=", "1", ")", "\n", "\n", "with", "U", ".", "single_threaded_session", "(", ")", "as", "sess", ":", "\n", "# Prepare everything.", "\n", "        ", "agent", ".", "initialize", "(", "sess", ")", "\n", "sess", ".", "graph", ".", "finalize", "(", ")", "\n", "\n", "size_buffer", "=", "0", "\n", "# load buffer if necessary", "\n", "if", "study", "==", "'GEP_PG'", "or", "study", "==", "'GEP_FPG'", ":", "\n", "            ", "if", "study", "==", "'GEP_FPG'", ":", "\n", "                ", "logger", ".", "info", "(", "'This is a frozen buffer study'", ")", "\n", "", "if", "gep_memory", "is", "not", "None", ":", "\n", "                ", "buffer_gep", "=", "load_from_geppg", "(", "gep_memory", ")", "\n", "del", "gep_memory", "\n", "logger", ".", "info", "(", "'Load buffer from gep memory'", ")", "\n", "", "else", ":", "\n", "                ", "assert", "buffer_location", "!=", "''", ",", "'study is '", "+", "study", "+", "', a buffer location should be provided.'", "\n", "# fill replay buffer", "\n", "buffer_gep", "=", "load_from_cedric", "(", "filename", "=", "buffer_location", ")", "\n", "logger", ".", "info", "(", "'Load buffer from file'", ")", "\n", "\n", "", "size_buffer", "=", "len", "(", "buffer_gep", "[", "0", "]", ")", "\n", "for", "i", "in", "range", "(", "size_buffer", ")", ":", "\n", "                ", "agent", ".", "store_transition", "(", "np", ".", "array", "(", "buffer_gep", "[", "0", "]", "[", "i", "]", ")", ",", "np", ".", "array", "(", "buffer_gep", "[", "1", "]", "[", "i", "]", ")", ",", "\n", "buffer_gep", "[", "2", "]", "[", "i", "]", "[", "0", "]", ",", "np", ".", "array", "(", "buffer_gep", "[", "3", "]", "[", "i", "]", ")", ",", "buffer_gep", "[", "4", "]", "[", "i", "]", ")", "\n", "", "logger", ".", "info", "(", "'Buffer of size '", "+", "str", "(", "size_buffer", ")", "+", "' has been loaded'", ")", "\n", "\n", "", "agent", ".", "reset", "(", ")", "\n", "obs", "=", "env", ".", "reset", "(", ")", "\n", "if", "eval_env", "is", "not", "None", ":", "\n", "            ", "eval_obs", "=", "eval_env", ".", "reset", "(", ")", "\n", "", "done", "=", "False", "\n", "episode_reward", "=", "0.", "\n", "episode_step", "=", "0", "\n", "episodes", "=", "0", "\n", "t", "=", "size_buffer", "# t statt at size buffer if a buffer is provided, 0 otherwise", "\n", "\n", "epoch", "=", "0", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "epoch_episode_rewards", "=", "[", "]", "\n", "epoch_episode_steps", "=", "[", "]", "\n", "epoch_episode_eval_rewards", "=", "[", "]", "\n", "epoch_episode_eval_steps", "=", "[", "]", "\n", "epoch_start_time", "=", "time", ".", "time", "(", ")", "\n", "epoch_actions", "=", "[", "]", "\n", "epoch_qs", "=", "[", "]", "\n", "epoch_episodes", "=", "0", "\n", "\n", "max_steps", "=", "nb_rollout_steps", "*", "nb_epoch_cycles", "*", "nb_epochs", "\n", "\n", "for", "epoch", "in", "range", "(", "nb_epochs", ")", ":", "\n", "            ", "if", "t", ">=", "max_steps", ":", "\n", "                ", "break", "\n", "", "for", "cycle", "in", "range", "(", "nb_epoch_cycles", ")", ":", "\n", "                ", "if", "t", ">=", "max_steps", ":", "\n", "                    ", "break", "\n", "# Perform rollouts.", "\n", "", "if", "study", "!=", "'GEP_FPG'", ":", "\n", "                    ", "agent", ",", "env", ",", "episode_reward", ",", "episode_step", ",", "epoch_actions", ",", "epoch_qs", ",", "epoch_episode_rewards", ",", "episode_rewards_history", ",", "epoch_episode_steps", ",", "epoch_episodes", ",", "episodes", ",", "t", "=", "rollout", "(", "nb_rollout_steps", ",", "agent", ",", "obs", ",", "rank", ",", "env", ",", "max_action", ",", "\n", "episode_reward", ",", "episode_step", ",", "epoch_actions", ",", "\n", "epoch_qs", ",", "epoch_episode_rewards", ",", "episode_rewards_history", ",", "\n", "epoch_episode_steps", ",", "epoch_episodes", ",", "episodes", ",", "render", ",", "t", ",", "epoch", "\n", ")", "\n", "# Train.", "\n", "", "agent", ",", "epoch_actor_losses", ",", "epoch_critic_losses", ",", "epoch_adaptive_distances", "=", "train", "(", "nb_train_steps", ",", "memory", ",", "\n", "batch_size", ",", "t", ",", "\n", "param_noise_adaption_interval", ",", "agent", "\n", ")", "\n", "# Evaluate.", "\n", "", "agent", ",", "eval_episode_rewards", ",", "eval_qs", ",", "best_score", ",", "eval_obs", ",", "eval_env", ",", "eval_episode_rewards_history", "=", "evaluate", "(", "agent", ",", "eval_obs", ",", "max_action", ",", "eval_env", ",", "render_eval", ",", "sess", ",", "t", ",", "eval_episode_rewards_history", ",", "\n", "best_score", ",", "data_path", ",", "saver_best", ",", "nb_eval_episodes", ",", "study", ",", "max_steps", ",", "size_buffer", "\n", ")", "\n", "\n", "# update decreasing_ou if necessary", "\n", "try", ":", "\n", "                ", "action_noise", ".", "adapt", "(", ")", "\n", "print", "(", "action_noise", ".", "sigma", ")", "\n", "", "except", ":", "\n", "                ", "pass", "\n", "\n", "# Log stats.", "\n", "", "epoch_train_duration", "=", "time", ".", "time", "(", ")", "-", "epoch_start_time", "\n", "duration", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "stats", "=", "agent", ".", "get_stats", "(", ")", "\n", "combined_stats", "=", "{", "}", "\n", "for", "key", "in", "sorted", "(", "stats", ".", "keys", "(", ")", ")", ":", "\n", "                ", "combined_stats", "[", "key", "]", "=", "mpi_mean", "(", "stats", "[", "key", "]", ")", "\n", "\n", "# Added statistics", "\n", "\n", "# Rollout statistics.", "\n", "", "combined_stats", "[", "'rollout/return'", "]", "=", "mpi_mean", "(", "epoch_episode_rewards", ")", "\n", "combined_stats", "[", "'rollout/return_history'", "]", "=", "mpi_mean", "(", "np", ".", "mean", "(", "episode_rewards_history", ")", ")", "\n", "combined_stats", "[", "'rollout/episode_steps'", "]", "=", "mpi_mean", "(", "epoch_episode_steps", ")", "\n", "combined_stats", "[", "'rollout/episodes'", "]", "=", "mpi_sum", "(", "epoch_episodes", ")", "\n", "combined_stats", "[", "'rollout/actions_mean'", "]", "=", "mpi_mean", "(", "epoch_actions", ")", "\n", "combined_stats", "[", "'rollout/actions_std'", "]", "=", "mpi_std", "(", "epoch_actions", ")", "\n", "combined_stats", "[", "'rollout/Q_mean'", "]", "=", "mpi_mean", "(", "epoch_qs", ")", "\n", "\n", "# Train statistics.", "\n", "try", ":", "\n", "                ", "combined_stats", "[", "'train/loss_actor'", "]", "=", "mpi_mean", "(", "epoch_actor_losses", ")", "\n", "combined_stats", "[", "'train/loss_critic'", "]", "=", "mpi_mean", "(", "epoch_critic_losses", ")", "\n", "combined_stats", "[", "'train/param_noise_distance'", "]", "=", "mpi_mean", "(", "epoch_adaptive_distances", ")", "\n", "", "except", ":", "\n", "                ", "pass", "\n", "\n", "# Evaluation statistics.", "\n", "", "if", "eval_env", "is", "not", "None", ":", "\n", "                ", "combined_stats", "[", "'eval/return'", "]", "=", "mpi_mean", "(", "eval_episode_rewards", ")", "\n", "combined_stats", "[", "'eval/return_history'", "]", "=", "mpi_mean", "(", "np", ".", "mean", "(", "eval_episode_rewards_history", ")", ")", "\n", "combined_stats", "[", "'eval/Q'", "]", "=", "mpi_mean", "(", "eval_qs", ")", "\n", "combined_stats", "[", "'eval/episodes'", "]", "=", "mpi_mean", "(", "len", "(", "eval_episode_rewards", ")", ")", "\n", "\n", "# Total statistics.", "\n", "", "combined_stats", "[", "'total/duration'", "]", "=", "mpi_mean", "(", "duration", ")", "\n", "combined_stats", "[", "'total/steps_per_second'", "]", "=", "mpi_mean", "(", "float", "(", "t", ")", "/", "float", "(", "duration", ")", ")", "\n", "combined_stats", "[", "'total/episodes'", "]", "=", "mpi_mean", "(", "episodes", ")", "\n", "combined_stats", "[", "'total/epochs'", "]", "=", "epoch", "+", "1", "\n", "combined_stats", "[", "'total/steps'", "]", "=", "t", "\n", "\n", "for", "key", "in", "sorted", "(", "combined_stats", ".", "keys", "(", ")", ")", ":", "\n", "                ", "logger", ".", "record_tabular", "(", "key", ",", "combined_stats", "[", "key", "]", ")", "\n", "", "logger", ".", "dump_tabular", "(", ")", "\n", "logger", ".", "info", "(", "''", ")", "\n", "logdir", "=", "logger", ".", "get_dir", "(", ")", "\n", "if", "rank", "==", "0", "and", "logdir", ":", "\n", "                ", "if", "hasattr", "(", "env", ",", "'get_state'", ")", ":", "\n", "                    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "logdir", ",", "'env_state.pkl'", ")", ",", "'wb'", ")", "as", "f", ":", "\n", "                        ", "pickle", ".", "dump", "(", "env", ".", "get_state", "(", ")", ",", "f", ")", "\n", "", "", "if", "eval_env", "and", "hasattr", "(", "eval_env", ",", "'get_state'", ")", ":", "\n", "                    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "logdir", ",", "'eval_env_state.pkl'", ")", ",", "'wb'", ")", "as", "f", ":", "\n", "                        ", "pickle", ".", "dump", "(", "eval_env", ".", "get_state", "(", ")", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.training.rollout": [[189, 231], ["range", "agent.pi", "env.step", "epoch_actions.append", "epoch_qs.append", "agent.store_transition", "env.render", "env.render", "epoch_episode_rewards.append", "episode_rewards_history.append", "epoch_episode_steps.append", "agent.reset", "env.reset"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.ddpg.DDPG.pi", "home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.__init__.VecEnv.step", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.ddpg.DDPG.store_transition", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.__init__.VecEnv.reset"], ["", "", "", "", "", "", "def", "rollout", "(", "nb_rollout_steps", ",", "agent", ",", "obs", ",", "rank", ",", "env", ",", "max_action", ",", "episode_reward", ",", "\n", "episode_step", ",", "epoch_actions", ",", "epoch_qs", ",", "epoch_episode_rewards", ",", "episode_rewards_history", ",", "\n", "epoch_episode_steps", ",", "epoch_episodes", ",", "episodes", ",", "render", ",", "t", ",", "epoch", ")", ":", "\n", "\n", "    ", "for", "t_rollout", "in", "range", "(", "nb_rollout_steps", ")", ":", "\n", "# Predict next action.", "\n", "        ", "action", ",", "q", "=", "agent", ".", "pi", "(", "obs", ",", "apply_noise", "=", "True", ",", "compute_Q", "=", "True", ")", "\n", "assert", "action", ".", "shape", "==", "env", ".", "action_space", ".", "shape", "\n", "\n", "# Execute next action.", "\n", "if", "rank", "==", "0", "and", "render", ":", "\n", "            ", "env", ".", "render", "(", ")", "\n", "", "assert", "max_action", ".", "shape", "==", "action", ".", "shape", "\n", "new_obs", ",", "r", ",", "done", ",", "info", "=", "env", ".", "step", "(", "max_action", "*", "action", ")", "# scale for execution in env (as far as DDPG is concerned, every action is in [-1, 1])", "\n", "t", "+=", "1", "\n", "if", "rank", "==", "0", "and", "render", ":", "\n", "            ", "env", ".", "render", "(", ")", "\n", "", "episode_reward", "+=", "r", "\n", "episode_step", "+=", "1", "\n", "#print (\"rollout episode_step : \", episode_step, \" t:\", t)", "\n", "\n", "# Book-keeping.", "\n", "epoch_actions", ".", "append", "(", "action", ")", "\n", "epoch_qs", ".", "append", "(", "q", ")", "\n", "agent", ".", "store_transition", "(", "obs", ",", "action", ",", "r", ",", "new_obs", ",", "done", ")", "\n", "obs", "=", "new_obs", "\n", "\n", "if", "done", ":", "\n", "# Episode done.", "\n", "            ", "epoch_episode_rewards", ".", "append", "(", "episode_reward", ")", "\n", "episode_rewards_history", ".", "append", "(", "episode_reward", ")", "\n", "epoch_episode_steps", ".", "append", "(", "episode_step", ")", "\n", "episode_reward", "=", "0.", "\n", "episode_step", "=", "0", "\n", "epoch_episodes", "+=", "1", "\n", "episodes", "+=", "1", "\n", "\n", "agent", ".", "reset", "(", ")", "\n", "obs", "=", "env", ".", "reset", "(", ")", "\n", "\n", "", "", "return", "agent", ",", "env", ",", "episode_reward", ",", "episode_step", ",", "epoch_actions", ",", "epoch_qs", ",", "epoch_episode_rewards", ",", "episode_rewards_history", ",", "epoch_episode_steps", ",", "epoch_episodes", ",", "episodes", ",", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.training.train": [[233, 249], ["range", "agent.train", "epoch_critic_losses.append", "epoch_actor_losses.append", "agent.update_target_net", "agent.adapt_param_noise", "epoch_adaptive_distances.append"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.training.train", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.ddpg.DDPG.update_target_net", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.ddpg.DDPG.adapt_param_noise", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append"], ["", "def", "train", "(", "nb_train_steps", ",", "memory", ",", "batch_size", ",", "t", ",", "param_noise_adaption_interval", ",", "agent", ")", ":", "\n", "\n", "    ", "epoch_actor_losses", "=", "[", "]", "\n", "epoch_critic_losses", "=", "[", "]", "\n", "epoch_adaptive_distances", "=", "[", "]", "\n", "for", "t_train", "in", "range", "(", "nb_train_steps", ")", ":", "\n", "# Adapt param noise, if necessary.", "\n", "        ", "if", "memory", ".", "nb_entries", ">=", "batch_size", "and", "t", "%", "param_noise_adaption_interval", "==", "0", ":", "\n", "            ", "distance", "=", "agent", ".", "adapt_param_noise", "(", ")", "\n", "epoch_adaptive_distances", ".", "append", "(", "distance", ")", "\n", "\n", "", "cl", ",", "al", "=", "agent", ".", "train", "(", ")", "\n", "epoch_critic_losses", ".", "append", "(", "cl", ")", "\n", "epoch_actor_losses", ".", "append", "(", "al", ")", "\n", "agent", ".", "update_target_net", "(", ")", "\n", "", "return", "agent", ",", "epoch_actor_losses", ",", "epoch_critic_losses", ",", "epoch_adaptive_distances", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.training.evaluate": [[251, 286], ["range", "DDPG_baseline_v2.baselines.ddpg.util.mpi_mean", "DDPG_baseline_v2.baselines.ddpg.util.mpi_mean", "os.listdir", "saver_best.save", "agent.pi", "eval_env.step", "eval_qs.append", "os.path.exists", "os.mkdir", "os.mkdir", "os.path.isfile", "eval_env.render", "eval_env.reset", "eval_episode_rewards.append", "eval_episode_rewards_history.append", "os.remove", "str", "int", "str"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.util.mpi_mean", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.util.mpi_mean", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.ddpg.DDPG.pi", "home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.__init__.VecEnv.step", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.common.azure_utils.Container.exists", "home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append"], ["", "def", "evaluate", "(", "agent", ",", "eval_obs", ",", "max_action", ",", "eval_env", ",", "render_eval", ",", "sess", ",", "t", ",", "eval_episode_rewards_history", ",", "\n", "best_score", ",", "data_path", ",", "saver_best", ",", "nb_eval_episodes", ",", "study", ",", "max_steps", ",", "size_buffer", ")", ":", "\n", "\n", "    ", "eval_episode_rewards", "=", "[", "]", "\n", "eval_qs", "=", "[", "]", "\n", "if", "eval_env", "is", "not", "None", ":", "\n", "        ", "eval_episode_reward", "=", "0.", "\n", "for", "i", "in", "range", "(", "nb_eval_episodes", ")", ":", "# 5 rollouts", "\n", "            ", "while", "True", ":", "\n", "                ", "eval_action", ",", "eval_q", "=", "agent", ".", "pi", "(", "eval_obs", ",", "apply_noise", "=", "False", ",", "compute_Q", "=", "True", ")", "\n", "eval_obs", ",", "eval_r", ",", "eval_done", ",", "eval_info", "=", "eval_env", ".", "step", "(", "max_action", "*", "eval_action", ")", "# scale for execution in env (as far as DDPG is concerned, every action is in [-1, 1])", "\n", "if", "render_eval", ":", "\n", "                    ", "eval_env", ".", "render", "(", ")", "\n", "", "eval_episode_reward", "+=", "eval_r", "\n", "eval_qs", ".", "append", "(", "eval_q", ")", "\n", "# print(\"evaluate eval_done : \", eval_done, \" eval_episode_reward:\", eval_episode_reward)", "\n", "if", "eval_done", ":", "\n", "                    ", "eval_obs", "=", "eval_env", ".", "reset", "(", ")", "\n", "eval_episode_rewards", ".", "append", "(", "eval_episode_reward", ")", "\n", "eval_episode_rewards_history", ".", "append", "(", "eval_episode_reward", ")", "\n", "eval_episode_reward", "=", "0.", "\n", "break", "\n", "", "", "", "if", "mpi_mean", "(", "eval_episode_rewards", ")", ">", "best_score", ":", "\n", "            ", "best_score", "=", "mpi_mean", "(", "eval_episode_rewards", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "data_path", "+", "'tf_save/'", ")", ":", "\n", "                ", "os", ".", "mkdir", "(", "data_path", "+", "'tf_save/'", ")", "\n", "os", ".", "mkdir", "(", "data_path", "+", "'tf_save/'", "+", "'best1_5M/'", ")", "# optional, to save GEP data at 1.5M", "\n", "", "for", "file", "in", "os", ".", "listdir", "(", "data_path", "+", "'tf_save/'", ")", ":", "\n", "                ", "if", "path", ".", "isfile", "(", "data_path", "+", "'tf_save/'", "+", "file", ")", ":", "# optional, to save GEP data at 1.5M", "\n", "                    ", "os", ".", "remove", "(", "data_path", "+", "'tf_save/'", "+", "file", ")", "\n", "", "", "saver_best", ".", "save", "(", "sess", ",", "data_path", "+", "'tf_save/'", "+", "'best_actor_step'", "+", "str", "(", "t", ")", "+", "'_score'", "+", "str", "(", "int", "(", "best_score", ")", ")", ")", "\n", "\n", "\n", "", "", "return", "agent", ",", "eval_episode_rewards", ",", "eval_qs", ",", "best_score", ",", "eval_obs", ",", "eval_env", ",", "eval_episode_rewards_history", "\n", "", ""]], "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.util.reduce_var": [[9, 13], ["tensorflow.reduce_mean", "tensorflow.square", "tensorflow.reduce_mean"], "function", ["None"], ["def", "reduce_var", "(", "x", ",", "axis", "=", "None", ",", "keepdims", "=", "False", ")", ":", "\n", "    ", "m", "=", "tf", ".", "reduce_mean", "(", "x", ",", "axis", "=", "axis", ",", "keep_dims", "=", "True", ")", "\n", "devs_squared", "=", "tf", ".", "square", "(", "x", "-", "m", ")", "\n", "return", "tf", ".", "reduce_mean", "(", "devs_squared", ",", "axis", "=", "axis", ",", "keep_dims", "=", "keepdims", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.util.reduce_std": [[15, 17], ["tensorflow.sqrt", "util.reduce_var"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.util.reduce_var"], ["", "def", "reduce_std", "(", "x", ",", "axis", "=", "None", ",", "keepdims", "=", "False", ")", ":", "\n", "    ", "return", "tf", ".", "sqrt", "(", "reduce_var", "(", "x", ",", "axis", "=", "axis", ",", "keepdims", "=", "keepdims", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.util.mpi_mean": [[19, 25], ["isinstance", "DDPG_baseline_v2.baselines.common.mpi_moments.mpi_moments", "numpy.array"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.mpi_moments.mpi_moments"], ["", "def", "mpi_mean", "(", "value", ")", ":", "\n", "    ", "if", "value", "==", "[", "]", ":", "\n", "        ", "value", "=", "[", "0.", "]", "\n", "", "if", "not", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "        ", "value", "=", "[", "value", "]", "\n", "", "return", "mpi_moments", "(", "np", ".", "array", "(", "value", ")", ")", "[", "0", "]", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.util.mpi_std": [[27, 33], ["isinstance", "DDPG_baseline_v2.baselines.common.mpi_moments.mpi_moments", "numpy.array"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.mpi_moments.mpi_moments"], ["", "def", "mpi_std", "(", "value", ")", ":", "\n", "    ", "if", "value", "==", "[", "]", ":", "\n", "        ", "value", "=", "[", "0.", "]", "\n", "", "if", "not", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "        ", "value", "=", "[", "value", "]", "\n", "", "return", "mpi_moments", "(", "np", ".", "array", "(", "value", ")", ")", "[", "1", "]", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.util.mpi_max": [[35, 40], ["numpy.zeros", "numpy.max().astype", "mpi4py.MPI.COMM_WORLD.Reduce", "numpy.max"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.max"], ["", "def", "mpi_max", "(", "value", ")", ":", "\n", "    ", "global_max", "=", "np", ".", "zeros", "(", "1", ",", "dtype", "=", "'float64'", ")", "\n", "local_max", "=", "np", ".", "max", "(", "value", ")", ".", "astype", "(", "'float64'", ")", "\n", "MPI", ".", "COMM_WORLD", ".", "Reduce", "(", "local_max", ",", "global_max", ",", "op", "=", "MPI", ".", "MAX", ")", "\n", "return", "global_max", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.util.mpi_sum": [[42, 47], ["numpy.zeros", "numpy.sum().astype", "mpi4py.MPI.COMM_WORLD.Reduce", "numpy.sum", "numpy.array"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.sum"], ["", "def", "mpi_sum", "(", "value", ")", ":", "\n", "    ", "global_sum", "=", "np", ".", "zeros", "(", "1", ",", "dtype", "=", "'float64'", ")", "\n", "local_sum", "=", "np", ".", "sum", "(", "np", ".", "array", "(", "value", ")", ")", ".", "astype", "(", "'float64'", ")", "\n", "MPI", ".", "COMM_WORLD", ".", "Reduce", "(", "local_sum", ",", "global_sum", ",", "op", "=", "MPI", ".", "SUM", ")", "\n", "return", "global_sum", "[", "0", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.RingBuffer.__init__": [[7, 12], ["numpy.zeros().astype", "numpy.zeros"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "maxlen", ",", "shape", ",", "dtype", "=", "'float32'", ")", ":", "\n", "        ", "self", ".", "maxlen", "=", "maxlen", "\n", "self", ".", "start", "=", "0", "\n", "self", ".", "length", "=", "0", "\n", "self", ".", "data", "=", "np", ".", "zeros", "(", "(", "maxlen", ",", ")", "+", "shape", ")", ".", "astype", "(", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.RingBuffer.__len__": [[13, 15], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.RingBuffer.__getitem__": [[16, 20], ["KeyError"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "if", "idx", "<", "0", "or", "idx", ">=", "self", ".", "length", ":", "\n", "            ", "raise", "KeyError", "(", ")", "\n", "", "return", "self", ".", "data", "[", "(", "self", ".", "start", "+", "idx", ")", "%", "self", ".", "maxlen", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.RingBuffer.get_batch": [[21, 23], ["None"], "methods", ["None"], ["", "def", "get_batch", "(", "self", ",", "idxs", ")", ":", "\n", "        ", "return", "self", ".", "data", "[", "(", "self", ".", "start", "+", "idxs", ")", "%", "self", ".", "maxlen", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.RingBuffer.append": [[24, 35], ["RuntimeError"], "methods", ["None"], ["", "def", "append", "(", "self", ",", "v", ")", ":", "\n", "        ", "if", "self", ".", "length", "<", "self", ".", "maxlen", ":", "\n", "# We have space, simply increase the length.", "\n", "            ", "self", ".", "length", "+=", "1", "\n", "", "elif", "self", ".", "length", "==", "self", ".", "maxlen", ":", "\n", "# No space, \"remove\" the first item.", "\n", "            ", "self", ".", "start", "=", "(", "self", ".", "start", "+", "1", ")", "%", "self", ".", "maxlen", "\n", "", "else", ":", "\n", "# This should never happen.", "\n", "            ", "raise", "RuntimeError", "(", ")", "\n", "", "self", ".", "data", "[", "(", "self", ".", "start", "+", "self", ".", "length", "-", "1", ")", "%", "self", ".", "maxlen", "]", "=", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.__init__": [[93, 101], ["memory.RingBuffer", "memory.RingBuffer", "memory.RingBuffer", "memory.RingBuffer", "memory.RingBuffer"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "limit", ",", "action_shape", ",", "observation_shape", ")", ":", "\n", "        ", "self", ".", "limit", "=", "limit", "\n", "\n", "self", ".", "observations0", "=", "RingBuffer", "(", "limit", ",", "shape", "=", "observation_shape", ")", "\n", "self", ".", "actions", "=", "RingBuffer", "(", "limit", ",", "shape", "=", "action_shape", ")", "\n", "self", ".", "rewards", "=", "RingBuffer", "(", "limit", ",", "shape", "=", "(", "1", ",", ")", ")", "\n", "self", ".", "terminals1", "=", "RingBuffer", "(", "limit", ",", "shape", "=", "(", "1", ",", ")", ")", "\n", "self", ".", "observations1", "=", "RingBuffer", "(", "limit", ",", "shape", "=", "observation_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.sample": [[102, 120], ["numpy.random.random_integers", "memory.Memory.observations0.get_batch", "memory.Memory.observations1.get_batch", "memory.Memory.actions.get_batch", "memory.Memory.rewards.get_batch", "memory.Memory.terminals1.get_batch", "memory.array_min2d", "memory.array_min2d", "memory.array_min2d", "memory.array_min2d", "memory.array_min2d"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.RingBuffer.get_batch", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.RingBuffer.get_batch", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.RingBuffer.get_batch", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.RingBuffer.get_batch", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.RingBuffer.get_batch", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.array_min2d", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.array_min2d", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.array_min2d", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.array_min2d", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.array_min2d"], ["", "def", "sample", "(", "self", ",", "batch_size", ")", ":", "\n", "# Draw such that we always have a proceeding element.", "\n", "        ", "batch_idxs", "=", "np", ".", "random", ".", "random_integers", "(", "self", ".", "nb_entries", "-", "2", ",", "size", "=", "batch_size", ")", "\n", "\n", "obs0_batch", "=", "self", ".", "observations0", ".", "get_batch", "(", "batch_idxs", ")", "\n", "obs1_batch", "=", "self", ".", "observations1", ".", "get_batch", "(", "batch_idxs", ")", "\n", "action_batch", "=", "self", ".", "actions", ".", "get_batch", "(", "batch_idxs", ")", "\n", "reward_batch", "=", "self", ".", "rewards", ".", "get_batch", "(", "batch_idxs", ")", "\n", "terminal1_batch", "=", "self", ".", "terminals1", ".", "get_batch", "(", "batch_idxs", ")", "\n", "\n", "result", "=", "{", "\n", "'obs0'", ":", "array_min2d", "(", "obs0_batch", ")", ",", "\n", "'obs1'", ":", "array_min2d", "(", "obs1_batch", ")", ",", "\n", "'rewards'", ":", "array_min2d", "(", "reward_batch", ")", ",", "\n", "'actions'", ":", "array_min2d", "(", "action_batch", ")", ",", "\n", "'terminals1'", ":", "array_min2d", "(", "terminal1_batch", ")", ",", "\n", "}", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append": [[121, 130], ["memory.Memory.observations0.append", "memory.Memory.actions.append", "memory.Memory.rewards.append", "memory.Memory.observations1.append", "memory.Memory.terminals1.append"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append"], ["", "def", "append", "(", "self", ",", "obs0", ",", "action", ",", "reward", ",", "obs1", ",", "terminal1", ",", "training", "=", "True", ")", ":", "\n", "        ", "if", "not", "training", ":", "\n", "            ", "return", "\n", "\n", "", "self", ".", "observations0", ".", "append", "(", "obs0", ")", "\n", "self", ".", "actions", ".", "append", "(", "action", ")", "\n", "self", ".", "rewards", ".", "append", "(", "reward", ")", "\n", "self", ".", "observations1", ".", "append", "(", "obs1", ")", "\n", "self", ".", "terminals1", ".", "append", "(", "terminal1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.nb_entries": [[131, 134], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "nb_entries", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "observations0", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.array_min2d": [[37, 42], ["numpy.array", "np.array.reshape"], "function", ["None"], ["", "", "def", "array_min2d", "(", "x", ")", ":", "\n", "    ", "x", "=", "np", ".", "array", "(", "x", ")", "\n", "if", "x", ".", "ndim", ">=", "2", ":", "\n", "        ", "return", "x", "\n", "", "return", "x", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.load_from_cedric": [[43, 59], ["open", "pickle.load", "range", "len", "range", "len", "buffer_baseline[].append", "buffer_baseline[].append", "buffer_baseline[].append", "buffer_baseline[].append", "buffer_baseline[].append"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append"], ["", "def", "load_from_cedric", "(", "filename", ")", ":", "\n", "    ", "\"\"\"\n    used to load a replay buffer saved under C\u00e9dric Colas' format into a replay buffer of Pierre Fournier's format\n    \"\"\"", "\n", "with", "open", "(", "filename", ",", "'rb'", ")", "as", "file", ":", "\n", "        ", "buffer", "=", "pickle", ".", "load", "(", "file", ")", "\n", "buffer_baseline", "=", "[", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "buffer", ")", ")", ":", "\n", "            ", "for", "idx", "in", "range", "(", "len", "(", "buffer", "[", "i", "]", ")", ")", ":", "\n", "                ", "buffer_baseline", "[", "0", "]", ".", "append", "(", "buffer", "[", "i", "]", "[", "idx", "]", "[", "'state0'", "]", ")", "\n", "buffer_baseline", "[", "1", "]", ".", "append", "(", "buffer", "[", "i", "]", "[", "idx", "]", "[", "'action'", "]", ")", "\n", "buffer_baseline", "[", "2", "]", ".", "append", "(", "buffer", "[", "i", "]", "[", "idx", "]", "[", "'reward'", "]", ")", "\n", "buffer_baseline", "[", "3", "]", ".", "append", "(", "buffer", "[", "i", "]", "[", "idx", "]", "[", "'state1'", "]", ")", "\n", "buffer_baseline", "[", "4", "]", ".", "append", "(", "buffer", "[", "i", "]", "[", "idx", "]", "[", "'terminal1'", "]", ")", "\n", "\n", "", "", "", "return", "buffer_baseline", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.load_from_geppg": [[60, 91], ["numpy.copy", "numpy.copy", "numpy.copy", "range", "range", "buffer[].append", "buffer[].append", "buffer[].append", "buffer[].append", "numpy.isnan", "buffer[].append", "numpy.all", "buffer[].append", "buffer[].append", "buffer[].append", "numpy.zeros"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append"], ["", "def", "load_from_geppg", "(", "memory", ")", ":", "\n", "    ", "\"\"\"\n    Used to bootstrap a replay buffer from a memory object filled by GEP.\n    \"\"\"", "\n", "buffer", "=", "[", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "]", "\n", "action_seq", "=", "np", ".", "copy", "(", "memory", "[", "'actions'", "]", ")", "\n", "obs_seq", "=", "np", ".", "copy", "(", "memory", "[", "'observations'", "]", ")", "\n", "rew_seq", "=", "np", ".", "copy", "(", "memory", "[", "'rewards'", "]", ")", "\n", "n_eps", "=", "action_seq", ".", "shape", "[", "0", "]", "\n", "n_obs", "=", "obs_seq", ".", "shape", "[", "2", "]", "\n", "assert", "obs_seq", ".", "shape", "[", "0", "]", "==", "n_eps", "\n", "assert", "rew_seq", ".", "shape", "[", "0", "]", "==", "n_eps", "\n", "for", "i", "in", "range", "(", "n_eps", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "action_seq", "[", "i", ",", ":", ",", ":", "]", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "buffer", "[", "0", "]", ".", "append", "(", "obs_seq", "[", "i", ",", "j", ",", ":", "]", ")", "\n", "buffer", "[", "1", "]", ".", "append", "(", "action_seq", "[", "i", ",", "j", ",", ":", "]", ")", "\n", "buffer", "[", "2", "]", ".", "append", "(", "rew_seq", "[", "i", ",", "j", "+", "1", ",", ":", "]", ")", "\n", "buffer", "[", "3", "]", ".", "append", "(", "obs_seq", "[", "i", ",", "j", "+", "1", ",", ":", "]", ")", "\n", "try", ":", "\n", "                ", "if", "np", ".", "isnan", "(", "obs_seq", "[", "i", ",", "j", "+", "2", ",", "0", "]", ")", ":", "\n", "                    ", "buffer", "[", "4", "]", ".", "append", "(", "True", ")", "\n", "break", "\n", "", "elif", "np", ".", "all", "(", "obs_seq", "[", "i", ",", "j", "+", "2", ",", ":", "]", "==", "np", ".", "zeros", "(", "[", "n_obs", "]", ")", ")", ":", "\n", "                    ", "buffer", "[", "4", "]", ".", "append", "(", "True", ")", "\n", "break", "\n", "", "else", ":", "\n", "                    ", "buffer", "[", "4", "]", ".", "append", "(", "False", ")", "\n", "", "", "except", ":", "\n", "                ", "buffer", "[", "4", "]", ".", "append", "(", "True", ")", "\n", "break", "\n", "", "", "", "return", "buffer", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.utils.extract_results_cmc2.extract_performances": [[45, 60], ["open", "json_data.readlines", "json.loads", "eval_rewards.append", "steps.append"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append"], ["def", "extract_performances", "(", "filename", ")", ":", "\n", "\n", "    ", "with", "open", "(", "filename", ")", "as", "json_data", ":", "\n", "        ", "lines", "=", "json_data", ".", "readlines", "(", ")", "\n", "", "eval_rewards", "=", "[", "0", "]", "\n", "steps", "=", "[", "0", "]", "\n", "score_litt", "=", "0", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "episode_data", "=", "json", ".", "loads", "(", "line", ")", "\n", "if", "'eval/return'", "in", "episode_data", ":", "\n", "            ", "step", "=", "episode_data", "[", "'total/epochs'", "]", "*", "2000", "\n", "perf", "=", "episode_data", "[", "'eval/return'", "]", "\n", "eval_rewards", ".", "append", "(", "perf", ")", "\n", "steps", ".", "append", "(", "step", ")", "\n", "", "", "return", "steps", ",", "eval_rewards", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.utils.extract_results_cmc2.plot_vs": [[62, 139], ["enumerate", "len", "range", "range", "range", "numpy.array", "range", "print", "matplotlib.figure", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.title", "matplotlib.plot", "matplotlib.fill_between", "matplotlib.plot", "matplotlib.fill_between", "matplotlib.legend", "matplotlib.savefig", "sorted", "numpy.empty", "range", "numpy.zeros", "numpy.nanmean", "numpy.nanmean", "numpy.nanstd", "numpy.nanstd", "numpy.nanstd", "numpy.nanstd", "type", "os.listdir", "len", "print", "extract_results_cmc2.extract_performances", "run[].append", "len", "len", "numpy.nanmedian", "numpy.nanmedian", "str", "numpy.nanstd", "numpy.sqrt", "numpy.nanstd", "numpy.sqrt", "numpy.nanstd", "numpy.sqrt", "numpy.nanstd", "numpy.sqrt", "type", "len", "numpy.nanpercentile", "numpy.nanpercentile", "int", "numpy.nanpercentile", "int", "numpy.nanpercentile", "int", "int"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.scripts.extract_results.extract_performances", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append"], ["", "def", "plot_vs", "(", "data_path", ",", "n1", ",", "n2", ",", "error_type", ",", "main_curve", ")", ":", "\n", "    ", "run", "=", "{", "}", "\n", "run", "[", "'perfs'", "]", "=", "[", "]", "\n", "scores_our", "=", "[", "]", "\n", "for", "i", ",", "trial", "in", "enumerate", "(", "sorted", "(", "os", ".", "listdir", "(", "data_path", ")", ")", ")", ":", "\n", "\n", "        ", "if", "len", "(", "trial", ")", "<", "3", ":", "\n", "            ", "print", "(", "'Extracting: '", ",", "trial", ")", "\n", "filename", "=", "data_path", "+", "trial", "+", "'/progress.json'", "\n", "# print(filename)", "\n", "steps", ",", "eval_rewards", "=", "extract_performances", "(", "filename", ")", "\n", "run", "[", "'perfs'", "]", ".", "append", "(", "eval_rewards", ")", "\n", "\n", "\n", "", "", "n_runs", "=", "len", "(", "run", "[", "'perfs'", "]", ")", "\n", "max_steps", "=", "0", "\n", "for", "i", "in", "range", "(", "n_runs", ")", ":", "\n", "        ", "if", "len", "(", "run", "[", "'perfs'", "]", "[", "i", "]", ")", ">", "max_steps", ":", "\n", "            ", "max_steps", "=", "len", "(", "run", "[", "'perfs'", "]", "[", "i", "]", ")", "\n", "", "", "eval_perfs", "=", "np", ".", "empty", "(", "[", "n_runs", ",", "max_steps", "]", ")", "*", "(", "np", ".", "nan", ")", "\n", "for", "i", "in", "range", "(", "n_runs", ")", ":", "\n", "        ", "eval_perfs", "[", "i", ",", ":", "len", "(", "run", "[", "'perfs'", "]", "[", "i", "]", ")", "]", "=", "run", "[", "'perfs'", "]", "[", "i", "]", "\n", "\n", "", "steps", "=", "range", "(", "0", ",", "max_steps", "*", "2000", ",", "2000", ")", "\n", "inds", "=", "np", ".", "array", "(", "range", "(", "n_runs", ")", ")", "\n", "# np.random.shuffle(inds)", "\n", "\n", "# modify GEP source", "\n", "for", "i", "in", "range", "(", "n1", ",", "n_runs", ")", ":", "\n", "        ", "eval_perfs", "[", "i", ",", "251", ":", "]", "=", "eval_perfs", "[", "i", ",", ":", "750", "]", "\n", "eval_perfs", "[", "i", ",", ":", "251", "]", "=", "np", ".", "zeros", "(", "[", "251", "]", ")", "\n", "\n", "", "print", "(", "inds", ")", "\n", "assert", "n1", "+", "n2", "==", "n_runs", "\n", "if", "main_curve", "==", "'mean'", ":", "\n", "        ", "toPlot_av1", "=", "np", ".", "nanmean", "(", "eval_perfs", "[", ":", "n1", "]", ",", "axis", "=", "0", ")", "\n", "toPlot_av2", "=", "np", ".", "nanmean", "(", "eval_perfs", "[", "inds", "[", "n1", ":", "]", "]", ",", "axis", "=", "0", ")", "\n", "", "elif", "main_curve", "==", "'median'", ":", "\n", "        ", "toPlot_av1", "=", "np", ".", "nanmedian", "(", "eval_perfs", "[", ":", "n1", "]", ",", "axis", "=", "0", ")", "\n", "toPlot_av2", "=", "np", ".", "nanmedian", "(", "eval_perfs", "[", "inds", "[", "n1", ":", "]", "]", ",", "axis", "=", "0", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "if", "error_type", "==", "'std'", ":", "\n", "        ", "toPlot_error1_add", "=", "np", ".", "nanstd", "(", "eval_perfs", "[", ":", "n1", "]", ",", "axis", "=", "0", ")", "\n", "toPlot_error1_sub", "=", "np", ".", "nanstd", "(", "eval_perfs", "[", ":", "n1", "]", ",", "axis", "=", "0", ")", "\n", "toPlot_error2_add", "=", "np", ".", "nanstd", "(", "eval_perfs", "[", "n1", ":", "]", ",", "axis", "=", "0", ")", "\n", "toPlot_error2_sub", "=", "np", ".", "nanstd", "(", "eval_perfs", "[", "n1", ":", "]", ",", "axis", "=", "0", ")", "\n", "", "elif", "error_type", "==", "'sem'", ":", "\n", "        ", "toPlot_error1_add", "=", "np", ".", "nanstd", "(", "eval_perfs", "[", ":", "n1", "]", ",", "axis", "=", "0", ")", "/", "np", ".", "sqrt", "(", "n1", ")", "\n", "toPlot_error1_sub", "=", "np", ".", "nanstd", "(", "eval_perfs", "[", ":", "n1", "]", ",", "axis", "=", "0", ")", "/", "np", ".", "sqrt", "(", "n1", ")", "\n", "toPlot_error2_add", "=", "np", ".", "nanstd", "(", "eval_perfs", "[", "n1", ":", "]", ",", "axis", "=", "0", ")", "/", "np", ".", "sqrt", "(", "n2", ")", "\n", "toPlot_error2_sub", "=", "np", ".", "nanstd", "(", "eval_perfs", "[", "n1", ":", "]", ",", "axis", "=", "0", ")", "/", "np", ".", "sqrt", "(", "n2", ")", "\n", "", "elif", "type", "(", "error_type", ")", "==", "int", ":", "\n", "        ", "assert", "(", "error_type", "<=", "100", "and", "error_type", ">", "0", ")", ",", "'error_type must be between 0 and 100'", "\n", "toPlot_error1_add", "=", "np", ".", "nanpercentile", "(", "eval_perfs", "[", ":", "n1", "]", ",", "int", "(", "100", "-", "(", "100", "-", "error_type", ")", "/", "2", ")", ",", "axis", "=", "0", ")", "-", "toPlot_av1", "\n", "toPlot_error1_sub", "=", "-", "np", ".", "nanpercentile", "(", "eval_perfs", "[", ":", "n1", "]", ",", "int", "(", "(", "100", "-", "error_type", ")", "/", "2", ")", ",", "axis", "=", "0", ")", "+", "toPlot_av1", "\n", "toPlot_error2_add", "=", "np", ".", "nanpercentile", "(", "eval_perfs", "[", "n1", ":", "]", ",", "int", "(", "100", "-", "(", "100", "-", "error_type", ")", "/", "2", ")", ",", "axis", "=", "0", ")", "-", "toPlot_av2", "\n", "toPlot_error2_sub", "=", "-", "np", ".", "nanpercentile", "(", "eval_perfs", "[", "n1", ":", "]", ",", "int", "(", "(", "100", "-", "error_type", ")", "/", "2", ")", ",", "axis", "=", "0", ")", "+", "toPlot_av2", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "if", "type", "(", "error_type", ")", "==", "int", ":", "\n", "        ", "error_type", "=", "str", "(", "error_type", ")", "+", "'%'", "\n", "", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "20", ",", "13", ")", ",", "frameon", "=", "False", ")", "\n", "plt", ".", "xlabel", "(", "\"time steps\"", ")", "\n", "plt", ".", "ylabel", "(", "\"performance\"", ")", "\n", "plt", ".", "title", "(", "\"DDPG vs GEP-DDPG\"", ")", "\n", "\n", "plt", ".", "plot", "(", "steps", ",", "toPlot_av1", ",", "label", "=", "\"label\"", ",", "c", "=", "'#CC0000'", ")", "\n", "plt", ".", "fill_between", "(", "steps", ",", "toPlot_av1", "-", "toPlot_error1_sub", ",", "toPlot_av1", "+", "toPlot_error1_add", ",", "\n", "alpha", "=", "0.5", ",", "edgecolor", "=", "'#FF3333'", ",", "facecolor", "=", "'#FF6666'", ")", "\n", "plt", ".", "plot", "(", "steps", ",", "toPlot_av2", ",", "label", "=", "\"label\"", ",", "c", "=", "'#0066CC'", ")", "\n", "plt", ".", "fill_between", "(", "steps", ",", "toPlot_av2", "-", "toPlot_error2_sub", ",", "toPlot_av2", "+", "toPlot_error2_add", ",", "\n", "alpha", "=", "0.5", ",", "edgecolor", "=", "'#3999FF'", ",", "facecolor", "=", "'#66B2FF'", ")", "\n", "plt", ".", "legend", "(", "[", "'DDPG '", "+", "main_curve", "+", "' ('", "+", "error_type", "+", "')'", ",", "'GEP-DDPG '", "+", "main_curve", "+", "' ('", "+", "error_type", "+", "')'", "]", ",", "loc", "=", "4", ")", "\n", "\n", "plt", ".", "savefig", "(", "data_path", "+", "'DDPG_vs_GEPDDPG_'", "+", "error_type", ",", "bbox_inches", "=", "'tight'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.utils.extract_results_cmc2.compute_stats_vs": [[141, 198], ["enumerate", "len", "range", "range", "numpy.array", "range", "print", "numpy.nanmean", "numpy.nanmean", "scipy.stats.ks_2samp", "scipy.stats.ttest_ind", "numpy.array", "numpy.array", "scipy.stats.ks_2samp", "scipy.stats.ttest_ind", "bootstrapped.bootstrap_ab", "bootstrapped.bootstrap_ab", "numpy.zeros", "numpy.array", "numpy.array", "numpy.array", "numpy.savetxt", "sorted", "numpy.empty", "range", "numpy.zeros", "numpy.sign", "numpy.sign", "numpy.sign", "numpy.sign", "os.listdir", "len", "print", "extract_results_cmc2.extract_performances", "run[].append", "numpy.loadtxt", "scores_our.append", "len", "len", "numpy.sign", "numpy.sign", "len"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.scripts.extract_results.extract_performances", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append"], ["", "def", "compute_stats_vs", "(", "data_path", ",", "n1", ",", "n2", ")", ":", "\n", "    ", "run", "=", "{", "}", "\n", "run", "[", "'perfs'", "]", "=", "[", "]", "\n", "scores_our", "=", "[", "]", "\n", "for", "i", ",", "trial", "in", "enumerate", "(", "sorted", "(", "os", ".", "listdir", "(", "data_path", ")", ")", ")", ":", "\n", "\n", "        ", "if", "len", "(", "trial", ")", "<", "3", ":", "\n", "            ", "print", "(", "'Extracting: '", ",", "trial", ")", "\n", "filename", "=", "data_path", "+", "trial", "+", "'/progress.json'", "\n", "# print(filename)", "\n", "steps", ",", "eval_rewards", "=", "extract_performances", "(", "filename", ")", "\n", "run", "[", "'perfs'", "]", ".", "append", "(", "eval_rewards", ")", "\n", "scores", "=", "np", ".", "loadtxt", "(", "data_path", "+", "trial", "+", "'/scores'", ")", "\n", "scores_our", ".", "append", "(", "scores", "[", "1", ",", "0", "]", ")", "\n", "\n", "", "", "n_runs", "=", "len", "(", "run", "[", "'perfs'", "]", ")", "\n", "assert", "n1", "+", "n2", "==", "n_runs", "\n", "max_steps", "=", "0", "\n", "for", "i", "in", "range", "(", "n_runs", ")", ":", "\n", "        ", "if", "len", "(", "run", "[", "'perfs'", "]", "[", "i", "]", ")", ">", "max_steps", ":", "\n", "            ", "max_steps", "=", "len", "(", "run", "[", "'perfs'", "]", "[", "i", "]", ")", "\n", "", "", "eval_perfs", "=", "np", ".", "empty", "(", "[", "n_runs", ",", "max_steps", "]", ")", "*", "(", "np", ".", "nan", ")", "\n", "for", "i", "in", "range", "(", "n_runs", ")", ":", "\n", "        ", "eval_perfs", "[", "i", ",", ":", "len", "(", "run", "[", "'perfs'", "]", "[", "i", "]", ")", "]", "=", "run", "[", "'perfs'", "]", "[", "i", "]", "\n", "\n", "# steps = steps[:700]", "\n", "", "inds", "=", "np", ".", "array", "(", "range", "(", "n_runs", ")", ")", "\n", "# np.random.shuffle(inds)", "\n", "\n", "# modify GEP source", "\n", "for", "i", "in", "range", "(", "n1", ",", "n2", ")", ":", "\n", "        ", "eval_perfs", "[", "i", ",", "251", ":", "]", "=", "eval_perfs", "[", "i", ",", ":", "750", "]", "\n", "eval_perfs", "[", "i", ",", ":", "251", "]", "=", "np", ".", "zeros", "(", "[", "251", "]", ")", "\n", "\n", "", "print", "(", "inds", ")", "\n", "\n", "# compute statistics", "\n", "data1_litt", "=", "np", ".", "nanmean", "(", "eval_perfs", "[", "inds", "[", ":", "n1", "]", "]", "[", ":", ",", "-", "10", ":", "]", ",", "axis", "=", "1", ")", "\n", "data2_litt", "=", "np", ".", "nanmean", "(", "eval_perfs", "[", "inds", "[", "n1", ":", "]", "]", "[", ":", ",", "-", "10", ":", "]", ",", "axis", "=", "1", ")", "\n", "ks_litt", ",", "p_ks_litt", "=", "ks_2samp", "(", "data1_litt", ",", "data2_litt", ")", "\n", "ttest_litt", ",", "p_ttest_litt", "=", "ttest_ind", "(", "data1_litt", ",", "data2_litt", ",", "equal_var", "=", "False", ")", "\n", "data1_our", "=", "np", ".", "array", "(", "scores_our", "[", ":", "n1", "]", ")", "\n", "data2_our", "=", "np", ".", "array", "(", "scores_our", "[", "n1", ":", "]", ")", "\n", "ks_our", ",", "p_ks_our", "=", "ks_2samp", "(", "data1_our", ",", "data2_our", ")", "\n", "ttest_our", ",", "p_ttest_our", "=", "ttest_ind", "(", "data1_our", ",", "data2_our", ",", "equal_var", "=", "False", ")", "\n", "\n", "# estimation of confidence intervals with bootstrap method, https://github.com/facebookincubator/bootstrapped", "\n", "res_litt", "=", "bs", ".", "bootstrap_ab", "(", "data1_litt", ",", "data2_litt", ",", "bs_stats", ".", "mean", ",", "bs_compare", ".", "difference", ",", "num_iterations", "=", "10000", ")", "\n", "sign_litt", "=", "np", ".", "sign", "(", "res_litt", ".", "upper_bound", ")", "==", "np", ".", "sign", "(", "res_litt", ".", "lower_bound", ")", "\n", "res_our", "=", "bs", ".", "bootstrap_ab", "(", "data1_our", ",", "data2_our", ",", "bs_stats", ".", "mean", ",", "bs_compare", ".", "difference", ",", "num_iterations", "=", "10000", ")", "\n", "sign_our", "=", "np", ".", "sign", "(", "res_our", ".", "upper_bound", ")", "==", "np", ".", "sign", "(", "res_our", ".", "lower_bound", ")", "\n", "\n", "toSave", "=", "np", ".", "zeros", "(", "[", "4", ",", "4", "]", ")", "\n", "toSave", "[", "0", ":", "2", ",", ":", "]", "=", "np", ".", "array", "(", "[", "[", "ks_litt", ",", "p_ks_litt", ",", "ttest_litt", ",", "p_ttest_litt", "]", ",", "[", "ks_our", ",", "p_ks_our", ",", "ttest_our", ",", "p_ttest_our", "]", "]", ")", "\n", "toSave", "[", "2", ",", ":", "]", "=", "np", ".", "array", "(", "[", "res_litt", ".", "value", ",", "res_litt", ".", "lower_bound", ",", "res_litt", ".", "upper_bound", ",", "sign_litt", "*", "np", ".", "sign", "(", "res_litt", ".", "lower_bound", ")", "]", ")", "\n", "toSave", "[", "3", ",", ":", "]", "=", "np", ".", "array", "(", "[", "res_our", ".", "value", ",", "res_our", ".", "lower_bound", ",", "res_our", ".", "upper_bound", ",", "sign_our", "*", "np", ".", "sign", "(", "res_our", ".", "lower_bound", ")", "]", ")", "\n", "np", ".", "savetxt", "(", "data_path", "+", "'stats'", ",", "toSave", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.utils.extract_results_cmc2.plot_test_variability": [[200, 274], ["enumerate", "len", "range", "range", "range", "numpy.array", "numpy.random.shuffle", "print", "matplotlib.figure", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.title", "matplotlib.plot", "matplotlib.fill_between", "matplotlib.plot", "matplotlib.fill_between", "matplotlib.legend", "matplotlib.savefig", "sorted", "numpy.empty", "range", "numpy.nanmean", "numpy.nanmean", "numpy.nanstd", "numpy.nanstd", "numpy.nanstd", "numpy.nanstd", "type", "os.listdir", "len", "print", "extract_results_cmc2.extract_performances", "run[].append", "len", "len", "numpy.nanmedian", "numpy.nanmedian", "str", "str", "numpy.nanstd", "numpy.sqrt", "numpy.nanstd", "numpy.sqrt", "numpy.nanstd", "numpy.sqrt", "numpy.nanstd", "numpy.sqrt", "type", "len", "int", "int", "int", "int", "numpy.nanpercentile", "numpy.nanpercentile", "int", "numpy.nanpercentile", "int", "numpy.nanpercentile", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.dataset.Dataset.shuffle", "home.repos.pwc.inspect_result.flowersteam_geppg.scripts.extract_results.extract_performances", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append"], ["", "def", "plot_test_variability", "(", "data_path", ",", "ind", ",", "error_type", ",", "main_curve", ")", ":", "\n", "    ", "run", "=", "{", "}", "\n", "run", "[", "'perfs'", "]", "=", "[", "]", "\n", "for", "i", ",", "trial", "in", "enumerate", "(", "sorted", "(", "os", ".", "listdir", "(", "data_path", ")", ")", ")", ":", "\n", "\n", "        ", "if", "len", "(", "trial", ")", "<", "3", ":", "\n", "            ", "print", "(", "'Extracting: '", ",", "trial", ")", "\n", "filename", "=", "data_path", "+", "trial", "+", "'/progress.json'", "\n", "# print(filename)", "\n", "steps", ",", "eval_rewards", "=", "extract_performances", "(", "filename", ")", "\n", "run", "[", "'perfs'", "]", ".", "append", "(", "eval_rewards", ")", "\n", "\n", "", "", "n_runs", "=", "len", "(", "run", "[", "'perfs'", "]", ")", "\n", "max_steps", "=", "0", "\n", "for", "i", "in", "range", "(", "n_runs", ")", ":", "\n", "        ", "if", "len", "(", "run", "[", "'perfs'", "]", "[", "i", "]", ")", ">", "max_steps", ":", "\n", "            ", "max_steps", "=", "len", "(", "run", "[", "'perfs'", "]", "[", "i", "]", ")", "\n", "", "", "eval_perfs", "=", "np", ".", "empty", "(", "[", "n_runs", ",", "max_steps", "]", ")", "*", "(", "np", ".", "nan", ")", "\n", "for", "i", "in", "range", "(", "n_runs", ")", ":", "\n", "        ", "eval_perfs", "[", "i", ",", ":", "len", "(", "run", "[", "'perfs'", "]", "[", "i", "]", ")", "]", "=", "run", "[", "'perfs'", "]", "[", "i", "]", "\n", "\n", "", "steps", "=", "range", "(", "0", ",", "max_steps", "*", "2000", ",", "2000", ")", "\n", "\n", "inds", "=", "np", ".", "array", "(", "range", "(", "n_runs", ")", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "inds", ")", "\n", "\n", "print", "(", "inds", ")", "\n", "\n", "if", "main_curve", "==", "'mean'", ":", "\n", "        ", "toPlot_av1", "=", "np", ".", "nanmean", "(", "eval_perfs", "[", "inds", "[", ":", "int", "(", "n_runs", "/", "2", ")", "]", "]", ",", "axis", "=", "0", ")", "\n", "toPlot_av2", "=", "np", ".", "nanmean", "(", "eval_perfs", "[", "inds", "[", "int", "(", "n_runs", "/", "2", ")", ":", "]", "]", ",", "axis", "=", "0", ")", "\n", "", "elif", "main_curve", "==", "'median'", ":", "\n", "        ", "toPlot_av1", "=", "np", ".", "nanmedian", "(", "eval_perfs", "[", "inds", "[", ":", "int", "(", "n_runs", "/", "2", ")", "]", "]", ",", "axis", "=", "0", ")", "\n", "toPlot_av2", "=", "np", ".", "nanmedian", "(", "eval_perfs", "[", "inds", "[", "int", "(", "n_runs", "/", "2", ")", ":", "]", "]", ",", "axis", "=", "0", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "if", "error_type", "==", "'std'", ":", "\n", "        ", "toPlot_error1_add", "=", "np", ".", "nanstd", "(", "eval_perfs", "[", "inds", "[", ":", "int", "(", "n_runs", "/", "2", ")", "]", "]", ",", "axis", "=", "0", ")", "\n", "toPlot_error1_sub", "=", "np", ".", "nanstd", "(", "eval_perfs", "[", "inds", "[", ":", "int", "(", "n_runs", "/", "2", ")", "]", "]", ",", "axis", "=", "0", ")", "\n", "toPlot_error2_add", "=", "np", ".", "nanstd", "(", "eval_perfs", "[", "inds", "[", "int", "(", "n_runs", "/", "2", ")", ":", "]", "]", ",", "axis", "=", "0", ")", "\n", "toPlot_error2_sub", "=", "np", ".", "nanstd", "(", "eval_perfs", "[", "inds", "[", "int", "(", "n_runs", "/", "2", ")", ":", "]", "]", ",", "axis", "=", "0", ")", "\n", "", "elif", "error_type", "==", "'sem'", ":", "\n", "        ", "toPlot_error1_add", "=", "np", ".", "nanstd", "(", "eval_perfs", "[", "inds", "[", ":", "int", "(", "n_runs", "/", "2", ")", "]", "]", ",", "axis", "=", "0", ")", "/", "np", ".", "sqrt", "(", "int", "(", "n_runs", "/", "2", ")", ")", "\n", "toPlot_error1_sub", "=", "np", ".", "nanstd", "(", "eval_perfs", "[", "inds", "[", ":", "int", "(", "n_runs", "/", "2", ")", "]", "]", ",", "axis", "=", "0", ")", "/", "np", ".", "sqrt", "(", "int", "(", "n_runs", "/", "2", ")", ")", "\n", "toPlot_error2_add", "=", "np", ".", "nanstd", "(", "eval_perfs", "[", "inds", "[", "int", "(", "n_runs", "/", "2", ")", ":", "]", "]", ",", "axis", "=", "0", ")", "/", "np", ".", "sqrt", "(", "int", "(", "n_runs", "/", "2", ")", ")", "\n", "toPlot_error2_sub", "=", "np", ".", "nanstd", "(", "eval_perfs", "[", "inds", "[", "int", "(", "n_runs", "/", "2", ")", ":", "]", "]", ",", "axis", "=", "0", ")", "/", "np", ".", "sqrt", "(", "int", "(", "n_runs", "/", "2", ")", ")", "\n", "", "elif", "type", "(", "error_type", ")", "==", "int", ":", "\n", "        ", "assert", "(", "error_type", "<=", "100", "and", "error_type", ">", "0", ")", ",", "'error_type must be between 0 and 100'", "\n", "toPlot_error1_add", "=", "np", ".", "nanpercentile", "(", "eval_perfs", "[", "inds", "[", ":", "int", "(", "n_runs", "/", "2", ")", "]", "]", ",", "int", "(", "100", "-", "(", "100", "-", "error_type", ")", "/", "2", ")", ",", "axis", "=", "0", ")", "-", "toPlot_av1", "\n", "toPlot_error1_sub", "=", "-", "np", ".", "nanpercentile", "(", "eval_perfs", "[", "inds", "[", ":", "int", "(", "n_runs", "/", "2", ")", "]", "]", ",", "int", "(", "(", "100", "-", "error_type", ")", "/", "2", ")", ",", "axis", "=", "0", ")", "+", "toPlot_av1", "\n", "toPlot_error2_add", "=", "np", ".", "nanpercentile", "(", "eval_perfs", "[", "inds", "[", "int", "(", "n_runs", "/", "2", ")", ":", "]", "]", ",", "int", "(", "100", "-", "(", "100", "-", "error_type", ")", "/", "2", ")", ",", "axis", "=", "0", ")", "-", "toPlot_av2", "\n", "toPlot_error2_sub", "=", "-", "np", ".", "nanpercentile", "(", "eval_perfs", "[", "inds", "[", "int", "(", "n_runs", "/", "2", ")", ":", "]", "]", ",", "int", "(", "(", "100", "-", "error_type", ")", "/", "2", ")", ",", "axis", "=", "0", ")", "+", "toPlot_av2", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "if", "type", "(", "error_type", ")", "==", "int", ":", "\n", "        ", "error_type", "=", "str", "(", "error_type", ")", "+", "'%'", "\n", "\n", "", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "20", ",", "13", ")", ",", "frameon", "=", "False", ")", "\n", "plt", ".", "xlabel", "(", "\"time steps\"", ")", "\n", "plt", ".", "ylabel", "(", "\"performance\"", ")", "\n", "plt", ".", "title", "(", "name_algo", "+", "', '", "+", "error_type", ")", "\n", "# plt.plot(steps, toPlot_av1, label=\"label\", c='#CC6600')", "\n", "# plt.fill_between(steps, toPlot_av1 - toPlot_std1, toPlot_av1 + toPlot_std1,", "\n", "#                  alpha=0.5, edgecolor='#FF9933', facecolor='#FFB266')", "\n", "plt", ".", "plot", "(", "steps", ",", "toPlot_av1", ",", "label", "=", "\"label\"", ",", "c", "=", "'#CC0000'", ")", "\n", "plt", ".", "fill_between", "(", "steps", ",", "toPlot_av1", "-", "toPlot_error1_sub", ",", "toPlot_av1", "+", "toPlot_error1_add", ",", "\n", "alpha", "=", "0.5", ",", "edgecolor", "=", "'#FF3333'", ",", "facecolor", "=", "'#FF6666'", ")", "\n", "plt", ".", "plot", "(", "steps", ",", "toPlot_av2", ",", "label", "=", "\"label\"", ",", "c", "=", "'#0066CC'", ")", "\n", "plt", ".", "fill_between", "(", "steps", ",", "toPlot_av2", "-", "toPlot_error2_sub", ",", "toPlot_av2", "+", "toPlot_error2_add", ",", "\n", "alpha", "=", "0.5", ",", "edgecolor", "=", "'#3999FF'", ",", "facecolor", "=", "'#66B2FF'", ")", "\n", "plt", ".", "legend", "(", "[", "'group 1'", ",", "'group 2'", "]", ",", "loc", "=", "4", ")", "\n", "\n", "plt", ".", "savefig", "(", "data_path", "+", "name_run", "+", "'_variability_'", "+", "str", "(", "ind", ")", ",", "bbox_inches", "=", "'tight'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.utils.extract_results_cmc2.plot_all": [[276, 337], ["matplotlib.figure", "enumerate", "matplotlib.savefig", "len", "range", "range", "range", "matplotlib.figure", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.title", "matplotlib.plot", "matplotlib.fill_between", "matplotlib.savefig", "matplotlib.show", "sorted", "numpy.empty", "numpy.nanmean", "numpy.nanstd", "numpy.nanstd", "os.listdir", "len", "print", "print", "extract_results_cmc2.extract_performances", "run[].append", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.title", "matplotlib.plot", "len", "len", "numpy.nanmedian", "numpy.nanstd", "numpy.sqrt", "numpy.nanstd", "numpy.sqrt", "type", "len", "numpy.nanpercentile", "int", "numpy.nanpercentile", "int"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.scripts.extract_results.extract_performances", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append"], ["", "def", "plot_all", "(", "data_path", ",", "error_type", ",", "main_curve", ")", ":", "\n", "    ", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "20", ",", "13", ")", ",", "frameon", "=", "False", ")", "\n", "run", "=", "{", "}", "\n", "run", "[", "'perfs'", "]", "=", "[", "]", "\n", "for", "i", ",", "trial", "in", "enumerate", "(", "sorted", "(", "os", ".", "listdir", "(", "data_path", ")", ")", ")", ":", "\n", "\n", "        ", "if", "len", "(", "trial", ")", "<", "4", ":", "\n", "            ", "print", "(", "'Extracting: '", ",", "trial", ")", "\n", "filename", "=", "data_path", "+", "trial", "+", "'/progress.json'", "\n", "print", "(", "filename", ")", "\n", "steps", ",", "eval_rewards", "=", "extract_performances", "(", "filename", ")", "\n", "run", "[", "'perfs'", "]", ".", "append", "(", "eval_rewards", ")", "\n", "plt", ".", "xlabel", "(", "'steps'", ")", "\n", "plt", ".", "ylabel", "(", "'performance'", ")", "\n", "plt", ".", "title", "(", "name_algo", ")", "\n", "plt", ".", "plot", "(", "steps", ",", "eval_rewards", ")", "\n", "\n", "", "", "plt", ".", "savefig", "(", "data_path", "+", "'all_'", "+", "name_run", "+", "'_runs'", ",", "bbox_inches", "=", "'tight'", ")", "\n", "n_runs", "=", "len", "(", "run", "[", "'perfs'", "]", ")", "\n", "max_steps", "=", "0", "\n", "for", "i", "in", "range", "(", "n_runs", ")", ":", "\n", "        ", "if", "len", "(", "run", "[", "'perfs'", "]", "[", "i", "]", ")", ">", "max_steps", ":", "\n", "            ", "max_steps", "=", "len", "(", "run", "[", "'perfs'", "]", "[", "i", "]", ")", "\n", "", "", "eval_perfs", "=", "np", ".", "empty", "(", "[", "n_runs", ",", "max_steps", "]", ")", "*", "(", "np", ".", "nan", ")", "\n", "for", "i", "in", "range", "(", "n_runs", ")", ":", "\n", "        ", "eval_perfs", "[", "i", ",", ":", "len", "(", "run", "[", "'perfs'", "]", "[", "i", "]", ")", "]", "=", "run", "[", "'perfs'", "]", "[", "i", "]", "\n", "\n", "", "steps", "=", "range", "(", "0", ",", "max_steps", "*", "2000", ",", "2000", ")", "\n", "\n", "if", "main_curve", "==", "'mean'", ":", "\n", "        ", "toPlot_av", "=", "np", ".", "nanmean", "(", "eval_perfs", ",", "axis", "=", "0", ")", "\n", "", "elif", "main_curve", "==", "'median'", ":", "\n", "        ", "toPlot_av", "=", "np", ".", "nanmedian", "(", "eval_perfs", ",", "axis", "=", "0", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "if", "error_type", "==", "'std'", ":", "\n", "        ", "toPlot_error_add", "=", "np", ".", "nanstd", "(", "eval_perfs", ",", "axis", "=", "0", ")", "\n", "toPlot_error_sub", "=", "np", ".", "nanstd", "(", "eval_perfs", ",", "axis", "=", "0", ")", "\n", "", "elif", "error_type", "==", "'sem'", ":", "\n", "        ", "toPlot_error_add", "=", "np", ".", "nanstd", "(", "eval_perfs", ",", "axis", "=", "0", ")", "/", "np", ".", "sqrt", "(", "n_runs", ")", "\n", "toPlot_error_sub", "=", "np", ".", "nanstd", "(", "eval_perfs", ",", "axis", "=", "0", ")", "/", "np", ".", "sqrt", "(", "n_runs", ")", "\n", "", "elif", "type", "(", "error_type", ")", "==", "int", ":", "\n", "        ", "assert", "(", "error_type", "<=", "100", "and", "error_type", ">", "0", ")", ",", "'error_type must be between 0 and 100'", "\n", "toPlot_error_add", "=", "np", ".", "nanpercentile", "(", "eval_perfs", ",", "int", "(", "100", "-", "(", "100", "-", "error_type", ")", "/", "2", ")", ",", "axis", "=", "0", ")", "-", "toPlot_av", "\n", "toPlot_error_sub", "=", "-", "np", ".", "nanpercentile", "(", "eval_perfs", ",", "int", "(", "(", "100", "-", "error_type", ")", "/", "2", ")", ",", "axis", "=", "0", ")", "+", "toPlot_av", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "20", ",", "13", ")", ",", "frameon", "=", "False", ")", "\n", "plt", ".", "xlabel", "(", "\"time steps\"", ")", "\n", "plt", ".", "ylabel", "(", "\"performance\"", ")", "\n", "plt", ".", "title", "(", "name_algo", "+", "' '", "+", "main_curve", "+", "' ('", "+", "error_type", "+", "')'", ")", "\n", "plt", ".", "plot", "(", "steps", ",", "toPlot_av", ",", "label", "=", "\"label\"", ",", "c", "=", "'#0066CC'", ")", "\n", "plt", ".", "fill_between", "(", "steps", ",", "toPlot_av", "-", "toPlot_error_sub", ",", "toPlot_av", "+", "toPlot_error_add", ",", "\n", "alpha", "=", "0.5", ",", "edgecolor", "=", "'#3999FF'", ",", "facecolor", "=", "'#66B2FF'", ")", "\n", "#plt.legend()", "\n", "\n", "plt", ".", "savefig", "(", "data_path", "+", "name_run", "+", "' '", "+", "main_curve", "+", "' ('", "+", "error_type", "+", "')'", ",", "bbox_inches", "=", "'tight'", ")", "\n", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.utils.extract_results_cmc2.compute_scores_all": [[339, 412], ["matplotlib.figure", "enumerate", "sorted", "os.listdir", "numpy.zeros", "print", "print", "extract_results_cmc2.extract_performances", "numpy.array().mean", "numpy.array().std", "numpy.array().min", "numpy.array().max", "os.listdir", "numpy.savetxt", "len", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.zeros", "np.zeros.mean", "np.zeros.std", "np.zeros.min", "np.zeros.max", "tensorflow.Session", "tensorflow.global_variables_initializer", "sess.run", "tensorflow.train.import_meta_graph", "print", "tf.train.import_meta_graph.restore", "tensorflow.get_default_graph", "tf.get_default_graph.get_tensor_by_name", "tf.get_default_graph.get_tensor_by_name", "range", "open", "checkf.read", "s.replace.replace", "tensorflow.train.latest_checkpoint", "sum", "s.replace.replace", "open", "checkf.write", "env.reset", "observations[].squeeze", "sess.run", "actions.append", "env.step", "observations.append", "rewards.append"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.scripts.extract_results.extract_performances", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.mean", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.std", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.min", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.max", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.mean", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.std", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.min", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.max", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.main_config.run", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.sum", "home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.main_config.run", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.__init__.VecEnv.step", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append"], ["", "def", "compute_scores_all", "(", "data_path", ",", "gep", ")", ":", "\n", "    ", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "20", ",", "13", ")", ",", "frameon", "=", "False", ")", "\n", "for", "i", ",", "trial", "in", "enumerate", "(", "sorted", "(", "os", ".", "listdir", "(", "data_path", ")", ")", ")", ":", "\n", "        ", "if", "len", "(", "trial", ")", "<", "3", "and", "trial", "not", "in", "[", "'61'", ",", "'62'", ",", "'63'", ",", "'64'", ",", "'65'", ",", "'66'", ",", "'67'", ",", "'68'", ",", "'69'", ",", "'70'", "]", ":", "\n", "# actor_folder = data_path + trial + '/tf_save/' + 'best1_5M/'", "\n", "# for f in os.listdir(actor_folder):", "\n", "#     os.rename(actor_folder+f, actor_folder+f[:-2])", "\n", "            ", "toSave", "=", "np", ".", "zeros", "(", "[", "2", ",", "4", "]", ")", "\n", "print", "(", "'Computing score: '", ",", "trial", ")", "\n", "filename", "=", "data_path", "+", "trial", "+", "'/progress.json'", "\n", "print", "(", "filename", ")", "\n", "steps", ",", "eval_rewards", "=", "extract_performances", "(", "filename", ")", "\n", "if", "gep", ":", "\n", "                ", "steps", "=", "steps", "[", ":", "750", "]", "\n", "eval_rewards", "=", "eval_rewards", "[", ":", "750", "]", "\n", "actor_folder", "=", "data_path", "+", "trial", "+", "'/tf_save/'", "+", "'best1_5M/'", "\n", "", "else", ":", "\n", "                ", "actor_folder", "=", "data_path", "+", "trial", "+", "'/tf_save/'", "\n", "\n", "", "toSave", "[", "0", ",", "0", "]", "=", "np", ".", "array", "(", "eval_rewards", "[", "-", "10", ":", "]", ")", ".", "mean", "(", ")", "\n", "toSave", "[", "0", ",", "1", "]", "=", "np", ".", "array", "(", "eval_rewards", "[", "-", "10", ":", "]", ")", ".", "std", "(", ")", "\n", "toSave", "[", "0", ",", "2", "]", "=", "np", ".", "array", "(", "eval_rewards", "[", "-", "10", ":", "]", ")", ".", "min", "(", ")", "\n", "toSave", "[", "0", ",", "3", "]", "=", "np", ".", "array", "(", "eval_rewards", "[", "-", "10", ":", "]", ")", ".", "max", "(", ")", "\n", "\n", "for", "f", "in", "os", ".", "listdir", "(", "actor_folder", ")", ":", "\n", "                ", "if", "'meta'", "in", "f", ":", "\n", "                    ", "n_tests", "=", "100", "\n", "score", "=", "np", ".", "zeros", "(", "[", "n_tests", "]", ")", "\n", "\n", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "                        ", "init", "=", "tf", ".", "global_variables_initializer", "(", ")", "\n", "sess", ".", "run", "(", "init", ")", "\n", "saver", "=", "tf", ".", "train", ".", "import_meta_graph", "(", "actor_folder", "+", "f", ")", "\n", "print", "(", "actor_folder", "+", "f", ")", "\n", "\n", "#replace string in checkpoint file", "\n", "with", "open", "(", "actor_folder", "+", "'/checkpoint'", ",", "'r'", ")", "as", "checkf", ":", "\n", "                            ", "s", "=", "checkf", ".", "read", "(", ")", "\n", "", "if", "'projets'", "in", "s", ":", "\n", "                            ", "old_s", "=", "'/projets/flowers/cedric/ddpg_baseline_openAI_fork/results/HalfCheetah-v1/'", "\n", "s", "=", "s", ".", "replace", "(", "old_s", ",", "data_path", ")", "\n", "if", "gep", ":", "\n", "                                ", "old_s", "=", "'/tf_save'", "\n", "s", "=", "s", ".", "replace", "(", "old_s", ",", "'/tf_save/'", "+", "'best1_5M'", ")", "\n", "", "with", "open", "(", "actor_folder", "+", "'/checkpoint'", ",", "'w'", ")", "as", "checkf", ":", "\n", "                                ", "checkf", ".", "write", "(", "s", ")", "\n", "\n", "", "", "saver", ".", "restore", "(", "sess", ",", "tf", ".", "train", ".", "latest_checkpoint", "(", "actor_folder", ")", ")", "\n", "graph", "=", "tf", ".", "get_default_graph", "(", ")", "\n", "obs0", "=", "graph", ".", "get_tensor_by_name", "(", "\"obs0:0\"", ")", "\n", "actor_tf", "=", "graph", ".", "get_tensor_by_name", "(", "\"actor/Tanh:0\"", ")", "\n", "for", "i", "in", "range", "(", "n_tests", ")", ":", "\n", "                            ", "done", "=", "False", "\n", "observations", "=", "[", "env", ".", "reset", "(", ")", "]", "\n", "actions", "=", "[", "]", "\n", "rewards", "=", "[", "]", "\n", "while", "not", "done", ":", "\n", "                                ", "last_obs", "=", "observations", "[", "-", "1", "]", ".", "squeeze", "(", ")", "\n", "feed_dict", "=", "{", "obs0", ":", "[", "last_obs", "]", "}", "\n", "action", "=", "sess", ".", "run", "(", "actor_tf", ",", "feed_dict", "=", "feed_dict", ")", "\n", "actions", ".", "append", "(", "action", ")", "\n", "# env.render()", "\n", "out", "=", "env", ".", "step", "(", "actions", "[", "-", "1", "]", ")", "\n", "observations", ".", "append", "(", "out", "[", "0", "]", ")", "\n", "rewards", ".", "append", "(", "out", "[", "1", "]", ")", "\n", "done", "=", "out", "[", "2", "]", "\n", "", "score", "[", "i", "]", "=", "sum", "(", "rewards", ")", "\n", "", "", "toSave", "[", "1", ",", "0", "]", "=", "score", ".", "mean", "(", ")", "\n", "toSave", "[", "1", ",", "1", "]", "=", "score", ".", "std", "(", ")", "\n", "toSave", "[", "1", ",", "2", "]", "=", "score", ".", "min", "(", ")", "\n", "toSave", "[", "1", ",", "3", "]", "=", "score", ".", "max", "(", ")", "\n", "break", "\n", "", "", "np", ".", "savetxt", "(", "data_path", "+", "trial", "+", "'/scores'", ",", "toSave", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.utils.extract_results.extract_performances": [[46, 61], ["open", "json_data.readlines", "json.loads", "eval_rewards.append", "steps.append"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append"], ["def", "extract_performances", "(", "filename", ")", ":", "\n", "\n", "    ", "with", "open", "(", "filename", ")", "as", "json_data", ":", "\n", "        ", "lines", "=", "json_data", ".", "readlines", "(", ")", "\n", "", "eval_rewards", "=", "[", "0", "]", "\n", "steps", "=", "[", "0", "]", "\n", "score_litt", "=", "0", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "episode_data", "=", "json", ".", "loads", "(", "line", ")", "\n", "if", "'eval/return'", "in", "episode_data", ":", "\n", "            ", "step", "=", "episode_data", "[", "'total/epochs'", "]", "*", "2000", "\n", "perf", "=", "episode_data", "[", "'eval/return'", "]", "\n", "eval_rewards", ".", "append", "(", "perf", ")", "\n", "steps", ".", "append", "(", "step", ")", "\n", "", "", "return", "steps", ",", "eval_rewards", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.utils.extract_results.plot_vs": [[63, 171], ["enumerate", "len", "range", "range", "range", "numpy.array", "print", "matplotlib.figure", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.title", "matplotlib.plot", "matplotlib.fill_between", "matplotlib.plot", "matplotlib.fill_between", "matplotlib.legend", "matplotlib.savefig", "sorted", "numpy.empty", "range", "range", "numpy.loadtxt", "numpy.concatenate", "numpy.nanmean", "numpy.nanmean", "numpy.nanstd", "numpy.nanstd", "numpy.nanstd", "numpy.nanstd", "type", "matplotlib.plot", "matplotlib.fill_between", "matplotlib.axvline", "legend.append", "os.listdir", "len", "print", "extract_results.extract_performances", "run[].append", "len", "len", "os.path.exists", "numpy.nanmean", "numpy.nanmedian", "numpy.nanmedian", "numpy.nanstd", "str", "numpy.loadtxt", "numpy.zeros", "numpy.zeros", "numpy.nanmedian", "numpy.nanstd", "numpy.sqrt", "numpy.nanstd", "numpy.sqrt", "numpy.nanstd", "numpy.sqrt", "numpy.nanstd", "numpy.sqrt", "type", "len", "numpy.nanstd", "numpy.sqrt", "numpy.nanstd", "numpy.sqrt", "numpy.nanpercentile", "numpy.nanpercentile", "int", "numpy.nanpercentile", "int", "numpy.nanpercentile", "numpy.nanpercentile", "numpy.nanpercentile", "int", "int", "int", "int"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.concatenate", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.scripts.extract_results.extract_performances", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.common.azure_utils.Container.exists"], ["", "def", "plot_vs", "(", "data_path", ",", "n1", ",", "n2", ",", "error_type", ",", "main_curve", ",", "gep", ")", ":", "\n", "    ", "run", "=", "{", "}", "\n", "run", "[", "'perfs'", "]", "=", "[", "]", "\n", "scores_our", "=", "[", "]", "\n", "for", "i", ",", "trial", "in", "enumerate", "(", "sorted", "(", "os", ".", "listdir", "(", "data_path", ")", ")", ")", ":", "\n", "\n", "        ", "if", "len", "(", "trial", ")", "<", "4", ":", "\n", "            ", "print", "(", "'Extracting: '", ",", "trial", ")", "\n", "filename", "=", "data_path", "+", "trial", "+", "'/progress.json'", "\n", "# print(filename)", "\n", "steps", ",", "eval_rewards", "=", "extract_performances", "(", "filename", ")", "\n", "run", "[", "'perfs'", "]", ".", "append", "(", "eval_rewards", ")", "\n", "\n", "\n", "", "", "n_runs", "=", "len", "(", "run", "[", "'perfs'", "]", ")", "\n", "max_steps", "=", "0", "\n", "for", "i", "in", "range", "(", "n_runs", ")", ":", "\n", "        ", "if", "len", "(", "run", "[", "'perfs'", "]", "[", "i", "]", ")", ">", "max_steps", ":", "\n", "            ", "max_steps", "=", "len", "(", "run", "[", "'perfs'", "]", "[", "i", "]", ")", "\n", "", "", "eval_perfs", "=", "np", ".", "empty", "(", "[", "n_runs", ",", "max_steps", "]", ")", "*", "(", "np", ".", "nan", ")", "\n", "for", "i", "in", "range", "(", "n_runs", ")", ":", "\n", "        ", "eval_perfs", "[", "i", ",", ":", "len", "(", "run", "[", "'perfs'", "]", "[", "i", "]", ")", "]", "=", "run", "[", "'perfs'", "]", "[", "i", "]", "\n", "\n", "", "steps", "=", "range", "(", "0", ",", "max_steps", "*", "2000", ",", "2000", ")", "\n", "inds", "=", "np", ".", "array", "(", "range", "(", "n_runs", ")", ")", "\n", "# np.random.shuffle(inds)", "\n", "print", "(", "inds", ")", "\n", "assert", "n1", "+", "n2", "==", "n_runs", "\n", "\n", "if", "gep", ":", "\n", "# modify GEP source", "\n", "        ", "for", "i", "in", "range", "(", "n1", ")", ":", "#,n_runs):", "\n", "            ", "eval_perfs", "[", "i", ",", "251", ":", "]", "=", "eval_perfs", "[", "i", ",", ":", "750", "]", "\n", "if", "os", ".", "path", ".", "exists", "(", "data_path", "+", "'buffer_perfs'", ")", ":", "\n", "                ", "gep_perfs", "=", "np", ".", "loadtxt", "(", "data_path", "+", "'buffer_perfs'", ")", "\n", "eval_perfs", "[", "i", ",", "0", "]", "=", "0", "\n", "eval_perfs", "[", "i", ",", "1", ":", "251", "]", "=", "gep_perfs", "[", "i", "]", "\n", "", "else", ":", "\n", "                ", "eval_perfs", "[", "i", ",", ":", "251", "]", "=", "np", ".", "zeros", "(", "[", "251", "]", ")", "\n", "", "", "eval_perfs_gep", "=", "np", ".", "loadtxt", "(", "'/media/flowers/3C3C66F13C66A59C/data_save/ddpg_study_baseline/data/HalfCheetah-v1/finals/GEP_2M_LinearPolicy/eval_performances_GEP2M_linear_policy'", ")", "\n", "eval_perfs_gep", "=", "np", ".", "concatenate", "(", "[", "np", ".", "zeros", "(", "[", "20", ",", "1", "]", ")", ",", "eval_perfs_gep", "]", ",", "axis", "=", "1", ")", "\n", "\n", "", "if", "main_curve", "==", "'mean'", ":", "\n", "        ", "toPlot_av1", "=", "np", ".", "nanmean", "(", "eval_perfs", "[", ":", "n1", "]", ",", "axis", "=", "0", ")", "\n", "toPlot_av2", "=", "np", ".", "nanmean", "(", "eval_perfs", "[", "inds", "[", "n1", ":", "]", "]", ",", "axis", "=", "0", ")", "\n", "if", "gep", ":", "\n", "            ", "toPlot_av3", "=", "np", ".", "nanmean", "(", "eval_perfs_gep", ",", "axis", "=", "0", ")", "\n", "", "", "elif", "main_curve", "==", "'median'", ":", "\n", "        ", "toPlot_av1", "=", "np", ".", "nanmedian", "(", "eval_perfs", "[", ":", "n1", "]", ",", "axis", "=", "0", ")", "\n", "toPlot_av2", "=", "np", ".", "nanmedian", "(", "eval_perfs", "[", "inds", "[", "n1", ":", "]", "]", ",", "axis", "=", "0", ")", "\n", "if", "gep", ":", "\n", "            ", "toPlot_av3", "=", "np", ".", "nanmedian", "(", "eval_perfs_gep", ",", "axis", "=", "0", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "if", "error_type", "==", "'std'", ":", "\n", "        ", "toPlot_error1_add", "=", "np", ".", "nanstd", "(", "eval_perfs", "[", ":", "n1", "]", ",", "axis", "=", "0", ")", "\n", "toPlot_error1_sub", "=", "np", ".", "nanstd", "(", "eval_perfs", "[", ":", "n1", "]", ",", "axis", "=", "0", ")", "\n", "toPlot_error2_add", "=", "np", ".", "nanstd", "(", "eval_perfs", "[", "n1", ":", "]", ",", "axis", "=", "0", ")", "\n", "toPlot_error2_sub", "=", "np", ".", "nanstd", "(", "eval_perfs", "[", "n1", ":", "]", ",", "axis", "=", "0", ")", "\n", "if", "gep", ":", "\n", "            ", "toPlot_error3_sub", "=", "np", ".", "nanstd", "(", "eval_perfs_gep", ",", "axis", "=", "0", ")", "\n", "", "", "elif", "error_type", "==", "'sem'", ":", "\n", "        ", "toPlot_error1_add", "=", "np", ".", "nanstd", "(", "eval_perfs", "[", ":", "n1", "]", ",", "axis", "=", "0", ")", "/", "np", ".", "sqrt", "(", "n1", ")", "\n", "toPlot_error1_sub", "=", "np", ".", "nanstd", "(", "eval_perfs", "[", ":", "n1", "]", ",", "axis", "=", "0", ")", "/", "np", ".", "sqrt", "(", "n1", ")", "\n", "toPlot_error2_add", "=", "np", ".", "nanstd", "(", "eval_perfs", "[", "n1", ":", "]", ",", "axis", "=", "0", ")", "/", "np", ".", "sqrt", "(", "n2", ")", "\n", "toPlot_error2_sub", "=", "np", ".", "nanstd", "(", "eval_perfs", "[", "n1", ":", "]", ",", "axis", "=", "0", ")", "/", "np", ".", "sqrt", "(", "n2", ")", "\n", "if", "gep", ":", "\n", "            ", "toPlot_error3_sub", "=", "np", ".", "nanstd", "(", "eval_perfs_gep", ",", "axis", "=", "0", ")", "/", "np", ".", "sqrt", "(", "20", ")", "\n", "toPlot_error3_add", "=", "np", ".", "nanstd", "(", "eval_perfs_gep", ",", "axis", "=", "0", ")", "/", "np", ".", "sqrt", "(", "20", ")", "\n", "\n", "", "", "elif", "type", "(", "error_type", ")", "==", "int", ":", "\n", "        ", "assert", "(", "error_type", "<=", "100", "and", "error_type", ">", "0", ")", ",", "'error_type must be between 0 and 100'", "\n", "toPlot_error1_add", "=", "np", ".", "nanpercentile", "(", "eval_perfs", "[", ":", "n1", "]", ",", "int", "(", "100", "-", "(", "100", "-", "error_type", ")", "/", "2", ")", ",", "axis", "=", "0", ")", "-", "toPlot_av1", "\n", "toPlot_error1_sub", "=", "-", "np", ".", "nanpercentile", "(", "eval_perfs", "[", ":", "n1", "]", ",", "int", "(", "(", "100", "-", "error_type", ")", "/", "2", ")", ",", "axis", "=", "0", ")", "+", "toPlot_av1", "\n", "toPlot_error2_add", "=", "np", ".", "nanpercentile", "(", "eval_perfs", "[", "n1", ":", "]", ",", "int", "(", "100", "-", "(", "100", "-", "error_type", ")", "/", "2", ")", ",", "axis", "=", "0", ")", "-", "toPlot_av2", "\n", "toPlot_error2_sub", "=", "-", "np", ".", "nanpercentile", "(", "eval_perfs", "[", "n1", ":", "]", ",", "int", "(", "(", "100", "-", "error_type", ")", "/", "2", ")", ",", "axis", "=", "0", ")", "+", "toPlot_av2", "\n", "if", "gep", ":", "\n", "            ", "toPlot_error3_add", "=", "np", ".", "nanpercentile", "(", "eval_perfs_gep", ",", "int", "(", "100", "-", "(", "100", "-", "error_type", ")", "/", "2", ")", ",", "axis", "=", "0", ")", "-", "toPlot_av3", "\n", "toPlot_error3_sub", "=", "np", ".", "nanpercentile", "(", "eval_perfs_gep", ",", "int", "(", "(", "100", "-", "error_type", ")", "/", "2", ")", ",", "axis", "=", "0", ")", "+", "toPlot_av3", "\n", "\n", "", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "if", "type", "(", "error_type", ")", "==", "int", ":", "\n", "        ", "error_type", "=", "str", "(", "error_type", ")", "+", "'%'", "\n", "", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "20", ",", "13", ")", ",", "frameon", "=", "False", ")", "\n", "plt", ".", "xlabel", "(", "\"time steps\"", ")", "\n", "plt", ".", "ylabel", "(", "\"performance\"", ")", "\n", "plt", ".", "title", "(", "\"DDPG (noisy parameters), GEP-DDPG (noisy parameters) and GEP\"", ")", "\n", "\n", "plt", ".", "plot", "(", "steps", ",", "toPlot_av1", ",", "label", "=", "\"label\"", ",", "c", "=", "'#CC0000'", ")", "\n", "plt", ".", "fill_between", "(", "steps", ",", "toPlot_av1", "-", "toPlot_error1_sub", ",", "toPlot_av1", "+", "toPlot_error1_add", ",", "\n", "alpha", "=", "0.5", ",", "edgecolor", "=", "'#FF3333'", ",", "facecolor", "=", "'#FF6666'", ")", "\n", "plt", ".", "plot", "(", "steps", ",", "toPlot_av2", ",", "label", "=", "\"label\"", ",", "c", "=", "'#0066CC'", ")", "\n", "plt", ".", "fill_between", "(", "steps", ",", "toPlot_av2", "-", "toPlot_error2_sub", ",", "toPlot_av2", "+", "toPlot_error2_add", ",", "\n", "alpha", "=", "0.5", ",", "edgecolor", "=", "'#3999FF'", ",", "facecolor", "=", "'#66B2FF'", ")", "\n", "if", "gep", ":", "\n", "        ", "plt", ".", "plot", "(", "steps", ",", "toPlot_av3", ",", "label", "=", "\"label\"", ",", "c", "=", "(", "0.929", ",", "0.694", ",", "0.125", ")", ")", "\n", "plt", ".", "fill_between", "(", "steps", ",", "toPlot_av3", "-", "toPlot_error3_sub", ",", "toPlot_av3", "+", "toPlot_error3_add", ",", "\n", "alpha", "=", "0.5", ",", "edgecolor", "=", "(", "1", ",", "0.75", ",", "0.25", ")", ",", "facecolor", "=", "(", "1", ",", "0.8", ",", "0.35", ")", ")", "\n", "plt", ".", "axvline", "(", "x", "=", "500000", ",", "linestyle", "=", "'--'", ",", "color", "=", "'k'", ")", "\n", "\n", "", "legend", "=", "[", "'GEP-DDPG (noisy parameters), '", "+", "main_curve", "+", "' ('", "+", "error_type", "+", "')'", ",", "'DDPG (noisy parameters), '", "+", "main_curve", "+", "' ('", "+", "error_type", "+", "')'", "]", "\n", "if", "gep", ":", "\n", "       ", "legend", ".", "append", "(", "'GEP, '", "+", "main_curve", "+", "' ('", "+", "error_type", "+", "')'", ")", "\n", "", "plt", ".", "legend", "(", "legend", ",", "loc", "=", "4", ")", "\n", "\n", "plt", ".", "savefig", "(", "data_path", "+", "'DDPG_vs_GEP_DDPG_Plappert_vs_GEP'", "+", "main_curve", "+", "' ('", "+", "error_type", "+", "').png'", ",", "bbox_inches", "=", "'tight'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.utils.extract_results.compute_stats_vs": [[173, 237], ["enumerate", "len", "range", "range", "numpy.array", "numpy.nanmean", "numpy.nanmean", "scipy.stats.ks_2samp", "scipy.stats.ttest_ind", "numpy.array", "numpy.array", "scipy.stats.ks_2samp", "scipy.stats.ttest_ind", "bootstrapped.bootstrap_ab", "bootstrapped.bootstrap_ab", "numpy.zeros", "numpy.array", "numpy.array", "numpy.array", "sorted", "numpy.empty", "range", "numpy.random.shuffle", "range", "numpy.sign", "numpy.sign", "numpy.sign", "numpy.sign", "numpy.savetxt", "numpy.array", "os.listdir", "len", "extract_results.extract_performances", "run[].append", "numpy.loadtxt", "scores_our.append", "len", "len", "numpy.zeros", "numpy.sign", "numpy.sign", "len"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.dataset.Dataset.shuffle", "home.repos.pwc.inspect_result.flowersteam_geppg.scripts.extract_results.extract_performances", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append"], ["", "def", "compute_stats_vs", "(", "data_path", ",", "n1", ",", "n2", ",", "gep", ",", "save", "=", "True", ",", "var", "=", "False", ")", ":", "\n", "    ", "run", "=", "{", "}", "\n", "run", "[", "'perfs'", "]", "=", "[", "]", "\n", "scores_our", "=", "[", "]", "\n", "for", "i", ",", "trial", "in", "enumerate", "(", "sorted", "(", "os", ".", "listdir", "(", "data_path", ")", ")", ")", ":", "\n", "\n", "        ", "if", "len", "(", "trial", ")", "<", "4", ":", "\n", "# print('Extracting: ', trial)", "\n", "            ", "filename", "=", "data_path", "+", "trial", "+", "'/progress.json'", "\n", "# print(filename)", "\n", "steps", ",", "eval_rewards", "=", "extract_performances", "(", "filename", ")", "\n", "run", "[", "'perfs'", "]", ".", "append", "(", "eval_rewards", ")", "\n", "scores", "=", "np", ".", "loadtxt", "(", "data_path", "+", "trial", "+", "'/scores'", ")", "\n", "scores_our", ".", "append", "(", "scores", "[", "1", ",", "0", "]", ")", "\n", "\n", "", "", "n_runs", "=", "len", "(", "run", "[", "'perfs'", "]", ")", "\n", "assert", "n1", "+", "n2", "==", "n_runs", "\n", "max_steps", "=", "0", "\n", "for", "i", "in", "range", "(", "n_runs", ")", ":", "\n", "        ", "if", "len", "(", "run", "[", "'perfs'", "]", "[", "i", "]", ")", ">", "max_steps", ":", "\n", "            ", "max_steps", "=", "len", "(", "run", "[", "'perfs'", "]", "[", "i", "]", ")", "\n", "", "", "eval_perfs", "=", "np", ".", "empty", "(", "[", "n_runs", ",", "max_steps", "]", ")", "*", "(", "np", ".", "nan", ")", "\n", "for", "i", "in", "range", "(", "n_runs", ")", ":", "\n", "        ", "eval_perfs", "[", "i", ",", ":", "len", "(", "run", "[", "'perfs'", "]", "[", "i", "]", ")", "]", "=", "run", "[", "'perfs'", "]", "[", "i", "]", "\n", "\n", "# steps = steps[:700]", "\n", "", "inds", "=", "np", ".", "array", "(", "range", "(", "n_runs", ")", ")", "\n", "if", "var", ":", "\n", "        ", "np", ".", "random", ".", "shuffle", "(", "inds", ")", "\n", "\n", "", "if", "gep", ":", "\n", "# modify GEP source", "\n", "        ", "for", "i", "in", "range", "(", "n1", ")", ":", "#,n_runs):", "\n", "            ", "eval_perfs", "[", "i", ",", "251", ":", "]", "=", "eval_perfs", "[", "i", ",", ":", "750", "]", "\n", "eval_perfs", "[", "i", ",", ":", "251", "]", "=", "np", ".", "zeros", "(", "[", "251", "]", ")", "\n", "\n", "# print(inds)", "\n", "\n", "# compute statistics", "\n", "", "", "data1_litt", "=", "np", ".", "nanmean", "(", "eval_perfs", "[", "inds", "[", ":", "n1", "]", "]", "[", ":", ",", "-", "10", ":", "]", ",", "axis", "=", "1", ")", "\n", "data2_litt", "=", "np", ".", "nanmean", "(", "eval_perfs", "[", "inds", "[", "n1", ":", "]", "]", "[", ":", ",", "-", "10", ":", "]", ",", "axis", "=", "1", ")", "\n", "ks_litt", ",", "p_ks_litt", "=", "ks_2samp", "(", "data1_litt", ",", "data2_litt", ")", "\n", "ttest_litt", ",", "p_ttest_litt", "=", "ttest_ind", "(", "data1_litt", ",", "data2_litt", ",", "equal_var", "=", "False", ")", "\n", "data1_our", "=", "np", ".", "array", "(", "scores_our", "[", ":", "n1", "]", ")", "\n", "data2_our", "=", "np", ".", "array", "(", "scores_our", "[", "n1", ":", "]", ")", "\n", "ks_our", ",", "p_ks_our", "=", "ks_2samp", "(", "data1_our", ",", "data2_our", ")", "\n", "ttest_our", ",", "p_ttest_our", "=", "ttest_ind", "(", "data1_our", ",", "data2_our", ",", "equal_var", "=", "False", ")", "\n", "\n", "# estimation of confidence intervals with bootstrap method, https://github.com/facebookincubator/bootstrapped", "\n", "res_litt", "=", "bs", ".", "bootstrap_ab", "(", "data1_litt", ",", "data2_litt", ",", "bs_stats", ".", "mean", ",", "bs_compare", ".", "difference", ",", "num_iterations", "=", "10000", ")", "\n", "sign_litt", "=", "np", ".", "sign", "(", "res_litt", ".", "upper_bound", ")", "==", "np", ".", "sign", "(", "res_litt", ".", "lower_bound", ")", "\n", "res_our", "=", "bs", ".", "bootstrap_ab", "(", "data1_our", ",", "data2_our", ",", "bs_stats", ".", "mean", ",", "bs_compare", ".", "difference", ",", "num_iterations", "=", "10000", ")", "\n", "sign_our", "=", "np", ".", "sign", "(", "res_our", ".", "upper_bound", ")", "==", "np", ".", "sign", "(", "res_our", ".", "lower_bound", ")", "\n", "\n", "toSave", "=", "np", ".", "zeros", "(", "[", "4", ",", "4", "]", ")", "\n", "toSave", "[", "0", ":", "2", ",", ":", "]", "=", "np", ".", "array", "(", "[", "[", "ks_litt", ",", "p_ks_litt", ",", "ttest_litt", ",", "p_ttest_litt", "]", ",", "[", "ks_our", ",", "p_ks_our", ",", "ttest_our", ",", "p_ttest_our", "]", "]", ")", "\n", "toSave", "[", "2", ",", ":", "]", "=", "np", ".", "array", "(", "[", "res_litt", ".", "value", ",", "res_litt", ".", "lower_bound", ",", "res_litt", ".", "upper_bound", ",", "sign_litt", "*", "np", ".", "sign", "(", "res_litt", ".", "lower_bound", ")", "]", ")", "\n", "toSave", "[", "3", ",", ":", "]", "=", "np", ".", "array", "(", "[", "res_our", ".", "value", ",", "res_our", ".", "lower_bound", ",", "res_our", ".", "upper_bound", ",", "sign_our", "*", "np", ".", "sign", "(", "res_our", ".", "lower_bound", ")", "]", ")", "\n", "if", "save", ":", "\n", "        ", "np", ".", "savetxt", "(", "data_path", "+", "'stats'", ",", "toSave", ")", "\n", "\n", "", "if", "var", ":", "\n", "        ", "toReturn", "=", "np", ".", "array", "(", "[", "toSave", "[", "0", ",", "1", "]", ",", "toSave", "[", "0", ",", "3", "]", ",", "toSave", "[", "1", ",", "1", "]", ",", "toSave", "[", "1", ",", "3", "]", ",", "toSave", "[", "2", ",", "3", "]", ",", "toSave", "[", "3", ",", "3", "]", "]", ")", "\n", "return", "toReturn", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.utils.extract_results.plot_test_variability": [[239, 313], ["enumerate", "len", "range", "range", "range", "numpy.array", "numpy.random.shuffle", "print", "matplotlib.figure", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.title", "matplotlib.plot", "matplotlib.fill_between", "matplotlib.plot", "matplotlib.fill_between", "matplotlib.legend", "matplotlib.savefig", "sorted", "numpy.empty", "range", "numpy.nanmean", "numpy.nanmean", "numpy.nanstd", "numpy.nanstd", "numpy.nanstd", "numpy.nanstd", "type", "os.listdir", "len", "print", "extract_results.extract_performances", "run[].append", "len", "len", "numpy.nanmedian", "numpy.nanmedian", "str", "str", "numpy.nanstd", "numpy.sqrt", "numpy.nanstd", "numpy.sqrt", "numpy.nanstd", "numpy.sqrt", "numpy.nanstd", "numpy.sqrt", "type", "len", "int", "int", "int", "int", "numpy.nanpercentile", "numpy.nanpercentile", "int", "numpy.nanpercentile", "int", "numpy.nanpercentile", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.dataset.Dataset.shuffle", "home.repos.pwc.inspect_result.flowersteam_geppg.scripts.extract_results.extract_performances", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append"], ["", "", "def", "plot_test_variability", "(", "data_path", ",", "ind", ",", "error_type", ",", "main_curve", ")", ":", "\n", "    ", "run", "=", "{", "}", "\n", "run", "[", "'perfs'", "]", "=", "[", "]", "\n", "for", "i", ",", "trial", "in", "enumerate", "(", "sorted", "(", "os", ".", "listdir", "(", "data_path", ")", ")", ")", ":", "\n", "\n", "        ", "if", "len", "(", "trial", ")", "<", "4", ":", "\n", "            ", "print", "(", "'Extracting: '", ",", "trial", ")", "\n", "filename", "=", "data_path", "+", "trial", "+", "'/progress.json'", "\n", "# print(filename)", "\n", "steps", ",", "eval_rewards", "=", "extract_performances", "(", "filename", ")", "\n", "run", "[", "'perfs'", "]", ".", "append", "(", "eval_rewards", ")", "\n", "\n", "", "", "n_runs", "=", "len", "(", "run", "[", "'perfs'", "]", ")", "\n", "max_steps", "=", "0", "\n", "for", "i", "in", "range", "(", "n_runs", ")", ":", "\n", "        ", "if", "len", "(", "run", "[", "'perfs'", "]", "[", "i", "]", ")", ">", "max_steps", ":", "\n", "            ", "max_steps", "=", "len", "(", "run", "[", "'perfs'", "]", "[", "i", "]", ")", "\n", "", "", "eval_perfs", "=", "np", ".", "empty", "(", "[", "n_runs", ",", "max_steps", "]", ")", "*", "(", "np", ".", "nan", ")", "\n", "for", "i", "in", "range", "(", "n_runs", ")", ":", "\n", "        ", "eval_perfs", "[", "i", ",", ":", "len", "(", "run", "[", "'perfs'", "]", "[", "i", "]", ")", "]", "=", "run", "[", "'perfs'", "]", "[", "i", "]", "\n", "\n", "", "steps", "=", "range", "(", "0", ",", "max_steps", "*", "2000", ",", "2000", ")", "\n", "\n", "inds", "=", "np", ".", "array", "(", "range", "(", "n_runs", ")", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "inds", ")", "\n", "\n", "print", "(", "inds", ")", "\n", "\n", "if", "main_curve", "==", "'mean'", ":", "\n", "        ", "toPlot_av1", "=", "np", ".", "nanmean", "(", "eval_perfs", "[", "inds", "[", ":", "int", "(", "n_runs", "/", "2", ")", "]", "]", ",", "axis", "=", "0", ")", "\n", "toPlot_av2", "=", "np", ".", "nanmean", "(", "eval_perfs", "[", "inds", "[", "int", "(", "n_runs", "/", "2", ")", ":", "]", "]", ",", "axis", "=", "0", ")", "\n", "", "elif", "main_curve", "==", "'median'", ":", "\n", "        ", "toPlot_av1", "=", "np", ".", "nanmedian", "(", "eval_perfs", "[", "inds", "[", ":", "int", "(", "n_runs", "/", "2", ")", "]", "]", ",", "axis", "=", "0", ")", "\n", "toPlot_av2", "=", "np", ".", "nanmedian", "(", "eval_perfs", "[", "inds", "[", "int", "(", "n_runs", "/", "2", ")", ":", "]", "]", ",", "axis", "=", "0", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "if", "error_type", "==", "'std'", ":", "\n", "        ", "toPlot_error1_add", "=", "np", ".", "nanstd", "(", "eval_perfs", "[", "inds", "[", ":", "int", "(", "n_runs", "/", "2", ")", "]", "]", ",", "axis", "=", "0", ")", "\n", "toPlot_error1_sub", "=", "np", ".", "nanstd", "(", "eval_perfs", "[", "inds", "[", ":", "int", "(", "n_runs", "/", "2", ")", "]", "]", ",", "axis", "=", "0", ")", "\n", "toPlot_error2_add", "=", "np", ".", "nanstd", "(", "eval_perfs", "[", "inds", "[", "int", "(", "n_runs", "/", "2", ")", ":", "]", "]", ",", "axis", "=", "0", ")", "\n", "toPlot_error2_sub", "=", "np", ".", "nanstd", "(", "eval_perfs", "[", "inds", "[", "int", "(", "n_runs", "/", "2", ")", ":", "]", "]", ",", "axis", "=", "0", ")", "\n", "", "elif", "error_type", "==", "'sem'", ":", "\n", "        ", "toPlot_error1_add", "=", "np", ".", "nanstd", "(", "eval_perfs", "[", "inds", "[", ":", "int", "(", "n_runs", "/", "2", ")", "]", "]", ",", "axis", "=", "0", ")", "/", "np", ".", "sqrt", "(", "int", "(", "n_runs", "/", "2", ")", ")", "\n", "toPlot_error1_sub", "=", "np", ".", "nanstd", "(", "eval_perfs", "[", "inds", "[", ":", "int", "(", "n_runs", "/", "2", ")", "]", "]", ",", "axis", "=", "0", ")", "/", "np", ".", "sqrt", "(", "int", "(", "n_runs", "/", "2", ")", ")", "\n", "toPlot_error2_add", "=", "np", ".", "nanstd", "(", "eval_perfs", "[", "inds", "[", "int", "(", "n_runs", "/", "2", ")", ":", "]", "]", ",", "axis", "=", "0", ")", "/", "np", ".", "sqrt", "(", "int", "(", "n_runs", "/", "2", ")", ")", "\n", "toPlot_error2_sub", "=", "np", ".", "nanstd", "(", "eval_perfs", "[", "inds", "[", "int", "(", "n_runs", "/", "2", ")", ":", "]", "]", ",", "axis", "=", "0", ")", "/", "np", ".", "sqrt", "(", "int", "(", "n_runs", "/", "2", ")", ")", "\n", "", "elif", "type", "(", "error_type", ")", "==", "int", ":", "\n", "        ", "assert", "(", "error_type", "<=", "100", "and", "error_type", ">", "0", ")", ",", "'error_type must be between 0 and 100'", "\n", "toPlot_error1_add", "=", "np", ".", "nanpercentile", "(", "eval_perfs", "[", "inds", "[", ":", "int", "(", "n_runs", "/", "2", ")", "]", "]", ",", "int", "(", "100", "-", "(", "100", "-", "error_type", ")", "/", "2", ")", ",", "axis", "=", "0", ")", "-", "toPlot_av1", "\n", "toPlot_error1_sub", "=", "-", "np", ".", "nanpercentile", "(", "eval_perfs", "[", "inds", "[", ":", "int", "(", "n_runs", "/", "2", ")", "]", "]", ",", "int", "(", "(", "100", "-", "error_type", ")", "/", "2", ")", ",", "axis", "=", "0", ")", "+", "toPlot_av1", "\n", "toPlot_error2_add", "=", "np", ".", "nanpercentile", "(", "eval_perfs", "[", "inds", "[", "int", "(", "n_runs", "/", "2", ")", ":", "]", "]", ",", "int", "(", "100", "-", "(", "100", "-", "error_type", ")", "/", "2", ")", ",", "axis", "=", "0", ")", "-", "toPlot_av2", "\n", "toPlot_error2_sub", "=", "-", "np", ".", "nanpercentile", "(", "eval_perfs", "[", "inds", "[", "int", "(", "n_runs", "/", "2", ")", ":", "]", "]", ",", "int", "(", "(", "100", "-", "error_type", ")", "/", "2", ")", ",", "axis", "=", "0", ")", "+", "toPlot_av2", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "if", "type", "(", "error_type", ")", "==", "int", ":", "\n", "        ", "error_type", "=", "str", "(", "error_type", ")", "+", "'%'", "\n", "\n", "", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "20", ",", "13", ")", ",", "frameon", "=", "False", ")", "\n", "plt", ".", "xlabel", "(", "\"time steps\"", ")", "\n", "plt", ".", "ylabel", "(", "\"performance\"", ")", "\n", "plt", ".", "title", "(", "name_algo", "+", "', '", "+", "error_type", ")", "\n", "# plt.plot(steps, toPlot_av1, label=\"label\", c='#CC6600')", "\n", "# plt.fill_between(steps, toPlot_av1 - toPlot_std1, toPlot_av1 + toPlot_std1,", "\n", "#                  alpha=0.5, edgecolor='#FF9933', facecolor='#FFB266')", "\n", "plt", ".", "plot", "(", "steps", ",", "toPlot_av1", ",", "label", "=", "\"label\"", ",", "c", "=", "'#CC0000'", ")", "\n", "plt", ".", "fill_between", "(", "steps", ",", "toPlot_av1", "-", "toPlot_error1_sub", ",", "toPlot_av1", "+", "toPlot_error1_add", ",", "\n", "alpha", "=", "0.5", ",", "edgecolor", "=", "'#FF3333'", ",", "facecolor", "=", "'#FF6666'", ")", "\n", "plt", ".", "plot", "(", "steps", ",", "toPlot_av2", ",", "label", "=", "\"label\"", ",", "c", "=", "'#0066CC'", ")", "\n", "plt", ".", "fill_between", "(", "steps", ",", "toPlot_av2", "-", "toPlot_error2_sub", ",", "toPlot_av2", "+", "toPlot_error2_add", ",", "\n", "alpha", "=", "0.5", ",", "edgecolor", "=", "'#3999FF'", ",", "facecolor", "=", "'#66B2FF'", ")", "\n", "plt", ".", "legend", "(", "[", "'group 1'", ",", "'group 2'", "]", ",", "loc", "=", "4", ")", "\n", "\n", "plt", ".", "savefig", "(", "data_path", "+", "name_run", "+", "'_variability_'", "+", "str", "(", "ind", ")", ",", "bbox_inches", "=", "'tight'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.utils.extract_results.plot_all": [[315, 389], ["matplotlib.figure", "enumerate", "matplotlib.savefig", "len", "range", "range", "range", "matplotlib.figure", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.title", "matplotlib.plot", "matplotlib.fill_between", "matplotlib.savefig", "numpy.savetxt", "numpy.loadtxt", "sorted", "numpy.empty", "range", "numpy.nanmean", "numpy.nanstd", "numpy.nanstd", "type", "matplotlib.axvline", "os.listdir", "len", "print", "print", "extract_results.extract_performances", "run[].append", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.title", "matplotlib.plot", "len", "len", "numpy.nanmedian", "str", "numpy.nanstd", "numpy.sqrt", "numpy.nanstd", "numpy.sqrt", "type", "len", "numpy.nanpercentile", "int", "numpy.nanpercentile", "int"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.scripts.extract_results.extract_performances", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append"], ["", "def", "plot_all", "(", "data_path", ",", "error_type", ",", "main_curve", ",", "gep", ")", ":", "\n", "    ", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "20", ",", "13", ")", ",", "frameon", "=", "False", ")", "\n", "run", "=", "{", "}", "\n", "run", "[", "'perfs'", "]", "=", "[", "]", "\n", "\n", "if", "gep", ":", "\n", "        ", "gep_perfs", "=", "np", ".", "loadtxt", "(", "data_path", "+", "'buffer_perfs'", ")", "\n", "\n", "", "for", "i", ",", "trial", "in", "enumerate", "(", "sorted", "(", "os", ".", "listdir", "(", "data_path", ")", ")", ")", ":", "\n", "\n", "        ", "if", "len", "(", "trial", ")", "<", "4", ":", "\n", "            ", "print", "(", "'Extracting: '", ",", "trial", ")", "\n", "filename", "=", "data_path", "+", "trial", "+", "'/progress.json'", "\n", "print", "(", "filename", ")", "\n", "steps", ",", "eval_rewards", "=", "extract_performances", "(", "filename", ")", "\n", "run", "[", "'perfs'", "]", ".", "append", "(", "eval_rewards", ")", "\n", "plt", ".", "xlabel", "(", "'steps'", ")", "\n", "plt", ".", "ylabel", "(", "'performance'", ")", "\n", "plt", ".", "title", "(", "name_algo", ")", "\n", "plt", ".", "plot", "(", "steps", ",", "eval_rewards", ")", "\n", "\n", "", "", "plt", ".", "savefig", "(", "data_path", "+", "'all_'", "+", "name_run", "+", "'_runs'", ",", "bbox_inches", "=", "'tight'", ")", "\n", "n_runs", "=", "len", "(", "run", "[", "'perfs'", "]", ")", "\n", "max_steps", "=", "0", "\n", "for", "i", "in", "range", "(", "n_runs", ")", ":", "\n", "        ", "if", "len", "(", "run", "[", "'perfs'", "]", "[", "i", "]", ")", ">", "max_steps", ":", "\n", "            ", "max_steps", "=", "len", "(", "run", "[", "'perfs'", "]", "[", "i", "]", ")", "\n", "", "", "max_steps", "=", "1001", "\n", "eval_perfs", "=", "np", ".", "empty", "(", "[", "n_runs", ",", "max_steps", "]", ")", "*", "(", "np", ".", "nan", ")", "\n", "for", "i", "in", "range", "(", "n_runs", ")", ":", "\n", "        ", "eval_perfs", "[", "i", ",", ":", "len", "(", "run", "[", "'perfs'", "]", "[", "i", "]", ")", "]", "=", "run", "[", "'perfs'", "]", "[", "i", "]", "\n", "\n", "", "steps", "=", "range", "(", "0", ",", "max_steps", "*", "2000", ",", "2000", ")", "\n", "\n", "if", "gep", ":", "\n", "        ", "for", "i", "in", "range", "(", "n_runs", ")", ":", "\n", "            ", "eval_perfs", "[", "i", ",", "251", ":", "]", "=", "eval_perfs", "[", "i", ",", ":", "750", "]", "\n", "eval_perfs", "[", "i", ",", "0", "]", "=", "0", "\n", "eval_perfs", "[", "i", ",", "1", ":", "251", "]", "=", "gep_perfs", "[", "i", "]", "\n", "\n", "", "", "if", "main_curve", "==", "'mean'", ":", "\n", "        ", "toPlot_av", "=", "np", ".", "nanmean", "(", "eval_perfs", ",", "axis", "=", "0", ")", "\n", "", "elif", "main_curve", "==", "'median'", ":", "\n", "        ", "toPlot_av", "=", "np", ".", "nanmedian", "(", "eval_perfs", ",", "axis", "=", "0", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "if", "error_type", "==", "'std'", ":", "\n", "        ", "toPlot_error_add", "=", "np", ".", "nanstd", "(", "eval_perfs", ",", "axis", "=", "0", ")", "\n", "toPlot_error_sub", "=", "np", ".", "nanstd", "(", "eval_perfs", ",", "axis", "=", "0", ")", "\n", "", "elif", "error_type", "==", "'sem'", ":", "\n", "        ", "toPlot_error_add", "=", "np", ".", "nanstd", "(", "eval_perfs", ",", "axis", "=", "0", ")", "/", "np", ".", "sqrt", "(", "n_runs", ")", "\n", "toPlot_error_sub", "=", "np", ".", "nanstd", "(", "eval_perfs", ",", "axis", "=", "0", ")", "/", "np", ".", "sqrt", "(", "n_runs", ")", "\n", "", "elif", "type", "(", "error_type", ")", "==", "int", ":", "\n", "        ", "assert", "(", "error_type", "<=", "100", "and", "error_type", ">", "0", ")", ",", "'error_type must be between 0 and 100'", "\n", "toPlot_error_add", "=", "np", ".", "nanpercentile", "(", "eval_perfs", ",", "int", "(", "100", "-", "(", "100", "-", "error_type", ")", "/", "2", ")", ",", "axis", "=", "0", ")", "-", "toPlot_av", "\n", "toPlot_error_sub", "=", "-", "np", ".", "nanpercentile", "(", "eval_perfs", ",", "int", "(", "(", "100", "-", "error_type", ")", "/", "2", ")", ",", "axis", "=", "0", ")", "+", "toPlot_av", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "if", "type", "(", "error_type", ")", "==", "int", ":", "\n", "        ", "error_type", "=", "str", "(", "error_type", ")", "+", "'%'", "\n", "", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "20", ",", "13", ")", ",", "frameon", "=", "False", ")", "\n", "plt", ".", "xlabel", "(", "\"time steps\"", ")", "\n", "plt", ".", "ylabel", "(", "\"performance\"", ")", "\n", "plt", ".", "title", "(", "name_algo", "+", "' '", "+", "main_curve", "+", "' ('", "+", "error_type", "+", "')'", ")", "\n", "plt", ".", "plot", "(", "steps", ",", "toPlot_av", ",", "label", "=", "\"label\"", ",", "c", "=", "'#0066CC'", ")", "\n", "plt", ".", "fill_between", "(", "steps", ",", "toPlot_av", "-", "toPlot_error_sub", ",", "toPlot_av", "+", "toPlot_error_add", ",", "\n", "alpha", "=", "0.5", ",", "edgecolor", "=", "'#3999FF'", ",", "facecolor", "=", "'#66B2FF'", ")", "\n", "#plt.legend()", "\n", "if", "gep", ":", "\n", "        ", "plt", ".", "axvline", "(", "x", "=", "500000", ",", "linestyle", "=", "'--'", ",", "color", "=", "'k'", ")", "\n", "", "plt", ".", "savefig", "(", "data_path", "+", "name_run", "+", "' '", "+", "main_curve", "+", "' ('", "+", "error_type", "+", "')'", ",", "bbox_inches", "=", "'tight'", ")", "\n", "np", ".", "savetxt", "(", "data_path", "+", "'eval_performances'", "+", "name_run", ",", "eval_perfs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.utils.extract_results.compute_scores_all": [[393, 485], ["matplotlib.figure", "enumerate", "matplotlib.figure", "matplotlib.hist", "matplotlib.xlabel", "matplotlib.title", "matplotlib.savefig", "matplotlib.figure", "matplotlib.hist", "matplotlib.xlabel", "matplotlib.title", "matplotlib.savefig", "sorted", "os.listdir", "len", "os.path.exists", "numpy.loadtxt", "hist_litt_scores.append", "hist_our_scores.append", "numpy.zeros", "print", "print", "extract_results.extract_performances", "numpy.array().mean", "numpy.array().std", "numpy.array().min", "numpy.array().max", "os.listdir", "numpy.savetxt", "hist_litt_scores.append", "hist_our_scores.append", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.zeros", "np.zeros.mean", "np.zeros.std", "np.zeros.min", "np.zeros.max", "tensorflow.Session", "tensorflow.global_variables_initializer", "sess.run", "tensorflow.train.import_meta_graph", "print", "tf.train.import_meta_graph.restore", "tensorflow.get_default_graph", "tf.get_default_graph.get_tensor_by_name", "tf.get_default_graph.get_tensor_by_name", "range", "open", "checkf.read", "s.replace.replace", "tensorflow.train.latest_checkpoint", "sum", "s.replace.replace", "open", "checkf.write", "env.reset", "observations[].squeeze", "sess.run", "actions.append", "env.step", "observations.append", "rewards.append"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.azure_utils.Container.exists", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.scripts.extract_results.extract_performances", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.mean", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.std", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.min", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.max", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.mean", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.std", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.min", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.max", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.main_config.run", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.sum", "home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.main_config.run", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.__init__.VecEnv.step", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append"], ["", "def", "compute_scores_all", "(", "data_path", ",", "name_algo", ",", "gep", ")", ":", "\n", "    ", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "20", ",", "13", ")", ",", "frameon", "=", "False", ")", "\n", "hist_litt_scores", "=", "[", "]", "\n", "hist_our_scores", "=", "[", "]", "\n", "for", "i", ",", "trial", "in", "enumerate", "(", "sorted", "(", "os", ".", "listdir", "(", "data_path", ")", ")", ")", ":", "\n", "        ", "if", "len", "(", "trial", ")", "<", "4", ":", "\n", "            ", "if", "os", ".", "path", ".", "exists", "(", "data_path", "+", "trial", "+", "'/scores'", ")", ":", "\n", "                ", "tmp_scores", "=", "np", ".", "loadtxt", "(", "data_path", "+", "trial", "+", "'/scores'", ")", "\n", "hist_litt_scores", ".", "append", "(", "tmp_scores", "[", "0", ",", "0", "]", ")", "\n", "hist_our_scores", ".", "append", "(", "tmp_scores", "[", "1", ",", "0", "]", ")", "\n", "", "else", ":", "\n", "# actor_folder = data_path + trial + '/tf_save/' + 'best1_5M/'", "\n", "# for f in os.listdir(actor_folder):", "\n", "#     os.rename(actor_folder+f, actor_folder+f[:-2])", "\n", "                ", "toSave", "=", "np", ".", "zeros", "(", "[", "2", ",", "4", "]", ")", "\n", "print", "(", "'Computing score: '", ",", "trial", ")", "\n", "filename", "=", "data_path", "+", "trial", "+", "'/progress.json'", "\n", "print", "(", "filename", ")", "\n", "steps", ",", "eval_rewards", "=", "extract_performances", "(", "filename", ")", "\n", "if", "gep", ":", "\n", "                    ", "steps", "=", "steps", "[", ":", "750", "]", "\n", "eval_rewards", "=", "eval_rewards", "[", ":", "750", "]", "\n", "actor_folder", "=", "data_path", "+", "trial", "+", "'/tf_save/'", "+", "'best1_5M/'", "\n", "", "else", ":", "\n", "                    ", "actor_folder", "=", "data_path", "+", "trial", "+", "'/tf_save/'", "\n", "\n", "", "toSave", "[", "0", ",", "0", "]", "=", "np", ".", "array", "(", "eval_rewards", "[", "-", "10", ":", "]", ")", ".", "mean", "(", ")", "\n", "toSave", "[", "0", ",", "1", "]", "=", "np", ".", "array", "(", "eval_rewards", "[", "-", "10", ":", "]", ")", ".", "std", "(", ")", "\n", "toSave", "[", "0", ",", "2", "]", "=", "np", ".", "array", "(", "eval_rewards", "[", "-", "10", ":", "]", ")", ".", "min", "(", ")", "\n", "toSave", "[", "0", ",", "3", "]", "=", "np", ".", "array", "(", "eval_rewards", "[", "-", "10", ":", "]", ")", ".", "max", "(", ")", "\n", "\n", "for", "f", "in", "os", ".", "listdir", "(", "actor_folder", ")", ":", "\n", "                    ", "if", "'meta'", "in", "f", ":", "\n", "                        ", "n_tests", "=", "100", "\n", "score", "=", "np", ".", "zeros", "(", "[", "n_tests", "]", ")", "\n", "\n", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "                            ", "init", "=", "tf", ".", "global_variables_initializer", "(", ")", "\n", "sess", ".", "run", "(", "init", ")", "\n", "saver", "=", "tf", ".", "train", ".", "import_meta_graph", "(", "actor_folder", "+", "f", ")", "\n", "print", "(", "actor_folder", "+", "f", ")", "\n", "\n", "#replace string in checkpoint file", "\n", "with", "open", "(", "actor_folder", "+", "'/checkpoint'", ",", "'r'", ")", "as", "checkf", ":", "\n", "                                ", "s", "=", "checkf", ".", "read", "(", ")", "\n", "", "if", "'projets'", "in", "s", ":", "\n", "                                ", "old_s", "=", "'/projets/flowers/cedric/ddpg_baseline_openAI_fork/results/HalfCheetah-v1/'", "\n", "s", "=", "s", ".", "replace", "(", "old_s", ",", "data_path", ")", "\n", "if", "gep", ":", "\n", "                                    ", "old_s", "=", "'/tf_save'", "\n", "s", "=", "s", ".", "replace", "(", "old_s", ",", "'/tf_save/'", "+", "'best1_5M'", ")", "\n", "", "with", "open", "(", "actor_folder", "+", "'/checkpoint'", ",", "'w'", ")", "as", "checkf", ":", "\n", "                                    ", "checkf", ".", "write", "(", "s", ")", "\n", "\n", "", "", "saver", ".", "restore", "(", "sess", ",", "tf", ".", "train", ".", "latest_checkpoint", "(", "actor_folder", ")", ")", "\n", "graph", "=", "tf", ".", "get_default_graph", "(", ")", "\n", "obs0", "=", "graph", ".", "get_tensor_by_name", "(", "\"obs0:0\"", ")", "\n", "actor_tf", "=", "graph", ".", "get_tensor_by_name", "(", "\"actor/Tanh:0\"", ")", "\n", "for", "i", "in", "range", "(", "n_tests", ")", ":", "\n", "                                ", "done", "=", "False", "\n", "observations", "=", "[", "env", ".", "reset", "(", ")", "]", "\n", "actions", "=", "[", "]", "\n", "rewards", "=", "[", "]", "\n", "while", "not", "done", ":", "\n", "                                    ", "last_obs", "=", "observations", "[", "-", "1", "]", ".", "squeeze", "(", ")", "\n", "feed_dict", "=", "{", "obs0", ":", "[", "last_obs", "]", "}", "\n", "action", "=", "sess", ".", "run", "(", "actor_tf", ",", "feed_dict", "=", "feed_dict", ")", "\n", "actions", ".", "append", "(", "action", ")", "\n", "# env.render()", "\n", "out", "=", "env", ".", "step", "(", "actions", "[", "-", "1", "]", ")", "\n", "observations", ".", "append", "(", "out", "[", "0", "]", ")", "\n", "rewards", ".", "append", "(", "out", "[", "1", "]", ")", "\n", "done", "=", "out", "[", "2", "]", "\n", "", "score", "[", "i", "]", "=", "sum", "(", "rewards", ")", "\n", "", "", "toSave", "[", "1", ",", "0", "]", "=", "score", ".", "mean", "(", ")", "\n", "toSave", "[", "1", ",", "1", "]", "=", "score", ".", "std", "(", ")", "\n", "toSave", "[", "1", ",", "2", "]", "=", "score", ".", "min", "(", ")", "\n", "toSave", "[", "1", ",", "3", "]", "=", "score", ".", "max", "(", ")", "\n", "break", "\n", "", "", "np", ".", "savetxt", "(", "data_path", "+", "trial", "+", "'/scores'", ",", "toSave", ")", "\n", "hist_litt_scores", ".", "append", "(", "toSave", "[", "0", ",", "0", "]", ")", "\n", "hist_our_scores", ".", "append", "(", "toSave", "[", "1", ",", "0", "]", ")", "\n", "", "", "", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "hist", "(", "hist_litt_scores", ")", "\n", "plt", ".", "xlabel", "(", "'performance returns'", ")", "\n", "plt", ".", "title", "(", "'Histogram of final performances for '", "+", "name_algo", ")", "\n", "plt", ".", "savefig", "(", "data_path", "+", "name_algo", "+", "'_histogram_litt_measure'", ",", "bbox_inches", "=", "'tight'", ")", "\n", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "hist", "(", "hist_our_scores", ")", "\n", "plt", ".", "xlabel", "(", "'performance returns'", ")", "\n", "plt", ".", "title", "(", "'Histogram of final performances for '", "+", "name_algo", ")", "\n", "plt", ".", "savefig", "(", "data_path", "+", "name_algo", "+", "'_histogram_our_measure'", ",", "bbox_inches", "=", "'tight'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.utils.extract_results.correlation_gep_ddpg": [[486, 501], ["numpy.loadtxt", "range", "scipy.stats.pearsonr", "scipy.stats.pearsonr", "numpy.array", "numpy.savetxt", "list", "len", "print", "numpy.loadtxt", "litt_scores.append", "our_scores.append", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "list", "list", "range", "range", "range", "str"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.azure_utils.Container.list", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.common.azure_utils.Container.list", "home.repos.pwc.inspect_result.flowersteam_geppg.common.azure_utils.Container.list"], ["", "def", "correlation_gep_ddpg", "(", "data_path", ")", ":", "\n", "    ", "litt_scores", "=", "[", "]", "\n", "our_scores", "=", "[", "]", "\n", "list_dir", "=", "list", "(", "range", "(", "101", ",", "121", ")", ")", "+", "list", "(", "range", "(", "181", ",", "201", ")", ")", "+", "list", "(", "range", "(", "401", ",", "421", ")", ")", "\n", "gep_scores", "=", "np", ".", "loadtxt", "(", "data_path", "+", "'gep_scores'", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "list_dir", ")", ")", ":", "\n", "        ", "trial", "=", "list_dir", "[", "i", "]", "\n", "print", "(", "'Extracting: '", ",", "trial", ")", "\n", "array", "=", "np", ".", "loadtxt", "(", "data_path", "+", "str", "(", "trial", ")", "+", "'/scores'", ")", "\n", "litt_scores", ".", "append", "(", "array", "[", "0", ",", "0", "]", ")", "\n", "our_scores", ".", "append", "(", "array", "[", "1", ",", "0", "]", ")", "\n", "", "our_r", ",", "our_p", "=", "pearsonr", "(", "np", ".", "array", "(", "our_scores", ")", ",", "np", ".", "array", "(", "gep_scores", ")", ")", "\n", "litt_r", ",", "litt_p", "=", "pearsonr", "(", "np", ".", "array", "(", "litt_scores", ")", ",", "np", ".", "array", "(", "gep_scores", ")", ")", "\n", "toSave", "=", "np", ".", "array", "(", "[", "[", "our_r", ",", "our_p", "]", ",", "[", "litt_r", ",", "litt_p", "]", "]", ")", "\n", "np", ".", "savetxt", "(", "data_path", "+", "'correlations'", ",", "toSave", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.utils.extract_results.plot_gep": [[502, 557], ["range", "matplotlib.figure", "enumerate", "matplotlib.savefig", "print", "matplotlib.figure", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.title", "matplotlib.plot", "matplotlib.fill_between", "matplotlib.savefig", "numpy.savetxt", "numpy.empty", "os.listdir", "numpy.nanmean", "numpy.nanstd", "numpy.nanstd", "type", "print", "numpy.loadtxt", "numpy.loadtxt", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.title", "matplotlib.plot", "numpy.nanmedian", "str", "numpy.nanstd", "numpy.sqrt", "numpy.nanstd", "numpy.sqrt", "type", "numpy.nanpercentile", "int", "numpy.nanpercentile", "int"], "function", ["None"], ["", "def", "plot_gep", "(", "data_path", ",", "error_type", ",", "main_curve", ",", "n1", ")", ":", "\n", "    ", "max_steps", "=", "1000", "\n", "eval_perfs", "=", "np", ".", "empty", "(", "[", "20", ",", "1000", "]", ")", "*", "np", ".", "nan", "\n", "steps", "=", "range", "(", "0", ",", "max_steps", "*", "2000", ",", "2000", ")", "\n", "ind", "=", "0", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "20", ",", "13", ")", ",", "frameon", "=", "False", ")", "\n", "for", "i", ",", "f", "in", "enumerate", "(", "os", ".", "listdir", "(", "data_path", ")", ")", ":", "\n", "        ", "if", "'perfsToPlot'", "in", "f", ":", "\n", "            ", "print", "(", "f", ")", "\n", "name", "=", "data_path", "+", "f", "\n", "perfs", "=", "np", ".", "loadtxt", "(", "name", ")", "\n", "eval_perfs", "[", "ind", ",", ":", "]", "=", "np", ".", "loadtxt", "(", "name", ")", "\n", "plt", ".", "xlabel", "(", "'steps'", ")", "\n", "plt", ".", "ylabel", "(", "'performance'", ")", "\n", "plt", ".", "title", "(", "name_algo", ")", "\n", "plt", ".", "plot", "(", "steps", ",", "eval_perfs", "[", "ind", ",", ":", "]", ")", "\n", "ind", "+=", "1", "\n", "\n", "\n", "", "", "plt", ".", "savefig", "(", "data_path", "+", "'all_'", "+", "name_run", "+", "'_runs'", ",", "bbox_inches", "=", "'tight'", ")", "\n", "n_runs", "=", "eval_perfs", ".", "shape", "[", "0", "]", "\n", "print", "(", "'n_runs :'", ",", "n_runs", ")", "\n", "if", "main_curve", "==", "'mean'", ":", "\n", "        ", "toPlot_av", "=", "np", ".", "nanmean", "(", "eval_perfs", ",", "axis", "=", "0", ")", "\n", "", "elif", "main_curve", "==", "'median'", ":", "\n", "        ", "toPlot_av", "=", "np", ".", "nanmedian", "(", "eval_perfs", ",", "axis", "=", "0", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "if", "error_type", "==", "'std'", ":", "\n", "        ", "toPlot_error_add", "=", "np", ".", "nanstd", "(", "eval_perfs", ",", "axis", "=", "0", ")", "\n", "toPlot_error_sub", "=", "np", ".", "nanstd", "(", "eval_perfs", ",", "axis", "=", "0", ")", "\n", "", "elif", "error_type", "==", "'sem'", ":", "\n", "        ", "toPlot_error_add", "=", "np", ".", "nanstd", "(", "eval_perfs", ",", "axis", "=", "0", ")", "/", "np", ".", "sqrt", "(", "n_runs", ")", "\n", "toPlot_error_sub", "=", "np", ".", "nanstd", "(", "eval_perfs", ",", "axis", "=", "0", ")", "/", "np", ".", "sqrt", "(", "n_runs", ")", "\n", "", "elif", "type", "(", "error_type", ")", "==", "int", ":", "\n", "        ", "assert", "(", "error_type", "<=", "100", "and", "error_type", ">", "0", ")", ",", "'error_type must be between 0 and 100'", "\n", "toPlot_error_add", "=", "np", ".", "nanpercentile", "(", "eval_perfs", ",", "int", "(", "100", "-", "(", "100", "-", "error_type", ")", "/", "2", ")", ",", "axis", "=", "0", ")", "-", "toPlot_av", "\n", "toPlot_error_sub", "=", "-", "np", ".", "nanpercentile", "(", "eval_perfs", ",", "int", "(", "(", "100", "-", "error_type", ")", "/", "2", ")", ",", "axis", "=", "0", ")", "+", "toPlot_av", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "if", "type", "(", "error_type", ")", "==", "int", ":", "\n", "        ", "error_type", "=", "str", "(", "error_type", ")", "+", "'%'", "\n", "", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "20", ",", "13", ")", ",", "frameon", "=", "False", ")", "\n", "plt", ".", "xlabel", "(", "\"time steps\"", ")", "\n", "plt", ".", "ylabel", "(", "\"performance\"", ")", "\n", "plt", ".", "title", "(", "name_algo", "+", "' '", "+", "main_curve", "+", "' ('", "+", "error_type", "+", "')'", ")", "\n", "plt", ".", "plot", "(", "steps", ",", "toPlot_av", ",", "label", "=", "\"label\"", ",", "c", "=", "'#0066CC'", ")", "\n", "plt", ".", "fill_between", "(", "steps", ",", "toPlot_av", "-", "toPlot_error_sub", ",", "toPlot_av", "+", "toPlot_error_add", ",", "\n", "alpha", "=", "0.5", ",", "edgecolor", "=", "'#3999FF'", ",", "facecolor", "=", "'#66B2FF'", ")", "\n", "#plt.legend()", "\n", "\n", "plt", ".", "savefig", "(", "data_path", "+", "'GEP_2M'", "+", "' '", "+", "main_curve", "+", "' ('", "+", "error_type", "+", "')'", ",", "bbox_inches", "=", "'tight'", ")", "\n", "np", ".", "savetxt", "(", "data_path", "+", "'eval_performances_GEP2M_linear_policy'", ",", "eval_perfs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.utils.extract_results.compute_stat_from_eval_perfs": [[558, 598], ["enumerate", "numpy.nanmean", "numpy.nanmean", "scipy.stats.ks_2samp", "scipy.stats.ttest_ind", "numpy.array", "numpy.array", "scipy.stats.ks_2samp", "scipy.stats.ttest_ind", "bootstrapped.bootstrap_ab", "bootstrapped.bootstrap_ab", "numpy.zeros", "numpy.array", "numpy.array", "numpy.array", "numpy.savetxt", "numpy.empty", "sorted", "print", "numpy.sign", "numpy.sign", "numpy.sign", "numpy.sign", "os.listdir", "numpy.loadtxt", "range", "scores_our.append", "numpy.sign", "numpy.sign", "numpy.concatenate", "numpy.loadtxt", "numpy.zeros", "numpy.loadtxt"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.concatenate"], ["", "def", "compute_stat_from_eval_perfs", "(", "data_path", ",", "n1", ",", "n2", ")", ":", "\n", "    ", "eval_perfs", "=", "np", ".", "empty", "(", "[", "n1", "+", "n2", ",", "1001", "]", ")", "*", "np", ".", "nan", "\n", "scores_our", "=", "[", "]", "\n", "for", "i", ",", "f", "in", "enumerate", "(", "sorted", "(", "os", ".", "listdir", "(", "data_path", ")", ")", ")", ":", "\n", "        ", "print", "(", "f", ")", "\n", "if", "'our'", "in", "f", ":", "\n", "            ", "scores", "=", "np", ".", "loadtxt", "(", "data_path", "+", "f", ")", "\n", "for", "j", "in", "range", "(", "scores", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "scores_our", ".", "append", "(", "scores", "[", "j", "]", ")", "\n", "", "", "elif", "'eval'", "in", "f", ":", "\n", "            ", "if", "'2M'", "in", "f", ":", "\n", "                ", "tmp", "=", "np", ".", "concatenate", "(", "[", "np", ".", "zeros", "(", "[", "20", ",", "1", "]", ")", ",", "np", ".", "loadtxt", "(", "data_path", "+", "f", ")", "]", ",", "axis", "=", "1", ")", "\n", "", "else", ":", "\n", "                ", "tmp", "=", "np", ".", "loadtxt", "(", "data_path", "+", "f", ")", "\n", "", "eval_perfs", "[", "i", "*", "20", ":", "(", "i", "+", "1", ")", "*", "n1", ",", ":", "]", "=", "tmp", "\n", "\n", "# compute statistics", "\n", "", "", "data1_litt", "=", "np", ".", "nanmean", "(", "eval_perfs", "[", ":", "n1", "]", "[", ":", ",", "-", "10", ":", "]", ",", "axis", "=", "1", ")", "\n", "data2_litt", "=", "np", ".", "nanmean", "(", "eval_perfs", "[", "n1", ":", "]", "[", ":", ",", "-", "10", ":", "]", ",", "axis", "=", "1", ")", "\n", "# data1_litt = np.nanmean(eval_perfs[:n1][:,100-10:100],axis=1)", "\n", "# data2_litt = np.nanmean(eval_perfs[n1:][:,100-10:100],axis=1)", "\n", "ks_litt", ",", "p_ks_litt", "=", "ks_2samp", "(", "data1_litt", ",", "data2_litt", ")", "\n", "ttest_litt", ",", "p_ttest_litt", "=", "ttest_ind", "(", "data1_litt", ",", "data2_litt", ",", "equal_var", "=", "False", ")", "\n", "data1_our", "=", "np", ".", "array", "(", "scores_our", "[", ":", "n1", "]", ")", "\n", "data2_our", "=", "np", ".", "array", "(", "scores_our", "[", "n1", ":", "]", ")", "\n", "ks_our", ",", "p_ks_our", "=", "ks_2samp", "(", "data1_our", ",", "data2_our", ")", "\n", "ttest_our", ",", "p_ttest_our", "=", "ttest_ind", "(", "data1_our", ",", "data2_our", ",", "equal_var", "=", "False", ")", "\n", "\n", "# estimation of confidence intervals with bootstrap method, https://github.com/facebookincubator/bootstrapped", "\n", "res_litt", "=", "bs", ".", "bootstrap_ab", "(", "data1_litt", ",", "data2_litt", ",", "bs_stats", ".", "mean", ",", "bs_compare", ".", "difference", ",", "num_iterations", "=", "10000", ")", "\n", "sign_litt", "=", "np", ".", "sign", "(", "res_litt", ".", "upper_bound", ")", "==", "np", ".", "sign", "(", "res_litt", ".", "lower_bound", ")", "\n", "res_our", "=", "bs", ".", "bootstrap_ab", "(", "data1_our", ",", "data2_our", ",", "bs_stats", ".", "mean", ",", "bs_compare", ".", "difference", ",", "num_iterations", "=", "10000", ")", "\n", "sign_our", "=", "np", ".", "sign", "(", "res_our", ".", "upper_bound", ")", "==", "np", ".", "sign", "(", "res_our", ".", "lower_bound", ")", "\n", "\n", "toSave", "=", "np", ".", "zeros", "(", "[", "4", ",", "4", "]", ")", "\n", "toSave", "[", "0", ":", "2", ",", ":", "]", "=", "np", ".", "array", "(", "[", "[", "ks_litt", ",", "p_ks_litt", ",", "ttest_litt", ",", "p_ttest_litt", "]", ",", "[", "ks_our", ",", "p_ks_our", ",", "ttest_our", ",", "p_ttest_our", "]", "]", ")", "\n", "toSave", "[", "2", ",", ":", "]", "=", "np", ".", "array", "(", "[", "res_litt", ".", "value", ",", "res_litt", ".", "lower_bound", ",", "res_litt", ".", "upper_bound", ",", "sign_litt", "*", "np", ".", "sign", "(", "res_litt", ".", "lower_bound", ")", "]", ")", "\n", "toSave", "[", "3", ",", ":", "]", "=", "np", ".", "array", "(", "[", "res_our", ".", "value", ",", "res_our", ".", "lower_bound", ",", "res_our", ".", "upper_bound", ",", "sign_our", "*", "np", ".", "sign", "(", "res_our", ".", "lower_bound", ")", "]", ")", "\n", "\n", "np", ".", "savetxt", "(", "data_path", "+", "'stats'", ",", "toSave", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.utils.extract_results.mean_scores": [[599, 616], ["enumerate", "numpy.array", "numpy.array", "numpy.array", "numpy.savetxt", "numpy.savetxt", "sorted", "os.listdir", "len", "numpy.loadtxt", "np.array.append", "np.array.append", "np.array.mean", "np.array.std", "np.array.min", "np.array.max", "np.array.mean", "np.array.std", "np.array.min", "np.array.max"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.mean", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.std", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.min", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.max", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.mean", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.std", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.min", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.max"], ["", "def", "mean_scores", "(", "data_path", ")", ":", "\n", "    ", "scores_our", "=", "[", "]", "\n", "scores_litt", "=", "[", "]", "\n", "for", "i", ",", "trial", "in", "enumerate", "(", "sorted", "(", "os", ".", "listdir", "(", "data_path", ")", ")", ")", ":", "\n", "\n", "        ", "if", "len", "(", "trial", ")", "<", "4", ":", "\n", "            ", "scores", "=", "np", ".", "loadtxt", "(", "data_path", "+", "trial", "+", "'/scores'", ")", "\n", "scores_our", ".", "append", "(", "scores", "[", "1", ",", "0", "]", ")", "\n", "scores_litt", ".", "append", "(", "scores", "[", "0", ",", "0", "]", ")", "\n", "\n", "", "", "scores_our", "=", "np", ".", "array", "(", "scores_our", ")", "\n", "scores_litt", "=", "np", ".", "array", "(", "scores_litt", ")", "\n", "\n", "toSave", "=", "np", ".", "array", "(", "[", "[", "scores_our", ".", "mean", "(", ")", ",", "scores_our", ".", "std", "(", ")", ",", "scores_our", ".", "min", "(", ")", ",", "scores_our", ".", "max", "(", ")", "]", ",", "[", "scores_litt", ".", "mean", "(", ")", ",", "scores_litt", ".", "std", "(", ")", ",", "scores_litt", ".", "min", "(", ")", ",", "scores_litt", ".", "max", "(", ")", "]", "]", ")", "\n", "np", ".", "savetxt", "(", "data_path", "+", "'stat_scores'", ",", "toSave", ")", "\n", "np", ".", "savetxt", "(", "data_path", "+", "'scores_our'", ",", "scores_our", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.utils.extract_results_cmc_cedric.extract_performances": [[49, 64], ["open", "json_data.readlines", "json.loads", "eval_rewards.append", "steps.append"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append"], ["def", "extract_performances", "(", "filename", ")", ":", "\n", "\n", "    ", "with", "open", "(", "filename", ")", "as", "json_data", ":", "\n", "        ", "lines", "=", "json_data", ".", "readlines", "(", ")", "\n", "", "eval_rewards", "=", "[", "0", "]", "\n", "steps", "=", "[", "0", "]", "\n", "score_litt", "=", "0", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "episode_data", "=", "json", ".", "loads", "(", "line", ")", "\n", "if", "'eval/return'", "in", "episode_data", ":", "\n", "            ", "step", "=", "episode_data", "[", "'total/epochs'", "]", "*", "2000", "\n", "perf", "=", "episode_data", "[", "'eval/return'", "]", "\n", "eval_rewards", ".", "append", "(", "perf", ")", "\n", "steps", ".", "append", "(", "step", ")", "\n", "", "", "return", "steps", ",", "eval_rewards", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.utils.extract_results_cmc_cedric.plot_vs": [[66, 197], ["enumerate", "len", "range", "range", "range", "numpy.array", "print", "matplotlib.figure", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.title", "matplotlib.plot", "matplotlib.fill_between", "matplotlib.plot", "matplotlib.fill_between", "matplotlib.legend", "matplotlib.savefig", "sorted", "numpy.empty", "range", "os.path.exists", "range", "numpy.nanmean", "numpy.nanmean", "numpy.nanstd", "numpy.nanstd", "numpy.nanstd", "numpy.nanstd", "type", "min", "max", "matplotlib.fill_between", "legend.append", "os.listdir", "len", "print", "extract_results_cmc_cedric.extract_performances", "run[].append", "len", "len", "numpy.loadtxt", "last_step_gep.append", "numpy.copy", "int", "range", "numpy.nanmedian", "numpy.nanmedian", "str", "round", "range", "numpy.nanstd", "numpy.sqrt", "numpy.nanstd", "numpy.sqrt", "numpy.nanstd", "numpy.sqrt", "numpy.nanstd", "numpy.sqrt", "type", "int", "steps_all.append", "len", "abs", "numpy.nanpercentile", "numpy.nanpercentile", "numpy.loadtxt", "int", "numpy.nanpercentile", "int", "numpy.nanpercentile", "int", "int"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.azure_utils.Container.exists", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.min", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.max", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.scripts.extract_results.extract_performances", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append"], ["", "def", "plot_vs", "(", "data_path", ",", "n1", ",", "n2", ",", "error_type", ",", "main_curve", ",", "gep", ")", ":", "\n", "    ", "run", "=", "{", "}", "\n", "run", "[", "'perfs'", "]", "=", "[", "]", "\n", "scores_our", "=", "[", "]", "\n", "steps_all", "=", "[", "]", "\n", "for", "i", ",", "trial", "in", "enumerate", "(", "sorted", "(", "os", ".", "listdir", "(", "data_path", ")", ")", ")", ":", "\n", "\n", "        ", "if", "len", "(", "trial", ")", "<", "4", ":", "\n", "            ", "print", "(", "'Extracting: '", ",", "trial", ")", "\n", "filename", "=", "data_path", "+", "trial", "+", "'/progress.json'", "\n", "# print(filename)", "\n", "steps", ",", "eval_rewards", "=", "extract_performances", "(", "filename", ")", "\n", "if", "gep", ":", "\n", "                ", "if", "int", "(", "trial", ")", "<", "281", ":", "\n", "                    ", "steps_all", ".", "append", "(", "np", ".", "loadtxt", "(", "data_path", "+", "'CMC_buffer_50_'", "+", "trial", "+", "'_steps'", ")", ")", "\n", "", "", "run", "[", "'perfs'", "]", ".", "append", "(", "eval_rewards", ")", "\n", "\n", "\n", "", "", "n_runs", "=", "len", "(", "run", "[", "'perfs'", "]", ")", "\n", "max_steps", "=", "0", "\n", "for", "i", "in", "range", "(", "n_runs", ")", ":", "\n", "        ", "if", "len", "(", "run", "[", "'perfs'", "]", "[", "i", "]", ")", ">", "max_steps", ":", "\n", "            ", "max_steps", "=", "len", "(", "run", "[", "'perfs'", "]", "[", "i", "]", ")", "\n", "", "", "max_steps", "=", "251", "\n", "eval_perfs", "=", "np", ".", "empty", "(", "[", "n_runs", ",", "max_steps", "]", ")", "*", "(", "np", ".", "nan", ")", "\n", "for", "i", "in", "range", "(", "n_runs", ")", ":", "\n", "        ", "eval_perfs", "[", "i", ",", ":", "len", "(", "run", "[", "'perfs'", "]", "[", "i", "]", ")", "]", "=", "run", "[", "'perfs'", "]", "[", "i", "]", "\n", "\n", "", "steps", "=", "range", "(", "0", ",", "max_steps", "*", "2000", ",", "2000", ")", "\n", "inds", "=", "np", ".", "array", "(", "range", "(", "n_runs", ")", ")", "\n", "# np.random.shuffle(inds)", "\n", "print", "(", "inds", ")", "\n", "assert", "n1", "+", "n2", "==", "n_runs", "\n", "\n", "if", "gep", ":", "\n", "# modify GEP source", "\n", "        ", "if", "os", ".", "path", ".", "exists", "(", "data_path", "+", "'buffer_perfs'", ")", ":", "\n", "            ", "gep_perfs", "=", "np", ".", "loadtxt", "(", "data_path", "+", "'buffer_perfs'", ")", "\n", "", "last_step_gep", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n1", ")", ":", "\n", "            ", "last_step_gep", ".", "append", "(", "steps_all", "[", "i", "]", "[", "-", "1", "]", ")", "\n", "tmp", "=", "np", ".", "copy", "(", "eval_perfs", "[", "i", ",", ":", "]", ")", "\n", "range_steps", "=", "int", "(", "round", "(", "last_step_gep", "[", "i", "]", "/", "2000", ")", ")", "\n", "eval_perfs", "[", "i", ",", "0", "]", "=", "0", "\n", "for", "j", "in", "range", "(", "1", ",", "range_steps", ")", ":", "\n", "                ", "target", "=", "j", "*", "2000", "\n", "min_dist", "=", "1e6", "\n", "ind", "=", "0", "\n", "for", "k", "in", "range", "(", "25", ")", ":", "\n", "                    ", "dist", "=", "abs", "(", "target", "-", "steps_all", "[", "i", "]", "[", "k", "]", ")", "\n", "if", "dist", "<", "min_dist", ":", "\n", "                        ", "ind", "=", "k", "\n", "min_dist", "=", "dist", "\n", "", "if", "k", ">", "0", "and", "dist", ">", "min_dist", ":", "\n", "                        ", "break", "\n", "", "", "eval_perfs", "[", "i", ",", "j", "]", "=", "gep_perfs", "[", "i", ",", "ind", "]", "\n", "", "eval_perfs", "[", "i", ",", "range_steps", ":", "]", "=", "tmp", "[", ":", "tmp", ".", "shape", "[", "0", "]", "-", "range_steps", "]", "\n", "\n", "# eval_perfs_gep = np.loadtxt('/media/flowers/3C3C66F13C66A59C/data_save/ddpg_study_baseline/data/HalfCheetah-v1/finals/GEP_2M_LinearPolicy/eval_performances_GEP2M_linear_policy')", "\n", "# eval_perfs_gep=np.concatenate([np.zeros([20,1]),eval_perfs_gep], axis=1)", "\n", "\n", "", "", "if", "main_curve", "==", "'mean'", ":", "\n", "        ", "toPlot_av1", "=", "np", ".", "nanmean", "(", "eval_perfs", "[", ":", "n1", "]", ",", "axis", "=", "0", ")", "\n", "toPlot_av2", "=", "np", ".", "nanmean", "(", "eval_perfs", "[", "inds", "[", "n1", ":", "]", "]", ",", "axis", "=", "0", ")", "\n", "# if gep:", "\n", "#     toPlot_av3 = np.nanmean(eval_perfs_gep,axis=0)", "\n", "", "elif", "main_curve", "==", "'median'", ":", "\n", "        ", "toPlot_av1", "=", "np", ".", "nanmedian", "(", "eval_perfs", "[", ":", "n1", "]", ",", "axis", "=", "0", ")", "\n", "toPlot_av2", "=", "np", ".", "nanmedian", "(", "eval_perfs", "[", "inds", "[", "n1", ":", "]", "]", ",", "axis", "=", "0", ")", "\n", "# if gep:", "\n", "#     toPlot_av3 = np.nanmedian(eval_perfs_gep,axis=0)", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "if", "error_type", "==", "'std'", ":", "\n", "        ", "toPlot_error1_add", "=", "np", ".", "nanstd", "(", "eval_perfs", "[", ":", "n1", "]", ",", "axis", "=", "0", ")", "\n", "toPlot_error1_sub", "=", "np", ".", "nanstd", "(", "eval_perfs", "[", ":", "n1", "]", ",", "axis", "=", "0", ")", "\n", "toPlot_error2_add", "=", "np", ".", "nanstd", "(", "eval_perfs", "[", "n1", ":", "]", ",", "axis", "=", "0", ")", "\n", "toPlot_error2_sub", "=", "np", ".", "nanstd", "(", "eval_perfs", "[", "n1", ":", "]", ",", "axis", "=", "0", ")", "\n", "# if gep:", "\n", "#     toPlot_error3_sub = np.nanstd(eval_perfs_gep,axis=0)", "\n", "", "elif", "error_type", "==", "'sem'", ":", "\n", "        ", "toPlot_error1_add", "=", "np", ".", "nanstd", "(", "eval_perfs", "[", ":", "n1", "]", ",", "axis", "=", "0", ")", "/", "np", ".", "sqrt", "(", "n1", ")", "\n", "toPlot_error1_sub", "=", "np", ".", "nanstd", "(", "eval_perfs", "[", ":", "n1", "]", ",", "axis", "=", "0", ")", "/", "np", ".", "sqrt", "(", "n1", ")", "\n", "toPlot_error2_add", "=", "np", ".", "nanstd", "(", "eval_perfs", "[", "n1", ":", "]", ",", "axis", "=", "0", ")", "/", "np", ".", "sqrt", "(", "n2", ")", "\n", "toPlot_error2_sub", "=", "np", ".", "nanstd", "(", "eval_perfs", "[", "n1", ":", "]", ",", "axis", "=", "0", ")", "/", "np", ".", "sqrt", "(", "n2", ")", "\n", "# if gep:", "\n", "#     toPlot_error3_sub = np.nanstd(eval_perfs_gep,axis=0) / np.sqrt(20)", "\n", "#     toPlot_error3_add = np.nanstd(eval_perfs_gep,axis=0) / np.sqrt(20)", "\n", "\n", "", "elif", "type", "(", "error_type", ")", "==", "int", ":", "\n", "        ", "assert", "(", "error_type", "<=", "100", "and", "error_type", ">", "0", ")", ",", "'error_type must be between 0 and 100'", "\n", "toPlot_error1_add", "=", "np", ".", "nanpercentile", "(", "eval_perfs", "[", ":", "n1", "]", ",", "int", "(", "100", "-", "(", "100", "-", "error_type", ")", "/", "2", ")", ",", "axis", "=", "0", ")", "-", "toPlot_av1", "\n", "toPlot_error1_sub", "=", "-", "np", ".", "nanpercentile", "(", "eval_perfs", "[", ":", "n1", "]", ",", "int", "(", "(", "100", "-", "error_type", ")", "/", "2", ")", ",", "axis", "=", "0", ")", "+", "toPlot_av1", "\n", "toPlot_error2_add", "=", "np", ".", "nanpercentile", "(", "eval_perfs", "[", "n1", ":", "]", ",", "int", "(", "100", "-", "(", "100", "-", "error_type", ")", "/", "2", ")", ",", "axis", "=", "0", ")", "-", "toPlot_av2", "\n", "toPlot_error2_sub", "=", "-", "np", ".", "nanpercentile", "(", "eval_perfs", "[", "n1", ":", "]", ",", "int", "(", "(", "100", "-", "error_type", ")", "/", "2", ")", ",", "axis", "=", "0", ")", "+", "toPlot_av2", "\n", "# if gep:", "\n", "#     toPlot_error3_add = np.nanpercentile(eval_perfs_gep,int(100-(100-error_type)/2),axis=0)-toPlot_av3", "\n", "#     toPlot_error3_sub = np.nanpercentile(eval_perfs_gep,int((100-error_type)/2),axis=0)+toPlot_av3", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "if", "type", "(", "error_type", ")", "==", "int", ":", "\n", "        ", "error_type", "=", "str", "(", "error_type", ")", "+", "'%'", "\n", "", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "20", ",", "13", ")", ",", "frameon", "=", "False", ")", "\n", "plt", ".", "xlabel", "(", "\"time steps\"", ")", "\n", "plt", ".", "ylabel", "(", "\"performance\"", ")", "\n", "plt", ".", "title", "(", "\"DDPG (noisy parameters), GEP-DDPG (noisy parameters) and GEP\"", ")", "\n", "\n", "plt", ".", "plot", "(", "steps", ",", "toPlot_av1", ",", "label", "=", "\"label\"", ",", "c", "=", "'#CC0000'", ")", "\n", "plt", ".", "fill_between", "(", "steps", ",", "toPlot_av1", "-", "toPlot_error1_sub", ",", "toPlot_av1", "+", "toPlot_error1_add", ",", "\n", "alpha", "=", "0.5", ",", "edgecolor", "=", "'#FF3333'", ",", "facecolor", "=", "'#FF6666'", ")", "\n", "plt", ".", "plot", "(", "steps", ",", "toPlot_av2", ",", "label", "=", "\"label\"", ",", "c", "=", "'#0066CC'", ")", "\n", "plt", ".", "fill_between", "(", "steps", ",", "toPlot_av2", "-", "toPlot_error2_sub", ",", "toPlot_av2", "+", "toPlot_error2_add", ",", "\n", "alpha", "=", "0.5", ",", "edgecolor", "=", "'#3999FF'", ",", "facecolor", "=", "'#66B2FF'", ")", "\n", "if", "gep", ":", "\n", "# plt.plot(steps, toPlot_av3, label=\"label\", c=(0.929,0.694,0.125))", "\n", "# plt.fill_between(steps, toPlot_av3 - toPlot_error3_sub, toPlot_av3 + toPlot_error3_add,", "\n", "#                  alpha=0.5, edgecolor=(1,0.75,0.25), facecolor=(1,0.8,0.35))", "\n", "        ", "min_switch", "=", "min", "(", "last_step_gep", ")", "\n", "max_switch", "=", "max", "(", "last_step_gep", ")", "\n", "# plt.axvline(x=50000, linestyle = '--', color='k')", "\n", "plt", ".", "fill_between", "(", "[", "min_switch", ",", "max_switch", "]", ",", "[", "-", "110", ",", "-", "110", "]", ",", "[", "110", ",", "110", "]", ",", "\n", "alpha", "=", "0.2", ",", "edgecolor", "=", "(", "0", ",", "0", ",", "0", ",", "0.4", ")", ",", "facecolor", "=", "(", "0", ",", "0", ",", "0", ",", "0.05", ")", ")", "\n", "\n", "", "legend", "=", "[", "'GEP-DDPG (noisy parameters), '", "+", "main_curve", "+", "' ('", "+", "error_type", "+", "')'", ",", "'DDPG (noisy parameters), '", "+", "main_curve", "+", "' ('", "+", "error_type", "+", "')'", "]", "\n", "if", "gep", ":", "\n", "       ", "legend", ".", "append", "(", "'GEP, '", "+", "main_curve", "+", "' ('", "+", "error_type", "+", "')'", ")", "\n", "", "plt", ".", "legend", "(", "legend", ",", "loc", "=", "4", ")", "\n", "\n", "plt", ".", "savefig", "(", "data_path", "+", "'DDPG_vs_GEP_DDPG_Plappert_vs_GEP'", "+", "main_curve", "+", "' ('", "+", "error_type", "+", "').png'", ",", "bbox_inches", "=", "'tight'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.utils.extract_results_cmc_cedric.compute_stats_vs": [[199, 264], ["enumerate", "len", "range", "range", "numpy.array", "numpy.nanmean", "numpy.nanmean", "scipy.stats.ks_2samp", "scipy.stats.ttest_ind", "numpy.array", "numpy.array", "scipy.stats.ks_2samp", "scipy.stats.ttest_ind", "bootstrapped.bootstrap_ab", "bootstrapped.bootstrap_ab", "numpy.zeros", "numpy.array", "numpy.array", "numpy.array", "sorted", "numpy.empty", "range", "numpy.random.shuffle", "range", "numpy.sign", "numpy.sign", "numpy.sign", "numpy.sign", "numpy.savetxt", "numpy.array", "os.listdir", "len", "extract_results_cmc_cedric.extract_performances", "run[].append", "numpy.loadtxt", "scores_our.append", "len", "len", "numpy.zeros", "numpy.sign", "numpy.sign", "len"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.dataset.Dataset.shuffle", "home.repos.pwc.inspect_result.flowersteam_geppg.scripts.extract_results.extract_performances", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append"], ["", "def", "compute_stats_vs", "(", "data_path", ",", "n1", ",", "n2", ",", "gep", ",", "save", "=", "True", ",", "var", "=", "False", ")", ":", "\n", "    ", "run", "=", "{", "}", "\n", "run", "[", "'perfs'", "]", "=", "[", "]", "\n", "scores_our", "=", "[", "]", "\n", "for", "i", ",", "trial", "in", "enumerate", "(", "sorted", "(", "os", ".", "listdir", "(", "data_path", ")", ")", ")", ":", "\n", "\n", "        ", "if", "len", "(", "trial", ")", "<", "4", ":", "\n", "# print('Extracting: ', trial)", "\n", "            ", "filename", "=", "data_path", "+", "trial", "+", "'/progress.json'", "\n", "# print(filename)", "\n", "steps", ",", "eval_rewards", "=", "extract_performances", "(", "filename", ")", "\n", "run", "[", "'perfs'", "]", ".", "append", "(", "eval_rewards", ")", "\n", "scores", "=", "np", ".", "loadtxt", "(", "data_path", "+", "trial", "+", "'/scores'", ")", "\n", "scores_our", ".", "append", "(", "scores", "[", "1", ",", "0", "]", ")", "\n", "\n", "", "", "n_runs", "=", "len", "(", "run", "[", "'perfs'", "]", ")", "\n", "assert", "n1", "+", "n2", "==", "n_runs", "\n", "max_steps", "=", "0", "\n", "for", "i", "in", "range", "(", "n_runs", ")", ":", "\n", "        ", "if", "len", "(", "run", "[", "'perfs'", "]", "[", "i", "]", ")", ">", "max_steps", ":", "\n", "            ", "max_steps", "=", "len", "(", "run", "[", "'perfs'", "]", "[", "i", "]", ")", "\n", "", "", "max_steps", "=", "251", "\n", "eval_perfs", "=", "np", ".", "empty", "(", "[", "n_runs", ",", "max_steps", "]", ")", "*", "(", "np", ".", "nan", ")", "\n", "for", "i", "in", "range", "(", "n_runs", ")", ":", "\n", "        ", "eval_perfs", "[", "i", ",", ":", "len", "(", "run", "[", "'perfs'", "]", "[", "i", "]", ")", "]", "=", "run", "[", "'perfs'", "]", "[", "i", "]", "\n", "\n", "# steps = steps[:700]", "\n", "", "inds", "=", "np", ".", "array", "(", "range", "(", "n_runs", ")", ")", "\n", "if", "var", ":", "\n", "        ", "np", ".", "random", ".", "shuffle", "(", "inds", ")", "\n", "\n", "", "if", "gep", ":", "\n", "# modify GEP source", "\n", "        ", "for", "i", "in", "range", "(", "n1", ")", ":", "#,n_runs):", "\n", "            ", "eval_perfs", "[", "i", ",", "51", ":", "]", "=", "eval_perfs", "[", "i", ",", ":", "200", "]", "\n", "eval_perfs", "[", "i", ",", ":", "51", "]", "=", "np", ".", "zeros", "(", "[", "51", "]", ")", "\n", "\n", "# print(inds)", "\n", "\n", "# compute statistics", "\n", "", "", "data1_litt", "=", "np", ".", "nanmean", "(", "eval_perfs", "[", "inds", "[", ":", "n1", "]", "]", "[", ":", ",", "-", "10", ":", "]", ",", "axis", "=", "1", ")", "\n", "data2_litt", "=", "np", ".", "nanmean", "(", "eval_perfs", "[", "inds", "[", "n1", ":", "]", "]", "[", ":", ",", "-", "10", ":", "]", ",", "axis", "=", "1", ")", "\n", "ks_litt", ",", "p_ks_litt", "=", "ks_2samp", "(", "data1_litt", ",", "data2_litt", ")", "\n", "ttest_litt", ",", "p_ttest_litt", "=", "ttest_ind", "(", "data1_litt", ",", "data2_litt", ",", "equal_var", "=", "False", ")", "\n", "data1_our", "=", "np", ".", "array", "(", "scores_our", "[", ":", "n1", "]", ")", "\n", "data2_our", "=", "np", ".", "array", "(", "scores_our", "[", "n1", ":", "]", ")", "\n", "ks_our", ",", "p_ks_our", "=", "ks_2samp", "(", "data1_our", ",", "data2_our", ")", "\n", "ttest_our", ",", "p_ttest_our", "=", "ttest_ind", "(", "data1_our", ",", "data2_our", ",", "equal_var", "=", "False", ")", "\n", "\n", "# estimation of confidence intervals with bootstrap method, https://github.com/facebookincubator/bootstrapped", "\n", "res_litt", "=", "bs", ".", "bootstrap_ab", "(", "data1_litt", ",", "data2_litt", ",", "bs_stats", ".", "mean", ",", "bs_compare", ".", "difference", ",", "num_iterations", "=", "10000", ")", "\n", "sign_litt", "=", "np", ".", "sign", "(", "res_litt", ".", "upper_bound", ")", "==", "np", ".", "sign", "(", "res_litt", ".", "lower_bound", ")", "\n", "res_our", "=", "bs", ".", "bootstrap_ab", "(", "data1_our", ",", "data2_our", ",", "bs_stats", ".", "mean", ",", "bs_compare", ".", "difference", ",", "num_iterations", "=", "10000", ")", "\n", "sign_our", "=", "np", ".", "sign", "(", "res_our", ".", "upper_bound", ")", "==", "np", ".", "sign", "(", "res_our", ".", "lower_bound", ")", "\n", "\n", "toSave", "=", "np", ".", "zeros", "(", "[", "4", ",", "4", "]", ")", "\n", "toSave", "[", "0", ":", "2", ",", ":", "]", "=", "np", ".", "array", "(", "[", "[", "ks_litt", ",", "p_ks_litt", ",", "ttest_litt", ",", "p_ttest_litt", "]", ",", "[", "ks_our", ",", "p_ks_our", ",", "ttest_our", ",", "p_ttest_our", "]", "]", ")", "\n", "toSave", "[", "2", ",", ":", "]", "=", "np", ".", "array", "(", "[", "res_litt", ".", "value", ",", "res_litt", ".", "lower_bound", ",", "res_litt", ".", "upper_bound", ",", "sign_litt", "*", "np", ".", "sign", "(", "res_litt", ".", "lower_bound", ")", "]", ")", "\n", "toSave", "[", "3", ",", ":", "]", "=", "np", ".", "array", "(", "[", "res_our", ".", "value", ",", "res_our", ".", "lower_bound", ",", "res_our", ".", "upper_bound", ",", "sign_our", "*", "np", ".", "sign", "(", "res_our", ".", "lower_bound", ")", "]", ")", "\n", "if", "save", ":", "\n", "        ", "np", ".", "savetxt", "(", "data_path", "+", "'stats'", ",", "toSave", ")", "\n", "\n", "", "if", "var", ":", "\n", "        ", "toReturn", "=", "np", ".", "array", "(", "[", "toSave", "[", "0", ",", "1", "]", ",", "toSave", "[", "0", ",", "3", "]", ",", "toSave", "[", "1", ",", "1", "]", ",", "toSave", "[", "1", ",", "3", "]", ",", "toSave", "[", "2", ",", "3", "]", ",", "toSave", "[", "3", ",", "3", "]", "]", ")", "\n", "return", "toReturn", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.utils.extract_results_cmc_cedric.plot_test_variability": [[266, 341], ["enumerate", "len", "range", "range", "range", "numpy.array", "numpy.random.shuffle", "print", "matplotlib.figure", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.title", "matplotlib.plot", "matplotlib.fill_between", "matplotlib.plot", "matplotlib.fill_between", "matplotlib.legend", "matplotlib.savefig", "sorted", "numpy.empty", "range", "numpy.nanmean", "numpy.nanmean", "numpy.nanstd", "numpy.nanstd", "numpy.nanstd", "numpy.nanstd", "type", "os.listdir", "len", "print", "extract_results_cmc_cedric.extract_performances", "run[].append", "len", "len", "numpy.nanmedian", "numpy.nanmedian", "str", "str", "numpy.nanstd", "numpy.sqrt", "numpy.nanstd", "numpy.sqrt", "numpy.nanstd", "numpy.sqrt", "numpy.nanstd", "numpy.sqrt", "type", "len", "int", "int", "int", "int", "numpy.nanpercentile", "numpy.nanpercentile", "int", "numpy.nanpercentile", "int", "numpy.nanpercentile", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.dataset.Dataset.shuffle", "home.repos.pwc.inspect_result.flowersteam_geppg.scripts.extract_results.extract_performances", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append"], ["", "", "def", "plot_test_variability", "(", "data_path", ",", "ind", ",", "error_type", ",", "main_curve", ")", ":", "\n", "    ", "run", "=", "{", "}", "\n", "run", "[", "'perfs'", "]", "=", "[", "]", "\n", "for", "i", ",", "trial", "in", "enumerate", "(", "sorted", "(", "os", ".", "listdir", "(", "data_path", ")", ")", ")", ":", "\n", "\n", "        ", "if", "len", "(", "trial", ")", "<", "4", ":", "\n", "            ", "print", "(", "'Extracting: '", ",", "trial", ")", "\n", "filename", "=", "data_path", "+", "trial", "+", "'/progress.json'", "\n", "# print(filename)", "\n", "steps", ",", "eval_rewards", "=", "extract_performances", "(", "filename", ")", "\n", "run", "[", "'perfs'", "]", ".", "append", "(", "eval_rewards", ")", "\n", "\n", "", "", "n_runs", "=", "len", "(", "run", "[", "'perfs'", "]", ")", "\n", "max_steps", "=", "0", "\n", "for", "i", "in", "range", "(", "n_runs", ")", ":", "\n", "        ", "if", "len", "(", "run", "[", "'perfs'", "]", "[", "i", "]", ")", ">", "max_steps", ":", "\n", "            ", "max_steps", "=", "len", "(", "run", "[", "'perfs'", "]", "[", "i", "]", ")", "\n", "", "", "max_steps", "=", "251", "\n", "eval_perfs", "=", "np", ".", "empty", "(", "[", "n_runs", ",", "max_steps", "]", ")", "*", "(", "np", ".", "nan", ")", "\n", "for", "i", "in", "range", "(", "n_runs", ")", ":", "\n", "        ", "eval_perfs", "[", "i", ",", ":", "len", "(", "run", "[", "'perfs'", "]", "[", "i", "]", ")", "]", "=", "run", "[", "'perfs'", "]", "[", "i", "]", "\n", "\n", "", "steps", "=", "range", "(", "0", ",", "max_steps", "*", "2000", ",", "2000", ")", "\n", "\n", "inds", "=", "np", ".", "array", "(", "range", "(", "n_runs", ")", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "inds", ")", "\n", "\n", "print", "(", "inds", ")", "\n", "\n", "if", "main_curve", "==", "'mean'", ":", "\n", "        ", "toPlot_av1", "=", "np", ".", "nanmean", "(", "eval_perfs", "[", "inds", "[", ":", "int", "(", "n_runs", "/", "2", ")", "]", "]", ",", "axis", "=", "0", ")", "\n", "toPlot_av2", "=", "np", ".", "nanmean", "(", "eval_perfs", "[", "inds", "[", "int", "(", "n_runs", "/", "2", ")", ":", "]", "]", ",", "axis", "=", "0", ")", "\n", "", "elif", "main_curve", "==", "'median'", ":", "\n", "        ", "toPlot_av1", "=", "np", ".", "nanmedian", "(", "eval_perfs", "[", "inds", "[", ":", "int", "(", "n_runs", "/", "2", ")", "]", "]", ",", "axis", "=", "0", ")", "\n", "toPlot_av2", "=", "np", ".", "nanmedian", "(", "eval_perfs", "[", "inds", "[", "int", "(", "n_runs", "/", "2", ")", ":", "]", "]", ",", "axis", "=", "0", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "if", "error_type", "==", "'std'", ":", "\n", "        ", "toPlot_error1_add", "=", "np", ".", "nanstd", "(", "eval_perfs", "[", "inds", "[", ":", "int", "(", "n_runs", "/", "2", ")", "]", "]", ",", "axis", "=", "0", ")", "\n", "toPlot_error1_sub", "=", "np", ".", "nanstd", "(", "eval_perfs", "[", "inds", "[", ":", "int", "(", "n_runs", "/", "2", ")", "]", "]", ",", "axis", "=", "0", ")", "\n", "toPlot_error2_add", "=", "np", ".", "nanstd", "(", "eval_perfs", "[", "inds", "[", "int", "(", "n_runs", "/", "2", ")", ":", "]", "]", ",", "axis", "=", "0", ")", "\n", "toPlot_error2_sub", "=", "np", ".", "nanstd", "(", "eval_perfs", "[", "inds", "[", "int", "(", "n_runs", "/", "2", ")", ":", "]", "]", ",", "axis", "=", "0", ")", "\n", "", "elif", "error_type", "==", "'sem'", ":", "\n", "        ", "toPlot_error1_add", "=", "np", ".", "nanstd", "(", "eval_perfs", "[", "inds", "[", ":", "int", "(", "n_runs", "/", "2", ")", "]", "]", ",", "axis", "=", "0", ")", "/", "np", ".", "sqrt", "(", "int", "(", "n_runs", "/", "2", ")", ")", "\n", "toPlot_error1_sub", "=", "np", ".", "nanstd", "(", "eval_perfs", "[", "inds", "[", ":", "int", "(", "n_runs", "/", "2", ")", "]", "]", ",", "axis", "=", "0", ")", "/", "np", ".", "sqrt", "(", "int", "(", "n_runs", "/", "2", ")", ")", "\n", "toPlot_error2_add", "=", "np", ".", "nanstd", "(", "eval_perfs", "[", "inds", "[", "int", "(", "n_runs", "/", "2", ")", ":", "]", "]", ",", "axis", "=", "0", ")", "/", "np", ".", "sqrt", "(", "int", "(", "n_runs", "/", "2", ")", ")", "\n", "toPlot_error2_sub", "=", "np", ".", "nanstd", "(", "eval_perfs", "[", "inds", "[", "int", "(", "n_runs", "/", "2", ")", ":", "]", "]", ",", "axis", "=", "0", ")", "/", "np", ".", "sqrt", "(", "int", "(", "n_runs", "/", "2", ")", ")", "\n", "", "elif", "type", "(", "error_type", ")", "==", "int", ":", "\n", "        ", "assert", "(", "error_type", "<=", "100", "and", "error_type", ">", "0", ")", ",", "'error_type must be between 0 and 100'", "\n", "toPlot_error1_add", "=", "np", ".", "nanpercentile", "(", "eval_perfs", "[", "inds", "[", ":", "int", "(", "n_runs", "/", "2", ")", "]", "]", ",", "int", "(", "100", "-", "(", "100", "-", "error_type", ")", "/", "2", ")", ",", "axis", "=", "0", ")", "-", "toPlot_av1", "\n", "toPlot_error1_sub", "=", "-", "np", ".", "nanpercentile", "(", "eval_perfs", "[", "inds", "[", ":", "int", "(", "n_runs", "/", "2", ")", "]", "]", ",", "int", "(", "(", "100", "-", "error_type", ")", "/", "2", ")", ",", "axis", "=", "0", ")", "+", "toPlot_av1", "\n", "toPlot_error2_add", "=", "np", ".", "nanpercentile", "(", "eval_perfs", "[", "inds", "[", "int", "(", "n_runs", "/", "2", ")", ":", "]", "]", ",", "int", "(", "100", "-", "(", "100", "-", "error_type", ")", "/", "2", ")", ",", "axis", "=", "0", ")", "-", "toPlot_av2", "\n", "toPlot_error2_sub", "=", "-", "np", ".", "nanpercentile", "(", "eval_perfs", "[", "inds", "[", "int", "(", "n_runs", "/", "2", ")", ":", "]", "]", ",", "int", "(", "(", "100", "-", "error_type", ")", "/", "2", ")", ",", "axis", "=", "0", ")", "+", "toPlot_av2", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "if", "type", "(", "error_type", ")", "==", "int", ":", "\n", "        ", "error_type", "=", "str", "(", "error_type", ")", "+", "'%'", "\n", "\n", "", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "20", ",", "13", ")", ",", "frameon", "=", "False", ")", "\n", "plt", ".", "xlabel", "(", "\"time steps\"", ")", "\n", "plt", ".", "ylabel", "(", "\"performance\"", ")", "\n", "plt", ".", "title", "(", "name_algo", "+", "', '", "+", "error_type", ")", "\n", "# plt.plot(steps, toPlot_av1, label=\"label\", c='#CC6600')", "\n", "# plt.fill_between(steps, toPlot_av1 - toPlot_std1, toPlot_av1 + toPlot_std1,", "\n", "#                  alpha=0.5, edgecolor='#FF9933', facecolor='#FFB266')", "\n", "plt", ".", "plot", "(", "steps", ",", "toPlot_av1", ",", "label", "=", "\"label\"", ",", "c", "=", "'#CC0000'", ")", "\n", "plt", ".", "fill_between", "(", "steps", ",", "toPlot_av1", "-", "toPlot_error1_sub", ",", "toPlot_av1", "+", "toPlot_error1_add", ",", "\n", "alpha", "=", "0.5", ",", "edgecolor", "=", "'#FF3333'", ",", "facecolor", "=", "'#FF6666'", ")", "\n", "plt", ".", "plot", "(", "steps", ",", "toPlot_av2", ",", "label", "=", "\"label\"", ",", "c", "=", "'#0066CC'", ")", "\n", "plt", ".", "fill_between", "(", "steps", ",", "toPlot_av2", "-", "toPlot_error2_sub", ",", "toPlot_av2", "+", "toPlot_error2_add", ",", "\n", "alpha", "=", "0.5", ",", "edgecolor", "=", "'#3999FF'", ",", "facecolor", "=", "'#66B2FF'", ")", "\n", "plt", ".", "legend", "(", "[", "'group 1'", ",", "'group 2'", "]", ",", "loc", "=", "4", ")", "\n", "\n", "plt", ".", "savefig", "(", "data_path", "+", "name_run", "+", "'_variability_'", "+", "str", "(", "ind", ")", ",", "bbox_inches", "=", "'tight'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.utils.extract_results_cmc_cedric.plot_all": [[343, 446], ["matplotlib.figure", "enumerate", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.title", "matplotlib.tick_params", "matplotlib.savefig", "len", "range", "range", "range", "matplotlib.figure", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.ylim", "matplotlib.title", "matplotlib.plot", "matplotlib.fill_between", "matplotlib.savefig", "numpy.savetxt", "numpy.loadtxt", "sorted", "numpy.empty", "range", "numpy.nanmean", "numpy.nanstd", "numpy.nanstd", "type", "min", "max", "numpy.savetxt", "matplotlib.fill_between", "os.listdir", "len", "print", "print", "extract_results_cmc_cedric.extract_performances", "run[].append", "matplotlib.plot", "len", "len", "last_step_gep.append", "numpy.copy", "int", "range", "numpy.nanmedian", "str", "numpy.array", "steps_all.append", "round", "range", "numpy.nanstd", "numpy.sqrt", "numpy.nanstd", "numpy.sqrt", "type", "numpy.loadtxt", "numpy.array", "len", "abs", "numpy.nanpercentile", "int", "numpy.nanpercentile", "int"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.min", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.max", "home.repos.pwc.inspect_result.flowersteam_geppg.scripts.extract_results.extract_performances", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append"], ["", "def", "plot_all", "(", "data_path", ",", "error_type", ",", "main_curve", ",", "gep", ")", ":", "\n", "    ", "import", "matplotlib", "\n", "font", "=", "{", "'family'", ":", "'normal'", ",", "\n", "'size'", ":", "40", "}", "\n", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "20", ",", "13", ")", ",", "frameon", "=", "False", ")", "\n", "run", "=", "{", "}", "\n", "run", "[", "'perfs'", "]", "=", "[", "]", "\n", "\n", "if", "gep", ":", "\n", "        ", "gep_perfs", "=", "np", ".", "loadtxt", "(", "data_path", "+", "'buffer_perfs'", ")", "\n", "\n", "", "steps_all", "=", "[", "]", "\n", "for", "i", ",", "trial", "in", "enumerate", "(", "sorted", "(", "os", ".", "listdir", "(", "data_path", ")", ")", ")", ":", "\n", "\n", "        ", "if", "len", "(", "trial", ")", "<", "4", ":", "\n", "            ", "print", "(", "'Extracting: '", ",", "trial", ")", "\n", "filename", "=", "data_path", "+", "trial", "+", "'/progress.json'", "\n", "print", "(", "filename", ")", "\n", "steps", ",", "eval_rewards", "=", "extract_performances", "(", "filename", ")", "\n", "if", "gep", ":", "\n", "                ", "steps_all", ".", "append", "(", "np", ".", "loadtxt", "(", "data_path", "+", "'CMC_buffer_50_'", "+", "trial", "+", "'_steps'", ")", ")", "\n", "", "run", "[", "'perfs'", "]", ".", "append", "(", "eval_rewards", ")", "\n", "plt", ".", "plot", "(", "np", ".", "array", "(", "steps", ")", "/", "1000", ",", "eval_rewards", ",", "linewidth", "=", "2.5", ")", "\n", "\n", "", "", "plt", ".", "xlabel", "(", "r'time steps ($\\times10\u00b3$)'", ",", "fontsize", "=", "40", ")", "\n", "plt", ".", "ylabel", "(", "'performance'", ",", "fontsize", "=", "40", ")", "\n", "plt", ".", "title", "(", "name_algo", ",", "fontsize", "=", "40", ")", "\n", "plt", ".", "tick_params", "(", "axis", "=", "'both'", ",", "which", "=", "'major'", ",", "labelsize", "=", "35", ")", "\n", "plt", ".", "savefig", "(", "data_path", "+", "'all_'", "+", "name_run", "+", "'_runs'", ",", "bbox_inches", "=", "'tight'", ")", "\n", "n_runs", "=", "len", "(", "run", "[", "'perfs'", "]", ")", "\n", "max_steps", "=", "0", "\n", "for", "i", "in", "range", "(", "n_runs", ")", ":", "\n", "        ", "if", "len", "(", "run", "[", "'perfs'", "]", "[", "i", "]", ")", ">", "max_steps", ":", "\n", "            ", "max_steps", "=", "len", "(", "run", "[", "'perfs'", "]", "[", "i", "]", ")", "\n", "", "", "max_steps", "=", "251", "\n", "eval_perfs", "=", "np", ".", "empty", "(", "[", "n_runs", ",", "max_steps", "]", ")", "*", "(", "np", ".", "nan", ")", "\n", "for", "i", "in", "range", "(", "n_runs", ")", ":", "\n", "        ", "eval_perfs", "[", "i", ",", ":", "len", "(", "run", "[", "'perfs'", "]", "[", "i", "]", ")", "]", "=", "run", "[", "'perfs'", "]", "[", "i", "]", "\n", "\n", "", "steps", "=", "range", "(", "0", ",", "max_steps", "*", "2000", ",", "2000", ")", "\n", "\n", "if", "gep", ":", "\n", "        ", "last_step_gep", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n_runs", ")", ":", "\n", "            ", "last_step_gep", ".", "append", "(", "steps_all", "[", "i", "]", "[", "-", "1", "]", ")", "\n", "tmp", "=", "np", ".", "copy", "(", "eval_perfs", "[", "i", ",", ":", "]", ")", "\n", "range_steps", "=", "int", "(", "round", "(", "last_step_gep", "[", "i", "]", "/", "2000", ")", ")", "\n", "eval_perfs", "[", "i", ",", "0", "]", "=", "0", "\n", "for", "j", "in", "range", "(", "1", ",", "range_steps", ")", ":", "\n", "                ", "target", "=", "j", "*", "2000", "\n", "min_dist", "=", "1e6", "\n", "ind", "=", "0", "\n", "for", "k", "in", "range", "(", "25", ")", ":", "\n", "                    ", "dist", "=", "abs", "(", "target", "-", "steps_all", "[", "i", "]", "[", "k", "]", ")", "\n", "if", "dist", "<", "min_dist", ":", "\n", "                        ", "ind", "=", "k", "\n", "min_dist", "=", "dist", "\n", "", "if", "k", ">", "0", "and", "dist", ">", "min_dist", ":", "\n", "                        ", "break", "\n", "", "", "eval_perfs", "[", "i", ",", "j", "]", "=", "gep_perfs", "[", "i", ",", "ind", "]", "\n", "", "eval_perfs", "[", "i", ",", "range_steps", ":", "]", "=", "tmp", "[", ":", "tmp", ".", "shape", "[", "0", "]", "-", "range_steps", "]", "\n", "\n", "", "", "if", "main_curve", "==", "'mean'", ":", "\n", "        ", "toPlot_av", "=", "np", ".", "nanmean", "(", "eval_perfs", ",", "axis", "=", "0", ")", "\n", "", "elif", "main_curve", "==", "'median'", ":", "\n", "        ", "toPlot_av", "=", "np", ".", "nanmedian", "(", "eval_perfs", ",", "axis", "=", "0", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "if", "error_type", "==", "'std'", ":", "\n", "        ", "toPlot_error_add", "=", "np", ".", "nanstd", "(", "eval_perfs", ",", "axis", "=", "0", ")", "\n", "toPlot_error_sub", "=", "np", ".", "nanstd", "(", "eval_perfs", ",", "axis", "=", "0", ")", "\n", "", "elif", "error_type", "==", "'sem'", ":", "\n", "        ", "toPlot_error_add", "=", "np", ".", "nanstd", "(", "eval_perfs", ",", "axis", "=", "0", ")", "/", "np", ".", "sqrt", "(", "n_runs", ")", "\n", "toPlot_error_sub", "=", "np", ".", "nanstd", "(", "eval_perfs", ",", "axis", "=", "0", ")", "/", "np", ".", "sqrt", "(", "n_runs", ")", "\n", "", "elif", "type", "(", "error_type", ")", "==", "int", ":", "\n", "        ", "assert", "(", "error_type", "<=", "100", "and", "error_type", ">", "0", ")", ",", "'error_type must be between 0 and 100'", "\n", "toPlot_error_add", "=", "np", ".", "nanpercentile", "(", "eval_perfs", ",", "int", "(", "100", "-", "(", "100", "-", "error_type", ")", "/", "2", ")", ",", "axis", "=", "0", ")", "-", "toPlot_av", "\n", "toPlot_error_sub", "=", "-", "np", ".", "nanpercentile", "(", "eval_perfs", ",", "int", "(", "(", "100", "-", "error_type", ")", "/", "2", ")", ",", "axis", "=", "0", ")", "+", "toPlot_av", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "if", "type", "(", "error_type", ")", "==", "int", ":", "\n", "        ", "error_type", "=", "str", "(", "error_type", ")", "+", "'%'", "\n", "", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "20", ",", "13", ")", ",", "frameon", "=", "False", ")", "\n", "plt", ".", "xlabel", "(", "\"time steps\"", ")", "\n", "plt", ".", "ylabel", "(", "\"performance\"", ")", "\n", "plt", ".", "ylim", "(", "[", "-", "110", ",", "110", "]", ")", "\n", "plt", ".", "title", "(", "name_algo", "+", "' '", "+", "main_curve", "+", "' ('", "+", "error_type", "+", "')'", ")", "\n", "plt", ".", "plot", "(", "steps", ",", "toPlot_av", ",", "label", "=", "\"label\"", ",", "c", "=", "'#0066CC'", ")", "\n", "plt", ".", "fill_between", "(", "steps", ",", "toPlot_av", "-", "toPlot_error_sub", ",", "toPlot_av", "+", "toPlot_error_add", ",", "\n", "alpha", "=", "0.5", ",", "edgecolor", "=", "'#3999FF'", ",", "facecolor", "=", "'#66B2FF'", ")", "\n", "#plt.legend()", "\n", "if", "gep", ":", "\n", "        ", "min_switch", "=", "min", "(", "last_step_gep", ")", "\n", "max_switch", "=", "max", "(", "last_step_gep", ")", "\n", "np", ".", "savetxt", "(", "data_path", "+", "'range_switch'", ",", "np", ".", "array", "(", "[", "min_switch", ",", "max_switch", "]", ")", ")", "\n", "# plt.axvline(x=50000, linestyle = '--', color='k')", "\n", "plt", ".", "fill_between", "(", "[", "min_switch", ",", "max_switch", "]", ",", "[", "-", "110", ",", "-", "110", "]", ",", "[", "110", ",", "110", "]", ",", "\n", "alpha", "=", "0.2", ",", "edgecolor", "=", "(", "0", ",", "0", ",", "0", ",", "0.4", ")", ",", "facecolor", "=", "(", "0", ",", "0", ",", "0", ",", "0.05", ")", ")", "\n", "", "plt", ".", "savefig", "(", "data_path", "+", "name_run", "+", "' '", "+", "main_curve", "+", "' ('", "+", "error_type", "+", "')'", ",", "bbox_inches", "=", "'tight'", ")", "\n", "np", ".", "savetxt", "(", "data_path", "+", "'eval_performances'", "+", "name_run", ",", "eval_perfs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.utils.extract_results_cmc_cedric.compute_scores_all": [[450, 542], ["matplotlib.figure", "enumerate", "matplotlib.figure", "matplotlib.hist", "matplotlib.xlabel", "matplotlib.title", "matplotlib.savefig", "matplotlib.figure", "matplotlib.hist", "matplotlib.xlabel", "matplotlib.title", "matplotlib.savefig", "sorted", "os.listdir", "len", "os.path.exists", "numpy.loadtxt", "hist_litt_scores.append", "hist_our_scores.append", "numpy.zeros", "print", "print", "extract_results_cmc_cedric.extract_performances", "numpy.array().mean", "numpy.array().std", "numpy.array().min", "numpy.array().max", "os.listdir", "numpy.savetxt", "hist_litt_scores.append", "hist_our_scores.append", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.zeros", "np.zeros.mean", "np.zeros.std", "np.zeros.min", "np.zeros.max", "tensorflow.Session", "tensorflow.global_variables_initializer", "sess.run", "tensorflow.train.import_meta_graph", "print", "tf.train.import_meta_graph.restore", "tensorflow.get_default_graph", "tf.get_default_graph.get_tensor_by_name", "tf.get_default_graph.get_tensor_by_name", "range", "open", "checkf.read", "s.replace.replace", "tensorflow.train.latest_checkpoint", "sum", "s.replace.replace", "open", "checkf.write", "env.reset", "observations[].squeeze", "sess.run", "actions.append", "env.step", "observations.append", "rewards.append"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.azure_utils.Container.exists", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.scripts.extract_results.extract_performances", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.mean", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.std", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.min", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.max", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.mean", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.std", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.min", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.max", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.main_config.run", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.sum", "home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.main_config.run", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.__init__.VecEnv.step", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append"], ["", "def", "compute_scores_all", "(", "data_path", ",", "name_algo", ",", "gep", ")", ":", "\n", "    ", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "20", ",", "13", ")", ",", "frameon", "=", "False", ")", "\n", "hist_litt_scores", "=", "[", "]", "\n", "hist_our_scores", "=", "[", "]", "\n", "for", "i", ",", "trial", "in", "enumerate", "(", "sorted", "(", "os", ".", "listdir", "(", "data_path", ")", ")", ")", ":", "\n", "        ", "if", "len", "(", "trial", ")", "<", "4", ":", "\n", "            ", "if", "os", ".", "path", ".", "exists", "(", "data_path", "+", "trial", "+", "'/scores'", ")", ":", "\n", "                ", "tmp_scores", "=", "np", ".", "loadtxt", "(", "data_path", "+", "trial", "+", "'/scores'", ")", "\n", "hist_litt_scores", ".", "append", "(", "tmp_scores", "[", "0", ",", "0", "]", ")", "\n", "hist_our_scores", ".", "append", "(", "tmp_scores", "[", "1", ",", "0", "]", ")", "\n", "", "else", ":", "\n", "# actor_folder = data_path + trial + '/tf_save/' + 'best1_5M/'", "\n", "# for f in os.listdir(actor_folder):", "\n", "#     os.rename(actor_folder+f, actor_folder+f[:-2])", "\n", "                ", "toSave", "=", "np", ".", "zeros", "(", "[", "2", ",", "4", "]", ")", "\n", "print", "(", "'Computing score: '", ",", "trial", ")", "\n", "filename", "=", "data_path", "+", "trial", "+", "'/progress.json'", "\n", "print", "(", "filename", ")", "\n", "steps", ",", "eval_rewards", "=", "extract_performances", "(", "filename", ")", "\n", "if", "gep", ":", "\n", "                    ", "steps", "=", "steps", "[", ":", "200", "]", "\n", "eval_rewards", "=", "eval_rewards", "[", ":", "200", "]", "\n", "actor_folder", "=", "data_path", "+", "trial", "+", "'/tf_save/'", "+", "'best1_5M/'", "\n", "", "else", ":", "\n", "                    ", "actor_folder", "=", "data_path", "+", "trial", "+", "'/tf_save/'", "\n", "\n", "", "toSave", "[", "0", ",", "0", "]", "=", "np", ".", "array", "(", "eval_rewards", "[", "-", "10", ":", "]", ")", ".", "mean", "(", ")", "\n", "toSave", "[", "0", ",", "1", "]", "=", "np", ".", "array", "(", "eval_rewards", "[", "-", "10", ":", "]", ")", ".", "std", "(", ")", "\n", "toSave", "[", "0", ",", "2", "]", "=", "np", ".", "array", "(", "eval_rewards", "[", "-", "10", ":", "]", ")", ".", "min", "(", ")", "\n", "toSave", "[", "0", ",", "3", "]", "=", "np", ".", "array", "(", "eval_rewards", "[", "-", "10", ":", "]", ")", ".", "max", "(", ")", "\n", "\n", "for", "f", "in", "os", ".", "listdir", "(", "actor_folder", ")", ":", "\n", "                    ", "if", "'meta'", "in", "f", ":", "\n", "                        ", "n_tests", "=", "100", "\n", "score", "=", "np", ".", "zeros", "(", "[", "n_tests", "]", ")", "\n", "\n", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "                            ", "init", "=", "tf", ".", "global_variables_initializer", "(", ")", "\n", "sess", ".", "run", "(", "init", ")", "\n", "saver", "=", "tf", ".", "train", ".", "import_meta_graph", "(", "actor_folder", "+", "f", ")", "\n", "print", "(", "actor_folder", "+", "f", ")", "\n", "\n", "#replace string in checkpoint file", "\n", "with", "open", "(", "actor_folder", "+", "'/checkpoint'", ",", "'r'", ")", "as", "checkf", ":", "\n", "                                ", "s", "=", "checkf", ".", "read", "(", ")", "\n", "", "if", "'projets'", "in", "s", ":", "\n", "                                ", "old_s", "=", "'/projets/flowers/cedric/ddpg_baseline_openAI_fork/results/MountainCarContinuous-v0/'", "\n", "s", "=", "s", ".", "replace", "(", "old_s", ",", "data_path", ")", "\n", "if", "gep", ":", "\n", "                                    ", "old_s", "=", "'/tf_save'", "\n", "s", "=", "s", ".", "replace", "(", "old_s", ",", "'/tf_save/'", "+", "'best1_5M'", ")", "\n", "", "with", "open", "(", "actor_folder", "+", "'/checkpoint'", ",", "'w'", ")", "as", "checkf", ":", "\n", "                                    ", "checkf", ".", "write", "(", "s", ")", "\n", "\n", "", "", "saver", ".", "restore", "(", "sess", ",", "tf", ".", "train", ".", "latest_checkpoint", "(", "actor_folder", ")", ")", "\n", "graph", "=", "tf", ".", "get_default_graph", "(", ")", "\n", "obs0", "=", "graph", ".", "get_tensor_by_name", "(", "\"obs0:0\"", ")", "\n", "actor_tf", "=", "graph", ".", "get_tensor_by_name", "(", "\"actor/Tanh:0\"", ")", "\n", "for", "i", "in", "range", "(", "n_tests", ")", ":", "\n", "                                ", "done", "=", "False", "\n", "observations", "=", "[", "env", ".", "reset", "(", ")", "]", "\n", "actions", "=", "[", "]", "\n", "rewards", "=", "[", "]", "\n", "while", "not", "done", ":", "\n", "                                    ", "last_obs", "=", "observations", "[", "-", "1", "]", ".", "squeeze", "(", ")", "\n", "feed_dict", "=", "{", "obs0", ":", "[", "last_obs", "]", "}", "\n", "action", "=", "sess", ".", "run", "(", "actor_tf", ",", "feed_dict", "=", "feed_dict", ")", "\n", "actions", ".", "append", "(", "action", ")", "\n", "# env.render()", "\n", "out", "=", "env", ".", "step", "(", "actions", "[", "-", "1", "]", ")", "\n", "observations", ".", "append", "(", "out", "[", "0", "]", ")", "\n", "rewards", ".", "append", "(", "out", "[", "1", "]", ")", "\n", "done", "=", "out", "[", "2", "]", "\n", "", "score", "[", "i", "]", "=", "sum", "(", "rewards", ")", "\n", "", "", "toSave", "[", "1", ",", "0", "]", "=", "score", ".", "mean", "(", ")", "\n", "toSave", "[", "1", ",", "1", "]", "=", "score", ".", "std", "(", ")", "\n", "toSave", "[", "1", ",", "2", "]", "=", "score", ".", "min", "(", ")", "\n", "toSave", "[", "1", ",", "3", "]", "=", "score", ".", "max", "(", ")", "\n", "break", "\n", "", "", "np", ".", "savetxt", "(", "data_path", "+", "trial", "+", "'/scores'", ",", "toSave", ")", "\n", "hist_litt_scores", ".", "append", "(", "toSave", "[", "0", ",", "0", "]", ")", "\n", "hist_our_scores", ".", "append", "(", "toSave", "[", "1", ",", "0", "]", ")", "\n", "", "", "", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "hist", "(", "hist_litt_scores", ")", "\n", "plt", ".", "xlabel", "(", "'performance returns'", ")", "\n", "plt", ".", "title", "(", "'Histogram of final performances for '", "+", "name_algo", ")", "\n", "plt", ".", "savefig", "(", "data_path", "+", "name_algo", "+", "'_histogram_litt_measure'", ",", "bbox_inches", "=", "'tight'", ")", "\n", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "hist", "(", "hist_our_scores", ")", "\n", "plt", ".", "xlabel", "(", "'performance returns'", ")", "\n", "plt", ".", "title", "(", "'Histogram of final performances for '", "+", "name_algo", ")", "\n", "plt", ".", "savefig", "(", "data_path", "+", "name_algo", "+", "'_histogram_our_measure'", ",", "bbox_inches", "=", "'tight'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.utils.extract_results_cmc_cedric.correlation_gep_ddpg": [[543, 558], ["list", "numpy.loadtxt", "range", "scipy.stats.pearsonr", "scipy.stats.pearsonr", "numpy.array", "numpy.savetxt", "range", "len", "print", "numpy.loadtxt", "litt_scores.append", "our_scores.append", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "str"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.azure_utils.Container.list", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append"], ["", "def", "correlation_gep_ddpg", "(", "data_path", ")", ":", "\n", "    ", "litt_scores", "=", "[", "]", "\n", "our_scores", "=", "[", "]", "\n", "list_dir", "=", "list", "(", "range", "(", "201", ",", "241", ")", ")", "\n", "gep_scores", "=", "np", ".", "loadtxt", "(", "data_path", "+", "'gep_scores'", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "list_dir", ")", ")", ":", "\n", "        ", "trial", "=", "list_dir", "[", "i", "]", "\n", "print", "(", "'Extracting: '", ",", "trial", ")", "\n", "array", "=", "np", ".", "loadtxt", "(", "data_path", "+", "str", "(", "trial", ")", "+", "'/scores'", ")", "\n", "litt_scores", ".", "append", "(", "array", "[", "0", ",", "0", "]", ")", "\n", "our_scores", ".", "append", "(", "array", "[", "1", ",", "0", "]", ")", "\n", "", "our_r", ",", "our_p", "=", "pearsonr", "(", "np", ".", "array", "(", "our_scores", ")", ",", "np", ".", "array", "(", "gep_scores", ")", ")", "\n", "litt_r", ",", "litt_p", "=", "pearsonr", "(", "np", ".", "array", "(", "litt_scores", ")", ",", "np", ".", "array", "(", "gep_scores", ")", ")", "\n", "toSave", "=", "np", ".", "array", "(", "[", "[", "our_r", ",", "our_p", "]", ",", "[", "litt_r", ",", "litt_p", "]", "]", ")", "\n", "np", ".", "savetxt", "(", "data_path", "+", "'correlations'", ",", "toSave", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.utils.extract_results_cmc_cedric.plot_gep": [[559, 637], ["range", "matplotlib.figure", "numpy.loadtxt", "range", "range", "range", "matplotlib.savefig", "print", "matplotlib.figure", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.title", "matplotlib.plot", "matplotlib.fill_between", "matplotlib.savefig", "numpy.savetxt", "matplotlib.figure", "matplotlib.title", "eval_perfs[].mean", "matplotlib.hist", "matplotlib.savefig", "matplotlib.figure", "matplotlib.title", "numpy.loadtxt", "matplotlib.hist", "matplotlib.savefig", "numpy.empty", "steps_all.append", "range", "matplotlib.plot", "numpy.nanmean", "numpy.nanstd", "numpy.nanstd", "type", "numpy.loadtxt", "range", "numpy.nanmedian", "str", "abs", "numpy.nanstd", "numpy.sqrt", "numpy.nanstd", "numpy.sqrt", "type", "numpy.nanpercentile", "str", "int", "numpy.nanpercentile", "int"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.mean", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append"], ["", "def", "plot_gep", "(", "data_path", ",", "error_type", ",", "main_curve", ",", "n1", ")", ":", "\n", "    ", "max_steps", "=", "251", "\n", "eval_perfs", "=", "np", ".", "empty", "(", "[", "20", ",", "max_steps", "]", ")", "*", "np", ".", "nan", "\n", "steps", "=", "range", "(", "0", ",", "max_steps", "*", "2000", ",", "2000", ")", "\n", "ind", "=", "0", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "20", ",", "13", ")", ",", "frameon", "=", "False", ")", "\n", "\n", "gep_perfs", "=", "np", ".", "loadtxt", "(", "data_path", "+", "'buffer_perfs'", ")", "\n", "steps_all", "=", "[", "]", "\n", "for", "trial", "in", "range", "(", "20", ")", ":", "\n", "        ", "steps_all", ".", "append", "(", "np", ".", "loadtxt", "(", "data_path", "+", "'CMC_buffer_500_'", "+", "str", "(", "trial", "+", "1", ")", "+", "'_steps'", ")", ")", "\n", "\n", "", "n_runs", "=", "eval_perfs", ".", "shape", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "n_runs", ")", ":", "\n", "        ", "eval_perfs", "[", "i", ",", "0", "]", "=", "0", "\n", "for", "j", "in", "range", "(", "1", ",", "max_steps", ")", ":", "\n", "            ", "target", "=", "(", "j", "+", "1", ")", "*", "2000", "\n", "min_dist", "=", "1e6", "\n", "ind", "=", "0", "\n", "for", "k", "in", "range", "(", "251", ")", ":", "\n", "                ", "dist", "=", "abs", "(", "target", "-", "steps_all", "[", "i", "]", "[", "k", "]", ")", "\n", "if", "dist", "<", "min_dist", ":", "\n", "                    ", "ind", "=", "k", "\n", "min_dist", "=", "dist", "\n", "", "if", "k", ">", "0", "and", "dist", ">", "min_dist", ":", "\n", "                    ", "break", "\n", "", "", "eval_perfs", "[", "i", ",", "j", "]", "=", "gep_perfs", "[", "i", ",", "ind", "]", "\n", "", "", "for", "i", "in", "range", "(", "n_runs", ")", ":", "\n", "        ", "plt", ".", "plot", "(", "steps", ",", "eval_perfs", "[", "i", ",", ":", "]", ")", "\n", "", "plt", ".", "savefig", "(", "data_path", "+", "'all_'", "+", "name_run", "+", "'_runs'", ",", "bbox_inches", "=", "'tight'", ")", "\n", "print", "(", "'n_runs :'", ",", "n_runs", ")", "\n", "if", "main_curve", "==", "'mean'", ":", "\n", "        ", "toPlot_av", "=", "np", ".", "nanmean", "(", "eval_perfs", ",", "axis", "=", "0", ")", "\n", "", "elif", "main_curve", "==", "'median'", ":", "\n", "        ", "toPlot_av", "=", "np", ".", "nanmedian", "(", "eval_perfs", ",", "axis", "=", "0", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "if", "error_type", "==", "'std'", ":", "\n", "        ", "toPlot_error_add", "=", "np", ".", "nanstd", "(", "eval_perfs", ",", "axis", "=", "0", ")", "\n", "toPlot_error_sub", "=", "np", ".", "nanstd", "(", "eval_perfs", ",", "axis", "=", "0", ")", "\n", "", "elif", "error_type", "==", "'sem'", ":", "\n", "        ", "toPlot_error_add", "=", "np", ".", "nanstd", "(", "eval_perfs", ",", "axis", "=", "0", ")", "/", "np", ".", "sqrt", "(", "n_runs", ")", "\n", "toPlot_error_sub", "=", "np", ".", "nanstd", "(", "eval_perfs", ",", "axis", "=", "0", ")", "/", "np", ".", "sqrt", "(", "n_runs", ")", "\n", "", "elif", "type", "(", "error_type", ")", "==", "int", ":", "\n", "        ", "assert", "(", "error_type", "<=", "100", "and", "error_type", ">", "0", ")", ",", "'error_type must be between 0 and 100'", "\n", "toPlot_error_add", "=", "np", ".", "nanpercentile", "(", "eval_perfs", ",", "int", "(", "100", "-", "(", "100", "-", "error_type", ")", "/", "2", ")", ",", "axis", "=", "0", ")", "-", "toPlot_av", "\n", "toPlot_error_sub", "=", "-", "np", ".", "nanpercentile", "(", "eval_perfs", ",", "int", "(", "(", "100", "-", "error_type", ")", "/", "2", ")", ",", "axis", "=", "0", ")", "+", "toPlot_av", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "if", "type", "(", "error_type", ")", "==", "int", ":", "\n", "        ", "error_type", "=", "str", "(", "error_type", ")", "+", "'%'", "\n", "", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "20", ",", "13", ")", ",", "frameon", "=", "False", ")", "\n", "plt", ".", "xlabel", "(", "\"time steps\"", ")", "\n", "plt", ".", "ylabel", "(", "\"performance\"", ")", "\n", "plt", ".", "title", "(", "name_algo", "+", "' '", "+", "main_curve", "+", "' ('", "+", "error_type", "+", "')'", ")", "\n", "plt", ".", "plot", "(", "steps", ",", "toPlot_av", ",", "label", "=", "\"label\"", ",", "c", "=", "'#0066CC'", ")", "\n", "plt", ".", "fill_between", "(", "steps", ",", "toPlot_av", "-", "toPlot_error_sub", ",", "toPlot_av", "+", "toPlot_error_add", ",", "\n", "alpha", "=", "0.5", ",", "edgecolor", "=", "'#3999FF'", ",", "facecolor", "=", "'#66B2FF'", ")", "\n", "#plt.legend()", "\n", "\n", "\n", "plt", ".", "savefig", "(", "data_path", "+", "'GEP_500k'", "+", "' '", "+", "main_curve", "+", "' ('", "+", "error_type", "+", "')'", ",", "bbox_inches", "=", "'tight'", ")", "\n", "np", ".", "savetxt", "(", "data_path", "+", "'eval_performances_GEP2M_linear_policy'", ",", "eval_perfs", ")", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "20", ",", "13", ")", ",", "frameon", "=", "False", ")", "\n", "plt", ".", "title", "(", "'Histograms of final returns'", ")", "\n", "final_returns", "=", "eval_perfs", "[", ":", ",", "-", "10", ":", "]", ".", "mean", "(", "axis", "=", "1", ")", "\n", "plt", ".", "hist", "(", "final_returns", ")", "\n", "\n", "plt", ".", "savefig", "(", "data_path", "+", "'histo_litt'", ")", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "20", ",", "13", ")", ",", "frameon", "=", "False", ")", "\n", "\n", "plt", ".", "title", "(", "'Histograms of final returns'", ")", "\n", "final_returns", "=", "np", ".", "loadtxt", "(", "data_path", "+", "'scores_our'", ")", "\n", "plt", ".", "hist", "(", "final_returns", ")", "\n", "\n", "plt", ".", "savefig", "(", "data_path", "+", "'histo_our'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.utils.extract_results_cmc_cedric.compute_stat_from_eval_perfs": [[639, 678], ["enumerate", "numpy.nanmean", "numpy.nanmean", "scipy.stats.ks_2samp", "scipy.stats.ttest_ind", "numpy.array", "numpy.array", "scipy.stats.ks_2samp", "scipy.stats.ttest_ind", "bootstrapped.bootstrap_ab", "bootstrapped.bootstrap_ab", "numpy.zeros", "numpy.array", "numpy.array", "numpy.array", "numpy.savetxt", "numpy.empty", "sorted", "numpy.sign", "numpy.sign", "numpy.sign", "numpy.sign", "os.listdir", "numpy.loadtxt", "range", "scores_our.append", "numpy.concatenate", "numpy.loadtxt", "numpy.sign", "numpy.sign", "numpy.zeros", "numpy.loadtxt"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.concatenate"], ["", "def", "compute_stat_from_eval_perfs", "(", "data_path", ",", "n1", ",", "n2", ")", ":", "\n", "    ", "eval_perfs", "=", "np", ".", "empty", "(", "[", "n1", "+", "n2", ",", "251", "]", ")", "*", "np", ".", "nan", "\n", "scores_our", "=", "[", "]", "\n", "for", "i", ",", "f", "in", "enumerate", "(", "sorted", "(", "os", ".", "listdir", "(", "data_path", ")", ")", ")", ":", "\n", "        ", "if", "'our'", "in", "f", ":", "\n", "            ", "scores", "=", "np", ".", "loadtxt", "(", "data_path", "+", "f", ")", "\n", "for", "j", "in", "range", "(", "scores", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "scores_our", ".", "append", "(", "scores", "[", "j", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "'2M'", "in", "f", ":", "\n", "                ", "tmp", "=", "np", ".", "concatenate", "(", "[", "np", ".", "zeros", "(", "[", "20", ",", "1", "]", ")", ",", "np", ".", "loadtxt", "(", "data_path", "+", "f", ")", "]", ",", "axis", "=", "1", ")", "\n", "", "else", ":", "\n", "                ", "tmp", "=", "np", ".", "loadtxt", "(", "data_path", "+", "f", ")", "\n", "", "if", "tmp", ".", "shape", "[", "1", "]", "==", "252", ":", "\n", "                ", "tmp", "=", "tmp", "[", ":", ",", ":", "-", "1", "]", "\n", "", "eval_perfs", "[", "i", "*", "20", ":", "(", "i", "+", "1", ")", "*", "n1", ",", ":", "]", "=", "tmp", "\n", "\n", "# compute statistics", "\n", "", "", "data1_litt", "=", "np", ".", "nanmean", "(", "eval_perfs", "[", ":", "n1", "]", "[", ":", ",", "-", "10", ":", "]", ",", "axis", "=", "1", ")", "\n", "data2_litt", "=", "np", ".", "nanmean", "(", "eval_perfs", "[", "n1", ":", "]", "[", ":", ",", "-", "10", ":", "]", ",", "axis", "=", "1", ")", "\n", "ks_litt", ",", "p_ks_litt", "=", "ks_2samp", "(", "data1_litt", ",", "data2_litt", ")", "\n", "ttest_litt", ",", "p_ttest_litt", "=", "ttest_ind", "(", "data1_litt", ",", "data2_litt", ",", "equal_var", "=", "False", ")", "\n", "data1_our", "=", "np", ".", "array", "(", "scores_our", "[", ":", "n1", "]", ")", "\n", "data2_our", "=", "np", ".", "array", "(", "scores_our", "[", "n1", ":", "]", ")", "\n", "ks_our", ",", "p_ks_our", "=", "ks_2samp", "(", "data1_our", ",", "data2_our", ")", "\n", "ttest_our", ",", "p_ttest_our", "=", "ttest_ind", "(", "data1_our", ",", "data2_our", ",", "equal_var", "=", "False", ")", "\n", "\n", "# estimation of confidence intervals with bootstrap method, https://github.com/facebookincubator/bootstrapped", "\n", "res_litt", "=", "bs", ".", "bootstrap_ab", "(", "data1_litt", ",", "data2_litt", ",", "bs_stats", ".", "mean", ",", "bs_compare", ".", "difference", ",", "num_iterations", "=", "10000", ")", "\n", "sign_litt", "=", "np", ".", "sign", "(", "res_litt", ".", "upper_bound", ")", "==", "np", ".", "sign", "(", "res_litt", ".", "lower_bound", ")", "\n", "res_our", "=", "bs", ".", "bootstrap_ab", "(", "data1_our", ",", "data2_our", ",", "bs_stats", ".", "mean", ",", "bs_compare", ".", "difference", ",", "num_iterations", "=", "10000", ")", "\n", "sign_our", "=", "np", ".", "sign", "(", "res_our", ".", "upper_bound", ")", "==", "np", ".", "sign", "(", "res_our", ".", "lower_bound", ")", "\n", "\n", "toSave", "=", "np", ".", "zeros", "(", "[", "4", ",", "4", "]", ")", "\n", "toSave", "[", "0", ":", "2", ",", ":", "]", "=", "np", ".", "array", "(", "[", "[", "ks_litt", ",", "p_ks_litt", ",", "ttest_litt", ",", "p_ttest_litt", "]", ",", "[", "ks_our", ",", "p_ks_our", ",", "ttest_our", ",", "p_ttest_our", "]", "]", ")", "\n", "toSave", "[", "2", ",", ":", "]", "=", "np", ".", "array", "(", "[", "res_litt", ".", "value", ",", "res_litt", ".", "lower_bound", ",", "res_litt", ".", "upper_bound", ",", "sign_litt", "*", "np", ".", "sign", "(", "res_litt", ".", "lower_bound", ")", "]", ")", "\n", "toSave", "[", "3", ",", ":", "]", "=", "np", ".", "array", "(", "[", "res_our", ".", "value", ",", "res_our", ".", "lower_bound", ",", "res_our", ".", "upper_bound", ",", "sign_our", "*", "np", ".", "sign", "(", "res_our", ".", "lower_bound", ")", "]", ")", "\n", "\n", "np", ".", "savetxt", "(", "data_path", "+", "'stats'", ",", "toSave", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.utils.extract_results_cmc_cedric.mean_scores": [[679, 696], ["enumerate", "numpy.array", "numpy.array", "numpy.array", "numpy.savetxt", "numpy.savetxt", "sorted", "os.listdir", "len", "numpy.loadtxt", "np.array.append", "np.array.append", "np.array.mean", "np.array.std", "np.array.min", "np.array.max", "np.array.mean", "np.array.std", "np.array.min", "np.array.max"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.mean", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.std", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.min", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.max", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.mean", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.std", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.min", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.max"], ["", "def", "mean_scores", "(", "data_path", ")", ":", "\n", "    ", "scores_our", "=", "[", "]", "\n", "scores_litt", "=", "[", "]", "\n", "for", "i", ",", "trial", "in", "enumerate", "(", "sorted", "(", "os", ".", "listdir", "(", "data_path", ")", ")", ")", ":", "\n", "\n", "        ", "if", "len", "(", "trial", ")", "<", "4", ":", "\n", "            ", "scores", "=", "np", ".", "loadtxt", "(", "data_path", "+", "trial", "+", "'/scores'", ")", "\n", "scores_our", ".", "append", "(", "scores", "[", "1", ",", "0", "]", ")", "\n", "scores_litt", ".", "append", "(", "scores", "[", "0", ",", "0", "]", ")", "\n", "\n", "", "", "scores_our", "=", "np", ".", "array", "(", "scores_our", ")", "\n", "scores_litt", "=", "np", ".", "array", "(", "scores_litt", ")", "\n", "\n", "toSave", "=", "np", ".", "array", "(", "[", "[", "scores_our", ".", "mean", "(", ")", ",", "scores_our", ".", "std", "(", ")", ",", "scores_our", ".", "min", "(", ")", ",", "scores_our", ".", "max", "(", ")", "]", ",", "[", "scores_litt", ".", "mean", "(", ")", ",", "scores_litt", ".", "std", "(", ")", ",", "scores_litt", ".", "min", "(", ")", ",", "scores_litt", ".", "max", "(", ")", "]", "]", ")", "\n", "np", ".", "savetxt", "(", "data_path", "+", "'stat_scores'", ",", "toSave", ")", "\n", "np", ".", "savetxt", "(", "data_path", "+", "'scores_our'", ",", "scores_our", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.utils.extract_results_cmc.extract_performances": [[10, 24], ["open", "json_data.readlines", "json.loads", "eval_rewards.append", "steps.append"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append"], ["def", "extract_performances", "(", "filename", ")", ":", "\n", "\n", "    ", "with", "open", "(", "filename", ")", "as", "json_data", ":", "\n", "        ", "lines", "=", "json_data", ".", "readlines", "(", ")", "\n", "", "eval_rewards", "=", "[", "0", "]", "\n", "steps", "=", "[", "0", "]", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "episode_data", "=", "json", ".", "loads", "(", "line", ")", "\n", "if", "'eval/return'", "in", "episode_data", ":", "\n", "            ", "step", "=", "episode_data", "[", "'total/epochs'", "]", "*", "2000", "\n", "perf", "=", "episode_data", "[", "'eval/return'", "]", "\n", "eval_rewards", ".", "append", "(", "perf", ")", "\n", "steps", ".", "append", "(", "step", ")", "\n", "", "", "return", "steps", ",", "eval_rewards", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.utils.extract_results_cmc.plot_vs": [[26, 81], ["enumerate", "len", "numpy.zeros", "range", "range", "range", "range", "numpy.array", "print", "eval_perfs[].mean", "eval_perfs[].mean", "matplotlib.figure", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.title", "matplotlib.plot", "matplotlib.fill_between", "matplotlib.plot", "matplotlib.fill_between", "matplotlib.legend", "matplotlib.savefig", "sorted", "numpy.empty", "range", "eval_perfs[].std", "eval_perfs[].std", "os.listdir", "len", "print", "extract_results_cmc.extract_performances", "run[].append", "len", "len", "len", "len", "int", "int", "int", "int"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.mean", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.mean", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.std", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.std", "home.repos.pwc.inspect_result.flowersteam_geppg.scripts.extract_results.extract_performances", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append"], ["", "def", "plot_vs", "(", "data_path", ")", ":", "\n", "    ", "run", "=", "{", "}", "\n", "run", "[", "'perfs'", "]", "=", "[", "]", "\n", "for", "i", ",", "trial", "in", "enumerate", "(", "sorted", "(", "os", ".", "listdir", "(", "data_path", ")", ")", ")", ":", "\n", "\n", "        ", "if", "len", "(", "trial", ")", "<", "3", ":", "\n", "            ", "print", "(", "'Extracting: '", ",", "trial", ")", "\n", "filename", "=", "data_path", "+", "trial", "+", "'/progress.json'", "\n", "# print(filename)", "\n", "steps", ",", "eval_rewards", "=", "extract_performances", "(", "filename", ")", "\n", "run", "[", "'perfs'", "]", ".", "append", "(", "eval_rewards", ")", "\n", "\n", "", "", "n_runs", "=", "len", "(", "run", "[", "'perfs'", "]", ")", "\n", "eval_perfs", "=", "np", ".", "zeros", "(", "[", "n_runs", ",", "len", "(", "run", "[", "'perfs'", "]", "[", "0", "]", ")", "]", ")", "\n", "for", "i", "in", "range", "(", "n_runs", ")", ":", "\n", "        ", "eval_perfs", "[", "i", ",", ":", "]", "=", "run", "[", "'perfs'", "]", "[", "i", "]", "\n", "\n", "", "max_steps", "=", "0", "\n", "for", "i", "in", "range", "(", "n_runs", ")", ":", "\n", "        ", "if", "len", "(", "run", "[", "'perfs'", "]", "[", "i", "]", ")", ">", "max_steps", ":", "\n", "            ", "max_steps", "=", "len", "(", "run", "[", "'perfs'", "]", "[", "i", "]", ")", "\n", "", "", "eval_perfs", "=", "np", ".", "empty", "(", "[", "n_runs", ",", "max_steps", "]", ")", "*", "(", "np", ".", "nan", ")", "\n", "for", "i", "in", "range", "(", "n_runs", ")", ":", "\n", "        ", "eval_perfs", "[", "i", ",", ":", "len", "(", "run", "[", "'perfs'", "]", "[", "i", "]", ")", "]", "=", "run", "[", "'perfs'", "]", "[", "i", "]", "\n", "", "steps", "=", "range", "(", "0", ",", "max_steps", "*", "2000", ",", "2000", ")", "\n", "\n", "inds", "=", "np", ".", "array", "(", "range", "(", "n_runs", ")", ")", "\n", "# np.random.shuffle(inds)", "\n", "\n", "# # modify GEP source", "\n", "# for i in range(20,40):", "\n", "#     eval_perfs[i][251:]=eval_perfs[i][:750]", "\n", "#     eval_perfs[i][0:251] = np.zeros([251])", "\n", "\n", "print", "(", "inds", ")", "\n", "toPlot_av1", "=", "eval_perfs", "[", "inds", "[", ":", "int", "(", "n_runs", "/", "2", ")", "]", "]", ".", "mean", "(", "axis", "=", "0", ")", "\n", "toPlot_std1", "=", "eval_perfs", "[", "inds", "[", ":", "int", "(", "n_runs", "/", "2", ")", "]", "]", ".", "std", "(", "axis", "=", "0", ")", "/", "10", "\n", "toPlot_av2", "=", "eval_perfs", "[", "inds", "[", "int", "(", "n_runs", "/", "2", ")", ":", "]", "]", ".", "mean", "(", "axis", "=", "0", ")", "\n", "toPlot_std2", "=", "eval_perfs", "[", "inds", "[", "int", "(", "n_runs", "/", "2", ")", ":", "]", "]", ".", "std", "(", "axis", "=", "0", ")", "/", "10", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "20", ",", "13", ")", ",", "frameon", "=", "False", ")", "\n", "plt", ".", "xlabel", "(", "\"time steps\"", ")", "\n", "plt", ".", "ylabel", "(", "\"performance\"", ")", "\n", "plt", ".", "title", "(", "\"DDPG\"", ")", "\n", "# plt.plot(steps, toPlot_av1, label=\"label\", c='#CC6600')", "\n", "# plt.fill_between(steps, toPlot_av1 - toPlot_std1, toPlot_av1 + toPlot_std1,", "\n", "#                  alpha=0.5, edgecolor='#FF9933', facecolor='#FFB266')", "\n", "plt", ".", "plot", "(", "steps", ",", "toPlot_av1", ",", "label", "=", "\"label\"", ",", "c", "=", "'#CC0000'", ")", "\n", "plt", ".", "fill_between", "(", "steps", ",", "toPlot_av1", "-", "toPlot_std1", ",", "toPlot_av1", "+", "toPlot_std1", ",", "\n", "alpha", "=", "0.5", ",", "edgecolor", "=", "'#FF3333'", ",", "facecolor", "=", "'#FF6666'", ")", "\n", "plt", ".", "plot", "(", "steps", ",", "toPlot_av2", ",", "label", "=", "\"label\"", ",", "c", "=", "'#0066CC'", ")", "\n", "plt", ".", "fill_between", "(", "steps", ",", "toPlot_av2", "-", "toPlot_std2", ",", "toPlot_av2", "+", "toPlot_std2", ",", "\n", "alpha", "=", "0.5", ",", "edgecolor", "=", "'#3999FF'", ",", "facecolor", "=", "'#66B2FF'", ")", "\n", "plt", ".", "legend", "(", "[", "'DDPG 2M'", ",", "'DDPG 1M'", "]", ",", "loc", "=", "4", ")", "\n", "\n", "plt", ".", "savefig", "(", "data_path", "+", "'DDPG_1M_2M'", ",", "bbox_inches", "=", "'tight'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.utils.extract_results_cmc.plot_test_variability": [[83, 130], ["enumerate", "len", "range", "range", "range", "numpy.array", "numpy.random.shuffle", "print", "numpy.nanmean", "numpy.nanmean", "matplotlib.figure", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.title", "matplotlib.plot", "matplotlib.fill_between", "matplotlib.plot", "matplotlib.fill_between", "matplotlib.legend", "matplotlib.savefig", "sorted", "numpy.empty", "range", "numpy.nanstd", "numpy.sqrt", "numpy.nanstd", "numpy.sqrt", "os.listdir", "len", "print", "extract_results_cmc.extract_performances", "run[].append", "len", "len", "int", "int", "str", "len", "int", "int", "int", "int"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.dataset.Dataset.shuffle", "home.repos.pwc.inspect_result.flowersteam_geppg.scripts.extract_results.extract_performances", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append"], ["", "def", "plot_test_variability", "(", "data_path", ",", "ind", ")", ":", "\n", "    ", "run", "=", "{", "}", "\n", "run", "[", "'perfs'", "]", "=", "[", "]", "\n", "for", "i", ",", "trial", "in", "enumerate", "(", "sorted", "(", "os", ".", "listdir", "(", "data_path", ")", ")", ")", ":", "\n", "\n", "        ", "if", "len", "(", "trial", ")", "<", "3", ":", "\n", "            ", "print", "(", "'Extracting: '", ",", "trial", ")", "\n", "filename", "=", "data_path", "+", "trial", "+", "'/progress.json'", "\n", "# print(filename)", "\n", "steps", ",", "eval_rewards", "=", "extract_performances", "(", "filename", ")", "\n", "run", "[", "'perfs'", "]", ".", "append", "(", "eval_rewards", ")", "\n", "\n", "", "", "n_runs", "=", "len", "(", "run", "[", "'perfs'", "]", ")", "\n", "max_steps", "=", "0", "\n", "for", "i", "in", "range", "(", "n_runs", ")", ":", "\n", "        ", "if", "len", "(", "run", "[", "'perfs'", "]", "[", "i", "]", ")", ">", "max_steps", ":", "\n", "            ", "max_steps", "=", "len", "(", "run", "[", "'perfs'", "]", "[", "i", "]", ")", "\n", "", "", "eval_perfs", "=", "np", ".", "empty", "(", "[", "n_runs", ",", "max_steps", "]", ")", "*", "(", "np", ".", "nan", ")", "\n", "for", "i", "in", "range", "(", "n_runs", ")", ":", "\n", "        ", "eval_perfs", "[", "i", ",", ":", "len", "(", "run", "[", "'perfs'", "]", "[", "i", "]", ")", "]", "=", "run", "[", "'perfs'", "]", "[", "i", "]", "\n", "\n", "", "steps", "=", "range", "(", "0", ",", "max_steps", "*", "2000", ",", "2000", ")", "\n", "\n", "inds", "=", "np", ".", "array", "(", "range", "(", "n_runs", ")", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "inds", ")", "\n", "\n", "print", "(", "inds", ")", "\n", "toPlot_av1", "=", "np", ".", "nanmean", "(", "eval_perfs", "[", "inds", "[", ":", "int", "(", "n_runs", "/", "2", ")", "]", "]", ",", "axis", "=", "0", ")", "\n", "toPlot_std1", "=", "np", ".", "nanstd", "(", "eval_perfs", "[", "inds", "[", ":", "int", "(", "n_runs", "/", "2", ")", "]", "]", ",", "axis", "=", "0", ")", "/", "np", ".", "sqrt", "(", "int", "(", "n_runs", "/", "2", ")", ")", "\n", "toPlot_av2", "=", "np", ".", "nanmean", "(", "eval_perfs", "[", "inds", "[", "int", "(", "n_runs", "/", "2", ")", ":", "]", "]", ",", "axis", "=", "0", ")", "\n", "toPlot_std2", "=", "np", ".", "nanstd", "(", "eval_perfs", "[", "inds", "[", "int", "(", "n_runs", "/", "2", ")", ":", "]", "]", ",", "axis", "=", "0", ")", "/", "np", ".", "sqrt", "(", "int", "(", "n_runs", "/", "2", ")", ")", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "20", ",", "13", ")", ",", "frameon", "=", "False", ")", "\n", "plt", ".", "xlabel", "(", "\"time steps\"", ")", "\n", "plt", ".", "ylabel", "(", "\"performance\"", ")", "\n", "plt", ".", "title", "(", "name_algo", ")", "\n", "# plt.plot(steps, toPlot_av1, label=\"label\", c='#CC6600')", "\n", "# plt.fill_between(steps, toPlot_av1 - toPlot_std1, toPlot_av1 + toPlot_std1,", "\n", "#                  alpha=0.5, edgecolor='#FF9933', facecolor='#FFB266')", "\n", "plt", ".", "plot", "(", "steps", ",", "toPlot_av1", ",", "label", "=", "\"label\"", ",", "c", "=", "'#CC0000'", ")", "\n", "plt", ".", "fill_between", "(", "steps", ",", "toPlot_av1", "-", "toPlot_std1", ",", "toPlot_av1", "+", "toPlot_std1", ",", "\n", "alpha", "=", "0.5", ",", "edgecolor", "=", "'#FF3333'", ",", "facecolor", "=", "'#FF6666'", ")", "\n", "plt", ".", "plot", "(", "steps", ",", "toPlot_av2", ",", "label", "=", "\"label\"", ",", "c", "=", "'#0066CC'", ")", "\n", "plt", ".", "fill_between", "(", "steps", ",", "toPlot_av2", "-", "toPlot_std2", ",", "toPlot_av2", "+", "toPlot_std2", ",", "\n", "alpha", "=", "0.5", ",", "edgecolor", "=", "'#3999FF'", ",", "facecolor", "=", "'#66B2FF'", ")", "\n", "plt", ".", "legend", "(", "[", "'group 1'", ",", "'group 2'", "]", ",", "loc", "=", "4", ")", "\n", "\n", "plt", ".", "savefig", "(", "data_path", "+", "name_run", "+", "'_variability_'", "+", "str", "(", "ind", ")", ",", "bbox_inches", "=", "'tight'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.utils.extract_results_cmc.plot_all": [[132, 175], ["matplotlib.figure", "enumerate", "matplotlib.savefig", "len", "range", "range", "range", "numpy.nanmean", "numpy.nanstd", "matplotlib.figure", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.title", "matplotlib.plot", "matplotlib.fill_between", "matplotlib.savefig", "matplotlib.show", "sorted", "numpy.empty", "os.listdir", "len", "print", "print", "extract_results_cmc.extract_performances", "run[].append", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.title", "matplotlib.plot", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.scripts.extract_results.extract_performances", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append"], ["", "def", "plot_all", "(", "data_path", ")", ":", "\n", "    ", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "20", ",", "13", ")", ",", "frameon", "=", "False", ")", "\n", "run", "=", "{", "}", "\n", "run", "[", "'perfs'", "]", "=", "[", "]", "\n", "for", "i", ",", "trial", "in", "enumerate", "(", "sorted", "(", "os", ".", "listdir", "(", "data_path", ")", ")", ")", ":", "\n", "\n", "        ", "if", "len", "(", "trial", ")", "<", "3", ":", "\n", "            ", "print", "(", "'Extracting: '", ",", "trial", ")", "\n", "filename", "=", "data_path", "+", "trial", "+", "'/progress.json'", "\n", "print", "(", "filename", ")", "\n", "steps", ",", "eval_rewards", "=", "extract_performances", "(", "filename", ")", "\n", "run", "[", "'perfs'", "]", ".", "append", "(", "eval_rewards", ")", "\n", "plt", ".", "xlabel", "(", "'steps'", ")", "\n", "plt", ".", "ylabel", "(", "'performance'", ")", "\n", "plt", ".", "title", "(", "name_algo", ")", "\n", "plt", ".", "plot", "(", "steps", ",", "eval_rewards", ")", "\n", "\n", "", "", "plt", ".", "savefig", "(", "data_path", "+", "'all_'", "+", "name_run", "+", "'_runs'", ",", "bbox_inches", "=", "'tight'", ")", "\n", "n_runs", "=", "len", "(", "run", "[", "'perfs'", "]", ")", "\n", "max_steps", "=", "0", "\n", "for", "i", "in", "range", "(", "n_runs", ")", ":", "\n", "        ", "if", "len", "(", "run", "[", "'perfs'", "]", "[", "i", "]", ")", ">", "max_steps", ":", "\n", "            ", "max_steps", "=", "len", "(", "run", "[", "'perfs'", "]", "[", "i", "]", ")", "\n", "", "", "eval_perfs", "=", "np", ".", "empty", "(", "[", "n_runs", ",", "max_steps", "]", ")", "*", "(", "np", ".", "nan", ")", "\n", "for", "i", "in", "range", "(", "n_runs", ")", ":", "\n", "        ", "eval_perfs", "[", "i", ",", ":", "len", "(", "run", "[", "'perfs'", "]", "[", "i", "]", ")", "]", "=", "run", "[", "'perfs'", "]", "[", "i", "]", "\n", "\n", "", "steps", "=", "range", "(", "0", ",", "max_steps", "*", "2000", ",", "2000", ")", "\n", "\n", "toPlot_av", "=", "np", ".", "nanmean", "(", "eval_perfs", ",", "axis", "=", "0", ")", "\n", "toPlot_std", "=", "np", ".", "nanstd", "(", "eval_perfs", ",", "axis", "=", "0", ")", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "20", ",", "13", ")", ",", "frameon", "=", "False", ")", "\n", "plt", ".", "xlabel", "(", "\"time steps\"", ")", "\n", "plt", ".", "ylabel", "(", "\"performance\"", ")", "\n", "plt", ".", "title", "(", "name_algo", ")", "\n", "plt", ".", "plot", "(", "steps", ",", "toPlot_av", ",", "label", "=", "\"label\"", ",", "c", "=", "'#0066CC'", ")", "\n", "plt", ".", "fill_between", "(", "steps", ",", "toPlot_av", "-", "toPlot_std", ",", "toPlot_av", "+", "toPlot_std", ",", "\n", "alpha", "=", "0.5", ",", "edgecolor", "=", "'#3999FF'", ",", "facecolor", "=", "'#66B2FF'", ")", "\n", "#plt.legend()", "\n", "\n", "plt", ".", "savefig", "(", "data_path", "+", "name_run", ",", "bbox_inches", "=", "'tight'", ")", "\n", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.configs.config.ddpg_config": [[4, 49], ["int", "dict", "numpy.random.random"], "function", ["None"], ["def", "ddpg_config", "(", "env_id", ",", "\n", "study", ",", "\n", "data_path", ",", "\n", "noise", "=", "'ou_0.3'", ",", "\n", "trial_id", "=", "999", ",", "\n", "seed", "=", "int", "(", "np", ".", "random", ".", "random", "(", ")", "*", "1e6", ")", ",", "\n", "nb_epochs", "=", "1000", ",", "\n", "buffer_location", "=", "None", ",", "\n", "gep_memory", "=", "None", ",", "\n", ")", ":", "\n", "\n", "    ", "args_dict", "=", "dict", "(", "env_id", "=", "env_id", ",", "\n", "render_eval", "=", "False", ",", "\n", "layer_norm", "=", "True", ",", "\n", "render", "=", "False", ",", "\n", "normalize_returns", "=", "False", ",", "\n", "normalize_observations", "=", "True", ",", "\n", "seed", "=", "seed", ",", "#int(np.random.random()*1e6),", "\n", "critic_l2_reg", "=", "1e-2", ",", "\n", "batch_size", "=", "64", ",", "# per MPI worker", "\n", "actor_lr", "=", "1e-4", ",", "\n", "critic_lr", "=", "1e-3", ",", "\n", "popart", "=", "False", ",", "\n", "gamma", "=", "0.99", ",", "\n", "reward_scale", "=", "1.", ",", "\n", "clip_norm", "=", "None", ",", "\n", "nb_epochs", "=", "nb_epochs", ",", "# with default settings, perform 2M steps total", "\n", "nb_epoch_cycles", "=", "20", ",", "\n", "nb_train_steps", "=", "50", ",", "# per epoch cycle and MPI worker", "\n", "nb_eval_steps", "=", "1000", ",", "# per epoch cycle and MPI worker", "\n", "nb_eval_episodes", "=", "10", ",", "\n", "nb_rollout_steps", "=", "100", ",", "# per epoch cycle and MPI worker", "\n", "noise_type", "=", "noise", ",", "# choices are adaptive-param_xx, ou_xx, normal_xx, decreasing-ou_xx, none", "\n", "evaluation", "=", "True", ",", "\n", "study", "=", "study", ",", "# 'DDPG',  # 'GEP_PG', #  'GEP_FPG', #", "\n", "buffer_location", "=", "buffer_location", ",", "\n", "data_path", "=", "data_path", ",", "\n", "trial_id", "=", "trial_id", ",", "\n", "max_memory", "=", "1e6", ",", "\n", "gep_memory", "=", "gep_memory", "\n", ")", "\n", "if", "env_id", "==", "'MountainCarContinuous-v0'", ":", "\n", "        ", "args_dict", "[", "'nb_epochs'", "]", "=", "250", "\n", "\n", "", "return", "args_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.bench.monitor.Monitor.__init__": [[16, 44], ["gym.core.Wrapper.__init__", "time.time", "open", "monitor.Monitor.f.write", "csv.DictWriter", "monitor.Monitor.logger.writeheader", "monitor.Monitor.f.flush", "os.join.endswith", "os.isdir", "os.join", "json.dumps"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.subproc_vec_env.SubprocVecEnv.__init__"], ["def", "__init__", "(", "self", ",", "env", ",", "filename", ",", "allow_early_resets", "=", "False", ",", "reset_keywords", "=", "(", ")", ",", "info_keywords", "=", "(", ")", ")", ":", "\n", "        ", "Wrapper", ".", "__init__", "(", "self", ",", "env", "=", "env", ")", "\n", "self", ".", "tstart", "=", "time", ".", "time", "(", ")", "\n", "if", "filename", "is", "None", ":", "\n", "            ", "self", ".", "f", "=", "None", "\n", "self", ".", "logger", "=", "None", "\n", "", "else", ":", "\n", "            ", "if", "not", "filename", ".", "endswith", "(", "Monitor", ".", "EXT", ")", ":", "\n", "                ", "if", "osp", ".", "isdir", "(", "filename", ")", ":", "\n", "                    ", "filename", "=", "osp", ".", "join", "(", "filename", ",", "Monitor", ".", "EXT", ")", "\n", "", "else", ":", "\n", "                    ", "filename", "=", "filename", "+", "\".\"", "+", "Monitor", ".", "EXT", "\n", "", "", "self", ".", "f", "=", "open", "(", "filename", ",", "\"wt\"", ")", "\n", "self", ".", "f", ".", "write", "(", "'#%s\\n'", "%", "json", ".", "dumps", "(", "{", "\"t_start\"", ":", "self", ".", "tstart", ",", "'env_id'", ":", "env", ".", "spec", "and", "env", ".", "spec", ".", "id", "}", ")", ")", "\n", "self", ".", "logger", "=", "csv", ".", "DictWriter", "(", "self", ".", "f", ",", "fieldnames", "=", "(", "'r'", ",", "'l'", ",", "'t'", ")", "+", "reset_keywords", "+", "info_keywords", ")", "\n", "self", ".", "logger", ".", "writeheader", "(", ")", "\n", "self", ".", "f", ".", "flush", "(", ")", "\n", "\n", "", "self", ".", "reset_keywords", "=", "reset_keywords", "\n", "self", ".", "info_keywords", "=", "info_keywords", "\n", "self", ".", "allow_early_resets", "=", "allow_early_resets", "\n", "self", ".", "rewards", "=", "None", "\n", "self", ".", "needs_reset", "=", "True", "\n", "self", ".", "episode_rewards", "=", "[", "]", "\n", "self", ".", "episode_lengths", "=", "[", "]", "\n", "self", ".", "episode_times", "=", "[", "]", "\n", "self", ".", "total_steps", "=", "0", "\n", "self", ".", "current_reset_info", "=", "{", "}", "# extra info about the current episode, that was passed in during reset()", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.bench.monitor.Monitor.reset": [[45, 56], ["monitor.Monitor.env.reset", "RuntimeError", "kwargs.get", "ValueError"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.Uint8Input.get"], ["", "def", "reset", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "not", "self", ".", "allow_early_resets", "and", "not", "self", ".", "needs_reset", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Tried to reset an environment before done. If you want to allow early resets, wrap your env with Monitor(env, path, allow_early_resets=True)\"", ")", "\n", "", "self", ".", "rewards", "=", "[", "]", "\n", "self", ".", "needs_reset", "=", "False", "\n", "for", "k", "in", "self", ".", "reset_keywords", ":", "\n", "            ", "v", "=", "kwargs", ".", "get", "(", "k", ")", "\n", "if", "v", "is", "None", ":", "\n", "                ", "raise", "ValueError", "(", "'Expected you to pass kwarg %s into reset'", "%", "k", ")", "\n", "", "self", ".", "current_reset_info", "[", "k", "]", "=", "v", "\n", "", "return", "self", ".", "env", ".", "reset", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.bench.monitor.Monitor.step": [[57, 79], ["monitor.Monitor.env.step", "monitor.Monitor.rewards.append", "RuntimeError", "sum", "len", "monitor.Monitor.episode_rewards.append", "monitor.Monitor.episode_lengths.append", "monitor.Monitor.episode_times.append", "epinfo.update", "round", "round", "monitor.Monitor.logger.writerow", "monitor.Monitor.f.flush", "time.time", "time.time"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.__init__.VecEnv.step", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.sum", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.common.mpi_running_mean_std.RunningMeanStd.update"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "if", "self", ".", "needs_reset", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Tried to step environment that needs reset\"", ")", "\n", "", "ob", ",", "rew", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "self", ".", "rewards", ".", "append", "(", "rew", ")", "\n", "if", "done", ":", "\n", "            ", "self", ".", "needs_reset", "=", "True", "\n", "eprew", "=", "sum", "(", "self", ".", "rewards", ")", "\n", "eplen", "=", "len", "(", "self", ".", "rewards", ")", "\n", "epinfo", "=", "{", "\"r\"", ":", "round", "(", "eprew", ",", "6", ")", ",", "\"l\"", ":", "eplen", ",", "\"t\"", ":", "round", "(", "time", ".", "time", "(", ")", "-", "self", ".", "tstart", ",", "6", ")", "}", "\n", "for", "k", "in", "self", ".", "info_keywords", ":", "\n", "                ", "epinfo", "[", "k", "]", "=", "info", "[", "k", "]", "\n", "", "self", ".", "episode_rewards", ".", "append", "(", "eprew", ")", "\n", "self", ".", "episode_lengths", ".", "append", "(", "eplen", ")", "\n", "self", ".", "episode_times", ".", "append", "(", "time", ".", "time", "(", ")", "-", "self", ".", "tstart", ")", "\n", "epinfo", ".", "update", "(", "self", ".", "current_reset_info", ")", "\n", "if", "self", ".", "logger", ":", "\n", "                ", "self", ".", "logger", ".", "writerow", "(", "epinfo", ")", "\n", "self", ".", "f", ".", "flush", "(", ")", "\n", "", "info", "[", "'episode'", "]", "=", "epinfo", "\n", "", "self", ".", "total_steps", "+=", "1", "\n", "return", "(", "ob", ",", "rew", ",", "done", ",", "info", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.bench.monitor.Monitor.close": [[80, 83], ["monitor.Monitor.f.close"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.__init__.VecEnv.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "f", "is", "not", "None", ":", "\n", "            ", "self", ".", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.bench.monitor.Monitor.get_total_steps": [[84, 86], ["None"], "methods", ["None"], ["", "", "def", "get_total_steps", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "total_steps", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.bench.monitor.Monitor.get_episode_rewards": [[87, 89], ["None"], "methods", ["None"], ["", "def", "get_episode_rewards", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "episode_rewards", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.bench.monitor.Monitor.get_episode_lengths": [[90, 92], ["None"], "methods", ["None"], ["", "def", "get_episode_lengths", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "episode_lengths", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.bench.monitor.Monitor.get_episode_times": [[93, 95], ["None"], "methods", ["None"], ["", "def", "get_episode_times", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "episode_times", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.bench.monitor.get_monitor_files": [[99, 101], ["glob.glob", "os.join"], "function", ["None"], ["", "def", "get_monitor_files", "(", "dir", ")", ":", "\n", "    ", "return", "glob", "(", "osp", ".", "join", "(", "dir", ",", "\"*\"", "+", "Monitor", ".", "EXT", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.bench.monitor.load_results": [[102, 138], ["pandas.concat", "pandas.DataFrame.sort_values", "pandas.DataFrame.reset_index", "min", "glob.glob", "glob.glob", "monitor.LoadMonitorResultsError", "dfs.append", "os.join", "os.join", "open", "fname.endswith", "fh.readline", "json.loads", "pandas.read_csv", "headers.append", "fname.endswith", "fh.readlines", "json.loads", "headers.append", "pandas.DataFrame", "json.loads", "episodes.append"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.min", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append"], ["", "def", "load_results", "(", "dir", ")", ":", "\n", "    ", "import", "pandas", "\n", "monitor_files", "=", "(", "\n", "glob", "(", "osp", ".", "join", "(", "dir", ",", "\"*monitor.json\"", ")", ")", "+", "\n", "glob", "(", "osp", ".", "join", "(", "dir", ",", "\"*monitor.csv\"", ")", ")", ")", "# get both csv and (old) json files", "\n", "if", "not", "monitor_files", ":", "\n", "        ", "raise", "LoadMonitorResultsError", "(", "\"no monitor files of the form *%s found in %s\"", "%", "(", "Monitor", ".", "EXT", ",", "dir", ")", ")", "\n", "", "dfs", "=", "[", "]", "\n", "headers", "=", "[", "]", "\n", "for", "fname", "in", "monitor_files", ":", "\n", "        ", "with", "open", "(", "fname", ",", "'rt'", ")", "as", "fh", ":", "\n", "            ", "if", "fname", ".", "endswith", "(", "'csv'", ")", ":", "\n", "                ", "firstline", "=", "fh", ".", "readline", "(", ")", "\n", "assert", "firstline", "[", "0", "]", "==", "'#'", "\n", "header", "=", "json", ".", "loads", "(", "firstline", "[", "1", ":", "]", ")", "\n", "df", "=", "pandas", ".", "read_csv", "(", "fh", ",", "index_col", "=", "None", ")", "\n", "headers", ".", "append", "(", "header", ")", "\n", "", "elif", "fname", ".", "endswith", "(", "'json'", ")", ":", "# Deprecated json format", "\n", "                ", "episodes", "=", "[", "]", "\n", "lines", "=", "fh", ".", "readlines", "(", ")", "\n", "header", "=", "json", ".", "loads", "(", "lines", "[", "0", "]", ")", "\n", "headers", ".", "append", "(", "header", ")", "\n", "for", "line", "in", "lines", "[", "1", ":", "]", ":", "\n", "                    ", "episode", "=", "json", ".", "loads", "(", "line", ")", "\n", "episodes", ".", "append", "(", "episode", ")", "\n", "", "df", "=", "pandas", ".", "DataFrame", "(", "episodes", ")", "\n", "", "else", ":", "\n", "                ", "assert", "0", ",", "'unreachable'", "\n", "", "df", "[", "'t'", "]", "+=", "header", "[", "'t_start'", "]", "\n", "", "dfs", ".", "append", "(", "df", ")", "\n", "", "df", "=", "pandas", ".", "concat", "(", "dfs", ")", "\n", "df", ".", "sort_values", "(", "'t'", ",", "inplace", "=", "True", ")", "\n", "df", ".", "reset_index", "(", "inplace", "=", "True", ")", "\n", "df", "[", "'t'", "]", "-=", "min", "(", "header", "[", "'t_start'", "]", "for", "header", "in", "headers", ")", "\n", "df", ".", "headers", "=", "headers", "# HACK to preserve backwards compatibility", "\n", "return", "df", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.bench.monitor.test_monitor": [[139, 162], ["gym.make", "gym.make.seed", "monitor.Monitor", "monitor.Monitor.reset", "range", "open", "open.readline", "f.readline.startswith", "json.loads", "pandas.read_csv", "open.close", "os.remove", "uuid.uuid4", "monitor.Monitor.step", "set", "set", "monitor.Monitor.reset", "json.loads.keys", "pandas.read_csv.keys"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.__init__.VecEnv.close", "home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.__init__.VecEnv.step", "home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.__init__.VecEnv.reset"], ["", "def", "test_monitor", "(", ")", ":", "\n", "    ", "env", "=", "gym", ".", "make", "(", "\"CartPole-v1\"", ")", "\n", "env", ".", "seed", "(", "0", ")", "\n", "mon_file", "=", "\"/tmp/baselines-test-%s.monitor.csv\"", "%", "uuid", ".", "uuid4", "(", ")", "\n", "menv", "=", "Monitor", "(", "env", ",", "mon_file", ")", "\n", "menv", ".", "reset", "(", ")", "\n", "for", "_", "in", "range", "(", "1000", ")", ":", "\n", "        ", "_", ",", "_", ",", "done", ",", "_", "=", "menv", ".", "step", "(", "0", ")", "\n", "if", "done", ":", "\n", "            ", "menv", ".", "reset", "(", ")", "\n", "\n", "", "", "f", "=", "open", "(", "mon_file", ",", "'rt'", ")", "\n", "\n", "firstline", "=", "f", ".", "readline", "(", ")", "\n", "assert", "firstline", ".", "startswith", "(", "'#'", ")", "\n", "metadata", "=", "json", ".", "loads", "(", "firstline", "[", "1", ":", "]", ")", "\n", "assert", "metadata", "[", "'env_id'", "]", "==", "\"CartPole-v1\"", "\n", "assert", "set", "(", "metadata", ".", "keys", "(", ")", ")", "==", "{", "'env_id'", ",", "'gym_version'", ",", "'t_start'", "}", ",", "\"Incorrect keys in monitor metadata\"", "\n", "\n", "last_logline", "=", "pandas", ".", "read_csv", "(", "f", ",", "index_col", "=", "None", ")", "\n", "assert", "set", "(", "last_logline", ".", "keys", "(", ")", ")", "==", "{", "'l'", ",", "'t'", ",", "'r'", "}", ",", "\"Incorrect keys in monitor logline\"", "\n", "f", ".", "close", "(", ")", "\n", "os", ".", "remove", "(", "mon_file", ")", "", "", ""]], "home.repos.pwc.inspect_result.flowersteam_geppg.bench.benchmarks.register_benchmark": [[14, 25], ["_BENCHMARKS.append", "ValueError", "remove_version_re.sub"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append"], ["def", "register_benchmark", "(", "benchmark", ")", ":", "\n", "    ", "for", "b", "in", "_BENCHMARKS", ":", "\n", "        ", "if", "b", "[", "'name'", "]", "==", "benchmark", "[", "'name'", "]", ":", "\n", "            ", "raise", "ValueError", "(", "'Benchmark with name %s already registered!'", "%", "b", "[", "'name'", "]", ")", "\n", "\n", "# automatically add a description if it is not present", "\n", "", "", "if", "'tasks'", "in", "benchmark", ":", "\n", "        ", "for", "t", "in", "benchmark", "[", "'tasks'", "]", ":", "\n", "            ", "if", "'desc'", "not", "in", "t", ":", "\n", "                ", "t", "[", "'desc'", "]", "=", "remove_version_re", ".", "sub", "(", "''", ",", "t", "[", "'env_id'", "]", ")", "\n", "", "", "", "_BENCHMARKS", ".", "append", "(", "benchmark", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.bench.benchmarks.list_benchmarks": [[27, 29], ["None"], "function", ["None"], ["", "def", "list_benchmarks", "(", ")", ":", "\n", "    ", "return", "[", "b", "[", "'name'", "]", "for", "b", "in", "_BENCHMARKS", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.bench.benchmarks.get_benchmark": [[31, 36], ["ValueError", "benchmarks.list_benchmarks"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.bench.benchmarks.list_benchmarks"], ["", "def", "get_benchmark", "(", "benchmark_name", ")", ":", "\n", "    ", "for", "b", "in", "_BENCHMARKS", ":", "\n", "        ", "if", "b", "[", "'name'", "]", "==", "benchmark_name", ":", "\n", "            ", "return", "b", "\n", "", "", "raise", "ValueError", "(", "'%s not found! Known benchmarks: %s'", "%", "(", "benchmark_name", ",", "list_benchmarks", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.bench.benchmarks.get_task": [[38, 41], ["next", "filter"], "function", ["None"], ["", "def", "get_task", "(", "benchmark", ",", "env_id", ")", ":", "\n", "    ", "\"\"\"Get a task by env_id. Return None if the benchmark doesn't have the env\"\"\"", "\n", "return", "next", "(", "filter", "(", "lambda", "task", ":", "task", "[", "'env_id'", "]", "==", "env_id", ",", "benchmark", "[", "'tasks'", "]", ")", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.bench.benchmarks.find_task_for_env_id_in_any_benchmark": [[43, 49], ["None"], "function", ["None"], ["", "def", "find_task_for_env_id_in_any_benchmark", "(", "env_id", ")", ":", "\n", "    ", "for", "bm", "in", "_BENCHMARKS", ":", "\n", "        ", "for", "task", "in", "bm", "[", "\"tasks\"", "]", ":", "\n", "            ", "if", "task", "[", "\"env_id\"", "]", "==", "env_id", ":", "\n", "                ", "return", "bm", ",", "task", "\n", "", "", "", "return", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.math_util.discount": [[5, 24], ["scipy.signal.lfilter"], "function", ["None"], ["def", "discount", "(", "x", ",", "gamma", ")", ":", "\n", "    ", "\"\"\"\n    computes discounted sums along 0th dimension of x.\n\n    inputs\n    ------\n    x: ndarray\n    gamma: float\n\n    outputs\n    -------\n    y: ndarray with same shape as x, satisfying\n\n        y[t] = x[t] + gamma*x[t+1] + gamma^2*x[t+2] + ... + gamma^k x[t+k],\n                where k = len(x) - t - 1\n\n    \"\"\"", "\n", "assert", "x", ".", "ndim", ">=", "1", "\n", "return", "scipy", ".", "signal", ".", "lfilter", "(", "[", "1", "]", ",", "[", "1", ",", "-", "gamma", "]", ",", "x", "[", ":", ":", "-", "1", "]", ",", "axis", "=", "0", ")", "[", ":", ":", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.math_util.explained_variance": [[25, 39], ["numpy.var", "numpy.var"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.var", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.var"], ["", "def", "explained_variance", "(", "ypred", ",", "y", ")", ":", "\n", "    ", "\"\"\"\n    Computes fraction of variance that ypred explains about y.\n    Returns 1 - Var[y-ypred] / Var[y]\n\n    interpretation:\n        ev=0  =>  might as well have predicted zero\n        ev=1  =>  perfect prediction\n        ev<0  =>  worse than just predicting zero\n\n    \"\"\"", "\n", "assert", "y", ".", "ndim", "==", "1", "and", "ypred", ".", "ndim", "==", "1", "\n", "vary", "=", "np", ".", "var", "(", "y", ")", "\n", "return", "np", ".", "nan", "if", "vary", "==", "0", "else", "1", "-", "np", ".", "var", "(", "y", "-", "ypred", ")", "/", "vary", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.math_util.explained_variance_2d": [[40, 46], ["numpy.var", "numpy.var"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.var", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.var"], ["", "def", "explained_variance_2d", "(", "ypred", ",", "y", ")", ":", "\n", "    ", "assert", "y", ".", "ndim", "==", "2", "and", "ypred", ".", "ndim", "==", "2", "\n", "vary", "=", "np", ".", "var", "(", "y", ",", "axis", "=", "0", ")", "\n", "out", "=", "1", "-", "np", ".", "var", "(", "y", "-", "ypred", ")", "/", "vary", "\n", "out", "[", "vary", "<", "1e-10", "]", "=", "0", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.math_util.ncc": [[47, 49], ["numpy.corrcoef"], "function", ["None"], ["", "def", "ncc", "(", "ypred", ",", "y", ")", ":", "\n", "    ", "return", "np", ".", "corrcoef", "(", "ypred", ",", "y", ")", "[", "1", ",", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.math_util.flatten_arrays": [[50, 52], ["numpy.concatenate"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.concatenate"], ["", "def", "flatten_arrays", "(", "arrs", ")", ":", "\n", "    ", "return", "np", ".", "concatenate", "(", "[", "arr", ".", "flat", "for", "arr", "in", "arrs", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.math_util.unflatten_vector": [[53, 62], ["numpy.prod", "vec[].reshape", "arrs.append"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append"], ["", "def", "unflatten_vector", "(", "vec", ",", "shapes", ")", ":", "\n", "    ", "i", "=", "0", "\n", "arrs", "=", "[", "]", "\n", "for", "shape", "in", "shapes", ":", "\n", "        ", "size", "=", "np", ".", "prod", "(", "shape", ")", "\n", "arr", "=", "vec", "[", "i", ":", "i", "+", "size", "]", ".", "reshape", "(", "shape", ")", "\n", "arrs", ".", "append", "(", "arr", ")", "\n", "i", "+=", "size", "\n", "", "return", "arrs", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.math_util.discount_with_boundaries": [[63, 74], ["numpy.zeros_like", "range"], "function", ["None"], ["", "def", "discount_with_boundaries", "(", "X", ",", "New", ",", "gamma", ")", ":", "\n", "    ", "\"\"\"\n    X: 2d array of floats, time x features\n    New: 2d array of bools, indicating when a new episode has started\n    \"\"\"", "\n", "Y", "=", "np", ".", "zeros_like", "(", "X", ")", "\n", "T", "=", "X", ".", "shape", "[", "0", "]", "\n", "Y", "[", "T", "-", "1", "]", "=", "X", "[", "T", "-", "1", "]", "\n", "for", "t", "in", "range", "(", "T", "-", "2", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "        ", "Y", "[", "t", "]", "=", "X", "[", "t", "]", "+", "gamma", "*", "Y", "[", "t", "+", "1", "]", "*", "(", "1", "-", "New", "[", "t", "+", "1", "]", ")", "\n", "", "return", "Y", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.math_util.test_discount_with_boundaries": [[75, 85], ["numpy.array", "math_util.discount_with_boundaries", "numpy.allclose"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.math_util.discount_with_boundaries"], ["", "def", "test_discount_with_boundaries", "(", ")", ":", "\n", "    ", "gamma", "=", "0.9", "\n", "x", "=", "np", ".", "array", "(", "[", "1.0", ",", "2.0", ",", "3.0", ",", "4.0", "]", ",", "'float32'", ")", "\n", "starts", "=", "[", "1.0", ",", "0.0", ",", "0.0", ",", "1.0", "]", "\n", "y", "=", "discount_with_boundaries", "(", "x", ",", "starts", ",", "gamma", ")", "\n", "assert", "np", ".", "allclose", "(", "y", ",", "[", "\n", "1", "+", "gamma", "*", "2", "+", "gamma", "**", "2", "*", "3", ",", "\n", "2", "+", "gamma", "*", "3", ",", "\n", "3", ",", "\n", "4", "\n", "]", ")", ""]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.mpi_moments.mpi_moments": [[7, 27], ["numpy.asarray", "list", "list.pop", "numpy.prod", "numpy.zeros", "numpy.concatenate", "mpi4py.MPI.COMM_WORLD.Allreduce", "numpy.empty", "numpy.empty", "numpy.sqrt", "np.asarray.sum().ravel", "numpy.square().sum().ravel", "numpy.array", "numpy.maximum", "np.asarray.sum", "numpy.square().sum", "numpy.square", "numpy.square"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.azure_utils.Container.list", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.concatenate", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.sum", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.sum"], ["def", "mpi_moments", "(", "x", ",", "axis", "=", "0", ")", ":", "\n", "    ", "x", "=", "np", ".", "asarray", "(", "x", ",", "dtype", "=", "'float64'", ")", "\n", "newshape", "=", "list", "(", "x", ".", "shape", ")", "\n", "newshape", ".", "pop", "(", "axis", ")", "\n", "n", "=", "np", ".", "prod", "(", "newshape", ",", "dtype", "=", "int", ")", "\n", "totalvec", "=", "np", ".", "zeros", "(", "n", "*", "2", "+", "1", ",", "'float64'", ")", "\n", "addvec", "=", "np", ".", "concatenate", "(", "[", "x", ".", "sum", "(", "axis", "=", "axis", ")", ".", "ravel", "(", ")", ",", "\n", "np", ".", "square", "(", "x", ")", ".", "sum", "(", "axis", "=", "axis", ")", ".", "ravel", "(", ")", ",", "\n", "np", ".", "array", "(", "[", "x", ".", "shape", "[", "axis", "]", "]", ",", "dtype", "=", "'float64'", ")", "]", ")", "\n", "MPI", ".", "COMM_WORLD", ".", "Allreduce", "(", "addvec", ",", "totalvec", ",", "op", "=", "MPI", ".", "SUM", ")", "\n", "sum", "=", "totalvec", "[", ":", "n", "]", "\n", "sumsq", "=", "totalvec", "[", "n", ":", "2", "*", "n", "]", "\n", "count", "=", "totalvec", "[", "2", "*", "n", "]", "\n", "if", "count", "==", "0", ":", "\n", "        ", "mean", "=", "np", ".", "empty", "(", "newshape", ")", ";", "mean", "[", ":", "]", "=", "np", ".", "nan", "\n", "std", "=", "np", ".", "empty", "(", "newshape", ")", ";", "std", "[", ":", "]", "=", "np", ".", "nan", "\n", "", "else", ":", "\n", "        ", "mean", "=", "sum", "/", "count", "\n", "std", "=", "np", ".", "sqrt", "(", "np", ".", "maximum", "(", "sumsq", "/", "count", "-", "np", ".", "square", "(", "mean", ")", ",", "0", ")", ")", "\n", "", "return", "mean", ",", "std", ",", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.mpi_moments.test_runningmeanstd": [[29, 49], ["numpy.random.seed", "numpy.concatenate", "mpi_moments.mpi_moments", "DDPG_baseline_v2.baselines.common.misc_util.zipsame", "np.concatenate.mean", "np.concatenate.std", "print", "numpy.allclose", "print", "numpy.random.randn", "numpy.random.randn", "numpy.random.randn", "numpy.random.randn", "numpy.random.randn", "numpy.random.randn", "numpy.random.randn", "numpy.random.randn", "numpy.random.randn", "comm.Get_rank"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.concatenate", "home.repos.pwc.inspect_result.flowersteam_geppg.common.mpi_moments.mpi_moments", "home.repos.pwc.inspect_result.flowersteam_geppg.common.misc_util.zipsame", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.mean", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.std"], ["", "def", "test_runningmeanstd", "(", ")", ":", "\n", "    ", "comm", "=", "MPI", ".", "COMM_WORLD", "\n", "np", ".", "random", ".", "seed", "(", "0", ")", "\n", "for", "(", "triple", ",", "axis", ")", "in", "[", "\n", "(", "(", "np", ".", "random", ".", "randn", "(", "3", ")", ",", "np", ".", "random", ".", "randn", "(", "4", ")", ",", "np", ".", "random", ".", "randn", "(", "5", ")", ")", ",", "0", ")", ",", "\n", "(", "(", "np", ".", "random", ".", "randn", "(", "3", ",", "2", ")", ",", "np", ".", "random", ".", "randn", "(", "4", ",", "2", ")", ",", "np", ".", "random", ".", "randn", "(", "5", ",", "2", ")", ")", ",", "0", ")", ",", "\n", "(", "(", "np", ".", "random", ".", "randn", "(", "2", ",", "3", ")", ",", "np", ".", "random", ".", "randn", "(", "2", ",", "4", ")", ",", "np", ".", "random", ".", "randn", "(", "2", ",", "4", ")", ")", ",", "1", ")", ",", "\n", "]", ":", "\n", "\n", "\n", "        ", "x", "=", "np", ".", "concatenate", "(", "triple", ",", "axis", "=", "axis", ")", "\n", "ms1", "=", "[", "x", ".", "mean", "(", "axis", "=", "axis", ")", ",", "x", ".", "std", "(", "axis", "=", "axis", ")", ",", "x", ".", "shape", "[", "axis", "]", "]", "\n", "\n", "\n", "ms2", "=", "mpi_moments", "(", "triple", "[", "comm", ".", "Get_rank", "(", ")", "]", ",", "axis", "=", "axis", ")", "\n", "\n", "for", "(", "a1", ",", "a2", ")", "in", "zipsame", "(", "ms1", ",", "ms2", ")", ":", "\n", "            ", "print", "(", "a1", ",", "a2", ")", "\n", "assert", "np", ".", "allclose", "(", "a1", ",", "a2", ")", "\n", "print", "(", "\"ok!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.mpi_fork.mpi_fork": [[3, 24], ["os.getenv", "os.environ.copy", "os.environ.copy.update", "subprocess.check_call", "str"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.mpi_running_mean_std.RunningMeanStd.update"], ["def", "mpi_fork", "(", "n", ",", "bind_to_core", "=", "False", ")", ":", "\n", "    ", "\"\"\"Re-launches the current script with workers\n    Returns \"parent\" for original parent, \"child\" for MPI children\n    \"\"\"", "\n", "if", "n", "<=", "1", ":", "\n", "        ", "return", "\"child\"", "\n", "", "if", "os", ".", "getenv", "(", "\"IN_MPI\"", ")", "is", "None", ":", "\n", "        ", "env", "=", "os", ".", "environ", ".", "copy", "(", ")", "\n", "env", ".", "update", "(", "\n", "MKL_NUM_THREADS", "=", "\"1\"", ",", "\n", "OMP_NUM_THREADS", "=", "\"1\"", ",", "\n", "IN_MPI", "=", "\"1\"", "\n", ")", "\n", "args", "=", "[", "\"mpirun\"", ",", "\"-np\"", ",", "str", "(", "n", ")", "]", "\n", "if", "bind_to_core", ":", "\n", "            ", "args", "+=", "[", "\"-bind-to\"", ",", "\"core\"", "]", "\n", "", "args", "+=", "[", "sys", ".", "executable", "]", "+", "sys", ".", "argv", "\n", "subprocess", ".", "check_call", "(", "args", ",", "env", "=", "env", ")", "\n", "return", "\"parent\"", "\n", "", "else", ":", "\n", "        ", "return", "\"child\"", "\n", "", "", ""]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.console_util.fmt_row": [[10, 14], ["console_util.fmt_item", "len"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.console_util.fmt_item"], ["def", "fmt_row", "(", "width", ",", "row", ",", "header", "=", "False", ")", ":", "\n", "    ", "out", "=", "\" | \"", ".", "join", "(", "fmt_item", "(", "x", ",", "width", ")", "for", "x", "in", "row", ")", "\n", "if", "header", ":", "out", "=", "out", "+", "\"\\n\"", "+", "\"-\"", "*", "len", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.console_util.fmt_item": [[15, 22], ["isinstance", "isinstance", "x.item.item", "str", "len"], "function", ["None"], ["", "def", "fmt_item", "(", "x", ",", "l", ")", ":", "\n", "    ", "if", "isinstance", "(", "x", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "assert", "x", ".", "ndim", "==", "0", "\n", "x", "=", "x", ".", "item", "(", ")", "\n", "", "if", "isinstance", "(", "x", ",", "float", ")", ":", "rep", "=", "\"%g\"", "%", "x", "\n", "else", ":", "rep", "=", "str", "(", "x", ")", "\n", "return", "\" \"", "*", "(", "l", "-", "len", "(", "rep", ")", ")", "+", "rep", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.console_util.colorize": [[35, 42], ["attr.append", "str", "attr.append"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append"], ["def", "colorize", "(", "string", ",", "color", ",", "bold", "=", "False", ",", "highlight", "=", "False", ")", ":", "\n", "    ", "attr", "=", "[", "]", "\n", "num", "=", "color2num", "[", "color", "]", "\n", "if", "highlight", ":", "num", "+=", "10", "\n", "attr", ".", "append", "(", "str", "(", "num", ")", ")", "\n", "if", "bold", ":", "attr", ".", "append", "(", "'1'", ")", "\n", "return", "'\\x1b[%sm%s\\x1b[0m'", "%", "(", "';'", ".", "join", "(", "attr", ")", ",", "string", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.console_util.timed": [[46, 55], ["print", "time.time", "print", "console_util.colorize", "console_util.colorize", "time.time"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.console_util.colorize", "home.repos.pwc.inspect_result.flowersteam_geppg.common.console_util.colorize"], ["@", "contextmanager", "\n", "def", "timed", "(", "msg", ")", ":", "\n", "    ", "global", "MESSAGE_DEPTH", "#pylint: disable=W0603", "\n", "print", "(", "colorize", "(", "'\\t'", "*", "MESSAGE_DEPTH", "+", "'=: '", "+", "msg", ",", "color", "=", "'magenta'", ")", ")", "\n", "tstart", "=", "time", ".", "time", "(", ")", "\n", "MESSAGE_DEPTH", "+=", "1", "\n", "yield", "\n", "MESSAGE_DEPTH", "-=", "1", "\n", "print", "(", "colorize", "(", "'\\t'", "*", "MESSAGE_DEPTH", "+", "\"done in %.3f seconds\"", "%", "(", "time", ".", "time", "(", ")", "-", "tstart", ")", ",", "color", "=", "'magenta'", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.azure_utils.Container.__init__": [[52, 60], ["BlobService", "azure_utils.Container._service.create_container"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "account_name", ",", "account_key", ",", "container_name", ",", "maybe_create", "=", "False", ")", ":", "\n", "        ", "self", ".", "_account_name", "=", "account_name", "\n", "self", ".", "_container_name", "=", "container_name", "\n", "if", "account_name", "not", "in", "Container", ".", "services", ":", "\n", "            ", "Container", ".", "services", "[", "account_name", "]", "=", "BlobService", "(", "account_name", ",", "account_key", ")", "\n", "", "self", ".", "_service", "=", "Container", ".", "services", "[", "account_name", "]", "\n", "if", "maybe_create", ":", "\n", "            ", "self", ".", "_service", ".", "create_container", "(", "self", ".", "_container_name", ",", "fail_on_exist", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.azure_utils.Container.put": [[61, 100], ["threading.Event", "azure_utils.Container._service.copy_blob", "tempfile.TemporaryDirectory", "os.path.join", "azure_utils.make_archive", "azure_utils.Container._service.put_block_blob_from_path", "threading.Event.wait", "callback", "threading.Event.set"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.azure_utils.make_archive"], ["", "", "def", "put", "(", "self", ",", "source_path", ",", "blob_name", ",", "callback", "=", "None", ")", ":", "\n", "        ", "\"\"\"Upload a file or directory from `source_path` to azure blob `blob_name`.\n\n        Upload progress can be traced by an optional callback.\n        \"\"\"", "\n", "upload_done", "=", "Event", "(", ")", "\n", "\n", "def", "progress_callback", "(", "current", ",", "total", ")", ":", "\n", "            ", "if", "callback", ":", "\n", "                ", "callback", "(", "current", ",", "total", ")", "\n", "", "if", "current", ">=", "total", ":", "\n", "                ", "upload_done", ".", "set", "(", ")", "\n", "\n", "# Attempt to make backup if an existing version is already available", "\n", "", "", "try", ":", "\n", "            ", "x_ms_copy_source", "=", "\"https://{}.blob.core.windows.net/{}/{}\"", ".", "format", "(", "\n", "self", ".", "_account_name", ",", "\n", "self", ".", "_container_name", ",", "\n", "blob_name", "\n", ")", "\n", "self", ".", "_service", ".", "copy_blob", "(", "\n", "container_name", "=", "self", ".", "_container_name", ",", "\n", "blob_name", "=", "blob_name", "+", "\".backup\"", ",", "\n", "x_ms_copy_source", "=", "x_ms_copy_source", "\n", ")", "\n", "", "except", "AzureMissingResourceHttpError", ":", "\n", "            ", "pass", "\n", "\n", "", "with", "tempfile", ".", "TemporaryDirectory", "(", ")", "as", "td", ":", "\n", "            ", "arcpath", "=", "os", ".", "path", ".", "join", "(", "td", ",", "\"archive.zip\"", ")", "\n", "make_archive", "(", "source_path", ",", "arcpath", ")", "\n", "self", ".", "_service", ".", "put_block_blob_from_path", "(", "\n", "container_name", "=", "self", ".", "_container_name", ",", "\n", "blob_name", "=", "blob_name", ",", "\n", "file_path", "=", "arcpath", ",", "\n", "max_connections", "=", "4", ",", "\n", "progress_callback", "=", "progress_callback", ",", "\n", "max_retries", "=", "10", ")", "\n", "upload_done", ".", "wait", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.azure_utils.Container.get": [[101, 143], ["threading.Event", "tempfile.TemporaryDirectory", "os.path.join", "callback", "threading.Event.set", "azure_utils.Container._service.get_blob_properties", "hasattr", "int", "azure_utils.Container._service.get_blob_to_path", "shutil.unpack_archive", "threading.Event.wait"], "methods", ["None"], ["", "", "def", "get", "(", "self", ",", "dest_path", ",", "blob_name", ",", "callback", "=", "None", ")", ":", "\n", "        ", "\"\"\"Download a file or directory to `dest_path` to azure blob `blob_name`.\n\n        Warning! If directory is downloaded the `dest_path` is the parent directory.\n\n        Upload progress can be traced by an optional callback.\n        \"\"\"", "\n", "download_done", "=", "Event", "(", ")", "\n", "\n", "def", "progress_callback", "(", "current", ",", "total", ")", ":", "\n", "            ", "if", "callback", ":", "\n", "                ", "callback", "(", "current", ",", "total", ")", "\n", "", "if", "current", ">=", "total", ":", "\n", "                ", "download_done", ".", "set", "(", ")", "\n", "\n", "", "", "with", "tempfile", ".", "TemporaryDirectory", "(", ")", "as", "td", ":", "\n", "            ", "arcpath", "=", "os", ".", "path", ".", "join", "(", "td", ",", "\"archive.zip\"", ")", "\n", "for", "backup_blob_name", "in", "[", "blob_name", ",", "blob_name", "+", "'.backup'", "]", ":", "\n", "                ", "try", ":", "\n", "                    ", "properties", "=", "self", ".", "_service", ".", "get_blob_properties", "(", "\n", "blob_name", "=", "backup_blob_name", ",", "\n", "container_name", "=", "self", ".", "_container_name", "\n", ")", "\n", "if", "hasattr", "(", "properties", ",", "'properties'", ")", ":", "\n", "# Annoyingly, Azure has changed the API and this now returns a blob", "\n", "# instead of it's properties with up-to-date azure package.", "\n", "                        ", "blob_size", "=", "properties", ".", "properties", ".", "content_length", "\n", "", "else", ":", "\n", "                        ", "blob_size", "=", "properties", "[", "'content-length'", "]", "\n", "", "if", "int", "(", "blob_size", ")", ">", "0", ":", "\n", "                        ", "self", ".", "_service", ".", "get_blob_to_path", "(", "\n", "container_name", "=", "self", ".", "_container_name", ",", "\n", "blob_name", "=", "backup_blob_name", ",", "\n", "file_path", "=", "arcpath", ",", "\n", "max_connections", "=", "4", ",", "\n", "progress_callback", "=", "progress_callback", ")", "\n", "unpack_archive", "(", "arcpath", ",", "dest_path", ")", "\n", "download_done", ".", "wait", "(", ")", "\n", "return", "True", "\n", "", "", "except", "AzureMissingResourceHttpError", ":", "\n", "                    ", "pass", "\n", "", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.azure_utils.Container.list": [[144, 147], ["azure_utils.fixed_list_blobs"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.azure_utils.fixed_list_blobs"], ["", "def", "list", "(", "self", ",", "prefix", "=", "None", ")", ":", "\n", "        ", "\"\"\"List all blobs in the container.\"\"\"", "\n", "return", "fixed_list_blobs", "(", "self", ".", "_service", ",", "self", ".", "_container_name", ",", "prefix", "=", "prefix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.azure_utils.Container.exists": [[148, 158], ["azure_utils.Container._service.get_blob_properties"], "methods", ["None"], ["", "def", "exists", "(", "self", ",", "blob_name", ")", ":", "\n", "        ", "\"\"\"Returns true if `blob_name` exists in container.\"\"\"", "\n", "try", ":", "\n", "            ", "self", ".", "_service", ".", "get_blob_properties", "(", "\n", "blob_name", "=", "blob_name", ",", "\n", "container_name", "=", "self", ".", "_container_name", "\n", ")", "\n", "return", "True", "\n", "", "except", "AzureMissingResourceHttpError", ":", "\n", "            ", "return", "False", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.azure_utils.fixed_list_blobs": [[18, 32], ["service.list_blobs", "len", "res.append"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append"], ["def", "fixed_list_blobs", "(", "service", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"By defualt list_containers only returns a subset of results.\n\n    This function attempts to fix this.\n    \"\"\"", "\n", "res", "=", "[", "]", "\n", "next_marker", "=", "None", "\n", "while", "next_marker", "is", "None", "or", "len", "(", "next_marker", ")", ">", "0", ":", "\n", "        ", "kwargs", "[", "'marker'", "]", "=", "next_marker", "\n", "gen", "=", "service", ".", "list_blobs", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "for", "b", "in", "gen", ":", "\n", "            ", "res", ".", "append", "(", "b", ".", "name", ")", "\n", "", "next_marker", "=", "gen", ".", "next_marker", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.azure_utils.make_archive": [[34, 47], ["source_path.rstrip.endswith", "os.path.dirname", "source_path.rstrip.rstrip", "zipfile.ZipFile", "os.path.isdir", "os.walk", "zf.write", "zf.write", "os.path.relpath", "os.path.relpath", "os.path.join", "zf.write", "os.path.relpath"], "function", ["None"], ["", "def", "make_archive", "(", "source_path", ",", "dest_path", ")", ":", "\n", "    ", "if", "source_path", ".", "endswith", "(", "os", ".", "path", ".", "sep", ")", ":", "\n", "        ", "source_path", "=", "source_path", ".", "rstrip", "(", "os", ".", "path", ".", "sep", ")", "\n", "", "prefix_path", "=", "os", ".", "path", ".", "dirname", "(", "source_path", ")", "\n", "with", "zipfile", ".", "ZipFile", "(", "dest_path", ",", "\"w\"", ",", "compression", "=", "zipfile", ".", "ZIP_STORED", ")", "as", "zf", ":", "\n", "        ", "if", "os", ".", "path", ".", "isdir", "(", "source_path", ")", ":", "\n", "            ", "for", "dirname", ",", "subdirs", ",", "files", "in", "os", ".", "walk", "(", "source_path", ")", ":", "\n", "                ", "zf", ".", "write", "(", "dirname", ",", "os", ".", "path", ".", "relpath", "(", "dirname", ",", "prefix_path", ")", ")", "\n", "for", "filename", "in", "files", ":", "\n", "                    ", "filepath", "=", "os", ".", "path", ".", "join", "(", "dirname", ",", "filename", ")", "\n", "zf", ".", "write", "(", "filepath", ",", "os", ".", "path", ".", "relpath", "(", "filepath", ",", "prefix_path", ")", ")", "\n", "", "", "", "else", ":", "\n", "            ", "zf", ".", "write", "(", "source_path", ",", "os", ".", "path", ".", "relpath", "(", "source_path", ",", "prefix_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.schedules.Schedule.value": [[13, 16], ["NotImplementedError"], "methods", ["None"], ["    ", "def", "value", "(", "self", ",", "t", ")", ":", "\n", "        ", "\"\"\"Value of the schedule at time t\"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.schedules.ConstantSchedule.__init__": [[19, 28], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "value", ")", ":", "\n", "        ", "\"\"\"Value remains constant over time.\n\n        Parameters\n        ----------\n        value: float\n            Constant value of the schedule\n        \"\"\"", "\n", "self", ".", "_v", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.schedules.ConstantSchedule.value": [[29, 32], ["None"], "methods", ["None"], ["", "def", "value", "(", "self", ",", "t", ")", ":", "\n", "        ", "\"\"\"See Schedule.value\"\"\"", "\n", "return", "self", ".", "_v", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.schedules.PiecewiseSchedule.__init__": [[39, 63], ["sorted"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "endpoints", ",", "interpolation", "=", "linear_interpolation", ",", "outside_value", "=", "None", ")", ":", "\n", "        ", "\"\"\"Piecewise schedule.\n\n        endpoints: [(int, int)]\n            list of pairs `(time, value)` meanining that schedule should output\n            `value` when `t==time`. All the values for time must be sorted in\n            an increasing order. When t is between two times, e.g. `(time_a, value_a)`\n            and `(time_b, value_b)`, such that `time_a <= t < time_b` then value outputs\n            `interpolation(value_a, value_b, alpha)` where alpha is a fraction of\n            time passed between `time_a` and `time_b` for time `t`.\n        interpolation: lambda float, float, float: float\n            a function that takes value to the left and to the right of t according\n            to the `endpoints`. Alpha is the fraction of distance from left endpoint to\n            right endpoint that t has covered. See linear_interpolation for example.\n        outside_value: float\n            if the value is requested outside of all the intervals sepecified in\n            `endpoints` this value is returned. If None then AssertionError is\n            raised when outside value is requested.\n        \"\"\"", "\n", "idxes", "=", "[", "e", "[", "0", "]", "for", "e", "in", "endpoints", "]", "\n", "assert", "idxes", "==", "sorted", "(", "idxes", ")", "\n", "self", ".", "_interpolation", "=", "interpolation", "\n", "self", ".", "_outside_value", "=", "outside_value", "\n", "self", ".", "_endpoints", "=", "endpoints", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.schedules.PiecewiseSchedule.value": [[64, 74], ["zip", "schedules.PiecewiseSchedule._interpolation", "float"], "methods", ["None"], ["", "def", "value", "(", "self", ",", "t", ")", ":", "\n", "        ", "\"\"\"See Schedule.value\"\"\"", "\n", "for", "(", "l_t", ",", "l", ")", ",", "(", "r_t", ",", "r", ")", "in", "zip", "(", "self", ".", "_endpoints", "[", ":", "-", "1", "]", ",", "self", ".", "_endpoints", "[", "1", ":", "]", ")", ":", "\n", "            ", "if", "l_t", "<=", "t", "and", "t", "<", "r_t", ":", "\n", "                ", "alpha", "=", "float", "(", "t", "-", "l_t", ")", "/", "(", "r_t", "-", "l_t", ")", "\n", "return", "self", ".", "_interpolation", "(", "l", ",", "r", ",", "alpha", ")", "\n", "\n", "# t does not belong to any of the pieces, so doom.", "\n", "", "", "assert", "self", ".", "_outside_value", "is", "not", "None", "\n", "return", "self", ".", "_outside_value", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.schedules.LinearSchedule.__init__": [[77, 95], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "schedule_timesteps", ",", "final_p", ",", "initial_p", "=", "1.0", ")", ":", "\n", "        ", "\"\"\"Linear interpolation between initial_p and final_p over\n        schedule_timesteps. After this many timesteps pass final_p is\n        returned.\n\n        Parameters\n        ----------\n        schedule_timesteps: int\n            Number of timesteps for which to linearly anneal initial_p\n            to final_p\n        initial_p: float\n            initial output value\n        final_p: float\n            final output value\n        \"\"\"", "\n", "self", ".", "schedule_timesteps", "=", "schedule_timesteps", "\n", "self", ".", "final_p", "=", "final_p", "\n", "self", ".", "initial_p", "=", "initial_p", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.schedules.LinearSchedule.value": [[96, 100], ["min", "float"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.min"], ["", "def", "value", "(", "self", ",", "t", ")", ":", "\n", "        ", "\"\"\"See Schedule.value\"\"\"", "\n", "fraction", "=", "min", "(", "float", "(", "t", ")", "/", "self", ".", "schedule_timesteps", ",", "1.0", ")", "\n", "return", "self", ".", "initial_p", "+", "fraction", "*", "(", "self", ".", "final_p", "-", "self", ".", "initial_p", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.schedules.linear_interpolation": [[34, 36], ["None"], "function", ["None"], ["", "", "def", "linear_interpolation", "(", "l", ",", "r", ",", "alpha", ")", ":", "\n", "    ", "return", "l", "+", "alpha", "*", "(", "r", "-", "l", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.misc_util.EzPickle.__init__": [[58, 61], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_ezpickle_args", "=", "args", "\n", "self", ".", "_ezpickle_kwargs", "=", "kwargs", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.misc_util.EzPickle.__getstate__": [[62, 64], ["None"], "methods", ["None"], ["", "def", "__getstate__", "(", "self", ")", ":", "\n", "        ", "return", "{", "\"_ezpickle_args\"", ":", "self", ".", "_ezpickle_args", ",", "\"_ezpickle_kwargs\"", ":", "self", ".", "_ezpickle_kwargs", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.misc_util.EzPickle.__setstate__": [[65, 68], ["misc_util.EzPickle.__dict__.update", "type"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.mpi_running_mean_std.RunningMeanStd.update"], ["", "def", "__setstate__", "(", "self", ",", "d", ")", ":", "\n", "        ", "out", "=", "type", "(", "self", ")", "(", "*", "d", "[", "\"_ezpickle_args\"", "]", ",", "**", "d", "[", "\"_ezpickle_kwargs\"", "]", ")", "\n", "self", ".", "__dict__", ".", "update", "(", "out", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.misc_util.RunningAvg.__init__": [[124, 138], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "gamma", ",", "init_value", "=", "None", ")", ":", "\n", "        ", "\"\"\"Keep a running estimate of a quantity. This is a bit like mean\n        but more sensitive to recent changes.\n\n        Parameters\n        ----------\n        gamma: float\n            Must be between 0 and 1, where 0 is the most sensitive to recent\n            changes.\n        init_value: float or None\n            Initial value of the estimate. If None, it will be set on the first update.\n        \"\"\"", "\n", "self", ".", "_value", "=", "init_value", "\n", "self", ".", "_gamma", "=", "gamma", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.misc_util.RunningAvg.update": [[139, 151], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "new_val", ")", ":", "\n", "        ", "\"\"\"Update the estimate.\n\n        Parameters\n        ----------\n        new_val: float\n            new observated value of estimated quantity.\n        \"\"\"", "\n", "if", "self", ".", "_value", "is", "None", ":", "\n", "            ", "self", ".", "_value", "=", "new_val", "\n", "", "else", ":", "\n", "            ", "self", ".", "_value", "=", "self", ".", "_gamma", "*", "self", ".", "_value", "+", "(", "1.0", "-", "self", ".", "_gamma", ")", "*", "new_val", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.misc_util.RunningAvg.__float__": [[152, 155], ["None"], "methods", ["None"], ["", "", "def", "__float__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get the current estimate\"\"\"", "\n", "return", "self", ".", "_value", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.misc_util.SimpleMonitor.__init__": [[158, 177], ["gym.Wrapper.__init__"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.subproc_vec_env.SubprocVecEnv.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ")", ":", "\n", "        ", "\"\"\"Adds two qunatities to info returned by every step:\n\n            num_steps: int\n                Number of steps takes so far\n            rewards: [float]\n                All the cumulative rewards for the episodes completed so far.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "env", ")", "\n", "# current episode state", "\n", "self", ".", "_current_reward", "=", "None", "\n", "self", ".", "_num_steps", "=", "None", "\n", "# temporary monitor state that we do not save", "\n", "self", ".", "_time_offset", "=", "None", "\n", "self", ".", "_total_steps", "=", "None", "\n", "# monitor state", "\n", "self", ".", "_episode_rewards", "=", "[", "]", "\n", "self", ".", "_episode_lengths", "=", "[", "]", "\n", "self", ".", "_episode_end_times", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.misc_util.SimpleMonitor._reset": [[178, 197], ["misc_util.SimpleMonitor.env.reset", "time.time", "sum", "misc_util.SimpleMonitor._episode_rewards.append", "misc_util.SimpleMonitor._episode_lengths.append", "misc_util.SimpleMonitor._episode_end_times.append", "len", "time.time"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.sum", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append"], ["", "def", "_reset", "(", "self", ")", ":", "\n", "        ", "obs", "=", "self", ".", "env", ".", "reset", "(", ")", "\n", "# recompute temporary state if needed", "\n", "if", "self", ".", "_time_offset", "is", "None", ":", "\n", "            ", "self", ".", "_time_offset", "=", "time", ".", "time", "(", ")", "\n", "if", "len", "(", "self", ".", "_episode_end_times", ")", ">", "0", ":", "\n", "                ", "self", ".", "_time_offset", "-=", "self", ".", "_episode_end_times", "[", "-", "1", "]", "\n", "", "", "if", "self", ".", "_total_steps", "is", "None", ":", "\n", "            ", "self", ".", "_total_steps", "=", "sum", "(", "self", ".", "_episode_lengths", ")", "\n", "# update monitor state", "\n", "", "if", "self", ".", "_current_reward", "is", "not", "None", ":", "\n", "            ", "self", ".", "_episode_rewards", ".", "append", "(", "self", ".", "_current_reward", ")", "\n", "self", ".", "_episode_lengths", ".", "append", "(", "self", ".", "_num_steps", ")", "\n", "self", ".", "_episode_end_times", ".", "append", "(", "time", ".", "time", "(", ")", "-", "self", ".", "_time_offset", ")", "\n", "# reset episode state", "\n", "", "self", ".", "_current_reward", "=", "0", "\n", "self", ".", "_num_steps", "=", "0", "\n", "\n", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.misc_util.SimpleMonitor._step": [[198, 206], ["misc_util.SimpleMonitor.env.step"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.__init__.VecEnv.step"], ["", "def", "_step", "(", "self", ",", "action", ")", ":", "\n", "        ", "obs", ",", "rew", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "self", ".", "_current_reward", "+=", "rew", "\n", "self", ".", "_num_steps", "+=", "1", "\n", "self", ".", "_total_steps", "+=", "1", "\n", "info", "[", "'steps'", "]", "=", "self", ".", "_total_steps", "\n", "info", "[", "'rewards'", "]", "=", "self", ".", "_episode_rewards", "\n", "return", "(", "obs", ",", "rew", ",", "done", ",", "info", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.misc_util.SimpleMonitor.get_state": [[207, 215], ["None"], "methods", ["None"], ["", "def", "get_state", "(", "self", ")", ":", "\n", "        ", "return", "{", "\n", "'env_id'", ":", "self", ".", "env", ".", "unwrapped", ".", "spec", ".", "id", ",", "\n", "'episode_data'", ":", "{", "\n", "'episode_rewards'", ":", "self", ".", "_episode_rewards", ",", "\n", "'episode_lengths'", ":", "self", ".", "_episode_lengths", ",", "\n", "'episode_end_times'", ":", "self", ".", "_episode_end_times", ",", "\n", "'initial_reset_time'", ":", "0", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.misc_util.SimpleMonitor.set_state": [[218, 224], ["None"], "methods", ["None"], ["", "def", "set_state", "(", "self", ",", "state", ")", ":", "\n", "        ", "assert", "state", "[", "'env_id'", "]", "==", "self", ".", "env", ".", "unwrapped", ".", "spec", ".", "id", "\n", "ed", "=", "state", "[", "'episode_data'", "]", "\n", "self", ".", "_episode_rewards", "=", "ed", "[", "'episode_rewards'", "]", "\n", "self", ".", "_episode_lengths", "=", "ed", "[", "'episode_lengths'", "]", "\n", "self", ".", "_episode_end_times", "=", "ed", "[", "'episode_end_times'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.misc_util.zipsame": [[11, 15], ["len", "all", "zip", "len"], "function", ["None"], ["def", "zipsame", "(", "*", "seqs", ")", ":", "\n", "    ", "L", "=", "len", "(", "seqs", "[", "0", "]", ")", "\n", "assert", "all", "(", "len", "(", "seq", ")", "==", "L", "for", "seq", "in", "seqs", "[", "1", ":", "]", ")", "\n", "return", "zip", "(", "*", "seqs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.misc_util.unpack": [[17, 36], ["list", "iter", "sum", "len", "range", "iter.__next__", "li.append", "iter.__next__"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.azure_utils.Container.list", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.sum", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append"], ["", "def", "unpack", "(", "seq", ",", "sizes", ")", ":", "\n", "    ", "\"\"\"\n    Unpack 'seq' into a sequence of lists, with lengths specified by 'sizes'.\n    None = just one bare element, not a list\n\n    Example:\n    unpack([1,2,3,4,5,6], [3,None,2]) -> ([1,2,3], 4, [5,6])\n    \"\"\"", "\n", "seq", "=", "list", "(", "seq", ")", "\n", "it", "=", "iter", "(", "seq", ")", "\n", "assert", "sum", "(", "1", "if", "s", "is", "None", "else", "s", "for", "s", "in", "sizes", ")", "==", "len", "(", "seq", ")", ",", "\"Trying to unpack %s into %s\"", "%", "(", "seq", ",", "sizes", ")", "\n", "for", "size", "in", "sizes", ":", "\n", "        ", "if", "size", "is", "None", ":", "\n", "            ", "yield", "it", ".", "__next__", "(", ")", "\n", "", "else", ":", "\n", "            ", "li", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "size", ")", ":", "\n", "                ", "li", ".", "append", "(", "it", ".", "__next__", "(", ")", ")", "\n", "", "yield", "li", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.misc_util.set_global_seeds": [[70, 79], ["numpy.random.seed", "random.seed", "tf.set_random_seed"], "function", ["None"], ["", "", "def", "set_global_seeds", "(", "i", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "import", "tensorflow", "as", "tf", "\n", "", "except", "ImportError", ":", "\n", "        ", "pass", "\n", "", "else", ":", "\n", "        ", "tf", ".", "set_random_seed", "(", "i", ")", "\n", "", "np", ".", "random", ".", "seed", "(", "i", ")", "\n", "random", ".", "seed", "(", "i", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.misc_util.pretty_eta": [[81, 121], ["misc_util.pretty_eta.helper"], "function", ["None"], ["", "def", "pretty_eta", "(", "seconds_left", ")", ":", "\n", "    ", "\"\"\"Print the number of seconds in human readable format.\n\n    Examples:\n    2 days\n    2 hours and 37 minutes\n    less than a minute\n\n    Paramters\n    ---------\n    seconds_left: int\n        Number of seconds to be converted to the ETA\n    Returns\n    -------\n    eta: str\n        String representing the pretty ETA.\n    \"\"\"", "\n", "minutes_left", "=", "seconds_left", "//", "60", "\n", "seconds_left", "%=", "60", "\n", "hours_left", "=", "minutes_left", "//", "60", "\n", "minutes_left", "%=", "60", "\n", "days_left", "=", "hours_left", "//", "24", "\n", "hours_left", "%=", "24", "\n", "\n", "def", "helper", "(", "cnt", ",", "name", ")", ":", "\n", "        ", "return", "\"{} {}{}\"", ".", "format", "(", "str", "(", "cnt", ")", ",", "name", ",", "(", "'s'", "if", "cnt", ">", "1", "else", "''", ")", ")", "\n", "\n", "", "if", "days_left", ">", "0", ":", "\n", "        ", "msg", "=", "helper", "(", "days_left", ",", "'day'", ")", "\n", "if", "hours_left", ">", "0", ":", "\n", "            ", "msg", "+=", "' and '", "+", "helper", "(", "hours_left", ",", "'hour'", ")", "\n", "", "return", "msg", "\n", "", "if", "hours_left", ">", "0", ":", "\n", "        ", "msg", "=", "helper", "(", "hours_left", ",", "'hour'", ")", "\n", "if", "minutes_left", ">", "0", ":", "\n", "            ", "msg", "+=", "' and '", "+", "helper", "(", "minutes_left", ",", "'minute'", ")", "\n", "", "return", "msg", "\n", "", "if", "minutes_left", ">", "0", ":", "\n", "        ", "return", "helper", "(", "minutes_left", ",", "'minute'", ")", "\n", "", "return", "'less than a minute'", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.misc_util.boolean_flag": [[226, 243], ["name.replace", "parser.add_argument", "parser.add_argument"], "function", ["None"], ["", "", "def", "boolean_flag", "(", "parser", ",", "name", ",", "default", "=", "False", ",", "help", "=", "None", ")", ":", "\n", "    ", "\"\"\"Add a boolean flag to argparse parser.\n\n    Parameters\n    ----------\n    parser: argparse.Parser\n        parser to add the flag to\n    name: str\n        --<name> will enable the flag, while --no-<name> will disable it\n    default: bool or None\n        default value of the flag\n    help: str\n        help string for the flag\n    \"\"\"", "\n", "dest", "=", "name", ".", "replace", "(", "'-'", ",", "'_'", ")", "\n", "parser", ".", "add_argument", "(", "\"--\"", "+", "name", ",", "action", "=", "\"store_true\"", ",", "default", "=", "default", ",", "dest", "=", "dest", ",", "help", "=", "help", ")", "\n", "parser", ".", "add_argument", "(", "\"--no-\"", "+", "name", ",", "action", "=", "\"store_false\"", ",", "dest", "=", "dest", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.misc_util.get_wrapper_by_name": [[245, 269], ["currentenv.class_name", "isinstance", "ValueError"], "function", ["None"], ["", "def", "get_wrapper_by_name", "(", "env", ",", "classname", ")", ":", "\n", "    ", "\"\"\"Given an a gym environment possibly wrapped multiple times, returns a wrapper\n    of class named classname or raises ValueError if no such wrapper was applied\n\n    Parameters\n    ----------\n    env: gym.Env of gym.Wrapper\n        gym environment\n    classname: str\n        name of the wrapper\n\n    Returns\n    -------\n    wrapper: gym.Wrapper\n        wrapper named classname\n    \"\"\"", "\n", "currentenv", "=", "env", "\n", "while", "True", ":", "\n", "        ", "if", "classname", "==", "currentenv", ".", "class_name", "(", ")", ":", "\n", "            ", "return", "currentenv", "\n", "", "elif", "isinstance", "(", "currentenv", ",", "gym", ".", "Wrapper", ")", ":", "\n", "            ", "currentenv", "=", "currentenv", ".", "env", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Couldn't find wrapper named %s\"", "%", "classname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.misc_util.relatively_safe_pickle_dump": [[271, 304], ["os.rename", "tempfile.NamedTemporaryFile", "pickle.dump", "open", "pickle.dump", "zipfile.ZipFile", "myzip.write"], "function", ["None"], ["", "", "", "def", "relatively_safe_pickle_dump", "(", "obj", ",", "path", ",", "compression", "=", "False", ")", ":", "\n", "    ", "\"\"\"This is just like regular pickle dump, except from the fact that failure cases are\n    different:\n\n        - It's never possible that we end up with a pickle in corrupted state.\n        - If a there was a different file at the path, that file will remain unchanged in the\n          even of failure (provided that filesystem rename is atomic).\n        - it is sometimes possible that we end up with useless temp file which needs to be\n          deleted manually (it will be removed automatically on the next function call)\n\n    The indended use case is periodic checkpoints of experiment state, such that we never\n    corrupt previous checkpoints if the current one fails.\n\n    Parameters\n    ----------\n    obj: object\n        object to pickle\n    path: str\n        path to the output file\n    compression: bool\n        if true pickle will be compressed\n    \"\"\"", "\n", "temp_storage", "=", "path", "+", "\".relatively_safe\"", "\n", "if", "compression", ":", "\n", "# Using gzip here would be simpler, but the size is limited to 2GB", "\n", "        ", "with", "tempfile", ".", "NamedTemporaryFile", "(", ")", "as", "uncompressed_file", ":", "\n", "            ", "pickle", ".", "dump", "(", "obj", ",", "uncompressed_file", ")", "\n", "with", "zipfile", ".", "ZipFile", "(", "temp_storage", ",", "\"w\"", ",", "compression", "=", "zipfile", ".", "ZIP_DEFLATED", ")", "as", "myzip", ":", "\n", "                ", "myzip", ".", "write", "(", "uncompressed_file", ".", "name", ",", "\"data\"", ")", "\n", "", "", "", "else", ":", "\n", "        ", "with", "open", "(", "temp_storage", ",", "\"wb\"", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "obj", ",", "f", ")", "\n", "", "", "os", ".", "rename", "(", "temp_storage", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.misc_util.pickle_load": [[306, 329], ["zipfile.ZipFile", "open", "pickle.load", "myzip.open", "pickle.load"], "function", ["None"], ["", "def", "pickle_load", "(", "path", ",", "compression", "=", "False", ")", ":", "\n", "    ", "\"\"\"Unpickle a possible compressed pickle.\n\n    Parameters\n    ----------\n    path: str\n        path to the output file\n    compression: bool\n        if true assumes that pickle was compressed when created and attempts decompression.\n\n    Returns\n    -------\n    obj: object\n        the unpickled object\n    \"\"\"", "\n", "\n", "if", "compression", ":", "\n", "        ", "with", "zipfile", ".", "ZipFile", "(", "path", ",", "\"r\"", ",", "compression", "=", "zipfile", ".", "ZIP_DEFLATED", ")", "as", "myzip", ":", "\n", "            ", "with", "myzip", ".", "open", "(", "\"data\"", ")", "as", "f", ":", "\n", "                ", "return", "pickle", ".", "load", "(", "f", ")", "\n", "", "", "", "else", ":", "\n", "        ", "with", "open", "(", "path", ",", "\"rb\"", ")", "as", "f", ":", "\n", "            ", "return", "pickle", ".", "load", "(", "f", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.atari_wrappers_deprecated.NoopResetEnv.__init__": [[10, 18], ["gym.Wrapper.__init__", "env.unwrapped.get_action_meanings"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.subproc_vec_env.SubprocVecEnv.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", "=", "None", ",", "noop_max", "=", "30", ")", ":", "\n", "        ", "\"\"\"Sample initial states by taking random number of no-ops on reset.\n        No-op is assumed to be action 0.\n        \"\"\"", "\n", "super", "(", "NoopResetEnv", ",", "self", ")", ".", "__init__", "(", "env", ")", "\n", "self", ".", "noop_max", "=", "noop_max", "\n", "self", ".", "override_num_noops", "=", "None", "\n", "assert", "env", ".", "unwrapped", ".", "get_action_meanings", "(", ")", "[", "0", "]", "==", "'NOOP'", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.atari_wrappers_deprecated.NoopResetEnv._reset": [[19, 33], ["atari_wrappers_deprecated.NoopResetEnv.env.reset", "range", "numpy.random.randint", "atari_wrappers_deprecated.NoopResetEnv.env.step", "atari_wrappers_deprecated.NoopResetEnv.env.reset"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.__init__.VecEnv.step", "home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.__init__.VecEnv.reset"], ["", "def", "_reset", "(", "self", ")", ":", "\n", "        ", "\"\"\" Do no-op action for a number of steps in [1, noop_max].\"\"\"", "\n", "self", ".", "env", ".", "reset", "(", ")", "\n", "if", "self", ".", "override_num_noops", "is", "not", "None", ":", "\n", "            ", "noops", "=", "self", ".", "override_num_noops", "\n", "", "else", ":", "\n", "            ", "noops", "=", "np", ".", "random", ".", "randint", "(", "1", ",", "self", ".", "noop_max", "+", "1", ")", "\n", "", "assert", "noops", ">", "0", "\n", "obs", "=", "None", "\n", "for", "_", "in", "range", "(", "noops", ")", ":", "\n", "            ", "obs", ",", "_", ",", "done", ",", "_", "=", "self", ".", "env", ".", "step", "(", "0", ")", "\n", "if", "done", ":", "\n", "                ", "obs", "=", "self", ".", "env", ".", "reset", "(", ")", "\n", "", "", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.atari_wrappers_deprecated.FireResetEnv.__init__": [[36, 41], ["gym.Wrapper.__init__", "len", "env.unwrapped.get_action_meanings", "env.unwrapped.get_action_meanings"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.subproc_vec_env.SubprocVecEnv.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", "=", "None", ")", ":", "\n", "        ", "\"\"\"For environments where the user need to press FIRE for the game to start.\"\"\"", "\n", "super", "(", "FireResetEnv", ",", "self", ")", ".", "__init__", "(", "env", ")", "\n", "assert", "env", ".", "unwrapped", ".", "get_action_meanings", "(", ")", "[", "1", "]", "==", "'FIRE'", "\n", "assert", "len", "(", "env", ".", "unwrapped", ".", "get_action_meanings", "(", ")", ")", ">=", "3", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.atari_wrappers_deprecated.FireResetEnv._reset": [[42, 51], ["atari_wrappers_deprecated.FireResetEnv.env.reset", "atari_wrappers_deprecated.FireResetEnv.env.step", "atari_wrappers_deprecated.FireResetEnv.env.step", "atari_wrappers_deprecated.FireResetEnv.env.reset", "atari_wrappers_deprecated.FireResetEnv.env.reset"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.__init__.VecEnv.step", "home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.__init__.VecEnv.step", "home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.__init__.VecEnv.reset"], ["", "def", "_reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "env", ".", "reset", "(", ")", "\n", "obs", ",", "_", ",", "done", ",", "_", "=", "self", ".", "env", ".", "step", "(", "1", ")", "\n", "if", "done", ":", "\n", "            ", "self", ".", "env", ".", "reset", "(", ")", "\n", "", "obs", ",", "_", ",", "done", ",", "_", "=", "self", ".", "env", ".", "step", "(", "2", ")", "\n", "if", "done", ":", "\n", "            ", "self", ".", "env", ".", "reset", "(", ")", "\n", "", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.atari_wrappers_deprecated.EpisodicLifeEnv.__init__": [[54, 62], ["gym.Wrapper.__init__"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.subproc_vec_env.SubprocVecEnv.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", "=", "None", ")", ":", "\n", "        ", "\"\"\"Make end-of-life == end-of-episode, but only reset on true game over.\n        Done by DeepMind for the DQN and co. since it helps value estimation.\n        \"\"\"", "\n", "super", "(", "EpisodicLifeEnv", ",", "self", ")", ".", "__init__", "(", "env", ")", "\n", "self", ".", "lives", "=", "0", "\n", "self", ".", "was_real_done", "=", "True", "\n", "self", ".", "was_real_reset", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.atari_wrappers_deprecated.EpisodicLifeEnv._step": [[63, 76], ["atari_wrappers_deprecated.EpisodicLifeEnv.env.step", "atari_wrappers_deprecated.EpisodicLifeEnv.env.unwrapped.ale.lives"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.__init__.VecEnv.step"], ["", "def", "_step", "(", "self", ",", "action", ")", ":", "\n", "        ", "obs", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "self", ".", "was_real_done", "=", "done", "\n", "# check current lives, make loss of life terminal,", "\n", "# then update lives to handle bonus lives", "\n", "lives", "=", "self", ".", "env", ".", "unwrapped", ".", "ale", ".", "lives", "(", ")", "\n", "if", "lives", "<", "self", ".", "lives", "and", "lives", ">", "0", ":", "\n", "# for Qbert somtimes we stay in lives == 0 condtion for a few frames", "\n", "# so its important to keep lives > 0, so that we only reset once", "\n", "# the environment advertises done.", "\n", "            ", "done", "=", "True", "\n", "", "self", ".", "lives", "=", "lives", "\n", "return", "obs", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.atari_wrappers_deprecated.EpisodicLifeEnv._reset": [[77, 91], ["atari_wrappers_deprecated.EpisodicLifeEnv.env.unwrapped.ale.lives", "atari_wrappers_deprecated.EpisodicLifeEnv.env.reset", "atari_wrappers_deprecated.EpisodicLifeEnv.env.step"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.__init__.VecEnv.step"], ["", "def", "_reset", "(", "self", ")", ":", "\n", "        ", "\"\"\"Reset only when lives are exhausted.\n        This way all states are still reachable even though lives are episodic,\n        and the learner need not know about any of this behind-the-scenes.\n        \"\"\"", "\n", "if", "self", ".", "was_real_done", ":", "\n", "            ", "obs", "=", "self", ".", "env", ".", "reset", "(", ")", "\n", "self", ".", "was_real_reset", "=", "True", "\n", "", "else", ":", "\n", "# no-op step to advance from terminal/lost life state", "\n", "            ", "obs", ",", "_", ",", "_", ",", "_", "=", "self", ".", "env", ".", "step", "(", "0", ")", "\n", "self", ".", "was_real_reset", "=", "False", "\n", "", "self", ".", "lives", "=", "self", ".", "env", ".", "unwrapped", ".", "ale", ".", "lives", "(", ")", "\n", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.atari_wrappers_deprecated.MaxAndSkipEnv.__init__": [[94, 100], ["gym.Wrapper.__init__", "collections.deque"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.subproc_vec_env.SubprocVecEnv.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", "=", "None", ",", "skip", "=", "4", ")", ":", "\n", "        ", "\"\"\"Return only every `skip`-th frame\"\"\"", "\n", "super", "(", "MaxAndSkipEnv", ",", "self", ")", ".", "__init__", "(", "env", ")", "\n", "# most recent raw observations (for max pooling across time steps)", "\n", "self", ".", "_obs_buffer", "=", "deque", "(", "maxlen", "=", "2", ")", "\n", "self", ".", "_skip", "=", "skip", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.atari_wrappers_deprecated.MaxAndSkipEnv._step": [[101, 114], ["range", "numpy.max", "atari_wrappers_deprecated.MaxAndSkipEnv.env.step", "atari_wrappers_deprecated.MaxAndSkipEnv._obs_buffer.append", "numpy.stack"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.max", "home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.__init__.VecEnv.step", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append"], ["", "def", "_step", "(", "self", ",", "action", ")", ":", "\n", "        ", "total_reward", "=", "0.0", "\n", "done", "=", "None", "\n", "for", "_", "in", "range", "(", "self", ".", "_skip", ")", ":", "\n", "            ", "obs", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "self", ".", "_obs_buffer", ".", "append", "(", "obs", ")", "\n", "total_reward", "+=", "reward", "\n", "if", "done", ":", "\n", "                ", "break", "\n", "\n", "", "", "max_frame", "=", "np", ".", "max", "(", "np", ".", "stack", "(", "self", ".", "_obs_buffer", ")", ",", "axis", "=", "0", ")", "\n", "\n", "return", "max_frame", ",", "total_reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.atari_wrappers_deprecated.MaxAndSkipEnv._reset": [[115, 121], ["atari_wrappers_deprecated.MaxAndSkipEnv._obs_buffer.clear", "atari_wrappers_deprecated.MaxAndSkipEnv.env.reset", "atari_wrappers_deprecated.MaxAndSkipEnv._obs_buffer.append"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append"], ["", "def", "_reset", "(", "self", ")", ":", "\n", "        ", "\"\"\"Clear past frame buffer and init. to first obs. from inner env.\"\"\"", "\n", "self", ".", "_obs_buffer", ".", "clear", "(", ")", "\n", "obs", "=", "self", ".", "env", ".", "reset", "(", ")", "\n", "self", ".", "_obs_buffer", ".", "append", "(", "obs", ")", "\n", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.atari_wrappers_deprecated.ProcessFrame84.__init__": [[124, 127], ["gym.ObservationWrapper.__init__", "gym.spaces.Box"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.subproc_vec_env.SubprocVecEnv.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", "=", "None", ")", ":", "\n", "        ", "super", "(", "ProcessFrame84", ",", "self", ")", ".", "__init__", "(", "env", ")", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Box", "(", "low", "=", "0", ",", "high", "=", "255", ",", "shape", "=", "(", "84", ",", "84", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.atari_wrappers_deprecated.ProcessFrame84._observation": [[128, 130], ["atari_wrappers_deprecated.ProcessFrame84.process"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.atari_wrappers_deprecated.A2cProcessFrame.process"], ["", "def", "_observation", "(", "self", ",", "obs", ")", ":", "\n", "        ", "return", "ProcessFrame84", ".", "process", "(", "obs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.atari_wrappers_deprecated.ProcessFrame84.process": [[131, 144], ["cv2.resize", "numpy.reshape", "numpy.reshape.astype", "numpy.reshape().astype", "numpy.reshape().astype", "numpy.reshape", "numpy.reshape"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "process", "(", "frame", ")", ":", "\n", "        ", "if", "frame", ".", "size", "==", "210", "*", "160", "*", "3", ":", "\n", "            ", "img", "=", "np", ".", "reshape", "(", "frame", ",", "[", "210", ",", "160", ",", "3", "]", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "", "elif", "frame", ".", "size", "==", "250", "*", "160", "*", "3", ":", "\n", "            ", "img", "=", "np", ".", "reshape", "(", "frame", ",", "[", "250", ",", "160", ",", "3", "]", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "", "else", ":", "\n", "            ", "assert", "False", ",", "\"Unknown resolution.\"", "\n", "", "img", "=", "img", "[", ":", ",", ":", ",", "0", "]", "*", "0.299", "+", "img", "[", ":", ",", ":", ",", "1", "]", "*", "0.587", "+", "img", "[", ":", ",", ":", ",", "2", "]", "*", "0.114", "\n", "resized_screen", "=", "cv2", ".", "resize", "(", "img", ",", "(", "84", ",", "110", ")", ",", "interpolation", "=", "cv2", ".", "INTER_AREA", ")", "\n", "x_t", "=", "resized_screen", "[", "18", ":", "102", ",", ":", "]", "\n", "x_t", "=", "np", ".", "reshape", "(", "x_t", ",", "[", "84", ",", "84", ",", "1", "]", ")", "\n", "return", "x_t", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.atari_wrappers_deprecated.ClippedRewardsWrapper._reward": [[147, 150], ["numpy.sign"], "methods", ["None"], ["    ", "def", "_reward", "(", "self", ",", "reward", ")", ":", "\n", "        ", "\"\"\"Change all the positive rewards to 1, negative to -1 and keep zero.\"\"\"", "\n", "return", "np", ".", "sign", "(", "reward", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.atari_wrappers_deprecated.LazyFrames.__init__": [[153, 162], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "frames", ")", ":", "\n", "        ", "\"\"\"This object ensures that common frames between the observations are only stored once.\n        It exists purely to optimize memory usage which can be huge for DQN's 1M frames replay\n        buffers.\n\n        This object should only be converted to numpy array before being passed to the model.\n\n        You'd not belive how complex the previous solution was.\"\"\"", "\n", "self", ".", "_frames", "=", "frames", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.atari_wrappers_deprecated.LazyFrames.__array__": [[163, 168], ["numpy.concatenate", "out.astype.astype.astype"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.concatenate"], ["", "def", "__array__", "(", "self", ",", "dtype", "=", "None", ")", ":", "\n", "        ", "out", "=", "np", ".", "concatenate", "(", "self", ".", "_frames", ",", "axis", "=", "2", ")", "\n", "if", "dtype", "is", "not", "None", ":", "\n", "            ", "out", "=", "out", ".", "astype", "(", "dtype", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.atari_wrappers_deprecated.FrameStack.__init__": [[171, 185], ["gym.Wrapper.__init__", "collections.deque", "gym.spaces.Box"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.subproc_vec_env.SubprocVecEnv.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ",", "k", ")", ":", "\n", "        ", "\"\"\"Stack k last frames.\n\n        Returns lazy array, which is much more memory efficient.\n\n        See Also\n        --------\n        baselines.common.atari_wrappers.LazyFrames\n        \"\"\"", "\n", "gym", ".", "Wrapper", ".", "__init__", "(", "self", ",", "env", ")", "\n", "self", ".", "k", "=", "k", "\n", "self", ".", "frames", "=", "deque", "(", "[", "]", ",", "maxlen", "=", "k", ")", "\n", "shp", "=", "env", ".", "observation_space", ".", "shape", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Box", "(", "low", "=", "0", ",", "high", "=", "255", ",", "shape", "=", "(", "shp", "[", "0", "]", ",", "shp", "[", "1", "]", ",", "shp", "[", "2", "]", "*", "k", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.atari_wrappers_deprecated.FrameStack._reset": [[186, 191], ["atari_wrappers_deprecated.FrameStack.env.reset", "range", "atari_wrappers_deprecated.FrameStack._get_ob", "atari_wrappers_deprecated.FrameStack.frames.append"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.flowersteam_geppg.common.atari_wrappers_deprecated.FrameStack._get_ob", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append"], ["", "def", "_reset", "(", "self", ")", ":", "\n", "        ", "ob", "=", "self", ".", "env", ".", "reset", "(", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "k", ")", ":", "\n", "            ", "self", ".", "frames", ".", "append", "(", "ob", ")", "\n", "", "return", "self", ".", "_get_ob", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.atari_wrappers_deprecated.FrameStack._step": [[192, 196], ["atari_wrappers_deprecated.FrameStack.env.step", "atari_wrappers_deprecated.FrameStack.frames.append", "atari_wrappers_deprecated.FrameStack._get_ob"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.__init__.VecEnv.step", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.common.atari_wrappers_deprecated.FrameStack._get_ob"], ["", "def", "_step", "(", "self", ",", "action", ")", ":", "\n", "        ", "ob", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "self", ".", "frames", ".", "append", "(", "ob", ")", "\n", "return", "self", ".", "_get_ob", "(", ")", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.atari_wrappers_deprecated.FrameStack._get_ob": [[197, 200], ["atari_wrappers_deprecated.LazyFrames", "len", "list"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.azure_utils.Container.list"], ["", "def", "_get_ob", "(", "self", ")", ":", "\n", "        ", "assert", "len", "(", "self", ".", "frames", ")", "==", "self", ".", "k", "\n", "return", "LazyFrames", "(", "list", "(", "self", ".", "frames", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.atari_wrappers_deprecated.ScaledFloatFrame._observation": [[203, 207], ["numpy.array().astype", "numpy.array"], "methods", ["None"], ["    ", "def", "_observation", "(", "self", ",", "obs", ")", ":", "\n", "# careful! This undoes the memory optimization, use", "\n", "# with smaller replay buffers only.", "\n", "        ", "return", "np", ".", "array", "(", "obs", ")", ".", "astype", "(", "np", ".", "float32", ")", "/", "255.0", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.atari_wrappers_deprecated.A2cProcessFrame.__init__": [[224, 227], ["gym.Wrapper.__init__", "gym.spaces.Box"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.subproc_vec_env.SubprocVecEnv.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ")", ":", "\n", "        ", "gym", ".", "Wrapper", ".", "__init__", "(", "self", ",", "env", ")", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Box", "(", "low", "=", "0", ",", "high", "=", "255", ",", "shape", "=", "(", "84", ",", "84", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.atari_wrappers_deprecated.A2cProcessFrame._step": [[228, 231], ["atari_wrappers_deprecated.A2cProcessFrame.env.step", "atari_wrappers_deprecated.A2cProcessFrame.process"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.__init__.VecEnv.step", "home.repos.pwc.inspect_result.flowersteam_geppg.common.atari_wrappers_deprecated.A2cProcessFrame.process"], ["", "def", "_step", "(", "self", ",", "action", ")", ":", "\n", "        ", "ob", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "return", "A2cProcessFrame", ".", "process", "(", "ob", ")", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.atari_wrappers_deprecated.A2cProcessFrame._reset": [[232, 234], ["atari_wrappers_deprecated.A2cProcessFrame.process", "atari_wrappers_deprecated.A2cProcessFrame.env.reset"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.atari_wrappers_deprecated.A2cProcessFrame.process", "home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.__init__.VecEnv.reset"], ["", "def", "_reset", "(", "self", ")", ":", "\n", "        ", "return", "A2cProcessFrame", ".", "process", "(", "self", ".", "env", ".", "reset", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.atari_wrappers_deprecated.A2cProcessFrame.process": [[235, 240], ["cv2.cvtColor", "cv2.resize", "cv2.resize.reshape"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "process", "(", "frame", ")", ":", "\n", "        ", "frame", "=", "cv2", ".", "cvtColor", "(", "frame", ",", "cv2", ".", "COLOR_RGB2GRAY", ")", "\n", "frame", "=", "cv2", ".", "resize", "(", "frame", ",", "(", "84", ",", "84", ")", ",", "interpolation", "=", "cv2", ".", "INTER_AREA", ")", "\n", "return", "frame", ".", "reshape", "(", "84", ",", "84", ",", "1", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.atari_wrappers_deprecated.wrap_dqn": [[209, 221], ["atari_wrappers_deprecated.EpisodicLifeEnv", "atari_wrappers_deprecated.NoopResetEnv", "atari_wrappers_deprecated.MaxAndSkipEnv", "atari_wrappers_deprecated.ProcessFrame84", "atari_wrappers_deprecated.FrameStack", "atari_wrappers_deprecated.ClippedRewardsWrapper", "FireResetEnv.unwrapped.get_action_meanings", "atari_wrappers_deprecated.FireResetEnv"], "function", ["None"], ["", "", "def", "wrap_dqn", "(", "env", ")", ":", "\n", "    ", "\"\"\"Apply a common set of wrappers for Atari games.\"\"\"", "\n", "assert", "'NoFrameskip'", "in", "env", ".", "spec", ".", "id", "\n", "env", "=", "EpisodicLifeEnv", "(", "env", ")", "\n", "env", "=", "NoopResetEnv", "(", "env", ",", "noop_max", "=", "30", ")", "\n", "env", "=", "MaxAndSkipEnv", "(", "env", ",", "skip", "=", "4", ")", "\n", "if", "'FIRE'", "in", "env", ".", "unwrapped", ".", "get_action_meanings", "(", ")", ":", "\n", "        ", "env", "=", "FireResetEnv", "(", "env", ")", "\n", "", "env", "=", "ProcessFrame84", "(", "env", ")", "\n", "env", "=", "FrameStack", "(", "env", ",", "4", ")", "\n", "env", "=", "ClippedRewardsWrapper", "(", "env", ")", "\n", "return", "env", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.segment_tree.SegmentTree.__init__": [[5, 36], ["range"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "capacity", ",", "operation", ",", "neutral_element", ")", ":", "\n", "        ", "\"\"\"Build a Segment Tree data structure.\n\n        https://en.wikipedia.org/wiki/Segment_tree\n\n        Can be used as regular array, but with two\n        important differences:\n\n            a) setting item's value is slightly slower.\n               It is O(lg capacity) instead of O(1).\n            b) user has access to an efficient `reduce`\n               operation which reduces `operation` over\n               a contiguous subsequence of items in the\n               array.\n\n        Paramters\n        ---------\n        capacity: int\n            Total size of the array - must be a power of two.\n        operation: lambda obj, obj -> obj\n            and operation for combining elements (eg. sum, max)\n            must for a mathematical group together with the set of\n            possible values for array elements.\n        neutral_element: obj\n            neutral element for the operation above. eg. float('-inf')\n            for max and 0 for sum.\n        \"\"\"", "\n", "assert", "capacity", ">", "0", "and", "capacity", "&", "(", "capacity", "-", "1", ")", "==", "0", ",", "\"capacity must be positive and a power of 2.\"", "\n", "self", ".", "_capacity", "=", "capacity", "\n", "self", ".", "_value", "=", "[", "neutral_element", "for", "_", "in", "range", "(", "2", "*", "capacity", ")", "]", "\n", "self", ".", "_operation", "=", "operation", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.segment_tree.SegmentTree._reduce_helper": [[37, 50], ["segment_tree.SegmentTree._reduce_helper", "segment_tree.SegmentTree._reduce_helper", "segment_tree.SegmentTree._operation", "segment_tree.SegmentTree._reduce_helper", "segment_tree.SegmentTree._reduce_helper"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.segment_tree.SegmentTree._reduce_helper", "home.repos.pwc.inspect_result.flowersteam_geppg.common.segment_tree.SegmentTree._reduce_helper", "home.repos.pwc.inspect_result.flowersteam_geppg.common.segment_tree.SegmentTree._reduce_helper", "home.repos.pwc.inspect_result.flowersteam_geppg.common.segment_tree.SegmentTree._reduce_helper"], ["", "def", "_reduce_helper", "(", "self", ",", "start", ",", "end", ",", "node", ",", "node_start", ",", "node_end", ")", ":", "\n", "        ", "if", "start", "==", "node_start", "and", "end", "==", "node_end", ":", "\n", "            ", "return", "self", ".", "_value", "[", "node", "]", "\n", "", "mid", "=", "(", "node_start", "+", "node_end", ")", "//", "2", "\n", "if", "end", "<=", "mid", ":", "\n", "            ", "return", "self", ".", "_reduce_helper", "(", "start", ",", "end", ",", "2", "*", "node", ",", "node_start", ",", "mid", ")", "\n", "", "else", ":", "\n", "            ", "if", "mid", "+", "1", "<=", "start", ":", "\n", "                ", "return", "self", ".", "_reduce_helper", "(", "start", ",", "end", ",", "2", "*", "node", "+", "1", ",", "mid", "+", "1", ",", "node_end", ")", "\n", "", "else", ":", "\n", "                ", "return", "self", ".", "_operation", "(", "\n", "self", ".", "_reduce_helper", "(", "start", ",", "mid", ",", "2", "*", "node", ",", "node_start", ",", "mid", ")", ",", "\n", "self", ".", "_reduce_helper", "(", "mid", "+", "1", ",", "end", ",", "2", "*", "node", "+", "1", ",", "mid", "+", "1", ",", "node_end", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.segment_tree.SegmentTree.reduce": [[52, 76], ["segment_tree.SegmentTree._reduce_helper"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.segment_tree.SegmentTree._reduce_helper"], ["", "", "", "def", "reduce", "(", "self", ",", "start", "=", "0", ",", "end", "=", "None", ")", ":", "\n", "        ", "\"\"\"Returns result of applying `self.operation`\n        to a contiguous subsequence of the array.\n\n            self.operation(arr[start], operation(arr[start+1], operation(... arr[end])))\n\n        Parameters\n        ----------\n        start: int\n            beginning of the subsequence\n        end: int\n            end of the subsequences\n\n        Returns\n        -------\n        reduced: obj\n            result of reducing self.operation over the specified range of array elements.\n        \"\"\"", "\n", "if", "end", "is", "None", ":", "\n", "            ", "end", "=", "self", ".", "_capacity", "\n", "", "if", "end", "<", "0", ":", "\n", "            ", "end", "+=", "self", ".", "_capacity", "\n", "", "end", "-=", "1", "\n", "return", "self", ".", "_reduce_helper", "(", "start", ",", "end", ",", "1", ",", "0", ",", "self", ".", "_capacity", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.segment_tree.SegmentTree.__setitem__": [[77, 88], ["segment_tree.SegmentTree._operation"], "methods", ["None"], ["", "def", "__setitem__", "(", "self", ",", "idx", ",", "val", ")", ":", "\n", "# index of the leaf", "\n", "        ", "idx", "+=", "self", ".", "_capacity", "\n", "self", ".", "_value", "[", "idx", "]", "=", "val", "\n", "idx", "//=", "2", "\n", "while", "idx", ">=", "1", ":", "\n", "            ", "self", ".", "_value", "[", "idx", "]", "=", "self", ".", "_operation", "(", "\n", "self", ".", "_value", "[", "2", "*", "idx", "]", ",", "\n", "self", ".", "_value", "[", "2", "*", "idx", "+", "1", "]", "\n", ")", "\n", "idx", "//=", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.segment_tree.SegmentTree.__getitem__": [[89, 92], ["None"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "assert", "0", "<=", "idx", "<", "self", ".", "_capacity", "\n", "return", "self", ".", "_value", "[", "self", ".", "_capacity", "+", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.segment_tree.SumSegmentTree.__init__": [[95, 100], ["segment_tree.SegmentTree.__init__"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.subproc_vec_env.SubprocVecEnv.__init__"], ["    ", "def", "__init__", "(", "self", ",", "capacity", ")", ":", "\n", "        ", "super", "(", "SumSegmentTree", ",", "self", ")", ".", "__init__", "(", "\n", "capacity", "=", "capacity", ",", "\n", "operation", "=", "operator", ".", "add", ",", "\n", "neutral_element", "=", "0.0", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.segment_tree.SumSegmentTree.sum": [[102, 105], ["segment_tree.SegmentTree.reduce"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.segment_tree.SegmentTree.reduce"], ["", "def", "sum", "(", "self", ",", "start", "=", "0", ",", "end", "=", "None", ")", ":", "\n", "        ", "\"\"\"Returns arr[start] + ... + arr[end]\"\"\"", "\n", "return", "super", "(", "SumSegmentTree", ",", "self", ")", ".", "reduce", "(", "start", ",", "end", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.segment_tree.SumSegmentTree.find_prefixsum_idx": [[106, 133], ["segment_tree.SumSegmentTree.sum"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.sum"], ["", "def", "find_prefixsum_idx", "(", "self", ",", "prefixsum", ")", ":", "\n", "        ", "\"\"\"Find the highest index `i` in the array such that\n            sum(arr[0] + arr[1] + ... + arr[i - i]) <= prefixsum\n\n        if array values are probabilities, this function\n        allows to sample indexes according to the discrete\n        probability efficiently.\n\n        Parameters\n        ----------\n        perfixsum: float\n            upperbound on the sum of array prefix\n\n        Returns\n        -------\n        idx: int\n            highest index satisfying the prefixsum constraint\n        \"\"\"", "\n", "assert", "0", "<=", "prefixsum", "<=", "self", ".", "sum", "(", ")", "+", "1e-5", "\n", "idx", "=", "1", "\n", "while", "idx", "<", "self", ".", "_capacity", ":", "# while non-leaf", "\n", "            ", "if", "self", ".", "_value", "[", "2", "*", "idx", "]", ">", "prefixsum", ":", "\n", "                ", "idx", "=", "2", "*", "idx", "\n", "", "else", ":", "\n", "                ", "prefixsum", "-=", "self", ".", "_value", "[", "2", "*", "idx", "]", "\n", "idx", "=", "2", "*", "idx", "+", "1", "\n", "", "", "return", "idx", "-", "self", ".", "_capacity", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.segment_tree.MinSegmentTree.__init__": [[136, 141], ["segment_tree.SegmentTree.__init__", "float"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.subproc_vec_env.SubprocVecEnv.__init__"], ["    ", "def", "__init__", "(", "self", ",", "capacity", ")", ":", "\n", "        ", "super", "(", "MinSegmentTree", ",", "self", ")", ".", "__init__", "(", "\n", "capacity", "=", "capacity", ",", "\n", "operation", "=", "min", ",", "\n", "neutral_element", "=", "float", "(", "'inf'", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.segment_tree.MinSegmentTree.min": [[143, 147], ["segment_tree.SegmentTree.reduce"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.segment_tree.SegmentTree.reduce"], ["", "def", "min", "(", "self", ",", "start", "=", "0", ",", "end", "=", "None", ")", ":", "\n", "        ", "\"\"\"Returns min(arr[start], ...,  arr[end])\"\"\"", "\n", "\n", "return", "super", "(", "MinSegmentTree", ",", "self", ")", ".", "reduce", "(", "start", ",", "end", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.dataset.Dataset.__init__": [[4, 11], ["dataset.Dataset.shuffle", "next", "iter", "data_map.values"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.dataset.Dataset.shuffle"], ["    ", "def", "__init__", "(", "self", ",", "data_map", ",", "deterministic", "=", "False", ",", "shuffle", "=", "True", ")", ":", "\n", "        ", "self", ".", "data_map", "=", "data_map", "\n", "self", ".", "deterministic", "=", "deterministic", "\n", "self", ".", "enable_shuffle", "=", "shuffle", "\n", "self", ".", "n", "=", "next", "(", "iter", "(", "data_map", ".", "values", "(", ")", ")", ")", ".", "shape", "[", "0", "]", "\n", "self", ".", "_next_id", "=", "0", "\n", "self", ".", "shuffle", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.dataset.Dataset.shuffle": [[12, 22], ["numpy.arange", "numpy.random.shuffle"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.dataset.Dataset.shuffle"], ["", "def", "shuffle", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "deterministic", ":", "\n", "            ", "return", "\n", "", "perm", "=", "np", ".", "arange", "(", "self", ".", "n", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "perm", ")", "\n", "\n", "for", "key", "in", "self", ".", "data_map", ":", "\n", "            ", "self", ".", "data_map", "[", "key", "]", "=", "self", ".", "data_map", "[", "key", "]", "[", "perm", "]", "\n", "\n", "", "self", ".", "_next_id", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.dataset.Dataset.next_batch": [[23, 35], ["min", "dict", "dataset.Dataset.shuffle"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.min", "home.repos.pwc.inspect_result.flowersteam_geppg.common.dataset.Dataset.shuffle"], ["", "def", "next_batch", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "if", "self", ".", "_next_id", ">=", "self", ".", "n", "and", "self", ".", "enable_shuffle", ":", "\n", "            ", "self", ".", "shuffle", "(", ")", "\n", "\n", "", "cur_id", "=", "self", ".", "_next_id", "\n", "cur_batch_size", "=", "min", "(", "batch_size", ",", "self", ".", "n", "-", "self", ".", "_next_id", ")", "\n", "self", ".", "_next_id", "+=", "cur_batch_size", "\n", "\n", "data_map", "=", "dict", "(", ")", "\n", "for", "key", "in", "self", ".", "data_map", ":", "\n", "            ", "data_map", "[", "key", "]", "=", "self", ".", "data_map", "[", "key", "]", "[", "cur_id", ":", "cur_id", "+", "cur_batch_size", "]", "\n", "", "return", "data_map", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.dataset.Dataset.iterate_once": [[36, 42], ["dataset.Dataset.shuffle", "dataset.Dataset.next_batch"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.dataset.Dataset.shuffle", "home.repos.pwc.inspect_result.flowersteam_geppg.common.dataset.Dataset.next_batch"], ["", "def", "iterate_once", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "if", "self", ".", "enable_shuffle", ":", "self", ".", "shuffle", "(", ")", "\n", "\n", "while", "self", ".", "_next_id", "<=", "self", ".", "n", "-", "batch_size", ":", "\n", "            ", "yield", "self", ".", "next_batch", "(", "batch_size", ")", "\n", "", "self", ".", "_next_id", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.dataset.Dataset.subset": [[43, 48], ["dict", "dataset.Dataset"], "methods", ["None"], ["", "def", "subset", "(", "self", ",", "num_elements", ",", "deterministic", "=", "True", ")", ":", "\n", "        ", "data_map", "=", "dict", "(", ")", "\n", "for", "key", "in", "self", ".", "data_map", ":", "\n", "            ", "data_map", "[", "key", "]", "=", "self", ".", "data_map", "[", "key", "]", "[", ":", "num_elements", "]", "\n", "", "return", "Dataset", "(", "data_map", ",", "deterministic", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.dataset.iterbatches": [[50, 61], ["tuple", "all", "numpy.arange", "numpy.array_split", "map", "numpy.random.shuffle", "numpy.arange", "len", "tuple"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.dataset.Dataset.shuffle"], ["", "", "def", "iterbatches", "(", "arrays", ",", "*", ",", "num_batches", "=", "None", ",", "batch_size", "=", "None", ",", "shuffle", "=", "True", ",", "include_final_partial_batch", "=", "True", ")", ":", "\n", "    ", "assert", "(", "num_batches", "is", "None", ")", "!=", "(", "batch_size", "is", "None", ")", ",", "'Provide num_batches or batch_size, but not both'", "\n", "arrays", "=", "tuple", "(", "map", "(", "np", ".", "asarray", ",", "arrays", ")", ")", "\n", "n", "=", "arrays", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "assert", "all", "(", "a", ".", "shape", "[", "0", "]", "==", "n", "for", "a", "in", "arrays", "[", "1", ":", "]", ")", "\n", "inds", "=", "np", ".", "arange", "(", "n", ")", "\n", "if", "shuffle", ":", "np", ".", "random", ".", "shuffle", "(", "inds", ")", "\n", "sections", "=", "np", ".", "arange", "(", "0", ",", "n", ",", "batch_size", ")", "[", "1", ":", "]", "if", "num_batches", "is", "None", "else", "num_batches", "\n", "for", "batch_inds", "in", "np", ".", "array_split", "(", "inds", ",", "sections", ")", ":", "\n", "        ", "if", "include_final_partial_batch", "or", "len", "(", "batch_inds", ")", "==", "batch_size", ":", "\n", "            ", "yield", "tuple", "(", "a", "[", "batch_inds", "]", "for", "a", "in", "arrays", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.mpi_adam.MpiAdam.__init__": [[9, 22], ["sum", "numpy.zeros", "numpy.zeros", "DDPG_baseline_v2.SetFromFlat", "DDPG_baseline_v2.GetFlat", "DDPG_baseline_v2.numel"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.sum", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.numel"], ["    ", "def", "__init__", "(", "self", ",", "var_list", ",", "*", ",", "beta1", "=", "0.9", ",", "beta2", "=", "0.999", ",", "epsilon", "=", "1e-08", ",", "scale_grad_by_procs", "=", "True", ",", "comm", "=", "None", ")", ":", "\n", "        ", "self", ".", "var_list", "=", "var_list", "\n", "self", ".", "beta1", "=", "beta1", "\n", "self", ".", "beta2", "=", "beta2", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "self", ".", "scale_grad_by_procs", "=", "scale_grad_by_procs", "\n", "size", "=", "sum", "(", "U", ".", "numel", "(", "v", ")", "for", "v", "in", "var_list", ")", "\n", "self", ".", "m", "=", "np", ".", "zeros", "(", "size", ",", "'float32'", ")", "\n", "self", ".", "v", "=", "np", ".", "zeros", "(", "size", ",", "'float32'", ")", "\n", "self", ".", "t", "=", "0", "\n", "self", ".", "setfromflat", "=", "U", ".", "SetFromFlat", "(", "var_list", ")", "\n", "self", ".", "getflat", "=", "U", ".", "GetFlat", "(", "var_list", ")", "\n", "self", ".", "comm", "=", "MPI", ".", "COMM_WORLD", "if", "comm", "is", "None", "else", "comm", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.mpi_adam.MpiAdam.update": [[23, 38], ["localg.astype.astype.astype", "numpy.zeros_like", "mpi_adam.MpiAdam.comm.Allreduce", "mpi_adam.MpiAdam.setfromflat", "mpi_adam.MpiAdam.check_synced", "mpi_adam.MpiAdam.comm.Get_size", "numpy.sqrt", "numpy.sqrt", "mpi_adam.MpiAdam.getflat"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.mpi_adam.MpiAdam.check_synced"], ["", "def", "update", "(", "self", ",", "localg", ",", "stepsize", ")", ":", "\n", "        ", "if", "self", ".", "t", "%", "100", "==", "0", ":", "\n", "            ", "self", ".", "check_synced", "(", ")", "\n", "", "localg", "=", "localg", ".", "astype", "(", "'float32'", ")", "\n", "globalg", "=", "np", ".", "zeros_like", "(", "localg", ")", "\n", "self", ".", "comm", ".", "Allreduce", "(", "localg", ",", "globalg", ",", "op", "=", "MPI", ".", "SUM", ")", "\n", "if", "self", ".", "scale_grad_by_procs", ":", "\n", "            ", "globalg", "/=", "self", ".", "comm", ".", "Get_size", "(", ")", "\n", "\n", "", "self", ".", "t", "+=", "1", "\n", "a", "=", "stepsize", "*", "np", ".", "sqrt", "(", "1", "-", "self", ".", "beta2", "**", "self", ".", "t", ")", "/", "(", "1", "-", "self", ".", "beta1", "**", "self", ".", "t", ")", "\n", "self", ".", "m", "=", "self", ".", "beta1", "*", "self", ".", "m", "+", "(", "1", "-", "self", ".", "beta1", ")", "*", "globalg", "\n", "self", ".", "v", "=", "self", ".", "beta2", "*", "self", ".", "v", "+", "(", "1", "-", "self", ".", "beta2", ")", "*", "(", "globalg", "*", "globalg", ")", "\n", "step", "=", "(", "-", "a", ")", "*", "self", ".", "m", "/", "(", "np", ".", "sqrt", "(", "self", ".", "v", ")", "+", "self", ".", "epsilon", ")", "\n", "self", ".", "setfromflat", "(", "self", ".", "getflat", "(", ")", "+", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.mpi_adam.MpiAdam.sync": [[39, 43], ["mpi_adam.MpiAdam.getflat", "mpi_adam.MpiAdam.comm.Bcast", "mpi_adam.MpiAdam.setfromflat"], "methods", ["None"], ["", "def", "sync", "(", "self", ")", ":", "\n", "        ", "theta", "=", "self", ".", "getflat", "(", ")", "\n", "self", ".", "comm", ".", "Bcast", "(", "theta", ",", "root", "=", "0", ")", "\n", "self", ".", "setfromflat", "(", "theta", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.mpi_adam.MpiAdam.check_synced": [[44, 53], ["mpi_adam.MpiAdam.comm.Get_rank", "mpi_adam.MpiAdam.getflat", "mpi_adam.MpiAdam.comm.Bcast", "mpi_adam.MpiAdam.getflat", "numpy.empty_like", "mpi_adam.MpiAdam.comm.Bcast"], "methods", ["None"], ["", "def", "check_synced", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "comm", ".", "Get_rank", "(", ")", "==", "0", ":", "# this is root", "\n", "            ", "theta", "=", "self", ".", "getflat", "(", ")", "\n", "self", ".", "comm", ".", "Bcast", "(", "theta", ",", "root", "=", "0", ")", "\n", "", "else", ":", "\n", "            ", "thetalocal", "=", "self", ".", "getflat", "(", ")", "\n", "thetaroot", "=", "np", ".", "empty_like", "(", "thetalocal", ")", "\n", "self", ".", "comm", ".", "Bcast", "(", "thetaroot", ",", "root", "=", "0", ")", "\n", "assert", "(", "thetaroot", "==", "thetalocal", ")", ".", "all", "(", ")", ",", "(", "thetaroot", ",", "thetalocal", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.mpi_adam.test_MpiAdam": [[54, 82], ["numpy.random.seed", "tensorflow.set_random_seed", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.train.AdamOptimizer().minimize", "DDPG_baseline_v2.function", "tensorflow.get_default_session().run", "range", "tensorflow.set_random_seed", "tensorflow.get_default_session().run", "DDPG_baseline_v2.function", "mpi_adam.MpiAdam", "range", "numpy.random.randn().astype", "numpy.random.randn().astype", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.global_variables_initializer", "print", "tensorflow.global_variables_initializer", "U.function.", "mpi_adam.MpiAdam.update", "print", "tensorflow.square", "tensorflow.sin", "tensorflow.train.AdamOptimizer", "tensorflow.get_default_session", "U.function.", "tensorflow.get_default_session", "DDPG_baseline_v2.flatgrad", "numpy.random.randn", "numpy.random.randn"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.function", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.main_config.run", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.main_config.run", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.function", "home.repos.pwc.inspect_result.flowersteam_geppg.common.mpi_running_mean_std.RunningMeanStd.update", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.flatgrad"], ["", "", "", "@", "U", ".", "in_session", "\n", "def", "test_MpiAdam", "(", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "0", ")", "\n", "tf", ".", "set_random_seed", "(", "0", ")", "\n", "\n", "a", "=", "tf", ".", "Variable", "(", "np", ".", "random", ".", "randn", "(", "3", ")", ".", "astype", "(", "'float32'", ")", ")", "\n", "b", "=", "tf", ".", "Variable", "(", "np", ".", "random", ".", "randn", "(", "2", ",", "5", ")", ".", "astype", "(", "'float32'", ")", ")", "\n", "loss", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "a", ")", ")", "+", "tf", ".", "reduce_sum", "(", "tf", ".", "sin", "(", "b", ")", ")", "\n", "\n", "stepsize", "=", "1e-2", "\n", "update_op", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "stepsize", ")", ".", "minimize", "(", "loss", ")", "\n", "do_update", "=", "U", ".", "function", "(", "[", "]", ",", "loss", ",", "updates", "=", "[", "update_op", "]", ")", "\n", "\n", "tf", ".", "get_default_session", "(", ")", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "        ", "print", "(", "i", ",", "do_update", "(", ")", ")", "\n", "\n", "", "tf", ".", "set_random_seed", "(", "0", ")", "\n", "tf", ".", "get_default_session", "(", ")", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "\n", "var_list", "=", "[", "a", ",", "b", "]", "\n", "lossandgrad", "=", "U", ".", "function", "(", "[", "]", ",", "[", "loss", ",", "U", ".", "flatgrad", "(", "loss", ",", "var_list", ")", "]", ",", "updates", "=", "[", "update_op", "]", ")", "\n", "adam", "=", "MpiAdam", "(", "var_list", ")", "\n", "\n", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "        ", "l", ",", "g", "=", "lossandgrad", "(", ")", "\n", "adam", ".", "update", "(", "g", ",", "stepsize", ")", "\n", "print", "(", "i", ",", "l", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.distributions.Pd.flatparam": [[11, 13], ["None"], "methods", ["None"], ["def", "flatparam", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "def", "mode", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.distributions.Pd.mode": [[13, 15], ["None"], "methods", ["None"], ["", "def", "mode", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "def", "neglogp", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.distributions.Pd.neglogp": [[15, 18], ["None"], "methods", ["None"], ["", "def", "neglogp", "(", "self", ",", "x", ")", ":", "\n", "# Usually it's easier to define the negative logprob", "\n", "        ", "raise", "NotImplementedError", "\n", "", "def", "kl", "(", "self", ",", "other", ")", ":", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.distributions.Pd.kl": [[18, 20], ["None"], "methods", ["None"], ["", "def", "kl", "(", "self", ",", "other", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "def", "entropy", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.distributions.Pd.entropy": [[20, 22], ["None"], "methods", ["None"], ["", "def", "entropy", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "def", "sample", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.distributions.Pd.sample": [[22, 24], ["None"], "methods", ["None"], ["", "def", "sample", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "def", "logp", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.distributions.Pd.logp": [[24, 26], ["distributions.Pd.neglogp"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.distributions.BernoulliPd.neglogp"], ["", "def", "logp", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "-", "self", ".", "neglogp", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.distributions.PdType.pdclass": [[31, 33], ["None"], "methods", ["None"], ["def", "pdclass", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "def", "pdfromflat", "(", "self", ",", "flat", ")", ":", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.distributions.PdType.pdfromflat": [[33, 35], ["distributions.PdType.pdclass"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.distributions.BernoulliPdType.pdclass"], ["", "def", "pdfromflat", "(", "self", ",", "flat", ")", ":", "\n", "        ", "return", "self", ".", "pdclass", "(", ")", "(", "flat", ")", "\n", "", "def", "param_shape", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.distributions.PdType.param_shape": [[35, 37], ["None"], "methods", ["None"], ["", "def", "param_shape", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "def", "sample_shape", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.distributions.PdType.sample_shape": [[37, 39], ["None"], "methods", ["None"], ["", "def", "sample_shape", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "def", "sample_dtype", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.distributions.PdType.sample_dtype": [[39, 41], ["None"], "methods", ["None"], ["", "def", "sample_dtype", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.distributions.PdType.param_placeholder": [[42, 44], ["tensorflow.placeholder", "distributions.PdType.param_shape"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.distributions.BernoulliPdType.param_shape"], ["", "def", "param_placeholder", "(", "self", ",", "prepend_shape", ",", "name", "=", "None", ")", ":", "\n", "        ", "return", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "float32", ",", "shape", "=", "prepend_shape", "+", "self", ".", "param_shape", "(", ")", ",", "name", "=", "name", ")", "\n", "", "def", "sample_placeholder", "(", "self", ",", "prepend_shape", ",", "name", "=", "None", ")", ":", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.distributions.PdType.sample_placeholder": [[44, 46], ["tensorflow.placeholder", "distributions.PdType.sample_dtype", "distributions.PdType.sample_shape"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.distributions.BernoulliPdType.sample_dtype", "home.repos.pwc.inspect_result.flowersteam_geppg.common.distributions.BernoulliPdType.sample_shape"], ["", "def", "sample_placeholder", "(", "self", ",", "prepend_shape", ",", "name", "=", "None", ")", ":", "\n", "        ", "return", "tf", ".", "placeholder", "(", "dtype", "=", "self", ".", "sample_dtype", "(", ")", ",", "shape", "=", "prepend_shape", "+", "self", ".", "sample_shape", "(", ")", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.distributions.CategoricalPdType.__init__": [[48, 50], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "ncat", ")", ":", "\n", "        ", "self", ".", "ncat", "=", "ncat", "\n", "", "def", "pdclass", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.distributions.CategoricalPdType.pdclass": [[50, 52], ["None"], "methods", ["None"], ["", "def", "pdclass", "(", "self", ")", ":", "\n", "        ", "return", "CategoricalPd", "\n", "", "def", "param_shape", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.distributions.CategoricalPdType.param_shape": [[52, 54], ["None"], "methods", ["None"], ["", "def", "param_shape", "(", "self", ")", ":", "\n", "        ", "return", "[", "self", ".", "ncat", "]", "\n", "", "def", "sample_shape", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.distributions.CategoricalPdType.sample_shape": [[54, 56], ["None"], "methods", ["None"], ["", "def", "sample_shape", "(", "self", ")", ":", "\n", "        ", "return", "[", "]", "\n", "", "def", "sample_dtype", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.distributions.CategoricalPdType.sample_dtype": [[56, 58], ["None"], "methods", ["None"], ["", "def", "sample_dtype", "(", "self", ")", ":", "\n", "        ", "return", "tf", ".", "int32", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.distributions.MultiCategoricalPdType.__init__": [[61, 65], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "low", ",", "high", ")", ":", "\n", "        ", "self", ".", "low", "=", "low", "\n", "self", ".", "high", "=", "high", "\n", "self", ".", "ncats", "=", "high", "-", "low", "+", "1", "\n", "", "def", "pdclass", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.distributions.MultiCategoricalPdType.pdclass": [[65, 67], ["None"], "methods", ["None"], ["", "def", "pdclass", "(", "self", ")", ":", "\n", "        ", "return", "MultiCategoricalPd", "\n", "", "def", "pdfromflat", "(", "self", ",", "flat", ")", ":", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.distributions.MultiCategoricalPdType.pdfromflat": [[67, 69], ["distributions.MultiCategoricalPd"], "methods", ["None"], ["", "def", "pdfromflat", "(", "self", ",", "flat", ")", ":", "\n", "        ", "return", "MultiCategoricalPd", "(", "self", ".", "low", ",", "self", ".", "high", ",", "flat", ")", "\n", "", "def", "param_shape", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.distributions.MultiCategoricalPdType.param_shape": [[69, 71], ["sum"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.sum"], ["", "def", "param_shape", "(", "self", ")", ":", "\n", "        ", "return", "[", "sum", "(", "self", ".", "ncats", ")", "]", "\n", "", "def", "sample_shape", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.distributions.MultiCategoricalPdType.sample_shape": [[71, 73], ["len"], "methods", ["None"], ["", "def", "sample_shape", "(", "self", ")", ":", "\n", "        ", "return", "[", "len", "(", "self", ".", "ncats", ")", "]", "\n", "", "def", "sample_dtype", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.distributions.MultiCategoricalPdType.sample_dtype": [[73, 75], ["None"], "methods", ["None"], ["", "def", "sample_dtype", "(", "self", ")", ":", "\n", "        ", "return", "tf", ".", "int32", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.distributions.DiagGaussianPdType.__init__": [[77, 79], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "", "def", "pdclass", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.distributions.DiagGaussianPdType.pdclass": [[79, 81], ["None"], "methods", ["None"], ["", "def", "pdclass", "(", "self", ")", ":", "\n", "        ", "return", "DiagGaussianPd", "\n", "", "def", "param_shape", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.distributions.DiagGaussianPdType.param_shape": [[81, 83], ["None"], "methods", ["None"], ["", "def", "param_shape", "(", "self", ")", ":", "\n", "        ", "return", "[", "2", "*", "self", ".", "size", "]", "\n", "", "def", "sample_shape", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.distributions.DiagGaussianPdType.sample_shape": [[83, 85], ["None"], "methods", ["None"], ["", "def", "sample_shape", "(", "self", ")", ":", "\n", "        ", "return", "[", "self", ".", "size", "]", "\n", "", "def", "sample_dtype", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.distributions.DiagGaussianPdType.sample_dtype": [[85, 87], ["None"], "methods", ["None"], ["", "def", "sample_dtype", "(", "self", ")", ":", "\n", "        ", "return", "tf", ".", "float32", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.distributions.BernoulliPdType.__init__": [[89, 91], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "", "def", "pdclass", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.distributions.BernoulliPdType.pdclass": [[91, 93], ["None"], "methods", ["None"], ["", "def", "pdclass", "(", "self", ")", ":", "\n", "        ", "return", "BernoulliPd", "\n", "", "def", "param_shape", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.distributions.BernoulliPdType.param_shape": [[93, 95], ["None"], "methods", ["None"], ["", "def", "param_shape", "(", "self", ")", ":", "\n", "        ", "return", "[", "self", ".", "size", "]", "\n", "", "def", "sample_shape", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.distributions.BernoulliPdType.sample_shape": [[95, 97], ["None"], "methods", ["None"], ["", "def", "sample_shape", "(", "self", ")", ":", "\n", "        ", "return", "[", "self", ".", "size", "]", "\n", "", "def", "sample_dtype", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.distributions.BernoulliPdType.sample_dtype": [[97, 99], ["None"], "methods", ["None"], ["", "def", "sample_dtype", "(", "self", ")", ":", "\n", "        ", "return", "tf", ".", "int32", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.distributions.CategoricalPd.__init__": [[124, 126], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "logits", ")", ":", "\n", "        ", "self", ".", "logits", "=", "logits", "\n", "", "def", "flatparam", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.distributions.CategoricalPd.flatparam": [[126, 128], ["None"], "methods", ["None"], ["", "def", "flatparam", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "logits", "\n", "", "def", "mode", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.distributions.CategoricalPd.mode": [[128, 130], ["DDPG_baseline_v2.argmax"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.argmax"], ["", "def", "mode", "(", "self", ")", ":", "\n", "        ", "return", "U", ".", "argmax", "(", "self", ".", "logits", ",", "axis", "=", "-", "1", ")", "\n", "", "def", "neglogp", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.distributions.CategoricalPd.neglogp": [[130, 138], ["tensorflow.one_hot", "tensorflow.nn.softmax_cross_entropy_with_logits", "distributions.CategoricalPd.logits.get_shape().as_list", "distributions.CategoricalPd.logits.get_shape"], "methods", ["None"], ["", "def", "neglogp", "(", "self", ",", "x", ")", ":", "\n", "# return tf.nn.sparse_softmax_cross_entropy_with_logits(logits=self.logits, labels=x)", "\n", "# Note: we can't use sparse_softmax_cross_entropy_with_logits because", "\n", "#       the implementation does not allow second-order derivatives...", "\n", "        ", "one_hot_actions", "=", "tf", ".", "one_hot", "(", "x", ",", "self", ".", "logits", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "-", "1", "]", ")", "\n", "return", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits", "(", "\n", "logits", "=", "self", ".", "logits", ",", "\n", "labels", "=", "one_hot_actions", ")", "\n", "", "def", "kl", "(", "self", ",", "other", ")", ":", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.distributions.CategoricalPd.kl": [[138, 147], ["tensorflow.exp", "tensorflow.exp", "DDPG_baseline_v2.sum", "DDPG_baseline_v2.sum", "DDPG_baseline_v2.sum", "DDPG_baseline_v2.max", "DDPG_baseline_v2.max", "tensorflow.log", "tensorflow.log"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.sum", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.sum", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.sum", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.max", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.max", "home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.log", "home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.log"], ["", "def", "kl", "(", "self", ",", "other", ")", ":", "\n", "        ", "a0", "=", "self", ".", "logits", "-", "U", ".", "max", "(", "self", ".", "logits", ",", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", "\n", "a1", "=", "other", ".", "logits", "-", "U", ".", "max", "(", "other", ".", "logits", ",", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", "\n", "ea0", "=", "tf", ".", "exp", "(", "a0", ")", "\n", "ea1", "=", "tf", ".", "exp", "(", "a1", ")", "\n", "z0", "=", "U", ".", "sum", "(", "ea0", ",", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", "\n", "z1", "=", "U", ".", "sum", "(", "ea1", ",", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", "\n", "p0", "=", "ea0", "/", "z0", "\n", "return", "U", ".", "sum", "(", "p0", "*", "(", "a0", "-", "tf", ".", "log", "(", "z0", ")", "-", "a1", "+", "tf", ".", "log", "(", "z1", ")", ")", ",", "axis", "=", "-", "1", ")", "\n", "", "def", "entropy", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.distributions.CategoricalPd.entropy": [[147, 153], ["tensorflow.exp", "DDPG_baseline_v2.sum", "DDPG_baseline_v2.sum", "DDPG_baseline_v2.max", "tensorflow.log"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.sum", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.sum", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.max", "home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.log"], ["", "def", "entropy", "(", "self", ")", ":", "\n", "        ", "a0", "=", "self", ".", "logits", "-", "U", ".", "max", "(", "self", ".", "logits", ",", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", "\n", "ea0", "=", "tf", ".", "exp", "(", "a0", ")", "\n", "z0", "=", "U", ".", "sum", "(", "ea0", ",", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", "\n", "p0", "=", "ea0", "/", "z0", "\n", "return", "U", ".", "sum", "(", "p0", "*", "(", "tf", ".", "log", "(", "z0", ")", "-", "a0", ")", ",", "axis", "=", "-", "1", ")", "\n", "", "def", "sample", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.distributions.CategoricalPd.sample": [[153, 156], ["tensorflow.random_uniform", "tensorflow.argmax", "tensorflow.shape", "tensorflow.log", "tensorflow.log"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.argmax", "home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.log", "home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.log"], ["", "def", "sample", "(", "self", ")", ":", "\n", "        ", "u", "=", "tf", ".", "random_uniform", "(", "tf", ".", "shape", "(", "self", ".", "logits", ")", ")", "\n", "return", "tf", ".", "argmax", "(", "self", ".", "logits", "-", "tf", ".", "log", "(", "-", "tf", ".", "log", "(", "u", ")", ")", ",", "axis", "=", "-", "1", ")", "\n", "", "@", "classmethod", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.distributions.CategoricalPd.fromflat": [[156, 159], ["cls"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "fromflat", "(", "cls", ",", "flat", ")", ":", "\n", "        ", "return", "cls", "(", "flat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.distributions.MultiCategoricalPd.__init__": [[161, 165], ["tensorflow.constant", "list", "map", "tensorflow.split", "len", "flat.get_shape"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.azure_utils.Container.list"], ["    ", "def", "__init__", "(", "self", ",", "low", ",", "high", ",", "flat", ")", ":", "\n", "        ", "self", ".", "flat", "=", "flat", "\n", "self", ".", "low", "=", "tf", ".", "constant", "(", "low", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "self", ".", "categoricals", "=", "list", "(", "map", "(", "CategoricalPd", ",", "tf", ".", "split", "(", "flat", ",", "high", "-", "low", "+", "1", ",", "axis", "=", "len", "(", "flat", ".", "get_shape", "(", ")", ")", "-", "1", ")", ")", ")", "\n", "", "def", "flatparam", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.distributions.MultiCategoricalPd.flatparam": [[165, 167], ["None"], "methods", ["None"], ["", "def", "flatparam", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "flat", "\n", "", "def", "mode", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.distributions.MultiCategoricalPd.mode": [[167, 169], ["tensorflow.cast", "tensorflow.stack", "p.mode"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.distributions.BernoulliPd.mode"], ["", "def", "mode", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "low", "+", "tf", ".", "cast", "(", "tf", ".", "stack", "(", "[", "p", ".", "mode", "(", ")", "for", "p", "in", "self", ".", "categoricals", "]", ",", "axis", "=", "-", "1", ")", ",", "tf", ".", "int32", ")", "\n", "", "def", "neglogp", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.distributions.MultiCategoricalPd.neglogp": [[169, 171], ["tensorflow.add_n", "p.neglogp", "zip", "tensorflow.unstack", "len", "x.get_shape"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.distributions.BernoulliPd.neglogp"], ["", "def", "neglogp", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "tf", ".", "add_n", "(", "[", "p", ".", "neglogp", "(", "px", ")", "for", "p", ",", "px", "in", "zip", "(", "self", ".", "categoricals", ",", "tf", ".", "unstack", "(", "x", "-", "self", ".", "low", ",", "axis", "=", "len", "(", "x", ".", "get_shape", "(", ")", ")", "-", "1", ")", ")", "]", ")", "\n", "", "def", "kl", "(", "self", ",", "other", ")", ":", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.distributions.MultiCategoricalPd.kl": [[171, 174], ["tensorflow.add_n", "p.kl", "zip"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.distributions.BernoulliPd.kl"], ["", "def", "kl", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "tf", ".", "add_n", "(", "[", "\n", "p", ".", "kl", "(", "q", ")", "for", "p", ",", "q", "in", "zip", "(", "self", ".", "categoricals", ",", "other", ".", "categoricals", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.distributions.MultiCategoricalPd.entropy": [[175, 177], ["tensorflow.add_n", "p.entropy"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.distributions.BernoulliPd.entropy"], ["", "def", "entropy", "(", "self", ")", ":", "\n", "        ", "return", "tf", ".", "add_n", "(", "[", "p", ".", "entropy", "(", ")", "for", "p", "in", "self", ".", "categoricals", "]", ")", "\n", "", "def", "sample", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.distributions.MultiCategoricalPd.sample": [[177, 179], ["tensorflow.cast", "tensorflow.stack", "p.sample"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.distributions.BernoulliPd.sample"], ["", "def", "sample", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "low", "+", "tf", ".", "cast", "(", "tf", ".", "stack", "(", "[", "p", ".", "sample", "(", ")", "for", "p", "in", "self", ".", "categoricals", "]", ",", "axis", "=", "-", "1", ")", ",", "tf", ".", "int32", ")", "\n", "", "@", "classmethod", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.distributions.MultiCategoricalPd.fromflat": [[179, 182], ["None"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "fromflat", "(", "cls", ",", "flat", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.distributions.DiagGaussianPd.__init__": [[184, 190], ["tensorflow.split", "tensorflow.exp", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "flat", ")", ":", "\n", "        ", "self", ".", "flat", "=", "flat", "\n", "mean", ",", "logstd", "=", "tf", ".", "split", "(", "axis", "=", "len", "(", "flat", ".", "shape", ")", "-", "1", ",", "num_or_size_splits", "=", "2", ",", "value", "=", "flat", ")", "\n", "self", ".", "mean", "=", "mean", "\n", "self", ".", "logstd", "=", "logstd", "\n", "self", ".", "std", "=", "tf", ".", "exp", "(", "logstd", ")", "\n", "", "def", "flatparam", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.distributions.DiagGaussianPd.flatparam": [[190, 192], ["None"], "methods", ["None"], ["", "def", "flatparam", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "flat", "\n", "", "def", "mode", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.distributions.DiagGaussianPd.mode": [[192, 194], ["None"], "methods", ["None"], ["", "def", "mode", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "mean", "\n", "", "def", "neglogp", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.distributions.DiagGaussianPd.neglogp": [[194, 198], ["DDPG_baseline_v2.sum", "DDPG_baseline_v2.sum", "tensorflow.to_float", "tensorflow.square", "numpy.log", "tensorflow.shape"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.sum", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.sum", "home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.log"], ["", "def", "neglogp", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "0.5", "*", "U", ".", "sum", "(", "tf", ".", "square", "(", "(", "x", "-", "self", ".", "mean", ")", "/", "self", ".", "std", ")", ",", "axis", "=", "-", "1", ")", "+", "0.5", "*", "np", ".", "log", "(", "2.0", "*", "np", ".", "pi", ")", "*", "tf", ".", "to_float", "(", "tf", ".", "shape", "(", "x", ")", "[", "-", "1", "]", ")", "+", "U", ".", "sum", "(", "self", ".", "logstd", ",", "axis", "=", "-", "1", ")", "\n", "", "def", "kl", "(", "self", ",", "other", ")", ":", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.distributions.DiagGaussianPd.kl": [[198, 201], ["isinstance", "DDPG_baseline_v2.sum", "tensorflow.square", "tensorflow.square", "tensorflow.square"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.sum"], ["", "def", "kl", "(", "self", ",", "other", ")", ":", "\n", "        ", "assert", "isinstance", "(", "other", ",", "DiagGaussianPd", ")", "\n", "return", "U", ".", "sum", "(", "other", ".", "logstd", "-", "self", ".", "logstd", "+", "(", "tf", ".", "square", "(", "self", ".", "std", ")", "+", "tf", ".", "square", "(", "self", ".", "mean", "-", "other", ".", "mean", ")", ")", "/", "(", "2.0", "*", "tf", ".", "square", "(", "other", ".", "std", ")", ")", "-", "0.5", ",", "axis", "=", "-", "1", ")", "\n", "", "def", "entropy", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.distributions.DiagGaussianPd.entropy": [[201, 203], ["DDPG_baseline_v2.sum", "numpy.log"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.sum", "home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.log"], ["", "def", "entropy", "(", "self", ")", ":", "\n", "        ", "return", "U", ".", "sum", "(", "self", ".", "logstd", "+", ".5", "*", "np", ".", "log", "(", "2.0", "*", "np", ".", "pi", "*", "np", ".", "e", ")", ",", "axis", "=", "-", "1", ")", "\n", "", "def", "sample", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.distributions.DiagGaussianPd.sample": [[203, 205], ["tensorflow.random_normal", "tensorflow.shape"], "methods", ["None"], ["", "def", "sample", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "mean", "+", "self", ".", "std", "*", "tf", ".", "random_normal", "(", "tf", ".", "shape", "(", "self", ".", "mean", ")", ")", "\n", "", "@", "classmethod", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.distributions.DiagGaussianPd.fromflat": [[205, 208], ["cls"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "fromflat", "(", "cls", ",", "flat", ")", ":", "\n", "        ", "return", "cls", "(", "flat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.distributions.BernoulliPd.__init__": [[210, 213], ["tensorflow.sigmoid"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "logits", ")", ":", "\n", "        ", "self", ".", "logits", "=", "logits", "\n", "self", ".", "ps", "=", "tf", ".", "sigmoid", "(", "logits", ")", "\n", "", "def", "flatparam", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.distributions.BernoulliPd.flatparam": [[213, 215], ["None"], "methods", ["None"], ["", "def", "flatparam", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "logits", "\n", "", "def", "mode", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.distributions.BernoulliPd.mode": [[215, 217], ["tensorflow.round"], "methods", ["None"], ["", "def", "mode", "(", "self", ")", ":", "\n", "        ", "return", "tf", ".", "round", "(", "self", ".", "ps", ")", "\n", "", "def", "neglogp", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.distributions.BernoulliPd.neglogp": [[217, 219], ["DDPG_baseline_v2.sum", "tensorflow.nn.sigmoid_cross_entropy_with_logits", "tensorflow.to_float"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.sum"], ["", "def", "neglogp", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "U", ".", "sum", "(", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "logits", "=", "self", ".", "logits", ",", "labels", "=", "tf", ".", "to_float", "(", "x", ")", ")", ",", "axis", "=", "-", "1", ")", "\n", "", "def", "kl", "(", "self", ",", "other", ")", ":", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.distributions.BernoulliPd.kl": [[219, 221], ["DDPG_baseline_v2.sum", "DDPG_baseline_v2.sum", "tensorflow.nn.sigmoid_cross_entropy_with_logits", "tensorflow.nn.sigmoid_cross_entropy_with_logits"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.sum", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.sum"], ["", "def", "kl", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "U", ".", "sum", "(", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "logits", "=", "other", ".", "logits", ",", "labels", "=", "self", ".", "ps", ")", ",", "axis", "=", "-", "1", ")", "-", "U", ".", "sum", "(", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "logits", "=", "self", ".", "logits", ",", "labels", "=", "self", ".", "ps", ")", ",", "axis", "=", "-", "1", ")", "\n", "", "def", "entropy", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.distributions.BernoulliPd.entropy": [[221, 223], ["DDPG_baseline_v2.sum", "tensorflow.nn.sigmoid_cross_entropy_with_logits"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.sum"], ["", "def", "entropy", "(", "self", ")", ":", "\n", "        ", "return", "U", ".", "sum", "(", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "logits", "=", "self", ".", "logits", ",", "labels", "=", "self", ".", "ps", ")", ",", "axis", "=", "-", "1", ")", "\n", "", "def", "sample", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.distributions.BernoulliPd.sample": [[223, 226], ["tensorflow.random_uniform", "tensorflow.to_float", "tensorflow.shape", "tensorflow.python.ops.math_ops.less"], "methods", ["None"], ["", "def", "sample", "(", "self", ")", ":", "\n", "        ", "u", "=", "tf", ".", "random_uniform", "(", "tf", ".", "shape", "(", "self", ".", "ps", ")", ")", "\n", "return", "tf", ".", "to_float", "(", "math_ops", ".", "less", "(", "u", ",", "self", ".", "ps", ")", ")", "\n", "", "@", "classmethod", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.distributions.BernoulliPd.fromflat": [[226, 229], ["cls"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "fromflat", "(", "cls", ",", "flat", ")", ":", "\n", "        ", "return", "cls", "(", "flat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.distributions.make_pdtype": [[230, 243], ["isinstance", "distributions.DiagGaussianPdType", "isinstance", "len", "distributions.CategoricalPdType", "isinstance", "distributions.MultiCategoricalPdType", "isinstance", "distributions.BernoulliPdType"], "function", ["None"], ["", "", "def", "make_pdtype", "(", "ac_space", ")", ":", "\n", "    ", "from", "gym", "import", "spaces", "\n", "if", "isinstance", "(", "ac_space", ",", "spaces", ".", "Box", ")", ":", "\n", "        ", "assert", "len", "(", "ac_space", ".", "shape", ")", "==", "1", "\n", "return", "DiagGaussianPdType", "(", "ac_space", ".", "shape", "[", "0", "]", ")", "\n", "", "elif", "isinstance", "(", "ac_space", ",", "spaces", ".", "Discrete", ")", ":", "\n", "        ", "return", "CategoricalPdType", "(", "ac_space", ".", "n", ")", "\n", "", "elif", "isinstance", "(", "ac_space", ",", "spaces", ".", "MultiDiscrete", ")", ":", "\n", "        ", "return", "MultiCategoricalPdType", "(", "ac_space", ".", "low", ",", "ac_space", ".", "high", ")", "\n", "", "elif", "isinstance", "(", "ac_space", ",", "spaces", ".", "MultiBinary", ")", ":", "\n", "        ", "return", "BernoulliPdType", "(", "ac_space", ".", "n", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.distributions.shape_el": [[244, 250], ["v.get_shape", "tensorflow.shape"], "function", ["None"], ["", "", "def", "shape_el", "(", "v", ",", "i", ")", ":", "\n", "    ", "maybe", "=", "v", ".", "get_shape", "(", ")", "[", "i", "]", "\n", "if", "maybe", "is", "not", "None", ":", "\n", "        ", "return", "maybe", "\n", "", "else", ":", "\n", "        ", "return", "tf", ".", "shape", "(", "v", ")", "[", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.distributions.test_probtypes": [[251, 266], ["numpy.random.seed", "numpy.array", "distributions.DiagGaussianPdType", "distributions.validate_probtype", "numpy.array", "distributions.CategoricalPdType", "distributions.validate_probtype", "numpy.array", "distributions.BernoulliPdType", "distributions.validate_probtype"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.distributions.validate_probtype", "home.repos.pwc.inspect_result.flowersteam_geppg.common.distributions.validate_probtype", "home.repos.pwc.inspect_result.flowersteam_geppg.common.distributions.validate_probtype"], ["", "", "@", "U", ".", "in_session", "\n", "def", "test_probtypes", "(", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "0", ")", "\n", "\n", "pdparam_diag_gauss", "=", "np", ".", "array", "(", "[", "-", ".2", ",", ".3", ",", ".4", ",", "-", ".5", ",", ".1", ",", "-", ".5", ",", ".1", ",", "0.8", "]", ")", "\n", "diag_gauss", "=", "DiagGaussianPdType", "(", "pdparam_diag_gauss", ".", "size", "//", "2", ")", "#pylint: disable=E1101", "\n", "validate_probtype", "(", "diag_gauss", ",", "pdparam_diag_gauss", ")", "\n", "\n", "pdparam_categorical", "=", "np", ".", "array", "(", "[", "-", ".2", ",", ".3", ",", ".5", "]", ")", "\n", "categorical", "=", "CategoricalPdType", "(", "pdparam_categorical", ".", "size", ")", "#pylint: disable=E1101", "\n", "validate_probtype", "(", "categorical", ",", "pdparam_categorical", ")", "\n", "\n", "pdparam_bernoulli", "=", "np", ".", "array", "(", "[", "-", ".2", ",", ".3", ",", ".5", "]", ")", "\n", "bernoulli", "=", "BernoulliPdType", "(", "pdparam_bernoulli", ".", "size", ")", "#pylint: disable=E1101", "\n", "validate_probtype", "(", "bernoulli", ",", "pdparam_bernoulli", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.distributions.validate_probtype": [[268, 295], ["numpy.repeat", "probtype.param_placeholder", "probtype.sample_placeholder", "DDPG_baseline_v2.function", "DDPG_baseline_v2.function", "DDPG_baseline_v2.eval", "U.function.", "U.function.mean", "probtype.param_placeholder", "numpy.repeat", "DDPG_baseline_v2.function", "U.function.mean", "U.function.", "probtype.pdclass", "pd.logp", "pd.entropy", "pd.sample", "calcloglik.mean", "calcloglik.std", "numpy.sqrt", "numpy.abs", "probtype.pdclass", "pd.kl", "calcloglik.mean", "calcloglik.std", "numpy.sqrt", "numpy.abs", "U.function.", "numpy.random.randn", "U.function."], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.distributions.PdType.param_placeholder", "home.repos.pwc.inspect_result.flowersteam_geppg.common.distributions.PdType.sample_placeholder", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.function", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.function", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.eval", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.mean", "home.repos.pwc.inspect_result.flowersteam_geppg.common.distributions.PdType.param_placeholder", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.function", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.mean", "home.repos.pwc.inspect_result.flowersteam_geppg.common.distributions.BernoulliPdType.pdclass", "home.repos.pwc.inspect_result.flowersteam_geppg.common.distributions.Pd.logp", "home.repos.pwc.inspect_result.flowersteam_geppg.common.distributions.BernoulliPd.entropy", "home.repos.pwc.inspect_result.flowersteam_geppg.common.distributions.BernoulliPd.sample", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.mean", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.std", "home.repos.pwc.inspect_result.flowersteam_geppg.common.distributions.BernoulliPdType.pdclass", "home.repos.pwc.inspect_result.flowersteam_geppg.common.distributions.BernoulliPd.kl", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.mean", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.std"], ["", "def", "validate_probtype", "(", "probtype", ",", "pdparam", ")", ":", "\n", "    ", "N", "=", "100000", "\n", "# Check to see if mean negative log likelihood == differential entropy", "\n", "Mval", "=", "np", ".", "repeat", "(", "pdparam", "[", "None", ",", ":", "]", ",", "N", ",", "axis", "=", "0", ")", "\n", "M", "=", "probtype", ".", "param_placeholder", "(", "[", "N", "]", ")", "\n", "X", "=", "probtype", ".", "sample_placeholder", "(", "[", "N", "]", ")", "\n", "pd", "=", "probtype", ".", "pdclass", "(", ")", "(", "M", ")", "\n", "calcloglik", "=", "U", ".", "function", "(", "[", "X", ",", "M", "]", ",", "pd", ".", "logp", "(", "X", ")", ")", "\n", "calcent", "=", "U", ".", "function", "(", "[", "M", "]", ",", "pd", ".", "entropy", "(", ")", ")", "\n", "Xval", "=", "U", ".", "eval", "(", "pd", ".", "sample", "(", ")", ",", "feed_dict", "=", "{", "M", ":", "Mval", "}", ")", "\n", "logliks", "=", "calcloglik", "(", "Xval", ",", "Mval", ")", "\n", "entval_ll", "=", "-", "logliks", ".", "mean", "(", ")", "#pylint: disable=E1101", "\n", "entval_ll_stderr", "=", "logliks", ".", "std", "(", ")", "/", "np", ".", "sqrt", "(", "N", ")", "#pylint: disable=E1101", "\n", "entval", "=", "calcent", "(", "Mval", ")", ".", "mean", "(", ")", "#pylint: disable=E1101", "\n", "assert", "np", ".", "abs", "(", "entval", "-", "entval_ll", ")", "<", "3", "*", "entval_ll_stderr", "# within 3 sigmas", "\n", "\n", "# Check to see if kldiv[p,q] = - ent[p] - E_p[log q]", "\n", "M2", "=", "probtype", ".", "param_placeholder", "(", "[", "N", "]", ")", "\n", "pd2", "=", "probtype", ".", "pdclass", "(", ")", "(", "M2", ")", "\n", "q", "=", "pdparam", "+", "np", ".", "random", ".", "randn", "(", "pdparam", ".", "size", ")", "*", "0.1", "\n", "Mval2", "=", "np", ".", "repeat", "(", "q", "[", "None", ",", ":", "]", ",", "N", ",", "axis", "=", "0", ")", "\n", "calckl", "=", "U", ".", "function", "(", "[", "M", ",", "M2", "]", ",", "pd", ".", "kl", "(", "pd2", ")", ")", "\n", "klval", "=", "calckl", "(", "Mval", ",", "Mval2", ")", ".", "mean", "(", ")", "#pylint: disable=E1101", "\n", "logliks", "=", "calcloglik", "(", "Xval", ",", "Mval2", ")", "\n", "klval_ll", "=", "-", "entval", "-", "logliks", ".", "mean", "(", ")", "#pylint: disable=E1101", "\n", "klval_ll_stderr", "=", "logliks", ".", "std", "(", ")", "/", "np", ".", "sqrt", "(", "N", ")", "#pylint: disable=E1101", "\n", "assert", "np", ".", "abs", "(", "klval", "-", "klval_ll", ")", "<", "3", "*", "klval_ll_stderr", "# within 3 sigmas", "\n", "", ""]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.TfInput.__init__": [[112, 118], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "name", "=", "\"(unnamed)\"", ")", ":", "\n", "        ", "\"\"\"Generalized Tensorflow placeholder. The main differences are:\n            - possibly uses multiple placeholders internally and returns multiple values\n            - can apply light postprocessing to the value feed to placeholder.\n        \"\"\"", "\n", "self", ".", "name", "=", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.TfInput.get": [[119, 124], ["NotImplemented"], "methods", ["None"], ["", "def", "get", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return the tf variable(s) representing the possibly postprocessed value\n        of placeholder(s).\n        \"\"\"", "\n", "raise", "NotImplemented", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.TfInput.make_feed_dict": [[125, 128], ["NotImplemented"], "methods", ["None"], ["", "def", "make_feed_dict", "(", "data", ")", ":", "\n", "        ", "\"\"\"Given data input it to the placeholder(s).\"\"\"", "\n", "raise", "NotImplemented", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.PlacholderTfInput.__init__": [[131, 135], ["tf_util.TfInput.__init__"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.subproc_vec_env.SubprocVecEnv.__init__"], ["    ", "def", "__init__", "(", "self", ",", "placeholder", ")", ":", "\n", "        ", "\"\"\"Wrapper for regular tensorflow placeholder.\"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "placeholder", ".", "name", ")", "\n", "self", ".", "_placeholder", "=", "placeholder", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.PlacholderTfInput.get": [[136, 138], ["None"], "methods", ["None"], ["", "def", "get", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_placeholder", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.PlacholderTfInput.make_feed_dict": [[139, 141], ["None"], "methods", ["None"], ["", "def", "make_feed_dict", "(", "self", ",", "data", ")", ":", "\n", "        ", "return", "{", "self", ".", "_placeholder", ":", "data", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.BatchInput.__init__": [[144, 157], ["tf_util.PlacholderTfInput.__init__", "tensorflow.placeholder", "list"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.subproc_vec_env.SubprocVecEnv.__init__", "home.repos.pwc.inspect_result.flowersteam_geppg.common.azure_utils.Container.list"], ["    ", "def", "__init__", "(", "self", ",", "shape", ",", "dtype", "=", "tf", ".", "float32", ",", "name", "=", "None", ")", ":", "\n", "        ", "\"\"\"Creates a placeholder for a batch of tensors of a given shape and dtype\n\n        Parameters\n        ----------\n        shape: [int]\n            shape of a single elemenet of the batch\n        dtype: tf.dtype\n            number representation used for tensor contents\n        name: str\n            name of the underlying placeholder\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "tf", ".", "placeholder", "(", "dtype", ",", "[", "None", "]", "+", "list", "(", "shape", ")", ",", "name", "=", "name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.Uint8Input.__init__": [[160, 177], ["tf_util.PlacholderTfInput.__init__", "tensorflow.placeholder", "tensorflow.cast", "tf_util.PlacholderTfInput.get", "list"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.subproc_vec_env.SubprocVecEnv.__init__", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.Uint8Input.get", "home.repos.pwc.inspect_result.flowersteam_geppg.common.azure_utils.Container.list"], ["    ", "def", "__init__", "(", "self", ",", "shape", ",", "name", "=", "None", ")", ":", "\n", "        ", "\"\"\"Takes input in uint8 format which is cast to float32 and divided by 255\n        before passing it to the model.\n\n        On GPU this ensures lower data transfer times.\n\n        Parameters\n        ----------\n        shape: [int]\n            shape of the tensor.\n        name: str\n            name of the underlying placeholder\n        \"\"\"", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "tf", ".", "placeholder", "(", "tf", ".", "uint8", ",", "[", "None", "]", "+", "list", "(", "shape", ")", ",", "name", "=", "name", ")", ")", "\n", "self", ".", "_shape", "=", "shape", "\n", "self", ".", "_output", "=", "tf", ".", "cast", "(", "super", "(", ")", ".", "get", "(", ")", ",", "tf", ".", "float32", ")", "/", "255.0", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.Uint8Input.get": [[178, 180], ["None"], "methods", ["None"], ["", "def", "get", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_output", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util._Function.__init__": [[414, 424], ["tensorflow.group", "list", "issubclass", "type", "len"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.azure_utils.Container.list"], ["    ", "def", "__init__", "(", "self", ",", "inputs", ",", "outputs", ",", "updates", ",", "givens", ",", "check_nan", "=", "False", ")", ":", "\n", "        ", "for", "inpt", "in", "inputs", ":", "\n", "            ", "if", "not", "issubclass", "(", "type", "(", "inpt", ")", ",", "TfInput", ")", ":", "\n", "                ", "assert", "len", "(", "inpt", ".", "op", ".", "inputs", ")", "==", "0", ",", "\"inputs should all be placeholders of baselines.common.TfInput\"", "\n", "", "", "self", ".", "inputs", "=", "inputs", "\n", "updates", "=", "updates", "or", "[", "]", "\n", "self", ".", "update_group", "=", "tf", ".", "group", "(", "*", "updates", ")", "\n", "self", ".", "outputs_update", "=", "list", "(", "outputs", ")", "+", "[", "self", ".", "update_group", "]", "\n", "self", ".", "givens", "=", "{", "}", "if", "givens", "is", "None", "else", "givens", "\n", "self", ".", "check_nan", "=", "check_nan", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util._Function._feed_input": [[425, 430], ["issubclass", "type", "feed_dict.update", "tf_util.is_placeholder", "inpt.make_feed_dict"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.mpi_running_mean_std.RunningMeanStd.update", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.is_placeholder", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.PlacholderTfInput.make_feed_dict"], ["", "def", "_feed_input", "(", "self", ",", "feed_dict", ",", "inpt", ",", "value", ")", ":", "\n", "        ", "if", "issubclass", "(", "type", "(", "inpt", ")", ",", "TfInput", ")", ":", "\n", "            ", "feed_dict", ".", "update", "(", "inpt", ".", "make_feed_dict", "(", "value", ")", ")", "\n", "", "elif", "is_placeholder", "(", "inpt", ")", ":", "\n", "            ", "feed_dict", "[", "inpt", "]", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util._Function.__call__": [[431, 458], ["zip", "set", "len", "len", "tf_util._Function._feed_input", "len", "str", "feed_dict.get", "get_session().run", "any", "len", "inpt.name.split", "inpt_name.split", "set.add", "tf_util._Function._feed_input", "list", "RuntimeError", "kwargs.pop", "kwargs.keys", "tf_util.get_session", "numpy.isnan().any", "numpy.isnan"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util._Function._feed_input", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.Uint8Input.get", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.main_config.run", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util._Function._feed_input", "home.repos.pwc.inspect_result.flowersteam_geppg.common.azure_utils.Container.list", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.get_session"], ["", "", "def", "__call__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "assert", "len", "(", "args", ")", "<=", "len", "(", "self", ".", "inputs", ")", ",", "\"Too many arguments provided\"", "\n", "feed_dict", "=", "{", "}", "\n", "# Update the args", "\n", "for", "inpt", ",", "value", "in", "zip", "(", "self", ".", "inputs", ",", "args", ")", ":", "\n", "            ", "self", ".", "_feed_input", "(", "feed_dict", ",", "inpt", ",", "value", ")", "\n", "# Update the kwargs", "\n", "", "kwargs_passed_inpt_names", "=", "set", "(", ")", "\n", "for", "inpt", "in", "self", ".", "inputs", "[", "len", "(", "args", ")", ":", "]", ":", "\n", "            ", "inpt_name", "=", "inpt", ".", "name", ".", "split", "(", "':'", ")", "[", "0", "]", "\n", "inpt_name", "=", "inpt_name", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "assert", "inpt_name", "not", "in", "kwargs_passed_inpt_names", ",", "\"this function has two arguments with the same name \\\"{}\\\", so kwargs cannot be used.\"", ".", "format", "(", "inpt_name", ")", "\n", "if", "inpt_name", "in", "kwargs", ":", "\n", "                ", "kwargs_passed_inpt_names", ".", "add", "(", "inpt_name", ")", "\n", "self", ".", "_feed_input", "(", "feed_dict", ",", "inpt", ",", "kwargs", ".", "pop", "(", "inpt_name", ")", ")", "\n", "", "else", ":", "\n", "                ", "assert", "inpt", "in", "self", ".", "givens", ",", "\"Missing argument \"", "+", "inpt_name", "\n", "", "", "assert", "len", "(", "kwargs", ")", "==", "0", ",", "\"Function got extra arguments \"", "+", "str", "(", "list", "(", "kwargs", ".", "keys", "(", ")", ")", ")", "\n", "# Update feed dict with givens.", "\n", "for", "inpt", "in", "self", ".", "givens", ":", "\n", "            ", "feed_dict", "[", "inpt", "]", "=", "feed_dict", ".", "get", "(", "inpt", ",", "self", ".", "givens", "[", "inpt", "]", ")", "\n", "", "results", "=", "get_session", "(", ")", ".", "run", "(", "self", ".", "outputs_update", ",", "feed_dict", "=", "feed_dict", ")", "[", ":", "-", "1", "]", "\n", "if", "self", ".", "check_nan", ":", "\n", "            ", "if", "any", "(", "np", ".", "isnan", "(", "r", ")", ".", "any", "(", ")", "for", "r", "in", "results", ")", ":", "\n", "                ", "raise", "RuntimeError", "(", "\"Nan detected\"", ")", "\n", "", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util._MemFriendlyFunction.__init__": [[469, 474], ["list"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.azure_utils.Container.list"], ["    ", "def", "__init__", "(", "self", ",", "nondata_inputs", ",", "data_inputs", ",", "outputs", ",", "batch_size", ")", ":", "\n", "        ", "self", ".", "nondata_inputs", "=", "nondata_inputs", "\n", "self", ".", "data_inputs", "=", "data_inputs", "\n", "self", ".", "outputs", "=", "list", "(", "outputs", ")", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util._MemFriendlyFunction.__call__": [[475, 496], ["dict", "range", "range", "len", "zip", "zip", "tensorflow.get_default_session().run", "len", "len", "len", "len", "len", "range", "tensorflow.get_default_session", "len", "builtins.min"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.main_config.run", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.min"], ["", "def", "__call__", "(", "self", ",", "*", "inputvals", ")", ":", "\n", "        ", "assert", "len", "(", "inputvals", ")", "==", "len", "(", "self", ".", "nondata_inputs", ")", "+", "len", "(", "self", ".", "data_inputs", ")", "\n", "nondata_vals", "=", "inputvals", "[", "0", ":", "len", "(", "self", ".", "nondata_inputs", ")", "]", "\n", "data_vals", "=", "inputvals", "[", "len", "(", "self", ".", "nondata_inputs", ")", ":", "]", "\n", "feed_dict", "=", "dict", "(", "zip", "(", "self", ".", "nondata_inputs", ",", "nondata_vals", ")", ")", "\n", "n", "=", "data_vals", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "for", "v", "in", "data_vals", "[", "1", ":", "]", ":", "\n", "            ", "assert", "v", ".", "shape", "[", "0", "]", "==", "n", "\n", "", "for", "i_start", "in", "range", "(", "0", ",", "n", ",", "self", ".", "batch_size", ")", ":", "\n", "            ", "slice_vals", "=", "[", "v", "[", "i_start", ":", "builtins", ".", "min", "(", "i_start", "+", "self", ".", "batch_size", ",", "n", ")", "]", "for", "v", "in", "data_vals", "]", "\n", "for", "(", "var", ",", "val", ")", "in", "zip", "(", "self", ".", "data_inputs", ",", "slice_vals", ")", ":", "\n", "                ", "feed_dict", "[", "var", "]", "=", "val", "\n", "", "results", "=", "tf", ".", "get_default_session", "(", ")", ".", "run", "(", "self", ".", "outputs", ",", "feed_dict", "=", "feed_dict", ")", "\n", "if", "i_start", "==", "0", ":", "\n", "                ", "sum_results", "=", "results", "\n", "", "else", ":", "\n", "                ", "for", "i", "in", "range", "(", "len", "(", "results", ")", ")", ":", "\n", "                    ", "sum_results", "[", "i", "]", "=", "sum_results", "[", "i", "]", "+", "results", "[", "i", "]", "\n", "", "", "", "for", "i", "in", "range", "(", "len", "(", "results", ")", ")", ":", "\n", "            ", "sum_results", "[", "i", "]", "=", "sum_results", "[", "i", "]", "/", "n", "\n", "", "return", "sum_results", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.Module.__init__": [[503, 508], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "name", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "first_time", "=", "True", "\n", "self", ".", "scope", "=", "None", "\n", "self", ".", "cache", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.Module.__call__": [[509, 525], ["print", "tensorflow.variable_scope", "tf_util.Module._call", "tensorflow.get_variable_scope", "print", "print"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.Module._call"], ["", "def", "__call__", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "if", "args", "in", "self", ".", "cache", ":", "\n", "            ", "print", "(", "\"(%s) retrieving value from cache\"", "%", "(", "self", ".", "name", ",", ")", ")", "\n", "return", "self", ".", "cache", "[", "args", "]", "\n", "", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", ",", "reuse", "=", "not", "self", ".", "first_time", ")", ":", "\n", "            ", "scope", "=", "tf", ".", "get_variable_scope", "(", ")", ".", "name", "\n", "if", "self", ".", "first_time", ":", "\n", "                ", "self", ".", "scope", "=", "scope", "\n", "print", "(", "\"(%s) running function for the first time\"", "%", "(", "self", ".", "name", ",", ")", ")", "\n", "", "else", ":", "\n", "                ", "assert", "self", ".", "scope", "==", "scope", ",", "\"Tried calling function with a different scope\"", "\n", "print", "(", "\"(%s) running function on new inputs\"", "%", "(", "self", ".", "name", ",", ")", ")", "\n", "", "self", ".", "first_time", "=", "False", "\n", "out", "=", "self", ".", "_call", "(", "*", "args", ")", "\n", "", "self", ".", "cache", "[", "args", "]", "=", "out", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.Module._call": [[526, 528], ["None"], "methods", ["None"], ["", "def", "_call", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.Module.trainable_variables": [[529, 533], ["tensorflow.get_collection"], "methods", ["None"], ["", "@", "property", "\n", "def", "trainable_variables", "(", "self", ")", ":", "\n", "        ", "assert", "self", ".", "scope", "is", "not", "None", ",", "\"need to call module once before getting variables\"", "\n", "return", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "TRAINABLE_VARIABLES", ",", "self", ".", "scope", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.Module.variables": [[534, 538], ["tensorflow.get_collection"], "methods", ["None"], ["", "@", "property", "\n", "def", "variables", "(", "self", ")", ":", "\n", "        ", "assert", "self", ".", "scope", "is", "not", "None", ",", "\"need to call module once before getting variables\"", "\n", "return", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "GLOBAL_VARIABLES", ",", "self", ".", "scope", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.SetFromFlat.__init__": [[628, 641], ["list", "numpy.sum", "tensorflow.placeholder", "zip", "tensorflow.group", "map", "tf_util.intprod", "assigns.append", "tf_util.intprod", "tensorflow.assign", "tensorflow.reshape"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.azure_utils.Container.list", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.sum", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.intprod", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.intprod"], ["    ", "def", "__init__", "(", "self", ",", "var_list", ",", "dtype", "=", "tf", ".", "float32", ")", ":", "\n", "        ", "assigns", "=", "[", "]", "\n", "shapes", "=", "list", "(", "map", "(", "var_shape", ",", "var_list", ")", ")", "\n", "total_size", "=", "np", ".", "sum", "(", "[", "intprod", "(", "shape", ")", "for", "shape", "in", "shapes", "]", ")", "\n", "\n", "self", ".", "theta", "=", "theta", "=", "tf", ".", "placeholder", "(", "dtype", ",", "[", "total_size", "]", ")", "\n", "start", "=", "0", "\n", "assigns", "=", "[", "]", "\n", "for", "(", "shape", ",", "v", ")", "in", "zip", "(", "shapes", ",", "var_list", ")", ":", "\n", "            ", "size", "=", "intprod", "(", "shape", ")", "\n", "assigns", ".", "append", "(", "tf", ".", "assign", "(", "v", ",", "tf", ".", "reshape", "(", "theta", "[", "start", ":", "start", "+", "size", "]", ",", "shape", ")", ")", ")", "\n", "start", "+=", "size", "\n", "", "self", ".", "op", "=", "tf", ".", "group", "(", "*", "assigns", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.SetFromFlat.__call__": [[642, 644], ["get_session().run", "tf_util.get_session"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.main_config.run", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.get_session"], ["", "def", "__call__", "(", "self", ",", "theta", ")", ":", "\n", "        ", "get_session", "(", ")", ".", "run", "(", "self", ".", "op", ",", "feed_dict", "=", "{", "self", ".", "theta", ":", "theta", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.GetFlat.__init__": [[647, 649], ["tensorflow.concat", "tensorflow.reshape", "tf_util.numel"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.numel"], ["    ", "def", "__init__", "(", "self", ",", "var_list", ")", ":", "\n", "        ", "self", ".", "op", "=", "tf", ".", "concat", "(", "axis", "=", "0", ",", "values", "=", "[", "tf", ".", "reshape", "(", "v", ",", "[", "numel", "(", "v", ")", "]", ")", "for", "v", "in", "var_list", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.GetFlat.__call__": [[650, 652], ["get_session().run", "tf_util.get_session"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.main_config.run", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.get_session"], ["", "def", "__call__", "(", "self", ")", ":", "\n", "        ", "return", "get_session", "(", ")", ".", "run", "(", "self", ".", "op", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.lrelu": [[90, 94], ["abs"], "function", ["None"], ["", "", "def", "lrelu", "(", "x", ",", "leak", "=", "0.2", ")", ":", "\n", "    ", "f1", "=", "0.5", "*", "(", "1", "+", "leak", ")", "\n", "f2", "=", "0.5", "*", "(", "1", "-", "leak", ")", "\n", "return", "f1", "*", "x", "+", "f2", "*", "abs", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.sum": [[24, 27], ["tensorflow.reduce_sum"], "function", ["None"], ["", "", "def", "sum", "(", "x", ",", "axis", "=", "None", ",", "keepdims", "=", "False", ")", ":", "\n", "    ", "axis", "=", "None", "if", "axis", "is", "None", "else", "[", "axis", "]", "\n", "return", "tf", ".", "reduce_sum", "(", "x", ",", "axis", "=", "axis", ",", "keep_dims", "=", "keepdims", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.mean": [[29, 32], ["tensorflow.reduce_mean"], "function", ["None"], ["", "def", "mean", "(", "x", ",", "axis", "=", "None", ",", "keepdims", "=", "False", ")", ":", "\n", "    ", "axis", "=", "None", "if", "axis", "is", "None", "else", "[", "axis", "]", "\n", "return", "tf", ".", "reduce_mean", "(", "x", ",", "axis", "=", "axis", ",", "keep_dims", "=", "keepdims", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.var": [[34, 37], ["tf_util.mean", "tf_util.mean", "tensorflow.square"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.mean", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.mean"], ["", "def", "var", "(", "x", ",", "axis", "=", "None", ",", "keepdims", "=", "False", ")", ":", "\n", "    ", "meanx", "=", "mean", "(", "x", ",", "axis", "=", "axis", ",", "keepdims", "=", "keepdims", ")", "\n", "return", "mean", "(", "tf", ".", "square", "(", "x", "-", "meanx", ")", ",", "axis", "=", "axis", ",", "keepdims", "=", "keepdims", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.std": [[39, 41], ["tensorflow.sqrt", "tf_util.var"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.var"], ["", "def", "std", "(", "x", ",", "axis", "=", "None", ",", "keepdims", "=", "False", ")", ":", "\n", "    ", "return", "tf", ".", "sqrt", "(", "var", "(", "x", ",", "axis", "=", "axis", ",", "keepdims", "=", "keepdims", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.max": [[43, 46], ["tensorflow.reduce_max"], "function", ["None"], ["", "def", "max", "(", "x", ",", "axis", "=", "None", ",", "keepdims", "=", "False", ")", ":", "\n", "    ", "axis", "=", "None", "if", "axis", "is", "None", "else", "[", "axis", "]", "\n", "return", "tf", ".", "reduce_max", "(", "x", ",", "axis", "=", "axis", ",", "keep_dims", "=", "keepdims", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.min": [[48, 51], ["tensorflow.reduce_min"], "function", ["None"], ["", "def", "min", "(", "x", ",", "axis", "=", "None", ",", "keepdims", "=", "False", ")", ":", "\n", "    ", "axis", "=", "None", "if", "axis", "is", "None", "else", "[", "axis", "]", "\n", "return", "tf", ".", "reduce_min", "(", "x", ",", "axis", "=", "axis", ",", "keep_dims", "=", "keepdims", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.concatenate": [[53, 55], ["tensorflow.concat"], "function", ["None"], ["", "def", "concatenate", "(", "arrs", ",", "axis", "=", "0", ")", ":", "\n", "    ", "return", "tf", ".", "concat", "(", "axis", "=", "axis", ",", "values", "=", "arrs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.argmax": [[57, 59], ["tensorflow.argmax"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.argmax"], ["", "def", "argmax", "(", "x", ",", "axis", "=", "None", ")", ":", "\n", "    ", "return", "tf", ".", "argmax", "(", "x", ",", "axis", "=", "axis", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.switch": [[61, 77], ["copy.copy", "tensorflow.cond", "tf.cond.set_shape", "then_expression.get_shape", "tensorflow.cast"], "function", ["None"], ["", "def", "switch", "(", "condition", ",", "then_expression", ",", "else_expression", ")", ":", "\n", "    ", "\"\"\"Switches between two operations depending on a scalar value (int or bool).\n    Note that both `then_expression` and `else_expression`\n    should be symbolic tensors of the *same shape*.\n\n    # Arguments\n        condition: scalar tensor.\n        then_expression: TensorFlow operation.\n        else_expression: TensorFlow operation.\n    \"\"\"", "\n", "x_shape", "=", "copy", ".", "copy", "(", "then_expression", ".", "get_shape", "(", ")", ")", "\n", "x", "=", "tf", ".", "cond", "(", "tf", ".", "cast", "(", "condition", ",", "'bool'", ")", ",", "\n", "lambda", ":", "then_expression", ",", "\n", "lambda", ":", "else_expression", ")", "\n", "x", ".", "set_shape", "(", "x_shape", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.l2loss": [[83, 88], ["len", "tensorflow.constant", "tensorflow.add_n", "tf_util.sum", "tensorflow.square"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.sum"], ["", "def", "l2loss", "(", "params", ")", ":", "\n", "    ", "if", "len", "(", "params", ")", "==", "0", ":", "\n", "        ", "return", "tf", ".", "constant", "(", "0.0", ")", "\n", "", "else", ":", "\n", "        ", "return", "tf", ".", "add_n", "(", "[", "sum", "(", "tf", ".", "square", "(", "p", ")", ")", "for", "p", "in", "params", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.categorical_sample_logits": [[96, 100], ["tensorflow.random_uniform", "tf_util.argmax", "tensorflow.shape", "tensorflow.log", "tensorflow.log"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.argmax", "home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.log", "home.repos.pwc.inspect_result.flowersteam_geppg.baselines.logger.log"], ["", "def", "categorical_sample_logits", "(", "X", ")", ":", "\n", "# https://github.com/tensorflow/tensorflow/issues/456", "\n", "    ", "U", "=", "tf", ".", "random_uniform", "(", "tf", ".", "shape", "(", "X", ")", ")", "\n", "return", "argmax", "(", "X", "-", "tf", ".", "log", "(", "-", "tf", ".", "log", "(", "U", ")", ")", ",", "axis", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.is_placeholder": [[107, 109], ["type", "len"], "function", ["None"], ["", "def", "is_placeholder", "(", "x", ")", ":", "\n", "    ", "return", "type", "(", "x", ")", "is", "tf", ".", "Tensor", "and", "len", "(", "x", ".", "op", ".", "inputs", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.ensure_tf_input": [[182, 190], ["isinstance", "tf_util.is_placeholder", "tf_util.PlacholderTfInput", "ValueError"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.is_placeholder"], ["", "", "def", "ensure_tf_input", "(", "thing", ")", ":", "\n", "    ", "\"\"\"Takes either tf.placeholder of TfInput and outputs equivalent TfInput\"\"\"", "\n", "if", "isinstance", "(", "thing", ",", "TfInput", ")", ":", "\n", "        ", "return", "thing", "\n", "", "elif", "is_placeholder", "(", "thing", ")", ":", "\n", "        ", "return", "PlacholderTfInput", "(", "thing", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Must be a placeholder or TfInput\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.huber_loss": [[196, 202], ["tensorflow.where", "tensorflow.abs", "tensorflow.square", "tensorflow.abs"], "function", ["None"], ["", "", "def", "huber_loss", "(", "x", ",", "delta", "=", "1.0", ")", ":", "\n", "    ", "\"\"\"Reference: https://en.wikipedia.org/wiki/Huber_loss\"\"\"", "\n", "return", "tf", ".", "where", "(", "\n", "tf", ".", "abs", "(", "x", ")", "<", "delta", ",", "\n", "tf", ".", "square", "(", "x", ")", "*", "0.5", ",", "\n", "delta", "*", "(", "tf", ".", "abs", "(", "x", ")", "-", "0.5", "*", "delta", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.minimize_and_clip": [[209, 219], ["optimizer.compute_gradients", "enumerate", "optimizer.apply_gradients", "tensorflow.clip_by_norm"], "function", ["None"], ["", "def", "minimize_and_clip", "(", "optimizer", ",", "objective", ",", "var_list", ",", "clip_val", "=", "10", ")", ":", "\n", "    ", "\"\"\"Minimized `objective` using `optimizer` w.r.t. variables in\n    `var_list` while ensure the norm of the gradients for each\n    variable is clipped to `clip_val`\n    \"\"\"", "\n", "gradients", "=", "optimizer", ".", "compute_gradients", "(", "objective", ",", "var_list", "=", "var_list", ")", "\n", "for", "i", ",", "(", "grad", ",", "var", ")", "in", "enumerate", "(", "gradients", ")", ":", "\n", "        ", "if", "grad", "is", "not", "None", ":", "\n", "            ", "gradients", "[", "i", "]", "=", "(", "tf", ".", "clip_by_norm", "(", "grad", ",", "clip_val", ")", ",", "var", ")", "\n", "", "", "return", "optimizer", ".", "apply_gradients", "(", "gradients", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.get_session": [[225, 228], ["tensorflow.get_default_session"], "function", ["None"], ["", "def", "get_session", "(", ")", ":", "\n", "    ", "\"\"\"Returns recently made Tensorflow session\"\"\"", "\n", "return", "tf", ".", "get_default_session", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.make_session": [[230, 237], ["tensorflow.ConfigProto", "tensorflow.Session", "tensorflow.GPUOptions"], "function", ["None"], ["", "def", "make_session", "(", "num_cpu", ")", ":", "\n", "    ", "\"\"\"Returns a session that will use <num_cpu> CPU's only\"\"\"", "\n", "tf_config", "=", "tf", ".", "ConfigProto", "(", "\n", "gpu_options", "=", "tf", ".", "GPUOptions", "(", "allow_growth", "=", "True", ")", ",", "\n", "inter_op_parallelism_threads", "=", "num_cpu", ",", "\n", "intra_op_parallelism_threads", "=", "num_cpu", ")", "\n", "return", "tf", ".", "Session", "(", "config", "=", "tf_config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.single_threaded_session": [[239, 242], ["tf_util.make_session"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.make_session"], ["", "def", "single_threaded_session", "(", ")", ":", "\n", "    ", "\"\"\"Returns a session which will only use a single CPU\"\"\"", "\n", "return", "make_session", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.initialize": [[247, 252], ["get_session().run", "ALREADY_INITIALIZED.update", "set", "tensorflow.variables_initializer", "tensorflow.global_variables", "tf_util.get_session"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.main_config.run", "home.repos.pwc.inspect_result.flowersteam_geppg.common.mpi_running_mean_std.RunningMeanStd.update", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.get_session"], ["def", "initialize", "(", ")", ":", "\n", "    ", "\"\"\"Initialize all the uninitialized variables in the global scope.\"\"\"", "\n", "new_variables", "=", "set", "(", "tf", ".", "global_variables", "(", ")", ")", "-", "ALREADY_INITIALIZED", "\n", "get_session", "(", ")", ".", "run", "(", "tf", ".", "variables_initializer", "(", "new_variables", ")", ")", "\n", "ALREADY_INITIALIZED", ".", "update", "(", "new_variables", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.eval": [[254, 258], ["get_session().run", "tf_util.get_session"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.main_config.run", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.get_session"], ["", "def", "eval", "(", "expr", ",", "feed_dict", "=", "None", ")", ":", "\n", "    ", "if", "feed_dict", "is", "None", ":", "\n", "        ", "feed_dict", "=", "{", "}", "\n", "", "return", "get_session", "(", ")", ".", "run", "(", "expr", ",", "feed_dict", "=", "feed_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.set_value": [[263, 272], ["get_session().run", "tensorflow.placeholder", "v.assign", "tf_util.get_session"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.main_config.run", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.get_session"], ["def", "set_value", "(", "v", ",", "val", ")", ":", "\n", "    ", "global", "VALUE_SETTERS", "\n", "if", "v", "in", "VALUE_SETTERS", ":", "\n", "        ", "set_op", ",", "set_endpoint", "=", "VALUE_SETTERS", "[", "v", "]", "\n", "", "else", ":", "\n", "        ", "set_endpoint", "=", "tf", ".", "placeholder", "(", "v", ".", "dtype", ")", "\n", "set_op", "=", "v", ".", "assign", "(", "set_endpoint", ")", "\n", "VALUE_SETTERS", "[", "v", "]", "=", "(", "set_op", ",", "set_endpoint", ")", "\n", "", "get_session", "(", ")", ".", "run", "(", "set_op", ",", "feed_dict", "=", "{", "set_endpoint", ":", "val", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.load_state": [[279, 282], ["tensorflow.train.Saver", "tf.train.Saver.restore", "tf_util.get_session"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.get_session"], ["", "def", "load_state", "(", "fname", ")", ":", "\n", "    ", "saver", "=", "tf", ".", "train", ".", "Saver", "(", ")", "\n", "saver", ".", "restore", "(", "get_session", "(", ")", ",", "fname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.save_state": [[284, 288], ["os.makedirs", "tensorflow.train.Saver", "tf.train.Saver.save", "os.path.dirname", "tf_util.get_session"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.get_session"], ["", "def", "save_state", "(", "fname", ")", ":", "\n", "    ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "fname", ")", ",", "exist_ok", "=", "True", ")", "\n", "saver", "=", "tf", ".", "train", ".", "Saver", "(", ")", "\n", "saver", ".", "save", "(", "get_session", "(", ")", ",", "fname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.normc_initializer": [[294, 300], ["numpy.random.randn().astype", "tensorflow.constant", "numpy.sqrt", "numpy.random.randn", "numpy.square().sum", "numpy.square"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.sum"], ["", "def", "normc_initializer", "(", "std", "=", "1.0", ")", ":", "\n", "    ", "def", "_initializer", "(", "shape", ",", "dtype", "=", "None", ",", "partition_info", "=", "None", ")", ":", "# pylint: disable=W0613", "\n", "        ", "out", "=", "np", ".", "random", ".", "randn", "(", "*", "shape", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "out", "*=", "std", "/", "np", ".", "sqrt", "(", "np", ".", "square", "(", "out", ")", ".", "sum", "(", "axis", "=", "0", ",", "keepdims", "=", "True", ")", ")", "\n", "return", "tf", ".", "constant", "(", "out", ")", "\n", "", "return", "_initializer", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.conv2d": [[302, 330], ["tensorflow.variable_scope", "tf_util.intprod", "numpy.sqrt", "tensorflow.get_variable", "tensorflow.get_variable", "int", "tf_util.intprod", "tensorflow.random_uniform_initializer", "tensorflow.summary.image", "tensorflow.nn.conv2d", "tensorflow.zeros_initializer", "tensorflow.transpose", "x.get_shape", "tensorflow.reshape"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.intprod", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.intprod", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.conv2d"], ["", "def", "conv2d", "(", "x", ",", "num_filters", ",", "name", ",", "filter_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "\"SAME\"", ",", "dtype", "=", "tf", ".", "float32", ",", "collections", "=", "None", ",", "\n", "summary_tag", "=", "None", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "        ", "stride_shape", "=", "[", "1", ",", "stride", "[", "0", "]", ",", "stride", "[", "1", "]", ",", "1", "]", "\n", "filter_shape", "=", "[", "filter_size", "[", "0", "]", ",", "filter_size", "[", "1", "]", ",", "int", "(", "x", ".", "get_shape", "(", ")", "[", "3", "]", ")", ",", "num_filters", "]", "\n", "\n", "# there are \"num input feature maps * filter height * filter width\"", "\n", "# inputs to each hidden unit", "\n", "fan_in", "=", "intprod", "(", "filter_shape", "[", ":", "3", "]", ")", "\n", "# each unit in the lower layer receives a gradient from:", "\n", "# \"num output feature maps * filter height * filter width\" /", "\n", "#   pooling size", "\n", "fan_out", "=", "intprod", "(", "filter_shape", "[", ":", "2", "]", ")", "*", "num_filters", "\n", "# initialize weights with random weights", "\n", "w_bound", "=", "np", ".", "sqrt", "(", "6.", "/", "(", "fan_in", "+", "fan_out", ")", ")", "\n", "\n", "w", "=", "tf", ".", "get_variable", "(", "\"W\"", ",", "filter_shape", ",", "dtype", ",", "tf", ".", "random_uniform_initializer", "(", "-", "w_bound", ",", "w_bound", ")", ",", "\n", "collections", "=", "collections", ")", "\n", "b", "=", "tf", ".", "get_variable", "(", "\"b\"", ",", "[", "1", ",", "1", ",", "1", ",", "num_filters", "]", ",", "initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ",", "\n", "collections", "=", "collections", ")", "\n", "\n", "if", "summary_tag", "is", "not", "None", ":", "\n", "            ", "tf", ".", "summary", ".", "image", "(", "summary_tag", ",", "\n", "tf", ".", "transpose", "(", "tf", ".", "reshape", "(", "w", ",", "[", "filter_size", "[", "0", "]", ",", "filter_size", "[", "1", "]", ",", "-", "1", ",", "1", "]", ")", ",", "\n", "[", "2", ",", "0", ",", "1", ",", "3", "]", ")", ",", "\n", "max_images", "=", "10", ")", "\n", "\n", "", "return", "tf", ".", "nn", ".", "conv2d", "(", "x", ",", "w", ",", "stride_shape", ",", "pad", ")", "+", "b", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.dense": [[332, 340], ["tensorflow.get_variable", "tensorflow.matmul", "tensorflow.get_variable", "x.get_shape", "tensorflow.zeros_initializer"], "function", ["None"], ["", "", "def", "dense", "(", "x", ",", "size", ",", "name", ",", "weight_init", "=", "None", ",", "bias", "=", "True", ")", ":", "\n", "    ", "w", "=", "tf", ".", "get_variable", "(", "name", "+", "\"/w\"", ",", "[", "x", ".", "get_shape", "(", ")", "[", "1", "]", ",", "size", "]", ",", "initializer", "=", "weight_init", ")", "\n", "ret", "=", "tf", ".", "matmul", "(", "x", ",", "w", ")", "\n", "if", "bias", ":", "\n", "        ", "b", "=", "tf", ".", "get_variable", "(", "name", "+", "\"/b\"", ",", "[", "size", "]", ",", "initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ")", "\n", "return", "ret", "+", "b", "\n", "", "else", ":", "\n", "        ", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.wndense": [[342, 352], ["tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.matmul", "tensorflow.sqrt", "tensorflow.reshape", "int", "tensorflow.random_normal_initializer", "tensorflow.constant_initializer", "tensorflow.constant_initializer", "tf_util.sum", "tensorflow.reshape", "tensorflow.square", "tf.matmul.get_shape"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.sum"], ["", "", "def", "wndense", "(", "x", ",", "size", ",", "name", ",", "init_scale", "=", "1.0", ")", ":", "\n", "    ", "v", "=", "tf", ".", "get_variable", "(", "name", "+", "\"/V\"", ",", "[", "int", "(", "x", ".", "get_shape", "(", ")", "[", "1", "]", ")", ",", "size", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "0", ",", "0.05", ")", ")", "\n", "g", "=", "tf", ".", "get_variable", "(", "name", "+", "\"/g\"", ",", "[", "size", "]", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "init_scale", ")", ")", "\n", "b", "=", "tf", ".", "get_variable", "(", "name", "+", "\"/b\"", ",", "[", "size", "]", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.0", ")", ")", "\n", "\n", "# use weight normalization (Salimans & Kingma, 2016)", "\n", "x", "=", "tf", ".", "matmul", "(", "x", ",", "v", ")", "\n", "scaler", "=", "g", "/", "tf", ".", "sqrt", "(", "sum", "(", "tf", ".", "square", "(", "v", ")", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", ")", "\n", "return", "tf", ".", "reshape", "(", "scaler", ",", "[", "1", ",", "size", "]", ")", "*", "x", "+", "tf", ".", "reshape", "(", "b", ",", "[", "1", ",", "size", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.densenobias": [[354, 356], ["tf_util.dense"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.dense"], ["", "def", "densenobias", "(", "x", ",", "size", ",", "name", ",", "weight_init", "=", "None", ")", ":", "\n", "    ", "return", "dense", "(", "x", ",", "size", ",", "name", ",", "weight_init", "=", "weight_init", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.dropout": [[358, 364], ["tensorflow.floor", "tf_util.switch", "tensorflow.random_uniform", "tensorflow.shape"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.switch"], ["", "def", "dropout", "(", "x", ",", "pkeep", ",", "phase", "=", "None", ",", "mask", "=", "None", ")", ":", "\n", "    ", "mask", "=", "tf", ".", "floor", "(", "pkeep", "+", "tf", ".", "random_uniform", "(", "tf", ".", "shape", "(", "x", ")", ")", ")", "if", "mask", "is", "None", "else", "mask", "\n", "if", "phase", "is", "None", ":", "\n", "        ", "return", "mask", "*", "x", "\n", "", "else", ":", "\n", "        ", "return", "switch", "(", "phase", ",", "mask", "*", "x", ",", "pkeep", "*", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.function": [[372, 411], ["isinstance", "tf_util._Function", "isinstance", "tf_util._Function", "tf_util._Function", "outputs.values", "type", "zip", "_Function.", "outputs.keys", "_Function."], "function", ["None"], ["", "", "def", "function", "(", "inputs", ",", "outputs", ",", "updates", "=", "None", ",", "givens", "=", "None", ")", ":", "\n", "    ", "\"\"\"Just like Theano function. Take a bunch of tensorflow placeholders and expressions\n    computed based on those placeholders and produces f(inputs) -> outputs. Function f takes\n    values to be fed to the input's placeholders and produces the values of the expressions\n    in outputs.\n\n    Input values can be passed in the same order as inputs or can be provided as kwargs based\n    on placeholder name (passed to constructor or accessible via placeholder.op.name).\n\n    Example:\n        x = tf.placeholder(tf.int32, (), name=\"x\")\n        y = tf.placeholder(tf.int32, (), name=\"y\")\n        z = 3 * x + 2 * y\n        lin = function([x, y], z, givens={y: 0})\n\n        with single_threaded_session():\n            initialize()\n\n            assert lin(2) == 6\n            assert lin(x=3) == 9\n            assert lin(2, 2) == 10\n            assert lin(x=2, y=3) == 12\n\n    Parameters\n    ----------\n    inputs: [tf.placeholder or TfInput]\n        list of input arguments\n    outputs: [tf.Variable] or tf.Variable\n        list of outputs or a single output to be returned from function. Returned\n        value will also have the same shape.\n    \"\"\"", "\n", "if", "isinstance", "(", "outputs", ",", "list", ")", ":", "\n", "        ", "return", "_Function", "(", "inputs", ",", "outputs", ",", "updates", ",", "givens", "=", "givens", ")", "\n", "", "elif", "isinstance", "(", "outputs", ",", "(", "dict", ",", "collections", ".", "OrderedDict", ")", ")", ":", "\n", "        ", "f", "=", "_Function", "(", "inputs", ",", "outputs", ".", "values", "(", ")", ",", "updates", ",", "givens", "=", "givens", ")", "\n", "return", "lambda", "*", "args", ",", "**", "kwargs", ":", "type", "(", "outputs", ")", "(", "zip", "(", "outputs", ".", "keys", "(", ")", ",", "f", "(", "*", "args", ",", "**", "kwargs", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "f", "=", "_Function", "(", "inputs", ",", "[", "outputs", "]", ",", "updates", ",", "givens", "=", "givens", ")", "\n", "return", "lambda", "*", "args", ",", "**", "kwargs", ":", "f", "(", "*", "args", ",", "**", "kwargs", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.mem_friendly_function": [[460, 466], ["isinstance", "tf_util._MemFriendlyFunction", "tf_util._MemFriendlyFunction", "_MemFriendlyFunction."], "function", ["None"], ["", "", "def", "mem_friendly_function", "(", "nondata_inputs", ",", "data_inputs", ",", "outputs", ",", "batch_size", ")", ":", "\n", "    ", "if", "isinstance", "(", "outputs", ",", "list", ")", ":", "\n", "        ", "return", "_MemFriendlyFunction", "(", "nondata_inputs", ",", "data_inputs", ",", "outputs", ",", "batch_size", ")", "\n", "", "else", ":", "\n", "        ", "f", "=", "_MemFriendlyFunction", "(", "nondata_inputs", ",", "data_inputs", ",", "[", "outputs", "]", ",", "batch_size", ")", "\n", "return", "lambda", "*", "inputs", ":", "f", "(", "*", "inputs", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.module": [[540, 548], ["WrapperModule", "f"], "function", ["None"], ["", "", "def", "module", "(", "name", ")", ":", "\n", "    ", "@", "functools", ".", "wraps", "\n", "def", "wrapper", "(", "f", ")", ":", "\n", "        ", "class", "WrapperModule", "(", "Module", ")", ":", "\n", "            ", "def", "_call", "(", "self", ",", "*", "args", ")", ":", "\n", "                ", "return", "f", "(", "*", "args", ")", "\n", "", "", "return", "WrapperModule", "(", "name", ")", "\n", "", "return", "wrapper", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.get_parents": [[557, 559], ["None"], "function", ["None"], ["def", "get_parents", "(", "node", ")", ":", "\n", "    ", "return", "node", ".", "op", ".", "inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.topsorted": [[561, 596], ["isinstance", "stack.append", "stack.pop", "tf_util.get_parents", "marks.get", "len", "out.append", "stack.append", "stack.append", "ValueError"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.get_parents", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.Uint8Input.get", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append"], ["", "def", "topsorted", "(", "outputs", ")", ":", "\n", "    ", "\"\"\"\n    Topological sort via non-recursive depth-first search\n    \"\"\"", "\n", "assert", "isinstance", "(", "outputs", ",", "(", "list", ",", "tuple", ")", ")", "\n", "marks", "=", "{", "}", "\n", "out", "=", "[", "]", "\n", "stack", "=", "[", "]", "# pylint: disable=W0621", "\n", "# i: node", "\n", "# jidx = number of children visited so far from that node", "\n", "# marks: state of each node, which is one of", "\n", "#   0: haven't visited", "\n", "#   1: have visited, but not done visiting children", "\n", "#   2: done visiting children", "\n", "for", "x", "in", "outputs", ":", "\n", "        ", "stack", ".", "append", "(", "(", "x", ",", "0", ")", ")", "\n", "while", "stack", ":", "\n", "            ", "(", "i", ",", "jidx", ")", "=", "stack", ".", "pop", "(", ")", "\n", "if", "jidx", "==", "0", ":", "\n", "                ", "m", "=", "marks", ".", "get", "(", "i", ",", "0", ")", "\n", "if", "m", "==", "0", ":", "\n", "                    ", "marks", "[", "i", "]", "=", "1", "\n", "", "elif", "m", "==", "1", ":", "\n", "                    ", "raise", "ValueError", "(", "\"not a dag\"", ")", "\n", "", "else", ":", "\n", "                    ", "continue", "\n", "", "", "ps", "=", "get_parents", "(", "i", ")", "\n", "if", "jidx", "==", "len", "(", "ps", ")", ":", "\n", "                ", "marks", "[", "i", "]", "=", "2", "\n", "out", ".", "append", "(", "i", ")", "\n", "", "else", ":", "\n", "                ", "stack", ".", "append", "(", "(", "i", ",", "jidx", "+", "1", ")", ")", "\n", "j", "=", "ps", "[", "jidx", "]", "\n", "stack", ".", "append", "(", "(", "j", ",", "0", ")", ")", "\n", "", "", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.var_shape": [[602, 607], ["x.get_shape().as_list", "all", "x.get_shape", "isinstance"], "function", ["None"], ["", "def", "var_shape", "(", "x", ")", ":", "\n", "    ", "out", "=", "x", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "assert", "all", "(", "isinstance", "(", "a", ",", "int", ")", "for", "a", "in", "out", ")", ",", "\"shape function assumes that shape is fully known\"", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.numel": [[609, 611], ["tf_util.intprod", "tf_util.var_shape"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.intprod", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.var_shape"], ["", "def", "numel", "(", "x", ")", ":", "\n", "    ", "return", "intprod", "(", "var_shape", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.intprod": [[613, 615], ["int", "numpy.prod"], "function", ["None"], ["", "def", "intprod", "(", "x", ")", ":", "\n", "    ", "return", "int", "(", "np", ".", "prod", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.flatgrad": [[617, 624], ["tensorflow.gradients", "tensorflow.concat", "tensorflow.clip_by_norm", "tensorflow.reshape", "zip", "tensorflow.zeros_like", "tf_util.numel"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.numel"], ["", "def", "flatgrad", "(", "loss", ",", "var_list", ",", "clip_norm", "=", "None", ")", ":", "\n", "    ", "grads", "=", "tf", ".", "gradients", "(", "loss", ",", "var_list", ")", "\n", "if", "clip_norm", "is", "not", "None", ":", "\n", "        ", "grads", "=", "[", "tf", ".", "clip_by_norm", "(", "grad", ",", "clip_norm", "=", "clip_norm", ")", "for", "grad", "in", "grads", "]", "\n", "", "return", "tf", ".", "concat", "(", "axis", "=", "0", ",", "values", "=", "[", "\n", "tf", ".", "reshape", "(", "grad", "if", "grad", "is", "not", "None", "else", "tf", ".", "zeros_like", "(", "v", ")", ",", "[", "numel", "(", "v", ")", "]", ")", "\n", "for", "(", "v", ",", "grad", ")", "in", "zip", "(", "var_list", ",", "grads", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.fancy_slice_2d": [[658, 669], ["tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "tensorflow.reshape", "tensorflow.gather", "tensorflow.shape"], "function", ["None"], ["", "", "def", "fancy_slice_2d", "(", "X", ",", "inds0", ",", "inds1", ")", ":", "\n", "    ", "\"\"\"\n    like numpy X[inds0, inds1]\n    XXX this implementation is bad\n    \"\"\"", "\n", "inds0", "=", "tf", ".", "cast", "(", "inds0", ",", "tf", ".", "int64", ")", "\n", "inds1", "=", "tf", ".", "cast", "(", "inds1", ",", "tf", ".", "int64", ")", "\n", "shape", "=", "tf", ".", "cast", "(", "tf", ".", "shape", "(", "X", ")", ",", "tf", ".", "int64", ")", "\n", "ncols", "=", "shape", "[", "1", "]", "\n", "Xflat", "=", "tf", ".", "reshape", "(", "X", ",", "[", "-", "1", "]", ")", "\n", "return", "tf", ".", "gather", "(", "Xflat", ",", "inds0", "*", "ncols", "+", "inds1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.scope_vars": [[676, 696], ["tensorflow.get_collection", "isinstance"], "function", ["None"], ["", "def", "scope_vars", "(", "scope", ",", "trainable_only", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Get variables inside a scope\n    The scope can be specified as a string\n\n    Parameters\n    ----------\n    scope: str or VariableScope\n        scope in which the variables reside.\n    trainable_only: bool\n        whether or not to return only the variables that were marked as trainable.\n\n    Returns\n    -------\n    vars: [tf.Variable]\n        list of variables in `scope`.\n    \"\"\"", "\n", "return", "tf", ".", "get_collection", "(", "\n", "tf", ".", "GraphKeys", ".", "TRAINABLE_VARIABLES", "if", "trainable_only", "else", "tf", ".", "GraphKeys", ".", "GLOBAL_VARIABLES", ",", "\n", "scope", "=", "scope", "if", "isinstance", "(", "scope", ",", "str", ")", "else", "scope", ".", "name", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.scope_name": [[699, 702], ["tensorflow.get_variable_scope"], "function", ["None"], ["", "def", "scope_name", "(", ")", ":", "\n", "    ", "\"\"\"Returns the name of current scope as a string, e.g. deepq/q_func\"\"\"", "\n", "return", "tf", ".", "get_variable_scope", "(", ")", ".", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.absolute_scope_name": [[704, 707], ["tf_util.scope_name"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.scope_name"], ["", "def", "absolute_scope_name", "(", "relative_scope_name", ")", ":", "\n", "    ", "\"\"\"Appends parent scope name to `relative_scope_name`\"\"\"", "\n", "return", "scope_name", "(", ")", "+", "\"/\"", "+", "relative_scope_name", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.lengths_to_mask": [[709, 725], ["tensorflow.convert_to_tensor", "tensorflow.expand_dims", "tensorflow.expand_dims", "tf.convert_to_tensor.get_shape", "tensorflow.range"], "function", ["None"], ["", "def", "lengths_to_mask", "(", "lengths_b", ",", "max_length", ")", ":", "\n", "    ", "\"\"\"\n    Turns a vector of lengths into a boolean mask\n\n    Args:\n        lengths_b: an integer vector of lengths\n        max_length: maximum length to fill the mask\n\n    Returns:\n        a boolean array of shape (batch_size, max_length)\n        row[i] consists of True repeated lengths_b[i] times, followed by False\n    \"\"\"", "\n", "lengths_b", "=", "tf", ".", "convert_to_tensor", "(", "lengths_b", ")", "\n", "assert", "lengths_b", ".", "get_shape", "(", ")", ".", "ndims", "==", "1", "\n", "mask_bt", "=", "tf", ".", "expand_dims", "(", "tf", ".", "range", "(", "max_length", ")", ",", "0", ")", "<", "tf", ".", "expand_dims", "(", "lengths_b", ",", "1", ")", "\n", "return", "mask_bt", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.in_session": [[727, 733], ["functools.wraps", "tensorflow.Session", "f"], "function", ["None"], ["", "def", "in_session", "(", "f", ")", ":", "\n", "    ", "@", "functools", ".", "wraps", "(", "f", ")", "\n", "def", "newfunc", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "with", "tf", ".", "Session", "(", ")", ":", "\n", "            ", "f", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "", "", "return", "newfunc", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.get_placeholder": [[738, 747], ["tensorflow.placeholder"], "function", ["None"], ["def", "get_placeholder", "(", "name", ",", "dtype", ",", "shape", ")", ":", "\n", "    ", "if", "name", "in", "_PLACEHOLDER_CACHE", ":", "\n", "        ", "out", ",", "dtype1", ",", "shape1", "=", "_PLACEHOLDER_CACHE", "[", "name", "]", "\n", "assert", "dtype1", "==", "dtype", "and", "shape1", "==", "shape", "\n", "return", "out", "\n", "", "else", ":", "\n", "        ", "out", "=", "tf", ".", "placeholder", "(", "dtype", "=", "dtype", ",", "shape", "=", "shape", ",", "name", "=", "name", ")", "\n", "_PLACEHOLDER_CACHE", "[", "name", "]", "=", "(", "out", ",", "dtype", ",", "shape", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.get_placeholder_cached": [[749, 751], ["None"], "function", ["None"], ["", "", "def", "get_placeholder_cached", "(", "name", ")", ":", "\n", "    ", "return", "_PLACEHOLDER_CACHE", "[", "name", "]", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.flattenallbut0": [[753, 755], ["tensorflow.reshape", "tf_util.intprod", "x.get_shape().as_list", "x.get_shape"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.intprod"], ["", "def", "flattenallbut0", "(", "x", ")", ":", "\n", "    ", "return", "tf", ".", "reshape", "(", "x", ",", "[", "-", "1", ",", "intprod", "(", "x", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", ":", "]", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.reset": [[757, 763], ["tensorflow.reset_default_graph"], "function", ["None"], ["", "def", "reset", "(", ")", ":", "\n", "    ", "global", "_PLACEHOLDER_CACHE", "\n", "global", "VARIABLES", "\n", "_PLACEHOLDER_CACHE", "=", "{", "}", "\n", "VARIABLES", "=", "{", "}", "\n", "tf", ".", "reset_default_graph", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.cg.cg": [[2, 35], ["b.copy", "b.copy", "numpy.zeros_like", "b.copy.dot", "range", "print", "f_Ax", "b.copy.dot", "callback", "print", "callback", "print", "b.copy.dot", "numpy.linalg.norm", "numpy.linalg.norm"], "function", ["None"], ["def", "cg", "(", "f_Ax", ",", "b", ",", "cg_iters", "=", "10", ",", "callback", "=", "None", ",", "verbose", "=", "False", ",", "residual_tol", "=", "1e-10", ")", ":", "\n", "    ", "\"\"\"\n    Demmel p 312\n    \"\"\"", "\n", "p", "=", "b", ".", "copy", "(", ")", "\n", "r", "=", "b", ".", "copy", "(", ")", "\n", "x", "=", "np", ".", "zeros_like", "(", "b", ")", "\n", "rdotr", "=", "r", ".", "dot", "(", "r", ")", "\n", "\n", "fmtstr", "=", "\"%10i %10.3g %10.3g\"", "\n", "titlestr", "=", "\"%10s %10s %10s\"", "\n", "if", "verbose", ":", "print", "(", "titlestr", "%", "(", "\"iter\"", ",", "\"residual norm\"", ",", "\"soln norm\"", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "cg_iters", ")", ":", "\n", "        ", "if", "callback", "is", "not", "None", ":", "\n", "            ", "callback", "(", "x", ")", "\n", "", "if", "verbose", ":", "print", "(", "fmtstr", "%", "(", "i", ",", "rdotr", ",", "np", ".", "linalg", ".", "norm", "(", "x", ")", ")", ")", "\n", "z", "=", "f_Ax", "(", "p", ")", "\n", "v", "=", "rdotr", "/", "p", ".", "dot", "(", "z", ")", "\n", "x", "+=", "v", "*", "p", "\n", "r", "-=", "v", "*", "z", "\n", "newrdotr", "=", "r", ".", "dot", "(", "r", ")", "\n", "mu", "=", "newrdotr", "/", "rdotr", "\n", "p", "=", "r", "+", "mu", "*", "p", "\n", "\n", "rdotr", "=", "newrdotr", "\n", "if", "rdotr", "<", "residual_tol", ":", "\n", "            ", "break", "\n", "\n", "", "", "if", "callback", "is", "not", "None", ":", "\n", "        ", "callback", "(", "x", ")", "\n", "", "if", "verbose", ":", "print", "(", "fmtstr", "%", "(", "i", "+", "1", ",", "rdotr", ",", "np", ".", "linalg", ".", "norm", "(", "x", ")", ")", ")", "# pylint: disable=W0631", "\n", "return", "x", "", "", ""]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.atari_wrappers.NoopResetEnv.__init__": [[9, 17], ["gym.Wrapper.__init__", "env.unwrapped.get_action_meanings"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.subproc_vec_env.SubprocVecEnv.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ",", "noop_max", "=", "30", ")", ":", "\n", "        ", "\"\"\"Sample initial states by taking random number of no-ops on reset.\n        No-op is assumed to be action 0.\n        \"\"\"", "\n", "gym", ".", "Wrapper", ".", "__init__", "(", "self", ",", "env", ")", "\n", "self", ".", "noop_max", "=", "noop_max", "\n", "self", ".", "override_num_noops", "=", "None", "\n", "assert", "env", ".", "unwrapped", ".", "get_action_meanings", "(", ")", "[", "0", "]", "==", "'NOOP'", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.atari_wrappers.NoopResetEnv._reset": [[18, 32], ["atari_wrappers.NoopResetEnv.env.reset", "range", "atari_wrappers.NoopResetEnv.unwrapped.np_random.randint", "atari_wrappers.NoopResetEnv.env.step", "atari_wrappers.NoopResetEnv.env.reset"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.__init__.VecEnv.step", "home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.__init__.VecEnv.reset"], ["", "def", "_reset", "(", "self", ")", ":", "\n", "        ", "\"\"\" Do no-op action for a number of steps in [1, noop_max].\"\"\"", "\n", "self", ".", "env", ".", "reset", "(", ")", "\n", "if", "self", ".", "override_num_noops", "is", "not", "None", ":", "\n", "            ", "noops", "=", "self", ".", "override_num_noops", "\n", "", "else", ":", "\n", "            ", "noops", "=", "self", ".", "unwrapped", ".", "np_random", ".", "randint", "(", "1", ",", "self", ".", "noop_max", "+", "1", ")", "#pylint: disable=E1101", "\n", "", "assert", "noops", ">", "0", "\n", "obs", "=", "None", "\n", "for", "_", "in", "range", "(", "noops", ")", ":", "\n", "            ", "obs", ",", "_", ",", "done", ",", "_", "=", "self", ".", "env", ".", "step", "(", "0", ")", "\n", "if", "done", ":", "\n", "                ", "obs", "=", "self", ".", "env", ".", "reset", "(", ")", "\n", "", "", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.atari_wrappers.FireResetEnv.__init__": [[34, 39], ["gym.Wrapper.__init__", "len", "env.unwrapped.get_action_meanings", "env.unwrapped.get_action_meanings"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.subproc_vec_env.SubprocVecEnv.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ")", ":", "\n", "        ", "\"\"\"Take action on reset for environments that are fixed until firing.\"\"\"", "\n", "gym", ".", "Wrapper", ".", "__init__", "(", "self", ",", "env", ")", "\n", "assert", "env", ".", "unwrapped", ".", "get_action_meanings", "(", ")", "[", "1", "]", "==", "'FIRE'", "\n", "assert", "len", "(", "env", ".", "unwrapped", ".", "get_action_meanings", "(", ")", ")", ">=", "3", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.atari_wrappers.FireResetEnv._reset": [[40, 49], ["atari_wrappers.FireResetEnv.env.reset", "atari_wrappers.FireResetEnv.env.step", "atari_wrappers.FireResetEnv.env.step", "atari_wrappers.FireResetEnv.env.reset", "atari_wrappers.FireResetEnv.env.reset"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.__init__.VecEnv.step", "home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.__init__.VecEnv.step", "home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.__init__.VecEnv.reset"], ["", "def", "_reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "env", ".", "reset", "(", ")", "\n", "obs", ",", "_", ",", "done", ",", "_", "=", "self", ".", "env", ".", "step", "(", "1", ")", "\n", "if", "done", ":", "\n", "            ", "self", ".", "env", ".", "reset", "(", ")", "\n", "", "obs", ",", "_", ",", "done", ",", "_", "=", "self", ".", "env", ".", "step", "(", "2", ")", "\n", "if", "done", ":", "\n", "            ", "self", ".", "env", ".", "reset", "(", ")", "\n", "", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.atari_wrappers.EpisodicLifeEnv.__init__": [[51, 58], ["gym.Wrapper.__init__"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.subproc_vec_env.SubprocVecEnv.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ")", ":", "\n", "        ", "\"\"\"Make end-of-life == end-of-episode, but only reset on true game over.\n        Done by DeepMind for the DQN and co. since it helps value estimation.\n        \"\"\"", "\n", "gym", ".", "Wrapper", ".", "__init__", "(", "self", ",", "env", ")", "\n", "self", ".", "lives", "=", "0", "\n", "self", ".", "was_real_done", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.atari_wrappers.EpisodicLifeEnv._step": [[59, 72], ["atari_wrappers.EpisodicLifeEnv.env.step", "atari_wrappers.EpisodicLifeEnv.env.unwrapped.ale.lives"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.__init__.VecEnv.step"], ["", "def", "_step", "(", "self", ",", "action", ")", ":", "\n", "        ", "obs", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "self", ".", "was_real_done", "=", "done", "\n", "# check current lives, make loss of life terminal,", "\n", "# then update lives to handle bonus lives", "\n", "lives", "=", "self", ".", "env", ".", "unwrapped", ".", "ale", ".", "lives", "(", ")", "\n", "if", "lives", "<", "self", ".", "lives", "and", "lives", ">", "0", ":", "\n", "# for Qbert somtimes we stay in lives == 0 condtion for a few frames", "\n", "# so its important to keep lives > 0, so that we only reset once", "\n", "# the environment advertises done.", "\n", "            ", "done", "=", "True", "\n", "", "self", ".", "lives", "=", "lives", "\n", "return", "obs", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.atari_wrappers.EpisodicLifeEnv._reset": [[73, 85], ["atari_wrappers.EpisodicLifeEnv.env.unwrapped.ale.lives", "atari_wrappers.EpisodicLifeEnv.env.reset", "atari_wrappers.EpisodicLifeEnv.env.step"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.__init__.VecEnv.step"], ["", "def", "_reset", "(", "self", ")", ":", "\n", "        ", "\"\"\"Reset only when lives are exhausted.\n        This way all states are still reachable even though lives are episodic,\n        and the learner need not know about any of this behind-the-scenes.\n        \"\"\"", "\n", "if", "self", ".", "was_real_done", ":", "\n", "            ", "obs", "=", "self", ".", "env", ".", "reset", "(", ")", "\n", "", "else", ":", "\n", "# no-op step to advance from terminal/lost life state", "\n", "            ", "obs", ",", "_", ",", "_", ",", "_", "=", "self", ".", "env", ".", "step", "(", "0", ")", "\n", "", "self", ".", "lives", "=", "self", ".", "env", ".", "unwrapped", ".", "ale", ".", "lives", "(", ")", "\n", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.atari_wrappers.MaxAndSkipEnv.__init__": [[87, 93], ["gym.Wrapper.__init__", "collections.deque"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.subproc_vec_env.SubprocVecEnv.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ",", "skip", "=", "4", ")", ":", "\n", "        ", "\"\"\"Return only every `skip`-th frame\"\"\"", "\n", "gym", ".", "Wrapper", ".", "__init__", "(", "self", ",", "env", ")", "\n", "# most recent raw observations (for max pooling across time steps)", "\n", "self", ".", "_obs_buffer", "=", "deque", "(", "maxlen", "=", "2", ")", "\n", "self", ".", "_skip", "=", "skip", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.atari_wrappers.MaxAndSkipEnv._step": [[94, 107], ["range", "numpy.max", "atari_wrappers.MaxAndSkipEnv.env.step", "atari_wrappers.MaxAndSkipEnv._obs_buffer.append", "numpy.stack"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.max", "home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.__init__.VecEnv.step", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append"], ["", "def", "_step", "(", "self", ",", "action", ")", ":", "\n", "        ", "\"\"\"Repeat action, sum reward, and max over last observations.\"\"\"", "\n", "total_reward", "=", "0.0", "\n", "done", "=", "None", "\n", "for", "_", "in", "range", "(", "self", ".", "_skip", ")", ":", "\n", "            ", "obs", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "self", ".", "_obs_buffer", ".", "append", "(", "obs", ")", "\n", "total_reward", "+=", "reward", "\n", "if", "done", ":", "\n", "                ", "break", "\n", "", "", "max_frame", "=", "np", ".", "max", "(", "np", ".", "stack", "(", "self", ".", "_obs_buffer", ")", ",", "axis", "=", "0", ")", "\n", "\n", "return", "max_frame", ",", "total_reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.atari_wrappers.MaxAndSkipEnv._reset": [[108, 114], ["atari_wrappers.MaxAndSkipEnv._obs_buffer.clear", "atari_wrappers.MaxAndSkipEnv.env.reset", "atari_wrappers.MaxAndSkipEnv._obs_buffer.append"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append"], ["", "def", "_reset", "(", "self", ")", ":", "\n", "        ", "\"\"\"Clear past frame buffer and init. to first obs. from inner env.\"\"\"", "\n", "self", ".", "_obs_buffer", ".", "clear", "(", ")", "\n", "obs", "=", "self", ".", "env", ".", "reset", "(", ")", "\n", "self", ".", "_obs_buffer", ".", "append", "(", "obs", ")", "\n", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.atari_wrappers.ClipRewardEnv._reward": [[116, 119], ["numpy.sign"], "methods", ["None"], ["    ", "def", "_reward", "(", "self", ",", "reward", ")", ":", "\n", "        ", "\"\"\"Bin reward to {+1, 0, -1} by its sign.\"\"\"", "\n", "return", "np", ".", "sign", "(", "reward", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.atari_wrappers.WarpFrame.__init__": [[121, 126], ["gym.ObservationWrapper.__init__", "gym.spaces.Box"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.subproc_vec_env.SubprocVecEnv.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ")", ":", "\n", "        ", "\"\"\"Warp frames to 84x84 as done in the Nature paper and later work.\"\"\"", "\n", "gym", ".", "ObservationWrapper", ".", "__init__", "(", "self", ",", "env", ")", "\n", "self", ".", "res", "=", "84", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Box", "(", "low", "=", "0", ",", "high", "=", "255", ",", "shape", "=", "(", "self", ".", "res", ",", "self", ".", "res", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.atari_wrappers.WarpFrame._observation": [[127, 132], ["numpy.dot", "numpy.array", "numpy.array.reshape", "obs.astype", "numpy.array", "PIL.Image.fromarray().resize", "PIL.Image.fromarray"], "methods", ["None"], ["", "def", "_observation", "(", "self", ",", "obs", ")", ":", "\n", "        ", "frame", "=", "np", ".", "dot", "(", "obs", ".", "astype", "(", "'float32'", ")", ",", "np", ".", "array", "(", "[", "0.299", ",", "0.587", ",", "0.114", "]", ",", "'float32'", ")", ")", "\n", "frame", "=", "np", ".", "array", "(", "Image", ".", "fromarray", "(", "frame", ")", ".", "resize", "(", "(", "self", ".", "res", ",", "self", ".", "res", ")", ",", "\n", "resample", "=", "Image", ".", "BILINEAR", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "return", "frame", ".", "reshape", "(", "(", "self", ".", "res", ",", "self", ".", "res", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.atari_wrappers.FrameStack.__init__": [[134, 142], ["gym.Wrapper.__init__", "collections.deque", "gym.spaces.Box"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.subproc_vec_env.SubprocVecEnv.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ",", "k", ")", ":", "\n", "        ", "\"\"\"Buffer observations and stack across channels (last axis).\"\"\"", "\n", "gym", ".", "Wrapper", ".", "__init__", "(", "self", ",", "env", ")", "\n", "self", ".", "k", "=", "k", "\n", "self", ".", "frames", "=", "deque", "(", "[", "]", ",", "maxlen", "=", "k", ")", "\n", "shp", "=", "env", ".", "observation_space", ".", "shape", "\n", "assert", "shp", "[", "2", "]", "==", "1", "# can only stack 1-channel frames", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Box", "(", "low", "=", "0", ",", "high", "=", "255", ",", "shape", "=", "(", "shp", "[", "0", "]", ",", "shp", "[", "1", "]", ",", "k", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.atari_wrappers.FrameStack._reset": [[143, 148], ["atari_wrappers.FrameStack.env.reset", "range", "atari_wrappers.FrameStack._observation", "atari_wrappers.FrameStack.frames.append"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.flowersteam_geppg.common.atari_wrappers.FrameStack._observation", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append"], ["", "def", "_reset", "(", "self", ")", ":", "\n", "        ", "\"\"\"Clear buffer and re-fill by duplicating the first observation.\"\"\"", "\n", "ob", "=", "self", ".", "env", ".", "reset", "(", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "k", ")", ":", "self", ".", "frames", ".", "append", "(", "ob", ")", "\n", "return", "self", ".", "_observation", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.atari_wrappers.FrameStack._step": [[149, 153], ["atari_wrappers.FrameStack.env.step", "atari_wrappers.FrameStack.frames.append", "atari_wrappers.FrameStack._observation"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.__init__.VecEnv.step", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.common.atari_wrappers.FrameStack._observation"], ["", "def", "_step", "(", "self", ",", "action", ")", ":", "\n", "        ", "ob", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "self", ".", "frames", ".", "append", "(", "ob", ")", "\n", "return", "self", ".", "_observation", "(", ")", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.atari_wrappers.FrameStack._observation": [[154, 157], ["numpy.concatenate", "len"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.concatenate"], ["", "def", "_observation", "(", "self", ")", ":", "\n", "        ", "assert", "len", "(", "self", ".", "frames", ")", "==", "self", ".", "k", "\n", "return", "np", ".", "concatenate", "(", "self", ".", "frames", ",", "axis", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.atari_wrappers.wrap_deepmind": [[158, 173], ["atari_wrappers.NoopResetEnv", "atari_wrappers.MaxAndSkipEnv", "atari_wrappers.WarpFrame", "atari_wrappers.EpisodicLifeEnv", "ClipRewardEnv.unwrapped.get_action_meanings", "atari_wrappers.FireResetEnv", "atari_wrappers.ClipRewardEnv"], "function", ["None"], ["", "", "def", "wrap_deepmind", "(", "env", ",", "episode_life", "=", "True", ",", "clip_rewards", "=", "True", ")", ":", "\n", "    ", "\"\"\"Configure environment for DeepMind-style Atari.\n\n    Note: this does not include frame stacking!\"\"\"", "\n", "assert", "'NoFrameskip'", "in", "env", ".", "spec", ".", "id", "# required for DeepMind-style skip", "\n", "if", "episode_life", ":", "\n", "        ", "env", "=", "EpisodicLifeEnv", "(", "env", ")", "\n", "", "env", "=", "NoopResetEnv", "(", "env", ",", "noop_max", "=", "30", ")", "\n", "env", "=", "MaxAndSkipEnv", "(", "env", ",", "skip", "=", "4", ")", "\n", "if", "'FIRE'", "in", "env", ".", "unwrapped", ".", "get_action_meanings", "(", ")", ":", "\n", "        ", "env", "=", "FireResetEnv", "(", "env", ")", "\n", "", "env", "=", "WarpFrame", "(", "env", ")", "\n", "if", "clip_rewards", ":", "\n", "        ", "env", "=", "ClipRewardEnv", "(", "env", ")", "\n", "", "return", "env", "\n", "", ""]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.mpi_running_mean_std.RunningMeanStd.__init__": [[10, 39], ["tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.to_float", "tensorflow.sqrt", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "DDPG_baseline_v2.function", "tensorflow.maximum", "tensorflow.constant_initializer", "tensorflow.constant_initializer", "tensorflow.constant_initializer", "tensorflow.to_float", "tensorflow.square", "tensorflow.assign_add", "tensorflow.assign_add", "tensorflow.assign_add"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.function"], ["    ", "def", "__init__", "(", "self", ",", "epsilon", "=", "1e-2", ",", "shape", "=", "(", ")", ")", ":", "\n", "\n", "        ", "self", ".", "_sum", "=", "tf", ".", "get_variable", "(", "\n", "dtype", "=", "tf", ".", "float64", ",", "\n", "shape", "=", "shape", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.0", ")", ",", "\n", "name", "=", "\"runningsum\"", ",", "trainable", "=", "False", ")", "\n", "self", ".", "_sumsq", "=", "tf", ".", "get_variable", "(", "\n", "dtype", "=", "tf", ".", "float64", ",", "\n", "shape", "=", "shape", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "epsilon", ")", ",", "\n", "name", "=", "\"runningsumsq\"", ",", "trainable", "=", "False", ")", "\n", "self", ".", "_count", "=", "tf", ".", "get_variable", "(", "\n", "dtype", "=", "tf", ".", "float64", ",", "\n", "shape", "=", "(", ")", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "epsilon", ")", ",", "\n", "name", "=", "\"count\"", ",", "trainable", "=", "False", ")", "\n", "self", ".", "shape", "=", "shape", "\n", "\n", "self", ".", "mean", "=", "tf", ".", "to_float", "(", "self", ".", "_sum", "/", "self", ".", "_count", ")", "\n", "self", ".", "std", "=", "tf", ".", "sqrt", "(", "tf", ".", "maximum", "(", "tf", ".", "to_float", "(", "self", ".", "_sumsq", "/", "self", ".", "_count", ")", "-", "tf", ".", "square", "(", "self", ".", "mean", ")", ",", "1e-2", ")", ")", "\n", "\n", "newsum", "=", "tf", ".", "placeholder", "(", "shape", "=", "self", ".", "shape", ",", "dtype", "=", "tf", ".", "float64", ",", "name", "=", "'sum'", ")", "\n", "newsumsq", "=", "tf", ".", "placeholder", "(", "shape", "=", "self", ".", "shape", ",", "dtype", "=", "tf", ".", "float64", ",", "name", "=", "'var'", ")", "\n", "newcount", "=", "tf", ".", "placeholder", "(", "shape", "=", "[", "]", ",", "dtype", "=", "tf", ".", "float64", ",", "name", "=", "'count'", ")", "\n", "self", ".", "incfiltparams", "=", "U", ".", "function", "(", "[", "newsum", ",", "newsumsq", ",", "newcount", "]", ",", "[", "]", ",", "\n", "updates", "=", "[", "tf", ".", "assign_add", "(", "self", ".", "_sum", ",", "newsum", ")", ",", "\n", "tf", ".", "assign_add", "(", "self", ".", "_sumsq", ",", "newsumsq", ")", ",", "\n", "tf", ".", "assign_add", "(", "self", ".", "_count", ",", "newcount", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.mpi_running_mean_std.RunningMeanStd.update": [[41, 48], ["x.astype.astype.astype", "int", "numpy.zeros", "numpy.concatenate", "mpi4py.MPI.COMM_WORLD.Allreduce", "mpi_running_mean_std.RunningMeanStd.incfiltparams", "numpy.prod", "totalvec[].reshape", "totalvec[].reshape", "x.astype.astype.sum().ravel", "numpy.square().sum().ravel", "numpy.array", "x.astype.astype.sum", "numpy.square().sum", "len", "numpy.square"], "methods", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.concatenate", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.sum", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.sum"], ["", "def", "update", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", ".", "astype", "(", "'float64'", ")", "\n", "n", "=", "int", "(", "np", ".", "prod", "(", "self", ".", "shape", ")", ")", "\n", "totalvec", "=", "np", ".", "zeros", "(", "n", "*", "2", "+", "1", ",", "'float64'", ")", "\n", "addvec", "=", "np", ".", "concatenate", "(", "[", "x", ".", "sum", "(", "axis", "=", "0", ")", ".", "ravel", "(", ")", ",", "np", ".", "square", "(", "x", ")", ".", "sum", "(", "axis", "=", "0", ")", ".", "ravel", "(", ")", ",", "np", ".", "array", "(", "[", "len", "(", "x", ")", "]", ",", "dtype", "=", "'float64'", ")", "]", ")", "\n", "MPI", ".", "COMM_WORLD", ".", "Allreduce", "(", "addvec", ",", "totalvec", ",", "op", "=", "MPI", ".", "SUM", ")", "\n", "self", ".", "incfiltparams", "(", "totalvec", "[", "0", ":", "n", "]", ".", "reshape", "(", "self", ".", "shape", ")", ",", "totalvec", "[", "n", ":", "2", "*", "n", "]", ".", "reshape", "(", "self", ".", "shape", ")", ",", "totalvec", "[", "2", "*", "n", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.mpi_running_mean_std.test_runningmeanstd": [[49, 67], ["mpi_running_mean_std.RunningMeanStd", "DDPG_baseline_v2.initialize", "numpy.concatenate", "mpi_running_mean_std.RunningMeanStd.update", "mpi_running_mean_std.RunningMeanStd.update", "mpi_running_mean_std.RunningMeanStd.update", "DDPG_baseline_v2.eval", "numpy.allclose", "numpy.random.randn", "numpy.random.randn", "numpy.random.randn", "numpy.random.randn", "numpy.random.randn", "numpy.random.randn", "np.concatenate.mean", "np.concatenate.std"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.initialize", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.concatenate", "home.repos.pwc.inspect_result.flowersteam_geppg.common.mpi_running_mean_std.RunningMeanStd.update", "home.repos.pwc.inspect_result.flowersteam_geppg.common.mpi_running_mean_std.RunningMeanStd.update", "home.repos.pwc.inspect_result.flowersteam_geppg.common.mpi_running_mean_std.RunningMeanStd.update", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.eval", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.mean", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.std"], ["", "", "@", "U", ".", "in_session", "\n", "def", "test_runningmeanstd", "(", ")", ":", "\n", "    ", "for", "(", "x1", ",", "x2", ",", "x3", ")", "in", "[", "\n", "(", "np", ".", "random", ".", "randn", "(", "3", ")", ",", "np", ".", "random", ".", "randn", "(", "4", ")", ",", "np", ".", "random", ".", "randn", "(", "5", ")", ")", ",", "\n", "(", "np", ".", "random", ".", "randn", "(", "3", ",", "2", ")", ",", "np", ".", "random", ".", "randn", "(", "4", ",", "2", ")", ",", "np", ".", "random", ".", "randn", "(", "5", ",", "2", ")", ")", ",", "\n", "]", ":", "\n", "\n", "        ", "rms", "=", "RunningMeanStd", "(", "epsilon", "=", "0.0", ",", "shape", "=", "x1", ".", "shape", "[", "1", ":", "]", ")", "\n", "U", ".", "initialize", "(", ")", "\n", "\n", "x", "=", "np", ".", "concatenate", "(", "[", "x1", ",", "x2", ",", "x3", "]", ",", "axis", "=", "0", ")", "\n", "ms1", "=", "[", "x", ".", "mean", "(", "axis", "=", "0", ")", ",", "x", ".", "std", "(", "axis", "=", "0", ")", "]", "\n", "rms", ".", "update", "(", "x1", ")", "\n", "rms", ".", "update", "(", "x2", ")", "\n", "rms", ".", "update", "(", "x3", ")", "\n", "ms2", "=", "U", ".", "eval", "(", "[", "rms", ".", "mean", ",", "rms", ".", "std", "]", ")", "\n", "\n", "assert", "np", ".", "allclose", "(", "ms1", ",", "ms2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.common.mpi_running_mean_std.test_dist": [[68, 106], ["numpy.random.seed", "mpi_running_mean_std.RunningMeanStd", "DDPG_baseline_v2.initialize", "mpi_running_mean_std.RunningMeanStd.update", "mpi_running_mean_std.RunningMeanStd.update", "mpi_running_mean_std.RunningMeanStd.update", "numpy.concatenate", "mpi_running_mean_std.test_dist.checkallclose"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.initialize", "home.repos.pwc.inspect_result.flowersteam_geppg.common.mpi_running_mean_std.RunningMeanStd.update", "home.repos.pwc.inspect_result.flowersteam_geppg.common.mpi_running_mean_std.RunningMeanStd.update", "home.repos.pwc.inspect_result.flowersteam_geppg.common.mpi_running_mean_std.RunningMeanStd.update", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.concatenate"], ["", "", "@", "U", ".", "in_session", "\n", "def", "test_dist", "(", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "0", ")", "\n", "p1", ",", "p2", ",", "p3", "=", "(", "np", ".", "random", ".", "randn", "(", "3", ",", "1", ")", ",", "np", ".", "random", ".", "randn", "(", "4", ",", "1", ")", ",", "np", ".", "random", ".", "randn", "(", "5", ",", "1", ")", ")", "\n", "q1", ",", "q2", ",", "q3", "=", "(", "np", ".", "random", ".", "randn", "(", "6", ",", "1", ")", ",", "np", ".", "random", ".", "randn", "(", "7", ",", "1", ")", ",", "np", ".", "random", ".", "randn", "(", "8", ",", "1", ")", ")", "\n", "\n", "# p1,p2,p3=(np.random.randn(3), np.random.randn(4), np.random.randn(5))", "\n", "# q1,q2,q3=(np.random.randn(6), np.random.randn(7), np.random.randn(8))", "\n", "\n", "comm", "=", "MPI", ".", "COMM_WORLD", "\n", "assert", "comm", ".", "Get_size", "(", ")", "==", "2", "\n", "if", "comm", ".", "Get_rank", "(", ")", "==", "0", ":", "\n", "        ", "x1", ",", "x2", ",", "x3", "=", "p1", ",", "p2", ",", "p3", "\n", "", "elif", "comm", ".", "Get_rank", "(", ")", "==", "1", ":", "\n", "        ", "x1", ",", "x2", ",", "x3", "=", "q1", ",", "q2", ",", "q3", "\n", "", "else", ":", "\n", "        ", "assert", "False", "\n", "\n", "", "rms", "=", "RunningMeanStd", "(", "epsilon", "=", "0.0", ",", "shape", "=", "(", "1", ",", ")", ")", "\n", "U", ".", "initialize", "(", ")", "\n", "\n", "rms", ".", "update", "(", "x1", ")", "\n", "rms", ".", "update", "(", "x2", ")", "\n", "rms", ".", "update", "(", "x3", ")", "\n", "\n", "bigvec", "=", "np", ".", "concatenate", "(", "[", "p1", ",", "p2", ",", "p3", ",", "q1", ",", "q2", ",", "q3", "]", ")", "\n", "\n", "def", "checkallclose", "(", "x", ",", "y", ")", ":", "\n", "        ", "print", "(", "x", ",", "y", ")", "\n", "return", "np", ".", "allclose", "(", "x", ",", "y", ")", "\n", "\n", "", "assert", "checkallclose", "(", "\n", "bigvec", ".", "mean", "(", "axis", "=", "0", ")", ",", "\n", "U", ".", "eval", "(", "rms", ".", "mean", ")", "\n", ")", "\n", "assert", "checkallclose", "(", "\n", "bigvec", ".", "std", "(", "axis", "=", "0", ")", ",", "\n", "U", ".", "eval", "(", "rms", ".", "std", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.tests.test_schedules.test_piecewise_schedule": [[6, 21], ["baselines.common.schedules.PiecewiseSchedule", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "baselines.common.schedules.PiecewiseSchedule.value", "baselines.common.schedules.PiecewiseSchedule.value", "baselines.common.schedules.PiecewiseSchedule.value", "baselines.common.schedules.PiecewiseSchedule.value", "baselines.common.schedules.PiecewiseSchedule.value", "baselines.common.schedules.PiecewiseSchedule.value", "baselines.common.schedules.PiecewiseSchedule.value", "baselines.common.schedules.PiecewiseSchedule.value", "baselines.common.schedules.PiecewiseSchedule.value", "baselines.common.schedules.PiecewiseSchedule.value", "baselines.common.schedules.PiecewiseSchedule.value"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.schedules.LinearSchedule.value", "home.repos.pwc.inspect_result.flowersteam_geppg.common.schedules.LinearSchedule.value", "home.repos.pwc.inspect_result.flowersteam_geppg.common.schedules.LinearSchedule.value", "home.repos.pwc.inspect_result.flowersteam_geppg.common.schedules.LinearSchedule.value", "home.repos.pwc.inspect_result.flowersteam_geppg.common.schedules.LinearSchedule.value", "home.repos.pwc.inspect_result.flowersteam_geppg.common.schedules.LinearSchedule.value", "home.repos.pwc.inspect_result.flowersteam_geppg.common.schedules.LinearSchedule.value", "home.repos.pwc.inspect_result.flowersteam_geppg.common.schedules.LinearSchedule.value", "home.repos.pwc.inspect_result.flowersteam_geppg.common.schedules.LinearSchedule.value", "home.repos.pwc.inspect_result.flowersteam_geppg.common.schedules.LinearSchedule.value", "home.repos.pwc.inspect_result.flowersteam_geppg.common.schedules.LinearSchedule.value"], ["def", "test_piecewise_schedule", "(", ")", ":", "\n", "    ", "ps", "=", "PiecewiseSchedule", "(", "[", "(", "-", "5", ",", "100", ")", ",", "(", "5", ",", "200", ")", ",", "(", "10", ",", "50", ")", ",", "(", "100", ",", "50", ")", ",", "(", "200", ",", "-", "50", ")", "]", ",", "outside_value", "=", "500", ")", "\n", "\n", "assert", "np", ".", "isclose", "(", "ps", ".", "value", "(", "-", "10", ")", ",", "500", ")", "\n", "assert", "np", ".", "isclose", "(", "ps", ".", "value", "(", "0", ")", ",", "150", ")", "\n", "assert", "np", ".", "isclose", "(", "ps", ".", "value", "(", "5", ")", ",", "200", ")", "\n", "assert", "np", ".", "isclose", "(", "ps", ".", "value", "(", "9", ")", ",", "80", ")", "\n", "assert", "np", ".", "isclose", "(", "ps", ".", "value", "(", "50", ")", ",", "50", ")", "\n", "assert", "np", ".", "isclose", "(", "ps", ".", "value", "(", "80", ")", ",", "50", ")", "\n", "assert", "np", ".", "isclose", "(", "ps", ".", "value", "(", "150", ")", ",", "0", ")", "\n", "assert", "np", ".", "isclose", "(", "ps", ".", "value", "(", "175", ")", ",", "-", "25", ")", "\n", "assert", "np", ".", "isclose", "(", "ps", ".", "value", "(", "201", ")", ",", "500", ")", "\n", "assert", "np", ".", "isclose", "(", "ps", ".", "value", "(", "500", ")", ",", "500", ")", "\n", "\n", "assert", "np", ".", "isclose", "(", "ps", ".", "value", "(", "200", "-", "1e-10", ")", ",", "-", "50", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.tests.test_schedules.test_constant_schedule": [[23, 27], ["baselines.common.schedules.ConstantSchedule", "range", "numpy.isclose", "baselines.common.schedules.ConstantSchedule.value"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.schedules.LinearSchedule.value"], ["", "def", "test_constant_schedule", "(", ")", ":", "\n", "    ", "cs", "=", "ConstantSchedule", "(", "5", ")", "\n", "for", "i", "in", "range", "(", "-", "100", ",", "100", ")", ":", "\n", "        ", "assert", "np", ".", "isclose", "(", "cs", ".", "value", "(", "i", ")", ",", "5", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.flowersteam_geppg.tests.test_tf_util.test_set_value": [[11, 28], ["tensorflow.Variable", "baselines.common.tf_util.single_threaded_session", "baselines.common.tf_util.set_value", "tensorflow.get_default_graph", "tf.get_default_graph.finalize", "baselines.common.tf_util.set_value", "tf.Variable.eval", "tf.Variable.eval", "tf.Variable.eval"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.single_threaded_session", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.set_value", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.set_value", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.eval", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.eval", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.eval"], ["def", "test_set_value", "(", ")", ":", "\n", "    ", "a", "=", "tf", ".", "Variable", "(", "42.", ")", "\n", "with", "single_threaded_session", "(", ")", ":", "\n", "        ", "set_value", "(", "a", ",", "5", ")", "\n", "assert", "a", ".", "eval", "(", ")", "==", "5", "\n", "g", "=", "tf", ".", "get_default_graph", "(", ")", "\n", "g", ".", "finalize", "(", ")", "\n", "set_value", "(", "a", ",", "6", ")", "\n", "assert", "a", ".", "eval", "(", ")", "==", "6", "\n", "\n", "# test the test", "\n", "try", ":", "\n", "            ", "assert", "a", ".", "eval", "(", ")", "==", "7", "\n", "", "except", "AssertionError", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "assert", "False", ",", "\"assertion should have failed\"", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.tests.test_tf_util.test_function": [[30, 44], ["tensorflow.reset_default_graph", "tensorflow.placeholder", "tensorflow.placeholder", "baselines.common.tf_util.function", "baselines.common.tf_util.single_threaded_session", "baselines.common.tf_util.initialize", "baselines.common.tf_util.function.", "baselines.common.tf_util.function.", "baselines.common.tf_util.function.", "baselines.common.tf_util.function."], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.function", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.single_threaded_session", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.initialize"], ["", "", "", "def", "test_function", "(", ")", ":", "\n", "    ", "tf", ".", "reset_default_graph", "(", ")", "\n", "x", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "(", ")", ",", "name", "=", "\"x\"", ")", "\n", "y", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "(", ")", ",", "name", "=", "\"y\"", ")", "\n", "z", "=", "3", "*", "x", "+", "2", "*", "y", "\n", "lin", "=", "function", "(", "[", "x", ",", "y", "]", ",", "z", ",", "givens", "=", "{", "y", ":", "0", "}", ")", "\n", "\n", "with", "single_threaded_session", "(", ")", ":", "\n", "        ", "initialize", "(", ")", "\n", "\n", "assert", "lin", "(", "2", ")", "==", "6", "\n", "assert", "lin", "(", "x", "=", "3", ")", "==", "9", "\n", "assert", "lin", "(", "2", ",", "2", ")", "==", "10", "\n", "assert", "lin", "(", "x", "=", "2", ",", "y", "=", "3", ")", "==", "12", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.tests.test_tf_util.test_multikwargs": [[46, 64], ["tensorflow.reset_default_graph", "tensorflow.placeholder", "baselines.common.tf_util.function", "tensorflow.variable_scope", "tensorflow.placeholder", "baselines.common.tf_util.single_threaded_session", "baselines.common.tf_util.initialize", "baselines.common.tf_util.function.", "baselines.common.tf_util.function.", "baselines.common.tf_util.function."], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.function", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.single_threaded_session", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.initialize"], ["", "", "def", "test_multikwargs", "(", ")", ":", "\n", "    ", "tf", ".", "reset_default_graph", "(", ")", "\n", "x", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "(", ")", ",", "name", "=", "\"x\"", ")", "\n", "with", "tf", ".", "variable_scope", "(", "\"other\"", ")", ":", "\n", "        ", "x2", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "(", ")", ",", "name", "=", "\"x\"", ")", "\n", "", "z", "=", "3", "*", "x", "+", "2", "*", "x2", "\n", "\n", "lin", "=", "function", "(", "[", "x", ",", "x2", "]", ",", "z", ",", "givens", "=", "{", "x2", ":", "0", "}", ")", "\n", "with", "single_threaded_session", "(", ")", ":", "\n", "        ", "initialize", "(", ")", "\n", "assert", "lin", "(", "2", ")", "==", "6", "\n", "assert", "lin", "(", "2", ",", "2", ")", "==", "10", "\n", "expt_caught", "=", "False", "\n", "try", ":", "\n", "            ", "lin", "(", "x", "=", "2", ")", "\n", "", "except", "AssertionError", ":", "\n", "            ", "expt_caught", "=", "True", "\n", "", "assert", "expt_caught", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.tests.test_segment_tree.test_tree_set": [[6, 18], ["baselines.common.segment_tree.SumSegmentTree", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "baselines.common.segment_tree.SumSegmentTree.sum", "baselines.common.segment_tree.SumSegmentTree.sum", "baselines.common.segment_tree.SumSegmentTree.sum", "baselines.common.segment_tree.SumSegmentTree.sum", "baselines.common.segment_tree.SumSegmentTree.sum", "baselines.common.segment_tree.SumSegmentTree.sum"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.sum", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.sum", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.sum", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.sum", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.sum", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.sum"], ["def", "test_tree_set", "(", ")", ":", "\n", "    ", "tree", "=", "SumSegmentTree", "(", "4", ")", "\n", "\n", "tree", "[", "2", "]", "=", "1.0", "\n", "tree", "[", "3", "]", "=", "3.0", "\n", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "sum", "(", ")", ",", "4.0", ")", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "sum", "(", "0", ",", "2", ")", ",", "0.0", ")", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "sum", "(", "0", ",", "3", ")", ",", "1.0", ")", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "sum", "(", "2", ",", "3", ")", ",", "1.0", ")", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "sum", "(", "2", ",", "-", "1", ")", ",", "1.0", ")", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "sum", "(", "2", ",", "4", ")", ",", "4.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.tests.test_segment_tree.test_tree_set_overlap": [[20, 31], ["baselines.common.segment_tree.SumSegmentTree", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "baselines.common.segment_tree.SumSegmentTree.sum", "baselines.common.segment_tree.SumSegmentTree.sum", "baselines.common.segment_tree.SumSegmentTree.sum", "baselines.common.segment_tree.SumSegmentTree.sum", "baselines.common.segment_tree.SumSegmentTree.sum"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.sum", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.sum", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.sum", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.sum", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.sum"], ["", "def", "test_tree_set_overlap", "(", ")", ":", "\n", "    ", "tree", "=", "SumSegmentTree", "(", "4", ")", "\n", "\n", "tree", "[", "2", "]", "=", "1.0", "\n", "tree", "[", "2", "]", "=", "3.0", "\n", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "sum", "(", ")", ",", "3.0", ")", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "sum", "(", "2", ",", "3", ")", ",", "3.0", ")", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "sum", "(", "2", ",", "-", "1", ")", ",", "3.0", ")", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "sum", "(", "2", ",", "4", ")", ",", "3.0", ")", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "sum", "(", "1", ",", "2", ")", ",", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.tests.test_segment_tree.test_prefixsum_idx": [[33, 45], ["baselines.common.segment_tree.SumSegmentTree", "baselines.common.segment_tree.SumSegmentTree.find_prefixsum_idx", "baselines.common.segment_tree.SumSegmentTree.find_prefixsum_idx", "baselines.common.segment_tree.SumSegmentTree.find_prefixsum_idx", "baselines.common.segment_tree.SumSegmentTree.find_prefixsum_idx", "baselines.common.segment_tree.SumSegmentTree.find_prefixsum_idx", "baselines.common.segment_tree.SumSegmentTree.find_prefixsum_idx"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.segment_tree.SumSegmentTree.find_prefixsum_idx", "home.repos.pwc.inspect_result.flowersteam_geppg.common.segment_tree.SumSegmentTree.find_prefixsum_idx", "home.repos.pwc.inspect_result.flowersteam_geppg.common.segment_tree.SumSegmentTree.find_prefixsum_idx", "home.repos.pwc.inspect_result.flowersteam_geppg.common.segment_tree.SumSegmentTree.find_prefixsum_idx", "home.repos.pwc.inspect_result.flowersteam_geppg.common.segment_tree.SumSegmentTree.find_prefixsum_idx", "home.repos.pwc.inspect_result.flowersteam_geppg.common.segment_tree.SumSegmentTree.find_prefixsum_idx"], ["", "def", "test_prefixsum_idx", "(", ")", ":", "\n", "    ", "tree", "=", "SumSegmentTree", "(", "4", ")", "\n", "\n", "tree", "[", "2", "]", "=", "1.0", "\n", "tree", "[", "3", "]", "=", "3.0", "\n", "\n", "assert", "tree", ".", "find_prefixsum_idx", "(", "0.0", ")", "==", "2", "\n", "assert", "tree", ".", "find_prefixsum_idx", "(", "0.5", ")", "==", "2", "\n", "assert", "tree", ".", "find_prefixsum_idx", "(", "0.99", ")", "==", "2", "\n", "assert", "tree", ".", "find_prefixsum_idx", "(", "1.01", ")", "==", "3", "\n", "assert", "tree", ".", "find_prefixsum_idx", "(", "3.00", ")", "==", "3", "\n", "assert", "tree", ".", "find_prefixsum_idx", "(", "4.00", ")", "==", "3", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.tests.test_segment_tree.test_prefixsum_idx2": [[47, 61], ["baselines.common.segment_tree.SumSegmentTree", "baselines.common.segment_tree.SumSegmentTree.find_prefixsum_idx", "baselines.common.segment_tree.SumSegmentTree.find_prefixsum_idx", "baselines.common.segment_tree.SumSegmentTree.find_prefixsum_idx", "baselines.common.segment_tree.SumSegmentTree.find_prefixsum_idx", "baselines.common.segment_tree.SumSegmentTree.find_prefixsum_idx", "baselines.common.segment_tree.SumSegmentTree.find_prefixsum_idx"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.segment_tree.SumSegmentTree.find_prefixsum_idx", "home.repos.pwc.inspect_result.flowersteam_geppg.common.segment_tree.SumSegmentTree.find_prefixsum_idx", "home.repos.pwc.inspect_result.flowersteam_geppg.common.segment_tree.SumSegmentTree.find_prefixsum_idx", "home.repos.pwc.inspect_result.flowersteam_geppg.common.segment_tree.SumSegmentTree.find_prefixsum_idx", "home.repos.pwc.inspect_result.flowersteam_geppg.common.segment_tree.SumSegmentTree.find_prefixsum_idx", "home.repos.pwc.inspect_result.flowersteam_geppg.common.segment_tree.SumSegmentTree.find_prefixsum_idx"], ["", "def", "test_prefixsum_idx2", "(", ")", ":", "\n", "    ", "tree", "=", "SumSegmentTree", "(", "4", ")", "\n", "\n", "tree", "[", "0", "]", "=", "0.5", "\n", "tree", "[", "1", "]", "=", "1.0", "\n", "tree", "[", "2", "]", "=", "1.0", "\n", "tree", "[", "3", "]", "=", "3.0", "\n", "\n", "assert", "tree", ".", "find_prefixsum_idx", "(", "0.00", ")", "==", "0", "\n", "assert", "tree", ".", "find_prefixsum_idx", "(", "0.55", ")", "==", "1", "\n", "assert", "tree", ".", "find_prefixsum_idx", "(", "0.99", ")", "==", "1", "\n", "assert", "tree", ".", "find_prefixsum_idx", "(", "1.51", ")", "==", "2", "\n", "assert", "tree", ".", "find_prefixsum_idx", "(", "3.00", ")", "==", "3", "\n", "assert", "tree", ".", "find_prefixsum_idx", "(", "5.50", ")", "==", "3", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.tests.test_segment_tree.test_max_interval_tree": [[63, 96], ["baselines.common.segment_tree.MinSegmentTree", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "baselines.common.segment_tree.MinSegmentTree.min", "baselines.common.segment_tree.MinSegmentTree.min", "baselines.common.segment_tree.MinSegmentTree.min", "baselines.common.segment_tree.MinSegmentTree.min", "baselines.common.segment_tree.MinSegmentTree.min", "baselines.common.segment_tree.MinSegmentTree.min", "baselines.common.segment_tree.MinSegmentTree.min", "baselines.common.segment_tree.MinSegmentTree.min", "baselines.common.segment_tree.MinSegmentTree.min", "baselines.common.segment_tree.MinSegmentTree.min", "baselines.common.segment_tree.MinSegmentTree.min", "baselines.common.segment_tree.MinSegmentTree.min", "baselines.common.segment_tree.MinSegmentTree.min", "baselines.common.segment_tree.MinSegmentTree.min", "baselines.common.segment_tree.MinSegmentTree.min", "baselines.common.segment_tree.MinSegmentTree.min", "baselines.common.segment_tree.MinSegmentTree.min", "baselines.common.segment_tree.MinSegmentTree.min", "baselines.common.segment_tree.MinSegmentTree.min", "baselines.common.segment_tree.MinSegmentTree.min"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.min", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.min", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.min", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.min", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.min", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.min", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.min", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.min", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.min", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.min", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.min", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.min", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.min", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.min", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.min", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.min", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.min", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.min", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.min", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.min"], ["", "def", "test_max_interval_tree", "(", ")", ":", "\n", "    ", "tree", "=", "MinSegmentTree", "(", "4", ")", "\n", "\n", "tree", "[", "0", "]", "=", "1.0", "\n", "tree", "[", "2", "]", "=", "0.5", "\n", "tree", "[", "3", "]", "=", "3.0", "\n", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "min", "(", ")", ",", "0.5", ")", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "min", "(", "0", ",", "2", ")", ",", "1.0", ")", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "min", "(", "0", ",", "3", ")", ",", "0.5", ")", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "min", "(", "0", ",", "-", "1", ")", ",", "0.5", ")", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "min", "(", "2", ",", "4", ")", ",", "0.5", ")", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "min", "(", "3", ",", "4", ")", ",", "3.0", ")", "\n", "\n", "tree", "[", "2", "]", "=", "0.7", "\n", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "min", "(", ")", ",", "0.7", ")", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "min", "(", "0", ",", "2", ")", ",", "1.0", ")", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "min", "(", "0", ",", "3", ")", ",", "0.7", ")", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "min", "(", "0", ",", "-", "1", ")", ",", "0.7", ")", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "min", "(", "2", ",", "4", ")", ",", "0.7", ")", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "min", "(", "3", ",", "4", ")", ",", "3.0", ")", "\n", "\n", "tree", "[", "2", "]", "=", "4.0", "\n", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "min", "(", ")", ",", "1.0", ")", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "min", "(", "0", ",", "2", ")", ",", "1.0", ")", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "min", "(", "0", ",", "3", ")", ",", "1.0", ")", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "min", "(", "0", ",", "-", "1", ")", ",", "1.0", ")", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "min", "(", "2", ",", "4", ")", ",", "3.0", ")", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "min", "(", "2", ",", "3", ")", ",", "4.0", ")", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "min", "(", "2", ",", "-", "1", ")", ",", "4.0", ")", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "min", "(", "3", ",", "4", ")", ",", "3.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.subproc_vec_env.CloudpickleWrapper.__init__": [[29, 31], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "x", ")", ":", "\n", "        ", "self", ".", "x", "=", "x", "\n", "", "def", "__getstate__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.subproc_vec_env.CloudpickleWrapper.__getstate__": [[31, 34], ["cloudpickle.dumps"], "methods", ["None"], ["", "def", "__getstate__", "(", "self", ")", ":", "\n", "        ", "import", "cloudpickle", "\n", "return", "cloudpickle", ".", "dumps", "(", "self", ".", "x", ")", "\n", "", "def", "__setstate__", "(", "self", ",", "ob", ")", ":", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.subproc_vec_env.CloudpickleWrapper.__setstate__": [[34, 37], ["pickle.loads"], "methods", ["None"], ["", "def", "__setstate__", "(", "self", ",", "ob", ")", ":", "\n", "        ", "import", "pickle", "\n", "self", ".", "x", "=", "pickle", ".", "loads", "(", "ob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.subproc_vec_env.SubprocVecEnv.__init__": [[39, 52], ["len", "zip", "subproc_vec_env.SubprocVecEnv.remotes[].send", "subproc_vec_env.SubprocVecEnv.remotes[].recv", "multiprocessing.Process", "p.start", "zip", "multiprocessing.Pipe", "range", "subproc_vec_env.CloudpickleWrapper"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "env_fns", ")", ":", "\n", "        ", "\"\"\"\n        envs: list of gym environments to run in subprocesses\n        \"\"\"", "\n", "nenvs", "=", "len", "(", "env_fns", ")", "\n", "self", ".", "remotes", ",", "self", ".", "work_remotes", "=", "zip", "(", "*", "[", "Pipe", "(", ")", "for", "_", "in", "range", "(", "nenvs", ")", "]", ")", "\n", "self", ".", "ps", "=", "[", "Process", "(", "target", "=", "worker", ",", "args", "=", "(", "work_remote", ",", "CloudpickleWrapper", "(", "env_fn", ")", ")", ")", "\n", "for", "(", "work_remote", ",", "env_fn", ")", "in", "zip", "(", "self", ".", "work_remotes", ",", "env_fns", ")", "]", "\n", "for", "p", "in", "self", ".", "ps", ":", "\n", "            ", "p", ".", "start", "(", ")", "\n", "\n", "", "self", ".", "remotes", "[", "0", "]", ".", "send", "(", "(", "'get_spaces'", ",", "None", ")", ")", "\n", "self", ".", "action_space", ",", "self", ".", "observation_space", "=", "self", ".", "remotes", "[", "0", "]", ".", "recv", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.subproc_vec_env.SubprocVecEnv.step": [[54, 60], ["zip", "zip", "remote.send", "remote.recv", "numpy.stack", "numpy.stack", "numpy.stack"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "actions", ")", ":", "\n", "        ", "for", "remote", ",", "action", "in", "zip", "(", "self", ".", "remotes", ",", "actions", ")", ":", "\n", "            ", "remote", ".", "send", "(", "(", "'step'", ",", "action", ")", ")", "\n", "", "results", "=", "[", "remote", ".", "recv", "(", ")", "for", "remote", "in", "self", ".", "remotes", "]", "\n", "obs", ",", "rews", ",", "dones", ",", "infos", "=", "zip", "(", "*", "results", ")", "\n", "return", "np", ".", "stack", "(", "obs", ")", ",", "np", ".", "stack", "(", "rews", ")", ",", "np", ".", "stack", "(", "dones", ")", ",", "infos", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.subproc_vec_env.SubprocVecEnv.reset": [[61, 65], ["numpy.stack", "remote.send", "remote.recv"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "for", "remote", "in", "self", ".", "remotes", ":", "\n", "            ", "remote", ".", "send", "(", "(", "'reset'", ",", "None", ")", ")", "\n", "", "return", "np", ".", "stack", "(", "[", "remote", ".", "recv", "(", ")", "for", "remote", "in", "self", ".", "remotes", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.subproc_vec_env.SubprocVecEnv.close": [[66, 71], ["remote.send", "p.join"], "methods", ["None"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "for", "remote", "in", "self", ".", "remotes", ":", "\n", "            ", "remote", ".", "send", "(", "(", "'close'", ",", "None", ")", ")", "\n", "", "for", "p", "in", "self", ".", "ps", ":", "\n", "            ", "p", ".", "join", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.subproc_vec_env.SubprocVecEnv.num_envs": [[72, 75], ["len"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "num_envs", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "remotes", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.subproc_vec_env.worker": [[5, 24], ["env_fn_wrapper.x", "remote.recv", "env_fn_wrapper.x.step", "remote.send", "env_fn_wrapper.x.reset", "env_fn_wrapper.x.reset", "remote.send", "remote.close", "remote.send"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.__init__.VecEnv.step", "home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.__init__.VecEnv.close"], ["def", "worker", "(", "remote", ",", "env_fn_wrapper", ")", ":", "\n", "    ", "env", "=", "env_fn_wrapper", ".", "x", "(", ")", "\n", "while", "True", ":", "\n", "        ", "cmd", ",", "data", "=", "remote", ".", "recv", "(", ")", "\n", "if", "cmd", "==", "'step'", ":", "\n", "            ", "ob", ",", "reward", ",", "done", ",", "info", "=", "env", ".", "step", "(", "data", ")", "\n", "if", "done", ":", "\n", "                ", "ob", "=", "env", ".", "reset", "(", ")", "\n", "", "remote", ".", "send", "(", "(", "ob", ",", "reward", ",", "done", ",", "info", ")", ")", "\n", "", "elif", "cmd", "==", "'reset'", ":", "\n", "            ", "ob", "=", "env", ".", "reset", "(", ")", "\n", "remote", ".", "send", "(", "ob", ")", "\n", "", "elif", "cmd", "==", "'close'", ":", "\n", "            ", "remote", ".", "close", "(", ")", "\n", "break", "\n", "", "elif", "cmd", "==", "'get_spaces'", ":", "\n", "            ", "remote", ".", "send", "(", "(", "env", ".", "action_space", ",", "env", ".", "observation_space", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.__init__.VecEnv.step": [[5, 13], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.__init__.VecEnv.reset": [[13, 18], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.__init__.VecEnv.close": [[18, 20], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.flowersteam_geppg.scripts.extract_results.extract_gep": [[90, 154], ["print", "matplotlib.figure", "enumerate", "matplotlib.savefig", "numpy.savetxt", "numpy.savetxt", "numpy.savetxt", "print", "len", "numpy.array", "range", "matplotlib.figure", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.title", "matplotlib.plot", "matplotlib.fill_between", "matplotlib.savefig", "print", "sorted", "numpy.asarray", "numpy.array", "numpy.array", "numpy.mean", "numpy.nanmean", "numpy.nanstd", "numpy.nanstd", "type", "os.listdir", "os.listdir", "len", "np.array.append", "absolute_perfs.append", "final_perfs.append", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.title", "range", "matplotlib.plot", "numpy.array", "numpy.nanmedian", "str", "open", "pickle.load", "list", "numpy.array().mean", "numpy.array().mean", "numpy.nanstd", "numpy.sqrt", "numpy.nanstd", "numpy.sqrt", "type", "len", "numpy.nanpercentile", "numpy.array", "numpy.array", "int", "numpy.nanpercentile", "data_gep[].tolist", "int"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.mean", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.common.azure_utils.Container.list", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.mean", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.mean"], ["assert", "n1", "+", "n2", "==", "n_runs", "\n", "\n", "if", "gep", ":", "\n", "# modify GEP source", "\n", "        ", "for", "i", "in", "range", "(", "n1", ")", ":", "#,n_runs):", "\n", "            ", "eval_perfs", "[", "i", ",", "251", ":", "]", "=", "eval_perfs", "[", "i", ",", ":", "750", "]", "\n", "if", "os", ".", "path", ".", "exists", "(", "data_path", "+", "'buffer_perfs'", ")", ":", "\n", "                ", "gep_perfs", "=", "np", ".", "loadtxt", "(", "data_path", "+", "'buffer_perfs'", ")", "\n", "eval_perfs", "[", "i", ",", "0", "]", "=", "0", "\n", "eval_perfs", "[", "i", ",", "1", ":", "251", "]", "=", "gep_perfs", "[", "i", "]", "\n", "", "else", ":", "\n", "                ", "eval_perfs", "[", "i", ",", ":", "251", "]", "=", "np", ".", "zeros", "(", "[", "251", "]", ")", "\n", "", "", "eval_perfs_gep", "=", "np", ".", "loadtxt", "(", "'/media/flowers/3C3C66F13C66A59C/data_save/ddpg_study_baseline/data/HalfCheetah-v1/finals/GEP_2M_LinearPolicy/eval_performances_GEP2M_linear_policy'", ")", "\n", "eval_perfs_gep", "=", "np", ".", "concatenate", "(", "[", "np", ".", "zeros", "(", "[", "20", ",", "1", "]", ")", ",", "eval_perfs_gep", "]", ",", "axis", "=", "1", ")", "\n", "\n", "", "if", "main_curve", "==", "'mean'", ":", "\n", "        ", "toPlot_av1", "=", "np", ".", "nanmean", "(", "eval_perfs", "[", ":", "n1", "]", ",", "axis", "=", "0", ")", "\n", "toPlot_av2", "=", "np", ".", "nanmean", "(", "eval_perfs", "[", "inds", "[", "n1", ":", "]", "]", ",", "axis", "=", "0", ")", "\n", "if", "gep", ":", "\n", "            ", "toPlot_av3", "=", "np", ".", "nanmean", "(", "eval_perfs_gep", ",", "axis", "=", "0", ")", "\n", "", "", "elif", "main_curve", "==", "'median'", ":", "\n", "        ", "toPlot_av1", "=", "np", ".", "nanmedian", "(", "eval_perfs", "[", ":", "n1", "]", ",", "axis", "=", "0", ")", "\n", "toPlot_av2", "=", "np", ".", "nanmedian", "(", "eval_perfs", "[", "inds", "[", "n1", ":", "]", "]", ",", "axis", "=", "0", ")", "\n", "if", "gep", ":", "\n", "            ", "toPlot_av3", "=", "np", ".", "nanmedian", "(", "eval_perfs_gep", ",", "axis", "=", "0", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "if", "error_type", "==", "'std'", ":", "\n", "        ", "toPlot_error1_add", "=", "np", ".", "nanstd", "(", "eval_perfs", "[", ":", "n1", "]", ",", "axis", "=", "0", ")", "\n", "toPlot_error1_sub", "=", "np", ".", "nanstd", "(", "eval_perfs", "[", ":", "n1", "]", ",", "axis", "=", "0", ")", "\n", "toPlot_error2_add", "=", "np", ".", "nanstd", "(", "eval_perfs", "[", "n1", ":", "]", ",", "axis", "=", "0", ")", "\n", "toPlot_error2_sub", "=", "np", ".", "nanstd", "(", "eval_perfs", "[", "n1", ":", "]", ",", "axis", "=", "0", ")", "\n", "if", "gep", ":", "\n", "            ", "toPlot_error3_sub", "=", "np", ".", "nanstd", "(", "eval_perfs_gep", ",", "axis", "=", "0", ")", "\n", "", "", "elif", "error_type", "==", "'sem'", ":", "\n", "        ", "toPlot_error1_add", "=", "np", ".", "nanstd", "(", "eval_perfs", "[", ":", "n1", "]", ",", "axis", "=", "0", ")", "/", "np", ".", "sqrt", "(", "n1", ")", "\n", "toPlot_error1_sub", "=", "np", ".", "nanstd", "(", "eval_perfs", "[", ":", "n1", "]", ",", "axis", "=", "0", ")", "/", "np", ".", "sqrt", "(", "n1", ")", "\n", "toPlot_error2_add", "=", "np", ".", "nanstd", "(", "eval_perfs", "[", "n1", ":", "]", ",", "axis", "=", "0", ")", "/", "np", ".", "sqrt", "(", "n2", ")", "\n", "toPlot_error2_sub", "=", "np", ".", "nanstd", "(", "eval_perfs", "[", "n1", ":", "]", ",", "axis", "=", "0", ")", "/", "np", ".", "sqrt", "(", "n2", ")", "\n", "if", "gep", ":", "\n", "            ", "toPlot_error3_sub", "=", "np", ".", "nanstd", "(", "eval_perfs_gep", ",", "axis", "=", "0", ")", "/", "np", ".", "sqrt", "(", "20", ")", "\n", "toPlot_error3_add", "=", "np", ".", "nanstd", "(", "eval_perfs_gep", ",", "axis", "=", "0", ")", "/", "np", ".", "sqrt", "(", "20", ")", "\n", "\n", "", "", "elif", "type", "(", "error_type", ")", "==", "int", ":", "\n", "        ", "assert", "(", "error_type", "<=", "100", "and", "error_type", ">", "0", ")", ",", "'error_type must be between 0 and 100'", "\n", "toPlot_error1_add", "=", "np", ".", "nanpercentile", "(", "eval_perfs", "[", ":", "n1", "]", ",", "int", "(", "100", "-", "(", "100", "-", "error_type", ")", "/", "2", ")", ",", "axis", "=", "0", ")", "-", "toPlot_av1", "\n", "toPlot_error1_sub", "=", "-", "np", ".", "nanpercentile", "(", "eval_perfs", "[", ":", "n1", "]", ",", "int", "(", "(", "100", "-", "error_type", ")", "/", "2", ")", ",", "axis", "=", "0", ")", "+", "toPlot_av1", "\n", "toPlot_error2_add", "=", "np", ".", "nanpercentile", "(", "eval_perfs", "[", "n1", ":", "]", ",", "int", "(", "100", "-", "(", "100", "-", "error_type", ")", "/", "2", ")", ",", "axis", "=", "0", ")", "-", "toPlot_av2", "\n", "toPlot_error2_sub", "=", "-", "np", ".", "nanpercentile", "(", "eval_perfs", "[", "n1", ":", "]", ",", "int", "(", "(", "100", "-", "error_type", ")", "/", "2", ")", ",", "axis", "=", "0", ")", "+", "toPlot_av2", "\n", "if", "gep", ":", "\n", "            ", "toPlot_error3_add", "=", "np", ".", "nanpercentile", "(", "eval_perfs_gep", ",", "int", "(", "100", "-", "(", "100", "-", "error_type", ")", "/", "2", ")", ",", "axis", "=", "0", ")", "-", "toPlot_av3", "\n", "toPlot_error3_sub", "=", "np", ".", "nanpercentile", "(", "eval_perfs_gep", ",", "int", "(", "(", "100", "-", "error_type", ")", "/", "2", ")", ",", "axis", "=", "0", ")", "+", "toPlot_av3", "\n", "\n", "", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "if", "type", "(", "error_type", ")", "==", "int", ":", "\n", "        ", "error_type", "=", "str", "(", "error_type", ")", "+", "'%'", "\n", "", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "20", ",", "13", ")", ",", "frameon", "=", "False", ")", "\n", "plt", ".", "xlabel", "(", "\"time steps\"", ")", "\n", "plt", ".", "ylabel", "(", "\"performance\"", ")", "\n", "plt", ".", "title", "(", "\"DDPG (noisy parameters), GEP-DDPG (noisy parameters) and GEP\"", ")", "\n", "\n", "plt", ".", "plot", "(", "steps", ",", "toPlot_av1", ",", "label", "=", "\"label\"", ",", "c", "=", "'#CC0000'", ")", "\n", "plt", ".", "fill_between", "(", "steps", ",", "toPlot_av1", "-", "toPlot_error1_sub", ",", "toPlot_av1", "+", "toPlot_error1_add", ",", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.scripts.extract_results.extract_performances": [[156, 173], ["open", "json_data.readlines", "json.loads", "eval_rewards.append", "steps.append"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append"], ["plt", ".", "plot", "(", "steps", ",", "toPlot_av2", ",", "label", "=", "\"label\"", ",", "c", "=", "'#0066CC'", ")", "\n", "plt", ".", "fill_between", "(", "steps", ",", "toPlot_av2", "-", "toPlot_error2_sub", ",", "toPlot_av2", "+", "toPlot_error2_add", ",", "\n", "alpha", "=", "0.5", ",", "edgecolor", "=", "'#3999FF'", ",", "facecolor", "=", "'#66B2FF'", ")", "\n", "if", "gep", ":", "\n", "        ", "plt", ".", "plot", "(", "steps", ",", "toPlot_av3", ",", "label", "=", "\"label\"", ",", "c", "=", "(", "0.929", ",", "0.694", ",", "0.125", ")", ")", "\n", "plt", ".", "fill_between", "(", "steps", ",", "toPlot_av3", "-", "toPlot_error3_sub", ",", "toPlot_av3", "+", "toPlot_error3_add", ",", "\n", "alpha", "=", "0.5", ",", "edgecolor", "=", "(", "1", ",", "0.75", ",", "0.25", ")", ",", "facecolor", "=", "(", "1", ",", "0.8", ",", "0.35", ")", ")", "\n", "plt", ".", "axvline", "(", "x", "=", "500000", ",", "linestyle", "=", "'--'", ",", "color", "=", "'k'", ")", "\n", "\n", "", "legend", "=", "[", "'GEP-DDPG (noisy parameters), '", "+", "main_curve", "+", "' ('", "+", "error_type", "+", "')'", ",", "'DDPG (noisy parameters), '", "+", "main_curve", "+", "' ('", "+", "error_type", "+", "')'", "]", "\n", "if", "gep", ":", "\n", "       ", "legend", ".", "append", "(", "'GEP, '", "+", "main_curve", "+", "' ('", "+", "error_type", "+", "')'", ")", "\n", "", "plt", ".", "legend", "(", "legend", ",", "loc", "=", "4", ")", "\n", "\n", "plt", ".", "savefig", "(", "data_path", "+", "'DDPG_vs_GEP_DDPG_Plappert_vs_GEP'", "+", "main_curve", "+", "' ('", "+", "error_type", "+", "').png'", ",", "bbox_inches", "=", "'tight'", ")", "\n", "\n", "\n", "", "def", "compute_stats_vs", "(", "data_path", ",", "n1", ",", "n2", ",", "gep", ",", "save", "=", "True", ",", "var", "=", "False", ")", ":", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.scripts.extract_results.plot_all": [[176, 262], ["print", "matplotlib.figure", "enumerate", "matplotlib.savefig", "len", "range", "numpy.zeros", "np.zeros.fill", "range", "range", "matplotlib.figure", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.title", "matplotlib.plot", "matplotlib.fill_between", "matplotlib.savefig", "numpy.savetxt", "print", "numpy.loadtxt", "sorted", "range", "numpy.nanmean", "numpy.nanstd", "numpy.nanstd", "type", "matplotlib.axvline", "os.listdir", "os.listdir", "len", "extract_results.extract_performances", "run[].append", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.title", "matplotlib.plot", "len", "len", "numpy.nanmedian", "str", "numpy.nanstd", "numpy.sqrt", "numpy.nanstd", "numpy.sqrt", "type", "len", "numpy.nanpercentile", "int", "numpy.nanpercentile", "int"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.scripts.extract_results.extract_performances", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append"], ["scores_our", "=", "[", "]", "\n", "for", "i", ",", "trial", "in", "enumerate", "(", "sorted", "(", "os", ".", "listdir", "(", "data_path", ")", ")", ")", ":", "\n", "\n", "        ", "if", "len", "(", "trial", ")", "<", "4", ":", "\n", "# print('Extracting: ', trial)", "\n", "            ", "filename", "=", "data_path", "+", "trial", "+", "'/progress.json'", "\n", "# print(filename)", "\n", "steps", ",", "eval_rewards", "=", "extract_performances", "(", "filename", ")", "\n", "run", "[", "'perfs'", "]", ".", "append", "(", "eval_rewards", ")", "\n", "scores", "=", "np", ".", "loadtxt", "(", "data_path", "+", "trial", "+", "'/scores'", ")", "\n", "scores_our", ".", "append", "(", "scores", "[", "1", ",", "0", "]", ")", "\n", "\n", "", "", "n_runs", "=", "len", "(", "run", "[", "'perfs'", "]", ")", "\n", "assert", "n1", "+", "n2", "==", "n_runs", "\n", "max_steps", "=", "0", "\n", "for", "i", "in", "range", "(", "n_runs", ")", ":", "\n", "        ", "if", "len", "(", "run", "[", "'perfs'", "]", "[", "i", "]", ")", ">", "max_steps", ":", "\n", "            ", "max_steps", "=", "len", "(", "run", "[", "'perfs'", "]", "[", "i", "]", ")", "\n", "", "", "eval_perfs", "=", "np", ".", "empty", "(", "[", "n_runs", ",", "max_steps", "]", ")", "*", "(", "np", ".", "nan", ")", "\n", "for", "i", "in", "range", "(", "n_runs", ")", ":", "\n", "        ", "eval_perfs", "[", "i", ",", ":", "len", "(", "run", "[", "'perfs'", "]", "[", "i", "]", ")", "]", "=", "run", "[", "'perfs'", "]", "[", "i", "]", "\n", "\n", "# steps = steps[:700]", "\n", "", "inds", "=", "np", ".", "array", "(", "range", "(", "n_runs", ")", ")", "\n", "if", "var", ":", "\n", "        ", "np", ".", "random", ".", "shuffle", "(", "inds", ")", "\n", "\n", "", "if", "gep", ":", "\n", "# modify GEP source", "\n", "        ", "for", "i", "in", "range", "(", "n1", ")", ":", "#,n_runs):", "\n", "            ", "eval_perfs", "[", "i", ",", "251", ":", "]", "=", "eval_perfs", "[", "i", ",", ":", "750", "]", "\n", "eval_perfs", "[", "i", ",", ":", "251", "]", "=", "np", ".", "zeros", "(", "[", "251", "]", ")", "\n", "\n", "# print(inds)", "\n", "\n", "# compute statistics", "\n", "", "", "data1_litt", "=", "np", ".", "nanmean", "(", "eval_perfs", "[", "inds", "[", ":", "n1", "]", "]", "[", ":", ",", "-", "10", ":", "]", ",", "axis", "=", "1", ")", "\n", "data2_litt", "=", "np", ".", "nanmean", "(", "eval_perfs", "[", "inds", "[", "n1", ":", "]", "]", "[", ":", ",", "-", "10", ":", "]", ",", "axis", "=", "1", ")", "\n", "ks_litt", ",", "p_ks_litt", "=", "ks_2samp", "(", "data1_litt", ",", "data2_litt", ")", "\n", "ttest_litt", ",", "p_ttest_litt", "=", "ttest_ind", "(", "data1_litt", ",", "data2_litt", ",", "equal_var", "=", "False", ")", "\n", "data1_our", "=", "np", ".", "array", "(", "scores_our", "[", ":", "n1", "]", ")", "\n", "data2_our", "=", "np", ".", "array", "(", "scores_our", "[", "n1", ":", "]", ")", "\n", "ks_our", ",", "p_ks_our", "=", "ks_2samp", "(", "data1_our", ",", "data2_our", ")", "\n", "ttest_our", ",", "p_ttest_our", "=", "ttest_ind", "(", "data1_our", ",", "data2_our", ",", "equal_var", "=", "False", ")", "\n", "\n", "# estimation of confidence intervals with bootstrap method, https://github.com/facebookincubator/bootstrapped", "\n", "res_litt", "=", "bs", ".", "bootstrap_ab", "(", "data1_litt", ",", "data2_litt", ",", "bs_stats", ".", "mean", ",", "bs_compare", ".", "difference", ",", "num_iterations", "=", "10000", ")", "\n", "sign_litt", "=", "np", ".", "sign", "(", "res_litt", ".", "upper_bound", ")", "==", "np", ".", "sign", "(", "res_litt", ".", "lower_bound", ")", "\n", "res_our", "=", "bs", ".", "bootstrap_ab", "(", "data1_our", ",", "data2_our", ",", "bs_stats", ".", "mean", ",", "bs_compare", ".", "difference", ",", "num_iterations", "=", "10000", ")", "\n", "sign_our", "=", "np", ".", "sign", "(", "res_our", ".", "upper_bound", ")", "==", "np", ".", "sign", "(", "res_our", ".", "lower_bound", ")", "\n", "\n", "toSave", "=", "np", ".", "zeros", "(", "[", "4", ",", "4", "]", ")", "\n", "toSave", "[", "0", ":", "2", ",", ":", "]", "=", "np", ".", "array", "(", "[", "[", "ks_litt", ",", "p_ks_litt", ",", "ttest_litt", ",", "p_ttest_litt", "]", ",", "[", "ks_our", ",", "p_ks_our", ",", "ttest_our", ",", "p_ttest_our", "]", "]", ")", "\n", "toSave", "[", "2", ",", ":", "]", "=", "np", ".", "array", "(", "[", "res_litt", ".", "value", ",", "res_litt", ".", "lower_bound", ",", "res_litt", ".", "upper_bound", ",", "sign_litt", "*", "np", ".", "sign", "(", "res_litt", ".", "lower_bound", ")", "]", ")", "\n", "toSave", "[", "3", ",", ":", "]", "=", "np", ".", "array", "(", "[", "res_our", ".", "value", ",", "res_our", ".", "lower_bound", ",", "res_our", ".", "upper_bound", ",", "sign_our", "*", "np", ".", "sign", "(", "res_our", ".", "lower_bound", ")", "]", ")", "\n", "if", "save", ":", "\n", "        ", "np", ".", "savetxt", "(", "data_path", "+", "'stats'", ",", "toSave", ")", "\n", "\n", "", "if", "var", ":", "\n", "        ", "toReturn", "=", "np", ".", "array", "(", "[", "toSave", "[", "0", ",", "1", "]", ",", "toSave", "[", "0", ",", "3", "]", ",", "toSave", "[", "1", ",", "1", "]", ",", "toSave", "[", "1", ",", "3", "]", ",", "toSave", "[", "2", ",", "3", "]", ",", "toSave", "[", "3", ",", "3", "]", "]", ")", "\n", "return", "toReturn", "\n", "\n", "\n", "", "", "def", "plot_test_variability", "(", "data_path", ",", "ind", ",", "error_type", ",", "main_curve", ")", ":", "\n", "    ", "run", "=", "{", "}", "\n", "run", "[", "'perfs'", "]", "=", "[", "]", "\n", "for", "i", ",", "trial", "in", "enumerate", "(", "sorted", "(", "os", ".", "listdir", "(", "data_path", ")", ")", ")", ":", "\n", "\n", "        ", "if", "len", "(", "trial", ")", "<", "4", ":", "\n", "            ", "print", "(", "'Extracting: '", ",", "trial", ")", "\n", "filename", "=", "data_path", "+", "trial", "+", "'/progress.json'", "\n", "# print(filename)", "\n", "steps", ",", "eval_rewards", "=", "extract_performances", "(", "filename", ")", "\n", "run", "[", "'perfs'", "]", ".", "append", "(", "eval_rewards", ")", "\n", "\n", "", "", "n_runs", "=", "len", "(", "run", "[", "'perfs'", "]", ")", "\n", "max_steps", "=", "0", "\n", "for", "i", "in", "range", "(", "n_runs", ")", ":", "\n", "        ", "if", "len", "(", "run", "[", "'perfs'", "]", "[", "i", "]", ")", ">", "max_steps", ":", "\n", "            ", "max_steps", "=", "len", "(", "run", "[", "'perfs'", "]", "[", "i", "]", ")", "\n", "", "", "eval_perfs", "=", "np", ".", "empty", "(", "[", "n_runs", ",", "max_steps", "]", ")", "*", "(", "np", ".", "nan", ")", "\n", "for", "i", "in", "range", "(", "n_runs", ")", ":", "\n", "        ", "eval_perfs", "[", "i", ",", ":", "len", "(", "run", "[", "'perfs'", "]", "[", "i", "]", ")", "]", "=", "run", "[", "'perfs'", "]", "[", "i", "]", "\n", "\n", "", "steps", "=", "range", "(", "0", ",", "max_steps", "*", "2000", ",", "2000", ")", "\n", "\n", "inds", "=", "np", ".", "array", "(", "range", "(", "n_runs", ")", ")", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.scripts.extract_results.compute_scores_all": [[265, 338], ["print", "matplotlib.figure", "enumerate", "print", "sorted", "os.listdir", "os.listdir", "len", "os.path.exists", "os.path.exists", "numpy.loadtxt", "hist_final_scores.append", "hist_absolute_scores.append", "numpy.zeros", "print", "extract_results.extract_performances", "numpy.array().mean", "numpy.array().std", "numpy.array().min", "numpy.array().max", "os.listdir", "os.listdir", "numpy.savetxt", "hist_final_scores.append", "hist_absolute_scores.append", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.zeros", "np.zeros.mean", "np.zeros.std", "np.zeros.min", "np.zeros.max", "tensorflow.Session", "tensorflow.global_variables_initializer", "sess.run", "tensorflow.train.import_meta_graph", "tf.train.import_meta_graph.restore", "tensorflow.get_default_graph", "tf.get_default_graph.get_tensor_by_name", "tf.get_default_graph.get_tensor_by_name", "range", "open", "checkf.read", "tensorflow.train.latest_checkpoint", "sum", "env.reset", "observations[].squeeze", "sess.run", "actions.append", "env.step", "observations.append", "rewards.append"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.common.azure_utils.Container.exists", "home.repos.pwc.inspect_result.flowersteam_geppg.common.azure_utils.Container.exists", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.scripts.extract_results.extract_performances", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.mean", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.std", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.min", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.max", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.mean", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.std", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.min", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.max", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.main_config.run", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.sum", "home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.main_config.run", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.vec_env.__init__.VecEnv.step", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append"], ["print", "(", "inds", ")", "\n", "\n", "if", "main_curve", "==", "'mean'", ":", "\n", "        ", "toPlot_av1", "=", "np", ".", "nanmean", "(", "eval_perfs", "[", "inds", "[", ":", "int", "(", "n_runs", "/", "2", ")", "]", "]", ",", "axis", "=", "0", ")", "\n", "toPlot_av2", "=", "np", ".", "nanmean", "(", "eval_perfs", "[", "inds", "[", "int", "(", "n_runs", "/", "2", ")", ":", "]", "]", ",", "axis", "=", "0", ")", "\n", "", "elif", "main_curve", "==", "'median'", ":", "\n", "        ", "toPlot_av1", "=", "np", ".", "nanmedian", "(", "eval_perfs", "[", "inds", "[", ":", "int", "(", "n_runs", "/", "2", ")", "]", "]", ",", "axis", "=", "0", ")", "\n", "toPlot_av2", "=", "np", ".", "nanmedian", "(", "eval_perfs", "[", "inds", "[", "int", "(", "n_runs", "/", "2", ")", ":", "]", "]", ",", "axis", "=", "0", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "if", "error_type", "==", "'std'", ":", "\n", "        ", "toPlot_error1_add", "=", "np", ".", "nanstd", "(", "eval_perfs", "[", "inds", "[", ":", "int", "(", "n_runs", "/", "2", ")", "]", "]", ",", "axis", "=", "0", ")", "\n", "toPlot_error1_sub", "=", "np", ".", "nanstd", "(", "eval_perfs", "[", "inds", "[", ":", "int", "(", "n_runs", "/", "2", ")", "]", "]", ",", "axis", "=", "0", ")", "\n", "toPlot_error2_add", "=", "np", ".", "nanstd", "(", "eval_perfs", "[", "inds", "[", "int", "(", "n_runs", "/", "2", ")", ":", "]", "]", ",", "axis", "=", "0", ")", "\n", "toPlot_error2_sub", "=", "np", ".", "nanstd", "(", "eval_perfs", "[", "inds", "[", "int", "(", "n_runs", "/", "2", ")", ":", "]", "]", ",", "axis", "=", "0", ")", "\n", "", "elif", "error_type", "==", "'sem'", ":", "\n", "        ", "toPlot_error1_add", "=", "np", ".", "nanstd", "(", "eval_perfs", "[", "inds", "[", ":", "int", "(", "n_runs", "/", "2", ")", "]", "]", ",", "axis", "=", "0", ")", "/", "np", ".", "sqrt", "(", "int", "(", "n_runs", "/", "2", ")", ")", "\n", "toPlot_error1_sub", "=", "np", ".", "nanstd", "(", "eval_perfs", "[", "inds", "[", ":", "int", "(", "n_runs", "/", "2", ")", "]", "]", ",", "axis", "=", "0", ")", "/", "np", ".", "sqrt", "(", "int", "(", "n_runs", "/", "2", ")", ")", "\n", "toPlot_error2_add", "=", "np", ".", "nanstd", "(", "eval_perfs", "[", "inds", "[", "int", "(", "n_runs", "/", "2", ")", ":", "]", "]", ",", "axis", "=", "0", ")", "/", "np", ".", "sqrt", "(", "int", "(", "n_runs", "/", "2", ")", ")", "\n", "toPlot_error2_sub", "=", "np", ".", "nanstd", "(", "eval_perfs", "[", "inds", "[", "int", "(", "n_runs", "/", "2", ")", ":", "]", "]", ",", "axis", "=", "0", ")", "/", "np", ".", "sqrt", "(", "int", "(", "n_runs", "/", "2", ")", ")", "\n", "", "elif", "type", "(", "error_type", ")", "==", "int", ":", "\n", "        ", "assert", "(", "error_type", "<=", "100", "and", "error_type", ">", "0", ")", ",", "'error_type must be between 0 and 100'", "\n", "toPlot_error1_add", "=", "np", ".", "nanpercentile", "(", "eval_perfs", "[", "inds", "[", ":", "int", "(", "n_runs", "/", "2", ")", "]", "]", ",", "int", "(", "100", "-", "(", "100", "-", "error_type", ")", "/", "2", ")", ",", "axis", "=", "0", ")", "-", "toPlot_av1", "\n", "toPlot_error1_sub", "=", "-", "np", ".", "nanpercentile", "(", "eval_perfs", "[", "inds", "[", ":", "int", "(", "n_runs", "/", "2", ")", "]", "]", ",", "int", "(", "(", "100", "-", "error_type", ")", "/", "2", ")", ",", "axis", "=", "0", ")", "+", "toPlot_av1", "\n", "toPlot_error2_add", "=", "np", ".", "nanpercentile", "(", "eval_perfs", "[", "inds", "[", "int", "(", "n_runs", "/", "2", ")", ":", "]", "]", ",", "int", "(", "100", "-", "(", "100", "-", "error_type", ")", "/", "2", ")", ",", "axis", "=", "0", ")", "-", "toPlot_av2", "\n", "toPlot_error2_sub", "=", "-", "np", ".", "nanpercentile", "(", "eval_perfs", "[", "inds", "[", "int", "(", "n_runs", "/", "2", ")", ":", "]", "]", ",", "int", "(", "(", "100", "-", "error_type", ")", "/", "2", ")", ",", "axis", "=", "0", ")", "+", "toPlot_av2", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "if", "type", "(", "error_type", ")", "==", "int", ":", "\n", "        ", "error_type", "=", "str", "(", "error_type", ")", "+", "'%'", "\n", "\n", "", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "20", ",", "13", ")", ",", "frameon", "=", "False", ")", "\n", "plt", ".", "xlabel", "(", "\"time steps\"", ")", "\n", "plt", ".", "ylabel", "(", "\"performance\"", ")", "\n", "plt", ".", "title", "(", "name_algo", "+", "', '", "+", "error_type", ")", "\n", "# plt.plot(steps, toPlot_av1, label=\"label\", c='#CC6600')", "\n", "# plt.fill_between(steps, toPlot_av1 - toPlot_std1, toPlot_av1 + toPlot_std1,", "\n", "#                  alpha=0.5, edgecolor='#FF9933', facecolor='#FFB266')", "\n", "plt", ".", "plot", "(", "steps", ",", "toPlot_av1", ",", "label", "=", "\"label\"", ",", "c", "=", "'#CC0000'", ")", "\n", "plt", ".", "fill_between", "(", "steps", ",", "toPlot_av1", "-", "toPlot_error1_sub", ",", "toPlot_av1", "+", "toPlot_error1_add", ",", "\n", "alpha", "=", "0.5", ",", "edgecolor", "=", "'#FF3333'", ",", "facecolor", "=", "'#FF6666'", ")", "\n", "plt", ".", "plot", "(", "steps", ",", "toPlot_av2", ",", "label", "=", "\"label\"", ",", "c", "=", "'#0066CC'", ")", "\n", "plt", ".", "fill_between", "(", "steps", ",", "toPlot_av2", "-", "toPlot_error2_sub", ",", "toPlot_av2", "+", "toPlot_error2_add", ",", "\n", "alpha", "=", "0.5", ",", "edgecolor", "=", "'#3999FF'", ",", "facecolor", "=", "'#66B2FF'", ")", "\n", "plt", ".", "legend", "(", "[", "'group 1'", ",", "'group 2'", "]", ",", "loc", "=", "4", ")", "\n", "\n", "plt", ".", "savefig", "(", "data_path", "+", "name_run", "+", "'_variability_'", "+", "str", "(", "ind", ")", ",", "bbox_inches", "=", "'tight'", ")", "\n", "\n", "\n", "", "def", "plot_all", "(", "data_path", ",", "error_type", ",", "main_curve", ",", "gep", ")", ":", "\n", "    ", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "20", ",", "13", ")", ",", "frameon", "=", "False", ")", "\n", "run", "=", "{", "}", "\n", "run", "[", "'perfs'", "]", "=", "[", "]", "\n", "\n", "if", "gep", ":", "\n", "        ", "gep_perfs", "=", "np", ".", "loadtxt", "(", "data_path", "+", "'buffer_perfs'", ")", "\n", "\n", "", "for", "i", ",", "trial", "in", "enumerate", "(", "sorted", "(", "os", ".", "listdir", "(", "data_path", ")", ")", ")", ":", "\n", "\n", "        ", "if", "len", "(", "trial", ")", "<", "4", ":", "\n", "            ", "print", "(", "'Extracting: '", ",", "trial", ")", "\n", "filename", "=", "data_path", "+", "trial", "+", "'/progress.json'", "\n", "print", "(", "filename", ")", "\n", "steps", ",", "eval_rewards", "=", "extract_performances", "(", "filename", ")", "\n", "run", "[", "'perfs'", "]", ".", "append", "(", "eval_rewards", ")", "\n", "plt", ".", "xlabel", "(", "'steps'", ")", "\n", "plt", ".", "ylabel", "(", "'performance'", ")", "\n", "plt", ".", "title", "(", "name_algo", ")", "\n", "plt", ".", "plot", "(", "steps", ",", "eval_rewards", ")", "\n", "\n", "", "", "plt", ".", "savefig", "(", "data_path", "+", "'all_'", "+", "name_run", "+", "'_runs'", ",", "bbox_inches", "=", "'tight'", ")", "\n", "n_runs", "=", "len", "(", "run", "[", "'perfs'", "]", ")", "\n", "max_steps", "=", "0", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.scripts.extract_results.compare_stats": [[341, 389], ["print", "enumerate", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "scipy.stats.ks_2samp", "scipy.stats.ttest_ind", "scipy.stats.ks_2samp", "scipy.stats.ttest_ind", "bootstrapped.bootstrap_ab", "bootstrapped.bootstrap_ab", "numpy.zeros", "numpy.array", "numpy.array", "numpy.array", "numpy.savetxt", "print", "numpy.empty", "sorted", "numpy.sign", "numpy.sign", "numpy.sign", "numpy.sign", "os.listdir", "os.listdir", "numpy.loadtxt", "range", "numpy.loadtxt", "range", "scores_absolute.append", "scores_final.append", "numpy.sign", "numpy.sign"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append"], ["            ", "max_steps", "=", "len", "(", "run", "[", "'perfs'", "]", "[", "i", "]", ")", "\n", "", "", "max_steps", "=", "1001", "\n", "eval_perfs", "=", "np", ".", "empty", "(", "[", "n_runs", ",", "max_steps", "]", ")", "*", "(", "np", ".", "nan", ")", "\n", "for", "i", "in", "range", "(", "n_runs", ")", ":", "\n", "        ", "eval_perfs", "[", "i", ",", ":", "len", "(", "run", "[", "'perfs'", "]", "[", "i", "]", ")", "]", "=", "run", "[", "'perfs'", "]", "[", "i", "]", "\n", "\n", "", "steps", "=", "range", "(", "0", ",", "max_steps", "*", "2000", ",", "2000", ")", "\n", "\n", "if", "gep", ":", "\n", "        ", "for", "i", "in", "range", "(", "n_runs", ")", ":", "\n", "            ", "eval_perfs", "[", "i", ",", "251", ":", "]", "=", "eval_perfs", "[", "i", ",", ":", "750", "]", "\n", "eval_perfs", "[", "i", ",", "0", "]", "=", "0", "\n", "eval_perfs", "[", "i", ",", "1", ":", "251", "]", "=", "gep_perfs", "[", "i", "]", "\n", "\n", "", "", "if", "main_curve", "==", "'mean'", ":", "\n", "        ", "toPlot_av", "=", "np", ".", "nanmean", "(", "eval_perfs", ",", "axis", "=", "0", ")", "\n", "", "elif", "main_curve", "==", "'median'", ":", "\n", "        ", "toPlot_av", "=", "np", ".", "nanmedian", "(", "eval_perfs", ",", "axis", "=", "0", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "if", "error_type", "==", "'std'", ":", "\n", "        ", "toPlot_error_add", "=", "np", ".", "nanstd", "(", "eval_perfs", ",", "axis", "=", "0", ")", "\n", "toPlot_error_sub", "=", "np", ".", "nanstd", "(", "eval_perfs", ",", "axis", "=", "0", ")", "\n", "", "elif", "error_type", "==", "'sem'", ":", "\n", "        ", "toPlot_error_add", "=", "np", ".", "nanstd", "(", "eval_perfs", ",", "axis", "=", "0", ")", "/", "np", ".", "sqrt", "(", "n_runs", ")", "\n", "toPlot_error_sub", "=", "np", ".", "nanstd", "(", "eval_perfs", ",", "axis", "=", "0", ")", "/", "np", ".", "sqrt", "(", "n_runs", ")", "\n", "", "elif", "type", "(", "error_type", ")", "==", "int", ":", "\n", "        ", "assert", "(", "error_type", "<=", "100", "and", "error_type", ">", "0", ")", ",", "'error_type must be between 0 and 100'", "\n", "toPlot_error_add", "=", "np", ".", "nanpercentile", "(", "eval_perfs", ",", "int", "(", "100", "-", "(", "100", "-", "error_type", ")", "/", "2", ")", ",", "axis", "=", "0", ")", "-", "toPlot_av", "\n", "toPlot_error_sub", "=", "-", "np", ".", "nanpercentile", "(", "eval_perfs", ",", "int", "(", "(", "100", "-", "error_type", ")", "/", "2", ")", ",", "axis", "=", "0", ")", "+", "toPlot_av", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "if", "type", "(", "error_type", ")", "==", "int", ":", "\n", "        ", "error_type", "=", "str", "(", "error_type", ")", "+", "'%'", "\n", "", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "20", ",", "13", ")", ",", "frameon", "=", "False", ")", "\n", "plt", ".", "xlabel", "(", "\"time steps\"", ")", "\n", "plt", ".", "ylabel", "(", "\"performance\"", ")", "\n", "plt", ".", "title", "(", "name_algo", "+", "' '", "+", "main_curve", "+", "' ('", "+", "error_type", "+", "')'", ")", "\n", "plt", ".", "plot", "(", "steps", ",", "toPlot_av", ",", "label", "=", "\"label\"", ",", "c", "=", "'#0066CC'", ")", "\n", "plt", ".", "fill_between", "(", "steps", ",", "toPlot_av", "-", "toPlot_error_sub", ",", "toPlot_av", "+", "toPlot_error_add", ",", "\n", "alpha", "=", "0.5", ",", "edgecolor", "=", "'#3999FF'", ",", "facecolor", "=", "'#66B2FF'", ")", "\n", "#plt.legend()", "\n", "if", "gep", ":", "\n", "        ", "plt", ".", "axvline", "(", "x", "=", "500000", ",", "linestyle", "=", "'--'", ",", "color", "=", "'k'", ")", "\n", "", "plt", ".", "savefig", "(", "data_path", "+", "name_run", "+", "' '", "+", "main_curve", "+", "' ('", "+", "error_type", "+", "')'", ",", "bbox_inches", "=", "'tight'", ")", "\n", "np", ".", "savetxt", "(", "data_path", "+", "'eval_performances'", "+", "name_run", ",", "eval_perfs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flowersteam_geppg.scripts.extract_results.mean_scores": [[390, 412], ["enumerate", "numpy.array", "numpy.array", "numpy.array", "numpy.savetxt", "numpy.savetxt", "numpy.savetxt", "sorted", "os.listdir", "os.listdir", "len", "numpy.loadtxt", "np.array.append", "np.array.append", "np.array.mean", "np.array.std", "np.array.min", "np.array.max", "np.array.mean", "np.array.std", "np.array.min", "np.array.max"], "function", ["home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.mean", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.std", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.min", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.max", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.mean", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.std", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.min", "home.repos.pwc.inspect_result.flowersteam_geppg.common.tf_util.max"], ["\n", "\n", "\n", "", "def", "compute_scores_all", "(", "data_path", ",", "name_algo", ",", "gep", ")", ":", "\n", "    ", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "20", ",", "13", ")", ",", "frameon", "=", "False", ")", "\n", "hist_litt_scores", "=", "[", "]", "\n", "hist_our_scores", "=", "[", "]", "\n", "for", "i", ",", "trial", "in", "enumerate", "(", "sorted", "(", "os", ".", "listdir", "(", "data_path", ")", ")", ")", ":", "\n", "        ", "if", "len", "(", "trial", ")", "<", "4", ":", "\n", "            ", "if", "os", ".", "path", ".", "exists", "(", "data_path", "+", "trial", "+", "'/scores'", ")", ":", "\n", "                ", "tmp_scores", "=", "np", ".", "loadtxt", "(", "data_path", "+", "trial", "+", "'/scores'", ")", "\n", "hist_litt_scores", ".", "append", "(", "tmp_scores", "[", "0", ",", "0", "]", ")", "\n", "hist_our_scores", ".", "append", "(", "tmp_scores", "[", "1", ",", "0", "]", ")", "\n", "", "else", ":", "\n", "# actor_folder = data_path + trial + '/tf_save/' + 'best1_5M/'", "\n", "# for f in os.listdir(actor_folder):", "\n", "#     os.rename(actor_folder+f, actor_folder+f[:-2])", "\n", "                ", "toSave", "=", "np", ".", "zeros", "(", "[", "2", ",", "4", "]", ")", "\n", "print", "(", "'Computing score: '", ",", "trial", ")", "\n", "filename", "=", "data_path", "+", "trial", "+", "'/progress.json'", "\n", "print", "(", "filename", ")", "\n", "steps", ",", "eval_rewards", "=", "extract_performances", "(", "filename", ")", "\n", "if", "gep", ":", "\n"]]}